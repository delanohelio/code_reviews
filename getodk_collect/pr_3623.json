{"pr_number": 3623, "pr_title": "Changes for allowing files migration", "pr_author": "grzesiek2010", "pr_createdAt": "2020-02-05T15:24:52Z", "pr_url": "https://github.com/getodk/collect/pull/3623", "merge_commit": "8cd8a91f269c4515621075efb2de3006d0c21b30", "timeline": [{"oid": "e8c792063a9b0c171775e5e8e5f6ec1d6e0c392e", "url": "https://github.com/getodk/collect/commit/e8c792063a9b0c171775e5e8e5f6ec1d6e0c392e", "message": "Avoid multiclicking in StorageMigrationDialog", "committedDate": "2020-02-26T11:08:51Z", "type": "commit"}, {"oid": "ea71d20a2c26a592559e7c10b91a90a008af9f0e", "url": "https://github.com/getodk/collect/commit/ea71d20a2c26a592559e7c10b91a90a008af9f0e", "message": "Fixed build", "committedDate": "2020-02-26T11:08:51Z", "type": "commit"}, {"oid": "f8f0e62074699778d3456198e3063fc9fce71dcc", "url": "https://github.com/getodk/collect/commit/f8f0e62074699778d3456198e3063fc9fce71dcc", "message": "Code improvements", "committedDate": "2020-02-26T11:10:51Z", "type": "commit"}, {"oid": "547bd2964fbf622ea6a509213c86d928f4b471a1", "url": "https://github.com/getodk/collect/commit/547bd2964fbf622ea6a509213c86d928f4b471a1", "message": "Improved communication MainMenuActivity->StorageMigrationDialog", "committedDate": "2020-02-26T11:10:51Z", "type": "commit"}, {"oid": "617641fb3dcf0b6eb5d6b87cadbd1eb345eb4cd2", "url": "https://github.com/getodk/collect/commit/617641fb3dcf0b6eb5d6b87cadbd1eb345eb4cd2", "message": "Added new TextAppearance.Collect.Button.TextButton style", "committedDate": "2020-02-26T11:10:51Z", "type": "commit"}, {"oid": "ef2a7f78d75c5d01f041cf075393998e1e181c69", "url": "https://github.com/getodk/collect/commit/ef2a7f78d75c5d01f041cf075393998e1e181c69", "message": "Removed unused method", "committedDate": "2020-02-26T11:10:51Z", "type": "commit"}, {"oid": "2dc78a9857fa4b78c5e388fb8e90a7e2e9ac9d63", "url": "https://github.com/getodk/collect/commit/2dc78a9857fa4b78c5e388fb8e90a7e2e9ac9d63", "message": "Fixed creating StorageMigrationDialog", "committedDate": "2020-02-26T11:11:10Z", "type": "commit"}, {"oid": "0312b5d053ea20ebef917682fc4e5a1e7b95879b", "url": "https://github.com/getodk/collect/commit/0312b5d053ea20ebef917682fc4e5a1e7b95879b", "message": "Use MaterialButton  instead of TextView for moreDetailsButton", "committedDate": "2020-02-26T11:11:10Z", "type": "commit"}, {"oid": "3c19f68a57968acb75477776c2a76a21eeb82e92", "url": "https://github.com/getodk/collect/commit/3c19f68a57968acb75477776c2a76a21eeb82e92", "message": "Handle offline map layer", "committedDate": "2020-02-26T11:11:47Z", "type": "commit"}, {"oid": "4a127cc6137823a930eb0ceaa4ab6bcfd5f482b1", "url": "https://github.com/getodk/collect/commit/4a127cc6137823a930eb0ceaa4ab6bcfd5f482b1", "message": "Fixed storage paths in tests", "committedDate": "2020-02-26T11:11:47Z", "type": "commit"}, {"oid": "b41f872629c599595fe83d27e27fc5ee3bdc1ca2", "url": "https://github.com/getodk/collect/commit/b41f872629c599595fe83d27e27fc5ee3bdc1ca2", "message": "Improved existed tests", "committedDate": "2020-02-26T11:11:47Z", "type": "commit"}, {"oid": "814be2d8de1cc8a134d0f89eb27cc9c98d2403fa", "url": "https://github.com/getodk/collect/commit/814be2d8de1cc8a134d0f89eb27cc9c98d2403fa", "message": "Code improvements", "committedDate": "2020-02-26T11:11:47Z", "type": "commit"}, {"oid": "6fb6cab6cbbe6a22adb2da565564ea32ce4548c1", "url": "https://github.com/getodk/collect/commit/6fb6cab6cbbe6a22adb2da565564ea32ce4548c1", "message": "Reset ReferenceManager", "committedDate": "2020-02-26T11:11:47Z", "type": "commit"}, {"oid": "9d04a5672c2071faa716647cc0cf54862adc9e76", "url": "https://github.com/getodk/collect/commit/9d04a5672c2071faa716647cc0cf54862adc9e76", "message": "Improved handling offline map layer paths", "committedDate": "2020-02-26T11:11:47Z", "type": "commit"}, {"oid": "c39d25aab5dc9a179da718d7aa0174b4e261cc36", "url": "https://github.com/getodk/collect/commit/c39d25aab5dc9a179da718d7aa0174b4e261cc36", "message": "Don't use database observer when migartion in being performed to avoid blocking UI", "committedDate": "2020-02-26T11:11:47Z", "type": "commit"}, {"oid": "e0b5bae7a2eed421472d1ad6fab63422a8858cdd", "url": "https://github.com/getodk/collect/commit/e0b5bae7a2eed421472d1ad6fab63422a8858cdd", "message": "Keep the right migration dialog state if a user leaves and returns to the app", "committedDate": "2020-02-26T11:11:47Z", "type": "commit"}, {"oid": "a5c897dec0f05de683426d46fb6d78c1c74f9e51", "url": "https://github.com/getodk/collect/commit/a5c897dec0f05de683426d46fb6d78c1c74f9e51", "message": "Fixed checking if AutoSendWOrker is running", "committedDate": "2020-02-26T11:11:47Z", "type": "commit"}, {"oid": "12853f65d142faabd8005c5d9eff91b1bbaf140b", "url": "https://github.com/getodk/collect/commit/12853f65d142faabd8005c5d9eff91b1bbaf140b", "message": "Added StorageMigrationCompletedBannerTest", "committedDate": "2020-02-26T11:11:47Z", "type": "commit"}, {"oid": "12853f65d142faabd8005c5d9eff91b1bbaf140b", "url": "https://github.com/getodk/collect/commit/12853f65d142faabd8005c5d9eff91b1bbaf140b", "message": "Added StorageMigrationCompletedBannerTest", "committedDate": "2020-02-26T11:11:47Z", "type": "forcePushed"}, {"oid": "d932897283f63bc10c8f0d3c307d2626ab93d777", "url": "https://github.com/getodk/collect/commit/d932897283f63bc10c8f0d3c307d2626ab93d777", "message": "Fixed strings", "committedDate": "2020-02-26T11:34:44Z", "type": "commit"}, {"oid": "c45f65acd72ff9f01afc7bb579b52f2bc92be96e", "url": "https://github.com/getodk/collect/commit/c45f65acd72ff9f01afc7bb579b52f2bc92be96e", "message": "Added StorageMigrationBannerTest", "committedDate": "2020-02-26T12:03:47Z", "type": "commit"}, {"oid": "1d780ec0a7609eda5ee634ac693ae47605f1b08f", "url": "https://github.com/getodk/collect/commit/1d780ec0a7609eda5ee634ac693ae47605f1b08f", "message": "AddedStorageMigrationDialogTest", "committedDate": "2020-02-26T15:10:20Z", "type": "commit"}, {"oid": "a1034deb4bf1eaed73692004882274dcd727b3fb", "url": "https://github.com/getodk/collect/commit/a1034deb4bf1eaed73692004882274dcd727b3fb", "message": "Improved checking if background form downloader is running and added tests", "committedDate": "2020-02-27T15:11:23Z", "type": "commit"}, {"oid": "a1034deb4bf1eaed73692004882274dcd727b3fb", "url": "https://github.com/getodk/collect/commit/a1034deb4bf1eaed73692004882274dcd727b3fb", "message": "Improved checking if background form downloader is running and added tests", "committedDate": "2020-02-27T15:11:23Z", "type": "forcePushed"}, {"oid": "254db8e944289890ab6bd7ada703a0b0acd9333d", "url": "https://github.com/getodk/collect/commit/254db8e944289890ab6bd7ada703a0b0acd9333d", "message": "Avoid displaying the banner again if it has been dismissed", "committedDate": "2020-02-27T19:49:22Z", "type": "commit"}, {"oid": "6fa5889f33389d20aa9be84860733f0c03d64927", "url": "https://github.com/getodk/collect/commit/6fa5889f33389d20aa9be84860733f0c03d64927", "message": "Added ScrollView to StorageMigrationDialog and moved the error TextView up", "committedDate": "2020-02-27T23:57:35Z", "type": "forcePushed"}, {"oid": "ee7e81876ea2c5577ee3912d88f9668e83940ce5", "url": "https://github.com/getodk/collect/commit/ee7e81876ea2c5577ee3912d88f9668e83940ce5", "message": "Added ScrollView to StorageMigrationDialog and moved the error TextView up", "committedDate": "2020-02-28T00:03:33Z", "type": "forcePushed"}, {"oid": "6122d41e691690eba139299b3a895a6a1bc947e1", "url": "https://github.com/getodk/collect/commit/6122d41e691690eba139299b3a895a6a1bc947e1", "message": "Added ScrollView to StorageMigrationDialog and moved the error TextView up", "committedDate": "2020-02-28T00:08:39Z", "type": "commit"}, {"oid": "6122d41e691690eba139299b3a895a6a1bc947e1", "url": "https://github.com/getodk/collect/commit/6122d41e691690eba139299b3a895a6a1bc947e1", "message": "Added ScrollView to StorageMigrationDialog and moved the error TextView up", "committedDate": "2020-02-28T00:08:39Z", "type": "forcePushed"}, {"oid": "e3257f08b49ad8ceb26e82a3cc4fa14a726dbd25", "url": "https://github.com/getodk/collect/commit/e3257f08b49ad8ceb26e82a3cc4fa14a726dbd25", "message": "Code improvements and tests", "committedDate": "2020-02-28T10:17:40Z", "type": "forcePushed"}, {"oid": "9c0949e42542d0000b93e621ba462044007a808b", "url": "https://github.com/getodk/collect/commit/9c0949e42542d0000b93e621ba462044007a808b", "message": "Code improvements and tests", "committedDate": "2020-02-28T10:45:25Z", "type": "forcePushed"}, {"oid": "2ecf4f6adbbdf88f14be4aaff53c973b9519160b", "url": "https://github.com/getodk/collect/commit/2ecf4f6adbbdf88f14be4aaff53c973b9519160b", "message": "Code improvements and tests", "committedDate": "2020-02-28T10:47:43Z", "type": "commit"}, {"oid": "2ecf4f6adbbdf88f14be4aaff53c973b9519160b", "url": "https://github.com/getodk/collect/commit/2ecf4f6adbbdf88f14be4aaff53c973b9519160b", "message": "Code improvements and tests", "committedDate": "2020-02-28T10:47:43Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTYyODQ1MA==", "url": "https://github.com/getodk/collect/pull/3623#discussion_r385628450", "body": "Really liking this use of `@Rule`! I think it'd be good to still have the `ResetStateRule` and standard permssion rules for these tests just to make sure they are starting fresh.", "bodyText": "Really liking this use of @Rule! I think it'd be good to still have the ResetStateRule and standard permssion rules for these tests just to make sure they are starting fresh.", "bodyHTML": "<p dir=\"auto\">Really liking this use of <code>@Rule</code>! I think it'd be good to still have the <code>ResetStateRule</code> and standard permssion rules for these tests just to make sure they are starting fresh.</p>", "author": "seadowg", "createdAt": "2020-02-28T10:49:00Z", "path": "collect_app/src/androidTest/java/org/odk/collect/android/storage/StorageMigrationBannerTest.java", "diffHunk": "@@ -0,0 +1,36 @@\n+package org.odk.collect.android.storage;\n+\n+import androidx.test.rule.ActivityTestRule;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.odk.collect.android.activities.MainMenuActivity;\n+import org.odk.collect.android.support.StorageMigrationNotPerformedRule;\n+import org.odk.collect.android.support.pages.MainMenuPage;\n+\n+public class StorageMigrationBannerTest {\n+\n+    @Rule\n+    public ActivityTestRule<MainMenuActivity> main = new ActivityTestRule<>(MainMenuActivity.class);\n+\n+    @Rule\n+    public StorageMigrationNotPerformedRule storageMigrationNotPerformedRule = new StorageMigrationNotPerformedRule();", "originalCommit": "2ecf4f6adbbdf88f14be4aaff53c973b9519160b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjMxMTA0Nw==", "url": "https://github.com/getodk/collect/pull/3623#discussion_r386311047", "bodyText": "Done, but when it comes to the new rule I removed it because it was called too late. I needed to override beforeActivityLaunched like here f6073fa#diff-031d2e263a9e3d4064f608116ef282e4R34", "author": "grzesiek2010", "createdAt": "2020-03-02T10:29:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTYyODQ1MA=="}], "type": "inlineReview", "revised_code": {"commit": "f3e818eeed7fbd3c966e900732ea8a41ad362e94", "changed_code": [{"header": "diff --git a/collect_app/src/androidTest/java/org/odk/collect/android/storage/StorageMigrationBannerTest.java b/collect_app/src/androidTest/java/org/odk/collect/android/storage/StorageMigrationBannerTest.java\ndeleted file mode 100644\nindex cc893ccfd..000000000\n--- a/collect_app/src/androidTest/java/org/odk/collect/android/storage/StorageMigrationBannerTest.java\n+++ /dev/null\n", "chunk": "@@ -1,36 +0,0 @@\n-package org.odk.collect.android.storage;\n-\n-import androidx.test.rule.ActivityTestRule;\n-\n-import org.junit.Rule;\n-import org.junit.Test;\n-import org.odk.collect.android.activities.MainMenuActivity;\n-import org.odk.collect.android.support.StorageMigrationNotPerformedRule;\n-import org.odk.collect.android.support.pages.MainMenuPage;\n-\n-public class StorageMigrationBannerTest {\n-\n-    @Rule\n-    public ActivityTestRule<MainMenuActivity> main = new ActivityTestRule<>(MainMenuActivity.class);\n-\n-    @Rule\n-    public StorageMigrationNotPerformedRule storageMigrationNotPerformedRule = new StorageMigrationNotPerformedRule();\n-\n-    @Test\n-    public void when_storageMigrationNotPerformed_should_bannerBeVisible() {\n-        new MainMenuPage(main)\n-                .assertStorageMigrationBannerIsDisplayed()\n-                .rotateToLandscape(new MainMenuPage(main))\n-                .assertStorageMigrationBannerIsDisplayed()\n-                .rotateToPortrait(new MainMenuPage(main))\n-                .assertStorageMigrationBannerIsDisplayed()\n-                .reopenApp()\n-                .assertStorageMigrationBannerIsDisplayed();\n-    }\n-\n-    @Test\n-    public void when_learMoreButtonClicked_should_storageMigrationDialogAppear() {\n-        new MainMenuPage(main)\n-                .clickLearnMoreButton();\n-    }\n-}\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTYyOTI5NQ==", "url": "https://github.com/getodk/collect/pull/3623#discussion_r385629295", "body": "I think you'd be fine to combine this with the previous test as one flow. I think we can also move rotation/reopen testing out of Espresso for these cases but I'll have a quick think about that and get back to you on that.", "bodyText": "I think you'd be fine to combine this with the previous test as one flow. I think we can also move rotation/reopen testing out of Espresso for these cases but I'll have a quick think about that and get back to you on that.", "bodyHTML": "<p dir=\"auto\">I think you'd be fine to combine this with the previous test as one flow. I think we can also move rotation/reopen testing out of Espresso for these cases but I'll have a quick think about that and get back to you on that.</p>", "author": "seadowg", "createdAt": "2020-02-28T10:50:54Z", "path": "collect_app/src/androidTest/java/org/odk/collect/android/storage/StorageMigrationBannerTest.java", "diffHunk": "@@ -0,0 +1,36 @@\n+package org.odk.collect.android.storage;\n+\n+import androidx.test.rule.ActivityTestRule;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.odk.collect.android.activities.MainMenuActivity;\n+import org.odk.collect.android.support.StorageMigrationNotPerformedRule;\n+import org.odk.collect.android.support.pages.MainMenuPage;\n+\n+public class StorageMigrationBannerTest {\n+\n+    @Rule\n+    public ActivityTestRule<MainMenuActivity> main = new ActivityTestRule<>(MainMenuActivity.class);\n+\n+    @Rule\n+    public StorageMigrationNotPerformedRule storageMigrationNotPerformedRule = new StorageMigrationNotPerformedRule();\n+\n+    @Test\n+    public void when_storageMigrationNotPerformed_should_bannerBeVisible() {\n+        new MainMenuPage(main)\n+                .assertStorageMigrationBannerIsDisplayed()\n+                .rotateToLandscape(new MainMenuPage(main))\n+                .assertStorageMigrationBannerIsDisplayed()\n+                .rotateToPortrait(new MainMenuPage(main))\n+                .assertStorageMigrationBannerIsDisplayed()\n+                .reopenApp()\n+                .assertStorageMigrationBannerIsDisplayed();\n+    }\n+\n+    @Test\n+    public void when_learMoreButtonClicked_should_storageMigrationDialogAppear() {\n+        new MainMenuPage(main)", "originalCommit": "2ecf4f6adbbdf88f14be4aaff53c973b9519160b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTYzNjI0Mw==", "url": "https://github.com/getodk/collect/pull/3623#discussion_r385636243", "bodyText": "Yeah you should be able to use the ActivityScenario in AndroidX testing and just call recreate to test recreation (otation is really just that). We're using it for a fragment test in FormMetadataFragmentTest. We should be able to use this kind of pattern to test the MainMenuActivity directly rather than having to worry about rotation/recreation at the Espresso level.", "author": "seadowg", "createdAt": "2020-02-28T11:06:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTYyOTI5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjMzNjU4Mw==", "url": "https://github.com/getodk/collect/pull/3623#discussion_r386336583", "bodyText": "think you'd be fine to combine this with the previous test as one flow.\n\nDone.\nwhen it comes to screen rotation I used recreate in some cases for example where I wanted to simulate that the app is reopened. However in this case rotation and recreation differ. In MainMenuActivity we use\nandroid:configChanges=\"locale|orientation|screenSize\"\nthat means onDestroy won't be called if you rotate your device so I expect a different behavior compared to recreation. For example if we have the banner with success msg it should disappear after reopening the app but should be still visible after simple rotation.", "author": "grzesiek2010", "createdAt": "2020-03-02T11:23:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTYyOTI5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "f3e818eeed7fbd3c966e900732ea8a41ad362e94", "changed_code": [{"header": "diff --git a/collect_app/src/androidTest/java/org/odk/collect/android/storage/StorageMigrationBannerTest.java b/collect_app/src/androidTest/java/org/odk/collect/android/storage/StorageMigrationBannerTest.java\ndeleted file mode 100644\nindex cc893ccfd..000000000\n--- a/collect_app/src/androidTest/java/org/odk/collect/android/storage/StorageMigrationBannerTest.java\n+++ /dev/null\n", "chunk": "@@ -1,36 +0,0 @@\n-package org.odk.collect.android.storage;\n-\n-import androidx.test.rule.ActivityTestRule;\n-\n-import org.junit.Rule;\n-import org.junit.Test;\n-import org.odk.collect.android.activities.MainMenuActivity;\n-import org.odk.collect.android.support.StorageMigrationNotPerformedRule;\n-import org.odk.collect.android.support.pages.MainMenuPage;\n-\n-public class StorageMigrationBannerTest {\n-\n-    @Rule\n-    public ActivityTestRule<MainMenuActivity> main = new ActivityTestRule<>(MainMenuActivity.class);\n-\n-    @Rule\n-    public StorageMigrationNotPerformedRule storageMigrationNotPerformedRule = new StorageMigrationNotPerformedRule();\n-\n-    @Test\n-    public void when_storageMigrationNotPerformed_should_bannerBeVisible() {\n-        new MainMenuPage(main)\n-                .assertStorageMigrationBannerIsDisplayed()\n-                .rotateToLandscape(new MainMenuPage(main))\n-                .assertStorageMigrationBannerIsDisplayed()\n-                .rotateToPortrait(new MainMenuPage(main))\n-                .assertStorageMigrationBannerIsDisplayed()\n-                .reopenApp()\n-                .assertStorageMigrationBannerIsDisplayed();\n-    }\n-\n-    @Test\n-    public void when_learMoreButtonClicked_should_storageMigrationDialogAppear() {\n-        new MainMenuPage(main)\n-                .clickLearnMoreButton();\n-    }\n-}\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTYzMDM4OQ==", "url": "https://github.com/getodk/collect/pull/3623#discussion_r385630389", "body": "I'm wondering if it might make sense to combine these tests with the `StorageMigrationBannerTest` as one file that tests the migration flow.", "bodyText": "I'm wondering if it might make sense to combine these tests with the StorageMigrationBannerTest as one file that tests the migration flow.", "bodyHTML": "<p dir=\"auto\">I'm wondering if it might make sense to combine these tests with the <code>StorageMigrationBannerTest</code> as one file that tests the migration flow.</p>", "author": "seadowg", "createdAt": "2020-02-28T10:53:17Z", "path": "collect_app/src/androidTest/java/org/odk/collect/android/storage/StorageMigrationDialogTest.java", "diffHunk": "@@ -0,0 +1,80 @@\n+package org.odk.collect.android.storage;\n+\n+import android.Manifest;\n+\n+import androidx.test.espresso.intent.rule.IntentsTestRule;\n+import androidx.test.rule.GrantPermissionRule;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.RuleChain;\n+import org.odk.collect.android.activities.MainMenuActivity;\n+import org.odk.collect.android.support.CopyFormRule;\n+import org.odk.collect.android.support.ResetStateRule;\n+import org.odk.collect.android.support.StorageMigrationNotPerformedRule;\n+import org.odk.collect.android.support.pages.MainMenuPage;\n+import org.odk.collect.android.support.pages.StorageMigrationDialogPage;\n+\n+public class StorageMigrationDialogTest {", "originalCommit": "2ecf4f6adbbdf88f14be4aaff53c973b9519160b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjMxMDI0MA==", "url": "https://github.com/getodk/collect/pull/3623#discussion_r386310240", "bodyText": "Done.", "author": "grzesiek2010", "createdAt": "2020-03-02T10:28:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTYzMDM4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "f3e818eeed7fbd3c966e900732ea8a41ad362e94", "changed_code": [{"header": "diff --git a/collect_app/src/androidTest/java/org/odk/collect/android/storage/StorageMigrationDialogTest.java b/collect_app/src/androidTest/java/org/odk/collect/android/storage/StorageMigrationDialogTest.java\ndeleted file mode 100644\nindex 6329c1f62..000000000\n--- a/collect_app/src/androidTest/java/org/odk/collect/android/storage/StorageMigrationDialogTest.java\n+++ /dev/null\n", "chunk": "@@ -1,80 +0,0 @@\n-package org.odk.collect.android.storage;\n-\n-import android.Manifest;\n-\n-import androidx.test.espresso.intent.rule.IntentsTestRule;\n-import androidx.test.rule.GrantPermissionRule;\n-\n-import org.junit.Rule;\n-import org.junit.Test;\n-import org.junit.rules.RuleChain;\n-import org.odk.collect.android.activities.MainMenuActivity;\n-import org.odk.collect.android.support.CopyFormRule;\n-import org.odk.collect.android.support.ResetStateRule;\n-import org.odk.collect.android.support.StorageMigrationNotPerformedRule;\n-import org.odk.collect.android.support.pages.MainMenuPage;\n-import org.odk.collect.android.support.pages.StorageMigrationDialogPage;\n-\n-public class StorageMigrationDialogTest {\n-\n-    @Rule\n-    public IntentsTestRule<MainMenuActivity> main = new IntentsTestRule<>(MainMenuActivity.class);\n-\n-    @Rule\n-    public RuleChain copyFormChain = RuleChain\n-            .outerRule(GrantPermissionRule.grant(\n-                    Manifest.permission.READ_EXTERNAL_STORAGE,\n-                    Manifest.permission.WRITE_EXTERNAL_STORAGE\n-            ))\n-            .around(new StorageMigrationNotPerformedRule())\n-            .around(new ResetStateRule())\n-            .around(new CopyFormRule(\"basic.xml\", true));\n-\n-    @Test\n-    public void when_thereAreNoSavedForms_should_thePromptToSubmitFormsBeNotVisible() {\n-        new MainMenuPage(main)\n-                .clickLearnMoreButton()\n-                .assertStorageMigrationContentWithoutSavedFormsIsVisible();\n-    }\n-\n-    @Test\n-    public void when_savedFormsExist_should_thePromptToSubmitFormsBeVisible() {\n-        new MainMenuPage(main)\n-                .startBlankForm(\"basic\")\n-                .swipeToNextQuestion()\n-                .swipeToNextQuestion()\n-                .clickSaveAndExit()\n-                .clickLearnMoreButton()\n-                .assertStorageMigrationContentWithSavedFormsIsVisible();\n-    }\n-\n-    @Test\n-    public void when_moreDetailsButtonClicked_should_odkForumPageAppear() {\n-        new MainMenuPage(main)\n-                .clickLearnMoreButton()\n-                .clickMoreDetails()\n-                .assertWebViewOpen();\n-    }\n-\n-    @Test\n-    public void when_backButtonPressed_should_storageMigrationDialogPersist() {\n-        new MainMenuPage(main)\n-                .clickLearnMoreButton()\n-                .pressBack(new StorageMigrationDialogPage(main));\n-    }\n-\n-    @Test\n-    public void when_cancelButtonPressed_should_storageMigrationDialogBeClosed() {\n-        new MainMenuPage(main)\n-                .clickLearnMoreButton()\n-                .clickCancel();\n-    }\n-\n-    @Test\n-    public void when_rotationHappens_should_storageMigrationDialogPersist() {\n-        new MainMenuPage(main)\n-                .clickLearnMoreButton()\n-                .rotateToLandscape(new StorageMigrationDialogPage(main))\n-                .rotateToPortrait(new StorageMigrationDialogPage(main));\n-    }\n-}\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTYzMDg2Mw==", "url": "https://github.com/getodk/collect/pull/3623#discussion_r385630863", "body": "Same again: feels like we might be able to just combine these with the other migration tests", "bodyText": "Same again: feels like we might be able to just combine these with the other migration tests", "bodyHTML": "<p dir=\"auto\">Same again: feels like we might be able to just combine these with the other migration tests</p>", "author": "seadowg", "createdAt": "2020-02-28T10:54:15Z", "path": "collect_app/src/androidTest/java/org/odk/collect/android/storage/StorageMigrationTest.java", "diffHunk": "@@ -0,0 +1,39 @@\n+package org.odk.collect.android.storage;\n+\n+import android.Manifest;\n+\n+import androidx.test.espresso.intent.rule.IntentsTestRule;\n+import androidx.test.rule.GrantPermissionRule;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.RuleChain;\n+import org.odk.collect.android.activities.MainMenuActivity;\n+import org.odk.collect.android.support.CopyFormRule;\n+import org.odk.collect.android.support.ResetStateRule;\n+import org.odk.collect.android.support.StorageMigrationNotPerformedRule;\n+import org.odk.collect.android.support.pages.MainMenuPage;\n+\n+public class StorageMigrationTest {\n+\n+    @Rule\n+    public IntentsTestRule<MainMenuActivity> main = new IntentsTestRule<>(MainMenuActivity.class);\n+\n+    @Rule\n+    public RuleChain copyFormChain = RuleChain\n+            .outerRule(GrantPermissionRule.grant(\n+                    Manifest.permission.READ_EXTERNAL_STORAGE,\n+                    Manifest.permission.WRITE_EXTERNAL_STORAGE\n+            ))\n+            .around(new StorageMigrationNotPerformedRule())\n+            .around(new ResetStateRule())\n+            .around(new CopyFormRule(\"basic.xml\", true));\n+\n+    @Test\n+    public void when_migrationIsFinishedWIthSuccess_should_storageMigrationDialogDisappear() {\n+        new MainMenuPage(main)", "originalCommit": "2ecf4f6adbbdf88f14be4aaff53c973b9519160b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjMxMDI4NQ==", "url": "https://github.com/getodk/collect/pull/3623#discussion_r386310285", "bodyText": "Done.", "author": "grzesiek2010", "createdAt": "2020-03-02T10:28:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTYzMDg2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "699219afb14b1f2eccc3752e8e0bb4b4ba4aebc5", "changed_code": [{"header": "diff --git a/collect_app/src/androidTest/java/org/odk/collect/android/storage/StorageMigrationTest.java b/collect_app/src/androidTest/java/org/odk/collect/android/storage/StorageMigrationTest.java\nindex 62a8a7796..97aed465f 100644\n--- a/collect_app/src/androidTest/java/org/odk/collect/android/storage/StorageMigrationTest.java\n+++ b/collect_app/src/androidTest/java/org/odk/collect/android/storage/StorageMigrationTest.java\n", "chunk": "@@ -25,15 +23,62 @@ public class StorageMigrationTest {\n                     Manifest.permission.READ_EXTERNAL_STORAGE,\n                     Manifest.permission.WRITE_EXTERNAL_STORAGE\n             ))\n-            .around(new StorageMigrationNotPerformedRule())\n             .around(new ResetStateRule())\n-            .around(new CopyFormRule(\"basic.xml\", true));\n+            .around(new CopyFormRule(\"formWithExternalFiles.xml\", Arrays.asList(\"formWithExternalFiles-media/itemsets.csv\", \"formWithExternalFiles-media/fruits.xml\", \"formWithExternalFiles-media/fruits.csv\", \"formWithExternalFiles-media/last-saved.xml\"), true));\n+\n+    @Rule\n+    public ActivityTestRule<MainMenuActivity> main = new ActivityTestRule<MainMenuActivity>(MainMenuActivity.class) {\n+        @Override\n+        protected void beforeActivityLaunched() {\n+            new StorageStateProvider().disableUsingScopedStorage();\n+        }\n+    };\n \n     @Test\n-    public void when_migrationIsFinishedWIthSuccess_should_storageMigrationDialogDisappear() {\n+    public void when_migrationIsFinishedWithSuccess_should_formsWorkAsBefore() {\n+        // Fill the form with external files and migrate\n         new MainMenuPage(main)\n+                .startBlankForm(\"formWithExternalFiles\")\n+                .putTextOnIndex(0, \"John\")\n+                .swipeToNextQuestion()\n+                .swipeToNextQuestion()\n+                .swipeToNextQuestion()\n+                .swipeToNextQuestion()\n+                .swipeToNextQuestion()\n+                .clickSaveAndExit()\n                 .clickLearnMoreButton()\n                 .clickMigrate()\n                 .assertStorageMigrationCompletedBannerIsDisplayed();\n+\n+        // Open the saved form\n+        new MainMenuPage(main)\n+                .clickEditSavedForm()\n+                .clickOnForm(\"formWithExternalFiles\")\n+                .clickGoToStart()\n+                .assertText(\"John\")\n+                .swipeToNextQuestion()\n+                .assertText(\"Apple\", \"Melon\")\n+                .swipeToNextQuestion()\n+                .assertText(\"Mango\", \"Oranges\")\n+                .swipeToNextQuestion()\n+                .assertText(\"Plum\", \"Cherry\")\n+                .swipeToNextQuestion()\n+                .assertText(\"The fruit Cherry from pulldata function\")\n+                .swipeToNextQuestion()\n+                .clickSaveAndExit();\n+\n+        // Fill another form\n+        new MainMenuPage(main)\n+                .startBlankForm(\"formWithExternalFiles\")\n+                .putTextOnIndex(0, \"John\")\n+                .swipeToNextQuestion()\n+                .clickOnText(\"Apple\")\n+                .swipeToNextQuestion()\n+                .clickOnText(\"Mango\")\n+                .swipeToNextQuestion()\n+                .clickOnText(\"Cherry\")\n+                .swipeToNextQuestion()\n+                .swipeToNextQuestion()\n+                .clickSaveAndExit();\n     }\n }\n", "next_change": {"commit": "f3e818eeed7fbd3c966e900732ea8a41ad362e94", "changed_code": [{"header": "diff --git a/collect_app/src/androidTest/java/org/odk/collect/android/storage/StorageMigrationTest.java b/collect_app/src/androidTest/java/org/odk/collect/android/storage/StorageMigrationTest.java\nindex 97aed465f..9cab4462f 100644\n--- a/collect_app/src/androidTest/java/org/odk/collect/android/storage/StorageMigrationTest.java\n+++ b/collect_app/src/androidTest/java/org/odk/collect/android/storage/StorageMigrationTest.java\n", "chunk": "@@ -81,4 +82,67 @@ public class StorageMigrationTest {\n                 .swipeToNextQuestion()\n                 .clickSaveAndExit();\n     }\n+\n+    @Test\n+    public void when_storageMigrationNotPerformed_should_bannerBeVisible() {\n+        new MainMenuPage(main)\n+                .assertStorageMigrationBannerIsDisplayed()\n+                .rotateToLandscape(new MainMenuPage(main))\n+                .assertStorageMigrationBannerIsDisplayed()\n+                .rotateToPortrait(new MainMenuPage(main))\n+                .assertStorageMigrationBannerIsDisplayed()\n+                .recreateActivity()\n+                .assertStorageMigrationBannerIsDisplayed();\n+    }\n+\n+    @Test\n+    public void when_thereAreNoSavedForms_should_thePromptToSubmitFormsBeNotVisible() {\n+        new MainMenuPage(main)\n+                .clickLearnMoreButton()\n+                .assertStorageMigrationContentWithoutSavedFormsIsVisible();\n+    }\n+\n+    @Test\n+    public void when_savedFormsExist_should_thePromptToSubmitFormsBeVisible() {\n+        new MainMenuPage(main)\n+                .startBlankForm(\"formWithExternalFiles\")\n+                .swipeToNextQuestion()\n+                .swipeToNextQuestion()\n+                .swipeToNextQuestion()\n+                .swipeToNextQuestion()\n+                .swipeToNextQuestion()\n+                .clickSaveAndExit()\n+                .clickLearnMoreButton()\n+                .assertStorageMigrationContentWithSavedFormsIsVisible();\n+    }\n+\n+    @Test\n+    public void when_moreDetailsButtonClicked_should_odkForumPageAppear() {\n+        new MainMenuPage(main)\n+                .clickLearnMoreButton()\n+                .clickMoreDetails()\n+                .assertWebViewOpen();\n+    }\n+\n+    @Test\n+    public void when_backButtonPressed_should_storageMigrationDialogPersist() {\n+        new MainMenuPage(main)\n+                .clickLearnMoreButton()\n+                .pressBack(new StorageMigrationDialogPage(main));\n+    }\n+\n+    @Test\n+    public void when_cancelButtonPressed_should_storageMigrationDialogBeClosed() {\n+        new MainMenuPage(main)\n+                .clickLearnMoreButton()\n+                .clickCancel();\n+    }\n+\n+    @Test\n+    public void when_rotationHappens_should_storageMigrationDialogPersist() {\n+        new MainMenuPage(main)\n+                .clickLearnMoreButton()\n+                .rotateToLandscape(new StorageMigrationDialogPage(main))\n+                .rotateToPortrait(new StorageMigrationDialogPage(main));\n+    }\n }\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTY0MDkyNA==", "url": "https://github.com/getodk/collect/pull/3623#discussion_r385640924", "body": "I'm wondering if there is a way we could test that the StorageMigrator does the right thing when these jobs are runnign without actually having to start them up (and also have tests that run in the JVM). As far as I can see these tests are non deterministic due to the waits and background work. \r\n\r\nI know Google released some testing around `WorkManager` so I can have a look and see if there is anything we can use there. Ideally we can fake the state of work or have it run paused or something. This wouldn't solve for the `JobManager` stuff though, Alternatively, for the moment we could hide the logic around looking up the statuses of these pieces of background work behind an interface that we can sub out for the `StorageMigrator`'s unit test (probably as a constructor arg):\r\n\r\n```java\r\npublic interface WorkStatusProvider {\r\n    public boolean isFormDownloaderRunning();\r\n    public boolean isFormUploaderRunning();\r\n}\r\n```\r\n\r\nThis would also mean that objects like the `StorageMigrator` wouldn't have to care about the details involved of fetching those statuses.", "bodyText": "I'm wondering if there is a way we could test that the StorageMigrator does the right thing when these jobs are runnign without actually having to start them up (and also have tests that run in the JVM). As far as I can see these tests are non deterministic due to the waits and background work.\nI know Google released some testing around WorkManager so I can have a look and see if there is anything we can use there. Ideally we can fake the state of work or have it run paused or something. This wouldn't solve for the JobManager stuff though, Alternatively, for the moment we could hide the logic around looking up the statuses of these pieces of background work behind an interface that we can sub out for the StorageMigrator's unit test (probably as a constructor arg):\npublic interface WorkStatusProvider {\n    public boolean isFormDownloaderRunning();\n    public boolean isFormUploaderRunning();\n}\nThis would also mean that objects like the StorageMigrator wouldn't have to care about the details involved of fetching those statuses.", "bodyHTML": "<p dir=\"auto\">I'm wondering if there is a way we could test that the StorageMigrator does the right thing when these jobs are runnign without actually having to start them up (and also have tests that run in the JVM). As far as I can see these tests are non deterministic due to the waits and background work.</p>\n<p dir=\"auto\">I know Google released some testing around <code>WorkManager</code> so I can have a look and see if there is anything we can use there. Ideally we can fake the state of work or have it run paused or something. This wouldn't solve for the <code>JobManager</code> stuff though, Alternatively, for the moment we could hide the logic around looking up the statuses of these pieces of background work behind an interface that we can sub out for the <code>StorageMigrator</code>'s unit test (probably as a constructor arg):</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"public interface WorkStatusProvider {\n    public boolean isFormDownloaderRunning();\n    public boolean isFormUploaderRunning();\n}\"><pre><span class=\"pl-k\">public</span> <span class=\"pl-k\">interface</span> <span class=\"pl-en\">WorkStatusProvider</span> {\n    <span class=\"pl-k\">public</span> <span class=\"pl-k\">boolean</span> <span class=\"pl-en\">isFormDownloaderRunning</span>();\n    <span class=\"pl-k\">public</span> <span class=\"pl-k\">boolean</span> <span class=\"pl-en\">isFormUploaderRunning</span>();\n}</pre></div>\n<p dir=\"auto\">This would also mean that objects like the <code>StorageMigrator</code> wouldn't have to care about the details involved of fetching those statuses.</p>", "author": "seadowg", "createdAt": "2020-02-28T11:16:56Z", "path": "collect_app/src/androidTest/java/org/odk/collect/android/storage/StorageMigratorTest.java", "diffHunk": "@@ -0,0 +1,115 @@\n+package org.odk.collect.android.storage;\n+\n+import androidx.work.ExistingWorkPolicy;\n+import androidx.work.OneTimeWorkRequest;\n+import androidx.work.WorkManager;\n+\n+import com.evernote.android.job.JobManager;\n+import com.evernote.android.job.JobManagerCreateException;\n+import com.evernote.android.job.JobRequest;\n+\n+import org.javarosa.core.reference.ReferenceManager;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.odk.collect.android.application.Collect;\n+import org.odk.collect.android.preferences.GeneralSharedPreferences;\n+import org.odk.collect.android.storage.migration.StorageEraser;\n+import org.odk.collect.android.storage.migration.StorageMigrationRepository;\n+import org.odk.collect.android.storage.migration.StorageMigrationResult;\n+import org.odk.collect.android.storage.migration.StorageMigrator;\n+import org.odk.collect.android.storage.utils.FakedAutoSendWorker;\n+import org.odk.collect.android.storage.utils.FakedServerPollingJob;\n+import org.odk.collect.android.tasks.ServerPollingJob;\n+import org.odk.collect.android.upload.AutoSendWorker;\n+\n+import timber.log.Timber;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.core.IsNot.not;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.spy;\n+\n+public class StorageMigratorTest {", "originalCommit": "2ecf4f6adbbdf88f14be4aaff53c973b9519160b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "699219afb14b1f2eccc3752e8e0bb4b4ba4aebc5", "url": "https://github.com/getodk/collect/commit/699219afb14b1f2eccc3752e8e0bb4b4ba4aebc5", "message": "Fixed problem with external files", "committedDate": "2020-03-02T07:58:45Z", "type": "commit"}, {"oid": "f3e818eeed7fbd3c966e900732ea8a41ad362e94", "url": "https://github.com/getodk/collect/commit/f3e818eeed7fbd3c966e900732ea8a41ad362e94", "message": "Improved tests", "committedDate": "2020-03-02T10:46:05Z", "type": "commit"}, {"oid": "f3e818eeed7fbd3c966e900732ea8a41ad362e94", "url": "https://github.com/getodk/collect/commit/f3e818eeed7fbd3c966e900732ea8a41ad362e94", "message": "Improved tests", "committedDate": "2020-03-02T10:46:05Z", "type": "forcePushed"}, {"oid": "bc5a275611e2383449717bf4817b0288ec1e15ab", "url": "https://github.com/getodk/collect/commit/bc5a275611e2383449717bf4817b0288ec1e15ab", "message": "Center migration progress circle vertically", "committedDate": "2020-03-02T12:56:29Z", "type": "commit"}, {"oid": "3df5d35675eed9bcf9f9f09ef73a817f8a27bd8a", "url": "https://github.com/getodk/collect/commit/3df5d35675eed9bcf9f9f09ef73a817f8a27bd8a", "message": "Removed one test which is not valuable", "committedDate": "2020-03-02T14:24:02Z", "type": "commit"}, {"oid": "1f9fa1685f8adfd9cfb1ba2ad8d9a11a3b90a8c1", "url": "https://github.com/getodk/collect/commit/1f9fa1685f8adfd9cfb1ba2ad8d9a11a3b90a8c1", "message": "Added StorageMigratorTask", "committedDate": "2020-02-06T14:00:27Z", "type": "forcePushed"}, {"oid": "02de4c2a350497e55e4a94ef5f63ceae7881caa6", "url": "https://github.com/getodk/collect/commit/02de4c2a350497e55e4a94ef5f63ceae7881caa6", "message": "Added StorageMigratorTask", "committedDate": "2020-02-06T14:09:43Z", "type": "forcePushed"}, {"oid": "7ccb37aaabd3f90e604aa96add99ec57eeb8e2a6", "url": "https://github.com/getodk/collect/commit/7ccb37aaabd3f90e604aa96add99ec57eeb8e2a6", "message": "Added StorageMigratorTask", "committedDate": "2020-02-06T14:16:41Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTk2MjE1MA==", "url": "https://github.com/getodk/collect/pull/3623#discussion_r375962150", "body": "I like that this is pulled out as its own object! I think you could pass the `StoragePathProvider` in as a constructor arg rather than have it passed in to both methods as it feels like a dependency.", "bodyText": "I like that this is pulled out as its own object! I think you could pass the StoragePathProvider in as a constructor arg rather than have it passed in to both methods as it feels like a dependency.", "bodyHTML": "<p dir=\"auto\">I like that this is pulled out as its own object! I think you could pass the <code>StoragePathProvider</code> in as a constructor arg rather than have it passed in to both methods as it feels like a dependency.</p>", "author": "seadowg", "createdAt": "2020-02-06T17:02:10Z", "path": "collect_app/src/main/java/org/odk/collect/android/storage/StorageEraser.java", "diffHunk": "@@ -0,0 +1,24 @@\n+package org.odk.collect.android.storage;\n+\n+import java.io.File;\n+\n+class StorageEraser {", "originalCommit": "7ccb37aaabd3f90e604aa96add99ec57eeb8e2a6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQxNjUwNg==", "url": "https://github.com/getodk/collect/pull/3623#discussion_r376416506", "bodyText": "Done.", "author": "grzesiek2010", "createdAt": "2020-02-07T14:25:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTk2MjE1MA=="}], "type": "inlineReview", "revised_code": {"commit": "e8c792063a9b0c171775e5e8e5f6ec1d6e0c392e", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/storage/StorageEraser.java b/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageEraser.java\nsimilarity index 51%\nrename from collect_app/src/main/java/org/odk/collect/android/storage/StorageEraser.java\nrename to collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageEraser.java\nindex c28686ee3..21a1358e9 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/storage/StorageEraser.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageEraser.java\n", "chunk": "@@ -1,15 +1,23 @@\n-package org.odk.collect.android.storage;\n+package org.odk.collect.android.storage.migration;\n+\n+import org.odk.collect.android.storage.StoragePathProvider;\n \n import java.io.File;\n \n-class StorageEraser {\n+public class StorageEraser {\n+\n+    private final StoragePathProvider storagePathProvider;\n+\n+    public StorageEraser(StoragePathProvider storagePathProvider) {\n+        this.storagePathProvider = storagePathProvider;\n+    }\n \n-    void clearOdkDirOnScopedStorage(StoragePathProvider storagePathProvider) {\n-        deleteDirectory(new File(storagePathProvider.getScopedStorageDirPath(StorageSubdirectory.ODK)));\n+    void clearOdkDirOnScopedStorage() {\n+        deleteDirectory(new File(storagePathProvider.getScopedStorageRootDirPath()));\n     }\n \n-    void deleteOdkDirFromUnscopedStorage(StoragePathProvider storagePathProvider) {\n-        deleteDirectory(new File(storagePathProvider.getUnscopedStorageDirPath(StorageSubdirectory.ODK)));\n+    void deleteOdkDirFromUnscopedStorage() {\n+        deleteDirectory(new File(storagePathProvider.getUnscopedStorageRootDirPath()));\n     }\n \n     private static void deleteDirectory(File directoryToBeDeleted) {\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTk2Mjg4OQ==", "url": "https://github.com/getodk/collect/pull/3623#discussion_r375962889", "body": "Big fan of this returning an enum/result object for each case \ud83d\udc4d", "bodyText": "Big fan of this returning an enum/result object for each case \ud83d\udc4d", "bodyHTML": "<p dir=\"auto\">Big fan of this returning an enum/result object for each case <g-emoji class=\"g-emoji\" alias=\"+1\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f44d.png\">\ud83d\udc4d</g-emoji></p>", "author": "seadowg", "createdAt": "2020-02-06T17:03:23Z", "path": "collect_app/src/main/java/org/odk/collect/android/storage/StorageMigrator.java", "diffHunk": "@@ -0,0 +1,201 @@\n+package org.odk.collect.android.storage;\n+\n+import android.content.ContentValues;\n+import android.database.Cursor;\n+\n+import androidx.lifecycle.LiveData;\n+import androidx.work.WorkInfo;\n+import androidx.work.WorkManager;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.odk.collect.android.dao.FormsDao;\n+import org.odk.collect.android.dao.InstancesDao;\n+import org.odk.collect.android.dao.ItemsetDao;\n+import org.odk.collect.android.database.ItemsetDbAdapter;\n+import org.odk.collect.android.forms.Form;\n+import org.odk.collect.android.instances.Instance;\n+import org.odk.collect.android.itemsets.Itemset;\n+import org.odk.collect.android.provider.FormsProvider;\n+import org.odk.collect.android.provider.InstanceProvider;\n+import org.odk.collect.android.tasks.ServerPollingJob;\n+import org.odk.collect.android.upload.AutoSendWorker;\n+\n+import java.io.File;\n+import java.util.List;\n+\n+import timber.log.Timber;\n+\n+import static android.provider.BaseColumns._ID;\n+import static org.odk.collect.android.database.ItemsetDbAdapter.KEY_PATH;\n+import static org.odk.collect.android.provider.FormsProviderAPI.FormsColumns.FORM_FILE_PATH;\n+import static org.odk.collect.android.provider.FormsProviderAPI.FormsColumns.FORM_MEDIA_PATH;\n+import static org.odk.collect.android.provider.FormsProviderAPI.FormsColumns.JRCACHE_FILE_PATH;\n+import static org.odk.collect.android.provider.InstanceProviderAPI.InstanceColumns.INSTANCE_FILE_PATH;\n+\n+public class StorageMigrator {\n+\n+    private StoragePathProvider storagePathProvider;\n+    private StorageStateProvider storageStateProvider;\n+    private StorageEraser storageEraser;\n+\n+    public static boolean isMigrationBeingPerformed;\n+\n+    public StorageMigrator() {\n+        this(new StoragePathProvider(), new StorageStateProvider(), new StorageEraser());\n+    }\n+\n+    private StorageMigrator(StoragePathProvider storagePathProvider, StorageStateProvider storageStateProvider, StorageEraser storageEraser) {\n+        this.storagePathProvider = storagePathProvider;\n+        this.storageStateProvider = storageStateProvider;\n+        this.storageEraser = storageEraser;\n+    }\n+\n+    StorageMigrationResult performStorageMigration() {", "originalCommit": "7ccb37aaabd3f90e604aa96add99ec57eeb8e2a6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e8c792063a9b0c171775e5e8e5f6ec1d6e0c392e", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/storage/StorageMigrator.java b/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrator.java\nsimilarity index 58%\nrename from collect_app/src/main/java/org/odk/collect/android/storage/StorageMigrator.java\nrename to collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrator.java\nindex 7540b2ff7..54a938a77 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/storage/StorageMigrator.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrator.java\n", "chunk": "@@ -33,25 +32,29 @@ import static org.odk.collect.android.provider.FormsProviderAPI.FormsColumns.JRC\n import static org.odk.collect.android.provider.InstanceProviderAPI.InstanceColumns.INSTANCE_FILE_PATH;\n \n public class StorageMigrator {\n+    private static final String WHERE_ID = _ID + \"=?\";\n \n-    private StoragePathProvider storagePathProvider;\n-    private StorageStateProvider storageStateProvider;\n-    private StorageEraser storageEraser;\n+    private final StoragePathProvider storagePathProvider;\n+    private final StorageStateProvider storageStateProvider;\n+    private final StorageEraser storageEraser;\n \n-    public static boolean isMigrationBeingPerformed;\n+    private final StorageMigrationRepository storageMigrationRepository;\n \n-    public StorageMigrator() {\n-        this(new StoragePathProvider(), new StorageStateProvider(), new StorageEraser());\n-    }\n-\n-    private StorageMigrator(StoragePathProvider storagePathProvider, StorageStateProvider storageStateProvider, StorageEraser storageEraser) {\n+    public StorageMigrator(StoragePathProvider storagePathProvider, StorageStateProvider storageStateProvider, StorageEraser storageEraser, StorageMigrationRepository storageMigrationRepository) {\n         this.storagePathProvider = storagePathProvider;\n         this.storageStateProvider = storageStateProvider;\n         this.storageEraser = storageEraser;\n+        this.storageMigrationRepository = storageMigrationRepository;\n+    }\n+\n+    void performStorageMigration() {\n+        storageMigrationRepository.markMigrationStart();\n+        storageMigrationRepository.setResult(migrate());\n+        storageMigrationRepository.markMigrationEnd();\n     }\n \n-    StorageMigrationResult performStorageMigration() {\n-        storageEraser.clearOdkDirOnScopedStorage(storagePathProvider);\n+    StorageMigrationResult migrate() {\n+        storageEraser.clearOdkDirOnScopedStorage();\n \n         if (isFormUploaderRunning()) {\n             return StorageMigrationResult.FORM_UPLOADER_IS_RUNNING;\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTk4MDQyOA==", "url": "https://github.com/getodk/collect/pull/3623#discussion_r375980428", "body": "I think it would be nice to have the execution encapsulated in a `ViewModel`. An example of this would be how `FormSaveViewModel#saveForm` works. Something like this for the `ViewModel`:\r\n\r\n```java\r\nclass StorageMigrationViewModel {\r\n    public LiveData<StorageMigratorResult> migrate() {\r\n        MutableLiveData<StorageMigratorResult> result = new MutableLiveData<>();\r\n        new StorageMigratorTask((migratorResult) -> result.setValue(migratorResult)).execute();\r\n        return result;\r\n    }\r\n}\r\n```\r\n\r\nYou'll see an example of a task with a listener like this in `FormSaveViewModel`.\r\n\r\nIn can then deal with the dialog/errors in the Activity:\r\n\r\n```java\r\nstorageMigrationViewModel.migrate().observe(this, (result) -> {\r\n    if (result != null) {\r\n        // handle result\r\n    }\r\n});\r\n```\r\n\r\nSomething like that lets us seperate out our UI logic from the migration logic and lets us avoid using `WeakReference` or worrying about `AsyncTask` memory leaks. Totally up for discussing if that approach doesn't feel right but it'd be nice for us to find a pattern we like for this kind of thing.", "bodyText": "I think it would be nice to have the execution encapsulated in a ViewModel. An example of this would be how FormSaveViewModel#saveForm works. Something like this for the ViewModel:\nclass StorageMigrationViewModel {\n    public LiveData<StorageMigratorResult> migrate() {\n        MutableLiveData<StorageMigratorResult> result = new MutableLiveData<>();\n        new StorageMigratorTask((migratorResult) -> result.setValue(migratorResult)).execute();\n        return result;\n    }\n}\nYou'll see an example of a task with a listener like this in FormSaveViewModel.\nIn can then deal with the dialog/errors in the Activity:\nstorageMigrationViewModel.migrate().observe(this, (result) -> {\n    if (result != null) {\n        // handle result\n    }\n});\nSomething like that lets us seperate out our UI logic from the migration logic and lets us avoid using WeakReference or worrying about AsyncTask memory leaks. Totally up for discussing if that approach doesn't feel right but it'd be nice for us to find a pattern we like for this kind of thing.", "bodyHTML": "<p dir=\"auto\">I think it would be nice to have the execution encapsulated in a <code>ViewModel</code>. An example of this would be how <code>FormSaveViewModel#saveForm</code> works. Something like this for the <code>ViewModel</code>:</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"class StorageMigrationViewModel {\n    public LiveData&lt;StorageMigratorResult&gt; migrate() {\n        MutableLiveData&lt;StorageMigratorResult&gt; result = new MutableLiveData&lt;&gt;();\n        new StorageMigratorTask((migratorResult) -&gt; result.setValue(migratorResult)).execute();\n        return result;\n    }\n}\n\"><pre><span class=\"pl-k\">class</span> <span class=\"pl-en\">StorageMigrationViewModel</span> {\n    <span class=\"pl-k\">public</span> <span class=\"pl-k\">LiveData&lt;<span class=\"pl-smi\">StorageMigratorResult</span>&gt;</span> <span class=\"pl-en\">migrate</span>() {\n        <span class=\"pl-k\">MutableLiveData&lt;<span class=\"pl-smi\">StorageMigratorResult</span>&gt;</span> result <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-k\">MutableLiveData&lt;&gt;</span>();\n        <span class=\"pl-k\">new</span> <span class=\"pl-smi\">StorageMigratorTask</span>((migratorResult) <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> result<span class=\"pl-k\">.</span>setValue(migratorResult))<span class=\"pl-k\">.</span>execute();\n        <span class=\"pl-k\">return</span> result;\n    }\n}</pre></div>\n<p dir=\"auto\">You'll see an example of a task with a listener like this in <code>FormSaveViewModel</code>.</p>\n<p dir=\"auto\">In can then deal with the dialog/errors in the Activity:</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"storageMigrationViewModel.migrate().observe(this, (result) -&gt; {\n    if (result != null) {\n        // handle result\n    }\n});\n\"><pre>storageMigrationViewModel<span class=\"pl-k\">.</span>migrate()<span class=\"pl-k\">.</span>observe(<span class=\"pl-c1\">this</span>, (result) <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> {\n    <span class=\"pl-k\">if</span> (result <span class=\"pl-k\">!=</span> <span class=\"pl-c1\">null</span>) {\n        <span class=\"pl-c\"><span class=\"pl-c\">//</span> handle result</span>\n    }\n});</pre></div>\n<p dir=\"auto\">Something like that lets us seperate out our UI logic from the migration logic and lets us avoid using <code>WeakReference</code> or worrying about <code>AsyncTask</code> memory leaks. Totally up for discussing if that approach doesn't feel right but it'd be nice for us to find a pattern we like for this kind of thing.</p>", "author": "seadowg", "createdAt": "2020-02-06T17:35:53Z", "path": "collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java", "diffHunk": "@@ -640,4 +643,14 @@ private void disableSmsIfNeeded() {\n                     .show();\n         }\n     }\n+\n+    private void setStorageMigrationBannerVisibility() {\n+        if (!new StorageStateProvider().isScopedStorageUsed()) {\n+            findViewById(R.id.storage_migration_banner).setVisibility(View.VISIBLE);\n+        }\n+    }\n+\n+    public void learnMoreAndMigrate(View view) {\n+        new StorageMigratorTask(this).execute();", "originalCommit": "7ccb37aaabd3f90e604aa96add99ec57eeb8e2a6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM1ODkzNQ==", "url": "https://github.com/getodk/collect/pull/3623#discussion_r376358935", "bodyText": "I think it's a good idea I implemented it, thanks.", "author": "grzesiek2010", "createdAt": "2020-02-07T12:09:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTk4MDQyOA=="}], "type": "inlineReview", "revised_code": {"commit": "e8c792063a9b0c171775e5e8e5f6ec1d6e0c392e", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java b/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java\nindex d503ebde5..4362b79ea 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java\n", "chunk": "@@ -644,13 +635,48 @@ public class MainMenuActivity extends CollectAbstractActivity {\n         }\n     }\n \n-    private void setStorageMigrationBannerVisibility() {\n-        if (!new StorageStateProvider().isScopedStorageUsed()) {\n-            findViewById(R.id.storage_migration_banner).setVisibility(View.VISIBLE);\n+    public void onStorageMigrationBannerDismiss(View view) {\n+        storageMigrationBanner.setVisibility(View.GONE);\n+    }\n+\n+    public void onStorageMigrationBannerLearnMoreClick(View view) {\n+        storageMigrationRepository.getResult().observe(this, this::onStorageMigrationFinish);\n+        DialogUtils.showIfNotShowing(StorageMigrationDialog.create(adminPasswordProvider, savedCount), getSupportFragmentManager());\n+    }\n+\n+    private void onStorageMigrationFinish(StorageMigrationResult result) {\n+        if (result == StorageMigrationResult.SUCCESS) {\n+            keepBannerWithSuccesMsgVisible = true;\n+            displayBannerWithSuccessStorageMigrationResult();\n+            DialogUtils.dismissDialog(StorageMigrationDialog.class, getSupportFragmentManager());\n+            storageMigrationRepository.consumeResult();\n+        } else {\n+            StorageMigrationDialog storageMigrationDialog = (StorageMigrationDialog) DialogUtils.getDialogFragment(StorageMigrationDialog.class, getSupportFragmentManager());\n+            if (storageMigrationDialog != null) {\n+                storageMigrationDialog.handleMigrationError(result);\n+            }\n         }\n     }\n \n-    public void learnMoreAndMigrate(View view) {\n-        new StorageMigratorTask(this).execute();\n+    private void setUpStorageMigrationBanner() {\n+        if (!storageStateProvider.isScopedStorageUsed()) {\n+            displayStorageMigrationBanner();\n+        } else if (keepBannerWithSuccesMsgVisible) {\n+            displayBannerWithSuccessStorageMigrationResult();\n+        }\n+    }\n+\n+    private void displayStorageMigrationBanner() {\n+        storageMigrationBanner.setVisibility(View.VISIBLE);\n+        storageMigrationBannerText.setText(R.string.scoped_storage_banner_text);\n+        storageMigrationBannerLearnMoreButton.setVisibility(View.VISIBLE);\n+        storageMigrationBannerDismissButton.setVisibility(View.GONE);\n+    }\n+\n+    private void displayBannerWithSuccessStorageMigrationResult() {\n+        storageMigrationBanner.setVisibility(View.VISIBLE);\n+        storageMigrationBannerText.setText(R.string.storage_migration_completed);\n+        storageMigrationBannerLearnMoreButton.setVisibility(View.GONE);\n+        storageMigrationBannerDismissButton.setVisibility(View.VISIBLE);\n     }\n }\n", "next_change": {"commit": "97d7fe364b273c029e11fd0ff55c461b31f4eba6", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java b/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java\nindex 4362b79ea..0917ddeb4 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java\n", "chunk": "@@ -635,48 +652,47 @@ public class MainMenuActivity extends CollectAbstractActivity implements AdminPa\n         }\n     }\n \n-    public void onStorageMigrationBannerDismiss(View view) {\n-        storageMigrationBanner.setVisibility(View.GONE);\n-    }\n-\n-    public void onStorageMigrationBannerLearnMoreClick(View view) {\n-        storageMigrationRepository.getResult().observe(this, this::onStorageMigrationFinish);\n-        DialogUtils.showIfNotShowing(StorageMigrationDialog.create(adminPasswordProvider, savedCount), getSupportFragmentManager());\n-    }\n-\n-    private void onStorageMigrationFinish(StorageMigrationResult result) {\n-        if (result == StorageMigrationResult.SUCCESS) {\n-            keepBannerWithSuccesMsgVisible = true;\n-            displayBannerWithSuccessStorageMigrationResult();\n-            DialogUtils.dismissDialog(StorageMigrationDialog.class, getSupportFragmentManager());\n-            storageMigrationRepository.consumeResult();\n-        } else {\n-            StorageMigrationDialog storageMigrationDialog = (StorageMigrationDialog) DialogUtils.getDialogFragment(StorageMigrationDialog.class, getSupportFragmentManager());\n-            if (storageMigrationDialog != null) {\n-                storageMigrationDialog.handleMigrationError(result);\n-            }\n+    private void setStorageMigrationBannerVisibility() {\n+        if (!new StorageStateProvider().isScopedStorageUsed()) {\n+            findViewById(R.id.storage_migration_banner).setVisibility(View.VISIBLE);\n         }\n     }\n \n-    private void setUpStorageMigrationBanner() {\n-        if (!storageStateProvider.isScopedStorageUsed()) {\n-            displayStorageMigrationBanner();\n-        } else if (keepBannerWithSuccesMsgVisible) {\n-            displayBannerWithSuccessStorageMigrationResult();\n-        }\n-    }\n-\n-    private void displayStorageMigrationBanner() {\n-        storageMigrationBanner.setVisibility(View.VISIBLE);\n-        storageMigrationBannerText.setText(R.string.scoped_storage_banner_text);\n-        storageMigrationBannerLearnMoreButton.setVisibility(View.VISIBLE);\n-        storageMigrationBannerDismissButton.setVisibility(View.GONE);\n+    public void learnMoreAndMigrate(View view) {\n+        ProgressDialog progressDialog;\n+        progressDialog = new ProgressDialog(this);\n+        progressDialog.setProgressStyle(ProgressDialog.STYLE_SPINNER);\n+        progressDialog.setMessage(getString(R.string.files_migration));\n+        progressDialog.setCancelable(false);\n+        progressDialog.show();\n+\n+        storageMigrationViewModel.performMigration().observe(this, result -> {\n+            String message = null;\n+            switch (result) {\n+                case SUCCESS:\n+                    message = getString(R.string.files_migration_completed);\n+                    hideStorageMigrationBanner();\n+                    break;\n+                case NOT_ENOUGH_SPACE:\n+                    message = getString(R.string.files_migration_not_enough_space);\n+                    break;\n+                case FORM_UPLOADER_IS_RUNNING:\n+                    message = getString(R.string.files_migration_form_uploader_is_running);\n+                    break;\n+                case FORM_DOWNLOADER_IS_RUNNING:\n+                    message = getString(R.string.files_migration_form_downloader_is_running);\n+                    break;\n+                case MOVING_FILES_FAILED:\n+                case MIGRATING_DATABASE_PATHS_FAILED:\n+                    message = getString(R.string.files_migration_failed);\n+                    break;\n+            }\n+            progressDialog.dismiss();\n+            ToastUtils.showLongToast(message);\n+        });\n     }\n \n-    private void displayBannerWithSuccessStorageMigrationResult() {\n-        storageMigrationBanner.setVisibility(View.VISIBLE);\n-        storageMigrationBannerText.setText(R.string.storage_migration_completed);\n-        storageMigrationBannerLearnMoreButton.setVisibility(View.GONE);\n-        storageMigrationBannerDismissButton.setVisibility(View.VISIBLE);\n+    private void hideStorageMigrationBanner() {\n+        findViewById(R.id.storage_migration_banner).setVisibility(View.GONE);\n     }\n }\n", "next_change": {"commit": "62cc09991827ebe2b5a671a4b780113f9c4b4655", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java b/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java\nindex 0917ddeb41..e606bd8bfd 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java\n", "chunk": "@@ -658,41 +668,37 @@ public class MainMenuActivity extends CollectAbstractActivity {\n         }\n     }\n \n-    public void learnMoreAndMigrate(View view) {\n-        ProgressDialog progressDialog;\n-        progressDialog = new ProgressDialog(this);\n-        progressDialog.setProgressStyle(ProgressDialog.STYLE_SPINNER);\n-        progressDialog.setMessage(getString(R.string.files_migration));\n-        progressDialog.setCancelable(false);\n-        progressDialog.show();\n-\n-        storageMigrationViewModel.performMigration().observe(this, result -> {\n-            String message = null;\n-            switch (result) {\n-                case SUCCESS:\n-                    message = getString(R.string.files_migration_completed);\n-                    hideStorageMigrationBanner();\n-                    break;\n-                case NOT_ENOUGH_SPACE:\n-                    message = getString(R.string.files_migration_not_enough_space);\n-                    break;\n-                case FORM_UPLOADER_IS_RUNNING:\n-                    message = getString(R.string.files_migration_form_uploader_is_running);\n-                    break;\n-                case FORM_DOWNLOADER_IS_RUNNING:\n-                    message = getString(R.string.files_migration_form_downloader_is_running);\n-                    break;\n-                case MOVING_FILES_FAILED:\n-                case MIGRATING_DATABASE_PATHS_FAILED:\n-                    message = getString(R.string.files_migration_failed);\n-                    break;\n-            }\n-            progressDialog.dismiss();\n-            ToastUtils.showLongToast(message);\n-        });\n+    public void onStorageMigrationBannerClick(View view) {\n+        DialogUtils.showIfNotShowing(StorageMigrationDialog.create(), getSupportFragmentManager());\n     }\n \n     private void hideStorageMigrationBanner() {\n         findViewById(R.id.storage_migration_banner).setVisibility(View.GONE);\n     }\n+\n+    private void dismissStorageMigrationDialog() {\n+        DialogUtils.dismissDialog(StorageMigrationDialog.class, getSupportFragmentManager());\n+    }\n+\n+    private final BroadcastReceiver storageMigrationStatusReceiver = new BroadcastReceiver() {\n+        @Override\n+        public void onReceive(Context context, Intent intent) {\n+            StorageMigrationStatus status = (StorageMigrationStatus) intent.getSerializableExtra(StorageMigrationService.STORAGE_MIGRATION_STATUS);\n+\n+            StorageMigrationDialog dialog = (StorageMigrationDialog) DialogUtils.getDialogFragment(StorageMigrationDialog.class, getSupportFragmentManager());\n+            dialog.setStatus(StorageMigrationStatus.getStatusMessage(status, MainMenuActivity.this));\n+        }\n+    };\n+\n+    private final BroadcastReceiver storageMigrationResultReceiver = new BroadcastReceiver() {\n+        @Override\n+        public void onReceive(Context context, Intent intent) {\n+            hideStorageMigrationBanner();\n+\n+            StorageMigrationResult result = (StorageMigrationResult) intent.getSerializableExtra(StorageMigrationService.STORAGE_MIGRATION_RESULT);\n+            ToastUtils.showLongToast(StorageMigrationResult.getResultMessage(result, MainMenuActivity.this));\n+\n+            dismissStorageMigrationDialog();\n+        }\n+    };\n }\n", "next_change": {"commit": "de4a297917d1b8b7ac2eae0018a8567d74fd4486", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java b/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java\nindex e606bd8bfd..09f49578be 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java\n", "chunk": "@@ -672,33 +658,11 @@ public class MainMenuActivity extends CollectAbstractActivity {\n         DialogUtils.showIfNotShowing(StorageMigrationDialog.create(), getSupportFragmentManager());\n     }\n \n-    private void hideStorageMigrationBanner() {\n+    private void handleMigrationResult(StorageMigrationResult result) {\n         findViewById(R.id.storage_migration_banner).setVisibility(View.GONE);\n-    }\n \n-    private void dismissStorageMigrationDialog() {\n         DialogUtils.dismissDialog(StorageMigrationDialog.class, getSupportFragmentManager());\n-    }\n-\n-    private final BroadcastReceiver storageMigrationStatusReceiver = new BroadcastReceiver() {\n-        @Override\n-        public void onReceive(Context context, Intent intent) {\n-            StorageMigrationStatus status = (StorageMigrationStatus) intent.getSerializableExtra(StorageMigrationService.STORAGE_MIGRATION_STATUS);\n \n-            StorageMigrationDialog dialog = (StorageMigrationDialog) DialogUtils.getDialogFragment(StorageMigrationDialog.class, getSupportFragmentManager());\n-            dialog.setStatus(StorageMigrationStatus.getStatusMessage(status, MainMenuActivity.this));\n-        }\n-    };\n-\n-    private final BroadcastReceiver storageMigrationResultReceiver = new BroadcastReceiver() {\n-        @Override\n-        public void onReceive(Context context, Intent intent) {\n-            hideStorageMigrationBanner();\n-\n-            StorageMigrationResult result = (StorageMigrationResult) intent.getSerializableExtra(StorageMigrationService.STORAGE_MIGRATION_RESULT);\n-            ToastUtils.showLongToast(StorageMigrationResult.getResultMessage(result, MainMenuActivity.this));\n-\n-            dismissStorageMigrationDialog();\n-        }\n-    };\n+        ToastUtils.showLongToast(StorageMigrationResult.getResultMessage(result, this));\n+    }\n }\n", "next_change": {"commit": "dcc8858054effc1658c7fd6c93336794057921eb", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java b/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java\nindex 09f49578be..df9d75e995 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java\n", "chunk": "@@ -659,7 +666,7 @@ public class MainMenuActivity extends CollectAbstractActivity {\n     }\n \n     private void handleMigrationResult(StorageMigrationResult result) {\n-        findViewById(R.id.storage_migration_banner).setVisibility(View.GONE);\n+        //findViewById(R.id.storage_migration_banner).setVisibility(View.GONE);\n \n         DialogUtils.dismissDialog(StorageMigrationDialog.class, getSupportFragmentManager());\n \n", "next_change": {"commit": "c648963c21bc00901ebce412c99ce83758185404", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java b/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java\nindex df9d75e995..82943a009d 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java\n", "chunk": "@@ -666,7 +666,7 @@ public class MainMenuActivity extends CollectAbstractActivity {\n     }\n \n     private void handleMigrationResult(StorageMigrationResult result) {\n-        //findViewById(R.id.storage_migration_banner).setVisibility(View.GONE);\n+        findViewById(R.id.storage_migration_banner).setVisibility(View.GONE);\n \n         DialogUtils.dismissDialog(StorageMigrationDialog.class, getSupportFragmentManager());\n \n", "next_change": {"commit": "4786e5177334eafdd28a262e5c3a236923713beb", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java b/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java\nindex 82943a009d..a16083a68a 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java\n", "chunk": "@@ -667,9 +667,7 @@ public class MainMenuActivity extends CollectAbstractActivity {\n \n     private void handleMigrationResult(StorageMigrationResult result) {\n         findViewById(R.id.storage_migration_banner).setVisibility(View.GONE);\n-\n         DialogUtils.dismissDialog(StorageMigrationDialog.class, getSupportFragmentManager());\n-\n         ToastUtils.showLongToast(StorageMigrationResult.getResultMessage(result, this));\n     }\n }\n", "next_change": {"commit": "d4c1d90bf376d2f30ff5d5c299663f3336ca1d09", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java b/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java\nindex a16083a68a..b2763a1be8 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java\n", "chunk": "@@ -655,19 +671,35 @@ public class MainMenuActivity extends CollectAbstractActivity {\n         }\n     }\n \n-    private void setStorageMigrationBannerVisibility() {\n-        if (!new StorageStateProvider().isScopedStorageUsed()) {\n-            findViewById(R.id.storage_migration_banner).setVisibility(View.VISIBLE);\n+    private void setUpStorageMigrationBanner() {\n+        boolean storageMigrationBannerDismissed = GeneralSharedPreferences.getInstance().getBoolean(KEY_SCOPED_STORAGE_BANNER_DISMISSED, false);\n+        boolean isScopedStorageUsed = new StorageStateProvider().isScopedStorageUsed();\n+\n+        if (!isScopedStorageUsed || !storageMigrationBannerDismissed) {\n+            storageMigrationBanner.setVisibility(View.VISIBLE);\n+            Integer storageMigrationResultCode = (Integer) GeneralSharedPreferences.getInstance().get(KEY_SCOPED_STORAGE_MIGRATION_RESULT);\n+            updateStorageMigrationBanner(StorageMigrationResult.getResult(storageMigrationResultCode));\n         }\n     }\n \n-    public void onStorageMigrationBannerClick(View view) {\n+    public void onStorageMigrationBannerDismiss(View view) {\n+        storageMigrationBanner.setVisibility(View.GONE);\n+        GeneralSharedPreferences.getInstance().save(KEY_SCOPED_STORAGE_BANNER_DISMISSED, true);\n+    }\n+\n+    public void onStorageMigrationBannerLearnMoreClick(View view) {\n         DialogUtils.showIfNotShowing(StorageMigrationDialog.create(), getSupportFragmentManager());\n     }\n \n-    private void handleMigrationResult(StorageMigrationResult result) {\n-        findViewById(R.id.storage_migration_banner).setVisibility(View.GONE);\n+    private void onStorageMigrationFinish(StorageMigrationResult result) {\n         DialogUtils.dismissDialog(StorageMigrationDialog.class, getSupportFragmentManager());\n-        ToastUtils.showLongToast(StorageMigrationResult.getResultMessage(result, this));\n+        GeneralSharedPreferences.getInstance().save(KEY_SCOPED_STORAGE_MIGRATION_RESULT, result.getResultCode());\n+        updateStorageMigrationBanner(result);\n+    }\n+\n+    private void updateStorageMigrationBanner(StorageMigrationResult result) {\n+        storageMigrationBannerDismissButton.setVisibility(result == StorageMigrationResult.SUCCESS ? View.VISIBLE : View.GONE);\n+        storageMigrationBannerLearnMoreButton.setVisibility(result == StorageMigrationResult.SUCCESS ? View.GONE : View.VISIBLE);\n+        storageMigrationBannerText.setText(result.getBannerText(result, this));\n     }\n }\n", "next_change": {"commit": "d2373fd5376e36350669a17d2d78760edac60da7", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java b/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java\nindex b2763a1be8..89ac6ffa26 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java\n", "chunk": "@@ -671,35 +626,43 @@ public class MainMenuActivity extends CollectAbstractActivity {\n         }\n     }\n \n-    private void setUpStorageMigrationBanner() {\n-        boolean storageMigrationBannerDismissed = GeneralSharedPreferences.getInstance().getBoolean(KEY_SCOPED_STORAGE_BANNER_DISMISSED, false);\n-        boolean isScopedStorageUsed = new StorageStateProvider().isScopedStorageUsed();\n-\n-        if (!isScopedStorageUsed || !storageMigrationBannerDismissed) {\n-            storageMigrationBanner.setVisibility(View.VISIBLE);\n-            Integer storageMigrationResultCode = (Integer) GeneralSharedPreferences.getInstance().get(KEY_SCOPED_STORAGE_MIGRATION_RESULT);\n-            updateStorageMigrationBanner(StorageMigrationResult.getResult(storageMigrationResultCode));\n-        }\n-    }\n-\n     public void onStorageMigrationBannerDismiss(View view) {\n         storageMigrationBanner.setVisibility(View.GONE);\n         GeneralSharedPreferences.getInstance().save(KEY_SCOPED_STORAGE_BANNER_DISMISSED, true);\n     }\n \n     public void onStorageMigrationBannerLearnMoreClick(View view) {\n-        DialogUtils.showIfNotShowing(StorageMigrationDialog.create(), getSupportFragmentManager());\n+        storageMigrationRepository.getResult().observe(this, this::onStorageMigrationFinish);\n+        DialogUtils.showIfNotShowing(StorageMigrationDialog.create(savedCount), getSupportFragmentManager());\n     }\n \n     private void onStorageMigrationFinish(StorageMigrationResult result) {\n-        DialogUtils.dismissDialog(StorageMigrationDialog.class, getSupportFragmentManager());\n-        GeneralSharedPreferences.getInstance().save(KEY_SCOPED_STORAGE_MIGRATION_RESULT, result.getResultCode());\n-        updateStorageMigrationBanner(result);\n+        if (result == StorageMigrationResult.SUCCESS) {\n+            setUpStorageMigrationBanner();\n+            DialogUtils.dismissDialog(StorageMigrationDialog.class, getSupportFragmentManager());\n+            storageMigrationRepository.consumeResult();\n+        } else {\n+            StorageMigrationDialog storageMigrationDialog = (StorageMigrationDialog) DialogUtils.getDialogFragment(StorageMigrationDialog.class, getSupportFragmentManager());\n+            if (storageMigrationDialog != null) {\n+                storageMigrationDialog.handleMigrationError(result);\n+            }\n+        }\n     }\n \n-    private void updateStorageMigrationBanner(StorageMigrationResult result) {\n-        storageMigrationBannerDismissButton.setVisibility(result == StorageMigrationResult.SUCCESS ? View.VISIBLE : View.GONE);\n-        storageMigrationBannerLearnMoreButton.setVisibility(result == StorageMigrationResult.SUCCESS ? View.GONE : View.VISIBLE);\n-        storageMigrationBannerText.setText(result.getBannerText(result, this));\n+    private void setUpStorageMigrationBanner() {\n+        boolean isScopedStorageUsed = new StorageStateProvider().isScopedStorageUsed();\n+        boolean storageMigrationBannerDismissed = GeneralSharedPreferences.getInstance().getBoolean(KEY_SCOPED_STORAGE_BANNER_DISMISSED, false);\n+\n+        if (isScopedStorageUsed && !storageMigrationBannerDismissed) {\n+            storageMigrationBanner.setVisibility(View.VISIBLE);\n+            storageMigrationBannerText.setText(R.string.storage_migration_completed);\n+            storageMigrationBannerLearnMoreButton.setVisibility(View.GONE);\n+            storageMigrationBannerDismissButton.setVisibility(View.VISIBLE);\n+        } else if (!isScopedStorageUsed) {\n+            storageMigrationBanner.setVisibility(View.VISIBLE);\n+            storageMigrationBannerText.setText(R.string.scoped_storage_banner_text);\n+            storageMigrationBannerLearnMoreButton.setVisibility(View.VISIBLE);\n+            storageMigrationBannerDismissButton.setVisibility(View.GONE);\n+        }\n     }\n }\n", "next_change": {"commit": "ff46be76e57131f524b0dbf3085856b6671235e5", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java b/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java\nindex 89ac6ffa26..4362b79eaa 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java\n", "chunk": "@@ -650,19 +659,24 @@ public class MainMenuActivity extends CollectAbstractActivity implements AdminPa\n     }\n \n     private void setUpStorageMigrationBanner() {\n-        boolean isScopedStorageUsed = new StorageStateProvider().isScopedStorageUsed();\n-        boolean storageMigrationBannerDismissed = GeneralSharedPreferences.getInstance().getBoolean(KEY_SCOPED_STORAGE_BANNER_DISMISSED, false);\n-\n-        if (isScopedStorageUsed && !storageMigrationBannerDismissed) {\n-            storageMigrationBanner.setVisibility(View.VISIBLE);\n-            storageMigrationBannerText.setText(R.string.storage_migration_completed);\n-            storageMigrationBannerLearnMoreButton.setVisibility(View.GONE);\n-            storageMigrationBannerDismissButton.setVisibility(View.VISIBLE);\n-        } else if (!isScopedStorageUsed) {\n-            storageMigrationBanner.setVisibility(View.VISIBLE);\n-            storageMigrationBannerText.setText(R.string.scoped_storage_banner_text);\n-            storageMigrationBannerLearnMoreButton.setVisibility(View.VISIBLE);\n-            storageMigrationBannerDismissButton.setVisibility(View.GONE);\n+        if (!storageStateProvider.isScopedStorageUsed()) {\n+            displayStorageMigrationBanner();\n+        } else if (keepBannerWithSuccesMsgVisible) {\n+            displayBannerWithSuccessStorageMigrationResult();\n         }\n     }\n+\n+    private void displayStorageMigrationBanner() {\n+        storageMigrationBanner.setVisibility(View.VISIBLE);\n+        storageMigrationBannerText.setText(R.string.scoped_storage_banner_text);\n+        storageMigrationBannerLearnMoreButton.setVisibility(View.VISIBLE);\n+        storageMigrationBannerDismissButton.setVisibility(View.GONE);\n+    }\n+\n+    private void displayBannerWithSuccessStorageMigrationResult() {\n+        storageMigrationBanner.setVisibility(View.VISIBLE);\n+        storageMigrationBannerText.setText(R.string.storage_migration_completed);\n+        storageMigrationBannerLearnMoreButton.setVisibility(View.GONE);\n+        storageMigrationBannerDismissButton.setVisibility(View.VISIBLE);\n+    }\n }\n", "next_change": {"commit": "2aec2cef76323fcadf43baad6f780922420fbea9", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java b/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java\nindex 4362b79eaa..dc5fe01f82 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java\n", "chunk": "@@ -634,49 +640,4 @@ public class MainMenuActivity extends CollectAbstractActivity implements AdminPa\n                     .show();\n         }\n     }\n-\n-    public void onStorageMigrationBannerDismiss(View view) {\n-        storageMigrationBanner.setVisibility(View.GONE);\n-    }\n-\n-    public void onStorageMigrationBannerLearnMoreClick(View view) {\n-        storageMigrationRepository.getResult().observe(this, this::onStorageMigrationFinish);\n-        DialogUtils.showIfNotShowing(StorageMigrationDialog.create(adminPasswordProvider, savedCount), getSupportFragmentManager());\n-    }\n-\n-    private void onStorageMigrationFinish(StorageMigrationResult result) {\n-        if (result == StorageMigrationResult.SUCCESS) {\n-            keepBannerWithSuccesMsgVisible = true;\n-            displayBannerWithSuccessStorageMigrationResult();\n-            DialogUtils.dismissDialog(StorageMigrationDialog.class, getSupportFragmentManager());\n-            storageMigrationRepository.consumeResult();\n-        } else {\n-            StorageMigrationDialog storageMigrationDialog = (StorageMigrationDialog) DialogUtils.getDialogFragment(StorageMigrationDialog.class, getSupportFragmentManager());\n-            if (storageMigrationDialog != null) {\n-                storageMigrationDialog.handleMigrationError(result);\n-            }\n-        }\n-    }\n-\n-    private void setUpStorageMigrationBanner() {\n-        if (!storageStateProvider.isScopedStorageUsed()) {\n-            displayStorageMigrationBanner();\n-        } else if (keepBannerWithSuccesMsgVisible) {\n-            displayBannerWithSuccessStorageMigrationResult();\n-        }\n-    }\n-\n-    private void displayStorageMigrationBanner() {\n-        storageMigrationBanner.setVisibility(View.VISIBLE);\n-        storageMigrationBannerText.setText(R.string.scoped_storage_banner_text);\n-        storageMigrationBannerLearnMoreButton.setVisibility(View.VISIBLE);\n-        storageMigrationBannerDismissButton.setVisibility(View.GONE);\n-    }\n-\n-    private void displayBannerWithSuccessStorageMigrationResult() {\n-        storageMigrationBanner.setVisibility(View.VISIBLE);\n-        storageMigrationBannerText.setText(R.string.storage_migration_completed);\n-        storageMigrationBannerLearnMoreButton.setVisibility(View.GONE);\n-        storageMigrationBannerDismissButton.setVisibility(View.VISIBLE);\n-    }\n }\n", "next_change": {"commit": "0a29c353c2ff8edf82bd9887a6f930eed5e5cf20", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java b/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java\nindex dc5fe01f82..554045ba5b 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java\n", "chunk": "@@ -640,4 +642,14 @@ public class MainMenuActivity extends CollectAbstractActivity {\n                     .show();\n         }\n     }\n+\n+    private void setStorageMigrationBannerVisibility() {\n+        if (!new StorageStateProvider().isScopedStorageUsed()) {\n+            findViewById(R.id.storage_migration_banner).setVisibility(View.VISIBLE);\n+        }\n+    }\n+\n+    public void learnMoreAndMigrate(View view) {\n+\n+    }\n }\n", "next_change": {"commit": "0fee5bb00098971bedf3c61fd56402864bcfeccc", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java b/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java\nindex 554045ba5b..25e979d75d 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java\n", "chunk": "@@ -650,6 +659,40 @@ public class MainMenuActivity extends CollectAbstractActivity {\n     }\n \n     public void learnMoreAndMigrate(View view) {\n+        ProgressDialog progressDialog;\n+        progressDialog = new ProgressDialog(this);\n+        progressDialog.setProgressStyle(ProgressDialog.STYLE_SPINNER);\n+        progressDialog.setMessage(getString(R.string.files_migration));\n+        progressDialog.setCancelable(false);\n+        progressDialog.show();\n+\n+        storageMigrationViewModel.performMigration().observe(this, result -> {\n+            String message = null;\n+            switch (result) {\n+                case SUCCESS:\n+                    message = getString(R.string.files_migration_completed);\n+                    hideStorageMigrationBanner();\n+                    break;\n+                case NOT_ENOUGH_SPACE:\n+                    message = getString(R.string.files_migration_not_enough_space);\n+                    break;\n+                case FORM_UPLOADER_IS_RUNNING:\n+                    message = getString(R.string.files_migration_form_uploader_is_running);\n+                    break;\n+                case FORM_DOWNLOADER_IS_RUNNING:\n+                    message = getString(R.string.files_migration_form_downloader_is_running);\n+                    break;\n+                case MOVING_FILES_FAILED:\n+                case MIGRATING_DATABASE_PATHS_FAILED:\n+                    message = getString(R.string.files_migration_failed);\n+                    break;\n+            }\n+            progressDialog.dismiss();\n+            ToastUtils.showLongToast(message);\n+        });\n+    }\n \n+    private void hideStorageMigrationBanner() {\n+        findViewById(R.id.storage_migration_banner).setVisibility(View.GONE);\n     }\n }\n", "next_change": {"commit": "dcf15ba45d62149a114c925a59f653928bf3c4da", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java b/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java\nindex 25e979d75d..7ac4cd5e03 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java\n", "chunk": "@@ -658,41 +652,24 @@ public class MainMenuActivity extends CollectAbstractActivity {\n         }\n     }\n \n-    public void learnMoreAndMigrate(View view) {\n-        ProgressDialog progressDialog;\n-        progressDialog = new ProgressDialog(this);\n-        progressDialog.setProgressStyle(ProgressDialog.STYLE_SPINNER);\n-        progressDialog.setMessage(getString(R.string.files_migration));\n-        progressDialog.setCancelable(false);\n-        progressDialog.show();\n-\n-        storageMigrationViewModel.performMigration().observe(this, result -> {\n-            String message = null;\n-            switch (result) {\n-                case SUCCESS:\n-                    message = getString(R.string.files_migration_completed);\n-                    hideStorageMigrationBanner();\n-                    break;\n-                case NOT_ENOUGH_SPACE:\n-                    message = getString(R.string.files_migration_not_enough_space);\n-                    break;\n-                case FORM_UPLOADER_IS_RUNNING:\n-                    message = getString(R.string.files_migration_form_uploader_is_running);\n-                    break;\n-                case FORM_DOWNLOADER_IS_RUNNING:\n-                    message = getString(R.string.files_migration_form_downloader_is_running);\n-                    break;\n-                case MOVING_FILES_FAILED:\n-                case MIGRATING_DATABASE_PATHS_FAILED:\n-                    message = getString(R.string.files_migration_failed);\n-                    break;\n-            }\n-            progressDialog.dismiss();\n-            ToastUtils.showLongToast(message);\n-        });\n+    public void onStorageMigrationBannerClick(View view) {\n+        DialogUtils.showIfNotShowing(StorageMigrationDialog.create(), getSupportFragmentManager());\n+    }\n+\n+    @Override\n+    public void onMigrationComplete(StorageMigrationResult result) {\n+        dismissStorageMigrationDialog();\n+        if (result == StorageMigrationResult.SUCCESS) {\n+            hideStorageMigrationBanner();\n+        }\n+        ToastUtils.showLongToast(StorageMigrationResult.getResultMessage(result, this));\n     }\n \n     private void hideStorageMigrationBanner() {\n         findViewById(R.id.storage_migration_banner).setVisibility(View.GONE);\n     }\n+\n+    private void dismissStorageMigrationDialog() {\n+        DialogUtils.dismissDialog(StorageMigrationDialog.class, getSupportFragmentManager());\n+    }\n }\n", "next_change": {"commit": "17e476115da9892b9be2d92ab1b473b99e578f4c", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java b/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java\nindex 7ac4cd5e03..e606bd8bfd 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java\n", "chunk": "@@ -672,4 +679,26 @@ public class MainMenuActivity extends CollectAbstractActivity implements Storage\n     private void dismissStorageMigrationDialog() {\n         DialogUtils.dismissDialog(StorageMigrationDialog.class, getSupportFragmentManager());\n     }\n+\n+    private final BroadcastReceiver storageMigrationStatusReceiver = new BroadcastReceiver() {\n+        @Override\n+        public void onReceive(Context context, Intent intent) {\n+            StorageMigrationStatus status = (StorageMigrationStatus) intent.getSerializableExtra(StorageMigrationService.STORAGE_MIGRATION_STATUS);\n+\n+            StorageMigrationDialog dialog = (StorageMigrationDialog) DialogUtils.getDialogFragment(StorageMigrationDialog.class, getSupportFragmentManager());\n+            dialog.setStatus(StorageMigrationStatus.getStatusMessage(status, MainMenuActivity.this));\n+        }\n+    };\n+\n+    private final BroadcastReceiver storageMigrationResultReceiver = new BroadcastReceiver() {\n+        @Override\n+        public void onReceive(Context context, Intent intent) {\n+            hideStorageMigrationBanner();\n+\n+            StorageMigrationResult result = (StorageMigrationResult) intent.getSerializableExtra(StorageMigrationService.STORAGE_MIGRATION_RESULT);\n+            ToastUtils.showLongToast(StorageMigrationResult.getResultMessage(result, MainMenuActivity.this));\n+\n+            dismissStorageMigrationDialog();\n+        }\n+    };\n }\n", "next_change": {"commit": "4644f0f351ac9b4fbbc9eb84f1047fd9d3acf6cf", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java b/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java\nindex e606bd8bfd..df9d75e995 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java\n", "chunk": "@@ -672,33 +665,11 @@ public class MainMenuActivity extends CollectAbstractActivity {\n         DialogUtils.showIfNotShowing(StorageMigrationDialog.create(), getSupportFragmentManager());\n     }\n \n-    private void hideStorageMigrationBanner() {\n-        findViewById(R.id.storage_migration_banner).setVisibility(View.GONE);\n-    }\n+    private void handleMigrationResult(StorageMigrationResult result) {\n+        //findViewById(R.id.storage_migration_banner).setVisibility(View.GONE);\n \n-    private void dismissStorageMigrationDialog() {\n         DialogUtils.dismissDialog(StorageMigrationDialog.class, getSupportFragmentManager());\n-    }\n \n-    private final BroadcastReceiver storageMigrationStatusReceiver = new BroadcastReceiver() {\n-        @Override\n-        public void onReceive(Context context, Intent intent) {\n-            StorageMigrationStatus status = (StorageMigrationStatus) intent.getSerializableExtra(StorageMigrationService.STORAGE_MIGRATION_STATUS);\n-\n-            StorageMigrationDialog dialog = (StorageMigrationDialog) DialogUtils.getDialogFragment(StorageMigrationDialog.class, getSupportFragmentManager());\n-            dialog.setStatus(StorageMigrationStatus.getStatusMessage(status, MainMenuActivity.this));\n-        }\n-    };\n-\n-    private final BroadcastReceiver storageMigrationResultReceiver = new BroadcastReceiver() {\n-        @Override\n-        public void onReceive(Context context, Intent intent) {\n-            hideStorageMigrationBanner();\n-\n-            StorageMigrationResult result = (StorageMigrationResult) intent.getSerializableExtra(StorageMigrationService.STORAGE_MIGRATION_RESULT);\n-            ToastUtils.showLongToast(StorageMigrationResult.getResultMessage(result, MainMenuActivity.this));\n-\n-            dismissStorageMigrationDialog();\n-        }\n-    };\n+        ToastUtils.showLongToast(StorageMigrationResult.getResultMessage(result, this));\n+    }\n }\n", "next_change": {"commit": "84cff52a1c057bae720a9631f25b9c31fb5acc66", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java b/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java\nindex df9d75e995..82943a009d 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java\n", "chunk": "@@ -666,7 +666,7 @@ public class MainMenuActivity extends CollectAbstractActivity {\n     }\n \n     private void handleMigrationResult(StorageMigrationResult result) {\n-        //findViewById(R.id.storage_migration_banner).setVisibility(View.GONE);\n+        findViewById(R.id.storage_migration_banner).setVisibility(View.GONE);\n \n         DialogUtils.dismissDialog(StorageMigrationDialog.class, getSupportFragmentManager());\n \n", "next_change": {"commit": "0115e56d22efeb15f4543ff851da4bf805f86b3f", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java b/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java\nindex 82943a009d..a16083a68a 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java\n", "chunk": "@@ -667,9 +667,7 @@ public class MainMenuActivity extends CollectAbstractActivity {\n \n     private void handleMigrationResult(StorageMigrationResult result) {\n         findViewById(R.id.storage_migration_banner).setVisibility(View.GONE);\n-\n         DialogUtils.dismissDialog(StorageMigrationDialog.class, getSupportFragmentManager());\n-\n         ToastUtils.showLongToast(StorageMigrationResult.getResultMessage(result, this));\n     }\n }\n", "next_change": {"commit": "37c513832f5d6d4afdc3f2d25b44d342a128014b", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java b/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java\nindex a16083a68a..b2763a1be8 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java\n", "chunk": "@@ -655,19 +671,35 @@ public class MainMenuActivity extends CollectAbstractActivity {\n         }\n     }\n \n-    private void setStorageMigrationBannerVisibility() {\n-        if (!new StorageStateProvider().isScopedStorageUsed()) {\n-            findViewById(R.id.storage_migration_banner).setVisibility(View.VISIBLE);\n+    private void setUpStorageMigrationBanner() {\n+        boolean storageMigrationBannerDismissed = GeneralSharedPreferences.getInstance().getBoolean(KEY_SCOPED_STORAGE_BANNER_DISMISSED, false);\n+        boolean isScopedStorageUsed = new StorageStateProvider().isScopedStorageUsed();\n+\n+        if (!isScopedStorageUsed || !storageMigrationBannerDismissed) {\n+            storageMigrationBanner.setVisibility(View.VISIBLE);\n+            Integer storageMigrationResultCode = (Integer) GeneralSharedPreferences.getInstance().get(KEY_SCOPED_STORAGE_MIGRATION_RESULT);\n+            updateStorageMigrationBanner(StorageMigrationResult.getResult(storageMigrationResultCode));\n         }\n     }\n \n-    public void onStorageMigrationBannerClick(View view) {\n+    public void onStorageMigrationBannerDismiss(View view) {\n+        storageMigrationBanner.setVisibility(View.GONE);\n+        GeneralSharedPreferences.getInstance().save(KEY_SCOPED_STORAGE_BANNER_DISMISSED, true);\n+    }\n+\n+    public void onStorageMigrationBannerLearnMoreClick(View view) {\n         DialogUtils.showIfNotShowing(StorageMigrationDialog.create(), getSupportFragmentManager());\n     }\n \n-    private void handleMigrationResult(StorageMigrationResult result) {\n-        findViewById(R.id.storage_migration_banner).setVisibility(View.GONE);\n+    private void onStorageMigrationFinish(StorageMigrationResult result) {\n         DialogUtils.dismissDialog(StorageMigrationDialog.class, getSupportFragmentManager());\n-        ToastUtils.showLongToast(StorageMigrationResult.getResultMessage(result, this));\n+        GeneralSharedPreferences.getInstance().save(KEY_SCOPED_STORAGE_MIGRATION_RESULT, result.getResultCode());\n+        updateStorageMigrationBanner(result);\n+    }\n+\n+    private void updateStorageMigrationBanner(StorageMigrationResult result) {\n+        storageMigrationBannerDismissButton.setVisibility(result == StorageMigrationResult.SUCCESS ? View.VISIBLE : View.GONE);\n+        storageMigrationBannerLearnMoreButton.setVisibility(result == StorageMigrationResult.SUCCESS ? View.GONE : View.VISIBLE);\n+        storageMigrationBannerText.setText(result.getBannerText(result, this));\n     }\n }\n", "next_change": {"commit": "f7ab62544dfda115e4a1e9bf0e2f6fdc3b3030f6", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java b/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java\nindex b2763a1be8..ec97da9870 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java\n", "chunk": "@@ -688,18 +656,24 @@ public class MainMenuActivity extends CollectAbstractActivity {\n     }\n \n     public void onStorageMigrationBannerLearnMoreClick(View view) {\n-        DialogUtils.showIfNotShowing(StorageMigrationDialog.create(), getSupportFragmentManager());\n+        storageMigrationRepository.getResult().observe(this, this::onStorageMigrationFinish);\n+        if (isAdminPasswordRequired()) {\n+            DialogUtils.showIfNotShowing(AdminPasswordDialog.create(AdminPasswordDialog.Action.STORAGE_MIGRATION), getSupportFragmentManager());\n+        } else {\n+            openStorageMigrationDialog();\n+        }\n     }\n \n     private void onStorageMigrationFinish(StorageMigrationResult result) {\n+        storageMigrationResult = result;\n         DialogUtils.dismissDialog(StorageMigrationDialog.class, getSupportFragmentManager());\n-        GeneralSharedPreferences.getInstance().save(KEY_SCOPED_STORAGE_MIGRATION_RESULT, result.getResultCode());\n-        updateStorageMigrationBanner(result);\n+        updateStorageMigrationBanner();\n+        storageMigrationRepository.consumeResult();\n     }\n \n-    private void updateStorageMigrationBanner(StorageMigrationResult result) {\n-        storageMigrationBannerDismissButton.setVisibility(result == StorageMigrationResult.SUCCESS ? View.VISIBLE : View.GONE);\n-        storageMigrationBannerLearnMoreButton.setVisibility(result == StorageMigrationResult.SUCCESS ? View.GONE : View.VISIBLE);\n-        storageMigrationBannerText.setText(result.getBannerText(result, this));\n+    private void updateStorageMigrationBanner() {\n+        storageMigrationBannerDismissButton.setVisibility(storageMigrationResult == StorageMigrationResult.SUCCESS ? View.VISIBLE : View.GONE);\n+        storageMigrationBannerLearnMoreButton.setVisibility(storageMigrationResult == StorageMigrationResult.SUCCESS ? View.GONE : View.VISIBLE);\n+        storageMigrationBannerText.setText(StorageMigrationResult.getBannerText(storageMigrationResult, this));\n     }\n }\n", "next_change": {"commit": "1a4fd23153181b9a7446d0f92d08144a47c7d560", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java b/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java\nindex ec97da9870..600ea6cc14 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java\n", "chunk": "@@ -665,15 +636,30 @@ public class MainMenuActivity extends CollectAbstractActivity implements AdminPa\n     }\n \n     private void onStorageMigrationFinish(StorageMigrationResult result) {\n-        storageMigrationResult = result;\n-        DialogUtils.dismissDialog(StorageMigrationDialog.class, getSupportFragmentManager());\n-        updateStorageMigrationBanner();\n-        storageMigrationRepository.consumeResult();\n+        if (result == StorageMigrationResult.SUCCESS) {\n+            setUpStorageMigrationBanner();\n+            DialogUtils.dismissDialog(StorageMigrationDialog.class, getSupportFragmentManager());\n+            storageMigrationRepository.consumeResult();\n+        } else {\n+            StorageMigrationDialog storageMigrationDialog = (StorageMigrationDialog) DialogUtils.getDialogFragment(StorageMigrationDialog.class, getSupportFragmentManager());\n+            if (storageMigrationDialog != null) {\n+                storageMigrationDialog.handleMigrationError(result);\n+            }\n+        }\n     }\n \n-    private void updateStorageMigrationBanner() {\n-        storageMigrationBannerDismissButton.setVisibility(storageMigrationResult == StorageMigrationResult.SUCCESS ? View.VISIBLE : View.GONE);\n-        storageMigrationBannerLearnMoreButton.setVisibility(storageMigrationResult == StorageMigrationResult.SUCCESS ? View.GONE : View.VISIBLE);\n-        storageMigrationBannerText.setText(StorageMigrationResult.getBannerText(storageMigrationResult, this));\n+    private void setUpStorageMigrationBanner() {\n+        boolean isScopedStorageUsed = new StorageStateProvider().isScopedStorageUsed();\n+        boolean storageMigrationBannerDismissed = GeneralSharedPreferences.getInstance().getBoolean(KEY_SCOPED_STORAGE_BANNER_DISMISSED, false);\n+\n+        if (isScopedStorageUsed && !storageMigrationBannerDismissed) {\n+            storageMigrationBanner.setVisibility(View.VISIBLE);\n+            storageMigrationBannerText.setText(R.string.storage_migration_completed);\n+            storageMigrationBannerLearnMoreButton.setVisibility(View.GONE);\n+        } else if (!isScopedStorageUsed) {\n+            storageMigrationBanner.setVisibility(View.VISIBLE);\n+            storageMigrationBannerText.setText(R.string.scoped_storage_banner_text);\n+            storageMigrationBannerDismissButton.setVisibility(View.GONE);\n+        }\n     }\n }\n", "next_change": {"commit": "07091fdc081510e516b82e2838087d3b566c9f11", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java b/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java\nindex 600ea6cc14..89ac6ffa26 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java\n", "chunk": "@@ -656,9 +657,11 @@ public class MainMenuActivity extends CollectAbstractActivity implements AdminPa\n             storageMigrationBanner.setVisibility(View.VISIBLE);\n             storageMigrationBannerText.setText(R.string.storage_migration_completed);\n             storageMigrationBannerLearnMoreButton.setVisibility(View.GONE);\n+            storageMigrationBannerDismissButton.setVisibility(View.VISIBLE);\n         } else if (!isScopedStorageUsed) {\n             storageMigrationBanner.setVisibility(View.VISIBLE);\n             storageMigrationBannerText.setText(R.string.scoped_storage_banner_text);\n+            storageMigrationBannerLearnMoreButton.setVisibility(View.VISIBLE);\n             storageMigrationBannerDismissButton.setVisibility(View.GONE);\n         }\n     }\n", "next_change": {"commit": "5fd161fa4c7139e1f2ff66db5893fdb887bee5f4", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java b/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java\nindex 89ac6ffa26..97421cae50 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java\n", "chunk": "@@ -651,18 +661,21 @@ public class MainMenuActivity extends CollectAbstractActivity implements AdminPa\n \n     private void setUpStorageMigrationBanner() {\n         boolean isScopedStorageUsed = new StorageStateProvider().isScopedStorageUsed();\n-        boolean storageMigrationBannerDismissed = GeneralSharedPreferences.getInstance().getBoolean(KEY_SCOPED_STORAGE_BANNER_DISMISSED, false);\n \n-        if (isScopedStorageUsed && !storageMigrationBannerDismissed) {\n-            storageMigrationBanner.setVisibility(View.VISIBLE);\n-            storageMigrationBannerText.setText(R.string.storage_migration_completed);\n-            storageMigrationBannerLearnMoreButton.setVisibility(View.GONE);\n-            storageMigrationBannerDismissButton.setVisibility(View.VISIBLE);\n-        } else if (!isScopedStorageUsed) {\n+        if (!isScopedStorageUsed) {\n             storageMigrationBanner.setVisibility(View.VISIBLE);\n             storageMigrationBannerText.setText(R.string.scoped_storage_banner_text);\n             storageMigrationBannerLearnMoreButton.setVisibility(View.VISIBLE);\n             storageMigrationBannerDismissButton.setVisibility(View.GONE);\n+        } else if (keepBannerWithSuccesMsgVisible) {\n+            displayBannerWithSuccessResult();\n         }\n     }\n+\n+    private void displayBannerWithSuccessResult() {\n+        storageMigrationBanner.setVisibility(View.VISIBLE);\n+        storageMigrationBannerText.setText(R.string.storage_migration_completed);\n+        storageMigrationBannerLearnMoreButton.setVisibility(View.GONE);\n+        storageMigrationBannerDismissButton.setVisibility(View.VISIBLE);\n+    }\n }\n", "next_change": {"commit": "f03d4a8d0c4c125a50f75fb608b68ed702c38795", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java b/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java\nindex 97421cae50..c7c20a6e7f 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java\n", "chunk": "@@ -660,19 +665,21 @@ public class MainMenuActivity extends CollectAbstractActivity implements AdminPa\n     }\n \n     private void setUpStorageMigrationBanner() {\n-        boolean isScopedStorageUsed = new StorageStateProvider().isScopedStorageUsed();\n-\n-        if (!isScopedStorageUsed) {\n-            storageMigrationBanner.setVisibility(View.VISIBLE);\n-            storageMigrationBannerText.setText(R.string.scoped_storage_banner_text);\n-            storageMigrationBannerLearnMoreButton.setVisibility(View.VISIBLE);\n-            storageMigrationBannerDismissButton.setVisibility(View.GONE);\n+        if (!storageStateProvider.isScopedStorageUsed()) {\n+            displayStorageMigrationBanner();\n         } else if (keepBannerWithSuccesMsgVisible) {\n-            displayBannerWithSuccessResult();\n+            displayBannerWithSuccessStorageMigrationResult();\n         }\n     }\n \n-    private void displayBannerWithSuccessResult() {\n+    private void displayStorageMigrationBanner() {\n+        storageMigrationBanner.setVisibility(View.VISIBLE);\n+        storageMigrationBannerText.setText(R.string.scoped_storage_banner_text);\n+        storageMigrationBannerLearnMoreButton.setVisibility(View.VISIBLE);\n+        storageMigrationBannerDismissButton.setVisibility(View.GONE);\n+    }\n+\n+    private void displayBannerWithSuccessStorageMigrationResult() {\n         storageMigrationBanner.setVisibility(View.VISIBLE);\n         storageMigrationBannerText.setText(R.string.storage_migration_completed);\n         storageMigrationBannerLearnMoreButton.setVisibility(View.GONE);\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTk4MTM2MQ==", "url": "https://github.com/getodk/collect/pull/3623#discussion_r375981361", "body": "What are you thinking for tests for this? Feels to me like testing the `StorageMigrator` in a all the possible scenarios (each result) and then maybe an Espresso test for the \"happy case\" (where everything goes right)?", "bodyText": "What are you thinking for tests for this? Feels to me like testing the StorageMigrator in a all the possible scenarios (each result) and then maybe an Espresso test for the \"happy case\" (where everything goes right)?", "bodyHTML": "<p dir=\"auto\">What are you thinking for tests for this? Feels to me like testing the <code>StorageMigrator</code> in a all the possible scenarios (each result) and then maybe an Espresso test for the \"happy case\" (where everything goes right)?</p>", "author": "seadowg", "createdAt": "2020-02-06T17:37:36Z", "path": "collect_app/src/main/java/org/odk/collect/android/storage/StorageMigrator.java", "diffHunk": "@@ -0,0 +1,201 @@\n+package org.odk.collect.android.storage;\n+\n+import android.content.ContentValues;\n+import android.database.Cursor;\n+\n+import androidx.lifecycle.LiveData;\n+import androidx.work.WorkInfo;\n+import androidx.work.WorkManager;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.odk.collect.android.dao.FormsDao;\n+import org.odk.collect.android.dao.InstancesDao;\n+import org.odk.collect.android.dao.ItemsetDao;\n+import org.odk.collect.android.database.ItemsetDbAdapter;\n+import org.odk.collect.android.forms.Form;\n+import org.odk.collect.android.instances.Instance;\n+import org.odk.collect.android.itemsets.Itemset;\n+import org.odk.collect.android.provider.FormsProvider;\n+import org.odk.collect.android.provider.InstanceProvider;\n+import org.odk.collect.android.tasks.ServerPollingJob;\n+import org.odk.collect.android.upload.AutoSendWorker;\n+\n+import java.io.File;\n+import java.util.List;\n+\n+import timber.log.Timber;\n+\n+import static android.provider.BaseColumns._ID;\n+import static org.odk.collect.android.database.ItemsetDbAdapter.KEY_PATH;\n+import static org.odk.collect.android.provider.FormsProviderAPI.FormsColumns.FORM_FILE_PATH;\n+import static org.odk.collect.android.provider.FormsProviderAPI.FormsColumns.FORM_MEDIA_PATH;\n+import static org.odk.collect.android.provider.FormsProviderAPI.FormsColumns.JRCACHE_FILE_PATH;\n+import static org.odk.collect.android.provider.InstanceProviderAPI.InstanceColumns.INSTANCE_FILE_PATH;\n+\n+public class StorageMigrator {", "originalCommit": "7ccb37aaabd3f90e604aa96add99ec57eeb8e2a6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQwNTI3Nw==", "url": "https://github.com/getodk/collect/pull/3623#discussion_r376405277", "bodyText": "Ok I added such a test.\nWhen it comes to Espresso we need to have the UI implemented first.", "author": "grzesiek2010", "createdAt": "2020-02-07T14:03:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTk4MTM2MQ=="}], "type": "inlineReview", "revised_code": {"commit": "e8c792063a9b0c171775e5e8e5f6ec1d6e0c392e", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/storage/StorageMigrator.java b/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrator.java\nsimilarity index 58%\nrename from collect_app/src/main/java/org/odk/collect/android/storage/StorageMigrator.java\nrename to collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrator.java\nindex 7540b2ff7..54a938a77 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/storage/StorageMigrator.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrator.java\n", "chunk": "@@ -33,25 +32,29 @@ import static org.odk.collect.android.provider.FormsProviderAPI.FormsColumns.JRC\n import static org.odk.collect.android.provider.InstanceProviderAPI.InstanceColumns.INSTANCE_FILE_PATH;\n \n public class StorageMigrator {\n+    private static final String WHERE_ID = _ID + \"=?\";\n \n-    private StoragePathProvider storagePathProvider;\n-    private StorageStateProvider storageStateProvider;\n-    private StorageEraser storageEraser;\n+    private final StoragePathProvider storagePathProvider;\n+    private final StorageStateProvider storageStateProvider;\n+    private final StorageEraser storageEraser;\n \n-    public static boolean isMigrationBeingPerformed;\n+    private final StorageMigrationRepository storageMigrationRepository;\n \n-    public StorageMigrator() {\n-        this(new StoragePathProvider(), new StorageStateProvider(), new StorageEraser());\n-    }\n-\n-    private StorageMigrator(StoragePathProvider storagePathProvider, StorageStateProvider storageStateProvider, StorageEraser storageEraser) {\n+    public StorageMigrator(StoragePathProvider storagePathProvider, StorageStateProvider storageStateProvider, StorageEraser storageEraser, StorageMigrationRepository storageMigrationRepository) {\n         this.storagePathProvider = storagePathProvider;\n         this.storageStateProvider = storageStateProvider;\n         this.storageEraser = storageEraser;\n+        this.storageMigrationRepository = storageMigrationRepository;\n+    }\n+\n+    void performStorageMigration() {\n+        storageMigrationRepository.markMigrationStart();\n+        storageMigrationRepository.setResult(migrate());\n+        storageMigrationRepository.markMigrationEnd();\n     }\n \n-    StorageMigrationResult performStorageMigration() {\n-        storageEraser.clearOdkDirOnScopedStorage(storagePathProvider);\n+    StorageMigrationResult migrate() {\n+        storageEraser.clearOdkDirOnScopedStorage();\n \n         if (isFormUploaderRunning()) {\n             return StorageMigrationResult.FORM_UPLOADER_IS_RUNNING;\n", "next_change": null}]}}, {"oid": "97d7fe364b273c029e11fd0ff55c461b31f4eba6", "url": "https://github.com/getodk/collect/commit/97d7fe364b273c029e11fd0ff55c461b31f4eba6", "message": "Moved classes responsible for migation to one dir", "committedDate": "2020-02-07T12:03:07Z", "type": "forcePushed"}, {"oid": "62cc09991827ebe2b5a671a4b780113f9c4b4655", "url": "https://github.com/getodk/collect/commit/62cc09991827ebe2b5a671a4b780113f9c4b4655", "message": "Replace AsyncTask with Service", "committedDate": "2020-02-11T14:57:44Z", "type": "forcePushed"}, {"oid": "1500526aee46a3dbb83fb3d6c9f6d1fd3ae8006a", "url": "https://github.com/getodk/collect/commit/1500526aee46a3dbb83fb3d6c9f6d1fd3ae8006a", "message": "Gray out the messgage after starting migration", "committedDate": "2020-02-11T15:16:03Z", "type": "forcePushed"}, {"oid": "0e141054594c4c079b5151ea14f67f7ca3684803", "url": "https://github.com/getodk/collect/commit/0e141054594c4c079b5151ea14f67f7ca3684803", "message": "Removed unused string", "committedDate": "2020-02-11T15:45:29Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODEwMDYxMw==", "url": "https://github.com/getodk/collect/pull/3623#discussion_r378100613", "body": "I think we should be using an `IntentService` here (https://developer.android.com/guide/components/services#ExtendingIntentService). I've usually used them in the past as they take care of creating a worker threads and also protect us from multiple requests being exectued simultaneously etc. This would potentially mean the service could take care of the lock in `StorageMigrator` (`.isMigrationBeingPerformed`). Also if we do use a plain ol' service I think it needs to call `stopSelf()` when we're done executing - again an `IntentService` just takes care of that for us. \r\n\r\nSorry if this is research you already did and made the decision for some reason I'm missing!", "bodyText": "I think we should be using an IntentService here (https://developer.android.com/guide/components/services#ExtendingIntentService). I've usually used them in the past as they take care of creating a worker threads and also protect us from multiple requests being exectued simultaneously etc. This would potentially mean the service could take care of the lock in StorageMigrator (.isMigrationBeingPerformed). Also if we do use a plain ol' service I think it needs to call stopSelf() when we're done executing - again an IntentService just takes care of that for us.\nSorry if this is research you already did and made the decision for some reason I'm missing!", "bodyHTML": "<p dir=\"auto\">I think we should be using an <code>IntentService</code> here (<a href=\"https://developer.android.com/guide/components/services#ExtendingIntentService\" rel=\"nofollow\">https://developer.android.com/guide/components/services#ExtendingIntentService</a>). I've usually used them in the past as they take care of creating a worker threads and also protect us from multiple requests being exectued simultaneously etc. This would potentially mean the service could take care of the lock in <code>StorageMigrator</code> (<code>.isMigrationBeingPerformed</code>). Also if we do use a plain ol' service I think it needs to call <code>stopSelf()</code> when we're done executing - again an <code>IntentService</code> just takes care of that for us.</p>\n<p dir=\"auto\">Sorry if this is research you already did and made the decision for some reason I'm missing!</p>", "author": "seadowg", "createdAt": "2020-02-12T08:29:49Z", "path": "collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationService.java", "diffHunk": "@@ -0,0 +1,51 @@\n+package org.odk.collect.android.storage.migration;\n+\n+import android.content.Intent;\n+\n+import androidx.lifecycle.LifecycleService;\n+import androidx.localbroadcastmanager.content.LocalBroadcastManager;\n+\n+import org.jetbrains.annotations.NotNull;\n+import org.odk.collect.android.storage.StoragePathProvider;\n+import org.odk.collect.android.storage.StorageStateProvider;\n+\n+public class StorageMigrationService extends LifecycleService {", "originalCommit": "0e141054594c4c079b5151ea14f67f7ca3684803", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODI5MzAzNQ==", "url": "https://github.com/getodk/collect/pull/3623#discussion_r378293035", "bodyText": "I was thinking about using broadcast receivers vs livedata... could you take a look at the last commit whwre I replaced broadcast receivers with livedata and share you thought?", "author": "grzesiek2010", "createdAt": "2020-02-12T14:41:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODEwMDYxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODM2MDU5NA==", "url": "https://github.com/getodk/collect/pull/3623#discussion_r378360594", "bodyText": "Using LiveData does seem a lot cleaner in the observers (the Activity and the DialogFragment). I'd want to avoid having the LiveData object being static and also avoid having the StorageMigrator have to deal with LiveData though. This is to avoid us running into problems with tests polluting each other  and also just avoids complicating the StorageMigrator with reactive stuff.\nWhat I might do is look at having a seperate MigrationStatusRepository like this:\nclass MigrationStatusRepository {\n\n    private MutableLiveData<StorageMigrationResult> migrationStatus = new MutableLiveData<>();\n\n    public LiveData<StorageMigrationResult> getStatus() {\n        return migrationStatus;\n    }\n\n    public void setStatus(StorageMigrationResult storageMigrationResult) {\n        migrationStatus.setValue(storageMigrationResult);\n    }\n}\nThe Activity/Fragment would call getStatus() to observe and the Service could write the status when StorageMigrator completes using setStatus. This can be set up as a singleton (Dagger's @Singleton) and injected into the Activity, Fragment and Service. That way it can be easily swapped out in tests for any of those objects.\nHow does that feel? cc/ @lognaturel", "author": "seadowg", "createdAt": "2020-02-12T16:21:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODEwMDYxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU2NDU2NQ==", "url": "https://github.com/getodk/collect/pull/3623#discussion_r378564565", "bodyText": "But the service doesn't know about every single step it just starts migration (one method) sot it might receive the result but not every single status which changes after every step. Looking at your code where you mixed words status and result I think you didn't notice that we need both: one general result and a few statuses to update current progress text.", "author": "grzesiek2010", "createdAt": "2020-02-12T23:05:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODEwMDYxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU2NTQ1MQ==", "url": "https://github.com/getodk/collect/pull/3623#discussion_r378565451", "bodyText": "So I would need to\n\ninject such repository to StorageMigrator class\nor divide the migration into a few methods and call all of them in Service one by one (and then deal with statuses in Service)", "author": "grzesiek2010", "createdAt": "2020-02-12T23:07:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODEwMDYxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc0ODMxOA==", "url": "https://github.com/getodk/collect/pull/3623#discussion_r378748318", "bodyText": "Ah you're absolutely right I missed that somehow. Sorry about that.\nYeah I'd still think about about looking at something lilke the MigrationStatusRespository. It could injected into the StorageMigrator (probably just as a constructor argument). It could still just have one set/get pair as the \"results\" could also just be a statuses i.e. the status could change from MIGRATING_DATABASES to SUCCESS or  from PREPARING_SCOPED_STORAGE to NOT_ENOUGH_SPACE.", "author": "seadowg", "createdAt": "2020-02-13T09:40:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODEwMDYxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODg1NDUzMg==", "url": "https://github.com/getodk/collect/pull/3623#discussion_r378854532", "bodyText": "Ok I pushed new changes and now I use LiveData and a repository class for both results and statuses. I think those statuses is more like my idea so here is a question to @lognaturel because maybe you just want to display one message like Please wait. it might take a few seconds... and then we can get rid of it at all otherwise I think we need both.", "author": "grzesiek2010", "createdAt": "2020-02-13T13:21:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODEwMDYxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTI0OTczNA==", "url": "https://github.com/getodk/collect/pull/3623#discussion_r379249734", "bodyText": "My initial reaction was that I really like the statuses because it gives users a sense of progress. That said, it's not clear that the information is actionable, the migration is going to be really quick for most people and it's a lot of translation effort for a one-time migration. Let's go with \"Migration in progress.\\nThis may take a few seconds...\" I do like the approach you'd come up with for the statuses, though @grzesiek2010. Sorry to see it go.", "author": "lognaturel", "createdAt": "2020-02-14T04:50:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODEwMDYxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTM1MjMzMw==", "url": "https://github.com/getodk/collect/pull/3623#discussion_r379352333", "bodyText": "Ok, done.", "author": "grzesiek2010", "createdAt": "2020-02-14T10:18:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODEwMDYxMw=="}], "type": "inlineReview", "revised_code": {"commit": "e8c792063a9b0c171775e5e8e5f6ec1d6e0c392e", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationService.java b/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationService.java\nindex 02c188cdca..efddf8ca00 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationService.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationService.java\n", "chunk": "@@ -1,51 +1,25 @@\n package org.odk.collect.android.storage.migration;\n \n+import android.app.IntentService;\n import android.content.Intent;\n \n-import androidx.lifecycle.LifecycleService;\n-import androidx.localbroadcastmanager.content.LocalBroadcastManager;\n+import androidx.annotation.Nullable;\n \n-import org.jetbrains.annotations.NotNull;\n-import org.odk.collect.android.storage.StoragePathProvider;\n-import org.odk.collect.android.storage.StorageStateProvider;\n+import org.odk.collect.android.application.Collect;\n \n-public class StorageMigrationService extends LifecycleService {\n-    public static final String STORAGE_MIGRATION_STATUS_INTENT = \"storageMigrationStatusIntent\";\n-    public static final String STORAGE_MIGRATION_STATUS = \"storageMigrationStatus\";\n+import javax.inject.Inject;\n \n-    public static final String STORAGE_MIGRATION_RESULT_INTENT = \"storageMigrationResultIntent\";\n-    public static final String STORAGE_MIGRATION_RESULT = \"storageMigrationResult\";\n+public class StorageMigrationService extends IntentService {\n+    @Inject\n+    StorageMigrator storageMigrator;\n \n-    @Override\n-    public int onStartCommand(@NotNull Intent intent, int flags, int startId) {\n-        StoragePathProvider storagePathProvider = new StoragePathProvider();\n-        StorageStateProvider storageStateProvider = new StorageStateProvider();\n-        StorageEraser storageEraser = new StorageEraser(storagePathProvider);\n-\n-        StorageMigrator storageMigrator = new StorageMigrator(storagePathProvider, storageStateProvider, storageEraser);\n-        storageMigrator.getStatus().observe(this, this::sendStatus);\n-\n-        new Thread() {\n-            @Override\n-            public void run() {\n-                StorageMigrator.isMigrationBeingPerformed = true;\n-                sendResult(storageMigrator.performStorageMigration());\n-                StorageMigrator.isMigrationBeingPerformed = false;\n-            }\n-        }.start();\n-\n-        return super.onStartCommand(intent, flags, startId);\n+    public StorageMigrationService() {\n+        super(\"StorageMigrationService\");\n+        Collect.getInstance().getComponent().inject(this);\n     }\n \n-    private void sendStatus(StorageMigrationStatus status) {\n-        Intent intent = new Intent(STORAGE_MIGRATION_STATUS_INTENT);\n-        intent.putExtra(STORAGE_MIGRATION_STATUS, status);\n-        LocalBroadcastManager.getInstance(this).sendBroadcast(intent);\n-    }\n-\n-    private void sendResult(StorageMigrationResult result) {\n-        Intent intent = new Intent(STORAGE_MIGRATION_RESULT_INTENT);\n-        intent.putExtra(STORAGE_MIGRATION_RESULT, result);\n-        LocalBroadcastManager.getInstance(this).sendBroadcast(intent);\n+    @Override\n+    protected void onHandleIntent(@Nullable Intent intent) {\n+        storageMigrator.performStorageMigration();\n     }\n }\n", "next_change": {"commit": "de4a297917d1b8b7ac2eae0018a8567d74fd4486", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationService.java b/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationService.java\nindex efddf8ca00..7fd0834c13 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationService.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationService.java\n", "chunk": "@@ -1,25 +1,38 @@\n package org.odk.collect.android.storage.migration;\n \n-import android.app.IntentService;\n+import android.app.Service;\n import android.content.Intent;\n+import android.os.IBinder;\n \n import androidx.annotation.Nullable;\n \n-import org.odk.collect.android.application.Collect;\n+import org.jetbrains.annotations.NotNull;\n+import org.odk.collect.android.storage.StoragePathProvider;\n+import org.odk.collect.android.storage.StorageStateProvider;\n \n-import javax.inject.Inject;\n+public class StorageMigrationService extends Service {\n+    @Override\n+    public int onStartCommand(@NotNull Intent intent, int flags, int startId) {\n+        new Thread() {\n+            @Override\n+            public void run() {\n+                StorageMigrator.isMigrationBeingPerformed = true;\n+\n+                StoragePathProvider storagePathProvider = new StoragePathProvider();\n+                StorageStateProvider storageStateProvider = new StorageStateProvider();\n+                StorageEraser storageEraser = new StorageEraser(storagePathProvider);\n+                new StorageMigrator(storagePathProvider, storageStateProvider, storageEraser).performStorageMigration();\n \n-public class StorageMigrationService extends IntentService {\n-    @Inject\n-    StorageMigrator storageMigrator;\n+                StorageMigrator.isMigrationBeingPerformed = false;\n+            }\n+        }.start();\n \n-    public StorageMigrationService() {\n-        super(\"StorageMigrationService\");\n-        Collect.getInstance().getComponent().inject(this);\n+        return super.onStartCommand(intent, flags, startId);\n     }\n \n+    @Nullable\n     @Override\n-    protected void onHandleIntent(@Nullable Intent intent) {\n-        storageMigrator.performStorageMigration();\n+    public IBinder onBind(Intent intent) {\n+        return null;\n     }\n }\n", "next_change": {"commit": "a39b50ca8ce1004dbb524e23d861052f2ba83918", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationService.java b/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationService.java\nindex 7fd0834c13..efddf8ca00 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationService.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationService.java\n", "chunk": "@@ -1,38 +1,25 @@\n package org.odk.collect.android.storage.migration;\n \n-import android.app.Service;\n+import android.app.IntentService;\n import android.content.Intent;\n-import android.os.IBinder;\n \n import androidx.annotation.Nullable;\n \n-import org.jetbrains.annotations.NotNull;\n-import org.odk.collect.android.storage.StoragePathProvider;\n-import org.odk.collect.android.storage.StorageStateProvider;\n+import org.odk.collect.android.application.Collect;\n \n-public class StorageMigrationService extends Service {\n-    @Override\n-    public int onStartCommand(@NotNull Intent intent, int flags, int startId) {\n-        new Thread() {\n-            @Override\n-            public void run() {\n-                StorageMigrator.isMigrationBeingPerformed = true;\n-\n-                StoragePathProvider storagePathProvider = new StoragePathProvider();\n-                StorageStateProvider storageStateProvider = new StorageStateProvider();\n-                StorageEraser storageEraser = new StorageEraser(storagePathProvider);\n-                new StorageMigrator(storagePathProvider, storageStateProvider, storageEraser).performStorageMigration();\n+import javax.inject.Inject;\n \n-                StorageMigrator.isMigrationBeingPerformed = false;\n-            }\n-        }.start();\n+public class StorageMigrationService extends IntentService {\n+    @Inject\n+    StorageMigrator storageMigrator;\n \n-        return super.onStartCommand(intent, flags, startId);\n+    public StorageMigrationService() {\n+        super(\"StorageMigrationService\");\n+        Collect.getInstance().getComponent().inject(this);\n     }\n \n-    @Nullable\n     @Override\n-    public IBinder onBind(Intent intent) {\n-        return null;\n+    protected void onHandleIntent(@Nullable Intent intent) {\n+        storageMigrator.performStorageMigration();\n     }\n }\n", "next_change": {"commit": "2aec2cef76323fcadf43baad6f780922420fbea9", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationService.java b/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationService.java\ndeleted file mode 100644\nindex efddf8ca00..0000000000\n--- a/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationService.java\n+++ /dev/null\n", "chunk": "@@ -1,25 +0,0 @@\n-package org.odk.collect.android.storage.migration;\n-\n-import android.app.IntentService;\n-import android.content.Intent;\n-\n-import androidx.annotation.Nullable;\n-\n-import org.odk.collect.android.application.Collect;\n-\n-import javax.inject.Inject;\n-\n-public class StorageMigrationService extends IntentService {\n-    @Inject\n-    StorageMigrator storageMigrator;\n-\n-    public StorageMigrationService() {\n-        super(\"StorageMigrationService\");\n-        Collect.getInstance().getComponent().inject(this);\n-    }\n-\n-    @Override\n-    protected void onHandleIntent(@Nullable Intent intent) {\n-        storageMigrator.performStorageMigration();\n-    }\n-}\n", "next_change": {"commit": "17e476115da9892b9be2d92ab1b473b99e578f4c", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationService.java b/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationService.java\nnew file mode 100644\nindex 0000000000..02c188cdca\n--- /dev/null\n+++ b/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationService.java\n", "chunk": "@@ -0,0 +1,51 @@\n+package org.odk.collect.android.storage.migration;\n+\n+import android.content.Intent;\n+\n+import androidx.lifecycle.LifecycleService;\n+import androidx.localbroadcastmanager.content.LocalBroadcastManager;\n+\n+import org.jetbrains.annotations.NotNull;\n+import org.odk.collect.android.storage.StoragePathProvider;\n+import org.odk.collect.android.storage.StorageStateProvider;\n+\n+public class StorageMigrationService extends LifecycleService {\n+    public static final String STORAGE_MIGRATION_STATUS_INTENT = \"storageMigrationStatusIntent\";\n+    public static final String STORAGE_MIGRATION_STATUS = \"storageMigrationStatus\";\n+\n+    public static final String STORAGE_MIGRATION_RESULT_INTENT = \"storageMigrationResultIntent\";\n+    public static final String STORAGE_MIGRATION_RESULT = \"storageMigrationResult\";\n+\n+    @Override\n+    public int onStartCommand(@NotNull Intent intent, int flags, int startId) {\n+        StoragePathProvider storagePathProvider = new StoragePathProvider();\n+        StorageStateProvider storageStateProvider = new StorageStateProvider();\n+        StorageEraser storageEraser = new StorageEraser(storagePathProvider);\n+\n+        StorageMigrator storageMigrator = new StorageMigrator(storagePathProvider, storageStateProvider, storageEraser);\n+        storageMigrator.getStatus().observe(this, this::sendStatus);\n+\n+        new Thread() {\n+            @Override\n+            public void run() {\n+                StorageMigrator.isMigrationBeingPerformed = true;\n+                sendResult(storageMigrator.performStorageMigration());\n+                StorageMigrator.isMigrationBeingPerformed = false;\n+            }\n+        }.start();\n+\n+        return super.onStartCommand(intent, flags, startId);\n+    }\n+\n+    private void sendStatus(StorageMigrationStatus status) {\n+        Intent intent = new Intent(STORAGE_MIGRATION_STATUS_INTENT);\n+        intent.putExtra(STORAGE_MIGRATION_STATUS, status);\n+        LocalBroadcastManager.getInstance(this).sendBroadcast(intent);\n+    }\n+\n+    private void sendResult(StorageMigrationResult result) {\n+        Intent intent = new Intent(STORAGE_MIGRATION_RESULT_INTENT);\n+        intent.putExtra(STORAGE_MIGRATION_RESULT, result);\n+        LocalBroadcastManager.getInstance(this).sendBroadcast(intent);\n+    }\n+}\n", "next_change": {"commit": "4644f0f351ac9b4fbbc9eb84f1047fd9d3acf6cf", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationService.java b/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationService.java\nindex 02c188cdca..bf71081d91 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationService.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationService.java\n", "chunk": "@@ -37,15 +35,9 @@ public class StorageMigrationService extends LifecycleService {\n         return super.onStartCommand(intent, flags, startId);\n     }\n \n-    private void sendStatus(StorageMigrationStatus status) {\n-        Intent intent = new Intent(STORAGE_MIGRATION_STATUS_INTENT);\n-        intent.putExtra(STORAGE_MIGRATION_STATUS, status);\n-        LocalBroadcastManager.getInstance(this).sendBroadcast(intent);\n-    }\n-\n-    private void sendResult(StorageMigrationResult result) {\n-        Intent intent = new Intent(STORAGE_MIGRATION_RESULT_INTENT);\n-        intent.putExtra(STORAGE_MIGRATION_RESULT, result);\n-        LocalBroadcastManager.getInstance(this).sendBroadcast(intent);\n+    @Nullable\n+    @Override\n+    public IBinder onBind(Intent intent) {\n+        return null;\n     }\n }\n", "next_change": {"commit": "f49f991bf12f226e5d58d31538e969952628b0b2", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationService.java b/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationService.java\nindex bf71081d91..efddf8ca00 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationService.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationService.java\n", "chunk": "@@ -1,43 +1,25 @@\n package org.odk.collect.android.storage.migration;\n \n-import android.app.Service;\n+import android.app.IntentService;\n import android.content.Intent;\n-import android.os.IBinder;\n \n import androidx.annotation.Nullable;\n \n-import org.jetbrains.annotations.NotNull;\n import org.odk.collect.android.application.Collect;\n \n import javax.inject.Inject;\n \n-public class StorageMigrationService extends Service {\n+public class StorageMigrationService extends IntentService {\n     @Inject\n     StorageMigrator storageMigrator;\n \n-    @Override\n-    public void onCreate() {\n-        super.onCreate();\n+    public StorageMigrationService() {\n+        super(\"StorageMigrationService\");\n         Collect.getInstance().getComponent().inject(this);\n     }\n \n     @Override\n-    public int onStartCommand(@NotNull Intent intent, int flags, int startId) {\n-        new Thread() {\n-            @Override\n-            public void run() {\n-                StorageMigrator.isMigrationBeingPerformed = true;\n-                storageMigrator.performStorageMigration();\n-                StorageMigrator.isMigrationBeingPerformed = false;\n-            }\n-        }.start();\n-\n-        return super.onStartCommand(intent, flags, startId);\n-    }\n-\n-    @Nullable\n-    @Override\n-    public IBinder onBind(Intent intent) {\n-        return null;\n+    protected void onHandleIntent(@Nullable Intent intent) {\n+        storageMigrator.performStorageMigration();\n     }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODEwODk4NQ==", "url": "https://github.com/getodk/collect/pull/3623#discussion_r378108985", "body": "You should be able to use the `MaterialFullScreenDialogFragment` for this I think", "bodyText": "You should be able to use the MaterialFullScreenDialogFragment for this I think", "bodyHTML": "<p dir=\"auto\">You should be able to use the <code>MaterialFullScreenDialogFragment</code> for this I think</p>", "author": "seadowg", "createdAt": "2020-02-12T08:48:05Z", "path": "collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationDialog.java", "diffHunk": "@@ -0,0 +1,69 @@\n+package org.odk.collect.android.storage.migration;\n+\n+import android.app.Activity;\n+import android.content.Intent;\n+import android.os.Bundle;\n+import android.view.LayoutInflater;\n+import android.view.View;\n+import android.view.ViewGroup;\n+import android.widget.Button;\n+import android.widget.TextView;\n+\n+import androidx.annotation.Nullable;\n+import androidx.appcompat.widget.Toolbar;\n+import androidx.fragment.app.DialogFragment;\n+\n+import org.jetbrains.annotations.NotNull;\n+import org.odk.collect.android.R;\n+\n+public class StorageMigrationDialog extends DialogFragment {", "originalCommit": "0e141054594c4c079b5151ea14f67f7ca3684803", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODI1Mjc0OA==", "url": "https://github.com/getodk/collect/pull/3623#discussion_r378252748", "bodyText": "Fixed.", "author": "grzesiek2010", "createdAt": "2020-02-12T13:35:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODEwODk4NQ=="}], "type": "inlineReview", "revised_code": {"commit": "e8c792063a9b0c171775e5e8e5f6ec1d6e0c392e", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationDialog.java b/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationDialog.java\nindex 9bf4480829..f8faaac24b 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationDialog.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationDialog.java\n", "chunk": "@@ -7,28 +7,58 @@ import android.view.LayoutInflater;\n import android.view.View;\n import android.view.ViewGroup;\n import android.widget.Button;\n+import android.widget.LinearLayout;\n import android.widget.TextView;\n \n-import androidx.annotation.Nullable;\n-import androidx.appcompat.widget.Toolbar;\n-import androidx.fragment.app.DialogFragment;\n-\n import org.jetbrains.annotations.NotNull;\n import org.odk.collect.android.R;\n+import org.odk.collect.android.activities.WebViewActivity;\n+import org.odk.collect.android.application.Collect;\n+import org.odk.collect.android.fragments.dialogs.AdminPasswordDialog;\n+import org.odk.collect.android.material.MaterialFullScreenDialogFragment;\n+import org.odk.collect.android.utilities.AdminPasswordProvider;\n+import org.odk.collect.android.utilities.DialogUtils;\n+\n+import butterknife.BindView;\n+import butterknife.ButterKnife;\n+\n+public class StorageMigrationDialog extends MaterialFullScreenDialogFragment {\n+\n+    private final int unsentInstancesNumber;\n+\n+    @BindView(R.id.cancelButton)\n+    Button cancelButton;\n+\n+    @BindView(R.id.migrateButton)\n+    Button migrateButton;\n \n-public class StorageMigrationDialog extends DialogFragment {\n+    @BindView(R.id.messageText1)\n+    TextView messageText1;\n \n-    private TextView statusTextView;\n+    @BindView(R.id.messageText2)\n+    TextView messageText2;\n \n-    public static StorageMigrationDialog create() {\n-        return new StorageMigrationDialog();\n+    @BindView(R.id.messageText3)\n+    TextView messageText3;\n+\n+    @BindView(R.id.moreDetailsButton)\n+    TextView moreDetailsButton;\n+\n+    @BindView(R.id.errorText)\n+    TextView errorText;\n+\n+    @BindView(R.id.progressBar)\n+    LinearLayout progressBar;\n+\n+    private final AdminPasswordProvider adminPasswordProvider;\n+\n+    public static StorageMigrationDialog create(AdminPasswordProvider adminPasswordProvider, int unsentInstances) {\n+        return new StorageMigrationDialog(adminPasswordProvider, unsentInstances);\n     }\n \n-    @Override\n-    public void onCreate(@Nullable Bundle savedInstanceState) {\n-        super.onCreate(savedInstanceState);\n-        setCancelable(false);\n-        setStyle(DialogFragment.STYLE_NORMAL, R.style.Theme_Collect_Dialog_FullScreen);\n+    private StorageMigrationDialog(AdminPasswordProvider adminPasswordProvider, int unsentInstancesNumber) {\n+        this.adminPasswordProvider = adminPasswordProvider;\n+        this.unsentInstancesNumber = unsentInstancesNumber;\n     }\n \n     @Override\n", "next_change": {"commit": "2dc78a9857fa4b78c5e388fb8e90a7e2e9ac9d63", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationDialog.java b/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationDialog.java\nindex f8faaac24..de0fb843a 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationDialog.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationDialog.java\n", "chunk": "@@ -50,15 +54,24 @@ public class StorageMigrationDialog extends MaterialFullScreenDialogFragment {\n     @BindView(R.id.progressBar)\n     LinearLayout progressBar;\n \n-    private final AdminPasswordProvider adminPasswordProvider;\n+    @Inject\n+    AdminPasswordProvider adminPasswordProvider;\n+\n+    private int unsentInstancesNumber;\n+\n+    public static StorageMigrationDialog create(int unsentInstances) {\n+        StorageMigrationDialog storageMigrationDialog = new StorageMigrationDialog();\n+        Bundle bundle = new Bundle();\n+        bundle.putInt(UNSENT_INSTANCES, unsentInstances);\n+        storageMigrationDialog.setArguments(bundle);\n \n-    public static StorageMigrationDialog create(AdminPasswordProvider adminPasswordProvider, int unsentInstances) {\n-        return new StorageMigrationDialog(adminPasswordProvider, unsentInstances);\n+        return storageMigrationDialog;\n     }\n \n-    private StorageMigrationDialog(AdminPasswordProvider adminPasswordProvider, int unsentInstancesNumber) {\n-        this.adminPasswordProvider = adminPasswordProvider;\n-        this.unsentInstancesNumber = unsentInstancesNumber;\n+    @Override\n+    public void onAttach(@NotNull Context context) {\n+        super.onAttach(context);\n+        DaggerUtils.getComponent(context).inject(this);\n     }\n \n     @Override\n", "next_change": {"commit": "de4a297917d1b8b7ac2eae0018a8567d74fd4486", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationDialog.java b/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationDialog.java\nindex de0fb843af..67d3c37cf4 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationDialog.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationDialog.java\n", "chunk": "@@ -1,77 +1,28 @@\n package org.odk.collect.android.storage.migration;\n \n import android.app.Activity;\n-import android.content.Context;\n import android.content.Intent;\n import android.os.Bundle;\n import android.view.LayoutInflater;\n import android.view.View;\n import android.view.ViewGroup;\n import android.widget.Button;\n-import android.widget.LinearLayout;\n import android.widget.TextView;\n \n import org.jetbrains.annotations.NotNull;\n import org.odk.collect.android.R;\n-import org.odk.collect.android.activities.WebViewActivity;\n-import org.odk.collect.android.application.Collect;\n-import org.odk.collect.android.fragments.dialogs.AdminPasswordDialog;\n-import org.odk.collect.android.injection.DaggerUtils;\n import org.odk.collect.android.material.MaterialFullScreenDialogFragment;\n-import org.odk.collect.android.utilities.AdminPasswordProvider;\n-import org.odk.collect.android.utilities.DialogUtils;\n-\n-import javax.inject.Inject;\n-\n-import butterknife.BindView;\n-import butterknife.ButterKnife;\n \n public class StorageMigrationDialog extends MaterialFullScreenDialogFragment {\n \n-    private static final String UNSENT_INSTANCES = \"unsentInstances\";\n-\n-    @BindView(R.id.cancelButton)\n-    Button cancelButton;\n-\n-    @BindView(R.id.migrateButton)\n-    Button migrateButton;\n-\n-    @BindView(R.id.messageText1)\n-    TextView messageText1;\n-\n-    @BindView(R.id.messageText2)\n-    TextView messageText2;\n-\n-    @BindView(R.id.messageText3)\n-    TextView messageText3;\n-\n-    @BindView(R.id.moreDetailsButton)\n-    TextView moreDetailsButton;\n-\n-    @BindView(R.id.errorText)\n-    TextView errorText;\n-\n-    @BindView(R.id.progressBar)\n-    LinearLayout progressBar;\n-\n-    @Inject\n-    AdminPasswordProvider adminPasswordProvider;\n+    private TextView statusTextView;\n \n-    private int unsentInstancesNumber;\n-\n-    public static StorageMigrationDialog create(int unsentInstances) {\n-        StorageMigrationDialog storageMigrationDialog = new StorageMigrationDialog();\n-        Bundle bundle = new Bundle();\n-        bundle.putInt(UNSENT_INSTANCES, unsentInstances);\n-        storageMigrationDialog.setArguments(bundle);\n-\n-        return storageMigrationDialog;\n+    public static StorageMigrationDialog create() {\n+        return new StorageMigrationDialog();\n     }\n \n-    @Override\n-    public void onAttach(@NotNull Context context) {\n-        super.onAttach(context);\n-        DaggerUtils.getComponent(context).inject(this);\n+    private StorageMigrationDialog() {\n+        StorageMigrator.STATUS.observe(this, this::setStatus);\n     }\n \n     @Override\n", "next_change": {"commit": "dcc8858054effc1658c7fd6c93336794057921eb", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationDialog.java b/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationDialog.java\nindex 67d3c37cf4..d88ffbc9f5 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationDialog.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationDialog.java\n", "chunk": "@@ -11,18 +11,25 @@ import android.widget.TextView;\n \n import org.jetbrains.annotations.NotNull;\n import org.odk.collect.android.R;\n+import org.odk.collect.android.application.Collect;\n import org.odk.collect.android.material.MaterialFullScreenDialogFragment;\n \n+import javax.inject.Inject;\n+\n public class StorageMigrationDialog extends MaterialFullScreenDialogFragment {\n \n     private TextView statusTextView;\n \n+    @Inject\n+    StorageMigrationRepository storageMigrationRepository;\n+\n     public static StorageMigrationDialog create() {\n         return new StorageMigrationDialog();\n     }\n \n     private StorageMigrationDialog() {\n-        StorageMigrator.STATUS.observe(this, this::setStatus);\n+        Collect.getInstance().getComponent().inject(this);\n+        storageMigrationRepository.getStatus().observe(this, this::setStatus);\n     }\n \n     @Override\n", "next_change": {"commit": "5caad54c54b2ff94111e7edf5fd4c99566104dc1", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationDialog.java b/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationDialog.java\nindex d88ffbc9f5..829abca35c 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationDialog.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationDialog.java\n", "chunk": "@@ -29,7 +46,7 @@ public class StorageMigrationDialog extends MaterialFullScreenDialogFragment {\n \n     private StorageMigrationDialog() {\n         Collect.getInstance().getComponent().inject(this);\n-        storageMigrationRepository.getStatus().observe(this, this::setStatus);\n+        storageMigrationRepository.getStatus().observe(this, this::updateStatus);\n     }\n \n     @Override\n", "next_change": {"commit": "513d3cfed7784daf868d8eac1835ac41cedf4308", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationDialog.java b/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationDialog.java\nindex 829abca35c..dd78e7758f 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationDialog.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationDialog.java\n", "chunk": "@@ -7,48 +7,34 @@ import android.view.LayoutInflater;\n import android.view.View;\n import android.view.ViewGroup;\n import android.widget.Button;\n-import android.widget.ProgressBar;\n+import android.widget.LinearLayout;\n import android.widget.TextView;\n \n import org.jetbrains.annotations.NotNull;\n import org.odk.collect.android.R;\n-import org.odk.collect.android.application.Collect;\n import org.odk.collect.android.material.MaterialFullScreenDialogFragment;\n \n-import javax.inject.Inject;\n-\n import butterknife.BindView;\n import butterknife.ButterKnife;\n \n public class StorageMigrationDialog extends MaterialFullScreenDialogFragment {\n \n-    @BindView(R.id.cancel)\n+    @BindView(R.id.cancelButton)\n     Button cancelButton;\n \n-    @BindView(R.id.migrate)\n+    @BindView(R.id.migrateButton)\n     Button migrateButton;\n \n-    @BindView(R.id.message)\n+    @BindView(R.id.messageText)\n     TextView messageText;\n \n-    @BindView(R.id.status)\n-    TextView statusText;\n-\n-    @BindView(R.id.progress_bar)\n-    ProgressBar progresBar;\n-\n-    @Inject\n-    StorageMigrationRepository storageMigrationRepository;\n+    @BindView(R.id.progressBar)\n+    LinearLayout progressBar;\n \n     public static StorageMigrationDialog create() {\n         return new StorageMigrationDialog();\n     }\n \n-    private StorageMigrationDialog() {\n-        Collect.getInstance().getComponent().inject(this);\n-        storageMigrationRepository.getStatus().observe(this, this::updateStatus);\n-    }\n-\n     @Override\n     public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n         return inflater.inflate(R.layout.storage_migration_dialog, container, false);\n", "next_change": {"commit": "d2373fd5376e36350669a17d2d78760edac60da7", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationDialog.java b/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationDialog.java\nindex dd78e7758f..702fdf1f7f 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationDialog.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationDialog.java\n", "chunk": "@@ -12,27 +12,50 @@ import android.widget.TextView;\n \n import org.jetbrains.annotations.NotNull;\n import org.odk.collect.android.R;\n+import org.odk.collect.android.activities.WebViewActivity;\n+import org.odk.collect.android.fragments.dialogs.AdminPasswordDialog;\n import org.odk.collect.android.material.MaterialFullScreenDialogFragment;\n+import org.odk.collect.android.preferences.AdminKeys;\n+import org.odk.collect.android.preferences.AdminSharedPreferences;\n+import org.odk.collect.android.utilities.DialogUtils;\n \n import butterknife.BindView;\n import butterknife.ButterKnife;\n \n public class StorageMigrationDialog extends MaterialFullScreenDialogFragment {\n \n+    private final int unsentInstancesNumber;\n+\n     @BindView(R.id.cancelButton)\n     Button cancelButton;\n \n     @BindView(R.id.migrateButton)\n     Button migrateButton;\n \n-    @BindView(R.id.messageText)\n-    TextView messageText;\n+    @BindView(R.id.messageText1)\n+    TextView messageText1;\n+\n+    @BindView(R.id.messageText2)\n+    TextView messageText2;\n+\n+    @BindView(R.id.messageText3)\n+    TextView messageText3;\n+\n+    @BindView(R.id.moreDetailsButton)\n+    TextView moreDetailsButton;\n+\n+    @BindView(R.id.errorText)\n+    TextView errorText;\n \n     @BindView(R.id.progressBar)\n     LinearLayout progressBar;\n \n-    public static StorageMigrationDialog create() {\n-        return new StorageMigrationDialog();\n+    public static StorageMigrationDialog create(int unsentInstances) {\n+        return new StorageMigrationDialog(unsentInstances);\n+    }\n+\n+    private StorageMigrationDialog(int unsentInstancesNumber) {\n+        this.unsentInstancesNumber = unsentInstancesNumber;\n     }\n \n     @Override\n", "next_change": {"commit": "ff46be76e57131f524b0dbf3085856b6671235e5", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationDialog.java b/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationDialog.java\nindex 702fdf1f7f..55eae05ed0 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationDialog.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationDialog.java\n", "chunk": "@@ -50,11 +49,14 @@ public class StorageMigrationDialog extends MaterialFullScreenDialogFragment {\n     @BindView(R.id.progressBar)\n     LinearLayout progressBar;\n \n-    public static StorageMigrationDialog create(int unsentInstances) {\n-        return new StorageMigrationDialog(unsentInstances);\n+    private final AdminPasswordProvider adminPasswordProvider;\n+\n+    public static StorageMigrationDialog create(AdminPasswordProvider adminPasswordProvider, int unsentInstances) {\n+        return new StorageMigrationDialog(adminPasswordProvider, unsentInstances);\n     }\n \n-    private StorageMigrationDialog(int unsentInstancesNumber) {\n+    private StorageMigrationDialog(AdminPasswordProvider adminPasswordProvider, int unsentInstancesNumber) {\n+        this.adminPasswordProvider = adminPasswordProvider;\n         this.unsentInstancesNumber = unsentInstancesNumber;\n     }\n \n", "next_change": {"commit": "244fbb9720ccacf6b16083a84b3173ef77e40511", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationDialog.java b/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationDialog.java\nindex 55eae05ed0..de0fb843af 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationDialog.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationDialog.java\n", "chunk": "@@ -49,15 +54,24 @@ public class StorageMigrationDialog extends MaterialFullScreenDialogFragment {\n     @BindView(R.id.progressBar)\n     LinearLayout progressBar;\n \n-    private final AdminPasswordProvider adminPasswordProvider;\n+    @Inject\n+    AdminPasswordProvider adminPasswordProvider;\n+\n+    private int unsentInstancesNumber;\n \n-    public static StorageMigrationDialog create(AdminPasswordProvider adminPasswordProvider, int unsentInstances) {\n-        return new StorageMigrationDialog(adminPasswordProvider, unsentInstances);\n+    public static StorageMigrationDialog create(int unsentInstances) {\n+        StorageMigrationDialog storageMigrationDialog = new StorageMigrationDialog();\n+        Bundle bundle = new Bundle();\n+        bundle.putInt(UNSENT_INSTANCES, unsentInstances);\n+        storageMigrationDialog.setArguments(bundle);\n+\n+        return storageMigrationDialog;\n     }\n \n-    private StorageMigrationDialog(AdminPasswordProvider adminPasswordProvider, int unsentInstancesNumber) {\n-        this.adminPasswordProvider = adminPasswordProvider;\n-        this.unsentInstancesNumber = unsentInstancesNumber;\n+    @Override\n+    public void onAttach(@NotNull Context context) {\n+        super.onAttach(context);\n+        DaggerUtils.getComponent(context).inject(this);\n     }\n \n     @Override\n", "next_change": {"commit": "b6ffab9b386f928f5c0b0c64b2b3440bb3388d21", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationDialog.java b/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationDialog.java\nindex de0fb843af..a16e1d2200 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationDialog.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationDialog.java\n", "chunk": "@@ -54,24 +48,16 @@ public class StorageMigrationDialog extends MaterialFullScreenDialogFragment {\n     @BindView(R.id.progressBar)\n     LinearLayout progressBar;\n \n-    @Inject\n-    AdminPasswordProvider adminPasswordProvider;\n-\n-    private int unsentInstancesNumber;\n-\n-    public static StorageMigrationDialog create(int unsentInstances) {\n-        StorageMigrationDialog storageMigrationDialog = new StorageMigrationDialog();\n-        Bundle bundle = new Bundle();\n-        bundle.putInt(UNSENT_INSTANCES, unsentInstances);\n-        storageMigrationDialog.setArguments(bundle);\n+    private final AdminPasswordProvider adminPasswordProvider;\n+    private final int unsentInstancesNumber;\n \n-        return storageMigrationDialog;\n+    public static StorageMigrationDialog create(AdminPasswordProvider adminPasswordProvider, int unsentInstances) {\n+        return new StorageMigrationDialog(adminPasswordProvider, unsentInstances);\n     }\n \n-    @Override\n-    public void onAttach(@NotNull Context context) {\n-        super.onAttach(context);\n-        DaggerUtils.getComponent(context).inject(this);\n+    private StorageMigrationDialog(AdminPasswordProvider adminPasswordProvider, int unsentInstancesNumber) {\n+        this.adminPasswordProvider = adminPasswordProvider;\n+        this.unsentInstancesNumber = unsentInstancesNumber;\n     }\n \n     @Override\n", "next_change": {"commit": "5443cc29f39e742181db5c4820b0b758efdb42e1", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationDialog.java b/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationDialog.java\nindex a16e1d2200..43e38f0409 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationDialog.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationDialog.java\n", "chunk": "@@ -48,16 +54,24 @@ public class StorageMigrationDialog extends MaterialFullScreenDialogFragment {\n     @BindView(R.id.progressBar)\n     LinearLayout progressBar;\n \n-    private final AdminPasswordProvider adminPasswordProvider;\n-    private final int unsentInstancesNumber;\n+    @Inject\n+    AdminPasswordProvider adminPasswordProvider;\n+\n+    private int unsentInstancesNumber;\n+\n+    public static StorageMigrationDialog create(int unsentInstances) {\n+        StorageMigrationDialog storageMigrationDialog = new StorageMigrationDialog();\n+        Bundle bundle = new Bundle();\n+        bundle.putInt(UNSENT_INSTANCES, unsentInstances);\n+        storageMigrationDialog.setArguments(bundle);\n \n-    public static StorageMigrationDialog create(AdminPasswordProvider adminPasswordProvider, int unsentInstances) {\n-        return new StorageMigrationDialog(adminPasswordProvider, unsentInstances);\n+        return storageMigrationDialog;\n     }\n \n-    private StorageMigrationDialog(AdminPasswordProvider adminPasswordProvider, int unsentInstancesNumber) {\n-        this.adminPasswordProvider = adminPasswordProvider;\n-        this.unsentInstancesNumber = unsentInstancesNumber;\n+    @Override\n+    public void onAttach(@NotNull Context context) {\n+        super.onAttach(context);\n+        DaggerUtils.getComponent(context).inject(this);\n     }\n \n     @Override\n", "next_change": {"commit": "2aec2cef76323fcadf43baad6f780922420fbea9", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationDialog.java b/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationDialog.java\ndeleted file mode 100644\nindex 43e38f0409..0000000000\n--- a/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationDialog.java\n+++ /dev/null\n", "chunk": "@@ -1,197 +0,0 @@\n-package org.odk.collect.android.storage.migration;\n-\n-import android.app.Activity;\n-import android.content.Context;\n-import android.content.Intent;\n-import android.os.Bundle;\n-import android.view.LayoutInflater;\n-import android.view.View;\n-import android.view.ViewGroup;\n-import android.widget.Button;\n-import android.widget.LinearLayout;\n-import android.widget.TextView;\n-\n-import org.jetbrains.annotations.NotNull;\n-import org.odk.collect.android.R;\n-import org.odk.collect.android.activities.WebViewActivity;\n-import org.odk.collect.android.application.Collect;\n-import org.odk.collect.android.fragments.dialogs.AdminPasswordDialog;\n-import org.odk.collect.android.injection.DaggerUtils;\n-import org.odk.collect.android.material.MaterialFullScreenDialogFragment;\n-import org.odk.collect.android.utilities.AdminPasswordProvider;\n-import org.odk.collect.android.utilities.DialogUtils;\n-\n-import javax.inject.Inject;\n-\n-import butterknife.BindView;\n-import butterknife.ButterKnife;\n-\n-public class StorageMigrationDialog extends MaterialFullScreenDialogFragment {\n-\n-    private static final String UNSENT_INSTANCES = \"unsentInstances\";\n-\n-    @BindView(R.id.cancelButton)\n-    Button cancelButton;\n-\n-    @BindView(R.id.migrateButton)\n-    Button migrateButton;\n-\n-    @BindView(R.id.messageText1)\n-    TextView messageText1;\n-\n-    @BindView(R.id.messageText2)\n-    TextView messageText2;\n-\n-    @BindView(R.id.messageText3)\n-    TextView messageText3;\n-\n-    @BindView(R.id.moreDetailsButton)\n-    Button moreDetailsButton;\n-\n-    @BindView(R.id.errorText)\n-    TextView errorText;\n-\n-    @BindView(R.id.progressBar)\n-    LinearLayout progressBar;\n-\n-    @Inject\n-    AdminPasswordProvider adminPasswordProvider;\n-\n-    private int unsentInstancesNumber;\n-\n-    public static StorageMigrationDialog create(int unsentInstances) {\n-        StorageMigrationDialog storageMigrationDialog = new StorageMigrationDialog();\n-        Bundle bundle = new Bundle();\n-        bundle.putInt(UNSENT_INSTANCES, unsentInstances);\n-        storageMigrationDialog.setArguments(bundle);\n-\n-        return storageMigrationDialog;\n-    }\n-\n-    @Override\n-    public void onAttach(@NotNull Context context) {\n-        super.onAttach(context);\n-        DaggerUtils.getComponent(context).inject(this);\n-    }\n-\n-    @Override\n-    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n-        return inflater.inflate(R.layout.storage_migration_dialog, container, false);\n-    }\n-\n-    @Override\n-    public void onViewCreated(@NotNull View view, Bundle savedInstanceState) {\n-        super.onViewCreated(view, savedInstanceState);\n-        ButterKnife.bind(this, view);\n-\n-        if (getArguments() != null) {\n-            unsentInstancesNumber = getArguments().getInt(UNSENT_INSTANCES);\n-        }\n-\n-        setUpToolbar();\n-        setUpMessageAboutUnsetSubmissions();\n-\n-        moreDetailsButton.setOnClickListener(v -> {\n-            if (Collect.allowClick(getClass().getName())) {\n-                showMoreDetails();\n-            }\n-        });\n-        cancelButton.setOnClickListener(v -> dismiss());\n-        migrateButton.setOnClickListener(v -> {\n-            if (Collect.allowClick(getClass().getName())) {\n-                if (adminPasswordProvider.isAdminPasswordSet()) {\n-                    DialogUtils.showIfNotShowing(AdminPasswordDialog.create(adminPasswordProvider, AdminPasswordDialog.Action.STORAGE_MIGRATION), getActivity().getSupportFragmentManager());\n-                } else {\n-                    startStorageMigration();\n-                }\n-            }\n-        });\n-    }\n-\n-    @Override\n-    protected void onCloseClicked() {\n-    }\n-\n-    @Override\n-    protected void onBackPressed() {\n-    }\n-\n-    private void setUpToolbar() {\n-        getToolbar().setTitle(R.string.storage_migration_dialog_title);\n-        getToolbar().setNavigationIcon(null);\n-    }\n-\n-    private void setUpMessageAboutUnsetSubmissions() {\n-        if (unsentInstancesNumber > 0) {\n-            messageText2.setVisibility(View.VISIBLE);\n-            messageText2.setText(getString(R.string.storage_migration_dialog_message2, unsentInstancesNumber));\n-        }\n-    }\n-\n-    private void showMoreDetails() {\n-        Intent intent = new Intent(getContext(), WebViewActivity.class);\n-        intent.putExtra(\"url\", \"https://forum.opendatakit.org/t/24159\");\n-        startActivity(intent);\n-    }\n-\n-    private void disableDialog() {\n-        messageText1.setAlpha(.5f);\n-        messageText2.setVisibility(View.GONE);\n-        messageText3.setVisibility(View.GONE);\n-\n-        moreDetailsButton.setVisibility(View.GONE);\n-\n-        cancelButton.setEnabled(false);\n-        cancelButton.setAlpha(.5f);\n-\n-        migrateButton.setEnabled(false);\n-        migrateButton.setAlpha(.5f);\n-\n-        errorText.setVisibility(View.GONE);\n-    }\n-\n-    private void enableDialog() {\n-        messageText1.setAlpha(1);\n-        messageText2.setVisibility(unsentInstancesNumber > 0 ? View.VISIBLE : View.GONE);\n-        messageText3.setVisibility(View.VISIBLE);\n-\n-        moreDetailsButton.setVisibility(View.VISIBLE);\n-\n-        cancelButton.setEnabled(true);\n-        cancelButton.setAlpha(1);\n-\n-        migrateButton.setEnabled(true);\n-        migrateButton.setAlpha(1);\n-    }\n-\n-    private void showProgressBar() {\n-        progressBar.setVisibility(View.VISIBLE);\n-    }\n-\n-    private void hideProgressBar() {\n-        progressBar.setVisibility(View.GONE);\n-    }\n-\n-    private void startStorageMigrationService() {\n-        Activity activity = getActivity();\n-        if (activity != null) {\n-            Intent intent = new Intent(activity, StorageMigrationService.class);\n-            activity.startService(intent);\n-        }\n-    }\n-\n-    public void handleMigrationError(StorageMigrationResult result) {\n-        hideProgressBar();\n-        enableDialog();\n-\n-        errorText.setVisibility(View.VISIBLE);\n-        errorText.setText(result.getErrorResultMessage(result, getContext()));\n-        migrateButton.setText(R.string.try_again);\n-    }\n-\n-    public void startStorageMigration() {\n-        disableDialog();\n-        showProgressBar();\n-        startStorageMigrationService();\n-    }\n-}\n", "next_change": {"commit": "dcf15ba45d62149a114c925a59f653928bf3c4da", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationDialog.java b/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationDialog.java\nnew file mode 100644\nindex 0000000000..8152960b00\n--- /dev/null\n+++ b/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationDialog.java\n", "chunk": "@@ -0,0 +1,79 @@\n+package org.odk.collect.android.storage.migration;\n+\n+import android.content.Context;\n+import android.os.Bundle;\n+import android.view.LayoutInflater;\n+import android.view.View;\n+import android.view.ViewGroup;\n+import android.widget.Button;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.appcompat.widget.Toolbar;\n+import androidx.fragment.app.DialogFragment;\n+import androidx.lifecycle.ViewModelProviders;\n+\n+import org.jetbrains.annotations.NotNull;\n+import org.odk.collect.android.R;\n+\n+import timber.log.Timber;\n+\n+public class StorageMigrationDialog extends DialogFragment {\n+\n+    public interface OnMigrationCompleteListener {\n+        void onMigrationComplete(StorageMigrationResult result);\n+    }\n+\n+    private OnMigrationCompleteListener listener;\n+\n+    private StorageMigrationViewModel viewModel;\n+\n+    public static StorageMigrationDialog create() {\n+        return new StorageMigrationDialog();\n+    }\n+\n+    @Override\n+    public void onAttach(@NonNull Context context) {\n+        super.onAttach(context);\n+        viewModel = ViewModelProviders.of(this).get(StorageMigrationViewModel.class);\n+        try {\n+            listener = (OnMigrationCompleteListener) getActivity();\n+        } catch (ClassCastException e) {\n+            Timber.w(e);\n+        }\n+    }\n+\n+    @Override\n+    public void onCreate(@Nullable Bundle savedInstanceState) {\n+        super.onCreate(savedInstanceState);\n+        setCancelable(false);\n+        setStyle(DialogFragment.STYLE_NORMAL, R.style.Theme_Collect_Dialog_FullScreen);\n+    }\n+\n+    @Override\n+    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n+        return inflater.inflate(R.layout.storage_migration_dialog, container, false);\n+    }\n+\n+    @Override\n+    public void onViewCreated(@NotNull View view, Bundle savedInstanceState) {\n+        super.onViewCreated(view, savedInstanceState);\n+        ((Toolbar) view.findViewById(R.id.toolbar)).setTitle(R.string.migration_dialog_title);\n+\n+        Button cancel = view.findViewById(R.id.cancel);\n+        Button migrate = view.findViewById(R.id.migrate);\n+\n+        cancel.setOnClickListener(view1 -> dismiss());\n+        migrate.setOnClickListener(v -> {\n+            cancel.setEnabled(false);\n+            cancel.setAlpha(.4f);\n+            migrate.setEnabled(false);\n+            migrate.setAlpha(.4f);\n+\n+            view.findViewById(R.id.progress_bar).setVisibility(View.VISIBLE);\n+\n+            viewModel.performMigration().observe(this, result -> listener.onMigrationComplete(result));\n+        });\n+    }\n+\n+}\n", "next_change": {"commit": "17e476115da9892b9be2d92ab1b473b99e578f4c", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationDialog.java b/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationDialog.java\nindex 8152960b00..7ebef10eea 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationDialog.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationDialog.java\n", "chunk": "@@ -72,8 +54,14 @@ public class StorageMigrationDialog extends DialogFragment {\n \n             view.findViewById(R.id.progress_bar).setVisibility(View.VISIBLE);\n \n-            viewModel.performMigration().observe(this, result -> listener.onMigrationComplete(result));\n+            Activity activity = getActivity();\n+            if (activity != null) {\n+                activity.startService(new Intent(activity, StorageMigrationService.class));\n+            }\n         });\n     }\n \n+    public void setStatus(String status) {\n+        statusTextView.setText(status);\n+    }\n }\n", "next_change": {"commit": "5adaaedb6b4a95936f15c3ace52e17091cd3eac7", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationDialog.java b/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationDialog.java\nindex 7ebef10eea..f41a1f6bb4 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationDialog.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationDialog.java\n", "chunk": "@@ -61,6 +54,19 @@ public class StorageMigrationDialog extends DialogFragment {\n         });\n     }\n \n+    @Override\n+    protected void onCloseClicked() {\n+    }\n+\n+    @Override\n+    protected void onBackPressed() {\n+    }\n+\n+    @Override\n+    protected boolean shouldShowSoftKeyboard() {\n+        return false;\n+    }\n+\n     public void setStatus(String status) {\n         statusTextView.setText(status);\n     }\n", "next_change": {"commit": "4644f0f351ac9b4fbbc9eb84f1047fd9d3acf6cf", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationDialog.java b/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationDialog.java\nindex f41a1f6bb4..d88ffbc9f5 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationDialog.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationDialog.java\n", "chunk": "@@ -67,7 +78,7 @@ public class StorageMigrationDialog extends MaterialFullScreenDialogFragment {\n         return false;\n     }\n \n-    public void setStatus(String status) {\n-        statusTextView.setText(status);\n+    public void setStatus(StorageMigrationStatus status) {\n+        statusTextView.setText(StorageMigrationStatus.getStatusMessage(status, getContext()));\n     }\n }\n", "next_change": {"commit": "05515702f117197e15a603b4bdbe777e6bfae960", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationDialog.java b/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationDialog.java\nindex d88ffbc9f5..0b0d010054 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationDialog.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationDialog.java\n", "chunk": "@@ -73,11 +73,6 @@ public class StorageMigrationDialog extends MaterialFullScreenDialogFragment {\n     protected void onBackPressed() {\n     }\n \n-    @Override\n-    protected boolean shouldShowSoftKeyboard() {\n-        return false;\n-    }\n-\n     public void setStatus(StorageMigrationStatus status) {\n         statusTextView.setText(StorageMigrationStatus.getStatusMessage(status, getContext()));\n     }\n", "next_change": {"commit": "f49f991bf12f226e5d58d31538e969952628b0b2", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationDialog.java b/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationDialog.java\nindex 0b0d010054..962b675cbb 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationDialog.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationDialog.java\n", "chunk": "@@ -73,7 +77,32 @@ public class StorageMigrationDialog extends MaterialFullScreenDialogFragment {\n     protected void onBackPressed() {\n     }\n \n-    public void setStatus(StorageMigrationStatus status) {\n-        statusTextView.setText(StorageMigrationStatus.getStatusMessage(status, getContext()));\n+    private void updateStatus(StorageMigrationStatus status) {\n+        statusText.setText(StorageMigrationStatus.getStatusMessage(status, getContext()));\n+    }\n+\n+    private void updateToolbar() {\n+        getToolbar().setTitle(R.string.migration_dialog_title);\n+        getToolbar().setNavigationIcon(null);\n+    }\n+\n+    private void disableDialog() {\n+        cancelButton.setEnabled(false);\n+        cancelButton.setAlpha(.4f);\n+        migrateButton.setEnabled(false);\n+        migrateButton.setAlpha(.4f);\n+        messageText.setAlpha(.4f);\n+    }\n+\n+    private void showProgressBar() {\n+        progressBar.setVisibility(View.VISIBLE);\n+    }\n+\n+    private void startStorageMigrationService() {\n+        Activity activity = getActivity();\n+        if (activity != null) {\n+            Intent intent = new Intent(activity, StorageMigrationService.class);\n+            activity.startService(intent);\n+        }\n     }\n }\n", "next_change": {"commit": "1a4fd23153181b9a7446d0f92d08144a47c7d560", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationDialog.java b/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationDialog.java\nindex 962b675cbb..20848e8b5a 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationDialog.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationDialog.java\n", "chunk": "@@ -105,4 +149,13 @@ public class StorageMigrationDialog extends MaterialFullScreenDialogFragment {\n             activity.startService(intent);\n         }\n     }\n+\n+    public void handleMigrationError(StorageMigrationResult result) {\n+        hideProgressBar();\n+        enableDialog();\n+\n+        errorText.setVisibility(View.VISIBLE);\n+        errorText.setText(result.getErrorResultMessage(result, getContext()));\n+        migrateButton.setText(R.string.try_again);\n+    }\n }\n", "next_change": {"commit": "c839b7631d4da164b0f408945390078c6ef98366", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationDialog.java b/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationDialog.java\nindex 20848e8b5a..702fdf1f7f 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationDialog.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationDialog.java\n", "chunk": "@@ -158,4 +164,15 @@ public class StorageMigrationDialog extends MaterialFullScreenDialogFragment {\n         errorText.setText(result.getErrorResultMessage(result, getContext()));\n         migrateButton.setText(R.string.try_again);\n     }\n+\n+    public void startStorageMigration() {\n+        disableDialog();\n+        showProgressBar();\n+        startStorageMigrationService();\n+    }\n+\n+    private boolean isAdminPasswordRequired() {\n+        String adminPassword = (String) AdminSharedPreferences.getInstance().get(AdminKeys.KEY_ADMIN_PW);\n+        return adminPassword != null && !adminPassword.isEmpty();\n+    }\n }\n", "next_change": {"commit": "46e4f2c9aa775036bb40fa0a2a143d1515172dff", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationDialog.java b/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationDialog.java\nindex 702fdf1f7f..5ae8db999a 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationDialog.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationDialog.java\n", "chunk": "@@ -170,9 +170,4 @@ public class StorageMigrationDialog extends MaterialFullScreenDialogFragment {\n         showProgressBar();\n         startStorageMigrationService();\n     }\n-\n-    private boolean isAdminPasswordRequired() {\n-        String adminPassword = (String) AdminSharedPreferences.getInstance().get(AdminKeys.KEY_ADMIN_PW);\n-        return adminPassword != null && !adminPassword.isEmpty();\n-    }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODExNDYzNg==", "url": "https://github.com/getodk/collect/pull/3623#discussion_r378114636", "body": "I think we need to break this object up a bit so we're not having to fake/mock methods on the object under test. It looks like you've had to do this because of a bunch of static methods though. Maybe using a similar strategy to the `BackgroundLocationHelper` that @lognaturel created? This worked at the time as it allowed her to wrap a bunch of static methods/singletons that the new object she was build needed without having to go and refactor/unwrap all of them. This interface could also include `isFormUploaderRunning()` and `isFormDownloaderRunning()`.", "bodyText": "I think we need to break this object up a bit so we're not having to fake/mock methods on the object under test. It looks like you've had to do this because of a bunch of static methods though. Maybe using a similar strategy to the BackgroundLocationHelper that @lognaturel created? This worked at the time as it allowed her to wrap a bunch of static methods/singletons that the new object she was build needed without having to go and refactor/unwrap all of them. This interface could also include isFormUploaderRunning() and isFormDownloaderRunning().", "bodyHTML": "<p dir=\"auto\">I think we need to break this object up a bit so we're not having to fake/mock methods on the object under test. It looks like you've had to do this because of a bunch of static methods though. Maybe using a similar strategy to the <code>BackgroundLocationHelper</code> that <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/lognaturel/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/lognaturel\">@lognaturel</a> created? This worked at the time as it allowed her to wrap a bunch of static methods/singletons that the new object she was build needed without having to go and refactor/unwrap all of them. This interface could also include <code>isFormUploaderRunning()</code> and <code>isFormDownloaderRunning()</code>.</p>", "author": "seadowg", "createdAt": "2020-02-12T08:59:27Z", "path": "collect_app/src/test/java/org/odk/collect/android/storage/migration/StorageMigratorTest.java", "diffHunk": "@@ -0,0 +1,163 @@\n+package org.odk.collect.android.storage.migration;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.odk.collect.android.storage.StoragePathProvider;\n+import org.odk.collect.android.storage.StorageStateProvider;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.mockito.Mockito.doNothing;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.spy;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+\n+public class StorageMigratorTest {\n+\n+    private StorageMigrator storageMigrator;\n+    private StorageEraser storageEraser;\n+    private final StoragePathProvider storagePathProvider = spy(StoragePathProvider.class);\n+    private final StorageStateProvider storageStateProvider = mock(StorageStateProvider.class);\n+\n+    @Before\n+    public void setup() {\n+        storageEraser = spy(new StorageEraser(storagePathProvider));\n+        storageMigrator = spy(new StorageMigrator(storagePathProvider, storageStateProvider, storageEraser));\n+\n+        doNothing().when(storageMigrator).reopenDatabases();", "originalCommit": "0e141054594c4c079b5151ea14f67f7ca3684803", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTI0ODU2Mw==", "url": "https://github.com/getodk/collect/pull/3623#discussion_r379248563", "bodyText": "Agreed that sounds like a promising direction.", "author": "lognaturel", "createdAt": "2020-02-14T04:43:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODExNDYzNg=="}], "type": "inlineReview", "revised_code": {"commit": "e8c792063a9b0c171775e5e8e5f6ec1d6e0c392e", "changed_code": [{"header": "diff --git a/collect_app/src/test/java/org/odk/collect/android/storage/migration/StorageMigratorTest.java b/collect_app/src/test/java/org/odk/collect/android/storage/migration/StorageMigratorTest.java\nindex c9d2c2537c..1fdabe4131 100644\n--- a/collect_app/src/test/java/org/odk/collect/android/storage/migration/StorageMigratorTest.java\n+++ b/collect_app/src/test/java/org/odk/collect/android/storage/migration/StorageMigratorTest.java\n", "chunk": "@@ -17,14 +17,14 @@ import static org.mockito.Mockito.verify;\n public class StorageMigratorTest {\n \n     private StorageMigrator storageMigrator;\n-    private StorageEraser storageEraser;\n-    private final StoragePathProvider storagePathProvider = spy(StoragePathProvider.class);\n+    private final StoragePathProvider storagePathProvider = mock(StoragePathProvider.class);\n     private final StorageStateProvider storageStateProvider = mock(StorageStateProvider.class);\n+    private final StorageEraser storageEraser = mock(StorageEraser.class);\n+    private final StorageMigrationRepository storageMigrationRepository = mock(StorageMigrationRepository.class);\n \n     @Before\n     public void setup() {\n-        storageEraser = spy(new StorageEraser(storagePathProvider));\n-        storageMigrator = spy(new StorageMigrator(storagePathProvider, storageStateProvider, storageEraser));\n+        storageMigrator = spy(new StorageMigrator(storagePathProvider, storageStateProvider, storageEraser, storageMigrationRepository));\n \n         doNothing().when(storageMigrator).reopenDatabases();\n         doNothing().when(storageEraser).clearOdkDirOnScopedStorage();\n", "next_change": {"commit": "b41f872629c599595fe83d27e27fc5ee3bdc1ca2", "changed_code": [{"header": "diff --git a/collect_app/src/test/java/org/odk/collect/android/storage/migration/StorageMigratorTest.java b/collect_app/src/test/java/org/odk/collect/android/storage/migration/StorageMigratorTest.java\nindex 1fdabe413..a63452c03 100644\n--- a/collect_app/src/test/java/org/odk/collect/android/storage/migration/StorageMigratorTest.java\n+++ b/collect_app/src/test/java/org/odk/collect/android/storage/migration/StorageMigratorTest.java\n", "chunk": "@@ -21,14 +24,16 @@ public class StorageMigratorTest {\n     private final StorageStateProvider storageStateProvider = mock(StorageStateProvider.class);\n     private final StorageEraser storageEraser = mock(StorageEraser.class);\n     private final StorageMigrationRepository storageMigrationRepository = mock(StorageMigrationRepository.class);\n+    private final GeneralSharedPreferences generalSharedPreferences = mock(GeneralSharedPreferences.class);\n \n     @Before\n     public void setup() {\n-        storageMigrator = spy(new StorageMigrator(storagePathProvider, storageStateProvider, storageEraser, storageMigrationRepository));\n+        storageMigrator = spy(new StorageMigrator(storagePathProvider, storageStateProvider, storageEraser, storageMigrationRepository, generalSharedPreferences));\n \n         doNothing().when(storageMigrator).reopenDatabases();\n         doNothing().when(storageEraser).clearOdkDirOnScopedStorage();\n         doNothing().when(storageEraser).deleteOdkDirFromUnscopedStorage();\n+        doReturn(\"/sdcard/odk/layers/countries/countries-raster.mbtiles\").when(generalSharedPreferences).get(KEY_REFERENCE_LAYER);\n     }\n \n     @Test\n", "next_change": {"commit": "de4a297917d1b8b7ac2eae0018a8567d74fd4486", "changed_code": [{"header": "diff --git a/collect_app/src/test/java/org/odk/collect/android/storage/migration/StorageMigratorTest.java b/collect_app/src/test/java/org/odk/collect/android/storage/migration/StorageMigratorTest.java\nindex a63452c031..6020434922 100644\n--- a/collect_app/src/test/java/org/odk/collect/android/storage/migration/StorageMigratorTest.java\n+++ b/collect_app/src/test/java/org/odk/collect/android/storage/migration/StorageMigratorTest.java\n", "chunk": "@@ -14,26 +13,21 @@ import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.spy;\n import static org.mockito.Mockito.times;\n import static org.mockito.Mockito.verify;\n-import static org.odk.collect.android.preferences.GeneralKeys.KEY_REFERENCE_LAYER;\n \n-@SuppressWarnings(\"PMD.DoNotHardCodeSDCard\")\n public class StorageMigratorTest {\n \n     private StorageMigrator storageMigrator;\n     private final StoragePathProvider storagePathProvider = mock(StoragePathProvider.class);\n     private final StorageStateProvider storageStateProvider = mock(StorageStateProvider.class);\n     private final StorageEraser storageEraser = mock(StorageEraser.class);\n-    private final StorageMigrationRepository storageMigrationRepository = mock(StorageMigrationRepository.class);\n-    private final GeneralSharedPreferences generalSharedPreferences = mock(GeneralSharedPreferences.class);\n \n     @Before\n     public void setup() {\n-        storageMigrator = spy(new StorageMigrator(storagePathProvider, storageStateProvider, storageEraser, storageMigrationRepository, generalSharedPreferences));\n+        storageMigrator = spy(new StorageMigrator(storagePathProvider, storageStateProvider, storageEraser));\n \n         doNothing().when(storageMigrator).reopenDatabases();\n         doNothing().when(storageEraser).clearOdkDirOnScopedStorage();\n         doNothing().when(storageEraser).deleteOdkDirFromUnscopedStorage();\n-        doReturn(\"/sdcard/odk/layers/countries/countries-raster.mbtiles\").when(generalSharedPreferences).get(KEY_REFERENCE_LAYER);\n     }\n \n     @Test\n", "next_change": {"commit": "dcc8858054effc1658c7fd6c93336794057921eb", "changed_code": [{"header": "diff --git a/collect_app/src/test/java/org/odk/collect/android/storage/migration/StorageMigratorTest.java b/collect_app/src/test/java/org/odk/collect/android/storage/migration/StorageMigratorTest.java\nindex 6020434922..f45901c1b8 100644\n--- a/collect_app/src/test/java/org/odk/collect/android/storage/migration/StorageMigratorTest.java\n+++ b/collect_app/src/test/java/org/odk/collect/android/storage/migration/StorageMigratorTest.java\n", "chunk": "@@ -20,10 +20,11 @@ public class StorageMigratorTest {\n     private final StoragePathProvider storagePathProvider = mock(StoragePathProvider.class);\n     private final StorageStateProvider storageStateProvider = mock(StorageStateProvider.class);\n     private final StorageEraser storageEraser = mock(StorageEraser.class);\n+    private final StorageMigrationRepository storageMigrationRepository = mock(StorageMigrationRepository.class);\n \n     @Before\n     public void setup() {\n-        storageMigrator = spy(new StorageMigrator(storagePathProvider, storageStateProvider, storageEraser));\n+        storageMigrator = spy(new StorageMigrator(storagePathProvider, storageStateProvider, storageEraser, storageMigrationRepository));\n \n         doNothing().when(storageMigrator).reopenDatabases();\n         doNothing().when(storageEraser).clearOdkDirOnScopedStorage();\n", "next_change": {"commit": "5443cc29f39e742181db5c4820b0b758efdb42e1", "changed_code": [{"header": "diff --git a/collect_app/src/test/java/org/odk/collect/android/storage/migration/StorageMigratorTest.java b/collect_app/src/test/java/org/odk/collect/android/storage/migration/StorageMigratorTest.java\nindex f45901c1b8..a63452c031 100644\n--- a/collect_app/src/test/java/org/odk/collect/android/storage/migration/StorageMigratorTest.java\n+++ b/collect_app/src/test/java/org/odk/collect/android/storage/migration/StorageMigratorTest.java\n", "chunk": "@@ -21,14 +24,16 @@ public class StorageMigratorTest {\n     private final StorageStateProvider storageStateProvider = mock(StorageStateProvider.class);\n     private final StorageEraser storageEraser = mock(StorageEraser.class);\n     private final StorageMigrationRepository storageMigrationRepository = mock(StorageMigrationRepository.class);\n+    private final GeneralSharedPreferences generalSharedPreferences = mock(GeneralSharedPreferences.class);\n \n     @Before\n     public void setup() {\n-        storageMigrator = spy(new StorageMigrator(storagePathProvider, storageStateProvider, storageEraser, storageMigrationRepository));\n+        storageMigrator = spy(new StorageMigrator(storagePathProvider, storageStateProvider, storageEraser, storageMigrationRepository, generalSharedPreferences));\n \n         doNothing().when(storageMigrator).reopenDatabases();\n         doNothing().when(storageEraser).clearOdkDirOnScopedStorage();\n         doNothing().when(storageEraser).deleteOdkDirFromUnscopedStorage();\n+        doReturn(\"/sdcard/odk/layers/countries/countries-raster.mbtiles\").when(generalSharedPreferences).get(KEY_REFERENCE_LAYER);\n     }\n \n     @Test\n", "next_change": {"commit": "2aec2cef76323fcadf43baad6f780922420fbea9", "changed_code": [{"header": "diff --git a/collect_app/src/test/java/org/odk/collect/android/storage/migration/StorageMigratorTest.java b/collect_app/src/test/java/org/odk/collect/android/storage/migration/StorageMigratorTest.java\ndeleted file mode 100644\nindex a63452c031..0000000000\n--- a/collect_app/src/test/java/org/odk/collect/android/storage/migration/StorageMigratorTest.java\n+++ /dev/null\n", "chunk": "@@ -1,181 +0,0 @@\n-package org.odk.collect.android.storage.migration;\n-\n-import org.junit.Before;\n-import org.junit.Test;\n-import org.odk.collect.android.preferences.GeneralSharedPreferences;\n-import org.odk.collect.android.storage.StoragePathProvider;\n-import org.odk.collect.android.storage.StorageStateProvider;\n-\n-import static org.hamcrest.MatcherAssert.assertThat;\n-import static org.hamcrest.Matchers.is;\n-import static org.mockito.Mockito.doNothing;\n-import static org.mockito.Mockito.doReturn;\n-import static org.mockito.Mockito.mock;\n-import static org.mockito.Mockito.spy;\n-import static org.mockito.Mockito.times;\n-import static org.mockito.Mockito.verify;\n-import static org.odk.collect.android.preferences.GeneralKeys.KEY_REFERENCE_LAYER;\n-\n-@SuppressWarnings(\"PMD.DoNotHardCodeSDCard\")\n-public class StorageMigratorTest {\n-\n-    private StorageMigrator storageMigrator;\n-    private final StoragePathProvider storagePathProvider = mock(StoragePathProvider.class);\n-    private final StorageStateProvider storageStateProvider = mock(StorageStateProvider.class);\n-    private final StorageEraser storageEraser = mock(StorageEraser.class);\n-    private final StorageMigrationRepository storageMigrationRepository = mock(StorageMigrationRepository.class);\n-    private final GeneralSharedPreferences generalSharedPreferences = mock(GeneralSharedPreferences.class);\n-\n-    @Before\n-    public void setup() {\n-        storageMigrator = spy(new StorageMigrator(storagePathProvider, storageStateProvider, storageEraser, storageMigrationRepository, generalSharedPreferences));\n-\n-        doNothing().when(storageMigrator).reopenDatabases();\n-        doNothing().when(storageEraser).clearOdkDirOnScopedStorage();\n-        doNothing().when(storageEraser).deleteOdkDirFromUnscopedStorage();\n-        doReturn(\"/sdcard/odk/layers/countries/countries-raster.mbtiles\").when(generalSharedPreferences).get(KEY_REFERENCE_LAYER);\n-    }\n-\n-    @Test\n-    public void when_formUploaderIsRunning_should_appropriateResultBeReturned() {\n-        doReturn(true).when(storageMigrator).isFormUploaderRunning();\n-\n-        assertThat(storageMigrator.migrate(), is(StorageMigrationResult.FORM_UPLOADER_IS_RUNNING));\n-    }\n-\n-    @Test\n-    public void when_formDownloaderIsRunning_should_appropriateResultBeReturned() {\n-        doReturn(false).when(storageMigrator).isFormUploaderRunning();\n-        doReturn(true).when(storageMigrator).isFormDownloaderRunning();\n-\n-        assertThat(storageMigrator.migrate(), is(StorageMigrationResult.FORM_DOWNLOADER_IS_RUNNING));\n-    }\n-\n-    @Test\n-    public void when_thereIsNoEnoughSpaceToPerformMigration_should_appropriateResultBeReturned() {\n-        doReturn(false).when(storageMigrator).isFormUploaderRunning();\n-        doReturn(false).when(storageMigrator).isFormDownloaderRunning();\n-        doReturn(false).when(storageStateProvider).isEnoughSpaceToPerformMigration(storagePathProvider);\n-\n-        assertThat(storageMigrator.migrate(), is(StorageMigrationResult.NOT_ENOUGH_SPACE));\n-    }\n-\n-    @Test\n-    public void when_anyExceptionIsThrownDuringMovingFiles_should_appropriateResultBeReturned() {\n-        doReturn(false).when(storageMigrator).isFormUploaderRunning();\n-        doReturn(false).when(storageMigrator).isFormDownloaderRunning();\n-        doReturn(true).when(storageStateProvider).isEnoughSpaceToPerformMigration(storagePathProvider);\n-        doReturn(false).when(storageMigrator).moveAppDataToScopedStorage();\n-\n-        assertThat(storageMigrator.migrate(), is(StorageMigrationResult.MOVING_FILES_FAILED));\n-    }\n-\n-    @Test\n-    public void when_anyExceptionIsThrownDuringMigratingDatabases_should_appropriateResultBeReturned() {\n-        doReturn(false).when(storageMigrator).isFormUploaderRunning();\n-        doReturn(false).when(storageMigrator).isFormDownloaderRunning();\n-        doReturn(true).when(storageStateProvider).isEnoughSpaceToPerformMigration(storagePathProvider);\n-        doReturn(true).when(storageMigrator).moveAppDataToScopedStorage();\n-        doReturn(false).when(storageMigrator).migrateDatabasePaths();\n-\n-        assertThat(storageMigrator.migrate(), is(StorageMigrationResult.MOVING_FILES_FAILED));\n-    }\n-\n-    @Test\n-    public void when_migrationFinishedWithSuccess_should_appropriateResultBeReturned() {\n-        doReturn(false).when(storageMigrator).isFormUploaderRunning();\n-        doReturn(false).when(storageMigrator).isFormDownloaderRunning();\n-        doReturn(true).when(storageStateProvider).isEnoughSpaceToPerformMigration(storagePathProvider);\n-        doReturn(true).when(storageMigrator).moveAppDataToScopedStorage();\n-        doReturn(true).when(storageMigrator).migrateDatabasePaths();\n-\n-        assertThat(storageMigrator.migrate(), is(StorageMigrationResult.SUCCESS));\n-    }\n-\n-    @Test\n-    public void when_migrationStarts_should_scopedStorageBeCleared() {\n-        doReturn(true).when(storageMigrator).isFormUploaderRunning();\n-\n-        storageMigrator.performStorageMigration();\n-\n-        verify(storageEraser).clearOdkDirOnScopedStorage();\n-    }\n-\n-    @Test\n-    public void when_movingFilesIsFinished_should_scopedStorageBeEnabled() {\n-        doReturn(false).when(storageMigrator).isFormUploaderRunning();\n-        doReturn(false).when(storageMigrator).isFormDownloaderRunning();\n-        doReturn(true).when(storageStateProvider).isEnoughSpaceToPerformMigration(storagePathProvider);\n-        doReturn(true).when(storageMigrator).moveAppDataToScopedStorage();\n-        doReturn(false).when(storageMigrator).migrateDatabasePaths();\n-\n-        storageMigrator.performStorageMigration();\n-\n-        verify(storageStateProvider).enableUsingScopedStorage();\n-    }\n-\n-    @Test\n-    public void when_movingFilesIsFinished_should_databasesBeReopened() {\n-        doReturn(false).when(storageMigrator).isFormUploaderRunning();\n-        doReturn(false).when(storageMigrator).isFormDownloaderRunning();\n-        doReturn(true).when(storageStateProvider).isEnoughSpaceToPerformMigration(storagePathProvider);\n-        doReturn(true).when(storageMigrator).moveAppDataToScopedStorage();\n-        doReturn(true).when(storageMigrator).migrateDatabasePaths();\n-\n-        storageMigrator.performStorageMigration();\n-\n-        verify(storageMigrator).reopenDatabases();\n-    }\n-\n-    @Test\n-    public void when_movingFilesFailed_should_databasesBeReopenedAgain() {\n-        doReturn(false).when(storageMigrator).isFormUploaderRunning();\n-        doReturn(false).when(storageMigrator).isFormDownloaderRunning();\n-        doReturn(true).when(storageStateProvider).isEnoughSpaceToPerformMigration(storagePathProvider);\n-        doReturn(true).when(storageMigrator).moveAppDataToScopedStorage();\n-        doReturn(false).when(storageMigrator).migrateDatabasePaths();\n-\n-        storageMigrator.performStorageMigration();\n-\n-        verify(storageMigrator, times(2)).reopenDatabases();\n-    }\n-\n-    @Test\n-    public void when_movingFilesFailed_should_scopedStorageBeDisabled() {\n-        doReturn(false).when(storageMigrator).isFormUploaderRunning();\n-        doReturn(false).when(storageMigrator).isFormDownloaderRunning();\n-        doReturn(true).when(storageStateProvider).isEnoughSpaceToPerformMigration(storagePathProvider);\n-        doReturn(true).when(storageMigrator).moveAppDataToScopedStorage();\n-        doReturn(false).when(storageMigrator).migrateDatabasePaths();\n-\n-        storageMigrator.performStorageMigration();\n-\n-        verify(storageStateProvider).disableUsingScopedStorage();\n-    }\n-\n-    @Test\n-    public void when_migrationFinished_should_offlineMapLayerBeUpdated() {\n-        doReturn(false).when(storageMigrator).isFormUploaderRunning();\n-        doReturn(false).when(storageMigrator).isFormDownloaderRunning();\n-        doReturn(true).when(storageStateProvider).isEnoughSpaceToPerformMigration(storagePathProvider);\n-        doReturn(true).when(storageMigrator).moveAppDataToScopedStorage();\n-        doReturn(true).when(storageMigrator).migrateDatabasePaths();\n-\n-        storageMigrator.performStorageMigration();\n-\n-        verify(generalSharedPreferences).save(KEY_REFERENCE_LAYER, \"/layers/countries/countries-raster.mbtiles\");\n-    }\n-\n-    @Test\n-    public void when_migrationFinished_should_oldOdkDirBeRemoved() {\n-        doReturn(false).when(storageMigrator).isFormUploaderRunning();\n-        doReturn(false).when(storageMigrator).isFormDownloaderRunning();\n-        doReturn(true).when(storageStateProvider).isEnoughSpaceToPerformMigration(storagePathProvider);\n-        doReturn(true).when(storageMigrator).moveAppDataToScopedStorage();\n-        doReturn(true).when(storageMigrator).migrateDatabasePaths();\n-\n-        storageMigrator.performStorageMigration();\n-\n-        verify(storageEraser).deleteOdkDirFromUnscopedStorage();\n-    }\n-}\n", "next_change": {"commit": "9f2f6aed514bd0f2ee5d029e42630be344e3de3a", "changed_code": [{"header": "diff --git a/collect_app/src/test/java/org/odk/collect/android/storage/migration/StorageMigratorTest.java b/collect_app/src/test/java/org/odk/collect/android/storage/migration/StorageMigratorTest.java\nnew file mode 100644\nindex 0000000000..1e2a6b5e4f\n--- /dev/null\n+++ b/collect_app/src/test/java/org/odk/collect/android/storage/migration/StorageMigratorTest.java\n", "chunk": "@@ -0,0 +1,161 @@\n+package org.odk.collect.android.storage.migration;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.odk.collect.android.storage.StoragePathProvider;\n+import org.odk.collect.android.storage.StorageStateProvider;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.mockito.Mockito.doNothing;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.spy;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+\n+public class StorageMigratorTest {\n+\n+    private StorageMigrator storageMigrator;\n+    private final StorageEraser storageEraser = spy(StorageEraser.class);\n+    private final StoragePathProvider storagePathProvider = spy(StoragePathProvider.class);\n+    private final StorageStateProvider storageStateProvider = mock(StorageStateProvider.class);\n+\n+    @Before\n+    public void setup() {\n+        storageMigrator = spy(new StorageMigrator(storagePathProvider, storageStateProvider, storageEraser));\n+        doNothing().when(storageMigrator).reopenDatabases();\n+        doNothing().when(storageEraser).clearOdkDirOnScopedStorage(storagePathProvider);\n+        doNothing().when(storageEraser).deleteOdkDirFromUnscopedStorage(storagePathProvider);\n+    }\n+\n+    @Test\n+    public void when_formUploaderIsRunning_should_appropriateResultBeReturned() {\n+        doReturn(true).when(storageMigrator).isFormUploaderRunning();\n+\n+        assertThat(storageMigrator.performStorageMigration(), is(StorageMigrationResult.FORM_UPLOADER_IS_RUNNING));\n+    }\n+\n+    @Test\n+    public void when_formDownloaderIsRunning_should_appropriateResultBeReturned() {\n+        doReturn(false).when(storageMigrator).isFormUploaderRunning();\n+        doReturn(true).when(storageMigrator).isFormDownloaderRunning();\n+\n+        assertThat(storageMigrator.performStorageMigration(), is(StorageMigrationResult.FORM_DOWNLOADER_IS_RUNNING));\n+    }\n+\n+    @Test\n+    public void when_thereIsNoEnoughSpaceToPerformMigration_should_appropriateResultBeReturned() {\n+        doReturn(false).when(storageMigrator).isFormUploaderRunning();\n+        doReturn(false).when(storageMigrator).isFormDownloaderRunning();\n+        doReturn(false).when(storageStateProvider).isEnoughSpaceToPerformMigartion(storagePathProvider);\n+\n+        assertThat(storageMigrator.performStorageMigration(), is(StorageMigrationResult.NOT_ENOUGH_SPACE));\n+    }\n+\n+    @Test\n+    public void when_anyExceptionIsThrownDuringMovingFiles_should_appropriateResultBeReturned() {\n+        doReturn(false).when(storageMigrator).isFormUploaderRunning();\n+        doReturn(false).when(storageMigrator).isFormDownloaderRunning();\n+        doReturn(true).when(storageStateProvider).isEnoughSpaceToPerformMigartion(storagePathProvider);\n+        doReturn(StorageMigrationResult.MOVING_FILES_FAILED).when(storageMigrator).moveAppDataToScopedStorage();\n+\n+        assertThat(storageMigrator.performStorageMigration(), is(StorageMigrationResult.MOVING_FILES_FAILED));\n+    }\n+\n+    @Test\n+    public void when_anyExceptionIsThrownDuringMigratingDatabases_should_appropriateResultBeReturned() {\n+        doReturn(false).when(storageMigrator).isFormUploaderRunning();\n+        doReturn(false).when(storageMigrator).isFormDownloaderRunning();\n+        doReturn(true).when(storageStateProvider).isEnoughSpaceToPerformMigartion(storagePathProvider);\n+        doReturn(StorageMigrationResult.MOVING_FILES_SUCCEEDED).when(storageMigrator).moveAppDataToScopedStorage();\n+        doReturn(StorageMigrationResult.MIGRATING_DATABASE_PATHS_FAILED).when(storageMigrator).migrateDatabasePaths();\n+\n+        assertThat(storageMigrator.performStorageMigration(), is(StorageMigrationResult.MIGRATING_DATABASE_PATHS_FAILED));\n+    }\n+\n+    @Test\n+    public void when_migrationFinishedWithSuccess_should_appropriateResultBeReturned() {\n+        doReturn(false).when(storageMigrator).isFormUploaderRunning();\n+        doReturn(false).when(storageMigrator).isFormDownloaderRunning();\n+        doReturn(true).when(storageStateProvider).isEnoughSpaceToPerformMigartion(storagePathProvider);\n+        doReturn(StorageMigrationResult.MOVING_FILES_SUCCEEDED).when(storageMigrator).moveAppDataToScopedStorage();\n+        doReturn(StorageMigrationResult.MIGRATING_DATABASE_PATHS_SUCCEEDED).when(storageMigrator).migrateDatabasePaths();\n+\n+        assertThat(storageMigrator.performStorageMigration(), is(StorageMigrationResult.SUCCESS));\n+    }\n+\n+    @Test\n+    public void when_migrationStarts_should_scopedStorageBeCleared() {\n+        doReturn(true).when(storageMigrator).isFormUploaderRunning();\n+\n+        storageMigrator.performStorageMigration();\n+\n+        verify(storageEraser).clearOdkDirOnScopedStorage(storagePathProvider);\n+    }\n+\n+    @Test\n+    public void when_movingFilesIsFinished_should_scopedStorageBeEnabled() {\n+        doReturn(false).when(storageMigrator).isFormUploaderRunning();\n+        doReturn(false).when(storageMigrator).isFormDownloaderRunning();\n+        doReturn(true).when(storageStateProvider).isEnoughSpaceToPerformMigartion(storagePathProvider);\n+        doReturn(StorageMigrationResult.MOVING_FILES_SUCCEEDED).when(storageMigrator).moveAppDataToScopedStorage();\n+        doReturn(StorageMigrationResult.MIGRATING_DATABASE_PATHS_FAILED).when(storageMigrator).migrateDatabasePaths();\n+\n+        storageMigrator.performStorageMigration();\n+\n+        verify(storageStateProvider).enableUsingScopedStorage();\n+    }\n+\n+    @Test\n+    public void when_movingFilesIsFinished_should_databasesBeReopened() {\n+        doReturn(false).when(storageMigrator).isFormUploaderRunning();\n+        doReturn(false).when(storageMigrator).isFormDownloaderRunning();\n+        doReturn(true).when(storageStateProvider).isEnoughSpaceToPerformMigartion(storagePathProvider);\n+        doReturn(StorageMigrationResult.MOVING_FILES_SUCCEEDED).when(storageMigrator).moveAppDataToScopedStorage();\n+        doReturn(StorageMigrationResult.MIGRATING_DATABASE_PATHS_SUCCEEDED).when(storageMigrator).migrateDatabasePaths();\n+\n+        storageMigrator.performStorageMigration();\n+\n+        verify(storageMigrator).reopenDatabases();\n+    }\n+\n+    @Test\n+    public void when_movingFilesFailed_should_databasesBeReopenedAgain() {\n+        doReturn(false).when(storageMigrator).isFormUploaderRunning();\n+        doReturn(false).when(storageMigrator).isFormDownloaderRunning();\n+        doReturn(true).when(storageStateProvider).isEnoughSpaceToPerformMigartion(storagePathProvider);\n+        doReturn(StorageMigrationResult.MOVING_FILES_SUCCEEDED).when(storageMigrator).moveAppDataToScopedStorage();\n+        doReturn(StorageMigrationResult.MIGRATING_DATABASE_PATHS_FAILED).when(storageMigrator).migrateDatabasePaths();\n+\n+        storageMigrator.performStorageMigration();\n+\n+        verify(storageMigrator, times(2)).reopenDatabases();\n+    }\n+\n+    @Test\n+    public void when_movingFilesFailed_should_scopedStorageBeDisabled() {\n+        doReturn(false).when(storageMigrator).isFormUploaderRunning();\n+        doReturn(false).when(storageMigrator).isFormDownloaderRunning();\n+        doReturn(true).when(storageStateProvider).isEnoughSpaceToPerformMigartion(storagePathProvider);\n+        doReturn(StorageMigrationResult.MOVING_FILES_SUCCEEDED).when(storageMigrator).moveAppDataToScopedStorage();\n+        doReturn(StorageMigrationResult.MIGRATING_DATABASE_PATHS_FAILED).when(storageMigrator).migrateDatabasePaths();\n+\n+        storageMigrator.performStorageMigration();\n+\n+        verify(storageStateProvider).disableUsingScopedStorage();\n+    }\n+\n+    @Test\n+    public void when_migrationFinished_should_oldOdkDirBeRemoved() {\n+        doReturn(false).when(storageMigrator).isFormUploaderRunning();\n+        doReturn(false).when(storageMigrator).isFormDownloaderRunning();\n+        doReturn(true).when(storageStateProvider).isEnoughSpaceToPerformMigartion(storagePathProvider);\n+        doReturn(StorageMigrationResult.MOVING_FILES_SUCCEEDED).when(storageMigrator).moveAppDataToScopedStorage();\n+        doReturn(StorageMigrationResult.MIGRATING_DATABASE_PATHS_SUCCEEDED).when(storageMigrator).migrateDatabasePaths();\n+\n+        storageMigrator.performStorageMigration();\n+\n+        verify(storageEraser).deleteOdkDirFromUnscopedStorage(storagePathProvider);\n+    }\n+}\n", "next_change": {"commit": "002ac82208ad3684a556dfdfcbb9f850cfcbfad6", "changed_code": [{"header": "diff --git a/collect_app/src/test/java/org/odk/collect/android/storage/migration/StorageMigratorTest.java b/collect_app/src/test/java/org/odk/collect/android/storage/migration/StorageMigratorTest.java\nindex 1e2a6b5e4f..c9d2c2537c 100644\n--- a/collect_app/src/test/java/org/odk/collect/android/storage/migration/StorageMigratorTest.java\n+++ b/collect_app/src/test/java/org/odk/collect/android/storage/migration/StorageMigratorTest.java\n", "chunk": "@@ -156,6 +158,6 @@ public class StorageMigratorTest {\n \n         storageMigrator.performStorageMigration();\n \n-        verify(storageEraser).deleteOdkDirFromUnscopedStorage(storagePathProvider);\n+        verify(storageEraser).deleteOdkDirFromUnscopedStorage();\n     }\n }\n", "next_change": {"commit": "37c513832f5d6d4afdc3f2d25b44d342a128014b", "changed_code": [{"header": "diff --git a/collect_app/src/test/java/org/odk/collect/android/storage/migration/StorageMigratorTest.java b/collect_app/src/test/java/org/odk/collect/android/storage/migration/StorageMigratorTest.java\nindex c9d2c2537c..1fdabe4131 100644\n--- a/collect_app/src/test/java/org/odk/collect/android/storage/migration/StorageMigratorTest.java\n+++ b/collect_app/src/test/java/org/odk/collect/android/storage/migration/StorageMigratorTest.java\n", "chunk": "@@ -152,9 +152,9 @@ public class StorageMigratorTest {\n     public void when_migrationFinished_should_oldOdkDirBeRemoved() {\n         doReturn(false).when(storageMigrator).isFormUploaderRunning();\n         doReturn(false).when(storageMigrator).isFormDownloaderRunning();\n-        doReturn(true).when(storageStateProvider).isEnoughSpaceToPerformMigartion(storagePathProvider);\n-        doReturn(StorageMigrationResult.MOVING_FILES_SUCCEEDED).when(storageMigrator).moveAppDataToScopedStorage();\n-        doReturn(StorageMigrationResult.MIGRATING_DATABASE_PATHS_SUCCEEDED).when(storageMigrator).migrateDatabasePaths();\n+        doReturn(true).when(storageStateProvider).isEnoughSpaceToPerformMigration(storagePathProvider);\n+        doReturn(true).when(storageMigrator).moveAppDataToScopedStorage();\n+        doReturn(true).when(storageMigrator).migrateDatabasePaths();\n \n         storageMigrator.performStorageMigration();\n \n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODExNTMwOA==", "url": "https://github.com/getodk/collect/pull/3623#discussion_r378115308", "body": "Can this just be a mock rather than a spy? Personally I find spies make tests harder to read and understand as the boundaries of the test (i.e. what is faked/stubbed) become unclear.", "bodyText": "Can this just be a mock rather than a spy? Personally I find spies make tests harder to read and understand as the boundaries of the test (i.e. what is faked/stubbed) become unclear.", "bodyHTML": "<p dir=\"auto\">Can this just be a mock rather than a spy? Personally I find spies make tests harder to read and understand as the boundaries of the test (i.e. what is faked/stubbed) become unclear.</p>", "author": "seadowg", "createdAt": "2020-02-12T09:00:46Z", "path": "collect_app/src/test/java/org/odk/collect/android/storage/migration/StorageMigratorTest.java", "diffHunk": "@@ -0,0 +1,163 @@\n+package org.odk.collect.android.storage.migration;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.odk.collect.android.storage.StoragePathProvider;\n+import org.odk.collect.android.storage.StorageStateProvider;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.mockito.Mockito.doNothing;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.spy;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+\n+public class StorageMigratorTest {\n+\n+    private StorageMigrator storageMigrator;\n+    private StorageEraser storageEraser;\n+    private final StoragePathProvider storagePathProvider = spy(StoragePathProvider.class);", "originalCommit": "0e141054594c4c079b5151ea14f67f7ca3684803", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODI1Mjg2OQ==", "url": "https://github.com/getodk/collect/pull/3623#discussion_r378252869", "bodyText": "Fixed.", "author": "grzesiek2010", "createdAt": "2020-02-12T13:35:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODExNTMwOA=="}], "type": "inlineReview", "revised_code": {"commit": "e8c792063a9b0c171775e5e8e5f6ec1d6e0c392e", "changed_code": [{"header": "diff --git a/collect_app/src/test/java/org/odk/collect/android/storage/migration/StorageMigratorTest.java b/collect_app/src/test/java/org/odk/collect/android/storage/migration/StorageMigratorTest.java\nindex c9d2c2537c..1fdabe4131 100644\n--- a/collect_app/src/test/java/org/odk/collect/android/storage/migration/StorageMigratorTest.java\n+++ b/collect_app/src/test/java/org/odk/collect/android/storage/migration/StorageMigratorTest.java\n", "chunk": "@@ -17,14 +17,14 @@ import static org.mockito.Mockito.verify;\n public class StorageMigratorTest {\n \n     private StorageMigrator storageMigrator;\n-    private StorageEraser storageEraser;\n-    private final StoragePathProvider storagePathProvider = spy(StoragePathProvider.class);\n+    private final StoragePathProvider storagePathProvider = mock(StoragePathProvider.class);\n     private final StorageStateProvider storageStateProvider = mock(StorageStateProvider.class);\n+    private final StorageEraser storageEraser = mock(StorageEraser.class);\n+    private final StorageMigrationRepository storageMigrationRepository = mock(StorageMigrationRepository.class);\n \n     @Before\n     public void setup() {\n-        storageEraser = spy(new StorageEraser(storagePathProvider));\n-        storageMigrator = spy(new StorageMigrator(storagePathProvider, storageStateProvider, storageEraser));\n+        storageMigrator = spy(new StorageMigrator(storagePathProvider, storageStateProvider, storageEraser, storageMigrationRepository));\n \n         doNothing().when(storageMigrator).reopenDatabases();\n         doNothing().when(storageEraser).clearOdkDirOnScopedStorage();\n", "next_change": {"commit": "b41f872629c599595fe83d27e27fc5ee3bdc1ca2", "changed_code": [{"header": "diff --git a/collect_app/src/test/java/org/odk/collect/android/storage/migration/StorageMigratorTest.java b/collect_app/src/test/java/org/odk/collect/android/storage/migration/StorageMigratorTest.java\nindex 1fdabe413..a63452c03 100644\n--- a/collect_app/src/test/java/org/odk/collect/android/storage/migration/StorageMigratorTest.java\n+++ b/collect_app/src/test/java/org/odk/collect/android/storage/migration/StorageMigratorTest.java\n", "chunk": "@@ -21,14 +24,16 @@ public class StorageMigratorTest {\n     private final StorageStateProvider storageStateProvider = mock(StorageStateProvider.class);\n     private final StorageEraser storageEraser = mock(StorageEraser.class);\n     private final StorageMigrationRepository storageMigrationRepository = mock(StorageMigrationRepository.class);\n+    private final GeneralSharedPreferences generalSharedPreferences = mock(GeneralSharedPreferences.class);\n \n     @Before\n     public void setup() {\n-        storageMigrator = spy(new StorageMigrator(storagePathProvider, storageStateProvider, storageEraser, storageMigrationRepository));\n+        storageMigrator = spy(new StorageMigrator(storagePathProvider, storageStateProvider, storageEraser, storageMigrationRepository, generalSharedPreferences));\n \n         doNothing().when(storageMigrator).reopenDatabases();\n         doNothing().when(storageEraser).clearOdkDirOnScopedStorage();\n         doNothing().when(storageEraser).deleteOdkDirFromUnscopedStorage();\n+        doReturn(\"/sdcard/odk/layers/countries/countries-raster.mbtiles\").when(generalSharedPreferences).get(KEY_REFERENCE_LAYER);\n     }\n \n     @Test\n", "next_change": {"commit": "de4a297917d1b8b7ac2eae0018a8567d74fd4486", "changed_code": [{"header": "diff --git a/collect_app/src/test/java/org/odk/collect/android/storage/migration/StorageMigratorTest.java b/collect_app/src/test/java/org/odk/collect/android/storage/migration/StorageMigratorTest.java\nindex a63452c031..6020434922 100644\n--- a/collect_app/src/test/java/org/odk/collect/android/storage/migration/StorageMigratorTest.java\n+++ b/collect_app/src/test/java/org/odk/collect/android/storage/migration/StorageMigratorTest.java\n", "chunk": "@@ -14,26 +13,21 @@ import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.spy;\n import static org.mockito.Mockito.times;\n import static org.mockito.Mockito.verify;\n-import static org.odk.collect.android.preferences.GeneralKeys.KEY_REFERENCE_LAYER;\n \n-@SuppressWarnings(\"PMD.DoNotHardCodeSDCard\")\n public class StorageMigratorTest {\n \n     private StorageMigrator storageMigrator;\n     private final StoragePathProvider storagePathProvider = mock(StoragePathProvider.class);\n     private final StorageStateProvider storageStateProvider = mock(StorageStateProvider.class);\n     private final StorageEraser storageEraser = mock(StorageEraser.class);\n-    private final StorageMigrationRepository storageMigrationRepository = mock(StorageMigrationRepository.class);\n-    private final GeneralSharedPreferences generalSharedPreferences = mock(GeneralSharedPreferences.class);\n \n     @Before\n     public void setup() {\n-        storageMigrator = spy(new StorageMigrator(storagePathProvider, storageStateProvider, storageEraser, storageMigrationRepository, generalSharedPreferences));\n+        storageMigrator = spy(new StorageMigrator(storagePathProvider, storageStateProvider, storageEraser));\n \n         doNothing().when(storageMigrator).reopenDatabases();\n         doNothing().when(storageEraser).clearOdkDirOnScopedStorage();\n         doNothing().when(storageEraser).deleteOdkDirFromUnscopedStorage();\n-        doReturn(\"/sdcard/odk/layers/countries/countries-raster.mbtiles\").when(generalSharedPreferences).get(KEY_REFERENCE_LAYER);\n     }\n \n     @Test\n", "next_change": {"commit": "dcc8858054effc1658c7fd6c93336794057921eb", "changed_code": [{"header": "diff --git a/collect_app/src/test/java/org/odk/collect/android/storage/migration/StorageMigratorTest.java b/collect_app/src/test/java/org/odk/collect/android/storage/migration/StorageMigratorTest.java\nindex 6020434922..f45901c1b8 100644\n--- a/collect_app/src/test/java/org/odk/collect/android/storage/migration/StorageMigratorTest.java\n+++ b/collect_app/src/test/java/org/odk/collect/android/storage/migration/StorageMigratorTest.java\n", "chunk": "@@ -20,10 +20,11 @@ public class StorageMigratorTest {\n     private final StoragePathProvider storagePathProvider = mock(StoragePathProvider.class);\n     private final StorageStateProvider storageStateProvider = mock(StorageStateProvider.class);\n     private final StorageEraser storageEraser = mock(StorageEraser.class);\n+    private final StorageMigrationRepository storageMigrationRepository = mock(StorageMigrationRepository.class);\n \n     @Before\n     public void setup() {\n-        storageMigrator = spy(new StorageMigrator(storagePathProvider, storageStateProvider, storageEraser));\n+        storageMigrator = spy(new StorageMigrator(storagePathProvider, storageStateProvider, storageEraser, storageMigrationRepository));\n \n         doNothing().when(storageMigrator).reopenDatabases();\n         doNothing().when(storageEraser).clearOdkDirOnScopedStorage();\n", "next_change": {"commit": "5443cc29f39e742181db5c4820b0b758efdb42e1", "changed_code": [{"header": "diff --git a/collect_app/src/test/java/org/odk/collect/android/storage/migration/StorageMigratorTest.java b/collect_app/src/test/java/org/odk/collect/android/storage/migration/StorageMigratorTest.java\nindex f45901c1b8..a63452c031 100644\n--- a/collect_app/src/test/java/org/odk/collect/android/storage/migration/StorageMigratorTest.java\n+++ b/collect_app/src/test/java/org/odk/collect/android/storage/migration/StorageMigratorTest.java\n", "chunk": "@@ -21,14 +24,16 @@ public class StorageMigratorTest {\n     private final StorageStateProvider storageStateProvider = mock(StorageStateProvider.class);\n     private final StorageEraser storageEraser = mock(StorageEraser.class);\n     private final StorageMigrationRepository storageMigrationRepository = mock(StorageMigrationRepository.class);\n+    private final GeneralSharedPreferences generalSharedPreferences = mock(GeneralSharedPreferences.class);\n \n     @Before\n     public void setup() {\n-        storageMigrator = spy(new StorageMigrator(storagePathProvider, storageStateProvider, storageEraser, storageMigrationRepository));\n+        storageMigrator = spy(new StorageMigrator(storagePathProvider, storageStateProvider, storageEraser, storageMigrationRepository, generalSharedPreferences));\n \n         doNothing().when(storageMigrator).reopenDatabases();\n         doNothing().when(storageEraser).clearOdkDirOnScopedStorage();\n         doNothing().when(storageEraser).deleteOdkDirFromUnscopedStorage();\n+        doReturn(\"/sdcard/odk/layers/countries/countries-raster.mbtiles\").when(generalSharedPreferences).get(KEY_REFERENCE_LAYER);\n     }\n \n     @Test\n", "next_change": {"commit": "2aec2cef76323fcadf43baad6f780922420fbea9", "changed_code": [{"header": "diff --git a/collect_app/src/test/java/org/odk/collect/android/storage/migration/StorageMigratorTest.java b/collect_app/src/test/java/org/odk/collect/android/storage/migration/StorageMigratorTest.java\ndeleted file mode 100644\nindex a63452c031..0000000000\n--- a/collect_app/src/test/java/org/odk/collect/android/storage/migration/StorageMigratorTest.java\n+++ /dev/null\n", "chunk": "@@ -1,181 +0,0 @@\n-package org.odk.collect.android.storage.migration;\n-\n-import org.junit.Before;\n-import org.junit.Test;\n-import org.odk.collect.android.preferences.GeneralSharedPreferences;\n-import org.odk.collect.android.storage.StoragePathProvider;\n-import org.odk.collect.android.storage.StorageStateProvider;\n-\n-import static org.hamcrest.MatcherAssert.assertThat;\n-import static org.hamcrest.Matchers.is;\n-import static org.mockito.Mockito.doNothing;\n-import static org.mockito.Mockito.doReturn;\n-import static org.mockito.Mockito.mock;\n-import static org.mockito.Mockito.spy;\n-import static org.mockito.Mockito.times;\n-import static org.mockito.Mockito.verify;\n-import static org.odk.collect.android.preferences.GeneralKeys.KEY_REFERENCE_LAYER;\n-\n-@SuppressWarnings(\"PMD.DoNotHardCodeSDCard\")\n-public class StorageMigratorTest {\n-\n-    private StorageMigrator storageMigrator;\n-    private final StoragePathProvider storagePathProvider = mock(StoragePathProvider.class);\n-    private final StorageStateProvider storageStateProvider = mock(StorageStateProvider.class);\n-    private final StorageEraser storageEraser = mock(StorageEraser.class);\n-    private final StorageMigrationRepository storageMigrationRepository = mock(StorageMigrationRepository.class);\n-    private final GeneralSharedPreferences generalSharedPreferences = mock(GeneralSharedPreferences.class);\n-\n-    @Before\n-    public void setup() {\n-        storageMigrator = spy(new StorageMigrator(storagePathProvider, storageStateProvider, storageEraser, storageMigrationRepository, generalSharedPreferences));\n-\n-        doNothing().when(storageMigrator).reopenDatabases();\n-        doNothing().when(storageEraser).clearOdkDirOnScopedStorage();\n-        doNothing().when(storageEraser).deleteOdkDirFromUnscopedStorage();\n-        doReturn(\"/sdcard/odk/layers/countries/countries-raster.mbtiles\").when(generalSharedPreferences).get(KEY_REFERENCE_LAYER);\n-    }\n-\n-    @Test\n-    public void when_formUploaderIsRunning_should_appropriateResultBeReturned() {\n-        doReturn(true).when(storageMigrator).isFormUploaderRunning();\n-\n-        assertThat(storageMigrator.migrate(), is(StorageMigrationResult.FORM_UPLOADER_IS_RUNNING));\n-    }\n-\n-    @Test\n-    public void when_formDownloaderIsRunning_should_appropriateResultBeReturned() {\n-        doReturn(false).when(storageMigrator).isFormUploaderRunning();\n-        doReturn(true).when(storageMigrator).isFormDownloaderRunning();\n-\n-        assertThat(storageMigrator.migrate(), is(StorageMigrationResult.FORM_DOWNLOADER_IS_RUNNING));\n-    }\n-\n-    @Test\n-    public void when_thereIsNoEnoughSpaceToPerformMigration_should_appropriateResultBeReturned() {\n-        doReturn(false).when(storageMigrator).isFormUploaderRunning();\n-        doReturn(false).when(storageMigrator).isFormDownloaderRunning();\n-        doReturn(false).when(storageStateProvider).isEnoughSpaceToPerformMigration(storagePathProvider);\n-\n-        assertThat(storageMigrator.migrate(), is(StorageMigrationResult.NOT_ENOUGH_SPACE));\n-    }\n-\n-    @Test\n-    public void when_anyExceptionIsThrownDuringMovingFiles_should_appropriateResultBeReturned() {\n-        doReturn(false).when(storageMigrator).isFormUploaderRunning();\n-        doReturn(false).when(storageMigrator).isFormDownloaderRunning();\n-        doReturn(true).when(storageStateProvider).isEnoughSpaceToPerformMigration(storagePathProvider);\n-        doReturn(false).when(storageMigrator).moveAppDataToScopedStorage();\n-\n-        assertThat(storageMigrator.migrate(), is(StorageMigrationResult.MOVING_FILES_FAILED));\n-    }\n-\n-    @Test\n-    public void when_anyExceptionIsThrownDuringMigratingDatabases_should_appropriateResultBeReturned() {\n-        doReturn(false).when(storageMigrator).isFormUploaderRunning();\n-        doReturn(false).when(storageMigrator).isFormDownloaderRunning();\n-        doReturn(true).when(storageStateProvider).isEnoughSpaceToPerformMigration(storagePathProvider);\n-        doReturn(true).when(storageMigrator).moveAppDataToScopedStorage();\n-        doReturn(false).when(storageMigrator).migrateDatabasePaths();\n-\n-        assertThat(storageMigrator.migrate(), is(StorageMigrationResult.MOVING_FILES_FAILED));\n-    }\n-\n-    @Test\n-    public void when_migrationFinishedWithSuccess_should_appropriateResultBeReturned() {\n-        doReturn(false).when(storageMigrator).isFormUploaderRunning();\n-        doReturn(false).when(storageMigrator).isFormDownloaderRunning();\n-        doReturn(true).when(storageStateProvider).isEnoughSpaceToPerformMigration(storagePathProvider);\n-        doReturn(true).when(storageMigrator).moveAppDataToScopedStorage();\n-        doReturn(true).when(storageMigrator).migrateDatabasePaths();\n-\n-        assertThat(storageMigrator.migrate(), is(StorageMigrationResult.SUCCESS));\n-    }\n-\n-    @Test\n-    public void when_migrationStarts_should_scopedStorageBeCleared() {\n-        doReturn(true).when(storageMigrator).isFormUploaderRunning();\n-\n-        storageMigrator.performStorageMigration();\n-\n-        verify(storageEraser).clearOdkDirOnScopedStorage();\n-    }\n-\n-    @Test\n-    public void when_movingFilesIsFinished_should_scopedStorageBeEnabled() {\n-        doReturn(false).when(storageMigrator).isFormUploaderRunning();\n-        doReturn(false).when(storageMigrator).isFormDownloaderRunning();\n-        doReturn(true).when(storageStateProvider).isEnoughSpaceToPerformMigration(storagePathProvider);\n-        doReturn(true).when(storageMigrator).moveAppDataToScopedStorage();\n-        doReturn(false).when(storageMigrator).migrateDatabasePaths();\n-\n-        storageMigrator.performStorageMigration();\n-\n-        verify(storageStateProvider).enableUsingScopedStorage();\n-    }\n-\n-    @Test\n-    public void when_movingFilesIsFinished_should_databasesBeReopened() {\n-        doReturn(false).when(storageMigrator).isFormUploaderRunning();\n-        doReturn(false).when(storageMigrator).isFormDownloaderRunning();\n-        doReturn(true).when(storageStateProvider).isEnoughSpaceToPerformMigration(storagePathProvider);\n-        doReturn(true).when(storageMigrator).moveAppDataToScopedStorage();\n-        doReturn(true).when(storageMigrator).migrateDatabasePaths();\n-\n-        storageMigrator.performStorageMigration();\n-\n-        verify(storageMigrator).reopenDatabases();\n-    }\n-\n-    @Test\n-    public void when_movingFilesFailed_should_databasesBeReopenedAgain() {\n-        doReturn(false).when(storageMigrator).isFormUploaderRunning();\n-        doReturn(false).when(storageMigrator).isFormDownloaderRunning();\n-        doReturn(true).when(storageStateProvider).isEnoughSpaceToPerformMigration(storagePathProvider);\n-        doReturn(true).when(storageMigrator).moveAppDataToScopedStorage();\n-        doReturn(false).when(storageMigrator).migrateDatabasePaths();\n-\n-        storageMigrator.performStorageMigration();\n-\n-        verify(storageMigrator, times(2)).reopenDatabases();\n-    }\n-\n-    @Test\n-    public void when_movingFilesFailed_should_scopedStorageBeDisabled() {\n-        doReturn(false).when(storageMigrator).isFormUploaderRunning();\n-        doReturn(false).when(storageMigrator).isFormDownloaderRunning();\n-        doReturn(true).when(storageStateProvider).isEnoughSpaceToPerformMigration(storagePathProvider);\n-        doReturn(true).when(storageMigrator).moveAppDataToScopedStorage();\n-        doReturn(false).when(storageMigrator).migrateDatabasePaths();\n-\n-        storageMigrator.performStorageMigration();\n-\n-        verify(storageStateProvider).disableUsingScopedStorage();\n-    }\n-\n-    @Test\n-    public void when_migrationFinished_should_offlineMapLayerBeUpdated() {\n-        doReturn(false).when(storageMigrator).isFormUploaderRunning();\n-        doReturn(false).when(storageMigrator).isFormDownloaderRunning();\n-        doReturn(true).when(storageStateProvider).isEnoughSpaceToPerformMigration(storagePathProvider);\n-        doReturn(true).when(storageMigrator).moveAppDataToScopedStorage();\n-        doReturn(true).when(storageMigrator).migrateDatabasePaths();\n-\n-        storageMigrator.performStorageMigration();\n-\n-        verify(generalSharedPreferences).save(KEY_REFERENCE_LAYER, \"/layers/countries/countries-raster.mbtiles\");\n-    }\n-\n-    @Test\n-    public void when_migrationFinished_should_oldOdkDirBeRemoved() {\n-        doReturn(false).when(storageMigrator).isFormUploaderRunning();\n-        doReturn(false).when(storageMigrator).isFormDownloaderRunning();\n-        doReturn(true).when(storageStateProvider).isEnoughSpaceToPerformMigration(storagePathProvider);\n-        doReturn(true).when(storageMigrator).moveAppDataToScopedStorage();\n-        doReturn(true).when(storageMigrator).migrateDatabasePaths();\n-\n-        storageMigrator.performStorageMigration();\n-\n-        verify(storageEraser).deleteOdkDirFromUnscopedStorage();\n-    }\n-}\n", "next_change": {"commit": "9f2f6aed514bd0f2ee5d029e42630be344e3de3a", "changed_code": [{"header": "diff --git a/collect_app/src/test/java/org/odk/collect/android/storage/migration/StorageMigratorTest.java b/collect_app/src/test/java/org/odk/collect/android/storage/migration/StorageMigratorTest.java\nnew file mode 100644\nindex 0000000000..1e2a6b5e4f\n--- /dev/null\n+++ b/collect_app/src/test/java/org/odk/collect/android/storage/migration/StorageMigratorTest.java\n", "chunk": "@@ -0,0 +1,161 @@\n+package org.odk.collect.android.storage.migration;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.odk.collect.android.storage.StoragePathProvider;\n+import org.odk.collect.android.storage.StorageStateProvider;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.mockito.Mockito.doNothing;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.spy;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+\n+public class StorageMigratorTest {\n+\n+    private StorageMigrator storageMigrator;\n+    private final StorageEraser storageEraser = spy(StorageEraser.class);\n+    private final StoragePathProvider storagePathProvider = spy(StoragePathProvider.class);\n+    private final StorageStateProvider storageStateProvider = mock(StorageStateProvider.class);\n+\n+    @Before\n+    public void setup() {\n+        storageMigrator = spy(new StorageMigrator(storagePathProvider, storageStateProvider, storageEraser));\n+        doNothing().when(storageMigrator).reopenDatabases();\n+        doNothing().when(storageEraser).clearOdkDirOnScopedStorage(storagePathProvider);\n+        doNothing().when(storageEraser).deleteOdkDirFromUnscopedStorage(storagePathProvider);\n+    }\n+\n+    @Test\n+    public void when_formUploaderIsRunning_should_appropriateResultBeReturned() {\n+        doReturn(true).when(storageMigrator).isFormUploaderRunning();\n+\n+        assertThat(storageMigrator.performStorageMigration(), is(StorageMigrationResult.FORM_UPLOADER_IS_RUNNING));\n+    }\n+\n+    @Test\n+    public void when_formDownloaderIsRunning_should_appropriateResultBeReturned() {\n+        doReturn(false).when(storageMigrator).isFormUploaderRunning();\n+        doReturn(true).when(storageMigrator).isFormDownloaderRunning();\n+\n+        assertThat(storageMigrator.performStorageMigration(), is(StorageMigrationResult.FORM_DOWNLOADER_IS_RUNNING));\n+    }\n+\n+    @Test\n+    public void when_thereIsNoEnoughSpaceToPerformMigration_should_appropriateResultBeReturned() {\n+        doReturn(false).when(storageMigrator).isFormUploaderRunning();\n+        doReturn(false).when(storageMigrator).isFormDownloaderRunning();\n+        doReturn(false).when(storageStateProvider).isEnoughSpaceToPerformMigartion(storagePathProvider);\n+\n+        assertThat(storageMigrator.performStorageMigration(), is(StorageMigrationResult.NOT_ENOUGH_SPACE));\n+    }\n+\n+    @Test\n+    public void when_anyExceptionIsThrownDuringMovingFiles_should_appropriateResultBeReturned() {\n+        doReturn(false).when(storageMigrator).isFormUploaderRunning();\n+        doReturn(false).when(storageMigrator).isFormDownloaderRunning();\n+        doReturn(true).when(storageStateProvider).isEnoughSpaceToPerformMigartion(storagePathProvider);\n+        doReturn(StorageMigrationResult.MOVING_FILES_FAILED).when(storageMigrator).moveAppDataToScopedStorage();\n+\n+        assertThat(storageMigrator.performStorageMigration(), is(StorageMigrationResult.MOVING_FILES_FAILED));\n+    }\n+\n+    @Test\n+    public void when_anyExceptionIsThrownDuringMigratingDatabases_should_appropriateResultBeReturned() {\n+        doReturn(false).when(storageMigrator).isFormUploaderRunning();\n+        doReturn(false).when(storageMigrator).isFormDownloaderRunning();\n+        doReturn(true).when(storageStateProvider).isEnoughSpaceToPerformMigartion(storagePathProvider);\n+        doReturn(StorageMigrationResult.MOVING_FILES_SUCCEEDED).when(storageMigrator).moveAppDataToScopedStorage();\n+        doReturn(StorageMigrationResult.MIGRATING_DATABASE_PATHS_FAILED).when(storageMigrator).migrateDatabasePaths();\n+\n+        assertThat(storageMigrator.performStorageMigration(), is(StorageMigrationResult.MIGRATING_DATABASE_PATHS_FAILED));\n+    }\n+\n+    @Test\n+    public void when_migrationFinishedWithSuccess_should_appropriateResultBeReturned() {\n+        doReturn(false).when(storageMigrator).isFormUploaderRunning();\n+        doReturn(false).when(storageMigrator).isFormDownloaderRunning();\n+        doReturn(true).when(storageStateProvider).isEnoughSpaceToPerformMigartion(storagePathProvider);\n+        doReturn(StorageMigrationResult.MOVING_FILES_SUCCEEDED).when(storageMigrator).moveAppDataToScopedStorage();\n+        doReturn(StorageMigrationResult.MIGRATING_DATABASE_PATHS_SUCCEEDED).when(storageMigrator).migrateDatabasePaths();\n+\n+        assertThat(storageMigrator.performStorageMigration(), is(StorageMigrationResult.SUCCESS));\n+    }\n+\n+    @Test\n+    public void when_migrationStarts_should_scopedStorageBeCleared() {\n+        doReturn(true).when(storageMigrator).isFormUploaderRunning();\n+\n+        storageMigrator.performStorageMigration();\n+\n+        verify(storageEraser).clearOdkDirOnScopedStorage(storagePathProvider);\n+    }\n+\n+    @Test\n+    public void when_movingFilesIsFinished_should_scopedStorageBeEnabled() {\n+        doReturn(false).when(storageMigrator).isFormUploaderRunning();\n+        doReturn(false).when(storageMigrator).isFormDownloaderRunning();\n+        doReturn(true).when(storageStateProvider).isEnoughSpaceToPerformMigartion(storagePathProvider);\n+        doReturn(StorageMigrationResult.MOVING_FILES_SUCCEEDED).when(storageMigrator).moveAppDataToScopedStorage();\n+        doReturn(StorageMigrationResult.MIGRATING_DATABASE_PATHS_FAILED).when(storageMigrator).migrateDatabasePaths();\n+\n+        storageMigrator.performStorageMigration();\n+\n+        verify(storageStateProvider).enableUsingScopedStorage();\n+    }\n+\n+    @Test\n+    public void when_movingFilesIsFinished_should_databasesBeReopened() {\n+        doReturn(false).when(storageMigrator).isFormUploaderRunning();\n+        doReturn(false).when(storageMigrator).isFormDownloaderRunning();\n+        doReturn(true).when(storageStateProvider).isEnoughSpaceToPerformMigartion(storagePathProvider);\n+        doReturn(StorageMigrationResult.MOVING_FILES_SUCCEEDED).when(storageMigrator).moveAppDataToScopedStorage();\n+        doReturn(StorageMigrationResult.MIGRATING_DATABASE_PATHS_SUCCEEDED).when(storageMigrator).migrateDatabasePaths();\n+\n+        storageMigrator.performStorageMigration();\n+\n+        verify(storageMigrator).reopenDatabases();\n+    }\n+\n+    @Test\n+    public void when_movingFilesFailed_should_databasesBeReopenedAgain() {\n+        doReturn(false).when(storageMigrator).isFormUploaderRunning();\n+        doReturn(false).when(storageMigrator).isFormDownloaderRunning();\n+        doReturn(true).when(storageStateProvider).isEnoughSpaceToPerformMigartion(storagePathProvider);\n+        doReturn(StorageMigrationResult.MOVING_FILES_SUCCEEDED).when(storageMigrator).moveAppDataToScopedStorage();\n+        doReturn(StorageMigrationResult.MIGRATING_DATABASE_PATHS_FAILED).when(storageMigrator).migrateDatabasePaths();\n+\n+        storageMigrator.performStorageMigration();\n+\n+        verify(storageMigrator, times(2)).reopenDatabases();\n+    }\n+\n+    @Test\n+    public void when_movingFilesFailed_should_scopedStorageBeDisabled() {\n+        doReturn(false).when(storageMigrator).isFormUploaderRunning();\n+        doReturn(false).when(storageMigrator).isFormDownloaderRunning();\n+        doReturn(true).when(storageStateProvider).isEnoughSpaceToPerformMigartion(storagePathProvider);\n+        doReturn(StorageMigrationResult.MOVING_FILES_SUCCEEDED).when(storageMigrator).moveAppDataToScopedStorage();\n+        doReturn(StorageMigrationResult.MIGRATING_DATABASE_PATHS_FAILED).when(storageMigrator).migrateDatabasePaths();\n+\n+        storageMigrator.performStorageMigration();\n+\n+        verify(storageStateProvider).disableUsingScopedStorage();\n+    }\n+\n+    @Test\n+    public void when_migrationFinished_should_oldOdkDirBeRemoved() {\n+        doReturn(false).when(storageMigrator).isFormUploaderRunning();\n+        doReturn(false).when(storageMigrator).isFormDownloaderRunning();\n+        doReturn(true).when(storageStateProvider).isEnoughSpaceToPerformMigartion(storagePathProvider);\n+        doReturn(StorageMigrationResult.MOVING_FILES_SUCCEEDED).when(storageMigrator).moveAppDataToScopedStorage();\n+        doReturn(StorageMigrationResult.MIGRATING_DATABASE_PATHS_SUCCEEDED).when(storageMigrator).migrateDatabasePaths();\n+\n+        storageMigrator.performStorageMigration();\n+\n+        verify(storageEraser).deleteOdkDirFromUnscopedStorage(storagePathProvider);\n+    }\n+}\n", "next_change": {"commit": "002ac82208ad3684a556dfdfcbb9f850cfcbfad6", "changed_code": [{"header": "diff --git a/collect_app/src/test/java/org/odk/collect/android/storage/migration/StorageMigratorTest.java b/collect_app/src/test/java/org/odk/collect/android/storage/migration/StorageMigratorTest.java\nindex 1e2a6b5e4f..c9d2c2537c 100644\n--- a/collect_app/src/test/java/org/odk/collect/android/storage/migration/StorageMigratorTest.java\n+++ b/collect_app/src/test/java/org/odk/collect/android/storage/migration/StorageMigratorTest.java\n", "chunk": "@@ -156,6 +158,6 @@ public class StorageMigratorTest {\n \n         storageMigrator.performStorageMigration();\n \n-        verify(storageEraser).deleteOdkDirFromUnscopedStorage(storagePathProvider);\n+        verify(storageEraser).deleteOdkDirFromUnscopedStorage();\n     }\n }\n", "next_change": {"commit": "37c513832f5d6d4afdc3f2d25b44d342a128014b", "changed_code": [{"header": "diff --git a/collect_app/src/test/java/org/odk/collect/android/storage/migration/StorageMigratorTest.java b/collect_app/src/test/java/org/odk/collect/android/storage/migration/StorageMigratorTest.java\nindex c9d2c2537c..1fdabe4131 100644\n--- a/collect_app/src/test/java/org/odk/collect/android/storage/migration/StorageMigratorTest.java\n+++ b/collect_app/src/test/java/org/odk/collect/android/storage/migration/StorageMigratorTest.java\n", "chunk": "@@ -152,9 +152,9 @@ public class StorageMigratorTest {\n     public void when_migrationFinished_should_oldOdkDirBeRemoved() {\n         doReturn(false).when(storageMigrator).isFormUploaderRunning();\n         doReturn(false).when(storageMigrator).isFormDownloaderRunning();\n-        doReturn(true).when(storageStateProvider).isEnoughSpaceToPerformMigartion(storagePathProvider);\n-        doReturn(StorageMigrationResult.MOVING_FILES_SUCCEEDED).when(storageMigrator).moveAppDataToScopedStorage();\n-        doReturn(StorageMigrationResult.MIGRATING_DATABASE_PATHS_SUCCEEDED).when(storageMigrator).migrateDatabasePaths();\n+        doReturn(true).when(storageStateProvider).isEnoughSpaceToPerformMigration(storagePathProvider);\n+        doReturn(true).when(storageMigrator).moveAppDataToScopedStorage();\n+        doReturn(true).when(storageMigrator).migrateDatabasePaths();\n \n         storageMigrator.performStorageMigration();\n \n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODExNjEzOQ==", "url": "https://github.com/getodk/collect/pull/3623#discussion_r378116139", "body": "Again would be nice for this to be a mock/fake rather than a spy.", "bodyText": "Again would be nice for this to be a mock/fake rather than a spy.", "bodyHTML": "<p dir=\"auto\">Again would be nice for this to be a mock/fake rather than a spy.</p>", "author": "seadowg", "createdAt": "2020-02-12T09:02:17Z", "path": "collect_app/src/test/java/org/odk/collect/android/storage/migration/StorageMigratorTest.java", "diffHunk": "@@ -0,0 +1,163 @@\n+package org.odk.collect.android.storage.migration;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.odk.collect.android.storage.StoragePathProvider;\n+import org.odk.collect.android.storage.StorageStateProvider;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.mockito.Mockito.doNothing;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.spy;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+\n+public class StorageMigratorTest {\n+\n+    private StorageMigrator storageMigrator;\n+    private StorageEraser storageEraser;\n+    private final StoragePathProvider storagePathProvider = spy(StoragePathProvider.class);\n+    private final StorageStateProvider storageStateProvider = mock(StorageStateProvider.class);\n+\n+    @Before\n+    public void setup() {\n+        storageEraser = spy(new StorageEraser(storagePathProvider));", "originalCommit": "0e141054594c4c079b5151ea14f67f7ca3684803", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODI1MjkzOQ==", "url": "https://github.com/getodk/collect/pull/3623#discussion_r378252939", "bodyText": "Fixed.", "author": "grzesiek2010", "createdAt": "2020-02-12T13:35:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODExNjEzOQ=="}], "type": "inlineReview", "revised_code": {"commit": "e8c792063a9b0c171775e5e8e5f6ec1d6e0c392e", "changed_code": [{"header": "diff --git a/collect_app/src/test/java/org/odk/collect/android/storage/migration/StorageMigratorTest.java b/collect_app/src/test/java/org/odk/collect/android/storage/migration/StorageMigratorTest.java\nindex c9d2c2537c..1fdabe4131 100644\n--- a/collect_app/src/test/java/org/odk/collect/android/storage/migration/StorageMigratorTest.java\n+++ b/collect_app/src/test/java/org/odk/collect/android/storage/migration/StorageMigratorTest.java\n", "chunk": "@@ -17,14 +17,14 @@ import static org.mockito.Mockito.verify;\n public class StorageMigratorTest {\n \n     private StorageMigrator storageMigrator;\n-    private StorageEraser storageEraser;\n-    private final StoragePathProvider storagePathProvider = spy(StoragePathProvider.class);\n+    private final StoragePathProvider storagePathProvider = mock(StoragePathProvider.class);\n     private final StorageStateProvider storageStateProvider = mock(StorageStateProvider.class);\n+    private final StorageEraser storageEraser = mock(StorageEraser.class);\n+    private final StorageMigrationRepository storageMigrationRepository = mock(StorageMigrationRepository.class);\n \n     @Before\n     public void setup() {\n-        storageEraser = spy(new StorageEraser(storagePathProvider));\n-        storageMigrator = spy(new StorageMigrator(storagePathProvider, storageStateProvider, storageEraser));\n+        storageMigrator = spy(new StorageMigrator(storagePathProvider, storageStateProvider, storageEraser, storageMigrationRepository));\n \n         doNothing().when(storageMigrator).reopenDatabases();\n         doNothing().when(storageEraser).clearOdkDirOnScopedStorage();\n", "next_change": {"commit": "b41f872629c599595fe83d27e27fc5ee3bdc1ca2", "changed_code": [{"header": "diff --git a/collect_app/src/test/java/org/odk/collect/android/storage/migration/StorageMigratorTest.java b/collect_app/src/test/java/org/odk/collect/android/storage/migration/StorageMigratorTest.java\nindex 1fdabe413..a63452c03 100644\n--- a/collect_app/src/test/java/org/odk/collect/android/storage/migration/StorageMigratorTest.java\n+++ b/collect_app/src/test/java/org/odk/collect/android/storage/migration/StorageMigratorTest.java\n", "chunk": "@@ -21,14 +24,16 @@ public class StorageMigratorTest {\n     private final StorageStateProvider storageStateProvider = mock(StorageStateProvider.class);\n     private final StorageEraser storageEraser = mock(StorageEraser.class);\n     private final StorageMigrationRepository storageMigrationRepository = mock(StorageMigrationRepository.class);\n+    private final GeneralSharedPreferences generalSharedPreferences = mock(GeneralSharedPreferences.class);\n \n     @Before\n     public void setup() {\n-        storageMigrator = spy(new StorageMigrator(storagePathProvider, storageStateProvider, storageEraser, storageMigrationRepository));\n+        storageMigrator = spy(new StorageMigrator(storagePathProvider, storageStateProvider, storageEraser, storageMigrationRepository, generalSharedPreferences));\n \n         doNothing().when(storageMigrator).reopenDatabases();\n         doNothing().when(storageEraser).clearOdkDirOnScopedStorage();\n         doNothing().when(storageEraser).deleteOdkDirFromUnscopedStorage();\n+        doReturn(\"/sdcard/odk/layers/countries/countries-raster.mbtiles\").when(generalSharedPreferences).get(KEY_REFERENCE_LAYER);\n     }\n \n     @Test\n", "next_change": {"commit": "de4a297917d1b8b7ac2eae0018a8567d74fd4486", "changed_code": [{"header": "diff --git a/collect_app/src/test/java/org/odk/collect/android/storage/migration/StorageMigratorTest.java b/collect_app/src/test/java/org/odk/collect/android/storage/migration/StorageMigratorTest.java\nindex a63452c031..6020434922 100644\n--- a/collect_app/src/test/java/org/odk/collect/android/storage/migration/StorageMigratorTest.java\n+++ b/collect_app/src/test/java/org/odk/collect/android/storage/migration/StorageMigratorTest.java\n", "chunk": "@@ -14,26 +13,21 @@ import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.spy;\n import static org.mockito.Mockito.times;\n import static org.mockito.Mockito.verify;\n-import static org.odk.collect.android.preferences.GeneralKeys.KEY_REFERENCE_LAYER;\n \n-@SuppressWarnings(\"PMD.DoNotHardCodeSDCard\")\n public class StorageMigratorTest {\n \n     private StorageMigrator storageMigrator;\n     private final StoragePathProvider storagePathProvider = mock(StoragePathProvider.class);\n     private final StorageStateProvider storageStateProvider = mock(StorageStateProvider.class);\n     private final StorageEraser storageEraser = mock(StorageEraser.class);\n-    private final StorageMigrationRepository storageMigrationRepository = mock(StorageMigrationRepository.class);\n-    private final GeneralSharedPreferences generalSharedPreferences = mock(GeneralSharedPreferences.class);\n \n     @Before\n     public void setup() {\n-        storageMigrator = spy(new StorageMigrator(storagePathProvider, storageStateProvider, storageEraser, storageMigrationRepository, generalSharedPreferences));\n+        storageMigrator = spy(new StorageMigrator(storagePathProvider, storageStateProvider, storageEraser));\n \n         doNothing().when(storageMigrator).reopenDatabases();\n         doNothing().when(storageEraser).clearOdkDirOnScopedStorage();\n         doNothing().when(storageEraser).deleteOdkDirFromUnscopedStorage();\n-        doReturn(\"/sdcard/odk/layers/countries/countries-raster.mbtiles\").when(generalSharedPreferences).get(KEY_REFERENCE_LAYER);\n     }\n \n     @Test\n", "next_change": {"commit": "dcc8858054effc1658c7fd6c93336794057921eb", "changed_code": [{"header": "diff --git a/collect_app/src/test/java/org/odk/collect/android/storage/migration/StorageMigratorTest.java b/collect_app/src/test/java/org/odk/collect/android/storage/migration/StorageMigratorTest.java\nindex 6020434922..f45901c1b8 100644\n--- a/collect_app/src/test/java/org/odk/collect/android/storage/migration/StorageMigratorTest.java\n+++ b/collect_app/src/test/java/org/odk/collect/android/storage/migration/StorageMigratorTest.java\n", "chunk": "@@ -20,10 +20,11 @@ public class StorageMigratorTest {\n     private final StoragePathProvider storagePathProvider = mock(StoragePathProvider.class);\n     private final StorageStateProvider storageStateProvider = mock(StorageStateProvider.class);\n     private final StorageEraser storageEraser = mock(StorageEraser.class);\n+    private final StorageMigrationRepository storageMigrationRepository = mock(StorageMigrationRepository.class);\n \n     @Before\n     public void setup() {\n-        storageMigrator = spy(new StorageMigrator(storagePathProvider, storageStateProvider, storageEraser));\n+        storageMigrator = spy(new StorageMigrator(storagePathProvider, storageStateProvider, storageEraser, storageMigrationRepository));\n \n         doNothing().when(storageMigrator).reopenDatabases();\n         doNothing().when(storageEraser).clearOdkDirOnScopedStorage();\n", "next_change": {"commit": "5443cc29f39e742181db5c4820b0b758efdb42e1", "changed_code": [{"header": "diff --git a/collect_app/src/test/java/org/odk/collect/android/storage/migration/StorageMigratorTest.java b/collect_app/src/test/java/org/odk/collect/android/storage/migration/StorageMigratorTest.java\nindex f45901c1b8..a63452c031 100644\n--- a/collect_app/src/test/java/org/odk/collect/android/storage/migration/StorageMigratorTest.java\n+++ b/collect_app/src/test/java/org/odk/collect/android/storage/migration/StorageMigratorTest.java\n", "chunk": "@@ -21,14 +24,16 @@ public class StorageMigratorTest {\n     private final StorageStateProvider storageStateProvider = mock(StorageStateProvider.class);\n     private final StorageEraser storageEraser = mock(StorageEraser.class);\n     private final StorageMigrationRepository storageMigrationRepository = mock(StorageMigrationRepository.class);\n+    private final GeneralSharedPreferences generalSharedPreferences = mock(GeneralSharedPreferences.class);\n \n     @Before\n     public void setup() {\n-        storageMigrator = spy(new StorageMigrator(storagePathProvider, storageStateProvider, storageEraser, storageMigrationRepository));\n+        storageMigrator = spy(new StorageMigrator(storagePathProvider, storageStateProvider, storageEraser, storageMigrationRepository, generalSharedPreferences));\n \n         doNothing().when(storageMigrator).reopenDatabases();\n         doNothing().when(storageEraser).clearOdkDirOnScopedStorage();\n         doNothing().when(storageEraser).deleteOdkDirFromUnscopedStorage();\n+        doReturn(\"/sdcard/odk/layers/countries/countries-raster.mbtiles\").when(generalSharedPreferences).get(KEY_REFERENCE_LAYER);\n     }\n \n     @Test\n", "next_change": {"commit": "2aec2cef76323fcadf43baad6f780922420fbea9", "changed_code": [{"header": "diff --git a/collect_app/src/test/java/org/odk/collect/android/storage/migration/StorageMigratorTest.java b/collect_app/src/test/java/org/odk/collect/android/storage/migration/StorageMigratorTest.java\ndeleted file mode 100644\nindex a63452c031..0000000000\n--- a/collect_app/src/test/java/org/odk/collect/android/storage/migration/StorageMigratorTest.java\n+++ /dev/null\n", "chunk": "@@ -1,181 +0,0 @@\n-package org.odk.collect.android.storage.migration;\n-\n-import org.junit.Before;\n-import org.junit.Test;\n-import org.odk.collect.android.preferences.GeneralSharedPreferences;\n-import org.odk.collect.android.storage.StoragePathProvider;\n-import org.odk.collect.android.storage.StorageStateProvider;\n-\n-import static org.hamcrest.MatcherAssert.assertThat;\n-import static org.hamcrest.Matchers.is;\n-import static org.mockito.Mockito.doNothing;\n-import static org.mockito.Mockito.doReturn;\n-import static org.mockito.Mockito.mock;\n-import static org.mockito.Mockito.spy;\n-import static org.mockito.Mockito.times;\n-import static org.mockito.Mockito.verify;\n-import static org.odk.collect.android.preferences.GeneralKeys.KEY_REFERENCE_LAYER;\n-\n-@SuppressWarnings(\"PMD.DoNotHardCodeSDCard\")\n-public class StorageMigratorTest {\n-\n-    private StorageMigrator storageMigrator;\n-    private final StoragePathProvider storagePathProvider = mock(StoragePathProvider.class);\n-    private final StorageStateProvider storageStateProvider = mock(StorageStateProvider.class);\n-    private final StorageEraser storageEraser = mock(StorageEraser.class);\n-    private final StorageMigrationRepository storageMigrationRepository = mock(StorageMigrationRepository.class);\n-    private final GeneralSharedPreferences generalSharedPreferences = mock(GeneralSharedPreferences.class);\n-\n-    @Before\n-    public void setup() {\n-        storageMigrator = spy(new StorageMigrator(storagePathProvider, storageStateProvider, storageEraser, storageMigrationRepository, generalSharedPreferences));\n-\n-        doNothing().when(storageMigrator).reopenDatabases();\n-        doNothing().when(storageEraser).clearOdkDirOnScopedStorage();\n-        doNothing().when(storageEraser).deleteOdkDirFromUnscopedStorage();\n-        doReturn(\"/sdcard/odk/layers/countries/countries-raster.mbtiles\").when(generalSharedPreferences).get(KEY_REFERENCE_LAYER);\n-    }\n-\n-    @Test\n-    public void when_formUploaderIsRunning_should_appropriateResultBeReturned() {\n-        doReturn(true).when(storageMigrator).isFormUploaderRunning();\n-\n-        assertThat(storageMigrator.migrate(), is(StorageMigrationResult.FORM_UPLOADER_IS_RUNNING));\n-    }\n-\n-    @Test\n-    public void when_formDownloaderIsRunning_should_appropriateResultBeReturned() {\n-        doReturn(false).when(storageMigrator).isFormUploaderRunning();\n-        doReturn(true).when(storageMigrator).isFormDownloaderRunning();\n-\n-        assertThat(storageMigrator.migrate(), is(StorageMigrationResult.FORM_DOWNLOADER_IS_RUNNING));\n-    }\n-\n-    @Test\n-    public void when_thereIsNoEnoughSpaceToPerformMigration_should_appropriateResultBeReturned() {\n-        doReturn(false).when(storageMigrator).isFormUploaderRunning();\n-        doReturn(false).when(storageMigrator).isFormDownloaderRunning();\n-        doReturn(false).when(storageStateProvider).isEnoughSpaceToPerformMigration(storagePathProvider);\n-\n-        assertThat(storageMigrator.migrate(), is(StorageMigrationResult.NOT_ENOUGH_SPACE));\n-    }\n-\n-    @Test\n-    public void when_anyExceptionIsThrownDuringMovingFiles_should_appropriateResultBeReturned() {\n-        doReturn(false).when(storageMigrator).isFormUploaderRunning();\n-        doReturn(false).when(storageMigrator).isFormDownloaderRunning();\n-        doReturn(true).when(storageStateProvider).isEnoughSpaceToPerformMigration(storagePathProvider);\n-        doReturn(false).when(storageMigrator).moveAppDataToScopedStorage();\n-\n-        assertThat(storageMigrator.migrate(), is(StorageMigrationResult.MOVING_FILES_FAILED));\n-    }\n-\n-    @Test\n-    public void when_anyExceptionIsThrownDuringMigratingDatabases_should_appropriateResultBeReturned() {\n-        doReturn(false).when(storageMigrator).isFormUploaderRunning();\n-        doReturn(false).when(storageMigrator).isFormDownloaderRunning();\n-        doReturn(true).when(storageStateProvider).isEnoughSpaceToPerformMigration(storagePathProvider);\n-        doReturn(true).when(storageMigrator).moveAppDataToScopedStorage();\n-        doReturn(false).when(storageMigrator).migrateDatabasePaths();\n-\n-        assertThat(storageMigrator.migrate(), is(StorageMigrationResult.MOVING_FILES_FAILED));\n-    }\n-\n-    @Test\n-    public void when_migrationFinishedWithSuccess_should_appropriateResultBeReturned() {\n-        doReturn(false).when(storageMigrator).isFormUploaderRunning();\n-        doReturn(false).when(storageMigrator).isFormDownloaderRunning();\n-        doReturn(true).when(storageStateProvider).isEnoughSpaceToPerformMigration(storagePathProvider);\n-        doReturn(true).when(storageMigrator).moveAppDataToScopedStorage();\n-        doReturn(true).when(storageMigrator).migrateDatabasePaths();\n-\n-        assertThat(storageMigrator.migrate(), is(StorageMigrationResult.SUCCESS));\n-    }\n-\n-    @Test\n-    public void when_migrationStarts_should_scopedStorageBeCleared() {\n-        doReturn(true).when(storageMigrator).isFormUploaderRunning();\n-\n-        storageMigrator.performStorageMigration();\n-\n-        verify(storageEraser).clearOdkDirOnScopedStorage();\n-    }\n-\n-    @Test\n-    public void when_movingFilesIsFinished_should_scopedStorageBeEnabled() {\n-        doReturn(false).when(storageMigrator).isFormUploaderRunning();\n-        doReturn(false).when(storageMigrator).isFormDownloaderRunning();\n-        doReturn(true).when(storageStateProvider).isEnoughSpaceToPerformMigration(storagePathProvider);\n-        doReturn(true).when(storageMigrator).moveAppDataToScopedStorage();\n-        doReturn(false).when(storageMigrator).migrateDatabasePaths();\n-\n-        storageMigrator.performStorageMigration();\n-\n-        verify(storageStateProvider).enableUsingScopedStorage();\n-    }\n-\n-    @Test\n-    public void when_movingFilesIsFinished_should_databasesBeReopened() {\n-        doReturn(false).when(storageMigrator).isFormUploaderRunning();\n-        doReturn(false).when(storageMigrator).isFormDownloaderRunning();\n-        doReturn(true).when(storageStateProvider).isEnoughSpaceToPerformMigration(storagePathProvider);\n-        doReturn(true).when(storageMigrator).moveAppDataToScopedStorage();\n-        doReturn(true).when(storageMigrator).migrateDatabasePaths();\n-\n-        storageMigrator.performStorageMigration();\n-\n-        verify(storageMigrator).reopenDatabases();\n-    }\n-\n-    @Test\n-    public void when_movingFilesFailed_should_databasesBeReopenedAgain() {\n-        doReturn(false).when(storageMigrator).isFormUploaderRunning();\n-        doReturn(false).when(storageMigrator).isFormDownloaderRunning();\n-        doReturn(true).when(storageStateProvider).isEnoughSpaceToPerformMigration(storagePathProvider);\n-        doReturn(true).when(storageMigrator).moveAppDataToScopedStorage();\n-        doReturn(false).when(storageMigrator).migrateDatabasePaths();\n-\n-        storageMigrator.performStorageMigration();\n-\n-        verify(storageMigrator, times(2)).reopenDatabases();\n-    }\n-\n-    @Test\n-    public void when_movingFilesFailed_should_scopedStorageBeDisabled() {\n-        doReturn(false).when(storageMigrator).isFormUploaderRunning();\n-        doReturn(false).when(storageMigrator).isFormDownloaderRunning();\n-        doReturn(true).when(storageStateProvider).isEnoughSpaceToPerformMigration(storagePathProvider);\n-        doReturn(true).when(storageMigrator).moveAppDataToScopedStorage();\n-        doReturn(false).when(storageMigrator).migrateDatabasePaths();\n-\n-        storageMigrator.performStorageMigration();\n-\n-        verify(storageStateProvider).disableUsingScopedStorage();\n-    }\n-\n-    @Test\n-    public void when_migrationFinished_should_offlineMapLayerBeUpdated() {\n-        doReturn(false).when(storageMigrator).isFormUploaderRunning();\n-        doReturn(false).when(storageMigrator).isFormDownloaderRunning();\n-        doReturn(true).when(storageStateProvider).isEnoughSpaceToPerformMigration(storagePathProvider);\n-        doReturn(true).when(storageMigrator).moveAppDataToScopedStorage();\n-        doReturn(true).when(storageMigrator).migrateDatabasePaths();\n-\n-        storageMigrator.performStorageMigration();\n-\n-        verify(generalSharedPreferences).save(KEY_REFERENCE_LAYER, \"/layers/countries/countries-raster.mbtiles\");\n-    }\n-\n-    @Test\n-    public void when_migrationFinished_should_oldOdkDirBeRemoved() {\n-        doReturn(false).when(storageMigrator).isFormUploaderRunning();\n-        doReturn(false).when(storageMigrator).isFormDownloaderRunning();\n-        doReturn(true).when(storageStateProvider).isEnoughSpaceToPerformMigration(storagePathProvider);\n-        doReturn(true).when(storageMigrator).moveAppDataToScopedStorage();\n-        doReturn(true).when(storageMigrator).migrateDatabasePaths();\n-\n-        storageMigrator.performStorageMigration();\n-\n-        verify(storageEraser).deleteOdkDirFromUnscopedStorage();\n-    }\n-}\n", "next_change": {"commit": "9f2f6aed514bd0f2ee5d029e42630be344e3de3a", "changed_code": [{"header": "diff --git a/collect_app/src/test/java/org/odk/collect/android/storage/migration/StorageMigratorTest.java b/collect_app/src/test/java/org/odk/collect/android/storage/migration/StorageMigratorTest.java\nnew file mode 100644\nindex 0000000000..1e2a6b5e4f\n--- /dev/null\n+++ b/collect_app/src/test/java/org/odk/collect/android/storage/migration/StorageMigratorTest.java\n", "chunk": "@@ -0,0 +1,161 @@\n+package org.odk.collect.android.storage.migration;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.odk.collect.android.storage.StoragePathProvider;\n+import org.odk.collect.android.storage.StorageStateProvider;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.mockito.Mockito.doNothing;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.spy;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+\n+public class StorageMigratorTest {\n+\n+    private StorageMigrator storageMigrator;\n+    private final StorageEraser storageEraser = spy(StorageEraser.class);\n+    private final StoragePathProvider storagePathProvider = spy(StoragePathProvider.class);\n+    private final StorageStateProvider storageStateProvider = mock(StorageStateProvider.class);\n+\n+    @Before\n+    public void setup() {\n+        storageMigrator = spy(new StorageMigrator(storagePathProvider, storageStateProvider, storageEraser));\n+        doNothing().when(storageMigrator).reopenDatabases();\n+        doNothing().when(storageEraser).clearOdkDirOnScopedStorage(storagePathProvider);\n+        doNothing().when(storageEraser).deleteOdkDirFromUnscopedStorage(storagePathProvider);\n+    }\n+\n+    @Test\n+    public void when_formUploaderIsRunning_should_appropriateResultBeReturned() {\n+        doReturn(true).when(storageMigrator).isFormUploaderRunning();\n+\n+        assertThat(storageMigrator.performStorageMigration(), is(StorageMigrationResult.FORM_UPLOADER_IS_RUNNING));\n+    }\n+\n+    @Test\n+    public void when_formDownloaderIsRunning_should_appropriateResultBeReturned() {\n+        doReturn(false).when(storageMigrator).isFormUploaderRunning();\n+        doReturn(true).when(storageMigrator).isFormDownloaderRunning();\n+\n+        assertThat(storageMigrator.performStorageMigration(), is(StorageMigrationResult.FORM_DOWNLOADER_IS_RUNNING));\n+    }\n+\n+    @Test\n+    public void when_thereIsNoEnoughSpaceToPerformMigration_should_appropriateResultBeReturned() {\n+        doReturn(false).when(storageMigrator).isFormUploaderRunning();\n+        doReturn(false).when(storageMigrator).isFormDownloaderRunning();\n+        doReturn(false).when(storageStateProvider).isEnoughSpaceToPerformMigartion(storagePathProvider);\n+\n+        assertThat(storageMigrator.performStorageMigration(), is(StorageMigrationResult.NOT_ENOUGH_SPACE));\n+    }\n+\n+    @Test\n+    public void when_anyExceptionIsThrownDuringMovingFiles_should_appropriateResultBeReturned() {\n+        doReturn(false).when(storageMigrator).isFormUploaderRunning();\n+        doReturn(false).when(storageMigrator).isFormDownloaderRunning();\n+        doReturn(true).when(storageStateProvider).isEnoughSpaceToPerformMigartion(storagePathProvider);\n+        doReturn(StorageMigrationResult.MOVING_FILES_FAILED).when(storageMigrator).moveAppDataToScopedStorage();\n+\n+        assertThat(storageMigrator.performStorageMigration(), is(StorageMigrationResult.MOVING_FILES_FAILED));\n+    }\n+\n+    @Test\n+    public void when_anyExceptionIsThrownDuringMigratingDatabases_should_appropriateResultBeReturned() {\n+        doReturn(false).when(storageMigrator).isFormUploaderRunning();\n+        doReturn(false).when(storageMigrator).isFormDownloaderRunning();\n+        doReturn(true).when(storageStateProvider).isEnoughSpaceToPerformMigartion(storagePathProvider);\n+        doReturn(StorageMigrationResult.MOVING_FILES_SUCCEEDED).when(storageMigrator).moveAppDataToScopedStorage();\n+        doReturn(StorageMigrationResult.MIGRATING_DATABASE_PATHS_FAILED).when(storageMigrator).migrateDatabasePaths();\n+\n+        assertThat(storageMigrator.performStorageMigration(), is(StorageMigrationResult.MIGRATING_DATABASE_PATHS_FAILED));\n+    }\n+\n+    @Test\n+    public void when_migrationFinishedWithSuccess_should_appropriateResultBeReturned() {\n+        doReturn(false).when(storageMigrator).isFormUploaderRunning();\n+        doReturn(false).when(storageMigrator).isFormDownloaderRunning();\n+        doReturn(true).when(storageStateProvider).isEnoughSpaceToPerformMigartion(storagePathProvider);\n+        doReturn(StorageMigrationResult.MOVING_FILES_SUCCEEDED).when(storageMigrator).moveAppDataToScopedStorage();\n+        doReturn(StorageMigrationResult.MIGRATING_DATABASE_PATHS_SUCCEEDED).when(storageMigrator).migrateDatabasePaths();\n+\n+        assertThat(storageMigrator.performStorageMigration(), is(StorageMigrationResult.SUCCESS));\n+    }\n+\n+    @Test\n+    public void when_migrationStarts_should_scopedStorageBeCleared() {\n+        doReturn(true).when(storageMigrator).isFormUploaderRunning();\n+\n+        storageMigrator.performStorageMigration();\n+\n+        verify(storageEraser).clearOdkDirOnScopedStorage(storagePathProvider);\n+    }\n+\n+    @Test\n+    public void when_movingFilesIsFinished_should_scopedStorageBeEnabled() {\n+        doReturn(false).when(storageMigrator).isFormUploaderRunning();\n+        doReturn(false).when(storageMigrator).isFormDownloaderRunning();\n+        doReturn(true).when(storageStateProvider).isEnoughSpaceToPerformMigartion(storagePathProvider);\n+        doReturn(StorageMigrationResult.MOVING_FILES_SUCCEEDED).when(storageMigrator).moveAppDataToScopedStorage();\n+        doReturn(StorageMigrationResult.MIGRATING_DATABASE_PATHS_FAILED).when(storageMigrator).migrateDatabasePaths();\n+\n+        storageMigrator.performStorageMigration();\n+\n+        verify(storageStateProvider).enableUsingScopedStorage();\n+    }\n+\n+    @Test\n+    public void when_movingFilesIsFinished_should_databasesBeReopened() {\n+        doReturn(false).when(storageMigrator).isFormUploaderRunning();\n+        doReturn(false).when(storageMigrator).isFormDownloaderRunning();\n+        doReturn(true).when(storageStateProvider).isEnoughSpaceToPerformMigartion(storagePathProvider);\n+        doReturn(StorageMigrationResult.MOVING_FILES_SUCCEEDED).when(storageMigrator).moveAppDataToScopedStorage();\n+        doReturn(StorageMigrationResult.MIGRATING_DATABASE_PATHS_SUCCEEDED).when(storageMigrator).migrateDatabasePaths();\n+\n+        storageMigrator.performStorageMigration();\n+\n+        verify(storageMigrator).reopenDatabases();\n+    }\n+\n+    @Test\n+    public void when_movingFilesFailed_should_databasesBeReopenedAgain() {\n+        doReturn(false).when(storageMigrator).isFormUploaderRunning();\n+        doReturn(false).when(storageMigrator).isFormDownloaderRunning();\n+        doReturn(true).when(storageStateProvider).isEnoughSpaceToPerformMigartion(storagePathProvider);\n+        doReturn(StorageMigrationResult.MOVING_FILES_SUCCEEDED).when(storageMigrator).moveAppDataToScopedStorage();\n+        doReturn(StorageMigrationResult.MIGRATING_DATABASE_PATHS_FAILED).when(storageMigrator).migrateDatabasePaths();\n+\n+        storageMigrator.performStorageMigration();\n+\n+        verify(storageMigrator, times(2)).reopenDatabases();\n+    }\n+\n+    @Test\n+    public void when_movingFilesFailed_should_scopedStorageBeDisabled() {\n+        doReturn(false).when(storageMigrator).isFormUploaderRunning();\n+        doReturn(false).when(storageMigrator).isFormDownloaderRunning();\n+        doReturn(true).when(storageStateProvider).isEnoughSpaceToPerformMigartion(storagePathProvider);\n+        doReturn(StorageMigrationResult.MOVING_FILES_SUCCEEDED).when(storageMigrator).moveAppDataToScopedStorage();\n+        doReturn(StorageMigrationResult.MIGRATING_DATABASE_PATHS_FAILED).when(storageMigrator).migrateDatabasePaths();\n+\n+        storageMigrator.performStorageMigration();\n+\n+        verify(storageStateProvider).disableUsingScopedStorage();\n+    }\n+\n+    @Test\n+    public void when_migrationFinished_should_oldOdkDirBeRemoved() {\n+        doReturn(false).when(storageMigrator).isFormUploaderRunning();\n+        doReturn(false).when(storageMigrator).isFormDownloaderRunning();\n+        doReturn(true).when(storageStateProvider).isEnoughSpaceToPerformMigartion(storagePathProvider);\n+        doReturn(StorageMigrationResult.MOVING_FILES_SUCCEEDED).when(storageMigrator).moveAppDataToScopedStorage();\n+        doReturn(StorageMigrationResult.MIGRATING_DATABASE_PATHS_SUCCEEDED).when(storageMigrator).migrateDatabasePaths();\n+\n+        storageMigrator.performStorageMigration();\n+\n+        verify(storageEraser).deleteOdkDirFromUnscopedStorage(storagePathProvider);\n+    }\n+}\n", "next_change": {"commit": "002ac82208ad3684a556dfdfcbb9f850cfcbfad6", "changed_code": [{"header": "diff --git a/collect_app/src/test/java/org/odk/collect/android/storage/migration/StorageMigratorTest.java b/collect_app/src/test/java/org/odk/collect/android/storage/migration/StorageMigratorTest.java\nindex 1e2a6b5e4f..c9d2c2537c 100644\n--- a/collect_app/src/test/java/org/odk/collect/android/storage/migration/StorageMigratorTest.java\n+++ b/collect_app/src/test/java/org/odk/collect/android/storage/migration/StorageMigratorTest.java\n", "chunk": "@@ -156,6 +158,6 @@ public class StorageMigratorTest {\n \n         storageMigrator.performStorageMigration();\n \n-        verify(storageEraser).deleteOdkDirFromUnscopedStorage(storagePathProvider);\n+        verify(storageEraser).deleteOdkDirFromUnscopedStorage();\n     }\n }\n", "next_change": {"commit": "37c513832f5d6d4afdc3f2d25b44d342a128014b", "changed_code": [{"header": "diff --git a/collect_app/src/test/java/org/odk/collect/android/storage/migration/StorageMigratorTest.java b/collect_app/src/test/java/org/odk/collect/android/storage/migration/StorageMigratorTest.java\nindex c9d2c2537c..1fdabe4131 100644\n--- a/collect_app/src/test/java/org/odk/collect/android/storage/migration/StorageMigratorTest.java\n+++ b/collect_app/src/test/java/org/odk/collect/android/storage/migration/StorageMigratorTest.java\n", "chunk": "@@ -152,9 +152,9 @@ public class StorageMigratorTest {\n     public void when_migrationFinished_should_oldOdkDirBeRemoved() {\n         doReturn(false).when(storageMigrator).isFormUploaderRunning();\n         doReturn(false).when(storageMigrator).isFormDownloaderRunning();\n-        doReturn(true).when(storageStateProvider).isEnoughSpaceToPerformMigartion(storagePathProvider);\n-        doReturn(StorageMigrationResult.MOVING_FILES_SUCCEEDED).when(storageMigrator).moveAppDataToScopedStorage();\n-        doReturn(StorageMigrationResult.MIGRATING_DATABASE_PATHS_SUCCEEDED).when(storageMigrator).migrateDatabasePaths();\n+        doReturn(true).when(storageStateProvider).isEnoughSpaceToPerformMigration(storagePathProvider);\n+        doReturn(true).when(storageMigrator).moveAppDataToScopedStorage();\n+        doReturn(true).when(storageMigrator).migrateDatabasePaths();\n \n         storageMigrator.performStorageMigration();\n \n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}, {"oid": "de4a297917d1b8b7ac2eae0018a8567d74fd4486", "url": "https://github.com/getodk/collect/commit/de4a297917d1b8b7ac2eae0018a8567d74fd4486", "message": "Use Livedata instead of broadcast receivers", "committedDate": "2020-02-12T14:40:09Z", "type": "forcePushed"}, {"oid": "abbeb518d0a93a2a38f9697259333101d8620866", "url": "https://github.com/getodk/collect/commit/abbeb518d0a93a2a38f9697259333101d8620866", "message": "Use Livedata instead of broadcast receivers", "committedDate": "2020-02-12T14:45:10Z", "type": "forcePushed"}, {"oid": "bd3ea6cccfde37848601cc639945cc4f25bb6549", "url": "https://github.com/getodk/collect/commit/bd3ea6cccfde37848601cc639945cc4f25bb6549", "message": "Use Livedata instead of broadcast receivers", "committedDate": "2020-02-12T14:48:25Z", "type": "forcePushed"}, {"oid": "0ad9d8c9e1d36fe18889aa6032d3db20cd0b4c85", "url": "https://github.com/getodk/collect/commit/0ad9d8c9e1d36fe18889aa6032d3db20cd0b4c85", "message": "Use Livedata instead of broadcast receivers", "committedDate": "2020-02-12T14:51:07Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODM0NzM4Mg==", "url": "https://github.com/getodk/collect/pull/3623#discussion_r378347382", "body": "Oh wow was this making it pop open the keyboard even though there aren't any fields? That's annoying. Feel free to reverse it so the default is `false` and the other dialogs override. ", "bodyText": "Oh wow was this making it pop open the keyboard even though there aren't any fields? That's annoying. Feel free to reverse it so the default is false and the other dialogs override.", "bodyHTML": "<p dir=\"auto\">Oh wow was this making it pop open the keyboard even though there aren't any fields? That's annoying. Feel free to reverse it so the default is <code>false</code> and the other dialogs override.</p>", "author": "seadowg", "createdAt": "2020-02-12T16:02:05Z", "path": "collect_app/src/main/java/org/odk/collect/android/material/MaterialFullScreenDialogFragment.java", "diffHunk": "@@ -39,8 +39,10 @@ public void onStart() {\n             int height = ViewGroup.LayoutParams.MATCH_PARENT;\n             dialog.getWindow().setLayout(width, height);\n \n-            // Make sure soft keyboard shows for focused field - annoyingly needed\n-            dialog.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_VISIBLE);\n+            if (shouldShowSoftKeyboard()) {", "originalCommit": "0ad9d8c9e1d36fe18889aa6032d3db20cd0b4c85", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc3MTE2NA==", "url": "https://github.com/getodk/collect/pull/3623#discussion_r378771164", "bodyText": "Fixed.", "author": "grzesiek2010", "createdAt": "2020-02-13T10:23:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODM0NzM4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "2aec2cef76323fcadf43baad6f780922420fbea9", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/material/MaterialFullScreenDialogFragment.java b/collect_app/src/main/java/org/odk/collect/android/material/MaterialFullScreenDialogFragment.java\nindex b9479111d3..1c3f4eec60 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/material/MaterialFullScreenDialogFragment.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/material/MaterialFullScreenDialogFragment.java\n", "chunk": "@@ -39,10 +38,8 @@ public abstract class MaterialFullScreenDialogFragment extends DialogFragment {\n             int height = ViewGroup.LayoutParams.MATCH_PARENT;\n             dialog.getWindow().setLayout(width, height);\n \n-            if (shouldShowSoftKeyboard()) {\n-                // Make sure soft keyboard shows for focused field - annoyingly needed\n-                dialog.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_VISIBLE);\n-            }\n+            // Make sure soft keyboard shows for focused field - annoyingly needed\n+            dialog.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_VISIBLE);\n \n             setCancelable(false);\n             dialog.setOnKeyListener((dialogInterface, keyCode, event) -> {\n", "next_change": {"commit": "5adaaedb6b4a95936f15c3ace52e17091cd3eac7", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/material/MaterialFullScreenDialogFragment.java b/collect_app/src/main/java/org/odk/collect/android/material/MaterialFullScreenDialogFragment.java\nindex 1c3f4eec60..4bb1ff67ca 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/material/MaterialFullScreenDialogFragment.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/material/MaterialFullScreenDialogFragment.java\n", "chunk": "@@ -38,8 +38,10 @@ public abstract class MaterialFullScreenDialogFragment extends DialogFragment {\n             int height = ViewGroup.LayoutParams.MATCH_PARENT;\n             dialog.getWindow().setLayout(width, height);\n \n-            // Make sure soft keyboard shows for focused field - annoyingly needed\n-            dialog.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_VISIBLE);\n+            if (shouldShowSoftKeyboard()) {\n+                // Make sure soft keyboard shows for focused field - annoyingly needed\n+                dialog.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_VISIBLE);\n+            }\n \n             setCancelable(false);\n             dialog.setOnKeyListener((dialogInterface, keyCode, event) -> {\n", "next_change": null}]}}]}}, {"oid": "dcc8858054effc1658c7fd6c93336794057921eb", "url": "https://github.com/getodk/collect/commit/dcc8858054effc1658c7fd6c93336794057921eb", "message": "Use Livedata instead of broadcast receivers", "committedDate": "2020-02-13T10:08:57Z", "type": "forcePushed"}, {"oid": "c648963c21bc00901ebce412c99ce83758185404", "url": "https://github.com/getodk/collect/commit/c648963c21bc00901ebce412c99ce83758185404", "message": "Code improvements", "committedDate": "2020-02-13T12:46:05Z", "type": "forcePushed"}, {"oid": "5caad54c54b2ff94111e7edf5fd4c99566104dc1", "url": "https://github.com/getodk/collect/commit/5caad54c54b2ff94111e7edf5fd4c99566104dc1", "message": "Code improvements", "committedDate": "2020-02-13T12:48:51Z", "type": "forcePushed"}, {"oid": "ee4950f919a3c52ce845b1ebd2d445b7440a7249", "url": "https://github.com/getodk/collect/commit/ee4950f919a3c52ce845b1ebd2d445b7440a7249", "message": "Code improvements", "committedDate": "2020-02-13T12:52:48Z", "type": "forcePushed"}, {"oid": "a39b50ca8ce1004dbb524e23d861052f2ba83918", "url": "https://github.com/getodk/collect/commit/a39b50ca8ce1004dbb524e23d861052f2ba83918", "message": "Code improvements", "committedDate": "2020-02-13T13:09:47Z", "type": "forcePushed"}, {"oid": "faa160541062d8bf23fc55ff1a296e1bf2b6dc2a", "url": "https://github.com/getodk/collect/commit/faa160541062d8bf23fc55ff1a296e1bf2b6dc2a", "message": "Code improvements", "committedDate": "2020-02-13T13:10:48Z", "type": "forcePushed"}, {"oid": "a1eadb0a3388f7b0fd3a0a46285d77a54b356a90", "url": "https://github.com/getodk/collect/commit/a1eadb0a3388f7b0fd3a0a46285d77a54b356a90", "message": "Code improvements", "committedDate": "2020-02-13T13:12:53Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTI0ODAzMw==", "url": "https://github.com/getodk/collect/pull/3623#discussion_r379248033", "body": "Migartion -> Migration", "bodyText": "Migartion -> Migration", "bodyHTML": "<p dir=\"auto\">Migartion -&gt; Migration</p>", "author": "lognaturel", "createdAt": "2020-02-14T04:39:48Z", "path": "collect_app/src/main/java/org/odk/collect/android/storage/StorageStateProvider.java", "diffHunk": "@@ -1,21 +1,78 @@\n package org.odk.collect.android.storage;\n \n+import android.os.Build;\n import android.os.Environment;\n+import android.os.StatFs;\n \n import org.odk.collect.android.preferences.GeneralSharedPreferences;\n \n+import java.io.File;\n+\n+import timber.log.Timber;\n+\n import static org.odk.collect.android.preferences.GeneralKeys.KEY_SCOPED_STORAGE_USED;\n \n public class StorageStateProvider {\n-    boolean isScopedStorageUsed() {\n+\n+    public boolean isScopedStorageUsed() {\n         return GeneralSharedPreferences.getInstance().getBoolean(KEY_SCOPED_STORAGE_USED, false);\n     }\n \n-    public void recordMigrationToScopedStorage() {\n+    public void enableUsingScopedStorage() {\n         GeneralSharedPreferences.getInstance().save(KEY_SCOPED_STORAGE_USED, true);\n     }\n \n+    public void disableUsingScopedStorage() {\n+        GeneralSharedPreferences.getInstance().save(KEY_SCOPED_STORAGE_USED, false);\n+    }\n+\n     boolean isStorageMounted() {\n         return Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED);\n     }\n+\n+    public boolean isEnoughSpaceToPerformMigartion(StoragePathProvider storagePathProvider) {", "originalCommit": "a1eadb0a3388f7b0fd3a0a46285d77a54b356a90", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTM1MjAzNQ==", "url": "https://github.com/getodk/collect/pull/3623#discussion_r379352035", "bodyText": "Fixed.", "author": "grzesiek2010", "createdAt": "2020-02-14T10:18:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTI0ODAzMw=="}], "type": "inlineReview", "revised_code": {"commit": "e8c792063a9b0c171775e5e8e5f6ec1d6e0c392e", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/storage/StorageStateProvider.java b/collect_app/src/main/java/org/odk/collect/android/storage/StorageStateProvider.java\nindex 07f34a4823..f496093e8c 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/storage/StorageStateProvider.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/storage/StorageStateProvider.java\n", "chunk": "@@ -30,7 +29,7 @@ public class StorageStateProvider {\n         return Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED);\n     }\n \n-    public boolean isEnoughSpaceToPerformMigartion(StoragePathProvider storagePathProvider) {\n+    public boolean isEnoughSpaceToPerformMigration(StoragePathProvider storagePathProvider) {\n         try {\n             return getAvailableScopedStorageSize(storagePathProvider) > getOdkDirSize(storagePathProvider);\n         } catch (Exception | Error e) {\n", "next_change": {"commit": "2aec2cef76323fcadf43baad6f780922420fbea9", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/storage/StorageStateProvider.java b/collect_app/src/main/java/org/odk/collect/android/storage/StorageStateProvider.java\nindex f496093e8c..e90397053d 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/storage/StorageStateProvider.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/storage/StorageStateProvider.java\n", "chunk": "@@ -1,68 +1,21 @@\n package org.odk.collect.android.storage;\n \n import android.os.Environment;\n-import android.os.StatFs;\n \n import org.odk.collect.android.preferences.GeneralSharedPreferences;\n \n-import java.io.File;\n-\n-import timber.log.Timber;\n-\n import static org.odk.collect.android.preferences.GeneralKeys.KEY_SCOPED_STORAGE_USED;\n \n public class StorageStateProvider {\n-\n-    public boolean isScopedStorageUsed() {\n+    boolean isScopedStorageUsed() {\n         return GeneralSharedPreferences.getInstance().getBoolean(KEY_SCOPED_STORAGE_USED, false);\n     }\n \n-    public void enableUsingScopedStorage() {\n+    public void recordMigrationToScopedStorage() {\n         GeneralSharedPreferences.getInstance().save(KEY_SCOPED_STORAGE_USED, true);\n     }\n \n-    public void disableUsingScopedStorage() {\n-        GeneralSharedPreferences.getInstance().save(KEY_SCOPED_STORAGE_USED, false);\n-    }\n-\n     boolean isStorageMounted() {\n         return Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED);\n     }\n-\n-    public boolean isEnoughSpaceToPerformMigration(StoragePathProvider storagePathProvider) {\n-        try {\n-            return getAvailableScopedStorageSize(storagePathProvider) > getOdkDirSize(storagePathProvider);\n-        } catch (Exception | Error e) {\n-            Timber.w(e);\n-            return false;\n-        }\n-    }\n-\n-    private long getAvailableScopedStorageSize(StoragePathProvider storagePathProvider) {\n-        String scopedStoragePath = storagePathProvider.getScopedStorageRootDirPath();\n-        if (scopedStoragePath.isEmpty()) {\n-            return 0;\n-        }\n-\n-        StatFs stat = new StatFs(scopedStoragePath);\n-        return stat.getAvailableBlocksLong() * stat.getBlockSizeLong();\n-    }\n-\n-    private long getOdkDirSize(StoragePathProvider storagePathProvider) {\n-        return getFolderSize(new File(storagePathProvider.getUnscopedStorageRootDirPath()));\n-    }\n-\n-    private long getFolderSize(File directory) {\n-        long length = 0;\n-        if (directory != null && directory.exists()) {\n-            for (File file : directory.listFiles()) {\n-                if (file != null && file.exists()) {\n-                    length += file.isFile()\n-                            ? file.length()\n-                            : getFolderSize(file);\n-                }\n-            }\n-        }\n-        return length;\n-    }\n }\n", "next_change": {"commit": "abe7f65a4c39aa7ba2ef59da653235197104623f", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/storage/StorageStateProvider.java b/collect_app/src/main/java/org/odk/collect/android/storage/StorageStateProvider.java\nindex e90397053d..68d29eb44a 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/storage/StorageStateProvider.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/storage/StorageStateProvider.java\n", "chunk": "@@ -18,4 +24,50 @@ public class StorageStateProvider {\n     boolean isStorageMounted() {\n         return Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED);\n     }\n+\n+    public boolean isEnoughSpaceToPerformMigartion() {\n+        try {\n+            return getAvailableScopedStorageSize() > getOdkDirSize();\n+        } catch (Exception | Error e) {\n+            Timber.w(e);\n+            return false;\n+        }\n+    }\n+\n+    private long getAvailableScopedStorageSize() {\n+        String scopedStoragePath = new StoragePathProvider().getScopedExternalFilesDirPath();\n+        if (scopedStoragePath.isEmpty()) {\n+            return 0;\n+        }\n+\n+        StatFs stat = new StatFs(scopedStoragePath);\n+        long blockSize;\n+        long availableBlocks;\n+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2) {\n+            blockSize = stat.getBlockSizeLong();\n+            availableBlocks = stat.getAvailableBlocksLong();\n+        } else {\n+            blockSize = stat.getBlockSize();\n+            availableBlocks = stat.getAvailableBlocks();\n+        }\n+        return availableBlocks * blockSize;\n+    }\n+\n+    private long getOdkDirSize() {\n+        return getFolderSize(new File(new StoragePathProvider().getDirPath(StorageSubdirectory.ODK)));\n+    }\n+\n+    private long getFolderSize(File directory) {\n+        long length = 0;\n+        if (directory != null && directory.exists()) {\n+            for (File file : directory.listFiles()) {\n+                if (file != null && file.exists()) {\n+                    length += file.isFile()\n+                            ? file.length()\n+                            : getFolderSize(file);\n+                }\n+            }\n+        }\n+        return length;\n+    }\n }\n", "next_change": {"commit": "2ac1f4728dae8cd4bab72e804cc6d59982f8a5ae", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/storage/StorageStateProvider.java b/collect_app/src/main/java/org/odk/collect/android/storage/StorageStateProvider.java\nindex 68d29eb44a..e21ffbc68f 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/storage/StorageStateProvider.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/storage/StorageStateProvider.java\n", "chunk": "@@ -70,4 +74,22 @@ public class StorageStateProvider {\n         }\n         return length;\n     }\n+\n+    void clearOdkDirOnScopedStorage() {\n+        deleteDirectory(new File(new StoragePathProvider().getScopedStorageDirPath(StorageSubdirectory.ODK)));\n+    }\n+\n+    void deleteOdkDirFromUnscopedStorage() {\n+        deleteDirectory(new File(new StoragePathProvider().getUnscopedStorageDirPath(StorageSubdirectory.ODK)));\n+    }\n+\n+    private void deleteDirectory(File directoryToBeDeleted) {\n+        File[] allContents = directoryToBeDeleted.listFiles();\n+        if (allContents != null) {\n+            for (File file : allContents) {\n+                deleteDirectory(file);\n+            }\n+        }\n+        directoryToBeDeleted.delete();\n+    }\n }\n", "next_change": {"commit": "0b502d280c45aa7097bfa6941fdc5480d4af0485", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/storage/StorageStateProvider.java b/collect_app/src/main/java/org/odk/collect/android/storage/StorageStateProvider.java\nindex e21ffbc68f..5640ba7c39 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/storage/StorageStateProvider.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/storage/StorageStateProvider.java\n", "chunk": "@@ -74,22 +85,4 @@ public class StorageStateProvider {\n         }\n         return length;\n     }\n-\n-    void clearOdkDirOnScopedStorage() {\n-        deleteDirectory(new File(new StoragePathProvider().getScopedStorageDirPath(StorageSubdirectory.ODK)));\n-    }\n-\n-    void deleteOdkDirFromUnscopedStorage() {\n-        deleteDirectory(new File(new StoragePathProvider().getUnscopedStorageDirPath(StorageSubdirectory.ODK)));\n-    }\n-\n-    private void deleteDirectory(File directoryToBeDeleted) {\n-        File[] allContents = directoryToBeDeleted.listFiles();\n-        if (allContents != null) {\n-            for (File file : allContents) {\n-                deleteDirectory(file);\n-            }\n-        }\n-        directoryToBeDeleted.delete();\n-    }\n }\n", "next_change": null}]}}]}}]}}]}}]}}, {"oid": "513d3cfed7784daf868d8eac1835ac41cedf4308", "url": "https://github.com/getodk/collect/commit/513d3cfed7784daf868d8eac1835ac41cedf4308", "message": "Code improvemenets", "committedDate": "2020-02-14T10:47:04Z", "type": "forcePushed"}, {"oid": "4786e5177334eafdd28a262e5c3a236923713beb", "url": "https://github.com/getodk/collect/commit/4786e5177334eafdd28a262e5c3a236923713beb", "message": "Code improvemenets", "committedDate": "2020-02-14T10:54:45Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQ1Njk4MQ==", "url": "https://github.com/getodk/collect/pull/3623#discussion_r380456981", "body": "Interesting! Does this mean that the `getValuesFromInstanceObject` method wasn't used in that context before?", "bodyText": "Interesting! Does this mean that the getValuesFromInstanceObject method wasn't used in that context before?", "bodyHTML": "<p dir=\"auto\">Interesting! Does this mean that the <code>getValuesFromInstanceObject</code> method wasn't used in that context before?</p>", "author": "lognaturel", "createdAt": "2020-02-18T05:06:34Z", "path": "collect_app/src/main/java/org/odk/collect/android/dao/InstancesDao.java", "diffHunk": "@@ -363,9 +363,8 @@ public ContentValues getValuesFromInstanceObject(Instance instance) {\n         values.put(InstanceColumns.STATUS, instance.getStatus());\n         values.put(InstanceColumns.LAST_STATUS_CHANGE_DATE, instance.getLastStatusChangeDate());\n         values.put(InstanceColumns.DELETED_DATE, instance.getDeletedDate());\n+        values.put(InstanceColumns.GEOMETRY, instance.getGeometry());", "originalCommit": "40c0f954e3f227b5f58a28a0255f46c60b3f7d68", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDU5ODExMA==", "url": "https://github.com/getodk/collect/pull/3623#discussion_r380598110", "bodyText": "Yes it was used in some tests but didn't verify those new columns.", "author": "grzesiek2010", "createdAt": "2020-02-18T10:52:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQ1Njk4MQ=="}], "type": "inlineReview", "revised_code": {"commit": "2aec2cef76323fcadf43baad6f780922420fbea9", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/dao/InstancesDao.java b/collect_app/src/main/java/org/odk/collect/android/dao/InstancesDao.java\nindex 7c20b45ee2..3b48c42188 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/dao/InstancesDao.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/dao/InstancesDao.java\n", "chunk": "@@ -363,8 +359,9 @@ public class InstancesDao {\n         values.put(InstanceColumns.STATUS, instance.getStatus());\n         values.put(InstanceColumns.LAST_STATUS_CHANGE_DATE, instance.getLastStatusChangeDate());\n         values.put(InstanceColumns.DELETED_DATE, instance.getDeletedDate());\n-        values.put(InstanceColumns.GEOMETRY, instance.getGeometry());\n         values.put(InstanceColumns.GEOMETRY_TYPE, instance.getGeometryType());\n+        values.put(InstanceColumns.GEOMETRY_TYPE, instance.getGeometry());\n+\n         return values;\n     }\n }\n", "next_change": {"commit": "a9a837e7180f7aab93b5ee1045a2e60f8c278d8a", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/dao/InstancesDao.java b/collect_app/src/main/java/org/odk/collect/android/dao/InstancesDao.java\nindex 3b48c42188..7c20b45ee2 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/dao/InstancesDao.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/dao/InstancesDao.java\n", "chunk": "@@ -359,9 +363,8 @@ public class InstancesDao {\n         values.put(InstanceColumns.STATUS, instance.getStatus());\n         values.put(InstanceColumns.LAST_STATUS_CHANGE_DATE, instance.getLastStatusChangeDate());\n         values.put(InstanceColumns.DELETED_DATE, instance.getDeletedDate());\n+        values.put(InstanceColumns.GEOMETRY, instance.getGeometry());\n         values.put(InstanceColumns.GEOMETRY_TYPE, instance.getGeometryType());\n-        values.put(InstanceColumns.GEOMETRY_TYPE, instance.getGeometry());\n-\n         return values;\n     }\n }\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQ1NzMyMQ==", "url": "https://github.com/getodk/collect/pull/3623#discussion_r380457321", "body": "Is your thinking that this test prevents someone accidentally removing one of the db fields from the method? Is this likely? It seems like it doesn't help prevent the kind of problem we saw here -- a new db field not being represented in the method.\r\n\r\nDoes it have to be a connected test? Seems it could be Robolectric-based?", "bodyText": "Is your thinking that this test prevents someone accidentally removing one of the db fields from the method? Is this likely? It seems like it doesn't help prevent the kind of problem we saw here -- a new db field not being represented in the method.\nDoes it have to be a connected test? Seems it could be Robolectric-based?", "bodyHTML": "<p dir=\"auto\">Is your thinking that this test prevents someone accidentally removing one of the db fields from the method? Is this likely? It seems like it doesn't help prevent the kind of problem we saw here -- a new db field not being represented in the method.</p>\n<p dir=\"auto\">Does it have to be a connected test? Seems it could be Robolectric-based?</p>", "author": "lognaturel", "createdAt": "2020-02-18T05:08:24Z", "path": "collect_app/src/androidTest/java/org/odk/collect/android/dao/InstancesDaoTest.java", "diffHunk": "@@ -195,6 +196,35 @@ public void updateInstanceTest() {\n         assertThat(formWithGeopointInstance.getGeometry(), is(nullValue()));\n     }\n \n+    @Test\n+    public void getValuesFromInstanceObjectTest() {", "originalCommit": "40c0f954e3f227b5f58a28a0255f46c60b3f7d68", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3df5d35675eed9bcf9f9f09ef73a817f8a27bd8a", "changed_code": [{"header": "diff --git a/collect_app/src/androidTest/java/org/odk/collect/android/dao/InstancesDaoTest.java b/collect_app/src/androidTest/java/org/odk/collect/android/dao/InstancesDaoTest.java\nindex 2611fbf436..efa75e392e 100644\n--- a/collect_app/src/androidTest/java/org/odk/collect/android/dao/InstancesDaoTest.java\n+++ b/collect_app/src/androidTest/java/org/odk/collect/android/dao/InstancesDaoTest.java\n", "chunk": "@@ -196,35 +195,6 @@ public class InstancesDaoTest {\n         assertThat(formWithGeopointInstance.getGeometry(), is(nullValue()));\n     }\n \n-    @Test\n-    public void getValuesFromInstanceObjectTest() {\n-        ContentValues values = new InstancesDao().getValuesFromInstanceObject(new Instance.Builder()\n-                .displayName(\"Form with geopoint\")\n-                .submissionUri(\"https://fakeSubmission.com\")\n-                .canEditWhenComplete(true)\n-                .instanceFilePath(\"/my/fake/path\")\n-                .jrFormId(\"fake\")\n-                .jrVersion(\"1\")\n-                .status(InstanceProviderAPI.STATUS_SUBMITTED)\n-                .lastStatusChangeDate(1487595836793L)\n-                .deletedDate(1487695836793L)\n-                .geometry(\"{\\\"type\\\":\\\"Point\\\",\\\"coordinates\\\":[127.6, 11.1]}\")\n-                .geometryType(\"Point\")\n-                .build());\n-\n-        assertThat(values.get(InstanceColumns.DISPLAY_NAME), is(\"Form with geopoint\"));\n-        assertThat(values.get(InstanceColumns.SUBMISSION_URI), is(\"https://fakeSubmission.com\"));\n-        assertThat(values.get(InstanceColumns.CAN_EDIT_WHEN_COMPLETE), is(\"true\"));\n-        assertThat(values.get(InstanceColumns.INSTANCE_FILE_PATH), is(\"/my/fake/path\"));\n-        assertThat(values.get(InstanceColumns.JR_FORM_ID), is(\"fake\"));\n-        assertThat(values.get(InstanceColumns.JR_VERSION), is(\"1\"));\n-        assertThat(values.get(InstanceColumns.STATUS), is(InstanceProviderAPI.STATUS_SUBMITTED));\n-        assertThat(values.get(InstanceColumns.LAST_STATUS_CHANGE_DATE), is(1487595836793L));\n-        assertThat(values.get(InstanceColumns.DELETED_DATE), is(1487695836793L));\n-        assertThat(values.get(InstanceColumns.GEOMETRY), is(\"{\\\"type\\\":\\\"Point\\\",\\\"coordinates\\\":[127.6, 11.1]}\"));\n-        assertThat(values.get(InstanceColumns.GEOMETRY_TYPE), is(\"Point\"));\n-    }\n-\n     private void fillDatabase() {\n         hypertensionScreeningInstance = new Instance.Builder()\n                 .displayName(\"Hypertension Screening\")\n", "next_change": {"commit": "d4c1d90bf376d2f30ff5d5c299663f3336ca1d09", "changed_code": [{"header": "diff --git a/collect_app/src/androidTest/java/org/odk/collect/android/dao/InstancesDaoTest.java b/collect_app/src/androidTest/java/org/odk/collect/android/dao/InstancesDaoTest.java\nindex efa75e392e..2611fbf436 100644\n--- a/collect_app/src/androidTest/java/org/odk/collect/android/dao/InstancesDaoTest.java\n+++ b/collect_app/src/androidTest/java/org/odk/collect/android/dao/InstancesDaoTest.java\n", "chunk": "@@ -195,6 +196,35 @@ public class InstancesDaoTest {\n         assertThat(formWithGeopointInstance.getGeometry(), is(nullValue()));\n     }\n \n+    @Test\n+    public void getValuesFromInstanceObjectTest() {\n+        ContentValues values = new InstancesDao().getValuesFromInstanceObject(new Instance.Builder()\n+                .displayName(\"Form with geopoint\")\n+                .submissionUri(\"https://fakeSubmission.com\")\n+                .canEditWhenComplete(true)\n+                .instanceFilePath(\"/my/fake/path\")\n+                .jrFormId(\"fake\")\n+                .jrVersion(\"1\")\n+                .status(InstanceProviderAPI.STATUS_SUBMITTED)\n+                .lastStatusChangeDate(1487595836793L)\n+                .deletedDate(1487695836793L)\n+                .geometry(\"{\\\"type\\\":\\\"Point\\\",\\\"coordinates\\\":[127.6, 11.1]}\")\n+                .geometryType(\"Point\")\n+                .build());\n+\n+        assertThat(values.get(InstanceColumns.DISPLAY_NAME), is(\"Form with geopoint\"));\n+        assertThat(values.get(InstanceColumns.SUBMISSION_URI), is(\"https://fakeSubmission.com\"));\n+        assertThat(values.get(InstanceColumns.CAN_EDIT_WHEN_COMPLETE), is(\"true\"));\n+        assertThat(values.get(InstanceColumns.INSTANCE_FILE_PATH), is(\"/my/fake/path\"));\n+        assertThat(values.get(InstanceColumns.JR_FORM_ID), is(\"fake\"));\n+        assertThat(values.get(InstanceColumns.JR_VERSION), is(\"1\"));\n+        assertThat(values.get(InstanceColumns.STATUS), is(InstanceProviderAPI.STATUS_SUBMITTED));\n+        assertThat(values.get(InstanceColumns.LAST_STATUS_CHANGE_DATE), is(1487595836793L));\n+        assertThat(values.get(InstanceColumns.DELETED_DATE), is(1487695836793L));\n+        assertThat(values.get(InstanceColumns.GEOMETRY), is(\"{\\\"type\\\":\\\"Point\\\",\\\"coordinates\\\":[127.6, 11.1]}\"));\n+        assertThat(values.get(InstanceColumns.GEOMETRY_TYPE), is(\"Point\"));\n+    }\n+\n     private void fillDatabase() {\n         hypertensionScreeningInstance = new Instance.Builder()\n                 .displayName(\"Hypertension Screening\")\n", "next_change": {"commit": "2aec2cef76323fcadf43baad6f780922420fbea9", "changed_code": [{"header": "diff --git a/collect_app/src/androidTest/java/org/odk/collect/android/dao/InstancesDaoTest.java b/collect_app/src/androidTest/java/org/odk/collect/android/dao/InstancesDaoTest.java\nindex 2611fbf436..efa75e392e 100644\n--- a/collect_app/src/androidTest/java/org/odk/collect/android/dao/InstancesDaoTest.java\n+++ b/collect_app/src/androidTest/java/org/odk/collect/android/dao/InstancesDaoTest.java\n", "chunk": "@@ -196,35 +195,6 @@ public class InstancesDaoTest {\n         assertThat(formWithGeopointInstance.getGeometry(), is(nullValue()));\n     }\n \n-    @Test\n-    public void getValuesFromInstanceObjectTest() {\n-        ContentValues values = new InstancesDao().getValuesFromInstanceObject(new Instance.Builder()\n-                .displayName(\"Form with geopoint\")\n-                .submissionUri(\"https://fakeSubmission.com\")\n-                .canEditWhenComplete(true)\n-                .instanceFilePath(\"/my/fake/path\")\n-                .jrFormId(\"fake\")\n-                .jrVersion(\"1\")\n-                .status(InstanceProviderAPI.STATUS_SUBMITTED)\n-                .lastStatusChangeDate(1487595836793L)\n-                .deletedDate(1487695836793L)\n-                .geometry(\"{\\\"type\\\":\\\"Point\\\",\\\"coordinates\\\":[127.6, 11.1]}\")\n-                .geometryType(\"Point\")\n-                .build());\n-\n-        assertThat(values.get(InstanceColumns.DISPLAY_NAME), is(\"Form with geopoint\"));\n-        assertThat(values.get(InstanceColumns.SUBMISSION_URI), is(\"https://fakeSubmission.com\"));\n-        assertThat(values.get(InstanceColumns.CAN_EDIT_WHEN_COMPLETE), is(\"true\"));\n-        assertThat(values.get(InstanceColumns.INSTANCE_FILE_PATH), is(\"/my/fake/path\"));\n-        assertThat(values.get(InstanceColumns.JR_FORM_ID), is(\"fake\"));\n-        assertThat(values.get(InstanceColumns.JR_VERSION), is(\"1\"));\n-        assertThat(values.get(InstanceColumns.STATUS), is(InstanceProviderAPI.STATUS_SUBMITTED));\n-        assertThat(values.get(InstanceColumns.LAST_STATUS_CHANGE_DATE), is(1487595836793L));\n-        assertThat(values.get(InstanceColumns.DELETED_DATE), is(1487695836793L));\n-        assertThat(values.get(InstanceColumns.GEOMETRY), is(\"{\\\"type\\\":\\\"Point\\\",\\\"coordinates\\\":[127.6, 11.1]}\"));\n-        assertThat(values.get(InstanceColumns.GEOMETRY_TYPE), is(\"Point\"));\n-    }\n-\n     private void fillDatabase() {\n         hypertensionScreeningInstance = new Instance.Builder()\n                 .displayName(\"Hypertension Screening\")\n", "next_change": {"commit": "a9a837e7180f7aab93b5ee1045a2e60f8c278d8a", "changed_code": [{"header": "diff --git a/collect_app/src/androidTest/java/org/odk/collect/android/dao/InstancesDaoTest.java b/collect_app/src/androidTest/java/org/odk/collect/android/dao/InstancesDaoTest.java\nindex efa75e392e..2611fbf436 100644\n--- a/collect_app/src/androidTest/java/org/odk/collect/android/dao/InstancesDaoTest.java\n+++ b/collect_app/src/androidTest/java/org/odk/collect/android/dao/InstancesDaoTest.java\n", "chunk": "@@ -195,6 +196,35 @@ public class InstancesDaoTest {\n         assertThat(formWithGeopointInstance.getGeometry(), is(nullValue()));\n     }\n \n+    @Test\n+    public void getValuesFromInstanceObjectTest() {\n+        ContentValues values = new InstancesDao().getValuesFromInstanceObject(new Instance.Builder()\n+                .displayName(\"Form with geopoint\")\n+                .submissionUri(\"https://fakeSubmission.com\")\n+                .canEditWhenComplete(true)\n+                .instanceFilePath(\"/my/fake/path\")\n+                .jrFormId(\"fake\")\n+                .jrVersion(\"1\")\n+                .status(InstanceProviderAPI.STATUS_SUBMITTED)\n+                .lastStatusChangeDate(1487595836793L)\n+                .deletedDate(1487695836793L)\n+                .geometry(\"{\\\"type\\\":\\\"Point\\\",\\\"coordinates\\\":[127.6, 11.1]}\")\n+                .geometryType(\"Point\")\n+                .build());\n+\n+        assertThat(values.get(InstanceColumns.DISPLAY_NAME), is(\"Form with geopoint\"));\n+        assertThat(values.get(InstanceColumns.SUBMISSION_URI), is(\"https://fakeSubmission.com\"));\n+        assertThat(values.get(InstanceColumns.CAN_EDIT_WHEN_COMPLETE), is(\"true\"));\n+        assertThat(values.get(InstanceColumns.INSTANCE_FILE_PATH), is(\"/my/fake/path\"));\n+        assertThat(values.get(InstanceColumns.JR_FORM_ID), is(\"fake\"));\n+        assertThat(values.get(InstanceColumns.JR_VERSION), is(\"1\"));\n+        assertThat(values.get(InstanceColumns.STATUS), is(InstanceProviderAPI.STATUS_SUBMITTED));\n+        assertThat(values.get(InstanceColumns.LAST_STATUS_CHANGE_DATE), is(1487595836793L));\n+        assertThat(values.get(InstanceColumns.DELETED_DATE), is(1487695836793L));\n+        assertThat(values.get(InstanceColumns.GEOMETRY), is(\"{\\\"type\\\":\\\"Point\\\",\\\"coordinates\\\":[127.6, 11.1]}\"));\n+        assertThat(values.get(InstanceColumns.GEOMETRY_TYPE), is(\"Point\"));\n+    }\n+\n     private void fillDatabase() {\n         hypertensionScreeningInstance = new Instance.Builder()\n                 .displayName(\"Hypertension Screening\")\n", "next_change": null}]}}]}}]}}]}}, {"oid": "d4c1d90bf376d2f30ff5d5c299663f3336ca1d09", "url": "https://github.com/getodk/collect/commit/d4c1d90bf376d2f30ff5d5c299663f3336ca1d09", "message": "Use the banner to display migration results", "committedDate": "2020-02-18T10:58:29Z", "type": "forcePushed"}, {"oid": "a194594b3806c96cce6c5f2ddf456a6343a9512f", "url": "https://github.com/getodk/collect/commit/a194594b3806c96cce6c5f2ddf456a6343a9512f", "message": "Use the banner to display migration results", "committedDate": "2020-02-18T11:09:28Z", "type": "forcePushed"}, {"oid": "d2373fd5376e36350669a17d2d78760edac60da7", "url": "https://github.com/getodk/collect/commit/d2373fd5376e36350669a17d2d78760edac60da7", "message": "Fixed buttons visiblility in the banner", "committedDate": "2020-02-19T23:46:08Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQ3MDYzOQ==", "url": "https://github.com/getodk/collect/pull/3623#discussion_r381470639", "body": "Do you really need this? Like the failure message, the success message feels transient. So I think it's good for it to keep existing while someone is in a single \"app session\" but I don't think it still needs to be shown if the user closes and then reopens the app. That is, Collect going out of memory would implicitly dismiss the dialog.", "bodyText": "Do you really need this? Like the failure message, the success message feels transient. So I think it's good for it to keep existing while someone is in a single \"app session\" but I don't think it still needs to be shown if the user closes and then reopens the app. That is, Collect going out of memory would implicitly dismiss the dialog.", "bodyHTML": "<p dir=\"auto\">Do you really need this? Like the failure message, the success message feels transient. So I think it's good for it to keep existing while someone is in a single \"app session\" but I don't think it still needs to be shown if the user closes and then reopens the app. That is, Collect going out of memory would implicitly dismiss the dialog.</p>", "author": "lognaturel", "createdAt": "2020-02-19T18:43:30Z", "path": "collect_app/src/main/java/org/odk/collect/android/preferences/GeneralKeys.java", "diffHunk": "@@ -146,7 +148,8 @@\n             KEY_METADATA_MIGRATED,\n             KEY_AUTOSEND_WIFI,\n             KEY_AUTOSEND_NETWORK,\n-            KEY_SCOPED_STORAGE_USED\n+            KEY_SCOPED_STORAGE_USED,\n+            KEY_SCOPED_STORAGE_BANNER_DISMISSED", "originalCommit": "10bb88dd0de5ca6558cd746cd054fb9b28e61b53", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTk4NzQ2OQ==", "url": "https://github.com/getodk/collect/pull/3623#discussion_r381987469", "bodyText": "Fixed.", "author": "grzesiek2010", "createdAt": "2020-02-20T13:09:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQ3MDYzOQ=="}], "type": "inlineReview", "revised_code": {"commit": "e8c792063a9b0c171775e5e8e5f6ec1d6e0c392e", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/preferences/GeneralKeys.java b/collect_app/src/main/java/org/odk/collect/android/preferences/GeneralKeys.java\nindex 3f6b7f54ff..2c1e3f4101 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/preferences/GeneralKeys.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/preferences/GeneralKeys.java\n", "chunk": "@@ -148,11 +148,10 @@ public final class GeneralKeys {\n             KEY_METADATA_MIGRATED,\n             KEY_AUTOSEND_WIFI,\n             KEY_AUTOSEND_NETWORK,\n-            KEY_SCOPED_STORAGE_USED,\n-            KEY_SCOPED_STORAGE_BANNER_DISMISSED\n+            KEY_SCOPED_STORAGE_USED\n     );\n \n-    public static final HashMap<String, Object> GENERAL_KEYS = getHashMap();\n+    public static final HashMap<String, Object> DEFAULTS = getHashMap();\n \n     private GeneralKeys() {\n \n", "next_change": {"commit": "d2373fd5376e36350669a17d2d78760edac60da7", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/preferences/GeneralKeys.java b/collect_app/src/main/java/org/odk/collect/android/preferences/GeneralKeys.java\nindex 2c1e3f4101..3f6b7f54ff 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/preferences/GeneralKeys.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/preferences/GeneralKeys.java\n", "chunk": "@@ -148,10 +148,11 @@ public final class GeneralKeys {\n             KEY_METADATA_MIGRATED,\n             KEY_AUTOSEND_WIFI,\n             KEY_AUTOSEND_NETWORK,\n-            KEY_SCOPED_STORAGE_USED\n+            KEY_SCOPED_STORAGE_USED,\n+            KEY_SCOPED_STORAGE_BANNER_DISMISSED\n     );\n \n-    public static final HashMap<String, Object> DEFAULTS = getHashMap();\n+    public static final HashMap<String, Object> GENERAL_KEYS = getHashMap();\n \n     private GeneralKeys() {\n \n", "next_change": {"commit": "ff46be76e57131f524b0dbf3085856b6671235e5", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/preferences/GeneralKeys.java b/collect_app/src/main/java/org/odk/collect/android/preferences/GeneralKeys.java\nindex 3f6b7f54ff..d0c975ca6c 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/preferences/GeneralKeys.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/preferences/GeneralKeys.java\n", "chunk": "@@ -148,8 +147,7 @@ public final class GeneralKeys {\n             KEY_METADATA_MIGRATED,\n             KEY_AUTOSEND_WIFI,\n             KEY_AUTOSEND_NETWORK,\n-            KEY_SCOPED_STORAGE_USED,\n-            KEY_SCOPED_STORAGE_BANNER_DISMISSED\n+            KEY_SCOPED_STORAGE_USED\n     );\n \n     public static final HashMap<String, Object> GENERAL_KEYS = getHashMap();\n", "next_change": {"commit": "2aec2cef76323fcadf43baad6f780922420fbea9", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/preferences/GeneralKeys.java b/collect_app/src/main/java/org/odk/collect/android/preferences/GeneralKeys.java\nindex d0c975ca6c..3ed5f4014b 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/preferences/GeneralKeys.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/preferences/GeneralKeys.java\n", "chunk": "@@ -150,7 +150,7 @@ public final class GeneralKeys {\n             KEY_SCOPED_STORAGE_USED\n     );\n \n-    public static final HashMap<String, Object> GENERAL_KEYS = getHashMap();\n+    public static final HashMap<String, Object> DEFAULTS = getHashMap();\n \n     private GeneralKeys() {\n \n", "next_change": {"commit": "37c513832f5d6d4afdc3f2d25b44d342a128014b", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/preferences/GeneralKeys.java b/collect_app/src/main/java/org/odk/collect/android/preferences/GeneralKeys.java\nindex 3ed5f4014b..172467b99b 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/preferences/GeneralKeys.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/preferences/GeneralKeys.java\n", "chunk": "@@ -147,7 +151,9 @@ public final class GeneralKeys {\n             KEY_METADATA_MIGRATED,\n             KEY_AUTOSEND_WIFI,\n             KEY_AUTOSEND_NETWORK,\n-            KEY_SCOPED_STORAGE_USED\n+            KEY_SCOPED_STORAGE_USED,\n+            KEY_SCOPED_STORAGE_BANNER_DISMISSED,\n+            KEY_SCOPED_STORAGE_MIGRATION_RESULT\n     );\n \n     public static final HashMap<String, Object> DEFAULTS = getHashMap();\n", "next_change": {"commit": "f7ab62544dfda115e4a1e9bf0e2f6fdc3b3030f6", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/preferences/GeneralKeys.java b/collect_app/src/main/java/org/odk/collect/android/preferences/GeneralKeys.java\nindex 172467b99b..1ff88427f4 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/preferences/GeneralKeys.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/preferences/GeneralKeys.java\n", "chunk": "@@ -152,8 +150,7 @@ public final class GeneralKeys {\n             KEY_AUTOSEND_WIFI,\n             KEY_AUTOSEND_NETWORK,\n             KEY_SCOPED_STORAGE_USED,\n-            KEY_SCOPED_STORAGE_BANNER_DISMISSED,\n-            KEY_SCOPED_STORAGE_MIGRATION_RESULT\n+            KEY_SCOPED_STORAGE_BANNER_DISMISSED\n     );\n \n     public static final HashMap<String, Object> DEFAULTS = getHashMap();\n", "next_change": {"commit": "5fd161fa4c7139e1f2ff66db5893fdb887bee5f4", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/preferences/GeneralKeys.java b/collect_app/src/main/java/org/odk/collect/android/preferences/GeneralKeys.java\nindex 1ff88427f4..2c1e3f4101 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/preferences/GeneralKeys.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/preferences/GeneralKeys.java\n", "chunk": "@@ -149,8 +148,7 @@ public final class GeneralKeys {\n             KEY_METADATA_MIGRATED,\n             KEY_AUTOSEND_WIFI,\n             KEY_AUTOSEND_NETWORK,\n-            KEY_SCOPED_STORAGE_USED,\n-            KEY_SCOPED_STORAGE_BANNER_DISMISSED\n+            KEY_SCOPED_STORAGE_USED\n     );\n \n     public static final HashMap<String, Object> DEFAULTS = getHashMap();\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQ3MzU1NQ==", "url": "https://github.com/getodk/collect/pull/3623#discussion_r381473555", "body": "I think you can pre-emptively go ahead and remove this one since we're sure we're changing the minSdk in this release.", "bodyText": "I think you can pre-emptively go ahead and remove this one since we're sure we're changing the minSdk in this release.", "bodyHTML": "<p dir=\"auto\">I think you can pre-emptively go ahead and remove this one since we're sure we're changing the minSdk in this release.</p>", "author": "lognaturel", "createdAt": "2020-02-19T18:48:55Z", "path": "collect_app/src/main/java/org/odk/collect/android/storage/StorageStateProvider.java", "diffHunk": "@@ -1,21 +1,78 @@\n package org.odk.collect.android.storage;\n \n+import android.os.Build;\n import android.os.Environment;\n+import android.os.StatFs;\n \n import org.odk.collect.android.preferences.GeneralSharedPreferences;\n \n+import java.io.File;\n+\n+import timber.log.Timber;\n+\n import static org.odk.collect.android.preferences.GeneralKeys.KEY_SCOPED_STORAGE_USED;\n \n public class StorageStateProvider {\n-    boolean isScopedStorageUsed() {\n+\n+    public boolean isScopedStorageUsed() {\n         return GeneralSharedPreferences.getInstance().getBoolean(KEY_SCOPED_STORAGE_USED, false);\n     }\n \n-    public void recordMigrationToScopedStorage() {\n+    public void enableUsingScopedStorage() {\n         GeneralSharedPreferences.getInstance().save(KEY_SCOPED_STORAGE_USED, true);\n     }\n \n+    public void disableUsingScopedStorage() {\n+        GeneralSharedPreferences.getInstance().save(KEY_SCOPED_STORAGE_USED, false);\n+    }\n+\n     boolean isStorageMounted() {\n         return Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED);\n     }\n+\n+    public boolean isEnoughSpaceToPerformMigration(StoragePathProvider storagePathProvider) {\n+        try {\n+            return getAvailableScopedStorageSize(storagePathProvider) > getOdkDirSize(storagePathProvider);\n+        } catch (Exception | Error e) {\n+            Timber.w(e);\n+            return false;\n+        }\n+    }\n+\n+    private long getAvailableScopedStorageSize(StoragePathProvider storagePathProvider) {\n+        String scopedStoragePath = storagePathProvider.getScopedExternalFilesDirPath();\n+        if (scopedStoragePath.isEmpty()) {\n+            return 0;\n+        }\n+\n+        StatFs stat = new StatFs(scopedStoragePath);\n+        long blockSize;\n+        long availableBlocks;\n+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2) {", "originalCommit": "10bb88dd0de5ca6558cd746cd054fb9b28e61b53", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTkyMzQ2MQ==", "url": "https://github.com/getodk/collect/pull/3623#discussion_r381923461", "bodyText": "Done.", "author": "grzesiek2010", "createdAt": "2020-02-20T10:50:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQ3MzU1NQ=="}], "type": "inlineReview", "revised_code": {"commit": "e8c792063a9b0c171775e5e8e5f6ec1d6e0c392e", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/storage/StorageStateProvider.java b/collect_app/src/main/java/org/odk/collect/android/storage/StorageStateProvider.java\nindex 9320622903..f496093e8c 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/storage/StorageStateProvider.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/storage/StorageStateProvider.java\n", "chunk": "@@ -40,26 +39,17 @@ public class StorageStateProvider {\n     }\n \n     private long getAvailableScopedStorageSize(StoragePathProvider storagePathProvider) {\n-        String scopedStoragePath = storagePathProvider.getScopedExternalFilesDirPath();\n+        String scopedStoragePath = storagePathProvider.getScopedStorageRootDirPath();\n         if (scopedStoragePath.isEmpty()) {\n             return 0;\n         }\n \n         StatFs stat = new StatFs(scopedStoragePath);\n-        long blockSize;\n-        long availableBlocks;\n-        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2) {\n-            blockSize = stat.getBlockSizeLong();\n-            availableBlocks = stat.getAvailableBlocksLong();\n-        } else {\n-            blockSize = stat.getBlockSize();\n-            availableBlocks = stat.getAvailableBlocks();\n-        }\n-        return availableBlocks * blockSize;\n+        return stat.getAvailableBlocksLong() * stat.getBlockSizeLong();\n     }\n \n     private long getOdkDirSize(StoragePathProvider storagePathProvider) {\n-        return getFolderSize(new File(storagePathProvider.getDirPath(StorageSubdirectory.ODK)));\n+        return getFolderSize(new File(storagePathProvider.getUnscopedStorageRootDirPath()));\n     }\n \n     private long getFolderSize(File directory) {\n", "next_change": {"commit": "ea71d20a2c26a592559e7c10b91a90a008af9f0e", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/storage/StorageStateProvider.java b/collect_app/src/main/java/org/odk/collect/android/storage/StorageStateProvider.java\nindex f496093e8..c64c775b0 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/storage/StorageStateProvider.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/storage/StorageStateProvider.java\n", "chunk": "@@ -45,7 +46,10 @@ public class StorageStateProvider {\n         }\n \n         StatFs stat = new StatFs(scopedStoragePath);\n-        return stat.getAvailableBlocksLong() * stat.getBlockSizeLong();\n+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2) {\n+            return stat.getAvailableBlocksLong() * stat.getBlockSizeLong();\n+        }\n+        return 0;\n     }\n \n     private long getOdkDirSize(StoragePathProvider storagePathProvider) {\n", "next_change": {"commit": "9c0949e42542d0000b93e621ba462044007a808b", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/storage/StorageStateProvider.java b/collect_app/src/main/java/org/odk/collect/android/storage/StorageStateProvider.java\nindex c64c775b01..f496093e8c 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/storage/StorageStateProvider.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/storage/StorageStateProvider.java\n", "chunk": "@@ -46,10 +45,7 @@ public class StorageStateProvider {\n         }\n \n         StatFs stat = new StatFs(scopedStoragePath);\n-        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2) {\n-            return stat.getAvailableBlocksLong() * stat.getBlockSizeLong();\n-        }\n-        return 0;\n+        return stat.getAvailableBlocksLong() * stat.getBlockSizeLong();\n     }\n \n     private long getOdkDirSize(StoragePathProvider storagePathProvider) {\n", "next_change": {"commit": "d2373fd5376e36350669a17d2d78760edac60da7", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/storage/StorageStateProvider.java b/collect_app/src/main/java/org/odk/collect/android/storage/StorageStateProvider.java\nindex f496093e8c..9320622903 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/storage/StorageStateProvider.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/storage/StorageStateProvider.java\n", "chunk": "@@ -39,17 +40,26 @@ public class StorageStateProvider {\n     }\n \n     private long getAvailableScopedStorageSize(StoragePathProvider storagePathProvider) {\n-        String scopedStoragePath = storagePathProvider.getScopedStorageRootDirPath();\n+        String scopedStoragePath = storagePathProvider.getScopedExternalFilesDirPath();\n         if (scopedStoragePath.isEmpty()) {\n             return 0;\n         }\n \n         StatFs stat = new StatFs(scopedStoragePath);\n-        return stat.getAvailableBlocksLong() * stat.getBlockSizeLong();\n+        long blockSize;\n+        long availableBlocks;\n+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2) {\n+            blockSize = stat.getBlockSizeLong();\n+            availableBlocks = stat.getAvailableBlocksLong();\n+        } else {\n+            blockSize = stat.getBlockSize();\n+            availableBlocks = stat.getAvailableBlocks();\n+        }\n+        return availableBlocks * blockSize;\n     }\n \n     private long getOdkDirSize(StoragePathProvider storagePathProvider) {\n-        return getFolderSize(new File(storagePathProvider.getUnscopedStorageRootDirPath()));\n+        return getFolderSize(new File(storagePathProvider.getDirPath(StorageSubdirectory.ODK)));\n     }\n \n     private long getFolderSize(File directory) {\n", "next_change": {"commit": "ff46be76e57131f524b0dbf3085856b6671235e5", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/storage/StorageStateProvider.java b/collect_app/src/main/java/org/odk/collect/android/storage/StorageStateProvider.java\nindex 9320622903..f496093e8c 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/storage/StorageStateProvider.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/storage/StorageStateProvider.java\n", "chunk": "@@ -40,26 +39,17 @@ public class StorageStateProvider {\n     }\n \n     private long getAvailableScopedStorageSize(StoragePathProvider storagePathProvider) {\n-        String scopedStoragePath = storagePathProvider.getScopedExternalFilesDirPath();\n+        String scopedStoragePath = storagePathProvider.getScopedStorageRootDirPath();\n         if (scopedStoragePath.isEmpty()) {\n             return 0;\n         }\n \n         StatFs stat = new StatFs(scopedStoragePath);\n-        long blockSize;\n-        long availableBlocks;\n-        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2) {\n-            blockSize = stat.getBlockSizeLong();\n-            availableBlocks = stat.getAvailableBlocksLong();\n-        } else {\n-            blockSize = stat.getBlockSize();\n-            availableBlocks = stat.getAvailableBlocks();\n-        }\n-        return availableBlocks * blockSize;\n+        return stat.getAvailableBlocksLong() * stat.getBlockSizeLong();\n     }\n \n     private long getOdkDirSize(StoragePathProvider storagePathProvider) {\n-        return getFolderSize(new File(storagePathProvider.getDirPath(StorageSubdirectory.ODK)));\n+        return getFolderSize(new File(storagePathProvider.getUnscopedStorageRootDirPath()));\n     }\n \n     private long getFolderSize(File directory) {\n", "next_change": {"commit": "fcc9ce6601e956bffc3ee3a5266260461835dbc5", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/storage/StorageStateProvider.java b/collect_app/src/main/java/org/odk/collect/android/storage/StorageStateProvider.java\nindex f496093e8c..c64c775b01 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/storage/StorageStateProvider.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/storage/StorageStateProvider.java\n", "chunk": "@@ -45,7 +46,10 @@ public class StorageStateProvider {\n         }\n \n         StatFs stat = new StatFs(scopedStoragePath);\n-        return stat.getAvailableBlocksLong() * stat.getBlockSizeLong();\n+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2) {\n+            return stat.getAvailableBlocksLong() * stat.getBlockSizeLong();\n+        }\n+        return 0;\n     }\n \n     private long getOdkDirSize(StoragePathProvider storagePathProvider) {\n", "next_change": {"commit": "b6ffab9b386f928f5c0b0c64b2b3440bb3388d21", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/storage/StorageStateProvider.java b/collect_app/src/main/java/org/odk/collect/android/storage/StorageStateProvider.java\nindex c64c775b01..f496093e8c 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/storage/StorageStateProvider.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/storage/StorageStateProvider.java\n", "chunk": "@@ -46,10 +45,7 @@ public class StorageStateProvider {\n         }\n \n         StatFs stat = new StatFs(scopedStoragePath);\n-        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2) {\n-            return stat.getAvailableBlocksLong() * stat.getBlockSizeLong();\n-        }\n-        return 0;\n+        return stat.getAvailableBlocksLong() * stat.getBlockSizeLong();\n     }\n \n     private long getOdkDirSize(StoragePathProvider storagePathProvider) {\n", "next_change": {"commit": "5443cc29f39e742181db5c4820b0b758efdb42e1", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/storage/StorageStateProvider.java b/collect_app/src/main/java/org/odk/collect/android/storage/StorageStateProvider.java\nindex f496093e8c..c64c775b01 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/storage/StorageStateProvider.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/storage/StorageStateProvider.java\n", "chunk": "@@ -45,7 +46,10 @@ public class StorageStateProvider {\n         }\n \n         StatFs stat = new StatFs(scopedStoragePath);\n-        return stat.getAvailableBlocksLong() * stat.getBlockSizeLong();\n+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2) {\n+            return stat.getAvailableBlocksLong() * stat.getBlockSizeLong();\n+        }\n+        return 0;\n     }\n \n     private long getOdkDirSize(StoragePathProvider storagePathProvider) {\n", "next_change": {"commit": "2aec2cef76323fcadf43baad6f780922420fbea9", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/storage/StorageStateProvider.java b/collect_app/src/main/java/org/odk/collect/android/storage/StorageStateProvider.java\nindex c64c775b01..e90397053d 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/storage/StorageStateProvider.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/storage/StorageStateProvider.java\n", "chunk": "@@ -1,72 +1,21 @@\n package org.odk.collect.android.storage;\n \n-import android.os.Build;\n import android.os.Environment;\n-import android.os.StatFs;\n \n import org.odk.collect.android.preferences.GeneralSharedPreferences;\n \n-import java.io.File;\n-\n-import timber.log.Timber;\n-\n import static org.odk.collect.android.preferences.GeneralKeys.KEY_SCOPED_STORAGE_USED;\n \n public class StorageStateProvider {\n-\n-    public boolean isScopedStorageUsed() {\n+    boolean isScopedStorageUsed() {\n         return GeneralSharedPreferences.getInstance().getBoolean(KEY_SCOPED_STORAGE_USED, false);\n     }\n \n-    public void enableUsingScopedStorage() {\n+    public void recordMigrationToScopedStorage() {\n         GeneralSharedPreferences.getInstance().save(KEY_SCOPED_STORAGE_USED, true);\n     }\n \n-    public void disableUsingScopedStorage() {\n-        GeneralSharedPreferences.getInstance().save(KEY_SCOPED_STORAGE_USED, false);\n-    }\n-\n     boolean isStorageMounted() {\n         return Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED);\n     }\n-\n-    public boolean isEnoughSpaceToPerformMigration(StoragePathProvider storagePathProvider) {\n-        try {\n-            return getAvailableScopedStorageSize(storagePathProvider) > getOdkDirSize(storagePathProvider);\n-        } catch (Exception | Error e) {\n-            Timber.w(e);\n-            return false;\n-        }\n-    }\n-\n-    private long getAvailableScopedStorageSize(StoragePathProvider storagePathProvider) {\n-        String scopedStoragePath = storagePathProvider.getScopedStorageRootDirPath();\n-        if (scopedStoragePath.isEmpty()) {\n-            return 0;\n-        }\n-\n-        StatFs stat = new StatFs(scopedStoragePath);\n-        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2) {\n-            return stat.getAvailableBlocksLong() * stat.getBlockSizeLong();\n-        }\n-        return 0;\n-    }\n-\n-    private long getOdkDirSize(StoragePathProvider storagePathProvider) {\n-        return getFolderSize(new File(storagePathProvider.getUnscopedStorageRootDirPath()));\n-    }\n-\n-    private long getFolderSize(File directory) {\n-        long length = 0;\n-        if (directory != null && directory.exists()) {\n-            for (File file : directory.listFiles()) {\n-                if (file != null && file.exists()) {\n-                    length += file.isFile()\n-                            ? file.length()\n-                            : getFolderSize(file);\n-                }\n-            }\n-        }\n-        return length;\n-    }\n }\n", "next_change": {"commit": "abe7f65a4c39aa7ba2ef59da653235197104623f", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/storage/StorageStateProvider.java b/collect_app/src/main/java/org/odk/collect/android/storage/StorageStateProvider.java\nindex e90397053d..68d29eb44a 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/storage/StorageStateProvider.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/storage/StorageStateProvider.java\n", "chunk": "@@ -18,4 +24,50 @@ public class StorageStateProvider {\n     boolean isStorageMounted() {\n         return Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED);\n     }\n+\n+    public boolean isEnoughSpaceToPerformMigartion() {\n+        try {\n+            return getAvailableScopedStorageSize() > getOdkDirSize();\n+        } catch (Exception | Error e) {\n+            Timber.w(e);\n+            return false;\n+        }\n+    }\n+\n+    private long getAvailableScopedStorageSize() {\n+        String scopedStoragePath = new StoragePathProvider().getScopedExternalFilesDirPath();\n+        if (scopedStoragePath.isEmpty()) {\n+            return 0;\n+        }\n+\n+        StatFs stat = new StatFs(scopedStoragePath);\n+        long blockSize;\n+        long availableBlocks;\n+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2) {\n+            blockSize = stat.getBlockSizeLong();\n+            availableBlocks = stat.getAvailableBlocksLong();\n+        } else {\n+            blockSize = stat.getBlockSize();\n+            availableBlocks = stat.getAvailableBlocks();\n+        }\n+        return availableBlocks * blockSize;\n+    }\n+\n+    private long getOdkDirSize() {\n+        return getFolderSize(new File(new StoragePathProvider().getDirPath(StorageSubdirectory.ODK)));\n+    }\n+\n+    private long getFolderSize(File directory) {\n+        long length = 0;\n+        if (directory != null && directory.exists()) {\n+            for (File file : directory.listFiles()) {\n+                if (file != null && file.exists()) {\n+                    length += file.isFile()\n+                            ? file.length()\n+                            : getFolderSize(file);\n+                }\n+            }\n+        }\n+        return length;\n+    }\n }\n", "next_change": {"commit": "2ac1f4728dae8cd4bab72e804cc6d59982f8a5ae", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/storage/StorageStateProvider.java b/collect_app/src/main/java/org/odk/collect/android/storage/StorageStateProvider.java\nindex 68d29eb44a..e21ffbc68f 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/storage/StorageStateProvider.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/storage/StorageStateProvider.java\n", "chunk": "@@ -70,4 +74,22 @@ public class StorageStateProvider {\n         }\n         return length;\n     }\n+\n+    void clearOdkDirOnScopedStorage() {\n+        deleteDirectory(new File(new StoragePathProvider().getScopedStorageDirPath(StorageSubdirectory.ODK)));\n+    }\n+\n+    void deleteOdkDirFromUnscopedStorage() {\n+        deleteDirectory(new File(new StoragePathProvider().getUnscopedStorageDirPath(StorageSubdirectory.ODK)));\n+    }\n+\n+    private void deleteDirectory(File directoryToBeDeleted) {\n+        File[] allContents = directoryToBeDeleted.listFiles();\n+        if (allContents != null) {\n+            for (File file : allContents) {\n+                deleteDirectory(file);\n+            }\n+        }\n+        directoryToBeDeleted.delete();\n+    }\n }\n", "next_change": {"commit": "0b502d280c45aa7097bfa6941fdc5480d4af0485", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/storage/StorageStateProvider.java b/collect_app/src/main/java/org/odk/collect/android/storage/StorageStateProvider.java\nindex e21ffbc68f..5640ba7c39 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/storage/StorageStateProvider.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/storage/StorageStateProvider.java\n", "chunk": "@@ -74,22 +85,4 @@ public class StorageStateProvider {\n         }\n         return length;\n     }\n-\n-    void clearOdkDirOnScopedStorage() {\n-        deleteDirectory(new File(new StoragePathProvider().getScopedStorageDirPath(StorageSubdirectory.ODK)));\n-    }\n-\n-    void deleteOdkDirFromUnscopedStorage() {\n-        deleteDirectory(new File(new StoragePathProvider().getUnscopedStorageDirPath(StorageSubdirectory.ODK)));\n-    }\n-\n-    private void deleteDirectory(File directoryToBeDeleted) {\n-        File[] allContents = directoryToBeDeleted.listFiles();\n-        if (allContents != null) {\n-            for (File file : allContents) {\n-                deleteDirectory(file);\n-            }\n-        }\n-        directoryToBeDeleted.delete();\n-    }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQ3NDM0OA==", "url": "https://github.com/getodk/collect/pull/3623#discussion_r381474348", "body": "I think we'll introduce a more user-facing post but this is a great placeholder for now.", "bodyText": "I think we'll introduce a more user-facing post but this is a great placeholder for now.", "bodyHTML": "<p dir=\"auto\">I think we'll introduce a more user-facing post but this is a great placeholder for now.</p>", "author": "lognaturel", "createdAt": "2020-02-19T18:50:23Z", "path": "collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationDialog.java", "diffHunk": "@@ -0,0 +1,128 @@\n+package org.odk.collect.android.storage.migration;\n+\n+import android.app.Activity;\n+import android.content.Intent;\n+import android.os.Bundle;\n+import android.view.LayoutInflater;\n+import android.view.View;\n+import android.view.ViewGroup;\n+import android.widget.Button;\n+import android.widget.LinearLayout;\n+import android.widget.TextView;\n+\n+import org.jetbrains.annotations.NotNull;\n+import org.odk.collect.android.R;\n+import org.odk.collect.android.activities.WebViewActivity;\n+import org.odk.collect.android.material.MaterialFullScreenDialogFragment;\n+\n+import butterknife.BindView;\n+import butterknife.ButterKnife;\n+\n+public class StorageMigrationDialog extends MaterialFullScreenDialogFragment {\n+\n+    private final int unsentInstancesNumber;\n+\n+    @BindView(R.id.cancelButton)\n+    Button cancelButton;\n+\n+    @BindView(R.id.migrateButton)\n+    Button migrateButton;\n+\n+    @BindView(R.id.messageText1)\n+    TextView messageText1;\n+\n+    @BindView(R.id.messageText2)\n+    TextView messageText2;\n+\n+    @BindView(R.id.messageText3)\n+    TextView messageText3;\n+\n+    @BindView(R.id.moreDetailsButton)\n+    TextView moreDetailsButton;\n+\n+    @BindView(R.id.progressBar)\n+    LinearLayout progressBar;\n+\n+    public static StorageMigrationDialog create(int unsentInstances) {\n+        return new StorageMigrationDialog(unsentInstances);\n+    }\n+\n+    private StorageMigrationDialog(int unsentInstancesNumber) {\n+        this.unsentInstancesNumber = unsentInstancesNumber;\n+    }\n+\n+    @Override\n+    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n+        return inflater.inflate(R.layout.storage_migration_dialog, container, false);\n+    }\n+\n+    @Override\n+    public void onViewCreated(@NotNull View view, Bundle savedInstanceState) {\n+        super.onViewCreated(view, savedInstanceState);\n+        ButterKnife.bind(this, view);\n+\n+        setUpToolbar();\n+        setUpMessageAboutUnsetSubmissions();\n+\n+        moreDetailsButton.setOnClickListener(view1 -> showMoreDetails());\n+        cancelButton.setOnClickListener(v -> dismiss());\n+        migrateButton.setOnClickListener(v -> {\n+            disableDialog();\n+            showProgressBar();\n+            startStorageMigrationService();\n+        });\n+    }\n+\n+    @Override\n+    protected void onCloseClicked() {\n+    }\n+\n+    @Override\n+    protected void onBackPressed() {\n+    }\n+\n+    private void setUpToolbar() {\n+        getToolbar().setTitle(R.string.storage_migration_dialog_title);\n+        getToolbar().setNavigationIcon(null);\n+    }\n+\n+    private void setUpMessageAboutUnsetSubmissions() {\n+        if (unsentInstancesNumber > 0) {\n+            messageText2.setVisibility(View.VISIBLE);\n+            messageText2.setText(getString(R.string.storage_migration_dialog_message2, unsentInstancesNumber));\n+        }\n+    }\n+\n+    private void showMoreDetails() {\n+        Intent intent = new Intent(getContext(), WebViewActivity.class);\n+        intent.putExtra(\"url\", \"https://forum.opendatakit.org/t/24159\");", "originalCommit": "10bb88dd0de5ca6558cd746cd054fb9b28e61b53", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2aec2cef76323fcadf43baad6f780922420fbea9", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationDialog.java b/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationDialog.java\ndeleted file mode 100644\nindex b6a391b595..0000000000\n--- a/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationDialog.java\n+++ /dev/null\n", "chunk": "@@ -1,128 +0,0 @@\n-package org.odk.collect.android.storage.migration;\n-\n-import android.app.Activity;\n-import android.content.Intent;\n-import android.os.Bundle;\n-import android.view.LayoutInflater;\n-import android.view.View;\n-import android.view.ViewGroup;\n-import android.widget.Button;\n-import android.widget.LinearLayout;\n-import android.widget.TextView;\n-\n-import org.jetbrains.annotations.NotNull;\n-import org.odk.collect.android.R;\n-import org.odk.collect.android.activities.WebViewActivity;\n-import org.odk.collect.android.material.MaterialFullScreenDialogFragment;\n-\n-import butterknife.BindView;\n-import butterknife.ButterKnife;\n-\n-public class StorageMigrationDialog extends MaterialFullScreenDialogFragment {\n-\n-    private final int unsentInstancesNumber;\n-\n-    @BindView(R.id.cancelButton)\n-    Button cancelButton;\n-\n-    @BindView(R.id.migrateButton)\n-    Button migrateButton;\n-\n-    @BindView(R.id.messageText1)\n-    TextView messageText1;\n-\n-    @BindView(R.id.messageText2)\n-    TextView messageText2;\n-\n-    @BindView(R.id.messageText3)\n-    TextView messageText3;\n-\n-    @BindView(R.id.moreDetailsButton)\n-    TextView moreDetailsButton;\n-\n-    @BindView(R.id.progressBar)\n-    LinearLayout progressBar;\n-\n-    public static StorageMigrationDialog create(int unsentInstances) {\n-        return new StorageMigrationDialog(unsentInstances);\n-    }\n-\n-    private StorageMigrationDialog(int unsentInstancesNumber) {\n-        this.unsentInstancesNumber = unsentInstancesNumber;\n-    }\n-\n-    @Override\n-    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n-        return inflater.inflate(R.layout.storage_migration_dialog, container, false);\n-    }\n-\n-    @Override\n-    public void onViewCreated(@NotNull View view, Bundle savedInstanceState) {\n-        super.onViewCreated(view, savedInstanceState);\n-        ButterKnife.bind(this, view);\n-\n-        setUpToolbar();\n-        setUpMessageAboutUnsetSubmissions();\n-\n-        moreDetailsButton.setOnClickListener(view1 -> showMoreDetails());\n-        cancelButton.setOnClickListener(v -> dismiss());\n-        migrateButton.setOnClickListener(v -> {\n-            disableDialog();\n-            showProgressBar();\n-            startStorageMigrationService();\n-        });\n-    }\n-\n-    @Override\n-    protected void onCloseClicked() {\n-    }\n-\n-    @Override\n-    protected void onBackPressed() {\n-    }\n-\n-    private void setUpToolbar() {\n-        getToolbar().setTitle(R.string.storage_migration_dialog_title);\n-        getToolbar().setNavigationIcon(null);\n-    }\n-\n-    private void setUpMessageAboutUnsetSubmissions() {\n-        if (unsentInstancesNumber > 0) {\n-            messageText2.setVisibility(View.VISIBLE);\n-            messageText2.setText(getString(R.string.storage_migration_dialog_message2, unsentInstancesNumber));\n-        }\n-    }\n-\n-    private void showMoreDetails() {\n-        Intent intent = new Intent(getContext(), WebViewActivity.class);\n-        intent.putExtra(\"url\", \"https://forum.opendatakit.org/t/24159\");\n-        startActivity(intent);\n-    }\n-\n-    private void disableDialog() {\n-        messageText1.setAlpha(.5f);\n-        messageText2.setAlpha(.5f);\n-        messageText3.setAlpha(.5f);\n-\n-        moreDetailsButton.setEnabled(false);\n-        moreDetailsButton.setAlpha(.5f);\n-\n-        cancelButton.setEnabled(false);\n-        cancelButton.setAlpha(.5f);\n-\n-        migrateButton.setEnabled(false);\n-        migrateButton.setAlpha(.5f);\n-    }\n-\n-    private void showProgressBar() {\n-        progressBar.setVisibility(View.VISIBLE);\n-    }\n-\n-    private void startStorageMigrationService() {\n-        Activity activity = getActivity();\n-        if (activity != null) {\n-            Intent intent = new Intent(activity, StorageMigrationService.class);\n-            activity.startService(intent);\n-        }\n-    }\n-}\n", "next_change": {"commit": "dcf15ba45d62149a114c925a59f653928bf3c4da", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationDialog.java b/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationDialog.java\nnew file mode 100644\nindex 0000000000..8152960b00\n--- /dev/null\n+++ b/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationDialog.java\n", "chunk": "@@ -0,0 +1,79 @@\n+package org.odk.collect.android.storage.migration;\n+\n+import android.content.Context;\n+import android.os.Bundle;\n+import android.view.LayoutInflater;\n+import android.view.View;\n+import android.view.ViewGroup;\n+import android.widget.Button;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.appcompat.widget.Toolbar;\n+import androidx.fragment.app.DialogFragment;\n+import androidx.lifecycle.ViewModelProviders;\n+\n+import org.jetbrains.annotations.NotNull;\n+import org.odk.collect.android.R;\n+\n+import timber.log.Timber;\n+\n+public class StorageMigrationDialog extends DialogFragment {\n+\n+    public interface OnMigrationCompleteListener {\n+        void onMigrationComplete(StorageMigrationResult result);\n+    }\n+\n+    private OnMigrationCompleteListener listener;\n+\n+    private StorageMigrationViewModel viewModel;\n+\n+    public static StorageMigrationDialog create() {\n+        return new StorageMigrationDialog();\n+    }\n+\n+    @Override\n+    public void onAttach(@NonNull Context context) {\n+        super.onAttach(context);\n+        viewModel = ViewModelProviders.of(this).get(StorageMigrationViewModel.class);\n+        try {\n+            listener = (OnMigrationCompleteListener) getActivity();\n+        } catch (ClassCastException e) {\n+            Timber.w(e);\n+        }\n+    }\n+\n+    @Override\n+    public void onCreate(@Nullable Bundle savedInstanceState) {\n+        super.onCreate(savedInstanceState);\n+        setCancelable(false);\n+        setStyle(DialogFragment.STYLE_NORMAL, R.style.Theme_Collect_Dialog_FullScreen);\n+    }\n+\n+    @Override\n+    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n+        return inflater.inflate(R.layout.storage_migration_dialog, container, false);\n+    }\n+\n+    @Override\n+    public void onViewCreated(@NotNull View view, Bundle savedInstanceState) {\n+        super.onViewCreated(view, savedInstanceState);\n+        ((Toolbar) view.findViewById(R.id.toolbar)).setTitle(R.string.migration_dialog_title);\n+\n+        Button cancel = view.findViewById(R.id.cancel);\n+        Button migrate = view.findViewById(R.id.migrate);\n+\n+        cancel.setOnClickListener(view1 -> dismiss());\n+        migrate.setOnClickListener(v -> {\n+            cancel.setEnabled(false);\n+            cancel.setAlpha(.4f);\n+            migrate.setEnabled(false);\n+            migrate.setAlpha(.4f);\n+\n+            view.findViewById(R.id.progress_bar).setVisibility(View.VISIBLE);\n+\n+            viewModel.performMigration().observe(this, result -> listener.onMigrationComplete(result));\n+        });\n+    }\n+\n+}\n", "next_change": {"commit": "17e476115da9892b9be2d92ab1b473b99e578f4c", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationDialog.java b/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationDialog.java\nindex 8152960b00..7ebef10eea 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationDialog.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationDialog.java\n", "chunk": "@@ -72,8 +54,14 @@ public class StorageMigrationDialog extends DialogFragment {\n \n             view.findViewById(R.id.progress_bar).setVisibility(View.VISIBLE);\n \n-            viewModel.performMigration().observe(this, result -> listener.onMigrationComplete(result));\n+            Activity activity = getActivity();\n+            if (activity != null) {\n+                activity.startService(new Intent(activity, StorageMigrationService.class));\n+            }\n         });\n     }\n \n+    public void setStatus(String status) {\n+        statusTextView.setText(status);\n+    }\n }\n", "next_change": {"commit": "5adaaedb6b4a95936f15c3ace52e17091cd3eac7", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationDialog.java b/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationDialog.java\nindex 7ebef10eea..f41a1f6bb4 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationDialog.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationDialog.java\n", "chunk": "@@ -61,6 +54,19 @@ public class StorageMigrationDialog extends DialogFragment {\n         });\n     }\n \n+    @Override\n+    protected void onCloseClicked() {\n+    }\n+\n+    @Override\n+    protected void onBackPressed() {\n+    }\n+\n+    @Override\n+    protected boolean shouldShowSoftKeyboard() {\n+        return false;\n+    }\n+\n     public void setStatus(String status) {\n         statusTextView.setText(status);\n     }\n", "next_change": {"commit": "4644f0f351ac9b4fbbc9eb84f1047fd9d3acf6cf", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationDialog.java b/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationDialog.java\nindex f41a1f6bb4..d88ffbc9f5 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationDialog.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationDialog.java\n", "chunk": "@@ -67,7 +78,7 @@ public class StorageMigrationDialog extends MaterialFullScreenDialogFragment {\n         return false;\n     }\n \n-    public void setStatus(String status) {\n-        statusTextView.setText(status);\n+    public void setStatus(StorageMigrationStatus status) {\n+        statusTextView.setText(StorageMigrationStatus.getStatusMessage(status, getContext()));\n     }\n }\n", "next_change": {"commit": "05515702f117197e15a603b4bdbe777e6bfae960", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationDialog.java b/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationDialog.java\nindex d88ffbc9f5..0b0d010054 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationDialog.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationDialog.java\n", "chunk": "@@ -73,11 +73,6 @@ public class StorageMigrationDialog extends MaterialFullScreenDialogFragment {\n     protected void onBackPressed() {\n     }\n \n-    @Override\n-    protected boolean shouldShowSoftKeyboard() {\n-        return false;\n-    }\n-\n     public void setStatus(StorageMigrationStatus status) {\n         statusTextView.setText(StorageMigrationStatus.getStatusMessage(status, getContext()));\n     }\n", "next_change": {"commit": "f49f991bf12f226e5d58d31538e969952628b0b2", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationDialog.java b/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationDialog.java\nindex 0b0d010054..962b675cbb 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationDialog.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationDialog.java\n", "chunk": "@@ -73,7 +77,32 @@ public class StorageMigrationDialog extends MaterialFullScreenDialogFragment {\n     protected void onBackPressed() {\n     }\n \n-    public void setStatus(StorageMigrationStatus status) {\n-        statusTextView.setText(StorageMigrationStatus.getStatusMessage(status, getContext()));\n+    private void updateStatus(StorageMigrationStatus status) {\n+        statusText.setText(StorageMigrationStatus.getStatusMessage(status, getContext()));\n+    }\n+\n+    private void updateToolbar() {\n+        getToolbar().setTitle(R.string.migration_dialog_title);\n+        getToolbar().setNavigationIcon(null);\n+    }\n+\n+    private void disableDialog() {\n+        cancelButton.setEnabled(false);\n+        cancelButton.setAlpha(.4f);\n+        migrateButton.setEnabled(false);\n+        migrateButton.setAlpha(.4f);\n+        messageText.setAlpha(.4f);\n+    }\n+\n+    private void showProgressBar() {\n+        progressBar.setVisibility(View.VISIBLE);\n+    }\n+\n+    private void startStorageMigrationService() {\n+        Activity activity = getActivity();\n+        if (activity != null) {\n+            Intent intent = new Intent(activity, StorageMigrationService.class);\n+            activity.startService(intent);\n+        }\n     }\n }\n", "next_change": {"commit": "1a4fd23153181b9a7446d0f92d08144a47c7d560", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationDialog.java b/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationDialog.java\nindex 962b675cbb..20848e8b5a 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationDialog.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationDialog.java\n", "chunk": "@@ -105,4 +149,13 @@ public class StorageMigrationDialog extends MaterialFullScreenDialogFragment {\n             activity.startService(intent);\n         }\n     }\n+\n+    public void handleMigrationError(StorageMigrationResult result) {\n+        hideProgressBar();\n+        enableDialog();\n+\n+        errorText.setVisibility(View.VISIBLE);\n+        errorText.setText(result.getErrorResultMessage(result, getContext()));\n+        migrateButton.setText(R.string.try_again);\n+    }\n }\n", "next_change": {"commit": "c839b7631d4da164b0f408945390078c6ef98366", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationDialog.java b/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationDialog.java\nindex 20848e8b5a..702fdf1f7f 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationDialog.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationDialog.java\n", "chunk": "@@ -158,4 +164,15 @@ public class StorageMigrationDialog extends MaterialFullScreenDialogFragment {\n         errorText.setText(result.getErrorResultMessage(result, getContext()));\n         migrateButton.setText(R.string.try_again);\n     }\n+\n+    public void startStorageMigration() {\n+        disableDialog();\n+        showProgressBar();\n+        startStorageMigrationService();\n+    }\n+\n+    private boolean isAdminPasswordRequired() {\n+        String adminPassword = (String) AdminSharedPreferences.getInstance().get(AdminKeys.KEY_ADMIN_PW);\n+        return adminPassword != null && !adminPassword.isEmpty();\n+    }\n }\n", "next_change": {"commit": "46e4f2c9aa775036bb40fa0a2a143d1515172dff", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationDialog.java b/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationDialog.java\nindex 702fdf1f7f..5ae8db999a 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationDialog.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationDialog.java\n", "chunk": "@@ -170,9 +170,4 @@ public class StorageMigrationDialog extends MaterialFullScreenDialogFragment {\n         showProgressBar();\n         startStorageMigrationService();\n     }\n-\n-    private boolean isAdminPasswordRequired() {\n-        String adminPassword = (String) AdminSharedPreferences.getInstance().get(AdminKeys.KEY_ADMIN_PW);\n-        return adminPassword != null && !adminPassword.isEmpty();\n-    }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}, {"oid": "ff46be76e57131f524b0dbf3085856b6671235e5", "url": "https://github.com/getodk/collect/commit/ff46be76e57131f524b0dbf3085856b6671235e5", "message": "Get rid of additional odk dir on scoped storage", "committedDate": "2020-02-20T13:08:22Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjAxODA3MA==", "url": "https://github.com/getodk/collect/pull/3623#discussion_r382018070", "body": "I'm missing why we need this. Is there any problem in just keeping the result?", "bodyText": "I'm missing why we need this. Is there any problem in just keeping the result?", "bodyHTML": "<p dir=\"auto\">I'm missing why we need this. Is there any problem in just keeping the result?</p>", "author": "seadowg", "createdAt": "2020-02-20T14:05:02Z", "path": "collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationRepository.java", "diffHunk": "@@ -0,0 +1,34 @@\n+package org.odk.collect.android.storage.migration;\n+\n+import androidx.lifecycle.LiveData;\n+import androidx.lifecycle.MutableLiveData;\n+\n+public class StorageMigrationRepository {\n+    private MutableLiveData<StorageMigrationResult> migrationResult = new MutableLiveData<>();\n+\n+    private boolean isMigrationBeingPerformed;\n+\n+    public LiveData<StorageMigrationResult> getResult() {\n+        return migrationResult;\n+    }\n+\n+    public void setResult(StorageMigrationResult storageMigrationResult) {\n+        migrationResult.postValue(storageMigrationResult);\n+    }\n+\n+    public boolean isMigrationBeingPerformed() {\n+        return isMigrationBeingPerformed;\n+    }\n+\n+    void markMigrationStart() {\n+        isMigrationBeingPerformed = true;\n+    }\n+\n+    void markMigrationEnd() {\n+        isMigrationBeingPerformed = false;\n+    }\n+\n+    public void consumeResult() {", "originalCommit": "531b1366db726f7624e43f2572a76b7ada4b5ef3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQ0NzkzOQ==", "url": "https://github.com/getodk/collect/pull/3623#discussion_r382447939", "bodyText": "Now I use it in MainMenuActivity.onDestroy() otherwise if you close the app and open it again the banner with success message will be visible because the status persist. We agreed that the banner in such a case should be gone.", "author": "grzesiek2010", "createdAt": "2020-02-21T08:17:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjAxODA3MA=="}], "type": "inlineReview", "revised_code": {"commit": "ea71d20a2c26a592559e7c10b91a90a008af9f0e", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationRepository.java b/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationRepository.java\nindex 3a12f34862..8d01ce5d7f 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationRepository.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationRepository.java\n", "chunk": "@@ -28,7 +28,7 @@ public class StorageMigrationRepository {\n         isMigrationBeingPerformed = false;\n     }\n \n-    public void consumeResult() {\n+    public void clearResult() {\n         migrationResult = new MutableLiveData<>();\n     }\n }\n", "next_change": {"commit": "2aec2cef76323fcadf43baad6f780922420fbea9", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationRepository.java b/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationRepository.java\ndeleted file mode 100644\nindex 8d01ce5d7f..0000000000\n--- a/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationRepository.java\n+++ /dev/null\n", "chunk": "@@ -1,34 +0,0 @@\n-package org.odk.collect.android.storage.migration;\n-\n-import androidx.lifecycle.LiveData;\n-import androidx.lifecycle.MutableLiveData;\n-\n-public class StorageMigrationRepository {\n-    private MutableLiveData<StorageMigrationResult> migrationResult = new MutableLiveData<>();\n-\n-    private boolean isMigrationBeingPerformed;\n-\n-    public LiveData<StorageMigrationResult> getResult() {\n-        return migrationResult;\n-    }\n-\n-    public void setResult(StorageMigrationResult storageMigrationResult) {\n-        migrationResult.postValue(storageMigrationResult);\n-    }\n-\n-    public boolean isMigrationBeingPerformed() {\n-        return isMigrationBeingPerformed;\n-    }\n-\n-    void markMigrationStart() {\n-        isMigrationBeingPerformed = true;\n-    }\n-\n-    void markMigrationEnd() {\n-        isMigrationBeingPerformed = false;\n-    }\n-\n-    public void clearResult() {\n-        migrationResult = new MutableLiveData<>();\n-    }\n-}\n", "next_change": {"commit": "4644f0f351ac9b4fbbc9eb84f1047fd9d3acf6cf", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationRepository.java b/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationRepository.java\nnew file mode 100644\nindex 0000000000..74c013b55a\n--- /dev/null\n+++ b/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationRepository.java\n", "chunk": "@@ -0,0 +1,25 @@\n+package org.odk.collect.android.storage.migration;\n+\n+import androidx.lifecycle.LiveData;\n+import androidx.lifecycle.MutableLiveData;\n+\n+public class StorageMigrationRepository {\n+    private final MutableLiveData<StorageMigrationStatus> migrationStatus = new MutableLiveData<>();\n+    private final MutableLiveData<StorageMigrationResult> migrationResult = new MutableLiveData<>();\n+\n+    public LiveData<StorageMigrationStatus> getStatus() {\n+        return migrationStatus;\n+    }\n+\n+    public void setStatus(StorageMigrationStatus storageMigrationStatus) {\n+        migrationStatus.postValue(storageMigrationStatus);\n+    }\n+\n+    public LiveData<StorageMigrationResult> getResult() {\n+        return migrationResult;\n+    }\n+\n+    public void setResult(StorageMigrationResult storageMigrationResult) {\n+        migrationResult.postValue(storageMigrationResult);\n+    }\n+}\n", "next_change": {"commit": "0115e56d22efeb15f4543ff851da4bf805f86b3f", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationRepository.java b/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationRepository.java\nindex 74c013b55a..916f99ad05 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationRepository.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationRepository.java\n", "chunk": "@@ -22,4 +15,16 @@ public class StorageMigrationRepository {\n     public void setResult(StorageMigrationResult storageMigrationResult) {\n         migrationResult.postValue(storageMigrationResult);\n     }\n+\n+    public boolean isMigrationBeingPerformed() {\n+        return isMigrationBeingPerformed;\n+    }\n+\n+    void markMigrationStart() {\n+        isMigrationBeingPerformed = true;\n+    }\n+\n+    void markMigrationEnd() {\n+        isMigrationBeingPerformed = false;\n+    }\n }\n", "next_change": {"commit": "63b248b10f15104e7334e2b8216aef858b54b07c", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationRepository.java b/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationRepository.java\nindex 916f99ad05..3a12f34862 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationRepository.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrationRepository.java\n", "chunk": "@@ -27,4 +27,8 @@ public class StorageMigrationRepository {\n     void markMigrationEnd() {\n         isMigrationBeingPerformed = false;\n     }\n+\n+    public void consumeResult() {\n+        migrationResult = new MutableLiveData<>();\n+    }\n }\n", "next_change": null}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjAyNDczNQ==", "url": "https://github.com/getodk/collect/pull/3623#discussion_r382024735", "body": "Maybe I'm misinterpreting what @lognaturel was getting at before but I don't think we need any state around the banner at all. If the activity is recreated (rotation/out of memory) I think the `LiveData` observation on the result will take care of continuing to show the dialog (as the result is stored in a singlton). This is assuming we get rid of the `consumeResult` call.", "bodyText": "Maybe I'm misinterpreting what @lognaturel was getting at before but I don't think we need any state around the banner at all. If the activity is recreated (rotation/out of memory) I think the LiveData observation on the result will take care of continuing to show the dialog (as the result is stored in a singlton). This is assuming we get rid of the consumeResult call.", "bodyHTML": "<p dir=\"auto\">Maybe I'm misinterpreting what <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/lognaturel/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/lognaturel\">@lognaturel</a> was getting at before but I don't think we need any state around the banner at all. If the activity is recreated (rotation/out of memory) I think the <code>LiveData</code> observation on the result will take care of continuing to show the dialog (as the result is stored in a singlton). This is assuming we get rid of the <code>consumeResult</code> call.</p>", "author": "seadowg", "createdAt": "2020-02-20T14:15:40Z", "path": "collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java", "diffHunk": "@@ -79,9 +84,9 @@\n  * @author Carl Hartung (carlhartung@gmail.com)\n  * @author Yaw Anokwa (yanokwa@gmail.com)\n  */\n-public class MainMenuActivity extends CollectAbstractActivity {\n+public class MainMenuActivity extends CollectAbstractActivity implements AdminPasswordDialog.AdminPasswordDialogListener {\n \n-    private static final int PASSWORD_DIALOG = 1;\n+    private static final String KEEP_BANNER_WITH_SUCCESS_MSG_VISIBLE = \"keepBannerWithSuccessMsgVisible\";", "originalCommit": "531b1366db726f7624e43f2572a76b7ada4b5ef3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjMxMzQ4Ng==", "url": "https://github.com/getodk/collect/pull/3623#discussion_r382313486", "bodyText": "I think there are two reasons that it's still here. We want the success banner to be user-dismissible so this currently is what keeps track of whether the user has dismissed it or not. I think an alternative would be to clear/consume/nuke the livedata value on dismissal. I think the other is that the success banner should only hold the success text where as error banners keep notice test above the error. I think that could be done by making the case based on the livedata observed value.", "author": "lognaturel", "createdAt": "2020-02-20T23:19:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjAyNDczNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQ0ODQ4NA==", "url": "https://github.com/getodk/collect/pull/3623#discussion_r382448484", "bodyText": "I improved the code a bit removing that field and using just livedata + clearing the result in onDestroy();", "author": "grzesiek2010", "createdAt": "2020-02-21T08:18:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjAyNDczNQ=="}], "type": "inlineReview", "revised_code": {"commit": "ea71d20a2c26a592559e7c10b91a90a008af9f0e", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java b/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java\nindex ce85becff9..44c0e7f866 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java\n", "chunk": "@@ -84,9 +84,7 @@ import static org.odk.collect.android.preferences.GeneralKeys.KEY_SUBMISSION_TRA\n  * @author Carl Hartung (carlhartung@gmail.com)\n  * @author Yaw Anokwa (yanokwa@gmail.com)\n  */\n-public class MainMenuActivity extends CollectAbstractActivity implements AdminPasswordDialog.AdminPasswordDialogListener {\n-\n-    private static final String KEEP_BANNER_WITH_SUCCESS_MSG_VISIBLE = \"keepBannerWithSuccessMsgVisible\";\n+public class MainMenuActivity extends CollectAbstractActivity implements AdminPasswordDialog.AdminPasswordDialogCallback {\n \n     private static final boolean EXIT = true;\n     // buttons\n", "next_change": {"commit": "2aec2cef76323fcadf43baad6f780922420fbea9", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java b/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java\nindex 44c0e7f866..dc5fe01f82 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java\n", "chunk": "@@ -84,7 +79,9 @@ import static org.odk.collect.android.preferences.GeneralKeys.KEY_SUBMISSION_TRA\n  * @author Carl Hartung (carlhartung@gmail.com)\n  * @author Yaw Anokwa (yanokwa@gmail.com)\n  */\n-public class MainMenuActivity extends CollectAbstractActivity implements AdminPasswordDialog.AdminPasswordDialogCallback {\n+public class MainMenuActivity extends CollectAbstractActivity {\n+\n+    private static final int PASSWORD_DIALOG = 1;\n \n     private static final boolean EXIT = true;\n     // buttons\n", "next_change": {"commit": "dcf15ba45d62149a114c925a59f653928bf3c4da", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java b/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java\nindex dc5fe01f82..7ac4cd5e03 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java\n", "chunk": "@@ -79,7 +84,7 @@ import static org.odk.collect.android.preferences.GeneralKeys.KEY_SUBMISSION_TRA\n  * @author Carl Hartung (carlhartung@gmail.com)\n  * @author Yaw Anokwa (yanokwa@gmail.com)\n  */\n-public class MainMenuActivity extends CollectAbstractActivity {\n+public class MainMenuActivity extends CollectAbstractActivity implements StorageMigrationDialog.OnMigrationCompleteListener {\n \n     private static final int PASSWORD_DIALOG = 1;\n \n", "next_change": {"commit": "17e476115da9892b9be2d92ab1b473b99e578f4c", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java b/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java\nindex 7ac4cd5e03..e606bd8bfd 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java\n", "chunk": "@@ -84,7 +90,7 @@ import static org.odk.collect.android.preferences.GeneralKeys.KEY_SUBMISSION_TRA\n  * @author Carl Hartung (carlhartung@gmail.com)\n  * @author Yaw Anokwa (yanokwa@gmail.com)\n  */\n-public class MainMenuActivity extends CollectAbstractActivity implements StorageMigrationDialog.OnMigrationCompleteListener {\n+public class MainMenuActivity extends CollectAbstractActivity {\n \n     private static final int PASSWORD_DIALOG = 1;\n \n", "next_change": {"commit": "a8c1fceb126522f0e6ac02c6c650dafcb9745801", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java b/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java\nindex e606bd8bfd..9a4e3eef2d 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java\n", "chunk": "@@ -90,9 +86,7 @@ import static org.odk.collect.android.preferences.GeneralKeys.KEY_SUBMISSION_TRA\n  * @author Carl Hartung (carlhartung@gmail.com)\n  * @author Yaw Anokwa (yanokwa@gmail.com)\n  */\n-public class MainMenuActivity extends CollectAbstractActivity {\n-\n-    private static final int PASSWORD_DIALOG = 1;\n+public class MainMenuActivity extends CollectAbstractActivity implements AdminPasswordDialog.AdminPasswordDialogListener {\n \n     private static final boolean EXIT = true;\n     // buttons\n", "next_change": {"commit": "f7ab62544dfda115e4a1e9bf0e2f6fdc3b3030f6", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java b/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java\nindex 9a4e3eef2d..ec97da9870 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java\n", "chunk": "@@ -88,6 +87,8 @@ import static org.odk.collect.android.preferences.GeneralKeys.KEY_SUBMISSION_TRA\n  */\n public class MainMenuActivity extends CollectAbstractActivity implements AdminPasswordDialog.AdminPasswordDialogListener {\n \n+    private static final String STORAGE_MIGRATION_RESULT = \"storageMigrationResult\";\n+\n     private static final boolean EXIT = true;\n     // buttons\n     private Button manageFilesButton;\n", "next_change": {"commit": "8a41d51163c58863480f1716eb7b5fdcf975af88", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java b/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java\nindex ec97da9870..aace801e02 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java\n", "chunk": "@@ -87,8 +87,6 @@ import static org.odk.collect.android.preferences.GeneralKeys.KEY_SUBMISSION_TRA\n  */\n public class MainMenuActivity extends CollectAbstractActivity implements AdminPasswordDialog.AdminPasswordDialogListener {\n \n-    private static final String STORAGE_MIGRATION_RESULT = \"storageMigrationResult\";\n-\n     private static final boolean EXIT = true;\n     // buttons\n     private Button manageFilesButton;\n", "next_change": {"commit": "5fd161fa4c7139e1f2ff66db5893fdb887bee5f4", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java b/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java\nindex aace801e02..97421cae50 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java\n", "chunk": "@@ -87,6 +86,8 @@ import static org.odk.collect.android.preferences.GeneralKeys.KEY_SUBMISSION_TRA\n  */\n public class MainMenuActivity extends CollectAbstractActivity implements AdminPasswordDialog.AdminPasswordDialogListener {\n \n+    private static final String KEEP_BANNER_WITH_SUCCESS_MSG_VISIBLE = \"keepBannerWithSuccessMsgVisible\";\n+\n     private static final boolean EXIT = true;\n     // buttons\n     private Button manageFilesButton;\n", "next_change": {"commit": "46e4f2c9aa775036bb40fa0a2a143d1515172dff", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java b/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java\nindex 97421cae50..2fdb706a81 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java\n", "chunk": "@@ -96,7 +97,6 @@ public class MainMenuActivity extends CollectAbstractActivity implements AdminPa\n     private Button reviewDataButton;\n     private Button getFormsButton;\n     private AlertDialog alertDialog;\n-    private SharedPreferences adminPreferences;\n     private int completedCount;\n     private int savedCount;\n     private int viewSentCount;\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjAyOTEwOQ==", "url": "https://github.com/getodk/collect/pull/3623#discussion_r382029109", "body": "Could this just use `showIfNotShowing` instead? and call `startStorageMigration` on the returned dialog?", "bodyText": "Could this just use showIfNotShowing instead? and call startStorageMigration on the returned dialog?", "bodyHTML": "<p dir=\"auto\">Could this just use <code>showIfNotShowing</code> instead? and call <code>startStorageMigration</code> on the returned dialog?</p>", "author": "seadowg", "createdAt": "2020-02-20T14:22:47Z", "path": "collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java", "diffHunk": "@@ -585,6 +559,26 @@ private boolean loadSharedPreferencesFromFile(File src) {\n         return res;\n     }\n \n+    @Override\n+    public void onCorrectAdminPassword(AdminPasswordDialog.Action action) {\n+        switch (action) {\n+            case ADMIN_SETTINGS:\n+                startActivity(new Intent(this, AdminPreferencesActivity.class));\n+                break;\n+            case STORAGE_MIGRATION:\n+                StorageMigrationDialog storageMigrationDialog = (StorageMigrationDialog) DialogUtils.getDialogFragment(StorageMigrationDialog.class, getSupportFragmentManager());", "originalCommit": "531b1366db726f7624e43f2572a76b7ada4b5ef3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQ1MjY1Ng==", "url": "https://github.com/getodk/collect/pull/3623#discussion_r382452656", "bodyText": "Uuuups I don't understand... showIfNotShowing what? A user should be asked for password when they clicks on MIGRATE button from StorageMigrationDialog not LEARN MORE AND MIGRATE from the Main Menu. Am I missing something or maybe it's you \ud83d\ude04", "author": "grzesiek2010", "createdAt": "2020-02-21T08:30:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjAyOTEwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjUwODk1Ng==", "url": "https://github.com/getodk/collect/pull/3623#discussion_r382508956", "bodyText": "hah yeah sorry I meant DialogUtils.showIfNotShowing. Does that make sense? I wouldn't be surprised if I have the flow wrong in my head here!", "author": "seadowg", "createdAt": "2020-02-21T10:32:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjAyOTEwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjUxMzAyMA==", "url": "https://github.com/getodk/collect/pull/3623#discussion_r382513020", "bodyText": "I know you meant DialogUtils.showIfNotShowing but there is nothing to show here.", "author": "grzesiek2010", "createdAt": "2020-02-21T10:41:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjAyOTEwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjUxNjE4Mg==", "url": "https://github.com/getodk/collect/pull/3623#discussion_r382516182", "bodyText": "I guess my head it's a nice way of \"fetching\" while also ensuring it's definitely on screen. Here it looks like you do expect the dialog to be showing. Is that right? If so there is a case here where if the dialog for some reason isn't showing then this is just a dead end (as storageMigrationDialog != null wouldn't pass). The code could just be:\ncase STORAGE_MIGRATION:\n    DialogUtils.showIfNotShowing(new StorageMigrationDialog(), getSupportFragmentManager()).startStorageMigration();\nIf we did that we should probably change showIfNotShowing to take a class rather than an instance (to not waste allocations).", "author": "seadowg", "createdAt": "2020-02-21T10:48:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjAyOTEwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjUyMjA0Ng==", "url": "https://github.com/getodk/collect/pull/3623#discussion_r382522046", "bodyText": "Ok, now I understand what you mean, fixed. Thanks!", "author": "grzesiek2010", "createdAt": "2020-02-21T11:01:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjAyOTEwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjUyMzA5Ng==", "url": "https://github.com/getodk/collect/pull/3623#discussion_r382523096", "bodyText": "Sorry I absolutely should have just put the example in at first!", "author": "seadowg", "createdAt": "2020-02-21T11:03:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjAyOTEwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "547bd2964fbf622ea6a509213c86d928f4b471a1", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java b/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java\nindex ce85becff9..2a393fabdc 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java\n", "chunk": "@@ -566,10 +561,9 @@ public class MainMenuActivity extends CollectAbstractActivity implements AdminPa\n                 startActivity(new Intent(this, AdminPreferencesActivity.class));\n                 break;\n             case STORAGE_MIGRATION:\n-                StorageMigrationDialog storageMigrationDialog = (StorageMigrationDialog) DialogUtils.getDialogFragment(StorageMigrationDialog.class, getSupportFragmentManager());\n-                if (storageMigrationDialog != null) {\n-                    storageMigrationDialog.startStorageMigration();\n-                }\n+                DialogUtils\n+                        .showIfNotShowing(StorageMigrationDialog.create(adminPasswordProvider, savedCount), getSupportFragmentManager())\n+                        .startStorageMigration();\n                 break;\n         }\n     }\n", "next_change": {"commit": "2dc78a9857fa4b78c5e388fb8e90a7e2e9ac9d63", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java b/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java\nindex 2a393fabdc..f2b25a36ca 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java\n", "chunk": "@@ -562,7 +562,7 @@ public class MainMenuActivity extends CollectAbstractActivity implements AdminPa\n                 break;\n             case STORAGE_MIGRATION:\n                 DialogUtils\n-                        .showIfNotShowing(StorageMigrationDialog.create(adminPasswordProvider, savedCount), getSupportFragmentManager())\n+                        .showIfNotShowing(StorageMigrationDialog.create(savedCount), getSupportFragmentManager())\n                         .startStorageMigration();\n                 break;\n         }\n", "next_change": {"commit": "f2872ef335f41998ea1910c2248c0005fbd6e26d", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java b/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java\nindex f2b25a36ca..44c0e7f866 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java\n", "chunk": "@@ -561,9 +561,10 @@ public class MainMenuActivity extends CollectAbstractActivity implements AdminPa\n                 startActivity(new Intent(this, AdminPreferencesActivity.class));\n                 break;\n             case STORAGE_MIGRATION:\n-                DialogUtils\n-                        .showIfNotShowing(StorageMigrationDialog.create(savedCount), getSupportFragmentManager())\n-                        .startStorageMigration();\n+                StorageMigrationDialog storageMigrationDialog = (StorageMigrationDialog) DialogUtils.getDialogFragment(StorageMigrationDialog.class, getSupportFragmentManager());\n+                if (storageMigrationDialog != null) {\n+                    storageMigrationDialog.startStorageMigration();\n+                }\n                 break;\n         }\n     }\n", "next_change": {"commit": "388ebb79402c7b6db2c896317b4d041488315b01", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java b/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java\nindex 44c0e7f866..2a393fabdc 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java\n", "chunk": "@@ -561,10 +561,9 @@ public class MainMenuActivity extends CollectAbstractActivity implements AdminPa\n                 startActivity(new Intent(this, AdminPreferencesActivity.class));\n                 break;\n             case STORAGE_MIGRATION:\n-                StorageMigrationDialog storageMigrationDialog = (StorageMigrationDialog) DialogUtils.getDialogFragment(StorageMigrationDialog.class, getSupportFragmentManager());\n-                if (storageMigrationDialog != null) {\n-                    storageMigrationDialog.startStorageMigration();\n-                }\n+                DialogUtils\n+                        .showIfNotShowing(StorageMigrationDialog.create(adminPasswordProvider, savedCount), getSupportFragmentManager())\n+                        .startStorageMigration();\n                 break;\n         }\n     }\n", "next_change": {"commit": "244fbb9720ccacf6b16083a84b3173ef77e40511", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java b/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java\nindex 2a393fabdc..f2b25a36ca 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java\n", "chunk": "@@ -562,7 +562,7 @@ public class MainMenuActivity extends CollectAbstractActivity implements AdminPa\n                 break;\n             case STORAGE_MIGRATION:\n                 DialogUtils\n-                        .showIfNotShowing(StorageMigrationDialog.create(adminPasswordProvider, savedCount), getSupportFragmentManager())\n+                        .showIfNotShowing(StorageMigrationDialog.create(savedCount), getSupportFragmentManager())\n                         .startStorageMigration();\n                 break;\n         }\n", "next_change": {"commit": "b6ffab9b386f928f5c0b0c64b2b3440bb3388d21", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java b/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java\nindex f2b25a36ca..44c0e7f866 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java\n", "chunk": "@@ -561,9 +561,10 @@ public class MainMenuActivity extends CollectAbstractActivity implements AdminPa\n                 startActivity(new Intent(this, AdminPreferencesActivity.class));\n                 break;\n             case STORAGE_MIGRATION:\n-                DialogUtils\n-                        .showIfNotShowing(StorageMigrationDialog.create(savedCount), getSupportFragmentManager())\n-                        .startStorageMigration();\n+                StorageMigrationDialog storageMigrationDialog = (StorageMigrationDialog) DialogUtils.getDialogFragment(StorageMigrationDialog.class, getSupportFragmentManager());\n+                if (storageMigrationDialog != null) {\n+                    storageMigrationDialog.startStorageMigration();\n+                }\n                 break;\n         }\n     }\n", "next_change": {"commit": "5443cc29f39e742181db5c4820b0b758efdb42e1", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java b/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java\nindex 44c0e7f866..f2b25a36ca 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java\n", "chunk": "@@ -561,10 +561,9 @@ public class MainMenuActivity extends CollectAbstractActivity implements AdminPa\n                 startActivity(new Intent(this, AdminPreferencesActivity.class));\n                 break;\n             case STORAGE_MIGRATION:\n-                StorageMigrationDialog storageMigrationDialog = (StorageMigrationDialog) DialogUtils.getDialogFragment(StorageMigrationDialog.class, getSupportFragmentManager());\n-                if (storageMigrationDialog != null) {\n-                    storageMigrationDialog.startStorageMigration();\n-                }\n+                DialogUtils\n+                        .showIfNotShowing(StorageMigrationDialog.create(savedCount), getSupportFragmentManager())\n+                        .startStorageMigration();\n                 break;\n         }\n     }\n", "next_change": {"commit": "2aec2cef76323fcadf43baad6f780922420fbea9", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java b/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java\nindex f2b25a36ca..dc5fe01f82 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java\n", "chunk": "@@ -554,25 +585,6 @@ public class MainMenuActivity extends CollectAbstractActivity implements AdminPa\n         return res;\n     }\n \n-    @Override\n-    public void onCorrectAdminPassword(AdminPasswordDialog.Action action) {\n-        switch (action) {\n-            case ADMIN_SETTINGS:\n-                startActivity(new Intent(this, AdminPreferencesActivity.class));\n-                break;\n-            case STORAGE_MIGRATION:\n-                DialogUtils\n-                        .showIfNotShowing(StorageMigrationDialog.create(savedCount), getSupportFragmentManager())\n-                        .startStorageMigration();\n-                break;\n-        }\n-    }\n-\n-    @Override\n-    public void onIncorrectAdminPassword() {\n-        ToastUtils.showShortToast(R.string.admin_password_incorrect);\n-    }\n-\n     /*\n      * Used to prevent memory leaks\n      */\n", "next_change": {"commit": "a8c1fceb126522f0e6ac02c6c650dafcb9745801", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java b/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java\nindex dc5fe01f82..9a4e3eef2d 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java\n", "chunk": "@@ -585,6 +549,21 @@ public class MainMenuActivity extends CollectAbstractActivity {\n         return res;\n     }\n \n+    @Override\n+    public void openAdminSettings() {\n+        startActivity(new Intent(this, AdminPreferencesActivity.class));\n+    }\n+\n+    @Override\n+    public void openStorageMigrationDialog() {\n+        DialogUtils.showIfNotShowing(StorageMigrationDialog.create(savedCount), getSupportFragmentManager());\n+    }\n+\n+    @Override\n+    public void incorrectAdminPassword() {\n+        ToastUtils.showShortToast(R.string.admin_password_incorrect);\n+    }\n+\n     /*\n      * Used to prevent memory leaks\n      */\n", "next_change": {"commit": "c839b7631d4da164b0f408945390078c6ef98366", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java b/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java\nindex 9a4e3eef2d..5c9ad6c6c8 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/activities/MainMenuActivity.java\n", "chunk": "@@ -550,17 +551,22 @@ public class MainMenuActivity extends CollectAbstractActivity implements AdminPa\n     }\n \n     @Override\n-    public void openAdminSettings() {\n-        startActivity(new Intent(this, AdminPreferencesActivity.class));\n-    }\n-\n-    @Override\n-    public void openStorageMigrationDialog() {\n-        DialogUtils.showIfNotShowing(StorageMigrationDialog.create(savedCount), getSupportFragmentManager());\n+    public void onCorrectAdminPassword(AdminPasswordDialog.Action action) {\n+        switch (action) {\n+            case ADMIN_SETTINGS:\n+                startActivity(new Intent(this, AdminPreferencesActivity.class));\n+                break;\n+            case STORAGE_MIGRATION:\n+                StorageMigrationDialog storageMigrationDialog = (StorageMigrationDialog) DialogUtils.getDialogFragment(StorageMigrationDialog.class, getSupportFragmentManager());\n+                if (storageMigrationDialog != null) {\n+                    storageMigrationDialog.startStorageMigration();\n+                }\n+                break;\n+        }\n     }\n \n     @Override\n-    public void incorrectAdminPassword() {\n+    public void onIncorrectAdminPassword() {\n         ToastUtils.showShortToast(R.string.admin_password_incorrect);\n     }\n \n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjAzMDc1Mg==", "url": "https://github.com/getodk/collect/pull/3623#discussion_r382030752", "body": "I feel like it might make more sense to use a `instanceof` check here rather than caching the `ClassCastException`. This means we don't get warnings if we're using the `Fragment` in contexts where we're not interested in the listener (tests for instance).", "bodyText": "I feel like it might make more sense to use a instanceof check here rather than caching the ClassCastException. This means we don't get warnings if we're using the Fragment in contexts where we're not interested in the listener (tests for instance).", "bodyHTML": "<p dir=\"auto\">I feel like it might make more sense to use a <code>instanceof</code> check here rather than caching the <code>ClassCastException</code>. This means we don't get warnings if we're using the <code>Fragment</code> in contexts where we're not interested in the listener (tests for instance).</p>", "author": "seadowg", "createdAt": "2020-02-20T14:25:29Z", "path": "collect_app/src/main/java/org/odk/collect/android/fragments/dialogs/AdminPasswordDialog.java", "diffHunk": "@@ -0,0 +1,93 @@\n+package org.odk.collect.android.fragments.dialogs;\n+\n+import android.app.AlertDialog;\n+import android.app.Dialog;\n+import android.content.Context;\n+import android.os.Bundle;\n+import android.text.InputType;\n+import android.view.View;\n+import android.view.WindowManager;\n+import android.widget.CheckBox;\n+import android.widget.EditText;\n+\n+import androidx.fragment.app.DialogFragment;\n+\n+import org.jetbrains.annotations.NotNull;\n+import org.odk.collect.android.R;\n+import org.odk.collect.android.utilities.AdminPasswordProvider;\n+\n+import timber.log.Timber;\n+\n+public class AdminPasswordDialog extends DialogFragment {\n+\n+    public interface AdminPasswordDialogListener {\n+        void onCorrectAdminPassword(Action action);\n+        void onIncorrectAdminPassword();\n+    }\n+\n+    public enum Action { ADMIN_SETTINGS, STORAGE_MIGRATION }\n+\n+    private AdminPasswordDialogListener listener;\n+\n+    private final Action action;\n+\n+    private final AdminPasswordProvider adminPasswordProvider;\n+\n+    public static AdminPasswordDialog create(AdminPasswordProvider adminPasswordProvider, Action action) {\n+        return new AdminPasswordDialog(adminPasswordProvider, action);\n+    }\n+\n+    private AdminPasswordDialog(AdminPasswordProvider adminPasswordProvider, Action action) {\n+        this.adminPasswordProvider = adminPasswordProvider;\n+        this.action = action;\n+    }\n+\n+    @Override\n+    public void onAttach(@NotNull Context context) {\n+        super.onAttach(context);\n+        try {\n+            listener = (AdminPasswordDialogListener) getActivity();", "originalCommit": "531b1366db726f7624e43f2572a76b7ada4b5ef3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQ0MjQ0Mw==", "url": "https://github.com/getodk/collect/pull/3623#discussion_r382442443", "bodyText": "Done.", "author": "grzesiek2010", "createdAt": "2020-02-21T08:01:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjAzMDc1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "ea71d20a2c26a592559e7c10b91a90a008af9f0e", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/fragments/dialogs/AdminPasswordDialog.java b/collect_app/src/main/java/org/odk/collect/android/fragments/dialogs/AdminPasswordDialog.java\nindex 228bde8a96..17f8cfa70a 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/fragments/dialogs/AdminPasswordDialog.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/fragments/dialogs/AdminPasswordDialog.java\n", "chunk": "@@ -45,10 +43,8 @@ public class AdminPasswordDialog extends DialogFragment {\n     @Override\n     public void onAttach(@NotNull Context context) {\n         super.onAttach(context);\n-        try {\n-            listener = (AdminPasswordDialogListener) getActivity();\n-        } catch (ClassCastException e) {\n-            Timber.w(e);\n+        if (context instanceof AdminPasswordDialogCallback) {\n+            callback = (AdminPasswordDialogCallback) context;\n         }\n     }\n \n", "next_change": {"commit": "2aec2cef76323fcadf43baad6f780922420fbea9", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/fragments/dialogs/AdminPasswordDialog.java b/collect_app/src/main/java/org/odk/collect/android/fragments/dialogs/AdminPasswordDialog.java\ndeleted file mode 100644\nindex 17f8cfa70a..0000000000\n--- a/collect_app/src/main/java/org/odk/collect/android/fragments/dialogs/AdminPasswordDialog.java\n+++ /dev/null\n", "chunk": "@@ -1,89 +0,0 @@\n-package org.odk.collect.android.fragments.dialogs;\n-\n-import android.app.AlertDialog;\n-import android.app.Dialog;\n-import android.content.Context;\n-import android.os.Bundle;\n-import android.text.InputType;\n-import android.view.View;\n-import android.view.WindowManager;\n-import android.widget.CheckBox;\n-import android.widget.EditText;\n-\n-import androidx.fragment.app.DialogFragment;\n-\n-import org.jetbrains.annotations.NotNull;\n-import org.odk.collect.android.R;\n-import org.odk.collect.android.utilities.AdminPasswordProvider;\n-\n-public class AdminPasswordDialog extends DialogFragment {\n-\n-    public interface AdminPasswordDialogCallback {\n-        void onCorrectAdminPassword(Action action);\n-        void onIncorrectAdminPassword();\n-    }\n-\n-    public enum Action { ADMIN_SETTINGS, STORAGE_MIGRATION }\n-\n-    private AdminPasswordDialogCallback callback;\n-\n-    private final Action action;\n-\n-    private final AdminPasswordProvider adminPasswordProvider;\n-\n-    public static AdminPasswordDialog create(AdminPasswordProvider adminPasswordProvider, Action action) {\n-        return new AdminPasswordDialog(adminPasswordProvider, action);\n-    }\n-\n-    private AdminPasswordDialog(AdminPasswordProvider adminPasswordProvider, Action action) {\n-        this.adminPasswordProvider = adminPasswordProvider;\n-        this.action = action;\n-    }\n-\n-    @Override\n-    public void onAttach(@NotNull Context context) {\n-        super.onAttach(context);\n-        if (context instanceof AdminPasswordDialogCallback) {\n-            callback = (AdminPasswordDialogCallback) context;\n-        }\n-    }\n-\n-    @Override\n-    public void onStart() {\n-        super.onStart();\n-\n-        Dialog dialog = getDialog();\n-        if (dialog != null) {\n-            dialog.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_VISIBLE);\n-        }\n-    }\n-\n-    @Override\n-    public Dialog onCreateDialog(Bundle savedInstanceState) {\n-        View dialogView = getActivity().getLayoutInflater().inflate(R.layout.admin_password_dialog_layout, null);\n-        CheckBox checkBox = dialogView.findViewById(R.id.checkBox);\n-        EditText input = dialogView.findViewById(R.id.editText);\n-\n-        checkBox.setOnCheckedChangeListener((compoundButton, b) -> {\n-            if (!checkBox.isChecked()) {\n-                input.setInputType(InputType.TYPE_CLASS_TEXT | InputType.TYPE_TEXT_VARIATION_PASSWORD);\n-            } else {\n-                input.setInputType(InputType.TYPE_TEXT_VARIATION_PASSWORD);\n-            }\n-        });\n-\n-        return new AlertDialog.Builder(getActivity())\n-                .setView(dialogView)\n-                .setTitle(getString(R.string.enter_admin_password))\n-                .setPositiveButton(getString(R.string.ok), (dialog, whichButton) -> {\n-                            if (adminPasswordProvider.getAdminPassword().equals(input.getText().toString())) {\n-                                callback.onCorrectAdminPassword(action);\n-                            } else {\n-                                callback.onIncorrectAdminPassword();\n-                            }\n-                            dismiss();\n-                        })\n-                .setNegativeButton(getString(R.string.cancel), (dialogInterface, i) -> dismiss())\n-                .create();\n-    }\n-}\n", "next_change": {"commit": "a8c1fceb126522f0e6ac02c6c650dafcb9745801", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/fragments/dialogs/AdminPasswordDialog.java b/collect_app/src/main/java/org/odk/collect/android/fragments/dialogs/AdminPasswordDialog.java\nnew file mode 100644\nindex 0000000000..1f7fabdce3\n--- /dev/null\n+++ b/collect_app/src/main/java/org/odk/collect/android/fragments/dialogs/AdminPasswordDialog.java\n", "chunk": "@@ -0,0 +1,101 @@\n+package org.odk.collect.android.fragments.dialogs;\n+\n+import android.app.AlertDialog;\n+import android.app.Dialog;\n+import android.content.Context;\n+import android.os.Bundle;\n+import android.text.InputType;\n+import android.view.View;\n+import android.view.WindowManager;\n+import android.widget.CheckBox;\n+import android.widget.EditText;\n+\n+import androidx.fragment.app.DialogFragment;\n+\n+import org.jetbrains.annotations.NotNull;\n+import org.odk.collect.android.R;\n+import org.odk.collect.android.preferences.AdminSharedPreferences;\n+\n+import timber.log.Timber;\n+\n+import static org.odk.collect.android.preferences.AdminKeys.KEY_ADMIN_PW;\n+\n+public class AdminPasswordDialog extends DialogFragment {\n+\n+    public interface AdminPasswordDialogListener {\n+        void openAdminSettings();\n+        void openStorageMigrationDialog();\n+        void incorrectAdminPassword();\n+    }\n+\n+    public enum Action { ADMIN_SETTINGS, STORAGE_MIGRATION }\n+\n+    private final Action action;\n+\n+    private AdminPasswordDialogListener listener;\n+\n+    public static AdminPasswordDialog create(Action action) {\n+        return new AdminPasswordDialog(action);\n+    }\n+\n+    private AdminPasswordDialog(Action action) {\n+        this.action = action;\n+    }\n+\n+    @Override\n+    public void onAttach(@NotNull Context context) {\n+        super.onAttach(context);\n+        try {\n+            listener = (AdminPasswordDialogListener) getActivity();\n+        } catch (ClassCastException e) {\n+            Timber.w(e);\n+        }\n+    }\n+\n+    @Override\n+    public void onStart() {\n+        super.onStart();\n+\n+        Dialog dialog = getDialog();\n+        if (dialog != null) {\n+            dialog.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_VISIBLE);\n+        }\n+    }\n+\n+    @Override\n+    public Dialog onCreateDialog(Bundle savedInstanceState) {\n+        View dialogView = getActivity().getLayoutInflater().inflate(R.layout.admin_password_dialog_layout, null);\n+        CheckBox checkBox = dialogView.findViewById(R.id.checkBox);\n+        EditText input = dialogView.findViewById(R.id.editText);\n+\n+        checkBox.setOnCheckedChangeListener((compoundButton, b) -> {\n+            if (!checkBox.isChecked()) {\n+                input.setInputType(InputType.TYPE_CLASS_TEXT | InputType.TYPE_TEXT_VARIATION_PASSWORD);\n+            } else {\n+                input.setInputType(InputType.TYPE_TEXT_VARIATION_PASSWORD);\n+            }\n+        });\n+\n+        return new AlertDialog.Builder(getActivity())\n+                .setView(dialogView)\n+                .setTitle(getString(R.string.enter_admin_password))\n+                .setPositiveButton(getString(R.string.ok), (dialog, whichButton) -> {\n+                            if (getAdminPassword().equals(input.getText().toString())) {\n+                                if (action == Action.ADMIN_SETTINGS) {\n+                                    listener.openAdminSettings();\n+                                } else {\n+                                    listener.openStorageMigrationDialog();\n+                                }\n+                            } else {\n+                                listener.incorrectAdminPassword();\n+                            }\n+                            dismiss();\n+                        })\n+                .setNegativeButton(getString(R.string.cancel), (dialogInterface, i) -> dismiss())\n+                .create();\n+    }\n+\n+    private String getAdminPassword() {\n+        return (String) AdminSharedPreferences.getInstance().get(KEY_ADMIN_PW);\n+    }\n+}\n", "next_change": {"commit": "46e4f2c9aa775036bb40fa0a2a143d1515172dff", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/fragments/dialogs/AdminPasswordDialog.java b/collect_app/src/main/java/org/odk/collect/android/fragments/dialogs/AdminPasswordDialog.java\nindex 1f7fabdce3..e9e04d1aab 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/fragments/dialogs/AdminPasswordDialog.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/fragments/dialogs/AdminPasswordDialog.java\n", "chunk": "@@ -80,22 +80,14 @@ public class AdminPasswordDialog extends DialogFragment {\n                 .setView(dialogView)\n                 .setTitle(getString(R.string.enter_admin_password))\n                 .setPositiveButton(getString(R.string.ok), (dialog, whichButton) -> {\n-                            if (getAdminPassword().equals(input.getText().toString())) {\n-                                if (action == Action.ADMIN_SETTINGS) {\n-                                    listener.openAdminSettings();\n-                                } else {\n-                                    listener.openStorageMigrationDialog();\n-                                }\n+                            if (adminPasswordProvider.getAdminPassword().equals(input.getText().toString())) {\n+                                listener.onCorrectAdminPassword(action);\n                             } else {\n-                                listener.incorrectAdminPassword();\n+                                listener.onIncorrectAdminPassword();\n                             }\n                             dismiss();\n                         })\n                 .setNegativeButton(getString(R.string.cancel), (dialogInterface, i) -> dismiss())\n                 .create();\n     }\n-\n-    private String getAdminPassword() {\n-        return (String) AdminSharedPreferences.getInstance().get(KEY_ADMIN_PW);\n-    }\n }\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjMwOTkzOA==", "url": "https://github.com/getodk/collect/pull/3623#discussion_r382309938", "body": "Ooh, yeah, the odk subdirectory was from the StoragePathProvider PR. Sorry I didn't think through that before! Looks great now.", "bodyText": "Ooh, yeah, the odk subdirectory was from the StoragePathProvider PR. Sorry I didn't think through that before! Looks great now.", "bodyHTML": "<p dir=\"auto\">Ooh, yeah, the odk subdirectory was from the StoragePathProvider PR. Sorry I didn't think through that before! Looks great now.</p>", "author": "lognaturel", "createdAt": "2020-02-20T23:09:02Z", "path": "collect_app/src/androidTest/java/org/odk/collect/android/ResetAppStateTest.java", "diffHunk": "@@ -166,7 +166,7 @@ private void setupTestSettings() throws IOException {\n \n         assertTrue(new File(storagePathProvider.getDirPath(StorageSubdirectory.SETTINGS)).exists() || new File(storagePathProvider.getDirPath(StorageSubdirectory.SETTINGS)).mkdir());\n         assertTrue(new File(storagePathProvider.getDirPath(StorageSubdirectory.SETTINGS) + \"/collect.settings\").createNewFile());\n-        assertTrue(new File(storagePathProvider.getDirPath(StorageSubdirectory.ODK) + \"/collect.settings\").createNewFile());\n+        assertTrue(new File(storagePathProvider.getStorageRootDirPath() + \"/collect.settings\").createNewFile());", "originalCommit": "729864dc4ec795ecbbdc03bfbccaff8579ac7c47", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2aec2cef76323fcadf43baad6f780922420fbea9", "changed_code": [{"header": "diff --git a/collect_app/src/androidTest/java/org/odk/collect/android/ResetAppStateTest.java b/collect_app/src/androidTest/java/org/odk/collect/android/ResetAppStateTest.java\nindex 7aa6ca9095..023cebfdfe 100644\n--- a/collect_app/src/androidTest/java/org/odk/collect/android/ResetAppStateTest.java\n+++ b/collect_app/src/androidTest/java/org/odk/collect/android/ResetAppStateTest.java\n", "chunk": "@@ -166,7 +167,7 @@ public class ResetAppStateTest {\n \n         assertTrue(new File(storagePathProvider.getDirPath(StorageSubdirectory.SETTINGS)).exists() || new File(storagePathProvider.getDirPath(StorageSubdirectory.SETTINGS)).mkdir());\n         assertTrue(new File(storagePathProvider.getDirPath(StorageSubdirectory.SETTINGS) + \"/collect.settings\").createNewFile());\n-        assertTrue(new File(storagePathProvider.getStorageRootDirPath() + \"/collect.settings\").createNewFile());\n+        assertTrue(new File(storagePathProvider.getDirPath(StorageSubdirectory.ODK) + \"/collect.settings\").createNewFile());\n     }\n \n     private void setupTestFormsDatabase() {\n", "next_change": {"commit": "13796856d1461ca2c2ff5165f337686a595c807d", "changed_code": [{"header": "diff --git a/collect_app/src/androidTest/java/org/odk/collect/android/ResetAppStateTest.java b/collect_app/src/androidTest/java/org/odk/collect/android/ResetAppStateTest.java\nindex 023cebfdfe..f82877a337 100644\n--- a/collect_app/src/androidTest/java/org/odk/collect/android/ResetAppStateTest.java\n+++ b/collect_app/src/androidTest/java/org/odk/collect/android/ResetAppStateTest.java\n", "chunk": "@@ -167,7 +167,7 @@ public class ResetAppStateTest {\n \n         assertTrue(new File(storagePathProvider.getDirPath(StorageSubdirectory.SETTINGS)).exists() || new File(storagePathProvider.getDirPath(StorageSubdirectory.SETTINGS)).mkdir());\n         assertTrue(new File(storagePathProvider.getDirPath(StorageSubdirectory.SETTINGS) + \"/collect.settings\").createNewFile());\n-        assertTrue(new File(storagePathProvider.getDirPath(StorageSubdirectory.ODK) + \"/collect.settings\").createNewFile());\n+        assertTrue(new File(storagePathProvider.getStorageRootDirPath() + \"/collect.settings\").createNewFile());\n     }\n \n     private void setupTestFormsDatabase() {\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjMxNTg4Ng==", "url": "https://github.com/getodk/collect/pull/3623#discussion_r382315886", "body": "Nice.", "bodyText": "Nice.", "bodyHTML": "<p dir=\"auto\">Nice.</p>", "author": "lognaturel", "createdAt": "2020-02-20T23:26:43Z", "path": "collect_app/src/main/java/org/odk/collect/android/utilities/AdminPasswordProvider.java", "diffHunk": "@@ -0,0 +1,22 @@\n+package org.odk.collect.android.utilities;\n+\n+import org.odk.collect.android.preferences.AdminSharedPreferences;\n+\n+import static org.odk.collect.android.preferences.AdminKeys.KEY_ADMIN_PW;\n+\n+public class AdminPasswordProvider {", "originalCommit": "729864dc4ec795ecbbdc03bfbccaff8579ac7c47", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2aec2cef76323fcadf43baad6f780922420fbea9", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/utilities/AdminPasswordProvider.java b/collect_app/src/main/java/org/odk/collect/android/utilities/AdminPasswordProvider.java\ndeleted file mode 100644\nindex 2972e56d3a..0000000000\n--- a/collect_app/src/main/java/org/odk/collect/android/utilities/AdminPasswordProvider.java\n+++ /dev/null\n", "chunk": "@@ -1,22 +0,0 @@\n-package org.odk.collect.android.utilities;\n-\n-import org.odk.collect.android.preferences.AdminSharedPreferences;\n-\n-import static org.odk.collect.android.preferences.AdminKeys.KEY_ADMIN_PW;\n-\n-public class AdminPasswordProvider {\n-    private final AdminSharedPreferences adminSharedPreferences;\n-\n-    public AdminPasswordProvider(AdminSharedPreferences adminSharedPreferences) {\n-        this.adminSharedPreferences = adminSharedPreferences;\n-    }\n-\n-    public boolean isAdminPasswordSet() {\n-        String adminPassword = getAdminPassword();\n-        return adminPassword != null && !adminPassword.isEmpty();\n-    }\n-\n-    public String getAdminPassword() {\n-        return (String) adminSharedPreferences.get(KEY_ADMIN_PW);\n-    }\n-}\n", "next_change": {"commit": "46e4f2c9aa775036bb40fa0a2a143d1515172dff", "changed_code": [{"header": "diff --git a/collect_app/src/main/java/org/odk/collect/android/utilities/AdminPasswordProvider.java b/collect_app/src/main/java/org/odk/collect/android/utilities/AdminPasswordProvider.java\nnew file mode 100644\nindex 0000000000..fb0ad03010\n--- /dev/null\n+++ b/collect_app/src/main/java/org/odk/collect/android/utilities/AdminPasswordProvider.java\n", "chunk": "@@ -0,0 +1,22 @@\n+package org.odk.collect.android.utilities;\n+\n+import org.odk.collect.android.preferences.AdminSharedPreferences;\n+\n+import static org.odk.collect.android.preferences.AdminKeys.KEY_ADMIN_PW;\n+\n+public class AdminPasswordProvider {\n+    private AdminSharedPreferences adminSharedPreferences;\n+\n+    public AdminPasswordProvider(AdminSharedPreferences adminSharedPreferences) {\n+        this.adminSharedPreferences = adminSharedPreferences;\n+    }\n+\n+    public boolean isAdminPasswordSet() {\n+        String adminPassword = getAdminPassword();\n+        return adminPassword != null && !adminPassword.isEmpty();\n+    }\n+\n+    public String getAdminPassword() {\n+        return (String) adminSharedPreferences.get(KEY_ADMIN_PW);\n+    }\n+}\n", "next_change": null}]}}]}}, {"oid": "f2872ef335f41998ea1910c2248c0005fbd6e26d", "url": "https://github.com/getodk/collect/commit/f2872ef335f41998ea1910c2248c0005fbd6e26d", "message": "Bumped minSdkVersion to 21", "committedDate": "2020-02-21T08:48:56Z", "type": "forcePushed"}, {"oid": "fcc9ce6601e956bffc3ee3a5266260461835dbc5", "url": "https://github.com/getodk/collect/commit/fcc9ce6601e956bffc3ee3a5266260461835dbc5", "message": "Fixed build", "committedDate": "2020-02-21T08:57:48Z", "type": "forcePushed"}, {"oid": "02ce2d10ac4c8cb69a302338ef91ef61dc75b2c0", "url": "https://github.com/getodk/collect/commit/02ce2d10ac4c8cb69a302338ef91ef61dc75b2c0", "message": "Code improvements", "committedDate": "2020-02-21T10:48:32Z", "type": "forcePushed"}, {"oid": "6f4a4f8aecd1888d249d98a5a72188bf64a767a7", "url": "https://github.com/getodk/collect/commit/6f4a4f8aecd1888d249d98a5a72188bf64a767a7", "message": "Code improvements", "committedDate": "2020-02-21T10:50:53Z", "type": "forcePushed"}, {"oid": "388ebb79402c7b6db2c896317b4d041488315b01", "url": "https://github.com/getodk/collect/commit/388ebb79402c7b6db2c896317b4d041488315b01", "message": "Removed unused method", "committedDate": "2020-02-21T12:05:32Z", "type": "forcePushed"}, {"oid": "244fbb9720ccacf6b16083a84b3173ef77e40511", "url": "https://github.com/getodk/collect/commit/244fbb9720ccacf6b16083a84b3173ef77e40511", "message": "Fixed creating StorageMigrationDialog", "committedDate": "2020-02-21T12:22:07Z", "type": "forcePushed"}, {"oid": "770de7c1382d404c947b7e59e195d9735c58621e", "url": "https://github.com/getodk/collect/commit/770de7c1382d404c947b7e59e195d9735c58621e", "message": "Fixed storage paths in tests", "committedDate": "2020-02-21T16:53:18Z", "type": "forcePushed"}, {"oid": "f5c68ce7cc930bba387d3b156546d2cb6325f8f3", "url": "https://github.com/getodk/collect/commit/f5c68ce7cc930bba387d3b156546d2cb6325f8f3", "message": "Update map layer path instead of resetting it", "committedDate": "2020-02-21T17:23:21Z", "type": "forcePushed"}, {"oid": "b6ffab9b386f928f5c0b0c64b2b3440bb3388d21", "url": "https://github.com/getodk/collect/commit/b6ffab9b386f928f5c0b0c64b2b3440bb3388d21", "message": "Improved dealing with the banner visibility", "committedDate": "2020-02-21T08:15:00Z", "type": "forcePushed"}, {"oid": "5443cc29f39e742181db5c4820b0b758efdb42e1", "url": "https://github.com/getodk/collect/commit/5443cc29f39e742181db5c4820b0b758efdb42e1", "message": "Code improvements", "committedDate": "2020-02-24T13:26:36Z", "type": "forcePushed"}, {"oid": "4533c7200e4426537b16fa2649a41063397e6d8c", "url": "https://github.com/getodk/collect/commit/4533c7200e4426537b16fa2649a41063397e6d8c", "message": "Reset ReferenceManager", "committedDate": "2020-02-25T07:28:12Z", "type": "forcePushed"}, {"oid": "05b08801043d78e0486fe97c599c16cd2c7b22d9", "url": "https://github.com/getodk/collect/commit/05b08801043d78e0486fe97c599c16cd2c7b22d9", "message": "Improved handling offline map layer paths", "committedDate": "2020-02-25T09:06:13Z", "type": "forcePushed"}, {"oid": "13c531d19c4dbeeea6c961644f4ad147c3f93333", "url": "https://github.com/getodk/collect/commit/13c531d19c4dbeeea6c961644f4ad147c3f93333", "message": "Improved handling offline map layer paths", "committedDate": "2020-02-25T13:06:00Z", "type": "forcePushed"}, {"oid": "2aec2cef76323fcadf43baad6f780922420fbea9", "url": "https://github.com/getodk/collect/commit/2aec2cef76323fcadf43baad6f780922420fbea9", "message": "Added possible mgration results", "committedDate": "2020-02-26T10:57:34Z", "type": "commit"}, {"oid": "abe7f65a4c39aa7ba2ef59da653235197104623f", "url": "https://github.com/getodk/collect/commit/abe7f65a4c39aa7ba2ef59da653235197104623f", "message": "Implemented isEnoughSpaceToPerformMigartion() method", "committedDate": "2020-02-26T10:57:34Z", "type": "commit"}, {"oid": "2ac1f4728dae8cd4bab72e804cc6d59982f8a5ae", "url": "https://github.com/getodk/collect/commit/2ac1f4728dae8cd4bab72e804cc6d59982f8a5ae", "message": "Implemented StorageMigrator", "committedDate": "2020-02-26T10:57:34Z", "type": "commit"}, {"oid": "08a57b78f017756ce3cd0cafb80ea7fff89ca8fb", "url": "https://github.com/getodk/collect/commit/08a57b78f017756ce3cd0cafb80ea7fff89ca8fb", "message": "Don't use storage paths in static fields because old values might persist after migrating", "committedDate": "2020-02-26T10:57:34Z", "type": "commit"}, {"oid": "d3f83e105d37ec3dc009a4dff509ede04cb7126b", "url": "https://github.com/getodk/collect/commit/d3f83e105d37ec3dc009a4dff509ede04cb7126b", "message": "Reopen databases to update paths", "committedDate": "2020-02-26T10:57:34Z", "type": "commit"}, {"oid": "0b502d280c45aa7097bfa6941fdc5480d4af0485", "url": "https://github.com/getodk/collect/commit/0b502d280c45aa7097bfa6941fdc5480d4af0485", "message": "Created StorageEraser class", "committedDate": "2020-02-26T10:57:34Z", "type": "commit"}, {"oid": "644e2adc538e325109460cdb95bc18aff7edfa92", "url": "https://github.com/getodk/collect/commit/644e2adc538e325109460cdb95bc18aff7edfa92", "message": "Code improvements", "committedDate": "2020-02-26T10:57:34Z", "type": "commit"}, {"oid": "87aa72e8dcfa84b10ba0ed39660d616ae64a12df", "url": "https://github.com/getodk/collect/commit/87aa72e8dcfa84b10ba0ed39660d616ae64a12df", "message": "Block uploading/downloading forms if migartion is being performed", "committedDate": "2020-02-26T10:57:34Z", "type": "commit"}, {"oid": "0a29c353c2ff8edf82bd9887a6f930eed5e5cf20", "url": "https://github.com/getodk/collect/commit/0a29c353c2ff8edf82bd9887a6f930eed5e5cf20", "message": "Added the banner", "committedDate": "2020-02-26T11:00:07Z", "type": "commit"}, {"oid": "0fee5bb00098971bedf3c61fd56402864bcfeccc", "url": "https://github.com/getodk/collect/commit/0fee5bb00098971bedf3c61fd56402864bcfeccc", "message": "Added StorageMigratorTask", "committedDate": "2020-02-26T11:02:15Z", "type": "commit"}, {"oid": "986271fcd32c40c7cc69fdcda6fccd06ccdc6508", "url": "https://github.com/getodk/collect/commit/986271fcd32c40c7cc69fdcda6fccd06ccdc6508", "message": "Moved classes responsible for migation to one dir", "committedDate": "2020-02-26T11:02:15Z", "type": "commit"}, {"oid": "9f2f6aed514bd0f2ee5d029e42630be344e3de3a", "url": "https://github.com/getodk/collect/commit/9f2f6aed514bd0f2ee5d029e42630be344e3de3a", "message": "Added StorageMigratorTest", "committedDate": "2020-02-26T11:02:15Z", "type": "commit"}, {"oid": "002ac82208ad3684a556dfdfcbb9f850cfcbfad6", "url": "https://github.com/getodk/collect/commit/002ac82208ad3684a556dfdfcbb9f850cfcbfad6", "message": "Code improvements", "committedDate": "2020-02-26T11:02:15Z", "type": "commit"}, {"oid": "dcf15ba45d62149a114c925a59f653928bf3c4da", "url": "https://github.com/getodk/collect/commit/dcf15ba45d62149a114c925a59f653928bf3c4da", "message": "Added StorageMigrationDialog", "committedDate": "2020-02-26T11:03:02Z", "type": "commit"}, {"oid": "17e476115da9892b9be2d92ab1b473b99e578f4c", "url": "https://github.com/getodk/collect/commit/17e476115da9892b9be2d92ab1b473b99e578f4c", "message": "Replace AsyncTask with Service", "committedDate": "2020-02-26T11:03:26Z", "type": "commit"}, {"oid": "1963e41fa266b9c0c9f953022814cc5828b31ebc", "url": "https://github.com/getodk/collect/commit/1963e41fa266b9c0c9f953022814cc5828b31ebc", "message": "Gray out the messgage after starting migration", "committedDate": "2020-02-26T11:03:26Z", "type": "commit"}, {"oid": "9a1de5ee7ba45f4baa1ddae6cf33207a8069b2a3", "url": "https://github.com/getodk/collect/commit/9a1de5ee7ba45f4baa1ddae6cf33207a8069b2a3", "message": "Removed unused string", "committedDate": "2020-02-26T11:03:26Z", "type": "commit"}, {"oid": "5adaaedb6b4a95936f15c3ace52e17091cd3eac7", "url": "https://github.com/getodk/collect/commit/5adaaedb6b4a95936f15c3ace52e17091cd3eac7", "message": "Use MaterialFullScreenDialogFragment for creating StorageMigrationDialog", "committedDate": "2020-02-26T11:03:26Z", "type": "commit"}, {"oid": "71640c3f30f80c4cfc7e80b8cf796e9a5e16483d", "url": "https://github.com/getodk/collect/commit/71640c3f30f80c4cfc7e80b8cf796e9a5e16483d", "message": "Improved tests", "committedDate": "2020-02-26T11:03:26Z", "type": "commit"}, {"oid": "4644f0f351ac9b4fbbc9eb84f1047fd9d3acf6cf", "url": "https://github.com/getodk/collect/commit/4644f0f351ac9b4fbbc9eb84f1047fd9d3acf6cf", "message": "Use Livedata instead of broadcast receivers", "committedDate": "2020-02-26T11:05:17Z", "type": "commit"}, {"oid": "510f4872da1f9b105f8490ef506f2d46a7d646d6", "url": "https://github.com/getodk/collect/commit/510f4872da1f9b105f8490ef506f2d46a7d646d6", "message": "Added CLEARING_OLD_DATA status", "committedDate": "2020-02-26T11:05:45Z", "type": "commit"}, {"oid": "84cff52a1c057bae720a9631f25b9c31fb5acc66", "url": "https://github.com/getodk/collect/commit/84cff52a1c057bae720a9631f25b9c31fb5acc66", "message": "Fixed commented line", "committedDate": "2020-02-26T11:05:45Z", "type": "commit"}, {"oid": "05515702f117197e15a603b4bdbe777e6bfae960", "url": "https://github.com/getodk/collect/commit/05515702f117197e15a603b4bdbe777e6bfae960", "message": "Improved managing softKeyboard in MaterialFullScreenDialogFragment", "committedDate": "2020-02-26T11:05:45Z", "type": "commit"}, {"oid": "90fceebc88237b1ff7a6b1b0855b592c5617b0f8", "url": "https://github.com/getodk/collect/commit/90fceebc88237b1ff7a6b1b0855b592c5617b0f8", "message": "Reverted changes I made by mistake", "committedDate": "2020-02-26T11:05:45Z", "type": "commit"}, {"oid": "f49f991bf12f226e5d58d31538e969952628b0b2", "url": "https://github.com/getodk/collect/commit/f49f991bf12f226e5d58d31538e969952628b0b2", "message": "Code improvements", "committedDate": "2020-02-26T11:05:45Z", "type": "commit"}, {"oid": "b5d7096f4c31f43899fd3c4ee8592ce08b2a9aaa", "url": "https://github.com/getodk/collect/commit/b5d7096f4c31f43899fd3c4ee8592ce08b2a9aaa", "message": "Get rid of dynamic progress status", "committedDate": "2020-02-26T11:06:04Z", "type": "commit"}, {"oid": "0115e56d22efeb15f4543ff851da4bf805f86b3f", "url": "https://github.com/getodk/collect/commit/0115e56d22efeb15f4543ff851da4bf805f86b3f", "message": "Code improvemenets", "committedDate": "2020-02-26T11:06:31Z", "type": "commit"}, {"oid": "a9a837e7180f7aab93b5ee1045a2e60f8c278d8a", "url": "https://github.com/getodk/collect/commit/a9a837e7180f7aab93b5ee1045a2e60f8c278d8a", "message": "Fixed getValuesFromInstanceObject() method", "committedDate": "2020-02-26T11:06:31Z", "type": "commit"}, {"oid": "73e6842819311ded7b50ab377e716c7d41a5452a", "url": "https://github.com/getodk/collect/commit/73e6842819311ded7b50ab377e716c7d41a5452a", "message": "Code improvements to make migration faster", "committedDate": "2020-02-26T11:06:31Z", "type": "commit"}, {"oid": "37c513832f5d6d4afdc3f2d25b44d342a128014b", "url": "https://github.com/getodk/collect/commit/37c513832f5d6d4afdc3f2d25b44d342a128014b", "message": "Use the banner to display migration results", "committedDate": "2020-02-26T11:06:47Z", "type": "commit"}, {"oid": "63b248b10f15104e7334e2b8216aef858b54b07c", "url": "https://github.com/getodk/collect/commit/63b248b10f15104e7334e2b8216aef858b54b07c", "message": "Avoid calling onStorageMigrationFinish every time a user returns to the app", "committedDate": "2020-02-26T11:06:47Z", "type": "commit"}, {"oid": "eaa69e34c25a8ed4ac7bd0e3aaef4ed41029db70", "url": "https://github.com/getodk/collect/commit/eaa69e34c25a8ed4ac7bd0e3aaef4ed41029db70", "message": "Updated StorageMigrationDialog", "committedDate": "2020-02-26T11:06:47Z", "type": "commit"}, {"oid": "7bb0bd5e144f7f8909f960e42a77fbdf00bf99a1", "url": "https://github.com/getodk/collect/commit/7bb0bd5e144f7f8909f960e42a77fbdf00bf99a1", "message": "Fixed migration result observer", "committedDate": "2020-02-26T11:06:47Z", "type": "commit"}, {"oid": "a8c1fceb126522f0e6ac02c6c650dafcb9745801", "url": "https://github.com/getodk/collect/commit/a8c1fceb126522f0e6ac02c6c650dafcb9745801", "message": "Ask for admin password if specyfied", "committedDate": "2020-02-26T11:06:47Z", "type": "commit"}, {"oid": "f7ab62544dfda115e4a1e9bf0e2f6fdc3b3030f6", "url": "https://github.com/getodk/collect/commit/f7ab62544dfda115e4a1e9bf0e2f6fdc3b3030f6", "message": "Don't save migration result in shared prefs", "committedDate": "2020-02-26T11:06:47Z", "type": "commit"}, {"oid": "1a4fd23153181b9a7446d0f92d08144a47c7d560", "url": "https://github.com/getodk/collect/commit/1a4fd23153181b9a7446d0f92d08144a47c7d560", "message": "Display error message in StorageMigrationDialog if migration failed", "committedDate": "2020-02-26T11:07:13Z", "type": "commit"}, {"oid": "c839b7631d4da164b0f408945390078c6ef98366", "url": "https://github.com/getodk/collect/commit/c839b7631d4da164b0f408945390078c6ef98366", "message": "Ask for admin pass when a user starts migration not when they open the migration dialog", "committedDate": "2020-02-26T11:07:13Z", "type": "commit"}, {"oid": "07091fdc081510e516b82e2838087d3b566c9f11", "url": "https://github.com/getodk/collect/commit/07091fdc081510e516b82e2838087d3b566c9f11", "message": "Fixed buttons visiblility in the banner", "committedDate": "2020-02-26T11:07:13Z", "type": "commit"}, {"oid": "8a41d51163c58863480f1716eb7b5fdcf975af88", "url": "https://github.com/getodk/collect/commit/8a41d51163c58863480f1716eb7b5fdcf975af88", "message": "Fixed pmd", "committedDate": "2020-02-26T11:07:13Z", "type": "commit"}, {"oid": "e3815b8de43bfe50521a7a2f1fa710a43840ef7c", "url": "https://github.com/getodk/collect/commit/e3815b8de43bfe50521a7a2f1fa710a43840ef7c", "message": "Make sure the progress circle is visble", "committedDate": "2020-02-26T11:07:13Z", "type": "commit"}, {"oid": "4d198c9fbf4f8917d02b659848ffc20ef046ff52", "url": "https://github.com/getodk/collect/commit/4d198c9fbf4f8917d02b659848ffc20ef046ff52", "message": "Code improvements", "committedDate": "2020-02-26T11:07:13Z", "type": "commit"}, {"oid": "5fd161fa4c7139e1f2ff66db5893fdb887bee5f4", "url": "https://github.com/getodk/collect/commit/5fd161fa4c7139e1f2ff66db5893fdb887bee5f4", "message": "Don't keep the banner with success result visible for ever", "committedDate": "2020-02-26T11:07:13Z", "type": "commit"}, {"oid": "f03d4a8d0c4c125a50f75fb608b68ed702c38795", "url": "https://github.com/getodk/collect/commit/f03d4a8d0c4c125a50f75fb608b68ed702c38795", "message": "Code improvements", "committedDate": "2020-02-26T11:07:13Z", "type": "commit"}, {"oid": "46e4f2c9aa775036bb40fa0a2a143d1515172dff", "url": "https://github.com/getodk/collect/commit/46e4f2c9aa775036bb40fa0a2a143d1515172dff", "message": "Factored out AdminPasswordProvider", "committedDate": "2020-02-26T11:07:40Z", "type": "commit"}, {"oid": "88f70e451abe2987e393f36ea1c1be70af4bec66", "url": "https://github.com/getodk/collect/commit/88f70e451abe2987e393f36ea1c1be70af4bec66", "message": "Code improvements", "committedDate": "2020-02-26T11:07:40Z", "type": "commit"}, {"oid": "13796856d1461ca2c2ff5165f337686a595c807d", "url": "https://github.com/getodk/collect/commit/13796856d1461ca2c2ff5165f337686a595c807d", "message": "Get rid of additional odk dir on scoped storage", "committedDate": "2020-02-26T11:08:51Z", "type": "commit"}, {"oid": "a775fa8feb35e489fa65a9129b09ef5e338bf5a9", "url": "https://github.com/getodk/collect/commit/a775fa8feb35e489fa65a9129b09ef5e338bf5a9", "message": "Revert the change I made by mistake", "committedDate": "2020-02-26T11:08:51Z", "type": "commit"}, {"oid": "e8c792063a9b0c171775e5e8e5f6ec1d6e0c392e", "url": "https://github.com/getodk/collect/commit/e8c792063a9b0c171775e5e8e5f6ec1d6e0c392e", "message": "Avoid multiclicking in StorageMigrationDialog", "committedDate": "2020-02-26T11:08:51Z", "type": "commit"}, {"oid": "534c6a779f52120d784cee4f0ad9b5da297baac9", "url": "https://github.com/getodk/collect/commit/534c6a779f52120d784cee4f0ad9b5da297baac9", "message": "Fixed dismissing the banner", "committedDate": "2020-02-26T11:08:51Z", "type": "commit"}, {"oid": "d7641c17fd91dc7fab025923c62fd6736dfb0a94", "url": "https://github.com/getodk/collect/commit/d7641c17fd91dc7fab025923c62fd6736dfb0a94", "message": "Fixed pmd", "committedDate": "2020-02-26T11:08:51Z", "type": "commit"}]}