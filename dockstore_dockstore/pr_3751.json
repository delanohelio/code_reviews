{"pr_number": 3751, "pr_title": "Feature/3675/store license info", "pr_author": "garyluu", "pr_createdAt": "2020-08-17T21:17:52Z", "pr_url": "https://github.com/dockstore/dockstore/pull/3751", "merge_commit": "f34f61677ad6040179692e15e9db5527e5ee16f4", "timeline": [{"oid": "431caaaed5d03cbbf038a4fe646dd68bb71eab90", "url": "https://github.com/dockstore/dockstore/commit/431caaaed5d03cbbf038a4fe646dd68bb71eab90", "message": "Update GitHub API dependency", "committedDate": "2020-08-17T17:43:48Z", "type": "commit"}, {"oid": "3c7a4b48d141418adb86d58ebc76c948d217ab2b", "url": "https://github.com/dockstore/dockstore/commit/3c7a4b48d141418adb86d58ebc76c948d217ab2b", "message": "Add LicenseInformation", "committedDate": "2020-08-17T20:40:16Z", "type": "commit"}, {"oid": "a445590694047efe301d89a063b05130fc6a19ba", "url": "https://github.com/dockstore/dockstore/commit/a445590694047efe301d89a063b05130fc6a19ba", "message": "Add a test", "committedDate": "2020-08-17T21:23:55Z", "type": "commit"}, {"oid": "64b70b7f8187a128e36c6b7db21f836448715cd3", "url": "https://github.com/dockstore/dockstore/commit/64b70b7f8187a128e36c6b7db21f836448715cd3", "message": "Add migration", "committedDate": "2020-08-17T21:23:55Z", "type": "commit"}, {"oid": "465e9c8db0a44b137c47ae6d7032931935ef2802", "url": "https://github.com/dockstore/dockstore/commit/465e9c8db0a44b137c47ae6d7032931935ef2802", "message": "Add TODOs", "committedDate": "2020-08-17T21:23:55Z", "type": "forcePushed"}, {"oid": "c5aa0215ae64cdd1482f6b7db663115638f97dee", "url": "https://github.com/dockstore/dockstore/commit/c5aa0215ae64cdd1482f6b7db663115638f97dee", "message": "Add TODOs", "committedDate": "2020-08-18T15:15:50Z", "type": "commit"}, {"oid": "8b2b911c2913e304bdb6b2e24d1d858db1e7f9ed", "url": "https://github.com/dockstore/dockstore/commit/8b2b911c2913e304bdb6b2e24d1d858db1e7f9ed", "message": "Move to repository level", "committedDate": "2020-08-18T15:15:50Z", "type": "commit"}, {"oid": "39a482d8590b253ab7c9fb461913b565d97c2bbf", "url": "https://github.com/dockstore/dockstore/commit/39a482d8590b253ab7c9fb461913b565d97c2bbf", "message": "Handle no license", "committedDate": "2020-08-18T15:15:50Z", "type": "commit"}, {"oid": "ac3a69175b505c7f30002c22bb84f2fb955ed42b", "url": "https://github.com/dockstore/dockstore/commit/ac3a69175b505c7f30002c22bb84f2fb955ed42b", "message": "Update test", "committedDate": "2020-08-18T15:15:50Z", "type": "commit"}, {"oid": "53882a4edee0e4dc674de76240012b1641ab7ce8", "url": "https://github.com/dockstore/dockstore/commit/53882a4edee0e4dc674de76240012b1641ab7ce8", "message": "Update swagger/openapi", "committedDate": "2020-08-18T15:15:50Z", "type": "commit"}, {"oid": "ea7436d4a15aa95079b121e5db435691605091db", "url": "https://github.com/dockstore/dockstore/commit/ea7436d4a15aa95079b121e5db435691605091db", "message": "Add workflow integration tests", "committedDate": "2020-08-18T15:46:20Z", "type": "commit"}, {"oid": "62f2abf2761a677447d1193cdd9871800e13fd79", "url": "https://github.com/dockstore/dockstore/commit/62f2abf2761a677447d1193cdd9871800e13fd79", "message": "Add tests", "committedDate": "2020-08-18T17:58:35Z", "type": "commit"}, {"oid": "89b764140e3bff787bc83484247eab9e89ec7b45", "url": "https://github.com/dockstore/dockstore/commit/89b764140e3bff787bc83484247eab9e89ec7b45", "message": "Generalize the setting of license information, support tools, non-null license information", "committedDate": "2020-08-18T17:59:50Z", "type": "commit"}, {"oid": "89b764140e3bff787bc83484247eab9e89ec7b45", "url": "https://github.com/dockstore/dockstore/commit/89b764140e3bff787bc83484247eab9e89ec7b45", "message": "Generalize the setting of license information, support tools, non-null license information", "committedDate": "2020-08-18T17:59:50Z", "type": "forcePushed"}, {"oid": "ad849abb5390d0237aa8331de0f9adb76a2b29d1", "url": "https://github.com/dockstore/dockstore/commit/ad849abb5390d0237aa8331de0f9adb76a2b29d1", "message": "Fix checkstyle", "committedDate": "2020-08-18T19:26:53Z", "type": "commit"}, {"oid": "7b20ea9195f3274e480abbbcf78d36c9f498b78b", "url": "https://github.com/dockstore/dockstore/commit/7b20ea9195f3274e480abbbcf78d36c9f498b78b", "message": "Don't set license name on register", "committedDate": "2020-08-19T23:25:05Z", "type": "commit"}, {"oid": "9b7e82678f0f22eb25784ad1681d2fe65c831d09", "url": "https://github.com/dockstore/dockstore/commit/9b7e82678f0f22eb25784ad1681d2fe65c831d09", "message": "Never return null license information", "committedDate": "2020-08-20T15:08:30Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDMwMDQwMA==", "url": "https://github.com/dockstore/dockstore/pull/3751#discussion_r474300400", "body": "commented code likely to be uncommented?", "bodyText": "commented code likely to be uncommented?", "bodyHTML": "<p dir=\"auto\">commented code likely to be uncommented?</p>", "author": "denis-yuen", "createdAt": "2020-08-20T22:10:48Z", "path": "dockstore-integration-testing/src/test/java/io/dockstore/client/cli/GeneralIT.java", "diffHunk": "@@ -1357,7 +1357,13 @@ public void testManualToAuto() {\n         ContainersApi toolsApi = setupWebService();\n         DockstoreTool tool = getQuayContainer(gitUrl);\n         DockstoreTool toolTest = toolsApi.registerManual(tool);\n-        toolsApi.refresh(toolTest.getId());\n+        // Assert.assertEquals(\"Should be able to get license after manual register\", \"Apache License 2.0\", toolTest.getLicenseInformation().getLicenseName());", "originalCommit": "9b7e82678f0f22eb25784ad1681d2fe65c831d09", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e4488a8481c1577eeb8bd8f118fcbfdb58014ecd", "changed_code": [{"header": "diff --git a/dockstore-integration-testing/src/test/java/io/dockstore/client/cli/GeneralIT.java b/dockstore-integration-testing/src/test/java/io/dockstore/client/cli/GeneralIT.java\nindex 2d2432e3f..d5516c180 100644\n--- a/dockstore-integration-testing/src/test/java/io/dockstore/client/cli/GeneralIT.java\n+++ b/dockstore-integration-testing/src/test/java/io/dockstore/client/cli/GeneralIT.java\n", "chunk": "@@ -1357,8 +1357,7 @@ public class GeneralIT extends BaseIT {\n         ContainersApi toolsApi = setupWebService();\n         DockstoreTool tool = getQuayContainer(gitUrl);\n         DockstoreTool toolTest = toolsApi.registerManual(tool);\n-        // Assert.assertEquals(\"Should be able to get license after manual register\", \"Apache License 2.0\", toolTest.getLicenseInformation().getLicenseName());\n-        Assert.assertNull(\"Should not be able to get license after manual register\", toolTest.getLicenseInformation().getLicenseName());\n+        Assert.assertEquals(\"Should be able to get license after manual register\", \"Apache License 2.0\", toolTest.getLicenseInformation().getLicenseName());\n \n         // Clear license name to mimic old entry that does not have a license associated with it\n         testingPostgres.runUpdateStatement(\"update tool set licensename=null\");\n", "next_change": null}]}, "revised_code_in_main": {"commit": "f34f61677ad6040179692e15e9db5527e5ee16f4", "changed_code": [{"header": "diff --git a/dockstore-integration-testing/src/test/java/io/dockstore/client/cli/GeneralIT.java b/dockstore-integration-testing/src/test/java/io/dockstore/client/cli/GeneralIT.java\nindex 2d2432e3f..d5516c180 100644\n--- a/dockstore-integration-testing/src/test/java/io/dockstore/client/cli/GeneralIT.java\n+++ b/dockstore-integration-testing/src/test/java/io/dockstore/client/cli/GeneralIT.java\n", "chunk": "@@ -1357,8 +1357,7 @@ public class GeneralIT extends BaseIT {\n         ContainersApi toolsApi = setupWebService();\n         DockstoreTool tool = getQuayContainer(gitUrl);\n         DockstoreTool toolTest = toolsApi.registerManual(tool);\n-        // Assert.assertEquals(\"Should be able to get license after manual register\", \"Apache License 2.0\", toolTest.getLicenseInformation().getLicenseName());\n-        Assert.assertNull(\"Should not be able to get license after manual register\", toolTest.getLicenseInformation().getLicenseName());\n+        Assert.assertEquals(\"Should be able to get license after manual register\", \"Apache License 2.0\", toolTest.getLicenseInformation().getLicenseName());\n \n         // Clear license name to mimic old entry that does not have a license associated with it\n         testingPostgres.runUpdateStatement(\"update tool set licensename=null\");\n", "next_change": {"commit": "1cd21501145756b9b402710cf9c94273f4dee2ee", "changed_code": [{"header": "diff --git a/dockstore-integration-testing/src/test/java/io/dockstore/client/cli/GeneralIT.java b/dockstore-integration-testing/src/test/java/io/dockstore/client/cli/GeneralIT.java\nindex d5516c180..3b8409c69 100644\n--- a/dockstore-integration-testing/src/test/java/io/dockstore/client/cli/GeneralIT.java\n+++ b/dockstore-integration-testing/src/test/java/io/dockstore/client/cli/GeneralIT.java\n", "chunk": "@@ -1357,12 +1583,12 @@ public class GeneralIT extends BaseIT {\n         ContainersApi toolsApi = setupWebService();\n         DockstoreTool tool = getQuayContainer(gitUrl);\n         DockstoreTool toolTest = toolsApi.registerManual(tool);\n-        Assert.assertEquals(\"Should be able to get license after manual register\", \"Apache License 2.0\", toolTest.getLicenseInformation().getLicenseName());\n+        assertEquals(\"Should be able to get license after manual register\", \"Apache License 2.0\", toolTest.getLicenseInformation().getLicenseName());\n \n         // Clear license name to mimic old entry that does not have a license associated with it\n         testingPostgres.runUpdateStatement(\"update tool set licensename=null\");\n         DockstoreTool refresh = toolsApi.refresh(toolTest.getId());\n-        Assert.assertEquals(\"Should be able to get license after refresh\", \"Apache License 2.0\", refresh.getLicenseInformation().getLicenseName());\n+        assertEquals(\"Should be able to get license after refresh\", \"Apache License 2.0\", refresh.getLicenseInformation().getLicenseName());\n \n         final long count = testingPostgres.runSelectStatement(\n             \"select count(*) from tool where mode = '\" + DockstoreTool.ModeEnum.AUTO_DETECT_QUAY_TAGS_AUTOMATED_BUILDS + \"' and giturl = '\"\n", "next_change": {"commit": "84c62e295859ccfe94749e8159b0d5b8874e260f", "changed_code": [{"header": "diff --git a/dockstore-integration-testing/src/test/java/io/dockstore/client/cli/GeneralIT.java b/dockstore-integration-testing/src/test/java/io/dockstore/client/cli/GeneralIT.java\nindex 3b8409c69..0a7610e7a 100644\n--- a/dockstore-integration-testing/src/test/java/io/dockstore/client/cli/GeneralIT.java\n+++ b/dockstore-integration-testing/src/test/java/io/dockstore/client/cli/GeneralIT.java\n", "chunk": "@@ -1578,22 +1464,22 @@ public class GeneralIT extends BaseIT {\n      * Tests that manually adding a tool that should become auto is properly converted\n      */\n     @Test\n-    public void testManualToAuto() {\n+    void testManualToAuto() {\n         String gitUrl = \"git@github.com:DockstoreTestUser2/md5sum-checker.git\";\n         ContainersApi toolsApi = setupWebService();\n         DockstoreTool tool = getQuayContainer(gitUrl);\n         DockstoreTool toolTest = toolsApi.registerManual(tool);\n-        assertEquals(\"Should be able to get license after manual register\", \"Apache License 2.0\", toolTest.getLicenseInformation().getLicenseName());\n+        assertEquals(\"Apache License 2.0\", toolTest.getLicenseInformation().getLicenseName(), \"Should be able to get license after manual register\");\n \n         // Clear license name to mimic old entry that does not have a license associated with it\n         testingPostgres.runUpdateStatement(\"update tool set licensename=null\");\n         DockstoreTool refresh = toolsApi.refresh(toolTest.getId());\n-        assertEquals(\"Should be able to get license after refresh\", \"Apache License 2.0\", refresh.getLicenseInformation().getLicenseName());\n+        assertEquals(\"Apache License 2.0\", refresh.getLicenseInformation().getLicenseName(), \"Should be able to get license after refresh\");\n \n         final long count = testingPostgres.runSelectStatement(\n             \"select count(*) from tool where mode = '\" + DockstoreTool.ModeEnum.AUTO_DETECT_QUAY_TAGS_AUTOMATED_BUILDS + \"' and giturl = '\"\n                 + gitUrl + \"' and name = 'my-md5sum' and namespace = 'dockstoretestuser2' and toolname = 'altname'\", long.class);\n-        assertEquals(\"The tool should be auto, there are \" + count, 1, count);\n+        assertEquals(1, count, \"The tool should be auto, there are \" + count);\n     }\n \n     /**\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "f34f61677ad6040179692e15e9db5527e5ee16f4", "message": "Merge commit", "committedDate": null}, {"oid": "308194e13a953e0877a12f86f8d0f6b0e4f61b4a", "committedDate": "2020-08-28 10:05:42 -0700", "message": "feature/3712/lazyLoadSourcefiles (#3740)"}, {"oid": "798eed67f192bea082aec5f2304cc63e85f177e2", "committedDate": "2020-09-08 13:45:59 -0700", "message": "@jsonignore sourcefiles (#3789)"}, {"oid": "f1c4ed996477f5dcff2f549bddb278936a798174", "committedDate": "2020-10-15 17:08:26 -0700", "message": "Merge tag '1.9.2' into develop"}, {"oid": "ec554a6edadfee5f4d28d4c4144ba9cca89d96bf", "committedDate": "2020-11-03 09:54:15 -0500", "message": "Feature/seab 1855/GitHub helper test (#3901)"}, {"oid": "d0b4958dda3f94b93a61b262db12bf7c9140d558", "committedDate": "2021-01-22 10:29:16 -0500", "message": "Feature/1624/add discussion link for tools (#3951)"}, {"oid": "41dd50e4c7b0271f6a09808a5dab939f3a74f73a", "committedDate": "2021-03-15 19:00:35 -0400", "message": "first set of test fixes for changes to test repos (#4105)"}, {"oid": "8c55531bd0abb76e7a723d61249476a7a4b4d5c6", "committedDate": "2021-03-17 19:50:12 -0400", "message": "Feature/lower log level (#4088)"}, {"oid": "5f17ec18ec27152a0644002889515c0e939856f9", "committedDate": "2021-03-22 14:51:04 -0400", "message": "Feature/seab 2622/cromwell test failures (#4130)"}, {"oid": "0cc07691f021e33fa8e7ed8a803af3d9ffb7c678", "committedDate": "2021-04-09 12:18:20 -0700", "message": "4080/lazy load versions more often (#4135)"}, {"oid": "5fbd8e9af5d8f804a8815fb62f79be4987aa2fe9", "committedDate": "2021-04-29 14:52:24 -0400", "message": "Feature/seab 2860/bitbucket rate limit (#4218)"}, {"oid": "d34af609a98da26d6af2fdf57ae6f6d4362a96df", "committedDate": "2021-06-24 09:52:54 -0400", "message": "Feature/sort imports (#4326)"}, {"oid": "cc2a1152102823bac1d0453dbb672ab8b4b53030", "committedDate": "2021-08-26 11:25:27 -0700", "message": "Return sha-256 for source file checksums (#4424)"}, {"oid": "769b1bcaf9070831d9b97b03fcef2a6e846e0f0a", "committedDate": "2021-10-25 08:26:06 -0400", "message": "Validate entry name when creating manual tools/workflows and hosted tools (#4530)"}, {"oid": "c5e85f0a1463e80724ac27ed1ac21b39250086e8", "committedDate": "2021-11-03 15:48:59 -0400", "message": "Validate name in .dockstore.yml (#4545)"}, {"oid": "959f9bf2d780b6d0ef0bdc4396670823e59efd1d", "committedDate": "2021-11-05 09:04:52 -0700", "message": "deny requests of users with bad usernames (#4562)"}, {"oid": "3ec32ca9f14674d4911caf52ee222612d6f0df4d", "committedDate": "2021-11-30 14:13:14 -0500", "message": "Feature/seab 3656/topic sentence (#4593)"}, {"oid": "0db3efddac98bb5059905a5351aae1deab6c6a72", "committedDate": "2021-12-10 15:04:32 -0500", "message": "Feature/4540/commit id fix (#4623) (#4625)"}, {"oid": "e58126b77218754605c4a2e877bf723e57043941", "committedDate": "2021-12-13 15:28:04 -0500", "message": "Feature/4540/commit id fix (#4623)"}, {"oid": "7e5dd94b069c3dda108f546bd19468a6d2da2bae", "committedDate": "2021-12-20 09:43:23 -0800", "message": "remove garbage from version metadata table, add constraints to prevent reoccurence"}, {"oid": "8faaa71a59037bd7491be6ff72cb0bca8ac89298", "committedDate": "2022-01-14 14:03:27 -0500", "message": "Change to new topic db schema and make some adjustments"}, {"oid": "bbed4786e15ceecefe72b8b8280be909c473b5b1", "committedDate": "2022-01-14 14:03:27 -0500", "message": "Add topic selection assertions"}, {"oid": "64d80366cfb7a943703d1dd1c7300604dbbc1b05", "committedDate": "2022-01-14 14:03:27 -0500", "message": "Fix"}, {"oid": "61add711e172f17e1c24a711f041c7a5f15e4081", "committedDate": "2022-01-26 10:41:43 -0800", "message": "update topicAutomatic for workflows on refresh and tools on refresh and creation"}, {"oid": "0a32fb76477cf1ad206052be3961f2563e71638f", "committedDate": "2022-02-10 15:52:20 -0500", "message": "Forgot to run rebuild of generated files via mvnw (#4718)"}, {"oid": "83228732692eb60d94dd8a480c8f751b0fd1c66b", "committedDate": "2022-02-16 14:54:12 -0500", "message": "Harvest checksums for GitHub Container Registry tools (#4728)"}, {"oid": "2347926ddcb457265fe38c21a2e2e1e3fa39b116", "committedDate": "2022-02-18 09:33:31 -0500", "message": "Harvest checksums for public Amazon ECR tools (#4746)"}, {"oid": "9731ce7c6304a08c22d835f913873bca39deb367", "committedDate": "2022-03-24 09:46:04 -0400", "message": "Ignore image tag for now (#4810)"}, {"oid": "9086551c90d89bef8021b574da062316795a1b62", "committedDate": "2022-03-28 11:55:30 -0400", "message": "Merge branch 'release/1.12'"}, {"oid": "eef9befd4ef1d9a00d036e9a96ad89bc25151ccb", "committedDate": "2022-03-28 12:04:09 -0400", "message": "reset to 1.12.0"}, {"oid": "1cd21501145756b9b402710cf9c94273f4dee2ee", "committedDate": "2022-06-01 13:53:35 -0400", "message": "ensures no access errors for sharing hosted workflows (#4918)"}, {"oid": "dc2fb617eb90e37ea4fd300f8a8dd149f72c7935", "committedDate": "2022-08-15 10:01:40 -0400", "message": "Removing BitBucket Tokens from non-bitbucket tests (#5076)"}, {"oid": "672bf09125cd647e422c086010a029fdca485c9d", "committedDate": "2022-08-15 10:38:10 -0400", "message": "allow topic update on hosted (#5071)"}, {"oid": "2bc18666e6e52b6c71d556b7a7e1b4a64a725a9d", "committedDate": "2022-08-26 11:47:31 -0400", "message": "check whether a manual tool repo is valid (#5096)"}, {"oid": "cefa5db4faafb25d36bb5c0df714ae5a7ce5a7aa", "committedDate": "2022-11-29 10:19:00 -0500", "message": "TRS 2.0.1 (#5246)"}, {"oid": "e96c79de0c7880fd1952495d7909285d94880b16", "committedDate": "2022-12-09 20:15:59 -0500", "message": "Add workflow language version for SourceFile and Version & implement it for WDL (#5266)"}, {"oid": "7bb9cf8a801e46baa735fd849b167077a0bd130e", "committedDate": "2023-01-04 13:31:58 -0500", "message": "junit 5 with compatibility (legacy) layer (#5292)"}, {"oid": "84c62e295859ccfe94749e8159b0d5b8874e260f", "committedDate": "2023-01-09 10:38:05 -0500", "message": "convert dockstore-common, webservice, most integration tests to junit 5 (#5297)"}, {"oid": "84785240d921cd7a237ba97cb0577d0a741bd672", "committedDate": "2023-01-19 13:07:09 -0800", "message": "Move language descriptor versions to different tables (#5315)"}, {"oid": "9a5175dc41b7bd5ac07cf3f666a32fc8d20aaa33", "committedDate": "2023-02-09 09:52:54 -0800", "message": "reimplement MuteForSuccessfulTests equivalent for Junit 5"}, {"oid": "5c76df50ce8cc32949195d3b196ca12b3e0b92f3", "committedDate": "2023-02-27 10:25:41 -0500", "message": "Corrected Typos in dockstore/dockstore (#5387)"}, {"oid": "d8682c78ffc93ba568bac465529435c78a9bca88", "committedDate": "2023-03-16 13:01:20 -0400", "message": "more dates and a test (#5425)"}, {"oid": "30c353347ee09b06e6aad9e594ba4a07e731675c", "committedDate": "2023-04-19 14:14:11 -0400", "message": "Add multiple authors to Entry and fix authors in search (#5461)"}, {"oid": "70a3f74c2bc7b8b0081227c4f2e2c4ed9a66a004", "committedDate": "2023-05-12 15:26:14 -0400", "message": "Dropwizard update 4.0 (#5483)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDMwMDk0Nw==", "url": "https://github.com/dockstore/dockstore/pull/3751#discussion_r474300947", "body": "interface methods should have javadoc ", "bodyText": "interface methods should have javadoc", "bodyHTML": "<p dir=\"auto\">interface methods should have javadoc</p>", "author": "denis-yuen", "createdAt": "2020-08-20T22:12:12Z", "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/helpers/SourceCodeRepoInterface.java", "diffHunk": "@@ -96,7 +96,7 @@ public static boolean matchesREADME(String filename) {\n     }\n \n     public abstract String getName();\n-\n+    public abstract void setLicenseInformation(Entry entry, String gitRepository);", "originalCommit": "9b7e82678f0f22eb25784ad1681d2fe65c831d09", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e4488a8481c1577eeb8bd8f118fcbfdb58014ecd", "changed_code": [{"header": "diff --git a/dockstore-webservice/src/main/java/io/dockstore/webservice/helpers/SourceCodeRepoInterface.java b/dockstore-webservice/src/main/java/io/dockstore/webservice/helpers/SourceCodeRepoInterface.java\nindex e9f2046db..a4b760ab7 100644\n--- a/dockstore-webservice/src/main/java/io/dockstore/webservice/helpers/SourceCodeRepoInterface.java\n+++ b/dockstore-webservice/src/main/java/io/dockstore/webservice/helpers/SourceCodeRepoInterface.java\n", "chunk": "@@ -96,6 +96,12 @@ public abstract class SourceCodeRepoInterface {\n     }\n \n     public abstract String getName();\n+\n+    /**\n+     * Set the entry's license information based on the Git repository\n+     * @param entry The entry whose license information should be set\n+     * @param gitRepository The Git repository (e.g. dockstore/hello_world)\n+     */\n     public abstract void setLicenseInformation(Entry entry, String gitRepository);\n     /**\n      * If this interface is pointed at a specific repository, grab a\n", "next_change": null}]}, "revised_code_in_main": {"commit": "f34f61677ad6040179692e15e9db5527e5ee16f4", "changed_code": [{"header": "diff --git a/dockstore-webservice/src/main/java/io/dockstore/webservice/helpers/SourceCodeRepoInterface.java b/dockstore-webservice/src/main/java/io/dockstore/webservice/helpers/SourceCodeRepoInterface.java\nindex e9f2046db..a4b760ab7 100644\n--- a/dockstore-webservice/src/main/java/io/dockstore/webservice/helpers/SourceCodeRepoInterface.java\n+++ b/dockstore-webservice/src/main/java/io/dockstore/webservice/helpers/SourceCodeRepoInterface.java\n", "chunk": "@@ -96,6 +96,12 @@ public abstract class SourceCodeRepoInterface {\n     }\n \n     public abstract String getName();\n+\n+    /**\n+     * Set the entry's license information based on the Git repository\n+     * @param entry The entry whose license information should be set\n+     * @param gitRepository The Git repository (e.g. dockstore/hello_world)\n+     */\n     public abstract void setLicenseInformation(Entry entry, String gitRepository);\n     /**\n      * If this interface is pointed at a specific repository, grab a\n", "next_change": {"commit": "57dc7a9e0712d3d40c222c65f9f77154b74b0378", "changed_code": [{"header": "diff --git a/dockstore-webservice/src/main/java/io/dockstore/webservice/helpers/SourceCodeRepoInterface.java b/dockstore-webservice/src/main/java/io/dockstore/webservice/helpers/SourceCodeRepoInterface.java\nindex a4b760ab7..b5c7c2b48 100644\n--- a/dockstore-webservice/src/main/java/io/dockstore/webservice/helpers/SourceCodeRepoInterface.java\n+++ b/dockstore-webservice/src/main/java/io/dockstore/webservice/helpers/SourceCodeRepoInterface.java\n", "chunk": "@@ -97,12 +98,6 @@ public abstract class SourceCodeRepoInterface {\n \n     public abstract String getName();\n \n-    /**\n-     * Set the entry's license information based on the Git repository\n-     * @param entry The entry whose license information should be set\n-     * @param gitRepository The Git repository (e.g. dockstore/hello_world)\n-     */\n-    public abstract void setLicenseInformation(Entry entry, String gitRepository);\n     /**\n      * If this interface is pointed at a specific repository, grab a\n      * file from a specific branch/tag\n", "next_change": {"commit": "4a51ee33c46f8a8e856fd22b19a37b7251e5e3fe", "changed_code": [{"header": "diff --git a/dockstore-webservice/src/main/java/io/dockstore/webservice/helpers/SourceCodeRepoInterface.java b/dockstore-webservice/src/main/java/io/dockstore/webservice/helpers/SourceCodeRepoInterface.java\nindex b5c7c2b48..23c62c623 100644\n--- a/dockstore-webservice/src/main/java/io/dockstore/webservice/helpers/SourceCodeRepoInterface.java\n+++ b/dockstore-webservice/src/main/java/io/dockstore/webservice/helpers/SourceCodeRepoInterface.java\n", "chunk": "@@ -98,6 +97,12 @@ public abstract class SourceCodeRepoInterface {\n \n     public abstract String getName();\n \n+    /**\n+     * Set the entry's license information based on the Git repository\n+     * @param entry The entry whose license information should be set\n+     * @param gitRepository The Git repository (e.g. dockstore/hello_world)\n+     */\n+    public abstract void setLicenseInformation(Entry entry, String gitRepository);\n     /**\n      * If this interface is pointed at a specific repository, grab a\n      * file from a specific branch/tag\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "f34f61677ad6040179692e15e9db5527e5ee16f4", "message": "Merge commit", "committedDate": null}, {"oid": "57dc7a9e0712d3d40c222c65f9f77154b74b0378", "committedDate": "2020-08-10 15:22:20 -0400", "message": "3487/smart refresh (#3720)"}, {"oid": "4a51ee33c46f8a8e856fd22b19a37b7251e5e3fe", "committedDate": "2020-10-09 15:11:20 -0400", "message": "Feature/3761/nextflow dsl2 (#3852)"}, {"oid": "f1c4ed996477f5dcff2f549bddb278936a798174", "committedDate": "2020-10-15 17:08:26 -0700", "message": "Merge tag '1.9.2' into develop"}, {"oid": "cbd424832c5e349efdf04d2f9ff3d99ef68245d3", "committedDate": "2021-03-19 14:34:06 -0400", "message": "namespace cache for testing on circle CI (#4120)"}, {"oid": "039e8f735aba05deee457af1054278b8cdf11b9f", "committedDate": "2021-04-12 11:47:37 -0400", "message": "Add endpoint to retrieve user organizations on github (#4171)"}, {"oid": "aae19d6ee198e68ebba85f37024d1ddf865cc365", "committedDate": "2021-05-03 09:42:25 -0700", "message": "set last modified for github app workflows (#4224)"}, {"oid": "d34af609a98da26d6af2fdf57ae6f6d4362a96df", "committedDate": "2021-06-24 09:52:54 -0400", "message": "Feature/sort imports (#4326)"}, {"oid": "1f14d0d4793c90a34cb8571a43ac0bf5758e8acf", "committedDate": "2021-06-30 16:36:13 -0700", "message": "Feature/3476/GitHub apps for tools (#4328)"}, {"oid": "32c1cb2724284956c131f34ce03f13dfea04b7b1", "committedDate": "2021-08-12 11:24:02 -0400", "message": "Protecting logging from pattern breaking (#4399)"}, {"oid": "0dc5fc20edd6ec50f45973b18444fc58e2bf67b8", "committedDate": "2021-12-03 17:47:18 -0500", "message": "Hotfix develop2/1.11.9 (#4607)"}, {"oid": "3680542eda82ec9728418b6a8237e591936c484e", "committedDate": "2022-05-05 14:12:52 -0700", "message": "separate failed validations in github apps log messages with newlines"}, {"oid": "7ad9e6d9feee1f5cd956934908bbccfeee804941", "committedDate": "2022-08-19 10:38:46 -0700", "message": "Improved Github app handling for logs (#5070)"}, {"oid": "2bc18666e6e52b6c71d556b7a7e1b4a64a725a9d", "committedDate": "2022-08-26 11:47:31 -0400", "message": "check whether a manual tool repo is valid (#5096)"}, {"oid": "4db3e99e6ca2fc03285ea4ed29643d1bd24cd652", "committedDate": "2022-11-02 09:41:28 -0700", "message": "Correctly discover existing workflows (#5199)"}, {"oid": "fa76e2a75f64103ba5cac21f888bb6d657ab8558", "committedDate": "2022-12-16 11:30:50 -0500", "message": "Feature/language versions plugins and java 17 (#5279)"}, {"oid": "84785240d921cd7a237ba97cb0577d0a741bd672", "committedDate": "2023-01-19 13:07:09 -0800", "message": "Move language descriptor versions to different tables (#5315)"}, {"oid": "9a97d6106669ad086cf4d897fe38cdec13629e87", "committedDate": "2023-01-31 11:12:38 -0800", "message": "add Jupyter ipynb notebook language handler"}, {"oid": "7a811ec4dee08c3c4d70207ddbac49863604d1bb", "committedDate": "2023-02-02 10:11:39 -0500", "message": "Feature/release tinkering (#5335)"}, {"oid": "20592fc850e9b5da6fa2c23f1b85eaf46566fd5f", "committedDate": "2023-02-17 10:34:50 -0500", "message": "hack for galaxy version parsing for existing workflows (#5374)"}, {"oid": "e67424679c836b2974d05431268427ff0a66d5fd", "committedDate": "2023-03-02 13:09:06 -0500", "message": "workflow-level README (#5384)"}, {"oid": "12089d7651cb64e040878df2f054b47647ecf269", "committedDate": "2023-04-10 10:26:46 -0400", "message": "swap and add test (#5454)"}, {"oid": "5e3e0ffdf169aac3c49a4a698bece151584419b3", "committedDate": "2023-04-20 15:14:38 -0400", "message": "Fix description update for existing workflow version (#5470)"}, {"oid": "82c703af276821d8f1fde4b2a459845c659fcf71", "committedDate": "2023-05-11 15:05:14 -0700", "message": "calculate Version validity later"}, {"oid": "70a3f74c2bc7b8b0081227c4f2e2c4ed9a66a004", "committedDate": "2023-05-12 15:26:14 -0400", "message": "Dropwizard update 4.0 (#5483)"}, {"oid": "891695aeaf8dd4f8f7c08ad0162ff9ce77607d36", "committedDate": "2023-05-24 11:18:44 -0400", "message": "Merge tag '1.14' into develop"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDMwMTI4NA==", "url": "https://github.com/dockstore/dockstore/pull/3751#discussion_r474301284", "body": "add TODO for highlighting \r\nhttps://www.jetbrains.com/help/idea/using-todo.html\r\n\r\nalternatively can `setToolLicenseInformation` skip tools without a github token to avoid it being dead code?", "bodyText": "add TODO for highlighting\nhttps://www.jetbrains.com/help/idea/using-todo.html\nalternatively can setToolLicenseInformation skip tools without a github token to avoid it being dead code?", "bodyHTML": "<p dir=\"auto\">add TODO for highlighting<br>\n<a href=\"https://www.jetbrains.com/help/idea/using-todo.html\" rel=\"nofollow\">https://www.jetbrains.com/help/idea/using-todo.html</a></p>\n<p dir=\"auto\">alternatively can <code>setToolLicenseInformation</code> skip tools without a github token to avoid it being dead code?</p>", "author": "denis-yuen", "createdAt": "2020-08-20T22:13:03Z", "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/DockerRepoResource.java", "diffHunk": "@@ -596,9 +596,32 @@ public Tool registerManual(@ApiParam(hidden = true) @Parameter(hidden = true, na\n             tool.setGitUrl(convertHttpsToSsh(tool.getGitUrl()));\n         }\n \n+        // Can't set tool license information here, far too many tests register a tool without a GitHub token", "originalCommit": "9b7e82678f0f22eb25784ad1681d2fe65c831d09", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e4488a8481c1577eeb8bd8f118fcbfdb58014ecd", "changed_code": [{"header": "diff --git a/dockstore-webservice/src/main/java/io/dockstore/webservice/resources/DockerRepoResource.java b/dockstore-webservice/src/main/java/io/dockstore/webservice/resources/DockerRepoResource.java\nindex 8ff172ef6..5872debdd 100644\n--- a/dockstore-webservice/src/main/java/io/dockstore/webservice/resources/DockerRepoResource.java\n+++ b/dockstore-webservice/src/main/java/io/dockstore/webservice/resources/DockerRepoResource.java\n", "chunk": "@@ -597,7 +597,7 @@ public class DockerRepoResource\n         }\n \n         // Can't set tool license information here, far too many tests register a tool without a GitHub token\n-        // setToolLicenseInformation(user, tool);\n+        setToolLicenseInformation(user, tool);\n \n         return toolDAO.findById(id);\n     }\n", "next_change": null}]}, "revised_code_in_main": {"commit": "f34f61677ad6040179692e15e9db5527e5ee16f4", "changed_code": [{"header": "diff --git a/dockstore-webservice/src/main/java/io/dockstore/webservice/resources/DockerRepoResource.java b/dockstore-webservice/src/main/java/io/dockstore/webservice/resources/DockerRepoResource.java\nindex 8ff172ef6..813920889 100644\n--- a/dockstore-webservice/src/main/java/io/dockstore/webservice/resources/DockerRepoResource.java\n+++ b/dockstore-webservice/src/main/java/io/dockstore/webservice/resources/DockerRepoResource.java\n", "chunk": "@@ -597,7 +597,7 @@ public class DockerRepoResource\n         }\n \n         // Can't set tool license information here, far too many tests register a tool without a GitHub token\n-        // setToolLicenseInformation(user, tool);\n+        setToolLicenseInformation(user, tool);\n \n         return toolDAO.findById(id);\n     }\n", "next_change": {"commit": "57dc7a9e0712d3d40c222c65f9f77154b74b0378", "changed_code": [{"header": "diff --git a/dockstore-webservice/src/main/java/io/dockstore/webservice/resources/DockerRepoResource.java b/dockstore-webservice/src/main/java/io/dockstore/webservice/resources/DockerRepoResource.java\nindex 813920889..1169026c1 100644\n--- a/dockstore-webservice/src/main/java/io/dockstore/webservice/resources/DockerRepoResource.java\n+++ b/dockstore-webservice/src/main/java/io/dockstore/webservice/resources/DockerRepoResource.java\n", "chunk": "@@ -596,33 +596,9 @@ public class DockerRepoResource\n             tool.setGitUrl(convertHttpsToSsh(tool.getGitUrl()));\n         }\n \n-        // Can't set tool license information here, far too many tests register a tool without a GitHub token\n-        setToolLicenseInformation(user, tool);\n-\n         return toolDAO.findById(id);\n     }\n \n-    /**\n-     * Set the license information for a tool\n-     * @param user  The user the tool belongs to\n-     * @param tool  The tool to get license information for\n-     */\n-    private void setToolLicenseInformation(User user, Tool tool) {\n-        // Get user's Git tokens\n-        List<Token> tokens = tokenDAO.findByUserId(user.getId());\n-        Token githubToken = Token.extractToken(tokens, TokenType.GITHUB_COM);\n-        Token gitlabToken = Token.extractToken(tokens, TokenType.GITLAB_COM);\n-        Token bitbucketToken = Token.extractToken(tokens, TokenType.BITBUCKET_ORG);\n-        final SourceCodeRepoInterface sourceCodeRepo = SourceCodeRepoFactory\n-                .createSourceCodeRepo(tool.getGitUrl(), bitbucketToken == null ? null : bitbucketToken.getContent(),\n-                        gitlabToken == null ? null : gitlabToken.getContent(), githubToken == null ? null : githubToken.getContent());\n-        if (sourceCodeRepo != null) {\n-            sourceCodeRepo.checkSourceCodeValidity();\n-            String gitRepositoryFromGitUrl = AbstractImageRegistry.getGitRepositoryFromGitUrl(tool.getGitUrl());\n-            sourceCodeRepo.setLicenseInformation(tool, gitRepositoryFromGitUrl);\n-        }\n-    }\n-\n     /**\n      * Look for the tags that a tool has using a user's own tokens\n      *\n", "next_change": {"commit": "308194e13a953e0877a12f86f8d0f6b0e4f61b4a", "changed_code": [{"header": "diff --git a/dockstore-webservice/src/main/java/io/dockstore/webservice/resources/DockerRepoResource.java b/dockstore-webservice/src/main/java/io/dockstore/webservice/resources/DockerRepoResource.java\nindex 1169026c1..e5c12027b 100644\n--- a/dockstore-webservice/src/main/java/io/dockstore/webservice/resources/DockerRepoResource.java\n+++ b/dockstore-webservice/src/main/java/io/dockstore/webservice/resources/DockerRepoResource.java\n", "chunk": "@@ -596,9 +599,33 @@ public class DockerRepoResource\n             tool.setGitUrl(convertHttpsToSsh(tool.getGitUrl()));\n         }\n \n+        // Can't set tool license information here, far too many tests register a tool without a GitHub token\n+        setToolLicenseInformation(user, tool);\n+\n         return toolDAO.findById(id);\n     }\n \n+    /**\n+     * Set the license information for a tool\n+     * @param user  The user the tool belongs to\n+     * @param tool  The tool to get license information for\n+     */\n+    private void setToolLicenseInformation(User user, Tool tool) {\n+        // Get user's Git tokens\n+        List<Token> tokens = tokenDAO.findByUserId(user.getId());\n+        Token githubToken = Token.extractToken(tokens, TokenType.GITHUB_COM);\n+        Token gitlabToken = Token.extractToken(tokens, TokenType.GITLAB_COM);\n+        Token bitbucketToken = Token.extractToken(tokens, TokenType.BITBUCKET_ORG);\n+        final SourceCodeRepoInterface sourceCodeRepo = SourceCodeRepoFactory\n+                .createSourceCodeRepo(tool.getGitUrl(), bitbucketToken == null ? null : bitbucketToken.getContent(),\n+                        gitlabToken == null ? null : gitlabToken.getContent(), githubToken == null ? null : githubToken.getContent());\n+        if (sourceCodeRepo != null) {\n+            sourceCodeRepo.checkSourceCodeValidity();\n+            String gitRepositoryFromGitUrl = AbstractImageRegistry.getGitRepositoryFromGitUrl(tool.getGitUrl());\n+            sourceCodeRepo.setLicenseInformation(tool, gitRepositoryFromGitUrl);\n+        }\n+    }\n+\n     /**\n      * Look for the tags that a tool has using a user's own tokens\n      *\n", "next_change": {"commit": "2bc18666e6e52b6c71d556b7a7e1b4a64a725a9d", "changed_code": [{"header": "diff --git a/dockstore-webservice/src/main/java/io/dockstore/webservice/resources/DockerRepoResource.java b/dockstore-webservice/src/main/java/io/dockstore/webservice/resources/DockerRepoResource.java\nindex e5c12027b..08c7600ad 100644\n--- a/dockstore-webservice/src/main/java/io/dockstore/webservice/resources/DockerRepoResource.java\n+++ b/dockstore-webservice/src/main/java/io/dockstore/webservice/resources/DockerRepoResource.java\n", "chunk": "@@ -595,37 +604,49 @@ public class DockerRepoResource\n         tool.getLabels().clear();\n         tool.getLabels().addAll(createdLabels);\n \n-        if (!isGit(tool.getGitUrl())) {\n-            tool.setGitUrl(convertHttpsToSsh(tool.getGitUrl()));\n-        }\n-\n         // Can't set tool license information here, far too many tests register a tool without a GitHub token\n         setToolLicenseInformation(user, tool);\n \n+        // Set the automatic topic\n+        new TopicHarvester(user, tokenDAO).harvestAndSetTopic(tool);\n+\n         return toolDAO.findById(id);\n     }\n \n     /**\n      * Set the license information for a tool\n-     * @param user  The user the tool belongs to\n-     * @param tool  The tool to get license information for\n+     *\n+     * @param user The user the tool belongs to\n+     * @param tool The tool to get license information for\n      */\n     private void setToolLicenseInformation(User user, Tool tool) {\n-        // Get user's Git tokens\n         List<Token> tokens = tokenDAO.findByUserId(user.getId());\n-        Token githubToken = Token.extractToken(tokens, TokenType.GITHUB_COM);\n-        Token gitlabToken = Token.extractToken(tokens, TokenType.GITLAB_COM);\n-        Token bitbucketToken = Token.extractToken(tokens, TokenType.BITBUCKET_ORG);\n-        final SourceCodeRepoInterface sourceCodeRepo = SourceCodeRepoFactory\n-                .createSourceCodeRepo(tool.getGitUrl(), bitbucketToken == null ? null : bitbucketToken.getContent(),\n-                        gitlabToken == null ? null : gitlabToken.getContent(), githubToken == null ? null : githubToken.getContent());\n+        final SourceCodeRepoInterface sourceCodeRepo = SourceCodeRepoFactory.createSourceCodeRepo(tool.getGitUrl(), tokens);\n+\n         if (sourceCodeRepo != null) {\n-            sourceCodeRepo.checkSourceCodeValidity();\n+            sourceCodeRepo.checkSourceControlTokenValidity();\n             String gitRepositoryFromGitUrl = AbstractImageRegistry.getGitRepositoryFromGitUrl(tool.getGitUrl());\n             sourceCodeRepo.setLicenseInformation(tool, gitRepositoryFromGitUrl);\n         }\n     }\n \n+    /**\n+     * Check whether a tool is pointing at a valid repo that the user has access to.\n+     * This is a bit silly because it looks like the methods in SourceCodeRepoInterface\n+     * mainly check whether the github token is valid, not whether the repo exists\n+     *\n+     * @param user The user the tool belongs to\n+     * @param tool The tool to get license information for\n+     */\n+    private void checkRepoValidity(User user, Tool tool) {\n+        List<Token> tokens = tokenDAO.findByUserId(user.getId());\n+        final SourceCodeRepoInterface sourceCodeRepo = SourceCodeRepoFactory.createSourceCodeRepo(tool.getGitUrl(), tokens);\n+        if (sourceCodeRepo == null || !sourceCodeRepo.checkSourceControlRepoValidity(tool)) {\n+            throw new CustomWebApplicationException(UNABLE_TO_VERIFY_THAT_YOUR_TOOL_POINTS_AT_A_VALID_SOURCE_CONTROL_REPO,\n+                HttpStatus.SC_BAD_REQUEST);\n+        }\n+    }\n+\n     /**\n      * Look for the tags that a tool has using a user's own tokens\n      *\n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "f34f61677ad6040179692e15e9db5527e5ee16f4", "message": "Merge commit", "committedDate": null}, {"oid": "57dc7a9e0712d3d40c222c65f9f77154b74b0378", "committedDate": "2020-08-10 15:22:20 -0400", "message": "3487/smart refresh (#3720)"}, {"oid": "308194e13a953e0877a12f86f8d0f6b0e4f61b4a", "committedDate": "2020-08-28 10:05:42 -0700", "message": "feature/3712/lazyLoadSourcefiles (#3740)"}, {"oid": "dccd5bc3b078a6b55059becf13aa510c8d103b9d", "committedDate": "2020-09-01 16:26:15 -0700", "message": "Feature/3090/version in zip filename (#3772)"}, {"oid": "f1c4ed996477f5dcff2f549bddb278936a798174", "committedDate": "2020-10-15 17:08:26 -0700", "message": "Merge tag '1.9.2' into develop"}, {"oid": "466db09e83fd866ad7e52b1348cf400bc1ccabd0", "committedDate": "2020-11-02 09:01:48 -0800", "message": "log all admin actions, remove some admin permissions, see what tests \u2026 (#3897)"}, {"oid": "d0b4958dda3f94b93a61b262db12bf7c9140d558", "committedDate": "2021-01-22 10:29:16 -0500", "message": "Feature/1624/add discussion link for tools (#3951)"}, {"oid": "1ebcdc6c75eb70a33b1c8c1414b639f2f1c167cc", "committedDate": "2021-03-09 10:30:33 -0500", "message": "The deprecated version was broken, always 500 (#4087)"}, {"oid": "df9b8ea3d3f3022f08da252d587518c909c3b73e", "committedDate": "2021-03-15 13:56:36 -0400", "message": "Okhttp update, working display of cache misses, small rate limit improvement (#4096)"}, {"oid": "8c55531bd0abb76e7a723d61249476a7a4b4d5c6", "committedDate": "2021-03-17 19:50:12 -0400", "message": "Feature/lower log level (#4088)"}, {"oid": "cbd424832c5e349efdf04d2f9ff3d99ef68245d3", "committedDate": "2021-03-19 14:34:06 -0400", "message": "namespace cache for testing on circle CI (#4120)"}, {"oid": "8eb270ac8831355322fe7cfec01884bae27cef9f", "committedDate": "2021-03-30 19:22:52 -0400", "message": "Feature/http client risky cleanup (#4124)"}, {"oid": "2a788344c4afbb7d50c07939a335e56c5d7a014e", "committedDate": "2021-06-02 10:01:28 -0400", "message": "Feature/checkstyle codestyle conflicts (#4261)"}, {"oid": "d34af609a98da26d6af2fdf57ae6f6d4362a96df", "committedDate": "2021-06-24 09:52:54 -0400", "message": "Feature/sort imports (#4326)"}, {"oid": "d37e3b1e658543e9934b3cd03e28348866530261", "committedDate": "2021-08-10 14:45:44 -0400", "message": "Feature/seab 3140/language plugins (#4387)"}, {"oid": "32c1cb2724284956c131f34ce03f13dfea04b7b1", "committedDate": "2021-08-12 11:24:02 -0400", "message": "Protecting logging from pattern breaking (#4399)"}, {"oid": "507b7436370a7c9664edaf2a1025ab3f21dcfdb6", "committedDate": "2021-08-26 08:49:24 -0400", "message": "Allow private and public Amazon ECR tools to be registered (#4420)"}, {"oid": "769b1bcaf9070831d9b97b03fcef2a6e846e0f0a", "committedDate": "2021-10-25 08:26:06 -0400", "message": "Validate entry name when creating manual tools/workflows and hosted tools (#4530)"}, {"oid": "c5e85f0a1463e80724ac27ed1ac21b39250086e8", "committedDate": "2021-11-03 15:48:59 -0400", "message": "Validate name in .dockstore.yml (#4545)"}, {"oid": "959f9bf2d780b6d0ef0bdc4396670823e59efd1d", "committedDate": "2021-11-05 09:04:52 -0700", "message": "deny requests of users with bad usernames (#4562)"}, {"oid": "3ec32ca9f14674d4911caf52ee222612d6f0df4d", "committedDate": "2021-11-30 14:13:14 -0500", "message": "Feature/seab 3656/topic sentence (#4593)"}, {"oid": "902126a7ae432db0b75381ca140ba537c44b7efc", "committedDate": "2021-12-09 13:17:47 -0800", "message": "Feature/regex backtrack fix (#4608)"}, {"oid": "8faaa71a59037bd7491be6ff72cb0bca8ac89298", "committedDate": "2022-01-14 14:03:27 -0500", "message": "Change to new topic db schema and make some adjustments"}, {"oid": "42555e5781452cd3ca262408f99862124f85a0de", "committedDate": "2022-01-14 14:03:27 -0500", "message": "Fix manual put"}, {"oid": "6799c4c92560169eef3b11f19993f1dfe8fa9adc", "committedDate": "2022-01-14 14:03:27 -0500", "message": "Add tool topic selection"}, {"oid": "61add711e172f17e1c24a711f041c7a5f15e4081", "committedDate": "2022-01-26 10:41:43 -0800", "message": "update topicAutomatic for workflows on refresh and tools on refresh and creation"}, {"oid": "13122927ce47b9ac11d1615295931dd75ab83715", "committedDate": "2022-02-04 09:25:56 -0800", "message": "Events for publishing and unpublishing (#4699)"}, {"oid": "5b03d70df1a88fc2b7cbba515942e7f246d4622f", "committedDate": "2022-03-22 16:56:00 -0400", "message": "Feature/checkstyle spotbugs update (#4807)"}, {"oid": "d37fe8c85f21e3844858179fac3e087b3fed00d7", "committedDate": "2022-04-13 09:58:48 -0700", "message": "used descriptor and new galaxy default desc name (#4825)"}, {"oid": "6a6929aea1e3bbdd37c710e36f6c34b38c767d94", "committedDate": "2022-05-11 20:03:06 -0700", "message": "Use integer offsets on /published endpoints (SEAB-3979, PR #4896)"}, {"oid": "6ddd672ad0681554d763eb8f967aaef5a1ec59ba", "committedDate": "2022-06-03 08:14:35 -0700", "message": "fix \"MessageBodyWriter not found\" exception in some generated openapi methods"}, {"oid": "1254d8abfd5ab9981da6ea02fd2a44ae640928b7", "committedDate": "2022-06-13 16:05:17 -0700", "message": "Standardize OpenAPI security field (#4671, PR #4944)"}, {"oid": "589d0fd84a87d8fe28723513383192079d0d015f", "committedDate": "2022-06-30 11:12:49 -0700", "message": "Use versionNameFilter for proprietary API (#4977)"}, {"oid": "ef58572bd00559f7552e5a19766954f802da00f7", "committedDate": "2022-07-05 09:55:11 -0700", "message": "Merge tag '1.12.1' into develop"}, {"oid": "0268774c94f40727a3b4badaeaf7c77c425478ce", "committedDate": "2022-07-29 13:41:29 -0700", "message": "refactor user-level permissions checks"}, {"oid": "672bf09125cd647e422c086010a029fdca485c9d", "committedDate": "2022-08-15 10:38:10 -0400", "message": "allow topic update on hosted (#5071)"}, {"oid": "ff101f7793036e41f0147e9c85772f1622fedded", "committedDate": "2022-08-19 10:00:19 -0700", "message": "tighten some authorization checks"}, {"oid": "2bc18666e6e52b6c71d556b7a7e1b4a64a725a9d", "committedDate": "2022-08-26 11:47:31 -0400", "message": "check whether a manual tool repo is valid (#5096)"}, {"oid": "e1de82dc32e6ce84a7d66ed924e4773e8c22eaf9", "committedDate": "2022-09-02 12:40:20 -0400", "message": "ensure token refresh before checking repo validity (#5114)"}, {"oid": "30c353347ee09b06e6aad9e594ba4a07e731675c", "committedDate": "2023-04-19 14:14:11 -0400", "message": "Add multiple authors to Entry and fix authors in search (#5461)"}, {"oid": "8e85fb7f080ce31837048bf34b82731d4a6363e3", "committedDate": "2023-04-26 17:13:48 -0400", "message": "Feature/dropwizard update (#5477)"}, {"oid": "b770ed53016a4c182633b4f016fcc3519c90d9f1", "committedDate": "2023-05-09 16:33:56 -0400", "message": "Set default descriptor type for tools (#5498)"}, {"oid": "70a3f74c2bc7b8b0081227c4f2e2c4ed9a66a004", "committedDate": "2023-05-12 15:26:14 -0400", "message": "Dropwizard update 4.0 (#5483)"}, {"oid": "891695aeaf8dd4f8f7c08ad0162ff9ce77607d36", "committedDate": "2023-05-24 11:18:44 -0400", "message": "Merge tag '1.14' into develop"}, {"oid": "ad4cee0293056201520f0905dd7bc1182b1e158c", "committedDate": "2023-06-02 09:14:38 -0700", "message": "Add getPublishedContainer to OpenAPI (#5539)"}]}, {"oid": "385952498f6490d9e298978b3fcc94c13ca078e5", "url": "https://github.com/dockstore/dockstore/commit/385952498f6490d9e298978b3fcc94c13ca078e5", "message": "Add and update test", "committedDate": "2020-08-21T03:37:07Z", "type": "commit"}, {"oid": "e4488a8481c1577eeb8bd8f118fcbfdb58014ecd", "url": "https://github.com/dockstore/dockstore/commit/e4488a8481c1577eeb8bd8f118fcbfdb58014ecd", "message": "PR changes", "committedDate": "2020-08-21T03:45:07Z", "type": "commit"}, {"oid": "e0cbc321c8520fa5630265e2770b8d37de89baf3", "url": "https://github.com/dockstore/dockstore/commit/e0cbc321c8520fa5630265e2770b8d37de89baf3", "message": "Also update license information for GitHub Apps", "committedDate": "2020-08-21T16:10:12Z", "type": "commit"}, {"oid": "262e59ca60dd91e8fc610f38e08d0b55f21262ba", "url": "https://github.com/dockstore/dockstore/commit/262e59ca60dd91e8fc610f38e08d0b55f21262ba", "message": "Add single test, auto-fix some other tests", "committedDate": "2020-08-21T16:10:25Z", "type": "commit"}, {"oid": "8cc08a56b443db935259ee27c762929cedda56ed", "url": "https://github.com/dockstore/dockstore/commit/8cc08a56b443db935259ee27c762929cedda56ed", "message": "Add another test", "committedDate": "2020-08-21T19:44:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjAxMjU5OA==", "url": "https://github.com/dockstore/dockstore/pull/3751#discussion_r476012598", "body": "You already have an empty LicenseInformation from line 99.", "bodyText": "You already have an empty LicenseInformation from line 99.", "bodyHTML": "<p dir=\"auto\">You already have an empty LicenseInformation from line 99.</p>", "author": "coverbeck", "createdAt": "2020-08-25T00:48:30Z", "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/helpers/GitHubHelper.java", "diffHunk": "@@ -85,6 +89,27 @@ public static String getGitHubAccessToken(String code, String githubClientID, St\n         }\n     }\n \n+    /**\n+     * Get license for a specific GitHub repository\n+     * @param gitHub    The GitHub API\n+     * @param repositoryName    Name of the GitHub repository (e.g. dockstore/lambda)\n+     * @return  The LicenseInformation associated with the repository\n+     */\n+    public static LicenseInformation getLicenseInformation(GitHub gitHub, String repositoryName) {\n+        LicenseInformation licenseInformation = new LicenseInformation();\n+        try {\n+            GHRepository repository = gitHub.getRepository(repositoryName);\n+            GHLicense license = repository.getLicense();\n+            if (license == null) {\n+                return new LicenseInformation();", "originalCommit": "8cc08a56b443db935259ee27c762929cedda56ed", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "11a1f103d815d6b994948daa9900b076bbc36dc6", "changed_code": [{"header": "diff --git a/dockstore-webservice/src/main/java/io/dockstore/webservice/helpers/GitHubHelper.java b/dockstore-webservice/src/main/java/io/dockstore/webservice/helpers/GitHubHelper.java\nindex 06c02e772..2bf9b7589 100644\n--- a/dockstore-webservice/src/main/java/io/dockstore/webservice/helpers/GitHubHelper.java\n+++ b/dockstore-webservice/src/main/java/io/dockstore/webservice/helpers/GitHubHelper.java\n", "chunk": "@@ -96,16 +96,17 @@ public final class GitHubHelper {\n      * @return  The LicenseInformation associated with the repository\n      */\n     public static LicenseInformation getLicenseInformation(GitHub gitHub, String repositoryName) {\n-        LicenseInformation licenseInformation = new LicenseInformation();\n         try {\n             GHRepository repository = gitHub.getRepository(repositoryName);\n             GHLicense license = repository.getLicense();\n             if (license == null) {\n                 return new LicenseInformation();\n             }\n+            LicenseInformation licenseInformation = new LicenseInformation();\n             licenseInformation.setLicenseName(license.getName());\n             return licenseInformation;\n         } catch (IOException e) {\n+            LOG.info(\"Could not get license information from GitHub for repository: \" + repositoryName, e);\n             return new LicenseInformation();\n         }\n     }\n", "next_change": null}]}, "revised_code_in_main": {"commit": "f34f61677ad6040179692e15e9db5527e5ee16f4", "changed_code": [{"header": "diff --git a/dockstore-webservice/src/main/java/io/dockstore/webservice/helpers/GitHubHelper.java b/dockstore-webservice/src/main/java/io/dockstore/webservice/helpers/GitHubHelper.java\nindex 06c02e772..2bf9b7589 100644\n--- a/dockstore-webservice/src/main/java/io/dockstore/webservice/helpers/GitHubHelper.java\n+++ b/dockstore-webservice/src/main/java/io/dockstore/webservice/helpers/GitHubHelper.java\n", "chunk": "@@ -96,16 +96,17 @@ public final class GitHubHelper {\n      * @return  The LicenseInformation associated with the repository\n      */\n     public static LicenseInformation getLicenseInformation(GitHub gitHub, String repositoryName) {\n-        LicenseInformation licenseInformation = new LicenseInformation();\n         try {\n             GHRepository repository = gitHub.getRepository(repositoryName);\n             GHLicense license = repository.getLicense();\n             if (license == null) {\n                 return new LicenseInformation();\n             }\n+            LicenseInformation licenseInformation = new LicenseInformation();\n             licenseInformation.setLicenseName(license.getName());\n             return licenseInformation;\n         } catch (IOException e) {\n+            LOG.info(\"Could not get license information from GitHub for repository: \" + repositoryName, e);\n             return new LicenseInformation();\n         }\n     }\n", "next_change": {"commit": "df9b8ea3d3f3022f08da252d587518c909c3b73e", "changed_code": [{"header": "diff --git a/dockstore-webservice/src/main/java/io/dockstore/webservice/helpers/GitHubHelper.java b/dockstore-webservice/src/main/java/io/dockstore/webservice/helpers/GitHubHelper.java\nindex 2bf9b7589..b10b8da64 100644\n--- a/dockstore-webservice/src/main/java/io/dockstore/webservice/helpers/GitHubHelper.java\n+++ b/dockstore-webservice/src/main/java/io/dockstore/webservice/helpers/GitHubHelper.java\n", "chunk": "@@ -111,122 +105,6 @@ public final class GitHubHelper {\n         }\n     }\n \n-    /**\n-     * Builds, but does not execute, a request to invoke a GitHub Apps API, which requires a\n-     * particular Accept header\n-     * @param url\n-     * @param jsonWebToken\n-     * @return\n-     */\n-    private static Request buildGitHubAppRequest(String url, String jsonWebToken) {\n-        return new Request.Builder()\n-                .url(url)\n-                .get()\n-                .addHeader(\"Accept\", \"application/vnd.github.machine-man-preview+json\")\n-                .addHeader(\"Authorization\", \"Bearer \" + jsonWebToken)\n-                .build();\n-    }\n-\n-    /**\n-     * Executes a GitHub Apps API request, and returns the value of the \"repository_selection\" property\n-     * in the response. If the request fails or returns a response that does not include\n-     * a \"repository_selection\" property, returns null.\n-     * @param request\n-     * @return\n-     */\n-    public static String makeGitHubAppRequestAndGetRepositorySelection(Request request) {\n-        try {\n-            Response response = DockstoreWebserviceApplication.okHttpClient.newCall(request).execute();\n-            JsonElement body = new JsonParser().parse(response.body().string());\n-            if (body.isJsonObject()) {\n-                JsonObject responseBody = body.getAsJsonObject();\n-                if (response.isSuccessful()) {\n-                    JsonElement repoSelection = responseBody.get(\"repository_selection\");\n-                    if (repoSelection != null && repoSelection.isJsonPrimitive()) {\n-                        return repoSelection.getAsString();\n-                    }\n-                } else {\n-                    JsonElement errorMessage = responseBody.get(\"message\");\n-                    if (errorMessage != null && errorMessage.isJsonPrimitive()) {\n-                        // This should just mean the org or repo doesn't have GitHub installed, and isn't an error condition AFAIK\n-                        LOG.warn(\"Unable to fetch \" + request.url().toString() + \": \" + errorMessage.getAsString());\n-                    }\n-                }\n-            }\n-        } catch (IOException ex) {\n-            LOG.error(\"Unable to get GitHub App installation for  \" + request.url().toString(), ex);\n-        }\n-        return null;\n-    }\n-\n-    /**\n-     * Deterines if the specified repo has the Dockstore GitHub app installed\n-     * @param fullyQualifiedRepo\n-     * @param jsonWebToken\n-     * @return\n-     */\n-    private static boolean checkIfRepoHasGitHubAppInstall(String fullyQualifiedRepo, String jsonWebToken) {\n-        final Request request = buildGitHubAppRequest(\"https://api.github.com/repos/\" + fullyQualifiedRepo + \"/installation\", jsonWebToken);\n-        final String repositorySelection = makeGitHubAppRequestAndGetRepositorySelection(request);\n-        // Returning \"selected\" for my repo in my tests, but GitHub documentation example has \"all\".\n-        return Objects.equals(repositorySelection, \"selected\") || Objects.equals(repositorySelection, \"all\");\n-    }\n-\n-    /**\n-     * Determine if the organization has GitHub app installed on all repositories\n-     * @param organization name of organization\n-     * @param jsonWebToken JWT for GitHub App\n-     * @return organization name\n-     */\n-    private static String checkIfOrganizationHasGitHubAppInstall(String organization, String jsonWebToken) {\n-        final Request request = buildGitHubAppRequest(\"https://api.github.com/orgs/\" + organization + \"/installation\", jsonWebToken);\n-        final String repositorySelection = makeGitHubAppRequestAndGetRepositorySelection(request);\n-        // Returning \"selected\" for my repo in my tests, but GitHub documentation example has \"all\".\n-        return Objects.equals(repositorySelection, \"all\") || Objects.equals(repositorySelection, \"selected\") ? organization : null;\n-    }\n-\n-    /**\n-     * Retrieves all organizations a user belongs to that have GitHub app installed on all repositories\n-     * @return set of organizations\n-     */\n-    public static Set<String> getOrganizationsWithGitHubApp(Set<String> organizations) {\n-        return organizations.stream()\n-                .map((String organization) -> checkIfOrganizationHasGitHubAppInstall(organization, CacheConfigManager.getJsonWebToken()))\n-                .filter(Objects::nonNull)\n-                .collect(Collectors.toSet());\n-    }\n-\n-    public static Set<String> getReposWithGitHubApp(Set<String> repos) {\n-        return repos.stream()\n-                .filter(repo -> checkIfRepoHasGitHubAppInstall(repo, CacheConfigManager.getJsonWebToken()))\n-                .collect(Collectors.toSet());\n-    }\n-\n-    /**\n-     * Returns the org from a fully qualified GitHub repo, e.g., returns dockstore from dockstore/dockstore-ui2\n-     * @param repositoryName name best be in the right format\n-     * @return\n-     */\n-    public static String orgFromRepo(String repositoryName) {\n-        return repositoryName.split(\"/\")[0];\n-    }\n-\n-    /**\n-     * Returns all repos in <code>allRepositories</code> that have the Dockstore GitHub app installed, and that\n-     * don't belong to an org that already has the Dockstore GitHub app installed.\n-     * @param allRepositories\n-     * @param orgsWithAppInstalled\n-     * @return\n-     */\n-    public static Set<String> individualReposWithGitHubApp(Collection<String> allRepositories, Collection<String> orgsWithAppInstalled) {\n-        // Also get repos that have the App installed. This for repos that whose org does not have the app installed\n-        final Set<String> reposInApplessOrgs = allRepositories.stream()\n-                .filter(repositoryName -> !orgsWithAppInstalled.contains(orgFromRepo(repositoryName)))\n-                .collect(Collectors.toSet());\n-\n-        // Repos that have the GitHub app installed, but their orgs doesn't have the GitHub app installed\n-        return getReposWithGitHubApp(reposInApplessOrgs);\n-    }\n \n     /**\n      * Refresh the JWT for GitHub apps\n", "next_change": {"commit": "3a217a6b3ed7ceca59729e1ca044dbf5876786fa", "changed_code": [{"header": "diff --git a/dockstore-webservice/src/main/java/io/dockstore/webservice/helpers/GitHubHelper.java b/dockstore-webservice/src/main/java/io/dockstore/webservice/helpers/GitHubHelper.java\nindex b10b8da64..3baaab1ff 100644\n--- a/dockstore-webservice/src/main/java/io/dockstore/webservice/helpers/GitHubHelper.java\n+++ b/dockstore-webservice/src/main/java/io/dockstore/webservice/helpers/GitHubHelper.java\n", "chunk": "@@ -105,46 +89,6 @@ public final class GitHubHelper {\n         }\n     }\n \n-\n-    /**\n-     * Refresh the JWT for GitHub apps\n-     * @param gitHubAppId\n-     * @param gitHubPrivateKeyFile\n-     */\n-    public static void checkJWT(String gitHubAppId, String gitHubPrivateKeyFile) {\n-        RSAPrivateKey rsaPrivateKey = null;\n-        System.out.println(\"working dir=\" + Paths.get(\"\").toAbsolutePath().toString());\n-        try {\n-            String pemFileContent = FileUtils\n-                    .readFileToString(new File(gitHubPrivateKeyFile), StandardCharsets.UTF_8);\n-            final PemReader.Section privateKey = PemReader.readFirstSectionAndClose(new StringReader(pemFileContent), \"PRIVATE KEY\");\n-            if (privateKey != null) {\n-                KeyFactory keyFactory = KeyFactory.getInstance(\"RSA\");\n-                PKCS8EncodedKeySpec pkcs8EncodedKeySpec = new PKCS8EncodedKeySpec(privateKey.getBase64DecodedBytes());\n-                rsaPrivateKey = (RSAPrivateKey)keyFactory.generatePrivate(pkcs8EncodedKeySpec);\n-            } else {\n-                LOG.error(\"No private key found in \" + gitHubPrivateKeyFile);\n-            }\n-        } catch (IOException | NoSuchAlgorithmException | InvalidKeySpecException ex) {\n-            LOG.error(ex.getMessage(), ex);\n-        }\n-\n-        if (rsaPrivateKey != null) {\n-            final int tenMinutes = 600000;\n-            try {\n-                Algorithm algorithm = Algorithm.RSA256(null, rsaPrivateKey);\n-                String jsonWebToken = JWT.create()\n-                        .withIssuer(gitHubAppId)\n-                        .withIssuedAt(new Date())\n-                        .withExpiresAt(new Date(Calendar.getInstance().getTimeInMillis() + tenMinutes))\n-                        .sign(algorithm);\n-                CacheConfigManager.setJsonWebToken(jsonWebToken);\n-            } catch (JWTCreationException ex) {\n-                LOG.error(ex.getMessage(), ex);\n-            }\n-        }\n-    }\n-\n     /**\n      * Based on GitHub username, find the corresponding user\n      * @param tokenDAO\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "f34f61677ad6040179692e15e9db5527e5ee16f4", "message": "Merge commit", "committedDate": null}, {"oid": "f7a6642ffb21063271450b41e1fd426000f83aad", "committedDate": "2020-09-21 09:47:58 -0400", "message": "3727/fix500 invalid GitHub auth (#3813)"}, {"oid": "df9b8ea3d3f3022f08da252d587518c909c3b73e", "committedDate": "2021-03-15 13:56:36 -0400", "message": "Okhttp update, working display of cache misses, small rate limit improvement (#4096)"}, {"oid": "d34af609a98da26d6af2fdf57ae6f6d4362a96df", "committedDate": "2021-06-24 09:52:54 -0400", "message": "Feature/sort imports (#4326)"}, {"oid": "32c1cb2724284956c131f34ce03f13dfea04b7b1", "committedDate": "2021-08-12 11:24:02 -0400", "message": "Protecting logging from pattern breaking (#4399)"}, {"oid": "3a217a6b3ed7ceca59729e1ca044dbf5876786fa", "committedDate": "2023-02-21 11:46:27 -0500", "message": "Feature/jwt refactor (#5373)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjAxNDAwNA==", "url": "https://github.com/dockstore/dockstore/pull/3751#discussion_r476014004", "body": "You could also use the same empty LicenseInformation here.", "bodyText": "You could also use the same empty LicenseInformation here.", "bodyHTML": "<p dir=\"auto\">You could also use the same empty LicenseInformation here.</p>", "author": "coverbeck", "createdAt": "2020-08-25T00:50:40Z", "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/helpers/GitHubHelper.java", "diffHunk": "@@ -85,6 +89,27 @@ public static String getGitHubAccessToken(String code, String githubClientID, St\n         }\n     }\n \n+    /**\n+     * Get license for a specific GitHub repository\n+     * @param gitHub    The GitHub API\n+     * @param repositoryName    Name of the GitHub repository (e.g. dockstore/lambda)\n+     * @return  The LicenseInformation associated with the repository\n+     */\n+    public static LicenseInformation getLicenseInformation(GitHub gitHub, String repositoryName) {\n+        LicenseInformation licenseInformation = new LicenseInformation();\n+        try {\n+            GHRepository repository = gitHub.getRepository(repositoryName);\n+            GHLicense license = repository.getLicense();\n+            if (license == null) {\n+                return new LicenseInformation();\n+            }\n+            licenseInformation.setLicenseName(license.getName());\n+            return licenseInformation;\n+        } catch (IOException e) {\n+            return new LicenseInformation();", "originalCommit": "8cc08a56b443db935259ee27c762929cedda56ed", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "11a1f103d815d6b994948daa9900b076bbc36dc6", "changed_code": [{"header": "diff --git a/dockstore-webservice/src/main/java/io/dockstore/webservice/helpers/GitHubHelper.java b/dockstore-webservice/src/main/java/io/dockstore/webservice/helpers/GitHubHelper.java\nindex 06c02e772..2bf9b7589 100644\n--- a/dockstore-webservice/src/main/java/io/dockstore/webservice/helpers/GitHubHelper.java\n+++ b/dockstore-webservice/src/main/java/io/dockstore/webservice/helpers/GitHubHelper.java\n", "chunk": "@@ -96,16 +96,17 @@ public final class GitHubHelper {\n      * @return  The LicenseInformation associated with the repository\n      */\n     public static LicenseInformation getLicenseInformation(GitHub gitHub, String repositoryName) {\n-        LicenseInformation licenseInformation = new LicenseInformation();\n         try {\n             GHRepository repository = gitHub.getRepository(repositoryName);\n             GHLicense license = repository.getLicense();\n             if (license == null) {\n                 return new LicenseInformation();\n             }\n+            LicenseInformation licenseInformation = new LicenseInformation();\n             licenseInformation.setLicenseName(license.getName());\n             return licenseInformation;\n         } catch (IOException e) {\n+            LOG.info(\"Could not get license information from GitHub for repository: \" + repositoryName, e);\n             return new LicenseInformation();\n         }\n     }\n", "next_change": null}]}, "revised_code_in_main": {"commit": "f34f61677ad6040179692e15e9db5527e5ee16f4", "changed_code": [{"header": "diff --git a/dockstore-webservice/src/main/java/io/dockstore/webservice/helpers/GitHubHelper.java b/dockstore-webservice/src/main/java/io/dockstore/webservice/helpers/GitHubHelper.java\nindex 06c02e772..2bf9b7589 100644\n--- a/dockstore-webservice/src/main/java/io/dockstore/webservice/helpers/GitHubHelper.java\n+++ b/dockstore-webservice/src/main/java/io/dockstore/webservice/helpers/GitHubHelper.java\n", "chunk": "@@ -96,16 +96,17 @@ public final class GitHubHelper {\n      * @return  The LicenseInformation associated with the repository\n      */\n     public static LicenseInformation getLicenseInformation(GitHub gitHub, String repositoryName) {\n-        LicenseInformation licenseInformation = new LicenseInformation();\n         try {\n             GHRepository repository = gitHub.getRepository(repositoryName);\n             GHLicense license = repository.getLicense();\n             if (license == null) {\n                 return new LicenseInformation();\n             }\n+            LicenseInformation licenseInformation = new LicenseInformation();\n             licenseInformation.setLicenseName(license.getName());\n             return licenseInformation;\n         } catch (IOException e) {\n+            LOG.info(\"Could not get license information from GitHub for repository: \" + repositoryName, e);\n             return new LicenseInformation();\n         }\n     }\n", "next_change": {"commit": "df9b8ea3d3f3022f08da252d587518c909c3b73e", "changed_code": [{"header": "diff --git a/dockstore-webservice/src/main/java/io/dockstore/webservice/helpers/GitHubHelper.java b/dockstore-webservice/src/main/java/io/dockstore/webservice/helpers/GitHubHelper.java\nindex 2bf9b7589..b10b8da64 100644\n--- a/dockstore-webservice/src/main/java/io/dockstore/webservice/helpers/GitHubHelper.java\n+++ b/dockstore-webservice/src/main/java/io/dockstore/webservice/helpers/GitHubHelper.java\n", "chunk": "@@ -111,122 +105,6 @@ public final class GitHubHelper {\n         }\n     }\n \n-    /**\n-     * Builds, but does not execute, a request to invoke a GitHub Apps API, which requires a\n-     * particular Accept header\n-     * @param url\n-     * @param jsonWebToken\n-     * @return\n-     */\n-    private static Request buildGitHubAppRequest(String url, String jsonWebToken) {\n-        return new Request.Builder()\n-                .url(url)\n-                .get()\n-                .addHeader(\"Accept\", \"application/vnd.github.machine-man-preview+json\")\n-                .addHeader(\"Authorization\", \"Bearer \" + jsonWebToken)\n-                .build();\n-    }\n-\n-    /**\n-     * Executes a GitHub Apps API request, and returns the value of the \"repository_selection\" property\n-     * in the response. If the request fails or returns a response that does not include\n-     * a \"repository_selection\" property, returns null.\n-     * @param request\n-     * @return\n-     */\n-    public static String makeGitHubAppRequestAndGetRepositorySelection(Request request) {\n-        try {\n-            Response response = DockstoreWebserviceApplication.okHttpClient.newCall(request).execute();\n-            JsonElement body = new JsonParser().parse(response.body().string());\n-            if (body.isJsonObject()) {\n-                JsonObject responseBody = body.getAsJsonObject();\n-                if (response.isSuccessful()) {\n-                    JsonElement repoSelection = responseBody.get(\"repository_selection\");\n-                    if (repoSelection != null && repoSelection.isJsonPrimitive()) {\n-                        return repoSelection.getAsString();\n-                    }\n-                } else {\n-                    JsonElement errorMessage = responseBody.get(\"message\");\n-                    if (errorMessage != null && errorMessage.isJsonPrimitive()) {\n-                        // This should just mean the org or repo doesn't have GitHub installed, and isn't an error condition AFAIK\n-                        LOG.warn(\"Unable to fetch \" + request.url().toString() + \": \" + errorMessage.getAsString());\n-                    }\n-                }\n-            }\n-        } catch (IOException ex) {\n-            LOG.error(\"Unable to get GitHub App installation for  \" + request.url().toString(), ex);\n-        }\n-        return null;\n-    }\n-\n-    /**\n-     * Deterines if the specified repo has the Dockstore GitHub app installed\n-     * @param fullyQualifiedRepo\n-     * @param jsonWebToken\n-     * @return\n-     */\n-    private static boolean checkIfRepoHasGitHubAppInstall(String fullyQualifiedRepo, String jsonWebToken) {\n-        final Request request = buildGitHubAppRequest(\"https://api.github.com/repos/\" + fullyQualifiedRepo + \"/installation\", jsonWebToken);\n-        final String repositorySelection = makeGitHubAppRequestAndGetRepositorySelection(request);\n-        // Returning \"selected\" for my repo in my tests, but GitHub documentation example has \"all\".\n-        return Objects.equals(repositorySelection, \"selected\") || Objects.equals(repositorySelection, \"all\");\n-    }\n-\n-    /**\n-     * Determine if the organization has GitHub app installed on all repositories\n-     * @param organization name of organization\n-     * @param jsonWebToken JWT for GitHub App\n-     * @return organization name\n-     */\n-    private static String checkIfOrganizationHasGitHubAppInstall(String organization, String jsonWebToken) {\n-        final Request request = buildGitHubAppRequest(\"https://api.github.com/orgs/\" + organization + \"/installation\", jsonWebToken);\n-        final String repositorySelection = makeGitHubAppRequestAndGetRepositorySelection(request);\n-        // Returning \"selected\" for my repo in my tests, but GitHub documentation example has \"all\".\n-        return Objects.equals(repositorySelection, \"all\") || Objects.equals(repositorySelection, \"selected\") ? organization : null;\n-    }\n-\n-    /**\n-     * Retrieves all organizations a user belongs to that have GitHub app installed on all repositories\n-     * @return set of organizations\n-     */\n-    public static Set<String> getOrganizationsWithGitHubApp(Set<String> organizations) {\n-        return organizations.stream()\n-                .map((String organization) -> checkIfOrganizationHasGitHubAppInstall(organization, CacheConfigManager.getJsonWebToken()))\n-                .filter(Objects::nonNull)\n-                .collect(Collectors.toSet());\n-    }\n-\n-    public static Set<String> getReposWithGitHubApp(Set<String> repos) {\n-        return repos.stream()\n-                .filter(repo -> checkIfRepoHasGitHubAppInstall(repo, CacheConfigManager.getJsonWebToken()))\n-                .collect(Collectors.toSet());\n-    }\n-\n-    /**\n-     * Returns the org from a fully qualified GitHub repo, e.g., returns dockstore from dockstore/dockstore-ui2\n-     * @param repositoryName name best be in the right format\n-     * @return\n-     */\n-    public static String orgFromRepo(String repositoryName) {\n-        return repositoryName.split(\"/\")[0];\n-    }\n-\n-    /**\n-     * Returns all repos in <code>allRepositories</code> that have the Dockstore GitHub app installed, and that\n-     * don't belong to an org that already has the Dockstore GitHub app installed.\n-     * @param allRepositories\n-     * @param orgsWithAppInstalled\n-     * @return\n-     */\n-    public static Set<String> individualReposWithGitHubApp(Collection<String> allRepositories, Collection<String> orgsWithAppInstalled) {\n-        // Also get repos that have the App installed. This for repos that whose org does not have the app installed\n-        final Set<String> reposInApplessOrgs = allRepositories.stream()\n-                .filter(repositoryName -> !orgsWithAppInstalled.contains(orgFromRepo(repositoryName)))\n-                .collect(Collectors.toSet());\n-\n-        // Repos that have the GitHub app installed, but their orgs doesn't have the GitHub app installed\n-        return getReposWithGitHubApp(reposInApplessOrgs);\n-    }\n \n     /**\n      * Refresh the JWT for GitHub apps\n", "next_change": {"commit": "3a217a6b3ed7ceca59729e1ca044dbf5876786fa", "changed_code": [{"header": "diff --git a/dockstore-webservice/src/main/java/io/dockstore/webservice/helpers/GitHubHelper.java b/dockstore-webservice/src/main/java/io/dockstore/webservice/helpers/GitHubHelper.java\nindex b10b8da64..3baaab1ff 100644\n--- a/dockstore-webservice/src/main/java/io/dockstore/webservice/helpers/GitHubHelper.java\n+++ b/dockstore-webservice/src/main/java/io/dockstore/webservice/helpers/GitHubHelper.java\n", "chunk": "@@ -105,46 +89,6 @@ public final class GitHubHelper {\n         }\n     }\n \n-\n-    /**\n-     * Refresh the JWT for GitHub apps\n-     * @param gitHubAppId\n-     * @param gitHubPrivateKeyFile\n-     */\n-    public static void checkJWT(String gitHubAppId, String gitHubPrivateKeyFile) {\n-        RSAPrivateKey rsaPrivateKey = null;\n-        System.out.println(\"working dir=\" + Paths.get(\"\").toAbsolutePath().toString());\n-        try {\n-            String pemFileContent = FileUtils\n-                    .readFileToString(new File(gitHubPrivateKeyFile), StandardCharsets.UTF_8);\n-            final PemReader.Section privateKey = PemReader.readFirstSectionAndClose(new StringReader(pemFileContent), \"PRIVATE KEY\");\n-            if (privateKey != null) {\n-                KeyFactory keyFactory = KeyFactory.getInstance(\"RSA\");\n-                PKCS8EncodedKeySpec pkcs8EncodedKeySpec = new PKCS8EncodedKeySpec(privateKey.getBase64DecodedBytes());\n-                rsaPrivateKey = (RSAPrivateKey)keyFactory.generatePrivate(pkcs8EncodedKeySpec);\n-            } else {\n-                LOG.error(\"No private key found in \" + gitHubPrivateKeyFile);\n-            }\n-        } catch (IOException | NoSuchAlgorithmException | InvalidKeySpecException ex) {\n-            LOG.error(ex.getMessage(), ex);\n-        }\n-\n-        if (rsaPrivateKey != null) {\n-            final int tenMinutes = 600000;\n-            try {\n-                Algorithm algorithm = Algorithm.RSA256(null, rsaPrivateKey);\n-                String jsonWebToken = JWT.create()\n-                        .withIssuer(gitHubAppId)\n-                        .withIssuedAt(new Date())\n-                        .withExpiresAt(new Date(Calendar.getInstance().getTimeInMillis() + tenMinutes))\n-                        .sign(algorithm);\n-                CacheConfigManager.setJsonWebToken(jsonWebToken);\n-            } catch (JWTCreationException ex) {\n-                LOG.error(ex.getMessage(), ex);\n-            }\n-        }\n-    }\n-\n     /**\n      * Based on GitHub username, find the corresponding user\n      * @param tokenDAO\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "f34f61677ad6040179692e15e9db5527e5ee16f4", "message": "Merge commit", "committedDate": null}, {"oid": "f7a6642ffb21063271450b41e1fd426000f83aad", "committedDate": "2020-09-21 09:47:58 -0400", "message": "3727/fix500 invalid GitHub auth (#3813)"}, {"oid": "df9b8ea3d3f3022f08da252d587518c909c3b73e", "committedDate": "2021-03-15 13:56:36 -0400", "message": "Okhttp update, working display of cache misses, small rate limit improvement (#4096)"}, {"oid": "d34af609a98da26d6af2fdf57ae6f6d4362a96df", "committedDate": "2021-06-24 09:52:54 -0400", "message": "Feature/sort imports (#4326)"}, {"oid": "32c1cb2724284956c131f34ce03f13dfea04b7b1", "committedDate": "2021-08-12 11:24:02 -0400", "message": "Protecting logging from pattern breaking (#4399)"}, {"oid": "3a217a6b3ed7ceca59729e1ca044dbf5876786fa", "committedDate": "2023-02-21 11:46:27 -0500", "message": "Feature/jwt refactor (#5373)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjAxNDM2Mg==", "url": "https://github.com/dockstore/dockstore/pull/3751#discussion_r476014362", "body": "Any reason not to log this? Unless it's common, it's a new feature and might be helpful in figuring out what is going wrong.", "bodyText": "Any reason not to log this? Unless it's common, it's a new feature and might be helpful in figuring out what is going wrong.", "bodyHTML": "<p dir=\"auto\">Any reason not to log this? Unless it's common, it's a new feature and might be helpful in figuring out what is going wrong.</p>", "author": "coverbeck", "createdAt": "2020-08-25T00:51:12Z", "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/helpers/GitHubHelper.java", "diffHunk": "@@ -85,6 +89,27 @@ public static String getGitHubAccessToken(String code, String githubClientID, St\n         }\n     }\n \n+    /**\n+     * Get license for a specific GitHub repository\n+     * @param gitHub    The GitHub API\n+     * @param repositoryName    Name of the GitHub repository (e.g. dockstore/lambda)\n+     * @return  The LicenseInformation associated with the repository\n+     */\n+    public static LicenseInformation getLicenseInformation(GitHub gitHub, String repositoryName) {\n+        LicenseInformation licenseInformation = new LicenseInformation();\n+        try {\n+            GHRepository repository = gitHub.getRepository(repositoryName);\n+            GHLicense license = repository.getLicense();\n+            if (license == null) {\n+                return new LicenseInformation();\n+            }\n+            licenseInformation.setLicenseName(license.getName());\n+            return licenseInformation;\n+        } catch (IOException e) {", "originalCommit": "8cc08a56b443db935259ee27c762929cedda56ed", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "11a1f103d815d6b994948daa9900b076bbc36dc6", "changed_code": [{"header": "diff --git a/dockstore-webservice/src/main/java/io/dockstore/webservice/helpers/GitHubHelper.java b/dockstore-webservice/src/main/java/io/dockstore/webservice/helpers/GitHubHelper.java\nindex 06c02e772..2bf9b7589 100644\n--- a/dockstore-webservice/src/main/java/io/dockstore/webservice/helpers/GitHubHelper.java\n+++ b/dockstore-webservice/src/main/java/io/dockstore/webservice/helpers/GitHubHelper.java\n", "chunk": "@@ -96,16 +96,17 @@ public final class GitHubHelper {\n      * @return  The LicenseInformation associated with the repository\n      */\n     public static LicenseInformation getLicenseInformation(GitHub gitHub, String repositoryName) {\n-        LicenseInformation licenseInformation = new LicenseInformation();\n         try {\n             GHRepository repository = gitHub.getRepository(repositoryName);\n             GHLicense license = repository.getLicense();\n             if (license == null) {\n                 return new LicenseInformation();\n             }\n+            LicenseInformation licenseInformation = new LicenseInformation();\n             licenseInformation.setLicenseName(license.getName());\n             return licenseInformation;\n         } catch (IOException e) {\n+            LOG.info(\"Could not get license information from GitHub for repository: \" + repositoryName, e);\n             return new LicenseInformation();\n         }\n     }\n", "next_change": null}]}, "revised_code_in_main": {"commit": "f34f61677ad6040179692e15e9db5527e5ee16f4", "changed_code": [{"header": "diff --git a/dockstore-webservice/src/main/java/io/dockstore/webservice/helpers/GitHubHelper.java b/dockstore-webservice/src/main/java/io/dockstore/webservice/helpers/GitHubHelper.java\nindex 06c02e772..2bf9b7589 100644\n--- a/dockstore-webservice/src/main/java/io/dockstore/webservice/helpers/GitHubHelper.java\n+++ b/dockstore-webservice/src/main/java/io/dockstore/webservice/helpers/GitHubHelper.java\n", "chunk": "@@ -96,16 +96,17 @@ public final class GitHubHelper {\n      * @return  The LicenseInformation associated with the repository\n      */\n     public static LicenseInformation getLicenseInformation(GitHub gitHub, String repositoryName) {\n-        LicenseInformation licenseInformation = new LicenseInformation();\n         try {\n             GHRepository repository = gitHub.getRepository(repositoryName);\n             GHLicense license = repository.getLicense();\n             if (license == null) {\n                 return new LicenseInformation();\n             }\n+            LicenseInformation licenseInformation = new LicenseInformation();\n             licenseInformation.setLicenseName(license.getName());\n             return licenseInformation;\n         } catch (IOException e) {\n+            LOG.info(\"Could not get license information from GitHub for repository: \" + repositoryName, e);\n             return new LicenseInformation();\n         }\n     }\n", "next_change": {"commit": "df9b8ea3d3f3022f08da252d587518c909c3b73e", "changed_code": [{"header": "diff --git a/dockstore-webservice/src/main/java/io/dockstore/webservice/helpers/GitHubHelper.java b/dockstore-webservice/src/main/java/io/dockstore/webservice/helpers/GitHubHelper.java\nindex 2bf9b7589..b10b8da64 100644\n--- a/dockstore-webservice/src/main/java/io/dockstore/webservice/helpers/GitHubHelper.java\n+++ b/dockstore-webservice/src/main/java/io/dockstore/webservice/helpers/GitHubHelper.java\n", "chunk": "@@ -111,122 +105,6 @@ public final class GitHubHelper {\n         }\n     }\n \n-    /**\n-     * Builds, but does not execute, a request to invoke a GitHub Apps API, which requires a\n-     * particular Accept header\n-     * @param url\n-     * @param jsonWebToken\n-     * @return\n-     */\n-    private static Request buildGitHubAppRequest(String url, String jsonWebToken) {\n-        return new Request.Builder()\n-                .url(url)\n-                .get()\n-                .addHeader(\"Accept\", \"application/vnd.github.machine-man-preview+json\")\n-                .addHeader(\"Authorization\", \"Bearer \" + jsonWebToken)\n-                .build();\n-    }\n-\n-    /**\n-     * Executes a GitHub Apps API request, and returns the value of the \"repository_selection\" property\n-     * in the response. If the request fails or returns a response that does not include\n-     * a \"repository_selection\" property, returns null.\n-     * @param request\n-     * @return\n-     */\n-    public static String makeGitHubAppRequestAndGetRepositorySelection(Request request) {\n-        try {\n-            Response response = DockstoreWebserviceApplication.okHttpClient.newCall(request).execute();\n-            JsonElement body = new JsonParser().parse(response.body().string());\n-            if (body.isJsonObject()) {\n-                JsonObject responseBody = body.getAsJsonObject();\n-                if (response.isSuccessful()) {\n-                    JsonElement repoSelection = responseBody.get(\"repository_selection\");\n-                    if (repoSelection != null && repoSelection.isJsonPrimitive()) {\n-                        return repoSelection.getAsString();\n-                    }\n-                } else {\n-                    JsonElement errorMessage = responseBody.get(\"message\");\n-                    if (errorMessage != null && errorMessage.isJsonPrimitive()) {\n-                        // This should just mean the org or repo doesn't have GitHub installed, and isn't an error condition AFAIK\n-                        LOG.warn(\"Unable to fetch \" + request.url().toString() + \": \" + errorMessage.getAsString());\n-                    }\n-                }\n-            }\n-        } catch (IOException ex) {\n-            LOG.error(\"Unable to get GitHub App installation for  \" + request.url().toString(), ex);\n-        }\n-        return null;\n-    }\n-\n-    /**\n-     * Deterines if the specified repo has the Dockstore GitHub app installed\n-     * @param fullyQualifiedRepo\n-     * @param jsonWebToken\n-     * @return\n-     */\n-    private static boolean checkIfRepoHasGitHubAppInstall(String fullyQualifiedRepo, String jsonWebToken) {\n-        final Request request = buildGitHubAppRequest(\"https://api.github.com/repos/\" + fullyQualifiedRepo + \"/installation\", jsonWebToken);\n-        final String repositorySelection = makeGitHubAppRequestAndGetRepositorySelection(request);\n-        // Returning \"selected\" for my repo in my tests, but GitHub documentation example has \"all\".\n-        return Objects.equals(repositorySelection, \"selected\") || Objects.equals(repositorySelection, \"all\");\n-    }\n-\n-    /**\n-     * Determine if the organization has GitHub app installed on all repositories\n-     * @param organization name of organization\n-     * @param jsonWebToken JWT for GitHub App\n-     * @return organization name\n-     */\n-    private static String checkIfOrganizationHasGitHubAppInstall(String organization, String jsonWebToken) {\n-        final Request request = buildGitHubAppRequest(\"https://api.github.com/orgs/\" + organization + \"/installation\", jsonWebToken);\n-        final String repositorySelection = makeGitHubAppRequestAndGetRepositorySelection(request);\n-        // Returning \"selected\" for my repo in my tests, but GitHub documentation example has \"all\".\n-        return Objects.equals(repositorySelection, \"all\") || Objects.equals(repositorySelection, \"selected\") ? organization : null;\n-    }\n-\n-    /**\n-     * Retrieves all organizations a user belongs to that have GitHub app installed on all repositories\n-     * @return set of organizations\n-     */\n-    public static Set<String> getOrganizationsWithGitHubApp(Set<String> organizations) {\n-        return organizations.stream()\n-                .map((String organization) -> checkIfOrganizationHasGitHubAppInstall(organization, CacheConfigManager.getJsonWebToken()))\n-                .filter(Objects::nonNull)\n-                .collect(Collectors.toSet());\n-    }\n-\n-    public static Set<String> getReposWithGitHubApp(Set<String> repos) {\n-        return repos.stream()\n-                .filter(repo -> checkIfRepoHasGitHubAppInstall(repo, CacheConfigManager.getJsonWebToken()))\n-                .collect(Collectors.toSet());\n-    }\n-\n-    /**\n-     * Returns the org from a fully qualified GitHub repo, e.g., returns dockstore from dockstore/dockstore-ui2\n-     * @param repositoryName name best be in the right format\n-     * @return\n-     */\n-    public static String orgFromRepo(String repositoryName) {\n-        return repositoryName.split(\"/\")[0];\n-    }\n-\n-    /**\n-     * Returns all repos in <code>allRepositories</code> that have the Dockstore GitHub app installed, and that\n-     * don't belong to an org that already has the Dockstore GitHub app installed.\n-     * @param allRepositories\n-     * @param orgsWithAppInstalled\n-     * @return\n-     */\n-    public static Set<String> individualReposWithGitHubApp(Collection<String> allRepositories, Collection<String> orgsWithAppInstalled) {\n-        // Also get repos that have the App installed. This for repos that whose org does not have the app installed\n-        final Set<String> reposInApplessOrgs = allRepositories.stream()\n-                .filter(repositoryName -> !orgsWithAppInstalled.contains(orgFromRepo(repositoryName)))\n-                .collect(Collectors.toSet());\n-\n-        // Repos that have the GitHub app installed, but their orgs doesn't have the GitHub app installed\n-        return getReposWithGitHubApp(reposInApplessOrgs);\n-    }\n \n     /**\n      * Refresh the JWT for GitHub apps\n", "next_change": {"commit": "3a217a6b3ed7ceca59729e1ca044dbf5876786fa", "changed_code": [{"header": "diff --git a/dockstore-webservice/src/main/java/io/dockstore/webservice/helpers/GitHubHelper.java b/dockstore-webservice/src/main/java/io/dockstore/webservice/helpers/GitHubHelper.java\nindex b10b8da64..3baaab1ff 100644\n--- a/dockstore-webservice/src/main/java/io/dockstore/webservice/helpers/GitHubHelper.java\n+++ b/dockstore-webservice/src/main/java/io/dockstore/webservice/helpers/GitHubHelper.java\n", "chunk": "@@ -105,46 +89,6 @@ public final class GitHubHelper {\n         }\n     }\n \n-\n-    /**\n-     * Refresh the JWT for GitHub apps\n-     * @param gitHubAppId\n-     * @param gitHubPrivateKeyFile\n-     */\n-    public static void checkJWT(String gitHubAppId, String gitHubPrivateKeyFile) {\n-        RSAPrivateKey rsaPrivateKey = null;\n-        System.out.println(\"working dir=\" + Paths.get(\"\").toAbsolutePath().toString());\n-        try {\n-            String pemFileContent = FileUtils\n-                    .readFileToString(new File(gitHubPrivateKeyFile), StandardCharsets.UTF_8);\n-            final PemReader.Section privateKey = PemReader.readFirstSectionAndClose(new StringReader(pemFileContent), \"PRIVATE KEY\");\n-            if (privateKey != null) {\n-                KeyFactory keyFactory = KeyFactory.getInstance(\"RSA\");\n-                PKCS8EncodedKeySpec pkcs8EncodedKeySpec = new PKCS8EncodedKeySpec(privateKey.getBase64DecodedBytes());\n-                rsaPrivateKey = (RSAPrivateKey)keyFactory.generatePrivate(pkcs8EncodedKeySpec);\n-            } else {\n-                LOG.error(\"No private key found in \" + gitHubPrivateKeyFile);\n-            }\n-        } catch (IOException | NoSuchAlgorithmException | InvalidKeySpecException ex) {\n-            LOG.error(ex.getMessage(), ex);\n-        }\n-\n-        if (rsaPrivateKey != null) {\n-            final int tenMinutes = 600000;\n-            try {\n-                Algorithm algorithm = Algorithm.RSA256(null, rsaPrivateKey);\n-                String jsonWebToken = JWT.create()\n-                        .withIssuer(gitHubAppId)\n-                        .withIssuedAt(new Date())\n-                        .withExpiresAt(new Date(Calendar.getInstance().getTimeInMillis() + tenMinutes))\n-                        .sign(algorithm);\n-                CacheConfigManager.setJsonWebToken(jsonWebToken);\n-            } catch (JWTCreationException ex) {\n-                LOG.error(ex.getMessage(), ex);\n-            }\n-        }\n-    }\n-\n     /**\n      * Based on GitHub username, find the corresponding user\n      * @param tokenDAO\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "f34f61677ad6040179692e15e9db5527e5ee16f4", "message": "Merge commit", "committedDate": null}, {"oid": "f7a6642ffb21063271450b41e1fd426000f83aad", "committedDate": "2020-09-21 09:47:58 -0400", "message": "3727/fix500 invalid GitHub auth (#3813)"}, {"oid": "df9b8ea3d3f3022f08da252d587518c909c3b73e", "committedDate": "2021-03-15 13:56:36 -0400", "message": "Okhttp update, working display of cache misses, small rate limit improvement (#4096)"}, {"oid": "d34af609a98da26d6af2fdf57ae6f6d4362a96df", "committedDate": "2021-06-24 09:52:54 -0400", "message": "Feature/sort imports (#4326)"}, {"oid": "32c1cb2724284956c131f34ce03f13dfea04b7b1", "committedDate": "2021-08-12 11:24:02 -0400", "message": "Protecting logging from pattern breaking (#4399)"}, {"oid": "3a217a6b3ed7ceca59729e1ca044dbf5876786fa", "committedDate": "2023-02-21 11:46:27 -0500", "message": "Feature/jwt refactor (#5373)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjAxNzYxNQ==", "url": "https://github.com/dockstore/dockstore/pull/3751#discussion_r476017615", "body": "Hadn't noticed this before, but it would be nice if the keys were at least constants. But this is already like this in several places, so don't bother", "bodyText": "Hadn't noticed this before, but it would be nice if the keys were at least constants. But this is already like this in several places, so don't bother", "bodyHTML": "<p dir=\"auto\">Hadn't noticed this before, but it would be nice if the keys were at least constants. But this is already like this in several places, so don't bother</p>", "author": "coverbeck", "createdAt": "2020-08-25T00:56:13Z", "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/helpers/AbstractImageRegistry.java", "diffHunk": "@@ -329,12 +331,25 @@ public Tool refreshTool(final long toolId, final Long userId, final UserDAO user\n         logToolRefresh(dashboardPrefix, tool);\n \n         String repositoryId = sourceCodeRepoInterface.getRepositoryId(updatedTool);\n+        String gitUrl = tool.getGitUrl();\n+        String gitRepository = getGitRepositoryFromGitUrl(gitUrl);\n+        sourceCodeRepoInterface.setLicenseInformation(updatedTool, gitRepository);\n         sourceCodeRepoInterface.setDefaultBranchIfNotSet(updatedTool, repositoryId);\n         updatedTool.syncMetadataWithDefault();\n         // Return the updated tool\n         return updatedTool;\n     }\n \n+    public static String getGitRepositoryFromGitUrl(String gitUrl) {\n+        Map<String, String> repoUrlMap = parseGitUrl(gitUrl);\n+        if (repoUrlMap == null) {\n+            return null;\n+        }\n+        String username = repoUrlMap.get(\"Username\");", "originalCommit": "8cc08a56b443db935259ee27c762929cedda56ed", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "902126a7ae432db0b75381ca140ba537c44b7efc", "changed_code": [{"header": "diff --git a/dockstore-webservice/src/main/java/io/dockstore/webservice/helpers/AbstractImageRegistry.java b/dockstore-webservice/src/main/java/io/dockstore/webservice/helpers/AbstractImageRegistry.java\nindex 83a5ba378..26c9e863d 100644\n--- a/dockstore-webservice/src/main/java/io/dockstore/webservice/helpers/AbstractImageRegistry.java\n+++ b/dockstore-webservice/src/main/java/io/dockstore/webservice/helpers/AbstractImageRegistry.java\n", "chunk": "@@ -341,12 +343,13 @@ public abstract class AbstractImageRegistry {\n     }\n \n     public static String getGitRepositoryFromGitUrl(String gitUrl) {\n-        Map<String, String> repoUrlMap = parseGitUrl(gitUrl);\n-        if (repoUrlMap == null) {\n+        Optional<Map<String, String>> repoUrlMap = parseGitUrl(gitUrl);\n+        if (repoUrlMap.isEmpty()) {\n             return null;\n         }\n-        String username = repoUrlMap.get(\"Username\");\n-        String repository = repoUrlMap.get(\"Repository\");\n+\n+        String username = repoUrlMap.get().get(SourceCodeRepoFactory.GIT_URL_USER_KEY);\n+        String repository = repoUrlMap.get().get(SourceCodeRepoFactory.GIT_URL_REPOSITORY_KEY);\n         return username + '/' + repository;\n     }\n \n", "next_change": null}]}, "commits_in_main": [{"oid": "f34f61677ad6040179692e15e9db5527e5ee16f4", "message": "Merge commit", "committedDate": null}, {"oid": "60a4eb53de3cb31b494363fb0573d3e9f89ef944", "committedDate": "2021-01-08 10:33:35 -0500", "message": "Feature/3656/image size and update date (#3997)"}, {"oid": "8c55531bd0abb76e7a723d61249476a7a4b4d5c6", "committedDate": "2021-03-17 19:50:12 -0400", "message": "Feature/lower log level (#4088)"}, {"oid": "cbd424832c5e349efdf04d2f9ff3d99ef68245d3", "committedDate": "2021-03-19 14:34:06 -0400", "message": "namespace cache for testing on circle CI (#4120)"}, {"oid": "8eb270ac8831355322fe7cfec01884bae27cef9f", "committedDate": "2021-03-30 19:22:52 -0400", "message": "Feature/http client risky cleanup (#4124)"}, {"oid": "0cc07691f021e33fa8e7ed8a803af3d9ffb7c678", "committedDate": "2021-04-09 12:18:20 -0700", "message": "4080/lazy load versions more often (#4135)"}, {"oid": "2a788344c4afbb7d50c07939a335e56c5d7a014e", "committedDate": "2021-06-02 10:01:28 -0400", "message": "Feature/checkstyle codestyle conflicts (#4261)"}, {"oid": "d34af609a98da26d6af2fdf57ae6f6d4362a96df", "committedDate": "2021-06-24 09:52:54 -0400", "message": "Feature/sort imports (#4326)"}, {"oid": "1cbb74ff0174762765c72af9e0c7da955e5620fc", "committedDate": "2021-08-23 11:56:30 -0400", "message": "Catch error (#4408)"}, {"oid": "cc2a1152102823bac1d0453dbb672ab8b4b53030", "committedDate": "2021-08-26 11:25:27 -0700", "message": "Return sha-256 for source file checksums (#4424)"}, {"oid": "902126a7ae432db0b75381ca140ba537c44b7efc", "committedDate": "2021-12-09 13:17:47 -0800", "message": "Feature/regex backtrack fix (#4608)"}, {"oid": "61add711e172f17e1c24a711f041c7a5f15e4081", "committedDate": "2022-01-26 10:41:43 -0800", "message": "update topicAutomatic for workflows on refresh and tools on refresh and creation"}, {"oid": "83228732692eb60d94dd8a480c8f751b0fd1c66b", "committedDate": "2022-02-16 14:54:12 -0500", "message": "Harvest checksums for GitHub Container Registry tools (#4728)"}, {"oid": "2347926ddcb457265fe38c21a2e2e1e3fa39b116", "committedDate": "2022-02-18 09:33:31 -0500", "message": "Harvest checksums for public Amazon ECR tools (#4746)"}, {"oid": "3fd7aef7f6263c20719794253d5176c5a62f4fd1", "committedDate": "2022-03-16 10:23:52 -0400", "message": "Feature/java 17 finally (#4792)"}, {"oid": "cbbeda116e21d0aa1183dd09f025913bdae3706c", "committedDate": "2022-07-05 12:17:09 -0700", "message": "Remove unused constructors (SEAB-4055, PR #4952)"}, {"oid": "19e0ec8d8d1df41721d324259293d25d3af3631b", "committedDate": "2022-08-26 08:48:29 -0400", "message": "Fix multi-arch Quay images (#5093)"}, {"oid": "e96c79de0c7880fd1952495d7909285d94880b16", "committedDate": "2022-12-09 20:15:59 -0500", "message": "Add workflow language version for SourceFile and Version & implement it for WDL (#5266)"}, {"oid": "84c62e295859ccfe94749e8159b0d5b8874e260f", "committedDate": "2023-01-09 10:38:05 -0500", "message": "convert dockstore-common, webservice, most integration tests to junit 5 (#5297)"}, {"oid": "84785240d921cd7a237ba97cb0577d0a741bd672", "committedDate": "2023-01-19 13:07:09 -0800", "message": "Move language descriptor versions to different tables (#5315)"}, {"oid": "cf6321146c118c6e8c6895562b01024317fa0a52", "committedDate": "2023-03-08 10:18:30 -0500", "message": "Feature/triple 2 record (#5404)"}, {"oid": "b770ed53016a4c182633b4f016fcc3519c90d9f1", "committedDate": "2023-05-09 16:33:56 -0400", "message": "Set default descriptor type for tools (#5498)"}, {"oid": "70a3f74c2bc7b8b0081227c4f2e2c4ed9a66a004", "committedDate": "2023-05-12 15:26:14 -0400", "message": "Dropwizard update 4.0 (#5483)"}, {"oid": "891695aeaf8dd4f8f7c08ad0162ff9ce77607d36", "committedDate": "2023-05-24 11:18:44 -0400", "message": "Merge tag '1.14' into develop"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjAxODgwMA==", "url": "https://github.com/dockstore/dockstore/pull/3751#discussion_r476018800", "body": "You're not getting a quay token", "bodyText": "You're not getting a quay token", "bodyHTML": "<p dir=\"auto\">You're not getting a quay token</p>", "author": "coverbeck", "createdAt": "2020-08-25T00:57:56Z", "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/DockerRepoResource.java", "diffHunk": "@@ -596,9 +596,33 @@ public Tool registerManual(@ApiParam(hidden = true) @Parameter(hidden = true, na\n             tool.setGitUrl(convertHttpsToSsh(tool.getGitUrl()));\n         }\n \n+        // Can't set tool license information here, far too many tests register a tool without a GitHub token\n+        setToolLicenseInformation(user, tool);\n+\n         return toolDAO.findById(id);\n     }\n \n+    /**\n+     * Set the license information for a tool\n+     * @param user  The user the tool belongs to\n+     * @param tool  The tool to get license information for\n+     */\n+    private void setToolLicenseInformation(User user, Tool tool) {\n+        // Get user's quay and git tokens", "originalCommit": "8cc08a56b443db935259ee27c762929cedda56ed", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "11a1f103d815d6b994948daa9900b076bbc36dc6", "changed_code": [{"header": "diff --git a/dockstore-webservice/src/main/java/io/dockstore/webservice/resources/DockerRepoResource.java b/dockstore-webservice/src/main/java/io/dockstore/webservice/resources/DockerRepoResource.java\nindex 5872debdd..813920889 100644\n--- a/dockstore-webservice/src/main/java/io/dockstore/webservice/resources/DockerRepoResource.java\n+++ b/dockstore-webservice/src/main/java/io/dockstore/webservice/resources/DockerRepoResource.java\n", "chunk": "@@ -608,7 +608,7 @@ public class DockerRepoResource\n      * @param tool  The tool to get license information for\n      */\n     private void setToolLicenseInformation(User user, Tool tool) {\n-        // Get user's quay and git tokens\n+        // Get user's Git tokens\n         List<Token> tokens = tokenDAO.findByUserId(user.getId());\n         Token githubToken = Token.extractToken(tokens, TokenType.GITHUB_COM);\n         Token gitlabToken = Token.extractToken(tokens, TokenType.GITLAB_COM);\n", "next_change": null}]}, "revised_code_in_main": {"commit": "f34f61677ad6040179692e15e9db5527e5ee16f4", "changed_code": [{"header": "diff --git a/dockstore-webservice/src/main/java/io/dockstore/webservice/resources/DockerRepoResource.java b/dockstore-webservice/src/main/java/io/dockstore/webservice/resources/DockerRepoResource.java\nindex 5872debdd..813920889 100644\n--- a/dockstore-webservice/src/main/java/io/dockstore/webservice/resources/DockerRepoResource.java\n+++ b/dockstore-webservice/src/main/java/io/dockstore/webservice/resources/DockerRepoResource.java\n", "chunk": "@@ -608,7 +608,7 @@ public class DockerRepoResource\n      * @param tool  The tool to get license information for\n      */\n     private void setToolLicenseInformation(User user, Tool tool) {\n-        // Get user's quay and git tokens\n+        // Get user's Git tokens\n         List<Token> tokens = tokenDAO.findByUserId(user.getId());\n         Token githubToken = Token.extractToken(tokens, TokenType.GITHUB_COM);\n         Token gitlabToken = Token.extractToken(tokens, TokenType.GITLAB_COM);\n", "next_change": {"commit": "57dc7a9e0712d3d40c222c65f9f77154b74b0378", "changed_code": [{"header": "diff --git a/dockstore-webservice/src/main/java/io/dockstore/webservice/resources/DockerRepoResource.java b/dockstore-webservice/src/main/java/io/dockstore/webservice/resources/DockerRepoResource.java\nindex 813920889..1169026c1 100644\n--- a/dockstore-webservice/src/main/java/io/dockstore/webservice/resources/DockerRepoResource.java\n+++ b/dockstore-webservice/src/main/java/io/dockstore/webservice/resources/DockerRepoResource.java\n", "chunk": "@@ -596,33 +596,9 @@ public class DockerRepoResource\n             tool.setGitUrl(convertHttpsToSsh(tool.getGitUrl()));\n         }\n \n-        // Can't set tool license information here, far too many tests register a tool without a GitHub token\n-        setToolLicenseInformation(user, tool);\n-\n         return toolDAO.findById(id);\n     }\n \n-    /**\n-     * Set the license information for a tool\n-     * @param user  The user the tool belongs to\n-     * @param tool  The tool to get license information for\n-     */\n-    private void setToolLicenseInformation(User user, Tool tool) {\n-        // Get user's Git tokens\n-        List<Token> tokens = tokenDAO.findByUserId(user.getId());\n-        Token githubToken = Token.extractToken(tokens, TokenType.GITHUB_COM);\n-        Token gitlabToken = Token.extractToken(tokens, TokenType.GITLAB_COM);\n-        Token bitbucketToken = Token.extractToken(tokens, TokenType.BITBUCKET_ORG);\n-        final SourceCodeRepoInterface sourceCodeRepo = SourceCodeRepoFactory\n-                .createSourceCodeRepo(tool.getGitUrl(), bitbucketToken == null ? null : bitbucketToken.getContent(),\n-                        gitlabToken == null ? null : gitlabToken.getContent(), githubToken == null ? null : githubToken.getContent());\n-        if (sourceCodeRepo != null) {\n-            sourceCodeRepo.checkSourceCodeValidity();\n-            String gitRepositoryFromGitUrl = AbstractImageRegistry.getGitRepositoryFromGitUrl(tool.getGitUrl());\n-            sourceCodeRepo.setLicenseInformation(tool, gitRepositoryFromGitUrl);\n-        }\n-    }\n-\n     /**\n      * Look for the tags that a tool has using a user's own tokens\n      *\n", "next_change": {"commit": "308194e13a953e0877a12f86f8d0f6b0e4f61b4a", "changed_code": [{"header": "diff --git a/dockstore-webservice/src/main/java/io/dockstore/webservice/resources/DockerRepoResource.java b/dockstore-webservice/src/main/java/io/dockstore/webservice/resources/DockerRepoResource.java\nindex 1169026c1..e5c12027b 100644\n--- a/dockstore-webservice/src/main/java/io/dockstore/webservice/resources/DockerRepoResource.java\n+++ b/dockstore-webservice/src/main/java/io/dockstore/webservice/resources/DockerRepoResource.java\n", "chunk": "@@ -596,9 +599,33 @@ public class DockerRepoResource\n             tool.setGitUrl(convertHttpsToSsh(tool.getGitUrl()));\n         }\n \n+        // Can't set tool license information here, far too many tests register a tool without a GitHub token\n+        setToolLicenseInformation(user, tool);\n+\n         return toolDAO.findById(id);\n     }\n \n+    /**\n+     * Set the license information for a tool\n+     * @param user  The user the tool belongs to\n+     * @param tool  The tool to get license information for\n+     */\n+    private void setToolLicenseInformation(User user, Tool tool) {\n+        // Get user's Git tokens\n+        List<Token> tokens = tokenDAO.findByUserId(user.getId());\n+        Token githubToken = Token.extractToken(tokens, TokenType.GITHUB_COM);\n+        Token gitlabToken = Token.extractToken(tokens, TokenType.GITLAB_COM);\n+        Token bitbucketToken = Token.extractToken(tokens, TokenType.BITBUCKET_ORG);\n+        final SourceCodeRepoInterface sourceCodeRepo = SourceCodeRepoFactory\n+                .createSourceCodeRepo(tool.getGitUrl(), bitbucketToken == null ? null : bitbucketToken.getContent(),\n+                        gitlabToken == null ? null : gitlabToken.getContent(), githubToken == null ? null : githubToken.getContent());\n+        if (sourceCodeRepo != null) {\n+            sourceCodeRepo.checkSourceCodeValidity();\n+            String gitRepositoryFromGitUrl = AbstractImageRegistry.getGitRepositoryFromGitUrl(tool.getGitUrl());\n+            sourceCodeRepo.setLicenseInformation(tool, gitRepositoryFromGitUrl);\n+        }\n+    }\n+\n     /**\n      * Look for the tags that a tool has using a user's own tokens\n      *\n", "next_change": {"commit": "2bc18666e6e52b6c71d556b7a7e1b4a64a725a9d", "changed_code": [{"header": "diff --git a/dockstore-webservice/src/main/java/io/dockstore/webservice/resources/DockerRepoResource.java b/dockstore-webservice/src/main/java/io/dockstore/webservice/resources/DockerRepoResource.java\nindex e5c12027b..08c7600ad 100644\n--- a/dockstore-webservice/src/main/java/io/dockstore/webservice/resources/DockerRepoResource.java\n+++ b/dockstore-webservice/src/main/java/io/dockstore/webservice/resources/DockerRepoResource.java\n", "chunk": "@@ -595,37 +604,49 @@ public class DockerRepoResource\n         tool.getLabels().clear();\n         tool.getLabels().addAll(createdLabels);\n \n-        if (!isGit(tool.getGitUrl())) {\n-            tool.setGitUrl(convertHttpsToSsh(tool.getGitUrl()));\n-        }\n-\n         // Can't set tool license information here, far too many tests register a tool without a GitHub token\n         setToolLicenseInformation(user, tool);\n \n+        // Set the automatic topic\n+        new TopicHarvester(user, tokenDAO).harvestAndSetTopic(tool);\n+\n         return toolDAO.findById(id);\n     }\n \n     /**\n      * Set the license information for a tool\n-     * @param user  The user the tool belongs to\n-     * @param tool  The tool to get license information for\n+     *\n+     * @param user The user the tool belongs to\n+     * @param tool The tool to get license information for\n      */\n     private void setToolLicenseInformation(User user, Tool tool) {\n-        // Get user's Git tokens\n         List<Token> tokens = tokenDAO.findByUserId(user.getId());\n-        Token githubToken = Token.extractToken(tokens, TokenType.GITHUB_COM);\n-        Token gitlabToken = Token.extractToken(tokens, TokenType.GITLAB_COM);\n-        Token bitbucketToken = Token.extractToken(tokens, TokenType.BITBUCKET_ORG);\n-        final SourceCodeRepoInterface sourceCodeRepo = SourceCodeRepoFactory\n-                .createSourceCodeRepo(tool.getGitUrl(), bitbucketToken == null ? null : bitbucketToken.getContent(),\n-                        gitlabToken == null ? null : gitlabToken.getContent(), githubToken == null ? null : githubToken.getContent());\n+        final SourceCodeRepoInterface sourceCodeRepo = SourceCodeRepoFactory.createSourceCodeRepo(tool.getGitUrl(), tokens);\n+\n         if (sourceCodeRepo != null) {\n-            sourceCodeRepo.checkSourceCodeValidity();\n+            sourceCodeRepo.checkSourceControlTokenValidity();\n             String gitRepositoryFromGitUrl = AbstractImageRegistry.getGitRepositoryFromGitUrl(tool.getGitUrl());\n             sourceCodeRepo.setLicenseInformation(tool, gitRepositoryFromGitUrl);\n         }\n     }\n \n+    /**\n+     * Check whether a tool is pointing at a valid repo that the user has access to.\n+     * This is a bit silly because it looks like the methods in SourceCodeRepoInterface\n+     * mainly check whether the github token is valid, not whether the repo exists\n+     *\n+     * @param user The user the tool belongs to\n+     * @param tool The tool to get license information for\n+     */\n+    private void checkRepoValidity(User user, Tool tool) {\n+        List<Token> tokens = tokenDAO.findByUserId(user.getId());\n+        final SourceCodeRepoInterface sourceCodeRepo = SourceCodeRepoFactory.createSourceCodeRepo(tool.getGitUrl(), tokens);\n+        if (sourceCodeRepo == null || !sourceCodeRepo.checkSourceControlRepoValidity(tool)) {\n+            throw new CustomWebApplicationException(UNABLE_TO_VERIFY_THAT_YOUR_TOOL_POINTS_AT_A_VALID_SOURCE_CONTROL_REPO,\n+                HttpStatus.SC_BAD_REQUEST);\n+        }\n+    }\n+\n     /**\n      * Look for the tags that a tool has using a user's own tokens\n      *\n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "f34f61677ad6040179692e15e9db5527e5ee16f4", "message": "Merge commit", "committedDate": null}, {"oid": "57dc7a9e0712d3d40c222c65f9f77154b74b0378", "committedDate": "2020-08-10 15:22:20 -0400", "message": "3487/smart refresh (#3720)"}, {"oid": "308194e13a953e0877a12f86f8d0f6b0e4f61b4a", "committedDate": "2020-08-28 10:05:42 -0700", "message": "feature/3712/lazyLoadSourcefiles (#3740)"}, {"oid": "dccd5bc3b078a6b55059becf13aa510c8d103b9d", "committedDate": "2020-09-01 16:26:15 -0700", "message": "Feature/3090/version in zip filename (#3772)"}, {"oid": "f1c4ed996477f5dcff2f549bddb278936a798174", "committedDate": "2020-10-15 17:08:26 -0700", "message": "Merge tag '1.9.2' into develop"}, {"oid": "466db09e83fd866ad7e52b1348cf400bc1ccabd0", "committedDate": "2020-11-02 09:01:48 -0800", "message": "log all admin actions, remove some admin permissions, see what tests \u2026 (#3897)"}, {"oid": "d0b4958dda3f94b93a61b262db12bf7c9140d558", "committedDate": "2021-01-22 10:29:16 -0500", "message": "Feature/1624/add discussion link for tools (#3951)"}, {"oid": "1ebcdc6c75eb70a33b1c8c1414b639f2f1c167cc", "committedDate": "2021-03-09 10:30:33 -0500", "message": "The deprecated version was broken, always 500 (#4087)"}, {"oid": "df9b8ea3d3f3022f08da252d587518c909c3b73e", "committedDate": "2021-03-15 13:56:36 -0400", "message": "Okhttp update, working display of cache misses, small rate limit improvement (#4096)"}, {"oid": "8c55531bd0abb76e7a723d61249476a7a4b4d5c6", "committedDate": "2021-03-17 19:50:12 -0400", "message": "Feature/lower log level (#4088)"}, {"oid": "cbd424832c5e349efdf04d2f9ff3d99ef68245d3", "committedDate": "2021-03-19 14:34:06 -0400", "message": "namespace cache for testing on circle CI (#4120)"}, {"oid": "8eb270ac8831355322fe7cfec01884bae27cef9f", "committedDate": "2021-03-30 19:22:52 -0400", "message": "Feature/http client risky cleanup (#4124)"}, {"oid": "2a788344c4afbb7d50c07939a335e56c5d7a014e", "committedDate": "2021-06-02 10:01:28 -0400", "message": "Feature/checkstyle codestyle conflicts (#4261)"}, {"oid": "d34af609a98da26d6af2fdf57ae6f6d4362a96df", "committedDate": "2021-06-24 09:52:54 -0400", "message": "Feature/sort imports (#4326)"}, {"oid": "d37e3b1e658543e9934b3cd03e28348866530261", "committedDate": "2021-08-10 14:45:44 -0400", "message": "Feature/seab 3140/language plugins (#4387)"}, {"oid": "32c1cb2724284956c131f34ce03f13dfea04b7b1", "committedDate": "2021-08-12 11:24:02 -0400", "message": "Protecting logging from pattern breaking (#4399)"}, {"oid": "507b7436370a7c9664edaf2a1025ab3f21dcfdb6", "committedDate": "2021-08-26 08:49:24 -0400", "message": "Allow private and public Amazon ECR tools to be registered (#4420)"}, {"oid": "769b1bcaf9070831d9b97b03fcef2a6e846e0f0a", "committedDate": "2021-10-25 08:26:06 -0400", "message": "Validate entry name when creating manual tools/workflows and hosted tools (#4530)"}, {"oid": "c5e85f0a1463e80724ac27ed1ac21b39250086e8", "committedDate": "2021-11-03 15:48:59 -0400", "message": "Validate name in .dockstore.yml (#4545)"}, {"oid": "959f9bf2d780b6d0ef0bdc4396670823e59efd1d", "committedDate": "2021-11-05 09:04:52 -0700", "message": "deny requests of users with bad usernames (#4562)"}, {"oid": "3ec32ca9f14674d4911caf52ee222612d6f0df4d", "committedDate": "2021-11-30 14:13:14 -0500", "message": "Feature/seab 3656/topic sentence (#4593)"}, {"oid": "902126a7ae432db0b75381ca140ba537c44b7efc", "committedDate": "2021-12-09 13:17:47 -0800", "message": "Feature/regex backtrack fix (#4608)"}, {"oid": "8faaa71a59037bd7491be6ff72cb0bca8ac89298", "committedDate": "2022-01-14 14:03:27 -0500", "message": "Change to new topic db schema and make some adjustments"}, {"oid": "42555e5781452cd3ca262408f99862124f85a0de", "committedDate": "2022-01-14 14:03:27 -0500", "message": "Fix manual put"}, {"oid": "6799c4c92560169eef3b11f19993f1dfe8fa9adc", "committedDate": "2022-01-14 14:03:27 -0500", "message": "Add tool topic selection"}, {"oid": "61add711e172f17e1c24a711f041c7a5f15e4081", "committedDate": "2022-01-26 10:41:43 -0800", "message": "update topicAutomatic for workflows on refresh and tools on refresh and creation"}, {"oid": "13122927ce47b9ac11d1615295931dd75ab83715", "committedDate": "2022-02-04 09:25:56 -0800", "message": "Events for publishing and unpublishing (#4699)"}, {"oid": "5b03d70df1a88fc2b7cbba515942e7f246d4622f", "committedDate": "2022-03-22 16:56:00 -0400", "message": "Feature/checkstyle spotbugs update (#4807)"}, {"oid": "d37fe8c85f21e3844858179fac3e087b3fed00d7", "committedDate": "2022-04-13 09:58:48 -0700", "message": "used descriptor and new galaxy default desc name (#4825)"}, {"oid": "6a6929aea1e3bbdd37c710e36f6c34b38c767d94", "committedDate": "2022-05-11 20:03:06 -0700", "message": "Use integer offsets on /published endpoints (SEAB-3979, PR #4896)"}, {"oid": "6ddd672ad0681554d763eb8f967aaef5a1ec59ba", "committedDate": "2022-06-03 08:14:35 -0700", "message": "fix \"MessageBodyWriter not found\" exception in some generated openapi methods"}, {"oid": "1254d8abfd5ab9981da6ea02fd2a44ae640928b7", "committedDate": "2022-06-13 16:05:17 -0700", "message": "Standardize OpenAPI security field (#4671, PR #4944)"}, {"oid": "589d0fd84a87d8fe28723513383192079d0d015f", "committedDate": "2022-06-30 11:12:49 -0700", "message": "Use versionNameFilter for proprietary API (#4977)"}, {"oid": "ef58572bd00559f7552e5a19766954f802da00f7", "committedDate": "2022-07-05 09:55:11 -0700", "message": "Merge tag '1.12.1' into develop"}, {"oid": "0268774c94f40727a3b4badaeaf7c77c425478ce", "committedDate": "2022-07-29 13:41:29 -0700", "message": "refactor user-level permissions checks"}, {"oid": "672bf09125cd647e422c086010a029fdca485c9d", "committedDate": "2022-08-15 10:38:10 -0400", "message": "allow topic update on hosted (#5071)"}, {"oid": "ff101f7793036e41f0147e9c85772f1622fedded", "committedDate": "2022-08-19 10:00:19 -0700", "message": "tighten some authorization checks"}, {"oid": "2bc18666e6e52b6c71d556b7a7e1b4a64a725a9d", "committedDate": "2022-08-26 11:47:31 -0400", "message": "check whether a manual tool repo is valid (#5096)"}, {"oid": "e1de82dc32e6ce84a7d66ed924e4773e8c22eaf9", "committedDate": "2022-09-02 12:40:20 -0400", "message": "ensure token refresh before checking repo validity (#5114)"}, {"oid": "30c353347ee09b06e6aad9e594ba4a07e731675c", "committedDate": "2023-04-19 14:14:11 -0400", "message": "Add multiple authors to Entry and fix authors in search (#5461)"}, {"oid": "8e85fb7f080ce31837048bf34b82731d4a6363e3", "committedDate": "2023-04-26 17:13:48 -0400", "message": "Feature/dropwizard update (#5477)"}, {"oid": "b770ed53016a4c182633b4f016fcc3519c90d9f1", "committedDate": "2023-05-09 16:33:56 -0400", "message": "Set default descriptor type for tools (#5498)"}, {"oid": "70a3f74c2bc7b8b0081227c4f2e2c4ed9a66a004", "committedDate": "2023-05-12 15:26:14 -0400", "message": "Dropwizard update 4.0 (#5483)"}, {"oid": "891695aeaf8dd4f8f7c08ad0162ff9ce77607d36", "committedDate": "2023-05-24 11:18:44 -0400", "message": "Merge tag '1.14' into develop"}, {"oid": "ad4cee0293056201520f0905dd7bc1182b1e158c", "committedDate": "2023-06-02 09:14:38 -0700", "message": "Add getPublishedContainer to OpenAPI (#5539)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjAyMzM5Mw==", "url": "https://github.com/dockstore/dockstore/pull/3751#discussion_r476023393", "body": "Interesting, hadn't noticed/clicked until now that you're doing this for the entry, not the version. This means it's getting the license for the repo. Is it going off the default branch? Probably fine for now, but I wonder if we eventually need to track at the version level. It's rare that licenses change, although I've seen it, and I don't know if they're retroactive or not -- I guess it depends on how the license content.", "bodyText": "Interesting, hadn't noticed/clicked until now that you're doing this for the entry, not the version. This means it's getting the license for the repo. Is it going off the default branch? Probably fine for now, but I wonder if we eventually need to track at the version level. It's rare that licenses change, although I've seen it, and I don't know if they're retroactive or not -- I guess it depends on how the license content.", "bodyHTML": "<p dir=\"auto\">Interesting, hadn't noticed/clicked until now that you're doing this for the entry, not the version. This means it's getting the license for the repo. Is it going off the default branch? Probably fine for now, but I wonder if we eventually need to track at the version level. It's rare that licenses change, although I've seen it, and I don't know if they're retroactive or not -- I guess it depends on how the license content.</p>", "author": "coverbeck", "createdAt": "2020-08-25T01:04:56Z", "path": "dockstore-webservice/src/test/java/io/dockstore/webservice/helpers/GitHubHelperTest.java", "diffHunk": "@@ -0,0 +1,32 @@\n+package io.dockstore.webservice.helpers;\n+\n+import java.io.IOException;\n+\n+import io.dockstore.webservice.core.LicenseInformation;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.kohsuke.github.AbuseLimitHandler;\n+import org.kohsuke.github.GitHub;\n+import org.kohsuke.github.GitHubBuilder;\n+import org.kohsuke.github.RateLimitHandler;\n+\n+public class GitHubHelperTest {\n+\n+    // TODO: Replace repos with something less likely to change\n+    @Test\n+    public void testGitHubLicense() throws IOException {\n+        GitHub gitHub = new GitHubBuilder().withRateLimitHandler(RateLimitHandler.WAIT).withAbuseLimitHandler(\n+                AbuseLimitHandler.WAIT).build();\n+        LicenseInformation licenseInformation = GitHubHelper.getLicenseInformation(gitHub, \"dockstore-testing/md5sum-checker\");", "originalCommit": "8cc08a56b443db935259ee27c762929cedda56ed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjAzNzg1Mw==", "url": "https://github.com/dockstore/dockstore/pull/3751#discussion_r476037853", "bodyText": "GitHub doesn't track it at version level. There was quite a bit of discussion when this was a draft PR. Check out my PR message (before all the edits)", "author": "garyluu", "createdAt": "2020-08-25T01:26:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjAyMzM5Mw=="}], "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "f7a6642ffb21063271450b41e1fd426000f83aad", "changed_code": [{"header": "diff --git a/dockstore-webservice/src/test/java/io/dockstore/webservice/helpers/GitHubHelperTest.java b/dockstore-webservice/src/test/java/io/dockstore/webservice/helpers/GitHubHelperTest.java\nindex 813c28c9a..6f3776e89 100644\n--- a/dockstore-webservice/src/test/java/io/dockstore/webservice/helpers/GitHubHelperTest.java\n+++ b/dockstore-webservice/src/test/java/io/dockstore/webservice/helpers/GitHubHelperTest.java\n", "chunk": "@@ -12,6 +13,23 @@ import org.kohsuke.github.RateLimitHandler;\n \n public class GitHubHelperTest {\n \n+    private static final String CODE = \"abcdefghijklmnop\";\n+    private static final String GITHUB_CLIENT_ID = \"123456789abcd\";\n+    private static final String GITHUB_CLIENT_SECRET = \"98654321dcba\";\n+\n+    // Invalid GitHub authentication should return 400\n+    @Test\n+    public void testGetGitHubAccessToken() {\n+        try {\n+            GitHubHelper.getGitHubAccessToken(CODE, GITHUB_CLIENT_ID, GITHUB_CLIENT_SECRET);\n+            Assert.fail(\"No CustomWebApplicationException thrown\");\n+        } catch (CustomWebApplicationException e) {\n+            Assert.assertEquals(\"HTTP 400 Bad Request\", e.getMessage());\n+        }\n+\n+    }\n+\n+\n     // TODO: Replace repos with something less likely to change\n     @Test\n     public void testGitHubLicense() throws IOException {\n", "next_change": {"commit": "ec554a6edadfee5f4d28d4c4144ba9cca89d96bf", "changed_code": [{"header": "diff --git a/dockstore-webservice/src/test/java/io/dockstore/webservice/helpers/GitHubHelperTest.java b/dockstore-webservice/src/test/java/io/dockstore/webservice/helpers/GitHubHelperTest.java\nindex 6f3776e89..fafa5fdd7 100644\n--- a/dockstore-webservice/src/test/java/io/dockstore/webservice/helpers/GitHubHelperTest.java\n+++ b/dockstore-webservice/src/test/java/io/dockstore/webservice/helpers/GitHubHelperTest.java\n", "chunk": "@@ -28,23 +22,4 @@ public class GitHubHelperTest {\n         }\n \n     }\n-\n-\n-    // TODO: Replace repos with something less likely to change\n-    @Test\n-    public void testGitHubLicense() throws IOException {\n-        GitHub gitHub = new GitHubBuilder().withRateLimitHandler(RateLimitHandler.WAIT).withAbuseLimitHandler(\n-                AbuseLimitHandler.WAIT).build();\n-        LicenseInformation licenseInformation = GitHubHelper.getLicenseInformation(gitHub, \"dockstore-testing/md5sum-checker\");\n-        Assert.assertEquals(\"Apache License 2.0\", licenseInformation.getLicenseName());\n-\n-        licenseInformation = GitHubHelper.getLicenseInformation(gitHub, \"dockstore-testing/galaxy-workflows\");\n-        Assert.assertEquals(\"MIT License\", licenseInformation.getLicenseName());\n-\n-        licenseInformation = GitHubHelper.getLicenseInformation(gitHub, \"dockstoretestuser2/cwl-gene-prioritization\");\n-        Assert.assertEquals(\"Other\", licenseInformation.getLicenseName());\n-\n-        licenseInformation = GitHubHelper.getLicenseInformation(gitHub, \"dockstore-testing/silly-example\");\n-        Assert.assertNull(licenseInformation.getLicenseName());\n-    }\n }\n", "next_change": {"commit": "7bb9cf8a801e46baa735fd849b167077a0bd130e", "changed_code": [{"header": "diff --git a/dockstore-webservice/src/test/java/io/dockstore/webservice/helpers/GitHubHelperTest.java b/dockstore-webservice/src/test/java/io/dockstore/webservice/helpers/GitHubHelperTest.java\nindex fafa5fdd7..fe35dc674 100644\n--- a/dockstore-webservice/src/test/java/io/dockstore/webservice/helpers/GitHubHelperTest.java\n+++ b/dockstore-webservice/src/test/java/io/dockstore/webservice/helpers/GitHubHelperTest.java\n", "chunk": "@@ -13,12 +15,12 @@ public class GitHubHelperTest {\n \n     // Invalid GitHub authentication should return 400\n     @Test\n-    public void testGetGitHubAccessToken() {\n+    void testGetGitHubAccessToken() {\n         try {\n             GitHubHelper.getGitHubAccessToken(CODE, GITHUB_CLIENT_ID, GITHUB_CLIENT_SECRET);\n-            Assert.fail(\"No CustomWebApplicationException thrown\");\n+            fail(\"No CustomWebApplicationException thrown\");\n         } catch (CustomWebApplicationException e) {\n-            Assert.assertEquals(\"HTTP 400 Bad Request\", e.getMessage());\n+            assertEquals(\"HTTP 400 Bad Request\", e.getMessage());\n         }\n \n     }\n", "next_change": {"commit": "d37a5174db22a5e1ae8fb047451670d9d7508d3f", "changed_code": [{"header": "diff --git a/dockstore-webservice/src/test/java/io/dockstore/webservice/helpers/GitHubHelperTest.java b/dockstore-webservice/src/test/java/io/dockstore/webservice/helpers/GitHubHelperTest.java\nindex fe35dc674..fb77768c6 100644\n--- a/dockstore-webservice/src/test/java/io/dockstore/webservice/helpers/GitHubHelperTest.java\n+++ b/dockstore-webservice/src/test/java/io/dockstore/webservice/helpers/GitHubHelperTest.java\n", "chunk": "@@ -22,6 +24,59 @@ class GitHubHelperTest {\n         } catch (CustomWebApplicationException e) {\n             assertEquals(\"HTTP 400 Bad Request\", e.getMessage());\n         }\n+    }\n+\n+    @Test\n+    void testGitHubBranchTagPattern() {\n+        testReferenceString(\"refs/heads/feature/foobar\", \"heads/feature/foobar\");\n+        testReferenceString(\"refs/tags/1.0\", \"tags/1.0\");\n+        testReferenceString(\"refs/heads/main\", \"heads/main\");\n+        testReferenceString(\"refs/tags/v3.14.1\", \"tags/v3.14.1\");\n+        testReferenceString(\"refs/heads/feature/foo_bar\", \"heads/feature/foo_bar\");\n+        testReferenceString(\"refs/heads/feature/_leadingunderscore\", \"heads/feature/_leadingunderscore\");\n+        testReferenceString(\"refs/heads/foo_bar\", \"heads/foo_bar\");\n+        testReferenceString(\"refs/heads/_foo_bar\", \"heads/_foo_bar\");\n+        testReferenceString(\"refs/heads/foo-bar\", \"heads/foo-bar\");\n+        testReferenceString(\"refs/heads/-foo-bar\", \"heads/-foo-bar\");\n+        testReferenceString(\"refs/heads/foo.bar\", \"heads/foo.bar\");\n+        testReferenceString(\"refs/heads/.foo.bar\", \"heads/.foo.bar\");\n+        testReferenceString(\"refs/heads/_leadingunderscore\", \"heads/_leadingunderscore\");\n+        // unicode character classes\n+        testReferenceString(\"refs/heads/AshO'Farrell\", \"heads/AshO'Farrell\");\n+        testReferenceString(\"refs/heads/\u039d\u03ac\u03be\u03bf\u03c2\", \"heads/\u039d\u03ac\u03be\u03bf\u03c2\");\n+        testReferenceString(\"refs/heads/\u5b64\u72ec\u306e\u30b0\u30eb\u30e1\", \"heads/\u5b64\u72ec\u306e\u30b0\u30eb\u30e1\");\n+        // plain weird character classes\n+        testReferenceString(\"refs/heads/foo()bar\", \"heads/foo()bar\");\n+        testReferenceString(\"refs/heads/foo{}bar\", \"heads/foo{}bar\");\n+\n+\n+        // not sure if the following would make it into github in the first place, but wouldn't hurt to double-check to make sure they don't get into our DB\n+\n+        // disallow consecutive slashes in name https://docs.github.com/en/get-started/using-git/dealing-with-special-characters-in-branch-and-tag-names#about-branch-and-tag-names\n+        assertThrows(IllegalStateException.class, () -> testReferenceString(\"refs/heads/foo//bar\", \"heads/_foo_bar\"));\n+        // disallow consecutive dots in name https://git-scm.com/docs/git-check-ref-format\n+        assertThrows(IllegalStateException.class, () -> testReferenceString(\"refs/heads/foo..bar\", \"heads/_foo_bar\"));\n+        // disallow control characters https://git-scm.com/docs/git-check-ref-format\n+        assertThrows(IllegalStateException.class, () -> testReferenceString(\"refs/heads/foo~bar\", \"heads/_foo_bar\"));\n+        assertThrows(IllegalStateException.class, () -> testReferenceString(\"refs/heads/foo?bar\", \"heads/_foo_bar\"));\n+        assertThrows(IllegalStateException.class, () -> testReferenceString(\"refs/heads/foo[bar\", \"heads/_foo_bar\"));\n+        assertThrows(IllegalStateException.class, () -> testReferenceString(\"refs/heads/foo~bar\", \"heads/_foo_bar\"));\n+        assertThrows(IllegalStateException.class, () -> testReferenceString(\"refs/heads/foo\\\\bar\", \"heads/_foo_bar\"));\n+        assertThrows(IllegalStateException.class, () -> testReferenceString(\"refs/heads/@{.\", \"heads/_foo_bar\"));\n+        assertThrows(IllegalStateException.class, () -> testReferenceString(\"refs/heads/@\", \"heads/_foo_bar\"));\n+        assertThrows(IllegalStateException.class, () -> testReferenceString(\"refs/heads/foo:bar\", \"heads/_foo_bar\"));\n+        assertThrows(IllegalStateException.class, () -> testReferenceString(\"refs/heads/foo^bar\", \"heads/_foo_bar\"));\n+\n+        // ASCII control characters\n+        assertThrows(IllegalStateException.class, () -> testReferenceString(\"refs/heads/foo\\tbar\", \"heads/_foo_bar\"));\n+        assertThrows(IllegalStateException.class, () -> testReferenceString(\"refs/heads/foo\\nbar\", \"heads/_foo_bar\"));\n+    }\n \n+    private void testReferenceString(String gitReference, String expectedString) {\n+        Matcher matcher = GIT_BRANCH_TAG_PATTERN.matcher(gitReference);\n+        final boolean b = matcher.find();\n+        String gitBranchType = matcher.group(1);\n+        String gitBranchName = matcher.group(2);\n+        assertEquals(expectedString, (gitBranchType + \"/\" + gitBranchName));\n     }\n }\n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "f34f61677ad6040179692e15e9db5527e5ee16f4", "message": "Merge commit", "committedDate": null}, {"oid": "f7a6642ffb21063271450b41e1fd426000f83aad", "committedDate": "2020-09-21 09:47:58 -0400", "message": "3727/fix500 invalid GitHub auth (#3813)"}, {"oid": "c05258a5cd2244fe58da712df261b36b65e8a09e", "committedDate": "2020-10-15 09:57:14 -0700", "message": "Final piece of puzzle for Andy's work on #3721 (#3863)"}, {"oid": "ec554a6edadfee5f4d28d4c4144ba9cca89d96bf", "committedDate": "2020-11-03 09:54:15 -0500", "message": "Feature/seab 1855/GitHub helper test (#3901)"}, {"oid": "7bb9cf8a801e46baa735fd849b167077a0bd130e", "committedDate": "2023-01-04 13:31:58 -0500", "message": "junit 5 with compatibility (legacy) layer (#5292)"}, {"oid": "d37a5174db22a5e1ae8fb047451670d9d7508d3f", "committedDate": "2023-02-10 18:07:44 -0500", "message": "add test for regex for weird github references (#5354)"}]}, {"oid": "11a1f103d815d6b994948daa9900b076bbc36dc6", "url": "https://github.com/dockstore/dockstore/commit/11a1f103d815d6b994948daa9900b076bbc36dc6", "message": "PR changes", "committedDate": "2020-08-25T01:39:43Z", "type": "commit"}, {"oid": "3589763e88c79765703e698326d61618a1420d38", "url": "https://github.com/dockstore/dockstore/commit/3589763e88c79765703e698326d61618a1420d38", "message": "Merge branch 'develop' into feature/3675/storeLicenseInfo", "committedDate": "2020-08-25T01:40:20Z", "type": "commit"}, {"oid": "c2155a4c1c5141e44894156299f319dbfd81fd58", "url": "https://github.com/dockstore/dockstore/commit/c2155a4c1c5141e44894156299f319dbfd81fd58", "message": "Merge branch 'develop' into feature/3675/storeLicenseInfo", "committedDate": "2020-08-25T17:36:34Z", "type": "commit"}]}