{"pr_number": 10299, "pr_title": "Persistant Timers Demo Application", "pr_author": "KyleAure", "pr_createdAt": "2020-01-06T21:30:50Z", "pr_url": "https://github.com/OpenLiberty/open-liberty/pull/10299", "merge_commit": "0a628ef32ec35d40dc91e73872010f4ac95f46ce", "timeline": [{"oid": "853fea0cb6748d989cb49f84513c117d60e9f5e6", "url": "https://github.com/OpenLiberty/open-liberty/commit/853fea0cb6748d989cb49f84513c117d60e9f5e6", "message": "Timers demo app", "committedDate": "2020-01-06T21:32:54Z", "type": "commit"}, {"oid": "853fea0cb6748d989cb49f84513c117d60e9f5e6", "url": "https://github.com/OpenLiberty/open-liberty/commit/853fea0cb6748d989cb49f84513c117d60e9f5e6", "message": "Timers demo app", "committedDate": "2020-01-06T21:32:54Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzUwMDcxMg==", "url": "https://github.com/OpenLiberty/open-liberty/pull/10299#discussion_r363500712", "body": "minor: mix of tabs and spaces in this file and a few other files causes indentation to appear off", "bodyText": "minor: mix of tabs and spaces in this file and a few other files causes indentation to appear off", "bodyHTML": "<p dir=\"auto\">minor: mix of tabs and spaces in this file and a few other files causes indentation to appear off</p>", "author": "njr-11", "createdAt": "2020-01-06T21:52:26Z", "path": "dev/com.ibm.ws.concurrent.persistent_fat_demo_timers/fat/src/com/ibm/ws/concurrent/persistent/fat/demo/timers/DemoTimerTest.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*******************************************************************************\n+ * Copyright (c) 2019 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package com.ibm.ws.concurrent.persistent.fat.demo.timers;\n+\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.runner.RunWith;\n+import org.testcontainers.containers.JdbcDatabaseContainer;\n+\n+import com.ibm.websphere.simplicity.ShrinkHelper;\n+\n+import componenttest.annotation.Server;\n+import componenttest.annotation.TestServlet;\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.topology.database.container.DatabaseContainerFactory;\n+import componenttest.topology.database.container.DatabaseContainerType;\n+import componenttest.topology.database.container.DatabaseContainerUtil;\n+import componenttest.topology.impl.LibertyServer;\n+import componenttest.topology.utils.FATServletClient;\n+import ejb.timers.PersistentDemoTimersServlet;\n+\n+/**\n+ * This test suite start's an application that has automated timers, \n+ * and scheduled timers that will perform some sort of in memory data manipulation.\n+ * This is to simulate the situation where customers use timers to do something\n+ * like unit conversions, data processing, etc. \n+ * \n+ * These timers will run every half second.  That sort of frequency is the \n+ * maximum we would ever expect a customer to run a timer that is doing \n+ * in memory work.\n+ */\n+@RunWith(FATRunner.class)\n+public class DemoTimerTest extends FATServletClient {\n+\n+\tpublic static final String APP_NAME = \"demotimer\";", "originalCommit": "853fea0cb6748d989cb49f84513c117d60e9f5e6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9f13e9755d4736585cab62800099cffa97a7b0a2", "changed_code": [{"header": "diff --git a/dev/com.ibm.ws.concurrent.persistent_fat_demo_timers/fat/src/com/ibm/ws/concurrent/persistent/fat/demo/timers/DemoTimerTest.java b/dev/com.ibm.ws.concurrent.persistent_fat_demo_timers/fat/src/com/ibm/ws/concurrent/persistent/fat/demo/timers/DemoTimerTest.java\nindex f74a7e0397..117cfe3fcf 100644\n--- a/dev/com.ibm.ws.concurrent.persistent_fat_demo_timers/fat/src/com/ibm/ws/concurrent/persistent/fat/demo/timers/DemoTimerTest.java\n+++ b/dev/com.ibm.ws.concurrent.persistent_fat_demo_timers/fat/src/com/ibm/ws/concurrent/persistent/fat/demo/timers/DemoTimerTest.java\n", "chunk": "@@ -30,38 +30,38 @@ import componenttest.topology.utils.FATServletClient;\n import ejb.timers.PersistentDemoTimersServlet;\n \n /**\n- * This test suite start's an application that has automated timers, \n+ * This test suite start's an application that has automated timers,\n  * and scheduled timers that will perform some sort of in memory data manipulation.\n  * This is to simulate the situation where customers use timers to do something\n- * like unit conversions, data processing, etc. \n- * \n- * These timers will run every half second.  That sort of frequency is the \n- * maximum we would ever expect a customer to run a timer that is doing \n+ * like unit conversions, data processing, etc.\n+ *\n+ * These timers will run every half second. That sort of frequency is the\n+ * maximum we would ever expect a customer to run a timer that is doing\n  * in memory work.\n  */\n @RunWith(FATRunner.class)\n public class DemoTimerTest extends FATServletClient {\n \n-\tpublic static final String APP_NAME = \"demotimer\";\n-\t\n+    public static final String APP_NAME = \"demotimer\";\n+\n     @Server(\"com.ibm.ws.concurrent.persistent.fat.demo.timers\")\n     @TestServlet(servlet = PersistentDemoTimersServlet.class, path = APP_NAME)\n-\tpublic static LibertyServer server;\n-\t\n+    public static LibertyServer server;\n+\n     @ClassRule\n     public static final JdbcDatabaseContainer<?> testContainer = DatabaseContainerFactory.create();\n \n     @BeforeClass\n     public static void setUp() throws Exception {\n-    \t//Get driver name\n-    \tserver.addEnvVar(\"DB_DRIVER\", DatabaseContainerType.valueOf(testContainer).getDriverName());\n+        //Get driver name\n+        server.addEnvVar(\"DB_DRIVER\", DatabaseContainerType.valueOf(testContainer).getDriverName());\n \n-    \t//Setup server DataSource properties\n-    \tDatabaseContainerUtil.setupDataSourceProperties(server, testContainer);\n-\t\t\n-    \t//Install App\n+        //Setup server DataSource properties\n+        DatabaseContainerUtil.setupDataSourceProperties(server, testContainer);\n+\n+        //Install App\n         ShrinkHelper.defaultDropinApp(server, APP_NAME, \"ejb.timers\");\n-        \n+\n         server.startServer();\n     }\n \n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzUwMjg3Mw==", "url": "https://github.com/OpenLiberty/open-liberty/pull/10299#discussion_r363502873", "body": "I think this comment is wrong.  The code later in this class is for every 30 seconds, not 2.", "bodyText": "I think this comment is wrong.  The code later in this class is for every 30 seconds, not 2.", "bodyHTML": "<p dir=\"auto\">I think this comment is wrong.  The code later in this class is for every 30 seconds, not 2.</p>", "author": "njr-11", "createdAt": "2020-01-06T21:58:08Z", "path": "dev/com.ibm.ws.concurrent.persistent_fat_demo_timers/test-application/demotimers/src/ejb/timers/AutomaticDatabase.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*******************************************************************************\n+ * Copyright (c) 2019 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package ejb.timers;\n+\n+import java.sql.Connection;\n+import java.sql.DatabaseMetaData;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+\n+import javax.annotation.Resource;\n+import javax.ejb.Schedule;\n+import javax.ejb.SessionContext;\n+import javax.ejb.Singleton;\n+import javax.ejb.Timer;\n+import javax.sql.DataSource;\n+\n+/**\n+ * This class uses the @Schedule annotation.\n+ * Using this annotation will start the timer immediately on start and will run every 2 seconds. ", "originalCommit": "853fea0cb6748d989cb49f84513c117d60e9f5e6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9f13e9755d4736585cab62800099cffa97a7b0a2", "changed_code": [{"header": "diff --git a/dev/com.ibm.ws.concurrent.persistent_fat_demo_timers/test-application/demotimers/src/ejb/timers/AutomaticDatabase.java b/dev/com.ibm.ws.concurrent.persistent_fat_demo_timers/test-application/demotimers/src/ejb/timers/AutomaticDatabase.java\nindex 0fa8c54281..6f4bdda229 100755\n--- a/dev/com.ibm.ws.concurrent.persistent_fat_demo_timers/test-application/demotimers/src/ejb/timers/AutomaticDatabase.java\n+++ b/dev/com.ibm.ws.concurrent.persistent_fat_demo_timers/test-application/demotimers/src/ejb/timers/AutomaticDatabase.java\n", "chunk": "@@ -25,20 +27,22 @@ import javax.sql.DataSource;\n \n /**\n  * This class uses the @Schedule annotation.\n- * Using this annotation will start the timer immediately on start and will run every 2 seconds. \n+ * Using this annotation will start the timer immediately on start and will run every 30 seconds.\n  */\n @Singleton\n public class AutomaticDatabase {\n-\t@Resource\n+    private static final Class<AutomaticDatabase> c = AutomaticDatabase.class;\n+\n+    @Resource\n     private SessionContext sessionContext; //Used to get information about timer\n-    \n+\n     @Resource(name = \"DefaultDatasource\") //Datasource used to create a new table\n     private DataSource ds;\n-    \n+\n     private int count = -1; //Incremented with each execution of timer\n-    \n+\n     private boolean isTableCreated = false;\n-    \n+\n     /**\n      * Cancels timer execution\n      */\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzUwMzYwNA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/10299#discussion_r363503604", "body": "An error here ought to fail the test", "bodyText": "An error here ought to fail the test", "bodyHTML": "<p dir=\"auto\">An error here ought to fail the test</p>", "author": "njr-11", "createdAt": "2020-01-06T22:00:03Z", "path": "dev/com.ibm.ws.concurrent.persistent_fat_demo_timers/test-application/demotimers/src/ejb/timers/AutomaticDatabase.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*******************************************************************************\n+ * Copyright (c) 2019 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package ejb.timers;\n+\n+import java.sql.Connection;\n+import java.sql.DatabaseMetaData;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+\n+import javax.annotation.Resource;\n+import javax.ejb.Schedule;\n+import javax.ejb.SessionContext;\n+import javax.ejb.Singleton;\n+import javax.ejb.Timer;\n+import javax.sql.DataSource;\n+\n+/**\n+ * This class uses the @Schedule annotation.\n+ * Using this annotation will start the timer immediately on start and will run every 2 seconds. \n+ */\n+@Singleton\n+public class AutomaticDatabase {\n+\t@Resource\n+    private SessionContext sessionContext; //Used to get information about timer\n+    \n+    @Resource(name = \"DefaultDatasource\") //Datasource used to create a new table\n+    private DataSource ds;\n+    \n+    private int count = -1; //Incremented with each execution of timer\n+    \n+    private boolean isTableCreated = false;\n+    \n+    /**\n+     * Cancels timer execution\n+     */\n+    public void cancel() {\n+        for (Timer timer : sessionContext.getTimerService().getTimers())\n+            timer.cancel();\n+    }\n+\n+    /**\n+     * Get the value of count.\n+     */\n+    public int getRunCount() {\n+        return count;\n+    }\n+    \n+    /**\n+     * Runs ever 30 seconds.  Automatically starts when application starts. \n+     */\n+    @Schedule(info = \"Performing Database Operations\", hour = \"*\", minute = \"*\", second = \"*/30\")\n+    public void run(Timer timer) {\n+    \tif(!isTableCreated)\n+    \t\tinitTable();\n+    \t\n+        System.out.println(\"Running execution \" + incrementCount(timer) + \" of timer \" + timer.getInfo());\n+    }\n+    \n+    private void initTable() {\n+    \tfinal String createTable = \"CREATE TABLE AutomaticDatabase (name VARCHAR(64) NOT NULL PRIMARY KEY, count INT)\";\n+    \t\n+    \ttry (Connection conn = ds.getConnection()) {\n+    \t\t//See if table was created by another server\n+        \tDatabaseMetaData md = conn.getMetaData();\n+        \tResultSet rs = md.getTables(null, null, \"AutomaticDatabase\", null);\n+        \twhile(rs.next()) {\n+        \t\tisTableCreated = true;\n+        \t\treturn;\n+        \t}\n+    \t\t\n+    \t\t//If not, create it.    \t\t\n+    \t\ttry (PreparedStatement pstmt= conn.prepareStatement(createTable)) {\n+    \t\t\tpstmt.executeUpdate();\n+    \t\t}\n+    \t\tisTableCreated = true;\n+    \t} catch (SQLException e) {\n+\t\t\te.printStackTrace();", "originalCommit": "853fea0cb6748d989cb49f84513c117d60e9f5e6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9f13e9755d4736585cab62800099cffa97a7b0a2", "changed_code": [{"header": "diff --git a/dev/com.ibm.ws.concurrent.persistent_fat_demo_timers/test-application/demotimers/src/ejb/timers/AutomaticDatabase.java b/dev/com.ibm.ws.concurrent.persistent_fat_demo_timers/test-application/demotimers/src/ejb/timers/AutomaticDatabase.java\nindex 0fa8c54281..6f4bdda229 100755\n--- a/dev/com.ibm.ws.concurrent.persistent_fat_demo_timers/test-application/demotimers/src/ejb/timers/AutomaticDatabase.java\n+++ b/dev/com.ibm.ws.concurrent.persistent_fat_demo_timers/test-application/demotimers/src/ejb/timers/AutomaticDatabase.java\n", "chunk": "@@ -53,80 +57,83 @@ public class AutomaticDatabase {\n     public int getRunCount() {\n         return count;\n     }\n-    \n+\n     /**\n-     * Runs ever 30 seconds.  Automatically starts when application starts. \n+     * Runs ever 30 seconds. Automatically starts when application starts.\n      */\n-    @Schedule(info = \"Performing Database Operations\", hour = \"*\", minute = \"*\", second = \"*/30\")\n+    @Schedule(info = \"Performing Database Operations\", hour = \"*\", minute = \"*\", second = \"*/30\", persistent = true)\n     public void run(Timer timer) {\n-    \tif(!isTableCreated)\n-    \t\tinitTable();\n-    \t\n+        if (!isTableCreated)\n+            initTable();\n+\n         System.out.println(\"Running execution \" + incrementCount(timer) + \" of timer \" + timer.getInfo());\n     }\n-    \n+\n     private void initTable() {\n-    \tfinal String createTable = \"CREATE TABLE AutomaticDatabase (name VARCHAR(64) NOT NULL PRIMARY KEY, count INT)\";\n-    \t\n-    \ttry (Connection conn = ds.getConnection()) {\n-    \t\t//See if table was created by another server\n-        \tDatabaseMetaData md = conn.getMetaData();\n-        \tResultSet rs = md.getTables(null, null, \"AutomaticDatabase\", null);\n-        \twhile(rs.next()) {\n-        \t\tisTableCreated = true;\n-        \t\treturn;\n-        \t}\n-    \t\t\n-    \t\t//If not, create it.    \t\t\n-    \t\ttry (PreparedStatement pstmt= conn.prepareStatement(createTable)) {\n-    \t\t\tpstmt.executeUpdate();\n-    \t\t}\n-    \t\tisTableCreated = true;\n-    \t} catch (SQLException e) {\n-\t\t\te.printStackTrace();\n-\t\t}\n+        final String createTable = \"CREATE TABLE AutomaticDatabase (name VARCHAR(64) NOT NULL PRIMARY KEY, count INT)\";\n+\n+        try (Connection conn = ds.getConnection()) {\n+            //See if table was created by another server\n+            DatabaseMetaData md = conn.getMetaData();\n+            ResultSet rs = md.getTables(null, null, \"AutomaticDatabase\", null);\n+            while (rs.next()) {\n+                isTableCreated = true;\n+                return;\n+            }\n+\n+            //If not, create it.\n+            try (PreparedStatement pstmt = conn.prepareStatement(createTable)) {\n+                pstmt.executeUpdate();\n+            }\n+            isTableCreated = true;\n+        } catch (SQLException e) {\n+            e.printStackTrace();\n+            fail(c.getName() + \" caught exception when initializing table: \" + e.getMessage());\n+        }\n     }\n-    \n+\n     private void initCounter(Timer timer) {\n-    \tfinal String createRow = \"INSERT INTO AutomaticDatabase VALUES(?,?)\";\n-    \t\n-    \t//create count\n-    \tcount = 1;\n-    \t\n-    \ttry (Connection conn = ds.getConnection()) {\n-    \t\ttry (PreparedStatement pstmt = conn.prepareStatement(createRow)) {\n-    \t\t\tpstmt.setString(1, timer.getInfo().toString());\n-    \t\t\tpstmt.setInt(2, count);\n-    \t\t\tpstmt.execute();\n-    \t\t}\n-    \t} catch (SQLException e) {\n-    \t\tcount = -1;\n-\t\t\te.printStackTrace();\n-\t\t}\n+        final String createRow = \"INSERT INTO AutomaticDatabase VALUES(?,?)\";\n+\n+        //create count\n+        count = 1;\n+\n+        try (Connection conn = ds.getConnection()) {\n+            try (PreparedStatement pstmt = conn.prepareStatement(createRow)) {\n+                pstmt.setString(1, timer.getInfo().toString());\n+                pstmt.setInt(2, count);\n+                pstmt.execute();\n+            }\n+        } catch (SQLException e) {\n+            count = -1;\n+            e.printStackTrace();\n+            fail(c.getName() + \" caught exception when creating table row: \" + e.getMessage());\n+        }\n     }\n-    \n+\n     /**\n      * Increment count.\n      */\n     private int incrementCount(Timer timer) {\n-    \tif (count == -1) {\n-    \t\tthis.initCounter(timer);\n-    \t\treturn count;\n-    \t}\n-    \t\n-    \tfinal String modifyRow = \"UPDATE AutomaticDatabase SET count = ? WHERE name = ?\";\n-    \t\n-    \ttry (Connection conn = ds.getConnection()) {\n-    \t\ttry (PreparedStatement pstmt = conn.prepareStatement(modifyRow)) {\n-    \t\t\tpstmt.setInt(1, ++count);\n-    \t\t\tpstmt.setString(2, timer.getInfo().toString());\n-    \t\t\tpstmt.execute();\n-    \t\t}\n-    \t} catch (SQLException e) {\n-    \t\tcount--;\n-\t\t\te.printStackTrace();\n-\t\t}\n-    \t\n-    \treturn count;\n+        if (count == -1) {\n+            this.initCounter(timer);\n+            return count;\n+        }\n+\n+        final String modifyRow = \"UPDATE AutomaticDatabase SET count = ? WHERE name = ?\";\n+\n+        try (Connection conn = ds.getConnection()) {\n+            try (PreparedStatement pstmt = conn.prepareStatement(modifyRow)) {\n+                pstmt.setInt(1, ++count);\n+                pstmt.setString(2, timer.getInfo().toString());\n+                pstmt.execute();\n+            }\n+        } catch (SQLException e) {\n+            count--;\n+            e.printStackTrace();\n+            fail(c.getName() + \" caught exception when incrementing count: \" + e.getMessage());\n+        }\n+\n+        return count;\n     }\n }\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzUwNDY0OA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/10299#discussion_r363504648", "body": "Should fail the test instead of suppressing the error, unless there is any reason why init logic is expected to fail and need a retry.", "bodyText": "Should fail the test instead of suppressing the error, unless there is any reason why init logic is expected to fail and need a retry.", "bodyHTML": "<p dir=\"auto\">Should fail the test instead of suppressing the error, unless there is any reason why init logic is expected to fail and need a retry.</p>", "author": "njr-11", "createdAt": "2020-01-06T22:02:56Z", "path": "dev/com.ibm.ws.concurrent.persistent_fat_demo_timers/test-application/demotimers/src/ejb/timers/AutomaticDatabase.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*******************************************************************************\n+ * Copyright (c) 2019 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package ejb.timers;\n+\n+import java.sql.Connection;\n+import java.sql.DatabaseMetaData;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+\n+import javax.annotation.Resource;\n+import javax.ejb.Schedule;\n+import javax.ejb.SessionContext;\n+import javax.ejb.Singleton;\n+import javax.ejb.Timer;\n+import javax.sql.DataSource;\n+\n+/**\n+ * This class uses the @Schedule annotation.\n+ * Using this annotation will start the timer immediately on start and will run every 2 seconds. \n+ */\n+@Singleton\n+public class AutomaticDatabase {\n+\t@Resource\n+    private SessionContext sessionContext; //Used to get information about timer\n+    \n+    @Resource(name = \"DefaultDatasource\") //Datasource used to create a new table\n+    private DataSource ds;\n+    \n+    private int count = -1; //Incremented with each execution of timer\n+    \n+    private boolean isTableCreated = false;\n+    \n+    /**\n+     * Cancels timer execution\n+     */\n+    public void cancel() {\n+        for (Timer timer : sessionContext.getTimerService().getTimers())\n+            timer.cancel();\n+    }\n+\n+    /**\n+     * Get the value of count.\n+     */\n+    public int getRunCount() {\n+        return count;\n+    }\n+    \n+    /**\n+     * Runs ever 30 seconds.  Automatically starts when application starts. \n+     */\n+    @Schedule(info = \"Performing Database Operations\", hour = \"*\", minute = \"*\", second = \"*/30\")\n+    public void run(Timer timer) {\n+    \tif(!isTableCreated)\n+    \t\tinitTable();\n+    \t\n+        System.out.println(\"Running execution \" + incrementCount(timer) + \" of timer \" + timer.getInfo());\n+    }\n+    \n+    private void initTable() {\n+    \tfinal String createTable = \"CREATE TABLE AutomaticDatabase (name VARCHAR(64) NOT NULL PRIMARY KEY, count INT)\";\n+    \t\n+    \ttry (Connection conn = ds.getConnection()) {\n+    \t\t//See if table was created by another server\n+        \tDatabaseMetaData md = conn.getMetaData();\n+        \tResultSet rs = md.getTables(null, null, \"AutomaticDatabase\", null);\n+        \twhile(rs.next()) {\n+        \t\tisTableCreated = true;\n+        \t\treturn;\n+        \t}\n+    \t\t\n+    \t\t//If not, create it.    \t\t\n+    \t\ttry (PreparedStatement pstmt= conn.prepareStatement(createTable)) {\n+    \t\t\tpstmt.executeUpdate();\n+    \t\t}\n+    \t\tisTableCreated = true;\n+    \t} catch (SQLException e) {\n+\t\t\te.printStackTrace();\n+\t\t}\n+    }\n+    \n+    private void initCounter(Timer timer) {\n+    \tfinal String createRow = \"INSERT INTO AutomaticDatabase VALUES(?,?)\";\n+    \t\n+    \t//create count\n+    \tcount = 1;\n+    \t\n+    \ttry (Connection conn = ds.getConnection()) {\n+    \t\ttry (PreparedStatement pstmt = conn.prepareStatement(createRow)) {\n+    \t\t\tpstmt.setString(1, timer.getInfo().toString());\n+    \t\t\tpstmt.setInt(2, count);\n+    \t\t\tpstmt.execute();\n+    \t\t}\n+    \t} catch (SQLException e) {\n+    \t\tcount = -1;\n+\t\t\te.printStackTrace();", "originalCommit": "853fea0cb6748d989cb49f84513c117d60e9f5e6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9f13e9755d4736585cab62800099cffa97a7b0a2", "changed_code": [{"header": "diff --git a/dev/com.ibm.ws.concurrent.persistent_fat_demo_timers/test-application/demotimers/src/ejb/timers/AutomaticDatabase.java b/dev/com.ibm.ws.concurrent.persistent_fat_demo_timers/test-application/demotimers/src/ejb/timers/AutomaticDatabase.java\nindex 0fa8c54281..6f4bdda229 100755\n--- a/dev/com.ibm.ws.concurrent.persistent_fat_demo_timers/test-application/demotimers/src/ejb/timers/AutomaticDatabase.java\n+++ b/dev/com.ibm.ws.concurrent.persistent_fat_demo_timers/test-application/demotimers/src/ejb/timers/AutomaticDatabase.java\n", "chunk": "@@ -53,80 +57,83 @@ public class AutomaticDatabase {\n     public int getRunCount() {\n         return count;\n     }\n-    \n+\n     /**\n-     * Runs ever 30 seconds.  Automatically starts when application starts. \n+     * Runs ever 30 seconds. Automatically starts when application starts.\n      */\n-    @Schedule(info = \"Performing Database Operations\", hour = \"*\", minute = \"*\", second = \"*/30\")\n+    @Schedule(info = \"Performing Database Operations\", hour = \"*\", minute = \"*\", second = \"*/30\", persistent = true)\n     public void run(Timer timer) {\n-    \tif(!isTableCreated)\n-    \t\tinitTable();\n-    \t\n+        if (!isTableCreated)\n+            initTable();\n+\n         System.out.println(\"Running execution \" + incrementCount(timer) + \" of timer \" + timer.getInfo());\n     }\n-    \n+\n     private void initTable() {\n-    \tfinal String createTable = \"CREATE TABLE AutomaticDatabase (name VARCHAR(64) NOT NULL PRIMARY KEY, count INT)\";\n-    \t\n-    \ttry (Connection conn = ds.getConnection()) {\n-    \t\t//See if table was created by another server\n-        \tDatabaseMetaData md = conn.getMetaData();\n-        \tResultSet rs = md.getTables(null, null, \"AutomaticDatabase\", null);\n-        \twhile(rs.next()) {\n-        \t\tisTableCreated = true;\n-        \t\treturn;\n-        \t}\n-    \t\t\n-    \t\t//If not, create it.    \t\t\n-    \t\ttry (PreparedStatement pstmt= conn.prepareStatement(createTable)) {\n-    \t\t\tpstmt.executeUpdate();\n-    \t\t}\n-    \t\tisTableCreated = true;\n-    \t} catch (SQLException e) {\n-\t\t\te.printStackTrace();\n-\t\t}\n+        final String createTable = \"CREATE TABLE AutomaticDatabase (name VARCHAR(64) NOT NULL PRIMARY KEY, count INT)\";\n+\n+        try (Connection conn = ds.getConnection()) {\n+            //See if table was created by another server\n+            DatabaseMetaData md = conn.getMetaData();\n+            ResultSet rs = md.getTables(null, null, \"AutomaticDatabase\", null);\n+            while (rs.next()) {\n+                isTableCreated = true;\n+                return;\n+            }\n+\n+            //If not, create it.\n+            try (PreparedStatement pstmt = conn.prepareStatement(createTable)) {\n+                pstmt.executeUpdate();\n+            }\n+            isTableCreated = true;\n+        } catch (SQLException e) {\n+            e.printStackTrace();\n+            fail(c.getName() + \" caught exception when initializing table: \" + e.getMessage());\n+        }\n     }\n-    \n+\n     private void initCounter(Timer timer) {\n-    \tfinal String createRow = \"INSERT INTO AutomaticDatabase VALUES(?,?)\";\n-    \t\n-    \t//create count\n-    \tcount = 1;\n-    \t\n-    \ttry (Connection conn = ds.getConnection()) {\n-    \t\ttry (PreparedStatement pstmt = conn.prepareStatement(createRow)) {\n-    \t\t\tpstmt.setString(1, timer.getInfo().toString());\n-    \t\t\tpstmt.setInt(2, count);\n-    \t\t\tpstmt.execute();\n-    \t\t}\n-    \t} catch (SQLException e) {\n-    \t\tcount = -1;\n-\t\t\te.printStackTrace();\n-\t\t}\n+        final String createRow = \"INSERT INTO AutomaticDatabase VALUES(?,?)\";\n+\n+        //create count\n+        count = 1;\n+\n+        try (Connection conn = ds.getConnection()) {\n+            try (PreparedStatement pstmt = conn.prepareStatement(createRow)) {\n+                pstmt.setString(1, timer.getInfo().toString());\n+                pstmt.setInt(2, count);\n+                pstmt.execute();\n+            }\n+        } catch (SQLException e) {\n+            count = -1;\n+            e.printStackTrace();\n+            fail(c.getName() + \" caught exception when creating table row: \" + e.getMessage());\n+        }\n     }\n-    \n+\n     /**\n      * Increment count.\n      */\n     private int incrementCount(Timer timer) {\n-    \tif (count == -1) {\n-    \t\tthis.initCounter(timer);\n-    \t\treturn count;\n-    \t}\n-    \t\n-    \tfinal String modifyRow = \"UPDATE AutomaticDatabase SET count = ? WHERE name = ?\";\n-    \t\n-    \ttry (Connection conn = ds.getConnection()) {\n-    \t\ttry (PreparedStatement pstmt = conn.prepareStatement(modifyRow)) {\n-    \t\t\tpstmt.setInt(1, ++count);\n-    \t\t\tpstmt.setString(2, timer.getInfo().toString());\n-    \t\t\tpstmt.execute();\n-    \t\t}\n-    \t} catch (SQLException e) {\n-    \t\tcount--;\n-\t\t\te.printStackTrace();\n-\t\t}\n-    \t\n-    \treturn count;\n+        if (count == -1) {\n+            this.initCounter(timer);\n+            return count;\n+        }\n+\n+        final String modifyRow = \"UPDATE AutomaticDatabase SET count = ? WHERE name = ?\";\n+\n+        try (Connection conn = ds.getConnection()) {\n+            try (PreparedStatement pstmt = conn.prepareStatement(modifyRow)) {\n+                pstmt.setInt(1, ++count);\n+                pstmt.setString(2, timer.getInfo().toString());\n+                pstmt.execute();\n+            }\n+        } catch (SQLException e) {\n+            count--;\n+            e.printStackTrace();\n+            fail(c.getName() + \" caught exception when incrementing count: \" + e.getMessage());\n+        }\n+\n+        return count;\n     }\n }\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzUwNTY2MA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/10299#discussion_r363505660", "body": "Should pre-populating the row just be part of initTable?", "bodyText": "Should pre-populating the row just be part of initTable?", "bodyHTML": "<p dir=\"auto\">Should pre-populating the row just be part of initTable?</p>", "author": "njr-11", "createdAt": "2020-01-06T22:05:52Z", "path": "dev/com.ibm.ws.concurrent.persistent_fat_demo_timers/test-application/demotimers/src/ejb/timers/AutomaticDatabase.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*******************************************************************************\n+ * Copyright (c) 2019 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package ejb.timers;\n+\n+import java.sql.Connection;\n+import java.sql.DatabaseMetaData;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+\n+import javax.annotation.Resource;\n+import javax.ejb.Schedule;\n+import javax.ejb.SessionContext;\n+import javax.ejb.Singleton;\n+import javax.ejb.Timer;\n+import javax.sql.DataSource;\n+\n+/**\n+ * This class uses the @Schedule annotation.\n+ * Using this annotation will start the timer immediately on start and will run every 2 seconds. \n+ */\n+@Singleton\n+public class AutomaticDatabase {\n+\t@Resource\n+    private SessionContext sessionContext; //Used to get information about timer\n+    \n+    @Resource(name = \"DefaultDatasource\") //Datasource used to create a new table\n+    private DataSource ds;\n+    \n+    private int count = -1; //Incremented with each execution of timer\n+    \n+    private boolean isTableCreated = false;\n+    \n+    /**\n+     * Cancels timer execution\n+     */\n+    public void cancel() {\n+        for (Timer timer : sessionContext.getTimerService().getTimers())\n+            timer.cancel();\n+    }\n+\n+    /**\n+     * Get the value of count.\n+     */\n+    public int getRunCount() {\n+        return count;\n+    }\n+    \n+    /**\n+     * Runs ever 30 seconds.  Automatically starts when application starts. \n+     */\n+    @Schedule(info = \"Performing Database Operations\", hour = \"*\", minute = \"*\", second = \"*/30\")\n+    public void run(Timer timer) {\n+    \tif(!isTableCreated)\n+    \t\tinitTable();\n+    \t\n+        System.out.println(\"Running execution \" + incrementCount(timer) + \" of timer \" + timer.getInfo());\n+    }\n+    \n+    private void initTable() {\n+    \tfinal String createTable = \"CREATE TABLE AutomaticDatabase (name VARCHAR(64) NOT NULL PRIMARY KEY, count INT)\";\n+    \t\n+    \ttry (Connection conn = ds.getConnection()) {\n+    \t\t//See if table was created by another server\n+        \tDatabaseMetaData md = conn.getMetaData();\n+        \tResultSet rs = md.getTables(null, null, \"AutomaticDatabase\", null);\n+        \twhile(rs.next()) {\n+        \t\tisTableCreated = true;\n+        \t\treturn;\n+        \t}\n+    \t\t\n+    \t\t//If not, create it.    \t\t\n+    \t\ttry (PreparedStatement pstmt= conn.prepareStatement(createTable)) {\n+    \t\t\tpstmt.executeUpdate();\n+    \t\t}\n+    \t\tisTableCreated = true;\n+    \t} catch (SQLException e) {\n+\t\t\te.printStackTrace();\n+\t\t}\n+    }\n+    \n+    private void initCounter(Timer timer) {", "originalCommit": "853fea0cb6748d989cb49f84513c117d60e9f5e6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9f13e9755d4736585cab62800099cffa97a7b0a2", "changed_code": [{"header": "diff --git a/dev/com.ibm.ws.concurrent.persistent_fat_demo_timers/test-application/demotimers/src/ejb/timers/AutomaticDatabase.java b/dev/com.ibm.ws.concurrent.persistent_fat_demo_timers/test-application/demotimers/src/ejb/timers/AutomaticDatabase.java\nindex 0fa8c54281..6f4bdda229 100755\n--- a/dev/com.ibm.ws.concurrent.persistent_fat_demo_timers/test-application/demotimers/src/ejb/timers/AutomaticDatabase.java\n+++ b/dev/com.ibm.ws.concurrent.persistent_fat_demo_timers/test-application/demotimers/src/ejb/timers/AutomaticDatabase.java\n", "chunk": "@@ -53,80 +57,83 @@ public class AutomaticDatabase {\n     public int getRunCount() {\n         return count;\n     }\n-    \n+\n     /**\n-     * Runs ever 30 seconds.  Automatically starts when application starts. \n+     * Runs ever 30 seconds. Automatically starts when application starts.\n      */\n-    @Schedule(info = \"Performing Database Operations\", hour = \"*\", minute = \"*\", second = \"*/30\")\n+    @Schedule(info = \"Performing Database Operations\", hour = \"*\", minute = \"*\", second = \"*/30\", persistent = true)\n     public void run(Timer timer) {\n-    \tif(!isTableCreated)\n-    \t\tinitTable();\n-    \t\n+        if (!isTableCreated)\n+            initTable();\n+\n         System.out.println(\"Running execution \" + incrementCount(timer) + \" of timer \" + timer.getInfo());\n     }\n-    \n+\n     private void initTable() {\n-    \tfinal String createTable = \"CREATE TABLE AutomaticDatabase (name VARCHAR(64) NOT NULL PRIMARY KEY, count INT)\";\n-    \t\n-    \ttry (Connection conn = ds.getConnection()) {\n-    \t\t//See if table was created by another server\n-        \tDatabaseMetaData md = conn.getMetaData();\n-        \tResultSet rs = md.getTables(null, null, \"AutomaticDatabase\", null);\n-        \twhile(rs.next()) {\n-        \t\tisTableCreated = true;\n-        \t\treturn;\n-        \t}\n-    \t\t\n-    \t\t//If not, create it.    \t\t\n-    \t\ttry (PreparedStatement pstmt= conn.prepareStatement(createTable)) {\n-    \t\t\tpstmt.executeUpdate();\n-    \t\t}\n-    \t\tisTableCreated = true;\n-    \t} catch (SQLException e) {\n-\t\t\te.printStackTrace();\n-\t\t}\n+        final String createTable = \"CREATE TABLE AutomaticDatabase (name VARCHAR(64) NOT NULL PRIMARY KEY, count INT)\";\n+\n+        try (Connection conn = ds.getConnection()) {\n+            //See if table was created by another server\n+            DatabaseMetaData md = conn.getMetaData();\n+            ResultSet rs = md.getTables(null, null, \"AutomaticDatabase\", null);\n+            while (rs.next()) {\n+                isTableCreated = true;\n+                return;\n+            }\n+\n+            //If not, create it.\n+            try (PreparedStatement pstmt = conn.prepareStatement(createTable)) {\n+                pstmt.executeUpdate();\n+            }\n+            isTableCreated = true;\n+        } catch (SQLException e) {\n+            e.printStackTrace();\n+            fail(c.getName() + \" caught exception when initializing table: \" + e.getMessage());\n+        }\n     }\n-    \n+\n     private void initCounter(Timer timer) {\n-    \tfinal String createRow = \"INSERT INTO AutomaticDatabase VALUES(?,?)\";\n-    \t\n-    \t//create count\n-    \tcount = 1;\n-    \t\n-    \ttry (Connection conn = ds.getConnection()) {\n-    \t\ttry (PreparedStatement pstmt = conn.prepareStatement(createRow)) {\n-    \t\t\tpstmt.setString(1, timer.getInfo().toString());\n-    \t\t\tpstmt.setInt(2, count);\n-    \t\t\tpstmt.execute();\n-    \t\t}\n-    \t} catch (SQLException e) {\n-    \t\tcount = -1;\n-\t\t\te.printStackTrace();\n-\t\t}\n+        final String createRow = \"INSERT INTO AutomaticDatabase VALUES(?,?)\";\n+\n+        //create count\n+        count = 1;\n+\n+        try (Connection conn = ds.getConnection()) {\n+            try (PreparedStatement pstmt = conn.prepareStatement(createRow)) {\n+                pstmt.setString(1, timer.getInfo().toString());\n+                pstmt.setInt(2, count);\n+                pstmt.execute();\n+            }\n+        } catch (SQLException e) {\n+            count = -1;\n+            e.printStackTrace();\n+            fail(c.getName() + \" caught exception when creating table row: \" + e.getMessage());\n+        }\n     }\n-    \n+\n     /**\n      * Increment count.\n      */\n     private int incrementCount(Timer timer) {\n-    \tif (count == -1) {\n-    \t\tthis.initCounter(timer);\n-    \t\treturn count;\n-    \t}\n-    \t\n-    \tfinal String modifyRow = \"UPDATE AutomaticDatabase SET count = ? WHERE name = ?\";\n-    \t\n-    \ttry (Connection conn = ds.getConnection()) {\n-    \t\ttry (PreparedStatement pstmt = conn.prepareStatement(modifyRow)) {\n-    \t\t\tpstmt.setInt(1, ++count);\n-    \t\t\tpstmt.setString(2, timer.getInfo().toString());\n-    \t\t\tpstmt.execute();\n-    \t\t}\n-    \t} catch (SQLException e) {\n-    \t\tcount--;\n-\t\t\te.printStackTrace();\n-\t\t}\n-    \t\n-    \treturn count;\n+        if (count == -1) {\n+            this.initCounter(timer);\n+            return count;\n+        }\n+\n+        final String modifyRow = \"UPDATE AutomaticDatabase SET count = ? WHERE name = ?\";\n+\n+        try (Connection conn = ds.getConnection()) {\n+            try (PreparedStatement pstmt = conn.prepareStatement(modifyRow)) {\n+                pstmt.setInt(1, ++count);\n+                pstmt.setString(2, timer.getInfo().toString());\n+                pstmt.execute();\n+            }\n+        } catch (SQLException e) {\n+            count--;\n+            e.printStackTrace();\n+            fail(c.getName() + \" caught exception when incrementing count: \" + e.getMessage());\n+        }\n+\n+        return count;\n     }\n }\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzUxMDg3Nw==", "url": "https://github.com/OpenLiberty/open-liberty/pull/10299#discussion_r363510877", "body": "I think it is getting the wrong EJB here. Probably meant \"AutomaticMemory\"", "bodyText": "I think it is getting the wrong EJB here. Probably meant \"AutomaticMemory\"", "bodyHTML": "<p dir=\"auto\">I think it is getting the wrong EJB here. Probably meant \"AutomaticMemory\"</p>", "author": "njr-11", "createdAt": "2020-01-06T22:20:31Z", "path": "dev/com.ibm.ws.concurrent.persistent_fat_demo_timers/test-application/demotimers/src/ejb/timers/PersistentDemoTimersServlet.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*******************************************************************************\n+ * Copyright (c) 2019 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package ejb.timers;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.annotation.Resource;\n+import javax.ejb.EJB;\n+import javax.servlet.annotation.WebServlet;\n+import javax.transaction.UserTransaction;\n+\n+import org.junit.Test;\n+\n+import componenttest.app.FATServlet;\n+import componenttest.custom.junit.runner.Mode;\n+import componenttest.custom.junit.runner.Mode.TestMode;\n+\n+@SuppressWarnings(\"serial\")\n+@WebServlet(\"/*\")\n+public class PersistentDemoTimersServlet extends FATServlet {\n+\n+    /**\n+     * Interval in milliseconds between polling for task results.\n+     */\n+    private static final long POLL_INTERVAL = 200;\n+\n+    @EJB\n+    private AutomaticDatabase autoTimerDatabase;\n+    \n+    @EJB\n+    private AutomaticDatabase autoTimerMemory;", "originalCommit": "853fea0cb6748d989cb49f84513c117d60e9f5e6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9f13e9755d4736585cab62800099cffa97a7b0a2", "changed_code": [{"header": "diff --git a/dev/com.ibm.ws.concurrent.persistent_fat_demo_timers/test-application/demotimers/src/ejb/timers/PersistentDemoTimersServlet.java b/dev/com.ibm.ws.concurrent.persistent_fat_demo_timers/test-application/demotimers/src/ejb/timers/PersistentDemoTimersServlet.java\nindex e879f37eef..535bafa9a6 100755\n--- a/dev/com.ibm.ws.concurrent.persistent_fat_demo_timers/test-application/demotimers/src/ejb/timers/PersistentDemoTimersServlet.java\n+++ b/dev/com.ibm.ws.concurrent.persistent_fat_demo_timers/test-application/demotimers/src/ejb/timers/PersistentDemoTimersServlet.java\n", "chunk": "@@ -34,25 +33,24 @@ public class PersistentDemoTimersServlet extends FATServlet {\n \n     @EJB\n     private AutomaticDatabase autoTimerDatabase;\n-    \n+\n     @EJB\n-    private AutomaticDatabase autoTimerMemory;\n+    private AutomaticMemory autoTimerMemory;\n \n     @EJB\n-    private AutomaticDatabase autoTimerIO;\n+    private AutomaticIO autoTimerIO;\n \n     @Resource\n     private UserTransaction tran;\n \n-    \n     /**\n      * Verify that an automatic persistent timer is running multiple times\n      * This timer runs every other second\n      */\n     @Test\n     public void testRepeatingAutomaticPersistentTimerMemory() throws Exception {\n-    \tfinal long TIMEOUT_NS = TimeUnit.SECONDS.toNanos(10);\n-    \t\n+        final long TIMEOUT_NS = TimeUnit.SECONDS.toNanos(10);\n+\n         int count = autoTimerMemory.getRunCount();\n         for (long start = System.nanoTime(); count < 3 && System.nanoTime() - start < TIMEOUT_NS; Thread.sleep(POLL_INTERVAL))\n             count = autoTimerMemory.getRunCount();\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzUxMTA3Ng==", "url": "https://github.com/OpenLiberty/open-liberty/pull/10299#discussion_r363511076", "body": "Also getting the wrong EJB here. Probably intended \"AutomaticId\"", "bodyText": "Also getting the wrong EJB here. Probably intended \"AutomaticId\"", "bodyHTML": "<p dir=\"auto\">Also getting the wrong EJB here. Probably intended \"AutomaticId\"</p>", "author": "njr-11", "createdAt": "2020-01-06T22:21:02Z", "path": "dev/com.ibm.ws.concurrent.persistent_fat_demo_timers/test-application/demotimers/src/ejb/timers/PersistentDemoTimersServlet.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*******************************************************************************\n+ * Copyright (c) 2019 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package ejb.timers;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.annotation.Resource;\n+import javax.ejb.EJB;\n+import javax.servlet.annotation.WebServlet;\n+import javax.transaction.UserTransaction;\n+\n+import org.junit.Test;\n+\n+import componenttest.app.FATServlet;\n+import componenttest.custom.junit.runner.Mode;\n+import componenttest.custom.junit.runner.Mode.TestMode;\n+\n+@SuppressWarnings(\"serial\")\n+@WebServlet(\"/*\")\n+public class PersistentDemoTimersServlet extends FATServlet {\n+\n+    /**\n+     * Interval in milliseconds between polling for task results.\n+     */\n+    private static final long POLL_INTERVAL = 200;\n+\n+    @EJB\n+    private AutomaticDatabase autoTimerDatabase;\n+    \n+    @EJB\n+    private AutomaticDatabase autoTimerMemory;\n+\n+    @EJB\n+    private AutomaticDatabase autoTimerIO;", "originalCommit": "853fea0cb6748d989cb49f84513c117d60e9f5e6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9f13e9755d4736585cab62800099cffa97a7b0a2", "changed_code": [{"header": "diff --git a/dev/com.ibm.ws.concurrent.persistent_fat_demo_timers/test-application/demotimers/src/ejb/timers/PersistentDemoTimersServlet.java b/dev/com.ibm.ws.concurrent.persistent_fat_demo_timers/test-application/demotimers/src/ejb/timers/PersistentDemoTimersServlet.java\nindex e879f37eef..535bafa9a6 100755\n--- a/dev/com.ibm.ws.concurrent.persistent_fat_demo_timers/test-application/demotimers/src/ejb/timers/PersistentDemoTimersServlet.java\n+++ b/dev/com.ibm.ws.concurrent.persistent_fat_demo_timers/test-application/demotimers/src/ejb/timers/PersistentDemoTimersServlet.java\n", "chunk": "@@ -34,25 +33,24 @@ public class PersistentDemoTimersServlet extends FATServlet {\n \n     @EJB\n     private AutomaticDatabase autoTimerDatabase;\n-    \n+\n     @EJB\n-    private AutomaticDatabase autoTimerMemory;\n+    private AutomaticMemory autoTimerMemory;\n \n     @EJB\n-    private AutomaticDatabase autoTimerIO;\n+    private AutomaticIO autoTimerIO;\n \n     @Resource\n     private UserTransaction tran;\n \n-    \n     /**\n      * Verify that an automatic persistent timer is running multiple times\n      * This timer runs every other second\n      */\n     @Test\n     public void testRepeatingAutomaticPersistentTimerMemory() throws Exception {\n-    \tfinal long TIMEOUT_NS = TimeUnit.SECONDS.toNanos(10);\n-    \t\n+        final long TIMEOUT_NS = TimeUnit.SECONDS.toNanos(10);\n+\n         int count = autoTimerMemory.getRunCount();\n         for (long start = System.nanoTime(); count < 3 && System.nanoTime() - start < TIMEOUT_NS; Thread.sleep(POLL_INTERVAL))\n             count = autoTimerMemory.getRunCount();\n", "next_change": null}]}}, {"oid": "9f13e9755d4736585cab62800099cffa97a7b0a2", "url": "https://github.com/OpenLiberty/open-liberty/commit/9f13e9755d4736585cab62800099cffa97a7b0a2", "message": "Feedback Changes", "committedDate": "2020-01-07T15:34:26Z", "type": "commit"}]}