{"pr_number": 13204, "pr_title": "12724 - process user JAX-RS SecurityContexts", "pr_author": "WhiteCat22", "pr_createdAt": "2020-07-27T21:45:55Z", "pr_url": "https://github.com/OpenLiberty/open-liberty/pull/13204", "timeline": [{"oid": "feb5682bddd39601f1a01875c004488dd148c12f", "url": "https://github.com/OpenLiberty/open-liberty/commit/feb5682bddd39601f1a01875c004488dd148c12f", "message": "12724 - create jaxrs test for custom SecurityContexts set via ContainerRequestFilter for an endpoint using JSR250 security annotations", "committedDate": "2020-09-09T23:01:30Z", "type": "commit"}, {"oid": "190a26e25ab7c12305f9bc3ecf71e571c337c0f6", "url": "https://github.com/OpenLiberty/open-liberty/commit/190a26e25ab7c12305f9bc3ecf71e571c337c0f6", "message": "12724 - handle custom javax.ws.rs.core.SecurityContext", "committedDate": "2020-09-11T16:37:13Z", "type": "commit"}, {"oid": "190a26e25ab7c12305f9bc3ecf71e571c337c0f6", "url": "https://github.com/OpenLiberty/open-liberty/commit/190a26e25ab7c12305f9bc3ecf71e571c337c0f6", "message": "12724 - handle custom javax.ws.rs.core.SecurityContext", "committedDate": "2020-09-11T16:37:13Z", "type": "forcePushed"}, {"oid": "6c1ae4dbd494e5a61b7b72d00b832cffcf350280", "url": "https://github.com/OpenLiberty/open-liberty/commit/6c1ae4dbd494e5a61b7b72d00b832cffcf350280", "message": "12724 - cleanup", "committedDate": "2020-09-11T18:55:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTU3MzY5Mg==", "url": "https://github.com/OpenLiberty/open-liberty/pull/13204#discussion_r489573692", "body": "```suggestion\r\n        if (jaxrsSecurityContext != null) {\r\n```\r\n\r\nThe instanceof check is unnecessary.", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (jaxrsSecurityContext != null && jaxrsSecurityContext instanceof javax.ws.rs.core.SecurityContext) {\n          \n          \n            \n                    if (jaxrsSecurityContext != null) {\n          \n      \n    \n    \n  \n\nThe instanceof check is unnecessary.", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">if</span> (jaxrsSecurityContext <span class=\"pl-k\">!=</span> <span class=\"pl-c1\">null</span><span class=\"x x-first\"> </span><span class=\"pl-k x\">&amp;&amp;</span><span class=\"x\"> jaxrsSecurityContext </span><span class=\"pl-k x\">instanceof</span><span class=\"x\"> </span><span class=\"pl-smi\"><span class=\"x\">javax.ws.rs.core</span><span class=\"pl-k x\">.</span><span class=\"x x-last\">SecurityContext</span></span>) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">if</span> (jaxrsSecurityContext <span class=\"pl-k\">!=</span> <span class=\"pl-c1\">null</span>) {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\">The instanceof check is unnecessary.</p>", "author": "andymc12", "createdAt": "2020-09-16T16:36:39Z", "path": "dev/com.ibm.ws.jaxrs.2.0.common/src/com/ibm/ws/jaxrs20/security/LibertySimpleAuthorizingInterceptor.java", "diffHunk": "@@ -29,17 +31,24 @@\n import com.ibm.websphere.ras.Tr;\n import com.ibm.websphere.ras.TraceComponent;\n \n+@Priority(Priorities.AUTHORIZATION)\n public class LibertySimpleAuthorizingInterceptor extends\n                 AbstractAuthorizingInInterceptor {\n     private static final TraceComponent tc = Tr\n                     .register(LibertySimpleAuthorizingInterceptor.class);\n \n     @Override\n     public void handleMessage(Message message) throws Fault {\n-        SecurityContext sc = message.get(SecurityContext.class);\n-        if (sc != null) {\n+        SecurityContext cxfSecurityContext = message.get(SecurityContext.class);\n+        javax.ws.rs.core.SecurityContext jaxrsSecurityContext = message.get(javax.ws.rs.core.SecurityContext.class);\n+        if (jaxrsSecurityContext != null && jaxrsSecurityContext instanceof javax.ws.rs.core.SecurityContext) {", "originalCommit": "6c1ae4dbd494e5a61b7b72d00b832cffcf350280", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTU3OTk3Nw==", "url": "https://github.com/OpenLiberty/open-liberty/pull/13204#discussion_r489579977", "body": "```suggestion\r\n            if (RoleMethodAuthUtil.parseMethodSecurity(method, jaxrsSecurityContext.getUserPrincipal(), s -> jaxrsSecurityContext.isUserInRole(s))) {\r\n```\r\n\r\nWe shouldn't need to do the role/class/method checking here - the RoleMethodAuthUtil should do that for us - we just need to pass them the user principal (from the security context if available or the servlet) and the method from them to call to check if the user is in the role.", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (parseMethodSecurity(method, jaxrsSecurityContext)) {\n          \n          \n            \n                        if (RoleMethodAuthUtil.parseMethodSecurity(method, jaxrsSecurityContext.getUserPrincipal(), s -> jaxrsSecurityContext.isUserInRole(s))) {\n          \n      \n    \n    \n  \n\nWe shouldn't need to do the role/class/method checking here - the RoleMethodAuthUtil should do that for us - we just need to pass them the user principal (from the security context if available or the servlet) and the method from them to call to check if the user is in the role.", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            <span class=\"pl-k\">if</span> (parseMethodSecurity(method, jaxrsSecurityContext)) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            <span class=\"pl-k\">if</span> (<span class=\"pl-smi x x-first\">RoleMethodAuthUtil</span><span class=\"pl-k x x-last\">.</span>parseMethodSecurity(method, jaxrsSecurityContext<span class=\"pl-k x x-first\">.</span><span class=\"x\">getUserPrincipal(), s </span><span class=\"pl-k x\">-</span><span class=\"pl-k x\">&gt;</span><span class=\"x\"> jaxrsSecurityContext</span><span class=\"pl-k x\">.</span><span class=\"x x-last\">isUserInRole(s)</span>)) {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\">We shouldn't need to do the role/class/method checking here - the RoleMethodAuthUtil should do that for us - we just need to pass them the user principal (from the security context if available or the servlet) and the method from them to call to check if the user is in the role.</p>", "author": "andymc12", "createdAt": "2020-09-16T16:47:08Z", "path": "dev/com.ibm.ws.jaxrs.2.1.common/src/com/ibm/ws/jaxrs20/security/LibertyAuthFilter.java", "diffHunk": "@@ -75,13 +89,157 @@ private boolean authenticate(Message m) {\n     }\n \n     private void handleMessage(Message message) throws UnauthenticatedException{\n-        HttpServletRequest req = (HttpServletRequest) message.get(AbstractHTTPDestination.HTTP_REQUEST);\n-        Method method = MessageUtils.getTargetMethod(message, () -> \n-            new AccessDeniedException(\"Method is not available : Unauthorized\"));\n-        if (RoleMethodAuthUtil.parseMethodSecurity(method, req.getUserPrincipal(), s -> req.isUserInRole(s))) {\n-            return;\n+        SecurityContext jaxrsSecurityContext = message.get(SecurityContext.class);\n+        if (jaxrsSecurityContext != null && jaxrsSecurityContext instanceof SecurityContext) {\n+            Method method = getTargetMethod(message);\n+            if (parseMethodSecurity(method, jaxrsSecurityContext)) {", "originalCommit": "6c1ae4dbd494e5a61b7b72d00b832cffcf350280", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTU4MDE5Mw==", "url": "https://github.com/OpenLiberty/open-liberty/pull/13204#discussion_r489580193", "body": "See previous comment - we can delete this.", "bodyText": "See previous comment - we can delete this.", "bodyHTML": "<p dir=\"auto\">See previous comment - we can delete this.</p>", "author": "andymc12", "createdAt": "2020-09-16T16:47:33Z", "path": "dev/com.ibm.ws.jaxrs.2.1.common/src/com/ibm/ws/jaxrs20/security/LibertyAuthFilter.java", "diffHunk": "@@ -75,13 +89,157 @@ private boolean authenticate(Message m) {\n     }\n \n     private void handleMessage(Message message) throws UnauthenticatedException{\n-        HttpServletRequest req = (HttpServletRequest) message.get(AbstractHTTPDestination.HTTP_REQUEST);\n-        Method method = MessageUtils.getTargetMethod(message, () -> \n-            new AccessDeniedException(\"Method is not available : Unauthorized\"));\n-        if (RoleMethodAuthUtil.parseMethodSecurity(method, req.getUserPrincipal(), s -> req.isUserInRole(s))) {\n-            return;\n+        SecurityContext jaxrsSecurityContext = message.get(SecurityContext.class);\n+        if (jaxrsSecurityContext != null && jaxrsSecurityContext instanceof SecurityContext) {\n+            Method method = getTargetMethod(message);\n+            if (parseMethodSecurity(method, jaxrsSecurityContext)) {\n+                return;\n+            }\n+        } else {\n+            HttpServletRequest req = (HttpServletRequest) message.get(AbstractHTTPDestination.HTTP_REQUEST);\n+            Method method = MessageUtils.getTargetMethod(message, () -> \n+                new AccessDeniedException(\"Method is not available : Unauthorized\"));\n+            if (RoleMethodAuthUtil.parseMethodSecurity(method, req.getUserPrincipal(), s -> req.isUserInRole(s))) {\n+                return;\n+            }\n         }\n \n         throw new AccessDeniedException(\"Unauthorized\");\n     }\n+    \n+    protected Method getTargetMethod(Message m) {\n+        BindingOperationInfo bop = m.getExchange().getBindingOperationInfo();\n+        if (bop != null) {\n+            MethodDispatcher md = (MethodDispatcher) \n+                m.getExchange().getService().get(MethodDispatcher.class.getName());\n+            return md.getMethod(bop);\n+        } \n+        Method method = (Method)m.get(\"org.apache.cxf.resource.method\");\n+        if (method != null) {\n+            return method;\n+        }\n+        throw new AccessDeniedException(\"Method is not available : Unauthorized\");\n+    }\n+    \n+    private boolean parseMethodSecurity(Method method, SecurityContext sc) {\n+\n+        boolean denyAll = getDenyAll(method);\n+        if (denyAll) {\n+            if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {\n+                Tr.debug(tc, \"Found DenyAll for method: {} \" + method.getName()\n+                             + \", Injection Processing for web service is ignored\");\n+            }\n+            // throw new WebApplicationException(Response.Status.FORBIDDEN);\n+            return false;\n+\n+        } else { // try RolesAllowed\n+\n+            RolesAllowed rolesAllowed = getRolesAllowed(method);\n+            if (rolesAllowed != null) {\n+                if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {\n+                    Tr.debug(\n+                             tc,\n+                             \"found RolesAllowed in method: {} \"\n+                                 + method.getName(),\n+                             new Object[] { rolesAllowed.value() });\n+                }\n+                if (!ensureAuthentication(sc)) {\n+                    return false;\n+                }\n+                String[] theseroles = rolesAllowed.value();\n+\n+                if (!isUserInRole(sc, Arrays.asList(theseroles), false)) {\n+                    return false;\n+                }\n+                return true;\n+\n+            } else {\n+                boolean permitAll = getPermitAll(method);\n+                if (permitAll) {\n+                    if (TraceComponent.isAnyTracingEnabled()\n+                        && tc.isDebugEnabled()) {\n+                        Tr.debug(\n+                                 tc,\n+                                 \"Found PermitAll for method: {}\"\n+                                                 + method.getName());\n+                    }\n+                    return true;\n+                } else { // try class level annotations\n+                    Class<?> cls = method.getDeclaringClass();\n+                    return parseClassSecurity(cls, sc);\n+                }\n+            }\n+        }\n+    }\n+    \n+    private boolean parseClassSecurity(Class<?> cls, SecurityContext sc) {\n+\n+        // try DenyAll\n+        DenyAll denyAll = cls.getAnnotation(DenyAll.class);\n+        if (denyAll != null) {\n+            if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {\n+                Tr.debug(tc, \"Found class level @DenyAll - authorization denied for \" + cls.getName());\n+            }\n+            return false;\n+        } else { // try RolesAllowed\n+\n+            RolesAllowed rolesAllowed = cls.getAnnotation(RolesAllowed.class);\n+            if (rolesAllowed != null) {\n+\n+                String[] theseroles = rolesAllowed.value();\n+                if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {\n+                    Tr.debug(\n+                             tc,\n+                             \"found RolesAllowed in class level: {} \"\n+                                 + cls.getName(),\n+                             new Object[] { theseroles });\n+                }\n+                if (!ensureAuthentication(sc)) {\n+                    return false;\n+                }\n+                if (!isUserInRole(sc, Arrays.asList(theseroles), false)) {\n+                    return false;\n+                }\n+                return true;\n+            } else {\n+                return true;\n+            }\n+        }\n+    }\n+    \n+    private boolean ensureAuthentication(SecurityContext sc) {\n+        Principal p = sc.getUserPrincipal();\n+        if (p == null || \"UNAUTHENTICATED\".equals(p.getName())) {\n+            throw new AuthenticationException();\n+        }\n+        return true;\n+    }\n+    \n+    private RolesAllowed getRolesAllowed(Method method) {\n+        return method.getAnnotation(RolesAllowed.class);\n+    }\n+\n+    private boolean getPermitAll(Method method) {\n+        return method.isAnnotationPresent(PermitAll.class);\n+    }\n+\n+    private boolean getDenyAll(Method method) {\n+        return method.isAnnotationPresent(DenyAll.class);\n+    }\n+    \n+    private static final String ALL_ROLES = \"*\";\n+    \n+    protected boolean isUserInRole(javax.ws.rs.core.SecurityContext sc, List<String> roles, boolean deny) {\n+        \n+        if (roles.size() == 1 && ALL_ROLES.equals(roles.get(0))) {\n+            return !deny;\n+        }\n+        \n+        for (String role : roles) {\n+            if (sc.isUserInRole(role)) {\n+                return !deny;\n+            }\n+        }\n+        return deny;\n+    }", "originalCommit": "6c1ae4dbd494e5a61b7b72d00b832cffcf350280", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTU4NTg5MQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/13204#discussion_r489585891", "body": "Instead of duplicating the existing methods (using CXF's `SecurityContext`), maybe we could create a subclass of CXF's `SecurityContext` that delegates appropriately - something like:\r\n```\r\nclass SecurityContextProxy implements SecurityContext {\r\n    private final javax.ws.rs.core.SecurityContext jaxrsSecCtx;\r\n    private final SecurityContext cxfSecCtx;\r\n    SecurityContextProxy(javax.ws.rs.core.SecurityContext jaxrsSecCtx, SecurityContext cxfSecCtx) {\r\n        this.jaxrsSecCtx = jaxrsSecCtx;\r\n        this.cxfSecCtx = cxfSecCtx;\r\n        if (jaxrsSecCtx == null && cxfSecCtx == null) throw new IllegalArgumentException();\r\n    }\r\n\r\n    @Override\r\n    public Principal getUserPrincipal() {\r\n        return jaxrsSecCtx != null ? jaxrsSecCtx.getUserPrincipal() : cxfSecCtx.getUserPrincipal();\r\n    }\r\n\r\n    @Override\r\n    public boolean isUserInRole(String role) {\r\n        return jaxrsSecCtx != null ? jaxrsSecCtx.isUserInRole(role) : cxfSecCtx.isUserInRole(role);\r\n    }\r\n}\r\n```\r\n\r\nThis would allow you to keep the existing `parse*` methods and just pass an instance of this new proxy class to it - without duplicating for both SecurityContext types.", "bodyText": "Instead of duplicating the existing methods (using CXF's SecurityContext), maybe we could create a subclass of CXF's SecurityContext that delegates appropriately - something like:\nclass SecurityContextProxy implements SecurityContext {\n    private final javax.ws.rs.core.SecurityContext jaxrsSecCtx;\n    private final SecurityContext cxfSecCtx;\n    SecurityContextProxy(javax.ws.rs.core.SecurityContext jaxrsSecCtx, SecurityContext cxfSecCtx) {\n        this.jaxrsSecCtx = jaxrsSecCtx;\n        this.cxfSecCtx = cxfSecCtx;\n        if (jaxrsSecCtx == null && cxfSecCtx == null) throw new IllegalArgumentException();\n    }\n\n    @Override\n    public Principal getUserPrincipal() {\n        return jaxrsSecCtx != null ? jaxrsSecCtx.getUserPrincipal() : cxfSecCtx.getUserPrincipal();\n    }\n\n    @Override\n    public boolean isUserInRole(String role) {\n        return jaxrsSecCtx != null ? jaxrsSecCtx.isUserInRole(role) : cxfSecCtx.isUserInRole(role);\n    }\n}\n\nThis would allow you to keep the existing parse* methods and just pass an instance of this new proxy class to it - without duplicating for both SecurityContext types.", "bodyHTML": "<p dir=\"auto\">Instead of duplicating the existing methods (using CXF's <code>SecurityContext</code>), maybe we could create a subclass of CXF's <code>SecurityContext</code> that delegates appropriately - something like:</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"class SecurityContextProxy implements SecurityContext {\n    private final javax.ws.rs.core.SecurityContext jaxrsSecCtx;\n    private final SecurityContext cxfSecCtx;\n    SecurityContextProxy(javax.ws.rs.core.SecurityContext jaxrsSecCtx, SecurityContext cxfSecCtx) {\n        this.jaxrsSecCtx = jaxrsSecCtx;\n        this.cxfSecCtx = cxfSecCtx;\n        if (jaxrsSecCtx == null &amp;&amp; cxfSecCtx == null) throw new IllegalArgumentException();\n    }\n\n    @Override\n    public Principal getUserPrincipal() {\n        return jaxrsSecCtx != null ? jaxrsSecCtx.getUserPrincipal() : cxfSecCtx.getUserPrincipal();\n    }\n\n    @Override\n    public boolean isUserInRole(String role) {\n        return jaxrsSecCtx != null ? jaxrsSecCtx.isUserInRole(role) : cxfSecCtx.isUserInRole(role);\n    }\n}\"><pre><code>class SecurityContextProxy implements SecurityContext {\n    private final javax.ws.rs.core.SecurityContext jaxrsSecCtx;\n    private final SecurityContext cxfSecCtx;\n    SecurityContextProxy(javax.ws.rs.core.SecurityContext jaxrsSecCtx, SecurityContext cxfSecCtx) {\n        this.jaxrsSecCtx = jaxrsSecCtx;\n        this.cxfSecCtx = cxfSecCtx;\n        if (jaxrsSecCtx == null &amp;&amp; cxfSecCtx == null) throw new IllegalArgumentException();\n    }\n\n    @Override\n    public Principal getUserPrincipal() {\n        return jaxrsSecCtx != null ? jaxrsSecCtx.getUserPrincipal() : cxfSecCtx.getUserPrincipal();\n    }\n\n    @Override\n    public boolean isUserInRole(String role) {\n        return jaxrsSecCtx != null ? jaxrsSecCtx.isUserInRole(role) : cxfSecCtx.isUserInRole(role);\n    }\n}\n</code></pre></div>\n<p dir=\"auto\">This would allow you to keep the existing <code>parse*</code> methods and just pass an instance of this new proxy class to it - without duplicating for both SecurityContext types.</p>", "author": "andymc12", "createdAt": "2020-09-16T16:57:17Z", "path": "dev/com.ibm.ws.jaxrs.2.0.common/src/com/ibm/ws/jaxrs20/security/LibertySimpleAuthorizingInterceptor.java", "diffHunk": "@@ -29,17 +31,24 @@\n import com.ibm.websphere.ras.Tr;\n import com.ibm.websphere.ras.TraceComponent;\n \n+@Priority(Priorities.AUTHORIZATION)\n public class LibertySimpleAuthorizingInterceptor extends\n                 AbstractAuthorizingInInterceptor {\n     private static final TraceComponent tc = Tr\n                     .register(LibertySimpleAuthorizingInterceptor.class);\n \n     @Override\n     public void handleMessage(Message message) throws Fault {\n-        SecurityContext sc = message.get(SecurityContext.class);\n-        if (sc != null) {\n+        SecurityContext cxfSecurityContext = message.get(SecurityContext.class);\n+        javax.ws.rs.core.SecurityContext jaxrsSecurityContext = message.get(javax.ws.rs.core.SecurityContext.class);", "originalCommit": "6c1ae4dbd494e5a61b7b72d00b832cffcf350280", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "999b12ec8ab4a596e1f52496b1744dc215f69c6d", "url": "https://github.com/OpenLiberty/open-liberty/commit/999b12ec8ab4a596e1f52496b1744dc215f69c6d", "message": "17274 - code review changes", "committedDate": "2020-09-17T19:15:40Z", "type": "commit"}, {"oid": "999b12ec8ab4a596e1f52496b1744dc215f69c6d", "url": "https://github.com/OpenLiberty/open-liberty/commit/999b12ec8ab4a596e1f52496b1744dc215f69c6d", "message": "17274 - code review changes", "committedDate": "2020-09-17T19:15:40Z", "type": "forcePushed"}]}