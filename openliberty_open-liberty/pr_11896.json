{"pr_number": 11896, "pr_title": "Add jaxrs default exceptionmapper", "pr_author": "jim-krueger", "pr_createdAt": "2020-04-22T21:45:42Z", "pr_url": "https://github.com/OpenLiberty/open-liberty/pull/11896", "timeline": [{"oid": "988cc098095fea2eb571f3a25a07f16674e3ba46", "url": "https://github.com/OpenLiberty/open-liberty/commit/988cc098095fea2eb571f3a25a07f16674e3ba46", "message": "Add jaxrs default exceptionmapper", "committedDate": "2020-04-22T23:32:57Z", "type": "forcePushed"}, {"oid": "1d0ff704907d0d08bb56f70e9f368e3251ec6417", "url": "https://github.com/OpenLiberty/open-liberty/commit/1d0ff704907d0d08bb56f70e9f368e3251ec6417", "message": "Add jaxrs default exceptionmapper", "committedDate": "2020-04-23T17:30:17Z", "type": "forcePushed"}, {"oid": "7a41204b2f0dca8417098c2934ebe679e422288d", "url": "https://github.com/OpenLiberty/open-liberty/commit/7a41204b2f0dca8417098c2934ebe679e422288d", "message": "Add jaxrs default exceptionmapper", "committedDate": "2020-04-23T20:13:48Z", "type": "forcePushed"}, {"oid": "712f9faa76d7c32bb6445d64796b9b306efdd544", "url": "https://github.com/OpenLiberty/open-liberty/commit/712f9faa76d7c32bb6445d64796b9b306efdd544", "message": "Add jaxrs default exceptionmapper", "committedDate": "2020-04-23T22:27:38Z", "type": "forcePushed"}, {"oid": "f3acb1f4703f57b71b9c85f4b243764337b876cf", "url": "https://github.com/OpenLiberty/open-liberty/commit/f3acb1f4703f57b71b9c85f4b243764337b876cf", "message": "Add jaxrs default exceptionmapper", "committedDate": "2020-04-24T12:17:23Z", "type": "forcePushed"}, {"oid": "4d9ec2c61601323cd10814f0c926702bf56eadb5", "url": "https://github.com/OpenLiberty/open-liberty/commit/4d9ec2c61601323cd10814f0c926702bf56eadb5", "message": "Add jaxrs default exceptionmapper", "committedDate": "2020-04-24T15:07:13Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY4ODMxNw==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11896#discussion_r414688317", "body": "it's a nit, but I prefer that the serialVersionUID is the first line in the class, so that it doesn't distract from the other \"more useful\" fields in the class.", "bodyText": "it's a nit, but I prefer that the serialVersionUID is the first line in the class, so that it doesn't distract from the other \"more useful\" fields in the class.", "bodyHTML": "<p dir=\"auto\">it's a nit, but I prefer that the serialVersionUID is the first line in the class, so that it doesn't distract from the other \"more useful\" fields in the class.</p>", "author": "andymc12", "createdAt": "2020-04-24T16:01:26Z", "path": "dev/com.ibm.ws.jaxrs.defaultexceptionmapper/src/com/ibm/ws/jaxrs/defaultexceptionmapper/DefaultExceptionMapper.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package com.ibm.ws.jaxrs.defaultexceptionmapper;\n+\n+import com.ibm.websphere.ras.Tr;\n+import com.ibm.websphere.ras.TraceComponent;\n+import com.ibm.websphere.ras.annotation.TraceObjectField;\n+import com.ibm.websphere.ras.annotation.TraceOptions;\n+import com.ibm.ws.ras.instrument.annotation.InjectedFFDC;import java.lang.Override;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+import javax.ws.rs.WebApplicationException;\n+import javax.ws.rs.container.ResourceInfo;\n+import javax.ws.rs.core.Context;\n+import javax.ws.rs.core.Response;\n+import javax.ws.rs.ext.ExceptionMapper;\n+import javax.ws.rs.ext.Provider;\n+\n+@Provider \n+public class DefaultExceptionMapper implements ExceptionMapper<Throwable> {\n+   @Context\n+   private ResourceInfo resourceInfo;\n+   \n+   private final List<DefaultExceptionMapperCallback> callbacks = new LinkedList<>();\n+   \n+   static final long serialVersionUID = 9083611544695926229L;", "originalCommit": "4d9ec2c61601323cd10814f0c926702bf56eadb5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY4OTkzOA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11896#discussion_r414689938", "body": "```suggestion\r\n * Copyright (c) 2020 IBM Corporation and others.\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Copyright (c) 2019 IBM Corporation and others.\n          \n          \n            \n             * Copyright (c) 2020 IBM Corporation and others.", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"> <span class=\"pl-k\">*</span> <span class=\"pl-smi\">Copyright</span> (c) <span class=\"pl-c1 x x-first x-last\">2019</span> <span class=\"pl-c1\">IBM</span> <span class=\"pl-smi\">Corporation</span> and others.</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\"> <span class=\"pl-k\">*</span> <span class=\"pl-smi\">Copyright</span> (c) <span class=\"pl-c1 x x-first x-last\">2020</span> <span class=\"pl-c1\">IBM</span> <span class=\"pl-smi\">Corporation</span> and others.</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "andymc12", "createdAt": "2020-04-24T16:03:55Z", "path": "dev/com.ibm.ws.jaxrs.defaultexceptionmapper/src/com/ibm/ws/jaxrs/defaultexceptionmapper/package-info.java", "diffHunk": "@@ -0,0 +1,15 @@\n+/*******************************************************************************\n+ * Copyright (c) 2019 IBM Corporation and others.", "originalCommit": "4d9ec2c61601323cd10814f0c926702bf56eadb5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY5NDc3NA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11896#discussion_r414694774", "body": "This `@Component` annotation should specify the `DefaultExceptionMapperCallback` as it's service. Maybe this:\r\n```suggestion\r\n@Component(service = { DefaultExceptionMapperCallback.class }, configurationPolicy = ConfigurationPolicy.IGNORE, property = { \"service.vendor=IBM\" })\r\n```", "bodyText": "This @Component annotation should specify the DefaultExceptionMapperCallback as it's service. Maybe this:\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            @Component\n          \n          \n            \n            @Component(service = { DefaultExceptionMapperCallback.class }, configurationPolicy = ConfigurationPolicy.IGNORE, property = { \"service.vendor=IBM\" })", "bodyHTML": "<p dir=\"auto\">This <code>@Component</code> annotation should specify the <code>DefaultExceptionMapperCallback</code> as it's service. Maybe this:</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"><span class=\"pl-k\">@Component</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\"><span class=\"pl-k\">@Component</span><span class=\"x x-first\">(</span><span class=\"pl-c1 x\">service</span><span class=\"x\"> </span><span class=\"pl-k x\">=</span><span class=\"x\"> { </span><span class=\"pl-smi x\">DefaultExceptionMapperCallback</span><span class=\"pl-k x\">.</span><span class=\"x\">class }, </span><span class=\"pl-c1 x\">configurationPolicy</span><span class=\"x\"> </span><span class=\"pl-k x\">=</span><span class=\"x\"> </span><span class=\"pl-smi x\">ConfigurationPolicy</span><span class=\"pl-c1\"><span class=\"pl-k x\">.</span><span class=\"x\">IGNORE</span></span><span class=\"x\">, </span><span class=\"pl-c1 x\">property</span><span class=\"x\"> </span><span class=\"pl-k x\">=</span><span class=\"x\"> { </span><span class=\"pl-s\"><span class=\"pl-pds x\">\"</span><span class=\"x\">service.vendor=IBM</span><span class=\"pl-pds x\">\"</span></span><span class=\"x x-last\"> })</span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "andymc12", "createdAt": "2020-04-24T16:11:18Z", "path": "dev/com.ibm.ws.opentracing.1.1/src/com/ibm/ws/opentracing/OpentracingContainerFilter.java", "diffHunk": "@@ -40,12 +43,15 @@\n import io.opentracing.propagation.TextMap;\n import io.opentracing.tag.Tags;\n \n+import org.osgi.service.component.annotations.Component;\n+\n /**\n  * <p>Container filter implementation.</p>\n  *\n  * <p>This implementation is stateless. A single container filter is used by all applications.</p> *\n  */\n-public class OpentracingContainerFilter implements ContainerRequestFilter, ContainerResponseFilter, ExceptionMapper<Throwable> {\n+@Component", "originalCommit": "4d9ec2c61601323cd10814f0c926702bf56eadb5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY5NTg2MA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11896#discussion_r414695860", "body": "delete", "bodyText": "delete", "bodyHTML": "<p dir=\"auto\">delete</p>", "author": "andymc12", "createdAt": "2020-04-24T16:13:03Z", "path": "dev/com.ibm.ws.opentracing.1.1/src/com/ibm/ws/opentracing/OpentracingContainerFilter.java", "diffHunk": "@@ -272,14 +278,21 @@ public void remove() {\n         }\n     }\n \n-    /** {@inheritDoc} */\n     @Override\n+    public Map<String,Object> onDefaultMappedException(Throwable t, int statusCode, ResourceInfo resourceInfo ) {\n+        Tr.warning(tc, \"OPENTRACING_UNHANDLED_JAXRS_EXCEPTION\", t);\n+        return Collections.singletonMap(EXCEPTION_KEY, t);\n+    }\n+\n+\n+    /** {@inheritDoc} */\n+/*    @Override\n     public Response toResponse(Throwable exception) {\n         Tr.warning(tc, \"OPENTRACING_UNHANDLED_JAXRS_EXCEPTION\", exception);\n         if (exception instanceof WebApplicationException) {\n             return Response.fromResponse(((WebApplicationException) exception).getResponse()).header(EXCEPTION_KEY, exception).build();\n         }\n         return Response.serverError().header(EXCEPTION_KEY, exception).build();\n     }\n-\n+*/", "originalCommit": "4d9ec2c61601323cd10814f0c926702bf56eadb5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY5NjM0Nw==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11896#discussion_r414696347", "body": "same comment as 1.1", "bodyText": "same comment as 1.1", "bodyHTML": "<p dir=\"auto\">same comment as 1.1</p>", "author": "andymc12", "createdAt": "2020-04-24T16:13:46Z", "path": "dev/com.ibm.ws.opentracing.1.2/src/com/ibm/ws/opentracing/OpentracingContainerFilter.java", "diffHunk": "@@ -41,12 +44,15 @@\n import io.opentracing.propagation.TextMap;\n import io.opentracing.tag.Tags;\n \n+import org.osgi.service.component.annotations.Component;\n+\n /**\n  * <p>Container filter implementation.</p>\n  *\n  * <p>This implementation is stateless. A single container filter is used by all applications.</p> *\n  */\n-public class OpentracingContainerFilter implements ContainerRequestFilter, ContainerResponseFilter, ExceptionMapper<Throwable> {\n+@Component", "originalCommit": "4d9ec2c61601323cd10814f0c926702bf56eadb5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY5NjUzMQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11896#discussion_r414696531", "body": "delete", "bodyText": "delete", "bodyHTML": "<p dir=\"auto\">delete</p>", "author": "andymc12", "createdAt": "2020-04-24T16:14:01Z", "path": "dev/com.ibm.ws.opentracing.1.2/src/com/ibm/ws/opentracing/OpentracingContainerFilter.java", "diffHunk": "@@ -273,14 +279,21 @@ public void remove() {\n         }\n     }\n \n-    /** {@inheritDoc} */\n     @Override\n+    public Map<String,Object> onDefaultMappedException(Throwable t, int statusCode, ResourceInfo resourceInfo ) {\n+        Tr.warning(tc, \"OPENTRACING_UNHANDLED_JAXRS_EXCEPTION\", t);\n+        return Collections.singletonMap(EXCEPTION_KEY, t);\n+    }\n+\n+\n+    /** {@inheritDoc} */\n+/*    @Override\n     public Response toResponse(Throwable exception) {\n         Tr.warning(tc, \"OPENTRACING_UNHANDLED_JAXRS_EXCEPTION\", exception);\n         if (exception instanceof WebApplicationException) {\n             return Response.fromResponse(((WebApplicationException) exception).getResponse()).header(EXCEPTION_KEY, exception).build();\n         }\n         return Response.serverError().header(EXCEPTION_KEY, exception).build();\n     }\n-\n+*/", "originalCommit": "4d9ec2c61601323cd10814f0c926702bf56eadb5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY5Njc4Mw==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11896#discussion_r414696783", "body": "same comment as 1.1", "bodyText": "same comment as 1.1", "bodyHTML": "<p dir=\"auto\">same comment as 1.1</p>", "author": "andymc12", "createdAt": "2020-04-24T16:14:28Z", "path": "dev/com.ibm.ws.opentracing.1.3/src/com/ibm/ws/opentracing/OpentracingContainerFilter.java", "diffHunk": "@@ -41,12 +44,15 @@\n import io.opentracing.propagation.TextMap;\n import io.opentracing.tag.Tags;\n \n+import org.osgi.service.component.annotations.Component;\n+\n /**\n  * <p>Container filter implementation.</p>\n  *\n  * <p>This implementation is stateless. A single container filter is used by all applications.</p> *\n  */\n-public class OpentracingContainerFilter implements ContainerRequestFilter, ContainerResponseFilter, ExceptionMapper<Throwable> {\n+@Component", "originalCommit": "4d9ec2c61601323cd10814f0c926702bf56eadb5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY5NjkxNw==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11896#discussion_r414696917", "body": "delete", "bodyText": "delete", "bodyHTML": "<p dir=\"auto\">delete</p>", "author": "andymc12", "createdAt": "2020-04-24T16:14:42Z", "path": "dev/com.ibm.ws.opentracing.1.3/src/com/ibm/ws/opentracing/OpentracingContainerFilter.java", "diffHunk": "@@ -273,13 +279,21 @@ public void remove() {\n         }\n     }\n \n-    /** {@inheritDoc} */\n     @Override\n+    public Map<String,Object> onDefaultMappedException(Throwable t, int statusCode, ResourceInfo resourceInfo ) {\n+        Tr.warning(tc, \"OPENTRACING_UNHANDLED_JAXRS_EXCEPTION\", t);\n+        return Collections.singletonMap(EXCEPTION_KEY, t);\n+    }\n+\n+\n+    /** {@inheritDoc} */\n+/*    @Override\n     public Response toResponse(Throwable exception) {\n         Tr.warning(tc, \"OPENTRACING_UNHANDLED_JAXRS_EXCEPTION\", exception);\n         if (exception instanceof WebApplicationException) {\n             return Response.fromResponse(((WebApplicationException) exception).getResponse()).header(EXCEPTION_KEY, exception).build();\n         }\n         return Response.serverError().header(EXCEPTION_KEY, exception).build();\n     }\n+*/", "originalCommit": "4d9ec2c61601323cd10814f0c926702bf56eadb5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc5MzgwMg==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11896#discussion_r414793802", "body": "this class will need to be added to the bnd file under `-dsannotations`\r\n\r\nAlso, it should have the same annotation attributes that I mentioned in the 1.1 project.", "bodyText": "this class will need to be added to the bnd file under -dsannotations\nAlso, it should have the same annotation attributes that I mentioned in the 1.1 project.", "bodyHTML": "<p dir=\"auto\">this class will need to be added to the bnd file under <code>-dsannotations</code></p>\n<p dir=\"auto\">Also, it should have the same annotation attributes that I mentioned in the 1.1 project.</p>", "author": "andymc12", "createdAt": "2020-04-24T18:54:51Z", "path": "dev/com.ibm.ws.opentracing/src/com/ibm/ws/opentracing/OpentracingContainerFilter.java", "diffHunk": "@@ -40,12 +43,15 @@\n import io.opentracing.propagation.TextMap;\n import io.opentracing.tag.Tags;\n \n+import org.osgi.service.component.annotations.Component;\n+\n /**\n  * <p>Container filter implementation.</p>\n  *\n  * <p>This implementation is stateless. A single container filter is used by all applications.</p> *\n  */\n-public class OpentracingContainerFilter implements ContainerRequestFilter, ContainerResponseFilter, ExceptionMapper<Throwable> {\n+@Component", "originalCommit": "4d9ec2c61601323cd10814f0c926702bf56eadb5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc5MzkxNg==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11896#discussion_r414793916", "body": "delete", "bodyText": "delete", "bodyHTML": "<p dir=\"auto\">delete</p>", "author": "andymc12", "createdAt": "2020-04-24T18:55:01Z", "path": "dev/com.ibm.ws.opentracing/src/com/ibm/ws/opentracing/OpentracingContainerFilter.java", "diffHunk": "@@ -264,14 +270,21 @@ public void remove() {\n         }\n     }\n \n-    /** {@inheritDoc} */\n     @Override\n+    public Map<String,Object> onDefaultMappedException(Throwable t, int statusCode, ResourceInfo resourceInfo ) {\n+        Tr.warning(tc, \"OPENTRACING_UNHANDLED_JAXRS_EXCEPTION\", t);\n+        return Collections.singletonMap(EXCEPTION_KEY, t);\n+    }\n+\n+\n+    /** {@inheritDoc} */\n+/*    @Override\n     public Response toResponse(Throwable exception) {\n         Tr.warning(tc, \"OPENTRACING_UNHANDLED_JAXRS_EXCEPTION\", exception);\n         if (exception instanceof WebApplicationException) {\n             return Response.fromResponse(((WebApplicationException) exception).getResponse()).header(EXCEPTION_KEY, exception).build();\n         }\n         return Response.serverError().header(EXCEPTION_KEY, exception).build();\n     }\n-\n+*/", "originalCommit": "4d9ec2c61601323cd10814f0c926702bf56eadb5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "127b474dcdc110114583804863ffeaeb3c9951d6", "url": "https://github.com/OpenLiberty/open-liberty/commit/127b474dcdc110114583804863ffeaeb3c9951d6", "message": "Add jaxrs default exceptionmapper", "committedDate": "2020-04-24T23:56:51Z", "type": "forcePushed"}, {"oid": "efa4efec8b4054d14f279624bb02f35ae7f45d28", "url": "https://github.com/OpenLiberty/open-liberty/commit/efa4efec8b4054d14f279624bb02f35ae7f45d28", "message": "Add jaxrs default exceptionmapper", "committedDate": "2020-04-26T11:49:34Z", "type": "forcePushed"}, {"oid": "47d6cd0633c4cb569df27fa5c079c5a68853dd4d", "url": "https://github.com/OpenLiberty/open-liberty/commit/47d6cd0633c4cb569df27fa5c079c5a68853dd4d", "message": "Add jaxrs default exceptionmapper", "committedDate": "2020-04-26T12:04:52Z", "type": "forcePushed"}, {"oid": "668b1ebbad0183ef63a26caf5e187920fab75e86", "url": "https://github.com/OpenLiberty/open-liberty/commit/668b1ebbad0183ef63a26caf5e187920fab75e86", "message": "Add jaxrs default exceptionmapper", "committedDate": "2020-04-26T12:07:39Z", "type": "forcePushed"}, {"oid": "31119f5105c62f8c0e709432334013338035499b", "url": "https://github.com/OpenLiberty/open-liberty/commit/31119f5105c62f8c0e709432334013338035499b", "message": "Add jaxrs default exceptionmapper", "committedDate": "2020-04-26T12:18:32Z", "type": "forcePushed"}, {"oid": "7ef6d66f2a39605155ac155c2b892917ee816ed3", "url": "https://github.com/OpenLiberty/open-liberty/commit/7ef6d66f2a39605155ac155c2b892917ee816ed3", "message": "Add jaxrs default exceptionmapper", "committedDate": "2020-04-26T12:21:13Z", "type": "forcePushed"}, {"oid": "663c002458360e13822934413d1461f3bcdf4490", "url": "https://github.com/OpenLiberty/open-liberty/commit/663c002458360e13822934413d1461f3bcdf4490", "message": "Add jaxrs default exceptionmapper", "committedDate": "2020-04-26T12:24:11Z", "type": "forcePushed"}, {"oid": "0662a7025e5e083928c4a7ce2d10208f1a8a1efb", "url": "https://github.com/OpenLiberty/open-liberty/commit/0662a7025e5e083928c4a7ce2d10208f1a8a1efb", "message": "Add jaxrs default exceptionmapper", "committedDate": "2020-04-26T12:32:55Z", "type": "forcePushed"}, {"oid": "ffabf7d895633750002226d1789e1932afd9ddd0", "url": "https://github.com/OpenLiberty/open-liberty/commit/ffabf7d895633750002226d1789e1932afd9ddd0", "message": "Add jaxrs default exceptionmapper", "committedDate": "2020-04-26T12:45:53Z", "type": "forcePushed"}, {"oid": "fd52af3a2964aba97e9586180d31750c06638346", "url": "https://github.com/OpenLiberty/open-liberty/commit/fd52af3a2964aba97e9586180d31750c06638346", "message": "Add jaxrs default exceptionmapper", "committedDate": "2020-04-26T13:10:10Z", "type": "forcePushed"}, {"oid": "02c0cc1ceff1db33f454f7c417a728c5c9a017b7", "url": "https://github.com/OpenLiberty/open-liberty/commit/02c0cc1ceff1db33f454f7c417a728c5c9a017b7", "message": "Add jaxrs default exceptionmapper", "committedDate": "2020-04-27T21:43:33Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ5OTk3OQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11896#discussion_r417499979", "body": "If we want callback implementations to be able to return null to indicate that they don't need to add any headers, then there should be a null check here to only call `putAll` if the returned map is not null.", "bodyText": "If we want callback implementations to be able to return null to indicate that they don't need to add any headers, then there should be a null check here to only call putAll if the returned map is not null.", "bodyHTML": "<p dir=\"auto\">If we want callback implementations to be able to return null to indicate that they don't need to add any headers, then there should be a null check here to only call <code>putAll</code> if the returned map is not null.</p>", "author": "andymc12", "createdAt": "2020-04-29T17:48:57Z", "path": "dev/com.ibm.ws.jaxrs.defaultexceptionmapper/src/com/ibm/ws/jaxrs/defaultexceptionmapper/DefaultExceptionMapper.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package com.ibm.ws.jaxrs.defaultexceptionmapper;\n+\n+import com.ibm.websphere.ras.Tr;\n+import com.ibm.websphere.ras.TraceComponent;\n+import com.ibm.websphere.ras.annotation.TraceObjectField;\n+import com.ibm.websphere.ras.annotation.TraceOptions;\n+import com.ibm.ws.ras.instrument.annotation.InjectedFFDC;import java.lang.Override;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+import javax.ws.rs.WebApplicationException;\n+import javax.ws.rs.container.ResourceInfo;\n+import javax.ws.rs.core.Context;\n+import javax.ws.rs.core.Response;\n+import javax.ws.rs.ext.ExceptionMapper;\n+import javax.ws.rs.ext.Provider;\n+\n+@Provider \n+public class DefaultExceptionMapper implements ExceptionMapper<Throwable> {\n+   static final long serialVersionUID = 9083611544695926229L;\n+   \n+   @Context\n+   private ResourceInfo resourceInfo;\n+   \n+   private final List<DefaultExceptionMapperCallback> callbacks = new LinkedList<>();\n+   \n+   DefaultExceptionMapper(Collection<DefaultExceptionMapperCallback> callbacks) {\n+     this.callbacks.addAll(callbacks);\n+   }\n+   \n+   @Override\n+   public Response toResponse(Throwable t) {\n+     Response response;\n+     if (t instanceof WebApplicationException && ((WebApplicationException)t).getResponse() != null) {\n+       response = ((WebApplicationException)t).getResponse();\n+     } else {\n+       response = Response.serverError().build();\n+     } \n+     Map<String, Object> callbackHeaders = new HashMap<>();\n+     for (DefaultExceptionMapperCallback callback : this.callbacks)\n+       callbackHeaders.putAll(callback.onDefaultMappedException(t, response.getStatus(), this.resourceInfo)); ", "originalCommit": "02c0cc1ceff1db33f454f7c417a728c5c9a017b7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzUwMTM3OQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11896#discussion_r417501379", "body": "This should include `@TraceOptions` - take a look at some of the other JAX-RS package-info.java files for examples.", "bodyText": "This should include @TraceOptions - take a look at some of the other JAX-RS package-info.java files for examples.", "bodyHTML": "<p dir=\"auto\">This should include <code>@TraceOptions</code> - take a look at some of the other JAX-RS package-info.java files for examples.</p>", "author": "andymc12", "createdAt": "2020-04-29T17:51:13Z", "path": "dev/com.ibm.ws.jaxrs.defaultexceptionmapper/src/com/ibm/ws/jaxrs/defaultexceptionmapper/package-info.java", "diffHunk": "@@ -0,0 +1,15 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+/**\n+ * @version 1.0\n+ */\n+@org.osgi.annotation.versioning.Version(\"1.0\")", "originalCommit": "02c0cc1ceff1db33f454f7c417a728c5c9a017b7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "c5a14dabe09fff88b1ba8de1e27b0d77b826dc4e", "url": "https://github.com/OpenLiberty/open-liberty/commit/c5a14dabe09fff88b1ba8de1e27b0d77b826dc4e", "message": "Add jaxrs default exceptionmapper", "committedDate": "2020-04-29T19:13:58Z", "type": "forcePushed"}, {"oid": "76fdfe28a5ac7f80b2f6132f9096ceb87dd31b6f", "url": "https://github.com/OpenLiberty/open-liberty/commit/76fdfe28a5ac7f80b2f6132f9096ceb87dd31b6f", "message": "Add jaxrs default exceptionmapper", "committedDate": "2020-04-29T19:41:31Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzU2OTU5MA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11896#discussion_r417569590", "body": "Just nitpicking here.  The indentation of this file varies from 1-4 spaces.", "bodyText": "Just nitpicking here.  The indentation of this file varies from 1-4 spaces.", "bodyHTML": "<p dir=\"auto\">Just nitpicking here.  The indentation of this file varies from 1-4 spaces.</p>", "author": "fmhwong", "createdAt": "2020-04-29T19:49:04Z", "path": "dev/com.ibm.ws.jaxrs.defaultexceptionmapper/src/com/ibm/ws/jaxrs/defaultexceptionmapper/DefaultExceptionMapper.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package com.ibm.ws.jaxrs.defaultexceptionmapper;\n+\n+import com.ibm.websphere.ras.Tr;\n+import com.ibm.websphere.ras.TraceComponent;\n+import com.ibm.websphere.ras.annotation.TraceObjectField;\n+import com.ibm.websphere.ras.annotation.TraceOptions;\n+import com.ibm.ws.ras.instrument.annotation.InjectedFFDC;import java.lang.Override;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+import javax.ws.rs.WebApplicationException;\n+import javax.ws.rs.container.ResourceInfo;\n+import javax.ws.rs.core.Context;\n+import javax.ws.rs.core.Response;\n+import javax.ws.rs.ext.ExceptionMapper;\n+import javax.ws.rs.ext.Provider;\n+\n+@Provider \n+public class DefaultExceptionMapper implements ExceptionMapper<Throwable> {", "originalCommit": "76fdfe28a5ac7f80b2f6132f9096ceb87dd31b6f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzU3MDM2MA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11896#discussion_r417570360", "body": "2 import statements in one line", "bodyText": "2 import statements in one line", "bodyHTML": "<p dir=\"auto\">2 import statements in one line</p>", "author": "fmhwong", "createdAt": "2020-04-29T19:50:25Z", "path": "dev/com.ibm.ws.jaxrs.defaultexceptionmapper/src/com/ibm/ws/jaxrs/defaultexceptionmapper/DefaultExceptionMapper.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package com.ibm.ws.jaxrs.defaultexceptionmapper;\n+\n+import com.ibm.websphere.ras.Tr;\n+import com.ibm.websphere.ras.TraceComponent;\n+import com.ibm.websphere.ras.annotation.TraceObjectField;\n+import com.ibm.websphere.ras.annotation.TraceOptions;\n+import com.ibm.ws.ras.instrument.annotation.InjectedFFDC;import java.lang.Override;", "originalCommit": "76fdfe28a5ac7f80b2f6132f9096ceb87dd31b6f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "71ff46f082db9b565a5bc76db47d0649d0750f3c", "url": "https://github.com/OpenLiberty/open-liberty/commit/71ff46f082db9b565a5bc76db47d0649d0750f3c", "message": "Add jaxrs default exceptionmapper", "committedDate": "2020-05-01T20:36:42Z", "type": "commit"}, {"oid": "71ff46f082db9b565a5bc76db47d0649d0750f3c", "url": "https://github.com/OpenLiberty/open-liberty/commit/71ff46f082db9b565a5bc76db47d0649d0750f3c", "message": "Add jaxrs default exceptionmapper", "committedDate": "2020-05-01T20:36:42Z", "type": "forcePushed"}]}