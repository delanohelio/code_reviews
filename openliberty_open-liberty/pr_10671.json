{"pr_number": 10671, "pr_title": "Fix for Issue #10670: Allow JAX-RS Application.getSingletons() to handle CDI proxy classes", "pr_author": "jkoehler22", "pr_createdAt": "2020-01-31T14:50:24Z", "pr_url": "https://github.com/OpenLiberty/open-liberty/pull/10671", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzU5MjQ3MA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/10671#discussion_r373592470", "body": "```suggestion\r\nimport static org.junit.Assert.assertEquals;\r\n```\r\n\r\nThis should make a better failure message if the verifySuccess method fails.", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            import static org.junit.Assert.assertTrue;\n          \n          \n            \n            import static org.junit.Assert.assertEquals;\n          \n      \n    \n    \n  \n\nThis should make a better failure message if the verifySuccess method fails.", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"><span class=\"pl-k\">import static</span> <span class=\"pl-smi\">org.junit.Assert.<span class=\"x x-first x-last\">assertTrue</span></span>;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\"><span class=\"pl-k\">import static</span> <span class=\"pl-smi\">org.junit.Assert.<span class=\"x x-first x-last\">assertEquals</span></span>;</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\">This should make a better failure message if the verifySuccess method fails.</p>", "author": "andymc12", "createdAt": "2020-01-31T17:21:11Z", "path": "dev/com.ibm.ws.jaxrs.2.0.cdi.1.2_fat/fat/src/com/ibm/ws/jaxrs20/cdi12/fat/test/ContextandCDI12Test.java", "diffHunk": "@@ -0,0 +1,205 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.jaxrs20.cdi12.fat.test;\n+\n+import static org.junit.Assert.assertTrue;", "originalCommit": "c7675e56c8f3711d1b3d5874a69626d0adc3dc40", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzU5NzYxNg==", "url": "https://github.com/OpenLiberty/open-liberty/pull/10671#discussion_r373597616", "body": "```suggestion\r\n        assertEquals(\"Expect to get CDI init test message: \" + message, messageSize, messages.size());\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertTrue(\"Expect to get CDI test message: \" + message, messages.size() == messageSize);\n          \n          \n            \n                    assertEquals(\"Expect to get CDI init test message: \" + message, messageSize, messages.size());", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"x x-first x-last\">assertTrue</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Expect to get CDI test message: <span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> message, messages<span class=\"pl-k\">.</span>size()<span class=\"x x-first\"> </span><span class=\"pl-k x\">==</span><span class=\"x x-last\"> messageSize</span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"x x-first x-last\">assertEquals</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Expect to get CDI <span class=\"x x-first x-last\">init </span>test message: <span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> message, <span class=\"x x-first x-last\">messageSize, </span>messages<span class=\"pl-k\">.</span>size());</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "andymc12", "createdAt": "2020-01-31T17:33:48Z", "path": "dev/com.ibm.ws.jaxrs.2.0.cdi.1.2_fat/fat/src/com/ibm/ws/jaxrs20/cdi12/fat/test/ContextandCDI12Test.java", "diffHunk": "@@ -0,0 +1,205 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.jaxrs20.cdi12.fat.test;\n+\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.List;\n+\n+import org.jboss.shrinkwrap.api.spec.WebArchive;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import com.ibm.websphere.simplicity.ShrinkHelper;\n+\n+import componenttest.annotation.Server;\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.topology.impl.LibertyServer;\n+\n+@RunWith(FATRunner.class)\n+public class ContextandCDI12Test extends AbstractTest {\n+\n+    public static final String[] ignore_messages =  new String[] { \"CWWKW1001W\" , \"CWWKW1002W\" , \"CWWKE1102W\", \"CWWKE1106W\" , \"CWWKE1107W\" };\n+\n+    @Server(\"com.ibm.ws.jaxrs20.cdi12.fat.contextandCDI\")\n+    public static LibertyServer server;\n+\n+    @BeforeClass\n+    public static void setUp() throws Exception {\n+        appname = \"contextandCDI\";\n+        WebArchive app = ShrinkHelper.defaultDropinApp(server, appname, \"com.ibm.ws.jaxrs20.cdi12.fat.contextandCDI\");\n+//        server.startServer();\n+    }\n+\n+    @AfterClass\n+    public static void tearDown() throws Exception {\n+        server.stopServer(ignore_messages);\n+    }\n+\n+    @Before\n+    public void preTest() {\n+        serverRef = server;\n+    }\n+\n+    @After\n+    public void afterTest() {\n+        serverRef = null;\n+    }\n+    \n+    \n+    public void verifySuccess(String filterName, int messageSize) throws Exception {\n+        String message = filterName + \"#init: servletContext.getServletContextName contextandCDI\";        \n+        List<String> messages = serverRef.findStringsInLogs(message);\n+        assertTrue(\"Expect to get CDI test message: \" + message, messages.size() == messageSize);", "originalCommit": "c7675e56c8f3711d1b3d5874a69626d0adc3dc40", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzU5Nzg2Ng==", "url": "https://github.com/OpenLiberty/open-liberty/pull/10671#discussion_r373597866", "body": "```suggestion\r\n        assertEquals(\"Expect to get CDI request test message: \" + message, messageSize, messages.size()); \r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertTrue(\"Expect to get CDI test message: \" + message, messages.size() == messageSize); \n          \n          \n            \n                    assertEquals(\"Expect to get CDI request test message: \" + message, messageSize, messages.size());", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"x x-first x-last\">assertTrue</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Expect to get CDI test message: <span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> message, messages<span class=\"pl-k\">.</span>size()<span class=\"x x-first\"> </span><span class=\"pl-k x\">==</span><span class=\"x x-last\"> messageSize</span>); </td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"x x-first x-last\">assertEquals</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Expect to get CDI <span class=\"x x-first x-last\">request </span>test message: <span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> message, <span class=\"x x-first x-last\">messageSize, </span>messages<span class=\"pl-k\">.</span>size()); </td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "andymc12", "createdAt": "2020-01-31T17:34:23Z", "path": "dev/com.ibm.ws.jaxrs.2.0.cdi.1.2_fat/fat/src/com/ibm/ws/jaxrs20/cdi12/fat/test/ContextandCDI12Test.java", "diffHunk": "@@ -0,0 +1,205 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.jaxrs20.cdi12.fat.test;\n+\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.List;\n+\n+import org.jboss.shrinkwrap.api.spec.WebArchive;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import com.ibm.websphere.simplicity.ShrinkHelper;\n+\n+import componenttest.annotation.Server;\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.topology.impl.LibertyServer;\n+\n+@RunWith(FATRunner.class)\n+public class ContextandCDI12Test extends AbstractTest {\n+\n+    public static final String[] ignore_messages =  new String[] { \"CWWKW1001W\" , \"CWWKW1002W\" , \"CWWKE1102W\", \"CWWKE1106W\" , \"CWWKE1107W\" };\n+\n+    @Server(\"com.ibm.ws.jaxrs20.cdi12.fat.contextandCDI\")\n+    public static LibertyServer server;\n+\n+    @BeforeClass\n+    public static void setUp() throws Exception {\n+        appname = \"contextandCDI\";\n+        WebArchive app = ShrinkHelper.defaultDropinApp(server, appname, \"com.ibm.ws.jaxrs20.cdi12.fat.contextandCDI\");\n+//        server.startServer();\n+    }\n+\n+    @AfterClass\n+    public static void tearDown() throws Exception {\n+        server.stopServer(ignore_messages);\n+    }\n+\n+    @Before\n+    public void preTest() {\n+        serverRef = server;\n+    }\n+\n+    @After\n+    public void afterTest() {\n+        serverRef = null;\n+    }\n+    \n+    \n+    public void verifySuccess(String filterName, int messageSize) throws Exception {\n+        String message = filterName + \"#init: servletContext.getServletContextName contextandCDI\";        \n+        List<String> messages = serverRef.findStringsInLogs(message);\n+        assertTrue(\"Expect to get CDI test message: \" + message, messages.size() == messageSize);\n+        message = filterName + \"#filter#requestContext: servletContext.getServletContextName contextandCDI\";        \n+        messages = serverRef.findStringsInLogs(message);\n+        assertTrue(\"Expect to get CDI test message: \" + message, messages.size() == messageSize); ", "originalCommit": "c7675e56c8f3711d1b3d5874a69626d0adc3dc40", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzU5OTUyNw==", "url": "https://github.com/OpenLiberty/open-liberty/pull/10671#discussion_r373599527", "body": "These should be put in the `@Before` (to start the server) and `@After` (to stop it) methods - both methods might need to throw Exception.  Once in those methods, it will apply to all tests, so you can remove these lines from each test method.", "bodyText": "These should be put in the @Before (to start the server) and @After (to stop it) methods - both methods might need to throw Exception.  Once in those methods, it will apply to all tests, so you can remove these lines from each test method.", "bodyHTML": "<p dir=\"auto\">These should be put in the <code>@Before</code> (to start the server) and <code>@After</code> (to stop it) methods - both methods might need to throw Exception.  Once in those methods, it will apply to all tests, so you can remove these lines from each test method.</p>", "author": "andymc12", "createdAt": "2020-01-31T17:38:30Z", "path": "dev/com.ibm.ws.jaxrs.2.0.cdi.1.2_fat/fat/src/com/ibm/ws/jaxrs20/cdi12/fat/test/ContextandCDI12Test.java", "diffHunk": "@@ -0,0 +1,205 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.jaxrs20.cdi12.fat.test;\n+\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.List;\n+\n+import org.jboss.shrinkwrap.api.spec.WebArchive;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import com.ibm.websphere.simplicity.ShrinkHelper;\n+\n+import componenttest.annotation.Server;\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.topology.impl.LibertyServer;\n+\n+@RunWith(FATRunner.class)\n+public class ContextandCDI12Test extends AbstractTest {\n+\n+    public static final String[] ignore_messages =  new String[] { \"CWWKW1001W\" , \"CWWKW1002W\" , \"CWWKE1102W\", \"CWWKE1106W\" , \"CWWKE1107W\" };\n+\n+    @Server(\"com.ibm.ws.jaxrs20.cdi12.fat.contextandCDI\")\n+    public static LibertyServer server;\n+\n+    @BeforeClass\n+    public static void setUp() throws Exception {\n+        appname = \"contextandCDI\";\n+        WebArchive app = ShrinkHelper.defaultDropinApp(server, appname, \"com.ibm.ws.jaxrs20.cdi12.fat.contextandCDI\");\n+//        server.startServer();\n+    }\n+\n+    @AfterClass\n+    public static void tearDown() throws Exception {\n+        server.stopServer(ignore_messages);\n+    }\n+\n+    @Before\n+    public void preTest() {\n+        serverRef = server;\n+    }\n+\n+    @After\n+    public void afterTest() {\n+        serverRef = null;\n+    }\n+    \n+    \n+    public void verifySuccess(String filterName, int messageSize) throws Exception {\n+        String message = filterName + \"#init: servletContext.getServletContextName contextandCDI\";        \n+        List<String> messages = serverRef.findStringsInLogs(message);\n+        assertTrue(\"Expect to get CDI test message: \" + message, messages.size() == messageSize);\n+        message = filterName + \"#filter#requestContext: servletContext.getServletContextName contextandCDI\";        \n+        messages = serverRef.findStringsInLogs(message);\n+        assertTrue(\"Expect to get CDI test message: \" + message, messages.size() == messageSize); \n+    }\n+\n+    @Test\n+    public void testContextandCDIResource1() throws Exception {\n+        if (server.isStarted()) {\n+            server.stopServer(ignore_messages); \n+        }        \n+        server.startServer(true);        ", "originalCommit": "c7675e56c8f3711d1b3d5874a69626d0adc3dc40", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzYwMTY0Ng==", "url": "https://github.com/OpenLiberty/open-liberty/pull/10671#discussion_r373601646", "body": "Just a thought, but maybe this method could be put in some utils class so that we only need it in one place - then all of the `getSingletons()` methods that need to invoke it could just call `CDIUtils.getBean(<resourceClass>);`. What do you think?", "bodyText": "Just a thought, but maybe this method could be put in some utils class so that we only need it in one place - then all of the getSingletons() methods that need to invoke it could just call CDIUtils.getBean(<resourceClass>);. What do you think?", "bodyHTML": "<p dir=\"auto\">Just a thought, but maybe this method could be put in some utils class so that we only need it in one place - then all of the <code>getSingletons()</code> methods that need to invoke it could just call <code>CDIUtils.getBean(&lt;resourceClass&gt;);</code>. What do you think?</p>", "author": "andymc12", "createdAt": "2020-01-31T17:43:16Z", "path": "dev/com.ibm.ws.jaxrs.2.0.cdi.1.2_fat/test-applications/contextandCDI/src/com/ibm/ws/jaxrs20/cdi12/fat/contextandCDI/CDIApplication22.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.jaxrs20.cdi12.fat.contextandCDI;\n+\n+import java.lang.annotation.Annotation;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.LinkedHashSet;\n+import java.util.Set;\n+\n+import javax.enterprise.inject.Instance;\n+import javax.enterprise.inject.spi.CDI;\n+import javax.ws.rs.ApplicationPath;\n+import javax.ws.rs.core.Application;\n+import javax.enterprise.context.Dependent;\n+\n+@Dependent\n+@ApplicationPath(\"contextandCDI22\")\n+public class CDIApplication22 extends Application {\n+\n+    @Override\n+    public Set<Class<?>> getClasses() {\n+\n+        LinkedHashSet<Class<?>> classes = new LinkedHashSet<>();\n+        classes.add(CDIFilter.class);\n+        return classes;\n+        \n+    }\n+    \n+    @Override\n+    public Set<Object> getSingletons() {\n+       \n+        LinkedHashSet<Object> classes = new LinkedHashSet<>();\n+        TestResource resource = getBean(TestResource.class);\n+//        TestResource resource = new TestResource();\n+        classes.add(resource);\n+        return classes;\n+    }\n+    \n+    public <E> E getBean(Class<E> clazz, Annotation... qualifiers) {", "originalCommit": "c7675e56c8f3711d1b3d5874a69626d0adc3dc40", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzYwMjU2Mw==", "url": "https://github.com/OpenLiberty/open-liberty/pull/10671#discussion_r373602563", "body": "Just a thought here... I think it is also possible for CDI to inject the ServletContext (using `@Inject ServletContext servletContext2;` - maybe we could include this in the test too?  That would ensure that ServletContext injection works regardless of who injects it.", "bodyText": "Just a thought here... I think it is also possible for CDI to inject the ServletContext (using @Inject ServletContext servletContext2; - maybe we could include this in the test too?  That would ensure that ServletContext injection works regardless of who injects it.", "bodyHTML": "<p dir=\"auto\">Just a thought here... I think it is also possible for CDI to inject the ServletContext (using <code>@Inject ServletContext servletContext2;</code> - maybe we could include this in the test too?  That would ensure that ServletContext injection works regardless of who injects it.</p>", "author": "andymc12", "createdAt": "2020-01-31T17:45:25Z", "path": "dev/com.ibm.ws.jaxrs.2.0.cdi.1.2_fat/test-applications/contextandCDI/src/com/ibm/ws/jaxrs20/cdi12/fat/contextandCDI/CDIFilter.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.jaxrs20.cdi12.fat.contextandCDI;\n+\n+import java.io.IOException;\n+\n+import javax.annotation.PostConstruct;\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+import javax.servlet.ServletContext;\n+import javax.ws.rs.container.ContainerRequestContext;\n+import javax.ws.rs.container.ContainerRequestFilter;\n+import javax.ws.rs.container.ContainerResponseContext;\n+import javax.ws.rs.container.ContainerResponseFilter;\n+import javax.ws.rs.core.Context;\n+\n+@ApplicationScoped\n+public class CDIFilter implements ContainerRequestFilter, ContainerResponseFilter {\n+\n+    @Context ServletContext servletContext;", "originalCommit": "c7675e56c8f3711d1b3d5874a69626d0adc3dc40", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzYwMzczNw==", "url": "https://github.com/OpenLiberty/open-liberty/pull/10671#discussion_r373603737", "body": "It might be good to test ServletContext injection in the resource classes too.", "bodyText": "It might be good to test ServletContext injection in the resource classes too.", "bodyHTML": "<p dir=\"auto\">It might be good to test ServletContext injection in the resource classes too.</p>", "author": "andymc12", "createdAt": "2020-01-31T17:48:08Z", "path": "dev/com.ibm.ws.jaxrs.2.0.cdi.1.2_fat/test-applications/contextandCDI/src/com/ibm/ws/jaxrs20/cdi12/fat/contextandCDI/TestResource.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.jaxrs20.cdi12.fat.contextandCDI;\n+\n+\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.core.Response;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+\n+@ApplicationScoped\n+@Path(\"resource\")\n+public class TestResource {\n+", "originalCommit": "c7675e56c8f3711d1b3d5874a69626d0adc3dc40", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzYwNDU1NA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/10671#discussion_r373604554", "body": "It seems weird to be importing an \"internal\" package.  Please make sure that the CDI team is ok with us using this class - possibly a better approach would be to put CDI Utils in a different (more public) package.", "bodyText": "It seems weird to be importing an \"internal\" package.  Please make sure that the CDI team is ok with us using this class - possibly a better approach would be to put CDI Utils in a different (more public) package.", "bodyHTML": "<p dir=\"auto\">It seems weird to be importing an \"internal\" package.  Please make sure that the CDI team is ok with us using this class - possibly a better approach would be to put CDI Utils in a different (more public) package.</p>", "author": "andymc12", "createdAt": "2020-01-31T17:50:08Z", "path": "dev/com.ibm.ws.jaxrs.2.0.cdi/src/com/ibm/ws/jaxrs20/cdi/component/JaxRsFactoryImplicitBeanCDICustomizer.java", "diffHunk": "@@ -50,6 +50,7 @@\n import com.ibm.websphere.ras.TraceComponent;\n import com.ibm.websphere.ras.annotation.Trivial;\n import com.ibm.ws.cdi.CDIService;\n+import com.ibm.ws.cdi.internal.interfaces.CDIUtils;", "originalCommit": "c7675e56c8f3711d1b3d5874a69626d0adc3dc40", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE0ODA1Ng==", "url": "https://github.com/OpenLiberty/open-liberty/pull/10671#discussion_r374148056", "bodyText": "Ben's new PR #10690", "author": "jkoehler22", "createdAt": "2020-02-03T14:56:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzYwNDU1NA=="}], "type": "inlineReview"}, {"oid": "c4aceea6fd4bfa5f3b306873460bea44e38d62f9", "url": "https://github.com/OpenLiberty/open-liberty/commit/c4aceea6fd4bfa5f3b306873460bea44e38d62f9", "message": "Issue #10670: Allow JAX-RS Application.getSingletons() to handle CDI proxy classes Andy's Comments-2", "committedDate": "2020-02-04T14:06:57Z", "type": "forcePushed"}, {"oid": "3256e7426133e6a24027bc8bac5497cad5c09232", "url": "https://github.com/OpenLiberty/open-liberty/commit/3256e7426133e6a24027bc8bac5497cad5c09232", "message": "Issue #10670: Allow JAX-RS Application.getSingletons() to handle CDI proxy classes", "committedDate": "2020-02-04T20:38:02Z", "type": "commit"}, {"oid": "7f19d6aa024983f7cc037f3324191c61f4e93c9b", "url": "https://github.com/OpenLiberty/open-liberty/commit/7f19d6aa024983f7cc037f3324191c61f4e93c9b", "message": "Issue #10670: Allow JAX-RS Application.getSingletons() to handle CDI proxy classes Andy's Comments", "committedDate": "2020-02-04T20:38:03Z", "type": "commit"}, {"oid": "12f0315f60abe289988e5b5bfcb6a9008b59550c", "url": "https://github.com/OpenLiberty/open-liberty/commit/12f0315f60abe289988e5b5bfcb6a9008b59550c", "message": "Issue #10670: Allow JAX-RS Application.getSingletons() to handle CDI proxy classes Andy's Comments-2", "committedDate": "2020-02-04T20:38:03Z", "type": "commit"}, {"oid": "41bbc4a1a135e470c48f2b62d9dd7c9f81fa1d02", "url": "https://github.com/OpenLiberty/open-liberty/commit/41bbc4a1a135e470c48f2b62d9dd7c9f81fa1d02", "message": "Issue #10670: Allow JAX-RS Application.getSingletons() to handle CDI proxy classes Andy's Comments-3", "committedDate": "2020-02-04T20:38:03Z", "type": "commit"}, {"oid": "41bbc4a1a135e470c48f2b62d9dd7c9f81fa1d02", "url": "https://github.com/OpenLiberty/open-liberty/commit/41bbc4a1a135e470c48f2b62d9dd7c9f81fa1d02", "message": "Issue #10670: Allow JAX-RS Application.getSingletons() to handle CDI proxy classes Andy's Comments-3", "committedDate": "2020-02-04T20:38:03Z", "type": "forcePushed"}, {"oid": "21b99a63ff73321849d16e80bbf74e63700788d6", "url": "https://github.com/OpenLiberty/open-liberty/commit/21b99a63ff73321849d16e80bbf74e63700788d6", "message": "Issue #10670: Allow JAX-RS Application.getSingletons() to handle CDI proxy classes Andy's Comments-3", "committedDate": "2020-02-04T20:42:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDkzNjc3MA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/10671#discussion_r374936770", "body": "```suggestion\r\n@SessionScoped\r\n@ApplicationPath(\"contextandCDI32\")\r\n```\r\n\r\nDoes this work?  I would've expected that white space would be required between two annotations...", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            @SessionScoped@ApplicationPath(\"contextandCDI32\")\n          \n          \n            \n            @SessionScoped\n          \n          \n            \n            @ApplicationPath(\"contextandCDI32\")\n          \n      \n    \n    \n  \n\nDoes this work?  I would've expected that white space would be required between two annotations...", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"><span class=\"pl-k\">@SessionScoped<span class=\"x x-first\">@ApplicationPath</span></span><span class=\"x\">(</span><span class=\"pl-s\"><span class=\"pl-pds x\">\"</span><span class=\"x\">contextandCDI32</span><span class=\"pl-pds x\">\"</span></span><span class=\"x x-last\">)</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\"><span class=\"pl-k\">@SessionScoped</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\"><span class=\"pl-k\">@ApplicationPath</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>contextandCDI32<span class=\"pl-pds\">\"</span></span>)</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\">Does this work?  I would've expected that white space would be required between two annotations...</p>", "author": "andymc12", "createdAt": "2020-02-04T21:37:05Z", "path": "dev/com.ibm.ws.jaxrs.2.0.cdi.1.2_fat/test-applications/contextandCDI/src/com/ibm/ws/jaxrs20/cdi12/fat/contextandCDI/CDIApplication32.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.jaxrs20.cdi12.fat.contextandCDI;\n+\n+import java.lang.annotation.Annotation;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.LinkedHashSet;\n+import java.util.Set;\n+\n+import javax.enterprise.inject.Instance;\n+import javax.enterprise.inject.spi.CDI;\n+import javax.ws.rs.ApplicationPath;\n+import javax.ws.rs.core.Application;\n+import javax.enterprise.context.SessionScoped;\n+import java.io.Serializable;\n+\n+@SessionScoped@ApplicationPath(\"contextandCDI32\")", "originalCommit": "21b99a63ff73321849d16e80bbf74e63700788d6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "afb610eee35ea8d1bbd494eff32530c4891237c6", "url": "https://github.com/OpenLiberty/open-liberty/commit/afb610eee35ea8d1bbd494eff32530c4891237c6", "message": "Issue #10670: Allow JAX-RS Application.getSingletons() to handle CDI proxy classes Andy's Comments-4", "committedDate": "2020-02-04T22:08:10Z", "type": "commit"}]}