{"pr_number": 12711, "pr_title": "Address JSON log handling tech debt", "pr_author": "jennifer-c", "pr_createdAt": "2020-06-19T14:47:43Z", "pr_url": "https://github.com/OpenLiberty/open-liberty/pull/12711", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc4OTkwNw==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12711#discussion_r449789907", "body": "picky, but I'd suggest ordering these in some logical way.  also, startGCJson I believe only applies to logstashCollector, so should perhaps follow the naming convention you have for the other related logstashCollector strings.", "bodyText": "picky, but I'd suggest ordering these in some logical way.  also, startGCJson I believe only applies to logstashCollector, so should perhaps follow the naming convention you have for the other related logstashCollector strings.", "bodyHTML": "<p dir=\"auto\">picky, but I'd suggest ordering these in some logical way.  also, startGCJson I believe only applies to logstashCollector, so should perhaps follow the naming convention you have for the other related logstashCollector strings.</p>", "author": "donbourne", "createdAt": "2020-07-04T17:17:00Z", "path": "dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonHelpers.java", "diffHunk": "@@ -30,30 +30,24 @@\n  */\n public class CollectorJsonHelpers {\n \n-    private static String startMessageJson = null;\n     private static String startMessageJsonFields = null;\n+    private static String startMessageLogstashCollector = null;\n     private static String startAccessLogLogstashCollector = null;\n-    private static String startTraceJson = null;\n     private static String startTraceJsonFields = null;\n-    private static String startFFDCJson = null;\n+    private static String startTraceLogstashCollector = null;\n     private static String startFFDCJsonFields = null;\n-    private static String startAccessLogJson = null;\n+    private static String startFFDCLogstashCollector = null;\n     private static String startAccessLogJsonFields = null;\n     private static String startGCJson = null;", "originalCommit": "6a31f77374c8d39b7a1f317ac6090cf50199f081", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f69422689c1bb4f0ffceac36385f642fc5415c96", "changed_code": [{"header": "diff --git a/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonHelpers.java b/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonHelpers.java\nindex fbe676d0cf..81f4e43d49 100644\n--- a/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonHelpers.java\n+++ b/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonHelpers.java\n", "chunk": "@@ -30,24 +30,32 @@ import com.ibm.ws.logging.data.Pair;\n  */\n public class CollectorJsonHelpers {\n \n+    private static String startMessageJson = null;\n     private static String startMessageJsonFields = null;\n     private static String startMessageLogstashCollector = null;\n     private static String startAccessLogLogstashCollector = null;\n+    private static String startTraceJson = null;\n     private static String startTraceJsonFields = null;\n     private static String startTraceLogstashCollector = null;\n+    private static String startFFDCJson = null;\n     private static String startFFDCJsonFields = null;\n-    private static String startFFDCLogstashCollector = null;\n+    private static String startAccessLogJson = null;\n     private static String startAccessLogJsonFields = null;\n     private static String startGCJson = null;\n+    private static String startAuditJson = null;\n     private static String startAuditJsonFields = null;\n-    private static String startAuditLogstashCollector = null;\n     public static String hostName = null;\n     public static String wlpUserDir = null;\n     public static String serverName = null;\n     private static final String TYPE_FIELD_KEY = \"\\\"type\";\n     private static final String TYPE_FIELD_PREPPEND = \"\\\":\\\"\";\n     private static final String TYPE_FIELD_APPEND = \"\\\"\";\n+    private static final String MESSAGE_JSON_TYPE_FIELD = TYPE_FIELD_PREPPEND + CollectorConstants.MESSAGES_LOG_EVENT_TYPE + TYPE_FIELD_APPEND;\n+    private static final String TRACE_JSON_TYPE_FIELD = TYPE_FIELD_PREPPEND + CollectorConstants.TRACE_LOG_EVENT_TYPE + TYPE_FIELD_APPEND;\n+    private static final String ACCESS_JSON_TYPE_FIELD = TYPE_FIELD_PREPPEND + CollectorConstants.ACCESS_LOG_EVENT_TYPE + TYPE_FIELD_APPEND;\n+    private static final String FFDC_JSON_TYPE_FIELD = TYPE_FIELD_PREPPEND + CollectorConstants.FFDC_EVENT_TYPE + TYPE_FIELD_APPEND;\n     private static final String GC_JSON_TYPE_FIELD = TYPE_FIELD_PREPPEND + CollectorConstants.GC_EVENT_TYPE + TYPE_FIELD_APPEND;\n+    private static final String AUDIT_JSON_TYPE_FIELD = TYPE_FIELD_PREPPEND + CollectorConstants.AUDIT_LOG_EVENT_TYPE + TYPE_FIELD_APPEND;\n     private static String unchangingFieldsJson = null;\n     public final static String TRUE_BOOL = \"true\";\n     public final static String FALSE_BOOL = \"false\";\n", "next_change": {"commit": "8a1ba1e3f49d32502fb40b0617e994291f44d974", "changed_code": [{"header": "diff --git a/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonHelpers.java b/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonHelpers.java\nindex 81f4e43d49..fbe676d0cf 100644\n--- a/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonHelpers.java\n+++ b/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonHelpers.java\n", "chunk": "@@ -30,32 +30,24 @@ import com.ibm.ws.logging.data.Pair;\n  */\n public class CollectorJsonHelpers {\n \n-    private static String startMessageJson = null;\n     private static String startMessageJsonFields = null;\n     private static String startMessageLogstashCollector = null;\n     private static String startAccessLogLogstashCollector = null;\n-    private static String startTraceJson = null;\n     private static String startTraceJsonFields = null;\n     private static String startTraceLogstashCollector = null;\n-    private static String startFFDCJson = null;\n     private static String startFFDCJsonFields = null;\n-    private static String startAccessLogJson = null;\n+    private static String startFFDCLogstashCollector = null;\n     private static String startAccessLogJsonFields = null;\n     private static String startGCJson = null;\n-    private static String startAuditJson = null;\n     private static String startAuditJsonFields = null;\n+    private static String startAuditLogstashCollector = null;\n     public static String hostName = null;\n     public static String wlpUserDir = null;\n     public static String serverName = null;\n     private static final String TYPE_FIELD_KEY = \"\\\"type\";\n     private static final String TYPE_FIELD_PREPPEND = \"\\\":\\\"\";\n     private static final String TYPE_FIELD_APPEND = \"\\\"\";\n-    private static final String MESSAGE_JSON_TYPE_FIELD = TYPE_FIELD_PREPPEND + CollectorConstants.MESSAGES_LOG_EVENT_TYPE + TYPE_FIELD_APPEND;\n-    private static final String TRACE_JSON_TYPE_FIELD = TYPE_FIELD_PREPPEND + CollectorConstants.TRACE_LOG_EVENT_TYPE + TYPE_FIELD_APPEND;\n-    private static final String ACCESS_JSON_TYPE_FIELD = TYPE_FIELD_PREPPEND + CollectorConstants.ACCESS_LOG_EVENT_TYPE + TYPE_FIELD_APPEND;\n-    private static final String FFDC_JSON_TYPE_FIELD = TYPE_FIELD_PREPPEND + CollectorConstants.FFDC_EVENT_TYPE + TYPE_FIELD_APPEND;\n     private static final String GC_JSON_TYPE_FIELD = TYPE_FIELD_PREPPEND + CollectorConstants.GC_EVENT_TYPE + TYPE_FIELD_APPEND;\n-    private static final String AUDIT_JSON_TYPE_FIELD = TYPE_FIELD_PREPPEND + CollectorConstants.AUDIT_LOG_EVENT_TYPE + TYPE_FIELD_APPEND;\n     private static String unchangingFieldsJson = null;\n     public final static String TRUE_BOOL = \"true\";\n     public final static String FALSE_BOOL = \"false\";\n", "next_change": {"commit": "e29b0414e8de810ab3b6e09d715af382240f29d1", "changed_code": [{"header": "diff --git a/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonHelpers.java b/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonHelpers.java\nindex fbe676d0cf..9d579edaea 100644\n--- a/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonHelpers.java\n+++ b/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonHelpers.java\n", "chunk": "@@ -31,24 +31,26 @@ import com.ibm.ws.logging.data.Pair;\n public class CollectorJsonHelpers {\n \n     private static String startMessageJsonFields = null;\n+    private static String startAccessLogJsonFields = null;\n+    private static String startTraceJsonFields = null;\n+    private static String startFFDCJsonFields = null;\n+    private static String startAuditJsonFields = null;\n+\n     private static String startMessageLogstashCollector = null;\n     private static String startAccessLogLogstashCollector = null;\n-    private static String startTraceJsonFields = null;\n     private static String startTraceLogstashCollector = null;\n-    private static String startFFDCJsonFields = null;\n     private static String startFFDCLogstashCollector = null;\n-    private static String startAccessLogJsonFields = null;\n-    private static String startGCJson = null;\n-    private static String startAuditJsonFields = null;\n     private static String startAuditLogstashCollector = null;\n+    private static String startGCLogstashCollector = null;\n+\n     public static String hostName = null;\n     public static String wlpUserDir = null;\n     public static String serverName = null;\n+    private static String unchangingFieldsJson = null;\n     private static final String TYPE_FIELD_KEY = \"\\\"type\";\n     private static final String TYPE_FIELD_PREPPEND = \"\\\":\\\"\";\n     private static final String TYPE_FIELD_APPEND = \"\\\"\";\n     private static final String GC_JSON_TYPE_FIELD = TYPE_FIELD_PREPPEND + CollectorConstants.GC_EVENT_TYPE + TYPE_FIELD_APPEND;\n-    private static String unchangingFieldsJson = null;\n     public final static String TRUE_BOOL = \"true\";\n     public final static String FALSE_BOOL = \"false\";\n     public final static String INT_SUFFIX = \"_int\";\n", "next_change": {"commit": "3f8a030a85ef2975bd13eae0880ac56477f54d2c", "changed_code": [{"header": "diff --git a/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonHelpers.java b/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonHelpers.java\nindex 9d579edaea..7424fb3fd9 100644\n--- a/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonHelpers.java\n+++ b/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonHelpers.java\n", "chunk": "@@ -46,11 +46,6 @@ public class CollectorJsonHelpers {\n     public static String hostName = null;\n     public static String wlpUserDir = null;\n     public static String serverName = null;\n-    private static String unchangingFieldsJson = null;\n-    private static final String TYPE_FIELD_KEY = \"\\\"type\";\n-    private static final String TYPE_FIELD_PREPPEND = \"\\\":\\\"\";\n-    private static final String TYPE_FIELD_APPEND = \"\\\"\";\n-    private static final String GC_JSON_TYPE_FIELD = TYPE_FIELD_PREPPEND + CollectorConstants.GC_EVENT_TYPE + TYPE_FIELD_APPEND;\n     public final static String TRUE_BOOL = \"true\";\n     public final static String FALSE_BOOL = \"false\";\n     public final static String INT_SUFFIX = \"_int\";\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc5MDAwMg==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12711#discussion_r449790002", "body": "should include GC in this consistency sweep up.", "bodyText": "should include GC in this consistency sweep up.", "bodyHTML": "<p dir=\"auto\">should include GC in this consistency sweep up.</p>", "author": "donbourne", "createdAt": "2020-07-04T17:18:48Z", "path": "dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonHelpers.java", "diffHunk": "@@ -30,30 +30,24 @@\n  */\n public class CollectorJsonHelpers {\n \n-    private static String startMessageJson = null;\n     private static String startMessageJsonFields = null;\n+    private static String startMessageLogstashCollector = null;\n     private static String startAccessLogLogstashCollector = null;\n-    private static String startTraceJson = null;\n     private static String startTraceJsonFields = null;\n-    private static String startFFDCJson = null;\n+    private static String startTraceLogstashCollector = null;\n     private static String startFFDCJsonFields = null;\n-    private static String startAccessLogJson = null;\n+    private static String startFFDCLogstashCollector = null;\n     private static String startAccessLogJsonFields = null;\n     private static String startGCJson = null;\n-    private static String startAuditJson = null;\n     private static String startAuditJsonFields = null;\n+    private static String startAuditLogstashCollector = null;\n     public static String hostName = null;\n     public static String wlpUserDir = null;\n     public static String serverName = null;\n     private static final String TYPE_FIELD_KEY = \"\\\"type\";\n     private static final String TYPE_FIELD_PREPPEND = \"\\\":\\\"\";\n     private static final String TYPE_FIELD_APPEND = \"\\\"\";\n-    private static final String MESSAGE_JSON_TYPE_FIELD = TYPE_FIELD_PREPPEND + CollectorConstants.MESSAGES_LOG_EVENT_TYPE + TYPE_FIELD_APPEND;\n-    private static final String TRACE_JSON_TYPE_FIELD = TYPE_FIELD_PREPPEND + CollectorConstants.TRACE_LOG_EVENT_TYPE + TYPE_FIELD_APPEND;\n-    private static final String ACCESS_JSON_TYPE_FIELD = TYPE_FIELD_PREPPEND + CollectorConstants.ACCESS_LOG_EVENT_TYPE + TYPE_FIELD_APPEND;\n-    private static final String FFDC_JSON_TYPE_FIELD = TYPE_FIELD_PREPPEND + CollectorConstants.FFDC_EVENT_TYPE + TYPE_FIELD_APPEND;\n     private static final String GC_JSON_TYPE_FIELD = TYPE_FIELD_PREPPEND + CollectorConstants.GC_EVENT_TYPE + TYPE_FIELD_APPEND;", "originalCommit": "6a31f77374c8d39b7a1f317ac6090cf50199f081", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f69422689c1bb4f0ffceac36385f642fc5415c96", "changed_code": [{"header": "diff --git a/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonHelpers.java b/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonHelpers.java\nindex fbe676d0cf..81f4e43d49 100644\n--- a/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonHelpers.java\n+++ b/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonHelpers.java\n", "chunk": "@@ -30,24 +30,32 @@ import com.ibm.ws.logging.data.Pair;\n  */\n public class CollectorJsonHelpers {\n \n+    private static String startMessageJson = null;\n     private static String startMessageJsonFields = null;\n     private static String startMessageLogstashCollector = null;\n     private static String startAccessLogLogstashCollector = null;\n+    private static String startTraceJson = null;\n     private static String startTraceJsonFields = null;\n     private static String startTraceLogstashCollector = null;\n+    private static String startFFDCJson = null;\n     private static String startFFDCJsonFields = null;\n-    private static String startFFDCLogstashCollector = null;\n+    private static String startAccessLogJson = null;\n     private static String startAccessLogJsonFields = null;\n     private static String startGCJson = null;\n+    private static String startAuditJson = null;\n     private static String startAuditJsonFields = null;\n-    private static String startAuditLogstashCollector = null;\n     public static String hostName = null;\n     public static String wlpUserDir = null;\n     public static String serverName = null;\n     private static final String TYPE_FIELD_KEY = \"\\\"type\";\n     private static final String TYPE_FIELD_PREPPEND = \"\\\":\\\"\";\n     private static final String TYPE_FIELD_APPEND = \"\\\"\";\n+    private static final String MESSAGE_JSON_TYPE_FIELD = TYPE_FIELD_PREPPEND + CollectorConstants.MESSAGES_LOG_EVENT_TYPE + TYPE_FIELD_APPEND;\n+    private static final String TRACE_JSON_TYPE_FIELD = TYPE_FIELD_PREPPEND + CollectorConstants.TRACE_LOG_EVENT_TYPE + TYPE_FIELD_APPEND;\n+    private static final String ACCESS_JSON_TYPE_FIELD = TYPE_FIELD_PREPPEND + CollectorConstants.ACCESS_LOG_EVENT_TYPE + TYPE_FIELD_APPEND;\n+    private static final String FFDC_JSON_TYPE_FIELD = TYPE_FIELD_PREPPEND + CollectorConstants.FFDC_EVENT_TYPE + TYPE_FIELD_APPEND;\n     private static final String GC_JSON_TYPE_FIELD = TYPE_FIELD_PREPPEND + CollectorConstants.GC_EVENT_TYPE + TYPE_FIELD_APPEND;\n+    private static final String AUDIT_JSON_TYPE_FIELD = TYPE_FIELD_PREPPEND + CollectorConstants.AUDIT_LOG_EVENT_TYPE + TYPE_FIELD_APPEND;\n     private static String unchangingFieldsJson = null;\n     public final static String TRUE_BOOL = \"true\";\n     public final static String FALSE_BOOL = \"false\";\n", "next_change": {"commit": "8a1ba1e3f49d32502fb40b0617e994291f44d974", "changed_code": [{"header": "diff --git a/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonHelpers.java b/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonHelpers.java\nindex 81f4e43d49..fbe676d0cf 100644\n--- a/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonHelpers.java\n+++ b/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonHelpers.java\n", "chunk": "@@ -30,32 +30,24 @@ import com.ibm.ws.logging.data.Pair;\n  */\n public class CollectorJsonHelpers {\n \n-    private static String startMessageJson = null;\n     private static String startMessageJsonFields = null;\n     private static String startMessageLogstashCollector = null;\n     private static String startAccessLogLogstashCollector = null;\n-    private static String startTraceJson = null;\n     private static String startTraceJsonFields = null;\n     private static String startTraceLogstashCollector = null;\n-    private static String startFFDCJson = null;\n     private static String startFFDCJsonFields = null;\n-    private static String startAccessLogJson = null;\n+    private static String startFFDCLogstashCollector = null;\n     private static String startAccessLogJsonFields = null;\n     private static String startGCJson = null;\n-    private static String startAuditJson = null;\n     private static String startAuditJsonFields = null;\n+    private static String startAuditLogstashCollector = null;\n     public static String hostName = null;\n     public static String wlpUserDir = null;\n     public static String serverName = null;\n     private static final String TYPE_FIELD_KEY = \"\\\"type\";\n     private static final String TYPE_FIELD_PREPPEND = \"\\\":\\\"\";\n     private static final String TYPE_FIELD_APPEND = \"\\\"\";\n-    private static final String MESSAGE_JSON_TYPE_FIELD = TYPE_FIELD_PREPPEND + CollectorConstants.MESSAGES_LOG_EVENT_TYPE + TYPE_FIELD_APPEND;\n-    private static final String TRACE_JSON_TYPE_FIELD = TYPE_FIELD_PREPPEND + CollectorConstants.TRACE_LOG_EVENT_TYPE + TYPE_FIELD_APPEND;\n-    private static final String ACCESS_JSON_TYPE_FIELD = TYPE_FIELD_PREPPEND + CollectorConstants.ACCESS_LOG_EVENT_TYPE + TYPE_FIELD_APPEND;\n-    private static final String FFDC_JSON_TYPE_FIELD = TYPE_FIELD_PREPPEND + CollectorConstants.FFDC_EVENT_TYPE + TYPE_FIELD_APPEND;\n     private static final String GC_JSON_TYPE_FIELD = TYPE_FIELD_PREPPEND + CollectorConstants.GC_EVENT_TYPE + TYPE_FIELD_APPEND;\n-    private static final String AUDIT_JSON_TYPE_FIELD = TYPE_FIELD_PREPPEND + CollectorConstants.AUDIT_LOG_EVENT_TYPE + TYPE_FIELD_APPEND;\n     private static String unchangingFieldsJson = null;\n     public final static String TRUE_BOOL = \"true\";\n     public final static String FALSE_BOOL = \"false\";\n", "next_change": {"commit": "e29b0414e8de810ab3b6e09d715af382240f29d1", "changed_code": [{"header": "diff --git a/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonHelpers.java b/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonHelpers.java\nindex fbe676d0cf..9d579edaea 100644\n--- a/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonHelpers.java\n+++ b/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonHelpers.java\n", "chunk": "@@ -31,24 +31,26 @@ import com.ibm.ws.logging.data.Pair;\n public class CollectorJsonHelpers {\n \n     private static String startMessageJsonFields = null;\n+    private static String startAccessLogJsonFields = null;\n+    private static String startTraceJsonFields = null;\n+    private static String startFFDCJsonFields = null;\n+    private static String startAuditJsonFields = null;\n+\n     private static String startMessageLogstashCollector = null;\n     private static String startAccessLogLogstashCollector = null;\n-    private static String startTraceJsonFields = null;\n     private static String startTraceLogstashCollector = null;\n-    private static String startFFDCJsonFields = null;\n     private static String startFFDCLogstashCollector = null;\n-    private static String startAccessLogJsonFields = null;\n-    private static String startGCJson = null;\n-    private static String startAuditJsonFields = null;\n     private static String startAuditLogstashCollector = null;\n+    private static String startGCLogstashCollector = null;\n+\n     public static String hostName = null;\n     public static String wlpUserDir = null;\n     public static String serverName = null;\n+    private static String unchangingFieldsJson = null;\n     private static final String TYPE_FIELD_KEY = \"\\\"type\";\n     private static final String TYPE_FIELD_PREPPEND = \"\\\":\\\"\";\n     private static final String TYPE_FIELD_APPEND = \"\\\"\";\n     private static final String GC_JSON_TYPE_FIELD = TYPE_FIELD_PREPPEND + CollectorConstants.GC_EVENT_TYPE + TYPE_FIELD_APPEND;\n-    private static String unchangingFieldsJson = null;\n     public final static String TRUE_BOOL = \"true\";\n     public final static String FALSE_BOOL = \"false\";\n     public final static String INT_SUFFIX = \"_int\";\n", "next_change": {"commit": "3f8a030a85ef2975bd13eae0880ac56477f54d2c", "changed_code": [{"header": "diff --git a/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonHelpers.java b/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonHelpers.java\nindex 9d579edaea..7424fb3fd9 100644\n--- a/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonHelpers.java\n+++ b/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonHelpers.java\n", "chunk": "@@ -46,11 +46,6 @@ public class CollectorJsonHelpers {\n     public static String hostName = null;\n     public static String wlpUserDir = null;\n     public static String serverName = null;\n-    private static String unchangingFieldsJson = null;\n-    private static final String TYPE_FIELD_KEY = \"\\\"type\";\n-    private static final String TYPE_FIELD_PREPPEND = \"\\\":\\\"\";\n-    private static final String TYPE_FIELD_APPEND = \"\\\"\";\n-    private static final String GC_JSON_TYPE_FIELD = TYPE_FIELD_PREPPEND + CollectorConstants.GC_EVENT_TYPE + TYPE_FIELD_APPEND;\n     public final static String TRUE_BOOL = \"true\";\n     public final static String FALSE_BOOL = \"false\";\n     public final static String INT_SUFFIX = \"_int\";\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc5ODEwNA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12711#discussion_r449798104", "body": "convention for static constants is to use all upper case", "bodyText": "convention for static constants is to use all upper case", "bodyHTML": "<p dir=\"auto\">convention for static constants is to use all upper case</p>", "author": "donbourne", "createdAt": "2020-07-04T19:12:57Z", "path": "dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonHelpers.java", "diffHunk": "@@ -63,6 +57,8 @@\n     public final static String LONG_SUFFIX = \"_long\";\n     public static final String LINE_SEPARATOR;\n     public static final String OMIT_FIELDS_STRING = \"@@@OMIT@@@\";\n+    private static final int jsonKey = CollectorConstants.KEYS_JSON;\n+    private static final int logstashKey = CollectorConstants.KEYS_LOGSTASH;", "originalCommit": "6a31f77374c8d39b7a1f317ac6090cf50199f081", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f69422689c1bb4f0ffceac36385f642fc5415c96", "changed_code": [{"header": "diff --git a/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonHelpers.java b/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonHelpers.java\nindex fbe676d0cf..81f4e43d49 100644\n--- a/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonHelpers.java\n+++ b/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonHelpers.java\n", "chunk": "@@ -57,8 +65,6 @@ public class CollectorJsonHelpers {\n     public final static String LONG_SUFFIX = \"_long\";\n     public static final String LINE_SEPARATOR;\n     public static final String OMIT_FIELDS_STRING = \"@@@OMIT@@@\";\n-    private static final int jsonKey = CollectorConstants.KEYS_JSON;\n-    private static final int logstashKey = CollectorConstants.KEYS_LOGSTASH;\n \n     static {\n         LINE_SEPARATOR = AccessController.doPrivileged(new PrivilegedAction<String>() {\n", "next_change": {"commit": "8a1ba1e3f49d32502fb40b0617e994291f44d974", "changed_code": [{"header": "diff --git a/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonHelpers.java b/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonHelpers.java\nindex 81f4e43d49..fbe676d0cf 100644\n--- a/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonHelpers.java\n+++ b/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonHelpers.java\n", "chunk": "@@ -65,6 +57,8 @@ public class CollectorJsonHelpers {\n     public final static String LONG_SUFFIX = \"_long\";\n     public static final String LINE_SEPARATOR;\n     public static final String OMIT_FIELDS_STRING = \"@@@OMIT@@@\";\n+    private static final int jsonKey = CollectorConstants.KEYS_JSON;\n+    private static final int logstashKey = CollectorConstants.KEYS_LOGSTASH;\n \n     static {\n         LINE_SEPARATOR = AccessController.doPrivileged(new PrivilegedAction<String>() {\n", "next_change": {"commit": "e29b0414e8de810ab3b6e09d715af382240f29d1", "changed_code": [{"header": "diff --git a/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonHelpers.java b/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonHelpers.java\nindex fbe676d0cf..9d579edaea 100644\n--- a/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonHelpers.java\n+++ b/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonHelpers.java\n", "chunk": "@@ -57,8 +59,8 @@ public class CollectorJsonHelpers {\n     public final static String LONG_SUFFIX = \"_long\";\n     public static final String LINE_SEPARATOR;\n     public static final String OMIT_FIELDS_STRING = \"@@@OMIT@@@\";\n-    private static final int jsonKey = CollectorConstants.KEYS_JSON;\n-    private static final int logstashKey = CollectorConstants.KEYS_LOGSTASH;\n+    private static final int JSON_KEY = CollectorConstants.KEYS_JSON;\n+    private static final int LOGSTASH_KEY = CollectorConstants.KEYS_LOGSTASH;\n \n     static {\n         LINE_SEPARATOR = AccessController.doPrivileged(new PrivilegedAction<String>() {\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc5ODM0Mg==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12711#discussion_r449798342", "body": "convention for static constants is to use all upper case", "bodyText": "convention for static constants is to use all upper case", "bodyHTML": "<p dir=\"auto\">convention for static constants is to use all upper case</p>", "author": "donbourne", "createdAt": "2020-07-04T19:16:39Z", "path": "dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonUtils.java", "diffHunk": "@@ -31,6 +32,7 @@\n public class CollectorJsonUtils {\n \n     public static final int MAX_USER_AGENT_LENGTH = 2048;\n+    private static final int logstashKey = CollectorConstants.KEYS_LOGSTASH;", "originalCommit": "6a31f77374c8d39b7a1f317ac6090cf50199f081", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f69422689c1bb4f0ffceac36385f642fc5415c96", "changed_code": [{"header": "diff --git a/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonUtils.java b/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonUtils.java\nindex a1679a19bb..08e51404d6 100644\n--- a/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonUtils.java\n+++ b/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonUtils.java\n", "chunk": "@@ -32,7 +31,6 @@ import com.ibm.ws.logging.data.LogTraceData;\n public class CollectorJsonUtils {\n \n     public static final int MAX_USER_AGENT_LENGTH = 2048;\n-    private static final int logstashKey = CollectorConstants.KEYS_LOGSTASH;\n \n     public static String getEventType(String source, String location) {\n         return CollectorJsonHelpers.getEventType(source, location);\n", "next_change": {"commit": "8a1ba1e3f49d32502fb40b0617e994291f44d974", "changed_code": [{"header": "diff --git a/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonUtils.java b/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonUtils.java\nindex 08e51404d6..a1679a19bb 100644\n--- a/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonUtils.java\n+++ b/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonUtils.java\n", "chunk": "@@ -31,6 +32,7 @@ import com.ibm.ws.logging.data.LogTraceData;\n public class CollectorJsonUtils {\n \n     public static final int MAX_USER_AGENT_LENGTH = 2048;\n+    private static final int logstashKey = CollectorConstants.KEYS_LOGSTASH;\n \n     public static String getEventType(String source, String location) {\n         return CollectorJsonHelpers.getEventType(source, location);\n", "next_change": {"commit": "e29b0414e8de810ab3b6e09d715af382240f29d1", "changed_code": [{"header": "diff --git a/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonUtils.java b/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonUtils.java\nindex a1679a19bb..51f4bc6401 100644\n--- a/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonUtils.java\n+++ b/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonUtils.java\n", "chunk": "@@ -32,7 +32,7 @@ import com.ibm.ws.logging.data.LogTraceData;\n public class CollectorJsonUtils {\n \n     public static final int MAX_USER_AGENT_LENGTH = 2048;\n-    private static final int logstashKey = CollectorConstants.KEYS_LOGSTASH;\n+    private static final int LOGSTASH_KEY = CollectorConstants.KEYS_LOGSTASH;\n \n     public static String getEventType(String source, String location) {\n         return CollectorJsonHelpers.getEventType(source, location);\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc5OTM0Nw==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12711#discussion_r449799347", "body": "I think we could now rename these startXXXJSONFields methods to just startXXX since there's just one for each type", "bodyText": "I think we could now rename these startXXXJSONFields methods to just startXXX since there's just one for each type", "bodyHTML": "<p dir=\"auto\">I think we could now rename these startXXXJSONFields methods to just startXXX since there's just one for each type</p>", "author": "donbourne", "createdAt": "2020-07-04T19:31:20Z", "path": "dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonHelpers.java", "diffHunk": "@@ -350,56 +292,52 @@ protected static StringBuilder startGCJson(String hostName, String wlpUserDir, S\n         return sb;\n     }\n \n-    protected static StringBuilder startAuditJson(String hostName, String wlpUserDir, String serverName) {\n-        StringBuilder sb = new StringBuilder(2048);\n-\n-        if (startAuditJson != null) {\n-            sb.append(startAuditJson);\n-        } else {\n-            sb.append(\"{\");\n-            sb.append(TYPE_FIELD_KEY);\n-            sb.append(AUDIT_JSON_TYPE_FIELD);\n-            addUnchangingFields(sb, hostName, wlpUserDir, serverName);\n-            startAuditJson = sb.toString();\n-        }\n-\n-        return sb;\n-    }\n-\n-    protected static JSONObjectBuilder startAuditJsonFields() {\n+    protected static JSONObjectBuilder startAuditJsonFields(int format) {\n         JSONObjectBuilder jsonBuilder = new JSONObject.JSONObjectBuilder();\n         // We're assuming startAuditJsonFields will never be null - i.e. updateFieldMappings is always called before this method is called\n-        jsonBuilder.addPreformatted(startAuditJsonFields);\n+        if (format == jsonKey)\n+            jsonBuilder.addPreformatted(startAuditJsonFields);\n+        else if (format == logstashKey)\n+            jsonBuilder.addPreformatted(startAuditLogstashCollector);\n         return jsonBuilder;\n     }\n \n-    protected static JSONObjectBuilder startMessageJsonFields() {\n+    protected static JSONObjectBuilder startMessageJsonFields(int format) {", "originalCommit": "6a31f77374c8d39b7a1f317ac6090cf50199f081", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f69422689c1bb4f0ffceac36385f642fc5415c96", "changed_code": [{"header": "diff --git a/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonHelpers.java b/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonHelpers.java\nindex fbe676d0cf..81f4e43d49 100644\n--- a/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonHelpers.java\n+++ b/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonHelpers.java\n", "chunk": "@@ -292,22 +358,35 @@ public class CollectorJsonHelpers {\n         return sb;\n     }\n \n-    protected static JSONObjectBuilder startAuditJsonFields(int format) {\n+    protected static StringBuilder startAuditJson(String hostName, String wlpUserDir, String serverName) {\n+        StringBuilder sb = new StringBuilder(2048);\n+\n+        if (startAuditJson != null) {\n+            sb.append(startAuditJson);\n+        } else {\n+            sb.append(\"{\");\n+            sb.append(TYPE_FIELD_KEY);\n+            sb.append(AUDIT_JSON_TYPE_FIELD);\n+            addUnchangingFields(sb, hostName, wlpUserDir, serverName);\n+            startAuditJson = sb.toString();\n+        }\n+\n+        return sb;\n+    }\n+\n+    protected static JSONObjectBuilder startAuditJsonFields() {\n         JSONObjectBuilder jsonBuilder = new JSONObject.JSONObjectBuilder();\n         // We're assuming startAuditJsonFields will never be null - i.e. updateFieldMappings is always called before this method is called\n-        if (format == jsonKey)\n-            jsonBuilder.addPreformatted(startAuditJsonFields);\n-        else if (format == logstashKey)\n-            jsonBuilder.addPreformatted(startAuditLogstashCollector);\n+        jsonBuilder.addPreformatted(startAuditJsonFields);\n         return jsonBuilder;\n     }\n \n     protected static JSONObjectBuilder startMessageJsonFields(int format) {\n         JSONObjectBuilder jsonBuilder = new JSONObject.JSONObjectBuilder();\n         // We're assuming startMessageJsonFields will never be null - i.e. updateFieldMappings is always called before this method is called\n-        if (format == jsonKey)\n+        if (format == AccessLogData.KEYS_JSON)\n             jsonBuilder.addPreformatted(startMessageJsonFields);\n-        else if (format == logstashKey)\n+        else if (format == AccessLogData.KEYS_LOGSTASH)\n             jsonBuilder.addPreformatted(startMessageLogstashCollector);\n         return jsonBuilder;\n     }\n", "next_change": {"commit": "8a1ba1e3f49d32502fb40b0617e994291f44d974", "changed_code": [{"header": "diff --git a/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonHelpers.java b/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonHelpers.java\nindex 81f4e43d49..fbe676d0cf 100644\n--- a/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonHelpers.java\n+++ b/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonHelpers.java\n", "chunk": "@@ -358,35 +292,22 @@ public class CollectorJsonHelpers {\n         return sb;\n     }\n \n-    protected static StringBuilder startAuditJson(String hostName, String wlpUserDir, String serverName) {\n-        StringBuilder sb = new StringBuilder(2048);\n-\n-        if (startAuditJson != null) {\n-            sb.append(startAuditJson);\n-        } else {\n-            sb.append(\"{\");\n-            sb.append(TYPE_FIELD_KEY);\n-            sb.append(AUDIT_JSON_TYPE_FIELD);\n-            addUnchangingFields(sb, hostName, wlpUserDir, serverName);\n-            startAuditJson = sb.toString();\n-        }\n-\n-        return sb;\n-    }\n-\n-    protected static JSONObjectBuilder startAuditJsonFields() {\n+    protected static JSONObjectBuilder startAuditJsonFields(int format) {\n         JSONObjectBuilder jsonBuilder = new JSONObject.JSONObjectBuilder();\n         // We're assuming startAuditJsonFields will never be null - i.e. updateFieldMappings is always called before this method is called\n-        jsonBuilder.addPreformatted(startAuditJsonFields);\n+        if (format == jsonKey)\n+            jsonBuilder.addPreformatted(startAuditJsonFields);\n+        else if (format == logstashKey)\n+            jsonBuilder.addPreformatted(startAuditLogstashCollector);\n         return jsonBuilder;\n     }\n \n     protected static JSONObjectBuilder startMessageJsonFields(int format) {\n         JSONObjectBuilder jsonBuilder = new JSONObject.JSONObjectBuilder();\n         // We're assuming startMessageJsonFields will never be null - i.e. updateFieldMappings is always called before this method is called\n-        if (format == AccessLogData.KEYS_JSON)\n+        if (format == jsonKey)\n             jsonBuilder.addPreformatted(startMessageJsonFields);\n-        else if (format == AccessLogData.KEYS_LOGSTASH)\n+        else if (format == logstashKey)\n             jsonBuilder.addPreformatted(startMessageLogstashCollector);\n         return jsonBuilder;\n     }\n", "next_change": {"commit": "e29b0414e8de810ab3b6e09d715af382240f29d1", "changed_code": [{"header": "diff --git a/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonHelpers.java b/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonHelpers.java\nindex fbe676d0cf..9d579edaea 100644\n--- a/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonHelpers.java\n+++ b/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonHelpers.java\n", "chunk": "@@ -211,133 +213,124 @@ public class CollectorJsonHelpers {\n \n         // We should initialize both the regular JSON logging and LogstashCollector variants\n         for (int i = 0; i < 2; i++) {\n+            // Audit events\n             jsonBuilder = new JSONObjectBuilder();\n             jsonBuilder.addField(AuditData.getTypeKey(i), CollectorConstants.AUDIT_LOG_EVENT_TYPE, false, false)\n                        .addField(AuditData.getHostKey(i), hostName, false, false)\n                        .addField(AuditData.getUserDirKey(i), wlpUserDir, false, true)\n                        .addField(AuditData.getServerNameKey(i), serverName, false, false);\n-            if (i == jsonKey)\n+            if (i == JSON_KEY)\n                 startAuditJsonFields = jsonBuilder.toString();\n-            else if (i == logstashKey)\n+            else if (i == LOGSTASH_KEY)\n                 startAuditLogstashCollector = jsonBuilder.toString();\n \n+            // LogTraceData for message events\n             jsonBuilder = new JSONObjectBuilder();\n             jsonBuilder.addField(LogTraceData.getTypeKey(i, true), CollectorConstants.MESSAGES_LOG_EVENT_TYPE, false, false)\n                        .addField(LogTraceData.getHostKey(i, true), hostName, false, false)\n                        .addField(LogTraceData.getUserDirKey(i, true), wlpUserDir, false, true)\n                        .addField(LogTraceData.getServerNameKey(i, true), serverName, false, false);\n-            if (i == jsonKey)\n+            if (i == JSON_KEY)\n                 startMessageJsonFields = jsonBuilder.toString();\n-            else if (i == logstashKey)\n+            else if (i == LOGSTASH_KEY)\n                 startMessageLogstashCollector = jsonBuilder.toString();\n \n+            // LogTraceData for trace events\n             jsonBuilder = new JSONObjectBuilder();\n             jsonBuilder.addField(LogTraceData.getTypeKey(i, false), CollectorConstants.TRACE_LOG_EVENT_TYPE, false, false)\n                        .addField(LogTraceData.getHostKey(i, false), hostName, false, false)\n                        .addField(LogTraceData.getUserDirKey(i, false), wlpUserDir, false, true)\n                        .addField(LogTraceData.getServerNameKey(i, false), serverName, false, false);\n-            if (i == jsonKey)\n+            if (i == JSON_KEY)\n                 startTraceJsonFields = jsonBuilder.toString();\n-            else if (i == logstashKey)\n+            else if (i == LOGSTASH_KEY)\n                 startTraceLogstashCollector = jsonBuilder.toString();\n \n+            // Access Log events\n             jsonBuilder = new JSONObjectBuilder();\n             jsonBuilder.addField(AccessLogData.getTypeKey(i), CollectorConstants.ACCESS_LOG_EVENT_TYPE, false, false)\n                        .addField(AccessLogData.getHostKey(i), hostName, false, false)\n                        .addField(AccessLogData.getUserDirKey(i), wlpUserDir, false, true)\n                        .addField(AccessLogData.getServerNameKey(i), serverName, false, false);\n-            if (i == jsonKey)\n+            if (i == JSON_KEY)\n                 startAccessLogJsonFields = jsonBuilder.toString();\n-            else if (i == logstashKey)\n+            else if (i == LOGSTASH_KEY)\n                 startAccessLogLogstashCollector = jsonBuilder.toString();\n \n+            // FFDC events\n             jsonBuilder = new JSONObjectBuilder();\n             jsonBuilder.addField(FFDCData.getTypeKey(i), CollectorConstants.FFDC_EVENT_TYPE, false, false)\n                        .addField(FFDCData.getHostKey(i), hostName, false, false)\n                        .addField(FFDCData.getUserDirKey(i), wlpUserDir, false, true)\n                        .addField(FFDCData.getServerNameKey(i), serverName, false, false);\n-            if (i == jsonKey)\n+            if (i == JSON_KEY)\n                 startFFDCJsonFields = jsonBuilder.toString();\n-            else if (i == logstashKey)\n+            else if (i == LOGSTASH_KEY)\n                 startFFDCLogstashCollector = jsonBuilder.toString();\n         }\n-        //@formatter:on\n-    }\n \n-    private static void addUnchangingFields(StringBuilder sb, String hostName, String wlpUserDir, String serverName) {\n-        if (unchangingFieldsJson == null) {\n-            StringBuilder temp = new StringBuilder(512);\n-            addToJSON(temp, \"hostName\", hostName, false, false, false, false);\n-            addToJSON(temp, \"wlpUserDir\", wlpUserDir, false, true, false, false);\n-            addToJSON(temp, \"serverName\", serverName, false, false, false, false);\n-            unchangingFieldsJson = temp.toString();\n-        }\n-        sb.append(unchangingFieldsJson);\n+        // GC events are only in Logstash Collector, so we only need to initialize one variant of it\n+        jsonBuilder = new JSONObjectBuilder();\n+        jsonBuilder.addField(\"type\", CollectorConstants.GC_EVENT_TYPE, false, false)\n+                   .addField(\"hostName\", hostName, false, false)\n+                   .addField(\"wlpUserDir\", wlpUserDir, false, true)\n+                   .addField(\"serverName\", serverName, false, false);\n+        startGCLogstashCollector = jsonBuilder.toString();\n+        //formatter:on\n     }\n \n-    protected static StringBuilder startGCJson(String hostName, String wlpUserDir, String serverName) {\n-        StringBuilder sb = new StringBuilder(512);\n-\n-        if (startGCJson != null) {\n-            sb.append(startGCJson);\n-        } else {\n-            sb.append(\"{\");\n-            sb.append(TYPE_FIELD_KEY);\n-            sb.append(GC_JSON_TYPE_FIELD);\n-            addUnchangingFields(sb, hostName, wlpUserDir, serverName);\n-\n-            startGCJson = sb.toString();\n-        }\n-\n-        return sb;\n+    protected static JSONObjectBuilder startGC() {\n+        JSONObjectBuilder jsonBuilder = new JSONObject.JSONObjectBuilder();\n+        jsonBuilder.addPreformatted(startGCLogstashCollector);\n+        return jsonBuilder;\n     }\n \n-    protected static JSONObjectBuilder startAuditJsonFields(int format) {\n+    protected static JSONObjectBuilder startAudit(int format) {\n         JSONObjectBuilder jsonBuilder = new JSONObject.JSONObjectBuilder();\n         // We're assuming startAuditJsonFields will never be null - i.e. updateFieldMappings is always called before this method is called\n-        if (format == jsonKey)\n+        if (format == JSON_KEY)\n             jsonBuilder.addPreformatted(startAuditJsonFields);\n-        else if (format == logstashKey)\n+        else if (format == LOGSTASH_KEY)\n             jsonBuilder.addPreformatted(startAuditLogstashCollector);\n         return jsonBuilder;\n     }\n \n-    protected static JSONObjectBuilder startMessageJsonFields(int format) {\n+    protected static JSONObjectBuilder startMessage(int format) {\n         JSONObjectBuilder jsonBuilder = new JSONObject.JSONObjectBuilder();\n         // We're assuming startMessageJsonFields will never be null - i.e. updateFieldMappings is always called before this method is called\n-        if (format == jsonKey)\n+        if (format == JSON_KEY)\n             jsonBuilder.addPreformatted(startMessageJsonFields);\n-        else if (format == logstashKey)\n+        else if (format == LOGSTASH_KEY)\n             jsonBuilder.addPreformatted(startMessageLogstashCollector);\n         return jsonBuilder;\n     }\n \n-    protected static JSONObjectBuilder startTraceJsonFields(int format) {\n+    protected static JSONObjectBuilder startTrace(int format) {\n         JSONObjectBuilder jsonBuilder = new JSONObject.JSONObjectBuilder();\n         // We're assuming startTraceJsonFields will never be null - i.e. updateFieldMappings is always called before this method is called\n-        if (format == jsonKey)\n+        if (format == JSON_KEY)\n             jsonBuilder.addPreformatted(startTraceJsonFields);\n-        else if (format == logstashKey)\n+        else if (format == LOGSTASH_KEY)\n             jsonBuilder.addPreformatted(startTraceLogstashCollector);\n         return jsonBuilder;\n     }\n \n-    protected static JSONObjectBuilder startFFDCJsonFields(int format) {\n+    protected static JSONObjectBuilder startFFDC(int format) {\n         JSONObjectBuilder jsonBuilder = new JSONObject.JSONObjectBuilder();\n         // We're assuming startFFDCJsonFields will never be null - i.e. updateFieldMappings is always called before this method is called\n-        if (format == jsonKey)\n+        if (format == JSON_KEY)\n             jsonBuilder.addPreformatted(startFFDCJsonFields);\n-        else if (format == logstashKey)\n+        else if (format == LOGSTASH_KEY)\n             jsonBuilder.addPreformatted(startFFDCLogstashCollector);\n         return jsonBuilder;\n     }\n \n-    protected static JSONObjectBuilder startAccessLogJsonFields(int format) {\n+    protected static JSONObjectBuilder startAccessLog(int format) {\n         JSONObjectBuilder jsonBuilder = new JSONObject.JSONObjectBuilder();\n         // We're assuming startAccessLogJsonFields and startAccessLogLogstashCollector will never be null - i.e. updateFieldMappings is always called before this method is called\n-        if (format == jsonKey)\n+        if (format == JSON_KEY)\n             jsonBuilder.addPreformatted(startAccessLogJsonFields);\n-        else if (format == logstashKey)\n+        else if (format == LOGSTASH_KEY)\n             jsonBuilder.addPreformatted(startAccessLogLogstashCollector);\n         return jsonBuilder;\n     }\n", "next_change": null}]}}, {"header": "diff --git a/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonHelpers.java b/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonHelpers.java\nindex 81f4e43d49..fbe676d0cf 100644\n--- a/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonHelpers.java\n+++ b/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonHelpers.java\n", "chunk": "@@ -394,26 +315,29 @@ public class CollectorJsonHelpers {\n     protected static JSONObjectBuilder startTraceJsonFields(int format) {\n         JSONObjectBuilder jsonBuilder = new JSONObject.JSONObjectBuilder();\n         // We're assuming startTraceJsonFields will never be null - i.e. updateFieldMappings is always called before this method is called\n-        if (format == AccessLogData.KEYS_JSON)\n+        if (format == jsonKey)\n             jsonBuilder.addPreformatted(startTraceJsonFields);\n-        else if (format == AccessLogData.KEYS_LOGSTASH)\n+        else if (format == logstashKey)\n             jsonBuilder.addPreformatted(startTraceLogstashCollector);\n         return jsonBuilder;\n     }\n \n-    protected static JSONObjectBuilder startFFDCJsonFields() {\n+    protected static JSONObjectBuilder startFFDCJsonFields(int format) {\n         JSONObjectBuilder jsonBuilder = new JSONObject.JSONObjectBuilder();\n         // We're assuming startFFDCJsonFields will never be null - i.e. updateFieldMappings is always called before this method is called\n-        jsonBuilder.addPreformatted(startFFDCJsonFields);\n+        if (format == jsonKey)\n+            jsonBuilder.addPreformatted(startFFDCJsonFields);\n+        else if (format == logstashKey)\n+            jsonBuilder.addPreformatted(startFFDCLogstashCollector);\n         return jsonBuilder;\n     }\n \n     protected static JSONObjectBuilder startAccessLogJsonFields(int format) {\n         JSONObjectBuilder jsonBuilder = new JSONObject.JSONObjectBuilder();\n         // We're assuming startAccessLogJsonFields and startAccessLogLogstashCollector will never be null - i.e. updateFieldMappings is always called before this method is called\n-        if (format == AccessLogData.KEYS_JSON)\n+        if (format == jsonKey)\n             jsonBuilder.addPreformatted(startAccessLogJsonFields);\n-        else if (format == AccessLogData.KEYS_LOGSTASH)\n+        else if (format == logstashKey)\n             jsonBuilder.addPreformatted(startAccessLogLogstashCollector);\n         return jsonBuilder;\n     }\n", "next_change": {"commit": "e29b0414e8de810ab3b6e09d715af382240f29d1", "changed_code": [{"header": "diff --git a/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonHelpers.java b/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonHelpers.java\nindex fbe676d0cf..9d579edaea 100644\n--- a/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonHelpers.java\n+++ b/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonHelpers.java\n", "chunk": "@@ -211,133 +213,124 @@ public class CollectorJsonHelpers {\n \n         // We should initialize both the regular JSON logging and LogstashCollector variants\n         for (int i = 0; i < 2; i++) {\n+            // Audit events\n             jsonBuilder = new JSONObjectBuilder();\n             jsonBuilder.addField(AuditData.getTypeKey(i), CollectorConstants.AUDIT_LOG_EVENT_TYPE, false, false)\n                        .addField(AuditData.getHostKey(i), hostName, false, false)\n                        .addField(AuditData.getUserDirKey(i), wlpUserDir, false, true)\n                        .addField(AuditData.getServerNameKey(i), serverName, false, false);\n-            if (i == jsonKey)\n+            if (i == JSON_KEY)\n                 startAuditJsonFields = jsonBuilder.toString();\n-            else if (i == logstashKey)\n+            else if (i == LOGSTASH_KEY)\n                 startAuditLogstashCollector = jsonBuilder.toString();\n \n+            // LogTraceData for message events\n             jsonBuilder = new JSONObjectBuilder();\n             jsonBuilder.addField(LogTraceData.getTypeKey(i, true), CollectorConstants.MESSAGES_LOG_EVENT_TYPE, false, false)\n                        .addField(LogTraceData.getHostKey(i, true), hostName, false, false)\n                        .addField(LogTraceData.getUserDirKey(i, true), wlpUserDir, false, true)\n                        .addField(LogTraceData.getServerNameKey(i, true), serverName, false, false);\n-            if (i == jsonKey)\n+            if (i == JSON_KEY)\n                 startMessageJsonFields = jsonBuilder.toString();\n-            else if (i == logstashKey)\n+            else if (i == LOGSTASH_KEY)\n                 startMessageLogstashCollector = jsonBuilder.toString();\n \n+            // LogTraceData for trace events\n             jsonBuilder = new JSONObjectBuilder();\n             jsonBuilder.addField(LogTraceData.getTypeKey(i, false), CollectorConstants.TRACE_LOG_EVENT_TYPE, false, false)\n                        .addField(LogTraceData.getHostKey(i, false), hostName, false, false)\n                        .addField(LogTraceData.getUserDirKey(i, false), wlpUserDir, false, true)\n                        .addField(LogTraceData.getServerNameKey(i, false), serverName, false, false);\n-            if (i == jsonKey)\n+            if (i == JSON_KEY)\n                 startTraceJsonFields = jsonBuilder.toString();\n-            else if (i == logstashKey)\n+            else if (i == LOGSTASH_KEY)\n                 startTraceLogstashCollector = jsonBuilder.toString();\n \n+            // Access Log events\n             jsonBuilder = new JSONObjectBuilder();\n             jsonBuilder.addField(AccessLogData.getTypeKey(i), CollectorConstants.ACCESS_LOG_EVENT_TYPE, false, false)\n                        .addField(AccessLogData.getHostKey(i), hostName, false, false)\n                        .addField(AccessLogData.getUserDirKey(i), wlpUserDir, false, true)\n                        .addField(AccessLogData.getServerNameKey(i), serverName, false, false);\n-            if (i == jsonKey)\n+            if (i == JSON_KEY)\n                 startAccessLogJsonFields = jsonBuilder.toString();\n-            else if (i == logstashKey)\n+            else if (i == LOGSTASH_KEY)\n                 startAccessLogLogstashCollector = jsonBuilder.toString();\n \n+            // FFDC events\n             jsonBuilder = new JSONObjectBuilder();\n             jsonBuilder.addField(FFDCData.getTypeKey(i), CollectorConstants.FFDC_EVENT_TYPE, false, false)\n                        .addField(FFDCData.getHostKey(i), hostName, false, false)\n                        .addField(FFDCData.getUserDirKey(i), wlpUserDir, false, true)\n                        .addField(FFDCData.getServerNameKey(i), serverName, false, false);\n-            if (i == jsonKey)\n+            if (i == JSON_KEY)\n                 startFFDCJsonFields = jsonBuilder.toString();\n-            else if (i == logstashKey)\n+            else if (i == LOGSTASH_KEY)\n                 startFFDCLogstashCollector = jsonBuilder.toString();\n         }\n-        //@formatter:on\n-    }\n \n-    private static void addUnchangingFields(StringBuilder sb, String hostName, String wlpUserDir, String serverName) {\n-        if (unchangingFieldsJson == null) {\n-            StringBuilder temp = new StringBuilder(512);\n-            addToJSON(temp, \"hostName\", hostName, false, false, false, false);\n-            addToJSON(temp, \"wlpUserDir\", wlpUserDir, false, true, false, false);\n-            addToJSON(temp, \"serverName\", serverName, false, false, false, false);\n-            unchangingFieldsJson = temp.toString();\n-        }\n-        sb.append(unchangingFieldsJson);\n+        // GC events are only in Logstash Collector, so we only need to initialize one variant of it\n+        jsonBuilder = new JSONObjectBuilder();\n+        jsonBuilder.addField(\"type\", CollectorConstants.GC_EVENT_TYPE, false, false)\n+                   .addField(\"hostName\", hostName, false, false)\n+                   .addField(\"wlpUserDir\", wlpUserDir, false, true)\n+                   .addField(\"serverName\", serverName, false, false);\n+        startGCLogstashCollector = jsonBuilder.toString();\n+        //formatter:on\n     }\n \n-    protected static StringBuilder startGCJson(String hostName, String wlpUserDir, String serverName) {\n-        StringBuilder sb = new StringBuilder(512);\n-\n-        if (startGCJson != null) {\n-            sb.append(startGCJson);\n-        } else {\n-            sb.append(\"{\");\n-            sb.append(TYPE_FIELD_KEY);\n-            sb.append(GC_JSON_TYPE_FIELD);\n-            addUnchangingFields(sb, hostName, wlpUserDir, serverName);\n-\n-            startGCJson = sb.toString();\n-        }\n-\n-        return sb;\n+    protected static JSONObjectBuilder startGC() {\n+        JSONObjectBuilder jsonBuilder = new JSONObject.JSONObjectBuilder();\n+        jsonBuilder.addPreformatted(startGCLogstashCollector);\n+        return jsonBuilder;\n     }\n \n-    protected static JSONObjectBuilder startAuditJsonFields(int format) {\n+    protected static JSONObjectBuilder startAudit(int format) {\n         JSONObjectBuilder jsonBuilder = new JSONObject.JSONObjectBuilder();\n         // We're assuming startAuditJsonFields will never be null - i.e. updateFieldMappings is always called before this method is called\n-        if (format == jsonKey)\n+        if (format == JSON_KEY)\n             jsonBuilder.addPreformatted(startAuditJsonFields);\n-        else if (format == logstashKey)\n+        else if (format == LOGSTASH_KEY)\n             jsonBuilder.addPreformatted(startAuditLogstashCollector);\n         return jsonBuilder;\n     }\n \n-    protected static JSONObjectBuilder startMessageJsonFields(int format) {\n+    protected static JSONObjectBuilder startMessage(int format) {\n         JSONObjectBuilder jsonBuilder = new JSONObject.JSONObjectBuilder();\n         // We're assuming startMessageJsonFields will never be null - i.e. updateFieldMappings is always called before this method is called\n-        if (format == jsonKey)\n+        if (format == JSON_KEY)\n             jsonBuilder.addPreformatted(startMessageJsonFields);\n-        else if (format == logstashKey)\n+        else if (format == LOGSTASH_KEY)\n             jsonBuilder.addPreformatted(startMessageLogstashCollector);\n         return jsonBuilder;\n     }\n \n-    protected static JSONObjectBuilder startTraceJsonFields(int format) {\n+    protected static JSONObjectBuilder startTrace(int format) {\n         JSONObjectBuilder jsonBuilder = new JSONObject.JSONObjectBuilder();\n         // We're assuming startTraceJsonFields will never be null - i.e. updateFieldMappings is always called before this method is called\n-        if (format == jsonKey)\n+        if (format == JSON_KEY)\n             jsonBuilder.addPreformatted(startTraceJsonFields);\n-        else if (format == logstashKey)\n+        else if (format == LOGSTASH_KEY)\n             jsonBuilder.addPreformatted(startTraceLogstashCollector);\n         return jsonBuilder;\n     }\n \n-    protected static JSONObjectBuilder startFFDCJsonFields(int format) {\n+    protected static JSONObjectBuilder startFFDC(int format) {\n         JSONObjectBuilder jsonBuilder = new JSONObject.JSONObjectBuilder();\n         // We're assuming startFFDCJsonFields will never be null - i.e. updateFieldMappings is always called before this method is called\n-        if (format == jsonKey)\n+        if (format == JSON_KEY)\n             jsonBuilder.addPreformatted(startFFDCJsonFields);\n-        else if (format == logstashKey)\n+        else if (format == LOGSTASH_KEY)\n             jsonBuilder.addPreformatted(startFFDCLogstashCollector);\n         return jsonBuilder;\n     }\n \n-    protected static JSONObjectBuilder startAccessLogJsonFields(int format) {\n+    protected static JSONObjectBuilder startAccessLog(int format) {\n         JSONObjectBuilder jsonBuilder = new JSONObject.JSONObjectBuilder();\n         // We're assuming startAccessLogJsonFields and startAccessLogLogstashCollector will never be null - i.e. updateFieldMappings is always called before this method is called\n-        if (format == jsonKey)\n+        if (format == JSON_KEY)\n             jsonBuilder.addPreformatted(startAccessLogJsonFields);\n-        else if (format == logstashKey)\n+        else if (format == LOGSTASH_KEY)\n             jsonBuilder.addPreformatted(startAccessLogLogstashCollector);\n         return jsonBuilder;\n     }\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc5OTY3NA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12711#discussion_r449799674", "body": "this one might just be personal taste, but I prefer to define variables right before I use them... that way I can easily tell where that variable starts getting used", "bodyText": "this one might just be personal taste, but I prefer to define variables right before I use them... that way I can easily tell where that variable starts getting used", "bodyHTML": "<p dir=\"auto\">this one might just be personal taste, but I prefer to define variables right before I use them... that way I can easily tell where that variable starts getting used</p>", "author": "donbourne", "createdAt": "2020-07-04T19:36:08Z", "path": "dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonUtils.java", "diffHunk": "@@ -121,12 +123,18 @@ private static String jsonifyTraceAndMessage(int maxFieldLength, String wlpUserD\n                                                  String serverName, String hostName, String eventType, Object event, String[] tags) {\n \n         LogTraceData logData = (LogTraceData) event;\n-        StringBuilder sb = null;\n+        JSONObjectBuilder jsonBuilder = null;\n+        boolean isMessageEvent = eventType.equals(CollectorConstants.MESSAGES_LOG_EVENT_TYPE);\n \n-        if (eventType.equals(CollectorConstants.MESSAGES_LOG_EVENT_TYPE))\n-            sb = CollectorJsonHelpers.startMessageJson(hostName, wlpUserDir, serverName);\n-        if (eventType.equals(CollectorConstants.TRACE_LOG_EVENT_TYPE))\n-            sb = CollectorJsonHelpers.startTraceJson(hostName, wlpUserDir, serverName);\n+        ArrayList<KeyValuePair> extensions = null;\n+        KeyValuePairList kvpl = null;", "originalCommit": "6a31f77374c8d39b7a1f317ac6090cf50199f081", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f69422689c1bb4f0ffceac36385f642fc5415c96", "changed_code": [{"header": "diff --git a/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonUtils.java b/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonUtils.java\nindex a1679a19bb..08e51404d6 100644\n--- a/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonUtils.java\n+++ b/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonUtils.java\n", "chunk": "@@ -125,15 +123,16 @@ public class CollectorJsonUtils {\n         LogTraceData logData = (LogTraceData) event;\n         JSONObjectBuilder jsonBuilder = null;\n         boolean isMessageEvent = eventType.equals(CollectorConstants.MESSAGES_LOG_EVENT_TYPE);\n+        int logstashCollectorKey = LogTraceData.KEYS_LOGSTASH;\n \n         ArrayList<KeyValuePair> extensions = null;\n         KeyValuePairList kvpl = null;\n \n         if (isMessageEvent) {\n-            jsonBuilder = CollectorJsonHelpers.startMessageJsonFields(logstashKey);\n+            jsonBuilder = CollectorJsonHelpers.startMessageJsonFields(logstashCollectorKey);\n         }\n         if (!isMessageEvent) {\n-            jsonBuilder = CollectorJsonHelpers.startTraceJsonFields(logstashKey);\n+            jsonBuilder = CollectorJsonHelpers.startTraceJsonFields(logstashCollectorKey);\n         }\n \n         String message = logData.getMessage();\n", "next_change": {"commit": "8a1ba1e3f49d32502fb40b0617e994291f44d974", "changed_code": [{"header": "diff --git a/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonUtils.java b/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonUtils.java\nindex 08e51404d6..a1679a19bb 100644\n--- a/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonUtils.java\n+++ b/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonUtils.java\n", "chunk": "@@ -123,16 +125,15 @@ public class CollectorJsonUtils {\n         LogTraceData logData = (LogTraceData) event;\n         JSONObjectBuilder jsonBuilder = null;\n         boolean isMessageEvent = eventType.equals(CollectorConstants.MESSAGES_LOG_EVENT_TYPE);\n-        int logstashCollectorKey = LogTraceData.KEYS_LOGSTASH;\n \n         ArrayList<KeyValuePair> extensions = null;\n         KeyValuePairList kvpl = null;\n \n         if (isMessageEvent) {\n-            jsonBuilder = CollectorJsonHelpers.startMessageJsonFields(logstashCollectorKey);\n+            jsonBuilder = CollectorJsonHelpers.startMessageJsonFields(logstashKey);\n         }\n         if (!isMessageEvent) {\n-            jsonBuilder = CollectorJsonHelpers.startTraceJsonFields(logstashCollectorKey);\n+            jsonBuilder = CollectorJsonHelpers.startTraceJsonFields(logstashKey);\n         }\n \n         String message = logData.getMessage();\n", "next_change": {"commit": "e29b0414e8de810ab3b6e09d715af382240f29d1", "changed_code": [{"header": "diff --git a/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonUtils.java b/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonUtils.java\nindex a1679a19bb..51f4bc6401 100644\n--- a/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonUtils.java\n+++ b/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonUtils.java\n", "chunk": "@@ -126,14 +124,11 @@ public class CollectorJsonUtils {\n         JSONObjectBuilder jsonBuilder = null;\n         boolean isMessageEvent = eventType.equals(CollectorConstants.MESSAGES_LOG_EVENT_TYPE);\n \n-        ArrayList<KeyValuePair> extensions = null;\n-        KeyValuePairList kvpl = null;\n-\n         if (isMessageEvent) {\n-            jsonBuilder = CollectorJsonHelpers.startMessageJsonFields(logstashKey);\n+            jsonBuilder = CollectorJsonHelpers.startMessage(LOGSTASH_KEY);\n         }\n         if (!isMessageEvent) {\n-            jsonBuilder = CollectorJsonHelpers.startTraceJsonFields(logstashKey);\n+            jsonBuilder = CollectorJsonHelpers.startTrace(LOGSTASH_KEY);\n         }\n \n         String message = logData.getMessage();\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTgwMDA1Mg==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12711#discussion_r449800052", "body": "I think you answered this once before -- is there reason we're able to not convert to Strings for each of these values?  Just want to make sure we don't change what gets quotes around values and what doesn't.", "bodyText": "I think you answered this once before -- is there reason we're able to not convert to Strings for each of these values?  Just want to make sure we don't change what gets quotes around values and what doesn't.", "bodyHTML": "<p dir=\"auto\">I think you answered this once before -- is there reason we're able to not convert to Strings for each of these values?  Just want to make sure we don't change what gets quotes around values and what doesn't.</p>", "author": "donbourne", "createdAt": "2020-07-04T19:41:52Z", "path": "dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonUtils.java", "diffHunk": "@@ -142,82 +150,84 @@ private static String jsonifyTraceAndMessage(int maxFieldLength, String wlpUserD\n             formattedValue.append(CollectorJsonHelpers.LINE_SEPARATOR).append(throwable);\n         }\n \n-        CollectorJsonHelpers.addToJSON(sb, logData.getMessageKey(), formattedValue.toString(), false, true, false, false);\n-        CollectorJsonHelpers.addToJSON(sb, logData.getThreadIdKey(), DataFormatHelper.padHexString(logData.getThreadId(), 8), false, true, false, false);\n         String datetime = CollectorJsonHelpers.dateFormatTL.get().format(logData.getDatetime());\n-        CollectorJsonHelpers.addToJSON(sb, logData.getDatetimeKey(), datetime, false, true, false, false);\n-        CollectorJsonHelpers.addToJSON(sb, logData.getModuleKey(), logData.getModule(), false, true, false, false);\n-        CollectorJsonHelpers.addToJSON(sb, logData.getMessageIdKey(), logData.getMessageId(), false, true, false, false);\n-        CollectorJsonHelpers.addToJSON(sb, logData.getSeverityKey(), logData.getSeverity(), false, true, false, false);\n-        CollectorJsonHelpers.addToJSON(sb, logData.getMethodNameKey(), logData.getMethodName(), false, true, false, false);\n-        CollectorJsonHelpers.addToJSON(sb, logData.getClassNameKey(), logData.getClassName(), false, true, false, false);\n-        CollectorJsonHelpers.addToJSON(sb, logData.getSequenceKey(), logData.getSequence(), false, true, false, false);\n-        KeyValuePairList kvpl = logData.getExtensions();\n+\n+        //@formatter:off\n+        jsonBuilder.addField(LogTraceData.getMessageKey(logstashKey, isMessageEvent), formattedValue.toString(), false, true)\n+                   .addField(LogTraceData.getThreadIdKey(logstashKey, isMessageEvent), DataFormatHelper.padHexString(logData.getThreadId(), 8), false, true)\n+                   .addField(LogTraceData.getDatetimeKey(logstashKey, isMessageEvent), datetime, false, true)\n+                   .addField(LogTraceData.getMessageIdKey(logstashKey, isMessageEvent), logData.getMessageId(), false, true)\n+                   .addField(LogTraceData.getModuleKey(logstashKey, isMessageEvent), logData.getModule(), false, true)\n+                   .addField(LogTraceData.getLoglevelKey(logstashKey, isMessageEvent), logData.getLoglevel(), false, true)\n+                   .addField(LogTraceData.getMethodNameKey(logstashKey, isMessageEvent), logData.getMethodName(), false, true)\n+                   .addField(LogTraceData.getClassNameKey(logstashKey, isMessageEvent), logData.getClassName(), false, true)\n+                   .addField(LogTraceData.getSequenceKey(logstashKey, isMessageEvent), logData.getSequence(), false, true);\n+        //@formatter:on\n+\n+        kvpl = logData.getExtensions();\n         if (kvpl != null) {\n             if (kvpl.getKey().equals(LogFieldConstants.EXTENSIONS_KVPL)) {\n-                ArrayList<KeyValuePair> extensions = kvpl.getList();\n+                extensions = kvpl.getList();\n                 for (KeyValuePair k : extensions) {\n                     String extKey = k.getKey();\n                     if (extKey.endsWith(CollectorJsonHelpers.INT_SUFFIX)) {\n-                        CollectorJsonHelpers.addToJSON(sb, extKey, Integer.toString(k.getIntValue()), false, true, false, false, true);\n+                        jsonBuilder.addField(extKey, k.getIntValue(), false);\n                     } else if (extKey.endsWith(CollectorJsonHelpers.FLOAT_SUFFIX)) {\n-                        CollectorJsonHelpers.addToJSON(sb, extKey, Float.toString(k.getFloatValue()), false, true, false, false, true);\n+                        jsonBuilder.addField(extKey, k.getFloatValue(), false);\n                     } else if (extKey.endsWith(CollectorJsonHelpers.LONG_SUFFIX)) {\n-                        CollectorJsonHelpers.addToJSON(sb, extKey, Long.toString(k.getLongValue()), false, true, false, false, true);\n+                        jsonBuilder.addField(extKey, k.getLongValue(), false);\n                     } else if (extKey.endsWith(CollectorJsonHelpers.BOOL_SUFFIX)) {\n-                        CollectorJsonHelpers.addToJSON(sb, extKey, Boolean.toString(k.getBooleanValue()), false, true, false, false, true);\n+                        jsonBuilder.addField(extKey, k.getBooleanValue(), false);\n                     } else {\n-                        CollectorJsonHelpers.addToJSON(sb, extKey, k.getStringValue(), false, true, false, false, false);\n+                        jsonBuilder.addField(extKey, k.getStringValue(), false, true);", "originalCommit": "6a31f77374c8d39b7a1f317ac6090cf50199f081", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgyMzE3NQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12711#discussion_r451823175", "bodyText": "Sorry, I'm very unfamiliar with how the extension fields work. Maybe Ellen or Yushan can offer more insight on this (I'm mainly just going through the motions of replacing all addToJSON with jsonBuilders and mimicking the previous behaviour as much as possible)", "author": "jennifer-c", "createdAt": "2020-07-08T21:01:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTgwMDA1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQzMTExNg==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12711#discussion_r454431116", "bodyText": "ok, looking at the addToJSON method, I think what you're doing is equivalent.  The last parameter in the addToJSON calls was indicating that the numeric values should be added without adding quotes around the values in the JSON.  Similarly, the code in jsonBuilder.addField would add those numeric values without quotes around the values.", "author": "donbourne", "createdAt": "2020-07-14T15:11:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTgwMDA1Mg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTgwMDE4OA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12711#discussion_r449800188", "body": "upper case", "bodyText": "upper case", "bodyHTML": "<p dir=\"auto\">upper case</p>", "author": "donbourne", "createdAt": "2020-07-04T19:44:17Z", "path": "dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonUtils_JSON.java", "diffHunk": "@@ -29,6 +29,7 @@\n public class CollectorJsonUtils_JSON {\n \n     public static final int MAX_USER_AGENT_LENGTH = 2048;\n+    private final static int jsonKey = CollectorConstants.KEYS_JSON;", "originalCommit": "6a31f77374c8d39b7a1f317ac6090cf50199f081", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f69422689c1bb4f0ffceac36385f642fc5415c96", "changed_code": [{"header": "diff --git a/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonUtils_JSON.java b/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonUtils_JSON.java\nindex 303b29bc8d..65bb81f31a 100644\n--- a/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonUtils_JSON.java\n+++ b/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonUtils_JSON.java\n", "chunk": "@@ -29,7 +29,6 @@ import com.ibm.ws.logging.data.LogTraceData;\n public class CollectorJsonUtils_JSON {\n \n     public static final int MAX_USER_AGENT_LENGTH = 2048;\n-    private final static int jsonKey = CollectorConstants.KEYS_JSON;\n \n     public static String getEventType(String source, String location) {\n         return CollectorJsonHelpers.getEventType(source, location);\n", "next_change": {"commit": "8a1ba1e3f49d32502fb40b0617e994291f44d974", "changed_code": [{"header": "diff --git a/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonUtils_JSON.java b/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonUtils_JSON.java\nindex 65bb81f31a..303b29bc8d 100644\n--- a/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonUtils_JSON.java\n+++ b/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonUtils_JSON.java\n", "chunk": "@@ -29,6 +29,7 @@ import com.ibm.ws.logging.data.LogTraceData;\n public class CollectorJsonUtils_JSON {\n \n     public static final int MAX_USER_AGENT_LENGTH = 2048;\n+    private final static int jsonKey = CollectorConstants.KEYS_JSON;\n \n     public static String getEventType(String source, String location) {\n         return CollectorJsonHelpers.getEventType(source, location);\n", "next_change": {"commit": "e29b0414e8de810ab3b6e09d715af382240f29d1", "changed_code": [{"header": "diff --git a/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonUtils_JSON.java b/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonUtils_JSON.java\nindex 303b29bc8d..c7f8540606 100644\n--- a/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonUtils_JSON.java\n+++ b/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonUtils_JSON.java\n", "chunk": "@@ -29,7 +29,7 @@ import com.ibm.ws.logging.data.LogTraceData;\n public class CollectorJsonUtils_JSON {\n \n     public static final int MAX_USER_AGENT_LENGTH = 2048;\n-    private final static int jsonKey = CollectorConstants.KEYS_JSON;\n+    private final static int JSON_KEY = CollectorConstants.KEYS_JSON;\n \n     public static String getEventType(String source, String location) {\n         return CollectorJsonHelpers.getEventType(source, location);\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTgwMDUyNg==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12711#discussion_r449800526", "body": "upper case", "bodyText": "upper case", "bodyHTML": "<p dir=\"auto\">upper case</p>", "author": "donbourne", "createdAt": "2020-07-04T19:49:14Z", "path": "dev/com.ibm.ws.logging/src/com/ibm/ws/logging/data/AccessLogData.java", "diffHunk": "@@ -80,8 +81,7 @@\n                                             LogFieldConstants.REMOTEUSERID\n     };\n \n-    public static final short KEYS_JSON = 0;\n-    public static final short KEYS_LOGSTASH = 1;\n+    private static final short jsonKey = CollectorConstants.KEYS_JSON;", "originalCommit": "6a31f77374c8d39b7a1f317ac6090cf50199f081", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f69422689c1bb4f0ffceac36385f642fc5415c96", "changed_code": [{"header": "diff --git a/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/data/AccessLogData.java b/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/data/AccessLogData.java\nindex ee11c3f60d..d7ec9fc78f 100644\n--- a/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/data/AccessLogData.java\n+++ b/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/data/AccessLogData.java\n", "chunk": "@@ -81,7 +80,8 @@ public class AccessLogData extends GenericData {\n                                             LogFieldConstants.REMOTEUSERID\n     };\n \n-    private static final short jsonKey = CollectorConstants.KEYS_JSON;\n+    public static final short KEYS_JSON = 0;\n+    public static final short KEYS_LOGSTASH = 1;\n \n     // For renaming/omitting fields\n     private static Map<String, String> cookieMap = new HashMap<>();\n", "next_change": {"commit": "8a1ba1e3f49d32502fb40b0617e994291f44d974", "changed_code": [{"header": "diff --git a/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/data/AccessLogData.java b/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/data/AccessLogData.java\nindex d7ec9fc78f..426332a676 100644\n--- a/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/data/AccessLogData.java\n+++ b/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/data/AccessLogData.java\n", "chunk": "@@ -80,8 +81,7 @@ public class AccessLogData extends GenericData {\n                                             LogFieldConstants.REMOTEUSERID\n     };\n \n-    public static final short KEYS_JSON = 0;\n-    public static final short KEYS_LOGSTASH = 1;\n+    private static final short jsonKey = CollectorConstants.KEYS_JSON;\n \n     // For renaming/omitting fields\n     private static Map<String, String> cookieMap = new HashMap<>();\n", "next_change": {"commit": "e29b0414e8de810ab3b6e09d715af382240f29d1", "changed_code": [{"header": "diff --git a/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/data/AccessLogData.java b/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/data/AccessLogData.java\nindex 426332a676..d428a4c14f 100644\n--- a/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/data/AccessLogData.java\n+++ b/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/data/AccessLogData.java\n", "chunk": "@@ -20,76 +20,76 @@ import com.ibm.ws.logging.collector.LogFieldConstants;\n  *\n  */\n public class AccessLogData extends GenericData {\n-    public static final String[] NAMES1_1 = {\n-                                              LogFieldConstants.IBM_REQUESTSTARTTIME,\n-                                              LogFieldConstants.IBM_URIPATH,\n-                                              LogFieldConstants.IBM_REQUESTMETHOD,\n-                                              LogFieldConstants.IBM_QUERYSTRING,\n-                                              LogFieldConstants.IBM_REQUESTHOST,\n-                                              LogFieldConstants.IBM_REQUESTPORT,\n-                                              LogFieldConstants.IBM_REMOTEHOST,\n-                                              LogFieldConstants.IBM_USERAGENT,\n-                                              LogFieldConstants.IBM_REQUESTPROTOCOL,\n-                                              LogFieldConstants.IBM_BYTESRECEIVED,\n-                                              LogFieldConstants.IBM_RESPONSECODE,\n-                                              LogFieldConstants.IBM_ELAPSEDTIME,\n-                                              LogFieldConstants.IBM_DATETIME,\n-                                              LogFieldConstants.IBM_SEQUENCE,\n-                                              LogFieldConstants.HOST,\n-                                              LogFieldConstants.IBM_USERDIR,\n-                                              LogFieldConstants.IBM_SERVERNAME,\n-                                              LogFieldConstants.TYPE,\n-                                              LogFieldConstants.IBM_REMOTEIP,\n-                                              LogFieldConstants.IBM_BYTESSENT,\n-                                              LogFieldConstants.IBM_COOKIE,\n-                                              LogFieldConstants.IBM_REQUESTELAPSEDTIME,\n-                                              LogFieldConstants.IBM_REQUESTHEADER,\n-                                              LogFieldConstants.IBM_RESPONSEHEADER,\n-                                              LogFieldConstants.IBM_REQUESTFIRSTLINE,\n-                                              LogFieldConstants.IBM_ACCESSLOGDATETIME,\n-                                              LogFieldConstants.IBM_REMOTEUSERID\n+    public static final String[] NAMES_JSON = {\n+                                                LogFieldConstants.IBM_REQUESTSTARTTIME,\n+                                                LogFieldConstants.IBM_URIPATH,\n+                                                LogFieldConstants.IBM_REQUESTMETHOD,\n+                                                LogFieldConstants.IBM_QUERYSTRING,\n+                                                LogFieldConstants.IBM_REQUESTHOST,\n+                                                LogFieldConstants.IBM_REQUESTPORT,\n+                                                LogFieldConstants.IBM_REMOTEHOST,\n+                                                LogFieldConstants.IBM_USERAGENT,\n+                                                LogFieldConstants.IBM_REQUESTPROTOCOL,\n+                                                LogFieldConstants.IBM_BYTESRECEIVED,\n+                                                LogFieldConstants.IBM_RESPONSECODE,\n+                                                LogFieldConstants.IBM_ELAPSEDTIME,\n+                                                LogFieldConstants.IBM_DATETIME,\n+                                                LogFieldConstants.IBM_SEQUENCE,\n+                                                LogFieldConstants.HOST,\n+                                                LogFieldConstants.IBM_USERDIR,\n+                                                LogFieldConstants.IBM_SERVERNAME,\n+                                                LogFieldConstants.TYPE,\n+                                                LogFieldConstants.IBM_REMOTEIP,\n+                                                LogFieldConstants.IBM_BYTESSENT,\n+                                                LogFieldConstants.IBM_COOKIE,\n+                                                LogFieldConstants.IBM_REQUESTELAPSEDTIME,\n+                                                LogFieldConstants.IBM_REQUESTHEADER,\n+                                                LogFieldConstants.IBM_RESPONSEHEADER,\n+                                                LogFieldConstants.IBM_REQUESTFIRSTLINE,\n+                                                LogFieldConstants.IBM_ACCESSLOGDATETIME,\n+                                                LogFieldConstants.IBM_REMOTEUSERID\n \n     };\n \n-    private final static String[] NAMES = {\n-                                            LogFieldConstants.REQUESTSTARTTIME,\n-                                            LogFieldConstants.URIPATH,\n-                                            LogFieldConstants.REQUESTMETHOD,\n-                                            LogFieldConstants.QUERYSTRING,\n-                                            LogFieldConstants.REQUESTHOST,\n-                                            LogFieldConstants.REQUESTPORT,\n-                                            LogFieldConstants.REMOTEHOST,\n-                                            LogFieldConstants.USERAGENT,\n-                                            LogFieldConstants.REQUESTPROTOCOL,\n-                                            LogFieldConstants.BYTESRECEIVED,\n-                                            LogFieldConstants.RESPONSECODE,\n-                                            LogFieldConstants.ELAPSEDTIME,\n-                                            LogFieldConstants.DATETIME,\n-                                            LogFieldConstants.SEQUENCE,\n-                                            LogFieldConstants.HOSTNAME,\n-                                            LogFieldConstants.WLPUSERDIR,\n-                                            LogFieldConstants.SERVERNAME,\n-                                            LogFieldConstants.TYPE,\n-                                            LogFieldConstants.REMOTEIP,\n-                                            LogFieldConstants.BYTESSENT,\n-                                            LogFieldConstants.COOKIE,\n-                                            LogFieldConstants.REQUESTELAPSEDTIME,\n-                                            LogFieldConstants.REQUESTHEADER,\n-                                            LogFieldConstants.RESPONSEHEADER,\n-                                            LogFieldConstants.REQUESTFIRSTLINE,\n-                                            LogFieldConstants.ACCESSLOGDATETIME,\n-                                            LogFieldConstants.REMOTEUSERID\n+    private final static String[] NAMES_LC = {\n+                                               LogFieldConstants.REQUESTSTARTTIME,\n+                                               LogFieldConstants.URIPATH,\n+                                               LogFieldConstants.REQUESTMETHOD,\n+                                               LogFieldConstants.QUERYSTRING,\n+                                               LogFieldConstants.REQUESTHOST,\n+                                               LogFieldConstants.REQUESTPORT,\n+                                               LogFieldConstants.REMOTEHOST,\n+                                               LogFieldConstants.USERAGENT,\n+                                               LogFieldConstants.REQUESTPROTOCOL,\n+                                               LogFieldConstants.BYTESRECEIVED,\n+                                               LogFieldConstants.RESPONSECODE,\n+                                               LogFieldConstants.ELAPSEDTIME,\n+                                               LogFieldConstants.DATETIME,\n+                                               LogFieldConstants.SEQUENCE,\n+                                               LogFieldConstants.HOSTNAME,\n+                                               LogFieldConstants.WLPUSERDIR,\n+                                               LogFieldConstants.SERVERNAME,\n+                                               LogFieldConstants.TYPE,\n+                                               LogFieldConstants.REMOTEIP,\n+                                               LogFieldConstants.BYTESSENT,\n+                                               LogFieldConstants.COOKIE,\n+                                               LogFieldConstants.REQUESTELAPSEDTIME,\n+                                               LogFieldConstants.REQUESTHEADER,\n+                                               LogFieldConstants.RESPONSEHEADER,\n+                                               LogFieldConstants.REQUESTFIRSTLINE,\n+                                               LogFieldConstants.ACCESSLOGDATETIME,\n+                                               LogFieldConstants.REMOTEUSERID\n     };\n \n-    private static final short jsonKey = CollectorConstants.KEYS_JSON;\n+    private static final short JSON_KEY = CollectorConstants.KEYS_JSON;\n \n     // For renaming/omitting fields\n     private static Map<String, String> cookieMap = new HashMap<>();\n     private static Map<String, String> requestHeaderMap = new HashMap<>();\n     private static Map<String, String> responseHeaderMap = new HashMap<>();\n \n-    private static NameAliases jsonLoggingNameAliases = new NameAliases(NAMES1_1);\n-    private static NameAliases jsonLoggingNameAliasesLogstash = new NameAliases(NAMES);\n+    private static NameAliases jsonLoggingNameAliases = new NameAliases(NAMES_JSON);\n+    private static NameAliases jsonLoggingNameAliasesLogstash = new NameAliases(NAMES_LC);\n \n     private static NameAliases[] nameAliases = { jsonLoggingNameAliases, jsonLoggingNameAliasesLogstash };\n \n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTgwODQ0Mg==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12711#discussion_r449808442", "body": "Originally NAMES1_1 referred to the set of names used for JSON and logstashCollector-1.1 (which we got rid of), and NAMES referred to the set of names used for logstashCollector-1.0.  Can you please rename NAMES1_1 / NAMES to NAMES_JSON / NAMES_LC (across all of these XXXData.java files)?", "bodyText": "Originally NAMES1_1 referred to the set of names used for JSON and logstashCollector-1.1 (which we got rid of), and NAMES referred to the set of names used for logstashCollector-1.0.  Can you please rename NAMES1_1 / NAMES to NAMES_JSON / NAMES_LC (across all of these XXXData.java files)?", "bodyHTML": "<p dir=\"auto\">Originally NAMES1_1 referred to the set of names used for JSON and logstashCollector-1.1 (which we got rid of), and NAMES referred to the set of names used for logstashCollector-1.0.  Can you please rename NAMES1_1 / NAMES to NAMES_JSON / NAMES_LC (across all of these XXXData.java files)?</p>", "author": "donbourne", "createdAt": "2020-07-04T21:56:05Z", "path": "dev/com.ibm.ws.logging/src/com/ibm/ws/logging/data/AuditData.java", "diffHunk": "@@ -34,11 +34,16 @@\n                                             LogFieldConstants.THREADID,\n                                             LogFieldConstants.HOSTNAME,\n                                             LogFieldConstants.WLPUSERDIR,\n-                                            LogFieldConstants.SERVERNAME\n+                                            LogFieldConstants.SERVERNAME,\n+                                            LogFieldConstants.TYPE\n     };", "originalCommit": "6a31f77374c8d39b7a1f317ac6090cf50199f081", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f69422689c1bb4f0ffceac36385f642fc5415c96", "changed_code": [{"header": "diff --git a/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/data/AuditData.java b/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/data/AuditData.java\nindex aac07b9f5f..76de41c78e 100644\n--- a/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/data/AuditData.java\n+++ b/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/data/AuditData.java\n", "chunk": "@@ -34,16 +34,11 @@ public class AuditData extends GenericData {\n                                             LogFieldConstants.THREADID,\n                                             LogFieldConstants.HOSTNAME,\n                                             LogFieldConstants.WLPUSERDIR,\n-                                            LogFieldConstants.SERVERNAME,\n-                                            LogFieldConstants.TYPE\n+                                            LogFieldConstants.SERVERNAME\n     };\n \n     private static NameAliases jsonLoggingNameAliases = new NameAliases(NAMES1_1);\n-    private static NameAliases logstashNameAliases = new NameAliases(NAMES);\n \n-    private static NameAliases[] nameAliases = { jsonLoggingNameAliases, logstashNameAliases };\n-\n-    // For renaming fields - only applicable to regular JSON logging and not logstash collector\n     public static void newJsonLoggingNameAliases(Map<String, String> newAliases) {\n         jsonLoggingNameAliases.newAliases(newAliases);\n     }\n", "next_change": {"commit": "670919f632276ca0ee236d2db602c31d60469efc", "changed_code": [{"header": "diff --git a/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/data/AuditData.java b/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/data/AuditData.java\nindex 76de41c78e..cd26367260 100644\n--- a/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/data/AuditData.java\n+++ b/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/data/AuditData.java\n", "chunk": "@@ -34,11 +34,18 @@ public class AuditData extends GenericData {\n                                             LogFieldConstants.THREADID,\n                                             LogFieldConstants.HOSTNAME,\n                                             LogFieldConstants.WLPUSERDIR,\n-                                            LogFieldConstants.SERVERNAME\n+                                            LogFieldConstants.SERVERNAME,\n+                                            LogFieldConstants.TYPE\n     };\n+    public static final short KEYS_JSON = 0;\n+    public static final short KEYS_LOGSTASH = 1;\n \n     private static NameAliases jsonLoggingNameAliases = new NameAliases(NAMES1_1);\n+    private static NameAliases logstashNameAliases = new NameAliases(NAMES);\n \n+    private static NameAliases[] nameAliases = { jsonLoggingNameAliases, logstashNameAliases };\n+\n+    // For renaming fields - only applicable to regular JSON logging and not logstash collector\n     public static void newJsonLoggingNameAliases(Map<String, String> newAliases) {\n         jsonLoggingNameAliases.newAliases(newAliases);\n     }\n", "next_change": {"commit": "e29b0414e8de810ab3b6e09d715af382240f29d1", "changed_code": [{"header": "diff --git a/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/data/AuditData.java b/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/data/AuditData.java\nindex cd26367260..ff10802a1e 100644\n--- a/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/data/AuditData.java\n+++ b/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/data/AuditData.java\n", "chunk": "@@ -18,30 +18,28 @@ import com.ibm.ws.logging.collector.LogFieldConstants;\n  *\n  */\n public class AuditData extends GenericData {\n-    public static final String[] NAMES1_1 = {\n-                                              LogFieldConstants.IBM_DATETIME,\n-                                              LogFieldConstants.IBM_SEQUENCE,\n-                                              LogFieldConstants.IBM_THREADID,\n-                                              LogFieldConstants.HOST,\n-                                              LogFieldConstants.IBM_USERDIR,\n-                                              LogFieldConstants.IBM_SERVERNAME,\n-                                              LogFieldConstants.TYPE\n+    public static final String[] NAMES_JSON = {\n+                                                LogFieldConstants.IBM_DATETIME,\n+                                                LogFieldConstants.IBM_SEQUENCE,\n+                                                LogFieldConstants.IBM_THREADID,\n+                                                LogFieldConstants.HOST,\n+                                                LogFieldConstants.IBM_USERDIR,\n+                                                LogFieldConstants.IBM_SERVERNAME,\n+                                                LogFieldConstants.TYPE\n     };\n \n-    private final static String[] NAMES = {\n-                                            LogFieldConstants.DATETIME,\n-                                            LogFieldConstants.SEQUENCE,\n-                                            LogFieldConstants.THREADID,\n-                                            LogFieldConstants.HOSTNAME,\n-                                            LogFieldConstants.WLPUSERDIR,\n-                                            LogFieldConstants.SERVERNAME,\n-                                            LogFieldConstants.TYPE\n+    private final static String[] NAMES_LC = {\n+                                               LogFieldConstants.DATETIME,\n+                                               LogFieldConstants.SEQUENCE,\n+                                               LogFieldConstants.THREADID,\n+                                               LogFieldConstants.HOSTNAME,\n+                                               LogFieldConstants.WLPUSERDIR,\n+                                               LogFieldConstants.SERVERNAME,\n+                                               LogFieldConstants.TYPE\n     };\n-    public static final short KEYS_JSON = 0;\n-    public static final short KEYS_LOGSTASH = 1;\n \n-    private static NameAliases jsonLoggingNameAliases = new NameAliases(NAMES1_1);\n-    private static NameAliases logstashNameAliases = new NameAliases(NAMES);\n+    private static NameAliases jsonLoggingNameAliases = new NameAliases(NAMES_JSON);\n+    private static NameAliases logstashNameAliases = new NameAliases(NAMES_LC);\n \n     private static NameAliases[] nameAliases = { jsonLoggingNameAliases, logstashNameAliases };\n \n", "next_change": null}]}}]}}]}}, {"oid": "f69422689c1bb4f0ffceac36385f642fc5415c96", "url": "https://github.com/OpenLiberty/open-liberty/commit/f69422689c1bb4f0ffceac36385f642fc5415c96", "message": "Clean up LogTraceData and related calls", "committedDate": "2020-07-16T16:55:26Z", "type": "commit"}, {"oid": "670919f632276ca0ee236d2db602c31d60469efc", "url": "https://github.com/OpenLiberty/open-liberty/commit/670919f632276ca0ee236d2db602c31d60469efc", "message": "Clean up AuditData and related calls", "committedDate": "2020-07-16T16:55:26Z", "type": "commit"}, {"oid": "0c95becc5ae5c0ac97e5207f901f921e852b7b37", "url": "https://github.com/OpenLiberty/open-liberty/commit/0c95becc5ae5c0ac97e5207f901f921e852b7b37", "message": "Clean up FFDCData and related calls", "committedDate": "2020-07-16T16:55:26Z", "type": "commit"}, {"oid": "8a1ba1e3f49d32502fb40b0617e994291f44d974", "url": "https://github.com/OpenLiberty/open-liberty/commit/8a1ba1e3f49d32502fb40b0617e994291f44d974", "message": "Clean up formatting, get rid of unused methods, better variables", "committedDate": "2020-07-16T16:55:26Z", "type": "commit"}, {"oid": "e29b0414e8de810ab3b6e09d715af382240f29d1", "url": "https://github.com/OpenLiberty/open-liberty/commit/e29b0414e8de810ab3b6e09d715af382240f29d1", "message": "Clean up GC events, rename const names", "committedDate": "2020-07-16T18:35:21Z", "type": "forcePushed"}, {"oid": "3f8a030a85ef2975bd13eae0880ac56477f54d2c", "url": "https://github.com/OpenLiberty/open-liberty/commit/3f8a030a85ef2975bd13eae0880ac56477f54d2c", "message": "Clean up GC events, rename const names", "committedDate": "2020-07-16T18:39:07Z", "type": "commit"}, {"oid": "3f8a030a85ef2975bd13eae0880ac56477f54d2c", "url": "https://github.com/OpenLiberty/open-liberty/commit/3f8a030a85ef2975bd13eae0880ac56477f54d2c", "message": "Clean up GC events, rename const names", "committedDate": "2020-07-16T18:39:07Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU5OTQwMw==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12711#discussion_r460599403", "body": "I don't think these fields are used... are they?  it scared me for a min to see fields in the NAMES_JSON without the IBM_ prefix (other than type / host).  For the fields that aren't used, I wonder if we should put in a dummy value to avoid them easily slipping into the code without being noticed.", "bodyText": "I don't think these fields are used... are they?  it scared me for a min to see fields in the NAMES_JSON without the IBM_ prefix (other than type / host).  For the fields that aren't used, I wonder if we should put in a dummy value to avoid them easily slipping into the code without being noticed.", "bodyHTML": "<p dir=\"auto\">I don't think these fields are used... are they?  it scared me for a min to see fields in the NAMES_JSON without the IBM_ prefix (other than type / host).  For the fields that aren't used, I wonder if we should put in a dummy value to avoid them easily slipping into the code without being noticed.</p>", "author": "donbourne", "createdAt": "2020-07-27T01:03:30Z", "path": "dev/com.ibm.ws.logging/src/com/ibm/ws/logging/data/FFDCData.java", "diffHunk": "@@ -23,43 +23,50 @@ public FFDCData() {\n         super(13);\n     }\n \n-    public static final String[] NAMES = {\n-                                           LogFieldConstants.DATETIME,\n-                                           LogFieldConstants.DATEOFFIRSTOCCURENCE,\n-                                           LogFieldConstants.COUNT,\n-                                           LogFieldConstants.MESSAGE,\n-                                           LogFieldConstants.CLASSNAME,\n-                                           LogFieldConstants.LABEL,\n-                                           LogFieldConstants.EXCEPTIONNAME,\n-                                           LogFieldConstants.PROBEID,\n-                                           LogFieldConstants.SOURCEID,\n-                                           LogFieldConstants.THREADID,\n-                                           LogFieldConstants.STACKTRACE,\n-                                           LogFieldConstants.OBJECTDETAILS,\n-                                           LogFieldConstants.SEQUENCE\n-    };\n-\n-    public static final String[] NAMES1_1 = {\n-                                              LogFieldConstants.IBM_DATETIME,\n+    public static final String[] NAMES_LC = {\n+                                              LogFieldConstants.DATETIME,\n                                               LogFieldConstants.DATEOFFIRSTOCCURENCE,\n                                               LogFieldConstants.COUNT,\n                                               LogFieldConstants.MESSAGE,\n-                                              LogFieldConstants.IBM_CLASSNAME,\n+                                              LogFieldConstants.CLASSNAME,\n                                               LogFieldConstants.LABEL,\n-                                              LogFieldConstants.IBM_EXCEPTIONNAME,\n-                                              LogFieldConstants.IBM_PROBEID,\n+                                              LogFieldConstants.EXCEPTIONNAME,\n+                                              LogFieldConstants.PROBEID,\n                                               LogFieldConstants.SOURCEID,\n-                                              LogFieldConstants.IBM_THREADID, //long\n-                                              LogFieldConstants.IBM_STACKTRACE,\n-                                              LogFieldConstants.IBM_OBJECTDETAILS,\n-                                              LogFieldConstants.IBM_SEQUENCE,\n-                                              LogFieldConstants.HOST,\n-                                              LogFieldConstants.IBM_USERDIR,\n-                                              LogFieldConstants.IBM_SERVERNAME,\n+                                              LogFieldConstants.THREADID,\n+                                              LogFieldConstants.STACKTRACE,\n+                                              LogFieldConstants.OBJECTDETAILS,\n+                                              LogFieldConstants.SEQUENCE,\n+                                              LogFieldConstants.HOSTNAME,\n+                                              LogFieldConstants.WLPUSERDIR,\n+                                              LogFieldConstants.SERVERNAME,\n                                               LogFieldConstants.TYPE\n     };\n \n-    private static NameAliases jsonLoggingNameAliases = new NameAliases(NAMES1_1);\n+    public static final String[] NAMES_JSON = {\n+                                                LogFieldConstants.IBM_DATETIME,\n+                                                LogFieldConstants.DATEOFFIRSTOCCURENCE,\n+                                                LogFieldConstants.COUNT,\n+                                                LogFieldConstants.MESSAGE,", "originalCommit": "3f8a030a85ef2975bd13eae0880ac56477f54d2c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTg2NDM1MA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12711#discussion_r461864350", "bodyText": "dateOfFirstOccurrence and count don't seem to be used, but message is. From an FFDC event generated on a clean wlp for 20.0.0.7:\n{\"type\":\"liberty_ffdc\",\"host\":\"192.168.64.1\",\"ibm_userDir\":\"\\/Users\\/jennifer.zhen.chengibm.com\\/20007\\/wlp\\/usr\\/\",\"ibm_serverName\":\"defaultServer\",\"ibm_datetime\":\"2020-07-28T09:49:03.205-0400\",\"message\":\"PKIX path validation failed: java.security.cert.CertPathValidatorException: signature check failed\",\"ibm_className\":\"com.ibm.ws.ssl.core.WSX509TrustManager\",\"ibm_exceptionName\":\"sun.security.validator.ValidatorException\",\"ibm_probeID\":\"checkServerTrusted\",\"ibm_threadId\":\"00000032\",\"ibm_stackTrace\":\"[snipped for space]\",\"ibm_objectDetails\":\"[snipped for space]\",\"ibm_sequence\":\"1595944143205_0000000000001\"}\n\nIs this concerning? \ud83d\ude13", "author": "jennifer-c", "createdAt": "2020-07-28T20:39:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU5OTQwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUzNTE0Nw==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12711#discussion_r462535147", "bodyText": "no, that's exactly the right list of fields to see in an ffdc JSON.  message is a special case that we didn't add an ibm_ prefix to because it makes it fit better with other events that you might want to show in the same views.\nSo, that said, I'm wondering if we should block out the field names we don't use (eg. with a constant like \"XXXXXXX\" rather than fill in the array with invalid (but harder to notice) ones?", "author": "donbourne", "createdAt": "2020-07-29T19:27:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU5OTQwMw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDYwOTMwOA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12711#discussion_r460609308", "body": "looks like you reversed the order of messageId and module.", "bodyText": "looks like you reversed the order of messageId and module.", "bodyHTML": "<p dir=\"auto\">looks like you reversed the order of messageId and module.</p>", "author": "donbourne", "createdAt": "2020-07-27T01:57:47Z", "path": "dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonUtils.java", "diffHunk": "@@ -142,82 +145,86 @@ private static String jsonifyTraceAndMessage(int maxFieldLength, String wlpUserD\n             formattedValue.append(CollectorJsonHelpers.LINE_SEPARATOR).append(throwable);\n         }\n \n-        CollectorJsonHelpers.addToJSON(sb, logData.getMessageKey(), formattedValue.toString(), false, true, false, false);\n-        CollectorJsonHelpers.addToJSON(sb, logData.getThreadIdKey(), DataFormatHelper.padHexString(logData.getThreadId(), 8), false, true, false, false);\n         String datetime = CollectorJsonHelpers.dateFormatTL.get().format(logData.getDatetime());\n-        CollectorJsonHelpers.addToJSON(sb, logData.getDatetimeKey(), datetime, false, true, false, false);\n-        CollectorJsonHelpers.addToJSON(sb, logData.getModuleKey(), logData.getModule(), false, true, false, false);\n-        CollectorJsonHelpers.addToJSON(sb, logData.getMessageIdKey(), logData.getMessageId(), false, true, false, false);\n-        CollectorJsonHelpers.addToJSON(sb, logData.getSeverityKey(), logData.getSeverity(), false, true, false, false);\n-        CollectorJsonHelpers.addToJSON(sb, logData.getMethodNameKey(), logData.getMethodName(), false, true, false, false);\n-        CollectorJsonHelpers.addToJSON(sb, logData.getClassNameKey(), logData.getClassName(), false, true, false, false);\n-        CollectorJsonHelpers.addToJSON(sb, logData.getSequenceKey(), logData.getSequence(), false, true, false, false);\n-        KeyValuePairList kvpl = logData.getExtensions();\n+\n+        //@formatter:off\n+        jsonBuilder.addField(LogTraceData.getMessageKey(LOGSTASH_KEY, isMessageEvent), formattedValue.toString(), false, true)\n+                   .addField(LogTraceData.getThreadIdKey(LOGSTASH_KEY, isMessageEvent), DataFormatHelper.padHexString(logData.getThreadId(), 8), false, true)\n+                   .addField(LogTraceData.getDatetimeKey(LOGSTASH_KEY, isMessageEvent), datetime, false, true)\n+                   .addField(LogTraceData.getMessageIdKey(LOGSTASH_KEY, isMessageEvent), logData.getMessageId(), false, true)\n+                   .addField(LogTraceData.getModuleKey(LOGSTASH_KEY, isMessageEvent), logData.getModule(), false, true)", "originalCommit": "3f8a030a85ef2975bd13eae0880ac56477f54d2c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a633dc14fb040bc3d9779c91e04c9a0d8cc67dc3", "changed_code": [{"header": "diff --git a/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonUtils.java b/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonUtils.java\nindex 51f4bc6401..94233415b6 100644\n--- a/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonUtils.java\n+++ b/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonUtils.java\n", "chunk": "@@ -151,9 +151,9 @@ public class CollectorJsonUtils {\n         jsonBuilder.addField(LogTraceData.getMessageKey(LOGSTASH_KEY, isMessageEvent), formattedValue.toString(), false, true)\n                    .addField(LogTraceData.getThreadIdKey(LOGSTASH_KEY, isMessageEvent), DataFormatHelper.padHexString(logData.getThreadId(), 8), false, true)\n                    .addField(LogTraceData.getDatetimeKey(LOGSTASH_KEY, isMessageEvent), datetime, false, true)\n-                   .addField(LogTraceData.getMessageIdKey(LOGSTASH_KEY, isMessageEvent), logData.getMessageId(), false, true)\n                    .addField(LogTraceData.getModuleKey(LOGSTASH_KEY, isMessageEvent), logData.getModule(), false, true)\n-                   .addField(LogTraceData.getLoglevelKey(LOGSTASH_KEY, isMessageEvent), logData.getLoglevel(), false, true)\n+                   .addField(LogTraceData.getMessageIdKey(LOGSTASH_KEY, isMessageEvent), logData.getMessageId(), false, true)\n+                   .addField(LogTraceData.getSeverityKey(LOGSTASH_KEY, isMessageEvent), logData.getSeverity(), false, true)\n                    .addField(LogTraceData.getMethodNameKey(LOGSTASH_KEY, isMessageEvent), logData.getMethodName(), false, true)\n                    .addField(LogTraceData.getClassNameKey(LOGSTASH_KEY, isMessageEvent), logData.getClassName(), false, true)\n                    .addField(LogTraceData.getSequenceKey(LOGSTASH_KEY, isMessageEvent), logData.getSequence(), false, true);\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDYwOTQ1MQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12711#discussion_r460609451", "body": "this was calling getSeverityKey before", "bodyText": "this was calling getSeverityKey before", "bodyHTML": "<p dir=\"auto\">this was calling getSeverityKey before</p>", "author": "donbourne", "createdAt": "2020-07-27T01:58:29Z", "path": "dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonUtils.java", "diffHunk": "@@ -142,82 +145,86 @@ private static String jsonifyTraceAndMessage(int maxFieldLength, String wlpUserD\n             formattedValue.append(CollectorJsonHelpers.LINE_SEPARATOR).append(throwable);\n         }\n \n-        CollectorJsonHelpers.addToJSON(sb, logData.getMessageKey(), formattedValue.toString(), false, true, false, false);\n-        CollectorJsonHelpers.addToJSON(sb, logData.getThreadIdKey(), DataFormatHelper.padHexString(logData.getThreadId(), 8), false, true, false, false);\n         String datetime = CollectorJsonHelpers.dateFormatTL.get().format(logData.getDatetime());\n-        CollectorJsonHelpers.addToJSON(sb, logData.getDatetimeKey(), datetime, false, true, false, false);\n-        CollectorJsonHelpers.addToJSON(sb, logData.getModuleKey(), logData.getModule(), false, true, false, false);\n-        CollectorJsonHelpers.addToJSON(sb, logData.getMessageIdKey(), logData.getMessageId(), false, true, false, false);\n-        CollectorJsonHelpers.addToJSON(sb, logData.getSeverityKey(), logData.getSeverity(), false, true, false, false);\n-        CollectorJsonHelpers.addToJSON(sb, logData.getMethodNameKey(), logData.getMethodName(), false, true, false, false);\n-        CollectorJsonHelpers.addToJSON(sb, logData.getClassNameKey(), logData.getClassName(), false, true, false, false);\n-        CollectorJsonHelpers.addToJSON(sb, logData.getSequenceKey(), logData.getSequence(), false, true, false, false);\n-        KeyValuePairList kvpl = logData.getExtensions();\n+\n+        //@formatter:off\n+        jsonBuilder.addField(LogTraceData.getMessageKey(LOGSTASH_KEY, isMessageEvent), formattedValue.toString(), false, true)\n+                   .addField(LogTraceData.getThreadIdKey(LOGSTASH_KEY, isMessageEvent), DataFormatHelper.padHexString(logData.getThreadId(), 8), false, true)\n+                   .addField(LogTraceData.getDatetimeKey(LOGSTASH_KEY, isMessageEvent), datetime, false, true)\n+                   .addField(LogTraceData.getMessageIdKey(LOGSTASH_KEY, isMessageEvent), logData.getMessageId(), false, true)\n+                   .addField(LogTraceData.getModuleKey(LOGSTASH_KEY, isMessageEvent), logData.getModule(), false, true)\n+                   .addField(LogTraceData.getLoglevelKey(LOGSTASH_KEY, isMessageEvent), logData.getLoglevel(), false, true)", "originalCommit": "3f8a030a85ef2975bd13eae0880ac56477f54d2c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a633dc14fb040bc3d9779c91e04c9a0d8cc67dc3", "changed_code": [{"header": "diff --git a/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonUtils.java b/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonUtils.java\nindex 51f4bc6401..94233415b6 100644\n--- a/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonUtils.java\n+++ b/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonUtils.java\n", "chunk": "@@ -151,9 +151,9 @@ public class CollectorJsonUtils {\n         jsonBuilder.addField(LogTraceData.getMessageKey(LOGSTASH_KEY, isMessageEvent), formattedValue.toString(), false, true)\n                    .addField(LogTraceData.getThreadIdKey(LOGSTASH_KEY, isMessageEvent), DataFormatHelper.padHexString(logData.getThreadId(), 8), false, true)\n                    .addField(LogTraceData.getDatetimeKey(LOGSTASH_KEY, isMessageEvent), datetime, false, true)\n-                   .addField(LogTraceData.getMessageIdKey(LOGSTASH_KEY, isMessageEvent), logData.getMessageId(), false, true)\n                    .addField(LogTraceData.getModuleKey(LOGSTASH_KEY, isMessageEvent), logData.getModule(), false, true)\n-                   .addField(LogTraceData.getLoglevelKey(LOGSTASH_KEY, isMessageEvent), logData.getLoglevel(), false, true)\n+                   .addField(LogTraceData.getMessageIdKey(LOGSTASH_KEY, isMessageEvent), logData.getMessageId(), false, true)\n+                   .addField(LogTraceData.getSeverityKey(LOGSTASH_KEY, isMessageEvent), logData.getSeverity(), false, true)\n                    .addField(LogTraceData.getMethodNameKey(LOGSTASH_KEY, isMessageEvent), logData.getMethodName(), false, true)\n                    .addField(LogTraceData.getClassNameKey(LOGSTASH_KEY, isMessageEvent), logData.getClassName(), false, true)\n                    .addField(LogTraceData.getSequenceKey(LOGSTASH_KEY, isMessageEvent), logData.getSequence(), false, true);\n", "next_change": null}]}}, {"oid": "a633dc14fb040bc3d9779c91e04c9a0d8cc67dc3", "url": "https://github.com/OpenLiberty/open-liberty/commit/a633dc14fb040bc3d9779c91e04c9a0d8cc67dc3", "message": "Address comments", "committedDate": "2020-07-28T21:35:56Z", "type": "commit"}]}