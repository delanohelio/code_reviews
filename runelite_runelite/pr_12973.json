{"pr_number": 12973, "pr_title": "Java 14-16 compatability", "pr_author": "abextm", "pr_createdAt": "2020-12-24T18:43:21Z", "pr_url": "https://github.com/runelite/runelite/pull/12973", "timeline": [{"oid": "cd13d17cda1e9a19680ab903ed556195a876a66a", "url": "https://github.com/runelite/runelite/commit/cd13d17cda1e9a19680ab903ed556195a876a66a", "message": "ReflectUtil: allow privateLookupIn cross-classloader with JDK-8173978", "committedDate": "2020-12-24T19:35:01Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjAxOTMzOQ==", "url": "https://github.com/runelite/runelite/pull/12973#discussion_r556019339", "body": "```suggestion\r\n\t\t\t\twhile (in.peek() != JsonToken.END_OBJECT)\r\n```\r\nfor all the type adapter loops", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t\tfor (; in.peek() != JsonToken.END_OBJECT; )\n          \n          \n            \n            \t\t\t\twhile (in.peek() != JsonToken.END_OBJECT)\n          \n      \n    \n    \n  \n\nfor all the type adapter loops", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">\t\t\t\t<span class=\"pl-k x x-first\">for</span><span class=\"x x-last\"> (; </span>in<span class=\"pl-k\">.</span>peek() <span class=\"pl-k\">!=</span> <span class=\"pl-smi\">JsonToken</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>END_OBJECT</span><span class=\"x x-first x-last\">; </span>)</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">\t\t\t\t<span class=\"pl-k x x-first\">while</span><span class=\"x x-last\"> (</span>in<span class=\"pl-k\">.</span>peek() <span class=\"pl-k\">!=</span> <span class=\"pl-smi\">JsonToken</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>END_OBJECT</span>)</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\">for all the type adapter loops</p>", "author": "Nightfirecat", "createdAt": "2021-01-12T19:25:01Z", "path": "http-api/src/main/java/net/runelite/http/api/gson/ColorTypeAdapter.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright (c) 2020 Abex\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this\n+ *    list of conditions and the following disclaimer.\n+ * 2. Redistributions in binary form must reproduce the above copyright notice,\n+ *    this list of conditions and the following disclaimer in the documentation\n+ *    and/or other materials provided with the distribution.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package net.runelite.http.api.gson;\n+\n+import com.google.gson.TypeAdapter;\n+import com.google.gson.stream.JsonReader;\n+import com.google.gson.stream.JsonToken;\n+import com.google.gson.stream.JsonWriter;\n+import java.awt.Color;\n+import java.io.IOException;\n+\n+public class ColorTypeAdapter extends TypeAdapter<Color>\n+{\n+\t@Override\n+\tpublic void write(JsonWriter out, Color value) throws IOException\n+\t{\n+\t\tint rgba = value.getRGB();\n+\t\tout.beginObject()\n+\t\t\t.name(\"value\")\n+\t\t\t.value(rgba)\n+\t\t\t.endObject();\n+\t}\n+\n+\t@Override\n+\tpublic Color read(JsonReader in) throws IOException\n+\t{\n+\t\tswitch (in.peek())\n+\t\t{\n+\t\t\tcase NULL:\n+\t\t\t\tin.nextNull();\n+\t\t\t\treturn null;\n+\t\t\tcase BEGIN_OBJECT:\n+\t\t\t\tin.beginObject();\n+\t\t\t\tdouble value = 0;\n+\t\t\t\tfor (; in.peek() != JsonToken.END_OBJECT; )", "originalCommit": "a35167fefb530e9c8c8f8a2996a8d99c43f58262", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjAzMjA4Mw==", "url": "https://github.com/runelite/runelite/pull/12973#discussion_r556032083", "body": ":joy: ", "bodyText": "\ud83d\ude02", "bodyHTML": "<p dir=\"auto\"><g-emoji class=\"g-emoji\" alias=\"joy\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f602.png\">\ud83d\ude02</g-emoji></p>", "author": "Nightfirecat", "createdAt": "2021-01-12T19:40:05Z", "path": "http-api/src/main/java/net/runelite/http/api/gson/InstantTypeAdapter.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright (c) 2020 Abex\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this\n+ *    list of conditions and the following disclaimer.\n+ * 2. Redistributions in binary form must reproduce the above copyright notice,\n+ *    this list of conditions and the following disclaimer in the documentation\n+ *    and/or other materials provided with the distribution.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package net.runelite.http.api.gson;\n+\n+import com.google.gson.TypeAdapter;\n+import com.google.gson.stream.JsonReader;\n+import com.google.gson.stream.JsonToken;\n+import com.google.gson.stream.JsonWriter;\n+import java.io.IOException;\n+import java.time.Instant;\n+\n+// Just add water!", "originalCommit": "a35167fefb530e9c8c8f8a2996a8d99c43f58262", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjAzMjU4NQ==", "url": "https://github.com/runelite/runelite/pull/12973#discussion_r556032585", "body": "Do we not need to handle null color values for this?", "bodyText": "Do we not need to handle null color values for this?", "bodyHTML": "<p dir=\"auto\">Do we not need to handle null color values for this?</p>", "author": "Nightfirecat", "createdAt": "2021-01-12T19:40:43Z", "path": "http-api/src/main/java/net/runelite/http/api/gson/ColorTypeAdapter.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright (c) 2020 Abex\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this\n+ *    list of conditions and the following disclaimer.\n+ * 2. Redistributions in binary form must reproduce the above copyright notice,\n+ *    this list of conditions and the following disclaimer in the documentation\n+ *    and/or other materials provided with the distribution.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package net.runelite.http.api.gson;\n+\n+import com.google.gson.TypeAdapter;\n+import com.google.gson.stream.JsonReader;\n+import com.google.gson.stream.JsonToken;\n+import com.google.gson.stream.JsonWriter;\n+import java.awt.Color;\n+import java.io.IOException;\n+\n+public class ColorTypeAdapter extends TypeAdapter<Color>\n+{\n+\t@Override\n+\tpublic void write(JsonWriter out, Color value) throws IOException\n+\t{\n+\t\tint rgba = value.getRGB();", "originalCommit": "a35167fefb530e9c8c8f8a2996a8d99c43f58262", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "4650a2a88efbe4c792b20257b50b23531fb701c7", "url": "https://github.com/runelite/runelite/commit/4650a2a88efbe4c792b20257b50b23531fb701c7", "message": "ReflectUtil: allow privateLookupIn cross-classloader with JDK-8173978", "committedDate": "2021-01-14T12:20:43Z", "type": "forcePushed"}, {"oid": "81f5f5caa13851a4a4dc8add885cd23895fa558f", "url": "https://github.com/runelite/runelite/commit/81f5f5caa13851a4a4dc8add885cd23895fa558f", "message": "don't use gson's reflection serialization on non RuneLite classes\n\njava >=16 disallows access to most private fields which makes these\nfail with the reflection type adapter", "committedDate": "2021-01-29T11:38:00Z", "type": "commit"}, {"oid": "7e04638f151c2c4ca02520b67096f02cbbe188d9", "url": "https://github.com/runelite/runelite/commit/7e04638f151c2c4ca02520b67096f02cbbe188d9", "message": "ReflectUtil: allow privateLookupIn cross-classloader with JDK-8173978", "committedDate": "2021-01-29T11:38:01Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzA1NjU1MA==", "url": "https://github.com/runelite/runelite/pull/12973#discussion_r567056550", "body": "```suggestion\r\n\t * module that calls MethodHandles.lookup() and stores it in the classloader for later use.\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t * module that calls MethodHandles.lookup() and stores it in ReflectUtil for later use.\n          \n          \n            \n            \t * module that calls MethodHandles.lookup() and stores it in the classloader for later use.", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">\t <span class=\"pl-k\">*</span> module that calls <span class=\"pl-smi\">MethodHandles</span><span class=\"pl-k\">.</span>lookup() and stores it in <span class=\"pl-smi x x-first x-last\">ReflectUtil</span> <span class=\"pl-k\">for</span> later use.</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">\t <span class=\"pl-k\">*</span> module that calls <span class=\"pl-smi\">MethodHandles</span><span class=\"pl-k\">.</span>lookup() and stores it in <span class=\"x x-first x-last\">the classloader</span> <span class=\"pl-k\">for</span> later use.</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "Adam-", "createdAt": "2021-01-29T19:48:02Z", "path": "runelite-client/src/main/java/net/runelite/client/util/ReflectUtil.java", "diffHunk": "@@ -69,4 +80,51 @@ private ReflectUtil()\n \t\t\t}\n \t\t}\n \t}\n+\n+\tpublic interface PrivateLookupableClassLoader\n+\t{\n+\t\t// define class is protected final so this needs a different name to become public\n+\t\tClass<?> defineClass0(String name, byte[] b, int off, int len) throws ClassFormatError;\n+\n+\t\tMethodHandles.Lookup getLookup();\n+\t\tvoid setLookup(MethodHandles.Lookup lookup);\n+\t}\n+\n+\t/**\n+\t * Allows private Lookups to be created for classes in this ClassLoader\n+\t * <p>\n+\t * Due to JDK-8173978 it is impossible to create get a lookup with module scoped permissions when teleporting\n+\t * between modules. Since external plugins are loaded in a separate classloader to us they are contained in unique\n+\t * unnamed modules. Since we (via LambdaMetafactory) are creating a hidden class in that module, we require module\n+\t * scoped access to it, and since the methods can be private, we also require private access. The only way to get\n+\t * MODULE|PRIVATE is to either 1) invokedynamic in that class, 2) call MethodHandles.lookup() from that class, or\n+\t * 3) call privateLookupIn with an existing lookup with PRIVATE|MODULE created from a class in the same module.\n+\t * Our solution is to make classloaders call this method which will define a class in the classloader's unnamed\n+\t * module that calls MethodHandles.lookup() and stores it in ReflectUtil for later use.", "originalCommit": "7e04638f151c2c4ca02520b67096f02cbbe188d9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "90b601109cbdab2fcb4e7860119852b81b6bd582", "url": "https://github.com/runelite/runelite/commit/90b601109cbdab2fcb4e7860119852b81b6bd582", "message": "ReflectUtil: allow privateLookupIn cross-classloader with JDK-8173978", "committedDate": "2021-01-30T02:55:12Z", "type": "commit"}, {"oid": "90b601109cbdab2fcb4e7860119852b81b6bd582", "url": "https://github.com/runelite/runelite/commit/90b601109cbdab2fcb4e7860119852b81b6bd582", "message": "ReflectUtil: allow privateLookupIn cross-classloader with JDK-8173978", "committedDate": "2021-01-30T02:55:12Z", "type": "forcePushed"}]}