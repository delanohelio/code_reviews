{"pr_number": 10707, "pr_title": "PluginManager: require start/stop to be invoked on the EDT", "pr_author": "abextm", "pr_createdAt": "2020-02-01T01:13:06Z", "pr_url": "https://github.com/runelite/runelite/pull/10707", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjczNDYwOA==", "url": "https://github.com/runelite/runelite/pull/10707#discussion_r376734608", "body": "Are you sure this is the correct way to handle this?", "bodyText": "Are you sure this is the correct way to handle this?", "bodyHTML": "<p dir=\"auto\">Are you sure this is the correct way to handle this?</p>", "author": "Adam-", "createdAt": "2020-02-08T21:09:54Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/PluginManager.java", "diffHunk": "@@ -215,12 +217,22 @@ public void startPlugins()\n \t\t{\n \t\t\ttry\n \t\t\t{\n-\t\t\t\tstartPlugin(plugin);\n+\t\t\t\tSwingUtilities.invokeAndWait(() ->\n+\t\t\t\t{\n+\t\t\t\t\ttry\n+\t\t\t\t\t{\n+\t\t\t\t\t\tstartPlugin(plugin);\n+\t\t\t\t\t}\n+\t\t\t\t\tcatch (PluginInstantiationException ex)\n+\t\t\t\t\t{\n+\t\t\t\t\t\tlog.warn(\"Unable to start plugin {}\", plugin.getClass().getSimpleName(), ex);\n+\t\t\t\t\t\tplugins.remove(plugin);\n+\t\t\t\t\t}\n+\t\t\t\t});\n \t\t\t}\n-\t\t\tcatch (PluginInstantiationException ex)\n+\t\t\tcatch (InterruptedException | InvocationTargetException e)\n \t\t\t{\n-\t\t\t\tlog.warn(\"Unable to start plugin {}\", plugin.getClass().getSimpleName(), ex);\n-\t\t\t\tplugins.remove(plugin);\n+\t\t\t\tthrow new RuntimeException(e);", "originalCommit": "ce204ca2d44780dc1e2fcf6e35ce37b26aaac851", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njc0ODQxOA==", "url": "https://github.com/runelite/runelite/pull/10707#discussion_r376748418", "bodyText": "this should never happen unless the thread gets interrupted (which should be unchecked anyway imo)", "author": "abextm", "createdAt": "2020-02-09T02:02:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjczNDYwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjczNjM0Mg==", "url": "https://github.com/runelite/runelite/pull/10707#discussion_r376736342", "body": "```suggestion\r\n\t\t\t\t\t\tcatch (Exception e)\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t\t\t\tcatch (Exception e2)\n          \n          \n            \n            \t\t\t\t\t\tcatch (Exception e)", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">\t\t\t\t\t\t<span class=\"pl-k\">catch</span> (<span class=\"pl-smi\">Exception</span> <span class=\"x x-first x-last\">e2</span>)</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">\t\t\t\t\t\t<span class=\"pl-k\">catch</span> (<span class=\"pl-smi\">Exception</span> <span class=\"x x-first x-last\">e</span>)</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "Adam-", "createdAt": "2020-02-08T21:41:58Z", "path": "runelite-client/src/main/java/net/runelite/client/externalplugins/ExternalPluginManager.java", "diffHunk": "@@ -242,9 +244,19 @@ private void refreshPlugins()\n \t\t\t\tlog.info(\"Stopping external plugin \\\"{}\\\"\", p.getClass());\n \t\t\t\ttry\n \t\t\t\t{\n-\t\t\t\t\tpluginManager.stopPlugin(p);\n+\t\t\t\t\tSwingUtilities.invokeAndWait(() ->\n+\t\t\t\t\t{\n+\t\t\t\t\t\ttry\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\tpluginManager.stopPlugin(p);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tcatch (Exception e2)", "originalCommit": "ce204ca2d44780dc1e2fcf6e35ce37b26aaac851", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "089a793ba01f0c20745dd933cbc9550784444360", "url": "https://github.com/runelite/runelite/commit/089a793ba01f0c20745dd933cbc9550784444360", "message": "PluginManager: require start/stop to be invoked on the EDT\n\nThe current way of invoking it on the executor would let the client have\na start and a stop for a plugin sitting in the executor's queue, making\nit toggle endlessly. This only was because we were using invokeAndWait\nin startPlugin, which can't be invoked on the EDT because it would\ndeadlock with itself.", "committedDate": "2020-02-09T12:20:47Z", "type": "commit"}, {"oid": "089a793ba01f0c20745dd933cbc9550784444360", "url": "https://github.com/runelite/runelite/commit/089a793ba01f0c20745dd933cbc9550784444360", "message": "PluginManager: require start/stop to be invoked on the EDT\n\nThe current way of invoking it on the executor would let the client have\na start and a stop for a plugin sitting in the executor's queue, making\nit toggle endlessly. This only was because we were using invokeAndWait\nin startPlugin, which can't be invoked on the EDT because it would\ndeadlock with itself.", "committedDate": "2020-02-09T12:20:47Z", "type": "forcePushed"}]}