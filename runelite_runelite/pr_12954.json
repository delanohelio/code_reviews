{"pr_number": 12954, "pr_title": "XP Globes: add virtual level to config and xp globes", "pr_author": "wrightmalone", "pr_createdAt": "2020-12-20T01:33:20Z", "pr_url": "https://github.com/runelite/runelite/pull/12954", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzgzODMyMA==", "url": "https://github.com/runelite/runelite/pull/12954#discussion_r557838320", "body": "Invoke this in `before()` instead of calling it in each test case", "bodyText": "Invoke this in before() instead of calling it in each test case", "bodyHTML": "<p dir=\"auto\">Invoke this in <code>before()</code> instead of calling it in each test case</p>", "author": "Nightfirecat", "createdAt": "2021-01-15T03:21:13Z", "path": "runelite-client/src/test/java/net/runelite/client/plugins/xpglobes/XpGlobesTest.java", "diffHunk": "@@ -0,0 +1,181 @@\n+package net.runelite.client.plugins.xpglobes;\n+\n+import com.google.inject.Guice;\n+import com.google.inject.testing.fieldbinder.Bind;\n+import com.google.inject.testing.fieldbinder.BoundFieldModule;\n+import java.util.Collections;\n+import javax.inject.Inject;\n+import net.runelite.api.Experience;\n+import net.runelite.api.Skill;\n+import net.runelite.api.events.StatChanged;\n+import net.runelite.client.plugins.xptracker.XpTrackerService;\n+import net.runelite.client.ui.overlay.OverlayManager;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import static org.mockito.Mockito.when;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class XpGlobesTest\n+{\n+\t@Inject\n+\tprivate XpGlobesPlugin xpGlobesPlugin;\n+\n+\t@Mock\n+\t@Bind\n+\tprivate OverlayManager overlayManager;\n+\n+\t@Mock\n+\t@Bind\n+\tprivate XpGlobesOverlay xpGlobesOverlay;\n+\n+\t@Mock\n+\t@Bind\n+\tprivate XpTrackerService xpTrackerService;\n+\n+\t@Mock\n+\t@Bind\n+\tprivate XpGlobesConfig xpGlobesConfig;\n+\n+\t@Before\n+\tpublic void before()\n+\t{\n+\t\tGuice.createInjector(BoundFieldModule.of(this)).injectMembers(this);\n+\t}\n+\n+\t@Test\n+\tpublic void testVirtualLevelInGlobeIsNotShownByDefault()\n+\t{\n+\t\tint totalXp = 15_000_000;\n+\t\trunFirstStatChangeForCaching(totalXp);\n+\t\tassertTrue(xpGlobesPlugin.getXpGlobes().isEmpty());\n+\n+\t\tStatChanged secondStatChangedEvent = new StatChanged(\n+\t\t\tSkill.AGILITY,\n+\t\t\ttotalXp + 1,\n+\t\t\t99,\n+\t\t\t0\n+\t\t);\n+\n+\t\t// The next xp change adds a globe\n+\t\txpGlobesPlugin.onStatChanged(secondStatChangedEvent);\n+\t\tassertEquals(Experience.MAX_REAL_LEVEL, xpGlobesPlugin.getXpGlobes().get(0).getCurrentLevel());\n+\t}\n+\n+\t@Test\n+\tpublic void testVirtualLevelInGlobeIsShownWhenConfigured()\n+\t{\n+\t\tint totalXp = 15_000_000;\n+\t\twhen(xpGlobesConfig.showVirtualLevel()).thenReturn(true);\n+\t\trunFirstStatChangeForCaching(totalXp);\n+\t\tassertTrue(xpGlobesPlugin.getXpGlobes().isEmpty());\n+\n+\t\tStatChanged secondStatChangedEvent = new StatChanged(\n+\t\t\tSkill.AGILITY,\n+\t\t\ttotalXp + 1,\n+\t\t\t99,\n+\t\t\t0\n+\t\t);\n+\n+\t\t// The next xp change adds a globe\n+\t\txpGlobesPlugin.onStatChanged(secondStatChangedEvent);\n+\t\tassertEquals(Experience.getLevelForXp(totalXp + 1), xpGlobesPlugin.getXpGlobes().get(0).getCurrentLevel());\n+\t}\n+\n+\t@Test\n+\tpublic void testGlobeIsNotShownWhenHideMaxAndShowVirtualLevelConfigured()\n+\t{\n+\t\tint totalXp = 15_000_000;\n+\t\twhen(xpGlobesConfig.hideMaxed()).thenReturn(true);\n+\t\trunFirstStatChangeForCaching(totalXp);\n+\t\tassertTrue(xpGlobesPlugin.getXpGlobes().isEmpty());\n+\n+\t\tStatChanged secondStatChangedEvent = new StatChanged(\n+\t\t\tSkill.AGILITY,\n+\t\t\ttotalXp + 1,\n+\t\t\t99,\n+\t\t\t0\n+\t\t);\n+\n+\t\t// The next xp change adds a globe\n+\t\txpGlobesPlugin.onStatChanged(secondStatChangedEvent);\n+\t\tassertEquals(Collections.emptyList(), xpGlobesPlugin.getXpGlobes());\n+\t}\n+\n+\t@Test\n+\tpublic void testGlobeIsNotShownWhenHideMaxConfigured()\n+\t{\n+\t\tint totalXp = 15_000_000;\n+\t\twhen(xpGlobesConfig.hideMaxed()).thenReturn(true);\n+\t\trunFirstStatChangeForCaching(totalXp);\n+\t\tassertTrue(xpGlobesPlugin.getXpGlobes().isEmpty());\n+\n+\t\tStatChanged secondStatChangedEvent = new StatChanged(\n+\t\t\tSkill.AGILITY,\n+\t\t\ttotalXp + 1,\n+\t\t\t99,\n+\t\t\t0\n+\t\t);\n+\n+\t\t// The next xp change adds a globe\n+\t\txpGlobesPlugin.onStatChanged(secondStatChangedEvent);\n+\t\tassertEquals(Collections.emptyList(), xpGlobesPlugin.getXpGlobes());\n+\t}\n+\n+\t@Test\n+\tpublic void testGlobeIsShownOnXpGainBelowMaxWhenHideMaxConfigured()\n+\t{\n+\t\tint totalXp = 1;\n+\t\twhen(xpGlobesConfig.showVirtualLevel()).thenReturn(true);\n+\t\twhen(xpGlobesConfig.hideMaxed()).thenReturn(true);\n+\t\trunFirstStatChangeForCaching(totalXp);\n+\t\tassertTrue(xpGlobesPlugin.getXpGlobes().isEmpty());\n+\n+\t\tStatChanged secondStatChangedEvent = new StatChanged(\n+\t\t\tSkill.AGILITY,\n+\t\t\ttotalXp + 150,\n+\t\t\tExperience.getLevelForXp(totalXp + 150),\n+\t\t\t0\n+\t\t);\n+\n+\t\t// The next xp change adds a globe\n+\t\txpGlobesPlugin.onStatChanged(secondStatChangedEvent);\n+\t\tassertEquals(Experience.getLevelForXp(totalXp + 150), xpGlobesPlugin.getXpGlobes().get(0).getCurrentLevel());\n+\t}\n+\n+\t@Test\n+\tpublic void testStatChangesFromBoostDoNotAffectXpGlobes()\n+\t{\n+\t\tint total_xp = 9_000_000;\n+\t\trunFirstStatChangeForCaching(total_xp);\n+\t\tassertEquals(Collections.emptyList(), xpGlobesPlugin.getXpGlobes());\n+\n+\t\tStatChanged boostEvent = new StatChanged(\n+\t\t\tSkill.AGILITY,\n+\t\t\ttotal_xp,\n+\t\t\tExperience.getLevelForXp(total_xp),\n+\t\t\t5\n+\t\t);\n+\n+\t\t// XP hasn't changed since the first event, so no globe should be added\n+\t\txpGlobesPlugin.onStatChanged(boostEvent);\n+\t\tassertTrue(xpGlobesPlugin.getXpGlobes().isEmpty());\n+\t}\n+\n+\tvoid runFirstStatChangeForCaching(int totalXp)", "originalCommit": "54fe7f06f78d9a0a290446bb7332c6fc26931538", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTIwMjM0NQ==", "url": "https://github.com/runelite/runelite/pull/12954#discussion_r559202345", "bodyText": "done", "author": "wrightmalone", "createdAt": "2021-01-17T16:10:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzgzODMyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzgzODc1OQ==", "url": "https://github.com/runelite/runelite/pull/12954#discussion_r557838759", "body": "This can be combined with the check above as follows:\r\n\r\n```java\r\nif (currentLevel >= Experience.MAX_REAL_LEVEL)\r\n{\r\n\tif (config.hideMaxed())\r\n\t{\r\n\t\treturn;\r\n\t}\r\n\telse if (config.showVirtualLevel())\r\n\t{\r\n\t\tcurrentLevel = Experience.getLevelForXp(currentXp);\r\n\t}\r\n}\r\n```", "bodyText": "This can be combined with the check above as follows:\nif (currentLevel >= Experience.MAX_REAL_LEVEL)\n{\n\tif (config.hideMaxed())\n\t{\n\t\treturn;\n\t}\n\telse if (config.showVirtualLevel())\n\t{\n\t\tcurrentLevel = Experience.getLevelForXp(currentXp);\n\t}\n}", "bodyHTML": "<p dir=\"auto\">This can be combined with the check above as follows:</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"if (currentLevel &gt;= Experience.MAX_REAL_LEVEL)\n{\n\tif (config.hideMaxed())\n\t{\n\t\treturn;\n\t}\n\telse if (config.showVirtualLevel())\n\t{\n\t\tcurrentLevel = Experience.getLevelForXp(currentXp);\n\t}\n}\"><pre><span class=\"pl-k\">if</span> (currentLevel <span class=\"pl-k\">&gt;=</span> <span class=\"pl-smi\">Experience</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>MAX_REAL_LEVEL</span>)\n{\n\t<span class=\"pl-k\">if</span> (config<span class=\"pl-k\">.</span>hideMaxed())\n\t{\n\t\t<span class=\"pl-k\">return</span>;\n\t}\n\t<span class=\"pl-k\">else</span> <span class=\"pl-k\">if</span> (config<span class=\"pl-k\">.</span>showVirtualLevel())\n\t{\n\t\tcurrentLevel <span class=\"pl-k\">=</span> <span class=\"pl-smi\">Experience</span><span class=\"pl-k\">.</span>getLevelForXp(currentXp);\n\t}\n}</pre></div>", "author": "Nightfirecat", "createdAt": "2021-01-15T03:23:02Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/xpglobes/XpGlobesPlugin.java", "diffHunk": "@@ -111,6 +111,11 @@ public void onStatChanged(StatChanged statChanged)\n \t\t\treturn;\n \t\t}\n \n+\t\tif (config.showVirtualLevel() && currentLevel >= Experience.MAX_REAL_LEVEL)", "originalCommit": "54fe7f06f78d9a0a290446bb7332c6fc26931538", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTIwMjI3NA==", "url": "https://github.com/runelite/runelite/pull/12954#discussion_r559202274", "bodyText": "done", "author": "wrightmalone", "createdAt": "2021-01-17T16:09:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzgzODc1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDU2NDg2Mw==", "url": "https://github.com/runelite/runelite/pull/12954#discussion_r560564863", "body": "This value doesn't seem to be changed in any test, and should probably be a static final variable rather than initialized in `before()`:\r\n\r\n```java\r\nprivate static final int virtualLevelTotalXp = Experience.getXpForLevel(Experience.MAX_REAL_LEVEL + 1);\r\n```", "bodyText": "This value doesn't seem to be changed in any test, and should probably be a static final variable rather than initialized in before():\nprivate static final int virtualLevelTotalXp = Experience.getXpForLevel(Experience.MAX_REAL_LEVEL + 1);", "bodyHTML": "<p dir=\"auto\">This value doesn't seem to be changed in any test, and should probably be a static final variable rather than initialized in <code>before()</code>:</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"private static final int virtualLevelTotalXp = Experience.getXpForLevel(Experience.MAX_REAL_LEVEL + 1);\"><pre><span class=\"pl-k\">private</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">final</span> <span class=\"pl-k\">int</span> virtualLevelTotalXp <span class=\"pl-k\">=</span> <span class=\"pl-smi\">Experience</span><span class=\"pl-k\">.</span>getXpForLevel(<span class=\"pl-smi\">Experience</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>MAX_REAL_LEVEL</span> <span class=\"pl-k\">+</span> <span class=\"pl-c1\">1</span>);</pre></div>", "author": "Nightfirecat", "createdAt": "2021-01-19T23:18:45Z", "path": "runelite-client/src/test/java/net/runelite/client/plugins/xpglobes/XpGlobesTest.java", "diffHunk": "@@ -0,0 +1,168 @@\n+package net.runelite.client.plugins.xpglobes;\n+\n+import com.google.inject.Guice;\n+import com.google.inject.testing.fieldbinder.Bind;\n+import com.google.inject.testing.fieldbinder.BoundFieldModule;\n+import java.util.Collections;\n+import javax.inject.Inject;\n+import net.runelite.api.Experience;\n+import net.runelite.api.Skill;\n+import net.runelite.api.events.StatChanged;\n+import net.runelite.client.plugins.xptracker.XpTrackerService;\n+import net.runelite.client.ui.overlay.OverlayManager;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import static org.mockito.Mockito.when;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class XpGlobesTest\n+{\n+\t@Inject\n+\tprivate XpGlobesPlugin xpGlobesPlugin;\n+\n+\t@Mock\n+\t@Bind\n+\tprivate OverlayManager overlayManager;\n+\n+\t@Mock\n+\t@Bind\n+\tprivate XpGlobesOverlay xpGlobesOverlay;\n+\n+\t@Mock\n+\t@Bind\n+\tprivate XpTrackerService xpTrackerService;\n+\n+\t@Mock\n+\t@Bind\n+\tprivate XpGlobesConfig xpGlobesConfig;\n+\n+\tprivate int virtualLevelTotalXp;", "originalCommit": "18176d68b3d8311c70ecd807da6f537814bb47f1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDU4NzAyNw==", "url": "https://github.com/runelite/runelite/pull/12954#discussion_r560587027", "bodyText": "I like that a lot. Done.", "author": "wrightmalone", "createdAt": "2021-01-20T00:15:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDU2NDg2Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDU4ODM2NA==", "url": "https://github.com/runelite/runelite/pull/12954#discussion_r560588364", "body": "Whoops I missed this, this should be private.\r\n\r\nAlso, the tests in general can be changed to use this to create and dispatch StatChanged events. e.g.\r\n```java\r\n@Test\r\npublic void testVirtualLevelInGlobeIsNotShownByDefault()\r\n{\r\n\tstatChanged(Skill.AGILITY, Experience.getXpForLevel(99) + 1);\r\n\tassertEquals(Experience.MAX_REAL_LEVEL, xpGlobesPlugin.getXpGlobes().get(0).getCurrentLevel());`\r\n}\r\n```\r\n\r\nThe only thing you'd need then is to add a `boostedLevel` overload to this method for the `testStatChangesFromBoostDoNotAffectXpGlobes()` test.\r\n```suggestion\r\n\tprivate void statChanged(Skill skill, int totalXp)\r\n```", "bodyText": "Whoops I missed this, this should be private.\nAlso, the tests in general can be changed to use this to create and dispatch StatChanged events. e.g.\n@Test\npublic void testVirtualLevelInGlobeIsNotShownByDefault()\n{\n\tstatChanged(Skill.AGILITY, Experience.getXpForLevel(99) + 1);\n\tassertEquals(Experience.MAX_REAL_LEVEL, xpGlobesPlugin.getXpGlobes().get(0).getCurrentLevel());`\n}\nThe only thing you'd need then is to add a boostedLevel overload to this method for the testStatChangesFromBoostDoNotAffectXpGlobes() test.\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tvoid runFirstStatChangeForCaching(int totalXp, Skill skill)\n          \n          \n            \n            \tprivate void statChanged(Skill skill, int totalXp)", "bodyHTML": "<p dir=\"auto\">Whoops I missed this, this should be private.</p>\n<p dir=\"auto\">Also, the tests in general can be changed to use this to create and dispatch StatChanged events. e.g.</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"@Test\npublic void testVirtualLevelInGlobeIsNotShownByDefault()\n{\n\tstatChanged(Skill.AGILITY, Experience.getXpForLevel(99) + 1);\n\tassertEquals(Experience.MAX_REAL_LEVEL, xpGlobesPlugin.getXpGlobes().get(0).getCurrentLevel());`\n}\"><pre><span class=\"pl-k\">@Test</span>\n<span class=\"pl-k\">public</span> <span class=\"pl-k\">void</span> testVirtualLevelInGlobeIsNotShownByDefault()\n{\n\tstatChanged(<span class=\"pl-smi\">Skill</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>AGILITY</span>, <span class=\"pl-smi\">Experience</span><span class=\"pl-k\">.</span>getXpForLevel(<span class=\"pl-c1\">99</span>) <span class=\"pl-k\">+</span> <span class=\"pl-c1\">1</span>);\n\tassertEquals(<span class=\"pl-smi\">Experience</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>MAX_REAL_LEVEL</span>, xpGlobesPlugin<span class=\"pl-k\">.</span>getXpGlobes()<span class=\"pl-k\">.</span>get(<span class=\"pl-c1\">0</span>)<span class=\"pl-k\">.</span>getCurrentLevel());`\n}</pre></div>\n<p dir=\"auto\">The only thing you'd need then is to add a <code>boostedLevel</code> overload to this method for the <code>testStatChangesFromBoostDoNotAffectXpGlobes()</code> test.</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">\t<span class=\"pl-k\">void</span> <span class=\"x x-first\">runFirstStatChangeForCaching(</span><span class=\"pl-k x\">int</span><span class=\"x\"> totalXp, </span><span class=\"pl-smi x\">Skill</span><span class=\"x x-last\"> skill</span>)</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">\t<span class=\"pl-k x x-first\">private</span><span class=\"x x-last\"> </span><span class=\"pl-k\">void</span> <span class=\"x x-first\">statChanged(</span><span class=\"pl-smi x\">Skill</span><span class=\"x\"> skill, </span><span class=\"pl-k x\">int</span><span class=\"x x-last\"> totalXp</span>)</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "Nightfirecat", "createdAt": "2021-01-20T00:19:26Z", "path": "runelite-client/src/test/java/net/runelite/client/plugins/xpglobes/XpGlobesTest.java", "diffHunk": "@@ -0,0 +1,167 @@\n+package net.runelite.client.plugins.xpglobes;\n+\n+import com.google.inject.Guice;\n+import com.google.inject.testing.fieldbinder.Bind;\n+import com.google.inject.testing.fieldbinder.BoundFieldModule;\n+import java.util.Collections;\n+import javax.inject.Inject;\n+import net.runelite.api.Experience;\n+import net.runelite.api.Skill;\n+import net.runelite.api.events.StatChanged;\n+import net.runelite.client.plugins.xptracker.XpTrackerService;\n+import net.runelite.client.ui.overlay.OverlayManager;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import static org.mockito.Mockito.when;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class XpGlobesTest\n+{\n+\t@Inject\n+\tprivate XpGlobesPlugin xpGlobesPlugin;\n+\n+\t@Mock\n+\t@Bind\n+\tprivate OverlayManager overlayManager;\n+\n+\t@Mock\n+\t@Bind\n+\tprivate XpGlobesOverlay xpGlobesOverlay;\n+\n+\t@Mock\n+\t@Bind\n+\tprivate XpTrackerService xpTrackerService;\n+\n+\t@Mock\n+\t@Bind\n+\tprivate XpGlobesConfig xpGlobesConfig;\n+\n+\tprivate  static final int virtualLevelTotalXp = Experience.getXpForLevel(Experience.MAX_REAL_LEVEL + 1);\n+\n+\t@Before\n+\tpublic void before()\n+\t{\n+\t\tGuice.createInjector(BoundFieldModule.of(this)).injectMembers(this);\n+\n+\t\trunFirstStatChangeForCaching(virtualLevelTotalXp, Skill.AGILITY);\n+\t\tassertTrue(xpGlobesPlugin.getXpGlobes().isEmpty());\n+\t}\n+\n+\t@Test\n+\tpublic void testVirtualLevelInGlobeIsNotShownByDefault()\n+\t{\n+\t\tStatChanged secondStatChangedEvent = new StatChanged(\n+\t\t\tSkill.AGILITY,\n+\t\t\tvirtualLevelTotalXp + 1,\n+\t\t\t99,\n+\t\t\t0\n+\t\t);\n+\n+\t\t// The next xp change adds a globe\n+\t\txpGlobesPlugin.onStatChanged(secondStatChangedEvent);\n+\t\tassertEquals(Experience.MAX_REAL_LEVEL, xpGlobesPlugin.getXpGlobes().get(0).getCurrentLevel());\n+\t}\n+\n+\t@Test\n+\tpublic void testVirtualLevelInGlobeIsShownWhenConfigured()\n+\t{\n+\t\twhen(xpGlobesConfig.showVirtualLevel()).thenReturn(true);\n+\n+\t\tStatChanged secondStatChangedEvent = new StatChanged(\n+\t\t\tSkill.AGILITY,\n+\t\t\tvirtualLevelTotalXp + 1,\n+\t\t\t99,\n+\t\t\t0\n+\t\t);\n+\n+\t\t// The next xp change adds a globe\n+\t\txpGlobesPlugin.onStatChanged(secondStatChangedEvent);\n+\t\tassertEquals(Experience.getLevelForXp(virtualLevelTotalXp + 1), xpGlobesPlugin.getXpGlobes().get(0).getCurrentLevel());\n+\t}\n+\n+\t@Test\n+\tpublic void testGlobeIsNotShownWhenHideMaxAndShowVirtualLevelConfigured()\n+\t{\n+\t\twhen(xpGlobesConfig.hideMaxed()).thenReturn(true);\n+\n+\t\tStatChanged secondStatChangedEvent = new StatChanged(\n+\t\t\tSkill.AGILITY,\n+\t\t\tvirtualLevelTotalXp + 1,\n+\t\t\t99,\n+\t\t\t0\n+\t\t);\n+\n+\t\t// The next xp change adds a globe\n+\t\txpGlobesPlugin.onStatChanged(secondStatChangedEvent);\n+\t\tassertEquals(Collections.emptyList(), xpGlobesPlugin.getXpGlobes());\n+\t}\n+\n+\t@Test\n+\tpublic void testGlobeIsNotShownWhenHideMaxConfigured()\n+\t{\n+\t\twhen(xpGlobesConfig.hideMaxed()).thenReturn(true);\n+\n+\t\tStatChanged secondStatChangedEvent = new StatChanged(\n+\t\t\tSkill.AGILITY,\n+\t\t\tvirtualLevelTotalXp + 1,\n+\t\t\t99,\n+\t\t\t0\n+\t\t);\n+\n+\t\t// The next xp change adds a globe\n+\t\txpGlobesPlugin.onStatChanged(secondStatChangedEvent);\n+\t\tassertEquals(Collections.emptyList(), xpGlobesPlugin.getXpGlobes());\n+\t}\n+\n+\t@Test\n+\tpublic void testGlobeIsShownOnXpGainBelowMaxWhenHideMaxConfigured()\n+\t{\n+\t\tint totalXp = 1;\n+\t\trunFirstStatChangeForCaching(totalXp, Skill.FARMING);\n+\t\tassertTrue(xpGlobesPlugin.getXpGlobes().isEmpty());\n+\n+\t\tStatChanged secondStatChangedEvent = new StatChanged(\n+\t\t\tSkill.FARMING,\n+\t\t\ttotalXp + 150,\n+\t\t\tExperience.getLevelForXp(totalXp + 150),\n+\t\t\t0\n+\t\t);\n+\n+\t\t// The next xp change adds a globe\n+\t\txpGlobesPlugin.onStatChanged(secondStatChangedEvent);\n+\t\tassertEquals(Experience.getLevelForXp(totalXp + 150), xpGlobesPlugin.getXpGlobes().get(0).getCurrentLevel());\n+\t}\n+\n+\t@Test\n+\tpublic void testStatChangesFromBoostDoNotAffectXpGlobes()\n+\t{\n+\t\tStatChanged boostEvent = new StatChanged(\n+\t\t\tSkill.AGILITY,\n+\t\t\tvirtualLevelTotalXp,\n+\t\t\tExperience.getLevelForXp(virtualLevelTotalXp),\n+\t\t\t5\n+\t\t);\n+\n+\t\t// XP hasn't changed since the first event, so no globe should be added\n+\t\txpGlobesPlugin.onStatChanged(boostEvent);\n+\t\tassertTrue(xpGlobesPlugin.getXpGlobes().isEmpty());\n+\t}\n+\n+\tvoid runFirstStatChangeForCaching(int totalXp, Skill skill)", "originalCommit": "6e3ae192dcb1f903460c5dbda22a3190db507a10", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDU5Nzg1Nw==", "url": "https://github.com/runelite/runelite/pull/12954#discussion_r560597857", "bodyText": "Method made private, all tests now use the statChanged method, except the boost test, which utilizes the overloaded version.", "author": "wrightmalone", "createdAt": "2021-01-20T00:47:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDU4ODM2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTQyOTA2Nw==", "url": "https://github.com/runelite/runelite/pull/12954#discussion_r561429067", "body": "Use `assertTrue(plugin.getXpGlobes().isEmpty())` for emptiness checks.\r\n```suggestion\r\n\t\tassertTrue(xpGlobesPlugin.getXpGlobes().isEmpty());\r\n```", "bodyText": "Use assertTrue(plugin.getXpGlobes().isEmpty()) for emptiness checks.\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tassertEquals(Collections.emptyList(), xpGlobesPlugin.getXpGlobes());\n          \n          \n            \n            \t\tassertTrue(xpGlobesPlugin.getXpGlobes().isEmpty());", "bodyHTML": "<p dir=\"auto\">Use <code>assertTrue(plugin.getXpGlobes().isEmpty())</code> for emptiness checks.</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">\t\t<span class=\"x x-first\">assertEquals(</span><span class=\"pl-smi x\">Collections</span><span class=\"pl-k x\">.</span><span class=\"x\">emptyList(), xpGlobesPlugin</span><span class=\"pl-k x\">.</span><span class=\"x x-last\">getXpGlobes</span>());</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">\t\t<span class=\"x x-first\">assertTrue(xpGlobesPlugin</span><span class=\"pl-k x\">.</span><span class=\"x\">getXpGlobes()</span><span class=\"pl-k x\">.</span><span class=\"x x-last\">isEmpty</span>());</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "Nightfirecat", "createdAt": "2021-01-21T00:28:21Z", "path": "runelite-client/src/test/java/net/runelite/client/plugins/xpglobes/XpGlobesTest.java", "diffHunk": "@@ -0,0 +1,135 @@\n+package net.runelite.client.plugins.xpglobes;\n+\n+import com.google.inject.Guice;\n+import com.google.inject.testing.fieldbinder.Bind;\n+import com.google.inject.testing.fieldbinder.BoundFieldModule;\n+import java.util.Collections;\n+import javax.inject.Inject;\n+import net.runelite.api.Experience;\n+import net.runelite.api.Skill;\n+import net.runelite.api.events.StatChanged;\n+import net.runelite.client.plugins.xptracker.XpTrackerService;\n+import net.runelite.client.ui.overlay.OverlayManager;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import static org.mockito.Mockito.when;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class XpGlobesTest\n+{\n+\t@Inject\n+\tprivate XpGlobesPlugin xpGlobesPlugin;\n+\n+\t@Mock\n+\t@Bind\n+\tprivate OverlayManager overlayManager;\n+\n+\t@Mock\n+\t@Bind\n+\tprivate XpGlobesOverlay xpGlobesOverlay;\n+\n+\t@Mock\n+\t@Bind\n+\tprivate XpTrackerService xpTrackerService;\n+\n+\t@Mock\n+\t@Bind\n+\tprivate XpGlobesConfig xpGlobesConfig;\n+\n+\tprivate static final int virtualLevelTotalXp = Experience.getXpForLevel(Experience.MAX_REAL_LEVEL + 1);\n+\n+\t@Before\n+\tpublic void before()\n+\t{\n+\t\tGuice.createInjector(BoundFieldModule.of(this)).injectMembers(this);\n+\n+\t\tstatChanged(virtualLevelTotalXp, Skill.AGILITY);\n+\t\tassertTrue(xpGlobesPlugin.getXpGlobes().isEmpty());\n+\t}\n+\n+\t@Test\n+\tpublic void testVirtualLevelInGlobeIsNotShownByDefault()\n+\t{\n+\t\twhen(xpGlobesConfig.showVirtualLevel()).thenReturn(false);\n+\n+\t\tstatChanged(virtualLevelTotalXp + 1, Skill.AGILITY);\n+\n+\t\tassertEquals(Experience.MAX_REAL_LEVEL, xpGlobesPlugin.getXpGlobes().get(0).getCurrentLevel());\n+\t}\n+\n+\t@Test\n+\tpublic void testVirtualLevelInGlobeIsShownWhenConfigured()\n+\t{\n+\t\twhen(xpGlobesConfig.showVirtualLevel()).thenReturn(true);\n+\n+\t\tstatChanged(virtualLevelTotalXp + 1, Skill.AGILITY);\n+\n+\t\tassertEquals(Experience.getLevelForXp(virtualLevelTotalXp + 1), xpGlobesPlugin.getXpGlobes().get(0).getCurrentLevel());\n+\t}\n+\n+\t@Test\n+\tpublic void testGlobeIsNotShownWhenHideMaxAndShowVirtualLevelConfigured()\n+\t{\n+\t\twhen(xpGlobesConfig.hideMaxed()).thenReturn(true);\n+\n+\t\tstatChanged(virtualLevelTotalXp + 1, Skill.AGILITY);\n+\n+\t\tassertEquals(Collections.emptyList(), xpGlobesPlugin.getXpGlobes());", "originalCommit": "9372bfbe9b12cf17d7d04ec848af48489969493a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTQzMDMwOQ==", "url": "https://github.com/runelite/runelite/pull/12954#discussion_r561430309", "body": "This is missing the enabled `showVirtualLevel` config.\r\n```suggestion\r\n\t\twhen(xpGlobesConfig.hideMaxed()).thenReturn(true);\r\n\t\twhen(xpGlobesConfig.showVirtualLevel()).thenReturn(true);\r\n```", "bodyText": "This is missing the enabled showVirtualLevel config.\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\twhen(xpGlobesConfig.hideMaxed()).thenReturn(true);\n          \n          \n            \n            \t\twhen(xpGlobesConfig.hideMaxed()).thenReturn(true);\n          \n          \n            \n            \t\twhen(xpGlobesConfig.showVirtualLevel()).thenReturn(true);", "bodyHTML": "<p dir=\"auto\">This is missing the enabled <code>showVirtualLevel</code> config.</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">\t\twhen(xpGlobesConfig<span class=\"pl-k\">.</span>hideMaxed())<span class=\"pl-k\">.</span>thenReturn(<span class=\"pl-c1\">true</span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">\t\twhen(xpGlobesConfig<span class=\"pl-k\">.</span>hideMaxed())<span class=\"pl-k\">.</span>thenReturn(<span class=\"pl-c1\">true</span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">\t\twhen(xpGlobesConfig<span class=\"pl-k\">.</span>showVirtualLevel())<span class=\"pl-k\">.</span>thenReturn(<span class=\"pl-c1\">true</span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "Nightfirecat", "createdAt": "2021-01-21T00:29:42Z", "path": "runelite-client/src/test/java/net/runelite/client/plugins/xpglobes/XpGlobesTest.java", "diffHunk": "@@ -0,0 +1,135 @@\n+package net.runelite.client.plugins.xpglobes;\n+\n+import com.google.inject.Guice;\n+import com.google.inject.testing.fieldbinder.Bind;\n+import com.google.inject.testing.fieldbinder.BoundFieldModule;\n+import java.util.Collections;\n+import javax.inject.Inject;\n+import net.runelite.api.Experience;\n+import net.runelite.api.Skill;\n+import net.runelite.api.events.StatChanged;\n+import net.runelite.client.plugins.xptracker.XpTrackerService;\n+import net.runelite.client.ui.overlay.OverlayManager;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import static org.mockito.Mockito.when;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class XpGlobesTest\n+{\n+\t@Inject\n+\tprivate XpGlobesPlugin xpGlobesPlugin;\n+\n+\t@Mock\n+\t@Bind\n+\tprivate OverlayManager overlayManager;\n+\n+\t@Mock\n+\t@Bind\n+\tprivate XpGlobesOverlay xpGlobesOverlay;\n+\n+\t@Mock\n+\t@Bind\n+\tprivate XpTrackerService xpTrackerService;\n+\n+\t@Mock\n+\t@Bind\n+\tprivate XpGlobesConfig xpGlobesConfig;\n+\n+\tprivate static final int virtualLevelTotalXp = Experience.getXpForLevel(Experience.MAX_REAL_LEVEL + 1);\n+\n+\t@Before\n+\tpublic void before()\n+\t{\n+\t\tGuice.createInjector(BoundFieldModule.of(this)).injectMembers(this);\n+\n+\t\tstatChanged(virtualLevelTotalXp, Skill.AGILITY);\n+\t\tassertTrue(xpGlobesPlugin.getXpGlobes().isEmpty());\n+\t}\n+\n+\t@Test\n+\tpublic void testVirtualLevelInGlobeIsNotShownByDefault()\n+\t{\n+\t\twhen(xpGlobesConfig.showVirtualLevel()).thenReturn(false);\n+\n+\t\tstatChanged(virtualLevelTotalXp + 1, Skill.AGILITY);\n+\n+\t\tassertEquals(Experience.MAX_REAL_LEVEL, xpGlobesPlugin.getXpGlobes().get(0).getCurrentLevel());\n+\t}\n+\n+\t@Test\n+\tpublic void testVirtualLevelInGlobeIsShownWhenConfigured()\n+\t{\n+\t\twhen(xpGlobesConfig.showVirtualLevel()).thenReturn(true);\n+\n+\t\tstatChanged(virtualLevelTotalXp + 1, Skill.AGILITY);\n+\n+\t\tassertEquals(Experience.getLevelForXp(virtualLevelTotalXp + 1), xpGlobesPlugin.getXpGlobes().get(0).getCurrentLevel());\n+\t}\n+\n+\t@Test\n+\tpublic void testGlobeIsNotShownWhenHideMaxAndShowVirtualLevelConfigured()\n+\t{\n+\t\twhen(xpGlobesConfig.hideMaxed()).thenReturn(true);", "originalCommit": "9372bfbe9b12cf17d7d04ec848af48489969493a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTk2MzM3OQ==", "url": "https://github.com/runelite/runelite/pull/12954#discussion_r561963379", "bodyText": "Mockito considers this an unnecessary stubbing now that the config.hideMaxed() check happens in a different place from config.showVirtualLevel(). Should I just change the names of these tests to better reflect what configuration options are required for the result?", "author": "wrightmalone", "createdAt": "2021-01-21T15:18:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTQzMDMwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTQzMTUxNw==", "url": "https://github.com/runelite/runelite/pull/12954#discussion_r561431517", "body": "This test doesn't mock `hideMaxed` returning true", "bodyText": "This test doesn't mock hideMaxed returning true", "bodyHTML": "<p dir=\"auto\">This test doesn't mock <code>hideMaxed</code> returning true</p>", "author": "Nightfirecat", "createdAt": "2021-01-21T00:30:59Z", "path": "runelite-client/src/test/java/net/runelite/client/plugins/xpglobes/XpGlobesTest.java", "diffHunk": "@@ -0,0 +1,135 @@\n+package net.runelite.client.plugins.xpglobes;\n+\n+import com.google.inject.Guice;\n+import com.google.inject.testing.fieldbinder.Bind;\n+import com.google.inject.testing.fieldbinder.BoundFieldModule;\n+import java.util.Collections;\n+import javax.inject.Inject;\n+import net.runelite.api.Experience;\n+import net.runelite.api.Skill;\n+import net.runelite.api.events.StatChanged;\n+import net.runelite.client.plugins.xptracker.XpTrackerService;\n+import net.runelite.client.ui.overlay.OverlayManager;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import static org.mockito.Mockito.when;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class XpGlobesTest\n+{\n+\t@Inject\n+\tprivate XpGlobesPlugin xpGlobesPlugin;\n+\n+\t@Mock\n+\t@Bind\n+\tprivate OverlayManager overlayManager;\n+\n+\t@Mock\n+\t@Bind\n+\tprivate XpGlobesOverlay xpGlobesOverlay;\n+\n+\t@Mock\n+\t@Bind\n+\tprivate XpTrackerService xpTrackerService;\n+\n+\t@Mock\n+\t@Bind\n+\tprivate XpGlobesConfig xpGlobesConfig;\n+\n+\tprivate static final int virtualLevelTotalXp = Experience.getXpForLevel(Experience.MAX_REAL_LEVEL + 1);\n+\n+\t@Before\n+\tpublic void before()\n+\t{\n+\t\tGuice.createInjector(BoundFieldModule.of(this)).injectMembers(this);\n+\n+\t\tstatChanged(virtualLevelTotalXp, Skill.AGILITY);\n+\t\tassertTrue(xpGlobesPlugin.getXpGlobes().isEmpty());\n+\t}\n+\n+\t@Test\n+\tpublic void testVirtualLevelInGlobeIsNotShownByDefault()\n+\t{\n+\t\twhen(xpGlobesConfig.showVirtualLevel()).thenReturn(false);\n+\n+\t\tstatChanged(virtualLevelTotalXp + 1, Skill.AGILITY);\n+\n+\t\tassertEquals(Experience.MAX_REAL_LEVEL, xpGlobesPlugin.getXpGlobes().get(0).getCurrentLevel());\n+\t}\n+\n+\t@Test\n+\tpublic void testVirtualLevelInGlobeIsShownWhenConfigured()\n+\t{\n+\t\twhen(xpGlobesConfig.showVirtualLevel()).thenReturn(true);\n+\n+\t\tstatChanged(virtualLevelTotalXp + 1, Skill.AGILITY);\n+\n+\t\tassertEquals(Experience.getLevelForXp(virtualLevelTotalXp + 1), xpGlobesPlugin.getXpGlobes().get(0).getCurrentLevel());\n+\t}\n+\n+\t@Test\n+\tpublic void testGlobeIsNotShownWhenHideMaxAndShowVirtualLevelConfigured()\n+\t{\n+\t\twhen(xpGlobesConfig.hideMaxed()).thenReturn(true);\n+\n+\t\tstatChanged(virtualLevelTotalXp + 1, Skill.AGILITY);\n+\n+\t\tassertEquals(Collections.emptyList(), xpGlobesPlugin.getXpGlobes());\n+\t}\n+\n+\t@Test\n+\tpublic void testGlobeIsNotShownWhenHideMaxConfigured()\n+\t{\n+\t\twhen(xpGlobesConfig.hideMaxed()).thenReturn(true);\n+\n+\t\tstatChanged(virtualLevelTotalXp + 1, Skill.AGILITY);\n+\n+\t\tassertEquals(Collections.emptyList(), xpGlobesPlugin.getXpGlobes());\n+\t}\n+\n+\t@Test\n+\tpublic void testGlobeIsShownOnXpGainBelowMaxWhenHideMaxConfigured()", "originalCommit": "9372bfbe9b12cf17d7d04ec848af48489969493a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTk2MDg0Nw==", "url": "https://github.com/runelite/runelite/pull/12954#discussion_r561960847", "bodyText": "Mockito considers that an unnecessary stubbing since the if (config.hideMaxed()) check comes after if (currentLevel >= Experience.MAX_REAL_LEVEL) check. So for this test it never hits the hideMaxed configuration option.", "author": "wrightmalone", "createdAt": "2021-01-21T15:15:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTQzMTUxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjA0NDQwNQ==", "url": "https://github.com/runelite/runelite/pull/12954#discussion_r562044405", "bodyText": "You can ignore that by using lenient().when(config.hideMaxed())... That will allow an unused mock to be permitted.", "author": "Nightfirecat", "createdAt": "2021-01-21T17:00:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTQzMTUxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjE4MTU3NA==", "url": "https://github.com/runelite/runelite/pull/12954#discussion_r562181574", "bodyText": "done", "author": "wrightmalone", "createdAt": "2021-01-21T20:38:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTQzMTUxNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjM1MjY1MA==", "url": "https://github.com/runelite/runelite/pull/12954#discussion_r562352650", "body": "Add copyright header (see other files for reference)", "bodyText": "Add copyright header (see other files for reference)", "bodyHTML": "<p dir=\"auto\">Add copyright header (see other files for reference)</p>", "author": "Nightfirecat", "createdAt": "2021-01-22T02:48:26Z", "path": "runelite-client/src/test/java/net/runelite/client/plugins/xpglobes/XpGlobesTest.java", "diffHunk": "@@ -0,0 +1,138 @@\n+package net.runelite.client.plugins.xpglobes;", "originalCommit": "6b5026984b3a32f6402b86d22abf2455a2caf44a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjY1ODI0Nw==", "url": "https://github.com/runelite/runelite/pull/12954#discussion_r562658247", "bodyText": "done", "author": "wrightmalone", "createdAt": "2021-01-22T14:14:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjM1MjY1MA=="}], "type": "inlineReview"}, {"oid": "5003a92197c8f0aa1525d695f9ebd04f14350616", "url": "https://github.com/runelite/runelite/commit/5003a92197c8f0aa1525d695f9ebd04f14350616", "message": "xp globes: add option to show virtual level in tooltip\n\nCo-authored-by: Adam <Adam@sigterm.info>", "committedDate": "2021-01-24T22:49:22Z", "type": "forcePushed"}, {"oid": "876a0aaf9c05d5abd54b12f78c21da8f615824de", "url": "https://github.com/runelite/runelite/commit/876a0aaf9c05d5abd54b12f78c21da8f615824de", "message": "xp globes: add option to show virtual level in tooltip\n\nCo-authored-by: Adam <Adam@sigterm.info>", "committedDate": "2021-01-24T23:45:09Z", "type": "commit"}, {"oid": "876a0aaf9c05d5abd54b12f78c21da8f615824de", "url": "https://github.com/runelite/runelite/commit/876a0aaf9c05d5abd54b12f78c21da8f615824de", "message": "xp globes: add option to show virtual level in tooltip\n\nCo-authored-by: Adam <Adam@sigterm.info>", "committedDate": "2021-01-24T23:45:09Z", "type": "forcePushed"}]}