{"pr_number": 6843, "pr_title": "fix: [DHIS2-7310] Move rule engine call and validations after bundle validation", "pr_author": "enricocolasante", "pr_createdAt": "2020-12-07T11:03:50Z", "pr_url": "https://github.com/dhis2/dhis2-core/pull/6843", "timeline": [{"oid": "e2c1db20247638c6c9a512adf372869345d4be4b", "url": "https://github.com/dhis2/dhis2-core/commit/e2c1db20247638c6c9a512adf372869345d4be4b", "message": "fix: [DHIS2-7310] Move rule engine call and validations after bundle validation\n\nThe primary goal of this commit is moving rule engine call after bundle validation\nso there are no unexpected problems building the context to call rule engine.\nOther issues solved by this commit are:\n    - Put a default value for occuredAt date in the enrollment converter\n    - Remove the invalid entities from the bundle after validation, to avoid\n        errors in the persistence phase", "committedDate": "2020-12-07T10:57:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzU4NzU1Nw==", "url": "https://github.com/dhis2/dhis2-core/pull/6843#discussion_r537587557", "body": "I find this new code a bit hard to read (I would try to keep this method as tiny and lean as possible).\r\nWhat about encapsulating the call to the rule engine like so:\r\n\r\n```\r\n@Override\r\n    public TrackerImportReport importTracker( TrackerImportParams params )\r\n    {\r\n        params.setUser( trackerUserService.getUser( params.getUserId() ) );\r\n\r\n        // Init the Notifier\r\n        ImportNotifier notifier = new ImportNotifier( this.notifier, params );\r\n\r\n        // Keeps track of the elapsed time of each Import stage\r\n        TrackerTimingsStats opsTimer = new TrackerTimingsStats();\r\n\r\n        notifier.startImport();\r\n\r\n        TrackerValidationReport validationReport = null;\r\n\r\n        TrackerBundleReport bundleReport;\r\n\r\n        try\r\n        {\r\n            //\r\n            // pre-heat\r\n            //\r\n            TrackerBundle trackerBundle = opsTimer.exec( PREHEAT_OPS,\r\n                () -> preheatBundle( params ) );\r\n\r\n            Map<TrackerType, Integer> bundleSize = calculatePayloadSize( trackerBundle );\r\n\r\n            //\r\n            // preprocess\r\n            //\r\n            opsTimer.execVoid( PREPROCESS_OPS,\r\n                () -> preProcessBundle( trackerBundle ) );\r\n\r\n            //\r\n            // validate\r\n            //\r\n            validationReport = opsTimer.exec( VALIDATION_OPS,\r\n                () -> validateBundle( trackerBundle ) );\r\n\r\n            notifier.notifyOps( VALIDATION_OPS, opsTimer );\r\n\r\n            if ( exitOnError( validationReport, params ) )\r\n            {\r\n                return buildReportAndNotify( validationReport, opsTimer, bundleSize, notifier );\r\n            }\r\n            else\r\n            {\r\n                validationReport = execRuleEngine(opsTimer, trackerBundle, validationReport, notifier);\r\n\r\n\r\n                if ( exitOnError( validationReport, params ) )\r\n                {\r\n                    return buildReportAndNotify( validationReport, opsTimer, bundleSize, notifier );\r\n                }\r\n\r\n                //\r\n                // commit\r\n                //\r\n                if ( TrackerImportStrategy.DELETE == params.getImportStrategy() )\r\n                {\r\n                    bundleReport = opsTimer.exec( COMMIT_OPS, () -> deleteBundle( trackerBundle ) );\r\n                }\r\n                else\r\n                {\r\n                    bundleReport = opsTimer.exec( COMMIT_OPS, () -> commitBundle( trackerBundle ) );\r\n                }\r\n\r\n                notifier.notifyOps( COMMIT_OPS, opsTimer );\r\n\r\n                TrackerImportReport trackerImportReport = TrackerImportReport.withImportCompleted( TrackerStatus.OK,\r\n                    bundleReport, validationReport,\r\n                    opsTimer.stopTimer(), bundleSize );\r\n\r\n                notifier.endImport( trackerImportReport );\r\n\r\n                return trackerImportReport;\r\n            }\r\n        }\r\n        catch ( Exception e )\r\n        {\r\n            log.error( \"Exception thrown during import.\", e );\r\n\r\n            TrackerImportReport report = TrackerImportReport.withError( \"Exception:\" + e.getMessage(),\r\n                validationReport, opsTimer.stopTimer() );\r\n\r\n            notifier.endImportWithError( report, e );\r\n\r\n            return report;\r\n        }\r\n    }\r\n\r\n    private TrackerValidationReport execRuleEngine( TrackerTimingsStats opsTimer, TrackerBundle trackerBundle,\r\n        TrackerValidationReport report, ImportNotifier notifier )\r\n    {\r\n        //\r\n        // rule engine\r\n        //\r\n        opsTimer.execVoid( PROGRAMRULE_OPS,\r\n            () -> runRuleEngine( trackerBundle ) );\r\n\r\n        notifier.notifyOps( PROGRAMRULE_OPS, opsTimer );\r\n\r\n        //\r\n        // rule engine\r\n        //\r\n        TrackerValidationReport finalValidationReport = report;\r\n        report = opsTimer.exec( VALIDATE_PROGRAMRULE_OPS,\r\n            () -> validateRuleEngine( trackerBundle, finalValidationReport ) );\r\n\r\n        notifier.notifyOps( VALIDATE_PROGRAMRULE_OPS, opsTimer );\r\n\r\n        return report;\r\n    }\r\n\r\n    private TrackerImportReport buildReportAndNotify( TrackerValidationReport validationReport,\r\n        TrackerTimingsStats opsTimer, Map<TrackerType, Integer> bundleSize, ImportNotifier notifier )\r\n    {\r\n        TrackerImportReport trackerImportReport = TrackerImportReport\r\n                .withValidationErrors( validationReport, opsTimer.stopTimer(),\r\n                        bundleSize.values().stream().mapToInt( Integer::intValue ).sum() );\r\n\r\n        notifier.endImport( trackerImportReport );\r\n\r\n        return trackerImportReport;\r\n    }\r\n\r\n    private boolean exitOnError( TrackerValidationReport validationReport, TrackerImportParams params )\r\n    {\r\n        return validationReport.hasErrors() && params.getAtomicMode() == AtomicMode.ALL;\r\n    }\r\n```\r\n", "bodyText": "I find this new code a bit hard to read (I would try to keep this method as tiny and lean as possible).\nWhat about encapsulating the call to the rule engine like so:\n@Override\n    public TrackerImportReport importTracker( TrackerImportParams params )\n    {\n        params.setUser( trackerUserService.getUser( params.getUserId() ) );\n\n        // Init the Notifier\n        ImportNotifier notifier = new ImportNotifier( this.notifier, params );\n\n        // Keeps track of the elapsed time of each Import stage\n        TrackerTimingsStats opsTimer = new TrackerTimingsStats();\n\n        notifier.startImport();\n\n        TrackerValidationReport validationReport = null;\n\n        TrackerBundleReport bundleReport;\n\n        try\n        {\n            //\n            // pre-heat\n            //\n            TrackerBundle trackerBundle = opsTimer.exec( PREHEAT_OPS,\n                () -> preheatBundle( params ) );\n\n            Map<TrackerType, Integer> bundleSize = calculatePayloadSize( trackerBundle );\n\n            //\n            // preprocess\n            //\n            opsTimer.execVoid( PREPROCESS_OPS,\n                () -> preProcessBundle( trackerBundle ) );\n\n            //\n            // validate\n            //\n            validationReport = opsTimer.exec( VALIDATION_OPS,\n                () -> validateBundle( trackerBundle ) );\n\n            notifier.notifyOps( VALIDATION_OPS, opsTimer );\n\n            if ( exitOnError( validationReport, params ) )\n            {\n                return buildReportAndNotify( validationReport, opsTimer, bundleSize, notifier );\n            }\n            else\n            {\n                validationReport = execRuleEngine(opsTimer, trackerBundle, validationReport, notifier);\n\n\n                if ( exitOnError( validationReport, params ) )\n                {\n                    return buildReportAndNotify( validationReport, opsTimer, bundleSize, notifier );\n                }\n\n                //\n                // commit\n                //\n                if ( TrackerImportStrategy.DELETE == params.getImportStrategy() )\n                {\n                    bundleReport = opsTimer.exec( COMMIT_OPS, () -> deleteBundle( trackerBundle ) );\n                }\n                else\n                {\n                    bundleReport = opsTimer.exec( COMMIT_OPS, () -> commitBundle( trackerBundle ) );\n                }\n\n                notifier.notifyOps( COMMIT_OPS, opsTimer );\n\n                TrackerImportReport trackerImportReport = TrackerImportReport.withImportCompleted( TrackerStatus.OK,\n                    bundleReport, validationReport,\n                    opsTimer.stopTimer(), bundleSize );\n\n                notifier.endImport( trackerImportReport );\n\n                return trackerImportReport;\n            }\n        }\n        catch ( Exception e )\n        {\n            log.error( \"Exception thrown during import.\", e );\n\n            TrackerImportReport report = TrackerImportReport.withError( \"Exception:\" + e.getMessage(),\n                validationReport, opsTimer.stopTimer() );\n\n            notifier.endImportWithError( report, e );\n\n            return report;\n        }\n    }\n\n    private TrackerValidationReport execRuleEngine( TrackerTimingsStats opsTimer, TrackerBundle trackerBundle,\n        TrackerValidationReport report, ImportNotifier notifier )\n    {\n        //\n        // rule engine\n        //\n        opsTimer.execVoid( PROGRAMRULE_OPS,\n            () -> runRuleEngine( trackerBundle ) );\n\n        notifier.notifyOps( PROGRAMRULE_OPS, opsTimer );\n\n        //\n        // rule engine\n        //\n        TrackerValidationReport finalValidationReport = report;\n        report = opsTimer.exec( VALIDATE_PROGRAMRULE_OPS,\n            () -> validateRuleEngine( trackerBundle, finalValidationReport ) );\n\n        notifier.notifyOps( VALIDATE_PROGRAMRULE_OPS, opsTimer );\n\n        return report;\n    }\n\n    private TrackerImportReport buildReportAndNotify( TrackerValidationReport validationReport,\n        TrackerTimingsStats opsTimer, Map<TrackerType, Integer> bundleSize, ImportNotifier notifier )\n    {\n        TrackerImportReport trackerImportReport = TrackerImportReport\n                .withValidationErrors( validationReport, opsTimer.stopTimer(),\n                        bundleSize.values().stream().mapToInt( Integer::intValue ).sum() );\n\n        notifier.endImport( trackerImportReport );\n\n        return trackerImportReport;\n    }\n\n    private boolean exitOnError( TrackerValidationReport validationReport, TrackerImportParams params )\n    {\n        return validationReport.hasErrors() && params.getAtomicMode() == AtomicMode.ALL;\n    }", "bodyHTML": "<p dir=\"auto\">I find this new code a bit hard to read (I would try to keep this method as tiny and lean as possible).<br>\nWhat about encapsulating the call to the rule engine like so:</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"@Override\n    public TrackerImportReport importTracker( TrackerImportParams params )\n    {\n        params.setUser( trackerUserService.getUser( params.getUserId() ) );\n\n        // Init the Notifier\n        ImportNotifier notifier = new ImportNotifier( this.notifier, params );\n\n        // Keeps track of the elapsed time of each Import stage\n        TrackerTimingsStats opsTimer = new TrackerTimingsStats();\n\n        notifier.startImport();\n\n        TrackerValidationReport validationReport = null;\n\n        TrackerBundleReport bundleReport;\n\n        try\n        {\n            //\n            // pre-heat\n            //\n            TrackerBundle trackerBundle = opsTimer.exec( PREHEAT_OPS,\n                () -&gt; preheatBundle( params ) );\n\n            Map&lt;TrackerType, Integer&gt; bundleSize = calculatePayloadSize( trackerBundle );\n\n            //\n            // preprocess\n            //\n            opsTimer.execVoid( PREPROCESS_OPS,\n                () -&gt; preProcessBundle( trackerBundle ) );\n\n            //\n            // validate\n            //\n            validationReport = opsTimer.exec( VALIDATION_OPS,\n                () -&gt; validateBundle( trackerBundle ) );\n\n            notifier.notifyOps( VALIDATION_OPS, opsTimer );\n\n            if ( exitOnError( validationReport, params ) )\n            {\n                return buildReportAndNotify( validationReport, opsTimer, bundleSize, notifier );\n            }\n            else\n            {\n                validationReport = execRuleEngine(opsTimer, trackerBundle, validationReport, notifier);\n\n\n                if ( exitOnError( validationReport, params ) )\n                {\n                    return buildReportAndNotify( validationReport, opsTimer, bundleSize, notifier );\n                }\n\n                //\n                // commit\n                //\n                if ( TrackerImportStrategy.DELETE == params.getImportStrategy() )\n                {\n                    bundleReport = opsTimer.exec( COMMIT_OPS, () -&gt; deleteBundle( trackerBundle ) );\n                }\n                else\n                {\n                    bundleReport = opsTimer.exec( COMMIT_OPS, () -&gt; commitBundle( trackerBundle ) );\n                }\n\n                notifier.notifyOps( COMMIT_OPS, opsTimer );\n\n                TrackerImportReport trackerImportReport = TrackerImportReport.withImportCompleted( TrackerStatus.OK,\n                    bundleReport, validationReport,\n                    opsTimer.stopTimer(), bundleSize );\n\n                notifier.endImport( trackerImportReport );\n\n                return trackerImportReport;\n            }\n        }\n        catch ( Exception e )\n        {\n            log.error( &quot;Exception thrown during import.&quot;, e );\n\n            TrackerImportReport report = TrackerImportReport.withError( &quot;Exception:&quot; + e.getMessage(),\n                validationReport, opsTimer.stopTimer() );\n\n            notifier.endImportWithError( report, e );\n\n            return report;\n        }\n    }\n\n    private TrackerValidationReport execRuleEngine( TrackerTimingsStats opsTimer, TrackerBundle trackerBundle,\n        TrackerValidationReport report, ImportNotifier notifier )\n    {\n        //\n        // rule engine\n        //\n        opsTimer.execVoid( PROGRAMRULE_OPS,\n            () -&gt; runRuleEngine( trackerBundle ) );\n\n        notifier.notifyOps( PROGRAMRULE_OPS, opsTimer );\n\n        //\n        // rule engine\n        //\n        TrackerValidationReport finalValidationReport = report;\n        report = opsTimer.exec( VALIDATE_PROGRAMRULE_OPS,\n            () -&gt; validateRuleEngine( trackerBundle, finalValidationReport ) );\n\n        notifier.notifyOps( VALIDATE_PROGRAMRULE_OPS, opsTimer );\n\n        return report;\n    }\n\n    private TrackerImportReport buildReportAndNotify( TrackerValidationReport validationReport,\n        TrackerTimingsStats opsTimer, Map&lt;TrackerType, Integer&gt; bundleSize, ImportNotifier notifier )\n    {\n        TrackerImportReport trackerImportReport = TrackerImportReport\n                .withValidationErrors( validationReport, opsTimer.stopTimer(),\n                        bundleSize.values().stream().mapToInt( Integer::intValue ).sum() );\n\n        notifier.endImport( trackerImportReport );\n\n        return trackerImportReport;\n    }\n\n    private boolean exitOnError( TrackerValidationReport validationReport, TrackerImportParams params )\n    {\n        return validationReport.hasErrors() &amp;&amp; params.getAtomicMode() == AtomicMode.ALL;\n    }\"><pre><code>@Override\n    public TrackerImportReport importTracker( TrackerImportParams params )\n    {\n        params.setUser( trackerUserService.getUser( params.getUserId() ) );\n\n        // Init the Notifier\n        ImportNotifier notifier = new ImportNotifier( this.notifier, params );\n\n        // Keeps track of the elapsed time of each Import stage\n        TrackerTimingsStats opsTimer = new TrackerTimingsStats();\n\n        notifier.startImport();\n\n        TrackerValidationReport validationReport = null;\n\n        TrackerBundleReport bundleReport;\n\n        try\n        {\n            //\n            // pre-heat\n            //\n            TrackerBundle trackerBundle = opsTimer.exec( PREHEAT_OPS,\n                () -&gt; preheatBundle( params ) );\n\n            Map&lt;TrackerType, Integer&gt; bundleSize = calculatePayloadSize( trackerBundle );\n\n            //\n            // preprocess\n            //\n            opsTimer.execVoid( PREPROCESS_OPS,\n                () -&gt; preProcessBundle( trackerBundle ) );\n\n            //\n            // validate\n            //\n            validationReport = opsTimer.exec( VALIDATION_OPS,\n                () -&gt; validateBundle( trackerBundle ) );\n\n            notifier.notifyOps( VALIDATION_OPS, opsTimer );\n\n            if ( exitOnError( validationReport, params ) )\n            {\n                return buildReportAndNotify( validationReport, opsTimer, bundleSize, notifier );\n            }\n            else\n            {\n                validationReport = execRuleEngine(opsTimer, trackerBundle, validationReport, notifier);\n\n\n                if ( exitOnError( validationReport, params ) )\n                {\n                    return buildReportAndNotify( validationReport, opsTimer, bundleSize, notifier );\n                }\n\n                //\n                // commit\n                //\n                if ( TrackerImportStrategy.DELETE == params.getImportStrategy() )\n                {\n                    bundleReport = opsTimer.exec( COMMIT_OPS, () -&gt; deleteBundle( trackerBundle ) );\n                }\n                else\n                {\n                    bundleReport = opsTimer.exec( COMMIT_OPS, () -&gt; commitBundle( trackerBundle ) );\n                }\n\n                notifier.notifyOps( COMMIT_OPS, opsTimer );\n\n                TrackerImportReport trackerImportReport = TrackerImportReport.withImportCompleted( TrackerStatus.OK,\n                    bundleReport, validationReport,\n                    opsTimer.stopTimer(), bundleSize );\n\n                notifier.endImport( trackerImportReport );\n\n                return trackerImportReport;\n            }\n        }\n        catch ( Exception e )\n        {\n            log.error( \"Exception thrown during import.\", e );\n\n            TrackerImportReport report = TrackerImportReport.withError( \"Exception:\" + e.getMessage(),\n                validationReport, opsTimer.stopTimer() );\n\n            notifier.endImportWithError( report, e );\n\n            return report;\n        }\n    }\n\n    private TrackerValidationReport execRuleEngine( TrackerTimingsStats opsTimer, TrackerBundle trackerBundle,\n        TrackerValidationReport report, ImportNotifier notifier )\n    {\n        //\n        // rule engine\n        //\n        opsTimer.execVoid( PROGRAMRULE_OPS,\n            () -&gt; runRuleEngine( trackerBundle ) );\n\n        notifier.notifyOps( PROGRAMRULE_OPS, opsTimer );\n\n        //\n        // rule engine\n        //\n        TrackerValidationReport finalValidationReport = report;\n        report = opsTimer.exec( VALIDATE_PROGRAMRULE_OPS,\n            () -&gt; validateRuleEngine( trackerBundle, finalValidationReport ) );\n\n        notifier.notifyOps( VALIDATE_PROGRAMRULE_OPS, opsTimer );\n\n        return report;\n    }\n\n    private TrackerImportReport buildReportAndNotify( TrackerValidationReport validationReport,\n        TrackerTimingsStats opsTimer, Map&lt;TrackerType, Integer&gt; bundleSize, ImportNotifier notifier )\n    {\n        TrackerImportReport trackerImportReport = TrackerImportReport\n                .withValidationErrors( validationReport, opsTimer.stopTimer(),\n                        bundleSize.values().stream().mapToInt( Integer::intValue ).sum() );\n\n        notifier.endImport( trackerImportReport );\n\n        return trackerImportReport;\n    }\n\n    private boolean exitOnError( TrackerValidationReport validationReport, TrackerImportParams params )\n    {\n        return validationReport.hasErrors() &amp;&amp; params.getAtomicMode() == AtomicMode.ALL;\n    }\n</code></pre></div>", "author": "luciano-fiandesio", "createdAt": "2020-12-07T15:17:08Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java", "diffHunk": "@@ -136,13 +132,42 @@ public TrackerImportReport importTracker( TrackerImportParams params )\n             }\n             else\n             {\n+", "originalCommit": "e2c1db20247638c6c9a512adf372869345d4be4b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "fcf86400183fba2078fed75cf8191afa0d57d431", "url": "https://github.com/dhis2/dhis2-core/commit/fcf86400183fba2078fed75cf8191afa0d57d431", "message": "Sonar and code review fixes", "committedDate": "2020-12-08T07:59:18Z", "type": "commit"}]}