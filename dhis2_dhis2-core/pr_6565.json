{"pr_number": 6565, "pr_title": "feat: [DHIS2-9840] Implement validator for event data values", "pr_author": "enricocolasante", "pr_createdAt": "2020-11-03T12:33:08Z", "pr_url": "https://github.com/dhis2/dhis2-core/pull/6565", "timeline": [{"oid": "b0bdbedc47fc9bfbe237d2fa6116a687f1c2d42a", "url": "https://github.com/dhis2/dhis2-core/commit/b0bdbedc47fc9bfbe237d2fa6116a687f1c2d42a", "message": "feat: [DHIS2-9840] Implement validator for event data values", "committedDate": "2020-11-03T12:31:15Z", "type": "commit"}, {"oid": "9491a92a84e6165db27015317ad2a1ad7baef9cc", "url": "https://github.com/dhis2/dhis2-core/commit/9491a92a84e6165db27015317ad2a1ad7baef9cc", "message": "Fix tests", "committedDate": "2020-11-03T12:50:48Z", "type": "commit"}, {"oid": "81c9fb990d284d35c250e594d931ce76346ace34", "url": "https://github.com/dhis2/dhis2-core/commit/81c9fb990d284d35c250e594d931ce76346ace34", "message": "Fix tests", "committedDate": "2020-11-03T13:28:34Z", "type": "commit"}, {"oid": "9eda8e80ece809dce9a6075d2a9b4b7e55dbd07f", "url": "https://github.com/dhis2/dhis2-core/commit/9eda8e80ece809dce9a6075d2a9b4b7e55dbd07f", "message": "Fix sonar code smells", "committedDate": "2020-11-03T14:28:26Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODYzNjc4Mg==", "url": "https://github.com/dhis2/dhis2-core/pull/6565#discussion_r518636782", "body": "How do we know these are mandatory?", "bodyText": "How do we know these are mandatory?", "bodyHTML": "<p dir=\"auto\">How do we know these are mandatory?</p>", "author": "stian-sandvold", "createdAt": "2020-11-06T09:47:20Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDataValuesValidationHook.java", "diffHunk": "@@ -0,0 +1,142 @@\n+package org.hisp.dhis.tracker.validation.hooks;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import static org.hisp.dhis.tracker.report.TrackerErrorCode.E1009;\n+import static org.hisp.dhis.tracker.report.TrackerErrorCode.E1084;\n+\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.hisp.dhis.dataelement.DataElement;\n+import org.hisp.dhis.fileresource.FileResource;\n+import org.hisp.dhis.program.ProgramStage;\n+import org.hisp.dhis.program.ProgramStageDataElement;\n+import org.hisp.dhis.system.util.ValidationUtils;\n+import org.hisp.dhis.trackedentity.TrackedEntityAttributeService;\n+import org.hisp.dhis.tracker.TrackerImportStrategy;\n+import org.hisp.dhis.tracker.domain.DataValue;\n+import org.hisp.dhis.tracker.domain.Event;\n+import org.hisp.dhis.tracker.report.TrackerErrorCode;\n+import org.hisp.dhis.tracker.report.ValidationErrorReporter;\n+import org.hisp.dhis.tracker.validation.TrackerImportValidationContext;\n+import org.springframework.stereotype.Component;\n+\n+/**\n+ * @author Enrico Colasante\n+ */\n+@Component\n+public class EventDataValuesValidationHook\n+    extends AbstractTrackerDtoValidationHook\n+{\n+    public EventDataValuesValidationHook( TrackedEntityAttributeService teAttrService )\n+    {\n+        super( Event.class, TrackerImportStrategy.CREATE_AND_UPDATE, teAttrService );\n+    }\n+\n+    @Override\n+    public void validateEvent( ValidationErrorReporter reporter, Event event )\n+    {\n+        TrackerImportValidationContext context = reporter.getValidationContext();\n+\n+        for ( DataValue dataValue : event.getDataValues() )\n+        {\n+            addErrorIf( () -> !isValidDateStringAndNotNull( dataValue.getCreatedAt() ),\n+                reporter, TrackerErrorCode.E1300, dataValue.getCreatedAt() );\n+            addErrorIf( () -> !isValidDateStringAndNotNull( dataValue.getUpdatedAt() ),\n+                reporter, TrackerErrorCode.E1301, dataValue.getUpdatedAt() );\n+\n+            validateDataElement( reporter, context, dataValue );\n+        }\n+        validateMandatoryDataValue( reporter, context, event );\n+    }\n+\n+    private void validateDataElement( ValidationErrorReporter reporter, TrackerImportValidationContext ctx,\n+        DataValue dataValue )\n+    {\n+        DataElement dataElement = ctx.getDataElement( dataValue.getDataElement() );\n+\n+        if ( dataElement == null )\n+        {\n+            addError( reporter, TrackerErrorCode.E1304, dataValue.getDataElement() );\n+        }\n+        else\n+        {\n+            final String status = ValidationUtils.dataValueIsValid( dataValue.getValue(), dataElement );\n+\n+            if ( status != null )\n+            {\n+                addError( reporter, TrackerErrorCode.E1302, dataElement.getUid(), status );\n+            }\n+            else\n+            {\n+                validateFileNotAlreadyAssigned( reporter, dataValue, dataElement );\n+            }\n+        }\n+    }\n+\n+    public void validateMandatoryDataValue( ValidationErrorReporter reporter, TrackerImportValidationContext ctx,\n+        Event event )\n+    {\n+        if ( StringUtils.isEmpty( event.getProgramStage() ) )\n+            return;\n+\n+        ProgramStage programStage = ctx.getProgramStage( event.getProgramStage() );\n+\n+        final Set<ProgramStageDataElement> mandatoryDataElements = programStage.getProgramStageDataElements();", "originalCommit": "9eda8e80ece809dce9a6075d2a9b4b7e55dbd07f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODYzODkzNw==", "url": "https://github.com/dhis2/dhis2-core/pull/6565#discussion_r518638937", "body": "This is closely related to Luciano's comment:\r\n\r\nLuciano's comment is that we had a previous issue where you can update a data value that is not part of an event/programstage.\r\n\r\nThis means that if we retrieve the full list of ProgramStageDataElement for a given ProgramStage, all datavalues we valiate needs to have a data element that is part of that list. If it's not part of that list, we are trying to alter data that should not exist.\r\n\r\nSince this is only for mandatory data elements, I would say create a new method for validating this, let's say \"validateDataValueDataElementIsConnectedToProgramStage\" or something :) ", "bodyText": "This is closely related to Luciano's comment:\nLuciano's comment is that we had a previous issue where you can update a data value that is not part of an event/programstage.\nThis means that if we retrieve the full list of ProgramStageDataElement for a given ProgramStage, all datavalues we valiate needs to have a data element that is part of that list. If it's not part of that list, we are trying to alter data that should not exist.\nSince this is only for mandatory data elements, I would say create a new method for validating this, let's say \"validateDataValueDataElementIsConnectedToProgramStage\" or something :)", "bodyHTML": "<p dir=\"auto\">This is closely related to Luciano's comment:</p>\n<p dir=\"auto\">Luciano's comment is that we had a previous issue where you can update a data value that is not part of an event/programstage.</p>\n<p dir=\"auto\">This means that if we retrieve the full list of ProgramStageDataElement for a given ProgramStage, all datavalues we valiate needs to have a data element that is part of that list. If it's not part of that list, we are trying to alter data that should not exist.</p>\n<p dir=\"auto\">Since this is only for mandatory data elements, I would say create a new method for validating this, let's say \"validateDataValueDataElementIsConnectedToProgramStage\" or something :)</p>", "author": "stian-sandvold", "createdAt": "2020-11-06T09:51:13Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDataValuesValidationHook.java", "diffHunk": "@@ -0,0 +1,142 @@\n+package org.hisp.dhis.tracker.validation.hooks;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import static org.hisp.dhis.tracker.report.TrackerErrorCode.E1009;\n+import static org.hisp.dhis.tracker.report.TrackerErrorCode.E1084;\n+\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.hisp.dhis.dataelement.DataElement;\n+import org.hisp.dhis.fileresource.FileResource;\n+import org.hisp.dhis.program.ProgramStage;\n+import org.hisp.dhis.program.ProgramStageDataElement;\n+import org.hisp.dhis.system.util.ValidationUtils;\n+import org.hisp.dhis.trackedentity.TrackedEntityAttributeService;\n+import org.hisp.dhis.tracker.TrackerImportStrategy;\n+import org.hisp.dhis.tracker.domain.DataValue;\n+import org.hisp.dhis.tracker.domain.Event;\n+import org.hisp.dhis.tracker.report.TrackerErrorCode;\n+import org.hisp.dhis.tracker.report.ValidationErrorReporter;\n+import org.hisp.dhis.tracker.validation.TrackerImportValidationContext;\n+import org.springframework.stereotype.Component;\n+\n+/**\n+ * @author Enrico Colasante\n+ */\n+@Component\n+public class EventDataValuesValidationHook\n+    extends AbstractTrackerDtoValidationHook\n+{\n+    public EventDataValuesValidationHook( TrackedEntityAttributeService teAttrService )\n+    {\n+        super( Event.class, TrackerImportStrategy.CREATE_AND_UPDATE, teAttrService );\n+    }\n+\n+    @Override\n+    public void validateEvent( ValidationErrorReporter reporter, Event event )\n+    {\n+        TrackerImportValidationContext context = reporter.getValidationContext();\n+\n+        for ( DataValue dataValue : event.getDataValues() )\n+        {\n+            addErrorIf( () -> !isValidDateStringAndNotNull( dataValue.getCreatedAt() ),\n+                reporter, TrackerErrorCode.E1300, dataValue.getCreatedAt() );\n+            addErrorIf( () -> !isValidDateStringAndNotNull( dataValue.getUpdatedAt() ),\n+                reporter, TrackerErrorCode.E1301, dataValue.getUpdatedAt() );\n+\n+            validateDataElement( reporter, context, dataValue );\n+        }\n+        validateMandatoryDataValue( reporter, context, event );\n+    }\n+\n+    private void validateDataElement( ValidationErrorReporter reporter, TrackerImportValidationContext ctx,\n+        DataValue dataValue )\n+    {\n+        DataElement dataElement = ctx.getDataElement( dataValue.getDataElement() );\n+\n+        if ( dataElement == null )\n+        {\n+            addError( reporter, TrackerErrorCode.E1304, dataValue.getDataElement() );\n+        }\n+        else\n+        {\n+            final String status = ValidationUtils.dataValueIsValid( dataValue.getValue(), dataElement );\n+\n+            if ( status != null )\n+            {\n+                addError( reporter, TrackerErrorCode.E1302, dataElement.getUid(), status );\n+            }\n+            else\n+            {\n+                validateFileNotAlreadyAssigned( reporter, dataValue, dataElement );\n+            }\n+        }\n+    }\n+\n+    public void validateMandatoryDataValue( ValidationErrorReporter reporter, TrackerImportValidationContext ctx,\n+        Event event )\n+    {\n+        if ( StringUtils.isEmpty( event.getProgramStage() ) )\n+            return;\n+\n+        ProgramStage programStage = ctx.getProgramStage( event.getProgramStage() );\n+\n+        final Set<ProgramStageDataElement> mandatoryDataElements = programStage.getProgramStageDataElements();\n+\n+        Set<String> eventDataElements = event.getDataValues().stream()\n+            .map( DataValue::getDataElement )\n+            .collect( Collectors.toSet() );\n+\n+        for ( ProgramStageDataElement mandatoryDataElement : mandatoryDataElements )", "originalCommit": "9eda8e80ece809dce9a6075d2a9b4b7e55dbd07f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "30b41683795816c884406b8d4d8199e1fd30a583", "url": "https://github.com/dhis2/dhis2-core/commit/30b41683795816c884406b8d4d8199e1fd30a583", "message": "Implement code review comments", "committedDate": "2020-11-09T08:37:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTc2NTU3NQ==", "url": "https://github.com/dhis2/dhis2-core/pull/6565#discussion_r519765575", "body": "```suggestion\r\n    private void validateDataValueDataElementIsConnectedToProgramStage( ValidationErrorReporter reporter, TrackerImportValidationContext ctx, Event event ) {\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private void validateDataValueDataElementIsConnectedToProgramStage(ValidationErrorReporter reporter, TrackerImportValidationContext ctx, Event event) {\n          \n          \n            \n                private void validateDataValueDataElementIsConnectedToProgramStage( ValidationErrorReporter reporter, TrackerImportValidationContext ctx, Event event ) {", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">private</span> <span class=\"pl-k\">void</span> validateDataValueDataElementIsConnectedToProgramStage(<span class=\"pl-smi\">ValidationErrorReporter</span> reporter, <span class=\"pl-smi\">TrackerImportValidationContext</span> ctx, <span class=\"pl-smi\">Event</span> event) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">private</span> <span class=\"pl-k\">void</span> validateDataValueDataElementIsConnectedToProgramStage(<span class=\"x x-first x-last\"> </span><span class=\"pl-smi\">ValidationErrorReporter</span> reporter, <span class=\"pl-smi\">TrackerImportValidationContext</span> ctx, <span class=\"pl-smi\">Event</span> event<span class=\"x x-first x-last\"> </span>) {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "stian-sandvold", "createdAt": "2020-11-09T12:18:48Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDataValuesValidationHook.java", "diffHunk": "@@ -0,0 +1,172 @@\n+package org.hisp.dhis.tracker.validation.hooks;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import static org.hisp.dhis.tracker.report.TrackerErrorCode.E1009;\n+import static org.hisp.dhis.tracker.report.TrackerErrorCode.E1084;\n+\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.hisp.dhis.dataelement.DataElement;\n+import org.hisp.dhis.fileresource.FileResource;\n+import org.hisp.dhis.program.ProgramStage;\n+import org.hisp.dhis.program.ProgramStageDataElement;\n+import org.hisp.dhis.system.util.ValidationUtils;\n+import org.hisp.dhis.trackedentity.TrackedEntityAttributeService;\n+import org.hisp.dhis.tracker.TrackerImportStrategy;\n+import org.hisp.dhis.tracker.domain.DataValue;\n+import org.hisp.dhis.tracker.domain.Event;\n+import org.hisp.dhis.tracker.report.TrackerErrorCode;\n+import org.hisp.dhis.tracker.report.ValidationErrorReporter;\n+import org.hisp.dhis.tracker.validation.TrackerImportValidationContext;\n+import org.springframework.stereotype.Component;\n+\n+/**\n+ * @author Enrico Colasante\n+ */\n+@Component\n+public class EventDataValuesValidationHook\n+    extends AbstractTrackerDtoValidationHook\n+{\n+    public EventDataValuesValidationHook( TrackedEntityAttributeService teAttrService )\n+    {\n+        super( Event.class, TrackerImportStrategy.CREATE_AND_UPDATE, teAttrService );\n+    }\n+\n+    @Override\n+    public void validateEvent( ValidationErrorReporter reporter, Event event )\n+    {\n+        TrackerImportValidationContext context = reporter.getValidationContext();\n+\n+        for ( DataValue dataValue : event.getDataValues() )\n+        {\n+            addErrorIf( () -> !isValidDateStringAndNotNull( dataValue.getCreatedAt() ),\n+                reporter, TrackerErrorCode.E1300, dataValue.getCreatedAt() );\n+            addErrorIf( () -> !isValidDateStringAndNotNull( dataValue.getUpdatedAt() ),\n+                reporter, TrackerErrorCode.E1301, dataValue.getUpdatedAt() );\n+\n+            validateDataElement( reporter, context, dataValue );\n+        }\n+        validateMandatoryDataValue( reporter, context, event );\n+        validateDataValueDataElementIsConnectedToProgramStage(reporter, context, event);\n+    }\n+\n+    private void validateDataElement( ValidationErrorReporter reporter, TrackerImportValidationContext ctx,\n+        DataValue dataValue )\n+    {\n+        DataElement dataElement = ctx.getDataElement( dataValue.getDataElement() );\n+\n+        if ( dataElement == null )\n+        {\n+            addError( reporter, TrackerErrorCode.E1304, dataValue.getDataElement() );\n+        }\n+        else\n+        {\n+            final String status = ValidationUtils.dataValueIsValid( dataValue.getValue(), dataElement );\n+\n+            if ( status != null )\n+            {\n+                addError( reporter, TrackerErrorCode.E1302, dataElement.getUid(), status );\n+            }\n+            else\n+            {\n+                validateFileNotAlreadyAssigned( reporter, dataValue, dataElement );\n+            }\n+        }\n+    }\n+\n+    public void validateMandatoryDataValue( ValidationErrorReporter reporter, TrackerImportValidationContext ctx,\n+        Event event )\n+    {\n+        if ( StringUtils.isEmpty( event.getProgramStage() ) )\n+            return;\n+\n+        ProgramStage programStage = ctx.getProgramStage( event.getProgramStage() );\n+\n+        final Set<ProgramStageDataElement> mandatoryDataElements =\n+                programStage.getProgramStageDataElements()\n+                .stream()\n+                .filter(ProgramStageDataElement::isCompulsory)\n+                .collect(Collectors.toSet());\n+\n+        Set<String> eventDataElements = event.getDataValues().stream()\n+            .map( DataValue::getDataElement )\n+            .collect( Collectors.toSet() );\n+\n+        for ( ProgramStageDataElement mandatoryDataElement : mandatoryDataElements )\n+        {\n+            if ( !eventDataElements.contains( mandatoryDataElement.getDataElement().getUid() ) )\n+            {\n+                addError( reporter, TrackerErrorCode.E1303, mandatoryDataElement.getDataElement() );\n+            }\n+        }\n+    }\n+\n+    private void validateDataValueDataElementIsConnectedToProgramStage(ValidationErrorReporter reporter, TrackerImportValidationContext ctx, Event event) {", "originalCommit": "30b41683795816c884406b8d4d8199e1fd30a583", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTc2NTcyNw==", "url": "https://github.com/dhis2/dhis2-core/pull/6565#discussion_r519765727", "body": "```suggestion\r\n                        .map( de -> de.getDataElement().getUid() )\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    .map(de -> de.getDataElement().getUid())\n          \n          \n            \n                                    .map( de -> de.getDataElement().getUid() )", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                        .map(de <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> de<span class=\"pl-k\">.</span>getDataElement()<span class=\"pl-k\">.</span>getUid())</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                        .map(<span class=\"x x-first x-last\"> </span>de <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> de<span class=\"pl-k\">.</span>getDataElement()<span class=\"pl-k\">.</span>getUid()<span class=\"x x-first x-last\"> </span>)</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "stian-sandvold", "createdAt": "2020-11-09T12:19:03Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDataValuesValidationHook.java", "diffHunk": "@@ -0,0 +1,172 @@\n+package org.hisp.dhis.tracker.validation.hooks;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import static org.hisp.dhis.tracker.report.TrackerErrorCode.E1009;\n+import static org.hisp.dhis.tracker.report.TrackerErrorCode.E1084;\n+\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.hisp.dhis.dataelement.DataElement;\n+import org.hisp.dhis.fileresource.FileResource;\n+import org.hisp.dhis.program.ProgramStage;\n+import org.hisp.dhis.program.ProgramStageDataElement;\n+import org.hisp.dhis.system.util.ValidationUtils;\n+import org.hisp.dhis.trackedentity.TrackedEntityAttributeService;\n+import org.hisp.dhis.tracker.TrackerImportStrategy;\n+import org.hisp.dhis.tracker.domain.DataValue;\n+import org.hisp.dhis.tracker.domain.Event;\n+import org.hisp.dhis.tracker.report.TrackerErrorCode;\n+import org.hisp.dhis.tracker.report.ValidationErrorReporter;\n+import org.hisp.dhis.tracker.validation.TrackerImportValidationContext;\n+import org.springframework.stereotype.Component;\n+\n+/**\n+ * @author Enrico Colasante\n+ */\n+@Component\n+public class EventDataValuesValidationHook\n+    extends AbstractTrackerDtoValidationHook\n+{\n+    public EventDataValuesValidationHook( TrackedEntityAttributeService teAttrService )\n+    {\n+        super( Event.class, TrackerImportStrategy.CREATE_AND_UPDATE, teAttrService );\n+    }\n+\n+    @Override\n+    public void validateEvent( ValidationErrorReporter reporter, Event event )\n+    {\n+        TrackerImportValidationContext context = reporter.getValidationContext();\n+\n+        for ( DataValue dataValue : event.getDataValues() )\n+        {\n+            addErrorIf( () -> !isValidDateStringAndNotNull( dataValue.getCreatedAt() ),\n+                reporter, TrackerErrorCode.E1300, dataValue.getCreatedAt() );\n+            addErrorIf( () -> !isValidDateStringAndNotNull( dataValue.getUpdatedAt() ),\n+                reporter, TrackerErrorCode.E1301, dataValue.getUpdatedAt() );\n+\n+            validateDataElement( reporter, context, dataValue );\n+        }\n+        validateMandatoryDataValue( reporter, context, event );\n+        validateDataValueDataElementIsConnectedToProgramStage(reporter, context, event);\n+    }\n+\n+    private void validateDataElement( ValidationErrorReporter reporter, TrackerImportValidationContext ctx,\n+        DataValue dataValue )\n+    {\n+        DataElement dataElement = ctx.getDataElement( dataValue.getDataElement() );\n+\n+        if ( dataElement == null )\n+        {\n+            addError( reporter, TrackerErrorCode.E1304, dataValue.getDataElement() );\n+        }\n+        else\n+        {\n+            final String status = ValidationUtils.dataValueIsValid( dataValue.getValue(), dataElement );\n+\n+            if ( status != null )\n+            {\n+                addError( reporter, TrackerErrorCode.E1302, dataElement.getUid(), status );\n+            }\n+            else\n+            {\n+                validateFileNotAlreadyAssigned( reporter, dataValue, dataElement );\n+            }\n+        }\n+    }\n+\n+    public void validateMandatoryDataValue( ValidationErrorReporter reporter, TrackerImportValidationContext ctx,\n+        Event event )\n+    {\n+        if ( StringUtils.isEmpty( event.getProgramStage() ) )\n+            return;\n+\n+        ProgramStage programStage = ctx.getProgramStage( event.getProgramStage() );\n+\n+        final Set<ProgramStageDataElement> mandatoryDataElements =\n+                programStage.getProgramStageDataElements()\n+                .stream()\n+                .filter(ProgramStageDataElement::isCompulsory)\n+                .collect(Collectors.toSet());\n+\n+        Set<String> eventDataElements = event.getDataValues().stream()\n+            .map( DataValue::getDataElement )\n+            .collect( Collectors.toSet() );\n+\n+        for ( ProgramStageDataElement mandatoryDataElement : mandatoryDataElements )\n+        {\n+            if ( !eventDataElements.contains( mandatoryDataElement.getDataElement().getUid() ) )\n+            {\n+                addError( reporter, TrackerErrorCode.E1303, mandatoryDataElement.getDataElement() );\n+            }\n+        }\n+    }\n+\n+    private void validateDataValueDataElementIsConnectedToProgramStage(ValidationErrorReporter reporter, TrackerImportValidationContext ctx, Event event) {\n+        if ( StringUtils.isEmpty( event.getProgramStage() ) )\n+            return;\n+\n+        ProgramStage programStage = ctx.getProgramStage( event.getProgramStage() );\n+\n+        final Set<String> dataElements =\n+                programStage.getProgramStageDataElements()\n+                        .stream()\n+                        .map(de -> de.getDataElement().getUid())", "originalCommit": "30b41683795816c884406b8d4d8199e1fd30a583", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTc2NTgyMA==", "url": "https://github.com/dhis2/dhis2-core/pull/6565#discussion_r519765820", "body": "```suggestion\r\n                        .collect( Collectors.toSet() );\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    .collect(Collectors.toSet());\n          \n          \n            \n                                    .collect( Collectors.toSet() );", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                        .collect(<span class=\"pl-smi\">Collectors</span><span class=\"pl-k\">.</span>toSet());</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                        .collect(<span class=\"x x-first x-last\"> </span><span class=\"pl-smi\">Collectors</span><span class=\"pl-k\">.</span>toSet()<span class=\"x x-first x-last\"> </span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "stian-sandvold", "createdAt": "2020-11-09T12:19:12Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDataValuesValidationHook.java", "diffHunk": "@@ -0,0 +1,172 @@\n+package org.hisp.dhis.tracker.validation.hooks;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import static org.hisp.dhis.tracker.report.TrackerErrorCode.E1009;\n+import static org.hisp.dhis.tracker.report.TrackerErrorCode.E1084;\n+\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.hisp.dhis.dataelement.DataElement;\n+import org.hisp.dhis.fileresource.FileResource;\n+import org.hisp.dhis.program.ProgramStage;\n+import org.hisp.dhis.program.ProgramStageDataElement;\n+import org.hisp.dhis.system.util.ValidationUtils;\n+import org.hisp.dhis.trackedentity.TrackedEntityAttributeService;\n+import org.hisp.dhis.tracker.TrackerImportStrategy;\n+import org.hisp.dhis.tracker.domain.DataValue;\n+import org.hisp.dhis.tracker.domain.Event;\n+import org.hisp.dhis.tracker.report.TrackerErrorCode;\n+import org.hisp.dhis.tracker.report.ValidationErrorReporter;\n+import org.hisp.dhis.tracker.validation.TrackerImportValidationContext;\n+import org.springframework.stereotype.Component;\n+\n+/**\n+ * @author Enrico Colasante\n+ */\n+@Component\n+public class EventDataValuesValidationHook\n+    extends AbstractTrackerDtoValidationHook\n+{\n+    public EventDataValuesValidationHook( TrackedEntityAttributeService teAttrService )\n+    {\n+        super( Event.class, TrackerImportStrategy.CREATE_AND_UPDATE, teAttrService );\n+    }\n+\n+    @Override\n+    public void validateEvent( ValidationErrorReporter reporter, Event event )\n+    {\n+        TrackerImportValidationContext context = reporter.getValidationContext();\n+\n+        for ( DataValue dataValue : event.getDataValues() )\n+        {\n+            addErrorIf( () -> !isValidDateStringAndNotNull( dataValue.getCreatedAt() ),\n+                reporter, TrackerErrorCode.E1300, dataValue.getCreatedAt() );\n+            addErrorIf( () -> !isValidDateStringAndNotNull( dataValue.getUpdatedAt() ),\n+                reporter, TrackerErrorCode.E1301, dataValue.getUpdatedAt() );\n+\n+            validateDataElement( reporter, context, dataValue );\n+        }\n+        validateMandatoryDataValue( reporter, context, event );\n+        validateDataValueDataElementIsConnectedToProgramStage(reporter, context, event);\n+    }\n+\n+    private void validateDataElement( ValidationErrorReporter reporter, TrackerImportValidationContext ctx,\n+        DataValue dataValue )\n+    {\n+        DataElement dataElement = ctx.getDataElement( dataValue.getDataElement() );\n+\n+        if ( dataElement == null )\n+        {\n+            addError( reporter, TrackerErrorCode.E1304, dataValue.getDataElement() );\n+        }\n+        else\n+        {\n+            final String status = ValidationUtils.dataValueIsValid( dataValue.getValue(), dataElement );\n+\n+            if ( status != null )\n+            {\n+                addError( reporter, TrackerErrorCode.E1302, dataElement.getUid(), status );\n+            }\n+            else\n+            {\n+                validateFileNotAlreadyAssigned( reporter, dataValue, dataElement );\n+            }\n+        }\n+    }\n+\n+    public void validateMandatoryDataValue( ValidationErrorReporter reporter, TrackerImportValidationContext ctx,\n+        Event event )\n+    {\n+        if ( StringUtils.isEmpty( event.getProgramStage() ) )\n+            return;\n+\n+        ProgramStage programStage = ctx.getProgramStage( event.getProgramStage() );\n+\n+        final Set<ProgramStageDataElement> mandatoryDataElements =\n+                programStage.getProgramStageDataElements()\n+                .stream()\n+                .filter(ProgramStageDataElement::isCompulsory)\n+                .collect(Collectors.toSet());\n+\n+        Set<String> eventDataElements = event.getDataValues().stream()\n+            .map( DataValue::getDataElement )\n+            .collect( Collectors.toSet() );\n+\n+        for ( ProgramStageDataElement mandatoryDataElement : mandatoryDataElements )\n+        {\n+            if ( !eventDataElements.contains( mandatoryDataElement.getDataElement().getUid() ) )\n+            {\n+                addError( reporter, TrackerErrorCode.E1303, mandatoryDataElement.getDataElement() );\n+            }\n+        }\n+    }\n+\n+    private void validateDataValueDataElementIsConnectedToProgramStage(ValidationErrorReporter reporter, TrackerImportValidationContext ctx, Event event) {\n+        if ( StringUtils.isEmpty( event.getProgramStage() ) )\n+            return;\n+\n+        ProgramStage programStage = ctx.getProgramStage( event.getProgramStage() );\n+\n+        final Set<String> dataElements =\n+                programStage.getProgramStageDataElements()\n+                        .stream()\n+                        .map(de -> de.getDataElement().getUid())\n+                        .collect(Collectors.toSet());", "originalCommit": "30b41683795816c884406b8d4d8199e1fd30a583", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTc2NjE3OQ==", "url": "https://github.com/dhis2/dhis2-core/pull/6565#discussion_r519766179", "body": "```suggestion\r\n        dataElement.setUid( validDataValue().getDataElement() );\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    dataElement.setUid(validDataValue().getDataElement());\n          \n          \n            \n                    dataElement.setUid( validDataValue().getDataElement() );", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        dataElement<span class=\"pl-k\">.</span>setUid(validDataValue()<span class=\"pl-k\">.</span>getDataElement());</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        dataElement<span class=\"pl-k\">.</span>setUid(<span class=\"x x-first x-last\"> </span>validDataValue()<span class=\"pl-k\">.</span>getDataElement()<span class=\"x x-first x-last\"> </span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "stian-sandvold", "createdAt": "2020-11-09T12:19:49Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/hooks/EventDataValuesValidationHookTest.java", "diffHunk": "@@ -0,0 +1,384 @@\n+package org.hisp.dhis.tracker.validation.hooks;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.empty;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import org.hisp.dhis.common.ValueType;\n+import org.hisp.dhis.dataelement.DataElement;\n+import org.hisp.dhis.fileresource.FileResource;\n+import org.hisp.dhis.program.ProgramStage;\n+import org.hisp.dhis.program.ProgramStageDataElement;\n+import org.hisp.dhis.trackedentity.TrackedEntityAttributeService;\n+import org.hisp.dhis.tracker.TrackerIdScheme;\n+import org.hisp.dhis.tracker.bundle.TrackerBundle;\n+import org.hisp.dhis.tracker.domain.DataValue;\n+import org.hisp.dhis.tracker.domain.Event;\n+import org.hisp.dhis.tracker.report.TrackerErrorCode;\n+import org.hisp.dhis.tracker.report.ValidationErrorReporter;\n+import org.hisp.dhis.tracker.validation.TrackerImportValidationContext;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnit;\n+import org.mockito.junit.MockitoRule;\n+\n+import com.google.common.collect.Sets;\n+\n+/**\n+ * @author Enrico Colasante\n+ */\n+public class EventDataValuesValidationHookTest\n+{\n+    private final static String VALID_DATA_ELEMENT = \"validDataElement\";\n+\n+    private EventDataValuesValidationHook hookToTest;\n+\n+    @Mock\n+    private TrackedEntityAttributeService teAttrService;\n+\n+    @Rule\n+    public MockitoRule mockitoRule = MockitoJUnit.rule();\n+\n+    @Mock\n+    private TrackerImportValidationContext validationContext;\n+\n+    @Mock\n+    private Event event;\n+\n+    @Before\n+    public void setUp()\n+    {\n+        hookToTest = new EventDataValuesValidationHook( teAttrService );\n+\n+        DataElement validDataElement = new DataElement();\n+        validDataElement.setValueType( ValueType.TEXT );\n+\n+        TrackerBundle bundle = mock( TrackerBundle.class );\n+\n+        when( validationContext.getBundle() ).thenReturn( bundle );\n+        when( bundle.getIdentifier() ).thenReturn( TrackerIdScheme.UID );\n+        when( validationContext.getDataElement( VALID_DATA_ELEMENT ) ).thenReturn( validDataElement );\n+    }\n+\n+    @Test\n+    public void successValidationWhenDataElementIsValid()\n+    {\n+        // Given\n+        when( event.getDataValues() ).thenReturn( Sets.newHashSet( validDataValue() ) );\n+\n+        // When\n+        ValidationErrorReporter reporter = new ValidationErrorReporter( validationContext, this.getClass() );\n+        hookToTest.validateEvent( reporter, event );\n+\n+        // Then\n+        assertThat( reporter.getReportList(), empty() );\n+    }\n+\n+    @Test\n+    public void failValidationWhenCreatedAtIsNull()\n+    {\n+        // Given\n+        DataValue validDataValue = validDataValue();\n+        validDataValue.setCreatedAt( null );\n+        when( event.getDataValues() ).thenReturn( Sets.newHashSet( validDataValue ) );\n+\n+        // When\n+        ValidationErrorReporter reporter = new ValidationErrorReporter( validationContext, this.getClass() );\n+        hookToTest.validateEvent( reporter, event );\n+\n+        // Then\n+        assertThat( reporter.getReportList(), hasSize( 1 ) );\n+        assertEquals( TrackerErrorCode.E1300, reporter.getReportList().get( 0 ).getErrorCode() );\n+    }\n+\n+    @Test\n+    public void failValidationWhenCreatedAtIsInvalid()\n+    {\n+        // Given\n+        DataValue validDataValue = validDataValue();\n+        validDataValue.setCreatedAt( \"INVALID_DATE\" );\n+        when( event.getDataValues() ).thenReturn( Sets.newHashSet( validDataValue ) );\n+\n+        // When\n+        ValidationErrorReporter reporter = new ValidationErrorReporter( validationContext, this.getClass() );\n+        hookToTest.validateEvent( reporter, event );\n+\n+        // Then\n+        assertThat( reporter.getReportList(), hasSize( 1 ) );\n+        assertEquals( TrackerErrorCode.E1300, reporter.getReportList().get( 0 ).getErrorCode() );\n+    }\n+\n+    @Test\n+    public void failValidationWhenUpdatedAtIsNull()\n+    {\n+        // Given\n+        DataValue validDataValue = validDataValue();\n+        validDataValue.setUpdatedAt( null );\n+        when( event.getDataValues() ).thenReturn( Sets.newHashSet( validDataValue ) );\n+\n+        // When\n+        ValidationErrorReporter reporter = new ValidationErrorReporter( validationContext, this.getClass() );\n+        hookToTest.validateEvent( reporter, event );\n+\n+        // Then\n+        assertThat( reporter.getReportList(), hasSize( 1 ) );\n+        assertEquals( TrackerErrorCode.E1301, reporter.getReportList().get( 0 ).getErrorCode() );\n+    }\n+\n+    @Test\n+    public void failValidationWhenUpdatedAtIsInvalid()\n+    {\n+        // Given\n+        DataValue validDataValue = validDataValue();\n+        validDataValue.setUpdatedAt( \"INVALID_DATE\" );\n+        when( event.getDataValues() ).thenReturn( Sets.newHashSet( validDataValue ) );\n+\n+        // When\n+        ValidationErrorReporter reporter = new ValidationErrorReporter( validationContext, this.getClass() );\n+        hookToTest.validateEvent( reporter, event );\n+\n+        // Then\n+        assertThat( reporter.getReportList(), hasSize( 1 ) );\n+        assertEquals( TrackerErrorCode.E1301, reporter.getReportList().get( 0 ).getErrorCode() );\n+    }\n+\n+    @Test\n+    public void failValidationWhenDataElementIsInvalid()\n+    {\n+        // Given\n+        DataValue validDataValue = validDataValue();\n+        validDataValue.setDataElement( \"INVALID_DE\" );\n+        when( event.getDataValues() ).thenReturn( Sets.newHashSet( validDataValue ) );\n+\n+        // When\n+        ValidationErrorReporter reporter = new ValidationErrorReporter( validationContext, this.getClass() );\n+        hookToTest.validateEvent( reporter, event );\n+\n+        // Then\n+        assertThat( reporter.getReportList(), hasSize( 1 ) );\n+        assertEquals( TrackerErrorCode.E1304, reporter.getReportList().get( 0 ).getErrorCode() );\n+    }\n+\n+    @Test\n+    public void failValidationWhenMandatoryDataElementIsNotPresent()\n+    {\n+        // Given\n+        ProgramStage programStage = new ProgramStage();\n+        ProgramStageDataElement mandatoryStageDataElement = new ProgramStageDataElement();\n+        DataElement dataElement = new DataElement();\n+        dataElement.setUid( \"MANDATORY_DE\" );\n+        mandatoryStageDataElement.setDataElement( dataElement );\n+        mandatoryStageDataElement.setCompulsory( true );\n+\n+        ProgramStageDataElement stageDataElement = new ProgramStageDataElement();\n+        DataElement validDataElement = new DataElement();\n+        validDataElement.setUid( validDataValue().getDataElement() );\n+        stageDataElement.setDataElement( validDataElement );\n+        stageDataElement.setCompulsory( true );\n+\n+        programStage.setProgramStageDataElements( Sets.newHashSet( mandatoryStageDataElement, stageDataElement ) );\n+        when( event.getDataValues() ).thenReturn( Sets.newHashSet( validDataValue() ) );\n+        when( event.getProgramStage() ).thenReturn( \"PROGRAM_STAGE\" );\n+        when( validationContext.getProgramStage( \"PROGRAM_STAGE\" ) ).thenReturn( programStage );\n+\n+        // When\n+        ValidationErrorReporter reporter = new ValidationErrorReporter( validationContext, this.getClass() );\n+        hookToTest.validateEvent( reporter, event );\n+\n+        // Then\n+        assertThat( reporter.getReportList(), hasSize( 1 ) );\n+        assertEquals( TrackerErrorCode.E1303, reporter.getReportList().get( 0 ).getErrorCode() );\n+    }\n+\n+    @Test\n+    public void failValidationWhenDataElementIsNotPresentInProgramStage()\n+    {\n+        // Given\n+        ProgramStage programStage = new ProgramStage();\n+        ProgramStageDataElement mandatoryStageDataElement = new ProgramStageDataElement();\n+        DataElement dataElement = new DataElement();\n+        dataElement.setUid(validDataValue().getDataElement());", "originalCommit": "30b41683795816c884406b8d4d8199e1fd30a583", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTc2NjQwMA==", "url": "https://github.com/dhis2/dhis2-core/pull/6565#discussion_r519766400", "body": "```suggestion\r\n        notPresentDataValue.setDataElement( \"de_not_present_in_progam_stage\" );\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    notPresentDataValue.setDataElement(\"de_not_present_in_progam_stage\");\n          \n          \n            \n                    notPresentDataValue.setDataElement( \"de_not_present_in_progam_stage\" );", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        notPresentDataValue<span class=\"pl-k\">.</span>setDataElement(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>de_not_present_in_progam_stage<span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        notPresentDataValue<span class=\"pl-k\">.</span>setDataElement(<span class=\"x x-first x-last\"> </span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>de_not_present_in_progam_stage<span class=\"pl-pds\">\"</span></span><span class=\"x x-first x-last\"> </span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "stian-sandvold", "createdAt": "2020-11-09T12:20:11Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/hooks/EventDataValuesValidationHookTest.java", "diffHunk": "@@ -0,0 +1,384 @@\n+package org.hisp.dhis.tracker.validation.hooks;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.empty;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import org.hisp.dhis.common.ValueType;\n+import org.hisp.dhis.dataelement.DataElement;\n+import org.hisp.dhis.fileresource.FileResource;\n+import org.hisp.dhis.program.ProgramStage;\n+import org.hisp.dhis.program.ProgramStageDataElement;\n+import org.hisp.dhis.trackedentity.TrackedEntityAttributeService;\n+import org.hisp.dhis.tracker.TrackerIdScheme;\n+import org.hisp.dhis.tracker.bundle.TrackerBundle;\n+import org.hisp.dhis.tracker.domain.DataValue;\n+import org.hisp.dhis.tracker.domain.Event;\n+import org.hisp.dhis.tracker.report.TrackerErrorCode;\n+import org.hisp.dhis.tracker.report.ValidationErrorReporter;\n+import org.hisp.dhis.tracker.validation.TrackerImportValidationContext;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnit;\n+import org.mockito.junit.MockitoRule;\n+\n+import com.google.common.collect.Sets;\n+\n+/**\n+ * @author Enrico Colasante\n+ */\n+public class EventDataValuesValidationHookTest\n+{\n+    private final static String VALID_DATA_ELEMENT = \"validDataElement\";\n+\n+    private EventDataValuesValidationHook hookToTest;\n+\n+    @Mock\n+    private TrackedEntityAttributeService teAttrService;\n+\n+    @Rule\n+    public MockitoRule mockitoRule = MockitoJUnit.rule();\n+\n+    @Mock\n+    private TrackerImportValidationContext validationContext;\n+\n+    @Mock\n+    private Event event;\n+\n+    @Before\n+    public void setUp()\n+    {\n+        hookToTest = new EventDataValuesValidationHook( teAttrService );\n+\n+        DataElement validDataElement = new DataElement();\n+        validDataElement.setValueType( ValueType.TEXT );\n+\n+        TrackerBundle bundle = mock( TrackerBundle.class );\n+\n+        when( validationContext.getBundle() ).thenReturn( bundle );\n+        when( bundle.getIdentifier() ).thenReturn( TrackerIdScheme.UID );\n+        when( validationContext.getDataElement( VALID_DATA_ELEMENT ) ).thenReturn( validDataElement );\n+    }\n+\n+    @Test\n+    public void successValidationWhenDataElementIsValid()\n+    {\n+        // Given\n+        when( event.getDataValues() ).thenReturn( Sets.newHashSet( validDataValue() ) );\n+\n+        // When\n+        ValidationErrorReporter reporter = new ValidationErrorReporter( validationContext, this.getClass() );\n+        hookToTest.validateEvent( reporter, event );\n+\n+        // Then\n+        assertThat( reporter.getReportList(), empty() );\n+    }\n+\n+    @Test\n+    public void failValidationWhenCreatedAtIsNull()\n+    {\n+        // Given\n+        DataValue validDataValue = validDataValue();\n+        validDataValue.setCreatedAt( null );\n+        when( event.getDataValues() ).thenReturn( Sets.newHashSet( validDataValue ) );\n+\n+        // When\n+        ValidationErrorReporter reporter = new ValidationErrorReporter( validationContext, this.getClass() );\n+        hookToTest.validateEvent( reporter, event );\n+\n+        // Then\n+        assertThat( reporter.getReportList(), hasSize( 1 ) );\n+        assertEquals( TrackerErrorCode.E1300, reporter.getReportList().get( 0 ).getErrorCode() );\n+    }\n+\n+    @Test\n+    public void failValidationWhenCreatedAtIsInvalid()\n+    {\n+        // Given\n+        DataValue validDataValue = validDataValue();\n+        validDataValue.setCreatedAt( \"INVALID_DATE\" );\n+        when( event.getDataValues() ).thenReturn( Sets.newHashSet( validDataValue ) );\n+\n+        // When\n+        ValidationErrorReporter reporter = new ValidationErrorReporter( validationContext, this.getClass() );\n+        hookToTest.validateEvent( reporter, event );\n+\n+        // Then\n+        assertThat( reporter.getReportList(), hasSize( 1 ) );\n+        assertEquals( TrackerErrorCode.E1300, reporter.getReportList().get( 0 ).getErrorCode() );\n+    }\n+\n+    @Test\n+    public void failValidationWhenUpdatedAtIsNull()\n+    {\n+        // Given\n+        DataValue validDataValue = validDataValue();\n+        validDataValue.setUpdatedAt( null );\n+        when( event.getDataValues() ).thenReturn( Sets.newHashSet( validDataValue ) );\n+\n+        // When\n+        ValidationErrorReporter reporter = new ValidationErrorReporter( validationContext, this.getClass() );\n+        hookToTest.validateEvent( reporter, event );\n+\n+        // Then\n+        assertThat( reporter.getReportList(), hasSize( 1 ) );\n+        assertEquals( TrackerErrorCode.E1301, reporter.getReportList().get( 0 ).getErrorCode() );\n+    }\n+\n+    @Test\n+    public void failValidationWhenUpdatedAtIsInvalid()\n+    {\n+        // Given\n+        DataValue validDataValue = validDataValue();\n+        validDataValue.setUpdatedAt( \"INVALID_DATE\" );\n+        when( event.getDataValues() ).thenReturn( Sets.newHashSet( validDataValue ) );\n+\n+        // When\n+        ValidationErrorReporter reporter = new ValidationErrorReporter( validationContext, this.getClass() );\n+        hookToTest.validateEvent( reporter, event );\n+\n+        // Then\n+        assertThat( reporter.getReportList(), hasSize( 1 ) );\n+        assertEquals( TrackerErrorCode.E1301, reporter.getReportList().get( 0 ).getErrorCode() );\n+    }\n+\n+    @Test\n+    public void failValidationWhenDataElementIsInvalid()\n+    {\n+        // Given\n+        DataValue validDataValue = validDataValue();\n+        validDataValue.setDataElement( \"INVALID_DE\" );\n+        when( event.getDataValues() ).thenReturn( Sets.newHashSet( validDataValue ) );\n+\n+        // When\n+        ValidationErrorReporter reporter = new ValidationErrorReporter( validationContext, this.getClass() );\n+        hookToTest.validateEvent( reporter, event );\n+\n+        // Then\n+        assertThat( reporter.getReportList(), hasSize( 1 ) );\n+        assertEquals( TrackerErrorCode.E1304, reporter.getReportList().get( 0 ).getErrorCode() );\n+    }\n+\n+    @Test\n+    public void failValidationWhenMandatoryDataElementIsNotPresent()\n+    {\n+        // Given\n+        ProgramStage programStage = new ProgramStage();\n+        ProgramStageDataElement mandatoryStageDataElement = new ProgramStageDataElement();\n+        DataElement dataElement = new DataElement();\n+        dataElement.setUid( \"MANDATORY_DE\" );\n+        mandatoryStageDataElement.setDataElement( dataElement );\n+        mandatoryStageDataElement.setCompulsory( true );\n+\n+        ProgramStageDataElement stageDataElement = new ProgramStageDataElement();\n+        DataElement validDataElement = new DataElement();\n+        validDataElement.setUid( validDataValue().getDataElement() );\n+        stageDataElement.setDataElement( validDataElement );\n+        stageDataElement.setCompulsory( true );\n+\n+        programStage.setProgramStageDataElements( Sets.newHashSet( mandatoryStageDataElement, stageDataElement ) );\n+        when( event.getDataValues() ).thenReturn( Sets.newHashSet( validDataValue() ) );\n+        when( event.getProgramStage() ).thenReturn( \"PROGRAM_STAGE\" );\n+        when( validationContext.getProgramStage( \"PROGRAM_STAGE\" ) ).thenReturn( programStage );\n+\n+        // When\n+        ValidationErrorReporter reporter = new ValidationErrorReporter( validationContext, this.getClass() );\n+        hookToTest.validateEvent( reporter, event );\n+\n+        // Then\n+        assertThat( reporter.getReportList(), hasSize( 1 ) );\n+        assertEquals( TrackerErrorCode.E1303, reporter.getReportList().get( 0 ).getErrorCode() );\n+    }\n+\n+    @Test\n+    public void failValidationWhenDataElementIsNotPresentInProgramStage()\n+    {\n+        // Given\n+        ProgramStage programStage = new ProgramStage();\n+        ProgramStageDataElement mandatoryStageDataElement = new ProgramStageDataElement();\n+        DataElement dataElement = new DataElement();\n+        dataElement.setUid(validDataValue().getDataElement());\n+        mandatoryStageDataElement.setDataElement( dataElement );\n+        mandatoryStageDataElement.setCompulsory( true );\n+\n+        DataValue notPresentDataValue = validDataValue();\n+        notPresentDataValue.setDataElement(\"de_not_present_in_progam_stage\");", "originalCommit": "30b41683795816c884406b8d4d8199e1fd30a583", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTc2NjQ3MA==", "url": "https://github.com/dhis2/dhis2-core/pull/6565#discussion_r519766470", "body": "```suggestion\r\n        notPresentDataElement.setUid( \"de_not_present_in_progam_stage\" );\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    notPresentDataElement.setUid(\"de_not_present_in_progam_stage\");\n          \n          \n            \n                    notPresentDataElement.setUid( \"de_not_present_in_progam_stage\" );", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        notPresentDataElement<span class=\"pl-k\">.</span>setUid(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>de_not_present_in_progam_stage<span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        notPresentDataElement<span class=\"pl-k\">.</span>setUid(<span class=\"x x-first x-last\"> </span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>de_not_present_in_progam_stage<span class=\"pl-pds\">\"</span></span><span class=\"x x-first x-last\"> </span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "stian-sandvold", "createdAt": "2020-11-09T12:20:19Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/hooks/EventDataValuesValidationHookTest.java", "diffHunk": "@@ -0,0 +1,384 @@\n+package org.hisp.dhis.tracker.validation.hooks;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.empty;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import org.hisp.dhis.common.ValueType;\n+import org.hisp.dhis.dataelement.DataElement;\n+import org.hisp.dhis.fileresource.FileResource;\n+import org.hisp.dhis.program.ProgramStage;\n+import org.hisp.dhis.program.ProgramStageDataElement;\n+import org.hisp.dhis.trackedentity.TrackedEntityAttributeService;\n+import org.hisp.dhis.tracker.TrackerIdScheme;\n+import org.hisp.dhis.tracker.bundle.TrackerBundle;\n+import org.hisp.dhis.tracker.domain.DataValue;\n+import org.hisp.dhis.tracker.domain.Event;\n+import org.hisp.dhis.tracker.report.TrackerErrorCode;\n+import org.hisp.dhis.tracker.report.ValidationErrorReporter;\n+import org.hisp.dhis.tracker.validation.TrackerImportValidationContext;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnit;\n+import org.mockito.junit.MockitoRule;\n+\n+import com.google.common.collect.Sets;\n+\n+/**\n+ * @author Enrico Colasante\n+ */\n+public class EventDataValuesValidationHookTest\n+{\n+    private final static String VALID_DATA_ELEMENT = \"validDataElement\";\n+\n+    private EventDataValuesValidationHook hookToTest;\n+\n+    @Mock\n+    private TrackedEntityAttributeService teAttrService;\n+\n+    @Rule\n+    public MockitoRule mockitoRule = MockitoJUnit.rule();\n+\n+    @Mock\n+    private TrackerImportValidationContext validationContext;\n+\n+    @Mock\n+    private Event event;\n+\n+    @Before\n+    public void setUp()\n+    {\n+        hookToTest = new EventDataValuesValidationHook( teAttrService );\n+\n+        DataElement validDataElement = new DataElement();\n+        validDataElement.setValueType( ValueType.TEXT );\n+\n+        TrackerBundle bundle = mock( TrackerBundle.class );\n+\n+        when( validationContext.getBundle() ).thenReturn( bundle );\n+        when( bundle.getIdentifier() ).thenReturn( TrackerIdScheme.UID );\n+        when( validationContext.getDataElement( VALID_DATA_ELEMENT ) ).thenReturn( validDataElement );\n+    }\n+\n+    @Test\n+    public void successValidationWhenDataElementIsValid()\n+    {\n+        // Given\n+        when( event.getDataValues() ).thenReturn( Sets.newHashSet( validDataValue() ) );\n+\n+        // When\n+        ValidationErrorReporter reporter = new ValidationErrorReporter( validationContext, this.getClass() );\n+        hookToTest.validateEvent( reporter, event );\n+\n+        // Then\n+        assertThat( reporter.getReportList(), empty() );\n+    }\n+\n+    @Test\n+    public void failValidationWhenCreatedAtIsNull()\n+    {\n+        // Given\n+        DataValue validDataValue = validDataValue();\n+        validDataValue.setCreatedAt( null );\n+        when( event.getDataValues() ).thenReturn( Sets.newHashSet( validDataValue ) );\n+\n+        // When\n+        ValidationErrorReporter reporter = new ValidationErrorReporter( validationContext, this.getClass() );\n+        hookToTest.validateEvent( reporter, event );\n+\n+        // Then\n+        assertThat( reporter.getReportList(), hasSize( 1 ) );\n+        assertEquals( TrackerErrorCode.E1300, reporter.getReportList().get( 0 ).getErrorCode() );\n+    }\n+\n+    @Test\n+    public void failValidationWhenCreatedAtIsInvalid()\n+    {\n+        // Given\n+        DataValue validDataValue = validDataValue();\n+        validDataValue.setCreatedAt( \"INVALID_DATE\" );\n+        when( event.getDataValues() ).thenReturn( Sets.newHashSet( validDataValue ) );\n+\n+        // When\n+        ValidationErrorReporter reporter = new ValidationErrorReporter( validationContext, this.getClass() );\n+        hookToTest.validateEvent( reporter, event );\n+\n+        // Then\n+        assertThat( reporter.getReportList(), hasSize( 1 ) );\n+        assertEquals( TrackerErrorCode.E1300, reporter.getReportList().get( 0 ).getErrorCode() );\n+    }\n+\n+    @Test\n+    public void failValidationWhenUpdatedAtIsNull()\n+    {\n+        // Given\n+        DataValue validDataValue = validDataValue();\n+        validDataValue.setUpdatedAt( null );\n+        when( event.getDataValues() ).thenReturn( Sets.newHashSet( validDataValue ) );\n+\n+        // When\n+        ValidationErrorReporter reporter = new ValidationErrorReporter( validationContext, this.getClass() );\n+        hookToTest.validateEvent( reporter, event );\n+\n+        // Then\n+        assertThat( reporter.getReportList(), hasSize( 1 ) );\n+        assertEquals( TrackerErrorCode.E1301, reporter.getReportList().get( 0 ).getErrorCode() );\n+    }\n+\n+    @Test\n+    public void failValidationWhenUpdatedAtIsInvalid()\n+    {\n+        // Given\n+        DataValue validDataValue = validDataValue();\n+        validDataValue.setUpdatedAt( \"INVALID_DATE\" );\n+        when( event.getDataValues() ).thenReturn( Sets.newHashSet( validDataValue ) );\n+\n+        // When\n+        ValidationErrorReporter reporter = new ValidationErrorReporter( validationContext, this.getClass() );\n+        hookToTest.validateEvent( reporter, event );\n+\n+        // Then\n+        assertThat( reporter.getReportList(), hasSize( 1 ) );\n+        assertEquals( TrackerErrorCode.E1301, reporter.getReportList().get( 0 ).getErrorCode() );\n+    }\n+\n+    @Test\n+    public void failValidationWhenDataElementIsInvalid()\n+    {\n+        // Given\n+        DataValue validDataValue = validDataValue();\n+        validDataValue.setDataElement( \"INVALID_DE\" );\n+        when( event.getDataValues() ).thenReturn( Sets.newHashSet( validDataValue ) );\n+\n+        // When\n+        ValidationErrorReporter reporter = new ValidationErrorReporter( validationContext, this.getClass() );\n+        hookToTest.validateEvent( reporter, event );\n+\n+        // Then\n+        assertThat( reporter.getReportList(), hasSize( 1 ) );\n+        assertEquals( TrackerErrorCode.E1304, reporter.getReportList().get( 0 ).getErrorCode() );\n+    }\n+\n+    @Test\n+    public void failValidationWhenMandatoryDataElementIsNotPresent()\n+    {\n+        // Given\n+        ProgramStage programStage = new ProgramStage();\n+        ProgramStageDataElement mandatoryStageDataElement = new ProgramStageDataElement();\n+        DataElement dataElement = new DataElement();\n+        dataElement.setUid( \"MANDATORY_DE\" );\n+        mandatoryStageDataElement.setDataElement( dataElement );\n+        mandatoryStageDataElement.setCompulsory( true );\n+\n+        ProgramStageDataElement stageDataElement = new ProgramStageDataElement();\n+        DataElement validDataElement = new DataElement();\n+        validDataElement.setUid( validDataValue().getDataElement() );\n+        stageDataElement.setDataElement( validDataElement );\n+        stageDataElement.setCompulsory( true );\n+\n+        programStage.setProgramStageDataElements( Sets.newHashSet( mandatoryStageDataElement, stageDataElement ) );\n+        when( event.getDataValues() ).thenReturn( Sets.newHashSet( validDataValue() ) );\n+        when( event.getProgramStage() ).thenReturn( \"PROGRAM_STAGE\" );\n+        when( validationContext.getProgramStage( \"PROGRAM_STAGE\" ) ).thenReturn( programStage );\n+\n+        // When\n+        ValidationErrorReporter reporter = new ValidationErrorReporter( validationContext, this.getClass() );\n+        hookToTest.validateEvent( reporter, event );\n+\n+        // Then\n+        assertThat( reporter.getReportList(), hasSize( 1 ) );\n+        assertEquals( TrackerErrorCode.E1303, reporter.getReportList().get( 0 ).getErrorCode() );\n+    }\n+\n+    @Test\n+    public void failValidationWhenDataElementIsNotPresentInProgramStage()\n+    {\n+        // Given\n+        ProgramStage programStage = new ProgramStage();\n+        ProgramStageDataElement mandatoryStageDataElement = new ProgramStageDataElement();\n+        DataElement dataElement = new DataElement();\n+        dataElement.setUid(validDataValue().getDataElement());\n+        mandatoryStageDataElement.setDataElement( dataElement );\n+        mandatoryStageDataElement.setCompulsory( true );\n+\n+        DataValue notPresentDataValue = validDataValue();\n+        notPresentDataValue.setDataElement(\"de_not_present_in_progam_stage\");\n+\n+        DataElement notPresentDataElement = new DataElement();\n+        notPresentDataElement.setValueType( ValueType.TEXT );\n+        notPresentDataElement.setUid(\"de_not_present_in_progam_stage\");", "originalCommit": "30b41683795816c884406b8d4d8199e1fd30a583", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a740aa0e0bccf2661a558fd925d846310b94a637", "url": "https://github.com/dhis2/dhis2-core/commit/a740aa0e0bccf2661a558fd925d846310b94a637", "message": "Apply suggestions from code review", "committedDate": "2020-11-09T12:21:46Z", "type": "commit"}]}