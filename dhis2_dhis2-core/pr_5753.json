{"pr_number": 5753, "pr_title": "refactor: Refactor of events tracker importer ", "pr_author": "luciano-fiandesio", "pr_createdAt": "2020-06-16T09:33:22Z", "pr_url": "https://github.com/dhis2/dhis2-core/pull/5753", "merge_commit": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIwMTA4MQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448201081", "body": "Should this be fixed before merge?", "bodyText": "Should this be fixed before merge?", "bodyHTML": "<p dir=\"auto\">Should this be fixed before merge?</p>", "author": "netroms", "createdAt": "2020-07-01T08:25:43Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/TrackedEntityInstanceServiceTest.java", "diffHunk": "@@ -357,6 +375,11 @@ public void testSyncTeiFutureDatesForEnrollmentAndIncident()\n \n     }\n \n+    /**\n+     * FIXME luciano: this is ignored because there is a bug in tracker, so that new events that fail", "originalCommit": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "ea76fa86409613c9766d4508d65c88ac55c413c3", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/TrackedEntityInstanceServiceTest.java b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/TrackedEntityInstanceServiceTest.java\nindex a5c939bc52..c7497e9301 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/TrackedEntityInstanceServiceTest.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/TrackedEntityInstanceServiceTest.java\n", "chunk": "@@ -376,14 +412,15 @@ public class TrackedEntityInstanceServiceTest\n     }\n \n     /**\n-     * FIXME luciano: this is ignored because there is a bug in tracker, so that new events that fail\n-     * to validate are reported as success.\n+     * FIXME luciano: this is ignored because there is a bug in tracker, so that\n+     * new events that fail to validate are reported as success.\n      */\n     @Ignore\n     @Test\n     public void testUpdateTeiByCompletingExistingEnrollmentAndUpdateExistingEventsInSameEnrollment()\n     {\n-        TrackedEntityInstance trackedEntityInstance = trackedEntityInstanceService.getTrackedEntityInstance( maleA.getUid() );\n+        TrackedEntityInstance trackedEntityInstance = trackedEntityInstanceService\n+            .getTrackedEntityInstance( maleA.getUid() );\n         assertNotNull( trackedEntityInstance.getEnrollments() );\n         assertEquals( 1, trackedEntityInstance.getEnrollments().size() );\n \n", "next_change": {"commit": "22d5da9d9a812b02eb5acd643112a6b050b5d63c", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/TrackedEntityInstanceServiceTest.java b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/TrackedEntityInstanceServiceTest.java\nindex c7497e9301..ca343a391a 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/TrackedEntityInstanceServiceTest.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/TrackedEntityInstanceServiceTest.java\n", "chunk": "@@ -267,232 +247,189 @@ public class TrackedEntityInstanceServiceTest\n     }\n \n     @Test\n-    @Ignore\n-    public void testUpdatePerson()\n+    @Disabled\n+    void testUpdatePerson()\n     {\n         TrackedEntityInstance trackedEntityInstance = trackedEntityInstanceService\n             .getTrackedEntityInstance( maleA.getUid() );\n         // person.setName( \"UPDATED_NAME\" );\n-\n         ImportSummary importSummary = trackedEntityInstanceService.updateTrackedEntityInstance( trackedEntityInstance,\n             null, null, true );\n         assertEquals( ImportStatus.SUCCESS, importSummary.getStatus() );\n-\n         // assertEquals( \"UPDATED_NAME\", personService.getTrackedEntityInstance(\n         // maleA.getUid() ).getName() );\n     }\n \n     @Test\n-    public void testUpdateTeiByCompletingExistingEnrollmentAndOpeningNewEnrollment()\n+    void testUpdateTeiByCompletingExistingEnrollmentAndOpeningNewEnrollment()\n     {\n         TrackedEntityInstance trackedEntityInstance = trackedEntityInstanceService\n             .getTrackedEntityInstance( maleA.getUid() );\n         assertNotNull( trackedEntityInstance.getEnrollments() );\n         assertEquals( 1, trackedEntityInstance.getEnrollments().size() );\n-\n         Enrollment enrollment1 = trackedEntityInstance.getEnrollments().get( 0 );\n         enrollment1.setStatus( EnrollmentStatus.COMPLETED );\n         enrollment1.setCompletedBy( \"test\" );\n         enrollment1.setCompletedDate( new Date() );\n-\n         Enrollment enrollment2 = new Enrollment();\n         enrollment2.setTrackedEntityInstance( maleA.getUid() );\n         enrollment2.setEnrollmentDate( new Date() );\n         enrollment2.setOrgUnit( organisationUnitA.getUid() );\n         enrollment2.setProgram( programA.getUid() );\n         enrollment2.setStatus( EnrollmentStatus.ACTIVE );\n-\n         trackedEntityInstance.getEnrollments().add( enrollment2 );\n-\n         ImportSummary importSummary = trackedEntityInstanceService.updateTrackedEntityInstance( trackedEntityInstance,\n             null, null, true );\n         assertEquals( ImportStatus.SUCCESS, importSummary.getStatus() );\n         assertEquals( ImportStatus.SUCCESS, importSummary.getEnrollments().getStatus() );\n-\n     }\n \n     @Test\n-    public void testUpdateTeiAfterChangingTextPatternForGeneratedAttribute()\n+    void testUpdateTeiAfterChangingTextPatternForGeneratedAttribute()\n     {\n         TrackedEntityInstance trackedEntityInstance = trackedEntityInstanceService\n             .getTrackedEntityInstance( maleA.getUid() );\n         assertNotNull( trackedEntityInstance.getEnrollments() );\n         assertEquals( 1, trackedEntityInstance.getEnrollments().size() );\n-\n         Enrollment enrollment1 = trackedEntityInstance.getEnrollments().get( 0 );\n         enrollment1.setStatus( EnrollmentStatus.COMPLETED );\n         enrollment1.setCompletedBy( \"test\" );\n         enrollment1.setCompletedDate( new Date() );\n-\n         Enrollment enrollment2 = new Enrollment();\n         enrollment2.setTrackedEntityInstance( maleA.getUid() );\n-\n         TextPattern textPattern = new TextPattern(\n             Lists.newArrayList( new TextPatternSegment( TextPatternMethod.RANDOM, \"RANDOM(#######)\" ) ) );\n         textPattern.setOwnerUid( \"owneruid\" );\n         textPattern.setOwnerObject( Objects.CONSTANT );\n         uniqueIdAttribute.setTextPattern( textPattern );\n         trackedEntityAttributeService.updateTrackedEntityAttribute( uniqueIdAttribute );\n-\n         enrollment2.setEnrollmentDate( new Date() );\n         enrollment2.setOrgUnit( organisationUnitA.getUid() );\n         enrollment2.setProgram( programA.getUid() );\n         enrollment2.setStatus( EnrollmentStatus.ACTIVE );\n-\n         trackedEntityInstance.getEnrollments().add( enrollment2 );\n-\n-        ImportSummary importSummary = trackedEntityInstanceService\n-            .updateTrackedEntityInstance( trackedEntityInstance, null, null, true );\n+        ImportSummary importSummary = trackedEntityInstanceService.updateTrackedEntityInstance( trackedEntityInstance,\n+            null, null, true );\n         assertEquals( ImportStatus.SUCCESS, importSummary.getStatus() );\n         assertEquals( ImportStatus.SUCCESS, importSummary.getEnrollments().getStatus() );\n-\n     }\n \n     @Test\n-    public void testUpdateTeiByCompletingExistingEnrollmentAndAddNewEventsToSameEnrollment()\n+    void testUpdateTeiByCompletingExistingEnrollmentAndAddNewEventsToSameEnrollment()\n     {\n         TrackedEntityInstance trackedEntityInstance = trackedEntityInstanceService\n             .getTrackedEntityInstance( maleA.getUid() );\n         assertNotNull( trackedEntityInstance.getEnrollments() );\n         assertEquals( 1, trackedEntityInstance.getEnrollments().size() );\n-\n         Enrollment enrollment1 = trackedEntityInstance.getEnrollments().get( 0 );\n         enrollment1.setStatus( EnrollmentStatus.COMPLETED );\n         enrollment1.setCompletedBy( \"test\" );\n         enrollment1.setCompletedDate( new Date() );\n-\n         Event event1 = new Event();\n         event1.setEnrollment( enrollment1.getEnrollment() );\n         event1\n             .setEventDate( DateTimeFormatter.ofPattern( \"yyyy-MM-dd\", Locale.ENGLISH ).format( LocalDateTime.now() ) );\n-\n         event1.setOrgUnit( organisationUnitA.getUid() );\n-\n         event1.setProgram( programA.getUid() );\n         event1.setProgramStage( programStageA1.getUid() );\n         event1.setStatus( EventStatus.COMPLETED );\n         event1.setTrackedEntityInstance( maleA.getUid() );\n-\n         Event event2 = new Event();\n         event2.setEnrollment( enrollment1.getEnrollment() );\n         event2\n             .setEventDate( DateTimeFormatter.ofPattern( \"yyyy-MM-dd\", Locale.ENGLISH ).format( LocalDateTime.now() ) );\n-\n         event2.setOrgUnit( organisationUnitA.getUid() );\n-\n         event2.setProgram( programA.getUid() );\n         event2.setProgramStage( programStageA2.getUid() );\n         event2.setStatus( EventStatus.ACTIVE );\n         event2.setTrackedEntityInstance( maleA.getUid() );\n-\n         enrollment1.setEvents( Arrays.asList( event1, event2 ) );\n-\n         ImportSummary importSummary = trackedEntityInstanceService.updateTrackedEntityInstance( trackedEntityInstance,\n             null, null, true );\n         assertEquals( ImportStatus.SUCCESS, importSummary.getStatus() );\n         assertEquals( ImportStatus.SUCCESS, importSummary.getEnrollments().getStatus() );\n         assertEquals( ImportStatus.SUCCESS,\n             importSummary.getEnrollments().getImportSummaries().get( 0 ).getEvents().getStatus() );\n-\n     }\n \n     @Test\n-    public void testSyncTeiFutureDatesForEnrollmentAndIncident()\n+    void testSyncTeiFutureDatesForEnrollmentAndIncident()\n     {\n         TrackedEntityInstance trackedEntityInstance = trackedEntityInstanceService\n             .getTrackedEntityInstance( dateConflictsMaleA.getUid() );\n-\n         ImportSummary importSummary = trackedEntityInstanceService.updateTrackedEntityInstance( trackedEntityInstance,\n             null, new ImportOptions().setImportStrategy( ImportStrategy.SYNC ), true );\n         assertEquals( ImportStatus.SUCCESS, importSummary.getStatus() );\n-        assertEquals( 2, importSummary.getEnrollments().getImportSummaries().get( 0 ).getConflicts().size() );\n+        assertEquals( 2, importSummary.getEnrollments().getImportSummaries().get( 0 ).getConflictCount() );\n         assertEquals( trackedEntityInstance.getEnrollments().get( 0 ).getEnrollment(),\n             importSummary.getEnrollments().getImportSummaries().get( 0 ).getReference() );\n-\n     }\n \n     /**\n      * FIXME luciano: this is ignored because there is a bug in tracker, so that\n      * new events that fail to validate are reported as success.\n      */\n-    @Ignore\n+    @Disabled\n     @Test\n-    public void testUpdateTeiByCompletingExistingEnrollmentAndUpdateExistingEventsInSameEnrollment()\n+    void testUpdateTeiByCompletingExistingEnrollmentAndUpdateExistingEventsInSameEnrollment()\n     {\n         TrackedEntityInstance trackedEntityInstance = trackedEntityInstanceService\n             .getTrackedEntityInstance( maleA.getUid() );\n         assertNotNull( trackedEntityInstance.getEnrollments() );\n         assertEquals( 1, trackedEntityInstance.getEnrollments().size() );\n-\n         Enrollment enrollment1 = trackedEntityInstance.getEnrollments().get( 0 );\n-\n         Event event1 = new Event();\n         event1.setEnrollment( enrollment1.getEnrollment() );\n         event1\n             .setEventDate( DateTimeFormatter.ofPattern( \"yyyy-MM-dd\", Locale.ENGLISH ).format( LocalDateTime.now() ) );\n-\n         event1.setOrgUnit( organisationUnitA.getUid() );\n-\n         event1.setProgram( programA.getUid() );\n         event1.setProgramStage( programStageA1.getUid() );\n         event1.setStatus( EventStatus.ACTIVE );\n         event1.setTrackedEntityInstance( maleA.getUid() );\n-\n         enrollment1.setEvents( singletonList( event1 ) );\n-\n         ImportSummary importSummary = trackedEntityInstanceService.updateTrackedEntityInstance( trackedEntityInstance,\n             null, null, true );\n         assertEquals( ImportStatus.SUCCESS, importSummary.getStatus() );\n         assertEquals( ImportStatus.SUCCESS, importSummary.getEnrollments().getStatus() );\n         assertEquals( ImportStatus.SUCCESS,\n             importSummary.getEnrollments().getImportSummaries().get( 0 ).getEvents().getStatus() );\n-\n         // This is required because the Event creation takes place using JDBC,\n         // therefore Hibernate does not\n         // \"see\" the new event in the context of this session\n         sessionFactory.getCurrentSession().clear();\n-\n         trackedEntityInstance = trackedEntityInstanceService.getTrackedEntityInstance( maleA.getUid() );\n-\n         assertNotNull( trackedEntityInstance.getEnrollments() );\n         assertEquals( 1, trackedEntityInstance.getEnrollments().size() );\n-\n         assertNotNull( trackedEntityInstance.getEnrollments().get( 0 ).getEvents() );\n         assertEquals( 1, trackedEntityInstance.getEnrollments().get( 0 ).getEvents().size() );\n-\n         enrollment1 = trackedEntityInstance.getEnrollments().get( 0 );\n         enrollment1.setStatus( EnrollmentStatus.COMPLETED );\n         enrollment1.setCompletedBy( \"test\" );\n         enrollment1.setCompletedDate( new Date() );\n-\n         event1 = enrollment1.getEvents().get( 0 );\n         event1.setStatus( EventStatus.COMPLETED );\n         event1.setCompletedBy( \"test\" );\n         event1.setCompletedDate(\n             DateTimeFormatter.ofPattern( \"yyyy-MM-dd\", Locale.ENGLISH ).format( LocalDateTime.now() ) );\n-\n         importSummary = trackedEntityInstanceService.updateTrackedEntityInstance( trackedEntityInstance, null, null,\n             true );\n         assertEquals( ImportStatus.SUCCESS, importSummary.getStatus() );\n         assertEquals( ImportStatus.SUCCESS, importSummary.getEnrollments().getStatus() );\n         assertEquals( ImportStatus.SUCCESS,\n             importSummary.getEnrollments().getImportSummaries().get( 0 ).getEvents().getStatus() );\n-\n     }\n \n     @Test\n-    public void testUpdateTeiByDeletingExistingEventAndAddNewEventForSameProgramStage()\n+    void testUpdateTeiByDeletingExistingEventAndAddNewEventForSameProgramStage()\n     {\n         // Making program stage repeatable\n         programStageA2.setRepeatable( true );\n-\n         TrackedEntityInstance trackedEntityInstance = trackedEntityInstanceService\n             .getTrackedEntityInstance( maleA.getUid() );\n         assertNotNull( trackedEntityInstance.getEnrollments() );\n         assertEquals( 1, trackedEntityInstance.getEnrollments().size() );\n-\n         Enrollment enrollment1 = trackedEntityInstance.getEnrollments().get( 0 );\n-\n         Event event1 = new Event();\n         event1.setEnrollment( enrollment1.getEnrollment() );\n         event1\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "message": "Merge commit", "committedDate": null}, {"oid": "3e25b9b834757233501b068c1fd96b5b68cc22f7", "committedDate": "2020-12-22 12:59:13 +0100", "message": "feat: Convert sharing objects to JSONB structure [DHIS2-5814]"}, {"oid": "5e4669b4c89c809989ea600900735dd71baa86e2", "committedDate": "2020-12-23 14:00:18 +0700", "message": "feat: Upgrade Hibernate  (#6939)"}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "6f3422ff9a182b183a9e3a2f61cf457bb23cb092", "committedDate": "2021-06-10 13:13:51 +0200", "message": "chore: encapsulates import conflicts [DHIS2-4414]  (#8164)"}, {"oid": "08b54e12696fc16a4d0420bef45e40a1c169fff1", "committedDate": "2021-08-18 09:45:20 +0200", "message": "fix : [ DHIS2_11532 ] - Flag for potential duplicate at tei level [ old tracker ] - fix boolean getter, add tests (#8534)"}, {"oid": "22d5da9d9a812b02eb5acd643112a6b050b5d63c", "committedDate": "2021-12-16 13:19:38 +0100", "message": "chore: migrate tests to JUnit 5 (#9467)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "6e83eba877030575456f919de1bce55fcae8e517", "committedDate": "2022-06-24 10:01:46 +0200", "message": "test: move all integration tests into own module TECH-1209 (#11148)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIxNjQyNg==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448216426", "body": "Not anything wrong, but maybe we could optimize this to be done in a more generalized map/streaming fashion in the future.", "bodyText": "Not anything wrong, but maybe we could optimize this to be done in a more generalized map/streaming fashion in the future.", "bodyHTML": "<p dir=\"auto\">Not anything wrong, but maybe we could optimize this to be done in a more generalized map/streaming fashion in the future.</p>", "author": "netroms", "createdAt": "2020-07-01T08:52:04Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramOrgUnitCheck.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer.insert.validation;\n+\n+import static org.hisp.dhis.dxf2.importsummary.ImportSummary.error;\n+import static org.hisp.dhis.dxf2.importsummary.ImportSummary.success;\n+\n+import java.util.Set;\n+\n+import org.hisp.dhis.attribute.AttributeValue;\n+import org.hisp.dhis.common.IdScheme;\n+import org.hisp.dhis.dxf2.events.importer.Checker;\n+import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n+import org.hisp.dhis.dxf2.events.importer.shared.ImmutableEvent;\n+import org.hisp.dhis.dxf2.importsummary.ImportSummary;\n+import org.hisp.dhis.organisationunit.OrganisationUnit;\n+import org.hisp.dhis.program.ProgramInstance;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+public class ProgramOrgUnitCheck implements Checker\n+{\n+    @Override\n+    public ImportSummary check(ImmutableEvent event, WorkContext ctx )\n+    {\n+        ProgramInstance programInstance = ctx.getProgramInstanceMap().get( event.getUid() );\n+\n+        if ( programInstance != null )\n+        {\n+            final IdScheme orgUnitIdScheme = ctx.getImportOptions().getIdSchemes().getOrgUnitIdScheme();\n+\n+            OrganisationUnit orgUnit = null;\n+\n+            final Set<OrganisationUnit> organisationUnits = programInstance.getProgram().getOrganisationUnits();\n+\n+            for ( OrganisationUnit ou : organisationUnits )", "originalCommit": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a61dc512c370d29aba9f030a57d4552899241579", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramOrgUnitCheck.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramOrgUnitCheck.java\nindex ac4986c67b..681fc4fb54 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramOrgUnitCheck.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramOrgUnitCheck.java\n", "chunk": "@@ -62,60 +77,48 @@ public class ProgramOrgUnitCheck implements Checker\n \n             for ( OrganisationUnit ou : organisationUnits )\n             {\n-                if ( orgUnitIdScheme.equals( IdScheme.UID ) )\n-                {\n-                    if ( ou.getUid().equals( event.getOrgUnit() ) )\n-                    {\n-                        orgUnit = ou;\n-                        break;\n-                    }\n-                }\n-                else if ( orgUnitIdScheme.equals( IdScheme.CODE ) )\n-                {\n-                    if ( ou.getCode().equals( event.getOrgUnit() ) )\n-                    {\n-                        orgUnit = ou;\n-                        break;\n-                    }\n-                }\n-                else if ( orgUnitIdScheme.equals( IdScheme.ID ) )\n+                if ( orgUnitIdScheme.isAttribute() )\n                 {\n-                    if ( String.valueOf( ou.getId() ).equals( event.getOrgUnit() ) )\n+                    final Optional<OrganisationUnit> ouByAttributeScheme = getByAttributeScheme( ou, event,\n+                        orgUnitIdScheme );\n+                    if ( ouByAttributeScheme.isPresent() )\n                     {\n-                        orgUnit = ou;\n+                        orgUnit = ouByAttributeScheme.get();\n                         break;\n                     }\n                 }\n-                else if ( orgUnitIdScheme.equals( IdScheme.NAME ) )\n+                else\n                 {\n-                    if ( String.valueOf( ou.getName() ).equals( event.getOrgUnit() ) )\n+                    if ( functionMap.getOrDefault( orgUnitIdScheme, DEFAULT_FUNCTION ).apply( ou, event ) )\n                     {\n                         orgUnit = ou;\n                         break;\n                     }\n                 }\n-                else if ( orgUnitIdScheme.isAttribute() )\n-                {\n-                    final Set<AttributeValue> attributeValues = ou.getAttributeValues();\n-                    for ( AttributeValue attributeValue : attributeValues )\n-                    {\n-                        if ( orgUnitIdScheme.getAttribute().equals( attributeValue.getAttribute().getUid() ) &&\n-                            attributeValue.getValue().equals( event.getOrgUnit() ) )\n-                        {\n-                            orgUnit = ou;\n-                            break;\n-                        }\n-                    }\n-                }\n             }\n \n             if ( orgUnit == null )\n             {\n-                return error( \"Program is not assigned to this organisation unit: \" + event.getOrgUnit(),\n+                return error( \"Program is not assigned to this Organisation Unit: \" + event.getOrgUnit(),\n                     event.getEvent() );\n             }\n         }\n \n         return success();\n     }\n+    \n+    private Optional<OrganisationUnit> getByAttributeScheme( OrganisationUnit ou, ImmutableEvent event,\n+        IdScheme orgUnitIdScheme )\n+    {\n+        final Set<AttributeValue> attributeValues = ou.getAttributeValues();\n+        for ( AttributeValue attributeValue : attributeValues )\n+        {\n+            if ( orgUnitIdScheme.getAttribute().equals( attributeValue.getAttribute().getUid() ) &&\n+                attributeValue.getValue().equals( event.getOrgUnit() ) )\n+            {\n+                return Optional.of( ou );\n+            }\n+        }\n+        return Optional.empty();\n+    }\n }\n", "next_change": null}]}, "revised_code_in_main": {"commit": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramOrgUnitCheck.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramOrgUnitCheck.java\nindex ac4986c67b..1abf5f9955 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramOrgUnitCheck.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramOrgUnitCheck.java\n", "chunk": "@@ -62,60 +77,48 @@ public class ProgramOrgUnitCheck implements Checker\n \n             for ( OrganisationUnit ou : organisationUnits )\n             {\n-                if ( orgUnitIdScheme.equals( IdScheme.UID ) )\n-                {\n-                    if ( ou.getUid().equals( event.getOrgUnit() ) )\n-                    {\n-                        orgUnit = ou;\n-                        break;\n-                    }\n-                }\n-                else if ( orgUnitIdScheme.equals( IdScheme.CODE ) )\n-                {\n-                    if ( ou.getCode().equals( event.getOrgUnit() ) )\n-                    {\n-                        orgUnit = ou;\n-                        break;\n-                    }\n-                }\n-                else if ( orgUnitIdScheme.equals( IdScheme.ID ) )\n+                if ( orgUnitIdScheme.isAttribute() )\n                 {\n-                    if ( String.valueOf( ou.getId() ).equals( event.getOrgUnit() ) )\n+                    final Optional<OrganisationUnit> ouByAttributeScheme = getByAttributeScheme( ou, event,\n+                        orgUnitIdScheme );\n+                    if ( ouByAttributeScheme.isPresent() )\n                     {\n-                        orgUnit = ou;\n+                        orgUnit = ouByAttributeScheme.get();\n                         break;\n                     }\n                 }\n-                else if ( orgUnitIdScheme.equals( IdScheme.NAME ) )\n+                else\n                 {\n-                    if ( String.valueOf( ou.getName() ).equals( event.getOrgUnit() ) )\n+                    if ( functionMap.getOrDefault( orgUnitIdScheme, DEFAULT_FUNCTION ).apply( ou, event ) )\n                     {\n                         orgUnit = ou;\n                         break;\n                     }\n                 }\n-                else if ( orgUnitIdScheme.isAttribute() )\n-                {\n-                    final Set<AttributeValue> attributeValues = ou.getAttributeValues();\n-                    for ( AttributeValue attributeValue : attributeValues )\n-                    {\n-                        if ( orgUnitIdScheme.getAttribute().equals( attributeValue.getAttribute().getUid() ) &&\n-                            attributeValue.getValue().equals( event.getOrgUnit() ) )\n-                        {\n-                            orgUnit = ou;\n-                            break;\n-                        }\n-                    }\n-                }\n             }\n \n             if ( orgUnit == null )\n             {\n-                return error( \"Program is not assigned to this organisation unit: \" + event.getOrgUnit(),\n+                return error( \"Program is not assigned to this Organisation Unit: \" + event.getOrgUnit(),\n                     event.getEvent() );\n             }\n         }\n \n         return success();\n     }\n+    \n+    private Optional<OrganisationUnit> getByAttributeScheme( OrganisationUnit ou, ImmutableEvent event,\n+        IdScheme orgUnitIdScheme )\n+    {\n+        final Set<AttributeValue> attributeValues = ou.getAttributeValues();\n+        for ( AttributeValue attributeValue : attributeValues )\n+        {\n+            if ( orgUnitIdScheme.getAttribute().equals( attributeValue.getAttribute().getUid() ) &&\n+                attributeValue.getValue().equals( event.getOrgUnit() ) )\n+            {\n+                return Optional.of( ou );\n+            }\n+        }\n+        return Optional.empty();\n+    }\n }\n", "next_change": {"commit": "fb390e24a39efb3e206bd995b5f9d964ede0cb33", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramOrgUnitCheck.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramOrgUnitCheck.java\nindex 1abf5f9955..d4eae933df 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramOrgUnitCheck.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramOrgUnitCheck.java\n", "chunk": "@@ -31,94 +31,46 @@ package org.hisp.dhis.dxf2.events.importer.insert.validation;\n import static org.hisp.dhis.dxf2.importsummary.ImportSummary.error;\n import static org.hisp.dhis.dxf2.importsummary.ImportSummary.success;\n \n+import java.util.List;\n import java.util.Map;\n-import java.util.Optional;\n-import java.util.Set;\n-import java.util.function.BiFunction;\n \n-import org.hisp.dhis.attribute.AttributeValue;\n-import org.hisp.dhis.common.IdScheme;\n import org.hisp.dhis.dxf2.events.importer.Checker;\n import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n import org.hisp.dhis.dxf2.events.importer.shared.ImmutableEvent;\n import org.hisp.dhis.dxf2.importsummary.ImportSummary;\n import org.hisp.dhis.organisationunit.OrganisationUnit;\n+import org.hisp.dhis.program.Program;\n import org.hisp.dhis.program.ProgramInstance;\n \n-import com.google.common.collect.ImmutableMap;\n-\n /**\n  * @author Luciano Fiandesio\n  */\n public class ProgramOrgUnitCheck implements Checker\n {\n-    private final static Map<IdScheme, BiFunction<OrganisationUnit, ImmutableEvent, Boolean>> functionMap = ImmutableMap\n-        .<IdScheme, BiFunction<OrganisationUnit, ImmutableEvent, Boolean>> builder()\n-        .put( IdScheme.UID, ( ou, ev ) -> ou.getUid().equals( ev.getOrgUnit() ) )\n-        .put( IdScheme.CODE, ( ou, ev ) -> ou.getCode().equals( ev.getOrgUnit() ) )\n-        .put( IdScheme.ID, ( ou, ev ) -> String.valueOf( ou.getId() ).equals( ev.getOrgUnit() ) )\n-        .put( IdScheme.NAME, ( ou, ev ) -> ou.getName().equals( ev.getOrgUnit() ) )\n-        .build();\n-\n-    private final static BiFunction<OrganisationUnit, ImmutableEvent, Boolean> DEFAULT_FUNCTION = ( ou, ev ) -> false;\n-\n     @Override\n     public ImportSummary check( ImmutableEvent event, WorkContext ctx )\n     {\n         ProgramInstance programInstance = ctx.getProgramInstanceMap().get( event.getUid() );\n \n+        final Map<Long, List<Long>> programWithOrgUnitsMap = ctx.getProgramWithOrgUnitsMap();\n+        final Map<String, OrganisationUnit> organisationUnitMap = ctx.getOrganisationUnitMap();\n+\n         if ( programInstance != null )\n         {\n-            final IdScheme orgUnitIdScheme = ctx.getImportOptions().getIdSchemes().getOrgUnitIdScheme();\n-\n-            OrganisationUnit orgUnit = null;\n+            final OrganisationUnit organisationUnit = organisationUnitMap.get( event.getUid() );\n+            final Program program = programInstance.getProgram();\n \n-            final Set<OrganisationUnit> organisationUnits = programInstance.getProgram().getOrganisationUnits();\n-\n-            for ( OrganisationUnit ou : organisationUnits )\n+            if ( organisationUnit != null && program != null )\n             {\n-                if ( orgUnitIdScheme.isAttribute() )\n-                {\n-                    final Optional<OrganisationUnit> ouByAttributeScheme = getByAttributeScheme( ou, event,\n-                        orgUnitIdScheme );\n-                    if ( ouByAttributeScheme.isPresent() )\n-                    {\n-                        orgUnit = ouByAttributeScheme.get();\n-                        break;\n-                    }\n-                }\n-                else\n+                List<Long> ouList = programWithOrgUnitsMap.get( program.getId() );\n+                if ( ouList == null || !ouList.contains( organisationUnit.getId() ) )\n                 {\n-                    if ( functionMap.getOrDefault( orgUnitIdScheme, DEFAULT_FUNCTION ).apply( ou, event ) )\n-                    {\n-                        orgUnit = ou;\n-                        break;\n-                    }\n+                    return error( \"Program is not assigned to this Organisation Unit: \" + event.getOrgUnit(),\n+                        event.getEvent() );\n                 }\n             }\n-\n-            if ( orgUnit == null )\n-            {\n-                return error( \"Program is not assigned to this Organisation Unit: \" + event.getOrgUnit(),\n-                    event.getEvent() );\n-            }\n         }\n \n         return success();\n     }\n-    \n-    private Optional<OrganisationUnit> getByAttributeScheme( OrganisationUnit ou, ImmutableEvent event,\n-        IdScheme orgUnitIdScheme )\n-    {\n-        final Set<AttributeValue> attributeValues = ou.getAttributeValues();\n-        for ( AttributeValue attributeValue : attributeValues )\n-        {\n-            if ( orgUnitIdScheme.getAttribute().equals( attributeValue.getAttribute().getUid() ) &&\n-                attributeValue.getValue().equals( event.getOrgUnit() ) )\n-            {\n-                return Optional.of( ou );\n-            }\n-        }\n-        return Optional.empty();\n-    }\n }\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "message": "Merge commit", "committedDate": null}, {"oid": "fb390e24a39efb3e206bd995b5f9d964ede0cb33", "committedDate": "2020-12-16 15:20:31 +0100", "message": "perf: reduce number of Org Units fetched from DB on Tracker Import (#6920)"}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "1e593837ab1c64884a8ac615c7cc8c3471a219ee", "committedDate": "2021-11-18 09:33:25 +0100", "message": "refactor: validators, checkers and processors in old importer are now spring beans [TECH-797] (#9218)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "e4f8abdfdb132f536835b3be17a3391da2089823", "committedDate": "2023-05-03 11:31:41 +0000", "message": "chore: Rename ProgramInstance to Enrollment [TECH-1547] (#13794)"}, {"oid": "02336c9611c0dd85d5038223bddbfdebc0aae526", "committedDate": "2023-05-11 19:34:26 +0200", "message": "chore: move old tracker dxf2 code into deprecated package (#13901)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIxNzMwMA==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448217300", "body": "What does this + \"1?\" do?", "bodyText": "What does this + \"1?\" do?", "bodyHTML": "<p dir=\"auto\">What does this + \"1?\" do?</p>", "author": "netroms", "createdAt": "2020-07-01T08:53:40Z", "path": "dhis-2/dhis-e2e-test/src/test/java/org/hisp/dhis/metadata/users/UserTest.java", "diffHunk": "@@ -72,8 +72,8 @@ public void beforeEach() {\n     private Stream<Arguments> provideParams() {\n         return Stream.of( new Arguments[] {\n             Arguments.of( password, password, \"Password must not be one of the previous 24 passwords\", \"newPassword is the same as old\" ),\n-            Arguments.of( password, \"test\", \"Password must have at least 8, and at most 40 characters\", \"newPassword is too short\" ),\n-            Arguments.of( password, DataGenerator.randomString(41), \"Password must have at least 8, and at most 40 characters\", \"newPassword is too-long\" ),\n+            Arguments.of( password, \"Test1?\", \"Password must have at least 8, and at most 40 characters\", \"newPassword is too short\" ),\n+            Arguments.of( password, DataGenerator.randomString(41) + \"1?\", \"Password must have at least 8, and at most 40 characters\", \"newPassword is too-long\" ),", "originalCommit": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQxMTQyOA==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448411428", "bodyText": "Not sure, need to ask @vilkg", "author": "luciano-fiandesio", "createdAt": "2020-07-01T14:40:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIxNzMwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU1NDQwNg==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448554406", "bodyText": "Password must have a digit and special character, so this is to ensure that all other rules are satisfied, other than the one under test.", "author": "vilkg", "createdAt": "2020-07-01T18:50:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIxNzMwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU1NTgyMg==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448555822", "bodyText": "That was for why, but i see now that you asked what it does @netroms..It appends \"1?\" to a string of length 41 \ud83d\udc4c", "author": "vilkg", "createdAt": "2020-07-01T18:53:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIxNzMwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc5NTE4NA==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448795184", "bodyText": "Thanks @vilkg", "author": "luciano-fiandesio", "createdAt": "2020-07-02T07:14:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIxNzMwMA=="}], "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "d45301f99d017c365028ab0a19d12b83b2d10f56", "changed_code": [{"header": "diff --git a/dhis-2/dhis-e2e-test/src/test/java/org/hisp/dhis/metadata/users/UserTest.java b/dhis-2/dhis-e2e-test/src/test/java/org/hisp/dhis/metadata/users/UserTest.java\nindex 2fa935b615..01d937f514 100644\n--- a/dhis-2/dhis-e2e-test/src/test/java/org/hisp/dhis/metadata/users/UserTest.java\n+++ b/dhis-2/dhis-e2e-test/src/test/java/org/hisp/dhis/metadata/users/UserTest.java\n", "chunk": "@@ -69,27 +101,36 @@ public class UserTest extends ApiTest\n         loginActions.loginAsUser( username, password );\n     }\n \n-    private Stream<Arguments> provideParams() {\n+    private Stream<Arguments> provideParams()\n+    {\n         return Stream.of( new Arguments[] {\n-            Arguments.of( password, password, \"Password must not be one of the previous 24 passwords\", \"newPassword is the same as old\" ),\n-            Arguments.of( password, \"Test1?\", \"Password must have at least 8, and at most 40 characters\", \"newPassword is too short\" ),\n-            Arguments.of( password, DataGenerator.randomString(41) + \"1?\", \"Password must have at least 8, and at most 40 characters\", \"newPassword is too-long\" ),\n+            Arguments.of( password, password, \"Password must not be one of the previous 24 passwords\",\n+                \"newPassword is the same as old\" ),\n+            Arguments.of( password, \"Test1?\", \"Password must have at least 8, and at most 40 characters\",\n+                \"newPassword is too short\" ),\n+            Arguments.of( password, DataGenerator.randomString( 41 ) + \"1?\",\n+                \"Password must have at least 8, and at most 40 characters\", \"newPassword is too-long\" ),\n             Arguments.of( password, \"\", \"OldPassword and newPassword must be provided\", \"newPassword is empty\" ),\n-            Arguments.of( \"not-an-old-password\", \"Test1212???\", \"OldPassword is incorrect\", \"oldPassword is incorrect\" ),\n-            Arguments.of( password, \"test1212?\", \"Password must have at least one upper case\", \"newPassword doesn't contain uppercase\" ),\n-            Arguments.of( password, \"Testtest1212\", \"Password must have at least one special character\", \"newPassword doesn't contain a special character\" ),\n-            Arguments.of( password, \"Testtest?\", \"Password must have at least one digit\", \"newPassword doesn't contain a digit\" )\n+            Arguments.of( \"not-an-old-password\", \"Test1212???\", \"OldPassword is incorrect\",\n+                \"oldPassword is incorrect\" ),\n+            Arguments.of( password, \"test1212?\", \"Password must have at least one upper case\",\n+                \"newPassword doesn't contain uppercase\" ),\n+            Arguments.of( password, \"Testtest1212\", \"Password must have at least one special character\",\n+                \"newPassword doesn't contain a special character\" ),\n+            Arguments.of( password, \"Testtest?\", \"Password must have at least one digit\",\n+                \"newPassword doesn't contain a digit\" )\n \n         } );\n     }\n \n-\n-    @ParameterizedTest(name = \"[{index}] {3}\")\n-    @MethodSource(\"provideParams\")\n-    public void shouldNotBeAbleToChangePasswordWhenValidationErrors(String oldPassword, String newPassword, String message, String description) {\n+    @ParameterizedTest( name = \"[{index}] {3}\" )\n+    @MethodSource( \"provideParams\" )\n+    public void shouldNotBeAbleToChangePasswordWhenValidationErrors( String oldPassword, String newPassword,\n+        String message, String description )\n+    {\n         JsonObject payload = getPayload( oldPassword, newPassword );\n \n-        ApiResponse response = meActions.update( \"/changePassword\", payload  );\n+        ApiResponse response = meActions.update( \"/changePassword\", payload );\n \n         response.validate().statusCode( 409 )\n             .body( \"status\", equalTo( \"ERROR\" ) )\n", "next_change": {"commit": "9706c5b672214850be88dc840d0fa7de80312695", "changed_code": [{"header": "diff --git a/dhis-2/dhis-e2e-test/src/test/java/org/hisp/dhis/metadata/users/UserTest.java b/dhis-2/dhis-e2e-test/src/test/java/org/hisp/dhis/metadata/users/UserTest.java\ndeleted file mode 100644\nindex 01d937f514..0000000000\n--- a/dhis-2/dhis-e2e-test/src/test/java/org/hisp/dhis/metadata/users/UserTest.java\n+++ /dev/null\n", "chunk": "@@ -1,170 +0,0 @@\n-/*\n- * Copyright (c) 2004-2021, University of Oslo\n- * All rights reserved.\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions are met:\n- * Redistributions of source code must retain the above copyright notice, this\n- * list of conditions and the following disclaimer.\n- *\n- * Redistributions in binary form must reproduce the above copyright notice,\n- * this list of conditions and the following disclaimer in the documentation\n- * and/or other materials provided with the distribution.\n- * Neither the name of the HISP project nor the names of its contributors may\n- * be used to endorse or promote products derived from this software without\n- * specific prior written permission.\n- *\n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n- * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n- * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n- * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n- * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n- * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n- * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n- * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n- * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- */\n-package org.hisp.dhis.metadata.users;\n-\n-/*\n- * Copyright (c) 2004-2021, University of Oslo\n- * All rights reserved.\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions are met:\n- * Redistributions of source code must retain the above copyright notice, this\n- * list of conditions and the following disclaimer.\n- *\n- * Redistributions in binary form must reproduce the above copyright notice,\n- * this list of conditions and the following disclaimer in the documentation\n- * and/or other materials provided with the distribution.\n- * Neither the name of the HISP project nor the names of its contributors may\n- * be used to endorse or promote products derived from this software without\n- * specific prior written permission.\n- *\n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n- * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n- * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n- * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n- * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n- * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n- * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n- * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n- * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- */\n-\n-import static org.hamcrest.CoreMatchers.equalTo;\n-\n-import java.util.stream.Stream;\n-\n-import org.hisp.dhis.ApiTest;\n-import org.hisp.dhis.actions.LoginActions;\n-import org.hisp.dhis.actions.RestApiActions;\n-import org.hisp.dhis.actions.UserActions;\n-import org.hisp.dhis.dto.ApiResponse;\n-import org.hisp.dhis.utils.DataGenerator;\n-import org.junit.jupiter.api.BeforeEach;\n-import org.junit.jupiter.api.Test;\n-import org.junit.jupiter.params.ParameterizedTest;\n-import org.junit.jupiter.params.provider.Arguments;\n-import org.junit.jupiter.params.provider.MethodSource;\n-\n-import com.google.gson.JsonObject;\n-\n-/**\n- * @author Gintare Vilkelyte <vilkelyte.gintare@gmail.com>\n- */\n-public class UserTest extends ApiTest\n-{\n-    private String username;\n-\n-    private String password = \"Test1212?\";\n-\n-    private UserActions userActions;\n-\n-    private LoginActions loginActions;\n-\n-    private RestApiActions meActions;\n-\n-    @BeforeEach\n-    public void beforeEach()\n-    {\n-        userActions = new UserActions();\n-        loginActions = new LoginActions();\n-        meActions = new RestApiActions( \"/me\" );\n-\n-        username = \"user-tests-\" + DataGenerator.randomString();\n-        loginActions.loginAsSuperUser();\n-        userActions.addUser( username, password );\n-        loginActions.loginAsUser( username, password );\n-    }\n-\n-    private Stream<Arguments> provideParams()\n-    {\n-        return Stream.of( new Arguments[] {\n-            Arguments.of( password, password, \"Password must not be one of the previous 24 passwords\",\n-                \"newPassword is the same as old\" ),\n-            Arguments.of( password, \"Test1?\", \"Password must have at least 8, and at most 40 characters\",\n-                \"newPassword is too short\" ),\n-            Arguments.of( password, DataGenerator.randomString( 41 ) + \"1?\",\n-                \"Password must have at least 8, and at most 40 characters\", \"newPassword is too-long\" ),\n-            Arguments.of( password, \"\", \"OldPassword and newPassword must be provided\", \"newPassword is empty\" ),\n-            Arguments.of( \"not-an-old-password\", \"Test1212???\", \"OldPassword is incorrect\",\n-                \"oldPassword is incorrect\" ),\n-            Arguments.of( password, \"test1212?\", \"Password must have at least one upper case\",\n-                \"newPassword doesn't contain uppercase\" ),\n-            Arguments.of( password, \"Testtest1212\", \"Password must have at least one special character\",\n-                \"newPassword doesn't contain a special character\" ),\n-            Arguments.of( password, \"Testtest?\", \"Password must have at least one digit\",\n-                \"newPassword doesn't contain a digit\" )\n-\n-        } );\n-    }\n-\n-    @ParameterizedTest( name = \"[{index}] {3}\" )\n-    @MethodSource( \"provideParams\" )\n-    public void shouldNotBeAbleToChangePasswordWhenValidationErrors( String oldPassword, String newPassword,\n-        String message, String description )\n-    {\n-        JsonObject payload = getPayload( oldPassword, newPassword );\n-\n-        ApiResponse response = meActions.update( \"/changePassword\", payload );\n-\n-        response.validate().statusCode( 409 )\n-            .body( \"status\", equalTo( \"ERROR\" ) )\n-            .body( \"message\", equalTo( message ) );\n-    }\n-\n-    @Test\n-    public void shouldBeAbleToChangePassword()\n-    {\n-        String newPassword = \"Test1212??\";\n-        JsonObject payload = getPayload( password, newPassword );\n-\n-        ApiResponse response = meActions.update( \"/changePassword\", payload );\n-\n-        response.validate().statusCode( 202 );\n-\n-        // should login with new credentials\n-        loginActions.addAuthenticationHeader( username, newPassword );\n-        loginActions.getLoggedInUserInfo().validate()\n-            .statusCode( 200 )\n-            .body( \"userCredentials.username\", equalTo( username ) );\n-\n-        // should not login in with old credentials\n-        loginActions.addAuthenticationHeader( username, password );\n-        loginActions.getLoggedInUserInfo().validate().statusCode( 401 );\n-    }\n-\n-    private JsonObject getPayload( String oldPsw, String newPsw )\n-    {\n-        JsonObject payload = new JsonObject();\n-\n-        payload.addProperty( \"oldPassword\", oldPsw );\n-        payload.addProperty( \"newPassword\", newPsw );\n-\n-        return payload;\n-    }\n-}\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "message": "Merge commit", "committedDate": null}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "81c7005c1bd2500993fc49d1cff0df3cb882428a", "committedDate": "2021-05-25 22:57:02 +0200", "message": "chore: Fix codestyle issues in e2e project (#8075)"}, {"oid": "d45301f99d017c365028ab0a19d12b83b2d10f56", "committedDate": "2021-08-19 10:56:35 +0200", "message": "feat: Adds speedy-spotless plugin, updates code format on all e2e files (#8549)"}, {"oid": "bb33635ff28115038a16d5187314f6053989c846", "committedDate": "2021-09-14 16:15:54 +0200", "message": "fix: Merge deduplication (merging) changes to master (#8726)"}, {"oid": "8345bb0e86fc277bf9cbdb1e81cf6ebc3618ce4a", "committedDate": "2021-10-22 10:56:42 +0200", "message": "style: duplicate headers removed [TECH-780] (#9109)"}, {"oid": "9a3544390425ef3eab2b2871dfd99e4296222a48", "committedDate": "2021-12-07 14:53:05 +0100", "message": "feat: Add username regexp validation (#9358)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "8ccf9a288a67e5ee5349024fd3d281372c64c956", "committedDate": "2022-02-22 13:25:35 +0800", "message": "feat: Merge User/UserCredentials into one DB table (#9754)"}, {"oid": "dd60d6a824e64b0c7554b6b66c5b4240f177e5a4", "committedDate": "2023-05-03 17:51:52 +0800", "message": "fix: Misleading message about password requirements [DHIS2-15195] (#13787)"}, {"oid": "9706c5b672214850be88dc840d0fa7de80312695", "committedDate": "2023-05-11 14:26:31 +0200", "message": "test: prefix all test modules with dhis-test (#13889)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIxOTEyMQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448219121", "body": "This Program instance looks unused.", "bodyText": "This Program instance looks unused.", "bodyHTML": "<p dir=\"auto\">This Program instance looks unused.</p>", "author": "netroms", "createdAt": "2020-07-01T08:56:37Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramStageCheck.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer.insert.validation;\n+\n+import static org.hisp.dhis.dxf2.importsummary.ImportSummary.error;\n+import static org.hisp.dhis.dxf2.importsummary.ImportSummary.success;\n+\n+import org.hisp.dhis.common.IdScheme;\n+import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n+import org.hisp.dhis.dxf2.events.importer.Checker;\n+import org.hisp.dhis.dxf2.events.importer.shared.ImmutableEvent;\n+import org.hisp.dhis.dxf2.importsummary.ImportSummary;\n+import org.hisp.dhis.program.Program;\n+import org.hisp.dhis.program.ProgramStage;\n+import org.springframework.util.StringUtils;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+public class ProgramStageCheck implements Checker\n+{\n+    @Override\n+    public ImportSummary check(ImmutableEvent event, WorkContext ctx )\n+    {\n+        IdScheme programStageIdScheme = ctx.getImportOptions().getIdSchemes().getProgramStageIdScheme();\n+        // Get the program stage id from the event.\n+        // If the event has no program stage set, use a dummy value which will not\n+        // return any Program Stage\n+        // from the WorkContext\n+        final String programStageId = StringUtils.isEmpty( event.getProgramStage() ) ? \"-\" : event.getProgramStage();\n+\n+        Program program = ctx.getProgramsMap().get( event.getProgram() );", "originalCommit": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQxMTY3OQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448411679", "bodyText": "Fixed, removed", "author": "luciano-fiandesio", "createdAt": "2020-07-01T14:40:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIxOTEyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "7032498b0cbac9437a93d7deeb72862937c55a98", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramStageCheck.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramStageCheck.java\nindex 6d2600bd32..939acb3b81 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramStageCheck.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramStageCheck.java\n", "chunk": "@@ -55,7 +55,6 @@ public class ProgramStageCheck implements Checker\n         // from the WorkContext\n         final String programStageId = StringUtils.isEmpty( event.getProgramStage() ) ? \"-\" : event.getProgramStage();\n \n-        Program program = ctx.getProgramsMap().get( event.getProgram() );\n         ProgramStage programStage = ctx.getProgramStage( programStageIdScheme, programStageId );\n \n         if ( programStage == null )\n", "next_change": {"commit": "d360652a896bee650a842567e26cd1e62145cccb", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramStageCheck.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramStageCheck.java\nindex 939acb3b81..6d2600bd32 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramStageCheck.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramStageCheck.java\n", "chunk": "@@ -55,6 +55,7 @@ public class ProgramStageCheck implements Checker\n         // from the WorkContext\n         final String programStageId = StringUtils.isEmpty( event.getProgramStage() ) ? \"-\" : event.getProgramStage();\n \n+        Program program = ctx.getProgramsMap().get( event.getProgram() );\n         ProgramStage programStage = ctx.getProgramStage( programStageIdScheme, programStageId );\n \n         if ( programStage == null )\n", "next_change": {"commit": "c9cbe9cf8b22a49324c53b68eba31b9c63684df4", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramStageCheck.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramStageCheck.java\nindex 6d2600bd32..939acb3b81 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramStageCheck.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramStageCheck.java\n", "chunk": "@@ -55,7 +55,6 @@ public class ProgramStageCheck implements Checker\n         // from the WorkContext\n         final String programStageId = StringUtils.isEmpty( event.getProgramStage() ) ? \"-\" : event.getProgramStage();\n \n-        Program program = ctx.getProgramsMap().get( event.getProgram() );\n         ProgramStage programStage = ctx.getProgramStage( programStageIdScheme, programStageId );\n \n         if ( programStage == null )\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramStageCheck.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramStageCheck.java\nindex 6d2600bd32..54b07313a4 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramStageCheck.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramStageCheck.java\n", "chunk": "@@ -55,7 +54,6 @@ public class ProgramStageCheck implements Checker\n         // from the WorkContext\n         final String programStageId = StringUtils.isEmpty( event.getProgramStage() ) ? \"-\" : event.getProgramStage();\n \n-        Program program = ctx.getProgramsMap().get( event.getProgram() );\n         ProgramStage programStage = ctx.getProgramStage( programStageIdScheme, programStageId );\n \n         if ( programStage == null )\n", "next_change": {"commit": "ea76fa86409613c9766d4508d65c88ac55c413c3", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramStageCheck.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramStageCheck.java\nindex 54b07313a4..04c8e59d33 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramStageCheck.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramStageCheck.java\n", "chunk": "@@ -45,11 +44,12 @@ import org.springframework.util.StringUtils;\n public class ProgramStageCheck implements Checker\n {\n     @Override\n-    public ImportSummary check(ImmutableEvent event, WorkContext ctx )\n+    public ImportSummary check( ImmutableEvent event, WorkContext ctx )\n     {\n         IdScheme programStageIdScheme = ctx.getImportOptions().getIdSchemes().getProgramStageIdScheme();\n         // Get the program stage id from the event.\n-        // If the event has no program stage set, use a dummy value which will not\n+        // If the event has no program stage set, use a dummy value which will\n+        // not\n         // return any Program Stage\n         // from the WorkContext\n         final String programStageId = StringUtils.isEmpty( event.getProgramStage() ) ? \"-\" : event.getProgramStage();\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "message": "Merge commit", "committedDate": null}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "10b11c17ef2f2964263efc051f96c8e8f8f7e1f4", "committedDate": "2021-02-02 12:33:59 +0100", "message": "feat: change user property name to createdBy (#7061)"}, {"oid": "1e593837ab1c64884a8ac615c7cc8c3471a219ee", "committedDate": "2021-11-18 09:33:25 +0100", "message": "refactor: validators, checkers and processors in old importer are now spring beans [TECH-797] (#9218)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "02336c9611c0dd85d5038223bddbfdebc0aae526", "committedDate": "2023-05-11 19:34:26 +0200", "message": "chore: move old tracker dxf2 code into deprecated package (#13901)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIxOTYwNw==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448219607", "body": "Missing newline end of file", "bodyText": "Missing newline end of file", "bodyHTML": "<p dir=\"auto\">Missing newline end of file</p>", "author": "netroms", "createdAt": "2020-07-01T08:57:31Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/ProgramInstanceSupplierTest.java", "diffHunk": "@@ -0,0 +1,119 @@\n+package org.hisp.dhis.dxf2.events.importer.context;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.notNullValue;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertThat;\n+import static org.mockito.Mockito.when;\n+\n+import java.sql.SQLException;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.hisp.dhis.common.CodeGenerator;\n+import org.hisp.dhis.dxf2.common.ImportOptions;\n+import org.hisp.dhis.dxf2.events.event.Event;\n+import org.hisp.dhis.program.Program;\n+import org.hisp.dhis.program.ProgramInstance;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.Mock;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+public class ProgramInstanceSupplierTest extends AbstractSupplierTest<ProgramInstance>\n+{\n+    private ProgramInstanceSupplier subject;\n+\n+    @Mock\n+    private ProgramSupplier programSupplier;\n+\n+    @Before\n+    public void setUp()\n+    {\n+        this.subject = new ProgramInstanceSupplier( jdbcTemplate, programSupplier );\n+    }\n+\n+    @Test\n+    public void handleNullEvents()\n+    {\n+        assertNotNull( subject.get( ImportOptions.getDefaultImportOptions(), new HashMap<>(), null ) );\n+    }\n+\n+    @Override\n+    public void verifySupplier()\n+        throws SQLException\n+    {\n+        // mock resultset data\n+        when( mockResultSet.getLong( \"programinstanceid\" ) ).thenReturn( 100L );\n+        when( mockResultSet.getString( \"uid\" ) ).thenReturn( \"abcded\" );\n+        when( mockResultSet.getString( \"tei_uid\" ) ).thenReturn( \"efghil\" );\n+        when( mockResultSet.getString( \"tei_ou_uid\" ) ).thenReturn( \"ouabcde\" );\n+        when( mockResultSet.getString( \"tei_ou_path\" ) ).thenReturn( \"/ouabcde\" );\n+        when( mockResultSet.getLong( \"programid\" ) ).thenReturn( 999L );\n+\n+        // create event to import\n+        Event event = new Event();\n+        event.setUid( CodeGenerator.generateUid() );\n+        event.setEnrollment( \"abcded\" );\n+\n+        // mock resultset extraction\n+        mockResultSetExtractor( mockResultSet );\n+\n+        // create a Program for the ProgramSupplier\n+        Program program = new Program();\n+        program.setId( 999L );\n+        program.setUid( \"prabcde\" );\n+        Map<String, Program> programMap = new HashMap<>();\n+        programMap.put( \"prabcde\", program );\n+\n+        final ImportOptions defaultImportOptions = ImportOptions.getDefaultImportOptions();\n+\n+        when( programSupplier.get( defaultImportOptions, Collections.singletonList( event ) ) )\n+            .thenReturn( programMap );\n+\n+        Map<String, ProgramInstance> map = subject.get( defaultImportOptions, new HashMap<>(), Collections.singletonList( event ) );\n+\n+        ProgramInstance programInstance = map.get( event.getUid() );\n+        assertThat( programInstance, is( notNullValue() ) );\n+        assertThat( programInstance.getId(), is( 100L ) );\n+        assertThat( programInstance.getUid(), is( \"abcded\" ) );\n+        assertThat( programInstance.getEntityInstance(), is( notNullValue() ) );\n+        assertThat( programInstance.getEntityInstance().getUid(), is( \"efghil\" ) );\n+        assertThat( programInstance.getEntityInstance().getOrganisationUnit(), is( notNullValue() ) );\n+        assertThat( programInstance.getEntityInstance().getOrganisationUnit().getUid(), is( \"ouabcde\" ) );\n+        assertThat( programInstance.getProgram(), is( notNullValue() ) );\n+        assertThat( programInstance.getProgram().getUid(), is( \"prabcde\" ) );\n+    }\n+\n+}", "originalCommit": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQxMjA2Mg==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448412062", "bodyText": "Didn't know we needed one, fixed", "author": "luciano-fiandesio", "createdAt": "2020-07-01T14:41:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIxOTYwNw=="}], "type": "inlineReview", "revised_code": {"commit": "7032498b0cbac9437a93d7deeb72862937c55a98", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/ProgramInstanceSupplierTest.java b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/ProgramInstanceSupplierTest.java\nindex c43ac03fa9..bb62e062d4 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/ProgramInstanceSupplierTest.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/ProgramInstanceSupplierTest.java\n", "chunk": "@@ -115,5 +115,4 @@ public class ProgramInstanceSupplierTest extends AbstractSupplierTest<ProgramIns\n         assertThat( programInstance.getProgram(), is( notNullValue() ) );\n         assertThat( programInstance.getProgram().getUid(), is( \"prabcde\" ) );\n     }\n-\n-}\n\\ No newline at end of file\n+}\n", "next_change": {"commit": "d360652a896bee650a842567e26cd1e62145cccb", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/ProgramInstanceSupplierTest.java b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/ProgramInstanceSupplierTest.java\nindex bb62e062d4..c43ac03fa9 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/ProgramInstanceSupplierTest.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/ProgramInstanceSupplierTest.java\n", "chunk": "@@ -115,4 +115,5 @@ public class ProgramInstanceSupplierTest extends AbstractSupplierTest<ProgramIns\n         assertThat( programInstance.getProgram(), is( notNullValue() ) );\n         assertThat( programInstance.getProgram().getUid(), is( \"prabcde\" ) );\n     }\n-}\n+\n+}\n\\ No newline at end of file\n", "next_change": {"commit": "c9cbe9cf8b22a49324c53b68eba31b9c63684df4", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/ProgramInstanceSupplierTest.java b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/ProgramInstanceSupplierTest.java\nindex c43ac03fa9..bb62e062d4 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/ProgramInstanceSupplierTest.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/ProgramInstanceSupplierTest.java\n", "chunk": "@@ -115,5 +115,4 @@ public class ProgramInstanceSupplierTest extends AbstractSupplierTest<ProgramIns\n         assertThat( programInstance.getProgram(), is( notNullValue() ) );\n         assertThat( programInstance.getProgram().getUid(), is( \"prabcde\" ) );\n     }\n-\n-}\n\\ No newline at end of file\n+}\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/ProgramInstanceSupplierTest.java b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/ProgramInstanceSupplierTest.java\nindex c43ac03fa9..bb62e062d4 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/ProgramInstanceSupplierTest.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/ProgramInstanceSupplierTest.java\n", "chunk": "@@ -115,5 +115,4 @@ public class ProgramInstanceSupplierTest extends AbstractSupplierTest<ProgramIns\n         assertThat( programInstance.getProgram(), is( notNullValue() ) );\n         assertThat( programInstance.getProgram().getUid(), is( \"prabcde\" ) );\n     }\n-\n-}\n\\ No newline at end of file\n+}\n", "next_change": {"commit": "e4f8abdfdb132f536835b3be17a3391da2089823", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/ProgramInstanceSupplierTest.java b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/ProgramInstanceSupplierTest.java\nindex bb62e062d4..7feff2e129 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/ProgramInstanceSupplierTest.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/ProgramInstanceSupplierTest.java\n", "chunk": "@@ -81,38 +87,32 @@ public class ProgramInstanceSupplierTest extends AbstractSupplierTest<ProgramIns\n         when( mockResultSet.getString( \"tei_ou_uid\" ) ).thenReturn( \"ouabcde\" );\n         when( mockResultSet.getString( \"tei_ou_path\" ) ).thenReturn( \"/ouabcde\" );\n         when( mockResultSet.getLong( \"programid\" ) ).thenReturn( 999L );\n-\n         // create event to import\n         Event event = new Event();\n         event.setUid( CodeGenerator.generateUid() );\n         event.setEnrollment( \"abcded\" );\n-\n         // mock resultset extraction\n         mockResultSetExtractor( mockResultSet );\n-\n         // create a Program for the ProgramSupplier\n         Program program = new Program();\n         program.setId( 999L );\n         program.setUid( \"prabcde\" );\n         Map<String, Program> programMap = new HashMap<>();\n         programMap.put( \"prabcde\", program );\n-\n         final ImportOptions defaultImportOptions = ImportOptions.getDefaultImportOptions();\n-\n         when( programSupplier.get( defaultImportOptions, Collections.singletonList( event ) ) )\n             .thenReturn( programMap );\n-\n-        Map<String, ProgramInstance> map = subject.get( defaultImportOptions, new HashMap<>(), Collections.singletonList( event ) );\n-\n-        ProgramInstance programInstance = map.get( event.getUid() );\n-        assertThat( programInstance, is( notNullValue() ) );\n-        assertThat( programInstance.getId(), is( 100L ) );\n-        assertThat( programInstance.getUid(), is( \"abcded\" ) );\n-        assertThat( programInstance.getEntityInstance(), is( notNullValue() ) );\n-        assertThat( programInstance.getEntityInstance().getUid(), is( \"efghil\" ) );\n-        assertThat( programInstance.getEntityInstance().getOrganisationUnit(), is( notNullValue() ) );\n-        assertThat( programInstance.getEntityInstance().getOrganisationUnit().getUid(), is( \"ouabcde\" ) );\n-        assertThat( programInstance.getProgram(), is( notNullValue() ) );\n-        assertThat( programInstance.getProgram().getUid(), is( \"prabcde\" ) );\n+        Map<String, Enrollment> map = subject.get( defaultImportOptions, new HashMap<>(),\n+            Collections.singletonList( event ) );\n+        Enrollment enrollment = map.get( event.getUid() );\n+        assertThat( enrollment, is( notNullValue() ) );\n+        assertThat( enrollment.getId(), is( 100L ) );\n+        assertThat( enrollment.getUid(), is( \"abcded\" ) );\n+        assertThat( enrollment.getEntityInstance(), is( notNullValue() ) );\n+        assertThat( enrollment.getEntityInstance().getUid(), is( \"efghil\" ) );\n+        assertThat( enrollment.getEntityInstance().getOrganisationUnit(), is( notNullValue() ) );\n+        assertThat( enrollment.getEntityInstance().getOrganisationUnit().getUid(), is( \"ouabcde\" ) );\n+        assertThat( enrollment.getProgram(), is( notNullValue() ) );\n+        assertThat( enrollment.getProgram().getUid(), is( \"prabcde\" ) );\n     }\n }\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "message": "Merge commit", "committedDate": null}, {"oid": "c9aa7729514346e42a6f1957d20bf1f1ad4641d0", "committedDate": "2020-10-28 11:27:13 +0100", "message": "chore: remove junit and hamcrest related warnings (#6504)"}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "22d5da9d9a812b02eb5acd643112a6b050b5d63c", "committedDate": "2021-12-16 13:19:38 +0100", "message": "chore: migrate tests to JUnit 5 (#9467)"}, {"oid": "9a152ab35b10a25818b1d1e250d2fc96119e2e17", "committedDate": "2021-12-17 10:03:58 +0100", "message": "chore: reduce visibility of test classes/methods (#9496)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "e4f8abdfdb132f536835b3be17a3391da2089823", "committedDate": "2023-05-03 11:31:41 +0000", "message": "chore: Rename ProgramInstance to Enrollment [TECH-1547] (#13794)"}, {"oid": "ba38c7fa19a269450161eb73bad6b80b1ef1133b", "committedDate": "2023-05-04 11:23:39 +0200", "message": "chore: Rename most ProgramInstance classes to Enrollment [TECH-1547] (#13811)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIyMTc5OQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448221799", "body": "Why is it only checking canDelete here? The name of this class looks looks very general, so does the method name. Maybe explain in doc/comment why only delete is checked. ", "bodyText": "Why is it only checking canDelete here? The name of this class looks looks very general, so does the method name. Maybe explain in doc/comment why only delete is checked.", "bodyHTML": "<p dir=\"auto\">Why is it only checking canDelete here? The name of this class looks looks very general, so does the method name. Maybe explain in doc/comment why only delete is checked.</p>", "author": "netroms", "createdAt": "2020-07-01T09:01:18Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/delete/validation/ProgramStageInstanceAclCheck.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer.delete.validation;\n+\n+import static java.util.Collections.emptyList;\n+\n+import java.util.List;\n+\n+import org.hisp.dhis.dxf2.events.importer.shared.validation.BaseEventAclCheck;\n+import org.hisp.dhis.program.ProgramStageInstance;\n+import org.hisp.dhis.trackedentity.TrackerAccessManager;\n+import org.hisp.dhis.user.User;\n+\n+public class ProgramStageInstanceAclCheck extends BaseEventAclCheck\n+{\n+    @Override\n+    public List<String> checkAcl( TrackerAccessManager trackerAccessManager, User user,\n+        ProgramStageInstance programStageInstance )\n+    {\n+        if ( programStageInstance != null )\n+        {\n+            return trackerAccessManager.canDelete( user, programStageInstance, true );", "originalCommit": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ0MDI0NQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448440245", "bodyText": "We have ProgramStageInstanceAclCheck for delete/update/insert, it is specified in the package.", "author": "luciano-fiandesio", "createdAt": "2020-07-01T15:23:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIyMTc5OQ=="}], "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "1e593837ab1c64884a8ac615c7cc8c3471a219ee", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/delete/validation/ProgramStageInstanceAclCheck.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/delete/validation/DeleteProgramStageInstanceAclCheck.java\nsimilarity index 91%\nrename from dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/delete/validation/ProgramStageInstanceAclCheck.java\nrename to dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/delete/validation/DeleteProgramStageInstanceAclCheck.java\nindex 2ba7a80554..3472d8d61a 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/delete/validation/ProgramStageInstanceAclCheck.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/delete/validation/DeleteProgramStageInstanceAclCheck.java\n", "chunk": "@@ -36,8 +35,13 @@ import org.hisp.dhis.dxf2.events.importer.shared.validation.BaseEventAclCheck;\n import org.hisp.dhis.program.ProgramStageInstance;\n import org.hisp.dhis.trackedentity.TrackerAccessManager;\n import org.hisp.dhis.user.User;\n+import org.springframework.stereotype.Component;\n \n-public class ProgramStageInstanceAclCheck extends BaseEventAclCheck\n+/**\n+ * @author maikel arabori\n+ */\n+@Component\n+public class DeleteProgramStageInstanceAclCheck extends BaseEventAclCheck\n {\n     @Override\n     public List<String> checkAcl( TrackerAccessManager trackerAccessManager, User user,\n", "next_change": null}]}, "commits_in_main": [{"oid": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "message": "Merge commit", "committedDate": null}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "1e593837ab1c64884a8ac615c7cc8c3471a219ee", "committedDate": "2021-11-18 09:33:25 +0100", "message": "refactor: validators, checkers and processors in old importer are now spring beans [TECH-797] (#9218)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIyMzI0OQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448223249", "body": "Looks like this comment means org unit -> user ?", "bodyText": "Looks like this comment means org unit -> user ?", "bodyHTML": "<p dir=\"auto\">Looks like this comment means org unit -&gt; user ?</p>", "author": "netroms", "createdAt": "2020-07-01T09:03:53Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AssignedUserSupplier.java", "diffHunk": "@@ -0,0 +1,105 @@\n+package org.hisp.dhis.dxf2.events.importer.context;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import java.sql.ResultSet;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import com.google.common.collect.HashMultimap;\n+import com.google.common.collect.Multimap;\n+import org.apache.commons.lang3.StringUtils;\n+import org.hisp.dhis.dxf2.common.ImportOptions;\n+import org.hisp.dhis.dxf2.events.event.Event;\n+import org.hisp.dhis.user.User;\n+import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;\n+import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;\n+import org.springframework.stereotype.Component;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+@Component( \"workContextAssignedUsersSupplier\" )\n+public class AssignedUserSupplier extends AbstractSupplier<Map<String, User>>\n+{\n+    public AssignedUserSupplier( NamedParameterJdbcTemplate namedParameterJdbcTemplate )\n+    {\n+        super( namedParameterJdbcTemplate );\n+    }\n+\n+    @Override\n+    public Map<String, User> get( ImportOptions importOptions, List<Event> events )\n+    {\n+        // @formatter:off\n+        // Collect all the org unit uids to pass as SQL query argument", "originalCommit": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ0MDgxMQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448440811", "bodyText": "Yes, good catch, fixed", "author": "luciano-fiandesio", "createdAt": "2020-07-01T15:24:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIyMzI0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "7032498b0cbac9437a93d7deeb72862937c55a98", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AssignedUserSupplier.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AssignedUserSupplier.java\nindex 83fc675593..0074733137 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AssignedUserSupplier.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AssignedUserSupplier.java\n", "chunk": "@@ -60,7 +60,7 @@ public class AssignedUserSupplier extends AbstractSupplier<Map<String, User>>\n     public Map<String, User> get( ImportOptions importOptions, List<Event> events )\n     {\n         // @formatter:off\n-        // Collect all the org unit uids to pass as SQL query argument\n+        // Collect all the \"assigned user\" uids to pass as SQL query argument\n         Set<String> userUids = events.stream()\n                 .filter( e -> StringUtils.isNotEmpty(e.getAssignedUser()))\n                 .map( Event::getAssignedUser )\n", "next_change": {"commit": "d360652a896bee650a842567e26cd1e62145cccb", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AssignedUserSupplier.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AssignedUserSupplier.java\nindex 0074733137..83fc675593 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AssignedUserSupplier.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AssignedUserSupplier.java\n", "chunk": "@@ -60,7 +60,7 @@ public class AssignedUserSupplier extends AbstractSupplier<Map<String, User>>\n     public Map<String, User> get( ImportOptions importOptions, List<Event> events )\n     {\n         // @formatter:off\n-        // Collect all the \"assigned user\" uids to pass as SQL query argument\n+        // Collect all the org unit uids to pass as SQL query argument\n         Set<String> userUids = events.stream()\n                 .filter( e -> StringUtils.isNotEmpty(e.getAssignedUser()))\n                 .map( Event::getAssignedUser )\n", "next_change": {"commit": "c9cbe9cf8b22a49324c53b68eba31b9c63684df4", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AssignedUserSupplier.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AssignedUserSupplier.java\nindex 83fc675593..0074733137 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AssignedUserSupplier.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AssignedUserSupplier.java\n", "chunk": "@@ -60,7 +60,7 @@ public class AssignedUserSupplier extends AbstractSupplier<Map<String, User>>\n     public Map<String, User> get( ImportOptions importOptions, List<Event> events )\n     {\n         // @formatter:off\n-        // Collect all the org unit uids to pass as SQL query argument\n+        // Collect all the \"assigned user\" uids to pass as SQL query argument\n         Set<String> userUids = events.stream()\n                 .filter( e -> StringUtils.isNotEmpty(e.getAssignedUser()))\n                 .map( Event::getAssignedUser )\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AssignedUserSupplier.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AssignedUserSupplier.java\nindex 83fc675593..131a8922d6 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AssignedUserSupplier.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AssignedUserSupplier.java\n", "chunk": "@@ -60,7 +61,7 @@ public class AssignedUserSupplier extends AbstractSupplier<Map<String, User>>\n     public Map<String, User> get( ImportOptions importOptions, List<Event> events )\n     {\n         // @formatter:off\n-        // Collect all the org unit uids to pass as SQL query argument\n+        // Collect all the \"assigned user\" uids to pass as SQL query argument\n         Set<String> userUids = events.stream()\n                 .filter( e -> StringUtils.isNotEmpty(e.getAssignedUser()))\n                 .map( Event::getAssignedUser )\n", "next_change": null}]}, "commits_in_main": [{"oid": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "message": "Merge commit", "committedDate": null}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "02336c9611c0dd85d5038223bddbfdebc0aae526", "committedDate": "2023-05-11 19:34:26 +0200", "message": "chore: move old tracker dxf2 code into deprecated package (#13901)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIyNDI3Mw==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448224273", "body": "Since it looks like this class is only setting the CREATE strategy maybe it should be reflected in the class name?", "bodyText": "Since it looks like this class is only setting the CREATE strategy maybe it should be reflected in the class name?", "bodyHTML": "<p dir=\"auto\">Since it looks like this class is only setting the CREATE strategy maybe it should be reflected in the class name?</p>", "author": "netroms", "createdAt": "2020-07-01T09:05:42Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/preprocess/PreInsertProcessorFactory.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer.insert.preprocess;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.hisp.dhis.dxf2.events.event.Event;\n+import org.hisp.dhis.dxf2.events.importer.EventProcessing;\n+import org.hisp.dhis.dxf2.events.importer.ImportStrategyUtils;\n+import org.hisp.dhis.dxf2.events.importer.Processor;\n+import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n+import org.hisp.dhis.importexport.ImportStrategy;\n+import org.springframework.stereotype.Component;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+@Component( \"eventsPreInsertProcessorFactory\" )\n+public class PreInsertProcessorFactory implements EventProcessing", "originalCommit": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ0MTM3MA==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448441370", "bodyText": "Yes, the class is named PreInsertProcessFactory and it's in the insert package.", "author": "luciano-fiandesio", "createdAt": "2020-07-01T15:24:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIyNDI3Mw=="}], "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "f8cfa7437ac99962a94ceef4b9150478899ceb2b", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/preprocess/PreInsertProcessorFactory.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/preprocess/PreInsertProcessorFactory.java\nindex 72963db43b..09fea6a764 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/preprocess/PreInsertProcessorFactory.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/preprocess/PreInsertProcessorFactory.java\n", "chunk": "@@ -26,41 +28,38 @@\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n \n-package org.hisp.dhis.dxf2.events.importer.insert.preprocess;\n+import static org.hisp.dhis.importexport.ImportStrategy.CREATE;\n \n import java.util.List;\n import java.util.Map;\n+import java.util.function.Predicate;\n \n-import org.hisp.dhis.dxf2.events.event.Event;\n-import org.hisp.dhis.dxf2.events.importer.EventProcessing;\n+import org.hisp.dhis.dxf2.events.importer.AbstractProcessorFactory;\n import org.hisp.dhis.dxf2.events.importer.ImportStrategyUtils;\n import org.hisp.dhis.dxf2.events.importer.Processor;\n-import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n import org.hisp.dhis.importexport.ImportStrategy;\n+import org.springframework.beans.factory.annotation.Qualifier;\n import org.springframework.stereotype.Component;\n \n+import lombok.Getter;\n+import lombok.NonNull;\n+import lombok.RequiredArgsConstructor;\n+\n /**\n  * @author Luciano Fiandesio\n  */\n+@Getter\n @Component( \"eventsPreInsertProcessorFactory\" )\n-public class PreInsertProcessorFactory implements EventProcessing\n+@RequiredArgsConstructor\n+public class PreInsertProcessorFactory extends AbstractProcessorFactory\n {\n-    private final Map<ImportStrategy, List<Class<? extends Processor>>> eventPreProcessorsMap;\n \n-    public PreInsertProcessorFactory(\n-        final Map<ImportStrategy, List<Class<? extends Processor>>> eventInsertPreProcessorsMap )\n-    {\n-        this.eventPreProcessorsMap = eventInsertPreProcessorsMap;\n-    }\n+    @NonNull\n+    @Qualifier( \"eventInsertPreProcessorMap\" )\n+    private final Map<ImportStrategy, List<Class<? extends Processor>>> processorMap;\n+\n+    private final ImportStrategy importStrategy = CREATE;\n \n-    @Override\n-    public void process( final WorkContext workContext, final List<Event> events )\n-    {\n-        ImportStrategy importStrategy = workContext.getImportOptions().getImportStrategy();\n+    private final Predicate<ImportStrategy> importStrategyPredicate = ImportStrategyUtils::isInsert;\n \n-        if ( ImportStrategyUtils.isInsert( importStrategy ) )\n-        {\n-            new ProcessorRunner( workContext, events ).run( eventPreProcessorsMap.get( ImportStrategy.CREATE ) );\n-        }\n-    }\n }\n", "next_change": {"commit": "1e593837ab1c64884a8ac615c7cc8c3471a219ee", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/preprocess/PreInsertProcessorFactory.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/InsertValidatingEventChecker.java\nsimilarity index 68%\nrename from dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/preprocess/PreInsertProcessorFactory.java\nrename to dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/InsertValidatingEventChecker.java\nindex 09fea6a764..3c38b237db 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/preprocess/PreInsertProcessorFactory.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/InsertValidatingEventChecker.java\n", "chunk": "@@ -27,39 +25,37 @@ package org.hisp.dhis.dxf2.events.importer.insert.preprocess;\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+package org.hisp.dhis.dxf2.events.importer.insert.validation;\n \n+import static com.google.common.base.Preconditions.checkNotNull;\n import static org.hisp.dhis.importexport.ImportStrategy.CREATE;\n \n import java.util.List;\n import java.util.Map;\n import java.util.function.Predicate;\n \n-import org.hisp.dhis.dxf2.events.importer.AbstractProcessorFactory;\n+import lombok.Getter;\n+\n+import org.hisp.dhis.dxf2.events.importer.Checker;\n+import org.hisp.dhis.dxf2.events.importer.EventImporterValidationRunner;\n import org.hisp.dhis.dxf2.events.importer.ImportStrategyUtils;\n-import org.hisp.dhis.dxf2.events.importer.Processor;\n+import org.hisp.dhis.dxf2.events.importer.ValidatingEventChecker;\n import org.hisp.dhis.importexport.ImportStrategy;\n-import org.springframework.beans.factory.annotation.Qualifier;\n import org.springframework.stereotype.Component;\n \n-import lombok.Getter;\n-import lombok.NonNull;\n-import lombok.RequiredArgsConstructor;\n-\n /**\n  * @author Luciano Fiandesio\n  */\n-@Getter\n-@Component( \"eventsPreInsertProcessorFactory\" )\n-@RequiredArgsConstructor\n-public class PreInsertProcessorFactory extends AbstractProcessorFactory\n+@Component\n+public class InsertValidatingEventChecker extends ValidatingEventChecker\n {\n-\n-    @NonNull\n-    @Qualifier( \"eventInsertPreProcessorMap\" )\n-    private final Map<ImportStrategy, List<Class<? extends Processor>>> processorMap;\n-\n-    private final ImportStrategy importStrategy = CREATE;\n-\n-    private final Predicate<ImportStrategy> importStrategyPredicate = ImportStrategyUtils::isInsert;\n-\n+    @Getter\n+    private final Predicate<ImportStrategy> supportedPredicate = ImportStrategyUtils::isInsert;\n+\n+    public InsertValidatingEventChecker( final Map<ImportStrategy, List<Checker>> checkersByImportStrategy,\n+        EventImporterValidationRunner validationRunner )\n+    {\n+        super( checkNotNull(\n+            checkNotNull( checkersByImportStrategy ).get( CREATE ) ), validationRunner );\n+    }\n }\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "message": "Merge commit", "committedDate": null}, {"oid": "f8cfa7437ac99962a94ceef4b9150478899ceb2b", "committedDate": "2020-09-11 13:59:14 +0200", "message": "fix: audit for event importer are now present (#6138) (#6140)"}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "1e593837ab1c64884a8ac615c7cc8c3471a219ee", "committedDate": "2021-11-18 09:33:25 +0100", "message": "refactor: validators, checkers and processors in old importer are now spring beans [TECH-797] (#9218)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIyNDcwOQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448224709", "body": "Missing newline", "bodyText": "Missing newline", "bodyHTML": "<p dir=\"auto\">Missing newline</p>", "author": "netroms", "createdAt": "2020-07-01T09:06:30Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/CategoryOptionComboSupplierTest.java", "diffHunk": "@@ -0,0 +1,231 @@\n+package org.hisp.dhis.dxf2.events.importer.context;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import static java.util.Collections.singletonList;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.notNullValue;\n+import static org.junit.Assert.*;\n+import static org.mockito.ArgumentMatchers.anyList;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.hisp.dhis.category.CategoryCombo;\n+import org.hisp.dhis.category.CategoryOptionCombo;\n+import org.hisp.dhis.common.CodeGenerator;\n+import org.hisp.dhis.dxf2.common.ImportOptions;\n+import org.hisp.dhis.dxf2.events.event.Event;\n+import org.hisp.dhis.program.Program;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.Mock;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+public class CategoryOptionComboSupplierTest extends AbstractSupplierTest<CategoryOptionCombo>\n+{\n+    private CategoryOptionComboSupplier subject;\n+\n+    @Mock\n+    private ProgramSupplier programSupplier;\n+\n+    @Mock\n+    private AttributeOptionComboLoader attributeOptionComboLoader;\n+\n+    private Map<String, Program> programMap;\n+\n+    private Event event;\n+\n+    private Program program;\n+\n+    @Before\n+    public void setUp()\n+    {\n+        this.subject = new CategoryOptionComboSupplier( jdbcTemplate, programSupplier, attributeOptionComboLoader );\n+        programMap = new HashMap<>();\n+\n+        // create a Program for the ProgramSupplier\n+        program = new Program();\n+        program.setId( 999L );\n+        program.setUid( \"prabcde\" );\n+        programMap.put( \"prabcde\", program );\n+\n+        // create event to import\n+        event = new Event();\n+        event.setUid( CodeGenerator.generateUid() );\n+        event.setAttributeOptionCombo( \"aoc1234\" );\n+        event.setProgram( program.getUid() );\n+    }\n+\n+    @Test\n+    public void handleNullEvents()\n+    {\n+        assertNotNull( subject.get( ImportOptions.getDefaultImportOptions(), null ) );\n+    }\n+\n+    public void verifySupplier()\n+    {\n+        /*\n+         * Case 1: Event has 'attributeOptionCombo' value set\n+         */\n+        case1( ImportOptions.getDefaultImportOptions() );\n+\n+        /*\n+         * Case 2: Event has 'attributeOptionCombo' value set, but it's not found ->\n+         * fetch default coc\n+         */\n+        case2( ImportOptions.getDefaultImportOptions() );\n+\n+        /*\n+         * Case 3: Event has 'attributeCategoryOptions' value set\n+         */\n+        case3( ImportOptions.getDefaultImportOptions() );\n+\n+        /*\n+         * Case 4: Event has no 'attributeCategoryOptions' or 'attributeOptionCombo'\n+         * values set -> fetch default coc\n+         */\n+        case4( ImportOptions.getDefaultImportOptions() );\n+\n+        /*\n+         * Case 5: Event has both 'attributeCategoryOptions' and 'attributeOptionCombo'\n+         * values set attributeOptionCombo is used to fetch the coc\n+         */\n+        case5( ImportOptions.getDefaultImportOptions() );\n+    }\n+\n+    private void case1( ImportOptions importOptions )\n+    {\n+        when( programSupplier.get( eq( importOptions ), anyList() ) ).thenReturn( programMap );\n+\n+        CategoryOptionCombo coc = new CategoryOptionCombo();\n+        coc.setUid( event.getAttributeOptionCombo() );\n+        when( attributeOptionComboLoader.getCategoryOptionCombo(\n+            importOptions.getIdSchemes().getCategoryOptionComboIdScheme(), event.getAttributeOptionCombo() ) )\n+                .thenReturn( coc );\n+\n+        Map<String, CategoryOptionCombo> map = subject.get( importOptions, singletonList( event ) );\n+        CategoryOptionCombo categoryOptionCombo = map.get( event.getUid() );\n+        assertThat( categoryOptionCombo, is( notNullValue() ) );\n+\n+    }\n+\n+    private void case2( ImportOptions importOptions )\n+    {\n+        when( programSupplier.get( eq( importOptions ), anyList() ) ).thenReturn( programMap );\n+\n+        CategoryOptionCombo coc = new CategoryOptionCombo();\n+        coc.setUid( \"def123\" );\n+        coc.setName( \"default \" );\n+\n+        when( attributeOptionComboLoader.getCategoryOptionCombo(\n+            importOptions.getIdSchemes().getCategoryOptionComboIdScheme(), event.getAttributeOptionCombo() ) )\n+                .thenReturn( null );\n+\n+        when( attributeOptionComboLoader.getDefault() ).thenReturn( coc );\n+\n+        Map<String, CategoryOptionCombo> map = subject.get( importOptions, singletonList( event ) );\n+\n+        CategoryOptionCombo categoryOptionCombo = map.get( event.getUid() );\n+        assertThat( categoryOptionCombo, is( notNullValue() ) );\n+        assertThat( categoryOptionCombo.getName(), is( coc.getName() ) );\n+\n+    }\n+\n+    private void case3( ImportOptions importOptions )\n+    {\n+        when( programSupplier.get( eq( importOptions ), anyList() ) ).thenReturn( programMap );\n+\n+        CategoryCombo catCombo = new CategoryCombo();\n+        catCombo.setUid( CodeGenerator.generateUid() );\n+        program.setCategoryCombo( catCombo );\n+\n+        // create event to import\n+        Event event = new Event();\n+        event.setUid( CodeGenerator.generateUid() );\n+        event.setAttributeCategoryOptions( \"abcded;fghilm\" );\n+        event.setProgram( program.getUid() );\n+\n+        CategoryOptionCombo coc = new CategoryOptionCombo();\n+        coc.setUid( CodeGenerator.generateUid() );\n+        when( attributeOptionComboLoader.getAttributeOptionCombo( catCombo, event.getAttributeCategoryOptions(),\n+            event.getAttributeOptionCombo(), importOptions.getIdSchemes().getCategoryOptionComboIdScheme() ) )\n+                .thenReturn( coc );\n+\n+        Map<String, CategoryOptionCombo> map = subject.get( importOptions, singletonList( event ) );\n+        CategoryOptionCombo categoryOptionCombo = map.get( event.getUid() );\n+        assertThat( categoryOptionCombo, is( notNullValue() ) );\n+        assertThat( categoryOptionCombo.getUid(), is( coc.getUid() ) );\n+    }\n+\n+    private void case4( ImportOptions importOptions )\n+    {\n+        when( programSupplier.get( eq( importOptions ), anyList() ) ).thenReturn( programMap );\n+\n+        // create event to import\n+        Event event = new Event();\n+        event.setUid( CodeGenerator.generateUid() );\n+        event.setProgram( program.getUid() );\n+\n+        CategoryOptionCombo coc = new CategoryOptionCombo();\n+        coc.setUid( CodeGenerator.generateUid() );\n+        coc.setName( \"default \" );\n+\n+        when( attributeOptionComboLoader.getDefault() ).thenReturn( coc );\n+\n+        Map<String, CategoryOptionCombo> map = subject.get( importOptions, singletonList( event ) );\n+        CategoryOptionCombo categoryOptionCombo = map.get( event.getUid() );\n+        assertThat( categoryOptionCombo, is( notNullValue() ) );\n+        assertThat( categoryOptionCombo.getUid(), is( coc.getUid() ) );\n+    }\n+\n+    private void case5( ImportOptions importOptions )\n+    {\n+        when( programSupplier.get( eq( importOptions ), anyList() ) ).thenReturn( programMap );\n+\n+        event.setAttributeCategoryOptions( \"abcde;fghilm\" );\n+\n+        CategoryOptionCombo coc = new CategoryOptionCombo();\n+        coc.setUid( CodeGenerator.generateUid() );\n+\n+        when( attributeOptionComboLoader.getCategoryOptionCombo(\n+            importOptions.getIdSchemes().getCategoryOptionComboIdScheme(), event.getAttributeOptionCombo() ) )\n+                .thenReturn( coc );\n+\n+        Map<String, CategoryOptionCombo> map = subject.get( importOptions, singletonList( event ) );\n+\n+        CategoryOptionCombo categoryOptionCombo = map.get( event.getUid() );\n+        assertThat( categoryOptionCombo, is( notNullValue() ) );\n+        assertThat( categoryOptionCombo.getUid(), is( coc.getUid() ) );\n+    }\n+}", "originalCommit": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "c36e07157da81cfffc5be1be7da64832f72e0c9e", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/CategoryOptionComboSupplierTest.java b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/CategoryOptionComboSupplierTest.java\nindex 7c6d55f3d4..3ed924a966 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/CategoryOptionComboSupplierTest.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/CategoryOptionComboSupplierTest.java\n", "chunk": "@@ -228,4 +257,27 @@ public class CategoryOptionComboSupplierTest extends AbstractSupplierTest<Catego\n         assertThat( categoryOptionCombo, is( notNullValue() ) );\n         assertThat( categoryOptionCombo.getUid(), is( coc.getUid() ) );\n     }\n+\n+    private void case6( ImportOptions importOptions )\n+    {\n+        when( programSupplier.get( eq( importOptions ), anyList() ) ).thenReturn( programMap );\n+\n+        when( programStageInstanceSupplier.get( eq( importOptions ), anyList() ) )\n+            .thenReturn( programStageInstanceMap );\n+\n+        when( attributeOptionComboLoader.getCategoryOptionCombo(\n+            importOptions.getIdSchemes().getCategoryOptionComboIdScheme(),\n+            programStageInstance.getAttributeOptionCombo().getUid() ) )\n+                .thenReturn( coc );\n+\n+        Event eventWithoutAoc = new Event();\n+        eventWithoutAoc.setUid( \"psuid1\" );\n+        eventWithoutAoc.setProgram( program.getUid() );\n+\n+        Map<String, CategoryOptionCombo> map = subject.get( importOptions, singletonList( eventWithoutAoc ) );\n+\n+        CategoryOptionCombo categoryOptionCombo = map.get( eventWithoutAoc.getUid() );\n+        assertThat( categoryOptionCombo, is( notNullValue() ) );\n+        assertThat( categoryOptionCombo.getUid(), is( coc.getUid() ) );\n+    }\n }\n\\ No newline at end of file\n", "next_change": {"commit": "22d5da9d9a812b02eb5acd643112a6b050b5d63c", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/CategoryOptionComboSupplierTest.java b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/CategoryOptionComboSupplierTest.java\nindex 3ed924a966..79b0ba3ddf 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/CategoryOptionComboSupplierTest.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/CategoryOptionComboSupplierTest.java\n", "chunk": "@@ -261,23 +234,17 @@ public class CategoryOptionComboSupplierTest extends AbstractSupplierTest<Catego\n     private void case6( ImportOptions importOptions )\n     {\n         when( programSupplier.get( eq( importOptions ), anyList() ) ).thenReturn( programMap );\n-\n         when( programStageInstanceSupplier.get( eq( importOptions ), anyList() ) )\n             .thenReturn( programStageInstanceMap );\n-\n         when( attributeOptionComboLoader.getCategoryOptionCombo(\n             importOptions.getIdSchemes().getCategoryOptionComboIdScheme(),\n-            programStageInstance.getAttributeOptionCombo().getUid() ) )\n-                .thenReturn( coc );\n-\n+            programStageInstance.getAttributeOptionCombo().getUid() ) ).thenReturn( coc );\n         Event eventWithoutAoc = new Event();\n         eventWithoutAoc.setUid( \"psuid1\" );\n         eventWithoutAoc.setProgram( program.getUid() );\n-\n         Map<String, CategoryOptionCombo> map = subject.get( importOptions, singletonList( eventWithoutAoc ) );\n-\n         CategoryOptionCombo categoryOptionCombo = map.get( eventWithoutAoc.getUid() );\n         assertThat( categoryOptionCombo, is( notNullValue() ) );\n         assertThat( categoryOptionCombo.getUid(), is( coc.getUid() ) );\n     }\n-}\n\\ No newline at end of file\n+}\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "message": "Merge commit", "committedDate": null}, {"oid": "c9aa7729514346e42a6f1957d20bf1f1ad4641d0", "committedDate": "2020-10-28 11:27:13 +0100", "message": "chore: remove junit and hamcrest related warnings (#6504)"}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "c36e07157da81cfffc5be1be7da64832f72e0c9e", "committedDate": "2021-08-24 10:42:38 +0200", "message": "fix: Unable to update event data in program using category combo"}, {"oid": "22d5da9d9a812b02eb5acd643112a6b050b5d63c", "committedDate": "2021-12-16 13:19:38 +0100", "message": "chore: migrate tests to JUnit 5 (#9467)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "959c60d4f597187d0df2160fbbb675e5c4196e5c", "committedDate": "2023-04-27 16:46:18 +0200", "message": "chore: rename ProgramStageInstance to Event (#13731)"}, {"oid": "02336c9611c0dd85d5038223bddbfdebc0aae526", "committedDate": "2023-05-11 19:34:26 +0200", "message": "chore: move old tracker dxf2 code into deprecated package (#13901)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIyNjEwMA==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448226100", "body": "Missing newline", "bodyText": "Missing newline", "bodyHTML": "<p dir=\"auto\">Missing newline</p>", "author": "netroms", "createdAt": "2020-07-01T09:08:55Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/preprocess/EventGeometryPreProcessorTest.java", "diffHunk": "@@ -0,0 +1,81 @@\n+package org.hisp.dhis.dxf2.events.importer.insert.preprocess;\n+\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.Assert.assertThat;\n+\n+import java.io.IOException;\n+\n+import org.hisp.dhis.dxf2.events.event.Coordinate;\n+import org.hisp.dhis.dxf2.events.event.Event;\n+import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n+import org.hisp.dhis.system.util.GeoUtils;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+public class EventGeometryPreProcessorTest\n+{\n+    private EventGeometryPreProcessor subject;\n+\n+    @Before\n+    public void setUp()\n+    {\n+\n+        this.subject = new EventGeometryPreProcessor();\n+    }\n+\n+    @Test\n+    public void verifyEventGeometryGetCorrectSRID()\n+        throws IOException\n+    {\n+        Event event = new Event();\n+        event.setGeometry( GeoUtils.getGeoJsonPoint( 20.0, 30.0 ) );\n+        event.getGeometry().setSRID( 0 );\n+        subject.process( event, WorkContext.builder().build() );\n+\n+        assertThat( event.getGeometry().getSRID(), is( GeoUtils.SRID ) );\n+    }\n+\n+    @Test\n+    public void verifyEventWithCoordinateHasGeometrySet()\n+    {\n+        Event event = new Event();\n+        event.setCoordinate( new Coordinate( 20.0, 22.0 ) );\n+        subject.process( event, WorkContext.builder().build() );\n+\n+        assertThat( event.getGeometry().getSRID(), is( GeoUtils.SRID ) );\n+        assertThat( event.getGeometry().getCoordinate().x, is( 20.0 ) );\n+        assertThat( event.getGeometry().getCoordinate().y, is( 22.0 ) );\n+    }\n+\n+}", "originalCommit": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7032498b0cbac9437a93d7deeb72862937c55a98", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/preprocess/EventGeometryPreProcessorTest.java b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/preprocess/EventGeometryPreProcessorTest.java\nindex e443604e1d..6c2ac66656 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/preprocess/EventGeometryPreProcessorTest.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/preprocess/EventGeometryPreProcessorTest.java\n", "chunk": "@@ -77,5 +77,4 @@ public class EventGeometryPreProcessorTest\n         assertThat( event.getGeometry().getCoordinate().x, is( 20.0 ) );\n         assertThat( event.getGeometry().getCoordinate().y, is( 22.0 ) );\n     }\n-\n }\n\\ No newline at end of file\n", "next_change": {"commit": "d360652a896bee650a842567e26cd1e62145cccb", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/preprocess/EventGeometryPreProcessorTest.java b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/preprocess/EventGeometryPreProcessorTest.java\nindex 6c2ac66656..e443604e1d 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/preprocess/EventGeometryPreProcessorTest.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/preprocess/EventGeometryPreProcessorTest.java\n", "chunk": "@@ -77,4 +77,5 @@ public class EventGeometryPreProcessorTest\n         assertThat( event.getGeometry().getCoordinate().x, is( 20.0 ) );\n         assertThat( event.getGeometry().getCoordinate().y, is( 22.0 ) );\n     }\n+\n }\n\\ No newline at end of file\n", "next_change": {"commit": "c9cbe9cf8b22a49324c53b68eba31b9c63684df4", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/preprocess/EventGeometryPreProcessorTest.java b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/preprocess/EventGeometryPreProcessorTest.java\nindex e443604e1d..6c2ac66656 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/preprocess/EventGeometryPreProcessorTest.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/preprocess/EventGeometryPreProcessorTest.java\n", "chunk": "@@ -77,5 +77,4 @@ public class EventGeometryPreProcessorTest\n         assertThat( event.getGeometry().getCoordinate().x, is( 20.0 ) );\n         assertThat( event.getGeometry().getCoordinate().y, is( 22.0 ) );\n     }\n-\n }\n\\ No newline at end of file\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/preprocess/EventGeometryPreProcessorTest.java b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/preprocess/EventGeometryPreProcessorTest.java\nindex e443604e1d..5233a527bc 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/preprocess/EventGeometryPreProcessorTest.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/preprocess/EventGeometryPreProcessorTest.java\n", "chunk": "@@ -77,5 +76,4 @@ public class EventGeometryPreProcessorTest\n         assertThat( event.getGeometry().getCoordinate().x, is( 20.0 ) );\n         assertThat( event.getGeometry().getCoordinate().y, is( 22.0 ) );\n     }\n-\n }\n\\ No newline at end of file\n", "next_change": {"commit": "52b8f7c48def44670be7ba9d25d0ee963fe9441e", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/preprocess/EventGeometryPreProcessorTest.java b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/preprocess/EventGeometryPreProcessorTest.java\nindex 5233a527bc..72f6af18af 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/preprocess/EventGeometryPreProcessorTest.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/preprocess/EventGeometryPreProcessorTest.java\n", "chunk": "@@ -65,15 +64,4 @@ public class EventGeometryPreProcessorTest\n         assertThat( event.getGeometry().getSRID(), is( GeoUtils.SRID ) );\n     }\n \n-    @Test\n-    public void verifyEventWithCoordinateHasGeometrySet()\n-    {\n-        Event event = new Event();\n-        event.setCoordinate( new Coordinate( 20.0, 22.0 ) );\n-        subject.process( event, WorkContext.builder().build() );\n-\n-        assertThat( event.getGeometry().getSRID(), is( GeoUtils.SRID ) );\n-        assertThat( event.getGeometry().getCoordinate().x, is( 20.0 ) );\n-        assertThat( event.getGeometry().getCoordinate().y, is( 22.0 ) );\n-    }\n }\n\\ No newline at end of file\n", "next_change": {"commit": "22d5da9d9a812b02eb5acd643112a6b050b5d63c", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/preprocess/EventGeometryPreProcessorTest.java b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/preprocess/EventGeometryPreProcessorTest.java\nindex 72f6af18af..ec7b2beeff 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/preprocess/EventGeometryPreProcessorTest.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/preprocess/EventGeometryPreProcessorTest.java\n", "chunk": "@@ -38,30 +25,41 @@ import org.junit.Test;\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+package org.hisp.dhis.dxf2.events.importer.insert.preprocess;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+\n+import java.io.IOException;\n+\n+import org.hisp.dhis.dxf2.events.event.Event;\n+import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n+import org.hisp.dhis.system.util.GeoUtils;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n \n /**\n  * @author Luciano Fiandesio\n  */\n-public class EventGeometryPreProcessorTest\n+class EventGeometryPreProcessorTest\n {\n+\n     private EventGeometryPreProcessor subject;\n \n-    @Before\n-    public void setUp()\n+    @BeforeEach\n+    void setUp()\n     {\n         this.subject = new EventGeometryPreProcessor();\n     }\n \n     @Test\n-    public void verifyEventGeometryGetCorrectSRID()\n+    void verifyEventGeometryGetCorrectSRID()\n         throws IOException\n     {\n         Event event = new Event();\n         event.setGeometry( GeoUtils.getGeoJsonPoint( 20.0, 30.0 ) );\n         event.getGeometry().setSRID( 0 );\n         subject.process( event, WorkContext.builder().build() );\n-\n         assertThat( event.getGeometry().getSRID(), is( GeoUtils.SRID ) );\n     }\n-\n-}\n\\ No newline at end of file\n+}\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "message": "Merge commit", "committedDate": null}, {"oid": "52b8f7c48def44670be7ba9d25d0ee963fe9441e", "committedDate": "2020-09-24 09:19:03 +0200", "message": "fix: Coordinate class removed, drop support for old implementation (#6172)"}, {"oid": "c9aa7729514346e42a6f1957d20bf1f1ad4641d0", "committedDate": "2020-10-28 11:27:13 +0100", "message": "chore: remove junit and hamcrest related warnings (#6504)"}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "22d5da9d9a812b02eb5acd643112a6b050b5d63c", "committedDate": "2021-12-16 13:19:38 +0100", "message": "chore: migrate tests to JUnit 5 (#9467)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "02336c9611c0dd85d5038223bddbfdebc0aae526", "committedDate": "2023-05-11 19:34:26 +0200", "message": "chore: move old tracker dxf2 code into deprecated package (#13901)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIyODM5MQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448228391", "body": "Looks like there is missing content here", "bodyText": "Looks like there is missing content here", "bodyHTML": "<p dir=\"auto\">Looks like there is missing content here</p>", "author": "netroms", "createdAt": "2020-07-01T09:12:53Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/AbstractEventService.java", "diffHunk": "@@ -863,7 +462,8 @@ public Event getEvent( ProgramStageInstance programStageInstance )\n \n     @Transactional( readOnly = true )\n     @Override\n-    public Event getEvent( ProgramStageInstance programStageInstance, boolean isSynchronizationQuery, boolean skipOwnershipCheck )\n+    public Event getEvent( ProgramStageInstance programStageInstance, boolean isSynchronizationQuery,\n+        boolean skipOwnershipCheck )\n     {\n         if ( programStageInstance == null )", "originalCommit": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ0MjM2Ng==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448442366", "bodyText": "Not sure I understand this comment? Why didn't change this function", "author": "luciano-fiandesio", "createdAt": "2020-07-01T15:26:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIyODM5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODgyNTY2OQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448825669", "bodyText": "Ok, no need to fix", "author": "luciano-fiandesio", "createdAt": "2020-07-02T08:11:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIyODM5MQ=="}], "type": "inlineReview", "revised_code": {"commit": "d0687a6c7c9e1c4dd64c4dc669bb80ae6e8c8c8b", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/AbstractEventService.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/AbstractEventService.java\nindex 7715f7b153..46b2b5a0f4 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/AbstractEventService.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/AbstractEventService.java\n", "chunk": "@@ -463,7 +464,7 @@ public abstract class AbstractEventService implements EventService\n     @Transactional( readOnly = true )\n     @Override\n     public Event getEvent( ProgramStageInstance programStageInstance, boolean isSynchronizationQuery,\n-        boolean skipOwnershipCheck )\n+                           boolean skipOwnershipCheck )\n     {\n         if ( programStageInstance == null )\n         {\n", "next_change": null}]}, "revised_code_in_main": {"commit": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/AbstractEventService.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/AbstractEventService.java\nindex 7715f7b153..4c73dfa26e 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/AbstractEventService.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/AbstractEventService.java\n", "chunk": "@@ -463,7 +464,7 @@ public abstract class AbstractEventService implements EventService\n     @Transactional( readOnly = true )\n     @Override\n     public Event getEvent( ProgramStageInstance programStageInstance, boolean isSynchronizationQuery,\n-        boolean skipOwnershipCheck )\n+                           boolean skipOwnershipCheck )\n     {\n         if ( programStageInstance == null )\n         {\n", "next_change": {"commit": "ea76fa86409613c9766d4508d65c88ac55c413c3", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/AbstractEventService.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/AbstractEventService.java\nindex 4c73dfa26e..3d564b6826 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/AbstractEventService.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/AbstractEventService.java\n", "chunk": "@@ -464,7 +468,7 @@ public abstract class AbstractEventService implements EventService\n     @Transactional( readOnly = true )\n     @Override\n     public Event getEvent( ProgramStageInstance programStageInstance, boolean isSynchronizationQuery,\n-                           boolean skipOwnershipCheck )\n+        boolean skipOwnershipCheck )\n     {\n         if ( programStageInstance == null )\n         {\n", "next_change": {"commit": "afdc9c571c86ceae638bed422ffe1979704307ca", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/AbstractEventService.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/AbstractEventService.java\nindex 3d564b6826..59853caa1e 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/AbstractEventService.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/AbstractEventService.java\n", "chunk": "@@ -460,15 +568,15 @@ public abstract class AbstractEventService implements EventService\n \n     @Transactional( readOnly = true )\n     @Override\n-    public Event getEvent( ProgramStageInstance programStageInstance )\n+    public Event getEvent( ProgramStageInstance programStageInstance, boolean includeRelationships )\n     {\n-        return getEvent( programStageInstance, false, false );\n+        return getEvent( programStageInstance, false, false, includeRelationships );\n     }\n \n     @Transactional( readOnly = true )\n     @Override\n     public Event getEvent( ProgramStageInstance programStageInstance, boolean isSynchronizationQuery,\n-        boolean skipOwnershipCheck )\n+        boolean skipOwnershipCheck, boolean includeRelationships )\n     {\n         if ( programStageInstance == null )\n         {\n", "next_change": {"commit": "d56afd753e232874d55ce688c2514625370cf486", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/AbstractEventService.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/AbstractEventService.java\nindex 59853caa1e..d4d3eacc2a 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/AbstractEventService.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/AbstractEventService.java\n", "chunk": "@@ -568,15 +568,15 @@ public abstract class AbstractEventService implements EventService\n \n     @Transactional( readOnly = true )\n     @Override\n-    public Event getEvent( ProgramStageInstance programStageInstance, boolean includeRelationships )\n+    public Event getEvent( ProgramStageInstance programStageInstance, EventParams eventParams )\n     {\n-        return getEvent( programStageInstance, false, false, includeRelationships );\n+        return getEvent( programStageInstance, false, false, eventParams );\n     }\n \n     @Transactional( readOnly = true )\n     @Override\n     public Event getEvent( ProgramStageInstance programStageInstance, boolean isSynchronizationQuery,\n-        boolean skipOwnershipCheck, boolean includeRelationships )\n+        boolean skipOwnershipCheck, EventParams eventParams )\n     {\n         if ( programStageInstance == null )\n         {\n", "next_change": {"commit": "959c60d4f597187d0df2160fbbb675e5c4196e5c", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/AbstractEventService.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/AbstractEventService.java\nindex d4d3eacc2a..30612b139b 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/AbstractEventService.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/AbstractEventService.java\n", "chunk": "@@ -568,14 +561,15 @@ public abstract class AbstractEventService implements EventService\n \n     @Transactional( readOnly = true )\n     @Override\n-    public Event getEvent( ProgramStageInstance programStageInstance, EventParams eventParams )\n+    public org.hisp.dhis.dxf2.events.event.Event getEvent( org.hisp.dhis.program.Event event, EventParams eventParams )\n     {\n-        return getEvent( programStageInstance, false, false, eventParams );\n+        return getEvent( event, false, false, eventParams );\n     }\n \n     @Transactional( readOnly = true )\n     @Override\n-    public Event getEvent( ProgramStageInstance programStageInstance, boolean isSynchronizationQuery,\n+    public org.hisp.dhis.dxf2.events.event.Event getEvent( org.hisp.dhis.program.Event programStageInstance,\n+        boolean isSynchronizationQuery,\n         boolean skipOwnershipCheck, EventParams eventParams )\n     {\n         if ( programStageInstance == null )\n", "next_change": {"commit": "02336c9611c0dd85d5038223bddbfdebc0aae526", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/AbstractEventService.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/deprecated/tracker/event/AbstractEventService.java\nsimilarity index 85%\nrename from dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/AbstractEventService.java\nrename to dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/deprecated/tracker/event/AbstractEventService.java\nindex 30612b139b..cc0c8fce41 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/AbstractEventService.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/deprecated/tracker/event/AbstractEventService.java\n", "chunk": "@@ -561,14 +565,15 @@ public abstract class AbstractEventService implements EventService\n \n     @Transactional( readOnly = true )\n     @Override\n-    public org.hisp.dhis.dxf2.events.event.Event getEvent( org.hisp.dhis.program.Event event, EventParams eventParams )\n+    public org.hisp.dhis.dxf2.deprecated.tracker.event.Event getEvent( org.hisp.dhis.program.Event event,\n+        EventParams eventParams )\n     {\n         return getEvent( event, false, false, eventParams );\n     }\n \n     @Transactional( readOnly = true )\n     @Override\n-    public org.hisp.dhis.dxf2.events.event.Event getEvent( org.hisp.dhis.program.Event programStageInstance,\n+    public org.hisp.dhis.dxf2.deprecated.tracker.event.Event getEvent( org.hisp.dhis.program.Event programStageInstance,\n         boolean isSynchronizationQuery,\n         boolean skipOwnershipCheck, EventParams eventParams )\n     {\n", "next_change": null}, {"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/AbstractEventService.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/deprecated/tracker/event/AbstractEventService.java\nsimilarity index 85%\nrename from dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/AbstractEventService.java\nrename to dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/deprecated/tracker/event/AbstractEventService.java\nindex 30612b139b..cc0c8fce41 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/AbstractEventService.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/deprecated/tracker/event/AbstractEventService.java\n", "chunk": "@@ -577,17 +582,17 @@ public abstract class AbstractEventService implements EventService\n             return null;\n         }\n \n-        org.hisp.dhis.dxf2.events.event.Event event = new org.hisp.dhis.dxf2.events.event.Event();\n+        org.hisp.dhis.dxf2.deprecated.tracker.event.Event event = new org.hisp.dhis.dxf2.deprecated.tracker.event.Event();\n         event.setEvent( programStageInstance.getUid() );\n \n-        if ( programStageInstance.getProgramInstance().getEntityInstance() != null )\n+        if ( programStageInstance.getEnrollment().getTrackedEntity() != null )\n         {\n-            event.setTrackedEntityInstance( programStageInstance.getProgramInstance().getEntityInstance().getUid() );\n+            event.setTrackedEntityInstance( programStageInstance.getEnrollment().getTrackedEntity().getUid() );\n         }\n \n-        event.setFollowup( programStageInstance.getProgramInstance().getFollowup() );\n+        event.setFollowup( programStageInstance.getEnrollment().getFollowup() );\n         event.setEnrollmentStatus(\n-            EnrollmentStatus.fromProgramStatus( programStageInstance.getProgramInstance().getStatus() ) );\n+            EnrollmentStatus.fromProgramStatus( programStageInstance.getEnrollment().getStatus() ) );\n         event.setStatus( programStageInstance.getStatus() );\n         event.setEventDate( DateUtils.getIso8601NoTz( programStageInstance.getExecutionDate() ) );\n         event.setDueDate( DateUtils.getIso8601NoTz( programStageInstance.getDueDate() ) );\n", "next_change": null}]}}, {"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/AbstractEventService.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/AbstractEventService.java\nindex d4d3eacc2a..30612b139b 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/AbstractEventService.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/AbstractEventService.java\n", "chunk": "@@ -583,7 +577,7 @@ public abstract class AbstractEventService implements EventService\n             return null;\n         }\n \n-        Event event = new Event();\n+        org.hisp.dhis.dxf2.events.event.Event event = new org.hisp.dhis.dxf2.events.event.Event();\n         event.setEvent( programStageInstance.getUid() );\n \n         if ( programStageInstance.getProgramInstance().getEntityInstance() != null )\n", "next_change": {"commit": "41e75ba362e65a726c88564679a43aadcebbc60a", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/AbstractEventService.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/AbstractEventService.java\nindex 30612b139b..58ef6ac244 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/AbstractEventService.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/AbstractEventService.java\n", "chunk": "@@ -580,14 +580,14 @@ public abstract class AbstractEventService implements EventService\n         org.hisp.dhis.dxf2.events.event.Event event = new org.hisp.dhis.dxf2.events.event.Event();\n         event.setEvent( programStageInstance.getUid() );\n \n-        if ( programStageInstance.getProgramInstance().getEntityInstance() != null )\n+        if ( programStageInstance.getEnrollment().getEntityInstance() != null )\n         {\n-            event.setTrackedEntityInstance( programStageInstance.getProgramInstance().getEntityInstance().getUid() );\n+            event.setTrackedEntityInstance( programStageInstance.getEnrollment().getEntityInstance().getUid() );\n         }\n \n-        event.setFollowup( programStageInstance.getProgramInstance().getFollowup() );\n+        event.setFollowup( programStageInstance.getEnrollment().getFollowup() );\n         event.setEnrollmentStatus(\n-            EnrollmentStatus.fromProgramStatus( programStageInstance.getProgramInstance().getStatus() ) );\n+            EnrollmentStatus.fromProgramStatus( programStageInstance.getEnrollment().getStatus() ) );\n         event.setStatus( programStageInstance.getStatus() );\n         event.setEventDate( DateUtils.getIso8601NoTz( programStageInstance.getExecutionDate() ) );\n         event.setDueDate( DateUtils.getIso8601NoTz( programStageInstance.getDueDate() ) );\n", "next_change": null}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "message": "Merge commit", "committedDate": null}, {"oid": "52b8f7c48def44670be7ba9d25d0ee963fe9441e", "committedDate": "2020-09-24 09:19:03 +0200", "message": "fix: Coordinate class removed, drop support for old implementation (#6172)"}, {"oid": "13cd21d76507450be96b06e13823b24cf357be04", "committedDate": "2020-10-30 09:38:34 +0100", "message": "feat: DHIS2-8911 adding LastUpdatedBy and CreatedBy user informations in events (#6521)"}, {"oid": "d34f05e1348f3dff54ced7059283a96a7b699ea4", "committedDate": "2020-11-16 18:21:11 +0100", "message": "feat: DHIS2-9835 user info in comments and notes for Events and Enrollments (#6587)"}, {"oid": "0da875a0811106b4619c753dadeee71cb7cab747", "committedDate": "2020-12-17 09:29:54 +0100", "message": "fix: NPE when retrieving relationship with event (#6699)"}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "4f487b5b670d3c3e7a4db61237a9978ca2a772ed", "committedDate": "2021-01-19 11:20:33 +0100", "message": "fix: [DHIS2-10293] Fix program rules linked to tracked entity attributes (#7112)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "10b11c17ef2f2964263efc051f96c8e8f8f7e1f4", "committedDate": "2021-02-02 12:33:59 +0100", "message": "feat: change user property name to createdBy (#7061)"}, {"oid": "5c16843f3ecc869dbd0d93a175eb02d0b082de34", "committedDate": "2021-02-16 15:58:06 +0100", "message": "chore: create Caches in constructors [TECH-532] (#7370)"}, {"oid": "27bb970f7df4e3752635046a016a07f96250cca6", "committedDate": "2021-03-24 09:37:51 +0100", "message": "perf: reduce queries performed by eventRows (#7710)"}, {"oid": "98a55589ded753eb971dab83a84a28770decb84b", "committedDate": "2021-05-27 14:33:25 +0700", "message": "fix: LazyInitializationException in AbstractEventService caches (#8050)"}, {"oid": "4ce9356a5204abfffda295c7819a1e67e8698eeb", "committedDate": "2021-06-03 10:34:47 +0200", "message": "fix: Non-optimized TEI fetch for events access control [DHIS2-11264]"}, {"oid": "3b15198d78c8c7652457b9cd5968a8178c58d7fb", "committedDate": "2021-06-03 23:14:05 +0200", "message": "fix: Centralize logic and improve clarity of access check [DHIS2-11264] (#8124)"}, {"oid": "15a1ce87df3a6aecbb40ceca8c1aeb9ef9a35290", "committedDate": "2021-06-08 15:46:02 +0200", "message": "perf: Remove program lookup in event query loop [DHIS2-11264] (#8149)"}, {"oid": "6f3422ff9a182b183a9e3a2f61cf457bb23cb092", "committedDate": "2021-06-10 13:13:51 +0200", "message": "chore: encapsulates import conflicts [DHIS2-4414]  (#8164)"}, {"oid": "a7951a73ccbe3a956f0104f1732490f9adbb65fa", "committedDate": "2021-06-28 11:55:23 +0700", "message": "fix: LazyInitializationException when search for TEI [2.37] (#8292)"}, {"oid": "dce05a798f95c58ab536e7115937eabf4a48620e", "committedDate": "2021-09-21 13:25:04 +0200", "message": "fix: OrgUnit/ouMode required to fetch events (#8768)"}, {"oid": "c73683d7554f02a9dc6fd07304945579d55473f2", "committedDate": "2021-10-07 13:55:57 +0200", "message": "fix: Default orgunit scope (#8971)"}, {"oid": "238c6d4af316f1ad6f0bc35003ae07f6b5c6a1f9", "committedDate": "2021-10-08 13:29:28 +0200", "message": "fix: Set ouMode ACCESSIBLE as default [DHIS2-11755] (#9013)"}, {"oid": "20e8e0fb5c76984c676da3c70a179518ab0bed84", "committedDate": "2021-10-11 15:27:32 +0200", "message": "fix: OuMode validation in event query [DHIS2-11755] (#9032)"}, {"oid": "bbaa9c44c8c39205d27f8885d9db1e9e21377d3c", "committedDate": "2021-10-20 09:26:33 +0200", "message": "fix: Accessible ouMode per program protection level [2.38-DHIS2-11755] (#9075)"}, {"oid": "a3b4bea93eadc64069d8ee61e9b89fc7c10501c8", "committedDate": "2021-10-24 22:17:13 +0200", "message": "fix: Validation for OUMoude [DHIS2-11755] (#9114)"}, {"oid": "a8a45e9647c3933a4309e81aa1a5ea179637abb2", "committedDate": "2021-10-26 11:34:50 +0200", "message": "refactor: Change getOrFunction call in Cache [TECH-782] (#9124)"}, {"oid": "6f572a9ce997e4e66255f5a5ac2d3f141db1e8bd", "committedDate": "2021-10-26 21:13:46 +0200", "message": "chore: Remove most usages of commons-lang TECH-777 (#9104)"}, {"oid": "234a6d5a464e13aa187a6e4ff034d12e79820331", "committedDate": "2021-11-19 07:43:20 +0100", "message": "fix: OrgUnit validation in event query [DHIS2-11755] (#9138)"}, {"oid": "8a62c3e0240b711a75ca821921bae684b82fff5f", "committedDate": "2021-11-30 12:46:53 +0100", "message": "perf: Use ou.path for ouMode event queries (#9337)"}, {"oid": "cc35b66a078649936fc2bd7de77cfc2f718c1e32", "committedDate": "2021-12-07 16:40:31 +0100", "message": "fix: Apply TEI ownership in event query (#9367)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "93b61e49f94920cf3adfe3fd83ad8f0c060afbb1", "committedDate": "2022-02-14 09:59:56 +0100", "message": "fix: Request param totalPages=false for events/enrollments [DHIS2-12530] (#9719)"}, {"oid": "3dc56a0b0031c4517d719451f1246b16d1630bff", "committedDate": "2022-02-15 18:48:07 +0100", "message": "fix: NPE in page parsing [DHIS2-12530] (#9819)"}, {"oid": "10fc6cda1099a1a3fa45ab15d647772c1b39e080", "committedDate": "2022-02-17 14:55:33 +0100", "message": "fix: Missing totalPages flag in /events [DHIS2-12530] (#9835)"}, {"oid": "8ccf9a288a67e5ee5349024fd3d281372c64c956", "committedDate": "2022-02-22 13:25:35 +0800", "message": "feat: Merge User/UserCredentials into one DB table (#9754)"}, {"oid": "d117ff9ce355694569f7c6477141cf35c6412609", "committedDate": "2022-03-04 11:13:40 +0100", "message": "fix: Return complete information for user fields in NTI [DHIS2-12717] (#9936)"}, {"oid": "63846ea30b089db64192850ec134ff7f12f43e86", "committedDate": "2022-06-01 09:52:14 +0200", "message": "fix: Add back feature for invites where invitee chose username (#10902)"}, {"oid": "afdc9c571c86ceae638bed422ffe1979704307ca", "committedDate": "2022-07-05 11:58:57 +0200", "message": "fix: Performance: relationships endpoint is slow when there are many relationships [ DHIS2-11935 ] (#11104)"}, {"oid": "7ccec2accdbcf6dd2a696cdcfb86fb10654b66c5", "committedDate": "2022-07-28 11:47:20 +0200", "message": "fix: update lastUpdated field when event is deleted (#11315)"}, {"oid": "27b75665be58c25de309b5d71e7bd86200d740d6", "committedDate": "2022-12-01 11:37:48 +0100", "message": "chore: use AssignedUserQueryParam in EventSearchParams (#12446)"}, {"oid": "3f8ff27e788f1eadfff65bea5cd81e881172568a", "committedDate": "2022-12-14 08:32:01 +0100", "message": "fix: api/events.json ignores skipPaging parameter (#12544)"}, {"oid": "d56afd753e232874d55ce688c2514625370cf486", "committedDate": "2023-01-16 14:59:48 +0100", "message": "fix: Extends nested fields to Events in /trackedentities endpoint [ NTI ] [ DHIS2-14407 ] (#12717)"}, {"oid": "a1e0f681eeecd372e0191983eea9a618d5164650", "committedDate": "2023-01-20 13:10:34 +0100", "message": "fix: Flags paging and skipPaging for enrollments API [DHIS2-14476] (#12775)"}, {"oid": "43bd8664d854c226422c6b88b2c2bdf403fa240c", "committedDate": "2023-03-21 08:55:59 +0100", "message": "refactor: Simplify event orgunit sql query [TECH-1478] (#12897)"}, {"oid": "02a786b8807ff38031d991a942a4258c802dca1b", "committedDate": "2023-04-03 15:17:09 +0700", "message": "chore: remove uses of org.hibernate.Criteria (#13499)"}, {"oid": "959c60d4f597187d0df2160fbbb675e5c4196e5c", "committedDate": "2023-04-27 16:46:18 +0200", "message": "chore: rename ProgramStageInstance to Event (#13731)"}, {"oid": "b8f37219ad415b30f41b3532cfcbf97156bf15ba", "committedDate": "2023-04-28 09:54:31 +0200", "message": "chore: rename ProgramStageInstanceService to EventService (#13753)"}, {"oid": "41e75ba362e65a726c88564679a43aadcebbc60a", "committedDate": "2023-05-03 07:50:28 +0200", "message": "chore: rename Event.programInstance to Event.enrollment (#13774)"}, {"oid": "57b4c1e82e812037f95050426078e418d5468f3a", "committedDate": "2023-05-04 08:36:26 +0200", "message": "chore: Rename ProgramInstanceService to EnrollmentService [TECH-1547] (#13797)"}, {"oid": "240be973a3083b3e4b04ada02733f1908bb73512", "committedDate": "2023-05-08 08:39:16 +0000", "message": "chore: rename TrackedEntityInstance to TrackedEntity (#13827)"}, {"oid": "c040430012d64647a7d6374382b6f18d425ad314", "committedDate": "2023-05-08 14:22:12 +0200", "message": "chore: rename TrackedEntityInstanceService and Store TECH-1552 (#13841)"}, {"oid": "231f32506efd9bd2b74a3bf38d48f9066c4a5175", "committedDate": "2023-05-09 10:03:31 +0000", "message": "chore: remove Instance from get/has/addTrackedEntityInstance methods TECH-1552 (#13849)"}, {"oid": "2a70a184cb6236e81232dfc8c5ac5cb93b0f3c71", "committedDate": "2023-05-09 18:13:32 +0200", "message": "chore: remove instance from trackedEntityInstance vars and methods TECH-1552 (#13850)"}, {"oid": "02336c9611c0dd85d5038223bddbfdebc0aae526", "committedDate": "2023-05-11 19:34:26 +0200", "message": "chore: move old tracker dxf2 code into deprecated package (#13901)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIyODc0Ng==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448228746", "body": "Commented out code?", "bodyText": "Commented out code?", "bodyHTML": "<p dir=\"auto\">Commented out code?</p>", "author": "netroms", "createdAt": "2020-07-01T09:13:32Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/AbstractEventService.java", "diffHunk": "@@ -999,484 +598,71 @@ public Event getEvent( ProgramStageInstance programStageInstance, boolean isSync\n \n         event.setRelationships( programStageInstance.getRelationshipItems().stream()\n             .map( ( r ) -> relationshipService.getRelationship( r.getRelationship(), RelationshipParams.FALSE, user ) )\n-            .collect( Collectors.toSet() )\n-        );\n+            .collect( Collectors.toSet() ) );\n \n         return event;\n     }\n \n-    @Transactional( readOnly = true )\n+    // -------------------------------------------------------------------------\n+    // UPDATE\n+    // -------------------------------------------------------------------------\n+\n+    @Transactional\n     @Override\n-    public EventSearchParams getFromUrl( String program, String programStage, ProgramStatus programStatus,\n-        Boolean followUp, String orgUnit, OrganisationUnitSelectionMode orgUnitSelectionMode,\n-        String trackedEntityInstance, Date startDate, Date endDate, Date dueDateStart, Date dueDateEnd,\n-        Date lastUpdatedStartDate, Date lastUpdatedEndDate, String lastUpdatedDuration, EventStatus status,\n-        CategoryOptionCombo attributeOptionCombo, IdSchemes idSchemes, Integer page, Integer pageSize,\n-        boolean totalPages, boolean skipPaging, List<Order> orders, List<String> gridOrders, boolean includeAttributes,\n-        Set<String> events, Boolean skipEventId, AssignedUserSelectionMode assignedUserSelectionMode, Set<String> assignedUsers,\n-        Set<String> filters, Set<String> dataElements, boolean includeAllDataElements, boolean includeDeleted )\n+    public ImportSummaries updateEvents( List<Event> events, ImportOptions importOptions, boolean singleValue,\n+        boolean clearSession )\n     {\n-        User user = currentUserService.getCurrentUser();\n-        UserCredentials userCredentials = user.getUserCredentials();\n-\n-        EventSearchParams params = new EventSearchParams();\n-\n-        Program pr = programService.getProgram( program );\n-\n-        if ( !StringUtils.isEmpty( program ) && pr == null )\n-        {\n-            throw new IllegalQueryException( \"Program is specified but does not exist: \" + program );\n-        }\n-\n-        ProgramStage ps = programStageService.getProgramStage( programStage );\n+        ImportSummaries importSummaries = new ImportSummaries();\n+        importOptions = updateImportOptions( importOptions );\n+        List<List<Event>> partitions = Lists.partition( events, FLUSH_FREQUENCY );\n \n-        if ( !StringUtils.isEmpty( programStage ) && ps == null )\n+        for ( List<Event> _events : partitions )\n         {\n-            throw new IllegalQueryException( \"Program stage is specified but does not exist: \" + programStage );\n-        }\n-\n-        OrganisationUnit ou = organisationUnitService.getOrganisationUnit( orgUnit );\n+            reloadUser( importOptions );\n+            // prepareCaches( importOptions.getUser(), _events );\n \n-        if ( !StringUtils.isEmpty( orgUnit ) && ou == null )\n-        {\n-            throw new IllegalQueryException( \"Org unit is specified but does not exist: \" + orgUnit );\n-        }\n+            for ( Event event : _events )\n+            {\n+                importSummaries.addImportSummary( updateEvent( event, singleValue, importOptions, true ) );\n+            }\n \n-        if ( ou != null && !organisationUnitService.isInUserHierarchy( ou ) )\n-        {\n-            if ( !userCredentials.isSuper()\n-                && !userCredentials.isAuthorized( \"F_TRACKED_ENTITY_INSTANCE_SEARCH_IN_ALL_ORGUNITS\" ) )\n+            if ( clearSession && events.size() >= FLUSH_FREQUENCY )\n             {\n-                throw new IllegalQueryException( \"User has no access to organisation unit: \" + ou.getUid() );\n+                // clearSession( importOptions.getUser() );", "originalCommit": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ0Mzg5Nw==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448443897", "bodyText": "@maikelarabori can you look at this function - we can discuss it together, I don't remember why this was commented out", "author": "luciano-fiandesio", "createdAt": "2020-07-01T15:28:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIyODc0Ng=="}], "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "959c60d4f597187d0df2160fbbb675e5c4196e5c", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/AbstractEventService.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/AbstractEventService.java\nindex 7715f7b153..30612b139b 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/AbstractEventService.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/AbstractEventService.java\n", "chunk": "@@ -609,19 +705,20 @@ public abstract class AbstractEventService implements EventService\n \n     @Transactional\n     @Override\n-    public ImportSummaries updateEvents( List<Event> events, ImportOptions importOptions, boolean singleValue,\n+    public ImportSummaries updateEvents( List<org.hisp.dhis.dxf2.events.event.Event> events,\n+        ImportOptions importOptions, boolean singleValue,\n         boolean clearSession )\n     {\n         ImportSummaries importSummaries = new ImportSummaries();\n         importOptions = updateImportOptions( importOptions );\n-        List<List<Event>> partitions = Lists.partition( events, FLUSH_FREQUENCY );\n+        List<List<org.hisp.dhis.dxf2.events.event.Event>> partitions = Lists.partition( events, FLUSH_FREQUENCY );\n \n-        for ( List<Event> _events : partitions )\n+        for ( List<org.hisp.dhis.dxf2.events.event.Event> _events : partitions )\n         {\n             reloadUser( importOptions );\n             // prepareCaches( importOptions.getUser(), _events );\n \n-            for ( Event event : _events )\n+            for ( org.hisp.dhis.dxf2.events.event.Event event : _events )\n             {\n                 importSummaries.addImportSummary( updateEvent( event, singleValue, importOptions, true ) );\n             }\n", "next_change": {"commit": "02336c9611c0dd85d5038223bddbfdebc0aae526", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/AbstractEventService.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/deprecated/tracker/event/AbstractEventService.java\nsimilarity index 85%\nrename from dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/AbstractEventService.java\nrename to dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/deprecated/tracker/event/AbstractEventService.java\nindex 30612b139b..cc0c8fce41 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/AbstractEventService.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/deprecated/tracker/event/AbstractEventService.java\n", "chunk": "@@ -705,20 +710,21 @@ public abstract class AbstractEventService implements EventService\n \n     @Transactional\n     @Override\n-    public ImportSummaries updateEvents( List<org.hisp.dhis.dxf2.events.event.Event> events,\n+    public ImportSummaries updateEvents( List<org.hisp.dhis.dxf2.deprecated.tracker.event.Event> events,\n         ImportOptions importOptions, boolean singleValue,\n         boolean clearSession )\n     {\n         ImportSummaries importSummaries = new ImportSummaries();\n         importOptions = updateImportOptions( importOptions );\n-        List<List<org.hisp.dhis.dxf2.events.event.Event>> partitions = Lists.partition( events, FLUSH_FREQUENCY );\n+        List<List<org.hisp.dhis.dxf2.deprecated.tracker.event.Event>> partitions = Lists.partition( events,\n+            FLUSH_FREQUENCY );\n \n-        for ( List<org.hisp.dhis.dxf2.events.event.Event> _events : partitions )\n+        for ( List<org.hisp.dhis.dxf2.deprecated.tracker.event.Event> _events : partitions )\n         {\n             reloadUser( importOptions );\n             // prepareCaches( importOptions.getUser(), _events );\n \n-            for ( org.hisp.dhis.dxf2.events.event.Event event : _events )\n+            for ( org.hisp.dhis.dxf2.deprecated.tracker.event.Event event : _events )\n             {\n                 importSummaries.addImportSummary( updateEvent( event, singleValue, importOptions, true ) );\n             }\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "message": "Merge commit", "committedDate": null}, {"oid": "52b8f7c48def44670be7ba9d25d0ee963fe9441e", "committedDate": "2020-09-24 09:19:03 +0200", "message": "fix: Coordinate class removed, drop support for old implementation (#6172)"}, {"oid": "13cd21d76507450be96b06e13823b24cf357be04", "committedDate": "2020-10-30 09:38:34 +0100", "message": "feat: DHIS2-8911 adding LastUpdatedBy and CreatedBy user informations in events (#6521)"}, {"oid": "d34f05e1348f3dff54ced7059283a96a7b699ea4", "committedDate": "2020-11-16 18:21:11 +0100", "message": "feat: DHIS2-9835 user info in comments and notes for Events and Enrollments (#6587)"}, {"oid": "0da875a0811106b4619c753dadeee71cb7cab747", "committedDate": "2020-12-17 09:29:54 +0100", "message": "fix: NPE when retrieving relationship with event (#6699)"}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "4f487b5b670d3c3e7a4db61237a9978ca2a772ed", "committedDate": "2021-01-19 11:20:33 +0100", "message": "fix: [DHIS2-10293] Fix program rules linked to tracked entity attributes (#7112)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "10b11c17ef2f2964263efc051f96c8e8f8f7e1f4", "committedDate": "2021-02-02 12:33:59 +0100", "message": "feat: change user property name to createdBy (#7061)"}, {"oid": "5c16843f3ecc869dbd0d93a175eb02d0b082de34", "committedDate": "2021-02-16 15:58:06 +0100", "message": "chore: create Caches in constructors [TECH-532] (#7370)"}, {"oid": "27bb970f7df4e3752635046a016a07f96250cca6", "committedDate": "2021-03-24 09:37:51 +0100", "message": "perf: reduce queries performed by eventRows (#7710)"}, {"oid": "98a55589ded753eb971dab83a84a28770decb84b", "committedDate": "2021-05-27 14:33:25 +0700", "message": "fix: LazyInitializationException in AbstractEventService caches (#8050)"}, {"oid": "4ce9356a5204abfffda295c7819a1e67e8698eeb", "committedDate": "2021-06-03 10:34:47 +0200", "message": "fix: Non-optimized TEI fetch for events access control [DHIS2-11264]"}, {"oid": "3b15198d78c8c7652457b9cd5968a8178c58d7fb", "committedDate": "2021-06-03 23:14:05 +0200", "message": "fix: Centralize logic and improve clarity of access check [DHIS2-11264] (#8124)"}, {"oid": "15a1ce87df3a6aecbb40ceca8c1aeb9ef9a35290", "committedDate": "2021-06-08 15:46:02 +0200", "message": "perf: Remove program lookup in event query loop [DHIS2-11264] (#8149)"}, {"oid": "6f3422ff9a182b183a9e3a2f61cf457bb23cb092", "committedDate": "2021-06-10 13:13:51 +0200", "message": "chore: encapsulates import conflicts [DHIS2-4414]  (#8164)"}, {"oid": "a7951a73ccbe3a956f0104f1732490f9adbb65fa", "committedDate": "2021-06-28 11:55:23 +0700", "message": "fix: LazyInitializationException when search for TEI [2.37] (#8292)"}, {"oid": "dce05a798f95c58ab536e7115937eabf4a48620e", "committedDate": "2021-09-21 13:25:04 +0200", "message": "fix: OrgUnit/ouMode required to fetch events (#8768)"}, {"oid": "c73683d7554f02a9dc6fd07304945579d55473f2", "committedDate": "2021-10-07 13:55:57 +0200", "message": "fix: Default orgunit scope (#8971)"}, {"oid": "238c6d4af316f1ad6f0bc35003ae07f6b5c6a1f9", "committedDate": "2021-10-08 13:29:28 +0200", "message": "fix: Set ouMode ACCESSIBLE as default [DHIS2-11755] (#9013)"}, {"oid": "20e8e0fb5c76984c676da3c70a179518ab0bed84", "committedDate": "2021-10-11 15:27:32 +0200", "message": "fix: OuMode validation in event query [DHIS2-11755] (#9032)"}, {"oid": "bbaa9c44c8c39205d27f8885d9db1e9e21377d3c", "committedDate": "2021-10-20 09:26:33 +0200", "message": "fix: Accessible ouMode per program protection level [2.38-DHIS2-11755] (#9075)"}, {"oid": "a3b4bea93eadc64069d8ee61e9b89fc7c10501c8", "committedDate": "2021-10-24 22:17:13 +0200", "message": "fix: Validation for OUMoude [DHIS2-11755] (#9114)"}, {"oid": "a8a45e9647c3933a4309e81aa1a5ea179637abb2", "committedDate": "2021-10-26 11:34:50 +0200", "message": "refactor: Change getOrFunction call in Cache [TECH-782] (#9124)"}, {"oid": "6f572a9ce997e4e66255f5a5ac2d3f141db1e8bd", "committedDate": "2021-10-26 21:13:46 +0200", "message": "chore: Remove most usages of commons-lang TECH-777 (#9104)"}, {"oid": "234a6d5a464e13aa187a6e4ff034d12e79820331", "committedDate": "2021-11-19 07:43:20 +0100", "message": "fix: OrgUnit validation in event query [DHIS2-11755] (#9138)"}, {"oid": "8a62c3e0240b711a75ca821921bae684b82fff5f", "committedDate": "2021-11-30 12:46:53 +0100", "message": "perf: Use ou.path for ouMode event queries (#9337)"}, {"oid": "cc35b66a078649936fc2bd7de77cfc2f718c1e32", "committedDate": "2021-12-07 16:40:31 +0100", "message": "fix: Apply TEI ownership in event query (#9367)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "93b61e49f94920cf3adfe3fd83ad8f0c060afbb1", "committedDate": "2022-02-14 09:59:56 +0100", "message": "fix: Request param totalPages=false for events/enrollments [DHIS2-12530] (#9719)"}, {"oid": "3dc56a0b0031c4517d719451f1246b16d1630bff", "committedDate": "2022-02-15 18:48:07 +0100", "message": "fix: NPE in page parsing [DHIS2-12530] (#9819)"}, {"oid": "10fc6cda1099a1a3fa45ab15d647772c1b39e080", "committedDate": "2022-02-17 14:55:33 +0100", "message": "fix: Missing totalPages flag in /events [DHIS2-12530] (#9835)"}, {"oid": "8ccf9a288a67e5ee5349024fd3d281372c64c956", "committedDate": "2022-02-22 13:25:35 +0800", "message": "feat: Merge User/UserCredentials into one DB table (#9754)"}, {"oid": "d117ff9ce355694569f7c6477141cf35c6412609", "committedDate": "2022-03-04 11:13:40 +0100", "message": "fix: Return complete information for user fields in NTI [DHIS2-12717] (#9936)"}, {"oid": "63846ea30b089db64192850ec134ff7f12f43e86", "committedDate": "2022-06-01 09:52:14 +0200", "message": "fix: Add back feature for invites where invitee chose username (#10902)"}, {"oid": "afdc9c571c86ceae638bed422ffe1979704307ca", "committedDate": "2022-07-05 11:58:57 +0200", "message": "fix: Performance: relationships endpoint is slow when there are many relationships [ DHIS2-11935 ] (#11104)"}, {"oid": "7ccec2accdbcf6dd2a696cdcfb86fb10654b66c5", "committedDate": "2022-07-28 11:47:20 +0200", "message": "fix: update lastUpdated field when event is deleted (#11315)"}, {"oid": "27b75665be58c25de309b5d71e7bd86200d740d6", "committedDate": "2022-12-01 11:37:48 +0100", "message": "chore: use AssignedUserQueryParam in EventSearchParams (#12446)"}, {"oid": "3f8ff27e788f1eadfff65bea5cd81e881172568a", "committedDate": "2022-12-14 08:32:01 +0100", "message": "fix: api/events.json ignores skipPaging parameter (#12544)"}, {"oid": "d56afd753e232874d55ce688c2514625370cf486", "committedDate": "2023-01-16 14:59:48 +0100", "message": "fix: Extends nested fields to Events in /trackedentities endpoint [ NTI ] [ DHIS2-14407 ] (#12717)"}, {"oid": "a1e0f681eeecd372e0191983eea9a618d5164650", "committedDate": "2023-01-20 13:10:34 +0100", "message": "fix: Flags paging and skipPaging for enrollments API [DHIS2-14476] (#12775)"}, {"oid": "43bd8664d854c226422c6b88b2c2bdf403fa240c", "committedDate": "2023-03-21 08:55:59 +0100", "message": "refactor: Simplify event orgunit sql query [TECH-1478] (#12897)"}, {"oid": "02a786b8807ff38031d991a942a4258c802dca1b", "committedDate": "2023-04-03 15:17:09 +0700", "message": "chore: remove uses of org.hibernate.Criteria (#13499)"}, {"oid": "959c60d4f597187d0df2160fbbb675e5c4196e5c", "committedDate": "2023-04-27 16:46:18 +0200", "message": "chore: rename ProgramStageInstance to Event (#13731)"}, {"oid": "b8f37219ad415b30f41b3532cfcbf97156bf15ba", "committedDate": "2023-04-28 09:54:31 +0200", "message": "chore: rename ProgramStageInstanceService to EventService (#13753)"}, {"oid": "41e75ba362e65a726c88564679a43aadcebbc60a", "committedDate": "2023-05-03 07:50:28 +0200", "message": "chore: rename Event.programInstance to Event.enrollment (#13774)"}, {"oid": "57b4c1e82e812037f95050426078e418d5468f3a", "committedDate": "2023-05-04 08:36:26 +0200", "message": "chore: Rename ProgramInstanceService to EnrollmentService [TECH-1547] (#13797)"}, {"oid": "240be973a3083b3e4b04ada02733f1908bb73512", "committedDate": "2023-05-08 08:39:16 +0000", "message": "chore: rename TrackedEntityInstance to TrackedEntity (#13827)"}, {"oid": "c040430012d64647a7d6374382b6f18d425ad314", "committedDate": "2023-05-08 14:22:12 +0200", "message": "chore: rename TrackedEntityInstanceService and Store TECH-1552 (#13841)"}, {"oid": "231f32506efd9bd2b74a3bf38d48f9066c4a5175", "committedDate": "2023-05-09 10:03:31 +0000", "message": "chore: remove Instance from get/has/addTrackedEntityInstance methods TECH-1552 (#13849)"}, {"oid": "2a70a184cb6236e81232dfc8c5ac5cb93b0f3c71", "committedDate": "2023-05-09 18:13:32 +0200", "message": "chore: remove instance from trackedEntityInstance vars and methods TECH-1552 (#13850)"}, {"oid": "02336c9611c0dd85d5038223bddbfdebc0aae526", "committedDate": "2023-05-11 19:34:26 +0200", "message": "chore: move old tracker dxf2 code into deprecated package (#13901)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIyOTA4Mg==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448229082", "body": "Commented out?", "bodyText": "Commented out?", "bodyHTML": "<p dir=\"auto\">Commented out?</p>", "author": "netroms", "createdAt": "2020-07-01T09:14:11Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/AbstractEventService.java", "diffHunk": "@@ -1556,607 +743,141 @@ public ImportSummary deleteEvent( String uid )\n         {\n             ProgramStageInstance programStageInstance = programStageInstanceService.getProgramStageInstance( uid );\n \n-            List<String> errors = trackerAccessManager.canDelete( currentUserService.getCurrentUser(), programStageInstance, false );\n+            List<String> errors = trackerAccessManager.canDelete( currentUserService.getCurrentUser(),\n+                programStageInstance, false );\n \n             if ( !errors.isEmpty() )\n             {\n                 return new ImportSummary( ImportStatus.ERROR, errors.toString() ).incrementIgnored();\n             }\n \n-            programStageInstanceService.deleteProgramStageInstance( programStageInstance );\n-\n-            if ( programStageInstance.getProgramStage().getProgram().isRegistration() )\n-            {\n-                entityInstanceService.updateTrackedEntityInstance( programStageInstance.getProgramInstance().getEntityInstance() );\n-            }\n-\n-            ImportSummary importSummary = new ImportSummary( ImportStatus.SUCCESS, \"Deletion of event \" + uid + \" was successful\" ).incrementDeleted();\n-            importSummary.setReference( uid );\n-            return importSummary;\n-        }\n-        else\n-        {\n-            return new ImportSummary( ImportStatus.SUCCESS, \"Event \" + uid + \" cannot be deleted as it is not present in the system\" ).incrementIgnored();\n-        }\n-    }\n-\n-    @Transactional\n-    @Override\n-    public ImportSummaries deleteEvents( List<String> uids, boolean clearSession )\n-    {\n-        User user = currentUserService.getCurrentUser();\n-        ImportSummaries importSummaries = new ImportSummaries();\n-        int counter = 0;\n-\n-        for ( String uid : uids )\n-        {\n-            importSummaries.addImportSummary( deleteEvent( uid ) );\n-\n-            if ( clearSession && counter % FLUSH_FREQUENCY == 0 )\n-            {\n-                clearSession( user );\n-            }\n-\n-            counter++;\n-        }\n-\n-        return importSummaries;\n-    }\n-\n-    // -------------------------------------------------------------------------\n-    // HELPERS\n-    // -------------------------------------------------------------------------\n-\n-    @SuppressWarnings( \"unchecked\" )\n-    private void prepareCaches( User user, List<Event> events )\n-    {\n-        // prepare caches\n-        Collection<String> orgUnits = events.stream().map( Event::getOrgUnit ).collect( Collectors.toSet() );\n-        Collection<String> programIds = events.stream().map( Event::getProgram ).collect( Collectors.toSet() );\n-        Collection<String> eventIds = events.stream().map( Event::getEvent ).collect( Collectors.toList() );\n-        Collection<String> userIds = events.stream().map( Event::getAssignedUser ).collect( Collectors.toSet() );\n-\n-        if ( !orgUnits.isEmpty() )\n-        {\n-            Query query = Query.from( schemaService.getDynamicSchema( OrganisationUnit.class ) );\n-            query.setUser( user );\n-            query.add( Restrictions.in( \"id\", orgUnits ) );\n-            queryService.query( query ).forEach( ou -> organisationUnitCache.put( ou.getUid(), (OrganisationUnit) ou ) );\n-        }\n-\n-        if ( !programIds.isEmpty() )\n-        {\n-            Query query = Query.from( schemaService.getDynamicSchema( Program.class ) );\n-            query.setUser( user );\n-            query.add( Restrictions.in( \"id\", programIds ) );\n-\n-            List<Program> programs = (List<Program>) queryService.query( query );\n-\n-            if ( !programs.isEmpty() )\n-            {\n-                for ( Program program : programs )\n-                {\n-                    programCache.put( program.getUid(), program );\n-                    programStageCache.putAll( program.getProgramStages().stream().collect( Collectors.toMap( ProgramStage::getUid, ps -> ps ) ) );\n-\n-                    for ( ProgramStage programStage : program.getProgramStages() )\n-                    {\n-                        for ( DataElement dataElement : programStage.getDataElements() )\n-                        {\n-                            DATA_ELEM_CACHE.put( dataElement.getUid(), dataElement );\n-                        }\n-                    }\n-                }\n-            }\n-        }\n-\n-        if ( !eventIds.isEmpty() )\n-        {\n-            eventSyncService.getEvents( (List<String>) eventIds ).forEach( psi -> programStageInstanceCache.put( psi.getUid(), psi ) );\n-\n-            manager.getObjects( TrackedEntityInstance.class, IdentifiableProperty.UID,\n-                events.stream()\n-                    .filter( event -> event.getTrackedEntityInstance() != null )\n-                    .map( Event::getTrackedEntityInstance ).collect( Collectors.toSet() ) )\n-                .forEach( tei -> trackedEntityInstanceCache.put( tei.getUid(), tei ) );\n-\n-            manager.getObjects( ProgramInstance.class, IdentifiableProperty.UID,\n-                events.stream()\n-                    .filter( event -> event.getEnrollment() != null )\n-                    .map( Event::getEnrollment ).collect( Collectors.toSet() ) )\n-                .forEach( tei -> programInstanceCache.put( tei.getUid(), tei ) );\n-        }\n-\n-        if ( !userIds.isEmpty() )\n-        {\n-            Query query = Query.from( schemaService.getDynamicSchema( User.class ) );\n-            query.setUser( user );\n-            query.add( Restrictions.in( \"id\", userIds ) );\n-            queryService.query( query ).forEach( assignedUser -> userCache.put( assignedUser.getUid(), (User) assignedUser ) );\n-        }\n-    }\n-\n-    private List<OrganisationUnit> getOrganisationUnits( EventSearchParams params )\n-    {\n-        List<OrganisationUnit> organisationUnits = new ArrayList<>();\n-\n-        OrganisationUnit orgUnit = params.getOrgUnit();\n-        OrganisationUnitSelectionMode orgUnitSelectionMode = params.getOrgUnitSelectionMode();\n-\n-        if ( params.getOrgUnit() != null )\n-        {\n-            if ( OrganisationUnitSelectionMode.DESCENDANTS.equals( orgUnitSelectionMode ) )\n-            {\n-                organisationUnits.addAll( organisationUnitService.getOrganisationUnitWithChildren( orgUnit.getUid() ) );\n-            }\n-            else if ( OrganisationUnitSelectionMode.CHILDREN.equals( orgUnitSelectionMode ) )\n-            {\n-                organisationUnits.add( orgUnit );\n-                organisationUnits.addAll( orgUnit.getChildren() );\n-            }\n-            else // SELECTED\n-            {\n-                organisationUnits.add( orgUnit );\n-            }\n-        }\n-\n-        return organisationUnits;\n-    }\n-\n-    private ImportSummary saveEvent( Program program, ProgramInstance programInstance, ProgramStage programStage,\n-        ProgramStageInstance programStageInstance, OrganisationUnit organisationUnit, Event event, User assignedUser,\n-        ImportOptions importOptions, boolean bulkSave )\n-    {\n-        Assert.notNull( program, \"Program cannot be null\" );\n-        Assert.notNull( programInstance, \"Program instance cannot be null\" );\n-        Assert.notNull( programStage, \"Program stage cannot be null\" );\n-\n-        ImportSummary importSummary = new ImportSummary( event.getEvent() );\n-        importOptions = updateImportOptions( importOptions );\n-\n-        boolean dryRun = importOptions.isDryRun();\n-\n-        List<String> errors = validateEvent( event, programInstance, importOptions );\n-\n-        if ( !errors.isEmpty() )\n-        {\n-            importSummary.setStatus( ImportStatus.ERROR );\n-            importSummary.getConflicts().addAll( errors.stream().map( s -> new ImportConflict( \"Event\", s ) ).collect( Collectors.toList() ) );\n-            importSummary.incrementIgnored();\n-\n-            return importSummary;\n-        }\n-\n-        Date executionDate = null;\n-\n-        if ( event.getEventDate() != null )\n-        {\n-            executionDate = DateUtils.parseDate( event.getEventDate() );\n-        }\n-\n-        Date dueDate = new Date();\n-\n-        if ( event.getDueDate() != null )\n-        {\n-            dueDate = DateUtils.parseDate( event.getDueDate() );\n-        }\n-\n-        User user = importOptions.getUser();\n-\n-        String storedBy = getValidUsername( event.getStoredBy(), importSummary, User.username( user, Constants.UNKNOWN ) );\n-        String completedBy = getValidUsername( event.getCompletedBy(), importSummary, User.username( user, Constants.UNKNOWN ) );\n-\n-        CategoryOptionCombo aoc;\n-\n-        if ( (event.getAttributeCategoryOptions() != null && program.getCategoryCombo() != null)\n-            || event.getAttributeOptionCombo() != null )\n-        {\n-            IdScheme idScheme = importOptions.getIdSchemes().getCategoryOptionIdScheme();\n-\n-            try\n-            {\n-                aoc = getAttributeOptionCombo( program.getCategoryCombo(), event.getAttributeCategoryOptions(),\n-                    event.getAttributeOptionCombo(), idScheme );\n-            }\n-            catch ( IllegalQueryException ex )\n-            {\n-                importSummary.getConflicts().add( new ImportConflict( ex.getMessage(), event.getAttributeCategoryOptions() ) );\n-                importSummary.setStatus( ImportStatus.ERROR );\n-                return importSummary.incrementIgnored();\n-            }\n-        }\n-        else\n-        {\n-            aoc = (CategoryOptionCombo) getDefaultObject( CategoryOptionCombo.class );\n-        }\n-\n-        if ( aoc != null && aoc.isDefault() && program.getCategoryCombo() != null && !program.getCategoryCombo().isDefault() )\n-        {\n-            importSummary.getConflicts().add( new ImportConflict( \"attributeOptionCombo\", \"Default attribute option combo is not allowed since program has non-default category combo\" ) );\n-            importSummary.setStatus( ImportStatus.ERROR );\n-            return importSummary.incrementIgnored();\n-        }\n-\n-        Date eventDate = executionDate != null ? executionDate : dueDate;\n-\n-        validateAttributeOptionComboDate( aoc, eventDate );\n-\n-        errors = trackerAccessManager.canWrite( user, aoc );\n-\n-        if ( !errors.isEmpty() )\n-        {\n-            importSummary.setStatus( ImportStatus.ERROR );\n-            importSummary.getConflicts().addAll( errors.stream().map( s -> new ImportConflict( \"CategoryOptionCombo\", s ) ).collect( Collectors.toList() ) );\n-            importSummary.incrementIgnored();\n-\n-            return importSummary;\n-        }\n-\n-        if ( !dryRun )\n-        {\n-            if ( programStageInstance == null )\n-            {\n-                programStageInstance = createProgramStageInstance( event, programStage, programInstance,\n-                    organisationUnit, dueDate, executionDate, event.getStatus().getValue(),\n-                    completedBy, storedBy, event.getEvent(), aoc, assignedUser, importOptions, importSummary );\n-\n-                if ( program.isRegistration() )\n-                {\n-                    programInstance.getProgramStageInstances().add( programStageInstance );\n-                }\n-            }\n-            else\n-            {\n-                updateProgramStageInstance( event, programStage, programInstance, organisationUnit, dueDate,\n-                    executionDate, event.getStatus().getValue(), completedBy, storedBy,\n-                    programStageInstance, aoc, assignedUser, importOptions, importSummary );\n-            }\n-\n-            if ( !importOptions.isSkipLastUpdated() )\n-            {\n-                updateTrackedEntityInstance( programStageInstance, user, bulkSave );\n-            }\n-\n-            importSummary.setReference( programStageInstance.getUid() );\n-        }\n-\n-        if ( dryRun && programStageInstance == null )\n-        {\n-\n-            log.error( \"The request is a dry run and at the same time the programStageInstance is null. This will lead to NullPointerException. Stopping it now.\" );\n-            importSummary.setStatus( ImportStatus.ERROR );\n-            importSummary.setDescription( \"The request is a dryRun. However, the provided event does not point to a valid event: \" + event.getEvent() + \". Cannot continue.\" );\n-\n-            return importSummary.setReference( event.getEvent() ).incrementIgnored();\n-        }\n-\n-        programInstanceCache.put( programInstance.getUid(), programInstance );\n-        sendProgramNotification( programStageInstance, importOptions );\n-\n-        if ( importSummary.getConflicts().size() > 0 )\n-        {\n-            importSummary.setStatus( ImportStatus.ERROR );\n-            importSummary.incrementIgnored();\n-        }\n-        else\n-        {\n-            importSummary.setStatus( ImportStatus.SUCCESS );\n-            importSummary.incrementImported();\n-        }\n-\n-        return importSummary;\n-    }\n-\n-    private void sendProgramNotification( ProgramStageInstance programStageInstance, ImportOptions importOptions )\n-    {\n-        if ( !importOptions.isSkipNotifications() )\n-        {\n-            if ( programStageInstance.isCompleted() )\n-            {\n-                eventPublisher.publishEvent( new ProgramStageCompletionNotificationEvent( this, programStageInstance.getId() ) );\n-                eventPublisher.publishEvent( new StageCompletionEvaluationEvent( this, programStageInstance.getId() ) );\n-            }\n-\n-            if ( EventStatus.SCHEDULE.equals( programStageInstance.getStatus() ) )\n-            {\n-                eventPublisher.publishEvent( new StageScheduledEvaluationEvent( this, programStageInstance.getId() ) );\n-            }\n-        }\n-    }\n-\n-    private ProgramStageInstance createProgramStageInstance( Event event, ProgramStage programStage,\n-        ProgramInstance programInstance, OrganisationUnit organisationUnit, Date dueDate, Date executionDate,\n-        int status, String completedBy, String storedBy, String programStageInstanceIdentifier,\n-        CategoryOptionCombo aoc, User assignedUser, ImportOptions importOptions, ImportSummary importSummary )\n-    {\n-        ProgramStageInstance programStageInstance = new ProgramStageInstance();\n-\n-        if ( importOptions.getIdSchemes().getProgramStageInstanceIdScheme().equals( IdScheme.UID ) )\n-        {\n-            programStageInstance\n-                .setUid( CodeGenerator.isValidUid( programStageInstanceIdentifier ) ? programStageInstanceIdentifier\n-                    : CodeGenerator.generateUid() );\n-        }\n-        else if ( importOptions.getIdSchemes().getProgramStageInstanceIdScheme().equals( IdScheme.CODE ) )\n-        {\n-            programStageInstance.setUid( CodeGenerator.generateUid() );\n-            programStageInstance.setCode( programStageInstanceIdentifier );\n-        }\n-\n-        programStageInstance.setStoredBy( storedBy );\n-\n-        updateProgramStageInstance( event, programStage, programInstance, organisationUnit, dueDate, executionDate,\n-            status, completedBy, storedBy, programStageInstance, aoc, assignedUser, importOptions, importSummary );\n-\n-        return programStageInstance;\n-    }\n-\n-    private void updateProgramStageInstance( Event event, ProgramStage programStage, ProgramInstance programInstance,\n-        OrganisationUnit organisationUnit, Date dueDate, Date executionDate, int status,\n-        String completedBy, String storedBy, ProgramStageInstance programStageInstance, CategoryOptionCombo aoc, User assignedUser,\n-        ImportOptions importOptions, ImportSummary importSummary )\n-    {\n-        programStageInstance.setProgramInstance( programInstance );\n-        programStageInstance.setProgramStage( programStage );\n-        programStageInstance.setDueDate( dueDate );\n-        programStageInstance.setExecutionDate( executionDate );\n-        programStageInstance.setOrganisationUnit( organisationUnit );\n-        programStageInstance.setAttributeOptionCombo( aoc );\n-        programStageInstance.setGeometry( event.getGeometry() );\n-\n-        if ( programStageInstance.getProgramStage().isEnableUserAssignment() )\n-        {\n-            programStageInstance.setAssignedUser( assignedUser );\n-        }\n-\n-        updateDateFields( event, programStageInstance );\n-\n-        programStageInstance.setStatus( EventStatus.fromInt( status ) );\n-\n-        saveTrackedEntityComment( programStageInstance, event, storedBy );\n-\n-        if ( programStageInstance.isCompleted() )\n-        {\n-            Date completedDate = new Date();\n-            if ( event.getCompletedDate() != null )\n-            {\n-                completedDate = DateUtils.parseDate( event.getCompletedDate() );\n-            }\n-            programStageInstance.setCompletedBy( completedBy );\n-            programStageInstance.setCompletedDate( completedDate );\n-        }\n-\n-        preheatDataElementsCache( event, importOptions );\n-\n-        if ( programStageInstance.getId() == 0 )\n-        {\n-            programStageInstance.setAutoFields();\n-            programStageInstanceService.addProgramStageInstance( programStageInstance, importOptions.getUser() );\n-\n-            eventDataValueService.processDataValues( programStageInstance, event, false, importOptions, importSummary, DATA_ELEM_CACHE );\n-            programStageInstanceService.updateProgramStageInstance( programStageInstance, importOptions.getUser() );\n-        }\n-        else\n-        {\n-            eventDataValueService.processDataValues( programStageInstance, event, false, importOptions, importSummary, DATA_ELEM_CACHE );\n-            programStageInstanceService.updateProgramStageInstance( programStageInstance, importOptions.getUser() );\n-        }\n-    }\n-\n-    private void saveTrackedEntityComment( ProgramStageInstance programStageInstance, Event event, String storedBy )\n-    {\n-        for ( Note note : event.getNotes() )\n-        {\n-            String noteUid = CodeGenerator.isValidUid( note.getNote() ) ? note.getNote() : CodeGenerator.generateUid();\n-\n-            if ( !commentService.trackedEntityCommentExists( noteUid ) && !StringUtils.isEmpty( note.getValue() ) )\n-            {\n-                TrackedEntityComment comment = new TrackedEntityComment();\n-                comment.setUid( noteUid );\n-                comment.setCommentText( note.getValue() );\n-                comment.setCreator( getValidUsername( note.getStoredBy(), null, storedBy ) );\n-\n-                Date created = DateUtils.parseDate( note.getStoredDate() );\n-                comment.setCreated( created );\n-\n-                commentService.addTrackedEntityComment( comment );\n-\n-                programStageInstance.getComments().add( comment );\n-            }\n-        }\n-    }\n-\n-    public static String getValidUsername( String userName, ImportSummary importSummary, String fallbackUsername )\n-    {\n-        if ( StringUtils.isEmpty( userName ) )\n-        {\n-            return fallbackUsername;\n-        }\n-        else if ( userName.length() > UserCredentials.USERNAME_MAX_LENGTH )\n-        {\n-            if ( importSummary != null )\n-            {\n-                importSummary.getConflicts().add( new ImportConflict( \"Username\",\n-                    userName + \" is more than \" + UserCredentials.USERNAME_MAX_LENGTH + \" characters, using current username instead\" ) );\n-            }\n-\n-            return fallbackUsername;\n-        }\n-\n-        return userName;\n-    }\n-\n-    private OrganisationUnit getOrganisationUnit( IdSchemes idSchemes, String id )\n-    {\n-        return organisationUnitCache.get( id,\n-            () -> manager.getObject( OrganisationUnit.class, idSchemes.getOrgUnitIdScheme(), id ) );\n-    }\n-\n-    private ProgramStageInstance getProgramStageInstance( String uid )\n-    {\n-        if ( uid == null )\n-        {\n-            return null;\n-        }\n-\n-        ProgramStageInstance programStageInstance = programStageInstanceCache.get( uid );\n-\n-        if ( programStageInstance == null )\n-        {\n-            programStageInstance = eventSyncService.getEvent( uid );\n-\n-            programStageInstanceCache.put( uid, programStageInstance );\n-        }\n-\n-        return programStageInstance;\n-    }\n-\n-    private ProgramInstance getProgramInstance( String uid )\n-    {\n-        if ( uid == null )\n-        {\n-            return null;\n-        }\n-\n-        ProgramInstance programInstance = programInstanceCache.get( uid );\n-\n-        if ( programInstance == null )\n-        {\n-            eventSyncService.getEnrollment( uid );\n-        }\n-\n-        return programInstance;\n-    }\n-\n-    private User getUser( String uid )\n-    {\n-        if ( uid == null )\n-        {\n-            return null;\n-        }\n-\n-        User user = userCache.get( uid );\n-\n-        if ( user == null )\n-        {\n-            user = userService.getUser( uid );\n-            userCache.put( uid, user );\n-        }\n-\n-        return user;\n-    }\n-\n-    private TrackedEntityInstance getTrackedEntityInstance( String uid )\n-    {\n-        if ( uid == null )\n-        {\n-            return null;\n-        }\n-\n-        TrackedEntityInstance tei = trackedEntityInstanceCache.get( uid );\n+            programStageInstanceService.deleteProgramStageInstance( programStageInstance );\n \n-        if ( tei == null )\n-        {\n-            tei = entityInstanceService.getTrackedEntityInstance( uid );\n+            if ( programStageInstance.getProgramStage().getProgram().isRegistration() )\n+            {\n+                entityInstanceService\n+                    .updateTrackedEntityInstance( programStageInstance.getProgramInstance().getEntityInstance() );\n+            }\n \n-            trackedEntityInstanceCache.put( uid, tei );\n+            ImportSummary importSummary = new ImportSummary( ImportStatus.SUCCESS,\n+                \"Deletion of event \" + uid + \" was successful\" ).incrementDeleted();\n+            importSummary.setReference( uid );\n+            return importSummary;\n         }\n-\n-        return tei;\n-    }\n-\n-    private Program getProgram( IdScheme idScheme, String id )\n-    {\n-        if ( id == null )\n+        else\n         {\n-            return null;\n+            return new ImportSummary( ImportStatus.SUCCESS,\n+                \"Event \" + uid + \" cannot be deleted as it is not present in the system\" ).incrementIgnored();\n         }\n+    }\n \n-        Program program = programCache.get( id );\n+    @Transactional\n+    @Override\n+    public ImportSummaries deleteEvents( List<String> uids, boolean clearSession )\n+    {\n+        ImportSummaries importSummaries = new ImportSummaries();\n+        int counter = 0;\n \n-        if ( program == null )\n+        for ( String uid : uids )\n         {\n-            program = manager.getObject( Program.class, idScheme, id );\n+            importSummaries.addImportSummary( deleteEvent( uid ) );\n \n-            if ( program != null )\n+            if ( clearSession && counter % FLUSH_FREQUENCY == 0 )\n             {\n-                programCache.put( id, program );\n-\n-                programStageCache.putAll( program.getProgramStages().stream().collect( Collectors.toMap( ProgramStage::getUid, ps -> ps ) ) );\n-\n-                cacheDataElements( program.getProgramStages() );\n+                // clearSession( user );", "originalCommit": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ0NDI0OQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448444249", "bodyText": "@maikelarabori can you look at this function - we can discuss it together, I don't remember why this was commented out", "author": "luciano-fiandesio", "createdAt": "2020-07-01T15:29:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIyOTA4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "573c2307cfe13c64d3194199c4703facd9f06652", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/AbstractEventService.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/AbstractEventService.java\nindex 7715f7b153..b20559923e 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/AbstractEventService.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/AbstractEventService.java\n", "chunk": "@@ -776,18 +788,9 @@ public abstract class AbstractEventService implements EventService\n     public ImportSummaries deleteEvents( List<String> uids, boolean clearSession )\n     {\n         ImportSummaries importSummaries = new ImportSummaries();\n-        int counter = 0;\n-\n         for ( String uid : uids )\n         {\n             importSummaries.addImportSummary( deleteEvent( uid ) );\n-\n-            if ( clearSession && counter % FLUSH_FREQUENCY == 0 )\n-            {\n-                // clearSession( user );\n-            }\n-\n-            counter++;\n         }\n \n         return importSummaries;\n", "next_change": null}]}, "revised_code_in_main": {"commit": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/AbstractEventService.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/AbstractEventService.java\nindex 7715f7b153..4c73dfa26e 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/AbstractEventService.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/AbstractEventService.java\n", "chunk": "@@ -776,18 +788,9 @@ public abstract class AbstractEventService implements EventService\n     public ImportSummaries deleteEvents( List<String> uids, boolean clearSession )\n     {\n         ImportSummaries importSummaries = new ImportSummaries();\n-        int counter = 0;\n-\n         for ( String uid : uids )\n         {\n             importSummaries.addImportSummary( deleteEvent( uid ) );\n-\n-            if ( clearSession && counter % FLUSH_FREQUENCY == 0 )\n-            {\n-                // clearSession( user );\n-            }\n-\n-            counter++;\n         }\n \n         return importSummaries;\n", "next_change": {"commit": "43bd8664d854c226422c6b88b2c2bdf403fa240c", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/AbstractEventService.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/AbstractEventService.java\nindex 4c73dfa26e..3efa3ac4b0 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/AbstractEventService.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/AbstractEventService.java\n", "chunk": "@@ -799,35 +891,8 @@ public abstract class AbstractEventService implements EventService\n     // -------------------------------------------------------------------------\n     // HELPERS\n     // -------------------------------------------------------------------------\n-\n-    private List<OrganisationUnit> getOrganisationUnits( EventSearchParams params )\n-    {\n-        List<OrganisationUnit> organisationUnits = new ArrayList<>();\n-\n-        OrganisationUnit orgUnit = params.getOrgUnit();\n-        OrganisationUnitSelectionMode orgUnitSelectionMode = params.getOrgUnitSelectionMode();\n-\n-        if ( params.getOrgUnit() != null )\n-        {\n-            if ( OrganisationUnitSelectionMode.DESCENDANTS.equals( orgUnitSelectionMode ) )\n-            {\n-                organisationUnits.addAll( organisationUnitService.getOrganisationUnitWithChildren( orgUnit.getUid() ) );\n-            }\n-            else if ( OrganisationUnitSelectionMode.CHILDREN.equals( orgUnitSelectionMode ) )\n-            {\n-                organisationUnits.add( orgUnit );\n-                organisationUnits.addAll( orgUnit.getChildren() );\n-            }\n-            else // SELECTED\n-            {\n-                organisationUnits.add( orgUnit );\n-            }\n-        }\n-\n-        return organisationUnits;\n-    }\n-\n-    private void saveTrackedEntityComment( ProgramStageInstance programStageInstance, Event event, String storedBy )\n+    private void saveTrackedEntityComment( ProgramStageInstance programStageInstance, Event event, User user,\n+        String storedBy )\n     {\n         for ( Note note : event.getNotes() )\n         {\n", "next_change": {"commit": "959c60d4f597187d0df2160fbbb675e5c4196e5c", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/AbstractEventService.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/AbstractEventService.java\nindex 3efa3ac4b0..30612b139b 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/AbstractEventService.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/AbstractEventService.java\n", "chunk": "@@ -891,7 +895,8 @@ public abstract class AbstractEventService implements EventService\n     // -------------------------------------------------------------------------\n     // HELPERS\n     // -------------------------------------------------------------------------\n-    private void saveTrackedEntityComment( ProgramStageInstance programStageInstance, Event event, User user,\n+    private void saveTrackedEntityComment( org.hisp.dhis.program.Event programStageInstance,\n+        org.hisp.dhis.dxf2.events.event.Event event, User user,\n         String storedBy )\n     {\n         for ( Note note : event.getNotes() )\n", "next_change": {"commit": "02336c9611c0dd85d5038223bddbfdebc0aae526", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/AbstractEventService.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/deprecated/tracker/event/AbstractEventService.java\nsimilarity index 85%\nrename from dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/AbstractEventService.java\nrename to dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/deprecated/tracker/event/AbstractEventService.java\nindex 30612b139b..cc0c8fce41 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/AbstractEventService.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/deprecated/tracker/event/AbstractEventService.java\n", "chunk": "@@ -896,7 +902,7 @@ public abstract class AbstractEventService implements EventService\n     // HELPERS\n     // -------------------------------------------------------------------------\n     private void saveTrackedEntityComment( org.hisp.dhis.program.Event programStageInstance,\n-        org.hisp.dhis.dxf2.events.event.Event event, User user,\n+        org.hisp.dhis.dxf2.deprecated.tracker.event.Event event, User user,\n         String storedBy )\n     {\n         for ( Note note : event.getNotes() )\n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "message": "Merge commit", "committedDate": null}, {"oid": "52b8f7c48def44670be7ba9d25d0ee963fe9441e", "committedDate": "2020-09-24 09:19:03 +0200", "message": "fix: Coordinate class removed, drop support for old implementation (#6172)"}, {"oid": "13cd21d76507450be96b06e13823b24cf357be04", "committedDate": "2020-10-30 09:38:34 +0100", "message": "feat: DHIS2-8911 adding LastUpdatedBy and CreatedBy user informations in events (#6521)"}, {"oid": "d34f05e1348f3dff54ced7059283a96a7b699ea4", "committedDate": "2020-11-16 18:21:11 +0100", "message": "feat: DHIS2-9835 user info in comments and notes for Events and Enrollments (#6587)"}, {"oid": "0da875a0811106b4619c753dadeee71cb7cab747", "committedDate": "2020-12-17 09:29:54 +0100", "message": "fix: NPE when retrieving relationship with event (#6699)"}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "4f487b5b670d3c3e7a4db61237a9978ca2a772ed", "committedDate": "2021-01-19 11:20:33 +0100", "message": "fix: [DHIS2-10293] Fix program rules linked to tracked entity attributes (#7112)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "10b11c17ef2f2964263efc051f96c8e8f8f7e1f4", "committedDate": "2021-02-02 12:33:59 +0100", "message": "feat: change user property name to createdBy (#7061)"}, {"oid": "5c16843f3ecc869dbd0d93a175eb02d0b082de34", "committedDate": "2021-02-16 15:58:06 +0100", "message": "chore: create Caches in constructors [TECH-532] (#7370)"}, {"oid": "27bb970f7df4e3752635046a016a07f96250cca6", "committedDate": "2021-03-24 09:37:51 +0100", "message": "perf: reduce queries performed by eventRows (#7710)"}, {"oid": "98a55589ded753eb971dab83a84a28770decb84b", "committedDate": "2021-05-27 14:33:25 +0700", "message": "fix: LazyInitializationException in AbstractEventService caches (#8050)"}, {"oid": "4ce9356a5204abfffda295c7819a1e67e8698eeb", "committedDate": "2021-06-03 10:34:47 +0200", "message": "fix: Non-optimized TEI fetch for events access control [DHIS2-11264]"}, {"oid": "3b15198d78c8c7652457b9cd5968a8178c58d7fb", "committedDate": "2021-06-03 23:14:05 +0200", "message": "fix: Centralize logic and improve clarity of access check [DHIS2-11264] (#8124)"}, {"oid": "15a1ce87df3a6aecbb40ceca8c1aeb9ef9a35290", "committedDate": "2021-06-08 15:46:02 +0200", "message": "perf: Remove program lookup in event query loop [DHIS2-11264] (#8149)"}, {"oid": "6f3422ff9a182b183a9e3a2f61cf457bb23cb092", "committedDate": "2021-06-10 13:13:51 +0200", "message": "chore: encapsulates import conflicts [DHIS2-4414]  (#8164)"}, {"oid": "a7951a73ccbe3a956f0104f1732490f9adbb65fa", "committedDate": "2021-06-28 11:55:23 +0700", "message": "fix: LazyInitializationException when search for TEI [2.37] (#8292)"}, {"oid": "dce05a798f95c58ab536e7115937eabf4a48620e", "committedDate": "2021-09-21 13:25:04 +0200", "message": "fix: OrgUnit/ouMode required to fetch events (#8768)"}, {"oid": "c73683d7554f02a9dc6fd07304945579d55473f2", "committedDate": "2021-10-07 13:55:57 +0200", "message": "fix: Default orgunit scope (#8971)"}, {"oid": "238c6d4af316f1ad6f0bc35003ae07f6b5c6a1f9", "committedDate": "2021-10-08 13:29:28 +0200", "message": "fix: Set ouMode ACCESSIBLE as default [DHIS2-11755] (#9013)"}, {"oid": "20e8e0fb5c76984c676da3c70a179518ab0bed84", "committedDate": "2021-10-11 15:27:32 +0200", "message": "fix: OuMode validation in event query [DHIS2-11755] (#9032)"}, {"oid": "bbaa9c44c8c39205d27f8885d9db1e9e21377d3c", "committedDate": "2021-10-20 09:26:33 +0200", "message": "fix: Accessible ouMode per program protection level [2.38-DHIS2-11755] (#9075)"}, {"oid": "a3b4bea93eadc64069d8ee61e9b89fc7c10501c8", "committedDate": "2021-10-24 22:17:13 +0200", "message": "fix: Validation for OUMoude [DHIS2-11755] (#9114)"}, {"oid": "a8a45e9647c3933a4309e81aa1a5ea179637abb2", "committedDate": "2021-10-26 11:34:50 +0200", "message": "refactor: Change getOrFunction call in Cache [TECH-782] (#9124)"}, {"oid": "6f572a9ce997e4e66255f5a5ac2d3f141db1e8bd", "committedDate": "2021-10-26 21:13:46 +0200", "message": "chore: Remove most usages of commons-lang TECH-777 (#9104)"}, {"oid": "234a6d5a464e13aa187a6e4ff034d12e79820331", "committedDate": "2021-11-19 07:43:20 +0100", "message": "fix: OrgUnit validation in event query [DHIS2-11755] (#9138)"}, {"oid": "8a62c3e0240b711a75ca821921bae684b82fff5f", "committedDate": "2021-11-30 12:46:53 +0100", "message": "perf: Use ou.path for ouMode event queries (#9337)"}, {"oid": "cc35b66a078649936fc2bd7de77cfc2f718c1e32", "committedDate": "2021-12-07 16:40:31 +0100", "message": "fix: Apply TEI ownership in event query (#9367)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "93b61e49f94920cf3adfe3fd83ad8f0c060afbb1", "committedDate": "2022-02-14 09:59:56 +0100", "message": "fix: Request param totalPages=false for events/enrollments [DHIS2-12530] (#9719)"}, {"oid": "3dc56a0b0031c4517d719451f1246b16d1630bff", "committedDate": "2022-02-15 18:48:07 +0100", "message": "fix: NPE in page parsing [DHIS2-12530] (#9819)"}, {"oid": "10fc6cda1099a1a3fa45ab15d647772c1b39e080", "committedDate": "2022-02-17 14:55:33 +0100", "message": "fix: Missing totalPages flag in /events [DHIS2-12530] (#9835)"}, {"oid": "8ccf9a288a67e5ee5349024fd3d281372c64c956", "committedDate": "2022-02-22 13:25:35 +0800", "message": "feat: Merge User/UserCredentials into one DB table (#9754)"}, {"oid": "d117ff9ce355694569f7c6477141cf35c6412609", "committedDate": "2022-03-04 11:13:40 +0100", "message": "fix: Return complete information for user fields in NTI [DHIS2-12717] (#9936)"}, {"oid": "63846ea30b089db64192850ec134ff7f12f43e86", "committedDate": "2022-06-01 09:52:14 +0200", "message": "fix: Add back feature for invites where invitee chose username (#10902)"}, {"oid": "afdc9c571c86ceae638bed422ffe1979704307ca", "committedDate": "2022-07-05 11:58:57 +0200", "message": "fix: Performance: relationships endpoint is slow when there are many relationships [ DHIS2-11935 ] (#11104)"}, {"oid": "7ccec2accdbcf6dd2a696cdcfb86fb10654b66c5", "committedDate": "2022-07-28 11:47:20 +0200", "message": "fix: update lastUpdated field when event is deleted (#11315)"}, {"oid": "27b75665be58c25de309b5d71e7bd86200d740d6", "committedDate": "2022-12-01 11:37:48 +0100", "message": "chore: use AssignedUserQueryParam in EventSearchParams (#12446)"}, {"oid": "3f8ff27e788f1eadfff65bea5cd81e881172568a", "committedDate": "2022-12-14 08:32:01 +0100", "message": "fix: api/events.json ignores skipPaging parameter (#12544)"}, {"oid": "d56afd753e232874d55ce688c2514625370cf486", "committedDate": "2023-01-16 14:59:48 +0100", "message": "fix: Extends nested fields to Events in /trackedentities endpoint [ NTI ] [ DHIS2-14407 ] (#12717)"}, {"oid": "a1e0f681eeecd372e0191983eea9a618d5164650", "committedDate": "2023-01-20 13:10:34 +0100", "message": "fix: Flags paging and skipPaging for enrollments API [DHIS2-14476] (#12775)"}, {"oid": "43bd8664d854c226422c6b88b2c2bdf403fa240c", "committedDate": "2023-03-21 08:55:59 +0100", "message": "refactor: Simplify event orgunit sql query [TECH-1478] (#12897)"}, {"oid": "02a786b8807ff38031d991a942a4258c802dca1b", "committedDate": "2023-04-03 15:17:09 +0700", "message": "chore: remove uses of org.hibernate.Criteria (#13499)"}, {"oid": "959c60d4f597187d0df2160fbbb675e5c4196e5c", "committedDate": "2023-04-27 16:46:18 +0200", "message": "chore: rename ProgramStageInstance to Event (#13731)"}, {"oid": "b8f37219ad415b30f41b3532cfcbf97156bf15ba", "committedDate": "2023-04-28 09:54:31 +0200", "message": "chore: rename ProgramStageInstanceService to EventService (#13753)"}, {"oid": "41e75ba362e65a726c88564679a43aadcebbc60a", "committedDate": "2023-05-03 07:50:28 +0200", "message": "chore: rename Event.programInstance to Event.enrollment (#13774)"}, {"oid": "57b4c1e82e812037f95050426078e418d5468f3a", "committedDate": "2023-05-04 08:36:26 +0200", "message": "chore: Rename ProgramInstanceService to EnrollmentService [TECH-1547] (#13797)"}, {"oid": "240be973a3083b3e4b04ada02733f1908bb73512", "committedDate": "2023-05-08 08:39:16 +0000", "message": "chore: rename TrackedEntityInstance to TrackedEntity (#13827)"}, {"oid": "c040430012d64647a7d6374382b6f18d425ad314", "committedDate": "2023-05-08 14:22:12 +0200", "message": "chore: rename TrackedEntityInstanceService and Store TECH-1552 (#13841)"}, {"oid": "231f32506efd9bd2b74a3bf38d48f9066c4a5175", "committedDate": "2023-05-09 10:03:31 +0000", "message": "chore: remove Instance from get/has/addTrackedEntityInstance methods TECH-1552 (#13849)"}, {"oid": "2a70a184cb6236e81232dfc8c5ac5cb93b0f3c71", "committedDate": "2023-05-09 18:13:32 +0200", "message": "chore: remove instance from trackedEntityInstance vars and methods TECH-1552 (#13850)"}, {"oid": "02336c9611c0dd85d5038223bddbfdebc0aae526", "committedDate": "2023-05-11 19:34:26 +0200", "message": "chore: move old tracker dxf2 code into deprecated package (#13901)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODI0NDkwOA==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448244908", "body": "Commented out code.", "bodyText": "Commented out code.", "bodyHTML": "<p dir=\"auto\">Commented out code.</p>", "author": "netroms", "createdAt": "2020-07-01T09:42:15Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/AttributeOptionComboDateCheck.java", "diffHunk": "@@ -0,0 +1,103 @@\n+package org.hisp.dhis.dxf2.events.importer.shared.validation;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import static org.hisp.dhis.dxf2.importsummary.ImportSummary.success;\n+import static org.hisp.dhis.util.DateUtils.getMediumDateString;\n+\n+import java.util.Date;\n+\n+import org.hisp.dhis.category.CategoryOption;\n+import org.hisp.dhis.category.CategoryOptionCombo;\n+import org.hisp.dhis.common.IllegalQueryException;\n+import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n+import org.hisp.dhis.dxf2.events.importer.Checker;\n+import org.hisp.dhis.dxf2.events.importer.shared.ImmutableEvent;\n+import org.hisp.dhis.dxf2.importsummary.ImportSummary;\n+import org.hisp.dhis.util.DateUtils;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+public class AttributeOptionComboDateCheck implements Checker\n+{\n+    @Override\n+    public ImportSummary check( ImmutableEvent event, WorkContext ctx )\n+    {\n+        CategoryOptionCombo attributeOptionCombo = ctx.getCategoryOptionComboMap().get( event.getUid() );\n+\n+        Date executionDate = null;\n+\n+        if ( event.getEventDate() != null )\n+        {\n+            executionDate = DateUtils.parseDate( event.getEventDate() );\n+        }\n+\n+        Date dueDate = new Date();\n+\n+        if ( event.getDueDate() != null )\n+        {\n+            dueDate = DateUtils.parseDate( event.getDueDate() );\n+        }\n+\n+        Date eventDate = executionDate != null ? executionDate : dueDate;\n+\n+        if ( eventDate == null )\n+        {\n+            throw new IllegalQueryException( \"Event date can not be empty\" );\n+        }\n+\n+        for ( CategoryOption option : attributeOptionCombo.getCategoryOptions() )\n+        {\n+            if ( option.getStartDate() != null && eventDate.compareTo( option.getStartDate() ) < 0 )\n+            {\n+                // TODO: Could we replace the exception by ImportSummary error?\n+//                return error( \"Event date \" + getMediumDateString( date ) + \" is after end date \"", "originalCommit": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ0NDc2MA==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448444760", "bodyText": "Yes, this is one of the open questions in the document: https://docs.google.com/document/d/1030nAuKxMSAYopNJj569inGgcJUS3DbqNrU-ZyZgSMI/edit#heading=h.p1u0vhrtwo4q", "author": "luciano-fiandesio", "createdAt": "2020-07-01T15:30:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODI0NDkwOA=="}], "type": "inlineReview", "revised_code": {"commit": "2ac1febce672b312940d3ad561852b0db90926fd", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/AttributeOptionComboDateCheck.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/AttributeOptionComboDateCheck.java\nindex 452c7a3789..0c7a6c58f7 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/AttributeOptionComboDateCheck.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/AttributeOptionComboDateCheck.java\n", "chunk": "@@ -70,31 +71,23 @@ public class AttributeOptionComboDateCheck implements Checker\n \n         if ( eventDate == null )\n         {\n-            throw new IllegalQueryException( \"Event date can not be empty\" );\n+            return error( \"Event date can not be empty\", event.getEvent() );\n         }\n \n-        for ( CategoryOption option : attributeOptionCombo.getCategoryOptions() )\n+        for ( CategoryOption categoryOption : attributeOptionCombo.getCategoryOptions() )\n         {\n-            if ( option.getStartDate() != null && eventDate.compareTo( option.getStartDate() ) < 0 )\n+            if ( categoryOption.getStartDate() != null && eventDate.compareTo( categoryOption.getStartDate() ) < 0 )\n             {\n-                // TODO: Could we replace the exception by ImportSummary error?\n-//                return error( \"Event date \" + getMediumDateString( date ) + \" is after end date \"\n-//                    + getMediumDateString( option.getEndDate() ) + \" for attributeOption '\" + option.getName() + \"'\" )\n-//                        .incrementIgnored();\n-                throw new IllegalQueryException( \"Event date \" + getMediumDateString( eventDate )\n-                    + \" is before start date \" + getMediumDateString( option.getStartDate() ) + \" for attributeOption '\"\n-                    + option.getName() + \"'\" );\n+                return error( \"Event date \" + getMediumDateString( eventDate ) + \" is before start date \"\n+                    + getMediumDateString( categoryOption.getStartDate() ) + \" for attributeOption '\"\n+                    + categoryOption.getName() + \"'\", event.getEvent() );\n             }\n \n-            if ( option.getEndDate() != null && eventDate.compareTo( option.getEndDate() ) > 0 )\n+            if ( categoryOption.getEndDate() != null && eventDate.compareTo( categoryOption.getEndDate() ) > 0 )\n             {\n-                // TODO: Could we replace the exception by ImportSummary error?\n-//                return error( \"Event date \" + getMediumDateString( date ) + \" is after end date \"\n-//                    + getMediumDateString( option.getEndDate() ) + \" for attributeOption '\" + option.getName() + \"'\" )\n-//                        .incrementIgnored();\n-                throw new IllegalQueryException( \"Event date \" + getMediumDateString( eventDate )\n-                    + \" is after end date \" + getMediumDateString( option.getEndDate() ) + \" for attributeOption '\"\n-                    + option.getName() + \"'\" );\n+                return error( \"Event date \" + getMediumDateString( eventDate ) + \" is after end date \"\n+                    + getMediumDateString( categoryOption.getEndDate() ) + \" for attributeOption '\"\n+                    + categoryOption.getName() + \"'\", event.getEvent() );\n             }\n         }\n \n", "next_change": null}]}, "revised_code_in_main": {"commit": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/AttributeOptionComboDateCheck.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/AttributeOptionComboDateCheck.java\nindex 452c7a3789..0c7a6c58f7 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/AttributeOptionComboDateCheck.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/AttributeOptionComboDateCheck.java\n", "chunk": "@@ -70,31 +71,23 @@ public class AttributeOptionComboDateCheck implements Checker\n \n         if ( eventDate == null )\n         {\n-            throw new IllegalQueryException( \"Event date can not be empty\" );\n+            return error( \"Event date can not be empty\", event.getEvent() );\n         }\n \n-        for ( CategoryOption option : attributeOptionCombo.getCategoryOptions() )\n+        for ( CategoryOption categoryOption : attributeOptionCombo.getCategoryOptions() )\n         {\n-            if ( option.getStartDate() != null && eventDate.compareTo( option.getStartDate() ) < 0 )\n+            if ( categoryOption.getStartDate() != null && eventDate.compareTo( categoryOption.getStartDate() ) < 0 )\n             {\n-                // TODO: Could we replace the exception by ImportSummary error?\n-//                return error( \"Event date \" + getMediumDateString( date ) + \" is after end date \"\n-//                    + getMediumDateString( option.getEndDate() ) + \" for attributeOption '\" + option.getName() + \"'\" )\n-//                        .incrementIgnored();\n-                throw new IllegalQueryException( \"Event date \" + getMediumDateString( eventDate )\n-                    + \" is before start date \" + getMediumDateString( option.getStartDate() ) + \" for attributeOption '\"\n-                    + option.getName() + \"'\" );\n+                return error( \"Event date \" + getMediumDateString( eventDate ) + \" is before start date \"\n+                    + getMediumDateString( categoryOption.getStartDate() ) + \" for attributeOption '\"\n+                    + categoryOption.getName() + \"'\", event.getEvent() );\n             }\n \n-            if ( option.getEndDate() != null && eventDate.compareTo( option.getEndDate() ) > 0 )\n+            if ( categoryOption.getEndDate() != null && eventDate.compareTo( categoryOption.getEndDate() ) > 0 )\n             {\n-                // TODO: Could we replace the exception by ImportSummary error?\n-//                return error( \"Event date \" + getMediumDateString( date ) + \" is after end date \"\n-//                    + getMediumDateString( option.getEndDate() ) + \" for attributeOption '\" + option.getName() + \"'\" )\n-//                        .incrementIgnored();\n-                throw new IllegalQueryException( \"Event date \" + getMediumDateString( eventDate )\n-                    + \" is after end date \" + getMediumDateString( option.getEndDate() ) + \" for attributeOption '\"\n-                    + option.getName() + \"'\" );\n+                return error( \"Event date \" + getMediumDateString( eventDate ) + \" is after end date \"\n+                    + getMediumDateString( categoryOption.getEndDate() ) + \" for attributeOption '\"\n+                    + categoryOption.getName() + \"'\", event.getEvent() );\n             }\n         }\n \n", "next_change": {"commit": "5f0613c57316bb855e4b9ee931932f23edf54142", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/AttributeOptionComboDateCheck.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/AttributeOptionComboDateCheck.java\nindex 0c7a6c58f7..81139419c6 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/AttributeOptionComboDateCheck.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/AttributeOptionComboDateCheck.java\n", "chunk": "@@ -74,20 +73,25 @@ public class AttributeOptionComboDateCheck implements Checker\n             return error( \"Event date can not be empty\", event.getEvent() );\n         }\n \n+        Program program = ctx.getProgramsMap().get( event.getProgram() );\n+\n         for ( CategoryOption categoryOption : attributeOptionCombo.getCategoryOptions() )\n         {\n-            if ( categoryOption.getStartDate() != null && eventDate.compareTo( categoryOption.getStartDate() ) < 0 )\n+            if ( categoryOption.getStartDate() != null &&\n+                eventDate.compareTo( categoryOption.getStartDate() ) < 0 )\n             {\n-                return error( \"Event date \" + getMediumDateString( eventDate ) + \" is before start date \"\n-                    + getMediumDateString( categoryOption.getStartDate() ) + \" for attributeOption '\"\n-                    + categoryOption.getName() + \"'\", event.getEvent() );\n+                return error( \"Event date \" + getMediumDateString( eventDate )\n+                    + \" is before start date \" + getMediumDateString( categoryOption.getStartDate() )\n+                    + \" for attributeOption '\" + categoryOption.getName() + \"'\", event.getEvent() );\n             }\n \n-            if ( categoryOption.getEndDate() != null && eventDate.compareTo( categoryOption.getEndDate() ) > 0 )\n+            if ( categoryOption.getEndDate() != null &&\n+                eventDate.compareTo( categoryOption.getAdjustedEndDate( program ) ) > 0 )\n             {\n-                return error( \"Event date \" + getMediumDateString( eventDate ) + \" is after end date \"\n-                    + getMediumDateString( categoryOption.getEndDate() ) + \" for attributeOption '\"\n-                    + categoryOption.getName() + \"'\", event.getEvent() );\n+                return error( \"Event date \" + getMediumDateString( eventDate )\n+                    + \" is after end date \" + getMediumDateString( categoryOption.getAdjustedEndDate( program ) )\n+                    + \" for attributeOption '\" + categoryOption.getName()\n+                    + \"' in program '\" + program.getName() + \"'\", event.getEvent() );\n             }\n         }\n \n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "message": "Merge commit", "committedDate": null}, {"oid": "8aaeab2ee4dd7a9ffa927147931dff8609ef787a", "committedDate": "2020-09-23 15:33:34 +0200", "message": "chore: Remove unused imports (#6219)"}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "5f0613c57316bb855e4b9ee931932f23edf54142", "committedDate": "2021-11-16 10:54:05 -0500", "message": "feat: Program.openDaysAfterCoEndDate DHIS2-11234 (#9219)"}, {"oid": "1e593837ab1c64884a8ac615c7cc8c3471a219ee", "committedDate": "2021-11-18 09:33:25 +0100", "message": "refactor: validators, checkers and processors in old importer are now spring beans [TECH-797] (#9218)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "02336c9611c0dd85d5038223bddbfdebc0aae526", "committedDate": "2023-05-11 19:34:26 +0200", "message": "chore: move old tracker dxf2 code into deprecated package (#13901)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODI0NTAxOA==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448245018", "body": "Commented out code.", "bodyText": "Commented out code.", "bodyHTML": "<p dir=\"auto\">Commented out code.</p>", "author": "netroms", "createdAt": "2020-07-01T09:42:26Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/AttributeOptionComboDateCheck.java", "diffHunk": "@@ -0,0 +1,103 @@\n+package org.hisp.dhis.dxf2.events.importer.shared.validation;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import static org.hisp.dhis.dxf2.importsummary.ImportSummary.success;\n+import static org.hisp.dhis.util.DateUtils.getMediumDateString;\n+\n+import java.util.Date;\n+\n+import org.hisp.dhis.category.CategoryOption;\n+import org.hisp.dhis.category.CategoryOptionCombo;\n+import org.hisp.dhis.common.IllegalQueryException;\n+import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n+import org.hisp.dhis.dxf2.events.importer.Checker;\n+import org.hisp.dhis.dxf2.events.importer.shared.ImmutableEvent;\n+import org.hisp.dhis.dxf2.importsummary.ImportSummary;\n+import org.hisp.dhis.util.DateUtils;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+public class AttributeOptionComboDateCheck implements Checker\n+{\n+    @Override\n+    public ImportSummary check( ImmutableEvent event, WorkContext ctx )\n+    {\n+        CategoryOptionCombo attributeOptionCombo = ctx.getCategoryOptionComboMap().get( event.getUid() );\n+\n+        Date executionDate = null;\n+\n+        if ( event.getEventDate() != null )\n+        {\n+            executionDate = DateUtils.parseDate( event.getEventDate() );\n+        }\n+\n+        Date dueDate = new Date();\n+\n+        if ( event.getDueDate() != null )\n+        {\n+            dueDate = DateUtils.parseDate( event.getDueDate() );\n+        }\n+\n+        Date eventDate = executionDate != null ? executionDate : dueDate;\n+\n+        if ( eventDate == null )\n+        {\n+            throw new IllegalQueryException( \"Event date can not be empty\" );\n+        }\n+\n+        for ( CategoryOption option : attributeOptionCombo.getCategoryOptions() )\n+        {\n+            if ( option.getStartDate() != null && eventDate.compareTo( option.getStartDate() ) < 0 )\n+            {\n+                // TODO: Could we replace the exception by ImportSummary error?\n+//                return error( \"Event date \" + getMediumDateString( date ) + \" is after end date \"\n+//                    + getMediumDateString( option.getEndDate() ) + \" for attributeOption '\" + option.getName() + \"'\" )\n+//                        .incrementIgnored();\n+                throw new IllegalQueryException( \"Event date \" + getMediumDateString( eventDate )\n+                    + \" is before start date \" + getMediumDateString( option.getStartDate() ) + \" for attributeOption '\"\n+                    + option.getName() + \"'\" );\n+            }\n+\n+            if ( option.getEndDate() != null && eventDate.compareTo( option.getEndDate() ) > 0 )\n+            {\n+                // TODO: Could we replace the exception by ImportSummary error?\n+//                return error( \"Event date \" + getMediumDateString( date ) + \" is after end date \"", "originalCommit": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ0NDg3NQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448444875", "bodyText": "Yes, this is one of the open questions in the document: https://docs.google.com/document/d/1030nAuKxMSAYopNJj569inGgcJUS3DbqNrU-ZyZgSMI/edit#heading=h.p1u0vhrtwo4q", "author": "luciano-fiandesio", "createdAt": "2020-07-01T15:30:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODI0NTAxOA=="}], "type": "inlineReview", "revised_code": {"commit": "2ac1febce672b312940d3ad561852b0db90926fd", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/AttributeOptionComboDateCheck.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/AttributeOptionComboDateCheck.java\nindex 452c7a3789..0c7a6c58f7 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/AttributeOptionComboDateCheck.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/AttributeOptionComboDateCheck.java\n", "chunk": "@@ -70,31 +71,23 @@ public class AttributeOptionComboDateCheck implements Checker\n \n         if ( eventDate == null )\n         {\n-            throw new IllegalQueryException( \"Event date can not be empty\" );\n+            return error( \"Event date can not be empty\", event.getEvent() );\n         }\n \n-        for ( CategoryOption option : attributeOptionCombo.getCategoryOptions() )\n+        for ( CategoryOption categoryOption : attributeOptionCombo.getCategoryOptions() )\n         {\n-            if ( option.getStartDate() != null && eventDate.compareTo( option.getStartDate() ) < 0 )\n+            if ( categoryOption.getStartDate() != null && eventDate.compareTo( categoryOption.getStartDate() ) < 0 )\n             {\n-                // TODO: Could we replace the exception by ImportSummary error?\n-//                return error( \"Event date \" + getMediumDateString( date ) + \" is after end date \"\n-//                    + getMediumDateString( option.getEndDate() ) + \" for attributeOption '\" + option.getName() + \"'\" )\n-//                        .incrementIgnored();\n-                throw new IllegalQueryException( \"Event date \" + getMediumDateString( eventDate )\n-                    + \" is before start date \" + getMediumDateString( option.getStartDate() ) + \" for attributeOption '\"\n-                    + option.getName() + \"'\" );\n+                return error( \"Event date \" + getMediumDateString( eventDate ) + \" is before start date \"\n+                    + getMediumDateString( categoryOption.getStartDate() ) + \" for attributeOption '\"\n+                    + categoryOption.getName() + \"'\", event.getEvent() );\n             }\n \n-            if ( option.getEndDate() != null && eventDate.compareTo( option.getEndDate() ) > 0 )\n+            if ( categoryOption.getEndDate() != null && eventDate.compareTo( categoryOption.getEndDate() ) > 0 )\n             {\n-                // TODO: Could we replace the exception by ImportSummary error?\n-//                return error( \"Event date \" + getMediumDateString( date ) + \" is after end date \"\n-//                    + getMediumDateString( option.getEndDate() ) + \" for attributeOption '\" + option.getName() + \"'\" )\n-//                        .incrementIgnored();\n-                throw new IllegalQueryException( \"Event date \" + getMediumDateString( eventDate )\n-                    + \" is after end date \" + getMediumDateString( option.getEndDate() ) + \" for attributeOption '\"\n-                    + option.getName() + \"'\" );\n+                return error( \"Event date \" + getMediumDateString( eventDate ) + \" is after end date \"\n+                    + getMediumDateString( categoryOption.getEndDate() ) + \" for attributeOption '\"\n+                    + categoryOption.getName() + \"'\", event.getEvent() );\n             }\n         }\n \n", "next_change": null}]}, "revised_code_in_main": {"commit": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/AttributeOptionComboDateCheck.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/AttributeOptionComboDateCheck.java\nindex 452c7a3789..0c7a6c58f7 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/AttributeOptionComboDateCheck.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/AttributeOptionComboDateCheck.java\n", "chunk": "@@ -70,31 +71,23 @@ public class AttributeOptionComboDateCheck implements Checker\n \n         if ( eventDate == null )\n         {\n-            throw new IllegalQueryException( \"Event date can not be empty\" );\n+            return error( \"Event date can not be empty\", event.getEvent() );\n         }\n \n-        for ( CategoryOption option : attributeOptionCombo.getCategoryOptions() )\n+        for ( CategoryOption categoryOption : attributeOptionCombo.getCategoryOptions() )\n         {\n-            if ( option.getStartDate() != null && eventDate.compareTo( option.getStartDate() ) < 0 )\n+            if ( categoryOption.getStartDate() != null && eventDate.compareTo( categoryOption.getStartDate() ) < 0 )\n             {\n-                // TODO: Could we replace the exception by ImportSummary error?\n-//                return error( \"Event date \" + getMediumDateString( date ) + \" is after end date \"\n-//                    + getMediumDateString( option.getEndDate() ) + \" for attributeOption '\" + option.getName() + \"'\" )\n-//                        .incrementIgnored();\n-                throw new IllegalQueryException( \"Event date \" + getMediumDateString( eventDate )\n-                    + \" is before start date \" + getMediumDateString( option.getStartDate() ) + \" for attributeOption '\"\n-                    + option.getName() + \"'\" );\n+                return error( \"Event date \" + getMediumDateString( eventDate ) + \" is before start date \"\n+                    + getMediumDateString( categoryOption.getStartDate() ) + \" for attributeOption '\"\n+                    + categoryOption.getName() + \"'\", event.getEvent() );\n             }\n \n-            if ( option.getEndDate() != null && eventDate.compareTo( option.getEndDate() ) > 0 )\n+            if ( categoryOption.getEndDate() != null && eventDate.compareTo( categoryOption.getEndDate() ) > 0 )\n             {\n-                // TODO: Could we replace the exception by ImportSummary error?\n-//                return error( \"Event date \" + getMediumDateString( date ) + \" is after end date \"\n-//                    + getMediumDateString( option.getEndDate() ) + \" for attributeOption '\" + option.getName() + \"'\" )\n-//                        .incrementIgnored();\n-                throw new IllegalQueryException( \"Event date \" + getMediumDateString( eventDate )\n-                    + \" is after end date \" + getMediumDateString( option.getEndDate() ) + \" for attributeOption '\"\n-                    + option.getName() + \"'\" );\n+                return error( \"Event date \" + getMediumDateString( eventDate ) + \" is after end date \"\n+                    + getMediumDateString( categoryOption.getEndDate() ) + \" for attributeOption '\"\n+                    + categoryOption.getName() + \"'\", event.getEvent() );\n             }\n         }\n \n", "next_change": {"commit": "5f0613c57316bb855e4b9ee931932f23edf54142", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/AttributeOptionComboDateCheck.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/AttributeOptionComboDateCheck.java\nindex 0c7a6c58f7..81139419c6 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/AttributeOptionComboDateCheck.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/AttributeOptionComboDateCheck.java\n", "chunk": "@@ -74,20 +73,25 @@ public class AttributeOptionComboDateCheck implements Checker\n             return error( \"Event date can not be empty\", event.getEvent() );\n         }\n \n+        Program program = ctx.getProgramsMap().get( event.getProgram() );\n+\n         for ( CategoryOption categoryOption : attributeOptionCombo.getCategoryOptions() )\n         {\n-            if ( categoryOption.getStartDate() != null && eventDate.compareTo( categoryOption.getStartDate() ) < 0 )\n+            if ( categoryOption.getStartDate() != null &&\n+                eventDate.compareTo( categoryOption.getStartDate() ) < 0 )\n             {\n-                return error( \"Event date \" + getMediumDateString( eventDate ) + \" is before start date \"\n-                    + getMediumDateString( categoryOption.getStartDate() ) + \" for attributeOption '\"\n-                    + categoryOption.getName() + \"'\", event.getEvent() );\n+                return error( \"Event date \" + getMediumDateString( eventDate )\n+                    + \" is before start date \" + getMediumDateString( categoryOption.getStartDate() )\n+                    + \" for attributeOption '\" + categoryOption.getName() + \"'\", event.getEvent() );\n             }\n \n-            if ( categoryOption.getEndDate() != null && eventDate.compareTo( categoryOption.getEndDate() ) > 0 )\n+            if ( categoryOption.getEndDate() != null &&\n+                eventDate.compareTo( categoryOption.getAdjustedEndDate( program ) ) > 0 )\n             {\n-                return error( \"Event date \" + getMediumDateString( eventDate ) + \" is after end date \"\n-                    + getMediumDateString( categoryOption.getEndDate() ) + \" for attributeOption '\"\n-                    + categoryOption.getName() + \"'\", event.getEvent() );\n+                return error( \"Event date \" + getMediumDateString( eventDate )\n+                    + \" is after end date \" + getMediumDateString( categoryOption.getAdjustedEndDate( program ) )\n+                    + \" for attributeOption '\" + categoryOption.getName()\n+                    + \"' in program '\" + program.getName() + \"'\", event.getEvent() );\n             }\n         }\n \n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "message": "Merge commit", "committedDate": null}, {"oid": "8aaeab2ee4dd7a9ffa927147931dff8609ef787a", "committedDate": "2020-09-23 15:33:34 +0200", "message": "chore: Remove unused imports (#6219)"}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "5f0613c57316bb855e4b9ee931932f23edf54142", "committedDate": "2021-11-16 10:54:05 -0500", "message": "feat: Program.openDaysAfterCoEndDate DHIS2-11234 (#9219)"}, {"oid": "1e593837ab1c64884a8ac615c7cc8c3471a219ee", "committedDate": "2021-11-18 09:33:25 +0100", "message": "refactor: validators, checkers and processors in old importer are now spring beans [TECH-797] (#9218)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "02336c9611c0dd85d5038223bddbfdebc0aae526", "committedDate": "2023-05-11 19:34:26 +0200", "message": "chore: move old tracker dxf2 code into deprecated package (#13901)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODI1NTU1NA==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448255554", "body": "Out of curiosity, could you explain a little about this change. Since this affects a lot of stuff outside tracker also it would be interesting to know.", "bodyText": "Out of curiosity, could you explain a little about this change. Since this affects a lot of stuff outside tracker also it would be interesting to know.", "bodyHTML": "<p dir=\"auto\">Out of curiosity, could you explain a little about this change. Since this affects a lot of stuff outside tracker also it would be interesting to know.</p>", "author": "netroms", "createdAt": "2020-07-01T10:00:51Z", "path": "dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/common/hibernate/HibernateIdentifiableObjectStore.java", "diffHunk": "@@ -269,24 +269,23 @@ public void update( T object, User user )\n     {\n         String username = user != null ? user.getUsername() : \"system-process\";\n \n-        if ( IdentifiableObject.class.isInstance( object ) )\n+        if ( object != null )\n         {\n             object.setAutoFields();\n \n-            BaseIdentifiableObject identifiableObject = object;\n-            identifiableObject.setAutoFields();\n-            identifiableObject.setLastUpdatedBy( user );\n+            object.setAutoFields();\n+            object.setLastUpdatedBy( user );\n \n-            if ( identifiableObject.getUser() == null )\n+            if ( object.getUser() == null )\n             {\n-                identifiableObject.setUser( user );\n+                object.setUser( user );\n             }\n         }\n \n         if ( !isUpdateAllowed( object, user ) )\n         {\n             AuditLogUtil.infoWrapper( log, username, object, AuditLogUtil.ACTION_UPDATE_DENIED );\n-            throw new UpdateAccessDeniedException( object.toString() );\n+            throw new UpdateAccessDeniedException( String.valueOf( object ) );\n         }", "originalCommit": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ0ODYwMg==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448448602", "bodyText": "Sure:\n\nif ( IdentifiableObject.class.isInstance( object ) ) is replaced with object != null (because  extends BaseIdentifiableObject) so checking if isInstance is useless\nThe rest of the change is just removing the useless cast and replace with the actual function parameter (object)", "author": "luciano-fiandesio", "createdAt": "2020-07-01T15:35:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODI1NTU1NA=="}], "type": "inlineReview", "revised_code": {"commit": "d360652a896bee650a842567e26cd1e62145cccb", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/common/hibernate/HibernateIdentifiableObjectStore.java b/dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/common/hibernate/HibernateIdentifiableObjectStore.java\nindex 5d678de176..a453c2976d 100644\n--- a/dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/common/hibernate/HibernateIdentifiableObjectStore.java\n+++ b/dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/common/hibernate/HibernateIdentifiableObjectStore.java\n", "chunk": "@@ -285,7 +287,7 @@ public class HibernateIdentifiableObjectStore<T extends BaseIdentifiableObject>\n         if ( !isUpdateAllowed( object, user ) )\n         {\n             AuditLogUtil.infoWrapper( log, username, object, AuditLogUtil.ACTION_UPDATE_DENIED );\n-            throw new UpdateAccessDeniedException( String.valueOf( object ) );\n+            throw new UpdateAccessDeniedException( object.toString() );\n         }\n \n         AuditLogUtil.infoWrapper( log, username, object, AuditLogUtil.ACTION_UPDATE );\n", "next_change": {"commit": "b29a3689068bb66746fb12bde65911fdcfe74a44", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/common/hibernate/HibernateIdentifiableObjectStore.java b/dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/common/hibernate/HibernateIdentifiableObjectStore.java\nindex a453c2976d..e2f3fecfb0 100644\n--- a/dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/common/hibernate/HibernateIdentifiableObjectStore.java\n+++ b/dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/common/hibernate/HibernateIdentifiableObjectStore.java\n", "chunk": "@@ -287,7 +287,7 @@ public class HibernateIdentifiableObjectStore<T extends BaseIdentifiableObject>\n         if ( !isUpdateAllowed( object, user ) )\n         {\n             AuditLogUtil.infoWrapper( log, username, object, AuditLogUtil.ACTION_UPDATE_DENIED );\n-            throw new UpdateAccessDeniedException( object.toString() );\n+            throw new UpdateAccessDeniedException( String.valueOf( object ) );\n         }\n \n         AuditLogUtil.infoWrapper( log, username, object, AuditLogUtil.ACTION_UPDATE );\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "3e25b9b834757233501b068c1fd96b5b68cc22f7", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/common/hibernate/HibernateIdentifiableObjectStore.java b/dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/common/hibernate/HibernateIdentifiableObjectStore.java\nindex 5d678de176..181286db67 100644\n--- a/dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/common/hibernate/HibernateIdentifiableObjectStore.java\n+++ b/dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/common/hibernate/HibernateIdentifiableObjectStore.java\n", "chunk": "@@ -276,9 +218,9 @@ public class HibernateIdentifiableObjectStore<T extends BaseIdentifiableObject>\n             object.setAutoFields();\n             object.setLastUpdatedBy( user );\n \n-            if ( object.getUser() == null )\n+            if ( object.getSharing().getOwner() == null )\n             {\n-                object.setUser( user );\n+                object.getSharing().setOwner( user );\n             }\n         }\n \n", "next_change": {"commit": "10b11c17ef2f2964263efc051f96c8e8f8f7e1f4", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/common/hibernate/HibernateIdentifiableObjectStore.java b/dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/common/hibernate/HibernateIdentifiableObjectStore.java\nindex 181286db67..a02bd3973c 100644\n--- a/dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/common/hibernate/HibernateIdentifiableObjectStore.java\n+++ b/dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/common/hibernate/HibernateIdentifiableObjectStore.java\n", "chunk": "@@ -222,6 +224,11 @@ public class HibernateIdentifiableObjectStore<T extends BaseIdentifiableObject>\n             {\n                 object.getSharing().setOwner( user );\n             }\n+\n+            if ( object.getCreatedBy() == null )\n+            {\n+                object.setCreatedBy( user );\n+            }\n         }\n \n         if ( !isUpdateAllowed( object, user ) )\n", "next_change": {"commit": "add6ee3fa78ffe2c7e6864a611b92913ca636a2a", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/common/hibernate/HibernateIdentifiableObjectStore.java b/dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/common/hibernate/HibernateIdentifiableObjectStore.java\nindex a02bd3973c..98ef5cc322 100644\n--- a/dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/common/hibernate/HibernateIdentifiableObjectStore.java\n+++ b/dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/common/hibernate/HibernateIdentifiableObjectStore.java\n", "chunk": "@@ -203,32 +178,29 @@ public class HibernateIdentifiableObjectStore<T extends BaseIdentifiableObject>\n     }\n \n     @Override\n-    public void update( T object )\n+    public void update( @Nonnull T object )\n     {\n-        update( object, getCurrentUser() );\n+        update( object, currentUserService.getCurrentUser() );\n     }\n \n     @Override\n-    public void update( T object, User user )\n+    public void update( @Nonnull T object, @CheckForNull User user )\n     {\n         String username = user != null ? user.getUsername() : \"system-process\";\n \n-        if ( object != null )\n-        {\n-            object.setAutoFields();\n+        object.setAutoFields();\n \n-            object.setAutoFields();\n-            object.setLastUpdatedBy( user );\n+        object.setAutoFields();\n+        object.setLastUpdatedBy( user );\n \n-            if ( object.getSharing().getOwner() == null )\n-            {\n-                object.getSharing().setOwner( user );\n-            }\n+        if ( object.getSharing().getOwner() == null )\n+        {\n+            object.getSharing().setOwner( user );\n+        }\n \n-            if ( object.getCreatedBy() == null )\n-            {\n-                object.setCreatedBy( user );\n-            }\n+        if ( object.getCreatedBy() == null )\n+        {\n+            object.setCreatedBy( user );\n         }\n \n         if ( !isUpdateAllowed( object, user ) )\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "message": "Merge commit", "committedDate": null}, {"oid": "3e25b9b834757233501b068c1fd96b5b68cc22f7", "committedDate": "2020-12-22 12:59:13 +0100", "message": "feat: Convert sharing objects to JSONB structure [DHIS2-5814]"}, {"oid": "5e4669b4c89c809989ea600900735dd71baa86e2", "committedDate": "2020-12-23 14:00:18 +0700", "message": "feat: Upgrade Hibernate  (#6939)"}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "10b11c17ef2f2964263efc051f96c8e8f8f7e1f4", "committedDate": "2021-02-02 12:33:59 +0100", "message": "feat: change user property name to createdBy (#7061)"}, {"oid": "27bb970f7df4e3752635046a016a07f96250cca6", "committedDate": "2021-03-24 09:37:51 +0100", "message": "perf: reduce queries performed by eventRows (#7710)"}, {"oid": "f364a6569a1e0336d30488ca268c342133c20697", "committedDate": "2021-03-24 22:10:34 +0700", "message": "fix: can't update publicAccess (#7724)"}, {"oid": "23813c31c9ad280a95b10d2ac7dd898c50e6e168", "committedDate": "2021-05-19 21:47:00 +0700", "message": "fix: added function for remove usergroupuid (#8007)"}, {"oid": "1f0255171005ee2e8c8a17120f691fe5abc5795f", "committedDate": "2021-10-07 16:02:02 +0200", "message": "chore: set test dependencies in a type safe and discoverable manner (#8960)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "8ccf9a288a67e5ee5349024fd3d281372c64c956", "committedDate": "2022-02-22 13:25:35 +0800", "message": "feat: Merge User/UserCredentials into one DB table (#9754)"}, {"oid": "d99da048b6427aa16b080ab0a0e25eda4a2a0f96", "committedDate": "2022-05-09 13:53:18 +0200", "message": "feat: Refactor getCurrentUser() to return DHIS2 User object 2 (#10600)"}, {"oid": "eb9da74ab83a32ccb3ca506c6a91a805cfc95081", "committedDate": "2022-05-19 14:04:44 +0700", "message": "feat: GeoJson import [DHIS2-7171] (#10838)"}, {"oid": "ae96d6908c99550a8de0c41261e9a9e413aa67f0", "committedDate": "2022-05-19 15:07:48 +0200", "message": "chore: cleanup generic object store (#10861)"}, {"oid": "16ff9f07782d088d8e9e4d6c0dd7ed486dbca59e", "committedDate": "2022-05-25 09:34:37 +0200", "message": "fix: Revert the current user session detachment (#10868)"}, {"oid": "4fa7e05a0f1873a444ca5d979c5343d41bf6f685", "committedDate": "2022-06-07 18:17:17 +0200", "message": "feat: Add load by UID and code methods to store layer (#11032)"}, {"oid": "2c0aa62cc8f940e7629f081284bb01dac8c9faee", "committedDate": "2022-06-21 19:38:49 +0200", "message": "feat: Add filters to TEDV audit endpoint [DHIS2-13421] (#11125)"}, {"oid": "fe6cd5c15741eee4b7e41e517d45226da327fb75", "committedDate": "2022-07-16 23:39:30 +0200", "message": "chore: use CurrentUserDetails in HibernateIdentifiableObjectStore (#11297)"}, {"oid": "1c3ef2f771038a9d5257681e2a64862df246433f", "committedDate": "2022-08-23 14:17:25 +0800", "message": "chore: remove unused Target interfaces (#11525)"}, {"oid": "9b46ab24b032ee39aecaf1b0c25902cfb0315f6d", "committedDate": "2022-10-13 08:27:43 +0700", "message": "chore: @Nonnull and @CheckForNull in DefaultIdentifiableObjectManager  [TECH-1460] (#12102)"}, {"oid": "add6ee3fa78ffe2c7e6864a611b92913ca636a2a", "committedDate": "2022-10-18 06:07:23 +0200", "message": "chore: add @Nonnull to generic store implementation [TECH-1460] (#12146)"}, {"oid": "829a0df3282f369873e647d14770e5d022c5beee", "committedDate": "2023-02-10 07:27:30 +0100", "message": "feat: add IdObjectDeletionHandler for handling User deletion [DHIS2-13470]"}, {"oid": "8c0aa62dc3a7f56cf9d5581c0136ed1461712fc9", "committedDate": "2023-02-14 08:22:43 +0100", "message": "feat: API router / gateway (#12843)"}, {"oid": "7185b97dada8b220446b63bd8f68163a9b64ad40", "committedDate": "2023-04-21 17:44:44 +0700", "message": "chore: remove sharing backward compatibility code  (#12991)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODgyOTgwNw==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448829807", "body": "Is this done for performance?\r\n\r\nWould it be faster to use Set instead of List for faster get lookups?", "bodyText": "Is this done for performance?\nWould it be faster to use Set instead of List for faster get lookups?", "bodyHTML": "<p dir=\"auto\">Is this done for performance?</p>\n<p dir=\"auto\">Would it be faster to use Set instead of List for faster get lookups?</p>", "author": "larshelge", "createdAt": "2020-07-02T08:18:50Z", "path": "dhis-2/dhis-api/src/main/java/org/hisp/dhis/organisationunit/OrganisationUnit.java", "diffHunk": "@@ -430,12 +431,13 @@ public boolean isDescendant( Set<OrganisationUnit> ancestors )\n         {\n             return false;\n         }\n+        List<String> ancestorsUid = ancestors.stream().map( OrganisationUnit::getUid ).collect( Collectors.toList() );", "originalCommit": "567f633c58a080f96aecf93b2844f13350f9c834", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU0MzUwMg==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r449543502", "bodyText": "True, fixed", "author": "luciano-fiandesio", "createdAt": "2020-07-03T11:52:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODgyOTgwNw=="}], "type": "inlineReview", "revised_code": null, "revised_code_in_main": null, "commits_in_main": [{"oid": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "message": "Merge commit", "committedDate": null}, {"oid": "32f74a48b0137443902cc43f9229daf98e0fd782", "committedDate": "2020-09-27 19:42:00 +0200", "message": "fix: remove custom serialization for OU.getChildren() (#6268)"}, {"oid": "2119eaa446921e079e6ce9758b01271282004305", "committedDate": "2020-10-16 12:01:19 +0200", "message": "chore: Remove unused code (#6420)"}, {"oid": "3e799d196b8f73ad216ea100a07ddd5f7dfc53e0", "committedDate": "2020-11-30 16:37:14 +0100", "message": "fix: remove long running transaction during Tracker Import (#6782)"}, {"oid": "46a6332d7e98e182f4e1226638a3d5e2ae136361", "committedDate": "2020-12-09 11:53:22 +0100", "message": "fix: Clean up data analysis code (#6858)"}, {"oid": "5e4669b4c89c809989ea600900735dd71baa86e2", "committedDate": "2020-12-23 14:00:18 +0700", "message": "feat: Upgrade Hibernate  (#6939)"}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "83ca43c6ceadf87499778b0092ed4463832ca66d", "committedDate": "2021-01-28 17:36:32 +0100", "message": "feat: Add method for retrieving org units with program (#7206)"}, {"oid": "188e05184373bd300fc6ccd59c8207db592784a2", "committedDate": "2021-02-17 14:35:26 +0100", "message": "fix: Remove cyclic reference check in analytics validation (#7392)"}, {"oid": "4e2885bfbf702ff244a2b3ec23a32afc673daae7", "committedDate": "2021-04-20 08:00:45 +0700", "message": "feat: Large Collection API (Gist) [DHIS2-10740] (#7766)"}, {"oid": "e30157bfef2eb6560f4e4a0dd47b477adc1fe43e", "committedDate": "2021-06-08 16:06:00 +0700", "message": "feat: add OrgUnit image property (#8146)"}, {"oid": "747c97c1dde24d425bfa0fb282562d2700fdab1f", "committedDate": "2021-06-14 22:49:21 +0200", "message": "fix: Clean up error codes (#8215)"}, {"oid": "51ad37dffdefc8947b61748a9659885af73dfcbe", "committedDate": "2021-11-26 09:25:35 +0100", "message": "fix: Add validation for target org unit being descendant of source (#9321)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "d99da048b6427aa16b080ab0a0e25eda4a2a0f96", "committedDate": "2022-05-09 13:53:18 +0200", "message": "feat: Refactor getCurrentUser() to return DHIS2 User object 2 (#10600)"}, {"oid": "05b239287b6e853c5b77fff92e3f342adc7d2af1", "committedDate": "2023-01-12 10:26:29 +0100", "message": "fix: Improve code quality in visualization grid service (#12734)"}, {"oid": "334a411718d6a7ae78b228d10a60ac9e1b94e74f", "committedDate": "2023-03-01 10:37:02 +0100", "message": "fix: Org unit descendant check using path property [TECH-1511] (#13171)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg2MjQwNA==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448862404", "body": "A little java doc would be useful here.", "bodyText": "A little java doc would be useful here.", "bodyHTML": "<p dir=\"auto\">A little java doc would be useful here.</p>", "author": "zubaira", "createdAt": "2020-07-02T09:12:18Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/Checker.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer;\n+\n+import static org.hisp.dhis.dxf2.importsummary.ImportSummary.error;\n+import static org.hisp.dhis.dxf2.importsummary.ImportSummary.success;\n+\n+import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n+import org.hisp.dhis.dxf2.events.importer.shared.ImmutableEvent;\n+import org.hisp.dhis.dxf2.importsummary.ImportSummary;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+public interface Checker", "originalCommit": "be93f0a98f40d2f0ec13eb2f3ad519d6d0e6fa96", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU0Mjk3Mg==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r449542972", "bodyText": "Very right, fixed", "author": "luciano-fiandesio", "createdAt": "2020-07-03T11:51:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg2MjQwNA=="}], "type": "inlineReview", "revised_code": null, "revised_code_in_main": null, "commits_in_main": [{"oid": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "message": "Merge commit", "committedDate": null}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "02336c9611c0dd85d5038223bddbfdebc0aae526", "committedDate": "2023-05-11 19:34:26 +0200", "message": "chore: move old tracker dxf2 code into deprecated package (#13901)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTAwNzkzNA==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r449007934", "body": "not used anymore.", "bodyText": "not used anymore.", "bodyHTML": "<p dir=\"auto\">not used anymore.</p>", "author": "zubaira", "createdAt": "2020-07-02T13:38:14Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/InsertValidationFactory.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer.insert.validation;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+import static java.util.Collections.emptyList;\n+import static org.hisp.dhis.dxf2.events.importer.ImportStrategyUtils.isInsert;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.hisp.dhis.dxf2.events.event.Event;\n+import org.hisp.dhis.dxf2.events.importer.Checker;\n+import org.hisp.dhis.dxf2.events.importer.EventChecking;\n+import org.hisp.dhis.dxf2.events.importer.ImportStrategyUtils;", "originalCommit": "be93f0a98f40d2f0ec13eb2f3ad519d6d0e6fa96", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTAyMjA5Mg==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r449022092", "bodyText": "hi @zubaira I'm not sure I understand this comment. What is no longer used?", "author": "luciano-fiandesio", "createdAt": "2020-07-02T13:58:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTAwNzkzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTAyNDg2Nw==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r449024867", "bodyText": "Sorry, @luciano-fiandesio I should have mentioned it.\nIts about unused import org.hisp.dhis.dxf2.events.importer.ImportStrategyUtils;", "author": "zubaira", "createdAt": "2020-07-02T14:02:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTAwNzkzNA=="}], "type": "inlineReview", "revised_code": null, "revised_code_in_main": null, "commits_in_main": [{"oid": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "message": "Merge commit", "committedDate": null}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "1e593837ab1c64884a8ac615c7cc8c3471a219ee", "committedDate": "2021-11-18 09:33:25 +0100", "message": "refactor: validators, checkers and processors in old importer are now spring beans [TECH-797] (#9218)"}]}, {"oid": "7032498b0cbac9437a93d7deeb72862937c55a98", "url": "https://github.com/dhis2/dhis2-core/commit/7032498b0cbac9437a93d7deeb72862937c55a98", "message": "chore: removed unused var", "committedDate": "2020-07-03T12:10:41Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzI2NTUyNQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r457265525", "body": "package declaration normally comes before Copyright statement. ", "bodyText": "package declaration normally comes before Copyright statement.", "bodyHTML": "<p dir=\"auto\">package declaration normally comes before Copyright statement.</p>", "author": "ameenhere", "createdAt": "2020-07-20T10:36:15Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/preprocess/PreInsertProcessorFactory.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer.insert.preprocess;", "originalCommit": "dc20b8a9249359bcdd1f612b1852f728ef63b7ab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA0Njk1MA==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r462046950", "bodyText": "Fixed", "author": "luciano-fiandesio", "createdAt": "2020-07-29T05:28:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzI2NTUyNQ=="}], "type": "inlineReview", "revised_code": {"commit": "d0687a6c7c9e1c4dd64c4dc669bb80ae6e8c8c8b", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/preprocess/PreInsertProcessorFactory.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/preprocess/PreInsertProcessorFactory.java\nindex 72963db43b..0826b63ee4 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/preprocess/PreInsertProcessorFactory.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/preprocess/PreInsertProcessorFactory.java\n", "chunk": "@@ -26,8 +28,6 @@\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n \n-package org.hisp.dhis.dxf2.events.importer.insert.preprocess;\n-\n import java.util.List;\n import java.util.Map;\n \n", "next_change": {"commit": "d360652a896bee650a842567e26cd1e62145cccb", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/preprocess/PreInsertProcessorFactory.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/preprocess/PreInsertProcessorFactory.java\nindex 0826b63ee4..72963db43b 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/preprocess/PreInsertProcessorFactory.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/preprocess/PreInsertProcessorFactory.java\n", "chunk": "@@ -28,6 +26,8 @@ package org.hisp.dhis.dxf2.events.importer.insert.preprocess;\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n \n+package org.hisp.dhis.dxf2.events.importer.insert.preprocess;\n+\n import java.util.List;\n import java.util.Map;\n \n", "next_change": {"commit": "2bafb84a2b042590bfaf5f8178cc2794528b0658", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/preprocess/PreInsertProcessorFactory.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/preprocess/PreInsertProcessorFactory.java\nindex 72963db43b..0826b63ee4 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/preprocess/PreInsertProcessorFactory.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/preprocess/PreInsertProcessorFactory.java\n", "chunk": "@@ -26,8 +28,6 @@\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n \n-package org.hisp.dhis.dxf2.events.importer.insert.preprocess;\n-\n import java.util.List;\n import java.util.Map;\n \n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/preprocess/PreInsertProcessorFactory.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/preprocess/PreInsertProcessorFactory.java\nindex 72963db43b..0826b63ee4 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/preprocess/PreInsertProcessorFactory.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/preprocess/PreInsertProcessorFactory.java\n", "chunk": "@@ -26,8 +28,6 @@\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n \n-package org.hisp.dhis.dxf2.events.importer.insert.preprocess;\n-\n import java.util.List;\n import java.util.Map;\n \n", "next_change": {"commit": "f8cfa7437ac99962a94ceef4b9150478899ceb2b", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/preprocess/PreInsertProcessorFactory.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/preprocess/PreInsertProcessorFactory.java\nindex 0826b63ee4..09fea6a764 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/preprocess/PreInsertProcessorFactory.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/preprocess/PreInsertProcessorFactory.java\n", "chunk": "@@ -28,39 +28,38 @@ package org.hisp.dhis.dxf2.events.importer.insert.preprocess;\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n \n+import static org.hisp.dhis.importexport.ImportStrategy.CREATE;\n+\n import java.util.List;\n import java.util.Map;\n+import java.util.function.Predicate;\n \n-import org.hisp.dhis.dxf2.events.event.Event;\n-import org.hisp.dhis.dxf2.events.importer.EventProcessing;\n+import org.hisp.dhis.dxf2.events.importer.AbstractProcessorFactory;\n import org.hisp.dhis.dxf2.events.importer.ImportStrategyUtils;\n import org.hisp.dhis.dxf2.events.importer.Processor;\n-import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n import org.hisp.dhis.importexport.ImportStrategy;\n+import org.springframework.beans.factory.annotation.Qualifier;\n import org.springframework.stereotype.Component;\n \n+import lombok.Getter;\n+import lombok.NonNull;\n+import lombok.RequiredArgsConstructor;\n+\n /**\n  * @author Luciano Fiandesio\n  */\n+@Getter\n @Component( \"eventsPreInsertProcessorFactory\" )\n-public class PreInsertProcessorFactory implements EventProcessing\n+@RequiredArgsConstructor\n+public class PreInsertProcessorFactory extends AbstractProcessorFactory\n {\n-    private final Map<ImportStrategy, List<Class<? extends Processor>>> eventPreProcessorsMap;\n \n-    public PreInsertProcessorFactory(\n-        final Map<ImportStrategy, List<Class<? extends Processor>>> eventInsertPreProcessorsMap )\n-    {\n-        this.eventPreProcessorsMap = eventInsertPreProcessorsMap;\n-    }\n+    @NonNull\n+    @Qualifier( \"eventInsertPreProcessorMap\" )\n+    private final Map<ImportStrategy, List<Class<? extends Processor>>> processorMap;\n+\n+    private final ImportStrategy importStrategy = CREATE;\n \n-    @Override\n-    public void process( final WorkContext workContext, final List<Event> events )\n-    {\n-        ImportStrategy importStrategy = workContext.getImportOptions().getImportStrategy();\n+    private final Predicate<ImportStrategy> importStrategyPredicate = ImportStrategyUtils::isInsert;\n \n-        if ( ImportStrategyUtils.isInsert( importStrategy ) )\n-        {\n-            new ProcessorRunner( workContext, events ).run( eventPreProcessorsMap.get( ImportStrategy.CREATE ) );\n-        }\n-    }\n }\n", "next_change": {"commit": "1e593837ab1c64884a8ac615c7cc8c3471a219ee", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/preprocess/PreInsertProcessorFactory.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/InsertValidatingEventChecker.java\nsimilarity index 68%\nrename from dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/preprocess/PreInsertProcessorFactory.java\nrename to dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/InsertValidatingEventChecker.java\nindex 09fea6a764..3c38b237db 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/preprocess/PreInsertProcessorFactory.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/InsertValidatingEventChecker.java\n", "chunk": "@@ -27,39 +25,37 @@ package org.hisp.dhis.dxf2.events.importer.insert.preprocess;\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+package org.hisp.dhis.dxf2.events.importer.insert.validation;\n \n+import static com.google.common.base.Preconditions.checkNotNull;\n import static org.hisp.dhis.importexport.ImportStrategy.CREATE;\n \n import java.util.List;\n import java.util.Map;\n import java.util.function.Predicate;\n \n-import org.hisp.dhis.dxf2.events.importer.AbstractProcessorFactory;\n+import lombok.Getter;\n+\n+import org.hisp.dhis.dxf2.events.importer.Checker;\n+import org.hisp.dhis.dxf2.events.importer.EventImporterValidationRunner;\n import org.hisp.dhis.dxf2.events.importer.ImportStrategyUtils;\n-import org.hisp.dhis.dxf2.events.importer.Processor;\n+import org.hisp.dhis.dxf2.events.importer.ValidatingEventChecker;\n import org.hisp.dhis.importexport.ImportStrategy;\n-import org.springframework.beans.factory.annotation.Qualifier;\n import org.springframework.stereotype.Component;\n \n-import lombok.Getter;\n-import lombok.NonNull;\n-import lombok.RequiredArgsConstructor;\n-\n /**\n  * @author Luciano Fiandesio\n  */\n-@Getter\n-@Component( \"eventsPreInsertProcessorFactory\" )\n-@RequiredArgsConstructor\n-public class PreInsertProcessorFactory extends AbstractProcessorFactory\n+@Component\n+public class InsertValidatingEventChecker extends ValidatingEventChecker\n {\n-\n-    @NonNull\n-    @Qualifier( \"eventInsertPreProcessorMap\" )\n-    private final Map<ImportStrategy, List<Class<? extends Processor>>> processorMap;\n-\n-    private final ImportStrategy importStrategy = CREATE;\n-\n-    private final Predicate<ImportStrategy> importStrategyPredicate = ImportStrategyUtils::isInsert;\n-\n+    @Getter\n+    private final Predicate<ImportStrategy> supportedPredicate = ImportStrategyUtils::isInsert;\n+\n+    public InsertValidatingEventChecker( final Map<ImportStrategy, List<Checker>> checkersByImportStrategy,\n+        EventImporterValidationRunner validationRunner )\n+    {\n+        super( checkNotNull(\n+            checkNotNull( checkersByImportStrategy ).get( CREATE ) ), validationRunner );\n+    }\n }\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "message": "Merge commit", "committedDate": null}, {"oid": "f8cfa7437ac99962a94ceef4b9150478899ceb2b", "committedDate": "2020-09-11 13:59:14 +0200", "message": "fix: audit for event importer are now present (#6138) (#6140)"}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "1e593837ab1c64884a8ac615c7cc8c3471a219ee", "committedDate": "2021-11-18 09:33:25 +0100", "message": "refactor: validators, checkers and processors in old importer are now spring beans [TECH-797] (#9218)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQyMzIzNA==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r457423234", "body": "package declaration.", "bodyText": "package declaration.", "bodyHTML": "<p dir=\"auto\">package declaration.</p>", "author": "ameenhere", "createdAt": "2020-07-20T14:12:28Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventChecking.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer;", "originalCommit": "dc20b8a9249359bcdd1f612b1852f728ef63b7ab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA0NzA3Nw==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r462047077", "bodyText": "Fixed", "author": "luciano-fiandesio", "createdAt": "2020-07-29T05:28:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQyMzIzNA=="}], "type": "inlineReview", "revised_code": {"commit": "d0687a6c7c9e1c4dd64c4dc669bb80ae6e8c8c8b", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventChecking.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventChecking.java\nindex 8af9c66afb..67ece587de 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventChecking.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventChecking.java\n", "chunk": "@@ -26,8 +28,6 @@\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n \n-package org.hisp.dhis.dxf2.events.importer;\n-\n import static org.apache.commons.logging.LogFactory.getLog;\n import static org.hisp.dhis.dxf2.importsummary.ImportStatus.ERROR;\n \n", "next_change": {"commit": "d360652a896bee650a842567e26cd1e62145cccb", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventChecking.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventChecking.java\nindex 67ece587de..2b07c2b54c 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventChecking.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventChecking.java\n", "chunk": "@@ -28,6 +26,8 @@ package org.hisp.dhis.dxf2.events.importer;\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n \n+package org.hisp.dhis.dxf2.events.importer;\n+\n import static org.apache.commons.logging.LogFactory.getLog;\n import static org.hisp.dhis.dxf2.importsummary.ImportStatus.ERROR;\n \n", "next_change": {"commit": "2bafb84a2b042590bfaf5f8178cc2794528b0658", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventChecking.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventChecking.java\nindex 2b07c2b54c..67ece587de 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventChecking.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventChecking.java\n", "chunk": "@@ -26,8 +28,6 @@\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n \n-package org.hisp.dhis.dxf2.events.importer;\n-\n import static org.apache.commons.logging.LogFactory.getLog;\n import static org.hisp.dhis.dxf2.importsummary.ImportStatus.ERROR;\n \n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventChecking.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventChecking.java\nindex 8af9c66afb..67ece587de 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventChecking.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventChecking.java\n", "chunk": "@@ -26,8 +28,6 @@\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n \n-package org.hisp.dhis.dxf2.events.importer;\n-\n import static org.apache.commons.logging.LogFactory.getLog;\n import static org.hisp.dhis.dxf2.importsummary.ImportStatus.ERROR;\n \n", "next_change": {"commit": "ea76fa86409613c9766d4508d65c88ac55c413c3", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventChecking.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventChecking.java\nindex 67ece587de..86db0dca7c 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventChecking.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventChecking.java\n", "chunk": "@@ -27,6 +25,7 @@ package org.hisp.dhis.dxf2.events.importer;\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+package org.hisp.dhis.dxf2.events.importer;\n \n import static org.apache.commons.logging.LogFactory.getLog;\n import static org.hisp.dhis.dxf2.importsummary.ImportStatus.ERROR;\n", "next_change": {"commit": "d1997b84b16b9b0aae5ed727af34b01ae415e5e4", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventChecking.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventChecking.java\nindex 86db0dca7c..5b897029fa 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventChecking.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventChecking.java\n", "chunk": "@@ -29,6 +29,7 @@ package org.hisp.dhis.dxf2.events.importer;\n \n import static org.apache.commons.logging.LogFactory.getLog;\n import static org.hisp.dhis.dxf2.importsummary.ImportStatus.ERROR;\n+import static org.hisp.dhis.dxf2.importsummary.ImportStatus.WARNING;\n \n import java.util.ArrayList;\n import java.util.List;\n", "next_change": {"commit": "1e593837ab1c64884a8ac615c7cc8c3471a219ee", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventChecking.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventChecking.java\ndeleted file mode 100644\nindex 5b897029fa..0000000000\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventChecking.java\n+++ /dev/null\n", "chunk": "@@ -1,110 +0,0 @@\n-/*\n- * Copyright (c) 2004-2021, University of Oslo\n- * All rights reserved.\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions are met:\n- * Redistributions of source code must retain the above copyright notice, this\n- * list of conditions and the following disclaimer.\n- *\n- * Redistributions in binary form must reproduce the above copyright notice,\n- * this list of conditions and the following disclaimer in the documentation\n- * and/or other materials provided with the distribution.\n- * Neither the name of the HISP project nor the names of its contributors may\n- * be used to endorse or promote products derived from this software without\n- * specific prior written permission.\n- *\n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n- * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n- * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n- * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n- * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n- * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n- * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n- * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n- * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- */\n-package org.hisp.dhis.dxf2.events.importer;\n-\n-import static org.apache.commons.logging.LogFactory.getLog;\n-import static org.hisp.dhis.dxf2.importsummary.ImportStatus.ERROR;\n-import static org.hisp.dhis.dxf2.importsummary.ImportStatus.WARNING;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-\n-import org.apache.commons.logging.Log;\n-import org.hisp.dhis.dxf2.events.event.Event;\n-import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n-import org.hisp.dhis.dxf2.events.importer.shared.ImmutableEvent;\n-import org.hisp.dhis.dxf2.importsummary.ImportSummary;\n-\n-/**\n- * Simple interface that provides checking capabilities on events.\n- *\n- * @author maikel arabori\n- */\n-public interface EventChecking\n-{\n-    List<ImportSummary> check( final WorkContext workContext, final List<Event> events );\n-\n-    Log log = getLog( EventChecking.class );\n-\n-    class ValidationRunner\n-    {\n-        private final WorkContext workContext;\n-\n-        private final List<Event> events;\n-\n-        public ValidationRunner( WorkContext workContext, List<Event> events )\n-        {\n-            this.workContext = workContext;\n-            this.events = events;\n-        }\n-\n-        /**\n-         * Validates the events using the supplied list of validators.\n-         *\n-         * Only returns the ImportSummary for Events that *did* not pass\n-         * validation\n-         *\n-         * @param validators List of classes implementing the {@see Checker}\n-         *        interface\n-         * @return returns the ImportSummary for Events that did not pass\n-         *         validation\n-         */\n-        public List<ImportSummary> run( final List<Class<? extends Checker>> validators )\n-        {\n-            final List<ImportSummary> importSummaries = new ArrayList<>( 0 );\n-\n-            for ( final Event event : events )\n-            {\n-                for ( final Class<? extends Checker> validator : validators )\n-                {\n-                    try\n-                    {\n-                        final Checker validationCheck = validator.newInstance();\n-                        final ImportSummary importSummary = validationCheck.check( new ImmutableEvent( event ),\n-                            workContext );\n-\n-                        if ( importSummary.isStatus( ERROR ) || importSummary.isStatus( WARNING ) )\n-                        {\n-                            importSummaries.add( importSummary );\n-                            if ( importSummary.isStatus( ERROR ) )\n-                            {\n-                                break;\n-                            }\n-                        }\n-                    }\n-                    catch ( InstantiationException | IllegalAccessException e )\n-                    {\n-                        log.error( \"An error occurred during Event import validation\", e );\n-                    }\n-                }\n-            }\n-\n-            return importSummaries;\n-        }\n-    }\n-}\n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "message": "Merge commit", "committedDate": null}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "d1997b84b16b9b0aae5ed727af34b01ae415e5e4", "committedDate": "2021-02-05 15:46:57 +0100", "message": "fix: reporting undeclared data values in import summary [DHIS2-8910] (#7264)"}, {"oid": "1e593837ab1c64884a8ac615c7cc8c3471a219ee", "committedDate": "2021-11-18 09:33:25 +0100", "message": "refactor: validators, checkers and processors in old importer are now spring beans [TECH-797] (#9218)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQyNTY0OA==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r457425648", "body": "package declaration. ", "bodyText": "package declaration.", "bodyHTML": "<p dir=\"auto\">package declaration.</p>", "author": "ameenhere", "createdAt": "2020-07-20T14:15:17Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/Processor.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer;", "originalCommit": "dc20b8a9249359bcdd1f612b1852f728ef63b7ab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA0NzgyOA==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r462047828", "bodyText": "Fixed + Javadoc", "author": "luciano-fiandesio", "createdAt": "2020-07-29T05:31:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQyNTY0OA=="}], "type": "inlineReview", "revised_code": {"commit": "d0687a6c7c9e1c4dd64c4dc669bb80ae6e8c8c8b", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/Processor.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/Processor.java\nindex d2e9f662c7..af14eb3b4d 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/Processor.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/Processor.java\n", "chunk": "@@ -26,15 +28,23 @@\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n \n-package org.hisp.dhis.dxf2.events.importer;\n-\n import org.hisp.dhis.dxf2.events.event.Event;\n import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n \n /**\n+ * This interface is implemented by classes that operates before validation\n+ * (pre-processors) or post-persistence (post-processor)\n+ * \n  * @author Luciano Fiandesio\n  */\n public interface Processor\n {\n+    /**\n+     * Process an Event. Events that are processed through classes implementing this\n+     * method can be modified.\n+     * \n+     * @param event an instance of {@see Event}\n+     * @param workContext an instance of {@see WorkContext}\n+     */\n     void process( Event event, WorkContext workContext );\n }\n", "next_change": {"commit": "d360652a896bee650a842567e26cd1e62145cccb", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/Processor.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/Processor.java\nindex af14eb3b4d..d2e9f662c7 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/Processor.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/Processor.java\n", "chunk": "@@ -28,23 +26,15 @@ package org.hisp.dhis.dxf2.events.importer;\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n \n+package org.hisp.dhis.dxf2.events.importer;\n+\n import org.hisp.dhis.dxf2.events.event.Event;\n import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n \n /**\n- * This interface is implemented by classes that operates before validation\n- * (pre-processors) or post-persistence (post-processor)\n- * \n  * @author Luciano Fiandesio\n  */\n public interface Processor\n {\n-    /**\n-     * Process an Event. Events that are processed through classes implementing this\n-     * method can be modified.\n-     * \n-     * @param event an instance of {@see Event}\n-     * @param workContext an instance of {@see WorkContext}\n-     */\n     void process( Event event, WorkContext workContext );\n }\n", "next_change": {"commit": "2bafb84a2b042590bfaf5f8178cc2794528b0658", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/Processor.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/Processor.java\nindex d2e9f662c7..af14eb3b4d 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/Processor.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/Processor.java\n", "chunk": "@@ -26,15 +28,23 @@\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n \n-package org.hisp.dhis.dxf2.events.importer;\n-\n import org.hisp.dhis.dxf2.events.event.Event;\n import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n \n /**\n+ * This interface is implemented by classes that operates before validation\n+ * (pre-processors) or post-persistence (post-processor)\n+ * \n  * @author Luciano Fiandesio\n  */\n public interface Processor\n {\n+    /**\n+     * Process an Event. Events that are processed through classes implementing this\n+     * method can be modified.\n+     * \n+     * @param event an instance of {@see Event}\n+     * @param workContext an instance of {@see WorkContext}\n+     */\n     void process( Event event, WorkContext workContext );\n }\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/Processor.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/Processor.java\nindex d2e9f662c7..af14eb3b4d 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/Processor.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/Processor.java\n", "chunk": "@@ -26,15 +28,23 @@\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n \n-package org.hisp.dhis.dxf2.events.importer;\n-\n import org.hisp.dhis.dxf2.events.event.Event;\n import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n \n /**\n+ * This interface is implemented by classes that operates before validation\n+ * (pre-processors) or post-persistence (post-processor)\n+ * \n  * @author Luciano Fiandesio\n  */\n public interface Processor\n {\n+    /**\n+     * Process an Event. Events that are processed through classes implementing this\n+     * method can be modified.\n+     * \n+     * @param event an instance of {@see Event}\n+     * @param workContext an instance of {@see WorkContext}\n+     */\n     void process( Event event, WorkContext workContext );\n }\n", "next_change": {"commit": "ea76fa86409613c9766d4508d65c88ac55c413c3", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/Processor.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/Processor.java\nindex af14eb3b4d..dac5710f60 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/Processor.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/Processor.java\n", "chunk": "@@ -34,15 +33,15 @@ import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n /**\n  * This interface is implemented by classes that operates before validation\n  * (pre-processors) or post-persistence (post-processor)\n- * \n+ *\n  * @author Luciano Fiandesio\n  */\n public interface Processor\n {\n     /**\n-     * Process an Event. Events that are processed through classes implementing this\n-     * method can be modified.\n-     * \n+     * Process an Event. Events that are processed through classes implementing\n+     * this method can be modified.\n+     *\n      * @param event an instance of {@see Event}\n      * @param workContext an instance of {@see WorkContext}\n      */\n", "next_change": {"commit": "02336c9611c0dd85d5038223bddbfdebc0aae526", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/Processor.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/Processor.java\ndeleted file mode 100644\nindex dac5710f60..0000000000\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/Processor.java\n+++ /dev/null\n", "chunk": "@@ -1,49 +0,0 @@\n-/*\n- * Copyright (c) 2004-2021, University of Oslo\n- * All rights reserved.\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions are met:\n- * Redistributions of source code must retain the above copyright notice, this\n- * list of conditions and the following disclaimer.\n- *\n- * Redistributions in binary form must reproduce the above copyright notice,\n- * this list of conditions and the following disclaimer in the documentation\n- * and/or other materials provided with the distribution.\n- * Neither the name of the HISP project nor the names of its contributors may\n- * be used to endorse or promote products derived from this software without\n- * specific prior written permission.\n- *\n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n- * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n- * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n- * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n- * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n- * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n- * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n- * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n- * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- */\n-package org.hisp.dhis.dxf2.events.importer;\n-\n-import org.hisp.dhis.dxf2.events.event.Event;\n-import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n-\n-/**\n- * This interface is implemented by classes that operates before validation\n- * (pre-processors) or post-persistence (post-processor)\n- *\n- * @author Luciano Fiandesio\n- */\n-public interface Processor\n-{\n-    /**\n-     * Process an Event. Events that are processed through classes implementing\n-     * this method can be modified.\n-     *\n-     * @param event an instance of {@see Event}\n-     * @param workContext an instance of {@see WorkContext}\n-     */\n-    void process( Event event, WorkContext workContext );\n-}\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "message": "Merge commit", "committedDate": null}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "02336c9611c0dd85d5038223bddbfdebc0aae526", "committedDate": "2023-05-11 19:34:26 +0200", "message": "chore: move old tracker dxf2 code into deprecated package (#13901)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQyNjAzNg==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r457426036", "body": "package declaration.", "bodyText": "package declaration.", "bodyHTML": "<p dir=\"auto\">package declaration.</p>", "author": "ameenhere", "createdAt": "2020-07-20T14:15:47Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/ServiceDelegator.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer;", "originalCommit": "dc20b8a9249359bcdd1f612b1852f728ef63b7ab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA0ODAxMg==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r462048012", "bodyText": "Fixed", "author": "luciano-fiandesio", "createdAt": "2020-07-29T05:32:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQyNjAzNg=="}], "type": "inlineReview", "revised_code": {"commit": "d0687a6c7c9e1c4dd64c4dc669bb80ae6e8c8c8b", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/ServiceDelegator.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/ServiceDelegator.java\nindex bfb3d9641d..8a06d9bba9 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/ServiceDelegator.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/ServiceDelegator.java\n", "chunk": "@@ -26,18 +28,17 @@\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n \n-package org.hisp.dhis.dxf2.events.importer;\n-\n-import com.fasterxml.jackson.databind.ObjectMapper;\n import org.hisp.dhis.program.ProgramInstanceStore;\n import org.hisp.dhis.programrule.ProgramRuleVariableService;\n import org.hisp.dhis.trackedentity.TrackerAccessManager;\n import org.hisp.dhis.user.CurrentUserService;\n import org.springframework.context.ApplicationEventPublisher;\n+import org.springframework.jdbc.core.JdbcTemplate;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n \n import lombok.Builder;\n import lombok.Getter;\n-import org.springframework.jdbc.core.JdbcTemplate;\n \n /**\n  * Centralizes a collection of services and components that can be accessed by\n", "next_change": {"commit": "d360652a896bee650a842567e26cd1e62145cccb", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/ServiceDelegator.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/ServiceDelegator.java\nindex 8a06d9bba9..07eb912c4c 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/ServiceDelegator.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/ServiceDelegator.java\n", "chunk": "@@ -28,24 +26,19 @@ package org.hisp.dhis.dxf2.events.importer;\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n \n+package org.hisp.dhis.dxf2.events.importer;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n import org.hisp.dhis.program.ProgramInstanceStore;\n import org.hisp.dhis.programrule.ProgramRuleVariableService;\n import org.hisp.dhis.trackedentity.TrackerAccessManager;\n import org.hisp.dhis.user.CurrentUserService;\n import org.springframework.context.ApplicationEventPublisher;\n-import org.springframework.jdbc.core.JdbcTemplate;\n-\n-import com.fasterxml.jackson.databind.ObjectMapper;\n \n import lombok.Builder;\n import lombok.Getter;\n+import org.springframework.jdbc.core.JdbcTemplate;\n \n-/**\n- * Centralizes a collection of services and components that can be accessed by\n- * the consumer.\n- *\n- * @author maikel arabori\n- */\n @Getter\n @Builder\n public class ServiceDelegator\n", "next_change": {"commit": "bf042296956c38e5762dc2763da53fe23bc444a3", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/ServiceDelegator.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/ServiceDelegator.java\nindex 07eb912c4c..bfb3d9641d 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/ServiceDelegator.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/ServiceDelegator.java\n", "chunk": "@@ -39,6 +39,12 @@ import lombok.Builder;\n import lombok.Getter;\n import org.springframework.jdbc.core.JdbcTemplate;\n \n+/**\n+ * Centralizes a collection of services and components that can be accessed by\n+ * the consumer.\n+ *\n+ * @author maikel arabori\n+ */\n @Getter\n @Builder\n public class ServiceDelegator\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/ServiceDelegator.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/ServiceDelegator.java\nindex bfb3d9641d..8a06d9bba9 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/ServiceDelegator.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/ServiceDelegator.java\n", "chunk": "@@ -26,18 +28,17 @@\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n \n-package org.hisp.dhis.dxf2.events.importer;\n-\n-import com.fasterxml.jackson.databind.ObjectMapper;\n import org.hisp.dhis.program.ProgramInstanceStore;\n import org.hisp.dhis.programrule.ProgramRuleVariableService;\n import org.hisp.dhis.trackedentity.TrackerAccessManager;\n import org.hisp.dhis.user.CurrentUserService;\n import org.springframework.context.ApplicationEventPublisher;\n+import org.springframework.jdbc.core.JdbcTemplate;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n \n import lombok.Builder;\n import lombok.Getter;\n-import org.springframework.jdbc.core.JdbcTemplate;\n \n /**\n  * Centralizes a collection of services and components that can be accessed by\n", "next_change": {"commit": "ea76fa86409613c9766d4508d65c88ac55c413c3", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/ServiceDelegator.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/ServiceDelegator.java\nindex 8a06d9bba9..85a533dda9 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/ServiceDelegator.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/ServiceDelegator.java\n", "chunk": "@@ -27,19 +25,20 @@ package org.hisp.dhis.dxf2.events.importer;\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+package org.hisp.dhis.dxf2.events.importer;\n+\n+import lombok.Builder;\n+import lombok.Getter;\n \n+import org.hisp.dhis.artemis.audit.AuditManager;\n import org.hisp.dhis.program.ProgramInstanceStore;\n import org.hisp.dhis.programrule.ProgramRuleVariableService;\n import org.hisp.dhis.trackedentity.TrackerAccessManager;\n-import org.hisp.dhis.user.CurrentUserService;\n import org.springframework.context.ApplicationEventPublisher;\n import org.springframework.jdbc.core.JdbcTemplate;\n \n import com.fasterxml.jackson.databind.ObjectMapper;\n \n-import lombok.Builder;\n-import lombok.Getter;\n-\n /**\n  * Centralizes a collection of services and components that can be accessed by\n  * the consumer.\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "message": "Merge commit", "committedDate": null}, {"oid": "f8cfa7437ac99962a94ceef4b9150478899ceb2b", "committedDate": "2020-09-11 13:59:14 +0200", "message": "fix: audit for event importer are now present (#6138) (#6140)"}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "00b4b16e29d2506465f723a914352c1047a220fe", "committedDate": "2022-01-31 18:13:04 +0100", "message": "fix: Validate event association datavalues (#9669)"}, {"oid": "e03cf3818e639ba738dd01f658423914dcd7bfba", "committedDate": "2023-05-04 09:24:50 +0200", "message": "chore: Rename ProgramInstanceStore to EnrollmentStore [TECH-1547] (#13808)"}, {"oid": "02336c9611c0dd85d5038223bddbfdebc0aae526", "committedDate": "2023-05-11 19:34:26 +0200", "message": "chore: move old tracker dxf2 code into deprecated package (#13901)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQyOTI3MQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r457429271", "body": "package declaration before copyright", "bodyText": "package declaration before copyright", "bodyHTML": "<p dir=\"auto\">package declaration before copyright</p>", "author": "ameenhere", "createdAt": "2020-07-20T14:19:33Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/preprocess/ProgramInstanceUpdatePreProcessor.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer.update.preprocess;", "originalCommit": "dc20b8a9249359bcdd1f612b1852f728ef63b7ab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA0OTM1OQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r462049359", "bodyText": "Fixed", "author": "luciano-fiandesio", "createdAt": "2020-07-29T05:36:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQyOTI3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "d0687a6c7c9e1c4dd64c4dc669bb80ae6e8c8c8b", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/preprocess/ProgramInstanceUpdatePreProcessor.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/preprocess/ProgramStageInstanceUpdatePreProcessor.java\nsimilarity index 60%\nrename from dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/preprocess/ProgramInstanceUpdatePreProcessor.java\nrename to dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/preprocess/ProgramStageInstanceUpdatePreProcessor.java\nindex e912f36b62..674aba55dc 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/preprocess/ProgramInstanceUpdatePreProcessor.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/preprocess/ProgramStageInstanceUpdatePreProcessor.java\n", "chunk": "@@ -26,26 +28,20 @@\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n \n-package org.hisp.dhis.dxf2.events.importer.update.preprocess;\n-\n import static org.hisp.dhis.event.EventStatus.ACTIVE;\n import static org.hisp.dhis.event.EventStatus.COMPLETED;\n import static org.hisp.dhis.event.EventStatus.SCHEDULE;\n import static org.hisp.dhis.event.EventStatus.SKIPPED;\n-import static org.hisp.dhis.user.User.getSafeUsername;\n-import static org.hisp.dhis.user.UserCredentials.USERNAME_MAX_LENGTH;\n import static org.hisp.dhis.util.DateUtils.parseDate;\n-import static org.springframework.util.StringUtils.isEmpty;\n \n import java.util.Date;\n \n import org.hisp.dhis.category.CategoryOptionCombo;\n import org.hisp.dhis.dxf2.common.ImportOptions;\n import org.hisp.dhis.dxf2.events.event.Event;\n-import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n+import org.hisp.dhis.dxf2.events.event.EventUtils;\n import org.hisp.dhis.dxf2.events.importer.Processor;\n-import org.hisp.dhis.dxf2.importsummary.ImportConflict;\n-import org.hisp.dhis.dxf2.importsummary.ImportSummary;\n+import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n import org.hisp.dhis.organisationunit.OrganisationUnit;\n import org.hisp.dhis.program.ProgramStageInstance;\n import org.hisp.dhis.util.DateUtils;\n", "next_change": null}]}, "revised_code_in_main": {"commit": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/preprocess/ProgramInstanceUpdatePreProcessor.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/preprocess/ProgramStageInstanceUpdatePreProcessor.java\nsimilarity index 60%\nrename from dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/preprocess/ProgramInstanceUpdatePreProcessor.java\nrename to dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/preprocess/ProgramStageInstanceUpdatePreProcessor.java\nindex e912f36b62..674aba55dc 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/preprocess/ProgramInstanceUpdatePreProcessor.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/preprocess/ProgramStageInstanceUpdatePreProcessor.java\n", "chunk": "@@ -26,26 +28,20 @@\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n \n-package org.hisp.dhis.dxf2.events.importer.update.preprocess;\n-\n import static org.hisp.dhis.event.EventStatus.ACTIVE;\n import static org.hisp.dhis.event.EventStatus.COMPLETED;\n import static org.hisp.dhis.event.EventStatus.SCHEDULE;\n import static org.hisp.dhis.event.EventStatus.SKIPPED;\n-import static org.hisp.dhis.user.User.getSafeUsername;\n-import static org.hisp.dhis.user.UserCredentials.USERNAME_MAX_LENGTH;\n import static org.hisp.dhis.util.DateUtils.parseDate;\n-import static org.springframework.util.StringUtils.isEmpty;\n \n import java.util.Date;\n \n import org.hisp.dhis.category.CategoryOptionCombo;\n import org.hisp.dhis.dxf2.common.ImportOptions;\n import org.hisp.dhis.dxf2.events.event.Event;\n-import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n+import org.hisp.dhis.dxf2.events.event.EventUtils;\n import org.hisp.dhis.dxf2.events.importer.Processor;\n-import org.hisp.dhis.dxf2.importsummary.ImportConflict;\n-import org.hisp.dhis.dxf2.importsummary.ImportSummary;\n+import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n import org.hisp.dhis.organisationunit.OrganisationUnit;\n import org.hisp.dhis.program.ProgramStageInstance;\n import org.hisp.dhis.util.DateUtils;\n", "next_change": null}]}, "commits_in_main": [{"oid": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQzMDI3NQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r457430275", "body": "package declaration before copyright", "bodyText": "package declaration before copyright", "bodyHTML": "<p dir=\"auto\">package declaration before copyright</p>", "author": "ameenhere", "createdAt": "2020-07-20T14:20:40Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventServiceFacade.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer;", "originalCommit": "dc20b8a9249359bcdd1f612b1852f728ef63b7ab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA0OTU1OQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r462049559", "bodyText": "Fixed", "author": "luciano-fiandesio", "createdAt": "2020-07-29T05:37:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQzMDI3NQ=="}], "type": "inlineReview", "revised_code": {"commit": "d0687a6c7c9e1c4dd64c4dc669bb80ae6e8c8c8b", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventServiceFacade.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventServiceFacade.java\nindex c8d8623674..3bbca4f38c 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventServiceFacade.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventServiceFacade.java\n", "chunk": "@@ -26,8 +28,6 @@\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n \n-package org.hisp.dhis.dxf2.events.importer;\n-\n import static com.google.common.base.Preconditions.checkNotNull;\n import static java.nio.charset.StandardCharsets.UTF_8;\n import static org.springframework.util.StreamUtils.copyToString;\n", "next_change": {"commit": "d360652a896bee650a842567e26cd1e62145cccb", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventServiceFacade.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventServiceFacade.java\nindex 3bbca4f38c..d0a04294ae 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventServiceFacade.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventServiceFacade.java\n", "chunk": "@@ -28,6 +26,8 @@ package org.hisp.dhis.dxf2.events.importer;\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n \n+package org.hisp.dhis.dxf2.events.importer;\n+\n import static com.google.common.base.Preconditions.checkNotNull;\n import static java.nio.charset.StandardCharsets.UTF_8;\n import static org.springframework.util.StreamUtils.copyToString;\n", "next_change": {"commit": "2bafb84a2b042590bfaf5f8178cc2794528b0658", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventServiceFacade.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventServiceFacade.java\nindex d0a04294ae..3bbca4f38c 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventServiceFacade.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventServiceFacade.java\n", "chunk": "@@ -26,8 +28,6 @@\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n \n-package org.hisp.dhis.dxf2.events.importer;\n-\n import static com.google.common.base.Preconditions.checkNotNull;\n import static java.nio.charset.StandardCharsets.UTF_8;\n import static org.springframework.util.StreamUtils.copyToString;\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventServiceFacade.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventServiceFacade.java\nindex c8d8623674..3bbca4f38c 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventServiceFacade.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventServiceFacade.java\n", "chunk": "@@ -26,8 +28,6 @@\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n \n-package org.hisp.dhis.dxf2.events.importer;\n-\n import static com.google.common.base.Preconditions.checkNotNull;\n import static java.nio.charset.StandardCharsets.UTF_8;\n import static org.springframework.util.StreamUtils.copyToString;\n", "next_change": {"commit": "ea76fa86409613c9766d4508d65c88ac55c413c3", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventServiceFacade.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventServiceFacade.java\nindex 3bbca4f38c..2735d38a31 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventServiceFacade.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventServiceFacade.java\n", "chunk": "@@ -27,6 +25,7 @@ package org.hisp.dhis.dxf2.events.importer;\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+package org.hisp.dhis.dxf2.events.importer;\n \n import static com.google.common.base.Preconditions.checkNotNull;\n import static java.nio.charset.StandardCharsets.UTF_8;\n", "next_change": {"commit": "02336c9611c0dd85d5038223bddbfdebc0aae526", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventServiceFacade.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/deprecated/tracker/importer/EventServiceFacade.java\nsimilarity index 95%\nrename from dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventServiceFacade.java\nrename to dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/deprecated/tracker/importer/EventServiceFacade.java\nindex 2735d38a31..97537a9ce5 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventServiceFacade.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/deprecated/tracker/importer/EventServiceFacade.java\n", "chunk": "@@ -25,7 +25,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n-package org.hisp.dhis.dxf2.events.importer;\n+package org.hisp.dhis.dxf2.deprecated.tracker.importer;\n \n import static com.google.common.base.Preconditions.checkNotNull;\n import static java.nio.charset.StandardCharsets.UTF_8;\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "message": "Merge commit", "committedDate": null}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "9f0399b85c573faa8476920254abfdd7236c6c05", "committedDate": "2023-03-27 13:37:26 +0200", "message": "chore: Avoid line break after annotation in parameter for code style (#13450)"}, {"oid": "02336c9611c0dd85d5038223bddbfdebc0aae526", "committedDate": "2023-05-11 19:34:26 +0200", "message": "chore: move old tracker dxf2 code into deprecated package (#13901)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTYyNzcyMA==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r461627720", "body": "```suggestion\r\n    public ImportSummary check( ImmutableEvent event, WorkContext ctx )\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public ImportSummary check(ImmutableEvent event, WorkContext ctx )\n          \n          \n            \n                public ImportSummary check( ImmutableEvent event, WorkContext ctx )", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">public</span> <span class=\"pl-smi\">ImportSummary</span> check(<span class=\"pl-smi\">ImmutableEvent</span> event, <span class=\"pl-smi\">WorkContext</span> ctx )</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">public</span> <span class=\"pl-smi\">ImportSummary</span> check(<span class=\"x x-first x-last\"> </span><span class=\"pl-smi\">ImmutableEvent</span> event, <span class=\"pl-smi\">WorkContext</span> ctx )</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "stian-sandvold", "createdAt": "2020-07-28T14:31:12Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/TrackedEntityInstanceCheck.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer.insert.validation;\n+\n+import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n+import org.hisp.dhis.dxf2.events.importer.Checker;\n+import org.hisp.dhis.dxf2.events.importer.shared.ImmutableEvent;\n+import org.hisp.dhis.dxf2.importsummary.ImportStatus;\n+import org.hisp.dhis.dxf2.importsummary.ImportSummary;\n+import org.hisp.dhis.program.Program;\n+import org.hisp.dhis.trackedentity.TrackedEntityInstance;\n+\n+import java.util.Optional;\n+\n+import static org.hisp.dhis.dxf2.importsummary.ImportSummary.success;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+public class TrackedEntityInstanceCheck implements Checker\n+{\n+    @Override\n+    public ImportSummary check(ImmutableEvent event, WorkContext ctx )", "originalCommit": "dc20b8a9249359bcdd1f612b1852f728ef63b7ab", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d0687a6c7c9e1c4dd64c4dc669bb80ae6e8c8c8b", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/TrackedEntityInstanceCheck.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/TrackedEntityInstanceCheck.java\nindex c83a6d53f5..cdb23a79f2 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/TrackedEntityInstanceCheck.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/TrackedEntityInstanceCheck.java\n", "chunk": "@@ -28,25 +28,25 @@\n \n package org.hisp.dhis.dxf2.events.importer.insert.validation;\n \n-import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n+import static org.hisp.dhis.dxf2.importsummary.ImportSummary.success;\n+\n+import java.util.Optional;\n+\n import org.hisp.dhis.dxf2.events.importer.Checker;\n+import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n import org.hisp.dhis.dxf2.events.importer.shared.ImmutableEvent;\n import org.hisp.dhis.dxf2.importsummary.ImportStatus;\n import org.hisp.dhis.dxf2.importsummary.ImportSummary;\n import org.hisp.dhis.program.Program;\n import org.hisp.dhis.trackedentity.TrackedEntityInstance;\n \n-import java.util.Optional;\n-\n-import static org.hisp.dhis.dxf2.importsummary.ImportSummary.success;\n-\n /**\n  * @author Luciano Fiandesio\n  */\n public class TrackedEntityInstanceCheck implements Checker\n {\n     @Override\n-    public ImportSummary check(ImmutableEvent event, WorkContext ctx )\n+    public ImportSummary check( ImmutableEvent event, WorkContext ctx )\n     {\n         Program program = ctx.getProgramsMap().get( event.getProgram() );\n         final Optional<TrackedEntityInstance> trackedEntityInstance = ctx.getTrackedEntityInstance( event.getUid() );\n", "next_change": {"commit": "d360652a896bee650a842567e26cd1e62145cccb", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/TrackedEntityInstanceCheck.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/TrackedEntityInstanceCheck.java\nindex cdb23a79f2..c83a6d53f5 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/TrackedEntityInstanceCheck.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/TrackedEntityInstanceCheck.java\n", "chunk": "@@ -28,25 +28,25 @@\n \n package org.hisp.dhis.dxf2.events.importer.insert.validation;\n \n-import static org.hisp.dhis.dxf2.importsummary.ImportSummary.success;\n-\n-import java.util.Optional;\n-\n-import org.hisp.dhis.dxf2.events.importer.Checker;\n import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n+import org.hisp.dhis.dxf2.events.importer.Checker;\n import org.hisp.dhis.dxf2.events.importer.shared.ImmutableEvent;\n import org.hisp.dhis.dxf2.importsummary.ImportStatus;\n import org.hisp.dhis.dxf2.importsummary.ImportSummary;\n import org.hisp.dhis.program.Program;\n import org.hisp.dhis.trackedentity.TrackedEntityInstance;\n \n+import java.util.Optional;\n+\n+import static org.hisp.dhis.dxf2.importsummary.ImportSummary.success;\n+\n /**\n  * @author Luciano Fiandesio\n  */\n public class TrackedEntityInstanceCheck implements Checker\n {\n     @Override\n-    public ImportSummary check( ImmutableEvent event, WorkContext ctx )\n+    public ImportSummary check(ImmutableEvent event, WorkContext ctx )\n     {\n         Program program = ctx.getProgramsMap().get( event.getProgram() );\n         final Optional<TrackedEntityInstance> trackedEntityInstance = ctx.getTrackedEntityInstance( event.getUid() );\n", "next_change": {"commit": "5692db3b36ce7f06b1050881c6be08745b2a62c1", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/TrackedEntityInstanceCheck.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/TrackedEntityInstanceCheck.java\nindex c83a6d53f5..3daed69a49 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/TrackedEntityInstanceCheck.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/TrackedEntityInstanceCheck.java\n", "chunk": "@@ -46,7 +46,7 @@ import static org.hisp.dhis.dxf2.importsummary.ImportSummary.success;\n public class TrackedEntityInstanceCheck implements Checker\n {\n     @Override\n-    public ImportSummary check(ImmutableEvent event, WorkContext ctx )\n+    public ImportSummary check( ImmutableEvent event, WorkContext ctx )\n     {\n         Program program = ctx.getProgramsMap().get( event.getProgram() );\n         final Optional<TrackedEntityInstance> trackedEntityInstance = ctx.getTrackedEntityInstance( event.getUid() );\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/TrackedEntityInstanceCheck.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/TrackedEntityInstanceCheck.java\nindex c83a6d53f5..cdb23a79f2 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/TrackedEntityInstanceCheck.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/TrackedEntityInstanceCheck.java\n", "chunk": "@@ -28,25 +28,25 @@\n \n package org.hisp.dhis.dxf2.events.importer.insert.validation;\n \n-import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n+import static org.hisp.dhis.dxf2.importsummary.ImportSummary.success;\n+\n+import java.util.Optional;\n+\n import org.hisp.dhis.dxf2.events.importer.Checker;\n+import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n import org.hisp.dhis.dxf2.events.importer.shared.ImmutableEvent;\n import org.hisp.dhis.dxf2.importsummary.ImportStatus;\n import org.hisp.dhis.dxf2.importsummary.ImportSummary;\n import org.hisp.dhis.program.Program;\n import org.hisp.dhis.trackedentity.TrackedEntityInstance;\n \n-import java.util.Optional;\n-\n-import static org.hisp.dhis.dxf2.importsummary.ImportSummary.success;\n-\n /**\n  * @author Luciano Fiandesio\n  */\n public class TrackedEntityInstanceCheck implements Checker\n {\n     @Override\n-    public ImportSummary check(ImmutableEvent event, WorkContext ctx )\n+    public ImportSummary check( ImmutableEvent event, WorkContext ctx )\n     {\n         Program program = ctx.getProgramsMap().get( event.getProgram() );\n         final Optional<TrackedEntityInstance> trackedEntityInstance = ctx.getTrackedEntityInstance( event.getUid() );\n", "next_change": {"commit": "ea76fa86409613c9766d4508d65c88ac55c413c3", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/TrackedEntityInstanceCheck.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/TrackedEntityInstanceCheck.java\nindex cdb23a79f2..c08b718b79 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/TrackedEntityInstanceCheck.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/TrackedEntityInstanceCheck.java\n", "chunk": "@@ -51,7 +50,7 @@ public class TrackedEntityInstanceCheck implements Checker\n         Program program = ctx.getProgramsMap().get( event.getProgram() );\n         final Optional<TrackedEntityInstance> trackedEntityInstance = ctx.getTrackedEntityInstance( event.getUid() );\n \n-        if ( program.isRegistration() && !trackedEntityInstance.isPresent()  )\n+        if ( program.isRegistration() && !trackedEntityInstance.isPresent() )\n         {\n             return new ImportSummary( ImportStatus.ERROR,\n                 \"Event.trackedEntityInstance does not point to a valid tracked entity instance: \"\n", "next_change": {"commit": "240be973a3083b3e4b04ada02733f1908bb73512", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/TrackedEntityInstanceCheck.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/TrackedEntityInstanceCheck.java\nindex c08b718b79..47aa365aaf 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/TrackedEntityInstanceCheck.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/TrackedEntityInstanceCheck.java\n", "chunk": "@@ -37,18 +37,20 @@ import org.hisp.dhis.dxf2.events.importer.shared.ImmutableEvent;\n import org.hisp.dhis.dxf2.importsummary.ImportStatus;\n import org.hisp.dhis.dxf2.importsummary.ImportSummary;\n import org.hisp.dhis.program.Program;\n-import org.hisp.dhis.trackedentity.TrackedEntityInstance;\n+import org.hisp.dhis.trackedentity.TrackedEntity;\n+import org.springframework.stereotype.Component;\n \n /**\n  * @author Luciano Fiandesio\n  */\n+@Component\n public class TrackedEntityInstanceCheck implements Checker\n {\n     @Override\n     public ImportSummary check( ImmutableEvent event, WorkContext ctx )\n     {\n         Program program = ctx.getProgramsMap().get( event.getProgram() );\n-        final Optional<TrackedEntityInstance> trackedEntityInstance = ctx.getTrackedEntityInstance( event.getUid() );\n+        final Optional<TrackedEntity> trackedEntityInstance = ctx.getTrackedEntityInstance( event.getUid() );\n \n         if ( program.isRegistration() && !trackedEntityInstance.isPresent() )\n         {\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "message": "Merge commit", "committedDate": null}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "1e593837ab1c64884a8ac615c7cc8c3471a219ee", "committedDate": "2021-11-18 09:33:25 +0100", "message": "refactor: validators, checkers and processors in old importer are now spring beans [TECH-797] (#9218)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "240be973a3083b3e4b04ada02733f1908bb73512", "committedDate": "2023-05-08 08:39:16 +0000", "message": "chore: rename TrackedEntityInstance to TrackedEntity (#13827)"}, {"oid": "02336c9611c0dd85d5038223bddbfdebc0aae526", "committedDate": "2023-05-11 19:34:26 +0200", "message": "chore: move old tracker dxf2 code into deprecated package (#13901)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTYyODM0Mw==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r461628343", "body": "```suggestion\r\n        if ( pair != null && !pair.getKey().equals( \"filter\") )\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if ( pair != null && !pair.getKey().equals( \"filter\"))\n          \n          \n            \n                    if ( pair != null && !pair.getKey().equals( \"filter\") )", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">if</span> ( pair <span class=\"pl-k\">!=</span> <span class=\"pl-c1\">null</span> <span class=\"pl-k\">&amp;&amp;</span> <span class=\"pl-k\">!</span>pair<span class=\"pl-k\">.</span>getKey()<span class=\"pl-k\">.</span>equals( <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>filter<span class=\"pl-pds\">\"</span></span>))</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">if</span> ( pair <span class=\"pl-k\">!=</span> <span class=\"pl-c1\">null</span> <span class=\"pl-k\">&amp;&amp;</span> <span class=\"pl-k\">!</span>pair<span class=\"pl-k\">.</span>getKey()<span class=\"pl-k\">.</span>equals( <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>filter<span class=\"pl-pds\">\"</span></span>)<span class=\"x x-first x-last\"> </span>)</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "stian-sandvold", "createdAt": "2020-07-28T14:31:59Z", "path": "dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/helpers/QueryParamsBuilder.java", "diffHunk": "@@ -54,16 +54,16 @@ public QueryParamsBuilder()\n      */\n     public QueryParamsBuilder add( String param )\n     {\n-        String[] splited = param.split( \"=\" );\n-        MutablePair pair = getByKey( splited[0] );\n+        String[] split = param.split( \"=\" );\n+        MutablePair pair = getByKey( split[0] );\n \n-        if ( pair != null )\n+        if ( pair != null && !pair.getKey().equals( \"filter\"))", "originalCommit": "dc20b8a9249359bcdd1f612b1852f728ef63b7ab", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d0687a6c7c9e1c4dd64c4dc669bb80ae6e8c8c8b", "changed_code": [{"header": "diff --git a/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/helpers/QueryParamsBuilder.java b/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/helpers/QueryParamsBuilder.java\nindex a128a6c018..728ecafc70 100644\n--- a/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/helpers/QueryParamsBuilder.java\n+++ b/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/helpers/QueryParamsBuilder.java\n", "chunk": "@@ -57,7 +57,7 @@ public class QueryParamsBuilder\n         String[] split = param.split( \"=\" );\n         MutablePair pair = getByKey( split[0] );\n \n-        if ( pair != null && !pair.getKey().equals( \"filter\"))\n+        if ( pair != null && !pair.getKey().equals( \"filter\") )\n         {\n             pair.setRight( split[1] );\n             return this;\n", "next_change": {"commit": "d360652a896bee650a842567e26cd1e62145cccb", "changed_code": [{"header": "diff --git a/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/helpers/QueryParamsBuilder.java b/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/helpers/QueryParamsBuilder.java\nindex 728ecafc70..a128a6c018 100644\n--- a/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/helpers/QueryParamsBuilder.java\n+++ b/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/helpers/QueryParamsBuilder.java\n", "chunk": "@@ -57,7 +57,7 @@ public class QueryParamsBuilder\n         String[] split = param.split( \"=\" );\n         MutablePair pair = getByKey( split[0] );\n \n-        if ( pair != null && !pair.getKey().equals( \"filter\") )\n+        if ( pair != null && !pair.getKey().equals( \"filter\"))\n         {\n             pair.setRight( split[1] );\n             return this;\n", "next_change": {"commit": "5a102a5c179d008a301b96f632b00b634b1300eb", "changed_code": [{"header": "diff --git a/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/helpers/QueryParamsBuilder.java b/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/helpers/QueryParamsBuilder.java\nindex a128a6c018..728ecafc70 100644\n--- a/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/helpers/QueryParamsBuilder.java\n+++ b/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/helpers/QueryParamsBuilder.java\n", "chunk": "@@ -57,7 +57,7 @@ public class QueryParamsBuilder\n         String[] split = param.split( \"=\" );\n         MutablePair pair = getByKey( split[0] );\n \n-        if ( pair != null && !pair.getKey().equals( \"filter\"))\n+        if ( pair != null && !pair.getKey().equals( \"filter\") )\n         {\n             pair.setRight( split[1] );\n             return this;\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "changed_code": [{"header": "diff --git a/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/helpers/QueryParamsBuilder.java b/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/helpers/QueryParamsBuilder.java\nindex a128a6c018..728ecafc70 100644\n--- a/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/helpers/QueryParamsBuilder.java\n+++ b/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/helpers/QueryParamsBuilder.java\n", "chunk": "@@ -57,7 +57,7 @@ public class QueryParamsBuilder\n         String[] split = param.split( \"=\" );\n         MutablePair pair = getByKey( split[0] );\n \n-        if ( pair != null && !pair.getKey().equals( \"filter\"))\n+        if ( pair != null && !pair.getKey().equals( \"filter\") )\n         {\n             pair.setRight( split[1] );\n             return this;\n", "next_change": {"commit": "d45301f99d017c365028ab0a19d12b83b2d10f56", "changed_code": [{"header": "diff --git a/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/helpers/QueryParamsBuilder.java b/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/helpers/QueryParamsBuilder.java\nindex 728ecafc70..0ea68978d3 100644\n--- a/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/helpers/QueryParamsBuilder.java\n+++ b/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/helpers/QueryParamsBuilder.java\n", "chunk": "@@ -57,7 +83,7 @@ public class QueryParamsBuilder\n         String[] split = param.split( \"=\" );\n         MutablePair pair = getByKey( split[0] );\n \n-        if ( pair != null && !pair.getKey().equals( \"filter\") )\n+        if ( pair != null && !pair.getKey().equals( \"filter\" ) )\n         {\n             pair.setRight( split[1] );\n             return this;\n", "next_change": {"commit": "9706c5b672214850be88dc840d0fa7de80312695", "changed_code": [{"header": "diff --git a/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/helpers/QueryParamsBuilder.java b/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/helpers/QueryParamsBuilder.java\ndeleted file mode 100644\nindex 0ea68978d3..0000000000\n--- a/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/helpers/QueryParamsBuilder.java\n+++ /dev/null\n", "chunk": "@@ -1,137 +0,0 @@\n-/*\n- * Copyright (c) 2004-2021, University of Oslo\n- * All rights reserved.\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions are met:\n- * Redistributions of source code must retain the above copyright notice, this\n- * list of conditions and the following disclaimer.\n- *\n- * Redistributions in binary form must reproduce the above copyright notice,\n- * this list of conditions and the following disclaimer in the documentation\n- * and/or other materials provided with the distribution.\n- * Neither the name of the HISP project nor the names of its contributors may\n- * be used to endorse or promote products derived from this software without\n- * specific prior written permission.\n- *\n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n- * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n- * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n- * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n- * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n- * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n- * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n- * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n- * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- */\n-package org.hisp.dhis.helpers;\n-\n-/*\n- * Copyright (c) 2004-2021, University of Oslo\n- * All rights reserved.\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions are met:\n- * Redistributions of source code must retain the above copyright notice, this\n- * list of conditions and the following disclaimer.\n- *\n- * Redistributions in binary form must reproduce the above copyright notice,\n- * this list of conditions and the following disclaimer in the documentation\n- * and/or other materials provided with the distribution.\n- * Neither the name of the HISP project nor the names of its contributors may\n- * be used to endorse or promote products derived from this software without\n- * specific prior written permission.\n- *\n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n- * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n- * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n- * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n- * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n- * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n- * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n- * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n- * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- */\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-\n-import org.apache.commons.lang3.tuple.MutablePair;\n-\n-/**\n- * @author Gintare Vilkelyte <vilkelyte.gintare@gmail.com>\n- */\n-public class QueryParamsBuilder\n-{\n-    List<MutablePair<String, String>> queryParams;\n-\n-    public QueryParamsBuilder()\n-    {\n-        queryParams = new ArrayList<>();\n-    }\n-\n-    /**\n-     * Adds or updates the query param. Format: key=value\n-     *\n-     * @param param\n-     * @return\n-     */\n-    public QueryParamsBuilder add( String param )\n-    {\n-        String[] split = param.split( \"=\" );\n-        MutablePair pair = getByKey( split[0] );\n-\n-        if ( pair != null && !pair.getKey().equals( \"filter\" ) )\n-        {\n-            pair.setRight( split[1] );\n-            return this;\n-        }\n-\n-        queryParams.add( MutablePair.of( split[0], split[1] ) );\n-\n-        return this;\n-    }\n-\n-    public QueryParamsBuilder addAll( String... params )\n-    {\n-        for ( String param : params )\n-        {\n-            this.add( param );\n-        }\n-\n-        return this;\n-    }\n-\n-    private MutablePair getByKey( String key )\n-    {\n-        return queryParams.stream()\n-            .filter( p -> p.getLeft().equals( key ) )\n-            .findFirst()\n-            .orElse( null );\n-    }\n-\n-    public String build()\n-    {\n-        if ( queryParams.size() == 0 )\n-        {\n-            return \"\";\n-        }\n-\n-        StringBuilder builder = new StringBuilder();\n-        builder.append( \"?\" );\n-\n-        for ( int i = 0; i < queryParams.size(); i++ )\n-        {\n-            builder.append( String.format( \"%s=%s\", queryParams.get( i ).getLeft(), queryParams.get( i ).getRight() ) );\n-\n-            if ( i != queryParams.size() - 1 )\n-            {\n-                builder.append( \"&\" );\n-            }\n-        }\n-\n-        return builder.toString();\n-    }\n-}\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "message": "Merge commit", "committedDate": null}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "d45301f99d017c365028ab0a19d12b83b2d10f56", "committedDate": "2021-08-19 10:56:35 +0200", "message": "feat: Adds speedy-spotless plugin, updates code format on all e2e files (#8549)"}, {"oid": "dd309f7c8e68920a9447e2815f2c976c863b59ac", "committedDate": "2021-09-22 12:44:26 +0200", "message": "test: add required ou query param (#8780)"}, {"oid": "8345bb0e86fc277bf9cbdb1e81cf6ebc3618ce4a", "committedDate": "2021-10-22 10:56:42 +0200", "message": "style: duplicate headers removed [TECH-780] (#9109)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "8b540ae5e4682e5c9fa529abf17b8e52642165ab", "committedDate": "2022-05-02 15:06:47 +0200", "message": "chore: Format e2e test module (#10661)"}, {"oid": "9706c5b672214850be88dc840d0fa7de80312695", "committedDate": "2023-05-11 14:26:31 +0200", "message": "test: prefix all test modules with dhis-test (#13889)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTYyOTc1Mw==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r461629753", "body": "If I understand correctly, there shouldn't be any unpersisted changes in the session at this point? Or could there be from a previous batch of import?", "bodyText": "If I understand correctly, there shouldn't be any unpersisted changes in the session at this point? Or could there be from a previous batch of import?", "bodyHTML": "<p dir=\"auto\">If I understand correctly, there shouldn't be any unpersisted changes in the session at this point? Or could there be from a previous batch of import?</p>", "author": "stian-sandvold", "createdAt": "2020-07-28T14:33:43Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/WorkContextLoader.java", "diffHunk": "@@ -0,0 +1,177 @@\n+package org.hisp.dhis.dxf2.events.importer.context;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.hibernate.SessionFactory;\n+import org.hisp.dhis.dxf2.common.ImportOptions;\n+import org.hisp.dhis.dxf2.events.event.Event;\n+import org.hisp.dhis.hibernate.HibernateUtils;\n+import org.hisp.dhis.program.ProgramStageInstance;\n+import org.hisp.dhis.trackedentity.TrackedEntityInstance;\n+import org.hisp.dhis.user.User;\n+import org.hisp.dhis.user.UserCredentials;\n+import org.springframework.stereotype.Component;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+@Component\n+public class WorkContextLoader\n+{\n+    private final ProgramSupplier programSupplier;\n+\n+    private final OrganisationUnitSupplier organisationUnitSupplier;\n+\n+    private final TrackedEntityInstanceSupplier trackedEntityInstanceSupplier;\n+\n+    private final ProgramInstanceSupplier programInstanceSupplier;\n+\n+    private final ProgramStageInstanceSupplier programStageInstanceSupplier;\n+\n+    private final CategoryOptionComboSupplier categoryOptionComboSupplier;\n+\n+    private final DataElementSupplier dataElementSupplier;\n+\n+    private final NoteSupplier noteSupplier;\n+\n+    private final AssignedUserSupplier assignedUserSupplier;\n+\n+    private final ServiceDelegatorSupplier serviceDelegatorSupplier;\n+\n+    private final static UidGenerator uidGen = new UidGenerator();\n+\n+    private final SessionFactory sessionFactory;\n+\n+    public WorkContextLoader(\n+    // @formatter:off\n+        ProgramSupplier programSupplier,\n+        OrganisationUnitSupplier organisationUnitSupplier,\n+        TrackedEntityInstanceSupplier trackedEntityInstanceSupplier,\n+        ProgramInstanceSupplier programInstanceSupplier,\n+        ProgramStageInstanceSupplier programStageInstanceSupplier,\n+        CategoryOptionComboSupplier categoryOptionComboSupplier,\n+        DataElementSupplier dataElementSupplier,\n+        NoteSupplier noteSupplier,\n+        AssignedUserSupplier assignedUserSupplier,\n+        ServiceDelegatorSupplier serviceDelegatorSupplier,\n+        SessionFactory sessionFactory\n+    // @formatter:on\n+    )\n+    {\n+        this.programSupplier = programSupplier;\n+        this.organisationUnitSupplier = organisationUnitSupplier;\n+        this.trackedEntityInstanceSupplier = trackedEntityInstanceSupplier;\n+        this.programInstanceSupplier = programInstanceSupplier;\n+        this.programStageInstanceSupplier = programStageInstanceSupplier;\n+        this.categoryOptionComboSupplier = categoryOptionComboSupplier;\n+        this.dataElementSupplier = dataElementSupplier;\n+        this.noteSupplier = noteSupplier;\n+        this.assignedUserSupplier = assignedUserSupplier;\n+        this.serviceDelegatorSupplier = serviceDelegatorSupplier;\n+        this.sessionFactory = sessionFactory;\n+    }\n+\n+    @Transactional( readOnly = true )\n+    public WorkContext load( ImportOptions importOptions, List<Event> events )\n+    {\n+        sessionFactory.getCurrentSession().flush();", "originalCommit": "dc20b8a9249359bcdd1f612b1852f728ef63b7ab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA1OTkxOA==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r462059918", "bodyText": "Since, this code could be called during an import of Tei -> Enrollment, we need to be sure that these entities are flushed before loading the data in cache.", "author": "luciano-fiandesio", "createdAt": "2020-07-29T06:09:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTYyOTc1Mw=="}], "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "fb390e24a39efb3e206bd995b5f9d964ede0cb33", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/WorkContextLoader.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/WorkContextLoader.java\nindex 004db6365f..44cc7bdba9 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/WorkContextLoader.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/WorkContextLoader.java\n", "chunk": "@@ -98,6 +102,7 @@ public class WorkContextLoader\n         this.dataElementSupplier = dataElementSupplier;\n         this.noteSupplier = noteSupplier;\n         this.assignedUserSupplier = assignedUserSupplier;\n+        this.programOrgUnitSupplier = programOrgUnitSupplier;\n         this.serviceDelegatorSupplier = serviceDelegatorSupplier;\n         this.sessionFactory = sessionFactory;\n     }\n", "next_change": {"commit": "959c60d4f597187d0df2160fbbb675e5c4196e5c", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/WorkContextLoader.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/WorkContextLoader.java\nindex 44cc7bdba9..ffb9a826d5 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/WorkContextLoader.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/WorkContextLoader.java\n", "chunk": "@@ -108,7 +108,7 @@ public class WorkContextLoader\n     }\n \n     @Transactional( readOnly = true )\n-    public WorkContext load( ImportOptions importOptions, List<Event> events )\n+    public WorkContext load( ImportOptions importOptions, List<org.hisp.dhis.dxf2.events.event.Event> events )\n     {\n         sessionFactory.getCurrentSession().flush();\n \n", "next_change": {"commit": "02336c9611c0dd85d5038223bddbfdebc0aae526", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/WorkContextLoader.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/deprecated/tracker/importer/context/WorkContextLoader.java\nsimilarity index 92%\nrename from dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/WorkContextLoader.java\nrename to dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/deprecated/tracker/importer/context/WorkContextLoader.java\nindex ffb9a826d5..eedcf6bf8a 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/WorkContextLoader.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/deprecated/tracker/importer/context/WorkContextLoader.java\n", "chunk": "@@ -108,7 +108,8 @@ public class WorkContextLoader\n     }\n \n     @Transactional( readOnly = true )\n-    public WorkContext load( ImportOptions importOptions, List<org.hisp.dhis.dxf2.events.event.Event> events )\n+    public WorkContext load( ImportOptions importOptions,\n+        List<org.hisp.dhis.dxf2.deprecated.tracker.event.Event> events )\n     {\n         sessionFactory.getCurrentSession().flush();\n \n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "message": "Merge commit", "committedDate": null}, {"oid": "f8cfa7437ac99962a94ceef4b9150478899ceb2b", "committedDate": "2020-09-11 13:59:14 +0200", "message": "fix: audit for event importer are now present (#6138) (#6140)"}, {"oid": "fb390e24a39efb3e206bd995b5f9d964ede0cb33", "committedDate": "2020-12-16 15:20:31 +0100", "message": "perf: reduce number of Org Units fetched from DB on Tracker Import (#6920)"}, {"oid": "5e4669b4c89c809989ea600900735dd71baa86e2", "committedDate": "2020-12-23 14:00:18 +0700", "message": "feat: Upgrade Hibernate  (#6939)"}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "8ccf9a288a67e5ee5349024fd3d281372c64c956", "committedDate": "2022-02-22 13:25:35 +0800", "message": "feat: Merge User/UserCredentials into one DB table (#9754)"}, {"oid": "319dd37f931650192bde33cc5103569107a75550", "committedDate": "2022-05-14 10:29:06 +0500", "message": "fix: Audit history for tracked entity data values [DHIS2-12853] (#10555)"}, {"oid": "959c60d4f597187d0df2160fbbb675e5c4196e5c", "committedDate": "2023-04-27 16:46:18 +0200", "message": "chore: rename ProgramStageInstance to Event (#13731)"}, {"oid": "ba38c7fa19a269450161eb73bad6b80b1ef1133b", "committedDate": "2023-05-04 11:23:39 +0200", "message": "chore: Rename most ProgramInstance classes to Enrollment [TECH-1547] (#13811)"}, {"oid": "240be973a3083b3e4b04ada02733f1908bb73512", "committedDate": "2023-05-08 08:39:16 +0000", "message": "chore: rename TrackedEntityInstance to TrackedEntity (#13827)"}, {"oid": "02336c9611c0dd85d5038223bddbfdebc0aae526", "committedDate": "2023-05-11 19:34:26 +0200", "message": "chore: move old tracker dxf2 code into deprecated package (#13901)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTYzMDE2Nw==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r461630167", "body": "```suggestion\r\n            .eventDataValueMap( new EventDataValueAggregator().aggregateDataValues( events, programStageInstanceMap, localImportOptions ) )\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        .eventDataValueMap( new EventDataValueAggregator().aggregateDataValues( events, programStageInstanceMap, localImportOptions ))\n          \n          \n            \n                        .eventDataValueMap( new EventDataValueAggregator().aggregateDataValues( events, programStageInstanceMap, localImportOptions ) )", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            .eventDataValueMap( <span class=\"pl-k\">new</span> <span class=\"pl-smi\">EventDataValueAggregator</span>()<span class=\"pl-k\">.</span>aggregateDataValues( events, programStageInstanceMap, localImportOptions ))</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            .eventDataValueMap( <span class=\"pl-k\">new</span> <span class=\"pl-smi\">EventDataValueAggregator</span>()<span class=\"pl-k\">.</span>aggregateDataValues( events, programStageInstanceMap, localImportOptions )<span class=\"x x-first x-last\"> </span>)</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "stian-sandvold", "createdAt": "2020-07-28T14:34:14Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/WorkContextLoader.java", "diffHunk": "@@ -0,0 +1,177 @@\n+package org.hisp.dhis.dxf2.events.importer.context;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.hibernate.SessionFactory;\n+import org.hisp.dhis.dxf2.common.ImportOptions;\n+import org.hisp.dhis.dxf2.events.event.Event;\n+import org.hisp.dhis.hibernate.HibernateUtils;\n+import org.hisp.dhis.program.ProgramStageInstance;\n+import org.hisp.dhis.trackedentity.TrackedEntityInstance;\n+import org.hisp.dhis.user.User;\n+import org.hisp.dhis.user.UserCredentials;\n+import org.springframework.stereotype.Component;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+@Component\n+public class WorkContextLoader\n+{\n+    private final ProgramSupplier programSupplier;\n+\n+    private final OrganisationUnitSupplier organisationUnitSupplier;\n+\n+    private final TrackedEntityInstanceSupplier trackedEntityInstanceSupplier;\n+\n+    private final ProgramInstanceSupplier programInstanceSupplier;\n+\n+    private final ProgramStageInstanceSupplier programStageInstanceSupplier;\n+\n+    private final CategoryOptionComboSupplier categoryOptionComboSupplier;\n+\n+    private final DataElementSupplier dataElementSupplier;\n+\n+    private final NoteSupplier noteSupplier;\n+\n+    private final AssignedUserSupplier assignedUserSupplier;\n+\n+    private final ServiceDelegatorSupplier serviceDelegatorSupplier;\n+\n+    private final static UidGenerator uidGen = new UidGenerator();\n+\n+    private final SessionFactory sessionFactory;\n+\n+    public WorkContextLoader(\n+    // @formatter:off\n+        ProgramSupplier programSupplier,\n+        OrganisationUnitSupplier organisationUnitSupplier,\n+        TrackedEntityInstanceSupplier trackedEntityInstanceSupplier,\n+        ProgramInstanceSupplier programInstanceSupplier,\n+        ProgramStageInstanceSupplier programStageInstanceSupplier,\n+        CategoryOptionComboSupplier categoryOptionComboSupplier,\n+        DataElementSupplier dataElementSupplier,\n+        NoteSupplier noteSupplier,\n+        AssignedUserSupplier assignedUserSupplier,\n+        ServiceDelegatorSupplier serviceDelegatorSupplier,\n+        SessionFactory sessionFactory\n+    // @formatter:on\n+    )\n+    {\n+        this.programSupplier = programSupplier;\n+        this.organisationUnitSupplier = organisationUnitSupplier;\n+        this.trackedEntityInstanceSupplier = trackedEntityInstanceSupplier;\n+        this.programInstanceSupplier = programInstanceSupplier;\n+        this.programStageInstanceSupplier = programStageInstanceSupplier;\n+        this.categoryOptionComboSupplier = categoryOptionComboSupplier;\n+        this.dataElementSupplier = dataElementSupplier;\n+        this.noteSupplier = noteSupplier;\n+        this.assignedUserSupplier = assignedUserSupplier;\n+        this.serviceDelegatorSupplier = serviceDelegatorSupplier;\n+        this.sessionFactory = sessionFactory;\n+    }\n+\n+    @Transactional( readOnly = true )\n+    public WorkContext load( ImportOptions importOptions, List<Event> events )\n+    {\n+        sessionFactory.getCurrentSession().flush();\n+\n+        ImportOptions localImportOptions = importOptions;\n+        // API allows a null Import Options\n+        if ( localImportOptions == null )\n+        {\n+            localImportOptions = ImportOptions.getDefaultImportOptions();\n+        }\n+\n+        initializeUser( localImportOptions );\n+\n+        // Make sure all events have the 'uid' field populated\n+        events = uidGen.assignUidToEvents( events );\n+\n+        final Map<String, ProgramStageInstance> programStageInstanceMap = programStageInstanceSupplier\n+            .get( localImportOptions, events );\n+\n+        final Map<String, Pair<TrackedEntityInstance, Boolean>> teiMap = trackedEntityInstanceSupplier\n+            .get( localImportOptions, events );\n+\n+        return WorkContext.builder()\n+        // @formatter:off\n+            .importOptions( localImportOptions )\n+            .programsMap( programSupplier.get( localImportOptions, events ) )\n+            .programStageInstanceMap( programStageInstanceMap )\n+            .organisationUnitMap( organisationUnitSupplier.get( localImportOptions, events ) )\n+            .trackedEntityInstanceMap( teiMap )\n+            .programInstanceMap( programInstanceSupplier.get( localImportOptions, teiMap, events ) )\n+            .categoryOptionComboMap( categoryOptionComboSupplier.get( localImportOptions, events ) )\n+            .dataElementMap( dataElementSupplier.get( localImportOptions, events ) )\n+            .notesMap( noteSupplier.get( localImportOptions, events ) )\n+            .assignedUserMap( assignedUserSupplier.get( localImportOptions, events ) )\n+            .eventDataValueMap( new EventDataValueAggregator().aggregateDataValues( events, programStageInstanceMap, localImportOptions ))", "originalCommit": "dc20b8a9249359bcdd1f612b1852f728ef63b7ab", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d0687a6c7c9e1c4dd64c4dc669bb80ae6e8c8c8b", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/WorkContextLoader.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/WorkContextLoader.java\nindex 004db6365f..fb19701572 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/WorkContextLoader.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/WorkContextLoader.java\n", "chunk": "@@ -137,10 +137,10 @@ public class WorkContextLoader\n             .dataElementMap( dataElementSupplier.get( localImportOptions, events ) )\n             .notesMap( noteSupplier.get( localImportOptions, events ) )\n             .assignedUserMap( assignedUserSupplier.get( localImportOptions, events ) )\n-            .eventDataValueMap( new EventDataValueAggregator().aggregateDataValues( events, programStageInstanceMap, localImportOptions ))\n+            .eventDataValueMap( new EventDataValueAggregator().aggregateDataValues( events, programStageInstanceMap,\n+                localImportOptions ) )\n             .serviceDelegator( serviceDelegatorSupplier.get() )\n             .build();\n-        // @formatter:on\n     }\n \n     /**\n", "next_change": {"commit": "d360652a896bee650a842567e26cd1e62145cccb", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/WorkContextLoader.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/WorkContextLoader.java\nindex fb19701572..004db6365f 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/WorkContextLoader.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/WorkContextLoader.java\n", "chunk": "@@ -137,10 +137,10 @@ public class WorkContextLoader\n             .dataElementMap( dataElementSupplier.get( localImportOptions, events ) )\n             .notesMap( noteSupplier.get( localImportOptions, events ) )\n             .assignedUserMap( assignedUserSupplier.get( localImportOptions, events ) )\n-            .eventDataValueMap( new EventDataValueAggregator().aggregateDataValues( events, programStageInstanceMap,\n-                localImportOptions ) )\n+            .eventDataValueMap( new EventDataValueAggregator().aggregateDataValues( events, programStageInstanceMap, localImportOptions ))\n             .serviceDelegator( serviceDelegatorSupplier.get() )\n             .build();\n+        // @formatter:on\n     }\n \n     /**\n", "next_change": {"commit": "7758f81c74f90581703a6fd01ecc0971903d7d4f", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/WorkContextLoader.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/WorkContextLoader.java\nindex 004db6365f..80fd6ce8f9 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/WorkContextLoader.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/WorkContextLoader.java\n", "chunk": "@@ -137,7 +137,7 @@ public class WorkContextLoader\n             .dataElementMap( dataElementSupplier.get( localImportOptions, events ) )\n             .notesMap( noteSupplier.get( localImportOptions, events ) )\n             .assignedUserMap( assignedUserSupplier.get( localImportOptions, events ) )\n-            .eventDataValueMap( new EventDataValueAggregator().aggregateDataValues( events, programStageInstanceMap, localImportOptions ))\n+            .eventDataValueMap( new EventDataValueAggregator().aggregateDataValues( events, programStageInstanceMap, localImportOptions ) )\n             .serviceDelegator( serviceDelegatorSupplier.get() )\n             .build();\n         // @formatter:on\n", "next_change": {"commit": "1bff454091a0b7820b277e3b3f08acaf14835feb", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/WorkContextLoader.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/WorkContextLoader.java\nindex 80fd6ce8f9..fb19701572 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/WorkContextLoader.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/WorkContextLoader.java\n", "chunk": "@@ -137,10 +137,10 @@ public class WorkContextLoader\n             .dataElementMap( dataElementSupplier.get( localImportOptions, events ) )\n             .notesMap( noteSupplier.get( localImportOptions, events ) )\n             .assignedUserMap( assignedUserSupplier.get( localImportOptions, events ) )\n-            .eventDataValueMap( new EventDataValueAggregator().aggregateDataValues( events, programStageInstanceMap, localImportOptions ) )\n+            .eventDataValueMap( new EventDataValueAggregator().aggregateDataValues( events, programStageInstanceMap,\n+                localImportOptions ) )\n             .serviceDelegator( serviceDelegatorSupplier.get() )\n             .build();\n-        // @formatter:on\n     }\n \n     /**\n", "next_change": null}]}}]}}]}}]}, "revised_code_in_main": {"commit": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/WorkContextLoader.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/WorkContextLoader.java\nindex 004db6365f..fb19701572 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/WorkContextLoader.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/WorkContextLoader.java\n", "chunk": "@@ -137,10 +137,10 @@ public class WorkContextLoader\n             .dataElementMap( dataElementSupplier.get( localImportOptions, events ) )\n             .notesMap( noteSupplier.get( localImportOptions, events ) )\n             .assignedUserMap( assignedUserSupplier.get( localImportOptions, events ) )\n-            .eventDataValueMap( new EventDataValueAggregator().aggregateDataValues( events, programStageInstanceMap, localImportOptions ))\n+            .eventDataValueMap( new EventDataValueAggregator().aggregateDataValues( events, programStageInstanceMap,\n+                localImportOptions ) )\n             .serviceDelegator( serviceDelegatorSupplier.get() )\n             .build();\n-        // @formatter:on\n     }\n \n     /**\n", "next_change": {"commit": "fb390e24a39efb3e206bd995b5f9d964ede0cb33", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/WorkContextLoader.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/WorkContextLoader.java\nindex fb19701572..44cc7bdba9 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/WorkContextLoader.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/WorkContextLoader.java\n", "chunk": "@@ -139,6 +145,7 @@ public class WorkContextLoader\n             .assignedUserMap( assignedUserSupplier.get( localImportOptions, events ) )\n             .eventDataValueMap( new EventDataValueAggregator().aggregateDataValues( events, programStageInstanceMap,\n                 localImportOptions ) )\n+            .programWithOrgUnitsMap( programOrgUnitSupplier.get( localImportOptions, events, orgUniMap ) )\n             .serviceDelegator( serviceDelegatorSupplier.get() )\n             .build();\n     }\n", "next_change": {"commit": "ea76fa86409613c9766d4508d65c88ac55c413c3", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/WorkContextLoader.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/WorkContextLoader.java\nindex 44cc7bdba9..0335ac77b0 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/WorkContextLoader.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/WorkContextLoader.java\n", "chunk": "@@ -151,8 +150,9 @@ public class WorkContextLoader\n     }\n \n     /**\n-     * Make sure that the {@see User} object's properties are properly initialized,\n-     * to avoid running into Hibernate-related issues during validation\n+     * Make sure that the {@see User} object's properties are properly\n+     * initialized, to avoid running into Hibernate-related issues during\n+     * validation\n      *\n      * @param importOptions the {@see ImportOptions} object\n      */\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "message": "Merge commit", "committedDate": null}, {"oid": "f8cfa7437ac99962a94ceef4b9150478899ceb2b", "committedDate": "2020-09-11 13:59:14 +0200", "message": "fix: audit for event importer are now present (#6138) (#6140)"}, {"oid": "fb390e24a39efb3e206bd995b5f9d964ede0cb33", "committedDate": "2020-12-16 15:20:31 +0100", "message": "perf: reduce number of Org Units fetched from DB on Tracker Import (#6920)"}, {"oid": "5e4669b4c89c809989ea600900735dd71baa86e2", "committedDate": "2020-12-23 14:00:18 +0700", "message": "feat: Upgrade Hibernate  (#6939)"}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "8ccf9a288a67e5ee5349024fd3d281372c64c956", "committedDate": "2022-02-22 13:25:35 +0800", "message": "feat: Merge User/UserCredentials into one DB table (#9754)"}, {"oid": "319dd37f931650192bde33cc5103569107a75550", "committedDate": "2022-05-14 10:29:06 +0500", "message": "fix: Audit history for tracked entity data values [DHIS2-12853] (#10555)"}, {"oid": "959c60d4f597187d0df2160fbbb675e5c4196e5c", "committedDate": "2023-04-27 16:46:18 +0200", "message": "chore: rename ProgramStageInstance to Event (#13731)"}, {"oid": "ba38c7fa19a269450161eb73bad6b80b1ef1133b", "committedDate": "2023-05-04 11:23:39 +0200", "message": "chore: Rename most ProgramInstance classes to Enrollment [TECH-1547] (#13811)"}, {"oid": "240be973a3083b3e4b04ada02733f1908bb73512", "committedDate": "2023-05-08 08:39:16 +0000", "message": "chore: rename TrackedEntityInstance to TrackedEntity (#13827)"}, {"oid": "02336c9611c0dd85d5038223bddbfdebc0aae526", "committedDate": "2023-05-11 19:34:26 +0200", "message": "chore: move old tracker dxf2 code into deprecated package (#13901)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTYzNDUwMw==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r461634503", "body": "What is this line for?", "bodyText": "What is this line for?", "bodyHTML": "<p dir=\"auto\">What is this line for?</p>", "author": "stian-sandvold", "createdAt": "2020-07-28T14:39:27Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/WorkContextLoader.java", "diffHunk": "@@ -0,0 +1,177 @@\n+package org.hisp.dhis.dxf2.events.importer.context;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.hibernate.SessionFactory;\n+import org.hisp.dhis.dxf2.common.ImportOptions;\n+import org.hisp.dhis.dxf2.events.event.Event;\n+import org.hisp.dhis.hibernate.HibernateUtils;\n+import org.hisp.dhis.program.ProgramStageInstance;\n+import org.hisp.dhis.trackedentity.TrackedEntityInstance;\n+import org.hisp.dhis.user.User;\n+import org.hisp.dhis.user.UserCredentials;\n+import org.springframework.stereotype.Component;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+@Component\n+public class WorkContextLoader\n+{\n+    private final ProgramSupplier programSupplier;\n+\n+    private final OrganisationUnitSupplier organisationUnitSupplier;\n+\n+    private final TrackedEntityInstanceSupplier trackedEntityInstanceSupplier;\n+\n+    private final ProgramInstanceSupplier programInstanceSupplier;\n+\n+    private final ProgramStageInstanceSupplier programStageInstanceSupplier;\n+\n+    private final CategoryOptionComboSupplier categoryOptionComboSupplier;\n+\n+    private final DataElementSupplier dataElementSupplier;\n+\n+    private final NoteSupplier noteSupplier;\n+\n+    private final AssignedUserSupplier assignedUserSupplier;\n+\n+    private final ServiceDelegatorSupplier serviceDelegatorSupplier;\n+\n+    private final static UidGenerator uidGen = new UidGenerator();\n+\n+    private final SessionFactory sessionFactory;\n+\n+    public WorkContextLoader(\n+    // @formatter:off\n+        ProgramSupplier programSupplier,\n+        OrganisationUnitSupplier organisationUnitSupplier,\n+        TrackedEntityInstanceSupplier trackedEntityInstanceSupplier,\n+        ProgramInstanceSupplier programInstanceSupplier,\n+        ProgramStageInstanceSupplier programStageInstanceSupplier,\n+        CategoryOptionComboSupplier categoryOptionComboSupplier,\n+        DataElementSupplier dataElementSupplier,\n+        NoteSupplier noteSupplier,\n+        AssignedUserSupplier assignedUserSupplier,\n+        ServiceDelegatorSupplier serviceDelegatorSupplier,\n+        SessionFactory sessionFactory\n+    // @formatter:on\n+    )\n+    {\n+        this.programSupplier = programSupplier;\n+        this.organisationUnitSupplier = organisationUnitSupplier;\n+        this.trackedEntityInstanceSupplier = trackedEntityInstanceSupplier;\n+        this.programInstanceSupplier = programInstanceSupplier;\n+        this.programStageInstanceSupplier = programStageInstanceSupplier;\n+        this.categoryOptionComboSupplier = categoryOptionComboSupplier;\n+        this.dataElementSupplier = dataElementSupplier;\n+        this.noteSupplier = noteSupplier;\n+        this.assignedUserSupplier = assignedUserSupplier;\n+        this.serviceDelegatorSupplier = serviceDelegatorSupplier;\n+        this.sessionFactory = sessionFactory;\n+    }\n+\n+    @Transactional( readOnly = true )\n+    public WorkContext load( ImportOptions importOptions, List<Event> events )\n+    {\n+        sessionFactory.getCurrentSession().flush();\n+\n+        ImportOptions localImportOptions = importOptions;\n+        // API allows a null Import Options\n+        if ( localImportOptions == null )\n+        {\n+            localImportOptions = ImportOptions.getDefaultImportOptions();\n+        }\n+\n+        initializeUser( localImportOptions );\n+\n+        // Make sure all events have the 'uid' field populated\n+        events = uidGen.assignUidToEvents( events );\n+\n+        final Map<String, ProgramStageInstance> programStageInstanceMap = programStageInstanceSupplier\n+            .get( localImportOptions, events );\n+\n+        final Map<String, Pair<TrackedEntityInstance, Boolean>> teiMap = trackedEntityInstanceSupplier\n+            .get( localImportOptions, events );\n+\n+        return WorkContext.builder()\n+        // @formatter:off\n+            .importOptions( localImportOptions )\n+            .programsMap( programSupplier.get( localImportOptions, events ) )\n+            .programStageInstanceMap( programStageInstanceMap )\n+            .organisationUnitMap( organisationUnitSupplier.get( localImportOptions, events ) )\n+            .trackedEntityInstanceMap( teiMap )\n+            .programInstanceMap( programInstanceSupplier.get( localImportOptions, teiMap, events ) )\n+            .categoryOptionComboMap( categoryOptionComboSupplier.get( localImportOptions, events ) )\n+            .dataElementMap( dataElementSupplier.get( localImportOptions, events ) )\n+            .notesMap( noteSupplier.get( localImportOptions, events ) )\n+            .assignedUserMap( assignedUserSupplier.get( localImportOptions, events ) )\n+            .eventDataValueMap( new EventDataValueAggregator().aggregateDataValues( events, programStageInstanceMap, localImportOptions ))\n+            .serviceDelegator( serviceDelegatorSupplier.get() )\n+            .build();\n+        // @formatter:on\n+    }\n+\n+    /**\n+     * Make sure that the {@see User} object's properties are properly initialized,\n+     * to avoid running into Hibernate-related issues during validation\n+     *\n+     * @param importOptions the {@see ImportOptions} object\n+     */\n+    private void initializeUser( ImportOptions importOptions )\n+    {\n+        if ( importOptions.getUser() == null )\n+        {\n+            final User currentUser = this.serviceDelegatorSupplier.get().getCurrentUserService().getCurrentUser();\n+\n+            //\n+            // This should never really happen!\n+            //\n+            if ( currentUser != null )\n+            {\n+                UserCredentials userCredentials = currentUser.getUserCredentials();\n+                HibernateUtils.initializeProxy( userCredentials );\n+                userCredentials.isSuper();", "originalCommit": "dc20b8a9249359bcdd1f612b1852f728ef63b7ab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA2MDM0Mw==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r462060343", "bodyText": "This is required to avoid an Hibernate error down the line, when we access this method over and over, but since the object is detached, we \"pre-load\" the data here.", "author": "luciano-fiandesio", "createdAt": "2020-07-29T06:10:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTYzNDUwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA2MDM4MA==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r462060380", "bodyText": "Adding comment.", "author": "luciano-fiandesio", "createdAt": "2020-07-29T06:10:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTYzNDUwMw=="}], "type": "inlineReview", "revised_code": {"commit": "d0687a6c7c9e1c4dd64c4dc669bb80ae6e8c8c8b", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/WorkContextLoader.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/WorkContextLoader.java\nindex 004db6365f..fb19701572 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/WorkContextLoader.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/WorkContextLoader.java\n", "chunk": "@@ -161,8 +161,7 @@ public class WorkContextLoader\n             if ( currentUser != null )\n             {\n                 UserCredentials userCredentials = currentUser.getUserCredentials();\n-                HibernateUtils.initializeProxy( userCredentials );\n-                userCredentials.isSuper();\n+                initUserCredentials( userCredentials );\n                 importOptions.setUser( currentUser );\n             }\n         }\n", "next_change": {"commit": "d360652a896bee650a842567e26cd1e62145cccb", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/WorkContextLoader.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/WorkContextLoader.java\nindex fb19701572..004db6365f 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/WorkContextLoader.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/WorkContextLoader.java\n", "chunk": "@@ -161,7 +161,8 @@ public class WorkContextLoader\n             if ( currentUser != null )\n             {\n                 UserCredentials userCredentials = currentUser.getUserCredentials();\n-                initUserCredentials( userCredentials );\n+                HibernateUtils.initializeProxy( userCredentials );\n+                userCredentials.isSuper();\n                 importOptions.setUser( currentUser );\n             }\n         }\n", "next_change": {"commit": "81ece3dd068a96e3b1bfa459595a284c582b28b1", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/WorkContextLoader.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/WorkContextLoader.java\nindex 004db6365f..76a3bb7bae 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/WorkContextLoader.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/WorkContextLoader.java\n", "chunk": "@@ -161,8 +161,7 @@ public class WorkContextLoader\n             if ( currentUser != null )\n             {\n                 UserCredentials userCredentials = currentUser.getUserCredentials();\n-                HibernateUtils.initializeProxy( userCredentials );\n-                userCredentials.isSuper();\n+                initUserCredentials( userCredentials );\n                 importOptions.setUser( currentUser );\n             }\n         }\n", "next_change": null}, {"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/WorkContextLoader.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/WorkContextLoader.java\nindex 004db6365f..76a3bb7bae 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/WorkContextLoader.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/WorkContextLoader.java\n", "chunk": "@@ -170,8 +169,19 @@ public class WorkContextLoader\n         {\n             final User user = importOptions.getUser();\n             UserCredentials userCredentials = user.getUserCredentials();\n-            HibernateUtils.initializeProxy( userCredentials );\n-            userCredentials.isSuper();\n+            initUserCredentials( userCredentials );\n         }\n     }\n+\n+    /**\n+     * Force Hibernate to pre-load all collections for the {@see UserCredentials}\n+     * object and fetch the \"isSuper()\" data. This is required to avoid an Hibernate\n+     * error later, when this object becomes detached from the Hibernate Session.\n+     */\n+    private void initUserCredentials( UserCredentials userCredentials )\n+    {\n+        HibernateUtils.initializeProxy( userCredentials );\n+        userCredentials.isSuper();\n+\n+    }\n }\n", "next_change": null}]}}, {"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/WorkContextLoader.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/WorkContextLoader.java\nindex fb19701572..004db6365f 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/WorkContextLoader.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/WorkContextLoader.java\n", "chunk": "@@ -169,19 +170,8 @@ public class WorkContextLoader\n         {\n             final User user = importOptions.getUser();\n             UserCredentials userCredentials = user.getUserCredentials();\n-            initUserCredentials( userCredentials );\n+            HibernateUtils.initializeProxy( userCredentials );\n+            userCredentials.isSuper();\n         }\n     }\n-\n-    /**\n-     * Force Hibernate to pre-load all collections for the {@see UserCredentials}\n-     * object and fetch the \"isSuper()\" data. This is required to avoid an Hibernate\n-     * error later, when this object becomes detached from the Hibernate Session.\n-     */\n-    private void initUserCredentials( UserCredentials userCredentials )\n-    {\n-        HibernateUtils.initializeProxy( userCredentials );\n-        userCredentials.isSuper();\n-\n-    }\n }\n", "next_change": {"commit": "81ece3dd068a96e3b1bfa459595a284c582b28b1", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/WorkContextLoader.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/WorkContextLoader.java\nindex 004db6365f..76a3bb7bae 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/WorkContextLoader.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/WorkContextLoader.java\n", "chunk": "@@ -170,8 +169,19 @@ public class WorkContextLoader\n         {\n             final User user = importOptions.getUser();\n             UserCredentials userCredentials = user.getUserCredentials();\n-            HibernateUtils.initializeProxy( userCredentials );\n-            userCredentials.isSuper();\n+            initUserCredentials( userCredentials );\n         }\n     }\n+\n+    /**\n+     * Force Hibernate to pre-load all collections for the {@see UserCredentials}\n+     * object and fetch the \"isSuper()\" data. This is required to avoid an Hibernate\n+     * error later, when this object becomes detached from the Hibernate Session.\n+     */\n+    private void initUserCredentials( UserCredentials userCredentials )\n+    {\n+        HibernateUtils.initializeProxy( userCredentials );\n+        userCredentials.isSuper();\n+\n+    }\n }\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/WorkContextLoader.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/WorkContextLoader.java\nindex 004db6365f..fb19701572 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/WorkContextLoader.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/WorkContextLoader.java\n", "chunk": "@@ -161,8 +161,7 @@ public class WorkContextLoader\n             if ( currentUser != null )\n             {\n                 UserCredentials userCredentials = currentUser.getUserCredentials();\n-                HibernateUtils.initializeProxy( userCredentials );\n-                userCredentials.isSuper();\n+                initUserCredentials( userCredentials );\n                 importOptions.setUser( currentUser );\n             }\n         }\n", "next_change": {"commit": "8ccf9a288a67e5ee5349024fd3d281372c64c956", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/WorkContextLoader.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/WorkContextLoader.java\nindex fb19701572..000c072d46 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/WorkContextLoader.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/WorkContextLoader.java\n", "chunk": "@@ -153,35 +162,37 @@ public class WorkContextLoader\n     {\n         if ( importOptions.getUser() == null )\n         {\n-            final User currentUser = this.serviceDelegatorSupplier.get().getCurrentUserService().getCurrentUser();\n+            final User currentUser = this.serviceDelegatorSupplier.get().getEventImporterUserService().getCurrentUser();\n \n             //\n             // This should never really happen!\n             //\n             if ( currentUser != null )\n             {\n-                UserCredentials userCredentials = currentUser.getUserCredentials();\n-                initUserCredentials( userCredentials );\n+                initUser( currentUser );\n                 importOptions.setUser( currentUser );\n             }\n+            else\n+            {\n+                log.error( \"No current user found\" );\n+            }\n         }\n         else\n         {\n-            final User user = importOptions.getUser();\n-            UserCredentials userCredentials = user.getUserCredentials();\n-            initUserCredentials( userCredentials );\n+            initUser( importOptions.getUser() );\n         }\n     }\n \n     /**\n-     * Force Hibernate to pre-load all collections for the {@see UserCredentials}\n-     * object and fetch the \"isSuper()\" data. This is required to avoid an Hibernate\n-     * error later, when this object becomes detached from the Hibernate Session.\n+     * Force Hibernate to pre-load all collections for the {@see User} object\n+     * and fetch the \"isSuper()\" data. This is required to avoid an Hibernate\n+     * error later, when this object becomes detached from the Hibernate\n+     * Session.\n      */\n-    private void initUserCredentials( UserCredentials userCredentials )\n+    private void initUser( User user )\n     {\n-        HibernateUtils.initializeProxy( userCredentials );\n-        userCredentials.isSuper();\n+        user = HibernateProxyUtils.unproxy( user );\n \n+        user.isSuper();\n     }\n }\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "message": "Merge commit", "committedDate": null}, {"oid": "f8cfa7437ac99962a94ceef4b9150478899ceb2b", "committedDate": "2020-09-11 13:59:14 +0200", "message": "fix: audit for event importer are now present (#6138) (#6140)"}, {"oid": "fb390e24a39efb3e206bd995b5f9d964ede0cb33", "committedDate": "2020-12-16 15:20:31 +0100", "message": "perf: reduce number of Org Units fetched from DB on Tracker Import (#6920)"}, {"oid": "5e4669b4c89c809989ea600900735dd71baa86e2", "committedDate": "2020-12-23 14:00:18 +0700", "message": "feat: Upgrade Hibernate  (#6939)"}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "8ccf9a288a67e5ee5349024fd3d281372c64c956", "committedDate": "2022-02-22 13:25:35 +0800", "message": "feat: Merge User/UserCredentials into one DB table (#9754)"}, {"oid": "319dd37f931650192bde33cc5103569107a75550", "committedDate": "2022-05-14 10:29:06 +0500", "message": "fix: Audit history for tracked entity data values [DHIS2-12853] (#10555)"}, {"oid": "959c60d4f597187d0df2160fbbb675e5c4196e5c", "committedDate": "2023-04-27 16:46:18 +0200", "message": "chore: rename ProgramStageInstance to Event (#13731)"}, {"oid": "ba38c7fa19a269450161eb73bad6b80b1ef1133b", "committedDate": "2023-05-04 11:23:39 +0200", "message": "chore: Rename most ProgramInstance classes to Enrollment [TECH-1547] (#13811)"}, {"oid": "240be973a3083b3e4b04ada02733f1908bb73512", "committedDate": "2023-05-08 08:39:16 +0000", "message": "chore: rename TrackedEntityInstance to TrackedEntity (#13827)"}, {"oid": "02336c9611c0dd85d5038223bddbfdebc0aae526", "committedDate": "2023-05-11 19:34:26 +0200", "message": "chore: move old tracker dxf2 code into deprecated package (#13901)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTYzNTAyMg==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r461635022", "body": "What is this line for? Doesnt this just return a boolean?", "bodyText": "What is this line for? Doesnt this just return a boolean?", "bodyHTML": "<p dir=\"auto\">What is this line for? Doesnt this just return a boolean?</p>", "author": "stian-sandvold", "createdAt": "2020-07-28T14:40:03Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/WorkContextLoader.java", "diffHunk": "@@ -0,0 +1,177 @@\n+package org.hisp.dhis.dxf2.events.importer.context;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.hibernate.SessionFactory;\n+import org.hisp.dhis.dxf2.common.ImportOptions;\n+import org.hisp.dhis.dxf2.events.event.Event;\n+import org.hisp.dhis.hibernate.HibernateUtils;\n+import org.hisp.dhis.program.ProgramStageInstance;\n+import org.hisp.dhis.trackedentity.TrackedEntityInstance;\n+import org.hisp.dhis.user.User;\n+import org.hisp.dhis.user.UserCredentials;\n+import org.springframework.stereotype.Component;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+@Component\n+public class WorkContextLoader\n+{\n+    private final ProgramSupplier programSupplier;\n+\n+    private final OrganisationUnitSupplier organisationUnitSupplier;\n+\n+    private final TrackedEntityInstanceSupplier trackedEntityInstanceSupplier;\n+\n+    private final ProgramInstanceSupplier programInstanceSupplier;\n+\n+    private final ProgramStageInstanceSupplier programStageInstanceSupplier;\n+\n+    private final CategoryOptionComboSupplier categoryOptionComboSupplier;\n+\n+    private final DataElementSupplier dataElementSupplier;\n+\n+    private final NoteSupplier noteSupplier;\n+\n+    private final AssignedUserSupplier assignedUserSupplier;\n+\n+    private final ServiceDelegatorSupplier serviceDelegatorSupplier;\n+\n+    private final static UidGenerator uidGen = new UidGenerator();\n+\n+    private final SessionFactory sessionFactory;\n+\n+    public WorkContextLoader(\n+    // @formatter:off\n+        ProgramSupplier programSupplier,\n+        OrganisationUnitSupplier organisationUnitSupplier,\n+        TrackedEntityInstanceSupplier trackedEntityInstanceSupplier,\n+        ProgramInstanceSupplier programInstanceSupplier,\n+        ProgramStageInstanceSupplier programStageInstanceSupplier,\n+        CategoryOptionComboSupplier categoryOptionComboSupplier,\n+        DataElementSupplier dataElementSupplier,\n+        NoteSupplier noteSupplier,\n+        AssignedUserSupplier assignedUserSupplier,\n+        ServiceDelegatorSupplier serviceDelegatorSupplier,\n+        SessionFactory sessionFactory\n+    // @formatter:on\n+    )\n+    {\n+        this.programSupplier = programSupplier;\n+        this.organisationUnitSupplier = organisationUnitSupplier;\n+        this.trackedEntityInstanceSupplier = trackedEntityInstanceSupplier;\n+        this.programInstanceSupplier = programInstanceSupplier;\n+        this.programStageInstanceSupplier = programStageInstanceSupplier;\n+        this.categoryOptionComboSupplier = categoryOptionComboSupplier;\n+        this.dataElementSupplier = dataElementSupplier;\n+        this.noteSupplier = noteSupplier;\n+        this.assignedUserSupplier = assignedUserSupplier;\n+        this.serviceDelegatorSupplier = serviceDelegatorSupplier;\n+        this.sessionFactory = sessionFactory;\n+    }\n+\n+    @Transactional( readOnly = true )\n+    public WorkContext load( ImportOptions importOptions, List<Event> events )\n+    {\n+        sessionFactory.getCurrentSession().flush();\n+\n+        ImportOptions localImportOptions = importOptions;\n+        // API allows a null Import Options\n+        if ( localImportOptions == null )\n+        {\n+            localImportOptions = ImportOptions.getDefaultImportOptions();\n+        }\n+\n+        initializeUser( localImportOptions );\n+\n+        // Make sure all events have the 'uid' field populated\n+        events = uidGen.assignUidToEvents( events );\n+\n+        final Map<String, ProgramStageInstance> programStageInstanceMap = programStageInstanceSupplier\n+            .get( localImportOptions, events );\n+\n+        final Map<String, Pair<TrackedEntityInstance, Boolean>> teiMap = trackedEntityInstanceSupplier\n+            .get( localImportOptions, events );\n+\n+        return WorkContext.builder()\n+        // @formatter:off\n+            .importOptions( localImportOptions )\n+            .programsMap( programSupplier.get( localImportOptions, events ) )\n+            .programStageInstanceMap( programStageInstanceMap )\n+            .organisationUnitMap( organisationUnitSupplier.get( localImportOptions, events ) )\n+            .trackedEntityInstanceMap( teiMap )\n+            .programInstanceMap( programInstanceSupplier.get( localImportOptions, teiMap, events ) )\n+            .categoryOptionComboMap( categoryOptionComboSupplier.get( localImportOptions, events ) )\n+            .dataElementMap( dataElementSupplier.get( localImportOptions, events ) )\n+            .notesMap( noteSupplier.get( localImportOptions, events ) )\n+            .assignedUserMap( assignedUserSupplier.get( localImportOptions, events ) )\n+            .eventDataValueMap( new EventDataValueAggregator().aggregateDataValues( events, programStageInstanceMap, localImportOptions ))\n+            .serviceDelegator( serviceDelegatorSupplier.get() )\n+            .build();\n+        // @formatter:on\n+    }\n+\n+    /**\n+     * Make sure that the {@see User} object's properties are properly initialized,\n+     * to avoid running into Hibernate-related issues during validation\n+     *\n+     * @param importOptions the {@see ImportOptions} object\n+     */\n+    private void initializeUser( ImportOptions importOptions )\n+    {\n+        if ( importOptions.getUser() == null )\n+        {\n+            final User currentUser = this.serviceDelegatorSupplier.get().getCurrentUserService().getCurrentUser();\n+\n+            //\n+            // This should never really happen!\n+            //\n+            if ( currentUser != null )\n+            {\n+                UserCredentials userCredentials = currentUser.getUserCredentials();\n+                HibernateUtils.initializeProxy( userCredentials );\n+                userCredentials.isSuper();\n+                importOptions.setUser( currentUser );\n+            }\n+        }\n+        else\n+        {\n+            final User user = importOptions.getUser();\n+            UserCredentials userCredentials = user.getUserCredentials();\n+            HibernateUtils.initializeProxy( userCredentials );\n+            userCredentials.isSuper();", "originalCommit": "dc20b8a9249359bcdd1f612b1852f728ef63b7ab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA2MTY4MQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r462061681", "bodyText": "See before.", "author": "luciano-fiandesio", "createdAt": "2020-07-29T06:14:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTYzNTAyMg=="}], "type": "inlineReview", "revised_code": {"commit": "d0687a6c7c9e1c4dd64c4dc669bb80ae6e8c8c8b", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/WorkContextLoader.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/WorkContextLoader.java\nindex 004db6365f..fb19701572 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/WorkContextLoader.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/WorkContextLoader.java\n", "chunk": "@@ -170,8 +169,19 @@ public class WorkContextLoader\n         {\n             final User user = importOptions.getUser();\n             UserCredentials userCredentials = user.getUserCredentials();\n-            HibernateUtils.initializeProxy( userCredentials );\n-            userCredentials.isSuper();\n+            initUserCredentials( userCredentials );\n         }\n     }\n+\n+    /**\n+     * Force Hibernate to pre-load all collections for the {@see UserCredentials}\n+     * object and fetch the \"isSuper()\" data. This is required to avoid an Hibernate\n+     * error later, when this object becomes detached from the Hibernate Session.\n+     */\n+    private void initUserCredentials( UserCredentials userCredentials )\n+    {\n+        HibernateUtils.initializeProxy( userCredentials );\n+        userCredentials.isSuper();\n+\n+    }\n }\n", "next_change": {"commit": "d360652a896bee650a842567e26cd1e62145cccb", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/WorkContextLoader.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/WorkContextLoader.java\nindex fb19701572..004db6365f 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/WorkContextLoader.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/WorkContextLoader.java\n", "chunk": "@@ -169,19 +170,8 @@ public class WorkContextLoader\n         {\n             final User user = importOptions.getUser();\n             UserCredentials userCredentials = user.getUserCredentials();\n-            initUserCredentials( userCredentials );\n+            HibernateUtils.initializeProxy( userCredentials );\n+            userCredentials.isSuper();\n         }\n     }\n-\n-    /**\n-     * Force Hibernate to pre-load all collections for the {@see UserCredentials}\n-     * object and fetch the \"isSuper()\" data. This is required to avoid an Hibernate\n-     * error later, when this object becomes detached from the Hibernate Session.\n-     */\n-    private void initUserCredentials( UserCredentials userCredentials )\n-    {\n-        HibernateUtils.initializeProxy( userCredentials );\n-        userCredentials.isSuper();\n-\n-    }\n }\n", "next_change": {"commit": "81ece3dd068a96e3b1bfa459595a284c582b28b1", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/WorkContextLoader.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/WorkContextLoader.java\nindex 004db6365f..76a3bb7bae 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/WorkContextLoader.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/WorkContextLoader.java\n", "chunk": "@@ -170,8 +169,19 @@ public class WorkContextLoader\n         {\n             final User user = importOptions.getUser();\n             UserCredentials userCredentials = user.getUserCredentials();\n-            HibernateUtils.initializeProxy( userCredentials );\n-            userCredentials.isSuper();\n+            initUserCredentials( userCredentials );\n         }\n     }\n+\n+    /**\n+     * Force Hibernate to pre-load all collections for the {@see UserCredentials}\n+     * object and fetch the \"isSuper()\" data. This is required to avoid an Hibernate\n+     * error later, when this object becomes detached from the Hibernate Session.\n+     */\n+    private void initUserCredentials( UserCredentials userCredentials )\n+    {\n+        HibernateUtils.initializeProxy( userCredentials );\n+        userCredentials.isSuper();\n+\n+    }\n }\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/WorkContextLoader.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/WorkContextLoader.java\nindex 004db6365f..fb19701572 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/WorkContextLoader.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/WorkContextLoader.java\n", "chunk": "@@ -170,8 +169,19 @@ public class WorkContextLoader\n         {\n             final User user = importOptions.getUser();\n             UserCredentials userCredentials = user.getUserCredentials();\n-            HibernateUtils.initializeProxy( userCredentials );\n-            userCredentials.isSuper();\n+            initUserCredentials( userCredentials );\n         }\n     }\n+\n+    /**\n+     * Force Hibernate to pre-load all collections for the {@see UserCredentials}\n+     * object and fetch the \"isSuper()\" data. This is required to avoid an Hibernate\n+     * error later, when this object becomes detached from the Hibernate Session.\n+     */\n+    private void initUserCredentials( UserCredentials userCredentials )\n+    {\n+        HibernateUtils.initializeProxy( userCredentials );\n+        userCredentials.isSuper();\n+\n+    }\n }\n", "next_change": {"commit": "fb390e24a39efb3e206bd995b5f9d964ede0cb33", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/WorkContextLoader.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/WorkContextLoader.java\nindex fb19701572..44cc7bdba9 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/WorkContextLoader.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/WorkContextLoader.java\n", "chunk": "@@ -182,6 +189,5 @@ public class WorkContextLoader\n     {\n         HibernateUtils.initializeProxy( userCredentials );\n         userCredentials.isSuper();\n-\n     }\n }\n", "next_change": {"commit": "5e4669b4c89c809989ea600900735dd71baa86e2", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/WorkContextLoader.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/WorkContextLoader.java\nindex 44cc7bdba9..fe9ac42ce2 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/WorkContextLoader.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/WorkContextLoader.java\n", "chunk": "@@ -187,7 +187,8 @@ public class WorkContextLoader\n      */\n     private void initUserCredentials( UserCredentials userCredentials )\n     {\n-        HibernateUtils.initializeProxy( userCredentials );\n+        userCredentials = HibernateProxyUtils.unproxy( userCredentials );\n+\n         userCredentials.isSuper();\n     }\n }\n", "next_change": {"commit": "8ccf9a288a67e5ee5349024fd3d281372c64c956", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/WorkContextLoader.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/WorkContextLoader.java\nindex fe9ac42ce2..000c072d46 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/WorkContextLoader.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/WorkContextLoader.java\n", "chunk": "@@ -167,28 +169,30 @@ public class WorkContextLoader\n             //\n             if ( currentUser != null )\n             {\n-                UserCredentials userCredentials = currentUser.getUserCredentials();\n-                initUserCredentials( userCredentials );\n+                initUser( currentUser );\n                 importOptions.setUser( currentUser );\n             }\n+            else\n+            {\n+                log.error( \"No current user found\" );\n+            }\n         }\n         else\n         {\n-            final User user = importOptions.getUser();\n-            UserCredentials userCredentials = user.getUserCredentials();\n-            initUserCredentials( userCredentials );\n+            initUser( importOptions.getUser() );\n         }\n     }\n \n     /**\n-     * Force Hibernate to pre-load all collections for the {@see UserCredentials}\n-     * object and fetch the \"isSuper()\" data. This is required to avoid an Hibernate\n-     * error later, when this object becomes detached from the Hibernate Session.\n+     * Force Hibernate to pre-load all collections for the {@see User} object\n+     * and fetch the \"isSuper()\" data. This is required to avoid an Hibernate\n+     * error later, when this object becomes detached from the Hibernate\n+     * Session.\n      */\n-    private void initUserCredentials( UserCredentials userCredentials )\n+    private void initUser( User user )\n     {\n-        userCredentials = HibernateProxyUtils.unproxy( userCredentials );\n+        user = HibernateProxyUtils.unproxy( user );\n \n-        userCredentials.isSuper();\n+        user.isSuper();\n     }\n }\n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "message": "Merge commit", "committedDate": null}, {"oid": "f8cfa7437ac99962a94ceef4b9150478899ceb2b", "committedDate": "2020-09-11 13:59:14 +0200", "message": "fix: audit for event importer are now present (#6138) (#6140)"}, {"oid": "fb390e24a39efb3e206bd995b5f9d964ede0cb33", "committedDate": "2020-12-16 15:20:31 +0100", "message": "perf: reduce number of Org Units fetched from DB on Tracker Import (#6920)"}, {"oid": "5e4669b4c89c809989ea600900735dd71baa86e2", "committedDate": "2020-12-23 14:00:18 +0700", "message": "feat: Upgrade Hibernate  (#6939)"}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "8ccf9a288a67e5ee5349024fd3d281372c64c956", "committedDate": "2022-02-22 13:25:35 +0800", "message": "feat: Merge User/UserCredentials into one DB table (#9754)"}, {"oid": "319dd37f931650192bde33cc5103569107a75550", "committedDate": "2022-05-14 10:29:06 +0500", "message": "fix: Audit history for tracked entity data values [DHIS2-12853] (#10555)"}, {"oid": "959c60d4f597187d0df2160fbbb675e5c4196e5c", "committedDate": "2023-04-27 16:46:18 +0200", "message": "chore: rename ProgramStageInstance to Event (#13731)"}, {"oid": "ba38c7fa19a269450161eb73bad6b80b1ef1133b", "committedDate": "2023-05-04 11:23:39 +0200", "message": "chore: Rename most ProgramInstance classes to Enrollment [TECH-1547] (#13811)"}, {"oid": "240be973a3083b3e4b04ada02733f1908bb73512", "committedDate": "2023-05-08 08:39:16 +0000", "message": "chore: rename TrackedEntityInstance to TrackedEntity (#13827)"}, {"oid": "02336c9611c0dd85d5038223bddbfdebc0aae526", "committedDate": "2023-05-11 19:34:26 +0200", "message": "chore: move old tracker dxf2 code into deprecated package (#13901)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTYzNzE1MQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r461637151", "body": "unused code.", "bodyText": "unused code.", "bodyHTML": "<p dir=\"auto\">unused code.</p>", "author": "stian-sandvold", "createdAt": "2020-07-28T14:42:37Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java", "diffHunk": "@@ -0,0 +1,384 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer.context;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.lang.RandomStringUtils;\n+import org.apache.commons.lang.text.StrSubstitutor;\n+import org.apache.logging.log4j.util.Strings;\n+import org.cache2k.Cache;\n+import org.cache2k.Cache2kBuilder;\n+import org.cache2k.integration.CacheLoader;\n+import org.hisp.dhis.category.CategoryCombo;\n+import org.hisp.dhis.category.CategoryOption;\n+import org.hisp.dhis.category.CategoryOptionCombo;\n+import org.hisp.dhis.common.IdScheme;\n+import org.hisp.dhis.common.IdentifiableProperty;\n+import org.hisp.dhis.common.IllegalQueryException;\n+import org.hisp.dhis.commons.util.TextUtils;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.dao.EmptyResultDataAccessException;\n+import org.springframework.jdbc.core.JdbcTemplate;\n+import org.springframework.stereotype.Component;\n+\n+import com.google.common.collect.ImmutableMap;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+@Component\n+public class AttributeOptionComboLoader\n+{\n+    private final JdbcTemplate jdbcTemplate;\n+\n+    private final static String KEY_SEPARATOR = \"-\";\n+\n+    public final static String SQL_GET_CATEGORYOPTIONCOMBO = \"select coc.categoryoptioncomboid, \"\n+            + \"coc.uid, coc.code, coc.ignoreapproval, coc.name, c.uid as cc_uid, c.name as cc_name, \"\n+            + \"string_agg(dec.categoryid::text, ',') as cat_ids from categoryoptioncombo coc \"\n+            + \"join categorycombos_optioncombos co on coc.categoryoptioncomboid = co.categoryoptioncomboid \"\n+            + \"join categorycombo c on co.categorycomboid = c.categorycomboid \"\n+            + \"join categorycombos_categories cc on c.categorycomboid = cc.categorycomboid \"\n+            + \"join dataelementcategory dec on cc.categoryid = dec.categoryid where coc.\"\n+            + \"${resolvedScheme} \"\n+            + \"group by coc.categoryoptioncomboid, coc.uid, coc.code, coc.ignoreapproval, coc.name, cc_uid, cc_name\";\n+\n+    public final static String SQL_GET_CATEGORYOPTIONCOMBO_BY_CATEGORYIDS = \"select * from ( \" +\n+            \"select coc.categoryoptioncomboid, \" +\n+            \"coc.uid, \" +\n+            \"coc.code, \" +\n+            \"coc.ignoreapproval, \" +\n+            \"coc.name, \" +\n+            \"c.uid as cc_uid, \" +\n+            \"c.name as cc_name,\" +\n+            \"string_agg( dec.categoryid::text, ',') as cat_ids \" +\n+            \"from categoryoptioncombo coc \" +\n+            \"join categorycombos_optioncombos co on coc.categoryoptioncomboid = co.categoryoptioncomboid \" +\n+            \"join categorycombo c on co.categorycomboid = c.categorycomboid \" +\n+            \"join categorycombos_categories cc on c.categorycomboid = cc.categorycomboid \" +\n+            \"join dataelementcategory dec on cc.categoryid = dec.categoryid \" +\n+            \"where c.${resolvedScheme} \" +\n+            \"group by coc.categoryoptioncomboid, coc.uid, coc.code, coc.ignoreapproval, coc.name, cc_uid, cc_name \" +\n+            \") as catoptcombo where \" +\n+            \"array_length(regexp_split_to_array(cat_ids, ','),1) = array_length(ARRAY[${option_ids}],1) AND \" +\n+            \"regexp_split_to_array(cat_ids, ',') @> ARRAY[${option_ids}]\";\n+\n+    public AttributeOptionComboLoader( @Qualifier( \"readOnlyJdbcTemplate\" ) JdbcTemplate jdbcTemplate )\n+    {\n+        checkNotNull( jdbcTemplate );\n+\n+        this.jdbcTemplate = jdbcTemplate;\n+    }\n+\n+    /**\n+     * Fetches a {@see CategoryOptionCombo} by id, using the provided look-up\n+     * Scheme\n+     *\n+     * @param idScheme an IdScheme\n+     * @param id the actual id\n+     * @return a CategoryOptionCombo or null\n+     */\n+    public CategoryOptionCombo getCategoryOptionCombo( IdScheme idScheme, String id )\n+    {\n+        return loadCategoryOptionCombo( idScheme, id );\n+        //return this.cocCache.get( idScheme.name() + KEY_SEPARATOR + id );", "originalCommit": "dc20b8a9249359bcdd1f612b1852f728ef63b7ab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA2MjAxOQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r462062019", "bodyText": "Fixed (code removed)", "author": "luciano-fiandesio", "createdAt": "2020-07-29T06:15:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTYzNzE1MQ=="}], "type": "inlineReview", "revised_code": {"commit": "d0687a6c7c9e1c4dd64c4dc669bb80ae6e8c8c8b", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\nindex f18bcdf5a5..d8e807d79f 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\n", "chunk": "@@ -118,7 +113,6 @@ public class AttributeOptionComboLoader\n     public CategoryOptionCombo getCategoryOptionCombo( IdScheme idScheme, String id )\n     {\n         return loadCategoryOptionCombo( idScheme, id );\n-        //return this.cocCache.get( idScheme.name() + KEY_SEPARATOR + id );\n     }\n \n     /**\n", "next_change": {"commit": "d360652a896bee650a842567e26cd1e62145cccb", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\nindex d8e807d79f..266b319fb7 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\n", "chunk": "@@ -113,6 +118,7 @@ public class AttributeOptionComboLoader\n     public CategoryOptionCombo getCategoryOptionCombo( IdScheme idScheme, String id )\n     {\n         return loadCategoryOptionCombo( idScheme, id );\n+        //return this.cocCache.get( idScheme.name() + KEY_SEPARATOR + id );\n     }\n \n     /**\n", "next_change": {"commit": "61739bb12327dfaf4c04d8b8dab6368098566d3f", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\nindex 266b319fb7..b878f18cc1 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\n", "chunk": "@@ -118,7 +118,6 @@ public class AttributeOptionComboLoader\n     public CategoryOptionCombo getCategoryOptionCombo( IdScheme idScheme, String id )\n     {\n         return loadCategoryOptionCombo( idScheme, id );\n-        //return this.cocCache.get( idScheme.name() + KEY_SEPARATOR + id );\n     }\n \n     /**\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\nindex f18bcdf5a5..d8e807d79f 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\n", "chunk": "@@ -118,7 +113,6 @@ public class AttributeOptionComboLoader\n     public CategoryOptionCombo getCategoryOptionCombo( IdScheme idScheme, String id )\n     {\n         return loadCategoryOptionCombo( idScheme, id );\n-        //return this.cocCache.get( idScheme.name() + KEY_SEPARATOR + id );\n     }\n \n     /**\n", "next_change": {"commit": "1bd8ee38126fbac22f805db44dad0cdcba7b14a6", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\nindex d8e807d79f..0416622c95 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\n", "chunk": "@@ -120,7 +120,6 @@ public class AttributeOptionComboLoader\n      *\n      * @param categoryCombo a {@see CategoryCombo}\n      * @param categoryOptions a semicolon delimited list of Category Options uid\n-     * @param attributeOptionCombo\n      * @param idScheme the {@see IdScheme} to use to fetch the entity\n      * @return a {@see CategoryOptionCombo}\n      */\n", "next_change": {"commit": "ea76fa86409613c9766d4508d65c88ac55c413c3", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\nindex 0416622c95..b5be1e0df5 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\n", "chunk": "@@ -124,7 +125,7 @@ public class AttributeOptionComboLoader\n      * @return a {@see CategoryOptionCombo}\n      */\n     public CategoryOptionCombo getAttributeOptionCombo( CategoryCombo categoryCombo, String categoryOptions,\n-                                                        String attributeOptionCombo, IdScheme idScheme )\n+        String attributeOptionCombo, IdScheme idScheme )\n     {\n         final Set<String> opts = TextUtils.splitToArray( categoryOptions, TextUtils.SEMICOLON );\n \n", "next_change": {"commit": "869fa986d53abcf6fc503e46e3b25e1b876e6c3d", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\nindex b5be1e0df5..2ecdc33a88 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\n", "chunk": "@@ -127,7 +127,7 @@ public class AttributeOptionComboLoader\n     public CategoryOptionCombo getAttributeOptionCombo( CategoryCombo categoryCombo, String categoryOptions,\n         String attributeOptionCombo, IdScheme idScheme )\n     {\n-        final Set<String> opts = TextUtils.splitToArray( categoryOptions, TextUtils.SEMICOLON );\n+        final Set<String> opts = TextUtils.splitToSet( categoryOptions, TextUtils.SEMICOLON );\n \n         return getAttributeOptionCombo( categoryCombo, opts, attributeOptionCombo, idScheme );\n     }\n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "message": "Merge commit", "committedDate": null}, {"oid": "1bd8ee38126fbac22f805db44dad0cdcba7b14a6", "committedDate": "2020-09-23 11:30:37 +0200", "message": "fix: allow updating an Event with File data type [DHIS2-9559]"}, {"oid": "8bcecd537a43bcef4148300dcaaa97562887bc2a", "committedDate": "2020-10-02 09:16:15 +0200", "message": "fix: SQL query to fetch category option combo (#6234)"}, {"oid": "c9825d002fd6cac18498e6e39b407ab84b60cb6c", "committedDate": "2020-12-08 11:22:28 +0100", "message": "fix: Aggregate distinct cateOptionIds of AOC (#6846)"}, {"oid": "7098e9412b922ed70f8136f30c7d790e27bb43be", "committedDate": "2020-12-10 10:43:44 +0100", "message": "chore: Remove unused imports (#6875)"}, {"oid": "3e25b9b834757233501b068c1fd96b5b68cc22f7", "committedDate": "2020-12-22 12:59:13 +0100", "message": "feat: Convert sharing objects to JSONB structure [DHIS2-5814]"}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "420a69fc29ce7e6c1074a291ba005519a92b53ed", "committedDate": "2021-06-07 09:53:28 +0200", "message": "feat: Support JSON Patch (RFC 6902) for metadata objects (#7821)"}, {"oid": "610a453c1676b8d5b172e18f9df8f13570d5f80d", "committedDate": "2021-07-21 18:43:52 +0800", "message": "feat: Hibernate cluster cache invalidation with automatic node registration (#7926)"}, {"oid": "6f572a9ce997e4e66255f5a5ac2d3f141db1e8bd", "committedDate": "2021-10-26 21:13:46 +0200", "message": "chore: Remove most usages of commons-lang TECH-777 (#9104)"}, {"oid": "0395572b6507c94db6f06f39624de7935f10bb16", "committedDate": "2021-11-04 08:08:23 -0400", "message": "fix: Event import catOption start/end DHIS2-12061 (#9151)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "869fa986d53abcf6fc503e46e3b25e1b876e6c3d", "committedDate": "2022-03-01 13:31:17 +0100", "message": "feat: Add single data value endpoint with JSON body [DHIS2-12689] (#9886)"}, {"oid": "7cadf133b1ad419f9db936d81e895bd264be5925", "committedDate": "2022-04-15 08:46:01 +0200", "message": "chore(deps): bump h2 from 1.4.200 to 2.1.212 in /dhis-2 (#10459)"}, {"oid": "02336c9611c0dd85d5038223bddbfdebc0aae526", "committedDate": "2023-05-11 19:34:26 +0200", "message": "chore: move old tracker dxf2 code into deprecated package (#13901)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTYzNzcwNQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r461637705", "body": "```suggestion\r\n        return loadCategoryOption( idScheme, id );\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return loadCategoryOption( idScheme, id);\n          \n          \n            \n                    return loadCategoryOption( idScheme, id );", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">return</span> loadCategoryOption( idScheme, id);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">return</span> loadCategoryOption( idScheme, id<span class=\"x x-first x-last\"> </span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "stian-sandvold", "createdAt": "2020-07-28T14:43:16Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java", "diffHunk": "@@ -0,0 +1,384 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer.context;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.lang.RandomStringUtils;\n+import org.apache.commons.lang.text.StrSubstitutor;\n+import org.apache.logging.log4j.util.Strings;\n+import org.cache2k.Cache;\n+import org.cache2k.Cache2kBuilder;\n+import org.cache2k.integration.CacheLoader;\n+import org.hisp.dhis.category.CategoryCombo;\n+import org.hisp.dhis.category.CategoryOption;\n+import org.hisp.dhis.category.CategoryOptionCombo;\n+import org.hisp.dhis.common.IdScheme;\n+import org.hisp.dhis.common.IdentifiableProperty;\n+import org.hisp.dhis.common.IllegalQueryException;\n+import org.hisp.dhis.commons.util.TextUtils;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.dao.EmptyResultDataAccessException;\n+import org.springframework.jdbc.core.JdbcTemplate;\n+import org.springframework.stereotype.Component;\n+\n+import com.google.common.collect.ImmutableMap;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+@Component\n+public class AttributeOptionComboLoader\n+{\n+    private final JdbcTemplate jdbcTemplate;\n+\n+    private final static String KEY_SEPARATOR = \"-\";\n+\n+    public final static String SQL_GET_CATEGORYOPTIONCOMBO = \"select coc.categoryoptioncomboid, \"\n+            + \"coc.uid, coc.code, coc.ignoreapproval, coc.name, c.uid as cc_uid, c.name as cc_name, \"\n+            + \"string_agg(dec.categoryid::text, ',') as cat_ids from categoryoptioncombo coc \"\n+            + \"join categorycombos_optioncombos co on coc.categoryoptioncomboid = co.categoryoptioncomboid \"\n+            + \"join categorycombo c on co.categorycomboid = c.categorycomboid \"\n+            + \"join categorycombos_categories cc on c.categorycomboid = cc.categorycomboid \"\n+            + \"join dataelementcategory dec on cc.categoryid = dec.categoryid where coc.\"\n+            + \"${resolvedScheme} \"\n+            + \"group by coc.categoryoptioncomboid, coc.uid, coc.code, coc.ignoreapproval, coc.name, cc_uid, cc_name\";\n+\n+    public final static String SQL_GET_CATEGORYOPTIONCOMBO_BY_CATEGORYIDS = \"select * from ( \" +\n+            \"select coc.categoryoptioncomboid, \" +\n+            \"coc.uid, \" +\n+            \"coc.code, \" +\n+            \"coc.ignoreapproval, \" +\n+            \"coc.name, \" +\n+            \"c.uid as cc_uid, \" +\n+            \"c.name as cc_name,\" +\n+            \"string_agg( dec.categoryid::text, ',') as cat_ids \" +\n+            \"from categoryoptioncombo coc \" +\n+            \"join categorycombos_optioncombos co on coc.categoryoptioncomboid = co.categoryoptioncomboid \" +\n+            \"join categorycombo c on co.categorycomboid = c.categorycomboid \" +\n+            \"join categorycombos_categories cc on c.categorycomboid = cc.categorycomboid \" +\n+            \"join dataelementcategory dec on cc.categoryid = dec.categoryid \" +\n+            \"where c.${resolvedScheme} \" +\n+            \"group by coc.categoryoptioncomboid, coc.uid, coc.code, coc.ignoreapproval, coc.name, cc_uid, cc_name \" +\n+            \") as catoptcombo where \" +\n+            \"array_length(regexp_split_to_array(cat_ids, ','),1) = array_length(ARRAY[${option_ids}],1) AND \" +\n+            \"regexp_split_to_array(cat_ids, ',') @> ARRAY[${option_ids}]\";\n+\n+    public AttributeOptionComboLoader( @Qualifier( \"readOnlyJdbcTemplate\" ) JdbcTemplate jdbcTemplate )\n+    {\n+        checkNotNull( jdbcTemplate );\n+\n+        this.jdbcTemplate = jdbcTemplate;\n+    }\n+\n+    /**\n+     * Fetches a {@see CategoryOptionCombo} by id, using the provided look-up\n+     * Scheme\n+     *\n+     * @param idScheme an IdScheme\n+     * @param id the actual id\n+     * @return a CategoryOptionCombo or null\n+     */\n+    public CategoryOptionCombo getCategoryOptionCombo( IdScheme idScheme, String id )\n+    {\n+        return loadCategoryOptionCombo( idScheme, id );\n+        //return this.cocCache.get( idScheme.name() + KEY_SEPARATOR + id );\n+    }\n+\n+    /**\n+     * Fetches a {@see CategoryOptionCombo}\n+     *\n+     * @param categoryCombo a {@see CategoryCombo}\n+     * @param categoryOptions a semicolon delimited list of Category Options uid\n+     * @param attributeOptionCombo\n+     * @param idScheme the {@see IdScheme} to use to fetch the entity\n+     * @return a {@see CategoryOptionCombo}\n+     */\n+    public CategoryOptionCombo getAttributeOptionCombo( CategoryCombo categoryCombo, String categoryOptions,\n+                                                        String attributeOptionCombo, IdScheme idScheme )\n+    {\n+        final Set<String> opts = TextUtils.splitToArray( categoryOptions, TextUtils.SEMICOLON );\n+\n+        return getAttributeOptionCombo( categoryCombo, opts, attributeOptionCombo, idScheme );\n+    }\n+\n+    /**\n+     * Fetches the default {@see CategoryOptionCombo}\n+     * @return a {@see CategoryOptionCombo} or null\n+     */\n+    public CategoryOptionCombo getDefault()\n+    {\n+        return  loadCategoryOptionCombo( IdScheme.NAME, \"default\" );\n+    }\n+\n+    /**\n+     * Fetches a {@see CategoryOption} by uid, using the provided look-up Scheme\n+     *\n+     * @param idScheme an IdScheme\n+     * @param id the actual id\n+     * @return a CategoryOption or null\n+     */\n+    private CategoryOption getCategoryOption( IdScheme idScheme, String id )\n+    {\n+        return loadCategoryOption( idScheme, id);", "originalCommit": "dc20b8a9249359bcdd1f612b1852f728ef63b7ab", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d0687a6c7c9e1c4dd64c4dc669bb80ae6e8c8c8b", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\nindex f18bcdf5a5..d8e807d79f 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\n", "chunk": "@@ -156,7 +150,7 @@ public class AttributeOptionComboLoader\n      */\n     private CategoryOption getCategoryOption( IdScheme idScheme, String id )\n     {\n-        return loadCategoryOption( idScheme, id);\n+        return loadCategoryOption( idScheme, id );\n     }\n \n     private CategoryOptionCombo getAttributeOptionCombo( CategoryCombo categoryCombo, Set<String> opts,\n", "next_change": {"commit": "d360652a896bee650a842567e26cd1e62145cccb", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\nindex d8e807d79f..266b319fb7 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\n", "chunk": "@@ -150,7 +156,7 @@ public class AttributeOptionComboLoader\n      */\n     private CategoryOption getCategoryOption( IdScheme idScheme, String id )\n     {\n-        return loadCategoryOption( idScheme, id );\n+        return loadCategoryOption( idScheme, id);\n     }\n \n     private CategoryOptionCombo getAttributeOptionCombo( CategoryCombo categoryCombo, Set<String> opts,\n", "next_change": {"commit": "3e7dcacd8fdb4fa0b12001ac4a1f25bb3856cf36", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\nindex 266b319fb7..cb66a458f7 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\n", "chunk": "@@ -156,7 +156,7 @@ public class AttributeOptionComboLoader\n      */\n     private CategoryOption getCategoryOption( IdScheme idScheme, String id )\n     {\n-        return loadCategoryOption( idScheme, id);\n+        return loadCategoryOption( idScheme, id );\n     }\n \n     private CategoryOptionCombo getAttributeOptionCombo( CategoryCombo categoryCombo, Set<String> opts,\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\nindex f18bcdf5a5..d8e807d79f 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\n", "chunk": "@@ -156,7 +150,7 @@ public class AttributeOptionComboLoader\n      */\n     private CategoryOption getCategoryOption( IdScheme idScheme, String id )\n     {\n-        return loadCategoryOption( idScheme, id);\n+        return loadCategoryOption( idScheme, id );\n     }\n \n     private CategoryOptionCombo getAttributeOptionCombo( CategoryCombo categoryCombo, Set<String> opts,\n", "next_change": {"commit": "02336c9611c0dd85d5038223bddbfdebc0aae526", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\ndeleted file mode 100644\nindex d8e807d79f..0000000000\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\n+++ /dev/null\n", "chunk": "@@ -1,378 +0,0 @@\n-/*\n- * Copyright (c) 2004-2020, University of Oslo\n- * All rights reserved.\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions are met:\n- * Redistributions of source code must retain the above copyright notice, this\n- * list of conditions and the following disclaimer.\n- *\n- * Redistributions in binary form must reproduce the above copyright notice,\n- * this list of conditions and the following disclaimer in the documentation\n- * and/or other materials provided with the distribution.\n- * Neither the name of the HISP project nor the names of its contributors may\n- * be used to endorse or promote products derived from this software without\n- * specific prior written permission.\n- *\n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n- * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n- * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n- * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n- * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n- * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n- * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n- * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n- * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- */\n-\n-package org.hisp.dhis.dxf2.events.importer.context;\n-\n-import static com.google.common.base.Preconditions.checkNotNull;\n-\n-import java.sql.ResultSet;\n-import java.sql.SQLException;\n-import java.util.Arrays;\n-import java.util.HashSet;\n-import java.util.List;\n-import java.util.Objects;\n-import java.util.Set;\n-import java.util.stream.Collectors;\n-\n-import org.apache.commons.lang.text.StrSubstitutor;\n-import org.apache.logging.log4j.util.Strings;\n-import org.hisp.dhis.category.CategoryCombo;\n-import org.hisp.dhis.category.CategoryOption;\n-import org.hisp.dhis.category.CategoryOptionCombo;\n-import org.hisp.dhis.common.IdScheme;\n-import org.hisp.dhis.common.IdentifiableProperty;\n-import org.hisp.dhis.common.IllegalQueryException;\n-import org.hisp.dhis.commons.util.TextUtils;\n-import org.springframework.beans.factory.annotation.Qualifier;\n-import org.springframework.dao.EmptyResultDataAccessException;\n-import org.springframework.jdbc.core.JdbcTemplate;\n-import org.springframework.stereotype.Component;\n-\n-import com.google.common.collect.ImmutableMap;\n-\n-/**\n- * @author Luciano Fiandesio\n- */\n-@Component\n-public class AttributeOptionComboLoader\n-{\n-    private final JdbcTemplate jdbcTemplate;\n-\n-    private final static String KEY_SEPARATOR = \"-\";\n-\n-    public final static String SQL_GET_CATEGORYOPTIONCOMBO = \"select coc.categoryoptioncomboid, \"\n-            + \"coc.uid, coc.code, coc.ignoreapproval, coc.name, c.uid as cc_uid, c.name as cc_name, \"\n-            + \"string_agg(dec.categoryid::text, ',') as cat_ids from categoryoptioncombo coc \"\n-            + \"join categorycombos_optioncombos co on coc.categoryoptioncomboid = co.categoryoptioncomboid \"\n-            + \"join categorycombo c on co.categorycomboid = c.categorycomboid \"\n-            + \"join categorycombos_categories cc on c.categorycomboid = cc.categorycomboid \"\n-            + \"join dataelementcategory dec on cc.categoryid = dec.categoryid where coc.\"\n-            + \"${resolvedScheme} \"\n-            + \"group by coc.categoryoptioncomboid, coc.uid, coc.code, coc.ignoreapproval, coc.name, cc_uid, cc_name\";\n-\n-    public final static String SQL_GET_CATEGORYOPTIONCOMBO_BY_CATEGORYIDS = \"select * from ( \" +\n-            \"select coc.categoryoptioncomboid, \" +\n-            \"coc.uid, \" +\n-            \"coc.code, \" +\n-            \"coc.ignoreapproval, \" +\n-            \"coc.name, \" +\n-            \"c.uid as cc_uid, \" +\n-            \"c.name as cc_name,\" +\n-            \"string_agg( dec.categoryid::text, ',') as cat_ids \" +\n-            \"from categoryoptioncombo coc \" +\n-            \"join categorycombos_optioncombos co on coc.categoryoptioncomboid = co.categoryoptioncomboid \" +\n-            \"join categorycombo c on co.categorycomboid = c.categorycomboid \" +\n-            \"join categorycombos_categories cc on c.categorycomboid = cc.categorycomboid \" +\n-            \"join dataelementcategory dec on cc.categoryid = dec.categoryid \" +\n-            \"where c.${resolvedScheme} \" +\n-            \"group by coc.categoryoptioncomboid, coc.uid, coc.code, coc.ignoreapproval, coc.name, cc_uid, cc_name \" +\n-            \") as catoptcombo where \" +\n-            \"array_length(regexp_split_to_array(cat_ids, ','),1) = array_length(ARRAY[${option_ids}],1) AND \" +\n-            \"regexp_split_to_array(cat_ids, ',') @> ARRAY[${option_ids}]\";\n-\n-    public AttributeOptionComboLoader( @Qualifier( \"readOnlyJdbcTemplate\" ) JdbcTemplate jdbcTemplate )\n-    {\n-        checkNotNull( jdbcTemplate );\n-\n-        this.jdbcTemplate = jdbcTemplate;\n-    }\n-\n-    /**\n-     * Fetches a {@see CategoryOptionCombo} by id, using the provided look-up\n-     * Scheme\n-     *\n-     * @param idScheme an IdScheme\n-     * @param id the actual id\n-     * @return a CategoryOptionCombo or null\n-     */\n-    public CategoryOptionCombo getCategoryOptionCombo( IdScheme idScheme, String id )\n-    {\n-        return loadCategoryOptionCombo( idScheme, id );\n-    }\n-\n-    /**\n-     * Fetches a {@see CategoryOptionCombo}\n-     *\n-     * @param categoryCombo a {@see CategoryCombo}\n-     * @param categoryOptions a semicolon delimited list of Category Options uid\n-     * @param attributeOptionCombo\n-     * @param idScheme the {@see IdScheme} to use to fetch the entity\n-     * @return a {@see CategoryOptionCombo}\n-     */\n-    public CategoryOptionCombo getAttributeOptionCombo( CategoryCombo categoryCombo, String categoryOptions,\n-                                                        String attributeOptionCombo, IdScheme idScheme )\n-    {\n-        final Set<String> opts = TextUtils.splitToArray( categoryOptions, TextUtils.SEMICOLON );\n-\n-        return getAttributeOptionCombo( categoryCombo, opts, attributeOptionCombo, idScheme );\n-    }\n-\n-    /**\n-     * Fetches the default {@see CategoryOptionCombo}\n-     * @return a {@see CategoryOptionCombo} or null\n-     */\n-    public CategoryOptionCombo getDefault()\n-    {\n-        return  loadCategoryOptionCombo( IdScheme.NAME, \"default\" );\n-    }\n-\n-    /**\n-     * Fetches a {@see CategoryOption} by uid, using the provided look-up Scheme\n-     *\n-     * @param idScheme an IdScheme\n-     * @param id the actual id\n-     * @return a CategoryOption or null\n-     */\n-    private CategoryOption getCategoryOption( IdScheme idScheme, String id )\n-    {\n-        return loadCategoryOption( idScheme, id );\n-    }\n-\n-    private CategoryOptionCombo getAttributeOptionCombo( CategoryCombo categoryCombo, Set<String> opts,\n-        String attributeOptionCombo, IdScheme idScheme )\n-    {\n-        if ( categoryCombo == null )\n-        {\n-            throw new IllegalQueryException( \"Illegal category combo\" );\n-        }\n-\n-        // ---------------------------------------------------------------------\n-        // Attribute category options validation\n-        // ---------------------------------------------------------------------\n-\n-        CategoryOptionCombo attrOptCombo = null;\n-\n-        if ( opts != null )\n-        {\n-            Set<CategoryOption> categoryOptions = new HashSet<>();\n-\n-            for ( String uid : opts )\n-            {\n-                CategoryOption categoryOption = getCategoryOption( idScheme, uid );\n-\n-                if ( categoryOption == null )\n-                {\n-                    throw new IllegalQueryException( \"Illegal category option identifier: \" + uid );\n-                }\n-\n-                categoryOptions.add( categoryOption );\n-            }\n-\n-            final String id = resolveCategoryComboId( categoryCombo, idScheme );\n-\n-            attrOptCombo = getAttributeOptionCombo( idScheme, id, categoryOptions );\n-\n-            if ( attrOptCombo == null )\n-            {\n-                throw new IllegalQueryException(\n-                    \"Attribute option combo does not exist for given category combo and category options\" );\n-            }\n-        }\n-        else if ( attributeOptionCombo != null )\n-        {\n-            attrOptCombo = getCategoryOptionCombo( idScheme, attributeOptionCombo );\n-        }\n-\n-        // ---------------------------------------------------------------------\n-        // Fall back to default category option combination\n-        // ---------------------------------------------------------------------\n-\n-        if ( attrOptCombo == null )\n-        {\n-            attrOptCombo = getDefault();\n-        }\n-\n-        if ( attrOptCombo == null )\n-        {\n-            throw new IllegalQueryException( \"Default attribute option combo does not exist\" );\n-        }\n-\n-        return attrOptCombo;\n-    }\n-\n-    private String resolveCategoryComboId( CategoryCombo categoryCombo, IdScheme idScheme )\n-    {\n-        String id = null;\n-\n-        if ( idScheme.is( IdentifiableProperty.ID ) )\n-        {\n-            id = String.valueOf( categoryCombo.getId() );\n-        }\n-        else if ( idScheme.is( IdentifiableProperty.UID ) )\n-        {\n-            id = categoryCombo.getUid();\n-        }\n-        else if ( idScheme.is( IdentifiableProperty.CODE ) )\n-        {\n-            id = categoryCombo.getCode();\n-        }\n-        else if ( idScheme.is( IdentifiableProperty.NAME ) )\n-        {\n-            id = categoryCombo.getName();\n-        }\n-\n-        return id;\n-    }\n-\n-    private CategoryOptionCombo getAttributeOptionCombo( IdScheme idScheme, String categoryComboId, Set<CategoryOption> categoryOptions ) {\n-\n-        final String key = \"categorycomboid\";\n-        final String categoryComboKey = resolveId( idScheme, key, categoryComboId );\n-\n-        final String optionsId = categoryOptions.stream()\n-            .map( co -> Long.toString( co.getId() ) )\n-            .map( s -> \"'\" + s + \"'\" )\n-            .collect( Collectors.joining( \",\" ) );\n-\n-        // @formatter:off\n-        StrSubstitutor sub = new StrSubstitutor( ImmutableMap.<String, String>builder()\n-                .put( \"resolvedScheme\", Objects.requireNonNull( categoryComboKey ) )\n-                .put( \"option_ids\", optionsId )\n-                .build() );\n-        // @formatter:on\n-        \n-        // TODO use cache\n-        List<CategoryOptionCombo> categoryOptionCombos = jdbcTemplate\n-            .query( sub.replace( SQL_GET_CATEGORYOPTIONCOMBO_BY_CATEGORYIDS ), ( rs, i ) -> bind( key, rs ) );\n-\n-        if ( categoryOptionCombos.size() == 1 )\n-        {\n-            return categoryOptionCombos.get( 0 );\n-        }\n-        else\n-        {\n-            // TODO throw an error??\n-            return null;\n-        }\n-    }\n-\n-    /**\n-     * Fetches a {@see CategoryOptionCombo} by \"id\" (based on the provided IdScheme)\n-     *\n-     * The {@see CategoryOptionCombo} contains tha associated {@see CategoryCombo}\n-     * and all the associated {@see CategoryOption}\n-     *\n-     * @param idScheme a {@see IdScheme}\n-     * @param id the {@see CategoryOptionCombo} id to use\n-     * @return a {@see CategoryOptionCombo} or null\n-     */\n-    private CategoryOptionCombo loadCategoryOptionCombo( IdScheme idScheme, String id )\n-    {\n-        String key = \"categoryoptioncomboid\";\n-        // @formatter:off\n-        StrSubstitutor sub = new StrSubstitutor( ImmutableMap.<String, String>builder()\n-            .put( \"key\", key )\n-            .put( \"resolvedScheme\", Objects.requireNonNull( resolveId( idScheme, key, id ) ) )\n-            .build() );\n-        // @formatter:on\n-        try\n-        {\n-            return jdbcTemplate.queryForObject( sub.replace( SQL_GET_CATEGORYOPTIONCOMBO ),\n-                ( rs, i ) -> bind( key, rs ) );\n-        }\n-        catch ( EmptyResultDataAccessException e )\n-        {\n-            return null;\n-        }\n-    }\n-\n-    private CategoryOptionCombo bind( String key, ResultSet rs )\n-        throws SQLException\n-    {\n-        CategoryOptionCombo categoryOptionCombo = new CategoryOptionCombo();\n-        categoryOptionCombo.setId( rs.getLong( key ) );\n-        categoryOptionCombo.setUid( rs.getString( \"uid\" ) );\n-        categoryOptionCombo.setCode( rs.getString( \"code\" ) );\n-        categoryOptionCombo.setIgnoreApproval( rs.getBoolean( \"ignoreapproval\" ) );\n-        categoryOptionCombo.setName( rs.getString( \"name\" ) );\n-\n-        String cat_ids = rs.getString( \"cat_ids\" );\n-        if ( Strings.isNotEmpty( cat_ids ) )\n-        {\n-            categoryOptionCombo.setCategoryOptions( Arrays.stream( cat_ids.split( \",\" ) ).map( coid -> {\n-                CategoryOption co = new CategoryOption();\n-                co.setId( Long.parseLong( coid ) );\n-                return co;\n-            } ).collect( Collectors.toSet() )\n-\n-            );\n-        }\n-        CategoryCombo categoryCombo = new CategoryCombo();\n-        categoryCombo.setUid( rs.getString( \"cc_uid\" ) );\n-        categoryCombo.setName( rs.getString( \"cc_name\" ) );\n-        categoryOptionCombo.setCategoryCombo( categoryCombo );\n-        return categoryOptionCombo;\n-\n-    }\n-\n-    private CategoryOption loadCategoryOption( IdScheme idScheme, String id )\n-    {\n-        String key = \"categoryoptionid\";\n-        final String sql = \"select \" + key + \", uid, code, name from dataelementcategoryoption \"\n-            + \"where \" + resolveId( idScheme, key, id );\n-\n-        try\n-        {\n-            return jdbcTemplate.queryForObject( sql, ( rs, i ) -> {\n-                CategoryOption categoryOption = new CategoryOption();\n-                categoryOption.setId( rs.getLong( key ) );\n-                categoryOption.setUid( rs.getString( \"uid\" ) );\n-                categoryOption.setCode( rs.getString( \"code\" ) );\n-                categoryOption.setName( rs.getString( \"name\" ) );\n-\n-                return categoryOption;\n-            } );\n-        }\n-        catch ( EmptyResultDataAccessException e )\n-        {\n-            return null;\n-        }\n-    }\n-\n-    private String resolveId( IdScheme scheme, String primaryKeyColumn, String id )\n-    {\n-        if ( scheme.is( IdentifiableProperty.ID ) )\n-        {\n-            return primaryKeyColumn + \" = \" + id;\n-        }\n-        else if ( scheme.is( IdentifiableProperty.UID ) )\n-        {\n-            return \"uid = '\" + id + \"'\";\n-        }\n-        else if ( scheme.is( IdentifiableProperty.CODE ) )\n-        {\n-            return \"code = '\" + id + \"'\";\n-        }\n-        else if ( scheme.is( IdentifiableProperty.NAME ) )\n-        {\n-            return \"name = '\" + id + \"'\";\n-        }\n-\n-        return null;\n-    }\n-}\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "message": "Merge commit", "committedDate": null}, {"oid": "1bd8ee38126fbac22f805db44dad0cdcba7b14a6", "committedDate": "2020-09-23 11:30:37 +0200", "message": "fix: allow updating an Event with File data type [DHIS2-9559]"}, {"oid": "8bcecd537a43bcef4148300dcaaa97562887bc2a", "committedDate": "2020-10-02 09:16:15 +0200", "message": "fix: SQL query to fetch category option combo (#6234)"}, {"oid": "c9825d002fd6cac18498e6e39b407ab84b60cb6c", "committedDate": "2020-12-08 11:22:28 +0100", "message": "fix: Aggregate distinct cateOptionIds of AOC (#6846)"}, {"oid": "7098e9412b922ed70f8136f30c7d790e27bb43be", "committedDate": "2020-12-10 10:43:44 +0100", "message": "chore: Remove unused imports (#6875)"}, {"oid": "3e25b9b834757233501b068c1fd96b5b68cc22f7", "committedDate": "2020-12-22 12:59:13 +0100", "message": "feat: Convert sharing objects to JSONB structure [DHIS2-5814]"}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "420a69fc29ce7e6c1074a291ba005519a92b53ed", "committedDate": "2021-06-07 09:53:28 +0200", "message": "feat: Support JSON Patch (RFC 6902) for metadata objects (#7821)"}, {"oid": "610a453c1676b8d5b172e18f9df8f13570d5f80d", "committedDate": "2021-07-21 18:43:52 +0800", "message": "feat: Hibernate cluster cache invalidation with automatic node registration (#7926)"}, {"oid": "6f572a9ce997e4e66255f5a5ac2d3f141db1e8bd", "committedDate": "2021-10-26 21:13:46 +0200", "message": "chore: Remove most usages of commons-lang TECH-777 (#9104)"}, {"oid": "0395572b6507c94db6f06f39624de7935f10bb16", "committedDate": "2021-11-04 08:08:23 -0400", "message": "fix: Event import catOption start/end DHIS2-12061 (#9151)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "869fa986d53abcf6fc503e46e3b25e1b876e6c3d", "committedDate": "2022-03-01 13:31:17 +0100", "message": "feat: Add single data value endpoint with JSON body [DHIS2-12689] (#9886)"}, {"oid": "7cadf133b1ad419f9db936d81e895bd264be5925", "committedDate": "2022-04-15 08:46:01 +0200", "message": "chore(deps): bump h2 from 1.4.200 to 2.1.212 in /dhis-2 (#10459)"}, {"oid": "02336c9611c0dd85d5038223bddbfdebc0aae526", "committedDate": "2023-05-11 19:34:26 +0200", "message": "chore: move old tracker dxf2 code into deprecated package (#13901)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY0MDMxNA==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r461640314", "body": "If the attributeOptionCombo user supplied doesnt exists, yes we should return an error to the user.", "bodyText": "If the attributeOptionCombo user supplied doesnt exists, yes we should return an error to the user.", "bodyHTML": "<p dir=\"auto\">If the attributeOptionCombo user supplied doesnt exists, yes we should return an error to the user.</p>", "author": "stian-sandvold", "createdAt": "2020-07-28T14:46:24Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java", "diffHunk": "@@ -0,0 +1,384 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer.context;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.lang.RandomStringUtils;\n+import org.apache.commons.lang.text.StrSubstitutor;\n+import org.apache.logging.log4j.util.Strings;\n+import org.cache2k.Cache;\n+import org.cache2k.Cache2kBuilder;\n+import org.cache2k.integration.CacheLoader;\n+import org.hisp.dhis.category.CategoryCombo;\n+import org.hisp.dhis.category.CategoryOption;\n+import org.hisp.dhis.category.CategoryOptionCombo;\n+import org.hisp.dhis.common.IdScheme;\n+import org.hisp.dhis.common.IdentifiableProperty;\n+import org.hisp.dhis.common.IllegalQueryException;\n+import org.hisp.dhis.commons.util.TextUtils;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.dao.EmptyResultDataAccessException;\n+import org.springframework.jdbc.core.JdbcTemplate;\n+import org.springframework.stereotype.Component;\n+\n+import com.google.common.collect.ImmutableMap;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+@Component\n+public class AttributeOptionComboLoader\n+{\n+    private final JdbcTemplate jdbcTemplate;\n+\n+    private final static String KEY_SEPARATOR = \"-\";\n+\n+    public final static String SQL_GET_CATEGORYOPTIONCOMBO = \"select coc.categoryoptioncomboid, \"\n+            + \"coc.uid, coc.code, coc.ignoreapproval, coc.name, c.uid as cc_uid, c.name as cc_name, \"\n+            + \"string_agg(dec.categoryid::text, ',') as cat_ids from categoryoptioncombo coc \"\n+            + \"join categorycombos_optioncombos co on coc.categoryoptioncomboid = co.categoryoptioncomboid \"\n+            + \"join categorycombo c on co.categorycomboid = c.categorycomboid \"\n+            + \"join categorycombos_categories cc on c.categorycomboid = cc.categorycomboid \"\n+            + \"join dataelementcategory dec on cc.categoryid = dec.categoryid where coc.\"\n+            + \"${resolvedScheme} \"\n+            + \"group by coc.categoryoptioncomboid, coc.uid, coc.code, coc.ignoreapproval, coc.name, cc_uid, cc_name\";\n+\n+    public final static String SQL_GET_CATEGORYOPTIONCOMBO_BY_CATEGORYIDS = \"select * from ( \" +\n+            \"select coc.categoryoptioncomboid, \" +\n+            \"coc.uid, \" +\n+            \"coc.code, \" +\n+            \"coc.ignoreapproval, \" +\n+            \"coc.name, \" +\n+            \"c.uid as cc_uid, \" +\n+            \"c.name as cc_name,\" +\n+            \"string_agg( dec.categoryid::text, ',') as cat_ids \" +\n+            \"from categoryoptioncombo coc \" +\n+            \"join categorycombos_optioncombos co on coc.categoryoptioncomboid = co.categoryoptioncomboid \" +\n+            \"join categorycombo c on co.categorycomboid = c.categorycomboid \" +\n+            \"join categorycombos_categories cc on c.categorycomboid = cc.categorycomboid \" +\n+            \"join dataelementcategory dec on cc.categoryid = dec.categoryid \" +\n+            \"where c.${resolvedScheme} \" +\n+            \"group by coc.categoryoptioncomboid, coc.uid, coc.code, coc.ignoreapproval, coc.name, cc_uid, cc_name \" +\n+            \") as catoptcombo where \" +\n+            \"array_length(regexp_split_to_array(cat_ids, ','),1) = array_length(ARRAY[${option_ids}],1) AND \" +\n+            \"regexp_split_to_array(cat_ids, ',') @> ARRAY[${option_ids}]\";\n+\n+    public AttributeOptionComboLoader( @Qualifier( \"readOnlyJdbcTemplate\" ) JdbcTemplate jdbcTemplate )\n+    {\n+        checkNotNull( jdbcTemplate );\n+\n+        this.jdbcTemplate = jdbcTemplate;\n+    }\n+\n+    /**\n+     * Fetches a {@see CategoryOptionCombo} by id, using the provided look-up\n+     * Scheme\n+     *\n+     * @param idScheme an IdScheme\n+     * @param id the actual id\n+     * @return a CategoryOptionCombo or null\n+     */\n+    public CategoryOptionCombo getCategoryOptionCombo( IdScheme idScheme, String id )\n+    {\n+        return loadCategoryOptionCombo( idScheme, id );\n+        //return this.cocCache.get( idScheme.name() + KEY_SEPARATOR + id );\n+    }\n+\n+    /**\n+     * Fetches a {@see CategoryOptionCombo}\n+     *\n+     * @param categoryCombo a {@see CategoryCombo}\n+     * @param categoryOptions a semicolon delimited list of Category Options uid\n+     * @param attributeOptionCombo\n+     * @param idScheme the {@see IdScheme} to use to fetch the entity\n+     * @return a {@see CategoryOptionCombo}\n+     */\n+    public CategoryOptionCombo getAttributeOptionCombo( CategoryCombo categoryCombo, String categoryOptions,\n+                                                        String attributeOptionCombo, IdScheme idScheme )\n+    {\n+        final Set<String> opts = TextUtils.splitToArray( categoryOptions, TextUtils.SEMICOLON );\n+\n+        return getAttributeOptionCombo( categoryCombo, opts, attributeOptionCombo, idScheme );\n+    }\n+\n+    /**\n+     * Fetches the default {@see CategoryOptionCombo}\n+     * @return a {@see CategoryOptionCombo} or null\n+     */\n+    public CategoryOptionCombo getDefault()\n+    {\n+        return  loadCategoryOptionCombo( IdScheme.NAME, \"default\" );\n+    }\n+\n+    /**\n+     * Fetches a {@see CategoryOption} by uid, using the provided look-up Scheme\n+     *\n+     * @param idScheme an IdScheme\n+     * @param id the actual id\n+     * @return a CategoryOption or null\n+     */\n+    private CategoryOption getCategoryOption( IdScheme idScheme, String id )\n+    {\n+        return loadCategoryOption( idScheme, id);\n+    }\n+\n+    private CategoryOptionCombo getAttributeOptionCombo( CategoryCombo categoryCombo, Set<String> opts,\n+        String attributeOptionCombo, IdScheme idScheme )\n+    {\n+        if ( categoryCombo == null )\n+        {\n+            throw new IllegalQueryException( \"Illegal category combo\" );\n+        }\n+\n+        // ---------------------------------------------------------------------\n+        // Attribute category options validation\n+        // ---------------------------------------------------------------------\n+\n+        CategoryOptionCombo attrOptCombo = null;\n+\n+        if ( opts != null )\n+        {\n+            Set<CategoryOption> categoryOptions = new HashSet<>();\n+\n+            for ( String uid : opts )\n+            {\n+                CategoryOption categoryOption = getCategoryOption( idScheme, uid );\n+\n+                if ( categoryOption == null )\n+                {\n+                    throw new IllegalQueryException( \"Illegal category option identifier: \" + uid );\n+                }\n+\n+                categoryOptions.add( categoryOption );\n+            }\n+\n+            final String id = resolveCategoryComboId( categoryCombo, idScheme );\n+\n+            attrOptCombo = getAttributeOptionCombo( idScheme, id, categoryOptions );\n+\n+            if ( attrOptCombo == null )\n+            {\n+                throw new IllegalQueryException(\n+                    \"Attribute option combo does not exist for given category combo and category options\" );\n+            }\n+        }\n+        else if ( attributeOptionCombo != null )\n+        {\n+            attrOptCombo = getCategoryOptionCombo( idScheme, attributeOptionCombo );\n+        }\n+\n+        // ---------------------------------------------------------------------\n+        // Fall back to default category option combination\n+        // ---------------------------------------------------------------------\n+\n+        if ( attrOptCombo == null )\n+        {\n+            attrOptCombo = getDefault();\n+        }\n+\n+        if ( attrOptCombo == null )\n+        {\n+            throw new IllegalQueryException( \"Default attribute option combo does not exist\" );\n+        }\n+\n+        return attrOptCombo;\n+    }\n+\n+    private String resolveCategoryComboId( CategoryCombo categoryCombo, IdScheme idScheme )\n+    {\n+        String id = null;\n+\n+        if ( idScheme.is( IdentifiableProperty.ID ) )\n+        {\n+            id = String.valueOf( categoryCombo.getId() );\n+        }\n+        else if ( idScheme.is( IdentifiableProperty.UID ) )\n+        {\n+            id = categoryCombo.getUid();\n+        }\n+        else if ( idScheme.is( IdentifiableProperty.CODE ) )\n+        {\n+            id = categoryCombo.getCode();\n+        }\n+        else if ( idScheme.is( IdentifiableProperty.NAME ) )\n+        {\n+            id = categoryCombo.getName();\n+        }\n+\n+        return id;\n+    }\n+\n+    private CategoryOptionCombo getAttributeOptionCombo( IdScheme idScheme, String categoryComboId, Set<CategoryOption> categoryOptions) {\n+\n+        final String key = \"categorycomboid\";\n+        final String categoryComboKey = resolveId( idScheme, key, categoryComboId);\n+\n+        final String optionsId = categoryOptions.stream()\n+            .map( co -> Long.toString( co.getId() ) )\n+            .map(s -> \"'\" + s + \"'\")\n+            .collect( Collectors.joining( \",\" ) );\n+\n+        // @formatter:off\n+        StrSubstitutor sub = new StrSubstitutor( ImmutableMap.<String, String>builder()\n+                .put( \"resolvedScheme\", Objects.requireNonNull( categoryComboKey ) )\n+                .put( \"option_ids\", optionsId )\n+                .build() );\n+        // @formatter:on\n+        \n+        // TODO use cache\n+        List<CategoryOptionCombo> categoryOptionCombos = jdbcTemplate\n+            .query( sub.replace( SQL_GET_CATEGORYOPTIONCOMBO_BY_CATEGORYIDS ), ( rs, i ) -> bind( key, rs ) );\n+\n+        if ( categoryOptionCombos.size() == 1 )\n+        {\n+            return categoryOptionCombos.get( 0 );\n+        }\n+        else\n+        {\n+            // TODO throw an error??", "originalCommit": "dc20b8a9249359bcdd1f612b1852f728ef63b7ab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY0MTMwOQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r461641309", "bodyText": "At least this is how I understand the code here :)", "author": "stian-sandvold", "createdAt": "2020-07-28T14:47:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY0MDMxNA=="}], "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "8bcecd537a43bcef4148300dcaaa97562887bc2a", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\nindex f18bcdf5a5..ca9f520775 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\n", "chunk": "@@ -245,26 +238,24 @@ public class AttributeOptionComboLoader\n         return id;\n     }\n \n-    private CategoryOptionCombo getAttributeOptionCombo( IdScheme idScheme, String categoryComboId, Set<CategoryOption> categoryOptions) {\n+    private CategoryOptionCombo getAttributeOptionCombo( IdScheme idScheme, String categoryComboId, Set<CategoryOption> categoryOptions ) {\n \n         final String key = \"categorycomboid\";\n-        final String categoryComboKey = resolveId( idScheme, key, categoryComboId);\n+        final String categoryComboKey = resolveId( idScheme, key, categoryComboId );\n \n         final String optionsId = categoryOptions.stream()\n             .map( co -> Long.toString( co.getId() ) )\n-            .map(s -> \"'\" + s + \"'\")\n+            .map( s -> \"'\" + s + \"'\" )\n             .collect( Collectors.joining( \",\" ) );\n \n-        // @formatter:off\n-        StrSubstitutor sub = new StrSubstitutor( ImmutableMap.<String, String>builder()\n-                .put( \"resolvedScheme\", Objects.requireNonNull( categoryComboKey ) )\n-                .put( \"option_ids\", optionsId )\n-                .build() );\n-        // @formatter:on\n+        StrSubstitutor sub = new StrSubstitutor( ImmutableMap.<String, String> builder()\n+            .put( \"resolvedScheme\", Objects.requireNonNull( categoryComboKey ) )\n+            .put( \"option_ids\", optionsId )\n+            .build() );\n         \n         // TODO use cache\n         List<CategoryOptionCombo> categoryOptionCombos = jdbcTemplate\n-            .query( sub.replace( SQL_GET_CATEGORYOPTIONCOMBO_BY_CATEGORYIDS ), ( rs, i ) -> bind( key, rs ) );\n+            .query( sub.replace( SQL_GET_CATEGORYOPTIONCOMBO_BY_CATEGORYIDS ), ( rs, i ) -> bind( \"categoryoptioncomboid\", rs ) );\n \n         if ( categoryOptionCombos.size() == 1 )\n         {\n", "next_change": {"commit": "c9825d002fd6cac18498e6e39b407ab84b60cb6c", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\nindex ca9f520775..c6bcc1ffae 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\n", "chunk": "@@ -252,7 +252,7 @@ public class AttributeOptionComboLoader\n             .put( \"resolvedScheme\", Objects.requireNonNull( categoryComboKey ) )\n             .put( \"option_ids\", optionsId )\n             .build() );\n-        \n+\n         // TODO use cache\n         List<CategoryOptionCombo> categoryOptionCombos = jdbcTemplate\n             .query( sub.replace( SQL_GET_CATEGORYOPTIONCOMBO_BY_CATEGORYIDS ), ( rs, i ) -> bind( \"categoryoptioncomboid\", rs ) );\n", "next_change": {"commit": "ea76fa86409613c9766d4508d65c88ac55c413c3", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\nindex c6bcc1ffae..b5be1e0df5 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\n", "chunk": "@@ -255,7 +259,8 @@ public class AttributeOptionComboLoader\n \n         // TODO use cache\n         List<CategoryOptionCombo> categoryOptionCombos = jdbcTemplate\n-            .query( sub.replace( SQL_GET_CATEGORYOPTIONCOMBO_BY_CATEGORYIDS ), ( rs, i ) -> bind( \"categoryoptioncomboid\", rs ) );\n+            .query( sub.replace( SQL_GET_CATEGORYOPTIONCOMBO_BY_CATEGORYIDS ),\n+                ( rs, i ) -> bind( \"categoryoptioncomboid\", rs ) );\n \n         if ( categoryOptionCombos.size() == 1 )\n         {\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "message": "Merge commit", "committedDate": null}, {"oid": "1bd8ee38126fbac22f805db44dad0cdcba7b14a6", "committedDate": "2020-09-23 11:30:37 +0200", "message": "fix: allow updating an Event with File data type [DHIS2-9559]"}, {"oid": "8bcecd537a43bcef4148300dcaaa97562887bc2a", "committedDate": "2020-10-02 09:16:15 +0200", "message": "fix: SQL query to fetch category option combo (#6234)"}, {"oid": "c9825d002fd6cac18498e6e39b407ab84b60cb6c", "committedDate": "2020-12-08 11:22:28 +0100", "message": "fix: Aggregate distinct cateOptionIds of AOC (#6846)"}, {"oid": "7098e9412b922ed70f8136f30c7d790e27bb43be", "committedDate": "2020-12-10 10:43:44 +0100", "message": "chore: Remove unused imports (#6875)"}, {"oid": "3e25b9b834757233501b068c1fd96b5b68cc22f7", "committedDate": "2020-12-22 12:59:13 +0100", "message": "feat: Convert sharing objects to JSONB structure [DHIS2-5814]"}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "420a69fc29ce7e6c1074a291ba005519a92b53ed", "committedDate": "2021-06-07 09:53:28 +0200", "message": "feat: Support JSON Patch (RFC 6902) for metadata objects (#7821)"}, {"oid": "610a453c1676b8d5b172e18f9df8f13570d5f80d", "committedDate": "2021-07-21 18:43:52 +0800", "message": "feat: Hibernate cluster cache invalidation with automatic node registration (#7926)"}, {"oid": "6f572a9ce997e4e66255f5a5ac2d3f141db1e8bd", "committedDate": "2021-10-26 21:13:46 +0200", "message": "chore: Remove most usages of commons-lang TECH-777 (#9104)"}, {"oid": "0395572b6507c94db6f06f39624de7935f10bb16", "committedDate": "2021-11-04 08:08:23 -0400", "message": "fix: Event import catOption start/end DHIS2-12061 (#9151)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "869fa986d53abcf6fc503e46e3b25e1b876e6c3d", "committedDate": "2022-03-01 13:31:17 +0100", "message": "feat: Add single data value endpoint with JSON body [DHIS2-12689] (#9886)"}, {"oid": "7cadf133b1ad419f9db936d81e895bd264be5925", "committedDate": "2022-04-15 08:46:01 +0200", "message": "chore(deps): bump h2 from 1.4.200 to 2.1.212 in /dhis-2 (#10459)"}, {"oid": "02336c9611c0dd85d5038223bddbfdebc0aae526", "committedDate": "2023-05-11 19:34:26 +0200", "message": "chore: move old tracker dxf2 code into deprecated package (#13901)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY0MDY0MA==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r461640640", "body": "```suggestion\r\n            .map( s -> \"'\" + s + \"'\" )\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        .map(s -> \"'\" + s + \"'\")\n          \n          \n            \n                        .map( s -> \"'\" + s + \"'\" )", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            .map(s <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>'<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> s <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>'<span class=\"pl-pds\">\"</span></span>)</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            .map(<span class=\"x x-first x-last\"> </span>s <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>'<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> s <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>'<span class=\"pl-pds\">\"</span></span><span class=\"x x-first x-last\"> </span>)</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "stian-sandvold", "createdAt": "2020-07-28T14:46:47Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java", "diffHunk": "@@ -0,0 +1,384 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer.context;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.lang.RandomStringUtils;\n+import org.apache.commons.lang.text.StrSubstitutor;\n+import org.apache.logging.log4j.util.Strings;\n+import org.cache2k.Cache;\n+import org.cache2k.Cache2kBuilder;\n+import org.cache2k.integration.CacheLoader;\n+import org.hisp.dhis.category.CategoryCombo;\n+import org.hisp.dhis.category.CategoryOption;\n+import org.hisp.dhis.category.CategoryOptionCombo;\n+import org.hisp.dhis.common.IdScheme;\n+import org.hisp.dhis.common.IdentifiableProperty;\n+import org.hisp.dhis.common.IllegalQueryException;\n+import org.hisp.dhis.commons.util.TextUtils;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.dao.EmptyResultDataAccessException;\n+import org.springframework.jdbc.core.JdbcTemplate;\n+import org.springframework.stereotype.Component;\n+\n+import com.google.common.collect.ImmutableMap;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+@Component\n+public class AttributeOptionComboLoader\n+{\n+    private final JdbcTemplate jdbcTemplate;\n+\n+    private final static String KEY_SEPARATOR = \"-\";\n+\n+    public final static String SQL_GET_CATEGORYOPTIONCOMBO = \"select coc.categoryoptioncomboid, \"\n+            + \"coc.uid, coc.code, coc.ignoreapproval, coc.name, c.uid as cc_uid, c.name as cc_name, \"\n+            + \"string_agg(dec.categoryid::text, ',') as cat_ids from categoryoptioncombo coc \"\n+            + \"join categorycombos_optioncombos co on coc.categoryoptioncomboid = co.categoryoptioncomboid \"\n+            + \"join categorycombo c on co.categorycomboid = c.categorycomboid \"\n+            + \"join categorycombos_categories cc on c.categorycomboid = cc.categorycomboid \"\n+            + \"join dataelementcategory dec on cc.categoryid = dec.categoryid where coc.\"\n+            + \"${resolvedScheme} \"\n+            + \"group by coc.categoryoptioncomboid, coc.uid, coc.code, coc.ignoreapproval, coc.name, cc_uid, cc_name\";\n+\n+    public final static String SQL_GET_CATEGORYOPTIONCOMBO_BY_CATEGORYIDS = \"select * from ( \" +\n+            \"select coc.categoryoptioncomboid, \" +\n+            \"coc.uid, \" +\n+            \"coc.code, \" +\n+            \"coc.ignoreapproval, \" +\n+            \"coc.name, \" +\n+            \"c.uid as cc_uid, \" +\n+            \"c.name as cc_name,\" +\n+            \"string_agg( dec.categoryid::text, ',') as cat_ids \" +\n+            \"from categoryoptioncombo coc \" +\n+            \"join categorycombos_optioncombos co on coc.categoryoptioncomboid = co.categoryoptioncomboid \" +\n+            \"join categorycombo c on co.categorycomboid = c.categorycomboid \" +\n+            \"join categorycombos_categories cc on c.categorycomboid = cc.categorycomboid \" +\n+            \"join dataelementcategory dec on cc.categoryid = dec.categoryid \" +\n+            \"where c.${resolvedScheme} \" +\n+            \"group by coc.categoryoptioncomboid, coc.uid, coc.code, coc.ignoreapproval, coc.name, cc_uid, cc_name \" +\n+            \") as catoptcombo where \" +\n+            \"array_length(regexp_split_to_array(cat_ids, ','),1) = array_length(ARRAY[${option_ids}],1) AND \" +\n+            \"regexp_split_to_array(cat_ids, ',') @> ARRAY[${option_ids}]\";\n+\n+    public AttributeOptionComboLoader( @Qualifier( \"readOnlyJdbcTemplate\" ) JdbcTemplate jdbcTemplate )\n+    {\n+        checkNotNull( jdbcTemplate );\n+\n+        this.jdbcTemplate = jdbcTemplate;\n+    }\n+\n+    /**\n+     * Fetches a {@see CategoryOptionCombo} by id, using the provided look-up\n+     * Scheme\n+     *\n+     * @param idScheme an IdScheme\n+     * @param id the actual id\n+     * @return a CategoryOptionCombo or null\n+     */\n+    public CategoryOptionCombo getCategoryOptionCombo( IdScheme idScheme, String id )\n+    {\n+        return loadCategoryOptionCombo( idScheme, id );\n+        //return this.cocCache.get( idScheme.name() + KEY_SEPARATOR + id );\n+    }\n+\n+    /**\n+     * Fetches a {@see CategoryOptionCombo}\n+     *\n+     * @param categoryCombo a {@see CategoryCombo}\n+     * @param categoryOptions a semicolon delimited list of Category Options uid\n+     * @param attributeOptionCombo\n+     * @param idScheme the {@see IdScheme} to use to fetch the entity\n+     * @return a {@see CategoryOptionCombo}\n+     */\n+    public CategoryOptionCombo getAttributeOptionCombo( CategoryCombo categoryCombo, String categoryOptions,\n+                                                        String attributeOptionCombo, IdScheme idScheme )\n+    {\n+        final Set<String> opts = TextUtils.splitToArray( categoryOptions, TextUtils.SEMICOLON );\n+\n+        return getAttributeOptionCombo( categoryCombo, opts, attributeOptionCombo, idScheme );\n+    }\n+\n+    /**\n+     * Fetches the default {@see CategoryOptionCombo}\n+     * @return a {@see CategoryOptionCombo} or null\n+     */\n+    public CategoryOptionCombo getDefault()\n+    {\n+        return  loadCategoryOptionCombo( IdScheme.NAME, \"default\" );\n+    }\n+\n+    /**\n+     * Fetches a {@see CategoryOption} by uid, using the provided look-up Scheme\n+     *\n+     * @param idScheme an IdScheme\n+     * @param id the actual id\n+     * @return a CategoryOption or null\n+     */\n+    private CategoryOption getCategoryOption( IdScheme idScheme, String id )\n+    {\n+        return loadCategoryOption( idScheme, id);\n+    }\n+\n+    private CategoryOptionCombo getAttributeOptionCombo( CategoryCombo categoryCombo, Set<String> opts,\n+        String attributeOptionCombo, IdScheme idScheme )\n+    {\n+        if ( categoryCombo == null )\n+        {\n+            throw new IllegalQueryException( \"Illegal category combo\" );\n+        }\n+\n+        // ---------------------------------------------------------------------\n+        // Attribute category options validation\n+        // ---------------------------------------------------------------------\n+\n+        CategoryOptionCombo attrOptCombo = null;\n+\n+        if ( opts != null )\n+        {\n+            Set<CategoryOption> categoryOptions = new HashSet<>();\n+\n+            for ( String uid : opts )\n+            {\n+                CategoryOption categoryOption = getCategoryOption( idScheme, uid );\n+\n+                if ( categoryOption == null )\n+                {\n+                    throw new IllegalQueryException( \"Illegal category option identifier: \" + uid );\n+                }\n+\n+                categoryOptions.add( categoryOption );\n+            }\n+\n+            final String id = resolveCategoryComboId( categoryCombo, idScheme );\n+\n+            attrOptCombo = getAttributeOptionCombo( idScheme, id, categoryOptions );\n+\n+            if ( attrOptCombo == null )\n+            {\n+                throw new IllegalQueryException(\n+                    \"Attribute option combo does not exist for given category combo and category options\" );\n+            }\n+        }\n+        else if ( attributeOptionCombo != null )\n+        {\n+            attrOptCombo = getCategoryOptionCombo( idScheme, attributeOptionCombo );\n+        }\n+\n+        // ---------------------------------------------------------------------\n+        // Fall back to default category option combination\n+        // ---------------------------------------------------------------------\n+\n+        if ( attrOptCombo == null )\n+        {\n+            attrOptCombo = getDefault();\n+        }\n+\n+        if ( attrOptCombo == null )\n+        {\n+            throw new IllegalQueryException( \"Default attribute option combo does not exist\" );\n+        }\n+\n+        return attrOptCombo;\n+    }\n+\n+    private String resolveCategoryComboId( CategoryCombo categoryCombo, IdScheme idScheme )\n+    {\n+        String id = null;\n+\n+        if ( idScheme.is( IdentifiableProperty.ID ) )\n+        {\n+            id = String.valueOf( categoryCombo.getId() );\n+        }\n+        else if ( idScheme.is( IdentifiableProperty.UID ) )\n+        {\n+            id = categoryCombo.getUid();\n+        }\n+        else if ( idScheme.is( IdentifiableProperty.CODE ) )\n+        {\n+            id = categoryCombo.getCode();\n+        }\n+        else if ( idScheme.is( IdentifiableProperty.NAME ) )\n+        {\n+            id = categoryCombo.getName();\n+        }\n+\n+        return id;\n+    }\n+\n+    private CategoryOptionCombo getAttributeOptionCombo( IdScheme idScheme, String categoryComboId, Set<CategoryOption> categoryOptions) {\n+\n+        final String key = \"categorycomboid\";\n+        final String categoryComboKey = resolveId( idScheme, key, categoryComboId);\n+\n+        final String optionsId = categoryOptions.stream()\n+            .map( co -> Long.toString( co.getId() ) )\n+            .map(s -> \"'\" + s + \"'\")", "originalCommit": "dc20b8a9249359bcdd1f612b1852f728ef63b7ab", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d0687a6c7c9e1c4dd64c4dc669bb80ae6e8c8c8b", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\nindex f18bcdf5a5..d8e807d79f 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\n", "chunk": "@@ -245,14 +239,14 @@ public class AttributeOptionComboLoader\n         return id;\n     }\n \n-    private CategoryOptionCombo getAttributeOptionCombo( IdScheme idScheme, String categoryComboId, Set<CategoryOption> categoryOptions) {\n+    private CategoryOptionCombo getAttributeOptionCombo( IdScheme idScheme, String categoryComboId, Set<CategoryOption> categoryOptions ) {\n \n         final String key = \"categorycomboid\";\n-        final String categoryComboKey = resolveId( idScheme, key, categoryComboId);\n+        final String categoryComboKey = resolveId( idScheme, key, categoryComboId );\n \n         final String optionsId = categoryOptions.stream()\n             .map( co -> Long.toString( co.getId() ) )\n-            .map(s -> \"'\" + s + \"'\")\n+            .map( s -> \"'\" + s + \"'\" )\n             .collect( Collectors.joining( \",\" ) );\n \n         // @formatter:off\n", "next_change": {"commit": "d360652a896bee650a842567e26cd1e62145cccb", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\nindex d8e807d79f..266b319fb7 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\n", "chunk": "@@ -231,22 +236,25 @@ public class AttributeOptionComboLoader\n         {\n             id = categoryCombo.getCode();\n         }\n-        else if ( idScheme.is( IdentifiableProperty.NAME ) )\n+        else if ( idScheme.is( IdentifiableProperty.ID ) )\n         {\n             id = categoryCombo.getName();\n         }\n-\n+        else\n+        {\n+            id = null;\n+        }\n         return id;\n     }\n \n-    private CategoryOptionCombo getAttributeOptionCombo( IdScheme idScheme, String categoryComboId, Set<CategoryOption> categoryOptions ) {\n+    private CategoryOptionCombo getAttributeOptionCombo( IdScheme idScheme, String categoryComboId, Set<CategoryOption> categoryOptions) {\n \n         final String key = \"categorycomboid\";\n-        final String categoryComboKey = resolveId( idScheme, key, categoryComboId );\n+        final String categoryComboKey = resolveId( idScheme, key, categoryComboId);\n \n         final String optionsId = categoryOptions.stream()\n             .map( co -> Long.toString( co.getId() ) )\n-            .map( s -> \"'\" + s + \"'\" )\n+            .map(s -> \"'\" + s + \"'\")\n             .collect( Collectors.joining( \",\" ) );\n \n         // @formatter:off\n", "next_change": {"commit": "9b1334c65290249b47fcdb9da2fa28233b89c4c3", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\nindex 266b319fb7..2cd558fac0 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\n", "chunk": "@@ -254,7 +252,7 @@ public class AttributeOptionComboLoader\n \n         final String optionsId = categoryOptions.stream()\n             .map( co -> Long.toString( co.getId() ) )\n-            .map(s -> \"'\" + s + \"'\")\n+            .map( s -> \"'\" + s + \"'\" )\n             .collect( Collectors.joining( \",\" ) );\n \n         // @formatter:off\n", "next_change": {"commit": "d35ce54afc25738b16d10df6a94d2d2af65f4fcb", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\nindex 2cd558fac0..ec5cdabbd7 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\n", "chunk": "@@ -245,10 +245,10 @@ public class AttributeOptionComboLoader\n         return id;\n     }\n \n-    private CategoryOptionCombo getAttributeOptionCombo( IdScheme idScheme, String categoryComboId, Set<CategoryOption> categoryOptions) {\n+    private CategoryOptionCombo getAttributeOptionCombo( IdScheme idScheme, String categoryComboId, Set<CategoryOption> categoryOptions ) {\n \n         final String key = \"categorycomboid\";\n-        final String categoryComboKey = resolveId( idScheme, key, categoryComboId);\n+        final String categoryComboKey = resolveId( idScheme, key, categoryComboId );\n \n         final String optionsId = categoryOptions.stream()\n             .map( co -> Long.toString( co.getId() ) )\n", "next_change": null}]}}]}}]}}]}, "revised_code_in_main": {"commit": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\nindex f18bcdf5a5..d8e807d79f 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\n", "chunk": "@@ -245,14 +239,14 @@ public class AttributeOptionComboLoader\n         return id;\n     }\n \n-    private CategoryOptionCombo getAttributeOptionCombo( IdScheme idScheme, String categoryComboId, Set<CategoryOption> categoryOptions) {\n+    private CategoryOptionCombo getAttributeOptionCombo( IdScheme idScheme, String categoryComboId, Set<CategoryOption> categoryOptions ) {\n \n         final String key = \"categorycomboid\";\n-        final String categoryComboKey = resolveId( idScheme, key, categoryComboId);\n+        final String categoryComboKey = resolveId( idScheme, key, categoryComboId );\n \n         final String optionsId = categoryOptions.stream()\n             .map( co -> Long.toString( co.getId() ) )\n-            .map(s -> \"'\" + s + \"'\")\n+            .map( s -> \"'\" + s + \"'\" )\n             .collect( Collectors.joining( \",\" ) );\n \n         // @formatter:off\n", "next_change": {"commit": "1bd8ee38126fbac22f805db44dad0cdcba7b14a6", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\nindex d8e807d79f..0416622c95 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\n", "chunk": "@@ -249,12 +248,10 @@ public class AttributeOptionComboLoader\n             .map( s -> \"'\" + s + \"'\" )\n             .collect( Collectors.joining( \",\" ) );\n \n-        // @formatter:off\n-        StrSubstitutor sub = new StrSubstitutor( ImmutableMap.<String, String>builder()\n-                .put( \"resolvedScheme\", Objects.requireNonNull( categoryComboKey ) )\n-                .put( \"option_ids\", optionsId )\n-                .build() );\n-        // @formatter:on\n+        StrSubstitutor sub = new StrSubstitutor( ImmutableMap.<String, String> builder()\n+            .put( \"resolvedScheme\", Objects.requireNonNull( categoryComboKey ) )\n+            .put( \"option_ids\", optionsId )\n+            .build() );\n         \n         // TODO use cache\n         List<CategoryOptionCombo> categoryOptionCombos = jdbcTemplate\n", "next_change": {"commit": "8bcecd537a43bcef4148300dcaaa97562887bc2a", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\nindex 0416622c95..ca9f520775 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\n", "chunk": "@@ -255,7 +255,7 @@ public class AttributeOptionComboLoader\n         \n         // TODO use cache\n         List<CategoryOptionCombo> categoryOptionCombos = jdbcTemplate\n-            .query( sub.replace( SQL_GET_CATEGORYOPTIONCOMBO_BY_CATEGORYIDS ), ( rs, i ) -> bind( key, rs ) );\n+            .query( sub.replace( SQL_GET_CATEGORYOPTIONCOMBO_BY_CATEGORYIDS ), ( rs, i ) -> bind( \"categoryoptioncomboid\", rs ) );\n \n         if ( categoryOptionCombos.size() == 1 )\n         {\n", "next_change": {"commit": "c9825d002fd6cac18498e6e39b407ab84b60cb6c", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\nindex ca9f520775..c6bcc1ffae 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\n", "chunk": "@@ -252,7 +252,7 @@ public class AttributeOptionComboLoader\n             .put( \"resolvedScheme\", Objects.requireNonNull( categoryComboKey ) )\n             .put( \"option_ids\", optionsId )\n             .build() );\n-        \n+\n         // TODO use cache\n         List<CategoryOptionCombo> categoryOptionCombos = jdbcTemplate\n             .query( sub.replace( SQL_GET_CATEGORYOPTIONCOMBO_BY_CATEGORYIDS ), ( rs, i ) -> bind( \"categoryoptioncomboid\", rs ) );\n", "next_change": {"commit": "ea76fa86409613c9766d4508d65c88ac55c413c3", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\nindex c6bcc1ffae..b5be1e0df5 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\n", "chunk": "@@ -255,7 +259,8 @@ public class AttributeOptionComboLoader\n \n         // TODO use cache\n         List<CategoryOptionCombo> categoryOptionCombos = jdbcTemplate\n-            .query( sub.replace( SQL_GET_CATEGORYOPTIONCOMBO_BY_CATEGORYIDS ), ( rs, i ) -> bind( \"categoryoptioncomboid\", rs ) );\n+            .query( sub.replace( SQL_GET_CATEGORYOPTIONCOMBO_BY_CATEGORYIDS ),\n+                ( rs, i ) -> bind( \"categoryoptioncomboid\", rs ) );\n \n         if ( categoryOptionCombos.size() == 1 )\n         {\n", "next_change": null}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "message": "Merge commit", "committedDate": null}, {"oid": "1bd8ee38126fbac22f805db44dad0cdcba7b14a6", "committedDate": "2020-09-23 11:30:37 +0200", "message": "fix: allow updating an Event with File data type [DHIS2-9559]"}, {"oid": "8bcecd537a43bcef4148300dcaaa97562887bc2a", "committedDate": "2020-10-02 09:16:15 +0200", "message": "fix: SQL query to fetch category option combo (#6234)"}, {"oid": "c9825d002fd6cac18498e6e39b407ab84b60cb6c", "committedDate": "2020-12-08 11:22:28 +0100", "message": "fix: Aggregate distinct cateOptionIds of AOC (#6846)"}, {"oid": "7098e9412b922ed70f8136f30c7d790e27bb43be", "committedDate": "2020-12-10 10:43:44 +0100", "message": "chore: Remove unused imports (#6875)"}, {"oid": "3e25b9b834757233501b068c1fd96b5b68cc22f7", "committedDate": "2020-12-22 12:59:13 +0100", "message": "feat: Convert sharing objects to JSONB structure [DHIS2-5814]"}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "420a69fc29ce7e6c1074a291ba005519a92b53ed", "committedDate": "2021-06-07 09:53:28 +0200", "message": "feat: Support JSON Patch (RFC 6902) for metadata objects (#7821)"}, {"oid": "610a453c1676b8d5b172e18f9df8f13570d5f80d", "committedDate": "2021-07-21 18:43:52 +0800", "message": "feat: Hibernate cluster cache invalidation with automatic node registration (#7926)"}, {"oid": "6f572a9ce997e4e66255f5a5ac2d3f141db1e8bd", "committedDate": "2021-10-26 21:13:46 +0200", "message": "chore: Remove most usages of commons-lang TECH-777 (#9104)"}, {"oid": "0395572b6507c94db6f06f39624de7935f10bb16", "committedDate": "2021-11-04 08:08:23 -0400", "message": "fix: Event import catOption start/end DHIS2-12061 (#9151)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "869fa986d53abcf6fc503e46e3b25e1b876e6c3d", "committedDate": "2022-03-01 13:31:17 +0100", "message": "feat: Add single data value endpoint with JSON body [DHIS2-12689] (#9886)"}, {"oid": "7cadf133b1ad419f9db936d81e895bd264be5925", "committedDate": "2022-04-15 08:46:01 +0200", "message": "chore(deps): bump h2 from 1.4.200 to 2.1.212 in /dhis-2 (#10459)"}, {"oid": "02336c9611c0dd85d5038223bddbfdebc0aae526", "committedDate": "2023-05-11 19:34:26 +0200", "message": "chore: move old tracker dxf2 code into deprecated package (#13901)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY0MDgxOA==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r461640818", "body": "```suggestion\r\n        final String categoryComboKey = resolveId( idScheme, key, categoryComboId );\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    final String categoryComboKey = resolveId( idScheme, key, categoryComboId);\n          \n          \n            \n                    final String categoryComboKey = resolveId( idScheme, key, categoryComboId );", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">final</span> <span class=\"pl-smi\">String</span> categoryComboKey <span class=\"pl-k\">=</span> resolveId( idScheme, key, categoryComboId);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">final</span> <span class=\"pl-smi\">String</span> categoryComboKey <span class=\"pl-k\">=</span> resolveId( idScheme, key, categoryComboId<span class=\"x x-first x-last\"> </span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "stian-sandvold", "createdAt": "2020-07-28T14:46:59Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java", "diffHunk": "@@ -0,0 +1,384 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer.context;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.lang.RandomStringUtils;\n+import org.apache.commons.lang.text.StrSubstitutor;\n+import org.apache.logging.log4j.util.Strings;\n+import org.cache2k.Cache;\n+import org.cache2k.Cache2kBuilder;\n+import org.cache2k.integration.CacheLoader;\n+import org.hisp.dhis.category.CategoryCombo;\n+import org.hisp.dhis.category.CategoryOption;\n+import org.hisp.dhis.category.CategoryOptionCombo;\n+import org.hisp.dhis.common.IdScheme;\n+import org.hisp.dhis.common.IdentifiableProperty;\n+import org.hisp.dhis.common.IllegalQueryException;\n+import org.hisp.dhis.commons.util.TextUtils;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.dao.EmptyResultDataAccessException;\n+import org.springframework.jdbc.core.JdbcTemplate;\n+import org.springframework.stereotype.Component;\n+\n+import com.google.common.collect.ImmutableMap;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+@Component\n+public class AttributeOptionComboLoader\n+{\n+    private final JdbcTemplate jdbcTemplate;\n+\n+    private final static String KEY_SEPARATOR = \"-\";\n+\n+    public final static String SQL_GET_CATEGORYOPTIONCOMBO = \"select coc.categoryoptioncomboid, \"\n+            + \"coc.uid, coc.code, coc.ignoreapproval, coc.name, c.uid as cc_uid, c.name as cc_name, \"\n+            + \"string_agg(dec.categoryid::text, ',') as cat_ids from categoryoptioncombo coc \"\n+            + \"join categorycombos_optioncombos co on coc.categoryoptioncomboid = co.categoryoptioncomboid \"\n+            + \"join categorycombo c on co.categorycomboid = c.categorycomboid \"\n+            + \"join categorycombos_categories cc on c.categorycomboid = cc.categorycomboid \"\n+            + \"join dataelementcategory dec on cc.categoryid = dec.categoryid where coc.\"\n+            + \"${resolvedScheme} \"\n+            + \"group by coc.categoryoptioncomboid, coc.uid, coc.code, coc.ignoreapproval, coc.name, cc_uid, cc_name\";\n+\n+    public final static String SQL_GET_CATEGORYOPTIONCOMBO_BY_CATEGORYIDS = \"select * from ( \" +\n+            \"select coc.categoryoptioncomboid, \" +\n+            \"coc.uid, \" +\n+            \"coc.code, \" +\n+            \"coc.ignoreapproval, \" +\n+            \"coc.name, \" +\n+            \"c.uid as cc_uid, \" +\n+            \"c.name as cc_name,\" +\n+            \"string_agg( dec.categoryid::text, ',') as cat_ids \" +\n+            \"from categoryoptioncombo coc \" +\n+            \"join categorycombos_optioncombos co on coc.categoryoptioncomboid = co.categoryoptioncomboid \" +\n+            \"join categorycombo c on co.categorycomboid = c.categorycomboid \" +\n+            \"join categorycombos_categories cc on c.categorycomboid = cc.categorycomboid \" +\n+            \"join dataelementcategory dec on cc.categoryid = dec.categoryid \" +\n+            \"where c.${resolvedScheme} \" +\n+            \"group by coc.categoryoptioncomboid, coc.uid, coc.code, coc.ignoreapproval, coc.name, cc_uid, cc_name \" +\n+            \") as catoptcombo where \" +\n+            \"array_length(regexp_split_to_array(cat_ids, ','),1) = array_length(ARRAY[${option_ids}],1) AND \" +\n+            \"regexp_split_to_array(cat_ids, ',') @> ARRAY[${option_ids}]\";\n+\n+    public AttributeOptionComboLoader( @Qualifier( \"readOnlyJdbcTemplate\" ) JdbcTemplate jdbcTemplate )\n+    {\n+        checkNotNull( jdbcTemplate );\n+\n+        this.jdbcTemplate = jdbcTemplate;\n+    }\n+\n+    /**\n+     * Fetches a {@see CategoryOptionCombo} by id, using the provided look-up\n+     * Scheme\n+     *\n+     * @param idScheme an IdScheme\n+     * @param id the actual id\n+     * @return a CategoryOptionCombo or null\n+     */\n+    public CategoryOptionCombo getCategoryOptionCombo( IdScheme idScheme, String id )\n+    {\n+        return loadCategoryOptionCombo( idScheme, id );\n+        //return this.cocCache.get( idScheme.name() + KEY_SEPARATOR + id );\n+    }\n+\n+    /**\n+     * Fetches a {@see CategoryOptionCombo}\n+     *\n+     * @param categoryCombo a {@see CategoryCombo}\n+     * @param categoryOptions a semicolon delimited list of Category Options uid\n+     * @param attributeOptionCombo\n+     * @param idScheme the {@see IdScheme} to use to fetch the entity\n+     * @return a {@see CategoryOptionCombo}\n+     */\n+    public CategoryOptionCombo getAttributeOptionCombo( CategoryCombo categoryCombo, String categoryOptions,\n+                                                        String attributeOptionCombo, IdScheme idScheme )\n+    {\n+        final Set<String> opts = TextUtils.splitToArray( categoryOptions, TextUtils.SEMICOLON );\n+\n+        return getAttributeOptionCombo( categoryCombo, opts, attributeOptionCombo, idScheme );\n+    }\n+\n+    /**\n+     * Fetches the default {@see CategoryOptionCombo}\n+     * @return a {@see CategoryOptionCombo} or null\n+     */\n+    public CategoryOptionCombo getDefault()\n+    {\n+        return  loadCategoryOptionCombo( IdScheme.NAME, \"default\" );\n+    }\n+\n+    /**\n+     * Fetches a {@see CategoryOption} by uid, using the provided look-up Scheme\n+     *\n+     * @param idScheme an IdScheme\n+     * @param id the actual id\n+     * @return a CategoryOption or null\n+     */\n+    private CategoryOption getCategoryOption( IdScheme idScheme, String id )\n+    {\n+        return loadCategoryOption( idScheme, id);\n+    }\n+\n+    private CategoryOptionCombo getAttributeOptionCombo( CategoryCombo categoryCombo, Set<String> opts,\n+        String attributeOptionCombo, IdScheme idScheme )\n+    {\n+        if ( categoryCombo == null )\n+        {\n+            throw new IllegalQueryException( \"Illegal category combo\" );\n+        }\n+\n+        // ---------------------------------------------------------------------\n+        // Attribute category options validation\n+        // ---------------------------------------------------------------------\n+\n+        CategoryOptionCombo attrOptCombo = null;\n+\n+        if ( opts != null )\n+        {\n+            Set<CategoryOption> categoryOptions = new HashSet<>();\n+\n+            for ( String uid : opts )\n+            {\n+                CategoryOption categoryOption = getCategoryOption( idScheme, uid );\n+\n+                if ( categoryOption == null )\n+                {\n+                    throw new IllegalQueryException( \"Illegal category option identifier: \" + uid );\n+                }\n+\n+                categoryOptions.add( categoryOption );\n+            }\n+\n+            final String id = resolveCategoryComboId( categoryCombo, idScheme );\n+\n+            attrOptCombo = getAttributeOptionCombo( idScheme, id, categoryOptions );\n+\n+            if ( attrOptCombo == null )\n+            {\n+                throw new IllegalQueryException(\n+                    \"Attribute option combo does not exist for given category combo and category options\" );\n+            }\n+        }\n+        else if ( attributeOptionCombo != null )\n+        {\n+            attrOptCombo = getCategoryOptionCombo( idScheme, attributeOptionCombo );\n+        }\n+\n+        // ---------------------------------------------------------------------\n+        // Fall back to default category option combination\n+        // ---------------------------------------------------------------------\n+\n+        if ( attrOptCombo == null )\n+        {\n+            attrOptCombo = getDefault();\n+        }\n+\n+        if ( attrOptCombo == null )\n+        {\n+            throw new IllegalQueryException( \"Default attribute option combo does not exist\" );\n+        }\n+\n+        return attrOptCombo;\n+    }\n+\n+    private String resolveCategoryComboId( CategoryCombo categoryCombo, IdScheme idScheme )\n+    {\n+        String id = null;\n+\n+        if ( idScheme.is( IdentifiableProperty.ID ) )\n+        {\n+            id = String.valueOf( categoryCombo.getId() );\n+        }\n+        else if ( idScheme.is( IdentifiableProperty.UID ) )\n+        {\n+            id = categoryCombo.getUid();\n+        }\n+        else if ( idScheme.is( IdentifiableProperty.CODE ) )\n+        {\n+            id = categoryCombo.getCode();\n+        }\n+        else if ( idScheme.is( IdentifiableProperty.NAME ) )\n+        {\n+            id = categoryCombo.getName();\n+        }\n+\n+        return id;\n+    }\n+\n+    private CategoryOptionCombo getAttributeOptionCombo( IdScheme idScheme, String categoryComboId, Set<CategoryOption> categoryOptions) {\n+\n+        final String key = \"categorycomboid\";\n+        final String categoryComboKey = resolveId( idScheme, key, categoryComboId);", "originalCommit": "dc20b8a9249359bcdd1f612b1852f728ef63b7ab", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d0687a6c7c9e1c4dd64c4dc669bb80ae6e8c8c8b", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\nindex f18bcdf5a5..d8e807d79f 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\n", "chunk": "@@ -245,14 +239,14 @@ public class AttributeOptionComboLoader\n         return id;\n     }\n \n-    private CategoryOptionCombo getAttributeOptionCombo( IdScheme idScheme, String categoryComboId, Set<CategoryOption> categoryOptions) {\n+    private CategoryOptionCombo getAttributeOptionCombo( IdScheme idScheme, String categoryComboId, Set<CategoryOption> categoryOptions ) {\n \n         final String key = \"categorycomboid\";\n-        final String categoryComboKey = resolveId( idScheme, key, categoryComboId);\n+        final String categoryComboKey = resolveId( idScheme, key, categoryComboId );\n \n         final String optionsId = categoryOptions.stream()\n             .map( co -> Long.toString( co.getId() ) )\n-            .map(s -> \"'\" + s + \"'\")\n+            .map( s -> \"'\" + s + \"'\" )\n             .collect( Collectors.joining( \",\" ) );\n \n         // @formatter:off\n", "next_change": {"commit": "d360652a896bee650a842567e26cd1e62145cccb", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\nindex d8e807d79f..266b319fb7 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\n", "chunk": "@@ -231,22 +236,25 @@ public class AttributeOptionComboLoader\n         {\n             id = categoryCombo.getCode();\n         }\n-        else if ( idScheme.is( IdentifiableProperty.NAME ) )\n+        else if ( idScheme.is( IdentifiableProperty.ID ) )\n         {\n             id = categoryCombo.getName();\n         }\n-\n+        else\n+        {\n+            id = null;\n+        }\n         return id;\n     }\n \n-    private CategoryOptionCombo getAttributeOptionCombo( IdScheme idScheme, String categoryComboId, Set<CategoryOption> categoryOptions ) {\n+    private CategoryOptionCombo getAttributeOptionCombo( IdScheme idScheme, String categoryComboId, Set<CategoryOption> categoryOptions) {\n \n         final String key = \"categorycomboid\";\n-        final String categoryComboKey = resolveId( idScheme, key, categoryComboId );\n+        final String categoryComboKey = resolveId( idScheme, key, categoryComboId);\n \n         final String optionsId = categoryOptions.stream()\n             .map( co -> Long.toString( co.getId() ) )\n-            .map( s -> \"'\" + s + \"'\" )\n+            .map(s -> \"'\" + s + \"'\")\n             .collect( Collectors.joining( \",\" ) );\n \n         // @formatter:off\n", "next_change": {"commit": "9b1334c65290249b47fcdb9da2fa28233b89c4c3", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\nindex 266b319fb7..2cd558fac0 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\n", "chunk": "@@ -254,7 +252,7 @@ public class AttributeOptionComboLoader\n \n         final String optionsId = categoryOptions.stream()\n             .map( co -> Long.toString( co.getId() ) )\n-            .map(s -> \"'\" + s + \"'\")\n+            .map( s -> \"'\" + s + \"'\" )\n             .collect( Collectors.joining( \",\" ) );\n \n         // @formatter:off\n", "next_change": {"commit": "d35ce54afc25738b16d10df6a94d2d2af65f4fcb", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\nindex 2cd558fac0..ec5cdabbd7 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\n", "chunk": "@@ -245,10 +245,10 @@ public class AttributeOptionComboLoader\n         return id;\n     }\n \n-    private CategoryOptionCombo getAttributeOptionCombo( IdScheme idScheme, String categoryComboId, Set<CategoryOption> categoryOptions) {\n+    private CategoryOptionCombo getAttributeOptionCombo( IdScheme idScheme, String categoryComboId, Set<CategoryOption> categoryOptions ) {\n \n         final String key = \"categorycomboid\";\n-        final String categoryComboKey = resolveId( idScheme, key, categoryComboId);\n+        final String categoryComboKey = resolveId( idScheme, key, categoryComboId );\n \n         final String optionsId = categoryOptions.stream()\n             .map( co -> Long.toString( co.getId() ) )\n", "next_change": null}]}}]}}]}}]}, "revised_code_in_main": {"commit": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\nindex f18bcdf5a5..d8e807d79f 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\n", "chunk": "@@ -245,14 +239,14 @@ public class AttributeOptionComboLoader\n         return id;\n     }\n \n-    private CategoryOptionCombo getAttributeOptionCombo( IdScheme idScheme, String categoryComboId, Set<CategoryOption> categoryOptions) {\n+    private CategoryOptionCombo getAttributeOptionCombo( IdScheme idScheme, String categoryComboId, Set<CategoryOption> categoryOptions ) {\n \n         final String key = \"categorycomboid\";\n-        final String categoryComboKey = resolveId( idScheme, key, categoryComboId);\n+        final String categoryComboKey = resolveId( idScheme, key, categoryComboId );\n \n         final String optionsId = categoryOptions.stream()\n             .map( co -> Long.toString( co.getId() ) )\n-            .map(s -> \"'\" + s + \"'\")\n+            .map( s -> \"'\" + s + \"'\" )\n             .collect( Collectors.joining( \",\" ) );\n \n         // @formatter:off\n", "next_change": {"commit": "1bd8ee38126fbac22f805db44dad0cdcba7b14a6", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\nindex d8e807d79f..0416622c95 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\n", "chunk": "@@ -249,12 +248,10 @@ public class AttributeOptionComboLoader\n             .map( s -> \"'\" + s + \"'\" )\n             .collect( Collectors.joining( \",\" ) );\n \n-        // @formatter:off\n-        StrSubstitutor sub = new StrSubstitutor( ImmutableMap.<String, String>builder()\n-                .put( \"resolvedScheme\", Objects.requireNonNull( categoryComboKey ) )\n-                .put( \"option_ids\", optionsId )\n-                .build() );\n-        // @formatter:on\n+        StrSubstitutor sub = new StrSubstitutor( ImmutableMap.<String, String> builder()\n+            .put( \"resolvedScheme\", Objects.requireNonNull( categoryComboKey ) )\n+            .put( \"option_ids\", optionsId )\n+            .build() );\n         \n         // TODO use cache\n         List<CategoryOptionCombo> categoryOptionCombos = jdbcTemplate\n", "next_change": {"commit": "8bcecd537a43bcef4148300dcaaa97562887bc2a", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\nindex 0416622c95..ca9f520775 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\n", "chunk": "@@ -255,7 +255,7 @@ public class AttributeOptionComboLoader\n         \n         // TODO use cache\n         List<CategoryOptionCombo> categoryOptionCombos = jdbcTemplate\n-            .query( sub.replace( SQL_GET_CATEGORYOPTIONCOMBO_BY_CATEGORYIDS ), ( rs, i ) -> bind( key, rs ) );\n+            .query( sub.replace( SQL_GET_CATEGORYOPTIONCOMBO_BY_CATEGORYIDS ), ( rs, i ) -> bind( \"categoryoptioncomboid\", rs ) );\n \n         if ( categoryOptionCombos.size() == 1 )\n         {\n", "next_change": {"commit": "c9825d002fd6cac18498e6e39b407ab84b60cb6c", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\nindex ca9f520775..c6bcc1ffae 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\n", "chunk": "@@ -252,7 +252,7 @@ public class AttributeOptionComboLoader\n             .put( \"resolvedScheme\", Objects.requireNonNull( categoryComboKey ) )\n             .put( \"option_ids\", optionsId )\n             .build() );\n-        \n+\n         // TODO use cache\n         List<CategoryOptionCombo> categoryOptionCombos = jdbcTemplate\n             .query( sub.replace( SQL_GET_CATEGORYOPTIONCOMBO_BY_CATEGORYIDS ), ( rs, i ) -> bind( \"categoryoptioncomboid\", rs ) );\n", "next_change": {"commit": "ea76fa86409613c9766d4508d65c88ac55c413c3", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\nindex c6bcc1ffae..b5be1e0df5 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\n", "chunk": "@@ -255,7 +259,8 @@ public class AttributeOptionComboLoader\n \n         // TODO use cache\n         List<CategoryOptionCombo> categoryOptionCombos = jdbcTemplate\n-            .query( sub.replace( SQL_GET_CATEGORYOPTIONCOMBO_BY_CATEGORYIDS ), ( rs, i ) -> bind( \"categoryoptioncomboid\", rs ) );\n+            .query( sub.replace( SQL_GET_CATEGORYOPTIONCOMBO_BY_CATEGORYIDS ),\n+                ( rs, i ) -> bind( \"categoryoptioncomboid\", rs ) );\n \n         if ( categoryOptionCombos.size() == 1 )\n         {\n", "next_change": null}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "message": "Merge commit", "committedDate": null}, {"oid": "1bd8ee38126fbac22f805db44dad0cdcba7b14a6", "committedDate": "2020-09-23 11:30:37 +0200", "message": "fix: allow updating an Event with File data type [DHIS2-9559]"}, {"oid": "8bcecd537a43bcef4148300dcaaa97562887bc2a", "committedDate": "2020-10-02 09:16:15 +0200", "message": "fix: SQL query to fetch category option combo (#6234)"}, {"oid": "c9825d002fd6cac18498e6e39b407ab84b60cb6c", "committedDate": "2020-12-08 11:22:28 +0100", "message": "fix: Aggregate distinct cateOptionIds of AOC (#6846)"}, {"oid": "7098e9412b922ed70f8136f30c7d790e27bb43be", "committedDate": "2020-12-10 10:43:44 +0100", "message": "chore: Remove unused imports (#6875)"}, {"oid": "3e25b9b834757233501b068c1fd96b5b68cc22f7", "committedDate": "2020-12-22 12:59:13 +0100", "message": "feat: Convert sharing objects to JSONB structure [DHIS2-5814]"}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "420a69fc29ce7e6c1074a291ba005519a92b53ed", "committedDate": "2021-06-07 09:53:28 +0200", "message": "feat: Support JSON Patch (RFC 6902) for metadata objects (#7821)"}, {"oid": "610a453c1676b8d5b172e18f9df8f13570d5f80d", "committedDate": "2021-07-21 18:43:52 +0800", "message": "feat: Hibernate cluster cache invalidation with automatic node registration (#7926)"}, {"oid": "6f572a9ce997e4e66255f5a5ac2d3f141db1e8bd", "committedDate": "2021-10-26 21:13:46 +0200", "message": "chore: Remove most usages of commons-lang TECH-777 (#9104)"}, {"oid": "0395572b6507c94db6f06f39624de7935f10bb16", "committedDate": "2021-11-04 08:08:23 -0400", "message": "fix: Event import catOption start/end DHIS2-12061 (#9151)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "869fa986d53abcf6fc503e46e3b25e1b876e6c3d", "committedDate": "2022-03-01 13:31:17 +0100", "message": "feat: Add single data value endpoint with JSON body [DHIS2-12689] (#9886)"}, {"oid": "7cadf133b1ad419f9db936d81e895bd264be5925", "committedDate": "2022-04-15 08:46:01 +0200", "message": "chore(deps): bump h2 from 1.4.200 to 2.1.212 in /dhis-2 (#10459)"}, {"oid": "02336c9611c0dd85d5038223bddbfdebc0aae526", "committedDate": "2023-05-11 19:34:26 +0200", "message": "chore: move old tracker dxf2 code into deprecated package (#13901)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY0MDk0MQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r461640941", "body": "```suggestion\r\n    private CategoryOptionCombo getAttributeOptionCombo( IdScheme idScheme, String categoryComboId, Set<CategoryOption> categoryOptions ) {\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private CategoryOptionCombo getAttributeOptionCombo( IdScheme idScheme, String categoryComboId, Set<CategoryOption> categoryOptions) {\n          \n          \n            \n                private CategoryOptionCombo getAttributeOptionCombo( IdScheme idScheme, String categoryComboId, Set<CategoryOption> categoryOptions ) {", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">private</span> <span class=\"pl-smi\">CategoryOptionCombo</span> getAttributeOptionCombo( <span class=\"pl-smi\">IdScheme</span> idScheme, <span class=\"pl-smi\">String</span> categoryComboId, <span class=\"pl-k\">Set&lt;<span class=\"pl-smi\">CategoryOption</span>&gt;</span> categoryOptions) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">private</span> <span class=\"pl-smi\">CategoryOptionCombo</span> getAttributeOptionCombo( <span class=\"pl-smi\">IdScheme</span> idScheme, <span class=\"pl-smi\">String</span> categoryComboId, <span class=\"pl-k\">Set&lt;<span class=\"pl-smi\">CategoryOption</span>&gt;</span> categoryOptions<span class=\"x x-first x-last\"> </span>) {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "stian-sandvold", "createdAt": "2020-07-28T14:47:08Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java", "diffHunk": "@@ -0,0 +1,384 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer.context;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.lang.RandomStringUtils;\n+import org.apache.commons.lang.text.StrSubstitutor;\n+import org.apache.logging.log4j.util.Strings;\n+import org.cache2k.Cache;\n+import org.cache2k.Cache2kBuilder;\n+import org.cache2k.integration.CacheLoader;\n+import org.hisp.dhis.category.CategoryCombo;\n+import org.hisp.dhis.category.CategoryOption;\n+import org.hisp.dhis.category.CategoryOptionCombo;\n+import org.hisp.dhis.common.IdScheme;\n+import org.hisp.dhis.common.IdentifiableProperty;\n+import org.hisp.dhis.common.IllegalQueryException;\n+import org.hisp.dhis.commons.util.TextUtils;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.dao.EmptyResultDataAccessException;\n+import org.springframework.jdbc.core.JdbcTemplate;\n+import org.springframework.stereotype.Component;\n+\n+import com.google.common.collect.ImmutableMap;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+@Component\n+public class AttributeOptionComboLoader\n+{\n+    private final JdbcTemplate jdbcTemplate;\n+\n+    private final static String KEY_SEPARATOR = \"-\";\n+\n+    public final static String SQL_GET_CATEGORYOPTIONCOMBO = \"select coc.categoryoptioncomboid, \"\n+            + \"coc.uid, coc.code, coc.ignoreapproval, coc.name, c.uid as cc_uid, c.name as cc_name, \"\n+            + \"string_agg(dec.categoryid::text, ',') as cat_ids from categoryoptioncombo coc \"\n+            + \"join categorycombos_optioncombos co on coc.categoryoptioncomboid = co.categoryoptioncomboid \"\n+            + \"join categorycombo c on co.categorycomboid = c.categorycomboid \"\n+            + \"join categorycombos_categories cc on c.categorycomboid = cc.categorycomboid \"\n+            + \"join dataelementcategory dec on cc.categoryid = dec.categoryid where coc.\"\n+            + \"${resolvedScheme} \"\n+            + \"group by coc.categoryoptioncomboid, coc.uid, coc.code, coc.ignoreapproval, coc.name, cc_uid, cc_name\";\n+\n+    public final static String SQL_GET_CATEGORYOPTIONCOMBO_BY_CATEGORYIDS = \"select * from ( \" +\n+            \"select coc.categoryoptioncomboid, \" +\n+            \"coc.uid, \" +\n+            \"coc.code, \" +\n+            \"coc.ignoreapproval, \" +\n+            \"coc.name, \" +\n+            \"c.uid as cc_uid, \" +\n+            \"c.name as cc_name,\" +\n+            \"string_agg( dec.categoryid::text, ',') as cat_ids \" +\n+            \"from categoryoptioncombo coc \" +\n+            \"join categorycombos_optioncombos co on coc.categoryoptioncomboid = co.categoryoptioncomboid \" +\n+            \"join categorycombo c on co.categorycomboid = c.categorycomboid \" +\n+            \"join categorycombos_categories cc on c.categorycomboid = cc.categorycomboid \" +\n+            \"join dataelementcategory dec on cc.categoryid = dec.categoryid \" +\n+            \"where c.${resolvedScheme} \" +\n+            \"group by coc.categoryoptioncomboid, coc.uid, coc.code, coc.ignoreapproval, coc.name, cc_uid, cc_name \" +\n+            \") as catoptcombo where \" +\n+            \"array_length(regexp_split_to_array(cat_ids, ','),1) = array_length(ARRAY[${option_ids}],1) AND \" +\n+            \"regexp_split_to_array(cat_ids, ',') @> ARRAY[${option_ids}]\";\n+\n+    public AttributeOptionComboLoader( @Qualifier( \"readOnlyJdbcTemplate\" ) JdbcTemplate jdbcTemplate )\n+    {\n+        checkNotNull( jdbcTemplate );\n+\n+        this.jdbcTemplate = jdbcTemplate;\n+    }\n+\n+    /**\n+     * Fetches a {@see CategoryOptionCombo} by id, using the provided look-up\n+     * Scheme\n+     *\n+     * @param idScheme an IdScheme\n+     * @param id the actual id\n+     * @return a CategoryOptionCombo or null\n+     */\n+    public CategoryOptionCombo getCategoryOptionCombo( IdScheme idScheme, String id )\n+    {\n+        return loadCategoryOptionCombo( idScheme, id );\n+        //return this.cocCache.get( idScheme.name() + KEY_SEPARATOR + id );\n+    }\n+\n+    /**\n+     * Fetches a {@see CategoryOptionCombo}\n+     *\n+     * @param categoryCombo a {@see CategoryCombo}\n+     * @param categoryOptions a semicolon delimited list of Category Options uid\n+     * @param attributeOptionCombo\n+     * @param idScheme the {@see IdScheme} to use to fetch the entity\n+     * @return a {@see CategoryOptionCombo}\n+     */\n+    public CategoryOptionCombo getAttributeOptionCombo( CategoryCombo categoryCombo, String categoryOptions,\n+                                                        String attributeOptionCombo, IdScheme idScheme )\n+    {\n+        final Set<String> opts = TextUtils.splitToArray( categoryOptions, TextUtils.SEMICOLON );\n+\n+        return getAttributeOptionCombo( categoryCombo, opts, attributeOptionCombo, idScheme );\n+    }\n+\n+    /**\n+     * Fetches the default {@see CategoryOptionCombo}\n+     * @return a {@see CategoryOptionCombo} or null\n+     */\n+    public CategoryOptionCombo getDefault()\n+    {\n+        return  loadCategoryOptionCombo( IdScheme.NAME, \"default\" );\n+    }\n+\n+    /**\n+     * Fetches a {@see CategoryOption} by uid, using the provided look-up Scheme\n+     *\n+     * @param idScheme an IdScheme\n+     * @param id the actual id\n+     * @return a CategoryOption or null\n+     */\n+    private CategoryOption getCategoryOption( IdScheme idScheme, String id )\n+    {\n+        return loadCategoryOption( idScheme, id);\n+    }\n+\n+    private CategoryOptionCombo getAttributeOptionCombo( CategoryCombo categoryCombo, Set<String> opts,\n+        String attributeOptionCombo, IdScheme idScheme )\n+    {\n+        if ( categoryCombo == null )\n+        {\n+            throw new IllegalQueryException( \"Illegal category combo\" );\n+        }\n+\n+        // ---------------------------------------------------------------------\n+        // Attribute category options validation\n+        // ---------------------------------------------------------------------\n+\n+        CategoryOptionCombo attrOptCombo = null;\n+\n+        if ( opts != null )\n+        {\n+            Set<CategoryOption> categoryOptions = new HashSet<>();\n+\n+            for ( String uid : opts )\n+            {\n+                CategoryOption categoryOption = getCategoryOption( idScheme, uid );\n+\n+                if ( categoryOption == null )\n+                {\n+                    throw new IllegalQueryException( \"Illegal category option identifier: \" + uid );\n+                }\n+\n+                categoryOptions.add( categoryOption );\n+            }\n+\n+            final String id = resolveCategoryComboId( categoryCombo, idScheme );\n+\n+            attrOptCombo = getAttributeOptionCombo( idScheme, id, categoryOptions );\n+\n+            if ( attrOptCombo == null )\n+            {\n+                throw new IllegalQueryException(\n+                    \"Attribute option combo does not exist for given category combo and category options\" );\n+            }\n+        }\n+        else if ( attributeOptionCombo != null )\n+        {\n+            attrOptCombo = getCategoryOptionCombo( idScheme, attributeOptionCombo );\n+        }\n+\n+        // ---------------------------------------------------------------------\n+        // Fall back to default category option combination\n+        // ---------------------------------------------------------------------\n+\n+        if ( attrOptCombo == null )\n+        {\n+            attrOptCombo = getDefault();\n+        }\n+\n+        if ( attrOptCombo == null )\n+        {\n+            throw new IllegalQueryException( \"Default attribute option combo does not exist\" );\n+        }\n+\n+        return attrOptCombo;\n+    }\n+\n+    private String resolveCategoryComboId( CategoryCombo categoryCombo, IdScheme idScheme )\n+    {\n+        String id = null;\n+\n+        if ( idScheme.is( IdentifiableProperty.ID ) )\n+        {\n+            id = String.valueOf( categoryCombo.getId() );\n+        }\n+        else if ( idScheme.is( IdentifiableProperty.UID ) )\n+        {\n+            id = categoryCombo.getUid();\n+        }\n+        else if ( idScheme.is( IdentifiableProperty.CODE ) )\n+        {\n+            id = categoryCombo.getCode();\n+        }\n+        else if ( idScheme.is( IdentifiableProperty.NAME ) )\n+        {\n+            id = categoryCombo.getName();\n+        }\n+\n+        return id;\n+    }\n+\n+    private CategoryOptionCombo getAttributeOptionCombo( IdScheme idScheme, String categoryComboId, Set<CategoryOption> categoryOptions) {", "originalCommit": "dc20b8a9249359bcdd1f612b1852f728ef63b7ab", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d0687a6c7c9e1c4dd64c4dc669bb80ae6e8c8c8b", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\nindex f18bcdf5a5..d8e807d79f 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\n", "chunk": "@@ -245,14 +239,14 @@ public class AttributeOptionComboLoader\n         return id;\n     }\n \n-    private CategoryOptionCombo getAttributeOptionCombo( IdScheme idScheme, String categoryComboId, Set<CategoryOption> categoryOptions) {\n+    private CategoryOptionCombo getAttributeOptionCombo( IdScheme idScheme, String categoryComboId, Set<CategoryOption> categoryOptions ) {\n \n         final String key = \"categorycomboid\";\n-        final String categoryComboKey = resolveId( idScheme, key, categoryComboId);\n+        final String categoryComboKey = resolveId( idScheme, key, categoryComboId );\n \n         final String optionsId = categoryOptions.stream()\n             .map( co -> Long.toString( co.getId() ) )\n-            .map(s -> \"'\" + s + \"'\")\n+            .map( s -> \"'\" + s + \"'\" )\n             .collect( Collectors.joining( \",\" ) );\n \n         // @formatter:off\n", "next_change": {"commit": "d360652a896bee650a842567e26cd1e62145cccb", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\nindex d8e807d79f..266b319fb7 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\n", "chunk": "@@ -231,22 +236,25 @@ public class AttributeOptionComboLoader\n         {\n             id = categoryCombo.getCode();\n         }\n-        else if ( idScheme.is( IdentifiableProperty.NAME ) )\n+        else if ( idScheme.is( IdentifiableProperty.ID ) )\n         {\n             id = categoryCombo.getName();\n         }\n-\n+        else\n+        {\n+            id = null;\n+        }\n         return id;\n     }\n \n-    private CategoryOptionCombo getAttributeOptionCombo( IdScheme idScheme, String categoryComboId, Set<CategoryOption> categoryOptions ) {\n+    private CategoryOptionCombo getAttributeOptionCombo( IdScheme idScheme, String categoryComboId, Set<CategoryOption> categoryOptions) {\n \n         final String key = \"categorycomboid\";\n-        final String categoryComboKey = resolveId( idScheme, key, categoryComboId );\n+        final String categoryComboKey = resolveId( idScheme, key, categoryComboId);\n \n         final String optionsId = categoryOptions.stream()\n             .map( co -> Long.toString( co.getId() ) )\n-            .map( s -> \"'\" + s + \"'\" )\n+            .map(s -> \"'\" + s + \"'\")\n             .collect( Collectors.joining( \",\" ) );\n \n         // @formatter:off\n", "next_change": {"commit": "9b1334c65290249b47fcdb9da2fa28233b89c4c3", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\nindex 266b319fb7..2cd558fac0 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\n", "chunk": "@@ -254,7 +252,7 @@ public class AttributeOptionComboLoader\n \n         final String optionsId = categoryOptions.stream()\n             .map( co -> Long.toString( co.getId() ) )\n-            .map(s -> \"'\" + s + \"'\")\n+            .map( s -> \"'\" + s + \"'\" )\n             .collect( Collectors.joining( \",\" ) );\n \n         // @formatter:off\n", "next_change": {"commit": "d35ce54afc25738b16d10df6a94d2d2af65f4fcb", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\nindex 2cd558fac0..ec5cdabbd7 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\n", "chunk": "@@ -245,10 +245,10 @@ public class AttributeOptionComboLoader\n         return id;\n     }\n \n-    private CategoryOptionCombo getAttributeOptionCombo( IdScheme idScheme, String categoryComboId, Set<CategoryOption> categoryOptions) {\n+    private CategoryOptionCombo getAttributeOptionCombo( IdScheme idScheme, String categoryComboId, Set<CategoryOption> categoryOptions ) {\n \n         final String key = \"categorycomboid\";\n-        final String categoryComboKey = resolveId( idScheme, key, categoryComboId);\n+        final String categoryComboKey = resolveId( idScheme, key, categoryComboId );\n \n         final String optionsId = categoryOptions.stream()\n             .map( co -> Long.toString( co.getId() ) )\n", "next_change": null}]}}]}}]}}]}, "revised_code_in_main": {"commit": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\nindex f18bcdf5a5..d8e807d79f 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\n", "chunk": "@@ -245,14 +239,14 @@ public class AttributeOptionComboLoader\n         return id;\n     }\n \n-    private CategoryOptionCombo getAttributeOptionCombo( IdScheme idScheme, String categoryComboId, Set<CategoryOption> categoryOptions) {\n+    private CategoryOptionCombo getAttributeOptionCombo( IdScheme idScheme, String categoryComboId, Set<CategoryOption> categoryOptions ) {\n \n         final String key = \"categorycomboid\";\n-        final String categoryComboKey = resolveId( idScheme, key, categoryComboId);\n+        final String categoryComboKey = resolveId( idScheme, key, categoryComboId );\n \n         final String optionsId = categoryOptions.stream()\n             .map( co -> Long.toString( co.getId() ) )\n-            .map(s -> \"'\" + s + \"'\")\n+            .map( s -> \"'\" + s + \"'\" )\n             .collect( Collectors.joining( \",\" ) );\n \n         // @formatter:off\n", "next_change": {"commit": "1bd8ee38126fbac22f805db44dad0cdcba7b14a6", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\nindex d8e807d79f..0416622c95 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\n", "chunk": "@@ -249,12 +248,10 @@ public class AttributeOptionComboLoader\n             .map( s -> \"'\" + s + \"'\" )\n             .collect( Collectors.joining( \",\" ) );\n \n-        // @formatter:off\n-        StrSubstitutor sub = new StrSubstitutor( ImmutableMap.<String, String>builder()\n-                .put( \"resolvedScheme\", Objects.requireNonNull( categoryComboKey ) )\n-                .put( \"option_ids\", optionsId )\n-                .build() );\n-        // @formatter:on\n+        StrSubstitutor sub = new StrSubstitutor( ImmutableMap.<String, String> builder()\n+            .put( \"resolvedScheme\", Objects.requireNonNull( categoryComboKey ) )\n+            .put( \"option_ids\", optionsId )\n+            .build() );\n         \n         // TODO use cache\n         List<CategoryOptionCombo> categoryOptionCombos = jdbcTemplate\n", "next_change": {"commit": "8bcecd537a43bcef4148300dcaaa97562887bc2a", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\nindex 0416622c95..ca9f520775 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\n", "chunk": "@@ -255,7 +255,7 @@ public class AttributeOptionComboLoader\n         \n         // TODO use cache\n         List<CategoryOptionCombo> categoryOptionCombos = jdbcTemplate\n-            .query( sub.replace( SQL_GET_CATEGORYOPTIONCOMBO_BY_CATEGORYIDS ), ( rs, i ) -> bind( key, rs ) );\n+            .query( sub.replace( SQL_GET_CATEGORYOPTIONCOMBO_BY_CATEGORYIDS ), ( rs, i ) -> bind( \"categoryoptioncomboid\", rs ) );\n \n         if ( categoryOptionCombos.size() == 1 )\n         {\n", "next_change": {"commit": "c9825d002fd6cac18498e6e39b407ab84b60cb6c", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\nindex ca9f520775..c6bcc1ffae 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\n", "chunk": "@@ -252,7 +252,7 @@ public class AttributeOptionComboLoader\n             .put( \"resolvedScheme\", Objects.requireNonNull( categoryComboKey ) )\n             .put( \"option_ids\", optionsId )\n             .build() );\n-        \n+\n         // TODO use cache\n         List<CategoryOptionCombo> categoryOptionCombos = jdbcTemplate\n             .query( sub.replace( SQL_GET_CATEGORYOPTIONCOMBO_BY_CATEGORYIDS ), ( rs, i ) -> bind( \"categoryoptioncomboid\", rs ) );\n", "next_change": {"commit": "ea76fa86409613c9766d4508d65c88ac55c413c3", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\nindex c6bcc1ffae..b5be1e0df5 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\n", "chunk": "@@ -255,7 +259,8 @@ public class AttributeOptionComboLoader\n \n         // TODO use cache\n         List<CategoryOptionCombo> categoryOptionCombos = jdbcTemplate\n-            .query( sub.replace( SQL_GET_CATEGORYOPTIONCOMBO_BY_CATEGORYIDS ), ( rs, i ) -> bind( \"categoryoptioncomboid\", rs ) );\n+            .query( sub.replace( SQL_GET_CATEGORYOPTIONCOMBO_BY_CATEGORYIDS ),\n+                ( rs, i ) -> bind( \"categoryoptioncomboid\", rs ) );\n \n         if ( categoryOptionCombos.size() == 1 )\n         {\n", "next_change": null}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "message": "Merge commit", "committedDate": null}, {"oid": "1bd8ee38126fbac22f805db44dad0cdcba7b14a6", "committedDate": "2020-09-23 11:30:37 +0200", "message": "fix: allow updating an Event with File data type [DHIS2-9559]"}, {"oid": "8bcecd537a43bcef4148300dcaaa97562887bc2a", "committedDate": "2020-10-02 09:16:15 +0200", "message": "fix: SQL query to fetch category option combo (#6234)"}, {"oid": "c9825d002fd6cac18498e6e39b407ab84b60cb6c", "committedDate": "2020-12-08 11:22:28 +0100", "message": "fix: Aggregate distinct cateOptionIds of AOC (#6846)"}, {"oid": "7098e9412b922ed70f8136f30c7d790e27bb43be", "committedDate": "2020-12-10 10:43:44 +0100", "message": "chore: Remove unused imports (#6875)"}, {"oid": "3e25b9b834757233501b068c1fd96b5b68cc22f7", "committedDate": "2020-12-22 12:59:13 +0100", "message": "feat: Convert sharing objects to JSONB structure [DHIS2-5814]"}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "420a69fc29ce7e6c1074a291ba005519a92b53ed", "committedDate": "2021-06-07 09:53:28 +0200", "message": "feat: Support JSON Patch (RFC 6902) for metadata objects (#7821)"}, {"oid": "610a453c1676b8d5b172e18f9df8f13570d5f80d", "committedDate": "2021-07-21 18:43:52 +0800", "message": "feat: Hibernate cluster cache invalidation with automatic node registration (#7926)"}, {"oid": "6f572a9ce997e4e66255f5a5ac2d3f141db1e8bd", "committedDate": "2021-10-26 21:13:46 +0200", "message": "chore: Remove most usages of commons-lang TECH-777 (#9104)"}, {"oid": "0395572b6507c94db6f06f39624de7935f10bb16", "committedDate": "2021-11-04 08:08:23 -0400", "message": "fix: Event import catOption start/end DHIS2-12061 (#9151)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "869fa986d53abcf6fc503e46e3b25e1b876e6c3d", "committedDate": "2022-03-01 13:31:17 +0100", "message": "feat: Add single data value endpoint with JSON body [DHIS2-12689] (#9886)"}, {"oid": "7cadf133b1ad419f9db936d81e895bd264be5925", "committedDate": "2022-04-15 08:46:01 +0200", "message": "chore(deps): bump h2 from 1.4.200 to 2.1.212 in /dhis-2 (#10459)"}, {"oid": "02336c9611c0dd85d5038223bddbfdebc0aae526", "committedDate": "2023-05-11 19:34:26 +0200", "message": "chore: move old tracker dxf2 code into deprecated package (#13901)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY0MTYxNQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r461641615", "body": "```suggestion\r\n            .put( \"resolvedScheme\", Objects.requireNonNull( resolveId( idScheme, key, id ) ) )\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        .put( \"resolvedScheme\", Objects.requireNonNull(resolveId(idScheme, key, id)))\n          \n          \n            \n                        .put( \"resolvedScheme\", Objects.requireNonNull( resolveId( idScheme, key, id ) ) )", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            .put( <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>resolvedScheme<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-smi\">Objects</span><span class=\"pl-k\">.</span>requireNonNull(resolveId(idScheme, key, id<span class=\"x x-first x-last\">))</span>)</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            .put( <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>resolvedScheme<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-smi\">Objects</span><span class=\"pl-k\">.</span>requireNonNull(<span class=\"x x-first x-last\"> </span>resolveId(<span class=\"x x-first x-last\"> </span>idScheme, key, id<span class=\"x x-first x-last\"> ) ) </span>)</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "stian-sandvold", "createdAt": "2020-07-28T14:47:55Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java", "diffHunk": "@@ -0,0 +1,384 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer.context;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.lang.RandomStringUtils;\n+import org.apache.commons.lang.text.StrSubstitutor;\n+import org.apache.logging.log4j.util.Strings;\n+import org.cache2k.Cache;\n+import org.cache2k.Cache2kBuilder;\n+import org.cache2k.integration.CacheLoader;\n+import org.hisp.dhis.category.CategoryCombo;\n+import org.hisp.dhis.category.CategoryOption;\n+import org.hisp.dhis.category.CategoryOptionCombo;\n+import org.hisp.dhis.common.IdScheme;\n+import org.hisp.dhis.common.IdentifiableProperty;\n+import org.hisp.dhis.common.IllegalQueryException;\n+import org.hisp.dhis.commons.util.TextUtils;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.dao.EmptyResultDataAccessException;\n+import org.springframework.jdbc.core.JdbcTemplate;\n+import org.springframework.stereotype.Component;\n+\n+import com.google.common.collect.ImmutableMap;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+@Component\n+public class AttributeOptionComboLoader\n+{\n+    private final JdbcTemplate jdbcTemplate;\n+\n+    private final static String KEY_SEPARATOR = \"-\";\n+\n+    public final static String SQL_GET_CATEGORYOPTIONCOMBO = \"select coc.categoryoptioncomboid, \"\n+            + \"coc.uid, coc.code, coc.ignoreapproval, coc.name, c.uid as cc_uid, c.name as cc_name, \"\n+            + \"string_agg(dec.categoryid::text, ',') as cat_ids from categoryoptioncombo coc \"\n+            + \"join categorycombos_optioncombos co on coc.categoryoptioncomboid = co.categoryoptioncomboid \"\n+            + \"join categorycombo c on co.categorycomboid = c.categorycomboid \"\n+            + \"join categorycombos_categories cc on c.categorycomboid = cc.categorycomboid \"\n+            + \"join dataelementcategory dec on cc.categoryid = dec.categoryid where coc.\"\n+            + \"${resolvedScheme} \"\n+            + \"group by coc.categoryoptioncomboid, coc.uid, coc.code, coc.ignoreapproval, coc.name, cc_uid, cc_name\";\n+\n+    public final static String SQL_GET_CATEGORYOPTIONCOMBO_BY_CATEGORYIDS = \"select * from ( \" +\n+            \"select coc.categoryoptioncomboid, \" +\n+            \"coc.uid, \" +\n+            \"coc.code, \" +\n+            \"coc.ignoreapproval, \" +\n+            \"coc.name, \" +\n+            \"c.uid as cc_uid, \" +\n+            \"c.name as cc_name,\" +\n+            \"string_agg( dec.categoryid::text, ',') as cat_ids \" +\n+            \"from categoryoptioncombo coc \" +\n+            \"join categorycombos_optioncombos co on coc.categoryoptioncomboid = co.categoryoptioncomboid \" +\n+            \"join categorycombo c on co.categorycomboid = c.categorycomboid \" +\n+            \"join categorycombos_categories cc on c.categorycomboid = cc.categorycomboid \" +\n+            \"join dataelementcategory dec on cc.categoryid = dec.categoryid \" +\n+            \"where c.${resolvedScheme} \" +\n+            \"group by coc.categoryoptioncomboid, coc.uid, coc.code, coc.ignoreapproval, coc.name, cc_uid, cc_name \" +\n+            \") as catoptcombo where \" +\n+            \"array_length(regexp_split_to_array(cat_ids, ','),1) = array_length(ARRAY[${option_ids}],1) AND \" +\n+            \"regexp_split_to_array(cat_ids, ',') @> ARRAY[${option_ids}]\";\n+\n+    public AttributeOptionComboLoader( @Qualifier( \"readOnlyJdbcTemplate\" ) JdbcTemplate jdbcTemplate )\n+    {\n+        checkNotNull( jdbcTemplate );\n+\n+        this.jdbcTemplate = jdbcTemplate;\n+    }\n+\n+    /**\n+     * Fetches a {@see CategoryOptionCombo} by id, using the provided look-up\n+     * Scheme\n+     *\n+     * @param idScheme an IdScheme\n+     * @param id the actual id\n+     * @return a CategoryOptionCombo or null\n+     */\n+    public CategoryOptionCombo getCategoryOptionCombo( IdScheme idScheme, String id )\n+    {\n+        return loadCategoryOptionCombo( idScheme, id );\n+        //return this.cocCache.get( idScheme.name() + KEY_SEPARATOR + id );\n+    }\n+\n+    /**\n+     * Fetches a {@see CategoryOptionCombo}\n+     *\n+     * @param categoryCombo a {@see CategoryCombo}\n+     * @param categoryOptions a semicolon delimited list of Category Options uid\n+     * @param attributeOptionCombo\n+     * @param idScheme the {@see IdScheme} to use to fetch the entity\n+     * @return a {@see CategoryOptionCombo}\n+     */\n+    public CategoryOptionCombo getAttributeOptionCombo( CategoryCombo categoryCombo, String categoryOptions,\n+                                                        String attributeOptionCombo, IdScheme idScheme )\n+    {\n+        final Set<String> opts = TextUtils.splitToArray( categoryOptions, TextUtils.SEMICOLON );\n+\n+        return getAttributeOptionCombo( categoryCombo, opts, attributeOptionCombo, idScheme );\n+    }\n+\n+    /**\n+     * Fetches the default {@see CategoryOptionCombo}\n+     * @return a {@see CategoryOptionCombo} or null\n+     */\n+    public CategoryOptionCombo getDefault()\n+    {\n+        return  loadCategoryOptionCombo( IdScheme.NAME, \"default\" );\n+    }\n+\n+    /**\n+     * Fetches a {@see CategoryOption} by uid, using the provided look-up Scheme\n+     *\n+     * @param idScheme an IdScheme\n+     * @param id the actual id\n+     * @return a CategoryOption or null\n+     */\n+    private CategoryOption getCategoryOption( IdScheme idScheme, String id )\n+    {\n+        return loadCategoryOption( idScheme, id);\n+    }\n+\n+    private CategoryOptionCombo getAttributeOptionCombo( CategoryCombo categoryCombo, Set<String> opts,\n+        String attributeOptionCombo, IdScheme idScheme )\n+    {\n+        if ( categoryCombo == null )\n+        {\n+            throw new IllegalQueryException( \"Illegal category combo\" );\n+        }\n+\n+        // ---------------------------------------------------------------------\n+        // Attribute category options validation\n+        // ---------------------------------------------------------------------\n+\n+        CategoryOptionCombo attrOptCombo = null;\n+\n+        if ( opts != null )\n+        {\n+            Set<CategoryOption> categoryOptions = new HashSet<>();\n+\n+            for ( String uid : opts )\n+            {\n+                CategoryOption categoryOption = getCategoryOption( idScheme, uid );\n+\n+                if ( categoryOption == null )\n+                {\n+                    throw new IllegalQueryException( \"Illegal category option identifier: \" + uid );\n+                }\n+\n+                categoryOptions.add( categoryOption );\n+            }\n+\n+            final String id = resolveCategoryComboId( categoryCombo, idScheme );\n+\n+            attrOptCombo = getAttributeOptionCombo( idScheme, id, categoryOptions );\n+\n+            if ( attrOptCombo == null )\n+            {\n+                throw new IllegalQueryException(\n+                    \"Attribute option combo does not exist for given category combo and category options\" );\n+            }\n+        }\n+        else if ( attributeOptionCombo != null )\n+        {\n+            attrOptCombo = getCategoryOptionCombo( idScheme, attributeOptionCombo );\n+        }\n+\n+        // ---------------------------------------------------------------------\n+        // Fall back to default category option combination\n+        // ---------------------------------------------------------------------\n+\n+        if ( attrOptCombo == null )\n+        {\n+            attrOptCombo = getDefault();\n+        }\n+\n+        if ( attrOptCombo == null )\n+        {\n+            throw new IllegalQueryException( \"Default attribute option combo does not exist\" );\n+        }\n+\n+        return attrOptCombo;\n+    }\n+\n+    private String resolveCategoryComboId( CategoryCombo categoryCombo, IdScheme idScheme )\n+    {\n+        String id = null;\n+\n+        if ( idScheme.is( IdentifiableProperty.ID ) )\n+        {\n+            id = String.valueOf( categoryCombo.getId() );\n+        }\n+        else if ( idScheme.is( IdentifiableProperty.UID ) )\n+        {\n+            id = categoryCombo.getUid();\n+        }\n+        else if ( idScheme.is( IdentifiableProperty.CODE ) )\n+        {\n+            id = categoryCombo.getCode();\n+        }\n+        else if ( idScheme.is( IdentifiableProperty.NAME ) )\n+        {\n+            id = categoryCombo.getName();\n+        }\n+\n+        return id;\n+    }\n+\n+    private CategoryOptionCombo getAttributeOptionCombo( IdScheme idScheme, String categoryComboId, Set<CategoryOption> categoryOptions) {\n+\n+        final String key = \"categorycomboid\";\n+        final String categoryComboKey = resolveId( idScheme, key, categoryComboId);\n+\n+        final String optionsId = categoryOptions.stream()\n+            .map( co -> Long.toString( co.getId() ) )\n+            .map(s -> \"'\" + s + \"'\")\n+            .collect( Collectors.joining( \",\" ) );\n+\n+        // @formatter:off\n+        StrSubstitutor sub = new StrSubstitutor( ImmutableMap.<String, String>builder()\n+                .put( \"resolvedScheme\", Objects.requireNonNull( categoryComboKey ) )\n+                .put( \"option_ids\", optionsId )\n+                .build() );\n+        // @formatter:on\n+        \n+        // TODO use cache\n+        List<CategoryOptionCombo> categoryOptionCombos = jdbcTemplate\n+            .query( sub.replace( SQL_GET_CATEGORYOPTIONCOMBO_BY_CATEGORYIDS ), ( rs, i ) -> bind( key, rs ) );\n+\n+        if ( categoryOptionCombos.size() == 1 )\n+        {\n+            return categoryOptionCombos.get( 0 );\n+        }\n+        else\n+        {\n+            // TODO throw an error??\n+            return null;\n+        }\n+    }\n+\n+    /**\n+     * Fetches a {@see CategoryOptionCombo} by \"id\" (based on the provided IdScheme)\n+     *\n+     * The {@see CategoryOptionCombo} contains tha associated {@see CategoryCombo}\n+     * and all the associated {@see CategoryOption}\n+     *\n+     * @param idScheme a {@see IdScheme}\n+     * @param id the {@see CategoryOptionCombo} id to use\n+     * @return a {@see CategoryOptionCombo} or null\n+     */\n+    private CategoryOptionCombo loadCategoryOptionCombo( IdScheme idScheme, String id )\n+    {\n+        String key = \"categoryoptioncomboid\";\n+        // @formatter:off\n+        StrSubstitutor sub = new StrSubstitutor( ImmutableMap.<String, String>builder()\n+            .put( \"key\", key )\n+            .put( \"resolvedScheme\", Objects.requireNonNull(resolveId(idScheme, key, id)))", "originalCommit": "dc20b8a9249359bcdd1f612b1852f728ef63b7ab", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d0687a6c7c9e1c4dd64c4dc669bb80ae6e8c8c8b", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\nindex f18bcdf5a5..d8e807d79f 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\n", "chunk": "@@ -293,7 +287,7 @@ public class AttributeOptionComboLoader\n         // @formatter:off\n         StrSubstitutor sub = new StrSubstitutor( ImmutableMap.<String, String>builder()\n             .put( \"key\", key )\n-            .put( \"resolvedScheme\", Objects.requireNonNull(resolveId(idScheme, key, id)))\n+            .put( \"resolvedScheme\", Objects.requireNonNull( resolveId( idScheme, key, id ) ) )\n             .build() );\n         // @formatter:on\n         try\n", "next_change": {"commit": "d360652a896bee650a842567e26cd1e62145cccb", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\nindex d8e807d79f..266b319fb7 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\n", "chunk": "@@ -287,7 +295,7 @@ public class AttributeOptionComboLoader\n         // @formatter:off\n         StrSubstitutor sub = new StrSubstitutor( ImmutableMap.<String, String>builder()\n             .put( \"key\", key )\n-            .put( \"resolvedScheme\", Objects.requireNonNull( resolveId( idScheme, key, id ) ) )\n+            .put( \"resolvedScheme\", Objects.requireNonNull(resolveId(idScheme, key, id)))\n             .build() );\n         // @formatter:on\n         try\n", "next_change": {"commit": "db6ca8d4f094185498ffe98477bc844733c3eb7f", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\nindex 266b319fb7..0b9e2d7186 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\n", "chunk": "@@ -295,7 +293,7 @@ public class AttributeOptionComboLoader\n         // @formatter:off\n         StrSubstitutor sub = new StrSubstitutor( ImmutableMap.<String, String>builder()\n             .put( \"key\", key )\n-            .put( \"resolvedScheme\", Objects.requireNonNull(resolveId(idScheme, key, id)))\n+            .put( \"resolvedScheme\", Objects.requireNonNull( resolveId( idScheme, key, id ) ) )\n             .build() );\n         // @formatter:on\n         try\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\nindex f18bcdf5a5..d8e807d79f 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\n", "chunk": "@@ -293,7 +287,7 @@ public class AttributeOptionComboLoader\n         // @formatter:off\n         StrSubstitutor sub = new StrSubstitutor( ImmutableMap.<String, String>builder()\n             .put( \"key\", key )\n-            .put( \"resolvedScheme\", Objects.requireNonNull(resolveId(idScheme, key, id)))\n+            .put( \"resolvedScheme\", Objects.requireNonNull( resolveId( idScheme, key, id ) ) )\n             .build() );\n         // @formatter:on\n         try\n", "next_change": {"commit": "8bcecd537a43bcef4148300dcaaa97562887bc2a", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\nindex d8e807d79f..ca9f520775 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\n", "chunk": "@@ -284,12 +281,12 @@ public class AttributeOptionComboLoader\n     private CategoryOptionCombo loadCategoryOptionCombo( IdScheme idScheme, String id )\n     {\n         String key = \"categoryoptioncomboid\";\n-        // @formatter:off\n+\n         StrSubstitutor sub = new StrSubstitutor( ImmutableMap.<String, String>builder()\n             .put( \"key\", key )\n             .put( \"resolvedScheme\", Objects.requireNonNull( resolveId( idScheme, key, id ) ) )\n             .build() );\n-        // @formatter:on\n+\n         try\n         {\n             return jdbcTemplate.queryForObject( sub.replace( SQL_GET_CATEGORYOPTIONCOMBO ),\n", "next_change": {"commit": "ea76fa86409613c9766d4508d65c88ac55c413c3", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\nindex ca9f520775..b5be1e0df5 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\n", "chunk": "@@ -282,7 +288,7 @@ public class AttributeOptionComboLoader\n     {\n         String key = \"categoryoptioncomboid\";\n \n-        StrSubstitutor sub = new StrSubstitutor( ImmutableMap.<String, String>builder()\n+        StrSubstitutor sub = new StrSubstitutor( ImmutableMap.<String, String> builder()\n             .put( \"key\", key )\n             .put( \"resolvedScheme\", Objects.requireNonNull( resolveId( idScheme, key, id ) ) )\n             .build() );\n", "next_change": {"commit": "6f572a9ce997e4e66255f5a5ac2d3f141db1e8bd", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\nindex b5be1e0df5..1437ea4aea 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\n", "chunk": "@@ -288,7 +288,7 @@ public class AttributeOptionComboLoader\n     {\n         String key = \"categoryoptioncomboid\";\n \n-        StrSubstitutor sub = new StrSubstitutor( ImmutableMap.<String, String> builder()\n+        StringSubstitutor sub = new StringSubstitutor( ImmutableMap.<String, String> builder()\n             .put( \"key\", key )\n             .put( \"resolvedScheme\", Objects.requireNonNull( resolveId( idScheme, key, id ) ) )\n             .build() );\n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "message": "Merge commit", "committedDate": null}, {"oid": "1bd8ee38126fbac22f805db44dad0cdcba7b14a6", "committedDate": "2020-09-23 11:30:37 +0200", "message": "fix: allow updating an Event with File data type [DHIS2-9559]"}, {"oid": "8bcecd537a43bcef4148300dcaaa97562887bc2a", "committedDate": "2020-10-02 09:16:15 +0200", "message": "fix: SQL query to fetch category option combo (#6234)"}, {"oid": "c9825d002fd6cac18498e6e39b407ab84b60cb6c", "committedDate": "2020-12-08 11:22:28 +0100", "message": "fix: Aggregate distinct cateOptionIds of AOC (#6846)"}, {"oid": "7098e9412b922ed70f8136f30c7d790e27bb43be", "committedDate": "2020-12-10 10:43:44 +0100", "message": "chore: Remove unused imports (#6875)"}, {"oid": "3e25b9b834757233501b068c1fd96b5b68cc22f7", "committedDate": "2020-12-22 12:59:13 +0100", "message": "feat: Convert sharing objects to JSONB structure [DHIS2-5814]"}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "420a69fc29ce7e6c1074a291ba005519a92b53ed", "committedDate": "2021-06-07 09:53:28 +0200", "message": "feat: Support JSON Patch (RFC 6902) for metadata objects (#7821)"}, {"oid": "610a453c1676b8d5b172e18f9df8f13570d5f80d", "committedDate": "2021-07-21 18:43:52 +0800", "message": "feat: Hibernate cluster cache invalidation with automatic node registration (#7926)"}, {"oid": "6f572a9ce997e4e66255f5a5ac2d3f141db1e8bd", "committedDate": "2021-10-26 21:13:46 +0200", "message": "chore: Remove most usages of commons-lang TECH-777 (#9104)"}, {"oid": "0395572b6507c94db6f06f39624de7935f10bb16", "committedDate": "2021-11-04 08:08:23 -0400", "message": "fix: Event import catOption start/end DHIS2-12061 (#9151)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "869fa986d53abcf6fc503e46e3b25e1b876e6c3d", "committedDate": "2022-03-01 13:31:17 +0100", "message": "feat: Add single data value endpoint with JSON body [DHIS2-12689] (#9886)"}, {"oid": "7cadf133b1ad419f9db936d81e895bd264be5925", "committedDate": "2022-04-15 08:46:01 +0200", "message": "chore(deps): bump h2 from 1.4.200 to 2.1.212 in /dhis-2 (#10459)"}, {"oid": "02336c9611c0dd85d5038223bddbfdebc0aae526", "committedDate": "2023-05-11 19:34:26 +0200", "message": "chore: move old tracker dxf2 code into deprecated package (#13901)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY0MjkxOA==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r461642918", "body": "```suggestion\r\n            || (validationStrategy == ValidationStrategy.ON_COMPLETE && event.getStatus() == EventStatus.COMPLETED );\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        || (validationStrategy == ValidationStrategy.ON_COMPLETE && event.getStatus() == EventStatus.COMPLETED);\n          \n          \n            \n                        || (validationStrategy == ValidationStrategy.ON_COMPLETE && event.getStatus() == EventStatus.COMPLETED );", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            <span class=\"pl-k\">||</span> (validationStrategy <span class=\"pl-k\">==</span> <span class=\"pl-smi\">ValidationStrategy</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>ON_COMPLETE</span> <span class=\"pl-k\">&amp;&amp;</span> event<span class=\"pl-k\">.</span>getStatus() <span class=\"pl-k\">==</span> <span class=\"pl-smi\">EventStatus</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>COMPLETED</span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            <span class=\"pl-k\">||</span> (validationStrategy <span class=\"pl-k\">==</span> <span class=\"pl-smi\">ValidationStrategy</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>ON_COMPLETE</span> <span class=\"pl-k\">&amp;&amp;</span> event<span class=\"pl-k\">.</span>getStatus() <span class=\"pl-k\">==</span> <span class=\"pl-smi\">EventStatus</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>COMPLETED</span><span class=\"x x-first x-last\"> </span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "stian-sandvold", "createdAt": "2020-07-28T14:49:35Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/DataValueCheck.java", "diffHunk": "@@ -0,0 +1,204 @@\n+package org.hisp.dhis.dxf2.events.importer.shared.validation;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import static org.hisp.dhis.common.IdentifiableObjectUtils.getIdentifierBasedOnIdScheme;\n+import static org.hisp.dhis.dxf2.events.event.EventUtils.eventDataValuesToJson;\n+\n+import java.sql.SQLException;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.hisp.dhis.common.IdScheme;\n+import org.hisp.dhis.dataelement.DataElement;\n+import org.hisp.dhis.dxf2.events.event.DataValue;\n+import org.hisp.dhis.dxf2.events.importer.Checker;\n+import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n+import org.hisp.dhis.dxf2.events.importer.shared.ImmutableEvent;\n+import org.hisp.dhis.dxf2.importsummary.ImportConflict;\n+import org.hisp.dhis.dxf2.importsummary.ImportStatus;\n+import org.hisp.dhis.dxf2.importsummary.ImportSummary;\n+import org.hisp.dhis.event.EventStatus;\n+import org.hisp.dhis.eventdatavalue.EventDataValue;\n+import org.hisp.dhis.program.ProgramStage;\n+import org.hisp.dhis.program.ProgramStageDataElement;\n+import org.hisp.dhis.program.ValidationStrategy;\n+import org.hisp.dhis.security.Authorities;\n+import org.hisp.dhis.system.util.ValidationUtils;\n+import org.hisp.dhis.user.User;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+public class DataValueCheck implements Checker\n+{\n+    @Override\n+    public ImportSummary check( ImmutableEvent event, WorkContext ctx )\n+    {\n+        final Set<DataValue> dataValues = event.getDataValues();\n+        final ImportSummary importSummary = new ImportSummary();\n+        final User user = ctx.getImportOptions().getUser();\n+\n+        for ( DataValue dataValue : dataValues )\n+        {\n+            if ( !checkHasValidDataElement( importSummary, ctx, dataValue )\n+                || !checkSerializeToJson( importSummary, ctx, dataValue ) )\n+            {\n+                importSummary.setStatus( ImportStatus.ERROR );\n+                importSummary.setReference( event.getUid() );\n+                importSummary.incrementIgnored();\n+\n+                return importSummary;\n+            }\n+        }\n+\n+        if ( importSummary.getConflicts().isEmpty() )\n+        {\n+            if ( doValidationOfMandatoryAttributes( user ) && isValidationRequired( event, ctx ) )\n+            {\n+                validateMandatoryAttributes( importSummary, ctx, event );\n+            }\n+        }\n+\n+        if ( !importSummary.getConflicts().isEmpty() )\n+        {\n+            importSummary.setStatus( ImportStatus.ERROR );\n+            importSummary.setReference( event.getUid() );\n+            importSummary.incrementIgnored();\n+        }\n+\n+        return importSummary;\n+    }\n+\n+    public void validateMandatoryAttributes( ImportSummary importSummary, WorkContext ctx,\n+        ImmutableEvent event )\n+    {\n+        if ( StringUtils.isEmpty( event.getProgramStage() ) )\n+            return;\n+\n+        final IdScheme programStageIdScheme = ctx.getImportOptions().getIdSchemes().getProgramStageIdScheme();\n+        final IdScheme dataElementIdScheme = ctx.getImportOptions().getIdSchemes().getDataElementIdScheme();\n+        final Map<String, Set<EventDataValue>> eventDataValueMap = ctx.getEventDataValueMap();\n+\n+        ProgramStage programStage = ctx.getProgramStage( programStageIdScheme, event.getProgramStage() );\n+\n+        final Set<ProgramStageDataElement> mandatoryDataElements = programStage.getProgramStageDataElements();\n+\n+        // Data Element IDs associated to the current event\n+        Set<String> dataValues = eventDataValueMap.get( event.getUid() ).stream().map( EventDataValue::getDataElement )\n+            .collect( Collectors.toSet() );\n+\n+        for ( ProgramStageDataElement mandatoryDataElement : mandatoryDataElements )\n+        {\n+            String resolvedDataElementId = getIdentifierBasedOnIdScheme( mandatoryDataElement.getDataElement(),\n+                dataElementIdScheme );\n+            if ( !dataValues.contains( resolvedDataElementId ) )\n+            {\n+                importSummary.getConflicts()\n+                    .add( new ImportConflict( resolvedDataElementId, \"value_required_but_not_provided\" ) );\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Checks if the data value can be serialized to Json\n+     */\n+    private boolean checkSerializeToJson( ImportSummary importSummary, WorkContext ctx, DataValue dataValue )\n+    {\n+        try\n+        {\n+            eventDataValuesToJson( dataValue, ctx.getServiceDelegator().getJsonMapper() );\n+        }\n+        catch ( JsonProcessingException | SQLException e )\n+        {\n+            importSummary.getConflicts()\n+                .add( new ImportConflict( dataValue.getDataElement(), \"Invalid data value found.\" ) );\n+        }\n+        return importSummary.getConflicts().isEmpty();\n+    }\n+\n+    /**\n+     * Checks that the specified Data Element ID (uid/code/id) corresponds to an\n+     * existing Data Element\n+     *\n+     */\n+    private boolean checkHasValidDataElement( ImportSummary importSummary, WorkContext ctx, DataValue dataValue )\n+    {\n+        DataElement dataElement = ctx.getDataElementMap().get( dataValue.getDataElement() );\n+\n+        if ( dataElement == null )\n+        {\n+            // This can happen if a wrong data element identifier is provided\n+            importSummary.getConflicts().add(\n+                new ImportConflict( \"dataElement\", dataValue.getDataElement() + \" is not a valid data element\" ) );\n+        }\n+        else\n+        {\n+            final String status = ValidationUtils.dataValueIsValid( dataValue.getValue(), dataElement );\n+\n+            if ( status != null )\n+            {\n+                importSummary.getConflicts().add( new ImportConflict( dataElement.getUid(), status ) );\n+            }\n+        }\n+\n+        return importSummary.getConflicts().isEmpty();\n+    }\n+\n+    private boolean isValidationRequired( ImmutableEvent event, WorkContext ctx )\n+    {\n+        final ValidationStrategy validationStrategy = getValidationStrategy( ctx, event );\n+\n+        return validationStrategy == null || validationStrategy == ValidationStrategy.ON_UPDATE_AND_INSERT\n+            || (validationStrategy == ValidationStrategy.ON_COMPLETE && event.getStatus() == EventStatus.COMPLETED);", "originalCommit": "dc20b8a9249359bcdd1f612b1852f728ef63b7ab", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d0687a6c7c9e1c4dd64c4dc669bb80ae6e8c8c8b", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/DataValueCheck.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/DataValueCheck.java\nindex 61ab750dac..3b5f7d5cc9 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/DataValueCheck.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/DataValueCheck.java\n", "chunk": "@@ -180,7 +180,7 @@ public class DataValueCheck implements Checker\n         final ValidationStrategy validationStrategy = getValidationStrategy( ctx, event );\n \n         return validationStrategy == null || validationStrategy == ValidationStrategy.ON_UPDATE_AND_INSERT\n-            || (validationStrategy == ValidationStrategy.ON_COMPLETE && event.getStatus() == EventStatus.COMPLETED);\n+            || (validationStrategy == ValidationStrategy.ON_COMPLETE && event.getStatus() == EventStatus.COMPLETED );\n \n     }\n \n", "next_change": {"commit": "d360652a896bee650a842567e26cd1e62145cccb", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/DataValueCheck.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/DataValueCheck.java\nindex 3b5f7d5cc9..61ab750dac 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/DataValueCheck.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/DataValueCheck.java\n", "chunk": "@@ -180,7 +180,7 @@ public class DataValueCheck implements Checker\n         final ValidationStrategy validationStrategy = getValidationStrategy( ctx, event );\n \n         return validationStrategy == null || validationStrategy == ValidationStrategy.ON_UPDATE_AND_INSERT\n-            || (validationStrategy == ValidationStrategy.ON_COMPLETE && event.getStatus() == EventStatus.COMPLETED );\n+            || (validationStrategy == ValidationStrategy.ON_COMPLETE && event.getStatus() == EventStatus.COMPLETED);\n \n     }\n \n", "next_change": {"commit": "2d17da0606b0e9cb9cd45580513e0e2ed560daa2", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/DataValueCheck.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/DataValueCheck.java\nindex 61ab750dac..3b5f7d5cc9 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/DataValueCheck.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/DataValueCheck.java\n", "chunk": "@@ -180,7 +180,7 @@ public class DataValueCheck implements Checker\n         final ValidationStrategy validationStrategy = getValidationStrategy( ctx, event );\n \n         return validationStrategy == null || validationStrategy == ValidationStrategy.ON_UPDATE_AND_INSERT\n-            || (validationStrategy == ValidationStrategy.ON_COMPLETE && event.getStatus() == EventStatus.COMPLETED);\n+            || (validationStrategy == ValidationStrategy.ON_COMPLETE && event.getStatus() == EventStatus.COMPLETED );\n \n     }\n \n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/DataValueCheck.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/DataValueCheck.java\nindex 61ab750dac..a5d2e5b42b 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/DataValueCheck.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/DataValueCheck.java\n", "chunk": "@@ -180,7 +193,7 @@ public class DataValueCheck implements Checker\n         final ValidationStrategy validationStrategy = getValidationStrategy( ctx, event );\n \n         return validationStrategy == null || validationStrategy == ValidationStrategy.ON_UPDATE_AND_INSERT\n-            || (validationStrategy == ValidationStrategy.ON_COMPLETE && event.getStatus() == EventStatus.COMPLETED);\n+            || (validationStrategy == ValidationStrategy.ON_COMPLETE && event.getStatus() == EventStatus.COMPLETED );\n \n     }\n \n", "next_change": {"commit": "ea76fa86409613c9766d4508d65c88ac55c413c3", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/DataValueCheck.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/DataValueCheck.java\nindex a5d2e5b42b..2817d7d1da 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/DataValueCheck.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/DataValueCheck.java\n", "chunk": "@@ -193,7 +204,7 @@ public class DataValueCheck implements Checker\n         final ValidationStrategy validationStrategy = getValidationStrategy( ctx, event );\n \n         return validationStrategy == null || validationStrategy == ValidationStrategy.ON_UPDATE_AND_INSERT\n-            || (validationStrategy == ValidationStrategy.ON_COMPLETE && event.getStatus() == EventStatus.COMPLETED );\n+            || (validationStrategy == ValidationStrategy.ON_COMPLETE && event.getStatus() == EventStatus.COMPLETED);\n \n     }\n \n", "next_change": {"commit": "02336c9611c0dd85d5038223bddbfdebc0aae526", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/DataValueCheck.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/DataValueCheck.java\ndeleted file mode 100644\nindex 2817d7d1da..0000000000\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/DataValueCheck.java\n+++ /dev/null\n", "chunk": "@@ -1,228 +0,0 @@\n-/*\n- * Copyright (c) 2004-2021, University of Oslo\n- * All rights reserved.\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions are met:\n- * Redistributions of source code must retain the above copyright notice, this\n- * list of conditions and the following disclaimer.\n- *\n- * Redistributions in binary form must reproduce the above copyright notice,\n- * this list of conditions and the following disclaimer in the documentation\n- * and/or other materials provided with the distribution.\n- * Neither the name of the HISP project nor the names of its contributors may\n- * be used to endorse or promote products derived from this software without\n- * specific prior written permission.\n- *\n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n- * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n- * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n- * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n- * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n- * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n- * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n- * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n- * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- */\n-package org.hisp.dhis.dxf2.events.importer.shared.validation;\n-\n-import static org.hisp.dhis.common.IdentifiableObjectUtils.getIdentifierBasedOnIdScheme;\n-import static org.hisp.dhis.dxf2.events.event.EventUtils.eventDataValuesToJson;\n-\n-import java.sql.SQLException;\n-import java.util.Collections;\n-import java.util.Map;\n-import java.util.Optional;\n-import java.util.Set;\n-import java.util.stream.Collectors;\n-\n-import org.apache.commons.lang3.StringUtils;\n-import org.hisp.dhis.common.IdScheme;\n-import org.hisp.dhis.dataelement.DataElement;\n-import org.hisp.dhis.dxf2.events.event.DataValue;\n-import org.hisp.dhis.dxf2.events.importer.Checker;\n-import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n-import org.hisp.dhis.dxf2.events.importer.shared.ImmutableEvent;\n-import org.hisp.dhis.dxf2.importsummary.ImportConflict;\n-import org.hisp.dhis.dxf2.importsummary.ImportStatus;\n-import org.hisp.dhis.dxf2.importsummary.ImportSummary;\n-import org.hisp.dhis.event.EventStatus;\n-import org.hisp.dhis.eventdatavalue.EventDataValue;\n-import org.hisp.dhis.program.ProgramStage;\n-import org.hisp.dhis.program.ProgramStageDataElement;\n-import org.hisp.dhis.program.ProgramStageInstance;\n-import org.hisp.dhis.program.ValidationStrategy;\n-import org.hisp.dhis.security.Authorities;\n-import org.hisp.dhis.system.util.ValidationUtils;\n-import org.hisp.dhis.user.User;\n-\n-import com.fasterxml.jackson.core.JsonProcessingException;\n-\n-/**\n- * @author Luciano Fiandesio\n- */\n-public class DataValueCheck implements Checker\n-{\n-    @Override\n-    public ImportSummary check( ImmutableEvent event, WorkContext ctx )\n-    {\n-        final Set<DataValue> dataValues = event.getDataValues();\n-        final ImportSummary importSummary = new ImportSummary();\n-        final User user = ctx.getImportOptions().getUser();\n-\n-        for ( DataValue dataValue : dataValues )\n-        {\n-            if ( !checkHasValidDataElement( importSummary, ctx, dataValue )\n-                || !checkSerializeToJson( importSummary, ctx, dataValue ) )\n-            {\n-                importSummary.setStatus( ImportStatus.ERROR );\n-                importSummary.setReference( event.getUid() );\n-                importSummary.incrementIgnored();\n-\n-                return importSummary;\n-            }\n-        }\n-\n-        if ( importSummary.getConflicts().isEmpty() )\n-        {\n-            if ( doValidationOfMandatoryAttributes( user ) && isValidationRequired( event, ctx ) )\n-            {\n-                validateMandatoryAttributes( importSummary, ctx, event );\n-            }\n-        }\n-\n-        if ( !importSummary.getConflicts().isEmpty() )\n-        {\n-            importSummary.setStatus( ImportStatus.ERROR );\n-            importSummary.setReference( event.getUid() );\n-            importSummary.incrementIgnored();\n-        }\n-\n-        return importSummary;\n-    }\n-\n-    public void validateMandatoryAttributes( ImportSummary importSummary, WorkContext ctx,\n-        ImmutableEvent event )\n-    {\n-        if ( StringUtils.isEmpty( event.getProgramStage() ) )\n-            return;\n-\n-        final IdScheme programStageIdScheme = ctx.getImportOptions().getIdSchemes().getProgramStageIdScheme();\n-        final IdScheme dataElementIdScheme = ctx.getImportOptions().getIdSchemes().getDataElementIdScheme();\n-        final Map<String, Set<EventDataValue>> eventDataValueMap = ctx.getEventDataValueMap();\n-\n-        final boolean allowSingleUpdates = ctx.getImportOptions().isMergeDataValues();\n-\n-        ProgramStage programStage = ctx.getProgramStage( programStageIdScheme, event.getProgramStage() );\n-\n-        final Set<ProgramStageDataElement> mandatoryDataElements = getMandatoryProgramStageDataElements( programStage );\n-\n-        // Data Element IDs associated to the current event\n-        Set<String> dataValues = eventDataValueMap.get( event.getUid() ).stream()\n-            .map( EventDataValue::getDataElement )\n-            .collect( Collectors.toSet() );\n-\n-        if ( allowSingleUpdates )\n-        {\n-            final ProgramStageInstance programStageInstance = ctx.getProgramStageInstanceMap().get( event.getUid() );\n-\n-            dataValues.addAll( programStageInstance.getEventDataValues().stream()\n-                .filter( dv -> !StringUtils.isEmpty( dv.getValue().trim() ) ).map( EventDataValue::getDataElement )\n-                .collect( Collectors.toSet() ) );\n-        }\n-\n-        for ( ProgramStageDataElement mandatoryDataElement : mandatoryDataElements )\n-        {\n-            String resolvedDataElementId = getIdentifierBasedOnIdScheme( mandatoryDataElement.getDataElement(),\n-                dataElementIdScheme );\n-            if ( !dataValues.contains( resolvedDataElementId ) )\n-            {\n-                importSummary.getConflicts()\n-                    .add( new ImportConflict( resolvedDataElementId, \"value_required_but_not_provided\" ) );\n-            }\n-        }\n-    }\n-\n-    private Set<ProgramStageDataElement> getMandatoryProgramStageDataElements( ProgramStage programStage )\n-    {\n-        return Optional.ofNullable( programStage )\n-            .map( ProgramStage::getProgramStageDataElements )\n-            .orElse( Collections.emptySet() )\n-            .stream()\n-            .filter( ProgramStageDataElement::isCompulsory )\n-            .collect( Collectors.toSet() );\n-    }\n-\n-    /**\n-     * Checks if the data value can be serialized to Json\n-     */\n-    private boolean checkSerializeToJson( ImportSummary importSummary, WorkContext ctx, DataValue dataValue )\n-    {\n-        try\n-        {\n-            eventDataValuesToJson( dataValue, ctx.getServiceDelegator().getJsonMapper() );\n-        }\n-        catch ( JsonProcessingException | SQLException e )\n-        {\n-            importSummary.getConflicts()\n-                .add( new ImportConflict( dataValue.getDataElement(), \"Invalid data value found.\" ) );\n-        }\n-        return importSummary.getConflicts().isEmpty();\n-    }\n-\n-    /**\n-     * Checks that the specified Data Element ID (uid/code/id) corresponds to an\n-     * existing Data Element\n-     *\n-     */\n-    private boolean checkHasValidDataElement( ImportSummary importSummary, WorkContext ctx, DataValue dataValue )\n-    {\n-        DataElement dataElement = ctx.getDataElementMap().get( dataValue.getDataElement() );\n-\n-        if ( dataElement == null )\n-        {\n-            // This can happen if a wrong data element identifier is provided\n-            importSummary.getConflicts().add(\n-                new ImportConflict( \"dataElement\", dataValue.getDataElement() + \" is not a valid data element\" ) );\n-        }\n-        else\n-        {\n-            final String status = ValidationUtils.dataValueIsValid( dataValue.getValue(), dataElement );\n-\n-            if ( status != null )\n-            {\n-                importSummary.getConflicts().add( new ImportConflict( dataElement.getUid(), status ) );\n-            }\n-        }\n-\n-        return importSummary.getConflicts().isEmpty();\n-    }\n-\n-    private boolean isValidationRequired( ImmutableEvent event, WorkContext ctx )\n-    {\n-        final ValidationStrategy validationStrategy = getValidationStrategy( ctx, event );\n-\n-        return validationStrategy == null || validationStrategy == ValidationStrategy.ON_UPDATE_AND_INSERT\n-            || (validationStrategy == ValidationStrategy.ON_COMPLETE && event.getStatus() == EventStatus.COMPLETED);\n-\n-    }\n-\n-    private boolean doValidationOfMandatoryAttributes( User user )\n-    {\n-        return user == null\n-            || !user.isAuthorized( Authorities.F_IGNORE_TRACKER_REQUIRED_VALUE_VALIDATION.getAuthority() );\n-    }\n-\n-    private ValidationStrategy getValidationStrategy( WorkContext ctx, ImmutableEvent event )\n-    {\n-        if ( StringUtils.isNotEmpty( event.getProgramStage() ) )\n-        {\n-            return ctx\n-                .getProgramStage( ctx.getImportOptions().getIdSchemes().getProgramStageIdScheme(),\n-                    event.getProgramStage() )\n-                .getValidationStrategy();\n-        }\n-        return null;\n-    }\n-}\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "message": "Merge commit", "committedDate": null}, {"oid": "801651cbf2431b9c2cf6e772eef9f4b70109b006", "committedDate": "2020-11-06 11:23:57 +0100", "message": "fix: applying pre-processor modification to context and event payload\u2026 (#6564)"}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "6f3422ff9a182b183a9e3a2f61cf457bb23cb092", "committedDate": "2021-06-10 13:13:51 +0200", "message": "chore: encapsulates import conflicts [DHIS2-4414]  (#8164)"}, {"oid": "1e593837ab1c64884a8ac615c7cc8c3471a219ee", "committedDate": "2021-11-18 09:33:25 +0100", "message": "refactor: validators, checkers and processors in old importer are now spring beans [TECH-797] (#9218)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "00b4b16e29d2506465f723a914352c1047a220fe", "committedDate": "2022-01-31 18:13:04 +0100", "message": "fix: Validate event association datavalues (#9669)"}, {"oid": "91ecf56a000b8c52b630d13125106c61e4fbb6a2", "committedDate": "2022-08-23 09:51:03 +0200", "message": "feat: Fileresource ownership [DHIS2-13042] (#11496)"}, {"oid": "678528ed25219d8ccc0be9744f7e1bb52ea81bd9", "committedDate": "2023-01-20 11:44:26 +0100", "message": "refactor: Generalize data value validation method [DHIS2-12152] (#12790)"}, {"oid": "767b7f42de12298858f826f675affe82f73732db", "committedDate": "2023-04-24 09:13:24 +0200", "message": "feat: MutiText value type validation [DHIS2-14737] (#13550)"}, {"oid": "959c60d4f597187d0df2160fbbb675e5c4196e5c", "committedDate": "2023-04-27 16:46:18 +0200", "message": "chore: rename ProgramStageInstance to Event (#13731)"}, {"oid": "02336c9611c0dd85d5038223bddbfdebc0aae526", "committedDate": "2023-05-11 19:34:26 +0200", "message": "chore: move old tracker dxf2 code into deprecated package (#13901)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY0NDEwMw==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r461644103", "body": "```suggestion\r\n        this.subject = new ProgramStageInstanceSupplier( jdbcTemplate, mapper, programSupplier );\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    this.subject = new ProgramStageInstanceSupplier( jdbcTemplate, mapper, programSupplier);\n          \n          \n            \n                    this.subject = new ProgramStageInstanceSupplier( jdbcTemplate, mapper, programSupplier );", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-c1\">this</span><span class=\"pl-k\">.</span>subject <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">ProgramStageInstanceSupplier</span>( jdbcTemplate, mapper, programSupplier);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-c1\">this</span><span class=\"pl-k\">.</span>subject <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">ProgramStageInstanceSupplier</span>( jdbcTemplate, mapper, programSupplier<span class=\"x x-first x-last\"> </span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "stian-sandvold", "createdAt": "2020-07-28T14:50:59Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/ProgramStageInstanceSupplierTest.java", "diffHunk": "@@ -0,0 +1,103 @@\n+package org.hisp.dhis.dxf2.events.importer.context;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.notNullValue;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertThat;\n+import static org.mockito.Mockito.when;\n+\n+import java.sql.SQLException;\n+import java.util.Collections;\n+import java.util.Map;\n+\n+import org.hisp.dhis.common.CodeGenerator;\n+import org.hisp.dhis.dxf2.common.ImportOptions;\n+import org.hisp.dhis.dxf2.events.event.Event;\n+import org.hisp.dhis.event.EventStatus;\n+import org.hisp.dhis.program.ProgramStageInstance;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import com.fasterxml.jackson.databind.json.JsonMapper;\n+import org.mockito.Mock;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+public class ProgramStageInstanceSupplierTest extends AbstractSupplierTest<ProgramStageInstance>\n+{\n+    private ProgramStageInstanceSupplier subject;\n+\n+    @Mock\n+    private ProgramSupplier programSupplier;\n+\n+    @Before\n+    public void setUp()\n+    {\n+        JsonMapper mapper = new JsonMapper();\n+        this.subject = new ProgramStageInstanceSupplier( jdbcTemplate, mapper, programSupplier);", "originalCommit": "dc20b8a9249359bcdd1f612b1852f728ef63b7ab", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d0687a6c7c9e1c4dd64c4dc669bb80ae6e8c8c8b", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/ProgramStageInstanceSupplierTest.java b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/ProgramStageInstanceSupplierTest.java\nindex cc7b12ced3..5051523fc0 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/ProgramStageInstanceSupplierTest.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/ProgramStageInstanceSupplierTest.java\n", "chunk": "@@ -63,7 +63,7 @@ public class ProgramStageInstanceSupplierTest extends AbstractSupplierTest<Progr\n     public void setUp()\n     {\n         JsonMapper mapper = new JsonMapper();\n-        this.subject = new ProgramStageInstanceSupplier( jdbcTemplate, mapper, programSupplier);\n+        this.subject = new ProgramStageInstanceSupplier( jdbcTemplate, mapper, programSupplier );\n     }\n \n     @Test\n", "next_change": {"commit": "d360652a896bee650a842567e26cd1e62145cccb", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/ProgramStageInstanceSupplierTest.java b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/ProgramStageInstanceSupplierTest.java\nindex 5051523fc0..cc7b12ced3 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/ProgramStageInstanceSupplierTest.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/ProgramStageInstanceSupplierTest.java\n", "chunk": "@@ -63,7 +63,7 @@ public class ProgramStageInstanceSupplierTest extends AbstractSupplierTest<Progr\n     public void setUp()\n     {\n         JsonMapper mapper = new JsonMapper();\n-        this.subject = new ProgramStageInstanceSupplier( jdbcTemplate, mapper, programSupplier );\n+        this.subject = new ProgramStageInstanceSupplier( jdbcTemplate, mapper, programSupplier);\n     }\n \n     @Test\n", "next_change": {"commit": "6910e222ea71880240537b7ef0cb672865357a11", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/ProgramStageInstanceSupplierTest.java b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/ProgramStageInstanceSupplierTest.java\nindex cc7b12ced3..5051523fc0 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/ProgramStageInstanceSupplierTest.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/ProgramStageInstanceSupplierTest.java\n", "chunk": "@@ -63,7 +63,7 @@ public class ProgramStageInstanceSupplierTest extends AbstractSupplierTest<Progr\n     public void setUp()\n     {\n         JsonMapper mapper = new JsonMapper();\n-        this.subject = new ProgramStageInstanceSupplier( jdbcTemplate, mapper, programSupplier);\n+        this.subject = new ProgramStageInstanceSupplier( jdbcTemplate, mapper, programSupplier );\n     }\n \n     @Test\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/ProgramStageInstanceSupplierTest.java b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/ProgramStageInstanceSupplierTest.java\nindex cc7b12ced3..5051523fc0 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/ProgramStageInstanceSupplierTest.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/ProgramStageInstanceSupplierTest.java\n", "chunk": "@@ -63,7 +63,7 @@ public class ProgramStageInstanceSupplierTest extends AbstractSupplierTest<Progr\n     public void setUp()\n     {\n         JsonMapper mapper = new JsonMapper();\n-        this.subject = new ProgramStageInstanceSupplier( jdbcTemplate, mapper, programSupplier);\n+        this.subject = new ProgramStageInstanceSupplier( jdbcTemplate, mapper, programSupplier );\n     }\n \n     @Test\n", "next_change": {"commit": "22d5da9d9a812b02eb5acd643112a6b050b5d63c", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/ProgramStageInstanceSupplierTest.java b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/ProgramStageInstanceSupplierTest.java\nindex 5051523fc0..212bec00b6 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/ProgramStageInstanceSupplierTest.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/ProgramStageInstanceSupplierTest.java\n", "chunk": "@@ -43,36 +42,40 @@ import org.hisp.dhis.dxf2.common.ImportOptions;\n import org.hisp.dhis.dxf2.events.event.Event;\n import org.hisp.dhis.event.EventStatus;\n import org.hisp.dhis.program.ProgramStageInstance;\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoSettings;\n+import org.mockito.quality.Strictness;\n \n import com.fasterxml.jackson.databind.json.JsonMapper;\n-import org.mockito.Mock;\n \n /**\n  * @author Luciano Fiandesio\n  */\n-public class ProgramStageInstanceSupplierTest extends AbstractSupplierTest<ProgramStageInstance>\n+@MockitoSettings( strictness = Strictness.LENIENT )\n+class ProgramStageInstanceSupplierTest extends AbstractSupplierTest<ProgramStageInstance>\n {\n+\n     private ProgramStageInstanceSupplier subject;\n \n     @Mock\n     private ProgramSupplier programSupplier;\n \n-    @Before\n-    public void setUp()\n+    @BeforeEach\n+    void setUp()\n     {\n         JsonMapper mapper = new JsonMapper();\n         this.subject = new ProgramStageInstanceSupplier( jdbcTemplate, mapper, programSupplier );\n     }\n \n     @Test\n-    public void handleNullEvents()\n+    void handleNullEvents()\n     {\n         assertNotNull( subject.get( ImportOptions.getDefaultImportOptions(), null ) );\n     }\n \n-    @Override\n+    @Test\n     public void verifySupplier()\n         throws SQLException\n     {\n", "next_change": {"commit": "9a152ab35b10a25818b1d1e250d2fc96119e2e17", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/ProgramStageInstanceSupplierTest.java b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/ProgramStageInstanceSupplierTest.java\nindex 212bec00b6..4089952054 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/ProgramStageInstanceSupplierTest.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/ProgramStageInstanceSupplierTest.java\n", "chunk": "@@ -76,7 +76,7 @@ class ProgramStageInstanceSupplierTest extends AbstractSupplierTest<ProgramStage\n     }\n \n     @Test\n-    public void verifySupplier()\n+    void verifySupplier()\n         throws SQLException\n     {\n         // mock resultset data\n", "next_change": {"commit": "959c60d4f597187d0df2160fbbb675e5c4196e5c", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/ProgramStageInstanceSupplierTest.java b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/EventSupplierTest.java\nsimilarity index 89%\nrename from dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/ProgramStageInstanceSupplierTest.java\nrename to dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/EventSupplierTest.java\nindex 4089952054..8ba53bb525 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/ProgramStageInstanceSupplierTest.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/EventSupplierTest.java\n", "chunk": "@@ -85,14 +84,14 @@ class ProgramStageInstanceSupplierTest extends AbstractSupplierTest<ProgramStage\n         when( mockResultSet.getString( \"status\" ) ).thenReturn( \"ACTIVE\" );\n         when( mockResultSet.getBoolean( \"deleted\" ) ).thenReturn( false );\n         // create event to import\n-        Event event = new Event();\n+        org.hisp.dhis.dxf2.events.event.Event event = new org.hisp.dhis.dxf2.events.event.Event();\n         event.setUid( CodeGenerator.generateUid() );\n         event.setEnrollment( \"abcded\" );\n         // mock resultset extraction\n         mockResultSetExtractor( mockResultSet );\n-        Map<String, ProgramStageInstance> map = subject.get( ImportOptions.getDefaultImportOptions(),\n+        Map<String, Event> map = subject.get( ImportOptions.getDefaultImportOptions(),\n             Collections.singletonList( event ) );\n-        ProgramStageInstance programStageInstance = map.get( \"abcded\" );\n+        Event programStageInstance = map.get( \"abcded\" );\n         assertThat( programStageInstance, is( notNullValue() ) );\n         assertThat( programStageInstance.getId(), is( 100L ) );\n         assertThat( programStageInstance.getUid(), is( \"abcded\" ) );\n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "message": "Merge commit", "committedDate": null}, {"oid": "c9aa7729514346e42a6f1957d20bf1f1ad4641d0", "committedDate": "2020-10-28 11:27:13 +0100", "message": "chore: remove junit and hamcrest related warnings (#6504)"}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "22d5da9d9a812b02eb5acd643112a6b050b5d63c", "committedDate": "2021-12-16 13:19:38 +0100", "message": "chore: migrate tests to JUnit 5 (#9467)"}, {"oid": "9a152ab35b10a25818b1d1e250d2fc96119e2e17", "committedDate": "2021-12-17 10:03:58 +0100", "message": "chore: reduce visibility of test classes/methods (#9496)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "959c60d4f597187d0df2160fbbb675e5c4196e5c", "committedDate": "2023-04-27 16:46:18 +0200", "message": "chore: rename ProgramStageInstance to Event (#13731)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY0NDk1Nw==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r461644957", "body": "```suggestion\r\n            convertToMap( dataElementMap ), programStageInstanceA, false );\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        convertToMap(dataElementMap), programStageInstanceA, false );\n          \n          \n            \n                        convertToMap( dataElementMap ), programStageInstanceA, false );", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            convertToMap(dataElementMap), programStageInstanceA, <span class=\"pl-c1\">false</span> );</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            convertToMap(<span class=\"x x-first x-last\"> </span>dataElementMap<span class=\"x x-first x-last\"> </span>), programStageInstanceA, <span class=\"pl-c1\">false</span> );</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "stian-sandvold", "createdAt": "2020-07-28T14:52:03Z", "path": "dhis-2/dhis-services/dhis-service-core/src/test/java/org/hisp/dhis/program/ProgramStageInstanceServiceTest.java", "diffHunk": "@@ -462,7 +459,7 @@ public void testEventDataValuesUpdateAndDeletion()\n \n         //Update PSI: create 0, update 3, delete 1\n         programStageInstanceService.auditDataValuesChangesAndHandleFileDataValues( Collections.emptySet(), updatedEventDataValues, Collections.singleton( eventDataValueD ),\n-            dataElementMap, programStageInstanceA, false );\n+            convertToMap(dataElementMap), programStageInstanceA, false );", "originalCommit": "dc20b8a9249359bcdd1f612b1852f728ef63b7ab", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d0687a6c7c9e1c4dd64c4dc669bb80ae6e8c8c8b", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-core/src/test/java/org/hisp/dhis/program/ProgramStageInstanceServiceTest.java b/dhis-2/dhis-services/dhis-service-core/src/test/java/org/hisp/dhis/program/ProgramStageInstanceServiceTest.java\nindex 697274fd6e..065ec5921d 100644\n--- a/dhis-2/dhis-services/dhis-service-core/src/test/java/org/hisp/dhis/program/ProgramStageInstanceServiceTest.java\n+++ b/dhis-2/dhis-services/dhis-service-core/src/test/java/org/hisp/dhis/program/ProgramStageInstanceServiceTest.java\n", "chunk": "@@ -459,7 +459,7 @@ public class ProgramStageInstanceServiceTest\n \n         //Update PSI: create 0, update 3, delete 1\n         programStageInstanceService.auditDataValuesChangesAndHandleFileDataValues( Collections.emptySet(), updatedEventDataValues, Collections.singleton( eventDataValueD ),\n-            convertToMap(dataElementMap), programStageInstanceA, false );\n+            convertToMap( dataElementMap ), programStageInstanceA, false );\n         programStageInstanceService.updateProgramStageInstance( programStageInstanceA );\n \n         //Check that there are 3 EventDataValues\n", "next_change": {"commit": "d360652a896bee650a842567e26cd1e62145cccb", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-core/src/test/java/org/hisp/dhis/program/ProgramStageInstanceServiceTest.java b/dhis-2/dhis-services/dhis-service-core/src/test/java/org/hisp/dhis/program/ProgramStageInstanceServiceTest.java\nindex 065ec5921d..88c8577a24 100644\n--- a/dhis-2/dhis-services/dhis-service-core/src/test/java/org/hisp/dhis/program/ProgramStageInstanceServiceTest.java\n+++ b/dhis-2/dhis-services/dhis-service-core/src/test/java/org/hisp/dhis/program/ProgramStageInstanceServiceTest.java\n", "chunk": "@@ -459,7 +462,7 @@ public class ProgramStageInstanceServiceTest\n \n         //Update PSI: create 0, update 3, delete 1\n         programStageInstanceService.auditDataValuesChangesAndHandleFileDataValues( Collections.emptySet(), updatedEventDataValues, Collections.singleton( eventDataValueD ),\n-            convertToMap( dataElementMap ), programStageInstanceA, false );\n+            convertToMap(dataElementMap), programStageInstanceA, false );\n         programStageInstanceService.updateProgramStageInstance( programStageInstanceA );\n \n         //Check that there are 3 EventDataValues\n", "next_change": {"commit": "5a102a5c179d008a301b96f632b00b634b1300eb", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-core/src/test/java/org/hisp/dhis/program/ProgramStageInstanceServiceTest.java b/dhis-2/dhis-services/dhis-service-core/src/test/java/org/hisp/dhis/program/ProgramStageInstanceServiceTest.java\nindex 88c8577a24..065ec5921d 100644\n--- a/dhis-2/dhis-services/dhis-service-core/src/test/java/org/hisp/dhis/program/ProgramStageInstanceServiceTest.java\n+++ b/dhis-2/dhis-services/dhis-service-core/src/test/java/org/hisp/dhis/program/ProgramStageInstanceServiceTest.java\n", "chunk": "@@ -462,7 +459,7 @@ public class ProgramStageInstanceServiceTest\n \n         //Update PSI: create 0, update 3, delete 1\n         programStageInstanceService.auditDataValuesChangesAndHandleFileDataValues( Collections.emptySet(), updatedEventDataValues, Collections.singleton( eventDataValueD ),\n-            convertToMap(dataElementMap), programStageInstanceA, false );\n+            convertToMap( dataElementMap ), programStageInstanceA, false );\n         programStageInstanceService.updateProgramStageInstance( programStageInstanceA );\n \n         //Check that there are 3 EventDataValues\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-core/src/test/java/org/hisp/dhis/program/ProgramStageInstanceServiceTest.java b/dhis-2/dhis-services/dhis-service-core/src/test/java/org/hisp/dhis/program/ProgramStageInstanceServiceTest.java\nindex 697274fd6e..065ec5921d 100644\n--- a/dhis-2/dhis-services/dhis-service-core/src/test/java/org/hisp/dhis/program/ProgramStageInstanceServiceTest.java\n+++ b/dhis-2/dhis-services/dhis-service-core/src/test/java/org/hisp/dhis/program/ProgramStageInstanceServiceTest.java\n", "chunk": "@@ -459,7 +459,7 @@ public class ProgramStageInstanceServiceTest\n \n         //Update PSI: create 0, update 3, delete 1\n         programStageInstanceService.auditDataValuesChangesAndHandleFileDataValues( Collections.emptySet(), updatedEventDataValues, Collections.singleton( eventDataValueD ),\n-            convertToMap(dataElementMap), programStageInstanceA, false );\n+            convertToMap( dataElementMap ), programStageInstanceA, false );\n         programStageInstanceService.updateProgramStageInstance( programStageInstanceA );\n \n         //Check that there are 3 EventDataValues\n", "next_change": {"commit": "ea76fa86409613c9766d4508d65c88ac55c413c3", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-core/src/test/java/org/hisp/dhis/program/ProgramStageInstanceServiceTest.java b/dhis-2/dhis-services/dhis-service-core/src/test/java/org/hisp/dhis/program/ProgramStageInstanceServiceTest.java\nindex 065ec5921d..0082b0b2e6 100644\n--- a/dhis-2/dhis-services/dhis-service-core/src/test/java/org/hisp/dhis/program/ProgramStageInstanceServiceTest.java\n+++ b/dhis-2/dhis-services/dhis-service-core/src/test/java/org/hisp/dhis/program/ProgramStageInstanceServiceTest.java\n", "chunk": "@@ -450,44 +456,53 @@ public class ProgramStageInstanceServiceTest\n     {\n         addInitialEventDataValues();\n \n-        //Prepare data for update and delete. eventDataValueA has to be put into updated because I am accessing DAO layer directly, so I am skipping check from DTO layer\n+        // Prepare data for update and delete. eventDataValueA has to be put\n+        // into updated because I am accessing DAO layer directly, so I am\n+        // skipping check from DTO layer\n         eventDataValueB.setValue( \"12\" );\n         eventDataValueC.setValue( \"13\" );\n         eventDataValueD.setValue( \"14\" );\n \n-        Set<EventDataValue> updatedEventDataValues = new HashSet<>( Arrays.asList( eventDataValueA, eventDataValueB, eventDataValueC ) );\n+        Set<EventDataValue> updatedEventDataValues = new HashSet<>(\n+            Arrays.asList( eventDataValueA, eventDataValueB, eventDataValueC ) );\n \n-        //Update PSI: create 0, update 3, delete 1\n-        programStageInstanceService.auditDataValuesChangesAndHandleFileDataValues( Collections.emptySet(), updatedEventDataValues, Collections.singleton( eventDataValueD ),\n+        // Update PSI: create 0, update 3, delete 1\n+        programStageInstanceService.auditDataValuesChangesAndHandleFileDataValues( Collections.emptySet(),\n+            updatedEventDataValues, Collections.singleton( eventDataValueD ),\n             convertToMap( dataElementMap ), programStageInstanceA, false );\n         programStageInstanceService.updateProgramStageInstance( programStageInstanceA );\n \n-        //Check that there are 3 EventDataValues\n-        ProgramStageInstance  tempPsiA = programStageInstanceService.getProgramStageInstance( programStageInstanceA.getUid() );\n+        // Check that there are 3 EventDataValues\n+        ProgramStageInstance tempPsiA = programStageInstanceService\n+            .getProgramStageInstance( programStageInstanceA.getUid() );\n         assertEquals( 3, tempPsiA.getEventDataValues().size() );\n \n-        //Check that there are 4 audits of CREATE type, 3 of UPDATE type and 1 of DELETE type\n-        long auditCreateCount = dataValueAuditService.countTrackedEntityDataValueAudits( dataElements, Collections.singletonList( programStageInstanceA ), AuditType.CREATE );\n+        // Check that there are 4 audits of CREATE type, 3 of UPDATE type and 1\n+        // of DELETE type\n+        long auditCreateCount = dataValueAuditService.countTrackedEntityDataValueAudits( dataElements,\n+            Collections.singletonList( programStageInstanceA ), AuditType.CREATE );\n         assertEquals( 4, auditCreateCount );\n \n-        long auditUpdateCount = dataValueAuditService.countTrackedEntityDataValueAudits( dataElements, Collections.singletonList( programStageInstanceA ), AuditType.UPDATE );\n+        long auditUpdateCount = dataValueAuditService.countTrackedEntityDataValueAudits( dataElements,\n+            Collections.singletonList( programStageInstanceA ), AuditType.UPDATE );\n         assertEquals( 3, auditUpdateCount );\n \n-        long auditDeleteCount = dataValueAuditService.countTrackedEntityDataValueAudits( dataElements, Collections.singletonList( programStageInstanceA ), AuditType.DELETE );\n+        long auditDeleteCount = dataValueAuditService.countTrackedEntityDataValueAudits( dataElements,\n+            Collections.singletonList( programStageInstanceA ), AuditType.DELETE );\n         assertEquals( 1, auditDeleteCount );\n \n-        //Fetch value of the EventDataValueB and compare that it is correct\n+        // Fetch value of the EventDataValueB and compare that it is correct\n         String eventDataValueBValue = tempPsiA.getEventDataValues().stream()\n-            .filter( dv -> dv.getDataElement().equals( dataElementB.getUid() ))\n+            .filter( dv -> dv.getDataElement().equals( dataElementB.getUid() ) )\n             .findFirst()\n             .get()\n             .getValue();\n \n         assertEquals( \"12\", eventDataValueBValue );\n \n-        //Fetch value of the EventDataValueC and compare that it is correct\n+        // Fetch value of the EventDataValueC and compare that it is correct\n         String eventDataValueCValue = tempPsiA.getEventDataValues().stream()\n-            .filter( dv -> dv.getDataElement().equals( dataElementC.getUid() ))\n+            .filter( dv -> dv.getDataElement().equals( dataElementC.getUid() ) )\n             .findFirst()\n             .get()\n             .getValue();\n", "next_change": {"commit": "22d5da9d9a812b02eb5acd643112a6b050b5d63c", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-core/src/test/java/org/hisp/dhis/program/ProgramStageInstanceServiceTest.java b/dhis-2/dhis-services/dhis-service-core/src/test/java/org/hisp/dhis/program/ProgramStageInstanceServiceTest.java\nindex 0082b0b2e6..e7f8efad9c 100644\n--- a/dhis-2/dhis-services/dhis-service-core/src/test/java/org/hisp/dhis/program/ProgramStageInstanceServiceTest.java\n+++ b/dhis-2/dhis-services/dhis-service-core/src/test/java/org/hisp/dhis/program/ProgramStageInstanceServiceTest.java\n", "chunk": "@@ -171,401 +173,301 @@ public class ProgramStageInstanceServiceTest\n     public void setUpTest()\n     {\n         mockFormat = new MockI18nFormat();\n-\n         organisationUnitA = createOrganisationUnit( 'A' );\n         organisationUnitService.addOrganisationUnit( organisationUnitA );\n-\n         organisationUnitB = createOrganisationUnit( 'B' );\n         organisationUnitService.addOrganisationUnit( organisationUnitB );\n-\n         entityInstanceA = createTrackedEntityInstance( organisationUnitA );\n         entityInstanceService.addTrackedEntityInstance( entityInstanceA );\n-\n         entityInstanceB = createTrackedEntityInstance( organisationUnitB );\n         entityInstanceService.addTrackedEntityInstance( entityInstanceB );\n-\n         TrackedEntityAttribute attribute = createTrackedEntityAttribute( 'A' );\n         attribute.setValueType( ValueType.PHONE_NUMBER );\n         attributeService.addTrackedEntityAttribute( attribute );\n-\n         TrackedEntityAttributeValue attributeValue = createTrackedEntityAttributeValue( 'A', entityInstanceA,\n             attribute );\n         attributeValue.setValue( \"123456789\" );\n         attributeValueService.addTrackedEntityAttributeValue( attributeValue );\n-\n         entityInstanceA.getTrackedEntityAttributeValues().add( attributeValue );\n         entityInstanceService.updateTrackedEntityInstance( entityInstanceA );\n-\n         /**\n          * Program A\n          */\n         programA = createProgram( 'A', new HashSet<>(), organisationUnitA );\n         programService.addProgram( programA );\n-\n         stageA = createProgramStage( 'A', 0 );\n         stageA.setProgram( programA );\n         stageA.setSortOrder( 1 );\n-\n         programStageService.saveProgramStage( stageA );\n-\n         stageB = new ProgramStage( \"B\", programA );\n         stageB.setSortOrder( 2 );\n-\n         programStageService.saveProgramStage( stageB );\n-\n         Set<ProgramStage> programStages = new HashSet<>();\n         programStages.add( stageA );\n         programStages.add( stageB );\n         programA.setProgramStages( programStages );\n         programService.updateProgram( programA );\n-\n         dataElementA = createDataElement( 'A' );\n         dataElementB = createDataElement( 'B' );\n         dataElementC = createDataElement( 'C' );\n         dataElementD = createDataElement( 'D' );\n-\n         dataElementService.addDataElement( dataElementA );\n         dataElementService.addDataElement( dataElementB );\n         dataElementService.addDataElement( dataElementC );\n         dataElementService.addDataElement( dataElementD );\n-\n         stageDataElementA = new ProgramStageDataElement( stageA, dataElementA, false, 1 );\n         stageDataElementB = new ProgramStageDataElement( stageA, dataElementB, false, 2 );\n         stageDataElementC = new ProgramStageDataElement( stageB, dataElementA, false, 1 );\n         stageDataElementD = new ProgramStageDataElement( stageB, dataElementB, false, 2 );\n-\n         programStageDataElementService.addProgramStageDataElement( stageDataElementA );\n         programStageDataElementService.addProgramStageDataElement( stageDataElementB );\n         programStageDataElementService.addProgramStageDataElement( stageDataElementC );\n         programStageDataElementService.addProgramStageDataElement( stageDataElementD );\n-\n         /*\n          * Program B\n          */\n-\n         Program programB = createProgram( 'B', new HashSet<>(), organisationUnitB );\n         programService.addProgram( programB );\n-\n         stageC = new ProgramStage( \"C\", programB );\n         stageC.setSortOrder( 1 );\n         programStageService.saveProgramStage( stageC );\n-\n         stageD = new ProgramStage( \"D\", programB );\n         stageB.setSortOrder( 2 );\n         stageC.setRepeatable( true );\n         programStageService.saveProgramStage( stageD );\n-\n         programStages = new HashSet<>();\n         programStages.add( stageC );\n         programStages.add( stageD );\n         programB.setProgramStages( programStages );\n         programService.updateProgram( programB );\n-\n         /**\n          * Program Instance and Program Stage Instance\n          */\n-\n         DateTime testDate1 = DateTime.now();\n         testDate1.withTimeAtStartOfDay();\n         testDate1 = testDate1.minusDays( 70 );\n         incidenDate = testDate1.toDate();\n-\n         DateTime testDate2 = DateTime.now();\n         testDate2.withTimeAtStartOfDay();\n         enrollmentDate = testDate2.toDate();\n-\n         programInstanceA = new ProgramInstance( enrollmentDate, incidenDate, entityInstanceA, programA );\n         programInstanceA.setUid( \"UID-PIA\" );\n         programInstanceService.addProgramInstance( programInstanceA );\n-\n         programInstanceB = new ProgramInstance( enrollmentDate, incidenDate, entityInstanceB, programB );\n         programInstanceService.addProgramInstance( programInstanceB );\n-\n         programStageInstanceA = new ProgramStageInstance( programInstanceA, stageA );\n         programStageInstanceA.setDueDate( enrollmentDate );\n         programStageInstanceA.setUid( \"UID-A\" );\n-\n         programStageInstanceB = new ProgramStageInstance( programInstanceA, stageB );\n         programStageInstanceB.setDueDate( enrollmentDate );\n         programStageInstanceB.setUid( \"UID-B\" );\n-\n         programStageInstanceC = new ProgramStageInstance( programInstanceB, stageC );\n         programStageInstanceC.setDueDate( enrollmentDate );\n         programStageInstanceC.setUid( \"UID-C\" );\n-\n         programStageInstanceD1 = new ProgramStageInstance( programInstanceB, stageD );\n         programStageInstanceD1.setDueDate( enrollmentDate );\n         programStageInstanceD1.setUid( \"UID-D1\" );\n-\n         programStageInstanceD2 = new ProgramStageInstance( programInstanceB, stageD );\n         programStageInstanceD2.setDueDate( enrollmentDate );\n         programStageInstanceD2.setUid( \"UID-D2\" );\n-\n         /*\n          * Prepare data for EventDataValues manipulation tests\n          */\n-\n         programStageInstanceService.addProgramStageInstance( programStageInstanceA );\n-\n         // Check that there are no EventDataValues assigned to PSI\n         ProgramStageInstance tempPsiA = programStageInstanceService\n             .getProgramStageInstance( programStageInstanceA.getUid() );\n         assertEquals( 0, tempPsiA.getEventDataValues().size() );\n-\n         // Prepare EventDataValues to manipulate with\n         String storedBy = \"test-user\";\n         eventDataValueA = new EventDataValue( dataElementA.getUid(), \"1\", UserInfoTestHelper.testUserInfo( storedBy ) );\n         eventDataValueB = new EventDataValue( dataElementB.getUid(), \"2\", UserInfoTestHelper.testUserInfo( storedBy ) );\n         eventDataValueC = new EventDataValue( dataElementC.getUid(), \"3\", UserInfoTestHelper.testUserInfo( storedBy ) );\n         eventDataValueD = new EventDataValue( dataElementD.getUid(), \"4\", UserInfoTestHelper.testUserInfo( storedBy ) );\n-\n         dataElementMap.put( dataElementA.getUid(), dataElementA );\n         dataElementMap.put( dataElementB.getUid(), dataElementB );\n         dataElementMap.put( dataElementC.getUid(), dataElementC );\n         dataElementMap.put( dataElementD.getUid(), dataElementD );\n-\n-        dataElements = new ArrayList<>( dataElementMap.getAll() );\n+        dataElements = dataElementMap.getAll().collect( toList() );\n     }\n \n     @Test\n-    public void testAddProgramStageInstance()\n+    void testAddProgramStageInstance()\n     {\n         long idA = programStageInstanceService.addProgramStageInstance( programStageInstanceA );\n         long idB = programStageInstanceService.addProgramStageInstance( programStageInstanceB );\n-\n         assertNotNull( programStageInstanceService.getProgramStageInstance( idA ) );\n         assertNotNull( programStageInstanceService.getProgramStageInstance( idB ) );\n     }\n \n     @Test\n-    public void testDeleteProgramStageInstance()\n+    void testDeleteProgramStageInstance()\n     {\n         long idA = programStageInstanceService.addProgramStageInstance( programStageInstanceA );\n         long idB = programStageInstanceService.addProgramStageInstance( programStageInstanceB );\n-\n         assertNotNull( programStageInstanceService.getProgramStageInstance( idA ) );\n         assertNotNull( programStageInstanceService.getProgramStageInstance( idB ) );\n-\n         programStageInstanceService.deleteProgramStageInstance( programStageInstanceA );\n-\n         assertNull( programStageInstanceService.getProgramStageInstance( idA ) );\n         assertNotNull( programStageInstanceService.getProgramStageInstance( idB ) );\n-\n         programStageInstanceService.deleteProgramStageInstance( programStageInstanceB );\n-\n         assertNull( programStageInstanceService.getProgramStageInstance( idA ) );\n         assertNull( programStageInstanceService.getProgramStageInstance( idB ) );\n     }\n \n     @Test\n-    public void testUpdateProgramStageInstance()\n+    void testUpdateProgramStageInstance()\n     {\n         long idA = programStageInstanceService.addProgramStageInstance( programStageInstanceA );\n-\n         assertNotNull( programStageInstanceService.getProgramStageInstance( idA ) );\n-\n         programStageInstanceA.setName( \"B\" );\n         programStageInstanceService.updateProgramStageInstance( programStageInstanceA );\n-\n         assertEquals( \"B\", programStageInstanceService.getProgramStageInstance( idA ).getName() );\n     }\n \n     @Test\n-    public void testGetProgramStageInstanceById()\n+    void testGetProgramStageInstanceById()\n     {\n         long idA = programStageInstanceService.addProgramStageInstance( programStageInstanceA );\n         long idB = programStageInstanceService.addProgramStageInstance( programStageInstanceB );\n-\n         assertEquals( programStageInstanceA, programStageInstanceService.getProgramStageInstance( idA ) );\n         assertEquals( programStageInstanceB, programStageInstanceService.getProgramStageInstance( idB ) );\n     }\n \n     @Test\n-    public void testGetProgramStageInstanceByUid()\n+    void testGetProgramStageInstanceByUid()\n     {\n         long idA = programStageInstanceService.addProgramStageInstance( programStageInstanceA );\n         long idB = programStageInstanceService.addProgramStageInstance( programStageInstanceB );\n-\n         assertEquals( programStageInstanceA, programStageInstanceService.getProgramStageInstance( idA ) );\n         assertEquals( programStageInstanceB, programStageInstanceService.getProgramStageInstance( idB ) );\n-\n         assertEquals( programStageInstanceA, programStageInstanceService.getProgramStageInstance( \"UID-A\" ) );\n         assertEquals( programStageInstanceB, programStageInstanceService.getProgramStageInstance( \"UID-B\" ) );\n     }\n \n     @Test\n-    public void testGetProgramStageInstanceByProgramInstanceStage()\n+    void testGetProgramStageInstanceByProgramInstanceStage()\n     {\n         programStageInstanceService.addProgramStageInstance( programStageInstanceA );\n         programStageInstanceService.addProgramStageInstance( programStageInstanceB );\n-\n-        ProgramStageInstance programStageInstance = programStageInstanceService.getProgramStageInstance(\n-            programInstanceA, stageA );\n+        ProgramStageInstance programStageInstance = programStageInstanceService\n+            .getProgramStageInstance( programInstanceA, stageA );\n         assertEquals( programStageInstanceA, programStageInstance );\n-\n         programStageInstance = programStageInstanceService.getProgramStageInstance( programInstanceA, stageB );\n         assertEquals( programStageInstanceB, programStageInstance );\n     }\n \n     @Test\n-    public void testCompleteProgramStageInstance()\n+    void testCompleteProgramStageInstance()\n     {\n         long idA = programStageInstanceService.addProgramStageInstance( programStageInstanceA );\n-\n         programStageInstanceService.completeProgramStageInstance( programStageInstanceA, true, mockFormat, null );\n-\n         assertEquals( true, programStageInstanceService.getProgramStageInstance( idA ).isCompleted() );\n     }\n \n     @Test\n-    public void testEventDataValuesSave()\n+    void testEventDataValuesSave()\n     {\n         addInitialEventDataValues();\n-\n         // Check that there are 4 EventDataValues\n         ProgramStageInstance tempPsiA = programStageInstanceService\n             .getProgramStageInstance( programStageInstanceA.getUid() );\n         assertEquals( 4, tempPsiA.getEventDataValues().size() );\n-\n         // Check that there are 4 audits of CREATE type\n         long auditCreateCount = dataValueAuditService.countTrackedEntityDataValueAudits( dataElements,\n             Collections.singletonList( programStageInstanceA ), AuditType.CREATE );\n         assertEquals( 4, auditCreateCount );\n-\n         // Fetch value of the EventDataValueB and compare that it is correct\n         String eventDataValueBValue = tempPsiA.getEventDataValues().stream()\n-            .filter( dv -> dv.getDataElement().equals( dataElementB.getUid() ) )\n-            .findFirst()\n-            .get()\n-            .getValue();\n-\n+            .filter( dv -> dv.getDataElement().equals( dataElementB.getUid() ) ).findFirst().get().getValue();\n         assertEquals( \"2\", eventDataValueBValue );\n-\n         // Fetch value of the EventDataValueC and compare that it is correct\n         String eventDataValueCValue = tempPsiA.getEventDataValues().stream()\n-            .filter( dv -> dv.getDataElement().equals( dataElementC.getUid() ) )\n-            .findFirst()\n-            .get()\n-            .getValue();\n-\n+            .filter( dv -> dv.getDataElement().equals( dataElementC.getUid() ) ).findFirst().get().getValue();\n         assertEquals( \"3\", eventDataValueCValue );\n     }\n \n     @Test\n-    public void testEventDataValuesUpdateAndDeletion()\n+    void testEventDataValuesUpdateAndDeletion()\n     {\n         addInitialEventDataValues();\n-\n         // Prepare data for update and delete. eventDataValueA has to be put\n         // into updated because I am accessing DAO layer directly, so I am\n         // skipping check from DTO layer\n         eventDataValueB.setValue( \"12\" );\n         eventDataValueC.setValue( \"13\" );\n         eventDataValueD.setValue( \"14\" );\n-\n         Set<EventDataValue> updatedEventDataValues = new HashSet<>(\n             Arrays.asList( eventDataValueA, eventDataValueB, eventDataValueC ) );\n-\n         // Update PSI: create 0, update 3, delete 1\n         programStageInstanceService.auditDataValuesChangesAndHandleFileDataValues( Collections.emptySet(),\n-            updatedEventDataValues, Collections.singleton( eventDataValueD ),\n-            convertToMap( dataElementMap ), programStageInstanceA, false );\n+            updatedEventDataValues, Collections.singleton( eventDataValueD ), convertToMap( dataElementMap ),\n+            programStageInstanceA, false );\n         programStageInstanceService.updateProgramStageInstance( programStageInstanceA );\n-\n         // Check that there are 3 EventDataValues\n         ProgramStageInstance tempPsiA = programStageInstanceService\n             .getProgramStageInstance( programStageInstanceA.getUid() );\n         assertEquals( 3, tempPsiA.getEventDataValues().size() );\n-\n         // Check that there are 4 audits of CREATE type, 3 of UPDATE type and 1\n         // of DELETE type\n         long auditCreateCount = dataValueAuditService.countTrackedEntityDataValueAudits( dataElements,\n             Collections.singletonList( programStageInstanceA ), AuditType.CREATE );\n         assertEquals( 4, auditCreateCount );\n-\n         long auditUpdateCount = dataValueAuditService.countTrackedEntityDataValueAudits( dataElements,\n             Collections.singletonList( programStageInstanceA ), AuditType.UPDATE );\n         assertEquals( 3, auditUpdateCount );\n-\n         long auditDeleteCount = dataValueAuditService.countTrackedEntityDataValueAudits( dataElements,\n             Collections.singletonList( programStageInstanceA ), AuditType.DELETE );\n         assertEquals( 1, auditDeleteCount );\n-\n         // Fetch value of the EventDataValueB and compare that it is correct\n         String eventDataValueBValue = tempPsiA.getEventDataValues().stream()\n-            .filter( dv -> dv.getDataElement().equals( dataElementB.getUid() ) )\n-            .findFirst()\n-            .get()\n-            .getValue();\n-\n+            .filter( dv -> dv.getDataElement().equals( dataElementB.getUid() ) ).findFirst().get().getValue();\n         assertEquals( \"12\", eventDataValueBValue );\n-\n         // Fetch value of the EventDataValueC and compare that it is correct\n         String eventDataValueCValue = tempPsiA.getEventDataValues().stream()\n-            .filter( dv -> dv.getDataElement().equals( dataElementC.getUid() ) )\n-            .findFirst()\n-            .get()\n-            .getValue();\n-\n+            .filter( dv -> dv.getDataElement().equals( dataElementC.getUid() ) ).findFirst().get().getValue();\n         assertEquals( \"13\", eventDataValueCValue );\n     }\n \n     @Test\n-    public void testEventDataValuesSingleValueUpdate()\n+    void testEventDataValuesSingleValueUpdate()\n     {\n         addInitialEventDataValues();\n-\n         // Update 1 EventDataVaue and run a \"SingleValue\" update and check that\n         // others, not mentioned, EventDataValues are not touched\n         eventDataValueB.setValue( \"22\" );\n-\n         programStageInstanceService.auditDataValuesChangesAndHandleFileDataValues( Collections.emptySet(),\n-            Collections.singleton( eventDataValueB ), Collections.emptySet(),\n-            convertToMap( dataElementMap ), programStageInstanceA, true );\n+            Collections.singleton( eventDataValueB ), Collections.emptySet(), convertToMap( dataElementMap ),\n+            programStageInstanceA, true );\n         programStageInstanceService.updateProgramStageInstance( programStageInstanceA );\n-\n         // Check that there are 4 EventDataValues\n         ProgramStageInstance tempPsiA = programStageInstanceService\n             .getProgramStageInstance( programStageInstanceA.getUid() );\n         assertEquals( 4, tempPsiA.getEventDataValues().size() );\n-\n         // Check that there are 4 audits of CREATE type, 3 of UPDATE type and 1\n         // of DELETE type\n         long auditCreateCount = dataValueAuditService.countTrackedEntityDataValueAudits( dataElements,\n             Collections.singletonList( programStageInstanceA ), AuditType.CREATE );\n         assertEquals( 4, auditCreateCount );\n-\n         long auditUpdateCount = dataValueAuditService.countTrackedEntityDataValueAudits( dataElements,\n             Collections.singletonList( programStageInstanceA ), AuditType.UPDATE );\n         assertEquals( 1, auditUpdateCount );\n-\n         long auditDeleteCount = dataValueAuditService.countTrackedEntityDataValueAudits( dataElements,\n             Collections.singletonList( programStageInstanceA ), AuditType.DELETE );\n         assertEquals( 0, auditDeleteCount );\n-\n         // Fetch value of the EventDataValueB and compare that it is correct\n         String eventDataValueBValue = tempPsiA.getEventDataValues().stream()\n-            .filter( dv -> dv.getDataElement().equals( dataElementB.getUid() ) )\n-            .findFirst()\n-            .get()\n-            .getValue();\n-\n+            .filter( dv -> dv.getDataElement().equals( dataElementB.getUid() ) ).findFirst().get().getValue();\n         assertEquals( \"22\", eventDataValueBValue );\n-\n         // Fetch value of the EventDataValueC and compare that it is correct\n         String eventDataValueCValue = tempPsiA.getEventDataValues().stream()\n-            .filter( dv -> dv.getDataElement().equals( dataElementC.getUid() ) )\n-            .findFirst()\n-            .get()\n-            .getValue();\n-\n+            .filter( dv -> dv.getDataElement().equals( dataElementC.getUid() ) ).findFirst().get().getValue();\n         assertEquals( \"3\", eventDataValueCValue );\n     }\n \n     private Map<String, DataElement> convertToMap( Cache<DataElement> dataElementMap )\n     {\n-        return dataElementMap.getAll().stream()\n-            .collect( Collectors.toMap( DataElement::getUid, d -> d ) );\n+        return dataElementMap.getAll().collect( Collectors.toMap( DataElement::getUid, d -> d ) );\n     }\n \n     private void addInitialEventDataValues()\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "message": "Merge commit", "committedDate": null}, {"oid": "13cd21d76507450be96b06e13823b24cf357be04", "committedDate": "2020-10-30 09:38:34 +0100", "message": "feat: DHIS2-8911 adding LastUpdatedBy and CreatedBy user informations in events (#6521)"}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "a7e2cc3b36bc0b644340cfbb26f44188dc5b13b8", "committedDate": "2021-07-12 20:42:04 +0700", "message": "chore: Cache#getAll as Stream (#8401)"}, {"oid": "22d5da9d9a812b02eb5acd643112a6b050b5d63c", "committedDate": "2021-12-16 13:19:38 +0100", "message": "chore: migrate tests to JUnit 5 (#9467)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "2c0aa62cc8f940e7629f081284bb01dac8c9faee", "committedDate": "2022-06-21 19:38:49 +0200", "message": "feat: Add filters to TEDV audit endpoint [DHIS2-13421] (#11125)"}, {"oid": "82d90694d048b0a3e9d275d5f64e7a5881da7c05", "committedDate": "2022-07-01 09:37:06 +0200", "message": "chore: Handle H2 tests for core module [TECH-1208] (#11195)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY0NjA5Mg==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r461646092", "body": "```suggestion\r\n                    InterruptibleBatchPreparedStatementSetter ipss = ( pss instanceof InterruptibleBatchPreparedStatementSetter\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                InterruptibleBatchPreparedStatementSetter ipss = (pss instanceof InterruptibleBatchPreparedStatementSetter\n          \n          \n            \n                                InterruptibleBatchPreparedStatementSetter ipss = ( pss instanceof InterruptibleBatchPreparedStatementSetter", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                    <span class=\"pl-smi\">InterruptibleBatchPreparedStatementSetter</span> ipss <span class=\"pl-k\">=</span> (pss <span class=\"pl-k\">instanceof</span> <span class=\"pl-smi\">InterruptibleBatchPreparedStatementSetter</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                    <span class=\"pl-smi\">InterruptibleBatchPreparedStatementSetter</span> ipss <span class=\"pl-k\">=</span> (<span class=\"x x-first x-last\"> </span>pss <span class=\"pl-k\">instanceof</span> <span class=\"pl-smi\">InterruptibleBatchPreparedStatementSetter</span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "stian-sandvold", "createdAt": "2020-07-28T14:53:32Z", "path": "dhis-2/dhis-support/dhis-support-jdbc/src/main/java/org/hisp/dhis/jdbc/JdbcUtils.java", "diffHunk": "@@ -0,0 +1,140 @@\n+package org.hisp.dhis.jdbc;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import org.springframework.jdbc.core.ColumnMapRowMapper;\n+import org.springframework.jdbc.core.InterruptibleBatchPreparedStatementSetter;\n+import org.springframework.jdbc.core.JdbcTemplate;\n+import org.springframework.jdbc.core.ParameterDisposer;\n+import org.springframework.jdbc.core.PreparedStatementCallback;\n+import org.springframework.jdbc.core.RowMapperResultSetExtractor;\n+import org.springframework.jdbc.support.GeneratedKeyHolder;\n+import org.springframework.jdbc.support.KeyHolder;\n+\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * JDBC Utility methods\n+ */\n+public class JdbcUtils\n+{\n+    /**\n+     * Executes a JDBC batch update using the provided {@see JdbcTemplate}\n+     *\n+     * @param jdbcTemplate a JdbcTemplate\n+     * @param sql the SQL string to be executed\n+     * @param pss a {@see BatchPreparedStatementSetterWithKeyHolder} containing the binding information\n+     *\n+     * @return a int, where each element corresponds to an executed statement\n+     */\n+    public static <T> int[] batchUpdateWithKeyHolder( JdbcTemplate jdbcTemplate, final String sql,\n+        final BatchPreparedStatementSetterWithKeyHolder<T> pss )\n+    {\n+        return jdbcTemplate.execute( con -> con.prepareStatement( sql, Statement.RETURN_GENERATED_KEYS ),\n+            (PreparedStatementCallback<int[]>) ps -> {\n+                try\n+                {\n+                    int batchSize = pss.getBatchSize();\n+                    InterruptibleBatchPreparedStatementSetter ipss = (pss instanceof InterruptibleBatchPreparedStatementSetter", "originalCommit": "dc20b8a9249359bcdd1f612b1852f728ef63b7ab", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d0687a6c7c9e1c4dd64c4dc669bb80ae6e8c8c8b", "changed_code": [{"header": "diff --git a/dhis-2/dhis-support/dhis-support-jdbc/src/main/java/org/hisp/dhis/jdbc/JdbcUtils.java b/dhis-2/dhis-support/dhis-support-jdbc/src/main/java/org/hisp/dhis/jdbc/JdbcUtils.java\nindex 4e34e0299f..8a526ca6c5 100644\n--- a/dhis-2/dhis-support/dhis-support-jdbc/src/main/java/org/hisp/dhis/jdbc/JdbcUtils.java\n+++ b/dhis-2/dhis-support/dhis-support-jdbc/src/main/java/org/hisp/dhis/jdbc/JdbcUtils.java\n", "chunk": "@@ -67,9 +67,9 @@ public class JdbcUtils\n                 try\n                 {\n                     int batchSize = pss.getBatchSize();\n-                    InterruptibleBatchPreparedStatementSetter ipss = (pss instanceof InterruptibleBatchPreparedStatementSetter\n+                    InterruptibleBatchPreparedStatementSetter ipss = ( pss instanceof InterruptibleBatchPreparedStatementSetter\n                         ? (InterruptibleBatchPreparedStatementSetter) pss\n-                        : null);\n+                        : null );\n                     int[] result;\n                     KeyHolder keyHolder = new GeneratedKeyHolder();\n \n", "next_change": {"commit": "d360652a896bee650a842567e26cd1e62145cccb", "changed_code": [{"header": "diff --git a/dhis-2/dhis-support/dhis-support-jdbc/src/main/java/org/hisp/dhis/jdbc/JdbcUtils.java b/dhis-2/dhis-support/dhis-support-jdbc/src/main/java/org/hisp/dhis/jdbc/JdbcUtils.java\nindex 8a526ca6c5..4e34e0299f 100644\n--- a/dhis-2/dhis-support/dhis-support-jdbc/src/main/java/org/hisp/dhis/jdbc/JdbcUtils.java\n+++ b/dhis-2/dhis-support/dhis-support-jdbc/src/main/java/org/hisp/dhis/jdbc/JdbcUtils.java\n", "chunk": "@@ -67,9 +67,9 @@ public class JdbcUtils\n                 try\n                 {\n                     int batchSize = pss.getBatchSize();\n-                    InterruptibleBatchPreparedStatementSetter ipss = ( pss instanceof InterruptibleBatchPreparedStatementSetter\n+                    InterruptibleBatchPreparedStatementSetter ipss = (pss instanceof InterruptibleBatchPreparedStatementSetter\n                         ? (InterruptibleBatchPreparedStatementSetter) pss\n-                        : null );\n+                        : null);\n                     int[] result;\n                     KeyHolder keyHolder = new GeneratedKeyHolder();\n \n", "next_change": {"commit": "081840032b231dc76f4ed8610100c428b7200acb", "changed_code": [{"header": "diff --git a/dhis-2/dhis-support/dhis-support-jdbc/src/main/java/org/hisp/dhis/jdbc/JdbcUtils.java b/dhis-2/dhis-support/dhis-support-jdbc/src/main/java/org/hisp/dhis/jdbc/JdbcUtils.java\nindex 4e34e0299f..342109fca5 100644\n--- a/dhis-2/dhis-support/dhis-support-jdbc/src/main/java/org/hisp/dhis/jdbc/JdbcUtils.java\n+++ b/dhis-2/dhis-support/dhis-support-jdbc/src/main/java/org/hisp/dhis/jdbc/JdbcUtils.java\n", "chunk": "@@ -67,7 +67,7 @@ public class JdbcUtils\n                 try\n                 {\n                     int batchSize = pss.getBatchSize();\n-                    InterruptibleBatchPreparedStatementSetter ipss = (pss instanceof InterruptibleBatchPreparedStatementSetter\n+                    InterruptibleBatchPreparedStatementSetter ipss = ( pss instanceof InterruptibleBatchPreparedStatementSetter\n                         ? (InterruptibleBatchPreparedStatementSetter) pss\n                         : null);\n                     int[] result;\n", "next_change": {"commit": "85c947b7cdb2c98af0c8d892a8fbc9f65784abe3", "changed_code": [{"header": "diff --git a/dhis-2/dhis-support/dhis-support-jdbc/src/main/java/org/hisp/dhis/jdbc/JdbcUtils.java b/dhis-2/dhis-support/dhis-support-jdbc/src/main/java/org/hisp/dhis/jdbc/JdbcUtils.java\nindex 342109fca5..f168262802 100644\n--- a/dhis-2/dhis-support/dhis-support-jdbc/src/main/java/org/hisp/dhis/jdbc/JdbcUtils.java\n+++ b/dhis-2/dhis-support/dhis-support-jdbc/src/main/java/org/hisp/dhis/jdbc/JdbcUtils.java\n", "chunk": "@@ -69,7 +69,7 @@ public class JdbcUtils\n                     int batchSize = pss.getBatchSize();\n                     InterruptibleBatchPreparedStatementSetter ipss = ( pss instanceof InterruptibleBatchPreparedStatementSetter\n                         ? (InterruptibleBatchPreparedStatementSetter) pss\n-                        : null);\n+                        : null );\n                     int[] result;\n                     KeyHolder keyHolder = new GeneratedKeyHolder();\n \n", "next_change": null}]}}]}}]}}]}, "revised_code_in_main": {"commit": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "changed_code": [{"header": "diff --git a/dhis-2/dhis-support/dhis-support-jdbc/src/main/java/org/hisp/dhis/jdbc/JdbcUtils.java b/dhis-2/dhis-support/dhis-support-jdbc/src/main/java/org/hisp/dhis/jdbc/JdbcUtils.java\nindex 4e34e0299f..8a526ca6c5 100644\n--- a/dhis-2/dhis-support/dhis-support-jdbc/src/main/java/org/hisp/dhis/jdbc/JdbcUtils.java\n+++ b/dhis-2/dhis-support/dhis-support-jdbc/src/main/java/org/hisp/dhis/jdbc/JdbcUtils.java\n", "chunk": "@@ -67,9 +67,9 @@ public class JdbcUtils\n                 try\n                 {\n                     int batchSize = pss.getBatchSize();\n-                    InterruptibleBatchPreparedStatementSetter ipss = (pss instanceof InterruptibleBatchPreparedStatementSetter\n+                    InterruptibleBatchPreparedStatementSetter ipss = ( pss instanceof InterruptibleBatchPreparedStatementSetter\n                         ? (InterruptibleBatchPreparedStatementSetter) pss\n-                        : null);\n+                        : null );\n                     int[] result;\n                     KeyHolder keyHolder = new GeneratedKeyHolder();\n \n", "next_change": {"commit": "ea76fa86409613c9766d4508d65c88ac55c413c3", "changed_code": [{"header": "diff --git a/dhis-2/dhis-support/dhis-support-jdbc/src/main/java/org/hisp/dhis/jdbc/JdbcUtils.java b/dhis-2/dhis-support/dhis-support-jdbc/src/main/java/org/hisp/dhis/jdbc/JdbcUtils.java\nindex 8a526ca6c5..3b25c90237 100644\n--- a/dhis-2/dhis-support/dhis-support-jdbc/src/main/java/org/hisp/dhis/jdbc/JdbcUtils.java\n+++ b/dhis-2/dhis-support/dhis-support-jdbc/src/main/java/org/hisp/dhis/jdbc/JdbcUtils.java\n", "chunk": "@@ -67,9 +67,9 @@ public class JdbcUtils\n                 try\n                 {\n                     int batchSize = pss.getBatchSize();\n-                    InterruptibleBatchPreparedStatementSetter ipss = ( pss instanceof InterruptibleBatchPreparedStatementSetter\n+                    InterruptibleBatchPreparedStatementSetter ipss = (pss instanceof InterruptibleBatchPreparedStatementSetter\n                         ? (InterruptibleBatchPreparedStatementSetter) pss\n-                        : null );\n+                        : null);\n                     int[] result;\n                     KeyHolder keyHolder = new GeneratedKeyHolder();\n \n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "message": "Merge commit", "committedDate": null}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY0NjMzNQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r461646335", "body": "```suggestion\r\n                        : null );\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    : null);\n          \n          \n            \n                                    : null );", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                        <span class=\"pl-k\">:</span> <span class=\"pl-c1\">null</span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                        <span class=\"pl-k\">:</span> <span class=\"pl-c1\">null</span><span class=\"x x-first x-last\"> </span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "stian-sandvold", "createdAt": "2020-07-28T14:53:49Z", "path": "dhis-2/dhis-support/dhis-support-jdbc/src/main/java/org/hisp/dhis/jdbc/JdbcUtils.java", "diffHunk": "@@ -0,0 +1,140 @@\n+package org.hisp.dhis.jdbc;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import org.springframework.jdbc.core.ColumnMapRowMapper;\n+import org.springframework.jdbc.core.InterruptibleBatchPreparedStatementSetter;\n+import org.springframework.jdbc.core.JdbcTemplate;\n+import org.springframework.jdbc.core.ParameterDisposer;\n+import org.springframework.jdbc.core.PreparedStatementCallback;\n+import org.springframework.jdbc.core.RowMapperResultSetExtractor;\n+import org.springframework.jdbc.support.GeneratedKeyHolder;\n+import org.springframework.jdbc.support.KeyHolder;\n+\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * JDBC Utility methods\n+ */\n+public class JdbcUtils\n+{\n+    /**\n+     * Executes a JDBC batch update using the provided {@see JdbcTemplate}\n+     *\n+     * @param jdbcTemplate a JdbcTemplate\n+     * @param sql the SQL string to be executed\n+     * @param pss a {@see BatchPreparedStatementSetterWithKeyHolder} containing the binding information\n+     *\n+     * @return a int, where each element corresponds to an executed statement\n+     */\n+    public static <T> int[] batchUpdateWithKeyHolder( JdbcTemplate jdbcTemplate, final String sql,\n+        final BatchPreparedStatementSetterWithKeyHolder<T> pss )\n+    {\n+        return jdbcTemplate.execute( con -> con.prepareStatement( sql, Statement.RETURN_GENERATED_KEYS ),\n+            (PreparedStatementCallback<int[]>) ps -> {\n+                try\n+                {\n+                    int batchSize = pss.getBatchSize();\n+                    InterruptibleBatchPreparedStatementSetter ipss = (pss instanceof InterruptibleBatchPreparedStatementSetter\n+                        ? (InterruptibleBatchPreparedStatementSetter) pss\n+                        : null);", "originalCommit": "dc20b8a9249359bcdd1f612b1852f728ef63b7ab", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d0687a6c7c9e1c4dd64c4dc669bb80ae6e8c8c8b", "changed_code": [{"header": "diff --git a/dhis-2/dhis-support/dhis-support-jdbc/src/main/java/org/hisp/dhis/jdbc/JdbcUtils.java b/dhis-2/dhis-support/dhis-support-jdbc/src/main/java/org/hisp/dhis/jdbc/JdbcUtils.java\nindex 4e34e0299f..8a526ca6c5 100644\n--- a/dhis-2/dhis-support/dhis-support-jdbc/src/main/java/org/hisp/dhis/jdbc/JdbcUtils.java\n+++ b/dhis-2/dhis-support/dhis-support-jdbc/src/main/java/org/hisp/dhis/jdbc/JdbcUtils.java\n", "chunk": "@@ -67,9 +67,9 @@ public class JdbcUtils\n                 try\n                 {\n                     int batchSize = pss.getBatchSize();\n-                    InterruptibleBatchPreparedStatementSetter ipss = (pss instanceof InterruptibleBatchPreparedStatementSetter\n+                    InterruptibleBatchPreparedStatementSetter ipss = ( pss instanceof InterruptibleBatchPreparedStatementSetter\n                         ? (InterruptibleBatchPreparedStatementSetter) pss\n-                        : null);\n+                        : null );\n                     int[] result;\n                     KeyHolder keyHolder = new GeneratedKeyHolder();\n \n", "next_change": {"commit": "d360652a896bee650a842567e26cd1e62145cccb", "changed_code": [{"header": "diff --git a/dhis-2/dhis-support/dhis-support-jdbc/src/main/java/org/hisp/dhis/jdbc/JdbcUtils.java b/dhis-2/dhis-support/dhis-support-jdbc/src/main/java/org/hisp/dhis/jdbc/JdbcUtils.java\nindex 8a526ca6c5..4e34e0299f 100644\n--- a/dhis-2/dhis-support/dhis-support-jdbc/src/main/java/org/hisp/dhis/jdbc/JdbcUtils.java\n+++ b/dhis-2/dhis-support/dhis-support-jdbc/src/main/java/org/hisp/dhis/jdbc/JdbcUtils.java\n", "chunk": "@@ -67,9 +67,9 @@ public class JdbcUtils\n                 try\n                 {\n                     int batchSize = pss.getBatchSize();\n-                    InterruptibleBatchPreparedStatementSetter ipss = ( pss instanceof InterruptibleBatchPreparedStatementSetter\n+                    InterruptibleBatchPreparedStatementSetter ipss = (pss instanceof InterruptibleBatchPreparedStatementSetter\n                         ? (InterruptibleBatchPreparedStatementSetter) pss\n-                        : null );\n+                        : null);\n                     int[] result;\n                     KeyHolder keyHolder = new GeneratedKeyHolder();\n \n", "next_change": {"commit": "081840032b231dc76f4ed8610100c428b7200acb", "changed_code": [{"header": "diff --git a/dhis-2/dhis-support/dhis-support-jdbc/src/main/java/org/hisp/dhis/jdbc/JdbcUtils.java b/dhis-2/dhis-support/dhis-support-jdbc/src/main/java/org/hisp/dhis/jdbc/JdbcUtils.java\nindex 4e34e0299f..342109fca5 100644\n--- a/dhis-2/dhis-support/dhis-support-jdbc/src/main/java/org/hisp/dhis/jdbc/JdbcUtils.java\n+++ b/dhis-2/dhis-support/dhis-support-jdbc/src/main/java/org/hisp/dhis/jdbc/JdbcUtils.java\n", "chunk": "@@ -67,7 +67,7 @@ public class JdbcUtils\n                 try\n                 {\n                     int batchSize = pss.getBatchSize();\n-                    InterruptibleBatchPreparedStatementSetter ipss = (pss instanceof InterruptibleBatchPreparedStatementSetter\n+                    InterruptibleBatchPreparedStatementSetter ipss = ( pss instanceof InterruptibleBatchPreparedStatementSetter\n                         ? (InterruptibleBatchPreparedStatementSetter) pss\n                         : null);\n                     int[] result;\n", "next_change": {"commit": "85c947b7cdb2c98af0c8d892a8fbc9f65784abe3", "changed_code": [{"header": "diff --git a/dhis-2/dhis-support/dhis-support-jdbc/src/main/java/org/hisp/dhis/jdbc/JdbcUtils.java b/dhis-2/dhis-support/dhis-support-jdbc/src/main/java/org/hisp/dhis/jdbc/JdbcUtils.java\nindex 342109fca5..f168262802 100644\n--- a/dhis-2/dhis-support/dhis-support-jdbc/src/main/java/org/hisp/dhis/jdbc/JdbcUtils.java\n+++ b/dhis-2/dhis-support/dhis-support-jdbc/src/main/java/org/hisp/dhis/jdbc/JdbcUtils.java\n", "chunk": "@@ -69,7 +69,7 @@ public class JdbcUtils\n                     int batchSize = pss.getBatchSize();\n                     InterruptibleBatchPreparedStatementSetter ipss = ( pss instanceof InterruptibleBatchPreparedStatementSetter\n                         ? (InterruptibleBatchPreparedStatementSetter) pss\n-                        : null);\n+                        : null );\n                     int[] result;\n                     KeyHolder keyHolder = new GeneratedKeyHolder();\n \n", "next_change": null}]}}]}}]}}]}, "revised_code_in_main": {"commit": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "changed_code": [{"header": "diff --git a/dhis-2/dhis-support/dhis-support-jdbc/src/main/java/org/hisp/dhis/jdbc/JdbcUtils.java b/dhis-2/dhis-support/dhis-support-jdbc/src/main/java/org/hisp/dhis/jdbc/JdbcUtils.java\nindex 4e34e0299f..8a526ca6c5 100644\n--- a/dhis-2/dhis-support/dhis-support-jdbc/src/main/java/org/hisp/dhis/jdbc/JdbcUtils.java\n+++ b/dhis-2/dhis-support/dhis-support-jdbc/src/main/java/org/hisp/dhis/jdbc/JdbcUtils.java\n", "chunk": "@@ -67,9 +67,9 @@ public class JdbcUtils\n                 try\n                 {\n                     int batchSize = pss.getBatchSize();\n-                    InterruptibleBatchPreparedStatementSetter ipss = (pss instanceof InterruptibleBatchPreparedStatementSetter\n+                    InterruptibleBatchPreparedStatementSetter ipss = ( pss instanceof InterruptibleBatchPreparedStatementSetter\n                         ? (InterruptibleBatchPreparedStatementSetter) pss\n-                        : null);\n+                        : null );\n                     int[] result;\n                     KeyHolder keyHolder = new GeneratedKeyHolder();\n \n", "next_change": {"commit": "ea76fa86409613c9766d4508d65c88ac55c413c3", "changed_code": [{"header": "diff --git a/dhis-2/dhis-support/dhis-support-jdbc/src/main/java/org/hisp/dhis/jdbc/JdbcUtils.java b/dhis-2/dhis-support/dhis-support-jdbc/src/main/java/org/hisp/dhis/jdbc/JdbcUtils.java\nindex 8a526ca6c5..3b25c90237 100644\n--- a/dhis-2/dhis-support/dhis-support-jdbc/src/main/java/org/hisp/dhis/jdbc/JdbcUtils.java\n+++ b/dhis-2/dhis-support/dhis-support-jdbc/src/main/java/org/hisp/dhis/jdbc/JdbcUtils.java\n", "chunk": "@@ -67,9 +67,9 @@ public class JdbcUtils\n                 try\n                 {\n                     int batchSize = pss.getBatchSize();\n-                    InterruptibleBatchPreparedStatementSetter ipss = ( pss instanceof InterruptibleBatchPreparedStatementSetter\n+                    InterruptibleBatchPreparedStatementSetter ipss = (pss instanceof InterruptibleBatchPreparedStatementSetter\n                         ? (InterruptibleBatchPreparedStatementSetter) pss\n-                        : null );\n+                        : null);\n                     int[] result;\n                     KeyHolder keyHolder = new GeneratedKeyHolder();\n \n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "message": "Merge commit", "committedDate": null}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY0NzQyOA==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r461647428", "body": "```suggestion\r\n    public JsonObject createEventBody( String orgUnitId, String programId, String programStageId )\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public JsonObject createEventBody(String orgUnitId, String programId, String programStageId)\n          \n          \n            \n                public JsonObject createEventBody( String orgUnitId, String programId, String programStageId )", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">public</span> <span class=\"pl-smi\">JsonObject</span> createEventBody(<span class=\"pl-smi\">String</span> orgUnitId, <span class=\"pl-smi\">String</span> programId, <span class=\"pl-smi\">String</span> programStageId)</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">public</span> <span class=\"pl-smi\">JsonObject</span> createEventBody(<span class=\"x x-first x-last\"> </span><span class=\"pl-smi\">String</span> orgUnitId, <span class=\"pl-smi\">String</span> programId, <span class=\"pl-smi\">String</span> programStageId<span class=\"x x-first x-last\"> </span>)</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "stian-sandvold", "createdAt": "2020-07-28T14:55:07Z", "path": "dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/actions/tracker/EventActions.java", "diffHunk": "@@ -78,4 +80,17 @@ public void softDelete( List<String> eventIds )\n             softDelete( id );\n         }\n     }\n+\n+    public JsonObject createEventBody(String orgUnitId, String programId, String programStageId)", "originalCommit": "dc20b8a9249359bcdd1f612b1852f728ef63b7ab", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d0687a6c7c9e1c4dd64c4dc669bb80ae6e8c8c8b", "changed_code": [{"header": "diff --git a/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/actions/tracker/EventActions.java b/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/actions/tracker/EventActions.java\nindex 23f0c15d81..7e87da80ad 100644\n--- a/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/actions/tracker/EventActions.java\n+++ b/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/actions/tracker/EventActions.java\n", "chunk": "@@ -81,7 +81,7 @@ public class EventActions\n         }\n     }\n \n-    public JsonObject createEventBody(String orgUnitId, String programId, String programStageId)\n+    public JsonObject createEventBody( String orgUnitId, String programId, String programStageId )\n     {\n         JsonObject event = new JsonObject();\n \n", "next_change": {"commit": "d360652a896bee650a842567e26cd1e62145cccb", "changed_code": [{"header": "diff --git a/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/actions/tracker/EventActions.java b/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/actions/tracker/EventActions.java\nindex 7e87da80ad..23f0c15d81 100644\n--- a/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/actions/tracker/EventActions.java\n+++ b/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/actions/tracker/EventActions.java\n", "chunk": "@@ -81,7 +81,7 @@ public class EventActions\n         }\n     }\n \n-    public JsonObject createEventBody( String orgUnitId, String programId, String programStageId )\n+    public JsonObject createEventBody(String orgUnitId, String programId, String programStageId)\n     {\n         JsonObject event = new JsonObject();\n \n", "next_change": {"commit": "5a102a5c179d008a301b96f632b00b634b1300eb", "changed_code": [{"header": "diff --git a/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/actions/tracker/EventActions.java b/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/actions/tracker/EventActions.java\nindex 23f0c15d81..7e87da80ad 100644\n--- a/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/actions/tracker/EventActions.java\n+++ b/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/actions/tracker/EventActions.java\n", "chunk": "@@ -81,7 +81,7 @@ public class EventActions\n         }\n     }\n \n-    public JsonObject createEventBody(String orgUnitId, String programId, String programStageId)\n+    public JsonObject createEventBody( String orgUnitId, String programId, String programStageId )\n     {\n         JsonObject event = new JsonObject();\n \n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "changed_code": [{"header": "diff --git a/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/actions/tracker/EventActions.java b/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/actions/tracker/EventActions.java\nindex 23f0c15d81..7e87da80ad 100644\n--- a/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/actions/tracker/EventActions.java\n+++ b/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/actions/tracker/EventActions.java\n", "chunk": "@@ -81,7 +81,7 @@ public class EventActions\n         }\n     }\n \n-    public JsonObject createEventBody(String orgUnitId, String programId, String programStageId)\n+    public JsonObject createEventBody( String orgUnitId, String programId, String programStageId )\n     {\n         JsonObject event = new JsonObject();\n \n", "next_change": null}]}, "commits_in_main": [{"oid": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "message": "Merge commit", "committedDate": null}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "d45301f99d017c365028ab0a19d12b83b2d10f56", "committedDate": "2021-08-19 10:56:35 +0200", "message": "feat: Adds speedy-spotless plugin, updates code format on all e2e files (#8549)"}, {"oid": "0598a15075e05a7a324a5d1574702c1cb4da4e0d", "committedDate": "2021-09-28 12:57:48 +0200", "message": "fix: Lazy init exception when ownership ou already happens to be in cache (#8779) (#8842)"}, {"oid": "8345bb0e86fc277bf9cbdb1e81cf6ebc3618ce4a", "committedDate": "2021-10-22 10:56:42 +0200", "message": "style: duplicate headers removed [TECH-780] (#9109)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "8b540ae5e4682e5c9fa529abf17b8e52642165ab", "committedDate": "2022-05-02 15:06:47 +0200", "message": "chore: Format e2e test module (#10661)"}, {"oid": "472afe65040ea0addf63d0d328dc2e6b0a44b0ae", "committedDate": "2023-05-11 12:35:26 +0200", "message": "test: separate old and new tracker e2e tests TECH-1548 (#13869)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY1MDY5Mw==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r461650693", "body": "```suggestion\r\n            public Set<User> load( Long userGroupId ) {\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        public Set<User> load(Long userGroupId) {\n          \n          \n            \n                        public Set<User> load( Long userGroupId ) {", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            <span class=\"pl-k\">public</span> <span class=\"pl-k\">Set&lt;<span class=\"pl-smi\">User</span>&gt;</span> load(<span class=\"pl-smi\">Long</span> userGroupId) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            <span class=\"pl-k\">public</span> <span class=\"pl-k\">Set&lt;<span class=\"pl-smi\">User</span>&gt;</span> load(<span class=\"x x-first x-last\"> </span><span class=\"pl-smi\">Long</span> userGroupId<span class=\"x x-first x-last\"> </span>) {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "stian-sandvold", "createdAt": "2020-07-28T14:58:50Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/ProgramSupplier.java", "diffHunk": "@@ -0,0 +1,636 @@\n+package org.hisp.dhis.dxf2.events.importer.context;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+import org.apache.commons.lang.RandomStringUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.commons.lang.text.StrSubstitutor;\n+import org.cache2k.Cache;\n+import org.cache2k.Cache2kBuilder;\n+import org.cache2k.integration.CacheLoader;\n+import org.hisp.dhis.category.CategoryCombo;\n+import org.hisp.dhis.common.IdScheme;\n+import org.hisp.dhis.common.IdSchemes;\n+import org.hisp.dhis.dataelement.DataElement;\n+import org.hisp.dhis.dxf2.common.ImportOptions;\n+import org.hisp.dhis.dxf2.events.event.Event;\n+import org.hisp.dhis.dxf2.events.event.EventUtils;\n+import org.hisp.dhis.organisationunit.FeatureType;\n+import org.hisp.dhis.organisationunit.OrganisationUnit;\n+import org.hisp.dhis.program.Program;\n+import org.hisp.dhis.program.ProgramStage;\n+import org.hisp.dhis.program.ProgramStageDataElement;\n+import org.hisp.dhis.program.ProgramType;\n+import org.hisp.dhis.program.ValidationStrategy;\n+import org.hisp.dhis.trackedentity.TrackedEntityType;\n+import org.hisp.dhis.user.User;\n+import org.hisp.dhis.user.UserAccess;\n+import org.hisp.dhis.user.UserGroup;\n+import org.hisp.dhis.user.UserGroupAccess;\n+import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;\n+import org.springframework.stereotype.Component;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.common.collect.ImmutableMap;\n+\n+/**\n+ * This supplier builds and caches a Map of all the Programs in the system.\n+ * For each Program, the following additional data is retrieved:\n+ *\n+ *\n+ *\n+ * @formatter:off\n+ *\n+         Program\n+         +\n+         |\n+         +---+ Program Stage (List)\n+         |           |\n+         |           +---+ User Access (ACL)\n+         |           |\n+         |           +---+ User Group Access (ACL)\n+         |\n+         |\n+         +---+ Category Combo\n+         |\n+         |\n+         +---+ Tracked Entity Instance\n+         |           |\n+         |           +---+ User Access (ACL)\n+         |           |\n+         |           +---+ User Group Access (ACL)\n+         |\n+         |\n+         |\n+         +---+ Organizational Unit (List)\n+         |\n+         +---+ User Access (ACL)\n+         |\n+         +---+ User Group Access (ACL)\n+ * @formatter:on\n+ *\n+ * @author Luciano Fiandesio\n+ */\n+@Slf4j\n+@Component( \"workContextProgramsSupplier\" )\n+public class ProgramSupplier extends AbstractSupplier<Map<String, Program>>\n+{\n+    private final static String PROGRAM_CACHE_KEY = \"000P\";\n+\n+    private final ObjectMapper jsonMapper;\n+\n+    private final static String ATTRIBUTESCHEME_COL = \"attributevalues\";\n+\n+    // @formatter:off\n+    private final static String USER_ACCESS_SQL = \"select eua.${column_name}, eua.useraccessid, ua.useraccessid, ua.access, ua.userid, ui.uid \" +\n+        \"from ${table_name} eua \" +\n+        \"join useraccess ua on eua.useraccessid = ua.useraccessid \" +\n+        \"join userinfo ui on ui.userinfoid = ua.useraccessid \" +\n+        \"order by eua.${column_name}\";\n+\n+    private final static String USER_GROUP_ACCESS_SQL = \"select ega.${column_name}, ega.usergroupaccessid, u.access, u.usergroupid, ug.uid \" +\n+        \"from ${table_name} ega \" +\n+        \"join usergroupaccess u on ega.usergroupaccessid = u.usergroupaccessid \" +\n+        \"join usergroup ug on u.usergroupid = ug.usergroupid \" +\n+        \"order by ega.${column_name}\";\n+\n+    // Caches the entire Program hierarchy, including Program Stages and ACL data\n+    private final Cache<String, Map<String, Program>> programsCache = new Cache2kBuilder<String, Map<String, Program>>() {}\n+        .name( \"eventImportProgramCache\" + RandomStringUtils.randomAlphabetic(5) )\n+        .expireAfterWrite( 1, TimeUnit.MINUTES )\n+        .build();\n+\n+    // Caches the User Groups and the Users belonging to each group\n+    private final Cache<Long, Set<User>> userGroupCache = new Cache2kBuilder<Long, Set<User>>() {}\n+        .name( \"eventImportUserGroupCache\" + RandomStringUtils.randomAlphabetic(5) )\n+        .expireAfterWrite( 5, TimeUnit.MINUTES )\n+        .permitNullValues( true )\n+        .loader( new CacheLoader<Long, Set<User>>()\n+        {\n+            @Override\n+            public Set<User> load(Long userGroupId) {", "originalCommit": "dc20b8a9249359bcdd1f612b1852f728ef63b7ab", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d0687a6c7c9e1c4dd64c4dc669bb80ae6e8c8c8b", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/ProgramSupplier.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/ProgramSupplier.java\nindex a711a8007d..af1f2a9ab0 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/ProgramSupplier.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/ProgramSupplier.java\n", "chunk": "@@ -147,56 +155,41 @@ public class ProgramSupplier extends AbstractSupplier<Map<String, Program>>\n         .loader( new CacheLoader<Long, Set<User>>()\n         {\n             @Override\n-            public Set<User> load(Long userGroupId) {\n+            public Set<User> load( Long userGroupId ) {\n                 return loadUserGroups( userGroupId );\n             }\n         } ).build() ;\n \n     // @formatter:on\n \n-    public ProgramSupplier( NamedParameterJdbcTemplate jdbcTemplate, ObjectMapper jsonMapper )\n+    public ProgramSupplier( NamedParameterJdbcTemplate jdbcTemplate, ObjectMapper jsonMapper, Environment env )\n     {\n         super( jdbcTemplate );\n         this.jsonMapper = jsonMapper;\n+        this.env = env;\n     }\n-\n+    \n     @Override\n     public Map<String, Program> get( ImportOptions importOptions, List<Event> eventList )\n     {\n         boolean requiresReload = false;\n+\n         //\n-        // do not use cache is `skipCache` is true\n+        // do not use cache is `skipCache` is true or if running as test\n         //\n-        if ( importOptions.isSkipCache() )\n+        if ( importOptions.isSkipCache() || SystemUtils.isTestRun( env.getActiveProfiles() ) )\n         {\n             programsCache.removeAll();\n             userGroupCache.removeAll();\n         }\n         Map<String, Program> programMap = programsCache.get( PROGRAM_CACHE_KEY );\n \n-        //\n-        // Check if the list of incoming Events contains one or more Program uid which\n-        // is\n-        // not in cache. Reload the entire program cache if a Program UID is not found\n-        //\n-        if ( programMap != null )\n+        if ( requiresCacheReload( eventList, programMap ) )\n         {\n-            Set<String> programs = eventList.stream().map( Event::getProgram ).collect( Collectors.toSet() );\n-\n-            final Set<String> programsInCache = programMap.keySet();\n-\n-            for ( String program : programs )\n-            {\n-                if ( !programsInCache.contains( program ) )\n-                {\n-                    // invalidate cache and rebuild\n-                    programsCache.removeAll();\n-                    requiresReload = true;\n-                    break;\n-                }\n-            }\n+            programsCache.removeAll();\n+            requiresReload = true;\n         }\n-\n+        \n         if ( requiresReload || programMap == null )\n         {\n             //\n", "next_change": {"commit": "d360652a896bee650a842567e26cd1e62145cccb", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/ProgramSupplier.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/ProgramSupplier.java\nindex af1f2a9ab0..a711a8007d 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/ProgramSupplier.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/ProgramSupplier.java\n", "chunk": "@@ -155,41 +147,56 @@ public class ProgramSupplier extends AbstractSupplier<Map<String, Program>>\n         .loader( new CacheLoader<Long, Set<User>>()\n         {\n             @Override\n-            public Set<User> load( Long userGroupId ) {\n+            public Set<User> load(Long userGroupId) {\n                 return loadUserGroups( userGroupId );\n             }\n         } ).build() ;\n \n     // @formatter:on\n \n-    public ProgramSupplier( NamedParameterJdbcTemplate jdbcTemplate, ObjectMapper jsonMapper, Environment env )\n+    public ProgramSupplier( NamedParameterJdbcTemplate jdbcTemplate, ObjectMapper jsonMapper )\n     {\n         super( jdbcTemplate );\n         this.jsonMapper = jsonMapper;\n-        this.env = env;\n     }\n-    \n+\n     @Override\n     public Map<String, Program> get( ImportOptions importOptions, List<Event> eventList )\n     {\n         boolean requiresReload = false;\n-\n         //\n-        // do not use cache is `skipCache` is true or if running as test\n+        // do not use cache is `skipCache` is true\n         //\n-        if ( importOptions.isSkipCache() || SystemUtils.isTestRun( env.getActiveProfiles() ) )\n+        if ( importOptions.isSkipCache() )\n         {\n             programsCache.removeAll();\n             userGroupCache.removeAll();\n         }\n         Map<String, Program> programMap = programsCache.get( PROGRAM_CACHE_KEY );\n \n-        if ( requiresCacheReload( eventList, programMap ) )\n+        //\n+        // Check if the list of incoming Events contains one or more Program uid which\n+        // is\n+        // not in cache. Reload the entire program cache if a Program UID is not found\n+        //\n+        if ( programMap != null )\n         {\n-            programsCache.removeAll();\n-            requiresReload = true;\n+            Set<String> programs = eventList.stream().map( Event::getProgram ).collect( Collectors.toSet() );\n+\n+            final Set<String> programsInCache = programMap.keySet();\n+\n+            for ( String program : programs )\n+            {\n+                if ( !programsInCache.contains( program ) )\n+                {\n+                    // invalidate cache and rebuild\n+                    programsCache.removeAll();\n+                    requiresReload = true;\n+                    break;\n+                }\n+            }\n         }\n-        \n+\n         if ( requiresReload || programMap == null )\n         {\n             //\n", "next_change": {"commit": "b3043f6c9dd7c40b383fb1c036cdc15a86d33c22", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/ProgramSupplier.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/ProgramSupplier.java\nindex a711a8007d..c871435002 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/ProgramSupplier.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/ProgramSupplier.java\n", "chunk": "@@ -147,56 +151,41 @@ public class ProgramSupplier extends AbstractSupplier<Map<String, Program>>\n         .loader( new CacheLoader<Long, Set<User>>()\n         {\n             @Override\n-            public Set<User> load(Long userGroupId) {\n+            public Set<User> load( Long userGroupId ) {\n                 return loadUserGroups( userGroupId );\n             }\n         } ).build() ;\n \n     // @formatter:on\n \n-    public ProgramSupplier( NamedParameterJdbcTemplate jdbcTemplate, ObjectMapper jsonMapper )\n+    public ProgramSupplier( NamedParameterJdbcTemplate jdbcTemplate, ObjectMapper jsonMapper, Environment env )\n     {\n         super( jdbcTemplate );\n         this.jsonMapper = jsonMapper;\n+        this.env = env;\n     }\n-\n+    \n     @Override\n     public Map<String, Program> get( ImportOptions importOptions, List<Event> eventList )\n     {\n         boolean requiresReload = false;\n+\n         //\n-        // do not use cache is `skipCache` is true\n+        // do not use cache is `skipCache` is true or if running as test\n         //\n-        if ( importOptions.isSkipCache() )\n+        if ( importOptions.isSkipCache() || SystemUtils.isTestRun( env.getActiveProfiles() ) )\n         {\n             programsCache.removeAll();\n             userGroupCache.removeAll();\n         }\n         Map<String, Program> programMap = programsCache.get( PROGRAM_CACHE_KEY );\n \n-        //\n-        // Check if the list of incoming Events contains one or more Program uid which\n-        // is\n-        // not in cache. Reload the entire program cache if a Program UID is not found\n-        //\n-        if ( programMap != null )\n+        if ( requiresCacheReload( eventList, programMap ) )\n         {\n-            Set<String> programs = eventList.stream().map( Event::getProgram ).collect( Collectors.toSet() );\n-\n-            final Set<String> programsInCache = programMap.keySet();\n-\n-            for ( String program : programs )\n-            {\n-                if ( !programsInCache.contains( program ) )\n-                {\n-                    // invalidate cache and rebuild\n-                    programsCache.removeAll();\n-                    requiresReload = true;\n-                    break;\n-                }\n-            }\n+            programsCache.removeAll();\n+            requiresReload = true;\n         }\n-\n+        \n         if ( requiresReload || programMap == null )\n         {\n             //\n", "next_change": null}, {"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/ProgramSupplier.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/ProgramSupplier.java\nindex a711a8007d..c871435002 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/ProgramSupplier.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/ProgramSupplier.java\n", "chunk": "@@ -204,16 +193,6 @@ public class ProgramSupplier extends AbstractSupplier<Map<String, Program>>\n             //\n             programMap = loadPrograms( importOptions.getIdSchemes() );\n \n-            //\n-            // Load all mandatory DataElements for each Program Stage\n-            //\n-            Map<Long, Set<DataElement>> dataElementMandatoryMap = loadProgramStageDataElementMandatoryMap();\n-\n-            //\n-            // Load a Map of OrgUnits belonging to a Program (key: program id, value: Set of OrgUnits)\n-            //\n-            Map<Long, Set<OrganisationUnit>> ouMap = loadOrgUnits();\n-\n             //\n             // Load User Access data for all the Programs (required for ACL checks)\n             //\n", "next_change": null}]}}, {"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/ProgramSupplier.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/ProgramSupplier.java\nindex af1f2a9ab0..a711a8007d 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/ProgramSupplier.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/ProgramSupplier.java\n", "chunk": "@@ -197,6 +204,16 @@ public class ProgramSupplier extends AbstractSupplier<Map<String, Program>>\n             //\n             programMap = loadPrograms( importOptions.getIdSchemes() );\n \n+            //\n+            // Load all mandatory DataElements for each Program Stage\n+            //\n+            Map<Long, Set<DataElement>> dataElementMandatoryMap = loadProgramStageDataElementMandatoryMap();\n+\n+            //\n+            // Load a Map of OrgUnits belonging to a Program (key: program id, value: Set of OrgUnits)\n+            //\n+            Map<Long, Set<OrganisationUnit>> ouMap = loadOrgUnits();\n+\n             //\n             // Load User Access data for all the Programs (required for ACL checks)\n             //\n", "next_change": {"commit": "79170da662cbd611e328f5e20097bd7b9dca7611", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/ProgramSupplier.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/ProgramSupplier.java\nindex a711a8007d..77ac2aa631 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/ProgramSupplier.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/ProgramSupplier.java\n", "chunk": "@@ -210,7 +215,8 @@ public class ProgramSupplier extends AbstractSupplier<Map<String, Program>>\n             Map<Long, Set<DataElement>> dataElementMandatoryMap = loadProgramStageDataElementMandatoryMap();\n \n             //\n-            // Load a Map of OrgUnits belonging to a Program (key: program id, value: Set of OrgUnits)\n+            // Load a Map of OrgUnits belonging to a Program (key: program id, value: Set of\n+            // OrgUnits)\n             //\n             Map<Long, Set<OrganisationUnit>> ouMap = loadOrgUnits();\n \n", "next_change": {"commit": "b3043f6c9dd7c40b383fb1c036cdc15a86d33c22", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/ProgramSupplier.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/ProgramSupplier.java\nindex 77ac2aa631..c871435002 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/ProgramSupplier.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/ProgramSupplier.java\n", "chunk": "@@ -209,17 +193,6 @@ public class ProgramSupplier extends AbstractSupplier<Map<String, Program>>\n             //\n             programMap = loadPrograms( importOptions.getIdSchemes() );\n \n-            //\n-            // Load all mandatory DataElements for each Program Stage\n-            //\n-            Map<Long, Set<DataElement>> dataElementMandatoryMap = loadProgramStageDataElementMandatoryMap();\n-\n-            //\n-            // Load a Map of OrgUnits belonging to a Program (key: program id, value: Set of\n-            // OrgUnits)\n-            //\n-            Map<Long, Set<OrganisationUnit>> ouMap = loadOrgUnits();\n-\n             //\n             // Load User Access data for all the Programs (required for ACL checks)\n             //\n", "next_change": null}]}}]}}]}}]}, "revised_code_in_main": {"commit": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/ProgramSupplier.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/ProgramSupplier.java\nindex a711a8007d..5ff08a97c1 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/ProgramSupplier.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/ProgramSupplier.java\n", "chunk": "@@ -135,68 +144,53 @@ public class ProgramSupplier extends AbstractSupplier<Map<String, Program>>\n \n     // Caches the entire Program hierarchy, including Program Stages and ACL data\n     private final Cache<String, Map<String, Program>> programsCache = new Cache2kBuilder<String, Map<String, Program>>() {}\n-        .name( \"eventImportProgramCache\" + RandomStringUtils.randomAlphabetic(5) )\n+        .name( \"eventImportProgramCache\" + RandomStringUtils.randomAlphabetic( 5 ) )\n         .expireAfterWrite( 1, TimeUnit.MINUTES )\n         .build();\n \n     // Caches the User Groups and the Users belonging to each group\n     private final Cache<Long, Set<User>> userGroupCache = new Cache2kBuilder<Long, Set<User>>() {}\n-        .name( \"eventImportUserGroupCache\" + RandomStringUtils.randomAlphabetic(5) )\n+        .name( \"eventImportUserGroupCache\" + RandomStringUtils.randomAlphabetic( 5 ) )\n         .expireAfterWrite( 5, TimeUnit.MINUTES )\n         .permitNullValues( true )\n         .loader( new CacheLoader<Long, Set<User>>()\n         {\n             @Override\n-            public Set<User> load(Long userGroupId) {\n+            public Set<User> load( Long userGroupId ) {\n                 return loadUserGroups( userGroupId );\n             }\n         } ).build() ;\n \n     // @formatter:on\n \n-    public ProgramSupplier( NamedParameterJdbcTemplate jdbcTemplate, ObjectMapper jsonMapper )\n+    public ProgramSupplier( NamedParameterJdbcTemplate jdbcTemplate, ObjectMapper jsonMapper, Environment env )\n     {\n         super( jdbcTemplate );\n         this.jsonMapper = jsonMapper;\n+        this.env = env;\n     }\n-\n+    \n     @Override\n     public Map<String, Program> get( ImportOptions importOptions, List<Event> eventList )\n     {\n         boolean requiresReload = false;\n+\n         //\n-        // do not use cache is `skipCache` is true\n+        // do not use cache is `skipCache` is true or if running as test\n         //\n-        if ( importOptions.isSkipCache() )\n+        if ( importOptions.isSkipCache() || SystemUtils.isTestRun( env.getActiveProfiles() ) )\n         {\n             programsCache.removeAll();\n             userGroupCache.removeAll();\n         }\n         Map<String, Program> programMap = programsCache.get( PROGRAM_CACHE_KEY );\n \n-        //\n-        // Check if the list of incoming Events contains one or more Program uid which\n-        // is\n-        // not in cache. Reload the entire program cache if a Program UID is not found\n-        //\n-        if ( programMap != null )\n+        if ( requiresCacheReload( eventList, programMap ) )\n         {\n-            Set<String> programs = eventList.stream().map( Event::getProgram ).collect( Collectors.toSet() );\n-\n-            final Set<String> programsInCache = programMap.keySet();\n-\n-            for ( String program : programs )\n-            {\n-                if ( !programsInCache.contains( program ) )\n-                {\n-                    // invalidate cache and rebuild\n-                    programsCache.removeAll();\n-                    requiresReload = true;\n-                    break;\n-                }\n-            }\n+            programsCache.removeAll();\n+            requiresReload = true;\n         }\n-\n+        \n         if ( requiresReload || programMap == null )\n         {\n             //\n", "next_change": {"commit": "8aaeab2ee4dd7a9ffa927147931dff8609ef787a", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/ProgramSupplier.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/ProgramSupplier.java\nindex 5ff08a97c1..80bc56249b 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/ProgramSupplier.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/ProgramSupplier.java\n", "chunk": "@@ -190,7 +189,7 @@ public class ProgramSupplier extends AbstractSupplier<Map<String, Program>>\n             programsCache.removeAll();\n             requiresReload = true;\n         }\n-        \n+\n         if ( requiresReload || programMap == null )\n         {\n             //\n", "next_change": {"commit": "3e25b9b834757233501b068c1fd96b5b68cc22f7", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/ProgramSupplier.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/ProgramSupplier.java\nindex 80bc56249b..4f5315f629 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/ProgramSupplier.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/ProgramSupplier.java\n", "chunk": "@@ -197,229 +183,119 @@ public class ProgramSupplier extends AbstractSupplier<Map<String, Program>>\n             //\n             programMap = loadPrograms( importOptions.getIdSchemes() );\n \n-            //\n-            // Load User Access data for all the Programs (required for ACL checks)\n-            //\n-            Map<Long, Set<UserAccess>> programUserAccessMap = loadUserAccessesForPrograms();\n-            Map<Long, Set<UserAccess>> programStageUserAccessMap = loadUserAccessesForProgramStages();\n-            Map<Long, Set<UserAccess>> tetUserAccessMap = loadUserAccessesForTrackedEntityTypes();\n-\n-            //\n-            // Load User Group Access data for all the Programs (required for ACL checks)\n-            //\n-            Map<Long, Set<UserGroupAccess>> programUserGroupAccessMap = loadGroupUserAccessesForPrograms();\n-            Map<Long, Set<UserGroupAccess>> programStageUserGroupAccessMap = loadGroupUserAccessesForProgramStages();\n-            Map<Long, Set<UserGroupAccess>> tetUserGroupAccessMap = loadGroupUserAccessesForTrackedEntityTypes();\n+            if ( !MapUtils.isEmpty( programMap ) )\n+            {\n+                aggregateProgramAndAclData( programMap,\n+                    loadProgramStageDataElementSets() );\n \n-            aggregateProgramAndAclData( programMap, loadOrgUnits(), programUserAccessMap, programUserGroupAccessMap,\n-                tetUserAccessMap, tetUserGroupAccessMap,\n-                programStageUserAccessMap, programStageUserGroupAccessMap,\n-                loadProgramStageDataElementMandatoryMap() );\n+                programsCache.put( PROGRAM_CACHE_KEY, programMap );\n+            }\n+            else\n+            {\n+                programsCache.put( PROGRAM_CACHE_KEY, new HashMap<>() );\n+            }\n \n-            programsCache.put( PROGRAM_CACHE_KEY, programMap );\n         }\n \n         return programMap;\n     }\n \n-    private void aggregateProgramAndAclData( Map<String, Program> programMap, Map<Long, Set<OrganisationUnit>> ouMap,\n-        Map<Long, Set<UserAccess>> programUserAccessMap,\n-        Map<Long, Set<UserGroupAccess>> programUserGroupAccessMap, Map<Long, Set<UserAccess>> tetUserAccessMap,\n-        Map<Long, Set<UserGroupAccess>> tetUserGroupAccessMap, Map<Long, Set<UserAccess>> programStageUserAccessMap,\n-        Map<Long, Set<UserGroupAccess>> programStageUserGroupAccessMap,\n-        Map<Long, Set<DataElement>> dataElementMandatoryMap )\n+    private void aggregateProgramAndAclData( Map<String, Program> programMap,\n+        Map<Long, DataElementSets> dataElementSetsMap  )\n     {\n-\n         for ( Program program : programMap.values() )\n         {\n-            program.setOrganisationUnits( ouMap.getOrDefault( program.getId(), new HashSet<>() ) );\n-            program.setUserAccesses( programUserAccessMap.getOrDefault( program.getId(), new HashSet<>() ) );\n-            program\n-                .setUserGroupAccesses( programUserGroupAccessMap.getOrDefault( program.getId(), new HashSet<>() ) );\n-            TrackedEntityType trackedEntityType = program.getTrackedEntityType();\n-            if ( trackedEntityType != null )\n-            {\n-                trackedEntityType\n-                    .setUserAccesses( tetUserAccessMap.getOrDefault( trackedEntityType.getId(), new HashSet<>() ) );\n-                trackedEntityType.setUserGroupAccesses(\n-                    tetUserGroupAccessMap.getOrDefault( trackedEntityType.getId(), new HashSet<>() ) );\n-            }\n-\n             for ( ProgramStage programStage : program.getProgramStages() )\n             {\n-                programStage.setUserAccesses(\n-                    programStageUserAccessMap.getOrDefault( programStage.getId(), new HashSet<>() ) );\n-                programStage.setUserGroupAccesses(\n-                    programStageUserGroupAccessMap.getOrDefault( programStage.getId(), new HashSet<>() ) );\n-\n-                Set<DataElement> dataElements = dataElementMandatoryMap.get( programStage.getId() );\n-                if ( dataElements != null )\n+                DataElementSets dataElementSets = dataElementSetsMap.get( programStage.getId() );\n+                if ( dataElementSets != null )\n                 {\n-                    programStage.setProgramStageDataElements( dataElements.stream()\n-                        .map( de -> new ProgramStageDataElement( programStage, de ) )\n-                        .collect( Collectors.toSet() ) );\n-                }\n-            }\n-        }\n-    }\n+                    Stream<ProgramStageDataElement> compulsoryProgramStageDataElementsStream = getOrEmpty(\n+                        dataElementSets.getCompulsoryDataElements() )\n+                            .map( de -> new ProgramStageDataElement( programStage, de, true ) );\n \n-    //\n-    // Load a Map of OrgUnits belonging to a Program (key: program id, value: Set of\n-    // OrgUnits)\n-    //\n-    private Map<Long, Set<OrganisationUnit>> loadOrgUnits()\n-    {\n-        final String sql = \"select p.programid, ou.organisationunitid, ou.uid, ou.code, ou.name, ou.attributevalues \"\n-            + \"from program_organisationunits p \"\n-            + \"join organisationunit ou on p.organisationunitid = ou.organisationunitid order by programid\";\n+                    Stream<ProgramStageDataElement> nonCompulsoryProgramStageDataElementsStream = getOrEmpty(\n+                        dataElementSets.getNonCompulsoryDataElements() )\n+                            .map( de -> new ProgramStageDataElement( programStage, de, false ) );\n \n-        return jdbcTemplate.query( sql, ( ResultSet rs ) -> {\n-            Map<Long, Set<OrganisationUnit>> results = new HashMap<>();\n-            long programId = 0;\n-            while ( rs.next() )\n-            {\n-                if ( programId != rs.getLong( PROGRAM_ID ) )\n-                {\n-                    Set<OrganisationUnit> ouSet = new HashSet<>();\n-                    ouSet.add( toOrganisationUnit( rs ) );\n-                    results.put( rs.getLong( PROGRAM_ID ), ouSet );\n-                    programId = rs.getLong( PROGRAM_ID );\n-                }\n-                else\n-                {\n-                    results.get( rs.getLong( PROGRAM_ID ) ).add( toOrganisationUnit( rs ) );\n-                }\n-            }\n-            return results;\n-        } );\n-    }\n-\n-    private Map<Long, Set<UserAccess>> loadUserAccessesForPrograms()\n-    {\n-        return fetchUserAccesses( replaceAclQuery( USER_ACCESS_SQL, \"programuseraccesses\", PROGRAM_ID ), PROGRAM_ID );\n-    }\n+                    Set<ProgramStageDataElement> allProgramStageDataElements = Stream\n+                        .concat( compulsoryProgramStageDataElementsStream, nonCompulsoryProgramStageDataElementsStream )\n+                        .collect( Collectors.toSet() );\n \n-    private Map<Long, Set<UserAccess>> loadUserAccessesForProgramStages()\n-    {\n-        return fetchUserAccesses( replaceAclQuery( USER_ACCESS_SQL, \"programstageuseraccesses\", \"programstageid\" ),\n-            \"programstageid\" );\n-    }\n-\n-    private Map<Long, Set<UserAccess>> loadUserAccessesForTrackedEntityTypes()\n-    {\n-        return fetchUserAccesses(\n-            replaceAclQuery( USER_ACCESS_SQL, \"trackedentitytypeuseraccesses\", TRACKED_ENTITY_TYPE_ID ),\n-            TRACKED_ENTITY_TYPE_ID );\n-    }\n-\n-    private Map<Long, Set<UserAccess>> fetchUserAccesses( String sql, String column )\n-    {\n-        return jdbcTemplate.query( sql, ( ResultSet rs ) -> {\n-            Map<Long, Set<UserAccess>> results = new HashMap<>();\n-            long programStageId = 0;\n-            while ( rs.next() )\n-            {\n-                if ( programStageId != rs.getLong( column ) )\n-                {\n-                    Set<UserAccess> aclSet = new HashSet<>();\n-                    aclSet.add( toUserAccess( rs ) );\n-                    results.put( rs.getLong( column ), aclSet );\n-\n-                    programStageId = rs.getLong( column );\n-                }\n-                else\n-                {\n-                    results.get( rs.getLong( column ) ).add( toUserAccess( rs ) );\n+                    programStage.setProgramStageDataElements( allProgramStageDataElements );\n                 }\n             }\n-            return results;\n-        } );\n-    }\n-\n-    private Map<Long, Set<UserGroupAccess>> loadGroupUserAccessesForPrograms()\n-    {\n-        return fetchUserGroupAccess( replaceAclQuery( USER_GROUP_ACCESS_SQL, \"programusergroupaccesses\", PROGRAM_ID ),\n-            PROGRAM_ID );\n-    }\n-\n-    private Map<Long, Set<UserGroupAccess>> loadGroupUserAccessesForProgramStages()\n-    {\n-        // TODO: can't use replace because the table programstageusergroupaccesses\n-        // should use 'programstageid' as column name\n-        final String sql = \"select psuga.programid as programstageid, psuga.usergroupaccessid, u.access, u.usergroupid, ug.uid \"\n-            + \"from programstageusergroupaccesses psuga \"\n-            + \"join usergroupaccess u on psuga.usergroupaccessid = u.usergroupaccessid \"\n-            + \"join usergroup ug on u.usergroupid = ug.usergroupid order by programstageid\";\n-\n-        return fetchUserGroupAccess( sql, PROGRAM_STAGE_ID );\n+        }\n     }\n \n-    private Map<Long, Set<UserGroupAccess>> loadGroupUserAccessesForTrackedEntityTypes()\n+    private Stream<DataElement> getOrEmpty( Set<DataElement> dataElementSet )\n     {\n-        return fetchUserGroupAccess(\n-            replaceAclQuery( USER_GROUP_ACCESS_SQL, \"trackedentitytypeusergroupaccesses\", TRACKED_ENTITY_TYPE_ID ),\n-            TRACKED_ENTITY_TYPE_ID );\n-    }\n-\n-    private Map<Long, Set<UserGroupAccess>> fetchUserGroupAccess( String sql, String column )\n-    {\n-        return jdbcTemplate.query( sql, ( ResultSet rs ) -> {\n-            Map<Long, Set<UserGroupAccess>> results = new HashMap<>();\n-            long entityId = 0;\n-            while ( rs.next() )\n-            {\n-                if ( entityId != rs.getLong( column ) )\n-                {\n-                    Set<UserGroupAccess> aclSet = new HashSet<>();\n-                    aclSet.add( toUserGroupAccess( rs ) );\n-                    results.put( rs.getLong( column ), aclSet );\n-\n-                    entityId = rs.getLong( column );\n-                }\n-                else\n-                {\n-                    results.get( rs.getLong( column ) ).add( toUserGroupAccess( rs ) );\n-                }\n-            }\n-            return results;\n-        } );\n+        return Optional.ofNullable( dataElementSet )\n+            .orElse( Collections.emptySet() )\n+            .stream();\n     }\n \n     //\n-    // Load all mandatory DataElements for each Program Stage\n+    // Load all DataElements for each Program Stage, partitioned into compulsory and\n+    // non-compulsory\n     //\n-    private Map<Long, Set<DataElement>> loadProgramStageDataElementMandatoryMap()\n+    private Map<Long, DataElementSets> loadProgramStageDataElementSets()\n     {\n-        final String sql = \"select psde.programstageid, de.dataelementid, de.uid as de_uid, de.code as de_code \"\n+        final String sql = \"select psde.programstageid, de.dataelementid, de.uid as de_uid, de.code as de_code, psde.compulsory \"\n             + \"from programstagedataelement psde \"\n-            + \"join dataelement de on psde.dataelementid = de.dataelementid where psde.compulsory = true \"\n+            + \"join dataelement de on psde.dataelementid = de.dataelementid \"\n             + \"order by psde.programstageid\";\n \n         return jdbcTemplate.query( sql, ( ResultSet rs ) -> {\n \n-            Map<Long, Set<DataElement>> results = new HashMap<>();\n+            Map<Long, DataElementSets> results = new HashMap<>();\n             long programStageId = 0;\n             while ( rs.next() )\n             {\n                 if ( programStageId != rs.getLong( PROGRAM_STAGE_ID ) )\n                 {\n-                    Set<DataElement> dataElements = new HashSet<>();\n+                    DataElementSets dataElementSets = new DataElementSets();\n \n                     DataElement dataElement = toDataElement( rs );\n-                    dataElements.add( dataElement );\n \n-                    results.put( rs.getLong( PROGRAM_STAGE_ID ), dataElements );\n+                    if ( rs.getBoolean( COMPULSORY ) )\n+                    {\n+                        dataElementSets.getCompulsoryDataElements().add( dataElement );\n+                    }\n+                    else\n+                    {\n+                        dataElementSets.getNonCompulsoryDataElements().add( dataElement );\n+                    }\n+\n+                    results.put( rs.getLong( PROGRAM_STAGE_ID ), dataElementSets );\n                     programStageId = rs.getLong( PROGRAM_STAGE_ID );\n                 }\n                 else\n                 {\n-                    results.get( rs.getLong( PROGRAM_STAGE_ID ) ).add( toDataElement( (rs) ) );\n+                    DataElementSets dataElementSets = results.get( rs.getLong( PROGRAM_STAGE_ID ) );\n+                    DataElement dataElement = toDataElement( rs );\n+                    if ( rs.getBoolean( COMPULSORY ) )\n+                    {\n+                        dataElementSets.getCompulsoryDataElements().add( dataElement );\n+                    }\n+                    else\n+                    {\n+                        dataElementSets.getNonCompulsoryDataElements().add( dataElement );\n+                    }\n                 }\n             }\n             return results;\n         } );\n     }\n \n+    @Data\n+    static class DataElementSets\n+    {\n+        private final Set<DataElement> compulsoryDataElements = new HashSet<>();\n+\n+        private final Set<DataElement> nonCompulsoryDataElements = new HashSet<>();\n+    }\n+\n     private Map<String, Program> loadPrograms( IdSchemes idSchemes )\n     {\n         //\n", "next_change": {"commit": "ea76fa86409613c9766d4508d65c88ac55c413c3", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/ProgramSupplier.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/ProgramSupplier.java\nindex 4f5315f629..3821e12c9e 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/ProgramSupplier.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/ProgramSupplier.java\n", "chunk": "@@ -299,7 +310,8 @@ public class ProgramSupplier extends AbstractSupplier<Map<String, Program>>\n     private Map<String, Program> loadPrograms( IdSchemes idSchemes )\n     {\n         //\n-        // Get the IdScheme for Programs. Programs should support also the Attribute\n+        // Get the IdScheme for Programs. Programs should support also the\n+        // Attribute\n         // Scheme, based on JSONB\n         //\n         IdScheme idScheme = idSchemes.getProgramIdScheme();\n", "next_change": {"commit": "71a6a2624632ec0e8323ff922cedef5499a38ddf", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/ProgramSupplier.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/ProgramSupplier.java\nindex 3821e12c9e..47167f320e 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/ProgramSupplier.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/ProgramSupplier.java\n", "chunk": "@@ -309,11 +295,9 @@ public class ProgramSupplier extends AbstractSupplier<Map<String, Program>>\n \n     private Map<String, Program> loadPrograms( IdSchemes idSchemes )\n     {\n-        //\n-        // Get the IdScheme for Programs. Programs should support also the\n-        // Attribute\n-        // Scheme, based on JSONB\n-        //\n+        // Get Id scheme for programs, programs should support also the\n+        // attribute scheme based on JSONB\n+\n         IdScheme idScheme = idSchemes.getProgramIdScheme();\n \n         String sqlSelect = \"select p.programid as id, p.uid, p.code, p.name, p.sharing as program_sharing, \"\n", "next_change": {"commit": "5f0613c57316bb855e4b9ee931932f23edf54142", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/ProgramSupplier.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/ProgramSupplier.java\nindex 47167f320e..d0430b0cbc 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/ProgramSupplier.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/ProgramSupplier.java\n", "chunk": "@@ -301,7 +271,7 @@ public class ProgramSupplier extends AbstractSupplier<Map<String, Program>>\n         IdScheme idScheme = idSchemes.getProgramIdScheme();\n \n         String sqlSelect = \"select p.programid as id, p.uid, p.code, p.name, p.sharing as program_sharing, \"\n-            + \"p.type, tet.trackedentitytypeid, tet.sharing  as tet_sharing, \"\n+            + \"p.type, p.opendaysaftercoenddate, tet.trackedentitytypeid, tet.sharing  as tet_sharing, \"\n             + \"tet.uid           as tet_uid, c.categorycomboid as catcombo_id, \"\n             + \"c.uid             as catcombo_uid, c.name            as catcombo_name, \"\n             + \"c.code            as catcombo_code, ps.programstageid as ps_id, ps.uid as ps_uid, \"\n", "next_change": null}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "message": "Merge commit", "committedDate": null}, {"oid": "8aaeab2ee4dd7a9ffa927147931dff8609ef787a", "committedDate": "2020-09-23 15:33:34 +0200", "message": "chore: Remove unused imports (#6219)"}, {"oid": "d21fd5df4ff5cb85ddceba60c8e35e97978b9f78", "committedDate": "2020-09-23 16:51:35 +0200", "message": "fix: fix User Access SQL query for programs (#6222)"}, {"oid": "59dd9f885626473b854e69c58d37f24fce424eaf", "committedDate": "2020-09-24 10:38:11 +0200", "message": "test: added tests for the ACL section of the ProgramSupplier (#6230)"}, {"oid": "801651cbf2431b9c2cf6e772eef9f4b70109b006", "committedDate": "2020-11-06 11:23:57 +0100", "message": "fix: applying pre-processor modification to context and event payload\u2026 (#6564)"}, {"oid": "fb390e24a39efb3e206bd995b5f9d964ede0cb33", "committedDate": "2020-12-16 15:20:31 +0100", "message": "perf: reduce number of Org Units fetched from DB on Tracker Import (#6920)"}, {"oid": "3e25b9b834757233501b068c1fd96b5b68cc22f7", "committedDate": "2020-12-22 12:59:13 +0100", "message": "feat: Convert sharing objects to JSONB structure [DHIS2-5814]"}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "71a6a2624632ec0e8323ff922cedef5499a38ddf", "committedDate": "2021-03-15 12:22:09 +0100", "message": "chore: Fix code style issues (#7643)"}, {"oid": "420a69fc29ce7e6c1074a291ba005519a92b53ed", "committedDate": "2021-06-07 09:53:28 +0200", "message": "feat: Support JSON Patch (RFC 6902) for metadata objects (#7821)"}, {"oid": "0ea45addae148641a66270e104d43d70b59dde05", "committedDate": "2021-10-26 09:45:39 +0200", "message": "refactor: Remove check test profile in runtime code [TECH-699] (#9110)"}, {"oid": "6f572a9ce997e4e66255f5a5ac2d3f141db1e8bd", "committedDate": "2021-10-26 21:13:46 +0200", "message": "chore: Remove most usages of commons-lang TECH-777 (#9104)"}, {"oid": "5f0613c57316bb855e4b9ee931932f23edf54142", "committedDate": "2021-11-16 10:54:05 -0500", "message": "feat: Program.openDaysAfterCoEndDate DHIS2-11234 (#9219)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "1614495b65ce6a134307ab813bb8641b64e8be36", "committedDate": "2022-03-21 14:39:36 +0100", "message": "chore: Clean up service dxf2 using it [TECH-940] (#10225)"}, {"oid": "7cadf133b1ad419f9db936d81e895bd264be5925", "committedDate": "2022-04-15 08:46:01 +0200", "message": "chore(deps): bump h2 from 1.4.200 to 2.1.212 in /dhis-2 (#10459)"}, {"oid": "808f67257778ea712ff971825e77852341945645", "committedDate": "2022-10-24 16:43:53 +0200", "message": "chore: sonar warnings - potential NPE and surrounding (#12185)"}, {"oid": "02336c9611c0dd85d5038223bddbfdebc0aae526", "committedDate": "2023-05-11 19:34:26 +0200", "message": "chore: move old tracker dxf2 code into deprecated package (#13901)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY1MzA3MA==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r461653070", "body": "```suggestion\r\n        cat1.setCategoryOptions( Lists.newArrayList( categoryOption1, categoryOption2 ) );\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    cat1.setCategoryOptions( Lists.newArrayList(categoryOption1, categoryOption2));\n          \n          \n            \n                    cat1.setCategoryOptions( Lists.newArrayList( categoryOption1, categoryOption2 ) );", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        cat1<span class=\"pl-k\">.</span>setCategoryOptions( <span class=\"pl-smi\">Lists</span><span class=\"pl-k\">.</span>newArrayList(categoryOption1, categoryOption2<span class=\"x x-first x-last\">)</span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        cat1<span class=\"pl-k\">.</span>setCategoryOptions( <span class=\"pl-smi\">Lists</span><span class=\"pl-k\">.</span>newArrayList(<span class=\"x x-first x-last\"> </span>categoryOption1, categoryOption2<span class=\"x x-first x-last\"> ) </span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "stian-sandvold", "createdAt": "2020-07-28T15:01:50Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java", "diffHunk": "@@ -150,16 +169,32 @@ protected void setUpTest()\n \n         trackedEntityInstanceMaleA = trackedEntityInstanceService.getTrackedEntityInstance( maleA );\n \n+        CategoryOption categoryOption1 = new CategoryOption(\"male\");\n+        categoryOption1.setAutoFields();\n+        CategoryOption categoryOption2 = new CategoryOption(\"female\");\n+        categoryOption2.setAutoFields();\n+        manager.save( Lists.newArrayList( categoryOption1, categoryOption2 ) );\n+\n+        Category cat1 = new Category( \"cat1\", DataDimensionType.DISAGGREGATION );\n+        cat1.setCategoryOptions( Lists.newArrayList(categoryOption1, categoryOption2));", "originalCommit": "dc20b8a9249359bcdd1f612b1852f728ef63b7ab", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d0687a6c7c9e1c4dd64c4dc669bb80ae6e8c8c8b", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java\nindex 609c600143..362520472c 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java\n", "chunk": "@@ -169,14 +169,14 @@ public class EventImportTest\n \n         trackedEntityInstanceMaleA = trackedEntityInstanceService.getTrackedEntityInstance( maleA );\n \n-        CategoryOption categoryOption1 = new CategoryOption(\"male\");\n+        CategoryOption categoryOption1 = new CategoryOption( \"male\" );\n         categoryOption1.setAutoFields();\n-        CategoryOption categoryOption2 = new CategoryOption(\"female\");\n+        CategoryOption categoryOption2 = new CategoryOption( \"female\" );\n         categoryOption2.setAutoFields();\n         manager.save( Lists.newArrayList( categoryOption1, categoryOption2 ) );\n \n         Category cat1 = new Category( \"cat1\", DataDimensionType.DISAGGREGATION );\n-        cat1.setCategoryOptions( Lists.newArrayList(categoryOption1, categoryOption2));\n+        cat1.setCategoryOptions( Lists.newArrayList( categoryOption1, categoryOption2 ) );\n         manager.save( Lists.newArrayList( cat1  ) );\n \n         CategoryCombo categoryCombo = manager.getByName( CategoryCombo.class, \"default\" );\n", "next_change": {"commit": "d360652a896bee650a842567e26cd1e62145cccb", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java\nindex 362520472c..609c600143 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java\n", "chunk": "@@ -169,14 +169,14 @@ public class EventImportTest\n \n         trackedEntityInstanceMaleA = trackedEntityInstanceService.getTrackedEntityInstance( maleA );\n \n-        CategoryOption categoryOption1 = new CategoryOption( \"male\" );\n+        CategoryOption categoryOption1 = new CategoryOption(\"male\");\n         categoryOption1.setAutoFields();\n-        CategoryOption categoryOption2 = new CategoryOption( \"female\" );\n+        CategoryOption categoryOption2 = new CategoryOption(\"female\");\n         categoryOption2.setAutoFields();\n         manager.save( Lists.newArrayList( categoryOption1, categoryOption2 ) );\n \n         Category cat1 = new Category( \"cat1\", DataDimensionType.DISAGGREGATION );\n-        cat1.setCategoryOptions( Lists.newArrayList( categoryOption1, categoryOption2 ) );\n+        cat1.setCategoryOptions( Lists.newArrayList(categoryOption1, categoryOption2));\n         manager.save( Lists.newArrayList( cat1  ) );\n \n         CategoryCombo categoryCombo = manager.getByName( CategoryCombo.class, \"default\" );\n", "next_change": {"commit": "85c947b7cdb2c98af0c8d892a8fbc9f65784abe3", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java\nindex 609c600143..362520472c 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java\n", "chunk": "@@ -169,14 +169,14 @@ public class EventImportTest\n \n         trackedEntityInstanceMaleA = trackedEntityInstanceService.getTrackedEntityInstance( maleA );\n \n-        CategoryOption categoryOption1 = new CategoryOption(\"male\");\n+        CategoryOption categoryOption1 = new CategoryOption( \"male\" );\n         categoryOption1.setAutoFields();\n-        CategoryOption categoryOption2 = new CategoryOption(\"female\");\n+        CategoryOption categoryOption2 = new CategoryOption( \"female\" );\n         categoryOption2.setAutoFields();\n         manager.save( Lists.newArrayList( categoryOption1, categoryOption2 ) );\n \n         Category cat1 = new Category( \"cat1\", DataDimensionType.DISAGGREGATION );\n-        cat1.setCategoryOptions( Lists.newArrayList(categoryOption1, categoryOption2));\n+        cat1.setCategoryOptions( Lists.newArrayList( categoryOption1, categoryOption2 ) );\n         manager.save( Lists.newArrayList( cat1  ) );\n \n         CategoryCombo categoryCombo = manager.getByName( CategoryCombo.class, \"default\" );\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java\nindex 609c600143..362520472c 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java\n", "chunk": "@@ -169,14 +169,14 @@ public class EventImportTest\n \n         trackedEntityInstanceMaleA = trackedEntityInstanceService.getTrackedEntityInstance( maleA );\n \n-        CategoryOption categoryOption1 = new CategoryOption(\"male\");\n+        CategoryOption categoryOption1 = new CategoryOption( \"male\" );\n         categoryOption1.setAutoFields();\n-        CategoryOption categoryOption2 = new CategoryOption(\"female\");\n+        CategoryOption categoryOption2 = new CategoryOption( \"female\" );\n         categoryOption2.setAutoFields();\n         manager.save( Lists.newArrayList( categoryOption1, categoryOption2 ) );\n \n         Category cat1 = new Category( \"cat1\", DataDimensionType.DISAGGREGATION );\n-        cat1.setCategoryOptions( Lists.newArrayList(categoryOption1, categoryOption2));\n+        cat1.setCategoryOptions( Lists.newArrayList( categoryOption1, categoryOption2 ) );\n         manager.save( Lists.newArrayList( cat1  ) );\n \n         CategoryCombo categoryCombo = manager.getByName( CategoryCombo.class, \"default\" );\n", "next_change": {"commit": "ea76fa86409613c9766d4508d65c88ac55c413c3", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java\nindex 362520472c..1e6990e970 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java\n", "chunk": "@@ -177,7 +190,7 @@ public class EventImportTest\n \n         Category cat1 = new Category( \"cat1\", DataDimensionType.DISAGGREGATION );\n         cat1.setCategoryOptions( Lists.newArrayList( categoryOption1, categoryOption2 ) );\n-        manager.save( Lists.newArrayList( cat1  ) );\n+        manager.save( Lists.newArrayList( cat1 ) );\n \n         CategoryCombo categoryCombo = manager.getByName( CategoryCombo.class, \"default\" );\n         categoryCombo.setCategories( Lists.newArrayList( cat1 ) );\n", "next_change": {"commit": "791d88a293341abb24c5b28eb16f9fc3c51ce715", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java\nindex 1e6990e970..5ff31b7253 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java\n", "chunk": "@@ -189,6 +189,7 @@ public class EventImportTest\n         manager.save( Lists.newArrayList( categoryOption1, categoryOption2 ) );\n \n         Category cat1 = new Category( \"cat1\", DataDimensionType.DISAGGREGATION );\n+        cat1.setShortName( cat1.getName() );\n         cat1.setCategoryOptions( Lists.newArrayList( categoryOption1, categoryOption2 ) );\n         manager.save( Lists.newArrayList( cat1 ) );\n \n", "next_change": {"commit": "22d5da9d9a812b02eb5acd643112a6b050b5d63c", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java\nindex 5ff31b7253..a5ed6ce960 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java\n", "chunk": "@@ -165,107 +170,83 @@ public class EventImportTest\n         throws Exception\n     {\n         userService = _userService;\n-\n         organisationUnitA = createOrganisationUnit( 'A' );\n         organisationUnitB = createOrganisationUnit( 'B' );\n         manager.save( organisationUnitA );\n         manager.save( organisationUnitB );\n-\n         TrackedEntityType trackedEntityType = createTrackedEntityType( 'A' );\n         trackedEntityTypeService.addTrackedEntityType( trackedEntityType );\n-\n         org.hisp.dhis.trackedentity.TrackedEntityInstance maleA = createTrackedEntityInstance( organisationUnitA );\n-\n         maleA.setTrackedEntityType( trackedEntityType );\n-\n         manager.save( maleA );\n-\n         trackedEntityInstanceMaleA = trackedEntityInstanceService.getTrackedEntityInstance( maleA );\n-\n         CategoryOption categoryOption1 = new CategoryOption( \"male\" );\n         categoryOption1.setAutoFields();\n         CategoryOption categoryOption2 = new CategoryOption( \"female\" );\n         categoryOption2.setAutoFields();\n         manager.save( Lists.newArrayList( categoryOption1, categoryOption2 ) );\n-\n         Category cat1 = new Category( \"cat1\", DataDimensionType.DISAGGREGATION );\n         cat1.setShortName( cat1.getName() );\n         cat1.setCategoryOptions( Lists.newArrayList( categoryOption1, categoryOption2 ) );\n         manager.save( Lists.newArrayList( cat1 ) );\n-\n         CategoryCombo categoryCombo = manager.getByName( CategoryCombo.class, \"default\" );\n         categoryCombo.setCategories( Lists.newArrayList( cat1 ) );\n-\n         dataElementA = createDataElement( 'A' );\n         dataElementA.setValueType( ValueType.INTEGER );\n         dataElementA.setCategoryCombo( categoryCombo );\n         manager.save( dataElementA );\n-\n         dataElementA2 = createDataElement( 'a' );\n         dataElementA2.setValueType( ValueType.INTEGER );\n         dataElementA2.setCategoryCombo( categoryCombo );\n         manager.save( dataElementA2 );\n-\n         dataElementB = createDataElement( 'B' );\n         dataElementB.setValueType( ValueType.INTEGER );\n         dataElementB.setCategoryCombo( categoryCombo );\n         manager.save( dataElementB );\n-\n         programStageA = createProgramStage( 'A', 0 );\n         programStageA.setFeatureType( FeatureType.POINT );\n         manager.save( programStageA );\n-\n         programStageA2 = createProgramStage( 'a', 0 );\n         programStageA2.setFeatureType( FeatureType.POINT );\n         programStageA2.setRepeatable( true );\n         manager.save( programStageA2 );\n-\n         programStageB = createProgramStage( 'B', 0 );\n         programStageB.setFeatureType( FeatureType.POINT );\n         manager.save( programStageB );\n-\n         programA = createProgram( 'A', new HashSet<>(), organisationUnitA );\n         programA.setProgramType( ProgramType.WITH_REGISTRATION );\n         programA.setCategoryCombo( categoryCombo );\n         manager.save( programA );\n-\n         programB = createProgram( 'B', new HashSet<>(), organisationUnitB );\n         programB.setProgramType( ProgramType.WITHOUT_REGISTRATION );\n         programB.setCategoryCombo( categoryCombo );\n         manager.save( programB );\n-\n         ProgramStageDataElement programStageDataElement = new ProgramStageDataElement();\n         programStageDataElement.setDataElement( dataElementA );\n         programStageDataElement.setProgramStage( programStageA );\n         programStageDataElementService.addProgramStageDataElement( programStageDataElement );\n-\n         ProgramStageDataElement programStageDataElementA2 = new ProgramStageDataElement();\n         programStageDataElementA2.setDataElement( dataElementA2 );\n         programStageDataElementA2.setProgramStage( programStageA2 );\n         programStageDataElementService.addProgramStageDataElement( programStageDataElementA2 );\n-\n         ProgramStageDataElement programStageDataElementB = new ProgramStageDataElement();\n         programStageDataElementB.setDataElement( dataElementB );\n         programStageDataElementB.setProgramStage( programStageB );\n         programStageDataElementService.addProgramStageDataElement( programStageDataElementB );\n-\n         programStageA.getProgramStageDataElements().add( programStageDataElement );\n         programStageA2.getProgramStageDataElements().add( programStageDataElementA2 );\n         programStageA.setProgram( programA );\n         programStageA2.setProgram( programA );\n         programA.getProgramStages().add( programStageA );\n         programA.getProgramStages().add( programStageA2 );\n-\n         programStageB.getProgramStageDataElements().add( programStageDataElementB );\n         programStageB.setProgram( programB );\n         programB.getProgramStages().add( programStageB );\n-\n         manager.update( programStageA );\n         manager.update( programStageA2 );\n         manager.update( programA );\n         manager.update( programStageB );\n         manager.update( programB );\n-\n         pi = new ProgramInstance();\n         pi.setEnrollmentDate( new Date() );\n         pi.setIncidentDate( new Date() );\n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "message": "Merge commit", "committedDate": null}, {"oid": "1bd8ee38126fbac22f805db44dad0cdcba7b14a6", "committedDate": "2020-09-23 11:30:37 +0200", "message": "fix: allow updating an Event with File data type [DHIS2-9559]"}, {"oid": "c8bef4f937b0a3719a7227c088751f689b6003f1", "committedDate": "2020-10-02 09:17:15 +0200", "message": "fix: [DHIS2-8872] Fix import summary count for events in enrollment (#6257)"}, {"oid": "c9aa7729514346e42a6f1957d20bf1f1ad4641d0", "committedDate": "2020-10-28 11:27:13 +0100", "message": "chore: remove junit and hamcrest related warnings (#6504)"}, {"oid": "276f2354d945b8f34a5f2fd64681b28476c049e6", "committedDate": "2020-11-25 08:51:52 +0100", "message": "chore: Remove unused imports and fix code style issues (#6746)"}, {"oid": "7098e9412b922ed70f8136f30c7d790e27bb43be", "committedDate": "2020-12-10 10:43:44 +0100", "message": "chore: Remove unused imports (#6875)"}, {"oid": "3e25b9b834757233501b068c1fd96b5b68cc22f7", "committedDate": "2020-12-22 12:59:13 +0100", "message": "feat: Convert sharing objects to JSONB structure [DHIS2-5814]"}, {"oid": "5e4669b4c89c809989ea600900735dd71baa86e2", "committedDate": "2020-12-23 14:00:18 +0700", "message": "feat: Upgrade Hibernate  (#6939)"}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "791d88a293341abb24c5b28eb16f9fc3c51ce715", "committedDate": "2021-02-11 10:53:22 +0100", "message": "fix: add short name column to Category, DEGroupSet, OUGroupSet [DHIS2-8937]"}, {"oid": "e9aa95cda06ed418fa24c389b38cde8afe364c2f", "committedDate": "2021-09-27 10:03:35 +0200", "message": "fix: teis lastupdated update (#8808)"}, {"oid": "22d5da9d9a812b02eb5acd643112a6b050b5d63c", "committedDate": "2021-12-16 13:19:38 +0100", "message": "chore: migrate tests to JUnit 5 (#9467)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "3b0b47ad71356c18612be63b2d9c42155d007bde", "committedDate": "2022-03-25 07:51:39 +0100", "message": "chore: Clean up all service modules to remove all the warnings from analyze [TECH-801] (#10287)"}, {"oid": "d99da048b6427aa16b080ab0a0e25eda4a2a0f96", "committedDate": "2022-05-09 13:53:18 +0200", "message": "feat: Refactor getCurrentUser() to return DHIS2 User object 2 (#10600)"}, {"oid": "16ff9f07782d088d8e9e4d6c0dd7ed486dbca59e", "committedDate": "2022-05-25 09:34:37 +0200", "message": "fix: Revert the current user session detachment (#10868)"}, {"oid": "ae6806774b896dcc69a99687ce331d60d40995c7", "committedDate": "2022-06-02 09:20:44 +0200", "message": "chore: Refactor JdbcTemplate to NamedParameterJdbcTemplate (#10767)"}, {"oid": "6e83eba877030575456f919de1bce55fcae8e517", "committedDate": "2022-06-24 10:01:46 +0200", "message": "test: move all integration tests into own module TECH-1209 (#11148)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY1MzIwOA==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r461653208", "body": "```suggestion\r\n        CategoryOption categoryOption1 = new CategoryOption( \"male\" );\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    CategoryOption categoryOption1 = new CategoryOption(\"male\");\n          \n          \n            \n                    CategoryOption categoryOption1 = new CategoryOption( \"male\" );", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-smi\">CategoryOption</span> categoryOption1 <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">CategoryOption</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>male<span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-smi\">CategoryOption</span> categoryOption1 <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">CategoryOption</span>(<span class=\"x x-first x-last\"> </span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>male<span class=\"pl-pds\">\"</span></span><span class=\"x x-first x-last\"> </span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "stian-sandvold", "createdAt": "2020-07-28T15:02:02Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java", "diffHunk": "@@ -150,16 +169,32 @@ protected void setUpTest()\n \n         trackedEntityInstanceMaleA = trackedEntityInstanceService.getTrackedEntityInstance( maleA );\n \n+        CategoryOption categoryOption1 = new CategoryOption(\"male\");", "originalCommit": "dc20b8a9249359bcdd1f612b1852f728ef63b7ab", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d0687a6c7c9e1c4dd64c4dc669bb80ae6e8c8c8b", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java\nindex 609c600143..362520472c 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java\n", "chunk": "@@ -169,14 +169,14 @@ public class EventImportTest\n \n         trackedEntityInstanceMaleA = trackedEntityInstanceService.getTrackedEntityInstance( maleA );\n \n-        CategoryOption categoryOption1 = new CategoryOption(\"male\");\n+        CategoryOption categoryOption1 = new CategoryOption( \"male\" );\n         categoryOption1.setAutoFields();\n-        CategoryOption categoryOption2 = new CategoryOption(\"female\");\n+        CategoryOption categoryOption2 = new CategoryOption( \"female\" );\n         categoryOption2.setAutoFields();\n         manager.save( Lists.newArrayList( categoryOption1, categoryOption2 ) );\n \n         Category cat1 = new Category( \"cat1\", DataDimensionType.DISAGGREGATION );\n-        cat1.setCategoryOptions( Lists.newArrayList(categoryOption1, categoryOption2));\n+        cat1.setCategoryOptions( Lists.newArrayList( categoryOption1, categoryOption2 ) );\n         manager.save( Lists.newArrayList( cat1  ) );\n \n         CategoryCombo categoryCombo = manager.getByName( CategoryCombo.class, \"default\" );\n", "next_change": {"commit": "d360652a896bee650a842567e26cd1e62145cccb", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java\nindex 362520472c..609c600143 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java\n", "chunk": "@@ -169,14 +169,14 @@ public class EventImportTest\n \n         trackedEntityInstanceMaleA = trackedEntityInstanceService.getTrackedEntityInstance( maleA );\n \n-        CategoryOption categoryOption1 = new CategoryOption( \"male\" );\n+        CategoryOption categoryOption1 = new CategoryOption(\"male\");\n         categoryOption1.setAutoFields();\n-        CategoryOption categoryOption2 = new CategoryOption( \"female\" );\n+        CategoryOption categoryOption2 = new CategoryOption(\"female\");\n         categoryOption2.setAutoFields();\n         manager.save( Lists.newArrayList( categoryOption1, categoryOption2 ) );\n \n         Category cat1 = new Category( \"cat1\", DataDimensionType.DISAGGREGATION );\n-        cat1.setCategoryOptions( Lists.newArrayList( categoryOption1, categoryOption2 ) );\n+        cat1.setCategoryOptions( Lists.newArrayList(categoryOption1, categoryOption2));\n         manager.save( Lists.newArrayList( cat1  ) );\n \n         CategoryCombo categoryCombo = manager.getByName( CategoryCombo.class, \"default\" );\n", "next_change": {"commit": "85c947b7cdb2c98af0c8d892a8fbc9f65784abe3", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java\nindex 609c600143..362520472c 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java\n", "chunk": "@@ -169,14 +169,14 @@ public class EventImportTest\n \n         trackedEntityInstanceMaleA = trackedEntityInstanceService.getTrackedEntityInstance( maleA );\n \n-        CategoryOption categoryOption1 = new CategoryOption(\"male\");\n+        CategoryOption categoryOption1 = new CategoryOption( \"male\" );\n         categoryOption1.setAutoFields();\n-        CategoryOption categoryOption2 = new CategoryOption(\"female\");\n+        CategoryOption categoryOption2 = new CategoryOption( \"female\" );\n         categoryOption2.setAutoFields();\n         manager.save( Lists.newArrayList( categoryOption1, categoryOption2 ) );\n \n         Category cat1 = new Category( \"cat1\", DataDimensionType.DISAGGREGATION );\n-        cat1.setCategoryOptions( Lists.newArrayList(categoryOption1, categoryOption2));\n+        cat1.setCategoryOptions( Lists.newArrayList( categoryOption1, categoryOption2 ) );\n         manager.save( Lists.newArrayList( cat1  ) );\n \n         CategoryCombo categoryCombo = manager.getByName( CategoryCombo.class, \"default\" );\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java\nindex 609c600143..362520472c 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java\n", "chunk": "@@ -169,14 +169,14 @@ public class EventImportTest\n \n         trackedEntityInstanceMaleA = trackedEntityInstanceService.getTrackedEntityInstance( maleA );\n \n-        CategoryOption categoryOption1 = new CategoryOption(\"male\");\n+        CategoryOption categoryOption1 = new CategoryOption( \"male\" );\n         categoryOption1.setAutoFields();\n-        CategoryOption categoryOption2 = new CategoryOption(\"female\");\n+        CategoryOption categoryOption2 = new CategoryOption( \"female\" );\n         categoryOption2.setAutoFields();\n         manager.save( Lists.newArrayList( categoryOption1, categoryOption2 ) );\n \n         Category cat1 = new Category( \"cat1\", DataDimensionType.DISAGGREGATION );\n-        cat1.setCategoryOptions( Lists.newArrayList(categoryOption1, categoryOption2));\n+        cat1.setCategoryOptions( Lists.newArrayList( categoryOption1, categoryOption2 ) );\n         manager.save( Lists.newArrayList( cat1  ) );\n \n         CategoryCombo categoryCombo = manager.getByName( CategoryCombo.class, \"default\" );\n", "next_change": {"commit": "ea76fa86409613c9766d4508d65c88ac55c413c3", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java\nindex 362520472c..1e6990e970 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java\n", "chunk": "@@ -177,7 +190,7 @@ public class EventImportTest\n \n         Category cat1 = new Category( \"cat1\", DataDimensionType.DISAGGREGATION );\n         cat1.setCategoryOptions( Lists.newArrayList( categoryOption1, categoryOption2 ) );\n-        manager.save( Lists.newArrayList( cat1  ) );\n+        manager.save( Lists.newArrayList( cat1 ) );\n \n         CategoryCombo categoryCombo = manager.getByName( CategoryCombo.class, \"default\" );\n         categoryCombo.setCategories( Lists.newArrayList( cat1 ) );\n", "next_change": {"commit": "791d88a293341abb24c5b28eb16f9fc3c51ce715", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java\nindex 1e6990e970..5ff31b7253 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java\n", "chunk": "@@ -189,6 +189,7 @@ public class EventImportTest\n         manager.save( Lists.newArrayList( categoryOption1, categoryOption2 ) );\n \n         Category cat1 = new Category( \"cat1\", DataDimensionType.DISAGGREGATION );\n+        cat1.setShortName( cat1.getName() );\n         cat1.setCategoryOptions( Lists.newArrayList( categoryOption1, categoryOption2 ) );\n         manager.save( Lists.newArrayList( cat1 ) );\n \n", "next_change": {"commit": "22d5da9d9a812b02eb5acd643112a6b050b5d63c", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java\nindex 5ff31b7253..a5ed6ce960 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java\n", "chunk": "@@ -165,107 +170,83 @@ public class EventImportTest\n         throws Exception\n     {\n         userService = _userService;\n-\n         organisationUnitA = createOrganisationUnit( 'A' );\n         organisationUnitB = createOrganisationUnit( 'B' );\n         manager.save( organisationUnitA );\n         manager.save( organisationUnitB );\n-\n         TrackedEntityType trackedEntityType = createTrackedEntityType( 'A' );\n         trackedEntityTypeService.addTrackedEntityType( trackedEntityType );\n-\n         org.hisp.dhis.trackedentity.TrackedEntityInstance maleA = createTrackedEntityInstance( organisationUnitA );\n-\n         maleA.setTrackedEntityType( trackedEntityType );\n-\n         manager.save( maleA );\n-\n         trackedEntityInstanceMaleA = trackedEntityInstanceService.getTrackedEntityInstance( maleA );\n-\n         CategoryOption categoryOption1 = new CategoryOption( \"male\" );\n         categoryOption1.setAutoFields();\n         CategoryOption categoryOption2 = new CategoryOption( \"female\" );\n         categoryOption2.setAutoFields();\n         manager.save( Lists.newArrayList( categoryOption1, categoryOption2 ) );\n-\n         Category cat1 = new Category( \"cat1\", DataDimensionType.DISAGGREGATION );\n         cat1.setShortName( cat1.getName() );\n         cat1.setCategoryOptions( Lists.newArrayList( categoryOption1, categoryOption2 ) );\n         manager.save( Lists.newArrayList( cat1 ) );\n-\n         CategoryCombo categoryCombo = manager.getByName( CategoryCombo.class, \"default\" );\n         categoryCombo.setCategories( Lists.newArrayList( cat1 ) );\n-\n         dataElementA = createDataElement( 'A' );\n         dataElementA.setValueType( ValueType.INTEGER );\n         dataElementA.setCategoryCombo( categoryCombo );\n         manager.save( dataElementA );\n-\n         dataElementA2 = createDataElement( 'a' );\n         dataElementA2.setValueType( ValueType.INTEGER );\n         dataElementA2.setCategoryCombo( categoryCombo );\n         manager.save( dataElementA2 );\n-\n         dataElementB = createDataElement( 'B' );\n         dataElementB.setValueType( ValueType.INTEGER );\n         dataElementB.setCategoryCombo( categoryCombo );\n         manager.save( dataElementB );\n-\n         programStageA = createProgramStage( 'A', 0 );\n         programStageA.setFeatureType( FeatureType.POINT );\n         manager.save( programStageA );\n-\n         programStageA2 = createProgramStage( 'a', 0 );\n         programStageA2.setFeatureType( FeatureType.POINT );\n         programStageA2.setRepeatable( true );\n         manager.save( programStageA2 );\n-\n         programStageB = createProgramStage( 'B', 0 );\n         programStageB.setFeatureType( FeatureType.POINT );\n         manager.save( programStageB );\n-\n         programA = createProgram( 'A', new HashSet<>(), organisationUnitA );\n         programA.setProgramType( ProgramType.WITH_REGISTRATION );\n         programA.setCategoryCombo( categoryCombo );\n         manager.save( programA );\n-\n         programB = createProgram( 'B', new HashSet<>(), organisationUnitB );\n         programB.setProgramType( ProgramType.WITHOUT_REGISTRATION );\n         programB.setCategoryCombo( categoryCombo );\n         manager.save( programB );\n-\n         ProgramStageDataElement programStageDataElement = new ProgramStageDataElement();\n         programStageDataElement.setDataElement( dataElementA );\n         programStageDataElement.setProgramStage( programStageA );\n         programStageDataElementService.addProgramStageDataElement( programStageDataElement );\n-\n         ProgramStageDataElement programStageDataElementA2 = new ProgramStageDataElement();\n         programStageDataElementA2.setDataElement( dataElementA2 );\n         programStageDataElementA2.setProgramStage( programStageA2 );\n         programStageDataElementService.addProgramStageDataElement( programStageDataElementA2 );\n-\n         ProgramStageDataElement programStageDataElementB = new ProgramStageDataElement();\n         programStageDataElementB.setDataElement( dataElementB );\n         programStageDataElementB.setProgramStage( programStageB );\n         programStageDataElementService.addProgramStageDataElement( programStageDataElementB );\n-\n         programStageA.getProgramStageDataElements().add( programStageDataElement );\n         programStageA2.getProgramStageDataElements().add( programStageDataElementA2 );\n         programStageA.setProgram( programA );\n         programStageA2.setProgram( programA );\n         programA.getProgramStages().add( programStageA );\n         programA.getProgramStages().add( programStageA2 );\n-\n         programStageB.getProgramStageDataElements().add( programStageDataElementB );\n         programStageB.setProgram( programB );\n         programB.getProgramStages().add( programStageB );\n-\n         manager.update( programStageA );\n         manager.update( programStageA2 );\n         manager.update( programA );\n         manager.update( programStageB );\n         manager.update( programB );\n-\n         pi = new ProgramInstance();\n         pi.setEnrollmentDate( new Date() );\n         pi.setIncidentDate( new Date() );\n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "message": "Merge commit", "committedDate": null}, {"oid": "1bd8ee38126fbac22f805db44dad0cdcba7b14a6", "committedDate": "2020-09-23 11:30:37 +0200", "message": "fix: allow updating an Event with File data type [DHIS2-9559]"}, {"oid": "c8bef4f937b0a3719a7227c088751f689b6003f1", "committedDate": "2020-10-02 09:17:15 +0200", "message": "fix: [DHIS2-8872] Fix import summary count for events in enrollment (#6257)"}, {"oid": "c9aa7729514346e42a6f1957d20bf1f1ad4641d0", "committedDate": "2020-10-28 11:27:13 +0100", "message": "chore: remove junit and hamcrest related warnings (#6504)"}, {"oid": "276f2354d945b8f34a5f2fd64681b28476c049e6", "committedDate": "2020-11-25 08:51:52 +0100", "message": "chore: Remove unused imports and fix code style issues (#6746)"}, {"oid": "7098e9412b922ed70f8136f30c7d790e27bb43be", "committedDate": "2020-12-10 10:43:44 +0100", "message": "chore: Remove unused imports (#6875)"}, {"oid": "3e25b9b834757233501b068c1fd96b5b68cc22f7", "committedDate": "2020-12-22 12:59:13 +0100", "message": "feat: Convert sharing objects to JSONB structure [DHIS2-5814]"}, {"oid": "5e4669b4c89c809989ea600900735dd71baa86e2", "committedDate": "2020-12-23 14:00:18 +0700", "message": "feat: Upgrade Hibernate  (#6939)"}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "791d88a293341abb24c5b28eb16f9fc3c51ce715", "committedDate": "2021-02-11 10:53:22 +0100", "message": "fix: add short name column to Category, DEGroupSet, OUGroupSet [DHIS2-8937]"}, {"oid": "e9aa95cda06ed418fa24c389b38cde8afe364c2f", "committedDate": "2021-09-27 10:03:35 +0200", "message": "fix: teis lastupdated update (#8808)"}, {"oid": "22d5da9d9a812b02eb5acd643112a6b050b5d63c", "committedDate": "2021-12-16 13:19:38 +0100", "message": "chore: migrate tests to JUnit 5 (#9467)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "3b0b47ad71356c18612be63b2d9c42155d007bde", "committedDate": "2022-03-25 07:51:39 +0100", "message": "chore: Clean up all service modules to remove all the warnings from analyze [TECH-801] (#10287)"}, {"oid": "d99da048b6427aa16b080ab0a0e25eda4a2a0f96", "committedDate": "2022-05-09 13:53:18 +0200", "message": "feat: Refactor getCurrentUser() to return DHIS2 User object 2 (#10600)"}, {"oid": "16ff9f07782d088d8e9e4d6c0dd7ed486dbca59e", "committedDate": "2022-05-25 09:34:37 +0200", "message": "fix: Revert the current user session detachment (#10868)"}, {"oid": "ae6806774b896dcc69a99687ce331d60d40995c7", "committedDate": "2022-06-02 09:20:44 +0200", "message": "chore: Refactor JdbcTemplate to NamedParameterJdbcTemplate (#10767)"}, {"oid": "6e83eba877030575456f919de1bce55fcae8e517", "committedDate": "2022-06-24 10:01:46 +0200", "message": "test: move all integration tests into own module TECH-1209 (#11148)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY1MzM1Mw==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r461653353", "body": "```suggestion\r\n        CategoryOption categoryOption2 = new CategoryOption( \"female\" );\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    CategoryOption categoryOption2 = new CategoryOption(\"female\");\n          \n          \n            \n                    CategoryOption categoryOption2 = new CategoryOption( \"female\" );", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-smi\">CategoryOption</span> categoryOption2 <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">CategoryOption</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>female<span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-smi\">CategoryOption</span> categoryOption2 <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">CategoryOption</span>(<span class=\"x x-first x-last\"> </span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>female<span class=\"pl-pds\">\"</span></span><span class=\"x x-first x-last\"> </span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "stian-sandvold", "createdAt": "2020-07-28T15:02:14Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java", "diffHunk": "@@ -150,16 +169,32 @@ protected void setUpTest()\n \n         trackedEntityInstanceMaleA = trackedEntityInstanceService.getTrackedEntityInstance( maleA );\n \n+        CategoryOption categoryOption1 = new CategoryOption(\"male\");\n+        categoryOption1.setAutoFields();\n+        CategoryOption categoryOption2 = new CategoryOption(\"female\");", "originalCommit": "dc20b8a9249359bcdd1f612b1852f728ef63b7ab", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d0687a6c7c9e1c4dd64c4dc669bb80ae6e8c8c8b", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java\nindex 609c600143..362520472c 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java\n", "chunk": "@@ -169,14 +169,14 @@ public class EventImportTest\n \n         trackedEntityInstanceMaleA = trackedEntityInstanceService.getTrackedEntityInstance( maleA );\n \n-        CategoryOption categoryOption1 = new CategoryOption(\"male\");\n+        CategoryOption categoryOption1 = new CategoryOption( \"male\" );\n         categoryOption1.setAutoFields();\n-        CategoryOption categoryOption2 = new CategoryOption(\"female\");\n+        CategoryOption categoryOption2 = new CategoryOption( \"female\" );\n         categoryOption2.setAutoFields();\n         manager.save( Lists.newArrayList( categoryOption1, categoryOption2 ) );\n \n         Category cat1 = new Category( \"cat1\", DataDimensionType.DISAGGREGATION );\n-        cat1.setCategoryOptions( Lists.newArrayList(categoryOption1, categoryOption2));\n+        cat1.setCategoryOptions( Lists.newArrayList( categoryOption1, categoryOption2 ) );\n         manager.save( Lists.newArrayList( cat1  ) );\n \n         CategoryCombo categoryCombo = manager.getByName( CategoryCombo.class, \"default\" );\n", "next_change": {"commit": "d360652a896bee650a842567e26cd1e62145cccb", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java\nindex 362520472c..609c600143 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java\n", "chunk": "@@ -169,14 +169,14 @@ public class EventImportTest\n \n         trackedEntityInstanceMaleA = trackedEntityInstanceService.getTrackedEntityInstance( maleA );\n \n-        CategoryOption categoryOption1 = new CategoryOption( \"male\" );\n+        CategoryOption categoryOption1 = new CategoryOption(\"male\");\n         categoryOption1.setAutoFields();\n-        CategoryOption categoryOption2 = new CategoryOption( \"female\" );\n+        CategoryOption categoryOption2 = new CategoryOption(\"female\");\n         categoryOption2.setAutoFields();\n         manager.save( Lists.newArrayList( categoryOption1, categoryOption2 ) );\n \n         Category cat1 = new Category( \"cat1\", DataDimensionType.DISAGGREGATION );\n-        cat1.setCategoryOptions( Lists.newArrayList( categoryOption1, categoryOption2 ) );\n+        cat1.setCategoryOptions( Lists.newArrayList(categoryOption1, categoryOption2));\n         manager.save( Lists.newArrayList( cat1  ) );\n \n         CategoryCombo categoryCombo = manager.getByName( CategoryCombo.class, \"default\" );\n", "next_change": {"commit": "85c947b7cdb2c98af0c8d892a8fbc9f65784abe3", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java\nindex 609c600143..362520472c 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java\n", "chunk": "@@ -169,14 +169,14 @@ public class EventImportTest\n \n         trackedEntityInstanceMaleA = trackedEntityInstanceService.getTrackedEntityInstance( maleA );\n \n-        CategoryOption categoryOption1 = new CategoryOption(\"male\");\n+        CategoryOption categoryOption1 = new CategoryOption( \"male\" );\n         categoryOption1.setAutoFields();\n-        CategoryOption categoryOption2 = new CategoryOption(\"female\");\n+        CategoryOption categoryOption2 = new CategoryOption( \"female\" );\n         categoryOption2.setAutoFields();\n         manager.save( Lists.newArrayList( categoryOption1, categoryOption2 ) );\n \n         Category cat1 = new Category( \"cat1\", DataDimensionType.DISAGGREGATION );\n-        cat1.setCategoryOptions( Lists.newArrayList(categoryOption1, categoryOption2));\n+        cat1.setCategoryOptions( Lists.newArrayList( categoryOption1, categoryOption2 ) );\n         manager.save( Lists.newArrayList( cat1  ) );\n \n         CategoryCombo categoryCombo = manager.getByName( CategoryCombo.class, \"default\" );\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java\nindex 609c600143..362520472c 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java\n", "chunk": "@@ -169,14 +169,14 @@ public class EventImportTest\n \n         trackedEntityInstanceMaleA = trackedEntityInstanceService.getTrackedEntityInstance( maleA );\n \n-        CategoryOption categoryOption1 = new CategoryOption(\"male\");\n+        CategoryOption categoryOption1 = new CategoryOption( \"male\" );\n         categoryOption1.setAutoFields();\n-        CategoryOption categoryOption2 = new CategoryOption(\"female\");\n+        CategoryOption categoryOption2 = new CategoryOption( \"female\" );\n         categoryOption2.setAutoFields();\n         manager.save( Lists.newArrayList( categoryOption1, categoryOption2 ) );\n \n         Category cat1 = new Category( \"cat1\", DataDimensionType.DISAGGREGATION );\n-        cat1.setCategoryOptions( Lists.newArrayList(categoryOption1, categoryOption2));\n+        cat1.setCategoryOptions( Lists.newArrayList( categoryOption1, categoryOption2 ) );\n         manager.save( Lists.newArrayList( cat1  ) );\n \n         CategoryCombo categoryCombo = manager.getByName( CategoryCombo.class, \"default\" );\n", "next_change": {"commit": "ea76fa86409613c9766d4508d65c88ac55c413c3", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java\nindex 362520472c..1e6990e970 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java\n", "chunk": "@@ -177,7 +190,7 @@ public class EventImportTest\n \n         Category cat1 = new Category( \"cat1\", DataDimensionType.DISAGGREGATION );\n         cat1.setCategoryOptions( Lists.newArrayList( categoryOption1, categoryOption2 ) );\n-        manager.save( Lists.newArrayList( cat1  ) );\n+        manager.save( Lists.newArrayList( cat1 ) );\n \n         CategoryCombo categoryCombo = manager.getByName( CategoryCombo.class, \"default\" );\n         categoryCombo.setCategories( Lists.newArrayList( cat1 ) );\n", "next_change": {"commit": "791d88a293341abb24c5b28eb16f9fc3c51ce715", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java\nindex 1e6990e970..5ff31b7253 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java\n", "chunk": "@@ -189,6 +189,7 @@ public class EventImportTest\n         manager.save( Lists.newArrayList( categoryOption1, categoryOption2 ) );\n \n         Category cat1 = new Category( \"cat1\", DataDimensionType.DISAGGREGATION );\n+        cat1.setShortName( cat1.getName() );\n         cat1.setCategoryOptions( Lists.newArrayList( categoryOption1, categoryOption2 ) );\n         manager.save( Lists.newArrayList( cat1 ) );\n \n", "next_change": {"commit": "22d5da9d9a812b02eb5acd643112a6b050b5d63c", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java\nindex 5ff31b7253..a5ed6ce960 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java\n", "chunk": "@@ -165,107 +170,83 @@ public class EventImportTest\n         throws Exception\n     {\n         userService = _userService;\n-\n         organisationUnitA = createOrganisationUnit( 'A' );\n         organisationUnitB = createOrganisationUnit( 'B' );\n         manager.save( organisationUnitA );\n         manager.save( organisationUnitB );\n-\n         TrackedEntityType trackedEntityType = createTrackedEntityType( 'A' );\n         trackedEntityTypeService.addTrackedEntityType( trackedEntityType );\n-\n         org.hisp.dhis.trackedentity.TrackedEntityInstance maleA = createTrackedEntityInstance( organisationUnitA );\n-\n         maleA.setTrackedEntityType( trackedEntityType );\n-\n         manager.save( maleA );\n-\n         trackedEntityInstanceMaleA = trackedEntityInstanceService.getTrackedEntityInstance( maleA );\n-\n         CategoryOption categoryOption1 = new CategoryOption( \"male\" );\n         categoryOption1.setAutoFields();\n         CategoryOption categoryOption2 = new CategoryOption( \"female\" );\n         categoryOption2.setAutoFields();\n         manager.save( Lists.newArrayList( categoryOption1, categoryOption2 ) );\n-\n         Category cat1 = new Category( \"cat1\", DataDimensionType.DISAGGREGATION );\n         cat1.setShortName( cat1.getName() );\n         cat1.setCategoryOptions( Lists.newArrayList( categoryOption1, categoryOption2 ) );\n         manager.save( Lists.newArrayList( cat1 ) );\n-\n         CategoryCombo categoryCombo = manager.getByName( CategoryCombo.class, \"default\" );\n         categoryCombo.setCategories( Lists.newArrayList( cat1 ) );\n-\n         dataElementA = createDataElement( 'A' );\n         dataElementA.setValueType( ValueType.INTEGER );\n         dataElementA.setCategoryCombo( categoryCombo );\n         manager.save( dataElementA );\n-\n         dataElementA2 = createDataElement( 'a' );\n         dataElementA2.setValueType( ValueType.INTEGER );\n         dataElementA2.setCategoryCombo( categoryCombo );\n         manager.save( dataElementA2 );\n-\n         dataElementB = createDataElement( 'B' );\n         dataElementB.setValueType( ValueType.INTEGER );\n         dataElementB.setCategoryCombo( categoryCombo );\n         manager.save( dataElementB );\n-\n         programStageA = createProgramStage( 'A', 0 );\n         programStageA.setFeatureType( FeatureType.POINT );\n         manager.save( programStageA );\n-\n         programStageA2 = createProgramStage( 'a', 0 );\n         programStageA2.setFeatureType( FeatureType.POINT );\n         programStageA2.setRepeatable( true );\n         manager.save( programStageA2 );\n-\n         programStageB = createProgramStage( 'B', 0 );\n         programStageB.setFeatureType( FeatureType.POINT );\n         manager.save( programStageB );\n-\n         programA = createProgram( 'A', new HashSet<>(), organisationUnitA );\n         programA.setProgramType( ProgramType.WITH_REGISTRATION );\n         programA.setCategoryCombo( categoryCombo );\n         manager.save( programA );\n-\n         programB = createProgram( 'B', new HashSet<>(), organisationUnitB );\n         programB.setProgramType( ProgramType.WITHOUT_REGISTRATION );\n         programB.setCategoryCombo( categoryCombo );\n         manager.save( programB );\n-\n         ProgramStageDataElement programStageDataElement = new ProgramStageDataElement();\n         programStageDataElement.setDataElement( dataElementA );\n         programStageDataElement.setProgramStage( programStageA );\n         programStageDataElementService.addProgramStageDataElement( programStageDataElement );\n-\n         ProgramStageDataElement programStageDataElementA2 = new ProgramStageDataElement();\n         programStageDataElementA2.setDataElement( dataElementA2 );\n         programStageDataElementA2.setProgramStage( programStageA2 );\n         programStageDataElementService.addProgramStageDataElement( programStageDataElementA2 );\n-\n         ProgramStageDataElement programStageDataElementB = new ProgramStageDataElement();\n         programStageDataElementB.setDataElement( dataElementB );\n         programStageDataElementB.setProgramStage( programStageB );\n         programStageDataElementService.addProgramStageDataElement( programStageDataElementB );\n-\n         programStageA.getProgramStageDataElements().add( programStageDataElement );\n         programStageA2.getProgramStageDataElements().add( programStageDataElementA2 );\n         programStageA.setProgram( programA );\n         programStageA2.setProgram( programA );\n         programA.getProgramStages().add( programStageA );\n         programA.getProgramStages().add( programStageA2 );\n-\n         programStageB.getProgramStageDataElements().add( programStageDataElementB );\n         programStageB.setProgram( programB );\n         programB.getProgramStages().add( programStageB );\n-\n         manager.update( programStageA );\n         manager.update( programStageA2 );\n         manager.update( programA );\n         manager.update( programStageB );\n         manager.update( programB );\n-\n         pi = new ProgramInstance();\n         pi.setEnrollmentDate( new Date() );\n         pi.setIncidentDate( new Date() );\n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "message": "Merge commit", "committedDate": null}, {"oid": "1bd8ee38126fbac22f805db44dad0cdcba7b14a6", "committedDate": "2020-09-23 11:30:37 +0200", "message": "fix: allow updating an Event with File data type [DHIS2-9559]"}, {"oid": "c8bef4f937b0a3719a7227c088751f689b6003f1", "committedDate": "2020-10-02 09:17:15 +0200", "message": "fix: [DHIS2-8872] Fix import summary count for events in enrollment (#6257)"}, {"oid": "c9aa7729514346e42a6f1957d20bf1f1ad4641d0", "committedDate": "2020-10-28 11:27:13 +0100", "message": "chore: remove junit and hamcrest related warnings (#6504)"}, {"oid": "276f2354d945b8f34a5f2fd64681b28476c049e6", "committedDate": "2020-11-25 08:51:52 +0100", "message": "chore: Remove unused imports and fix code style issues (#6746)"}, {"oid": "7098e9412b922ed70f8136f30c7d790e27bb43be", "committedDate": "2020-12-10 10:43:44 +0100", "message": "chore: Remove unused imports (#6875)"}, {"oid": "3e25b9b834757233501b068c1fd96b5b68cc22f7", "committedDate": "2020-12-22 12:59:13 +0100", "message": "feat: Convert sharing objects to JSONB structure [DHIS2-5814]"}, {"oid": "5e4669b4c89c809989ea600900735dd71baa86e2", "committedDate": "2020-12-23 14:00:18 +0700", "message": "feat: Upgrade Hibernate  (#6939)"}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "791d88a293341abb24c5b28eb16f9fc3c51ce715", "committedDate": "2021-02-11 10:53:22 +0100", "message": "fix: add short name column to Category, DEGroupSet, OUGroupSet [DHIS2-8937]"}, {"oid": "e9aa95cda06ed418fa24c389b38cde8afe364c2f", "committedDate": "2021-09-27 10:03:35 +0200", "message": "fix: teis lastupdated update (#8808)"}, {"oid": "22d5da9d9a812b02eb5acd643112a6b050b5d63c", "committedDate": "2021-12-16 13:19:38 +0100", "message": "chore: migrate tests to JUnit 5 (#9467)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "3b0b47ad71356c18612be63b2d9c42155d007bde", "committedDate": "2022-03-25 07:51:39 +0100", "message": "chore: Clean up all service modules to remove all the warnings from analyze [TECH-801] (#10287)"}, {"oid": "d99da048b6427aa16b080ab0a0e25eda4a2a0f96", "committedDate": "2022-05-09 13:53:18 +0200", "message": "feat: Refactor getCurrentUser() to return DHIS2 User object 2 (#10600)"}, {"oid": "16ff9f07782d088d8e9e4d6c0dd7ed486dbca59e", "committedDate": "2022-05-25 09:34:37 +0200", "message": "fix: Revert the current user session detachment (#10868)"}, {"oid": "ae6806774b896dcc69a99687ce331d60d40995c7", "committedDate": "2022-06-02 09:20:44 +0200", "message": "chore: Refactor JdbcTemplate to NamedParameterJdbcTemplate (#10767)"}, {"oid": "6e83eba877030575456f919de1bce55fcae8e517", "committedDate": "2022-06-24 10:01:46 +0200", "message": "test: move all integration tests into own module TECH-1209 (#11148)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY1MzU4Mg==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r461653582", "body": "```suggestion\r\n        pi.setName( \"EventImportTestPI\" );\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    pi.setName(\"EventImportTestPI\");\n          \n          \n            \n                    pi.setName( \"EventImportTestPI\" );", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        pi<span class=\"pl-k\">.</span>setName(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>EventImportTestPI<span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        pi<span class=\"pl-k\">.</span>setName(<span class=\"x x-first x-last\"> </span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>EventImportTestPI<span class=\"pl-pds\">\"</span></span><span class=\"x x-first x-last\"> </span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "stian-sandvold", "createdAt": "2020-07-28T15:02:32Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java", "diffHunk": "@@ -221,10 +258,16 @@ protected void setUpTest()\n         pi.setProgram( programB );\n         pi.setStatus( ProgramStatus.ACTIVE );\n         pi.setStoredBy( \"test\" );\n+        pi.setName(\"EventImportTestPI\");", "originalCommit": "dc20b8a9249359bcdd1f612b1852f728ef63b7ab", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d0687a6c7c9e1c4dd64c4dc669bb80ae6e8c8c8b", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java\nindex 609c600143..362520472c 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java\n", "chunk": "@@ -258,7 +258,7 @@ public class EventImportTest\n         pi.setProgram( programB );\n         pi.setStatus( ProgramStatus.ACTIVE );\n         pi.setStoredBy( \"test\" );\n-        pi.setName(\"EventImportTestPI\");\n+        pi.setName( \"EventImportTestPI\" );\n         pi.setUid( CodeGenerator.generateUid() );\n         manager.save( pi );\n \n", "next_change": {"commit": "d360652a896bee650a842567e26cd1e62145cccb", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java\nindex 362520472c..609c600143 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java\n", "chunk": "@@ -258,7 +258,7 @@ public class EventImportTest\n         pi.setProgram( programB );\n         pi.setStatus( ProgramStatus.ACTIVE );\n         pi.setStoredBy( \"test\" );\n-        pi.setName( \"EventImportTestPI\" );\n+        pi.setName(\"EventImportTestPI\");\n         pi.setUid( CodeGenerator.generateUid() );\n         manager.save( pi );\n \n", "next_change": {"commit": "85c947b7cdb2c98af0c8d892a8fbc9f65784abe3", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java\nindex 609c600143..362520472c 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java\n", "chunk": "@@ -258,7 +258,7 @@ public class EventImportTest\n         pi.setProgram( programB );\n         pi.setStatus( ProgramStatus.ACTIVE );\n         pi.setStoredBy( \"test\" );\n-        pi.setName(\"EventImportTestPI\");\n+        pi.setName( \"EventImportTestPI\" );\n         pi.setUid( CodeGenerator.generateUid() );\n         manager.save( pi );\n \n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java\nindex 609c600143..362520472c 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java\n", "chunk": "@@ -258,7 +258,7 @@ public class EventImportTest\n         pi.setProgram( programB );\n         pi.setStatus( ProgramStatus.ACTIVE );\n         pi.setStoredBy( \"test\" );\n-        pi.setName(\"EventImportTestPI\");\n+        pi.setName( \"EventImportTestPI\" );\n         pi.setUid( CodeGenerator.generateUid() );\n         manager.save( pi );\n \n", "next_change": {"commit": "22d5da9d9a812b02eb5acd643112a6b050b5d63c", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java\nindex 362520472c..a5ed6ce960 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java\n", "chunk": "@@ -261,17 +256,14 @@ public class EventImportTest\n         pi.setName( \"EventImportTestPI\" );\n         pi.setUid( CodeGenerator.generateUid() );\n         manager.save( pi );\n-\n         event = createEvent( \"eventUid001\" );\n-\n         createUserAndInjectSecurityContext( true );\n-\n         // Flush all data to disk\n         manager.flush();\n     }\n \n     @Test\n-    public void testAddEventOnProgramWithoutRegistration()\n+    void testAddEventOnProgramWithoutRegistration()\n         throws IOException\n     {\n         InputStream is = createEventJsonInputStream( programB.getUid(), programStageB.getUid(),\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "message": "Merge commit", "committedDate": null}, {"oid": "1bd8ee38126fbac22f805db44dad0cdcba7b14a6", "committedDate": "2020-09-23 11:30:37 +0200", "message": "fix: allow updating an Event with File data type [DHIS2-9559]"}, {"oid": "c8bef4f937b0a3719a7227c088751f689b6003f1", "committedDate": "2020-10-02 09:17:15 +0200", "message": "fix: [DHIS2-8872] Fix import summary count for events in enrollment (#6257)"}, {"oid": "c9aa7729514346e42a6f1957d20bf1f1ad4641d0", "committedDate": "2020-10-28 11:27:13 +0100", "message": "chore: remove junit and hamcrest related warnings (#6504)"}, {"oid": "276f2354d945b8f34a5f2fd64681b28476c049e6", "committedDate": "2020-11-25 08:51:52 +0100", "message": "chore: Remove unused imports and fix code style issues (#6746)"}, {"oid": "7098e9412b922ed70f8136f30c7d790e27bb43be", "committedDate": "2020-12-10 10:43:44 +0100", "message": "chore: Remove unused imports (#6875)"}, {"oid": "3e25b9b834757233501b068c1fd96b5b68cc22f7", "committedDate": "2020-12-22 12:59:13 +0100", "message": "feat: Convert sharing objects to JSONB structure [DHIS2-5814]"}, {"oid": "5e4669b4c89c809989ea600900735dd71baa86e2", "committedDate": "2020-12-23 14:00:18 +0700", "message": "feat: Upgrade Hibernate  (#6939)"}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "791d88a293341abb24c5b28eb16f9fc3c51ce715", "committedDate": "2021-02-11 10:53:22 +0100", "message": "fix: add short name column to Category, DEGroupSet, OUGroupSet [DHIS2-8937]"}, {"oid": "e9aa95cda06ed418fa24c389b38cde8afe364c2f", "committedDate": "2021-09-27 10:03:35 +0200", "message": "fix: teis lastupdated update (#8808)"}, {"oid": "22d5da9d9a812b02eb5acd643112a6b050b5d63c", "committedDate": "2021-12-16 13:19:38 +0100", "message": "chore: migrate tests to JUnit 5 (#9467)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "3b0b47ad71356c18612be63b2d9c42155d007bde", "committedDate": "2022-03-25 07:51:39 +0100", "message": "chore: Clean up all service modules to remove all the warnings from analyze [TECH-801] (#10287)"}, {"oid": "d99da048b6427aa16b080ab0a0e25eda4a2a0f96", "committedDate": "2022-05-09 13:53:18 +0200", "message": "feat: Refactor getCurrentUser() to return DHIS2 User object 2 (#10600)"}, {"oid": "16ff9f07782d088d8e9e4d6c0dd7ed486dbca59e", "committedDate": "2022-05-25 09:34:37 +0200", "message": "fix: Revert the current user session detachment (#10868)"}, {"oid": "ae6806774b896dcc69a99687ce331d60d40995c7", "committedDate": "2022-06-02 09:20:44 +0200", "message": "chore: Refactor JdbcTemplate to NamedParameterJdbcTemplate (#10767)"}, {"oid": "6e83eba877030575456f919de1bce55fcae8e517", "committedDate": "2022-06-24 10:01:46 +0200", "message": "test: move all integration tests into own module TECH-1209 (#11148)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY1NDU4Nw==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r461654587", "body": "In this case, the test doesnt not indicate it should have more than 1 enrollment, so this seems like a problem with the test.", "bodyText": "In this case, the test doesnt not indicate it should have more than 1 enrollment, so this seems like a problem with the test.", "bodyHTML": "<p dir=\"auto\">In this case, the test doesnt not indicate it should have more than 1 enrollment, so this seems like a problem with the test.</p>", "author": "stian-sandvold", "createdAt": "2020-07-28T15:03:58Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java", "diffHunk": "@@ -237,7 +280,12 @@ public void testAddEventOnProgramWithoutRegistration()\n         assertEquals( ImportStatus.SUCCESS, importSummaries.getStatus() );\n     }\n \n+    /**\n+     * TODO:  LUCIANO: this test has been ignored because the Importer should not import an event linked to a Program\n+     * with 2 or more Program Instances\n+     */\n     @Test\n+    @Ignore", "originalCommit": "dc20b8a9249359bcdd1f612b1852f728ef63b7ab", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "ea76fa86409613c9766d4508d65c88ac55c413c3", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java\nindex 609c600143..1e6990e970 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java\n", "chunk": "@@ -281,8 +294,8 @@ public class EventImportTest\n     }\n \n     /**\n-     * TODO:  LUCIANO: this test has been ignored because the Importer should not import an event linked to a Program\n-     * with 2 or more Program Instances\n+     * TODO: LUCIANO: this test has been ignored because the Importer should not\n+     * import an event linked to a Program with 2 or more Program Instances\n      */\n     @Test\n     @Ignore\n", "next_change": {"commit": "22d5da9d9a812b02eb5acd643112a6b050b5d63c", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java\nindex 1e6990e970..a5ed6ce960 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java\n", "chunk": "@@ -298,8 +277,8 @@ public class EventImportTest\n      * import an event linked to a Program with 2 or more Program Instances\n      */\n     @Test\n-    @Ignore\n-    public void testAddEventOnProgramWithoutRegistrationAndExistingProgramInstance()\n+    @Disabled\n+    void testAddEventOnProgramWithoutRegistrationAndExistingProgramInstance()\n         throws IOException\n     {\n         ProgramInstance pi = new ProgramInstance();\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "message": "Merge commit", "committedDate": null}, {"oid": "1bd8ee38126fbac22f805db44dad0cdcba7b14a6", "committedDate": "2020-09-23 11:30:37 +0200", "message": "fix: allow updating an Event with File data type [DHIS2-9559]"}, {"oid": "c8bef4f937b0a3719a7227c088751f689b6003f1", "committedDate": "2020-10-02 09:17:15 +0200", "message": "fix: [DHIS2-8872] Fix import summary count for events in enrollment (#6257)"}, {"oid": "c9aa7729514346e42a6f1957d20bf1f1ad4641d0", "committedDate": "2020-10-28 11:27:13 +0100", "message": "chore: remove junit and hamcrest related warnings (#6504)"}, {"oid": "276f2354d945b8f34a5f2fd64681b28476c049e6", "committedDate": "2020-11-25 08:51:52 +0100", "message": "chore: Remove unused imports and fix code style issues (#6746)"}, {"oid": "7098e9412b922ed70f8136f30c7d790e27bb43be", "committedDate": "2020-12-10 10:43:44 +0100", "message": "chore: Remove unused imports (#6875)"}, {"oid": "3e25b9b834757233501b068c1fd96b5b68cc22f7", "committedDate": "2020-12-22 12:59:13 +0100", "message": "feat: Convert sharing objects to JSONB structure [DHIS2-5814]"}, {"oid": "5e4669b4c89c809989ea600900735dd71baa86e2", "committedDate": "2020-12-23 14:00:18 +0700", "message": "feat: Upgrade Hibernate  (#6939)"}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "791d88a293341abb24c5b28eb16f9fc3c51ce715", "committedDate": "2021-02-11 10:53:22 +0100", "message": "fix: add short name column to Category, DEGroupSet, OUGroupSet [DHIS2-8937]"}, {"oid": "e9aa95cda06ed418fa24c389b38cde8afe364c2f", "committedDate": "2021-09-27 10:03:35 +0200", "message": "fix: teis lastupdated update (#8808)"}, {"oid": "22d5da9d9a812b02eb5acd643112a6b050b5d63c", "committedDate": "2021-12-16 13:19:38 +0100", "message": "chore: migrate tests to JUnit 5 (#9467)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "3b0b47ad71356c18612be63b2d9c42155d007bde", "committedDate": "2022-03-25 07:51:39 +0100", "message": "chore: Clean up all service modules to remove all the warnings from analyze [TECH-801] (#10287)"}, {"oid": "d99da048b6427aa16b080ab0a0e25eda4a2a0f96", "committedDate": "2022-05-09 13:53:18 +0200", "message": "feat: Refactor getCurrentUser() to return DHIS2 User object 2 (#10600)"}, {"oid": "16ff9f07782d088d8e9e4d6c0dd7ed486dbca59e", "committedDate": "2022-05-25 09:34:37 +0200", "message": "fix: Revert the current user session detachment (#10868)"}, {"oid": "ae6806774b896dcc69a99687ce331d60d40995c7", "committedDate": "2022-06-02 09:20:44 +0200", "message": "chore: Refactor JdbcTemplate to NamedParameterJdbcTemplate (#10767)"}, {"oid": "6e83eba877030575456f919de1bce55fcae8e517", "committedDate": "2022-06-24 10:01:46 +0200", "message": "test: move all integration tests into own module TECH-1209 (#11148)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY1NDc0Mw==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r461654743", "body": "Unused code", "bodyText": "Unused code", "bodyHTML": "<p dir=\"auto\">Unused code</p>", "author": "stian-sandvold", "createdAt": "2020-07-28T15:04:11Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java", "diffHunk": "@@ -468,21 +512,19 @@ private InputStream createEventJsonInputStream( String program, String programSt\n         dataValue.put( \"dataElement\", dataElement.getUid() );\n         dataValue.put( \"value\", value );\n \n-        JSONObject geometry = new JSONObject();\n-        geometry.put( \"type\", \"Point\" );\n-        JSONArray coordinates = new JSONArray();\n-        coordinates.add( \"1.33343\" );\n-        coordinates.add( \"-21.9954\" );\n-        geometry.put( \"coordinates\", coordinates );\n-        eventJsonPayload.put( \"geometry\", geometry );\n+//        JSONObject geometry = new JSONObject();", "originalCommit": "dc20b8a9249359bcdd1f612b1852f728ef63b7ab", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "c8bef4f937b0a3719a7227c088751f689b6003f1", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java\nindex 609c600143..4b097a4bf3 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java\n", "chunk": "@@ -495,36 +547,182 @@ public class EventImportTest\n         assertEquals( ImportStatus.SUCCESS, importSummaries.getStatus() );\n     }\n \n+    //\n+    // UPDATE EVENT TESTS\n+    //\n+\n+    @Test\n+    public void testVerifyEventCanBeUpdatedUsingProgramOnly2()\n+            throws IOException\n+    {\n+        // CREATE A NEW EVENT\n+        InputStream is = createEventJsonInputStream( programB.getUid(), programStageB.getUid(),\n+                organisationUnitB.getUid(), null, dataElementB, \"10\" );\n+\n+        ImportSummaries importSummaries = eventService.addEventsJson( is, null );\n+        String uid = importSummaries.getImportSummaries().get( 0 ).getReference();\n+        assertEquals( ImportStatus.SUCCESS, importSummaries.getStatus() );\n+\n+        // FETCH NEWLY CREATED EVENT\n+        ProgramStageInstance psi = programStageInstanceService.getProgramStageInstance( uid );\n+\n+        // UPDATE EVENT - Program is not specified\n+        Event event = new Event();\n+        event.setEvent( uid );\n+        event.setStatus( EventStatus.COMPLETED );\n+\n+        final ImportSummary summary = eventService.updateEvent( event, false, ImportOptions.getDefaultImportOptions(),\n+                false );\n+        assertThat( summary.getStatus(), is( ImportStatus.ERROR ) );\n+        assertThat( summary.getDescription(), is( \"Event.program does not point to a valid program: null\" ) );\n+        assertThat( summary.getReference(), is( uid ) );\n+    }\n+\n+    @Test\n+    public void testVerifyEventCanBeUpdatedUsingProgramOnly()\n+            throws IOException\n+    {\n+        // CREATE A NEW EVENT\n+        InputStream is = createEventJsonInputStream( programB.getUid(), programStageB.getUid(),\n+                organisationUnitB.getUid(), null, dataElementB, \"10\" );\n+\n+        ImportSummaries importSummaries = eventService.addEventsJson( is, null );\n+        String uid = importSummaries.getImportSummaries().get( 0 ).getReference();\n+        assertEquals( ImportStatus.SUCCESS, importSummaries.getStatus() );\n+\n+        // FETCH NEWLY CREATED EVENT\n+        ProgramStageInstance psi = programStageInstanceService.getProgramStageInstance( uid );\n+\n+        // UPDATE EVENT (no actual changes, except for empty data value)\n+        // USE ONLY PROGRAM\n+        Event event = new Event();\n+        event.setEvent( uid );\n+        event.setProgram( programB.getUid() );\n+        event.setStatus( EventStatus.COMPLETED );\n+\n+        assertEquals( ImportStatus.SUCCESS,\n+                eventService.updateEvent( event, false, ImportOptions.getDefaultImportOptions(), false ).getStatus() );\n+\n+        cleanSession();\n+\n+        ProgramStageInstance psi2 = programStageInstanceService.getProgramStageInstance( uid );\n+\n+        assertThat( psi.getLastUpdated(), DateMatchers.before( psi2.getLastUpdated() ) );\n+        assertThat( psi.getCreated(), is( psi2.getCreated() ) );\n+        assertThat( psi.getProgramInstance().getUid(), is( psi2.getProgramInstance().getUid() ) );\n+        assertThat( psi.getProgramStage().getUid(), is( psi2.getProgramStage().getUid() ) );\n+        assertThat( psi.getOrganisationUnit().getUid(), is( psi2.getOrganisationUnit().getUid() ) );\n+        assertThat( psi.getAttributeOptionCombo().getUid(), is( psi2.getAttributeOptionCombo().getUid() ) );\n+        assertThat( psi.getStatus().getValue(), is( psi2.getStatus().getValue() ) );\n+        assertThat( psi.getExecutionDate(), is( psi2.getExecutionDate() ) );\n+        assertThat( psi.getCompletedDate(), is( psi2.getCompletedDate() ) );\n+        assertThat( psi.getCompletedBy(), is( psi2.getCompletedBy() ) );\n+        assertThat( psi.isDeleted(), is( psi2.isDeleted() ) );\n+        assertThat( psi.getEventDataValues().size(), is( 1 ) );\n+        assertThat( psi2.getEventDataValues().size(), is( 0 ) );\n+    }\n+\n+    @Test\n+    public void testVerifyEventUncompleteSetsCompletedDateToNull()\n+            throws IOException\n+    {\n+        // CREATE A NEW EVENT\n+        InputStream is = createEventJsonInputStream( programB.getUid(), programStageB.getUid(),\n+                organisationUnitB.getUid(), null, dataElementB, \"10\" );\n+\n+        ImportSummaries importSummaries = eventService.addEventsJson( is, null );\n+        String uid = importSummaries.getImportSummaries().get( 0 ).getReference();\n+        assertEquals( ImportStatus.SUCCESS, importSummaries.getStatus() );\n+\n+        // FETCH NEWLY CREATED EVENT\n+        ProgramStageInstance psi = programStageInstanceService.getProgramStageInstance( uid );\n+\n+        // UPDATE EVENT (no actual changes, except for empty data value and status\n+        // change)\n+        Event event = new Event();\n+        event.setEvent( uid );\n+        event.setProgram( programB.getUid() );\n+        event.setStatus( EventStatus.ACTIVE );\n+\n+        assertEquals( ImportStatus.SUCCESS,\n+                eventService.updateEvent( event, false, ImportOptions.getDefaultImportOptions(), false ).getStatus() );\n+\n+        cleanSession();\n+\n+        ProgramStageInstance psi2 = programStageInstanceService.getProgramStageInstance( uid );\n+\n+        assertThat( psi.getLastUpdated(), DateMatchers.before( psi2.getLastUpdated() ) );\n+        assertThat( psi.getCreated(), is( psi2.getCreated() ) );\n+        assertThat( psi.getProgramInstance().getUid(), is( psi2.getProgramInstance().getUid() ) );\n+        assertThat( psi.getProgramStage().getUid(), is( psi2.getProgramStage().getUid() ) );\n+        assertThat( psi.getOrganisationUnit().getUid(), is( psi2.getOrganisationUnit().getUid() ) );\n+        assertThat( psi.getAttributeOptionCombo().getUid(), is( psi2.getAttributeOptionCombo().getUid() ) );\n+        assertThat( psi2.getStatus(), is( EventStatus.ACTIVE ) );\n+        assertThat( psi.getExecutionDate(), is( psi2.getExecutionDate() ) );\n+        assertThat( psi2.getCompletedDate(), is( nullValue() ) );\n+        assertThat( psi.getCompletedBy(), is( psi2.getCompletedBy() ) );\n+        assertThat( psi.isDeleted(), is( psi2.isDeleted() ) );\n+        assertThat( psi.getEventDataValues().size(), is( 1 ) );\n+        assertThat( psi2.getEventDataValues().size(), is( 0 ) );\n+    }\n+\n+    private void cleanSession()\n+    {\n+        sessionFactory.getCurrentSession().flush();\n+        sessionFactory.getCurrentSession().clear();\n+    }\n+\n+    private InputStream createEventsJsonInputStream( List<Event> events, DataElement dataElement, String value )\n+    {\n+\n+        List<JSONObject> objects = events.stream().map( e -> createEventJSONObject( e, dataElement, value ) )\n+            .collect( Collectors.toList() );\n+        JSONObject jsonEvents = new JSONObject();\n+        jsonEvents.put( \"events\", objects );\n+        return new ByteArrayInputStream( jsonEvents.toString().getBytes() );\n+    }\n+\n     @SuppressWarnings( \"unchecked\" )\n     private InputStream createEventJsonInputStream( String program, String programStage, String orgUnit, String person,\n         DataElement dataElement, String value )\n+    {\n+        Event event = createEvent( null );\n+        event.setProgram( program );\n+        event.setProgramStage( programStage );\n+        event.setOrgUnit( orgUnit );\n+        event.setTrackedEntityInstance( person );\n+\n+        return new ByteArrayInputStream( createEventJSONObject( event, dataElement, value ).toString().getBytes() );\n+    }\n+\n+    private JSONObject createEventJSONObject( Event event, DataElement dataElement, String value )\n     {\n         JSONObject eventJsonPayload = new JSONObject();\n-        eventJsonPayload.put( \"program\", program );\n-        eventJsonPayload.put( \"programStage\", programStage );\n-        eventJsonPayload.put( \"orgUnit\", orgUnit );\n+        eventJsonPayload.put( \"program\", event.getProgram() );\n+        eventJsonPayload.put( \"programStage\", event.getProgramStage() );\n+        eventJsonPayload.put( \"orgUnit\", event.getOrgUnit() );\n         eventJsonPayload.put( \"status\", \"COMPLETED\" );\n         eventJsonPayload.put( \"eventDate\", \"2018-08-20\" );\n         eventJsonPayload.put( \"completedDate\", \"2018-08-27\" );\n-        eventJsonPayload.put( \"trackedEntityInstance\", person );\n+        eventJsonPayload.put( \"trackedEntityInstance\", event.getTrackedEntityInstance() );\n \n         JSONObject dataValue = new JSONObject();\n         dataValue.put( \"dataElement\", dataElement.getUid() );\n         dataValue.put( \"value\", value );\n \n-//        JSONObject geometry = new JSONObject();\n-//        geometry.put( \"type\", \"Point\" );\n-//        JSONArray coordinates = new JSONArray();\n-//        coordinates.add( \"1.33343\" );\n-//        coordinates.add( \"-21.9954\" );\n-//        geometry.put( \"coordinates\", coordinates );\n-//        eventJsonPayload.put( \"geometry\", geometry );\n+        // JSONObject geometry = new JSONObject();\n+        // geometry.put( \"type\", \"Point\" );\n+        // JSONArray coordinates = new JSONArray();\n+        // coordinates.add( \"1.33343\" );\n+        // coordinates.add( \"-21.9954\" );\n+        // geometry.put( \"coordinates\", coordinates );\n+        // eventJsonPayload.put( \"geometry\", geometry );\n \n         JSONArray dataValues = new JSONArray();\n         dataValues.add( dataValue );\n         eventJsonPayload.put( \"dataValues\", dataValues );\n \n-        return new ByteArrayInputStream( eventJsonPayload.toString().getBytes() );\n+        return eventJsonPayload;\n     }\n \n     private Enrollment createEnrollment( String program, String person )\n", "next_change": {"commit": "22d5da9d9a812b02eb5acd643112a6b050b5d63c", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java\nindex 4b097a4bf3..a5ed6ce960 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java\n", "chunk": "@@ -717,11 +653,9 @@ public class EventImportTest\n         // coordinates.add( \"-21.9954\" );\n         // geometry.put( \"coordinates\", coordinates );\n         // eventJsonPayload.put( \"geometry\", geometry );\n-\n         JSONArray dataValues = new JSONArray();\n         dataValues.add( dataValue );\n         eventJsonPayload.put( \"dataValues\", dataValues );\n-\n         return eventJsonPayload;\n     }\n \n", "next_change": {"commit": "3b0b47ad71356c18612be63b2d9c42155d007bde", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java\nindex a5ed6ce960..a1c6b4bd3f 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java\n", "chunk": "@@ -630,32 +630,32 @@ class EventImportTest extends TransactionalIntegrationTest\n         event.setProgramStage( programStage );\n         event.setOrgUnit( orgUnit );\n         event.setTrackedEntityInstance( person );\n-        return new ByteArrayInputStream( createEventJSONObject( event, dataElement, value ).toString().getBytes() );\n+        return new ByteArrayInputStream( createEventJsonObject( event, dataElement, value ).toString().getBytes() );\n     }\n \n-    private JSONObject createEventJSONObject( Event event, DataElement dataElement, String value )\n+    private JsonObject createEventJsonObject( Event event, DataElement dataElement, String value )\n     {\n-        JSONObject eventJsonPayload = new JSONObject();\n-        eventJsonPayload.put( \"program\", event.getProgram() );\n-        eventJsonPayload.put( \"programStage\", event.getProgramStage() );\n-        eventJsonPayload.put( \"orgUnit\", event.getOrgUnit() );\n-        eventJsonPayload.put( \"status\", \"COMPLETED\" );\n-        eventJsonPayload.put( \"eventDate\", \"2018-08-20\" );\n-        eventJsonPayload.put( \"completedDate\", \"2018-08-27\" );\n-        eventJsonPayload.put( \"trackedEntityInstance\", event.getTrackedEntityInstance() );\n-        JSONObject dataValue = new JSONObject();\n-        dataValue.put( \"dataElement\", dataElement.getUid() );\n-        dataValue.put( \"value\", value );\n-        // JSONObject geometry = new JSONObject();\n+        JsonObject eventJsonPayload = new JsonObject();\n+        eventJsonPayload.addProperty( \"program\", event.getProgram() );\n+        eventJsonPayload.addProperty( \"programStage\", event.getProgramStage() );\n+        eventJsonPayload.addProperty( \"orgUnit\", event.getOrgUnit() );\n+        eventJsonPayload.addProperty( \"status\", \"COMPLETED\" );\n+        eventJsonPayload.addProperty( \"eventDate\", \"2018-08-20\" );\n+        eventJsonPayload.addProperty( \"completedDate\", \"2018-08-27\" );\n+        eventJsonPayload.addProperty( \"trackedEntityInstance\", event.getTrackedEntityInstance() );\n+        JsonObject dataValue = new JsonObject();\n+        dataValue.addProperty( \"dataElement\", dataElement.getUid() );\n+        dataValue.addProperty( \"value\", value );\n+        // JsonObject geometry = new JsonObject();\n         // geometry.put( \"type\", \"Point\" );\n-        // JSONArray coordinates = new JSONArray();\n+        // JsonArray coordinates = new JsonArray();\n         // coordinates.add( \"1.33343\" );\n         // coordinates.add( \"-21.9954\" );\n         // geometry.put( \"coordinates\", coordinates );\n         // eventJsonPayload.put( \"geometry\", geometry );\n-        JSONArray dataValues = new JSONArray();\n+        JsonArray dataValues = new JsonArray();\n         dataValues.add( dataValue );\n-        eventJsonPayload.put( \"dataValues\", dataValues );\n+        eventJsonPayload.add( \"dataValues\", dataValues );\n         return eventJsonPayload;\n     }\n \n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "message": "Merge commit", "committedDate": null}, {"oid": "1bd8ee38126fbac22f805db44dad0cdcba7b14a6", "committedDate": "2020-09-23 11:30:37 +0200", "message": "fix: allow updating an Event with File data type [DHIS2-9559]"}, {"oid": "c8bef4f937b0a3719a7227c088751f689b6003f1", "committedDate": "2020-10-02 09:17:15 +0200", "message": "fix: [DHIS2-8872] Fix import summary count for events in enrollment (#6257)"}, {"oid": "c9aa7729514346e42a6f1957d20bf1f1ad4641d0", "committedDate": "2020-10-28 11:27:13 +0100", "message": "chore: remove junit and hamcrest related warnings (#6504)"}, {"oid": "276f2354d945b8f34a5f2fd64681b28476c049e6", "committedDate": "2020-11-25 08:51:52 +0100", "message": "chore: Remove unused imports and fix code style issues (#6746)"}, {"oid": "7098e9412b922ed70f8136f30c7d790e27bb43be", "committedDate": "2020-12-10 10:43:44 +0100", "message": "chore: Remove unused imports (#6875)"}, {"oid": "3e25b9b834757233501b068c1fd96b5b68cc22f7", "committedDate": "2020-12-22 12:59:13 +0100", "message": "feat: Convert sharing objects to JSONB structure [DHIS2-5814]"}, {"oid": "5e4669b4c89c809989ea600900735dd71baa86e2", "committedDate": "2020-12-23 14:00:18 +0700", "message": "feat: Upgrade Hibernate  (#6939)"}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "791d88a293341abb24c5b28eb16f9fc3c51ce715", "committedDate": "2021-02-11 10:53:22 +0100", "message": "fix: add short name column to Category, DEGroupSet, OUGroupSet [DHIS2-8937]"}, {"oid": "e9aa95cda06ed418fa24c389b38cde8afe364c2f", "committedDate": "2021-09-27 10:03:35 +0200", "message": "fix: teis lastupdated update (#8808)"}, {"oid": "22d5da9d9a812b02eb5acd643112a6b050b5d63c", "committedDate": "2021-12-16 13:19:38 +0100", "message": "chore: migrate tests to JUnit 5 (#9467)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "3b0b47ad71356c18612be63b2d9c42155d007bde", "committedDate": "2022-03-25 07:51:39 +0100", "message": "chore: Clean up all service modules to remove all the warnings from analyze [TECH-801] (#10287)"}, {"oid": "d99da048b6427aa16b080ab0a0e25eda4a2a0f96", "committedDate": "2022-05-09 13:53:18 +0200", "message": "feat: Refactor getCurrentUser() to return DHIS2 User object 2 (#10600)"}, {"oid": "16ff9f07782d088d8e9e4d6c0dd7ed486dbca59e", "committedDate": "2022-05-25 09:34:37 +0200", "message": "fix: Revert the current user session detachment (#10868)"}, {"oid": "ae6806774b896dcc69a99687ce331d60d40995c7", "committedDate": "2022-06-02 09:20:44 +0200", "message": "chore: Refactor JdbcTemplate to NamedParameterJdbcTemplate (#10767)"}, {"oid": "6e83eba877030575456f919de1bce55fcae8e517", "committedDate": "2022-06-24 10:01:46 +0200", "message": "test: move all integration tests into own module TECH-1209 (#11148)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY1NTIyMQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r461655221", "body": "```suggestion\r\n                || ( params.getCategoryOptionCombo() == null && !isSuper( user ) && !userHasAccess( rowSet ) ) )\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            || (params.getCategoryOptionCombo() == null && !isSuper( user ) && !userHasAccess( rowSet )) )\n          \n          \n            \n                            || ( params.getCategoryOptionCombo() == null && !isSuper( user ) && !userHasAccess( rowSet ) ) )", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                <span class=\"pl-k\">||</span> (params<span class=\"pl-k\">.</span>getCategoryOptionCombo() <span class=\"pl-k\">==</span> <span class=\"pl-c1\">null</span> <span class=\"pl-k\">&amp;&amp;</span> <span class=\"pl-k\">!</span>isSuper( user ) <span class=\"pl-k\">&amp;&amp;</span> <span class=\"pl-k\">!</span>userHasAccess( rowSet )) )</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                <span class=\"pl-k\">||</span> (<span class=\"x x-first x-last\"> </span>params<span class=\"pl-k\">.</span>getCategoryOptionCombo() <span class=\"pl-k\">==</span> <span class=\"pl-c1\">null</span> <span class=\"pl-k\">&amp;&amp;</span> <span class=\"pl-k\">!</span>isSuper( user ) <span class=\"pl-k\">&amp;&amp;</span> <span class=\"pl-k\">!</span>userHasAccess( rowSet )<span class=\"x x-first x-last\"> </span>) )</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "stian-sandvold", "createdAt": "2020-07-28T15:04:52Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java", "diffHunk": "@@ -163,7 +231,8 @@ public JdbcEventStore( StatementBuilder statementBuilder, @Qualifier( \"readOnlyJ\n \n         while ( rowSet.next() )\n         {\n-            if ( rowSet.getString( \"psi_uid\" ) == null || (params.getCategoryOptionCombo() == null && !isSuperUser && !userHasAccess( rowSet )) )\n+            if ( rowSet.getString( \"psi_uid\" ) == null\n+                || (params.getCategoryOptionCombo() == null && !isSuper( user ) && !userHasAccess( rowSet )) )", "originalCommit": "dc20b8a9249359bcdd1f612b1852f728ef63b7ab", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d0687a6c7c9e1c4dd64c4dc669bb80ae6e8c8c8b", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\nindex 3ed951650f..02c03a24ca 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\n", "chunk": "@@ -232,7 +306,7 @@ public class JdbcEventStore implements EventStore\n         while ( rowSet.next() )\n         {\n             if ( rowSet.getString( \"psi_uid\" ) == null\n-                || (params.getCategoryOptionCombo() == null && !isSuper( user ) && !userHasAccess( rowSet )) )\n+                || ( params.getCategoryOptionCombo() == null && !isSuper( user ) && !userHasAccess( rowSet ) ) )\n             {\n                 continue;\n             }\n", "next_change": {"commit": "d360652a896bee650a842567e26cd1e62145cccb", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\nindex 02c03a24ca..578900e939 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\n", "chunk": "@@ -306,7 +196,7 @@ public class JdbcEventStore implements EventStore\n         while ( rowSet.next() )\n         {\n             if ( rowSet.getString( \"psi_uid\" ) == null\n-                || ( params.getCategoryOptionCombo() == null && !isSuper( user ) && !userHasAccess( rowSet ) ) )\n+                || (params.getCategoryOptionCombo() == null && !isSuper( user ) && !userHasAccess( rowSet )) )\n             {\n                 continue;\n             }\n", "next_change": {"commit": "85c947b7cdb2c98af0c8d892a8fbc9f65784abe3", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\nindex 578900e939..81a6c76411 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\n", "chunk": "@@ -196,7 +230,7 @@ public class JdbcEventStore implements EventStore\n         while ( rowSet.next() )\n         {\n             if ( rowSet.getString( \"psi_uid\" ) == null\n-                || (params.getCategoryOptionCombo() == null && !isSuper( user ) && !userHasAccess( rowSet )) )\n+                || ( params.getCategoryOptionCombo() == null && !isSuper( user ) && !userHasAccess( rowSet ) ) )\n             {\n                 continue;\n             }\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\nindex 3ed951650f..572fa793bd 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\n", "chunk": "@@ -232,7 +305,7 @@ public class JdbcEventStore implements EventStore\n         while ( rowSet.next() )\n         {\n             if ( rowSet.getString( \"psi_uid\" ) == null\n-                || (params.getCategoryOptionCombo() == null && !isSuper( user ) && !userHasAccess( rowSet )) )\n+                || ( params.getCategoryOptionCombo() == null && !isSuper( user ) && !userHasAccess( rowSet ) ) )\n             {\n                 continue;\n             }\n", "next_change": {"commit": "ea76fa86409613c9766d4508d65c88ac55c413c3", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\nindex 572fa793bd..d05638c082 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\n", "chunk": "@@ -305,7 +313,7 @@ public class JdbcEventStore implements EventStore\n         while ( rowSet.next() )\n         {\n             if ( rowSet.getString( \"psi_uid\" ) == null\n-                || ( params.getCategoryOptionCombo() == null && !isSuper( user ) && !userHasAccess( rowSet ) ) )\n+                || (params.getCategoryOptionCombo() == null && !isSuper( user ) && !userHasAccess( rowSet )) )\n             {\n                 continue;\n             }\n", "next_change": {"commit": "19962f46788d3430652c3124e01d1f16f17803ff", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\nindex d05638c082..1c6c4242ea 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\n", "chunk": "@@ -302,190 +370,225 @@ public class JdbcEventStore implements EventStore\n \n         Map<String, Event> eventUidToEventMap = new HashMap<>( params.getPageSizeWithDefault() );\n         List<Event> events = new ArrayList<>();\n+        List<Long> relationshipIds = new ArrayList<>();\n \n-        String sql = buildSql( params, organisationUnits, user );\n-        SqlRowSet rowSet = jdbcTemplate.queryForRowSet( sql );\n+        final Gson gson = new Gson();\n \n-        log.debug( \"Event query SQL: \" + sql );\n+        final MapSqlParameterSource mapSqlParameterSource = new MapSqlParameterSource();\n \n-        Set<String> notes = new HashSet<>();\n+        String sql = buildSql( params, mapSqlParameterSource, organisationUnits, user );\n \n-        while ( rowSet.next() )\n-        {\n-            if ( rowSet.getString( \"psi_uid\" ) == null\n-                || (params.getCategoryOptionCombo() == null && !isSuper( user ) && !userHasAccess( rowSet )) )\n-            {\n-                continue;\n-            }\n+        return jdbcTemplate.query( sql, mapSqlParameterSource, resultSet -> {\n \n-            String psiUid = rowSet.getString( \"psi_uid\" );\n+            log.debug( \"Event query SQL: \" + sql );\n \n-            Event event;\n+            Set<String> notes = new HashSet<>();\n \n-            if ( !eventUidToEventMap.containsKey( psiUid ) )\n+            while ( resultSet.next() )\n             {\n-                validateIdentifiersPresence( rowSet, params.getIdSchemes(), true );\n-\n-                event = new Event();\n-                eventUidToEventMap.put( psiUid, event );\n-\n-                if ( !params.isSkipEventId() )\n+                if ( resultSet.getString( \"psi_uid\" ) == null\n+                    || (params.getCategoryOptionCombo() == null && !isSuper( user ) && !userHasAccess( resultSet )) )\n                 {\n-                    event.setUid( psiUid );\n-                    event.setEvent( psiUid );\n+                    continue;\n                 }\n \n-                event.setTrackedEntityInstance( rowSet.getString( \"tei_uid\" ) );\n-                event.setStatus( EventStatus.valueOf( rowSet.getString( \"psi_status\" ) ) );\n-\n-                event.setProgram( rowSet.getString( \"p_identifier\" ) );\n-                event.setProgramStage( rowSet.getString( \"ps_identifier\" ) );\n-                event.setOrgUnit( rowSet.getString( \"ou_identifier\" ) );\n-                event.setDeleted( rowSet.getBoolean( \"psi_deleted\" ) );\n+                String psiUid = resultSet.getString( \"psi_uid\" );\n \n-                ProgramType programType = ProgramType.fromValue( rowSet.getString( \"p_type\" ) );\n+                Event event;\n \n-                if ( programType != ProgramType.WITHOUT_REGISTRATION )\n+                if ( !eventUidToEventMap.containsKey( psiUid ) )\n                 {\n-                    event.setEnrollment( rowSet.getString( \"pi_uid\" ) );\n-                    event.setEnrollmentStatus( EnrollmentStatus\n-                        .fromProgramStatus( ProgramStatus.valueOf( rowSet.getString( \"pi_status\" ) ) ) );\n-                    event.setFollowup( rowSet.getBoolean( \"pi_followup\" ) );\n-                }\n+                    validateIdentifiersPresence( resultSet, params.getIdSchemes(), true );\n \n-                if ( params.getCategoryOptionCombo() == null && !isSuper( user ) )\n-                {\n-                    event.setOptionSize( rowSet.getInt( \"option_size\" ) );\n-                }\n+                    event = new Event();\n+                    eventUidToEventMap.put( psiUid, event );\n+\n+                    if ( !params.isSkipEventId() )\n+                    {\n+                        event.setUid( psiUid );\n+                        event.setEvent( psiUid );\n+                    }\n \n-                event.setAttributeOptionCombo( rowSet.getString( \"coc_identifier\" ) );\n-                event.setAttributeCategoryOptions( rowSet.getString( \"deco_uid\" ) );\n-                event.setTrackedEntityInstance( rowSet.getString( \"tei_uid\" ) );\n+                    event.setTrackedEntityInstance( resultSet.getString( \"tei_uid\" ) );\n+                    event.setStatus( EventStatus.valueOf( resultSet.getString( PSI_STATUS ) ) );\n \n-                event.setStoredBy( rowSet.getString( \"psi_storedby\" ) );\n-                event.setOrgUnitName( rowSet.getString( \"ou_name\" ) );\n-                event.setDueDate( DateUtils.getIso8601NoTz( rowSet.getDate( \"psi_duedate\" ) ) );\n-                event.setEventDate( DateUtils.getIso8601NoTz( rowSet.getDate( \"psi_executiondate\" ) ) );\n-                event.setCreated( DateUtils.getIso8601NoTz( rowSet.getDate( \"psi_created\" ) ) );\n-                event.setCreatedByUserInfo( jsonToUserInfo( rowSet.getString( \"psi_createdbyuserinfo\" ), jsonMapper ) );\n-                event.setLastUpdated( DateUtils.getIso8601NoTz( rowSet.getDate( \"psi_lastupdated\" ) ) );\n-                event.setLastUpdatedByUserInfo(\n-                    jsonToUserInfo( rowSet.getString( \"psi_lastupdatedbyuserinfo\" ), jsonMapper ) );\n+                    ProgramType programType = ProgramType.fromValue( resultSet.getString( \"p_type\" ) );\n \n-                event.setCompletedBy( rowSet.getString( \"psi_completedby\" ) );\n-                event.setCompletedDate( DateUtils.getIso8601NoTz( rowSet.getDate( \"psi_completeddate\" ) ) );\n+                    event.setProgram( resultSet.getString( \"p_identifier\" ) );\n+                    event.setProgramType( programType );\n+                    event.setProgramStage( resultSet.getString( \"ps_identifier\" ) );\n+                    event.setOrgUnit( resultSet.getString( \"ou_identifier\" ) );\n+                    event.setDeleted( resultSet.getBoolean( \"psi_deleted\" ) );\n \n-                if ( rowSet.getObject( \"psi_geometry\" ) != null )\n-                {\n-                    try\n+                    if ( programType != ProgramType.WITHOUT_REGISTRATION )\n                     {\n-                        Geometry geom = new WKTReader().read( rowSet.getString( \"psi_geometry\" ) );\n-\n-                        event.setGeometry( geom );\n+                        event.setEnrollment( resultSet.getString( \"pi_uid\" ) );\n+                        event.setEnrollmentStatus( EnrollmentStatus\n+                            .fromProgramStatus( ProgramStatus.valueOf( resultSet.getString( \"pi_status\" ) ) ) );\n+                        event.setFollowup( resultSet.getBoolean( \"pi_followup\" ) );\n                     }\n-                    catch ( ParseException e )\n+\n+                    if ( params.getCategoryOptionCombo() == null && !isSuper( user ) )\n                     {\n-                        log.error( \"Unable to read geometry for event '\" + event.getUid() + \"': \", e );\n+                        event.setOptionSize( resultSet.getInt( \"option_size\" ) );\n                     }\n-                }\n \n-                if ( rowSet.getObject( \"user_assigned\" ) != null )\n-                {\n-                    event.setAssignedUser( rowSet.getString( \"user_assigned\" ) );\n-                    event.setAssignedUserUsername( rowSet.getString( \"user_assigned_username\" ) );\n-                    event.setAssignedUserDisplayName( rowSet.getString( \"user_assigned_name\" ) );\n-                }\n+                    event.setAttributeOptionCombo( resultSet.getString( \"coc_identifier\" ) );\n+                    event.setAttributeCategoryOptions( resultSet.getString( \"deco_uid\" ) );\n+                    event.setTrackedEntityInstance( resultSet.getString( \"tei_uid\" ) );\n+\n+                    event.setStoredBy( resultSet.getString( \"psi_storedby\" ) );\n+                    event.setOrgUnitName( resultSet.getString( \"ou_name\" ) );\n+                    event.setDueDate( DateUtils.getIso8601NoTz( resultSet.getDate( \"psi_duedate\" ) ) );\n+                    event.setEventDate( DateUtils.getIso8601NoTz( resultSet.getDate( \"psi_executiondate\" ) ) );\n+                    event.setCreated( DateUtils.getIso8601NoTz( resultSet.getDate( \"psi_created\" ) ) );\n+                    event.setCreatedByUserInfo(\n+                        jsonToUserInfo( resultSet.getString( \"psi_createdbyuserinfo\" ), jsonMapper ) );\n+                    event.setLastUpdated( DateUtils.getIso8601NoTz( resultSet.getDate( \"psi_lastupdated\" ) ) );\n+                    event.setLastUpdatedByUserInfo(\n+                        jsonToUserInfo( resultSet.getString( \"psi_lastupdatedbyuserinfo\" ), jsonMapper ) );\n+\n+                    event.setCompletedBy( resultSet.getString( \"psi_completedby\" ) );\n+                    event.setCompletedDate( DateUtils.getIso8601NoTz( resultSet.getDate( \"psi_completeddate\" ) ) );\n+\n+                    if ( resultSet.getObject( \"psi_geometry\" ) != null )\n+                    {\n+                        try\n+                        {\n+                            Geometry geom = new WKTReader().read( resultSet.getString( \"psi_geometry\" ) );\n \n-                events.add( event );\n-            }\n-            else\n-            {\n-                event = eventUidToEventMap.get( psiUid );\n-                String attributeCategoryCombination = event.getAttributeCategoryOptions();\n-                String currentAttributeCategoryCombination = rowSet.getString( \"deco_uid\" );\n+                            event.setGeometry( geom );\n+                        }\n+                        catch ( ParseException e )\n+                        {\n+                            log.error( \"Unable to read geometry for event '\" + event.getUid() + \"': \", e );\n+                        }\n+                    }\n \n-                if ( !attributeCategoryCombination.contains( currentAttributeCategoryCombination ) )\n-                {\n-                    event.setAttributeCategoryOptions(\n-                        attributeCategoryCombination + \";\" + currentAttributeCategoryCombination );\n+                    if ( resultSet.getObject( \"user_assigned\" ) != null )\n+                    {\n+                        event.setAssignedUser( resultSet.getString( \"user_assigned\" ) );\n+                        event.setAssignedUserUsername( resultSet.getString( \"user_assigned_username\" ) );\n+                        event.setAssignedUserDisplayName( resultSet.getString( \"user_assigned_name\" ) );\n+                        event.setAssignedUserFirstName( resultSet.getString( \"user_assigned_first_name\" ) );\n+                        event.setAssignedUserSurname( resultSet.getString( \"user_assigned_surname\" ) );\n+                    }\n+\n+                    events.add( event );\n                 }\n-            }\n+                else\n+                {\n+                    event = eventUidToEventMap.get( psiUid );\n+                    String attributeCategoryCombination = event.getAttributeCategoryOptions();\n+                    String currentAttributeCategoryCombination = resultSet.getString( \"deco_uid\" );\n \n-            if ( !org.springframework.util.StringUtils.isEmpty( rowSet.getString( \"psi_eventdatavalues\" ) ) )\n-            {\n-                Set<EventDataValue> eventDataValues = convertEventDataValueJsonIntoSet(\n-                    rowSet.getString( \"psi_eventdatavalues\" ) );\n+                    if ( !attributeCategoryCombination.contains( currentAttributeCategoryCombination ) )\n+                    {\n+                        event.setAttributeCategoryOptions(\n+                            attributeCategoryCombination + \";\" + currentAttributeCategoryCombination );\n+                    }\n+                }\n \n-                for ( EventDataValue dv : eventDataValues )\n+                if ( !StringUtils.isEmpty( resultSet.getString( \"psi_eventdatavalues\" ) ) )\n                 {\n-                    DataValue dataValue = convertEventDataValueIntoDtoDataValue( dv );\n+                    Set<EventDataValue> eventDataValues = convertEventDataValueJsonIntoSet(\n+                        resultSet.getString( \"psi_eventdatavalues\" ) );\n \n-                    if ( params.isSynchronizationQuery() )\n+                    for ( EventDataValue dv : eventDataValues )\n                     {\n-                        if ( psdesWithSkipSyncTrue.containsKey( rowSet.getString( \"ps_uid\" ) ) && psdesWithSkipSyncTrue\n-                            .get( rowSet.getString( \"ps_uid\" ) ).contains( dv.getDataElement() ) )\n-                        {\n-                            dataValue.setSkipSynchronization( true );\n-                        }\n-                        else\n+                        DataValue dataValue = convertEventDataValueIntoDtoDataValue( dv );\n+\n+                        if ( params.isSynchronizationQuery() )\n                         {\n-                            dataValue.setSkipSynchronization( false );\n+                            if ( psdesWithSkipSyncTrue.containsKey( resultSet.getString( \"ps_uid\" ) )\n+                                && psdesWithSkipSyncTrue\n+                                    .get( resultSet.getString( \"ps_uid\" ) ).contains( dv.getDataElement() ) )\n+                            {\n+                                dataValue.setSkipSynchronization( true );\n+                            }\n+                            else\n+                            {\n+                                dataValue.setSkipSynchronization( false );\n+                            }\n                         }\n-                    }\n \n-                    event.getDataValues().add( dataValue );\n+                        event.getDataValues().add( dataValue );\n+                    }\n                 }\n-            }\n \n-            if ( rowSet.getString( \"psinote_value\" ) != null && !notes.contains( rowSet.getString( \"psinote_id\" ) ) )\n-            {\n-                Note note = new Note();\n-                note.setNote( rowSet.getString( \"psinote_uid\" ) );\n-                note.setValue( rowSet.getString( \"psinote_value\" ) );\n-                note.setStoredDate( DateUtils.getIso8601NoTz( rowSet.getDate( \"psinote_storeddate\" ) ) );\n-                note.setStoredBy( rowSet.getString( \"psinote_storedby\" ) );\n+                if ( resultSet.getString( \"psinote_value\" ) != null\n+                    && !notes.contains( resultSet.getString( \"psinote_id\" ) ) )\n+                {\n+                    Note note = new Note();\n+                    note.setNote( resultSet.getString( \"psinote_uid\" ) );\n+                    note.setValue( resultSet.getString( \"psinote_value\" ) );\n+                    note.setStoredDate( DateUtils.getIso8601NoTz( resultSet.getDate( \"psinote_storeddate\" ) ) );\n+                    note.setStoredBy( resultSet.getString( \"psinote_storedby\" ) );\n+\n+                    if ( resultSet.getObject( \"usernote_id\" ) != null )\n+                    {\n+\n+                        note.setLastUpdatedBy(\n+                            UserInfoSnapshot.of(\n+                                resultSet.getLong( \"usernote_id\" ),\n+                                resultSet.getString( \"usernote_code\" ),\n+                                resultSet.getString( \"usernote_uid\" ),\n+                                resultSet.getString( \"usernote_username\" ),\n+                                resultSet.getString( \"userinfo_firstname\" ),\n+                                resultSet.getString( \"userinfo_surname\" ) ) );\n+                    }\n \n-                if ( rowSet.getObject( \"usernote_id\" ) != null )\n+                    note.setLastUpdated( resultSet.getDate( \"psinote_lastupdated\" ) );\n+\n+                    event.getNotes().add( note );\n+                    notes.add( resultSet.getString( \"psinote_id\" ) );\n+                }\n+\n+                if ( params.isIncludeRelationships() && resultSet.getObject( \"psi_rl\" ) != null )\n                 {\n+                    PGobject pGobject = (PGobject) resultSet.getObject( \"psi_rl\" );\n+\n+                    if ( pGobject != null )\n+                    {\n+                        String value = pGobject.getValue();\n \n-                    note.setLastUpdatedBy(\n-                        UserInfoSnapshot.of(\n-                            rowSet.getLong( \"usernote_id\" ),\n-                            rowSet.getString( \"usernote_code\" ),\n-                            rowSet.getString( \"usernote_uid\" ),\n-                            rowSet.getString( \"usernote_username\" ),\n-                            rowSet.getString( \"userinfo_firstname\" ),\n-                            rowSet.getString( \"userinfo_surname\" ) ) );\n+                        relationshipIds.addAll( Lists.newArrayList( gson.fromJson( value, Long[].class ) ) );\n+                    }\n                 }\n+            }\n \n-                note.setLastUpdated( rowSet.getDate( \"psinote_lastupdated\" ) );\n+            final Multimap<String, Relationship> map = eventStore\n+                .getRelationshipsByIds( relationshipIds, params );\n \n-                event.getNotes().add( note );\n-                notes.add( rowSet.getString( \"psinote_id\" ) );\n+            if ( !map.isEmpty() )\n+            {\n+                events.forEach( e -> e.getRelationships().addAll( map.get( e.getEvent() ) ) );\n             }\n-        }\n \n-        IdSchemes idSchemes = ObjectUtils.firstNonNull( params.getIdSchemes(), new IdSchemes() );\n-        IdScheme dataElementIdScheme = idSchemes.getDataElementIdScheme();\n+            IdSchemes idSchemes = ObjectUtils.firstNonNull( params.getIdSchemes(), new IdSchemes() );\n+            IdScheme dataElementIdScheme = idSchemes.getDataElementIdScheme();\n \n-        if ( dataElementIdScheme != IdScheme.ID && dataElementIdScheme != IdScheme.UID )\n-        {\n-            CachingMap<String, String> dataElementUidToIdentifierCache = new CachingMap<>();\n+            if ( dataElementIdScheme != IdScheme.ID && dataElementIdScheme != IdScheme.UID )\n+            {\n+                CachingMap<String, String> dataElementUidToIdentifierCache = new CachingMap<>();\n \n-            List<Collection<DataValue>> dataValuesList = events.stream().map( Event::getDataValues )\n-                .collect( Collectors.toList() );\n-            populateCache( dataElementIdScheme, dataValuesList, dataElementUidToIdentifierCache );\n-            convertDataValuesIdentifiers( dataElementIdScheme, dataValuesList, dataElementUidToIdentifierCache );\n-        }\n+                List<Collection<DataValue>> dataValuesList = events.stream().map( Event::getDataValues )\n+                    .collect( Collectors.toList() );\n+                populateCache( dataElementIdScheme, dataValuesList, dataElementUidToIdentifierCache );\n+                convertDataValuesIdentifiers( dataElementIdScheme, dataValuesList, dataElementUidToIdentifierCache );\n+            }\n \n-        if ( params.getCategoryOptionCombo() == null && !isSuper( user ) )\n-        {\n-            return events.stream().filter( ev -> ev.getAttributeCategoryOptions() != null\n-                && splitToArray( ev.getAttributeCategoryOptions(), TextUtils.SEMICOLON ).size() == ev.getOptionSize() )\n-                .collect( Collectors.toList() );\n-        }\n+            if ( params.getCategoryOptionCombo() == null && !isSuper( user ) )\n+            {\n+                return events.stream().filter( ev -> ev.getAttributeCategoryOptions() != null\n+                    && splitToSet( ev.getAttributeCategoryOptions(), TextUtils.SEMICOLON ).size() == ev\n+                        .getOptionSize() )\n+                    .collect( Collectors.toList() );\n+            }\n+\n+            return events;\n+        } );\n \n-        return events;\n     }\n \n     @Override\n", "next_change": {"commit": "d1975e80aa90b5ae63c68e5fc0c8b874cdf6d2da", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\nindex 1c6c4242ea..3bd037ad70 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\n", "chunk": "@@ -578,14 +554,6 @@ public class JdbcEventStore implements EventStore\n                 convertDataValuesIdentifiers( dataElementIdScheme, dataValuesList, dataElementUidToIdentifierCache );\n             }\n \n-            if ( params.getCategoryOptionCombo() == null && !isSuper( user ) )\n-            {\n-                return events.stream().filter( ev -> ev.getAttributeCategoryOptions() != null\n-                    && splitToSet( ev.getAttributeCategoryOptions(), TextUtils.SEMICOLON ).size() == ev\n-                        .getOptionSize() )\n-                    .collect( Collectors.toList() );\n-            }\n-\n             return events;\n         } );\n \n", "next_change": {"commit": "959c60d4f597187d0df2160fbbb675e5c4196e5c", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\nindex 3bd037ad70..dac16b0e5a 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\n", "chunk": "@@ -560,7 +561,7 @@ public class JdbcEventStore implements EventStore\n     }\n \n     @Override\n-    public List<ProgramStageInstance> saveEvents( List<ProgramStageInstance> events )\n+    public List<Event> saveEvents( List<org.hisp.dhis.program.Event> events )\n     {\n         try\n         {\n", "next_change": null}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "message": "Merge commit", "committedDate": null}, {"oid": "1775146057dbef2da11c4e554b339f150f2f4857", "committedDate": "2020-09-09 08:34:03 +0200", "message": "perf: [DHIS-9415] avoid querying programstageinstancecomments if not necessary (#6103)"}, {"oid": "0d35843121f0ad3004fad015f1520c5b06a5c337", "committedDate": "2020-09-15 09:24:33 +0200", "message": "Merge 2.35 into master (#6149)"}, {"oid": "e4ff88027eb8dd823a539ef0ed82daeff5072e7c", "committedDate": "2020-09-18 16:43:42 +0200", "message": "fix: prevent db deadlock during Event update (#6135)"}, {"oid": "1bd8ee38126fbac22f805db44dad0cdcba7b14a6", "committedDate": "2020-09-23 11:30:37 +0200", "message": "fix: allow updating an Event with File data type [DHIS2-9559]"}, {"oid": "52b8f7c48def44670be7ba9d25d0ee963fe9441e", "committedDate": "2020-09-24 09:19:03 +0200", "message": "fix: Coordinate class removed, drop support for old implementation (#6172)"}, {"oid": "13cd21d76507450be96b06e13823b24cf357be04", "committedDate": "2020-10-30 09:38:34 +0100", "message": "feat: DHIS2-8911 adding LastUpdatedBy and CreatedBy user informations in events (#6521)"}, {"oid": "bcb4654eefc1d66ff614d1784219e7055a3671cc", "committedDate": "2020-10-30 11:24:12 +0100", "message": "fix: DHIS2-8911 corrected wrong column names (#6530)"}, {"oid": "08574f966f50a4667668edb4077cfd9e21bd9e10", "committedDate": "2020-11-11 13:59:04 +0100", "message": "fix: DHIS-7937 quotes in filter values depend on filter type when rendering sql string (#6604)"}, {"oid": "d34f05e1348f3dff54ced7059283a96a7b699ea4", "committedDate": "2020-11-16 18:21:11 +0100", "message": "feat: DHIS2-9835 user info in comments and notes for Events and Enrollments (#6587)"}, {"oid": "fbc5d6d0e07ba8180e933a63c670d58528cb700c", "committedDate": "2020-11-20 16:22:59 +0700", "message": "fix: Cant delete events (#6729)"}, {"oid": "5e4669b4c89c809989ea600900735dd71baa86e2", "committedDate": "2020-12-23 14:00:18 +0700", "message": "feat: Upgrade Hibernate  (#6939)"}, {"oid": "f00a1e4b7f23c356987cadfdc8a8407e1a098f52", "committedDate": "2021-01-11 07:26:55 +0100", "message": "fix: Check category option sharing settings (#7009)"}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "55164c30457d73850a5233869ab0119d31fcac9b", "committedDate": "2021-01-28 14:14:25 +0100", "message": "fix: sharing query issue in JdbcEventStore (#7151)"}, {"oid": "5d1a415fef305ea3cc18a3c2fadceb208403006a", "committedDate": "2021-01-29 09:30:08 +0100", "message": "refactor: Controllers params [DHIS2-10202] (#7201)"}, {"oid": "10b11c17ef2f2964263efc051f96c8e8f8f7e1f4", "committedDate": "2021-02-02 12:33:59 +0100", "message": "feat: change user property name to createdBy (#7061)"}, {"oid": "b46e880a82e0e0d03e1f7a940630771907d4317a", "committedDate": "2021-05-26 15:57:37 +0200", "message": "chore: Replace usage of duplicated method (#8077)"}, {"oid": "41338b95cf44f70b44834c3515933a677114dd84", "committedDate": "2021-05-28 13:54:35 +0200", "message": "fix: skipPaging properly considered (#8087)"}, {"oid": "15a1ce87df3a6aecbb40ceca8c1aeb9ef9a35290", "committedDate": "2021-06-08 15:46:02 +0200", "message": "perf: Remove program lookup in event query loop [DHIS2-11264] (#8149)"}, {"oid": "002abc97ad43829b6a7b59d2611a165106b666c2", "committedDate": "2021-06-28 11:39:16 +0200", "message": "fix: Do not hard delete events in importer [DHIS2-11375] (#8309)"}, {"oid": "6bdec842fbd0ccf97729ec29b96202365a4e832d", "committedDate": "2021-07-28 10:10:25 +0200", "message": "fix: Add enrollment filter for event exporter [DHIS2-11226] (#8441)"}, {"oid": "8ee3bc02e7758714d4865fb84c65dcd53f4820b1", "committedDate": "2021-09-22 13:34:18 +0200", "message": "fix: Event collection endpoint does not fetch relationships [DHIS2-11541] (#8540)"}, {"oid": "e9aa95cda06ed418fa24c389b38cde8afe364c2f", "committedDate": "2021-09-27 10:03:35 +0200", "message": "fix: teis lastupdated update (#8808)"}, {"oid": "9d05d585562bf9d269ffed02307ec59694795cfc", "committedDate": "2021-10-07 10:34:05 +0200", "message": "fix: Fix by reducing number of SQL queries for event collection (#8955)"}, {"oid": "5e4b90d1aaa2f3b0264b411b0a8d1bf0e860202a", "committedDate": "2021-10-14 12:31:47 +0200", "message": "refactor: jdbc event store replaced some strings with constants/enums [TECH-463] (#9041)"}, {"oid": "f2249116faa6cfd647106204ba0f09457811e3dd", "committedDate": "2021-10-18 19:14:22 +0200", "message": "chore: Move lambdas initializations into static blocks [TECH-774] (#9074)"}, {"oid": "0ea45addae148641a66270e104d43d70b59dde05", "committedDate": "2021-10-26 09:45:39 +0200", "message": "refactor: Remove check test profile in runtime code [TECH-699] (#9110)"}, {"oid": "9b7ebd47b923d1f52b53a4a724b5b1ab3d2f1c8d", "committedDate": "2021-10-29 11:25:49 +0200", "message": "Merge pull request from GHSA-cmpc-frjv-rrmw"}, {"oid": "d466cd4761340382d8214d3eca7c7616569b903e", "committedDate": "2021-10-29 17:45:42 +0200", "message": "fix: breaking unit test (#9150)"}, {"oid": "8a62c3e0240b711a75ca821921bae684b82fff5f", "committedDate": "2021-11-30 12:46:53 +0100", "message": "perf: Use ou.path for ouMode event queries (#9337)"}, {"oid": "cc35b66a078649936fc2bd7de77cfc2f718c1e32", "committedDate": "2021-12-07 16:40:31 +0100", "message": "fix: Apply TEI ownership in event query (#9367)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "da4ef9091eadf20324ce10342073e9e8031391af", "committedDate": "2022-01-26 10:33:44 +0100", "message": "fix: Include mentioned ou for ouMode=CHILDREN"}, {"oid": "93b61e49f94920cf3adfe3fd83ad8f0c060afbb1", "committedDate": "2022-02-14 09:59:56 +0100", "message": "fix: Request param totalPages=false for events/enrollments [DHIS2-12530] (#9719)"}, {"oid": "bd3f8dacffeb333843a99f3e659d9f19dae7a977", "committedDate": "2022-02-17 12:08:13 +0100", "message": "fix: Show uid instead of id in events [DHIS2-12648] (#9836)"}, {"oid": "8ccf9a288a67e5ee5349024fd3d281372c64c956", "committedDate": "2022-02-22 13:25:35 +0800", "message": "feat: Merge User/UserCredentials into one DB table (#9754)"}, {"oid": "869fa986d53abcf6fc503e46e3b25e1b876e6c3d", "committedDate": "2022-03-01 13:31:17 +0100", "message": "feat: Add single data value endpoint with JSON body [DHIS2-12689] (#9886)"}, {"oid": "d117ff9ce355694569f7c6477141cf35c6412609", "committedDate": "2022-03-04 11:13:40 +0100", "message": "fix: Return complete information for user fields in NTI [DHIS2-12717] (#9936)"}, {"oid": "dc31b5e0ec776f00b915e47a08abe1e54b8e3d29", "committedDate": "2022-04-19 15:49:20 +0200", "message": "fix: Handle NPE for null organsationUnits in event programs sync job [DHIS2-12762] (2.39) (#10525)"}, {"oid": "d99da048b6427aa16b080ab0a0e25eda4a2a0f96", "committedDate": "2022-05-09 13:53:18 +0200", "message": "feat: Refactor getCurrentUser() to return DHIS2 User object 2 (#10600)"}, {"oid": "83890d87919436906d00955e19e5925f7355ca51", "committedDate": "2022-05-11 21:00:19 +0200", "message": "fix: Fix SQL queries for deleted relationships [DHIS2-11320] (#10758)"}, {"oid": "ae6806774b896dcc69a99687ce331d60d40995c7", "committedDate": "2022-06-02 09:20:44 +0200", "message": "chore: Refactor JdbcTemplate to NamedParameterJdbcTemplate (#10767)"}, {"oid": "3ffbead58842052c66f26af10a103386f5cb16d0", "committedDate": "2022-06-14 12:05:49 +0200", "message": "fix: Include enrollment followup in eventrow return (#11070)"}, {"oid": "2c0aa62cc8f940e7629f081284bb01dac8c9faee", "committedDate": "2022-06-21 19:38:49 +0200", "message": "feat: Add filters to TEDV audit endpoint [DHIS2-13421] (#11125)"}, {"oid": "19962f46788d3430652c3124e01d1f16f17803ff", "committedDate": "2022-07-05 11:59:15 +0200", "message": "fix: Refactor Event SQL to use named parameters - Simple bindings [ DHIS2-13306 ] (#11205)"}, {"oid": "5ea8cffe77c593325973769e83dbe505441a5cf3", "committedDate": "2022-07-26 13:19:15 +0200", "message": "fix: Performance optimisation when fetching events from Event Programs [ DHIS2-13443 ]  (#11271)"}, {"oid": "9135ce719d6db71435c61fcd4d7144e013e77622", "committedDate": "2022-08-02 15:16:29 +0200", "message": "Feat: Refactor Event SQL to use named parameters - Complex bindings [ Dhis2-13455 ] (#11322)"}, {"oid": "04654efa7ba2d741ddbf1a6f0cf63fedcd01eb3f", "committedDate": "2022-08-29 21:50:26 +0200", "message": "fix: get tei id, date types, update tests (#11541)"}, {"oid": "eb0e2a4e8d608ef19aac980cf3c5ed4e3b859fb9", "committedDate": "2022-09-06 10:29:19 +0200", "message": "fix: Refactor Event SQL to use named parameters - Events grid - [ DHIS2-13508 ] (#11545)"}, {"oid": "36ee597adc705b106a64c243ea603e85234dbb4f", "committedDate": "2022-09-07 07:40:39 +0200", "message": "feat: filter /tracker/events by enrollmentEnrolledAfter DHIS2-13648 (#11651)"}, {"oid": "4f11b0c48c8c354a79249d95d963a996c4128643", "committedDate": "2022-09-07 09:20:40 +0200", "message": "feat: filter /tracker/events by enrollmentEnrolledBefore (#11672)"}, {"oid": "66df00d85fce2b865439d8a0fc9c701fca88ece0", "committedDate": "2022-09-07 10:11:34 +0200", "message": "feat: filter /tracker/events by enrollmentOccurredBefore/After (#11675)"}, {"oid": "5a6ad83ad236b6b721794c52b51da456e9b8453d", "committedDate": "2022-09-09 08:08:07 +0200", "message": "feat: filter /tracker/events by filterAttributes DHIS2-13648 (#11683)"}, {"oid": "501c22e088de3d40a75a2a771a64efc6998cb880", "committedDate": "2022-09-12 12:07:12 +0200", "message": "feat: Add ordering on tei attributes for events [DHIS2-13648] (#11724)"}, {"oid": "531ca62258142b6e88d3c96b1123315adce393da", "committedDate": "2022-09-13 11:59:53 +0200", "message": "feat: Add ordering attribute column in select [DHIS2-13648] (#11750)"}, {"oid": "b29fd87d6c8d63a8293d6600bdec633f7ddf2953", "committedDate": "2022-09-16 11:09:48 +0200", "message": "feat: Clean up JdbcEventStore class [DHIS2-13648] (#11796)"}, {"oid": "1ae607c63e5683bae651721208891d65e9612ee8", "committedDate": "2022-09-22 11:19:32 +0200", "message": "Merge pull request from GHSA-7pwm-6rh2-2388"}, {"oid": "d7afc27b3b1e7159e8e0aab4f2bcb58f9b1167d0", "committedDate": "2022-09-22 15:56:33 +0200", "message": "fix: move deco access to case in select (#11822)"}, {"oid": "3c815e2474da1b1ca7312543e96c882b49d465be", "committedDate": "2022-09-26 11:20:25 +0200", "message": "fix: Ensure filter valueType is applied in event query (#11715)"}, {"oid": "79a4e480b97e856c20eb616144d4851738d674b6", "committedDate": "2022-09-28 13:31:31 +0200", "message": "fix: Ensure actual event orgunit is returned [DHIS2-13656] (#11755)"}, {"oid": "b22196b76551e33179af112ccdfb7d64c5a46c67", "committedDate": "2022-09-28 13:59:05 +0200", "message": "fix: Filter can have multiple value [DHIS2-13676] (#11921)"}, {"oid": "d797ac751aa993bf8a9bf6bb446abf12982aac29", "committedDate": "2022-10-17 13:40:26 +0200", "message": "fix: potential NPEs found by nullness analysis [TECH-1460] (#12113)"}, {"oid": "7a4160ba9c1550a536807361acfa086f722413a0", "committedDate": "2022-11-21 14:38:43 +0100", "message": "fix: Match psi.ouId and ou.ouId to fetch psi.ouName [DHIS2-13656] (#12377)"}, {"oid": "27b75665be58c25de309b5d71e7bd86200d740d6", "committedDate": "2022-12-01 11:37:48 +0100", "message": "chore: use AssignedUserQueryParam in EventSearchParams (#12446)"}, {"oid": "9556d7a326e0bb6b64d9d223e8c511906ef7c564", "committedDate": "2022-12-21 10:35:40 +0100", "message": "fix: Ensure actual event orgunit is returned [DHIS2-13656] (#12518)"}, {"oid": "e586cd4742efa92258f64d23c8b324575de8c514", "committedDate": "2023-02-14 10:55:00 +0100", "message": "fix: Check if dueDate param is null [DHIS2-14736] (#13007)"}, {"oid": "b11da68ecf40901364ee28ad72e5c5dae3afff1f", "committedDate": "2023-02-23 08:16:53 +0100", "message": "fix: Add due date filter in sql generation [DHIS2-14497] (#13070)"}, {"oid": "a95012113446cf64430ab009cf37f5ad1fadc77e", "committedDate": "2023-03-02 15:36:17 +0100", "message": "fix: Respect events sort order [DHIS2-13735] (#13123)"}, {"oid": "4e17bd8e9b1f4b1331349dcdf116d7308ee6c243", "committedDate": "2023-03-14 14:03:31 +0000", "message": "fix: event pageSize is not respected with more than 1 category DHIS2-13135 (#13253)"}, {"oid": "d1975e80aa90b5ae63c68e5fc0c8b874cdf6d2da", "committedDate": "2023-03-20 10:36:05 +0100", "message": "chore: remove unused code (#13370)"}, {"oid": "43bd8664d854c226422c6b88b2c2bdf403fa240c", "committedDate": "2023-03-21 08:55:59 +0100", "message": "refactor: Simplify event orgunit sql query [TECH-1478] (#12897)"}, {"oid": "5764c79d20ac77259e14685730771c0748bf8407", "committedDate": "2023-03-24 12:43:39 +0100", "message": "fix: createdAtClient for events can be written only on inserts, never on updates [DHIS2-14991] (#13407)"}, {"oid": "fa4d70204237377c93cb232c49c188568ba95ebe", "committedDate": "2023-04-05 15:46:43 +0200", "message": "chore: use interface methods for method refs (#13535)"}, {"oid": "959c60d4f597187d0df2160fbbb675e5c4196e5c", "committedDate": "2023-04-27 16:46:18 +0200", "message": "chore: rename ProgramStageInstance to Event (#13731)"}, {"oid": "41e75ba362e65a726c88564679a43aadcebbc60a", "committedDate": "2023-05-03 07:50:28 +0200", "message": "chore: rename Event.programInstance to Event.enrollment (#13774)"}, {"oid": "240be973a3083b3e4b04ada02733f1908bb73512", "committedDate": "2023-05-08 08:39:16 +0000", "message": "chore: rename TrackedEntityInstance to TrackedEntity (#13827)"}, {"oid": "02336c9611c0dd85d5038223bddbfdebc0aae526", "committedDate": "2023-05-11 19:34:26 +0200", "message": "chore: move old tracker dxf2 code into deprecated package (#13901)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY1NTY3Mg==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r461655672", "body": "```suggestion\r\n                    catch ( JsonProcessingException | SQLException e )\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                catch ( JsonProcessingException | SQLException e)\n          \n          \n            \n                                catch ( JsonProcessingException | SQLException e )", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                    <span class=\"pl-k\">catch</span> ( <span class=\"pl-smi\">JsonProcessingException</span> <span class=\"pl-k\">|</span> <span class=\"pl-smi\">SQLException</span> e)</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                    <span class=\"pl-k\">catch</span> ( <span class=\"pl-smi\">JsonProcessingException</span> <span class=\"pl-k\">|</span> <span class=\"pl-smi\">SQLException</span> e<span class=\"x x-first x-last\"> </span>)</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "stian-sandvold", "createdAt": "2020-07-28T15:05:26Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java", "diffHunk": "@@ -303,49 +373,60 @@ public JdbcEventStore( StatementBuilder statementBuilder, @Qualifier( \"readOnlyJ\n         {\n             CachingMap<String, String> dataElementUidToIdentifierCache = new CachingMap<>();\n \n-            List<Collection<DataValue>> dataValuesList = events.stream().map( Event::getDataValues ).collect( Collectors.toList() );\n+            List<Collection<DataValue>> dataValuesList = events.stream().map( Event::getDataValues )\n+                .collect( Collectors.toList() );\n             populateCache( dataElementIdScheme, dataValuesList, dataElementUidToIdentifierCache );\n             convertDataValuesIdentifiers( dataElementIdScheme, dataValuesList, dataElementUidToIdentifierCache );\n         }\n \n         if ( params.getCategoryOptionCombo() == null && !isSuper( user ) )\n         {\n-            return events.stream().filter( ev -> ev.getAttributeCategoryOptions() != null && splitToArray( ev.getAttributeCategoryOptions(), TextUtils.SEMICOLON ).size() == ev.getOptionSize() ).collect( Collectors.toList() );\n+            return events.stream().filter( ev -> ev.getAttributeCategoryOptions() != null\n+                && splitToArray( ev.getAttributeCategoryOptions(), TextUtils.SEMICOLON ).size() == ev.getOptionSize() )\n+                .collect( Collectors.toList() );\n         }\n \n         return events;\n     }\n \n-    private void validateIdentifiersPresence( SqlRowSet rowSet, IdSchemes idSchemes,\n-        boolean validateCategoryOptionCombo )\n+    public void saveEvents( List<ProgramStageInstance> events )\n     {\n-        if ( StringUtils.isEmpty( rowSet.getString( \"p_identifier\" ) ) )\n+        try\n         {\n-            throw new IllegalStateException(\n-                String.format( \"Program %s does not have a value assigned for idScheme %s\",\n-                    rowSet.getString( \"p_uid\" ), idSchemes.getProgramIdScheme().name() ) );\n+            saveAllComments( saveAllEvents( events ) );\n         }\n-\n-        if ( StringUtils.isEmpty( rowSet.getString( \"ps_identifier\" ) ) )\n+        catch ( Exception e )\n         {\n-            throw new IllegalStateException(\n-                String.format( \"ProgramStage %s does not have a value assigned for idScheme %s\",\n-                    rowSet.getString( \"ps_uid\" ), idSchemes.getProgramStageIdScheme().name() ) );\n+            log.error( \"An error occurred saving a batch\", e );\n+            throw e;\n         }\n+    }\n \n-        if ( StringUtils.isEmpty( rowSet.getString( \"ou_identifier\" ) ) )\n+    @Override\n+    public void updateEvents( List<ProgramStageInstance> programStageInstances )\n+    {\n+        try\n         {\n-            throw new IllegalStateException(\n-                String.format( \"OrgUnit %s does not have a value assigned for idScheme %s\",\n-                    rowSet.getString( \"ou_uid\" ), idSchemes.getOrgUnitIdScheme().name() ) );\n+            jdbcTemplate.batchUpdate( UPDATE_EVENT_SQL, programStageInstances, programStageInstances.size(),\n+                ( ps, programStageInstance ) -> {\n+                    try\n+                    {\n+                        bindEventParamsForUpdate( ps, programStageInstance );\n+                    }\n+                    catch ( JsonProcessingException | SQLException e)", "originalCommit": "dc20b8a9249359bcdd1f612b1852f728ef63b7ab", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d0687a6c7c9e1c4dd64c4dc669bb80ae6e8c8c8b", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\nindex 3ed951650f..02c03a24ca 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\n", "chunk": "@@ -413,7 +487,7 @@ public class JdbcEventStore implements EventStore\n                     {\n                         bindEventParamsForUpdate( ps, programStageInstance );\n                     }\n-                    catch ( JsonProcessingException | SQLException e)\n+                    catch ( JsonProcessingException | SQLException e )\n                     {\n                         log.warn( \"PSI failed to update and will be ignored. PSI UID: \" + programStageInstance.getUid(),\n                             programStageInstance.getUid(), e );\n", "next_change": {"commit": "d360652a896bee650a842567e26cd1e62145cccb", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\nindex 02c03a24ca..578900e939 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\n", "chunk": "@@ -487,7 +378,7 @@ public class JdbcEventStore implements EventStore\n                     {\n                         bindEventParamsForUpdate( ps, programStageInstance );\n                     }\n-                    catch ( JsonProcessingException | SQLException e )\n+                    catch ( JsonProcessingException | SQLException e)\n                     {\n                         log.warn( \"PSI failed to update and will be ignored. PSI UID: \" + programStageInstance.getUid(),\n                             programStageInstance.getUid(), e );\n", "next_change": {"commit": "85c947b7cdb2c98af0c8d892a8fbc9f65784abe3", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\nindex 578900e939..81a6c76411 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\n", "chunk": "@@ -378,7 +412,7 @@ public class JdbcEventStore implements EventStore\n                     {\n                         bindEventParamsForUpdate( ps, programStageInstance );\n                     }\n-                    catch ( JsonProcessingException | SQLException e)\n+                    catch ( JsonProcessingException | SQLException e )\n                     {\n                         log.warn( \"PSI failed to update and will be ignored. PSI UID: \" + programStageInstance.getUid(),\n                             programStageInstance.getUid(), e );\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\nindex 3ed951650f..572fa793bd 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\n", "chunk": "@@ -413,7 +487,7 @@ public class JdbcEventStore implements EventStore\n                     {\n                         bindEventParamsForUpdate( ps, programStageInstance );\n                     }\n-                    catch ( JsonProcessingException | SQLException e)\n+                    catch ( JsonProcessingException | SQLException e )\n                     {\n                         log.warn( \"PSI failed to update and will be ignored. PSI UID: \" + programStageInstance.getUid(),\n                             programStageInstance.getUid(), e );\n", "next_change": {"commit": "ae6806774b896dcc69a99687ce331d60d40995c7", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\nindex 572fa793bd..55758ba58d 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\n", "chunk": "@@ -477,22 +594,27 @@ public class JdbcEventStore implements EventStore\n     }\n \n     @Override\n-    public void updateEvents( List<ProgramStageInstance> programStageInstances )\n+    public List<ProgramStageInstance> updateEvents( List<ProgramStageInstance> programStageInstances )\n     {\n         try\n         {\n-            jdbcTemplate.batchUpdate( UPDATE_EVENT_SQL, programStageInstances, programStageInstances.size(),\n-                ( ps, programStageInstance ) -> {\n-                    try\n-                    {\n-                        bindEventParamsForUpdate( ps, programStageInstance );\n-                    }\n-                    catch ( JsonProcessingException | SQLException e )\n-                    {\n-                        log.warn( \"PSI failed to update and will be ignored. PSI UID: \" + programStageInstance.getUid(),\n-                            programStageInstance.getUid(), e );\n-                    }\n-                } );\n+            SqlParameterSource[] parameters = new SqlParameterSource[programStageInstances.size()];\n+\n+            for ( int i = 0; i < programStageInstances.size(); i++ )\n+            {\n+                try\n+                {\n+                    parameters[i] = getSqlParameters( programStageInstances.get( i ) );\n+                }\n+                catch ( SQLException | JsonProcessingException e )\n+                {\n+                    log.warn(\n+                        \"PSI failed to update and will be ignored. PSI UID: \" + programStageInstances.get( i ).getUid(),\n+                        programStageInstances.get( i ).getUid(), e );\n+                }\n+            }\n+\n+            jdbcTemplate.batchUpdate( UPDATE_EVENT_SQL, parameters );\n         }\n         catch ( DataAccessException e )\n         {\n", "next_change": {"commit": "959c60d4f597187d0df2160fbbb675e5c4196e5c", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\nindex 55758ba58d..dac16b0e5a 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\n", "chunk": "@@ -594,23 +575,23 @@ public class JdbcEventStore implements EventStore\n     }\n \n     @Override\n-    public List<ProgramStageInstance> updateEvents( List<ProgramStageInstance> programStageInstances )\n+    public List<org.hisp.dhis.program.Event> updateEvents( List<Event> events )\n     {\n         try\n         {\n-            SqlParameterSource[] parameters = new SqlParameterSource[programStageInstances.size()];\n+            SqlParameterSource[] parameters = new SqlParameterSource[events.size()];\n \n-            for ( int i = 0; i < programStageInstances.size(); i++ )\n+            for ( int i = 0; i < events.size(); i++ )\n             {\n                 try\n                 {\n-                    parameters[i] = getSqlParameters( programStageInstances.get( i ) );\n+                    parameters[i] = getSqlParametersForUpdate( events.get( i ) );\n                 }\n                 catch ( SQLException | JsonProcessingException e )\n                 {\n                     log.warn(\n-                        \"PSI failed to update and will be ignored. PSI UID: \" + programStageInstances.get( i ).getUid(),\n-                        programStageInstances.get( i ).getUid(), e );\n+                        \"PSI failed to update and will be ignored. PSI UID: \" + events.get( i ).getUid(),\n+                        events.get( i ).getUid(), e );\n                 }\n             }\n \n", "next_change": null}, {"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\nindex 55758ba58d..dac16b0e5a 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\n", "chunk": "@@ -622,46 +603,49 @@ public class JdbcEventStore implements EventStore\n             throw e;\n         }\n \n-        return programStageInstances;\n+        return events;\n     }\n \n     @Override\n-    public List<Map<String, String>> getEventsGrid( EventSearchParams params, List<OrganisationUnit> organisationUnits )\n+    public List<Map<String, String>> getEventsGrid( EventSearchParams params )\n     {\n         User user = currentUserService.getCurrentUser();\n \n         setAccessiblePrograms( user, params );\n \n-        String sql = buildGridSql( params, organisationUnits );\n+        final MapSqlParameterSource mapSqlParameterSource = new MapSqlParameterSource();\n \n-        SqlRowSet rowSet = jdbcTemplate.getJdbcTemplate().queryForRowSet( sql );\n+        String sql = buildGridSql( user, params, mapSqlParameterSource );\n \n-        log.debug( \"Event query SQL: \" + sql );\n+        return jdbcTemplate.query( sql, mapSqlParameterSource, rowSet -> {\n \n-        List<Map<String, String>> list = new ArrayList<>();\n+            log.debug( \"Event query SQL: \" + sql );\n \n-        while ( rowSet.next() )\n-        {\n-            final Map<String, String> map = new HashMap<>();\n+            List<Map<String, String>> list = new ArrayList<>();\n \n-            for ( String col : STATIC_EVENT_COLUMNS )\n+            while ( rowSet.next() )\n             {\n-                map.put( col, rowSet.getString( col ) );\n-            }\n+                final Map<String, String> map = new HashMap<>();\n \n-            for ( QueryItem item : params.getDataElements() )\n-            {\n-                map.put( item.getItemId(), rowSet.getString( item.getItemId() ) );\n-            }\n+                for ( String col : STATIC_EVENT_COLUMNS )\n+                {\n+                    map.put( col, rowSet.getString( col ) );\n+                }\n \n-            list.add( map );\n-        }\n+                for ( QueryItem item : params.getDataElements() )\n+                {\n+                    map.put( item.getItemId(), rowSet.getString( item.getItemId() ) );\n+                }\n+\n+                list.add( map );\n+            }\n \n-        return list;\n+            return list;\n+        } );\n     }\n \n     @Override\n-    public List<EventRow> getEventRows( EventSearchParams params, List<OrganisationUnit> organisationUnits )\n+    public List<EventRow> getEventRows( EventSearchParams params )\n     {\n         User user = currentUserService.getCurrentUser();\n \n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "message": "Merge commit", "committedDate": null}, {"oid": "1775146057dbef2da11c4e554b339f150f2f4857", "committedDate": "2020-09-09 08:34:03 +0200", "message": "perf: [DHIS-9415] avoid querying programstageinstancecomments if not necessary (#6103)"}, {"oid": "0d35843121f0ad3004fad015f1520c5b06a5c337", "committedDate": "2020-09-15 09:24:33 +0200", "message": "Merge 2.35 into master (#6149)"}, {"oid": "e4ff88027eb8dd823a539ef0ed82daeff5072e7c", "committedDate": "2020-09-18 16:43:42 +0200", "message": "fix: prevent db deadlock during Event update (#6135)"}, {"oid": "1bd8ee38126fbac22f805db44dad0cdcba7b14a6", "committedDate": "2020-09-23 11:30:37 +0200", "message": "fix: allow updating an Event with File data type [DHIS2-9559]"}, {"oid": "52b8f7c48def44670be7ba9d25d0ee963fe9441e", "committedDate": "2020-09-24 09:19:03 +0200", "message": "fix: Coordinate class removed, drop support for old implementation (#6172)"}, {"oid": "13cd21d76507450be96b06e13823b24cf357be04", "committedDate": "2020-10-30 09:38:34 +0100", "message": "feat: DHIS2-8911 adding LastUpdatedBy and CreatedBy user informations in events (#6521)"}, {"oid": "bcb4654eefc1d66ff614d1784219e7055a3671cc", "committedDate": "2020-10-30 11:24:12 +0100", "message": "fix: DHIS2-8911 corrected wrong column names (#6530)"}, {"oid": "08574f966f50a4667668edb4077cfd9e21bd9e10", "committedDate": "2020-11-11 13:59:04 +0100", "message": "fix: DHIS-7937 quotes in filter values depend on filter type when rendering sql string (#6604)"}, {"oid": "d34f05e1348f3dff54ced7059283a96a7b699ea4", "committedDate": "2020-11-16 18:21:11 +0100", "message": "feat: DHIS2-9835 user info in comments and notes for Events and Enrollments (#6587)"}, {"oid": "fbc5d6d0e07ba8180e933a63c670d58528cb700c", "committedDate": "2020-11-20 16:22:59 +0700", "message": "fix: Cant delete events (#6729)"}, {"oid": "5e4669b4c89c809989ea600900735dd71baa86e2", "committedDate": "2020-12-23 14:00:18 +0700", "message": "feat: Upgrade Hibernate  (#6939)"}, {"oid": "f00a1e4b7f23c356987cadfdc8a8407e1a098f52", "committedDate": "2021-01-11 07:26:55 +0100", "message": "fix: Check category option sharing settings (#7009)"}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "55164c30457d73850a5233869ab0119d31fcac9b", "committedDate": "2021-01-28 14:14:25 +0100", "message": "fix: sharing query issue in JdbcEventStore (#7151)"}, {"oid": "5d1a415fef305ea3cc18a3c2fadceb208403006a", "committedDate": "2021-01-29 09:30:08 +0100", "message": "refactor: Controllers params [DHIS2-10202] (#7201)"}, {"oid": "10b11c17ef2f2964263efc051f96c8e8f8f7e1f4", "committedDate": "2021-02-02 12:33:59 +0100", "message": "feat: change user property name to createdBy (#7061)"}, {"oid": "b46e880a82e0e0d03e1f7a940630771907d4317a", "committedDate": "2021-05-26 15:57:37 +0200", "message": "chore: Replace usage of duplicated method (#8077)"}, {"oid": "41338b95cf44f70b44834c3515933a677114dd84", "committedDate": "2021-05-28 13:54:35 +0200", "message": "fix: skipPaging properly considered (#8087)"}, {"oid": "15a1ce87df3a6aecbb40ceca8c1aeb9ef9a35290", "committedDate": "2021-06-08 15:46:02 +0200", "message": "perf: Remove program lookup in event query loop [DHIS2-11264] (#8149)"}, {"oid": "002abc97ad43829b6a7b59d2611a165106b666c2", "committedDate": "2021-06-28 11:39:16 +0200", "message": "fix: Do not hard delete events in importer [DHIS2-11375] (#8309)"}, {"oid": "6bdec842fbd0ccf97729ec29b96202365a4e832d", "committedDate": "2021-07-28 10:10:25 +0200", "message": "fix: Add enrollment filter for event exporter [DHIS2-11226] (#8441)"}, {"oid": "8ee3bc02e7758714d4865fb84c65dcd53f4820b1", "committedDate": "2021-09-22 13:34:18 +0200", "message": "fix: Event collection endpoint does not fetch relationships [DHIS2-11541] (#8540)"}, {"oid": "e9aa95cda06ed418fa24c389b38cde8afe364c2f", "committedDate": "2021-09-27 10:03:35 +0200", "message": "fix: teis lastupdated update (#8808)"}, {"oid": "9d05d585562bf9d269ffed02307ec59694795cfc", "committedDate": "2021-10-07 10:34:05 +0200", "message": "fix: Fix by reducing number of SQL queries for event collection (#8955)"}, {"oid": "5e4b90d1aaa2f3b0264b411b0a8d1bf0e860202a", "committedDate": "2021-10-14 12:31:47 +0200", "message": "refactor: jdbc event store replaced some strings with constants/enums [TECH-463] (#9041)"}, {"oid": "f2249116faa6cfd647106204ba0f09457811e3dd", "committedDate": "2021-10-18 19:14:22 +0200", "message": "chore: Move lambdas initializations into static blocks [TECH-774] (#9074)"}, {"oid": "0ea45addae148641a66270e104d43d70b59dde05", "committedDate": "2021-10-26 09:45:39 +0200", "message": "refactor: Remove check test profile in runtime code [TECH-699] (#9110)"}, {"oid": "9b7ebd47b923d1f52b53a4a724b5b1ab3d2f1c8d", "committedDate": "2021-10-29 11:25:49 +0200", "message": "Merge pull request from GHSA-cmpc-frjv-rrmw"}, {"oid": "d466cd4761340382d8214d3eca7c7616569b903e", "committedDate": "2021-10-29 17:45:42 +0200", "message": "fix: breaking unit test (#9150)"}, {"oid": "8a62c3e0240b711a75ca821921bae684b82fff5f", "committedDate": "2021-11-30 12:46:53 +0100", "message": "perf: Use ou.path for ouMode event queries (#9337)"}, {"oid": "cc35b66a078649936fc2bd7de77cfc2f718c1e32", "committedDate": "2021-12-07 16:40:31 +0100", "message": "fix: Apply TEI ownership in event query (#9367)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "da4ef9091eadf20324ce10342073e9e8031391af", "committedDate": "2022-01-26 10:33:44 +0100", "message": "fix: Include mentioned ou for ouMode=CHILDREN"}, {"oid": "93b61e49f94920cf3adfe3fd83ad8f0c060afbb1", "committedDate": "2022-02-14 09:59:56 +0100", "message": "fix: Request param totalPages=false for events/enrollments [DHIS2-12530] (#9719)"}, {"oid": "bd3f8dacffeb333843a99f3e659d9f19dae7a977", "committedDate": "2022-02-17 12:08:13 +0100", "message": "fix: Show uid instead of id in events [DHIS2-12648] (#9836)"}, {"oid": "8ccf9a288a67e5ee5349024fd3d281372c64c956", "committedDate": "2022-02-22 13:25:35 +0800", "message": "feat: Merge User/UserCredentials into one DB table (#9754)"}, {"oid": "869fa986d53abcf6fc503e46e3b25e1b876e6c3d", "committedDate": "2022-03-01 13:31:17 +0100", "message": "feat: Add single data value endpoint with JSON body [DHIS2-12689] (#9886)"}, {"oid": "d117ff9ce355694569f7c6477141cf35c6412609", "committedDate": "2022-03-04 11:13:40 +0100", "message": "fix: Return complete information for user fields in NTI [DHIS2-12717] (#9936)"}, {"oid": "dc31b5e0ec776f00b915e47a08abe1e54b8e3d29", "committedDate": "2022-04-19 15:49:20 +0200", "message": "fix: Handle NPE for null organsationUnits in event programs sync job [DHIS2-12762] (2.39) (#10525)"}, {"oid": "d99da048b6427aa16b080ab0a0e25eda4a2a0f96", "committedDate": "2022-05-09 13:53:18 +0200", "message": "feat: Refactor getCurrentUser() to return DHIS2 User object 2 (#10600)"}, {"oid": "83890d87919436906d00955e19e5925f7355ca51", "committedDate": "2022-05-11 21:00:19 +0200", "message": "fix: Fix SQL queries for deleted relationships [DHIS2-11320] (#10758)"}, {"oid": "ae6806774b896dcc69a99687ce331d60d40995c7", "committedDate": "2022-06-02 09:20:44 +0200", "message": "chore: Refactor JdbcTemplate to NamedParameterJdbcTemplate (#10767)"}, {"oid": "3ffbead58842052c66f26af10a103386f5cb16d0", "committedDate": "2022-06-14 12:05:49 +0200", "message": "fix: Include enrollment followup in eventrow return (#11070)"}, {"oid": "2c0aa62cc8f940e7629f081284bb01dac8c9faee", "committedDate": "2022-06-21 19:38:49 +0200", "message": "feat: Add filters to TEDV audit endpoint [DHIS2-13421] (#11125)"}, {"oid": "19962f46788d3430652c3124e01d1f16f17803ff", "committedDate": "2022-07-05 11:59:15 +0200", "message": "fix: Refactor Event SQL to use named parameters - Simple bindings [ DHIS2-13306 ] (#11205)"}, {"oid": "5ea8cffe77c593325973769e83dbe505441a5cf3", "committedDate": "2022-07-26 13:19:15 +0200", "message": "fix: Performance optimisation when fetching events from Event Programs [ DHIS2-13443 ]  (#11271)"}, {"oid": "9135ce719d6db71435c61fcd4d7144e013e77622", "committedDate": "2022-08-02 15:16:29 +0200", "message": "Feat: Refactor Event SQL to use named parameters - Complex bindings [ Dhis2-13455 ] (#11322)"}, {"oid": "04654efa7ba2d741ddbf1a6f0cf63fedcd01eb3f", "committedDate": "2022-08-29 21:50:26 +0200", "message": "fix: get tei id, date types, update tests (#11541)"}, {"oid": "eb0e2a4e8d608ef19aac980cf3c5ed4e3b859fb9", "committedDate": "2022-09-06 10:29:19 +0200", "message": "fix: Refactor Event SQL to use named parameters - Events grid - [ DHIS2-13508 ] (#11545)"}, {"oid": "36ee597adc705b106a64c243ea603e85234dbb4f", "committedDate": "2022-09-07 07:40:39 +0200", "message": "feat: filter /tracker/events by enrollmentEnrolledAfter DHIS2-13648 (#11651)"}, {"oid": "4f11b0c48c8c354a79249d95d963a996c4128643", "committedDate": "2022-09-07 09:20:40 +0200", "message": "feat: filter /tracker/events by enrollmentEnrolledBefore (#11672)"}, {"oid": "66df00d85fce2b865439d8a0fc9c701fca88ece0", "committedDate": "2022-09-07 10:11:34 +0200", "message": "feat: filter /tracker/events by enrollmentOccurredBefore/After (#11675)"}, {"oid": "5a6ad83ad236b6b721794c52b51da456e9b8453d", "committedDate": "2022-09-09 08:08:07 +0200", "message": "feat: filter /tracker/events by filterAttributes DHIS2-13648 (#11683)"}, {"oid": "501c22e088de3d40a75a2a771a64efc6998cb880", "committedDate": "2022-09-12 12:07:12 +0200", "message": "feat: Add ordering on tei attributes for events [DHIS2-13648] (#11724)"}, {"oid": "531ca62258142b6e88d3c96b1123315adce393da", "committedDate": "2022-09-13 11:59:53 +0200", "message": "feat: Add ordering attribute column in select [DHIS2-13648] (#11750)"}, {"oid": "b29fd87d6c8d63a8293d6600bdec633f7ddf2953", "committedDate": "2022-09-16 11:09:48 +0200", "message": "feat: Clean up JdbcEventStore class [DHIS2-13648] (#11796)"}, {"oid": "1ae607c63e5683bae651721208891d65e9612ee8", "committedDate": "2022-09-22 11:19:32 +0200", "message": "Merge pull request from GHSA-7pwm-6rh2-2388"}, {"oid": "d7afc27b3b1e7159e8e0aab4f2bcb58f9b1167d0", "committedDate": "2022-09-22 15:56:33 +0200", "message": "fix: move deco access to case in select (#11822)"}, {"oid": "3c815e2474da1b1ca7312543e96c882b49d465be", "committedDate": "2022-09-26 11:20:25 +0200", "message": "fix: Ensure filter valueType is applied in event query (#11715)"}, {"oid": "79a4e480b97e856c20eb616144d4851738d674b6", "committedDate": "2022-09-28 13:31:31 +0200", "message": "fix: Ensure actual event orgunit is returned [DHIS2-13656] (#11755)"}, {"oid": "b22196b76551e33179af112ccdfb7d64c5a46c67", "committedDate": "2022-09-28 13:59:05 +0200", "message": "fix: Filter can have multiple value [DHIS2-13676] (#11921)"}, {"oid": "d797ac751aa993bf8a9bf6bb446abf12982aac29", "committedDate": "2022-10-17 13:40:26 +0200", "message": "fix: potential NPEs found by nullness analysis [TECH-1460] (#12113)"}, {"oid": "7a4160ba9c1550a536807361acfa086f722413a0", "committedDate": "2022-11-21 14:38:43 +0100", "message": "fix: Match psi.ouId and ou.ouId to fetch psi.ouName [DHIS2-13656] (#12377)"}, {"oid": "27b75665be58c25de309b5d71e7bd86200d740d6", "committedDate": "2022-12-01 11:37:48 +0100", "message": "chore: use AssignedUserQueryParam in EventSearchParams (#12446)"}, {"oid": "9556d7a326e0bb6b64d9d223e8c511906ef7c564", "committedDate": "2022-12-21 10:35:40 +0100", "message": "fix: Ensure actual event orgunit is returned [DHIS2-13656] (#12518)"}, {"oid": "e586cd4742efa92258f64d23c8b324575de8c514", "committedDate": "2023-02-14 10:55:00 +0100", "message": "fix: Check if dueDate param is null [DHIS2-14736] (#13007)"}, {"oid": "b11da68ecf40901364ee28ad72e5c5dae3afff1f", "committedDate": "2023-02-23 08:16:53 +0100", "message": "fix: Add due date filter in sql generation [DHIS2-14497] (#13070)"}, {"oid": "a95012113446cf64430ab009cf37f5ad1fadc77e", "committedDate": "2023-03-02 15:36:17 +0100", "message": "fix: Respect events sort order [DHIS2-13735] (#13123)"}, {"oid": "4e17bd8e9b1f4b1331349dcdf116d7308ee6c243", "committedDate": "2023-03-14 14:03:31 +0000", "message": "fix: event pageSize is not respected with more than 1 category DHIS2-13135 (#13253)"}, {"oid": "d1975e80aa90b5ae63c68e5fc0c8b874cdf6d2da", "committedDate": "2023-03-20 10:36:05 +0100", "message": "chore: remove unused code (#13370)"}, {"oid": "43bd8664d854c226422c6b88b2c2bdf403fa240c", "committedDate": "2023-03-21 08:55:59 +0100", "message": "refactor: Simplify event orgunit sql query [TECH-1478] (#12897)"}, {"oid": "5764c79d20ac77259e14685730771c0748bf8407", "committedDate": "2023-03-24 12:43:39 +0100", "message": "fix: createdAtClient for events can be written only on inserts, never on updates [DHIS2-14991] (#13407)"}, {"oid": "fa4d70204237377c93cb232c49c188568ba95ebe", "committedDate": "2023-04-05 15:46:43 +0200", "message": "chore: use interface methods for method refs (#13535)"}, {"oid": "959c60d4f597187d0df2160fbbb675e5c4196e5c", "committedDate": "2023-04-27 16:46:18 +0200", "message": "chore: rename ProgramStageInstance to Event (#13731)"}, {"oid": "41e75ba362e65a726c88564679a43aadcebbc60a", "committedDate": "2023-05-03 07:50:28 +0200", "message": "chore: rename Event.programInstance to Event.enrollment (#13774)"}, {"oid": "240be973a3083b3e4b04ada02733f1908bb73512", "committedDate": "2023-05-08 08:39:16 +0000", "message": "chore: rename TrackedEntityInstance to TrackedEntity (#13827)"}, {"oid": "02336c9611c0dd85d5038223bddbfdebc0aae526", "committedDate": "2023-05-11 19:34:26 +0200", "message": "chore: move old tracker dxf2 code into deprecated package (#13901)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY1NTg3MA==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r461655870", "body": "```suggestion\r\n                || ( params.getCategoryOptionCombo() == null && !isSuper( user ) && !userHasAccess( rowSet ) ) )\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            || (params.getCategoryOptionCombo() == null && !isSuper( user ) && !userHasAccess( rowSet )) )\n          \n          \n            \n                            || ( params.getCategoryOptionCombo() == null && !isSuper( user ) && !userHasAccess( rowSet ) ) )", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                <span class=\"pl-k\">||</span> (params<span class=\"pl-k\">.</span>getCategoryOptionCombo() <span class=\"pl-k\">==</span> <span class=\"pl-c1\">null</span> <span class=\"pl-k\">&amp;&amp;</span> <span class=\"pl-k\">!</span>isSuper( user ) <span class=\"pl-k\">&amp;&amp;</span> <span class=\"pl-k\">!</span>userHasAccess( rowSet )) )</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                <span class=\"pl-k\">||</span> (<span class=\"x x-first x-last\"> </span>params<span class=\"pl-k\">.</span>getCategoryOptionCombo() <span class=\"pl-k\">==</span> <span class=\"pl-c1\">null</span> <span class=\"pl-k\">&amp;&amp;</span> <span class=\"pl-k\">!</span>isSuper( user ) <span class=\"pl-k\">&amp;&amp;</span> <span class=\"pl-k\">!</span>userHasAccess( rowSet )<span class=\"x x-first x-last\"> </span>) )</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "stian-sandvold", "createdAt": "2020-07-28T15:05:41Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java", "diffHunk": "@@ -412,7 +484,8 @@ private void validateIdentifiersPresence( SqlRowSet rowSet, IdSchemes idSchemes,\n \n         while ( rowSet.next() )\n         {\n-            if ( rowSet.getString( \"psi_uid\" ) == null || ( params.getCategoryOptionCombo() == null && !isSuperUser && !userHasAccess( rowSet ) ) )\n+            if ( rowSet.getString( \"psi_uid\" ) == null\n+                || (params.getCategoryOptionCombo() == null && !isSuper( user ) && !userHasAccess( rowSet )) )", "originalCommit": "dc20b8a9249359bcdd1f612b1852f728ef63b7ab", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d0687a6c7c9e1c4dd64c4dc669bb80ae6e8c8c8b", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\nindex 3ed951650f..02c03a24ca 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\n", "chunk": "@@ -485,7 +559,7 @@ public class JdbcEventStore implements EventStore\n         while ( rowSet.next() )\n         {\n             if ( rowSet.getString( \"psi_uid\" ) == null\n-                || (params.getCategoryOptionCombo() == null && !isSuper( user ) && !userHasAccess( rowSet )) )\n+                || ( params.getCategoryOptionCombo() == null && !isSuper( user ) && !userHasAccess( rowSet ) ) )\n             {\n                 continue;\n             }\n", "next_change": {"commit": "d360652a896bee650a842567e26cd1e62145cccb", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\nindex 02c03a24ca..578900e939 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\n", "chunk": "@@ -559,7 +450,7 @@ public class JdbcEventStore implements EventStore\n         while ( rowSet.next() )\n         {\n             if ( rowSet.getString( \"psi_uid\" ) == null\n-                || ( params.getCategoryOptionCombo() == null && !isSuper( user ) && !userHasAccess( rowSet ) ) )\n+                || (params.getCategoryOptionCombo() == null && !isSuper( user ) && !userHasAccess( rowSet )) )\n             {\n                 continue;\n             }\n", "next_change": {"commit": "749b65cd80e56af3c34ef203ba9a14130240148f", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\nindex 578900e939..3101e9799b 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\n", "chunk": "@@ -450,7 +484,7 @@ public class JdbcEventStore implements EventStore\n         while ( rowSet.next() )\n         {\n             if ( rowSet.getString( \"psi_uid\" ) == null\n-                || (params.getCategoryOptionCombo() == null && !isSuper( user ) && !userHasAccess( rowSet )) )\n+                || ( params.getCategoryOptionCombo() == null && !isSuper( user ) && !userHasAccess( rowSet ) ) )\n             {\n                 continue;\n             }\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\nindex 3ed951650f..572fa793bd 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\n", "chunk": "@@ -485,7 +559,7 @@ public class JdbcEventStore implements EventStore\n         while ( rowSet.next() )\n         {\n             if ( rowSet.getString( \"psi_uid\" ) == null\n-                || (params.getCategoryOptionCombo() == null && !isSuper( user ) && !userHasAccess( rowSet )) )\n+                || ( params.getCategoryOptionCombo() == null && !isSuper( user ) && !userHasAccess( rowSet ) ) )\n             {\n                 continue;\n             }\n", "next_change": {"commit": "ea76fa86409613c9766d4508d65c88ac55c413c3", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\nindex 572fa793bd..d05638c082 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\n", "chunk": "@@ -559,7 +585,7 @@ public class JdbcEventStore implements EventStore\n         while ( rowSet.next() )\n         {\n             if ( rowSet.getString( \"psi_uid\" ) == null\n-                || ( params.getCategoryOptionCombo() == null && !isSuper( user ) && !userHasAccess( rowSet ) ) )\n+                || (params.getCategoryOptionCombo() == null && !isSuper( user ) && !userHasAccess( rowSet )) )\n             {\n                 continue;\n             }\n", "next_change": {"commit": "19962f46788d3430652c3124e01d1f16f17803ff", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\nindex d05638c082..1c6c4242ea 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\n", "chunk": "@@ -569,120 +681,129 @@ public class JdbcEventStore implements EventStore\n \n         List<EventRow> eventRows = new ArrayList<>();\n \n-        String sql = buildSql( params, organisationUnits, user );\n-        SqlRowSet rowSet = jdbcTemplate.queryForRowSet( sql );\n+        final MapSqlParameterSource mapSqlParameterSource = new MapSqlParameterSource();\n \n-        log.debug( \"Event query SQL: \" + sql );\n+        String sql = buildSql( params, mapSqlParameterSource, organisationUnits, user );\n \n-        EventRow eventRow = new EventRow();\n+        return jdbcTemplate.query( sql, mapSqlParameterSource, resultSet -> {\n \n-        eventRow.setEvent( \"not_valid\" );\n+            log.debug( \"Event query SQL: \" + sql );\n \n-        Set<String> notes = new HashSet<>();\n+            EventRow eventRow = new EventRow();\n \n-        Map<String, List<DataValue>> processedDataValues = new HashMap<>();\n+            eventRow.setEvent( \"not_valid\" );\n \n-        while ( rowSet.next() )\n-        {\n-            if ( rowSet.getString( \"psi_uid\" ) == null\n-                || (params.getCategoryOptionCombo() == null && !isSuper( user ) && !userHasAccess( rowSet )) )\n-            {\n-                continue;\n-            }\n+            Set<String> notes = new HashSet<>();\n \n-            if ( eventRow.getUid() == null || !eventRow.getUid().equals( rowSet.getString( \"psi_uid\" ) ) )\n+            Map<String, List<DataValue>> processedDataValues = new HashMap<>();\n+\n+            while ( resultSet.next() )\n             {\n-                validateIdentifiersPresence( rowSet, params.getIdSchemes(), false );\n+                if ( resultSet.getString( \"psi_uid\" ) == null\n+                    || (params.getCategoryOptionCombo() == null && !isSuper( user ) && !userHasAccess( resultSet )) )\n+                {\n+                    continue;\n+                }\n \n-                eventRow = new EventRow();\n+                if ( eventRow.getUid() == null || !eventRow.getUid()\n+                    .equals( resultSet.getString( \"psi_uid\" ) ) )\n+                {\n+                    validateIdentifiersPresence( resultSet, params.getIdSchemes(), false );\n \n-                eventRow.setUid( rowSet.getString( \"psi_uid\" ) );\n+                    eventRow = new EventRow();\n \n-                eventRow.setEvent( rowSet.getString( \"psi_uid\" ) );\n-                eventRow.setTrackedEntityInstance( rowSet.getString( \"tei_uid\" ) );\n-                eventRow.setTrackedEntityInstanceOrgUnit( rowSet.getString( \"tei_ou\" ) );\n-                eventRow.setTrackedEntityInstanceOrgUnitName( rowSet.getString( \"tei_ou_name\" ) );\n-                eventRow.setTrackedEntityInstanceCreated( rowSet.getString( \"tei_created\" ) );\n-                eventRow.setTrackedEntityInstanceInactive( rowSet.getBoolean( \"tei_inactive\" ) );\n-                eventRow.setDeleted( rowSet.getBoolean( \"psi_deleted\" ) );\n+                    eventRow.setUid( resultSet.getString( \"psi_uid\" ) );\n \n-                eventRow.setProgram( rowSet.getString( \"p_identifier\" ) );\n-                eventRow.setProgramStage( rowSet.getString( \"ps_identifier\" ) );\n-                eventRow.setOrgUnit( rowSet.getString( \"ou_identifier\" ) );\n+                    eventRow.setEvent( resultSet.getString( \"psi_uid\" ) );\n+                    eventRow.setTrackedEntityInstance( resultSet.getString( \"tei_uid\" ) );\n+                    eventRow.setTrackedEntityInstanceOrgUnit( resultSet.getString( \"tei_ou\" ) );\n+                    eventRow.setTrackedEntityInstanceOrgUnitName( resultSet.getString( \"tei_ou_name\" ) );\n+                    eventRow.setTrackedEntityInstanceCreated( resultSet.getString( \"tei_created\" ) );\n+                    eventRow.setTrackedEntityInstanceInactive( resultSet.getBoolean( \"tei_inactive\" ) );\n+                    eventRow.setDeleted( resultSet.getBoolean( \"psi_deleted\" ) );\n \n-                ProgramType programType = ProgramType.fromValue( rowSet.getString( \"p_type\" ) );\n+                    eventRow.setProgram( resultSet.getString( \"p_identifier\" ) );\n+                    eventRow.setProgramStage( resultSet.getString( \"ps_identifier\" ) );\n+                    eventRow.setOrgUnit( resultSet.getString( \"ou_identifier\" ) );\n \n-                if ( programType == ProgramType.WITHOUT_REGISTRATION )\n-                {\n-                    eventRow.setEnrollment( rowSet.getString( \"pi_uid\" ) );\n-                    eventRow.setFollowup( rowSet.getBoolean( \"pi_followup\" ) );\n-                }\n+                    ProgramType programType = ProgramType.fromValue( resultSet.getString( \"p_type\" ) );\n \n-                eventRow.setTrackedEntityInstance( rowSet.getString( \"tei_uid\" ) );\n-                eventRow.setOrgUnitName( rowSet.getString( \"ou_name\" ) );\n-                eventRow.setDueDate( DateUtils.getIso8601NoTz( rowSet.getDate( \"psi_duedate\" ) ) );\n-                eventRow.setEventDate( DateUtils.getIso8601NoTz( rowSet.getDate( \"psi_executiondate\" ) ) );\n+                    if ( programType == ProgramType.WITH_REGISTRATION )\n+                    {\n+                        eventRow.setEnrollment( resultSet.getString( \"pi_uid\" ) );\n+                        eventRow.setFollowup( resultSet.getBoolean( \"pi_followup\" ) );\n+                    }\n \n-                eventRows.add( eventRow );\n-            }\n+                    eventRow.setTrackedEntityInstance( resultSet.getString( \"tei_uid\" ) );\n+                    eventRow.setOrgUnitName( resultSet.getString( \"ou_name\" ) );\n+                    eventRow.setDueDate( DateUtils.getIso8601NoTz( resultSet.getDate( \"psi_duedate\" ) ) );\n+                    eventRow.setEventDate( DateUtils.getIso8601NoTz( resultSet.getDate( \"psi_executiondate\" ) ) );\n \n-            if ( rowSet.getString( \"pav_value\" ) != null && rowSet.getString( \"ta_uid\" ) != null )\n-            {\n-                String valueType = rowSet.getString( \"ta_valuetype\" );\n+                    eventRows.add( eventRow );\n+                }\n \n-                Attribute attribute = new Attribute();\n-                attribute.setCreated( DateUtils.getIso8601NoTz( rowSet.getDate( \"pav_created\" ) ) );\n-                attribute.setLastUpdated( DateUtils.getIso8601NoTz( rowSet.getDate( \"pav_lastupdated\" ) ) );\n-                attribute.setValue( rowSet.getString( \"pav_value\" ) );\n-                attribute.setDisplayName( rowSet.getString( \"ta_name\" ) );\n-                attribute.setValueType( valueType != null ? ValueType.valueOf( valueType.toUpperCase() ) : null );\n-                attribute.setAttribute( rowSet.getString( \"ta_uid\" ) );\n+                if ( resultSet.getString( \"pav_value\" ) != null && resultSet.getString( \"ta_uid\" ) != null )\n+                {\n+                    String valueType = resultSet.getString( \"ta_valuetype\" );\n+\n+                    Attribute attribute = new Attribute();\n+                    attribute.setCreated( DateUtils.getIso8601NoTz( resultSet.getDate( \"pav_created\" ) ) );\n+                    attribute.setLastUpdated( DateUtils.getIso8601NoTz( resultSet.getDate( \"pav_lastupdated\" ) ) );\n+                    attribute.setValue( resultSet.getString( \"pav_value\" ) );\n+                    attribute.setDisplayName( resultSet.getString( \"ta_name\" ) );\n+                    attribute.setValueType( valueType != null ? ValueType.valueOf( valueType.toUpperCase() ) : null );\n+                    attribute.setAttribute( resultSet.getString( \"ta_uid\" ) );\n+\n+                    eventRow.getAttributes()\n+                        .add( attribute );\n+                }\n \n-                eventRow.getAttributes().add( attribute );\n-            }\n+                if ( !StringUtils.isEmpty( resultSet.getString( \"psi_eventdatavalues\" ) )\n+                    && !processedDataValues.containsKey( resultSet.getString( \"psi_uid\" ) ) )\n+                {\n+                    List<DataValue> dataValues = new ArrayList<>();\n+                    Set<EventDataValue> eventDataValues = convertEventDataValueJsonIntoSet(\n+                        resultSet.getString( \"psi_eventdatavalues\" ) );\n \n-            if ( !org.springframework.util.StringUtils.isEmpty( rowSet.getString( \"psi_eventdatavalues\" ) )\n-                && !processedDataValues.containsKey( rowSet.getString( \"psi_uid\" ) ) )\n-            {\n-                List<DataValue> dataValues = new ArrayList<>();\n-                Set<EventDataValue> eventDataValues = convertEventDataValueJsonIntoSet(\n-                    rowSet.getString( \"psi_eventdatavalues\" ) );\n+                    for ( EventDataValue dv : eventDataValues )\n+                    {\n+                        dataValues.add( convertEventDataValueIntoDtoDataValue( dv ) );\n+                    }\n+                    processedDataValues.put( resultSet.getString( \"psi_uid\" ), dataValues );\n+                }\n \n-                for ( EventDataValue dv : eventDataValues )\n+                if ( resultSet.getString( \"psinote_value\" ) != null\n+                    && !notes.contains( resultSet.getString( \"psinote_id\" ) ) )\n                 {\n-                    dataValues.add( convertEventDataValueIntoDtoDataValue( dv ) );\n+                    Note note = new Note();\n+                    note.setNote( resultSet.getString( \"psinote_uid\" ) );\n+                    note.setValue( resultSet.getString( \"psinote_value\" ) );\n+                    note.setStoredDate( DateUtils.getIso8601NoTz( resultSet.getDate( \"psinote_storeddate\" ) ) );\n+                    note.setStoredBy( resultSet.getString( \"psinote_storedby\" ) );\n+\n+                    eventRow.getNotes()\n+                        .add( note );\n+                    notes.add( resultSet.getString( \"psinote_id\" ) );\n                 }\n-                processedDataValues.put( rowSet.getString( \"psi_uid\" ), dataValues );\n-            }\n-\n-            if ( rowSet.getString( \"psinote_value\" ) != null && !notes.contains( rowSet.getString( \"psinote_id\" ) ) )\n-            {\n-                Note note = new Note();\n-                note.setNote( rowSet.getString( \"psinote_uid\" ) );\n-                note.setValue( rowSet.getString( \"psinote_value\" ) );\n-                note.setStoredDate( DateUtils.getIso8601NoTz( rowSet.getDate( \"psinote_storeddate\" ) ) );\n-                note.setStoredBy( rowSet.getString( \"psinote_storedby\" ) );\n-\n-                eventRow.getNotes().add( note );\n-                notes.add( rowSet.getString( \"psinote_id\" ) );\n             }\n-        }\n-        eventRows.forEach( e -> e.setDataValues( processedDataValues.get( e.getUid() ) ) );\n+            eventRows.forEach( e -> e.setDataValues( processedDataValues.get( e.getUid() ) ) );\n \n-        IdSchemes idSchemes = ObjectUtils.firstNonNull( params.getIdSchemes(), new IdSchemes() );\n-        IdScheme dataElementIdScheme = idSchemes.getDataElementIdScheme();\n+            IdSchemes idSchemes = ObjectUtils.firstNonNull( params.getIdSchemes(), new IdSchemes() );\n+            IdScheme dataElementIdScheme = idSchemes.getDataElementIdScheme();\n \n-        if ( dataElementIdScheme != IdScheme.ID && dataElementIdScheme != IdScheme.UID )\n-        {\n-            CachingMap<String, String> dataElementUidToIdentifierCache = new CachingMap<>();\n+            if ( dataElementIdScheme != IdScheme.ID && dataElementIdScheme != IdScheme.UID )\n+            {\n+                CachingMap<String, String> dataElementUidToIdentifierCache = new CachingMap<>();\n \n-            List<Collection<DataValue>> dataValuesList = eventRows.stream().map( EventRow::getDataValues )\n-                .collect( Collectors.toList() );\n-            populateCache( dataElementIdScheme, dataValuesList, dataElementUidToIdentifierCache );\n-            convertDataValuesIdentifiers( dataElementIdScheme, dataValuesList, dataElementUidToIdentifierCache );\n-        }\n+                List<Collection<DataValue>> dataValuesList = eventRows.stream()\n+                    .map( EventRow::getDataValues )\n+                    .collect( Collectors.toList() );\n+                populateCache( dataElementIdScheme, dataValuesList, dataElementUidToIdentifierCache );\n+                convertDataValuesIdentifiers( dataElementIdScheme, dataValuesList, dataElementUidToIdentifierCache );\n+            }\n \n-        return eventRows;\n+            return eventRows;\n+        } );\n     }\n \n     private String getIdSqlBasedOnIdScheme( IdScheme idScheme, String uidSql, String attributeSql, String codeSql )\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "message": "Merge commit", "committedDate": null}, {"oid": "1775146057dbef2da11c4e554b339f150f2f4857", "committedDate": "2020-09-09 08:34:03 +0200", "message": "perf: [DHIS-9415] avoid querying programstageinstancecomments if not necessary (#6103)"}, {"oid": "0d35843121f0ad3004fad015f1520c5b06a5c337", "committedDate": "2020-09-15 09:24:33 +0200", "message": "Merge 2.35 into master (#6149)"}, {"oid": "e4ff88027eb8dd823a539ef0ed82daeff5072e7c", "committedDate": "2020-09-18 16:43:42 +0200", "message": "fix: prevent db deadlock during Event update (#6135)"}, {"oid": "1bd8ee38126fbac22f805db44dad0cdcba7b14a6", "committedDate": "2020-09-23 11:30:37 +0200", "message": "fix: allow updating an Event with File data type [DHIS2-9559]"}, {"oid": "52b8f7c48def44670be7ba9d25d0ee963fe9441e", "committedDate": "2020-09-24 09:19:03 +0200", "message": "fix: Coordinate class removed, drop support for old implementation (#6172)"}, {"oid": "13cd21d76507450be96b06e13823b24cf357be04", "committedDate": "2020-10-30 09:38:34 +0100", "message": "feat: DHIS2-8911 adding LastUpdatedBy and CreatedBy user informations in events (#6521)"}, {"oid": "bcb4654eefc1d66ff614d1784219e7055a3671cc", "committedDate": "2020-10-30 11:24:12 +0100", "message": "fix: DHIS2-8911 corrected wrong column names (#6530)"}, {"oid": "08574f966f50a4667668edb4077cfd9e21bd9e10", "committedDate": "2020-11-11 13:59:04 +0100", "message": "fix: DHIS-7937 quotes in filter values depend on filter type when rendering sql string (#6604)"}, {"oid": "d34f05e1348f3dff54ced7059283a96a7b699ea4", "committedDate": "2020-11-16 18:21:11 +0100", "message": "feat: DHIS2-9835 user info in comments and notes for Events and Enrollments (#6587)"}, {"oid": "fbc5d6d0e07ba8180e933a63c670d58528cb700c", "committedDate": "2020-11-20 16:22:59 +0700", "message": "fix: Cant delete events (#6729)"}, {"oid": "5e4669b4c89c809989ea600900735dd71baa86e2", "committedDate": "2020-12-23 14:00:18 +0700", "message": "feat: Upgrade Hibernate  (#6939)"}, {"oid": "f00a1e4b7f23c356987cadfdc8a8407e1a098f52", "committedDate": "2021-01-11 07:26:55 +0100", "message": "fix: Check category option sharing settings (#7009)"}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "55164c30457d73850a5233869ab0119d31fcac9b", "committedDate": "2021-01-28 14:14:25 +0100", "message": "fix: sharing query issue in JdbcEventStore (#7151)"}, {"oid": "5d1a415fef305ea3cc18a3c2fadceb208403006a", "committedDate": "2021-01-29 09:30:08 +0100", "message": "refactor: Controllers params [DHIS2-10202] (#7201)"}, {"oid": "10b11c17ef2f2964263efc051f96c8e8f8f7e1f4", "committedDate": "2021-02-02 12:33:59 +0100", "message": "feat: change user property name to createdBy (#7061)"}, {"oid": "b46e880a82e0e0d03e1f7a940630771907d4317a", "committedDate": "2021-05-26 15:57:37 +0200", "message": "chore: Replace usage of duplicated method (#8077)"}, {"oid": "41338b95cf44f70b44834c3515933a677114dd84", "committedDate": "2021-05-28 13:54:35 +0200", "message": "fix: skipPaging properly considered (#8087)"}, {"oid": "15a1ce87df3a6aecbb40ceca8c1aeb9ef9a35290", "committedDate": "2021-06-08 15:46:02 +0200", "message": "perf: Remove program lookup in event query loop [DHIS2-11264] (#8149)"}, {"oid": "002abc97ad43829b6a7b59d2611a165106b666c2", "committedDate": "2021-06-28 11:39:16 +0200", "message": "fix: Do not hard delete events in importer [DHIS2-11375] (#8309)"}, {"oid": "6bdec842fbd0ccf97729ec29b96202365a4e832d", "committedDate": "2021-07-28 10:10:25 +0200", "message": "fix: Add enrollment filter for event exporter [DHIS2-11226] (#8441)"}, {"oid": "8ee3bc02e7758714d4865fb84c65dcd53f4820b1", "committedDate": "2021-09-22 13:34:18 +0200", "message": "fix: Event collection endpoint does not fetch relationships [DHIS2-11541] (#8540)"}, {"oid": "e9aa95cda06ed418fa24c389b38cde8afe364c2f", "committedDate": "2021-09-27 10:03:35 +0200", "message": "fix: teis lastupdated update (#8808)"}, {"oid": "9d05d585562bf9d269ffed02307ec59694795cfc", "committedDate": "2021-10-07 10:34:05 +0200", "message": "fix: Fix by reducing number of SQL queries for event collection (#8955)"}, {"oid": "5e4b90d1aaa2f3b0264b411b0a8d1bf0e860202a", "committedDate": "2021-10-14 12:31:47 +0200", "message": "refactor: jdbc event store replaced some strings with constants/enums [TECH-463] (#9041)"}, {"oid": "f2249116faa6cfd647106204ba0f09457811e3dd", "committedDate": "2021-10-18 19:14:22 +0200", "message": "chore: Move lambdas initializations into static blocks [TECH-774] (#9074)"}, {"oid": "0ea45addae148641a66270e104d43d70b59dde05", "committedDate": "2021-10-26 09:45:39 +0200", "message": "refactor: Remove check test profile in runtime code [TECH-699] (#9110)"}, {"oid": "9b7ebd47b923d1f52b53a4a724b5b1ab3d2f1c8d", "committedDate": "2021-10-29 11:25:49 +0200", "message": "Merge pull request from GHSA-cmpc-frjv-rrmw"}, {"oid": "d466cd4761340382d8214d3eca7c7616569b903e", "committedDate": "2021-10-29 17:45:42 +0200", "message": "fix: breaking unit test (#9150)"}, {"oid": "8a62c3e0240b711a75ca821921bae684b82fff5f", "committedDate": "2021-11-30 12:46:53 +0100", "message": "perf: Use ou.path for ouMode event queries (#9337)"}, {"oid": "cc35b66a078649936fc2bd7de77cfc2f718c1e32", "committedDate": "2021-12-07 16:40:31 +0100", "message": "fix: Apply TEI ownership in event query (#9367)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "da4ef9091eadf20324ce10342073e9e8031391af", "committedDate": "2022-01-26 10:33:44 +0100", "message": "fix: Include mentioned ou for ouMode=CHILDREN"}, {"oid": "93b61e49f94920cf3adfe3fd83ad8f0c060afbb1", "committedDate": "2022-02-14 09:59:56 +0100", "message": "fix: Request param totalPages=false for events/enrollments [DHIS2-12530] (#9719)"}, {"oid": "bd3f8dacffeb333843a99f3e659d9f19dae7a977", "committedDate": "2022-02-17 12:08:13 +0100", "message": "fix: Show uid instead of id in events [DHIS2-12648] (#9836)"}, {"oid": "8ccf9a288a67e5ee5349024fd3d281372c64c956", "committedDate": "2022-02-22 13:25:35 +0800", "message": "feat: Merge User/UserCredentials into one DB table (#9754)"}, {"oid": "869fa986d53abcf6fc503e46e3b25e1b876e6c3d", "committedDate": "2022-03-01 13:31:17 +0100", "message": "feat: Add single data value endpoint with JSON body [DHIS2-12689] (#9886)"}, {"oid": "d117ff9ce355694569f7c6477141cf35c6412609", "committedDate": "2022-03-04 11:13:40 +0100", "message": "fix: Return complete information for user fields in NTI [DHIS2-12717] (#9936)"}, {"oid": "dc31b5e0ec776f00b915e47a08abe1e54b8e3d29", "committedDate": "2022-04-19 15:49:20 +0200", "message": "fix: Handle NPE for null organsationUnits in event programs sync job [DHIS2-12762] (2.39) (#10525)"}, {"oid": "d99da048b6427aa16b080ab0a0e25eda4a2a0f96", "committedDate": "2022-05-09 13:53:18 +0200", "message": "feat: Refactor getCurrentUser() to return DHIS2 User object 2 (#10600)"}, {"oid": "83890d87919436906d00955e19e5925f7355ca51", "committedDate": "2022-05-11 21:00:19 +0200", "message": "fix: Fix SQL queries for deleted relationships [DHIS2-11320] (#10758)"}, {"oid": "ae6806774b896dcc69a99687ce331d60d40995c7", "committedDate": "2022-06-02 09:20:44 +0200", "message": "chore: Refactor JdbcTemplate to NamedParameterJdbcTemplate (#10767)"}, {"oid": "3ffbead58842052c66f26af10a103386f5cb16d0", "committedDate": "2022-06-14 12:05:49 +0200", "message": "fix: Include enrollment followup in eventrow return (#11070)"}, {"oid": "2c0aa62cc8f940e7629f081284bb01dac8c9faee", "committedDate": "2022-06-21 19:38:49 +0200", "message": "feat: Add filters to TEDV audit endpoint [DHIS2-13421] (#11125)"}, {"oid": "19962f46788d3430652c3124e01d1f16f17803ff", "committedDate": "2022-07-05 11:59:15 +0200", "message": "fix: Refactor Event SQL to use named parameters - Simple bindings [ DHIS2-13306 ] (#11205)"}, {"oid": "5ea8cffe77c593325973769e83dbe505441a5cf3", "committedDate": "2022-07-26 13:19:15 +0200", "message": "fix: Performance optimisation when fetching events from Event Programs [ DHIS2-13443 ]  (#11271)"}, {"oid": "9135ce719d6db71435c61fcd4d7144e013e77622", "committedDate": "2022-08-02 15:16:29 +0200", "message": "Feat: Refactor Event SQL to use named parameters - Complex bindings [ Dhis2-13455 ] (#11322)"}, {"oid": "04654efa7ba2d741ddbf1a6f0cf63fedcd01eb3f", "committedDate": "2022-08-29 21:50:26 +0200", "message": "fix: get tei id, date types, update tests (#11541)"}, {"oid": "eb0e2a4e8d608ef19aac980cf3c5ed4e3b859fb9", "committedDate": "2022-09-06 10:29:19 +0200", "message": "fix: Refactor Event SQL to use named parameters - Events grid - [ DHIS2-13508 ] (#11545)"}, {"oid": "36ee597adc705b106a64c243ea603e85234dbb4f", "committedDate": "2022-09-07 07:40:39 +0200", "message": "feat: filter /tracker/events by enrollmentEnrolledAfter DHIS2-13648 (#11651)"}, {"oid": "4f11b0c48c8c354a79249d95d963a996c4128643", "committedDate": "2022-09-07 09:20:40 +0200", "message": "feat: filter /tracker/events by enrollmentEnrolledBefore (#11672)"}, {"oid": "66df00d85fce2b865439d8a0fc9c701fca88ece0", "committedDate": "2022-09-07 10:11:34 +0200", "message": "feat: filter /tracker/events by enrollmentOccurredBefore/After (#11675)"}, {"oid": "5a6ad83ad236b6b721794c52b51da456e9b8453d", "committedDate": "2022-09-09 08:08:07 +0200", "message": "feat: filter /tracker/events by filterAttributes DHIS2-13648 (#11683)"}, {"oid": "501c22e088de3d40a75a2a771a64efc6998cb880", "committedDate": "2022-09-12 12:07:12 +0200", "message": "feat: Add ordering on tei attributes for events [DHIS2-13648] (#11724)"}, {"oid": "531ca62258142b6e88d3c96b1123315adce393da", "committedDate": "2022-09-13 11:59:53 +0200", "message": "feat: Add ordering attribute column in select [DHIS2-13648] (#11750)"}, {"oid": "b29fd87d6c8d63a8293d6600bdec633f7ddf2953", "committedDate": "2022-09-16 11:09:48 +0200", "message": "feat: Clean up JdbcEventStore class [DHIS2-13648] (#11796)"}, {"oid": "1ae607c63e5683bae651721208891d65e9612ee8", "committedDate": "2022-09-22 11:19:32 +0200", "message": "Merge pull request from GHSA-7pwm-6rh2-2388"}, {"oid": "d7afc27b3b1e7159e8e0aab4f2bcb58f9b1167d0", "committedDate": "2022-09-22 15:56:33 +0200", "message": "fix: move deco access to case in select (#11822)"}, {"oid": "3c815e2474da1b1ca7312543e96c882b49d465be", "committedDate": "2022-09-26 11:20:25 +0200", "message": "fix: Ensure filter valueType is applied in event query (#11715)"}, {"oid": "79a4e480b97e856c20eb616144d4851738d674b6", "committedDate": "2022-09-28 13:31:31 +0200", "message": "fix: Ensure actual event orgunit is returned [DHIS2-13656] (#11755)"}, {"oid": "b22196b76551e33179af112ccdfb7d64c5a46c67", "committedDate": "2022-09-28 13:59:05 +0200", "message": "fix: Filter can have multiple value [DHIS2-13676] (#11921)"}, {"oid": "d797ac751aa993bf8a9bf6bb446abf12982aac29", "committedDate": "2022-10-17 13:40:26 +0200", "message": "fix: potential NPEs found by nullness analysis [TECH-1460] (#12113)"}, {"oid": "7a4160ba9c1550a536807361acfa086f722413a0", "committedDate": "2022-11-21 14:38:43 +0100", "message": "fix: Match psi.ouId and ou.ouId to fetch psi.ouName [DHIS2-13656] (#12377)"}, {"oid": "27b75665be58c25de309b5d71e7bd86200d740d6", "committedDate": "2022-12-01 11:37:48 +0100", "message": "chore: use AssignedUserQueryParam in EventSearchParams (#12446)"}, {"oid": "9556d7a326e0bb6b64d9d223e8c511906ef7c564", "committedDate": "2022-12-21 10:35:40 +0100", "message": "fix: Ensure actual event orgunit is returned [DHIS2-13656] (#12518)"}, {"oid": "e586cd4742efa92258f64d23c8b324575de8c514", "committedDate": "2023-02-14 10:55:00 +0100", "message": "fix: Check if dueDate param is null [DHIS2-14736] (#13007)"}, {"oid": "b11da68ecf40901364ee28ad72e5c5dae3afff1f", "committedDate": "2023-02-23 08:16:53 +0100", "message": "fix: Add due date filter in sql generation [DHIS2-14497] (#13070)"}, {"oid": "a95012113446cf64430ab009cf37f5ad1fadc77e", "committedDate": "2023-03-02 15:36:17 +0100", "message": "fix: Respect events sort order [DHIS2-13735] (#13123)"}, {"oid": "4e17bd8e9b1f4b1331349dcdf116d7308ee6c243", "committedDate": "2023-03-14 14:03:31 +0000", "message": "fix: event pageSize is not respected with more than 1 category DHIS2-13135 (#13253)"}, {"oid": "d1975e80aa90b5ae63c68e5fc0c8b874cdf6d2da", "committedDate": "2023-03-20 10:36:05 +0100", "message": "chore: remove unused code (#13370)"}, {"oid": "43bd8664d854c226422c6b88b2c2bdf403fa240c", "committedDate": "2023-03-21 08:55:59 +0100", "message": "refactor: Simplify event orgunit sql query [TECH-1478] (#12897)"}, {"oid": "5764c79d20ac77259e14685730771c0748bf8407", "committedDate": "2023-03-24 12:43:39 +0100", "message": "fix: createdAtClient for events can be written only on inserts, never on updates [DHIS2-14991] (#13407)"}, {"oid": "fa4d70204237377c93cb232c49c188568ba95ebe", "committedDate": "2023-04-05 15:46:43 +0200", "message": "chore: use interface methods for method refs (#13535)"}, {"oid": "959c60d4f597187d0df2160fbbb675e5c4196e5c", "committedDate": "2023-04-27 16:46:18 +0200", "message": "chore: rename ProgramStageInstance to Event (#13731)"}, {"oid": "41e75ba362e65a726c88564679a43aadcebbc60a", "committedDate": "2023-05-03 07:50:28 +0200", "message": "chore: rename Event.programInstance to Event.enrollment (#13774)"}, {"oid": "240be973a3083b3e4b04ada02733f1908bb73512", "committedDate": "2023-05-08 08:39:16 +0000", "message": "chore: rename TrackedEntityInstance to TrackedEntity (#13827)"}, {"oid": "02336c9611c0dd85d5038223bddbfdebc0aae526", "committedDate": "2023-05-11 19:34:26 +0200", "message": "chore: move old tracker dxf2 code into deprecated package (#13901)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY1NjI4MQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r461656281", "body": "```suggestion\r\n        if ( ( params.getCategoryOptionCombo() == null || params.getCategoryOptionCombo().isDefault() )\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if ( (params.getCategoryOptionCombo() == null || params.getCategoryOptionCombo().isDefault())\n          \n          \n            \n                    if ( ( params.getCategoryOptionCombo() == null || params.getCategoryOptionCombo().isDefault() )", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">if</span> ( (params<span class=\"pl-k\">.</span>getCategoryOptionCombo() <span class=\"pl-k\">==</span> <span class=\"pl-c1\">null</span> <span class=\"pl-k\">||</span> params<span class=\"pl-k\">.</span>getCategoryOptionCombo()<span class=\"pl-k\">.</span>isDefault())</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">if</span> ( (<span class=\"x x-first x-last\"> </span>params<span class=\"pl-k\">.</span>getCategoryOptionCombo() <span class=\"pl-k\">==</span> <span class=\"pl-c1\">null</span> <span class=\"pl-k\">||</span> params<span class=\"pl-k\">.</span>getCategoryOptionCombo()<span class=\"pl-k\">.</span>isDefault()<span class=\"x x-first x-last\"> </span>)</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "stian-sandvold", "createdAt": "2020-07-28T15:06:14Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java", "diffHunk": "@@ -698,25 +792,29 @@ private String getEventSelectQuery( EventSearchParams params, List<OrganisationU\n \n         SqlHelper hlp = new SqlHelper();\n \n-        StringBuilder sqlBuilder = new StringBuilder().append( \"select \" + getEventSelectIdentifiersByIdScheme( params.getIdSchemes() ) + \" psi.uid as psi_uid, \"\n+        StringBuilder sqlBuilder = new StringBuilder().append( \"select \"\n+            + getEventSelectIdentifiersByIdScheme( params.getIdSchemes() ) + \" psi.uid as psi_uid, \"\n             + \"ou.uid as ou_uid, p.uid as p_uid, ps.uid as ps_uid, coc.uid as coc_uid, \"\n             + \"psi.programstageinstanceid as psi_id, psi.status as psi_status, psi.executiondate as psi_executiondate, \"\n             + \"psi.eventdatavalues as psi_eventdatavalues, psi.duedate as psi_duedate, psi.completedby as psi_completedby, psi.storedby as psi_storedby, \"\n             + \"psi.created as psi_created, psi.lastupdated as psi_lastupdated, psi.completeddate as psi_completeddate, psi.deleted as psi_deleted, \"\n             + \"ST_AsText( psi.geometry ) as psi_geometry, au.uid as user_assigned, auc.username as user_assigned_username, \"\n             + \"cocco.categoryoptionid AS cocco_categoryoptionid, deco.uid AS deco_uid, \" );\n \n-        if ( (params.getCategoryOptionCombo() == null || params.getCategoryOptionCombo().isDefault()) && !isSuper( user ) )\n+        if ( (params.getCategoryOptionCombo() == null || params.getCategoryOptionCombo().isDefault())", "originalCommit": "dc20b8a9249359bcdd1f612b1852f728ef63b7ab", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d0687a6c7c9e1c4dd64c4dc669bb80ae6e8c8c8b", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\nindex 3ed951650f..02c03a24ca 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\n", "chunk": "@@ -792,8 +869,7 @@ public class JdbcEventStore implements EventStore\n \n         SqlHelper hlp = new SqlHelper();\n \n-        StringBuilder sqlBuilder = new StringBuilder().append( \"select \"\n-            + getEventSelectIdentifiersByIdScheme( params.getIdSchemes() ) + \" psi.uid as psi_uid, \"\n+        StringBuilder sqlBuilder = new StringBuilder().append( \"select \" + getEventSelectIdentifiersByIdScheme( params.getIdSchemes() ) + \" psi.uid as psi_uid, \"\n             + \"ou.uid as ou_uid, p.uid as p_uid, ps.uid as ps_uid, coc.uid as coc_uid, \"\n             + \"psi.programstageinstanceid as psi_id, psi.status as psi_status, psi.executiondate as psi_executiondate, \"\n             + \"psi.eventdatavalues as psi_eventdatavalues, psi.duedate as psi_duedate, psi.completedby as psi_completedby, psi.storedby as psi_storedby, \"\n", "next_change": {"commit": "d360652a896bee650a842567e26cd1e62145cccb", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\nindex 02c03a24ca..578900e939 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\n", "chunk": "@@ -874,14 +762,13 @@ public class JdbcEventStore implements EventStore\n             + \"psi.programstageinstanceid as psi_id, psi.status as psi_status, psi.executiondate as psi_executiondate, \"\n             + \"psi.eventdatavalues as psi_eventdatavalues, psi.duedate as psi_duedate, psi.completedby as psi_completedby, psi.storedby as psi_storedby, \"\n             + \"psi.created as psi_created, psi.lastupdated as psi_lastupdated, psi.completeddate as psi_completeddate, psi.deleted as psi_deleted, \"\n-            + \"ST_AsText( psi.geometry ) as psi_geometry, au.uid as user_assigned, auc.username as user_assigned_username, \"\n-            + \"cocco.categoryoptionid AS cocco_categoryoptionid, deco.uid AS deco_uid, \" );\n+            + \"ST_AsText( psi.geometry ) as psi_geometry, au.uid as user_assigned, (au.firstName || ' ' || au.surName) as user_assigned_name,\"\n+            + \"auc.username as user_assigned_username, cocco.categoryoptionid AS cocco_categoryoptionid, deco.uid AS deco_uid, \" );\n \n-        if ( ( params.getCategoryOptionCombo() == null || params.getCategoryOptionCombo().isDefault() )\n+        if ( (params.getCategoryOptionCombo() == null || params.getCategoryOptionCombo().isDefault())\n             && !isSuper( user ) )\n         {\n-            sqlBuilder.append(\n-                \"deco.publicaccess AS deco_publicaccess, decoa.uga_access AS uga_access, decoa.ua_access AS ua_access, cocount.option_size AS option_size, \" );\n+            sqlBuilder.append( \"deco.publicaccess AS deco_publicaccess, decoa.uga_access AS uga_access, decoa.ua_access AS ua_access, cocount.option_size AS option_size, \" );\n         }\n \n         for ( QueryItem item : params.getDataElementsAndFilters() )\n", "next_change": {"commit": "17570284d442dc97d1db84a6aa1af047bda1b106", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\nindex 578900e939..8995d6e5cc 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\n", "chunk": "@@ -768,7 +802,8 @@ public class JdbcEventStore implements EventStore\n         if ( (params.getCategoryOptionCombo() == null || params.getCategoryOptionCombo().isDefault())\n             && !isSuper( user ) )\n         {\n-            sqlBuilder.append( \"deco.publicaccess AS deco_publicaccess, decoa.uga_access AS uga_access, decoa.ua_access AS ua_access, cocount.option_size AS option_size, \" );\n+            sqlBuilder.append(\n+                \"deco.publicaccess AS deco_publicaccess, decoa.uga_access AS uga_access, decoa.ua_access AS ua_access, cocount.option_size AS option_size, \" );\n         }\n \n         for ( QueryItem item : params.getDataElementsAndFilters() )\n", "next_change": {"commit": "3e9ade20b53796ad8dfeb5a7880ff3f8bd8a206c", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\nindex 8995d6e5cc..e06961a605 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\n", "chunk": "@@ -799,7 +799,7 @@ public class JdbcEventStore implements EventStore\n             + \"ST_AsText( psi.geometry ) as psi_geometry, au.uid as user_assigned, (au.firstName || ' ' || au.surName) as user_assigned_name,\"\n             + \"auc.username as user_assigned_username, cocco.categoryoptionid AS cocco_categoryoptionid, deco.uid AS deco_uid, \" );\n \n-        if ( (params.getCategoryOptionCombo() == null || params.getCategoryOptionCombo().isDefault())\n+        if ( ( params.getCategoryOptionCombo() == null || params.getCategoryOptionCombo().isDefault() )\n             && !isSuper( user ) )\n         {\n             sqlBuilder.append(\n", "next_change": null}]}}]}}]}}, {"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\nindex 3ed951650f..02c03a24ca 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\n", "chunk": "@@ -801,7 +877,7 @@ public class JdbcEventStore implements EventStore\n             + \"ST_AsText( psi.geometry ) as psi_geometry, au.uid as user_assigned, auc.username as user_assigned_username, \"\n             + \"cocco.categoryoptionid AS cocco_categoryoptionid, deco.uid AS deco_uid, \" );\n \n-        if ( (params.getCategoryOptionCombo() == null || params.getCategoryOptionCombo().isDefault())\n+        if ( ( params.getCategoryOptionCombo() == null || params.getCategoryOptionCombo().isDefault() )\n             && !isSuper( user ) )\n         {\n             sqlBuilder.append(\n", "next_change": {"commit": "d360652a896bee650a842567e26cd1e62145cccb", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\nindex 02c03a24ca..578900e939 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\n", "chunk": "@@ -874,14 +762,13 @@ public class JdbcEventStore implements EventStore\n             + \"psi.programstageinstanceid as psi_id, psi.status as psi_status, psi.executiondate as psi_executiondate, \"\n             + \"psi.eventdatavalues as psi_eventdatavalues, psi.duedate as psi_duedate, psi.completedby as psi_completedby, psi.storedby as psi_storedby, \"\n             + \"psi.created as psi_created, psi.lastupdated as psi_lastupdated, psi.completeddate as psi_completeddate, psi.deleted as psi_deleted, \"\n-            + \"ST_AsText( psi.geometry ) as psi_geometry, au.uid as user_assigned, auc.username as user_assigned_username, \"\n-            + \"cocco.categoryoptionid AS cocco_categoryoptionid, deco.uid AS deco_uid, \" );\n+            + \"ST_AsText( psi.geometry ) as psi_geometry, au.uid as user_assigned, (au.firstName || ' ' || au.surName) as user_assigned_name,\"\n+            + \"auc.username as user_assigned_username, cocco.categoryoptionid AS cocco_categoryoptionid, deco.uid AS deco_uid, \" );\n \n-        if ( ( params.getCategoryOptionCombo() == null || params.getCategoryOptionCombo().isDefault() )\n+        if ( (params.getCategoryOptionCombo() == null || params.getCategoryOptionCombo().isDefault())\n             && !isSuper( user ) )\n         {\n-            sqlBuilder.append(\n-                \"deco.publicaccess AS deco_publicaccess, decoa.uga_access AS uga_access, decoa.ua_access AS ua_access, cocount.option_size AS option_size, \" );\n+            sqlBuilder.append( \"deco.publicaccess AS deco_publicaccess, decoa.uga_access AS uga_access, decoa.ua_access AS ua_access, cocount.option_size AS option_size, \" );\n         }\n \n         for ( QueryItem item : params.getDataElementsAndFilters() )\n", "next_change": {"commit": "17570284d442dc97d1db84a6aa1af047bda1b106", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\nindex 578900e939..8995d6e5cc 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\n", "chunk": "@@ -768,7 +802,8 @@ public class JdbcEventStore implements EventStore\n         if ( (params.getCategoryOptionCombo() == null || params.getCategoryOptionCombo().isDefault())\n             && !isSuper( user ) )\n         {\n-            sqlBuilder.append( \"deco.publicaccess AS deco_publicaccess, decoa.uga_access AS uga_access, decoa.ua_access AS ua_access, cocount.option_size AS option_size, \" );\n+            sqlBuilder.append(\n+                \"deco.publicaccess AS deco_publicaccess, decoa.uga_access AS uga_access, decoa.ua_access AS ua_access, cocount.option_size AS option_size, \" );\n         }\n \n         for ( QueryItem item : params.getDataElementsAndFilters() )\n", "next_change": {"commit": "3e9ade20b53796ad8dfeb5a7880ff3f8bd8a206c", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\nindex 8995d6e5cc..e06961a605 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\n", "chunk": "@@ -799,7 +799,7 @@ public class JdbcEventStore implements EventStore\n             + \"ST_AsText( psi.geometry ) as psi_geometry, au.uid as user_assigned, (au.firstName || ' ' || au.surName) as user_assigned_name,\"\n             + \"auc.username as user_assigned_username, cocco.categoryoptionid AS cocco_categoryoptionid, deco.uid AS deco_uid, \" );\n \n-        if ( (params.getCategoryOptionCombo() == null || params.getCategoryOptionCombo().isDefault())\n+        if ( ( params.getCategoryOptionCombo() == null || params.getCategoryOptionCombo().isDefault() )\n             && !isSuper( user ) )\n         {\n             sqlBuilder.append(\n", "next_change": null}]}}]}}]}}]}, "revised_code_in_main": {"commit": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\nindex 3ed951650f..572fa793bd 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\n", "chunk": "@@ -792,16 +866,15 @@ public class JdbcEventStore implements EventStore\n \n         SqlHelper hlp = new SqlHelper();\n \n-        StringBuilder sqlBuilder = new StringBuilder().append( \"select \"\n-            + getEventSelectIdentifiersByIdScheme( params.getIdSchemes() ) + \" psi.uid as psi_uid, \"\n+        StringBuilder sqlBuilder = new StringBuilder().append( \"select \" + getEventSelectIdentifiersByIdScheme( params.getIdSchemes() ) + \" psi.uid as psi_uid, \"\n             + \"ou.uid as ou_uid, p.uid as p_uid, ps.uid as ps_uid, coc.uid as coc_uid, \"\n             + \"psi.programstageinstanceid as psi_id, psi.status as psi_status, psi.executiondate as psi_executiondate, \"\n             + \"psi.eventdatavalues as psi_eventdatavalues, psi.duedate as psi_duedate, psi.completedby as psi_completedby, psi.storedby as psi_storedby, \"\n             + \"psi.created as psi_created, psi.lastupdated as psi_lastupdated, psi.completeddate as psi_completeddate, psi.deleted as psi_deleted, \"\n-            + \"ST_AsText( psi.geometry ) as psi_geometry, au.uid as user_assigned, auc.username as user_assigned_username, \"\n-            + \"cocco.categoryoptionid AS cocco_categoryoptionid, deco.uid AS deco_uid, \" );\n+            + \"ST_AsText( psi.geometry ) as psi_geometry, au.uid as user_assigned, (au.firstName || ' ' || au.surName) as user_assigned_name,\"\n+            + \"auc.username as user_assigned_username, cocco.categoryoptionid AS cocco_categoryoptionid, deco.uid AS deco_uid, \" );\n \n-        if ( (params.getCategoryOptionCombo() == null || params.getCategoryOptionCombo().isDefault())\n+        if ( ( params.getCategoryOptionCombo() == null || params.getCategoryOptionCombo().isDefault() )\n             && !isSuper( user ) )\n         {\n             sqlBuilder.append(\n", "next_change": {"commit": "13cd21d76507450be96b06e13823b24cf357be04", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\nindex 572fa793bd..3d5ef66651 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\n", "chunk": "@@ -870,7 +863,8 @@ public class JdbcEventStore implements EventStore\n             + \"ou.uid as ou_uid, p.uid as p_uid, ps.uid as ps_uid, coc.uid as coc_uid, \"\n             + \"psi.programstageinstanceid as psi_id, psi.status as psi_status, psi.executiondate as psi_executiondate, \"\n             + \"psi.eventdatavalues as psi_eventdatavalues, psi.duedate as psi_duedate, psi.completedby as psi_completedby, psi.storedby as psi_storedby, \"\n-            + \"psi.created as psi_created, psi.lastupdated as psi_lastupdated, psi.completeddate as psi_completeddate, psi.deleted as psi_deleted, \"\n+            + \"psi.created as psi_created, psi.createdbyuserinfo as psi_createdbyuserinfo, psi.lastupdated as psi_lastupdated, psi.lastupdatedbyuserinfo as psi_lastupdatedbyuserinfo, \"\n+            + \"psi.completeddate as psi_completeddate, psi.deleted as psi_deleted, \"\n             + \"ST_AsText( psi.geometry ) as psi_geometry, au.uid as user_assigned, (au.firstName || ' ' || au.surName) as user_assigned_name,\"\n             + \"auc.username as user_assigned_username, cocco.categoryoptionid AS cocco_categoryoptionid, deco.uid AS deco_uid, \" );\n \n", "next_change": {"commit": "ea76fa86409613c9766d4508d65c88ac55c413c3", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\nindex 3d5ef66651..d05638c082 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\n", "chunk": "@@ -868,7 +909,7 @@ public class JdbcEventStore implements EventStore\n             + \"ST_AsText( psi.geometry ) as psi_geometry, au.uid as user_assigned, (au.firstName || ' ' || au.surName) as user_assigned_name,\"\n             + \"auc.username as user_assigned_username, cocco.categoryoptionid AS cocco_categoryoptionid, deco.uid AS deco_uid, \" );\n \n-        if ( ( params.getCategoryOptionCombo() == null || params.getCategoryOptionCombo().isDefault() )\n+        if ( (params.getCategoryOptionCombo() == null || params.getCategoryOptionCombo().isDefault())\n             && !isSuper( user ) )\n         {\n             sqlBuilder.append(\n", "next_change": {"commit": "55164c30457d73850a5233869ab0119d31fcac9b", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\nindex d05638c082..fc0f90077c 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\n", "chunk": "@@ -913,7 +914,7 @@ public class JdbcEventStore implements EventStore\n             && !isSuper( user ) )\n         {\n             sqlBuilder.append(\n-                \"deco.publicaccess AS deco_publicaccess, decoa.uga_access AS uga_access, decoa.ua_access AS ua_access, cocount.option_size AS option_size, \" );\n+                \"decoa.can_access AS decoa_can_access, cocount.option_size AS option_size, \" );\n         }\n \n         for ( QueryItem item : params.getDataElementsAndFilters() )\n", "next_change": {"commit": "eb0e2a4e8d608ef19aac980cf3c5ed4e3b859fb9", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\nindex fc0f90077c..232f25bbbc 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\n", "chunk": "@@ -889,500 +976,668 @@ public class JdbcEventStore implements EventStore\n \n         sqlBuilder.append( \") as cm on event.psi_id=cm.psic_id \" );\n \n+        if ( params.isIncludeRelationships() )\n+        {\n+            sqlBuilder.append( RELATIONSHIP_IDS_QUERY );\n+        }\n+\n         sqlBuilder.append( getOrderQuery( params ) );\n \n         return sqlBuilder.toString();\n     }\n \n-    private String getEventSelectQuery( EventSearchParams params, List<OrganisationUnit> organisationUnits, User user )\n+    private String getEventSelectQuery( EventSearchParams params, MapSqlParameterSource mapSqlParameterSource,\n+        List<OrganisationUnit> organisationUnits, User user )\n     {\n-        List<Long> orgUnitIds = getIdentifiers( organisationUnits );\n-\n         SqlHelper hlp = new SqlHelper();\n \n-        StringBuilder sqlBuilder = new StringBuilder().append( \"select \"\n-            + getEventSelectIdentifiersByIdScheme( params.getIdSchemes() ) + \" psi.uid as psi_uid, \"\n-            + \"ou.uid as ou_uid, p.uid as p_uid, ps.uid as ps_uid, coc.uid as coc_uid, \"\n-            + \"psi.programstageinstanceid as psi_id, psi.status as psi_status, psi.executiondate as psi_executiondate, \"\n-            + \"psi.eventdatavalues as psi_eventdatavalues, psi.duedate as psi_duedate, psi.completedby as psi_completedby, psi.storedby as psi_storedby, \"\n-            + \"psi.created as psi_created, psi.createdbyuserinfo as psi_createdbyuserinfo, psi.lastupdated as psi_lastupdated, psi.lastupdatedbyuserinfo as psi_lastupdatedbyuserinfo, \"\n-            + \"psi.completeddate as psi_completeddate, psi.deleted as psi_deleted, \"\n-            + \"ST_AsText( psi.geometry ) as psi_geometry, au.uid as user_assigned, (au.firstName || ' ' || au.surName) as user_assigned_name,\"\n-            + \"auc.username as user_assigned_username, cocco.categoryoptionid AS cocco_categoryoptionid, deco.uid AS deco_uid, \" );\n+        StringBuilder selectBuilder = new StringBuilder().append( \"select \" )\n+            .append( getEventSelectIdentifiersByIdScheme( params.getIdSchemes() ) )\n+            .append( \" psi.uid as psi_uid, \" )\n+            .append( \"ou.uid as ou_uid, p.uid as p_uid, ps.uid as ps_uid, \" )\n+            .append( \"coc.uid as coc_uid, \" )\n+            .append(\n+                \"psi.programstageinstanceid as psi_id, psi.status as psi_status, psi.executiondate as psi_executiondate, \" )\n+            .append(\n+                \"psi.eventdatavalues as psi_eventdatavalues, psi.duedate as psi_duedate, psi.completedby as psi_completedby, psi.storedby as psi_storedby, \" )\n+            .append(\n+                \"psi.created as psi_created, psi.createdbyuserinfo as psi_createdbyuserinfo, psi.lastupdated as psi_lastupdated, psi.lastupdatedbyuserinfo as psi_lastupdatedbyuserinfo, \" )\n+            .append( \"psi.completeddate as psi_completeddate, psi.deleted as psi_deleted, \" )\n+            .append(\n+                \"ST_AsText( psi.geometry ) as psi_geometry, au.uid as user_assigned, (au.firstName || ' ' || au.surName) as user_assigned_name,\" )\n+            .append( \"au.firstName as user_assigned_first_name, au.surName as user_assigned_surname, \" )\n+            .append( \"au.username as user_assigned_username,\" )\n+            .append( \"cocco.categoryoptionid AS cocco_categoryoptionid, deco.uid AS deco_uid, \" );\n+\n+        if ( (params.getCategoryOptionCombo() == null || params.getCategoryOptionCombo()\n+            .isDefault()) && !isSuper( user ) )\n+        {\n+            selectBuilder.append( \"decoa.can_access AS decoa_can_access, cocount.option_size AS option_size, \" );\n+        }\n+\n+        selectBuilder.append( \"pi.uid as pi_uid, pi.status as pi_status, pi.followup as pi_followup, \" )\n+            .append( \"p.type as p_type, ps.uid as ps_uid, ou.name as ou_name, \" )\n+            .append(\n+                \"tei.trackedentityinstanceid as tei_id, tei.uid as tei_uid, teiou.uid as tei_ou, teiou.name as tei_ou_name, tei.created as tei_created, tei.inactive as tei_inactive \" );\n+\n+        return selectBuilder.append( getFromWhereClause( params, mapSqlParameterSource, organisationUnits, user, hlp,\n+            dataElementAndFiltersSql( params, mapSqlParameterSource, hlp,\n+                selectBuilder ) ) )\n+            .toString();\n+    }\n \n-        if ( (params.getCategoryOptionCombo() == null || params.getCategoryOptionCombo().isDefault())\n-            && !isSuper( user ) )\n-        {\n-            sqlBuilder.append(\n-                \"decoa.can_access AS decoa_can_access, cocount.option_size AS option_size, \" );\n+    private StringBuilder getFromWhereClause( EventSearchParams params, MapSqlParameterSource mapSqlParameterSource,\n+        List<OrganisationUnit> organisationUnits, User user, SqlHelper hlp, StringBuilder dataElementAndFiltersSql )\n+    {\n+        StringBuilder fromBuilder = new StringBuilder( \" from programstageinstance psi \" )\n+            .append( \"inner join programinstance pi on pi.programinstanceid=psi.programinstanceid \" )\n+            .append( \"inner join program p on p.programid=pi.programid \" )\n+            .append( \"inner join programstage ps on ps.programstageid=psi.programstageid \" )\n+            .append( \"inner join categoryoptioncombo coc on coc.categoryoptioncomboid=psi.attributeoptioncomboid \" )\n+            .append(\n+                \"inner join categoryoptioncombos_categoryoptions cocco on psi.attributeoptioncomboid=cocco.categoryoptioncomboid \" )\n+            .append( \"inner join dataelementcategoryoption deco on cocco.categoryoptionid=deco.categoryoptionid \" );\n+\n+        if ( Optional.ofNullable( params.getProgram() )\n+            .filter( p -> Objects.nonNull( p.getProgramType() ) && p.getProgramType() == ProgramType.WITH_REGISTRATION )\n+            .isPresent() )\n+        {\n+            fromBuilder.append(\n+                \"left join trackedentityprogramowner po on (pi.trackedentityinstanceid=po.trackedentityinstanceid) \" )\n+                .append(\n+                    \"inner join organisationunit ou on (coalesce(po.organisationunitid, psi.organisationunitid)=ou.organisationunitid) \" );\n         }\n-\n-        for ( QueryItem item : params.getDataElementsAndFilters() )\n+        else\n         {\n-            final String col = item.getItemId();\n-            final String dataValueValueSql = \"psi.eventdatavalues #>> '{\" + col + \", value}'\";\n-\n-            String queryCol = \" \" + (item.isNumeric() ? castToNumber( dataValueValueSql ) : lower( dataValueValueSql ));\n-            queryCol += \" as \" + col + \", \";\n-\n-            sqlBuilder.append( queryCol );\n+            fromBuilder.append( \"inner join organisationunit ou on psi.organisationunitid=ou.organisationunitid \" );\n         }\n \n-        sqlBuilder.append( \"pi.uid as pi_uid, pi.status as pi_status, pi.followup as pi_followup, \"\n-            + \"p.type as p_type, ps.uid as ps_uid, ou.name as ou_name, \"\n-            + \"tei.trackedentityinstanceid as tei_id, tei.uid as tei_uid, teiou.uid as tei_ou, teiou.name as tei_ou_name, tei.created as tei_created, tei.inactive as tei_inactive \"\n-            + \"from programstageinstance psi \"\n-            + \"inner join programinstance pi on pi.programinstanceid=psi.programinstanceid \"\n-            + \"inner join program p on p.programid=pi.programid \"\n-            + \"inner join programstage ps on ps.programstageid=psi.programstageid \"\n-            + \"inner join categoryoptioncombo coc on coc.categoryoptioncomboid=psi.attributeoptioncomboid \"\n-            + \"inner join categoryoptioncombos_categoryoptions cocco on psi.attributeoptioncomboid=cocco.categoryoptioncomboid \"\n-            + \"inner join dataelementcategoryoption deco on cocco.categoryoptionid=deco.categoryoptionid \"\n-            + \"left join trackedentityinstance tei on tei.trackedentityinstanceid=pi.trackedentityinstanceid \"\n-            + \"left join organisationunit ou on (psi.organisationunitid=ou.organisationunitid) \"\n-            + \"left join organisationunit teiou on (tei.organisationunitid=teiou.organisationunitid) \"\n-            + \"left join users auc on (psi.assigneduserid=auc.userid) \"\n-            + \"left join userinfo au on (auc.userid=au.userinfoid) \" );\n-\n-        Set<String> joinedColumns = new HashSet<>();\n-\n-        String eventDataValuesWhereSql = \"\";\n-\n-        for ( QueryItem item : params.getDataElementsAndFilters() )\n-        {\n-            final String col = item.getItemId();\n-            final String optCol = item.getItemId() + \"opt\";\n-            final String dataValueValueSql = \"psi.eventdatavalues #>> '{\" + col + \", value}'\";\n-\n-            if ( !joinedColumns.contains( col ) )\n-            {\n-                if ( item.hasOptionSet() && item.hasFilter() )\n-                {\n-                    sqlBuilder.append( \"inner join optionvalue as \" + optCol + \" on lower(\" + optCol + \".code) = \" +\n-                        \"lower(\" + dataValueValueSql + \") and \" + optCol + \".optionsetid = \"\n-                        + item.getOptionSet().getId() + \" \" );\n-                }\n-\n-                joinedColumns.add( col );\n-            }\n-\n-            if ( item.hasFilter() )\n-            {\n-                for ( QueryFilter filter : item.getFilters() )\n-                {\n-                    final String encodedFilter = statementBuilder.encode( filter.getFilter(), false );\n-\n-                    final String queryCol = item.isNumeric() ? \" CAST( \" + dataValueValueSql + \" AS NUMERIC)\"\n-                        : \"lower( \" + dataValueValueSql + \" )\";\n-\n-                    if ( !item.hasOptionSet() )\n-                    {\n-                        if ( !eventDataValuesWhereSql.isEmpty() )\n-                        {\n-                            eventDataValuesWhereSql += \" and \";\n-                        }\n-\n-                        if ( QueryOperator.LIKE.getValue().equalsIgnoreCase( filter.getSqlOperator() ) )\n-                        {\n-                            eventDataValuesWhereSql += \" \" + queryCol + \" \" + filter.getSqlOperator() + \" \"\n-                                + StringUtils.lowerCase( filter.getSqlFilter( encodedFilter ) ) + \" \";\n-                        }\n-                        else\n-                        {\n-                            eventDataValuesWhereSql += \" \" + queryCol + \" \" + filter.getSqlOperator() + \" \"\n-                                + StringUtils.lowerCase(\n-                                    item.isNumeric() ? encodedFilter : filter.getSqlFilter( encodedFilter ) )\n-                                + \" \";\n-                        }\n-                    }\n-                    else if ( QueryOperator.IN.getValue().equalsIgnoreCase( filter.getSqlOperator() ) )\n-                    {\n-                        sqlBuilder.append( \"and \" + queryCol + \" \" + filter.getSqlOperator() + \" \"\n-                            + StringUtils.lowerCase(\n-                                item.isNumeric() ? encodedFilter : filter.getSqlFilter( encodedFilter ) )\n-                            + \" \" );\n-                    }\n-                    else if ( QueryOperator.LIKE.getValue().equalsIgnoreCase( filter.getSqlOperator() ) )\n-                    {\n-                        sqlBuilder.append( \"and lower(\" + optCol + DOT_NAME + \" \" + filter.getSqlOperator() + \" \"\n-                            + StringUtils.lowerCase( filter.getSqlFilter( encodedFilter ) ) + \" \" );\n-                    }\n-                    else\n-                    {\n-                        sqlBuilder.append( \"and lower(\" + optCol + DOT_NAME + \" \" + filter.getSqlOperator() + \" \"\n-                            + StringUtils.lowerCase(\n-                                item.isNumeric() ? encodedFilter : filter.getSqlFilter( encodedFilter ) )\n-                            + \" \" );\n-                    }\n-                }\n-            }\n-        }\n+        fromBuilder\n+            .append( \"left join trackedentityinstance tei on tei.trackedentityinstanceid=pi.trackedentityinstanceid \" )\n+            .append( \"left join organisationunit teiou on (tei.organisationunitid=teiou.organisationunitid) \" )\n+            .append( \"left join userinfo au on (psi.assigneduserid=au.userinfoid) \" );\n \n-        if ( (params.getCategoryOptionCombo() == null || params.getCategoryOptionCombo().isDefault())\n-            && !isSuper( user ) )\n+        if ( (params.getCategoryOptionCombo() == null || params.getCategoryOptionCombo()\n+            .isDefault()) && !isSuper( user ) )\n         {\n-            sqlBuilder.append( getCategoryOptionSharingForUser( user ) );\n+            fromBuilder.append( getCategoryOptionSharingForUser( user, mapSqlParameterSource ) );\n         }\n \n-        if ( !eventDataValuesWhereSql.isEmpty() )\n-        {\n-            sqlBuilder.append( hlp.whereAnd() + eventDataValuesWhereSql + \" \" );\n-        }\n+        fromBuilder.append( dataElementAndFiltersSql );\n \n         if ( params.getTrackedEntityInstance() != null )\n         {\n-            sqlBuilder.append(\n-                hlp.whereAnd() + \" tei.trackedentityinstanceid=\" + params.getTrackedEntityInstance().getId() + \" \" );\n+            mapSqlParameterSource.addValue( \"trackedentityinstanceid\", params.getTrackedEntityInstance().getId() );\n+\n+            fromBuilder.append( hlp.whereAnd() )\n+                .append( \" tei.trackedentityinstanceid= \" )\n+                .append( \":trackedentityinstanceid\" )\n+                .append( \" \" );\n         }\n \n         if ( params.getProgram() != null )\n         {\n-            sqlBuilder.append( hlp.whereAnd() ).append( \" p.programid = \" ).append( params.getProgram().getId() )\n+            mapSqlParameterSource.addValue( \"programid\", params.getProgram()\n+                .getId() );\n+\n+            fromBuilder.append( hlp.whereAnd() )\n+                .append( \" p.programid = \" )\n+                .append( \":programid\" )\n                 .append( \" \" );\n         }\n \n         if ( params.getProgramStage() != null )\n         {\n-            sqlBuilder.append( hlp.whereAnd() ).append( \" ps.programstageid = \" )\n-                .append( params.getProgramStage().getId() ).append( \" \" );\n+            mapSqlParameterSource.addValue( \"programstageid\", params.getProgramStage()\n+                .getId() );\n+\n+            fromBuilder.append( hlp.whereAnd() )\n+                .append( \" ps.programstageid = \" )\n+                .append( \":programstageid\" )\n+                .append( \" \" );\n         }\n \n         if ( params.getProgramStatus() != null )\n         {\n-            sqlBuilder.append( hlp.whereAnd() ).append( \" pi.status = '\" ).append( params.getProgramStatus() )\n-                .append( \"' \" );\n+            mapSqlParameterSource.addValue( \"program_status\", params.getProgramStatus()\n+                .name() );\n+\n+            fromBuilder.append( hlp.whereAnd() )\n+                .append( \" pi.status = \" )\n+                .append( \":program_status \" );\n         }\n \n         if ( params.getFollowUp() != null )\n         {\n-            sqlBuilder.append( hlp.whereAnd() ).append( \" pi.followup is \" )\n-                .append( params.getFollowUp() ? \"true\" : \"false\" ).append( \" \" );\n+            fromBuilder.append( hlp.whereAnd() )\n+                .append( \" pi.followup is \" )\n+                .append( params.getFollowUp() ? \"true\" : \"false\" )\n+                .append( \" \" );\n         }\n \n-        sqlBuilder.append( addLastUpdatedFilters( params, hlp, true ) );\n+        fromBuilder.append( addLastUpdatedFilters( params, mapSqlParameterSource, hlp, true ) );\n \n         // Comparing milliseconds instead of always creating new Date( 0 );\n-        if ( params.getSkipChangedBefore() != null && params.getSkipChangedBefore().getTime() > 0 )\n+        if ( params.getSkipChangedBefore() != null && params.getSkipChangedBefore()\n+            .getTime() > 0 )\n         {\n-            String skipChangedBefore = DateUtils.getLongDateString( params.getSkipChangedBefore() );\n-            sqlBuilder.append( hlp.whereAnd() ).append( PSI_LASTUPDATED_GT ).append( skipChangedBefore ).append( \"' \" );\n+            mapSqlParameterSource.addValue( \"skipChangedBefore\", params.getSkipChangedBefore(), Types.TIMESTAMP );\n+\n+            fromBuilder.append( hlp.whereAnd() )\n+                .append( PSI_LASTUPDATED_GT )\n+                .append( \":skipChangedBefore\" )\n+                .append( \" \" );\n         }\n \n         if ( params.getCategoryOptionCombo() != null )\n         {\n-            sqlBuilder.append( hlp.whereAnd() ).append( \" psi.attributeoptioncomboid = \" )\n-                .append( params.getCategoryOptionCombo().getId() ).append( \" \" );\n+            mapSqlParameterSource.addValue( \"attributeoptioncomboid\", params.getCategoryOptionCombo()\n+                .getId() );\n+\n+            fromBuilder.append( hlp.whereAnd() )\n+                .append( \" psi.attributeoptioncomboid = \" )\n+                .append( \":attributeoptioncomboid\" )\n+                .append( \" \" );\n         }\n \n-        if ( orgUnitIds != null && !orgUnitIds.isEmpty() )\n+        if ( !CollectionUtils.isEmpty( organisationUnits ) || params.getOrgUnit() != null )\n         {\n-            sqlBuilder.append( hlp.whereAnd() ).append( \" psi.organisationunitid in (\" )\n-                .append( getCommaDelimitedString( orgUnitIds ) ).append( \") \" );\n+            fromBuilder.append( hlp.whereAnd() )\n+                .append( getOrgUnitSql( hlp, params, mapSqlParameterSource, organisationUnits ) );\n         }\n \n         if ( params.getStartDate() != null )\n         {\n-            sqlBuilder.append( hlp.whereAnd() ).append( \" (psi.executiondate >= '\" )\n-                .append( getMediumDateString( params.getStartDate() ) ).append( \"' \" )\n-                .append( \"or (psi.executiondate is null and psi.duedate >= '\" )\n-                .append( getMediumDateString( params.getStartDate() ) ).append( \"')) \" );\n+            mapSqlParameterSource.addValue( \"startDate\", params.getStartDate(), Types.DATE );\n+\n+            fromBuilder.append( hlp.whereAnd() )\n+                .append( \" (psi.executiondate >= \" )\n+                .append( \":startDate\" )\n+                .append( \" or (psi.executiondate is null and psi.duedate >= \" )\n+                .append( \":startDate\" )\n+                .append( \" )) \" );\n         }\n \n         if ( params.getEndDate() != null )\n         {\n-            Date dateAfterEndDate = getDateAfterAddition( params.getEndDate(), 1 );\n-            sqlBuilder.append( hlp.whereAnd() ).append( \" (psi.executiondate < '\" )\n-                .append( getMediumDateString( dateAfterEndDate ) ).append( \"' \" )\n-                .append( \"or (psi.executiondate is null and psi.duedate < '\" )\n-                .append( getMediumDateString( dateAfterEndDate ) ).append( \"')) \" );\n+            mapSqlParameterSource.addValue( \"endDate\", addDays( params.getEndDate(), 1 ), Types.DATE );\n+\n+            fromBuilder.append( hlp.whereAnd() )\n+                .append( \" (psi.executiondate < \" )\n+                .append( \":endDate\" )\n+                .append( \" or (psi.executiondate is null and psi.duedate < \" )\n+                .append( \":endDate\" )\n+                .append( \" )) \" );\n         }\n \n         if ( params.getProgramType() != null )\n         {\n-            sqlBuilder.append( hlp.whereAnd() ).append( \" p.type = '\" ).append( params.getProgramType() )\n-                .append( \"' \" );\n-        }\n+            mapSqlParameterSource.addValue( \"programType\", params.getProgramType()\n+                .name() );\n \n-        if ( params.getEventStatus() != null )\n-        {\n-            if ( params.getEventStatus() == EventStatus.VISITED )\n-            {\n-                sqlBuilder.append( hlp.whereAnd() ).append( PSI_STATUS_EQ ).append( EventStatus.ACTIVE.name() )\n-                    .append( \"' and psi.executiondate is not null \" );\n-            }\n-            else if ( params.getEventStatus() == EventStatus.OVERDUE )\n-            {\n-                sqlBuilder.append( hlp.whereAnd() ).append( \" date(now()) > date(psi.duedate) and psi.status = '\" )\n-                    .append( EventStatus.SCHEDULE.name() ).append( \"' \" );\n-            }\n-            else\n-            {\n-                sqlBuilder.append( hlp.whereAnd() ).append( PSI_STATUS_EQ ).append( params.getEventStatus().name() )\n-                    .append( \"' \" );\n-            }\n+            fromBuilder.append( hlp.whereAnd() )\n+                .append( \" p.type = \" )\n+                .append( \":programType\" )\n+                .append( \" \" );\n         }\n \n-        if ( params.getEvents() != null && !params.getEvents().isEmpty() && !params.hasFilters() )\n+        fromBuilder.append( eventStatusSql( params, mapSqlParameterSource, hlp ) );\n+\n+        if ( params.getEvents() != null && !params.getEvents()\n+            .isEmpty() && !params.hasFilters() )\n         {\n-            sqlBuilder.append( hlp.whereAnd() ).append( \" (psi.uid in (\" )\n-                .append( getQuotedCommaDelimitedString( params.getEvents() ) ).append( \")) \" );\n+            mapSqlParameterSource.addValue( \"psi_uid\", params.getEvents() );\n+\n+            fromBuilder.append( hlp.whereAnd() )\n+                .append( \" (psi.uid in (\" )\n+                .append( \":psi_uid\" )\n+                .append( \")) \" );\n         }\n \n         if ( params.hasAssignedUsers() )\n         {\n-            sqlBuilder.append( hlp.whereAnd() ).append( \" (au.uid in (\" )\n-                .append( getQuotedCommaDelimitedString( params.getAssignedUsers() ) ).append( \")) \" );\n+            mapSqlParameterSource.addValue( \"au_uid\", params.getAssignedUsers() );\n+\n+            fromBuilder.append( hlp.whereAnd() )\n+                .append( \" (au.uid in (\" )\n+                .append( \":au_uid\" )\n+                .append( \")) \" );\n         }\n \n         if ( params.isIncludeOnlyUnassignedEvents() )\n         {\n-            sqlBuilder.append( hlp.whereAnd() ).append( \" (au.uid is null) \" );\n+            fromBuilder.append( hlp.whereAnd() )\n+                .append( \" (au.uid is null) \" );\n         }\n \n         if ( params.isIncludeOnlyAssignedEvents() )\n         {\n-            sqlBuilder.append( hlp.whereAnd() ).append( \" (au.uid is not null) \" );\n+            fromBuilder.append( hlp.whereAnd() )\n+                .append( \" (au.uid is not null) \" );\n         }\n \n         if ( !params.isIncludeDeleted() )\n         {\n-            sqlBuilder.append( hlp.whereAnd() ).append( \" psi.deleted is false \" );\n+            fromBuilder.append( hlp.whereAnd() )\n+                .append( \" psi.deleted is false \" );\n         }\n \n         if ( params.hasSecurityFilter() )\n         {\n-            sqlBuilder.append( hlp.whereAnd() + \" (p.uid in (\"\n-                + getQuotedCommaDelimitedString( params.getAccessiblePrograms() ) + \")) \" );\n-            sqlBuilder.append( hlp.whereAnd() + \" (ps.uid in (\"\n-                + getQuotedCommaDelimitedString( params.getAccessibleProgramStages() ) + \")) \" );\n+            mapSqlParameterSource.addValue( \"program_uid\", params.getAccessiblePrograms()\n+                .isEmpty() ? null : params.getAccessiblePrograms() );\n+\n+            fromBuilder.append( hlp.whereAnd() )\n+                .append( \" (p.uid in (\" )\n+                .append( \":program_uid\" )\n+                .append( \")) \" );\n+\n+            mapSqlParameterSource.addValue( \"programstage_uid\", params.getAccessibleProgramStages()\n+                .isEmpty() ? null : params.getAccessibleProgramStages() );\n+\n+            fromBuilder.append( hlp.whereAnd() )\n+                .append( \" (ps.uid in (\" )\n+                .append( \":programstage_uid\" )\n+                .append( \")) \" );\n         }\n \n         if ( params.isSynchronizationQuery() )\n         {\n-            sqlBuilder.append( hlp.whereAnd() ).append( \" psi.lastupdated > psi.lastsynchronized \" );\n+            fromBuilder.append( hlp.whereAnd() )\n+                .append( \" psi.lastupdated > psi.lastsynchronized \" );\n         }\n \n-        return sqlBuilder.toString();\n+        if ( !CollectionUtils.isEmpty( params.getProgramInstances() ) )\n+        {\n+            mapSqlParameterSource.addValue( \"programinstance_uid\", params.getProgramInstances() );\n+\n+            fromBuilder.append( hlp.whereAnd() )\n+                .append( \" (pi.uid in (:programinstance_uid)) \" );\n+        }\n+\n+        return fromBuilder;\n     }\n \n     /**\n-     * From, join and where clause. For dataElement params, restriction is set\n-     * in inner join. For query params, restriction is set in where clause.\n+     * For dataElement params, restriction is set in inner join. For query\n+     * params, restriction is set in where clause.\n      */\n-    private String getFromWhereClause( EventSearchParams params, SqlHelper hlp,\n-        List<OrganisationUnit> organisationUnits )\n+    private StringBuilder dataElementAndFiltersSql( EventSearchParams params,\n+        MapSqlParameterSource mapSqlParameterSource, SqlHelper hlp, StringBuilder selectBuilder )\n     {\n-        StringBuilder sqlBuilder = new StringBuilder().append( \"from programstageinstance psi \"\n-            + \"inner join programinstance pi on pi.programinstanceid = psi.programinstanceid \"\n-            + \"inner join program p on p.programid = pi.programid \"\n-            + \"inner join programstage ps on ps.programstageid = psi.programstageid \"\n-            + \"inner join categoryoptioncombo coc on coc.categoryoptioncomboid = psi.attributeoptioncomboid \"\n-            + \"inner join organisationunit ou on psi.organisationunitid = ou.organisationunitid \"\n-            + \"left join users auc on (psi.assigneduserid=auc.userid) \"\n-            + \"left join userinfo au on (auc.userid=au.userinfoid) \" );\n+        int filterCount = 0;\n \n+        StringBuilder optionValueJoinBuilder = new StringBuilder();\n+        StringBuilder optionValueConditionBuilder = new StringBuilder();\n+        StringBuilder eventDataValuesWhereSql = new StringBuilder();\n         Set<String> joinedColumns = new HashSet<>();\n \n-        String eventDataValuesWhereSql = \"\";\n-\n         for ( QueryItem item : params.getDataElementsAndFilters() )\n         {\n-            final String col = item.getItemId();\n-            final String optCol = item.getItemId() + \"opt\";\n-            final String dataValueValueSql = \"psi.eventdatavalues #>> '{\" + col + \", value}'\";\n+            ++filterCount;\n \n-            if ( !joinedColumns.contains( col ) )\n-            {\n-                if ( item.hasOptionSet() && item.hasFilter() )\n-                {\n-                    sqlBuilder.append( \"inner join optionvalue as \" + optCol + \" on lower(\" + optCol + \".code) = \" +\n-                        \"lower(\" + dataValueValueSql + \") and \" + optCol + \".optionsetid = \"\n-                        + item.getOptionSet().getId() + \" \" );\n-                }\n+            final String itemId = item.getItemId();\n \n-                joinedColumns.add( col );\n+            final String dataValueValueSql = \"psi.eventdatavalues #>> '{\" + itemId + \", value}'\";\n+\n+            selectBuilder.append( \", \" )\n+                .append( item.isNumeric() ? castToNumber( dataValueValueSql ) : lower( dataValueValueSql ) )\n+                .append( \" as \" )\n+                .append( itemId );\n+\n+            String optValueTableAs = \"opt_\" + filterCount;\n+\n+            if ( !joinedColumns.contains( itemId ) && item.hasOptionSet() && item.hasFilter() )\n+            {\n+                String optSetBind = \"optset_\" + filterCount;\n+\n+                mapSqlParameterSource.addValue( optSetBind, item.getOptionSet()\n+                    .getId() );\n+\n+                optionValueJoinBuilder.append( \"inner join optionvalue as \" )\n+                    .append( optValueTableAs )\n+                    .append( \" on lower(\" )\n+                    .append( optValueTableAs )\n+                    .append( \".code) = \" )\n+                    .append( \"lower(\" )\n+                    .append( dataValueValueSql )\n+                    .append( \") and \" )\n+                    .append( optValueTableAs )\n+                    .append( \".optionsetid = \" )\n+                    .append( \":\" )\n+                    .append( optSetBind )\n+                    .append( \" \" );\n+\n+                joinedColumns.add( itemId );\n             }\n \n             if ( item.hasFilter() )\n             {\n                 for ( QueryFilter filter : item.getFilters() )\n                 {\n-                    final String encodedFilter = statementBuilder.encode( filter.getFilter(), false );\n+                    final String queryCol = \" lower( \" + dataValueValueSql + \" )\";\n \n-                    final String queryCol = \" \" + (item.isNumeric() ? castToNumber( dataValueValueSql )\n-                        : lower( dataValueValueSql ));\n+                    String bindParameter = \"parameter_\" + filterCount;\n \n                     if ( !item.hasOptionSet() )\n                     {\n-                        if ( !eventDataValuesWhereSql.isEmpty() )\n+                        eventDataValuesWhereSql.append( hlp.whereAnd() );\n+\n+                        if ( QueryOperator.IN.getValue()\n+                            .equalsIgnoreCase( filter.getSqlOperator() ) )\n                         {\n-                            eventDataValuesWhereSql += \" and \";\n-                        }\n+                            mapSqlParameterSource.addValue( bindParameter,\n+                                QueryFilter.getFilterItems( StringUtils.lowerCase( filter.getFilter() ) ) );\n \n-                        eventDataValuesWhereSql += \" \" + queryCol + \" \" + filter.getSqlOperator() + \" \"\n-                            + StringUtils.lowerCase( filter.getSqlFilter( encodedFilter ) ) + \" \";\n-                    }\n-                    else if ( QueryOperator.IN.getValue().equalsIgnoreCase( filter.getSqlOperator() ) )\n-                    {\n-                        sqlBuilder.append( \"and \" ).append( queryCol ).append( \" \" ).append( filter.getSqlOperator() )\n-                            .append( \" \" ).append( StringUtils.lowerCase( filter.getSqlFilter( encodedFilter ) ) )\n-                            .append( \" \" );\n+                            eventDataValuesWhereSql.append( inCondition( filter, bindParameter, queryCol ) );\n+                        }\n+                        else\n+                        {\n+                            mapSqlParameterSource.addValue( bindParameter,\n+                                StringUtils.lowerCase( filter.getSqlBindFilter() ) );\n+\n+                            eventDataValuesWhereSql.append( \" \" )\n+                                .append( queryCol )\n+                                .append( \" \" )\n+                                .append( filter.getSqlOperator() )\n+                                .append( \" \" )\n+                                .append( \":\" )\n+                                .append( bindParameter )\n+                                .append( \" \" );\n+                        }\n                     }\n                     else\n                     {\n-                        sqlBuilder.append( \"and lower( \" ).append( optCol ).append( DOT_NAME ).append( \" \" )\n-                            .append( filter.getSqlOperator() ).append( \" \" )\n-                            .append( StringUtils.lowerCase( filter.getSqlFilter( encodedFilter ) ) ).append( \" \" );\n+                        if ( QueryOperator.IN.getValue()\n+                            .equalsIgnoreCase( filter.getSqlOperator() ) )\n+                        {\n+                            mapSqlParameterSource.addValue( bindParameter,\n+                                QueryFilter.getFilterItems( StringUtils.lowerCase( filter.getFilter() ) ) );\n+\n+                            optionValueConditionBuilder.append( \" and \" );\n+                            optionValueConditionBuilder.append( inCondition( filter, bindParameter, queryCol ) );\n+                        }\n+                        else\n+                        {\n+                            mapSqlParameterSource.addValue( bindParameter,\n+                                StringUtils.lowerCase( filter.getSqlBindFilter() ) );\n+\n+                            optionValueConditionBuilder.append( \"and lower(\" )\n+                                .append( optValueTableAs )\n+                                .append( DOT_NAME )\n+                                .append( \" \" )\n+                                .append( filter.getSqlOperator() )\n+                                .append( \" \" )\n+                                .append( \":\" )\n+                                .append( bindParameter )\n+                                .append( \" \" );\n+                        }\n                     }\n                 }\n             }\n         }\n \n-        if ( !eventDataValuesWhereSql.isEmpty() )\n-        {\n-            sqlBuilder.append( hlp.whereAnd() ).append( eventDataValuesWhereSql ).append( \" \" );\n-        }\n+        return optionValueJoinBuilder.append( optionValueConditionBuilder )\n+            .append( eventDataValuesWhereSql )\n+            .append( \" \" );\n+    }\n+\n+    private String inCondition( QueryFilter filter, String boundParameter, String queryCol )\n+    {\n+        return new StringBuilder().append( queryCol )\n+            .append( \" \" )\n+            .append( filter.getSqlOperator() )\n+            .append( \" \" )\n+            .append( \"(\" )\n+            .append( \":\" )\n+            .append( boundParameter )\n+            .append( \") \" )\n+            .toString();\n+    }\n+\n+    private String getFromWhereClause( EventSearchParams params, StringBuilder dataElementAndFiltersSql,\n+        MapSqlParameterSource mapSqlParameterSource, SqlHelper hlp, List<OrganisationUnit> organisationUnits )\n+    {\n+        StringBuilder sqlBuilder = new StringBuilder().append(\n+            \" from programstageinstance psi \"\n+                + \"inner join programinstance pi on pi.programinstanceid = psi.programinstanceid \"\n+                + \"inner join program p on p.programid = pi.programid \"\n+                + \"inner join programstage ps on ps.programstageid = psi.programstageid \"\n+                + \"inner join categoryoptioncombo coc on coc.categoryoptioncomboid = psi.attributeoptioncomboid \"\n+                + \"left join trackedentityprogramowner po on (pi.trackedentityinstanceid=po.trackedentityinstanceid) \"\n+                + \"inner join organisationunit ou on (coalesce(po.organisationunitid, psi.organisationunitid)=ou.organisationunitid) \"\n+                + \"left join userinfo au on (psi.assigneduserid=au.userinfoid) \" );\n+\n+        sqlBuilder.append( dataElementAndFiltersSql );\n \n-        if ( organisationUnits != null && !organisationUnits.isEmpty() )\n+        if ( !organisationUnits.isEmpty() || params.getOrgUnit() != null )\n         {\n-            sqlBuilder.append( hlp.whereAnd() ).append( \" psi.organisationunitid in (\" )\n-                .append( getCommaDelimitedString( getIdentifiers( organisationUnits ) ) ).append( \") \" );\n+            sqlBuilder.append( hlp.whereAnd() )\n+                .append( getOrgUnitSql( hlp, params, mapSqlParameterSource, organisationUnits ) );\n         }\n \n         if ( params.getProgramStage() != null )\n         {\n-            sqlBuilder.append( hlp.whereAnd() ).append( \" ps.programstageid = \" )\n-                .append( params.getProgramStage().getId() ).append( \" \" );\n+            mapSqlParameterSource.addValue( \"programstageid\", params.getProgramStage().getId() );\n+\n+            sqlBuilder.append( hlp.whereAnd() )\n+                .append( \" ps.programstageid = \" )\n+                .append( \":programstageid\" )\n+                .append( \" \" );\n         }\n \n         if ( params.getCategoryOptionCombo() != null )\n         {\n-            sqlBuilder.append( hlp.whereAnd() ).append( \" psi.attributeoptioncomboid = \" )\n-                .append( params.getCategoryOptionCombo().getId() ).append( \" \" );\n+            mapSqlParameterSource.addValue( \"attributeoptioncomboid\", params.getCategoryOptionCombo()\n+                .getId() );\n+\n+            sqlBuilder.append( hlp.whereAnd() )\n+                .append( \" psi.attributeoptioncomboid = \" )\n+                .append( \":attributeoptioncomboid\" )\n+                .append( \" \" );\n         }\n \n         if ( params.getStartDate() != null )\n         {\n-            sqlBuilder.append( hlp.whereAnd() ).append( \" (psi.executiondate >= '\" )\n-                .append( getMediumDateString( params.getStartDate() ) ).append( \"' \" )\n-                .append( \"or (psi.executiondate is null and psi.duedate >= '\" )\n-                .append( getMediumDateString( params.getStartDate() ) ).append( \"')) \" );\n+            mapSqlParameterSource.addValue( \"startDate\", params.getStartDate(), Types.DATE );\n+\n+            sqlBuilder.append( hlp.whereAnd() )\n+                .append( \" (psi.executiondate >= \" )\n+                .append( \":startDate\" )\n+                .append( \" or (psi.executiondate is null and psi.duedate >= \" )\n+                .append( \":startDate\" )\n+                .append( \" )) \" );\n         }\n \n         if ( params.getEndDate() != null )\n         {\n-            sqlBuilder.append( hlp.whereAnd() ).append( \" (psi.executiondate <= '\" )\n-                .append( getMediumDateString( params.getEndDate() ) ).append( \"' \" )\n-                .append( \"or (psi.executiondate is null and psi.duedate <= '\" )\n-                .append( getMediumDateString( params.getEndDate() ) ).append( \"')) \" );\n+            mapSqlParameterSource.addValue( \"endDate\", addDays( params.getEndDate(), 1 ), Types.DATE );\n+\n+            sqlBuilder.append( hlp.whereAnd() ).append( \" (psi.executiondate < \" )\n+                .append( \":endDate \" )\n+                .append( \" or (psi.executiondate is null and psi.duedate < \" )\n+                .append( \":endDate\" ).append( \" )) \" );\n         }\n \n-        sqlBuilder.append( addLastUpdatedFilters( params, hlp, false ) );\n+        sqlBuilder.append( addLastUpdatedFilters( params, mapSqlParameterSource, hlp, false ) );\n \n         if ( params.isSynchronizationQuery() )\n         {\n-            sqlBuilder.append( hlp.whereAnd() ).append( \" psi.lastupdated > psi.lastsynchronized \" );\n+            sqlBuilder.append( hlp.whereAnd() )\n+                .append( \" psi.lastupdated > psi.lastsynchronized \" );\n         }\n \n         // Comparing milliseconds instead of always creating new Date( 0 )\n \n-        if ( params.getSkipChangedBefore() != null && params.getSkipChangedBefore().getTime() > 0 )\n+        if ( params.getSkipChangedBefore() != null && params.getSkipChangedBefore()\n+            .getTime() > 0 )\n         {\n-            String skipChangedBefore = DateUtils.getLongDateString( params.getSkipChangedBefore() );\n-            sqlBuilder.append( hlp.whereAnd() ).append( PSI_LASTUPDATED_GT ).append( skipChangedBefore ).append( \"' \" );\n+            mapSqlParameterSource.addValue( \"skipChangedBefore\", params.getSkipChangedBefore(), Types.TIMESTAMP );\n+\n+            sqlBuilder.append( hlp.whereAnd() )\n+                .append( PSI_LASTUPDATED_GT )\n+                .append( \":skipChangedBefore \" );\n         }\n \n         if ( params.getDueDateStart() != null )\n         {\n-            sqlBuilder.append( hlp.whereAnd() ).append( \" psi.duedate is not null and psi.duedate >= '\" )\n-                .append( DateUtils.getLongDateString( params.getDueDateStart() ) ).append( \"' \" );\n+            mapSqlParameterSource.addValue( \"startDueDate\", params.getDueDateStart(), Types.DATE );\n+\n+            sqlBuilder.append( hlp.whereAnd() )\n+                .append( \" psi.duedate is not null and psi.duedate >= \" )\n+                .append( \":dueDate\" )\n+                .append( \" \" );\n         }\n \n         if ( params.getDueDateEnd() != null )\n         {\n-            sqlBuilder.append( hlp.whereAnd() ).append( \" psi.duedate is not null and psi.duedate <= '\" )\n-                .append( DateUtils.getLongDateString( params.getDueDateEnd() ) ).append( \"' \" );\n+            mapSqlParameterSource.addValue( \"endDueDate\", params.getDueDateEnd(), Types.DATE );\n+\n+            sqlBuilder.append( hlp.whereAnd() )\n+                .append( \" psi.duedate is not null and psi.duedate <= \" )\n+                .append( \":endDueDate\" )\n+                .append( \" \" );\n         }\n \n         if ( !params.isIncludeDeleted() )\n         {\n-            sqlBuilder.append( hlp.whereAnd() ).append( \" psi.deleted is false \" );\n+            sqlBuilder.append( hlp.whereAnd() )\n+                .append( \" psi.deleted is false \" );\n         }\n \n-        if ( params.getEventStatus() != null )\n+        if ( !CollectionUtils.isEmpty( params.getProgramInstances() ) )\n         {\n-            if ( params.getEventStatus() == EventStatus.VISITED )\n-            {\n-                sqlBuilder.append( hlp.whereAnd() ).append( PSI_STATUS_EQ ).append( EventStatus.ACTIVE.name() )\n-                    .append( \"' and psi.executiondate is not null \" );\n-            }\n-            else if ( params.getEventStatus() == EventStatus.OVERDUE )\n-            {\n-                sqlBuilder.append( hlp.whereAnd() ).append( \" date(now()) > date(psi.duedate) and psi.status = '\" )\n-                    .append( EventStatus.SCHEDULE.name() ).append( \"' \" );\n-            }\n-            else\n-            {\n-                sqlBuilder.append( hlp.whereAnd() ).append( PSI_STATUS_EQ ).append( params.getEventStatus().name() )\n-                    .append( \"' \" );\n-            }\n+            mapSqlParameterSource.addValue( \"programinstance_uid\", params.getProgramInstances() );\n+\n+            sqlBuilder.append( hlp.whereAnd() )\n+                .append( \" (pi.uid in (:programinstance_uid)) \" );\n         }\n \n-        if ( params.getEvents() != null && !params.getEvents().isEmpty() && !params.hasFilters() )\n+        sqlBuilder.append( eventStatusSql( params, mapSqlParameterSource, hlp ) );\n+\n+        if ( params.getEvents() != null && !params.getEvents()\n+            .isEmpty() && !params.hasFilters() )\n         {\n-            sqlBuilder.append( hlp.whereAnd() ).append( \" (psi.uid in (\" )\n-                .append( getQuotedCommaDelimitedString( params.getEvents() ) ).append( \")) \" );\n+            mapSqlParameterSource.addValue( \"psi_uid\", params.getEvents() );\n+\n+            sqlBuilder.append( hlp.whereAnd() )\n+                .append( \" (psi.uid in (\" )\n+                .append( \":psi_uid\" )\n+                .append( \")) \" );\n         }\n \n         if ( params.hasAssignedUsers() )\n         {\n-            sqlBuilder.append(\n-                hlp.whereAnd() + \" (au.uid in (\" + getQuotedCommaDelimitedString( params.getAssignedUsers() ) + \")) \" );\n+            mapSqlParameterSource.addValue( \"au_uid\", params.getAssignedUsers() );\n+\n+            sqlBuilder.append( hlp.whereAnd() )\n+                .append( \" (au.uid in (\" )\n+                .append( \":au_uid\" )\n+                .append( \")) \" );\n         }\n \n         if ( params.isIncludeOnlyUnassignedEvents() )\n         {\n-            sqlBuilder.append( hlp.whereAnd() ).append( \" (au.uid is null) \" );\n+            sqlBuilder.append( hlp.whereAnd() )\n+                .append( \" (au.uid is null) \" );\n         }\n \n         if ( params.isIncludeOnlyAssignedEvents() )\n         {\n-            sqlBuilder.append( hlp.whereAnd() ).append( \" (au.uid is not null) \" );\n+            sqlBuilder.append( hlp.whereAnd() )\n+                .append( \" (au.uid is not null) \" );\n         }\n \n         return sqlBuilder.toString();\n     }\n \n-    private String addLastUpdatedFilters( EventSearchParams params, SqlHelper hlp, boolean useDateAfterEndDate )\n+    private String eventStatusSql( EventSearchParams params, MapSqlParameterSource mapSqlParameterSource,\n+        SqlHelper hlp )\n+    {\n+        StringBuilder stringBuilder = new StringBuilder();\n+\n+        if ( params.getEventStatus() != null )\n+        {\n+            if ( params.getEventStatus() == EventStatus.VISITED )\n+            {\n+                mapSqlParameterSource.addValue( PSI_STATUS, EventStatus.ACTIVE.name() );\n+\n+                stringBuilder.append( hlp.whereAnd() )\n+                    .append( PSI_STATUS_EQ )\n+                    .append( \":\" + PSI_STATUS )\n+                    .append( \" and psi.executiondate is not null \" );\n+            }\n+            else if ( params.getEventStatus() == EventStatus.OVERDUE )\n+            {\n+                mapSqlParameterSource.addValue( PSI_STATUS, EventStatus.SCHEDULE.name() );\n+\n+                stringBuilder.append( hlp.whereAnd() )\n+                    .append( \" date(now()) > date(psi.duedate) and psi.status = \" )\n+                    .append( \":\" + PSI_STATUS )\n+                    .append( \" \" );\n+            }\n+            else\n+            {\n+                mapSqlParameterSource.addValue( PSI_STATUS, params.getEventStatus()\n+                    .name() );\n+\n+                stringBuilder.append( hlp.whereAnd() )\n+                    .append( PSI_STATUS_EQ )\n+                    .append( \":\" + PSI_STATUS )\n+                    .append( \" \" );\n+            }\n+        }\n+\n+        return stringBuilder.toString();\n+    }\n+\n+    private String addLastUpdatedFilters( EventSearchParams params, MapSqlParameterSource mapSqlParameterSource,\n+        SqlHelper hlp, boolean useDateAfterEndDate )\n     {\n         StringBuilder sqlBuilder = new StringBuilder();\n \n         if ( params.hasLastUpdatedDuration() )\n         {\n-            sqlBuilder.append( hlp.whereAnd() ).append( PSI_LASTUPDATED_GT )\n-                .append( getLongGmtDateString( DateUtils.nowMinusDuration( params.getLastUpdatedDuration() ) ) )\n-                .append( \"' \" );\n+            mapSqlParameterSource.addValue( \"lastUpdated\", DateUtils.offSetDateTimeFrom(\n+                DateUtils.nowMinusDuration( params.getLastUpdatedDuration() ) ), Types.TIMESTAMP_WITH_TIMEZONE );\n+\n+            sqlBuilder.append( hlp.whereAnd() )\n+                .append( PSI_LASTUPDATED_GT )\n+                .append( \":lastUpdated\" )\n+                .append( \" \" );\n         }\n         else\n         {\n             if ( params.hasLastUpdatedStartDate() )\n             {\n-                sqlBuilder.append( hlp.whereAnd() ).append( PSI_LASTUPDATED_GT )\n-                    .append( DateUtils.getLongDateString( params.getLastUpdatedStartDate() ) ).append( \"' \" );\n+                mapSqlParameterSource.addValue( \"lastUpdatedStart\", params.getLastUpdatedStartDate(), Types.TIMESTAMP );\n+\n+                sqlBuilder.append( hlp.whereAnd() )\n+                    .append( PSI_LASTUPDATED_GT )\n+                    .append( \":lastUpdatedStart\" )\n+                    .append( \" \" );\n             }\n \n             if ( params.hasLastUpdatedEndDate() )\n             {\n                 if ( useDateAfterEndDate )\n                 {\n-                    Date dateAfterEndDate = getDateAfterAddition( params.getLastUpdatedEndDate(), 1 );\n-                    sqlBuilder.append( hlp.whereAnd() ).append( \" psi.lastupdated < '\" )\n-                        .append( DateUtils.getLongDateString( dateAfterEndDate ) ).append( \"' \" );\n+                    mapSqlParameterSource.addValue( \"lastUpdatedEnd\", addDays( params.getLastUpdatedEndDate(), 1 ),\n+                        Types.TIMESTAMP );\n+\n+                    sqlBuilder.append( hlp.whereAnd() )\n+                        .append( \" psi.lastupdated < \" )\n+                        .append( \":lastUpdatedEnd\" )\n+                        .append( \" \" );\n                 }\n                 else\n                 {\n-                    sqlBuilder.append( hlp.whereAnd() ).append( \" psi.lastupdated <= '\" )\n-                        .append( DateUtils.getLongDateString( params.getLastUpdatedEndDate() ) ).append( \"' \" );\n+                    mapSqlParameterSource.addValue( \"lastUpdatedEnd\", params.getLastUpdatedEndDate(), Types.TIMESTAMP );\n+\n+                    sqlBuilder.append( hlp.whereAnd() )\n+                        .append( \" psi.lastupdated <= \" )\n+                        .append( \":lastUpdatedEnd\" )\n+                        .append( \" \" );\n                 }\n             }\n         }\n", "next_change": {"commit": "d7afc27b3b1e7159e8e0aab4f2bcb58f9b1167d0", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\nindex 232f25bbbc..a17ab854db 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\n", "chunk": "@@ -1645,23 +1734,22 @@ public class JdbcEventStore implements EventStore\n         return sqlBuilder.toString();\n     }\n \n-    private String getCategoryOptionSharingForUser( User user, MapSqlParameterSource mapSqlParameterSource )\n+    private String getCategoryOptionSharingForUser( User user, EventSearchParams params )\n     {\n-        StringBuilder sqlBuilder = new StringBuilder().append( \" left join ( \" );\n-\n-        sqlBuilder.append( \"select categoryoptioncomboid, count(categoryoptioncomboid) as option_size \"\n-            + \"from categoryoptioncombos_categoryoptions group by categoryoptioncomboid) \"\n-            + \"as cocount on coc.categoryoptioncomboid = cocount.categoryoptioncomboid \"\n-            + \"left join (\"\n-            + \"select deco.categoryoptionid as deco_id, deco.uid as deco_uid , \"\n-            + \"( select ( \" + JpaQueryUtils.generateSQlQueryForSharingCheck( \"deco.sharing\",\n-                user, AclService.LIKE_READ_DATA, mapSqlParameterSource )\n-            + \" ) ) as can_access \"\n-            + \"from dataelementcategoryoption deco \" );\n+        String joinCondition = \"inner join categoryoptioncombo coc on coc.categoryoptioncomboid=psi.attributeoptioncomboid \"\n+            + \" inner join categoryoptioncombos_categoryoptions cocco on coc.categoryoptioncomboid=cocco.categoryoptioncomboid \"\n+            + \" inner join dataelementcategoryoption deco on cocco.categoryoptionid=deco.categoryoptionid \";\n \n-        sqlBuilder.append( \" ) as decoa on cocco.categoryoptionid = decoa.deco_id \" );\n+        if ( (params.getCategoryOptionCombo() == null || params.getCategoryOptionCombo().isDefault())\n+            && !isSuper( user ) )\n+        {\n+            return joinCondition +\n+                \" inner join ( \" +\n+                \"select categoryoptioncomboid, COUNT(categoryoptioncomboid) as option_size \" +\n+                \"from categoryoptioncombos_categoryoptions group by categoryoptioncomboid) as cocount on coc.categoryoptioncomboid = cocount.categoryoptioncomboid \";\n+        }\n \n-        return sqlBuilder.toString();\n+        return joinCondition;\n     }\n \n     private String getEventPagingQuery( final EventSearchParams params )\n", "next_change": {"commit": "4e17bd8e9b1f4b1331349dcdf116d7308ee6c243", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\nindex a17ab854db..a57fd62292 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\n", "chunk": "@@ -1734,22 +1798,47 @@ public class JdbcEventStore implements EventStore\n         return sqlBuilder.toString();\n     }\n \n-    private String getCategoryOptionSharingForUser( User user, EventSearchParams params )\n+    /**\n+     * Returns the joins and sub-queries needed to fulfill all the needs\n+     * regarding category option combo and category options. Category option\n+     * combos (COC) are composed of category options (CO), one per category of\n+     * the COCs category combination (CC).\n+     *\n+     * Important constraints leading to this query:\n+     * <ul>\n+     * <li>While COCs are pre-computed and can be seen as a de-normalization of\n+     * the possible permutations the COs in a COC are stored in a normalized\n+     * way. The final event should have its attributeCategoryOptions field\n+     * populated with a semicolon separated string of its COCs COs. We thus need\n+     * to aggregate these COs for each event.</li>\n+     * <li>COCs should be returned in the user specified idScheme. So in order\n+     * to have access to uid, code, name, attributes we need another join as all\n+     * of these fields cannot be added to the above aggregation. IdSchemes\n+     * SELECT are handled in {@link #getEventSelectIdentifiersByIdScheme}.</li>\n+     * <li>A user must have access to all COs of the events COC to have access\n+     * to an event.</li>\n+     * </ul>\n+     */\n+    private String getCategoryOptionComboQuery( User user )\n     {\n-        String joinCondition = \"inner join categoryoptioncombo coc on coc.categoryoptioncomboid=psi.attributeoptioncomboid \"\n-            + \" inner join categoryoptioncombos_categoryoptions cocco on coc.categoryoptioncomboid=cocco.categoryoptioncomboid \"\n-            + \" inner join dataelementcategoryoption deco on cocco.categoryoptionid=deco.categoryoptionid \";\n+        String joinCondition = \"inner join categoryoptioncombo coc on coc.categoryoptioncomboid = psi.attributeoptioncomboid \"\n+            +\n+            \" inner join (select coc.categoryoptioncomboid as id,\" +\n+            \" string_agg(co.uid, ';') as co_uids, count(co.categoryoptionid) as co_count\" +\n+            \" from categoryoptioncombo coc \" +\n+            \" inner join categoryoptioncombos_categoryoptions cocco on coc.categoryoptioncomboid = cocco.categoryoptioncomboid\"\n+            +\n+            \" inner join dataelementcategoryoption co on cocco.categoryoptionid = co.categoryoptionid\" +\n+            \" group by coc.categoryoptioncomboid \";\n \n-        if ( (params.getCategoryOptionCombo() == null || params.getCategoryOptionCombo().isDefault())\n-            && !isSuper( user ) )\n+        if ( !isSuper( user ) )\n         {\n-            return joinCondition +\n-                \" inner join ( \" +\n-                \"select categoryoptioncomboid, COUNT(categoryoptioncomboid) as option_size \" +\n-                \"from categoryoptioncombos_categoryoptions group by categoryoptioncomboid) as cocount on coc.categoryoptioncomboid = cocount.categoryoptioncomboid \";\n+            joinCondition = joinCondition + \" having bool_and(case when \"\n+                + JpaQueryUtils.generateSQlQueryForSharingCheck( \"co.sharing\", user, AclService.LIKE_READ_DATA )\n+                + \" then true else false end) = True \";\n         }\n \n-        return joinCondition;\n+        return joinCondition + \") as coc_agg on coc_agg.id = psi.attributeoptioncomboid \";\n     }\n \n     private String getEventPagingQuery( final EventSearchParams params )\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "message": "Merge commit", "committedDate": null}, {"oid": "1775146057dbef2da11c4e554b339f150f2f4857", "committedDate": "2020-09-09 08:34:03 +0200", "message": "perf: [DHIS-9415] avoid querying programstageinstancecomments if not necessary (#6103)"}, {"oid": "0d35843121f0ad3004fad015f1520c5b06a5c337", "committedDate": "2020-09-15 09:24:33 +0200", "message": "Merge 2.35 into master (#6149)"}, {"oid": "e4ff88027eb8dd823a539ef0ed82daeff5072e7c", "committedDate": "2020-09-18 16:43:42 +0200", "message": "fix: prevent db deadlock during Event update (#6135)"}, {"oid": "1bd8ee38126fbac22f805db44dad0cdcba7b14a6", "committedDate": "2020-09-23 11:30:37 +0200", "message": "fix: allow updating an Event with File data type [DHIS2-9559]"}, {"oid": "52b8f7c48def44670be7ba9d25d0ee963fe9441e", "committedDate": "2020-09-24 09:19:03 +0200", "message": "fix: Coordinate class removed, drop support for old implementation (#6172)"}, {"oid": "13cd21d76507450be96b06e13823b24cf357be04", "committedDate": "2020-10-30 09:38:34 +0100", "message": "feat: DHIS2-8911 adding LastUpdatedBy and CreatedBy user informations in events (#6521)"}, {"oid": "bcb4654eefc1d66ff614d1784219e7055a3671cc", "committedDate": "2020-10-30 11:24:12 +0100", "message": "fix: DHIS2-8911 corrected wrong column names (#6530)"}, {"oid": "08574f966f50a4667668edb4077cfd9e21bd9e10", "committedDate": "2020-11-11 13:59:04 +0100", "message": "fix: DHIS-7937 quotes in filter values depend on filter type when rendering sql string (#6604)"}, {"oid": "d34f05e1348f3dff54ced7059283a96a7b699ea4", "committedDate": "2020-11-16 18:21:11 +0100", "message": "feat: DHIS2-9835 user info in comments and notes for Events and Enrollments (#6587)"}, {"oid": "fbc5d6d0e07ba8180e933a63c670d58528cb700c", "committedDate": "2020-11-20 16:22:59 +0700", "message": "fix: Cant delete events (#6729)"}, {"oid": "5e4669b4c89c809989ea600900735dd71baa86e2", "committedDate": "2020-12-23 14:00:18 +0700", "message": "feat: Upgrade Hibernate  (#6939)"}, {"oid": "f00a1e4b7f23c356987cadfdc8a8407e1a098f52", "committedDate": "2021-01-11 07:26:55 +0100", "message": "fix: Check category option sharing settings (#7009)"}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "55164c30457d73850a5233869ab0119d31fcac9b", "committedDate": "2021-01-28 14:14:25 +0100", "message": "fix: sharing query issue in JdbcEventStore (#7151)"}, {"oid": "5d1a415fef305ea3cc18a3c2fadceb208403006a", "committedDate": "2021-01-29 09:30:08 +0100", "message": "refactor: Controllers params [DHIS2-10202] (#7201)"}, {"oid": "10b11c17ef2f2964263efc051f96c8e8f8f7e1f4", "committedDate": "2021-02-02 12:33:59 +0100", "message": "feat: change user property name to createdBy (#7061)"}, {"oid": "b46e880a82e0e0d03e1f7a940630771907d4317a", "committedDate": "2021-05-26 15:57:37 +0200", "message": "chore: Replace usage of duplicated method (#8077)"}, {"oid": "41338b95cf44f70b44834c3515933a677114dd84", "committedDate": "2021-05-28 13:54:35 +0200", "message": "fix: skipPaging properly considered (#8087)"}, {"oid": "15a1ce87df3a6aecbb40ceca8c1aeb9ef9a35290", "committedDate": "2021-06-08 15:46:02 +0200", "message": "perf: Remove program lookup in event query loop [DHIS2-11264] (#8149)"}, {"oid": "002abc97ad43829b6a7b59d2611a165106b666c2", "committedDate": "2021-06-28 11:39:16 +0200", "message": "fix: Do not hard delete events in importer [DHIS2-11375] (#8309)"}, {"oid": "6bdec842fbd0ccf97729ec29b96202365a4e832d", "committedDate": "2021-07-28 10:10:25 +0200", "message": "fix: Add enrollment filter for event exporter [DHIS2-11226] (#8441)"}, {"oid": "8ee3bc02e7758714d4865fb84c65dcd53f4820b1", "committedDate": "2021-09-22 13:34:18 +0200", "message": "fix: Event collection endpoint does not fetch relationships [DHIS2-11541] (#8540)"}, {"oid": "e9aa95cda06ed418fa24c389b38cde8afe364c2f", "committedDate": "2021-09-27 10:03:35 +0200", "message": "fix: teis lastupdated update (#8808)"}, {"oid": "9d05d585562bf9d269ffed02307ec59694795cfc", "committedDate": "2021-10-07 10:34:05 +0200", "message": "fix: Fix by reducing number of SQL queries for event collection (#8955)"}, {"oid": "5e4b90d1aaa2f3b0264b411b0a8d1bf0e860202a", "committedDate": "2021-10-14 12:31:47 +0200", "message": "refactor: jdbc event store replaced some strings with constants/enums [TECH-463] (#9041)"}, {"oid": "f2249116faa6cfd647106204ba0f09457811e3dd", "committedDate": "2021-10-18 19:14:22 +0200", "message": "chore: Move lambdas initializations into static blocks [TECH-774] (#9074)"}, {"oid": "0ea45addae148641a66270e104d43d70b59dde05", "committedDate": "2021-10-26 09:45:39 +0200", "message": "refactor: Remove check test profile in runtime code [TECH-699] (#9110)"}, {"oid": "9b7ebd47b923d1f52b53a4a724b5b1ab3d2f1c8d", "committedDate": "2021-10-29 11:25:49 +0200", "message": "Merge pull request from GHSA-cmpc-frjv-rrmw"}, {"oid": "d466cd4761340382d8214d3eca7c7616569b903e", "committedDate": "2021-10-29 17:45:42 +0200", "message": "fix: breaking unit test (#9150)"}, {"oid": "8a62c3e0240b711a75ca821921bae684b82fff5f", "committedDate": "2021-11-30 12:46:53 +0100", "message": "perf: Use ou.path for ouMode event queries (#9337)"}, {"oid": "cc35b66a078649936fc2bd7de77cfc2f718c1e32", "committedDate": "2021-12-07 16:40:31 +0100", "message": "fix: Apply TEI ownership in event query (#9367)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "da4ef9091eadf20324ce10342073e9e8031391af", "committedDate": "2022-01-26 10:33:44 +0100", "message": "fix: Include mentioned ou for ouMode=CHILDREN"}, {"oid": "93b61e49f94920cf3adfe3fd83ad8f0c060afbb1", "committedDate": "2022-02-14 09:59:56 +0100", "message": "fix: Request param totalPages=false for events/enrollments [DHIS2-12530] (#9719)"}, {"oid": "bd3f8dacffeb333843a99f3e659d9f19dae7a977", "committedDate": "2022-02-17 12:08:13 +0100", "message": "fix: Show uid instead of id in events [DHIS2-12648] (#9836)"}, {"oid": "8ccf9a288a67e5ee5349024fd3d281372c64c956", "committedDate": "2022-02-22 13:25:35 +0800", "message": "feat: Merge User/UserCredentials into one DB table (#9754)"}, {"oid": "869fa986d53abcf6fc503e46e3b25e1b876e6c3d", "committedDate": "2022-03-01 13:31:17 +0100", "message": "feat: Add single data value endpoint with JSON body [DHIS2-12689] (#9886)"}, {"oid": "d117ff9ce355694569f7c6477141cf35c6412609", "committedDate": "2022-03-04 11:13:40 +0100", "message": "fix: Return complete information for user fields in NTI [DHIS2-12717] (#9936)"}, {"oid": "dc31b5e0ec776f00b915e47a08abe1e54b8e3d29", "committedDate": "2022-04-19 15:49:20 +0200", "message": "fix: Handle NPE for null organsationUnits in event programs sync job [DHIS2-12762] (2.39) (#10525)"}, {"oid": "d99da048b6427aa16b080ab0a0e25eda4a2a0f96", "committedDate": "2022-05-09 13:53:18 +0200", "message": "feat: Refactor getCurrentUser() to return DHIS2 User object 2 (#10600)"}, {"oid": "83890d87919436906d00955e19e5925f7355ca51", "committedDate": "2022-05-11 21:00:19 +0200", "message": "fix: Fix SQL queries for deleted relationships [DHIS2-11320] (#10758)"}, {"oid": "ae6806774b896dcc69a99687ce331d60d40995c7", "committedDate": "2022-06-02 09:20:44 +0200", "message": "chore: Refactor JdbcTemplate to NamedParameterJdbcTemplate (#10767)"}, {"oid": "3ffbead58842052c66f26af10a103386f5cb16d0", "committedDate": "2022-06-14 12:05:49 +0200", "message": "fix: Include enrollment followup in eventrow return (#11070)"}, {"oid": "2c0aa62cc8f940e7629f081284bb01dac8c9faee", "committedDate": "2022-06-21 19:38:49 +0200", "message": "feat: Add filters to TEDV audit endpoint [DHIS2-13421] (#11125)"}, {"oid": "19962f46788d3430652c3124e01d1f16f17803ff", "committedDate": "2022-07-05 11:59:15 +0200", "message": "fix: Refactor Event SQL to use named parameters - Simple bindings [ DHIS2-13306 ] (#11205)"}, {"oid": "5ea8cffe77c593325973769e83dbe505441a5cf3", "committedDate": "2022-07-26 13:19:15 +0200", "message": "fix: Performance optimisation when fetching events from Event Programs [ DHIS2-13443 ]  (#11271)"}, {"oid": "9135ce719d6db71435c61fcd4d7144e013e77622", "committedDate": "2022-08-02 15:16:29 +0200", "message": "Feat: Refactor Event SQL to use named parameters - Complex bindings [ Dhis2-13455 ] (#11322)"}, {"oid": "04654efa7ba2d741ddbf1a6f0cf63fedcd01eb3f", "committedDate": "2022-08-29 21:50:26 +0200", "message": "fix: get tei id, date types, update tests (#11541)"}, {"oid": "eb0e2a4e8d608ef19aac980cf3c5ed4e3b859fb9", "committedDate": "2022-09-06 10:29:19 +0200", "message": "fix: Refactor Event SQL to use named parameters - Events grid - [ DHIS2-13508 ] (#11545)"}, {"oid": "36ee597adc705b106a64c243ea603e85234dbb4f", "committedDate": "2022-09-07 07:40:39 +0200", "message": "feat: filter /tracker/events by enrollmentEnrolledAfter DHIS2-13648 (#11651)"}, {"oid": "4f11b0c48c8c354a79249d95d963a996c4128643", "committedDate": "2022-09-07 09:20:40 +0200", "message": "feat: filter /tracker/events by enrollmentEnrolledBefore (#11672)"}, {"oid": "66df00d85fce2b865439d8a0fc9c701fca88ece0", "committedDate": "2022-09-07 10:11:34 +0200", "message": "feat: filter /tracker/events by enrollmentOccurredBefore/After (#11675)"}, {"oid": "5a6ad83ad236b6b721794c52b51da456e9b8453d", "committedDate": "2022-09-09 08:08:07 +0200", "message": "feat: filter /tracker/events by filterAttributes DHIS2-13648 (#11683)"}, {"oid": "501c22e088de3d40a75a2a771a64efc6998cb880", "committedDate": "2022-09-12 12:07:12 +0200", "message": "feat: Add ordering on tei attributes for events [DHIS2-13648] (#11724)"}, {"oid": "531ca62258142b6e88d3c96b1123315adce393da", "committedDate": "2022-09-13 11:59:53 +0200", "message": "feat: Add ordering attribute column in select [DHIS2-13648] (#11750)"}, {"oid": "b29fd87d6c8d63a8293d6600bdec633f7ddf2953", "committedDate": "2022-09-16 11:09:48 +0200", "message": "feat: Clean up JdbcEventStore class [DHIS2-13648] (#11796)"}, {"oid": "1ae607c63e5683bae651721208891d65e9612ee8", "committedDate": "2022-09-22 11:19:32 +0200", "message": "Merge pull request from GHSA-7pwm-6rh2-2388"}, {"oid": "d7afc27b3b1e7159e8e0aab4f2bcb58f9b1167d0", "committedDate": "2022-09-22 15:56:33 +0200", "message": "fix: move deco access to case in select (#11822)"}, {"oid": "3c815e2474da1b1ca7312543e96c882b49d465be", "committedDate": "2022-09-26 11:20:25 +0200", "message": "fix: Ensure filter valueType is applied in event query (#11715)"}, {"oid": "79a4e480b97e856c20eb616144d4851738d674b6", "committedDate": "2022-09-28 13:31:31 +0200", "message": "fix: Ensure actual event orgunit is returned [DHIS2-13656] (#11755)"}, {"oid": "b22196b76551e33179af112ccdfb7d64c5a46c67", "committedDate": "2022-09-28 13:59:05 +0200", "message": "fix: Filter can have multiple value [DHIS2-13676] (#11921)"}, {"oid": "d797ac751aa993bf8a9bf6bb446abf12982aac29", "committedDate": "2022-10-17 13:40:26 +0200", "message": "fix: potential NPEs found by nullness analysis [TECH-1460] (#12113)"}, {"oid": "7a4160ba9c1550a536807361acfa086f722413a0", "committedDate": "2022-11-21 14:38:43 +0100", "message": "fix: Match psi.ouId and ou.ouId to fetch psi.ouName [DHIS2-13656] (#12377)"}, {"oid": "27b75665be58c25de309b5d71e7bd86200d740d6", "committedDate": "2022-12-01 11:37:48 +0100", "message": "chore: use AssignedUserQueryParam in EventSearchParams (#12446)"}, {"oid": "9556d7a326e0bb6b64d9d223e8c511906ef7c564", "committedDate": "2022-12-21 10:35:40 +0100", "message": "fix: Ensure actual event orgunit is returned [DHIS2-13656] (#12518)"}, {"oid": "e586cd4742efa92258f64d23c8b324575de8c514", "committedDate": "2023-02-14 10:55:00 +0100", "message": "fix: Check if dueDate param is null [DHIS2-14736] (#13007)"}, {"oid": "b11da68ecf40901364ee28ad72e5c5dae3afff1f", "committedDate": "2023-02-23 08:16:53 +0100", "message": "fix: Add due date filter in sql generation [DHIS2-14497] (#13070)"}, {"oid": "a95012113446cf64430ab009cf37f5ad1fadc77e", "committedDate": "2023-03-02 15:36:17 +0100", "message": "fix: Respect events sort order [DHIS2-13735] (#13123)"}, {"oid": "4e17bd8e9b1f4b1331349dcdf116d7308ee6c243", "committedDate": "2023-03-14 14:03:31 +0000", "message": "fix: event pageSize is not respected with more than 1 category DHIS2-13135 (#13253)"}, {"oid": "d1975e80aa90b5ae63c68e5fc0c8b874cdf6d2da", "committedDate": "2023-03-20 10:36:05 +0100", "message": "chore: remove unused code (#13370)"}, {"oid": "43bd8664d854c226422c6b88b2c2bdf403fa240c", "committedDate": "2023-03-21 08:55:59 +0100", "message": "refactor: Simplify event orgunit sql query [TECH-1478] (#12897)"}, {"oid": "5764c79d20ac77259e14685730771c0748bf8407", "committedDate": "2023-03-24 12:43:39 +0100", "message": "fix: createdAtClient for events can be written only on inserts, never on updates [DHIS2-14991] (#13407)"}, {"oid": "fa4d70204237377c93cb232c49c188568ba95ebe", "committedDate": "2023-04-05 15:46:43 +0200", "message": "chore: use interface methods for method refs (#13535)"}, {"oid": "959c60d4f597187d0df2160fbbb675e5c4196e5c", "committedDate": "2023-04-27 16:46:18 +0200", "message": "chore: rename ProgramStageInstance to Event (#13731)"}, {"oid": "41e75ba362e65a726c88564679a43aadcebbc60a", "committedDate": "2023-05-03 07:50:28 +0200", "message": "chore: rename Event.programInstance to Event.enrollment (#13774)"}, {"oid": "240be973a3083b3e4b04ada02733f1908bb73512", "committedDate": "2023-05-08 08:39:16 +0000", "message": "chore: rename TrackedEntityInstance to TrackedEntity (#13827)"}, {"oid": "02336c9611c0dd85d5038223bddbfdebc0aae526", "committedDate": "2023-05-11 19:34:26 +0200", "message": "chore: move old tracker dxf2 code into deprecated package (#13901)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY1NzQ3OA==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r461657478", "body": "```suggestion\r\n            log.error( \"An error occurred saving a TrackedEntityComment\", e );\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        log.error(\"An error occurred saving a TrackedEntityComment\", e);\n          \n          \n            \n                        log.error( \"An error occurred saving a TrackedEntityComment\", e );", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            log<span class=\"pl-k\">.</span>error(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>An error occurred saving a TrackedEntityComment<span class=\"pl-pds\">\"</span></span>, e);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            log<span class=\"pl-k\">.</span>error(<span class=\"x x-first x-last\"> </span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>An error occurred saving a TrackedEntityComment<span class=\"pl-pds\">\"</span></span>, e<span class=\"x x-first x-last\"> </span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "stian-sandvold", "createdAt": "2020-07-28T15:07:54Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java", "diffHunk": "@@ -1289,32 +1420,335 @@ private String getOrderQuery( EventSearchParams params )\n \n     private String getAttributeValueQuery()\n     {\n-        String sql = \"select pav.trackedentityinstanceid as pav_id, pav.created as pav_created, pav.lastupdated as pav_lastupdated, \"\n+        return \"select pav.trackedentityinstanceid as pav_id, pav.created as pav_created, pav.lastupdated as pav_lastupdated, \"\n             + \"pav.value as pav_value, ta.uid as ta_uid, ta.name as ta_name, ta.valuetype as ta_valuetype \"\n             + \"from trackedentityattributevalue pav \"\n             + \"inner join trackedentityattribute ta on pav.trackedentityattributeid=ta.trackedentityattributeid \";\n-\n-        return sql;\n     }\n \n     private boolean isSuper( User user )\n     {\n         return user == null || user.isSuper();\n     }\n \n+    /**\n+     * Saves a list of {@see ProgramStageInstance} using JDBC batch update.\n+     *\n+     * Note that this method is using JdbcTemplate to execute the batch operation,\n+     * therefore it's able to participate in any Spring-initiated transaction\n+     *\n+     * @param batch the list of {@see ProgramStageInstance}\n+     * @return the list of created {@see ProgramStageInstance} with primary keys\n+     *         assigned\n+     *\n+     */\n+    private List<ProgramStageInstance> saveAllEvents( List<ProgramStageInstance> batch )\n+    {\n+        JdbcUtils.batchUpdateWithKeyHolder( jdbcTemplate, INSERT_EVENT_SQL,\n+                new BatchPreparedStatementSetterWithKeyHolder<ProgramStageInstance>( batch )\n+            {\n+                @Override\n+                protected void setValues( PreparedStatement ps, ProgramStageInstance event )\n+                {\n+                    try\n+                    {\n+                        bindEventParamsForInsert( ps, event );\n+                    }\n+                    catch ( JsonProcessingException | SQLException e )\n+                    {\n+                        log.warn( \"PSI failed to persist and will be ignored. PSI UID: \" + event.getUid(),\n+                            event.getUid(), e );\n+                    }\n+                }\n+\n+                @Override\n+                protected void setPrimaryKey( Map<String, Object> primaryKey, ProgramStageInstance event )\n+                {\n+                    event.setId( (Long) primaryKey.get( \"programstageinstanceid\" ) );\n+                }\n+\n+                } );\n+\n+        /*\n+         * Extract the primary keys from the created objects\n+         */\n+        List<Long> eventIds = batch.stream().map( BaseIdentifiableObject::getId ).collect( Collectors.toList() );\n+\n+        /*\n+         * Assign the generated event PKs to the batch.\n+         *\n+         * If the generate event PKs size doesn't match the batch size, one or more PSI\n+         * were not persisted. Run an additional query to fetch the persisted PSI and\n+         * return only the PSI from the batch which are persisted.\n+         *\n+         */\n+        if ( eventIds.size() != batch.size() )\n+        {\n+            /* a Map where [key] -> PSI UID , [value] -> PSI ID */\n+            Map<String, Long> persisted = jdbcTemplate\n+                    .queryForList(\n+                            \"SELECT uid, programstageinstanceid from programstageinstance where programstageinstanceid in ( \"\n+                                    + Joiner.on( \";\" ).join( eventIds ) + \")\" )\n+                    .stream().collect(\n+                            Collectors.toMap( s -> (String) s.get( \"uid\" ), s -> (Long) s.get( \"programstageinstanceid\" ) ) );\n+\n+            // @formatter:off\n+            return batch.stream()\n+                    .filter( psi -> persisted.containsKey( psi.getUid() ) )\n+                    .peek( psi -> psi.setId( persisted.get( psi.getUid() ) ) )\n+                    .collect( Collectors.toList() );\n+            // @formatter:on\n+        }\n+        else\n+        {\n+            for ( int i = 0; i < eventIds.size(); i++ )\n+            {\n+                batch.get( i ).setId( eventIds.get( i ) );\n+            }\n+            return batch;\n+        }\n+    }\n+\n+    /**\n+     * Save all the comments ({@see TrackedEntityComment} for the list of\n+     * {@see ProgramStageInstance}\n+     * \n+     * @param batch a List of {@see ProgramStageInstance}\n+     */\n+    private void saveAllComments( List<ProgramStageInstance> batch )\n+    {\n+        try\n+        {\n+            for ( ProgramStageInstance psi : batch )\n+            {\n+                int sortOrder = 1;\n+                if ( psi.getId() > 0 )\n+                {\n+                    // if the PSI is already in the db, fetch the latest sort order for the\n+                    // notes, to avoid conflicts\n+                    sortOrder = jdbcTemplate.queryForObject(\n+                        \"select coalesce(max(sort_order) + 1, 1) from programstageinstancecomments where programstageinstanceid = \"\n+                            + psi.getId(),\n+                        Integer.class );\n+                }\n+                List<TrackedEntityComment> comments = psi.getComments();\n+\n+                for ( TrackedEntityComment comment : comments )\n+                {\n+                    if ( !StringUtils.isEmpty( comment.getCommentText() ) )\n+                    {\n+                        Long commentId = saveComment( comment );\n+                        if ( commentId != null && commentId != 0 )\n+                        {\n+                            saveCommentToEvent( psi.getId(), commentId, sortOrder );\n+                            sortOrder++;\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+        catch ( DataAccessException dae )\n+        {\n+            log.error( \"An error occurred saving a Program Stage Instance comment\", dae );\n+            throw dae;\n+        }\n+    }\n+\n+    private Long saveComment( TrackedEntityComment comment )\n+    {\n+        KeyHolder keyHolder = new GeneratedKeyHolder();\n+\n+        try\n+        {\n+            jdbcTemplate.update( connection -> {\n+                PreparedStatement ps = connection.prepareStatement( INSERT_EVENT_NOTE_SQL, new String[]{\"trackedentitycommentid\"} );\n+\n+                ps.setString( 1, comment.getUid() );\n+                ps.setString( 2, comment.getCommentText() );\n+                ps.setTimestamp( 3, toTimestamp( comment.getCreated() ) );\n+                ps.setString( 4, comment.getCreator() );\n+                ps.setTimestamp( 5, toTimestamp( comment.getLastUpdated() ) );\n+\n+                return ps;\n+            }, keyHolder );\n+        }\n+        catch ( DataAccessException e )\n+        {\n+            log.error(\"An error occurred saving a TrackedEntityComment\", e);", "originalCommit": "dc20b8a9249359bcdd1f612b1852f728ef63b7ab", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d0687a6c7c9e1c4dd64c4dc669bb80ae6e8c8c8b", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\nindex 3ed951650f..02c03a24ca 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\n", "chunk": "@@ -1574,7 +1655,7 @@ public class JdbcEventStore implements EventStore\n         }\n         catch ( DataAccessException e )\n         {\n-            log.error(\"An error occurred saving a TrackedEntityComment\", e);\n+            log.error( \"An error occurred saving a TrackedEntityComment\", e );\n             return null;\n         }\n \n", "next_change": {"commit": "d360652a896bee650a842567e26cd1e62145cccb", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\nindex 02c03a24ca..578900e939 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\n", "chunk": "@@ -1655,7 +1520,7 @@ public class JdbcEventStore implements EventStore\n         }\n         catch ( DataAccessException e )\n         {\n-            log.error( \"An error occurred saving a TrackedEntityComment\", e );\n+            log.error(\"An error occurred saving a TrackedEntityComment\", e);\n             return null;\n         }\n \n", "next_change": {"commit": "230950833d8ba48a7339783c3b5a0260f02cb7ff", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\nindex 578900e939..74bb547837 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\n", "chunk": "@@ -1520,7 +1566,7 @@ public class JdbcEventStore implements EventStore\n         }\n         catch ( DataAccessException e )\n         {\n-            log.error(\"An error occurred saving a TrackedEntityComment\", e);\n+            log.error( \"An error occurred saving a TrackedEntityComment\", e );\n             return null;\n         }\n \n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\nindex 3ed951650f..572fa793bd 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\n", "chunk": "@@ -1574,7 +1640,7 @@ public class JdbcEventStore implements EventStore\n         }\n         catch ( DataAccessException e )\n         {\n-            log.error(\"An error occurred saving a TrackedEntityComment\", e);\n+            log.error( \"An error occurred saving a TrackedEntityComment\", e );\n             return null;\n         }\n \n", "next_change": {"commit": "1775146057dbef2da11c4e554b339f150f2f4857", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\nindex 572fa793bd..c7d476c8ab 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\n", "chunk": "@@ -1575,102 +1561,6 @@ public class JdbcEventStore implements EventStore\n         }\n     }\n \n-    /**\n-     * Save all the comments ({@see TrackedEntityComment} for the list of\n-     * {@see ProgramStageInstance}\n-     * \n-     * @param batch a List of {@see ProgramStageInstance}\n-     */\n-    private void saveAllComments( List<ProgramStageInstance> batch )\n-    {\n-        try\n-        {\n-            for ( ProgramStageInstance psi : batch )\n-            {\n-                int sortOrder = 1;\n-                if ( psi.getId() > 0 )\n-                {\n-                    // if the PSI is already in the db, fetch the latest sort order for the\n-                    // notes, to avoid conflicts\n-                    sortOrder = jdbcTemplate.queryForObject(\n-                        \"select coalesce(max(sort_order) + 1, 1) from programstageinstancecomments where programstageinstanceid = \"\n-                            + psi.getId(),\n-                        Integer.class );\n-                }\n-                List<TrackedEntityComment> comments = psi.getComments();\n-\n-                for ( TrackedEntityComment comment : comments )\n-                {\n-                    if ( !StringUtils.isEmpty( comment.getCommentText() ) )\n-                    {\n-                        Long commentId = saveComment( comment );\n-                        if ( commentId != null && commentId != 0 )\n-                        {\n-                            saveCommentToEvent( psi.getId(), commentId, sortOrder );\n-                            sortOrder++;\n-                        }\n-                    }\n-                }\n-            }\n-        }\n-        catch ( DataAccessException dae )\n-        {\n-            log.error( \"An error occurred saving a Program Stage Instance comment\", dae );\n-            throw dae;\n-        }\n-    }\n-\n-    private Long saveComment( TrackedEntityComment comment )\n-    {\n-        KeyHolder keyHolder = new GeneratedKeyHolder();\n-\n-        try\n-        {\n-            jdbcTemplate.update( connection -> {\n-                PreparedStatement ps = connection.prepareStatement( INSERT_EVENT_NOTE_SQL, new String[]{\"trackedentitycommentid\"} );\n-\n-                ps.setString( 1, comment.getUid() );\n-                ps.setString( 2, comment.getCommentText() );\n-                ps.setTimestamp( 3, toTimestamp( comment.getCreated() ) );\n-                ps.setString( 4, comment.getCreator() );\n-                ps.setTimestamp( 5, toTimestamp( comment.getLastUpdated() ) );\n-\n-                return ps;\n-            }, keyHolder );\n-        }\n-        catch ( DataAccessException e )\n-        {\n-            log.error( \"An error occurred saving a TrackedEntityComment\", e );\n-            return null;\n-        }\n-\n-        return (long) keyHolder.getKey();\n-    }\n-\n-    private void saveCommentToEvent( Long programStageInstanceId, Long commentId, int sortOrder )\n-    {\n-        try\n-        {\n-            jdbcTemplate.update( connection -> {\n-                PreparedStatement ps = connection.prepareStatement( INSERT_EVENT_COMMENT_LINK );\n-\n-                ps.setLong( 1, programStageInstanceId );\n-                ps.setInt( 2, sortOrder );\n-                ps.setLong( 3, commentId );\n-\n-                return ps;\n-            } );\n-        }\n-        catch ( DataAccessException e )\n-        {\n-            log.error(\n-                \"An error occurred saving a link between a TrackedEntityComment and a ProgramStageInstance with primary key: \"\n-                    + programStageInstanceId,\n-                e );\n-            throw e;\n-        }\n-    }\n-\n     public void updateTrackedEntityInstances( List<String> teiUids, User user )\n     {\n         if ( teiUids.isEmpty() )\n", "next_change": {"commit": "e4ff88027eb8dd823a539ef0ed82daeff5072e7c", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\nindex c7d476c8ab..9180a10555 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\n", "chunk": "@@ -1569,38 +1560,26 @@ public class JdbcEventStore implements EventStore\n         }\n         try\n         {\n-            List<String> updatableTeiUid = new ArrayList<>();\n-            for ( String uid : teiUids )\n-            {\n-                if ( !teiUpdateCache.containsKey( uid ) )\n-                {\n-                    updatableTeiUid.add( uid );\n-                    teiUpdateCache.put( uid, uid );\n-                }\n-            }\n-            \n-\n-            if ( !updatableTeiUid.isEmpty() )\n-            {\n-                final String result = updatableTeiUid.stream()\n+            final String result = teiUids.stream()\n+                    .sorted() // make sure the list is sorted, to prevent deadlocks\n                     .map( s -> \"'\" + s + \"'\" )\n                     .collect( Collectors.joining( \", \" ) );\n \n-                jdbcTemplate.execute( getUpdateTeiSql(), (PreparedStatementCallback<Boolean>) psc -> {\n-                    psc.setString( 1, result );\n-                    psc.setTimestamp( 2, JdbcEventSupport.toTimestamp( new Date() ) );\n-                    if ( user != null )\n-                    {\n-                        psc.setLong( 3, user.getId() );\n-                    }\n-                    else\n-                    {\n-                        psc.setNull( 3, Types.INTEGER );\n-                    }\n-                    psc.setString( 4, result );\n-                    return psc.execute();\n-                } );\n-            }\n+            jdbcTemplate.execute( getUpdateTeiSql(), (PreparedStatementCallback<Boolean>) psc -> {\n+                psc.setString( 1, result );\n+                psc.setTimestamp( 2, JdbcEventSupport.toTimestamp( new Date() ) );\n+                if ( user != null )\n+                {\n+                    psc.setLong( 3, user.getId() );\n+                }\n+                else\n+                {\n+                    psc.setNull( 3, Types.INTEGER );\n+                }\n+                psc.setString( 4, result );\n+                return psc.execute();\n+            } );\n+\n         }\n         catch ( DataAccessException e )\n         {\n", "next_change": {"commit": "e9aa95cda06ed418fa24c389b38cde8afe364c2f", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\nindex 9180a10555..726e2afaa7 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\n", "chunk": "@@ -1552,34 +1653,27 @@ public class JdbcEventStore implements EventStore\n         }\n     }\n \n+    @Override\n     public void updateTrackedEntityInstances( List<String> teiUids, User user )\n     {\n-        if ( teiUids.isEmpty() )\n-        {\n-            return;\n-        }\n+        Optional.ofNullable( teiUids ).filter( s -> !s.isEmpty() )\n+            .ifPresent( teis -> updateTrackedEntityInstances( teis.stream()\n+                .sorted() // make sure the list is sorted, to prevent\n+                          // deadlocks\n+                .map( s -> \"'\" + s + \"'\" )\n+                .collect( Collectors.joining( \", \" ) ), user ) );\n+    }\n+\n+    private void updateTrackedEntityInstances( String teisInCondition, User user )\n+    {\n         try\n         {\n-            final String result = teiUids.stream()\n-                    .sorted() // make sure the list is sorted, to prevent deadlocks\n-                    .map( s -> \"'\" + s + \"'\" )\n-                    .collect( Collectors.joining( \", \" ) );\n+            Timestamp timestamp = new Timestamp( System.currentTimeMillis() );\n \n-            jdbcTemplate.execute( getUpdateTeiSql(), (PreparedStatementCallback<Boolean>) psc -> {\n-                psc.setString( 1, result );\n-                psc.setTimestamp( 2, JdbcEventSupport.toTimestamp( new Date() ) );\n-                if ( user != null )\n-                {\n-                    psc.setLong( 3, user.getId() );\n-                }\n-                else\n-                {\n-                    psc.setNull( 3, Types.INTEGER );\n-                }\n-                psc.setString( 4, result );\n-                return psc.execute();\n-            } );\n+            String sql = String.format( UPDATE_TEI_SQL, teisInCondition, getSkipLocked(), \"'\" + timestamp + \"'\",\n+                user != null ? user.getId() : NULL, teisInCondition );\n \n+            jdbcTemplate.execute( sql );\n         }\n         catch ( DataAccessException e )\n         {\n", "next_change": {"commit": "0ea45addae148641a66270e104d43d70b59dde05", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\nindex 726e2afaa7..7d00d44583 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\n", "chunk": "@@ -1670,7 +1708,8 @@ public class JdbcEventStore implements EventStore\n         {\n             Timestamp timestamp = new Timestamp( System.currentTimeMillis() );\n \n-            String sql = String.format( UPDATE_TEI_SQL, teisInCondition, getSkipLocked(), \"'\" + timestamp + \"'\",\n+            String sql = String.format( UPDATE_TEI_SQL, teisInCondition, skipLockedProvider.getSkipLocked(),\n+                \"'\" + timestamp + \"'\",\n                 user != null ? user.getId() : NULL, teisInCondition );\n \n             jdbcTemplate.execute( sql );\n", "next_change": {"commit": "ae6806774b896dcc69a99687ce331d60d40995c7", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\nindex 7d00d44583..55758ba58d 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\n", "chunk": "@@ -1694,31 +1711,23 @@ public class JdbcEventStore implements EventStore\n     @Override\n     public void updateTrackedEntityInstances( List<String> teiUids, User user )\n     {\n-        Optional.ofNullable( teiUids ).filter( s -> !s.isEmpty() )\n-            .ifPresent( teis -> updateTrackedEntityInstances( teis.stream()\n-                .sorted() // make sure the list is sorted, to prevent\n-                          // deadlocks\n-                .map( s -> \"'\" + s + \"'\" )\n-                .collect( Collectors.joining( \", \" ) ), user ) );\n-    }\n-\n-    private void updateTrackedEntityInstances( String teisInCondition, User user )\n-    {\n-        try\n+        if ( teiUids.isEmpty() )\n         {\n-            Timestamp timestamp = new Timestamp( System.currentTimeMillis() );\n+            return;\n+        }\n \n-            String sql = String.format( UPDATE_TEI_SQL, teisInCondition, skipLockedProvider.getSkipLocked(),\n-                \"'\" + timestamp + \"'\",\n-                user != null ? user.getId() : NULL, teisInCondition );\n+        String sql = UPDATE_TEI_SQL;\n \n-            jdbcTemplate.execute( sql );\n-        }\n-        catch ( DataAccessException e )\n+        if ( skipLockedProvider.getSkipLocked().isEmpty() )\n         {\n-            log.error( \"An error occurred updating one or more Tracked Entity Instances\", e );\n-            throw e;\n+            sql = sql.replace( \"SKIP LOCKED\", \"\" );\n         }\n+\n+        jdbcTemplate.execute( sql, new MapSqlParameterSource()\n+            .addValue( \"teiUids\", teiUids )\n+            .addValue( \"lastUpdated\", new Timestamp( System.currentTimeMillis() ) )\n+            .addValue( \"lastUpdatedBy\", (user != null ? user.getId() : null) ),\n+            PreparedStatement::execute );\n     }\n \n     private void bindEventParamsForInsert( PreparedStatement ps, ProgramStageInstance event )\n", "next_change": {"commit": "959c60d4f597187d0df2160fbbb675e5c4196e5c", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\nindex 55758ba58d..dac16b0e5a 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\n", "chunk": "@@ -1730,7 +2061,7 @@ public class JdbcEventStore implements EventStore\n             PreparedStatement::execute );\n     }\n \n-    private void bindEventParamsForInsert( PreparedStatement ps, ProgramStageInstance event )\n+    private void bindEventParamsForInsert( PreparedStatement ps, Event event )\n         throws SQLException,\n         JsonProcessingException\n     {\n", "next_change": {"commit": "41e75ba362e65a726c88564679a43aadcebbc60a", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\nindex dac16b0e5a..741a5a6150 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\n", "chunk": "@@ -2066,7 +2066,7 @@ public class JdbcEventStore implements EventStore\n         JsonProcessingException\n     {\n         // @formatter:off\n-        ps.setLong(         1, event.getProgramInstance().getId() );\n+        ps.setLong(         1, event.getEnrollment().getId() );\n         ps.setLong(         2, event.getProgramStage().getId() );\n         ps.setTimestamp(    3, JdbcEventSupport.toTimestamp( event.getDueDate() ) );\n         ps.setTimestamp(    4, JdbcEventSupport.toTimestamp( event.getExecutionDate() ) );\n", "next_change": null}]}}]}}]}}, {"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\nindex 726e2afaa7..7d00d44583 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\n", "chunk": "@@ -1682,18 +1721,6 @@ public class JdbcEventStore implements EventStore\n         }\n     }\n \n-    /**\n-     * Awful hack required for the H2-based tests to pass. H2 does not support\n-     * the \"SKIP LOCKED\" clause, therefore we need to remove it from the SQL\n-     * statement when executing the H2 tests.\n-     *\n-     * @return a SQL String containing Skip Locked statement\n-     */\n-    private String getSkipLocked()\n-    {\n-        return SystemUtils.isTestRun( env.getActiveProfiles() ) ? \"\" : \"SKIP LOCKED\";\n-    }\n-\n     private void bindEventParamsForInsert( PreparedStatement ps, ProgramStageInstance event )\n         throws SQLException,\n         JsonProcessingException\n", "next_change": {"commit": "ae6806774b896dcc69a99687ce331d60d40995c7", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\nindex 7d00d44583..55758ba58d 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\n", "chunk": "@@ -1694,31 +1711,23 @@ public class JdbcEventStore implements EventStore\n     @Override\n     public void updateTrackedEntityInstances( List<String> teiUids, User user )\n     {\n-        Optional.ofNullable( teiUids ).filter( s -> !s.isEmpty() )\n-            .ifPresent( teis -> updateTrackedEntityInstances( teis.stream()\n-                .sorted() // make sure the list is sorted, to prevent\n-                          // deadlocks\n-                .map( s -> \"'\" + s + \"'\" )\n-                .collect( Collectors.joining( \", \" ) ), user ) );\n-    }\n-\n-    private void updateTrackedEntityInstances( String teisInCondition, User user )\n-    {\n-        try\n+        if ( teiUids.isEmpty() )\n         {\n-            Timestamp timestamp = new Timestamp( System.currentTimeMillis() );\n+            return;\n+        }\n \n-            String sql = String.format( UPDATE_TEI_SQL, teisInCondition, skipLockedProvider.getSkipLocked(),\n-                \"'\" + timestamp + \"'\",\n-                user != null ? user.getId() : NULL, teisInCondition );\n+        String sql = UPDATE_TEI_SQL;\n \n-            jdbcTemplate.execute( sql );\n-        }\n-        catch ( DataAccessException e )\n+        if ( skipLockedProvider.getSkipLocked().isEmpty() )\n         {\n-            log.error( \"An error occurred updating one or more Tracked Entity Instances\", e );\n-            throw e;\n+            sql = sql.replace( \"SKIP LOCKED\", \"\" );\n         }\n+\n+        jdbcTemplate.execute( sql, new MapSqlParameterSource()\n+            .addValue( \"teiUids\", teiUids )\n+            .addValue( \"lastUpdated\", new Timestamp( System.currentTimeMillis() ) )\n+            .addValue( \"lastUpdatedBy\", (user != null ? user.getId() : null) ),\n+            PreparedStatement::execute );\n     }\n \n     private void bindEventParamsForInsert( PreparedStatement ps, ProgramStageInstance event )\n", "next_change": {"commit": "959c60d4f597187d0df2160fbbb675e5c4196e5c", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\nindex 55758ba58d..dac16b0e5a 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\n", "chunk": "@@ -1730,7 +2061,7 @@ public class JdbcEventStore implements EventStore\n             PreparedStatement::execute );\n     }\n \n-    private void bindEventParamsForInsert( PreparedStatement ps, ProgramStageInstance event )\n+    private void bindEventParamsForInsert( PreparedStatement ps, Event event )\n         throws SQLException,\n         JsonProcessingException\n     {\n", "next_change": {"commit": "41e75ba362e65a726c88564679a43aadcebbc60a", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\nindex dac16b0e5a..741a5a6150 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\n", "chunk": "@@ -2066,7 +2066,7 @@ public class JdbcEventStore implements EventStore\n         JsonProcessingException\n     {\n         // @formatter:off\n-        ps.setLong(         1, event.getProgramInstance().getId() );\n+        ps.setLong(         1, event.getEnrollment().getId() );\n         ps.setLong(         2, event.getProgramStage().getId() );\n         ps.setTimestamp(    3, JdbcEventSupport.toTimestamp( event.getDueDate() ) );\n         ps.setTimestamp(    4, JdbcEventSupport.toTimestamp( event.getExecutionDate() ) );\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "message": "Merge commit", "committedDate": null}, {"oid": "1775146057dbef2da11c4e554b339f150f2f4857", "committedDate": "2020-09-09 08:34:03 +0200", "message": "perf: [DHIS-9415] avoid querying programstageinstancecomments if not necessary (#6103)"}, {"oid": "0d35843121f0ad3004fad015f1520c5b06a5c337", "committedDate": "2020-09-15 09:24:33 +0200", "message": "Merge 2.35 into master (#6149)"}, {"oid": "e4ff88027eb8dd823a539ef0ed82daeff5072e7c", "committedDate": "2020-09-18 16:43:42 +0200", "message": "fix: prevent db deadlock during Event update (#6135)"}, {"oid": "1bd8ee38126fbac22f805db44dad0cdcba7b14a6", "committedDate": "2020-09-23 11:30:37 +0200", "message": "fix: allow updating an Event with File data type [DHIS2-9559]"}, {"oid": "52b8f7c48def44670be7ba9d25d0ee963fe9441e", "committedDate": "2020-09-24 09:19:03 +0200", "message": "fix: Coordinate class removed, drop support for old implementation (#6172)"}, {"oid": "13cd21d76507450be96b06e13823b24cf357be04", "committedDate": "2020-10-30 09:38:34 +0100", "message": "feat: DHIS2-8911 adding LastUpdatedBy and CreatedBy user informations in events (#6521)"}, {"oid": "bcb4654eefc1d66ff614d1784219e7055a3671cc", "committedDate": "2020-10-30 11:24:12 +0100", "message": "fix: DHIS2-8911 corrected wrong column names (#6530)"}, {"oid": "08574f966f50a4667668edb4077cfd9e21bd9e10", "committedDate": "2020-11-11 13:59:04 +0100", "message": "fix: DHIS-7937 quotes in filter values depend on filter type when rendering sql string (#6604)"}, {"oid": "d34f05e1348f3dff54ced7059283a96a7b699ea4", "committedDate": "2020-11-16 18:21:11 +0100", "message": "feat: DHIS2-9835 user info in comments and notes for Events and Enrollments (#6587)"}, {"oid": "fbc5d6d0e07ba8180e933a63c670d58528cb700c", "committedDate": "2020-11-20 16:22:59 +0700", "message": "fix: Cant delete events (#6729)"}, {"oid": "5e4669b4c89c809989ea600900735dd71baa86e2", "committedDate": "2020-12-23 14:00:18 +0700", "message": "feat: Upgrade Hibernate  (#6939)"}, {"oid": "f00a1e4b7f23c356987cadfdc8a8407e1a098f52", "committedDate": "2021-01-11 07:26:55 +0100", "message": "fix: Check category option sharing settings (#7009)"}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "55164c30457d73850a5233869ab0119d31fcac9b", "committedDate": "2021-01-28 14:14:25 +0100", "message": "fix: sharing query issue in JdbcEventStore (#7151)"}, {"oid": "5d1a415fef305ea3cc18a3c2fadceb208403006a", "committedDate": "2021-01-29 09:30:08 +0100", "message": "refactor: Controllers params [DHIS2-10202] (#7201)"}, {"oid": "10b11c17ef2f2964263efc051f96c8e8f8f7e1f4", "committedDate": "2021-02-02 12:33:59 +0100", "message": "feat: change user property name to createdBy (#7061)"}, {"oid": "b46e880a82e0e0d03e1f7a940630771907d4317a", "committedDate": "2021-05-26 15:57:37 +0200", "message": "chore: Replace usage of duplicated method (#8077)"}, {"oid": "41338b95cf44f70b44834c3515933a677114dd84", "committedDate": "2021-05-28 13:54:35 +0200", "message": "fix: skipPaging properly considered (#8087)"}, {"oid": "15a1ce87df3a6aecbb40ceca8c1aeb9ef9a35290", "committedDate": "2021-06-08 15:46:02 +0200", "message": "perf: Remove program lookup in event query loop [DHIS2-11264] (#8149)"}, {"oid": "002abc97ad43829b6a7b59d2611a165106b666c2", "committedDate": "2021-06-28 11:39:16 +0200", "message": "fix: Do not hard delete events in importer [DHIS2-11375] (#8309)"}, {"oid": "6bdec842fbd0ccf97729ec29b96202365a4e832d", "committedDate": "2021-07-28 10:10:25 +0200", "message": "fix: Add enrollment filter for event exporter [DHIS2-11226] (#8441)"}, {"oid": "8ee3bc02e7758714d4865fb84c65dcd53f4820b1", "committedDate": "2021-09-22 13:34:18 +0200", "message": "fix: Event collection endpoint does not fetch relationships [DHIS2-11541] (#8540)"}, {"oid": "e9aa95cda06ed418fa24c389b38cde8afe364c2f", "committedDate": "2021-09-27 10:03:35 +0200", "message": "fix: teis lastupdated update (#8808)"}, {"oid": "9d05d585562bf9d269ffed02307ec59694795cfc", "committedDate": "2021-10-07 10:34:05 +0200", "message": "fix: Fix by reducing number of SQL queries for event collection (#8955)"}, {"oid": "5e4b90d1aaa2f3b0264b411b0a8d1bf0e860202a", "committedDate": "2021-10-14 12:31:47 +0200", "message": "refactor: jdbc event store replaced some strings with constants/enums [TECH-463] (#9041)"}, {"oid": "f2249116faa6cfd647106204ba0f09457811e3dd", "committedDate": "2021-10-18 19:14:22 +0200", "message": "chore: Move lambdas initializations into static blocks [TECH-774] (#9074)"}, {"oid": "0ea45addae148641a66270e104d43d70b59dde05", "committedDate": "2021-10-26 09:45:39 +0200", "message": "refactor: Remove check test profile in runtime code [TECH-699] (#9110)"}, {"oid": "9b7ebd47b923d1f52b53a4a724b5b1ab3d2f1c8d", "committedDate": "2021-10-29 11:25:49 +0200", "message": "Merge pull request from GHSA-cmpc-frjv-rrmw"}, {"oid": "d466cd4761340382d8214d3eca7c7616569b903e", "committedDate": "2021-10-29 17:45:42 +0200", "message": "fix: breaking unit test (#9150)"}, {"oid": "8a62c3e0240b711a75ca821921bae684b82fff5f", "committedDate": "2021-11-30 12:46:53 +0100", "message": "perf: Use ou.path for ouMode event queries (#9337)"}, {"oid": "cc35b66a078649936fc2bd7de77cfc2f718c1e32", "committedDate": "2021-12-07 16:40:31 +0100", "message": "fix: Apply TEI ownership in event query (#9367)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "da4ef9091eadf20324ce10342073e9e8031391af", "committedDate": "2022-01-26 10:33:44 +0100", "message": "fix: Include mentioned ou for ouMode=CHILDREN"}, {"oid": "93b61e49f94920cf3adfe3fd83ad8f0c060afbb1", "committedDate": "2022-02-14 09:59:56 +0100", "message": "fix: Request param totalPages=false for events/enrollments [DHIS2-12530] (#9719)"}, {"oid": "bd3f8dacffeb333843a99f3e659d9f19dae7a977", "committedDate": "2022-02-17 12:08:13 +0100", "message": "fix: Show uid instead of id in events [DHIS2-12648] (#9836)"}, {"oid": "8ccf9a288a67e5ee5349024fd3d281372c64c956", "committedDate": "2022-02-22 13:25:35 +0800", "message": "feat: Merge User/UserCredentials into one DB table (#9754)"}, {"oid": "869fa986d53abcf6fc503e46e3b25e1b876e6c3d", "committedDate": "2022-03-01 13:31:17 +0100", "message": "feat: Add single data value endpoint with JSON body [DHIS2-12689] (#9886)"}, {"oid": "d117ff9ce355694569f7c6477141cf35c6412609", "committedDate": "2022-03-04 11:13:40 +0100", "message": "fix: Return complete information for user fields in NTI [DHIS2-12717] (#9936)"}, {"oid": "dc31b5e0ec776f00b915e47a08abe1e54b8e3d29", "committedDate": "2022-04-19 15:49:20 +0200", "message": "fix: Handle NPE for null organsationUnits in event programs sync job [DHIS2-12762] (2.39) (#10525)"}, {"oid": "d99da048b6427aa16b080ab0a0e25eda4a2a0f96", "committedDate": "2022-05-09 13:53:18 +0200", "message": "feat: Refactor getCurrentUser() to return DHIS2 User object 2 (#10600)"}, {"oid": "83890d87919436906d00955e19e5925f7355ca51", "committedDate": "2022-05-11 21:00:19 +0200", "message": "fix: Fix SQL queries for deleted relationships [DHIS2-11320] (#10758)"}, {"oid": "ae6806774b896dcc69a99687ce331d60d40995c7", "committedDate": "2022-06-02 09:20:44 +0200", "message": "chore: Refactor JdbcTemplate to NamedParameterJdbcTemplate (#10767)"}, {"oid": "3ffbead58842052c66f26af10a103386f5cb16d0", "committedDate": "2022-06-14 12:05:49 +0200", "message": "fix: Include enrollment followup in eventrow return (#11070)"}, {"oid": "2c0aa62cc8f940e7629f081284bb01dac8c9faee", "committedDate": "2022-06-21 19:38:49 +0200", "message": "feat: Add filters to TEDV audit endpoint [DHIS2-13421] (#11125)"}, {"oid": "19962f46788d3430652c3124e01d1f16f17803ff", "committedDate": "2022-07-05 11:59:15 +0200", "message": "fix: Refactor Event SQL to use named parameters - Simple bindings [ DHIS2-13306 ] (#11205)"}, {"oid": "5ea8cffe77c593325973769e83dbe505441a5cf3", "committedDate": "2022-07-26 13:19:15 +0200", "message": "fix: Performance optimisation when fetching events from Event Programs [ DHIS2-13443 ]  (#11271)"}, {"oid": "9135ce719d6db71435c61fcd4d7144e013e77622", "committedDate": "2022-08-02 15:16:29 +0200", "message": "Feat: Refactor Event SQL to use named parameters - Complex bindings [ Dhis2-13455 ] (#11322)"}, {"oid": "04654efa7ba2d741ddbf1a6f0cf63fedcd01eb3f", "committedDate": "2022-08-29 21:50:26 +0200", "message": "fix: get tei id, date types, update tests (#11541)"}, {"oid": "eb0e2a4e8d608ef19aac980cf3c5ed4e3b859fb9", "committedDate": "2022-09-06 10:29:19 +0200", "message": "fix: Refactor Event SQL to use named parameters - Events grid - [ DHIS2-13508 ] (#11545)"}, {"oid": "36ee597adc705b106a64c243ea603e85234dbb4f", "committedDate": "2022-09-07 07:40:39 +0200", "message": "feat: filter /tracker/events by enrollmentEnrolledAfter DHIS2-13648 (#11651)"}, {"oid": "4f11b0c48c8c354a79249d95d963a996c4128643", "committedDate": "2022-09-07 09:20:40 +0200", "message": "feat: filter /tracker/events by enrollmentEnrolledBefore (#11672)"}, {"oid": "66df00d85fce2b865439d8a0fc9c701fca88ece0", "committedDate": "2022-09-07 10:11:34 +0200", "message": "feat: filter /tracker/events by enrollmentOccurredBefore/After (#11675)"}, {"oid": "5a6ad83ad236b6b721794c52b51da456e9b8453d", "committedDate": "2022-09-09 08:08:07 +0200", "message": "feat: filter /tracker/events by filterAttributes DHIS2-13648 (#11683)"}, {"oid": "501c22e088de3d40a75a2a771a64efc6998cb880", "committedDate": "2022-09-12 12:07:12 +0200", "message": "feat: Add ordering on tei attributes for events [DHIS2-13648] (#11724)"}, {"oid": "531ca62258142b6e88d3c96b1123315adce393da", "committedDate": "2022-09-13 11:59:53 +0200", "message": "feat: Add ordering attribute column in select [DHIS2-13648] (#11750)"}, {"oid": "b29fd87d6c8d63a8293d6600bdec633f7ddf2953", "committedDate": "2022-09-16 11:09:48 +0200", "message": "feat: Clean up JdbcEventStore class [DHIS2-13648] (#11796)"}, {"oid": "1ae607c63e5683bae651721208891d65e9612ee8", "committedDate": "2022-09-22 11:19:32 +0200", "message": "Merge pull request from GHSA-7pwm-6rh2-2388"}, {"oid": "d7afc27b3b1e7159e8e0aab4f2bcb58f9b1167d0", "committedDate": "2022-09-22 15:56:33 +0200", "message": "fix: move deco access to case in select (#11822)"}, {"oid": "3c815e2474da1b1ca7312543e96c882b49d465be", "committedDate": "2022-09-26 11:20:25 +0200", "message": "fix: Ensure filter valueType is applied in event query (#11715)"}, {"oid": "79a4e480b97e856c20eb616144d4851738d674b6", "committedDate": "2022-09-28 13:31:31 +0200", "message": "fix: Ensure actual event orgunit is returned [DHIS2-13656] (#11755)"}, {"oid": "b22196b76551e33179af112ccdfb7d64c5a46c67", "committedDate": "2022-09-28 13:59:05 +0200", "message": "fix: Filter can have multiple value [DHIS2-13676] (#11921)"}, {"oid": "d797ac751aa993bf8a9bf6bb446abf12982aac29", "committedDate": "2022-10-17 13:40:26 +0200", "message": "fix: potential NPEs found by nullness analysis [TECH-1460] (#12113)"}, {"oid": "7a4160ba9c1550a536807361acfa086f722413a0", "committedDate": "2022-11-21 14:38:43 +0100", "message": "fix: Match psi.ouId and ou.ouId to fetch psi.ouName [DHIS2-13656] (#12377)"}, {"oid": "27b75665be58c25de309b5d71e7bd86200d740d6", "committedDate": "2022-12-01 11:37:48 +0100", "message": "chore: use AssignedUserQueryParam in EventSearchParams (#12446)"}, {"oid": "9556d7a326e0bb6b64d9d223e8c511906ef7c564", "committedDate": "2022-12-21 10:35:40 +0100", "message": "fix: Ensure actual event orgunit is returned [DHIS2-13656] (#12518)"}, {"oid": "e586cd4742efa92258f64d23c8b324575de8c514", "committedDate": "2023-02-14 10:55:00 +0100", "message": "fix: Check if dueDate param is null [DHIS2-14736] (#13007)"}, {"oid": "b11da68ecf40901364ee28ad72e5c5dae3afff1f", "committedDate": "2023-02-23 08:16:53 +0100", "message": "fix: Add due date filter in sql generation [DHIS2-14497] (#13070)"}, {"oid": "a95012113446cf64430ab009cf37f5ad1fadc77e", "committedDate": "2023-03-02 15:36:17 +0100", "message": "fix: Respect events sort order [DHIS2-13735] (#13123)"}, {"oid": "4e17bd8e9b1f4b1331349dcdf116d7308ee6c243", "committedDate": "2023-03-14 14:03:31 +0000", "message": "fix: event pageSize is not respected with more than 1 category DHIS2-13135 (#13253)"}, {"oid": "d1975e80aa90b5ae63c68e5fc0c8b874cdf6d2da", "committedDate": "2023-03-20 10:36:05 +0100", "message": "chore: remove unused code (#13370)"}, {"oid": "43bd8664d854c226422c6b88b2c2bdf403fa240c", "committedDate": "2023-03-21 08:55:59 +0100", "message": "refactor: Simplify event orgunit sql query [TECH-1478] (#12897)"}, {"oid": "5764c79d20ac77259e14685730771c0748bf8407", "committedDate": "2023-03-24 12:43:39 +0100", "message": "fix: createdAtClient for events can be written only on inserts, never on updates [DHIS2-14991] (#13407)"}, {"oid": "fa4d70204237377c93cb232c49c188568ba95ebe", "committedDate": "2023-04-05 15:46:43 +0200", "message": "chore: use interface methods for method refs (#13535)"}, {"oid": "959c60d4f597187d0df2160fbbb675e5c4196e5c", "committedDate": "2023-04-27 16:46:18 +0200", "message": "chore: rename ProgramStageInstance to Event (#13731)"}, {"oid": "41e75ba362e65a726c88564679a43aadcebbc60a", "committedDate": "2023-05-03 07:50:28 +0200", "message": "chore: rename Event.programInstance to Event.enrollment (#13774)"}, {"oid": "240be973a3083b3e4b04ada02733f1908bb73512", "committedDate": "2023-05-08 08:39:16 +0000", "message": "chore: rename TrackedEntityInstance to TrackedEntity (#13827)"}, {"oid": "02336c9611c0dd85d5038223bddbfdebc0aae526", "committedDate": "2023-05-11 19:34:26 +0200", "message": "chore: move old tracker dxf2 code into deprecated package (#13901)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY1ODc3MA==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r461658770", "body": "```suggestion\r\n        when( workContext.getTrackedEntityInstance( event.getUid() ) ).thenReturn( Optional.of( tei ) );\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    when( workContext.getTrackedEntityInstance( event.getUid() ) ).thenReturn( Optional.of(tei) );\n          \n          \n            \n                    when( workContext.getTrackedEntityInstance( event.getUid() ) ).thenReturn( Optional.of( tei ) );", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        when( workContext<span class=\"pl-k\">.</span>getTrackedEntityInstance( event<span class=\"pl-k\">.</span>getUid() ) )<span class=\"pl-k\">.</span>thenReturn( <span class=\"pl-smi\">Optional</span><span class=\"pl-k\">.</span>of(tei) );</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        when( workContext<span class=\"pl-k\">.</span>getTrackedEntityInstance( event<span class=\"pl-k\">.</span>getUid() ) )<span class=\"pl-k\">.</span>thenReturn( <span class=\"pl-smi\">Optional</span><span class=\"pl-k\">.</span>of(<span class=\"x x-first x-last\"> </span>tei<span class=\"x x-first x-last\"> </span>) );</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "stian-sandvold", "createdAt": "2020-07-28T15:09:49Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/shared/validation/ProgramInstanceCheckTest.java", "diffHunk": "@@ -0,0 +1,175 @@\n+package org.hisp.dhis.dxf2.events.importer.shared.validation;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import static org.hisp.dhis.DhisConvenienceTest.createOrganisationUnit;\n+import static org.hisp.dhis.DhisConvenienceTest.createProgram;\n+import static org.hisp.dhis.DhisConvenienceTest.createTrackedEntityInstance;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.hisp.dhis.dxf2.events.importer.shared.ImmutableEvent;\n+import org.hisp.dhis.dxf2.events.importer.validation.BaseValidationTest;\n+import org.hisp.dhis.dxf2.importsummary.ImportSummary;\n+import org.hisp.dhis.program.Program;\n+import org.hisp.dhis.program.ProgramInstance;\n+import org.hisp.dhis.program.ProgramStatus;\n+import org.hisp.dhis.program.ProgramType;\n+import org.hisp.dhis.trackedentity.TrackedEntityInstance;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import com.google.common.collect.Lists;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+public class ProgramInstanceCheckTest extends BaseValidationTest\n+{\n+    private ProgramInstanceCheck rule;\n+\n+    private Program program;\n+\n+    @Before\n+    public void setUp()\n+    {\n+        rule = new ProgramInstanceCheck();\n+\n+        //\n+        // Program\n+        //\n+        program = createProgram( 'P' );\n+        Map<String, Program> programMap = new HashMap<>();\n+        programMap.put( program.getUid(), program );\n+\n+        when( workContext.getProgramsMap() ).thenReturn( programMap );\n+\n+    }\n+\n+    @Test\n+    public void failOnNoProgramInstanceByActiveProgramAndTei()\n+    {\n+        // Data preparation\n+\n+        //\n+        // Program Instance\n+        //\n+        when( workContext.getProgramInstanceMap() ).thenReturn( new HashMap<>() );\n+\n+        //\n+        // Tracked Entity Instance\n+        //\n+        TrackedEntityInstance tei = createTrackedEntityInstance( createOrganisationUnit( 'A' ) );\n+        when( workContext.getTrackedEntityInstance( event.getUid() ) ).thenReturn( Optional.of(tei) );", "originalCommit": "dc20b8a9249359bcdd1f612b1852f728ef63b7ab", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d0687a6c7c9e1c4dd64c4dc669bb80ae6e8c8c8b", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/shared/validation/ProgramInstanceCheckTest.java b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/shared/validation/ProgramInstanceCheckTest.java\nindex 3c53d0a513..4ad4bea023 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/shared/validation/ProgramInstanceCheckTest.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/shared/validation/ProgramInstanceCheckTest.java\n", "chunk": "@@ -90,7 +89,7 @@ public class ProgramInstanceCheckTest extends BaseValidationTest\n         // Tracked Entity Instance\n         //\n         TrackedEntityInstance tei = createTrackedEntityInstance( createOrganisationUnit( 'A' ) );\n-        when( workContext.getTrackedEntityInstance( event.getUid() ) ).thenReturn( Optional.of(tei) );\n+        when( workContext.getTrackedEntityInstance( event.getUid() ) ).thenReturn( Optional.of( tei ) );\n \n         event.setProgram( program.getUid() );\n \n", "next_change": {"commit": "d360652a896bee650a842567e26cd1e62145cccb", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/shared/validation/ProgramInstanceCheckTest.java b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/shared/validation/ProgramInstanceCheckTest.java\nindex 4ad4bea023..3c53d0a513 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/shared/validation/ProgramInstanceCheckTest.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/shared/validation/ProgramInstanceCheckTest.java\n", "chunk": "@@ -89,7 +90,7 @@ public class ProgramInstanceCheckTest extends BaseValidationTest\n         // Tracked Entity Instance\n         //\n         TrackedEntityInstance tei = createTrackedEntityInstance( createOrganisationUnit( 'A' ) );\n-        when( workContext.getTrackedEntityInstance( event.getUid() ) ).thenReturn( Optional.of( tei ) );\n+        when( workContext.getTrackedEntityInstance( event.getUid() ) ).thenReturn( Optional.of(tei) );\n \n         event.setProgram( program.getUid() );\n \n", "next_change": {"commit": "c4fc1c843d33376b40e8f076b9b9d98ea19dc14d", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/shared/validation/ProgramInstanceCheckTest.java b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/shared/validation/ProgramInstanceCheckTest.java\nindex 3c53d0a513..899ab88f52 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/shared/validation/ProgramInstanceCheckTest.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/shared/validation/ProgramInstanceCheckTest.java\n", "chunk": "@@ -90,7 +90,7 @@ public class ProgramInstanceCheckTest extends BaseValidationTest\n         // Tracked Entity Instance\n         //\n         TrackedEntityInstance tei = createTrackedEntityInstance( createOrganisationUnit( 'A' ) );\n-        when( workContext.getTrackedEntityInstance( event.getUid() ) ).thenReturn( Optional.of(tei) );\n+        when( workContext.getTrackedEntityInstance( event.getUid() ) ).thenReturn( Optional.of( tei ) );\n \n         event.setProgram( program.getUid() );\n \n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/shared/validation/ProgramInstanceCheckTest.java b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/shared/validation/ProgramInstanceCheckTest.java\nindex 3c53d0a513..4ad4bea023 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/shared/validation/ProgramInstanceCheckTest.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/shared/validation/ProgramInstanceCheckTest.java\n", "chunk": "@@ -90,7 +89,7 @@ public class ProgramInstanceCheckTest extends BaseValidationTest\n         // Tracked Entity Instance\n         //\n         TrackedEntityInstance tei = createTrackedEntityInstance( createOrganisationUnit( 'A' ) );\n-        when( workContext.getTrackedEntityInstance( event.getUid() ) ).thenReturn( Optional.of(tei) );\n+        when( workContext.getTrackedEntityInstance( event.getUid() ) ).thenReturn( Optional.of( tei ) );\n \n         event.setProgram( program.getUid() );\n \n", "next_change": {"commit": "22d5da9d9a812b02eb5acd643112a6b050b5d63c", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/shared/validation/ProgramInstanceCheckTest.java b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/shared/validation/ProgramInstanceCheckTest.java\nindex 4ad4bea023..10334e26b0 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/shared/validation/ProgramInstanceCheckTest.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/shared/validation/ProgramInstanceCheckTest.java\n", "chunk": "@@ -46,53 +45,51 @@ import org.hisp.dhis.program.ProgramInstance;\n import org.hisp.dhis.program.ProgramStatus;\n import org.hisp.dhis.program.ProgramType;\n import org.hisp.dhis.trackedentity.TrackedEntityInstance;\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.junit.jupiter.MockitoSettings;\n+import org.mockito.quality.Strictness;\n \n import com.google.common.collect.Lists;\n \n /**\n  * @author Luciano Fiandesio\n  */\n-public class ProgramInstanceCheckTest extends BaseValidationTest\n+@MockitoSettings( strictness = Strictness.LENIENT )\n+class ProgramInstanceCheckTest extends BaseValidationTest\n {\n+\n     private ProgramInstanceCheck rule;\n \n     private Program program;\n \n-    @Before\n-    public void setUp()\n+    @BeforeEach\n+    void setUp()\n     {\n         rule = new ProgramInstanceCheck();\n-\n         //\n         // Program\n         //\n         program = createProgram( 'P' );\n         Map<String, Program> programMap = new HashMap<>();\n         programMap.put( program.getUid(), program );\n-\n         when( workContext.getProgramsMap() ).thenReturn( programMap );\n     }\n \n     @Test\n-    public void failOnNoProgramInstanceByActiveProgramAndTei()\n+    void failOnNoProgramInstanceByActiveProgramAndTei()\n     {\n         // Data preparation\n-\n         //\n         // Program Instance\n         //\n         when( workContext.getProgramInstanceMap() ).thenReturn( new HashMap<>() );\n-\n         //\n         // Tracked Entity Instance\n         //\n         TrackedEntityInstance tei = createTrackedEntityInstance( createOrganisationUnit( 'A' ) );\n         when( workContext.getTrackedEntityInstance( event.getUid() ) ).thenReturn( Optional.of( tei ) );\n-\n         event.setProgram( program.getUid() );\n-\n         //\n         // Method under test\n         //\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "message": "Merge commit", "committedDate": null}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "22d5da9d9a812b02eb5acd643112a6b050b5d63c", "committedDate": "2021-12-16 13:19:38 +0100", "message": "chore: migrate tests to JUnit 5 (#9467)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "e4f8abdfdb132f536835b3be17a3391da2089823", "committedDate": "2023-05-03 11:31:41 +0000", "message": "chore: Rename ProgramInstance to Enrollment [TECH-1547] (#13794)"}, {"oid": "e03cf3818e639ba738dd01f658423914dcd7bfba", "committedDate": "2023-05-04 09:24:50 +0200", "message": "chore: Rename ProgramInstanceStore to EnrollmentStore [TECH-1547] (#13808)"}, {"oid": "ba38c7fa19a269450161eb73bad6b80b1ef1133b", "committedDate": "2023-05-04 11:23:39 +0200", "message": "chore: Rename most ProgramInstance classes to Enrollment [TECH-1547] (#13811)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY1OTAyNg==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r461659026", "body": "```suggestion\r\n        when( workContext.getTrackedEntityInstance( event.getUid() ) ).thenReturn( Optional.of( tei ) );\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    when( workContext.getTrackedEntityInstance( event.getUid() ) ).thenReturn( Optional.of(tei) );\n          \n          \n            \n                    when( workContext.getTrackedEntityInstance( event.getUid() ) ).thenReturn( Optional.of( tei ) );", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        when( workContext<span class=\"pl-k\">.</span>getTrackedEntityInstance( event<span class=\"pl-k\">.</span>getUid() ) )<span class=\"pl-k\">.</span>thenReturn( <span class=\"pl-smi\">Optional</span><span class=\"pl-k\">.</span>of(tei) );</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        when( workContext<span class=\"pl-k\">.</span>getTrackedEntityInstance( event<span class=\"pl-k\">.</span>getUid() ) )<span class=\"pl-k\">.</span>thenReturn( <span class=\"pl-smi\">Optional</span><span class=\"pl-k\">.</span>of(<span class=\"x x-first x-last\"> </span>tei<span class=\"x x-first x-last\"> </span>) );</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "stian-sandvold", "createdAt": "2020-07-28T15:10:11Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/shared/validation/ProgramInstanceCheckTest.java", "diffHunk": "@@ -0,0 +1,175 @@\n+package org.hisp.dhis.dxf2.events.importer.shared.validation;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import static org.hisp.dhis.DhisConvenienceTest.createOrganisationUnit;\n+import static org.hisp.dhis.DhisConvenienceTest.createProgram;\n+import static org.hisp.dhis.DhisConvenienceTest.createTrackedEntityInstance;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.hisp.dhis.dxf2.events.importer.shared.ImmutableEvent;\n+import org.hisp.dhis.dxf2.events.importer.validation.BaseValidationTest;\n+import org.hisp.dhis.dxf2.importsummary.ImportSummary;\n+import org.hisp.dhis.program.Program;\n+import org.hisp.dhis.program.ProgramInstance;\n+import org.hisp.dhis.program.ProgramStatus;\n+import org.hisp.dhis.program.ProgramType;\n+import org.hisp.dhis.trackedentity.TrackedEntityInstance;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import com.google.common.collect.Lists;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+public class ProgramInstanceCheckTest extends BaseValidationTest\n+{\n+    private ProgramInstanceCheck rule;\n+\n+    private Program program;\n+\n+    @Before\n+    public void setUp()\n+    {\n+        rule = new ProgramInstanceCheck();\n+\n+        //\n+        // Program\n+        //\n+        program = createProgram( 'P' );\n+        Map<String, Program> programMap = new HashMap<>();\n+        programMap.put( program.getUid(), program );\n+\n+        when( workContext.getProgramsMap() ).thenReturn( programMap );\n+\n+    }\n+\n+    @Test\n+    public void failOnNoProgramInstanceByActiveProgramAndTei()\n+    {\n+        // Data preparation\n+\n+        //\n+        // Program Instance\n+        //\n+        when( workContext.getProgramInstanceMap() ).thenReturn( new HashMap<>() );\n+\n+        //\n+        // Tracked Entity Instance\n+        //\n+        TrackedEntityInstance tei = createTrackedEntityInstance( createOrganisationUnit( 'A' ) );\n+        when( workContext.getTrackedEntityInstance( event.getUid() ) ).thenReturn( Optional.of(tei) );\n+\n+        event.setProgram( program.getUid() );\n+\n+        //\n+        // Method under test\n+        //\n+        ImportSummary summary = rule.check( new ImmutableEvent( event ), workContext );\n+        assertHasError( summary, event,\n+            \"Tracked entity instance: \" + tei.getUid() + \" is not enrolled in program: \" + program.getUid() );\n+    }\n+\n+    @Test\n+    public void failOnMultipleProgramInstanceByActiveProgramAndTei()\n+    {\n+        // Data preparation\n+\n+        //\n+        // Program Instance\n+        //\n+        when( workContext.getProgramInstanceMap() ).thenReturn( new HashMap<>() );\n+\n+        //\n+        // Tracked Entity Instance\n+        //\n+        TrackedEntityInstance tei = createTrackedEntityInstance( createOrganisationUnit( 'A' ) );\n+        when( workContext.getTrackedEntityInstance( event.getUid() ) ).thenReturn( Optional.of(tei) );", "originalCommit": "dc20b8a9249359bcdd1f612b1852f728ef63b7ab", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d0687a6c7c9e1c4dd64c4dc669bb80ae6e8c8c8b", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/shared/validation/ProgramInstanceCheckTest.java b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/shared/validation/ProgramInstanceCheckTest.java\nindex 3c53d0a513..4ad4bea023 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/shared/validation/ProgramInstanceCheckTest.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/shared/validation/ProgramInstanceCheckTest.java\n", "chunk": "@@ -116,7 +115,7 @@ public class ProgramInstanceCheckTest extends BaseValidationTest\n         // Tracked Entity Instance\n         //\n         TrackedEntityInstance tei = createTrackedEntityInstance( createOrganisationUnit( 'A' ) );\n-        when( workContext.getTrackedEntityInstance( event.getUid() ) ).thenReturn( Optional.of(tei) );\n+        when( workContext.getTrackedEntityInstance( event.getUid() ) ).thenReturn( Optional.of( tei ) );\n \n         ProgramInstance programInstance1 = new ProgramInstance();\n         ProgramInstance programInstance2 = new ProgramInstance();\n", "next_change": {"commit": "d360652a896bee650a842567e26cd1e62145cccb", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/shared/validation/ProgramInstanceCheckTest.java b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/shared/validation/ProgramInstanceCheckTest.java\nindex 4ad4bea023..3c53d0a513 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/shared/validation/ProgramInstanceCheckTest.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/shared/validation/ProgramInstanceCheckTest.java\n", "chunk": "@@ -115,7 +116,7 @@ public class ProgramInstanceCheckTest extends BaseValidationTest\n         // Tracked Entity Instance\n         //\n         TrackedEntityInstance tei = createTrackedEntityInstance( createOrganisationUnit( 'A' ) );\n-        when( workContext.getTrackedEntityInstance( event.getUid() ) ).thenReturn( Optional.of( tei ) );\n+        when( workContext.getTrackedEntityInstance( event.getUid() ) ).thenReturn( Optional.of(tei) );\n \n         ProgramInstance programInstance1 = new ProgramInstance();\n         ProgramInstance programInstance2 = new ProgramInstance();\n", "next_change": {"commit": "1e3bc2a1293c9720dda2329b78be93a83b97859a", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/shared/validation/ProgramInstanceCheckTest.java b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/shared/validation/ProgramInstanceCheckTest.java\nindex 3c53d0a513..eb2cf59fd4 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/shared/validation/ProgramInstanceCheckTest.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/shared/validation/ProgramInstanceCheckTest.java\n", "chunk": "@@ -116,7 +116,7 @@ public class ProgramInstanceCheckTest extends BaseValidationTest\n         // Tracked Entity Instance\n         //\n         TrackedEntityInstance tei = createTrackedEntityInstance( createOrganisationUnit( 'A' ) );\n-        when( workContext.getTrackedEntityInstance( event.getUid() ) ).thenReturn( Optional.of(tei) );\n+        when( workContext.getTrackedEntityInstance( event.getUid() ) ).thenReturn( Optional.of( tei ) );\n \n         ProgramInstance programInstance1 = new ProgramInstance();\n         ProgramInstance programInstance2 = new ProgramInstance();\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/shared/validation/ProgramInstanceCheckTest.java b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/shared/validation/ProgramInstanceCheckTest.java\nindex 3c53d0a513..4ad4bea023 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/shared/validation/ProgramInstanceCheckTest.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/shared/validation/ProgramInstanceCheckTest.java\n", "chunk": "@@ -116,7 +115,7 @@ public class ProgramInstanceCheckTest extends BaseValidationTest\n         // Tracked Entity Instance\n         //\n         TrackedEntityInstance tei = createTrackedEntityInstance( createOrganisationUnit( 'A' ) );\n-        when( workContext.getTrackedEntityInstance( event.getUid() ) ).thenReturn( Optional.of(tei) );\n+        when( workContext.getTrackedEntityInstance( event.getUid() ) ).thenReturn( Optional.of( tei ) );\n \n         ProgramInstance programInstance1 = new ProgramInstance();\n         ProgramInstance programInstance2 = new ProgramInstance();\n", "next_change": {"commit": "22d5da9d9a812b02eb5acd643112a6b050b5d63c", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/shared/validation/ProgramInstanceCheckTest.java b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/shared/validation/ProgramInstanceCheckTest.java\nindex 4ad4bea023..10334e26b0 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/shared/validation/ProgramInstanceCheckTest.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/shared/validation/ProgramInstanceCheckTest.java\n", "chunk": "@@ -102,53 +99,44 @@ public class ProgramInstanceCheckTest extends BaseValidationTest\n     }\n \n     @Test\n-    public void failOnMultipleProgramInstanceByActiveProgramAndTei()\n+    void failOnMultipleProgramInstanceByActiveProgramAndTei()\n     {\n         // Data preparation\n-\n         //\n         // Program Instance\n         //\n         when( workContext.getProgramInstanceMap() ).thenReturn( new HashMap<>() );\n-\n         //\n         // Tracked Entity Instance\n         //\n         TrackedEntityInstance tei = createTrackedEntityInstance( createOrganisationUnit( 'A' ) );\n         when( workContext.getTrackedEntityInstance( event.getUid() ) ).thenReturn( Optional.of( tei ) );\n-\n         ProgramInstance programInstance1 = new ProgramInstance();\n         ProgramInstance programInstance2 = new ProgramInstance();\n         when( this.programInstanceStore.get( tei, program, ProgramStatus.ACTIVE ) )\n             .thenReturn( Lists.newArrayList( programInstance1, programInstance2 ) );\n-\n         event.setProgram( program.getUid() );\n-\n         //\n         // Method under test\n         //\n         ImportSummary summary = rule.check( new ImmutableEvent( event ), workContext );\n-        assertHasError( summary, event,\n-            \"Tracked entity instance: \" + tei.getUid() + \" has multiple active enrollments in program: \" + program.getUid() );\n+        assertHasError( summary, event, \"Tracked entity instance: \" + tei.getUid()\n+            + \" has multiple active enrollments in program: \" + program.getUid() );\n     }\n \n     @Test\n-    public void failOnMultipleProgramInstance()\n+    void failOnMultipleProgramInstance()\n     {\n         // Data preparation\n-\n         Program programNoReg = createProgram( 'P' );\n         programNoReg.setProgramType( ProgramType.WITHOUT_REGISTRATION );\n         Map<String, Program> programMap = new HashMap<>();\n         programMap.put( programNoReg.getUid(), programNoReg );\n-\n         when( workContext.getProgramsMap() ).thenReturn( programMap );\n-\n         //\n         // Program Instance\n         //\n         when( workContext.getProgramInstanceMap() ).thenReturn( new HashMap<>() );\n-\n         //\n         // Tracked Entity Instance\n         //\n", "next_change": {"commit": "e4f8abdfdb132f536835b3be17a3391da2089823", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/shared/validation/ProgramInstanceCheckTest.java b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/shared/validation/ProgramInstanceCheckTest.java\nindex 10334e26b0..c2ff7be377 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/shared/validation/ProgramInstanceCheckTest.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/shared/validation/ProgramInstanceCheckTest.java\n", "chunk": "@@ -144,10 +144,10 @@ class ProgramInstanceCheckTest extends BaseValidationTest\n         Map<String, Pair<TrackedEntityInstance, Boolean>> teiMap = new HashMap<>();\n         teiMap.put( event.getUid(), Pair.of( tei, true ) );\n         when( workContext.getTrackedEntityInstanceMap() ).thenReturn( teiMap );\n-        ProgramInstance programInstance1 = new ProgramInstance();\n-        ProgramInstance programInstance2 = new ProgramInstance();\n+        Enrollment enrollment1 = new Enrollment();\n+        Enrollment enrollment2 = new Enrollment();\n         when( this.programInstanceStore.get( programNoReg, ProgramStatus.ACTIVE ) )\n-            .thenReturn( Lists.newArrayList( programInstance1, programInstance2 ) );\n+            .thenReturn( Lists.newArrayList( enrollment1, enrollment2 ) );\n         event.setProgram( programNoReg.getUid() );\n         //\n         // Method under test\n", "next_change": {"commit": "e03cf3818e639ba738dd01f658423914dcd7bfba", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/shared/validation/ProgramInstanceCheckTest.java b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/shared/validation/ProgramInstanceCheckTest.java\nindex c2ff7be377..bc18889187 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/shared/validation/ProgramInstanceCheckTest.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/shared/validation/ProgramInstanceCheckTest.java\n", "chunk": "@@ -146,7 +146,7 @@ class ProgramInstanceCheckTest extends BaseValidationTest\n         when( workContext.getTrackedEntityInstanceMap() ).thenReturn( teiMap );\n         Enrollment enrollment1 = new Enrollment();\n         Enrollment enrollment2 = new Enrollment();\n-        when( this.programInstanceStore.get( programNoReg, ProgramStatus.ACTIVE ) )\n+        when( this.enrollmentStore.get( programNoReg, ProgramStatus.ACTIVE ) )\n             .thenReturn( Lists.newArrayList( enrollment1, enrollment2 ) );\n         event.setProgram( programNoReg.getUid() );\n         //\n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "message": "Merge commit", "committedDate": null}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "22d5da9d9a812b02eb5acd643112a6b050b5d63c", "committedDate": "2021-12-16 13:19:38 +0100", "message": "chore: migrate tests to JUnit 5 (#9467)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "e4f8abdfdb132f536835b3be17a3391da2089823", "committedDate": "2023-05-03 11:31:41 +0000", "message": "chore: Rename ProgramInstance to Enrollment [TECH-1547] (#13794)"}, {"oid": "e03cf3818e639ba738dd01f658423914dcd7bfba", "committedDate": "2023-05-04 09:24:50 +0200", "message": "chore: Rename ProgramInstanceStore to EnrollmentStore [TECH-1547] (#13808)"}, {"oid": "ba38c7fa19a269450161eb73bad6b80b1ef1133b", "committedDate": "2023-05-04 11:23:39 +0200", "message": "chore: Rename most ProgramInstance classes to Enrollment [TECH-1547] (#13811)"}]}, {"oid": "ed0f770edd206b5c14381f2dd40965250be67604", "url": "https://github.com/dhis2/dhis2-core/commit/ed0f770edd206b5c14381f2dd40965250be67604", "message": "minor", "committedDate": "2020-08-19T10:17:58Z", "type": "forcePushed"}, {"oid": "d0687a6c7c9e1c4dd64c4dc669bb80ae6e8c8c8b", "url": "https://github.com/dhis2/dhis2-core/commit/d0687a6c7c9e1c4dd64c4dc669bb80ae6e8c8c8b", "message": "minor", "committedDate": "2020-08-20T13:07:44Z", "type": "forcePushed"}, {"oid": "d360652a896bee650a842567e26cd1e62145cccb", "url": "https://github.com/dhis2/dhis2-core/commit/d360652a896bee650a842567e26cd1e62145cccb", "message": "Merge branch 'master' of https://github.com/dhis2/dhis2-core into POST_EVENT_PERFORMANCE", "committedDate": "2020-08-24T07:25:02Z", "type": "commit"}, {"oid": "b29a3689068bb66746fb12bde65911fdcfe74a44", "url": "https://github.com/dhis2/dhis2-core/commit/b29a3689068bb66746fb12bde65911fdcfe74a44", "message": "fix: Addressing most critical Sonar issues", "committedDate": "2020-08-24T07:25:05Z", "type": "commit"}, {"oid": "f11afecb9fbfeca38614a5d8fce161251c1ce978", "url": "https://github.com/dhis2/dhis2-core/commit/f11afecb9fbfeca38614a5d8fce161251c1ce978", "message": "Merge branch 'POST_EVENT_PERFORMANCE' of https://github.com/dhis2/dhis2-core into POST_EVENT_PERFORMANCE", "committedDate": "2020-08-24T07:25:46Z", "type": "commit"}, {"oid": "36261241c249c98420e0a27230487b6d708c0988", "url": "https://github.com/dhis2/dhis2-core/commit/36261241c249c98420e0a27230487b6d708c0988", "message": "chore: fix Sonar issue", "committedDate": "2020-08-24T07:25:48Z", "type": "commit"}, {"oid": "e1e41fcceb231f4f04d3d6e172a57bda84f84a47", "url": "https://github.com/dhis2/dhis2-core/commit/e1e41fcceb231f4f04d3d6e172a57bda84f84a47", "message": "fix: failing integration tests", "committedDate": "2020-08-24T07:25:48Z", "type": "commit"}, {"oid": "2020b1193dc477750358ee3c14ab28a3c786a517", "url": "https://github.com/dhis2/dhis2-core/commit/2020b1193dc477750358ee3c14ab28a3c786a517", "message": "fix: add test, fix Sonar issues", "committedDate": "2020-08-24T07:25:49Z", "type": "commit"}, {"oid": "267b4550e5811b4093744dbd2aea8238914beaea", "url": "https://github.com/dhis2/dhis2-core/commit/267b4550e5811b4093744dbd2aea8238914beaea", "message": "chore: header fix", "committedDate": "2020-08-24T07:25:49Z", "type": "commit"}, {"oid": "bf042296956c38e5762dc2763da53fe23bc444a3", "url": "https://github.com/dhis2/dhis2-core/commit/bf042296956c38e5762dc2763da53fe23bc444a3", "message": "fix: Adding missing @author tags.", "committedDate": "2020-08-24T07:25:49Z", "type": "commit"}, {"oid": "c9cbe9cf8b22a49324c53b68eba31b9c63684df4", "url": "https://github.com/dhis2/dhis2-core/commit/c9cbe9cf8b22a49324c53b68eba31b9c63684df4", "message": "chore: addressed review comments", "committedDate": "2020-08-24T07:25:49Z", "type": "commit"}, {"oid": "5a67d8f44e44ad24c05546974dc5ddc6e3afee06", "url": "https://github.com/dhis2/dhis2-core/commit/5a67d8f44e44ad24c05546974dc5ddc6e3afee06", "message": "chore: addressed review comments", "committedDate": "2020-08-24T07:25:50Z", "type": "commit"}, {"oid": "2f23e3b49f087c42aaec77bfd3279ff45f813977", "url": "https://github.com/dhis2/dhis2-core/commit/2f23e3b49f087c42aaec77bfd3279ff45f813977", "message": "chore: addressed review comments", "committedDate": "2020-08-24T07:25:50Z", "type": "commit"}, {"oid": "17e4effbd84888b9241be64afaf8bf2300188dab", "url": "https://github.com/dhis2/dhis2-core/commit/17e4effbd84888b9241be64afaf8bf2300188dab", "message": "Fix code style", "committedDate": "2020-08-24T07:25:50Z", "type": "commit"}, {"oid": "53fe69844f9b0fa1dc808e576d47cde1750a2323", "url": "https://github.com/dhis2/dhis2-core/commit/53fe69844f9b0fa1dc808e576d47cde1750a2323", "message": "Merge branch 'POST_EVENT_PERFORMANCE' of github.com:dhis2/dhis2-core into POST_EVENT_PERFORMANCE", "committedDate": "2020-08-24T07:25:50Z", "type": "commit"}, {"oid": "3c8f41c735411594987ddc42bdca61aeb5ef235b", "url": "https://github.com/dhis2/dhis2-core/commit/3c8f41c735411594987ddc42bdca61aeb5ef235b", "message": "chore: addressed review comments", "committedDate": "2020-08-24T07:25:51Z", "type": "commit"}, {"oid": "68660788fe715d43383bc84512186e26eed2e2b2", "url": "https://github.com/dhis2/dhis2-core/commit/68660788fe715d43383bc84512186e26eed2e2b2", "message": "chore: addressed review comments", "committedDate": "2020-08-24T07:25:51Z", "type": "commit"}, {"oid": "53586c57f8aad6b4ad9a7ebd87bfd1c82363090f", "url": "https://github.com/dhis2/dhis2-core/commit/53586c57f8aad6b4ad9a7ebd87bfd1c82363090f", "message": "chore: removed unused var", "committedDate": "2020-08-24T07:25:51Z", "type": "commit"}, {"oid": "17570284d442dc97d1db84a6aa1af047bda1b106", "url": "https://github.com/dhis2/dhis2-core/commit/17570284d442dc97d1db84a6aa1af047bda1b106", "message": "chore: fix warnings with append in sql strings", "committedDate": "2020-08-24T07:32:03Z", "type": "commit"}, {"oid": "5a102a5c179d008a301b96f632b00b634b1300eb", "url": "https://github.com/dhis2/dhis2-core/commit/5a102a5c179d008a301b96f632b00b634b1300eb", "message": "Apply suggestions from code review\n\nCo-authored-by: Stian Sandvold <stian@dhis2.org>", "committedDate": "2020-08-24T07:32:05Z", "type": "commit"}, {"oid": "5692db3b36ce7f06b1050881c6be08745b2a62c1", "url": "https://github.com/dhis2/dhis2-core/commit/5692db3b36ce7f06b1050881c6be08745b2a62c1", "message": "Update dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/TrackedEntityInstanceCheck.java\n\nCo-authored-by: Stian Sandvold <stian@dhis2.org>", "committedDate": "2020-08-24T07:32:05Z", "type": "commit"}, {"oid": "749b65cd80e56af3c34ef203ba9a14130240148f", "url": "https://github.com/dhis2/dhis2-core/commit/749b65cd80e56af3c34ef203ba9a14130240148f", "message": "Update dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\n\nCo-authored-by: Stian Sandvold <stian@dhis2.org>", "committedDate": "2020-08-24T07:32:05Z", "type": "commit"}, {"oid": "7758f81c74f90581703a6fd01ecc0971903d7d4f", "url": "https://github.com/dhis2/dhis2-core/commit/7758f81c74f90581703a6fd01ecc0971903d7d4f", "message": "Update dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/WorkContextLoader.java\n\nCo-authored-by: Stian Sandvold <stian@dhis2.org>", "committedDate": "2020-08-24T07:32:06Z", "type": "commit"}, {"oid": "1e3bc2a1293c9720dda2329b78be93a83b97859a", "url": "https://github.com/dhis2/dhis2-core/commit/1e3bc2a1293c9720dda2329b78be93a83b97859a", "message": "Update dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/shared/validation/ProgramInstanceCheckTest.java\n\nCo-authored-by: Stian Sandvold <stian@dhis2.org>", "committedDate": "2020-08-24T07:32:06Z", "type": "commit"}, {"oid": "c4fc1c843d33376b40e8f076b9b9d98ea19dc14d", "url": "https://github.com/dhis2/dhis2-core/commit/c4fc1c843d33376b40e8f076b9b9d98ea19dc14d", "message": "Update dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/shared/validation/ProgramInstanceCheckTest.java\n\nCo-authored-by: Stian Sandvold <stian@dhis2.org>", "committedDate": "2020-08-24T07:32:06Z", "type": "commit"}, {"oid": "230950833d8ba48a7339783c3b5a0260f02cb7ff", "url": "https://github.com/dhis2/dhis2-core/commit/230950833d8ba48a7339783c3b5a0260f02cb7ff", "message": "Update dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\n\nCo-authored-by: Stian Sandvold <stian@dhis2.org>", "committedDate": "2020-08-24T07:32:06Z", "type": "commit"}, {"oid": "3e9ade20b53796ad8dfeb5a7880ff3f8bd8a206c", "url": "https://github.com/dhis2/dhis2-core/commit/3e9ade20b53796ad8dfeb5a7880ff3f8bd8a206c", "message": "Update dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\n\nCo-authored-by: Stian Sandvold <stian@dhis2.org>", "committedDate": "2020-08-24T07:32:07Z", "type": "commit"}, {"oid": "3e7dcacd8fdb4fa0b12001ac4a1f25bb3856cf36", "url": "https://github.com/dhis2/dhis2-core/commit/3e7dcacd8fdb4fa0b12001ac4a1f25bb3856cf36", "message": "Update dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\n\nCo-authored-by: Stian Sandvold <stian@dhis2.org>", "committedDate": "2020-08-24T07:32:07Z", "type": "commit"}, {"oid": "9b1334c65290249b47fcdb9da2fa28233b89c4c3", "url": "https://github.com/dhis2/dhis2-core/commit/9b1334c65290249b47fcdb9da2fa28233b89c4c3", "message": "Update dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\n\nCo-authored-by: Stian Sandvold <stian@dhis2.org>", "committedDate": "2020-08-24T07:32:07Z", "type": "commit"}, {"oid": "4cea02fc02a75b8d632b05e88e658ef6ead684d9", "url": "https://github.com/dhis2/dhis2-core/commit/4cea02fc02a75b8d632b05e88e658ef6ead684d9", "message": "Update dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\n\nCo-authored-by: Stian Sandvold <stian@dhis2.org>", "committedDate": "2020-08-24T07:32:07Z", "type": "commit"}, {"oid": "d35ce54afc25738b16d10df6a94d2d2af65f4fcb", "url": "https://github.com/dhis2/dhis2-core/commit/d35ce54afc25738b16d10df6a94d2d2af65f4fcb", "message": "Update dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\n\nCo-authored-by: Stian Sandvold <stian@dhis2.org>", "committedDate": "2020-08-24T07:32:07Z", "type": "commit"}, {"oid": "db6ca8d4f094185498ffe98477bc844733c3eb7f", "url": "https://github.com/dhis2/dhis2-core/commit/db6ca8d4f094185498ffe98477bc844733c3eb7f", "message": "Update dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\n\nCo-authored-by: Stian Sandvold <stian@dhis2.org>", "committedDate": "2020-08-24T07:32:08Z", "type": "commit"}, {"oid": "2d17da0606b0e9cb9cd45580513e0e2ed560daa2", "url": "https://github.com/dhis2/dhis2-core/commit/2d17da0606b0e9cb9cd45580513e0e2ed560daa2", "message": "Update dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/DataValueCheck.java\n\nCo-authored-by: Stian Sandvold <stian@dhis2.org>", "committedDate": "2020-08-24T07:32:08Z", "type": "commit"}, {"oid": "081840032b231dc76f4ed8610100c428b7200acb", "url": "https://github.com/dhis2/dhis2-core/commit/081840032b231dc76f4ed8610100c428b7200acb", "message": "Update dhis-2/dhis-support/dhis-support-jdbc/src/main/java/org/hisp/dhis/jdbc/JdbcUtils.java\n\nCo-authored-by: Stian Sandvold <stian@dhis2.org>", "committedDate": "2020-08-24T07:32:08Z", "type": "commit"}, {"oid": "6910e222ea71880240537b7ef0cb672865357a11", "url": "https://github.com/dhis2/dhis2-core/commit/6910e222ea71880240537b7ef0cb672865357a11", "message": "Update dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/ProgramStageInstanceSupplierTest.java\n\nCo-authored-by: Stian Sandvold <stian@dhis2.org>", "committedDate": "2020-08-24T07:32:08Z", "type": "commit"}, {"oid": "85c947b7cdb2c98af0c8d892a8fbc9f65784abe3", "url": "https://github.com/dhis2/dhis2-core/commit/85c947b7cdb2c98af0c8d892a8fbc9f65784abe3", "message": "Apply suggestions from code review\n\nCo-authored-by: Stian Sandvold <stian@dhis2.org>", "committedDate": "2020-08-24T07:32:08Z", "type": "commit"}, {"oid": "2bafb84a2b042590bfaf5f8178cc2794528b0658", "url": "https://github.com/dhis2/dhis2-core/commit/2bafb84a2b042590bfaf5f8178cc2794528b0658", "message": "chore: code review fixes", "committedDate": "2020-08-24T07:32:09Z", "type": "commit"}, {"oid": "81ece3dd068a96e3b1bfa459595a284c582b28b1", "url": "https://github.com/dhis2/dhis2-core/commit/81ece3dd068a96e3b1bfa459595a284c582b28b1", "message": "chore: added comment", "committedDate": "2020-08-24T07:32:09Z", "type": "commit"}, {"oid": "61739bb12327dfaf4c04d8b8dab6368098566d3f", "url": "https://github.com/dhis2/dhis2-core/commit/61739bb12327dfaf4c04d8b8dab6368098566d3f", "message": "chore: added javadoc", "committedDate": "2020-08-24T07:32:09Z", "type": "commit"}, {"oid": "357070723c603f36a09e54f12ef16a691834627e", "url": "https://github.com/dhis2/dhis2-core/commit/357070723c603f36a09e54f12ef16a691834627e", "message": "chore: optimized imports", "committedDate": "2020-08-24T07:32:09Z", "type": "commit"}, {"oid": "7af8a9a6f190108fb2498a31e07e8cd5f374bb8c", "url": "https://github.com/dhis2/dhis2-core/commit/7af8a9a6f190108fb2498a31e07e8cd5f374bb8c", "message": "fix conflicts after rebase", "committedDate": "2020-08-24T07:32:45Z", "type": "commit"}, {"oid": "1bff454091a0b7820b277e3b3f08acaf14835feb", "url": "https://github.com/dhis2/dhis2-core/commit/1bff454091a0b7820b277e3b3f08acaf14835feb", "message": "minor", "committedDate": "2020-08-24T07:32:46Z", "type": "commit"}, {"oid": "f26f06066d897eee88acf41776c44f213116dcb5", "url": "https://github.com/dhis2/dhis2-core/commit/f26f06066d897eee88acf41776c44f213116dcb5", "message": "minor", "committedDate": "2020-08-24T07:32:46Z", "type": "commit"}, {"oid": "79170da662cbd611e328f5e20097bd7b9dca7611", "url": "https://github.com/dhis2/dhis2-core/commit/79170da662cbd611e328f5e20097bd7b9dca7611", "message": "fix: fix unit tests by disabling program cache", "committedDate": "2020-08-24T07:32:47Z", "type": "commit"}, {"oid": "7232c5cfd8aba46bbc42c295f116e5628b41fbac", "url": "https://github.com/dhis2/dhis2-core/commit/7232c5cfd8aba46bbc42c295f116e5628b41fbac", "message": "minor", "committedDate": "2020-08-24T07:32:47Z", "type": "commit"}, {"oid": "b3043f6c9dd7c40b383fb1c036cdc15a86d33c22", "url": "https://github.com/dhis2/dhis2-core/commit/b3043f6c9dd7c40b383fb1c036cdc15a86d33c22", "message": "fix: sonar warnings", "committedDate": "2020-08-24T07:38:10Z", "type": "commit"}, {"oid": "9102e2ff75b790dcd8b2692d12f6417cb2d29d0b", "url": "https://github.com/dhis2/dhis2-core/commit/9102e2ff75b790dcd8b2692d12f6417cb2d29d0b", "message": "fix: more sonar warnings fixes + unit tests", "committedDate": "2020-08-24T07:38:13Z", "type": "commit"}, {"oid": "97c94bd4e175ca3e986bd4e45a118c5aa72ad614", "url": "https://github.com/dhis2/dhis2-core/commit/97c94bd4e175ca3e986bd4e45a118c5aa72ad614", "message": "fix: more sonar warnings fixes", "committedDate": "2020-08-24T07:38:13Z", "type": "commit"}, {"oid": "244482e44a59886429c975502b2ad68b05940a2b", "url": "https://github.com/dhis2/dhis2-core/commit/244482e44a59886429c975502b2ad68b05940a2b", "message": "minor", "committedDate": "2020-08-24T07:38:13Z", "type": "commit"}, {"oid": "50f6f1553f50a12b78143898b14b1a1f83e1b43a", "url": "https://github.com/dhis2/dhis2-core/commit/50f6f1553f50a12b78143898b14b1a1f83e1b43a", "message": "fix: expiry days validation check", "committedDate": "2020-08-24T07:38:13Z", "type": "commit"}, {"oid": "38e2abf929bdc38f908fd1f87103422bcc9e7525", "url": "https://github.com/dhis2/dhis2-core/commit/38e2abf929bdc38f908fd1f87103422bcc9e7525", "message": "fix: un-ignore unit tests ignored in 2017", "committedDate": "2020-08-24T07:38:13Z", "type": "commit"}, {"oid": "b69de01a81d257192bec0d7332426ad46941012b", "url": "https://github.com/dhis2/dhis2-core/commit/b69de01a81d257192bec0d7332426ad46941012b", "message": "fix: Data Value single value update correctly implemented", "committedDate": "2020-08-24T07:38:14Z", "type": "commit"}, {"oid": "6d5dfad4224e06b38ab2316f7204dc8c89b81d1b", "url": "https://github.com/dhis2/dhis2-core/commit/6d5dfad4224e06b38ab2316f7204dc8c89b81d1b", "message": "chore: removed unused interface methods", "committedDate": "2020-08-24T07:38:14Z", "type": "commit"}, {"oid": "573c2307cfe13c64d3194199c4703facd9f06652", "url": "https://github.com/dhis2/dhis2-core/commit/573c2307cfe13c64d3194199c4703facd9f06652", "message": "minor", "committedDate": "2020-08-24T07:38:14Z", "type": "commit"}, {"oid": "573c2307cfe13c64d3194199c4703facd9f06652", "url": "https://github.com/dhis2/dhis2-core/commit/573c2307cfe13c64d3194199c4703facd9f06652", "message": "minor", "committedDate": "2020-08-24T07:38:14Z", "type": "forcePushed"}, {"oid": "2ac1febce672b312940d3ad561852b0db90926fd", "url": "https://github.com/dhis2/dhis2-core/commit/2ac1febce672b312940d3ad561852b0db90926fd", "message": "use ImportSummary instead of Exception for event dates", "committedDate": "2020-08-24T10:50:27Z", "type": "commit"}, {"oid": "0afc06f20ca0da37d98942b17c007f28af21925a", "url": "https://github.com/dhis2/dhis2-core/commit/0afc06f20ca0da37d98942b17c007f28af21925a", "message": "fix: fixes to DataValue handling", "committedDate": "2020-08-25T07:00:39Z", "type": "commit"}, {"oid": "a61dc512c370d29aba9f030a57d4552899241579", "url": "https://github.com/dhis2/dhis2-core/commit/a61dc512c370d29aba9f030a57d4552899241579", "message": "chore: address sonarqube issue with complexity", "committedDate": "2020-08-25T10:17:57Z", "type": "commit"}, {"oid": "afcbc1901a4bffe63f58ba38aea907acece5a9f6", "url": "https://github.com/dhis2/dhis2-core/commit/afcbc1901a4bffe63f58ba38aea907acece5a9f6", "message": "minor", "committedDate": "2020-08-25T10:21:52Z", "type": "commit"}, {"oid": "77b55aa41a3d22e1861d32c509f042dd80f32bdc", "url": "https://github.com/dhis2/dhis2-core/commit/77b55aa41a3d22e1861d32c509f042dd80f32bdc", "message": "fix: load parent ous for programinstances", "committedDate": "2020-05-15T19:30:51Z", "type": "commit"}, {"oid": "bf9ea0ce0cc99b6630683cef9a8f99af13fc0f89", "url": "https://github.com/dhis2/dhis2-core/commit/bf9ea0ce0cc99b6630683cef9a8f99af13fc0f89", "message": "fix: fixed program instance query", "committedDate": "2020-05-18T10:46:31Z", "type": "commit"}, {"oid": "f46e74e21205d01f7523d9fa9135d459a8c68635", "url": "https://github.com/dhis2/dhis2-core/commit/f46e74e21205d01f7523d9fa9135d459a8c68635", "message": "fix: reverted test config", "committedDate": "2020-05-18T10:47:21Z", "type": "commit"}, {"oid": "08edc0d8c0495009c60cb9dc15ea751ad6127b80", "url": "https://github.com/dhis2/dhis2-core/commit/08edc0d8c0495009c60cb9dc15ea751ad6127b80", "message": "fix: check if program needs registration", "committedDate": "2020-05-18T11:48:47Z", "type": "commit"}, {"oid": "0dd3b541aa414143a75cbe5efc021ab783896bc9", "url": "https://github.com/dhis2/dhis2-core/commit/0dd3b541aa414143a75cbe5efc021ab783896bc9", "message": "fix: typo", "committedDate": "2020-05-18T12:54:58Z", "type": "commit"}, {"oid": "80a19c9cd77f7713f831cdbe9c723f142aadfeaf", "url": "https://github.com/dhis2/dhis2-core/commit/80a19c9cd77f7713f831cdbe9c723f142aadfeaf", "message": "fix: refactor insert to execute operation in batch and do a retry in case of failure", "committedDate": "2020-05-18T15:25:27Z", "type": "commit"}, {"oid": "a5a477f06faa4a4452fcee7e623d043935c3e3d4", "url": "https://github.com/dhis2/dhis2-core/commit/a5a477f06faa4a4452fcee7e623d043935c3e3d4", "message": "fix: Transaction isolation", "committedDate": "2020-05-18T15:32:28Z", "type": "commit"}, {"oid": "c86f9c56fea0298891848a07d79a58e925b1d5ac", "url": "https://github.com/dhis2/dhis2-core/commit/c86f9c56fea0298891848a07d79a58e925b1d5ac", "message": "Merge branch 'POST_EVENT_PERFORMANCE' of https://github.com/dhis2/dhis2-core into POST_EVENT_PERFORMANCE", "committedDate": "2020-05-18T15:32:32Z", "type": "commit"}, {"oid": "fdd125c357e70d48aea322fdda984cb572ec1c19", "url": "https://github.com/dhis2/dhis2-core/commit/fdd125c357e70d48aea322fdda984cb572ec1c19", "message": "fix: Adding summary totals for update/delete", "committedDate": "2020-05-18T16:31:24Z", "type": "commit"}, {"oid": "b2380b005632be3fed4be03fb2f54fe59b37830f", "url": "https://github.com/dhis2/dhis2-core/commit/b2380b005632be3fed4be03fb2f54fe59b37830f", "message": "fix: harmonized insert and update operations to use same batch/retry approach", "committedDate": "2020-05-18T19:30:51Z", "type": "commit"}, {"oid": "e83699c58abc8d3c2eeaf1f577c4627af01b472d", "url": "https://github.com/dhis2/dhis2-core/commit/e83699c58abc8d3c2eeaf1f577c4627af01b472d", "message": "fix: Add data value JSON serializer checking", "committedDate": "2020-05-19T09:57:28Z", "type": "commit"}, {"oid": "342e60c3416337bbbc22e464114c80a8070a036c", "url": "https://github.com/dhis2/dhis2-core/commit/342e60c3416337bbbc22e464114c80a8070a036c", "message": "Merge branch 'master' of https://github.com/dhis2/dhis2-core into POST_EVENT_PERFORMANCE", "committedDate": "2020-05-19T09:57:54Z", "type": "commit"}, {"oid": "125c8719b8bd06aefee9f762845923d25c1f4225", "url": "https://github.com/dhis2/dhis2-core/commit/125c8719b8bd06aefee9f762845923d25c1f4225", "message": "fix: initialize user to avoid issues during async processing", "committedDate": "2020-05-19T10:29:04Z", "type": "commit"}, {"oid": "4490e4fa2254f554ba096025b8b246e12ebc8b6b", "url": "https://github.com/dhis2/dhis2-core/commit/4490e4fa2254f554ba096025b8b246e12ebc8b6b", "message": "Merge branch 'POST_EVENT_PERFORMANCE' of https://github.com/dhis2/dhis2-core into POST_EVENT_PERFORMANCE\n\n* 'POST_EVENT_PERFORMANCE' of https://github.com/dhis2/dhis2-core:\n  fix: Add data value JSON serializer checking\n  fix: Ensure a weekly period does not come on two years (#5585)\n  fix: cant update attributeValue after change attribute name (#5494)\n  chore: Add javadoc and rename support methods (#5607)", "committedDate": "2020-05-19T10:39:11Z", "type": "commit"}, {"oid": "227ebc0d7eea92a7625341ad9f5028e125ae3afc", "url": "https://github.com/dhis2/dhis2-core/commit/227ebc0d7eea92a7625341ad9f5028e125ae3afc", "message": "fix: assignedUser should fetch user from userinfo!", "committedDate": "2020-05-19T12:34:04Z", "type": "commit"}, {"oid": "a6f5a4b867ed05b118f48c5dae45fc041d0ab631", "url": "https://github.com/dhis2/dhis2-core/commit/a6f5a4b867ed05b118f48c5dae45fc041d0ab631", "message": "fix: Failing program instance unit test", "committedDate": "2020-05-19T12:40:32Z", "type": "commit"}, {"oid": "929461b2b14f37ce89734acbe1686e4d155f5b95", "url": "https://github.com/dhis2/dhis2-core/commit/929461b2b14f37ce89734acbe1686e4d155f5b95", "message": "test(fix): use skipCache in use  assignment tests", "committedDate": "2020-05-19T13:21:42Z", "type": "commit"}, {"oid": "45fc8812fcc2569b5ff82d0ae325c7a69904d2fe", "url": "https://github.com/dhis2/dhis2-core/commit/45fc8812fcc2569b5ff82d0ae325c7a69904d2fe", "message": "- fix issue with event org unit and IdScheme different from UID\n- add unit test", "committedDate": "2020-05-20T09:55:58Z", "type": "commit"}, {"oid": "3e36097e712e91cea68891c5c90f854d264f2502", "url": "https://github.com/dhis2/dhis2-core/commit/3e36097e712e91cea68891c5c90f854d264f2502", "message": "Merge branch 'master' of https://github.com/dhis2/dhis2-core into POST_EVENT_PERFORMANCE", "committedDate": "2020-05-20T12:30:14Z", "type": "commit"}, {"oid": "71f26a6f872d7745d1d665730bf9395b611fe52b", "url": "https://github.com/dhis2/dhis2-core/commit/71f26a6f872d7745d1d665730bf9395b611fe52b", "message": "- Add unit test for Program Ou check\n- Moved validation tests to correct package", "committedDate": "2020-05-22T09:32:52Z", "type": "commit"}, {"oid": "b2d0dd60a8344a88bce8c853d115f2d97d02898d", "url": "https://github.com/dhis2/dhis2-core/commit/b2d0dd60a8344a88bce8c853d115f2d97d02898d", "message": "java doc", "committedDate": "2020-05-22T09:32:52Z", "type": "commit"}, {"oid": "5f962d848ae7e5f4a6e184ce08656bc44cd65a12", "url": "https://github.com/dhis2/dhis2-core/commit/5f962d848ae7e5f4a6e184ce08656bc44cd65a12", "message": "java doc", "committedDate": "2020-05-22T09:44:01Z", "type": "commit"}, {"oid": "085ca0d2a3303832d44dde3483f3edcd13f8af5e", "url": "https://github.com/dhis2/dhis2-core/commit/085ca0d2a3303832d44dde3483f3edcd13f8af5e", "message": "chore: improved program SQL query", "committedDate": "2020-05-22T09:54:32Z", "type": "commit"}, {"oid": "a32821dde969902bfeb801ea7722b89efeb99320", "url": "https://github.com/dhis2/dhis2-core/commit/a32821dde969902bfeb801ea7722b89efeb99320", "message": "data value validation wip", "committedDate": "2020-05-22T11:03:07Z", "type": "commit"}, {"oid": "0cde7e238c17d06f0fc8c0c3eb58074920561022", "url": "https://github.com/dhis2/dhis2-core/commit/0cde7e238c17d06f0fc8c0c3eb58074920561022", "message": "Merge branch 'master' of https://github.com/dhis2/dhis2-core into POST_EVENT_PERFORMANCE", "committedDate": "2020-05-25T07:02:53Z", "type": "commit"}, {"oid": "dc34f97b8e5c58c0a3390a1c8b17487d157daffe", "url": "https://github.com/dhis2/dhis2-core/commit/dc34f97b8e5c58c0a3390a1c8b17487d157daffe", "message": "Merge branch 'POST_EVENT_PERFORMANCE' of https://github.com/dhis2/dhis2-core into POST_EVENT_PERFORMANCE\n\n* 'POST_EVENT_PERFORMANCE' of https://github.com/dhis2/dhis2-core:\n  fix(translations): sync translations from transifex (master)\n  fix: Filter result by data readable TET (#5487)\n  refactor: Removing duplication of code in the call of rule engine [DHIS2-7310] (#5606)", "committedDate": "2020-05-25T08:08:30Z", "type": "commit"}, {"oid": "87681d2249b3cfd5608ba6dc7656e77827ea328c", "url": "https://github.com/dhis2/dhis2-core/commit/87681d2249b3cfd5608ba6dc7656e77827ea328c", "message": "test: improve relationship tests cleanup", "committedDate": "2020-05-25T09:55:52Z", "type": "commit"}, {"oid": "f1369e2956f05ca00b04e302a1dc837d02ec16a3", "url": "https://github.com/dhis2/dhis2-core/commit/f1369e2956f05ca00b04e302a1dc837d02ec16a3", "message": "test: fix user assignment tests", "committedDate": "2020-05-25T10:01:02Z", "type": "commit"}, {"oid": "4c5824a79038e0535fd47662ade2022e09374ead", "url": "https://github.com/dhis2/dhis2-core/commit/4c5824a79038e0535fd47662ade2022e09374ead", "message": "test: fix user tests", "committedDate": "2020-05-25T10:08:15Z", "type": "commit"}, {"oid": "8cd3a3ed2d72ae3d1126f1cd286d612189846e3c", "url": "https://github.com/dhis2/dhis2-core/commit/8cd3a3ed2d72ae3d1126f1cd286d612189846e3c", "message": "test: fix user tests flakiness", "committedDate": "2020-05-25T10:16:40Z", "type": "commit"}, {"oid": "abbe9bd8e7ad5c386cfbeb70a3eaae03626f2083", "url": "https://github.com/dhis2/dhis2-core/commit/abbe9bd8e7ad5c386cfbeb70a3eaae03626f2083", "message": "Data Values validation + handling", "committedDate": "2020-05-25T12:34:40Z", "type": "commit"}, {"oid": "c6f23116501997b16ee0c3424c7dc1552cd11625", "url": "https://github.com/dhis2/dhis2-core/commit/c6f23116501997b16ee0c3424c7dc1552cd11625", "message": "fix: storedBy during update", "committedDate": "2020-05-25T14:13:38Z", "type": "commit"}, {"oid": "1e0bf371984fcb10047c4ba830ebb93300de4774", "url": "https://github.com/dhis2/dhis2-core/commit/1e0bf371984fcb10047c4ba830ebb93300de4774", "message": "Merge branch 'POST_EVENT_PERFORMANCE' of https://github.com/dhis2/dhis2-core into POST_EVENT_PERFORMANCE\n\n* 'POST_EVENT_PERFORMANCE' of https://github.com/dhis2/dhis2-core:\n  test: fix user tests flakiness\n  test: fix user tests\n  test: fix user assignment tests\n  test: improve relationship tests cleanup", "committedDate": "2020-05-25T14:14:03Z", "type": "commit"}, {"oid": "5ef530be398581fc4c2d2d6efe3ff98e7ea83f5d", "url": "https://github.com/dhis2/dhis2-core/commit/5ef530be398581fc4c2d2d6efe3ff98e7ea83f5d", "message": "chore: javadoc", "committedDate": "2020-05-25T14:24:11Z", "type": "commit"}, {"oid": "fbb4c523505f44824c3f8da98406dfec5f46ace1", "url": "https://github.com/dhis2/dhis2-core/commit/fbb4c523505f44824c3f8da98406dfec5f46ace1", "message": "Removed DefaultEventDataValueService", "committedDate": "2020-05-25T14:36:17Z", "type": "commit"}, {"oid": "801528b1afa61931d0b477ef20acf1fc78f02452", "url": "https://github.com/dhis2/dhis2-core/commit/801528b1afa61931d0b477ef20acf1fc78f02452", "message": "test: event import with ouScheme (wip)", "committedDate": "2020-05-25T15:26:13Z", "type": "commit"}, {"oid": "d6cb185c36df48b93b6ddce26c64a484025da19c", "url": "https://github.com/dhis2/dhis2-core/commit/d6cb185c36df48b93b6ddce26c64a484025da19c", "message": "remove docker.sh", "committedDate": "2020-05-25T15:29:31Z", "type": "commit"}, {"oid": "e11b07fce2508e88d26df8620bc9ef528052edeb", "url": "https://github.com/dhis2/dhis2-core/commit/e11b07fce2508e88d26df8620bc9ef528052edeb", "message": "Merge branch 'POST_EVENT_PERFORMANCE' of https://github.com/dhis2/dhis2-core into POST_EVENT_PERFORMANCE\n\n* 'POST_EVENT_PERFORMANCE' of https://github.com/dhis2/dhis2-core:\n  remove docker.sh\n  test: event import with ouScheme (wip)", "committedDate": "2020-05-25T15:31:21Z", "type": "commit"}, {"oid": "1984a6dc8a80a5c7a6a35cff2c79c99e0d26453e", "url": "https://github.com/dhis2/dhis2-core/commit/1984a6dc8a80a5c7a6a35cff2c79c99e0d26453e", "message": "fix: better missing program stage validation", "committedDate": "2020-05-25T17:44:12Z", "type": "commit"}, {"oid": "3c3f5871c5b1ea8844cf9e94a2108c2f286ac5cd", "url": "https://github.com/dhis2/dhis2-core/commit/3c3f5871c5b1ea8844cf9e94a2108c2f286ac5cd", "message": "test: adds test for ATTRIBUTE id scheme", "committedDate": "2020-05-26T09:28:38Z", "type": "commit"}, {"oid": "e6c09c67f1a5918ee8ff87124a64111b2e962220", "url": "https://github.com/dhis2/dhis2-core/commit/e6c09c67f1a5918ee8ff87124a64111b2e962220", "message": "fix: handle Attribute Scheme for OrgUnits", "committedDate": "2020-05-26T13:00:47Z", "type": "commit"}, {"oid": "c6675c8a85ed0a6f4af7b78a743b3b34a5de9918", "url": "https://github.com/dhis2/dhis2-core/commit/c6675c8a85ed0a6f4af7b78a743b3b34a5de9918", "message": "chore: add javadoc", "committedDate": "2020-05-26T13:08:03Z", "type": "commit"}, {"oid": "c078b4605d4b9454c2f7bb7244483e0773ee047b", "url": "https://github.com/dhis2/dhis2-core/commit/c078b4605d4b9454c2f7bb7244483e0773ee047b", "message": "chore: removed debug output", "committedDate": "2020-05-26T13:10:11Z", "type": "commit"}, {"oid": "452346c3683b89f82171f3c8db2184f6c2a8cc09", "url": "https://github.com/dhis2/dhis2-core/commit/452346c3683b89f82171f3c8db2184f6c2a8cc09", "message": "test: improved reporting", "committedDate": "2020-05-26T14:09:26Z", "type": "commit"}, {"oid": "799231cddc32fe7e60a6978c0dc6988280b485a0", "url": "https://github.com/dhis2/dhis2-core/commit/799231cddc32fe7e60a6978c0dc6988280b485a0", "message": "test: improved reporting", "committedDate": "2020-05-26T14:09:26Z", "type": "commit"}, {"oid": "beb9fbf829ac7234c43b8ee0f564787273a0086f", "url": "https://github.com/dhis2/dhis2-core/commit/beb9fbf829ac7234c43b8ee0f564787273a0086f", "message": "removed ignore from DataValue test", "committedDate": "2020-05-26T15:03:38Z", "type": "commit"}, {"oid": "1fd6dadf5c34bb1a67bd1a92ba633bba3501c0c0", "url": "https://github.com/dhis2/dhis2-core/commit/1fd6dadf5c34bb1a67bd1a92ba633bba3501c0c0", "message": "Add DataValueCheck test", "committedDate": "2020-05-26T19:36:43Z", "type": "commit"}, {"oid": "c7a3dcb06d356166e6606dc9be2726e6b6e83ccc", "url": "https://github.com/dhis2/dhis2-core/commit/c7a3dcb06d356166e6606dc9be2726e6b6e83ccc", "message": "test: fix id generation for events", "committedDate": "2020-05-27T10:57:33Z", "type": "commit"}, {"oid": "5d0893337de9f83d49c65287ee98cf0d8e794326", "url": "https://github.com/dhis2/dhis2-core/commit/5d0893337de9f83d49c65287ee98cf0d8e794326", "message": "test: adds test for event import with program id schemes", "committedDate": "2020-05-27T15:06:38Z", "type": "commit"}, {"oid": "36446b2e1f424ffd35338092e7598754d3acf64c", "url": "https://github.com/dhis2/dhis2-core/commit/36446b2e1f424ffd35338092e7598754d3acf64c", "message": "Merge branch 'master' of https://github.com/dhis2/dhis2-core into POST_EVENT_PERFORMANCE", "committedDate": "2020-05-28T08:59:37Z", "type": "commit"}, {"oid": "693b67f5196f9d3fce8e68636958e1374de32c45", "url": "https://github.com/dhis2/dhis2-core/commit/693b67f5196f9d3fce8e68636958e1374de32c45", "message": "fix: Org Unit and Program attribute scheme", "committedDate": "2020-05-28T10:07:05Z", "type": "commit"}, {"oid": "1dc64d33c78bfae4814bd6f067bfe0451e810c24", "url": "https://github.com/dhis2/dhis2-core/commit/1dc64d33c78bfae4814bd6f067bfe0451e810c24", "message": "test: fix wrong attribute id for programs test", "committedDate": "2020-05-28T11:33:59Z", "type": "commit"}, {"oid": "539588c1c61d8c966192b80ac099114a64b140f3", "url": "https://github.com/dhis2/dhis2-core/commit/539588c1c61d8c966192b80ac099114a64b140f3", "message": "fix: failing unit tests", "committedDate": "2020-05-28T11:36:35Z", "type": "commit"}, {"oid": "fca07501a65d117eb20da807028b4bcc67967cfd", "url": "https://github.com/dhis2/dhis2-core/commit/fca07501a65d117eb20da807028b4bcc67967cfd", "message": "test: fix name", "committedDate": "2020-05-28T11:58:23Z", "type": "commit"}, {"oid": "e45dbae5b9615c4eac49148c6a2270ed30537ea2", "url": "https://github.com/dhis2/dhis2-core/commit/e45dbae5b9615c4eac49148c6a2270ed30537ea2", "message": "chore: minor", "committedDate": "2020-05-28T13:45:14Z", "type": "commit"}, {"oid": "31dca8a51264f021dbfc4d9ecb48657c4585d89c", "url": "https://github.com/dhis2/dhis2-core/commit/31dca8a51264f021dbfc4d9ecb48657c4585d89c", "message": "fix: success message on Event delete", "committedDate": "2020-05-28T13:45:14Z", "type": "commit"}, {"oid": "b55222babf0aad7678f40a3306364abc6cd12b22", "url": "https://github.com/dhis2/dhis2-core/commit/b55222babf0aad7678f40a3306364abc6cd12b22", "message": "test: adds event import data value validation tests (WIP)", "committedDate": "2020-05-29T10:31:31Z", "type": "commit"}, {"oid": "f078195d27eefccc1a58dd3600ae8e226a004e6e", "url": "https://github.com/dhis2/dhis2-core/commit/f078195d27eefccc1a58dd3600ae8e226a004e6e", "message": "test: fix formatting", "committedDate": "2020-05-29T10:32:54Z", "type": "commit"}, {"oid": "f283bc785f45ba6dae194df9ee1718a9fe57e78a", "url": "https://github.com/dhis2/dhis2-core/commit/f283bc785f45ba6dae194df9ee1718a9fe57e78a", "message": "test: use actions references", "committedDate": "2020-05-29T10:35:10Z", "type": "commit"}, {"oid": "abcd54ef3f601ff527a3d3141490dec633040535", "url": "https://github.com/dhis2/dhis2-core/commit/abcd54ef3f601ff527a3d3141490dec633040535", "message": "test: adds tests for validation of event data values", "committedDate": "2020-06-03T11:50:40Z", "type": "commit"}, {"oid": "8225b0bedb8d9ae8c6d311360bea1d6d97aaa829", "url": "https://github.com/dhis2/dhis2-core/commit/8225b0bedb8d9ae8c6d311360bea1d6d97aaa829", "message": "test: fix compilation error", "committedDate": "2020-06-03T12:16:08Z", "type": "commit"}, {"oid": "ff7b1ea6f57ab9a8b82e34d74f478175efe74b73", "url": "https://github.com/dhis2/dhis2-core/commit/ff7b1ea6f57ab9a8b82e34d74f478175efe74b73", "message": "fix: trigger Data Value validation on event with no data values", "committedDate": "2020-06-03T12:32:57Z", "type": "commit"}, {"oid": "efb6901bcbb4044f4f49e8e6d92efedb3d8377cd", "url": "https://github.com/dhis2/dhis2-core/commit/efb6901bcbb4044f4f49e8e6d92efedb3d8377cd", "message": "test: adds more tests for data value validation", "committedDate": "2020-06-03T14:25:16Z", "type": "commit"}, {"oid": "6f0a9e221514b7d3b9bf3d440df8d06f883b3b73", "url": "https://github.com/dhis2/dhis2-core/commit/6f0a9e221514b7d3b9bf3d440df8d06f883b3b73", "message": "test: adds test for ou validation", "committedDate": "2020-06-04T08:10:05Z", "type": "commit"}, {"oid": "63475482cb77f0dfd588dd6bf45e43767f15f229", "url": "https://github.com/dhis2/dhis2-core/commit/63475482cb77f0dfd588dd6bf45e43767f15f229", "message": "test: more tests for event validation", "committedDate": "2020-06-04T08:34:06Z", "type": "commit"}, {"oid": "60ec9f594e6c0a19e992f9f1994f4dd01cd5f0c1", "url": "https://github.com/dhis2/dhis2-core/commit/60ec9f594e6c0a19e992f9f1994f4dd01cd5f0c1", "message": "test: fix test to use tracker program", "committedDate": "2020-06-04T08:58:57Z", "type": "commit"}, {"oid": "a734ad6b2ed23eaacdfc5da10fbbe804af578749", "url": "https://github.com/dhis2/dhis2-core/commit/a734ad6b2ed23eaacdfc5da10fbbe804af578749", "message": "test: adds test for ou access", "committedDate": "2020-06-04T09:13:13Z", "type": "commit"}, {"oid": "00aecaa3e0291b40a385bdbf8e3fe4e6c772226c", "url": "https://github.com/dhis2/dhis2-core/commit/00aecaa3e0291b40a385bdbf8e3fe4e6c772226c", "message": "Merge branch 'master' of https://github.com/dhis2/dhis2-core into POST_EVENT_PERFORMANCE", "committedDate": "2020-06-05T07:37:43Z", "type": "commit"}, {"oid": "d6d10b8bb6dc19597aae3b3078c1f6d8aa7d1c83", "url": "https://github.com/dhis2/dhis2-core/commit/d6d10b8bb6dc19597aae3b3078c1f6d8aa7d1c83", "message": "fix: incorrect number of ignored events in report", "committedDate": "2020-06-05T08:04:46Z", "type": "commit"}, {"oid": "58eeea9d8e721d68eb4277236676e7b8c2f26004", "url": "https://github.com/dhis2/dhis2-core/commit/58eeea9d8e721d68eb4277236676e7b8c2f26004", "message": "test: adds more assertions to event import validation tests", "committedDate": "2020-06-05T09:46:03Z", "type": "commit"}, {"oid": "482c8b076ae6a302b15cfe23f34988de8ccb12b1", "url": "https://github.com/dhis2/dhis2-core/commit/482c8b076ae6a302b15cfe23f34988de8ccb12b1", "message": "fix: fail on multiple program instance for a program", "committedDate": "2020-06-08T12:03:27Z", "type": "commit"}, {"oid": "d3dedb32f12b2be15da0b5b4df1da2a6ad253f02", "url": "https://github.com/dhis2/dhis2-core/commit/d3dedb32f12b2be15da0b5b4df1da2a6ad253f02", "message": "chore: add more unit tests", "committedDate": "2020-06-08T17:57:15Z", "type": "commit"}, {"oid": "7f742e3b76f84521a868c50c7d4fb22ba21a6e2a", "url": "https://github.com/dhis2/dhis2-core/commit/7f742e3b76f84521a868c50c7d4fb22ba21a6e2a", "message": "Merge branch 'master' of https://github.com/dhis2/dhis2-core into POST_EVENT_PERFORMANCE", "committedDate": "2020-06-09T07:29:03Z", "type": "commit"}, {"oid": "227ea0ef48fa7d5cf8e59fe5aeaeda6f7af2192d", "url": "https://github.com/dhis2/dhis2-core/commit/227ea0ef48fa7d5cf8e59fe5aeaeda6f7af2192d", "message": "Merge branch 'POST_EVENT_PERFORMANCE' of https://github.com/dhis2/dhis2-core into POST_EVENT_PERFORMANCE", "committedDate": "2020-06-09T07:29:28Z", "type": "commit"}, {"oid": "74f5e43d1151907553dc67b45532fdd6a08c5244", "url": "https://github.com/dhis2/dhis2-core/commit/74f5e43d1151907553dc67b45532fdd6a08c5244", "message": "fix: compilation error", "committedDate": "2020-06-09T08:54:39Z", "type": "commit"}, {"oid": "d702d2625451ab7f90c84ef5fe9d39958b28d5ab", "url": "https://github.com/dhis2/dhis2-core/commit/d702d2625451ab7f90c84ef5fe9d39958b28d5ab", "message": "chore: Cleand-up and refactoring", "committedDate": "2020-06-09T12:07:21Z", "type": "commit"}, {"oid": "d0b7d26e802b16ee1163c708f20a0cff655652e0", "url": "https://github.com/dhis2/dhis2-core/commit/d0b7d26e802b16ee1163c708f20a0cff655652e0", "message": "chore: Adding comment to Luciano's TODO", "committedDate": "2020-06-09T12:11:33Z", "type": "commit"}, {"oid": "c7e13820e392a5d51069a457dbef3ccf0089d0b9", "url": "https://github.com/dhis2/dhis2-core/commit/c7e13820e392a5d51069a457dbef3ccf0089d0b9", "message": "fix: update tei using jdbc, preload acl check", "committedDate": "2020-06-10T16:52:56Z", "type": "commit"}, {"oid": "6f57a8a3d05dc7e8088ff70d44c673c57729507e", "url": "https://github.com/dhis2/dhis2-core/commit/6f57a8a3d05dc7e8088ff70d44c673c57729507e", "message": "fix: unit tests failing", "committedDate": "2020-06-11T11:48:53Z", "type": "commit"}, {"oid": "9797675e8cdc239f61e7eaddc56d5b61aa49e6f8", "url": "https://github.com/dhis2/dhis2-core/commit/9797675e8cdc239f61e7eaddc56d5b61aa49e6f8", "message": "fix: unit tests failing 2", "committedDate": "2020-06-11T12:36:08Z", "type": "commit"}, {"oid": "b8c11a55bc349a6b6c2f4f83c1a8ddec2c3a9731", "url": "https://github.com/dhis2/dhis2-core/commit/b8c11a55bc349a6b6c2f4f83c1a8ddec2c3a9731", "message": "fix: Fixing conflicts with master", "committedDate": "2020-06-15T11:42:54Z", "type": "commit"}, {"oid": "150d408c2c839d2ed9794209025614b8ebd6c4d7", "url": "https://github.com/dhis2/dhis2-core/commit/150d408c2c839d2ed9794209025614b8ebd6c4d7", "message": "Merge branch 'POST_EVENT_PERFORMANCE' of https://github.com/dhis2/dhis2-core into POST_EVENT_PERFORMANCE", "committedDate": "2020-06-15T11:43:16Z", "type": "commit"}, {"oid": "1b8f2dcbc45824e69aa8d2cf4ebbde25bf7cf814", "url": "https://github.com/dhis2/dhis2-core/commit/1b8f2dcbc45824e69aa8d2cf4ebbde25bf7cf814", "message": "fix: handle case where ProgramInstance is not found", "committedDate": "2020-06-15T18:53:19Z", "type": "commit"}, {"oid": "35c9960a6b64d328af2053b8f9c89aa603c97eef", "url": "https://github.com/dhis2/dhis2-core/commit/35c9960a6b64d328af2053b8f9c89aa603c97eef", "message": "fix: NPE during FeatureType check", "committedDate": "2020-06-16T08:32:20Z", "type": "commit"}, {"oid": "2eb684a322ddebc43682ea2c004b222731f6d059", "url": "https://github.com/dhis2/dhis2-core/commit/2eb684a322ddebc43682ea2c004b222731f6d059", "message": "Ignoring test temporarily", "committedDate": "2020-06-16T08:56:07Z", "type": "commit"}, {"oid": "33474d0eb46de6985642af523d1f1b08e7a70a35", "url": "https://github.com/dhis2/dhis2-core/commit/33474d0eb46de6985642af523d1f1b08e7a70a35", "message": "Merge branch 'master' of https://github.com/dhis2/dhis2-core into POST_EVENT_PERFORMANCE", "committedDate": "2020-06-16T09:12:24Z", "type": "commit"}, {"oid": "cb86164a39756557b36fe0d9a5f54bfe800eeb2d", "url": "https://github.com/dhis2/dhis2-core/commit/cb86164a39756557b36fe0d9a5f54bfe800eeb2d", "message": "Merge branch 'POST_EVENT_PERFORMANCE' of https://github.com/dhis2/dhis2-core into POST_EVENT_PERFORMANCE", "committedDate": "2020-06-16T09:12:41Z", "type": "commit"}, {"oid": "67dea5df94742e04c65e6749eea5cf820597e429", "url": "https://github.com/dhis2/dhis2-core/commit/67dea5df94742e04c65e6749eea5cf820597e429", "message": "fix: prevent deadlocks when updating TEI by using SKIP LOCKED clause", "committedDate": "2020-06-17T05:55:16Z", "type": "commit"}, {"oid": "026def4ed9087a9c01ecc85621c8adbd9b18c3bc", "url": "https://github.com/dhis2/dhis2-core/commit/026def4ed9087a9c01ecc85621c8adbd9b18c3bc", "message": "Merge branch 'master' of https://github.com/dhis2/dhis2-core into POST_EVENT_PERFORMANCE", "committedDate": "2020-06-18T07:06:45Z", "type": "commit"}, {"oid": "f33276a486933c2326d62908141e0bc761dd2108", "url": "https://github.com/dhis2/dhis2-core/commit/f33276a486933c2326d62908141e0bc761dd2108", "message": "Merge branch 'POST_EVENT_PERFORMANCE' of https://github.com/dhis2/dhis2-core into POST_EVENT_PERFORMANCE", "committedDate": "2020-06-18T07:06:45Z", "type": "commit"}, {"oid": "c666a7d0887e4328fc6de26e02f3f39b1f7d2044", "url": "https://github.com/dhis2/dhis2-core/commit/c666a7d0887e4328fc6de26e02f3f39b1f7d2044", "message": "Merge branch 'POST_EVENT_PERFORMANCE' of https://github.com/dhis2/dhis2-core into POST_EVENT_PERFORMANCE\n\n* 'POST_EVENT_PERFORMANCE' of https://github.com/dhis2/dhis2-core:\n  fix: Add storedBy for AbstractTrackedEntityInstanceService.addTrackedEntityInstance() (#5727)", "committedDate": "2020-06-18T07:06:45Z", "type": "commit"}, {"oid": "e3e98b7a3a46b079bbafc61c6fd2d2ff142269cc", "url": "https://github.com/dhis2/dhis2-core/commit/e3e98b7a3a46b079bbafc61c6fd2d2ff142269cc", "message": "fix: do not use SKIP LOCKED when running H2 based tests", "committedDate": "2020-06-18T07:06:46Z", "type": "commit"}, {"oid": "4b54027447c346ffb9e015155bc0c152a1eceadc", "url": "https://github.com/dhis2/dhis2-core/commit/4b54027447c346ffb9e015155bc0c152a1eceadc", "message": "fix: attempt deadlock fix using cache", "committedDate": "2020-06-18T07:06:46Z", "type": "commit"}, {"oid": "02847cabf9ee6c9b2c8ee5f19e2a9c42cecd648f", "url": "https://github.com/dhis2/dhis2-core/commit/02847cabf9ee6c9b2c8ee5f19e2a9c42cecd648f", "message": "chore: removed ignore from test", "committedDate": "2020-06-18T07:10:36Z", "type": "commit"}, {"oid": "02847cabf9ee6c9b2c8ee5f19e2a9c42cecd648f", "url": "https://github.com/dhis2/dhis2-core/commit/02847cabf9ee6c9b2c8ee5f19e2a9c42cecd648f", "message": "chore: removed ignore from test", "committedDate": "2020-06-18T07:10:36Z", "type": "forcePushed"}, {"oid": "fd6f6153f50138ccb4a63acfd065261f4bf4a8b1", "url": "https://github.com/dhis2/dhis2-core/commit/fd6f6153f50138ccb4a63acfd065261f4bf4a8b1", "message": "Merge branch 'POST_EVENT_PERFORMANCE' of https://github.com/dhis2/dhis2-core into POST_EVENT_PERFORMANCE", "committedDate": "2020-06-23T11:39:31Z", "type": "forcePushed"}, {"oid": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7", "url": "https://github.com/dhis2/dhis2-core/commit/5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7", "message": "chore: header fix", "committedDate": "2020-06-29T07:21:34Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkyMjg4OQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r446922889", "body": "Some questions:\r\n- Should the parent variable actually be called child?\r\n- The first ou is going to have itself as parent, is this correct?\r\n- Could it be solved using reduce stream function and avoid iterating twice?", "bodyText": "Some questions:\n\nShould the parent variable actually be called child?\nThe first ou is going to have itself as parent, is this correct?\nCould it be solved using reduce stream function and avoid iterating twice?", "bodyHTML": "<p dir=\"auto\">Some questions:</p>\n<ul dir=\"auto\">\n<li>Should the parent variable actually be called child?</li>\n<li>The first ou is going to have itself as parent, is this correct?</li>\n<li>Could it be solved using reduce stream function and avoid iterating twice?</li>\n</ul>", "author": "enricocolasante", "createdAt": "2020-06-29T12:13:24Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/SupplierUtils.java", "diffHunk": "@@ -0,0 +1,70 @@\n+package org.hisp.dhis.dxf2.events.importer.context;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import org.hisp.dhis.organisationunit.OrganisationUnit;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+public class SupplierUtils {\n+\n+    static OrganisationUnit getParentHierarchy(OrganisationUnit ou, String path )\n+    {\n+        if ( path.startsWith( \"/\" ) )\n+        {\n+            path = path.substring( 1 );\n+        }\n+        List<String> list = Arrays.asList( path.split( \"/\" ) );\n+        if ( list.size() == 1 && list.get( 0 ).equals( ou.getUid() ) )\n+        {\n+            return null;\n+        }\n+        Collections.reverse( list );\n+\n+        List<OrganisationUnit> ous = list.stream().filter( uid -> !uid.equals( ou.getUid() ) ).map( ouUid -> {\n+            OrganisationUnit o = new OrganisationUnit();\n+            o.setUid( ouUid );\n+            return o;\n+        } ).collect( Collectors.toList() );\n+        OrganisationUnit parent = ous.get( 0 );", "originalCommit": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null, "revised_code_in_main": null, "commits_in_main": [{"oid": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "message": "Merge commit", "committedDate": null}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "02336c9611c0dd85d5038223bddbfdebc0aae526", "committedDate": "2023-05-11 19:34:26 +0200", "message": "chore: move old tracker dxf2 code into deprecated package (#13901)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkyNDY5Mg==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r446924692", "body": "Copyright after imports?", "bodyText": "Copyright after imports?", "bodyHTML": "<p dir=\"auto\">Copyright after imports?</p>", "author": "enricocolasante", "createdAt": "2020-06-29T12:16:30Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/UidGeneratorTest.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package org.hisp.dhis.dxf2.events.importer.context;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.junit.Assert.assertNotNull;\n+\n+import java.util.List;\n+\n+import org.hisp.dhis.dxf2.events.event.Event;\n+import org.hisp.dhis.dxf2.events.importer.context.UidGenerator;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import com.google.common.collect.Lists;\n+\n+/*", "originalCommit": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODMxMzA4MQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448313081", "bodyText": "fixed", "author": "luciano-fiandesio", "createdAt": "2020-07-01T11:58:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkyNDY5Mg=="}], "type": "inlineReview", "revised_code": {"commit": "7032498b0cbac9437a93d7deeb72862937c55a98", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/UidGeneratorTest.java b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/UidGeneratorTest.java\nindex 169005490d..88d981216c 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/UidGeneratorTest.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/UidGeneratorTest.java\n", "chunk": "@@ -1,18 +1,5 @@\n package org.hisp.dhis.dxf2.events.importer.context;\n \n-import static org.hamcrest.MatcherAssert.assertThat;\n-import static org.hamcrest.Matchers.hasSize;\n-import static org.junit.Assert.assertNotNull;\n-\n-import java.util.List;\n-\n-import org.hisp.dhis.dxf2.events.event.Event;\n-import org.hisp.dhis.dxf2.events.importer.context.UidGenerator;\n-import org.junit.Before;\n-import org.junit.Test;\n-\n-import com.google.common.collect.Lists;\n-\n /*\n  * Copyright (c) 2004-2020, University of Oslo\n  * All rights reserved.\n", "next_change": {"commit": "d360652a896bee650a842567e26cd1e62145cccb", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/UidGeneratorTest.java b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/UidGeneratorTest.java\nindex 88d981216c..169005490d 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/UidGeneratorTest.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/UidGeneratorTest.java\n", "chunk": "@@ -1,5 +1,18 @@\n package org.hisp.dhis.dxf2.events.importer.context;\n \n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.junit.Assert.assertNotNull;\n+\n+import java.util.List;\n+\n+import org.hisp.dhis.dxf2.events.event.Event;\n+import org.hisp.dhis.dxf2.events.importer.context.UidGenerator;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import com.google.common.collect.Lists;\n+\n /*\n  * Copyright (c) 2004-2020, University of Oslo\n  * All rights reserved.\n", "next_change": {"commit": "c9cbe9cf8b22a49324c53b68eba31b9c63684df4", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/UidGeneratorTest.java b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/UidGeneratorTest.java\nindex 169005490d..9b469f5f0e 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/UidGeneratorTest.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/UidGeneratorTest.java\n", "chunk": "@@ -1,18 +1,5 @@\n package org.hisp.dhis.dxf2.events.importer.context;\n \n-import static org.hamcrest.MatcherAssert.assertThat;\n-import static org.hamcrest.Matchers.hasSize;\n-import static org.junit.Assert.assertNotNull;\n-\n-import java.util.List;\n-\n-import org.hisp.dhis.dxf2.events.event.Event;\n-import org.hisp.dhis.dxf2.events.importer.context.UidGenerator;\n-import org.junit.Before;\n-import org.junit.Test;\n-\n-import com.google.common.collect.Lists;\n-\n /*\n  * Copyright (c) 2004-2020, University of Oslo\n  * All rights reserved.\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/UidGeneratorTest.java b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/UidGeneratorTest.java\nindex 169005490d..8d7a2ea810 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/UidGeneratorTest.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/UidGeneratorTest.java\n", "chunk": "@@ -1,18 +1,5 @@\n package org.hisp.dhis.dxf2.events.importer.context;\n \n-import static org.hamcrest.MatcherAssert.assertThat;\n-import static org.hamcrest.Matchers.hasSize;\n-import static org.junit.Assert.assertNotNull;\n-\n-import java.util.List;\n-\n-import org.hisp.dhis.dxf2.events.event.Event;\n-import org.hisp.dhis.dxf2.events.importer.context.UidGenerator;\n-import org.junit.Before;\n-import org.junit.Test;\n-\n-import com.google.common.collect.Lists;\n-\n /*\n  * Copyright (c) 2004-2020, University of Oslo\n  * All rights reserved.\n", "next_change": {"commit": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/UidGeneratorTest.java b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/UidGeneratorTest.java\nindex 8d7a2ea810..9cada06d82 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/UidGeneratorTest.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/UidGeneratorTest.java\n", "chunk": "@@ -1,7 +1,7 @@\n package org.hisp.dhis.dxf2.events.importer.context;\n \n /*\n- * Copyright (c) 2004-2020, University of Oslo\n+ * Copyright (c) 2004-2021, University of Oslo\n  * All rights reserved.\n  *\n  * Redistribution and use in source and binary forms, with or without\n", "next_change": {"commit": "ea76fa86409613c9766d4508d65c88ac55c413c3", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/UidGeneratorTest.java b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/UidGeneratorTest.java\nindex 9cada06d82..985f214f91 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/UidGeneratorTest.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/UidGeneratorTest.java\n", "chunk": "@@ -1,5 +1,3 @@\n-package org.hisp.dhis.dxf2.events.importer.context;\n-\n /*\n  * Copyright (c) 2004-2021, University of Oslo\n  * All rights reserved.\n", "next_change": {"commit": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/UidGeneratorTest.java b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/UidGeneratorTest.java\nindex 985f214f91..0fa15a12d2 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/UidGeneratorTest.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/UidGeneratorTest.java\n", "chunk": "@@ -1,5 +1,5 @@\n /*\n- * Copyright (c) 2004-2021, University of Oslo\n+ * Copyright (c) 2004-2022, University of Oslo\n  * All rights reserved.\n  *\n  * Redistribution and use in source and binary forms, with or without\n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "message": "Merge commit", "committedDate": null}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "22d5da9d9a812b02eb5acd643112a6b050b5d63c", "committedDate": "2021-12-16 13:19:38 +0100", "message": "chore: migrate tests to JUnit 5 (#9467)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "02336c9611c0dd85d5038223bddbfdebc0aae526", "committedDate": "2023-05-11 19:34:26 +0200", "message": "chore: move old tracker dxf2 code into deprecated package (#13901)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkyNTQwMQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r446925401", "body": "Maybe it is not so relevant, but it could be useful an assert to check that all the UID are different", "bodyText": "Maybe it is not so relevant, but it could be useful an assert to check that all the UID are different", "bodyHTML": "<p dir=\"auto\">Maybe it is not so relevant, but it could be useful an assert to check that all the UID are different</p>", "author": "enricocolasante", "createdAt": "2020-06-29T12:17:49Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/UidGeneratorTest.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package org.hisp.dhis.dxf2.events.importer.context;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.junit.Assert.assertNotNull;\n+\n+import java.util.List;\n+\n+import org.hisp.dhis.dxf2.events.event.Event;\n+import org.hisp.dhis.dxf2.events.importer.context.UidGenerator;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import com.google.common.collect.Lists;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+public class UidGeneratorTest\n+{\n+    private UidGenerator subject;\n+\n+    @Before\n+    public void setUp()\n+    {\n+        subject = new UidGenerator();\n+    }\n+\n+    @Test\n+    public void verifyEventsGetUidAssigned()\n+    {\n+        Event event1 = new Event();\n+        Event event2 = new Event();\n+        Event event3 = new Event();\n+        Event event4 = new Event();\n+        event4.setEvent( \"aaaaaaa\" );\n+\n+        List<Event> events = subject.assignUidToEvents( Lists.newArrayList( event1, event2, event3, event4 ) );\n+\n+        assertThat( events, hasSize( 4 ) );", "originalCommit": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ1MzE5Nw==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448453197", "bodyText": "Fixed, added check to verify that all events have different UID", "author": "luciano-fiandesio", "createdAt": "2020-07-01T15:43:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkyNTQwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "7032498b0cbac9437a93d7deeb72862937c55a98", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/UidGeneratorTest.java b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/UidGeneratorTest.java\nindex 169005490d..88d981216c 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/UidGeneratorTest.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/UidGeneratorTest.java\n", "chunk": "@@ -67,6 +72,7 @@ public class UidGeneratorTest\n \n         assertThat( events, hasSize( 4 ) );\n         events.forEach( e -> assertNotNull( e.getUid() ) );\n+        assertThat( events.stream().collect( Collectors.toMap( Event::getUid, Function.identity() ) ).keySet(),\n+            hasSize( 4 ) );\n     }\n-\n }\n\\ No newline at end of file\n", "next_change": {"commit": "d0687a6c7c9e1c4dd64c4dc669bb80ae6e8c8c8b", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/UidGeneratorTest.java b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/UidGeneratorTest.java\nindex 88d981216c..8d7a2ea810 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/UidGeneratorTest.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/UidGeneratorTest.java\n", "chunk": "@@ -62,17 +60,26 @@ public class UidGeneratorTest\n     @Test\n     public void verifyEventsGetUidAssigned()\n     {\n+        final String uid = CodeGenerator.generateUid();\n+        // Given\n+\n         Event event1 = new Event();\n         Event event2 = new Event();\n         Event event3 = new Event();\n         Event event4 = new Event();\n-        event4.setEvent( \"aaaaaaa\" );\n+        event4.setEvent( uid );\n \n+        // When\n         List<Event> events = subject.assignUidToEvents( Lists.newArrayList( event1, event2, event3, event4 ) );\n \n+        // Then\n         assertThat( events, hasSize( 4 ) );\n         events.forEach( e -> assertNotNull( e.getUid() ) );\n+        // make sure we got 4 distinct UIDs\n         assertThat( events.stream().collect( Collectors.toMap( Event::getUid, Function.identity() ) ).keySet(),\n             hasSize( 4 ) );\n+        // make sure Event4 has retained the original UID\n+        assertThat( event4.getUid(), is( uid ) );\n+        assertThat( event4.getEvent(), is( uid ) );\n     }\n }\n\\ No newline at end of file\n", "next_change": {"commit": "d360652a896bee650a842567e26cd1e62145cccb", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/UidGeneratorTest.java b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/UidGeneratorTest.java\nindex 8d7a2ea810..169005490d 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/UidGeneratorTest.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/UidGeneratorTest.java\n", "chunk": "@@ -60,26 +57,16 @@ public class UidGeneratorTest\n     @Test\n     public void verifyEventsGetUidAssigned()\n     {\n-        final String uid = CodeGenerator.generateUid();\n-        // Given\n-\n         Event event1 = new Event();\n         Event event2 = new Event();\n         Event event3 = new Event();\n         Event event4 = new Event();\n-        event4.setEvent( uid );\n+        event4.setEvent( \"aaaaaaa\" );\n \n-        // When\n         List<Event> events = subject.assignUidToEvents( Lists.newArrayList( event1, event2, event3, event4 ) );\n \n-        // Then\n         assertThat( events, hasSize( 4 ) );\n         events.forEach( e -> assertNotNull( e.getUid() ) );\n-        // make sure we got 4 distinct UIDs\n-        assertThat( events.stream().collect( Collectors.toMap( Event::getUid, Function.identity() ) ).keySet(),\n-            hasSize( 4 ) );\n-        // make sure Event4 has retained the original UID\n-        assertThat( event4.getUid(), is( uid ) );\n-        assertThat( event4.getEvent(), is( uid ) );\n     }\n+\n }\n\\ No newline at end of file\n", "next_change": {"commit": "5a67d8f44e44ad24c05546974dc5ddc6e3afee06", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/UidGeneratorTest.java b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/UidGeneratorTest.java\nindex 169005490d..88d981216c 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/UidGeneratorTest.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/UidGeneratorTest.java\n", "chunk": "@@ -67,6 +72,7 @@ public class UidGeneratorTest\n \n         assertThat( events, hasSize( 4 ) );\n         events.forEach( e -> assertNotNull( e.getUid() ) );\n+        assertThat( events.stream().collect( Collectors.toMap( Event::getUid, Function.identity() ) ).keySet(),\n+            hasSize( 4 ) );\n     }\n-\n }\n\\ No newline at end of file\n", "next_change": {"commit": "244482e44a59886429c975502b2ad68b05940a2b", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/UidGeneratorTest.java b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/UidGeneratorTest.java\nindex 88d981216c..8d7a2ea810 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/UidGeneratorTest.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/UidGeneratorTest.java\n", "chunk": "@@ -62,17 +60,26 @@ public class UidGeneratorTest\n     @Test\n     public void verifyEventsGetUidAssigned()\n     {\n+        final String uid = CodeGenerator.generateUid();\n+        // Given\n+\n         Event event1 = new Event();\n         Event event2 = new Event();\n         Event event3 = new Event();\n         Event event4 = new Event();\n-        event4.setEvent( \"aaaaaaa\" );\n+        event4.setEvent( uid );\n \n+        // When\n         List<Event> events = subject.assignUidToEvents( Lists.newArrayList( event1, event2, event3, event4 ) );\n \n+        // Then\n         assertThat( events, hasSize( 4 ) );\n         events.forEach( e -> assertNotNull( e.getUid() ) );\n+        // make sure we got 4 distinct UIDs\n         assertThat( events.stream().collect( Collectors.toMap( Event::getUid, Function.identity() ) ).keySet(),\n             hasSize( 4 ) );\n+        // make sure Event4 has retained the original UID\n+        assertThat( event4.getUid(), is( uid ) );\n+        assertThat( event4.getEvent(), is( uid ) );\n     }\n }\n\\ No newline at end of file\n", "next_change": null}]}}]}}]}}]}}]}, "revised_code_in_main": {"commit": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/UidGeneratorTest.java b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/UidGeneratorTest.java\nindex 169005490d..8d7a2ea810 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/UidGeneratorTest.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/UidGeneratorTest.java\n", "chunk": "@@ -57,16 +60,26 @@ public class UidGeneratorTest\n     @Test\n     public void verifyEventsGetUidAssigned()\n     {\n+        final String uid = CodeGenerator.generateUid();\n+        // Given\n+\n         Event event1 = new Event();\n         Event event2 = new Event();\n         Event event3 = new Event();\n         Event event4 = new Event();\n-        event4.setEvent( \"aaaaaaa\" );\n+        event4.setEvent( uid );\n \n+        // When\n         List<Event> events = subject.assignUidToEvents( Lists.newArrayList( event1, event2, event3, event4 ) );\n \n+        // Then\n         assertThat( events, hasSize( 4 ) );\n         events.forEach( e -> assertNotNull( e.getUid() ) );\n+        // make sure we got 4 distinct UIDs\n+        assertThat( events.stream().collect( Collectors.toMap( Event::getUid, Function.identity() ) ).keySet(),\n+            hasSize( 4 ) );\n+        // make sure Event4 has retained the original UID\n+        assertThat( event4.getUid(), is( uid ) );\n+        assertThat( event4.getEvent(), is( uid ) );\n     }\n-\n }\n\\ No newline at end of file\n", "next_change": {"commit": "22d5da9d9a812b02eb5acd643112a6b050b5d63c", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/UidGeneratorTest.java b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/UidGeneratorTest.java\nindex 8d7a2ea810..2631ee952c 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/UidGeneratorTest.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/UidGeneratorTest.java\n", "chunk": "@@ -82,4 +79,4 @@ public class UidGeneratorTest\n         assertThat( event4.getUid(), is( uid ) );\n         assertThat( event4.getEvent(), is( uid ) );\n     }\n-}\n\\ No newline at end of file\n+}\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "message": "Merge commit", "committedDate": null}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "22d5da9d9a812b02eb5acd643112a6b050b5d63c", "committedDate": "2021-12-16 13:19:38 +0100", "message": "chore: migrate tests to JUnit 5 (#9467)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "02336c9611c0dd85d5038223bddbfdebc0aae526", "committedDate": "2023-05-11 19:34:26 +0200", "message": "chore: move old tracker dxf2 code into deprecated package (#13901)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkyOTM0MQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r446929341", "body": "Unused?", "bodyText": "Unused?", "bodyHTML": "<p dir=\"auto\">Unused?</p>", "author": "enricocolasante", "createdAt": "2020-06-29T12:24:40Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/persistence/DefaultEventPersistenceService.java", "diffHunk": "@@ -0,0 +1,193 @@\n+package org.hisp.dhis.dxf2.events.event.persistence;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+import static java.util.Collections.singletonList;\n+import static org.apache.commons.collections4.CollectionUtils.isNotEmpty;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.hisp.dhis.common.IdentifiableObjectManager;\n+import org.hisp.dhis.dxf2.events.event.Event;\n+import org.hisp.dhis.dxf2.events.event.EventStore;\n+import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n+import org.hisp.dhis.dxf2.events.importer.mapper.ProgramStageInstanceMapper;\n+import org.hisp.dhis.program.ProgramStageInstance;\n+import org.hisp.dhis.trackedentity.TrackedEntityInstance;\n+import org.hisp.dhis.user.User;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+@Service\n+@Slf4j\n+public class  DefaultEventPersistenceService\n+    implements\n+    EventPersistenceService\n+{\n+    private final EventStore jdbcEventStore;\n+\n+    private final IdentifiableObjectManager manager;\n+\n+    public DefaultEventPersistenceService( EventStore jdbcEventStore, IdentifiableObjectManager manager )\n+    {\n+        checkNotNull( jdbcEventStore );\n+        checkNotNull( manager );\n+\n+        this.jdbcEventStore = jdbcEventStore;\n+        this.manager = manager;\n+    }\n+\n+    @Override\n+    @Transactional\n+    public void save( WorkContext context, List<Event> events )\n+    {\n+        /*\n+         * Save Events, Notes and Data Values\n+         */\n+        ProgramStageInstanceMapper mapper = new ProgramStageInstanceMapper( context );\n+\n+        jdbcEventStore.saveEvents( events.stream().map( mapper::map ).collect( Collectors.toList() ) );\n+\n+        updateTeis( context, events );\n+    }\n+\n+    /**\n+     * Updates the list of given events using a single transaction.\n+     *\n+     * @param context a {@see WorkContext}\n+     * @param events a List of {@see Event}\n+     */\n+\n+    @Override\n+    @Transactional\n+    public void update( final WorkContext context, final List<Event> events ) {\n+\n+        if ( isNotEmpty( events ) )\n+        {\n+            final Map<Event, ProgramStageInstance> eventProgramStageInstanceMap = convertToProgramStageInstances(\n+                new ProgramStageInstanceMapper( context ), events );\n+\n+            jdbcEventStore.updateEvents( new ArrayList<>( eventProgramStageInstanceMap.values() ) );\n+\n+            updateTeis( context, events );\n+        }\n+    }\n+    \n+    private void updateTeis( final WorkContext context, final List<Event> events )\n+    {\n+        List<String> teiUidList = new ArrayList<>();\n+\n+        if ( !context.getImportOptions().isSkipLastUpdated() )\n+        {\n+            for ( Event event : events )\n+            {\n+                final Optional<TrackedEntityInstance> trackedEntityInstance = context\n+                    .getTrackedEntityInstance( event.getUid() );\n+\n+                trackedEntityInstance.ifPresent( t -> teiUidList.add( t.getUid() ) );\n+            }\n+\n+            jdbcEventStore.updateTrackedEntityInstances( teiUidList, context.getImportOptions().getUser() );\n+\n+        }\n+    }\n+\n+    /**\n+     * Deletes the list of events using a single transaction.\n+     *\n+     * @param context a {@see WorkContext}\n+     * @param events a List of {@see Event}\n+     */\n+    @Override\n+    @Transactional\n+    public void delete( final WorkContext context, final List<Event> events )\n+    {\n+        if ( isNotEmpty( events ) )\n+        {\n+            jdbcEventStore.delete( events );\n+        }\n+    }\n+\n+    /**\n+     * Deletes the event using a single transaction.\n+     *\n+     * @param context a {@see WorkContext}\n+     * @param event the event to delete {@see Event}\n+     */\n+    @Override\n+    @Transactional\n+    public void delete( final WorkContext context, final Event event )\n+    {\n+        if ( event != null )\n+        {\n+            jdbcEventStore.delete( singletonList( event ) );\n+        }\n+    }\n+\n+    private void updateTrackedEntityInstance( final TrackedEntityInstance tei, final User user )", "originalCommit": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODMxMzM3Ng==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448313376", "bodyText": "fixed, method removed", "author": "luciano-fiandesio", "createdAt": "2020-07-01T11:58:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkyOTM0MQ=="}], "type": "inlineReview", "revised_code": {"commit": "7032498b0cbac9437a93d7deeb72862937c55a98", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/persistence/DefaultEventPersistenceService.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/persistence/DefaultEventPersistenceService.java\nindex 0e0d882aa3..dd6d701bd9 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/persistence/DefaultEventPersistenceService.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/persistence/DefaultEventPersistenceService.java\n", "chunk": "@@ -162,22 +162,6 @@ public class  DefaultEventPersistenceService\n         }\n     }\n \n-    private void updateTrackedEntityInstance( final TrackedEntityInstance tei, final User user )\n-    {\n-        final TrackedEntityInstance loadedTei = manager.get( TrackedEntityInstance.class, tei.getUid() );\n-\n-        loadedTei.setCreatedAtClient( tei.getCreatedAtClient() );\n-        loadedTei.setLastUpdatedAtClient( tei.getLastUpdatedAtClient() );\n-        loadedTei.setInactive( tei.isInactive() );\n-        loadedTei.setLastSynchronized( tei.getLastSynchronized() );\n-        loadedTei.setCreated( tei.getCreated() );\n-        loadedTei.setLastUpdated( tei.getLastUpdated() );\n-        loadedTei.setUser( tei.getUser() );\n-        loadedTei.setLastUpdatedBy( tei.getLastUpdatedBy() );\n-\n-        manager.update( loadedTei, user );\n-    }\n-\n     private Map<Event, ProgramStageInstance> convertToProgramStageInstances( ProgramStageInstanceMapper mapper,\n         List<Event> events )\n     {\n", "next_change": {"commit": "d360652a896bee650a842567e26cd1e62145cccb", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/persistence/DefaultEventPersistenceService.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/persistence/DefaultEventPersistenceService.java\nindex dd6d701bd9..0e0d882aa3 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/persistence/DefaultEventPersistenceService.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/persistence/DefaultEventPersistenceService.java\n", "chunk": "@@ -162,6 +162,22 @@ public class  DefaultEventPersistenceService\n         }\n     }\n \n+    private void updateTrackedEntityInstance( final TrackedEntityInstance tei, final User user )\n+    {\n+        final TrackedEntityInstance loadedTei = manager.get( TrackedEntityInstance.class, tei.getUid() );\n+\n+        loadedTei.setCreatedAtClient( tei.getCreatedAtClient() );\n+        loadedTei.setLastUpdatedAtClient( tei.getLastUpdatedAtClient() );\n+        loadedTei.setInactive( tei.isInactive() );\n+        loadedTei.setLastSynchronized( tei.getLastSynchronized() );\n+        loadedTei.setCreated( tei.getCreated() );\n+        loadedTei.setLastUpdated( tei.getLastUpdated() );\n+        loadedTei.setUser( tei.getUser() );\n+        loadedTei.setLastUpdatedBy( tei.getLastUpdatedBy() );\n+\n+        manager.update( loadedTei, user );\n+    }\n+\n     private Map<Event, ProgramStageInstance> convertToProgramStageInstances( ProgramStageInstanceMapper mapper,\n         List<Event> events )\n     {\n", "next_change": {"commit": "c9cbe9cf8b22a49324c53b68eba31b9c63684df4", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/persistence/DefaultEventPersistenceService.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/persistence/DefaultEventPersistenceService.java\nindex 0e0d882aa3..dd6d701bd9 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/persistence/DefaultEventPersistenceService.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/persistence/DefaultEventPersistenceService.java\n", "chunk": "@@ -162,22 +162,6 @@ public class  DefaultEventPersistenceService\n         }\n     }\n \n-    private void updateTrackedEntityInstance( final TrackedEntityInstance tei, final User user )\n-    {\n-        final TrackedEntityInstance loadedTei = manager.get( TrackedEntityInstance.class, tei.getUid() );\n-\n-        loadedTei.setCreatedAtClient( tei.getCreatedAtClient() );\n-        loadedTei.setLastUpdatedAtClient( tei.getLastUpdatedAtClient() );\n-        loadedTei.setInactive( tei.isInactive() );\n-        loadedTei.setLastSynchronized( tei.getLastSynchronized() );\n-        loadedTei.setCreated( tei.getCreated() );\n-        loadedTei.setLastUpdated( tei.getLastUpdated() );\n-        loadedTei.setUser( tei.getUser() );\n-        loadedTei.setLastUpdatedBy( tei.getLastUpdatedBy() );\n-\n-        manager.update( loadedTei, user );\n-    }\n-\n     private Map<Event, ProgramStageInstance> convertToProgramStageInstances( ProgramStageInstanceMapper mapper,\n         List<Event> events )\n     {\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/persistence/DefaultEventPersistenceService.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/persistence/DefaultEventPersistenceService.java\nindex 0e0d882aa3..dd6d701bd9 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/persistence/DefaultEventPersistenceService.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/persistence/DefaultEventPersistenceService.java\n", "chunk": "@@ -162,22 +162,6 @@ public class  DefaultEventPersistenceService\n         }\n     }\n \n-    private void updateTrackedEntityInstance( final TrackedEntityInstance tei, final User user )\n-    {\n-        final TrackedEntityInstance loadedTei = manager.get( TrackedEntityInstance.class, tei.getUid() );\n-\n-        loadedTei.setCreatedAtClient( tei.getCreatedAtClient() );\n-        loadedTei.setLastUpdatedAtClient( tei.getLastUpdatedAtClient() );\n-        loadedTei.setInactive( tei.isInactive() );\n-        loadedTei.setLastSynchronized( tei.getLastSynchronized() );\n-        loadedTei.setCreated( tei.getCreated() );\n-        loadedTei.setLastUpdated( tei.getLastUpdated() );\n-        loadedTei.setUser( tei.getUser() );\n-        loadedTei.setLastUpdatedBy( tei.getLastUpdatedBy() );\n-\n-        manager.update( loadedTei, user );\n-    }\n-\n     private Map<Event, ProgramStageInstance> convertToProgramStageInstances( ProgramStageInstanceMapper mapper,\n         List<Event> events )\n     {\n", "next_change": {"commit": "0d35843121f0ad3004fad015f1520c5b06a5c337", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/persistence/DefaultEventPersistenceService.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/persistence/DefaultEventPersistenceService.java\nindex dd6d701bd9..fb98f8c67e 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/persistence/DefaultEventPersistenceService.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/persistence/DefaultEventPersistenceService.java\n", "chunk": "@@ -146,22 +112,6 @@ public class  DefaultEventPersistenceService\n         }\n     }\n \n-    /**\n-     * Deletes the event using a single transaction.\n-     *\n-     * @param context a {@see WorkContext}\n-     * @param event the event to delete {@see Event}\n-     */\n-    @Override\n-    @Transactional\n-    public void delete( final WorkContext context, final Event event )\n-    {\n-        if ( event != null )\n-        {\n-            jdbcEventStore.delete( singletonList( event ) );\n-        }\n-    }\n-\n     private Map<Event, ProgramStageInstance> convertToProgramStageInstances( ProgramStageInstanceMapper mapper,\n         List<Event> events )\n     {\n", "next_change": {"commit": "1bd8ee38126fbac22f805db44dad0cdcba7b14a6", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/persistence/DefaultEventPersistenceService.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/persistence/DefaultEventPersistenceService.java\nindex fb98f8c67e..8d9325333a 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/persistence/DefaultEventPersistenceService.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/persistence/DefaultEventPersistenceService.java\n", "chunk": "@@ -112,19 +125,6 @@ public class  DefaultEventPersistenceService\n         }\n     }\n \n-    private Map<Event, ProgramStageInstance> convertToProgramStageInstances( ProgramStageInstanceMapper mapper,\n-        List<Event> events )\n-    {\n-        Map<Event, ProgramStageInstance> map = new HashMap<>();\n-        for ( Event event : events )\n-        {\n-            ProgramStageInstance psi = mapper.map( event );\n-            map.put( event, psi );\n-        }\n-\n-        return map;\n-    }\n-\n     /**\n      * Updates the \"lastupdated\" and \"lastupdatedBy\" of the\n      * Tracked Entity Instances linked to the provided list of Events.\n", "next_change": {"commit": "ea76fa86409613c9766d4508d65c88ac55c413c3", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/persistence/DefaultEventPersistenceService.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/persistence/DefaultEventPersistenceService.java\nindex 8d9325333a..7cb5829fbc 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/persistence/DefaultEventPersistenceService.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/persistence/DefaultEventPersistenceService.java\n", "chunk": "@@ -126,8 +123,8 @@ public class  DefaultEventPersistenceService\n     }\n \n     /**\n-     * Updates the \"lastupdated\" and \"lastupdatedBy\" of the\n-     * Tracked Entity Instances linked to the provided list of Events.\n+     * Updates the \"lastupdated\" and \"lastupdatedBy\" of the Tracked Entity\n+     * Instances linked to the provided list of Events.\n      *\n      * @param context a {@see WorkContext}\n      * @param events a List of {@see Event}\n", "next_change": {"commit": "959c60d4f597187d0df2160fbbb675e5c4196e5c", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/persistence/DefaultEventPersistenceService.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/persistence/DefaultEventPersistenceService.java\nindex 7cb5829fbc..c0646a05f1 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/persistence/DefaultEventPersistenceService.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/persistence/DefaultEventPersistenceService.java\n", "chunk": "@@ -129,14 +129,15 @@ public class DefaultEventPersistenceService\n      * @param context a {@see WorkContext}\n      * @param events a List of {@see Event}\n      */\n-    private void updateTeis( final WorkContext context, final List<Event> events )\n+    private void updateTeis( final WorkContext context, final List<org.hisp.dhis.dxf2.events.event.Event> events )\n     {\n         // Make sure that the TEI uids are not duplicated\n         final List<String> distinctTeiList = events.stream()\n             .map( e -> context.getTrackedEntityInstance( e.getUid() ) )\n             .filter( Optional::isPresent )\n             .map( o -> o.get().getUid() )\n-            .distinct().collect( Collectors.toList() );\n+            .distinct()\n+            .collect( Collectors.toList() );\n \n         jdbcEventStore.updateTrackedEntityInstances( distinctTeiList, context.getImportOptions().getUser() );\n     }\n", "next_change": null}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "message": "Merge commit", "committedDate": null}, {"oid": "1775146057dbef2da11c4e554b339f150f2f4857", "committedDate": "2020-09-09 08:34:03 +0200", "message": "perf: [DHIS-9415] avoid querying programstageinstancecomments if not necessary (#6103)"}, {"oid": "0d35843121f0ad3004fad015f1520c5b06a5c337", "committedDate": "2020-09-15 09:24:33 +0200", "message": "Merge 2.35 into master (#6149)"}, {"oid": "e4ff88027eb8dd823a539ef0ed82daeff5072e7c", "committedDate": "2020-09-18 16:43:42 +0200", "message": "fix: prevent db deadlock during Event update (#6135)"}, {"oid": "1bd8ee38126fbac22f805db44dad0cdcba7b14a6", "committedDate": "2020-09-23 11:30:37 +0200", "message": "fix: allow updating an Event with File data type [DHIS2-9559]"}, {"oid": "7098e9412b922ed70f8136f30c7d790e27bb43be", "committedDate": "2020-12-10 10:43:44 +0100", "message": "chore: Remove unused imports (#6875)"}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "ae6806774b896dcc69a99687ce331d60d40995c7", "committedDate": "2022-06-02 09:20:44 +0200", "message": "chore: Refactor JdbcTemplate to NamedParameterJdbcTemplate (#10767)"}, {"oid": "2886ebea404331a2c3f78909bcb92cca1ecc7913", "committedDate": "2022-10-12 09:39:22 +0200", "message": "chore: only use @Nonnull and ban similar annotations (#12071)"}, {"oid": "959c60d4f597187d0df2160fbbb675e5c4196e5c", "committedDate": "2023-04-27 16:46:18 +0200", "message": "chore: rename ProgramStageInstance to Event (#13731)"}, {"oid": "02336c9611c0dd85d5038223bddbfdebc0aae526", "committedDate": "2023-05-11 19:34:26 +0200", "message": "chore: move old tracker dxf2 code into deprecated package (#13901)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkzMDUyMQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r446930521", "body": "Because of line 239 in DHISFormatter.xml this annotation shouldn't be needed anymore", "bodyText": "Because of line 239 in DHISFormatter.xml this annotation shouldn't be needed anymore", "bodyHTML": "<p dir=\"auto\">Because of line 239 in DHISFormatter.xml this annotation shouldn't be needed anymore</p>", "author": "enricocolasante", "createdAt": "2020-06-29T12:26:37Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/ServiceDelegatorSupplier.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package org.hisp.dhis.dxf2.events.importer.context;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import java.util.function.Supplier;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.hisp.dhis.dxf2.events.importer.ServiceDelegator;\n+import org.hisp.dhis.program.ProgramInstanceStore;\n+import org.hisp.dhis.programrule.ProgramRuleVariableService;\n+import org.hisp.dhis.trackedentity.TrackerAccessManager;\n+import org.hisp.dhis.user.CurrentUserService;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.context.ApplicationEventPublisher;\n+import org.springframework.jdbc.core.JdbcTemplate;\n+import org.springframework.stereotype.Component;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+@Component( \"workContextServiceDelegatorSupplier\" )\n+public class ServiceDelegatorSupplier implements Supplier<ServiceDelegator>\n+{\n+    private final ProgramInstanceStore programInstanceStore;\n+\n+    private final TrackerAccessManager trackerAccessManager;\n+\n+    private final ApplicationEventPublisher applicationEventPublisher;\n+\n+    private final ProgramRuleVariableService programRuleVariableService;\n+\n+    private final CurrentUserService currentUserService;\n+\n+    private final ObjectMapper jsonMapper;\n+\n+    private final JdbcTemplate jdbcTemplate;\n+\n+    public ServiceDelegatorSupplier( ProgramInstanceStore programInstanceStore,\n+        TrackerAccessManager trackerAccessManager, ApplicationEventPublisher applicationEventPublisher,\n+        ProgramRuleVariableService programRuleVariableService, CurrentUserService currentUserService,\n+        ObjectMapper jsonMapper,\n+        @Qualifier( \"readOnlyJdbcTemplate\" ) JdbcTemplate jdbcTemplate)\n+    {\n+        this.programInstanceStore = programInstanceStore;\n+        this.trackerAccessManager = trackerAccessManager;\n+        this.applicationEventPublisher = applicationEventPublisher;\n+        this.programRuleVariableService = programRuleVariableService;\n+        this.currentUserService = currentUserService;\n+        this.jsonMapper =jsonMapper;\n+        this.jdbcTemplate = jdbcTemplate;\n+    }\n+\n+    @Override\n+    public ServiceDelegator get()\n+    {\n+        // @formatter:off", "originalCommit": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODMxMzY4Mw==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448313683", "bodyText": "Fixed, annotation removed", "author": "luciano-fiandesio", "createdAt": "2020-07-01T11:59:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkzMDUyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "7032498b0cbac9437a93d7deeb72862937c55a98", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/ServiceDelegatorSupplier.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/ServiceDelegatorSupplier.java\nindex be25ee539c..1097a4eaa3 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/ServiceDelegatorSupplier.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/ServiceDelegatorSupplier.java\n", "chunk": "@@ -79,16 +79,14 @@ public class ServiceDelegatorSupplier implements Supplier<ServiceDelegator>\n     @Override\n     public ServiceDelegator get()\n     {\n-        // @formatter:off\n         return ServiceDelegator.builder()\n-                .programInstanceStore( this.programInstanceStore )\n-                .trackerAccessManager( this.trackerAccessManager )\n-                .applicationEventPublisher( this.applicationEventPublisher )\n-                .programRuleVariableService( this.programRuleVariableService )\n-                .currentUserService( this.currentUserService )\n-                .jsonMapper(jsonMapper)\n-                .jdbcTemplate( this.jdbcTemplate )\n-                .build();\n-        // @formatter:on\n+            .programInstanceStore( this.programInstanceStore )\n+            .trackerAccessManager( this.trackerAccessManager )\n+            .applicationEventPublisher( this.applicationEventPublisher )\n+            .programRuleVariableService( this.programRuleVariableService )\n+            .currentUserService( this.currentUserService )\n+            .jsonMapper( jsonMapper )\n+            .jdbcTemplate( this.jdbcTemplate )\n+            .build();\n     }\n }\n", "next_change": {"commit": "d360652a896bee650a842567e26cd1e62145cccb", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/ServiceDelegatorSupplier.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/ServiceDelegatorSupplier.java\nindex 1097a4eaa3..be25ee539c 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/ServiceDelegatorSupplier.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/ServiceDelegatorSupplier.java\n", "chunk": "@@ -79,14 +79,16 @@ public class ServiceDelegatorSupplier implements Supplier<ServiceDelegator>\n     @Override\n     public ServiceDelegator get()\n     {\n+        // @formatter:off\n         return ServiceDelegator.builder()\n-            .programInstanceStore( this.programInstanceStore )\n-            .trackerAccessManager( this.trackerAccessManager )\n-            .applicationEventPublisher( this.applicationEventPublisher )\n-            .programRuleVariableService( this.programRuleVariableService )\n-            .currentUserService( this.currentUserService )\n-            .jsonMapper( jsonMapper )\n-            .jdbcTemplate( this.jdbcTemplate )\n-            .build();\n+                .programInstanceStore( this.programInstanceStore )\n+                .trackerAccessManager( this.trackerAccessManager )\n+                .applicationEventPublisher( this.applicationEventPublisher )\n+                .programRuleVariableService( this.programRuleVariableService )\n+                .currentUserService( this.currentUserService )\n+                .jsonMapper(jsonMapper)\n+                .jdbcTemplate( this.jdbcTemplate )\n+                .build();\n+        // @formatter:on\n     }\n }\n", "next_change": {"commit": "c9cbe9cf8b22a49324c53b68eba31b9c63684df4", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/ServiceDelegatorSupplier.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/ServiceDelegatorSupplier.java\nindex be25ee539c..1097a4eaa3 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/ServiceDelegatorSupplier.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/ServiceDelegatorSupplier.java\n", "chunk": "@@ -79,16 +79,14 @@ public class ServiceDelegatorSupplier implements Supplier<ServiceDelegator>\n     @Override\n     public ServiceDelegator get()\n     {\n-        // @formatter:off\n         return ServiceDelegator.builder()\n-                .programInstanceStore( this.programInstanceStore )\n-                .trackerAccessManager( this.trackerAccessManager )\n-                .applicationEventPublisher( this.applicationEventPublisher )\n-                .programRuleVariableService( this.programRuleVariableService )\n-                .currentUserService( this.currentUserService )\n-                .jsonMapper(jsonMapper)\n-                .jdbcTemplate( this.jdbcTemplate )\n-                .build();\n-        // @formatter:on\n+            .programInstanceStore( this.programInstanceStore )\n+            .trackerAccessManager( this.trackerAccessManager )\n+            .applicationEventPublisher( this.applicationEventPublisher )\n+            .programRuleVariableService( this.programRuleVariableService )\n+            .currentUserService( this.currentUserService )\n+            .jsonMapper( jsonMapper )\n+            .jdbcTemplate( this.jdbcTemplate )\n+            .build();\n     }\n }\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/ServiceDelegatorSupplier.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/ServiceDelegatorSupplier.java\nindex be25ee539c..0c79583e35 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/ServiceDelegatorSupplier.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/ServiceDelegatorSupplier.java\n", "chunk": "@@ -79,16 +80,14 @@ public class ServiceDelegatorSupplier implements Supplier<ServiceDelegator>\n     @Override\n     public ServiceDelegator get()\n     {\n-        // @formatter:off\n         return ServiceDelegator.builder()\n-                .programInstanceStore( this.programInstanceStore )\n-                .trackerAccessManager( this.trackerAccessManager )\n-                .applicationEventPublisher( this.applicationEventPublisher )\n-                .programRuleVariableService( this.programRuleVariableService )\n-                .currentUserService( this.currentUserService )\n-                .jsonMapper(jsonMapper)\n-                .jdbcTemplate( this.jdbcTemplate )\n-                .build();\n-        // @formatter:on\n+            .programInstanceStore( this.programInstanceStore )\n+            .trackerAccessManager( this.trackerAccessManager )\n+            .applicationEventPublisher( this.applicationEventPublisher )\n+            .programRuleVariableService( this.programRuleVariableService )\n+            .currentUserService( this.currentUserService )\n+            .jsonMapper( jsonMapper )\n+            .jdbcTemplate( this.jdbcTemplate )\n+            .build();\n     }\n }\n", "next_change": {"commit": "f8cfa7437ac99962a94ceef4b9150478899ceb2b", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/ServiceDelegatorSupplier.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/ServiceDelegatorSupplier.java\nindex 0c79583e35..066550f140 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/ServiceDelegatorSupplier.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/ServiceDelegatorSupplier.java\n", "chunk": "@@ -42,52 +43,53 @@ import org.springframework.stereotype.Component;\n \n import com.fasterxml.jackson.databind.ObjectMapper;\n \n+import lombok.NonNull;\n+import lombok.RequiredArgsConstructor;\n+\n /**\n  * @author Luciano Fiandesio\n  */\n @Component( \"workContextServiceDelegatorSupplier\" )\n+@RequiredArgsConstructor\n public class ServiceDelegatorSupplier implements Supplier<ServiceDelegator>\n {\n+    @NonNull\n     private final ProgramInstanceStore programInstanceStore;\n \n+    @NonNull\n     private final TrackerAccessManager trackerAccessManager;\n \n+    @NonNull\n     private final ApplicationEventPublisher applicationEventPublisher;\n \n+    @NonNull\n     private final ProgramRuleVariableService programRuleVariableService;\n \n-    private final CurrentUserService currentUserService;\n+    @NonNull\n+    private final EventImporterUserService eventImporterUserService;\n \n+    @NonNull\n     private final ObjectMapper jsonMapper;\n \n+    @NonNull\n+    @Qualifier( \"readOnlyJdbcTemplate\" )\n     private final JdbcTemplate jdbcTemplate;\n \n-    public ServiceDelegatorSupplier( ProgramInstanceStore programInstanceStore,\n-        TrackerAccessManager trackerAccessManager, ApplicationEventPublisher applicationEventPublisher,\n-        ProgramRuleVariableService programRuleVariableService, CurrentUserService currentUserService,\n-        ObjectMapper jsonMapper,\n-        @Qualifier( \"readOnlyJdbcTemplate\" ) JdbcTemplate jdbcTemplate)\n-    {\n-        this.programInstanceStore = programInstanceStore;\n-        this.trackerAccessManager = trackerAccessManager;\n-        this.applicationEventPublisher = applicationEventPublisher;\n-        this.programRuleVariableService = programRuleVariableService;\n-        this.currentUserService = currentUserService;\n-        this.jsonMapper =jsonMapper;\n-        this.jdbcTemplate = jdbcTemplate;\n-    }\n+    @NonNull\n+    private final AuditManager auditManager;\n \n     @Override\n     public ServiceDelegator get()\n     {\n         return ServiceDelegator.builder()\n-            .programInstanceStore( this.programInstanceStore )\n-            .trackerAccessManager( this.trackerAccessManager )\n-            .applicationEventPublisher( this.applicationEventPublisher )\n-            .programRuleVariableService( this.programRuleVariableService )\n-            .currentUserService( this.currentUserService )\n+            .programInstanceStore( programInstanceStore )\n+            .trackerAccessManager( trackerAccessManager )\n+            .applicationEventPublisher( applicationEventPublisher )\n+            .programRuleVariableService( programRuleVariableService )\n+            .eventImporterUserService( eventImporterUserService )\n             .jsonMapper( jsonMapper )\n-            .jdbcTemplate( this.jdbcTemplate )\n+            .jdbcTemplate( jdbcTemplate )\n+            .auditManager( auditManager )\n             .build();\n     }\n }\n", "next_change": {"commit": "00b4b16e29d2506465f723a914352c1047a220fe", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/ServiceDelegatorSupplier.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/ServiceDelegatorSupplier.java\nindex 066550f140..a8278ab722 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/ServiceDelegatorSupplier.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/ServiceDelegatorSupplier.java\n", "chunk": "@@ -90,6 +97,8 @@ public class ServiceDelegatorSupplier implements Supplier<ServiceDelegator>\n             .jsonMapper( jsonMapper )\n             .jdbcTemplate( jdbcTemplate )\n             .auditManager( auditManager )\n+            .fileResourceService( fileResourceService )\n+            .organisationUnitService( organisationUnitService )\n             .build();\n     }\n }\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "message": "Merge commit", "committedDate": null}, {"oid": "f8cfa7437ac99962a94ceef4b9150478899ceb2b", "committedDate": "2020-09-11 13:59:14 +0200", "message": "fix: audit for event importer are now present (#6138) (#6140)"}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "00b4b16e29d2506465f723a914352c1047a220fe", "committedDate": "2022-01-31 18:13:04 +0100", "message": "fix: Validate event association datavalues (#9669)"}, {"oid": "2886ebea404331a2c3f78909bcb92cca1ecc7913", "committedDate": "2022-10-12 09:39:22 +0200", "message": "chore: only use @Nonnull and ban similar annotations (#12071)"}, {"oid": "e03cf3818e639ba738dd01f658423914dcd7bfba", "committedDate": "2023-05-04 09:24:50 +0200", "message": "chore: Rename ProgramInstanceStore to EnrollmentStore [TECH-1547] (#13808)"}, {"oid": "02336c9611c0dd85d5038223bddbfdebc0aae526", "committedDate": "2023-05-11 19:34:26 +0200", "message": "chore: move old tracker dxf2 code into deprecated package (#13901)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkzMTcxOA==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r446931718", "body": "FIXME here", "bodyText": "FIXME here", "bodyHTML": "<p dir=\"auto\">FIXME here</p>", "author": "enricocolasante", "createdAt": "2020-06-29T12:28:31Z", "path": "dhis-2/dhis-services/dhis-service-core/src/test/java/org/hisp/dhis/jdbc/batchhandler/DataValueBatchHandlerTest.java", "diffHunk": "@@ -153,6 +154,7 @@ public boolean emptyDatabaseAfterTest()\n     // -------------------------------------------------------------------------\n \n     @Test\n+    @Ignore // FIXME luciano - this test fails with a sql error after upgrading H2", "originalCommit": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODMxODUxOQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448318519", "bodyText": "This seems to be a problem with the Quick framework. The framework generates the following invalid query:\ninsert into datavalue (dataelementid,periodid,sourceid,categoryoptioncomboid,attributeoptioncomboid,value,storedby,created,lastupdated,comment,followup,deleted) values (1,1,1,1,1,'10','StoredBy','2020-07-01T14:08:26','2020-07-01T14:08:26','Comment',false,false),\n\n(note the parenthesis at the end)", "author": "luciano-fiandesio", "createdAt": "2020-07-01T12:09:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkzMTcxOA=="}], "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "01769b37b366d1325c2e41fec7888b596af1e9d6", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-core/src/test/java/org/hisp/dhis/jdbc/batchhandler/DataValueBatchHandlerTest.java b/dhis-2/dhis-services/dhis-service-core/src/test/java/org/hisp/dhis/jdbc/batchhandler/DataValueBatchHandlerTest.java\nindex 6bade1caec..2667c8a0a4 100644\n--- a/dhis-2/dhis-services/dhis-service-core/src/test/java/org/hisp/dhis/jdbc/batchhandler/DataValueBatchHandlerTest.java\n+++ b/dhis-2/dhis-services/dhis-service-core/src/test/java/org/hisp/dhis/jdbc/batchhandler/DataValueBatchHandlerTest.java\n", "chunk": "@@ -143,12 +143,6 @@ public class DataValueBatchHandlerTest\n         batchHandler.flush();\n     }\n \n-    @Override\n-    public boolean emptyDatabaseAfterTest()\n-    {\n-        return true;\n-    }\n-\n     // -------------------------------------------------------------------------\n     // Tests\n     // -------------------------------------------------------------------------\n", "next_change": {"commit": "ea76fa86409613c9766d4508d65c88ac55c413c3", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-core/src/test/java/org/hisp/dhis/jdbc/batchhandler/DataValueBatchHandlerTest.java b/dhis-2/dhis-services/dhis-service-core/src/test/java/org/hisp/dhis/jdbc/batchhandler/DataValueBatchHandlerTest.java\nindex 2667c8a0a4..c79c70ee55 100644\n--- a/dhis-2/dhis-services/dhis-service-core/src/test/java/org/hisp/dhis/jdbc/batchhandler/DataValueBatchHandlerTest.java\n+++ b/dhis-2/dhis-services/dhis-service-core/src/test/java/org/hisp/dhis/jdbc/batchhandler/DataValueBatchHandlerTest.java\n", "chunk": "@@ -148,12 +159,14 @@ public class DataValueBatchHandlerTest\n     // -------------------------------------------------------------------------\n \n     @Test\n-    @Ignore // FIXME luciano - this test fails with a sql error after upgrading H2\n+    @Ignore // FIXME luciano - this test fails with a sql error after upgrading\n+            // H2\n     public void testInsertObject()\n     {\n         batchHandler.insertObject( dataValueA );\n \n-        DataValue dataValue = dataValueService.getDataValue( dataElementA, periodA, unitA, categoryOptionComboA, categoryOptionComboA );\n+        DataValue dataValue = dataValueService.getDataValue( dataElementA, periodA, unitA, categoryOptionComboA,\n+            categoryOptionComboA );\n \n         assertEquals( dataValue, dataValueA );\n     }\n", "next_change": {"commit": "22d5da9d9a812b02eb5acd643112a6b050b5d63c", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-core/src/test/java/org/hisp/dhis/jdbc/batchhandler/DataValueBatchHandlerTest.java b/dhis-2/dhis-services/dhis-service-core/src/test/java/org/hisp/dhis/jdbc/batchhandler/DataValueBatchHandlerTest.java\nindex c79c70ee55..ee5464aca0 100644\n--- a/dhis-2/dhis-services/dhis-service-core/src/test/java/org/hisp/dhis/jdbc/batchhandler/DataValueBatchHandlerTest.java\n+++ b/dhis-2/dhis-services/dhis-service-core/src/test/java/org/hisp/dhis/jdbc/batchhandler/DataValueBatchHandlerTest.java\n", "chunk": "@@ -157,38 +152,29 @@ public class DataValueBatchHandlerTest\n     // -------------------------------------------------------------------------\n     // Tests\n     // -------------------------------------------------------------------------\n-\n     @Test\n-    @Ignore // FIXME luciano - this test fails with a sql error after upgrading\n-            // H2\n-    public void testInsertObject()\n+    @Disabled( \"luciano - this test fails with a sql error after upgrading H2\" )\n+    void testInsertObject()\n     {\n         batchHandler.insertObject( dataValueA );\n-\n         DataValue dataValue = dataValueService.getDataValue( dataElementA, periodA, unitA, categoryOptionComboA,\n             categoryOptionComboA );\n-\n         assertEquals( dataValue, dataValueA );\n     }\n \n     @Test\n-    public void testAddObject()\n+    void testAddObject()\n     {\n         batchHandler.addObject( dataValueA );\n         batchHandler.addObject( dataValueB );\n         batchHandler.addObject( dataValueC );\n         batchHandler.addObject( dataValueD );\n-\n         batchHandler.flush();\n-\n         List<DataValue> values = dataValueService.getDataValues( new DataExportParams()\n-            .setDataElements( Sets.newHashSet( dataElementA ) )\n-            .setPeriods( Sets.newHashSet( periodA, periodB ) )\n+            .setDataElements( Sets.newHashSet( dataElementA ) ).setPeriods( Sets.newHashSet( periodA, periodB ) )\n             .setOrganisationUnits( Sets.newHashSet( unitA, unitB ) ) );\n-\n         assertNotNull( values );\n         assertEquals( 4, values.size() );\n-\n         assertTrue( values.contains( dataValueA ) );\n         assertTrue( values.contains( dataValueB ) );\n         assertTrue( values.contains( dataValueC ) );\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "message": "Merge commit", "committedDate": null}, {"oid": "01769b37b366d1325c2e41fec7888b596af1e9d6", "committedDate": "2020-12-15 12:54:47 +0100", "message": "fix: Set default value to true for empty database after test method  (#6913)"}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "22d5da9d9a812b02eb5acd643112a6b050b5d63c", "committedDate": "2021-12-16 13:19:38 +0100", "message": "chore: migrate tests to JUnit 5 (#9467)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "82d90694d048b0a3e9d275d5f64e7a5881da7c05", "committedDate": "2022-07-01 09:37:06 +0200", "message": "chore: Handle H2 tests for core module [TECH-1208] (#11195)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkzNDAwMQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r446934001", "body": "remove this return", "bodyText": "remove this return", "bodyHTML": "<p dir=\"auto\">remove this return</p>", "author": "enricocolasante", "createdAt": "2020-06-29T12:32:06Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/EventBaseCheck.java", "diffHunk": "@@ -0,0 +1,137 @@\n+package org.hisp.dhis.dxf2.events.importer.shared.validation;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import static org.hisp.dhis.dxf2.importsummary.ImportStatus.ERROR;\n+import static org.hisp.dhis.program.ProgramStatus.COMPLETED;\n+import static org.hisp.dhis.security.Authorities.F_EDIT_EXPIRED;\n+import static org.hisp.dhis.util.DateUtils.dateIsValid;\n+import static org.hisp.dhis.util.DateUtils.parseDate;\n+import static org.hisp.dhis.util.DateUtils.removeTimeStamp;\n+\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.hisp.dhis.dxf2.common.ImportOptions;\n+import org.hisp.dhis.dxf2.events.importer.Checker;\n+import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n+import org.hisp.dhis.dxf2.events.importer.shared.ImmutableEvent;\n+import org.hisp.dhis.dxf2.importsummary.ImportConflict;\n+import org.hisp.dhis.dxf2.importsummary.ImportSummary;\n+import org.hisp.dhis.program.ProgramInstance;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+public class EventBaseCheck\n+    implements\n+    Checker\n+{\n+    @Override\n+    public ImportSummary check( ImmutableEvent event, WorkContext ctx )\n+    {\n+        ImportSummary importSummary = new ImportSummary();\n+        List<String> errors = validate( event, ctx );\n+\n+        if ( !errors.isEmpty() )\n+        {\n+            importSummary.setStatus( ERROR );\n+            importSummary.getConflicts()\n+                .addAll( errors.stream().map( s -> new ImportConflict( \"Event\", s ) ).collect( Collectors.toList() ) );\n+            importSummary.incrementIgnored();\n+\n+            return importSummary;", "originalCommit": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODMxOTMwOQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448319309", "bodyText": "Fixed, removed return", "author": "luciano-fiandesio", "createdAt": "2020-07-01T12:10:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkzNDAwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "7032498b0cbac9437a93d7deeb72862937c55a98", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/EventBaseCheck.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/EventBaseCheck.java\nindex 8749f8c0aa..8f47f2aa92 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/EventBaseCheck.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/EventBaseCheck.java\n", "chunk": "@@ -68,9 +68,7 @@ public class EventBaseCheck\n                 .addAll( errors.stream().map( s -> new ImportConflict( \"Event\", s ) ).collect( Collectors.toList() ) );\n             importSummary.incrementIgnored();\n \n-            return importSummary;\n         }\n-\n         return importSummary;\n     }\n \n", "next_change": {"commit": "d0687a6c7c9e1c4dd64c4dc669bb80ae6e8c8c8b", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/EventBaseCheck.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/EventBaseCheck.java\nindex 8f47f2aa92..a3b6a0aa42 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/EventBaseCheck.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/EventBaseCheck.java\n", "chunk": "@@ -74,11 +73,17 @@ public class EventBaseCheck\n \n     private List<String> validate( ImmutableEvent event, WorkContext ctx )\n     {\n-        ProgramInstance programInstance = ctx.getProgramInstanceMap().get( event.getUid() );\n-        ImportOptions importOptions = ctx.getImportOptions();\n-\n         List<String> errors = new ArrayList<>();\n \n+        validateDates( event, errors );\n+\n+        validateProgramInstance( event, ctx, errors);\n+\n+        return errors;\n+    }\n+\n+    private void validateDates( ImmutableEvent event, List<String> errors )\n+    {\n         if ( event.getDueDate() != null && !dateIsValid( event.getDueDate() ) )\n         {\n             errors.add( \"Invalid event due date: \" + event.getDueDate() );\n", "next_change": {"commit": "d360652a896bee650a842567e26cd1e62145cccb", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/EventBaseCheck.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/EventBaseCheck.java\nindex a3b6a0aa42..8749f8c0aa 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/EventBaseCheck.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/EventBaseCheck.java\n", "chunk": "@@ -62,28 +64,23 @@ public class EventBaseCheck implements Checker\n         if ( !errors.isEmpty() )\n         {\n             importSummary.setStatus( ERROR );\n-            importSummary.setReference( event.getEvent() );\n             importSummary.getConflicts()\n                 .addAll( errors.stream().map( s -> new ImportConflict( \"Event\", s ) ).collect( Collectors.toList() ) );\n             importSummary.incrementIgnored();\n \n+            return importSummary;\n         }\n+\n         return importSummary;\n     }\n \n     private List<String> validate( ImmutableEvent event, WorkContext ctx )\n     {\n-        List<String> errors = new ArrayList<>();\n-\n-        validateDates( event, errors );\n-\n-        validateProgramInstance( event, ctx, errors);\n+        ProgramInstance programInstance = ctx.getProgramInstanceMap().get( event.getUid() );\n+        ImportOptions importOptions = ctx.getImportOptions();\n \n-        return errors;\n-    }\n+        List<String> errors = new ArrayList<>();\n \n-    private void validateDates( ImmutableEvent event, List<String> errors )\n-    {\n         if ( event.getDueDate() != null && !dateIsValid( event.getDueDate() ) )\n         {\n             errors.add( \"Invalid event due date: \" + event.getDueDate() );\n", "next_change": {"commit": "9102e2ff75b790dcd8b2692d12f6417cb2d29d0b", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/EventBaseCheck.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/EventBaseCheck.java\nindex 8749f8c0aa..a3b6a0aa42 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/EventBaseCheck.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/EventBaseCheck.java\n", "chunk": "@@ -64,23 +62,28 @@ public class EventBaseCheck\n         if ( !errors.isEmpty() )\n         {\n             importSummary.setStatus( ERROR );\n+            importSummary.setReference( event.getEvent() );\n             importSummary.getConflicts()\n                 .addAll( errors.stream().map( s -> new ImportConflict( \"Event\", s ) ).collect( Collectors.toList() ) );\n             importSummary.incrementIgnored();\n \n-            return importSummary;\n         }\n-\n         return importSummary;\n     }\n \n     private List<String> validate( ImmutableEvent event, WorkContext ctx )\n     {\n-        ProgramInstance programInstance = ctx.getProgramInstanceMap().get( event.getUid() );\n-        ImportOptions importOptions = ctx.getImportOptions();\n-\n         List<String> errors = new ArrayList<>();\n \n+        validateDates( event, errors );\n+\n+        validateProgramInstance( event, ctx, errors);\n+\n+        return errors;\n+    }\n+\n+    private void validateDates( ImmutableEvent event, List<String> errors )\n+    {\n         if ( event.getDueDate() != null && !dateIsValid( event.getDueDate() ) )\n         {\n             errors.add( \"Invalid event due date: \" + event.getDueDate() );\n", "next_change": null}]}}]}}]}}]}, "revised_code_in_main": {"commit": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/EventBaseCheck.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/EventBaseCheck.java\nindex 8749f8c0aa..a3b6a0aa42 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/EventBaseCheck.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/EventBaseCheck.java\n", "chunk": "@@ -64,23 +62,28 @@ public class EventBaseCheck\n         if ( !errors.isEmpty() )\n         {\n             importSummary.setStatus( ERROR );\n+            importSummary.setReference( event.getEvent() );\n             importSummary.getConflicts()\n                 .addAll( errors.stream().map( s -> new ImportConflict( \"Event\", s ) ).collect( Collectors.toList() ) );\n             importSummary.incrementIgnored();\n \n-            return importSummary;\n         }\n-\n         return importSummary;\n     }\n \n     private List<String> validate( ImmutableEvent event, WorkContext ctx )\n     {\n-        ProgramInstance programInstance = ctx.getProgramInstanceMap().get( event.getUid() );\n-        ImportOptions importOptions = ctx.getImportOptions();\n-\n         List<String> errors = new ArrayList<>();\n \n+        validateDates( event, errors );\n+\n+        validateProgramInstance( event, ctx, errors);\n+\n+        return errors;\n+    }\n+\n+    private void validateDates( ImmutableEvent event, List<String> errors )\n+    {\n         if ( event.getDueDate() != null && !dateIsValid( event.getDueDate() ) )\n         {\n             errors.add( \"Invalid event due date: \" + event.getDueDate() );\n", "next_change": null}]}, "commits_in_main": [{"oid": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "message": "Merge commit", "committedDate": null}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "6f3422ff9a182b183a9e3a2f61cf457bb23cb092", "committedDate": "2021-06-10 13:13:51 +0200", "message": "chore: encapsulates import conflicts [DHIS2-4414]  (#8164)"}, {"oid": "1e593837ab1c64884a8ac615c7cc8c3471a219ee", "committedDate": "2021-11-18 09:33:25 +0100", "message": "refactor: validators, checkers and processors in old importer are now spring beans [TECH-797] (#9218)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "e4f8abdfdb132f536835b3be17a3391da2089823", "committedDate": "2023-05-03 11:31:41 +0000", "message": "chore: Rename ProgramInstance to Enrollment [TECH-1547] (#13794)"}, {"oid": "58331f5dd72cc6da992105c673ff9edee11ef4b7", "committedDate": "2023-05-04 13:17:21 +0200", "message": "chore: Rename most programInstance occurrences [TECH-1547] (#13817)"}, {"oid": "02336c9611c0dd85d5038223bddbfdebc0aae526", "committedDate": "2023-05-11 19:34:26 +0200", "message": "chore: move old tracker dxf2 code into deprecated package (#13901)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk4NjIwMA==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r446986200", "body": "TODO?", "bodyText": "TODO?", "bodyHTML": "<p dir=\"auto\">TODO?</p>", "author": "enricocolasante", "createdAt": "2020-06-29T13:49:42Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/postprocess/PublishEventPostProcessor.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer.update.postprocess;\n+\n+import org.hisp.dhis.dataelement.DataElement;\n+import org.hisp.dhis.dxf2.events.event.DataValue;\n+import org.hisp.dhis.dxf2.events.event.Event;\n+import org.hisp.dhis.dxf2.events.importer.Processor;\n+import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n+import org.hisp.dhis.programrule.engine.DataValueUpdatedEvent;\n+\n+public class PublishEventPostProcessor\n+    implements\n+    Processor\n+{\n+\n+    @Override\n+    public void process( final Event event, final WorkContext ctx )\n+    {\n+        boolean isLinkedWithRuleVariable = false;\n+\n+        for ( final DataValue dv : event.getDataValues() )\n+        {\n+            final DataElement dataElement = ctx.getDataElementMap().get( dv.getDataElement() );\n+\n+            if ( dataElement != null )\n+            {\n+                // TODO: luciano preload the value", "originalCommit": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODgwNjc2NA==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448806764", "bodyText": "Yes, this has to be finalized.", "author": "luciano-fiandesio", "createdAt": "2020-07-02T07:37:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk4NjIwMA=="}], "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "f64ecb063740ab7f445325d39a02ce25a85646fc", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/postprocess/PublishEventPostProcessor.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/postprocess/PublishEventPostProcessor.java\nindex 754d59ba1a..157553f7f7 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/postprocess/PublishEventPostProcessor.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/postprocess/PublishEventPostProcessor.java\n", "chunk": "@@ -53,7 +53,7 @@ public class PublishEventPostProcessor\n             {\n                 // TODO: luciano preload the value\n                 isLinkedWithRuleVariable = ctx.getServiceDelegator().getProgramRuleVariableService()\n-                    .isLinkedToProgramRuleVariable( ctx.getProgramsMap().get( event.getProgram() ), dataElement );\n+                    .isLinkedToProgramRuleVariableCached( ctx.getProgramsMap().get( event.getProgram() ), dataElement );\n \n                 if ( isLinkedWithRuleVariable )\n                 {\n", "next_change": null}]}, "commits_in_main": [{"oid": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "message": "Merge commit", "committedDate": null}, {"oid": "f7525b730472ced1f1a3245e78f9c63b2d9c7b1b", "committedDate": "2021-01-05 12:04:24 +0100", "message": "fix: send message rule action when stage is part of registration"}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "517432bf915d0219cf3b60df8e41ee110f1bc2e9", "committedDate": "2021-02-03 09:58:30 +0100", "message": "fix: Add consistent PSI event parameters (#7251)"}, {"oid": "e8553c65b5378308a3ab1f40fc18e0bd909351c7", "committedDate": "2021-02-09 09:19:29 +0100", "message": "fix: DHIS2-10399 switch back using Strings UIDs over long in ProgramRuleEngineService (#7308)"}, {"oid": "f64ecb063740ab7f445325d39a02ce25a85646fc", "committedDate": "2021-03-16 08:45:31 +0100", "message": "fix: Cache to check if a data element has a link with program rule variable [TECH-576] (#7645)"}, {"oid": "1e593837ab1c64884a8ac615c7cc8c3471a219ee", "committedDate": "2021-11-18 09:33:25 +0100", "message": "refactor: validators, checkers and processors in old importer are now spring beans [TECH-797] (#9218)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "02336c9611c0dd85d5038223bddbfdebc0aae526", "committedDate": "2023-05-11 19:34:26 +0200", "message": "chore: move old tracker dxf2 code into deprecated package (#13901)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzYyMzk1Mg==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r447623952", "body": "If its null, perhaps we should throw an error stating that? Other assumptions might break if we think that there should always be a program instance?", "bodyText": "If its null, perhaps we should throw an error stating that? Other assumptions might break if we think that there should always be a program instance?", "bodyHTML": "<p dir=\"auto\">If its null, perhaps we should throw an error stating that? Other assumptions might break if we think that there should always be a program instance?</p>", "author": "Bekkalizer", "createdAt": "2020-06-30T11:53:49Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/ProgramInstanceCheck.java", "diffHunk": "@@ -0,0 +1,103 @@\n+package org.hisp.dhis.dxf2.events.importer.shared.validation;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import static org.hisp.dhis.dxf2.importsummary.ImportSummary.error;\n+import static org.hisp.dhis.dxf2.importsummary.ImportSummary.success;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.hisp.dhis.common.BaseIdentifiableObject;\n+import org.hisp.dhis.dxf2.events.importer.Checker;\n+import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n+import org.hisp.dhis.dxf2.events.importer.shared.ImmutableEvent;\n+import org.hisp.dhis.dxf2.importsummary.ImportSummary;\n+import org.hisp.dhis.program.Program;\n+import org.hisp.dhis.program.ProgramInstance;\n+import org.hisp.dhis.program.ProgramStatus;\n+import org.hisp.dhis.trackedentity.TrackedEntityInstance;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+public class ProgramInstanceCheck implements Checker\n+{\n+    @Override\n+    public ImportSummary check( ImmutableEvent event, WorkContext ctx )\n+    {\n+        Program program = ctx.getProgramsMap().get( event.getProgram() );\n+        ProgramInstance programInstance = ctx.getProgramInstanceMap().get( event.getUid() );\n+        final Optional<TrackedEntityInstance> trackedEntityInstance = ctx.getTrackedEntityInstance( event.getUid() );\n+\n+        String teiUid = \"\";\n+        if ( trackedEntityInstance.isPresent() )\n+        {\n+            teiUid = trackedEntityInstance.get().getUid();\n+        }\n+        \n+        List<ProgramInstance> programInstances;\n+\n+        if ( programInstance == null ) // Program Instance should be NOT null, after the pre-processing stage", "originalCommit": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "ea76fa86409613c9766d4508d65c88ac55c413c3", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/ProgramInstanceCheck.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/ProgramInstanceCheck.java\nindex e50fd6cc86..cc68a83281 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/ProgramInstanceCheck.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/ProgramInstanceCheck.java\n", "chunk": "@@ -62,10 +60,11 @@ public class ProgramInstanceCheck implements Checker\n         {\n             teiUid = trackedEntityInstance.get().getUid();\n         }\n-        \n+\n         List<ProgramInstance> programInstances;\n \n-        if ( programInstance == null ) // Program Instance should be NOT null, after the pre-processing stage\n+        if ( programInstance == null ) // Program Instance should be NOT null,\n+                                       // after the pre-processing stage\n         {\n             if ( program.isRegistration() )\n             {\n", "next_change": {"commit": "0fa9d073af82c6f3ecadfc72daaa6fedd0435a45", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/ProgramInstanceCheck.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/ProgramInstanceCheck.java\nindex cc68a83281..e62f6fc62b 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/ProgramInstanceCheck.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/ProgramInstanceCheck.java\n", "chunk": "@@ -64,7 +66,7 @@ public class ProgramInstanceCheck implements Checker\n         List<ProgramInstance> programInstances;\n \n         if ( programInstance == null ) // Program Instance should be NOT null,\n-                                       // after the pre-processing stage\n+                                      // after the pre-processing stage\n         {\n             if ( program.isRegistration() )\n             {\n", "next_change": {"commit": "e4f8abdfdb132f536835b3be17a3391da2089823", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/ProgramInstanceCheck.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/ProgramInstanceCheck.java\nindex e62f6fc62b..ba4fb6a4e4 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/ProgramInstanceCheck.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/ProgramInstanceCheck.java\n", "chunk": "@@ -63,23 +63,23 @@ public class ProgramInstanceCheck implements Checker\n             teiUid = trackedEntityInstance.get().getUid();\n         }\n \n-        List<ProgramInstance> programInstances;\n+        List<Enrollment> enrollments;\n \n-        if ( programInstance == null ) // Program Instance should be NOT null,\n-                                      // after the pre-processing stage\n+        if ( enrollment == null ) // Program Instance should be NOT null,\n+                                 // after the pre-processing stage\n         {\n             if ( program.isRegistration() )\n             {\n-                programInstances = new ArrayList<>( ctx.getServiceDelegator().getProgramInstanceStore()\n+                enrollments = new ArrayList<>( ctx.getServiceDelegator().getProgramInstanceStore()\n                     .get( trackedEntityInstance.orElse( null ), program, ProgramStatus.ACTIVE ) );\n \n-                if ( programInstances.isEmpty() )\n+                if ( enrollments.isEmpty() )\n                 {\n                     return error( \"Tracked entity instance: \"\n                         + teiUid + \" is not enrolled in program: \" + program.getUid(),\n                         event.getEvent() );\n                 }\n-                else if ( programInstances.size() > 1 )\n+                else if ( enrollments.size() > 1 )\n                 {\n                     return error( \"Tracked entity instance: \" + teiUid\n                         + \" has multiple active enrollments in program: \" + program.getUid(),\n", "next_change": {"commit": "e03cf3818e639ba738dd01f658423914dcd7bfba", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/ProgramInstanceCheck.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/ProgramInstanceCheck.java\nindex ba4fb6a4e4..09d595b9db 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/ProgramInstanceCheck.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/ProgramInstanceCheck.java\n", "chunk": "@@ -88,7 +88,7 @@ public class ProgramInstanceCheck implements Checker\n             }\n             else\n             {\n-                enrollments = ctx.getServiceDelegator().getProgramInstanceStore().get( program,\n+                enrollments = ctx.getServiceDelegator().getEnrollmentStore().get( program,\n                     ProgramStatus.ACTIVE );\n \n                 if ( enrollments.size() > 1 )\n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "message": "Merge commit", "committedDate": null}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "1e593837ab1c64884a8ac615c7cc8c3471a219ee", "committedDate": "2021-11-18 09:33:25 +0100", "message": "refactor: validators, checkers and processors in old importer are now spring beans [TECH-797] (#9218)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "0fa9d073af82c6f3ecadfc72daaa6fedd0435a45", "committedDate": "2022-12-01 12:43:48 +0000", "message": "fix: Remove formatting for line comments (#12448)"}, {"oid": "e4f8abdfdb132f536835b3be17a3391da2089823", "committedDate": "2023-05-03 11:31:41 +0000", "message": "chore: Rename ProgramInstance to Enrollment [TECH-1547] (#13794)"}, {"oid": "e03cf3818e639ba738dd01f658423914dcd7bfba", "committedDate": "2023-05-04 09:24:50 +0200", "message": "chore: Rename ProgramInstanceStore to EnrollmentStore [TECH-1547] (#13808)"}, {"oid": "ba38c7fa19a269450161eb73bad6b80b1ef1133b", "committedDate": "2023-05-04 11:23:39 +0200", "message": "chore: Rename most ProgramInstance classes to Enrollment [TECH-1547] (#13811)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAyNjk4OA==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448026988", "body": "author header", "bodyText": "author header", "bodyHTML": "<p dir=\"auto\">author header</p>", "author": "mortenoh", "createdAt": "2020-06-30T23:05:26Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventProcessing.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer;\n+\n+import java.util.List;\n+\n+import org.apache.commons.logging.Log;\n+import org.hisp.dhis.dxf2.events.event.Event;\n+import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n+\n+import static org.apache.commons.logging.LogFactory.getLog;\n+\n+public interface EventProcessing", "originalCommit": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODMxOTU1Mg==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448319552", "bodyText": "Fixed", "author": "luciano-fiandesio", "createdAt": "2020-07-01T12:11:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAyNjk4OA=="}], "type": "inlineReview", "revised_code": {"commit": "7032498b0cbac9437a93d7deeb72862937c55a98", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventProcessing.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventProcessing.java\nindex a8c7fd1453..f9f192d2eb 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventProcessing.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventProcessing.java\n", "chunk": "@@ -36,9 +36,14 @@ import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n \n import static org.apache.commons.logging.LogFactory.getLog;\n \n+/**\n+ * Simple interface that provides processing capabilities on events.\n+ *\n+ * @author maikel arabori\n+ */\n public interface EventProcessing\n {\n-    void process( final WorkContext workContext, final List<Event> events );\n+    void process( WorkContext workContext, List<Event> events );\n \n     Log log = getLog( EventProcessing.class );\n \n", "next_change": {"commit": "d360652a896bee650a842567e26cd1e62145cccb", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventProcessing.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventProcessing.java\nindex f9f192d2eb..a8c7fd1453 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventProcessing.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventProcessing.java\n", "chunk": "@@ -36,14 +36,9 @@ import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n \n import static org.apache.commons.logging.LogFactory.getLog;\n \n-/**\n- * Simple interface that provides processing capabilities on events.\n- *\n- * @author maikel arabori\n- */\n public interface EventProcessing\n {\n-    void process( WorkContext workContext, List<Event> events );\n+    void process( final WorkContext workContext, final List<Event> events );\n \n     Log log = getLog( EventProcessing.class );\n \n", "next_change": {"commit": "bf042296956c38e5762dc2763da53fe23bc444a3", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventProcessing.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventProcessing.java\nindex a8c7fd1453..046e525b46 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventProcessing.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventProcessing.java\n", "chunk": "@@ -36,6 +36,11 @@ import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n \n import static org.apache.commons.logging.LogFactory.getLog;\n \n+/**\n+ * Simple interface that provides processing capabilities on events.\n+ *\n+ * @author maikel arabori\n+ */\n public interface EventProcessing\n {\n     void process( final WorkContext workContext, final List<Event> events );\n", "next_change": {"commit": "c9cbe9cf8b22a49324c53b68eba31b9c63684df4", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventProcessing.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventProcessing.java\nindex 046e525b46..f9f192d2eb 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventProcessing.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventProcessing.java\n", "chunk": "@@ -43,7 +43,7 @@ import static org.apache.commons.logging.LogFactory.getLog;\n  */\n public interface EventProcessing\n {\n-    void process( final WorkContext workContext, final List<Event> events );\n+    void process( WorkContext workContext, List<Event> events );\n \n     Log log = getLog( EventProcessing.class );\n \n", "next_change": null}]}}]}}]}}]}, "revised_code_in_main": {"commit": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventProcessing.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventProcessing.java\nindex a8c7fd1453..420a9e65ae 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventProcessing.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventProcessing.java\n", "chunk": "@@ -28,17 +28,22 @@\n \n package org.hisp.dhis.dxf2.events.importer;\n \n+import static org.apache.commons.logging.LogFactory.getLog;\n+\n import java.util.List;\n \n import org.apache.commons.logging.Log;\n import org.hisp.dhis.dxf2.events.event.Event;\n import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n \n-import static org.apache.commons.logging.LogFactory.getLog;\n-\n+/**\n+ * Simple interface that provides processing capabilities on events.\n+ *\n+ * @author maikel arabori\n+ */\n public interface EventProcessing\n {\n-    void process( final WorkContext workContext, final List<Event> events );\n+    void process( WorkContext workContext, List<Event> events );\n \n     Log log = getLog( EventProcessing.class );\n \n", "next_change": {"commit": "1e593837ab1c64884a8ac615c7cc8c3471a219ee", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventProcessing.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventImporterValidationRunner.java\nsimilarity index 54%\nrename from dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventProcessing.java\nrename to dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventImporterValidationRunner.java\nindex 420a9e65ae..11ef1e9291 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventProcessing.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventImporterValidationRunner.java\n", "chunk": "@@ -25,57 +25,55 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n-\n package org.hisp.dhis.dxf2.events.importer;\n \n-import static org.apache.commons.logging.LogFactory.getLog;\n+import static org.hisp.dhis.dxf2.importsummary.ImportStatus.ERROR;\n+import static org.hisp.dhis.dxf2.importsummary.ImportStatus.WARNING;\n \n+import java.util.ArrayList;\n import java.util.List;\n \n-import org.apache.commons.logging.Log;\n import org.hisp.dhis.dxf2.events.event.Event;\n import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n+import org.hisp.dhis.dxf2.events.importer.shared.ImmutableEvent;\n+import org.hisp.dhis.dxf2.importsummary.ImportSummary;\n+import org.springframework.stereotype.Component;\n \n-/**\n- * Simple interface that provides processing capabilities on events.\n- *\n- * @author maikel arabori\n- */\n-public interface EventProcessing\n+@Component\n+public class EventImporterValidationRunner\n {\n-    void process( WorkContext workContext, List<Event> events );\n-\n-    Log log = getLog( EventProcessing.class );\n-\n-    class ProcessorRunner\n+    /**\n+     * Validates the events using the supplied list of validators.\n+     * <p>\n+     * Only returns the ImportSummary for Events that *did* not pass validation\n+     *\n+     * @param workContext workContext for validation runner\n+     * @param events a list of events to validate\n+     * @param checkers a list of checkers to apply\n+     * @return returns the ImportSummary for Events that did not pass validation\n+     */\n+    public List<ImportSummary> run( WorkContext workContext, List<Event> events, List<? extends Checker> checkers )\n     {\n-        private final WorkContext workContext;\n-\n-        private final List<Event> events;\n-\n-        public ProcessorRunner( WorkContext workContext, List<Event> events )\n-        {\n-            this.workContext = workContext;\n-            this.events = events;\n-        }\n+        final List<ImportSummary> importSummaries = new ArrayList<>( 0 );\n \n-        public void run( final List<Class<? extends Processor>> processors )\n+        for ( final Event event : events )\n         {\n-            for ( final Event event : events )\n+            for ( Checker checker : checkers )\n             {\n-                for ( Class<? extends Processor> processor : processors )\n+                final ImportSummary importSummary = checker.check( new ImmutableEvent( event ), workContext );\n+\n+                if ( importSummary.isStatus( ERROR ) || importSummary.isStatus( WARNING ) )\n                 {\n-                    try\n+                    importSummaries.add( importSummary );\n+                    if ( importSummary.isStatus( ERROR ) )\n                     {\n-                        final Processor pre = processor.newInstance();\n-                        pre.process( event, workContext );\n-                    }\n-                    catch ( InstantiationException | IllegalAccessException e )\n-                    {\n-                        log.error( \"An error occurred during Event import processing\", e );\n+                        break;\n                     }\n                 }\n             }\n         }\n+\n+        return importSummaries;\n     }\n+\n }\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "message": "Merge commit", "committedDate": null}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "1e593837ab1c64884a8ac615c7cc8c3471a219ee", "committedDate": "2021-11-18 09:33:25 +0100", "message": "refactor: validators, checkers and processors in old importer are now spring beans [TECH-797] (#9218)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAyNzExMQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448027111", "body": "No @Slf4j lombok ?", "bodyText": "No @slf4j lombok ?", "bodyHTML": "<p dir=\"auto\">No <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/slf4j/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/slf4j\">@slf4j</a> lombok ?</p>", "author": "mortenoh", "createdAt": "2020-06-30T23:05:44Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventProcessing.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer;\n+\n+import java.util.List;\n+\n+import org.apache.commons.logging.Log;\n+import org.hisp.dhis.dxf2.events.event.Event;\n+import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n+\n+import static org.apache.commons.logging.LogFactory.getLog;", "originalCommit": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODMyMDMyNQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448320325", "bodyText": "@slf4j is not available on interfaces", "author": "luciano-fiandesio", "createdAt": "2020-07-01T12:12:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAyNzExMQ=="}], "type": "inlineReview", "revised_code": {"commit": "7032498b0cbac9437a93d7deeb72862937c55a98", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventProcessing.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventProcessing.java\nindex a8c7fd1453..f9f192d2eb 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventProcessing.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventProcessing.java\n", "chunk": "@@ -36,9 +36,14 @@ import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n \n import static org.apache.commons.logging.LogFactory.getLog;\n \n+/**\n+ * Simple interface that provides processing capabilities on events.\n+ *\n+ * @author maikel arabori\n+ */\n public interface EventProcessing\n {\n-    void process( final WorkContext workContext, final List<Event> events );\n+    void process( WorkContext workContext, List<Event> events );\n \n     Log log = getLog( EventProcessing.class );\n \n", "next_change": {"commit": "d360652a896bee650a842567e26cd1e62145cccb", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventProcessing.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventProcessing.java\nindex f9f192d2eb..a8c7fd1453 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventProcessing.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventProcessing.java\n", "chunk": "@@ -36,14 +36,9 @@ import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n \n import static org.apache.commons.logging.LogFactory.getLog;\n \n-/**\n- * Simple interface that provides processing capabilities on events.\n- *\n- * @author maikel arabori\n- */\n public interface EventProcessing\n {\n-    void process( WorkContext workContext, List<Event> events );\n+    void process( final WorkContext workContext, final List<Event> events );\n \n     Log log = getLog( EventProcessing.class );\n \n", "next_change": {"commit": "bf042296956c38e5762dc2763da53fe23bc444a3", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventProcessing.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventProcessing.java\nindex a8c7fd1453..046e525b46 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventProcessing.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventProcessing.java\n", "chunk": "@@ -36,6 +36,11 @@ import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n \n import static org.apache.commons.logging.LogFactory.getLog;\n \n+/**\n+ * Simple interface that provides processing capabilities on events.\n+ *\n+ * @author maikel arabori\n+ */\n public interface EventProcessing\n {\n     void process( final WorkContext workContext, final List<Event> events );\n", "next_change": {"commit": "c9cbe9cf8b22a49324c53b68eba31b9c63684df4", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventProcessing.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventProcessing.java\nindex 046e525b46..f9f192d2eb 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventProcessing.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventProcessing.java\n", "chunk": "@@ -43,7 +43,7 @@ import static org.apache.commons.logging.LogFactory.getLog;\n  */\n public interface EventProcessing\n {\n-    void process( final WorkContext workContext, final List<Event> events );\n+    void process( WorkContext workContext, List<Event> events );\n \n     Log log = getLog( EventProcessing.class );\n \n", "next_change": null}]}}]}}]}}]}, "revised_code_in_main": {"commit": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventProcessing.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventProcessing.java\nindex a8c7fd1453..420a9e65ae 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventProcessing.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventProcessing.java\n", "chunk": "@@ -28,17 +28,22 @@\n \n package org.hisp.dhis.dxf2.events.importer;\n \n+import static org.apache.commons.logging.LogFactory.getLog;\n+\n import java.util.List;\n \n import org.apache.commons.logging.Log;\n import org.hisp.dhis.dxf2.events.event.Event;\n import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n \n-import static org.apache.commons.logging.LogFactory.getLog;\n-\n+/**\n+ * Simple interface that provides processing capabilities on events.\n+ *\n+ * @author maikel arabori\n+ */\n public interface EventProcessing\n {\n-    void process( final WorkContext workContext, final List<Event> events );\n+    void process( WorkContext workContext, List<Event> events );\n \n     Log log = getLog( EventProcessing.class );\n \n", "next_change": {"commit": "1e593837ab1c64884a8ac615c7cc8c3471a219ee", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventProcessing.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventImporterValidationRunner.java\nsimilarity index 54%\nrename from dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventProcessing.java\nrename to dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventImporterValidationRunner.java\nindex 420a9e65ae..11ef1e9291 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventProcessing.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventImporterValidationRunner.java\n", "chunk": "@@ -25,57 +25,55 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n-\n package org.hisp.dhis.dxf2.events.importer;\n \n-import static org.apache.commons.logging.LogFactory.getLog;\n+import static org.hisp.dhis.dxf2.importsummary.ImportStatus.ERROR;\n+import static org.hisp.dhis.dxf2.importsummary.ImportStatus.WARNING;\n \n+import java.util.ArrayList;\n import java.util.List;\n \n-import org.apache.commons.logging.Log;\n import org.hisp.dhis.dxf2.events.event.Event;\n import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n+import org.hisp.dhis.dxf2.events.importer.shared.ImmutableEvent;\n+import org.hisp.dhis.dxf2.importsummary.ImportSummary;\n+import org.springframework.stereotype.Component;\n \n-/**\n- * Simple interface that provides processing capabilities on events.\n- *\n- * @author maikel arabori\n- */\n-public interface EventProcessing\n+@Component\n+public class EventImporterValidationRunner\n {\n-    void process( WorkContext workContext, List<Event> events );\n-\n-    Log log = getLog( EventProcessing.class );\n-\n-    class ProcessorRunner\n+    /**\n+     * Validates the events using the supplied list of validators.\n+     * <p>\n+     * Only returns the ImportSummary for Events that *did* not pass validation\n+     *\n+     * @param workContext workContext for validation runner\n+     * @param events a list of events to validate\n+     * @param checkers a list of checkers to apply\n+     * @return returns the ImportSummary for Events that did not pass validation\n+     */\n+    public List<ImportSummary> run( WorkContext workContext, List<Event> events, List<? extends Checker> checkers )\n     {\n-        private final WorkContext workContext;\n-\n-        private final List<Event> events;\n-\n-        public ProcessorRunner( WorkContext workContext, List<Event> events )\n-        {\n-            this.workContext = workContext;\n-            this.events = events;\n-        }\n+        final List<ImportSummary> importSummaries = new ArrayList<>( 0 );\n \n-        public void run( final List<Class<? extends Processor>> processors )\n+        for ( final Event event : events )\n         {\n-            for ( final Event event : events )\n+            for ( Checker checker : checkers )\n             {\n-                for ( Class<? extends Processor> processor : processors )\n+                final ImportSummary importSummary = checker.check( new ImmutableEvent( event ), workContext );\n+\n+                if ( importSummary.isStatus( ERROR ) || importSummary.isStatus( WARNING ) )\n                 {\n-                    try\n+                    importSummaries.add( importSummary );\n+                    if ( importSummary.isStatus( ERROR ) )\n                     {\n-                        final Processor pre = processor.newInstance();\n-                        pre.process( event, workContext );\n-                    }\n-                    catch ( InstantiationException | IllegalAccessException e )\n-                    {\n-                        log.error( \"An error occurred during Event import processing\", e );\n+                        break;\n                     }\n                 }\n             }\n         }\n+\n+        return importSummaries;\n     }\n+\n }\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "message": "Merge commit", "committedDate": null}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "1e593837ab1c64884a8ac615c7cc8c3471a219ee", "committedDate": "2021-11-18 09:33:25 +0100", "message": "refactor: validators, checkers and processors in old importer are now spring beans [TECH-797] (#9218)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAyNzg4Ng==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448027886", "body": "no need for `final` keyword here? its already final", "bodyText": "no need for final keyword here? its already final", "bodyHTML": "<p dir=\"auto\">no need for <code>final</code> keyword here? its already final</p>", "author": "mortenoh", "createdAt": "2020-06-30T23:08:09Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventProcessing.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer;\n+\n+import java.util.List;\n+\n+import org.apache.commons.logging.Log;\n+import org.hisp.dhis.dxf2.events.event.Event;\n+import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n+\n+import static org.apache.commons.logging.LogFactory.getLog;\n+\n+public interface EventProcessing\n+{\n+    void process( final WorkContext workContext, final List<Event> events );\n+\n+    Log log = getLog( EventProcessing.class );\n+\n+    class ProcessorRunner\n+    {\n+        private final WorkContext workContext;\n+\n+        private final List<Event> events;\n+\n+        public ProcessorRunner( final WorkContext workContext, final List<Event> events )", "originalCommit": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODMyMDU1OA==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448320558", "bodyText": "Fixed, removed", "author": "luciano-fiandesio", "createdAt": "2020-07-01T12:13:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAyNzg4Ng=="}], "type": "inlineReview", "revised_code": {"commit": "7032498b0cbac9437a93d7deeb72862937c55a98", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventProcessing.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventProcessing.java\nindex a8c7fd1453..f9f192d2eb 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventProcessing.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventProcessing.java\n", "chunk": "@@ -48,7 +53,7 @@ public interface EventProcessing\n \n         private final List<Event> events;\n \n-        public ProcessorRunner( final WorkContext workContext, final List<Event> events )\n+        public ProcessorRunner( WorkContext workContext, List<Event> events )\n         {\n             this.workContext = workContext;\n             this.events = events;\n", "next_change": {"commit": "d360652a896bee650a842567e26cd1e62145cccb", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventProcessing.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventProcessing.java\nindex f9f192d2eb..a8c7fd1453 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventProcessing.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventProcessing.java\n", "chunk": "@@ -53,7 +48,7 @@ public interface EventProcessing\n \n         private final List<Event> events;\n \n-        public ProcessorRunner( WorkContext workContext, List<Event> events )\n+        public ProcessorRunner( final WorkContext workContext, final List<Event> events )\n         {\n             this.workContext = workContext;\n             this.events = events;\n", "next_change": {"commit": "bf042296956c38e5762dc2763da53fe23bc444a3", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventProcessing.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventProcessing.java\nindex a8c7fd1453..046e525b46 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventProcessing.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventProcessing.java\n", "chunk": "@@ -48,7 +53,7 @@ public interface EventProcessing\n \n         private final List<Event> events;\n \n-        public ProcessorRunner( final WorkContext workContext, final List<Event> events )\n+        public ProcessorRunner( WorkContext workContext, List<Event> events )\n         {\n             this.workContext = workContext;\n             this.events = events;\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventProcessing.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventProcessing.java\nindex a8c7fd1453..420a9e65ae 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventProcessing.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventProcessing.java\n", "chunk": "@@ -48,7 +53,7 @@ public interface EventProcessing\n \n         private final List<Event> events;\n \n-        public ProcessorRunner( final WorkContext workContext, final List<Event> events )\n+        public ProcessorRunner( WorkContext workContext, List<Event> events )\n         {\n             this.workContext = workContext;\n             this.events = events;\n", "next_change": {"commit": "1e593837ab1c64884a8ac615c7cc8c3471a219ee", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventProcessing.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventImporterValidationRunner.java\nsimilarity index 54%\nrename from dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventProcessing.java\nrename to dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventImporterValidationRunner.java\nindex 420a9e65ae..11ef1e9291 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventProcessing.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventImporterValidationRunner.java\n", "chunk": "@@ -25,57 +25,55 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n-\n package org.hisp.dhis.dxf2.events.importer;\n \n-import static org.apache.commons.logging.LogFactory.getLog;\n+import static org.hisp.dhis.dxf2.importsummary.ImportStatus.ERROR;\n+import static org.hisp.dhis.dxf2.importsummary.ImportStatus.WARNING;\n \n+import java.util.ArrayList;\n import java.util.List;\n \n-import org.apache.commons.logging.Log;\n import org.hisp.dhis.dxf2.events.event.Event;\n import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n+import org.hisp.dhis.dxf2.events.importer.shared.ImmutableEvent;\n+import org.hisp.dhis.dxf2.importsummary.ImportSummary;\n+import org.springframework.stereotype.Component;\n \n-/**\n- * Simple interface that provides processing capabilities on events.\n- *\n- * @author maikel arabori\n- */\n-public interface EventProcessing\n+@Component\n+public class EventImporterValidationRunner\n {\n-    void process( WorkContext workContext, List<Event> events );\n-\n-    Log log = getLog( EventProcessing.class );\n-\n-    class ProcessorRunner\n+    /**\n+     * Validates the events using the supplied list of validators.\n+     * <p>\n+     * Only returns the ImportSummary for Events that *did* not pass validation\n+     *\n+     * @param workContext workContext for validation runner\n+     * @param events a list of events to validate\n+     * @param checkers a list of checkers to apply\n+     * @return returns the ImportSummary for Events that did not pass validation\n+     */\n+    public List<ImportSummary> run( WorkContext workContext, List<Event> events, List<? extends Checker> checkers )\n     {\n-        private final WorkContext workContext;\n-\n-        private final List<Event> events;\n-\n-        public ProcessorRunner( WorkContext workContext, List<Event> events )\n-        {\n-            this.workContext = workContext;\n-            this.events = events;\n-        }\n+        final List<ImportSummary> importSummaries = new ArrayList<>( 0 );\n \n-        public void run( final List<Class<? extends Processor>> processors )\n+        for ( final Event event : events )\n         {\n-            for ( final Event event : events )\n+            for ( Checker checker : checkers )\n             {\n-                for ( Class<? extends Processor> processor : processors )\n+                final ImportSummary importSummary = checker.check( new ImmutableEvent( event ), workContext );\n+\n+                if ( importSummary.isStatus( ERROR ) || importSummary.isStatus( WARNING ) )\n                 {\n-                    try\n+                    importSummaries.add( importSummary );\n+                    if ( importSummary.isStatus( ERROR ) )\n                     {\n-                        final Processor pre = processor.newInstance();\n-                        pre.process( event, workContext );\n-                    }\n-                    catch ( InstantiationException | IllegalAccessException e )\n-                    {\n-                        log.error( \"An error occurred during Event import processing\", e );\n+                        break;\n                     }\n                 }\n             }\n         }\n+\n+        return importSummaries;\n     }\n+\n }\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "message": "Merge commit", "committedDate": null}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "1e593837ab1c64884a8ac615c7cc8c3471a219ee", "committedDate": "2021-11-18 09:33:25 +0100", "message": "refactor: validators, checkers and processors in old importer are now spring beans [TECH-797] (#9218)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAyODA3OA==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448028078", "body": "How does this bubble up to the client?", "bodyText": "How does this bubble up to the client?", "bodyHTML": "<p dir=\"auto\">How does this bubble up to the client?</p>", "author": "mortenoh", "createdAt": "2020-06-30T23:08:48Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventProcessing.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer;\n+\n+import java.util.List;\n+\n+import org.apache.commons.logging.Log;\n+import org.hisp.dhis.dxf2.events.event.Event;\n+import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n+\n+import static org.apache.commons.logging.LogFactory.getLog;\n+\n+public interface EventProcessing\n+{\n+    void process( final WorkContext workContext, final List<Event> events );\n+\n+    Log log = getLog( EventProcessing.class );\n+\n+    class ProcessorRunner\n+    {\n+        private final WorkContext workContext;\n+\n+        private final List<Event> events;\n+\n+        public ProcessorRunner( final WorkContext workContext, final List<Event> events )\n+        {\n+            this.workContext = workContext;\n+            this.events = events;\n+        }\n+\n+        public void run( final List<Class<? extends Processor>> processors )\n+        {\n+            for ( final Event event : events )\n+            {\n+                for ( Class<? extends Processor> processor : processors )\n+                {\n+                    try\n+                    {\n+                        final Processor pre = processor.newInstance();\n+                        pre.process( event, workContext );\n+                    }\n+                    catch ( InstantiationException | IllegalAccessException e )\n+                    {\n+                        log.error( \"An error occurred during Event import processing\", e );", "originalCommit": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM0NjA2Mw==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448346063", "bodyText": "Good point: it does not. This would be a pretty catastrophic exception, so I guess we can abort the entire process. Thoughts @mortenoh ?", "author": "luciano-fiandesio", "createdAt": "2020-07-01T13:00:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAyODA3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODgzMzMzNQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448833335", "bodyText": "We can throw an exception and catch it in CrudControllerAdvice.", "author": "larshelge", "createdAt": "2020-07-02T08:25:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAyODA3OA=="}], "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "1e593837ab1c64884a8ac615c7cc8c3471a219ee", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventProcessing.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventImporterValidationRunner.java\nsimilarity index 54%\nrename from dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventProcessing.java\nrename to dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventImporterValidationRunner.java\nindex a8c7fd1453..11ef1e9291 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventProcessing.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventImporterValidationRunner.java\n", "chunk": "@@ -25,52 +25,55 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n-\n package org.hisp.dhis.dxf2.events.importer;\n \n+import static org.hisp.dhis.dxf2.importsummary.ImportStatus.ERROR;\n+import static org.hisp.dhis.dxf2.importsummary.ImportStatus.WARNING;\n+\n+import java.util.ArrayList;\n import java.util.List;\n \n-import org.apache.commons.logging.Log;\n import org.hisp.dhis.dxf2.events.event.Event;\n import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n+import org.hisp.dhis.dxf2.events.importer.shared.ImmutableEvent;\n+import org.hisp.dhis.dxf2.importsummary.ImportSummary;\n+import org.springframework.stereotype.Component;\n \n-import static org.apache.commons.logging.LogFactory.getLog;\n-\n-public interface EventProcessing\n+@Component\n+public class EventImporterValidationRunner\n {\n-    void process( final WorkContext workContext, final List<Event> events );\n-\n-    Log log = getLog( EventProcessing.class );\n-\n-    class ProcessorRunner\n+    /**\n+     * Validates the events using the supplied list of validators.\n+     * <p>\n+     * Only returns the ImportSummary for Events that *did* not pass validation\n+     *\n+     * @param workContext workContext for validation runner\n+     * @param events a list of events to validate\n+     * @param checkers a list of checkers to apply\n+     * @return returns the ImportSummary for Events that did not pass validation\n+     */\n+    public List<ImportSummary> run( WorkContext workContext, List<Event> events, List<? extends Checker> checkers )\n     {\n-        private final WorkContext workContext;\n-\n-        private final List<Event> events;\n-\n-        public ProcessorRunner( final WorkContext workContext, final List<Event> events )\n-        {\n-            this.workContext = workContext;\n-            this.events = events;\n-        }\n+        final List<ImportSummary> importSummaries = new ArrayList<>( 0 );\n \n-        public void run( final List<Class<? extends Processor>> processors )\n+        for ( final Event event : events )\n         {\n-            for ( final Event event : events )\n+            for ( Checker checker : checkers )\n             {\n-                for ( Class<? extends Processor> processor : processors )\n+                final ImportSummary importSummary = checker.check( new ImmutableEvent( event ), workContext );\n+\n+                if ( importSummary.isStatus( ERROR ) || importSummary.isStatus( WARNING ) )\n                 {\n-                    try\n+                    importSummaries.add( importSummary );\n+                    if ( importSummary.isStatus( ERROR ) )\n                     {\n-                        final Processor pre = processor.newInstance();\n-                        pre.process( event, workContext );\n-                    }\n-                    catch ( InstantiationException | IllegalAccessException e )\n-                    {\n-                        log.error( \"An error occurred during Event import processing\", e );\n+                        break;\n                     }\n                 }\n             }\n         }\n+\n+        return importSummaries;\n     }\n+\n }\n", "next_change": null}]}, "commits_in_main": [{"oid": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "message": "Merge commit", "committedDate": null}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "1e593837ab1c64884a8ac615c7cc8c3471a219ee", "committedDate": "2021-11-18 09:33:25 +0100", "message": "refactor: validators, checkers and processors in old importer are now spring beans [TECH-797] (#9218)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzMTY0Ng==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448031646", "body": "author header", "bodyText": "author header", "bodyHTML": "<p dir=\"auto\">author header</p>", "author": "mortenoh", "createdAt": "2020-06-30T23:20:28Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/DataValueAclCheck.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package org.hisp.dhis.dxf2.events.importer.insert.validation;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.hisp.dhis.dataelement.DataElement;\n+import org.hisp.dhis.dxf2.events.importer.Checker;\n+import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n+import org.hisp.dhis.dxf2.events.importer.shared.ImmutableEvent;\n+import org.hisp.dhis.dxf2.importsummary.ImportConflict;\n+import org.hisp.dhis.dxf2.importsummary.ImportSummary;\n+import org.hisp.dhis.eventdatavalue.EventDataValue;\n+import org.hisp.dhis.program.ProgramStageInstance;\n+import org.hisp.dhis.trackedentity.TrackerAccessManager;\n+import org.hisp.dhis.user.User;\n+\n+public class DataValueAclCheck implements Checker", "originalCommit": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM0NjM5OQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448346399", "bodyText": "Fixed", "author": "luciano-fiandesio", "createdAt": "2020-07-01T13:01:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzMTY0Ng=="}], "type": "inlineReview", "revised_code": {"commit": "7032498b0cbac9437a93d7deeb72862937c55a98", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/DataValueAclCheck.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/DataValueAclCheck.java\nindex 00bce17449..e059ef6e54 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/DataValueAclCheck.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/DataValueAclCheck.java\n", "chunk": "@@ -43,6 +43,9 @@ import org.hisp.dhis.program.ProgramStageInstance;\n import org.hisp.dhis.trackedentity.TrackerAccessManager;\n import org.hisp.dhis.user.User;\n \n+/**\n+ * @author Luciano Fiandesio\n+ */\n public class DataValueAclCheck implements Checker\n {\n     @Override\n", "next_change": {"commit": "d360652a896bee650a842567e26cd1e62145cccb", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/DataValueAclCheck.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/DataValueAclCheck.java\nindex e059ef6e54..00bce17449 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/DataValueAclCheck.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/DataValueAclCheck.java\n", "chunk": "@@ -43,9 +43,6 @@ import org.hisp.dhis.program.ProgramStageInstance;\n import org.hisp.dhis.trackedentity.TrackerAccessManager;\n import org.hisp.dhis.user.User;\n \n-/**\n- * @author Luciano Fiandesio\n- */\n public class DataValueAclCheck implements Checker\n {\n     @Override\n", "next_change": {"commit": "bf042296956c38e5762dc2763da53fe23bc444a3", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/DataValueAclCheck.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/DataValueAclCheck.java\nindex 00bce17449..e059ef6e54 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/DataValueAclCheck.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/DataValueAclCheck.java\n", "chunk": "@@ -43,6 +43,9 @@ import org.hisp.dhis.program.ProgramStageInstance;\n import org.hisp.dhis.trackedentity.TrackerAccessManager;\n import org.hisp.dhis.user.User;\n \n+/**\n+ * @author Luciano Fiandesio\n+ */\n public class DataValueAclCheck implements Checker\n {\n     @Override\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/DataValueAclCheck.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/DataValueAclCheck.java\nindex 00bce17449..e059ef6e54 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/DataValueAclCheck.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/DataValueAclCheck.java\n", "chunk": "@@ -43,6 +43,9 @@ import org.hisp.dhis.program.ProgramStageInstance;\n import org.hisp.dhis.trackedentity.TrackerAccessManager;\n import org.hisp.dhis.user.User;\n \n+/**\n+ * @author Luciano Fiandesio\n+ */\n public class DataValueAclCheck implements Checker\n {\n     @Override\n", "next_change": {"commit": "ea76fa86409613c9766d4508d65c88ac55c413c3", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/DataValueAclCheck.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/DataValueAclCheck.java\nindex e059ef6e54..65294cbc1a 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/DataValueAclCheck.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/DataValueAclCheck.java\n", "chunk": "@@ -49,7 +48,7 @@ import org.hisp.dhis.user.User;\n public class DataValueAclCheck implements Checker\n {\n     @Override\n-    public ImportSummary check(ImmutableEvent event, WorkContext ctx )\n+    public ImportSummary check( ImmutableEvent event, WorkContext ctx )\n     {\n         final TrackerAccessManager trackerAccessManager = ctx.getServiceDelegator().getTrackerAccessManager();\n         final ProgramStageInstance programStageInstance = ctx.getProgramStageInstanceMap().get( event.getUid() );\n", "next_change": {"commit": "1e593837ab1c64884a8ac615c7cc8c3471a219ee", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/DataValueAclCheck.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/DataValueAclCheck.java\nindex 65294cbc1a..506f9f58f7 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/DataValueAclCheck.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/DataValueAclCheck.java\n", "chunk": "@@ -35,16 +35,17 @@ import org.hisp.dhis.dataelement.DataElement;\n import org.hisp.dhis.dxf2.events.importer.Checker;\n import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n import org.hisp.dhis.dxf2.events.importer.shared.ImmutableEvent;\n-import org.hisp.dhis.dxf2.importsummary.ImportConflict;\n import org.hisp.dhis.dxf2.importsummary.ImportSummary;\n import org.hisp.dhis.eventdatavalue.EventDataValue;\n import org.hisp.dhis.program.ProgramStageInstance;\n import org.hisp.dhis.trackedentity.TrackerAccessManager;\n import org.hisp.dhis.user.User;\n+import org.springframework.stereotype.Component;\n \n /**\n  * @author Luciano Fiandesio\n  */\n+@Component\n public class DataValueAclCheck implements Checker\n {\n     @Override\n", "next_change": {"commit": "959c60d4f597187d0df2160fbbb675e5c4196e5c", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/DataValueAclCheck.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/DataValueAclCheck.java\nindex 506f9f58f7..8093e84625 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/DataValueAclCheck.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/DataValueAclCheck.java\n", "chunk": "@@ -52,14 +52,14 @@ public class DataValueAclCheck implements Checker\n     public ImportSummary check( ImmutableEvent event, WorkContext ctx )\n     {\n         final TrackerAccessManager trackerAccessManager = ctx.getServiceDelegator().getTrackerAccessManager();\n-        final ProgramStageInstance programStageInstance = ctx.getProgramStageInstanceMap().get( event.getUid() );\n+        final Event programStageInstance = ctx.getProgramStageInstanceMap().get( event.getUid() );\n \n         Map<String, Set<EventDataValue>> eventDataValueMap = ctx.getEventDataValueMap();\n \n         final User user = ctx.getImportOptions().getUser();\n         final ImportSummary importSummary = new ImportSummary();\n \n-        // Note that here we are passing a ProgramStageInstance, which during a\n+        // Note that here we are passing a Event, which during a\n         // INSERT\n         // operation\n         // is going to be null, so the ACL method will not be able to check that\n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "message": "Merge commit", "committedDate": null}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "6f3422ff9a182b183a9e3a2f61cf457bb23cb092", "committedDate": "2021-06-10 13:13:51 +0200", "message": "chore: encapsulates import conflicts [DHIS2-4414]  (#8164)"}, {"oid": "1e593837ab1c64884a8ac615c7cc8c3471a219ee", "committedDate": "2021-11-18 09:33:25 +0100", "message": "refactor: validators, checkers and processors in old importer are now spring beans [TECH-797] (#9218)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "959c60d4f597187d0df2160fbbb675e5c4196e5c", "committedDate": "2023-04-27 16:46:18 +0200", "message": "chore: rename ProgramStageInstance to Event (#13731)"}, {"oid": "02336c9611c0dd85d5038223bddbfdebc0aae526", "committedDate": "2023-05-11 19:34:26 +0200", "message": "chore: move old tracker dxf2 code into deprecated package (#13901)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzMjA1Ng==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448032056", "body": "newline", "bodyText": "newline", "bodyHTML": "<p dir=\"auto\">newline</p>", "author": "mortenoh", "createdAt": "2020-06-30T23:21:54Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/BaseEventAclCheck.java", "diffHunk": "@@ -0,0 +1,88 @@\n+package org.hisp.dhis.dxf2.events.importer.shared.validation;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import java.util.List;\n+\n+import org.hisp.dhis.common.IdScheme;\n+import org.hisp.dhis.dxf2.common.ImportOptions;\n+import org.hisp.dhis.dxf2.events.importer.Checker;\n+import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n+import org.hisp.dhis.dxf2.events.importer.shared.ImmutableEvent;\n+import org.hisp.dhis.dxf2.importsummary.ImportConflict;\n+import org.hisp.dhis.dxf2.importsummary.ImportStatus;\n+import org.hisp.dhis.dxf2.importsummary.ImportSummary;\n+import org.hisp.dhis.program.ProgramInstance;\n+import org.hisp.dhis.program.ProgramStageInstance;\n+import org.hisp.dhis.trackedentity.TrackerAccessManager;\n+import org.hisp.dhis.user.User;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+public abstract class BaseEventAclCheck implements Checker\n+{\n+    public ImportSummary check( ImmutableEvent event, WorkContext ctx )\n+    {\n+        ImportOptions importOptions = ctx.getImportOptions();\n+\n+        ProgramStageInstance programStageInstance = prepareForAclValidation( ctx, event );\n+\n+        List<String> errors = checkAcl( ctx.getServiceDelegator().getTrackerAccessManager(), importOptions.getUser(),\n+            programStageInstance );\n+\n+        final ImportSummary importSummary = new ImportSummary();\n+\n+        if ( !errors.isEmpty() )\n+        {\n+            errors.forEach( error -> importSummary.getConflicts().add( new ImportConflict( event.getUid(), error ) ) );\n+\n+            importSummary.incrementIgnored();\n+            importSummary.setStatus( ImportStatus.ERROR );\n+        }", "originalCommit": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM0OTA4OQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448349089", "bodyText": "Fixed", "author": "luciano-fiandesio", "createdAt": "2020-07-01T13:06:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzMjA1Ng=="}], "type": "inlineReview", "revised_code": {"commit": "7032498b0cbac9437a93d7deeb72862937c55a98", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/BaseEventAclCheck.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/BaseEventAclCheck.java\nindex 0dfa08d74c..fa8b5e3c39 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/BaseEventAclCheck.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/BaseEventAclCheck.java\n", "chunk": "@@ -62,7 +62,6 @@ public abstract class BaseEventAclCheck implements Checker\n         if ( !errors.isEmpty() )\n         {\n             errors.forEach( error -> importSummary.getConflicts().add( new ImportConflict( event.getUid(), error ) ) );\n-\n             importSummary.incrementIgnored();\n             importSummary.setStatus( ImportStatus.ERROR );\n         }\n", "next_change": {"commit": "d360652a896bee650a842567e26cd1e62145cccb", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/BaseEventAclCheck.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/BaseEventAclCheck.java\nindex fa8b5e3c39..0dfa08d74c 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/BaseEventAclCheck.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/BaseEventAclCheck.java\n", "chunk": "@@ -62,6 +62,7 @@ public abstract class BaseEventAclCheck implements Checker\n         if ( !errors.isEmpty() )\n         {\n             errors.forEach( error -> importSummary.getConflicts().add( new ImportConflict( event.getUid(), error ) ) );\n+\n             importSummary.incrementIgnored();\n             importSummary.setStatus( ImportStatus.ERROR );\n         }\n", "next_change": {"commit": "c9cbe9cf8b22a49324c53b68eba31b9c63684df4", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/BaseEventAclCheck.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/BaseEventAclCheck.java\nindex 0dfa08d74c..fa8b5e3c39 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/BaseEventAclCheck.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/BaseEventAclCheck.java\n", "chunk": "@@ -62,7 +62,6 @@ public abstract class BaseEventAclCheck implements Checker\n         if ( !errors.isEmpty() )\n         {\n             errors.forEach( error -> importSummary.getConflicts().add( new ImportConflict( event.getUid(), error ) ) );\n-\n             importSummary.incrementIgnored();\n             importSummary.setStatus( ImportStatus.ERROR );\n         }\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/BaseEventAclCheck.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/BaseEventAclCheck.java\nindex 0dfa08d74c..fa8b5e3c39 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/BaseEventAclCheck.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/BaseEventAclCheck.java\n", "chunk": "@@ -62,7 +62,6 @@ public abstract class BaseEventAclCheck implements Checker\n         if ( !errors.isEmpty() )\n         {\n             errors.forEach( error -> importSummary.getConflicts().add( new ImportConflict( event.getUid(), error ) ) );\n-\n             importSummary.incrementIgnored();\n             importSummary.setStatus( ImportStatus.ERROR );\n         }\n", "next_change": {"commit": "6f3422ff9a182b183a9e3a2f61cf457bb23cb092", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/BaseEventAclCheck.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/BaseEventAclCheck.java\nindex fa8b5e3c39..e50ba337b1 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/BaseEventAclCheck.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/BaseEventAclCheck.java\n", "chunk": "@@ -61,7 +59,7 @@ public abstract class BaseEventAclCheck implements Checker\n \n         if ( !errors.isEmpty() )\n         {\n-            errors.forEach( error -> importSummary.getConflicts().add( new ImportConflict( event.getUid(), error ) ) );\n+            errors.forEach( error -> importSummary.addConflict( event.getUid(), error ) );\n             importSummary.incrementIgnored();\n             importSummary.setStatus( ImportStatus.ERROR );\n         }\n", "next_change": {"commit": "81b73bbf8a98507026d9349cd5f0c51f2e37b58a", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/BaseEventAclCheck.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/BaseEventAclCheck.java\nindex e50ba337b1..193b0f48a5 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/BaseEventAclCheck.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/BaseEventAclCheck.java\n", "chunk": "@@ -62,6 +62,7 @@ public abstract class BaseEventAclCheck implements Checker\n             errors.forEach( error -> importSummary.addConflict( event.getUid(), error ) );\n             importSummary.incrementIgnored();\n             importSummary.setStatus( ImportStatus.ERROR );\n+            importSummary.setReference( event.getEvent() );\n         }\n         return importSummary;\n     }\n", "next_change": {"commit": "959c60d4f597187d0df2160fbbb675e5c4196e5c", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/BaseEventAclCheck.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/BaseEventAclCheck.java\nindex 193b0f48a5..c601bf2444 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/BaseEventAclCheck.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/BaseEventAclCheck.java\n", "chunk": "@@ -67,11 +67,11 @@ public abstract class BaseEventAclCheck implements Checker\n         return importSummary;\n     }\n \n-    private ProgramStageInstance prepareForAclValidation( WorkContext ctx, ImmutableEvent event )\n+    private Event prepareForAclValidation( WorkContext ctx, ImmutableEvent event )\n     {\n         final IdScheme programStageIdScheme = ctx.getImportOptions().getIdSchemes().getProgramStageIdScheme();\n \n-        ProgramStageInstance programStageInstance = new ProgramStageInstance();\n+        Event programStageInstance = new Event();\n         programStageInstance.setProgramStage( ctx.getProgramStage( programStageIdScheme, event.getProgramStage() ) );\n         programStageInstance.setOrganisationUnit( ctx.getOrganisationUnitMap().get( event.getUid() ) );\n         programStageInstance.setStatus( event.getStatus() );\n", "next_change": {"commit": "41e75ba362e65a726c88564679a43aadcebbc60a", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/BaseEventAclCheck.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/BaseEventAclCheck.java\nindex c601bf2444..3ce028bd63 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/BaseEventAclCheck.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/BaseEventAclCheck.java\n", "chunk": "@@ -76,7 +76,7 @@ public abstract class BaseEventAclCheck implements Checker\n         programStageInstance.setOrganisationUnit( ctx.getOrganisationUnitMap().get( event.getUid() ) );\n         programStageInstance.setStatus( event.getStatus() );\n         ProgramInstance programInstance = ctx.getProgramInstanceMap().get( event.getUid() );\n-        programStageInstance.setProgramInstance( programInstance );\n+        programStageInstance.setEnrollment( programInstance );\n \n         return programStageInstance;\n     }\n", "next_change": {"commit": "e4f8abdfdb132f536835b3be17a3391da2089823", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/BaseEventAclCheck.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/BaseEventAclCheck.java\nindex 3ce028bd63..81723ed311 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/BaseEventAclCheck.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/BaseEventAclCheck.java\n", "chunk": "@@ -75,8 +75,8 @@ public abstract class BaseEventAclCheck implements Checker\n         programStageInstance.setProgramStage( ctx.getProgramStage( programStageIdScheme, event.getProgramStage() ) );\n         programStageInstance.setOrganisationUnit( ctx.getOrganisationUnitMap().get( event.getUid() ) );\n         programStageInstance.setStatus( event.getStatus() );\n-        ProgramInstance programInstance = ctx.getProgramInstanceMap().get( event.getUid() );\n-        programStageInstance.setEnrollment( programInstance );\n+        Enrollment enrollment = ctx.getProgramInstanceMap().get( event.getUid() );\n+        programStageInstance.setEnrollment( enrollment );\n \n         return programStageInstance;\n     }\n", "next_change": null}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "message": "Merge commit", "committedDate": null}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "6f3422ff9a182b183a9e3a2f61cf457bb23cb092", "committedDate": "2021-06-10 13:13:51 +0200", "message": "chore: encapsulates import conflicts [DHIS2-4414]  (#8164)"}, {"oid": "81b73bbf8a98507026d9349cd5f0c51f2e37b58a", "committedDate": "2021-06-28 11:41:44 +0200", "message": "fix: fix acl error in event import to correctly reference the event [DHIS2-11376] (#8310)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "959c60d4f597187d0df2160fbbb675e5c4196e5c", "committedDate": "2023-04-27 16:46:18 +0200", "message": "chore: rename ProgramStageInstance to Event (#13731)"}, {"oid": "41e75ba362e65a726c88564679a43aadcebbc60a", "committedDate": "2023-05-03 07:50:28 +0200", "message": "chore: rename Event.programInstance to Event.enrollment (#13774)"}, {"oid": "e4f8abdfdb132f536835b3be17a3391da2089823", "committedDate": "2023-05-03 11:31:41 +0000", "message": "chore: Rename ProgramInstance to Enrollment [TECH-1547] (#13794)"}, {"oid": "02336c9611c0dd85d5038223bddbfdebc0aae526", "committedDate": "2023-05-11 19:34:26 +0200", "message": "chore: move old tracker dxf2 code into deprecated package (#13901)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzNDQyMA==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448034420", "body": "if programInstance == null, we should just return? same test in two logic tests", "bodyText": "if programInstance == null, we should just return? same test in two logic tests", "bodyHTML": "<p dir=\"auto\">if programInstance == null, we should just return? same test in two logic tests</p>", "author": "mortenoh", "createdAt": "2020-06-30T23:29:45Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/preprocess/ProgramInstancePreProcessor.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer.insert.preprocess;\n+\n+import java.sql.ResultSet;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.hisp.dhis.dxf2.events.event.Event;\n+import org.hisp.dhis.dxf2.events.importer.Processor;\n+import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n+import org.hisp.dhis.program.Program;\n+import org.hisp.dhis.program.ProgramInstance;\n+import org.hisp.dhis.program.ProgramInstanceStore;\n+import org.hisp.dhis.program.ProgramStatus;\n+import org.hisp.dhis.trackedentity.TrackedEntityInstance;\n+import org.springframework.jdbc.core.JdbcTemplate;\n+\n+/**\n+ * The goal of this Pre-processor is to assign a Program Instance (Enrollment)\n+ * to the Event getting processed. If the Program Instance can not be assigned,\n+ * the Event will not pass validation.\n+ *\n+ * @author Luciano Fiandesio\n+ */\n+public class ProgramInstancePreProcessor implements Processor\n+{\n+    @Override\n+    public void process( Event event, WorkContext ctx )\n+    {\n+        ProgramInstanceStore programInstanceStore = ctx.getServiceDelegator().getProgramInstanceStore();\n+\n+        Program program = ctx.getProgramsMap().get( event.getProgram() );\n+\n+        if ( program == null )\n+        {\n+            return; // Program is a mandatory value, it will be caught by the validation\n+        }\n+\n+        ProgramInstance programInstance = ctx.getProgramInstanceMap().get( event.getUid() );\n+        final Optional<TrackedEntityInstance> trackedEntityInstance = ctx.getTrackedEntityInstance( event.getUid() );\n+\n+        if ( program.isRegistration() && programInstance == null )", "originalCommit": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "ea76fa86409613c9766d4508d65c88ac55c413c3", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/preprocess/ProgramInstancePreProcessor.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/preprocess/ProgramInstancePreProcessor.java\nindex 06aeb76a2f..7a538a2dbe 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/preprocess/ProgramInstancePreProcessor.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/preprocess/ProgramInstancePreProcessor.java\n", "chunk": "@@ -61,7 +60,8 @@ public class ProgramInstancePreProcessor implements Processor\n \n         if ( program == null )\n         {\n-            return; // Program is a mandatory value, it will be caught by the validation\n+            return; // Program is a mandatory value, it will be caught by the\n+                    // validation\n         }\n \n         ProgramInstance programInstance = ctx.getProgramInstanceMap().get( event.getUid() );\n", "next_change": {"commit": "0fa9d073af82c6f3ecadfc72daaa6fedd0435a45", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/preprocess/ProgramInstancePreProcessor.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/preprocess/ProgramInstancePreProcessor.java\nindex 7a538a2dbe..2369eb62f9 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/preprocess/ProgramInstancePreProcessor.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/preprocess/ProgramInstancePreProcessor.java\n", "chunk": "@@ -61,7 +63,7 @@ public class ProgramInstancePreProcessor implements Processor\n         if ( program == null )\n         {\n             return; // Program is a mandatory value, it will be caught by the\n-                    // validation\n+                   // validation\n         }\n \n         ProgramInstance programInstance = ctx.getProgramInstanceMap().get( event.getUid() );\n", "next_change": {"commit": "e4f8abdfdb132f536835b3be17a3391da2089823", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/preprocess/ProgramInstancePreProcessor.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/preprocess/ProgramInstancePreProcessor.java\nindex 2369eb62f9..44d6ee032f 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/preprocess/ProgramInstancePreProcessor.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/preprocess/ProgramInstancePreProcessor.java\n", "chunk": "@@ -66,40 +66,40 @@ public class ProgramInstancePreProcessor implements Processor\n                    // validation\n         }\n \n-        ProgramInstance programInstance = ctx.getProgramInstanceMap().get( event.getUid() );\n+        Enrollment enrollment = ctx.getProgramInstanceMap().get( event.getUid() );\n         final Optional<TrackedEntityInstance> trackedEntityInstance = ctx.getTrackedEntityInstance( event.getUid() );\n \n-        if ( program.isRegistration() && programInstance == null )\n+        if ( program.isRegistration() && enrollment == null )\n         {\n-            List<ProgramInstance> programInstances = new ArrayList<>(\n+            List<Enrollment> enrollments = new ArrayList<>(\n                 programInstanceStore.get( trackedEntityInstance.orElse( null ), program, ProgramStatus.ACTIVE ) );\n \n-            if ( programInstances.size() == 1 )\n+            if ( enrollments.size() == 1 )\n             {\n-                event.setEnrollment( programInstances.get( 0 ).getUid() );\n-                ctx.getProgramInstanceMap().put( event.getUid(), programInstances.get( 0 ) );\n+                event.setEnrollment( enrollments.get( 0 ).getUid() );\n+                ctx.getProgramInstanceMap().put( event.getUid(), enrollments.get( 0 ) );\n             }\n         }\n-        else if ( program.isWithoutRegistration() && programInstance == null )\n+        else if ( program.isWithoutRegistration() && enrollment == null )\n         {\n-            List<ProgramInstance> programInstances = getProgramInstances( ctx.getServiceDelegator().getJdbcTemplate(),\n+            List<Enrollment> enrollments = getProgramInstances( ctx.getServiceDelegator().getJdbcTemplate(),\n                 program, ProgramStatus.ACTIVE );\n \n             // the \"original\" event import code creates a Program Instance, if\n             // none is found\n             // but this is no longer needed, since a Program POST-CREATION hook\n             // takes care of that\n-            if ( programInstances.size() == 1 )\n+            if ( enrollments.size() == 1 )\n             {\n-                event.setEnrollment( programInstances.get( 0 ).getUid() );\n-                ctx.getProgramInstanceMap().put( event.getUid(), programInstances.get( 0 ) );\n+                event.setEnrollment( enrollments.get( 0 ).getUid() );\n+                ctx.getProgramInstanceMap().put( event.getUid(), enrollments.get( 0 ) );\n             }\n             // If more than one Program Instance is present, the validation will\n             // detect it later\n         }\n     }\n \n-    private List<ProgramInstance> getProgramInstances( JdbcTemplate jdbcTemplate, Program program,\n+    private List<Enrollment> getProgramInstances( JdbcTemplate jdbcTemplate, Program program,\n         ProgramStatus status )\n     {\n         final String sql = \"select pi.programinstanceid, pi.programid, pi.uid \"\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "message": "Merge commit", "committedDate": null}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "1e593837ab1c64884a8ac615c7cc8c3471a219ee", "committedDate": "2021-11-18 09:33:25 +0100", "message": "refactor: validators, checkers and processors in old importer are now spring beans [TECH-797] (#9218)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "0fa9d073af82c6f3ecadfc72daaa6fedd0435a45", "committedDate": "2022-12-01 12:43:48 +0000", "message": "fix: Remove formatting for line comments (#12448)"}, {"oid": "e4f8abdfdb132f536835b3be17a3391da2089823", "committedDate": "2023-05-03 11:31:41 +0000", "message": "chore: Rename ProgramInstance to Enrollment [TECH-1547] (#13794)"}, {"oid": "e03cf3818e639ba738dd01f658423914dcd7bfba", "committedDate": "2023-05-04 09:24:50 +0200", "message": "chore: Rename ProgramInstanceStore to EnrollmentStore [TECH-1547] (#13808)"}, {"oid": "ba38c7fa19a269450161eb73bad6b80b1ef1133b", "committedDate": "2023-05-04 11:23:39 +0200", "message": "chore: Rename most ProgramInstance classes to Enrollment [TECH-1547] (#13811)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzNDcxMQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448034711", "body": "license order issue, should be before import", "bodyText": "license order issue, should be before import", "bodyHTML": "<p dir=\"auto\">license order issue, should be before import</p>", "author": "mortenoh", "createdAt": "2020-06-30T23:30:40Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramOrgUnitCheckTest.java", "diffHunk": "@@ -0,0 +1,154 @@\n+package org.hisp.dhis.dxf2.events.importer.insert.validation;\n+\n+import static org.hisp.dhis.DhisConvenienceTest.createOrganisationUnit;\n+import static org.hisp.dhis.DhisConvenienceTest.createProgram;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.apache.commons.lang3.RandomUtils;\n+import org.hisp.dhis.common.CodeGenerator;\n+import org.hisp.dhis.common.IdScheme;\n+import org.hisp.dhis.dxf2.common.ImportOptions;\n+import org.hisp.dhis.dxf2.events.importer.shared.ImmutableEvent;\n+import org.hisp.dhis.dxf2.events.importer.validation.BaseValidationTest;\n+import org.hisp.dhis.dxf2.importsummary.ImportSummary;\n+import org.hisp.dhis.organisationunit.OrganisationUnit;\n+import org.hisp.dhis.program.Program;\n+import org.hisp.dhis.program.ProgramInstance;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.testcontainers.shaded.org.apache.commons.lang.RandomStringUtils;\n+\n+/*", "originalCommit": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM0NzE4Ng==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448347186", "bodyText": "Fixed", "author": "luciano-fiandesio", "createdAt": "2020-07-01T13:02:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzNDcxMQ=="}], "type": "inlineReview", "revised_code": {"commit": "7032498b0cbac9437a93d7deeb72862937c55a98", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramOrgUnitCheckTest.java b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramOrgUnitCheckTest.java\nindex 4a1bd08cbe..87497c7aa8 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramOrgUnitCheckTest.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramOrgUnitCheckTest.java\n", "chunk": "@@ -1,28 +1,5 @@\n package org.hisp.dhis.dxf2.events.importer.insert.validation;\n \n-import static org.hisp.dhis.DhisConvenienceTest.createOrganisationUnit;\n-import static org.hisp.dhis.DhisConvenienceTest.createProgram;\n-import static org.mockito.Mockito.when;\n-\n-import java.util.HashMap;\n-import java.util.HashSet;\n-import java.util.Map;\n-import java.util.Set;\n-\n-import org.apache.commons.lang3.RandomUtils;\n-import org.hisp.dhis.common.CodeGenerator;\n-import org.hisp.dhis.common.IdScheme;\n-import org.hisp.dhis.dxf2.common.ImportOptions;\n-import org.hisp.dhis.dxf2.events.importer.shared.ImmutableEvent;\n-import org.hisp.dhis.dxf2.events.importer.validation.BaseValidationTest;\n-import org.hisp.dhis.dxf2.importsummary.ImportSummary;\n-import org.hisp.dhis.organisationunit.OrganisationUnit;\n-import org.hisp.dhis.program.Program;\n-import org.hisp.dhis.program.ProgramInstance;\n-import org.junit.Before;\n-import org.junit.Test;\n-import org.testcontainers.shaded.org.apache.commons.lang.RandomStringUtils;\n-\n /*\n  * Copyright (c) 2004-2020, University of Oslo\n  * All rights reserved.\n", "next_change": {"commit": "d360652a896bee650a842567e26cd1e62145cccb", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramOrgUnitCheckTest.java b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramOrgUnitCheckTest.java\nindex 87497c7aa8..4a1bd08cbe 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramOrgUnitCheckTest.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramOrgUnitCheckTest.java\n", "chunk": "@@ -1,5 +1,28 @@\n package org.hisp.dhis.dxf2.events.importer.insert.validation;\n \n+import static org.hisp.dhis.DhisConvenienceTest.createOrganisationUnit;\n+import static org.hisp.dhis.DhisConvenienceTest.createProgram;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.apache.commons.lang3.RandomUtils;\n+import org.hisp.dhis.common.CodeGenerator;\n+import org.hisp.dhis.common.IdScheme;\n+import org.hisp.dhis.dxf2.common.ImportOptions;\n+import org.hisp.dhis.dxf2.events.importer.shared.ImmutableEvent;\n+import org.hisp.dhis.dxf2.events.importer.validation.BaseValidationTest;\n+import org.hisp.dhis.dxf2.importsummary.ImportSummary;\n+import org.hisp.dhis.organisationunit.OrganisationUnit;\n+import org.hisp.dhis.program.Program;\n+import org.hisp.dhis.program.ProgramInstance;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.testcontainers.shaded.org.apache.commons.lang.RandomStringUtils;\n+\n /*\n  * Copyright (c) 2004-2020, University of Oslo\n  * All rights reserved.\n", "next_change": {"commit": "c9cbe9cf8b22a49324c53b68eba31b9c63684df4", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramOrgUnitCheckTest.java b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramOrgUnitCheckTest.java\nindex 4a1bd08cbe..87497c7aa8 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramOrgUnitCheckTest.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramOrgUnitCheckTest.java\n", "chunk": "@@ -1,28 +1,5 @@\n package org.hisp.dhis.dxf2.events.importer.insert.validation;\n \n-import static org.hisp.dhis.DhisConvenienceTest.createOrganisationUnit;\n-import static org.hisp.dhis.DhisConvenienceTest.createProgram;\n-import static org.mockito.Mockito.when;\n-\n-import java.util.HashMap;\n-import java.util.HashSet;\n-import java.util.Map;\n-import java.util.Set;\n-\n-import org.apache.commons.lang3.RandomUtils;\n-import org.hisp.dhis.common.CodeGenerator;\n-import org.hisp.dhis.common.IdScheme;\n-import org.hisp.dhis.dxf2.common.ImportOptions;\n-import org.hisp.dhis.dxf2.events.importer.shared.ImmutableEvent;\n-import org.hisp.dhis.dxf2.events.importer.validation.BaseValidationTest;\n-import org.hisp.dhis.dxf2.importsummary.ImportSummary;\n-import org.hisp.dhis.organisationunit.OrganisationUnit;\n-import org.hisp.dhis.program.Program;\n-import org.hisp.dhis.program.ProgramInstance;\n-import org.junit.Before;\n-import org.junit.Test;\n-import org.testcontainers.shaded.org.apache.commons.lang.RandomStringUtils;\n-\n /*\n  * Copyright (c) 2004-2020, University of Oslo\n  * All rights reserved.\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramOrgUnitCheckTest.java b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramOrgUnitCheckTest.java\nindex 4a1bd08cbe..ce6ac44500 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramOrgUnitCheckTest.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramOrgUnitCheckTest.java\n", "chunk": "@@ -1,28 +1,5 @@\n package org.hisp.dhis.dxf2.events.importer.insert.validation;\n \n-import static org.hisp.dhis.DhisConvenienceTest.createOrganisationUnit;\n-import static org.hisp.dhis.DhisConvenienceTest.createProgram;\n-import static org.mockito.Mockito.when;\n-\n-import java.util.HashMap;\n-import java.util.HashSet;\n-import java.util.Map;\n-import java.util.Set;\n-\n-import org.apache.commons.lang3.RandomUtils;\n-import org.hisp.dhis.common.CodeGenerator;\n-import org.hisp.dhis.common.IdScheme;\n-import org.hisp.dhis.dxf2.common.ImportOptions;\n-import org.hisp.dhis.dxf2.events.importer.shared.ImmutableEvent;\n-import org.hisp.dhis.dxf2.events.importer.validation.BaseValidationTest;\n-import org.hisp.dhis.dxf2.importsummary.ImportSummary;\n-import org.hisp.dhis.organisationunit.OrganisationUnit;\n-import org.hisp.dhis.program.Program;\n-import org.hisp.dhis.program.ProgramInstance;\n-import org.junit.Before;\n-import org.junit.Test;\n-import org.testcontainers.shaded.org.apache.commons.lang.RandomStringUtils;\n-\n /*\n  * Copyright (c) 2004-2020, University of Oslo\n  * All rights reserved.\n", "next_change": {"commit": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramOrgUnitCheckTest.java b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramOrgUnitCheckTest.java\nindex ce6ac44500..ac23366a15 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramOrgUnitCheckTest.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramOrgUnitCheckTest.java\n", "chunk": "@@ -1,7 +1,7 @@\n package org.hisp.dhis.dxf2.events.importer.insert.validation;\n \n /*\n- * Copyright (c) 2004-2020, University of Oslo\n+ * Copyright (c) 2004-2021, University of Oslo\n  * All rights reserved.\n  *\n  * Redistribution and use in source and binary forms, with or without\n", "next_change": {"commit": "ea76fa86409613c9766d4508d65c88ac55c413c3", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramOrgUnitCheckTest.java b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramOrgUnitCheckTest.java\nindex ac23366a15..96c313d014 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramOrgUnitCheckTest.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramOrgUnitCheckTest.java\n", "chunk": "@@ -1,5 +1,3 @@\n-package org.hisp.dhis.dxf2.events.importer.insert.validation;\n-\n /*\n  * Copyright (c) 2004-2021, University of Oslo\n  * All rights reserved.\n", "next_change": {"commit": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramOrgUnitCheckTest.java b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramOrgUnitCheckTest.java\nindex 96c313d014..23af63d04f 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramOrgUnitCheckTest.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramOrgUnitCheckTest.java\n", "chunk": "@@ -1,5 +1,5 @@\n /*\n- * Copyright (c) 2004-2021, University of Oslo\n+ * Copyright (c) 2004-2022, University of Oslo\n  * All rights reserved.\n  *\n  * Redistribution and use in source and binary forms, with or without\n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "message": "Merge commit", "committedDate": null}, {"oid": "fb390e24a39efb3e206bd995b5f9d964ede0cb33", "committedDate": "2020-12-16 15:20:31 +0100", "message": "perf: reduce number of Org Units fetched from DB on Tracker Import (#6920)"}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "22d5da9d9a812b02eb5acd643112a6b050b5d63c", "committedDate": "2021-12-16 13:19:38 +0100", "message": "chore: migrate tests to JUnit 5 (#9467)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "43725fed360d23cefb272443d6b3cf36cb72ff74", "committedDate": "2023-01-23 11:12:38 +0100", "message": "refactor: Use java Map#of over Guava ImmutableMap#builder (#12804)"}, {"oid": "85eb40bd6e78f41d29ee0b506921edb65f739591", "committedDate": "2023-01-23 13:03:29 +0100", "message": "refactor: Use java List#of over Guava ImmutableList#of (#12806)"}, {"oid": "e4f8abdfdb132f536835b3be17a3391da2089823", "committedDate": "2023-05-03 11:31:41 +0000", "message": "chore: Rename ProgramInstance to Enrollment [TECH-1547] (#13794)"}, {"oid": "02336c9611c0dd85d5038223bddbfdebc0aae526", "committedDate": "2023-05-11 19:34:26 +0200", "message": "chore: move old tracker dxf2 code into deprecated package (#13901)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzNDc2NA==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448034764", "body": "author header", "bodyText": "author header", "bodyHTML": "<p dir=\"auto\">author header</p>", "author": "mortenoh", "createdAt": "2020-06-30T23:30:49Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramOrgUnitCheckTest.java", "diffHunk": "@@ -0,0 +1,154 @@\n+package org.hisp.dhis.dxf2.events.importer.insert.validation;\n+\n+import static org.hisp.dhis.DhisConvenienceTest.createOrganisationUnit;\n+import static org.hisp.dhis.DhisConvenienceTest.createProgram;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.apache.commons.lang3.RandomUtils;\n+import org.hisp.dhis.common.CodeGenerator;\n+import org.hisp.dhis.common.IdScheme;\n+import org.hisp.dhis.dxf2.common.ImportOptions;\n+import org.hisp.dhis.dxf2.events.importer.shared.ImmutableEvent;\n+import org.hisp.dhis.dxf2.events.importer.validation.BaseValidationTest;\n+import org.hisp.dhis.dxf2.importsummary.ImportSummary;\n+import org.hisp.dhis.organisationunit.OrganisationUnit;\n+import org.hisp.dhis.program.Program;\n+import org.hisp.dhis.program.ProgramInstance;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.testcontainers.shaded.org.apache.commons.lang.RandomStringUtils;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+public class ProgramOrgUnitCheckTest extends BaseValidationTest", "originalCommit": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM0NzQ5Ng==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448347496", "bodyText": "Fixed", "author": "luciano-fiandesio", "createdAt": "2020-07-01T13:03:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzNDc2NA=="}], "type": "inlineReview", "revised_code": {"commit": "7032498b0cbac9437a93d7deeb72862937c55a98", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramOrgUnitCheckTest.java b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramOrgUnitCheckTest.java\nindex 4a1bd08cbe..87497c7aa8 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramOrgUnitCheckTest.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramOrgUnitCheckTest.java\n", "chunk": "@@ -51,6 +28,32 @@ import org.testcontainers.shaded.org.apache.commons.lang.RandomStringUtils;\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n \n+import static org.hisp.dhis.DhisConvenienceTest.createOrganisationUnit;\n+import static org.hisp.dhis.DhisConvenienceTest.createProgram;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.apache.commons.lang3.RandomUtils;\n+import org.hisp.dhis.common.CodeGenerator;\n+import org.hisp.dhis.common.IdScheme;\n+import org.hisp.dhis.dxf2.common.ImportOptions;\n+import org.hisp.dhis.dxf2.events.importer.shared.ImmutableEvent;\n+import org.hisp.dhis.dxf2.events.importer.validation.BaseValidationTest;\n+import org.hisp.dhis.dxf2.importsummary.ImportSummary;\n+import org.hisp.dhis.organisationunit.OrganisationUnit;\n+import org.hisp.dhis.program.Program;\n+import org.hisp.dhis.program.ProgramInstance;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.testcontainers.shaded.org.apache.commons.lang.RandomStringUtils;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n public class ProgramOrgUnitCheckTest extends BaseValidationTest\n {\n     private ProgramOrgUnitCheck rule;\n", "next_change": {"commit": "d360652a896bee650a842567e26cd1e62145cccb", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramOrgUnitCheckTest.java b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramOrgUnitCheckTest.java\nindex 87497c7aa8..4a1bd08cbe 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramOrgUnitCheckTest.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramOrgUnitCheckTest.java\n", "chunk": "@@ -28,32 +51,6 @@ package org.hisp.dhis.dxf2.events.importer.insert.validation;\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n \n-import static org.hisp.dhis.DhisConvenienceTest.createOrganisationUnit;\n-import static org.hisp.dhis.DhisConvenienceTest.createProgram;\n-import static org.mockito.Mockito.when;\n-\n-import java.util.HashMap;\n-import java.util.HashSet;\n-import java.util.Map;\n-import java.util.Set;\n-\n-import org.apache.commons.lang3.RandomUtils;\n-import org.hisp.dhis.common.CodeGenerator;\n-import org.hisp.dhis.common.IdScheme;\n-import org.hisp.dhis.dxf2.common.ImportOptions;\n-import org.hisp.dhis.dxf2.events.importer.shared.ImmutableEvent;\n-import org.hisp.dhis.dxf2.events.importer.validation.BaseValidationTest;\n-import org.hisp.dhis.dxf2.importsummary.ImportSummary;\n-import org.hisp.dhis.organisationunit.OrganisationUnit;\n-import org.hisp.dhis.program.Program;\n-import org.hisp.dhis.program.ProgramInstance;\n-import org.junit.Before;\n-import org.junit.Test;\n-import org.testcontainers.shaded.org.apache.commons.lang.RandomStringUtils;\n-\n-/**\n- * @author Luciano Fiandesio\n- */\n public class ProgramOrgUnitCheckTest extends BaseValidationTest\n {\n     private ProgramOrgUnitCheck rule;\n", "next_change": {"commit": "c9cbe9cf8b22a49324c53b68eba31b9c63684df4", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramOrgUnitCheckTest.java b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramOrgUnitCheckTest.java\nindex 4a1bd08cbe..87497c7aa8 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramOrgUnitCheckTest.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramOrgUnitCheckTest.java\n", "chunk": "@@ -51,6 +28,32 @@ import org.testcontainers.shaded.org.apache.commons.lang.RandomStringUtils;\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n \n+import static org.hisp.dhis.DhisConvenienceTest.createOrganisationUnit;\n+import static org.hisp.dhis.DhisConvenienceTest.createProgram;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.apache.commons.lang3.RandomUtils;\n+import org.hisp.dhis.common.CodeGenerator;\n+import org.hisp.dhis.common.IdScheme;\n+import org.hisp.dhis.dxf2.common.ImportOptions;\n+import org.hisp.dhis.dxf2.events.importer.shared.ImmutableEvent;\n+import org.hisp.dhis.dxf2.events.importer.validation.BaseValidationTest;\n+import org.hisp.dhis.dxf2.importsummary.ImportSummary;\n+import org.hisp.dhis.organisationunit.OrganisationUnit;\n+import org.hisp.dhis.program.Program;\n+import org.hisp.dhis.program.ProgramInstance;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.testcontainers.shaded.org.apache.commons.lang.RandomStringUtils;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n public class ProgramOrgUnitCheckTest extends BaseValidationTest\n {\n     private ProgramOrgUnitCheck rule;\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramOrgUnitCheckTest.java b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramOrgUnitCheckTest.java\nindex 4a1bd08cbe..ce6ac44500 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramOrgUnitCheckTest.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramOrgUnitCheckTest.java\n", "chunk": "@@ -51,6 +28,36 @@ import org.testcontainers.shaded.org.apache.commons.lang.RandomStringUtils;\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n \n+import static org.hisp.dhis.DhisConvenienceTest.createOrganisationUnit;\n+import static org.hisp.dhis.DhisConvenienceTest.createProgram;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.apache.commons.lang3.RandomUtils;\n+import org.hisp.dhis.attribute.Attribute;\n+import org.hisp.dhis.attribute.AttributeValue;\n+import org.hisp.dhis.common.CodeGenerator;\n+import org.hisp.dhis.common.IdScheme;\n+import org.hisp.dhis.common.ValueType;\n+import org.hisp.dhis.dxf2.common.ImportOptions;\n+import org.hisp.dhis.dxf2.events.importer.shared.ImmutableEvent;\n+import org.hisp.dhis.dxf2.events.importer.validation.BaseValidationTest;\n+import org.hisp.dhis.dxf2.importsummary.ImportSummary;\n+import org.hisp.dhis.organisationunit.OrganisationUnit;\n+import org.hisp.dhis.program.Program;\n+import org.hisp.dhis.program.ProgramInstance;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.testcontainers.shaded.org.apache.commons.lang.RandomStringUtils;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n public class ProgramOrgUnitCheckTest extends BaseValidationTest\n {\n     private ProgramOrgUnitCheck rule;\n", "next_change": {"commit": "fb390e24a39efb3e206bd995b5f9d964ede0cb33", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramOrgUnitCheckTest.java b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramOrgUnitCheckTest.java\nindex ce6ac44500..63da99dfe7 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramOrgUnitCheckTest.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramOrgUnitCheckTest.java\n", "chunk": "@@ -53,7 +45,9 @@ import org.hisp.dhis.program.Program;\n import org.hisp.dhis.program.ProgramInstance;\n import org.junit.Before;\n import org.junit.Test;\n-import org.testcontainers.shaded.org.apache.commons.lang.RandomStringUtils;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n \n /**\n  * @author Luciano Fiandesio\n", "next_change": {"commit": "22d5da9d9a812b02eb5acd643112a6b050b5d63c", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramOrgUnitCheckTest.java b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramOrgUnitCheckTest.java\nindex 63da99dfe7..7cc87d631b 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramOrgUnitCheckTest.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramOrgUnitCheckTest.java\n", "chunk": "@@ -43,8 +42,10 @@ import org.hisp.dhis.dxf2.importsummary.ImportSummary;\n import org.hisp.dhis.organisationunit.OrganisationUnit;\n import org.hisp.dhis.program.Program;\n import org.hisp.dhis.program.ProgramInstance;\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.junit.jupiter.MockitoSettings;\n+import org.mockito.quality.Strictness;\n \n import com.google.common.collect.ImmutableList;\n import com.google.common.collect.ImmutableMap;\n", "next_change": {"commit": "43725fed360d23cefb272443d6b3cf36cb72ff74", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramOrgUnitCheckTest.java b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramOrgUnitCheckTest.java\nindex 7cc87d631b..0c1453f19f 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramOrgUnitCheckTest.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramOrgUnitCheckTest.java\n", "chunk": "@@ -48,7 +48,6 @@ import org.mockito.junit.jupiter.MockitoSettings;\n import org.mockito.quality.Strictness;\n \n import com.google.common.collect.ImmutableList;\n-import com.google.common.collect.ImmutableMap;\n \n /**\n  * @author Luciano Fiandesio\n", "next_change": {"commit": "85eb40bd6e78f41d29ee0b506921edb65f739591", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramOrgUnitCheckTest.java b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramOrgUnitCheckTest.java\nindex 0c1453f19f..32a836f2bd 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramOrgUnitCheckTest.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramOrgUnitCheckTest.java\n", "chunk": "@@ -47,8 +48,6 @@ import org.junit.jupiter.api.Test;\n import org.mockito.junit.jupiter.MockitoSettings;\n import org.mockito.quality.Strictness;\n \n-import com.google.common.collect.ImmutableList;\n-\n /**\n  * @author Luciano Fiandesio\n  */\n", "next_change": null}]}}]}}, {"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramOrgUnitCheckTest.java b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramOrgUnitCheckTest.java\nindex 63da99dfe7..7cc87d631b 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramOrgUnitCheckTest.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramOrgUnitCheckTest.java\n", "chunk": "@@ -52,18 +53,20 @@ import com.google.common.collect.ImmutableMap;\n /**\n  * @author Luciano Fiandesio\n  */\n-public class ProgramOrgUnitCheckTest extends BaseValidationTest\n+@MockitoSettings( strictness = Strictness.LENIENT )\n+class ProgramOrgUnitCheckTest extends BaseValidationTest\n {\n+\n     private ProgramOrgUnitCheck rule;\n \n-    @Before\n-    public void setUp()\n+    @BeforeEach\n+    void setUp()\n     {\n         rule = new ProgramOrgUnitCheck();\n     }\n \n     @Test\n-    public void verifySuccessWhenProgramHasOrgUnitMatchingEventOrgUnit()\n+    void verifySuccessWhenProgramHasOrgUnitMatchingEventOrgUnit()\n     {\n         verifySuccessWhenProgramHasOrgUnitMatchingEventOrgUnit( \"ABCDE\", IdScheme.CODE );\n         verifySuccessWhenProgramHasOrgUnitMatchingEventOrgUnit( CodeGenerator.generateUid(), IdScheme.UID );\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "message": "Merge commit", "committedDate": null}, {"oid": "fb390e24a39efb3e206bd995b5f9d964ede0cb33", "committedDate": "2020-12-16 15:20:31 +0100", "message": "perf: reduce number of Org Units fetched from DB on Tracker Import (#6920)"}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "22d5da9d9a812b02eb5acd643112a6b050b5d63c", "committedDate": "2021-12-16 13:19:38 +0100", "message": "chore: migrate tests to JUnit 5 (#9467)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "43725fed360d23cefb272443d6b3cf36cb72ff74", "committedDate": "2023-01-23 11:12:38 +0100", "message": "refactor: Use java Map#of over Guava ImmutableMap#builder (#12804)"}, {"oid": "85eb40bd6e78f41d29ee0b506921edb65f739591", "committedDate": "2023-01-23 13:03:29 +0100", "message": "refactor: Use java List#of over Guava ImmutableList#of (#12806)"}, {"oid": "e4f8abdfdb132f536835b3be17a3391da2089823", "committedDate": "2023-05-03 11:31:41 +0000", "message": "chore: Rename ProgramInstance to Enrollment [TECH-1547] (#13794)"}, {"oid": "02336c9611c0dd85d5038223bddbfdebc0aae526", "committedDate": "2023-05-11 19:34:26 +0200", "message": "chore: move old tracker dxf2 code into deprecated package (#13901)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzNDg2Mw==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448034863", "body": "newline", "bodyText": "newline", "bodyHTML": "<p dir=\"auto\">newline</p>", "author": "mortenoh", "createdAt": "2020-06-30T23:31:08Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramOrgUnitCheckTest.java", "diffHunk": "@@ -0,0 +1,154 @@\n+package org.hisp.dhis.dxf2.events.importer.insert.validation;\n+\n+import static org.hisp.dhis.DhisConvenienceTest.createOrganisationUnit;\n+import static org.hisp.dhis.DhisConvenienceTest.createProgram;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.apache.commons.lang3.RandomUtils;\n+import org.hisp.dhis.common.CodeGenerator;\n+import org.hisp.dhis.common.IdScheme;\n+import org.hisp.dhis.dxf2.common.ImportOptions;\n+import org.hisp.dhis.dxf2.events.importer.shared.ImmutableEvent;\n+import org.hisp.dhis.dxf2.events.importer.validation.BaseValidationTest;\n+import org.hisp.dhis.dxf2.importsummary.ImportSummary;\n+import org.hisp.dhis.organisationunit.OrganisationUnit;\n+import org.hisp.dhis.program.Program;\n+import org.hisp.dhis.program.ProgramInstance;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.testcontainers.shaded.org.apache.commons.lang.RandomStringUtils;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+public class ProgramOrgUnitCheckTest extends BaseValidationTest\n+{\n+    private ProgramOrgUnitCheck rule;\n+\n+    @Before\n+    public void setUp()\n+    {\n+        rule = new ProgramOrgUnitCheck();\n+    }\n+\n+    @Test\n+    public void verifySuccessWhenProgramHasOrgUnitMatchingEventOrgUnit()\n+    {\n+        verifySuccessWhenProgramHasOrgUnitMatchingEventOrgUnit( \"ABCDE\", IdScheme.CODE );\n+        verifySuccessWhenProgramHasOrgUnitMatchingEventOrgUnit( CodeGenerator.generateUid(), IdScheme.UID );\n+        verifySuccessWhenProgramHasOrgUnitMatchingEventOrgUnit( \"100\", IdScheme.ID );\n+    }\n+\n+    private void verifySuccessWhenProgramHasOrgUnitMatchingEventOrgUnit( String orgUnitId, IdScheme scheme )\n+    {\n+        // assign a UID to the event's org unit\n+        event.setOrgUnit( orgUnitId );\n+\n+        // Prepare data\n+        Program program = createProgram( 'P' );\n+        // make sure that one of the generate Org Units, has the event's UID\n+        program.setOrganisationUnits( create( 5, event.getOrgUnit(), IdScheme.CODE ) );\n+        ProgramInstance pi = new ProgramInstance();\n+        pi.setProgram( program );\n+\n+        Map<String, ProgramInstance> programInstanceMap = new HashMap<>();\n+        programInstanceMap.put( event.getUid(), pi );\n+\n+        ImportOptions importOptions = ImportOptions.getDefaultImportOptions();\n+        importOptions.setOrgUnitIdScheme( IdScheme.CODE.name() );\n+\n+        when( workContext.getImportOptions() ).thenReturn( importOptions );\n+        when( workContext.getProgramInstanceMap() ).thenReturn( programInstanceMap );\n+\n+        // method under test\n+        ImportSummary summary = rule.check( new ImmutableEvent( event ), workContext );\n+\n+        assertNoError( summary );\n+    }\n+\n+    @Test\n+    public void failWhenProgramHasNoOrgUnitMatchingEventOrgUnit()\n+    {\n+        // assign a UID to the event's org unit\n+        event.setOrgUnit( CodeGenerator.generateUid() );\n+\n+        // Prepare data\n+        Program program = createProgram( 'P' );\n+        // make sure that one of the generate Org Units, has the event's UID\n+        program.setOrganisationUnits( create( 5, CodeGenerator.generateUid(), IdScheme.UID ) );\n+        ProgramInstance pi = new ProgramInstance();\n+        pi.setProgram( program );\n+\n+        Map<String, ProgramInstance> programInstanceMap = new HashMap<>();\n+        programInstanceMap.put( event.getUid(), pi );\n+\n+        ImportOptions importOptions = ImportOptions.getDefaultImportOptions();\n+\n+        when( workContext.getImportOptions() ).thenReturn( importOptions );\n+        when( workContext.getProgramInstanceMap() ).thenReturn( programInstanceMap );\n+\n+        // method under test\n+        ImportSummary summary = rule.check( new ImmutableEvent( event ), workContext );\n+\n+        assertHasError( summary, event, \"Program is not assigned to this organisation unit: \" + event.getOrgUnit() );\n+    }\n+\n+    private Set<OrganisationUnit> create( int size, String orgUnit, IdScheme idScheme )\n+    {\n+        Set<OrganisationUnit> result = new HashSet<>();\n+        int rnd = RandomUtils.nextInt( 1, 5 );", "originalCommit": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM5NjMzOA==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448396338", "bodyText": "Fixed", "author": "luciano-fiandesio", "createdAt": "2020-07-01T14:18:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzNDg2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "a61dc512c370d29aba9f030a57d4552899241579", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramOrgUnitCheckTest.java b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramOrgUnitCheckTest.java\nindex 4a1bd08cbe..ce6ac44500 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramOrgUnitCheckTest.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramOrgUnitCheckTest.java\n", "chunk": "@@ -111,16 +154,12 @@ public class ProgramOrgUnitCheckTest extends BaseValidationTest\n \n         Map<String, ProgramInstance> programInstanceMap = new HashMap<>();\n         programInstanceMap.put( event.getUid(), pi );\n-\n-        ImportOptions importOptions = ImportOptions.getDefaultImportOptions();\n-\n-        when( workContext.getImportOptions() ).thenReturn( importOptions );\n         when( workContext.getProgramInstanceMap() ).thenReturn( programInstanceMap );\n \n         // method under test\n         ImportSummary summary = rule.check( new ImmutableEvent( event ), workContext );\n \n-        assertHasError( summary, event, \"Program is not assigned to this organisation unit: \" + event.getOrgUnit() );\n+        assertHasError( summary, event, \"Program is not assigned to this Organisation Unit: \" + event.getOrgUnit() );\n     }\n \n     private Set<OrganisationUnit> create( int size, String orgUnit, IdScheme idScheme )\n", "next_change": null}]}, "revised_code_in_main": {"commit": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramOrgUnitCheckTest.java b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramOrgUnitCheckTest.java\nindex 4a1bd08cbe..ce6ac44500 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramOrgUnitCheckTest.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramOrgUnitCheckTest.java\n", "chunk": "@@ -111,16 +154,12 @@ public class ProgramOrgUnitCheckTest extends BaseValidationTest\n \n         Map<String, ProgramInstance> programInstanceMap = new HashMap<>();\n         programInstanceMap.put( event.getUid(), pi );\n-\n-        ImportOptions importOptions = ImportOptions.getDefaultImportOptions();\n-\n-        when( workContext.getImportOptions() ).thenReturn( importOptions );\n         when( workContext.getProgramInstanceMap() ).thenReturn( programInstanceMap );\n \n         // method under test\n         ImportSummary summary = rule.check( new ImmutableEvent( event ), workContext );\n \n-        assertHasError( summary, event, \"Program is not assigned to this organisation unit: \" + event.getOrgUnit() );\n+        assertHasError( summary, event, \"Program is not assigned to this Organisation Unit: \" + event.getOrgUnit() );\n     }\n \n     private Set<OrganisationUnit> create( int size, String orgUnit, IdScheme idScheme )\n", "next_change": {"commit": "fb390e24a39efb3e206bd995b5f9d964ede0cb33", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramOrgUnitCheckTest.java b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramOrgUnitCheckTest.java\nindex ce6ac44500..63da99dfe7 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramOrgUnitCheckTest.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramOrgUnitCheckTest.java\n", "chunk": "@@ -161,37 +133,4 @@ public class ProgramOrgUnitCheckTest extends BaseValidationTest\n \n         assertHasError( summary, event, \"Program is not assigned to this Organisation Unit: \" + event.getOrgUnit() );\n     }\n-\n-    private Set<OrganisationUnit> create( int size, String orgUnit, IdScheme idScheme )\n-    {\n-        Set<OrganisationUnit> result = new HashSet<>();\n-        int rnd = RandomUtils.nextInt( 1, 5 );\n-        for ( int i = 0; i < size; i++ )\n-        {\n-            OrganisationUnit ou = createOrganisationUnit( RandomStringUtils.randomAlphabetic( 1 ) );\n-            if ( rnd == i )\n-            {\n-                if ( idScheme.equals( IdScheme.UID ) )\n-                {\n-                    ou.setUid( orgUnit );\n-                }\n-                else if ( idScheme.equals( IdScheme.CODE ) )\n-                {\n-                    ou.setCode( orgUnit );\n-                }\n-                else if ( idScheme.equals( IdScheme.ID ) )\n-                {\n-                    ou.setId( Long.parseLong( orgUnit ) );\n-                }\n-                else if ( idScheme.equals( IdScheme.NAME ) )\n-                {\n-                    ou.setName( orgUnit );\n-                }\n-            }\n-            result.add( ou );\n-        }\n-\n-        return result;\n-    }\n-\n }\n", "next_change": {"commit": "22d5da9d9a812b02eb5acd643112a6b050b5d63c", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramOrgUnitCheckTest.java b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramOrgUnitCheckTest.java\nindex 63da99dfe7..7cc87d631b 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramOrgUnitCheckTest.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramOrgUnitCheckTest.java\n", "chunk": "@@ -75,62 +78,47 @@ public class ProgramOrgUnitCheckTest extends BaseValidationTest\n     {\n         // assign a UID to the event's org unit\n         event.setOrgUnit( orgUnitId );\n-\n         // Prepare data\n         Program program = createProgram( 'P' );\n         program.setId( 1 );\n-        \n         OrganisationUnit ou = new OrganisationUnit();\n         ou.setId( 1 );\n         ou.setUid( orgUnitId );\n         when( workContext.getOrganisationUnitMap() ).thenReturn( ImmutableMap.of( event.getUid(), ou ) );\n-        \n         when( workContext.getProgramWithOrgUnitsMap() ).thenReturn( ImmutableMap.of( 1L, ImmutableList.of( 1L ) ) );\n-        \n         ProgramInstance pi = new ProgramInstance();\n         pi.setProgram( program );\n-\n         Map<String, ProgramInstance> programInstanceMap = new HashMap<>();\n         programInstanceMap.put( event.getUid(), pi );\n         when( workContext.getProgramInstanceMap() ).thenReturn( programInstanceMap );\n-        \n         ImportOptions importOptions = ImportOptions.getDefaultImportOptions();\n         importOptions.setOrgUnitIdScheme( scheme.name() );\n         when( workContext.getImportOptions() ).thenReturn( importOptions );\n-\n         // method under test\n         ImportSummary summary = rule.check( new ImmutableEvent( event ), workContext );\n-\n         assertNoError( summary );\n     }\n \n     @Test\n-    public void failWhenProgramHasNoOrgUnitMatchingEventOrgUnit()\n+    void failWhenProgramHasNoOrgUnitMatchingEventOrgUnit()\n     {\n         // assign a UID to the event's org unit\n         event.setOrgUnit( CodeGenerator.generateUid() );\n-\n         // Prepare data\n         Program program = createProgram( 'P' );\n         program.setId( 1 );\n-\n         OrganisationUnit ou = new OrganisationUnit();\n         ou.setId( 1 );\n         ou.setUid( event.getOrgUnit() );\n         when( workContext.getOrganisationUnitMap() ).thenReturn( ImmutableMap.of( event.getUid(), ou ) );\n-\n         when( workContext.getProgramWithOrgUnitsMap() ).thenReturn( new HashMap<>() );\n-\n         ProgramInstance pi = new ProgramInstance();\n         pi.setProgram( program );\n-\n         Map<String, ProgramInstance> programInstanceMap = new HashMap<>();\n         programInstanceMap.put( event.getUid(), pi );\n         when( workContext.getProgramInstanceMap() ).thenReturn( programInstanceMap );\n-\n         // method under test\n         ImportSummary summary = rule.check( new ImmutableEvent( event ), workContext );\n-\n         assertHasError( summary, event, \"Program is not assigned to this Organisation Unit: \" + event.getOrgUnit() );\n     }\n }\n", "next_change": {"commit": "e4f8abdfdb132f536835b3be17a3391da2089823", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramOrgUnitCheckTest.java b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramOrgUnitCheckTest.java\nindex 7cc87d631b..d2ece5c52b 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramOrgUnitCheckTest.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramOrgUnitCheckTest.java\n", "chunk": "@@ -110,11 +108,11 @@ class ProgramOrgUnitCheckTest extends BaseValidationTest\n         OrganisationUnit ou = new OrganisationUnit();\n         ou.setId( 1 );\n         ou.setUid( event.getOrgUnit() );\n-        when( workContext.getOrganisationUnitMap() ).thenReturn( ImmutableMap.of( event.getUid(), ou ) );\n+        when( workContext.getOrganisationUnitMap() ).thenReturn( Map.of( event.getUid(), ou ) );\n         when( workContext.getProgramWithOrgUnitsMap() ).thenReturn( new HashMap<>() );\n-        ProgramInstance pi = new ProgramInstance();\n+        Enrollment pi = new Enrollment();\n         pi.setProgram( program );\n-        Map<String, ProgramInstance> programInstanceMap = new HashMap<>();\n+        Map<String, Enrollment> programInstanceMap = new HashMap<>();\n         programInstanceMap.put( event.getUid(), pi );\n         when( workContext.getProgramInstanceMap() ).thenReturn( programInstanceMap );\n         // method under test\n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "message": "Merge commit", "committedDate": null}, {"oid": "fb390e24a39efb3e206bd995b5f9d964ede0cb33", "committedDate": "2020-12-16 15:20:31 +0100", "message": "perf: reduce number of Org Units fetched from DB on Tracker Import (#6920)"}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "22d5da9d9a812b02eb5acd643112a6b050b5d63c", "committedDate": "2021-12-16 13:19:38 +0100", "message": "chore: migrate tests to JUnit 5 (#9467)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "43725fed360d23cefb272443d6b3cf36cb72ff74", "committedDate": "2023-01-23 11:12:38 +0100", "message": "refactor: Use java Map#of over Guava ImmutableMap#builder (#12804)"}, {"oid": "85eb40bd6e78f41d29ee0b506921edb65f739591", "committedDate": "2023-01-23 13:03:29 +0100", "message": "refactor: Use java List#of over Guava ImmutableList#of (#12806)"}, {"oid": "e4f8abdfdb132f536835b3be17a3391da2089823", "committedDate": "2023-05-03 11:31:41 +0000", "message": "chore: Rename ProgramInstance to Enrollment [TECH-1547] (#13794)"}, {"oid": "02336c9611c0dd85d5038223bddbfdebc0aae526", "committedDate": "2023-05-11 19:34:26 +0200", "message": "chore: move old tracker dxf2 code into deprecated package (#13901)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzNDk1OA==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448034958", "body": "license order, before imports", "bodyText": "license order, before imports", "bodyHTML": "<p dir=\"auto\">license order, before imports</p>", "author": "mortenoh", "createdAt": "2020-06-30T23:31:29Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/shared/validation/AttributeOptionComboDateCheckTest.java", "diffHunk": "@@ -0,0 +1,119 @@\n+package org.hisp.dhis.dxf2.events.importer.shared.validation;\n+\n+import static org.mockito.Mockito.when;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.hisp.dhis.category.CategoryOption;\n+import org.hisp.dhis.category.CategoryOptionCombo;\n+import org.hisp.dhis.common.IllegalQueryException;\n+import org.hisp.dhis.dxf2.events.importer.shared.ImmutableEvent;\n+import org.hisp.dhis.dxf2.events.importer.validation.BaseValidationTest;\n+import org.hisp.dhis.util.DateUtils;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+\n+/*", "originalCommit": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM5NjY3Mg==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448396672", "bodyText": "Fixed", "author": "luciano-fiandesio", "createdAt": "2020-07-01T14:19:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzNDk1OA=="}], "type": "inlineReview", "revised_code": {"commit": "7032498b0cbac9437a93d7deeb72862937c55a98", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/shared/validation/AttributeOptionComboDateCheckTest.java b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/shared/validation/AttributeOptionComboDateCheckTest.java\nindex 67cff4abea..25da741b04 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/shared/validation/AttributeOptionComboDateCheckTest.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/shared/validation/AttributeOptionComboDateCheckTest.java\n", "chunk": "@@ -1,23 +1,5 @@\n package org.hisp.dhis.dxf2.events.importer.shared.validation;\n \n-import static org.mockito.Mockito.when;\n-\n-import java.util.HashMap;\n-import java.util.HashSet;\n-import java.util.Map;\n-import java.util.Set;\n-\n-import org.hisp.dhis.category.CategoryOption;\n-import org.hisp.dhis.category.CategoryOptionCombo;\n-import org.hisp.dhis.common.IllegalQueryException;\n-import org.hisp.dhis.dxf2.events.importer.shared.ImmutableEvent;\n-import org.hisp.dhis.dxf2.events.importer.validation.BaseValidationTest;\n-import org.hisp.dhis.util.DateUtils;\n-import org.junit.Before;\n-import org.junit.Rule;\n-import org.junit.Test;\n-import org.junit.rules.ExpectedException;\n-\n /*\n  * Copyright (c) 2004-2020, University of Oslo\n  * All rights reserved.\n", "next_change": {"commit": "d360652a896bee650a842567e26cd1e62145cccb", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/shared/validation/AttributeOptionComboDateCheckTest.java b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/shared/validation/AttributeOptionComboDateCheckTest.java\nindex 25da741b04..67cff4abea 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/shared/validation/AttributeOptionComboDateCheckTest.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/shared/validation/AttributeOptionComboDateCheckTest.java\n", "chunk": "@@ -1,5 +1,23 @@\n package org.hisp.dhis.dxf2.events.importer.shared.validation;\n \n+import static org.mockito.Mockito.when;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.hisp.dhis.category.CategoryOption;\n+import org.hisp.dhis.category.CategoryOptionCombo;\n+import org.hisp.dhis.common.IllegalQueryException;\n+import org.hisp.dhis.dxf2.events.importer.shared.ImmutableEvent;\n+import org.hisp.dhis.dxf2.events.importer.validation.BaseValidationTest;\n+import org.hisp.dhis.util.DateUtils;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+\n /*\n  * Copyright (c) 2004-2020, University of Oslo\n  * All rights reserved.\n", "next_change": {"commit": "c9cbe9cf8b22a49324c53b68eba31b9c63684df4", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/shared/validation/AttributeOptionComboDateCheckTest.java b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/shared/validation/AttributeOptionComboDateCheckTest.java\nindex 67cff4abea..25da741b04 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/shared/validation/AttributeOptionComboDateCheckTest.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/shared/validation/AttributeOptionComboDateCheckTest.java\n", "chunk": "@@ -1,23 +1,5 @@\n package org.hisp.dhis.dxf2.events.importer.shared.validation;\n \n-import static org.mockito.Mockito.when;\n-\n-import java.util.HashMap;\n-import java.util.HashSet;\n-import java.util.Map;\n-import java.util.Set;\n-\n-import org.hisp.dhis.category.CategoryOption;\n-import org.hisp.dhis.category.CategoryOptionCombo;\n-import org.hisp.dhis.common.IllegalQueryException;\n-import org.hisp.dhis.dxf2.events.importer.shared.ImmutableEvent;\n-import org.hisp.dhis.dxf2.events.importer.validation.BaseValidationTest;\n-import org.hisp.dhis.util.DateUtils;\n-import org.junit.Before;\n-import org.junit.Rule;\n-import org.junit.Test;\n-import org.junit.rules.ExpectedException;\n-\n /*\n  * Copyright (c) 2004-2020, University of Oslo\n  * All rights reserved.\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/shared/validation/AttributeOptionComboDateCheckTest.java b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/shared/validation/AttributeOptionComboDateCheckTest.java\nindex 67cff4abea..9bb0430a51 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/shared/validation/AttributeOptionComboDateCheckTest.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/shared/validation/AttributeOptionComboDateCheckTest.java\n", "chunk": "@@ -1,23 +1,5 @@\n package org.hisp.dhis.dxf2.events.importer.shared.validation;\n \n-import static org.mockito.Mockito.when;\n-\n-import java.util.HashMap;\n-import java.util.HashSet;\n-import java.util.Map;\n-import java.util.Set;\n-\n-import org.hisp.dhis.category.CategoryOption;\n-import org.hisp.dhis.category.CategoryOptionCombo;\n-import org.hisp.dhis.common.IllegalQueryException;\n-import org.hisp.dhis.dxf2.events.importer.shared.ImmutableEvent;\n-import org.hisp.dhis.dxf2.events.importer.validation.BaseValidationTest;\n-import org.hisp.dhis.util.DateUtils;\n-import org.junit.Before;\n-import org.junit.Rule;\n-import org.junit.Test;\n-import org.junit.rules.ExpectedException;\n-\n /*\n  * Copyright (c) 2004-2020, University of Oslo\n  * All rights reserved.\n", "next_change": {"commit": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/shared/validation/AttributeOptionComboDateCheckTest.java b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/shared/validation/AttributeOptionComboDateCheckTest.java\nindex 9bb0430a51..b3181a2160 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/shared/validation/AttributeOptionComboDateCheckTest.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/shared/validation/AttributeOptionComboDateCheckTest.java\n", "chunk": "@@ -1,7 +1,7 @@\n package org.hisp.dhis.dxf2.events.importer.shared.validation;\n \n /*\n- * Copyright (c) 2004-2020, University of Oslo\n+ * Copyright (c) 2004-2021, University of Oslo\n  * All rights reserved.\n  *\n  * Redistribution and use in source and binary forms, with or without\n", "next_change": {"commit": "ea76fa86409613c9766d4508d65c88ac55c413c3", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/shared/validation/AttributeOptionComboDateCheckTest.java b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/shared/validation/AttributeOptionComboDateCheckTest.java\nindex b3181a2160..a32f92f2bc 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/shared/validation/AttributeOptionComboDateCheckTest.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/shared/validation/AttributeOptionComboDateCheckTest.java\n", "chunk": "@@ -1,5 +1,3 @@\n-package org.hisp.dhis.dxf2.events.importer.shared.validation;\n-\n /*\n  * Copyright (c) 2004-2021, University of Oslo\n  * All rights reserved.\n", "next_change": {"commit": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/shared/validation/AttributeOptionComboDateCheckTest.java b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/shared/validation/AttributeOptionComboDateCheckTest.java\nindex a32f92f2bc..f1f8d30006 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/shared/validation/AttributeOptionComboDateCheckTest.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/shared/validation/AttributeOptionComboDateCheckTest.java\n", "chunk": "@@ -1,5 +1,5 @@\n /*\n- * Copyright (c) 2004-2021, University of Oslo\n+ * Copyright (c) 2004-2022, University of Oslo\n  * All rights reserved.\n  *\n  * Redistribution and use in source and binary forms, with or without\n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "message": "Merge commit", "committedDate": null}, {"oid": "8aaeab2ee4dd7a9ffa927147931dff8609ef787a", "committedDate": "2020-09-23 15:33:34 +0200", "message": "chore: Remove unused imports (#6219)"}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "5f0613c57316bb855e4b9ee931932f23edf54142", "committedDate": "2021-11-16 10:54:05 -0500", "message": "feat: Program.openDaysAfterCoEndDate DHIS2-11234 (#9219)"}, {"oid": "22d5da9d9a812b02eb5acd643112a6b050b5d63c", "committedDate": "2021-12-16 13:19:38 +0100", "message": "chore: migrate tests to JUnit 5 (#9467)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "02336c9611c0dd85d5038223bddbfdebc0aae526", "committedDate": "2023-05-11 19:34:26 +0200", "message": "chore: move old tracker dxf2 code into deprecated package (#13901)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzNTE4Mg==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448035182", "body": "newline", "bodyText": "newline", "bodyHTML": "<p dir=\"auto\">newline</p>", "author": "mortenoh", "createdAt": "2020-06-30T23:32:09Z", "path": "dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/event/mapper/RequestToSearchParamsMapper.java", "diffHunk": "@@ -0,0 +1,266 @@\n+package org.hisp.dhis.webapi.controller.event.mapper;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import java.util.Date;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.hisp.dhis.category.CategoryOptionCombo;\n+import org.hisp.dhis.common.AssignedUserSelectionMode;\n+import org.hisp.dhis.common.DimensionalObject;\n+import org.hisp.dhis.common.IdSchemes;\n+import org.hisp.dhis.common.IllegalQueryException;\n+import org.hisp.dhis.common.OrganisationUnitSelectionMode;\n+import org.hisp.dhis.common.QueryFilter;\n+import org.hisp.dhis.common.QueryItem;\n+import org.hisp.dhis.common.QueryOperator;\n+import org.hisp.dhis.dataelement.DataElement;\n+import org.hisp.dhis.dataelement.DataElementService;\n+import org.hisp.dhis.dxf2.events.event.EventSearchParams;\n+import org.hisp.dhis.event.EventStatus;\n+import org.hisp.dhis.organisationunit.OrganisationUnit;\n+import org.hisp.dhis.organisationunit.OrganisationUnitService;\n+import org.hisp.dhis.program.Program;\n+import org.hisp.dhis.program.ProgramService;\n+import org.hisp.dhis.program.ProgramStage;\n+import org.hisp.dhis.program.ProgramStageService;\n+import org.hisp.dhis.program.ProgramStatus;\n+import org.hisp.dhis.query.Order;\n+import org.hisp.dhis.security.acl.AclService;\n+import org.hisp.dhis.trackedentity.TrackedEntityInstance;\n+import org.hisp.dhis.trackedentity.TrackedEntityInstanceService;\n+import org.hisp.dhis.user.CurrentUserService;\n+import org.hisp.dhis.user.User;\n+import org.hisp.dhis.user.UserCredentials;\n+import org.springframework.stereotype.Component;\n+import org.springframework.util.StringUtils;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+@Component\n+public class RequestToSearchParamsMapper\n+{\n+    private final CurrentUserService currentUserService;\n+\n+    private final ProgramService programService;\n+\n+    private final OrganisationUnitService organisationUnitService;\n+\n+    private final ProgramStageService programStageService;\n+\n+    private final AclService aclService;\n+\n+    private final TrackedEntityInstanceService entityInstanceService;\n+\n+    private final DataElementService dataElementService;\n+\n+    public RequestToSearchParamsMapper( CurrentUserService currentUserService, ProgramService programService,\n+        OrganisationUnitService organisationUnitService, ProgramStageService programStageService, AclService aclService,\n+        TrackedEntityInstanceService entityInstanceService, DataElementService dataElementService )\n+    {\n+        checkNotNull( currentUserService );\n+        checkNotNull( programService );\n+        checkNotNull( organisationUnitService );\n+        checkNotNull( programStageService );\n+        checkNotNull( aclService );\n+        checkNotNull( entityInstanceService );\n+        checkNotNull( dataElementService );", "originalCommit": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM5NzM4OQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448397389", "bodyText": "I guess newline means add a new line between checkNotNull and the dependency setting. Fixed", "author": "luciano-fiandesio", "createdAt": "2020-07-01T14:20:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzNTE4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "7032498b0cbac9437a93d7deeb72862937c55a98", "changed_code": [{"header": "diff --git a/dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/event/mapper/RequestToSearchParamsMapper.java b/dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/event/mapper/RequestToSearchParamsMapper.java\nindex 11d5781636..2f94d5797c 100644\n--- a/dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/event/mapper/RequestToSearchParamsMapper.java\n+++ b/dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/event/mapper/RequestToSearchParamsMapper.java\n", "chunk": "@@ -96,6 +96,7 @@ public class RequestToSearchParamsMapper\n         checkNotNull( aclService );\n         checkNotNull( entityInstanceService );\n         checkNotNull( dataElementService );\n+\n         this.currentUserService = currentUserService;\n         this.programService = programService;\n         this.organisationUnitService = organisationUnitService;\n", "next_change": {"commit": "d360652a896bee650a842567e26cd1e62145cccb", "changed_code": [{"header": "diff --git a/dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/event/mapper/RequestToSearchParamsMapper.java b/dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/event/mapper/RequestToSearchParamsMapper.java\nindex 2f94d5797c..11d5781636 100644\n--- a/dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/event/mapper/RequestToSearchParamsMapper.java\n+++ b/dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/event/mapper/RequestToSearchParamsMapper.java\n", "chunk": "@@ -96,7 +96,6 @@ public class RequestToSearchParamsMapper\n         checkNotNull( aclService );\n         checkNotNull( entityInstanceService );\n         checkNotNull( dataElementService );\n-\n         this.currentUserService = currentUserService;\n         this.programService = programService;\n         this.organisationUnitService = organisationUnitService;\n", "next_change": {"commit": "c9cbe9cf8b22a49324c53b68eba31b9c63684df4", "changed_code": [{"header": "diff --git a/dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/event/mapper/RequestToSearchParamsMapper.java b/dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/event/mapper/RequestToSearchParamsMapper.java\nindex 11d5781636..2f94d5797c 100644\n--- a/dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/event/mapper/RequestToSearchParamsMapper.java\n+++ b/dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/event/mapper/RequestToSearchParamsMapper.java\n", "chunk": "@@ -96,6 +96,7 @@ public class RequestToSearchParamsMapper\n         checkNotNull( aclService );\n         checkNotNull( entityInstanceService );\n         checkNotNull( dataElementService );\n+\n         this.currentUserService = currentUserService;\n         this.programService = programService;\n         this.organisationUnitService = organisationUnitService;\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "changed_code": [{"header": "diff --git a/dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/event/mapper/RequestToSearchParamsMapper.java b/dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/event/mapper/RequestToSearchParamsMapper.java\nindex 11d5781636..171b649297 100644\n--- a/dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/event/mapper/RequestToSearchParamsMapper.java\n+++ b/dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/event/mapper/RequestToSearchParamsMapper.java\n", "chunk": "@@ -96,6 +98,7 @@ public class RequestToSearchParamsMapper\n         checkNotNull( aclService );\n         checkNotNull( entityInstanceService );\n         checkNotNull( dataElementService );\n+\n         this.currentUserService = currentUserService;\n         this.programService = programService;\n         this.organisationUnitService = organisationUnitService;\n", "next_change": {"commit": "5d1a415fef305ea3cc18a3c2fadceb208403006a", "changed_code": [{"header": "diff --git a/dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/event/mapper/RequestToSearchParamsMapper.java b/dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/event/mapper/RequestToSearchParamsMapper.java\nindex 171b649297..f7ac81d274 100644\n--- a/dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/event/mapper/RequestToSearchParamsMapper.java\n+++ b/dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/event/mapper/RequestToSearchParamsMapper.java\n", "chunk": "@@ -87,25 +103,19 @@ public class RequestToSearchParamsMapper\n \n     private final DataElementService dataElementService;\n \n-    public RequestToSearchParamsMapper( CurrentUserService currentUserService, ProgramService programService,\n-        OrganisationUnitService organisationUnitService, ProgramStageService programStageService, AclService aclService,\n-        TrackedEntityInstanceService entityInstanceService, DataElementService dataElementService )\n+    private final InputUtils inputUtils;\n+\n+    private final SchemaService schemaService;\n+\n+    private Schema schema;\n+\n+    @PostConstruct\n+    void setSchema()\n     {\n-        checkNotNull( currentUserService );\n-        checkNotNull( programService );\n-        checkNotNull( organisationUnitService );\n-        checkNotNull( programStageService );\n-        checkNotNull( aclService );\n-        checkNotNull( entityInstanceService );\n-        checkNotNull( dataElementService );\n-\n-        this.currentUserService = currentUserService;\n-        this.programService = programService;\n-        this.organisationUnitService = organisationUnitService;\n-        this.programStageService = programStageService;\n-        this.aclService = aclService;\n-        this.entityInstanceService = entityInstanceService;\n-        this.dataElementService = dataElementService;\n+        if ( schema == null )\n+        {\n+            schema = schemaService.getDynamicSchema( Event.class );\n+        }\n     }\n \n     public EventSearchParams map( String program, String programStage, ProgramStatus programStatus, Boolean followUp,\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "message": "Merge commit", "committedDate": null}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "4f8c3d0a7bb239580b4818252df4b7c9ee158471", "committedDate": "2021-01-13 15:21:46 +0100", "message": "fix: Support Accept header for outlier detection API formats (#7088)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "5d1a415fef305ea3cc18a3c2fadceb208403006a", "committedDate": "2021-01-29 09:30:08 +0100", "message": "refactor: Controllers params [DHIS2-10202] (#7201)"}, {"oid": "622a9d2fea0bc9fdd47969a6941855cf6f51cb60", "committedDate": "2021-02-02 11:20:48 +0100", "message": "refactor: new request parameters for GET endpoints, following new naming convention (DHIS2-10369) (#7240)"}, {"oid": "b6d89c3fcbeb5293e09f2c6f9a09e1f6136dc310", "committedDate": "2021-03-11 10:04:09 +0100", "message": "fix: fixed attribute option combo request param [DHIS2-10672] (#7587)"}, {"oid": "c8dd0f5f17e49a44b023a6802b9e5b123a6f02da", "committedDate": "2021-05-20 19:59:19 +0200", "message": "feat: Make DHIS2 API runnable with embedded Jetty [DHIS2-11005] (#7996)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzNTg0NA==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448035844", "body": "author header", "bodyText": "author header", "bodyHTML": "<p dir=\"auto\">author header</p>", "author": "mortenoh", "createdAt": "2020-06-30T23:34:18Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/postprocess/ProgramNotificationPostProcessor.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer.update.postprocess;\n+\n+import static org.hisp.dhis.event.EventStatus.SCHEDULE;\n+\n+import org.hisp.dhis.dxf2.events.event.Event;\n+import org.hisp.dhis.dxf2.events.importer.Processor;\n+import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n+import org.hisp.dhis.program.ProgramStageInstance;\n+import org.hisp.dhis.program.notification.event.ProgramStageCompletionNotificationEvent;\n+import org.hisp.dhis.programrule.engine.StageCompletionEvaluationEvent;\n+import org.hisp.dhis.programrule.engine.StageScheduledEvaluationEvent;\n+import org.springframework.context.ApplicationEventPublisher;\n+\n+public class ProgramNotificationPostProcessor", "originalCommit": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM5NzU2NQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448397565", "bodyText": "Fixed", "author": "luciano-fiandesio", "createdAt": "2020-07-01T14:20:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzNTg0NA=="}], "type": "inlineReview", "revised_code": {"commit": "7032498b0cbac9437a93d7deeb72862937c55a98", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/postprocess/ProgramNotificationPostProcessor.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/postprocess/ProgramNotificationPostProcessor.java\nindex 22a823523a..062da91c01 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/postprocess/ProgramNotificationPostProcessor.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/postprocess/ProgramNotificationPostProcessor.java\n", "chunk": "@@ -39,18 +39,19 @@ import org.hisp.dhis.programrule.engine.StageCompletionEvaluationEvent;\n import org.hisp.dhis.programrule.engine.StageScheduledEvaluationEvent;\n import org.springframework.context.ApplicationEventPublisher;\n \n-public class ProgramNotificationPostProcessor\n-    implements\n-    Processor\n+/**\n+ * @author maikel arabori\n+ */\n+public class ProgramNotificationPostProcessor implements Processor\n {\n-\n     @Override\n     public void process( final Event event, final WorkContext ctx )\n     {\n         if ( !ctx.getImportOptions().isSkipNotifications() )\n         {\n             final ProgramStageInstance programStageInstance = ctx.getProgramStageInstanceMap().get( event.getEvent() );\n-            final ApplicationEventPublisher applicationEventPublisher = ctx.getServiceDelegator().getApplicationEventPublisher();\n+            final ApplicationEventPublisher applicationEventPublisher = ctx.getServiceDelegator()\n+                .getApplicationEventPublisher();\n \n             if ( programStageInstance.isCompleted() )\n             {\n", "next_change": {"commit": "d360652a896bee650a842567e26cd1e62145cccb", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/postprocess/ProgramNotificationPostProcessor.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/postprocess/ProgramNotificationPostProcessor.java\nindex 062da91c01..22a823523a 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/postprocess/ProgramNotificationPostProcessor.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/postprocess/ProgramNotificationPostProcessor.java\n", "chunk": "@@ -39,19 +39,18 @@ import org.hisp.dhis.programrule.engine.StageCompletionEvaluationEvent;\n import org.hisp.dhis.programrule.engine.StageScheduledEvaluationEvent;\n import org.springframework.context.ApplicationEventPublisher;\n \n-/**\n- * @author maikel arabori\n- */\n-public class ProgramNotificationPostProcessor implements Processor\n+public class ProgramNotificationPostProcessor\n+    implements\n+    Processor\n {\n+\n     @Override\n     public void process( final Event event, final WorkContext ctx )\n     {\n         if ( !ctx.getImportOptions().isSkipNotifications() )\n         {\n             final ProgramStageInstance programStageInstance = ctx.getProgramStageInstanceMap().get( event.getEvent() );\n-            final ApplicationEventPublisher applicationEventPublisher = ctx.getServiceDelegator()\n-                .getApplicationEventPublisher();\n+            final ApplicationEventPublisher applicationEventPublisher = ctx.getServiceDelegator().getApplicationEventPublisher();\n \n             if ( programStageInstance.isCompleted() )\n             {\n", "next_change": {"commit": "c9cbe9cf8b22a49324c53b68eba31b9c63684df4", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/postprocess/ProgramNotificationPostProcessor.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/postprocess/ProgramNotificationPostProcessor.java\nindex 22a823523a..062da91c01 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/postprocess/ProgramNotificationPostProcessor.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/postprocess/ProgramNotificationPostProcessor.java\n", "chunk": "@@ -39,18 +39,19 @@ import org.hisp.dhis.programrule.engine.StageCompletionEvaluationEvent;\n import org.hisp.dhis.programrule.engine.StageScheduledEvaluationEvent;\n import org.springframework.context.ApplicationEventPublisher;\n \n-public class ProgramNotificationPostProcessor\n-    implements\n-    Processor\n+/**\n+ * @author maikel arabori\n+ */\n+public class ProgramNotificationPostProcessor implements Processor\n {\n-\n     @Override\n     public void process( final Event event, final WorkContext ctx )\n     {\n         if ( !ctx.getImportOptions().isSkipNotifications() )\n         {\n             final ProgramStageInstance programStageInstance = ctx.getProgramStageInstanceMap().get( event.getEvent() );\n-            final ApplicationEventPublisher applicationEventPublisher = ctx.getServiceDelegator().getApplicationEventPublisher();\n+            final ApplicationEventPublisher applicationEventPublisher = ctx.getServiceDelegator()\n+                .getApplicationEventPublisher();\n \n             if ( programStageInstance.isCompleted() )\n             {\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/postprocess/ProgramNotificationPostProcessor.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/postprocess/ProgramNotificationPostProcessor.java\nindex 22a823523a..062da91c01 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/postprocess/ProgramNotificationPostProcessor.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/postprocess/ProgramNotificationPostProcessor.java\n", "chunk": "@@ -39,18 +39,19 @@ import org.hisp.dhis.programrule.engine.StageCompletionEvaluationEvent;\n import org.hisp.dhis.programrule.engine.StageScheduledEvaluationEvent;\n import org.springframework.context.ApplicationEventPublisher;\n \n-public class ProgramNotificationPostProcessor\n-    implements\n-    Processor\n+/**\n+ * @author maikel arabori\n+ */\n+public class ProgramNotificationPostProcessor implements Processor\n {\n-\n     @Override\n     public void process( final Event event, final WorkContext ctx )\n     {\n         if ( !ctx.getImportOptions().isSkipNotifications() )\n         {\n             final ProgramStageInstance programStageInstance = ctx.getProgramStageInstanceMap().get( event.getEvent() );\n-            final ApplicationEventPublisher applicationEventPublisher = ctx.getServiceDelegator().getApplicationEventPublisher();\n+            final ApplicationEventPublisher applicationEventPublisher = ctx.getServiceDelegator()\n+                .getApplicationEventPublisher();\n \n             if ( programStageInstance.isCompleted() )\n             {\n", "next_change": {"commit": "55e411fdd03ee5ae46ed305e85d8feb26d53a201", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/postprocess/ProgramNotificationPostProcessor.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/postprocess/ProgramNotificationPostProcessor.java\nsimilarity index 82%\nrename from dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/postprocess/ProgramNotificationPostProcessor.java\nrename to dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/postprocess/ProgramNotificationPostProcessor.java\nindex 062da91c01..98caa98340 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/postprocess/ProgramNotificationPostProcessor.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/postprocess/ProgramNotificationPostProcessor.java\n", "chunk": "@@ -49,7 +52,10 @@ public class ProgramNotificationPostProcessor implements Processor\n     {\n         if ( !ctx.getImportOptions().isSkipNotifications() )\n         {\n-            final ProgramStageInstance programStageInstance = ctx.getProgramStageInstanceMap().get( event.getEvent() );\n+            // When this processor is invoked from insert event, then programStageInstance\n+            // might be null and need to be built from Event.\n+            final ProgramStageInstance programStageInstance = getProgramStageInstance( ctx, event );\n+\n             final ApplicationEventPublisher applicationEventPublisher = ctx.getServiceDelegator()\n                 .getApplicationEventPublisher();\n \n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "message": "Merge commit", "committedDate": null}, {"oid": "55e411fdd03ee5ae46ed305e85d8feb26d53a201", "committedDate": "2020-09-15 16:52:41 +0200", "message": "fix: DryRun flag and ProgramNotificationPostProcessor (DHIS2-9484) (#6144)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzNTk1Nw==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448035957", "body": "codestyle, too many newlines for implements and interface", "bodyText": "codestyle, too many newlines for implements and interface", "bodyHTML": "<p dir=\"auto\">codestyle, too many newlines for implements and interface</p>", "author": "mortenoh", "createdAt": "2020-06-30T23:34:38Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/postprocess/ProgramNotificationPostProcessor.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer.update.postprocess;\n+\n+import static org.hisp.dhis.event.EventStatus.SCHEDULE;\n+\n+import org.hisp.dhis.dxf2.events.event.Event;\n+import org.hisp.dhis.dxf2.events.importer.Processor;\n+import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n+import org.hisp.dhis.program.ProgramStageInstance;\n+import org.hisp.dhis.program.notification.event.ProgramStageCompletionNotificationEvent;\n+import org.hisp.dhis.programrule.engine.StageCompletionEvaluationEvent;\n+import org.hisp.dhis.programrule.engine.StageScheduledEvaluationEvent;\n+import org.springframework.context.ApplicationEventPublisher;\n+\n+public class ProgramNotificationPostProcessor\n+    implements", "originalCommit": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM5Nzg0NQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448397845", "bodyText": "Fixed", "author": "luciano-fiandesio", "createdAt": "2020-07-01T14:20:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzNTk1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "7032498b0cbac9437a93d7deeb72862937c55a98", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/postprocess/ProgramNotificationPostProcessor.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/postprocess/ProgramNotificationPostProcessor.java\nindex 22a823523a..062da91c01 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/postprocess/ProgramNotificationPostProcessor.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/postprocess/ProgramNotificationPostProcessor.java\n", "chunk": "@@ -39,18 +39,19 @@ import org.hisp.dhis.programrule.engine.StageCompletionEvaluationEvent;\n import org.hisp.dhis.programrule.engine.StageScheduledEvaluationEvent;\n import org.springframework.context.ApplicationEventPublisher;\n \n-public class ProgramNotificationPostProcessor\n-    implements\n-    Processor\n+/**\n+ * @author maikel arabori\n+ */\n+public class ProgramNotificationPostProcessor implements Processor\n {\n-\n     @Override\n     public void process( final Event event, final WorkContext ctx )\n     {\n         if ( !ctx.getImportOptions().isSkipNotifications() )\n         {\n             final ProgramStageInstance programStageInstance = ctx.getProgramStageInstanceMap().get( event.getEvent() );\n-            final ApplicationEventPublisher applicationEventPublisher = ctx.getServiceDelegator().getApplicationEventPublisher();\n+            final ApplicationEventPublisher applicationEventPublisher = ctx.getServiceDelegator()\n+                .getApplicationEventPublisher();\n \n             if ( programStageInstance.isCompleted() )\n             {\n", "next_change": {"commit": "d360652a896bee650a842567e26cd1e62145cccb", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/postprocess/ProgramNotificationPostProcessor.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/postprocess/ProgramNotificationPostProcessor.java\nindex 062da91c01..22a823523a 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/postprocess/ProgramNotificationPostProcessor.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/postprocess/ProgramNotificationPostProcessor.java\n", "chunk": "@@ -39,19 +39,18 @@ import org.hisp.dhis.programrule.engine.StageCompletionEvaluationEvent;\n import org.hisp.dhis.programrule.engine.StageScheduledEvaluationEvent;\n import org.springframework.context.ApplicationEventPublisher;\n \n-/**\n- * @author maikel arabori\n- */\n-public class ProgramNotificationPostProcessor implements Processor\n+public class ProgramNotificationPostProcessor\n+    implements\n+    Processor\n {\n+\n     @Override\n     public void process( final Event event, final WorkContext ctx )\n     {\n         if ( !ctx.getImportOptions().isSkipNotifications() )\n         {\n             final ProgramStageInstance programStageInstance = ctx.getProgramStageInstanceMap().get( event.getEvent() );\n-            final ApplicationEventPublisher applicationEventPublisher = ctx.getServiceDelegator()\n-                .getApplicationEventPublisher();\n+            final ApplicationEventPublisher applicationEventPublisher = ctx.getServiceDelegator().getApplicationEventPublisher();\n \n             if ( programStageInstance.isCompleted() )\n             {\n", "next_change": {"commit": "c9cbe9cf8b22a49324c53b68eba31b9c63684df4", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/postprocess/ProgramNotificationPostProcessor.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/postprocess/ProgramNotificationPostProcessor.java\nindex 22a823523a..062da91c01 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/postprocess/ProgramNotificationPostProcessor.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/postprocess/ProgramNotificationPostProcessor.java\n", "chunk": "@@ -39,18 +39,19 @@ import org.hisp.dhis.programrule.engine.StageCompletionEvaluationEvent;\n import org.hisp.dhis.programrule.engine.StageScheduledEvaluationEvent;\n import org.springframework.context.ApplicationEventPublisher;\n \n-public class ProgramNotificationPostProcessor\n-    implements\n-    Processor\n+/**\n+ * @author maikel arabori\n+ */\n+public class ProgramNotificationPostProcessor implements Processor\n {\n-\n     @Override\n     public void process( final Event event, final WorkContext ctx )\n     {\n         if ( !ctx.getImportOptions().isSkipNotifications() )\n         {\n             final ProgramStageInstance programStageInstance = ctx.getProgramStageInstanceMap().get( event.getEvent() );\n-            final ApplicationEventPublisher applicationEventPublisher = ctx.getServiceDelegator().getApplicationEventPublisher();\n+            final ApplicationEventPublisher applicationEventPublisher = ctx.getServiceDelegator()\n+                .getApplicationEventPublisher();\n \n             if ( programStageInstance.isCompleted() )\n             {\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/postprocess/ProgramNotificationPostProcessor.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/postprocess/ProgramNotificationPostProcessor.java\nindex 22a823523a..062da91c01 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/postprocess/ProgramNotificationPostProcessor.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/postprocess/ProgramNotificationPostProcessor.java\n", "chunk": "@@ -39,18 +39,19 @@ import org.hisp.dhis.programrule.engine.StageCompletionEvaluationEvent;\n import org.hisp.dhis.programrule.engine.StageScheduledEvaluationEvent;\n import org.springframework.context.ApplicationEventPublisher;\n \n-public class ProgramNotificationPostProcessor\n-    implements\n-    Processor\n+/**\n+ * @author maikel arabori\n+ */\n+public class ProgramNotificationPostProcessor implements Processor\n {\n-\n     @Override\n     public void process( final Event event, final WorkContext ctx )\n     {\n         if ( !ctx.getImportOptions().isSkipNotifications() )\n         {\n             final ProgramStageInstance programStageInstance = ctx.getProgramStageInstanceMap().get( event.getEvent() );\n-            final ApplicationEventPublisher applicationEventPublisher = ctx.getServiceDelegator().getApplicationEventPublisher();\n+            final ApplicationEventPublisher applicationEventPublisher = ctx.getServiceDelegator()\n+                .getApplicationEventPublisher();\n \n             if ( programStageInstance.isCompleted() )\n             {\n", "next_change": {"commit": "55e411fdd03ee5ae46ed305e85d8feb26d53a201", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/postprocess/ProgramNotificationPostProcessor.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/postprocess/ProgramNotificationPostProcessor.java\nsimilarity index 82%\nrename from dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/postprocess/ProgramNotificationPostProcessor.java\nrename to dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/postprocess/ProgramNotificationPostProcessor.java\nindex 062da91c01..98caa98340 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/postprocess/ProgramNotificationPostProcessor.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/postprocess/ProgramNotificationPostProcessor.java\n", "chunk": "@@ -49,7 +52,10 @@ public class ProgramNotificationPostProcessor implements Processor\n     {\n         if ( !ctx.getImportOptions().isSkipNotifications() )\n         {\n-            final ProgramStageInstance programStageInstance = ctx.getProgramStageInstanceMap().get( event.getEvent() );\n+            // When this processor is invoked from insert event, then programStageInstance\n+            // might be null and need to be built from Event.\n+            final ProgramStageInstance programStageInstance = getProgramStageInstance( ctx, event );\n+\n             final ApplicationEventPublisher applicationEventPublisher = ctx.getServiceDelegator()\n                 .getApplicationEventPublisher();\n \n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "message": "Merge commit", "committedDate": null}, {"oid": "55e411fdd03ee5ae46ed305e85d8feb26d53a201", "committedDate": "2020-09-15 16:52:41 +0200", "message": "fix: DryRun flag and ProgramNotificationPostProcessor (DHIS2-9484) (#6144)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzNTk5OQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448035999", "body": "remove newline", "bodyText": "remove newline", "bodyHTML": "<p dir=\"auto\">remove newline</p>", "author": "mortenoh", "createdAt": "2020-06-30T23:34:45Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/postprocess/ProgramNotificationPostProcessor.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer.update.postprocess;\n+\n+import static org.hisp.dhis.event.EventStatus.SCHEDULE;\n+\n+import org.hisp.dhis.dxf2.events.event.Event;\n+import org.hisp.dhis.dxf2.events.importer.Processor;\n+import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n+import org.hisp.dhis.program.ProgramStageInstance;\n+import org.hisp.dhis.program.notification.event.ProgramStageCompletionNotificationEvent;\n+import org.hisp.dhis.programrule.engine.StageCompletionEvaluationEvent;\n+import org.hisp.dhis.programrule.engine.StageScheduledEvaluationEvent;\n+import org.springframework.context.ApplicationEventPublisher;\n+\n+public class ProgramNotificationPostProcessor\n+    implements\n+    Processor\n+{\n+", "originalCommit": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM5Nzk0Nw==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448397947", "bodyText": "Fixed", "author": "luciano-fiandesio", "createdAt": "2020-07-01T14:21:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzNTk5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "7032498b0cbac9437a93d7deeb72862937c55a98", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/postprocess/ProgramNotificationPostProcessor.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/postprocess/ProgramNotificationPostProcessor.java\nindex 22a823523a..062da91c01 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/postprocess/ProgramNotificationPostProcessor.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/postprocess/ProgramNotificationPostProcessor.java\n", "chunk": "@@ -39,18 +39,19 @@ import org.hisp.dhis.programrule.engine.StageCompletionEvaluationEvent;\n import org.hisp.dhis.programrule.engine.StageScheduledEvaluationEvent;\n import org.springframework.context.ApplicationEventPublisher;\n \n-public class ProgramNotificationPostProcessor\n-    implements\n-    Processor\n+/**\n+ * @author maikel arabori\n+ */\n+public class ProgramNotificationPostProcessor implements Processor\n {\n-\n     @Override\n     public void process( final Event event, final WorkContext ctx )\n     {\n         if ( !ctx.getImportOptions().isSkipNotifications() )\n         {\n             final ProgramStageInstance programStageInstance = ctx.getProgramStageInstanceMap().get( event.getEvent() );\n-            final ApplicationEventPublisher applicationEventPublisher = ctx.getServiceDelegator().getApplicationEventPublisher();\n+            final ApplicationEventPublisher applicationEventPublisher = ctx.getServiceDelegator()\n+                .getApplicationEventPublisher();\n \n             if ( programStageInstance.isCompleted() )\n             {\n", "next_change": {"commit": "d360652a896bee650a842567e26cd1e62145cccb", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/postprocess/ProgramNotificationPostProcessor.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/postprocess/ProgramNotificationPostProcessor.java\nindex 062da91c01..22a823523a 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/postprocess/ProgramNotificationPostProcessor.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/postprocess/ProgramNotificationPostProcessor.java\n", "chunk": "@@ -39,19 +39,18 @@ import org.hisp.dhis.programrule.engine.StageCompletionEvaluationEvent;\n import org.hisp.dhis.programrule.engine.StageScheduledEvaluationEvent;\n import org.springframework.context.ApplicationEventPublisher;\n \n-/**\n- * @author maikel arabori\n- */\n-public class ProgramNotificationPostProcessor implements Processor\n+public class ProgramNotificationPostProcessor\n+    implements\n+    Processor\n {\n+\n     @Override\n     public void process( final Event event, final WorkContext ctx )\n     {\n         if ( !ctx.getImportOptions().isSkipNotifications() )\n         {\n             final ProgramStageInstance programStageInstance = ctx.getProgramStageInstanceMap().get( event.getEvent() );\n-            final ApplicationEventPublisher applicationEventPublisher = ctx.getServiceDelegator()\n-                .getApplicationEventPublisher();\n+            final ApplicationEventPublisher applicationEventPublisher = ctx.getServiceDelegator().getApplicationEventPublisher();\n \n             if ( programStageInstance.isCompleted() )\n             {\n", "next_change": {"commit": "c9cbe9cf8b22a49324c53b68eba31b9c63684df4", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/postprocess/ProgramNotificationPostProcessor.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/postprocess/ProgramNotificationPostProcessor.java\nindex 22a823523a..062da91c01 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/postprocess/ProgramNotificationPostProcessor.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/postprocess/ProgramNotificationPostProcessor.java\n", "chunk": "@@ -39,18 +39,19 @@ import org.hisp.dhis.programrule.engine.StageCompletionEvaluationEvent;\n import org.hisp.dhis.programrule.engine.StageScheduledEvaluationEvent;\n import org.springframework.context.ApplicationEventPublisher;\n \n-public class ProgramNotificationPostProcessor\n-    implements\n-    Processor\n+/**\n+ * @author maikel arabori\n+ */\n+public class ProgramNotificationPostProcessor implements Processor\n {\n-\n     @Override\n     public void process( final Event event, final WorkContext ctx )\n     {\n         if ( !ctx.getImportOptions().isSkipNotifications() )\n         {\n             final ProgramStageInstance programStageInstance = ctx.getProgramStageInstanceMap().get( event.getEvent() );\n-            final ApplicationEventPublisher applicationEventPublisher = ctx.getServiceDelegator().getApplicationEventPublisher();\n+            final ApplicationEventPublisher applicationEventPublisher = ctx.getServiceDelegator()\n+                .getApplicationEventPublisher();\n \n             if ( programStageInstance.isCompleted() )\n             {\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/postprocess/ProgramNotificationPostProcessor.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/postprocess/ProgramNotificationPostProcessor.java\nindex 22a823523a..062da91c01 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/postprocess/ProgramNotificationPostProcessor.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/postprocess/ProgramNotificationPostProcessor.java\n", "chunk": "@@ -39,18 +39,19 @@ import org.hisp.dhis.programrule.engine.StageCompletionEvaluationEvent;\n import org.hisp.dhis.programrule.engine.StageScheduledEvaluationEvent;\n import org.springframework.context.ApplicationEventPublisher;\n \n-public class ProgramNotificationPostProcessor\n-    implements\n-    Processor\n+/**\n+ * @author maikel arabori\n+ */\n+public class ProgramNotificationPostProcessor implements Processor\n {\n-\n     @Override\n     public void process( final Event event, final WorkContext ctx )\n     {\n         if ( !ctx.getImportOptions().isSkipNotifications() )\n         {\n             final ProgramStageInstance programStageInstance = ctx.getProgramStageInstanceMap().get( event.getEvent() );\n-            final ApplicationEventPublisher applicationEventPublisher = ctx.getServiceDelegator().getApplicationEventPublisher();\n+            final ApplicationEventPublisher applicationEventPublisher = ctx.getServiceDelegator()\n+                .getApplicationEventPublisher();\n \n             if ( programStageInstance.isCompleted() )\n             {\n", "next_change": {"commit": "55e411fdd03ee5ae46ed305e85d8feb26d53a201", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/postprocess/ProgramNotificationPostProcessor.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/postprocess/ProgramNotificationPostProcessor.java\nsimilarity index 82%\nrename from dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/postprocess/ProgramNotificationPostProcessor.java\nrename to dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/postprocess/ProgramNotificationPostProcessor.java\nindex 062da91c01..98caa98340 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/postprocess/ProgramNotificationPostProcessor.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/postprocess/ProgramNotificationPostProcessor.java\n", "chunk": "@@ -49,7 +52,10 @@ public class ProgramNotificationPostProcessor implements Processor\n     {\n         if ( !ctx.getImportOptions().isSkipNotifications() )\n         {\n-            final ProgramStageInstance programStageInstance = ctx.getProgramStageInstanceMap().get( event.getEvent() );\n+            // When this processor is invoked from insert event, then programStageInstance\n+            // might be null and need to be built from Event.\n+            final ProgramStageInstance programStageInstance = getProgramStageInstance( ctx, event );\n+\n             final ApplicationEventPublisher applicationEventPublisher = ctx.getServiceDelegator()\n                 .getApplicationEventPublisher();\n \n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "message": "Merge commit", "committedDate": null}, {"oid": "55e411fdd03ee5ae46ed305e85d8feb26d53a201", "committedDate": "2020-09-15 16:52:41 +0200", "message": "fix: DryRun flag and ProgramNotificationPostProcessor (DHIS2-9484) (#6144)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzNjI4MQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448036281", "body": "Why not if ( ctx.getImportOptions().isSkipNotifications() ) { return }, less indentation \r\n", "bodyText": "Why not if ( ctx.getImportOptions().isSkipNotifications() ) { return }, less indentation", "bodyHTML": "<p dir=\"auto\">Why not if ( ctx.getImportOptions().isSkipNotifications() ) { return }, less indentation</p>", "author": "mortenoh", "createdAt": "2020-06-30T23:35:28Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/postprocess/ProgramNotificationPostProcessor.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer.update.postprocess;\n+\n+import static org.hisp.dhis.event.EventStatus.SCHEDULE;\n+\n+import org.hisp.dhis.dxf2.events.event.Event;\n+import org.hisp.dhis.dxf2.events.importer.Processor;\n+import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n+import org.hisp.dhis.program.ProgramStageInstance;\n+import org.hisp.dhis.program.notification.event.ProgramStageCompletionNotificationEvent;\n+import org.hisp.dhis.programrule.engine.StageCompletionEvaluationEvent;\n+import org.hisp.dhis.programrule.engine.StageScheduledEvaluationEvent;\n+import org.springframework.context.ApplicationEventPublisher;\n+\n+public class ProgramNotificationPostProcessor\n+    implements\n+    Processor\n+{\n+\n+    @Override\n+    public void process( final Event event, final WorkContext ctx )\n+    {\n+        if ( !ctx.getImportOptions().isSkipNotifications() )", "originalCommit": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7032498b0cbac9437a93d7deeb72862937c55a98", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/postprocess/ProgramNotificationPostProcessor.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/postprocess/ProgramNotificationPostProcessor.java\nindex 22a823523a..062da91c01 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/postprocess/ProgramNotificationPostProcessor.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/postprocess/ProgramNotificationPostProcessor.java\n", "chunk": "@@ -39,18 +39,19 @@ import org.hisp.dhis.programrule.engine.StageCompletionEvaluationEvent;\n import org.hisp.dhis.programrule.engine.StageScheduledEvaluationEvent;\n import org.springframework.context.ApplicationEventPublisher;\n \n-public class ProgramNotificationPostProcessor\n-    implements\n-    Processor\n+/**\n+ * @author maikel arabori\n+ */\n+public class ProgramNotificationPostProcessor implements Processor\n {\n-\n     @Override\n     public void process( final Event event, final WorkContext ctx )\n     {\n         if ( !ctx.getImportOptions().isSkipNotifications() )\n         {\n             final ProgramStageInstance programStageInstance = ctx.getProgramStageInstanceMap().get( event.getEvent() );\n-            final ApplicationEventPublisher applicationEventPublisher = ctx.getServiceDelegator().getApplicationEventPublisher();\n+            final ApplicationEventPublisher applicationEventPublisher = ctx.getServiceDelegator()\n+                .getApplicationEventPublisher();\n \n             if ( programStageInstance.isCompleted() )\n             {\n", "next_change": {"commit": "d360652a896bee650a842567e26cd1e62145cccb", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/postprocess/ProgramNotificationPostProcessor.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/postprocess/ProgramNotificationPostProcessor.java\nindex 062da91c01..22a823523a 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/postprocess/ProgramNotificationPostProcessor.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/postprocess/ProgramNotificationPostProcessor.java\n", "chunk": "@@ -39,19 +39,18 @@ import org.hisp.dhis.programrule.engine.StageCompletionEvaluationEvent;\n import org.hisp.dhis.programrule.engine.StageScheduledEvaluationEvent;\n import org.springframework.context.ApplicationEventPublisher;\n \n-/**\n- * @author maikel arabori\n- */\n-public class ProgramNotificationPostProcessor implements Processor\n+public class ProgramNotificationPostProcessor\n+    implements\n+    Processor\n {\n+\n     @Override\n     public void process( final Event event, final WorkContext ctx )\n     {\n         if ( !ctx.getImportOptions().isSkipNotifications() )\n         {\n             final ProgramStageInstance programStageInstance = ctx.getProgramStageInstanceMap().get( event.getEvent() );\n-            final ApplicationEventPublisher applicationEventPublisher = ctx.getServiceDelegator()\n-                .getApplicationEventPublisher();\n+            final ApplicationEventPublisher applicationEventPublisher = ctx.getServiceDelegator().getApplicationEventPublisher();\n \n             if ( programStageInstance.isCompleted() )\n             {\n", "next_change": {"commit": "c9cbe9cf8b22a49324c53b68eba31b9c63684df4", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/postprocess/ProgramNotificationPostProcessor.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/postprocess/ProgramNotificationPostProcessor.java\nindex 22a823523a..062da91c01 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/postprocess/ProgramNotificationPostProcessor.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/postprocess/ProgramNotificationPostProcessor.java\n", "chunk": "@@ -39,18 +39,19 @@ import org.hisp.dhis.programrule.engine.StageCompletionEvaluationEvent;\n import org.hisp.dhis.programrule.engine.StageScheduledEvaluationEvent;\n import org.springframework.context.ApplicationEventPublisher;\n \n-public class ProgramNotificationPostProcessor\n-    implements\n-    Processor\n+/**\n+ * @author maikel arabori\n+ */\n+public class ProgramNotificationPostProcessor implements Processor\n {\n-\n     @Override\n     public void process( final Event event, final WorkContext ctx )\n     {\n         if ( !ctx.getImportOptions().isSkipNotifications() )\n         {\n             final ProgramStageInstance programStageInstance = ctx.getProgramStageInstanceMap().get( event.getEvent() );\n-            final ApplicationEventPublisher applicationEventPublisher = ctx.getServiceDelegator().getApplicationEventPublisher();\n+            final ApplicationEventPublisher applicationEventPublisher = ctx.getServiceDelegator()\n+                .getApplicationEventPublisher();\n \n             if ( programStageInstance.isCompleted() )\n             {\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/postprocess/ProgramNotificationPostProcessor.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/postprocess/ProgramNotificationPostProcessor.java\nindex 22a823523a..062da91c01 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/postprocess/ProgramNotificationPostProcessor.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/postprocess/ProgramNotificationPostProcessor.java\n", "chunk": "@@ -39,18 +39,19 @@ import org.hisp.dhis.programrule.engine.StageCompletionEvaluationEvent;\n import org.hisp.dhis.programrule.engine.StageScheduledEvaluationEvent;\n import org.springframework.context.ApplicationEventPublisher;\n \n-public class ProgramNotificationPostProcessor\n-    implements\n-    Processor\n+/**\n+ * @author maikel arabori\n+ */\n+public class ProgramNotificationPostProcessor implements Processor\n {\n-\n     @Override\n     public void process( final Event event, final WorkContext ctx )\n     {\n         if ( !ctx.getImportOptions().isSkipNotifications() )\n         {\n             final ProgramStageInstance programStageInstance = ctx.getProgramStageInstanceMap().get( event.getEvent() );\n-            final ApplicationEventPublisher applicationEventPublisher = ctx.getServiceDelegator().getApplicationEventPublisher();\n+            final ApplicationEventPublisher applicationEventPublisher = ctx.getServiceDelegator()\n+                .getApplicationEventPublisher();\n \n             if ( programStageInstance.isCompleted() )\n             {\n", "next_change": {"commit": "55e411fdd03ee5ae46ed305e85d8feb26d53a201", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/postprocess/ProgramNotificationPostProcessor.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/postprocess/ProgramNotificationPostProcessor.java\nsimilarity index 82%\nrename from dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/postprocess/ProgramNotificationPostProcessor.java\nrename to dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/postprocess/ProgramNotificationPostProcessor.java\nindex 062da91c01..98caa98340 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/postprocess/ProgramNotificationPostProcessor.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/postprocess/ProgramNotificationPostProcessor.java\n", "chunk": "@@ -49,7 +52,10 @@ public class ProgramNotificationPostProcessor implements Processor\n     {\n         if ( !ctx.getImportOptions().isSkipNotifications() )\n         {\n-            final ProgramStageInstance programStageInstance = ctx.getProgramStageInstanceMap().get( event.getEvent() );\n+            // When this processor is invoked from insert event, then programStageInstance\n+            // might be null and need to be built from Event.\n+            final ProgramStageInstance programStageInstance = getProgramStageInstance( ctx, event );\n+\n             final ApplicationEventPublisher applicationEventPublisher = ctx.getServiceDelegator()\n                 .getApplicationEventPublisher();\n \n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "message": "Merge commit", "committedDate": null}, {"oid": "55e411fdd03ee5ae46ed305e85d8feb26d53a201", "committedDate": "2020-09-15 16:52:41 +0200", "message": "fix: DryRun flag and ProgramNotificationPostProcessor (DHIS2-9484) (#6144)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzNjY4Ng==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448036686", "body": "package before license", "bodyText": "package before license", "bodyHTML": "<p dir=\"auto\">package before license</p>", "author": "mortenoh", "createdAt": "2020-06-30T23:36:53Z", "path": "dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/utils/JsonObjectBuilder.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*", "originalCommit": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODgwOTIwNg==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448809206", "bodyText": "Fixed", "author": "luciano-fiandesio", "createdAt": "2020-07-02T07:42:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzNjY4Ng=="}], "type": "inlineReview", "revised_code": {"commit": "7032498b0cbac9437a93d7deeb72862937c55a98", "changed_code": [{"header": "diff --git a/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/utils/JsonObjectBuilder.java b/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/utils/JsonObjectBuilder.java\nindex aac532997e..d7ecd190d9 100644\n--- a/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/utils/JsonObjectBuilder.java\n+++ b/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/utils/JsonObjectBuilder.java\n", "chunk": "@@ -1,3 +1,5 @@\n+package org.hisp.dhis.utils;\n+\n /*\n  * Copyright (c) 2004-2020, University of Oslo\n  * All rights reserved.\n", "next_change": {"commit": "d360652a896bee650a842567e26cd1e62145cccb", "changed_code": [{"header": "diff --git a/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/utils/JsonObjectBuilder.java b/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/utils/JsonObjectBuilder.java\nindex d7ecd190d9..aac532997e 100644\n--- a/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/utils/JsonObjectBuilder.java\n+++ b/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/utils/JsonObjectBuilder.java\n", "chunk": "@@ -1,5 +1,3 @@\n-package org.hisp.dhis.utils;\n-\n /*\n  * Copyright (c) 2004-2020, University of Oslo\n  * All rights reserved.\n", "next_change": {"commit": "2f23e3b49f087c42aaec77bfd3279ff45f813977", "changed_code": [{"header": "diff --git a/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/utils/JsonObjectBuilder.java b/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/utils/JsonObjectBuilder.java\nindex aac532997e..d7ecd190d9 100644\n--- a/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/utils/JsonObjectBuilder.java\n+++ b/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/utils/JsonObjectBuilder.java\n", "chunk": "@@ -1,3 +1,5 @@\n+package org.hisp.dhis.utils;\n+\n /*\n  * Copyright (c) 2004-2020, University of Oslo\n  * All rights reserved.\n", "next_change": {"commit": "17e4effbd84888b9241be64afaf8bf2300188dab", "changed_code": [{"header": "diff --git a/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/utils/JsonObjectBuilder.java b/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/utils/JsonObjectBuilder.java\nindex d7ecd190d9..aac532997e 100644\n--- a/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/utils/JsonObjectBuilder.java\n+++ b/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/utils/JsonObjectBuilder.java\n", "chunk": "@@ -1,5 +1,3 @@\n-package org.hisp.dhis.utils;\n-\n /*\n  * Copyright (c) 2004-2020, University of Oslo\n  * All rights reserved.\n", "next_change": {"commit": "53fe69844f9b0fa1dc808e576d47cde1750a2323", "changed_code": [{"header": "diff --git a/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/utils/JsonObjectBuilder.java b/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/utils/JsonObjectBuilder.java\nindex aac532997e..d7ecd190d9 100644\n--- a/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/utils/JsonObjectBuilder.java\n+++ b/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/utils/JsonObjectBuilder.java\n", "chunk": "@@ -1,3 +1,5 @@\n+package org.hisp.dhis.utils;\n+\n /*\n  * Copyright (c) 2004-2020, University of Oslo\n  * All rights reserved.\n", "next_change": null}]}}]}}]}}]}}]}, "revised_code_in_main": {"commit": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "changed_code": [{"header": "diff --git a/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/utils/JsonObjectBuilder.java b/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/utils/JsonObjectBuilder.java\nindex aac532997e..d7ecd190d9 100644\n--- a/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/utils/JsonObjectBuilder.java\n+++ b/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/utils/JsonObjectBuilder.java\n", "chunk": "@@ -1,3 +1,5 @@\n+package org.hisp.dhis.utils;\n+\n /*\n  * Copyright (c) 2004-2020, University of Oslo\n  * All rights reserved.\n", "next_change": {"commit": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "changed_code": [{"header": "diff --git a/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/utils/JsonObjectBuilder.java b/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/utils/JsonObjectBuilder.java\nindex d7ecd190d9..4355c45403 100644\n--- a/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/utils/JsonObjectBuilder.java\n+++ b/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/utils/JsonObjectBuilder.java\n", "chunk": "@@ -1,7 +1,7 @@\n package org.hisp.dhis.utils;\n \n /*\n- * Copyright (c) 2004-2020, University of Oslo\n+ * Copyright (c) 2004-2021, University of Oslo\n  * All rights reserved.\n  *\n  * Redistribution and use in source and binary forms, with or without\n", "next_change": {"commit": "e38f4bf11077070877d0beb033fb969326e35881", "changed_code": [{"header": "diff --git a/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/utils/JsonObjectBuilder.java b/dhis-2/dhis-e2e-test/src/test/java/org/hisp/dhis/tracker/importer/TrackerImporterTests.java\nsimilarity index 55%\nrename from dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/utils/JsonObjectBuilder.java\nrename to dhis-2/dhis-e2e-test/src/test/java/org/hisp/dhis/tracker/importer/TrackerImporterTests.java\nindex 4355c45403..e7458bdf20 100644\n--- a/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/utils/JsonObjectBuilder.java\n+++ b/dhis-2/dhis-e2e-test/src/test/java/org/hisp/dhis/tracker/importer/TrackerImporterTests.java\n", "chunk": "@@ -1,5 +1,3 @@\n-package org.hisp.dhis.utils;\n-\n /*\n  * Copyright (c) 2004-2021, University of Oslo\n  * All rights reserved.\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "message": "Merge commit", "committedDate": null}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "e38f4bf11077070877d0beb033fb969326e35881", "committedDate": "2021-01-22 10:51:19 +0100", "message": "test: new tracker importer tests  (#7158)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzNjc0MA==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448036740", "body": "newline", "bodyText": "newline", "bodyHTML": "<p dir=\"auto\">newline</p>", "author": "mortenoh", "createdAt": "2020-06-30T23:37:04Z", "path": "dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/utils/JsonObjectBuilder.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.utils;\n+\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonObject;\n+import org.hisp.dhis.Constants;\n+\n+/**\n+ * @author Gintare Vilkelyte <vilkelyte.gintare@gmail.com>\n+ */\n+public class JsonObjectBuilder\n+{\n+    private JsonObject jsonObject;", "originalCommit": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7032498b0cbac9437a93d7deeb72862937c55a98", "changed_code": [{"header": "diff --git a/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/utils/JsonObjectBuilder.java b/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/utils/JsonObjectBuilder.java\nindex aac532997e..d7ecd190d9 100644\n--- a/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/utils/JsonObjectBuilder.java\n+++ b/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/utils/JsonObjectBuilder.java\n", "chunk": "@@ -38,6 +38,7 @@ import org.hisp.dhis.Constants;\n public class JsonObjectBuilder\n {\n     private JsonObject jsonObject;\n+\n     public JsonObjectBuilder() {\n         jsonObject = new JsonObject();\n     }\n", "next_change": {"commit": "d360652a896bee650a842567e26cd1e62145cccb", "changed_code": [{"header": "diff --git a/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/utils/JsonObjectBuilder.java b/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/utils/JsonObjectBuilder.java\nindex d7ecd190d9..aac532997e 100644\n--- a/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/utils/JsonObjectBuilder.java\n+++ b/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/utils/JsonObjectBuilder.java\n", "chunk": "@@ -38,7 +38,6 @@ import org.hisp.dhis.Constants;\n public class JsonObjectBuilder\n {\n     private JsonObject jsonObject;\n-\n     public JsonObjectBuilder() {\n         jsonObject = new JsonObject();\n     }\n", "next_change": {"commit": "2f23e3b49f087c42aaec77bfd3279ff45f813977", "changed_code": [{"header": "diff --git a/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/utils/JsonObjectBuilder.java b/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/utils/JsonObjectBuilder.java\nindex aac532997e..d7ecd190d9 100644\n--- a/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/utils/JsonObjectBuilder.java\n+++ b/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/utils/JsonObjectBuilder.java\n", "chunk": "@@ -38,6 +38,7 @@ import org.hisp.dhis.Constants;\n public class JsonObjectBuilder\n {\n     private JsonObject jsonObject;\n+\n     public JsonObjectBuilder() {\n         jsonObject = new JsonObject();\n     }\n", "next_change": {"commit": "17e4effbd84888b9241be64afaf8bf2300188dab", "changed_code": [{"header": "diff --git a/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/utils/JsonObjectBuilder.java b/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/utils/JsonObjectBuilder.java\nindex d7ecd190d9..aac532997e 100644\n--- a/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/utils/JsonObjectBuilder.java\n+++ b/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/utils/JsonObjectBuilder.java\n", "chunk": "@@ -38,7 +38,6 @@ import org.hisp.dhis.Constants;\n public class JsonObjectBuilder\n {\n     private JsonObject jsonObject;\n-\n     public JsonObjectBuilder() {\n         jsonObject = new JsonObject();\n     }\n", "next_change": {"commit": "53fe69844f9b0fa1dc808e576d47cde1750a2323", "changed_code": [{"header": "diff --git a/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/utils/JsonObjectBuilder.java b/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/utils/JsonObjectBuilder.java\nindex aac532997e..d7ecd190d9 100644\n--- a/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/utils/JsonObjectBuilder.java\n+++ b/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/utils/JsonObjectBuilder.java\n", "chunk": "@@ -38,6 +38,7 @@ import org.hisp.dhis.Constants;\n public class JsonObjectBuilder\n {\n     private JsonObject jsonObject;\n+\n     public JsonObjectBuilder() {\n         jsonObject = new JsonObject();\n     }\n", "next_change": null}]}}]}}]}}]}}]}, "revised_code_in_main": {"commit": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "changed_code": [{"header": "diff --git a/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/utils/JsonObjectBuilder.java b/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/utils/JsonObjectBuilder.java\nindex aac532997e..d7ecd190d9 100644\n--- a/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/utils/JsonObjectBuilder.java\n+++ b/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/utils/JsonObjectBuilder.java\n", "chunk": "@@ -38,6 +38,7 @@ import org.hisp.dhis.Constants;\n public class JsonObjectBuilder\n {\n     private JsonObject jsonObject;\n+\n     public JsonObjectBuilder() {\n         jsonObject = new JsonObject();\n     }\n", "next_change": {"commit": "e38f4bf11077070877d0beb033fb969326e35881", "changed_code": [{"header": "diff --git a/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/utils/JsonObjectBuilder.java b/dhis-2/dhis-e2e-test/src/test/java/org/hisp/dhis/tracker/importer/TrackerImporterTests.java\nsimilarity index 53%\nrename from dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/utils/JsonObjectBuilder.java\nrename to dhis-2/dhis-e2e-test/src/test/java/org/hisp/dhis/tracker/importer/TrackerImporterTests.java\nindex d7ecd190d9..e7458bdf20 100644\n--- a/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/utils/JsonObjectBuilder.java\n+++ b/dhis-2/dhis-e2e-test/src/test/java/org/hisp/dhis/tracker/importer/TrackerImporterTests.java\n", "chunk": "@@ -28,56 +26,51 @@ package org.hisp.dhis.utils;\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n \n-import com.google.gson.JsonArray;\n-import com.google.gson.JsonObject;\n-import org.hisp.dhis.Constants;\n+package org.hisp.dhis.tracker.importer;\n+\n+import org.hisp.dhis.ApiTest;\n+import org.hisp.dhis.actions.LoginActions;\n+import org.hisp.dhis.actions.tracker.importer.TrackerActions;\n+import org.hisp.dhis.dto.ApiResponse;\n+import org.hisp.dhis.helpers.QueryParamsBuilder;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+\n+import java.io.File;\n+\n+import static org.hamcrest.Matchers.*;\n \n /**\n  * @author Gintare Vilkelyte <vilkelyte.gintare@gmail.com>\n  */\n-public class JsonObjectBuilder\n+public class TrackerImporterTests\n+    extends ApiTest\n {\n-    private JsonObject jsonObject;\n+    private TrackerActions trackerActions;\n \n-    public JsonObjectBuilder() {\n-        jsonObject = new JsonObject();\n-    }\n-\n-    public JsonObjectBuilder( JsonObject jsonObject ) {\n-        this.jsonObject = jsonObject;\n-    }\n+    @BeforeAll\n+    public void beforeAll()\n+    {\n+        trackerActions = new TrackerActions();\n \n-    public static JsonObjectBuilder jsonObject() {\n-        return new JsonObjectBuilder();\n+        new LoginActions().loginAsSuperUser();\n     }\n \n-    public static JsonObjectBuilder jsonObject( JsonObject jsonObject) {\n-        return new JsonObjectBuilder( jsonObject );\n-    }\n+    @Test\n+    public void shouldNotCommitWhenStrategyIsValidate()\n+    {\n+        ApiResponse response = trackerActions.postAndGetJobReport( new File( \"src/test/resources/tracker/importer/teis/tei.json\" ),\n+            new QueryParamsBuilder().add( \"importMode=VALIDATE\" ) );\n \n-    public JsonObjectBuilder addProperty(String property, String value) {\n-        jsonObject.addProperty( property, value );\n+        response.validate()\n+            .statusCode( 200 )\n+            .body( \"status\", equalTo( \"OK\" ) )\n+            .body( \"stats.created\", equalTo( 0 ) )\n+            .body( \"stats.total\", equalTo( 0 ) )\n+            .body( \"validationReport\", notNullValue() )\n+            .body( \"validationReport.errorReports\", empty() )\n+            .body( \"validationReport.warningReports\", empty() );\n \n-        return this;\n     }\n \n-    public JsonObjectBuilder addUserGroupAccess( ) {\n-        JsonArray userGroupAccesses = new JsonArray(  );\n-\n-        JsonObject userGroupAccess = JsonObjectBuilder.jsonObject()\n-            .addProperty( \"access\", \"rwrw----\" )\n-            .addProperty( \"userGroupId\", Constants.USER_GROUP_ID )\n-            .addProperty( \"id\", Constants.USER_GROUP_ID )\n-            .build();\n-\n-        userGroupAccesses.add( userGroupAccess );\n-\n-\n-        jsonObject.add( \"userGroupAccesses\", userGroupAccesses );\n-\n-        return this;\n-    }\n-    public JsonObject build() {\n-        return this.jsonObject;\n-    }\n }\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "message": "Merge commit", "committedDate": null}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "e38f4bf11077070877d0beb033fb969326e35881", "committedDate": "2021-01-22 10:51:19 +0100", "message": "test: new tracker importer tests  (#7158)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzNjgzNQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448036835", "body": "do we need to use gson here? we already depend on jackson...", "bodyText": "do we need to use gson here? we already depend on jackson...", "bodyHTML": "<p dir=\"auto\">do we need to use gson here? we already depend on jackson...</p>", "author": "mortenoh", "createdAt": "2020-06-30T23:37:23Z", "path": "dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/utils/JsonObjectBuilder.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.utils;\n+\n+import com.google.gson.JsonArray;", "originalCommit": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODgxMDA4OQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448810089", "bodyText": "This is the API end to end project, not dhis2 \"proper\".", "author": "luciano-fiandesio", "createdAt": "2020-07-02T07:44:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzNjgzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "7032498b0cbac9437a93d7deeb72862937c55a98", "changed_code": [{"header": "diff --git a/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/utils/JsonObjectBuilder.java b/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/utils/JsonObjectBuilder.java\nindex aac532997e..d7ecd190d9 100644\n--- a/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/utils/JsonObjectBuilder.java\n+++ b/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/utils/JsonObjectBuilder.java\n", "chunk": "@@ -26,8 +28,6 @@\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n \n-package org.hisp.dhis.utils;\n-\n import com.google.gson.JsonArray;\n import com.google.gson.JsonObject;\n import org.hisp.dhis.Constants;\n", "next_change": {"commit": "d360652a896bee650a842567e26cd1e62145cccb", "changed_code": [{"header": "diff --git a/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/utils/JsonObjectBuilder.java b/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/utils/JsonObjectBuilder.java\nindex d7ecd190d9..aac532997e 100644\n--- a/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/utils/JsonObjectBuilder.java\n+++ b/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/utils/JsonObjectBuilder.java\n", "chunk": "@@ -28,6 +26,8 @@ package org.hisp.dhis.utils;\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n \n+package org.hisp.dhis.utils;\n+\n import com.google.gson.JsonArray;\n import com.google.gson.JsonObject;\n import org.hisp.dhis.Constants;\n", "next_change": {"commit": "2f23e3b49f087c42aaec77bfd3279ff45f813977", "changed_code": [{"header": "diff --git a/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/utils/JsonObjectBuilder.java b/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/utils/JsonObjectBuilder.java\nindex aac532997e..d7ecd190d9 100644\n--- a/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/utils/JsonObjectBuilder.java\n+++ b/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/utils/JsonObjectBuilder.java\n", "chunk": "@@ -26,8 +28,6 @@\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n \n-package org.hisp.dhis.utils;\n-\n import com.google.gson.JsonArray;\n import com.google.gson.JsonObject;\n import org.hisp.dhis.Constants;\n", "next_change": {"commit": "17e4effbd84888b9241be64afaf8bf2300188dab", "changed_code": [{"header": "diff --git a/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/utils/JsonObjectBuilder.java b/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/utils/JsonObjectBuilder.java\nindex d7ecd190d9..aac532997e 100644\n--- a/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/utils/JsonObjectBuilder.java\n+++ b/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/utils/JsonObjectBuilder.java\n", "chunk": "@@ -28,6 +26,8 @@ package org.hisp.dhis.utils;\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n \n+package org.hisp.dhis.utils;\n+\n import com.google.gson.JsonArray;\n import com.google.gson.JsonObject;\n import org.hisp.dhis.Constants;\n", "next_change": {"commit": "53fe69844f9b0fa1dc808e576d47cde1750a2323", "changed_code": [{"header": "diff --git a/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/utils/JsonObjectBuilder.java b/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/utils/JsonObjectBuilder.java\nindex aac532997e..d7ecd190d9 100644\n--- a/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/utils/JsonObjectBuilder.java\n+++ b/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/utils/JsonObjectBuilder.java\n", "chunk": "@@ -26,8 +28,6 @@\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n \n-package org.hisp.dhis.utils;\n-\n import com.google.gson.JsonArray;\n import com.google.gson.JsonObject;\n import org.hisp.dhis.Constants;\n", "next_change": null}]}}]}}]}}]}}]}, "revised_code_in_main": {"commit": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "changed_code": [{"header": "diff --git a/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/utils/JsonObjectBuilder.java b/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/utils/JsonObjectBuilder.java\nindex aac532997e..d7ecd190d9 100644\n--- a/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/utils/JsonObjectBuilder.java\n+++ b/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/utils/JsonObjectBuilder.java\n", "chunk": "@@ -26,8 +28,6 @@\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n \n-package org.hisp.dhis.utils;\n-\n import com.google.gson.JsonArray;\n import com.google.gson.JsonObject;\n import org.hisp.dhis.Constants;\n", "next_change": {"commit": "e38f4bf11077070877d0beb033fb969326e35881", "changed_code": [{"header": "diff --git a/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/utils/JsonObjectBuilder.java b/dhis-2/dhis-e2e-test/src/test/java/org/hisp/dhis/tracker/importer/TrackerImporterTests.java\nsimilarity index 53%\nrename from dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/utils/JsonObjectBuilder.java\nrename to dhis-2/dhis-e2e-test/src/test/java/org/hisp/dhis/tracker/importer/TrackerImporterTests.java\nindex d7ecd190d9..e7458bdf20 100644\n--- a/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/utils/JsonObjectBuilder.java\n+++ b/dhis-2/dhis-e2e-test/src/test/java/org/hisp/dhis/tracker/importer/TrackerImporterTests.java\n", "chunk": "@@ -28,56 +26,51 @@ package org.hisp.dhis.utils;\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n \n-import com.google.gson.JsonArray;\n-import com.google.gson.JsonObject;\n-import org.hisp.dhis.Constants;\n+package org.hisp.dhis.tracker.importer;\n+\n+import org.hisp.dhis.ApiTest;\n+import org.hisp.dhis.actions.LoginActions;\n+import org.hisp.dhis.actions.tracker.importer.TrackerActions;\n+import org.hisp.dhis.dto.ApiResponse;\n+import org.hisp.dhis.helpers.QueryParamsBuilder;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+\n+import java.io.File;\n+\n+import static org.hamcrest.Matchers.*;\n \n /**\n  * @author Gintare Vilkelyte <vilkelyte.gintare@gmail.com>\n  */\n-public class JsonObjectBuilder\n+public class TrackerImporterTests\n+    extends ApiTest\n {\n-    private JsonObject jsonObject;\n+    private TrackerActions trackerActions;\n \n-    public JsonObjectBuilder() {\n-        jsonObject = new JsonObject();\n-    }\n-\n-    public JsonObjectBuilder( JsonObject jsonObject ) {\n-        this.jsonObject = jsonObject;\n-    }\n+    @BeforeAll\n+    public void beforeAll()\n+    {\n+        trackerActions = new TrackerActions();\n \n-    public static JsonObjectBuilder jsonObject() {\n-        return new JsonObjectBuilder();\n+        new LoginActions().loginAsSuperUser();\n     }\n \n-    public static JsonObjectBuilder jsonObject( JsonObject jsonObject) {\n-        return new JsonObjectBuilder( jsonObject );\n-    }\n+    @Test\n+    public void shouldNotCommitWhenStrategyIsValidate()\n+    {\n+        ApiResponse response = trackerActions.postAndGetJobReport( new File( \"src/test/resources/tracker/importer/teis/tei.json\" ),\n+            new QueryParamsBuilder().add( \"importMode=VALIDATE\" ) );\n \n-    public JsonObjectBuilder addProperty(String property, String value) {\n-        jsonObject.addProperty( property, value );\n+        response.validate()\n+            .statusCode( 200 )\n+            .body( \"status\", equalTo( \"OK\" ) )\n+            .body( \"stats.created\", equalTo( 0 ) )\n+            .body( \"stats.total\", equalTo( 0 ) )\n+            .body( \"validationReport\", notNullValue() )\n+            .body( \"validationReport.errorReports\", empty() )\n+            .body( \"validationReport.warningReports\", empty() );\n \n-        return this;\n     }\n \n-    public JsonObjectBuilder addUserGroupAccess( ) {\n-        JsonArray userGroupAccesses = new JsonArray(  );\n-\n-        JsonObject userGroupAccess = JsonObjectBuilder.jsonObject()\n-            .addProperty( \"access\", \"rwrw----\" )\n-            .addProperty( \"userGroupId\", Constants.USER_GROUP_ID )\n-            .addProperty( \"id\", Constants.USER_GROUP_ID )\n-            .build();\n-\n-        userGroupAccesses.add( userGroupAccess );\n-\n-\n-        jsonObject.add( \"userGroupAccesses\", userGroupAccesses );\n-\n-        return this;\n-    }\n-    public JsonObject build() {\n-        return this.jsonObject;\n-    }\n }\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "message": "Merge commit", "committedDate": null}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "e38f4bf11077070877d0beb033fb969326e35881", "committedDate": "2021-01-22 10:51:19 +0100", "message": "test: new tracker importer tests  (#7158)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzNjk1OQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448036959", "body": "author header", "bodyText": "author header", "bodyHTML": "<p dir=\"auto\">author header</p>", "author": "mortenoh", "createdAt": "2020-06-30T23:37:46Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/IdSchemeUtils.java", "diffHunk": "@@ -0,0 +1,87 @@\n+package org.hisp.dhis.dxf2.events.importer.context;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+\n+import org.hisp.dhis.common.IdScheme;\n+import org.hisp.dhis.common.IdentifiableProperty;\n+\n+public class IdSchemeUtils", "originalCommit": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM5OTA3NQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448399075", "bodyText": "Fixed", "author": "luciano-fiandesio", "createdAt": "2020-07-01T14:22:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzNjk1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "7032498b0cbac9437a93d7deeb72862937c55a98", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/IdSchemeUtils.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/IdSchemeUtils.java\nindex 9cd37bc948..8563829a33 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/IdSchemeUtils.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/IdSchemeUtils.java\n", "chunk": "@@ -34,12 +34,16 @@ import java.sql.SQLException;\n import org.hisp.dhis.common.IdScheme;\n import org.hisp.dhis.common.IdentifiableProperty;\n \n+/**\n+ * @author Luciano Fiandesio\n+ */\n public class IdSchemeUtils\n {\n     public static String getKey( IdScheme scheme, ResultSet rs )\n         throws SQLException\n     {\n         Object id = rs.getObject( getColumnNameByScheme( scheme ) );\n+\n         if ( id instanceof Long )\n         {\n             return Long.toString( (Long) id );\n", "next_change": {"commit": "d360652a896bee650a842567e26cd1e62145cccb", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/IdSchemeUtils.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/IdSchemeUtils.java\nindex 8563829a33..9cd37bc948 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/IdSchemeUtils.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/IdSchemeUtils.java\n", "chunk": "@@ -34,16 +34,12 @@ import java.sql.SQLException;\n import org.hisp.dhis.common.IdScheme;\n import org.hisp.dhis.common.IdentifiableProperty;\n \n-/**\n- * @author Luciano Fiandesio\n- */\n public class IdSchemeUtils\n {\n     public static String getKey( IdScheme scheme, ResultSet rs )\n         throws SQLException\n     {\n         Object id = rs.getObject( getColumnNameByScheme( scheme ) );\n-\n         if ( id instanceof Long )\n         {\n             return Long.toString( (Long) id );\n", "next_change": {"commit": "c9cbe9cf8b22a49324c53b68eba31b9c63684df4", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/IdSchemeUtils.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/IdSchemeUtils.java\nindex 9cd37bc948..8563829a33 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/IdSchemeUtils.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/IdSchemeUtils.java\n", "chunk": "@@ -34,12 +34,16 @@ import java.sql.SQLException;\n import org.hisp.dhis.common.IdScheme;\n import org.hisp.dhis.common.IdentifiableProperty;\n \n+/**\n+ * @author Luciano Fiandesio\n+ */\n public class IdSchemeUtils\n {\n     public static String getKey( IdScheme scheme, ResultSet rs )\n         throws SQLException\n     {\n         Object id = rs.getObject( getColumnNameByScheme( scheme ) );\n+\n         if ( id instanceof Long )\n         {\n             return Long.toString( (Long) id );\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/IdSchemeUtils.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/IdSchemeUtils.java\nindex 9cd37bc948..8563829a33 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/IdSchemeUtils.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/IdSchemeUtils.java\n", "chunk": "@@ -34,12 +34,16 @@ import java.sql.SQLException;\n import org.hisp.dhis.common.IdScheme;\n import org.hisp.dhis.common.IdentifiableProperty;\n \n+/**\n+ * @author Luciano Fiandesio\n+ */\n public class IdSchemeUtils\n {\n     public static String getKey( IdScheme scheme, ResultSet rs )\n         throws SQLException\n     {\n         Object id = rs.getObject( getColumnNameByScheme( scheme ) );\n+\n         if ( id instanceof Long )\n         {\n             return Long.toString( (Long) id );\n", "next_change": null}]}, "commits_in_main": [{"oid": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "message": "Merge commit", "committedDate": null}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "02336c9611c0dd85d5038223bddbfdebc0aae526", "committedDate": "2023-05-11 19:34:26 +0200", "message": "chore: move old tracker dxf2 code into deprecated package (#13901)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzNjk5NQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448036995", "body": "newline", "bodyText": "newline", "bodyHTML": "<p dir=\"auto\">newline</p>", "author": "mortenoh", "createdAt": "2020-06-30T23:37:54Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/IdSchemeUtils.java", "diffHunk": "@@ -0,0 +1,87 @@\n+package org.hisp.dhis.dxf2.events.importer.context;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+\n+import org.hisp.dhis.common.IdScheme;\n+import org.hisp.dhis.common.IdentifiableProperty;\n+\n+public class IdSchemeUtils\n+{\n+    public static String getKey( IdScheme scheme, ResultSet rs )\n+        throws SQLException\n+    {\n+        Object id = rs.getObject( getColumnNameByScheme( scheme ) );", "originalCommit": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM5OTQ5OQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448399499", "bodyText": "Not sure if I need to add or remove a newline :)", "author": "luciano-fiandesio", "createdAt": "2020-07-01T14:23:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzNjk5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "7032498b0cbac9437a93d7deeb72862937c55a98", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/IdSchemeUtils.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/IdSchemeUtils.java\nindex 9cd37bc948..8563829a33 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/IdSchemeUtils.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/IdSchemeUtils.java\n", "chunk": "@@ -34,12 +34,16 @@ import java.sql.SQLException;\n import org.hisp.dhis.common.IdScheme;\n import org.hisp.dhis.common.IdentifiableProperty;\n \n+/**\n+ * @author Luciano Fiandesio\n+ */\n public class IdSchemeUtils\n {\n     public static String getKey( IdScheme scheme, ResultSet rs )\n         throws SQLException\n     {\n         Object id = rs.getObject( getColumnNameByScheme( scheme ) );\n+\n         if ( id instanceof Long )\n         {\n             return Long.toString( (Long) id );\n", "next_change": {"commit": "d360652a896bee650a842567e26cd1e62145cccb", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/IdSchemeUtils.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/IdSchemeUtils.java\nindex 8563829a33..9cd37bc948 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/IdSchemeUtils.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/IdSchemeUtils.java\n", "chunk": "@@ -34,16 +34,12 @@ import java.sql.SQLException;\n import org.hisp.dhis.common.IdScheme;\n import org.hisp.dhis.common.IdentifiableProperty;\n \n-/**\n- * @author Luciano Fiandesio\n- */\n public class IdSchemeUtils\n {\n     public static String getKey( IdScheme scheme, ResultSet rs )\n         throws SQLException\n     {\n         Object id = rs.getObject( getColumnNameByScheme( scheme ) );\n-\n         if ( id instanceof Long )\n         {\n             return Long.toString( (Long) id );\n", "next_change": {"commit": "c9cbe9cf8b22a49324c53b68eba31b9c63684df4", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/IdSchemeUtils.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/IdSchemeUtils.java\nindex 9cd37bc948..8563829a33 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/IdSchemeUtils.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/IdSchemeUtils.java\n", "chunk": "@@ -34,12 +34,16 @@ import java.sql.SQLException;\n import org.hisp.dhis.common.IdScheme;\n import org.hisp.dhis.common.IdentifiableProperty;\n \n+/**\n+ * @author Luciano Fiandesio\n+ */\n public class IdSchemeUtils\n {\n     public static String getKey( IdScheme scheme, ResultSet rs )\n         throws SQLException\n     {\n         Object id = rs.getObject( getColumnNameByScheme( scheme ) );\n+\n         if ( id instanceof Long )\n         {\n             return Long.toString( (Long) id );\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/IdSchemeUtils.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/IdSchemeUtils.java\nindex 9cd37bc948..8563829a33 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/IdSchemeUtils.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/IdSchemeUtils.java\n", "chunk": "@@ -34,12 +34,16 @@ import java.sql.SQLException;\n import org.hisp.dhis.common.IdScheme;\n import org.hisp.dhis.common.IdentifiableProperty;\n \n+/**\n+ * @author Luciano Fiandesio\n+ */\n public class IdSchemeUtils\n {\n     public static String getKey( IdScheme scheme, ResultSet rs )\n         throws SQLException\n     {\n         Object id = rs.getObject( getColumnNameByScheme( scheme ) );\n+\n         if ( id instanceof Long )\n         {\n             return Long.toString( (Long) id );\n", "next_change": null}]}, "commits_in_main": [{"oid": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "message": "Merge commit", "committedDate": null}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "02336c9611c0dd85d5038223bddbfdebc0aae526", "committedDate": "2023-05-11 19:34:26 +0200", "message": "chore: move old tracker dxf2 code into deprecated package (#13901)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzNzIxMg==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448037212", "body": "package before license", "bodyText": "package before license", "bodyHTML": "<p dir=\"auto\">package before license</p>", "author": "mortenoh", "createdAt": "2020-06-30T23:38:37Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/AttributeOptionComboAclCheck.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer.insert.validation;", "originalCommit": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQwMDAzNg==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448400036", "bodyText": "Fixed", "author": "luciano-fiandesio", "createdAt": "2020-07-01T14:24:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzNzIxMg=="}], "type": "inlineReview", "revised_code": {"commit": "7032498b0cbac9437a93d7deeb72862937c55a98", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/AttributeOptionComboAclCheck.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/AttributeOptionComboAclCheck.java\nindex 6437d9be2b..718499dc4d 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/AttributeOptionComboAclCheck.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/AttributeOptionComboAclCheck.java\n", "chunk": "@@ -26,8 +28,6 @@\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n \n-package org.hisp.dhis.dxf2.events.importer.insert.validation;\n-\n import java.util.List;\n import java.util.stream.Collectors;\n \n", "next_change": {"commit": "d0687a6c7c9e1c4dd64c4dc669bb80ae6e8c8c8b", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/AttributeOptionComboAclCheck.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/AttributeOptionComboAclCheck.java\nindex 718499dc4d..bc4f88d708 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/AttributeOptionComboAclCheck.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/AttributeOptionComboAclCheck.java\n", "chunk": "@@ -33,8 +33,8 @@ import java.util.stream.Collectors;\n \n import org.hisp.dhis.category.CategoryOptionCombo;\n import org.hisp.dhis.dxf2.common.ImportOptions;\n-import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n import org.hisp.dhis.dxf2.events.importer.Checker;\n+import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n import org.hisp.dhis.dxf2.events.importer.shared.ImmutableEvent;\n import org.hisp.dhis.dxf2.importsummary.ImportConflict;\n import org.hisp.dhis.dxf2.importsummary.ImportStatus;\n", "next_change": {"commit": "d360652a896bee650a842567e26cd1e62145cccb", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/AttributeOptionComboAclCheck.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/AttributeOptionComboAclCheck.java\nindex bc4f88d708..6437d9be2b 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/AttributeOptionComboAclCheck.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/AttributeOptionComboAclCheck.java\n", "chunk": "@@ -28,13 +26,15 @@ package org.hisp.dhis.dxf2.events.importer.insert.validation;\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n \n+package org.hisp.dhis.dxf2.events.importer.insert.validation;\n+\n import java.util.List;\n import java.util.stream.Collectors;\n \n import org.hisp.dhis.category.CategoryOptionCombo;\n import org.hisp.dhis.dxf2.common.ImportOptions;\n-import org.hisp.dhis.dxf2.events.importer.Checker;\n import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n+import org.hisp.dhis.dxf2.events.importer.Checker;\n import org.hisp.dhis.dxf2.events.importer.shared.ImmutableEvent;\n import org.hisp.dhis.dxf2.importsummary.ImportConflict;\n import org.hisp.dhis.dxf2.importsummary.ImportStatus;\n", "next_change": {"commit": "357070723c603f36a09e54f12ef16a691834627e", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/AttributeOptionComboAclCheck.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/AttributeOptionComboAclCheck.java\nindex 6437d9be2b..bc4f88d708 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/AttributeOptionComboAclCheck.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/AttributeOptionComboAclCheck.java\n", "chunk": "@@ -26,15 +28,13 @@\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n \n-package org.hisp.dhis.dxf2.events.importer.insert.validation;\n-\n import java.util.List;\n import java.util.stream.Collectors;\n \n import org.hisp.dhis.category.CategoryOptionCombo;\n import org.hisp.dhis.dxf2.common.ImportOptions;\n-import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n import org.hisp.dhis.dxf2.events.importer.Checker;\n+import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n import org.hisp.dhis.dxf2.events.importer.shared.ImmutableEvent;\n import org.hisp.dhis.dxf2.importsummary.ImportConflict;\n import org.hisp.dhis.dxf2.importsummary.ImportStatus;\n", "next_change": null}]}}]}}]}}]}, "revised_code_in_main": {"commit": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/AttributeOptionComboAclCheck.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/AttributeOptionComboAclCheck.java\nindex 6437d9be2b..bc4f88d708 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/AttributeOptionComboAclCheck.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/AttributeOptionComboAclCheck.java\n", "chunk": "@@ -26,15 +28,13 @@\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n \n-package org.hisp.dhis.dxf2.events.importer.insert.validation;\n-\n import java.util.List;\n import java.util.stream.Collectors;\n \n import org.hisp.dhis.category.CategoryOptionCombo;\n import org.hisp.dhis.dxf2.common.ImportOptions;\n-import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n import org.hisp.dhis.dxf2.events.importer.Checker;\n+import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n import org.hisp.dhis.dxf2.events.importer.shared.ImmutableEvent;\n import org.hisp.dhis.dxf2.importsummary.ImportConflict;\n import org.hisp.dhis.dxf2.importsummary.ImportStatus;\n", "next_change": {"commit": "6f3422ff9a182b183a9e3a2f61cf457bb23cb092", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/AttributeOptionComboAclCheck.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/AttributeOptionComboAclCheck.java\nindex bc4f88d708..74c2963e3f 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/AttributeOptionComboAclCheck.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/AttributeOptionComboAclCheck.java\n", "chunk": "@@ -27,16 +25,15 @@ package org.hisp.dhis.dxf2.events.importer.insert.validation;\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+package org.hisp.dhis.dxf2.events.importer.insert.validation;\n \n import java.util.List;\n-import java.util.stream.Collectors;\n \n import org.hisp.dhis.category.CategoryOptionCombo;\n import org.hisp.dhis.dxf2.common.ImportOptions;\n import org.hisp.dhis.dxf2.events.importer.Checker;\n import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n import org.hisp.dhis.dxf2.events.importer.shared.ImmutableEvent;\n-import org.hisp.dhis.dxf2.importsummary.ImportConflict;\n import org.hisp.dhis.dxf2.importsummary.ImportStatus;\n import org.hisp.dhis.dxf2.importsummary.ImportSummary;\n import org.hisp.dhis.trackedentity.TrackerAccessManager;\n", "next_change": {"commit": "1e593837ab1c64884a8ac615c7cc8c3471a219ee", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/AttributeOptionComboAclCheck.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/AttributeOptionComboAclCheck.java\nindex 74c2963e3f..63e9fe5940 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/AttributeOptionComboAclCheck.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/AttributeOptionComboAclCheck.java\n", "chunk": "@@ -37,10 +37,12 @@ import org.hisp.dhis.dxf2.events.importer.shared.ImmutableEvent;\n import org.hisp.dhis.dxf2.importsummary.ImportStatus;\n import org.hisp.dhis.dxf2.importsummary.ImportSummary;\n import org.hisp.dhis.trackedentity.TrackerAccessManager;\n+import org.springframework.stereotype.Component;\n \n /**\n  * @author Luciano Fiandesio\n  */\n+@Component\n public class AttributeOptionComboAclCheck\n     implements\n     Checker\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "message": "Merge commit", "committedDate": null}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "6f3422ff9a182b183a9e3a2f61cf457bb23cb092", "committedDate": "2021-06-10 13:13:51 +0200", "message": "chore: encapsulates import conflicts [DHIS2-4414]  (#8164)"}, {"oid": "1e593837ab1c64884a8ac615c7cc8c3471a219ee", "committedDate": "2021-11-18 09:33:25 +0100", "message": "refactor: validators, checkers and processors in old importer are now spring beans [TECH-797] (#9218)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "02336c9611c0dd85d5038223bddbfdebc0aae526", "committedDate": "2023-05-11 19:34:26 +0200", "message": "chore: move old tracker dxf2 code into deprecated package (#13901)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzNzI2Nw==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448037267", "body": "newline", "bodyText": "newline", "bodyHTML": "<p dir=\"auto\">newline</p>", "author": "mortenoh", "createdAt": "2020-06-30T23:38:50Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/AttributeOptionComboAclCheck.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer.insert.validation;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.hisp.dhis.category.CategoryOptionCombo;\n+import org.hisp.dhis.dxf2.common.ImportOptions;\n+import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n+import org.hisp.dhis.dxf2.events.importer.Checker;\n+import org.hisp.dhis.dxf2.events.importer.shared.ImmutableEvent;\n+import org.hisp.dhis.dxf2.importsummary.ImportConflict;\n+import org.hisp.dhis.dxf2.importsummary.ImportStatus;\n+import org.hisp.dhis.dxf2.importsummary.ImportSummary;\n+import org.hisp.dhis.trackedentity.TrackerAccessManager;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+public class AttributeOptionComboAclCheck\n+    implements\n+    Checker\n+{\n+    @Override\n+    public ImportSummary check(ImmutableEvent event, WorkContext ctx )\n+    {\n+        ImportSummary importSummary = new ImportSummary();\n+        TrackerAccessManager trackerAccessManager = ctx.getServiceDelegator().getTrackerAccessManager();\n+        ImportOptions importOptions = ctx.getImportOptions();\n+        CategoryOptionCombo categoryOptionCombo = ctx.getCategoryOptionComboMap().get( event.getUid() );\n+\n+        List<String> errors = trackerAccessManager.canWrite( importOptions.getUser(), categoryOptionCombo );", "originalCommit": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQwMDIwNg==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448400206", "bodyText": "Fixed (I guess)", "author": "luciano-fiandesio", "createdAt": "2020-07-01T14:24:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzNzI2Nw=="}], "type": "inlineReview", "revised_code": {"commit": "7032498b0cbac9437a93d7deeb72862937c55a98", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/AttributeOptionComboAclCheck.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/AttributeOptionComboAclCheck.java\nindex 6437d9be2b..718499dc4d 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/AttributeOptionComboAclCheck.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/AttributeOptionComboAclCheck.java\n", "chunk": "@@ -57,6 +57,7 @@ public class AttributeOptionComboAclCheck\n         CategoryOptionCombo categoryOptionCombo = ctx.getCategoryOptionComboMap().get( event.getUid() );\n \n         List<String> errors = trackerAccessManager.canWrite( importOptions.getUser(), categoryOptionCombo );\n+\n         if ( !errors.isEmpty() )\n         {\n             importSummary.setStatus( ImportStatus.ERROR );\n", "next_change": {"commit": "d360652a896bee650a842567e26cd1e62145cccb", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/AttributeOptionComboAclCheck.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/AttributeOptionComboAclCheck.java\nindex 718499dc4d..6437d9be2b 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/AttributeOptionComboAclCheck.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/AttributeOptionComboAclCheck.java\n", "chunk": "@@ -57,7 +57,6 @@ public class AttributeOptionComboAclCheck\n         CategoryOptionCombo categoryOptionCombo = ctx.getCategoryOptionComboMap().get( event.getUid() );\n \n         List<String> errors = trackerAccessManager.canWrite( importOptions.getUser(), categoryOptionCombo );\n-\n         if ( !errors.isEmpty() )\n         {\n             importSummary.setStatus( ImportStatus.ERROR );\n", "next_change": {"commit": "c9cbe9cf8b22a49324c53b68eba31b9c63684df4", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/AttributeOptionComboAclCheck.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/AttributeOptionComboAclCheck.java\nindex 6437d9be2b..718499dc4d 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/AttributeOptionComboAclCheck.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/AttributeOptionComboAclCheck.java\n", "chunk": "@@ -57,6 +57,7 @@ public class AttributeOptionComboAclCheck\n         CategoryOptionCombo categoryOptionCombo = ctx.getCategoryOptionComboMap().get( event.getUid() );\n \n         List<String> errors = trackerAccessManager.canWrite( importOptions.getUser(), categoryOptionCombo );\n+\n         if ( !errors.isEmpty() )\n         {\n             importSummary.setStatus( ImportStatus.ERROR );\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/AttributeOptionComboAclCheck.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/AttributeOptionComboAclCheck.java\nindex 6437d9be2b..bc4f88d708 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/AttributeOptionComboAclCheck.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/AttributeOptionComboAclCheck.java\n", "chunk": "@@ -57,6 +57,7 @@ public class AttributeOptionComboAclCheck\n         CategoryOptionCombo categoryOptionCombo = ctx.getCategoryOptionComboMap().get( event.getUid() );\n \n         List<String> errors = trackerAccessManager.canWrite( importOptions.getUser(), categoryOptionCombo );\n+\n         if ( !errors.isEmpty() )\n         {\n             importSummary.setStatus( ImportStatus.ERROR );\n", "next_change": {"commit": "6f3422ff9a182b183a9e3a2f61cf457bb23cb092", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/AttributeOptionComboAclCheck.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/AttributeOptionComboAclCheck.java\nindex bc4f88d708..74c2963e3f 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/AttributeOptionComboAclCheck.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/AttributeOptionComboAclCheck.java\n", "chunk": "@@ -61,8 +58,7 @@ public class AttributeOptionComboAclCheck\n         if ( !errors.isEmpty() )\n         {\n             importSummary.setStatus( ImportStatus.ERROR );\n-            importSummary.getConflicts().addAll( errors.stream()\n-                .map( s -> new ImportConflict( \"CategoryOptionCombo\", s ) ).collect( Collectors.toList() ) );\n+            errors.forEach( error -> importSummary.addConflict( \"CategoryOptionCombo\", error ) );\n             importSummary.incrementIgnored();\n         }\n         return importSummary;\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "message": "Merge commit", "committedDate": null}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "6f3422ff9a182b183a9e3a2f61cf457bb23cb092", "committedDate": "2021-06-10 13:13:51 +0200", "message": "chore: encapsulates import conflicts [DHIS2-4414]  (#8164)"}, {"oid": "1e593837ab1c64884a8ac615c7cc8c3471a219ee", "committedDate": "2021-11-18 09:33:25 +0100", "message": "refactor: validators, checkers and processors in old importer are now spring beans [TECH-797] (#9218)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "02336c9611c0dd85d5038223bddbfdebc0aae526", "committedDate": "2023-05-11 19:34:26 +0200", "message": "chore: move old tracker dxf2 code into deprecated package (#13901)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzNzUzMQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448037531", "body": "package before license", "bodyText": "package before license", "bodyHTML": "<p dir=\"auto\">package before license</p>", "author": "mortenoh", "createdAt": "2020-06-30T23:39:37Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/OrgUnitCheck.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer.insert.validation;", "originalCommit": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQwMDQ1OQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448400459", "bodyText": "Fixed", "author": "luciano-fiandesio", "createdAt": "2020-07-01T14:24:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzNzUzMQ=="}], "type": "inlineReview", "revised_code": {"commit": "7032498b0cbac9437a93d7deeb72862937c55a98", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/OrgUnitCheck.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/OrgUnitCheck.java\nindex cc4c41c05c..0a8b65859c 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/OrgUnitCheck.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/OrgUnitCheck.java\n", "chunk": "@@ -26,8 +28,6 @@\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n \n-package org.hisp.dhis.dxf2.events.importer.insert.validation;\n-\n import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n import org.hisp.dhis.dxf2.events.importer.Checker;\n import org.hisp.dhis.dxf2.events.importer.shared.ImmutableEvent;\n", "next_change": {"commit": "d0687a6c7c9e1c4dd64c4dc669bb80ae6e8c8c8b", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/OrgUnitCheck.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/OrgUnitCheck.java\nindex 0a8b65859c..4cb4af9cb6 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/OrgUnitCheck.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/OrgUnitCheck.java\n", "chunk": "@@ -28,8 +28,8 @@ package org.hisp.dhis.dxf2.events.importer.insert.validation;\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n \n-import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n import org.hisp.dhis.dxf2.events.importer.Checker;\n+import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n import org.hisp.dhis.dxf2.events.importer.shared.ImmutableEvent;\n import org.hisp.dhis.dxf2.importsummary.ImportSummary;\n \n", "next_change": {"commit": "d360652a896bee650a842567e26cd1e62145cccb", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/OrgUnitCheck.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/OrgUnitCheck.java\nindex 4cb4af9cb6..cc4c41c05c 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/OrgUnitCheck.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/OrgUnitCheck.java\n", "chunk": "@@ -28,8 +26,10 @@ package org.hisp.dhis.dxf2.events.importer.insert.validation;\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n \n-import org.hisp.dhis.dxf2.events.importer.Checker;\n+package org.hisp.dhis.dxf2.events.importer.insert.validation;\n+\n import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n+import org.hisp.dhis.dxf2.events.importer.Checker;\n import org.hisp.dhis.dxf2.events.importer.shared.ImmutableEvent;\n import org.hisp.dhis.dxf2.importsummary.ImportSummary;\n \n", "next_change": {"commit": "c9cbe9cf8b22a49324c53b68eba31b9c63684df4", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/OrgUnitCheck.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/OrgUnitCheck.java\nindex cc4c41c05c..0a8b65859c 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/OrgUnitCheck.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/OrgUnitCheck.java\n", "chunk": "@@ -26,8 +28,6 @@\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n \n-package org.hisp.dhis.dxf2.events.importer.insert.validation;\n-\n import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n import org.hisp.dhis.dxf2.events.importer.Checker;\n import org.hisp.dhis.dxf2.events.importer.shared.ImmutableEvent;\n", "next_change": {"commit": "357070723c603f36a09e54f12ef16a691834627e", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/OrgUnitCheck.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/OrgUnitCheck.java\nindex 0a8b65859c..4cb4af9cb6 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/OrgUnitCheck.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/OrgUnitCheck.java\n", "chunk": "@@ -28,8 +28,8 @@ package org.hisp.dhis.dxf2.events.importer.insert.validation;\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n \n-import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n import org.hisp.dhis.dxf2.events.importer.Checker;\n+import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n import org.hisp.dhis.dxf2.events.importer.shared.ImmutableEvent;\n import org.hisp.dhis.dxf2.importsummary.ImportSummary;\n \n", "next_change": null}]}}]}}]}}]}}]}, "revised_code_in_main": {"commit": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/OrgUnitCheck.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/OrgUnitCheck.java\nindex cc4c41c05c..4cb4af9cb6 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/OrgUnitCheck.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/OrgUnitCheck.java\n", "chunk": "@@ -26,10 +28,8 @@\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n \n-package org.hisp.dhis.dxf2.events.importer.insert.validation;\n-\n-import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n import org.hisp.dhis.dxf2.events.importer.Checker;\n+import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n import org.hisp.dhis.dxf2.events.importer.shared.ImmutableEvent;\n import org.hisp.dhis.dxf2.importsummary.ImportSummary;\n \n", "next_change": {"commit": "ea76fa86409613c9766d4508d65c88ac55c413c3", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/OrgUnitCheck.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/OrgUnitCheck.java\nindex 4cb4af9cb6..2cd23cbfa0 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/OrgUnitCheck.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/OrgUnitCheck.java\n", "chunk": "@@ -27,6 +25,7 @@ package org.hisp.dhis.dxf2.events.importer.insert.validation;\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+package org.hisp.dhis.dxf2.events.importer.insert.validation;\n \n import org.hisp.dhis.dxf2.events.importer.Checker;\n import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n", "next_change": {"commit": "1e593837ab1c64884a8ac615c7cc8c3471a219ee", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/OrgUnitCheck.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/OrgUnitCheck.java\nindex 2cd23cbfa0..62e4699c12 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/OrgUnitCheck.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/OrgUnitCheck.java\n", "chunk": "@@ -31,10 +31,12 @@ import org.hisp.dhis.dxf2.events.importer.Checker;\n import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n import org.hisp.dhis.dxf2.events.importer.shared.ImmutableEvent;\n import org.hisp.dhis.dxf2.importsummary.ImportSummary;\n+import org.springframework.stereotype.Component;\n \n /**\n  * @author Luciano Fiandesio\n  */\n+@Component\n public class OrgUnitCheck implements Checker\n {\n     @Override\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "message": "Merge commit", "committedDate": null}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "1e593837ab1c64884a8ac615c7cc8c3471a219ee", "committedDate": "2021-11-18 09:33:25 +0100", "message": "refactor: validators, checkers and processors in old importer are now spring beans [TECH-797] (#9218)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "02336c9611c0dd85d5038223bddbfdebc0aae526", "committedDate": "2023-05-11 19:34:26 +0200", "message": "chore: move old tracker dxf2 code into deprecated package (#13901)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzNzY5MQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448037691", "body": "package before license", "bodyText": "package before license", "bodyHTML": "<p dir=\"auto\">package before license</p>", "author": "mortenoh", "createdAt": "2020-06-30T23:40:11Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/EventSimpleCheck.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer.update.validation;", "originalCommit": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQwMDcwOA==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448400708", "bodyText": "Fixed", "author": "luciano-fiandesio", "createdAt": "2020-07-01T14:25:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzNzY5MQ=="}], "type": "inlineReview", "revised_code": {"commit": "7032498b0cbac9437a93d7deeb72862937c55a98", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/EventSimpleCheck.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/EventSimpleCheck.java\nindex 6471ba8e6a..903ae5d45e 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/EventSimpleCheck.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/EventSimpleCheck.java\n", "chunk": "@@ -26,8 +28,6 @@\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n \n-package org.hisp.dhis.dxf2.events.importer.update.validation;\n-\n import static org.apache.commons.lang3.StringUtils.isEmpty;\n import static org.hisp.dhis.dxf2.importsummary.ImportSummary.error;\n import static org.hisp.dhis.dxf2.importsummary.ImportSummary.success;\n", "next_change": {"commit": "d0687a6c7c9e1c4dd64c4dc669bb80ae6e8c8c8b", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/EventSimpleCheck.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/EventSimpleCheck.java\nindex 903ae5d45e..79280ff667 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/EventSimpleCheck.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/EventSimpleCheck.java\n", "chunk": "@@ -32,9 +32,9 @@ import static org.apache.commons.lang3.StringUtils.isEmpty;\n import static org.hisp.dhis.dxf2.importsummary.ImportSummary.error;\n import static org.hisp.dhis.dxf2.importsummary.ImportSummary.success;\n \n-import org.hisp.dhis.dxf2.events.importer.shared.ImmutableEvent;\n import org.hisp.dhis.dxf2.events.importer.Checker;\n import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n+import org.hisp.dhis.dxf2.events.importer.shared.ImmutableEvent;\n import org.hisp.dhis.dxf2.importsummary.ImportSummary;\n \n /**\n", "next_change": {"commit": "d360652a896bee650a842567e26cd1e62145cccb", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/EventSimpleCheck.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/EventSimpleCheck.java\nindex 79280ff667..6471ba8e6a 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/EventSimpleCheck.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/EventSimpleCheck.java\n", "chunk": "@@ -28,19 +26,20 @@ package org.hisp.dhis.dxf2.events.importer.update.validation;\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n \n+package org.hisp.dhis.dxf2.events.importer.update.validation;\n+\n import static org.apache.commons.lang3.StringUtils.isEmpty;\n import static org.hisp.dhis.dxf2.importsummary.ImportSummary.error;\n import static org.hisp.dhis.dxf2.importsummary.ImportSummary.success;\n \n+import org.hisp.dhis.dxf2.events.importer.shared.ImmutableEvent;\n import org.hisp.dhis.dxf2.events.importer.Checker;\n import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n-import org.hisp.dhis.dxf2.events.importer.shared.ImmutableEvent;\n import org.hisp.dhis.dxf2.importsummary.ImportSummary;\n \n-/**\n- * @author maikel arabori\n- */\n-public class EventSimpleCheck implements Checker\n+public class EventSimpleCheck\n+    implements\n+    Checker\n {\n     @Override\n     public ImportSummary check( final ImmutableEvent event, final WorkContext ctx )\n", "next_change": {"commit": "bf042296956c38e5762dc2763da53fe23bc444a3", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/EventSimpleCheck.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/EventSimpleCheck.java\nindex 6471ba8e6a..e58e56774f 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/EventSimpleCheck.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/EventSimpleCheck.java\n", "chunk": "@@ -37,6 +37,9 @@ import org.hisp.dhis.dxf2.events.importer.Checker;\n import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n import org.hisp.dhis.dxf2.importsummary.ImportSummary;\n \n+/**\n+ * @author maikel arabori\n+ */\n public class EventSimpleCheck\n     implements\n     Checker\n", "next_change": {"commit": "c9cbe9cf8b22a49324c53b68eba31b9c63684df4", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/EventSimpleCheck.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/EventSimpleCheck.java\nindex e58e56774f..903ae5d45e 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/EventSimpleCheck.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/EventSimpleCheck.java\n", "chunk": "@@ -40,9 +40,7 @@ import org.hisp.dhis.dxf2.importsummary.ImportSummary;\n /**\n  * @author maikel arabori\n  */\n-public class EventSimpleCheck\n-    implements\n-    Checker\n+public class EventSimpleCheck implements Checker\n {\n     @Override\n     public ImportSummary check( final ImmutableEvent event, final WorkContext ctx )\n", "next_change": null}]}}]}}]}}]}}]}, "revised_code_in_main": {"commit": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/EventSimpleCheck.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/EventSimpleCheck.java\nindex 6471ba8e6a..79280ff667 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/EventSimpleCheck.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/EventSimpleCheck.java\n", "chunk": "@@ -26,20 +28,19 @@\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n \n-package org.hisp.dhis.dxf2.events.importer.update.validation;\n-\n import static org.apache.commons.lang3.StringUtils.isEmpty;\n import static org.hisp.dhis.dxf2.importsummary.ImportSummary.error;\n import static org.hisp.dhis.dxf2.importsummary.ImportSummary.success;\n \n-import org.hisp.dhis.dxf2.events.importer.shared.ImmutableEvent;\n import org.hisp.dhis.dxf2.events.importer.Checker;\n import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n+import org.hisp.dhis.dxf2.events.importer.shared.ImmutableEvent;\n import org.hisp.dhis.dxf2.importsummary.ImportSummary;\n \n-public class EventSimpleCheck\n-    implements\n-    Checker\n+/**\n+ * @author maikel arabori\n+ */\n+public class EventSimpleCheck implements Checker\n {\n     @Override\n     public ImportSummary check( final ImmutableEvent event, final WorkContext ctx )\n", "next_change": {"commit": "1e593837ab1c64884a8ac615c7cc8c3471a219ee", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/EventSimpleCheck.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/EventSimpleCheck.java\nindex 79280ff667..2117f591dd 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/EventSimpleCheck.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/EventSimpleCheck.java\n", "chunk": "@@ -36,10 +35,12 @@ import org.hisp.dhis.dxf2.events.importer.Checker;\n import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n import org.hisp.dhis.dxf2.events.importer.shared.ImmutableEvent;\n import org.hisp.dhis.dxf2.importsummary.ImportSummary;\n+import org.springframework.stereotype.Component;\n \n /**\n  * @author maikel arabori\n  */\n+@Component\n public class EventSimpleCheck implements Checker\n {\n     @Override\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "message": "Merge commit", "committedDate": null}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "1e593837ab1c64884a8ac615c7cc8c3471a219ee", "committedDate": "2021-11-18 09:33:25 +0100", "message": "refactor: validators, checkers and processors in old importer are now spring beans [TECH-797] (#9218)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "02336c9611c0dd85d5038223bddbfdebc0aae526", "committedDate": "2023-05-11 19:34:26 +0200", "message": "chore: move old tracker dxf2 code into deprecated package (#13901)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzNzcyNg==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448037726", "body": "style :|", "bodyText": "style :|", "bodyHTML": "<p dir=\"auto\">style :|</p>", "author": "mortenoh", "createdAt": "2020-06-30T23:40:20Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/EventSimpleCheck.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer.update.validation;\n+\n+import static org.apache.commons.lang3.StringUtils.isEmpty;\n+import static org.hisp.dhis.dxf2.importsummary.ImportSummary.error;\n+import static org.hisp.dhis.dxf2.importsummary.ImportSummary.success;\n+\n+import org.hisp.dhis.dxf2.events.importer.shared.ImmutableEvent;\n+import org.hisp.dhis.dxf2.events.importer.Checker;\n+import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n+import org.hisp.dhis.dxf2.importsummary.ImportSummary;\n+\n+public class EventSimpleCheck\n+    implements", "originalCommit": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQwMDk3Mg==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448400972", "bodyText": "Fixed", "author": "luciano-fiandesio", "createdAt": "2020-07-01T14:25:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzNzcyNg=="}], "type": "inlineReview", "revised_code": {"commit": "7032498b0cbac9437a93d7deeb72862937c55a98", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/EventSimpleCheck.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/EventSimpleCheck.java\nindex 6471ba8e6a..903ae5d45e 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/EventSimpleCheck.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/EventSimpleCheck.java\n", "chunk": "@@ -37,9 +37,10 @@ import org.hisp.dhis.dxf2.events.importer.Checker;\n import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n import org.hisp.dhis.dxf2.importsummary.ImportSummary;\n \n-public class EventSimpleCheck\n-    implements\n-    Checker\n+/**\n+ * @author maikel arabori\n+ */\n+public class EventSimpleCheck implements Checker\n {\n     @Override\n     public ImportSummary check( final ImmutableEvent event, final WorkContext ctx )\n", "next_change": {"commit": "d360652a896bee650a842567e26cd1e62145cccb", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/EventSimpleCheck.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/EventSimpleCheck.java\nindex 903ae5d45e..6471ba8e6a 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/EventSimpleCheck.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/EventSimpleCheck.java\n", "chunk": "@@ -37,10 +37,9 @@ import org.hisp.dhis.dxf2.events.importer.Checker;\n import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n import org.hisp.dhis.dxf2.importsummary.ImportSummary;\n \n-/**\n- * @author maikel arabori\n- */\n-public class EventSimpleCheck implements Checker\n+public class EventSimpleCheck\n+    implements\n+    Checker\n {\n     @Override\n     public ImportSummary check( final ImmutableEvent event, final WorkContext ctx )\n", "next_change": {"commit": "bf042296956c38e5762dc2763da53fe23bc444a3", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/EventSimpleCheck.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/EventSimpleCheck.java\nindex 6471ba8e6a..e58e56774f 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/EventSimpleCheck.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/EventSimpleCheck.java\n", "chunk": "@@ -37,6 +37,9 @@ import org.hisp.dhis.dxf2.events.importer.Checker;\n import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n import org.hisp.dhis.dxf2.importsummary.ImportSummary;\n \n+/**\n+ * @author maikel arabori\n+ */\n public class EventSimpleCheck\n     implements\n     Checker\n", "next_change": {"commit": "c9cbe9cf8b22a49324c53b68eba31b9c63684df4", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/EventSimpleCheck.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/EventSimpleCheck.java\nindex e58e56774f..903ae5d45e 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/EventSimpleCheck.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/EventSimpleCheck.java\n", "chunk": "@@ -40,9 +40,7 @@ import org.hisp.dhis.dxf2.importsummary.ImportSummary;\n /**\n  * @author maikel arabori\n  */\n-public class EventSimpleCheck\n-    implements\n-    Checker\n+public class EventSimpleCheck implements Checker\n {\n     @Override\n     public ImportSummary check( final ImmutableEvent event, final WorkContext ctx )\n", "next_change": null}]}}]}}]}}]}, "revised_code_in_main": {"commit": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/EventSimpleCheck.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/EventSimpleCheck.java\nindex 6471ba8e6a..79280ff667 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/EventSimpleCheck.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/EventSimpleCheck.java\n", "chunk": "@@ -26,20 +28,19 @@\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n \n-package org.hisp.dhis.dxf2.events.importer.update.validation;\n-\n import static org.apache.commons.lang3.StringUtils.isEmpty;\n import static org.hisp.dhis.dxf2.importsummary.ImportSummary.error;\n import static org.hisp.dhis.dxf2.importsummary.ImportSummary.success;\n \n-import org.hisp.dhis.dxf2.events.importer.shared.ImmutableEvent;\n import org.hisp.dhis.dxf2.events.importer.Checker;\n import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n+import org.hisp.dhis.dxf2.events.importer.shared.ImmutableEvent;\n import org.hisp.dhis.dxf2.importsummary.ImportSummary;\n \n-public class EventSimpleCheck\n-    implements\n-    Checker\n+/**\n+ * @author maikel arabori\n+ */\n+public class EventSimpleCheck implements Checker\n {\n     @Override\n     public ImportSummary check( final ImmutableEvent event, final WorkContext ctx )\n", "next_change": {"commit": "1e593837ab1c64884a8ac615c7cc8c3471a219ee", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/EventSimpleCheck.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/EventSimpleCheck.java\nindex 79280ff667..2117f591dd 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/EventSimpleCheck.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/EventSimpleCheck.java\n", "chunk": "@@ -36,10 +35,12 @@ import org.hisp.dhis.dxf2.events.importer.Checker;\n import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n import org.hisp.dhis.dxf2.events.importer.shared.ImmutableEvent;\n import org.hisp.dhis.dxf2.importsummary.ImportSummary;\n+import org.springframework.stereotype.Component;\n \n /**\n  * @author maikel arabori\n  */\n+@Component\n public class EventSimpleCheck implements Checker\n {\n     @Override\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "message": "Merge commit", "committedDate": null}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "1e593837ab1c64884a8ac615c7cc8c3471a219ee", "committedDate": "2021-11-18 09:33:25 +0100", "message": "refactor: validators, checkers and processors in old importer are now spring beans [TECH-797] (#9218)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "02336c9611c0dd85d5038223bddbfdebc0aae526", "committedDate": "2023-05-11 19:34:26 +0200", "message": "chore: move old tracker dxf2 code into deprecated package (#13901)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzNzk4Nw==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448037987", "body": "package before license", "bodyText": "package before license", "bodyHTML": "<p dir=\"auto\">package before license</p>", "author": "mortenoh", "createdAt": "2020-06-30T23:41:13Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/preprocess/PreUpdateProcessorFactory.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer.update.preprocess;", "originalCommit": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQwMTI0MA==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448401240", "bodyText": "Fixed", "author": "luciano-fiandesio", "createdAt": "2020-07-01T14:26:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzNzk4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "7032498b0cbac9437a93d7deeb72862937c55a98", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/preprocess/PreUpdateProcessorFactory.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/preprocess/PreUpdateProcessorFactory.java\nindex dffd7034f1..d5a57b890e 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/preprocess/PreUpdateProcessorFactory.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/preprocess/PreUpdateProcessorFactory.java\n", "chunk": "@@ -26,8 +28,6 @@\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n \n-package org.hisp.dhis.dxf2.events.importer.update.preprocess;\n-\n import static org.hisp.dhis.dxf2.events.importer.ImportStrategyUtils.isUpdate;\n import static org.hisp.dhis.importexport.ImportStrategy.UPDATE;\n \n", "next_change": {"commit": "d360652a896bee650a842567e26cd1e62145cccb", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/preprocess/PreUpdateProcessorFactory.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/preprocess/PreUpdateProcessorFactory.java\nindex d5a57b890e..dffd7034f1 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/preprocess/PreUpdateProcessorFactory.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/preprocess/PreUpdateProcessorFactory.java\n", "chunk": "@@ -28,6 +26,8 @@ package org.hisp.dhis.dxf2.events.importer.update.preprocess;\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n \n+package org.hisp.dhis.dxf2.events.importer.update.preprocess;\n+\n import static org.hisp.dhis.dxf2.events.importer.ImportStrategyUtils.isUpdate;\n import static org.hisp.dhis.importexport.ImportStrategy.UPDATE;\n \n", "next_change": {"commit": "c9cbe9cf8b22a49324c53b68eba31b9c63684df4", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/preprocess/PreUpdateProcessorFactory.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/preprocess/PreUpdateProcessorFactory.java\nindex dffd7034f1..d5a57b890e 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/preprocess/PreUpdateProcessorFactory.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/preprocess/PreUpdateProcessorFactory.java\n", "chunk": "@@ -26,8 +28,6 @@\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n \n-package org.hisp.dhis.dxf2.events.importer.update.preprocess;\n-\n import static org.hisp.dhis.dxf2.events.importer.ImportStrategyUtils.isUpdate;\n import static org.hisp.dhis.importexport.ImportStrategy.UPDATE;\n \n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/preprocess/PreUpdateProcessorFactory.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/preprocess/PreUpdateProcessorFactory.java\nindex dffd7034f1..d5a57b890e 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/preprocess/PreUpdateProcessorFactory.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/preprocess/PreUpdateProcessorFactory.java\n", "chunk": "@@ -26,8 +28,6 @@\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n \n-package org.hisp.dhis.dxf2.events.importer.update.preprocess;\n-\n import static org.hisp.dhis.dxf2.events.importer.ImportStrategyUtils.isUpdate;\n import static org.hisp.dhis.importexport.ImportStrategy.UPDATE;\n \n", "next_change": {"commit": "f8cfa7437ac99962a94ceef4b9150478899ceb2b", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/preprocess/PreUpdateProcessorFactory.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/preprocess/PreUpdateProcessorFactory.java\nindex d5a57b890e..3772f7ae94 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/preprocess/PreUpdateProcessorFactory.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/preprocess/PreUpdateProcessorFactory.java\n", "chunk": "@@ -28,41 +28,37 @@ package org.hisp.dhis.dxf2.events.importer.update.preprocess;\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n \n-import static org.hisp.dhis.dxf2.events.importer.ImportStrategyUtils.isUpdate;\n import static org.hisp.dhis.importexport.ImportStrategy.UPDATE;\n \n import java.util.List;\n import java.util.Map;\n+import java.util.function.Predicate;\n \n-import org.hisp.dhis.dxf2.events.event.Event;\n-import org.hisp.dhis.dxf2.events.importer.EventProcessing;\n+import org.hisp.dhis.dxf2.events.importer.AbstractProcessorFactory;\n+import org.hisp.dhis.dxf2.events.importer.ImportStrategyUtils;\n import org.hisp.dhis.dxf2.events.importer.Processor;\n-import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n import org.hisp.dhis.importexport.ImportStrategy;\n+import org.springframework.beans.factory.annotation.Qualifier;\n import org.springframework.stereotype.Component;\n \n+import lombok.Getter;\n+import lombok.NonNull;\n+import lombok.RequiredArgsConstructor;\n+\n /**\n  * @author maikel arabori\n  */\n+@Getter\n @Component( \"eventsPreUpdateProcessorFactory\" )\n-public class PreUpdateProcessorFactory implements EventProcessing\n+@RequiredArgsConstructor\n+public class PreUpdateProcessorFactory extends AbstractProcessorFactory\n {\n-    private final Map<ImportStrategy, List<Class<? extends Processor>>> eventUpdatePreProcessorMap;\n+    @NonNull\n+    @Qualifier( \"eventUpdatePreProcessorMap\" )\n+    private final Map<ImportStrategy, List<Class<? extends Processor>>> processorMap;\n \n-    public PreUpdateProcessorFactory(\n-        final Map<ImportStrategy, List<Class<? extends Processor>>> eventUpdatePreProcessorMap )\n-    {\n-        this.eventUpdatePreProcessorMap = eventUpdatePreProcessorMap;\n-    }\n+    private final ImportStrategy importStrategy = UPDATE;\n \n-    @Override\n-    public void process( final WorkContext workContext, final List<Event> events )\n-    {\n-        final ImportStrategy importStrategy = workContext.getImportOptions().getImportStrategy();\n+    private final Predicate<ImportStrategy> importStrategyPredicate = ImportStrategyUtils::isUpdate;\n \n-        if ( isUpdate( importStrategy ) )\n-        {\n-            new ProcessorRunner( workContext, events ).run( eventUpdatePreProcessorMap.get( UPDATE ) );\n-        }\n-    }\n }\n", "next_change": {"commit": "1e593837ab1c64884a8ac615c7cc8c3471a219ee", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/preprocess/PreUpdateProcessorFactory.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/UpdateValidatingEventChecker.java\nsimilarity index 68%\nrename from dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/preprocess/PreUpdateProcessorFactory.java\nrename to dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/UpdateValidatingEventChecker.java\nindex 3772f7ae94..8e1c7fefdb 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/preprocess/PreUpdateProcessorFactory.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/UpdateValidatingEventChecker.java\n", "chunk": "@@ -27,38 +25,37 @@ package org.hisp.dhis.dxf2.events.importer.update.preprocess;\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+package org.hisp.dhis.dxf2.events.importer.update.validation;\n \n+import static com.google.common.base.Preconditions.checkNotNull;\n import static org.hisp.dhis.importexport.ImportStrategy.UPDATE;\n \n import java.util.List;\n import java.util.Map;\n import java.util.function.Predicate;\n \n-import org.hisp.dhis.dxf2.events.importer.AbstractProcessorFactory;\n+import lombok.Getter;\n+\n+import org.hisp.dhis.dxf2.events.importer.Checker;\n+import org.hisp.dhis.dxf2.events.importer.EventImporterValidationRunner;\n import org.hisp.dhis.dxf2.events.importer.ImportStrategyUtils;\n-import org.hisp.dhis.dxf2.events.importer.Processor;\n+import org.hisp.dhis.dxf2.events.importer.ValidatingEventChecker;\n import org.hisp.dhis.importexport.ImportStrategy;\n-import org.springframework.beans.factory.annotation.Qualifier;\n import org.springframework.stereotype.Component;\n \n-import lombok.Getter;\n-import lombok.NonNull;\n-import lombok.RequiredArgsConstructor;\n-\n /**\n  * @author maikel arabori\n  */\n-@Getter\n-@Component( \"eventsPreUpdateProcessorFactory\" )\n-@RequiredArgsConstructor\n-public class PreUpdateProcessorFactory extends AbstractProcessorFactory\n+@Component\n+public class UpdateValidatingEventChecker extends ValidatingEventChecker\n {\n-    @NonNull\n-    @Qualifier( \"eventUpdatePreProcessorMap\" )\n-    private final Map<ImportStrategy, List<Class<? extends Processor>>> processorMap;\n-\n-    private final ImportStrategy importStrategy = UPDATE;\n-\n-    private final Predicate<ImportStrategy> importStrategyPredicate = ImportStrategyUtils::isUpdate;\n-\n+    @Getter\n+    private final Predicate<ImportStrategy> supportedPredicate = ImportStrategyUtils::isUpdate;\n+\n+    public UpdateValidatingEventChecker( final Map<ImportStrategy, List<Checker>> checkersByImportStrategy,\n+        EventImporterValidationRunner validationRunner )\n+    {\n+        super( checkNotNull(\n+            checkNotNull( checkersByImportStrategy ).get( UPDATE ) ), validationRunner );\n+    }\n }\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "message": "Merge commit", "committedDate": null}, {"oid": "f8cfa7437ac99962a94ceef4b9150478899ceb2b", "committedDate": "2020-09-11 13:59:14 +0200", "message": "fix: audit for event importer are now present (#6138) (#6140)"}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "1e593837ab1c64884a8ac615c7cc8c3471a219ee", "committedDate": "2021-11-18 09:33:25 +0100", "message": "refactor: validators, checkers and processors in old importer are now spring beans [TECH-797] (#9218)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzODI3OA==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448038278", "body": "package before license", "bodyText": "package before license", "bodyHTML": "<p dir=\"auto\">package before license</p>", "author": "mortenoh", "createdAt": "2020-06-30T23:42:13Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/preprocess/ProgramInstanceGeometryPreProcessor.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer.update.preprocess;", "originalCommit": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQwMTUyNg==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448401526", "bodyText": "Fixed", "author": "luciano-fiandesio", "createdAt": "2020-07-01T14:26:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzODI3OA=="}], "type": "inlineReview", "revised_code": {"commit": "7032498b0cbac9437a93d7deeb72862937c55a98", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/preprocess/ProgramInstanceGeometryPreProcessor.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/preprocess/ProgramInstanceGeometryPreProcessor.java\nindex 85eb44b190..8f0380ac3f 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/preprocess/ProgramInstanceGeometryPreProcessor.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/preprocess/ProgramInstanceGeometryPreProcessor.java\n", "chunk": "@@ -26,8 +28,6 @@\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n \n-package org.hisp.dhis.dxf2.events.importer.update.preprocess;\n-\n import static org.hisp.dhis.organisationunit.FeatureType.NONE;\n import static org.hisp.dhis.system.util.GeoUtils.SRID;\n import static org.hisp.dhis.system.util.GeoUtils.getGeoJsonPoint;\n", "next_change": {"commit": "d360652a896bee650a842567e26cd1e62145cccb", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/preprocess/ProgramInstanceGeometryPreProcessor.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/preprocess/ProgramInstanceGeometryPreProcessor.java\nindex 8f0380ac3f..85eb44b190 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/preprocess/ProgramInstanceGeometryPreProcessor.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/preprocess/ProgramInstanceGeometryPreProcessor.java\n", "chunk": "@@ -28,6 +26,8 @@ package org.hisp.dhis.dxf2.events.importer.update.preprocess;\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n \n+package org.hisp.dhis.dxf2.events.importer.update.preprocess;\n+\n import static org.hisp.dhis.organisationunit.FeatureType.NONE;\n import static org.hisp.dhis.system.util.GeoUtils.SRID;\n import static org.hisp.dhis.system.util.GeoUtils.getGeoJsonPoint;\n", "next_change": {"commit": "c9cbe9cf8b22a49324c53b68eba31b9c63684df4", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/preprocess/ProgramInstanceGeometryPreProcessor.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/preprocess/ProgramInstanceGeometryPreProcessor.java\nindex 85eb44b190..8f0380ac3f 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/preprocess/ProgramInstanceGeometryPreProcessor.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/preprocess/ProgramInstanceGeometryPreProcessor.java\n", "chunk": "@@ -26,8 +28,6 @@\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n \n-package org.hisp.dhis.dxf2.events.importer.update.preprocess;\n-\n import static org.hisp.dhis.organisationunit.FeatureType.NONE;\n import static org.hisp.dhis.system.util.GeoUtils.SRID;\n import static org.hisp.dhis.system.util.GeoUtils.getGeoJsonPoint;\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/preprocess/ProgramInstanceGeometryPreProcessor.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/preprocess/ProgramInstanceGeometryPreProcessor.java\nindex 85eb44b190..5cb846f0b1 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/preprocess/ProgramInstanceGeometryPreProcessor.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/preprocess/ProgramInstanceGeometryPreProcessor.java\n", "chunk": "@@ -26,8 +28,6 @@\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n \n-package org.hisp.dhis.dxf2.events.importer.update.preprocess;\n-\n import static org.hisp.dhis.organisationunit.FeatureType.NONE;\n import static org.hisp.dhis.system.util.GeoUtils.SRID;\n import static org.hisp.dhis.system.util.GeoUtils.getGeoJsonPoint;\n", "next_change": {"commit": "52b8f7c48def44670be7ba9d25d0ee963fe9441e", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/preprocess/ProgramInstanceGeometryPreProcessor.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/preprocess/ProgramInstanceGeometryPreProcessor.java\nindex 5cb846f0b1..cec263cba7 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/preprocess/ProgramInstanceGeometryPreProcessor.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/preprocess/ProgramInstanceGeometryPreProcessor.java\n", "chunk": "@@ -30,15 +30,10 @@ package org.hisp.dhis.dxf2.events.importer.update.preprocess;\n \n import static org.hisp.dhis.organisationunit.FeatureType.NONE;\n import static org.hisp.dhis.system.util.GeoUtils.SRID;\n-import static org.hisp.dhis.system.util.GeoUtils.getGeoJsonPoint;\n \n-import java.io.IOException;\n-\n-import org.hisp.dhis.dxf2.events.event.Coordinate;\n import org.hisp.dhis.dxf2.events.event.Event;\n import org.hisp.dhis.dxf2.events.importer.Processor;\n import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n-import org.hisp.dhis.program.ProgramStageInstance;\n \n /**\n  * @author maikel arabori\n", "next_change": {"commit": "1e593837ab1c64884a8ac615c7cc8c3471a219ee", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/preprocess/ProgramInstanceGeometryPreProcessor.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/preprocess/ProgramInstanceGeometryPreProcessor.java\nindex cec263cba7..89e9c8d54d 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/preprocess/ProgramInstanceGeometryPreProcessor.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/preprocess/ProgramInstanceGeometryPreProcessor.java\n", "chunk": "@@ -34,10 +33,12 @@ import static org.hisp.dhis.system.util.GeoUtils.SRID;\n import org.hisp.dhis.dxf2.events.event.Event;\n import org.hisp.dhis.dxf2.events.importer.Processor;\n import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n+import org.springframework.stereotype.Component;\n \n /**\n  * @author maikel arabori\n  */\n+@Component\n public class ProgramInstanceGeometryPreProcessor implements Processor\n {\n     @Override\n", "next_change": {"commit": "ba38c7fa19a269450161eb73bad6b80b1ef1133b", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/preprocess/ProgramInstanceGeometryPreProcessor.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/preprocess/EnrollmentGeometryPreProcessor.java\nsimilarity index 95%\nrename from dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/preprocess/ProgramInstanceGeometryPreProcessor.java\nrename to dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/preprocess/EnrollmentGeometryPreProcessor.java\nindex 89e9c8d54d..705230eab5 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/preprocess/ProgramInstanceGeometryPreProcessor.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/preprocess/EnrollmentGeometryPreProcessor.java\n", "chunk": "@@ -39,7 +39,7 @@ import org.springframework.stereotype.Component;\n  * @author maikel arabori\n  */\n @Component\n-public class ProgramInstanceGeometryPreProcessor implements Processor\n+public class EnrollmentGeometryPreProcessor implements Processor\n {\n     @Override\n     public void process( final Event event, final WorkContext ctx )\n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "message": "Merge commit", "committedDate": null}, {"oid": "8aaeab2ee4dd7a9ffa927147931dff8609ef787a", "committedDate": "2020-09-23 15:33:34 +0200", "message": "chore: Remove unused imports (#6219)"}, {"oid": "52b8f7c48def44670be7ba9d25d0ee963fe9441e", "committedDate": "2020-09-24 09:19:03 +0200", "message": "fix: Coordinate class removed, drop support for old implementation (#6172)"}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "1e593837ab1c64884a8ac615c7cc8c3471a219ee", "committedDate": "2021-11-18 09:33:25 +0100", "message": "refactor: validators, checkers and processors in old importer are now spring beans [TECH-797] (#9218)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "ba38c7fa19a269450161eb73bad6b80b1ef1133b", "committedDate": "2023-05-04 11:23:39 +0200", "message": "chore: Rename most ProgramInstance classes to Enrollment [TECH-1547] (#13811)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzODMxMw==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448038313", "body": "style", "bodyText": "style", "bodyHTML": "<p dir=\"auto\">style</p>", "author": "mortenoh", "createdAt": "2020-06-30T23:42:19Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/preprocess/ProgramInstanceGeometryPreProcessor.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer.update.preprocess;\n+\n+import static org.hisp.dhis.organisationunit.FeatureType.NONE;\n+import static org.hisp.dhis.system.util.GeoUtils.SRID;\n+import static org.hisp.dhis.system.util.GeoUtils.getGeoJsonPoint;\n+\n+import java.io.IOException;\n+\n+import org.hisp.dhis.dxf2.events.event.Coordinate;\n+import org.hisp.dhis.dxf2.events.event.Event;\n+import org.hisp.dhis.dxf2.events.importer.Processor;\n+import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n+import org.hisp.dhis.program.ProgramStageInstance;\n+\n+public class ProgramInstanceGeometryPreProcessor\n+    implements", "originalCommit": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQwMTcxMA==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448401710", "bodyText": "Fixed", "author": "luciano-fiandesio", "createdAt": "2020-07-01T14:26:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzODMxMw=="}], "type": "inlineReview", "revised_code": {"commit": "7032498b0cbac9437a93d7deeb72862937c55a98", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/preprocess/ProgramInstanceGeometryPreProcessor.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/preprocess/ProgramInstanceGeometryPreProcessor.java\nindex 85eb44b190..8f0380ac3f 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/preprocess/ProgramInstanceGeometryPreProcessor.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/preprocess/ProgramInstanceGeometryPreProcessor.java\n", "chunk": "@@ -40,11 +40,11 @@ import org.hisp.dhis.dxf2.events.importer.Processor;\n import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n import org.hisp.dhis.program.ProgramStageInstance;\n \n-public class ProgramInstanceGeometryPreProcessor\n-    implements\n-    Processor\n+/**\n+ * @author maikel arabori\n+ */\n+public class ProgramInstanceGeometryPreProcessor implements Processor\n {\n-\n     @Override\n     public void process( final Event event, final WorkContext ctx )\n     {\n", "next_change": {"commit": "d360652a896bee650a842567e26cd1e62145cccb", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/preprocess/ProgramInstanceGeometryPreProcessor.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/preprocess/ProgramInstanceGeometryPreProcessor.java\nindex 8f0380ac3f..85eb44b190 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/preprocess/ProgramInstanceGeometryPreProcessor.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/preprocess/ProgramInstanceGeometryPreProcessor.java\n", "chunk": "@@ -40,11 +40,11 @@ import org.hisp.dhis.dxf2.events.importer.Processor;\n import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n import org.hisp.dhis.program.ProgramStageInstance;\n \n-/**\n- * @author maikel arabori\n- */\n-public class ProgramInstanceGeometryPreProcessor implements Processor\n+public class ProgramInstanceGeometryPreProcessor\n+    implements\n+    Processor\n {\n+\n     @Override\n     public void process( final Event event, final WorkContext ctx )\n     {\n", "next_change": {"commit": "bf042296956c38e5762dc2763da53fe23bc444a3", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/preprocess/ProgramInstanceGeometryPreProcessor.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/preprocess/ProgramInstanceGeometryPreProcessor.java\nindex 85eb44b190..4b0b0d0b1a 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/preprocess/ProgramInstanceGeometryPreProcessor.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/preprocess/ProgramInstanceGeometryPreProcessor.java\n", "chunk": "@@ -40,11 +40,13 @@ import org.hisp.dhis.dxf2.events.importer.Processor;\n import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n import org.hisp.dhis.program.ProgramStageInstance;\n \n+/**\n+ * @author maikel arabori\n+ */\n public class ProgramInstanceGeometryPreProcessor\n     implements\n     Processor\n {\n-\n     @Override\n     public void process( final Event event, final WorkContext ctx )\n     {\n", "next_change": {"commit": "c9cbe9cf8b22a49324c53b68eba31b9c63684df4", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/preprocess/ProgramInstanceGeometryPreProcessor.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/preprocess/ProgramInstanceGeometryPreProcessor.java\nindex 4b0b0d0b1a..8f0380ac3f 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/preprocess/ProgramInstanceGeometryPreProcessor.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/preprocess/ProgramInstanceGeometryPreProcessor.java\n", "chunk": "@@ -43,9 +43,7 @@ import org.hisp.dhis.program.ProgramStageInstance;\n /**\n  * @author maikel arabori\n  */\n-public class ProgramInstanceGeometryPreProcessor\n-    implements\n-    Processor\n+public class ProgramInstanceGeometryPreProcessor implements Processor\n {\n     @Override\n     public void process( final Event event, final WorkContext ctx )\n", "next_change": {"commit": "0afc06f20ca0da37d98942b17c007f28af21925a", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/preprocess/ProgramInstanceGeometryPreProcessor.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/preprocess/ProgramInstanceGeometryPreProcessor.java\nindex 8f0380ac3f..5cb846f0b1 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/preprocess/ProgramInstanceGeometryPreProcessor.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/preprocess/ProgramInstanceGeometryPreProcessor.java\n", "chunk": "@@ -48,29 +48,30 @@ public class ProgramInstanceGeometryPreProcessor implements Processor\n     @Override\n     public void process( final Event event, final WorkContext ctx )\n     {\n-        final ProgramStageInstance programStageInstance = ctx.getProgramStageInstanceMap().get( event.getEvent() );\n+        ctx.getProgramStageInstance( event.getUid() ).ifPresent( psi -> {\n \n-        if ( event.getGeometry() != null )\n-        {\n-            if ( !programStageInstance.getProgramStage().getFeatureType().equals( NONE ) || programStageInstance\n-                .getProgramStage().getFeatureType().value().equals( event.getGeometry().getGeometryType() ) )\n+            if ( event.getGeometry() != null )\n             {\n-                event.getGeometry().setSRID( SRID );\n+                if ( !psi.getProgramStage().getFeatureType().equals( NONE ) || psi\n+                    .getProgramStage().getFeatureType().value().equals( event.getGeometry().getGeometryType() ) )\n+                {\n+                    event.getGeometry().setSRID( SRID );\n+                }\n             }\n-        }\n-        else if ( event.getCoordinate() != null && event.getCoordinate().hasLatitudeLongitude() )\n-        {\n-            final Coordinate coordinate = event.getCoordinate();\n-\n-            try\n-            {\n-                event.setGeometry( getGeoJsonPoint( coordinate.getLongitude(), coordinate.getLatitude() ) );\n-            }\n-            catch ( IOException e )\n+            else if ( event.getCoordinate() != null && event.getCoordinate().hasLatitudeLongitude() )\n             {\n-                // Do nothing. The validation phase, before the post process phase, will catch\n-                // it in advance. It should never happen at this stage.\n+                final Coordinate coordinate = event.getCoordinate();\n+\n+                try\n+                {\n+                    event.setGeometry( getGeoJsonPoint( coordinate.getLongitude(), coordinate.getLatitude() ) );\n+                }\n+                catch ( IOException e )\n+                {\n+                    // Do nothing. The validation phase, before the post process phase, will catch\n+                    // it in advance. It should never happen at this stage.\n+                }\n             }\n-        }\n+        } );\n     }\n }\n", "next_change": null}]}}]}}]}}]}}]}, "revised_code_in_main": {"commit": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/preprocess/ProgramInstanceGeometryPreProcessor.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/preprocess/ProgramInstanceGeometryPreProcessor.java\nindex 85eb44b190..5cb846f0b1 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/preprocess/ProgramInstanceGeometryPreProcessor.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/preprocess/ProgramInstanceGeometryPreProcessor.java\n", "chunk": "@@ -40,37 +40,38 @@ import org.hisp.dhis.dxf2.events.importer.Processor;\n import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n import org.hisp.dhis.program.ProgramStageInstance;\n \n-public class ProgramInstanceGeometryPreProcessor\n-    implements\n-    Processor\n+/**\n+ * @author maikel arabori\n+ */\n+public class ProgramInstanceGeometryPreProcessor implements Processor\n {\n-\n     @Override\n     public void process( final Event event, final WorkContext ctx )\n     {\n-        final ProgramStageInstance programStageInstance = ctx.getProgramStageInstanceMap().get( event.getEvent() );\n+        ctx.getProgramStageInstance( event.getUid() ).ifPresent( psi -> {\n \n-        if ( event.getGeometry() != null )\n-        {\n-            if ( !programStageInstance.getProgramStage().getFeatureType().equals( NONE ) || programStageInstance\n-                .getProgramStage().getFeatureType().value().equals( event.getGeometry().getGeometryType() ) )\n+            if ( event.getGeometry() != null )\n             {\n-                event.getGeometry().setSRID( SRID );\n+                if ( !psi.getProgramStage().getFeatureType().equals( NONE ) || psi\n+                    .getProgramStage().getFeatureType().value().equals( event.getGeometry().getGeometryType() ) )\n+                {\n+                    event.getGeometry().setSRID( SRID );\n+                }\n             }\n-        }\n-        else if ( event.getCoordinate() != null && event.getCoordinate().hasLatitudeLongitude() )\n-        {\n-            final Coordinate coordinate = event.getCoordinate();\n-\n-            try\n+            else if ( event.getCoordinate() != null && event.getCoordinate().hasLatitudeLongitude() )\n             {\n-                event.setGeometry( getGeoJsonPoint( coordinate.getLongitude(), coordinate.getLatitude() ) );\n-            }\n-            catch ( IOException e )\n-            {\n-                // Do nothing. The validation phase, before the post process phase, will catch\n-                // it in advance. It should never happen at this stage.\n+                final Coordinate coordinate = event.getCoordinate();\n+\n+                try\n+                {\n+                    event.setGeometry( getGeoJsonPoint( coordinate.getLongitude(), coordinate.getLatitude() ) );\n+                }\n+                catch ( IOException e )\n+                {\n+                    // Do nothing. The validation phase, before the post process phase, will catch\n+                    // it in advance. It should never happen at this stage.\n+                }\n             }\n-        }\n+        } );\n     }\n }\n", "next_change": {"commit": "52b8f7c48def44670be7ba9d25d0ee963fe9441e", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/preprocess/ProgramInstanceGeometryPreProcessor.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/preprocess/ProgramInstanceGeometryPreProcessor.java\nindex 5cb846f0b1..cec263cba7 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/preprocess/ProgramInstanceGeometryPreProcessor.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/preprocess/ProgramInstanceGeometryPreProcessor.java\n", "chunk": "@@ -50,27 +45,10 @@ public class ProgramInstanceGeometryPreProcessor implements Processor\n     {\n         ctx.getProgramStageInstance( event.getUid() ).ifPresent( psi -> {\n \n-            if ( event.getGeometry() != null )\n-            {\n-                if ( !psi.getProgramStage().getFeatureType().equals( NONE ) || psi\n-                    .getProgramStage().getFeatureType().value().equals( event.getGeometry().getGeometryType() ) )\n-                {\n-                    event.getGeometry().setSRID( SRID );\n-                }\n-            }\n-            else if ( event.getCoordinate() != null && event.getCoordinate().hasLatitudeLongitude() )\n+            if ( event.getGeometry() != null && (!psi.getProgramStage().getFeatureType().equals( NONE ) || psi\n+                .getProgramStage().getFeatureType().value().equals( event.getGeometry().getGeometryType() )) )\n             {\n-                final Coordinate coordinate = event.getCoordinate();\n-\n-                try\n-                {\n-                    event.setGeometry( getGeoJsonPoint( coordinate.getLongitude(), coordinate.getLatitude() ) );\n-                }\n-                catch ( IOException e )\n-                {\n-                    // Do nothing. The validation phase, before the post process phase, will catch\n-                    // it in advance. It should never happen at this stage.\n-                }\n+                event.getGeometry().setSRID( SRID );\n             }\n         } );\n     }\n", "next_change": {"commit": "ba38c7fa19a269450161eb73bad6b80b1ef1133b", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/preprocess/ProgramInstanceGeometryPreProcessor.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/preprocess/ProgramInstanceGeometryPreProcessor.java\ndeleted file mode 100644\nindex cec263cba7..0000000000\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/preprocess/ProgramInstanceGeometryPreProcessor.java\n+++ /dev/null\n", "chunk": "@@ -1,55 +0,0 @@\n-package org.hisp.dhis.dxf2.events.importer.update.preprocess;\n-\n-/*\n- * Copyright (c) 2004-2020, University of Oslo\n- * All rights reserved.\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions are met:\n- * Redistributions of source code must retain the above copyright notice, this\n- * list of conditions and the following disclaimer.\n- *\n- * Redistributions in binary form must reproduce the above copyright notice,\n- * this list of conditions and the following disclaimer in the documentation\n- * and/or other materials provided with the distribution.\n- * Neither the name of the HISP project nor the names of its contributors may\n- * be used to endorse or promote products derived from this software without\n- * specific prior written permission.\n- *\n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n- * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n- * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n- * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n- * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n- * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n- * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n- * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n- * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- */\n-\n-import static org.hisp.dhis.organisationunit.FeatureType.NONE;\n-import static org.hisp.dhis.system.util.GeoUtils.SRID;\n-\n-import org.hisp.dhis.dxf2.events.event.Event;\n-import org.hisp.dhis.dxf2.events.importer.Processor;\n-import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n-\n-/**\n- * @author maikel arabori\n- */\n-public class ProgramInstanceGeometryPreProcessor implements Processor\n-{\n-    @Override\n-    public void process( final Event event, final WorkContext ctx )\n-    {\n-        ctx.getProgramStageInstance( event.getUid() ).ifPresent( psi -> {\n-\n-            if ( event.getGeometry() != null && (!psi.getProgramStage().getFeatureType().equals( NONE ) || psi\n-                .getProgramStage().getFeatureType().value().equals( event.getGeometry().getGeometryType() )) )\n-            {\n-                event.getGeometry().setSRID( SRID );\n-            }\n-        } );\n-    }\n-}\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "message": "Merge commit", "committedDate": null}, {"oid": "8aaeab2ee4dd7a9ffa927147931dff8609ef787a", "committedDate": "2020-09-23 15:33:34 +0200", "message": "chore: Remove unused imports (#6219)"}, {"oid": "52b8f7c48def44670be7ba9d25d0ee963fe9441e", "committedDate": "2020-09-24 09:19:03 +0200", "message": "fix: Coordinate class removed, drop support for old implementation (#6172)"}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "1e593837ab1c64884a8ac615c7cc8c3471a219ee", "committedDate": "2021-11-18 09:33:25 +0100", "message": "refactor: validators, checkers and processors in old importer are now spring beans [TECH-797] (#9218)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "ba38c7fa19a269450161eb73bad6b80b1ef1133b", "committedDate": "2023-05-04 11:23:39 +0200", "message": "chore: Rename most ProgramInstance classes to Enrollment [TECH-1547] (#13811)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzODY5Ng==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448038696", "body": "package before license", "bodyText": "package before license", "bodyHTML": "<p dir=\"auto\">package before license</p>", "author": "mortenoh", "createdAt": "2020-06-30T23:43:44Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/delete/validation/DeleteValidationFactory.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer.delete.validation;", "originalCommit": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQwMjAzMw==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448402033", "bodyText": "Fixed", "author": "luciano-fiandesio", "createdAt": "2020-07-01T14:27:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzODY5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "7032498b0cbac9437a93d7deeb72862937c55a98", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/delete/validation/DeleteValidationFactory.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/delete/validation/DeleteValidationFactory.java\nindex 1d3b9266df..d6e77dab92 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/delete/validation/DeleteValidationFactory.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/delete/validation/DeleteValidationFactory.java\n", "chunk": "@@ -26,8 +28,6 @@\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n \n-package org.hisp.dhis.dxf2.events.importer.delete.validation;\n-\n import static com.google.common.base.Preconditions.checkNotNull;\n import static java.util.Collections.emptyList;\n import static org.hisp.dhis.dxf2.events.importer.ImportStrategyUtils.isDelete;\n", "next_change": {"commit": "d360652a896bee650a842567e26cd1e62145cccb", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/delete/validation/DeleteValidationFactory.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/delete/validation/DeleteValidationFactory.java\nindex d6e77dab92..1d3b9266df 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/delete/validation/DeleteValidationFactory.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/delete/validation/DeleteValidationFactory.java\n", "chunk": "@@ -28,6 +26,8 @@ package org.hisp.dhis.dxf2.events.importer.delete.validation;\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n \n+package org.hisp.dhis.dxf2.events.importer.delete.validation;\n+\n import static com.google.common.base.Preconditions.checkNotNull;\n import static java.util.Collections.emptyList;\n import static org.hisp.dhis.dxf2.events.importer.ImportStrategyUtils.isDelete;\n", "next_change": {"commit": "c9cbe9cf8b22a49324c53b68eba31b9c63684df4", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/delete/validation/DeleteValidationFactory.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/delete/validation/DeleteValidationFactory.java\nindex 1d3b9266df..d6e77dab92 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/delete/validation/DeleteValidationFactory.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/delete/validation/DeleteValidationFactory.java\n", "chunk": "@@ -26,8 +28,6 @@\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n \n-package org.hisp.dhis.dxf2.events.importer.delete.validation;\n-\n import static com.google.common.base.Preconditions.checkNotNull;\n import static java.util.Collections.emptyList;\n import static org.hisp.dhis.dxf2.events.importer.ImportStrategyUtils.isDelete;\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/delete/validation/DeleteValidationFactory.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/delete/validation/DeleteValidationFactory.java\nindex 1d3b9266df..d6e77dab92 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/delete/validation/DeleteValidationFactory.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/delete/validation/DeleteValidationFactory.java\n", "chunk": "@@ -26,8 +28,6 @@\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n \n-package org.hisp.dhis.dxf2.events.importer.delete.validation;\n-\n import static com.google.common.base.Preconditions.checkNotNull;\n import static java.util.Collections.emptyList;\n import static org.hisp.dhis.dxf2.events.importer.ImportStrategyUtils.isDelete;\n", "next_change": {"commit": "ea76fa86409613c9766d4508d65c88ac55c413c3", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/delete/validation/DeleteValidationFactory.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/delete/validation/DeleteValidationFactory.java\nindex d6e77dab92..d436bd8f43 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/delete/validation/DeleteValidationFactory.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/delete/validation/DeleteValidationFactory.java\n", "chunk": "@@ -27,6 +25,7 @@ package org.hisp.dhis.dxf2.events.importer.delete.validation;\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+package org.hisp.dhis.dxf2.events.importer.delete.validation;\n \n import static com.google.common.base.Preconditions.checkNotNull;\n import static java.util.Collections.emptyList;\n", "next_change": {"commit": "1e593837ab1c64884a8ac615c7cc8c3471a219ee", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/delete/validation/DeleteValidationFactory.java b/dhis-2/dhis-services/dhis-service-analytics/src/main/java/org/hisp/dhis/analytics/resolver/ExpressionResolvers.java\nsimilarity index 52%\nrename from dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/delete/validation/DeleteValidationFactory.java\nrename to dhis-2/dhis-services/dhis-service-analytics/src/main/java/org/hisp/dhis/analytics/resolver/ExpressionResolvers.java\nindex d436bd8f43..e70a3f36a4 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/delete/validation/DeleteValidationFactory.java\n+++ b/dhis-2/dhis-services/dhis-service-analytics/src/main/java/org/hisp/dhis/analytics/resolver/ExpressionResolvers.java\n", "chunk": "@@ -25,48 +25,54 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n-package org.hisp.dhis.dxf2.events.importer.delete.validation;\n+package org.hisp.dhis.analytics.resolver;\n \n import static com.google.common.base.Preconditions.checkNotNull;\n-import static java.util.Collections.emptyList;\n-import static org.hisp.dhis.dxf2.events.importer.ImportStrategyUtils.isDelete;\n-import static org.hisp.dhis.importexport.ImportStrategy.DELETE;\n \n+import java.util.ArrayList;\n import java.util.List;\n-import java.util.Map;\n \n-import org.hisp.dhis.dxf2.events.event.Event;\n-import org.hisp.dhis.dxf2.events.importer.Checker;\n-import org.hisp.dhis.dxf2.events.importer.EventChecking;\n-import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n-import org.hisp.dhis.dxf2.importsummary.ImportSummary;\n-import org.hisp.dhis.importexport.ImportStrategy;\n-import org.springframework.stereotype.Component;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Service;\n+\n+import com.google.common.collect.ImmutableList;\n \n /**\n- * @author maikel arabori\n+ * @author Dusan Bernat\n  */\n-@Component( \"eventsDeleteValidationFactory\" )\n-public class DeleteValidationFactory implements EventChecking\n+@Service\n+public class ExpressionResolvers implements ExpressionResolverCollection\n {\n-    private final Map<ImportStrategy, List<Class<? extends Checker>>> eventDeleteValidatorMap;\n+    private final List<ExpressionResolver> expressionResolvers;\n \n-    public DeleteValidationFactory( final Map<ImportStrategy, List<Class<? extends Checker>>> eventDeleteValidatorMap )\n+    public ExpressionResolvers(\n+        @Qualifier( \"org.hisp.dhis.analytics.resolver.CategoryOptionGroupTaglessResolver\" ) ExpressionResolver cogTaglessExpressionResolver,\n+        @Qualifier( \"org.hisp.dhis.analytics.resolver.CategoryOptionGroupResolver\" ) ExpressionResolver cogExpressionResolver,\n+        @Qualifier( \"org.hisp.dhis.analytics.resolver.CategoryOptionResolver\" ) ExpressionResolver coExpressionResolver,\n+        @Qualifier( \"org.hisp.dhis.analytics.resolver.DataElementGroupResolver\" ) ExpressionResolver degExpressionResolver )\n     {\n-        checkNotNull( eventDeleteValidatorMap );\n-        this.eventDeleteValidatorMap = eventDeleteValidatorMap;\n+        checkNotNull( cogTaglessExpressionResolver );\n+\n+        checkNotNull( cogExpressionResolver );\n+\n+        checkNotNull( coExpressionResolver );\n+\n+        checkNotNull( degExpressionResolver );\n+\n+        expressionResolvers = new ArrayList<>();\n+\n+        expressionResolvers.add( cogTaglessExpressionResolver );\n+\n+        expressionResolvers.add( cogExpressionResolver );\n+\n+        expressionResolvers.add( coExpressionResolver );\n+\n+        expressionResolvers.add( degExpressionResolver );\n     }\n \n     @Override\n-    public List<ImportSummary> check( final WorkContext ctx, final List<Event> events )\n+    public List<ExpressionResolver> getExpressionResolvers()\n     {\n-        final ImportStrategy importStrategy = ctx.getImportOptions().getImportStrategy();\n-\n-        if ( isDelete( importStrategy ) )\n-        {\n-            return new ValidationRunner( ctx, events ).run( eventDeleteValidatorMap.get( DELETE ) );\n-        }\n-\n-        return emptyList();\n+        return ImmutableList.copyOf( expressionResolvers );\n     }\n }\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "message": "Merge commit", "committedDate": null}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "1e593837ab1c64884a8ac615c7cc8c3471a219ee", "committedDate": "2021-11-18 09:33:25 +0100", "message": "refactor: validators, checkers and processors in old importer are now spring beans [TECH-797] (#9218)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzODc0NA==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448038744", "body": "author header", "bodyText": "author header", "bodyHTML": "<p dir=\"auto\">author header</p>", "author": "mortenoh", "createdAt": "2020-06-30T23:43:55Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/delete/validation/DeleteValidationFactory.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer.delete.validation;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+import static java.util.Collections.emptyList;\n+import static org.hisp.dhis.dxf2.events.importer.ImportStrategyUtils.isDelete;\n+import static org.hisp.dhis.importexport.ImportStrategy.DELETE;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.hisp.dhis.dxf2.events.event.Event;\n+import org.hisp.dhis.dxf2.events.importer.Checker;\n+import org.hisp.dhis.dxf2.events.importer.EventChecking;\n+import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n+import org.hisp.dhis.dxf2.importsummary.ImportSummary;\n+import org.hisp.dhis.importexport.ImportStrategy;\n+import org.springframework.stereotype.Component;\n+\n+@Component( \"eventsDeleteValidationFactory\" )", "originalCommit": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQwMjEyNA==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448402124", "bodyText": "Fixed", "author": "luciano-fiandesio", "createdAt": "2020-07-01T14:27:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzODc0NA=="}], "type": "inlineReview", "revised_code": {"commit": "7032498b0cbac9437a93d7deeb72862937c55a98", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/delete/validation/DeleteValidationFactory.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/delete/validation/DeleteValidationFactory.java\nindex 1d3b9266df..d6e77dab92 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/delete/validation/DeleteValidationFactory.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/delete/validation/DeleteValidationFactory.java\n", "chunk": "@@ -44,6 +44,9 @@ import org.hisp.dhis.dxf2.importsummary.ImportSummary;\n import org.hisp.dhis.importexport.ImportStrategy;\n import org.springframework.stereotype.Component;\n \n+/**\n+ * @author maikel arabori\n+ */\n @Component( \"eventsDeleteValidationFactory\" )\n public class DeleteValidationFactory implements EventChecking\n {\n", "next_change": {"commit": "d360652a896bee650a842567e26cd1e62145cccb", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/delete/validation/DeleteValidationFactory.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/delete/validation/DeleteValidationFactory.java\nindex d6e77dab92..1d3b9266df 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/delete/validation/DeleteValidationFactory.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/delete/validation/DeleteValidationFactory.java\n", "chunk": "@@ -44,9 +44,6 @@ import org.hisp.dhis.dxf2.importsummary.ImportSummary;\n import org.hisp.dhis.importexport.ImportStrategy;\n import org.springframework.stereotype.Component;\n \n-/**\n- * @author maikel arabori\n- */\n @Component( \"eventsDeleteValidationFactory\" )\n public class DeleteValidationFactory implements EventChecking\n {\n", "next_change": {"commit": "bf042296956c38e5762dc2763da53fe23bc444a3", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/delete/validation/DeleteValidationFactory.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/delete/validation/DeleteValidationFactory.java\nindex 1d3b9266df..56caa40f9c 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/delete/validation/DeleteValidationFactory.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/delete/validation/DeleteValidationFactory.java\n", "chunk": "@@ -44,6 +44,9 @@ import org.hisp.dhis.dxf2.importsummary.ImportSummary;\n import org.hisp.dhis.importexport.ImportStrategy;\n import org.springframework.stereotype.Component;\n \n+/**\n+ * @author maikel arabori\n+ */\n @Component( \"eventsDeleteValidationFactory\" )\n public class DeleteValidationFactory implements EventChecking\n {\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/delete/validation/DeleteValidationFactory.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/delete/validation/DeleteValidationFactory.java\nindex 1d3b9266df..d6e77dab92 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/delete/validation/DeleteValidationFactory.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/delete/validation/DeleteValidationFactory.java\n", "chunk": "@@ -44,6 +44,9 @@ import org.hisp.dhis.dxf2.importsummary.ImportSummary;\n import org.hisp.dhis.importexport.ImportStrategy;\n import org.springframework.stereotype.Component;\n \n+/**\n+ * @author maikel arabori\n+ */\n @Component( \"eventsDeleteValidationFactory\" )\n public class DeleteValidationFactory implements EventChecking\n {\n", "next_change": {"commit": "1e593837ab1c64884a8ac615c7cc8c3471a219ee", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/delete/validation/DeleteValidationFactory.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/delete/validation/DeleteValidatingEventChecker.java\nsimilarity index 61%\nrename from dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/delete/validation/DeleteValidationFactory.java\nrename to dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/delete/validation/DeleteValidatingEventChecker.java\nindex d6e77dab92..c98a0f2fbf 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/delete/validation/DeleteValidationFactory.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/delete/validation/DeleteValidatingEventChecker.java\n", "chunk": "@@ -27,47 +25,38 @@ package org.hisp.dhis.dxf2.events.importer.delete.validation;\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+package org.hisp.dhis.dxf2.events.importer.delete.validation;\n \n import static com.google.common.base.Preconditions.checkNotNull;\n-import static java.util.Collections.emptyList;\n-import static org.hisp.dhis.dxf2.events.importer.ImportStrategyUtils.isDelete;\n import static org.hisp.dhis.importexport.ImportStrategy.DELETE;\n \n import java.util.List;\n import java.util.Map;\n+import java.util.function.Predicate;\n+\n+import lombok.Getter;\n \n-import org.hisp.dhis.dxf2.events.event.Event;\n import org.hisp.dhis.dxf2.events.importer.Checker;\n-import org.hisp.dhis.dxf2.events.importer.EventChecking;\n-import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n-import org.hisp.dhis.dxf2.importsummary.ImportSummary;\n+import org.hisp.dhis.dxf2.events.importer.EventImporterValidationRunner;\n+import org.hisp.dhis.dxf2.events.importer.ImportStrategyUtils;\n+import org.hisp.dhis.dxf2.events.importer.ValidatingEventChecker;\n import org.hisp.dhis.importexport.ImportStrategy;\n import org.springframework.stereotype.Component;\n \n /**\n  * @author maikel arabori\n  */\n-@Component( \"eventsDeleteValidationFactory\" )\n-public class DeleteValidationFactory implements EventChecking\n+@Component\n+public class DeleteValidatingEventChecker extends ValidatingEventChecker\n {\n-    private final Map<ImportStrategy, List<Class<? extends Checker>>> eventDeleteValidatorMap;\n+    @Getter\n+    private final Predicate<ImportStrategy> supportedPredicate = ImportStrategyUtils::isDelete;\n \n-    public DeleteValidationFactory( final Map<ImportStrategy, List<Class<? extends Checker>>> eventDeleteValidatorMap )\n+    public DeleteValidatingEventChecker( final Map<ImportStrategy, List<Checker>> checkersByImportStrategy,\n+        EventImporterValidationRunner validationRunner )\n     {\n-        checkNotNull( eventDeleteValidatorMap );\n-        this.eventDeleteValidatorMap = eventDeleteValidatorMap;\n+        super( checkNotNull(\n+            checkNotNull( checkersByImportStrategy ).get( DELETE ) ), validationRunner );\n     }\n \n-    @Override\n-    public List<ImportSummary> check( final WorkContext ctx, final List<Event> events )\n-    {\n-        final ImportStrategy importStrategy = ctx.getImportOptions().getImportStrategy();\n-\n-        if ( isDelete( importStrategy ) )\n-        {\n-            return new ValidationRunner( ctx, events ).run( eventDeleteValidatorMap.get( DELETE ) );\n-        }\n-\n-        return emptyList();\n-    }\n }\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "message": "Merge commit", "committedDate": null}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "1e593837ab1c64884a8ac615c7cc8c3471a219ee", "committedDate": "2021-11-18 09:33:25 +0100", "message": "refactor: validators, checkers and processors in old importer are now spring beans [TECH-797] (#9218)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzODk3NA==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448038974", "body": "We already have this\r\n\r\n```\r\n    public static String username( User user )\r\n    {\r\n        return username( user, \"system-process\" );\r\n    }\r\n```\r\n\r\ncan it be used instead?", "bodyText": "We already have this\n    public static String username( User user )\n    {\n        return username( user, \"system-process\" );\n    }\n\ncan it be used instead?", "bodyHTML": "<p dir=\"auto\">We already have this</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"    public static String username( User user )\n    {\n        return username( user, &quot;system-process&quot; );\n    }\"><pre><code>    public static String username( User user )\n    {\n        return username( user, \"system-process\" );\n    }\n</code></pre></div>\n<p dir=\"auto\">can it be used instead?</p>", "author": "mortenoh", "createdAt": "2020-06-30T23:44:47Z", "path": "dhis-2/dhis-api/src/main/java/org/hisp/dhis/user/User.java", "diffHunk": "@@ -414,6 +415,11 @@ public boolean isManagedBy( User user )\n         return false;\n     }\n \n+    public static String getSafeUsername( String username )\n+    {\n+        return StringUtils.isEmpty( username ) ? \"[Unknown]\" : username;\n+    }\n+", "originalCommit": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null, "revised_code_in_main": null, "commits_in_main": [{"oid": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "message": "Merge commit", "committedDate": null}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "1b62051fafd8750a5a9a092bf1124f8b8e946ac1", "committedDate": "2021-01-12 12:44:27 +0100", "message": "fix: Upgrade usage of deprecated methods (#7085)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "08baba7e6e3e3418dae29a9e54b23c28b0ff646c", "committedDate": "2021-02-23 10:37:32 +0100", "message": "feat: validate user email during import [DHIS2-10407]  (#7413)"}, {"oid": "96160c298206a9b63339aac2d982de2d6f733f82", "committedDate": "2021-06-10 14:39:29 +0200", "message": "feat: Add user search by data view and TEI search org units [DHIS2-11281] (#8179)"}, {"oid": "f808bcf85cbac0c3c83eda7aa825e9d0ba3e89bb", "committedDate": "2021-06-29 16:42:13 +0200", "message": "feat: Org unit split API [DHIS2-11301] (#8333)"}, {"oid": "bf0f4455bcfb111f335ae8ed05b66d896bda8d31", "committedDate": "2021-09-09 13:06:27 +0200", "message": "feat: Add data view max org unit level to user restriction [DHIS2-11737] (#8660)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "8ccf9a288a67e5ee5349024fd3d281372c64c956", "committedDate": "2022-02-22 13:25:35 +0800", "message": "feat: Merge User/UserCredentials into one DB table (#9754)"}, {"oid": "b92519adfed0225d5e7d5fddedc04f568fc3cc05", "committedDate": "2022-03-01 01:23:22 +0800", "message": "fix: Fix broken user update (#9879)"}, {"oid": "755749b919fbbf025bf8bfe91f6f3da5fad6e8ed", "committedDate": "2022-03-01 18:03:04 +0700", "message": "chore: Refactor UserAuthorityGroup class name to UserRole (#9924)"}, {"oid": "55934f43e4e2feffa15411f828b18c4ff7bb0836", "committedDate": "2022-03-02 16:06:34 +0100", "message": "fix: Use correct user table in data summary query (#9949)"}, {"oid": "089123fc495162509a6129990e6fdf5f742a868b", "committedDate": "2022-04-20 14:49:24 +0200", "message": "fix: Hide 2FA secret and previousPassword exposure from API (#10540)"}, {"oid": "706c27017a5ffc21b4da9cd67981ba7b77a58f03", "committedDate": "2022-04-27 16:53:33 +0200", "message": "fix: Make 2FA enable/disable work (#10621)"}, {"oid": "d99da048b6427aa16b080ab0a0e25eda4a2a0f96", "committedDate": "2022-05-09 13:53:18 +0200", "message": "feat: Refactor getCurrentUser() to return DHIS2 User object 2 (#10600)"}, {"oid": "16ff9f07782d088d8e9e4d6c0dd7ed486dbca59e", "committedDate": "2022-05-25 09:34:37 +0200", "message": "fix: Revert the current user session detachment (#10868)"}, {"oid": "63846ea30b089db64192850ec134ff7f12f43e86", "committedDate": "2022-06-01 09:52:14 +0200", "message": "fix: Add back feature for invites where invitee chose username (#10902)"}, {"oid": "28a6aa052f221626e583a84bc18d80c0a8fa0927", "committedDate": "2022-06-17 12:36:19 +0200", "message": "fix: Use error codes for user account restore API [DHIS2-13426] (#11111)"}, {"oid": "5cedb55dd84494932bbeb5c277442346b8b63bcb", "committedDate": "2022-08-09 13:42:31 +0200", "message": "feat: make initial challenge mandatory when enabling 2FA (#11374)"}, {"oid": "b7f103f83d90807ac3d75e5e671cebfca3fef4a3", "committedDate": "2022-08-17 18:27:31 +0200", "message": "feat: save user settings as part of user payload [DHIS2-8601] (#11455)"}, {"oid": "6dc634804c28df95d5d1ac72e2cdf6fb2f8a00ec", "committedDate": "2022-09-01 01:10:49 +0700", "message": "fix: import user with legacy UserCredential (#11627)"}, {"oid": "2de48669b7d3505c84ffc4e96ba5cab8205720be", "committedDate": "2022-09-15 11:21:35 +0200", "message": "fix: User credentials backward compatibility (#11739)"}, {"oid": "52d6c7f8d06e7013e6fa00d5cfb928db6387a5e5", "committedDate": "2022-09-20 16:39:57 +0700", "message": "fix: User credentials patch backward compatibility (#11821)"}, {"oid": "f5177d779e7e6933397028452ec3530b6864bd66", "committedDate": "2023-01-10 14:12:32 +0800", "message": "feat: Enforce 2FA setup on next login [DHIS2-13333] (#11665)"}, {"oid": "670527223ed6b918ba71fbeae0da5f62b80fd066", "committedDate": "2023-04-05 11:27:43 +0200", "message": "chore: Avoid extends and implements to break over multiple lines (#13530)"}, {"oid": "a3457cc8b5552584caf3e0c4e917e1c83e6898da", "committedDate": "2023-04-16 00:14:50 +0800", "message": "fix: ensure that 2FA status is correct on UserCredentials DTO [DHIS2-14877] (#13555) (#13567)"}, {"oid": "5cd9082ceaecb4c73577e2855aeac279033491df", "committedDate": "2023-04-17 19:24:04 +0200", "message": "fix: backward comp for update analytics dimension restrictions [DHIS2-14870] (#13556)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzOTE4Nw==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448039187", "body": "author header", "bodyText": "author header", "bodyHTML": "<p dir=\"auto\">author header</p>", "author": "mortenoh", "createdAt": "2020-06-30T23:45:32Z", "path": "dhis-2/dhis-support/dhis-support-jdbc/src/main/java/org/hisp/dhis/jdbc/BatchPreparedStatementSetterWithKeyHolder.java", "diffHunk": "@@ -0,0 +1,79 @@\n+package org.hisp.dhis.jdbc;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import java.sql.PreparedStatement;\n+import java.sql.SQLException;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.springframework.jdbc.core.BatchPreparedStatementSetter;\n+import org.springframework.jdbc.support.KeyHolder;\n+\n+/**\n+ * A {@see BatchPreparedStatementSetter} with support for a {@see KeyHolder}\n+ * This class allows to execute a JDBC batch update operation using a\n+ * {@see JdbcTemplate} and retrieve the generated primary keys\n+ */\n+public abstract class BatchPreparedStatementSetterWithKeyHolder<T> implements BatchPreparedStatementSetter", "originalCommit": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQwNTkzOA==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448405938", "bodyText": "Fixed", "author": "luciano-fiandesio", "createdAt": "2020-07-01T14:32:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzOTE4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "7032498b0cbac9437a93d7deeb72862937c55a98", "changed_code": [{"header": "diff --git a/dhis-2/dhis-support/dhis-support-jdbc/src/main/java/org/hisp/dhis/jdbc/BatchPreparedStatementSetterWithKeyHolder.java b/dhis-2/dhis-support/dhis-support-jdbc/src/main/java/org/hisp/dhis/jdbc/BatchPreparedStatementSetterWithKeyHolder.java\nindex 2d48c5a06e..f221f987f4 100644\n--- a/dhis-2/dhis-support/dhis-support-jdbc/src/main/java/org/hisp/dhis/jdbc/BatchPreparedStatementSetterWithKeyHolder.java\n+++ b/dhis-2/dhis-support/dhis-support-jdbc/src/main/java/org/hisp/dhis/jdbc/BatchPreparedStatementSetterWithKeyHolder.java\n", "chunk": "@@ -40,6 +40,8 @@ import org.springframework.jdbc.support.KeyHolder;\n  * A {@see BatchPreparedStatementSetter} with support for a {@see KeyHolder}\n  * This class allows to execute a JDBC batch update operation using a\n  * {@see JdbcTemplate} and retrieve the generated primary keys\n+ *\n+ * @author Luciano Fiandesio\n  */\n public abstract class BatchPreparedStatementSetterWithKeyHolder<T> implements BatchPreparedStatementSetter\n {\n", "next_change": {"commit": "d360652a896bee650a842567e26cd1e62145cccb", "changed_code": [{"header": "diff --git a/dhis-2/dhis-support/dhis-support-jdbc/src/main/java/org/hisp/dhis/jdbc/BatchPreparedStatementSetterWithKeyHolder.java b/dhis-2/dhis-support/dhis-support-jdbc/src/main/java/org/hisp/dhis/jdbc/BatchPreparedStatementSetterWithKeyHolder.java\nindex f221f987f4..2d48c5a06e 100644\n--- a/dhis-2/dhis-support/dhis-support-jdbc/src/main/java/org/hisp/dhis/jdbc/BatchPreparedStatementSetterWithKeyHolder.java\n+++ b/dhis-2/dhis-support/dhis-support-jdbc/src/main/java/org/hisp/dhis/jdbc/BatchPreparedStatementSetterWithKeyHolder.java\n", "chunk": "@@ -40,8 +40,6 @@ import org.springframework.jdbc.support.KeyHolder;\n  * A {@see BatchPreparedStatementSetter} with support for a {@see KeyHolder}\n  * This class allows to execute a JDBC batch update operation using a\n  * {@see JdbcTemplate} and retrieve the generated primary keys\n- *\n- * @author Luciano Fiandesio\n  */\n public abstract class BatchPreparedStatementSetterWithKeyHolder<T> implements BatchPreparedStatementSetter\n {\n", "next_change": {"commit": "c9cbe9cf8b22a49324c53b68eba31b9c63684df4", "changed_code": [{"header": "diff --git a/dhis-2/dhis-support/dhis-support-jdbc/src/main/java/org/hisp/dhis/jdbc/BatchPreparedStatementSetterWithKeyHolder.java b/dhis-2/dhis-support/dhis-support-jdbc/src/main/java/org/hisp/dhis/jdbc/BatchPreparedStatementSetterWithKeyHolder.java\nindex 2d48c5a06e..f221f987f4 100644\n--- a/dhis-2/dhis-support/dhis-support-jdbc/src/main/java/org/hisp/dhis/jdbc/BatchPreparedStatementSetterWithKeyHolder.java\n+++ b/dhis-2/dhis-support/dhis-support-jdbc/src/main/java/org/hisp/dhis/jdbc/BatchPreparedStatementSetterWithKeyHolder.java\n", "chunk": "@@ -40,6 +40,8 @@ import org.springframework.jdbc.support.KeyHolder;\n  * A {@see BatchPreparedStatementSetter} with support for a {@see KeyHolder}\n  * This class allows to execute a JDBC batch update operation using a\n  * {@see JdbcTemplate} and retrieve the generated primary keys\n+ *\n+ * @author Luciano Fiandesio\n  */\n public abstract class BatchPreparedStatementSetterWithKeyHolder<T> implements BatchPreparedStatementSetter\n {\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "changed_code": [{"header": "diff --git a/dhis-2/dhis-support/dhis-support-jdbc/src/main/java/org/hisp/dhis/jdbc/BatchPreparedStatementSetterWithKeyHolder.java b/dhis-2/dhis-support/dhis-support-jdbc/src/main/java/org/hisp/dhis/jdbc/BatchPreparedStatementSetterWithKeyHolder.java\nindex 2d48c5a06e..f221f987f4 100644\n--- a/dhis-2/dhis-support/dhis-support-jdbc/src/main/java/org/hisp/dhis/jdbc/BatchPreparedStatementSetterWithKeyHolder.java\n+++ b/dhis-2/dhis-support/dhis-support-jdbc/src/main/java/org/hisp/dhis/jdbc/BatchPreparedStatementSetterWithKeyHolder.java\n", "chunk": "@@ -40,6 +40,8 @@ import org.springframework.jdbc.support.KeyHolder;\n  * A {@see BatchPreparedStatementSetter} with support for a {@see KeyHolder}\n  * This class allows to execute a JDBC batch update operation using a\n  * {@see JdbcTemplate} and retrieve the generated primary keys\n+ *\n+ * @author Luciano Fiandesio\n  */\n public abstract class BatchPreparedStatementSetterWithKeyHolder<T> implements BatchPreparedStatementSetter\n {\n", "next_change": null}]}, "commits_in_main": [{"oid": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "message": "Merge commit", "committedDate": null}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzOTMyOA==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448039328", "body": "package before license", "bodyText": "package before license", "bodyHTML": "<p dir=\"auto\">package before license</p>", "author": "mortenoh", "createdAt": "2020-06-30T23:45:58Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/ProgramStageInstanceBasicCheck.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer.update.validation;", "originalCommit": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQwNjIxNQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448406215", "bodyText": "Fixed", "author": "luciano-fiandesio", "createdAt": "2020-07-01T14:33:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzOTMyOA=="}], "type": "inlineReview", "revised_code": {"commit": "7032498b0cbac9437a93d7deeb72862937c55a98", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/ProgramStageInstanceBasicCheck.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/ProgramStageInstanceBasicCheck.java\nindex 2eedce3462..1976928f92 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/ProgramStageInstanceBasicCheck.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/ProgramStageInstanceBasicCheck.java\n", "chunk": "@@ -26,8 +28,6 @@\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n \n-package org.hisp.dhis.dxf2.events.importer.update.validation;\n-\n import static org.hisp.dhis.dxf2.importsummary.ImportSummary.error;\n import static org.hisp.dhis.dxf2.importsummary.ImportSummary.success;\n \n", "next_change": {"commit": "d0687a6c7c9e1c4dd64c4dc669bb80ae6e8c8c8b", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/ProgramStageInstanceBasicCheck.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/ProgramStageInstanceBasicCheck.java\nindex 1976928f92..c349630850 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/ProgramStageInstanceBasicCheck.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/ProgramStageInstanceBasicCheck.java\n", "chunk": "@@ -31,9 +31,9 @@ package org.hisp.dhis.dxf2.events.importer.update.validation;\n import static org.hisp.dhis.dxf2.importsummary.ImportSummary.error;\n import static org.hisp.dhis.dxf2.importsummary.ImportSummary.success;\n \n-import org.hisp.dhis.dxf2.events.importer.shared.ImmutableEvent;\n import org.hisp.dhis.dxf2.events.importer.Checker;\n import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n+import org.hisp.dhis.dxf2.events.importer.shared.ImmutableEvent;\n import org.hisp.dhis.dxf2.importsummary.ImportConflict;\n import org.hisp.dhis.dxf2.importsummary.ImportSummary;\n import org.hisp.dhis.program.ProgramStageInstance;\n", "next_change": {"commit": "d360652a896bee650a842567e26cd1e62145cccb", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/ProgramStageInstanceBasicCheck.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/ProgramStageInstanceBasicCheck.java\nindex c349630850..d60eeb3786 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/ProgramStageInstanceBasicCheck.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/ProgramStageInstanceBasicCheck.java\n", "chunk": "@@ -28,20 +26,21 @@ package org.hisp.dhis.dxf2.events.importer.update.validation;\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n \n+package org.hisp.dhis.dxf2.events.importer.update.validation;\n+\n import static org.hisp.dhis.dxf2.importsummary.ImportSummary.error;\n import static org.hisp.dhis.dxf2.importsummary.ImportSummary.success;\n \n+import org.hisp.dhis.dxf2.events.importer.shared.ImmutableEvent;\n import org.hisp.dhis.dxf2.events.importer.Checker;\n import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n-import org.hisp.dhis.dxf2.events.importer.shared.ImmutableEvent;\n import org.hisp.dhis.dxf2.importsummary.ImportConflict;\n import org.hisp.dhis.dxf2.importsummary.ImportSummary;\n import org.hisp.dhis.program.ProgramStageInstance;\n \n-/**\n- * @author maikel arabori\n- */\n-public class ProgramStageInstanceBasicCheck implements Checker\n+public class ProgramStageInstanceBasicCheck\n+    implements\n+    Checker\n {\n     @Override\n     public ImportSummary check( final ImmutableEvent event, final WorkContext ctx )\n", "next_change": {"commit": "2020b1193dc477750358ee3c14ab28a3c786a517", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/ProgramStageInstanceBasicCheck.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/ProgramStageInstanceBasicCheck.java\nindex d60eeb3786..2eedce3462 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/ProgramStageInstanceBasicCheck.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/ProgramStageInstanceBasicCheck.java\n", "chunk": "@@ -49,15 +49,13 @@ public class ProgramStageInstanceBasicCheck\n \n         if ( programStageInstance == null )\n         {\n-            final ImportSummary error = error( \"ID \" + event.getEvent() + \" doesn't point to valid event\",\n+            final ImportSummary error = error( \"Event ID \" + event.getEvent() + \" doesn't point to valid event\",\n                 event.getEvent() );\n             error.getConflicts().add( new ImportConflict( \"Invalid Event ID\", event.getEvent() ) );\n \n             return error;\n         }\n-\n-        if ( programStageInstance != null\n-            && (programStageInstance.isDeleted() || ctx.getImportOptions().getImportStrategy().isCreate()) )\n+        else if ( programStageInstance.isDeleted() || ctx.getImportOptions().getImportStrategy().isCreate() )\n         {\n             return error(\n                 \"Event ID \" + event.getEvent() + \" was already used and/or deleted. This event can not be modified.\" )\n", "next_change": null}]}}]}}]}}]}, "revised_code_in_main": {"commit": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/ProgramStageInstanceBasicCheck.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/ProgramStageInstanceBasicCheck.java\nindex 2eedce3462..c349630850 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/ProgramStageInstanceBasicCheck.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/ProgramStageInstanceBasicCheck.java\n", "chunk": "@@ -26,21 +28,20 @@\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n \n-package org.hisp.dhis.dxf2.events.importer.update.validation;\n-\n import static org.hisp.dhis.dxf2.importsummary.ImportSummary.error;\n import static org.hisp.dhis.dxf2.importsummary.ImportSummary.success;\n \n-import org.hisp.dhis.dxf2.events.importer.shared.ImmutableEvent;\n import org.hisp.dhis.dxf2.events.importer.Checker;\n import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n+import org.hisp.dhis.dxf2.events.importer.shared.ImmutableEvent;\n import org.hisp.dhis.dxf2.importsummary.ImportConflict;\n import org.hisp.dhis.dxf2.importsummary.ImportSummary;\n import org.hisp.dhis.program.ProgramStageInstance;\n \n-public class ProgramStageInstanceBasicCheck\n-    implements\n-    Checker\n+/**\n+ * @author maikel arabori\n+ */\n+public class ProgramStageInstanceBasicCheck implements Checker\n {\n     @Override\n     public ImportSummary check( final ImmutableEvent event, final WorkContext ctx )\n", "next_change": {"commit": "1e593837ab1c64884a8ac615c7cc8c3471a219ee", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/ProgramStageInstanceBasicCheck.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/ProgramStageInstanceBasicCheck.java\nindex c349630850..d311d238ef 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/ProgramStageInstanceBasicCheck.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/ProgramStageInstanceBasicCheck.java\n", "chunk": "@@ -34,13 +33,14 @@ import static org.hisp.dhis.dxf2.importsummary.ImportSummary.success;\n import org.hisp.dhis.dxf2.events.importer.Checker;\n import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n import org.hisp.dhis.dxf2.events.importer.shared.ImmutableEvent;\n-import org.hisp.dhis.dxf2.importsummary.ImportConflict;\n import org.hisp.dhis.dxf2.importsummary.ImportSummary;\n import org.hisp.dhis.program.ProgramStageInstance;\n+import org.springframework.stereotype.Component;\n \n /**\n  * @author maikel arabori\n  */\n+@Component\n public class ProgramStageInstanceBasicCheck implements Checker\n {\n     @Override\n", "next_change": {"commit": "959c60d4f597187d0df2160fbbb675e5c4196e5c", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/ProgramStageInstanceBasicCheck.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/ProgramStageInstanceBasicCheck.java\nindex d311d238ef..8f122c37d0 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/ProgramStageInstanceBasicCheck.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/ProgramStageInstanceBasicCheck.java\n", "chunk": "@@ -46,7 +46,7 @@ public class ProgramStageInstanceBasicCheck implements Checker\n     @Override\n     public ImportSummary check( final ImmutableEvent event, final WorkContext ctx )\n     {\n-        final ProgramStageInstance programStageInstance = ctx.getProgramStageInstanceMap().get( event.getEvent() );\n+        final Event programStageInstance = ctx.getProgramStageInstanceMap().get( event.getEvent() );\n \n         if ( programStageInstance == null )\n         {\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "message": "Merge commit", "committedDate": null}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "6f3422ff9a182b183a9e3a2f61cf457bb23cb092", "committedDate": "2021-06-10 13:13:51 +0200", "message": "chore: encapsulates import conflicts [DHIS2-4414]  (#8164)"}, {"oid": "1e593837ab1c64884a8ac615c7cc8c3471a219ee", "committedDate": "2021-11-18 09:33:25 +0100", "message": "refactor: validators, checkers and processors in old importer are now spring beans [TECH-797] (#9218)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "959c60d4f597187d0df2160fbbb675e5c4196e5c", "committedDate": "2023-04-27 16:46:18 +0200", "message": "chore: rename ProgramStageInstance to Event (#13731)"}, {"oid": "02336c9611c0dd85d5038223bddbfdebc0aae526", "committedDate": "2023-05-11 19:34:26 +0200", "message": "chore: move old tracker dxf2 code into deprecated package (#13901)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzOTM1MQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448039351", "body": "author header", "bodyText": "author header", "bodyHTML": "<p dir=\"auto\">author header</p>", "author": "mortenoh", "createdAt": "2020-06-30T23:46:04Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/ProgramStageInstanceBasicCheck.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer.update.validation;\n+\n+import static org.hisp.dhis.dxf2.importsummary.ImportSummary.error;\n+import static org.hisp.dhis.dxf2.importsummary.ImportSummary.success;\n+\n+import org.hisp.dhis.dxf2.events.importer.shared.ImmutableEvent;\n+import org.hisp.dhis.dxf2.events.importer.Checker;\n+import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n+import org.hisp.dhis.dxf2.importsummary.ImportConflict;\n+import org.hisp.dhis.dxf2.importsummary.ImportSummary;\n+import org.hisp.dhis.program.ProgramStageInstance;\n+\n+public class ProgramStageInstanceBasicCheck", "originalCommit": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQwNjM4NA==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448406384", "bodyText": "Fixed", "author": "luciano-fiandesio", "createdAt": "2020-07-01T14:33:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzOTM1MQ=="}], "type": "inlineReview", "revised_code": {"commit": "7032498b0cbac9437a93d7deeb72862937c55a98", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/ProgramStageInstanceBasicCheck.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/ProgramStageInstanceBasicCheck.java\nindex 2eedce3462..1976928f92 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/ProgramStageInstanceBasicCheck.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/ProgramStageInstanceBasicCheck.java\n", "chunk": "@@ -38,9 +38,10 @@ import org.hisp.dhis.dxf2.importsummary.ImportConflict;\n import org.hisp.dhis.dxf2.importsummary.ImportSummary;\n import org.hisp.dhis.program.ProgramStageInstance;\n \n-public class ProgramStageInstanceBasicCheck\n-    implements\n-    Checker\n+/**\n+ * @author maikel arabori\n+ */\n+public class ProgramStageInstanceBasicCheck implements Checker\n {\n     @Override\n     public ImportSummary check( final ImmutableEvent event, final WorkContext ctx )\n", "next_change": {"commit": "d360652a896bee650a842567e26cd1e62145cccb", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/ProgramStageInstanceBasicCheck.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/ProgramStageInstanceBasicCheck.java\nindex 1976928f92..d60eeb3786 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/ProgramStageInstanceBasicCheck.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/ProgramStageInstanceBasicCheck.java\n", "chunk": "@@ -38,10 +38,9 @@ import org.hisp.dhis.dxf2.importsummary.ImportConflict;\n import org.hisp.dhis.dxf2.importsummary.ImportSummary;\n import org.hisp.dhis.program.ProgramStageInstance;\n \n-/**\n- * @author maikel arabori\n- */\n-public class ProgramStageInstanceBasicCheck implements Checker\n+public class ProgramStageInstanceBasicCheck\n+    implements\n+    Checker\n {\n     @Override\n     public ImportSummary check( final ImmutableEvent event, final WorkContext ctx )\n", "next_change": {"commit": "2020b1193dc477750358ee3c14ab28a3c786a517", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/ProgramStageInstanceBasicCheck.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/ProgramStageInstanceBasicCheck.java\nindex d60eeb3786..2eedce3462 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/ProgramStageInstanceBasicCheck.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/ProgramStageInstanceBasicCheck.java\n", "chunk": "@@ -49,15 +49,13 @@ public class ProgramStageInstanceBasicCheck\n \n         if ( programStageInstance == null )\n         {\n-            final ImportSummary error = error( \"ID \" + event.getEvent() + \" doesn't point to valid event\",\n+            final ImportSummary error = error( \"Event ID \" + event.getEvent() + \" doesn't point to valid event\",\n                 event.getEvent() );\n             error.getConflicts().add( new ImportConflict( \"Invalid Event ID\", event.getEvent() ) );\n \n             return error;\n         }\n-\n-        if ( programStageInstance != null\n-            && (programStageInstance.isDeleted() || ctx.getImportOptions().getImportStrategy().isCreate()) )\n+        else if ( programStageInstance.isDeleted() || ctx.getImportOptions().getImportStrategy().isCreate() )\n         {\n             return error(\n                 \"Event ID \" + event.getEvent() + \" was already used and/or deleted. This event can not be modified.\" )\n", "next_change": null}]}}, {"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/ProgramStageInstanceBasicCheck.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/ProgramStageInstanceBasicCheck.java\nindex 1976928f92..d60eeb3786 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/ProgramStageInstanceBasicCheck.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/ProgramStageInstanceBasicCheck.java\n", "chunk": "@@ -50,13 +49,15 @@ public class ProgramStageInstanceBasicCheck implements Checker\n \n         if ( programStageInstance == null )\n         {\n-            final ImportSummary error = error( \"Event ID \" + event.getEvent() + \" doesn't point to valid event\",\n+            final ImportSummary error = error( \"ID \" + event.getEvent() + \" doesn't point to valid event\",\n                 event.getEvent() );\n             error.getConflicts().add( new ImportConflict( \"Invalid Event ID\", event.getEvent() ) );\n \n             return error;\n         }\n-        else if ( programStageInstance.isDeleted() || ctx.getImportOptions().getImportStrategy().isCreate() )\n+\n+        if ( programStageInstance != null\n+            && (programStageInstance.isDeleted() || ctx.getImportOptions().getImportStrategy().isCreate()) )\n         {\n             return error(\n                 \"Event ID \" + event.getEvent() + \" was already used and/or deleted. This event can not be modified.\" )\n", "next_change": {"commit": "2020b1193dc477750358ee3c14ab28a3c786a517", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/ProgramStageInstanceBasicCheck.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/ProgramStageInstanceBasicCheck.java\nindex d60eeb3786..2eedce3462 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/ProgramStageInstanceBasicCheck.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/ProgramStageInstanceBasicCheck.java\n", "chunk": "@@ -49,15 +49,13 @@ public class ProgramStageInstanceBasicCheck\n \n         if ( programStageInstance == null )\n         {\n-            final ImportSummary error = error( \"ID \" + event.getEvent() + \" doesn't point to valid event\",\n+            final ImportSummary error = error( \"Event ID \" + event.getEvent() + \" doesn't point to valid event\",\n                 event.getEvent() );\n             error.getConflicts().add( new ImportConflict( \"Invalid Event ID\", event.getEvent() ) );\n \n             return error;\n         }\n-\n-        if ( programStageInstance != null\n-            && (programStageInstance.isDeleted() || ctx.getImportOptions().getImportStrategy().isCreate()) )\n+        else if ( programStageInstance.isDeleted() || ctx.getImportOptions().getImportStrategy().isCreate() )\n         {\n             return error(\n                 \"Event ID \" + event.getEvent() + \" was already used and/or deleted. This event can not be modified.\" )\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/ProgramStageInstanceBasicCheck.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/ProgramStageInstanceBasicCheck.java\nindex 2eedce3462..c349630850 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/ProgramStageInstanceBasicCheck.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/ProgramStageInstanceBasicCheck.java\n", "chunk": "@@ -26,21 +28,20 @@\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n \n-package org.hisp.dhis.dxf2.events.importer.update.validation;\n-\n import static org.hisp.dhis.dxf2.importsummary.ImportSummary.error;\n import static org.hisp.dhis.dxf2.importsummary.ImportSummary.success;\n \n-import org.hisp.dhis.dxf2.events.importer.shared.ImmutableEvent;\n import org.hisp.dhis.dxf2.events.importer.Checker;\n import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n+import org.hisp.dhis.dxf2.events.importer.shared.ImmutableEvent;\n import org.hisp.dhis.dxf2.importsummary.ImportConflict;\n import org.hisp.dhis.dxf2.importsummary.ImportSummary;\n import org.hisp.dhis.program.ProgramStageInstance;\n \n-public class ProgramStageInstanceBasicCheck\n-    implements\n-    Checker\n+/**\n+ * @author maikel arabori\n+ */\n+public class ProgramStageInstanceBasicCheck implements Checker\n {\n     @Override\n     public ImportSummary check( final ImmutableEvent event, final WorkContext ctx )\n", "next_change": {"commit": "1e593837ab1c64884a8ac615c7cc8c3471a219ee", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/ProgramStageInstanceBasicCheck.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/ProgramStageInstanceBasicCheck.java\nindex c349630850..d311d238ef 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/ProgramStageInstanceBasicCheck.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/ProgramStageInstanceBasicCheck.java\n", "chunk": "@@ -34,13 +33,14 @@ import static org.hisp.dhis.dxf2.importsummary.ImportSummary.success;\n import org.hisp.dhis.dxf2.events.importer.Checker;\n import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n import org.hisp.dhis.dxf2.events.importer.shared.ImmutableEvent;\n-import org.hisp.dhis.dxf2.importsummary.ImportConflict;\n import org.hisp.dhis.dxf2.importsummary.ImportSummary;\n import org.hisp.dhis.program.ProgramStageInstance;\n+import org.springframework.stereotype.Component;\n \n /**\n  * @author maikel arabori\n  */\n+@Component\n public class ProgramStageInstanceBasicCheck implements Checker\n {\n     @Override\n", "next_change": {"commit": "959c60d4f597187d0df2160fbbb675e5c4196e5c", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/ProgramStageInstanceBasicCheck.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/ProgramStageInstanceBasicCheck.java\nindex d311d238ef..8f122c37d0 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/ProgramStageInstanceBasicCheck.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/ProgramStageInstanceBasicCheck.java\n", "chunk": "@@ -46,7 +46,7 @@ public class ProgramStageInstanceBasicCheck implements Checker\n     @Override\n     public ImportSummary check( final ImmutableEvent event, final WorkContext ctx )\n     {\n-        final ProgramStageInstance programStageInstance = ctx.getProgramStageInstanceMap().get( event.getEvent() );\n+        final Event programStageInstance = ctx.getProgramStageInstanceMap().get( event.getEvent() );\n \n         if ( programStageInstance == null )\n         {\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "message": "Merge commit", "committedDate": null}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "6f3422ff9a182b183a9e3a2f61cf457bb23cb092", "committedDate": "2021-06-10 13:13:51 +0200", "message": "chore: encapsulates import conflicts [DHIS2-4414]  (#8164)"}, {"oid": "1e593837ab1c64884a8ac615c7cc8c3471a219ee", "committedDate": "2021-11-18 09:33:25 +0100", "message": "refactor: validators, checkers and processors in old importer are now spring beans [TECH-797] (#9218)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "959c60d4f597187d0df2160fbbb675e5c4196e5c", "committedDate": "2023-04-27 16:46:18 +0200", "message": "chore: rename ProgramStageInstance to Event (#13731)"}, {"oid": "02336c9611c0dd85d5038223bddbfdebc0aae526", "committedDate": "2023-05-11 19:34:26 +0200", "message": "chore: move old tracker dxf2 code into deprecated package (#13901)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzOTY3OQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448039679", "body": "System.out.println?", "bodyText": "System.out.println?", "bodyHTML": "<p dir=\"auto\">System.out.println?</p>", "author": "mortenoh", "createdAt": "2020-06-30T23:47:11Z", "path": "dhis-2/dhis-e2e-test/src/test/java/org/hisp/dhis/tracker/events/EventImportTests.java", "diffHunk": "@@ -114,11 +119,18 @@ public void eventsImportNewEventsFromFile( String fileName, String contentType )\n \n         createdEvents.addAll( importSummaries\n             .stream()\n-            .map( p -> {\n-                return p.getReference();\n-            } )\n+            .map( ImportSummary::getReference )\n             .collect( toList() ) );\n \n+        for (ImportSummary is : importSummaries) {\n+\n+            String status = is.getStatus();\n+            if (status.equals(\"ERROR\")) {\n+\n+                System.out.println(is.getDescription());", "originalCommit": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODgxODE4Ng==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448818186", "bodyText": "Fixed", "author": "luciano-fiandesio", "createdAt": "2020-07-02T07:58:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzOTY3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "7032498b0cbac9437a93d7deeb72862937c55a98", "changed_code": [{"header": "diff --git a/dhis-2/dhis-e2e-test/src/test/java/org/hisp/dhis/tracker/events/EventImportTests.java b/dhis-2/dhis-e2e-test/src/test/java/org/hisp/dhis/tracker/events/EventImportTests.java\nindex 9be4c6e030..1f7fb8ee79 100644\n--- a/dhis-2/dhis-e2e-test/src/test/java/org/hisp/dhis/tracker/events/EventImportTests.java\n+++ b/dhis-2/dhis-e2e-test/src/test/java/org/hisp/dhis/tracker/events/EventImportTests.java\n", "chunk": "@@ -122,15 +122,6 @@ public class EventImportTests\n             .map( ImportSummary::getReference )\n             .collect( toList() ) );\n \n-        for (ImportSummary is : importSummaries) {\n-\n-            String status = is.getStatus();\n-            if (status.equals(\"ERROR\")) {\n-\n-                System.out.println(is.getDescription());\n-            }\n-        }\n-\n         assertThat( importSummaries, Matchers.everyItem( hasProperty( \"status\", Matchers.equalTo( \"SUCCESS\" ) ) ) );\n     }\n \n", "next_change": {"commit": "d360652a896bee650a842567e26cd1e62145cccb", "changed_code": [{"header": "diff --git a/dhis-2/dhis-e2e-test/src/test/java/org/hisp/dhis/tracker/events/EventImportTests.java b/dhis-2/dhis-e2e-test/src/test/java/org/hisp/dhis/tracker/events/EventImportTests.java\nindex 1f7fb8ee79..9be4c6e030 100644\n--- a/dhis-2/dhis-e2e-test/src/test/java/org/hisp/dhis/tracker/events/EventImportTests.java\n+++ b/dhis-2/dhis-e2e-test/src/test/java/org/hisp/dhis/tracker/events/EventImportTests.java\n", "chunk": "@@ -122,6 +122,15 @@ public class EventImportTests\n             .map( ImportSummary::getReference )\n             .collect( toList() ) );\n \n+        for (ImportSummary is : importSummaries) {\n+\n+            String status = is.getStatus();\n+            if (status.equals(\"ERROR\")) {\n+\n+                System.out.println(is.getDescription());\n+            }\n+        }\n+\n         assertThat( importSummaries, Matchers.everyItem( hasProperty( \"status\", Matchers.equalTo( \"SUCCESS\" ) ) ) );\n     }\n \n", "next_change": {"commit": "2f23e3b49f087c42aaec77bfd3279ff45f813977", "changed_code": [{"header": "diff --git a/dhis-2/dhis-e2e-test/src/test/java/org/hisp/dhis/tracker/events/EventImportTests.java b/dhis-2/dhis-e2e-test/src/test/java/org/hisp/dhis/tracker/events/EventImportTests.java\nindex 9be4c6e030..1f7fb8ee79 100644\n--- a/dhis-2/dhis-e2e-test/src/test/java/org/hisp/dhis/tracker/events/EventImportTests.java\n+++ b/dhis-2/dhis-e2e-test/src/test/java/org/hisp/dhis/tracker/events/EventImportTests.java\n", "chunk": "@@ -122,15 +122,6 @@ public class EventImportTests\n             .map( ImportSummary::getReference )\n             .collect( toList() ) );\n \n-        for (ImportSummary is : importSummaries) {\n-\n-            String status = is.getStatus();\n-            if (status.equals(\"ERROR\")) {\n-\n-                System.out.println(is.getDescription());\n-            }\n-        }\n-\n         assertThat( importSummaries, Matchers.everyItem( hasProperty( \"status\", Matchers.equalTo( \"SUCCESS\" ) ) ) );\n     }\n \n", "next_change": {"commit": "17e4effbd84888b9241be64afaf8bf2300188dab", "changed_code": [{"header": "diff --git a/dhis-2/dhis-e2e-test/src/test/java/org/hisp/dhis/tracker/events/EventImportTests.java b/dhis-2/dhis-e2e-test/src/test/java/org/hisp/dhis/tracker/events/EventImportTests.java\nindex 1f7fb8ee79..9be4c6e030 100644\n--- a/dhis-2/dhis-e2e-test/src/test/java/org/hisp/dhis/tracker/events/EventImportTests.java\n+++ b/dhis-2/dhis-e2e-test/src/test/java/org/hisp/dhis/tracker/events/EventImportTests.java\n", "chunk": "@@ -122,6 +122,15 @@ public class EventImportTests\n             .map( ImportSummary::getReference )\n             .collect( toList() ) );\n \n+        for (ImportSummary is : importSummaries) {\n+\n+            String status = is.getStatus();\n+            if (status.equals(\"ERROR\")) {\n+\n+                System.out.println(is.getDescription());\n+            }\n+        }\n+\n         assertThat( importSummaries, Matchers.everyItem( hasProperty( \"status\", Matchers.equalTo( \"SUCCESS\" ) ) ) );\n     }\n \n", "next_change": {"commit": "53fe69844f9b0fa1dc808e576d47cde1750a2323", "changed_code": [{"header": "diff --git a/dhis-2/dhis-e2e-test/src/test/java/org/hisp/dhis/tracker/events/EventImportTests.java b/dhis-2/dhis-e2e-test/src/test/java/org/hisp/dhis/tracker/events/EventImportTests.java\nindex 9be4c6e030..1f7fb8ee79 100644\n--- a/dhis-2/dhis-e2e-test/src/test/java/org/hisp/dhis/tracker/events/EventImportTests.java\n+++ b/dhis-2/dhis-e2e-test/src/test/java/org/hisp/dhis/tracker/events/EventImportTests.java\n", "chunk": "@@ -122,15 +122,6 @@ public class EventImportTests\n             .map( ImportSummary::getReference )\n             .collect( toList() ) );\n \n-        for (ImportSummary is : importSummaries) {\n-\n-            String status = is.getStatus();\n-            if (status.equals(\"ERROR\")) {\n-\n-                System.out.println(is.getDescription());\n-            }\n-        }\n-\n         assertThat( importSummaries, Matchers.everyItem( hasProperty( \"status\", Matchers.equalTo( \"SUCCESS\" ) ) ) );\n     }\n \n", "next_change": null}]}}]}}]}}]}}]}, "revised_code_in_main": {"commit": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "changed_code": [{"header": "diff --git a/dhis-2/dhis-e2e-test/src/test/java/org/hisp/dhis/tracker/events/EventImportTests.java b/dhis-2/dhis-e2e-test/src/test/java/org/hisp/dhis/tracker/events/EventImportTests.java\nindex 9be4c6e030..1f7fb8ee79 100644\n--- a/dhis-2/dhis-e2e-test/src/test/java/org/hisp/dhis/tracker/events/EventImportTests.java\n+++ b/dhis-2/dhis-e2e-test/src/test/java/org/hisp/dhis/tracker/events/EventImportTests.java\n", "chunk": "@@ -122,15 +122,6 @@ public class EventImportTests\n             .map( ImportSummary::getReference )\n             .collect( toList() ) );\n \n-        for (ImportSummary is : importSummaries) {\n-\n-            String status = is.getStatus();\n-            if (status.equals(\"ERROR\")) {\n-\n-                System.out.println(is.getDescription());\n-            }\n-        }\n-\n         assertThat( importSummaries, Matchers.everyItem( hasProperty( \"status\", Matchers.equalTo( \"SUCCESS\" ) ) ) );\n     }\n \n", "next_change": null}]}, "commits_in_main": [{"oid": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "message": "Merge commit", "committedDate": null}, {"oid": "0258e7de0e9a335e58c2fc09df4b22c74bc79271", "committedDate": "2020-08-31 07:48:34 +0200", "message": "chore: add back original struts config (#6022)"}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "d45301f99d017c365028ab0a19d12b83b2d10f56", "committedDate": "2021-08-19 10:56:35 +0200", "message": "feat: Adds speedy-spotless plugin, updates code format on all e2e files (#8549)"}, {"oid": "8345bb0e86fc277bf9cbdb1e81cf6ebc3618ce4a", "committedDate": "2021-10-22 10:56:42 +0200", "message": "style: duplicate headers removed [TECH-780] (#9109)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "b24e6bd8581a534e24bbfdba4df545af57536b1b", "committedDate": "2022-04-26 13:29:56 +0200", "message": "test: report portal integration (#10557)"}, {"oid": "8b540ae5e4682e5c9fa529abf17b8e52642165ab", "committedDate": "2022-05-02 15:06:47 +0200", "message": "chore: Format e2e test module (#10661)"}, {"oid": "472afe65040ea0addf63d0d328dc2e6b0a44b0ae", "committedDate": "2023-05-11 12:35:26 +0200", "message": "test: separate old and new tracker e2e tests TECH-1548 (#13869)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzOTc5MQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448039791", "body": "newline", "bodyText": "newline", "bodyHTML": "<p dir=\"auto\">newline</p>", "author": "mortenoh", "createdAt": "2020-06-30T23:47:35Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/preprocess/EventStoredByPreProcessor.java", "diffHunk": "@@ -0,0 +1,57 @@\n+package org.hisp.dhis.dxf2.events.importer.shared.preprocess;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import java.util.Set;\n+\n+import org.hisp.dhis.dxf2.events.event.DataValue;\n+import org.hisp.dhis.dxf2.events.event.Event;\n+import org.hisp.dhis.dxf2.events.event.EventUtils;\n+import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n+import org.hisp.dhis.dxf2.events.importer.Processor;\n+\n+/**\n+ * Sets the \"storedBy\" property on the event and on the event's Data Values\n+ * @author Luciano Fiandesio\n+ */\n+public class EventStoredByPreProcessor implements Processor\n+{\n+    @Override\n+    public void process( Event event, WorkContext ctx )\n+    {\n+        String storedBy = EventUtils.getValidUsername( event.getStoredBy(), ctx.getImportOptions() );\n+        event.setStoredBy( storedBy );", "originalCommit": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0afc06f20ca0da37d98942b17c007f28af21925a", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/preprocess/EventStoredByPreProcessor.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/preprocess/EventStoredByPreProcessor.java\nindex c829adc0fa..d7e715be65 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/preprocess/EventStoredByPreProcessor.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/preprocess/EventStoredByPreProcessor.java\n", "chunk": "@@ -45,8 +46,9 @@ public class EventStoredByPreProcessor implements Processor\n     @Override\n     public void process( Event event, WorkContext ctx )\n     {\n-        String storedBy = EventUtils.getValidUsername( event.getStoredBy(), ctx.getImportOptions() );\n+        final String storedBy = EventUtils.getValidUsername( event.getStoredBy(), ctx.getImportOptions() );\n         event.setStoredBy( storedBy );\n+\n         Set<DataValue> dataValues = event.getDataValues();\n \n         for ( DataValue dataValue : dataValues )\n", "next_change": null}]}, "revised_code_in_main": {"commit": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/preprocess/EventStoredByPreProcessor.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/preprocess/EventStoredByPreProcessor.java\nindex c829adc0fa..d7e715be65 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/preprocess/EventStoredByPreProcessor.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/preprocess/EventStoredByPreProcessor.java\n", "chunk": "@@ -45,8 +46,9 @@ public class EventStoredByPreProcessor implements Processor\n     @Override\n     public void process( Event event, WorkContext ctx )\n     {\n-        String storedBy = EventUtils.getValidUsername( event.getStoredBy(), ctx.getImportOptions() );\n+        final String storedBy = EventUtils.getValidUsername( event.getStoredBy(), ctx.getImportOptions() );\n         event.setStoredBy( storedBy );\n+\n         Set<DataValue> dataValues = event.getDataValues();\n \n         for ( DataValue dataValue : dataValues )\n", "next_change": null}]}, "commits_in_main": [{"oid": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "message": "Merge commit", "committedDate": null}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "1e593837ab1c64884a8ac615c7cc8c3471a219ee", "committedDate": "2021-11-18 09:33:25 +0100", "message": "refactor: validators, checkers and processors in old importer are now spring beans [TECH-797] (#9218)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "02336c9611c0dd85d5038223bddbfdebc0aae526", "committedDate": "2023-05-11 19:34:26 +0200", "message": "chore: move old tracker dxf2 code into deprecated package (#13901)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA0MDAwNQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448040005", "body": "package before license", "bodyText": "package before license", "bodyHTML": "<p dir=\"auto\">package before license</p>", "author": "mortenoh", "createdAt": "2020-06-30T23:48:24Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramInstanceRepeatableStageCheck.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer.insert.validation;", "originalCommit": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQwNzM4Mg==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448407382", "bodyText": "Fixed", "author": "luciano-fiandesio", "createdAt": "2020-07-01T14:34:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA0MDAwNQ=="}], "type": "inlineReview", "revised_code": {"commit": "7032498b0cbac9437a93d7deeb72862937c55a98", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramInstanceRepeatableStageCheck.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramInstanceRepeatableStageCheck.java\nindex a1ed4965c9..ae06814c2c 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramInstanceRepeatableStageCheck.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramInstanceRepeatableStageCheck.java\n", "chunk": "@@ -26,8 +28,6 @@\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n \n-package org.hisp.dhis.dxf2.events.importer.insert.validation;\n-\n import static org.hisp.dhis.dxf2.importsummary.ImportSummary.success;\n \n import org.hisp.dhis.common.IdScheme;\n", "next_change": {"commit": "d360652a896bee650a842567e26cd1e62145cccb", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramInstanceRepeatableStageCheck.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramInstanceRepeatableStageCheck.java\nindex ae06814c2c..a1ed4965c9 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramInstanceRepeatableStageCheck.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramInstanceRepeatableStageCheck.java\n", "chunk": "@@ -28,6 +26,8 @@ package org.hisp.dhis.dxf2.events.importer.insert.validation;\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n \n+package org.hisp.dhis.dxf2.events.importer.insert.validation;\n+\n import static org.hisp.dhis.dxf2.importsummary.ImportSummary.success;\n \n import org.hisp.dhis.common.IdScheme;\n", "next_change": {"commit": "c9cbe9cf8b22a49324c53b68eba31b9c63684df4", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramInstanceRepeatableStageCheck.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramInstanceRepeatableStageCheck.java\nindex a1ed4965c9..ae06814c2c 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramInstanceRepeatableStageCheck.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramInstanceRepeatableStageCheck.java\n", "chunk": "@@ -26,8 +28,6 @@\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n \n-package org.hisp.dhis.dxf2.events.importer.insert.validation;\n-\n import static org.hisp.dhis.dxf2.importsummary.ImportSummary.success;\n \n import org.hisp.dhis.common.IdScheme;\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramInstanceRepeatableStageCheck.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramInstanceRepeatableStageCheck.java\nindex a1ed4965c9..ae06814c2c 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramInstanceRepeatableStageCheck.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramInstanceRepeatableStageCheck.java\n", "chunk": "@@ -26,8 +28,6 @@\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n \n-package org.hisp.dhis.dxf2.events.importer.insert.validation;\n-\n import static org.hisp.dhis.dxf2.importsummary.ImportSummary.success;\n \n import org.hisp.dhis.common.IdScheme;\n", "next_change": {"commit": "ea76fa86409613c9766d4508d65c88ac55c413c3", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramInstanceRepeatableStageCheck.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramInstanceRepeatableStageCheck.java\nindex ae06814c2c..7e511f431a 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramInstanceRepeatableStageCheck.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramInstanceRepeatableStageCheck.java\n", "chunk": "@@ -27,6 +25,7 @@ package org.hisp.dhis.dxf2.events.importer.insert.validation;\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+package org.hisp.dhis.dxf2.events.importer.insert.validation;\n \n import static org.hisp.dhis.dxf2.importsummary.ImportSummary.success;\n \n", "next_change": {"commit": "ba38c7fa19a269450161eb73bad6b80b1ef1133b", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramInstanceRepeatableStageCheck.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramInstanceRepeatableStageCheck.java\ndeleted file mode 100644\nindex 7e511f431a..0000000000\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramInstanceRepeatableStageCheck.java\n+++ /dev/null\n", "chunk": "@@ -1,100 +0,0 @@\n-/*\n- * Copyright (c) 2004-2021, University of Oslo\n- * All rights reserved.\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions are met:\n- * Redistributions of source code must retain the above copyright notice, this\n- * list of conditions and the following disclaimer.\n- *\n- * Redistributions in binary form must reproduce the above copyright notice,\n- * this list of conditions and the following disclaimer in the documentation\n- * and/or other materials provided with the distribution.\n- * Neither the name of the HISP project nor the names of its contributors may\n- * be used to endorse or promote products derived from this software without\n- * specific prior written permission.\n- *\n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n- * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n- * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n- * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n- * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n- * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n- * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n- * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n- * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- */\n-package org.hisp.dhis.dxf2.events.importer.insert.validation;\n-\n-import static org.hisp.dhis.dxf2.importsummary.ImportSummary.success;\n-\n-import org.hisp.dhis.common.IdScheme;\n-import org.hisp.dhis.dxf2.events.importer.Checker;\n-import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n-import org.hisp.dhis.dxf2.events.importer.shared.ImmutableEvent;\n-import org.hisp.dhis.dxf2.importsummary.ImportStatus;\n-import org.hisp.dhis.dxf2.importsummary.ImportSummary;\n-import org.hisp.dhis.program.Program;\n-import org.hisp.dhis.program.ProgramInstance;\n-import org.hisp.dhis.program.ProgramStage;\n-import org.hisp.dhis.trackedentity.TrackedEntityInstance;\n-import org.springframework.jdbc.core.JdbcTemplate;\n-\n-/**\n- * @author Luciano Fiandesio\n- */\n-public class ProgramInstanceRepeatableStageCheck implements Checker\n-{\n-    @Override\n-    public ImportSummary check( ImmutableEvent event, WorkContext ctx )\n-    {\n-        IdScheme scheme = ctx.getImportOptions().getIdSchemes().getProgramStageIdScheme();\n-        ProgramStage programStage = ctx.getProgramStage( scheme, event.getProgramStage() );\n-        ProgramInstance programInstance = ctx.getProgramInstanceMap().get( event.getUid() );\n-        Program program = ctx.getProgramsMap().get( event.getProgram() );\n-        TrackedEntityInstance tei = null;\n-\n-        if ( program.isRegistration() )\n-        {\n-            tei = ctx.getTrackedEntityInstanceMap().get( event.getUid() ).getLeft();\n-        }\n-\n-        /*\n-         * ProgramInstance should never be null. If it's null, the\n-         * ProgramInstanceCheck should report this anomaly.\n-         */\n-        // @formatter:off\n-        if ( programInstance != null &&\n-             tei != null &&\n-             program.isRegistration() &&\n-             !programStage.getRepeatable() &&\n-             hasProgramStageInstance( ctx.getServiceDelegator().getJdbcTemplate(), programStage.getId(), tei.getId() ) )\n-        {\n-            return new ImportSummary( ImportStatus.ERROR,\n-                \"Program stage is not repeatable and an event already exists\" ).setReference( event.getEvent() )\n-                    .incrementIgnored();\n-        }\n-        // @formatter:on\n-\n-        return success();\n-    }\n-\n-    private boolean hasProgramStageInstance( JdbcTemplate jdbcTemplate, long programStageId,\n-        long trackedEntityInstanceId )\n-    {\n-        // @formatter:off\n-        final String sql = \"select exists( \" +\n-                \"select * \" +\n-                \"from programstageinstance psi \" +\n-                \"  join programinstance pi on psi.programinstanceid = pi.programinstanceid \" +\n-                \"where psi.programstageid = ? \" +\n-                \"  and psi.deleted = false \" +\n-                \"  and pi.trackedentityinstanceid = ? \" +\n-                \"  and psi.status != 'SKIPPED'\" +\n-                \")\";\n-        // @formatter:on\n-\n-        return jdbcTemplate.queryForObject( sql, Boolean.class, programStageId, trackedEntityInstanceId );\n-    }\n-}\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "message": "Merge commit", "committedDate": null}, {"oid": "0d35843121f0ad3004fad015f1520c5b06a5c337", "committedDate": "2020-09-15 09:24:33 +0200", "message": "Merge 2.35 into master (#6149)"}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "c819a6d7d72145d06ab7198a597c768a01886910", "committedDate": "2021-07-08 15:39:54 +0200", "message": "fix: Fix check repeatable program stage to also consider the enrollment [DHIS2-11945] (#8395)"}, {"oid": "1e593837ab1c64884a8ac615c7cc8c3471a219ee", "committedDate": "2021-11-18 09:33:25 +0100", "message": "refactor: validators, checkers and processors in old importer are now spring beans [TECH-797] (#9218)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "e4f8abdfdb132f536835b3be17a3391da2089823", "committedDate": "2023-05-03 11:31:41 +0000", "message": "chore: Rename ProgramInstance to Enrollment [TECH-1547] (#13794)"}, {"oid": "ba38c7fa19a269450161eb73bad6b80b1ef1133b", "committedDate": "2023-05-04 11:23:39 +0200", "message": "chore: Rename most ProgramInstance classes to Enrollment [TECH-1547] (#13811)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA0MDUyMQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448040521", "body": "package before license", "bodyText": "package before license", "bodyHTML": "<p dir=\"auto\">package before license</p>", "author": "mortenoh", "createdAt": "2020-06-30T23:50:06Z", "path": "dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/Constants.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis;", "originalCommit": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODgwNjI1OQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448806259", "bodyText": "Fixed", "author": "luciano-fiandesio", "createdAt": "2020-07-02T07:36:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA0MDUyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "7032498b0cbac9437a93d7deeb72862937c55a98", "changed_code": [{"header": "diff --git a/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/Constants.java b/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/Constants.java\nindex 83c06f7605..20d124b71c 100644\n--- a/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/Constants.java\n+++ b/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/Constants.java\n", "chunk": "@@ -26,8 +28,6 @@\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n \n-package org.hisp.dhis;\n-\n /**\n  * @author Gintare Vilkelyte <vilkelyte.gintare@gmail.com>\n  */\n", "next_change": {"commit": "d360652a896bee650a842567e26cd1e62145cccb", "changed_code": [{"header": "diff --git a/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/Constants.java b/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/Constants.java\nindex 20d124b71c..83c06f7605 100644\n--- a/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/Constants.java\n+++ b/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/Constants.java\n", "chunk": "@@ -28,6 +26,8 @@ package org.hisp.dhis;\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n \n+package org.hisp.dhis;\n+\n /**\n  * @author Gintare Vilkelyte <vilkelyte.gintare@gmail.com>\n  */\n", "next_change": {"commit": "2f23e3b49f087c42aaec77bfd3279ff45f813977", "changed_code": [{"header": "diff --git a/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/Constants.java b/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/Constants.java\nindex 83c06f7605..20d124b71c 100644\n--- a/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/Constants.java\n+++ b/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/Constants.java\n", "chunk": "@@ -26,8 +28,6 @@\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n \n-package org.hisp.dhis;\n-\n /**\n  * @author Gintare Vilkelyte <vilkelyte.gintare@gmail.com>\n  */\n", "next_change": {"commit": "17e4effbd84888b9241be64afaf8bf2300188dab", "changed_code": [{"header": "diff --git a/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/Constants.java b/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/Constants.java\nindex 20d124b71c..83c06f7605 100644\n--- a/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/Constants.java\n+++ b/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/Constants.java\n", "chunk": "@@ -28,6 +26,8 @@ package org.hisp.dhis;\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n \n+package org.hisp.dhis;\n+\n /**\n  * @author Gintare Vilkelyte <vilkelyte.gintare@gmail.com>\n  */\n", "next_change": {"commit": "53fe69844f9b0fa1dc808e576d47cde1750a2323", "changed_code": [{"header": "diff --git a/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/Constants.java b/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/Constants.java\nindex 83c06f7605..20d124b71c 100644\n--- a/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/Constants.java\n+++ b/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/Constants.java\n", "chunk": "@@ -26,8 +28,6 @@\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n \n-package org.hisp.dhis;\n-\n /**\n  * @author Gintare Vilkelyte <vilkelyte.gintare@gmail.com>\n  */\n", "next_change": null}]}}]}}]}}]}}]}, "revised_code_in_main": {"commit": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "changed_code": [{"header": "diff --git a/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/Constants.java b/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/Constants.java\nindex 83c06f7605..20d124b71c 100644\n--- a/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/Constants.java\n+++ b/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/Constants.java\n", "chunk": "@@ -26,8 +28,6 @@\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n \n-package org.hisp.dhis;\n-\n /**\n  * @author Gintare Vilkelyte <vilkelyte.gintare@gmail.com>\n  */\n", "next_change": {"commit": "146f5fb2bc75816f7edc314409b896e448dbe781", "changed_code": [{"header": "diff --git a/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/Constants.java b/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/Constants.java\nindex 20d124b71c..f6c84bb6a2 100644\n--- a/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/Constants.java\n+++ b/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/Constants.java\n", "chunk": "@@ -33,15 +33,26 @@ package org.hisp.dhis;\n  */\n public class Constants\n {\n+    public static final String TRACKED_ENTITY_TYPE = \"Q9GufDoplCL\";\n+\n     public static String ORG_UNIT_GROUP_ID = \"n9bh3KM5wmu\";\n \n     public static String SUPER_USER_ID = \"PQD6wXJ2r5j\";\n \n+    public static String ADMIN_ID = \"PQD6wXJ2r5k\";\n+\n     public static String USER_GROUP_ID = \"OPVIvvXzNTw\";\n \n     public static String USER_ROLE_ID = \"yrB6vc5Ip7r\";\n \n     public static String EVENT_PROGRAM_ID = \"Zd2rkv8FsWq\";\n+\n+    public static String EVENT_PROGRAM_STAGE_ID = \"jKLB23QZS4I\";\n+\n+    public static String TRACKER_PROGRAM_ID = \"f1AyMswryyQ\";\n+\n+    public static String ANOTHER_TRACKER_PROGRAM_ID = \"f1AyMswryyX\";\n+\n     public static String[] ORG_UNIT_IDS = {\n         \"DiszpKrYNg8\",\n         \"g8upMTyEZGZ\",\n", "next_change": {"commit": "cde66903f83a2a14abe12941fa59b6b526f135a2", "changed_code": [{"header": "diff --git a/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/Constants.java b/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/Constants.java\nindex f6c84bb6a2..ac8c45698c 100644\n--- a/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/Constants.java\n+++ b/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/Constants.java\n", "chunk": "@@ -59,5 +59,4 @@ public class Constants\n         \"O6uvpzGd5pu\",\n         \"YuQRtpLP10I\"\n     };\n-\n }\n", "next_change": {"commit": "9706c5b672214850be88dc840d0fa7de80312695", "changed_code": [{"header": "diff --git a/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/Constants.java b/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/Constants.java\ndeleted file mode 100644\nindex ac8c45698c..0000000000\n--- a/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/Constants.java\n+++ /dev/null\n", "chunk": "@@ -1,62 +0,0 @@\n-package org.hisp.dhis;\n-\n-/*\n- * Copyright (c) 2004-2021, University of Oslo\n- * All rights reserved.\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions are met:\n- * Redistributions of source code must retain the above copyright notice, this\n- * list of conditions and the following disclaimer.\n- *\n- * Redistributions in binary form must reproduce the above copyright notice,\n- * this list of conditions and the following disclaimer in the documentation\n- * and/or other materials provided with the distribution.\n- * Neither the name of the HISP project nor the names of its contributors may\n- * be used to endorse or promote products derived from this software without\n- * specific prior written permission.\n- *\n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n- * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n- * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n- * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n- * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n- * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n- * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n- * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n- * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- */\n-\n-/**\n- * @author Gintare Vilkelyte <vilkelyte.gintare@gmail.com>\n- */\n-public class Constants\n-{\n-    public static final String TRACKED_ENTITY_TYPE = \"Q9GufDoplCL\";\n-\n-    public static String ORG_UNIT_GROUP_ID = \"n9bh3KM5wmu\";\n-\n-    public static String SUPER_USER_ID = \"PQD6wXJ2r5j\";\n-\n-    public static String ADMIN_ID = \"PQD6wXJ2r5k\";\n-\n-    public static String USER_GROUP_ID = \"OPVIvvXzNTw\";\n-\n-    public static String USER_ROLE_ID = \"yrB6vc5Ip7r\";\n-\n-    public static String EVENT_PROGRAM_ID = \"Zd2rkv8FsWq\";\n-\n-    public static String EVENT_PROGRAM_STAGE_ID = \"jKLB23QZS4I\";\n-\n-    public static String TRACKER_PROGRAM_ID = \"f1AyMswryyQ\";\n-\n-    public static String ANOTHER_TRACKER_PROGRAM_ID = \"f1AyMswryyX\";\n-\n-    public static String[] ORG_UNIT_IDS = {\n-        \"DiszpKrYNg8\",\n-        \"g8upMTyEZGZ\",\n-        \"O6uvpzGd5pu\",\n-        \"YuQRtpLP10I\"\n-    };\n-}\n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "message": "Merge commit", "committedDate": null}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "e38f4bf11077070877d0beb033fb969326e35881", "committedDate": "2021-01-22 10:51:19 +0100", "message": "test: new tracker importer tests  (#7158)"}, {"oid": "e481e79178e7a25a2c18e0d086b402f994d25974", "committedDate": "2021-02-09 13:08:25 +0100", "message": "test: adds tests for events with notes (DHIS2-10302) (#7319)"}, {"oid": "fe04922e144ac69367a99840d5518edda2d67f38", "committedDate": "2021-06-03 08:17:10 +0200", "message": "fix: Make program field read-only in event payload [DHIS2-11225] (#8086)"}, {"oid": "146f5fb2bc75816f7edc314409b896e448dbe781", "committedDate": "2021-07-27 10:22:34 +0200", "message": "test: adds api tests for patch, ou profile and potential duplicates (#8383)"}, {"oid": "cde66903f83a2a14abe12941fa59b6b526f135a2", "committedDate": "2021-08-19 11:52:16 +0700", "message": "feat: Cascading sharing for dashboards to items (#8409)"}, {"oid": "d45301f99d017c365028ab0a19d12b83b2d10f56", "committedDate": "2021-08-19 10:56:35 +0200", "message": "feat: Adds speedy-spotless plugin, updates code format on all e2e files (#8549)"}, {"oid": "bb33635ff28115038a16d5187314f6053989c846", "committedDate": "2021-09-14 16:15:54 +0200", "message": "fix: Merge deduplication (merging) changes to master (#8726)"}, {"oid": "8345bb0e86fc277bf9cbdb1e81cf6ebc3618ce4a", "committedDate": "2021-10-22 10:56:42 +0200", "message": "style: duplicate headers removed [TECH-780] (#9109)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "369beecd955c93a5306f19f7c6ea1fba56a1fc9a", "committedDate": "2022-01-14 14:28:41 +0100", "message": "test: adds tests for ER dimension endpoints (#9590)"}, {"oid": "8b540ae5e4682e5c9fa529abf17b8e52642165ab", "committedDate": "2022-05-02 15:06:47 +0200", "message": "chore: Format e2e test module (#10661)"}, {"oid": "0fa9d073af82c6f3ecadfc72daaa6fedd0435a45", "committedDate": "2022-12-01 12:43:48 +0000", "message": "fix: Remove formatting for line comments (#12448)"}, {"oid": "e3c9a7f42be87fefc56b1f380b5fcf4f1e752cb8", "committedDate": "2023-03-21 13:44:39 +0100", "message": "feat: Cross Program Linelisting analytics [DHIS2-13779] (#13387)"}, {"oid": "9706c5b672214850be88dc840d0fa7de80312695", "committedDate": "2023-05-11 14:26:31 +0200", "message": "test: prefix all test modules with dhis-test (#13889)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA0MDkxNw==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448040917", "body": "@Override ?", "bodyText": "@OverRide ?", "bodyHTML": "<p dir=\"auto\"><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/OverRide/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/OverRide\">@OverRide</a> ?</p>", "author": "mortenoh", "createdAt": "2020-06-30T23:51:24Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/mapper/ProgramStageInstanceMapper.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package org.hisp.dhis.dxf2.events.importer.mapper;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import static java.util.Collections.emptyList;\n+import static java.util.stream.Collectors.toList;\n+import static org.apache.commons.collections4.CollectionUtils.isNotEmpty;\n+import static org.hisp.dhis.common.IdScheme.CODE;\n+import static org.hisp.dhis.common.IdScheme.UID;\n+import static org.hisp.dhis.event.EventStatus.fromInt;\n+import static org.hisp.dhis.util.DateUtils.parseDate;\n+\n+import java.util.Date;\n+import java.util.List;\n+\n+import org.hisp.dhis.dxf2.common.ImportOptions;\n+import org.hisp.dhis.dxf2.events.event.Event;\n+import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n+import org.hisp.dhis.program.ProgramStageInstance;\n+import org.hisp.dhis.trackedentitycomment.TrackedEntityComment;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+public class ProgramStageInstanceMapper extends AbstractMapper<Event, ProgramStageInstance>\n+{\n+    private final ProgramStageInstanceNoteMapper noteMapper;\n+\n+    public ProgramStageInstanceMapper( WorkContext ctx )\n+    {\n+        super( ctx );\n+        noteMapper = new ProgramStageInstanceNoteMapper( ctx );\n+    }\n+\n+    public ProgramStageInstance map( Event event )", "originalCommit": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQwODIwNQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448408205", "bodyText": "Fixed", "author": "luciano-fiandesio", "createdAt": "2020-07-01T14:35:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA0MDkxNw=="}], "type": "inlineReview", "revised_code": {"commit": "7032498b0cbac9437a93d7deeb72862937c55a98", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/mapper/ProgramStageInstanceMapper.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/mapper/ProgramStageInstanceMapper.java\nindex d42efd3362..aff374cd49 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/mapper/ProgramStageInstanceMapper.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/mapper/ProgramStageInstanceMapper.java\n", "chunk": "@@ -58,6 +58,7 @@ public class ProgramStageInstanceMapper extends AbstractMapper<Event, ProgramSta\n         noteMapper = new ProgramStageInstanceNoteMapper( ctx );\n     }\n \n+    @Override\n     public ProgramStageInstance map( Event event )\n     {\n         ImportOptions importOptions = workContext.getImportOptions();\n", "next_change": {"commit": "d360652a896bee650a842567e26cd1e62145cccb", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/mapper/ProgramStageInstanceMapper.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/mapper/ProgramStageInstanceMapper.java\nindex aff374cd49..d42efd3362 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/mapper/ProgramStageInstanceMapper.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/mapper/ProgramStageInstanceMapper.java\n", "chunk": "@@ -58,7 +58,6 @@ public class ProgramStageInstanceMapper extends AbstractMapper<Event, ProgramSta\n         noteMapper = new ProgramStageInstanceNoteMapper( ctx );\n     }\n \n-    @Override\n     public ProgramStageInstance map( Event event )\n     {\n         ImportOptions importOptions = workContext.getImportOptions();\n", "next_change": {"commit": "c9cbe9cf8b22a49324c53b68eba31b9c63684df4", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/mapper/ProgramStageInstanceMapper.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/mapper/ProgramStageInstanceMapper.java\nindex d42efd3362..aff374cd49 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/mapper/ProgramStageInstanceMapper.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/mapper/ProgramStageInstanceMapper.java\n", "chunk": "@@ -58,6 +58,7 @@ public class ProgramStageInstanceMapper extends AbstractMapper<Event, ProgramSta\n         noteMapper = new ProgramStageInstanceNoteMapper( ctx );\n     }\n \n+    @Override\n     public ProgramStageInstance map( Event event )\n     {\n         ImportOptions importOptions = workContext.getImportOptions();\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/mapper/ProgramStageInstanceMapper.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/mapper/ProgramStageInstanceMapper.java\nindex d42efd3362..aff374cd49 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/mapper/ProgramStageInstanceMapper.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/mapper/ProgramStageInstanceMapper.java\n", "chunk": "@@ -58,6 +58,7 @@ public class ProgramStageInstanceMapper extends AbstractMapper<Event, ProgramSta\n         noteMapper = new ProgramStageInstanceNoteMapper( ctx );\n     }\n \n+    @Override\n     public ProgramStageInstance map( Event event )\n     {\n         ImportOptions importOptions = workContext.getImportOptions();\n", "next_change": {"commit": "1bd8ee38126fbac22f805db44dad0cdcba7b14a6", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/mapper/ProgramStageInstanceMapper.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/mapper/ProgramStageInstanceMapper.java\nindex aff374cd49..2194cf770c 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/mapper/ProgramStageInstanceMapper.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/mapper/ProgramStageInstanceMapper.java\n", "chunk": "@@ -57,43 +60,104 @@ public class ProgramStageInstanceMapper extends AbstractMapper<Event, ProgramSta\n         super( ctx );\n         noteMapper = new ProgramStageInstanceNoteMapper( ctx );\n     }\n-\n+    \n     @Override\n     public ProgramStageInstance map( Event event )\n     {\n-        ImportOptions importOptions = workContext.getImportOptions();\n-        \n-        ProgramStageInstance psi = new ProgramStageInstance();\n-        \n-        ProgramStageInstance programStageInstance = this.workContext.getProgramStageInstanceMap().get( event.getUid() );\n-        if ( programStageInstance != null )\n+        ProgramStageInstance psi = workContext.getProgramStageInstanceMap().get( event.getUid() );\n+\n+        return psi == null ? mapForInsert( event ) : mapForUpdate( event, psi );\n+    }\n+\n+    private ProgramStageInstance mapForUpdate( Event event, ProgramStageInstance psi )\n+    {\n+        // Program Instance\n+        workContext.getProgramInstance( event.getUid() ).ifPresent( psi::setProgramInstance );\n+\n+        // Program Stage\n+        getProgramStage( event ).ifPresent( psi::setProgramStage );\n+\n+        // Org Unit\n+        getOrganisationUnit( event ).ifPresent( psi::setOrganisationUnit );\n+\n+        // Status and completed date are set in the Update Preprocessor //\n+\n+        // Attribute Option Combo\n+        psi.setAttributeOptionCombo( this.workContext.getCategoryOptionComboMap().get( event.getUid() ) );\n+\n+        // Geometry\n+        psi.setGeometry( event.getGeometry() );\n+\n+        // Notes\n+        if ( !event.getNotes().isEmpty() )\n         {\n-            psi.setId( programStageInstance.getId() );\n+            psi.setComments( convertNotes( event, this.workContext ) );\n         }\n \n+        // Data Values\n+        psi.setEventDataValues( workContext.getEventDataValueMap().get( event.getUid() ) );\n+\n+        if ( event.getDueDate() != null )\n+        {\n+            psi.setDueDate( parseDate( event.getDueDate() ) );\n+        }\n+\n+        setExecutionDate( event, psi );\n+\n+        if ( psi.getProgramStage() != null && psi.getProgramStage().isEnableUserAssignment() )\n+        {\n+            psi.setAssignedUser( this.workContext.getAssignedUserMap().get( event.getUid() ) );\n+        }\n+\n+        // CREATED AT CLIENT + UPDATED AT CLIENT\n+        psi.setCreatedAtClient( parseDate( event.getCreatedAtClient() ) );\n+        psi.setLastUpdatedAtClient( parseDate( event.getLastUpdatedAtClient() ) );\n+\n+        psi.setStoredBy( event.getStoredBy() );\n+        psi.setCompletedBy( event.getCompletedBy() );\n+\n+        return psi;\n+    }\n+\n+    public ProgramStageInstance mapForInsert( Event event )\n+    {\n+        ImportOptions importOptions = workContext.getImportOptions();\n+\n+        ProgramStageInstance psi = new ProgramStageInstance();\n+\n         if ( importOptions.getIdSchemes().getProgramStageInstanceIdScheme().equals( CODE ) )\n         {\n-            // TODO: Is this really correct?\n-            psi.setCode( event.getUid() );\n+            psi.setCode( event.getEvent() );\n         }\n         else if ( importOptions.getIdSchemes().getProgramStageIdScheme().equals( UID ) )\n         {\n             psi.setUid( event.getUid() );\n         }\n \n-        // FKs\n+        // Program Instance\n         psi.setProgramInstance( this.workContext.getProgramInstanceMap().get( event.getUid() ) );\n+\n+        // Program Stage\n         psi.setProgramStage( this.workContext.getProgramStage( importOptions.getIdSchemes().getProgramStageIdScheme(),\n-            event.getProgramStage() ) );\n+                event.getProgramStage() ) );\n+\n+        // Org Unit\n         psi.setOrganisationUnit( this.workContext.getOrganisationUnitMap().get( event.getUid() ) );\n \n-        // EXECUTION + DUE DATE\n-        Date executionDate = null;\n+        // Status\n+        psi.setStatus( fromInt( event.getStatus().getValue() ) );\n \n-        if ( event.getEventDate() != null )\n-        {\n-            executionDate = parseDate( event.getEventDate() );\n-        }\n+        // Attribute Option Combo\n+        psi.setAttributeOptionCombo( this.workContext.getCategoryOptionComboMap().get( event.getUid() ) );\n+\n+        // Geometry\n+        psi.setGeometry( event.getGeometry() );\n+\n+        // Notes\n+        psi.setComments( convertNotes( event, this.workContext ) );\n+\n+        // Data Values\n+        psi.setEventDataValues( workContext.getEventDataValueMap().get( event.getUid() ) );\n \n         Date dueDate = new Date();\n \n", "next_change": {"commit": "02336c9611c0dd85d5038223bddbfdebc0aae526", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/mapper/ProgramStageInstanceMapper.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/mapper/ProgramStageInstanceMapper.java\ndeleted file mode 100644\nindex 2194cf770c..0000000000\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/mapper/ProgramStageInstanceMapper.java\n+++ /dev/null\n", "chunk": "@@ -1,232 +0,0 @@\n-package org.hisp.dhis.dxf2.events.importer.mapper;\n-\n-/*\n- * Copyright (c) 2004-2020, University of Oslo\n- * All rights reserved.\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions are met:\n- * Redistributions of source code must retain the above copyright notice, this\n- * list of conditions and the following disclaimer.\n- *\n- * Redistributions in binary form must reproduce the above copyright notice,\n- * this list of conditions and the following disclaimer in the documentation\n- * and/or other materials provided with the distribution.\n- * Neither the name of the HISP project nor the names of its contributors may\n- * be used to endorse or promote products derived from this software without\n- * specific prior written permission.\n- *\n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n- * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n- * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n- * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n- * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n- * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n- * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n- * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n- * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- */\n-\n-import static java.util.Collections.emptyList;\n-import static java.util.stream.Collectors.toList;\n-import static org.apache.commons.collections4.CollectionUtils.isNotEmpty;\n-import static org.hisp.dhis.common.IdScheme.CODE;\n-import static org.hisp.dhis.common.IdScheme.UID;\n-import static org.hisp.dhis.event.EventStatus.fromInt;\n-import static org.hisp.dhis.util.DateUtils.parseDate;\n-\n-import java.util.Date;\n-import java.util.List;\n-import java.util.Optional;\n-\n-import org.hisp.dhis.dxf2.common.ImportOptions;\n-import org.hisp.dhis.dxf2.events.event.Event;\n-import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n-import org.hisp.dhis.organisationunit.OrganisationUnit;\n-import org.hisp.dhis.program.ProgramStage;\n-import org.hisp.dhis.program.ProgramStageInstance;\n-import org.hisp.dhis.trackedentitycomment.TrackedEntityComment;\n-\n-/**\n- * @author Luciano Fiandesio\n- */\n-public class ProgramStageInstanceMapper extends AbstractMapper<Event, ProgramStageInstance>\n-{\n-    private final ProgramStageInstanceNoteMapper noteMapper;\n-\n-    public ProgramStageInstanceMapper( WorkContext ctx )\n-    {\n-        super( ctx );\n-        noteMapper = new ProgramStageInstanceNoteMapper( ctx );\n-    }\n-    \n-    @Override\n-    public ProgramStageInstance map( Event event )\n-    {\n-        ProgramStageInstance psi = workContext.getProgramStageInstanceMap().get( event.getUid() );\n-\n-        return psi == null ? mapForInsert( event ) : mapForUpdate( event, psi );\n-    }\n-\n-    private ProgramStageInstance mapForUpdate( Event event, ProgramStageInstance psi )\n-    {\n-        // Program Instance\n-        workContext.getProgramInstance( event.getUid() ).ifPresent( psi::setProgramInstance );\n-\n-        // Program Stage\n-        getProgramStage( event ).ifPresent( psi::setProgramStage );\n-\n-        // Org Unit\n-        getOrganisationUnit( event ).ifPresent( psi::setOrganisationUnit );\n-\n-        // Status and completed date are set in the Update Preprocessor //\n-\n-        // Attribute Option Combo\n-        psi.setAttributeOptionCombo( this.workContext.getCategoryOptionComboMap().get( event.getUid() ) );\n-\n-        // Geometry\n-        psi.setGeometry( event.getGeometry() );\n-\n-        // Notes\n-        if ( !event.getNotes().isEmpty() )\n-        {\n-            psi.setComments( convertNotes( event, this.workContext ) );\n-        }\n-\n-        // Data Values\n-        psi.setEventDataValues( workContext.getEventDataValueMap().get( event.getUid() ) );\n-\n-        if ( event.getDueDate() != null )\n-        {\n-            psi.setDueDate( parseDate( event.getDueDate() ) );\n-        }\n-\n-        setExecutionDate( event, psi );\n-\n-        if ( psi.getProgramStage() != null && psi.getProgramStage().isEnableUserAssignment() )\n-        {\n-            psi.setAssignedUser( this.workContext.getAssignedUserMap().get( event.getUid() ) );\n-        }\n-\n-        // CREATED AT CLIENT + UPDATED AT CLIENT\n-        psi.setCreatedAtClient( parseDate( event.getCreatedAtClient() ) );\n-        psi.setLastUpdatedAtClient( parseDate( event.getLastUpdatedAtClient() ) );\n-\n-        psi.setStoredBy( event.getStoredBy() );\n-        psi.setCompletedBy( event.getCompletedBy() );\n-\n-        return psi;\n-    }\n-\n-    public ProgramStageInstance mapForInsert( Event event )\n-    {\n-        ImportOptions importOptions = workContext.getImportOptions();\n-\n-        ProgramStageInstance psi = new ProgramStageInstance();\n-\n-        if ( importOptions.getIdSchemes().getProgramStageInstanceIdScheme().equals( CODE ) )\n-        {\n-            psi.setCode( event.getEvent() );\n-        }\n-        else if ( importOptions.getIdSchemes().getProgramStageIdScheme().equals( UID ) )\n-        {\n-            psi.setUid( event.getUid() );\n-        }\n-\n-        // Program Instance\n-        psi.setProgramInstance( this.workContext.getProgramInstanceMap().get( event.getUid() ) );\n-\n-        // Program Stage\n-        psi.setProgramStage( this.workContext.getProgramStage( importOptions.getIdSchemes().getProgramStageIdScheme(),\n-                event.getProgramStage() ) );\n-\n-        // Org Unit\n-        psi.setOrganisationUnit( this.workContext.getOrganisationUnitMap().get( event.getUid() ) );\n-\n-        // Status\n-        psi.setStatus( fromInt( event.getStatus().getValue() ) );\n-\n-        // Attribute Option Combo\n-        psi.setAttributeOptionCombo( this.workContext.getCategoryOptionComboMap().get( event.getUid() ) );\n-\n-        // Geometry\n-        psi.setGeometry( event.getGeometry() );\n-\n-        // Notes\n-        psi.setComments( convertNotes( event, this.workContext ) );\n-\n-        // Data Values\n-        psi.setEventDataValues( workContext.getEventDataValueMap().get( event.getUid() ) );\n-\n-        Date dueDate = new Date();\n-\n-        if ( event.getDueDate() != null )\n-        {\n-            dueDate = parseDate( event.getDueDate() );\n-        }\n-\n-        psi.setDueDate( dueDate );\n-        setCompletedDate( event, psi );\n-        // Note that execution date can be null\n-        setExecutionDate( event, psi );\n-\n-        if ( psi.getProgramStage() != null && psi.getProgramStage().isEnableUserAssignment() )\n-        {\n-            psi.setAssignedUser( this.workContext.getAssignedUserMap().get( event.getUid() ) );\n-        }\n-\n-        // CREATED AT CLIENT + UPDATED AT CLIENT\n-        psi.setCreatedAtClient( parseDate( event.getCreatedAtClient() ) );\n-        psi.setLastUpdatedAtClient( parseDate( event.getLastUpdatedAtClient() ) );\n-\n-        psi.setStoredBy( event.getStoredBy() );\n-        psi.setCompletedBy( event.getCompletedBy() );\n-\n-        return psi;\n-    }\n-\n-    private List<TrackedEntityComment> convertNotes( Event event, WorkContext ctx )\n-    {\n-        if ( isNotEmpty( event.getNotes() ) )\n-        {\n-            return event.getNotes().stream().filter( note -> ctx.getNotesMap().containsKey( note.getNote() ) )\n-                .map( noteMapper::map ).collect( toList() );\n-        }\n-\n-        return emptyList();\n-    }\n-\n-    private Optional<ProgramStage> getProgramStage( Event event )\n-    {\n-        return Optional.ofNullable( this.workContext.getProgramStage(\n-            this.workContext.getImportOptions().getIdSchemes().getProgramStageIdScheme(), event.getProgramStage() ) );\n-    }\n-\n-    private Optional<OrganisationUnit> getOrganisationUnit( Event event )\n-    {\n-        return Optional.ofNullable( this.workContext.getOrganisationUnitMap().get( event.getUid() ) );\n-    }\n-\n-    private void setExecutionDate( Event event, ProgramStageInstance psi )\n-    {\n-        if ( event.getEventDate() != null )\n-        {\n-            psi.setExecutionDate( parseDate( event.getEventDate() ) );\n-        }\n-    }\n-\n-    private void setCompletedDate( Event event, ProgramStageInstance psi )\n-    {\n-        // Completed Date // FIXME this logic should be moved to a preprocessor\n-        if ( psi.isCompleted() )\n-        {\n-            Date completedDate = new Date();\n-            if ( event.getCompletedDate() != null )\n-            {\n-                completedDate = parseDate( event.getCompletedDate() );\n-            }\n-            psi.setCompletedDate( completedDate );\n-        }\n-    }\n-}\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "message": "Merge commit", "committedDate": null}, {"oid": "0d35843121f0ad3004fad015f1520c5b06a5c337", "committedDate": "2020-09-15 09:24:33 +0200", "message": "Merge 2.35 into master (#6149)"}, {"oid": "1bd8ee38126fbac22f805db44dad0cdcba7b14a6", "committedDate": "2020-09-23 11:30:37 +0200", "message": "fix: allow updating an Event with File data type [DHIS2-9559]"}, {"oid": "13cd21d76507450be96b06e13823b24cf357be04", "committedDate": "2020-10-30 09:38:34 +0100", "message": "feat: DHIS2-8911 adding LastUpdatedBy and CreatedBy user informations in events (#6521)"}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "771ac47275cc26280a5481fb4cc61a40f43a2e7d", "committedDate": "2022-04-20 12:28:30 +0200", "message": "fix: Update identifiers of data elements to uid (#10270)"}, {"oid": "5764c79d20ac77259e14685730771c0748bf8407", "committedDate": "2023-03-24 12:43:39 +0100", "message": "fix: createdAtClient for events can be written only on inserts, never on updates [DHIS2-14991] (#13407)"}, {"oid": "959c60d4f597187d0df2160fbbb675e5c4196e5c", "committedDate": "2023-04-27 16:46:18 +0200", "message": "chore: rename ProgramStageInstance to Event (#13731)"}, {"oid": "41e75ba362e65a726c88564679a43aadcebbc60a", "committedDate": "2023-05-03 07:50:28 +0200", "message": "chore: rename Event.programInstance to Event.enrollment (#13774)"}, {"oid": "58331f5dd72cc6da992105c673ff9edee11ef4b7", "committedDate": "2023-05-04 13:17:21 +0200", "message": "chore: Rename most programInstance occurrences [TECH-1547] (#13817)"}, {"oid": "02336c9611c0dd85d5038223bddbfdebc0aae526", "committedDate": "2023-05-11 19:34:26 +0200", "message": "chore: move old tracker dxf2 code into deprecated package (#13901)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA0MTA5MQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448041091", "body": "No, that seems wrong.. code for tracker objects is anyways not properly implemented", "bodyText": "No, that seems wrong.. code for tracker objects is anyways not properly implemented", "bodyHTML": "<p dir=\"auto\">No, that seems wrong.. code for tracker objects is anyways not properly implemented</p>", "author": "mortenoh", "createdAt": "2020-06-30T23:52:00Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/mapper/ProgramStageInstanceMapper.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package org.hisp.dhis.dxf2.events.importer.mapper;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import static java.util.Collections.emptyList;\n+import static java.util.stream.Collectors.toList;\n+import static org.apache.commons.collections4.CollectionUtils.isNotEmpty;\n+import static org.hisp.dhis.common.IdScheme.CODE;\n+import static org.hisp.dhis.common.IdScheme.UID;\n+import static org.hisp.dhis.event.EventStatus.fromInt;\n+import static org.hisp.dhis.util.DateUtils.parseDate;\n+\n+import java.util.Date;\n+import java.util.List;\n+\n+import org.hisp.dhis.dxf2.common.ImportOptions;\n+import org.hisp.dhis.dxf2.events.event.Event;\n+import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n+import org.hisp.dhis.program.ProgramStageInstance;\n+import org.hisp.dhis.trackedentitycomment.TrackedEntityComment;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+public class ProgramStageInstanceMapper extends AbstractMapper<Event, ProgramStageInstance>\n+{\n+    private final ProgramStageInstanceNoteMapper noteMapper;\n+\n+    public ProgramStageInstanceMapper( WorkContext ctx )\n+    {\n+        super( ctx );\n+        noteMapper = new ProgramStageInstanceNoteMapper( ctx );\n+    }\n+\n+    public ProgramStageInstance map( Event event )\n+    {\n+        ImportOptions importOptions = workContext.getImportOptions();\n+        \n+        ProgramStageInstance psi = new ProgramStageInstance();\n+        \n+        ProgramStageInstance programStageInstance = this.workContext.getProgramStageInstanceMap().get( event.getUid() );\n+        if ( programStageInstance != null )\n+        {\n+            psi.setId( programStageInstance.getId() );\n+        }\n+\n+        if ( importOptions.getIdSchemes().getProgramStageInstanceIdScheme().equals( CODE ) )\n+        {\n+            // TODO: Is this really correct?\n+            psi.setCode( event.getUid() );", "originalCommit": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQwOTgzNA==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448409834", "bodyText": "Ok, this was on of the questions I asked in the open points document: https://docs.google.com/document/d/1030nAuKxMSAYopNJj569inGgcJUS3DbqNrU-ZyZgSMI/edit#heading=h.p1u0vhrtwo4q", "author": "luciano-fiandesio", "createdAt": "2020-07-01T14:38:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA0MTA5MQ=="}], "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "1bd8ee38126fbac22f805db44dad0cdcba7b14a6", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/mapper/ProgramStageInstanceMapper.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/mapper/ProgramStageInstanceMapper.java\nindex d42efd3362..2194cf770c 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/mapper/ProgramStageInstanceMapper.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/mapper/ProgramStageInstanceMapper.java\n", "chunk": "@@ -57,42 +60,104 @@ public class ProgramStageInstanceMapper extends AbstractMapper<Event, ProgramSta\n         super( ctx );\n         noteMapper = new ProgramStageInstanceNoteMapper( ctx );\n     }\n-\n+    \n+    @Override\n     public ProgramStageInstance map( Event event )\n     {\n-        ImportOptions importOptions = workContext.getImportOptions();\n-        \n-        ProgramStageInstance psi = new ProgramStageInstance();\n-        \n-        ProgramStageInstance programStageInstance = this.workContext.getProgramStageInstanceMap().get( event.getUid() );\n-        if ( programStageInstance != null )\n+        ProgramStageInstance psi = workContext.getProgramStageInstanceMap().get( event.getUid() );\n+\n+        return psi == null ? mapForInsert( event ) : mapForUpdate( event, psi );\n+    }\n+\n+    private ProgramStageInstance mapForUpdate( Event event, ProgramStageInstance psi )\n+    {\n+        // Program Instance\n+        workContext.getProgramInstance( event.getUid() ).ifPresent( psi::setProgramInstance );\n+\n+        // Program Stage\n+        getProgramStage( event ).ifPresent( psi::setProgramStage );\n+\n+        // Org Unit\n+        getOrganisationUnit( event ).ifPresent( psi::setOrganisationUnit );\n+\n+        // Status and completed date are set in the Update Preprocessor //\n+\n+        // Attribute Option Combo\n+        psi.setAttributeOptionCombo( this.workContext.getCategoryOptionComboMap().get( event.getUid() ) );\n+\n+        // Geometry\n+        psi.setGeometry( event.getGeometry() );\n+\n+        // Notes\n+        if ( !event.getNotes().isEmpty() )\n         {\n-            psi.setId( programStageInstance.getId() );\n+            psi.setComments( convertNotes( event, this.workContext ) );\n         }\n \n+        // Data Values\n+        psi.setEventDataValues( workContext.getEventDataValueMap().get( event.getUid() ) );\n+\n+        if ( event.getDueDate() != null )\n+        {\n+            psi.setDueDate( parseDate( event.getDueDate() ) );\n+        }\n+\n+        setExecutionDate( event, psi );\n+\n+        if ( psi.getProgramStage() != null && psi.getProgramStage().isEnableUserAssignment() )\n+        {\n+            psi.setAssignedUser( this.workContext.getAssignedUserMap().get( event.getUid() ) );\n+        }\n+\n+        // CREATED AT CLIENT + UPDATED AT CLIENT\n+        psi.setCreatedAtClient( parseDate( event.getCreatedAtClient() ) );\n+        psi.setLastUpdatedAtClient( parseDate( event.getLastUpdatedAtClient() ) );\n+\n+        psi.setStoredBy( event.getStoredBy() );\n+        psi.setCompletedBy( event.getCompletedBy() );\n+\n+        return psi;\n+    }\n+\n+    public ProgramStageInstance mapForInsert( Event event )\n+    {\n+        ImportOptions importOptions = workContext.getImportOptions();\n+\n+        ProgramStageInstance psi = new ProgramStageInstance();\n+\n         if ( importOptions.getIdSchemes().getProgramStageInstanceIdScheme().equals( CODE ) )\n         {\n-            // TODO: Is this really correct?\n-            psi.setCode( event.getUid() );\n+            psi.setCode( event.getEvent() );\n         }\n         else if ( importOptions.getIdSchemes().getProgramStageIdScheme().equals( UID ) )\n         {\n             psi.setUid( event.getUid() );\n         }\n \n-        // FKs\n+        // Program Instance\n         psi.setProgramInstance( this.workContext.getProgramInstanceMap().get( event.getUid() ) );\n+\n+        // Program Stage\n         psi.setProgramStage( this.workContext.getProgramStage( importOptions.getIdSchemes().getProgramStageIdScheme(),\n-            event.getProgramStage() ) );\n+                event.getProgramStage() ) );\n+\n+        // Org Unit\n         psi.setOrganisationUnit( this.workContext.getOrganisationUnitMap().get( event.getUid() ) );\n \n-        // EXECUTION + DUE DATE\n-        Date executionDate = null;\n+        // Status\n+        psi.setStatus( fromInt( event.getStatus().getValue() ) );\n \n-        if ( event.getEventDate() != null )\n-        {\n-            executionDate = parseDate( event.getEventDate() );\n-        }\n+        // Attribute Option Combo\n+        psi.setAttributeOptionCombo( this.workContext.getCategoryOptionComboMap().get( event.getUid() ) );\n+\n+        // Geometry\n+        psi.setGeometry( event.getGeometry() );\n+\n+        // Notes\n+        psi.setComments( convertNotes( event, this.workContext ) );\n+\n+        // Data Values\n+        psi.setEventDataValues( workContext.getEventDataValueMap().get( event.getUid() ) );\n \n         Date dueDate = new Date();\n \n", "next_change": {"commit": "02336c9611c0dd85d5038223bddbfdebc0aae526", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/mapper/ProgramStageInstanceMapper.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/mapper/ProgramStageInstanceMapper.java\ndeleted file mode 100644\nindex 2194cf770c..0000000000\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/mapper/ProgramStageInstanceMapper.java\n+++ /dev/null\n", "chunk": "@@ -1,232 +0,0 @@\n-package org.hisp.dhis.dxf2.events.importer.mapper;\n-\n-/*\n- * Copyright (c) 2004-2020, University of Oslo\n- * All rights reserved.\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions are met:\n- * Redistributions of source code must retain the above copyright notice, this\n- * list of conditions and the following disclaimer.\n- *\n- * Redistributions in binary form must reproduce the above copyright notice,\n- * this list of conditions and the following disclaimer in the documentation\n- * and/or other materials provided with the distribution.\n- * Neither the name of the HISP project nor the names of its contributors may\n- * be used to endorse or promote products derived from this software without\n- * specific prior written permission.\n- *\n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n- * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n- * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n- * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n- * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n- * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n- * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n- * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n- * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- */\n-\n-import static java.util.Collections.emptyList;\n-import static java.util.stream.Collectors.toList;\n-import static org.apache.commons.collections4.CollectionUtils.isNotEmpty;\n-import static org.hisp.dhis.common.IdScheme.CODE;\n-import static org.hisp.dhis.common.IdScheme.UID;\n-import static org.hisp.dhis.event.EventStatus.fromInt;\n-import static org.hisp.dhis.util.DateUtils.parseDate;\n-\n-import java.util.Date;\n-import java.util.List;\n-import java.util.Optional;\n-\n-import org.hisp.dhis.dxf2.common.ImportOptions;\n-import org.hisp.dhis.dxf2.events.event.Event;\n-import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n-import org.hisp.dhis.organisationunit.OrganisationUnit;\n-import org.hisp.dhis.program.ProgramStage;\n-import org.hisp.dhis.program.ProgramStageInstance;\n-import org.hisp.dhis.trackedentitycomment.TrackedEntityComment;\n-\n-/**\n- * @author Luciano Fiandesio\n- */\n-public class ProgramStageInstanceMapper extends AbstractMapper<Event, ProgramStageInstance>\n-{\n-    private final ProgramStageInstanceNoteMapper noteMapper;\n-\n-    public ProgramStageInstanceMapper( WorkContext ctx )\n-    {\n-        super( ctx );\n-        noteMapper = new ProgramStageInstanceNoteMapper( ctx );\n-    }\n-    \n-    @Override\n-    public ProgramStageInstance map( Event event )\n-    {\n-        ProgramStageInstance psi = workContext.getProgramStageInstanceMap().get( event.getUid() );\n-\n-        return psi == null ? mapForInsert( event ) : mapForUpdate( event, psi );\n-    }\n-\n-    private ProgramStageInstance mapForUpdate( Event event, ProgramStageInstance psi )\n-    {\n-        // Program Instance\n-        workContext.getProgramInstance( event.getUid() ).ifPresent( psi::setProgramInstance );\n-\n-        // Program Stage\n-        getProgramStage( event ).ifPresent( psi::setProgramStage );\n-\n-        // Org Unit\n-        getOrganisationUnit( event ).ifPresent( psi::setOrganisationUnit );\n-\n-        // Status and completed date are set in the Update Preprocessor //\n-\n-        // Attribute Option Combo\n-        psi.setAttributeOptionCombo( this.workContext.getCategoryOptionComboMap().get( event.getUid() ) );\n-\n-        // Geometry\n-        psi.setGeometry( event.getGeometry() );\n-\n-        // Notes\n-        if ( !event.getNotes().isEmpty() )\n-        {\n-            psi.setComments( convertNotes( event, this.workContext ) );\n-        }\n-\n-        // Data Values\n-        psi.setEventDataValues( workContext.getEventDataValueMap().get( event.getUid() ) );\n-\n-        if ( event.getDueDate() != null )\n-        {\n-            psi.setDueDate( parseDate( event.getDueDate() ) );\n-        }\n-\n-        setExecutionDate( event, psi );\n-\n-        if ( psi.getProgramStage() != null && psi.getProgramStage().isEnableUserAssignment() )\n-        {\n-            psi.setAssignedUser( this.workContext.getAssignedUserMap().get( event.getUid() ) );\n-        }\n-\n-        // CREATED AT CLIENT + UPDATED AT CLIENT\n-        psi.setCreatedAtClient( parseDate( event.getCreatedAtClient() ) );\n-        psi.setLastUpdatedAtClient( parseDate( event.getLastUpdatedAtClient() ) );\n-\n-        psi.setStoredBy( event.getStoredBy() );\n-        psi.setCompletedBy( event.getCompletedBy() );\n-\n-        return psi;\n-    }\n-\n-    public ProgramStageInstance mapForInsert( Event event )\n-    {\n-        ImportOptions importOptions = workContext.getImportOptions();\n-\n-        ProgramStageInstance psi = new ProgramStageInstance();\n-\n-        if ( importOptions.getIdSchemes().getProgramStageInstanceIdScheme().equals( CODE ) )\n-        {\n-            psi.setCode( event.getEvent() );\n-        }\n-        else if ( importOptions.getIdSchemes().getProgramStageIdScheme().equals( UID ) )\n-        {\n-            psi.setUid( event.getUid() );\n-        }\n-\n-        // Program Instance\n-        psi.setProgramInstance( this.workContext.getProgramInstanceMap().get( event.getUid() ) );\n-\n-        // Program Stage\n-        psi.setProgramStage( this.workContext.getProgramStage( importOptions.getIdSchemes().getProgramStageIdScheme(),\n-                event.getProgramStage() ) );\n-\n-        // Org Unit\n-        psi.setOrganisationUnit( this.workContext.getOrganisationUnitMap().get( event.getUid() ) );\n-\n-        // Status\n-        psi.setStatus( fromInt( event.getStatus().getValue() ) );\n-\n-        // Attribute Option Combo\n-        psi.setAttributeOptionCombo( this.workContext.getCategoryOptionComboMap().get( event.getUid() ) );\n-\n-        // Geometry\n-        psi.setGeometry( event.getGeometry() );\n-\n-        // Notes\n-        psi.setComments( convertNotes( event, this.workContext ) );\n-\n-        // Data Values\n-        psi.setEventDataValues( workContext.getEventDataValueMap().get( event.getUid() ) );\n-\n-        Date dueDate = new Date();\n-\n-        if ( event.getDueDate() != null )\n-        {\n-            dueDate = parseDate( event.getDueDate() );\n-        }\n-\n-        psi.setDueDate( dueDate );\n-        setCompletedDate( event, psi );\n-        // Note that execution date can be null\n-        setExecutionDate( event, psi );\n-\n-        if ( psi.getProgramStage() != null && psi.getProgramStage().isEnableUserAssignment() )\n-        {\n-            psi.setAssignedUser( this.workContext.getAssignedUserMap().get( event.getUid() ) );\n-        }\n-\n-        // CREATED AT CLIENT + UPDATED AT CLIENT\n-        psi.setCreatedAtClient( parseDate( event.getCreatedAtClient() ) );\n-        psi.setLastUpdatedAtClient( parseDate( event.getLastUpdatedAtClient() ) );\n-\n-        psi.setStoredBy( event.getStoredBy() );\n-        psi.setCompletedBy( event.getCompletedBy() );\n-\n-        return psi;\n-    }\n-\n-    private List<TrackedEntityComment> convertNotes( Event event, WorkContext ctx )\n-    {\n-        if ( isNotEmpty( event.getNotes() ) )\n-        {\n-            return event.getNotes().stream().filter( note -> ctx.getNotesMap().containsKey( note.getNote() ) )\n-                .map( noteMapper::map ).collect( toList() );\n-        }\n-\n-        return emptyList();\n-    }\n-\n-    private Optional<ProgramStage> getProgramStage( Event event )\n-    {\n-        return Optional.ofNullable( this.workContext.getProgramStage(\n-            this.workContext.getImportOptions().getIdSchemes().getProgramStageIdScheme(), event.getProgramStage() ) );\n-    }\n-\n-    private Optional<OrganisationUnit> getOrganisationUnit( Event event )\n-    {\n-        return Optional.ofNullable( this.workContext.getOrganisationUnitMap().get( event.getUid() ) );\n-    }\n-\n-    private void setExecutionDate( Event event, ProgramStageInstance psi )\n-    {\n-        if ( event.getEventDate() != null )\n-        {\n-            psi.setExecutionDate( parseDate( event.getEventDate() ) );\n-        }\n-    }\n-\n-    private void setCompletedDate( Event event, ProgramStageInstance psi )\n-    {\n-        // Completed Date // FIXME this logic should be moved to a preprocessor\n-        if ( psi.isCompleted() )\n-        {\n-            Date completedDate = new Date();\n-            if ( event.getCompletedDate() != null )\n-            {\n-                completedDate = parseDate( event.getCompletedDate() );\n-            }\n-            psi.setCompletedDate( completedDate );\n-        }\n-    }\n-}\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "ddb1f87fa26015b5fdb0e374ea863e499ec40280", "message": "Merge commit", "committedDate": null}, {"oid": "0d35843121f0ad3004fad015f1520c5b06a5c337", "committedDate": "2020-09-15 09:24:33 +0200", "message": "Merge 2.35 into master (#6149)"}, {"oid": "1bd8ee38126fbac22f805db44dad0cdcba7b14a6", "committedDate": "2020-09-23 11:30:37 +0200", "message": "fix: allow updating an Event with File data type [DHIS2-9559]"}, {"oid": "13cd21d76507450be96b06e13823b24cf357be04", "committedDate": "2020-10-30 09:38:34 +0100", "message": "feat: DHIS2-8911 adding LastUpdatedBy and CreatedBy user informations in events (#6521)"}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "771ac47275cc26280a5481fb4cc61a40f43a2e7d", "committedDate": "2022-04-20 12:28:30 +0200", "message": "fix: Update identifiers of data elements to uid (#10270)"}, {"oid": "5764c79d20ac77259e14685730771c0748bf8407", "committedDate": "2023-03-24 12:43:39 +0100", "message": "fix: createdAtClient for events can be written only on inserts, never on updates [DHIS2-14991] (#13407)"}, {"oid": "959c60d4f597187d0df2160fbbb675e5c4196e5c", "committedDate": "2023-04-27 16:46:18 +0200", "message": "chore: rename ProgramStageInstance to Event (#13731)"}, {"oid": "41e75ba362e65a726c88564679a43aadcebbc60a", "committedDate": "2023-05-03 07:50:28 +0200", "message": "chore: rename Event.programInstance to Event.enrollment (#13774)"}, {"oid": "58331f5dd72cc6da992105c673ff9edee11ef4b7", "committedDate": "2023-05-04 13:17:21 +0200", "message": "chore: Rename most programInstance occurrences [TECH-1547] (#13817)"}, {"oid": "02336c9611c0dd85d5038223bddbfdebc0aae526", "committedDate": "2023-05-11 19:34:26 +0200", "message": "chore: move old tracker dxf2 code into deprecated package (#13901)"}]}, {"oid": "cff319f2e53756424b8c85e316066dcbe0765f64", "url": "https://github.com/dhis2/dhis2-core/commit/cff319f2e53756424b8c85e316066dcbe0765f64", "message": "fix: Adding some more fixes relgated to update", "committedDate": "2020-04-27T15:05:20Z", "type": "commit"}, {"oid": "94310c673ebda91d6691529e016f6b84808fb7d8", "url": "https://github.com/dhis2/dhis2-core/commit/94310c673ebda91d6691529e016f6b84808fb7d8", "message": "simplied coc fetching", "committedDate": "2020-04-27T15:05:20Z", "type": "commit"}, {"oid": "9989a74f0ebc6e510979406070b1997aad6c33f1", "url": "https://github.com/dhis2/dhis2-core/commit/9989a74f0ebc6e510979406070b1997aad6c33f1", "message": "fix: Fixing bean injection issue", "committedDate": "2020-04-27T15:05:39Z", "type": "commit"}, {"oid": "55a0a02f8c28bf1b5dc2c2d07f054d62d1e00ed2", "url": "https://github.com/dhis2/dhis2-core/commit/55a0a02f8c28bf1b5dc2c2d07f054d62d1e00ed2", "message": "add exception, add unit test", "committedDate": "2020-04-27T15:05:39Z", "type": "commit"}, {"oid": "597c56815e29b1896caf413d110cb4aaabea827e", "url": "https://github.com/dhis2/dhis2-core/commit/597c56815e29b1896caf413d110cb4aaabea827e", "message": "add uid preprocessor", "committedDate": "2020-04-27T15:06:31Z", "type": "commit"}, {"oid": "1341d670cc0f02db839853e96e4808868a32bc4b", "url": "https://github.com/dhis2/dhis2-core/commit/1341d670cc0f02db839853e96e4808868a32bc4b", "message": "fixes after rebase", "committedDate": "2020-04-27T15:50:56Z", "type": "commit"}, {"oid": "23804e9a6861289c8f011c62534dc1a3479768a1", "url": "https://github.com/dhis2/dhis2-core/commit/23804e9a6861289c8f011c62534dc1a3479768a1", "message": "fix: Using the correct update validator factory", "committedDate": "2020-04-28T09:11:41Z", "type": "commit"}, {"oid": "492a7375407c8ad756c081e639d537eb85bf6a66", "url": "https://github.com/dhis2/dhis2-core/commit/492a7375407c8ad756c081e639d537eb85bf6a66", "message": "Merge branch 'master' of https://github.com/dhis2/dhis2-core into POST_EVENT_PERFORMANCE", "committedDate": "2020-04-28T09:31:57Z", "type": "commit"}, {"oid": "cab517b4376316f631f3cb845c4b17f758a98462", "url": "https://github.com/dhis2/dhis2-core/commit/cab517b4376316f631f3cb845c4b17f758a98462", "message": "chore: Pulling master", "committedDate": "2020-04-28T09:33:04Z", "type": "commit"}, {"oid": "ba1f91c027b67ebe27dd38944075e17982bae5b4", "url": "https://github.com/dhis2/dhis2-core/commit/ba1f91c027b67ebe27dd38944075e17982bae5b4", "message": "fix: fix for insert/update of created/lastupdated", "committedDate": "2020-04-28T09:48:09Z", "type": "commit"}, {"oid": "ca1357ed16bd60574f28b28166d0f0a61ec46808", "url": "https://github.com/dhis2/dhis2-core/commit/ca1357ed16bd60574f28b28166d0f0a61ec46808", "message": "- Simplifed logic to INSERT a PSI\n- DataValues are inserted when adding the PSI\n- Better exception handling", "committedDate": "2020-04-28T13:27:04Z", "type": "commit"}, {"oid": "ecc28f50653a82097ba3f3352c344f53c4a172f1", "url": "https://github.com/dhis2/dhis2-core/commit/ecc28f50653a82097ba3f3352c344f53c4a172f1", "message": "feat: Adding skeleton support for update/retry.", "committedDate": "2020-04-28T14:07:54Z", "type": "commit"}, {"oid": "2705a9a1eb249cddeb666b1588836747424c3ae4", "url": "https://github.com/dhis2/dhis2-core/commit/2705a9a1eb249cddeb666b1588836747424c3ae4", "message": "wip: fix import summary", "committedDate": "2020-04-28T14:24:13Z", "type": "commit"}, {"oid": "a337c49bbe5c945631616093e36a119fecbd1379", "url": "https://github.com/dhis2/dhis2-core/commit/a337c49bbe5c945631616093e36a119fecbd1379", "message": "fix merge conflicts", "committedDate": "2020-04-28T14:30:00Z", "type": "commit"}, {"oid": "493b4b58123c1cfd3a0be6f3fb1b6b3c6e372492", "url": "https://github.com/dhis2/dhis2-core/commit/493b4b58123c1cfd3a0be6f3fb1b6b3c6e372492", "message": "fixed UID assignment and fixed import summary logic", "committedDate": "2020-04-28T16:08:03Z", "type": "commit"}, {"oid": "f22aa69ccab93478ae86dd5e549b0d57f03bcd0b", "url": "https://github.com/dhis2/dhis2-core/commit/f22aa69ccab93478ae86dd5e549b0d57f03bcd0b", "message": "refactor: tiny code fix", "committedDate": "2020-04-28T16:11:51Z", "type": "commit"}, {"oid": "eaafdf7cb127f4921016154b506144307da35c55", "url": "https://github.com/dhis2/dhis2-core/commit/eaafdf7cb127f4921016154b506144307da35c55", "message": "Merge branch 'POST_EVENT_PERFORMANCE' of https://github.com/dhis2/dhis2-core into POST_EVENT_PERFORMANCE", "committedDate": "2020-04-28T16:12:02Z", "type": "commit"}, {"oid": "128915ca19f99b1401e8423eb655d5dc4474a273", "url": "https://github.com/dhis2/dhis2-core/commit/128915ca19f99b1401e8423eb655d5dc4474a273", "message": "fixed: NPE during ACL validation due to missing data", "committedDate": "2020-04-28T17:24:02Z", "type": "commit"}, {"oid": "4e95489c92eff1d14b8ffec4e5d25a667518236a", "url": "https://github.com/dhis2/dhis2-core/commit/4e95489c92eff1d14b8ffec4e5d25a667518236a", "message": "refactor: WorkContextLoader refactoring\n\nRefactor of the WorkContextLoader, so that each \"loader\" has its own\nclass. Main advantage is that loaders can be now (potentiall) be\nexecuted in parallel for additional speed", "committedDate": "2020-04-29T07:55:44Z", "type": "commit"}, {"oid": "5bf80c68547b268f821ba955683ecac2136504c4", "url": "https://github.com/dhis2/dhis2-core/commit/5bf80c68547b268f821ba955683ecac2136504c4", "message": "refactor: Extracting event importing into components", "committedDate": "2020-04-29T11:34:30Z", "type": "commit"}, {"oid": "0109001743c3303b9eedef11009e32610eff936b", "url": "https://github.com/dhis2/dhis2-core/commit/0109001743c3303b9eedef11009e32610eff936b", "message": "fix: event's ou contain full path", "committedDate": "2020-04-29T12:01:47Z", "type": "commit"}, {"oid": "a8dc7970671a992f1e6566c6fa99070d28d310ae", "url": "https://github.com/dhis2/dhis2-core/commit/a8dc7970671a992f1e6566c6fa99070d28d310ae", "message": "Merge branch 'POST_EVENT_PERFORMANCE' of https://github.com/dhis2/dhis2-core into POST_EVENT_PERFORMANCE\n\n* 'POST_EVENT_PERFORMANCE' of https://github.com/dhis2/dhis2-core:\n  refactor: Extracting event importing into components", "committedDate": "2020-04-29T12:01:55Z", "type": "commit"}, {"oid": "c581de67e035ac50cc09df61c5cb396426fc4bb2", "url": "https://github.com/dhis2/dhis2-core/commit/c581de67e035ac50cc09df61c5cb396426fc4bb2", "message": "test: add supplier unit test", "committedDate": "2020-04-29T12:19:56Z", "type": "commit"}, {"oid": "e3f51af4bfba6812b886adba5f0b6543d4da3da7", "url": "https://github.com/dhis2/dhis2-core/commit/e3f51af4bfba6812b886adba5f0b6543d4da3da7", "message": "chore: fix header", "committedDate": "2020-04-29T12:28:06Z", "type": "commit"}, {"oid": "420aefbf4a2f3e91650dc39530c93c55cb5a3c1d", "url": "https://github.com/dhis2/dhis2-core/commit/420aefbf4a2f3e91650dc39530c93c55cb5a3c1d", "message": "chore: fix imports", "committedDate": "2020-04-29T12:30:10Z", "type": "commit"}, {"oid": "0f648cd31402ca430d3a2a7b656377e0bf255d92", "url": "https://github.com/dhis2/dhis2-core/commit/0f648cd31402ca430d3a2a7b656377e0bf255d92", "message": "chore: add unit tests", "committedDate": "2020-04-29T16:17:02Z", "type": "commit"}, {"oid": "e63c166182087bd309b37ea96085048bae28a480", "url": "https://github.com/dhis2/dhis2-core/commit/e63c166182087bd309b37ea96085048bae28a480", "message": "refactor: Clean-up of AbstractEventService nad JacksonEventService", "committedDate": "2020-04-29T17:17:39Z", "type": "commit"}, {"oid": "debe3bfa365cc50cf81ec020daed71fe37ed5253", "url": "https://github.com/dhis2/dhis2-core/commit/debe3bfa365cc50cf81ec020daed71fe37ed5253", "message": "refactor: Renaming ServiceFacade class", "committedDate": "2020-04-29T17:19:37Z", "type": "commit"}, {"oid": "3b6aa6447c5d475547ca02610d0a6fe546d7e71e", "url": "https://github.com/dhis2/dhis2-core/commit/3b6aa6447c5d475547ca02610d0a6fe546d7e71e", "message": "Merge branch 'POST_EVENT_PERFORMANCE' of https://github.com/dhis2/dhis2-core into POST_EVENT_PERFORMANCE\n\n* 'POST_EVENT_PERFORMANCE' of https://github.com/dhis2/dhis2-core:\n  refactor: Renaming ServiceFacade class\n  refactor: Clean-up of AbstractEventService nad JacksonEventService", "committedDate": "2020-04-30T11:09:06Z", "type": "commit"}, {"oid": "a8e68c2b0d51c2495ee436bb0209d068e3f345ae", "url": "https://github.com/dhis2/dhis2-core/commit/a8e68c2b0d51c2495ee436bb0209d068e3f345ae", "message": "fix: bug fix and refactoring", "committedDate": "2020-04-30T13:58:43Z", "type": "commit"}, {"oid": "d3b71841ab6a9d2d6fe206b108efded0517396c5", "url": "https://github.com/dhis2/dhis2-core/commit/d3b71841ab6a9d2d6fe206b108efded0517396c5", "message": "Merge branch 'master' of https://github.com/dhis2/dhis2-core into POST_EVENT_PERFORMANCE", "committedDate": "2020-04-30T13:58:59Z", "type": "commit"}, {"oid": "5596b0e33f8231066c1f945748b1c0bedfe4ad22", "url": "https://github.com/dhis2/dhis2-core/commit/5596b0e33f8231066c1f945748b1c0bedfe4ad22", "message": "Removed Hibernate for CocLoader, added unit tests", "committedDate": "2020-04-30T16:38:14Z", "type": "commit"}, {"oid": "ad63ad2ef9bf7427f525a46c956081a48cd10c8b", "url": "https://github.com/dhis2/dhis2-core/commit/ad63ad2ef9bf7427f525a46c956081a48cd10c8b", "message": "Merge branch 'POST_EVENT_PERFORMANCE' of https://github.com/dhis2/dhis2-core into POST_EVENT_PERFORMANCE\n\n* 'POST_EVENT_PERFORMANCE' of https://github.com/dhis2/dhis2-core:\n  fix: bug fix and refactoring\n  chore(translations): sync translations from transifex (master)", "committedDate": "2020-04-30T16:38:41Z", "type": "commit"}, {"oid": "b61733fa42ff674882a5191758e26e0d238efdda", "url": "https://github.com/dhis2/dhis2-core/commit/b61733fa42ff674882a5191758e26e0d238efdda", "message": "Merge branch 'master' of https://github.com/dhis2/dhis2-core into POST_EVENT_PERFORMANCE", "committedDate": "2020-05-04T07:17:14Z", "type": "commit"}, {"oid": "0be20aad78b08b224d8ca9be8f0ed66d6174fa0f", "url": "https://github.com/dhis2/dhis2-core/commit/0be20aad78b08b224d8ca9be8f0ed66d6174fa0f", "message": "attribute option combo loader unit tests", "committedDate": "2020-05-04T09:06:51Z", "type": "commit"}, {"oid": "353bf532294c0476d59375c05923575268d8f7b7", "url": "https://github.com/dhis2/dhis2-core/commit/353bf532294c0476d59375c05923575268d8f7b7", "message": "fix: load ACL data for programs", "committedDate": "2020-05-04T11:45:56Z", "type": "commit"}, {"oid": "65b02bd5ba917a1fcf71290357c5fef4f5ea1395", "url": "https://github.com/dhis2/dhis2-core/commit/65b02bd5ba917a1fcf71290357c5fef4f5ea1395", "message": "fix: load user and usergroup access for program stages", "committedDate": "2020-05-04T12:27:48Z", "type": "commit"}, {"oid": "2b52e44928a96c8704ad065eeff03e6d3adf69d4", "url": "https://github.com/dhis2/dhis2-core/commit/2b52e44928a96c8704ad065eeff03e6d3adf69d4", "message": "fix: add useraccess and usergroup access for trackedentitytype", "committedDate": "2020-05-04T12:56:01Z", "type": "commit"}, {"oid": "9158ee6074a90e4ddf77f1ed901dab0eb2016e97", "url": "https://github.com/dhis2/dhis2-core/commit/9158ee6074a90e4ddf77f1ed901dab0eb2016e97", "message": "fix: load User Group and Users\n\nIn order for the security layer to work, each Group Access-aware entity\n(Program, Program Stage and Tracked Entity Type) must link the User\nGroup to the actual Users in the group.\nThe WorkContext now also load and caches this relationship.", "committedDate": "2020-05-04T15:01:41Z", "type": "commit"}, {"oid": "a665b0be18484fd9f44ba1a5a80f42c36d3ff309", "url": "https://github.com/dhis2/dhis2-core/commit/a665b0be18484fd9f44ba1a5a80f42c36d3ff309", "message": "reuse sql in program supplier", "committedDate": "2020-05-04T15:19:57Z", "type": "commit"}, {"oid": "0b36bf3869e13644d816716567d10cd941ac9220", "url": "https://github.com/dhis2/dhis2-core/commit/0b36bf3869e13644d816716567d10cd941ac9220", "message": "fix: Adding datavalues to update and handling query exception", "committedDate": "2020-05-04T17:57:26Z", "type": "commit"}, {"oid": "c928e64ca34537a6aa93eca459f0c87b92d73b3a", "url": "https://github.com/dhis2/dhis2-core/commit/c928e64ca34537a6aa93eca459f0c87b92d73b3a", "message": "Merge branch 'POST_EVENT_PERFORMANCE' of https://github.com/dhis2/dhis2-core into POST_EVENT_PERFORMANCE", "committedDate": "2020-05-04T17:58:04Z", "type": "commit"}, {"oid": "9644b911b341ea77ac0351b1d54cb468c69108cf", "url": "https://github.com/dhis2/dhis2-core/commit/9644b911b341ea77ac0351b1d54cb468c69108cf", "message": "went through todos in temp class", "committedDate": "2020-05-05T08:05:08Z", "type": "commit"}, {"oid": "0d8213bb428dc25bd36192ece643977b2131ac49", "url": "https://github.com/dhis2/dhis2-core/commit/0d8213bb428dc25bd36192ece643977b2131ac49", "message": "fix: add missing validation check\n\nCheck that if Program Stage is not repeatable and the corresponding\nProgram Instance has at least one Event, then fail", "committedDate": "2020-05-05T10:03:07Z", "type": "commit"}, {"oid": "dc25661d17e95b7c9598999ac5f5614900092b46", "url": "https://github.com/dhis2/dhis2-core/commit/dc25661d17e95b7c9598999ac5f5614900092b46", "message": "fix: add AttributeOptionCombo date validation", "committedDate": "2020-05-05T12:32:56Z", "type": "commit"}, {"oid": "ad97368d5235d9bc20f2cc0ff840a0d00d2b33da", "url": "https://github.com/dhis2/dhis2-core/commit/ad97368d5235d9bc20f2cc0ff840a0d00d2b33da", "message": "fix: Draft TEI update for the Update flow (needs test)", "committedDate": "2020-05-05T12:42:50Z", "type": "commit"}, {"oid": "4b7de70fe4a201f7cbc33f529355f49da9d613ce", "url": "https://github.com/dhis2/dhis2-core/commit/4b7de70fe4a201f7cbc33f529355f49da9d613ce", "message": "fix: add setting of Geometry to event using Postprocessor", "committedDate": "2020-05-05T15:13:02Z", "type": "commit"}, {"oid": "7b9977110bda02f1cae87d30e49479237da75bac", "url": "https://github.com/dhis2/dhis2-core/commit/7b9977110bda02f1cae87d30e49479237da75bac", "message": "chore: add test for geometry preprocessor", "committedDate": "2020-05-05T15:22:46Z", "type": "commit"}, {"oid": "8b8fccefcaad067b6652ae797b80011674b8f62d", "url": "https://github.com/dhis2/dhis2-core/commit/8b8fccefcaad067b6652ae797b80011674b8f62d", "message": "fix: Adding the TEI update for Events Update.", "committedDate": "2020-05-05T15:51:31Z", "type": "commit"}, {"oid": "36473fc92dcda6cab1c6be3b6992461d212804b0", "url": "https://github.com/dhis2/dhis2-core/commit/36473fc92dcda6cab1c6be3b6992461d212804b0", "message": "Merge branch 'POST_EVENT_PERFORMANCE' of https://github.com/dhis2/dhis2-core into POST_EVENT_PERFORMANCE", "committedDate": "2020-05-05T15:51:41Z", "type": "commit"}, {"oid": "1b9506d31c7983cb131691a94f87d2cee8c5fedc", "url": "https://github.com/dhis2/dhis2-core/commit/1b9506d31c7983cb131691a94f87d2cee8c5fedc", "message": "Merge branch 'master' of https://github.com/dhis2/dhis2-core into POST_EVENT_PERFORMANCE", "committedDate": "2020-05-05T15:53:20Z", "type": "commit"}, {"oid": "c5fb4eb0c160d7e990a15d8bd4c105e01e41afa7", "url": "https://github.com/dhis2/dhis2-core/commit/c5fb4eb0c160d7e990a15d8bd4c105e01e41afa7", "message": "fix: Preventing NPE", "committedDate": "2020-05-06T09:57:26Z", "type": "commit"}, {"oid": "a051997ecc13da565c0a6d6e1393711191aaba8f", "url": "https://github.com/dhis2/dhis2-core/commit/a051997ecc13da565c0a6d6e1393711191aaba8f", "message": "Merge branch 'master' of https://github.com/dhis2/dhis2-core into POST_EVENT_PERFORMANCE", "committedDate": "2020-05-06T09:57:34Z", "type": "commit"}, {"oid": "f5007b4d6229c59d66ecca4c30275263f29431c8", "url": "https://github.com/dhis2/dhis2-core/commit/f5007b4d6229c59d66ecca4c30275263f29431c8", "message": "fix: Removing TODO comments", "committedDate": "2020-05-06T14:52:37Z", "type": "commit"}, {"oid": "26d36abfd3748f917de51cc4be6efbe3c36e59be", "url": "https://github.com/dhis2/dhis2-core/commit/26d36abfd3748f917de51cc4be6efbe3c36e59be", "message": "fix: moved Program Instance validation logic to own rule", "committedDate": "2020-05-06T15:43:04Z", "type": "commit"}, {"oid": "32f31affbcfd9e9062fee9fdb410cd1845d1a006", "url": "https://github.com/dhis2/dhis2-core/commit/32f31affbcfd9e9062fee9fdb410cd1845d1a006", "message": "fix: added idscheme related  columns to workcontext queries", "committedDate": "2020-05-06T16:05:50Z", "type": "commit"}, {"oid": "ffa1dea233ce8a30c270694d96932b208b2c5999", "url": "https://github.com/dhis2/dhis2-core/commit/ffa1dea233ce8a30c270694d96932b208b2c5999", "message": "fix: handle IdSchemes across Import", "committedDate": "2020-05-06T19:58:46Z", "type": "commit"}, {"oid": "e52a6fe94daa4a2b9d5446d1c51eddb45a782f7b", "url": "https://github.com/dhis2/dhis2-core/commit/e52a6fe94daa4a2b9d5446d1c51eddb45a782f7b", "message": "fix: error with recordset in program supplier", "committedDate": "2020-05-06T20:10:47Z", "type": "commit"}, {"oid": "158265994708859a7f28736536c5bf465eb559dd", "url": "https://github.com/dhis2/dhis2-core/commit/158265994708859a7f28736536c5bf465eb559dd", "message": "Merge branch 'POST_EVENT_PERFORMANCE' of https://github.com/dhis2/dhis2-core into POST_EVENT_PERFORMANCE", "committedDate": "2020-05-07T13:03:21Z", "type": "commit"}, {"oid": "d0572bc6c028eeee1b6eea3f0537b1e9127f5b4b", "url": "https://github.com/dhis2/dhis2-core/commit/d0572bc6c028eeee1b6eea3f0537b1e9127f5b4b", "message": "refactor: Unifying event import classes and packages", "committedDate": "2020-05-07T14:38:35Z", "type": "commit"}, {"oid": "d659885ca3ec9d279f0984f6c92ddfcc483b8091", "url": "https://github.com/dhis2/dhis2-core/commit/d659885ca3ec9d279f0984f6c92ddfcc483b8091", "message": "refactor: Making the processor factories more generic", "committedDate": "2020-05-11T13:04:21Z", "type": "commit"}, {"oid": "26ad7d6c09f3fb7e5c6303713698d16570dc4092", "url": "https://github.com/dhis2/dhis2-core/commit/26ad7d6c09f3fb7e5c6303713698d16570dc4092", "message": "Merge branch 'master' of https://github.com/dhis2/dhis2-core into POST_EVENT_PERFORMANCE", "committedDate": "2020-05-11T13:05:39Z", "type": "commit"}, {"oid": "ffbe24fcacf4254a243a74c1c68bd71b864f4efb", "url": "https://github.com/dhis2/dhis2-core/commit/ffbe24fcacf4254a243a74c1c68bd71b864f4efb", "message": "refactor: Making the validation/checker factory generic", "committedDate": "2020-05-11T14:46:53Z", "type": "commit"}, {"oid": "69394676590fae59f6027c8b45cc19b276136d50", "url": "https://github.com/dhis2/dhis2-core/commit/69394676590fae59f6027c8b45cc19b276136d50", "message": "fix: Adding missing post-processor to update flow", "committedDate": "2020-05-11T16:57:10Z", "type": "commit"}, {"oid": "54d0c48703934027015521f71aea5356553cf7a5", "url": "https://github.com/dhis2/dhis2-core/commit/54d0c48703934027015521f71aea5356553cf7a5", "message": "chore: removed unused methods and variables", "committedDate": "2020-05-11T19:04:39Z", "type": "commit"}, {"oid": "96d4fc0b19188a4eac60b08487d5092ef0bca90d", "url": "https://github.com/dhis2/dhis2-core/commit/96d4fc0b19188a4eac60b08487d5092ef0bca90d", "message": "DataValue validation WIP", "committedDate": "2020-05-11T19:05:58Z", "type": "commit"}, {"oid": "35f3a293a679ef28807145633930be39db6364a8", "url": "https://github.com/dhis2/dhis2-core/commit/35f3a293a679ef28807145633930be39db6364a8", "message": "DataValue validation WIP - 2", "committedDate": "2020-05-11T19:06:02Z", "type": "commit"}, {"oid": "71f5ca58ded1cd14057cef51a7c1ba1d7e713422", "url": "https://github.com/dhis2/dhis2-core/commit/71f5ca58ded1cd14057cef51a7c1ba1d7e713422", "message": "- Updated H2 to 1.4.200 in order to support JSON datatype\n- Switched to PGOject to save JSONB data\n- Removed AssignedUIDPreprocessor and moved the logic in the WorkContext loader\n- Removed \"MVCC=TRUE\" from the H2 connection string, since it's no longer compatible with 1.4.200\n- Fixed bug with Orgunits and single parent", "committedDate": "2020-05-11T19:08:47Z", "type": "commit"}, {"oid": "a877658b3844282020fb2f9d15f1ca4879e44fb6", "url": "https://github.com/dhis2/dhis2-core/commit/a877658b3844282020fb2f9d15f1ca4879e44fb6", "message": "Made all validation checks \"final\", so that the validation loop stops as soon as it encounters an error", "committedDate": "2020-05-11T19:08:50Z", "type": "commit"}, {"oid": "74aceb3bc8c6fee8188dd563342bfe643eec434b", "url": "https://github.com/dhis2/dhis2-core/commit/74aceb3bc8c6fee8188dd563342bfe643eec434b", "message": "Add Javadoc", "committedDate": "2020-05-11T19:08:50Z", "type": "commit"}, {"oid": "b8ec7807347eb526c1112388fafb859a4a05417b", "url": "https://github.com/dhis2/dhis2-core/commit/b8ec7807347eb526c1112388fafb859a4a05417b", "message": "various fixes", "committedDate": "2020-05-11T19:08:50Z", "type": "commit"}, {"oid": "9a8e50341a58b40c0f38cade043d6ef116305cc5", "url": "https://github.com/dhis2/dhis2-core/commit/9a8e50341a58b40c0f38cade043d6ef116305cc5", "message": "removed unused import", "committedDate": "2020-05-11T19:09:21Z", "type": "commit"}, {"oid": "32aaa4ce8b6e5081a58f47b88bad608e0d33d15d", "url": "https://github.com/dhis2/dhis2-core/commit/32aaa4ce8b6e5081a58f47b88bad608e0d33d15d", "message": "Fixed several issues that prevented unit test to pass\n\n- Removed cache for category option combo loading and made program cache \"smarter\"\n- JDBC batch insert is now using jdbcTemplate, in order to participate in an existing Spring transaction\n- Fixed unit tests so that data fixtures are flushed to db prior to executing tests", "committedDate": "2020-05-12T19:35:40Z", "type": "commit"}, {"oid": "4b1fb576b0294d2cf6aa3209957774e4f9bb9de8", "url": "https://github.com/dhis2/dhis2-core/commit/4b1fb576b0294d2cf6aa3209957774e4f9bb9de8", "message": "- fixed bug that didn't correctly check the presence of a PSI in the dataase\n- prevent NPE if a import strategy is missing, during validation and preprocssing\n- force clean session in test", "committedDate": "2020-05-13T09:11:05Z", "type": "commit"}, {"oid": "ddcd70181f8c2b27cc070f07157aea0482dfa2d0", "url": "https://github.com/dhis2/dhis2-core/commit/ddcd70181f8c2b27cc070f07157aea0482dfa2d0", "message": "fix: better pre-loading of ProgramInstances", "committedDate": "2020-05-13T13:54:11Z", "type": "commit"}, {"oid": "08332ed88c6797acc9bba8a8b00f40c6be78e765", "url": "https://github.com/dhis2/dhis2-core/commit/08332ed88c6797acc9bba8a8b00f40c6be78e765", "message": "fix: more tests fixed", "committedDate": "2020-05-13T14:36:03Z", "type": "commit"}, {"oid": "e1c475d8cc73f09ebf9b628f0a1461bd4eea8532", "url": "https://github.com/dhis2/dhis2-core/commit/e1c475d8cc73f09ebf9b628f0a1461bd4eea8532", "message": "fix: all tests green", "committedDate": "2020-05-13T15:20:22Z", "type": "commit"}, {"oid": "5023cd54baa57bf68ae741e0858d77e4bd4a79de", "url": "https://github.com/dhis2/dhis2-core/commit/5023cd54baa57bf68ae741e0858d77e4bd4a79de", "message": "fix: fixes for integration tests", "committedDate": "2020-05-13T15:40:58Z", "type": "commit"}, {"oid": "eb37dcaf8b7628af1aa3bf98c7c5288e39386087", "url": "https://github.com/dhis2/dhis2-core/commit/eb37dcaf8b7628af1aa3bf98c7c5288e39386087", "message": "refactor: Delete events flow", "committedDate": "2020-05-13T16:36:21Z", "type": "commit"}, {"oid": "bba4a1a042cd21b47c48568645828c323cf066d2", "url": "https://github.com/dhis2/dhis2-core/commit/bba4a1a042cd21b47c48568645828c323cf066d2", "message": "fix: Merging conflicts", "committedDate": "2020-05-13T17:10:51Z", "type": "commit"}, {"oid": "d55a8c58115a9e347465aaebbedb26e455217297", "url": "https://github.com/dhis2/dhis2-core/commit/d55a8c58115a9e347465aaebbedb26e455217297", "message": "Merge branch 'master' of https://github.com/dhis2/dhis2-core into POST_EVENT_PERFORMANCE", "committedDate": "2020-05-14T09:08:50Z", "type": "commit"}, {"oid": "74ae17cfa6640e82d40b8cd4f3ee8facfb7eb2da", "url": "https://github.com/dhis2/dhis2-core/commit/74ae17cfa6640e82d40b8cd4f3ee8facfb7eb2da", "message": "chore: Moving variable declaration down", "committedDate": "2020-05-14T09:54:08Z", "type": "commit"}, {"oid": "75ac4955c98610812aa2dadd10f41c70f7ece3a4", "url": "https://github.com/dhis2/dhis2-core/commit/75ac4955c98610812aa2dadd10f41c70f7ece3a4", "message": "chore: cleanup, added tests", "committedDate": "2020-05-14T11:50:11Z", "type": "commit"}, {"oid": "9e95334c4792669079972e96cddf17e3e344a9d0", "url": "https://github.com/dhis2/dhis2-core/commit/9e95334c4792669079972e96cddf17e3e344a9d0", "message": "chore: minor refactoring of factories", "committedDate": "2020-05-14T11:50:11Z", "type": "commit"}, {"oid": "f4dc36ddb18905be91a692f89763794c9c690298", "url": "https://github.com/dhis2/dhis2-core/commit/f4dc36ddb18905be91a692f89763794c9c690298", "message": "chore: ignored test", "committedDate": "2020-05-14T13:16:48Z", "type": "commit"}, {"oid": "8d5f0dcdb48da3754558946ff089f931a1d20707", "url": "https://github.com/dhis2/dhis2-core/commit/8d5f0dcdb48da3754558946ff089f931a1d20707", "message": "chore: added space to ImportSummary message for increaded readibility", "committedDate": "2020-05-14T14:01:48Z", "type": "commit"}, {"oid": "68319190abd3eb858b11ea16b4e41a5749c5dedb", "url": "https://github.com/dhis2/dhis2-core/commit/68319190abd3eb858b11ea16b4e41a5749c5dedb", "message": "fix: handle persisting geometry for insert/update", "committedDate": "2020-05-14T15:34:46Z", "type": "commit"}, {"oid": "d57c0abd530f3606ec72a674d6c9dfaa70ca5e58", "url": "https://github.com/dhis2/dhis2-core/commit/d57c0abd530f3606ec72a674d6c9dfaa70ca5e58", "message": "Merge branch 'master' of https://github.com/dhis2/dhis2-core into POST_EVENT_PERFORMANCE", "committedDate": "2020-05-15T07:15:20Z", "type": "commit"}, {"oid": "0c4b51aef4cd463ec2a1e3aeb832159aa5f4ddfc", "url": "https://github.com/dhis2/dhis2-core/commit/0c4b51aef4cd463ec2a1e3aeb832159aa5f4ddfc", "message": "fix: Fixing event validation loop and preventing a few NPEs", "committedDate": "2020-05-15T10:01:09Z", "type": "commit"}, {"oid": "58fdb0526ab39c7e20b8ee71f2feb1a153eb6553", "url": "https://github.com/dhis2/dhis2-core/commit/58fdb0526ab39c7e20b8ee71f2feb1a153eb6553", "message": "fix: minor fix", "committedDate": "2020-05-15T10:03:27Z", "type": "commit"}, {"oid": "ae460d9b075b402eb456aa66b57a611019133a10", "url": "https://github.com/dhis2/dhis2-core/commit/ae460d9b075b402eb456aa66b57a611019133a10", "message": "Merge branch 'POST_EVENT_PERFORMANCE' of https://github.com/dhis2/dhis2-core into POST_EVENT_PERFORMANCE\n\n* 'POST_EVENT_PERFORMANCE' of https://github.com/dhis2/dhis2-core:\n  fix: Fixing event validation loop and preventing a few NPEs", "committedDate": "2020-05-15T10:10:15Z", "type": "commit"}, {"oid": "41e163d57a54466b3e3eb3b9a402e5698c522ab9", "url": "https://github.com/dhis2/dhis2-core/commit/41e163d57a54466b3e3eb3b9a402e5698c522ab9", "message": "fix: typo", "committedDate": "2020-05-15T10:19:44Z", "type": "commit"}, {"oid": "f22b27c28985687e3c7e66fa28ae1ea02e63eb08", "url": "https://github.com/dhis2/dhis2-core/commit/f22b27c28985687e3c7e66fa28ae1ea02e63eb08", "message": "chore: removed duplicated code", "committedDate": "2020-05-15T10:57:03Z", "type": "commit"}, {"oid": "b246797eb62e3fc150ec95297af37fa9be8b42ca", "url": "https://github.com/dhis2/dhis2-core/commit/b246797eb62e3fc150ec95297af37fa9be8b42ca", "message": "fix: cleaned up jdbc code for saving comments", "committedDate": "2020-05-15T12:12:52Z", "type": "commit"}, {"oid": "5cb7f41ce3a0c6ac0c2536bed2cec46bb1ba97c8", "url": "https://github.com/dhis2/dhis2-core/commit/5cb7f41ce3a0c6ac0c2536bed2cec46bb1ba97c8", "message": "refactor: Removing the isFinal() method from checkers", "committedDate": "2020-05-15T13:12:09Z", "type": "commit"}, {"oid": "1cc2ba73283289d87e3ba6fe6a4221239415b04f", "url": "https://github.com/dhis2/dhis2-core/commit/1cc2ba73283289d87e3ba6fe6a4221239415b04f", "message": "fix: Minor code style", "committedDate": "2020-05-15T14:53:54Z", "type": "commit"}, {"oid": "8a1c54d4a9d5767a9a502c2e7d765a2e4fb3b9b5", "url": "https://github.com/dhis2/dhis2-core/commit/8a1c54d4a9d5767a9a502c2e7d765a2e4fb3b9b5", "message": "Merge branch 'master' of https://github.com/dhis2/dhis2-core into POST_EVENT_PERFORMANCE", "committedDate": "2020-05-15T14:56:26Z", "type": "commit"}, {"oid": "0d10a3f5afe1decd5bf0458bfcfba7fa3cd63f7a", "url": "https://github.com/dhis2/dhis2-core/commit/0d10a3f5afe1decd5bf0458bfcfba7fa3cd63f7a", "message": "- fix notes loading in workcontext\n- fix assign uid to notes\n- use jdbc for updating notes\n- make sure sort orders for notes is respected", "committedDate": "2020-05-15T15:35:01Z", "type": "commit"}, {"oid": "a5e5d3c4242203a9214d428a50eef11cc0093f49", "url": "https://github.com/dhis2/dhis2-core/commit/a5e5d3c4242203a9214d428a50eef11cc0093f49", "message": "Merge branch 'POST_EVENT_PERFORMANCE' of https://github.com/dhis2/dhis2-core into POST_EVENT_PERFORMANCE\n\n* 'POST_EVENT_PERFORMANCE' of https://github.com/dhis2/dhis2-core:\n  fix: Minor code style\n  refactor: Removing the isFinal() method from checkers\n  test:  org unit deletion handlers (DHIS2-8549) (#5323)", "committedDate": "2020-05-15T15:39:27Z", "type": "commit"}, {"oid": "faeadaf0cce1bb2feedd4e933379e709c2976a28", "url": "https://github.com/dhis2/dhis2-core/commit/faeadaf0cce1bb2feedd4e933379e709c2976a28", "message": "chore: minor", "committedDate": "2020-05-15T16:11:59Z", "type": "commit"}]}