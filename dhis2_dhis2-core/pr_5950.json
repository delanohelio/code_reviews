{"pr_number": 5950, "pr_title": "feat: [DHIS2-7310] Add support for warnings in error reports", "pr_author": "enricocolasante", "pr_createdAt": "2020-08-18T11:39:26Z", "pr_url": "https://github.com/dhis2/dhis2-core/pull/5950", "timeline": [{"oid": "75a02d90ed737ca75d65881e38f2ed1c5f047d45", "url": "https://github.com/dhis2/dhis2-core/commit/75a02d90ed737ca75d65881e38f2ed1c5f047d45", "message": "[DHIS2-7310] Add support for warnings in error reports", "committedDate": "2020-08-18T11:38:25Z", "type": "commit"}, {"oid": "ff1fb2cbfe0910125bbfe4323c606ff00e374383", "url": "https://github.com/dhis2/dhis2-core/commit/ff1fb2cbfe0910125bbfe4323c606ff00e374383", "message": "[DHIS2-7310] Add support for warnings in error reports", "committedDate": "2020-08-18T12:08:29Z", "type": "commit"}, {"oid": "0a6928349852c02330ee787c31e6db9cc4541d80", "url": "https://github.com/dhis2/dhis2-core/commit/0a6928349852c02330ee787c31e6db9cc4541d80", "message": "[DHIS2-7310] Add support for warnings in error reports", "committedDate": "2020-08-18T12:25:15Z", "type": "commit"}, {"oid": "b95c088121ef6601a5f4f50abc19db2345043414", "url": "https://github.com/dhis2/dhis2-core/commit/b95c088121ef6601a5f4f50abc19db2345043414", "message": "[DHIS2-7310] Add support for warnings in error reports", "committedDate": "2020-08-19T09:30:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzEwMjE5Mw==", "url": "https://github.com/dhis2/dhis2-core/pull/5950#discussion_r473102193", "body": "```suggestion\r\n    public TrackerWarningReport( Class<?> mainKlass, String warningMessage, TrackerErrorCode warningCode, int line,\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public TrackerWarningReport(Class<?> mainKlass, String warningMessage, TrackerErrorCode warningCode, int line,\n          \n          \n            \n                public TrackerWarningReport( Class<?> mainKlass, String warningMessage, TrackerErrorCode warningCode, int line,", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">public</span> TrackerWarningReport(<span class=\"pl-k\">Class&lt;?&gt;</span> mainKlass, <span class=\"pl-smi\">String</span> warningMessage, <span class=\"pl-smi\">TrackerErrorCode</span> warningCode, <span class=\"pl-k\">int</span> line,</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">public</span> TrackerWarningReport(<span class=\"x x-first x-last\"> </span><span class=\"pl-k\">Class&lt;?&gt;</span> mainKlass, <span class=\"pl-smi\">String</span> warningMessage, <span class=\"pl-smi\">TrackerErrorCode</span> warningCode, <span class=\"pl-k\">int</span> line,</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "stian-sandvold", "createdAt": "2020-08-19T15:07:41Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/report/TrackerWarningReport.java", "diffHunk": "@@ -0,0 +1,193 @@\n+package org.hisp.dhis.tracker.report;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import java.text.DateFormat;\n+import java.text.MessageFormat;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.List;\n+\n+import org.hisp.dhis.common.IdentifiableObject;\n+import org.hisp.dhis.tracker.TrackerIdScheme;\n+import org.hisp.dhis.tracker.TrackerIdentifier;\n+import org.hisp.dhis.tracker.bundle.TrackerBundle;\n+import org.hisp.dhis.tracker.domain.Enrollment;\n+import org.hisp.dhis.tracker.domain.Event;\n+import org.hisp.dhis.tracker.domain.TrackedEntity;\n+import org.hisp.dhis.util.ObjectUtils;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+import lombok.Builder;\n+import lombok.Data;\n+\n+/**\n+ * @author Enrico Colasante\n+ */\n+@Data\n+@Builder\n+public class TrackerWarningReport\n+{\n+    @JsonProperty\n+    private final Class<?> mainKlass;\n+\n+    private final String warningMessage;\n+\n+    @JsonProperty\n+    private String mainId;\n+\n+    @JsonProperty\n+    private Class<?> warningKlass;\n+\n+    @JsonProperty\n+    private final String[] warningProperties;\n+\n+    @JsonProperty\n+    private Object value;\n+\n+    private final int lineNumber;\n+\n+    private TrackerErrorCode warningCode;\n+\n+    private Object mainObject;\n+\n+    protected int listIndex;\n+\n+    public TrackerWarningReport(Class<?> mainKlass, String warningMessage, TrackerErrorCode warningCode, int line,", "originalCommit": "b95c088121ef6601a5f4f50abc19db2345043414", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzEwMjQzNQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5950#discussion_r473102435", "body": "```suggestion\r\n        public TrackerWarningReport build( TrackerBundle bundle )\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    public TrackerWarningReport build(TrackerBundle bundle )\n          \n          \n            \n                    public TrackerWarningReport build( TrackerBundle bundle )", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">public</span> <span class=\"pl-smi\">TrackerWarningReport</span> build(<span class=\"pl-smi\">TrackerBundle</span> bundle )</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">public</span> <span class=\"pl-smi\">TrackerWarningReport</span> build(<span class=\"x x-first x-last\"> </span><span class=\"pl-smi\">TrackerBundle</span> bundle )</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "stian-sandvold", "createdAt": "2020-08-19T15:08:00Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/report/TrackerWarningReport.java", "diffHunk": "@@ -0,0 +1,193 @@\n+package org.hisp.dhis.tracker.report;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import java.text.DateFormat;\n+import java.text.MessageFormat;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.List;\n+\n+import org.hisp.dhis.common.IdentifiableObject;\n+import org.hisp.dhis.tracker.TrackerIdScheme;\n+import org.hisp.dhis.tracker.TrackerIdentifier;\n+import org.hisp.dhis.tracker.bundle.TrackerBundle;\n+import org.hisp.dhis.tracker.domain.Enrollment;\n+import org.hisp.dhis.tracker.domain.Event;\n+import org.hisp.dhis.tracker.domain.TrackedEntity;\n+import org.hisp.dhis.util.ObjectUtils;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+import lombok.Builder;\n+import lombok.Data;\n+\n+/**\n+ * @author Enrico Colasante\n+ */\n+@Data\n+@Builder\n+public class TrackerWarningReport\n+{\n+    @JsonProperty\n+    private final Class<?> mainKlass;\n+\n+    private final String warningMessage;\n+\n+    @JsonProperty\n+    private String mainId;\n+\n+    @JsonProperty\n+    private Class<?> warningKlass;\n+\n+    @JsonProperty\n+    private final String[] warningProperties;\n+\n+    @JsonProperty\n+    private Object value;\n+\n+    private final int lineNumber;\n+\n+    private TrackerErrorCode warningCode;\n+\n+    private Object mainObject;\n+\n+    protected int listIndex;\n+\n+    public TrackerWarningReport(Class<?> mainKlass, String warningMessage, TrackerErrorCode warningCode, int line,\n+                                String mainId,\n+                                Class<?> warningKlass, String[] warningProperties, Object value )\n+    {\n+        this.mainKlass = mainKlass;\n+        this.warningMessage = warningMessage;\n+        this.warningCode = warningCode;\n+\n+        this.lineNumber = line;\n+        this.mainId = mainId;\n+        this.warningKlass = warningKlass;\n+        this.warningProperties = warningProperties;\n+        this.value = value;\n+\n+    }\n+\n+    @JsonProperty\n+    public TrackerErrorCode getWarningCode()\n+    {\n+        return warningCode;\n+    }\n+\n+    @JsonProperty\n+    public String getMessage()\n+    {\n+        return warningMessage;\n+    }\n+\n+    public static class TrackerWarningReportBuilder\n+    {\n+        private final List<Object> arguments = new ArrayList<>();\n+\n+        public TrackerWarningReportBuilder addArg( Object arg )\n+        {\n+            this.arguments.add( arg );\n+            return this;\n+        }\n+\n+        public TrackerWarningReport build(TrackerBundle bundle )", "originalCommit": "b95c088121ef6601a5f4f50abc19db2345043414", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzEwMzI1NQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5950#discussion_r473103255", "body": "```suggestion\r\n        programRule.getProgramRuleActions().add( programRuleActionWarning );\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    programRule.getProgramRuleActions().add(programRuleActionWarning);\n          \n          \n            \n                    programRule.getProgramRuleActions().add( programRuleActionWarning );", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        programRule<span class=\"pl-k\">.</span>getProgramRuleActions()<span class=\"pl-k\">.</span>add(programRuleActionWarning);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        programRule<span class=\"pl-k\">.</span>getProgramRuleActions()<span class=\"pl-k\">.</span>add(<span class=\"x x-first x-last\"> </span>programRuleActionWarning<span class=\"x x-first x-last\"> </span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "stian-sandvold", "createdAt": "2020-08-19T15:09:12Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/programrule/ProgramRuleIntegrationTest.java", "diffHunk": "@@ -0,0 +1,170 @@\n+package org.hisp.dhis.tracker.programrule;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import static org.junit.Assert.*;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.hisp.dhis.IntegrationTestBase;\n+import org.hisp.dhis.common.IdentifiableObject;\n+import org.hisp.dhis.dxf2.metadata.objectbundle.*;\n+import org.hisp.dhis.dxf2.metadata.objectbundle.feedback.ObjectBundleValidationReport;\n+import org.hisp.dhis.importexport.ImportStrategy;\n+import org.hisp.dhis.preheat.PreheatIdentifier;\n+import org.hisp.dhis.program.Program;\n+import org.hisp.dhis.programrule.*;\n+import org.hisp.dhis.render.RenderFormat;\n+import org.hisp.dhis.render.RenderService;\n+import org.hisp.dhis.tracker.TrackerImportParams;\n+import org.hisp.dhis.tracker.TrackerImportService;\n+import org.hisp.dhis.tracker.bundle.TrackerBundleParams;\n+import org.hisp.dhis.tracker.report.TrackerImportReport;\n+import org.hisp.dhis.tracker.report.TrackerStatus;\n+import org.hisp.dhis.user.User;\n+import org.hisp.dhis.user.UserService;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.core.io.ClassPathResource;\n+\n+public class ProgramRuleIntegrationTest\n+    extends IntegrationTestBase\n+{\n+    @Override\n+    public boolean emptyDatabaseAfterTest()\n+    {\n+        return true;\n+    }\n+\n+    @Autowired\n+    private TrackerImportService trackerImportService;\n+\n+    @Autowired\n+    private RenderService _renderService;\n+\n+    @Autowired\n+    private UserService _userService;\n+\n+    @Autowired\n+    private ProgramRuleService programRuleService;\n+\n+    @Autowired\n+    private ProgramRuleActionService programRuleActionService;\n+\n+    @Autowired\n+    private ObjectBundleService objectBundleService;\n+\n+    @Autowired\n+    private ObjectBundleValidationService objectBundleValidationService;\n+\n+    private User userA;\n+\n+    @Override\n+    public void setUpTest()\n+        throws Exception\n+    {\n+        renderService = _renderService;\n+        userService = _userService;\n+\n+        Map<Class<? extends IdentifiableObject>, List<IdentifiableObject>> metadata = renderService\n+            .fromMetadata( new ClassPathResource( \"tracker/simple_metadata.json\" ).getInputStream(),\n+                RenderFormat.JSON );\n+\n+        ObjectBundleParams params = new ObjectBundleParams();\n+        params.setObjectBundleMode( ObjectBundleMode.COMMIT );\n+        params.setImportStrategy( ImportStrategy.CREATE );\n+        params.setObjects( metadata );\n+\n+        ObjectBundle bundle = objectBundleService.create( params );\n+        ObjectBundleValidationReport validationReport = objectBundleValidationService.validate( bundle );\n+        assertTrue( validationReport.getErrorReports().isEmpty() );\n+\n+        objectBundleService.commit( bundle );\n+\n+        Program program = bundle.getPreheat().get( PreheatIdentifier.UID, Program.class, \"BFcipDERJnf\" );\n+\n+        ProgramRule programRule = createProgramRule( 'A', program );\n+        programRuleService.addProgramRule( programRule );\n+\n+        ProgramRuleAction programRuleActionWarning = createProgramRuleAction( 'A', programRule );\n+        programRuleActionWarning.setProgramRuleActionType( ProgramRuleActionType.SHOWWARNING );\n+        programRuleActionWarning.setContent( \"WARNING\" );\n+        programRuleActionService.addProgramRuleAction( programRuleActionWarning );\n+\n+        programRule.getProgramRuleActions().add(programRuleActionWarning);", "originalCommit": "b95c088121ef6601a5f4f50abc19db2345043414", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzEwMzUyMA==", "url": "https://github.com/dhis2/dhis2-core/pull/5950#discussion_r473103520", "body": "Check indentation here.", "bodyText": "Check indentation here.", "bodyHTML": "<p dir=\"auto\">Check indentation here.</p>", "author": "stian-sandvold", "createdAt": "2020-08-19T15:09:35Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/programrule/ProgramRuleIntegrationTest.java", "diffHunk": "@@ -0,0 +1,170 @@\n+package org.hisp.dhis.tracker.programrule;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import static org.junit.Assert.*;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.hisp.dhis.IntegrationTestBase;\n+import org.hisp.dhis.common.IdentifiableObject;\n+import org.hisp.dhis.dxf2.metadata.objectbundle.*;\n+import org.hisp.dhis.dxf2.metadata.objectbundle.feedback.ObjectBundleValidationReport;\n+import org.hisp.dhis.importexport.ImportStrategy;\n+import org.hisp.dhis.preheat.PreheatIdentifier;\n+import org.hisp.dhis.program.Program;\n+import org.hisp.dhis.programrule.*;\n+import org.hisp.dhis.render.RenderFormat;\n+import org.hisp.dhis.render.RenderService;\n+import org.hisp.dhis.tracker.TrackerImportParams;\n+import org.hisp.dhis.tracker.TrackerImportService;\n+import org.hisp.dhis.tracker.bundle.TrackerBundleParams;\n+import org.hisp.dhis.tracker.report.TrackerImportReport;\n+import org.hisp.dhis.tracker.report.TrackerStatus;\n+import org.hisp.dhis.user.User;\n+import org.hisp.dhis.user.UserService;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.core.io.ClassPathResource;\n+\n+public class ProgramRuleIntegrationTest\n+    extends IntegrationTestBase\n+{\n+    @Override\n+    public boolean emptyDatabaseAfterTest()\n+    {\n+        return true;\n+    }\n+\n+    @Autowired\n+    private TrackerImportService trackerImportService;\n+\n+    @Autowired\n+    private RenderService _renderService;\n+\n+    @Autowired\n+    private UserService _userService;\n+\n+    @Autowired\n+    private ProgramRuleService programRuleService;\n+\n+    @Autowired\n+    private ProgramRuleActionService programRuleActionService;\n+\n+    @Autowired\n+    private ObjectBundleService objectBundleService;\n+\n+    @Autowired\n+    private ObjectBundleValidationService objectBundleValidationService;\n+\n+    private User userA;\n+\n+    @Override\n+    public void setUpTest()\n+        throws Exception\n+    {\n+        renderService = _renderService;\n+        userService = _userService;\n+\n+        Map<Class<? extends IdentifiableObject>, List<IdentifiableObject>> metadata = renderService\n+            .fromMetadata( new ClassPathResource( \"tracker/simple_metadata.json\" ).getInputStream(),\n+                RenderFormat.JSON );\n+\n+        ObjectBundleParams params = new ObjectBundleParams();\n+        params.setObjectBundleMode( ObjectBundleMode.COMMIT );\n+        params.setImportStrategy( ImportStrategy.CREATE );\n+        params.setObjects( metadata );\n+\n+        ObjectBundle bundle = objectBundleService.create( params );\n+        ObjectBundleValidationReport validationReport = objectBundleValidationService.validate( bundle );\n+        assertTrue( validationReport.getErrorReports().isEmpty() );\n+\n+        objectBundleService.commit( bundle );\n+\n+        Program program = bundle.getPreheat().get( PreheatIdentifier.UID, Program.class, \"BFcipDERJnf\" );\n+\n+        ProgramRule programRule = createProgramRule( 'A', program );\n+        programRuleService.addProgramRule( programRule );\n+\n+        ProgramRuleAction programRuleActionWarning = createProgramRuleAction( 'A', programRule );\n+        programRuleActionWarning.setProgramRuleActionType( ProgramRuleActionType.SHOWWARNING );\n+        programRuleActionWarning.setContent( \"WARNING\" );\n+        programRuleActionService.addProgramRuleAction( programRuleActionWarning );\n+\n+        programRule.getProgramRuleActions().add(programRuleActionWarning);\n+        programRuleService.updateProgramRule( programRule );\n+\n+        userA = userService.getUser( \"M5zQapPyTZI\" );\n+    }\n+\n+    @Test\n+    public void testImportSuccessWithWaringRaised() throws IOException {\n+\n+        InputStream inputStream = new ClassPathResource( \"tracker/single_tei.json\" ).getInputStream();\n+\n+        TrackerBundleParams params = renderService.fromJson( inputStream, TrackerBundleParams.class );\n+        params.setUser( userA );\n+        TrackerImportReport trackerImportTeiReport = trackerImportService.importTracker( build( params ) );\n+\n+        TrackerBundleParams enrollmentParams = renderService\n+            .fromJson( new ClassPathResource( \"tracker/single_enrollment.json\" ).getInputStream(),\n+                TrackerBundleParams.class );\n+        enrollmentParams.setUser( userA );\n+        TrackerImportReport trackerImportEnrollmentReport = trackerImportService\n+            .importTracker( build( enrollmentParams ) );\n+\n+        assertNotNull( trackerImportTeiReport );\n+        assertEquals( TrackerStatus.OK, trackerImportTeiReport.getStatus() );\n+\n+        assertNotNull( trackerImportEnrollmentReport );\n+        assertEquals( TrackerStatus.OK, trackerImportEnrollmentReport.getStatus() );\n+        assertFalse( trackerImportEnrollmentReport.getTrackerValidationReport().getWarningReports().isEmpty() );\n+    }\n+\n+    private TrackerImportParams build(TrackerBundleParams params) {\n+        return TrackerImportParams.builder()\n+                .user( params.getUser() )\n+                .importMode( params.getImportMode() )\n+                .importStrategy( params.getImportStrategy() )\n+            .skipPatternValidation( params.isSkipTextPatternValidation() )", "originalCommit": "b95c088121ef6601a5f4f50abc19db2345043414", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "6d0502ab5f873565a850ec10599468eb7ef58cb1", "url": "https://github.com/dhis2/dhis2-core/commit/6d0502ab5f873565a850ec10599468eb7ef58cb1", "message": "Fix code review comments", "committedDate": "2020-08-20T07:34:56Z", "type": "commit"}]}