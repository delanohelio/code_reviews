{"pr_number": 1158, "pr_title": "Ps function controllers", "pr_author": "psantos1113", "pr_createdAt": "2020-09-03T20:26:01Z", "pr_url": "https://github.com/blackducksoftware/blackduck-alert/pull/1158", "merge_commit": "63924b49086b623fa93b2395a4d31da918e82222", "timeline": [{"oid": "96d05519c92f31b613cfdc30c2cdfc5f31a83aa3", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/96d05519c92f31b613cfdc30c2cdfc5f31a83aa3", "message": "Refactor: Move the custom endpoints in the action package.", "committedDate": "2020-09-02T19:30:11Z", "type": "commit"}, {"oid": "978367c24ce6fc030077e702c0d40fa6f894a723", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/978367c24ce6fc030077e702c0d40fa6f894a723", "message": "refactor: Create controllers for each custom endpoint.", "committedDate": "2020-09-03T15:41:34Z", "type": "commit"}, {"oid": "b54107fc5a99b54e529beb507e82a2cf9e480126", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/b54107fc5a99b54e529beb507e82a2cf9e480126", "message": "refactor: Remove the CustomEndpointManager class.", "committedDate": "2020-09-03T17:11:33Z", "type": "commit"}, {"oid": "261daefafa7df23b217acedf4312dbebb5a81882", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/261daefafa7df23b217acedf4312dbebb5a81882", "message": "refactor: Remove CustomEndpointManager from common project", "committedDate": "2020-09-03T17:12:54Z", "type": "commit"}, {"oid": "f29bd3a7c76318f834fe29657db615b08e5f7054", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/f29bd3a7c76318f834fe29657db615b08e5f7054", "message": "refactor: Only have the CustomEndpoint class.", "committedDate": "2020-09-03T20:00:18Z", "type": "commit"}, {"oid": "054516d8f0ac7961b50d6faee9b11b9d26816f85", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/054516d8f0ac7961b50d6faee9b11b9d26816f85", "message": "refactor: Rename ActionResult to ActionResponse.", "committedDate": "2020-09-03T20:08:53Z", "type": "commit"}, {"oid": "2baa7161c8a41872d577115c34493308286385af", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/2baa7161c8a41872d577115c34493308286385af", "message": "Rename CustomEndpoint to CustomFunctionAction and move to action package.", "committedDate": "2020-09-03T20:19:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzU3MTk2NA==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1158#discussion_r483571964", "body": "In `ResponseStatusException`, the message parameter in `@Nullable`. We should use `.orElse(null)` here so that the default message for the `HttpStatus` will be used by the exception.", "bodyText": "In ResponseStatusException, the message parameter in @Nullable. We should use .orElse(null) here so that the default message for the HttpStatus will be used by the exception.", "bodyHTML": "<p dir=\"auto\">In <code>ResponseStatusException</code>, the message parameter in <code>@Nullable</code>. We should use <code>.orElse(null)</code> here so that the default message for the <code>HttpStatus</code> will be used by the exception.</p>", "author": "gkillough", "createdAt": "2020-09-04T12:01:47Z", "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/rest/ResponseFactory.java", "diffHunk": "@@ -75,6 +75,18 @@ public static ResponseStatusException createNotImplementedException(@Nullable St\n         return new ResponseStatusException(HttpStatus.NOT_IMPLEMENTED, customMessage);\n     }\n \n+    public static <T> ResponseStatusException createStatusException(ActionResponse<T> actionResponse) {\n+        String customMessage = actionResponse.getMessage().orElse(\"\");", "originalCommit": "2baa7161c8a41872d577115c34493308286385af", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4f1b9ce03ecd0175de22e3f938b74a0beba79a0c", "changed_code": [{"header": "diff --git a/alert-common/src/main/java/com/synopsys/integration/alert/common/rest/ResponseFactory.java b/alert-common/src/main/java/com/synopsys/integration/alert/common/rest/ResponseFactory.java\nindex a8eb42a21e..7ca8adffc4 100644\n--- a/alert-common/src/main/java/com/synopsys/integration/alert/common/rest/ResponseFactory.java\n+++ b/alert-common/src/main/java/com/synopsys/integration/alert/common/rest/ResponseFactory.java\n", "chunk": "@@ -76,7 +76,7 @@ public class ResponseFactory {\n     }\n \n     public static <T> ResponseStatusException createStatusException(ActionResponse<T> actionResponse) {\n-        String customMessage = actionResponse.getMessage().orElse(\"\");\n+        String customMessage = actionResponse.getMessage().orElse(null);\n         return new ResponseStatusException(actionResponse.getHttpStatus(), customMessage);\n     }\n \n", "next_change": null}]}, "revised_code_in_main": {"commit": "63924b49086b623fa93b2395a4d31da918e82222", "changed_code": [{"header": "diff --git a/alert-common/src/main/java/com/synopsys/integration/alert/common/rest/ResponseFactory.java b/alert-common/src/main/java/com/synopsys/integration/alert/common/rest/ResponseFactory.java\nindex a8eb42a21e..7ca8adffc4 100644\n--- a/alert-common/src/main/java/com/synopsys/integration/alert/common/rest/ResponseFactory.java\n+++ b/alert-common/src/main/java/com/synopsys/integration/alert/common/rest/ResponseFactory.java\n", "chunk": "@@ -76,7 +76,7 @@ public class ResponseFactory {\n     }\n \n     public static <T> ResponseStatusException createStatusException(ActionResponse<T> actionResponse) {\n-        String customMessage = actionResponse.getMessage().orElse(\"\");\n+        String customMessage = actionResponse.getMessage().orElse(null);\n         return new ResponseStatusException(actionResponse.getHttpStatus(), customMessage);\n     }\n \n", "next_change": {"commit": "04acb3ca495ab8e01e4dfa46b59897671e81abeb", "changed_code": [{"header": "diff --git a/alert-common/src/main/java/com/synopsys/integration/alert/common/rest/ResponseFactory.java b/alert-common/src/main/java/com/synopsys/integration/alert/common/rest/ResponseFactory.java\nindex 7ca8adffc4..191cba257c 100644\n--- a/alert-common/src/main/java/com/synopsys/integration/alert/common/rest/ResponseFactory.java\n+++ b/alert-common/src/main/java/com/synopsys/integration/alert/common/rest/ResponseFactory.java\n", "chunk": "@@ -80,13 +80,24 @@ public class ResponseFactory {\n         return new ResponseStatusException(actionResponse.getHttpStatus(), customMessage);\n     }\n \n-    public static <T> ResponseEntity<T> createResponseFromAction(ActionResponse<T> actionResponse) {\n+    public static <T> ResponseEntity<T> createResponseFromAction(ActionResponse<T> actionResponse) throws ResponseStatusException {\n+        if (actionResponse.isError()) {\n+            throw createStatusException(actionResponse);\n+        }\n+\n         if (actionResponse.hasContent()) {\n             return new ResponseEntity<>(actionResponse.getContent().get(), actionResponse.getHttpStatus());\n         }\n         return new ResponseEntity<>(actionResponse.getHttpStatus());\n     }\n \n+    public static <T> T createContentResponseFromAction(ActionResponse<T> actionResponse) throws ResponseStatusException {\n+        if (actionResponse.hasContent()) {\n+            return actionResponse.getContent().get();\n+        }\n+        throw createStatusException(actionResponse);\n+    }\n+\n     // Unnecessarily stateful methods:\n \n     public ResponseEntity<String> createMessageResponse(HttpStatus status, String id, String message) {\n", "next_change": {"commit": "7766c133546e25da8f2e8650eba856810a41adea", "changed_code": [{"header": "diff --git a/alert-common/src/main/java/com/synopsys/integration/alert/common/rest/ResponseFactory.java b/alert-common/src/main/java/com/synopsys/integration/alert/common/rest/ResponseFactory.java\nindex 191cba257c..059ba83e84 100644\n--- a/alert-common/src/main/java/com/synopsys/integration/alert/common/rest/ResponseFactory.java\n+++ b/alert-common/src/main/java/com/synopsys/integration/alert/common/rest/ResponseFactory.java\n", "chunk": "@@ -92,12 +77,22 @@ public class ResponseFactory {\n     }\n \n     public static <T> T createContentResponseFromAction(ActionResponse<T> actionResponse) throws ResponseStatusException {\n-        if (actionResponse.hasContent()) {\n+        if (actionResponse.isSuccessful() && actionResponse.hasContent()) {\n             return actionResponse.getContent().get();\n         }\n         throw createStatusException(actionResponse);\n     }\n \n+    public static <T> ResponseEntity<T> createFoundRedirectResponseV2(ActionResponse<String> locationResponse) throws ResponseStatusException {\n+        if (locationResponse.isError()) {\n+            throw createStatusException(locationResponse);\n+        }\n+        String location = locationResponse.getContent().get();\n+        HttpHeaders header = new HttpHeaders();\n+        header.add(\"Location\", location);\n+        return new ResponseEntity<>(header, HttpStatus.FOUND);\n+    }\n+\n     // Unnecessarily stateful methods:\n \n     public ResponseEntity<String> createMessageResponse(HttpStatus status, String id, String message) {\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "63924b49086b623fa93b2395a4d31da918e82222", "message": "Merge commit", "committedDate": null}, {"oid": "04acb3ca495ab8e01e4dfa46b59897671e81abeb", "committedDate": "2020-09-08 16:35:50 -0400", "message": "refactor: Change the certificates controller to implement new interface."}, {"oid": "39bdee6e6897d739cd249e6f274bb61965219968", "committedDate": "2020-09-09 11:28:22 -0400", "message": "feat: Implement Job and Config actions."}, {"oid": "63cf8038bb77e5510b94d5e2d2ef3932f1887264", "committedDate": "2020-10-19 20:08:43 -0400", "message": "final cleanup"}, {"oid": "e114d1071952aa916b8f91ef14ec888977c301b0", "committedDate": "2021-01-04 13:44:38 -0500", "message": "Fix: Rename Azure fields (in Alert UI) to match what they are referred to as in Azure's documentation"}, {"oid": "fcf856e11f96b2a006aa5ac82b8ca1475c167349", "committedDate": "2021-01-29 09:30:29 -0500", "message": "Updating the license header with the new format."}, {"oid": "ef6958c55fcb7f4b2e8e8654d5c52f4213f7c1ca", "committedDate": "2021-02-26 13:23:09 -0500", "message": "chore: Update headers"}, {"oid": "8198f021e42f31aeb8b50356ba1f81bc08ee580e", "committedDate": "2021-09-17 14:09:00 -0400", "message": "style: Optimize imports in java files"}, {"oid": "42aaa58971c5854c814014e6488bc7abe38e53ad", "committedDate": "2022-01-04 13:40:18 -0500", "message": "chore: Updating license headers"}, {"oid": "8bf5ed9be6329db464b81e6289f7bf852361b491", "committedDate": "2022-03-01 17:18:20 -0500", "message": "refactor: Move ValidationResponseModel and AlertFieldStatus into api-common-model"}, {"oid": "7766c133546e25da8f2e8650eba856810a41adea", "committedDate": "2022-10-14 14:34:29 -0400", "message": "refactor: Create new OAuth callback controller and actions for Azure and deprecate the old controller"}, {"oid": "5e6a2c5c6cefe2d132259e14cd7ba6bc09b4d4d6", "committedDate": "2022-10-25 13:59:50 -0400", "message": "refactor: Fix missing doc tags, deprecated messages, and drop Legacy suffix from AzureBoardsProperties as it was not replaced."}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzU3Mjc1OA==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1158#discussion_r483572758", "body": "For the sake of consistency, it might be nice to wrap the `List<LabelValueSelectOption>` in an object.", "bodyText": "For the sake of consistency, it might be nice to wrap the List<LabelValueSelectOption> in an object.", "bodyHTML": "<p dir=\"auto\">For the sake of consistency, it might be nice to wrap the <code>List&lt;LabelValueSelectOption&gt;</code> in an object.</p>", "author": "gkillough", "createdAt": "2020-09-04T12:03:44Z", "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/ui/ProviderSelectCustomFunctionAction.java", "diffHunk": "@@ -27,35 +27,39 @@\n import java.util.stream.Collectors;\n \n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n import org.springframework.stereotype.Component;\n \n-import com.synopsys.integration.alert.common.action.CustomEndpointManager;\n+import com.synopsys.integration.alert.common.action.ActionResponse;\n+import com.synopsys.integration.alert.common.action.CustomFunctionAction;\n import com.synopsys.integration.alert.common.descriptor.DescriptorMap;\n import com.synopsys.integration.alert.common.descriptor.config.field.LabelValueSelectOption;\n-import com.synopsys.integration.alert.common.descriptor.config.field.endpoint.SelectCustomEndpoint;\n import com.synopsys.integration.alert.common.enumeration.ConfigContextEnum;\n import com.synopsys.integration.alert.common.enumeration.DescriptorType;\n-import com.synopsys.integration.alert.common.exception.AlertException;\n+import com.synopsys.integration.alert.common.rest.HttpServletContentWrapper;\n import com.synopsys.integration.alert.common.rest.model.FieldModel;\n+import com.synopsys.integration.alert.common.security.authorization.AuthorizationManager;\n+import com.synopsys.integration.exception.IntegrationException;\n \n @Component\n-public class ProviderSelectCustomEndpoint extends SelectCustomEndpoint {\n+public class ProviderSelectCustomFunctionAction extends CustomFunctionAction<List<LabelValueSelectOption>> {\n     private DescriptorMap descriptorMap;\n \n     @Autowired\n-    public ProviderSelectCustomEndpoint(CustomEndpointManager customEndpointManager, DescriptorMap descriptorMap) throws AlertException {\n-        super(ChannelDistributionUIConfig.KEY_PROVIDER_NAME, customEndpointManager);\n+    public ProviderSelectCustomFunctionAction(AuthorizationManager authorizationManager, DescriptorMap descriptorMap) {\n+        super(authorizationManager);\n         this.descriptorMap = descriptorMap;\n     }\n \n     @Override\n-    protected List<LabelValueSelectOption> createData(FieldModel fieldModel) throws AlertException {\n-        return descriptorMap.getDescriptorByType(DescriptorType.PROVIDER).stream()\n-                   .map(descriptor -> descriptor.createMetaData(ConfigContextEnum.DISTRIBUTION))\n-                   .flatMap(Optional::stream)\n-                   .map(descriptorMetadata -> new LabelValueSelectOption(descriptorMetadata.getLabel(), descriptorMetadata.getName()))\n-                   .sorted()\n-                   .collect(Collectors.toList());\n+    public ActionResponse<List<LabelValueSelectOption>> createActionResponse(FieldModel fieldModel, HttpServletContentWrapper servletContentWrapper) throws IntegrationException {\n+        List<LabelValueSelectOption> content = descriptorMap.getDescriptorByType(DescriptorType.PROVIDER).stream()\n+                                                   .map(descriptor -> descriptor.createMetaData(ConfigContextEnum.DISTRIBUTION))\n+                                                   .flatMap(Optional::stream)\n+                                                   .map(descriptorMetadata -> new LabelValueSelectOption(descriptorMetadata.getLabel(), descriptorMetadata.getName()))\n+                                                   .sorted()\n+                                                   .collect(Collectors.toList());\n+        return new ActionResponse<>(HttpStatus.OK, content);", "originalCommit": "2baa7161c8a41872d577115c34493308286385af", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "91b98531b66318957abacfbb6646803ebcfed3c3", "changed_code": [{"header": "diff --git a/alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/ui/ProviderSelectCustomFunctionAction.java b/alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/ui/ProviderSelectCustomFunctionAction.java\nindex bfa20ad563..338b1d33a2 100644\n--- a/alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/ui/ProviderSelectCustomFunctionAction.java\n+++ b/alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/ui/ProviderSelectCustomFunctionAction.java\n", "chunk": "@@ -53,13 +54,14 @@ public class ProviderSelectCustomFunctionAction extends CustomFunctionAction<Lis\n \n     @Override\n     public ActionResponse<List<LabelValueSelectOption>> createActionResponse(FieldModel fieldModel, HttpServletContentWrapper servletContentWrapper) throws IntegrationException {\n-        List<LabelValueSelectOption> content = descriptorMap.getDescriptorByType(DescriptorType.PROVIDER).stream()\n+        List<LabelValueSelectOption> options = descriptorMap.getDescriptorByType(DescriptorType.PROVIDER).stream()\n                                                    .map(descriptor -> descriptor.createMetaData(ConfigContextEnum.DISTRIBUTION))\n                                                    .flatMap(Optional::stream)\n                                                    .map(descriptorMetadata -> new LabelValueSelectOption(descriptorMetadata.getLabel(), descriptorMetadata.getName()))\n                                                    .sorted()\n                                                    .collect(Collectors.toList());\n-        return new ActionResponse<>(HttpStatus.OK, content);\n+        LabelValueSelectOptions optionList = new LabelValueSelectOptions(options);\n+        return new ActionResponse<>(HttpStatus.OK, options);\n     }\n \n }\n", "next_change": {"commit": "e64cbae0712409eefabb4bac7893b2ef82fd75eb", "changed_code": [{"header": "diff --git a/alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/ui/ProviderSelectCustomFunctionAction.java b/alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/ui/ProviderSelectCustomFunctionAction.java\nindex 338b1d33a2..552096d74a 100644\n--- a/alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/ui/ProviderSelectCustomFunctionAction.java\n+++ b/alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/ui/ProviderSelectCustomFunctionAction.java\n", "chunk": "@@ -61,7 +61,7 @@ public class ProviderSelectCustomFunctionAction extends CustomFunctionAction<Lis\n                                                    .sorted()\n                                                    .collect(Collectors.toList());\n         LabelValueSelectOptions optionList = new LabelValueSelectOptions(options);\n-        return new ActionResponse<>(HttpStatus.OK, options);\n+        return new ActionResponse<>(HttpStatus.OK, optionList);\n     }\n \n }\n", "next_change": {"commit": "712aceb7cfc0c7e3fea272fad4ca07e0e054b7cb", "changed_code": [{"header": "diff --git a/alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/ui/ProviderSelectCustomFunctionAction.java b/alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/ui/ProviderSelectCustomFunctionAction.java\nindex 552096d74a..bfa20ad563 100644\n--- a/alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/ui/ProviderSelectCustomFunctionAction.java\n+++ b/alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/ui/ProviderSelectCustomFunctionAction.java\n", "chunk": "@@ -53,15 +52,14 @@ public class ProviderSelectCustomFunctionAction extends CustomFunctionAction<Lab\n     }\n \n     @Override\n-    public ActionResponse<LabelValueSelectOptions> createActionResponse(FieldModel fieldModel, HttpServletContentWrapper servletContentWrapper) throws IntegrationException {\n-        List<LabelValueSelectOption> options = descriptorMap.getDescriptorByType(DescriptorType.PROVIDER).stream()\n+    public ActionResponse<List<LabelValueSelectOption>> createActionResponse(FieldModel fieldModel, HttpServletContentWrapper servletContentWrapper) throws IntegrationException {\n+        List<LabelValueSelectOption> content = descriptorMap.getDescriptorByType(DescriptorType.PROVIDER).stream()\n                                                    .map(descriptor -> descriptor.createMetaData(ConfigContextEnum.DISTRIBUTION))\n                                                    .flatMap(Optional::stream)\n                                                    .map(descriptorMetadata -> new LabelValueSelectOption(descriptorMetadata.getLabel(), descriptorMetadata.getName()))\n                                                    .sorted()\n                                                    .collect(Collectors.toList());\n-        LabelValueSelectOptions optionList = new LabelValueSelectOptions(options);\n-        return new ActionResponse<>(HttpStatus.OK, optionList);\n+        return new ActionResponse<>(HttpStatus.OK, content);\n     }\n \n }\n", "next_change": {"commit": "3e7b1f3a1d329cee5ca26abf056b836aee59b898", "changed_code": [{"header": "diff --git a/alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/ui/ProviderSelectCustomFunctionAction.java b/alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/ui/ProviderSelectCustomFunctionAction.java\nindex bfa20ad563..552096d74a 100644\n--- a/alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/ui/ProviderSelectCustomFunctionAction.java\n+++ b/alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/ui/ProviderSelectCustomFunctionAction.java\n", "chunk": "@@ -52,14 +53,15 @@ public class ProviderSelectCustomFunctionAction extends CustomFunctionAction<Lis\n     }\n \n     @Override\n-    public ActionResponse<List<LabelValueSelectOption>> createActionResponse(FieldModel fieldModel, HttpServletContentWrapper servletContentWrapper) throws IntegrationException {\n-        List<LabelValueSelectOption> content = descriptorMap.getDescriptorByType(DescriptorType.PROVIDER).stream()\n+    public ActionResponse<LabelValueSelectOptions> createActionResponse(FieldModel fieldModel, HttpServletContentWrapper servletContentWrapper) throws IntegrationException {\n+        List<LabelValueSelectOption> options = descriptorMap.getDescriptorByType(DescriptorType.PROVIDER).stream()\n                                                    .map(descriptor -> descriptor.createMetaData(ConfigContextEnum.DISTRIBUTION))\n                                                    .flatMap(Optional::stream)\n                                                    .map(descriptorMetadata -> new LabelValueSelectOption(descriptorMetadata.getLabel(), descriptorMetadata.getName()))\n                                                    .sorted()\n                                                    .collect(Collectors.toList());\n-        return new ActionResponse<>(HttpStatus.OK, content);\n+        LabelValueSelectOptions optionList = new LabelValueSelectOptions(options);\n+        return new ActionResponse<>(HttpStatus.OK, optionList);\n     }\n \n }\n", "next_change": null}]}}]}}]}}]}, "revised_code_in_main": {"commit": "63924b49086b623fa93b2395a4d31da918e82222", "changed_code": [{"header": "diff --git a/alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/ui/ProviderSelectCustomFunctionAction.java b/alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/ui/ProviderSelectCustomFunctionAction.java\nindex bfa20ad563..552096d74a 100644\n--- a/alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/ui/ProviderSelectCustomFunctionAction.java\n+++ b/alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/ui/ProviderSelectCustomFunctionAction.java\n", "chunk": "@@ -52,14 +53,15 @@ public class ProviderSelectCustomFunctionAction extends CustomFunctionAction<Lis\n     }\n \n     @Override\n-    public ActionResponse<List<LabelValueSelectOption>> createActionResponse(FieldModel fieldModel, HttpServletContentWrapper servletContentWrapper) throws IntegrationException {\n-        List<LabelValueSelectOption> content = descriptorMap.getDescriptorByType(DescriptorType.PROVIDER).stream()\n+    public ActionResponse<LabelValueSelectOptions> createActionResponse(FieldModel fieldModel, HttpServletContentWrapper servletContentWrapper) throws IntegrationException {\n+        List<LabelValueSelectOption> options = descriptorMap.getDescriptorByType(DescriptorType.PROVIDER).stream()\n                                                    .map(descriptor -> descriptor.createMetaData(ConfigContextEnum.DISTRIBUTION))\n                                                    .flatMap(Optional::stream)\n                                                    .map(descriptorMetadata -> new LabelValueSelectOption(descriptorMetadata.getLabel(), descriptorMetadata.getName()))\n                                                    .sorted()\n                                                    .collect(Collectors.toList());\n-        return new ActionResponse<>(HttpStatus.OK, content);\n+        LabelValueSelectOptions optionList = new LabelValueSelectOptions(options);\n+        return new ActionResponse<>(HttpStatus.OK, optionList);\n     }\n \n }\n", "next_change": null}]}, "commits_in_main": [{"oid": "63924b49086b623fa93b2395a4d31da918e82222", "message": "Merge commit", "committedDate": null}, {"oid": "3cfc6c1535496b5daa1ef1dc5d6d41e1b68d8e6d", "committedDate": "2020-10-01 10:48:57 -0400", "message": "Fix(Field Processing): Commonize field processing components"}, {"oid": "d159ed62b4b8d236f3e3335eea5e1e2eda6116b3", "committedDate": "2020-10-01 12:35:14 -0400", "message": "Fix(Custom Function Actions): Add related field validation to custom function actions"}, {"oid": "bfb754c442228e676641f58324526ffbed1e5e82", "committedDate": "2020-10-02 10:31:00 -0400", "message": "Fix(CustomFunctionAction): Get all possible config fields for field model context to account for distribution jobs having multiple descriptors"}, {"oid": "95fa7c60a475efcad3e5f9526aa965eaf31e05c1", "committedDate": "2020-10-07 11:18:04 -0400", "message": "Fix(Custom Functions): Move provider and channel custom functions to their logical locations"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzU3MzIxMg==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1158#discussion_r483573212", "body": "It might be nice to wrap the `List<ProviderProject>`.", "bodyText": "It might be nice to wrap the List<ProviderProject>.", "bodyHTML": "<p dir=\"auto\">It might be nice to wrap the <code>List&lt;ProviderProject&gt;</code>.</p>", "author": "gkillough", "createdAt": "2020-09-04T12:04:50Z", "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/ui/ProviderDistributionCustomFunctionAction.java", "diffHunk": "@@ -30,34 +30,38 @@\n import org.springframework.stereotype.Component;\n import org.springframework.web.server.ResponseStatusException;\n \n-import com.synopsys.integration.alert.common.action.CustomEndpointManager;\n+import com.synopsys.integration.alert.common.action.ActionResponse;\n+import com.synopsys.integration.alert.common.action.CustomFunctionAction;\n import com.synopsys.integration.alert.common.descriptor.ProviderDescriptor;\n-import com.synopsys.integration.alert.common.descriptor.config.field.endpoint.table.TableSelectCustomEndpoint;\n-import com.synopsys.integration.alert.common.exception.AlertException;\n import com.synopsys.integration.alert.common.persistence.accessor.ProviderDataAccessor;\n+import com.synopsys.integration.alert.common.persistence.model.ProviderProject;\n+import com.synopsys.integration.alert.common.rest.HttpServletContentWrapper;\n import com.synopsys.integration.alert.common.rest.model.FieldModel;\n+import com.synopsys.integration.alert.common.security.authorization.AuthorizationManager;\n+import com.synopsys.integration.exception.IntegrationException;\n \n @Component\n-public class ProviderDistributionCustomEndpoint extends TableSelectCustomEndpoint {\n+public class ProviderDistributionCustomFunctionAction extends CustomFunctionAction<List<ProviderProject>> {\n     private static final String MISSING_PROVIDER_ERROR = \"Provider name is required to retrieve projects.\";\n \n     private final ProviderDataAccessor providerDataAccessor;\n \n     @Autowired\n-    public ProviderDistributionCustomEndpoint(CustomEndpointManager customEndpointManager, ProviderDataAccessor providerDataAccessor) throws AlertException {\n-        super(ProviderDistributionUIConfig.KEY_CONFIGURED_PROJECT, customEndpointManager);\n+    public ProviderDistributionCustomFunctionAction(AuthorizationManager authorizationManager, ProviderDataAccessor providerDataAccessor) {\n+        super(authorizationManager);\n         this.providerDataAccessor = providerDataAccessor;\n     }\n \n     @Override\n-    protected List<?> createData(FieldModel fieldModel) throws ResponseStatusException {\n+    public ActionResponse<List<ProviderProject>> createActionResponse(FieldModel fieldModel, HttpServletContentWrapper servletContentWrapper) throws IntegrationException {\n         String providerName = fieldModel.getFieldValue(ChannelDistributionUIConfig.KEY_PROVIDER_NAME).orElse(\"\");\n         if (StringUtils.isBlank(providerName)) {\n             throw new ResponseStatusException(HttpStatus.BAD_REQUEST, MISSING_PROVIDER_ERROR);\n         }\n \n         String providerConfigName = fieldModel.getFieldValue(ProviderDescriptor.KEY_PROVIDER_CONFIG_NAME).orElse(\"\");\n-        return providerDataAccessor.getProjectsByProviderConfigName(providerConfigName);\n+        List<ProviderProject> content = providerDataAccessor.getProjectsByProviderConfigName(providerConfigName);\n+        return new ActionResponse<>(HttpStatus.OK, content);", "originalCommit": "2baa7161c8a41872d577115c34493308286385af", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e64cbae0712409eefabb4bac7893b2ef82fd75eb", "changed_code": [{"header": "diff --git a/alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/ui/ProviderDistributionCustomFunctionAction.java b/alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/ui/ProviderProjectCustomFunctionAction.java\nsimilarity index 70%\nrename from alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/ui/ProviderDistributionCustomFunctionAction.java\nrename to alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/ui/ProviderProjectCustomFunctionAction.java\nindex 6b6fd32563..3e832b349a 100644\n--- a/alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/ui/ProviderDistributionCustomFunctionAction.java\n+++ b/alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/ui/ProviderProjectCustomFunctionAction.java\n", "chunk": "@@ -41,19 +44,19 @@ import com.synopsys.integration.alert.common.security.authorization.Authorizatio\n import com.synopsys.integration.exception.IntegrationException;\n \n @Component\n-public class ProviderDistributionCustomFunctionAction extends CustomFunctionAction<List<ProviderProject>> {\n+public class ProviderProjectCustomFunctionAction extends CustomFunctionAction<ProviderProjectOptions> {\n     private static final String MISSING_PROVIDER_ERROR = \"Provider name is required to retrieve projects.\";\n \n     private final ProviderDataAccessor providerDataAccessor;\n \n     @Autowired\n-    public ProviderDistributionCustomFunctionAction(AuthorizationManager authorizationManager, ProviderDataAccessor providerDataAccessor) {\n+    public ProviderProjectCustomFunctionAction(AuthorizationManager authorizationManager, ProviderDataAccessor providerDataAccessor) {\n         super(authorizationManager);\n         this.providerDataAccessor = providerDataAccessor;\n     }\n \n     @Override\n-    public ActionResponse<List<ProviderProject>> createActionResponse(FieldModel fieldModel, HttpServletContentWrapper servletContentWrapper) throws IntegrationException {\n+    public ActionResponse<ProviderProjectOptions> createActionResponse(FieldModel fieldModel, HttpServletContentWrapper servletContentWrapper) throws IntegrationException {\n         String providerName = fieldModel.getFieldValue(ChannelDistributionUIConfig.KEY_PROVIDER_NAME).orElse(\"\");\n         if (StringUtils.isBlank(providerName)) {\n             throw new ResponseStatusException(HttpStatus.BAD_REQUEST, MISSING_PROVIDER_ERROR);\n", "next_change": null}, {"header": "diff --git a/alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/ui/ProviderDistributionCustomFunctionAction.java b/alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/ui/ProviderProjectCustomFunctionAction.java\nsimilarity index 70%\nrename from alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/ui/ProviderDistributionCustomFunctionAction.java\nrename to alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/ui/ProviderProjectCustomFunctionAction.java\nindex 6b6fd32563..3e832b349a 100644\n--- a/alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/ui/ProviderDistributionCustomFunctionAction.java\n+++ b/alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/ui/ProviderProjectCustomFunctionAction.java\n", "chunk": "@@ -61,7 +64,11 @@ public class ProviderDistributionCustomFunctionAction extends CustomFunctionActi\n \n         String providerConfigName = fieldModel.getFieldValue(ProviderDescriptor.KEY_PROVIDER_CONFIG_NAME).orElse(\"\");\n         List<ProviderProject> content = providerDataAccessor.getProjectsByProviderConfigName(providerConfigName);\n-        return new ActionResponse<>(HttpStatus.OK, content);\n+        List<ProviderProjectSelectOption> options = content.stream()\n+                                                        .map(project -> new ProviderProjectSelectOption(project.getName(), project.getDescription()))\n+                                                        .collect(Collectors.toList());\n+        ProviderProjectOptions optionList = new ProviderProjectOptions(options);\n+        return new ActionResponse<>(HttpStatus.OK, optionList);\n     }\n \n }\n", "next_change": null}]}, "revised_code_in_main": {"commit": "63924b49086b623fa93b2395a4d31da918e82222", "changed_code": [{"header": "diff --git a/alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/ui/ProviderDistributionCustomFunctionAction.java b/alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/ui/ProviderProjectCustomFunctionAction.java\nsimilarity index 70%\nrename from alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/ui/ProviderDistributionCustomFunctionAction.java\nrename to alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/ui/ProviderProjectCustomFunctionAction.java\nindex 6b6fd32563..3e832b349a 100644\n--- a/alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/ui/ProviderDistributionCustomFunctionAction.java\n+++ b/alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/ui/ProviderProjectCustomFunctionAction.java\n", "chunk": "@@ -41,19 +44,19 @@ import com.synopsys.integration.alert.common.security.authorization.Authorizatio\n import com.synopsys.integration.exception.IntegrationException;\n \n @Component\n-public class ProviderDistributionCustomFunctionAction extends CustomFunctionAction<List<ProviderProject>> {\n+public class ProviderProjectCustomFunctionAction extends CustomFunctionAction<ProviderProjectOptions> {\n     private static final String MISSING_PROVIDER_ERROR = \"Provider name is required to retrieve projects.\";\n \n     private final ProviderDataAccessor providerDataAccessor;\n \n     @Autowired\n-    public ProviderDistributionCustomFunctionAction(AuthorizationManager authorizationManager, ProviderDataAccessor providerDataAccessor) {\n+    public ProviderProjectCustomFunctionAction(AuthorizationManager authorizationManager, ProviderDataAccessor providerDataAccessor) {\n         super(authorizationManager);\n         this.providerDataAccessor = providerDataAccessor;\n     }\n \n     @Override\n-    public ActionResponse<List<ProviderProject>> createActionResponse(FieldModel fieldModel, HttpServletContentWrapper servletContentWrapper) throws IntegrationException {\n+    public ActionResponse<ProviderProjectOptions> createActionResponse(FieldModel fieldModel, HttpServletContentWrapper servletContentWrapper) throws IntegrationException {\n         String providerName = fieldModel.getFieldValue(ChannelDistributionUIConfig.KEY_PROVIDER_NAME).orElse(\"\");\n         if (StringUtils.isBlank(providerName)) {\n             throw new ResponseStatusException(HttpStatus.BAD_REQUEST, MISSING_PROVIDER_ERROR);\n", "next_change": null}, {"header": "diff --git a/alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/ui/ProviderDistributionCustomFunctionAction.java b/alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/ui/ProviderProjectCustomFunctionAction.java\nsimilarity index 70%\nrename from alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/ui/ProviderDistributionCustomFunctionAction.java\nrename to alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/ui/ProviderProjectCustomFunctionAction.java\nindex 6b6fd32563..3e832b349a 100644\n--- a/alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/ui/ProviderDistributionCustomFunctionAction.java\n+++ b/alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/ui/ProviderProjectCustomFunctionAction.java\n", "chunk": "@@ -61,7 +64,11 @@ public class ProviderDistributionCustomFunctionAction extends CustomFunctionActi\n \n         String providerConfigName = fieldModel.getFieldValue(ProviderDescriptor.KEY_PROVIDER_CONFIG_NAME).orElse(\"\");\n         List<ProviderProject> content = providerDataAccessor.getProjectsByProviderConfigName(providerConfigName);\n-        return new ActionResponse<>(HttpStatus.OK, content);\n+        List<ProviderProjectSelectOption> options = content.stream()\n+                                                        .map(project -> new ProviderProjectSelectOption(project.getName(), project.getDescription()))\n+                                                        .collect(Collectors.toList());\n+        ProviderProjectOptions optionList = new ProviderProjectOptions(options);\n+        return new ActionResponse<>(HttpStatus.OK, optionList);\n     }\n \n }\n", "next_change": null}]}, "commits_in_main": [{"oid": "63924b49086b623fa93b2395a4d31da918e82222", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzU3NDM4Mg==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1158#discussion_r483574382", "body": "I'm working backwards here, but we might want to rethink content being a `List`. It adds one more step to the controller for enforcing the pattern of an API always returning a JSON Object.", "bodyText": "I'm working backwards here, but we might want to rethink content being a List. It adds one more step to the controller for enforcing the pattern of an API always returning a JSON Object.", "bodyHTML": "<p dir=\"auto\">I'm working backwards here, but we might want to rethink content being a <code>List</code>. It adds one more step to the controller for enforcing the pattern of an API always returning a JSON Object.</p>", "author": "gkillough", "createdAt": "2020-09-04T12:07:27Z", "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/ui/ProviderConfigSelectCustomFunctionAction.java", "diffHunk": "@@ -27,47 +27,51 @@\n import java.util.stream.Collectors;\n \n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n import org.springframework.stereotype.Component;\n \n-import com.synopsys.integration.alert.common.action.CustomEndpointManager;\n+import com.synopsys.integration.alert.common.action.ActionResponse;\n+import com.synopsys.integration.alert.common.action.CustomFunctionAction;\n import com.synopsys.integration.alert.common.descriptor.DescriptorKey;\n import com.synopsys.integration.alert.common.descriptor.DescriptorMap;\n import com.synopsys.integration.alert.common.descriptor.ProviderDescriptor;\n import com.synopsys.integration.alert.common.descriptor.config.field.LabelValueSelectOption;\n-import com.synopsys.integration.alert.common.descriptor.config.field.endpoint.SelectCustomEndpoint;\n import com.synopsys.integration.alert.common.enumeration.ConfigContextEnum;\n-import com.synopsys.integration.alert.common.exception.AlertException;\n+import com.synopsys.integration.alert.common.exception.AlertDatabaseConstraintException;\n import com.synopsys.integration.alert.common.persistence.accessor.ConfigurationAccessor;\n import com.synopsys.integration.alert.common.persistence.accessor.FieldAccessor;\n import com.synopsys.integration.alert.common.persistence.model.ConfigurationModel;\n+import com.synopsys.integration.alert.common.rest.HttpServletContentWrapper;\n import com.synopsys.integration.alert.common.rest.model.FieldModel;\n+import com.synopsys.integration.alert.common.security.authorization.AuthorizationManager;\n \n @Component\n-public class ProviderConfigSelectCustomEndpoint extends SelectCustomEndpoint {\n+public class ProviderConfigSelectCustomFunctionAction extends CustomFunctionAction<List<LabelValueSelectOption>> {\n     private final ConfigurationAccessor configurationAccessor;\n     private final DescriptorMap descriptorMap;\n \n     @Autowired\n-    public ProviderConfigSelectCustomEndpoint(CustomEndpointManager customEndpointManager, ConfigurationAccessor configurationAccessor, DescriptorMap descriptorMap) throws AlertException {\n-        super(ProviderDescriptor.KEY_PROVIDER_CONFIG_NAME, customEndpointManager);\n+    public ProviderConfigSelectCustomFunctionAction(AuthorizationManager authorizationManager, ConfigurationAccessor configurationAccessor, DescriptorMap descriptorMap) {\n+        super(authorizationManager);\n         this.configurationAccessor = configurationAccessor;\n         this.descriptorMap = descriptorMap;\n     }\n \n     @Override\n-    protected List<LabelValueSelectOption> createData(FieldModel fieldModel) throws AlertException {\n+    public ActionResponse<List<LabelValueSelectOption>> createActionResponse(FieldModel fieldModel, HttpServletContentWrapper servletContentWrapper) throws AlertDatabaseConstraintException {\n         String providerName = fieldModel.getDescriptorName();\n         Optional<DescriptorKey> descriptorKey = descriptorMap.getDescriptorKey(providerName);\n+        List<LabelValueSelectOption> content = List.of();\n         if (descriptorKey.isPresent()) {\n             List<ConfigurationModel> configurationModels = configurationAccessor.getConfigurationsByDescriptorKeyAndContext(descriptorKey.get(), ConfigContextEnum.GLOBAL);\n-            return configurationModels.stream()\n-                       .map(ConfigurationModel::getCopyOfKeyToFieldMap)\n-                       .map(FieldAccessor::new)\n-                       .map(accessor -> accessor.getString(ProviderDescriptor.KEY_PROVIDER_CONFIG_NAME))\n-                       .flatMap(Optional::stream)\n-                       .map(LabelValueSelectOption::new)\n-                       .collect(Collectors.toList());\n+            content = configurationModels.stream()\n+                          .map(ConfigurationModel::getCopyOfKeyToFieldMap)\n+                          .map(FieldAccessor::new)\n+                          .map(accessor -> accessor.getString(ProviderDescriptor.KEY_PROVIDER_CONFIG_NAME))\n+                          .flatMap(Optional::stream)\n+                          .map(LabelValueSelectOption::new)\n+                          .collect(Collectors.toList());\n         }\n-        return List.of();\n+        return new ActionResponse<>(HttpStatus.OK, content);", "originalCommit": "2baa7161c8a41872d577115c34493308286385af", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzU4MTAyMA==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1158#discussion_r483581020", "bodyText": "We need to change the corresponding javascript code for those fields to expect an object and rather than an array. I will look into it.", "author": "psantos1113", "createdAt": "2020-09-04T12:21:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzU3NDM4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzU5MDY4Nw==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1158#discussion_r483590687", "bodyText": "Maybe a follow-up PR then, but we could definitely prepare the actions for that change.", "author": "gkillough", "createdAt": "2020-09-04T12:42:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzU3NDM4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzYwNjgxOQ==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1158#discussion_r483606819", "bodyText": "I have created a new branch ps_function_select_options for the comments because this PR functions with the UI as is.  I will need to make UI changes to update UI fields to render options properly.", "author": "psantos1113", "createdAt": "2020-09-04T13:13:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzU3NDM4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "91b98531b66318957abacfbb6646803ebcfed3c3", "changed_code": [{"header": "diff --git a/alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/ui/ProviderConfigSelectCustomFunctionAction.java b/alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/ui/ProviderConfigSelectCustomFunctionAction.java\nindex d871ef5075..a09a03cef0 100644\n--- a/alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/ui/ProviderConfigSelectCustomFunctionAction.java\n+++ b/alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/ui/ProviderConfigSelectCustomFunctionAction.java\n", "chunk": "@@ -61,17 +62,19 @@ public class ProviderConfigSelectCustomFunctionAction extends CustomFunctionActi\n     public ActionResponse<List<LabelValueSelectOption>> createActionResponse(FieldModel fieldModel, HttpServletContentWrapper servletContentWrapper) throws AlertDatabaseConstraintException {\n         String providerName = fieldModel.getDescriptorName();\n         Optional<DescriptorKey> descriptorKey = descriptorMap.getDescriptorKey(providerName);\n-        List<LabelValueSelectOption> content = List.of();\n+        List<LabelValueSelectOption> options = List.of();\n+        LabelValueSelectOptions optionList = new LabelValueSelectOptions();\n         if (descriptorKey.isPresent()) {\n             List<ConfigurationModel> configurationModels = configurationAccessor.getConfigurationsByDescriptorKeyAndContext(descriptorKey.get(), ConfigContextEnum.GLOBAL);\n-            content = configurationModels.stream()\n+            options = configurationModels.stream()\n                           .map(ConfigurationModel::getCopyOfKeyToFieldMap)\n                           .map(FieldAccessor::new)\n                           .map(accessor -> accessor.getString(ProviderDescriptor.KEY_PROVIDER_CONFIG_NAME))\n                           .flatMap(Optional::stream)\n                           .map(LabelValueSelectOption::new)\n                           .collect(Collectors.toList());\n+            optionList = new LabelValueSelectOptions(options);\n         }\n-        return new ActionResponse<>(HttpStatus.OK, content);\n+        return new ActionResponse<>(HttpStatus.OK, options);\n     }\n }\n", "next_change": {"commit": "e64cbae0712409eefabb4bac7893b2ef82fd75eb", "changed_code": [{"header": "diff --git a/alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/ui/ProviderConfigSelectCustomFunctionAction.java b/alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/ui/ProviderConfigSelectCustomFunctionAction.java\nindex a09a03cef0..b0852e577c 100644\n--- a/alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/ui/ProviderConfigSelectCustomFunctionAction.java\n+++ b/alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/ui/ProviderConfigSelectCustomFunctionAction.java\n", "chunk": "@@ -73,8 +72,8 @@ public class ProviderConfigSelectCustomFunctionAction extends CustomFunctionActi\n                           .flatMap(Optional::stream)\n                           .map(LabelValueSelectOption::new)\n                           .collect(Collectors.toList());\n-            optionList = new LabelValueSelectOptions(options);\n         }\n-        return new ActionResponse<>(HttpStatus.OK, options);\n+        LabelValueSelectOptions optionList = new LabelValueSelectOptions(options);\n+        return new ActionResponse<>(HttpStatus.OK, optionList);\n     }\n }\n", "next_change": {"commit": "712aceb7cfc0c7e3fea272fad4ca07e0e054b7cb", "changed_code": [{"header": "diff --git a/alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/ui/ProviderConfigSelectCustomFunctionAction.java b/alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/ui/ProviderConfigSelectCustomFunctionAction.java\nindex b0852e577c..d871ef5075 100644\n--- a/alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/ui/ProviderConfigSelectCustomFunctionAction.java\n+++ b/alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/ui/ProviderConfigSelectCustomFunctionAction.java\n", "chunk": "@@ -73,7 +72,6 @@ public class ProviderConfigSelectCustomFunctionAction extends CustomFunctionActi\n                           .map(LabelValueSelectOption::new)\n                           .collect(Collectors.toList());\n         }\n-        LabelValueSelectOptions optionList = new LabelValueSelectOptions(options);\n-        return new ActionResponse<>(HttpStatus.OK, optionList);\n+        return new ActionResponse<>(HttpStatus.OK, content);\n     }\n }\n", "next_change": {"commit": "3e7b1f3a1d329cee5ca26abf056b836aee59b898", "changed_code": [{"header": "diff --git a/alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/ui/ProviderConfigSelectCustomFunctionAction.java b/alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/ui/ProviderConfigSelectCustomFunctionAction.java\nindex d871ef5075..b0852e577c 100644\n--- a/alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/ui/ProviderConfigSelectCustomFunctionAction.java\n+++ b/alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/ui/ProviderConfigSelectCustomFunctionAction.java\n", "chunk": "@@ -72,6 +73,7 @@ public class ProviderConfigSelectCustomFunctionAction extends CustomFunctionActi\n                           .map(LabelValueSelectOption::new)\n                           .collect(Collectors.toList());\n         }\n-        return new ActionResponse<>(HttpStatus.OK, content);\n+        LabelValueSelectOptions optionList = new LabelValueSelectOptions(options);\n+        return new ActionResponse<>(HttpStatus.OK, optionList);\n     }\n }\n", "next_change": null}]}}]}}]}}]}, "revised_code_in_main": {"commit": "63924b49086b623fa93b2395a4d31da918e82222", "changed_code": [{"header": "diff --git a/alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/ui/ProviderConfigSelectCustomFunctionAction.java b/alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/ui/ProviderConfigSelectCustomFunctionAction.java\nindex d871ef5075..b0852e577c 100644\n--- a/alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/ui/ProviderConfigSelectCustomFunctionAction.java\n+++ b/alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/ui/ProviderConfigSelectCustomFunctionAction.java\n", "chunk": "@@ -58,13 +59,13 @@ public class ProviderConfigSelectCustomFunctionAction extends CustomFunctionActi\n     }\n \n     @Override\n-    public ActionResponse<List<LabelValueSelectOption>> createActionResponse(FieldModel fieldModel, HttpServletContentWrapper servletContentWrapper) throws AlertDatabaseConstraintException {\n+    public ActionResponse<LabelValueSelectOptions> createActionResponse(FieldModel fieldModel, HttpServletContentWrapper servletContentWrapper) throws AlertDatabaseConstraintException {\n         String providerName = fieldModel.getDescriptorName();\n         Optional<DescriptorKey> descriptorKey = descriptorMap.getDescriptorKey(providerName);\n-        List<LabelValueSelectOption> content = List.of();\n+        List<LabelValueSelectOption> options = List.of();\n         if (descriptorKey.isPresent()) {\n             List<ConfigurationModel> configurationModels = configurationAccessor.getConfigurationsByDescriptorKeyAndContext(descriptorKey.get(), ConfigContextEnum.GLOBAL);\n-            content = configurationModels.stream()\n+            options = configurationModels.stream()\n                           .map(ConfigurationModel::getCopyOfKeyToFieldMap)\n                           .map(FieldAccessor::new)\n                           .map(accessor -> accessor.getString(ProviderDescriptor.KEY_PROVIDER_CONFIG_NAME))\n", "next_change": {"commit": "62e4035d0df62c06e1b974175d9f8c66082b202c", "changed_code": [{"header": "diff --git a/alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/ui/ProviderConfigSelectCustomFunctionAction.java b/alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/ui/ProviderConfigSelectCustomFunctionAction.java\nindex b0852e577c..f3e38f594c 100644\n--- a/alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/ui/ProviderConfigSelectCustomFunctionAction.java\n+++ b/alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/ui/ProviderConfigSelectCustomFunctionAction.java\n", "chunk": "@@ -68,12 +68,22 @@ public class ProviderConfigSelectCustomFunctionAction extends CustomFunctionActi\n             options = configurationModels.stream()\n                           .map(ConfigurationModel::getCopyOfKeyToFieldMap)\n                           .map(FieldAccessor::new)\n-                          .map(accessor -> accessor.getString(ProviderDescriptor.KEY_PROVIDER_CONFIG_NAME))\n+                          .map(this::createNameToIdOption)\n                           .flatMap(Optional::stream)\n-                          .map(LabelValueSelectOption::new)\n                           .collect(Collectors.toList());\n         }\n         LabelValueSelectOptions optionList = new LabelValueSelectOptions(options);\n         return new ActionResponse<>(HttpStatus.OK, optionList);\n     }\n+\n+    private Optional<LabelValueSelectOption> createNameToIdOption(FieldAccessor providerGlobalConfigFieldAccessor) {\n+        Optional<String> providerConfigName = providerGlobalConfigFieldAccessor.getString(ProviderDescriptor.KEY_PROVIDER_CONFIG_NAME);\n+        Optional<String> providerConfigId = providerGlobalConfigFieldAccessor.getLong(ProviderDescriptor.KEY_PROVIDER_CONFIG_ID).map(Object::toString);\n+        if (providerConfigName.isPresent() && providerConfigId.isPresent()) {\n+            LabelValueSelectOption providerConfigOption = new LabelValueSelectOption(providerConfigName.get(), providerConfigId.get());\n+            return Optional.of(providerConfigOption);\n+        }\n+        return Optional.empty();\n+    }\n+\n }\n", "next_change": {"commit": "5dadb2fbc980220b83898cd35c13b916f58be0df", "changed_code": [{"header": "diff --git a/alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/ui/ProviderConfigSelectCustomFunctionAction.java b/alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/ui/ProviderConfigSelectCustomFunctionAction.java\nindex f3e38f594c..b793aa29c0 100644\n--- a/alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/ui/ProviderConfigSelectCustomFunctionAction.java\n+++ b/alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/ui/ProviderConfigSelectCustomFunctionAction.java\n", "chunk": "@@ -76,11 +74,10 @@ public class ProviderConfigSelectCustomFunctionAction extends CustomFunctionActi\n         return new ActionResponse<>(HttpStatus.OK, optionList);\n     }\n \n-    private Optional<LabelValueSelectOption> createNameToIdOption(FieldAccessor providerGlobalConfigFieldAccessor) {\n-        Optional<String> providerConfigName = providerGlobalConfigFieldAccessor.getString(ProviderDescriptor.KEY_PROVIDER_CONFIG_NAME);\n-        Optional<String> providerConfigId = providerGlobalConfigFieldAccessor.getLong(ProviderDescriptor.KEY_PROVIDER_CONFIG_ID).map(Object::toString);\n-        if (providerConfigName.isPresent() && providerConfigId.isPresent()) {\n-            LabelValueSelectOption providerConfigOption = new LabelValueSelectOption(providerConfigName.get(), providerConfigId.get());\n+    private Optional<LabelValueSelectOption> createNameToIdOption(ConfigurationModel configurationModel) {\n+        Optional<String> providerConfigName = configurationModel.getField(ProviderDescriptor.KEY_PROVIDER_CONFIG_NAME).flatMap(ConfigurationFieldModel::getFieldValue);\n+        if (providerConfigName.isPresent()) {\n+            LabelValueSelectOption providerConfigOption = new LabelValueSelectOption(providerConfigName.get(), configurationModel.getConfigurationId().toString());\n             return Optional.of(providerConfigOption);\n         }\n         return Optional.empty();\n", "next_change": {"commit": "ffc058b866d0b6f46a6225253cacd4af4df751ba", "changed_code": [{"header": "diff --git a/alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/ui/ProviderConfigSelectCustomFunctionAction.java b/alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/ui/ProviderConfigSelectCustomFunctionAction.java\nindex b793aa29c0..38512114fe 100644\n--- a/alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/ui/ProviderConfigSelectCustomFunctionAction.java\n+++ b/alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/ui/ProviderConfigSelectCustomFunctionAction.java\n", "chunk": "@@ -75,12 +75,9 @@ public class ProviderConfigSelectCustomFunctionAction extends CustomFunctionActi\n     }\n \n     private Optional<LabelValueSelectOption> createNameToIdOption(ConfigurationModel configurationModel) {\n-        Optional<String> providerConfigName = configurationModel.getField(ProviderDescriptor.KEY_PROVIDER_CONFIG_NAME).flatMap(ConfigurationFieldModel::getFieldValue);\n-        if (providerConfigName.isPresent()) {\n-            LabelValueSelectOption providerConfigOption = new LabelValueSelectOption(providerConfigName.get(), configurationModel.getConfigurationId().toString());\n-            return Optional.of(providerConfigOption);\n-        }\n-        return Optional.empty();\n+        return configurationModel.getField(ProviderDescriptor.KEY_PROVIDER_CONFIG_NAME)\n+                   .flatMap(ConfigurationFieldModel::getFieldValue)\n+                   .map(providerConfigName -> new LabelValueSelectOption(providerConfigName, configurationModel.getConfigurationId().toString()));\n     }\n \n }\n", "next_change": null}]}}]}}]}}, {"header": "diff --git a/alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/ui/ProviderConfigSelectCustomFunctionAction.java b/alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/ui/ProviderConfigSelectCustomFunctionAction.java\nindex d871ef5075..b0852e577c 100644\n--- a/alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/ui/ProviderConfigSelectCustomFunctionAction.java\n+++ b/alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/ui/ProviderConfigSelectCustomFunctionAction.java\n", "chunk": "@@ -72,6 +73,7 @@ public class ProviderConfigSelectCustomFunctionAction extends CustomFunctionActi\n                           .map(LabelValueSelectOption::new)\n                           .collect(Collectors.toList());\n         }\n-        return new ActionResponse<>(HttpStatus.OK, content);\n+        LabelValueSelectOptions optionList = new LabelValueSelectOptions(options);\n+        return new ActionResponse<>(HttpStatus.OK, optionList);\n     }\n }\n", "next_change": {"commit": "62e4035d0df62c06e1b974175d9f8c66082b202c", "changed_code": [{"header": "diff --git a/alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/ui/ProviderConfigSelectCustomFunctionAction.java b/alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/ui/ProviderConfigSelectCustomFunctionAction.java\nindex b0852e577c..f3e38f594c 100644\n--- a/alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/ui/ProviderConfigSelectCustomFunctionAction.java\n+++ b/alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/ui/ProviderConfigSelectCustomFunctionAction.java\n", "chunk": "@@ -68,12 +68,22 @@ public class ProviderConfigSelectCustomFunctionAction extends CustomFunctionActi\n             options = configurationModels.stream()\n                           .map(ConfigurationModel::getCopyOfKeyToFieldMap)\n                           .map(FieldAccessor::new)\n-                          .map(accessor -> accessor.getString(ProviderDescriptor.KEY_PROVIDER_CONFIG_NAME))\n+                          .map(this::createNameToIdOption)\n                           .flatMap(Optional::stream)\n-                          .map(LabelValueSelectOption::new)\n                           .collect(Collectors.toList());\n         }\n         LabelValueSelectOptions optionList = new LabelValueSelectOptions(options);\n         return new ActionResponse<>(HttpStatus.OK, optionList);\n     }\n+\n+    private Optional<LabelValueSelectOption> createNameToIdOption(FieldAccessor providerGlobalConfigFieldAccessor) {\n+        Optional<String> providerConfigName = providerGlobalConfigFieldAccessor.getString(ProviderDescriptor.KEY_PROVIDER_CONFIG_NAME);\n+        Optional<String> providerConfigId = providerGlobalConfigFieldAccessor.getLong(ProviderDescriptor.KEY_PROVIDER_CONFIG_ID).map(Object::toString);\n+        if (providerConfigName.isPresent() && providerConfigId.isPresent()) {\n+            LabelValueSelectOption providerConfigOption = new LabelValueSelectOption(providerConfigName.get(), providerConfigId.get());\n+            return Optional.of(providerConfigOption);\n+        }\n+        return Optional.empty();\n+    }\n+\n }\n", "next_change": {"commit": "5dadb2fbc980220b83898cd35c13b916f58be0df", "changed_code": [{"header": "diff --git a/alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/ui/ProviderConfigSelectCustomFunctionAction.java b/alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/ui/ProviderConfigSelectCustomFunctionAction.java\nindex f3e38f594c..b793aa29c0 100644\n--- a/alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/ui/ProviderConfigSelectCustomFunctionAction.java\n+++ b/alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/ui/ProviderConfigSelectCustomFunctionAction.java\n", "chunk": "@@ -76,11 +74,10 @@ public class ProviderConfigSelectCustomFunctionAction extends CustomFunctionActi\n         return new ActionResponse<>(HttpStatus.OK, optionList);\n     }\n \n-    private Optional<LabelValueSelectOption> createNameToIdOption(FieldAccessor providerGlobalConfigFieldAccessor) {\n-        Optional<String> providerConfigName = providerGlobalConfigFieldAccessor.getString(ProviderDescriptor.KEY_PROVIDER_CONFIG_NAME);\n-        Optional<String> providerConfigId = providerGlobalConfigFieldAccessor.getLong(ProviderDescriptor.KEY_PROVIDER_CONFIG_ID).map(Object::toString);\n-        if (providerConfigName.isPresent() && providerConfigId.isPresent()) {\n-            LabelValueSelectOption providerConfigOption = new LabelValueSelectOption(providerConfigName.get(), providerConfigId.get());\n+    private Optional<LabelValueSelectOption> createNameToIdOption(ConfigurationModel configurationModel) {\n+        Optional<String> providerConfigName = configurationModel.getField(ProviderDescriptor.KEY_PROVIDER_CONFIG_NAME).flatMap(ConfigurationFieldModel::getFieldValue);\n+        if (providerConfigName.isPresent()) {\n+            LabelValueSelectOption providerConfigOption = new LabelValueSelectOption(providerConfigName.get(), configurationModel.getConfigurationId().toString());\n             return Optional.of(providerConfigOption);\n         }\n         return Optional.empty();\n", "next_change": {"commit": "ffc058b866d0b6f46a6225253cacd4af4df751ba", "changed_code": [{"header": "diff --git a/alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/ui/ProviderConfigSelectCustomFunctionAction.java b/alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/ui/ProviderConfigSelectCustomFunctionAction.java\nindex b793aa29c0..38512114fe 100644\n--- a/alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/ui/ProviderConfigSelectCustomFunctionAction.java\n+++ b/alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/ui/ProviderConfigSelectCustomFunctionAction.java\n", "chunk": "@@ -75,12 +75,9 @@ public class ProviderConfigSelectCustomFunctionAction extends CustomFunctionActi\n     }\n \n     private Optional<LabelValueSelectOption> createNameToIdOption(ConfigurationModel configurationModel) {\n-        Optional<String> providerConfigName = configurationModel.getField(ProviderDescriptor.KEY_PROVIDER_CONFIG_NAME).flatMap(ConfigurationFieldModel::getFieldValue);\n-        if (providerConfigName.isPresent()) {\n-            LabelValueSelectOption providerConfigOption = new LabelValueSelectOption(providerConfigName.get(), configurationModel.getConfigurationId().toString());\n-            return Optional.of(providerConfigOption);\n-        }\n-        return Optional.empty();\n+        return configurationModel.getField(ProviderDescriptor.KEY_PROVIDER_CONFIG_NAME)\n+                   .flatMap(ConfigurationFieldModel::getFieldValue)\n+                   .map(providerConfigName -> new LabelValueSelectOption(providerConfigName, configurationModel.getConfigurationId().toString()));\n     }\n \n }\n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "63924b49086b623fa93b2395a4d31da918e82222", "message": "Merge commit", "committedDate": null}, {"oid": "62e4035d0df62c06e1b974175d9f8c66082b202c", "committedDate": "2020-09-18 10:44:21 -0400", "message": "Feat(Provider Fields): Migrate from provider config name to id in UI fields and custom endpoints"}, {"oid": "5dadb2fbc980220b83898cd35c13b916f58be0df", "committedDate": "2020-09-18 12:11:51 -0400", "message": "Fix(Liquibase): Add provider config id field to provider_blackduck's descriptor fields"}, {"oid": "ffc058b866d0b6f46a6225253cacd4af4df751ba", "committedDate": "2020-09-18 12:56:52 -0400", "message": "Fix(Provider Custom Function): Collapse if-else into existing optional pipeline"}, {"oid": "3cfc6c1535496b5daa1ef1dc5d6d41e1b68d8e6d", "committedDate": "2020-10-01 10:48:57 -0400", "message": "Fix(Field Processing): Commonize field processing components"}, {"oid": "d159ed62b4b8d236f3e3335eea5e1e2eda6116b3", "committedDate": "2020-10-01 12:35:14 -0400", "message": "Fix(Custom Function Actions): Add related field validation to custom function actions"}, {"oid": "bfb754c442228e676641f58324526ffbed1e5e82", "committedDate": "2020-10-02 10:31:00 -0400", "message": "Fix(CustomFunctionAction): Get all possible config fields for field model context to account for distribution jobs having multiple descriptors"}, {"oid": "95fa7c60a475efcad3e5f9526aa965eaf31e05c1", "committedDate": "2020-10-07 11:18:04 -0400", "message": "Fix(Custom Functions): Move provider and channel custom functions to their logical locations"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzU3NzY1Mg==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1158#discussion_r483577652", "body": "Does this inherit the `@RequestMapping` from the sub-class?", "bodyText": "Does this inherit the @RequestMapping from the sub-class?", "bodyHTML": "<p dir=\"auto\">Does this inherit the <code>@RequestMapping</code> from the sub-class?</p>", "author": "gkillough", "createdAt": "2020-09-04T12:14:27Z", "path": "src/main/java/com/synopsys/integration/alert/web/api/functions/AbstractFunctionController.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/**\n+ * blackduck-alert\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.web.api.functions;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestBody;\n+\n+import com.synopsys.integration.alert.common.action.ActionResponse;\n+import com.synopsys.integration.alert.common.action.CustomFunctionAction;\n+import com.synopsys.integration.alert.common.rest.HttpServletContentWrapper;\n+import com.synopsys.integration.alert.common.rest.ResponseFactory;\n+import com.synopsys.integration.alert.common.rest.model.FieldModel;\n+import com.synopsys.integration.alert.web.common.BaseController;\n+\n+public abstract class AbstractFunctionController<T> extends BaseController {\n+    public static final String API_FUNCTION_URL = CustomFunctionAction.API_FUNCTION_URL;\n+    private final CustomFunctionAction<T> functionAction;\n+\n+    public AbstractFunctionController(CustomFunctionAction<T> functionAction) {\n+        this.functionAction = functionAction;\n+    }\n+\n+    @PostMapping", "originalCommit": "2baa7161c8a41872d577115c34493308286385af", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzU4MDI0NA==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1158#discussion_r483580244", "bodyText": "yes it does.  The PostMapping just makes the controller accept post to the path in the RequestMapping defined in the sub-class that implements this abstract class.", "author": "psantos1113", "createdAt": "2020-09-04T12:20:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzU3NzY1Mg=="}], "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "39bdee6e6897d739cd249e6f274bb61965219968", "changed_code": [{"header": "diff --git a/src/main/java/com/synopsys/integration/alert/web/api/functions/AbstractFunctionController.java b/src/main/java/com/synopsys/integration/alert/web/api/functions/AbstractFunctionController.java\nindex 4075642e93..14dc2066b1 100644\n--- a/src/main/java/com/synopsys/integration/alert/web/api/functions/AbstractFunctionController.java\n+++ b/src/main/java/com/synopsys/integration/alert/web/api/functions/AbstractFunctionController.java\n", "chunk": "@@ -45,13 +44,9 @@ public abstract class AbstractFunctionController<T> extends BaseController {\n     }\n \n     @PostMapping\n-    public ResponseEntity<T> postConfig(HttpServletRequest httpRequest, HttpServletResponse httpResponse, @RequestBody FieldModel restModel) {\n+    public T postConfig(HttpServletRequest httpRequest, HttpServletResponse httpResponse, @RequestBody FieldModel restModel) {\n         HttpServletContentWrapper servletContentWrapper = new HttpServletContentWrapper(httpRequest, httpResponse);\n         ActionResponse<T> result = functionAction.createResponse(restModel, servletContentWrapper);\n-        if (result.isSuccessful()) {\n-            return ResponseFactory.createResponseFromAction(result);\n-        } else {\n-            throw ResponseFactory.createStatusException(result);\n-        }\n+        return ResponseFactory.createContentResponseFromAction(result);\n     }\n }\n", "next_change": null}]}, "commits_in_main": [{"oid": "63924b49086b623fa93b2395a4d31da918e82222", "message": "Merge commit", "committedDate": null}, {"oid": "39bdee6e6897d739cd249e6f274bb61965219968", "committedDate": "2020-09-09 11:28:22 -0400", "message": "feat: Implement Job and Config actions."}, {"oid": "5854a84d1e280819b3c65f97d09bd065d1329347", "committedDate": "2020-10-07 10:54:12 -0400", "message": "Fix(Custom Functions): Begin moving custom fuction actions and controllers to more logical packages within web"}]}, {"oid": "4f1b9ce03ecd0175de22e3f938b74a0beba79a0c", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/4f1b9ce03ecd0175de22e3f938b74a0beba79a0c", "message": "refactor: Have the ResponseFactory set message default to null.", "committedDate": "2020-09-04T13:09:06Z", "type": "commit"}, {"oid": "91b98531b66318957abacfbb6646803ebcfed3c3", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/91b98531b66318957abacfbb6646803ebcfed3c3", "message": "refactor: Create response objects for the select options.", "committedDate": "2020-09-04T13:10:17Z", "type": "commit"}, {"oid": "e64cbae0712409eefabb4bac7893b2ef82fd75eb", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/e64cbae0712409eefabb4bac7893b2ef82fd75eb", "message": "refactor: Change the custom functions using lists to return objects.", "committedDate": "2020-09-04T13:45:57Z", "type": "commit"}, {"oid": "712aceb7cfc0c7e3fea272fad4ca07e0e054b7cb", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/712aceb7cfc0c7e3fea272fad4ca07e0e054b7cb", "message": "Merge remote-tracking branch 'origin/feat_action_response' into ps_function_controllers", "committedDate": "2020-09-04T13:47:14Z", "type": "commit"}, {"oid": "29bd761870c4240dd20b74d11aadad167ee63c86", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/29bd761870c4240dd20b74d11aadad167ee63c86", "message": "chore: Add copyright headers.", "committedDate": "2020-09-04T14:01:44Z", "type": "commit"}, {"oid": "3e7b1f3a1d329cee5ca26abf056b836aee59b898", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/3e7b1f3a1d329cee5ca26abf056b836aee59b898", "message": "Merge remote-tracking branch 'origin/ps_function_controllers' into ps_function_select_options", "committedDate": "2020-09-04T14:07:14Z", "type": "commit"}, {"oid": "8c7492c2a2a94eb274ba378392306ac03002b8f8", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/8c7492c2a2a94eb274ba378392306ac03002b8f8", "message": "chore: Add copyright headers.", "committedDate": "2020-09-04T14:22:07Z", "type": "commit"}, {"oid": "c451757e588fd17ec4daa1d84675533391495779", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/c451757e588fd17ec4daa1d84675533391495779", "message": "refactor: Fix the email address selection and enforce an options field is JSON.", "committedDate": "2020-09-04T15:27:48Z", "type": "commit"}, {"oid": "fb8e1508985ea56d282a1d2c1ad37fd049bfcbb9", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/fb8e1508985ea56d282a1d2c1ad37fd049bfcbb9", "message": "Merge pull request #1160 from blackducksoftware/ps_function_select_options\n\nUpdate the select options to use an object instead of List<type>", "committedDate": "2020-09-04T16:04:53Z", "type": "commit"}]}