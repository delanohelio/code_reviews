{"pr_number": 1304, "pr_title": "Jira Field Value Replacement", "pr_author": "gkillough", "pr_createdAt": "2020-12-15T19:41:17Z", "pr_url": "https://github.com/blackducksoftware/blackduck-alert/pull/1304", "timeline": [{"oid": "5af4fcce1a0cc040061989fb69545c547df91aa0", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/5af4fcce1a0cc040061989fb69545c547df91aa0", "message": "Feat(Jira): Add utility for field replacement and error message improvement", "committedDate": "2020-12-15T19:06:56Z", "type": "commit"}, {"oid": "c3f0f84c860adc85469c3b86f5775f0eabb72c2f", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/c3f0f84c860adc85469c3b86f5775f0eabb72c2f", "message": "Fix(Jira): Update issue handler constructors", "committedDate": "2020-12-15T19:39:59Z", "type": "commit"}, {"oid": "ff9b034945899a141550402a687ba2cf1a718deb", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/ff9b034945899a141550402a687ba2cf1a718deb", "message": "Feat(Jira): Use replacement field value if present", "committedDate": "2020-12-15T19:44:28Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzY1MDY3Ng==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1304#discussion_r543650676", "body": "I believe there is a slight spelling mistake here 'may'", "bodyText": "I believe there is a slight spelling mistake here 'may'", "bodyHTML": "<p dir=\"auto\">I believe there is a slight spelling mistake here 'may'</p>", "author": "bamandel", "createdAt": "2020-12-15T20:06:06Z", "path": "channel/src/main/java/com/synopsys/integration/alert/channel/jira/common/util/JiraCustomFieldValueReplacementUtils.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/**\n+ * channel\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.channel.jira.common.util;\n+\n+import java.util.Optional;\n+\n+import org.apache.commons.lang3.StringUtils;\n+\n+import com.synopsys.integration.alert.channel.jira.common.JiraIssueSearchProperties;\n+import com.synopsys.integration.alert.channel.jira.common.model.JiraCustomFieldConfig;\n+\n+public final class JiraCustomFieldValueReplacementUtils {\n+    public static final String REPLACEMENT_PROVIDER_NAME = \"{{providerName}}\";\n+    public static final String REPLACEMENT_PROJECT_NAME = \"{{projectName}}\";\n+    public static final String REPLACEMENT_PROJECT_VERSION = \"{{projectVersion}}\";\n+    public static final String REPLACEMENT_COMPONENT_NAME = \"{{componentName}}\";\n+    public static final String REPLACEMENT_COMPONENT_VERSION = \"{{componentVersion}}\";\n+\n+    // \"None\" is a frequently used default String for may fields", "originalCommit": "ff9b034945899a141550402a687ba2cf1a718deb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "06a853604112495c8d5015262afbc8ebde85fa0d", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/06a853604112495c8d5015262afbc8ebde85fa0d", "message": "Fix(Jira): Correct typo in comment", "committedDate": "2020-12-15T20:12:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM5NTcxOQ==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1304#discussion_r544395719", "body": "```suggestion\r\n        this.fieldReplacementValue = StringUtils.trimToNull(fieldReplacementValue);\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (StringUtils.isNotBlank(fieldReplacementValue)) {\n          \n          \n            \n                        this.fieldReplacementValue = fieldReplacementValue;\n          \n          \n            \n                    }\n          \n          \n            \n                    this.fieldReplacementValue = StringUtils.trimToNull(fieldReplacementValue);", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">if</span> (<span class=\"pl-smi\">StringUtils</span><span class=\"pl-k\">.</span>isNotBlank(fieldReplacementValue)) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            <span class=\"pl-c1\">this</span><span class=\"pl-k\">.</span>fieldReplacementValue <span class=\"pl-k\">=</span> fieldReplacementValue;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-c1\">this</span><span class=\"pl-k\">.</span>fieldReplacementValue <span class=\"pl-k\">=</span> <span class=\"pl-smi\">StringUtils</span><span class=\"pl-k\">.</span>trimToNull(fieldReplacementValue);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "JakeMathews", "createdAt": "2020-12-16T15:34:12Z", "path": "channel/src/main/java/com/synopsys/integration/alert/channel/jira/common/model/JiraCustomFieldConfig.java", "diffHunk": "@@ -22,21 +22,38 @@\n  */\n package com.synopsys.integration.alert.channel.jira.common.model;\n \n+import java.util.Optional;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.jetbrains.annotations.Nullable;\n+\n public class JiraCustomFieldConfig {\n     private final String fieldName;\n-    private final String fieldValue;\n+    private final String fieldOriginalValue;\n+    private @Nullable String fieldReplacementValue;\n \n-    public JiraCustomFieldConfig(String fieldName, String fieldValue) {\n+    public JiraCustomFieldConfig(String fieldName, String fieldOriginalValue) {\n         this.fieldName = fieldName;\n-        this.fieldValue = fieldValue;\n+        this.fieldOriginalValue = fieldOriginalValue;\n     }\n \n     public String getFieldName() {\n         return fieldName;\n     }\n \n-    public String getFieldValue() {\n-        return fieldValue;\n+    public String getFieldOriginalValue() {\n+        return fieldOriginalValue;\n+    }\n+\n+    public Optional<String> getFieldReplacementValue() {\n+        return Optional.ofNullable(fieldReplacementValue);\n+    }\n+\n+    public void setFieldReplacementValue(String fieldReplacementValue) {\n+        // Leave the field null if it would be set to a blank value\n+        if (StringUtils.isNotBlank(fieldReplacementValue)) {\n+            this.fieldReplacementValue = fieldReplacementValue;\n+        }", "originalCommit": "06a853604112495c8d5015262afbc8ebde85fa0d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM5NjU5OQ==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1304#discussion_r544396599", "bodyText": "Not sure if this is better since you are re-assigning it every time, but I think it's a little clearer and doesn't need a comment.", "author": "JakeMathews", "createdAt": "2020-12-16T15:35:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM5NTcxOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM5OTYyMg==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1304#discussion_r544399622", "body": "```suggestion\r\n        return Optional.ofNullable(StringUtils.trimToNull(nullableValue))\r\n                                        .or(() -> Optional.of(\"DEFAULT_REPLACEMENT\"));\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (StringUtils.isNotBlank(nullableValue)) {\n          \n          \n            \n                        return Optional.of(nullableValue);\n          \n          \n            \n                    }\n          \n          \n            \n                    return Optional.of(DEFAULT_REPLACEMENT);\n          \n          \n            \n                    return Optional.ofNullable(StringUtils.trimToNull(nullableValue))\n          \n          \n            \n                                                    .or(() -> Optional.of(\"DEFAULT_REPLACEMENT\"));", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">if</span> (<span class=\"pl-smi\">StringUtils</span><span class=\"pl-k\">.</span>isNotBlank(nullableValue)) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            <span class=\"pl-k\">return</span> <span class=\"pl-smi\">Optional</span><span class=\"pl-k\">.</span>of(nullableValue);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">return</span> <span class=\"pl-smi\">Optional</span><span class=\"pl-k\">.</span>of(<span class=\"pl-c1\">DEFAULT_REPLACEMENT</span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">return</span> <span class=\"pl-smi\">Optional</span><span class=\"pl-k\">.</span>ofNullable(<span class=\"pl-smi\">StringUtils</span><span class=\"pl-k\">.</span>trimToNull(nullableValue))</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                                        .or(() <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-smi\">Optional</span><span class=\"pl-k\">.</span>of(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>DEFAULT_REPLACEMENT<span class=\"pl-pds\">\"</span></span>));</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "JakeMathews", "createdAt": "2020-12-16T15:38:50Z", "path": "channel/src/main/java/com/synopsys/integration/alert/channel/jira/common/util/JiraCustomFieldValueReplacementUtils.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/**\n+ * channel\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.channel.jira.common.util;\n+\n+import java.util.Optional;\n+\n+import org.apache.commons.lang3.StringUtils;\n+\n+import com.synopsys.integration.alert.channel.jira.common.JiraIssueSearchProperties;\n+import com.synopsys.integration.alert.channel.jira.common.model.JiraCustomFieldConfig;\n+\n+public final class JiraCustomFieldValueReplacementUtils {\n+    public static final String REPLACEMENT_PROVIDER_NAME = \"{{providerName}}\";\n+    public static final String REPLACEMENT_PROJECT_NAME = \"{{projectName}}\";\n+    public static final String REPLACEMENT_PROJECT_VERSION = \"{{projectVersion}}\";\n+    public static final String REPLACEMENT_COMPONENT_NAME = \"{{componentName}}\";\n+    public static final String REPLACEMENT_COMPONENT_VERSION = \"{{componentVersion}}\";\n+\n+    // \"None\" is a frequently used default String for many fields\n+    public static final String DEFAULT_REPLACEMENT = \"None\";\n+\n+    public static void injectReplacementFieldValue(JiraCustomFieldConfig jiraCustomField, JiraIssueSearchProperties jiraIssueSearchProperties) {\n+        String originalValue = jiraCustomField.getFieldOriginalValue();\n+        extractReplacementValue(originalValue, jiraIssueSearchProperties)\n+            .ifPresent(jiraCustomField::setFieldReplacementValue);\n+    }\n+\n+    private static Optional<String> extractReplacementValue(String originalFieldValue, JiraIssueSearchProperties jiraIssueSearchProperties) {\n+        switch (originalFieldValue) {\n+            case REPLACEMENT_PROVIDER_NAME:\n+                return Optional.of(jiraIssueSearchProperties.getProvider());\n+            case REPLACEMENT_PROJECT_NAME:\n+                return Optional.of(jiraIssueSearchProperties.getTopicValue());\n+            case REPLACEMENT_PROJECT_VERSION:\n+                return defaultIfBlank(jiraIssueSearchProperties.getSubTopicValue());\n+            case REPLACEMENT_COMPONENT_NAME:\n+                return defaultIfBlank(jiraIssueSearchProperties.getComponentValue());\n+            case REPLACEMENT_COMPONENT_VERSION:\n+                return defaultIfBlank(jiraIssueSearchProperties.getSubComponentValue());\n+            default:\n+                return Optional.empty();\n+        }\n+    }\n+\n+    private static Optional<String> defaultIfBlank(String nullableValue) {\n+        if (StringUtils.isNotBlank(nullableValue)) {\n+            return Optional.of(nullableValue);\n+        }\n+        return Optional.of(DEFAULT_REPLACEMENT);", "originalCommit": "06a853604112495c8d5015262afbc8ebde85fa0d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQxMzg1NQ==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1304#discussion_r544413855", "bodyText": "I haven't been taking advantage of .or enough. I definitely will now.", "author": "gkillough", "createdAt": "2020-12-16T15:55:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM5OTYyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQwMDIyMA==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1304#discussion_r544400220", "body": "Do we prefer `List.of()` over `Collections.emptyList()`?", "bodyText": "Do we prefer List.of() over Collections.emptyList()?", "bodyHTML": "<p dir=\"auto\">Do we prefer <code>List.of()</code> over <code>Collections.emptyList()</code>?</p>", "author": "JakeMathews", "createdAt": "2020-12-16T15:39:31Z", "path": "channel/src/main/java/com/synopsys/integration/alert/channel/jira/common/util/JiraErrorMessageUtility.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/**\n+ * channel\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.channel.jira.common.util;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.lang3.StringUtils;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.synopsys.integration.alert.common.descriptor.config.field.errors.AlertFieldStatus;\n+import com.synopsys.integration.alert.common.exception.AlertException;\n+import com.synopsys.integration.alert.common.exception.AlertFieldException;\n+import com.synopsys.integration.rest.exception.IntegrationRestException;\n+\n+public class JiraErrorMessageUtility {\n+    private final Gson gson;\n+\n+    public JiraErrorMessageUtility(Gson gson) {\n+        this.gson = gson;\n+    }\n+\n+    public AlertException improveRestException(IntegrationRestException restException, String issueCreatorFieldKey, String issueCreatorEmail) {\n+        String message = restException.getMessage();\n+        try {\n+            List<String> responseErrors = extractErrorsFromResponseContent(restException.getHttpResponseContent(), issueCreatorFieldKey, issueCreatorEmail);\n+            if (!responseErrors.isEmpty()) {\n+                message += \" | Details: \" + StringUtils.join(responseErrors, \", \");\n+            }\n+        } catch (AlertFieldException reporterException) {\n+            return reporterException;\n+        }\n+        return new AlertException(message, restException);\n+    }\n+\n+    private List<String> extractErrorsFromResponseContent(String httpResponseContent, String issueCreatorFieldKey, String issueCreatorEmail) throws AlertFieldException {\n+        JsonObject responseContentObject = gson.fromJson(httpResponseContent, JsonObject.class);\n+        if (null != responseContentObject && responseContentObject.has(\"errors\")) {\n+            return extractSpecificErrorsFromErrorsObject(responseContentObject.getAsJsonObject(\"errors\"), issueCreatorFieldKey, issueCreatorEmail);\n+        }\n+        return List.of();", "originalCommit": "06a853604112495c8d5015262afbc8ebde85fa0d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQxNDIwNQ==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1304#discussion_r544414205", "bodyText": "With Java 11 we prefer List.of().", "author": "gkillough", "createdAt": "2020-12-16T15:56:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQwMDIyMA=="}], "type": "inlineReview"}, {"oid": "de66d55654c35f34495bf4c345e7dddd070487d2", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/de66d55654c35f34495bf4c345e7dddd070487d2", "message": "Refactor: Clean up optional string usage", "committedDate": "2020-12-16T15:57:50Z", "type": "commit"}]}