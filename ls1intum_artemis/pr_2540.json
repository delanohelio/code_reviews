{"pr_number": 2540, "pr_title": "Enhancement/test ltiservice", "pr_author": "ivohashamov", "pr_createdAt": "2020-12-13T08:37:34Z", "pr_url": "https://github.com/ls1intum/Artemis/pull/2540", "timeline": [{"oid": "b64d3054ed6ca7c689b781bcec938867bec16b91", "url": "https://github.com/ls1intum/Artemis/commit/b64d3054ed6ca7c689b781bcec938867bec16b91", "message": "Create LtiServiceTest and implement test cases for all public methods (#2079)", "committedDate": "2020-12-10T19:56:57Z", "type": "commit"}, {"oid": "8cbee123ef054cccb7f38da790b9cfb821854641", "url": "https://github.com/ls1intum/Artemis/commit/8cbee123ef054cccb7f38da790b9cfb821854641", "message": "Merge branch 'develop' into enhancement/test-ltiservice", "committedDate": "2020-12-12T10:20:10Z", "type": "commit"}, {"oid": "b8e26ee654ed161ff282e1141597a03a43ef8af7", "url": "https://github.com/ls1intum/Artemis/commit/b8e26ee654ed161ff282e1141597a03a43ef8af7", "message": "Merge branch 'develop' into enhancement/test-ltiservice", "committedDate": "2020-12-13T08:34:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjIwNTcxNw==", "url": "https://github.com/ls1intum/Artemis/pull/2540#discussion_r542205717", "body": "there are some Codcy issues, regarding this issue. Please fix those :) \r\n\r\n```suggestion\r\n        assertThat(\"ff30145d6884eeb2c1cef50298939383\".equals(ltiUserId.getLtiUserId()));\r\n```", "bodyText": "there are some Codcy issues, regarding this issue. Please fix those :)\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertThat(ltiUserId.getLtiUserId().equals(\"ff30145d6884eeb2c1cef50298939383\"));\n          \n          \n            \n                    assertThat(\"ff30145d6884eeb2c1cef50298939383\".equals(ltiUserId.getLtiUserId()));", "bodyHTML": "<p dir=\"auto\">there are some Codcy issues, regarding this issue. Please fix those :)</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        assertThat(ltiUserId<span class=\"pl-k\">.</span>getLtiUserId()<span class=\"pl-k x x-first\">.</span><span class=\"x\">equals(</span><span class=\"pl-s\"><span class=\"pl-pds x\">\"</span><span class=\"x\">ff30145d6884eeb2c1cef50298939383</span><span class=\"pl-pds x x-last\">\"</span></span>));</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        assertThat(<span class=\"pl-s\"><span class=\"pl-pds x x-first\">\"</span><span class=\"x\">ff30145d6884eeb2c1cef50298939383</span><span class=\"pl-pds x\">\"</span></span><span class=\"pl-k x\">.</span><span class=\"x x-last\">equals(</span>ltiUserId<span class=\"pl-k\">.</span>getLtiUserId()));</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "derLalla", "createdAt": "2020-12-14T08:46:21Z", "path": "src/test/java/de/tum/in/www1/artemis/service/connectors/LtiServiceTest.java", "diffHunk": "@@ -0,0 +1,286 @@\n+package de.tum.in.www1.artemis.service.connectors;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.mockito.Mockito.*;\n+\n+import java.util.*;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mock;\n+import org.mockito.MockitoAnnotations;\n+import org.springframework.security.authentication.InternalAuthenticationServiceException;\n+import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\n+import org.springframework.security.core.context.SecurityContextHolder;\n+import org.springframework.test.util.ReflectionTestUtils;\n+\n+import de.tum.in.www1.artemis.authentication.AuthenticationIntegrationTestHelper;\n+import de.tum.in.www1.artemis.domain.*;\n+import de.tum.in.www1.artemis.domain.participation.StudentParticipation;\n+import de.tum.in.www1.artemis.repository.LtiOutcomeUrlRepository;\n+import de.tum.in.www1.artemis.repository.LtiUserIdRepository;\n+import de.tum.in.www1.artemis.repository.ResultRepository;\n+import de.tum.in.www1.artemis.repository.UserRepository;\n+import de.tum.in.www1.artemis.security.ArtemisAuthenticationProvider;\n+import de.tum.in.www1.artemis.service.UserService;\n+import de.tum.in.www1.artemis.web.rest.dto.LtiLaunchRequestDTO;\n+\n+public class LtiServiceTest {\n+\n+    @Mock\n+    private UserService userService;\n+\n+    @Mock\n+    private UserRepository userRepository;\n+\n+    @Mock\n+    private LtiOutcomeUrlRepository ltiOutcomeUrlRepository;\n+\n+    @Mock\n+    private ResultRepository resultRepository;\n+\n+    @Mock\n+    private ArtemisAuthenticationProvider artemisAuthenticationProvider;\n+\n+    @Mock\n+    private LtiUserIdRepository ltiUserIdRepository;\n+\n+    @Mock\n+    private HttpServletResponse response;\n+\n+    private Exercise exercise;\n+\n+    private LtiService ltiService;\n+\n+    private LtiLaunchRequestDTO launchRequest;\n+\n+    private User user;\n+\n+    private LtiUserId ltiUserId;\n+\n+    private Course course;\n+\n+    private String courseStudentGroupName = \"courseStudentGroupName\";\n+\n+    private LtiOutcomeUrl ltiOutcomeUrl;\n+\n+    @BeforeEach\n+    public void init() {\n+        MockitoAnnotations.openMocks(this);\n+        SecurityContextHolder.clearContext();\n+        ltiService = new LtiService(userService, userRepository, ltiOutcomeUrlRepository, resultRepository, artemisAuthenticationProvider, ltiUserIdRepository, response);\n+        course = new Course();\n+        course.setStudentGroupName(courseStudentGroupName);\n+        exercise = new TextExercise();\n+        exercise.setCourse(course);\n+        launchRequest = AuthenticationIntegrationTestHelper.setupDefaultLtiLaunchRequest();\n+        user = new User();\n+        user.setLogin(\"login\");\n+        user.setPassword(\"password\");\n+        user.setGroups(new HashSet<>());\n+        ltiUserId = new LtiUserId();\n+        ltiUserId.setUser(user);\n+        ltiOutcomeUrl = new LtiOutcomeUrl();\n+\n+        ReflectionTestUtils.setField(ltiService, \"USER_GROUP_NAME_EDX\", Optional.of(\"\"));\n+        ReflectionTestUtils.setField(ltiService, \"USER_GROUP_NAME_U4I\", Optional.of(\"\"));\n+        ReflectionTestUtils.setField(ltiService, \"USER_PREFIX_EDX\", Optional.of(\"\"));\n+        ReflectionTestUtils.setField(ltiService, \"USER_PREFIX_U4I\", Optional.of(\"\"));\n+    }\n+\n+    @Test\n+    public void handleLaunchRequest_LTILaunchFromEdx() {\n+        launchRequest.setUser_id(\"student\");\n+\n+        InternalAuthenticationServiceException exception = assertThrows(InternalAuthenticationServiceException.class, () -> {\n+            ltiService.handleLaunchRequest(launchRequest, exercise);\n+        });\n+\n+        String expectedMessage = \"Invalid username sent by launch request. Please do not launch the exercise from edX studio. Use 'Preview' instead.\";\n+        assertThat(exception.getMessage().equals(expectedMessage));\n+    }\n+\n+    @Test\n+    public void handleLaunchRequest_InvalidContextLabel() {\n+        launchRequest.setContext_label(\"randomLabel\");\n+\n+        InternalAuthenticationServiceException exception = assertThrows(InternalAuthenticationServiceException.class, () -> {\n+            ltiService.handleLaunchRequest(launchRequest, exercise);\n+        });\n+\n+        String expectedMessage = \"Unknown context_label sent in LTI Launch Request: \" + launchRequest.toString();\n+        assertThat(exception.getMessage().equals(expectedMessage));\n+    }\n+\n+    @Test\n+    public void handleLaunchRequest_existingMappingForLtiUserId() {\n+        when(ltiUserIdRepository.findByLtiUserId(launchRequest.getUser_id())).thenReturn(Optional.of(ltiUserId));\n+        when(userService.getUserWithGroupsAndAuthorities()).thenReturn(user);\n+\n+        onSuccessfulAuthenticationSetup(user, ltiUserId);\n+\n+        ltiService.handleLaunchRequest(launchRequest, exercise);\n+\n+        onSuccessfulAuthenticationAssertions(user, ltiUserId);\n+    }\n+\n+    @Test\n+    public void handleLaunchRequest_lookupWithLtiEmailAddress() {\n+        String username = \"username\";\n+        String email = launchRequest.getLis_person_contact_email_primary();\n+        launchRequest.setCustom_lookup_user_by_email(true);\n+        when(ltiUserIdRepository.findByLtiUserId(launchRequest.getUser_id())).thenReturn(Optional.empty());\n+        when(artemisAuthenticationProvider.getUsernameForEmail(email)).thenReturn(Optional.of(username));\n+        when(artemisAuthenticationProvider.getOrCreateUser(new UsernamePasswordAuthenticationToken(username, \"\"), \"\", launchRequest.getLis_person_sourcedid(), email, true))\n+                .thenReturn(user);\n+\n+        onSuccessfulAuthenticationSetup(user, ltiUserId);\n+\n+        ltiService.handleLaunchRequest(launchRequest, exercise);\n+\n+        onSuccessfulAuthenticationAssertions(user, ltiUserId);\n+    }\n+\n+    @Test\n+    public void handleLaunchRequest_newUserIsNotRequired() {\n+        String username = launchRequest.getLis_person_sourcedid();\n+        Set<String> groups = new HashSet<>();\n+        groups.add(\"\");\n+        user.setActivated(false);\n+        when(ltiUserIdRepository.findByLtiUserId(launchRequest.getUser_id())).thenReturn(Optional.empty());\n+        when(userRepository.findOneByLogin(username)).thenReturn(Optional.empty());\n+        when(userService.createUser(username, groups, \"\", launchRequest.getLis_person_sourcedid(), launchRequest.getLis_person_contact_email_primary(), null, null, \"en\"))\n+                .thenReturn(user);\n+\n+        onSuccessfulAuthenticationSetup(user, ltiUserId);\n+\n+        ltiService.handleLaunchRequest(launchRequest, exercise);\n+\n+        onSuccessfulAuthenticationAssertions(user, ltiUserId);\n+        verify(userService).activateUser(user);\n+\n+        SecurityContextHolder.clearContext();\n+        launchRequest.setContext_label(\"randomLabel\");\n+\n+        InternalAuthenticationServiceException exception = assertThrows(InternalAuthenticationServiceException.class, () -> {\n+            ltiService.handleLaunchRequest(launchRequest, exercise);\n+        });\n+\n+        String expectedMessage = \"User group not activated or unknown context_label sent in LTI Launch Request: \" + launchRequest.toString();\n+        assertThat(exception.getMessage().equals(expectedMessage));\n+    }\n+\n+    @Test\n+    public void handleLaunchRequest_noAuthenticationWasSuccessful() {\n+        launchRequest.setCustom_require_existing_user(true);\n+        when(ltiUserIdRepository.findByLtiUserId(launchRequest.getUser_id())).thenReturn(Optional.empty());\n+        when(response.containsHeader(\"Set-Cookie\")).thenReturn(true);\n+        List<String> headers = new ArrayList<>();\n+        headers.add(\"JSESSIONID=(123);\");\n+        when(response.getHeaders(\"Set-Cookie\")).thenReturn(headers);\n+        when(response.getHeader(\"Set-Cookie\")).thenReturn(headers.get(0));\n+        String sessionId = \"(123)\";\n+\n+        ltiService.handleLaunchRequest(launchRequest, exercise);\n+\n+        assertThat(ltiService.launchRequestForSession.containsKey(sessionId));\n+        assertThat(ltiService.launchRequestForSession.containsValue(Pair.of(launchRequest, exercise)));\n+        assertThat(ltiService.launchRequestForSession.get(sessionId).equals(Pair.of(launchRequest, exercise)));\n+    }\n+\n+    @Test\n+    public void onSuccessfulLtiAuthentication() {\n+        ltiUserId.setLtiUserId(\"oldStudentId\");\n+        onSuccessfulAuthenticationSetup(user, ltiUserId);\n+\n+        ltiService.onSuccessfulLtiAuthentication(launchRequest, exercise);\n+\n+        onSuccessfulAuthenticationAssertions(user, ltiUserId);\n+    }\n+\n+    private void onSuccessfulAuthenticationSetup(User user, LtiUserId ltiUserId) {\n+        when(userService.getUserWithGroupsAndAuthorities()).thenReturn(user);\n+        when(ltiUserIdRepository.findByUser(user)).thenReturn(Optional.of(ltiUserId));\n+        when(ltiOutcomeUrlRepository.findByUserAndExercise(user, exercise)).thenReturn(Optional.of(ltiOutcomeUrl));\n+    }\n+\n+    private void onSuccessfulAuthenticationAssertions(User user, LtiUserId ltiUserId) {\n+        assertThat(user.getGroups().contains(courseStudentGroupName));\n+        assertThat(ltiUserId.getLtiUserId().equals(\"ff30145d6884eeb2c1cef50298939383\"));", "originalCommit": "b8e26ee654ed161ff282e1141597a03a43ef8af7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjIwODU2MQ==", "url": "https://github.com/ls1intum/Artemis/pull/2540#discussion_r542208561", "body": "this line is used more than once.  \r\nTry to setup the mocking in the init() function or another setup() function.", "bodyText": "this line is used more than once.\nTry to setup the mocking in the init() function or another setup() function.", "bodyHTML": "<p dir=\"auto\">this line is used more than once.<br>\nTry to setup the mocking in the init() function or another setup() function.</p>", "author": "derLalla", "createdAt": "2020-12-14T08:50:45Z", "path": "src/test/java/de/tum/in/www1/artemis/service/connectors/LtiServiceTest.java", "diffHunk": "@@ -0,0 +1,286 @@\n+package de.tum.in.www1.artemis.service.connectors;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.mockito.Mockito.*;\n+\n+import java.util.*;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mock;\n+import org.mockito.MockitoAnnotations;\n+import org.springframework.security.authentication.InternalAuthenticationServiceException;\n+import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\n+import org.springframework.security.core.context.SecurityContextHolder;\n+import org.springframework.test.util.ReflectionTestUtils;\n+\n+import de.tum.in.www1.artemis.authentication.AuthenticationIntegrationTestHelper;\n+import de.tum.in.www1.artemis.domain.*;\n+import de.tum.in.www1.artemis.domain.participation.StudentParticipation;\n+import de.tum.in.www1.artemis.repository.LtiOutcomeUrlRepository;\n+import de.tum.in.www1.artemis.repository.LtiUserIdRepository;\n+import de.tum.in.www1.artemis.repository.ResultRepository;\n+import de.tum.in.www1.artemis.repository.UserRepository;\n+import de.tum.in.www1.artemis.security.ArtemisAuthenticationProvider;\n+import de.tum.in.www1.artemis.service.UserService;\n+import de.tum.in.www1.artemis.web.rest.dto.LtiLaunchRequestDTO;\n+\n+public class LtiServiceTest {\n+\n+    @Mock\n+    private UserService userService;\n+\n+    @Mock\n+    private UserRepository userRepository;\n+\n+    @Mock\n+    private LtiOutcomeUrlRepository ltiOutcomeUrlRepository;\n+\n+    @Mock\n+    private ResultRepository resultRepository;\n+\n+    @Mock\n+    private ArtemisAuthenticationProvider artemisAuthenticationProvider;\n+\n+    @Mock\n+    private LtiUserIdRepository ltiUserIdRepository;\n+\n+    @Mock\n+    private HttpServletResponse response;\n+\n+    private Exercise exercise;\n+\n+    private LtiService ltiService;\n+\n+    private LtiLaunchRequestDTO launchRequest;\n+\n+    private User user;\n+\n+    private LtiUserId ltiUserId;\n+\n+    private Course course;\n+\n+    private String courseStudentGroupName = \"courseStudentGroupName\";\n+\n+    private LtiOutcomeUrl ltiOutcomeUrl;\n+\n+    @BeforeEach\n+    public void init() {\n+        MockitoAnnotations.openMocks(this);\n+        SecurityContextHolder.clearContext();\n+        ltiService = new LtiService(userService, userRepository, ltiOutcomeUrlRepository, resultRepository, artemisAuthenticationProvider, ltiUserIdRepository, response);\n+        course = new Course();\n+        course.setStudentGroupName(courseStudentGroupName);\n+        exercise = new TextExercise();\n+        exercise.setCourse(course);\n+        launchRequest = AuthenticationIntegrationTestHelper.setupDefaultLtiLaunchRequest();\n+        user = new User();\n+        user.setLogin(\"login\");\n+        user.setPassword(\"password\");\n+        user.setGroups(new HashSet<>());\n+        ltiUserId = new LtiUserId();\n+        ltiUserId.setUser(user);\n+        ltiOutcomeUrl = new LtiOutcomeUrl();\n+\n+        ReflectionTestUtils.setField(ltiService, \"USER_GROUP_NAME_EDX\", Optional.of(\"\"));\n+        ReflectionTestUtils.setField(ltiService, \"USER_GROUP_NAME_U4I\", Optional.of(\"\"));\n+        ReflectionTestUtils.setField(ltiService, \"USER_PREFIX_EDX\", Optional.of(\"\"));\n+        ReflectionTestUtils.setField(ltiService, \"USER_PREFIX_U4I\", Optional.of(\"\"));\n+    }\n+\n+    @Test\n+    public void handleLaunchRequest_LTILaunchFromEdx() {\n+        launchRequest.setUser_id(\"student\");\n+\n+        InternalAuthenticationServiceException exception = assertThrows(InternalAuthenticationServiceException.class, () -> {\n+            ltiService.handleLaunchRequest(launchRequest, exercise);\n+        });\n+\n+        String expectedMessage = \"Invalid username sent by launch request. Please do not launch the exercise from edX studio. Use 'Preview' instead.\";\n+        assertThat(exception.getMessage().equals(expectedMessage));\n+    }\n+\n+    @Test\n+    public void handleLaunchRequest_InvalidContextLabel() {\n+        launchRequest.setContext_label(\"randomLabel\");\n+\n+        InternalAuthenticationServiceException exception = assertThrows(InternalAuthenticationServiceException.class, () -> {\n+            ltiService.handleLaunchRequest(launchRequest, exercise);\n+        });\n+\n+        String expectedMessage = \"Unknown context_label sent in LTI Launch Request: \" + launchRequest.toString();\n+        assertThat(exception.getMessage().equals(expectedMessage));\n+    }\n+\n+    @Test\n+    public void handleLaunchRequest_existingMappingForLtiUserId() {\n+        when(ltiUserIdRepository.findByLtiUserId(launchRequest.getUser_id())).thenReturn(Optional.of(ltiUserId));\n+        when(userService.getUserWithGroupsAndAuthorities()).thenReturn(user);\n+\n+        onSuccessfulAuthenticationSetup(user, ltiUserId);\n+\n+        ltiService.handleLaunchRequest(launchRequest, exercise);\n+\n+        onSuccessfulAuthenticationAssertions(user, ltiUserId);\n+    }\n+\n+    @Test\n+    public void handleLaunchRequest_lookupWithLtiEmailAddress() {\n+        String username = \"username\";\n+        String email = launchRequest.getLis_person_contact_email_primary();\n+        launchRequest.setCustom_lookup_user_by_email(true);\n+        when(ltiUserIdRepository.findByLtiUserId(launchRequest.getUser_id())).thenReturn(Optional.empty());\n+        when(artemisAuthenticationProvider.getUsernameForEmail(email)).thenReturn(Optional.of(username));\n+        when(artemisAuthenticationProvider.getOrCreateUser(new UsernamePasswordAuthenticationToken(username, \"\"), \"\", launchRequest.getLis_person_sourcedid(), email, true))\n+                .thenReturn(user);\n+\n+        onSuccessfulAuthenticationSetup(user, ltiUserId);\n+\n+        ltiService.handleLaunchRequest(launchRequest, exercise);\n+\n+        onSuccessfulAuthenticationAssertions(user, ltiUserId);\n+    }\n+\n+    @Test\n+    public void handleLaunchRequest_newUserIsNotRequired() {\n+        String username = launchRequest.getLis_person_sourcedid();\n+        Set<String> groups = new HashSet<>();\n+        groups.add(\"\");\n+        user.setActivated(false);\n+        when(ltiUserIdRepository.findByLtiUserId(launchRequest.getUser_id())).thenReturn(Optional.empty());\n+        when(userRepository.findOneByLogin(username)).thenReturn(Optional.empty());\n+        when(userService.createUser(username, groups, \"\", launchRequest.getLis_person_sourcedid(), launchRequest.getLis_person_contact_email_primary(), null, null, \"en\"))\n+                .thenReturn(user);\n+\n+        onSuccessfulAuthenticationSetup(user, ltiUserId);\n+\n+        ltiService.handleLaunchRequest(launchRequest, exercise);\n+\n+        onSuccessfulAuthenticationAssertions(user, ltiUserId);\n+        verify(userService).activateUser(user);\n+\n+        SecurityContextHolder.clearContext();\n+        launchRequest.setContext_label(\"randomLabel\");\n+\n+        InternalAuthenticationServiceException exception = assertThrows(InternalAuthenticationServiceException.class, () -> {\n+            ltiService.handleLaunchRequest(launchRequest, exercise);\n+        });\n+\n+        String expectedMessage = \"User group not activated or unknown context_label sent in LTI Launch Request: \" + launchRequest.toString();\n+        assertThat(exception.getMessage().equals(expectedMessage));\n+    }\n+\n+    @Test\n+    public void handleLaunchRequest_noAuthenticationWasSuccessful() {\n+        launchRequest.setCustom_require_existing_user(true);\n+        when(ltiUserIdRepository.findByLtiUserId(launchRequest.getUser_id())).thenReturn(Optional.empty());\n+        when(response.containsHeader(\"Set-Cookie\")).thenReturn(true);\n+        List<String> headers = new ArrayList<>();\n+        headers.add(\"JSESSIONID=(123);\");\n+        when(response.getHeaders(\"Set-Cookie\")).thenReturn(headers);\n+        when(response.getHeader(\"Set-Cookie\")).thenReturn(headers.get(0));\n+        String sessionId = \"(123)\";\n+\n+        ltiService.handleLaunchRequest(launchRequest, exercise);\n+\n+        assertThat(ltiService.launchRequestForSession.containsKey(sessionId));\n+        assertThat(ltiService.launchRequestForSession.containsValue(Pair.of(launchRequest, exercise)));\n+        assertThat(ltiService.launchRequestForSession.get(sessionId).equals(Pair.of(launchRequest, exercise)));\n+    }\n+\n+    @Test\n+    public void onSuccessfulLtiAuthentication() {\n+        ltiUserId.setLtiUserId(\"oldStudentId\");\n+        onSuccessfulAuthenticationSetup(user, ltiUserId);\n+\n+        ltiService.onSuccessfulLtiAuthentication(launchRequest, exercise);\n+\n+        onSuccessfulAuthenticationAssertions(user, ltiUserId);\n+    }\n+\n+    private void onSuccessfulAuthenticationSetup(User user, LtiUserId ltiUserId) {\n+        when(userService.getUserWithGroupsAndAuthorities()).thenReturn(user);\n+        when(ltiUserIdRepository.findByUser(user)).thenReturn(Optional.of(ltiUserId));\n+        when(ltiOutcomeUrlRepository.findByUserAndExercise(user, exercise)).thenReturn(Optional.of(ltiOutcomeUrl));\n+    }\n+\n+    private void onSuccessfulAuthenticationAssertions(User user, LtiUserId ltiUserId) {\n+        assertThat(user.getGroups().contains(courseStudentGroupName));\n+        assertThat(ltiUserId.getLtiUserId().equals(\"ff30145d6884eeb2c1cef50298939383\"));\n+        assertThat(ltiOutcomeUrl.getUrl().equals(\"some.outcome.service.url.com\"));\n+        assertThat(ltiOutcomeUrl.getSourcedId().equals(\"someResultSourceId\"));\n+        verify(userService, times(1)).save(user);\n+        verify(artemisAuthenticationProvider, times(1)).addUserToGroup(user, courseStudentGroupName);\n+        verify(ltiOutcomeUrlRepository, times(1)).save(ltiOutcomeUrl);\n+    }\n+\n+    @Test\n+    public void verifyRequest_oauthSecretNotSpecified() {\n+        ReflectionTestUtils.setField(ltiService, \"OAUTH_SECRET\", Optional.empty());\n+        HttpServletRequest request = mock(HttpServletRequest.class);\n+\n+        String message = ltiService.verifyRequest(request);\n+\n+        assertThat(message.equals(\"verifyRequest for LTI is not supported on this Artemis instance, artemis.lti.oauth-secret was not specified in the yml configuration\"));\n+    }\n+\n+    @Test\n+    public void verifyRequest_unsuccessfulVerification() {\n+        ReflectionTestUtils.setField(ltiService, \"OAUTH_SECRET\", Optional.of(\"secret\"));\n+        String url = \"http://some.url.com\";\n+        HttpServletRequest request = mock(HttpServletRequest.class);\n+        when(request.getHeader(anyString())).thenReturn(null);\n+        when(request.getRequestURL()).thenReturn(new StringBuffer(url));\n+        when(request.getMethod()).thenReturn(\"GET\");\n+        when(request.getHeaderNames()).thenReturn(Collections.emptyEnumeration());\n+        when(request.getParameterNames()).thenReturn(Collections.emptyEnumeration());\n+\n+        String message = ltiService.verifyRequest(request);\n+\n+        assertThat(message.equals(\"LTI signature verification failed with message: Failed to validate: parameter_absent; error: bad_request, launch result: null\"));\n+    }\n+\n+    @Test\n+    public void onNewResult() {\n+        ReflectionTestUtils.setField(ltiService, \"OAUTH_KEY\", Optional.of(\"oauthKey\"));\n+        ReflectionTestUtils.setField(ltiService, \"OAUTH_SECRET\", Optional.of(\"oauthSecret\"));\n+\n+        StudentParticipation participation = new StudentParticipation();\n+        User user = new User();\n+        participation.setParticipant(user);\n+        participation.setExercise(exercise);\n+        participation.setId(27L);\n+        Result result = new Result();\n+        result.setScore(3L);\n+        LtiOutcomeUrl ltiOutcomeUrl = new LtiOutcomeUrl();\n+        ltiOutcomeUrl.setUrl(\"https://some.url.com/\");\n+        ltiOutcomeUrl.setSourcedId(\"sourceId\");\n+        ltiOutcomeUrl.setExercise(exercise);\n+        ltiOutcomeUrl.setUser(user);\n+\n+        when(ltiOutcomeUrlRepository.findByUserAndExercise(user, exercise)).thenReturn(Optional.of(ltiOutcomeUrl));", "originalCommit": "b8e26ee654ed161ff282e1141597a03a43ef8af7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "0c25cbbeb31a9dbf17d84b23088fe38f083ea9b8", "url": "https://github.com/ls1intum/Artemis/commit/0c25cbbeb31a9dbf17d84b23088fe38f083ea9b8", "message": "Remove duplicate code and refactor equals() invocations (#2079)", "committedDate": "2020-12-14T20:44:36Z", "type": "commit"}, {"oid": "4033dab5a0e355479149d7f2c87e42039e872de3", "url": "https://github.com/ls1intum/Artemis/commit/4033dab5a0e355479149d7f2c87e42039e872de3", "message": "Merge branch 'develop' into enhancement/test-ltiservice", "committedDate": "2020-12-14T20:48:32Z", "type": "commit"}]}