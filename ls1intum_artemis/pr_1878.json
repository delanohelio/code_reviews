{"pr_number": 1878, "pr_title": "add achievement storage", "pr_author": "balazs-czopf", "pr_createdAt": "2020-07-14T07:31:31Z", "pr_url": "https://github.com/ls1intum/Artemis/pull/1878", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQzMDI5NA==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r481430294", "body": "Don't you need to add a user relationship somewhere, when you give out achievements?", "bodyText": "Don't you need to add a user relationship somewhere, when you give out achievements?", "bodyHTML": "<p dir=\"auto\">Don't you need to add a user relationship somewhere, when you give out achievements?</p>", "author": "kloessst", "createdAt": "2020-09-01T21:04:14Z", "path": "src/main/java/de/tum/in/www1/artemis/service/AchievementService.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import org.springframework.stereotype.Service;\n+\n+import de.tum.in.www1.artemis.domain.Achievement;\n+import de.tum.in.www1.artemis.domain.Course;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.domain.enumeration.AchievementRank;\n+import de.tum.in.www1.artemis.repository.AchievementRepository;\n+import de.tum.in.www1.artemis.repository.UserRepository;\n+\n+@Service\n+public class AchievementService {\n+\n+    private final AchievementRepository achievementRepository;\n+\n+    private final UserRepository userRepository;\n+\n+    public AchievementService(AchievementRepository achievementRepository, UserRepository userRepository) {\n+        this.achievementRepository = achievementRepository;\n+        this.userRepository = userRepository;\n+    }\n+\n+    public Optional<Achievement> findById(Long achievementId) {\n+        return achievementRepository.findById(achievementId);\n+    }\n+\n+    public List<Achievement> findAll() {\n+        return achievementRepository.findAll();\n+    }\n+\n+    public Set<Achievement> findAllByCourseId(Long courseId) {\n+        return achievementRepository.findAllByCourseId(courseId);\n+    }\n+\n+    public Set<Achievement> findAllByExerciseId(Long exerciseId) {\n+        return achievementRepository.findAllByExerciseId(exerciseId);\n+    }\n+\n+    public Set<Achievement> findAllByUserId(Long userId) {\n+        return achievementRepository.findAllByUserId(userId);\n+    }\n+\n+    public Achievement save(Achievement achievement) {\n+        return achievementRepository.save(achievement);\n+    }\n+\n+    /**\n+     * Creates an achievement and persist it\n+     */\n+    public Achievement create(String title, String description, String icon, AchievementRank rank, Course course) {", "originalCommit": "efe97b904e2506356b25a51a137cc654e2ffb140", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQzMTczOQ==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r481431739", "bodyText": "no, not on creation itself, only on assignment of the achievement later", "author": "balazs-czopf", "createdAt": "2020-09-01T21:07:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQzMDI5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQzMjM2OQ==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r481432369", "bodyText": "Good catch @kloessst\nIf I remember the data model correctly, it should also have a connection to an exercise.", "author": "fde312", "createdAt": "2020-09-01T21:08:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQzMDI5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQzNjgyNg==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r481436826", "bodyText": "I think this is ok. You can create the achievement first and then add the relationship.", "author": "kloessst", "createdAt": "2020-09-01T21:17:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQzMDI5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ0MTQ3Mg==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r481441472", "bodyText": "I guess you can add the connection to an exercise later, but it could also be possible right here.", "author": "balazs-czopf", "createdAt": "2020-09-01T21:26:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQzMDI5NA=="}], "type": "inlineReview", "revised_code": {"commit": "6aa68b0ab7a071fa631c7c72cdb8ea02ccf15a39", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\nindex 6259ce2bbaf..d89d918c0e2 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n", "chunk": "@@ -51,6 +51,11 @@ public class AchievementService {\n \n     /**\n      * Creates an achievement and persist it\n+     * @param title title of the achievement\n+     * @param description description of the achievement\n+     * @param icon the font awesome icon string identifier\n+     * @param rank rank of the achievement\n+     * @param course course which the achievement belongs to\n      */\n     public Achievement create(String title, String description, String icon, AchievementRank rank, Course course) {\n         Achievement achievement = new Achievement();\n", "next_change": {"commit": "d6f4c8861d530ee606cd33ce9bea33c51e4f2728", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\nindex d89d918c0e2..652012db670 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n", "chunk": "@@ -56,14 +57,16 @@ public class AchievementService {\n      * @param icon the font awesome icon string identifier\n      * @param rank rank of the achievement\n      * @param course course which the achievement belongs to\n+     * @param exercise which the achievement belongs to\n      */\n-    public Achievement create(String title, String description, String icon, AchievementRank rank, Course course) {\n+    public Achievement create(String title, String description, String icon, AchievementRank rank, Course course, Exercise exercise) {\n         Achievement achievement = new Achievement();\n         achievement.setTitle(title);\n         achievement.setDescription(description);\n         achievement.setIcon(icon);\n         achievement.setRank(rank);\n         achievement.setCourse(course);\n+        achievement.setExercise(exercise);\n         return achievementRepository.save(achievement);\n     }\n \n", "next_change": {"commit": "95622742bd3fa7623d0ad8df6089acef534ee60f", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\nindex 652012db670..140afa73bd9 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n", "chunk": "@@ -58,16 +75,18 @@ public class AchievementService {\n      * @param rank rank of the achievement\n      * @param course course which the achievement belongs to\n      * @param exercise which the achievement belongs to\n+     * @return the created and persisted achievement\n      */\n-    public Achievement create(String title, String description, String icon, AchievementRank rank, Course course, Exercise exercise) {\n+    public Achievement create(String title, String description, String icon, AchievementRank rank, AchievementType type, Course course, Exercise exercise) {\n         Achievement achievement = new Achievement();\n         achievement.setTitle(title);\n         achievement.setDescription(description);\n         achievement.setIcon(icon);\n         achievement.setRank(rank);\n+        achievement.setType(type);\n         achievement.setCourse(course);\n         achievement.setExercise(exercise);\n-        return achievementRepository.save(achievement);\n+        return save(achievement);\n     }\n \n     /**\n", "next_change": {"commit": "c0a4b8df894787c7f22b172ecf3a3a9ce1ff398d", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\nindex 140afa73bd9..07259f551f0 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n", "chunk": "@@ -59,36 +62,10 @@ public class AchievementService {\n         return achievementRepository.findAllByUserId(userId);\n     }\n \n-    public Achievement save(Achievement achievement) {\n-        return achievementRepository.save(achievement);\n-    }\n-\n     public void deleteAchievementsForCourse(Course course) {\n         achievementRepository.deleteByCourse_Id(course.getId());\n     }\n \n-    /**\n-     * Creates an achievement and persist it\n-     * @param title title of the achievement\n-     * @param description description of the achievement\n-     * @param icon the font awesome icon string identifier\n-     * @param rank rank of the achievement\n-     * @param course course which the achievement belongs to\n-     * @param exercise which the achievement belongs to\n-     * @return the created and persisted achievement\n-     */\n-    public Achievement create(String title, String description, String icon, AchievementRank rank, AchievementType type, Course course, Exercise exercise) {\n-        Achievement achievement = new Achievement();\n-        achievement.setTitle(title);\n-        achievement.setDescription(description);\n-        achievement.setIcon(icon);\n-        achievement.setRank(rank);\n-        achievement.setType(type);\n-        achievement.setCourse(course);\n-        achievement.setExercise(exercise);\n-        return save(achievement);\n-    }\n-\n     /**\n      * Deletes an achievement by also removing it from all users\n      * @param achievement achievement to be deleted\n", "next_change": {"commit": "0e82242b97cdbc112e1d3a883cb2281d462dd405", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\nindex 07259f551f0..eff8b25290f 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n", "chunk": "@@ -62,8 +46,29 @@ public class AchievementService {\n         return achievementRepository.findAllByUserId(userId);\n     }\n \n-    public void deleteAchievementsForCourse(Course course) {\n-        achievementRepository.deleteByCourse_Id(course.getId());\n+    public Achievement save(Achievement achievement) {\n+        return achievementRepository.save(achievement);\n+    }\n+\n+    /**\n+     * Creates an achievement and persist it\n+     * @param title title of the achievement\n+     * @param description description of the achievement\n+     * @param icon the font awesome icon string identifier\n+     * @param rank rank of the achievement\n+     * @param course course which the achievement belongs to\n+     * @param exercise which the achievement belongs to\n+     * @return the created and persisted achievement\n+     */\n+    public Achievement create(String title, String description, String icon, AchievementRank rank, Course course, Exercise exercise) {\n+        Achievement achievement = new Achievement();\n+        achievement.setTitle(title);\n+        achievement.setDescription(description);\n+        achievement.setIcon(icon);\n+        achievement.setRank(rank);\n+        achievement.setCourse(course);\n+        achievement.setExercise(exercise);\n+        return achievementRepository.save(achievement);\n     }\n \n     /**\n", "next_change": {"commit": "c7425c9af8e7e15cd22a3771029b103c6d79608f", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\nindex eff8b25290f..07259f551f0 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n", "chunk": "@@ -46,29 +62,8 @@ public class AchievementService {\n         return achievementRepository.findAllByUserId(userId);\n     }\n \n-    public Achievement save(Achievement achievement) {\n-        return achievementRepository.save(achievement);\n-    }\n-\n-    /**\n-     * Creates an achievement and persist it\n-     * @param title title of the achievement\n-     * @param description description of the achievement\n-     * @param icon the font awesome icon string identifier\n-     * @param rank rank of the achievement\n-     * @param course course which the achievement belongs to\n-     * @param exercise which the achievement belongs to\n-     * @return the created and persisted achievement\n-     */\n-    public Achievement create(String title, String description, String icon, AchievementRank rank, Course course, Exercise exercise) {\n-        Achievement achievement = new Achievement();\n-        achievement.setTitle(title);\n-        achievement.setDescription(description);\n-        achievement.setIcon(icon);\n-        achievement.setRank(rank);\n-        achievement.setCourse(course);\n-        achievement.setExercise(exercise);\n-        return achievementRepository.save(achievement);\n+    public void deleteAchievementsForCourse(Course course) {\n+        achievementRepository.deleteByCourse_Id(course.getId());\n     }\n \n     /**\n", "next_change": {"commit": "28ed83395042c9e9faddf43940bd9f3c221684b3", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\nindex 07259f551f0..eff8b25290f 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n", "chunk": "@@ -62,8 +46,29 @@ public class AchievementService {\n         return achievementRepository.findAllByUserId(userId);\n     }\n \n-    public void deleteAchievementsForCourse(Course course) {\n-        achievementRepository.deleteByCourse_Id(course.getId());\n+    public Achievement save(Achievement achievement) {\n+        return achievementRepository.save(achievement);\n+    }\n+\n+    /**\n+     * Creates an achievement and persist it\n+     * @param title title of the achievement\n+     * @param description description of the achievement\n+     * @param icon the font awesome icon string identifier\n+     * @param rank rank of the achievement\n+     * @param course course which the achievement belongs to\n+     * @param exercise which the achievement belongs to\n+     * @return the created and persisted achievement\n+     */\n+    public Achievement create(String title, String description, String icon, AchievementRank rank, Course course, Exercise exercise) {\n+        Achievement achievement = new Achievement();\n+        achievement.setTitle(title);\n+        achievement.setDescription(description);\n+        achievement.setIcon(icon);\n+        achievement.setRank(rank);\n+        achievement.setCourse(course);\n+        achievement.setExercise(exercise);\n+        return achievementRepository.save(achievement);\n     }\n \n     /**\n", "next_change": {"commit": "c3317e06a092c8dbee21b52de380addd92f73b3f", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\nindex eff8b25290f..9f934956a2c 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n", "chunk": "@@ -46,29 +62,8 @@ public class AchievementService {\n         return achievementRepository.findAllByUserId(userId);\n     }\n \n-    public Achievement save(Achievement achievement) {\n-        return achievementRepository.save(achievement);\n-    }\n-\n-    /**\n-     * Creates an achievement and persist it\n-     * @param title title of the achievement\n-     * @param description description of the achievement\n-     * @param icon the font awesome icon string identifier\n-     * @param rank rank of the achievement\n-     * @param course course which the achievement belongs to\n-     * @param exercise which the achievement belongs to\n-     * @return the created and persisted achievement\n-     */\n-    public Achievement create(String title, String description, String icon, AchievementRank rank, Course course, Exercise exercise) {\n-        Achievement achievement = new Achievement();\n-        achievement.setTitle(title);\n-        achievement.setDescription(description);\n-        achievement.setIcon(icon);\n-        achievement.setRank(rank);\n-        achievement.setCourse(course);\n-        achievement.setExercise(exercise);\n-        return achievementRepository.save(achievement);\n+    public void deleteAchievementsForCourse(Course course) {\n+        achievementRepository.deleteByCourse_Id(course.getId());\n     }\n \n     /**\n", "next_change": {"commit": "508e8977abe4d1e8ec1c8a817fe9bd0f91f6bb8a", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\nindex 9f934956a2c..eff8b25290f 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n", "chunk": "@@ -62,8 +46,29 @@ public class AchievementService {\n         return achievementRepository.findAllByUserId(userId);\n     }\n \n-    public void deleteAchievementsForCourse(Course course) {\n-        achievementRepository.deleteByCourse_Id(course.getId());\n+    public Achievement save(Achievement achievement) {\n+        return achievementRepository.save(achievement);\n+    }\n+\n+    /**\n+     * Creates an achievement and persist it\n+     * @param title title of the achievement\n+     * @param description description of the achievement\n+     * @param icon the font awesome icon string identifier\n+     * @param rank rank of the achievement\n+     * @param course course which the achievement belongs to\n+     * @param exercise which the achievement belongs to\n+     * @return the created and persisted achievement\n+     */\n+    public Achievement create(String title, String description, String icon, AchievementRank rank, Course course, Exercise exercise) {\n+        Achievement achievement = new Achievement();\n+        achievement.setTitle(title);\n+        achievement.setDescription(description);\n+        achievement.setIcon(icon);\n+        achievement.setRank(rank);\n+        achievement.setCourse(course);\n+        achievement.setExercise(exercise);\n+        return achievementRepository.save(achievement);\n     }\n \n     /**\n", "next_change": {"commit": "d3d2ea3ec69fdc3185bac66822f03c4a1bf0b6b1", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\nindex eff8b25290f..9f934956a2c 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n", "chunk": "@@ -46,29 +62,8 @@ public class AchievementService {\n         return achievementRepository.findAllByUserId(userId);\n     }\n \n-    public Achievement save(Achievement achievement) {\n-        return achievementRepository.save(achievement);\n-    }\n-\n-    /**\n-     * Creates an achievement and persist it\n-     * @param title title of the achievement\n-     * @param description description of the achievement\n-     * @param icon the font awesome icon string identifier\n-     * @param rank rank of the achievement\n-     * @param course course which the achievement belongs to\n-     * @param exercise which the achievement belongs to\n-     * @return the created and persisted achievement\n-     */\n-    public Achievement create(String title, String description, String icon, AchievementRank rank, Course course, Exercise exercise) {\n-        Achievement achievement = new Achievement();\n-        achievement.setTitle(title);\n-        achievement.setDescription(description);\n-        achievement.setIcon(icon);\n-        achievement.setRank(rank);\n-        achievement.setCourse(course);\n-        achievement.setExercise(exercise);\n-        return achievementRepository.save(achievement);\n+    public void deleteAchievementsForCourse(Course course) {\n+        achievementRepository.deleteByCourse_Id(course.getId());\n     }\n \n     /**\n", "next_change": {"commit": "87e1b7686ddcdf36dbefc8407242e70d200a329d", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\nindex 9f934956a2c..40dd00fd6b3 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n", "chunk": "@@ -62,6 +63,7 @@ public class AchievementService {\n         return achievementRepository.findAllByUserId(userId);\n     }\n \n+    @Transactional\n     public void deleteAchievementsForCourse(Course course) {\n         achievementRepository.deleteByCourse_Id(course.getId());\n     }\n", "next_change": {"commit": "64778c859b7f2d14015c50aedae62db4c98bcee7", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\nindex 40dd00fd6b3..eff8b25290f 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n", "chunk": "@@ -63,9 +46,29 @@ public class AchievementService {\n         return achievementRepository.findAllByUserId(userId);\n     }\n \n-    @Transactional\n-    public void deleteAchievementsForCourse(Course course) {\n-        achievementRepository.deleteByCourse_Id(course.getId());\n+    public Achievement save(Achievement achievement) {\n+        return achievementRepository.save(achievement);\n+    }\n+\n+    /**\n+     * Creates an achievement and persist it\n+     * @param title title of the achievement\n+     * @param description description of the achievement\n+     * @param icon the font awesome icon string identifier\n+     * @param rank rank of the achievement\n+     * @param course course which the achievement belongs to\n+     * @param exercise which the achievement belongs to\n+     * @return the created and persisted achievement\n+     */\n+    public Achievement create(String title, String description, String icon, AchievementRank rank, Course course, Exercise exercise) {\n+        Achievement achievement = new Achievement();\n+        achievement.setTitle(title);\n+        achievement.setDescription(description);\n+        achievement.setIcon(icon);\n+        achievement.setRank(rank);\n+        achievement.setCourse(course);\n+        achievement.setExercise(exercise);\n+        return achievementRepository.save(achievement);\n     }\n \n     /**\n", "next_change": {"commit": "8d5bfc049d9e75323290b069e7343df6fc579ee7", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\nindex eff8b25290f..6668ed36f44 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n", "chunk": "@@ -1,87 +1,161 @@\n package de.tum.in.www1.artemis.service;\n \n-import java.util.List;\n-import java.util.Optional;\n import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import javax.transaction.Transactional;\n \n import org.springframework.stereotype.Service;\n \n+import de.tum.in.www1.artemis.domain.*;\n import de.tum.in.www1.artemis.domain.Achievement;\n import de.tum.in.www1.artemis.domain.Course;\n import de.tum.in.www1.artemis.domain.Exercise;\n import de.tum.in.www1.artemis.domain.User;\n import de.tum.in.www1.artemis.domain.enumeration.AchievementRank;\n+import de.tum.in.www1.artemis.domain.enumeration.AchievementType;\n import de.tum.in.www1.artemis.repository.AchievementRepository;\n import de.tum.in.www1.artemis.repository.UserRepository;\n \n @Service\n public class AchievementService {\n \n+    private final PointBasedAchievementService pointBasedAchievementService;\n+\n+    private final TimeBasedAchievementService timeBasedAchievementService;\n+\n+    private final ProgressBasedAchievementService progressBasedAchievementService;\n+\n+    private final ParticipationService participationService;\n+\n     private final AchievementRepository achievementRepository;\n \n     private final UserRepository userRepository;\n \n-    public AchievementService(AchievementRepository achievementRepository, UserRepository userRepository) {\n+    public AchievementService(AchievementRepository achievementRepository, UserRepository userRepository, PointBasedAchievementService pointBasedAchievementService,\n+            TimeBasedAchievementService timeBasedAchievementService, ProgressBasedAchievementService progressBasedAchievementService, ParticipationService participationService) {\n         this.achievementRepository = achievementRepository;\n+        this.pointBasedAchievementService = pointBasedAchievementService;\n+        this.timeBasedAchievementService = timeBasedAchievementService;\n+        this.progressBasedAchievementService = progressBasedAchievementService;\n         this.userRepository = userRepository;\n+        this.participationService = participationService;\n     }\n \n-    public Optional<Achievement> findById(Long achievementId) {\n-        return achievementRepository.findById(achievementId);\n+    public Set<Achievement> findAllByUserIdAndCourseId(Long userId, Long courseId) {\n+        return achievementRepository.findAllByUserIdAndCourseId(userId, courseId);\n     }\n \n-    public List<Achievement> findAll() {\n-        return achievementRepository.findAll();\n+    @Transactional\n+    public void deleteByCourseId(Long courseId) {\n+        Set<Achievement> achievements = achievementRepository.findAllByCourseId(courseId);\n+        for (Achievement achievement : achievements) {\n+            removeFromUsers(achievement);\n+        }\n+        achievementRepository.deleteAll(achievements);\n     }\n \n-    public Set<Achievement> findAllByCourseId(Long courseId) {\n-        return achievementRepository.findAllByCourseId(courseId);\n+    @Transactional\n+    public void deleteByExerciseId(Long exerciseId) {\n+        Set<Achievement> achievements = achievementRepository.findAllByExerciseId(exerciseId);\n+        for (Achievement achievement : achievements) {\n+            removeFromUsers(achievement);\n+        }\n+        achievementRepository.deleteAll(achievements);\n     }\n \n-    public Set<Achievement> findAllByExerciseId(Long exerciseId) {\n-        return achievementRepository.findAllByExerciseId(exerciseId);\n+    /**\n+     * Removes an achievement from all users\n+     * @param achievement achievement to be deleted\n+     */\n+    public void removeFromUsers(Achievement achievement) {\n+        var users = achievement.getUsers();\n+        for (User user : users) {\n+            user.removeAchievement(achievement);\n+        }\n+        userRepository.saveAll(users);\n     }\n \n-    public Set<Achievement> findAllByUserId(Long userId) {\n-        return achievementRepository.findAllByUserId(userId);\n+    public void generateForCourse(Course course) {\n+        progressBasedAchievementService.generateAchievements(course);\n     }\n \n-    public Achievement save(Achievement achievement) {\n-        return achievementRepository.save(achievement);\n+    public void generateForExercise(Exercise exercise) {\n+        pointBasedAchievementService.generateAchievements(exercise);\n+        timeBasedAchievementService.generateAchievements(exercise);\n     }\n \n-    /**\n-     * Creates an achievement and persist it\n-     * @param title title of the achievement\n-     * @param description description of the achievement\n-     * @param icon the font awesome icon string identifier\n-     * @param rank rank of the achievement\n-     * @param course course which the achievement belongs to\n-     * @param exercise which the achievement belongs to\n-     * @return the created and persisted achievement\n-     */\n-    public Achievement create(String title, String description, String icon, AchievementRank rank, Course course, Exercise exercise) {\n-        Achievement achievement = new Achievement();\n-        achievement.setTitle(title);\n-        achievement.setDescription(description);\n-        achievement.setIcon(icon);\n-        achievement.setRank(rank);\n-        achievement.setCourse(course);\n-        achievement.setExercise(exercise);\n-        return achievementRepository.save(achievement);\n+    @Transactional\n+    public void checkForAchievements(Result result) {\n+        var course = result.getParticipation().getExercise().getCourseViaExerciseGroupOrCourseMember();\n+        if (course.getHasAchievements() == null || !course.getHasAchievements()) {\n+            return;\n+        }\n+        var exercise = result.getParticipation().getExercise();\n+        var optionalUser = participationService.findOneStudentParticipation(result.getParticipation().getId()).getStudent();\n+        if (!optionalUser.isPresent()) {\n+            return;\n+        }\n+        var user = optionalUser.get();\n+\n+        var pointRank = pointBasedAchievementService.checkForAchievement(result);\n+        rewardAchievement(course, exercise, AchievementType.POINT, pointRank, user);\n+\n+        var timeRank = timeBasedAchievementService.checkForAchievement(result);\n+        rewardAchievement(course, exercise, AchievementType.TIME, timeRank, user);\n+\n+        var progressRank = progressBasedAchievementService.checkForAchievement(course, user);\n+        rewardAchievement(course, exercise, AchievementType.PROGRESS, progressRank, user);\n     }\n \n-    /**\n-     * Deletes an achievement by also removing it from all users\n-     * @param achievement achievement to be deleted\n-     */\n-    public void delete(Achievement achievement) {\n-        var users = userRepository.findAllByAchievementId(achievement.getId());\n-        achievement.setUsers(users);\n-        for (User user : users) {\n-            user.removeAchievement(achievement);\n-            userRepository.save(user);\n+    public void rewardAchievement(Course course, Exercise exercise, AchievementType type, AchievementRank rank, User user) {\n+        Set<Achievement> achievements;\n+        Achievement achievement;\n+\n+        if (rank == null) {\n+            return;\n+        }\n+\n+        if (exercise == null) {\n+            achievements = achievementRepository.findAllForRewardedTypeInCourse(course.getId(), type);\n+        }\n+        else {\n+            achievements = achievementRepository.findAllForRewardedTypeInExercise(course.getId(), exercise.getId(), type);\n+        }\n+\n+        var optionalAchievement = achievements.stream().filter(a -> a.getRank().equals(rank)).findAny();\n+        if (!optionalAchievement.isPresent()) {\n+            return;\n+        }\n+\n+        achievement = optionalAchievement.get();\n+        if (achievement.getUsers().contains(user)) {\n+            return;\n+        }\n+\n+        var optionalAchievementsOfHigherRank = achievements.stream().filter(a -> a.getRank().ordinal() > rank.ordinal()).collect(Collectors.toSet());\n+        for (Achievement a : optionalAchievementsOfHigherRank) {\n+            if (a.getUsers().contains(user)) {\n+                return;\n+            }\n+        }\n+\n+        var optionalAchievementsOfLowerRank = achievements.stream().filter(a -> a.getRank().ordinal() < rank.ordinal()).collect(Collectors.toSet());\n+        for (Achievement a : optionalAchievementsOfLowerRank) {\n+            if (a.getUsers().contains(user) && a.getExercise() != null) {\n+                user.removeAchievement(a);\n+            }\n+        }\n+\n+        user.addAchievement(achievement);\n+        userRepository.save(user);\n+    }\n+\n+    public void prepareForClient(Set<Achievement> achievements) {\n+        for (Achievement achievement : achievements) {\n+            achievement.setExercise(null);\n+            achievement.setCourse(null);\n+            achievement.setUsers(null);\n         }\n-        achievementRepository.delete(achievement);\n     }\n }\n", "next_change": {"commit": "7a5de1a37353eb19f93ef49666bba352198834cb", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\nindex 6668ed36f44..eff8b25290f 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n", "chunk": "@@ -1,161 +1,87 @@\n package de.tum.in.www1.artemis.service;\n \n+import java.util.List;\n+import java.util.Optional;\n import java.util.Set;\n-import java.util.stream.Collectors;\n-\n-import javax.transaction.Transactional;\n \n import org.springframework.stereotype.Service;\n \n-import de.tum.in.www1.artemis.domain.*;\n import de.tum.in.www1.artemis.domain.Achievement;\n import de.tum.in.www1.artemis.domain.Course;\n import de.tum.in.www1.artemis.domain.Exercise;\n import de.tum.in.www1.artemis.domain.User;\n import de.tum.in.www1.artemis.domain.enumeration.AchievementRank;\n-import de.tum.in.www1.artemis.domain.enumeration.AchievementType;\n import de.tum.in.www1.artemis.repository.AchievementRepository;\n import de.tum.in.www1.artemis.repository.UserRepository;\n \n @Service\n public class AchievementService {\n \n-    private final PointBasedAchievementService pointBasedAchievementService;\n-\n-    private final TimeBasedAchievementService timeBasedAchievementService;\n-\n-    private final ProgressBasedAchievementService progressBasedAchievementService;\n-\n-    private final ParticipationService participationService;\n-\n     private final AchievementRepository achievementRepository;\n \n     private final UserRepository userRepository;\n \n-    public AchievementService(AchievementRepository achievementRepository, UserRepository userRepository, PointBasedAchievementService pointBasedAchievementService,\n-            TimeBasedAchievementService timeBasedAchievementService, ProgressBasedAchievementService progressBasedAchievementService, ParticipationService participationService) {\n+    public AchievementService(AchievementRepository achievementRepository, UserRepository userRepository) {\n         this.achievementRepository = achievementRepository;\n-        this.pointBasedAchievementService = pointBasedAchievementService;\n-        this.timeBasedAchievementService = timeBasedAchievementService;\n-        this.progressBasedAchievementService = progressBasedAchievementService;\n         this.userRepository = userRepository;\n-        this.participationService = participationService;\n     }\n \n-    public Set<Achievement> findAllByUserIdAndCourseId(Long userId, Long courseId) {\n-        return achievementRepository.findAllByUserIdAndCourseId(userId, courseId);\n+    public Optional<Achievement> findById(Long achievementId) {\n+        return achievementRepository.findById(achievementId);\n     }\n \n-    @Transactional\n-    public void deleteByCourseId(Long courseId) {\n-        Set<Achievement> achievements = achievementRepository.findAllByCourseId(courseId);\n-        for (Achievement achievement : achievements) {\n-            removeFromUsers(achievement);\n-        }\n-        achievementRepository.deleteAll(achievements);\n+    public List<Achievement> findAll() {\n+        return achievementRepository.findAll();\n     }\n \n-    @Transactional\n-    public void deleteByExerciseId(Long exerciseId) {\n-        Set<Achievement> achievements = achievementRepository.findAllByExerciseId(exerciseId);\n-        for (Achievement achievement : achievements) {\n-            removeFromUsers(achievement);\n-        }\n-        achievementRepository.deleteAll(achievements);\n+    public Set<Achievement> findAllByCourseId(Long courseId) {\n+        return achievementRepository.findAllByCourseId(courseId);\n     }\n \n-    /**\n-     * Removes an achievement from all users\n-     * @param achievement achievement to be deleted\n-     */\n-    public void removeFromUsers(Achievement achievement) {\n-        var users = achievement.getUsers();\n-        for (User user : users) {\n-            user.removeAchievement(achievement);\n-        }\n-        userRepository.saveAll(users);\n+    public Set<Achievement> findAllByExerciseId(Long exerciseId) {\n+        return achievementRepository.findAllByExerciseId(exerciseId);\n     }\n \n-    public void generateForCourse(Course course) {\n-        progressBasedAchievementService.generateAchievements(course);\n+    public Set<Achievement> findAllByUserId(Long userId) {\n+        return achievementRepository.findAllByUserId(userId);\n     }\n \n-    public void generateForExercise(Exercise exercise) {\n-        pointBasedAchievementService.generateAchievements(exercise);\n-        timeBasedAchievementService.generateAchievements(exercise);\n-    }\n-\n-    @Transactional\n-    public void checkForAchievements(Result result) {\n-        var course = result.getParticipation().getExercise().getCourseViaExerciseGroupOrCourseMember();\n-        if (course.getHasAchievements() == null || !course.getHasAchievements()) {\n-            return;\n-        }\n-        var exercise = result.getParticipation().getExercise();\n-        var optionalUser = participationService.findOneStudentParticipation(result.getParticipation().getId()).getStudent();\n-        if (!optionalUser.isPresent()) {\n-            return;\n-        }\n-        var user = optionalUser.get();\n-\n-        var pointRank = pointBasedAchievementService.checkForAchievement(result);\n-        rewardAchievement(course, exercise, AchievementType.POINT, pointRank, user);\n-\n-        var timeRank = timeBasedAchievementService.checkForAchievement(result);\n-        rewardAchievement(course, exercise, AchievementType.TIME, timeRank, user);\n-\n-        var progressRank = progressBasedAchievementService.checkForAchievement(course, user);\n-        rewardAchievement(course, exercise, AchievementType.PROGRESS, progressRank, user);\n+    public Achievement save(Achievement achievement) {\n+        return achievementRepository.save(achievement);\n     }\n \n-    public void rewardAchievement(Course course, Exercise exercise, AchievementType type, AchievementRank rank, User user) {\n-        Set<Achievement> achievements;\n-        Achievement achievement;\n-\n-        if (rank == null) {\n-            return;\n-        }\n-\n-        if (exercise == null) {\n-            achievements = achievementRepository.findAllForRewardedTypeInCourse(course.getId(), type);\n-        }\n-        else {\n-            achievements = achievementRepository.findAllForRewardedTypeInExercise(course.getId(), exercise.getId(), type);\n-        }\n-\n-        var optionalAchievement = achievements.stream().filter(a -> a.getRank().equals(rank)).findAny();\n-        if (!optionalAchievement.isPresent()) {\n-            return;\n-        }\n-\n-        achievement = optionalAchievement.get();\n-        if (achievement.getUsers().contains(user)) {\n-            return;\n-        }\n-\n-        var optionalAchievementsOfHigherRank = achievements.stream().filter(a -> a.getRank().ordinal() > rank.ordinal()).collect(Collectors.toSet());\n-        for (Achievement a : optionalAchievementsOfHigherRank) {\n-            if (a.getUsers().contains(user)) {\n-                return;\n-            }\n-        }\n-\n-        var optionalAchievementsOfLowerRank = achievements.stream().filter(a -> a.getRank().ordinal() < rank.ordinal()).collect(Collectors.toSet());\n-        for (Achievement a : optionalAchievementsOfLowerRank) {\n-            if (a.getUsers().contains(user) && a.getExercise() != null) {\n-                user.removeAchievement(a);\n-            }\n-        }\n-\n-        user.addAchievement(achievement);\n-        userRepository.save(user);\n+    /**\n+     * Creates an achievement and persist it\n+     * @param title title of the achievement\n+     * @param description description of the achievement\n+     * @param icon the font awesome icon string identifier\n+     * @param rank rank of the achievement\n+     * @param course course which the achievement belongs to\n+     * @param exercise which the achievement belongs to\n+     * @return the created and persisted achievement\n+     */\n+    public Achievement create(String title, String description, String icon, AchievementRank rank, Course course, Exercise exercise) {\n+        Achievement achievement = new Achievement();\n+        achievement.setTitle(title);\n+        achievement.setDescription(description);\n+        achievement.setIcon(icon);\n+        achievement.setRank(rank);\n+        achievement.setCourse(course);\n+        achievement.setExercise(exercise);\n+        return achievementRepository.save(achievement);\n     }\n \n-    public void prepareForClient(Set<Achievement> achievements) {\n-        for (Achievement achievement : achievements) {\n-            achievement.setExercise(null);\n-            achievement.setCourse(null);\n-            achievement.setUsers(null);\n+    /**\n+     * Deletes an achievement by also removing it from all users\n+     * @param achievement achievement to be deleted\n+     */\n+    public void delete(Achievement achievement) {\n+        var users = userRepository.findAllByAchievementId(achievement.getId());\n+        achievement.setUsers(users);\n+        for (User user : users) {\n+            user.removeAchievement(achievement);\n+            userRepository.save(user);\n         }\n+        achievementRepository.delete(achievement);\n     }\n }\n", "next_change": {"commit": "116151629d403403ee9b750c30c182f44f70e233", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\nindex eff8b25290f..30708f42a32 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n", "chunk": "@@ -1,87 +1,117 @@\n package de.tum.in.www1.artemis.service;\n \n-import java.util.List;\n-import java.util.Optional;\n import java.util.Set;\n \n+import javax.transaction.Transactional;\n+\n import org.springframework.stereotype.Service;\n \n import de.tum.in.www1.artemis.domain.Achievement;\n import de.tum.in.www1.artemis.domain.Course;\n import de.tum.in.www1.artemis.domain.Exercise;\n import de.tum.in.www1.artemis.domain.User;\n-import de.tum.in.www1.artemis.domain.enumeration.AchievementRank;\n import de.tum.in.www1.artemis.repository.AchievementRepository;\n import de.tum.in.www1.artemis.repository.UserRepository;\n \n @Service\n public class AchievementService {\n \n+    private final PointBasedAchievementService pointBasedAchievementService;\n+\n+    private final TimeBasedAchievementService timeBasedAchievementService;\n+\n+    private final ProgressBasedAchievementService progressBasedAchievementService;\n+\n     private final AchievementRepository achievementRepository;\n \n     private final UserRepository userRepository;\n \n-    public AchievementService(AchievementRepository achievementRepository, UserRepository userRepository) {\n+    public AchievementService(AchievementRepository achievementRepository, UserRepository userRepository, PointBasedAchievementService pointBasedAchievementService,\n+            TimeBasedAchievementService timeBasedAchievementService, ProgressBasedAchievementService progressBasedAchievementService) {\n         this.achievementRepository = achievementRepository;\n+        this.pointBasedAchievementService = pointBasedAchievementService;\n+        this.timeBasedAchievementService = timeBasedAchievementService;\n+        this.progressBasedAchievementService = progressBasedAchievementService;\n         this.userRepository = userRepository;\n     }\n \n-    public Optional<Achievement> findById(Long achievementId) {\n-        return achievementRepository.findById(achievementId);\n-    }\n-\n-    public List<Achievement> findAll() {\n-        return achievementRepository.findAll();\n+    /**\n+     * Finds all achievements for a user in a given course and returns them as a set\n+     * @param userId\n+     * @param courseId\n+     */\n+    public Set<Achievement> findAllByUserIdAndCourseId(Long userId, Long courseId) {\n+        return achievementRepository.findAllByUserIdAndCourseId(userId, courseId);\n     }\n \n-    public Set<Achievement> findAllByCourseId(Long courseId) {\n-        return achievementRepository.findAllByCourseId(courseId);\n+    /**\n+     * Deletes all achievements that belong to the course with the given courseId\n+     * Used when a course is deleted or when achievements are disabled again for a course\n+     * @param courseId\n+     */\n+    @Transactional\n+    public void deleteByCourseId(Long courseId) {\n+        Set<Achievement> achievements = achievementRepository.findAllByCourseId(courseId);\n+        for (Achievement achievement : achievements) {\n+            removeFromUsers(achievement);\n+        }\n+        achievementRepository.deleteAll(achievements);\n     }\n \n-    public Set<Achievement> findAllByExerciseId(Long exerciseId) {\n-        return achievementRepository.findAllByExerciseId(exerciseId);\n+    /**\n+     * Deletes all achievements that belong to the exercise with the given exerciseId\n+     * Used when an exercise is deleted\n+     * @param exerciseId\n+     */\n+    @Transactional\n+    public void deleteByExerciseId(Long exerciseId) {\n+        Set<Achievement> achievements = achievementRepository.findAllByExerciseId(exerciseId);\n+        for (Achievement achievement : achievements) {\n+            removeFromUsers(achievement);\n+        }\n+        achievementRepository.deleteAll(achievements);\n     }\n \n-    public Set<Achievement> findAllByUserId(Long userId) {\n-        return achievementRepository.findAllByUserId(userId);\n+    /**\n+     * Removes an achievement from all users\n+     * @param achievement achievement to be deleted\n+     */\n+    public void removeFromUsers(Achievement achievement) {\n+        var users = achievement.getUsers();\n+        for (User user : users) {\n+            user.removeAchievement(achievement);\n+        }\n+        userRepository.saveAll(users);\n     }\n \n-    public Achievement save(Achievement achievement) {\n-        return achievementRepository.save(achievement);\n+    /**\n+     * Generates achievements for a course\n+     * Used when course is updated or created and achievements are enabled for course\n+     * @param course\n+     */\n+    public void generateForCourse(Course course) {\n+        progressBasedAchievementService.generateAchievements(course);\n     }\n \n     /**\n-     * Creates an achievement and persist it\n-     * @param title title of the achievement\n-     * @param description description of the achievement\n-     * @param icon the font awesome icon string identifier\n-     * @param rank rank of the achievement\n-     * @param course course which the achievement belongs to\n-     * @param exercise which the achievement belongs to\n-     * @return the created and persisted achievement\n+     * Generates achievements for an exercise\n+     * Used when exercise is created and achievements are enabled for corresponding course\n+     * @param exercise\n      */\n-    public Achievement create(String title, String description, String icon, AchievementRank rank, Course course, Exercise exercise) {\n-        Achievement achievement = new Achievement();\n-        achievement.setTitle(title);\n-        achievement.setDescription(description);\n-        achievement.setIcon(icon);\n-        achievement.setRank(rank);\n-        achievement.setCourse(course);\n-        achievement.setExercise(exercise);\n-        return achievementRepository.save(achievement);\n+    public void generateForExercise(Exercise exercise) {\n+        pointBasedAchievementService.generateAchievements(exercise);\n+        timeBasedAchievementService.generateAchievements(exercise);\n     }\n \n     /**\n-     * Deletes an achievement by also removing it from all users\n-     * @param achievement achievement to be deleted\n+     * Prepares the given set of achievements to be sent to the client by removing exercise, course and users\n+     * @param achievements\n      */\n-    public void delete(Achievement achievement) {\n-        var users = userRepository.findAllByAchievementId(achievement.getId());\n-        achievement.setUsers(users);\n-        for (User user : users) {\n-            user.removeAchievement(achievement);\n-            userRepository.save(user);\n+    public void prepareForClient(Set<Achievement> achievements) {\n+        for (Achievement achievement : achievements) {\n+            achievement.setExercise(null);\n+            achievement.setCourse(null);\n+            achievement.setUsers(null);\n         }\n-        achievementRepository.delete(achievement);\n     }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQzMTkxMg==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r481431912", "body": "Don't you have to save the altered achievements?", "bodyText": "Don't you have to save the altered achievements?", "bodyHTML": "<p dir=\"auto\">Don't you have to save the altered achievements?</p>", "author": "kloessst", "createdAt": "2020-09-01T21:07:24Z", "path": "src/main/java/de/tum/in/www1/artemis/service/ExerciseService.java", "diffHunk": "@@ -285,6 +288,9 @@ public void delete(long exerciseId, boolean deleteStudentReposBuildPlans, boolea\n         // make sure tutor participations are deleted before the exercise is deleted\n         tutorParticipationRepository.deleteAllByAssessedExerciseId(exercise.getId());\n \n+        // delete exercise in all achievements\n+        achievementService.findAllByExerciseId(exercise.getId()).forEach(achievement -> achievement.setExercise(null));", "originalCommit": "efe97b904e2506356b25a51a137cc654e2ffb140", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ0MjIyNw==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r481442227", "bodyText": "yes, I should", "author": "balazs-czopf", "createdAt": "2020-09-01T21:28:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQzMTkxMg=="}], "type": "inlineReview", "revised_code": {"commit": "d6f4c8861d530ee606cd33ce9bea33c51e4f2728", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/ExerciseService.java b/src/main/java/de/tum/in/www1/artemis/service/ExerciseService.java\nindex 4074b1aff6e..5773e744d33 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/ExerciseService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/ExerciseService.java\n", "chunk": "@@ -288,8 +288,11 @@ public class ExerciseService {\n         // make sure tutor participations are deleted before the exercise is deleted\n         tutorParticipationRepository.deleteAllByAssessedExerciseId(exercise.getId());\n \n-        // delete exercise in all achievements\n-        achievementService.findAllByExerciseId(exercise.getId()).forEach(achievement -> achievement.setExercise(null));\n+        // delete the Achievements\n+        Set<Achievement> achievements = achievementService.findAllByExerciseId(exercise.getId());\n+        for (Achievement achievement : achievements) {\n+            achievementService.delete(achievement);\n+        }\n \n         if (exercise.hasExerciseGroup()) {\n             Exam exam = examRepository.findOneWithEagerExercisesGroupsAndStudentExams(exercise.getExerciseGroup().getExam().getId());\n", "next_change": {"commit": "8d5bfc049d9e75323290b069e7343df6fc579ee7", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/ExerciseService.java b/src/main/java/de/tum/in/www1/artemis/service/ExerciseService.java\nindex 5773e744d33..bfc2f03cb53 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/ExerciseService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/ExerciseService.java\n", "chunk": "@@ -289,10 +292,7 @@ public class ExerciseService {\n         tutorParticipationRepository.deleteAllByAssessedExerciseId(exercise.getId());\n \n         // delete the Achievements\n-        Set<Achievement> achievements = achievementService.findAllByExerciseId(exercise.getId());\n-        for (Achievement achievement : achievements) {\n-            achievementService.delete(achievement);\n-        }\n+        achievementService.deleteByExerciseId(exercise.getId());\n \n         if (exercise.hasExerciseGroup()) {\n             Exam exam = examRepository.findOneWithEagerExercisesGroupsAndStudentExams(exercise.getExerciseGroup().getExam().getId());\n", "next_change": {"commit": "d253878f2c48324cce17332d858163dc22f932f6", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/ExerciseService.java b/src/main/java/de/tum/in/www1/artemis/service/ExerciseService.java\nindex bfc2f03cb53..d5fd84a04eb 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/ExerciseService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/ExerciseService.java\n", "chunk": "@@ -291,7 +291,7 @@ public class ExerciseService {\n         // make sure tutor participations are deleted before the exercise is deleted\n         tutorParticipationRepository.deleteAllByAssessedExerciseId(exercise.getId());\n \n-        // delete the Achievements\n+        // delete the achievements\n         achievementService.deleteByExerciseId(exercise.getId());\n \n         if (exercise.hasExerciseGroup()) {\n", "next_change": {"commit": "7a5de1a37353eb19f93ef49666bba352198834cb", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/ExerciseService.java b/src/main/java/de/tum/in/www1/artemis/service/ExerciseService.java\nindex d5fd84a04eb..c33ecc3edfd 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/ExerciseService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/ExerciseService.java\n", "chunk": "@@ -291,8 +291,11 @@ public class ExerciseService {\n         // make sure tutor participations are deleted before the exercise is deleted\n         tutorParticipationRepository.deleteAllByAssessedExerciseId(exercise.getId());\n \n-        // delete the achievements\n-        achievementService.deleteByExerciseId(exercise.getId());\n+        // delete the Achievements\n+        Set<Achievement> achievements = achievementService.findAllByExerciseId(exercise.getId());\n+        for (Achievement achievement : achievements) {\n+            achievementService.delete(achievement);\n+        }\n \n         if (exercise.hasExerciseGroup()) {\n             Exam exam = examRepository.findOneWithEagerExercisesGroupsAndStudentExams(exercise.getExerciseGroup().getExam().getId());\n", "next_change": {"commit": "116151629d403403ee9b750c30c182f44f70e233", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/ExerciseService.java b/src/main/java/de/tum/in/www1/artemis/service/ExerciseService.java\nindex c33ecc3edfd..d5fd84a04eb 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/ExerciseService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/ExerciseService.java\n", "chunk": "@@ -291,11 +291,8 @@ public class ExerciseService {\n         // make sure tutor participations are deleted before the exercise is deleted\n         tutorParticipationRepository.deleteAllByAssessedExerciseId(exercise.getId());\n \n-        // delete the Achievements\n-        Set<Achievement> achievements = achievementService.findAllByExerciseId(exercise.getId());\n-        for (Achievement achievement : achievements) {\n-            achievementService.delete(achievement);\n-        }\n+        // delete the achievements\n+        achievementService.deleteByExerciseId(exercise.getId());\n \n         if (exercise.hasExerciseGroup()) {\n             Exam exam = examRepository.findOneWithEagerExercisesGroupsAndStudentExams(exercise.getExerciseGroup().getExam().getId());\n", "next_change": null}]}}]}}]}}]}}]}}, {"oid": "6aa68b0ab7a071fa631c7c72cdb8ea02ccf15a39", "url": "https://github.com/ls1intum/Artemis/commit/6aa68b0ab7a071fa631c7c72cdb8ea02ccf15a39", "message": "add param doc", "committedDate": "2020-09-01T21:11:31Z", "type": "commit"}, {"oid": "d6f4c8861d530ee606cd33ce9bea33c51e4f2728", "url": "https://github.com/ls1intum/Artemis/commit/d6f4c8861d530ee606cd33ce9bea33c51e4f2728", "message": "integrate further feedback", "committedDate": "2020-09-01T21:30:09Z", "type": "commit"}, {"oid": "9ef266e869ba2a7881c261a2ff2936b1acdb4911", "url": "https://github.com/ls1intum/Artemis/commit/9ef266e869ba2a7881c261a2ff2936b1acdb4911", "message": "add return to javadoc", "committedDate": "2020-09-01T21:58:03Z", "type": "commit"}, {"oid": "1de95feae06f4d7194b157599d21b659665da934", "url": "https://github.com/ls1intum/Artemis/commit/1de95feae06f4d7194b157599d21b659665da934", "message": "Merge branch 'develop' into feature/achievements/storage", "committedDate": "2020-09-19T07:07:16Z", "type": "commit"}, {"oid": "b55d823034cdd1c7d78f81b2656deb0463a57163", "url": "https://github.com/ls1intum/Artemis/commit/b55d823034cdd1c7d78f81b2656deb0463a57163", "message": "Merge branch 'feature/achievements/storage' into feature/achievements/achievement-checks\n\n# Conflicts:\n#\tsrc/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n#\tsrc/main/java/de/tum/in/www1/artemis/service/ProgrammingAssessmentService.java", "committedDate": "2020-09-19T07:21:32Z", "type": "commit"}, {"oid": "b78dc9d7d8eb442e8cca093c1e39c80633ae7c46", "url": "https://github.com/ls1intum/Artemis/commit/b78dc9d7d8eb442e8cca093c1e39c80633ae7c46", "message": "remove semicolons", "committedDate": "2020-09-19T08:06:27Z", "type": "commit"}, {"oid": "53dba54103c70309a079b8d63b7c97244b81c458", "url": "https://github.com/ls1intum/Artemis/commit/53dba54103c70309a079b8d63b7c97244b81c458", "message": "remove another semicolon", "committedDate": "2020-09-19T08:08:22Z", "type": "commit"}, {"oid": "29b99cf76c6ad320bec1bc5873d8c3db73d72cf3", "url": "https://github.com/ls1intum/Artemis/commit/29b99cf76c6ad320bec1bc5873d8c3db73d72cf3", "message": "remove semicolons once again", "committedDate": "2020-09-19T08:12:21Z", "type": "commit"}, {"oid": "865d4c8c0b2383053a0206e3f554ad5ddd33ed22", "url": "https://github.com/ls1intum/Artemis/commit/865d4c8c0b2383053a0206e3f554ad5ddd33ed22", "message": "Merge branch 'develop' into feature/achievements/storage", "committedDate": "2020-09-19T10:38:00Z", "type": "commit"}, {"oid": "d9de666709304efc7d693591721e3a95c65ee6a9", "url": "https://github.com/ls1intum/Artemis/commit/d9de666709304efc7d693591721e3a95c65ee6a9", "message": "Merge branch 'develop' into feature/achievements/storage", "committedDate": "2020-09-20T15:09:16Z", "type": "commit"}, {"oid": "72ed71a2a7717d3b129f6365d24db139ca9ffdf8", "url": "https://github.com/ls1intum/Artemis/commit/72ed71a2a7717d3b129f6365d24db139ca9ffdf8", "message": "Merge branch 'develop' into feature/achievements/achievement-checks", "committedDate": "2020-09-20T15:11:59Z", "type": "commit"}, {"oid": "2880feed09fc2090a643646854d2f6a5d2a67e8f", "url": "https://github.com/ls1intum/Artemis/commit/2880feed09fc2090a643646854d2f6a5d2a67e8f", "message": "Merge branch 'develop' into feature/achievements/storage", "committedDate": "2020-09-23T09:42:16Z", "type": "commit"}, {"oid": "ad64b282b2255d720c9773cccc6f49a00bff6ad4", "url": "https://github.com/ls1intum/Artemis/commit/ad64b282b2255d720c9773cccc6f49a00bff6ad4", "message": "Merge branch 'develop' into feature/achievements/storage", "committedDate": "2020-09-23T13:58:56Z", "type": "commit"}, {"oid": "f9aef805a8b7948a9d5cd14781203108636a085e", "url": "https://github.com/ls1intum/Artemis/commit/f9aef805a8b7948a9d5cd14781203108636a085e", "message": "Merge branch 'develop' into feature/achievements/achievement-checks", "committedDate": "2020-09-24T06:15:01Z", "type": "commit"}, {"oid": "16c868730f899decba01ea6e156f8e7aebc0f26a", "url": "https://github.com/ls1intum/Artemis/commit/16c868730f899decba01ea6e156f8e7aebc0f26a", "message": "Merge branch 'develop' into feature/achievements/storage", "committedDate": "2020-09-24T06:16:03Z", "type": "commit"}, {"oid": "5aa0f887eec40ee49590ae6c36598ed23f71fa30", "url": "https://github.com/ls1intum/Artemis/commit/5aa0f887eec40ee49590ae6c36598ed23f71fa30", "message": "Merge branch 'develop' into feature/achievements/storage", "committedDate": "2020-09-24T08:41:09Z", "type": "commit"}, {"oid": "c9e78d5f35e682dd1b8e5882d0883d782cecbe3f", "url": "https://github.com/ls1intum/Artemis/commit/c9e78d5f35e682dd1b8e5882d0883d782cecbe3f", "message": "Merge branch 'develop' into feature/achievements/achievement-checks\n\n# Conflicts:\n#\tsrc/main/resources/config/liquibase/master.xml", "committedDate": "2020-09-24T08:46:44Z", "type": "commit"}, {"oid": "4605b63a052365e502039c1e3d72f325538cf7eb", "url": "https://github.com/ls1intum/Artemis/commit/4605b63a052365e502039c1e3d72f325538cf7eb", "message": "Merge branch 'develop' into feature/achievements/storage", "committedDate": "2020-09-24T13:03:15Z", "type": "commit"}, {"oid": "18ddbfcae8f77e8cee1c7944a18fba5a589d46b5", "url": "https://github.com/ls1intum/Artemis/commit/18ddbfcae8f77e8cee1c7944a18fba5a589d46b5", "message": "Merge branch 'develop' into feature/achievements/achievement-checks", "committedDate": "2020-09-24T13:04:50Z", "type": "commit"}, {"oid": "1555470b055e8a99d34b9ed7f4fcb0929ede6bc6", "url": "https://github.com/ls1intum/Artemis/commit/1555470b055e8a99d34b9ed7f4fcb0929ede6bc6", "message": "Merge branch 'develop' into feature/achievements/storage\n\n# Conflicts:\n#\tsrc/main/resources/config/liquibase/master.xml", "committedDate": "2020-09-24T17:31:50Z", "type": "commit"}, {"oid": "350087b6078ccb4c49a78aebe602a163fa860637", "url": "https://github.com/ls1intum/Artemis/commit/350087b6078ccb4c49a78aebe602a163fa860637", "message": "Merge branch 'develop' into feature/achievements/achievement-checks\n\n# Conflicts:\n#\tsrc/main/resources/config/liquibase/master.xml", "committedDate": "2020-09-24T17:33:48Z", "type": "commit"}, {"oid": "b496ec47dbd27567e02f96f7b2e363733ca7d89f", "url": "https://github.com/ls1intum/Artemis/commit/b496ec47dbd27567e02f96f7b2e363733ca7d89f", "message": "Merge branch 'develop' into feature/achievements/storage", "committedDate": "2020-09-26T09:57:30Z", "type": "commit"}, {"oid": "1871fe479e13e32629073b2a2ab2ae293cf2a6ae", "url": "https://github.com/ls1intum/Artemis/commit/1871fe479e13e32629073b2a2ab2ae293cf2a6ae", "message": "Merge branch 'develop' into feature/achievements/achievement-checks", "committedDate": "2020-09-26T09:59:58Z", "type": "commit"}, {"oid": "2d1887ebc2c67095c5a13eee2f86b7fb39b901d3", "url": "https://github.com/ls1intum/Artemis/commit/2d1887ebc2c67095c5a13eee2f86b7fb39b901d3", "message": "remove random semicolons", "committedDate": "2020-09-26T15:01:09Z", "type": "commit"}, {"oid": "f0e4daee087d8b6f0d36b1b78465a31f6f09713d", "url": "https://github.com/ls1intum/Artemis/commit/f0e4daee087d8b6f0d36b1b78465a31f6f09713d", "message": "remove random semicolons", "committedDate": "2020-09-26T15:11:46Z", "type": "commit"}, {"oid": "95622742bd3fa7623d0ad8df6089acef534ee60f", "url": "https://github.com/ls1intum/Artemis/commit/95622742bd3fa7623d0ad8df6089acef534ee60f", "message": "add achievement checks", "committedDate": "2020-09-27T09:24:20Z", "type": "commit"}, {"oid": "c0a4b8df894787c7f22b172ecf3a3a9ce1ff398d", "url": "https://github.com/ls1intum/Artemis/commit/c0a4b8df894787c7f22b172ecf3a3a9ce1ff398d", "message": "fix a few things", "committedDate": "2020-09-28T07:41:32Z", "type": "commit"}, {"oid": "0e82242b97cdbc112e1d3a883cb2281d462dd405", "url": "https://github.com/ls1intum/Artemis/commit/0e82242b97cdbc112e1d3a883cb2281d462dd405", "message": "Merge branch 'develop' into feature/achievements/storage", "committedDate": "2020-09-28T07:52:42Z", "type": "commit"}, {"oid": "c7425c9af8e7e15cd22a3771029b103c6d79608f", "url": "https://github.com/ls1intum/Artemis/commit/c7425c9af8e7e15cd22a3771029b103c6d79608f", "message": "Merge branch 'develop' into feature/achievements/achievement-checks", "committedDate": "2020-09-28T07:53:20Z", "type": "commit"}, {"oid": "28ed83395042c9e9faddf43940bd9f3c221684b3", "url": "https://github.com/ls1intum/Artemis/commit/28ed83395042c9e9faddf43940bd9f3c221684b3", "message": "Merge branch 'develop' into feature/achievements/storage", "committedDate": "2020-09-28T19:39:26Z", "type": "commit"}, {"oid": "7f91a8c850a8261a5a2cccec6290474ad193d1b8", "url": "https://github.com/ls1intum/Artemis/commit/7f91a8c850a8261a5a2cccec6290474ad193d1b8", "message": "Merge branch 'develop' into feature/achievements/storage", "committedDate": "2020-09-29T15:18:39Z", "type": "commit"}, {"oid": "13581c27c5425e2d08d6c8d22c23aabb06a4661b", "url": "https://github.com/ls1intum/Artemis/commit/13581c27c5425e2d08d6c8d22c23aabb06a4661b", "message": "Merge branch 'develop' into feature/achievements/storage", "committedDate": "2020-09-29T17:28:10Z", "type": "commit"}, {"oid": "a29934b894dc985ef64551a61cb158c8db3cb095", "url": "https://github.com/ls1intum/Artemis/commit/a29934b894dc985ef64551a61cb158c8db3cb095", "message": "Merge branch 'develop' into feature/achievements/storage", "committedDate": "2020-09-29T18:07:56Z", "type": "commit"}, {"oid": "108a983bae22d4c3041b0c52e1acbc5132791cf4", "url": "https://github.com/ls1intum/Artemis/commit/108a983bae22d4c3041b0c52e1acbc5132791cf4", "message": "Merge branch 'develop' into feature/achievements/storage", "committedDate": "2020-09-30T14:47:01Z", "type": "commit"}, {"oid": "c3317e06a092c8dbee21b52de380addd92f73b3f", "url": "https://github.com/ls1intum/Artemis/commit/c3317e06a092c8dbee21b52de380addd92f73b3f", "message": "add stuff", "committedDate": "2020-10-01T10:52:14Z", "type": "commit"}, {"oid": "508e8977abe4d1e8ec1c8a817fe9bd0f91f6bb8a", "url": "https://github.com/ls1intum/Artemis/commit/508e8977abe4d1e8ec1c8a817fe9bd0f91f6bb8a", "message": "Merge branch 'develop' into feature/achievements/storage", "committedDate": "2020-10-01T10:59:26Z", "type": "commit"}, {"oid": "d3d2ea3ec69fdc3185bac66822f03c4a1bf0b6b1", "url": "https://github.com/ls1intum/Artemis/commit/d3d2ea3ec69fdc3185bac66822f03c4a1bf0b6b1", "message": "Merge branch 'develop' into feature/achievements/server", "committedDate": "2020-10-01T11:00:44Z", "type": "commit"}, {"oid": "ee25bd720633e2da0f2ad7b9354358590178e20f", "url": "https://github.com/ls1intum/Artemis/commit/ee25bd720633e2da0f2ad7b9354358590178e20f", "message": "prepare for client", "committedDate": "2020-10-01T11:36:40Z", "type": "commit"}, {"oid": "22dd5cf9af0d3ad36041717a3f4ca1be5c5a6925", "url": "https://github.com/ls1intum/Artemis/commit/22dd5cf9af0d3ad36041717a3f4ca1be5c5a6925", "message": "small fix", "committedDate": "2020-10-01T19:34:47Z", "type": "commit"}, {"oid": "87e1b7686ddcdf36dbefc8407242e70d200a329d", "url": "https://github.com/ls1intum/Artemis/commit/87e1b7686ddcdf36dbefc8407242e70d200a329d", "message": "few further fixes", "committedDate": "2020-10-01T22:17:53Z", "type": "commit"}, {"oid": "64778c859b7f2d14015c50aedae62db4c98bcee7", "url": "https://github.com/ls1intum/Artemis/commit/64778c859b7f2d14015c50aedae62db4c98bcee7", "message": "Merge branch 'develop' into feature/achievements/storage", "committedDate": "2020-10-03T11:52:15Z", "type": "commit"}, {"oid": "8d5bfc049d9e75323290b069e7343df6fc579ee7", "url": "https://github.com/ls1intum/Artemis/commit/8d5bfc049d9e75323290b069e7343df6fc579ee7", "message": "refactor stuff", "committedDate": "2020-10-03T16:02:35Z", "type": "commit"}, {"oid": "1b37db66c5ce9ba8f83251928b06cf1348c9d2a8", "url": "https://github.com/ls1intum/Artemis/commit/1b37db66c5ce9ba8f83251928b06cf1348c9d2a8", "message": "Merge branch 'develop' into feature/achievements/server\n\n# Conflicts:\n#\tsrc/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingExerciseResource.java", "committedDate": "2020-10-03T16:50:03Z", "type": "commit"}, {"oid": "d253878f2c48324cce17332d858163dc22f932f6", "url": "https://github.com/ls1intum/Artemis/commit/d253878f2c48324cce17332d858163dc22f932f6", "message": "add javadoc", "committedDate": "2020-10-04T08:40:29Z", "type": "commit"}, {"oid": "e261947c3ac2358fb9c0c2794728e9499b0504ae", "url": "https://github.com/ls1intum/Artemis/commit/e261947c3ac2358fb9c0c2794728e9499b0504ae", "message": "Merge branch 'develop' into feature/achievements/server\n\n# Conflicts:\n#\tsrc/main/java/de/tum/in/www1/artemis/domain/User.java", "committedDate": "2020-10-04T08:46:50Z", "type": "commit"}, {"oid": "7a5de1a37353eb19f93ef49666bba352198834cb", "url": "https://github.com/ls1intum/Artemis/commit/7a5de1a37353eb19f93ef49666bba352198834cb", "message": "Merge branch 'develop' into feature/achievements/storage\n\n# Conflicts:\n#\tsrc/main/java/de/tum/in/www1/artemis/domain/User.java", "committedDate": "2020-10-04T08:53:29Z", "type": "commit"}, {"oid": "116151629d403403ee9b750c30c182f44f70e233", "url": "https://github.com/ls1intum/Artemis/commit/116151629d403403ee9b750c30c182f44f70e233", "message": "Merge relevant changes from 'feature/achievements/server' into feature/achievements/storage", "committedDate": "2020-10-04T09:18:47Z", "type": "commit"}, {"oid": "93870f9227c9fc41eccd69fbff118cd9b1535aad", "url": "https://github.com/ls1intum/Artemis/commit/93870f9227c9fc41eccd69fbff118cd9b1535aad", "message": "fix default value", "committedDate": "2020-10-04T09:53:51Z", "type": "commit"}, {"oid": "7db5a3c96eed46493c6270e6aa8c8f658fa78b14", "url": "https://github.com/ls1intum/Artemis/commit/7db5a3c96eed46493c6270e6aa8c8f658fa78b14", "message": "Merge branch 'develop' into feature/achievements/storage", "committedDate": "2020-10-04T09:57:41Z", "type": "commit"}, {"oid": "53c319a21a4053a341e9b24da4987de5abfb656d", "url": "https://github.com/ls1intum/Artemis/commit/53c319a21a4053a341e9b24da4987de5abfb656d", "message": "use service", "committedDate": "2020-10-04T12:27:27Z", "type": "commit"}, {"oid": "786e61b1b217fb61e37f5dc1256ea2e3663d3cdb", "url": "https://github.com/ls1intum/Artemis/commit/786e61b1b217fb61e37f5dc1256ea2e3663d3cdb", "message": "Merge branch 'develop' into feature/achievements/storage\n\n# Conflicts:\n#\tsrc/main/java/de/tum/in/www1/artemis/domain/Course.java", "committedDate": "2020-10-05T06:35:18Z", "type": "commit"}, {"oid": "24465a0b342536acdc8e7b8d0448043b276dab91", "url": "https://github.com/ls1intum/Artemis/commit/24465a0b342536acdc8e7b8d0448043b276dab91", "message": "fix codacy", "committedDate": "2020-10-05T09:47:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQ1NzA3Ng==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r499457076", "body": "I would suggest not using SQL keywords for column names. https://www.drupal.org/node/141051", "bodyText": "I would suggest not using SQL keywords for column names. https://www.drupal.org/node/141051", "bodyHTML": "<p dir=\"auto\">I would suggest not using SQL keywords for column names. <a href=\"https://www.drupal.org/node/141051\" rel=\"nofollow\">https://www.drupal.org/node/141051</a></p>", "author": "stefanwaldhauser", "createdAt": "2020-10-05T09:19:45Z", "path": "src/main/java/de/tum/in/www1/artemis/domain/Achievement.java", "diffHunk": "@@ -0,0 +1,166 @@\n+package de.tum.in.www1.artemis.domain;\n+\n+import java.io.Serializable;\n+import java.util.HashSet;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import javax.persistence.*;\n+\n+import org.hibernate.annotations.Cache;\n+import org.hibernate.annotations.CacheConcurrencyStrategy;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+\n+import de.tum.in.www1.artemis.domain.enumeration.AchievementRank;\n+import de.tum.in.www1.artemis.domain.enumeration.AchievementType;\n+\n+@Entity\n+@Table(name = \"achievement\")\n+@Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)\n+@JsonInclude(JsonInclude.Include.NON_EMPTY)\n+public class Achievement implements Serializable {\n+\n+    @Id\n+    @Column(name = \"id\")\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    private Long id;\n+\n+    @Column(name = \"title\")\n+    private String title;\n+\n+    @Column(name = \"description\")\n+    private String description;\n+\n+    @Column(name = \"icon\")\n+    private String icon;\n+\n+    @Enumerated(EnumType.STRING)\n+    @Column(name = \"`rank`\")\n+    private AchievementRank rank;\n+\n+    @Enumerated(EnumType.STRING)\n+    @Column(name = \"`type`\")", "originalCommit": "786e61b1b217fb61e37f5dc1256ea2e3663d3cdb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQ5MTYxMg==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r499491612", "bodyText": "same as above", "author": "balazs-czopf", "createdAt": "2020-10-05T10:17:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQ1NzA3Ng=="}], "type": "inlineReview", "revised_code": {"commit": "2d87fe70c504d9d9c855d7c0371f19b9bd8c745d", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java b/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java\nindex 4d69ebdcf6a..25ab0a87c9f 100644\n--- a/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java\n+++ b/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java\n", "chunk": "@@ -37,11 +36,11 @@ public class Achievement implements Serializable {\n     private String icon;\n \n     @Enumerated(EnumType.STRING)\n-    @Column(name = \"`rank`\")\n+    @Column(name = \"achievement_rank\")\n     private AchievementRank rank;\n \n     @Enumerated(EnumType.STRING)\n-    @Column(name = \"`type`\")\n+    @Column(name = \"achievement_type\")\n     private AchievementType type;\n \n     @ManyToOne\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQ1NzIzMA==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r499457230", "body": "I would suggest not using SQL keywords for column names. https://www.drupal.org/node/141051\r\n\r\n", "bodyText": "I would suggest not using SQL keywords for column names. https://www.drupal.org/node/141051", "bodyHTML": "<p dir=\"auto\">I would suggest not using SQL keywords for column names. <a href=\"https://www.drupal.org/node/141051\" rel=\"nofollow\">https://www.drupal.org/node/141051</a></p>", "author": "stefanwaldhauser", "createdAt": "2020-10-05T09:20:00Z", "path": "src/main/java/de/tum/in/www1/artemis/domain/Achievement.java", "diffHunk": "@@ -0,0 +1,166 @@\n+package de.tum.in.www1.artemis.domain;\n+\n+import java.io.Serializable;\n+import java.util.HashSet;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import javax.persistence.*;\n+\n+import org.hibernate.annotations.Cache;\n+import org.hibernate.annotations.CacheConcurrencyStrategy;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+\n+import de.tum.in.www1.artemis.domain.enumeration.AchievementRank;\n+import de.tum.in.www1.artemis.domain.enumeration.AchievementType;\n+\n+@Entity\n+@Table(name = \"achievement\")\n+@Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)\n+@JsonInclude(JsonInclude.Include.NON_EMPTY)\n+public class Achievement implements Serializable {\n+\n+    @Id\n+    @Column(name = \"id\")\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    private Long id;\n+\n+    @Column(name = \"title\")\n+    private String title;\n+\n+    @Column(name = \"description\")\n+    private String description;\n+\n+    @Column(name = \"icon\")\n+    private String icon;\n+\n+    @Enumerated(EnumType.STRING)\n+    @Column(name = \"`rank`\")", "originalCommit": "786e61b1b217fb61e37f5dc1256ea2e3663d3cdb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQ5MTUxMw==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r499491513", "bodyText": "I did this just the way we\u00b4re using it in User.java:", "author": "balazs-czopf", "createdAt": "2020-10-05T10:16:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQ1NzIzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQ5MzE4MA==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r499493180", "bodyText": "If I understand the comment correctly, groups was not a keyword when the column was created but added at a later date. This is not the situation here, therefore this workaround is not appropriate imo", "author": "stefanwaldhauser", "createdAt": "2020-10-05T10:20:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQ1NzIzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQ5OTkwMw==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r499499903", "bodyText": "Okay, I\u00b4ll rename the columns \ud83d\ude04", "author": "balazs-czopf", "createdAt": "2020-10-05T10:32:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQ1NzIzMA=="}], "type": "inlineReview", "revised_code": {"commit": "2d87fe70c504d9d9c855d7c0371f19b9bd8c745d", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java b/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java\nindex 4d69ebdcf6a..25ab0a87c9f 100644\n--- a/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java\n+++ b/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java\n", "chunk": "@@ -37,11 +36,11 @@ public class Achievement implements Serializable {\n     private String icon;\n \n     @Enumerated(EnumType.STRING)\n-    @Column(name = \"`rank`\")\n+    @Column(name = \"achievement_rank\")\n     private AchievementRank rank;\n \n     @Enumerated(EnumType.STRING)\n-    @Column(name = \"`type`\")\n+    @Column(name = \"achievement_type\")\n     private AchievementType type;\n \n     @ManyToOne\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQ2MzI2NQ==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r499463265", "body": "I am not certain if this implementation of `equals` and `hashcode` is a good idea, as you are also calling equals and hashcode of other entities.  But I am not an expert so @krusche might help here\r\n\r\nMaybe read through this here https://docs.jboss.org/hibernate/stable/core.old/reference/en/html/persistent-classes-equalshashcode.html.\r\n\r\nIs title a natural key?", "bodyText": "I am not certain if this implementation of equals and hashcode is a good idea, as you are also calling equals and hashcode of other entities.  But I am not an expert so @krusche might help here\nMaybe read through this here https://docs.jboss.org/hibernate/stable/core.old/reference/en/html/persistent-classes-equalshashcode.html.\nIs title a natural key?", "bodyHTML": "<p dir=\"auto\">I am not certain if this implementation of <code>equals</code> and <code>hashcode</code> is a good idea, as you are also calling equals and hashcode of other entities.  But I am not an expert so <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/krusche/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/krusche\">@krusche</a> might help here</p>\n<p dir=\"auto\">Maybe read through this here <a href=\"https://docs.jboss.org/hibernate/stable/core.old/reference/en/html/persistent-classes-equalshashcode.html\" rel=\"nofollow\">https://docs.jboss.org/hibernate/stable/core.old/reference/en/html/persistent-classes-equalshashcode.html</a>.</p>\n<p dir=\"auto\">Is title a natural key?</p>", "author": "stefanwaldhauser", "createdAt": "2020-10-05T09:28:47Z", "path": "src/main/java/de/tum/in/www1/artemis/domain/Achievement.java", "diffHunk": "@@ -0,0 +1,166 @@\n+package de.tum.in.www1.artemis.domain;\n+\n+import java.io.Serializable;\n+import java.util.HashSet;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import javax.persistence.*;\n+\n+import org.hibernate.annotations.Cache;\n+import org.hibernate.annotations.CacheConcurrencyStrategy;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+\n+import de.tum.in.www1.artemis.domain.enumeration.AchievementRank;\n+import de.tum.in.www1.artemis.domain.enumeration.AchievementType;\n+\n+@Entity\n+@Table(name = \"achievement\")\n+@Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)\n+@JsonInclude(JsonInclude.Include.NON_EMPTY)\n+public class Achievement implements Serializable {\n+\n+    @Id\n+    @Column(name = \"id\")\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    private Long id;\n+\n+    @Column(name = \"title\")\n+    private String title;\n+\n+    @Column(name = \"description\")\n+    private String description;\n+\n+    @Column(name = \"icon\")\n+    private String icon;\n+\n+    @Enumerated(EnumType.STRING)\n+    @Column(name = \"`rank`\")\n+    private AchievementRank rank;\n+\n+    @Enumerated(EnumType.STRING)\n+    @Column(name = \"`type`\")\n+    private AchievementType type;\n+\n+    @ManyToOne\n+    private Course course;\n+\n+    @ManyToOne\n+    private Exercise exercise;\n+\n+    @ManyToMany(mappedBy = \"achievements\")\n+    @Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)\n+    @JsonIgnoreProperties({ \"achievements\" })\n+    private Set<User> users = new HashSet<>();\n+\n+    public Achievement() {\n+    }\n+\n+    public Achievement(String title, String description, String icon, AchievementRank rank, AchievementType type, Course course, Exercise exercise) {\n+        this.title = title;\n+        this.description = description;\n+        this.icon = icon;\n+        this.rank = rank;\n+        this.type = type;\n+        this.course = course;\n+        this.exercise = exercise;\n+    }\n+\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    public void setId(Long id) {\n+        this.id = id;\n+    }\n+\n+    public String getTitle() {\n+        return title;\n+    }\n+\n+    public void setTitle(String title) {\n+        this.title = title;\n+    }\n+\n+    public String getDescription() {\n+        return description;\n+    }\n+\n+    public void setDescription(String description) {\n+        this.description = description;\n+    }\n+\n+    public String getIcon() {\n+        return icon;\n+    }\n+\n+    public void setIcon(String icon) {\n+        this.icon = icon;\n+    }\n+\n+    public AchievementRank getRank() {\n+        return rank;\n+    }\n+\n+    public void setRank(AchievementRank rank) {\n+        this.rank = rank;\n+    }\n+\n+    public AchievementType getType() {\n+        return type;\n+    }\n+\n+    public void setType(AchievementType type) {\n+        this.type = type;\n+    }\n+\n+    public Set<User> getUsers() {\n+        return users;\n+    }\n+\n+    public void setUsers(Set<User> users) {\n+        this.users = users;\n+    }\n+\n+    public Course getCourse() {\n+        return course;\n+    }\n+\n+    public void setCourse(Course course) {\n+        this.course = course;\n+    }\n+\n+    public Exercise getExercise() {\n+        return exercise;\n+    }\n+\n+    public void setExercise(Exercise exercise) {\n+        this.exercise = exercise;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"Achievement{\" + \"id=\" + getId() + \", title='\" + getTitle() + \"'\" + \", description='\" + getDescription() + \"'\" + \", icon='\" + getIcon() + \"'\" + \", rank='\"\n+                + getRank() + \"'\" + \", type='\" + getType() + \"'\" + \"}\";\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {", "originalCommit": "786e61b1b217fb61e37f5dc1256ea2e3663d3cdb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTUwMTI2NA==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r499501264", "bodyText": "Removing the functions for now as they are not needed in this PR", "author": "balazs-czopf", "createdAt": "2020-10-05T10:34:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQ2MzI2NQ=="}], "type": "inlineReview", "revised_code": {"commit": "2d87fe70c504d9d9c855d7c0371f19b9bd8c745d", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java b/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java\nindex 4d69ebdcf6a..25ab0a87c9f 100644\n--- a/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java\n+++ b/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java\n", "chunk": "@@ -145,22 +144,4 @@ public class Achievement implements Serializable {\n         return \"Achievement{\" + \"id=\" + getId() + \", title='\" + getTitle() + \"'\" + \", description='\" + getDescription() + \"'\" + \", icon='\" + getIcon() + \"'\" + \", rank='\"\n                 + getRank() + \"'\" + \", type='\" + getType() + \"'\" + \"}\";\n     }\n-\n-    @Override\n-    public boolean equals(Object o) {\n-        if (this == o) {\n-            return true;\n-        }\n-        if (o == null || getClass() != o.getClass()) {\n-            return false;\n-        }\n-        Achievement that = (Achievement) o;\n-        return id.equals(that.id) && title.equals(that.title) && description.equals(that.description) && icon.equals(that.icon) && rank.equals(that.rank) && type.equals(that.type)\n-                && course.equals(that.course);\n-    }\n-\n-    @Override\n-    public int hashCode() {\n-        return Objects.hash(id, title, description, icon, rank, type, course, exercise);\n-    }\n }\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQ2NDE0OQ==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r499464149", "body": "Why is it nullable if false is the default value? That would imply it is never null? You could also set it using liquibase for all already existing courses to false.", "bodyText": "Why is it nullable if false is the default value? That would imply it is never null? You could also set it using liquibase for all already existing courses to false.", "bodyHTML": "<p dir=\"auto\">Why is it nullable if false is the default value? That would imply it is never null? You could also set it using liquibase for all already existing courses to false.</p>", "author": "stefanwaldhauser", "createdAt": "2020-10-05T09:30:07Z", "path": "src/main/java/de/tum/in/www1/artemis/domain/Course.java", "diffHunk": "@@ -102,6 +103,10 @@\n     @Column(name = \"presentation_score\")\n     private Integer presentationScore;\n \n+    @Nullable", "originalCommit": "786e61b1b217fb61e37f5dc1256ea2e3663d3cdb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTUwMDQ4Nw==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r499500487", "bodyText": "Oh yeah, I forgot about that. Removing it now.", "author": "balazs-czopf", "createdAt": "2020-10-05T10:33:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQ2NDE0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "2d87fe70c504d9d9c855d7c0371f19b9bd8c745d", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/domain/Course.java b/src/main/java/de/tum/in/www1/artemis/domain/Course.java\nindex 583482a5f9a..20b417478f8 100644\n--- a/src/main/java/de/tum/in/www1/artemis/domain/Course.java\n+++ b/src/main/java/de/tum/in/www1/artemis/domain/Course.java\n", "chunk": "@@ -103,7 +102,6 @@ public class Course extends DomainObject {\n     @Column(name = \"presentation_score\")\n     private Integer presentationScore;\n \n-    @Nullable\n     @Column(name = \"has_achievements\", columnDefinition = \"Boolean default false\")\n     private Boolean hasAchievements = false; // default value\n \n", "next_change": {"commit": "3198ffe7b3c8590c0745f00f6ef6cb27701301f5", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/domain/Course.java b/src/main/java/de/tum/in/www1/artemis/domain/Course.java\nindex 20b417478f8..cf7315f6fcc 100644\n--- a/src/main/java/de/tum/in/www1/artemis/domain/Course.java\n+++ b/src/main/java/de/tum/in/www1/artemis/domain/Course.java\n", "chunk": "@@ -102,8 +102,8 @@ public class Course extends DomainObject {\n     @Column(name = \"presentation_score\")\n     private Integer presentationScore;\n \n-    @Column(name = \"has_achievements\", columnDefinition = \"Boolean default false\")\n-    private Boolean hasAchievements = false; // default value\n+    @Column(name = \"achievements_enabled\", columnDefinition = \"Boolean default false\")\n+    private Boolean achievementsEnabled = false; // default value\n \n     @OneToMany(mappedBy = \"course\", fetch = FetchType.LAZY)\n     @Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)\n", "next_change": null}]}}]}}, {"oid": "2b13fd64547c4c2d86064c81dc0e1e15e4e58b0e", "url": "https://github.com/ls1intum/Artemis/commit/2b13fd64547c4c2d86064c81dc0e1e15e4e58b0e", "message": "fix codacy again", "committedDate": "2020-10-05T10:12:44Z", "type": "commit"}, {"oid": "9e204099c92da4070f6297f4168820a36bcebe96", "url": "https://github.com/ls1intum/Artemis/commit/9e204099c92da4070f6297f4168820a36bcebe96", "message": "Merge branch 'develop' into feature/achievements/storage", "committedDate": "2020-10-05T10:13:52Z", "type": "commit"}, {"oid": "2d87fe70c504d9d9c855d7c0371f19b9bd8c745d", "url": "https://github.com/ls1intum/Artemis/commit/2d87fe70c504d9d9c855d7c0371f19b9bd8c745d", "message": "remove and update", "committedDate": "2020-10-05T10:35:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTU5NTU3Ng==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r499595576", "body": "We introduced a new superclass for domain classes a few days ago that comes with the benefits of:\r\n- already implementing `Serializable`\r\n- already having an `id` attribute including `getId()` and `setId(Long)`\r\n- already overriding `Object.hashCode()` and `Object.equals(Object)` correctly, based on the id.\r\n\r\nI think it would be a good idea (and with the tests of #2155 almost necessary) to use `DomainObject` here.\r\nThen there are also fewer problems to deal with.\r\n\r\nI just want to mention it here and now already, to avoid confusion and possibly problems later on.\r\n\r\n```suggestion\r\npublic class Achievement extends DomainObject {\r\n```", "bodyText": "We introduced a new superclass for domain classes a few days ago that comes with the benefits of:\n\nalready implementing Serializable\nalready having an id attribute including getId() and setId(Long)\nalready overriding Object.hashCode() and Object.equals(Object) correctly, based on the id.\n\nI think it would be a good idea (and with the tests of #2155 almost necessary) to use DomainObject here.\nThen there are also fewer problems to deal with.\nI just want to mention it here and now already, to avoid confusion and possibly problems later on.\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class Achievement implements Serializable {\n          \n          \n            \n            \n          \n          \n            \n                @Id\n          \n          \n            \n                @Column(name = \"id\")\n          \n          \n            \n                @GeneratedValue(strategy = GenerationType.IDENTITY)\n          \n          \n            \n                private Long id;\n          \n          \n            \n            public class Achievement extends DomainObject {", "bodyHTML": "<p dir=\"auto\">We introduced a new superclass for domain classes a few days ago that comes with the benefits of:</p>\n<ul dir=\"auto\">\n<li>already implementing <code>Serializable</code></li>\n<li>already having an <code>id</code> attribute including <code>getId()</code> and <code>setId(Long)</code></li>\n<li>already overriding <code>Object.hashCode()</code> and <code>Object.equals(Object)</code> correctly, based on the id.</li>\n</ul>\n<p dir=\"auto\">I think it would be a good idea (and with the tests of <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"714621765\" data-permission-text=\"Title is private\" data-url=\"https://github.com/ls1intum/Artemis/issues/2155\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/ls1intum/Artemis/pull/2155/hovercard\" href=\"https://github.com/ls1intum/Artemis/pull/2155\">#2155</a> almost necessary) to use <code>DomainObject</code> here.<br>\nThen there are also fewer problems to deal with.</p>\n<p dir=\"auto\">I just want to mention it here and now already, to avoid confusion and possibly problems later on.</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"><span class=\"pl-k\">public</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">Achievement</span> <span class=\"pl-k\">implements</span> <span class=\"pl-e\">Serializable</span> {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">@Id</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">@Column</span>(<span class=\"pl-c1\">name</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>id<span class=\"pl-pds\">\"</span></span>)</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">@GeneratedValue</span>(<span class=\"pl-c1\">strategy</span> <span class=\"pl-k\">=</span> <span class=\"pl-smi\">GenerationType</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>IDENTITY</span>)</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">private</span> <span class=\"pl-smi\">Long</span> id;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\"><span class=\"pl-k\">public</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">Achievement</span> <span class=\"pl-k\">extends</span> <span class=\"pl-e\">DomainObject</span> {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "MaisiKoleni", "createdAt": "2020-10-05T13:24:42Z", "path": "src/main/java/de/tum/in/www1/artemis/domain/Achievement.java", "diffHunk": "@@ -0,0 +1,147 @@\n+package de.tum.in.www1.artemis.domain;\n+\n+import java.io.Serializable;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import javax.persistence.*;\n+\n+import org.hibernate.annotations.Cache;\n+import org.hibernate.annotations.CacheConcurrencyStrategy;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+\n+import de.tum.in.www1.artemis.domain.enumeration.AchievementRank;\n+import de.tum.in.www1.artemis.domain.enumeration.AchievementType;\n+\n+@Entity\n+@Table(name = \"achievement\")\n+@Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)\n+@JsonInclude(JsonInclude.Include.NON_EMPTY)\n+public class Achievement implements Serializable {\n+\n+    @Id\n+    @Column(name = \"id\")\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    private Long id;", "originalCommit": "2d87fe70c504d9d9c855d7c0371f19b9bd8c745d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTYzODE5NQ==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r499638195", "bodyText": "Awesome, thank you for the hint and explanation \ud83d\udc4d\nApplied the changes as suggested", "author": "balazs-czopf", "createdAt": "2020-10-05T14:24:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTU5NTU3Ng=="}], "type": "inlineReview", "revised_code": {"commit": "59f1e61538f3768d7b7e66eb614337d27d805321", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java b/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java\nindex 25ab0a87c9f..192b40c974f 100644\n--- a/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java\n+++ b/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java\n", "chunk": "@@ -19,12 +19,7 @@ import de.tum.in.www1.artemis.domain.enumeration.AchievementType;\n @Table(name = \"achievement\")\n @Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)\n @JsonInclude(JsonInclude.Include.NON_EMPTY)\n-public class Achievement implements Serializable {\n-\n-    @Id\n-    @Column(name = \"id\")\n-    @GeneratedValue(strategy = GenerationType.IDENTITY)\n-    private Long id;\n+public class Achievement extends DomainObject {\n \n     @Column(name = \"title\")\n     private String title;\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTU5NTkyNg==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r499595926", "body": "See comment above.\r\n\r\n```suggestion\r\n```", "bodyText": "See comment above.\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \n          \n          \n            \n                public Long getId() {\n          \n          \n            \n                    return id;\n          \n          \n            \n                }\n          \n          \n            \n            \n          \n          \n            \n                public void setId(Long id) {\n          \n          \n            \n                    this.id = id;\n          \n          \n            \n                }", "bodyHTML": "<p dir=\"auto\">See comment above.</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">public</span> <span class=\"pl-smi\">Long</span> getId() {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">return</span> id;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">public</span> <span class=\"pl-k\">void</span> setId(<span class=\"pl-smi\">Long</span> id) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-c1\">this</span><span class=\"pl-k\">.</span>id <span class=\"pl-k\">=</span> id;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    }</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "MaisiKoleni", "createdAt": "2020-10-05T13:25:13Z", "path": "src/main/java/de/tum/in/www1/artemis/domain/Achievement.java", "diffHunk": "@@ -0,0 +1,147 @@\n+package de.tum.in.www1.artemis.domain;\n+\n+import java.io.Serializable;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import javax.persistence.*;\n+\n+import org.hibernate.annotations.Cache;\n+import org.hibernate.annotations.CacheConcurrencyStrategy;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+\n+import de.tum.in.www1.artemis.domain.enumeration.AchievementRank;\n+import de.tum.in.www1.artemis.domain.enumeration.AchievementType;\n+\n+@Entity\n+@Table(name = \"achievement\")\n+@Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)\n+@JsonInclude(JsonInclude.Include.NON_EMPTY)\n+public class Achievement implements Serializable {\n+\n+    @Id\n+    @Column(name = \"id\")\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    private Long id;\n+\n+    @Column(name = \"title\")\n+    private String title;\n+\n+    @Column(name = \"description\")\n+    private String description;\n+\n+    @Column(name = \"icon\")\n+    private String icon;\n+\n+    @Enumerated(EnumType.STRING)\n+    @Column(name = \"achievement_rank\")\n+    private AchievementRank rank;\n+\n+    @Enumerated(EnumType.STRING)\n+    @Column(name = \"achievement_type\")\n+    private AchievementType type;\n+\n+    @ManyToOne\n+    private Course course;\n+\n+    @ManyToOne\n+    private Exercise exercise;\n+\n+    @ManyToMany(mappedBy = \"achievements\")\n+    @Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)\n+    @JsonIgnoreProperties({ \"achievements\" })\n+    private Set<User> users = new HashSet<>();\n+\n+    public Achievement() {\n+    }\n+\n+    public Achievement(String title, String description, String icon, AchievementRank rank, AchievementType type, Course course, Exercise exercise) {\n+        this.title = title;\n+        this.description = description;\n+        this.icon = icon;\n+        this.rank = rank;\n+        this.type = type;\n+        this.course = course;\n+        this.exercise = exercise;\n+    }\n+\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    public void setId(Long id) {\n+        this.id = id;\n+    }", "originalCommit": "2d87fe70c504d9d9c855d7c0371f19b9bd8c745d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a616036218e566ee1e309966c4cd89c4f8b5b7f0", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java b/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java\nindex 25ab0a87c9f..b75b4f92392 100644\n--- a/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java\n+++ b/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java\n", "chunk": "@@ -67,14 +62,6 @@ public class Achievement implements Serializable {\n         this.exercise = exercise;\n     }\n \n-    public Long getId() {\n-        return id;\n-    }\n-\n-    public void setId(Long id) {\n-        this.id = id;\n-    }\n-\n     public String getTitle() {\n         return title;\n     }\n", "next_change": null}]}}, {"oid": "59f1e61538f3768d7b7e66eb614337d27d805321", "url": "https://github.com/ls1intum/Artemis/commit/59f1e61538f3768d7b7e66eb614337d27d805321", "message": "replace serializable with domainobject\n\nCo-authored-by: Christian Femers <c.femers@tum.de>", "committedDate": "2020-10-05T14:21:30Z", "type": "commit"}, {"oid": "a616036218e566ee1e309966c4cd89c4f8b5b7f0", "url": "https://github.com/ls1intum/Artemis/commit/a616036218e566ee1e309966c4cd89c4f8b5b7f0", "message": "remove getter and setter for id\n\nCo-authored-by: Christian Femers <c.femers@tum.de>", "committedDate": "2020-10-05T14:22:01Z", "type": "commit"}, {"oid": "2bbb0ecd89c40edcf360b83fa3b864cb9f329e6d", "url": "https://github.com/ls1intum/Artemis/commit/2bbb0ecd89c40edcf360b83fa3b864cb9f329e6d", "message": "fix changelog", "committedDate": "2020-10-05T14:40:31Z", "type": "commit"}, {"oid": "93ae455b025de7b1343fd226822a7082511bc7fa", "url": "https://github.com/ls1intum/Artemis/commit/93ae455b025de7b1343fd226822a7082511bc7fa", "message": "Merge branch 'develop' into feature/achievements/storage", "committedDate": "2020-10-05T18:08:00Z", "type": "commit"}, {"oid": "d11204e7243c0a60e8f82d1dcb920a4a43ac7bd8", "url": "https://github.com/ls1intum/Artemis/commit/d11204e7243c0a60e8f82d1dcb920a4a43ac7bd8", "message": "move changelog.xml", "committedDate": "2020-10-05T19:49:31Z", "type": "commit"}, {"oid": "7ad134de34257e969783f6450f2f3690a7c0a59a", "url": "https://github.com/ls1intum/Artemis/commit/7ad134de34257e969783f6450f2f3690a7c0a59a", "message": "try nullable", "committedDate": "2020-10-05T20:19:26Z", "type": "commit"}, {"oid": "03f892a98b61e11da27c5072e17ae52eaf07db72", "url": "https://github.com/ls1intum/Artemis/commit/03f892a98b61e11da27c5072e17ae52eaf07db72", "message": "remove unused import", "committedDate": "2020-10-05T20:23:16Z", "type": "commit"}, {"oid": "abd6b740eef2c879229969643c12f7e79abd1970", "url": "https://github.com/ls1intum/Artemis/commit/abd6b740eef2c879229969643c12f7e79abd1970", "message": "remove nullable", "committedDate": "2020-10-05T20:50:12Z", "type": "commit"}, {"oid": "39f18fde4dfafea42fec7c2bd2edf098dc76ba12", "url": "https://github.com/ls1intum/Artemis/commit/39f18fde4dfafea42fec7c2bd2edf098dc76ba12", "message": "try jsonignore", "committedDate": "2020-10-05T21:17:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTkwNDE5Mg==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r499904192", "body": "If I see it correctly, this is used for all exercise types. To reduce code duplication you could extract this into `ExerciseService.java` :)", "bodyText": "If I see it correctly, this is used for all exercise types. To reduce code duplication you could extract this into ExerciseService.java :)", "bodyHTML": "<p dir=\"auto\">If I see it correctly, this is used for all exercise types. To reduce code duplication you could extract this into <code>ExerciseService.java</code> :)</p>", "author": "fde312", "createdAt": "2020-10-05T22:21:36Z", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/FileUploadExerciseResource.java", "diffHunk": "@@ -106,6 +110,11 @@ public FileUploadExerciseResource(FileUploadExerciseService fileUploadExerciseSe\n \n         FileUploadExercise result = fileUploadExerciseRepository.save(fileUploadExercise);\n \n+        // Generate achievements if enabled in course and exercise not part of exam\n+        if (course.getHasAchievements() && (result.getExerciseGroup() == null || result.getExerciseGroup().getExam() == null)) {", "originalCommit": "39f18fde4dfafea42fec7c2bd2edf098dc76ba12", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTkyMjAwNw==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r499922007", "bodyText": "yeah, makes sense :) thanks", "author": "balazs-czopf", "createdAt": "2020-10-05T23:16:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTkwNDE5Mg=="}], "type": "inlineReview", "revised_code": {"commit": "719a46d7fd1e520b77bb96ef30efe4d29582c872", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/web/rest/FileUploadExerciseResource.java b/src/main/java/de/tum/in/www1/artemis/web/rest/FileUploadExerciseResource.java\nindex c8ee275cd8c..dabb3fe30b8 100644\n--- a/src/main/java/de/tum/in/www1/artemis/web/rest/FileUploadExerciseResource.java\n+++ b/src/main/java/de/tum/in/www1/artemis/web/rest/FileUploadExerciseResource.java\n", "chunk": "@@ -111,9 +111,7 @@ public class FileUploadExerciseResource {\n         FileUploadExercise result = fileUploadExerciseRepository.save(fileUploadExercise);\n \n         // Generate achievements if enabled in course and exercise not part of exam\n-        if (course.getHasAchievements() && (result.getExerciseGroup() == null || result.getExerciseGroup().getExam() == null)) {\n-            achievementService.generateForExercise(result);\n-        }\n+        exerciseService.generateAchievementsIfEnabledInCourse(course, result);\n \n         // Only notify tutors when the exercise is created for a course\n         if (fileUploadExercise.hasCourse()) {\n", "next_change": {"commit": "4f9400ee05f1f5802745ebdbac3d497f8debe2f2", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/web/rest/FileUploadExerciseResource.java b/src/main/java/de/tum/in/www1/artemis/web/rest/FileUploadExerciseResource.java\nindex dabb3fe30b8..c6100a0b1bc 100644\n--- a/src/main/java/de/tum/in/www1/artemis/web/rest/FileUploadExerciseResource.java\n+++ b/src/main/java/de/tum/in/www1/artemis/web/rest/FileUploadExerciseResource.java\n", "chunk": "@@ -111,7 +111,7 @@ public class FileUploadExerciseResource {\n         FileUploadExercise result = fileUploadExerciseRepository.save(fileUploadExercise);\n \n         // Generate achievements if enabled in course and exercise not part of exam\n-        exerciseService.generateAchievementsIfEnabledInCourse(course, result);\n+        achievementService.generateForExercise(course, result);\n \n         // Only notify tutors when the exercise is created for a course\n         if (fileUploadExercise.hasCourse()) {\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTkxNjE2Nw==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r499916167", "body": "I think you can remove the Transactional here when you just fetch the achievements for the users in the `findAllByCourseId`", "bodyText": "I think you can remove the Transactional here when you just fetch the achievements for the users in the findAllByCourseId", "bodyHTML": "<p dir=\"auto\">I think you can remove the Transactional here when you just fetch the achievements for the users in the <code>findAllByCourseId</code></p>", "author": "fde312", "createdAt": "2020-10-05T22:57:52Z", "path": "src/main/java/de/tum/in/www1/artemis/service/AchievementService.java", "diffHunk": "@@ -0,0 +1,118 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import java.util.Set;\n+\n+import javax.transaction.Transactional;\n+\n+import org.springframework.stereotype.Service;\n+\n+import de.tum.in.www1.artemis.domain.Achievement;\n+import de.tum.in.www1.artemis.domain.Course;\n+import de.tum.in.www1.artemis.domain.Exercise;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.repository.AchievementRepository;\n+import de.tum.in.www1.artemis.repository.UserRepository;\n+\n+@Service\n+public class AchievementService {\n+\n+    private final PointBasedAchievementService pointBasedAchievementService;\n+\n+    private final TimeBasedAchievementService timeBasedAchievementService;\n+\n+    private final ProgressBasedAchievementService progressBasedAchievementService;\n+\n+    private final AchievementRepository achievementRepository;\n+\n+    private final UserRepository userRepository;\n+\n+    public AchievementService(AchievementRepository achievementRepository, UserRepository userRepository, PointBasedAchievementService pointBasedAchievementService,\n+            TimeBasedAchievementService timeBasedAchievementService, ProgressBasedAchievementService progressBasedAchievementService) {\n+        this.achievementRepository = achievementRepository;\n+        this.pointBasedAchievementService = pointBasedAchievementService;\n+        this.timeBasedAchievementService = timeBasedAchievementService;\n+        this.progressBasedAchievementService = progressBasedAchievementService;\n+        this.userRepository = userRepository;\n+    }\n+\n+    /**\n+     * Finds all achievements for a user in a given course and returns them as a set\n+     * @param userId\n+     * @param courseId\n+     * @return set of achievements\n+     */\n+    public Set<Achievement> findAllByUserIdAndCourseId(Long userId, Long courseId) {\n+        return achievementRepository.findAllByUserIdAndCourseId(userId, courseId);\n+    }\n+\n+    /**\n+     * Deletes all achievements that belong to the course with the given courseId\n+     * Used when a course is deleted or when achievements are disabled again for a course\n+     * @param courseId\n+     */\n+    @Transactional\n+    public void deleteByCourseId(Long courseId) {", "originalCommit": "39f18fde4dfafea42fec7c2bd2edf098dc76ba12", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTkyMjE2MQ==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r499922161", "bodyText": "also true, thanks for the advice :)", "author": "balazs-czopf", "createdAt": "2020-10-05T23:16:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTkxNjE2Nw=="}], "type": "inlineReview", "revised_code": {"commit": "719a46d7fd1e520b77bb96ef30efe4d29582c872", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\nindex fe171145c30..0746a91da62 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n", "chunk": "@@ -50,7 +48,6 @@ public class AchievementService {\n      * Used when a course is deleted or when achievements are disabled again for a course\n      * @param courseId\n      */\n-    @Transactional\n     public void deleteByCourseId(Long courseId) {\n         Set<Achievement> achievements = achievementRepository.findAllByCourseId(courseId);\n         for (Achievement achievement : achievements) {\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTkxNjYzNg==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r499916636", "body": "For my comment in the delete call:\r\n\r\n```suggestion\r\n    @Query(\"SELECT a FROM Achievement a LEFT JOIN FETCH a.users u LEFT JOIN FETCH u.achievements WHERE a.course.id = :#{#courseId}\")\r\n```", "bodyText": "For my comment in the delete call:\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Query(\"SELECT a FROM Achievement a LEFT JOIN FETCH a.users WHERE a.course.id = :#{#courseId}\")\n          \n          \n            \n                @Query(\"SELECT a FROM Achievement a LEFT JOIN FETCH a.users u LEFT JOIN FETCH u.achievements WHERE a.course.id = :#{#courseId}\")", "bodyHTML": "<p dir=\"auto\">For my comment in the delete call:</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">@Query</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>SELECT a FROM Achievement a LEFT JOIN FETCH a.users WHERE a.course.id = :#{#courseId}<span class=\"pl-pds\">\"</span></span>)</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">@Query</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>SELECT a FROM Achievement a LEFT JOIN FETCH a.users <span class=\"x x-first x-last\">u LEFT JOIN FETCH u.achievements </span>WHERE a.course.id = :#{#courseId}<span class=\"pl-pds\">\"</span></span>)</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "fde312", "createdAt": "2020-10-05T22:59:27Z", "path": "src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java", "diffHunk": "@@ -0,0 +1,26 @@\n+package de.tum.in.www1.artemis.repository;\n+\n+import java.util.Set;\n+\n+import org.springframework.data.jpa.repository.JpaRepository;\n+import org.springframework.data.jpa.repository.Query;\n+import org.springframework.data.repository.query.Param;\n+import org.springframework.stereotype.Repository;\n+\n+import de.tum.in.www1.artemis.domain.Achievement;\n+\n+/**\n+ * Spring Data JPA repository for the Achievement entity.\n+ */\n+@Repository\n+public interface AchievementRepository extends JpaRepository<Achievement, Long> {\n+\n+    @Query(\"SELECT a FROM Achievement a LEFT JOIN FETCH a.users WHERE a.course.id = :#{#courseId}\")", "originalCommit": "39f18fde4dfafea42fec7c2bd2edf098dc76ba12", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "719a46d7fd1e520b77bb96ef30efe4d29582c872", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java b/src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java\nindex 815fa227377..137e2893791 100644\n--- a/src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java\n+++ b/src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java\n", "chunk": "@@ -15,10 +15,10 @@ import de.tum.in.www1.artemis.domain.Achievement;\n @Repository\n public interface AchievementRepository extends JpaRepository<Achievement, Long> {\n \n-    @Query(\"SELECT a FROM Achievement a LEFT JOIN FETCH a.users WHERE a.course.id = :#{#courseId}\")\n+    @Query(\"SELECT a FROM Achievement a LEFT JOIN FETCH a.users u LEFT JOIN FETCH u.achievements WHERE a.course.id = :#{#courseId}\")\n     Set<Achievement> findAllByCourseId(@Param(\"courseId\") Long courseId);\n \n-    @Query(\"SELECT a FROM Achievement a LEFT JOIN FETCH a.users WHERE a.exercise.id = :#{#exerciseId}\")\n+    @Query(\"SELECT a FROM Achievement a LEFT JOIN FETCH a.users u LEFT JOIN FETCH u.achievements WHERE a.exercise.id = :#{#exerciseId}\")\n     Set<Achievement> findAllByExerciseId(@Param(\"exerciseId\") Long exerciseId);\n \n     @Query(\"SELECT a FROM Achievement a JOIN a.users u WHERE u.id = :#{#userId} AND a.course.id = :#{#courseId}\")\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTkxNjc4Nw==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r499916787", "body": "Same as above :)", "bodyText": "Same as above :)", "bodyHTML": "<p dir=\"auto\">Same as above :)</p>", "author": "fde312", "createdAt": "2020-10-05T22:59:54Z", "path": "src/main/java/de/tum/in/www1/artemis/service/AchievementService.java", "diffHunk": "@@ -0,0 +1,118 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import java.util.Set;\n+\n+import javax.transaction.Transactional;\n+\n+import org.springframework.stereotype.Service;\n+\n+import de.tum.in.www1.artemis.domain.Achievement;\n+import de.tum.in.www1.artemis.domain.Course;\n+import de.tum.in.www1.artemis.domain.Exercise;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.repository.AchievementRepository;\n+import de.tum.in.www1.artemis.repository.UserRepository;\n+\n+@Service\n+public class AchievementService {\n+\n+    private final PointBasedAchievementService pointBasedAchievementService;\n+\n+    private final TimeBasedAchievementService timeBasedAchievementService;\n+\n+    private final ProgressBasedAchievementService progressBasedAchievementService;\n+\n+    private final AchievementRepository achievementRepository;\n+\n+    private final UserRepository userRepository;\n+\n+    public AchievementService(AchievementRepository achievementRepository, UserRepository userRepository, PointBasedAchievementService pointBasedAchievementService,\n+            TimeBasedAchievementService timeBasedAchievementService, ProgressBasedAchievementService progressBasedAchievementService) {\n+        this.achievementRepository = achievementRepository;\n+        this.pointBasedAchievementService = pointBasedAchievementService;\n+        this.timeBasedAchievementService = timeBasedAchievementService;\n+        this.progressBasedAchievementService = progressBasedAchievementService;\n+        this.userRepository = userRepository;\n+    }\n+\n+    /**\n+     * Finds all achievements for a user in a given course and returns them as a set\n+     * @param userId\n+     * @param courseId\n+     * @return set of achievements\n+     */\n+    public Set<Achievement> findAllByUserIdAndCourseId(Long userId, Long courseId) {\n+        return achievementRepository.findAllByUserIdAndCourseId(userId, courseId);\n+    }\n+\n+    /**\n+     * Deletes all achievements that belong to the course with the given courseId\n+     * Used when a course is deleted or when achievements are disabled again for a course\n+     * @param courseId\n+     */\n+    @Transactional\n+    public void deleteByCourseId(Long courseId) {\n+        Set<Achievement> achievements = achievementRepository.findAllByCourseId(courseId);\n+        for (Achievement achievement : achievements) {\n+            removeFromUsers(achievement);\n+        }\n+        achievementRepository.deleteAll(achievements);\n+    }\n+\n+    /**\n+     * Deletes all achievements that belong to the exercise with the given exerciseId\n+     * Used when an exercise is deleted\n+     * @param exerciseId\n+     */\n+    @Transactional\n+    public void deleteByExerciseId(Long exerciseId) {", "originalCommit": "39f18fde4dfafea42fec7c2bd2edf098dc76ba12", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "719a46d7fd1e520b77bb96ef30efe4d29582c872", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\nindex fe171145c30..0746a91da62 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n", "chunk": "@@ -64,7 +61,6 @@ public class AchievementService {\n      * Used when an exercise is deleted\n      * @param exerciseId\n      */\n-    @Transactional\n     public void deleteByExerciseId(Long exerciseId) {\n         Set<Achievement> achievements = achievementRepository.findAllByExerciseId(exerciseId);\n         for (Achievement achievement : achievements) {\n", "next_change": null}]}}, {"oid": "719a46d7fd1e520b77bb96ef30efe4d29582c872", "url": "https://github.com/ls1intum/Artemis/commit/719a46d7fd1e520b77bb96ef30efe4d29582c872", "message": "code quality improvement", "committedDate": "2020-10-05T23:16:05Z", "type": "commit"}, {"oid": "4f9400ee05f1f5802745ebdbac3d497f8debe2f2", "url": "https://github.com/ls1intum/Artemis/commit/4f9400ee05f1f5802745ebdbac3d497f8debe2f2", "message": "refactor", "committedDate": "2020-10-06T06:56:00Z", "type": "commit"}, {"oid": "00ec5a4f4dc7f9eeeb161db5cd1c2f7e1a402c6b", "url": "https://github.com/ls1intum/Artemis/commit/00ec5a4f4dc7f9eeeb161db5cd1c2f7e1a402c6b", "message": "adjust test as well", "committedDate": "2020-10-06T06:59:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY0MzA3OA==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r500643078", "body": "Is this attribute set when the course is created by the instructor? If this is the case I would rename it to something like `achievementsEnabled`.", "bodyText": "Is this attribute set when the course is created by the instructor? If this is the case I would rename it to something like achievementsEnabled.", "bodyHTML": "<p dir=\"auto\">Is this attribute set when the course is created by the instructor? If this is the case I would rename it to something like <code>achievementsEnabled</code>.</p>", "author": "kloessst", "createdAt": "2020-10-06T23:00:15Z", "path": "src/main/java/de/tum/in/www1/artemis/domain/Course.java", "diffHunk": "@@ -102,6 +102,9 @@\n     @Column(name = \"presentation_score\")\n     private Integer presentationScore;\n \n+    @Column(name = \"has_achievements\", columnDefinition = \"Boolean default false\")\n+    private Boolean hasAchievements = false; // default value", "originalCommit": "00ec5a4f4dc7f9eeeb161db5cd1c2f7e1a402c6b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgwNzExNA==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r500807114", "bodyText": "Yes, it is. Renaming it then.", "author": "balazs-czopf", "createdAt": "2020-10-07T07:50:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY0MzA3OA=="}], "type": "inlineReview", "revised_code": {"commit": "3198ffe7b3c8590c0745f00f6ef6cb27701301f5", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/domain/Course.java b/src/main/java/de/tum/in/www1/artemis/domain/Course.java\nindex 20b417478f8..cf7315f6fcc 100644\n--- a/src/main/java/de/tum/in/www1/artemis/domain/Course.java\n+++ b/src/main/java/de/tum/in/www1/artemis/domain/Course.java\n", "chunk": "@@ -102,8 +102,8 @@ public class Course extends DomainObject {\n     @Column(name = \"presentation_score\")\n     private Integer presentationScore;\n \n-    @Column(name = \"has_achievements\", columnDefinition = \"Boolean default false\")\n-    private Boolean hasAchievements = false; // default value\n+    @Column(name = \"achievements_enabled\", columnDefinition = \"Boolean default false\")\n+    private Boolean achievementsEnabled = false; // default value\n \n     @OneToMany(mappedBy = \"course\", fetch = FetchType.LAZY)\n     @Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY0NDg4Nw==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r500644887", "body": "You could use `exercise.hasExerciseGroup()` to check for exam exercises.", "bodyText": "You could use exercise.hasExerciseGroup() to check for exam exercises.", "bodyHTML": "<p dir=\"auto\">You could use <code>exercise.hasExerciseGroup()</code> to check for exam exercises.</p>", "author": "kloessst", "createdAt": "2020-10-06T23:06:21Z", "path": "src/main/java/de/tum/in/www1/artemis/service/AchievementService.java", "diffHunk": "@@ -0,0 +1,118 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import java.util.Set;\n+\n+import org.springframework.stereotype.Service;\n+\n+import de.tum.in.www1.artemis.domain.Achievement;\n+import de.tum.in.www1.artemis.domain.Course;\n+import de.tum.in.www1.artemis.domain.Exercise;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.repository.AchievementRepository;\n+import de.tum.in.www1.artemis.repository.UserRepository;\n+\n+@Service\n+public class AchievementService {\n+\n+    private final PointBasedAchievementService pointBasedAchievementService;\n+\n+    private final TimeBasedAchievementService timeBasedAchievementService;\n+\n+    private final ProgressBasedAchievementService progressBasedAchievementService;\n+\n+    private final AchievementRepository achievementRepository;\n+\n+    private final UserRepository userRepository;\n+\n+    public AchievementService(AchievementRepository achievementRepository, UserRepository userRepository, PointBasedAchievementService pointBasedAchievementService,\n+            TimeBasedAchievementService timeBasedAchievementService, ProgressBasedAchievementService progressBasedAchievementService) {\n+        this.achievementRepository = achievementRepository;\n+        this.pointBasedAchievementService = pointBasedAchievementService;\n+        this.timeBasedAchievementService = timeBasedAchievementService;\n+        this.progressBasedAchievementService = progressBasedAchievementService;\n+        this.userRepository = userRepository;\n+    }\n+\n+    /**\n+     * Finds all achievements for a user in a given course and returns them as a set\n+     * @param userId\n+     * @param courseId\n+     * @return set of achievements\n+     */\n+    public Set<Achievement> findAllByUserIdAndCourseId(Long userId, Long courseId) {\n+        return achievementRepository.findAllByUserIdAndCourseId(userId, courseId);\n+    }\n+\n+    /**\n+     * Deletes all achievements that belong to the course with the given courseId\n+     * Used when a course is deleted or when achievements are disabled again for a course\n+     * @param courseId\n+     */\n+    public void deleteByCourseId(Long courseId) {\n+        Set<Achievement> achievements = achievementRepository.findAllByCourseId(courseId);\n+        for (Achievement achievement : achievements) {\n+            removeFromUsers(achievement);\n+        }\n+        achievementRepository.deleteAll(achievements);\n+    }\n+\n+    /**\n+     * Deletes all achievements that belong to the exercise with the given exerciseId\n+     * Used when an exercise is deleted\n+     * @param exerciseId\n+     */\n+    public void deleteByExerciseId(Long exerciseId) {\n+        Set<Achievement> achievements = achievementRepository.findAllByExerciseId(exerciseId);\n+        for (Achievement achievement : achievements) {\n+            removeFromUsers(achievement);\n+        }\n+        achievementRepository.deleteAll(achievements);\n+    }\n+\n+    /**\n+     * Removes an achievement from all users\n+     * @param achievement achievement to be deleted\n+     */\n+    public void removeFromUsers(Achievement achievement) {\n+        var users = achievement.getUsers();\n+        for (User user : users) {\n+            user.removeAchievement(achievement);\n+        }\n+        userRepository.saveAll(users);\n+    }\n+\n+    /**\n+     * Generates achievements for a course\n+     * Used when course is updated or created and achievements are enabled for course\n+     * @param course\n+     */\n+    public void generateForCourse(Course course) {\n+        progressBasedAchievementService.generateAchievements(course);\n+    }\n+\n+    /**\n+     * Generates achievements for an exercise\n+     * If achievements are enabled for corresponding course and exercise is not part of exam\n+     * Used when exercise is created\n+     * @param course\n+     * @param exercise\n+     */\n+    public void generateForExercise(Course course, Exercise exercise) {\n+        if (course.getHasAchievements() && (exercise.getExerciseGroup() == null || exercise.getExerciseGroup().getExam() == null)) {", "originalCommit": "00ec5a4f4dc7f9eeeb161db5cd1c2f7e1a402c6b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgwNzc3NA==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r500807774", "bodyText": "If that is sufficient, sure.", "author": "balazs-czopf", "createdAt": "2020-10-07T07:51:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY0NDg4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "3198ffe7b3c8590c0745f00f6ef6cb27701301f5", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\nindex 52da07c7236..5d1c94097f5 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n", "chunk": "@@ -98,7 +98,7 @@ public class AchievementService {\n      * @param exercise\n      */\n     public void generateForExercise(Course course, Exercise exercise) {\n-        if (course.getHasAchievements() && (exercise.getExerciseGroup() == null || exercise.getExerciseGroup().getExam() == null)) {\n+        if (course.getAchievementsEnabled() && exercise.getExerciseGroup() == null) {\n             pointBasedAchievementService.generateAchievements(exercise);\n             timeBasedAchievementService.generateAchievements(exercise);\n         }\n", "next_change": null}]}}, {"oid": "9d35863fc9176959b6e549ea62985f2c3b5d2cef", "url": "https://github.com/ls1intum/Artemis/commit/9d35863fc9176959b6e549ea62985f2c3b5d2cef", "message": "Merge branch 'develop' into feature/achievements/storage", "committedDate": "2020-10-07T07:44:56Z", "type": "commit"}, {"oid": "3198ffe7b3c8590c0745f00f6ef6cb27701301f5", "url": "https://github.com/ls1intum/Artemis/commit/3198ffe7b3c8590c0745f00f6ef6cb27701301f5", "message": "integrate review suggestions", "committedDate": "2020-10-07T08:01:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgxNzUwNA==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r500817504", "body": "Codacy found an issue: [Missing a Javadoc comment.](https://app.codacy.com/gh/ls1intum/Artemis/pullRequest?prid=5993908)", "bodyText": "Codacy found an issue: Missing a Javadoc comment.", "bodyHTML": "<p dir=\"auto\">Codacy found an issue: <a href=\"https://app.codacy.com/gh/ls1intum/Artemis/pullRequest?prid=5993908\" rel=\"nofollow\">Missing a Javadoc comment.</a></p>", "author": "artemis-bot", "createdAt": "2020-10-07T08:07:59Z", "path": "src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java", "diffHunk": "@@ -0,0 +1,134 @@\n+package de.tum.in.www1.artemis;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import de.tum.in.www1.artemis.domain.*;\n+import de.tum.in.www1.artemis.repository.AchievementRepository;\n+import de.tum.in.www1.artemis.repository.CourseRepository;\n+import de.tum.in.www1.artemis.repository.ParticipationRepository;\n+import de.tum.in.www1.artemis.repository.UserRepository;\n+import de.tum.in.www1.artemis.service.AchievementService;\n+import de.tum.in.www1.artemis.service.CourseService;\n+import de.tum.in.www1.artemis.util.DatabaseUtilService;\n+import de.tum.in.www1.artemis.util.RequestUtilService;\n+\n+public class AchievementIntegrationTest extends AbstractSpringIntegrationBambooBitbucketJiraTest {\n+\n+    @Autowired\n+    DatabaseUtilService database;\n+\n+    @Autowired\n+    RequestUtilService request;\n+\n+    @Autowired\n+    AchievementService achievementService;\n+\n+    @Autowired\n+    CourseService courseService;\n+\n+    @Autowired\n+    UserRepository userRepository;\n+\n+    @Autowired\n+    AchievementRepository achievementRepository;\n+\n+    @Autowired\n+    CourseRepository courseRepository;\n+\n+    @Autowired\n+    ParticipationRepository participationRepository;\n+\n+    private User student;\n+\n+    private User instructor;\n+\n+    private Course firstCourse;\n+\n+    private Course secondCourse;\n+\n+    private Exercise firstExercise;\n+\n+    @BeforeEach\n+    public void initTestCase() {\n+        var users = database.addUsers(1, 0, 1);\n+        student = users.get(0);\n+        instructor = users.get(1);\n+        instructor.setGroups(new HashSet<>(Arrays.asList(\"instructor\")));\n+        firstCourse = database.addCourseWithModelingAndTextAndFileUploadExercise();\n+        firstCourse.setAchievementsEnabled(true);\n+        courseRepository.save(firstCourse);\n+        secondCourse = database.addCourseWithModelingAndTextAndFileUploadExercise();\n+        firstExercise = firstCourse.getExercises().stream().findFirst().get();\n+\n+        achievementService.generateForCourse(firstCourse);\n+        achievementService.generateForCourse(secondCourse);\n+        achievementService.generateForExercise(firstCourse, firstExercise);\n+    }\n+\n+    @AfterEach\n+    public void resetDatabase() {\n+        database.resetDatabase();\n+    }\n+\n+    @Test", "originalCommit": "3198ffe7b3c8590c0745f00f6ef6cb27701301f5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgxNzUxMA==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r500817510", "body": "Codacy found an issue: [Missing a Javadoc comment.](https://app.codacy.com/gh/ls1intum/Artemis/pullRequest?prid=5993908)", "bodyText": "Codacy found an issue: Missing a Javadoc comment.", "bodyHTML": "<p dir=\"auto\">Codacy found an issue: <a href=\"https://app.codacy.com/gh/ls1intum/Artemis/pullRequest?prid=5993908\" rel=\"nofollow\">Missing a Javadoc comment.</a></p>", "author": "artemis-bot", "createdAt": "2020-10-07T08:08:00Z", "path": "src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java", "diffHunk": "@@ -0,0 +1,134 @@\n+package de.tum.in.www1.artemis;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import de.tum.in.www1.artemis.domain.*;\n+import de.tum.in.www1.artemis.repository.AchievementRepository;\n+import de.tum.in.www1.artemis.repository.CourseRepository;\n+import de.tum.in.www1.artemis.repository.ParticipationRepository;\n+import de.tum.in.www1.artemis.repository.UserRepository;\n+import de.tum.in.www1.artemis.service.AchievementService;\n+import de.tum.in.www1.artemis.service.CourseService;\n+import de.tum.in.www1.artemis.util.DatabaseUtilService;\n+import de.tum.in.www1.artemis.util.RequestUtilService;\n+\n+public class AchievementIntegrationTest extends AbstractSpringIntegrationBambooBitbucketJiraTest {\n+\n+    @Autowired\n+    DatabaseUtilService database;\n+\n+    @Autowired\n+    RequestUtilService request;\n+\n+    @Autowired\n+    AchievementService achievementService;\n+\n+    @Autowired\n+    CourseService courseService;\n+\n+    @Autowired\n+    UserRepository userRepository;\n+\n+    @Autowired\n+    AchievementRepository achievementRepository;\n+\n+    @Autowired\n+    CourseRepository courseRepository;\n+\n+    @Autowired\n+    ParticipationRepository participationRepository;\n+\n+    private User student;\n+\n+    private User instructor;\n+\n+    private Course firstCourse;\n+\n+    private Course secondCourse;\n+\n+    private Exercise firstExercise;\n+\n+    @BeforeEach", "originalCommit": "3198ffe7b3c8590c0745f00f6ef6cb27701301f5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgxNzUxNQ==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r500817515", "body": "Codacy found an issue: [Document empty constructor](https://app.codacy.com/gh/ls1intum/Artemis/pullRequest?prid=5993908)", "bodyText": "Codacy found an issue: Document empty constructor", "bodyHTML": "<p dir=\"auto\">Codacy found an issue: <a href=\"https://app.codacy.com/gh/ls1intum/Artemis/pullRequest?prid=5993908\" rel=\"nofollow\">Document empty constructor</a></p>", "author": "artemis-bot", "createdAt": "2020-10-07T08:08:00Z", "path": "src/main/java/de/tum/in/www1/artemis/domain/Achievement.java", "diffHunk": "@@ -0,0 +1,133 @@\n+package de.tum.in.www1.artemis.domain;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import javax.persistence.*;\n+\n+import org.hibernate.annotations.Cache;\n+import org.hibernate.annotations.CacheConcurrencyStrategy;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+\n+import de.tum.in.www1.artemis.domain.enumeration.AchievementRank;\n+import de.tum.in.www1.artemis.domain.enumeration.AchievementType;\n+\n+@Entity\n+@Table(name = \"achievement\")\n+@Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)\n+@JsonInclude(JsonInclude.Include.NON_EMPTY)\n+public class Achievement extends DomainObject {\n+\n+    @Column(name = \"title\")\n+    private String title;\n+\n+    @Column(name = \"description\")\n+    private String description;\n+\n+    @Column(name = \"icon\")\n+    private String icon;\n+\n+    @Enumerated(EnumType.STRING)\n+    @Column(name = \"achievement_rank\")\n+    private AchievementRank rank;\n+\n+    @Enumerated(EnumType.STRING)\n+    @Column(name = \"achievement_type\")\n+    private AchievementType type;\n+\n+    @ManyToOne\n+    private Course course;\n+\n+    @ManyToOne\n+    private Exercise exercise;\n+\n+    @ManyToMany(mappedBy = \"achievements\")\n+    @Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)\n+    @JsonIgnoreProperties(\"achievements\")\n+    private Set<User> users = new HashSet<>();\n+\n+    public Achievement() {", "originalCommit": "3198ffe7b3c8590c0745f00f6ef6cb27701301f5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "e27d529128c11ca6eeb50cb57571e51ebf71a143", "url": "https://github.com/ls1intum/Artemis/commit/e27d529128c11ca6eeb50cb57571e51ebf71a143", "message": "add achievement storage", "committedDate": "2020-07-14T07:28:46Z", "type": "commit"}, {"oid": "de275af916b062001911f88c8dc897ffdbb22c9d", "url": "https://github.com/ls1intum/Artemis/commit/de275af916b062001911f88c8dc897ffdbb22c9d", "message": "fix changelog format", "committedDate": "2020-07-16T08:57:30Z", "type": "commit"}, {"oid": "972e1efc3c4df2730ebc8238280545a9ee45e353", "url": "https://github.com/ls1intum/Artemis/commit/972e1efc3c4df2730ebc8238280545a9ee45e353", "message": "Merge branch 'develop' into feature/achievements/storage", "committedDate": "2020-07-16T08:59:17Z", "type": "commit"}, {"oid": "e72eedfcdab9d9786820ce38d03336287518fbc2", "url": "https://github.com/ls1intum/Artemis/commit/e72eedfcdab9d9786820ce38d03336287518fbc2", "message": "Merge branch 'develop' into feature/achievements/storage", "committedDate": "2020-07-19T10:23:41Z", "type": "commit"}, {"oid": "7f260dd751faa52efff4c54c1167dfaae6718852", "url": "https://github.com/ls1intum/Artemis/commit/7f260dd751faa52efff4c54c1167dfaae6718852", "message": "minor fixes", "committedDate": "2020-07-19T13:00:10Z", "type": "commit"}, {"oid": "9f4a503e4c5c83936e2419bf86fc5eae4aca1ce2", "url": "https://github.com/ls1intum/Artemis/commit/9f4a503e4c5c83936e2419bf86fc5eae4aca1ce2", "message": "minor fixes part two", "committedDate": "2020-07-19T16:46:09Z", "type": "commit"}, {"oid": "a434a978449baa283f3b5f9a5a80b5256796c4d3", "url": "https://github.com/ls1intum/Artemis/commit/a434a978449baa283f3b5f9a5a80b5256796c4d3", "message": "remove unused import", "committedDate": "2020-07-19T16:53:00Z", "type": "commit"}, {"oid": "e81f1aafb864610c78ab8628c32c0b2b16928fb4", "url": "https://github.com/ls1intum/Artemis/commit/e81f1aafb864610c78ab8628c32c0b2b16928fb4", "message": "Merge branch 'develop' into feature/achievements/storage", "committedDate": "2020-07-20T09:00:20Z", "type": "commit"}, {"oid": "f553087c073b83e198e8b1d9f17b517af701e2e8", "url": "https://github.com/ls1intum/Artemis/commit/f553087c073b83e198e8b1d9f17b517af701e2e8", "message": "add asserts", "committedDate": "2020-07-20T09:15:21Z", "type": "commit"}, {"oid": "2e142509fc0288e4d413dd53adc4acea94c44feb", "url": "https://github.com/ls1intum/Artemis/commit/2e142509fc0288e4d413dd53adc4acea94c44feb", "message": "add checks for point based achievements", "committedDate": "2020-07-21T07:32:49Z", "type": "commit"}, {"oid": "b03e23710fe205090894c5b483e18321c06b95e1", "url": "https://github.com/ls1intum/Artemis/commit/b03e23710fe205090894c5b483e18321c06b95e1", "message": "fix typo and return type", "committedDate": "2020-07-27T16:19:21Z", "type": "commit"}, {"oid": "4a815c7d375596a690b924c929f31a4cb29fe068", "url": "https://github.com/ls1intum/Artemis/commit/4a815c7d375596a690b924c929f31a4cb29fe068", "message": "Merge branch 'develop' into feature/achievements/storage", "committedDate": "2020-08-11T08:19:53Z", "type": "commit"}, {"oid": "94d24706f578fef980af17371f2c62a85664e48b", "url": "https://github.com/ls1intum/Artemis/commit/94d24706f578fef980af17371f2c62a85664e48b", "message": "Merge branch 'develop' into feature/achievements/point-based-checks", "committedDate": "2020-08-11T08:20:20Z", "type": "commit"}, {"oid": "f24c127f441012f187c865ed3467f7f569f147dc", "url": "https://github.com/ls1intum/Artemis/commit/f24c127f441012f187c865ed3467f7f569f147dc", "message": "Merge branch 'develop' into feature/achievements/storage", "committedDate": "2020-08-14T14:26:33Z", "type": "commit"}, {"oid": "a2f96bfcb0065cbd61bb06aa9c2718a44691a63f", "url": "https://github.com/ls1intum/Artemis/commit/a2f96bfcb0065cbd61bb06aa9c2718a44691a63f", "message": "Merge branch 'develop' into feature/achievements/storage", "committedDate": "2020-08-17T16:48:13Z", "type": "commit"}, {"oid": "dd7af35f35cc660130e8fa4c003e003ef6969b12", "url": "https://github.com/ls1intum/Artemis/commit/dd7af35f35cc660130e8fa4c003e003ef6969b12", "message": "Merge branch 'develop' into feature/achievements/storage", "committedDate": "2020-08-18T07:43:28Z", "type": "commit"}, {"oid": "1ad60b8b22a558f8f65ace6e151e72d86269742a", "url": "https://github.com/ls1intum/Artemis/commit/1ad60b8b22a558f8f65ace6e151e72d86269742a", "message": "Update 20200706223010_changelog.xml", "committedDate": "2020-08-18T22:30:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU2MjQ1NA==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r472562454", "body": "AchievementEntity", "bodyText": "AchievementEntity", "bodyHTML": "<p dir=\"auto\">AchievementEntity</p>", "author": "stefanwaldhauser", "createdAt": "2020-08-19T00:15:19Z", "path": "src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java", "diffHunk": "@@ -0,0 +1,14 @@\n+package de.tum.in.www1.artemis.repository;\n+\n+import org.springframework.data.jpa.repository.JpaRepository;\n+import org.springframework.stereotype.Repository;\n+\n+import de.tum.in.www1.artemis.domain.Achievement;\n+\n+/**\n+ * Spring Data JPA repository for the StudentExam entity.", "originalCommit": "1ad60b8b22a558f8f65ace6e151e72d86269742a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjkwOTE3Nw==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r472909177", "bodyText": "Oh thanks, don\u00b4t know how I could overlook that \ud83d\ude04", "author": "balazs-czopf", "createdAt": "2020-08-19T09:56:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU2MjQ1NA=="}], "type": "inlineReview", "revised_code": {"commit": "6aa68b0ab7a071fa631c7c72cdb8ea02ccf15a39", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java b/src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java\nindex 2e56cfbe6f8..b2d72e87c5b 100644\n--- a/src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java\n+++ b/src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java\n", "chunk": "@@ -1,14 +1,29 @@\n package de.tum.in.www1.artemis.repository;\n \n+import java.util.Set;\n+\n import org.springframework.data.jpa.repository.JpaRepository;\n+import org.springframework.data.jpa.repository.Query;\n+import org.springframework.data.repository.query.Param;\n import org.springframework.stereotype.Repository;\n \n import de.tum.in.www1.artemis.domain.Achievement;\n \n /**\n- * Spring Data JPA repository for the StudentExam entity.\n+ * Spring Data JPA repository for the Achievement entity.\n  */\n @Repository\n public interface AchievementRepository extends JpaRepository<Achievement, Long> {\n \n+    @Query(\"SELECT a FROM Achievement a WHERE a.course.id = :#{#courseId}\")\n+    Set<Achievement> findAllByCourseId(@Param(\"courseId\") Long courseId);\n+\n+    @Query(\"SELECT a FROM Achievement a WHERE a.exercise.id = :#{#exerciseId}\")\n+    Set<Achievement> findAllByExerciseId(@Param(\"exerciseId\") Long exerciseId);\n+\n+    @Query(\"SELECT a FROM Achievement a JOIN a.users u WHERE u.id = :#{#userId}\")\n+    Set<Achievement> findAllByUserId(@Param(\"userId\") Long userId);\n+\n+    @Query(\"SELECT a FROM Achievement a JOIN a.users u WHERE u.id = :#{#userId} AND a.course.id = :#{#courseId}\")\n+    Set<Achievement> findAllByUserIdAndCourseId(@Param(\"userId\") Long userId, @Param(\"courseId\") Long courseId);\n }\n", "next_change": {"commit": "95622742bd3fa7623d0ad8df6089acef534ee60f", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java b/src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java\nindex b2d72e87c5b..7bf2e7971c7 100644\n--- a/src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java\n+++ b/src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java\n", "chunk": "@@ -26,4 +27,13 @@ public interface AchievementRepository extends JpaRepository<Achievement, Long>\n \n     @Query(\"SELECT a FROM Achievement a JOIN a.users u WHERE u.id = :#{#userId} AND a.course.id = :#{#courseId}\")\n     Set<Achievement> findAllByUserIdAndCourseId(@Param(\"userId\") Long userId, @Param(\"courseId\") Long courseId);\n+\n+    @Query(\"SELECT a FROM Achievement a LEFT JOIN FETCH a.users u WHERE a.course.id = :#{#courseId} AND a.type = :#{#type}\")\n+    Set<Achievement> findAllForRewardedTypeInCourse(@Param(\"courseId\") Long courseId, @Param(\"type\") AchievementType type);\n+\n+    @Query(\"SELECT a FROM Achievement a LEFT JOIN FETCH a.users u WHERE a.course.id = :#{#courseId} AND a.exercise.id = :#{#exerciseId} AND a.type = :#{#type}\")\n+    Set<Achievement> findAllForRewardedTypeInExercise(@Param(\"courseId\") Long courseId, @Param(\"exerciseId\") Long exerciseId, @Param(\"type\") AchievementType type);\n+\n+    void deleteByCourse_Id(Long courseId);\n+\n }\n", "next_change": {"commit": "0e82242b97cdbc112e1d3a883cb2281d462dd405", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java b/src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java\nindex 7bf2e7971c7..b2d72e87c5b 100644\n--- a/src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java\n+++ b/src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java\n", "chunk": "@@ -27,13 +26,4 @@ public interface AchievementRepository extends JpaRepository<Achievement, Long>\n \n     @Query(\"SELECT a FROM Achievement a JOIN a.users u WHERE u.id = :#{#userId} AND a.course.id = :#{#courseId}\")\n     Set<Achievement> findAllByUserIdAndCourseId(@Param(\"userId\") Long userId, @Param(\"courseId\") Long courseId);\n-\n-    @Query(\"SELECT a FROM Achievement a LEFT JOIN FETCH a.users u WHERE a.course.id = :#{#courseId} AND a.type = :#{#type}\")\n-    Set<Achievement> findAllForRewardedTypeInCourse(@Param(\"courseId\") Long courseId, @Param(\"type\") AchievementType type);\n-\n-    @Query(\"SELECT a FROM Achievement a LEFT JOIN FETCH a.users u WHERE a.course.id = :#{#courseId} AND a.exercise.id = :#{#exerciseId} AND a.type = :#{#type}\")\n-    Set<Achievement> findAllForRewardedTypeInExercise(@Param(\"courseId\") Long courseId, @Param(\"exerciseId\") Long exerciseId, @Param(\"type\") AchievementType type);\n-\n-    void deleteByCourse_Id(Long courseId);\n-\n }\n", "next_change": {"commit": "c7425c9af8e7e15cd22a3771029b103c6d79608f", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java b/src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java\nindex b2d72e87c5b..7bf2e7971c7 100644\n--- a/src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java\n+++ b/src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java\n", "chunk": "@@ -26,4 +27,13 @@ public interface AchievementRepository extends JpaRepository<Achievement, Long>\n \n     @Query(\"SELECT a FROM Achievement a JOIN a.users u WHERE u.id = :#{#userId} AND a.course.id = :#{#courseId}\")\n     Set<Achievement> findAllByUserIdAndCourseId(@Param(\"userId\") Long userId, @Param(\"courseId\") Long courseId);\n+\n+    @Query(\"SELECT a FROM Achievement a LEFT JOIN FETCH a.users u WHERE a.course.id = :#{#courseId} AND a.type = :#{#type}\")\n+    Set<Achievement> findAllForRewardedTypeInCourse(@Param(\"courseId\") Long courseId, @Param(\"type\") AchievementType type);\n+\n+    @Query(\"SELECT a FROM Achievement a LEFT JOIN FETCH a.users u WHERE a.course.id = :#{#courseId} AND a.exercise.id = :#{#exerciseId} AND a.type = :#{#type}\")\n+    Set<Achievement> findAllForRewardedTypeInExercise(@Param(\"courseId\") Long courseId, @Param(\"exerciseId\") Long exerciseId, @Param(\"type\") AchievementType type);\n+\n+    void deleteByCourse_Id(Long courseId);\n+\n }\n", "next_change": {"commit": "28ed83395042c9e9faddf43940bd9f3c221684b3", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java b/src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java\nindex 7bf2e7971c7..b2d72e87c5b 100644\n--- a/src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java\n+++ b/src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java\n", "chunk": "@@ -27,13 +26,4 @@ public interface AchievementRepository extends JpaRepository<Achievement, Long>\n \n     @Query(\"SELECT a FROM Achievement a JOIN a.users u WHERE u.id = :#{#userId} AND a.course.id = :#{#courseId}\")\n     Set<Achievement> findAllByUserIdAndCourseId(@Param(\"userId\") Long userId, @Param(\"courseId\") Long courseId);\n-\n-    @Query(\"SELECT a FROM Achievement a LEFT JOIN FETCH a.users u WHERE a.course.id = :#{#courseId} AND a.type = :#{#type}\")\n-    Set<Achievement> findAllForRewardedTypeInCourse(@Param(\"courseId\") Long courseId, @Param(\"type\") AchievementType type);\n-\n-    @Query(\"SELECT a FROM Achievement a LEFT JOIN FETCH a.users u WHERE a.course.id = :#{#courseId} AND a.exercise.id = :#{#exerciseId} AND a.type = :#{#type}\")\n-    Set<Achievement> findAllForRewardedTypeInExercise(@Param(\"courseId\") Long courseId, @Param(\"exerciseId\") Long exerciseId, @Param(\"type\") AchievementType type);\n-\n-    void deleteByCourse_Id(Long courseId);\n-\n }\n", "next_change": {"commit": "c3317e06a092c8dbee21b52de380addd92f73b3f", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java b/src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java\nindex b2d72e87c5b..7bf2e7971c7 100644\n--- a/src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java\n+++ b/src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java\n", "chunk": "@@ -26,4 +27,13 @@ public interface AchievementRepository extends JpaRepository<Achievement, Long>\n \n     @Query(\"SELECT a FROM Achievement a JOIN a.users u WHERE u.id = :#{#userId} AND a.course.id = :#{#courseId}\")\n     Set<Achievement> findAllByUserIdAndCourseId(@Param(\"userId\") Long userId, @Param(\"courseId\") Long courseId);\n+\n+    @Query(\"SELECT a FROM Achievement a LEFT JOIN FETCH a.users u WHERE a.course.id = :#{#courseId} AND a.type = :#{#type}\")\n+    Set<Achievement> findAllForRewardedTypeInCourse(@Param(\"courseId\") Long courseId, @Param(\"type\") AchievementType type);\n+\n+    @Query(\"SELECT a FROM Achievement a LEFT JOIN FETCH a.users u WHERE a.course.id = :#{#courseId} AND a.exercise.id = :#{#exerciseId} AND a.type = :#{#type}\")\n+    Set<Achievement> findAllForRewardedTypeInExercise(@Param(\"courseId\") Long courseId, @Param(\"exerciseId\") Long exerciseId, @Param(\"type\") AchievementType type);\n+\n+    void deleteByCourse_Id(Long courseId);\n+\n }\n", "next_change": {"commit": "508e8977abe4d1e8ec1c8a817fe9bd0f91f6bb8a", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java b/src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java\nindex 7bf2e7971c7..b2d72e87c5b 100644\n--- a/src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java\n+++ b/src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java\n", "chunk": "@@ -27,13 +26,4 @@ public interface AchievementRepository extends JpaRepository<Achievement, Long>\n \n     @Query(\"SELECT a FROM Achievement a JOIN a.users u WHERE u.id = :#{#userId} AND a.course.id = :#{#courseId}\")\n     Set<Achievement> findAllByUserIdAndCourseId(@Param(\"userId\") Long userId, @Param(\"courseId\") Long courseId);\n-\n-    @Query(\"SELECT a FROM Achievement a LEFT JOIN FETCH a.users u WHERE a.course.id = :#{#courseId} AND a.type = :#{#type}\")\n-    Set<Achievement> findAllForRewardedTypeInCourse(@Param(\"courseId\") Long courseId, @Param(\"type\") AchievementType type);\n-\n-    @Query(\"SELECT a FROM Achievement a LEFT JOIN FETCH a.users u WHERE a.course.id = :#{#courseId} AND a.exercise.id = :#{#exerciseId} AND a.type = :#{#type}\")\n-    Set<Achievement> findAllForRewardedTypeInExercise(@Param(\"courseId\") Long courseId, @Param(\"exerciseId\") Long exerciseId, @Param(\"type\") AchievementType type);\n-\n-    void deleteByCourse_Id(Long courseId);\n-\n }\n", "next_change": {"commit": "d3d2ea3ec69fdc3185bac66822f03c4a1bf0b6b1", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java b/src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java\nindex b2d72e87c5b..7bf2e7971c7 100644\n--- a/src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java\n+++ b/src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java\n", "chunk": "@@ -26,4 +27,13 @@ public interface AchievementRepository extends JpaRepository<Achievement, Long>\n \n     @Query(\"SELECT a FROM Achievement a JOIN a.users u WHERE u.id = :#{#userId} AND a.course.id = :#{#courseId}\")\n     Set<Achievement> findAllByUserIdAndCourseId(@Param(\"userId\") Long userId, @Param(\"courseId\") Long courseId);\n+\n+    @Query(\"SELECT a FROM Achievement a LEFT JOIN FETCH a.users u WHERE a.course.id = :#{#courseId} AND a.type = :#{#type}\")\n+    Set<Achievement> findAllForRewardedTypeInCourse(@Param(\"courseId\") Long courseId, @Param(\"type\") AchievementType type);\n+\n+    @Query(\"SELECT a FROM Achievement a LEFT JOIN FETCH a.users u WHERE a.course.id = :#{#courseId} AND a.exercise.id = :#{#exerciseId} AND a.type = :#{#type}\")\n+    Set<Achievement> findAllForRewardedTypeInExercise(@Param(\"courseId\") Long courseId, @Param(\"exerciseId\") Long exerciseId, @Param(\"type\") AchievementType type);\n+\n+    void deleteByCourse_Id(Long courseId);\n+\n }\n", "next_change": {"commit": "64778c859b7f2d14015c50aedae62db4c98bcee7", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java b/src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java\nindex 7bf2e7971c7..b2d72e87c5b 100644\n--- a/src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java\n+++ b/src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java\n", "chunk": "@@ -27,13 +26,4 @@ public interface AchievementRepository extends JpaRepository<Achievement, Long>\n \n     @Query(\"SELECT a FROM Achievement a JOIN a.users u WHERE u.id = :#{#userId} AND a.course.id = :#{#courseId}\")\n     Set<Achievement> findAllByUserIdAndCourseId(@Param(\"userId\") Long userId, @Param(\"courseId\") Long courseId);\n-\n-    @Query(\"SELECT a FROM Achievement a LEFT JOIN FETCH a.users u WHERE a.course.id = :#{#courseId} AND a.type = :#{#type}\")\n-    Set<Achievement> findAllForRewardedTypeInCourse(@Param(\"courseId\") Long courseId, @Param(\"type\") AchievementType type);\n-\n-    @Query(\"SELECT a FROM Achievement a LEFT JOIN FETCH a.users u WHERE a.course.id = :#{#courseId} AND a.exercise.id = :#{#exerciseId} AND a.type = :#{#type}\")\n-    Set<Achievement> findAllForRewardedTypeInExercise(@Param(\"courseId\") Long courseId, @Param(\"exerciseId\") Long exerciseId, @Param(\"type\") AchievementType type);\n-\n-    void deleteByCourse_Id(Long courseId);\n-\n }\n", "next_change": {"commit": "8d5bfc049d9e75323290b069e7343df6fc579ee7", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java b/src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java\nindex b2d72e87c5b..74b6d03708c 100644\n--- a/src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java\n+++ b/src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java\n", "chunk": "@@ -15,15 +16,18 @@ import de.tum.in.www1.artemis.domain.Achievement;\n @Repository\n public interface AchievementRepository extends JpaRepository<Achievement, Long> {\n \n-    @Query(\"SELECT a FROM Achievement a WHERE a.course.id = :#{#courseId}\")\n+    @Query(\"SELECT a FROM Achievement a LEFT JOIN FETCH a.users WHERE a.course.id = :#{#courseId}\")\n     Set<Achievement> findAllByCourseId(@Param(\"courseId\") Long courseId);\n \n-    @Query(\"SELECT a FROM Achievement a WHERE a.exercise.id = :#{#exerciseId}\")\n+    @Query(\"SELECT a FROM Achievement a LEFT JOIN FETCH a.users WHERE a.exercise.id = :#{#exerciseId}\")\n     Set<Achievement> findAllByExerciseId(@Param(\"exerciseId\") Long exerciseId);\n \n-    @Query(\"SELECT a FROM Achievement a JOIN a.users u WHERE u.id = :#{#userId}\")\n-    Set<Achievement> findAllByUserId(@Param(\"userId\") Long userId);\n-\n     @Query(\"SELECT a FROM Achievement a JOIN a.users u WHERE u.id = :#{#userId} AND a.course.id = :#{#courseId}\")\n     Set<Achievement> findAllByUserIdAndCourseId(@Param(\"userId\") Long userId, @Param(\"courseId\") Long courseId);\n+\n+    @Query(\"SELECT a FROM Achievement a LEFT JOIN FETCH a.users u WHERE a.course.id = :#{#courseId} AND a.type = :#{#type}\")\n+    Set<Achievement> findAllForRewardedTypeInCourse(@Param(\"courseId\") Long courseId, @Param(\"type\") AchievementType type);\n+\n+    @Query(\"SELECT a FROM Achievement a LEFT JOIN FETCH a.users u WHERE a.course.id = :#{#courseId} AND a.exercise.id = :#{#exerciseId} AND a.type = :#{#type}\")\n+    Set<Achievement> findAllForRewardedTypeInExercise(@Param(\"courseId\") Long courseId, @Param(\"exerciseId\") Long exerciseId, @Param(\"type\") AchievementType type);\n }\n", "next_change": {"commit": "7a5de1a37353eb19f93ef49666bba352198834cb", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java b/src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java\nindex 74b6d03708c..b2d72e87c5b 100644\n--- a/src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java\n+++ b/src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java\n", "chunk": "@@ -16,18 +15,15 @@ import de.tum.in.www1.artemis.domain.enumeration.AchievementType;\n @Repository\n public interface AchievementRepository extends JpaRepository<Achievement, Long> {\n \n-    @Query(\"SELECT a FROM Achievement a LEFT JOIN FETCH a.users WHERE a.course.id = :#{#courseId}\")\n+    @Query(\"SELECT a FROM Achievement a WHERE a.course.id = :#{#courseId}\")\n     Set<Achievement> findAllByCourseId(@Param(\"courseId\") Long courseId);\n \n-    @Query(\"SELECT a FROM Achievement a LEFT JOIN FETCH a.users WHERE a.exercise.id = :#{#exerciseId}\")\n+    @Query(\"SELECT a FROM Achievement a WHERE a.exercise.id = :#{#exerciseId}\")\n     Set<Achievement> findAllByExerciseId(@Param(\"exerciseId\") Long exerciseId);\n \n+    @Query(\"SELECT a FROM Achievement a JOIN a.users u WHERE u.id = :#{#userId}\")\n+    Set<Achievement> findAllByUserId(@Param(\"userId\") Long userId);\n+\n     @Query(\"SELECT a FROM Achievement a JOIN a.users u WHERE u.id = :#{#userId} AND a.course.id = :#{#courseId}\")\n     Set<Achievement> findAllByUserIdAndCourseId(@Param(\"userId\") Long userId, @Param(\"courseId\") Long courseId);\n-\n-    @Query(\"SELECT a FROM Achievement a LEFT JOIN FETCH a.users u WHERE a.course.id = :#{#courseId} AND a.type = :#{#type}\")\n-    Set<Achievement> findAllForRewardedTypeInCourse(@Param(\"courseId\") Long courseId, @Param(\"type\") AchievementType type);\n-\n-    @Query(\"SELECT a FROM Achievement a LEFT JOIN FETCH a.users u WHERE a.course.id = :#{#courseId} AND a.exercise.id = :#{#exerciseId} AND a.type = :#{#type}\")\n-    Set<Achievement> findAllForRewardedTypeInExercise(@Param(\"courseId\") Long courseId, @Param(\"exerciseId\") Long exerciseId, @Param(\"type\") AchievementType type);\n }\n", "next_change": {"commit": "116151629d403403ee9b750c30c182f44f70e233", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java b/src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java\nindex b2d72e87c5b..815fa227377 100644\n--- a/src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java\n+++ b/src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java\n", "chunk": "@@ -15,15 +15,12 @@ import de.tum.in.www1.artemis.domain.Achievement;\n @Repository\n public interface AchievementRepository extends JpaRepository<Achievement, Long> {\n \n-    @Query(\"SELECT a FROM Achievement a WHERE a.course.id = :#{#courseId}\")\n+    @Query(\"SELECT a FROM Achievement a LEFT JOIN FETCH a.users WHERE a.course.id = :#{#courseId}\")\n     Set<Achievement> findAllByCourseId(@Param(\"courseId\") Long courseId);\n \n-    @Query(\"SELECT a FROM Achievement a WHERE a.exercise.id = :#{#exerciseId}\")\n+    @Query(\"SELECT a FROM Achievement a LEFT JOIN FETCH a.users WHERE a.exercise.id = :#{#exerciseId}\")\n     Set<Achievement> findAllByExerciseId(@Param(\"exerciseId\") Long exerciseId);\n \n-    @Query(\"SELECT a FROM Achievement a JOIN a.users u WHERE u.id = :#{#userId}\")\n-    Set<Achievement> findAllByUserId(@Param(\"userId\") Long userId);\n-\n     @Query(\"SELECT a FROM Achievement a JOIN a.users u WHERE u.id = :#{#userId} AND a.course.id = :#{#courseId}\")\n     Set<Achievement> findAllByUserIdAndCourseId(@Param(\"userId\") Long userId, @Param(\"courseId\") Long courseId);\n }\n", "next_change": {"commit": "719a46d7fd1e520b77bb96ef30efe4d29582c872", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java b/src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java\nindex 815fa227377..137e2893791 100644\n--- a/src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java\n+++ b/src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java\n", "chunk": "@@ -15,10 +15,10 @@ import de.tum.in.www1.artemis.domain.Achievement;\n @Repository\n public interface AchievementRepository extends JpaRepository<Achievement, Long> {\n \n-    @Query(\"SELECT a FROM Achievement a LEFT JOIN FETCH a.users WHERE a.course.id = :#{#courseId}\")\n+    @Query(\"SELECT a FROM Achievement a LEFT JOIN FETCH a.users u LEFT JOIN FETCH u.achievements WHERE a.course.id = :#{#courseId}\")\n     Set<Achievement> findAllByCourseId(@Param(\"courseId\") Long courseId);\n \n-    @Query(\"SELECT a FROM Achievement a LEFT JOIN FETCH a.users WHERE a.exercise.id = :#{#exerciseId}\")\n+    @Query(\"SELECT a FROM Achievement a LEFT JOIN FETCH a.users u LEFT JOIN FETCH u.achievements WHERE a.exercise.id = :#{#exerciseId}\")\n     Set<Achievement> findAllByExerciseId(@Param(\"exerciseId\") Long exerciseId);\n \n     @Query(\"SELECT a FROM Achievement a JOIN a.users u WHERE u.id = :#{#userId} AND a.course.id = :#{#courseId}\")\n", "next_change": {"commit": "e9f0edb87441d63c5ff8fe668b57b237f1cb4a38", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java b/src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java\nindex 137e2893791..c4153737d23 100644\n--- a/src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java\n+++ b/src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java\n", "chunk": "@@ -15,12 +11,4 @@ import de.tum.in.www1.artemis.domain.Achievement;\n @Repository\n public interface AchievementRepository extends JpaRepository<Achievement, Long> {\n \n-    @Query(\"SELECT a FROM Achievement a LEFT JOIN FETCH a.users u LEFT JOIN FETCH u.achievements WHERE a.course.id = :#{#courseId}\")\n-    Set<Achievement> findAllByCourseId(@Param(\"courseId\") Long courseId);\n-\n-    @Query(\"SELECT a FROM Achievement a LEFT JOIN FETCH a.users u LEFT JOIN FETCH u.achievements WHERE a.exercise.id = :#{#exerciseId}\")\n-    Set<Achievement> findAllByExerciseId(@Param(\"exerciseId\") Long exerciseId);\n-\n-    @Query(\"SELECT a FROM Achievement a JOIN a.users u WHERE u.id = :#{#userId} AND a.course.id = :#{#courseId}\")\n-    Set<Achievement> findAllByUserIdAndCourseId(@Param(\"userId\") Long userId, @Param(\"courseId\") Long courseId);\n }\n", "next_change": {"commit": "3d4e4cc13f97b0a0d4c004ab07a76cffbd07d762", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java b/src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java\nindex c4153737d23..44077a029e6 100644\n--- a/src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java\n+++ b/src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java\n", "chunk": "@@ -11,4 +15,8 @@ import de.tum.in.www1.artemis.domain.Achievement;\n @Repository\n public interface AchievementRepository extends JpaRepository<Achievement, Long> {\n \n+    Set<Achievement> getAllByCourseId(Long courseId);\n+\n+    @Query(\"SELECT a FROM Achievement a JOIN a.users u WHERE u.id = :#{#userId}\")\n+    Set<Achievement> getAllByUserId(@Param(\"userId\") Long userId);\n }\n", "next_change": {"commit": "8f5da67987bcf3198dbf86886d0740d20a1ce945", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java b/src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java\nindex 44077a029e6..27130b0b7f9 100644\n--- a/src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java\n+++ b/src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java\n", "chunk": "@@ -15,7 +15,8 @@ import de.tum.in.www1.artemis.domain.Achievement;\n @Repository\n public interface AchievementRepository extends JpaRepository<Achievement, Long> {\n \n-    Set<Achievement> getAllByCourseId(Long courseId);\n+    @Query(\"SELECT a FROM Achievement a WHERE a.course.id = :#{#courseId}\")\n+    Set<Achievement> getAllByCourseId(@Param(\"courseId\") Long courseId);\n \n     @Query(\"SELECT a FROM Achievement a JOIN a.users u WHERE u.id = :#{#userId}\")\n     Set<Achievement> getAllByUserId(@Param(\"userId\") Long userId);\n", "next_change": {"commit": "669ba95aca108519bc3499ee88a04461aaa1f1b6", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java b/src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java\nindex 27130b0b7f9..21eae39ef23 100644\n--- a/src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java\n+++ b/src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java\n", "chunk": "@@ -20,4 +20,7 @@ public interface AchievementRepository extends JpaRepository<Achievement, Long>\n \n     @Query(\"SELECT a FROM Achievement a JOIN a.users u WHERE u.id = :#{#userId}\")\n     Set<Achievement> getAllByUserId(@Param(\"userId\") Long userId);\n+\n+    @Query(\"SELECT a FROM Achievement a JOIN a.users u WHERE u.id = :#{#userId} AND a.course.id = :#{#courseId}\")\n+    Set<Achievement> getAllByUserIdAndCourseId(@Param(\"userId\") Long userId, @Param(\"courseId\") Long courseId);\n }\n", "next_change": {"commit": "fd13e3d27e731c1b8d1a2dea0e1c43ae2468034b", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java b/src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java\nindex 21eae39ef23..b2d72e87c5b 100644\n--- a/src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java\n+++ b/src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java\n", "chunk": "@@ -16,11 +16,14 @@ import de.tum.in.www1.artemis.domain.Achievement;\n public interface AchievementRepository extends JpaRepository<Achievement, Long> {\n \n     @Query(\"SELECT a FROM Achievement a WHERE a.course.id = :#{#courseId}\")\n-    Set<Achievement> getAllByCourseId(@Param(\"courseId\") Long courseId);\n+    Set<Achievement> findAllByCourseId(@Param(\"courseId\") Long courseId);\n+\n+    @Query(\"SELECT a FROM Achievement a WHERE a.exercise.id = :#{#exerciseId}\")\n+    Set<Achievement> findAllByExerciseId(@Param(\"exerciseId\") Long exerciseId);\n \n     @Query(\"SELECT a FROM Achievement a JOIN a.users u WHERE u.id = :#{#userId}\")\n-    Set<Achievement> getAllByUserId(@Param(\"userId\") Long userId);\n+    Set<Achievement> findAllByUserId(@Param(\"userId\") Long userId);\n \n     @Query(\"SELECT a FROM Achievement a JOIN a.users u WHERE u.id = :#{#userId} AND a.course.id = :#{#courseId}\")\n-    Set<Achievement> getAllByUserIdAndCourseId(@Param(\"userId\") Long userId, @Param(\"courseId\") Long courseId);\n+    Set<Achievement> findAllByUserIdAndCourseId(@Param(\"userId\") Long userId, @Param(\"courseId\") Long courseId);\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}, {"oid": "e9f0edb87441d63c5ff8fe668b57b237f1cb4a38", "url": "https://github.com/ls1intum/Artemis/commit/e9f0edb87441d63c5ff8fe668b57b237f1cb4a38", "message": "correct comment", "committedDate": "2020-08-19T09:55:22Z", "type": "commit"}, {"oid": "c4669dabb538cfe77d13a0e0edc864da34a50144", "url": "https://github.com/ls1intum/Artemis/commit/c4669dabb538cfe77d13a0e0edc864da34a50144", "message": "adjust testcases", "committedDate": "2020-08-19T10:55:05Z", "type": "commit"}, {"oid": "99f2f6768169c7797b7d53bd74fd231ec3685038", "url": "https://github.com/ls1intum/Artemis/commit/99f2f6768169c7797b7d53bd74fd231ec3685038", "message": "Merge branch 'develop' into feature/achievements/storage", "committedDate": "2020-08-19T16:05:59Z", "type": "commit"}, {"oid": "51c61b920c49e6c63f69756edd666884b9ca3cfa", "url": "https://github.com/ls1intum/Artemis/commit/51c61b920c49e6c63f69756edd666884b9ca3cfa", "message": "Merge branch 'develop' into feature/achievements/storage", "committedDate": "2020-08-24T14:57:02Z", "type": "commit"}, {"oid": "3d4e4cc13f97b0a0d4c004ab07a76cffbd07d762", "url": "https://github.com/ls1intum/Artemis/commit/3d4e4cc13f97b0a0d4c004ab07a76cffbd07d762", "message": "refactor according to feedback in issue", "committedDate": "2020-08-25T05:35:56Z", "type": "commit"}, {"oid": "2432f78d48bc42ee32c0d5a5880ff7789cc6c130", "url": "https://github.com/ls1intum/Artemis/commit/2432f78d48bc42ee32c0d5a5880ff7789cc6c130", "message": "Merge branch 'develop' into feature/achievements/storage", "committedDate": "2020-08-26T12:14:52Z", "type": "commit"}, {"oid": "8f5da67987bcf3198dbf86886d0740d20a1ce945", "url": "https://github.com/ls1intum/Artemis/commit/8f5da67987bcf3198dbf86886d0740d20a1ce945", "message": "refactor tests", "committedDate": "2020-08-27T19:17:21Z", "type": "commit"}, {"oid": "0dccee74bc806babfd462be86d5afa0f101b1aa8", "url": "https://github.com/ls1intum/Artemis/commit/0dccee74bc806babfd462be86d5afa0f101b1aa8", "message": "end world hunger", "committedDate": "2020-08-28T10:00:16Z", "type": "commit"}, {"oid": "d920609e115d481728c31a12f249ff69af94e9d1", "url": "https://github.com/ls1intum/Artemis/commit/d920609e115d481728c31a12f249ff69af94e9d1", "message": "Merge branch 'develop' into feature/achievements/storage", "committedDate": "2020-08-28T10:01:56Z", "type": "commit"}, {"oid": "c7f4ee33c43213ef762c8ae5424e6064fa75cac9", "url": "https://github.com/ls1intum/Artemis/commit/c7f4ee33c43213ef762c8ae5424e6064fa75cac9", "message": "Update Achievement.java", "committedDate": "2020-08-28T12:03:54Z", "type": "commit"}, {"oid": "003ca137e32c922818eb661ff973171ed13b2c1d", "url": "https://github.com/ls1intum/Artemis/commit/003ca137e32c922818eb661ff973171ed13b2c1d", "message": "Update Achievement.java", "committedDate": "2020-08-28T12:04:12Z", "type": "commit"}, {"oid": "666dd0eafa4822ee94d5cc1866b97aa926a8ab1c", "url": "https://github.com/ls1intum/Artemis/commit/666dd0eafa4822ee94d5cc1866b97aa926a8ab1c", "message": "Update Achievement.java", "committedDate": "2020-08-28T14:07:06Z", "type": "commit"}, {"oid": "198e5998d51d5103ab55075d2bee38be7a95c67d", "url": "https://github.com/ls1intum/Artemis/commit/198e5998d51d5103ab55075d2bee38be7a95c67d", "message": "Update Achievement.java", "committedDate": "2020-08-28T14:07:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTY0NjkwMw==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r479646903", "body": "I think we need here also `getAllByUserIdAndCourseId` as it can be that students are registered for several courses. ", "bodyText": "I think we need here also getAllByUserIdAndCourseId as it can be that students are registered for several courses.", "bodyHTML": "<p dir=\"auto\">I think we need here also <code>getAllByUserIdAndCourseId</code> as it can be that students are registered for several courses.</p>", "author": "fde312", "createdAt": "2020-08-29T12:54:36Z", "path": "src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java", "diffHunk": "@@ -0,0 +1,23 @@\n+package de.tum.in.www1.artemis.repository;\n+\n+import java.util.Set;\n+\n+import org.springframework.data.jpa.repository.JpaRepository;\n+import org.springframework.data.jpa.repository.Query;\n+import org.springframework.data.repository.query.Param;\n+import org.springframework.stereotype.Repository;\n+\n+import de.tum.in.www1.artemis.domain.Achievement;\n+\n+/**\n+ * Spring Data JPA repository for the Achievement entity.\n+ */\n+@Repository\n+public interface AchievementRepository extends JpaRepository<Achievement, Long> {\n+\n+    @Query(\"SELECT a FROM Achievement a WHERE a.course.id = :#{#courseId}\")\n+    Set<Achievement> getAllByCourseId(@Param(\"courseId\") Long courseId);\n+\n+    @Query(\"SELECT a FROM Achievement a JOIN a.users u WHERE u.id = :#{#userId}\")\n+    Set<Achievement> getAllByUserId(@Param(\"userId\") Long userId);\n+}", "originalCommit": "198e5998d51d5103ab55075d2bee38be7a95c67d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc0NjU4MQ==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r479746581", "bodyText": "Yeah sure.\nMy idea was to display a list of all achievements in a course in its dashboard with the achievements not yet received grayed out and the earned ones in color. So you would have to get all achievements for the course but without the user being able to see other students' information.\nBut it doesn\u00b4t hurt to also have the possibility to get achievements by course id and user id.", "author": "balazs-czopf", "createdAt": "2020-08-30T09:35:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTY0NjkwMw=="}], "type": "inlineReview", "revised_code": {"commit": "6aa68b0ab7a071fa631c7c72cdb8ea02ccf15a39", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java b/src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java\nindex 27130b0b7f9..b2d72e87c5b 100644\n--- a/src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java\n+++ b/src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java\n", "chunk": "@@ -16,8 +16,14 @@ import de.tum.in.www1.artemis.domain.Achievement;\n public interface AchievementRepository extends JpaRepository<Achievement, Long> {\n \n     @Query(\"SELECT a FROM Achievement a WHERE a.course.id = :#{#courseId}\")\n-    Set<Achievement> getAllByCourseId(@Param(\"courseId\") Long courseId);\n+    Set<Achievement> findAllByCourseId(@Param(\"courseId\") Long courseId);\n+\n+    @Query(\"SELECT a FROM Achievement a WHERE a.exercise.id = :#{#exerciseId}\")\n+    Set<Achievement> findAllByExerciseId(@Param(\"exerciseId\") Long exerciseId);\n \n     @Query(\"SELECT a FROM Achievement a JOIN a.users u WHERE u.id = :#{#userId}\")\n-    Set<Achievement> getAllByUserId(@Param(\"userId\") Long userId);\n+    Set<Achievement> findAllByUserId(@Param(\"userId\") Long userId);\n+\n+    @Query(\"SELECT a FROM Achievement a JOIN a.users u WHERE u.id = :#{#userId} AND a.course.id = :#{#courseId}\")\n+    Set<Achievement> findAllByUserIdAndCourseId(@Param(\"userId\") Long userId, @Param(\"courseId\") Long courseId);\n }\n", "next_change": {"commit": "95622742bd3fa7623d0ad8df6089acef534ee60f", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java b/src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java\nindex b2d72e87c5b..7bf2e7971c7 100644\n--- a/src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java\n+++ b/src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java\n", "chunk": "@@ -26,4 +27,13 @@ public interface AchievementRepository extends JpaRepository<Achievement, Long>\n \n     @Query(\"SELECT a FROM Achievement a JOIN a.users u WHERE u.id = :#{#userId} AND a.course.id = :#{#courseId}\")\n     Set<Achievement> findAllByUserIdAndCourseId(@Param(\"userId\") Long userId, @Param(\"courseId\") Long courseId);\n+\n+    @Query(\"SELECT a FROM Achievement a LEFT JOIN FETCH a.users u WHERE a.course.id = :#{#courseId} AND a.type = :#{#type}\")\n+    Set<Achievement> findAllForRewardedTypeInCourse(@Param(\"courseId\") Long courseId, @Param(\"type\") AchievementType type);\n+\n+    @Query(\"SELECT a FROM Achievement a LEFT JOIN FETCH a.users u WHERE a.course.id = :#{#courseId} AND a.exercise.id = :#{#exerciseId} AND a.type = :#{#type}\")\n+    Set<Achievement> findAllForRewardedTypeInExercise(@Param(\"courseId\") Long courseId, @Param(\"exerciseId\") Long exerciseId, @Param(\"type\") AchievementType type);\n+\n+    void deleteByCourse_Id(Long courseId);\n+\n }\n", "next_change": {"commit": "0e82242b97cdbc112e1d3a883cb2281d462dd405", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java b/src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java\nindex 7bf2e7971c7..b2d72e87c5b 100644\n--- a/src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java\n+++ b/src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java\n", "chunk": "@@ -27,13 +26,4 @@ public interface AchievementRepository extends JpaRepository<Achievement, Long>\n \n     @Query(\"SELECT a FROM Achievement a JOIN a.users u WHERE u.id = :#{#userId} AND a.course.id = :#{#courseId}\")\n     Set<Achievement> findAllByUserIdAndCourseId(@Param(\"userId\") Long userId, @Param(\"courseId\") Long courseId);\n-\n-    @Query(\"SELECT a FROM Achievement a LEFT JOIN FETCH a.users u WHERE a.course.id = :#{#courseId} AND a.type = :#{#type}\")\n-    Set<Achievement> findAllForRewardedTypeInCourse(@Param(\"courseId\") Long courseId, @Param(\"type\") AchievementType type);\n-\n-    @Query(\"SELECT a FROM Achievement a LEFT JOIN FETCH a.users u WHERE a.course.id = :#{#courseId} AND a.exercise.id = :#{#exerciseId} AND a.type = :#{#type}\")\n-    Set<Achievement> findAllForRewardedTypeInExercise(@Param(\"courseId\") Long courseId, @Param(\"exerciseId\") Long exerciseId, @Param(\"type\") AchievementType type);\n-\n-    void deleteByCourse_Id(Long courseId);\n-\n }\n", "next_change": {"commit": "c7425c9af8e7e15cd22a3771029b103c6d79608f", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java b/src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java\nindex b2d72e87c5b..7bf2e7971c7 100644\n--- a/src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java\n+++ b/src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java\n", "chunk": "@@ -26,4 +27,13 @@ public interface AchievementRepository extends JpaRepository<Achievement, Long>\n \n     @Query(\"SELECT a FROM Achievement a JOIN a.users u WHERE u.id = :#{#userId} AND a.course.id = :#{#courseId}\")\n     Set<Achievement> findAllByUserIdAndCourseId(@Param(\"userId\") Long userId, @Param(\"courseId\") Long courseId);\n+\n+    @Query(\"SELECT a FROM Achievement a LEFT JOIN FETCH a.users u WHERE a.course.id = :#{#courseId} AND a.type = :#{#type}\")\n+    Set<Achievement> findAllForRewardedTypeInCourse(@Param(\"courseId\") Long courseId, @Param(\"type\") AchievementType type);\n+\n+    @Query(\"SELECT a FROM Achievement a LEFT JOIN FETCH a.users u WHERE a.course.id = :#{#courseId} AND a.exercise.id = :#{#exerciseId} AND a.type = :#{#type}\")\n+    Set<Achievement> findAllForRewardedTypeInExercise(@Param(\"courseId\") Long courseId, @Param(\"exerciseId\") Long exerciseId, @Param(\"type\") AchievementType type);\n+\n+    void deleteByCourse_Id(Long courseId);\n+\n }\n", "next_change": {"commit": "28ed83395042c9e9faddf43940bd9f3c221684b3", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java b/src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java\nindex 7bf2e7971c7..b2d72e87c5b 100644\n--- a/src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java\n+++ b/src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java\n", "chunk": "@@ -27,13 +26,4 @@ public interface AchievementRepository extends JpaRepository<Achievement, Long>\n \n     @Query(\"SELECT a FROM Achievement a JOIN a.users u WHERE u.id = :#{#userId} AND a.course.id = :#{#courseId}\")\n     Set<Achievement> findAllByUserIdAndCourseId(@Param(\"userId\") Long userId, @Param(\"courseId\") Long courseId);\n-\n-    @Query(\"SELECT a FROM Achievement a LEFT JOIN FETCH a.users u WHERE a.course.id = :#{#courseId} AND a.type = :#{#type}\")\n-    Set<Achievement> findAllForRewardedTypeInCourse(@Param(\"courseId\") Long courseId, @Param(\"type\") AchievementType type);\n-\n-    @Query(\"SELECT a FROM Achievement a LEFT JOIN FETCH a.users u WHERE a.course.id = :#{#courseId} AND a.exercise.id = :#{#exerciseId} AND a.type = :#{#type}\")\n-    Set<Achievement> findAllForRewardedTypeInExercise(@Param(\"courseId\") Long courseId, @Param(\"exerciseId\") Long exerciseId, @Param(\"type\") AchievementType type);\n-\n-    void deleteByCourse_Id(Long courseId);\n-\n }\n", "next_change": {"commit": "c3317e06a092c8dbee21b52de380addd92f73b3f", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java b/src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java\nindex b2d72e87c5b..7bf2e7971c7 100644\n--- a/src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java\n+++ b/src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java\n", "chunk": "@@ -26,4 +27,13 @@ public interface AchievementRepository extends JpaRepository<Achievement, Long>\n \n     @Query(\"SELECT a FROM Achievement a JOIN a.users u WHERE u.id = :#{#userId} AND a.course.id = :#{#courseId}\")\n     Set<Achievement> findAllByUserIdAndCourseId(@Param(\"userId\") Long userId, @Param(\"courseId\") Long courseId);\n+\n+    @Query(\"SELECT a FROM Achievement a LEFT JOIN FETCH a.users u WHERE a.course.id = :#{#courseId} AND a.type = :#{#type}\")\n+    Set<Achievement> findAllForRewardedTypeInCourse(@Param(\"courseId\") Long courseId, @Param(\"type\") AchievementType type);\n+\n+    @Query(\"SELECT a FROM Achievement a LEFT JOIN FETCH a.users u WHERE a.course.id = :#{#courseId} AND a.exercise.id = :#{#exerciseId} AND a.type = :#{#type}\")\n+    Set<Achievement> findAllForRewardedTypeInExercise(@Param(\"courseId\") Long courseId, @Param(\"exerciseId\") Long exerciseId, @Param(\"type\") AchievementType type);\n+\n+    void deleteByCourse_Id(Long courseId);\n+\n }\n", "next_change": {"commit": "508e8977abe4d1e8ec1c8a817fe9bd0f91f6bb8a", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java b/src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java\nindex 7bf2e7971c7..b2d72e87c5b 100644\n--- a/src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java\n+++ b/src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java\n", "chunk": "@@ -27,13 +26,4 @@ public interface AchievementRepository extends JpaRepository<Achievement, Long>\n \n     @Query(\"SELECT a FROM Achievement a JOIN a.users u WHERE u.id = :#{#userId} AND a.course.id = :#{#courseId}\")\n     Set<Achievement> findAllByUserIdAndCourseId(@Param(\"userId\") Long userId, @Param(\"courseId\") Long courseId);\n-\n-    @Query(\"SELECT a FROM Achievement a LEFT JOIN FETCH a.users u WHERE a.course.id = :#{#courseId} AND a.type = :#{#type}\")\n-    Set<Achievement> findAllForRewardedTypeInCourse(@Param(\"courseId\") Long courseId, @Param(\"type\") AchievementType type);\n-\n-    @Query(\"SELECT a FROM Achievement a LEFT JOIN FETCH a.users u WHERE a.course.id = :#{#courseId} AND a.exercise.id = :#{#exerciseId} AND a.type = :#{#type}\")\n-    Set<Achievement> findAllForRewardedTypeInExercise(@Param(\"courseId\") Long courseId, @Param(\"exerciseId\") Long exerciseId, @Param(\"type\") AchievementType type);\n-\n-    void deleteByCourse_Id(Long courseId);\n-\n }\n", "next_change": {"commit": "d3d2ea3ec69fdc3185bac66822f03c4a1bf0b6b1", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java b/src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java\nindex b2d72e87c5b..7bf2e7971c7 100644\n--- a/src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java\n+++ b/src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java\n", "chunk": "@@ -26,4 +27,13 @@ public interface AchievementRepository extends JpaRepository<Achievement, Long>\n \n     @Query(\"SELECT a FROM Achievement a JOIN a.users u WHERE u.id = :#{#userId} AND a.course.id = :#{#courseId}\")\n     Set<Achievement> findAllByUserIdAndCourseId(@Param(\"userId\") Long userId, @Param(\"courseId\") Long courseId);\n+\n+    @Query(\"SELECT a FROM Achievement a LEFT JOIN FETCH a.users u WHERE a.course.id = :#{#courseId} AND a.type = :#{#type}\")\n+    Set<Achievement> findAllForRewardedTypeInCourse(@Param(\"courseId\") Long courseId, @Param(\"type\") AchievementType type);\n+\n+    @Query(\"SELECT a FROM Achievement a LEFT JOIN FETCH a.users u WHERE a.course.id = :#{#courseId} AND a.exercise.id = :#{#exerciseId} AND a.type = :#{#type}\")\n+    Set<Achievement> findAllForRewardedTypeInExercise(@Param(\"courseId\") Long courseId, @Param(\"exerciseId\") Long exerciseId, @Param(\"type\") AchievementType type);\n+\n+    void deleteByCourse_Id(Long courseId);\n+\n }\n", "next_change": {"commit": "64778c859b7f2d14015c50aedae62db4c98bcee7", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java b/src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java\nindex 7bf2e7971c7..b2d72e87c5b 100644\n--- a/src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java\n+++ b/src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java\n", "chunk": "@@ -27,13 +26,4 @@ public interface AchievementRepository extends JpaRepository<Achievement, Long>\n \n     @Query(\"SELECT a FROM Achievement a JOIN a.users u WHERE u.id = :#{#userId} AND a.course.id = :#{#courseId}\")\n     Set<Achievement> findAllByUserIdAndCourseId(@Param(\"userId\") Long userId, @Param(\"courseId\") Long courseId);\n-\n-    @Query(\"SELECT a FROM Achievement a LEFT JOIN FETCH a.users u WHERE a.course.id = :#{#courseId} AND a.type = :#{#type}\")\n-    Set<Achievement> findAllForRewardedTypeInCourse(@Param(\"courseId\") Long courseId, @Param(\"type\") AchievementType type);\n-\n-    @Query(\"SELECT a FROM Achievement a LEFT JOIN FETCH a.users u WHERE a.course.id = :#{#courseId} AND a.exercise.id = :#{#exerciseId} AND a.type = :#{#type}\")\n-    Set<Achievement> findAllForRewardedTypeInExercise(@Param(\"courseId\") Long courseId, @Param(\"exerciseId\") Long exerciseId, @Param(\"type\") AchievementType type);\n-\n-    void deleteByCourse_Id(Long courseId);\n-\n }\n", "next_change": {"commit": "8d5bfc049d9e75323290b069e7343df6fc579ee7", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java b/src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java\nindex b2d72e87c5b..74b6d03708c 100644\n--- a/src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java\n+++ b/src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java\n", "chunk": "@@ -15,15 +16,18 @@ import de.tum.in.www1.artemis.domain.Achievement;\n @Repository\n public interface AchievementRepository extends JpaRepository<Achievement, Long> {\n \n-    @Query(\"SELECT a FROM Achievement a WHERE a.course.id = :#{#courseId}\")\n+    @Query(\"SELECT a FROM Achievement a LEFT JOIN FETCH a.users WHERE a.course.id = :#{#courseId}\")\n     Set<Achievement> findAllByCourseId(@Param(\"courseId\") Long courseId);\n \n-    @Query(\"SELECT a FROM Achievement a WHERE a.exercise.id = :#{#exerciseId}\")\n+    @Query(\"SELECT a FROM Achievement a LEFT JOIN FETCH a.users WHERE a.exercise.id = :#{#exerciseId}\")\n     Set<Achievement> findAllByExerciseId(@Param(\"exerciseId\") Long exerciseId);\n \n-    @Query(\"SELECT a FROM Achievement a JOIN a.users u WHERE u.id = :#{#userId}\")\n-    Set<Achievement> findAllByUserId(@Param(\"userId\") Long userId);\n-\n     @Query(\"SELECT a FROM Achievement a JOIN a.users u WHERE u.id = :#{#userId} AND a.course.id = :#{#courseId}\")\n     Set<Achievement> findAllByUserIdAndCourseId(@Param(\"userId\") Long userId, @Param(\"courseId\") Long courseId);\n+\n+    @Query(\"SELECT a FROM Achievement a LEFT JOIN FETCH a.users u WHERE a.course.id = :#{#courseId} AND a.type = :#{#type}\")\n+    Set<Achievement> findAllForRewardedTypeInCourse(@Param(\"courseId\") Long courseId, @Param(\"type\") AchievementType type);\n+\n+    @Query(\"SELECT a FROM Achievement a LEFT JOIN FETCH a.users u WHERE a.course.id = :#{#courseId} AND a.exercise.id = :#{#exerciseId} AND a.type = :#{#type}\")\n+    Set<Achievement> findAllForRewardedTypeInExercise(@Param(\"courseId\") Long courseId, @Param(\"exerciseId\") Long exerciseId, @Param(\"type\") AchievementType type);\n }\n", "next_change": {"commit": "7a5de1a37353eb19f93ef49666bba352198834cb", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java b/src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java\nindex 74b6d03708c..b2d72e87c5b 100644\n--- a/src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java\n+++ b/src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java\n", "chunk": "@@ -16,18 +15,15 @@ import de.tum.in.www1.artemis.domain.enumeration.AchievementType;\n @Repository\n public interface AchievementRepository extends JpaRepository<Achievement, Long> {\n \n-    @Query(\"SELECT a FROM Achievement a LEFT JOIN FETCH a.users WHERE a.course.id = :#{#courseId}\")\n+    @Query(\"SELECT a FROM Achievement a WHERE a.course.id = :#{#courseId}\")\n     Set<Achievement> findAllByCourseId(@Param(\"courseId\") Long courseId);\n \n-    @Query(\"SELECT a FROM Achievement a LEFT JOIN FETCH a.users WHERE a.exercise.id = :#{#exerciseId}\")\n+    @Query(\"SELECT a FROM Achievement a WHERE a.exercise.id = :#{#exerciseId}\")\n     Set<Achievement> findAllByExerciseId(@Param(\"exerciseId\") Long exerciseId);\n \n+    @Query(\"SELECT a FROM Achievement a JOIN a.users u WHERE u.id = :#{#userId}\")\n+    Set<Achievement> findAllByUserId(@Param(\"userId\") Long userId);\n+\n     @Query(\"SELECT a FROM Achievement a JOIN a.users u WHERE u.id = :#{#userId} AND a.course.id = :#{#courseId}\")\n     Set<Achievement> findAllByUserIdAndCourseId(@Param(\"userId\") Long userId, @Param(\"courseId\") Long courseId);\n-\n-    @Query(\"SELECT a FROM Achievement a LEFT JOIN FETCH a.users u WHERE a.course.id = :#{#courseId} AND a.type = :#{#type}\")\n-    Set<Achievement> findAllForRewardedTypeInCourse(@Param(\"courseId\") Long courseId, @Param(\"type\") AchievementType type);\n-\n-    @Query(\"SELECT a FROM Achievement a LEFT JOIN FETCH a.users u WHERE a.course.id = :#{#courseId} AND a.exercise.id = :#{#exerciseId} AND a.type = :#{#type}\")\n-    Set<Achievement> findAllForRewardedTypeInExercise(@Param(\"courseId\") Long courseId, @Param(\"exerciseId\") Long exerciseId, @Param(\"type\") AchievementType type);\n }\n", "next_change": {"commit": "116151629d403403ee9b750c30c182f44f70e233", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java b/src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java\nindex b2d72e87c5b..815fa227377 100644\n--- a/src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java\n+++ b/src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java\n", "chunk": "@@ -15,15 +15,12 @@ import de.tum.in.www1.artemis.domain.Achievement;\n @Repository\n public interface AchievementRepository extends JpaRepository<Achievement, Long> {\n \n-    @Query(\"SELECT a FROM Achievement a WHERE a.course.id = :#{#courseId}\")\n+    @Query(\"SELECT a FROM Achievement a LEFT JOIN FETCH a.users WHERE a.course.id = :#{#courseId}\")\n     Set<Achievement> findAllByCourseId(@Param(\"courseId\") Long courseId);\n \n-    @Query(\"SELECT a FROM Achievement a WHERE a.exercise.id = :#{#exerciseId}\")\n+    @Query(\"SELECT a FROM Achievement a LEFT JOIN FETCH a.users WHERE a.exercise.id = :#{#exerciseId}\")\n     Set<Achievement> findAllByExerciseId(@Param(\"exerciseId\") Long exerciseId);\n \n-    @Query(\"SELECT a FROM Achievement a JOIN a.users u WHERE u.id = :#{#userId}\")\n-    Set<Achievement> findAllByUserId(@Param(\"userId\") Long userId);\n-\n     @Query(\"SELECT a FROM Achievement a JOIN a.users u WHERE u.id = :#{#userId} AND a.course.id = :#{#courseId}\")\n     Set<Achievement> findAllByUserIdAndCourseId(@Param(\"userId\") Long userId, @Param(\"courseId\") Long courseId);\n }\n", "next_change": {"commit": "719a46d7fd1e520b77bb96ef30efe4d29582c872", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java b/src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java\nindex 815fa227377..137e2893791 100644\n--- a/src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java\n+++ b/src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java\n", "chunk": "@@ -15,10 +15,10 @@ import de.tum.in.www1.artemis.domain.Achievement;\n @Repository\n public interface AchievementRepository extends JpaRepository<Achievement, Long> {\n \n-    @Query(\"SELECT a FROM Achievement a LEFT JOIN FETCH a.users WHERE a.course.id = :#{#courseId}\")\n+    @Query(\"SELECT a FROM Achievement a LEFT JOIN FETCH a.users u LEFT JOIN FETCH u.achievements WHERE a.course.id = :#{#courseId}\")\n     Set<Achievement> findAllByCourseId(@Param(\"courseId\") Long courseId);\n \n-    @Query(\"SELECT a FROM Achievement a LEFT JOIN FETCH a.users WHERE a.exercise.id = :#{#exerciseId}\")\n+    @Query(\"SELECT a FROM Achievement a LEFT JOIN FETCH a.users u LEFT JOIN FETCH u.achievements WHERE a.exercise.id = :#{#exerciseId}\")\n     Set<Achievement> findAllByExerciseId(@Param(\"exerciseId\") Long exerciseId);\n \n     @Query(\"SELECT a FROM Achievement a JOIN a.users u WHERE u.id = :#{#userId} AND a.course.id = :#{#courseId}\")\n", "next_change": {"commit": "669ba95aca108519bc3499ee88a04461aaa1f1b6", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java b/src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java\nindex 137e2893791..21eae39ef23 100644\n--- a/src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java\n+++ b/src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java\n", "chunk": "@@ -15,12 +15,12 @@ import de.tum.in.www1.artemis.domain.Achievement;\n @Repository\n public interface AchievementRepository extends JpaRepository<Achievement, Long> {\n \n-    @Query(\"SELECT a FROM Achievement a LEFT JOIN FETCH a.users u LEFT JOIN FETCH u.achievements WHERE a.course.id = :#{#courseId}\")\n-    Set<Achievement> findAllByCourseId(@Param(\"courseId\") Long courseId);\n+    @Query(\"SELECT a FROM Achievement a WHERE a.course.id = :#{#courseId}\")\n+    Set<Achievement> getAllByCourseId(@Param(\"courseId\") Long courseId);\n \n-    @Query(\"SELECT a FROM Achievement a LEFT JOIN FETCH a.users u LEFT JOIN FETCH u.achievements WHERE a.exercise.id = :#{#exerciseId}\")\n-    Set<Achievement> findAllByExerciseId(@Param(\"exerciseId\") Long exerciseId);\n+    @Query(\"SELECT a FROM Achievement a JOIN a.users u WHERE u.id = :#{#userId}\")\n+    Set<Achievement> getAllByUserId(@Param(\"userId\") Long userId);\n \n     @Query(\"SELECT a FROM Achievement a JOIN a.users u WHERE u.id = :#{#userId} AND a.course.id = :#{#courseId}\")\n-    Set<Achievement> findAllByUserIdAndCourseId(@Param(\"userId\") Long userId, @Param(\"courseId\") Long courseId);\n+    Set<Achievement> getAllByUserIdAndCourseId(@Param(\"userId\") Long userId, @Param(\"courseId\") Long courseId);\n }\n", "next_change": {"commit": "fd13e3d27e731c1b8d1a2dea0e1c43ae2468034b", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java b/src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java\nindex 21eae39ef23..b2d72e87c5b 100644\n--- a/src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java\n+++ b/src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java\n", "chunk": "@@ -16,11 +16,14 @@ import de.tum.in.www1.artemis.domain.Achievement;\n public interface AchievementRepository extends JpaRepository<Achievement, Long> {\n \n     @Query(\"SELECT a FROM Achievement a WHERE a.course.id = :#{#courseId}\")\n-    Set<Achievement> getAllByCourseId(@Param(\"courseId\") Long courseId);\n+    Set<Achievement> findAllByCourseId(@Param(\"courseId\") Long courseId);\n+\n+    @Query(\"SELECT a FROM Achievement a WHERE a.exercise.id = :#{#exerciseId}\")\n+    Set<Achievement> findAllByExerciseId(@Param(\"exerciseId\") Long exerciseId);\n \n     @Query(\"SELECT a FROM Achievement a JOIN a.users u WHERE u.id = :#{#userId}\")\n-    Set<Achievement> getAllByUserId(@Param(\"userId\") Long userId);\n+    Set<Achievement> findAllByUserId(@Param(\"userId\") Long userId);\n \n     @Query(\"SELECT a FROM Achievement a JOIN a.users u WHERE u.id = :#{#userId} AND a.course.id = :#{#courseId}\")\n-    Set<Achievement> getAllByUserIdAndCourseId(@Param(\"userId\") Long userId, @Param(\"courseId\") Long courseId);\n+    Set<Achievement> findAllByUserIdAndCourseId(@Param(\"userId\") Long userId, @Param(\"courseId\") Long courseId);\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTY0Nzk4NA==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r479647984", "body": "I would move that to `AchievementResource.java` ", "bodyText": "I would move that to AchievementResource.java", "bodyHTML": "<p dir=\"auto\">I would move that to <code>AchievementResource.java</code></p>", "author": "fde312", "createdAt": "2020-08-29T13:05:37Z", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/CourseResource.java", "diffHunk": "@@ -994,4 +982,18 @@ public void fetchParticipationsWithSubmissionsAndResultsForCourses(List<Course>\n             return forbidden();\n         }\n     }\n+\n+    /**\n+     * GET /courses/{courseId}/achievements : Get all achievements for course.\n+     *\n+     * @param courseId the course to which the achievements belong to\n+     * @return the ResponseEntity with status 200 (OK) and with the found achievements as body\n+     */\n+    @GetMapping(\"/courses/{courseId}/achievements\")", "originalCommit": "198e5998d51d5103ab55075d2bee38be7a95c67d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc0Njc4MQ==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r479746781", "bodyText": "This was also my first thought, but looking at the URI wouldn\u00b4t it make more sense in the CourseResource.java since I am loading sth. for the course?", "author": "balazs-czopf", "createdAt": "2020-08-30T09:38:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTY0Nzk4NA=="}], "type": "inlineReview", "revised_code": {"commit": "6aa68b0ab7a071fa631c7c72cdb8ea02ccf15a39", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/web/rest/CourseResource.java b/src/main/java/de/tum/in/www1/artemis/web/rest/CourseResource.java\nindex 309139d0fb7..f5558908db5 100644\n--- a/src/main/java/de/tum/in/www1/artemis/web/rest/CourseResource.java\n+++ b/src/main/java/de/tum/in/www1/artemis/web/rest/CourseResource.java\n", "chunk": "@@ -982,18 +994,4 @@ public class CourseResource {\n             return forbidden();\n         }\n     }\n-\n-    /**\n-     * GET /courses/{courseId}/achievements : Get all achievements for course.\n-     *\n-     * @param courseId the course to which the achievements belong to\n-     * @return the ResponseEntity with status 200 (OK) and with the found achievements as body\n-     */\n-    @GetMapping(\"/courses/{courseId}/achievements\")\n-    @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n-    public ResponseEntity<Set<Achievement>> getAchievementsForCourse(@PathVariable Long courseId) {\n-        log.debug(\"REST request to get achievements for course : {}\", courseId);\n-        Set<Achievement> achievements = achievementService.findAllForCourse(courseId);\n-        return ResponseEntity.ok(achievements);\n-    }\n }\n", "next_change": {"commit": "669ba95aca108519bc3499ee88a04461aaa1f1b6", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/web/rest/CourseResource.java b/src/main/java/de/tum/in/www1/artemis/web/rest/CourseResource.java\nindex f5558908db5..0573b18627e 100644\n--- a/src/main/java/de/tum/in/www1/artemis/web/rest/CourseResource.java\n+++ b/src/main/java/de/tum/in/www1/artemis/web/rest/CourseResource.java\n", "chunk": "@@ -994,4 +982,19 @@ public class CourseResource {\n             return forbidden();\n         }\n     }\n+\n+    /**\n+     * GET /courses/{courseId}/achievements : Get all achievements for course.\n+     *\n+     * @param courseId the course to which the achievements belong to\n+     * @return the ResponseEntity with status 200 (OK) and with the found achievements as body\n+     */\n+    @GetMapping(\"/courses/{courseId}/achievements\")\n+    @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Set<Achievement>> getAchievementsForCourse(@PathVariable Long courseId) {\n+        log.debug(\"REST request to get achievements for course : {}\", courseId);\n+        User user = userService.getUser();\n+        Set<Achievement> achievements = achievementService.findAllForCourse(courseId, user.getId());\n+        return ResponseEntity.ok(achievements);\n+    }\n }\n", "next_change": {"commit": "f0bc01d15b7e677a36aa71c0319f71bb6ed7a885", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/web/rest/CourseResource.java b/src/main/java/de/tum/in/www1/artemis/web/rest/CourseResource.java\nindex 0573b18627e..f5558908db5 100644\n--- a/src/main/java/de/tum/in/www1/artemis/web/rest/CourseResource.java\n+++ b/src/main/java/de/tum/in/www1/artemis/web/rest/CourseResource.java\n", "chunk": "@@ -982,19 +994,4 @@ public class CourseResource {\n             return forbidden();\n         }\n     }\n-\n-    /**\n-     * GET /courses/{courseId}/achievements : Get all achievements for course.\n-     *\n-     * @param courseId the course to which the achievements belong to\n-     * @return the ResponseEntity with status 200 (OK) and with the found achievements as body\n-     */\n-    @GetMapping(\"/courses/{courseId}/achievements\")\n-    @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n-    public ResponseEntity<Set<Achievement>> getAchievementsForCourse(@PathVariable Long courseId) {\n-        log.debug(\"REST request to get achievements for course : {}\", courseId);\n-        User user = userService.getUser();\n-        Set<Achievement> achievements = achievementService.findAllForCourse(courseId, user.getId());\n-        return ResponseEntity.ok(achievements);\n-    }\n }\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTY0ODI2Mg==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r479648262", "body": "Add REST call to delete achievements", "bodyText": "Add REST call to delete achievements", "bodyHTML": "<p dir=\"auto\">Add REST call to delete achievements</p>", "author": "fde312", "createdAt": "2020-08-29T13:09:16Z", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java", "diffHunk": "@@ -0,0 +1,50 @@\n+package de.tum.in.www1.artemis.web.rest;\n+\n+import java.util.Set;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+import de.tum.in.www1.artemis.domain.Achievement;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.service.AchievementService;\n+import de.tum.in.www1.artemis.service.UserService;\n+\n+/**\n+ * REST controller for managing Achievements.\n+ */\n+@RestController\n+@RequestMapping(\"/api\")\n+public class AchievementResource {\n+\n+    private final Logger log = LoggerFactory.getLogger(AchievementResource.class);\n+\n+    private final AchievementService achievementService;\n+\n+    private final UserService userService;\n+\n+    public AchievementResource(AchievementService achievementService, UserService userService) {\n+        this.achievementService = achievementService;\n+        this.userService = userService;\n+    }\n+\n+    /**\n+     * GET /achievements : Get all achievements for user.\n+     *\n+     * @return the ResponseEntity with status 200 (OK) and with the found achievements as body\n+     */\n+    @GetMapping(\"/achievements\")\n+    @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Set<Achievement>> getAchievementsForUser() {\n+        User user = userService.getUser();\n+        log.debug(\"REST request to get achievements for user : {}\", user.getLogin());\n+        Set<Achievement> achievements = achievementService.findAllForUser(user.getId());\n+        return ResponseEntity.ok(achievements);\n+    }\n+\n+}", "originalCommit": "198e5998d51d5103ab55075d2bee38be7a95c67d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTY0ODY4Ng==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r479648686", "bodyText": "Add REST call to create/update achievements", "author": "fde312", "createdAt": "2020-08-29T13:14:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTY0ODI2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc1NzgyMw==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r479757823", "bodyText": "Done :)", "author": "balazs-czopf", "createdAt": "2020-08-30T11:29:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTY0ODI2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "6aa68b0ab7a071fa631c7c72cdb8ea02ccf15a39", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\nindex 11588df60e1..9a9cebd81ef 100644\n--- a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n+++ b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n", "chunk": "@@ -43,8 +55,74 @@ public class AchievementResource {\n     public ResponseEntity<Set<Achievement>> getAchievementsForUser() {\n         User user = userService.getUser();\n         log.debug(\"REST request to get achievements for user : {}\", user.getLogin());\n-        Set<Achievement> achievements = achievementService.findAllForUser(user.getId());\n+        Set<Achievement> achievements = achievementService.findAllByUserId(user.getId());\n         return ResponseEntity.ok(achievements);\n     }\n \n+    /**\n+     * GET /courses/{courseId}/achievements : Get all achievements for course.\n+     *\n+     * @param courseId the course to which the achievements belong to\n+     * @return the ResponseEntity with status 200 (OK) and with the found achievements as body\n+     */\n+    @GetMapping(\"/courses/{courseId}/achievements\")\n+    @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Set<Achievement>> getAchievementsForCourse(@PathVariable Long courseId) {\n+        log.debug(\"REST request to get achievements for course : {}\", courseId);\n+        Set<Achievement> achievements = achievementService.findAllByCourseId(courseId);\n+        return ResponseEntity.ok(achievements);\n+    }\n+\n+    /**\n+     * PUT /achievements : Updates an existing achievement.\n+     *\n+     * @param achievement the achievement to update\n+     * @return the ResponseEntity with status 200 (OK) and with body the updated achievement, or with status 500\n+     *         (Internal Server Error) if the achievement couldn't be updated\n+     */\n+    @PutMapping(\"/achievements\")\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Achievement> updateAchievement(@RequestBody Achievement achievement) {\n+        log.debug(\"REST request to update Achievement : {}\", achievement);\n+\n+        if (achievement.getId() == null) {\n+            return ResponseEntity.badRequest().build();\n+        }\n+\n+        Course course = achievement.getCourse();\n+        User user = userService.getUserWithGroupsAndAuthorities();\n+        if (!authCheckService.isAtLeastInstructorInCourse(course, user)) {\n+            throw new AccessForbiddenException(\"You are not allowed to access this resource\");\n+        }\n+\n+        Achievement savedAchievement = achievementService.save(achievement);\n+        return ResponseEntity.ok().headers(HeaderUtil.createEntityUpdateAlert(applicationName, true, ENTITY_NAME, savedAchievement.getId().toString())).body(savedAchievement);\n+    }\n+\n+    /**\n+     * DELETE /achievements/:achievementId : delete the \"id\" achievement.\n+     *\n+     * @param achievementId the id of the achievement to delete\n+     * @return the ResponseEntity with status 200 (OK)\n+     */\n+    @DeleteMapping(\"/achievements/{achievementId}\")\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Void> deleteAchievement(@PathVariable long achievementId) {\n+        log.info(\"REST request to delete Achievement : {}\", achievementId);\n+        User user = userService.getUserWithGroupsAndAuthorities();\n+        Optional<Achievement> optionalAchievement = achievementService.findById(achievementId);\n+        if (optionalAchievement.isEmpty()) {\n+            return ResponseEntity.notFound().build();\n+        }\n+        Achievement achievement = optionalAchievement.get();\n+        Course course = achievement.getCourse();\n+        if (!authCheckService.isAtLeastInstructorInCourse(course, user)) {\n+            throw new AccessForbiddenException(\"You are not allowed to access this resource\");\n+        }\n+\n+        log.info(\"User \" + user.getLogin() + \" has requested to delete the achievement {}\", achievement.getId());\n+        achievementService.delete(achievement);\n+        return ResponseEntity.ok().headers(HeaderUtil.createEntityDeletionAlert(applicationName, true, ENTITY_NAME, achievement.getId().toString())).build();\n+    }\n+\n }\n", "next_change": {"commit": "8d5bfc049d9e75323290b069e7343df6fc579ee7", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\nindex 9a9cebd81ef..19fd5df9305 100644\n--- a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n+++ b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n", "chunk": "@@ -67,62 +43,11 @@ public class AchievementResource {\n      */\n     @GetMapping(\"/courses/{courseId}/achievements\")\n     @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n-    public ResponseEntity<Set<Achievement>> getAchievementsForCourse(@PathVariable Long courseId) {\n-        log.debug(\"REST request to get achievements for course : {}\", courseId);\n-        Set<Achievement> achievements = achievementService.findAllByCourseId(courseId);\n-        return ResponseEntity.ok(achievements);\n-    }\n-\n-    /**\n-     * PUT /achievements : Updates an existing achievement.\n-     *\n-     * @param achievement the achievement to update\n-     * @return the ResponseEntity with status 200 (OK) and with body the updated achievement, or with status 500\n-     *         (Internal Server Error) if the achievement couldn't be updated\n-     */\n-    @PutMapping(\"/achievements\")\n-    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n-    public ResponseEntity<Achievement> updateAchievement(@RequestBody Achievement achievement) {\n-        log.debug(\"REST request to update Achievement : {}\", achievement);\n-\n-        if (achievement.getId() == null) {\n-            return ResponseEntity.badRequest().build();\n-        }\n-\n-        Course course = achievement.getCourse();\n+    public ResponseEntity<Set<Achievement>> getAchievementsForUserInCourse(@PathVariable Long courseId) {\n         User user = userService.getUserWithGroupsAndAuthorities();\n-        if (!authCheckService.isAtLeastInstructorInCourse(course, user)) {\n-            throw new AccessForbiddenException(\"You are not allowed to access this resource\");\n-        }\n-\n-        Achievement savedAchievement = achievementService.save(achievement);\n-        return ResponseEntity.ok().headers(HeaderUtil.createEntityUpdateAlert(applicationName, true, ENTITY_NAME, savedAchievement.getId().toString())).body(savedAchievement);\n-    }\n-\n-    /**\n-     * DELETE /achievements/:achievementId : delete the \"id\" achievement.\n-     *\n-     * @param achievementId the id of the achievement to delete\n-     * @return the ResponseEntity with status 200 (OK)\n-     */\n-    @DeleteMapping(\"/achievements/{achievementId}\")\n-    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n-    public ResponseEntity<Void> deleteAchievement(@PathVariable long achievementId) {\n-        log.info(\"REST request to delete Achievement : {}\", achievementId);\n-        User user = userService.getUserWithGroupsAndAuthorities();\n-        Optional<Achievement> optionalAchievement = achievementService.findById(achievementId);\n-        if (optionalAchievement.isEmpty()) {\n-            return ResponseEntity.notFound().build();\n-        }\n-        Achievement achievement = optionalAchievement.get();\n-        Course course = achievement.getCourse();\n-        if (!authCheckService.isAtLeastInstructorInCourse(course, user)) {\n-            throw new AccessForbiddenException(\"You are not allowed to access this resource\");\n-        }\n-\n-        log.info(\"User \" + user.getLogin() + \" has requested to delete the achievement {}\", achievement.getId());\n-        achievementService.delete(achievement);\n-        return ResponseEntity.ok().headers(HeaderUtil.createEntityDeletionAlert(applicationName, true, ENTITY_NAME, achievement.getId().toString())).build();\n+        log.debug(\"REST request to get achievements for user : {} in course : {}\", user.getLogin(), courseId);\n+        Set<Achievement> achievements = achievementRepository.findAllByUserIdAndCourseId(user.getId(), courseId);\n+        achievementService.prepareForClient(achievements);\n+        return ResponseEntity.ok(achievements);\n     }\n-\n }\n", "next_change": {"commit": "7a5de1a37353eb19f93ef49666bba352198834cb", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\nindex 19fd5df9305..9a9cebd81ef 100644\n--- a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n+++ b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n", "chunk": "@@ -43,11 +67,62 @@ public class AchievementResource {\n      */\n     @GetMapping(\"/courses/{courseId}/achievements\")\n     @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n-    public ResponseEntity<Set<Achievement>> getAchievementsForUserInCourse(@PathVariable Long courseId) {\n-        User user = userService.getUserWithGroupsAndAuthorities();\n-        log.debug(\"REST request to get achievements for user : {} in course : {}\", user.getLogin(), courseId);\n-        Set<Achievement> achievements = achievementRepository.findAllByUserIdAndCourseId(user.getId(), courseId);\n-        achievementService.prepareForClient(achievements);\n+    public ResponseEntity<Set<Achievement>> getAchievementsForCourse(@PathVariable Long courseId) {\n+        log.debug(\"REST request to get achievements for course : {}\", courseId);\n+        Set<Achievement> achievements = achievementService.findAllByCourseId(courseId);\n         return ResponseEntity.ok(achievements);\n     }\n+\n+    /**\n+     * PUT /achievements : Updates an existing achievement.\n+     *\n+     * @param achievement the achievement to update\n+     * @return the ResponseEntity with status 200 (OK) and with body the updated achievement, or with status 500\n+     *         (Internal Server Error) if the achievement couldn't be updated\n+     */\n+    @PutMapping(\"/achievements\")\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Achievement> updateAchievement(@RequestBody Achievement achievement) {\n+        log.debug(\"REST request to update Achievement : {}\", achievement);\n+\n+        if (achievement.getId() == null) {\n+            return ResponseEntity.badRequest().build();\n+        }\n+\n+        Course course = achievement.getCourse();\n+        User user = userService.getUserWithGroupsAndAuthorities();\n+        if (!authCheckService.isAtLeastInstructorInCourse(course, user)) {\n+            throw new AccessForbiddenException(\"You are not allowed to access this resource\");\n+        }\n+\n+        Achievement savedAchievement = achievementService.save(achievement);\n+        return ResponseEntity.ok().headers(HeaderUtil.createEntityUpdateAlert(applicationName, true, ENTITY_NAME, savedAchievement.getId().toString())).body(savedAchievement);\n+    }\n+\n+    /**\n+     * DELETE /achievements/:achievementId : delete the \"id\" achievement.\n+     *\n+     * @param achievementId the id of the achievement to delete\n+     * @return the ResponseEntity with status 200 (OK)\n+     */\n+    @DeleteMapping(\"/achievements/{achievementId}\")\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Void> deleteAchievement(@PathVariable long achievementId) {\n+        log.info(\"REST request to delete Achievement : {}\", achievementId);\n+        User user = userService.getUserWithGroupsAndAuthorities();\n+        Optional<Achievement> optionalAchievement = achievementService.findById(achievementId);\n+        if (optionalAchievement.isEmpty()) {\n+            return ResponseEntity.notFound().build();\n+        }\n+        Achievement achievement = optionalAchievement.get();\n+        Course course = achievement.getCourse();\n+        if (!authCheckService.isAtLeastInstructorInCourse(course, user)) {\n+            throw new AccessForbiddenException(\"You are not allowed to access this resource\");\n+        }\n+\n+        log.info(\"User \" + user.getLogin() + \" has requested to delete the achievement {}\", achievement.getId());\n+        achievementService.delete(achievement);\n+        return ResponseEntity.ok().headers(HeaderUtil.createEntityDeletionAlert(applicationName, true, ENTITY_NAME, achievement.getId().toString())).build();\n+    }\n+\n }\n", "next_change": {"commit": "116151629d403403ee9b750c30c182f44f70e233", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\nindex 9a9cebd81ef..2367bc01f2b 100644\n--- a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n+++ b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n", "chunk": "@@ -26,103 +21,33 @@ import de.tum.in.www1.artemis.web.rest.util.HeaderUtil;\n @RequestMapping(\"/api\")\n public class AchievementResource {\n \n-    private static final String ENTITY_NAME = \"achievement\";\n-\n-    @Value(\"${jhipster.clientApp.name}\")\n-    private String applicationName;\n-\n     private final Logger log = LoggerFactory.getLogger(AchievementResource.class);\n \n-    private final AuthorizationCheckService authCheckService;\n-\n     private final AchievementService achievementService;\n \n+    private final AchievementRepository achievementRepository;\n+\n     private final UserService userService;\n \n-    public AchievementResource(AuthorizationCheckService authCheckService, AchievementService achievementService, UserService userService) {\n-        this.authCheckService = authCheckService;\n+    public AchievementResource(AchievementService achievementService, AchievementRepository achievementRepository, UserService userService) {\n         this.achievementService = achievementService;\n+        this.achievementRepository = achievementRepository;\n         this.userService = userService;\n     }\n \n     /**\n-     * GET /achievements : Get all achievements for user.\n+     * GET /courses/{courseId}/achievements : Get all achievements for requesting user in given course.\n      *\n-     * @return the ResponseEntity with status 200 (OK) and with the found achievements as body\n-     */\n-    @GetMapping(\"/achievements\")\n-    @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n-    public ResponseEntity<Set<Achievement>> getAchievementsForUser() {\n-        User user = userService.getUser();\n-        log.debug(\"REST request to get achievements for user : {}\", user.getLogin());\n-        Set<Achievement> achievements = achievementService.findAllByUserId(user.getId());\n-        return ResponseEntity.ok(achievements);\n-    }\n-\n-    /**\n-     * GET /courses/{courseId}/achievements : Get all achievements for course.\n-     *\n-     * @param courseId the course to which the achievements belong to\n+     * @param courseId\n      * @return the ResponseEntity with status 200 (OK) and with the found achievements as body\n      */\n     @GetMapping(\"/courses/{courseId}/achievements\")\n     @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n-    public ResponseEntity<Set<Achievement>> getAchievementsForCourse(@PathVariable Long courseId) {\n-        log.debug(\"REST request to get achievements for course : {}\", courseId);\n-        Set<Achievement> achievements = achievementService.findAllByCourseId(courseId);\n-        return ResponseEntity.ok(achievements);\n-    }\n-\n-    /**\n-     * PUT /achievements : Updates an existing achievement.\n-     *\n-     * @param achievement the achievement to update\n-     * @return the ResponseEntity with status 200 (OK) and with body the updated achievement, or with status 500\n-     *         (Internal Server Error) if the achievement couldn't be updated\n-     */\n-    @PutMapping(\"/achievements\")\n-    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n-    public ResponseEntity<Achievement> updateAchievement(@RequestBody Achievement achievement) {\n-        log.debug(\"REST request to update Achievement : {}\", achievement);\n-\n-        if (achievement.getId() == null) {\n-            return ResponseEntity.badRequest().build();\n-        }\n-\n-        Course course = achievement.getCourse();\n+    public ResponseEntity<Set<Achievement>> getAchievementsForUserInCourse(@PathVariable Long courseId) {\n         User user = userService.getUserWithGroupsAndAuthorities();\n-        if (!authCheckService.isAtLeastInstructorInCourse(course, user)) {\n-            throw new AccessForbiddenException(\"You are not allowed to access this resource\");\n-        }\n-\n-        Achievement savedAchievement = achievementService.save(achievement);\n-        return ResponseEntity.ok().headers(HeaderUtil.createEntityUpdateAlert(applicationName, true, ENTITY_NAME, savedAchievement.getId().toString())).body(savedAchievement);\n-    }\n-\n-    /**\n-     * DELETE /achievements/:achievementId : delete the \"id\" achievement.\n-     *\n-     * @param achievementId the id of the achievement to delete\n-     * @return the ResponseEntity with status 200 (OK)\n-     */\n-    @DeleteMapping(\"/achievements/{achievementId}\")\n-    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n-    public ResponseEntity<Void> deleteAchievement(@PathVariable long achievementId) {\n-        log.info(\"REST request to delete Achievement : {}\", achievementId);\n-        User user = userService.getUserWithGroupsAndAuthorities();\n-        Optional<Achievement> optionalAchievement = achievementService.findById(achievementId);\n-        if (optionalAchievement.isEmpty()) {\n-            return ResponseEntity.notFound().build();\n-        }\n-        Achievement achievement = optionalAchievement.get();\n-        Course course = achievement.getCourse();\n-        if (!authCheckService.isAtLeastInstructorInCourse(course, user)) {\n-            throw new AccessForbiddenException(\"You are not allowed to access this resource\");\n-        }\n-\n-        log.info(\"User \" + user.getLogin() + \" has requested to delete the achievement {}\", achievement.getId());\n-        achievementService.delete(achievement);\n-        return ResponseEntity.ok().headers(HeaderUtil.createEntityDeletionAlert(applicationName, true, ENTITY_NAME, achievement.getId().toString())).build();\n+        log.debug(\"REST request to get achievements for user : {} in course : {}\", user.getLogin(), courseId);\n+        Set<Achievement> achievements = achievementRepository.findAllByUserIdAndCourseId(user.getId(), courseId);\n+        achievementService.prepareForClient(achievements);\n+        return ResponseEntity.ok(achievements);\n     }\n-\n }\n", "next_change": {"commit": "53c319a21a4053a341e9b24da4987de5abfb656d", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\nindex 2367bc01f2b..7789b9e0412 100644\n--- a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n+++ b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n", "chunk": "@@ -46,7 +42,7 @@ public class AchievementResource {\n     public ResponseEntity<Set<Achievement>> getAchievementsForUserInCourse(@PathVariable Long courseId) {\n         User user = userService.getUserWithGroupsAndAuthorities();\n         log.debug(\"REST request to get achievements for user : {} in course : {}\", user.getLogin(), courseId);\n-        Set<Achievement> achievements = achievementRepository.findAllByUserIdAndCourseId(user.getId(), courseId);\n+        Set<Achievement> achievements = achievementService.findAllByUserIdAndCourseId(user.getId(), courseId);\n         achievementService.prepareForClient(achievements);\n         return ResponseEntity.ok(achievements);\n     }\n", "next_change": {"commit": "669ba95aca108519bc3499ee88a04461aaa1f1b6", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\nindex 7789b9e0412..484ef8ef0f3 100644\n--- a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n+++ b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n", "chunk": "@@ -20,30 +28,89 @@ import de.tum.in.www1.artemis.service.UserService;\n @RequestMapping(\"/api\")\n public class AchievementResource {\n \n+    private static final String ENTITY_NAME = \"achievement\";\n+\n+    @Value(\"${jhipster.clientApp.name}\")\n+    private String applicationName;\n+\n     private final Logger log = LoggerFactory.getLogger(AchievementResource.class);\n \n+    private final AuthorizationCheckService authCheckService;\n+\n     private final AchievementService achievementService;\n \n     private final UserService userService;\n \n-    public AchievementResource(AchievementService achievementService, UserService userService) {\n+    private final AchievementRepository achievementRepository;\n+\n+    public AchievementResource(AuthorizationCheckService authCheckService, AchievementService achievementService, UserService userService,\n+            AchievementRepository achievementRepository) {\n+        this.authCheckService = authCheckService;\n         this.achievementService = achievementService;\n         this.userService = userService;\n+        this.achievementRepository = achievementRepository;\n     }\n \n     /**\n-     * GET /courses/{courseId}/achievements : Get all achievements for requesting user in given course.\n+     * GET /achievements : Get all achievements for user.\n      *\n-     * @param courseId\n      * @return the ResponseEntity with status 200 (OK) and with the found achievements as body\n      */\n-    @GetMapping(\"/courses/{courseId}/achievements\")\n+    @GetMapping(\"/achievements\")\n     @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n-    public ResponseEntity<Set<Achievement>> getAchievementsForUserInCourse(@PathVariable Long courseId) {\n-        User user = userService.getUserWithGroupsAndAuthorities();\n-        log.debug(\"REST request to get achievements for user : {} in course : {}\", user.getLogin(), courseId);\n-        Set<Achievement> achievements = achievementService.findAllByUserIdAndCourseId(user.getId(), courseId);\n-        achievementService.prepareForClient(achievements);\n+    public ResponseEntity<Set<Achievement>> getAchievementsForUser() {\n+        User user = userService.getUser();\n+        log.debug(\"REST request to get achievements for user : {}\", user.getLogin());\n+        Set<Achievement> achievements = achievementService.findAllForUser(user.getId());\n         return ResponseEntity.ok(achievements);\n     }\n+\n+    /**\n+     * PUT /achievements : Updates an existing achievement.\n+     *\n+     * @param achievement the achievement to update\n+     * @return the ResponseEntity with status 200 (OK) and with body the updated achievement, or with status 500\n+     *         (Internal Server Error) if the achievement couldn't be updated\n+     * @throws URISyntaxException if the Location URI syntax is incorrect\n+     */\n+    @PutMapping(\"/achievements\")\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Achievement> updateAchievement(@RequestBody Achievement achievement) throws URISyntaxException {\n+        log.debug(\"REST request to update Achievement : {}\", achievement);\n+\n+        Course course = achievement.getCourse();\n+        User user = userService.getUserWithGroupsAndAuthorities();\n+        if (!authCheckService.isAtLeastInstructorInCourse(course, user)) {\n+            throw new AccessForbiddenException(\"You are not allowed to access this resource\");\n+        }\n+\n+        if (achievement.getId() == null) {\n+            return ResponseEntity.badRequest().build();\n+        }\n+\n+        Achievement result = achievementRepository.save(achievement);\n+        return ResponseEntity.ok().headers(HeaderUtil.createEntityUpdateAlert(applicationName, true, ENTITY_NAME, result.getId().toString())).body(result);\n+    }\n+\n+    /**\n+     * DELETE /achievements/:achievementId : delete the \"id\" achievement.\n+     *\n+     * @param achievementId the id of the achievement to delete\n+     * @return the ResponseEntity with status 200 (OK)\n+     */\n+    @DeleteMapping(\"/achievements/{achievementId}\")\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Void> deleteAchievement(@PathVariable long achievementId) {\n+        log.info(\"REST request to delete Achievement : {}\", achievementId);\n+        User user = userService.getUserWithGroupsAndAuthorities();\n+        Optional<Achievement> optionalAchievement = achievementService.findById(achievementId);\n+        if (optionalAchievement.isEmpty()) {\n+            return ResponseEntity.notFound().build();\n+        }\n+        Achievement achievement = optionalAchievement.get();\n+        log.info(\"User \" + user.getLogin() + \" has requested to delete the achievement {}\", achievement.getId());\n+        achievementService.delete(achievement);\n+        return ResponseEntity.ok().headers(HeaderUtil.createEntityDeletionAlert(applicationName, true, ENTITY_NAME, achievement.getId().toString())).build();\n+    }\n+\n }\n", "next_change": {"commit": "0616ac4ef001698a1e962c595c2ceecc0eb76dd0", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\nindex 484ef8ef0f3..efa5f0e0668 100644\n--- a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n+++ b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n", "chunk": "@@ -108,6 +122,11 @@ public class AchievementResource {\n             return ResponseEntity.notFound().build();\n         }\n         Achievement achievement = optionalAchievement.get();\n+        Course course = achievement.getCourse();\n+        if (!authCheckService.isAtLeastInstructorInCourse(course, user)) {\n+            throw new AccessForbiddenException(\"You are not allowed to access this resource\");\n+        }\n+\n         log.info(\"User \" + user.getLogin() + \" has requested to delete the achievement {}\", achievement.getId());\n         achievementService.delete(achievement);\n         return ResponseEntity.ok().headers(HeaderUtil.createEntityDeletionAlert(applicationName, true, ENTITY_NAME, achievement.getId().toString())).build();\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTY0ODU1MQ==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r479648551", "body": "Use delete REST call", "bodyText": "Use delete REST call", "bodyHTML": "<p dir=\"auto\">Use delete REST call</p>", "author": "fde312", "createdAt": "2020-08-29T13:12:22Z", "path": "src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java", "diffHunk": "@@ -0,0 +1,137 @@\n+package de.tum.in.www1.artemis;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.util.Set;\n+\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import de.tum.in.www1.artemis.domain.Achievement;\n+import de.tum.in.www1.artemis.domain.Course;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.repository.AchievementRepository;\n+import de.tum.in.www1.artemis.repository.CourseRepository;\n+import de.tum.in.www1.artemis.repository.UserRepository;\n+import de.tum.in.www1.artemis.service.AchievementService;\n+import de.tum.in.www1.artemis.util.DatabaseUtilService;\n+import de.tum.in.www1.artemis.util.RequestUtilService;\n+\n+public class AchievementIntegrationTest extends AbstractSpringIntegrationBambooBitbucketJiraTest {\n+\n+    @Autowired\n+    DatabaseUtilService database;\n+\n+    @Autowired\n+    RequestUtilService request;\n+\n+    @Autowired\n+    AchievementService achievementService;\n+\n+    @Autowired\n+    AchievementRepository achievementRepository;\n+\n+    @Autowired\n+    UserRepository userRepository;\n+\n+    @Autowired\n+    CourseRepository courseRepository;\n+\n+    private User user;\n+\n+    private Course course;\n+\n+    private Achievement achievement;\n+\n+    @BeforeEach\n+    public void initTestCase() {\n+        user = database.addUsers(1, 0, 0).get(0);\n+        course = database.addEmptyCourse();\n+\n+        achievement = new Achievement();\n+        achievement.setId(1L);\n+        achievement.setTitle(\"Test Achievement\");\n+        achievement.setDescription(\"Create correct relations\");\n+        achievement.setIcon(\"\");\n+        achievement.setRank(1);\n+        achievement.setCourse(course);\n+\n+        achievement = achievementRepository.save(achievement);\n+    }\n+\n+    @AfterEach\n+    public void resetDatabase() {\n+        database.resetDatabase();\n+    }\n+\n+    @Test\n+    public void testManyToManyRelationToUser() {\n+        assertThat(user.getAchievements().size()).isEqualTo(0).as(\"Number of achievements for user should be 0\");\n+\n+        user.addAchievement(achievement);\n+        assertThat(user.getAchievements().size()).isEqualTo(1).as(\"Number of achievements for user should be 1\");\n+        assertThat(user.getAchievements().contains(achievement)).isTrue().as(\"User has correct achievement\");\n+        assertThat(achievement.getUsers().size()).isEqualTo(1).as(\"Number of users for achievement should be 1\");\n+        assertThat(achievement.getUsers().contains(user)).isTrue().as(\"Achievement has correct user\");\n+\n+        user.removeAchievement(achievement);\n+        assertThat(user.getAchievements().size()).isEqualTo(0).as(\"Number of achievements for user should be 0\");\n+        assertThat(user.getAchievements().contains(achievement)).isFalse().as(\"User does not have removed achievement\");\n+        assertThat(achievement.getUsers().size()).isEqualTo(0).as(\"Number of users for achievement should be 0\");\n+        assertThat(achievement.getUsers().contains(user)).isFalse().as(\"Achievement does not have incorrect user\");\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"USER\")\n+    public void testManyToManyRelationToUserRepository() throws Exception {\n+        user.addAchievement(achievement);\n+        user = userRepository.save(user);\n+\n+        var achievements = request.get(\"/api/achievements\", HttpStatus.OK, Set.class);\n+        assertThat(achievements.size()).isEqualTo(1).as(\"Number of achievements for user should be 1\");\n+\n+        userRepository.delete(user);\n+        assertThat(achievementRepository.findAll().contains(achievement)).isTrue().as(\"Achievement does not get deleted if user does\");\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"USER\")\n+    public void testManyToOneRelationToCourseRepository() throws Exception {\n+        var achievements = request.get(\"/api/courses/\" + course.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n+        assertThat(achievements.size()).isEqualTo(1).as(\"Number of achievements for course should be 1\");\n+\n+        courseRepository.delete(course);\n+        assertThat(achievementRepository.findAll().contains(achievement)).isFalse().as(\"Achievement gets deleted if course does\");\n+    }\n+\n+    @Test\n+    public void testUpdateAchievement() {\n+        user.addAchievement(achievement);\n+        userRepository.save(user);\n+        var achievementToUpdate = achievementRepository.findById(achievement.getId());\n+        if (achievementToUpdate.isPresent()) {\n+            achievementToUpdate.get().setDescription(\"Updated achievement\");\n+            achievementRepository.save(achievementToUpdate.get());\n+            assertThat(achievementRepository.findById(achievement.getId()).get()).isEqualTo(achievementToUpdate.get()).as(\"Achievement is updated correctly\");\n+        }\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"USER\")\n+    public void testDeleteAchievement() {\n+        user.addAchievement(achievement);\n+        user = userRepository.save(user);\n+        achievement = achievementRepository.save(achievement);\n+        achievementService.delete(achievement);", "originalCommit": "198e5998d51d5103ab55075d2bee38be7a95c67d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc1Nzg4MQ==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r479757881", "bodyText": "done", "author": "balazs-czopf", "createdAt": "2020-08-30T11:30:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTY0ODU1MQ=="}], "type": "inlineReview", "revised_code": {"commit": "6aa68b0ab7a071fa631c7c72cdb8ea02ccf15a39", "changed_code": [{"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\nindex 21c051dc597..0f3ea1379ab 100644\n--- a/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\n", "chunk": "@@ -70,68 +88,100 @@ public class AchievementIntegrationTest extends AbstractSpringIntegrationBambooB\n \n     @Test\n     public void testManyToManyRelationToUser() {\n-        assertThat(user.getAchievements().size()).isEqualTo(0).as(\"Number of achievements for user should be 0\");\n-\n-        user.addAchievement(achievement);\n-        assertThat(user.getAchievements().size()).isEqualTo(1).as(\"Number of achievements for user should be 1\");\n-        assertThat(user.getAchievements().contains(achievement)).isTrue().as(\"User has correct achievement\");\n-        assertThat(achievement.getUsers().size()).isEqualTo(1).as(\"Number of users for achievement should be 1\");\n-        assertThat(achievement.getUsers().contains(user)).isTrue().as(\"Achievement has correct user\");\n-\n-        user.removeAchievement(achievement);\n-        assertThat(user.getAchievements().size()).isEqualTo(0).as(\"Number of achievements for user should be 0\");\n-        assertThat(user.getAchievements().contains(achievement)).isFalse().as(\"User does not have removed achievement\");\n-        assertThat(achievement.getUsers().size()).isEqualTo(0).as(\"Number of users for achievement should be 0\");\n-        assertThat(achievement.getUsers().contains(user)).isFalse().as(\"Achievement does not have incorrect user\");\n+        assertThat(student.getAchievements().size()).as(\"Number of achievements for user should be 0\").isEqualTo(0);\n+\n+        student.addAchievement(first_achievement);\n+        assertThat(student.getAchievements().size()).as(\"Number of achievements for user should be 1\").isEqualTo(1);\n+        assertThat(student.getAchievements().contains(first_achievement)).as(\"User has correct achievement\").isTrue();\n+        assertThat(first_achievement.getUsers().size()).as(\"Number of users for achievement should be 1\").isEqualTo(1);\n+        assertThat(first_achievement.getUsers().contains(student)).as(\"Achievement has correct user\").isTrue();\n+\n+        student.removeAchievement(first_achievement);\n+        assertThat(student.getAchievements().size()).as(\"Number of achievements for user should be 0\").isEqualTo(0);\n+        assertThat(student.getAchievements().contains(first_achievement)).as(\"User does not have removed achievement\").isFalse();\n+        assertThat(first_achievement.getUsers().size()).as(\"Number of users for achievement should be 0\").isEqualTo(0);\n+        assertThat(first_achievement.getUsers().contains(student)).as(\"Achievement does not have incorrect user\").isFalse();\n     }\n \n     @Test\n     @WithMockUser(value = \"student1\", roles = \"USER\")\n-    public void testManyToManyRelationToUserRepository() throws Exception {\n-        user.addAchievement(achievement);\n-        user = userRepository.save(user);\n+    public void testDeleteUser() throws Exception {\n+        student.addAchievement(first_achievement);\n+        student = userRepository.save(student);\n \n         var achievements = request.get(\"/api/achievements\", HttpStatus.OK, Set.class);\n-        assertThat(achievements.size()).isEqualTo(1).as(\"Number of achievements for user should be 1\");\n+        assertThat(achievements.size()).as(\"Number of achievements for user should be 1\").isEqualTo(1);\n \n-        userRepository.delete(user);\n-        assertThat(achievementRepository.findAll().contains(achievement)).isTrue().as(\"Achievement does not get deleted if user does\");\n+        userRepository.delete(student);\n+        assertThat(achievementService.findAll().contains(first_achievement)).as(\"Achievement does not get deleted if user does\").isTrue();\n     }\n \n     @Test\n-    @WithMockUser(value = \"student1\", roles = \"USER\")\n-    public void testManyToOneRelationToCourseRepository() throws Exception {\n-        var achievements = request.get(\"/api/courses/\" + course.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n-        assertThat(achievements.size()).isEqualTo(1).as(\"Number of achievements for course should be 1\");\n+    @WithMockUser(value = \"admin\", roles = \"ADMIN\")\n+    public void testDeleteCourse() throws Exception {\n+        student.addAchievement(first_achievement);\n+        student = userRepository.save(student);\n \n-        courseRepository.delete(course);\n-        assertThat(achievementRepository.findAll().contains(achievement)).isFalse().as(\"Achievement gets deleted if course does\");\n+        var achievements = request.get(\"/api/courses/\" + first_course.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n+        assertThat(achievements.size()).as(\"Number of achievements for course should be 2\").isEqualTo(2);\n+\n+        request.delete(\"/api/courses/\" + first_course.getId(), HttpStatus.OK);\n+        assertThat(achievementService.findAll().contains(first_achievement)).as(\"Achievement gets deleted if course does\").isFalse();\n     }\n \n     @Test\n-    public void testUpdateAchievement() {\n-        user.addAchievement(achievement);\n-        userRepository.save(user);\n-        var achievementToUpdate = achievementRepository.findById(achievement.getId());\n-        if (achievementToUpdate.isPresent()) {\n-            achievementToUpdate.get().setDescription(\"Updated achievement\");\n-            achievementRepository.save(achievementToUpdate.get());\n-            assertThat(achievementRepository.findById(achievement.getId()).get()).isEqualTo(achievementToUpdate.get()).as(\"Achievement is updated correctly\");\n-        }\n+    @WithMockUser(value = \"admin\", roles = \"ADMIN\")\n+    public void testDeleteExercise() throws Exception {\n+        student.addAchievement(first_achievement);\n+        student = userRepository.save(student);\n+\n+        var achievements = achievementService.findAllByExerciseId(first_exercise.getId());\n+        assertThat(achievements.size()).as(\"Number of achievements for course should be 2\").isEqualTo(2);\n+\n+        exerciseService.delete(first_exercise.getId(), false, false);\n+        assertThat(achievementService.findById(first_achievement.getId())).as(\"Achievement does not get deleted if exercise does\").isPresent();\n+        assertThat(achievementService.findById(third_achievement.getId())).as(\"Achievement does not get deleted if exercise does\").isPresent();\n     }\n \n     @Test\n-    @WithMockUser(value = \"student1\", roles = \"USER\")\n-    public void testDeleteAchievement() {\n-        user.addAchievement(achievement);\n-        user = userRepository.save(user);\n-        achievement = achievementRepository.save(achievement);\n-        achievementService.delete(achievement);\n-\n-        assertThat(achievementRepository.findAll().size()).isEqualTo(0).as(\"Achievement is deleted\");\n-        assertThat(userRepository.findById(user.getId()).isPresent()).isTrue().as(\"User is not deleted\");\n-        assertThat(userRepository.findById(user.getId()).get().getAchievements().size()).isEqualTo(0).as(\"User has no achievements\");\n-        assertThat(courseRepository.findById(course.getId()).isPresent()).isTrue().as(\"Course is not deleted\");\n-        assertThat(achievementService.findAllForCourse(course.getId()).size()).isEqualTo(0).as(\"Course has no achievements\");\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testUpdateAchievement() throws Exception {\n+        instructor.addAchievement(first_achievement);\n+        userRepository.save(instructor);\n+        var achievementToUpdate = achievementService.findById(first_achievement.getId()).get();\n+        achievementToUpdate.setDescription(\"Updated achievement\");\n+        request.put(\"/api/achievements\", achievementToUpdate, HttpStatus.OK);\n+        assertThat(achievementService.findById(first_achievement.getId()).get()).as(\"Achievement is updated correctly\").isEqualTo(achievementToUpdate);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testDeleteAchievement() throws Exception {\n+        instructor.addAchievement(first_achievement);\n+        instructor = userRepository.save(instructor);\n+        first_achievement = achievementService.save(first_achievement);\n+        request.delete(\"/api/achievements/\" + first_achievement.getId(), HttpStatus.OK);\n+\n+        assertThat(achievementService.findById(first_achievement.getId())).as(\"Achievement is deleted\").isNotPresent();\n+        assertThat(userRepository.findById(instructor.getId()).isPresent()).as(\"User is not deleted\").isTrue();\n+        assertThat(request.get(\"/api/achievements\", HttpStatus.OK, Set.class).size()).as(\"User has no achievements\").isEqualTo(0);\n+        assertThat(courseService.findOne(first_course.getId())).as(\"Course is not deleted\").isNotNull();\n+        var achievements = request.get(\"/api/courses/\" + first_course.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n+        assertThat(achievements.size()).as(\"Course has only one achievement\").isEqualTo(1);\n     }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testBadRequests() throws Exception {\n+        var emptyAchievement = new Achievement();\n+        request.put(\"/api/achievements\", emptyAchievement, HttpStatus.BAD_REQUEST);\n+        request.delete(\"/api/achievements/\" + 999L, HttpStatus.NOT_FOUND);\n+        instructor.setGroups(new HashSet<>());\n+        userRepository.save(instructor);\n+        emptyAchievement.setId(2L);\n+        emptyAchievement.setCourse(first_course);\n+        request.put(\"/api/achievements\", emptyAchievement, HttpStatus.FORBIDDEN);\n+        request.delete(\"/api/achievements/\" + first_achievement.getId(), HttpStatus.FORBIDDEN);\n+    }\n+\n }\n", "next_change": {"commit": "8d5bfc049d9e75323290b069e7343df6fc579ee7", "changed_code": [{"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\nindex 0f3ea1379ab..6d5c48c239a 100644\n--- a/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\n", "chunk": "@@ -87,101 +82,67 @@ public class AchievementIntegrationTest extends AbstractSpringIntegrationBambooB\n     }\n \n     @Test\n-    public void testManyToManyRelationToUser() {\n-        assertThat(student.getAchievements().size()).as(\"Number of achievements for user should be 0\").isEqualTo(0);\n-\n-        student.addAchievement(first_achievement);\n-        assertThat(student.getAchievements().size()).as(\"Number of achievements for user should be 1\").isEqualTo(1);\n-        assertThat(student.getAchievements().contains(first_achievement)).as(\"User has correct achievement\").isTrue();\n-        assertThat(first_achievement.getUsers().size()).as(\"Number of users for achievement should be 1\").isEqualTo(1);\n-        assertThat(first_achievement.getUsers().contains(student)).as(\"Achievement has correct user\").isTrue();\n-\n-        student.removeAchievement(first_achievement);\n-        assertThat(student.getAchievements().size()).as(\"Number of achievements for user should be 0\").isEqualTo(0);\n-        assertThat(student.getAchievements().contains(first_achievement)).as(\"User does not have removed achievement\").isFalse();\n-        assertThat(first_achievement.getUsers().size()).as(\"Number of users for achievement should be 0\").isEqualTo(0);\n-        assertThat(first_achievement.getUsers().contains(student)).as(\"Achievement does not have incorrect user\").isFalse();\n-    }\n-\n-    @Test\n-    @WithMockUser(value = \"student1\", roles = \"USER\")\n+    @WithMockUser(value = \"student1\", roles = \"ADMIN\")\n     public void testDeleteUser() throws Exception {\n-        student.addAchievement(first_achievement);\n-        student = userRepository.save(student);\n-\n-        var achievements = request.get(\"/api/achievements\", HttpStatus.OK, Set.class);\n-        assertThat(achievements.size()).as(\"Number of achievements for user should be 1\").isEqualTo(1);\n-\n-        userRepository.delete(student);\n-        assertThat(achievementService.findAll().contains(first_achievement)).as(\"Achievement does not get deleted if user does\").isTrue();\n+        initTest();\n+        request.delete(\"/api/users/\" + student.getLogin(), HttpStatus.OK);\n+        var achievementsFirstCourse = request.get(\"/api/courses/\" + firstCourse.getId() + \"/achievements\", HttpStatus.NOT_FOUND, Set.class);\n+        assertThat(achievementsFirstCourse).as(\"Achievements for user should be null in course \" + firstCourse.getId()).isNullOrEmpty();\n+        var achievementsSecondCourse = request.get(\"/api/courses/\" + secondCourse.getId() + \"/achievements\", HttpStatus.NOT_FOUND, Set.class);\n+        assertThat(achievementsSecondCourse).as(\"Achievements for user should be null in course \" + secondCourse.getId()).isNullOrEmpty();\n     }\n \n     @Test\n-    @WithMockUser(value = \"admin\", roles = \"ADMIN\")\n+    @WithMockUser(value = \"student1\", roles = \"ADMIN\")\n     public void testDeleteCourse() throws Exception {\n-        student.addAchievement(first_achievement);\n-        student = userRepository.save(student);\n-\n-        var achievements = request.get(\"/api/courses/\" + first_course.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n-        assertThat(achievements.size()).as(\"Number of achievements for course should be 2\").isEqualTo(2);\n-\n-        request.delete(\"/api/courses/\" + first_course.getId(), HttpStatus.OK);\n-        assertThat(achievementService.findAll().contains(first_achievement)).as(\"Achievement gets deleted if course does\").isFalse();\n+        initTest();\n+        var courseId = firstCourse.getId();\n+        request.delete(\"/api/courses/\" + courseId, HttpStatus.OK);\n+        var achievementsFirstCourse = request.get(\"/api/courses/\" + courseId + \"/achievements\", HttpStatus.OK, Set.class);\n+        assertThat(achievementsFirstCourse.size()).as(\"Achievements in course \" + courseId + \" get deleted if course \" + courseId + \" is deleted\").isEqualTo(0);\n+        var achievementsSecondCourse = request.get(\"/api/courses/\" + secondCourse.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n+        assertThat(achievementsSecondCourse.size()).as(\"Achievements in course \" + secondCourse.getId() + \" do not get deleted if course \" + courseId + \" is deleted\").isEqualTo(4);\n     }\n \n     @Test\n-    @WithMockUser(value = \"admin\", roles = \"ADMIN\")\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n     public void testDeleteExercise() throws Exception {\n-        student.addAchievement(first_achievement);\n-        student = userRepository.save(student);\n-\n-        var achievements = achievementService.findAllByExerciseId(first_exercise.getId());\n-        assertThat(achievements.size()).as(\"Number of achievements for course should be 2\").isEqualTo(2);\n-\n-        exerciseService.delete(first_exercise.getId(), false, false);\n-        assertThat(achievementService.findById(first_achievement.getId())).as(\"Achievement does not get deleted if exercise does\").isPresent();\n-        assertThat(achievementService.findById(third_achievement.getId())).as(\"Achievement does not get deleted if exercise does\").isPresent();\n+        initTest();\n+        request.delete(\"/api/modeling-exercises/\" + firstExercise.getId(), HttpStatus.OK);\n+        var achievementsFirstCourse = request.get(\"/api/courses/\" + firstCourse.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n+        assertThat(achievementsFirstCourse.size()).as(\"Number of achievements for user should be 4 in course \" + firstCourse.getId()).isEqualTo(4);\n+        var achievementsSecondCourse = request.get(\"/api/courses/\" + secondCourse.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n+        assertThat(achievementsSecondCourse.size()).as(\"Number of achievements for user should be 4 in course \" + secondCourse.getId()).isEqualTo(4);\n     }\n \n     @Test\n-    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n-    public void testUpdateAchievement() throws Exception {\n-        instructor.addAchievement(first_achievement);\n-        userRepository.save(instructor);\n-        var achievementToUpdate = achievementService.findById(first_achievement.getId()).get();\n-        achievementToUpdate.setDescription(\"Updated achievement\");\n-        request.put(\"/api/achievements\", achievementToUpdate, HttpStatus.OK);\n-        assertThat(achievementService.findById(first_achievement.getId()).get()).as(\"Achievement is updated correctly\").isEqualTo(achievementToUpdate);\n+    @WithMockUser(value = \"student1\", roles = \"USER\")\n+    public void testRewardAchievement() throws Exception {\n+        var participation = database.addParticipationForExercise(firstExercise, student.getLogin());\n+        var result = database.addResultToParticipation(participation);\n+        Set<Result> results = new HashSet<>();\n+        results.add(result);\n+        participation.setResults(results);\n+        participationRepository.save(participation);\n+        achievementService.checkForAchievements(result);\n+        var achievementsFirstCourse = request.get(\"/api/courses/\" + firstCourse.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n+        assertThat(achievementsFirstCourse.size()).as(\"User got an achievement\").isEqualTo(1);\n     }\n \n-    @Test\n-    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n-    public void testDeleteAchievement() throws Exception {\n-        instructor.addAchievement(first_achievement);\n+    private void initTest() throws Exception {\n+        var allAchievements = achievementRepository.findAllByCourseId(firstCourse.getId());\n+        allAchievements.addAll(achievementRepository.findAllByCourseId(secondCourse.getId()));\n+\n+        for (Achievement achievement : allAchievements) {\n+            student.addAchievement(achievement);\n+            instructor.addAchievement(achievement);\n+        }\n+        student = userRepository.save(student);\n         instructor = userRepository.save(instructor);\n-        first_achievement = achievementService.save(first_achievement);\n-        request.delete(\"/api/achievements/\" + first_achievement.getId(), HttpStatus.OK);\n-\n-        assertThat(achievementService.findById(first_achievement.getId())).as(\"Achievement is deleted\").isNotPresent();\n-        assertThat(userRepository.findById(instructor.getId()).isPresent()).as(\"User is not deleted\").isTrue();\n-        assertThat(request.get(\"/api/achievements\", HttpStatus.OK, Set.class).size()).as(\"User has no achievements\").isEqualTo(0);\n-        assertThat(courseService.findOne(first_course.getId())).as(\"Course is not deleted\").isNotNull();\n-        var achievements = request.get(\"/api/courses/\" + first_course.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n-        assertThat(achievements.size()).as(\"Course has only one achievement\").isEqualTo(1);\n-    }\n \n-    @Test\n-    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n-    public void testBadRequests() throws Exception {\n-        var emptyAchievement = new Achievement();\n-        request.put(\"/api/achievements\", emptyAchievement, HttpStatus.BAD_REQUEST);\n-        request.delete(\"/api/achievements/\" + 999L, HttpStatus.NOT_FOUND);\n-        instructor.setGroups(new HashSet<>());\n-        userRepository.save(instructor);\n-        emptyAchievement.setId(2L);\n-        emptyAchievement.setCourse(first_course);\n-        request.put(\"/api/achievements\", emptyAchievement, HttpStatus.FORBIDDEN);\n-        request.delete(\"/api/achievements/\" + first_achievement.getId(), HttpStatus.FORBIDDEN);\n+        var achievementsFirstCourse = request.get(\"/api/courses/\" + firstCourse.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n+        assertThat(achievementsFirstCourse.size()).as(\"Number of achievements for user should be 12 in course \" + firstCourse.getId()).isEqualTo(12);\n+        var achievementsSecondCourse = request.get(\"/api/courses/\" + secondCourse.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n+        assertThat(achievementsSecondCourse.size()).as(\"Number of achievements for user should be 4 in course \" + secondCourse.getId()).isEqualTo(4);\n     }\n-\n }\n", "next_change": {"commit": "7a5de1a37353eb19f93ef49666bba352198834cb", "changed_code": [{"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\nindex 6d5c48c239a..3b8af6aa4c6 100644\n--- a/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\n", "chunk": "@@ -82,67 +85,101 @@ public class AchievementIntegrationTest extends AbstractSpringIntegrationBambooB\n     }\n \n     @Test\n-    @WithMockUser(value = \"student1\", roles = \"ADMIN\")\n+    public void testManyToManyRelationToUser() {\n+        assertThat(student.getAchievements().size()).as(\"Number of achievements for user should be 0\").isEqualTo(0);\n+\n+        student.addAchievement(first_achievement);\n+        assertThat(student.getAchievements().size()).as(\"Number of achievements for user should be 1\").isEqualTo(1);\n+        assertThat(student.getAchievements().contains(first_achievement)).as(\"User has correct achievement\").isTrue();\n+        assertThat(first_achievement.getUsers().size()).as(\"Number of users for achievement should be 1\").isEqualTo(1);\n+        assertThat(first_achievement.getUsers().contains(student)).as(\"Achievement has correct user\").isTrue();\n+\n+        student.removeAchievement(first_achievement);\n+        assertThat(student.getAchievements().size()).as(\"Number of achievements for user should be 0\").isEqualTo(0);\n+        assertThat(student.getAchievements().contains(first_achievement)).as(\"User does not have removed achievement\").isFalse();\n+        assertThat(first_achievement.getUsers().size()).as(\"Number of users for achievement should be 0\").isEqualTo(0);\n+        assertThat(first_achievement.getUsers().contains(student)).as(\"Achievement does not have incorrect user\").isFalse();\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"USER\")\n     public void testDeleteUser() throws Exception {\n-        initTest();\n-        request.delete(\"/api/users/\" + student.getLogin(), HttpStatus.OK);\n-        var achievementsFirstCourse = request.get(\"/api/courses/\" + firstCourse.getId() + \"/achievements\", HttpStatus.NOT_FOUND, Set.class);\n-        assertThat(achievementsFirstCourse).as(\"Achievements for user should be null in course \" + firstCourse.getId()).isNullOrEmpty();\n-        var achievementsSecondCourse = request.get(\"/api/courses/\" + secondCourse.getId() + \"/achievements\", HttpStatus.NOT_FOUND, Set.class);\n-        assertThat(achievementsSecondCourse).as(\"Achievements for user should be null in course \" + secondCourse.getId()).isNullOrEmpty();\n+        student.addAchievement(first_achievement);\n+        student = userRepository.save(student);\n+\n+        var achievements = request.get(\"/api/achievements\", HttpStatus.OK, Set.class);\n+        assertThat(achievements.size()).as(\"Number of achievements for user should be 1\").isEqualTo(1);\n+\n+        userRepository.delete(student);\n+        assertThat(achievementService.findAll().contains(first_achievement)).as(\"Achievement does not get deleted if user does\").isTrue();\n     }\n \n     @Test\n-    @WithMockUser(value = \"student1\", roles = \"ADMIN\")\n+    @WithMockUser(value = \"admin\", roles = \"ADMIN\")\n     public void testDeleteCourse() throws Exception {\n-        initTest();\n-        var courseId = firstCourse.getId();\n-        request.delete(\"/api/courses/\" + courseId, HttpStatus.OK);\n-        var achievementsFirstCourse = request.get(\"/api/courses/\" + courseId + \"/achievements\", HttpStatus.OK, Set.class);\n-        assertThat(achievementsFirstCourse.size()).as(\"Achievements in course \" + courseId + \" get deleted if course \" + courseId + \" is deleted\").isEqualTo(0);\n-        var achievementsSecondCourse = request.get(\"/api/courses/\" + secondCourse.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n-        assertThat(achievementsSecondCourse.size()).as(\"Achievements in course \" + secondCourse.getId() + \" do not get deleted if course \" + courseId + \" is deleted\").isEqualTo(4);\n+        student.addAchievement(first_achievement);\n+        student = userRepository.save(student);\n+\n+        var achievements = request.get(\"/api/courses/\" + first_course.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n+        assertThat(achievements.size()).as(\"Number of achievements for course should be 2\").isEqualTo(2);\n+\n+        request.delete(\"/api/courses/\" + first_course.getId(), HttpStatus.OK);\n+        assertThat(achievementService.findAll().contains(first_achievement)).as(\"Achievement gets deleted if course does\").isFalse();\n     }\n \n     @Test\n-    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    @WithMockUser(value = \"admin\", roles = \"ADMIN\")\n     public void testDeleteExercise() throws Exception {\n-        initTest();\n-        request.delete(\"/api/modeling-exercises/\" + firstExercise.getId(), HttpStatus.OK);\n-        var achievementsFirstCourse = request.get(\"/api/courses/\" + firstCourse.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n-        assertThat(achievementsFirstCourse.size()).as(\"Number of achievements for user should be 4 in course \" + firstCourse.getId()).isEqualTo(4);\n-        var achievementsSecondCourse = request.get(\"/api/courses/\" + secondCourse.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n-        assertThat(achievementsSecondCourse.size()).as(\"Number of achievements for user should be 4 in course \" + secondCourse.getId()).isEqualTo(4);\n+        student.addAchievement(first_achievement);\n+        student = userRepository.save(student);\n+\n+        var achievements = achievementService.findAllByExerciseId(first_exercise.getId());\n+        assertThat(achievements.size()).as(\"Number of achievements for course should be 2\").isEqualTo(2);\n+\n+        exerciseService.delete(first_exercise.getId(), false, false);\n+        assertThat(achievementService.findById(first_achievement.getId())).as(\"Achievement gets deleted if exercise does\").isNotPresent();\n+        assertThat(achievementService.findById(third_achievement.getId())).as(\"Achievement gets deleted if exercise does\").isNotPresent();\n     }\n \n     @Test\n-    @WithMockUser(value = \"student1\", roles = \"USER\")\n-    public void testRewardAchievement() throws Exception {\n-        var participation = database.addParticipationForExercise(firstExercise, student.getLogin());\n-        var result = database.addResultToParticipation(participation);\n-        Set<Result> results = new HashSet<>();\n-        results.add(result);\n-        participation.setResults(results);\n-        participationRepository.save(participation);\n-        achievementService.checkForAchievements(result);\n-        var achievementsFirstCourse = request.get(\"/api/courses/\" + firstCourse.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n-        assertThat(achievementsFirstCourse.size()).as(\"User got an achievement\").isEqualTo(1);\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testUpdateAchievement() throws Exception {\n+        instructor.addAchievement(first_achievement);\n+        userRepository.save(instructor);\n+        var achievementToUpdate = achievementService.findById(first_achievement.getId()).get();\n+        achievementToUpdate.setDescription(\"Updated achievement\");\n+        request.put(\"/api/achievements\", achievementToUpdate, HttpStatus.OK);\n+        assertThat(achievementService.findById(first_achievement.getId()).get()).as(\"Achievement is updated correctly\").isEqualTo(achievementToUpdate);\n     }\n \n-    private void initTest() throws Exception {\n-        var allAchievements = achievementRepository.findAllByCourseId(firstCourse.getId());\n-        allAchievements.addAll(achievementRepository.findAllByCourseId(secondCourse.getId()));\n-\n-        for (Achievement achievement : allAchievements) {\n-            student.addAchievement(achievement);\n-            instructor.addAchievement(achievement);\n-        }\n-        student = userRepository.save(student);\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testDeleteAchievement() throws Exception {\n+        instructor.addAchievement(first_achievement);\n         instructor = userRepository.save(instructor);\n+        first_achievement = achievementService.save(first_achievement);\n+        request.delete(\"/api/achievements/\" + first_achievement.getId(), HttpStatus.OK);\n+\n+        assertThat(achievementService.findById(first_achievement.getId())).as(\"Achievement is deleted\").isNotPresent();\n+        assertThat(userRepository.findById(instructor.getId()).isPresent()).as(\"User is not deleted\").isTrue();\n+        assertThat(request.get(\"/api/achievements\", HttpStatus.OK, Set.class).size()).as(\"User has no achievements\").isEqualTo(0);\n+        assertThat(courseService.findOne(first_course.getId())).as(\"Course is not deleted\").isNotNull();\n+        var achievements = request.get(\"/api/courses/\" + first_course.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n+        assertThat(achievements.size()).as(\"Course has only one achievement\").isEqualTo(1);\n+    }\n \n-        var achievementsFirstCourse = request.get(\"/api/courses/\" + firstCourse.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n-        assertThat(achievementsFirstCourse.size()).as(\"Number of achievements for user should be 12 in course \" + firstCourse.getId()).isEqualTo(12);\n-        var achievementsSecondCourse = request.get(\"/api/courses/\" + secondCourse.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n-        assertThat(achievementsSecondCourse.size()).as(\"Number of achievements for user should be 4 in course \" + secondCourse.getId()).isEqualTo(4);\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testBadRequests() throws Exception {\n+        var emptyAchievement = new Achievement();\n+        request.put(\"/api/achievements\", emptyAchievement, HttpStatus.BAD_REQUEST);\n+        request.delete(\"/api/achievements/\" + 999L, HttpStatus.NOT_FOUND);\n+        instructor.setGroups(new HashSet<>());\n+        userRepository.save(instructor);\n+        emptyAchievement.setId(2L);\n+        emptyAchievement.setCourse(first_course);\n+        request.put(\"/api/achievements\", emptyAchievement, HttpStatus.FORBIDDEN);\n+        request.delete(\"/api/achievements/\" + first_achievement.getId(), HttpStatus.FORBIDDEN);\n     }\n+\n }\n", "next_change": {"commit": "116151629d403403ee9b750c30c182f44f70e233", "changed_code": [{"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\nindex 3b8af6aa4c6..de43c5aeb29 100644\n--- a/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\n", "chunk": "@@ -85,101 +82,53 @@ public class AchievementIntegrationTest extends AbstractSpringIntegrationBambooB\n     }\n \n     @Test\n-    public void testManyToManyRelationToUser() {\n-        assertThat(student.getAchievements().size()).as(\"Number of achievements for user should be 0\").isEqualTo(0);\n-\n-        student.addAchievement(first_achievement);\n-        assertThat(student.getAchievements().size()).as(\"Number of achievements for user should be 1\").isEqualTo(1);\n-        assertThat(student.getAchievements().contains(first_achievement)).as(\"User has correct achievement\").isTrue();\n-        assertThat(first_achievement.getUsers().size()).as(\"Number of users for achievement should be 1\").isEqualTo(1);\n-        assertThat(first_achievement.getUsers().contains(student)).as(\"Achievement has correct user\").isTrue();\n-\n-        student.removeAchievement(first_achievement);\n-        assertThat(student.getAchievements().size()).as(\"Number of achievements for user should be 0\").isEqualTo(0);\n-        assertThat(student.getAchievements().contains(first_achievement)).as(\"User does not have removed achievement\").isFalse();\n-        assertThat(first_achievement.getUsers().size()).as(\"Number of users for achievement should be 0\").isEqualTo(0);\n-        assertThat(first_achievement.getUsers().contains(student)).as(\"Achievement does not have incorrect user\").isFalse();\n-    }\n-\n-    @Test\n-    @WithMockUser(value = \"student1\", roles = \"USER\")\n+    @WithMockUser(value = \"student1\", roles = \"ADMIN\")\n     public void testDeleteUser() throws Exception {\n-        student.addAchievement(first_achievement);\n-        student = userRepository.save(student);\n-\n-        var achievements = request.get(\"/api/achievements\", HttpStatus.OK, Set.class);\n-        assertThat(achievements.size()).as(\"Number of achievements for user should be 1\").isEqualTo(1);\n-\n-        userRepository.delete(student);\n-        assertThat(achievementService.findAll().contains(first_achievement)).as(\"Achievement does not get deleted if user does\").isTrue();\n+        initTest();\n+        request.delete(\"/api/users/\" + student.getLogin(), HttpStatus.OK);\n+        var achievementsFirstCourse = request.get(\"/api/courses/\" + firstCourse.getId() + \"/achievements\", HttpStatus.NOT_FOUND, Set.class);\n+        assertThat(achievementsFirstCourse).as(\"Achievements for user should be null in course \" + firstCourse.getId()).isNullOrEmpty();\n+        var achievementsSecondCourse = request.get(\"/api/courses/\" + secondCourse.getId() + \"/achievements\", HttpStatus.NOT_FOUND, Set.class);\n+        assertThat(achievementsSecondCourse).as(\"Achievements for user should be null in course \" + secondCourse.getId()).isNullOrEmpty();\n     }\n \n     @Test\n-    @WithMockUser(value = \"admin\", roles = \"ADMIN\")\n+    @WithMockUser(value = \"student1\", roles = \"ADMIN\")\n     public void testDeleteCourse() throws Exception {\n-        student.addAchievement(first_achievement);\n-        student = userRepository.save(student);\n-\n-        var achievements = request.get(\"/api/courses/\" + first_course.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n-        assertThat(achievements.size()).as(\"Number of achievements for course should be 2\").isEqualTo(2);\n-\n-        request.delete(\"/api/courses/\" + first_course.getId(), HttpStatus.OK);\n-        assertThat(achievementService.findAll().contains(first_achievement)).as(\"Achievement gets deleted if course does\").isFalse();\n+        initTest();\n+        var courseId = firstCourse.getId();\n+        request.delete(\"/api/courses/\" + courseId, HttpStatus.OK);\n+        var achievementsFirstCourse = request.get(\"/api/courses/\" + courseId + \"/achievements\", HttpStatus.OK, Set.class);\n+        assertThat(achievementsFirstCourse.size()).as(\"Achievements in course \" + courseId + \" get deleted if course \" + courseId + \" is deleted\").isEqualTo(0);\n+        var achievementsSecondCourse = request.get(\"/api/courses/\" + secondCourse.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n+        assertThat(achievementsSecondCourse.size()).as(\"Achievements in course \" + secondCourse.getId() + \" do not get deleted if course \" + courseId + \" is deleted\").isEqualTo(4);\n     }\n \n     @Test\n-    @WithMockUser(value = \"admin\", roles = \"ADMIN\")\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n     public void testDeleteExercise() throws Exception {\n-        student.addAchievement(first_achievement);\n-        student = userRepository.save(student);\n-\n-        var achievements = achievementService.findAllByExerciseId(first_exercise.getId());\n-        assertThat(achievements.size()).as(\"Number of achievements for course should be 2\").isEqualTo(2);\n-\n-        exerciseService.delete(first_exercise.getId(), false, false);\n-        assertThat(achievementService.findById(first_achievement.getId())).as(\"Achievement gets deleted if exercise does\").isNotPresent();\n-        assertThat(achievementService.findById(third_achievement.getId())).as(\"Achievement gets deleted if exercise does\").isNotPresent();\n+        initTest();\n+        request.delete(\"/api/modeling-exercises/\" + firstExercise.getId(), HttpStatus.OK);\n+        var achievementsFirstCourse = request.get(\"/api/courses/\" + firstCourse.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n+        assertThat(achievementsFirstCourse.size()).as(\"Number of achievements for user should be 4 in course \" + firstCourse.getId()).isEqualTo(4);\n+        var achievementsSecondCourse = request.get(\"/api/courses/\" + secondCourse.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n+        assertThat(achievementsSecondCourse.size()).as(\"Number of achievements for user should be 4 in course \" + secondCourse.getId()).isEqualTo(4);\n     }\n \n-    @Test\n-    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n-    public void testUpdateAchievement() throws Exception {\n-        instructor.addAchievement(first_achievement);\n-        userRepository.save(instructor);\n-        var achievementToUpdate = achievementService.findById(first_achievement.getId()).get();\n-        achievementToUpdate.setDescription(\"Updated achievement\");\n-        request.put(\"/api/achievements\", achievementToUpdate, HttpStatus.OK);\n-        assertThat(achievementService.findById(first_achievement.getId()).get()).as(\"Achievement is updated correctly\").isEqualTo(achievementToUpdate);\n-    }\n+    private void initTest() throws Exception {\n+        var allAchievements = achievementRepository.findAllByCourseId(firstCourse.getId());\n+        allAchievements.addAll(achievementRepository.findAllByCourseId(secondCourse.getId()));\n \n-    @Test\n-    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n-    public void testDeleteAchievement() throws Exception {\n-        instructor.addAchievement(first_achievement);\n+        for (Achievement achievement : allAchievements) {\n+            student.addAchievement(achievement);\n+            instructor.addAchievement(achievement);\n+        }\n+        student = userRepository.save(student);\n         instructor = userRepository.save(instructor);\n-        first_achievement = achievementService.save(first_achievement);\n-        request.delete(\"/api/achievements/\" + first_achievement.getId(), HttpStatus.OK);\n-\n-        assertThat(achievementService.findById(first_achievement.getId())).as(\"Achievement is deleted\").isNotPresent();\n-        assertThat(userRepository.findById(instructor.getId()).isPresent()).as(\"User is not deleted\").isTrue();\n-        assertThat(request.get(\"/api/achievements\", HttpStatus.OK, Set.class).size()).as(\"User has no achievements\").isEqualTo(0);\n-        assertThat(courseService.findOne(first_course.getId())).as(\"Course is not deleted\").isNotNull();\n-        var achievements = request.get(\"/api/courses/\" + first_course.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n-        assertThat(achievements.size()).as(\"Course has only one achievement\").isEqualTo(1);\n-    }\n \n-    @Test\n-    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n-    public void testBadRequests() throws Exception {\n-        var emptyAchievement = new Achievement();\n-        request.put(\"/api/achievements\", emptyAchievement, HttpStatus.BAD_REQUEST);\n-        request.delete(\"/api/achievements/\" + 999L, HttpStatus.NOT_FOUND);\n-        instructor.setGroups(new HashSet<>());\n-        userRepository.save(instructor);\n-        emptyAchievement.setId(2L);\n-        emptyAchievement.setCourse(first_course);\n-        request.put(\"/api/achievements\", emptyAchievement, HttpStatus.FORBIDDEN);\n-        request.delete(\"/api/achievements/\" + first_achievement.getId(), HttpStatus.FORBIDDEN);\n+        var achievementsFirstCourse = request.get(\"/api/courses/\" + firstCourse.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n+        assertThat(achievementsFirstCourse.size()).as(\"Number of achievements for user should be 12 in course \" + firstCourse.getId()).isEqualTo(12);\n+        var achievementsSecondCourse = request.get(\"/api/courses/\" + secondCourse.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n+        assertThat(achievementsSecondCourse.size()).as(\"Number of achievements for user should be 4 in course \" + secondCourse.getId()).isEqualTo(4);\n     }\n-\n }\n", "next_change": {"commit": "669ba95aca108519bc3499ee88a04461aaa1f1b6", "changed_code": [{"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\nindex de43c5aeb29..35e13a2bea8 100644\n--- a/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\n", "chunk": "@@ -82,53 +69,67 @@ public class AchievementIntegrationTest extends AbstractSpringIntegrationBambooB\n     }\n \n     @Test\n-    @WithMockUser(value = \"student1\", roles = \"ADMIN\")\n-    public void testDeleteUser() throws Exception {\n-        initTest();\n-        request.delete(\"/api/users/\" + student.getLogin(), HttpStatus.OK);\n-        var achievementsFirstCourse = request.get(\"/api/courses/\" + firstCourse.getId() + \"/achievements\", HttpStatus.NOT_FOUND, Set.class);\n-        assertThat(achievementsFirstCourse).as(\"Achievements for user should be null in course \" + firstCourse.getId()).isNullOrEmpty();\n-        var achievementsSecondCourse = request.get(\"/api/courses/\" + secondCourse.getId() + \"/achievements\", HttpStatus.NOT_FOUND, Set.class);\n-        assertThat(achievementsSecondCourse).as(\"Achievements for user should be null in course \" + secondCourse.getId()).isNullOrEmpty();\n+    public void testManyToManyRelationToUser() {\n+        assertThat(user.getAchievements().size()).isEqualTo(0).as(\"Number of achievements for user should be 0\");\n+\n+        user.addAchievement(achievement);\n+        assertThat(user.getAchievements().size()).isEqualTo(1).as(\"Number of achievements for user should be 1\");\n+        assertThat(user.getAchievements().contains(achievement)).isTrue().as(\"User has correct achievement\");\n+        assertThat(achievement.getUsers().size()).isEqualTo(1).as(\"Number of users for achievement should be 1\");\n+        assertThat(achievement.getUsers().contains(user)).isTrue().as(\"Achievement has correct user\");\n+\n+        user.removeAchievement(achievement);\n+        assertThat(user.getAchievements().size()).isEqualTo(0).as(\"Number of achievements for user should be 0\");\n+        assertThat(user.getAchievements().contains(achievement)).isFalse().as(\"User does not have removed achievement\");\n+        assertThat(achievement.getUsers().size()).isEqualTo(0).as(\"Number of users for achievement should be 0\");\n+        assertThat(achievement.getUsers().contains(user)).isFalse().as(\"Achievement does not have incorrect user\");\n     }\n \n     @Test\n-    @WithMockUser(value = \"student1\", roles = \"ADMIN\")\n-    public void testDeleteCourse() throws Exception {\n-        initTest();\n-        var courseId = firstCourse.getId();\n-        request.delete(\"/api/courses/\" + courseId, HttpStatus.OK);\n-        var achievementsFirstCourse = request.get(\"/api/courses/\" + courseId + \"/achievements\", HttpStatus.OK, Set.class);\n-        assertThat(achievementsFirstCourse.size()).as(\"Achievements in course \" + courseId + \" get deleted if course \" + courseId + \" is deleted\").isEqualTo(0);\n-        var achievementsSecondCourse = request.get(\"/api/courses/\" + secondCourse.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n-        assertThat(achievementsSecondCourse.size()).as(\"Achievements in course \" + secondCourse.getId() + \" do not get deleted if course \" + courseId + \" is deleted\").isEqualTo(4);\n+    @WithMockUser(value = \"student1\", roles = \"USER\")\n+    public void testManyToManyRelationToUserRepository() throws Exception {\n+        user.addAchievement(achievement);\n+        user = userRepository.save(user);\n+\n+        var achievements = request.get(\"/api/achievements\", HttpStatus.OK, Set.class);\n+        assertThat(achievements.size()).isEqualTo(1).as(\"Number of achievements for user should be 1\");\n+\n+        userRepository.delete(user);\n+        assertThat(achievementRepository.findAll().contains(achievement)).isTrue().as(\"Achievement does not get deleted if user does\");\n     }\n \n     @Test\n-    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n-    public void testDeleteExercise() throws Exception {\n-        initTest();\n-        request.delete(\"/api/modeling-exercises/\" + firstExercise.getId(), HttpStatus.OK);\n-        var achievementsFirstCourse = request.get(\"/api/courses/\" + firstCourse.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n-        assertThat(achievementsFirstCourse.size()).as(\"Number of achievements for user should be 4 in course \" + firstCourse.getId()).isEqualTo(4);\n-        var achievementsSecondCourse = request.get(\"/api/courses/\" + secondCourse.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n-        assertThat(achievementsSecondCourse.size()).as(\"Number of achievements for user should be 4 in course \" + secondCourse.getId()).isEqualTo(4);\n+    @WithMockUser(value = \"student1\", roles = \"USER\")\n+    public void testManyToOneRelationToCourseRepository() throws Exception {\n+        var achievements = request.get(\"/api/courses/\" + course.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n+        assertThat(achievements.size()).isEqualTo(1).as(\"Number of achievements for course should be 1\");\n+\n+        courseRepository.delete(course);\n+        assertThat(achievementRepository.findAll().contains(achievement)).isFalse().as(\"Achievement gets deleted if course does\");\n     }\n \n-    private void initTest() throws Exception {\n-        var allAchievements = achievementRepository.findAllByCourseId(firstCourse.getId());\n-        allAchievements.addAll(achievementRepository.findAllByCourseId(secondCourse.getId()));\n-\n-        for (Achievement achievement : allAchievements) {\n-            student.addAchievement(achievement);\n-            instructor.addAchievement(achievement);\n-        }\n-        student = userRepository.save(student);\n-        instructor = userRepository.save(instructor);\n-\n-        var achievementsFirstCourse = request.get(\"/api/courses/\" + firstCourse.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n-        assertThat(achievementsFirstCourse.size()).as(\"Number of achievements for user should be 12 in course \" + firstCourse.getId()).isEqualTo(12);\n-        var achievementsSecondCourse = request.get(\"/api/courses/\" + secondCourse.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n-        assertThat(achievementsSecondCourse.size()).as(\"Number of achievements for user should be 4 in course \" + secondCourse.getId()).isEqualTo(4);\n+    @Test\n+    public void testUpdateAchievement() throws Exception {\n+        user.addAchievement(achievement);\n+        userRepository.save(user);\n+        var achievementToUpdate = achievementRepository.findById(achievement.getId()).get();\n+        achievementToUpdate.setDescription(\"Updated achievement\");\n+        request.put(\"/api/achievements\", achievementToUpdate, HttpStatus.OK);\n+        assertThat(achievementRepository.findById(achievement.getId()).get()).isEqualTo(achievementToUpdate).as(\"Achievement is updated correctly\");\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"USER\")\n+    public void testDeleteAchievement() throws Exception {\n+        user.addAchievement(achievement);\n+        user = userRepository.save(user);\n+        achievement = achievementRepository.save(achievement);\n+        request.delete(\"/achievements/{achievementId}\", HttpStatus.OK);\n+\n+        assertThat(achievementRepository.findAll().size()).isEqualTo(0).as(\"Achievement is deleted\");\n+        assertThat(userRepository.findById(user.getId()).isPresent()).isTrue().as(\"User is not deleted\");\n+        assertThat(userRepository.findById(user.getId()).get().getAchievements().size()).isEqualTo(0).as(\"User has no achievements\");\n+        assertThat(courseRepository.findById(course.getId()).isPresent()).isTrue().as(\"Course is not deleted\");\n+        assertThat(achievementService.findAllForCourse(course.getId()).size()).isEqualTo(0).as(\"Course has no achievements\");\n     }\n }\n", "next_change": {"commit": "d79fe9f4e5d9b3656047b7dc9c1cc7c52379f9d2", "changed_code": [{"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\nindex 35e13a2bea8..97851ed945c 100644\n--- a/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\n", "chunk": "@@ -130,6 +130,6 @@ public class AchievementIntegrationTest extends AbstractSpringIntegrationBambooB\n         assertThat(userRepository.findById(user.getId()).isPresent()).isTrue().as(\"User is not deleted\");\n         assertThat(userRepository.findById(user.getId()).get().getAchievements().size()).isEqualTo(0).as(\"User has no achievements\");\n         assertThat(courseRepository.findById(course.getId()).isPresent()).isTrue().as(\"Course is not deleted\");\n-        assertThat(achievementService.findAllForCourse(course.getId()).size()).isEqualTo(0).as(\"Course has no achievements\");\n+        assertThat(achievementService.findAllForCourse(course.getId(), user.getId()).size()).isEqualTo(0).as(\"Course has no achievements\");\n     }\n }\n", "next_change": {"commit": "84ce3abcc1059d698df86587b1e2a400cbc7b05c", "changed_code": [{"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\nindex 97851ed945c..30c5f6ff18a 100644\n--- a/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\n", "chunk": "@@ -119,17 +124,17 @@ public class AchievementIntegrationTest extends AbstractSpringIntegrationBambooB\n     }\n \n     @Test\n-    @WithMockUser(value = \"student1\", roles = \"USER\")\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n     public void testDeleteAchievement() throws Exception {\n-        user.addAchievement(achievement);\n-        user = userRepository.save(user);\n+        instructor.addAchievement(achievement);\n+        instructor = userRepository.save(instructor);\n         achievement = achievementRepository.save(achievement);\n-        request.delete(\"/achievements/{achievementId}\", HttpStatus.OK);\n+        request.delete(\"/api/achievements/\" + achievement.getId(), HttpStatus.OK);\n \n         assertThat(achievementRepository.findAll().size()).isEqualTo(0).as(\"Achievement is deleted\");\n-        assertThat(userRepository.findById(user.getId()).isPresent()).isTrue().as(\"User is not deleted\");\n-        assertThat(userRepository.findById(user.getId()).get().getAchievements().size()).isEqualTo(0).as(\"User has no achievements\");\n+        assertThat(userRepository.findById(instructor.getId()).isPresent()).isTrue().as(\"User is not deleted\");\n+        assertThat(userRepository.findById(instructor.getId()).get().getAchievements().size()).isEqualTo(0).as(\"User has no achievements\");\n         assertThat(courseRepository.findById(course.getId()).isPresent()).isTrue().as(\"Course is not deleted\");\n-        assertThat(achievementService.findAllForCourse(course.getId(), user.getId()).size()).isEqualTo(0).as(\"Course has no achievements\");\n+        assertThat(achievementService.findAllForCourse(course.getId(), instructor.getId()).size()).isEqualTo(0).as(\"Course has no achievements\");\n     }\n }\n", "next_change": {"commit": "497e3316832c66677399172c3bc6bd223073c1b2", "changed_code": [{"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\nindex 30c5f6ff18a..e366ec2ad68 100644\n--- a/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\n", "chunk": "@@ -131,10 +134,11 @@ public class AchievementIntegrationTest extends AbstractSpringIntegrationBambooB\n         achievement = achievementRepository.save(achievement);\n         request.delete(\"/api/achievements/\" + achievement.getId(), HttpStatus.OK);\n \n-        assertThat(achievementRepository.findAll().size()).isEqualTo(0).as(\"Achievement is deleted\");\n-        assertThat(userRepository.findById(instructor.getId()).isPresent()).isTrue().as(\"User is not deleted\");\n-        assertThat(userRepository.findById(instructor.getId()).get().getAchievements().size()).isEqualTo(0).as(\"User has no achievements\");\n-        assertThat(courseRepository.findById(course.getId()).isPresent()).isTrue().as(\"Course is not deleted\");\n-        assertThat(achievementService.findAllForCourse(course.getId(), instructor.getId()).size()).isEqualTo(0).as(\"Course has no achievements\");\n+        assertThat(achievementRepository.findAll().size()).as(\"Achievement is deleted\").isEqualTo(0);\n+        assertThat(userRepository.findById(instructor.getId()).isPresent()).as(\"User is not deleted\").isTrue();\n+        assertThat(userRepository.findById(instructor.getId()).get().getAchievements().size()).as(\"User has no achievements\").isEqualTo(0);\n+        assertThat(courseRepository.findById(course.getId()).isPresent()).as(\"Course is not deleted\").isTrue();\n+        var achievements = request.get(\"/api/courses/\" + course.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n+        assertThat(achievements.size()).as(\"Course has no achievements\").isEqualTo(0);\n     }\n }\n", "next_change": {"commit": "0616ac4ef001698a1e962c595c2ceecc0eb76dd0", "changed_code": [{"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\nindex e366ec2ad68..b7110ec71c1 100644\n--- a/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\n", "chunk": "@@ -141,4 +141,19 @@ public class AchievementIntegrationTest extends AbstractSpringIntegrationBambooB\n         var achievements = request.get(\"/api/courses/\" + course.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n         assertThat(achievements.size()).as(\"Course has no achievements\").isEqualTo(0);\n     }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testBadRequests() throws Exception {\n+        var emptyAchievement = new Achievement();\n+        request.put(\"/api/achievements\", emptyAchievement, HttpStatus.BAD_REQUEST);\n+        request.delete(\"/api/achievements/17\", HttpStatus.NOT_FOUND);\n+        instructor.setGroups(new HashSet<>());\n+        userRepository.save(instructor);\n+        emptyAchievement.setId(2L);\n+        emptyAchievement.setCourse(course);\n+        request.put(\"/api/achievements\", emptyAchievement, HttpStatus.FORBIDDEN);\n+        request.delete(\"/api/achievements/1\", HttpStatus.FORBIDDEN);\n+    }\n+\n }\n", "next_change": {"commit": "45dac20bf2cd9e41c1e6ff21336a2849962b462e", "changed_code": [{"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\nindex b7110ec71c1..b3dfc571e48 100644\n--- a/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\n", "chunk": "@@ -153,7 +153,7 @@ public class AchievementIntegrationTest extends AbstractSpringIntegrationBambooB\n         emptyAchievement.setId(2L);\n         emptyAchievement.setCourse(course);\n         request.put(\"/api/achievements\", emptyAchievement, HttpStatus.FORBIDDEN);\n-        request.delete(\"/api/achievements/1\", HttpStatus.FORBIDDEN);\n+        request.delete(\"/api/achievements/\" + achievement.getId(), HttpStatus.FORBIDDEN);\n     }\n \n }\n", "next_change": {"commit": "fd13e3d27e731c1b8d1a2dea0e1c43ae2468034b", "changed_code": [{"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\nindex b3dfc571e48..57b7dc2f9ee 100644\n--- a/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\n", "chunk": "@@ -147,13 +175,13 @@ public class AchievementIntegrationTest extends AbstractSpringIntegrationBambooB\n     public void testBadRequests() throws Exception {\n         var emptyAchievement = new Achievement();\n         request.put(\"/api/achievements\", emptyAchievement, HttpStatus.BAD_REQUEST);\n-        request.delete(\"/api/achievements/17\", HttpStatus.NOT_FOUND);\n+        request.delete(\"/api/achievements/\" + 999L, HttpStatus.NOT_FOUND);\n         instructor.setGroups(new HashSet<>());\n         userRepository.save(instructor);\n         emptyAchievement.setId(2L);\n-        emptyAchievement.setCourse(course);\n+        emptyAchievement.setCourse(first_course);\n         request.put(\"/api/achievements\", emptyAchievement, HttpStatus.FORBIDDEN);\n-        request.delete(\"/api/achievements/\" + achievement.getId(), HttpStatus.FORBIDDEN);\n+        request.delete(\"/api/achievements/\" + first_achievement.getId(), HttpStatus.FORBIDDEN);\n     }\n \n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTY0ODk3Mw==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r479648973", "body": "I think this test will be also successful even though the `achievementToUpdate.isPresent()` is `false` as the assert is in the if statement", "bodyText": "I think this test will be also successful even though the achievementToUpdate.isPresent() is false as the assert is in the if statement", "bodyHTML": "<p dir=\"auto\">I think this test will be also successful even though the <code>achievementToUpdate.isPresent()</code> is <code>false</code> as the assert is in the if statement</p>", "author": "fde312", "createdAt": "2020-08-29T13:17:19Z", "path": "src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java", "diffHunk": "@@ -0,0 +1,137 @@\n+package de.tum.in.www1.artemis;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.util.Set;\n+\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import de.tum.in.www1.artemis.domain.Achievement;\n+import de.tum.in.www1.artemis.domain.Course;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.repository.AchievementRepository;\n+import de.tum.in.www1.artemis.repository.CourseRepository;\n+import de.tum.in.www1.artemis.repository.UserRepository;\n+import de.tum.in.www1.artemis.service.AchievementService;\n+import de.tum.in.www1.artemis.util.DatabaseUtilService;\n+import de.tum.in.www1.artemis.util.RequestUtilService;\n+\n+public class AchievementIntegrationTest extends AbstractSpringIntegrationBambooBitbucketJiraTest {\n+\n+    @Autowired\n+    DatabaseUtilService database;\n+\n+    @Autowired\n+    RequestUtilService request;\n+\n+    @Autowired\n+    AchievementService achievementService;\n+\n+    @Autowired\n+    AchievementRepository achievementRepository;\n+\n+    @Autowired\n+    UserRepository userRepository;\n+\n+    @Autowired\n+    CourseRepository courseRepository;\n+\n+    private User user;\n+\n+    private Course course;\n+\n+    private Achievement achievement;\n+\n+    @BeforeEach\n+    public void initTestCase() {\n+        user = database.addUsers(1, 0, 0).get(0);\n+        course = database.addEmptyCourse();\n+\n+        achievement = new Achievement();\n+        achievement.setId(1L);\n+        achievement.setTitle(\"Test Achievement\");\n+        achievement.setDescription(\"Create correct relations\");\n+        achievement.setIcon(\"\");\n+        achievement.setRank(1);\n+        achievement.setCourse(course);\n+\n+        achievement = achievementRepository.save(achievement);\n+    }\n+\n+    @AfterEach\n+    public void resetDatabase() {\n+        database.resetDatabase();\n+    }\n+\n+    @Test\n+    public void testManyToManyRelationToUser() {\n+        assertThat(user.getAchievements().size()).isEqualTo(0).as(\"Number of achievements for user should be 0\");\n+\n+        user.addAchievement(achievement);\n+        assertThat(user.getAchievements().size()).isEqualTo(1).as(\"Number of achievements for user should be 1\");\n+        assertThat(user.getAchievements().contains(achievement)).isTrue().as(\"User has correct achievement\");\n+        assertThat(achievement.getUsers().size()).isEqualTo(1).as(\"Number of users for achievement should be 1\");\n+        assertThat(achievement.getUsers().contains(user)).isTrue().as(\"Achievement has correct user\");\n+\n+        user.removeAchievement(achievement);\n+        assertThat(user.getAchievements().size()).isEqualTo(0).as(\"Number of achievements for user should be 0\");\n+        assertThat(user.getAchievements().contains(achievement)).isFalse().as(\"User does not have removed achievement\");\n+        assertThat(achievement.getUsers().size()).isEqualTo(0).as(\"Number of users for achievement should be 0\");\n+        assertThat(achievement.getUsers().contains(user)).isFalse().as(\"Achievement does not have incorrect user\");\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"USER\")\n+    public void testManyToManyRelationToUserRepository() throws Exception {\n+        user.addAchievement(achievement);\n+        user = userRepository.save(user);\n+\n+        var achievements = request.get(\"/api/achievements\", HttpStatus.OK, Set.class);\n+        assertThat(achievements.size()).isEqualTo(1).as(\"Number of achievements for user should be 1\");\n+\n+        userRepository.delete(user);\n+        assertThat(achievementRepository.findAll().contains(achievement)).isTrue().as(\"Achievement does not get deleted if user does\");\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"USER\")\n+    public void testManyToOneRelationToCourseRepository() throws Exception {\n+        var achievements = request.get(\"/api/courses/\" + course.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n+        assertThat(achievements.size()).isEqualTo(1).as(\"Number of achievements for course should be 1\");\n+\n+        courseRepository.delete(course);\n+        assertThat(achievementRepository.findAll().contains(achievement)).isFalse().as(\"Achievement gets deleted if course does\");\n+    }\n+\n+    @Test\n+    public void testUpdateAchievement() {\n+        user.addAchievement(achievement);\n+        userRepository.save(user);\n+        var achievementToUpdate = achievementRepository.findById(achievement.getId());\n+        if (achievementToUpdate.isPresent()) {", "originalCommit": "198e5998d51d5103ab55075d2bee38be7a95c67d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc0ODM0OA==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r479748348", "bodyText": "Removed the if statement :) thanks", "author": "balazs-czopf", "createdAt": "2020-08-30T09:54:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTY0ODk3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "6aa68b0ab7a071fa631c7c72cdb8ea02ccf15a39", "changed_code": [{"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\nindex 21c051dc597..0f3ea1379ab 100644\n--- a/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\n", "chunk": "@@ -70,68 +88,100 @@ public class AchievementIntegrationTest extends AbstractSpringIntegrationBambooB\n \n     @Test\n     public void testManyToManyRelationToUser() {\n-        assertThat(user.getAchievements().size()).isEqualTo(0).as(\"Number of achievements for user should be 0\");\n-\n-        user.addAchievement(achievement);\n-        assertThat(user.getAchievements().size()).isEqualTo(1).as(\"Number of achievements for user should be 1\");\n-        assertThat(user.getAchievements().contains(achievement)).isTrue().as(\"User has correct achievement\");\n-        assertThat(achievement.getUsers().size()).isEqualTo(1).as(\"Number of users for achievement should be 1\");\n-        assertThat(achievement.getUsers().contains(user)).isTrue().as(\"Achievement has correct user\");\n-\n-        user.removeAchievement(achievement);\n-        assertThat(user.getAchievements().size()).isEqualTo(0).as(\"Number of achievements for user should be 0\");\n-        assertThat(user.getAchievements().contains(achievement)).isFalse().as(\"User does not have removed achievement\");\n-        assertThat(achievement.getUsers().size()).isEqualTo(0).as(\"Number of users for achievement should be 0\");\n-        assertThat(achievement.getUsers().contains(user)).isFalse().as(\"Achievement does not have incorrect user\");\n+        assertThat(student.getAchievements().size()).as(\"Number of achievements for user should be 0\").isEqualTo(0);\n+\n+        student.addAchievement(first_achievement);\n+        assertThat(student.getAchievements().size()).as(\"Number of achievements for user should be 1\").isEqualTo(1);\n+        assertThat(student.getAchievements().contains(first_achievement)).as(\"User has correct achievement\").isTrue();\n+        assertThat(first_achievement.getUsers().size()).as(\"Number of users for achievement should be 1\").isEqualTo(1);\n+        assertThat(first_achievement.getUsers().contains(student)).as(\"Achievement has correct user\").isTrue();\n+\n+        student.removeAchievement(first_achievement);\n+        assertThat(student.getAchievements().size()).as(\"Number of achievements for user should be 0\").isEqualTo(0);\n+        assertThat(student.getAchievements().contains(first_achievement)).as(\"User does not have removed achievement\").isFalse();\n+        assertThat(first_achievement.getUsers().size()).as(\"Number of users for achievement should be 0\").isEqualTo(0);\n+        assertThat(first_achievement.getUsers().contains(student)).as(\"Achievement does not have incorrect user\").isFalse();\n     }\n \n     @Test\n     @WithMockUser(value = \"student1\", roles = \"USER\")\n-    public void testManyToManyRelationToUserRepository() throws Exception {\n-        user.addAchievement(achievement);\n-        user = userRepository.save(user);\n+    public void testDeleteUser() throws Exception {\n+        student.addAchievement(first_achievement);\n+        student = userRepository.save(student);\n \n         var achievements = request.get(\"/api/achievements\", HttpStatus.OK, Set.class);\n-        assertThat(achievements.size()).isEqualTo(1).as(\"Number of achievements for user should be 1\");\n+        assertThat(achievements.size()).as(\"Number of achievements for user should be 1\").isEqualTo(1);\n \n-        userRepository.delete(user);\n-        assertThat(achievementRepository.findAll().contains(achievement)).isTrue().as(\"Achievement does not get deleted if user does\");\n+        userRepository.delete(student);\n+        assertThat(achievementService.findAll().contains(first_achievement)).as(\"Achievement does not get deleted if user does\").isTrue();\n     }\n \n     @Test\n-    @WithMockUser(value = \"student1\", roles = \"USER\")\n-    public void testManyToOneRelationToCourseRepository() throws Exception {\n-        var achievements = request.get(\"/api/courses/\" + course.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n-        assertThat(achievements.size()).isEqualTo(1).as(\"Number of achievements for course should be 1\");\n+    @WithMockUser(value = \"admin\", roles = \"ADMIN\")\n+    public void testDeleteCourse() throws Exception {\n+        student.addAchievement(first_achievement);\n+        student = userRepository.save(student);\n \n-        courseRepository.delete(course);\n-        assertThat(achievementRepository.findAll().contains(achievement)).isFalse().as(\"Achievement gets deleted if course does\");\n+        var achievements = request.get(\"/api/courses/\" + first_course.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n+        assertThat(achievements.size()).as(\"Number of achievements for course should be 2\").isEqualTo(2);\n+\n+        request.delete(\"/api/courses/\" + first_course.getId(), HttpStatus.OK);\n+        assertThat(achievementService.findAll().contains(first_achievement)).as(\"Achievement gets deleted if course does\").isFalse();\n     }\n \n     @Test\n-    public void testUpdateAchievement() {\n-        user.addAchievement(achievement);\n-        userRepository.save(user);\n-        var achievementToUpdate = achievementRepository.findById(achievement.getId());\n-        if (achievementToUpdate.isPresent()) {\n-            achievementToUpdate.get().setDescription(\"Updated achievement\");\n-            achievementRepository.save(achievementToUpdate.get());\n-            assertThat(achievementRepository.findById(achievement.getId()).get()).isEqualTo(achievementToUpdate.get()).as(\"Achievement is updated correctly\");\n-        }\n+    @WithMockUser(value = \"admin\", roles = \"ADMIN\")\n+    public void testDeleteExercise() throws Exception {\n+        student.addAchievement(first_achievement);\n+        student = userRepository.save(student);\n+\n+        var achievements = achievementService.findAllByExerciseId(first_exercise.getId());\n+        assertThat(achievements.size()).as(\"Number of achievements for course should be 2\").isEqualTo(2);\n+\n+        exerciseService.delete(first_exercise.getId(), false, false);\n+        assertThat(achievementService.findById(first_achievement.getId())).as(\"Achievement does not get deleted if exercise does\").isPresent();\n+        assertThat(achievementService.findById(third_achievement.getId())).as(\"Achievement does not get deleted if exercise does\").isPresent();\n     }\n \n     @Test\n-    @WithMockUser(value = \"student1\", roles = \"USER\")\n-    public void testDeleteAchievement() {\n-        user.addAchievement(achievement);\n-        user = userRepository.save(user);\n-        achievement = achievementRepository.save(achievement);\n-        achievementService.delete(achievement);\n-\n-        assertThat(achievementRepository.findAll().size()).isEqualTo(0).as(\"Achievement is deleted\");\n-        assertThat(userRepository.findById(user.getId()).isPresent()).isTrue().as(\"User is not deleted\");\n-        assertThat(userRepository.findById(user.getId()).get().getAchievements().size()).isEqualTo(0).as(\"User has no achievements\");\n-        assertThat(courseRepository.findById(course.getId()).isPresent()).isTrue().as(\"Course is not deleted\");\n-        assertThat(achievementService.findAllForCourse(course.getId()).size()).isEqualTo(0).as(\"Course has no achievements\");\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testUpdateAchievement() throws Exception {\n+        instructor.addAchievement(first_achievement);\n+        userRepository.save(instructor);\n+        var achievementToUpdate = achievementService.findById(first_achievement.getId()).get();\n+        achievementToUpdate.setDescription(\"Updated achievement\");\n+        request.put(\"/api/achievements\", achievementToUpdate, HttpStatus.OK);\n+        assertThat(achievementService.findById(first_achievement.getId()).get()).as(\"Achievement is updated correctly\").isEqualTo(achievementToUpdate);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testDeleteAchievement() throws Exception {\n+        instructor.addAchievement(first_achievement);\n+        instructor = userRepository.save(instructor);\n+        first_achievement = achievementService.save(first_achievement);\n+        request.delete(\"/api/achievements/\" + first_achievement.getId(), HttpStatus.OK);\n+\n+        assertThat(achievementService.findById(first_achievement.getId())).as(\"Achievement is deleted\").isNotPresent();\n+        assertThat(userRepository.findById(instructor.getId()).isPresent()).as(\"User is not deleted\").isTrue();\n+        assertThat(request.get(\"/api/achievements\", HttpStatus.OK, Set.class).size()).as(\"User has no achievements\").isEqualTo(0);\n+        assertThat(courseService.findOne(first_course.getId())).as(\"Course is not deleted\").isNotNull();\n+        var achievements = request.get(\"/api/courses/\" + first_course.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n+        assertThat(achievements.size()).as(\"Course has only one achievement\").isEqualTo(1);\n     }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testBadRequests() throws Exception {\n+        var emptyAchievement = new Achievement();\n+        request.put(\"/api/achievements\", emptyAchievement, HttpStatus.BAD_REQUEST);\n+        request.delete(\"/api/achievements/\" + 999L, HttpStatus.NOT_FOUND);\n+        instructor.setGroups(new HashSet<>());\n+        userRepository.save(instructor);\n+        emptyAchievement.setId(2L);\n+        emptyAchievement.setCourse(first_course);\n+        request.put(\"/api/achievements\", emptyAchievement, HttpStatus.FORBIDDEN);\n+        request.delete(\"/api/achievements/\" + first_achievement.getId(), HttpStatus.FORBIDDEN);\n+    }\n+\n }\n", "next_change": {"commit": "8d5bfc049d9e75323290b069e7343df6fc579ee7", "changed_code": [{"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\nindex 0f3ea1379ab..6d5c48c239a 100644\n--- a/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\n", "chunk": "@@ -87,101 +82,67 @@ public class AchievementIntegrationTest extends AbstractSpringIntegrationBambooB\n     }\n \n     @Test\n-    public void testManyToManyRelationToUser() {\n-        assertThat(student.getAchievements().size()).as(\"Number of achievements for user should be 0\").isEqualTo(0);\n-\n-        student.addAchievement(first_achievement);\n-        assertThat(student.getAchievements().size()).as(\"Number of achievements for user should be 1\").isEqualTo(1);\n-        assertThat(student.getAchievements().contains(first_achievement)).as(\"User has correct achievement\").isTrue();\n-        assertThat(first_achievement.getUsers().size()).as(\"Number of users for achievement should be 1\").isEqualTo(1);\n-        assertThat(first_achievement.getUsers().contains(student)).as(\"Achievement has correct user\").isTrue();\n-\n-        student.removeAchievement(first_achievement);\n-        assertThat(student.getAchievements().size()).as(\"Number of achievements for user should be 0\").isEqualTo(0);\n-        assertThat(student.getAchievements().contains(first_achievement)).as(\"User does not have removed achievement\").isFalse();\n-        assertThat(first_achievement.getUsers().size()).as(\"Number of users for achievement should be 0\").isEqualTo(0);\n-        assertThat(first_achievement.getUsers().contains(student)).as(\"Achievement does not have incorrect user\").isFalse();\n-    }\n-\n-    @Test\n-    @WithMockUser(value = \"student1\", roles = \"USER\")\n+    @WithMockUser(value = \"student1\", roles = \"ADMIN\")\n     public void testDeleteUser() throws Exception {\n-        student.addAchievement(first_achievement);\n-        student = userRepository.save(student);\n-\n-        var achievements = request.get(\"/api/achievements\", HttpStatus.OK, Set.class);\n-        assertThat(achievements.size()).as(\"Number of achievements for user should be 1\").isEqualTo(1);\n-\n-        userRepository.delete(student);\n-        assertThat(achievementService.findAll().contains(first_achievement)).as(\"Achievement does not get deleted if user does\").isTrue();\n+        initTest();\n+        request.delete(\"/api/users/\" + student.getLogin(), HttpStatus.OK);\n+        var achievementsFirstCourse = request.get(\"/api/courses/\" + firstCourse.getId() + \"/achievements\", HttpStatus.NOT_FOUND, Set.class);\n+        assertThat(achievementsFirstCourse).as(\"Achievements for user should be null in course \" + firstCourse.getId()).isNullOrEmpty();\n+        var achievementsSecondCourse = request.get(\"/api/courses/\" + secondCourse.getId() + \"/achievements\", HttpStatus.NOT_FOUND, Set.class);\n+        assertThat(achievementsSecondCourse).as(\"Achievements for user should be null in course \" + secondCourse.getId()).isNullOrEmpty();\n     }\n \n     @Test\n-    @WithMockUser(value = \"admin\", roles = \"ADMIN\")\n+    @WithMockUser(value = \"student1\", roles = \"ADMIN\")\n     public void testDeleteCourse() throws Exception {\n-        student.addAchievement(first_achievement);\n-        student = userRepository.save(student);\n-\n-        var achievements = request.get(\"/api/courses/\" + first_course.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n-        assertThat(achievements.size()).as(\"Number of achievements for course should be 2\").isEqualTo(2);\n-\n-        request.delete(\"/api/courses/\" + first_course.getId(), HttpStatus.OK);\n-        assertThat(achievementService.findAll().contains(first_achievement)).as(\"Achievement gets deleted if course does\").isFalse();\n+        initTest();\n+        var courseId = firstCourse.getId();\n+        request.delete(\"/api/courses/\" + courseId, HttpStatus.OK);\n+        var achievementsFirstCourse = request.get(\"/api/courses/\" + courseId + \"/achievements\", HttpStatus.OK, Set.class);\n+        assertThat(achievementsFirstCourse.size()).as(\"Achievements in course \" + courseId + \" get deleted if course \" + courseId + \" is deleted\").isEqualTo(0);\n+        var achievementsSecondCourse = request.get(\"/api/courses/\" + secondCourse.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n+        assertThat(achievementsSecondCourse.size()).as(\"Achievements in course \" + secondCourse.getId() + \" do not get deleted if course \" + courseId + \" is deleted\").isEqualTo(4);\n     }\n \n     @Test\n-    @WithMockUser(value = \"admin\", roles = \"ADMIN\")\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n     public void testDeleteExercise() throws Exception {\n-        student.addAchievement(first_achievement);\n-        student = userRepository.save(student);\n-\n-        var achievements = achievementService.findAllByExerciseId(first_exercise.getId());\n-        assertThat(achievements.size()).as(\"Number of achievements for course should be 2\").isEqualTo(2);\n-\n-        exerciseService.delete(first_exercise.getId(), false, false);\n-        assertThat(achievementService.findById(first_achievement.getId())).as(\"Achievement does not get deleted if exercise does\").isPresent();\n-        assertThat(achievementService.findById(third_achievement.getId())).as(\"Achievement does not get deleted if exercise does\").isPresent();\n+        initTest();\n+        request.delete(\"/api/modeling-exercises/\" + firstExercise.getId(), HttpStatus.OK);\n+        var achievementsFirstCourse = request.get(\"/api/courses/\" + firstCourse.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n+        assertThat(achievementsFirstCourse.size()).as(\"Number of achievements for user should be 4 in course \" + firstCourse.getId()).isEqualTo(4);\n+        var achievementsSecondCourse = request.get(\"/api/courses/\" + secondCourse.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n+        assertThat(achievementsSecondCourse.size()).as(\"Number of achievements for user should be 4 in course \" + secondCourse.getId()).isEqualTo(4);\n     }\n \n     @Test\n-    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n-    public void testUpdateAchievement() throws Exception {\n-        instructor.addAchievement(first_achievement);\n-        userRepository.save(instructor);\n-        var achievementToUpdate = achievementService.findById(first_achievement.getId()).get();\n-        achievementToUpdate.setDescription(\"Updated achievement\");\n-        request.put(\"/api/achievements\", achievementToUpdate, HttpStatus.OK);\n-        assertThat(achievementService.findById(first_achievement.getId()).get()).as(\"Achievement is updated correctly\").isEqualTo(achievementToUpdate);\n+    @WithMockUser(value = \"student1\", roles = \"USER\")\n+    public void testRewardAchievement() throws Exception {\n+        var participation = database.addParticipationForExercise(firstExercise, student.getLogin());\n+        var result = database.addResultToParticipation(participation);\n+        Set<Result> results = new HashSet<>();\n+        results.add(result);\n+        participation.setResults(results);\n+        participationRepository.save(participation);\n+        achievementService.checkForAchievements(result);\n+        var achievementsFirstCourse = request.get(\"/api/courses/\" + firstCourse.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n+        assertThat(achievementsFirstCourse.size()).as(\"User got an achievement\").isEqualTo(1);\n     }\n \n-    @Test\n-    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n-    public void testDeleteAchievement() throws Exception {\n-        instructor.addAchievement(first_achievement);\n+    private void initTest() throws Exception {\n+        var allAchievements = achievementRepository.findAllByCourseId(firstCourse.getId());\n+        allAchievements.addAll(achievementRepository.findAllByCourseId(secondCourse.getId()));\n+\n+        for (Achievement achievement : allAchievements) {\n+            student.addAchievement(achievement);\n+            instructor.addAchievement(achievement);\n+        }\n+        student = userRepository.save(student);\n         instructor = userRepository.save(instructor);\n-        first_achievement = achievementService.save(first_achievement);\n-        request.delete(\"/api/achievements/\" + first_achievement.getId(), HttpStatus.OK);\n-\n-        assertThat(achievementService.findById(first_achievement.getId())).as(\"Achievement is deleted\").isNotPresent();\n-        assertThat(userRepository.findById(instructor.getId()).isPresent()).as(\"User is not deleted\").isTrue();\n-        assertThat(request.get(\"/api/achievements\", HttpStatus.OK, Set.class).size()).as(\"User has no achievements\").isEqualTo(0);\n-        assertThat(courseService.findOne(first_course.getId())).as(\"Course is not deleted\").isNotNull();\n-        var achievements = request.get(\"/api/courses/\" + first_course.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n-        assertThat(achievements.size()).as(\"Course has only one achievement\").isEqualTo(1);\n-    }\n \n-    @Test\n-    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n-    public void testBadRequests() throws Exception {\n-        var emptyAchievement = new Achievement();\n-        request.put(\"/api/achievements\", emptyAchievement, HttpStatus.BAD_REQUEST);\n-        request.delete(\"/api/achievements/\" + 999L, HttpStatus.NOT_FOUND);\n-        instructor.setGroups(new HashSet<>());\n-        userRepository.save(instructor);\n-        emptyAchievement.setId(2L);\n-        emptyAchievement.setCourse(first_course);\n-        request.put(\"/api/achievements\", emptyAchievement, HttpStatus.FORBIDDEN);\n-        request.delete(\"/api/achievements/\" + first_achievement.getId(), HttpStatus.FORBIDDEN);\n+        var achievementsFirstCourse = request.get(\"/api/courses/\" + firstCourse.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n+        assertThat(achievementsFirstCourse.size()).as(\"Number of achievements for user should be 12 in course \" + firstCourse.getId()).isEqualTo(12);\n+        var achievementsSecondCourse = request.get(\"/api/courses/\" + secondCourse.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n+        assertThat(achievementsSecondCourse.size()).as(\"Number of achievements for user should be 4 in course \" + secondCourse.getId()).isEqualTo(4);\n     }\n-\n }\n", "next_change": {"commit": "7a5de1a37353eb19f93ef49666bba352198834cb", "changed_code": [{"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\nindex 6d5c48c239a..3b8af6aa4c6 100644\n--- a/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\n", "chunk": "@@ -82,67 +85,101 @@ public class AchievementIntegrationTest extends AbstractSpringIntegrationBambooB\n     }\n \n     @Test\n-    @WithMockUser(value = \"student1\", roles = \"ADMIN\")\n+    public void testManyToManyRelationToUser() {\n+        assertThat(student.getAchievements().size()).as(\"Number of achievements for user should be 0\").isEqualTo(0);\n+\n+        student.addAchievement(first_achievement);\n+        assertThat(student.getAchievements().size()).as(\"Number of achievements for user should be 1\").isEqualTo(1);\n+        assertThat(student.getAchievements().contains(first_achievement)).as(\"User has correct achievement\").isTrue();\n+        assertThat(first_achievement.getUsers().size()).as(\"Number of users for achievement should be 1\").isEqualTo(1);\n+        assertThat(first_achievement.getUsers().contains(student)).as(\"Achievement has correct user\").isTrue();\n+\n+        student.removeAchievement(first_achievement);\n+        assertThat(student.getAchievements().size()).as(\"Number of achievements for user should be 0\").isEqualTo(0);\n+        assertThat(student.getAchievements().contains(first_achievement)).as(\"User does not have removed achievement\").isFalse();\n+        assertThat(first_achievement.getUsers().size()).as(\"Number of users for achievement should be 0\").isEqualTo(0);\n+        assertThat(first_achievement.getUsers().contains(student)).as(\"Achievement does not have incorrect user\").isFalse();\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"USER\")\n     public void testDeleteUser() throws Exception {\n-        initTest();\n-        request.delete(\"/api/users/\" + student.getLogin(), HttpStatus.OK);\n-        var achievementsFirstCourse = request.get(\"/api/courses/\" + firstCourse.getId() + \"/achievements\", HttpStatus.NOT_FOUND, Set.class);\n-        assertThat(achievementsFirstCourse).as(\"Achievements for user should be null in course \" + firstCourse.getId()).isNullOrEmpty();\n-        var achievementsSecondCourse = request.get(\"/api/courses/\" + secondCourse.getId() + \"/achievements\", HttpStatus.NOT_FOUND, Set.class);\n-        assertThat(achievementsSecondCourse).as(\"Achievements for user should be null in course \" + secondCourse.getId()).isNullOrEmpty();\n+        student.addAchievement(first_achievement);\n+        student = userRepository.save(student);\n+\n+        var achievements = request.get(\"/api/achievements\", HttpStatus.OK, Set.class);\n+        assertThat(achievements.size()).as(\"Number of achievements for user should be 1\").isEqualTo(1);\n+\n+        userRepository.delete(student);\n+        assertThat(achievementService.findAll().contains(first_achievement)).as(\"Achievement does not get deleted if user does\").isTrue();\n     }\n \n     @Test\n-    @WithMockUser(value = \"student1\", roles = \"ADMIN\")\n+    @WithMockUser(value = \"admin\", roles = \"ADMIN\")\n     public void testDeleteCourse() throws Exception {\n-        initTest();\n-        var courseId = firstCourse.getId();\n-        request.delete(\"/api/courses/\" + courseId, HttpStatus.OK);\n-        var achievementsFirstCourse = request.get(\"/api/courses/\" + courseId + \"/achievements\", HttpStatus.OK, Set.class);\n-        assertThat(achievementsFirstCourse.size()).as(\"Achievements in course \" + courseId + \" get deleted if course \" + courseId + \" is deleted\").isEqualTo(0);\n-        var achievementsSecondCourse = request.get(\"/api/courses/\" + secondCourse.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n-        assertThat(achievementsSecondCourse.size()).as(\"Achievements in course \" + secondCourse.getId() + \" do not get deleted if course \" + courseId + \" is deleted\").isEqualTo(4);\n+        student.addAchievement(first_achievement);\n+        student = userRepository.save(student);\n+\n+        var achievements = request.get(\"/api/courses/\" + first_course.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n+        assertThat(achievements.size()).as(\"Number of achievements for course should be 2\").isEqualTo(2);\n+\n+        request.delete(\"/api/courses/\" + first_course.getId(), HttpStatus.OK);\n+        assertThat(achievementService.findAll().contains(first_achievement)).as(\"Achievement gets deleted if course does\").isFalse();\n     }\n \n     @Test\n-    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    @WithMockUser(value = \"admin\", roles = \"ADMIN\")\n     public void testDeleteExercise() throws Exception {\n-        initTest();\n-        request.delete(\"/api/modeling-exercises/\" + firstExercise.getId(), HttpStatus.OK);\n-        var achievementsFirstCourse = request.get(\"/api/courses/\" + firstCourse.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n-        assertThat(achievementsFirstCourse.size()).as(\"Number of achievements for user should be 4 in course \" + firstCourse.getId()).isEqualTo(4);\n-        var achievementsSecondCourse = request.get(\"/api/courses/\" + secondCourse.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n-        assertThat(achievementsSecondCourse.size()).as(\"Number of achievements for user should be 4 in course \" + secondCourse.getId()).isEqualTo(4);\n+        student.addAchievement(first_achievement);\n+        student = userRepository.save(student);\n+\n+        var achievements = achievementService.findAllByExerciseId(first_exercise.getId());\n+        assertThat(achievements.size()).as(\"Number of achievements for course should be 2\").isEqualTo(2);\n+\n+        exerciseService.delete(first_exercise.getId(), false, false);\n+        assertThat(achievementService.findById(first_achievement.getId())).as(\"Achievement gets deleted if exercise does\").isNotPresent();\n+        assertThat(achievementService.findById(third_achievement.getId())).as(\"Achievement gets deleted if exercise does\").isNotPresent();\n     }\n \n     @Test\n-    @WithMockUser(value = \"student1\", roles = \"USER\")\n-    public void testRewardAchievement() throws Exception {\n-        var participation = database.addParticipationForExercise(firstExercise, student.getLogin());\n-        var result = database.addResultToParticipation(participation);\n-        Set<Result> results = new HashSet<>();\n-        results.add(result);\n-        participation.setResults(results);\n-        participationRepository.save(participation);\n-        achievementService.checkForAchievements(result);\n-        var achievementsFirstCourse = request.get(\"/api/courses/\" + firstCourse.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n-        assertThat(achievementsFirstCourse.size()).as(\"User got an achievement\").isEqualTo(1);\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testUpdateAchievement() throws Exception {\n+        instructor.addAchievement(first_achievement);\n+        userRepository.save(instructor);\n+        var achievementToUpdate = achievementService.findById(first_achievement.getId()).get();\n+        achievementToUpdate.setDescription(\"Updated achievement\");\n+        request.put(\"/api/achievements\", achievementToUpdate, HttpStatus.OK);\n+        assertThat(achievementService.findById(first_achievement.getId()).get()).as(\"Achievement is updated correctly\").isEqualTo(achievementToUpdate);\n     }\n \n-    private void initTest() throws Exception {\n-        var allAchievements = achievementRepository.findAllByCourseId(firstCourse.getId());\n-        allAchievements.addAll(achievementRepository.findAllByCourseId(secondCourse.getId()));\n-\n-        for (Achievement achievement : allAchievements) {\n-            student.addAchievement(achievement);\n-            instructor.addAchievement(achievement);\n-        }\n-        student = userRepository.save(student);\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testDeleteAchievement() throws Exception {\n+        instructor.addAchievement(first_achievement);\n         instructor = userRepository.save(instructor);\n+        first_achievement = achievementService.save(first_achievement);\n+        request.delete(\"/api/achievements/\" + first_achievement.getId(), HttpStatus.OK);\n+\n+        assertThat(achievementService.findById(first_achievement.getId())).as(\"Achievement is deleted\").isNotPresent();\n+        assertThat(userRepository.findById(instructor.getId()).isPresent()).as(\"User is not deleted\").isTrue();\n+        assertThat(request.get(\"/api/achievements\", HttpStatus.OK, Set.class).size()).as(\"User has no achievements\").isEqualTo(0);\n+        assertThat(courseService.findOne(first_course.getId())).as(\"Course is not deleted\").isNotNull();\n+        var achievements = request.get(\"/api/courses/\" + first_course.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n+        assertThat(achievements.size()).as(\"Course has only one achievement\").isEqualTo(1);\n+    }\n \n-        var achievementsFirstCourse = request.get(\"/api/courses/\" + firstCourse.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n-        assertThat(achievementsFirstCourse.size()).as(\"Number of achievements for user should be 12 in course \" + firstCourse.getId()).isEqualTo(12);\n-        var achievementsSecondCourse = request.get(\"/api/courses/\" + secondCourse.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n-        assertThat(achievementsSecondCourse.size()).as(\"Number of achievements for user should be 4 in course \" + secondCourse.getId()).isEqualTo(4);\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testBadRequests() throws Exception {\n+        var emptyAchievement = new Achievement();\n+        request.put(\"/api/achievements\", emptyAchievement, HttpStatus.BAD_REQUEST);\n+        request.delete(\"/api/achievements/\" + 999L, HttpStatus.NOT_FOUND);\n+        instructor.setGroups(new HashSet<>());\n+        userRepository.save(instructor);\n+        emptyAchievement.setId(2L);\n+        emptyAchievement.setCourse(first_course);\n+        request.put(\"/api/achievements\", emptyAchievement, HttpStatus.FORBIDDEN);\n+        request.delete(\"/api/achievements/\" + first_achievement.getId(), HttpStatus.FORBIDDEN);\n     }\n+\n }\n", "next_change": {"commit": "116151629d403403ee9b750c30c182f44f70e233", "changed_code": [{"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\nindex 3b8af6aa4c6..de43c5aeb29 100644\n--- a/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\n", "chunk": "@@ -85,101 +82,53 @@ public class AchievementIntegrationTest extends AbstractSpringIntegrationBambooB\n     }\n \n     @Test\n-    public void testManyToManyRelationToUser() {\n-        assertThat(student.getAchievements().size()).as(\"Number of achievements for user should be 0\").isEqualTo(0);\n-\n-        student.addAchievement(first_achievement);\n-        assertThat(student.getAchievements().size()).as(\"Number of achievements for user should be 1\").isEqualTo(1);\n-        assertThat(student.getAchievements().contains(first_achievement)).as(\"User has correct achievement\").isTrue();\n-        assertThat(first_achievement.getUsers().size()).as(\"Number of users for achievement should be 1\").isEqualTo(1);\n-        assertThat(first_achievement.getUsers().contains(student)).as(\"Achievement has correct user\").isTrue();\n-\n-        student.removeAchievement(first_achievement);\n-        assertThat(student.getAchievements().size()).as(\"Number of achievements for user should be 0\").isEqualTo(0);\n-        assertThat(student.getAchievements().contains(first_achievement)).as(\"User does not have removed achievement\").isFalse();\n-        assertThat(first_achievement.getUsers().size()).as(\"Number of users for achievement should be 0\").isEqualTo(0);\n-        assertThat(first_achievement.getUsers().contains(student)).as(\"Achievement does not have incorrect user\").isFalse();\n-    }\n-\n-    @Test\n-    @WithMockUser(value = \"student1\", roles = \"USER\")\n+    @WithMockUser(value = \"student1\", roles = \"ADMIN\")\n     public void testDeleteUser() throws Exception {\n-        student.addAchievement(first_achievement);\n-        student = userRepository.save(student);\n-\n-        var achievements = request.get(\"/api/achievements\", HttpStatus.OK, Set.class);\n-        assertThat(achievements.size()).as(\"Number of achievements for user should be 1\").isEqualTo(1);\n-\n-        userRepository.delete(student);\n-        assertThat(achievementService.findAll().contains(first_achievement)).as(\"Achievement does not get deleted if user does\").isTrue();\n+        initTest();\n+        request.delete(\"/api/users/\" + student.getLogin(), HttpStatus.OK);\n+        var achievementsFirstCourse = request.get(\"/api/courses/\" + firstCourse.getId() + \"/achievements\", HttpStatus.NOT_FOUND, Set.class);\n+        assertThat(achievementsFirstCourse).as(\"Achievements for user should be null in course \" + firstCourse.getId()).isNullOrEmpty();\n+        var achievementsSecondCourse = request.get(\"/api/courses/\" + secondCourse.getId() + \"/achievements\", HttpStatus.NOT_FOUND, Set.class);\n+        assertThat(achievementsSecondCourse).as(\"Achievements for user should be null in course \" + secondCourse.getId()).isNullOrEmpty();\n     }\n \n     @Test\n-    @WithMockUser(value = \"admin\", roles = \"ADMIN\")\n+    @WithMockUser(value = \"student1\", roles = \"ADMIN\")\n     public void testDeleteCourse() throws Exception {\n-        student.addAchievement(first_achievement);\n-        student = userRepository.save(student);\n-\n-        var achievements = request.get(\"/api/courses/\" + first_course.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n-        assertThat(achievements.size()).as(\"Number of achievements for course should be 2\").isEqualTo(2);\n-\n-        request.delete(\"/api/courses/\" + first_course.getId(), HttpStatus.OK);\n-        assertThat(achievementService.findAll().contains(first_achievement)).as(\"Achievement gets deleted if course does\").isFalse();\n+        initTest();\n+        var courseId = firstCourse.getId();\n+        request.delete(\"/api/courses/\" + courseId, HttpStatus.OK);\n+        var achievementsFirstCourse = request.get(\"/api/courses/\" + courseId + \"/achievements\", HttpStatus.OK, Set.class);\n+        assertThat(achievementsFirstCourse.size()).as(\"Achievements in course \" + courseId + \" get deleted if course \" + courseId + \" is deleted\").isEqualTo(0);\n+        var achievementsSecondCourse = request.get(\"/api/courses/\" + secondCourse.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n+        assertThat(achievementsSecondCourse.size()).as(\"Achievements in course \" + secondCourse.getId() + \" do not get deleted if course \" + courseId + \" is deleted\").isEqualTo(4);\n     }\n \n     @Test\n-    @WithMockUser(value = \"admin\", roles = \"ADMIN\")\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n     public void testDeleteExercise() throws Exception {\n-        student.addAchievement(first_achievement);\n-        student = userRepository.save(student);\n-\n-        var achievements = achievementService.findAllByExerciseId(first_exercise.getId());\n-        assertThat(achievements.size()).as(\"Number of achievements for course should be 2\").isEqualTo(2);\n-\n-        exerciseService.delete(first_exercise.getId(), false, false);\n-        assertThat(achievementService.findById(first_achievement.getId())).as(\"Achievement gets deleted if exercise does\").isNotPresent();\n-        assertThat(achievementService.findById(third_achievement.getId())).as(\"Achievement gets deleted if exercise does\").isNotPresent();\n+        initTest();\n+        request.delete(\"/api/modeling-exercises/\" + firstExercise.getId(), HttpStatus.OK);\n+        var achievementsFirstCourse = request.get(\"/api/courses/\" + firstCourse.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n+        assertThat(achievementsFirstCourse.size()).as(\"Number of achievements for user should be 4 in course \" + firstCourse.getId()).isEqualTo(4);\n+        var achievementsSecondCourse = request.get(\"/api/courses/\" + secondCourse.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n+        assertThat(achievementsSecondCourse.size()).as(\"Number of achievements for user should be 4 in course \" + secondCourse.getId()).isEqualTo(4);\n     }\n \n-    @Test\n-    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n-    public void testUpdateAchievement() throws Exception {\n-        instructor.addAchievement(first_achievement);\n-        userRepository.save(instructor);\n-        var achievementToUpdate = achievementService.findById(first_achievement.getId()).get();\n-        achievementToUpdate.setDescription(\"Updated achievement\");\n-        request.put(\"/api/achievements\", achievementToUpdate, HttpStatus.OK);\n-        assertThat(achievementService.findById(first_achievement.getId()).get()).as(\"Achievement is updated correctly\").isEqualTo(achievementToUpdate);\n-    }\n+    private void initTest() throws Exception {\n+        var allAchievements = achievementRepository.findAllByCourseId(firstCourse.getId());\n+        allAchievements.addAll(achievementRepository.findAllByCourseId(secondCourse.getId()));\n \n-    @Test\n-    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n-    public void testDeleteAchievement() throws Exception {\n-        instructor.addAchievement(first_achievement);\n+        for (Achievement achievement : allAchievements) {\n+            student.addAchievement(achievement);\n+            instructor.addAchievement(achievement);\n+        }\n+        student = userRepository.save(student);\n         instructor = userRepository.save(instructor);\n-        first_achievement = achievementService.save(first_achievement);\n-        request.delete(\"/api/achievements/\" + first_achievement.getId(), HttpStatus.OK);\n-\n-        assertThat(achievementService.findById(first_achievement.getId())).as(\"Achievement is deleted\").isNotPresent();\n-        assertThat(userRepository.findById(instructor.getId()).isPresent()).as(\"User is not deleted\").isTrue();\n-        assertThat(request.get(\"/api/achievements\", HttpStatus.OK, Set.class).size()).as(\"User has no achievements\").isEqualTo(0);\n-        assertThat(courseService.findOne(first_course.getId())).as(\"Course is not deleted\").isNotNull();\n-        var achievements = request.get(\"/api/courses/\" + first_course.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n-        assertThat(achievements.size()).as(\"Course has only one achievement\").isEqualTo(1);\n-    }\n \n-    @Test\n-    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n-    public void testBadRequests() throws Exception {\n-        var emptyAchievement = new Achievement();\n-        request.put(\"/api/achievements\", emptyAchievement, HttpStatus.BAD_REQUEST);\n-        request.delete(\"/api/achievements/\" + 999L, HttpStatus.NOT_FOUND);\n-        instructor.setGroups(new HashSet<>());\n-        userRepository.save(instructor);\n-        emptyAchievement.setId(2L);\n-        emptyAchievement.setCourse(first_course);\n-        request.put(\"/api/achievements\", emptyAchievement, HttpStatus.FORBIDDEN);\n-        request.delete(\"/api/achievements/\" + first_achievement.getId(), HttpStatus.FORBIDDEN);\n+        var achievementsFirstCourse = request.get(\"/api/courses/\" + firstCourse.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n+        assertThat(achievementsFirstCourse.size()).as(\"Number of achievements for user should be 12 in course \" + firstCourse.getId()).isEqualTo(12);\n+        var achievementsSecondCourse = request.get(\"/api/courses/\" + secondCourse.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n+        assertThat(achievementsSecondCourse.size()).as(\"Number of achievements for user should be 4 in course \" + secondCourse.getId()).isEqualTo(4);\n     }\n-\n }\n", "next_change": {"commit": "669ba95aca108519bc3499ee88a04461aaa1f1b6", "changed_code": [{"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\nindex de43c5aeb29..35e13a2bea8 100644\n--- a/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\n", "chunk": "@@ -82,53 +69,67 @@ public class AchievementIntegrationTest extends AbstractSpringIntegrationBambooB\n     }\n \n     @Test\n-    @WithMockUser(value = \"student1\", roles = \"ADMIN\")\n-    public void testDeleteUser() throws Exception {\n-        initTest();\n-        request.delete(\"/api/users/\" + student.getLogin(), HttpStatus.OK);\n-        var achievementsFirstCourse = request.get(\"/api/courses/\" + firstCourse.getId() + \"/achievements\", HttpStatus.NOT_FOUND, Set.class);\n-        assertThat(achievementsFirstCourse).as(\"Achievements for user should be null in course \" + firstCourse.getId()).isNullOrEmpty();\n-        var achievementsSecondCourse = request.get(\"/api/courses/\" + secondCourse.getId() + \"/achievements\", HttpStatus.NOT_FOUND, Set.class);\n-        assertThat(achievementsSecondCourse).as(\"Achievements for user should be null in course \" + secondCourse.getId()).isNullOrEmpty();\n+    public void testManyToManyRelationToUser() {\n+        assertThat(user.getAchievements().size()).isEqualTo(0).as(\"Number of achievements for user should be 0\");\n+\n+        user.addAchievement(achievement);\n+        assertThat(user.getAchievements().size()).isEqualTo(1).as(\"Number of achievements for user should be 1\");\n+        assertThat(user.getAchievements().contains(achievement)).isTrue().as(\"User has correct achievement\");\n+        assertThat(achievement.getUsers().size()).isEqualTo(1).as(\"Number of users for achievement should be 1\");\n+        assertThat(achievement.getUsers().contains(user)).isTrue().as(\"Achievement has correct user\");\n+\n+        user.removeAchievement(achievement);\n+        assertThat(user.getAchievements().size()).isEqualTo(0).as(\"Number of achievements for user should be 0\");\n+        assertThat(user.getAchievements().contains(achievement)).isFalse().as(\"User does not have removed achievement\");\n+        assertThat(achievement.getUsers().size()).isEqualTo(0).as(\"Number of users for achievement should be 0\");\n+        assertThat(achievement.getUsers().contains(user)).isFalse().as(\"Achievement does not have incorrect user\");\n     }\n \n     @Test\n-    @WithMockUser(value = \"student1\", roles = \"ADMIN\")\n-    public void testDeleteCourse() throws Exception {\n-        initTest();\n-        var courseId = firstCourse.getId();\n-        request.delete(\"/api/courses/\" + courseId, HttpStatus.OK);\n-        var achievementsFirstCourse = request.get(\"/api/courses/\" + courseId + \"/achievements\", HttpStatus.OK, Set.class);\n-        assertThat(achievementsFirstCourse.size()).as(\"Achievements in course \" + courseId + \" get deleted if course \" + courseId + \" is deleted\").isEqualTo(0);\n-        var achievementsSecondCourse = request.get(\"/api/courses/\" + secondCourse.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n-        assertThat(achievementsSecondCourse.size()).as(\"Achievements in course \" + secondCourse.getId() + \" do not get deleted if course \" + courseId + \" is deleted\").isEqualTo(4);\n+    @WithMockUser(value = \"student1\", roles = \"USER\")\n+    public void testManyToManyRelationToUserRepository() throws Exception {\n+        user.addAchievement(achievement);\n+        user = userRepository.save(user);\n+\n+        var achievements = request.get(\"/api/achievements\", HttpStatus.OK, Set.class);\n+        assertThat(achievements.size()).isEqualTo(1).as(\"Number of achievements for user should be 1\");\n+\n+        userRepository.delete(user);\n+        assertThat(achievementRepository.findAll().contains(achievement)).isTrue().as(\"Achievement does not get deleted if user does\");\n     }\n \n     @Test\n-    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n-    public void testDeleteExercise() throws Exception {\n-        initTest();\n-        request.delete(\"/api/modeling-exercises/\" + firstExercise.getId(), HttpStatus.OK);\n-        var achievementsFirstCourse = request.get(\"/api/courses/\" + firstCourse.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n-        assertThat(achievementsFirstCourse.size()).as(\"Number of achievements for user should be 4 in course \" + firstCourse.getId()).isEqualTo(4);\n-        var achievementsSecondCourse = request.get(\"/api/courses/\" + secondCourse.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n-        assertThat(achievementsSecondCourse.size()).as(\"Number of achievements for user should be 4 in course \" + secondCourse.getId()).isEqualTo(4);\n+    @WithMockUser(value = \"student1\", roles = \"USER\")\n+    public void testManyToOneRelationToCourseRepository() throws Exception {\n+        var achievements = request.get(\"/api/courses/\" + course.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n+        assertThat(achievements.size()).isEqualTo(1).as(\"Number of achievements for course should be 1\");\n+\n+        courseRepository.delete(course);\n+        assertThat(achievementRepository.findAll().contains(achievement)).isFalse().as(\"Achievement gets deleted if course does\");\n     }\n \n-    private void initTest() throws Exception {\n-        var allAchievements = achievementRepository.findAllByCourseId(firstCourse.getId());\n-        allAchievements.addAll(achievementRepository.findAllByCourseId(secondCourse.getId()));\n-\n-        for (Achievement achievement : allAchievements) {\n-            student.addAchievement(achievement);\n-            instructor.addAchievement(achievement);\n-        }\n-        student = userRepository.save(student);\n-        instructor = userRepository.save(instructor);\n-\n-        var achievementsFirstCourse = request.get(\"/api/courses/\" + firstCourse.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n-        assertThat(achievementsFirstCourse.size()).as(\"Number of achievements for user should be 12 in course \" + firstCourse.getId()).isEqualTo(12);\n-        var achievementsSecondCourse = request.get(\"/api/courses/\" + secondCourse.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n-        assertThat(achievementsSecondCourse.size()).as(\"Number of achievements for user should be 4 in course \" + secondCourse.getId()).isEqualTo(4);\n+    @Test\n+    public void testUpdateAchievement() throws Exception {\n+        user.addAchievement(achievement);\n+        userRepository.save(user);\n+        var achievementToUpdate = achievementRepository.findById(achievement.getId()).get();\n+        achievementToUpdate.setDescription(\"Updated achievement\");\n+        request.put(\"/api/achievements\", achievementToUpdate, HttpStatus.OK);\n+        assertThat(achievementRepository.findById(achievement.getId()).get()).isEqualTo(achievementToUpdate).as(\"Achievement is updated correctly\");\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"USER\")\n+    public void testDeleteAchievement() throws Exception {\n+        user.addAchievement(achievement);\n+        user = userRepository.save(user);\n+        achievement = achievementRepository.save(achievement);\n+        request.delete(\"/achievements/{achievementId}\", HttpStatus.OK);\n+\n+        assertThat(achievementRepository.findAll().size()).isEqualTo(0).as(\"Achievement is deleted\");\n+        assertThat(userRepository.findById(user.getId()).isPresent()).isTrue().as(\"User is not deleted\");\n+        assertThat(userRepository.findById(user.getId()).get().getAchievements().size()).isEqualTo(0).as(\"User has no achievements\");\n+        assertThat(courseRepository.findById(course.getId()).isPresent()).isTrue().as(\"Course is not deleted\");\n+        assertThat(achievementService.findAllForCourse(course.getId()).size()).isEqualTo(0).as(\"Course has no achievements\");\n     }\n }\n", "next_change": {"commit": "d79fe9f4e5d9b3656047b7dc9c1cc7c52379f9d2", "changed_code": [{"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\nindex 35e13a2bea8..97851ed945c 100644\n--- a/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\n", "chunk": "@@ -130,6 +130,6 @@ public class AchievementIntegrationTest extends AbstractSpringIntegrationBambooB\n         assertThat(userRepository.findById(user.getId()).isPresent()).isTrue().as(\"User is not deleted\");\n         assertThat(userRepository.findById(user.getId()).get().getAchievements().size()).isEqualTo(0).as(\"User has no achievements\");\n         assertThat(courseRepository.findById(course.getId()).isPresent()).isTrue().as(\"Course is not deleted\");\n-        assertThat(achievementService.findAllForCourse(course.getId()).size()).isEqualTo(0).as(\"Course has no achievements\");\n+        assertThat(achievementService.findAllForCourse(course.getId(), user.getId()).size()).isEqualTo(0).as(\"Course has no achievements\");\n     }\n }\n", "next_change": {"commit": "84ce3abcc1059d698df86587b1e2a400cbc7b05c", "changed_code": [{"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\nindex 97851ed945c..30c5f6ff18a 100644\n--- a/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\n", "chunk": "@@ -119,17 +124,17 @@ public class AchievementIntegrationTest extends AbstractSpringIntegrationBambooB\n     }\n \n     @Test\n-    @WithMockUser(value = \"student1\", roles = \"USER\")\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n     public void testDeleteAchievement() throws Exception {\n-        user.addAchievement(achievement);\n-        user = userRepository.save(user);\n+        instructor.addAchievement(achievement);\n+        instructor = userRepository.save(instructor);\n         achievement = achievementRepository.save(achievement);\n-        request.delete(\"/achievements/{achievementId}\", HttpStatus.OK);\n+        request.delete(\"/api/achievements/\" + achievement.getId(), HttpStatus.OK);\n \n         assertThat(achievementRepository.findAll().size()).isEqualTo(0).as(\"Achievement is deleted\");\n-        assertThat(userRepository.findById(user.getId()).isPresent()).isTrue().as(\"User is not deleted\");\n-        assertThat(userRepository.findById(user.getId()).get().getAchievements().size()).isEqualTo(0).as(\"User has no achievements\");\n+        assertThat(userRepository.findById(instructor.getId()).isPresent()).isTrue().as(\"User is not deleted\");\n+        assertThat(userRepository.findById(instructor.getId()).get().getAchievements().size()).isEqualTo(0).as(\"User has no achievements\");\n         assertThat(courseRepository.findById(course.getId()).isPresent()).isTrue().as(\"Course is not deleted\");\n-        assertThat(achievementService.findAllForCourse(course.getId(), user.getId()).size()).isEqualTo(0).as(\"Course has no achievements\");\n+        assertThat(achievementService.findAllForCourse(course.getId(), instructor.getId()).size()).isEqualTo(0).as(\"Course has no achievements\");\n     }\n }\n", "next_change": {"commit": "497e3316832c66677399172c3bc6bd223073c1b2", "changed_code": [{"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\nindex 30c5f6ff18a..e366ec2ad68 100644\n--- a/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\n", "chunk": "@@ -131,10 +134,11 @@ public class AchievementIntegrationTest extends AbstractSpringIntegrationBambooB\n         achievement = achievementRepository.save(achievement);\n         request.delete(\"/api/achievements/\" + achievement.getId(), HttpStatus.OK);\n \n-        assertThat(achievementRepository.findAll().size()).isEqualTo(0).as(\"Achievement is deleted\");\n-        assertThat(userRepository.findById(instructor.getId()).isPresent()).isTrue().as(\"User is not deleted\");\n-        assertThat(userRepository.findById(instructor.getId()).get().getAchievements().size()).isEqualTo(0).as(\"User has no achievements\");\n-        assertThat(courseRepository.findById(course.getId()).isPresent()).isTrue().as(\"Course is not deleted\");\n-        assertThat(achievementService.findAllForCourse(course.getId(), instructor.getId()).size()).isEqualTo(0).as(\"Course has no achievements\");\n+        assertThat(achievementRepository.findAll().size()).as(\"Achievement is deleted\").isEqualTo(0);\n+        assertThat(userRepository.findById(instructor.getId()).isPresent()).as(\"User is not deleted\").isTrue();\n+        assertThat(userRepository.findById(instructor.getId()).get().getAchievements().size()).as(\"User has no achievements\").isEqualTo(0);\n+        assertThat(courseRepository.findById(course.getId()).isPresent()).as(\"Course is not deleted\").isTrue();\n+        var achievements = request.get(\"/api/courses/\" + course.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n+        assertThat(achievements.size()).as(\"Course has no achievements\").isEqualTo(0);\n     }\n }\n", "next_change": {"commit": "0616ac4ef001698a1e962c595c2ceecc0eb76dd0", "changed_code": [{"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\nindex e366ec2ad68..b7110ec71c1 100644\n--- a/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\n", "chunk": "@@ -141,4 +141,19 @@ public class AchievementIntegrationTest extends AbstractSpringIntegrationBambooB\n         var achievements = request.get(\"/api/courses/\" + course.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n         assertThat(achievements.size()).as(\"Course has no achievements\").isEqualTo(0);\n     }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testBadRequests() throws Exception {\n+        var emptyAchievement = new Achievement();\n+        request.put(\"/api/achievements\", emptyAchievement, HttpStatus.BAD_REQUEST);\n+        request.delete(\"/api/achievements/17\", HttpStatus.NOT_FOUND);\n+        instructor.setGroups(new HashSet<>());\n+        userRepository.save(instructor);\n+        emptyAchievement.setId(2L);\n+        emptyAchievement.setCourse(course);\n+        request.put(\"/api/achievements\", emptyAchievement, HttpStatus.FORBIDDEN);\n+        request.delete(\"/api/achievements/1\", HttpStatus.FORBIDDEN);\n+    }\n+\n }\n", "next_change": {"commit": "45dac20bf2cd9e41c1e6ff21336a2849962b462e", "changed_code": [{"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\nindex b7110ec71c1..b3dfc571e48 100644\n--- a/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\n", "chunk": "@@ -153,7 +153,7 @@ public class AchievementIntegrationTest extends AbstractSpringIntegrationBambooB\n         emptyAchievement.setId(2L);\n         emptyAchievement.setCourse(course);\n         request.put(\"/api/achievements\", emptyAchievement, HttpStatus.FORBIDDEN);\n-        request.delete(\"/api/achievements/1\", HttpStatus.FORBIDDEN);\n+        request.delete(\"/api/achievements/\" + achievement.getId(), HttpStatus.FORBIDDEN);\n     }\n \n }\n", "next_change": {"commit": "fd13e3d27e731c1b8d1a2dea0e1c43ae2468034b", "changed_code": [{"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\nindex b3dfc571e48..57b7dc2f9ee 100644\n--- a/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\n", "chunk": "@@ -147,13 +175,13 @@ public class AchievementIntegrationTest extends AbstractSpringIntegrationBambooB\n     public void testBadRequests() throws Exception {\n         var emptyAchievement = new Achievement();\n         request.put(\"/api/achievements\", emptyAchievement, HttpStatus.BAD_REQUEST);\n-        request.delete(\"/api/achievements/17\", HttpStatus.NOT_FOUND);\n+        request.delete(\"/api/achievements/\" + 999L, HttpStatus.NOT_FOUND);\n         instructor.setGroups(new HashSet<>());\n         userRepository.save(instructor);\n         emptyAchievement.setId(2L);\n-        emptyAchievement.setCourse(course);\n+        emptyAchievement.setCourse(first_course);\n         request.put(\"/api/achievements\", emptyAchievement, HttpStatus.FORBIDDEN);\n-        request.delete(\"/api/achievements/\" + achievement.getId(), HttpStatus.FORBIDDEN);\n+        request.delete(\"/api/achievements/\" + first_achievement.getId(), HttpStatus.FORBIDDEN);\n     }\n \n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTY0OTI5MA==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r479649290", "body": "You could use here the create REST Call instead and for the above lines (same for tests below)", "bodyText": "You could use here the create REST Call instead and for the above lines (same for tests below)", "bodyHTML": "<p dir=\"auto\">You could use here the create REST Call instead and for the above lines (same for tests below)</p>", "author": "fde312", "createdAt": "2020-08-29T13:21:17Z", "path": "src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java", "diffHunk": "@@ -0,0 +1,137 @@\n+package de.tum.in.www1.artemis;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.util.Set;\n+\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import de.tum.in.www1.artemis.domain.Achievement;\n+import de.tum.in.www1.artemis.domain.Course;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.repository.AchievementRepository;\n+import de.tum.in.www1.artemis.repository.CourseRepository;\n+import de.tum.in.www1.artemis.repository.UserRepository;\n+import de.tum.in.www1.artemis.service.AchievementService;\n+import de.tum.in.www1.artemis.util.DatabaseUtilService;\n+import de.tum.in.www1.artemis.util.RequestUtilService;\n+\n+public class AchievementIntegrationTest extends AbstractSpringIntegrationBambooBitbucketJiraTest {\n+\n+    @Autowired\n+    DatabaseUtilService database;\n+\n+    @Autowired\n+    RequestUtilService request;\n+\n+    @Autowired\n+    AchievementService achievementService;\n+\n+    @Autowired\n+    AchievementRepository achievementRepository;\n+\n+    @Autowired\n+    UserRepository userRepository;\n+\n+    @Autowired\n+    CourseRepository courseRepository;\n+\n+    private User user;\n+\n+    private Course course;\n+\n+    private Achievement achievement;\n+\n+    @BeforeEach\n+    public void initTestCase() {\n+        user = database.addUsers(1, 0, 0).get(0);\n+        course = database.addEmptyCourse();\n+\n+        achievement = new Achievement();\n+        achievement.setId(1L);\n+        achievement.setTitle(\"Test Achievement\");\n+        achievement.setDescription(\"Create correct relations\");\n+        achievement.setIcon(\"\");\n+        achievement.setRank(1);\n+        achievement.setCourse(course);\n+\n+        achievement = achievementRepository.save(achievement);\n+    }\n+\n+    @AfterEach\n+    public void resetDatabase() {\n+        database.resetDatabase();\n+    }\n+\n+    @Test\n+    public void testManyToManyRelationToUser() {\n+        assertThat(user.getAchievements().size()).isEqualTo(0).as(\"Number of achievements for user should be 0\");\n+\n+        user.addAchievement(achievement);\n+        assertThat(user.getAchievements().size()).isEqualTo(1).as(\"Number of achievements for user should be 1\");\n+        assertThat(user.getAchievements().contains(achievement)).isTrue().as(\"User has correct achievement\");\n+        assertThat(achievement.getUsers().size()).isEqualTo(1).as(\"Number of users for achievement should be 1\");\n+        assertThat(achievement.getUsers().contains(user)).isTrue().as(\"Achievement has correct user\");\n+\n+        user.removeAchievement(achievement);\n+        assertThat(user.getAchievements().size()).isEqualTo(0).as(\"Number of achievements for user should be 0\");\n+        assertThat(user.getAchievements().contains(achievement)).isFalse().as(\"User does not have removed achievement\");\n+        assertThat(achievement.getUsers().size()).isEqualTo(0).as(\"Number of users for achievement should be 0\");\n+        assertThat(achievement.getUsers().contains(user)).isFalse().as(\"Achievement does not have incorrect user\");\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"USER\")\n+    public void testManyToManyRelationToUserRepository() throws Exception {\n+        user.addAchievement(achievement);\n+        user = userRepository.save(user);\n+\n+        var achievements = request.get(\"/api/achievements\", HttpStatus.OK, Set.class);", "originalCommit": "198e5998d51d5103ab55075d2bee38be7a95c67d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc2MDA0OA==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r479760048", "bodyText": "There is no create REST call for achievements, only update.", "author": "balazs-czopf", "createdAt": "2020-08-30T11:50:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTY0OTI5MA=="}], "type": "inlineReview", "revised_code": {"commit": "6aa68b0ab7a071fa631c7c72cdb8ea02ccf15a39", "changed_code": [{"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\nindex 21c051dc597..0f3ea1379ab 100644\n--- a/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\n", "chunk": "@@ -70,68 +88,100 @@ public class AchievementIntegrationTest extends AbstractSpringIntegrationBambooB\n \n     @Test\n     public void testManyToManyRelationToUser() {\n-        assertThat(user.getAchievements().size()).isEqualTo(0).as(\"Number of achievements for user should be 0\");\n-\n-        user.addAchievement(achievement);\n-        assertThat(user.getAchievements().size()).isEqualTo(1).as(\"Number of achievements for user should be 1\");\n-        assertThat(user.getAchievements().contains(achievement)).isTrue().as(\"User has correct achievement\");\n-        assertThat(achievement.getUsers().size()).isEqualTo(1).as(\"Number of users for achievement should be 1\");\n-        assertThat(achievement.getUsers().contains(user)).isTrue().as(\"Achievement has correct user\");\n-\n-        user.removeAchievement(achievement);\n-        assertThat(user.getAchievements().size()).isEqualTo(0).as(\"Number of achievements for user should be 0\");\n-        assertThat(user.getAchievements().contains(achievement)).isFalse().as(\"User does not have removed achievement\");\n-        assertThat(achievement.getUsers().size()).isEqualTo(0).as(\"Number of users for achievement should be 0\");\n-        assertThat(achievement.getUsers().contains(user)).isFalse().as(\"Achievement does not have incorrect user\");\n+        assertThat(student.getAchievements().size()).as(\"Number of achievements for user should be 0\").isEqualTo(0);\n+\n+        student.addAchievement(first_achievement);\n+        assertThat(student.getAchievements().size()).as(\"Number of achievements for user should be 1\").isEqualTo(1);\n+        assertThat(student.getAchievements().contains(first_achievement)).as(\"User has correct achievement\").isTrue();\n+        assertThat(first_achievement.getUsers().size()).as(\"Number of users for achievement should be 1\").isEqualTo(1);\n+        assertThat(first_achievement.getUsers().contains(student)).as(\"Achievement has correct user\").isTrue();\n+\n+        student.removeAchievement(first_achievement);\n+        assertThat(student.getAchievements().size()).as(\"Number of achievements for user should be 0\").isEqualTo(0);\n+        assertThat(student.getAchievements().contains(first_achievement)).as(\"User does not have removed achievement\").isFalse();\n+        assertThat(first_achievement.getUsers().size()).as(\"Number of users for achievement should be 0\").isEqualTo(0);\n+        assertThat(first_achievement.getUsers().contains(student)).as(\"Achievement does not have incorrect user\").isFalse();\n     }\n \n     @Test\n     @WithMockUser(value = \"student1\", roles = \"USER\")\n-    public void testManyToManyRelationToUserRepository() throws Exception {\n-        user.addAchievement(achievement);\n-        user = userRepository.save(user);\n+    public void testDeleteUser() throws Exception {\n+        student.addAchievement(first_achievement);\n+        student = userRepository.save(student);\n \n         var achievements = request.get(\"/api/achievements\", HttpStatus.OK, Set.class);\n-        assertThat(achievements.size()).isEqualTo(1).as(\"Number of achievements for user should be 1\");\n+        assertThat(achievements.size()).as(\"Number of achievements for user should be 1\").isEqualTo(1);\n \n-        userRepository.delete(user);\n-        assertThat(achievementRepository.findAll().contains(achievement)).isTrue().as(\"Achievement does not get deleted if user does\");\n+        userRepository.delete(student);\n+        assertThat(achievementService.findAll().contains(first_achievement)).as(\"Achievement does not get deleted if user does\").isTrue();\n     }\n \n     @Test\n-    @WithMockUser(value = \"student1\", roles = \"USER\")\n-    public void testManyToOneRelationToCourseRepository() throws Exception {\n-        var achievements = request.get(\"/api/courses/\" + course.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n-        assertThat(achievements.size()).isEqualTo(1).as(\"Number of achievements for course should be 1\");\n+    @WithMockUser(value = \"admin\", roles = \"ADMIN\")\n+    public void testDeleteCourse() throws Exception {\n+        student.addAchievement(first_achievement);\n+        student = userRepository.save(student);\n \n-        courseRepository.delete(course);\n-        assertThat(achievementRepository.findAll().contains(achievement)).isFalse().as(\"Achievement gets deleted if course does\");\n+        var achievements = request.get(\"/api/courses/\" + first_course.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n+        assertThat(achievements.size()).as(\"Number of achievements for course should be 2\").isEqualTo(2);\n+\n+        request.delete(\"/api/courses/\" + first_course.getId(), HttpStatus.OK);\n+        assertThat(achievementService.findAll().contains(first_achievement)).as(\"Achievement gets deleted if course does\").isFalse();\n     }\n \n     @Test\n-    public void testUpdateAchievement() {\n-        user.addAchievement(achievement);\n-        userRepository.save(user);\n-        var achievementToUpdate = achievementRepository.findById(achievement.getId());\n-        if (achievementToUpdate.isPresent()) {\n-            achievementToUpdate.get().setDescription(\"Updated achievement\");\n-            achievementRepository.save(achievementToUpdate.get());\n-            assertThat(achievementRepository.findById(achievement.getId()).get()).isEqualTo(achievementToUpdate.get()).as(\"Achievement is updated correctly\");\n-        }\n+    @WithMockUser(value = \"admin\", roles = \"ADMIN\")\n+    public void testDeleteExercise() throws Exception {\n+        student.addAchievement(first_achievement);\n+        student = userRepository.save(student);\n+\n+        var achievements = achievementService.findAllByExerciseId(first_exercise.getId());\n+        assertThat(achievements.size()).as(\"Number of achievements for course should be 2\").isEqualTo(2);\n+\n+        exerciseService.delete(first_exercise.getId(), false, false);\n+        assertThat(achievementService.findById(first_achievement.getId())).as(\"Achievement does not get deleted if exercise does\").isPresent();\n+        assertThat(achievementService.findById(third_achievement.getId())).as(\"Achievement does not get deleted if exercise does\").isPresent();\n     }\n \n     @Test\n-    @WithMockUser(value = \"student1\", roles = \"USER\")\n-    public void testDeleteAchievement() {\n-        user.addAchievement(achievement);\n-        user = userRepository.save(user);\n-        achievement = achievementRepository.save(achievement);\n-        achievementService.delete(achievement);\n-\n-        assertThat(achievementRepository.findAll().size()).isEqualTo(0).as(\"Achievement is deleted\");\n-        assertThat(userRepository.findById(user.getId()).isPresent()).isTrue().as(\"User is not deleted\");\n-        assertThat(userRepository.findById(user.getId()).get().getAchievements().size()).isEqualTo(0).as(\"User has no achievements\");\n-        assertThat(courseRepository.findById(course.getId()).isPresent()).isTrue().as(\"Course is not deleted\");\n-        assertThat(achievementService.findAllForCourse(course.getId()).size()).isEqualTo(0).as(\"Course has no achievements\");\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testUpdateAchievement() throws Exception {\n+        instructor.addAchievement(first_achievement);\n+        userRepository.save(instructor);\n+        var achievementToUpdate = achievementService.findById(first_achievement.getId()).get();\n+        achievementToUpdate.setDescription(\"Updated achievement\");\n+        request.put(\"/api/achievements\", achievementToUpdate, HttpStatus.OK);\n+        assertThat(achievementService.findById(first_achievement.getId()).get()).as(\"Achievement is updated correctly\").isEqualTo(achievementToUpdate);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testDeleteAchievement() throws Exception {\n+        instructor.addAchievement(first_achievement);\n+        instructor = userRepository.save(instructor);\n+        first_achievement = achievementService.save(first_achievement);\n+        request.delete(\"/api/achievements/\" + first_achievement.getId(), HttpStatus.OK);\n+\n+        assertThat(achievementService.findById(first_achievement.getId())).as(\"Achievement is deleted\").isNotPresent();\n+        assertThat(userRepository.findById(instructor.getId()).isPresent()).as(\"User is not deleted\").isTrue();\n+        assertThat(request.get(\"/api/achievements\", HttpStatus.OK, Set.class).size()).as(\"User has no achievements\").isEqualTo(0);\n+        assertThat(courseService.findOne(first_course.getId())).as(\"Course is not deleted\").isNotNull();\n+        var achievements = request.get(\"/api/courses/\" + first_course.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n+        assertThat(achievements.size()).as(\"Course has only one achievement\").isEqualTo(1);\n     }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testBadRequests() throws Exception {\n+        var emptyAchievement = new Achievement();\n+        request.put(\"/api/achievements\", emptyAchievement, HttpStatus.BAD_REQUEST);\n+        request.delete(\"/api/achievements/\" + 999L, HttpStatus.NOT_FOUND);\n+        instructor.setGroups(new HashSet<>());\n+        userRepository.save(instructor);\n+        emptyAchievement.setId(2L);\n+        emptyAchievement.setCourse(first_course);\n+        request.put(\"/api/achievements\", emptyAchievement, HttpStatus.FORBIDDEN);\n+        request.delete(\"/api/achievements/\" + first_achievement.getId(), HttpStatus.FORBIDDEN);\n+    }\n+\n }\n", "next_change": {"commit": "8d5bfc049d9e75323290b069e7343df6fc579ee7", "changed_code": [{"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\nindex 0f3ea1379ab..6d5c48c239a 100644\n--- a/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\n", "chunk": "@@ -87,101 +82,67 @@ public class AchievementIntegrationTest extends AbstractSpringIntegrationBambooB\n     }\n \n     @Test\n-    public void testManyToManyRelationToUser() {\n-        assertThat(student.getAchievements().size()).as(\"Number of achievements for user should be 0\").isEqualTo(0);\n-\n-        student.addAchievement(first_achievement);\n-        assertThat(student.getAchievements().size()).as(\"Number of achievements for user should be 1\").isEqualTo(1);\n-        assertThat(student.getAchievements().contains(first_achievement)).as(\"User has correct achievement\").isTrue();\n-        assertThat(first_achievement.getUsers().size()).as(\"Number of users for achievement should be 1\").isEqualTo(1);\n-        assertThat(first_achievement.getUsers().contains(student)).as(\"Achievement has correct user\").isTrue();\n-\n-        student.removeAchievement(first_achievement);\n-        assertThat(student.getAchievements().size()).as(\"Number of achievements for user should be 0\").isEqualTo(0);\n-        assertThat(student.getAchievements().contains(first_achievement)).as(\"User does not have removed achievement\").isFalse();\n-        assertThat(first_achievement.getUsers().size()).as(\"Number of users for achievement should be 0\").isEqualTo(0);\n-        assertThat(first_achievement.getUsers().contains(student)).as(\"Achievement does not have incorrect user\").isFalse();\n-    }\n-\n-    @Test\n-    @WithMockUser(value = \"student1\", roles = \"USER\")\n+    @WithMockUser(value = \"student1\", roles = \"ADMIN\")\n     public void testDeleteUser() throws Exception {\n-        student.addAchievement(first_achievement);\n-        student = userRepository.save(student);\n-\n-        var achievements = request.get(\"/api/achievements\", HttpStatus.OK, Set.class);\n-        assertThat(achievements.size()).as(\"Number of achievements for user should be 1\").isEqualTo(1);\n-\n-        userRepository.delete(student);\n-        assertThat(achievementService.findAll().contains(first_achievement)).as(\"Achievement does not get deleted if user does\").isTrue();\n+        initTest();\n+        request.delete(\"/api/users/\" + student.getLogin(), HttpStatus.OK);\n+        var achievementsFirstCourse = request.get(\"/api/courses/\" + firstCourse.getId() + \"/achievements\", HttpStatus.NOT_FOUND, Set.class);\n+        assertThat(achievementsFirstCourse).as(\"Achievements for user should be null in course \" + firstCourse.getId()).isNullOrEmpty();\n+        var achievementsSecondCourse = request.get(\"/api/courses/\" + secondCourse.getId() + \"/achievements\", HttpStatus.NOT_FOUND, Set.class);\n+        assertThat(achievementsSecondCourse).as(\"Achievements for user should be null in course \" + secondCourse.getId()).isNullOrEmpty();\n     }\n \n     @Test\n-    @WithMockUser(value = \"admin\", roles = \"ADMIN\")\n+    @WithMockUser(value = \"student1\", roles = \"ADMIN\")\n     public void testDeleteCourse() throws Exception {\n-        student.addAchievement(first_achievement);\n-        student = userRepository.save(student);\n-\n-        var achievements = request.get(\"/api/courses/\" + first_course.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n-        assertThat(achievements.size()).as(\"Number of achievements for course should be 2\").isEqualTo(2);\n-\n-        request.delete(\"/api/courses/\" + first_course.getId(), HttpStatus.OK);\n-        assertThat(achievementService.findAll().contains(first_achievement)).as(\"Achievement gets deleted if course does\").isFalse();\n+        initTest();\n+        var courseId = firstCourse.getId();\n+        request.delete(\"/api/courses/\" + courseId, HttpStatus.OK);\n+        var achievementsFirstCourse = request.get(\"/api/courses/\" + courseId + \"/achievements\", HttpStatus.OK, Set.class);\n+        assertThat(achievementsFirstCourse.size()).as(\"Achievements in course \" + courseId + \" get deleted if course \" + courseId + \" is deleted\").isEqualTo(0);\n+        var achievementsSecondCourse = request.get(\"/api/courses/\" + secondCourse.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n+        assertThat(achievementsSecondCourse.size()).as(\"Achievements in course \" + secondCourse.getId() + \" do not get deleted if course \" + courseId + \" is deleted\").isEqualTo(4);\n     }\n \n     @Test\n-    @WithMockUser(value = \"admin\", roles = \"ADMIN\")\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n     public void testDeleteExercise() throws Exception {\n-        student.addAchievement(first_achievement);\n-        student = userRepository.save(student);\n-\n-        var achievements = achievementService.findAllByExerciseId(first_exercise.getId());\n-        assertThat(achievements.size()).as(\"Number of achievements for course should be 2\").isEqualTo(2);\n-\n-        exerciseService.delete(first_exercise.getId(), false, false);\n-        assertThat(achievementService.findById(first_achievement.getId())).as(\"Achievement does not get deleted if exercise does\").isPresent();\n-        assertThat(achievementService.findById(third_achievement.getId())).as(\"Achievement does not get deleted if exercise does\").isPresent();\n+        initTest();\n+        request.delete(\"/api/modeling-exercises/\" + firstExercise.getId(), HttpStatus.OK);\n+        var achievementsFirstCourse = request.get(\"/api/courses/\" + firstCourse.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n+        assertThat(achievementsFirstCourse.size()).as(\"Number of achievements for user should be 4 in course \" + firstCourse.getId()).isEqualTo(4);\n+        var achievementsSecondCourse = request.get(\"/api/courses/\" + secondCourse.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n+        assertThat(achievementsSecondCourse.size()).as(\"Number of achievements for user should be 4 in course \" + secondCourse.getId()).isEqualTo(4);\n     }\n \n     @Test\n-    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n-    public void testUpdateAchievement() throws Exception {\n-        instructor.addAchievement(first_achievement);\n-        userRepository.save(instructor);\n-        var achievementToUpdate = achievementService.findById(first_achievement.getId()).get();\n-        achievementToUpdate.setDescription(\"Updated achievement\");\n-        request.put(\"/api/achievements\", achievementToUpdate, HttpStatus.OK);\n-        assertThat(achievementService.findById(first_achievement.getId()).get()).as(\"Achievement is updated correctly\").isEqualTo(achievementToUpdate);\n+    @WithMockUser(value = \"student1\", roles = \"USER\")\n+    public void testRewardAchievement() throws Exception {\n+        var participation = database.addParticipationForExercise(firstExercise, student.getLogin());\n+        var result = database.addResultToParticipation(participation);\n+        Set<Result> results = new HashSet<>();\n+        results.add(result);\n+        participation.setResults(results);\n+        participationRepository.save(participation);\n+        achievementService.checkForAchievements(result);\n+        var achievementsFirstCourse = request.get(\"/api/courses/\" + firstCourse.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n+        assertThat(achievementsFirstCourse.size()).as(\"User got an achievement\").isEqualTo(1);\n     }\n \n-    @Test\n-    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n-    public void testDeleteAchievement() throws Exception {\n-        instructor.addAchievement(first_achievement);\n+    private void initTest() throws Exception {\n+        var allAchievements = achievementRepository.findAllByCourseId(firstCourse.getId());\n+        allAchievements.addAll(achievementRepository.findAllByCourseId(secondCourse.getId()));\n+\n+        for (Achievement achievement : allAchievements) {\n+            student.addAchievement(achievement);\n+            instructor.addAchievement(achievement);\n+        }\n+        student = userRepository.save(student);\n         instructor = userRepository.save(instructor);\n-        first_achievement = achievementService.save(first_achievement);\n-        request.delete(\"/api/achievements/\" + first_achievement.getId(), HttpStatus.OK);\n-\n-        assertThat(achievementService.findById(first_achievement.getId())).as(\"Achievement is deleted\").isNotPresent();\n-        assertThat(userRepository.findById(instructor.getId()).isPresent()).as(\"User is not deleted\").isTrue();\n-        assertThat(request.get(\"/api/achievements\", HttpStatus.OK, Set.class).size()).as(\"User has no achievements\").isEqualTo(0);\n-        assertThat(courseService.findOne(first_course.getId())).as(\"Course is not deleted\").isNotNull();\n-        var achievements = request.get(\"/api/courses/\" + first_course.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n-        assertThat(achievements.size()).as(\"Course has only one achievement\").isEqualTo(1);\n-    }\n \n-    @Test\n-    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n-    public void testBadRequests() throws Exception {\n-        var emptyAchievement = new Achievement();\n-        request.put(\"/api/achievements\", emptyAchievement, HttpStatus.BAD_REQUEST);\n-        request.delete(\"/api/achievements/\" + 999L, HttpStatus.NOT_FOUND);\n-        instructor.setGroups(new HashSet<>());\n-        userRepository.save(instructor);\n-        emptyAchievement.setId(2L);\n-        emptyAchievement.setCourse(first_course);\n-        request.put(\"/api/achievements\", emptyAchievement, HttpStatus.FORBIDDEN);\n-        request.delete(\"/api/achievements/\" + first_achievement.getId(), HttpStatus.FORBIDDEN);\n+        var achievementsFirstCourse = request.get(\"/api/courses/\" + firstCourse.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n+        assertThat(achievementsFirstCourse.size()).as(\"Number of achievements for user should be 12 in course \" + firstCourse.getId()).isEqualTo(12);\n+        var achievementsSecondCourse = request.get(\"/api/courses/\" + secondCourse.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n+        assertThat(achievementsSecondCourse.size()).as(\"Number of achievements for user should be 4 in course \" + secondCourse.getId()).isEqualTo(4);\n     }\n-\n }\n", "next_change": {"commit": "7a5de1a37353eb19f93ef49666bba352198834cb", "changed_code": [{"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\nindex 6d5c48c239a..3b8af6aa4c6 100644\n--- a/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\n", "chunk": "@@ -82,67 +85,101 @@ public class AchievementIntegrationTest extends AbstractSpringIntegrationBambooB\n     }\n \n     @Test\n-    @WithMockUser(value = \"student1\", roles = \"ADMIN\")\n+    public void testManyToManyRelationToUser() {\n+        assertThat(student.getAchievements().size()).as(\"Number of achievements for user should be 0\").isEqualTo(0);\n+\n+        student.addAchievement(first_achievement);\n+        assertThat(student.getAchievements().size()).as(\"Number of achievements for user should be 1\").isEqualTo(1);\n+        assertThat(student.getAchievements().contains(first_achievement)).as(\"User has correct achievement\").isTrue();\n+        assertThat(first_achievement.getUsers().size()).as(\"Number of users for achievement should be 1\").isEqualTo(1);\n+        assertThat(first_achievement.getUsers().contains(student)).as(\"Achievement has correct user\").isTrue();\n+\n+        student.removeAchievement(first_achievement);\n+        assertThat(student.getAchievements().size()).as(\"Number of achievements for user should be 0\").isEqualTo(0);\n+        assertThat(student.getAchievements().contains(first_achievement)).as(\"User does not have removed achievement\").isFalse();\n+        assertThat(first_achievement.getUsers().size()).as(\"Number of users for achievement should be 0\").isEqualTo(0);\n+        assertThat(first_achievement.getUsers().contains(student)).as(\"Achievement does not have incorrect user\").isFalse();\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"USER\")\n     public void testDeleteUser() throws Exception {\n-        initTest();\n-        request.delete(\"/api/users/\" + student.getLogin(), HttpStatus.OK);\n-        var achievementsFirstCourse = request.get(\"/api/courses/\" + firstCourse.getId() + \"/achievements\", HttpStatus.NOT_FOUND, Set.class);\n-        assertThat(achievementsFirstCourse).as(\"Achievements for user should be null in course \" + firstCourse.getId()).isNullOrEmpty();\n-        var achievementsSecondCourse = request.get(\"/api/courses/\" + secondCourse.getId() + \"/achievements\", HttpStatus.NOT_FOUND, Set.class);\n-        assertThat(achievementsSecondCourse).as(\"Achievements for user should be null in course \" + secondCourse.getId()).isNullOrEmpty();\n+        student.addAchievement(first_achievement);\n+        student = userRepository.save(student);\n+\n+        var achievements = request.get(\"/api/achievements\", HttpStatus.OK, Set.class);\n+        assertThat(achievements.size()).as(\"Number of achievements for user should be 1\").isEqualTo(1);\n+\n+        userRepository.delete(student);\n+        assertThat(achievementService.findAll().contains(first_achievement)).as(\"Achievement does not get deleted if user does\").isTrue();\n     }\n \n     @Test\n-    @WithMockUser(value = \"student1\", roles = \"ADMIN\")\n+    @WithMockUser(value = \"admin\", roles = \"ADMIN\")\n     public void testDeleteCourse() throws Exception {\n-        initTest();\n-        var courseId = firstCourse.getId();\n-        request.delete(\"/api/courses/\" + courseId, HttpStatus.OK);\n-        var achievementsFirstCourse = request.get(\"/api/courses/\" + courseId + \"/achievements\", HttpStatus.OK, Set.class);\n-        assertThat(achievementsFirstCourse.size()).as(\"Achievements in course \" + courseId + \" get deleted if course \" + courseId + \" is deleted\").isEqualTo(0);\n-        var achievementsSecondCourse = request.get(\"/api/courses/\" + secondCourse.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n-        assertThat(achievementsSecondCourse.size()).as(\"Achievements in course \" + secondCourse.getId() + \" do not get deleted if course \" + courseId + \" is deleted\").isEqualTo(4);\n+        student.addAchievement(first_achievement);\n+        student = userRepository.save(student);\n+\n+        var achievements = request.get(\"/api/courses/\" + first_course.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n+        assertThat(achievements.size()).as(\"Number of achievements for course should be 2\").isEqualTo(2);\n+\n+        request.delete(\"/api/courses/\" + first_course.getId(), HttpStatus.OK);\n+        assertThat(achievementService.findAll().contains(first_achievement)).as(\"Achievement gets deleted if course does\").isFalse();\n     }\n \n     @Test\n-    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    @WithMockUser(value = \"admin\", roles = \"ADMIN\")\n     public void testDeleteExercise() throws Exception {\n-        initTest();\n-        request.delete(\"/api/modeling-exercises/\" + firstExercise.getId(), HttpStatus.OK);\n-        var achievementsFirstCourse = request.get(\"/api/courses/\" + firstCourse.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n-        assertThat(achievementsFirstCourse.size()).as(\"Number of achievements for user should be 4 in course \" + firstCourse.getId()).isEqualTo(4);\n-        var achievementsSecondCourse = request.get(\"/api/courses/\" + secondCourse.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n-        assertThat(achievementsSecondCourse.size()).as(\"Number of achievements for user should be 4 in course \" + secondCourse.getId()).isEqualTo(4);\n+        student.addAchievement(first_achievement);\n+        student = userRepository.save(student);\n+\n+        var achievements = achievementService.findAllByExerciseId(first_exercise.getId());\n+        assertThat(achievements.size()).as(\"Number of achievements for course should be 2\").isEqualTo(2);\n+\n+        exerciseService.delete(first_exercise.getId(), false, false);\n+        assertThat(achievementService.findById(first_achievement.getId())).as(\"Achievement gets deleted if exercise does\").isNotPresent();\n+        assertThat(achievementService.findById(third_achievement.getId())).as(\"Achievement gets deleted if exercise does\").isNotPresent();\n     }\n \n     @Test\n-    @WithMockUser(value = \"student1\", roles = \"USER\")\n-    public void testRewardAchievement() throws Exception {\n-        var participation = database.addParticipationForExercise(firstExercise, student.getLogin());\n-        var result = database.addResultToParticipation(participation);\n-        Set<Result> results = new HashSet<>();\n-        results.add(result);\n-        participation.setResults(results);\n-        participationRepository.save(participation);\n-        achievementService.checkForAchievements(result);\n-        var achievementsFirstCourse = request.get(\"/api/courses/\" + firstCourse.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n-        assertThat(achievementsFirstCourse.size()).as(\"User got an achievement\").isEqualTo(1);\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testUpdateAchievement() throws Exception {\n+        instructor.addAchievement(first_achievement);\n+        userRepository.save(instructor);\n+        var achievementToUpdate = achievementService.findById(first_achievement.getId()).get();\n+        achievementToUpdate.setDescription(\"Updated achievement\");\n+        request.put(\"/api/achievements\", achievementToUpdate, HttpStatus.OK);\n+        assertThat(achievementService.findById(first_achievement.getId()).get()).as(\"Achievement is updated correctly\").isEqualTo(achievementToUpdate);\n     }\n \n-    private void initTest() throws Exception {\n-        var allAchievements = achievementRepository.findAllByCourseId(firstCourse.getId());\n-        allAchievements.addAll(achievementRepository.findAllByCourseId(secondCourse.getId()));\n-\n-        for (Achievement achievement : allAchievements) {\n-            student.addAchievement(achievement);\n-            instructor.addAchievement(achievement);\n-        }\n-        student = userRepository.save(student);\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testDeleteAchievement() throws Exception {\n+        instructor.addAchievement(first_achievement);\n         instructor = userRepository.save(instructor);\n+        first_achievement = achievementService.save(first_achievement);\n+        request.delete(\"/api/achievements/\" + first_achievement.getId(), HttpStatus.OK);\n+\n+        assertThat(achievementService.findById(first_achievement.getId())).as(\"Achievement is deleted\").isNotPresent();\n+        assertThat(userRepository.findById(instructor.getId()).isPresent()).as(\"User is not deleted\").isTrue();\n+        assertThat(request.get(\"/api/achievements\", HttpStatus.OK, Set.class).size()).as(\"User has no achievements\").isEqualTo(0);\n+        assertThat(courseService.findOne(first_course.getId())).as(\"Course is not deleted\").isNotNull();\n+        var achievements = request.get(\"/api/courses/\" + first_course.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n+        assertThat(achievements.size()).as(\"Course has only one achievement\").isEqualTo(1);\n+    }\n \n-        var achievementsFirstCourse = request.get(\"/api/courses/\" + firstCourse.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n-        assertThat(achievementsFirstCourse.size()).as(\"Number of achievements for user should be 12 in course \" + firstCourse.getId()).isEqualTo(12);\n-        var achievementsSecondCourse = request.get(\"/api/courses/\" + secondCourse.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n-        assertThat(achievementsSecondCourse.size()).as(\"Number of achievements for user should be 4 in course \" + secondCourse.getId()).isEqualTo(4);\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testBadRequests() throws Exception {\n+        var emptyAchievement = new Achievement();\n+        request.put(\"/api/achievements\", emptyAchievement, HttpStatus.BAD_REQUEST);\n+        request.delete(\"/api/achievements/\" + 999L, HttpStatus.NOT_FOUND);\n+        instructor.setGroups(new HashSet<>());\n+        userRepository.save(instructor);\n+        emptyAchievement.setId(2L);\n+        emptyAchievement.setCourse(first_course);\n+        request.put(\"/api/achievements\", emptyAchievement, HttpStatus.FORBIDDEN);\n+        request.delete(\"/api/achievements/\" + first_achievement.getId(), HttpStatus.FORBIDDEN);\n     }\n+\n }\n", "next_change": {"commit": "116151629d403403ee9b750c30c182f44f70e233", "changed_code": [{"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\nindex 3b8af6aa4c6..de43c5aeb29 100644\n--- a/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\n", "chunk": "@@ -85,101 +82,53 @@ public class AchievementIntegrationTest extends AbstractSpringIntegrationBambooB\n     }\n \n     @Test\n-    public void testManyToManyRelationToUser() {\n-        assertThat(student.getAchievements().size()).as(\"Number of achievements for user should be 0\").isEqualTo(0);\n-\n-        student.addAchievement(first_achievement);\n-        assertThat(student.getAchievements().size()).as(\"Number of achievements for user should be 1\").isEqualTo(1);\n-        assertThat(student.getAchievements().contains(first_achievement)).as(\"User has correct achievement\").isTrue();\n-        assertThat(first_achievement.getUsers().size()).as(\"Number of users for achievement should be 1\").isEqualTo(1);\n-        assertThat(first_achievement.getUsers().contains(student)).as(\"Achievement has correct user\").isTrue();\n-\n-        student.removeAchievement(first_achievement);\n-        assertThat(student.getAchievements().size()).as(\"Number of achievements for user should be 0\").isEqualTo(0);\n-        assertThat(student.getAchievements().contains(first_achievement)).as(\"User does not have removed achievement\").isFalse();\n-        assertThat(first_achievement.getUsers().size()).as(\"Number of users for achievement should be 0\").isEqualTo(0);\n-        assertThat(first_achievement.getUsers().contains(student)).as(\"Achievement does not have incorrect user\").isFalse();\n-    }\n-\n-    @Test\n-    @WithMockUser(value = \"student1\", roles = \"USER\")\n+    @WithMockUser(value = \"student1\", roles = \"ADMIN\")\n     public void testDeleteUser() throws Exception {\n-        student.addAchievement(first_achievement);\n-        student = userRepository.save(student);\n-\n-        var achievements = request.get(\"/api/achievements\", HttpStatus.OK, Set.class);\n-        assertThat(achievements.size()).as(\"Number of achievements for user should be 1\").isEqualTo(1);\n-\n-        userRepository.delete(student);\n-        assertThat(achievementService.findAll().contains(first_achievement)).as(\"Achievement does not get deleted if user does\").isTrue();\n+        initTest();\n+        request.delete(\"/api/users/\" + student.getLogin(), HttpStatus.OK);\n+        var achievementsFirstCourse = request.get(\"/api/courses/\" + firstCourse.getId() + \"/achievements\", HttpStatus.NOT_FOUND, Set.class);\n+        assertThat(achievementsFirstCourse).as(\"Achievements for user should be null in course \" + firstCourse.getId()).isNullOrEmpty();\n+        var achievementsSecondCourse = request.get(\"/api/courses/\" + secondCourse.getId() + \"/achievements\", HttpStatus.NOT_FOUND, Set.class);\n+        assertThat(achievementsSecondCourse).as(\"Achievements for user should be null in course \" + secondCourse.getId()).isNullOrEmpty();\n     }\n \n     @Test\n-    @WithMockUser(value = \"admin\", roles = \"ADMIN\")\n+    @WithMockUser(value = \"student1\", roles = \"ADMIN\")\n     public void testDeleteCourse() throws Exception {\n-        student.addAchievement(first_achievement);\n-        student = userRepository.save(student);\n-\n-        var achievements = request.get(\"/api/courses/\" + first_course.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n-        assertThat(achievements.size()).as(\"Number of achievements for course should be 2\").isEqualTo(2);\n-\n-        request.delete(\"/api/courses/\" + first_course.getId(), HttpStatus.OK);\n-        assertThat(achievementService.findAll().contains(first_achievement)).as(\"Achievement gets deleted if course does\").isFalse();\n+        initTest();\n+        var courseId = firstCourse.getId();\n+        request.delete(\"/api/courses/\" + courseId, HttpStatus.OK);\n+        var achievementsFirstCourse = request.get(\"/api/courses/\" + courseId + \"/achievements\", HttpStatus.OK, Set.class);\n+        assertThat(achievementsFirstCourse.size()).as(\"Achievements in course \" + courseId + \" get deleted if course \" + courseId + \" is deleted\").isEqualTo(0);\n+        var achievementsSecondCourse = request.get(\"/api/courses/\" + secondCourse.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n+        assertThat(achievementsSecondCourse.size()).as(\"Achievements in course \" + secondCourse.getId() + \" do not get deleted if course \" + courseId + \" is deleted\").isEqualTo(4);\n     }\n \n     @Test\n-    @WithMockUser(value = \"admin\", roles = \"ADMIN\")\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n     public void testDeleteExercise() throws Exception {\n-        student.addAchievement(first_achievement);\n-        student = userRepository.save(student);\n-\n-        var achievements = achievementService.findAllByExerciseId(first_exercise.getId());\n-        assertThat(achievements.size()).as(\"Number of achievements for course should be 2\").isEqualTo(2);\n-\n-        exerciseService.delete(first_exercise.getId(), false, false);\n-        assertThat(achievementService.findById(first_achievement.getId())).as(\"Achievement gets deleted if exercise does\").isNotPresent();\n-        assertThat(achievementService.findById(third_achievement.getId())).as(\"Achievement gets deleted if exercise does\").isNotPresent();\n+        initTest();\n+        request.delete(\"/api/modeling-exercises/\" + firstExercise.getId(), HttpStatus.OK);\n+        var achievementsFirstCourse = request.get(\"/api/courses/\" + firstCourse.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n+        assertThat(achievementsFirstCourse.size()).as(\"Number of achievements for user should be 4 in course \" + firstCourse.getId()).isEqualTo(4);\n+        var achievementsSecondCourse = request.get(\"/api/courses/\" + secondCourse.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n+        assertThat(achievementsSecondCourse.size()).as(\"Number of achievements for user should be 4 in course \" + secondCourse.getId()).isEqualTo(4);\n     }\n \n-    @Test\n-    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n-    public void testUpdateAchievement() throws Exception {\n-        instructor.addAchievement(first_achievement);\n-        userRepository.save(instructor);\n-        var achievementToUpdate = achievementService.findById(first_achievement.getId()).get();\n-        achievementToUpdate.setDescription(\"Updated achievement\");\n-        request.put(\"/api/achievements\", achievementToUpdate, HttpStatus.OK);\n-        assertThat(achievementService.findById(first_achievement.getId()).get()).as(\"Achievement is updated correctly\").isEqualTo(achievementToUpdate);\n-    }\n+    private void initTest() throws Exception {\n+        var allAchievements = achievementRepository.findAllByCourseId(firstCourse.getId());\n+        allAchievements.addAll(achievementRepository.findAllByCourseId(secondCourse.getId()));\n \n-    @Test\n-    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n-    public void testDeleteAchievement() throws Exception {\n-        instructor.addAchievement(first_achievement);\n+        for (Achievement achievement : allAchievements) {\n+            student.addAchievement(achievement);\n+            instructor.addAchievement(achievement);\n+        }\n+        student = userRepository.save(student);\n         instructor = userRepository.save(instructor);\n-        first_achievement = achievementService.save(first_achievement);\n-        request.delete(\"/api/achievements/\" + first_achievement.getId(), HttpStatus.OK);\n-\n-        assertThat(achievementService.findById(first_achievement.getId())).as(\"Achievement is deleted\").isNotPresent();\n-        assertThat(userRepository.findById(instructor.getId()).isPresent()).as(\"User is not deleted\").isTrue();\n-        assertThat(request.get(\"/api/achievements\", HttpStatus.OK, Set.class).size()).as(\"User has no achievements\").isEqualTo(0);\n-        assertThat(courseService.findOne(first_course.getId())).as(\"Course is not deleted\").isNotNull();\n-        var achievements = request.get(\"/api/courses/\" + first_course.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n-        assertThat(achievements.size()).as(\"Course has only one achievement\").isEqualTo(1);\n-    }\n \n-    @Test\n-    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n-    public void testBadRequests() throws Exception {\n-        var emptyAchievement = new Achievement();\n-        request.put(\"/api/achievements\", emptyAchievement, HttpStatus.BAD_REQUEST);\n-        request.delete(\"/api/achievements/\" + 999L, HttpStatus.NOT_FOUND);\n-        instructor.setGroups(new HashSet<>());\n-        userRepository.save(instructor);\n-        emptyAchievement.setId(2L);\n-        emptyAchievement.setCourse(first_course);\n-        request.put(\"/api/achievements\", emptyAchievement, HttpStatus.FORBIDDEN);\n-        request.delete(\"/api/achievements/\" + first_achievement.getId(), HttpStatus.FORBIDDEN);\n+        var achievementsFirstCourse = request.get(\"/api/courses/\" + firstCourse.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n+        assertThat(achievementsFirstCourse.size()).as(\"Number of achievements for user should be 12 in course \" + firstCourse.getId()).isEqualTo(12);\n+        var achievementsSecondCourse = request.get(\"/api/courses/\" + secondCourse.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n+        assertThat(achievementsSecondCourse.size()).as(\"Number of achievements for user should be 4 in course \" + secondCourse.getId()).isEqualTo(4);\n     }\n-\n }\n", "next_change": {"commit": "669ba95aca108519bc3499ee88a04461aaa1f1b6", "changed_code": [{"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\nindex de43c5aeb29..35e13a2bea8 100644\n--- a/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\n", "chunk": "@@ -82,53 +69,67 @@ public class AchievementIntegrationTest extends AbstractSpringIntegrationBambooB\n     }\n \n     @Test\n-    @WithMockUser(value = \"student1\", roles = \"ADMIN\")\n-    public void testDeleteUser() throws Exception {\n-        initTest();\n-        request.delete(\"/api/users/\" + student.getLogin(), HttpStatus.OK);\n-        var achievementsFirstCourse = request.get(\"/api/courses/\" + firstCourse.getId() + \"/achievements\", HttpStatus.NOT_FOUND, Set.class);\n-        assertThat(achievementsFirstCourse).as(\"Achievements for user should be null in course \" + firstCourse.getId()).isNullOrEmpty();\n-        var achievementsSecondCourse = request.get(\"/api/courses/\" + secondCourse.getId() + \"/achievements\", HttpStatus.NOT_FOUND, Set.class);\n-        assertThat(achievementsSecondCourse).as(\"Achievements for user should be null in course \" + secondCourse.getId()).isNullOrEmpty();\n+    public void testManyToManyRelationToUser() {\n+        assertThat(user.getAchievements().size()).isEqualTo(0).as(\"Number of achievements for user should be 0\");\n+\n+        user.addAchievement(achievement);\n+        assertThat(user.getAchievements().size()).isEqualTo(1).as(\"Number of achievements for user should be 1\");\n+        assertThat(user.getAchievements().contains(achievement)).isTrue().as(\"User has correct achievement\");\n+        assertThat(achievement.getUsers().size()).isEqualTo(1).as(\"Number of users for achievement should be 1\");\n+        assertThat(achievement.getUsers().contains(user)).isTrue().as(\"Achievement has correct user\");\n+\n+        user.removeAchievement(achievement);\n+        assertThat(user.getAchievements().size()).isEqualTo(0).as(\"Number of achievements for user should be 0\");\n+        assertThat(user.getAchievements().contains(achievement)).isFalse().as(\"User does not have removed achievement\");\n+        assertThat(achievement.getUsers().size()).isEqualTo(0).as(\"Number of users for achievement should be 0\");\n+        assertThat(achievement.getUsers().contains(user)).isFalse().as(\"Achievement does not have incorrect user\");\n     }\n \n     @Test\n-    @WithMockUser(value = \"student1\", roles = \"ADMIN\")\n-    public void testDeleteCourse() throws Exception {\n-        initTest();\n-        var courseId = firstCourse.getId();\n-        request.delete(\"/api/courses/\" + courseId, HttpStatus.OK);\n-        var achievementsFirstCourse = request.get(\"/api/courses/\" + courseId + \"/achievements\", HttpStatus.OK, Set.class);\n-        assertThat(achievementsFirstCourse.size()).as(\"Achievements in course \" + courseId + \" get deleted if course \" + courseId + \" is deleted\").isEqualTo(0);\n-        var achievementsSecondCourse = request.get(\"/api/courses/\" + secondCourse.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n-        assertThat(achievementsSecondCourse.size()).as(\"Achievements in course \" + secondCourse.getId() + \" do not get deleted if course \" + courseId + \" is deleted\").isEqualTo(4);\n+    @WithMockUser(value = \"student1\", roles = \"USER\")\n+    public void testManyToManyRelationToUserRepository() throws Exception {\n+        user.addAchievement(achievement);\n+        user = userRepository.save(user);\n+\n+        var achievements = request.get(\"/api/achievements\", HttpStatus.OK, Set.class);\n+        assertThat(achievements.size()).isEqualTo(1).as(\"Number of achievements for user should be 1\");\n+\n+        userRepository.delete(user);\n+        assertThat(achievementRepository.findAll().contains(achievement)).isTrue().as(\"Achievement does not get deleted if user does\");\n     }\n \n     @Test\n-    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n-    public void testDeleteExercise() throws Exception {\n-        initTest();\n-        request.delete(\"/api/modeling-exercises/\" + firstExercise.getId(), HttpStatus.OK);\n-        var achievementsFirstCourse = request.get(\"/api/courses/\" + firstCourse.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n-        assertThat(achievementsFirstCourse.size()).as(\"Number of achievements for user should be 4 in course \" + firstCourse.getId()).isEqualTo(4);\n-        var achievementsSecondCourse = request.get(\"/api/courses/\" + secondCourse.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n-        assertThat(achievementsSecondCourse.size()).as(\"Number of achievements for user should be 4 in course \" + secondCourse.getId()).isEqualTo(4);\n+    @WithMockUser(value = \"student1\", roles = \"USER\")\n+    public void testManyToOneRelationToCourseRepository() throws Exception {\n+        var achievements = request.get(\"/api/courses/\" + course.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n+        assertThat(achievements.size()).isEqualTo(1).as(\"Number of achievements for course should be 1\");\n+\n+        courseRepository.delete(course);\n+        assertThat(achievementRepository.findAll().contains(achievement)).isFalse().as(\"Achievement gets deleted if course does\");\n     }\n \n-    private void initTest() throws Exception {\n-        var allAchievements = achievementRepository.findAllByCourseId(firstCourse.getId());\n-        allAchievements.addAll(achievementRepository.findAllByCourseId(secondCourse.getId()));\n-\n-        for (Achievement achievement : allAchievements) {\n-            student.addAchievement(achievement);\n-            instructor.addAchievement(achievement);\n-        }\n-        student = userRepository.save(student);\n-        instructor = userRepository.save(instructor);\n-\n-        var achievementsFirstCourse = request.get(\"/api/courses/\" + firstCourse.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n-        assertThat(achievementsFirstCourse.size()).as(\"Number of achievements for user should be 12 in course \" + firstCourse.getId()).isEqualTo(12);\n-        var achievementsSecondCourse = request.get(\"/api/courses/\" + secondCourse.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n-        assertThat(achievementsSecondCourse.size()).as(\"Number of achievements for user should be 4 in course \" + secondCourse.getId()).isEqualTo(4);\n+    @Test\n+    public void testUpdateAchievement() throws Exception {\n+        user.addAchievement(achievement);\n+        userRepository.save(user);\n+        var achievementToUpdate = achievementRepository.findById(achievement.getId()).get();\n+        achievementToUpdate.setDescription(\"Updated achievement\");\n+        request.put(\"/api/achievements\", achievementToUpdate, HttpStatus.OK);\n+        assertThat(achievementRepository.findById(achievement.getId()).get()).isEqualTo(achievementToUpdate).as(\"Achievement is updated correctly\");\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"USER\")\n+    public void testDeleteAchievement() throws Exception {\n+        user.addAchievement(achievement);\n+        user = userRepository.save(user);\n+        achievement = achievementRepository.save(achievement);\n+        request.delete(\"/achievements/{achievementId}\", HttpStatus.OK);\n+\n+        assertThat(achievementRepository.findAll().size()).isEqualTo(0).as(\"Achievement is deleted\");\n+        assertThat(userRepository.findById(user.getId()).isPresent()).isTrue().as(\"User is not deleted\");\n+        assertThat(userRepository.findById(user.getId()).get().getAchievements().size()).isEqualTo(0).as(\"User has no achievements\");\n+        assertThat(courseRepository.findById(course.getId()).isPresent()).isTrue().as(\"Course is not deleted\");\n+        assertThat(achievementService.findAllForCourse(course.getId()).size()).isEqualTo(0).as(\"Course has no achievements\");\n     }\n }\n", "next_change": {"commit": "d79fe9f4e5d9b3656047b7dc9c1cc7c52379f9d2", "changed_code": [{"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\nindex 35e13a2bea8..97851ed945c 100644\n--- a/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\n", "chunk": "@@ -130,6 +130,6 @@ public class AchievementIntegrationTest extends AbstractSpringIntegrationBambooB\n         assertThat(userRepository.findById(user.getId()).isPresent()).isTrue().as(\"User is not deleted\");\n         assertThat(userRepository.findById(user.getId()).get().getAchievements().size()).isEqualTo(0).as(\"User has no achievements\");\n         assertThat(courseRepository.findById(course.getId()).isPresent()).isTrue().as(\"Course is not deleted\");\n-        assertThat(achievementService.findAllForCourse(course.getId()).size()).isEqualTo(0).as(\"Course has no achievements\");\n+        assertThat(achievementService.findAllForCourse(course.getId(), user.getId()).size()).isEqualTo(0).as(\"Course has no achievements\");\n     }\n }\n", "next_change": {"commit": "84ce3abcc1059d698df86587b1e2a400cbc7b05c", "changed_code": [{"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\nindex 97851ed945c..30c5f6ff18a 100644\n--- a/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\n", "chunk": "@@ -119,17 +124,17 @@ public class AchievementIntegrationTest extends AbstractSpringIntegrationBambooB\n     }\n \n     @Test\n-    @WithMockUser(value = \"student1\", roles = \"USER\")\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n     public void testDeleteAchievement() throws Exception {\n-        user.addAchievement(achievement);\n-        user = userRepository.save(user);\n+        instructor.addAchievement(achievement);\n+        instructor = userRepository.save(instructor);\n         achievement = achievementRepository.save(achievement);\n-        request.delete(\"/achievements/{achievementId}\", HttpStatus.OK);\n+        request.delete(\"/api/achievements/\" + achievement.getId(), HttpStatus.OK);\n \n         assertThat(achievementRepository.findAll().size()).isEqualTo(0).as(\"Achievement is deleted\");\n-        assertThat(userRepository.findById(user.getId()).isPresent()).isTrue().as(\"User is not deleted\");\n-        assertThat(userRepository.findById(user.getId()).get().getAchievements().size()).isEqualTo(0).as(\"User has no achievements\");\n+        assertThat(userRepository.findById(instructor.getId()).isPresent()).isTrue().as(\"User is not deleted\");\n+        assertThat(userRepository.findById(instructor.getId()).get().getAchievements().size()).isEqualTo(0).as(\"User has no achievements\");\n         assertThat(courseRepository.findById(course.getId()).isPresent()).isTrue().as(\"Course is not deleted\");\n-        assertThat(achievementService.findAllForCourse(course.getId(), user.getId()).size()).isEqualTo(0).as(\"Course has no achievements\");\n+        assertThat(achievementService.findAllForCourse(course.getId(), instructor.getId()).size()).isEqualTo(0).as(\"Course has no achievements\");\n     }\n }\n", "next_change": {"commit": "497e3316832c66677399172c3bc6bd223073c1b2", "changed_code": [{"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\nindex 30c5f6ff18a..e366ec2ad68 100644\n--- a/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\n", "chunk": "@@ -131,10 +134,11 @@ public class AchievementIntegrationTest extends AbstractSpringIntegrationBambooB\n         achievement = achievementRepository.save(achievement);\n         request.delete(\"/api/achievements/\" + achievement.getId(), HttpStatus.OK);\n \n-        assertThat(achievementRepository.findAll().size()).isEqualTo(0).as(\"Achievement is deleted\");\n-        assertThat(userRepository.findById(instructor.getId()).isPresent()).isTrue().as(\"User is not deleted\");\n-        assertThat(userRepository.findById(instructor.getId()).get().getAchievements().size()).isEqualTo(0).as(\"User has no achievements\");\n-        assertThat(courseRepository.findById(course.getId()).isPresent()).isTrue().as(\"Course is not deleted\");\n-        assertThat(achievementService.findAllForCourse(course.getId(), instructor.getId()).size()).isEqualTo(0).as(\"Course has no achievements\");\n+        assertThat(achievementRepository.findAll().size()).as(\"Achievement is deleted\").isEqualTo(0);\n+        assertThat(userRepository.findById(instructor.getId()).isPresent()).as(\"User is not deleted\").isTrue();\n+        assertThat(userRepository.findById(instructor.getId()).get().getAchievements().size()).as(\"User has no achievements\").isEqualTo(0);\n+        assertThat(courseRepository.findById(course.getId()).isPresent()).as(\"Course is not deleted\").isTrue();\n+        var achievements = request.get(\"/api/courses/\" + course.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n+        assertThat(achievements.size()).as(\"Course has no achievements\").isEqualTo(0);\n     }\n }\n", "next_change": {"commit": "0616ac4ef001698a1e962c595c2ceecc0eb76dd0", "changed_code": [{"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\nindex e366ec2ad68..b7110ec71c1 100644\n--- a/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\n", "chunk": "@@ -141,4 +141,19 @@ public class AchievementIntegrationTest extends AbstractSpringIntegrationBambooB\n         var achievements = request.get(\"/api/courses/\" + course.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n         assertThat(achievements.size()).as(\"Course has no achievements\").isEqualTo(0);\n     }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testBadRequests() throws Exception {\n+        var emptyAchievement = new Achievement();\n+        request.put(\"/api/achievements\", emptyAchievement, HttpStatus.BAD_REQUEST);\n+        request.delete(\"/api/achievements/17\", HttpStatus.NOT_FOUND);\n+        instructor.setGroups(new HashSet<>());\n+        userRepository.save(instructor);\n+        emptyAchievement.setId(2L);\n+        emptyAchievement.setCourse(course);\n+        request.put(\"/api/achievements\", emptyAchievement, HttpStatus.FORBIDDEN);\n+        request.delete(\"/api/achievements/1\", HttpStatus.FORBIDDEN);\n+    }\n+\n }\n", "next_change": {"commit": "45dac20bf2cd9e41c1e6ff21336a2849962b462e", "changed_code": [{"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\nindex b7110ec71c1..b3dfc571e48 100644\n--- a/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\n", "chunk": "@@ -153,7 +153,7 @@ public class AchievementIntegrationTest extends AbstractSpringIntegrationBambooB\n         emptyAchievement.setId(2L);\n         emptyAchievement.setCourse(course);\n         request.put(\"/api/achievements\", emptyAchievement, HttpStatus.FORBIDDEN);\n-        request.delete(\"/api/achievements/1\", HttpStatus.FORBIDDEN);\n+        request.delete(\"/api/achievements/\" + achievement.getId(), HttpStatus.FORBIDDEN);\n     }\n \n }\n", "next_change": {"commit": "fd13e3d27e731c1b8d1a2dea0e1c43ae2468034b", "changed_code": [{"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\nindex b3dfc571e48..57b7dc2f9ee 100644\n--- a/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\n", "chunk": "@@ -147,13 +175,13 @@ public class AchievementIntegrationTest extends AbstractSpringIntegrationBambooB\n     public void testBadRequests() throws Exception {\n         var emptyAchievement = new Achievement();\n         request.put(\"/api/achievements\", emptyAchievement, HttpStatus.BAD_REQUEST);\n-        request.delete(\"/api/achievements/17\", HttpStatus.NOT_FOUND);\n+        request.delete(\"/api/achievements/\" + 999L, HttpStatus.NOT_FOUND);\n         instructor.setGroups(new HashSet<>());\n         userRepository.save(instructor);\n         emptyAchievement.setId(2L);\n-        emptyAchievement.setCourse(course);\n+        emptyAchievement.setCourse(first_course);\n         request.put(\"/api/achievements\", emptyAchievement, HttpStatus.FORBIDDEN);\n-        request.delete(\"/api/achievements/\" + achievement.getId(), HttpStatus.FORBIDDEN);\n+        request.delete(\"/api/achievements/\" + first_achievement.getId(), HttpStatus.FORBIDDEN);\n     }\n \n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}, {"oid": "669ba95aca108519bc3499ee88a04461aaa1f1b6", "url": "https://github.com/ls1intum/Artemis/commit/669ba95aca108519bc3499ee88a04461aaa1f1b6", "message": "integrate feedback", "committedDate": "2020-08-30T11:45:23Z", "type": "commit"}, {"oid": "3233af82374e6b412cee00ab670bf23f05769c11", "url": "https://github.com/ls1intum/Artemis/commit/3233af82374e6b412cee00ab670bf23f05769c11", "message": "Merge branch 'feature/achievements/storage' of https://github.com/ls1intum/Artemis into feature/achievements/storage", "committedDate": "2020-08-30T11:46:11Z", "type": "commit"}, {"oid": "9df40089b21ad7551313f5b19e32f3fd5e632a4f", "url": "https://github.com/ls1intum/Artemis/commit/9df40089b21ad7551313f5b19e32f3fd5e632a4f", "message": "Merge branch 'develop' into feature/achievements/storage", "committedDate": "2020-08-30T11:47:17Z", "type": "commit"}, {"oid": "d79fe9f4e5d9b3656047b7dc9c1cc7c52379f9d2", "url": "https://github.com/ls1intum/Artemis/commit/d79fe9f4e5d9b3656047b7dc9c1cc7c52379f9d2", "message": "fix missing parameter", "committedDate": "2020-08-30T13:25:01Z", "type": "commit"}, {"oid": "84ce3abcc1059d698df86587b1e2a400cbc7b05c", "url": "https://github.com/ls1intum/Artemis/commit/84ce3abcc1059d698df86587b1e2a400cbc7b05c", "message": "fix URI and roles", "committedDate": "2020-08-30T13:53:02Z", "type": "commit"}, {"oid": "ec718eb715f9773b914d77078e2cf8ec6e0c61b1", "url": "https://github.com/ls1intum/Artemis/commit/ec718eb715f9773b914d77078e2cf8ec6e0c61b1", "message": "fix java codestyle", "committedDate": "2020-08-30T14:02:41Z", "type": "commit"}, {"oid": "497e3316832c66677399172c3bc6bd223073c1b2", "url": "https://github.com/ls1intum/Artemis/commit/497e3316832c66677399172c3bc6bd223073c1b2", "message": "fix failing tests", "committedDate": "2020-08-30T17:00:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgxMTE0MQ==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r479811141", "body": "The variable name `result` is here a bit misleading (as we have a Result class). I would use `response`, `achievementResponse` or just `achievement`", "bodyText": "The variable name result is here a bit misleading (as we have a Result class). I would use response, achievementResponse or just achievement", "bodyHTML": "<p dir=\"auto\">The variable name <code>result</code> is here a bit misleading (as we have a Result class). I would use <code>response</code>, <code>achievementResponse</code> or just <code>achievement</code></p>", "author": "fde312", "createdAt": "2020-08-30T20:16:30Z", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java", "diffHunk": "@@ -47,4 +65,52 @@ public AchievementResource(AchievementService achievementService, UserService us\n         return ResponseEntity.ok(achievements);\n     }\n \n+    /**\n+     * PUT /achievements : Updates an existing achievement.\n+     *\n+     * @param achievement the achievement to update\n+     * @return the ResponseEntity with status 200 (OK) and with body the updated achievement, or with status 500\n+     *         (Internal Server Error) if the achievement couldn't be updated\n+     * @throws URISyntaxException if the Location URI syntax is incorrect\n+     */\n+    @PutMapping(\"/achievements\")\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Achievement> updateAchievement(@RequestBody Achievement achievement) throws URISyntaxException {\n+        log.debug(\"REST request to update Achievement : {}\", achievement);\n+\n+        Course course = achievement.getCourse();\n+        User user = userService.getUserWithGroupsAndAuthorities();\n+        if (!authCheckService.isAtLeastInstructorInCourse(course, user)) {\n+            throw new AccessForbiddenException(\"You are not allowed to access this resource\");\n+        }\n+\n+        if (achievement.getId() == null) {\n+            return ResponseEntity.badRequest().build();\n+        }\n+\n+        Achievement result = achievementRepository.save(achievement);", "originalCommit": "669ba95aca108519bc3499ee88a04461aaa1f1b6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgxMjgxNA==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r479812814", "bodyText": "yeah, makes sense \ud83d\ude04", "author": "balazs-czopf", "createdAt": "2020-08-30T20:35:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgxMTE0MQ=="}], "type": "inlineReview", "revised_code": {"commit": "6aa68b0ab7a071fa631c7c72cdb8ea02ccf15a39", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\nindex 484ef8ef0f3..9a9cebd81ef 100644\n--- a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n+++ b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n", "chunk": "@@ -71,25 +79,24 @@ public class AchievementResource {\n      * @param achievement the achievement to update\n      * @return the ResponseEntity with status 200 (OK) and with body the updated achievement, or with status 500\n      *         (Internal Server Error) if the achievement couldn't be updated\n-     * @throws URISyntaxException if the Location URI syntax is incorrect\n      */\n     @PutMapping(\"/achievements\")\n     @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n-    public ResponseEntity<Achievement> updateAchievement(@RequestBody Achievement achievement) throws URISyntaxException {\n+    public ResponseEntity<Achievement> updateAchievement(@RequestBody Achievement achievement) {\n         log.debug(\"REST request to update Achievement : {}\", achievement);\n \n+        if (achievement.getId() == null) {\n+            return ResponseEntity.badRequest().build();\n+        }\n+\n         Course course = achievement.getCourse();\n         User user = userService.getUserWithGroupsAndAuthorities();\n         if (!authCheckService.isAtLeastInstructorInCourse(course, user)) {\n             throw new AccessForbiddenException(\"You are not allowed to access this resource\");\n         }\n \n-        if (achievement.getId() == null) {\n-            return ResponseEntity.badRequest().build();\n-        }\n-\n-        Achievement result = achievementRepository.save(achievement);\n-        return ResponseEntity.ok().headers(HeaderUtil.createEntityUpdateAlert(applicationName, true, ENTITY_NAME, result.getId().toString())).body(result);\n+        Achievement savedAchievement = achievementService.save(achievement);\n+        return ResponseEntity.ok().headers(HeaderUtil.createEntityUpdateAlert(applicationName, true, ENTITY_NAME, savedAchievement.getId().toString())).body(savedAchievement);\n     }\n \n     /**\n", "next_change": {"commit": "c0a4b8df894787c7f22b172ecf3a3a9ce1ff398d", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\nindex 9a9cebd81ef..9b2067369c7 100644\n--- a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n+++ b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n", "chunk": "@@ -95,7 +100,7 @@ public class AchievementResource {\n             throw new AccessForbiddenException(\"You are not allowed to access this resource\");\n         }\n \n-        Achievement savedAchievement = achievementService.save(achievement);\n+        Achievement savedAchievement = achievementRepository.save(achievement);\n         return ResponseEntity.ok().headers(HeaderUtil.createEntityUpdateAlert(applicationName, true, ENTITY_NAME, savedAchievement.getId().toString())).body(savedAchievement);\n     }\n \n", "next_change": {"commit": "0e82242b97cdbc112e1d3a883cb2281d462dd405", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\nindex 9b2067369c7..9a9cebd81ef 100644\n--- a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n+++ b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n", "chunk": "@@ -100,7 +95,7 @@ public class AchievementResource {\n             throw new AccessForbiddenException(\"You are not allowed to access this resource\");\n         }\n \n-        Achievement savedAchievement = achievementRepository.save(achievement);\n+        Achievement savedAchievement = achievementService.save(achievement);\n         return ResponseEntity.ok().headers(HeaderUtil.createEntityUpdateAlert(applicationName, true, ENTITY_NAME, savedAchievement.getId().toString())).body(savedAchievement);\n     }\n \n", "next_change": {"commit": "c7425c9af8e7e15cd22a3771029b103c6d79608f", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\nindex 9a9cebd81ef..9b2067369c7 100644\n--- a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n+++ b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n", "chunk": "@@ -95,7 +100,7 @@ public class AchievementResource {\n             throw new AccessForbiddenException(\"You are not allowed to access this resource\");\n         }\n \n-        Achievement savedAchievement = achievementService.save(achievement);\n+        Achievement savedAchievement = achievementRepository.save(achievement);\n         return ResponseEntity.ok().headers(HeaderUtil.createEntityUpdateAlert(applicationName, true, ENTITY_NAME, savedAchievement.getId().toString())).body(savedAchievement);\n     }\n \n", "next_change": {"commit": "28ed83395042c9e9faddf43940bd9f3c221684b3", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\nindex 9b2067369c7..9a9cebd81ef 100644\n--- a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n+++ b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n", "chunk": "@@ -100,7 +95,7 @@ public class AchievementResource {\n             throw new AccessForbiddenException(\"You are not allowed to access this resource\");\n         }\n \n-        Achievement savedAchievement = achievementRepository.save(achievement);\n+        Achievement savedAchievement = achievementService.save(achievement);\n         return ResponseEntity.ok().headers(HeaderUtil.createEntityUpdateAlert(applicationName, true, ENTITY_NAME, savedAchievement.getId().toString())).body(savedAchievement);\n     }\n \n", "next_change": {"commit": "c3317e06a092c8dbee21b52de380addd92f73b3f", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\nindex 9a9cebd81ef..6234a06e7a2 100644\n--- a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n+++ b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n", "chunk": "@@ -95,7 +102,7 @@ public class AchievementResource {\n             throw new AccessForbiddenException(\"You are not allowed to access this resource\");\n         }\n \n-        Achievement savedAchievement = achievementService.save(achievement);\n+        Achievement savedAchievement = achievementRepository.save(achievement);\n         return ResponseEntity.ok().headers(HeaderUtil.createEntityUpdateAlert(applicationName, true, ENTITY_NAME, savedAchievement.getId().toString())).body(savedAchievement);\n     }\n \n", "next_change": {"commit": "508e8977abe4d1e8ec1c8a817fe9bd0f91f6bb8a", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\nindex 6234a06e7a2..9a9cebd81ef 100644\n--- a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n+++ b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n", "chunk": "@@ -102,7 +95,7 @@ public class AchievementResource {\n             throw new AccessForbiddenException(\"You are not allowed to access this resource\");\n         }\n \n-        Achievement savedAchievement = achievementRepository.save(achievement);\n+        Achievement savedAchievement = achievementService.save(achievement);\n         return ResponseEntity.ok().headers(HeaderUtil.createEntityUpdateAlert(applicationName, true, ENTITY_NAME, savedAchievement.getId().toString())).body(savedAchievement);\n     }\n \n", "next_change": {"commit": "d3d2ea3ec69fdc3185bac66822f03c4a1bf0b6b1", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\nindex 9a9cebd81ef..6234a06e7a2 100644\n--- a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n+++ b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n", "chunk": "@@ -95,7 +102,7 @@ public class AchievementResource {\n             throw new AccessForbiddenException(\"You are not allowed to access this resource\");\n         }\n \n-        Achievement savedAchievement = achievementService.save(achievement);\n+        Achievement savedAchievement = achievementRepository.save(achievement);\n         return ResponseEntity.ok().headers(HeaderUtil.createEntityUpdateAlert(applicationName, true, ENTITY_NAME, savedAchievement.getId().toString())).body(savedAchievement);\n     }\n \n", "next_change": {"commit": "64778c859b7f2d14015c50aedae62db4c98bcee7", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\nindex 6234a06e7a2..9a9cebd81ef 100644\n--- a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n+++ b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n", "chunk": "@@ -102,7 +95,7 @@ public class AchievementResource {\n             throw new AccessForbiddenException(\"You are not allowed to access this resource\");\n         }\n \n-        Achievement savedAchievement = achievementRepository.save(achievement);\n+        Achievement savedAchievement = achievementService.save(achievement);\n         return ResponseEntity.ok().headers(HeaderUtil.createEntityUpdateAlert(applicationName, true, ENTITY_NAME, savedAchievement.getId().toString())).body(savedAchievement);\n     }\n \n", "next_change": {"commit": "8d5bfc049d9e75323290b069e7343df6fc579ee7", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\nindex 9a9cebd81ef..19fd5df9305 100644\n--- a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n+++ b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n", "chunk": "@@ -67,62 +43,11 @@ public class AchievementResource {\n      */\n     @GetMapping(\"/courses/{courseId}/achievements\")\n     @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n-    public ResponseEntity<Set<Achievement>> getAchievementsForCourse(@PathVariable Long courseId) {\n-        log.debug(\"REST request to get achievements for course : {}\", courseId);\n-        Set<Achievement> achievements = achievementService.findAllByCourseId(courseId);\n-        return ResponseEntity.ok(achievements);\n-    }\n-\n-    /**\n-     * PUT /achievements : Updates an existing achievement.\n-     *\n-     * @param achievement the achievement to update\n-     * @return the ResponseEntity with status 200 (OK) and with body the updated achievement, or with status 500\n-     *         (Internal Server Error) if the achievement couldn't be updated\n-     */\n-    @PutMapping(\"/achievements\")\n-    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n-    public ResponseEntity<Achievement> updateAchievement(@RequestBody Achievement achievement) {\n-        log.debug(\"REST request to update Achievement : {}\", achievement);\n-\n-        if (achievement.getId() == null) {\n-            return ResponseEntity.badRequest().build();\n-        }\n-\n-        Course course = achievement.getCourse();\n+    public ResponseEntity<Set<Achievement>> getAchievementsForUserInCourse(@PathVariable Long courseId) {\n         User user = userService.getUserWithGroupsAndAuthorities();\n-        if (!authCheckService.isAtLeastInstructorInCourse(course, user)) {\n-            throw new AccessForbiddenException(\"You are not allowed to access this resource\");\n-        }\n-\n-        Achievement savedAchievement = achievementService.save(achievement);\n-        return ResponseEntity.ok().headers(HeaderUtil.createEntityUpdateAlert(applicationName, true, ENTITY_NAME, savedAchievement.getId().toString())).body(savedAchievement);\n-    }\n-\n-    /**\n-     * DELETE /achievements/:achievementId : delete the \"id\" achievement.\n-     *\n-     * @param achievementId the id of the achievement to delete\n-     * @return the ResponseEntity with status 200 (OK)\n-     */\n-    @DeleteMapping(\"/achievements/{achievementId}\")\n-    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n-    public ResponseEntity<Void> deleteAchievement(@PathVariable long achievementId) {\n-        log.info(\"REST request to delete Achievement : {}\", achievementId);\n-        User user = userService.getUserWithGroupsAndAuthorities();\n-        Optional<Achievement> optionalAchievement = achievementService.findById(achievementId);\n-        if (optionalAchievement.isEmpty()) {\n-            return ResponseEntity.notFound().build();\n-        }\n-        Achievement achievement = optionalAchievement.get();\n-        Course course = achievement.getCourse();\n-        if (!authCheckService.isAtLeastInstructorInCourse(course, user)) {\n-            throw new AccessForbiddenException(\"You are not allowed to access this resource\");\n-        }\n-\n-        log.info(\"User \" + user.getLogin() + \" has requested to delete the achievement {}\", achievement.getId());\n-        achievementService.delete(achievement);\n-        return ResponseEntity.ok().headers(HeaderUtil.createEntityDeletionAlert(applicationName, true, ENTITY_NAME, achievement.getId().toString())).build();\n+        log.debug(\"REST request to get achievements for user : {} in course : {}\", user.getLogin(), courseId);\n+        Set<Achievement> achievements = achievementRepository.findAllByUserIdAndCourseId(user.getId(), courseId);\n+        achievementService.prepareForClient(achievements);\n+        return ResponseEntity.ok(achievements);\n     }\n-\n }\n", "next_change": {"commit": "7a5de1a37353eb19f93ef49666bba352198834cb", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\nindex 19fd5df9305..9a9cebd81ef 100644\n--- a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n+++ b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n", "chunk": "@@ -43,11 +67,62 @@ public class AchievementResource {\n      */\n     @GetMapping(\"/courses/{courseId}/achievements\")\n     @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n-    public ResponseEntity<Set<Achievement>> getAchievementsForUserInCourse(@PathVariable Long courseId) {\n-        User user = userService.getUserWithGroupsAndAuthorities();\n-        log.debug(\"REST request to get achievements for user : {} in course : {}\", user.getLogin(), courseId);\n-        Set<Achievement> achievements = achievementRepository.findAllByUserIdAndCourseId(user.getId(), courseId);\n-        achievementService.prepareForClient(achievements);\n+    public ResponseEntity<Set<Achievement>> getAchievementsForCourse(@PathVariable Long courseId) {\n+        log.debug(\"REST request to get achievements for course : {}\", courseId);\n+        Set<Achievement> achievements = achievementService.findAllByCourseId(courseId);\n         return ResponseEntity.ok(achievements);\n     }\n+\n+    /**\n+     * PUT /achievements : Updates an existing achievement.\n+     *\n+     * @param achievement the achievement to update\n+     * @return the ResponseEntity with status 200 (OK) and with body the updated achievement, or with status 500\n+     *         (Internal Server Error) if the achievement couldn't be updated\n+     */\n+    @PutMapping(\"/achievements\")\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Achievement> updateAchievement(@RequestBody Achievement achievement) {\n+        log.debug(\"REST request to update Achievement : {}\", achievement);\n+\n+        if (achievement.getId() == null) {\n+            return ResponseEntity.badRequest().build();\n+        }\n+\n+        Course course = achievement.getCourse();\n+        User user = userService.getUserWithGroupsAndAuthorities();\n+        if (!authCheckService.isAtLeastInstructorInCourse(course, user)) {\n+            throw new AccessForbiddenException(\"You are not allowed to access this resource\");\n+        }\n+\n+        Achievement savedAchievement = achievementService.save(achievement);\n+        return ResponseEntity.ok().headers(HeaderUtil.createEntityUpdateAlert(applicationName, true, ENTITY_NAME, savedAchievement.getId().toString())).body(savedAchievement);\n+    }\n+\n+    /**\n+     * DELETE /achievements/:achievementId : delete the \"id\" achievement.\n+     *\n+     * @param achievementId the id of the achievement to delete\n+     * @return the ResponseEntity with status 200 (OK)\n+     */\n+    @DeleteMapping(\"/achievements/{achievementId}\")\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Void> deleteAchievement(@PathVariable long achievementId) {\n+        log.info(\"REST request to delete Achievement : {}\", achievementId);\n+        User user = userService.getUserWithGroupsAndAuthorities();\n+        Optional<Achievement> optionalAchievement = achievementService.findById(achievementId);\n+        if (optionalAchievement.isEmpty()) {\n+            return ResponseEntity.notFound().build();\n+        }\n+        Achievement achievement = optionalAchievement.get();\n+        Course course = achievement.getCourse();\n+        if (!authCheckService.isAtLeastInstructorInCourse(course, user)) {\n+            throw new AccessForbiddenException(\"You are not allowed to access this resource\");\n+        }\n+\n+        log.info(\"User \" + user.getLogin() + \" has requested to delete the achievement {}\", achievement.getId());\n+        achievementService.delete(achievement);\n+        return ResponseEntity.ok().headers(HeaderUtil.createEntityDeletionAlert(applicationName, true, ENTITY_NAME, achievement.getId().toString())).build();\n+    }\n+\n }\n", "next_change": {"commit": "116151629d403403ee9b750c30c182f44f70e233", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\nindex 9a9cebd81ef..2367bc01f2b 100644\n--- a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n+++ b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n", "chunk": "@@ -26,103 +21,33 @@ import de.tum.in.www1.artemis.web.rest.util.HeaderUtil;\n @RequestMapping(\"/api\")\n public class AchievementResource {\n \n-    private static final String ENTITY_NAME = \"achievement\";\n-\n-    @Value(\"${jhipster.clientApp.name}\")\n-    private String applicationName;\n-\n     private final Logger log = LoggerFactory.getLogger(AchievementResource.class);\n \n-    private final AuthorizationCheckService authCheckService;\n-\n     private final AchievementService achievementService;\n \n+    private final AchievementRepository achievementRepository;\n+\n     private final UserService userService;\n \n-    public AchievementResource(AuthorizationCheckService authCheckService, AchievementService achievementService, UserService userService) {\n-        this.authCheckService = authCheckService;\n+    public AchievementResource(AchievementService achievementService, AchievementRepository achievementRepository, UserService userService) {\n         this.achievementService = achievementService;\n+        this.achievementRepository = achievementRepository;\n         this.userService = userService;\n     }\n \n     /**\n-     * GET /achievements : Get all achievements for user.\n+     * GET /courses/{courseId}/achievements : Get all achievements for requesting user in given course.\n      *\n-     * @return the ResponseEntity with status 200 (OK) and with the found achievements as body\n-     */\n-    @GetMapping(\"/achievements\")\n-    @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n-    public ResponseEntity<Set<Achievement>> getAchievementsForUser() {\n-        User user = userService.getUser();\n-        log.debug(\"REST request to get achievements for user : {}\", user.getLogin());\n-        Set<Achievement> achievements = achievementService.findAllByUserId(user.getId());\n-        return ResponseEntity.ok(achievements);\n-    }\n-\n-    /**\n-     * GET /courses/{courseId}/achievements : Get all achievements for course.\n-     *\n-     * @param courseId the course to which the achievements belong to\n+     * @param courseId\n      * @return the ResponseEntity with status 200 (OK) and with the found achievements as body\n      */\n     @GetMapping(\"/courses/{courseId}/achievements\")\n     @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n-    public ResponseEntity<Set<Achievement>> getAchievementsForCourse(@PathVariable Long courseId) {\n-        log.debug(\"REST request to get achievements for course : {}\", courseId);\n-        Set<Achievement> achievements = achievementService.findAllByCourseId(courseId);\n-        return ResponseEntity.ok(achievements);\n-    }\n-\n-    /**\n-     * PUT /achievements : Updates an existing achievement.\n-     *\n-     * @param achievement the achievement to update\n-     * @return the ResponseEntity with status 200 (OK) and with body the updated achievement, or with status 500\n-     *         (Internal Server Error) if the achievement couldn't be updated\n-     */\n-    @PutMapping(\"/achievements\")\n-    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n-    public ResponseEntity<Achievement> updateAchievement(@RequestBody Achievement achievement) {\n-        log.debug(\"REST request to update Achievement : {}\", achievement);\n-\n-        if (achievement.getId() == null) {\n-            return ResponseEntity.badRequest().build();\n-        }\n-\n-        Course course = achievement.getCourse();\n+    public ResponseEntity<Set<Achievement>> getAchievementsForUserInCourse(@PathVariable Long courseId) {\n         User user = userService.getUserWithGroupsAndAuthorities();\n-        if (!authCheckService.isAtLeastInstructorInCourse(course, user)) {\n-            throw new AccessForbiddenException(\"You are not allowed to access this resource\");\n-        }\n-\n-        Achievement savedAchievement = achievementService.save(achievement);\n-        return ResponseEntity.ok().headers(HeaderUtil.createEntityUpdateAlert(applicationName, true, ENTITY_NAME, savedAchievement.getId().toString())).body(savedAchievement);\n-    }\n-\n-    /**\n-     * DELETE /achievements/:achievementId : delete the \"id\" achievement.\n-     *\n-     * @param achievementId the id of the achievement to delete\n-     * @return the ResponseEntity with status 200 (OK)\n-     */\n-    @DeleteMapping(\"/achievements/{achievementId}\")\n-    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n-    public ResponseEntity<Void> deleteAchievement(@PathVariable long achievementId) {\n-        log.info(\"REST request to delete Achievement : {}\", achievementId);\n-        User user = userService.getUserWithGroupsAndAuthorities();\n-        Optional<Achievement> optionalAchievement = achievementService.findById(achievementId);\n-        if (optionalAchievement.isEmpty()) {\n-            return ResponseEntity.notFound().build();\n-        }\n-        Achievement achievement = optionalAchievement.get();\n-        Course course = achievement.getCourse();\n-        if (!authCheckService.isAtLeastInstructorInCourse(course, user)) {\n-            throw new AccessForbiddenException(\"You are not allowed to access this resource\");\n-        }\n-\n-        log.info(\"User \" + user.getLogin() + \" has requested to delete the achievement {}\", achievement.getId());\n-        achievementService.delete(achievement);\n-        return ResponseEntity.ok().headers(HeaderUtil.createEntityDeletionAlert(applicationName, true, ENTITY_NAME, achievement.getId().toString())).build();\n+        log.debug(\"REST request to get achievements for user : {} in course : {}\", user.getLogin(), courseId);\n+        Set<Achievement> achievements = achievementRepository.findAllByUserIdAndCourseId(user.getId(), courseId);\n+        achievementService.prepareForClient(achievements);\n+        return ResponseEntity.ok(achievements);\n     }\n-\n }\n", "next_change": {"commit": "53c319a21a4053a341e9b24da4987de5abfb656d", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\nindex 2367bc01f2b..7789b9e0412 100644\n--- a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n+++ b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n", "chunk": "@@ -46,7 +42,7 @@ public class AchievementResource {\n     public ResponseEntity<Set<Achievement>> getAchievementsForUserInCourse(@PathVariable Long courseId) {\n         User user = userService.getUserWithGroupsAndAuthorities();\n         log.debug(\"REST request to get achievements for user : {} in course : {}\", user.getLogin(), courseId);\n-        Set<Achievement> achievements = achievementRepository.findAllByUserIdAndCourseId(user.getId(), courseId);\n+        Set<Achievement> achievements = achievementService.findAllByUserIdAndCourseId(user.getId(), courseId);\n         achievementService.prepareForClient(achievements);\n         return ResponseEntity.ok(achievements);\n     }\n", "next_change": {"commit": "07837b56882d0df7027dd1422c761e34f89147f1", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\nindex 7789b9e0412..af578634853 100644\n--- a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n+++ b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n", "chunk": "@@ -20,30 +28,89 @@ import de.tum.in.www1.artemis.service.UserService;\n @RequestMapping(\"/api\")\n public class AchievementResource {\n \n+    private static final String ENTITY_NAME = \"achievement\";\n+\n+    @Value(\"${jhipster.clientApp.name}\")\n+    private String applicationName;\n+\n     private final Logger log = LoggerFactory.getLogger(AchievementResource.class);\n \n+    private final AuthorizationCheckService authCheckService;\n+\n     private final AchievementService achievementService;\n \n     private final UserService userService;\n \n-    public AchievementResource(AchievementService achievementService, UserService userService) {\n+    private final AchievementRepository achievementRepository;\n+\n+    public AchievementResource(AuthorizationCheckService authCheckService, AchievementService achievementService, UserService userService,\n+            AchievementRepository achievementRepository) {\n+        this.authCheckService = authCheckService;\n         this.achievementService = achievementService;\n         this.userService = userService;\n+        this.achievementRepository = achievementRepository;\n     }\n \n     /**\n-     * GET /courses/{courseId}/achievements : Get all achievements for requesting user in given course.\n+     * GET /achievements : Get all achievements for user.\n      *\n-     * @param courseId\n      * @return the ResponseEntity with status 200 (OK) and with the found achievements as body\n      */\n-    @GetMapping(\"/courses/{courseId}/achievements\")\n+    @GetMapping(\"/achievements\")\n     @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n-    public ResponseEntity<Set<Achievement>> getAchievementsForUserInCourse(@PathVariable Long courseId) {\n-        User user = userService.getUserWithGroupsAndAuthorities();\n-        log.debug(\"REST request to get achievements for user : {} in course : {}\", user.getLogin(), courseId);\n-        Set<Achievement> achievements = achievementService.findAllByUserIdAndCourseId(user.getId(), courseId);\n-        achievementService.prepareForClient(achievements);\n+    public ResponseEntity<Set<Achievement>> getAchievementsForUser() {\n+        User user = userService.getUser();\n+        log.debug(\"REST request to get achievements for user : {}\", user.getLogin());\n+        Set<Achievement> achievements = achievementService.findAllForUser(user.getId());\n         return ResponseEntity.ok(achievements);\n     }\n+\n+    /**\n+     * PUT /achievements : Updates an existing achievement.\n+     *\n+     * @param achievement the achievement to update\n+     * @return the ResponseEntity with status 200 (OK) and with body the updated achievement, or with status 500\n+     *         (Internal Server Error) if the achievement couldn't be updated\n+     */\n+    @PutMapping(\"/achievements\")\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Achievement> updateAchievement(@RequestBody Achievement achievement) {\n+        log.debug(\"REST request to update Achievement : {}\", achievement);\n+\n+        Course course = achievement.getCourse();\n+        User user = userService.getUserWithGroupsAndAuthorities();\n+        if (!authCheckService.isAtLeastInstructorInCourse(course, user)) {\n+            throw new AccessForbiddenException(\"You are not allowed to access this resource\");\n+        }\n+\n+        if (achievement.getId() == null) {\n+            return ResponseEntity.badRequest().build();\n+        }\n+\n+        Achievement savedAchievement = achievementRepository.save(achievement);\n+        return ResponseEntity.ok().headers(HeaderUtil.createEntityUpdateAlert(applicationName, true, ENTITY_NAME, savedAchievement.getId().toString())).body(result);\n+    }\n+\n+    /**\n+     * DELETE /achievements/:achievementId : delete the \"id\" achievement.\n+     *\n+     * @param achievementId the id of the achievement to delete\n+     * @return the ResponseEntity with status 200 (OK)\n+     */\n+    @DeleteMapping(\"/achievements/{achievementId}\")\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    @Transactional\n+    public ResponseEntity<Void> deleteAchievement(@PathVariable long achievementId) {\n+        log.info(\"REST request to delete Achievement : {}\", achievementId);\n+        User user = userService.getUserWithGroupsAndAuthorities();\n+        Optional<Achievement> optionalAchievement = achievementService.findById(achievementId);\n+        if (optionalAchievement.isEmpty()) {\n+            return ResponseEntity.notFound().build();\n+        }\n+        Achievement achievement = optionalAchievement.get();\n+        log.info(\"User \" + user.getLogin() + \" has requested to delete the achievement {}\", achievement.getId());\n+        achievementService.delete(achievement);\n+        return ResponseEntity.ok().headers(HeaderUtil.createEntityDeletionAlert(applicationName, true, ENTITY_NAME, achievement.getId().toString())).build();\n+    }\n+\n }\n", "next_change": {"commit": "0616ac4ef001698a1e962c595c2ceecc0eb76dd0", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\nindex af578634853..efa5f0e0668 100644\n--- a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n+++ b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n", "chunk": "@@ -108,6 +122,11 @@ public class AchievementResource {\n             return ResponseEntity.notFound().build();\n         }\n         Achievement achievement = optionalAchievement.get();\n+        Course course = achievement.getCourse();\n+        if (!authCheckService.isAtLeastInstructorInCourse(course, user)) {\n+            throw new AccessForbiddenException(\"You are not allowed to access this resource\");\n+        }\n+\n         log.info(\"User \" + user.getLogin() + \" has requested to delete the achievement {}\", achievement.getId());\n         achievementService.delete(achievement);\n         return ResponseEntity.ok().headers(HeaderUtil.createEntityDeletionAlert(applicationName, true, ENTITY_NAME, achievement.getId().toString())).build();\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgxMTQ5Mg==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r479811492", "body": "Why did you add here and below `@Transactional`?", "bodyText": "Why did you add here and below @Transactional?", "bodyHTML": "<p dir=\"auto\">Why did you add here and below <code>@Transactional</code>?</p>", "author": "fde312", "createdAt": "2020-08-30T20:20:53Z", "path": "src/main/java/de/tum/in/www1/artemis/service/AchievementService.java", "diffHunk": "@@ -0,0 +1,56 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import de.tum.in.www1.artemis.domain.Achievement;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.repository.AchievementRepository;\n+import de.tum.in.www1.artemis.repository.UserRepository;\n+\n+@Service\n+public class AchievementService {\n+\n+    private final AchievementRepository achievementRepository;\n+\n+    private final UserRepository userRepository;\n+\n+    public AchievementService(AchievementRepository achievementRepository, UserRepository userRepository) {\n+        this.achievementRepository = achievementRepository;\n+        this.userRepository = userRepository;\n+    }\n+\n+    public Optional<Achievement> findById(Long achievementId) {\n+        return achievementRepository.findById(achievementId);\n+    }\n+\n+    @Transactional\n+    public Set<Achievement> findAllForCourse(Long courseId, Long userId) {", "originalCommit": "497e3316832c66677399172c3bc6bd223073c1b2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgxMzAxNw==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r479813017", "bodyText": "The users are lazily initialized for achievements, so to be able to get the users within the hideUsersInAchievements function, I added that annotation.", "author": "balazs-czopf", "createdAt": "2020-08-30T20:37:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgxMTQ5Mg=="}], "type": "inlineReview", "revised_code": {"commit": "6aa68b0ab7a071fa631c7c72cdb8ea02ccf15a39", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\nindex 4635dbaba17..d89d918c0e2 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n", "chunk": "@@ -27,30 +29,55 @@ public class AchievementService {\n         return achievementRepository.findById(achievementId);\n     }\n \n-    @Transactional\n-    public Set<Achievement> findAllForCourse(Long courseId, Long userId) {\n-        var achievements = achievementRepository.getAllByCourseId(courseId);\n-        return hideUsersInAchievements(achievements, userId);\n+    public List<Achievement> findAll() {\n+        return achievementRepository.findAll();\n     }\n \n-    @Transactional\n-    public Set<Achievement> findAllForUser(Long userId) {\n-        var achievements = achievementRepository.getAllByUserId(userId);\n-        return hideUsersInAchievements(achievements, userId);\n+    public Set<Achievement> findAllByCourseId(Long courseId) {\n+        return achievementRepository.findAllByCourseId(courseId);\n     }\n \n+    public Set<Achievement> findAllByExerciseId(Long exerciseId) {\n+        return achievementRepository.findAllByExerciseId(exerciseId);\n+    }\n+\n+    public Set<Achievement> findAllByUserId(Long userId) {\n+        return achievementRepository.findAllByUserId(userId);\n+    }\n+\n+    public Achievement save(Achievement achievement) {\n+        return achievementRepository.save(achievement);\n+    }\n+\n+    /**\n+     * Creates an achievement and persist it\n+     * @param title title of the achievement\n+     * @param description description of the achievement\n+     * @param icon the font awesome icon string identifier\n+     * @param rank rank of the achievement\n+     * @param course course which the achievement belongs to\n+     */\n+    public Achievement create(String title, String description, String icon, AchievementRank rank, Course course) {\n+        Achievement achievement = new Achievement();\n+        achievement.setTitle(title);\n+        achievement.setDescription(description);\n+        achievement.setIcon(icon);\n+        achievement.setRank(rank);\n+        achievement.setCourse(course);\n+        return achievementRepository.save(achievement);\n+    }\n+\n+    /**\n+     * Deletes an achievement by also removing it from all users\n+     * @param achievement achievement to be deleted\n+     */\n     public void delete(Achievement achievement) {\n-        for (User user : achievement.getUsers()) {\n+        var users = userRepository.findAllByAchievementId(achievement.getId());\n+        achievement.setUsers(users);\n+        for (User user : users) {\n             user.removeAchievement(achievement);\n             userRepository.save(user);\n         }\n         achievementRepository.delete(achievement);\n     }\n-\n-    private Set<Achievement> hideUsersInAchievements(Set<Achievement> achievements, Long userId) {\n-        for (Achievement achievement : achievements) {\n-            achievement.getUsers().removeIf(userToRemove -> !userToRemove.getId().equals(userId));\n-        }\n-        return achievements;\n-    }\n }\n", "next_change": {"commit": "b55d823034cdd1c7d78f81b2656deb0463a57163", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\nindex d89d918c0e2..1954a518ca6 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n", "chunk": "@@ -80,4 +89,35 @@ public class AchievementService {\n         }\n         achievementRepository.delete(achievement);\n     }\n+\n+    // @Transactional\n+    public void assignPointBasedAchievementIfEarned(Result result) {\n+        var score = result.getScore();\n+        // TODO: add actually required score for achievements\n+        var gold = 0.9;\n+        var silver = 0.8;\n+        var bronze = 0.7;\n+\n+        // TODO: get respective achievement\n+        var achievement = new Achievement();\n+\n+        var optionalUser = participationService.findOneStudentParticipation(result.getParticipation().getId()).getStudent();\n+\n+        if (optionalUser.isPresent()) {\n+            var user = optionalUser.get();\n+\n+            if (score >= gold && !user.getAchievements().contains(achievement)) {\n+                user.addAchievement(achievement);\n+                userRepository.save(user);\n+            }\n+            else if (score >= silver && !user.getAchievements().contains(achievement)) {\n+                user.addAchievement(achievement);\n+                userRepository.save(user);\n+            }\n+            else if (score >= bronze && !user.getAchievements().contains(achievement)) {\n+                user.addAchievement(achievement);\n+                userRepository.save(user);\n+            }\n+        }\n+    }\n }\n", "next_change": {"commit": "865d4c8c0b2383053a0206e3f554ad5ddd33ed22", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\nindex 1954a518ca6..eff8b25290f 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n", "chunk": "@@ -89,35 +84,4 @@ public class AchievementService {\n         }\n         achievementRepository.delete(achievement);\n     }\n-\n-    // @Transactional\n-    public void assignPointBasedAchievementIfEarned(Result result) {\n-        var score = result.getScore();\n-        // TODO: add actually required score for achievements\n-        var gold = 0.9;\n-        var silver = 0.8;\n-        var bronze = 0.7;\n-\n-        // TODO: get respective achievement\n-        var achievement = new Achievement();\n-\n-        var optionalUser = participationService.findOneStudentParticipation(result.getParticipation().getId()).getStudent();\n-\n-        if (optionalUser.isPresent()) {\n-            var user = optionalUser.get();\n-\n-            if (score >= gold && !user.getAchievements().contains(achievement)) {\n-                user.addAchievement(achievement);\n-                userRepository.save(user);\n-            }\n-            else if (score >= silver && !user.getAchievements().contains(achievement)) {\n-                user.addAchievement(achievement);\n-                userRepository.save(user);\n-            }\n-            else if (score >= bronze && !user.getAchievements().contains(achievement)) {\n-                user.addAchievement(achievement);\n-                userRepository.save(user);\n-            }\n-        }\n-    }\n }\n", "next_change": {"commit": "72ed71a2a7717d3b129f6365d24db139ca9ffdf8", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\nindex eff8b25290f..1954a518ca6 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n", "chunk": "@@ -84,4 +89,35 @@ public class AchievementService {\n         }\n         achievementRepository.delete(achievement);\n     }\n+\n+    // @Transactional\n+    public void assignPointBasedAchievementIfEarned(Result result) {\n+        var score = result.getScore();\n+        // TODO: add actually required score for achievements\n+        var gold = 0.9;\n+        var silver = 0.8;\n+        var bronze = 0.7;\n+\n+        // TODO: get respective achievement\n+        var achievement = new Achievement();\n+\n+        var optionalUser = participationService.findOneStudentParticipation(result.getParticipation().getId()).getStudent();\n+\n+        if (optionalUser.isPresent()) {\n+            var user = optionalUser.get();\n+\n+            if (score >= gold && !user.getAchievements().contains(achievement)) {\n+                user.addAchievement(achievement);\n+                userRepository.save(user);\n+            }\n+            else if (score >= silver && !user.getAchievements().contains(achievement)) {\n+                user.addAchievement(achievement);\n+                userRepository.save(user);\n+            }\n+            else if (score >= bronze && !user.getAchievements().contains(achievement)) {\n+                user.addAchievement(achievement);\n+                userRepository.save(user);\n+            }\n+        }\n+    }\n }\n", "next_change": {"commit": "2880feed09fc2090a643646854d2f6a5d2a67e8f", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\nindex 1954a518ca6..eff8b25290f 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n", "chunk": "@@ -89,35 +84,4 @@ public class AchievementService {\n         }\n         achievementRepository.delete(achievement);\n     }\n-\n-    // @Transactional\n-    public void assignPointBasedAchievementIfEarned(Result result) {\n-        var score = result.getScore();\n-        // TODO: add actually required score for achievements\n-        var gold = 0.9;\n-        var silver = 0.8;\n-        var bronze = 0.7;\n-\n-        // TODO: get respective achievement\n-        var achievement = new Achievement();\n-\n-        var optionalUser = participationService.findOneStudentParticipation(result.getParticipation().getId()).getStudent();\n-\n-        if (optionalUser.isPresent()) {\n-            var user = optionalUser.get();\n-\n-            if (score >= gold && !user.getAchievements().contains(achievement)) {\n-                user.addAchievement(achievement);\n-                userRepository.save(user);\n-            }\n-            else if (score >= silver && !user.getAchievements().contains(achievement)) {\n-                user.addAchievement(achievement);\n-                userRepository.save(user);\n-            }\n-            else if (score >= bronze && !user.getAchievements().contains(achievement)) {\n-                user.addAchievement(achievement);\n-                userRepository.save(user);\n-            }\n-        }\n-    }\n }\n", "next_change": {"commit": "f9aef805a8b7948a9d5cd14781203108636a085e", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\nindex eff8b25290f..1954a518ca6 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n", "chunk": "@@ -84,4 +89,35 @@ public class AchievementService {\n         }\n         achievementRepository.delete(achievement);\n     }\n+\n+    // @Transactional\n+    public void assignPointBasedAchievementIfEarned(Result result) {\n+        var score = result.getScore();\n+        // TODO: add actually required score for achievements\n+        var gold = 0.9;\n+        var silver = 0.8;\n+        var bronze = 0.7;\n+\n+        // TODO: get respective achievement\n+        var achievement = new Achievement();\n+\n+        var optionalUser = participationService.findOneStudentParticipation(result.getParticipation().getId()).getStudent();\n+\n+        if (optionalUser.isPresent()) {\n+            var user = optionalUser.get();\n+\n+            if (score >= gold && !user.getAchievements().contains(achievement)) {\n+                user.addAchievement(achievement);\n+                userRepository.save(user);\n+            }\n+            else if (score >= silver && !user.getAchievements().contains(achievement)) {\n+                user.addAchievement(achievement);\n+                userRepository.save(user);\n+            }\n+            else if (score >= bronze && !user.getAchievements().contains(achievement)) {\n+                user.addAchievement(achievement);\n+                userRepository.save(user);\n+            }\n+        }\n+    }\n }\n", "next_change": {"commit": "16c868730f899decba01ea6e156f8e7aebc0f26a", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\nindex 1954a518ca6..eff8b25290f 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n", "chunk": "@@ -89,35 +84,4 @@ public class AchievementService {\n         }\n         achievementRepository.delete(achievement);\n     }\n-\n-    // @Transactional\n-    public void assignPointBasedAchievementIfEarned(Result result) {\n-        var score = result.getScore();\n-        // TODO: add actually required score for achievements\n-        var gold = 0.9;\n-        var silver = 0.8;\n-        var bronze = 0.7;\n-\n-        // TODO: get respective achievement\n-        var achievement = new Achievement();\n-\n-        var optionalUser = participationService.findOneStudentParticipation(result.getParticipation().getId()).getStudent();\n-\n-        if (optionalUser.isPresent()) {\n-            var user = optionalUser.get();\n-\n-            if (score >= gold && !user.getAchievements().contains(achievement)) {\n-                user.addAchievement(achievement);\n-                userRepository.save(user);\n-            }\n-            else if (score >= silver && !user.getAchievements().contains(achievement)) {\n-                user.addAchievement(achievement);\n-                userRepository.save(user);\n-            }\n-            else if (score >= bronze && !user.getAchievements().contains(achievement)) {\n-                user.addAchievement(achievement);\n-                userRepository.save(user);\n-            }\n-        }\n-    }\n }\n", "next_change": {"commit": "c9e78d5f35e682dd1b8e5882d0883d782cecbe3f", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\nindex eff8b25290f..1954a518ca6 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n", "chunk": "@@ -84,4 +89,35 @@ public class AchievementService {\n         }\n         achievementRepository.delete(achievement);\n     }\n+\n+    // @Transactional\n+    public void assignPointBasedAchievementIfEarned(Result result) {\n+        var score = result.getScore();\n+        // TODO: add actually required score for achievements\n+        var gold = 0.9;\n+        var silver = 0.8;\n+        var bronze = 0.7;\n+\n+        // TODO: get respective achievement\n+        var achievement = new Achievement();\n+\n+        var optionalUser = participationService.findOneStudentParticipation(result.getParticipation().getId()).getStudent();\n+\n+        if (optionalUser.isPresent()) {\n+            var user = optionalUser.get();\n+\n+            if (score >= gold && !user.getAchievements().contains(achievement)) {\n+                user.addAchievement(achievement);\n+                userRepository.save(user);\n+            }\n+            else if (score >= silver && !user.getAchievements().contains(achievement)) {\n+                user.addAchievement(achievement);\n+                userRepository.save(user);\n+            }\n+            else if (score >= bronze && !user.getAchievements().contains(achievement)) {\n+                user.addAchievement(achievement);\n+                userRepository.save(user);\n+            }\n+        }\n+    }\n }\n", "next_change": {"commit": "4605b63a052365e502039c1e3d72f325538cf7eb", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\nindex 1954a518ca6..eff8b25290f 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n", "chunk": "@@ -89,35 +84,4 @@ public class AchievementService {\n         }\n         achievementRepository.delete(achievement);\n     }\n-\n-    // @Transactional\n-    public void assignPointBasedAchievementIfEarned(Result result) {\n-        var score = result.getScore();\n-        // TODO: add actually required score for achievements\n-        var gold = 0.9;\n-        var silver = 0.8;\n-        var bronze = 0.7;\n-\n-        // TODO: get respective achievement\n-        var achievement = new Achievement();\n-\n-        var optionalUser = participationService.findOneStudentParticipation(result.getParticipation().getId()).getStudent();\n-\n-        if (optionalUser.isPresent()) {\n-            var user = optionalUser.get();\n-\n-            if (score >= gold && !user.getAchievements().contains(achievement)) {\n-                user.addAchievement(achievement);\n-                userRepository.save(user);\n-            }\n-            else if (score >= silver && !user.getAchievements().contains(achievement)) {\n-                user.addAchievement(achievement);\n-                userRepository.save(user);\n-            }\n-            else if (score >= bronze && !user.getAchievements().contains(achievement)) {\n-                user.addAchievement(achievement);\n-                userRepository.save(user);\n-            }\n-        }\n-    }\n }\n", "next_change": {"commit": "18ddbfcae8f77e8cee1c7944a18fba5a589d46b5", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\nindex eff8b25290f..1954a518ca6 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n", "chunk": "@@ -84,4 +89,35 @@ public class AchievementService {\n         }\n         achievementRepository.delete(achievement);\n     }\n+\n+    // @Transactional\n+    public void assignPointBasedAchievementIfEarned(Result result) {\n+        var score = result.getScore();\n+        // TODO: add actually required score for achievements\n+        var gold = 0.9;\n+        var silver = 0.8;\n+        var bronze = 0.7;\n+\n+        // TODO: get respective achievement\n+        var achievement = new Achievement();\n+\n+        var optionalUser = participationService.findOneStudentParticipation(result.getParticipation().getId()).getStudent();\n+\n+        if (optionalUser.isPresent()) {\n+            var user = optionalUser.get();\n+\n+            if (score >= gold && !user.getAchievements().contains(achievement)) {\n+                user.addAchievement(achievement);\n+                userRepository.save(user);\n+            }\n+            else if (score >= silver && !user.getAchievements().contains(achievement)) {\n+                user.addAchievement(achievement);\n+                userRepository.save(user);\n+            }\n+            else if (score >= bronze && !user.getAchievements().contains(achievement)) {\n+                user.addAchievement(achievement);\n+                userRepository.save(user);\n+            }\n+        }\n+    }\n }\n", "next_change": {"commit": "1555470b055e8a99d34b9ed7f4fcb0929ede6bc6", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\nindex 1954a518ca6..eff8b25290f 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n", "chunk": "@@ -89,35 +84,4 @@ public class AchievementService {\n         }\n         achievementRepository.delete(achievement);\n     }\n-\n-    // @Transactional\n-    public void assignPointBasedAchievementIfEarned(Result result) {\n-        var score = result.getScore();\n-        // TODO: add actually required score for achievements\n-        var gold = 0.9;\n-        var silver = 0.8;\n-        var bronze = 0.7;\n-\n-        // TODO: get respective achievement\n-        var achievement = new Achievement();\n-\n-        var optionalUser = participationService.findOneStudentParticipation(result.getParticipation().getId()).getStudent();\n-\n-        if (optionalUser.isPresent()) {\n-            var user = optionalUser.get();\n-\n-            if (score >= gold && !user.getAchievements().contains(achievement)) {\n-                user.addAchievement(achievement);\n-                userRepository.save(user);\n-            }\n-            else if (score >= silver && !user.getAchievements().contains(achievement)) {\n-                user.addAchievement(achievement);\n-                userRepository.save(user);\n-            }\n-            else if (score >= bronze && !user.getAchievements().contains(achievement)) {\n-                user.addAchievement(achievement);\n-                userRepository.save(user);\n-            }\n-        }\n-    }\n }\n", "next_change": {"commit": "350087b6078ccb4c49a78aebe602a163fa860637", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\nindex eff8b25290f..1954a518ca6 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n", "chunk": "@@ -84,4 +89,35 @@ public class AchievementService {\n         }\n         achievementRepository.delete(achievement);\n     }\n+\n+    // @Transactional\n+    public void assignPointBasedAchievementIfEarned(Result result) {\n+        var score = result.getScore();\n+        // TODO: add actually required score for achievements\n+        var gold = 0.9;\n+        var silver = 0.8;\n+        var bronze = 0.7;\n+\n+        // TODO: get respective achievement\n+        var achievement = new Achievement();\n+\n+        var optionalUser = participationService.findOneStudentParticipation(result.getParticipation().getId()).getStudent();\n+\n+        if (optionalUser.isPresent()) {\n+            var user = optionalUser.get();\n+\n+            if (score >= gold && !user.getAchievements().contains(achievement)) {\n+                user.addAchievement(achievement);\n+                userRepository.save(user);\n+            }\n+            else if (score >= silver && !user.getAchievements().contains(achievement)) {\n+                user.addAchievement(achievement);\n+                userRepository.save(user);\n+            }\n+            else if (score >= bronze && !user.getAchievements().contains(achievement)) {\n+                user.addAchievement(achievement);\n+                userRepository.save(user);\n+            }\n+        }\n+    }\n }\n", "next_change": {"commit": "b496ec47dbd27567e02f96f7b2e363733ca7d89f", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\nindex 1954a518ca6..eff8b25290f 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n", "chunk": "@@ -89,35 +84,4 @@ public class AchievementService {\n         }\n         achievementRepository.delete(achievement);\n     }\n-\n-    // @Transactional\n-    public void assignPointBasedAchievementIfEarned(Result result) {\n-        var score = result.getScore();\n-        // TODO: add actually required score for achievements\n-        var gold = 0.9;\n-        var silver = 0.8;\n-        var bronze = 0.7;\n-\n-        // TODO: get respective achievement\n-        var achievement = new Achievement();\n-\n-        var optionalUser = participationService.findOneStudentParticipation(result.getParticipation().getId()).getStudent();\n-\n-        if (optionalUser.isPresent()) {\n-            var user = optionalUser.get();\n-\n-            if (score >= gold && !user.getAchievements().contains(achievement)) {\n-                user.addAchievement(achievement);\n-                userRepository.save(user);\n-            }\n-            else if (score >= silver && !user.getAchievements().contains(achievement)) {\n-                user.addAchievement(achievement);\n-                userRepository.save(user);\n-            }\n-            else if (score >= bronze && !user.getAchievements().contains(achievement)) {\n-                user.addAchievement(achievement);\n-                userRepository.save(user);\n-            }\n-        }\n-    }\n }\n", "next_change": {"commit": "1871fe479e13e32629073b2a2ab2ae293cf2a6ae", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\nindex eff8b25290f..1954a518ca6 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n", "chunk": "@@ -84,4 +89,35 @@ public class AchievementService {\n         }\n         achievementRepository.delete(achievement);\n     }\n+\n+    // @Transactional\n+    public void assignPointBasedAchievementIfEarned(Result result) {\n+        var score = result.getScore();\n+        // TODO: add actually required score for achievements\n+        var gold = 0.9;\n+        var silver = 0.8;\n+        var bronze = 0.7;\n+\n+        // TODO: get respective achievement\n+        var achievement = new Achievement();\n+\n+        var optionalUser = participationService.findOneStudentParticipation(result.getParticipation().getId()).getStudent();\n+\n+        if (optionalUser.isPresent()) {\n+            var user = optionalUser.get();\n+\n+            if (score >= gold && !user.getAchievements().contains(achievement)) {\n+                user.addAchievement(achievement);\n+                userRepository.save(user);\n+            }\n+            else if (score >= silver && !user.getAchievements().contains(achievement)) {\n+                user.addAchievement(achievement);\n+                userRepository.save(user);\n+            }\n+            else if (score >= bronze && !user.getAchievements().contains(achievement)) {\n+                user.addAchievement(achievement);\n+                userRepository.save(user);\n+            }\n+        }\n+    }\n }\n", "next_change": {"commit": "2d1887ebc2c67095c5a13eee2f86b7fb39b901d3", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\nindex 1954a518ca6..eff8b25290f 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n", "chunk": "@@ -89,35 +84,4 @@ public class AchievementService {\n         }\n         achievementRepository.delete(achievement);\n     }\n-\n-    // @Transactional\n-    public void assignPointBasedAchievementIfEarned(Result result) {\n-        var score = result.getScore();\n-        // TODO: add actually required score for achievements\n-        var gold = 0.9;\n-        var silver = 0.8;\n-        var bronze = 0.7;\n-\n-        // TODO: get respective achievement\n-        var achievement = new Achievement();\n-\n-        var optionalUser = participationService.findOneStudentParticipation(result.getParticipation().getId()).getStudent();\n-\n-        if (optionalUser.isPresent()) {\n-            var user = optionalUser.get();\n-\n-            if (score >= gold && !user.getAchievements().contains(achievement)) {\n-                user.addAchievement(achievement);\n-                userRepository.save(user);\n-            }\n-            else if (score >= silver && !user.getAchievements().contains(achievement)) {\n-                user.addAchievement(achievement);\n-                userRepository.save(user);\n-            }\n-            else if (score >= bronze && !user.getAchievements().contains(achievement)) {\n-                user.addAchievement(achievement);\n-                userRepository.save(user);\n-            }\n-        }\n-    }\n }\n", "next_change": {"commit": "f0e4daee087d8b6f0d36b1b78465a31f6f09713d", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\nindex eff8b25290f..1954a518ca6 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n", "chunk": "@@ -84,4 +89,35 @@ public class AchievementService {\n         }\n         achievementRepository.delete(achievement);\n     }\n+\n+    // @Transactional\n+    public void assignPointBasedAchievementIfEarned(Result result) {\n+        var score = result.getScore();\n+        // TODO: add actually required score for achievements\n+        var gold = 0.9;\n+        var silver = 0.8;\n+        var bronze = 0.7;\n+\n+        // TODO: get respective achievement\n+        var achievement = new Achievement();\n+\n+        var optionalUser = participationService.findOneStudentParticipation(result.getParticipation().getId()).getStudent();\n+\n+        if (optionalUser.isPresent()) {\n+            var user = optionalUser.get();\n+\n+            if (score >= gold && !user.getAchievements().contains(achievement)) {\n+                user.addAchievement(achievement);\n+                userRepository.save(user);\n+            }\n+            else if (score >= silver && !user.getAchievements().contains(achievement)) {\n+                user.addAchievement(achievement);\n+                userRepository.save(user);\n+            }\n+            else if (score >= bronze && !user.getAchievements().contains(achievement)) {\n+                user.addAchievement(achievement);\n+                userRepository.save(user);\n+            }\n+        }\n+    }\n }\n", "next_change": {"commit": "95622742bd3fa7623d0ad8df6089acef534ee60f", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\nindex 1954a518ca6..140afa73bd9 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n", "chunk": "@@ -90,34 +103,60 @@ public class AchievementService {\n         achievementRepository.delete(achievement);\n     }\n \n-    // @Transactional\n-    public void assignPointBasedAchievementIfEarned(Result result) {\n-        var score = result.getScore();\n-        // TODO: add actually required score for achievements\n-        var gold = 0.9;\n-        var silver = 0.8;\n-        var bronze = 0.7;\n+    public void generateForCourse(Course course) {\n+        progressBasedAchievementService.generateAchievements(course);\n+    }\n+\n+    public void generateForExercise(Exercise exercise) {\n+        pointBasedAchievementService.generateAchievements(exercise);\n+        timeBasedAchievementService.generateAchievements(exercise);\n+    }\n+\n+    public void checkForAchievements(Result result) {\n+        if (!result.getParticipation().getExercise().getCourseViaExerciseGroupOrCourseMember().getHasAchievements()) {\n+            return;\n+        }\n+        pointBasedAchievementService.checkForAchievement(result);\n+        timeBasedAchievementService.checkForAchievement(result);\n+        progressBasedAchievementService.checkForAchievement(result);\n+    }\n \n-        // TODO: get respective achievement\n-        var achievement = new Achievement();\n+    public void rewardAchievement(Course course, Exercise exercise, AchievementType type, AchievementRank rank, User user) {\n+        Set<Achievement> achievements;\n+        Achievement achievement;\n \n-        var optionalUser = participationService.findOneStudentParticipation(result.getParticipation().getId()).getStudent();\n+        if (exercise == null) {\n+            achievements = achievementRepository.findAllForRewardedTypeInCourse(course.getId(), type);\n+        }\n+        else {\n+            achievements = achievementRepository.findAllForRewardedTypeInExercise(course.getId(), exercise.getId(), type);\n+        }\n \n-        if (optionalUser.isPresent()) {\n-            var user = optionalUser.get();\n+        var optionalAchievement = achievements.stream().filter(a -> a.getRank().equals(rank)).findAny();\n+        if (!optionalAchievement.isPresent()) {\n+            return;\n+        }\n \n-            if (score >= gold && !user.getAchievements().contains(achievement)) {\n-                user.addAchievement(achievement);\n-                userRepository.save(user);\n-            }\n-            else if (score >= silver && !user.getAchievements().contains(achievement)) {\n-                user.addAchievement(achievement);\n-                userRepository.save(user);\n+        achievement = optionalAchievement.get();\n+        if (achievement.getUsers().contains(user)) {\n+            return;\n+        }\n+\n+        var optionalAchievementsOfHigherRank = achievements.stream().filter(a -> a.getRank().ordinal() > rank.ordinal()).collect(Collectors.toSet());\n+        for (Achievement a : optionalAchievementsOfHigherRank) {\n+            if (a.getUsers().contains(user)) {\n+                return;\n             }\n-            else if (score >= bronze && !user.getAchievements().contains(achievement)) {\n-                user.addAchievement(achievement);\n-                userRepository.save(user);\n+        }\n+\n+        var optionalAchievementsOfLowerRank = achievements.stream().filter(a -> a.getRank().ordinal() < rank.ordinal()).collect(Collectors.toSet());\n+        for (Achievement a : optionalAchievementsOfLowerRank) {\n+            if (a.getUsers().contains(user)) {\n+                user.removeAchievement(a);\n             }\n         }\n+\n+        user.addAchievement(achievement);\n+        userRepository.save(user);\n     }\n }\n", "next_change": {"commit": "0e82242b97cdbc112e1d3a883cb2281d462dd405", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\nindex 140afa73bd9..eff8b25290f 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n", "chunk": "@@ -102,61 +84,4 @@ public class AchievementService {\n         }\n         achievementRepository.delete(achievement);\n     }\n-\n-    public void generateForCourse(Course course) {\n-        progressBasedAchievementService.generateAchievements(course);\n-    }\n-\n-    public void generateForExercise(Exercise exercise) {\n-        pointBasedAchievementService.generateAchievements(exercise);\n-        timeBasedAchievementService.generateAchievements(exercise);\n-    }\n-\n-    public void checkForAchievements(Result result) {\n-        if (!result.getParticipation().getExercise().getCourseViaExerciseGroupOrCourseMember().getHasAchievements()) {\n-            return;\n-        }\n-        pointBasedAchievementService.checkForAchievement(result);\n-        timeBasedAchievementService.checkForAchievement(result);\n-        progressBasedAchievementService.checkForAchievement(result);\n-    }\n-\n-    public void rewardAchievement(Course course, Exercise exercise, AchievementType type, AchievementRank rank, User user) {\n-        Set<Achievement> achievements;\n-        Achievement achievement;\n-\n-        if (exercise == null) {\n-            achievements = achievementRepository.findAllForRewardedTypeInCourse(course.getId(), type);\n-        }\n-        else {\n-            achievements = achievementRepository.findAllForRewardedTypeInExercise(course.getId(), exercise.getId(), type);\n-        }\n-\n-        var optionalAchievement = achievements.stream().filter(a -> a.getRank().equals(rank)).findAny();\n-        if (!optionalAchievement.isPresent()) {\n-            return;\n-        }\n-\n-        achievement = optionalAchievement.get();\n-        if (achievement.getUsers().contains(user)) {\n-            return;\n-        }\n-\n-        var optionalAchievementsOfHigherRank = achievements.stream().filter(a -> a.getRank().ordinal() > rank.ordinal()).collect(Collectors.toSet());\n-        for (Achievement a : optionalAchievementsOfHigherRank) {\n-            if (a.getUsers().contains(user)) {\n-                return;\n-            }\n-        }\n-\n-        var optionalAchievementsOfLowerRank = achievements.stream().filter(a -> a.getRank().ordinal() < rank.ordinal()).collect(Collectors.toSet());\n-        for (Achievement a : optionalAchievementsOfLowerRank) {\n-            if (a.getUsers().contains(user)) {\n-                user.removeAchievement(a);\n-            }\n-        }\n-\n-        user.addAchievement(achievement);\n-        userRepository.save(user);\n-    }\n }\n", "next_change": {"commit": "c7425c9af8e7e15cd22a3771029b103c6d79608f", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\nindex eff8b25290f..07259f551f0 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n", "chunk": "@@ -84,4 +79,78 @@ public class AchievementService {\n         }\n         achievementRepository.delete(achievement);\n     }\n+\n+    public void generateForCourse(Course course) {\n+        progressBasedAchievementService.generateAchievements(course);\n+    }\n+\n+    public void generateForExercise(Exercise exercise) {\n+        pointBasedAchievementService.generateAchievements(exercise);\n+        timeBasedAchievementService.generateAchievements(exercise);\n+    }\n+\n+    public void checkForAchievements(Result result) {\n+        var course = result.getParticipation().getExercise().getCourseViaExerciseGroupOrCourseMember();\n+        if (!course.getHasAchievements()) {\n+            return;\n+        }\n+        var exercise = result.getParticipation().getExercise();\n+        var optionalUser = participationService.findOneStudentParticipation(result.getParticipation().getId()).getStudent();\n+        if (!optionalUser.isPresent()) {\n+            return;\n+        }\n+        var user = optionalUser.get();\n+\n+        var pointRank = pointBasedAchievementService.checkForAchievement(result);\n+        rewardAchievement(course, exercise, AchievementType.POINT, pointRank, user);\n+\n+        var timeRank = timeBasedAchievementService.checkForAchievement(result);\n+        rewardAchievement(course, exercise, AchievementType.TIME, timeRank, user);\n+\n+        var progressRank = progressBasedAchievementService.checkForAchievement(course, user);\n+        rewardAchievement(course, exercise, AchievementType.PROGRESS, progressRank, user);\n+    }\n+\n+    public void rewardAchievement(Course course, Exercise exercise, AchievementType type, AchievementRank rank, User user) {\n+        Set<Achievement> achievements;\n+        Achievement achievement;\n+\n+        if (rank == null) {\n+            return;\n+        }\n+\n+        if (exercise == null) {\n+            achievements = achievementRepository.findAllForRewardedTypeInCourse(course.getId(), type);\n+        }\n+        else {\n+            achievements = achievementRepository.findAllForRewardedTypeInExercise(course.getId(), exercise.getId(), type);\n+        }\n+\n+        var optionalAchievement = achievements.stream().filter(a -> a.getRank().equals(rank)).findAny();\n+        if (!optionalAchievement.isPresent()) {\n+            return;\n+        }\n+\n+        achievement = optionalAchievement.get();\n+        if (achievement.getUsers().contains(user)) {\n+            return;\n+        }\n+\n+        var optionalAchievementsOfHigherRank = achievements.stream().filter(a -> a.getRank().ordinal() > rank.ordinal()).collect(Collectors.toSet());\n+        for (Achievement a : optionalAchievementsOfHigherRank) {\n+            if (a.getUsers().contains(user)) {\n+                return;\n+            }\n+        }\n+\n+        var optionalAchievementsOfLowerRank = achievements.stream().filter(a -> a.getRank().ordinal() < rank.ordinal()).collect(Collectors.toSet());\n+        for (Achievement a : optionalAchievementsOfLowerRank) {\n+            if (a.getUsers().contains(user)) {\n+                user.removeAchievement(a);\n+            }\n+        }\n+\n+        user.addAchievement(achievement);\n+        userRepository.save(user);\n+    }\n }\n", "next_change": {"commit": "28ed83395042c9e9faddf43940bd9f3c221684b3", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\nindex 07259f551f0..eff8b25290f 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n", "chunk": "@@ -79,78 +84,4 @@ public class AchievementService {\n         }\n         achievementRepository.delete(achievement);\n     }\n-\n-    public void generateForCourse(Course course) {\n-        progressBasedAchievementService.generateAchievements(course);\n-    }\n-\n-    public void generateForExercise(Exercise exercise) {\n-        pointBasedAchievementService.generateAchievements(exercise);\n-        timeBasedAchievementService.generateAchievements(exercise);\n-    }\n-\n-    public void checkForAchievements(Result result) {\n-        var course = result.getParticipation().getExercise().getCourseViaExerciseGroupOrCourseMember();\n-        if (!course.getHasAchievements()) {\n-            return;\n-        }\n-        var exercise = result.getParticipation().getExercise();\n-        var optionalUser = participationService.findOneStudentParticipation(result.getParticipation().getId()).getStudent();\n-        if (!optionalUser.isPresent()) {\n-            return;\n-        }\n-        var user = optionalUser.get();\n-\n-        var pointRank = pointBasedAchievementService.checkForAchievement(result);\n-        rewardAchievement(course, exercise, AchievementType.POINT, pointRank, user);\n-\n-        var timeRank = timeBasedAchievementService.checkForAchievement(result);\n-        rewardAchievement(course, exercise, AchievementType.TIME, timeRank, user);\n-\n-        var progressRank = progressBasedAchievementService.checkForAchievement(course, user);\n-        rewardAchievement(course, exercise, AchievementType.PROGRESS, progressRank, user);\n-    }\n-\n-    public void rewardAchievement(Course course, Exercise exercise, AchievementType type, AchievementRank rank, User user) {\n-        Set<Achievement> achievements;\n-        Achievement achievement;\n-\n-        if (rank == null) {\n-            return;\n-        }\n-\n-        if (exercise == null) {\n-            achievements = achievementRepository.findAllForRewardedTypeInCourse(course.getId(), type);\n-        }\n-        else {\n-            achievements = achievementRepository.findAllForRewardedTypeInExercise(course.getId(), exercise.getId(), type);\n-        }\n-\n-        var optionalAchievement = achievements.stream().filter(a -> a.getRank().equals(rank)).findAny();\n-        if (!optionalAchievement.isPresent()) {\n-            return;\n-        }\n-\n-        achievement = optionalAchievement.get();\n-        if (achievement.getUsers().contains(user)) {\n-            return;\n-        }\n-\n-        var optionalAchievementsOfHigherRank = achievements.stream().filter(a -> a.getRank().ordinal() > rank.ordinal()).collect(Collectors.toSet());\n-        for (Achievement a : optionalAchievementsOfHigherRank) {\n-            if (a.getUsers().contains(user)) {\n-                return;\n-            }\n-        }\n-\n-        var optionalAchievementsOfLowerRank = achievements.stream().filter(a -> a.getRank().ordinal() < rank.ordinal()).collect(Collectors.toSet());\n-        for (Achievement a : optionalAchievementsOfLowerRank) {\n-            if (a.getUsers().contains(user)) {\n-                user.removeAchievement(a);\n-            }\n-        }\n-\n-        user.addAchievement(achievement);\n-        userRepository.save(user);\n-    }\n }\n", "next_change": {"commit": "c3317e06a092c8dbee21b52de380addd92f73b3f", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\nindex eff8b25290f..9f934956a2c 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n", "chunk": "@@ -84,4 +79,78 @@ public class AchievementService {\n         }\n         achievementRepository.delete(achievement);\n     }\n+\n+    public void generateForCourse(Course course) {\n+        progressBasedAchievementService.generateAchievements(course);\n+    }\n+\n+    public void generateForExercise(Exercise exercise) {\n+        pointBasedAchievementService.generateAchievements(exercise);\n+        timeBasedAchievementService.generateAchievements(exercise);\n+    }\n+\n+    public void checkForAchievements(Result result) {\n+        var course = result.getParticipation().getExercise().getCourseViaExerciseGroupOrCourseMember();\n+        if (!course.getHasAchievements()) {\n+            return;\n+        }\n+        var exercise = result.getParticipation().getExercise();\n+        var optionalUser = participationService.findOneStudentParticipation(result.getParticipation().getId()).getStudent();\n+        if (!optionalUser.isPresent()) {\n+            return;\n+        }\n+        var user = optionalUser.get();\n+\n+        var pointRank = pointBasedAchievementService.checkForAchievement(result);\n+        rewardAchievement(course, exercise, AchievementType.POINT, pointRank, user);\n+\n+        var timeRank = timeBasedAchievementService.checkForAchievement(result);\n+        rewardAchievement(course, exercise, AchievementType.TIME, timeRank, user);\n+\n+        var progressRank = progressBasedAchievementService.checkForAchievement(course, user);\n+        rewardAchievement(course, exercise, AchievementType.PROGRESS, progressRank, user);\n+    }\n+\n+    public void rewardAchievement(Course course, Exercise exercise, AchievementType type, AchievementRank rank, User user) {\n+        Set<Achievement> achievements;\n+        Achievement achievement;\n+\n+        if (rank == null) {\n+            return;\n+        }\n+\n+        if (exercise == null) {\n+            achievements = achievementRepository.findAllForRewardedTypeInCourse(course.getId(), type);\n+        }\n+        else {\n+            achievements = achievementRepository.findAllForRewardedTypeInExercise(course.getId(), exercise.getId(), type);\n+        }\n+\n+        var optionalAchievement = achievements.stream().filter(a -> a.getRank().equals(rank)).findAny();\n+        if (!optionalAchievement.isPresent()) {\n+            return;\n+        }\n+\n+        achievement = optionalAchievement.get();\n+        if (achievement.getUsers().contains(user)) {\n+            return;\n+        }\n+\n+        var optionalAchievementsOfHigherRank = achievements.stream().filter(a -> a.getRank().ordinal() > rank.ordinal()).collect(Collectors.toSet());\n+        for (Achievement a : optionalAchievementsOfHigherRank) {\n+            if (a.getUsers().contains(user)) {\n+                return;\n+            }\n+        }\n+\n+        var optionalAchievementsOfLowerRank = achievements.stream().filter(a -> a.getRank().ordinal() < rank.ordinal()).collect(Collectors.toSet());\n+        for (Achievement a : optionalAchievementsOfLowerRank) {\n+            if (a.getUsers().contains(user) && a.getExercise() != null) {\n+                user.removeAchievement(a);\n+            }\n+        }\n+\n+        user.addAchievement(achievement);\n+        userRepository.save(user);\n+    }\n }\n", "next_change": {"commit": "508e8977abe4d1e8ec1c8a817fe9bd0f91f6bb8a", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\nindex 9f934956a2c..eff8b25290f 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n", "chunk": "@@ -79,78 +84,4 @@ public class AchievementService {\n         }\n         achievementRepository.delete(achievement);\n     }\n-\n-    public void generateForCourse(Course course) {\n-        progressBasedAchievementService.generateAchievements(course);\n-    }\n-\n-    public void generateForExercise(Exercise exercise) {\n-        pointBasedAchievementService.generateAchievements(exercise);\n-        timeBasedAchievementService.generateAchievements(exercise);\n-    }\n-\n-    public void checkForAchievements(Result result) {\n-        var course = result.getParticipation().getExercise().getCourseViaExerciseGroupOrCourseMember();\n-        if (!course.getHasAchievements()) {\n-            return;\n-        }\n-        var exercise = result.getParticipation().getExercise();\n-        var optionalUser = participationService.findOneStudentParticipation(result.getParticipation().getId()).getStudent();\n-        if (!optionalUser.isPresent()) {\n-            return;\n-        }\n-        var user = optionalUser.get();\n-\n-        var pointRank = pointBasedAchievementService.checkForAchievement(result);\n-        rewardAchievement(course, exercise, AchievementType.POINT, pointRank, user);\n-\n-        var timeRank = timeBasedAchievementService.checkForAchievement(result);\n-        rewardAchievement(course, exercise, AchievementType.TIME, timeRank, user);\n-\n-        var progressRank = progressBasedAchievementService.checkForAchievement(course, user);\n-        rewardAchievement(course, exercise, AchievementType.PROGRESS, progressRank, user);\n-    }\n-\n-    public void rewardAchievement(Course course, Exercise exercise, AchievementType type, AchievementRank rank, User user) {\n-        Set<Achievement> achievements;\n-        Achievement achievement;\n-\n-        if (rank == null) {\n-            return;\n-        }\n-\n-        if (exercise == null) {\n-            achievements = achievementRepository.findAllForRewardedTypeInCourse(course.getId(), type);\n-        }\n-        else {\n-            achievements = achievementRepository.findAllForRewardedTypeInExercise(course.getId(), exercise.getId(), type);\n-        }\n-\n-        var optionalAchievement = achievements.stream().filter(a -> a.getRank().equals(rank)).findAny();\n-        if (!optionalAchievement.isPresent()) {\n-            return;\n-        }\n-\n-        achievement = optionalAchievement.get();\n-        if (achievement.getUsers().contains(user)) {\n-            return;\n-        }\n-\n-        var optionalAchievementsOfHigherRank = achievements.stream().filter(a -> a.getRank().ordinal() > rank.ordinal()).collect(Collectors.toSet());\n-        for (Achievement a : optionalAchievementsOfHigherRank) {\n-            if (a.getUsers().contains(user)) {\n-                return;\n-            }\n-        }\n-\n-        var optionalAchievementsOfLowerRank = achievements.stream().filter(a -> a.getRank().ordinal() < rank.ordinal()).collect(Collectors.toSet());\n-        for (Achievement a : optionalAchievementsOfLowerRank) {\n-            if (a.getUsers().contains(user) && a.getExercise() != null) {\n-                user.removeAchievement(a);\n-            }\n-        }\n-\n-        user.addAchievement(achievement);\n-        userRepository.save(user);\n-    }\n }\n", "next_change": {"commit": "d3d2ea3ec69fdc3185bac66822f03c4a1bf0b6b1", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\nindex eff8b25290f..9f934956a2c 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n", "chunk": "@@ -84,4 +79,78 @@ public class AchievementService {\n         }\n         achievementRepository.delete(achievement);\n     }\n+\n+    public void generateForCourse(Course course) {\n+        progressBasedAchievementService.generateAchievements(course);\n+    }\n+\n+    public void generateForExercise(Exercise exercise) {\n+        pointBasedAchievementService.generateAchievements(exercise);\n+        timeBasedAchievementService.generateAchievements(exercise);\n+    }\n+\n+    public void checkForAchievements(Result result) {\n+        var course = result.getParticipation().getExercise().getCourseViaExerciseGroupOrCourseMember();\n+        if (!course.getHasAchievements()) {\n+            return;\n+        }\n+        var exercise = result.getParticipation().getExercise();\n+        var optionalUser = participationService.findOneStudentParticipation(result.getParticipation().getId()).getStudent();\n+        if (!optionalUser.isPresent()) {\n+            return;\n+        }\n+        var user = optionalUser.get();\n+\n+        var pointRank = pointBasedAchievementService.checkForAchievement(result);\n+        rewardAchievement(course, exercise, AchievementType.POINT, pointRank, user);\n+\n+        var timeRank = timeBasedAchievementService.checkForAchievement(result);\n+        rewardAchievement(course, exercise, AchievementType.TIME, timeRank, user);\n+\n+        var progressRank = progressBasedAchievementService.checkForAchievement(course, user);\n+        rewardAchievement(course, exercise, AchievementType.PROGRESS, progressRank, user);\n+    }\n+\n+    public void rewardAchievement(Course course, Exercise exercise, AchievementType type, AchievementRank rank, User user) {\n+        Set<Achievement> achievements;\n+        Achievement achievement;\n+\n+        if (rank == null) {\n+            return;\n+        }\n+\n+        if (exercise == null) {\n+            achievements = achievementRepository.findAllForRewardedTypeInCourse(course.getId(), type);\n+        }\n+        else {\n+            achievements = achievementRepository.findAllForRewardedTypeInExercise(course.getId(), exercise.getId(), type);\n+        }\n+\n+        var optionalAchievement = achievements.stream().filter(a -> a.getRank().equals(rank)).findAny();\n+        if (!optionalAchievement.isPresent()) {\n+            return;\n+        }\n+\n+        achievement = optionalAchievement.get();\n+        if (achievement.getUsers().contains(user)) {\n+            return;\n+        }\n+\n+        var optionalAchievementsOfHigherRank = achievements.stream().filter(a -> a.getRank().ordinal() > rank.ordinal()).collect(Collectors.toSet());\n+        for (Achievement a : optionalAchievementsOfHigherRank) {\n+            if (a.getUsers().contains(user)) {\n+                return;\n+            }\n+        }\n+\n+        var optionalAchievementsOfLowerRank = achievements.stream().filter(a -> a.getRank().ordinal() < rank.ordinal()).collect(Collectors.toSet());\n+        for (Achievement a : optionalAchievementsOfLowerRank) {\n+            if (a.getUsers().contains(user) && a.getExercise() != null) {\n+                user.removeAchievement(a);\n+            }\n+        }\n+\n+        user.addAchievement(achievement);\n+        userRepository.save(user);\n+    }\n }\n", "next_change": {"commit": "ee25bd720633e2da0f2ad7b9354358590178e20f", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\nindex 9f934956a2c..bc4d28824f4 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n", "chunk": "@@ -153,4 +153,12 @@ public class AchievementService {\n         user.addAchievement(achievement);\n         userRepository.save(user);\n     }\n+\n+    public void prepareForClient(Set<Achievement> achievements) {\n+        for (Achievement achievement : achievements) {\n+            achievement.setExercise(null);\n+            achievement.setCourse(null);\n+            achievement.setUsers(null);\n+        }\n+    }\n }\n", "next_change": {"commit": "64778c859b7f2d14015c50aedae62db4c98bcee7", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\nindex bc4d28824f4..eff8b25290f 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n", "chunk": "@@ -79,86 +84,4 @@ public class AchievementService {\n         }\n         achievementRepository.delete(achievement);\n     }\n-\n-    public void generateForCourse(Course course) {\n-        progressBasedAchievementService.generateAchievements(course);\n-    }\n-\n-    public void generateForExercise(Exercise exercise) {\n-        pointBasedAchievementService.generateAchievements(exercise);\n-        timeBasedAchievementService.generateAchievements(exercise);\n-    }\n-\n-    public void checkForAchievements(Result result) {\n-        var course = result.getParticipation().getExercise().getCourseViaExerciseGroupOrCourseMember();\n-        if (!course.getHasAchievements()) {\n-            return;\n-        }\n-        var exercise = result.getParticipation().getExercise();\n-        var optionalUser = participationService.findOneStudentParticipation(result.getParticipation().getId()).getStudent();\n-        if (!optionalUser.isPresent()) {\n-            return;\n-        }\n-        var user = optionalUser.get();\n-\n-        var pointRank = pointBasedAchievementService.checkForAchievement(result);\n-        rewardAchievement(course, exercise, AchievementType.POINT, pointRank, user);\n-\n-        var timeRank = timeBasedAchievementService.checkForAchievement(result);\n-        rewardAchievement(course, exercise, AchievementType.TIME, timeRank, user);\n-\n-        var progressRank = progressBasedAchievementService.checkForAchievement(course, user);\n-        rewardAchievement(course, exercise, AchievementType.PROGRESS, progressRank, user);\n-    }\n-\n-    public void rewardAchievement(Course course, Exercise exercise, AchievementType type, AchievementRank rank, User user) {\n-        Set<Achievement> achievements;\n-        Achievement achievement;\n-\n-        if (rank == null) {\n-            return;\n-        }\n-\n-        if (exercise == null) {\n-            achievements = achievementRepository.findAllForRewardedTypeInCourse(course.getId(), type);\n-        }\n-        else {\n-            achievements = achievementRepository.findAllForRewardedTypeInExercise(course.getId(), exercise.getId(), type);\n-        }\n-\n-        var optionalAchievement = achievements.stream().filter(a -> a.getRank().equals(rank)).findAny();\n-        if (!optionalAchievement.isPresent()) {\n-            return;\n-        }\n-\n-        achievement = optionalAchievement.get();\n-        if (achievement.getUsers().contains(user)) {\n-            return;\n-        }\n-\n-        var optionalAchievementsOfHigherRank = achievements.stream().filter(a -> a.getRank().ordinal() > rank.ordinal()).collect(Collectors.toSet());\n-        for (Achievement a : optionalAchievementsOfHigherRank) {\n-            if (a.getUsers().contains(user)) {\n-                return;\n-            }\n-        }\n-\n-        var optionalAchievementsOfLowerRank = achievements.stream().filter(a -> a.getRank().ordinal() < rank.ordinal()).collect(Collectors.toSet());\n-        for (Achievement a : optionalAchievementsOfLowerRank) {\n-            if (a.getUsers().contains(user) && a.getExercise() != null) {\n-                user.removeAchievement(a);\n-            }\n-        }\n-\n-        user.addAchievement(achievement);\n-        userRepository.save(user);\n-    }\n-\n-    public void prepareForClient(Set<Achievement> achievements) {\n-        for (Achievement achievement : achievements) {\n-            achievement.setExercise(null);\n-            achievement.setCourse(null);\n-            achievement.setUsers(null);\n-        }\n-    }\n }\n", "next_change": {"commit": "8d5bfc049d9e75323290b069e7343df6fc579ee7", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\nindex eff8b25290f..6668ed36f44 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n", "chunk": "@@ -1,87 +1,161 @@\n package de.tum.in.www1.artemis.service;\n \n-import java.util.List;\n-import java.util.Optional;\n import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import javax.transaction.Transactional;\n \n import org.springframework.stereotype.Service;\n \n+import de.tum.in.www1.artemis.domain.*;\n import de.tum.in.www1.artemis.domain.Achievement;\n import de.tum.in.www1.artemis.domain.Course;\n import de.tum.in.www1.artemis.domain.Exercise;\n import de.tum.in.www1.artemis.domain.User;\n import de.tum.in.www1.artemis.domain.enumeration.AchievementRank;\n+import de.tum.in.www1.artemis.domain.enumeration.AchievementType;\n import de.tum.in.www1.artemis.repository.AchievementRepository;\n import de.tum.in.www1.artemis.repository.UserRepository;\n \n @Service\n public class AchievementService {\n \n+    private final PointBasedAchievementService pointBasedAchievementService;\n+\n+    private final TimeBasedAchievementService timeBasedAchievementService;\n+\n+    private final ProgressBasedAchievementService progressBasedAchievementService;\n+\n+    private final ParticipationService participationService;\n+\n     private final AchievementRepository achievementRepository;\n \n     private final UserRepository userRepository;\n \n-    public AchievementService(AchievementRepository achievementRepository, UserRepository userRepository) {\n+    public AchievementService(AchievementRepository achievementRepository, UserRepository userRepository, PointBasedAchievementService pointBasedAchievementService,\n+            TimeBasedAchievementService timeBasedAchievementService, ProgressBasedAchievementService progressBasedAchievementService, ParticipationService participationService) {\n         this.achievementRepository = achievementRepository;\n+        this.pointBasedAchievementService = pointBasedAchievementService;\n+        this.timeBasedAchievementService = timeBasedAchievementService;\n+        this.progressBasedAchievementService = progressBasedAchievementService;\n         this.userRepository = userRepository;\n+        this.participationService = participationService;\n     }\n \n-    public Optional<Achievement> findById(Long achievementId) {\n-        return achievementRepository.findById(achievementId);\n+    public Set<Achievement> findAllByUserIdAndCourseId(Long userId, Long courseId) {\n+        return achievementRepository.findAllByUserIdAndCourseId(userId, courseId);\n     }\n \n-    public List<Achievement> findAll() {\n-        return achievementRepository.findAll();\n+    @Transactional\n+    public void deleteByCourseId(Long courseId) {\n+        Set<Achievement> achievements = achievementRepository.findAllByCourseId(courseId);\n+        for (Achievement achievement : achievements) {\n+            removeFromUsers(achievement);\n+        }\n+        achievementRepository.deleteAll(achievements);\n     }\n \n-    public Set<Achievement> findAllByCourseId(Long courseId) {\n-        return achievementRepository.findAllByCourseId(courseId);\n+    @Transactional\n+    public void deleteByExerciseId(Long exerciseId) {\n+        Set<Achievement> achievements = achievementRepository.findAllByExerciseId(exerciseId);\n+        for (Achievement achievement : achievements) {\n+            removeFromUsers(achievement);\n+        }\n+        achievementRepository.deleteAll(achievements);\n     }\n \n-    public Set<Achievement> findAllByExerciseId(Long exerciseId) {\n-        return achievementRepository.findAllByExerciseId(exerciseId);\n+    /**\n+     * Removes an achievement from all users\n+     * @param achievement achievement to be deleted\n+     */\n+    public void removeFromUsers(Achievement achievement) {\n+        var users = achievement.getUsers();\n+        for (User user : users) {\n+            user.removeAchievement(achievement);\n+        }\n+        userRepository.saveAll(users);\n     }\n \n-    public Set<Achievement> findAllByUserId(Long userId) {\n-        return achievementRepository.findAllByUserId(userId);\n+    public void generateForCourse(Course course) {\n+        progressBasedAchievementService.generateAchievements(course);\n     }\n \n-    public Achievement save(Achievement achievement) {\n-        return achievementRepository.save(achievement);\n+    public void generateForExercise(Exercise exercise) {\n+        pointBasedAchievementService.generateAchievements(exercise);\n+        timeBasedAchievementService.generateAchievements(exercise);\n     }\n \n-    /**\n-     * Creates an achievement and persist it\n-     * @param title title of the achievement\n-     * @param description description of the achievement\n-     * @param icon the font awesome icon string identifier\n-     * @param rank rank of the achievement\n-     * @param course course which the achievement belongs to\n-     * @param exercise which the achievement belongs to\n-     * @return the created and persisted achievement\n-     */\n-    public Achievement create(String title, String description, String icon, AchievementRank rank, Course course, Exercise exercise) {\n-        Achievement achievement = new Achievement();\n-        achievement.setTitle(title);\n-        achievement.setDescription(description);\n-        achievement.setIcon(icon);\n-        achievement.setRank(rank);\n-        achievement.setCourse(course);\n-        achievement.setExercise(exercise);\n-        return achievementRepository.save(achievement);\n+    @Transactional\n+    public void checkForAchievements(Result result) {\n+        var course = result.getParticipation().getExercise().getCourseViaExerciseGroupOrCourseMember();\n+        if (course.getHasAchievements() == null || !course.getHasAchievements()) {\n+            return;\n+        }\n+        var exercise = result.getParticipation().getExercise();\n+        var optionalUser = participationService.findOneStudentParticipation(result.getParticipation().getId()).getStudent();\n+        if (!optionalUser.isPresent()) {\n+            return;\n+        }\n+        var user = optionalUser.get();\n+\n+        var pointRank = pointBasedAchievementService.checkForAchievement(result);\n+        rewardAchievement(course, exercise, AchievementType.POINT, pointRank, user);\n+\n+        var timeRank = timeBasedAchievementService.checkForAchievement(result);\n+        rewardAchievement(course, exercise, AchievementType.TIME, timeRank, user);\n+\n+        var progressRank = progressBasedAchievementService.checkForAchievement(course, user);\n+        rewardAchievement(course, exercise, AchievementType.PROGRESS, progressRank, user);\n     }\n \n-    /**\n-     * Deletes an achievement by also removing it from all users\n-     * @param achievement achievement to be deleted\n-     */\n-    public void delete(Achievement achievement) {\n-        var users = userRepository.findAllByAchievementId(achievement.getId());\n-        achievement.setUsers(users);\n-        for (User user : users) {\n-            user.removeAchievement(achievement);\n-            userRepository.save(user);\n+    public void rewardAchievement(Course course, Exercise exercise, AchievementType type, AchievementRank rank, User user) {\n+        Set<Achievement> achievements;\n+        Achievement achievement;\n+\n+        if (rank == null) {\n+            return;\n+        }\n+\n+        if (exercise == null) {\n+            achievements = achievementRepository.findAllForRewardedTypeInCourse(course.getId(), type);\n+        }\n+        else {\n+            achievements = achievementRepository.findAllForRewardedTypeInExercise(course.getId(), exercise.getId(), type);\n+        }\n+\n+        var optionalAchievement = achievements.stream().filter(a -> a.getRank().equals(rank)).findAny();\n+        if (!optionalAchievement.isPresent()) {\n+            return;\n+        }\n+\n+        achievement = optionalAchievement.get();\n+        if (achievement.getUsers().contains(user)) {\n+            return;\n+        }\n+\n+        var optionalAchievementsOfHigherRank = achievements.stream().filter(a -> a.getRank().ordinal() > rank.ordinal()).collect(Collectors.toSet());\n+        for (Achievement a : optionalAchievementsOfHigherRank) {\n+            if (a.getUsers().contains(user)) {\n+                return;\n+            }\n+        }\n+\n+        var optionalAchievementsOfLowerRank = achievements.stream().filter(a -> a.getRank().ordinal() < rank.ordinal()).collect(Collectors.toSet());\n+        for (Achievement a : optionalAchievementsOfLowerRank) {\n+            if (a.getUsers().contains(user) && a.getExercise() != null) {\n+                user.removeAchievement(a);\n+            }\n+        }\n+\n+        user.addAchievement(achievement);\n+        userRepository.save(user);\n+    }\n+\n+    public void prepareForClient(Set<Achievement> achievements) {\n+        for (Achievement achievement : achievements) {\n+            achievement.setExercise(null);\n+            achievement.setCourse(null);\n+            achievement.setUsers(null);\n         }\n-        achievementRepository.delete(achievement);\n     }\n }\n", "next_change": {"commit": "7a5de1a37353eb19f93ef49666bba352198834cb", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\nindex 6668ed36f44..eff8b25290f 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n", "chunk": "@@ -1,161 +1,87 @@\n package de.tum.in.www1.artemis.service;\n \n+import java.util.List;\n+import java.util.Optional;\n import java.util.Set;\n-import java.util.stream.Collectors;\n-\n-import javax.transaction.Transactional;\n \n import org.springframework.stereotype.Service;\n \n-import de.tum.in.www1.artemis.domain.*;\n import de.tum.in.www1.artemis.domain.Achievement;\n import de.tum.in.www1.artemis.domain.Course;\n import de.tum.in.www1.artemis.domain.Exercise;\n import de.tum.in.www1.artemis.domain.User;\n import de.tum.in.www1.artemis.domain.enumeration.AchievementRank;\n-import de.tum.in.www1.artemis.domain.enumeration.AchievementType;\n import de.tum.in.www1.artemis.repository.AchievementRepository;\n import de.tum.in.www1.artemis.repository.UserRepository;\n \n @Service\n public class AchievementService {\n \n-    private final PointBasedAchievementService pointBasedAchievementService;\n-\n-    private final TimeBasedAchievementService timeBasedAchievementService;\n-\n-    private final ProgressBasedAchievementService progressBasedAchievementService;\n-\n-    private final ParticipationService participationService;\n-\n     private final AchievementRepository achievementRepository;\n \n     private final UserRepository userRepository;\n \n-    public AchievementService(AchievementRepository achievementRepository, UserRepository userRepository, PointBasedAchievementService pointBasedAchievementService,\n-            TimeBasedAchievementService timeBasedAchievementService, ProgressBasedAchievementService progressBasedAchievementService, ParticipationService participationService) {\n+    public AchievementService(AchievementRepository achievementRepository, UserRepository userRepository) {\n         this.achievementRepository = achievementRepository;\n-        this.pointBasedAchievementService = pointBasedAchievementService;\n-        this.timeBasedAchievementService = timeBasedAchievementService;\n-        this.progressBasedAchievementService = progressBasedAchievementService;\n         this.userRepository = userRepository;\n-        this.participationService = participationService;\n     }\n \n-    public Set<Achievement> findAllByUserIdAndCourseId(Long userId, Long courseId) {\n-        return achievementRepository.findAllByUserIdAndCourseId(userId, courseId);\n+    public Optional<Achievement> findById(Long achievementId) {\n+        return achievementRepository.findById(achievementId);\n     }\n \n-    @Transactional\n-    public void deleteByCourseId(Long courseId) {\n-        Set<Achievement> achievements = achievementRepository.findAllByCourseId(courseId);\n-        for (Achievement achievement : achievements) {\n-            removeFromUsers(achievement);\n-        }\n-        achievementRepository.deleteAll(achievements);\n+    public List<Achievement> findAll() {\n+        return achievementRepository.findAll();\n     }\n \n-    @Transactional\n-    public void deleteByExerciseId(Long exerciseId) {\n-        Set<Achievement> achievements = achievementRepository.findAllByExerciseId(exerciseId);\n-        for (Achievement achievement : achievements) {\n-            removeFromUsers(achievement);\n-        }\n-        achievementRepository.deleteAll(achievements);\n+    public Set<Achievement> findAllByCourseId(Long courseId) {\n+        return achievementRepository.findAllByCourseId(courseId);\n     }\n \n-    /**\n-     * Removes an achievement from all users\n-     * @param achievement achievement to be deleted\n-     */\n-    public void removeFromUsers(Achievement achievement) {\n-        var users = achievement.getUsers();\n-        for (User user : users) {\n-            user.removeAchievement(achievement);\n-        }\n-        userRepository.saveAll(users);\n+    public Set<Achievement> findAllByExerciseId(Long exerciseId) {\n+        return achievementRepository.findAllByExerciseId(exerciseId);\n     }\n \n-    public void generateForCourse(Course course) {\n-        progressBasedAchievementService.generateAchievements(course);\n+    public Set<Achievement> findAllByUserId(Long userId) {\n+        return achievementRepository.findAllByUserId(userId);\n     }\n \n-    public void generateForExercise(Exercise exercise) {\n-        pointBasedAchievementService.generateAchievements(exercise);\n-        timeBasedAchievementService.generateAchievements(exercise);\n-    }\n-\n-    @Transactional\n-    public void checkForAchievements(Result result) {\n-        var course = result.getParticipation().getExercise().getCourseViaExerciseGroupOrCourseMember();\n-        if (course.getHasAchievements() == null || !course.getHasAchievements()) {\n-            return;\n-        }\n-        var exercise = result.getParticipation().getExercise();\n-        var optionalUser = participationService.findOneStudentParticipation(result.getParticipation().getId()).getStudent();\n-        if (!optionalUser.isPresent()) {\n-            return;\n-        }\n-        var user = optionalUser.get();\n-\n-        var pointRank = pointBasedAchievementService.checkForAchievement(result);\n-        rewardAchievement(course, exercise, AchievementType.POINT, pointRank, user);\n-\n-        var timeRank = timeBasedAchievementService.checkForAchievement(result);\n-        rewardAchievement(course, exercise, AchievementType.TIME, timeRank, user);\n-\n-        var progressRank = progressBasedAchievementService.checkForAchievement(course, user);\n-        rewardAchievement(course, exercise, AchievementType.PROGRESS, progressRank, user);\n+    public Achievement save(Achievement achievement) {\n+        return achievementRepository.save(achievement);\n     }\n \n-    public void rewardAchievement(Course course, Exercise exercise, AchievementType type, AchievementRank rank, User user) {\n-        Set<Achievement> achievements;\n-        Achievement achievement;\n-\n-        if (rank == null) {\n-            return;\n-        }\n-\n-        if (exercise == null) {\n-            achievements = achievementRepository.findAllForRewardedTypeInCourse(course.getId(), type);\n-        }\n-        else {\n-            achievements = achievementRepository.findAllForRewardedTypeInExercise(course.getId(), exercise.getId(), type);\n-        }\n-\n-        var optionalAchievement = achievements.stream().filter(a -> a.getRank().equals(rank)).findAny();\n-        if (!optionalAchievement.isPresent()) {\n-            return;\n-        }\n-\n-        achievement = optionalAchievement.get();\n-        if (achievement.getUsers().contains(user)) {\n-            return;\n-        }\n-\n-        var optionalAchievementsOfHigherRank = achievements.stream().filter(a -> a.getRank().ordinal() > rank.ordinal()).collect(Collectors.toSet());\n-        for (Achievement a : optionalAchievementsOfHigherRank) {\n-            if (a.getUsers().contains(user)) {\n-                return;\n-            }\n-        }\n-\n-        var optionalAchievementsOfLowerRank = achievements.stream().filter(a -> a.getRank().ordinal() < rank.ordinal()).collect(Collectors.toSet());\n-        for (Achievement a : optionalAchievementsOfLowerRank) {\n-            if (a.getUsers().contains(user) && a.getExercise() != null) {\n-                user.removeAchievement(a);\n-            }\n-        }\n-\n-        user.addAchievement(achievement);\n-        userRepository.save(user);\n+    /**\n+     * Creates an achievement and persist it\n+     * @param title title of the achievement\n+     * @param description description of the achievement\n+     * @param icon the font awesome icon string identifier\n+     * @param rank rank of the achievement\n+     * @param course course which the achievement belongs to\n+     * @param exercise which the achievement belongs to\n+     * @return the created and persisted achievement\n+     */\n+    public Achievement create(String title, String description, String icon, AchievementRank rank, Course course, Exercise exercise) {\n+        Achievement achievement = new Achievement();\n+        achievement.setTitle(title);\n+        achievement.setDescription(description);\n+        achievement.setIcon(icon);\n+        achievement.setRank(rank);\n+        achievement.setCourse(course);\n+        achievement.setExercise(exercise);\n+        return achievementRepository.save(achievement);\n     }\n \n-    public void prepareForClient(Set<Achievement> achievements) {\n-        for (Achievement achievement : achievements) {\n-            achievement.setExercise(null);\n-            achievement.setCourse(null);\n-            achievement.setUsers(null);\n+    /**\n+     * Deletes an achievement by also removing it from all users\n+     * @param achievement achievement to be deleted\n+     */\n+    public void delete(Achievement achievement) {\n+        var users = userRepository.findAllByAchievementId(achievement.getId());\n+        achievement.setUsers(users);\n+        for (User user : users) {\n+            user.removeAchievement(achievement);\n+            userRepository.save(user);\n         }\n+        achievementRepository.delete(achievement);\n     }\n }\n", "next_change": {"commit": "116151629d403403ee9b750c30c182f44f70e233", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\nindex eff8b25290f..30708f42a32 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n", "chunk": "@@ -1,87 +1,117 @@\n package de.tum.in.www1.artemis.service;\n \n-import java.util.List;\n-import java.util.Optional;\n import java.util.Set;\n \n+import javax.transaction.Transactional;\n+\n import org.springframework.stereotype.Service;\n \n import de.tum.in.www1.artemis.domain.Achievement;\n import de.tum.in.www1.artemis.domain.Course;\n import de.tum.in.www1.artemis.domain.Exercise;\n import de.tum.in.www1.artemis.domain.User;\n-import de.tum.in.www1.artemis.domain.enumeration.AchievementRank;\n import de.tum.in.www1.artemis.repository.AchievementRepository;\n import de.tum.in.www1.artemis.repository.UserRepository;\n \n @Service\n public class AchievementService {\n \n+    private final PointBasedAchievementService pointBasedAchievementService;\n+\n+    private final TimeBasedAchievementService timeBasedAchievementService;\n+\n+    private final ProgressBasedAchievementService progressBasedAchievementService;\n+\n     private final AchievementRepository achievementRepository;\n \n     private final UserRepository userRepository;\n \n-    public AchievementService(AchievementRepository achievementRepository, UserRepository userRepository) {\n+    public AchievementService(AchievementRepository achievementRepository, UserRepository userRepository, PointBasedAchievementService pointBasedAchievementService,\n+            TimeBasedAchievementService timeBasedAchievementService, ProgressBasedAchievementService progressBasedAchievementService) {\n         this.achievementRepository = achievementRepository;\n+        this.pointBasedAchievementService = pointBasedAchievementService;\n+        this.timeBasedAchievementService = timeBasedAchievementService;\n+        this.progressBasedAchievementService = progressBasedAchievementService;\n         this.userRepository = userRepository;\n     }\n \n-    public Optional<Achievement> findById(Long achievementId) {\n-        return achievementRepository.findById(achievementId);\n-    }\n-\n-    public List<Achievement> findAll() {\n-        return achievementRepository.findAll();\n+    /**\n+     * Finds all achievements for a user in a given course and returns them as a set\n+     * @param userId\n+     * @param courseId\n+     */\n+    public Set<Achievement> findAllByUserIdAndCourseId(Long userId, Long courseId) {\n+        return achievementRepository.findAllByUserIdAndCourseId(userId, courseId);\n     }\n \n-    public Set<Achievement> findAllByCourseId(Long courseId) {\n-        return achievementRepository.findAllByCourseId(courseId);\n+    /**\n+     * Deletes all achievements that belong to the course with the given courseId\n+     * Used when a course is deleted or when achievements are disabled again for a course\n+     * @param courseId\n+     */\n+    @Transactional\n+    public void deleteByCourseId(Long courseId) {\n+        Set<Achievement> achievements = achievementRepository.findAllByCourseId(courseId);\n+        for (Achievement achievement : achievements) {\n+            removeFromUsers(achievement);\n+        }\n+        achievementRepository.deleteAll(achievements);\n     }\n \n-    public Set<Achievement> findAllByExerciseId(Long exerciseId) {\n-        return achievementRepository.findAllByExerciseId(exerciseId);\n+    /**\n+     * Deletes all achievements that belong to the exercise with the given exerciseId\n+     * Used when an exercise is deleted\n+     * @param exerciseId\n+     */\n+    @Transactional\n+    public void deleteByExerciseId(Long exerciseId) {\n+        Set<Achievement> achievements = achievementRepository.findAllByExerciseId(exerciseId);\n+        for (Achievement achievement : achievements) {\n+            removeFromUsers(achievement);\n+        }\n+        achievementRepository.deleteAll(achievements);\n     }\n \n-    public Set<Achievement> findAllByUserId(Long userId) {\n-        return achievementRepository.findAllByUserId(userId);\n+    /**\n+     * Removes an achievement from all users\n+     * @param achievement achievement to be deleted\n+     */\n+    public void removeFromUsers(Achievement achievement) {\n+        var users = achievement.getUsers();\n+        for (User user : users) {\n+            user.removeAchievement(achievement);\n+        }\n+        userRepository.saveAll(users);\n     }\n \n-    public Achievement save(Achievement achievement) {\n-        return achievementRepository.save(achievement);\n+    /**\n+     * Generates achievements for a course\n+     * Used when course is updated or created and achievements are enabled for course\n+     * @param course\n+     */\n+    public void generateForCourse(Course course) {\n+        progressBasedAchievementService.generateAchievements(course);\n     }\n \n     /**\n-     * Creates an achievement and persist it\n-     * @param title title of the achievement\n-     * @param description description of the achievement\n-     * @param icon the font awesome icon string identifier\n-     * @param rank rank of the achievement\n-     * @param course course which the achievement belongs to\n-     * @param exercise which the achievement belongs to\n-     * @return the created and persisted achievement\n+     * Generates achievements for an exercise\n+     * Used when exercise is created and achievements are enabled for corresponding course\n+     * @param exercise\n      */\n-    public Achievement create(String title, String description, String icon, AchievementRank rank, Course course, Exercise exercise) {\n-        Achievement achievement = new Achievement();\n-        achievement.setTitle(title);\n-        achievement.setDescription(description);\n-        achievement.setIcon(icon);\n-        achievement.setRank(rank);\n-        achievement.setCourse(course);\n-        achievement.setExercise(exercise);\n-        return achievementRepository.save(achievement);\n+    public void generateForExercise(Exercise exercise) {\n+        pointBasedAchievementService.generateAchievements(exercise);\n+        timeBasedAchievementService.generateAchievements(exercise);\n     }\n \n     /**\n-     * Deletes an achievement by also removing it from all users\n-     * @param achievement achievement to be deleted\n+     * Prepares the given set of achievements to be sent to the client by removing exercise, course and users\n+     * @param achievements\n      */\n-    public void delete(Achievement achievement) {\n-        var users = userRepository.findAllByAchievementId(achievement.getId());\n-        achievement.setUsers(users);\n-        for (User user : users) {\n-            user.removeAchievement(achievement);\n-            userRepository.save(user);\n+    public void prepareForClient(Set<Achievement> achievements) {\n+        for (Achievement achievement : achievements) {\n+            achievement.setExercise(null);\n+            achievement.setCourse(null);\n+            achievement.setUsers(null);\n         }\n-        achievementRepository.delete(achievement);\n     }\n }\n", "next_change": {"commit": "07837b56882d0df7027dd1422c761e34f89147f1", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\nindex 30708f42a32..4635dbaba17 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n", "chunk": "@@ -16,102 +14,43 @@ import de.tum.in.www1.artemis.repository.UserRepository;\n @Service\n public class AchievementService {\n \n-    private final PointBasedAchievementService pointBasedAchievementService;\n-\n-    private final TimeBasedAchievementService timeBasedAchievementService;\n-\n-    private final ProgressBasedAchievementService progressBasedAchievementService;\n-\n     private final AchievementRepository achievementRepository;\n \n     private final UserRepository userRepository;\n \n-    public AchievementService(AchievementRepository achievementRepository, UserRepository userRepository, PointBasedAchievementService pointBasedAchievementService,\n-            TimeBasedAchievementService timeBasedAchievementService, ProgressBasedAchievementService progressBasedAchievementService) {\n+    public AchievementService(AchievementRepository achievementRepository, UserRepository userRepository) {\n         this.achievementRepository = achievementRepository;\n-        this.pointBasedAchievementService = pointBasedAchievementService;\n-        this.timeBasedAchievementService = timeBasedAchievementService;\n-        this.progressBasedAchievementService = progressBasedAchievementService;\n         this.userRepository = userRepository;\n     }\n \n-    /**\n-     * Finds all achievements for a user in a given course and returns them as a set\n-     * @param userId\n-     * @param courseId\n-     */\n-    public Set<Achievement> findAllByUserIdAndCourseId(Long userId, Long courseId) {\n-        return achievementRepository.findAllByUserIdAndCourseId(userId, courseId);\n+    public Optional<Achievement> findById(Long achievementId) {\n+        return achievementRepository.findById(achievementId);\n     }\n \n-    /**\n-     * Deletes all achievements that belong to the course with the given courseId\n-     * Used when a course is deleted or when achievements are disabled again for a course\n-     * @param courseId\n-     */\n     @Transactional\n-    public void deleteByCourseId(Long courseId) {\n-        Set<Achievement> achievements = achievementRepository.findAllByCourseId(courseId);\n-        for (Achievement achievement : achievements) {\n-            removeFromUsers(achievement);\n-        }\n-        achievementRepository.deleteAll(achievements);\n+    public Set<Achievement> findAllForCourse(Long courseId, Long userId) {\n+        var achievements = achievementRepository.getAllByCourseId(courseId);\n+        return hideUsersInAchievements(achievements, userId);\n     }\n \n-    /**\n-     * Deletes all achievements that belong to the exercise with the given exerciseId\n-     * Used when an exercise is deleted\n-     * @param exerciseId\n-     */\n     @Transactional\n-    public void deleteByExerciseId(Long exerciseId) {\n-        Set<Achievement> achievements = achievementRepository.findAllByExerciseId(exerciseId);\n-        for (Achievement achievement : achievements) {\n-            removeFromUsers(achievement);\n-        }\n-        achievementRepository.deleteAll(achievements);\n+    public Set<Achievement> findAllForUser(Long userId) {\n+        var achievements = achievementRepository.getAllByUserId(userId);\n+        return hideUsersInAchievements(achievements, userId);\n     }\n \n-    /**\n-     * Removes an achievement from all users\n-     * @param achievement achievement to be deleted\n-     */\n-    public void removeFromUsers(Achievement achievement) {\n-        var users = achievement.getUsers();\n-        for (User user : users) {\n+    public void delete(Achievement achievement) {\n+        for (User user : achievement.getUsers()) {\n             user.removeAchievement(achievement);\n+            userRepository.save(user);\n         }\n-        userRepository.saveAll(users);\n-    }\n-\n-    /**\n-     * Generates achievements for a course\n-     * Used when course is updated or created and achievements are enabled for course\n-     * @param course\n-     */\n-    public void generateForCourse(Course course) {\n-        progressBasedAchievementService.generateAchievements(course);\n-    }\n-\n-    /**\n-     * Generates achievements for an exercise\n-     * Used when exercise is created and achievements are enabled for corresponding course\n-     * @param exercise\n-     */\n-    public void generateForExercise(Exercise exercise) {\n-        pointBasedAchievementService.generateAchievements(exercise);\n-        timeBasedAchievementService.generateAchievements(exercise);\n+        achievementRepository.delete(achievement);\n     }\n \n-    /**\n-     * Prepares the given set of achievements to be sent to the client by removing exercise, course and users\n-     * @param achievements\n-     */\n-    public void prepareForClient(Set<Achievement> achievements) {\n+    private Set<Achievement> hideUsersInAchievements(Set<Achievement> achievements, Long userId) {\n         for (Achievement achievement : achievements) {\n-            achievement.setExercise(null);\n-            achievement.setCourse(null);\n-            achievement.setUsers(null);\n+            achievement.getUsers().removeIf(userToRemove -> !userToRemove.getId().equals(userId));\n         }\n+        return achievements;\n     }\n }\n", "next_change": {"commit": "f0bc01d15b7e677a36aa71c0319f71bb6ed7a885", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\nindex 4635dbaba17..06905809bef 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n", "chunk": "@@ -46,11 +41,4 @@ public class AchievementService {\n         }\n         achievementRepository.delete(achievement);\n     }\n-\n-    private Set<Achievement> hideUsersInAchievements(Set<Achievement> achievements, Long userId) {\n-        for (Achievement achievement : achievements) {\n-            achievement.getUsers().removeIf(userToRemove -> !userToRemove.getId().equals(userId));\n-        }\n-        return achievements;\n-    }\n }\n", "next_change": {"commit": "fd13e3d27e731c1b8d1a2dea0e1c43ae2468034b", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\nindex 06905809bef..adc27ea88a9 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n", "chunk": "@@ -26,16 +29,44 @@ public class AchievementService {\n         return achievementRepository.findById(achievementId);\n     }\n \n-    public Set<Achievement> findAllForCourse(Long courseId) {\n-        return achievementRepository.getAllByCourseId(courseId);\n+    public List<Achievement> findAll() {\n+        return achievementRepository.findAll();\n     }\n \n-    public Set<Achievement> findAllForUser(Long userId) {\n-        return achievementRepository.getAllByUserId(userId);\n+    public Set<Achievement> findAllByCourseId(Long courseId) {\n+        return achievementRepository.findAllByCourseId(courseId);\n     }\n \n+    public Set<Achievement> findAllByExerciseId(Long exerciseId) {\n+        return achievementRepository.findAllByExerciseId(exerciseId);\n+    }\n+\n+    public Set<Achievement> findAllByUserId(Long userId) {\n+        return achievementRepository.findAllByUserId(userId);\n+    }\n+\n+    public Achievement save(Achievement achievement) {\n+        return achievementRepository.save(achievement);\n+    }\n+\n+    public Achievement create(String title, String description, String icon, Rank rank, Course course) {\n+        Achievement achievement = new Achievement();\n+        achievement.setTitle(title);\n+        achievement.setDescription(description);\n+        achievement.setIcon(icon);\n+        achievement.setRank(rank);\n+        achievement.setCourse(course);\n+        return achievementRepository.save(achievement);\n+    }\n+\n+    /**\n+     * Deletes an achievement by also removing it from all users\n+     * @param achievement achievement to be deleted\n+     */\n     public void delete(Achievement achievement) {\n-        for (User user : achievement.getUsers()) {\n+        var users = userRepository.findAllWithEagerAchievements(achievement.getId());\n+        achievement.setUsers(users);\n+        for (User user : users) {\n             user.removeAchievement(achievement);\n             userRepository.save(user);\n         }\n", "next_change": {"commit": "e71c08bfb8259e519230dcb95a44996794c4e79e", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\nindex adc27ea88a9..2440806b0f3 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n", "chunk": "@@ -64,7 +64,7 @@ public class AchievementService {\n      * @param achievement achievement to be deleted\n      */\n     public void delete(Achievement achievement) {\n-        var users = userRepository.findAllWithEagerAchievements(achievement.getId());\n+        var users = userRepository.findAllByAchievementId(achievement.getId());\n         achievement.setUsers(users);\n         for (User user : users) {\n             user.removeAchievement(achievement);\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgxMTY5Mg==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r479811692", "body": "I think you can leave out the `@Transactional` above when you persist here the achievements into the database.", "bodyText": "I think you can leave out the @Transactional above when you persist here the achievements into the database.", "bodyHTML": "<p dir=\"auto\">I think you can leave out the <code>@Transactional</code> above when you persist here the achievements into the database.</p>", "author": "fde312", "createdAt": "2020-08-30T20:22:55Z", "path": "src/main/java/de/tum/in/www1/artemis/service/AchievementService.java", "diffHunk": "@@ -0,0 +1,56 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import de.tum.in.www1.artemis.domain.Achievement;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.repository.AchievementRepository;\n+import de.tum.in.www1.artemis.repository.UserRepository;\n+\n+@Service\n+public class AchievementService {\n+\n+    private final AchievementRepository achievementRepository;\n+\n+    private final UserRepository userRepository;\n+\n+    public AchievementService(AchievementRepository achievementRepository, UserRepository userRepository) {\n+        this.achievementRepository = achievementRepository;\n+        this.userRepository = userRepository;\n+    }\n+\n+    public Optional<Achievement> findById(Long achievementId) {\n+        return achievementRepository.findById(achievementId);\n+    }\n+\n+    @Transactional\n+    public Set<Achievement> findAllForCourse(Long courseId, Long userId) {\n+        var achievements = achievementRepository.getAllByCourseId(courseId);\n+        return hideUsersInAchievements(achievements, userId);\n+    }\n+\n+    @Transactional\n+    public Set<Achievement> findAllForUser(Long userId) {\n+        var achievements = achievementRepository.getAllByUserId(userId);\n+        return hideUsersInAchievements(achievements, userId);\n+    }\n+\n+    public void delete(Achievement achievement) {\n+        for (User user : achievement.getUsers()) {\n+            user.removeAchievement(achievement);\n+            userRepository.save(user);\n+        }\n+        achievementRepository.delete(achievement);\n+    }\n+\n+    private Set<Achievement> hideUsersInAchievements(Set<Achievement> achievements, Long userId) {\n+        for (Achievement achievement : achievements) {\n+            achievement.getUsers().removeIf(userToRemove -> !userToRemove.getId().equals(userId));\n+        }\n+        return achievements;", "originalCommit": "497e3316832c66677399172c3bc6bd223073c1b2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgxMzU3MQ==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r479813571", "bodyText": "I don\u00b4t want to persist them here, since I just removed all the users (besides the requesting one) from the achievements. This is for data protection purposes only before sending the data to the client. I don\u00b4t want to actually delete those achievements for all other users. \ud83d\ude04", "author": "balazs-czopf", "createdAt": "2020-08-30T20:44:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgxMTY5Mg=="}], "type": "inlineReview", "revised_code": {"commit": "6aa68b0ab7a071fa631c7c72cdb8ea02ccf15a39", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\nindex 4635dbaba17..d89d918c0e2 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n", "chunk": "@@ -27,30 +29,55 @@ public class AchievementService {\n         return achievementRepository.findById(achievementId);\n     }\n \n-    @Transactional\n-    public Set<Achievement> findAllForCourse(Long courseId, Long userId) {\n-        var achievements = achievementRepository.getAllByCourseId(courseId);\n-        return hideUsersInAchievements(achievements, userId);\n+    public List<Achievement> findAll() {\n+        return achievementRepository.findAll();\n     }\n \n-    @Transactional\n-    public Set<Achievement> findAllForUser(Long userId) {\n-        var achievements = achievementRepository.getAllByUserId(userId);\n-        return hideUsersInAchievements(achievements, userId);\n+    public Set<Achievement> findAllByCourseId(Long courseId) {\n+        return achievementRepository.findAllByCourseId(courseId);\n     }\n \n+    public Set<Achievement> findAllByExerciseId(Long exerciseId) {\n+        return achievementRepository.findAllByExerciseId(exerciseId);\n+    }\n+\n+    public Set<Achievement> findAllByUserId(Long userId) {\n+        return achievementRepository.findAllByUserId(userId);\n+    }\n+\n+    public Achievement save(Achievement achievement) {\n+        return achievementRepository.save(achievement);\n+    }\n+\n+    /**\n+     * Creates an achievement and persist it\n+     * @param title title of the achievement\n+     * @param description description of the achievement\n+     * @param icon the font awesome icon string identifier\n+     * @param rank rank of the achievement\n+     * @param course course which the achievement belongs to\n+     */\n+    public Achievement create(String title, String description, String icon, AchievementRank rank, Course course) {\n+        Achievement achievement = new Achievement();\n+        achievement.setTitle(title);\n+        achievement.setDescription(description);\n+        achievement.setIcon(icon);\n+        achievement.setRank(rank);\n+        achievement.setCourse(course);\n+        return achievementRepository.save(achievement);\n+    }\n+\n+    /**\n+     * Deletes an achievement by also removing it from all users\n+     * @param achievement achievement to be deleted\n+     */\n     public void delete(Achievement achievement) {\n-        for (User user : achievement.getUsers()) {\n+        var users = userRepository.findAllByAchievementId(achievement.getId());\n+        achievement.setUsers(users);\n+        for (User user : users) {\n             user.removeAchievement(achievement);\n             userRepository.save(user);\n         }\n         achievementRepository.delete(achievement);\n     }\n-\n-    private Set<Achievement> hideUsersInAchievements(Set<Achievement> achievements, Long userId) {\n-        for (Achievement achievement : achievements) {\n-            achievement.getUsers().removeIf(userToRemove -> !userToRemove.getId().equals(userId));\n-        }\n-        return achievements;\n-    }\n }\n", "next_change": {"commit": "b55d823034cdd1c7d78f81b2656deb0463a57163", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\nindex d89d918c0e2..1954a518ca6 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n", "chunk": "@@ -80,4 +89,35 @@ public class AchievementService {\n         }\n         achievementRepository.delete(achievement);\n     }\n+\n+    // @Transactional\n+    public void assignPointBasedAchievementIfEarned(Result result) {\n+        var score = result.getScore();\n+        // TODO: add actually required score for achievements\n+        var gold = 0.9;\n+        var silver = 0.8;\n+        var bronze = 0.7;\n+\n+        // TODO: get respective achievement\n+        var achievement = new Achievement();\n+\n+        var optionalUser = participationService.findOneStudentParticipation(result.getParticipation().getId()).getStudent();\n+\n+        if (optionalUser.isPresent()) {\n+            var user = optionalUser.get();\n+\n+            if (score >= gold && !user.getAchievements().contains(achievement)) {\n+                user.addAchievement(achievement);\n+                userRepository.save(user);\n+            }\n+            else if (score >= silver && !user.getAchievements().contains(achievement)) {\n+                user.addAchievement(achievement);\n+                userRepository.save(user);\n+            }\n+            else if (score >= bronze && !user.getAchievements().contains(achievement)) {\n+                user.addAchievement(achievement);\n+                userRepository.save(user);\n+            }\n+        }\n+    }\n }\n", "next_change": {"commit": "865d4c8c0b2383053a0206e3f554ad5ddd33ed22", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\nindex 1954a518ca6..eff8b25290f 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n", "chunk": "@@ -89,35 +84,4 @@ public class AchievementService {\n         }\n         achievementRepository.delete(achievement);\n     }\n-\n-    // @Transactional\n-    public void assignPointBasedAchievementIfEarned(Result result) {\n-        var score = result.getScore();\n-        // TODO: add actually required score for achievements\n-        var gold = 0.9;\n-        var silver = 0.8;\n-        var bronze = 0.7;\n-\n-        // TODO: get respective achievement\n-        var achievement = new Achievement();\n-\n-        var optionalUser = participationService.findOneStudentParticipation(result.getParticipation().getId()).getStudent();\n-\n-        if (optionalUser.isPresent()) {\n-            var user = optionalUser.get();\n-\n-            if (score >= gold && !user.getAchievements().contains(achievement)) {\n-                user.addAchievement(achievement);\n-                userRepository.save(user);\n-            }\n-            else if (score >= silver && !user.getAchievements().contains(achievement)) {\n-                user.addAchievement(achievement);\n-                userRepository.save(user);\n-            }\n-            else if (score >= bronze && !user.getAchievements().contains(achievement)) {\n-                user.addAchievement(achievement);\n-                userRepository.save(user);\n-            }\n-        }\n-    }\n }\n", "next_change": {"commit": "72ed71a2a7717d3b129f6365d24db139ca9ffdf8", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\nindex eff8b25290f..1954a518ca6 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n", "chunk": "@@ -84,4 +89,35 @@ public class AchievementService {\n         }\n         achievementRepository.delete(achievement);\n     }\n+\n+    // @Transactional\n+    public void assignPointBasedAchievementIfEarned(Result result) {\n+        var score = result.getScore();\n+        // TODO: add actually required score for achievements\n+        var gold = 0.9;\n+        var silver = 0.8;\n+        var bronze = 0.7;\n+\n+        // TODO: get respective achievement\n+        var achievement = new Achievement();\n+\n+        var optionalUser = participationService.findOneStudentParticipation(result.getParticipation().getId()).getStudent();\n+\n+        if (optionalUser.isPresent()) {\n+            var user = optionalUser.get();\n+\n+            if (score >= gold && !user.getAchievements().contains(achievement)) {\n+                user.addAchievement(achievement);\n+                userRepository.save(user);\n+            }\n+            else if (score >= silver && !user.getAchievements().contains(achievement)) {\n+                user.addAchievement(achievement);\n+                userRepository.save(user);\n+            }\n+            else if (score >= bronze && !user.getAchievements().contains(achievement)) {\n+                user.addAchievement(achievement);\n+                userRepository.save(user);\n+            }\n+        }\n+    }\n }\n", "next_change": {"commit": "2880feed09fc2090a643646854d2f6a5d2a67e8f", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\nindex 1954a518ca6..eff8b25290f 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n", "chunk": "@@ -89,35 +84,4 @@ public class AchievementService {\n         }\n         achievementRepository.delete(achievement);\n     }\n-\n-    // @Transactional\n-    public void assignPointBasedAchievementIfEarned(Result result) {\n-        var score = result.getScore();\n-        // TODO: add actually required score for achievements\n-        var gold = 0.9;\n-        var silver = 0.8;\n-        var bronze = 0.7;\n-\n-        // TODO: get respective achievement\n-        var achievement = new Achievement();\n-\n-        var optionalUser = participationService.findOneStudentParticipation(result.getParticipation().getId()).getStudent();\n-\n-        if (optionalUser.isPresent()) {\n-            var user = optionalUser.get();\n-\n-            if (score >= gold && !user.getAchievements().contains(achievement)) {\n-                user.addAchievement(achievement);\n-                userRepository.save(user);\n-            }\n-            else if (score >= silver && !user.getAchievements().contains(achievement)) {\n-                user.addAchievement(achievement);\n-                userRepository.save(user);\n-            }\n-            else if (score >= bronze && !user.getAchievements().contains(achievement)) {\n-                user.addAchievement(achievement);\n-                userRepository.save(user);\n-            }\n-        }\n-    }\n }\n", "next_change": {"commit": "f9aef805a8b7948a9d5cd14781203108636a085e", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\nindex eff8b25290f..1954a518ca6 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n", "chunk": "@@ -84,4 +89,35 @@ public class AchievementService {\n         }\n         achievementRepository.delete(achievement);\n     }\n+\n+    // @Transactional\n+    public void assignPointBasedAchievementIfEarned(Result result) {\n+        var score = result.getScore();\n+        // TODO: add actually required score for achievements\n+        var gold = 0.9;\n+        var silver = 0.8;\n+        var bronze = 0.7;\n+\n+        // TODO: get respective achievement\n+        var achievement = new Achievement();\n+\n+        var optionalUser = participationService.findOneStudentParticipation(result.getParticipation().getId()).getStudent();\n+\n+        if (optionalUser.isPresent()) {\n+            var user = optionalUser.get();\n+\n+            if (score >= gold && !user.getAchievements().contains(achievement)) {\n+                user.addAchievement(achievement);\n+                userRepository.save(user);\n+            }\n+            else if (score >= silver && !user.getAchievements().contains(achievement)) {\n+                user.addAchievement(achievement);\n+                userRepository.save(user);\n+            }\n+            else if (score >= bronze && !user.getAchievements().contains(achievement)) {\n+                user.addAchievement(achievement);\n+                userRepository.save(user);\n+            }\n+        }\n+    }\n }\n", "next_change": {"commit": "16c868730f899decba01ea6e156f8e7aebc0f26a", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\nindex 1954a518ca6..eff8b25290f 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n", "chunk": "@@ -89,35 +84,4 @@ public class AchievementService {\n         }\n         achievementRepository.delete(achievement);\n     }\n-\n-    // @Transactional\n-    public void assignPointBasedAchievementIfEarned(Result result) {\n-        var score = result.getScore();\n-        // TODO: add actually required score for achievements\n-        var gold = 0.9;\n-        var silver = 0.8;\n-        var bronze = 0.7;\n-\n-        // TODO: get respective achievement\n-        var achievement = new Achievement();\n-\n-        var optionalUser = participationService.findOneStudentParticipation(result.getParticipation().getId()).getStudent();\n-\n-        if (optionalUser.isPresent()) {\n-            var user = optionalUser.get();\n-\n-            if (score >= gold && !user.getAchievements().contains(achievement)) {\n-                user.addAchievement(achievement);\n-                userRepository.save(user);\n-            }\n-            else if (score >= silver && !user.getAchievements().contains(achievement)) {\n-                user.addAchievement(achievement);\n-                userRepository.save(user);\n-            }\n-            else if (score >= bronze && !user.getAchievements().contains(achievement)) {\n-                user.addAchievement(achievement);\n-                userRepository.save(user);\n-            }\n-        }\n-    }\n }\n", "next_change": {"commit": "c9e78d5f35e682dd1b8e5882d0883d782cecbe3f", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\nindex eff8b25290f..1954a518ca6 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n", "chunk": "@@ -84,4 +89,35 @@ public class AchievementService {\n         }\n         achievementRepository.delete(achievement);\n     }\n+\n+    // @Transactional\n+    public void assignPointBasedAchievementIfEarned(Result result) {\n+        var score = result.getScore();\n+        // TODO: add actually required score for achievements\n+        var gold = 0.9;\n+        var silver = 0.8;\n+        var bronze = 0.7;\n+\n+        // TODO: get respective achievement\n+        var achievement = new Achievement();\n+\n+        var optionalUser = participationService.findOneStudentParticipation(result.getParticipation().getId()).getStudent();\n+\n+        if (optionalUser.isPresent()) {\n+            var user = optionalUser.get();\n+\n+            if (score >= gold && !user.getAchievements().contains(achievement)) {\n+                user.addAchievement(achievement);\n+                userRepository.save(user);\n+            }\n+            else if (score >= silver && !user.getAchievements().contains(achievement)) {\n+                user.addAchievement(achievement);\n+                userRepository.save(user);\n+            }\n+            else if (score >= bronze && !user.getAchievements().contains(achievement)) {\n+                user.addAchievement(achievement);\n+                userRepository.save(user);\n+            }\n+        }\n+    }\n }\n", "next_change": {"commit": "4605b63a052365e502039c1e3d72f325538cf7eb", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\nindex 1954a518ca6..eff8b25290f 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n", "chunk": "@@ -89,35 +84,4 @@ public class AchievementService {\n         }\n         achievementRepository.delete(achievement);\n     }\n-\n-    // @Transactional\n-    public void assignPointBasedAchievementIfEarned(Result result) {\n-        var score = result.getScore();\n-        // TODO: add actually required score for achievements\n-        var gold = 0.9;\n-        var silver = 0.8;\n-        var bronze = 0.7;\n-\n-        // TODO: get respective achievement\n-        var achievement = new Achievement();\n-\n-        var optionalUser = participationService.findOneStudentParticipation(result.getParticipation().getId()).getStudent();\n-\n-        if (optionalUser.isPresent()) {\n-            var user = optionalUser.get();\n-\n-            if (score >= gold && !user.getAchievements().contains(achievement)) {\n-                user.addAchievement(achievement);\n-                userRepository.save(user);\n-            }\n-            else if (score >= silver && !user.getAchievements().contains(achievement)) {\n-                user.addAchievement(achievement);\n-                userRepository.save(user);\n-            }\n-            else if (score >= bronze && !user.getAchievements().contains(achievement)) {\n-                user.addAchievement(achievement);\n-                userRepository.save(user);\n-            }\n-        }\n-    }\n }\n", "next_change": {"commit": "18ddbfcae8f77e8cee1c7944a18fba5a589d46b5", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\nindex eff8b25290f..1954a518ca6 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n", "chunk": "@@ -84,4 +89,35 @@ public class AchievementService {\n         }\n         achievementRepository.delete(achievement);\n     }\n+\n+    // @Transactional\n+    public void assignPointBasedAchievementIfEarned(Result result) {\n+        var score = result.getScore();\n+        // TODO: add actually required score for achievements\n+        var gold = 0.9;\n+        var silver = 0.8;\n+        var bronze = 0.7;\n+\n+        // TODO: get respective achievement\n+        var achievement = new Achievement();\n+\n+        var optionalUser = participationService.findOneStudentParticipation(result.getParticipation().getId()).getStudent();\n+\n+        if (optionalUser.isPresent()) {\n+            var user = optionalUser.get();\n+\n+            if (score >= gold && !user.getAchievements().contains(achievement)) {\n+                user.addAchievement(achievement);\n+                userRepository.save(user);\n+            }\n+            else if (score >= silver && !user.getAchievements().contains(achievement)) {\n+                user.addAchievement(achievement);\n+                userRepository.save(user);\n+            }\n+            else if (score >= bronze && !user.getAchievements().contains(achievement)) {\n+                user.addAchievement(achievement);\n+                userRepository.save(user);\n+            }\n+        }\n+    }\n }\n", "next_change": {"commit": "1555470b055e8a99d34b9ed7f4fcb0929ede6bc6", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\nindex 1954a518ca6..eff8b25290f 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n", "chunk": "@@ -89,35 +84,4 @@ public class AchievementService {\n         }\n         achievementRepository.delete(achievement);\n     }\n-\n-    // @Transactional\n-    public void assignPointBasedAchievementIfEarned(Result result) {\n-        var score = result.getScore();\n-        // TODO: add actually required score for achievements\n-        var gold = 0.9;\n-        var silver = 0.8;\n-        var bronze = 0.7;\n-\n-        // TODO: get respective achievement\n-        var achievement = new Achievement();\n-\n-        var optionalUser = participationService.findOneStudentParticipation(result.getParticipation().getId()).getStudent();\n-\n-        if (optionalUser.isPresent()) {\n-            var user = optionalUser.get();\n-\n-            if (score >= gold && !user.getAchievements().contains(achievement)) {\n-                user.addAchievement(achievement);\n-                userRepository.save(user);\n-            }\n-            else if (score >= silver && !user.getAchievements().contains(achievement)) {\n-                user.addAchievement(achievement);\n-                userRepository.save(user);\n-            }\n-            else if (score >= bronze && !user.getAchievements().contains(achievement)) {\n-                user.addAchievement(achievement);\n-                userRepository.save(user);\n-            }\n-        }\n-    }\n }\n", "next_change": {"commit": "350087b6078ccb4c49a78aebe602a163fa860637", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\nindex eff8b25290f..1954a518ca6 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n", "chunk": "@@ -84,4 +89,35 @@ public class AchievementService {\n         }\n         achievementRepository.delete(achievement);\n     }\n+\n+    // @Transactional\n+    public void assignPointBasedAchievementIfEarned(Result result) {\n+        var score = result.getScore();\n+        // TODO: add actually required score for achievements\n+        var gold = 0.9;\n+        var silver = 0.8;\n+        var bronze = 0.7;\n+\n+        // TODO: get respective achievement\n+        var achievement = new Achievement();\n+\n+        var optionalUser = participationService.findOneStudentParticipation(result.getParticipation().getId()).getStudent();\n+\n+        if (optionalUser.isPresent()) {\n+            var user = optionalUser.get();\n+\n+            if (score >= gold && !user.getAchievements().contains(achievement)) {\n+                user.addAchievement(achievement);\n+                userRepository.save(user);\n+            }\n+            else if (score >= silver && !user.getAchievements().contains(achievement)) {\n+                user.addAchievement(achievement);\n+                userRepository.save(user);\n+            }\n+            else if (score >= bronze && !user.getAchievements().contains(achievement)) {\n+                user.addAchievement(achievement);\n+                userRepository.save(user);\n+            }\n+        }\n+    }\n }\n", "next_change": {"commit": "b496ec47dbd27567e02f96f7b2e363733ca7d89f", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\nindex 1954a518ca6..eff8b25290f 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n", "chunk": "@@ -89,35 +84,4 @@ public class AchievementService {\n         }\n         achievementRepository.delete(achievement);\n     }\n-\n-    // @Transactional\n-    public void assignPointBasedAchievementIfEarned(Result result) {\n-        var score = result.getScore();\n-        // TODO: add actually required score for achievements\n-        var gold = 0.9;\n-        var silver = 0.8;\n-        var bronze = 0.7;\n-\n-        // TODO: get respective achievement\n-        var achievement = new Achievement();\n-\n-        var optionalUser = participationService.findOneStudentParticipation(result.getParticipation().getId()).getStudent();\n-\n-        if (optionalUser.isPresent()) {\n-            var user = optionalUser.get();\n-\n-            if (score >= gold && !user.getAchievements().contains(achievement)) {\n-                user.addAchievement(achievement);\n-                userRepository.save(user);\n-            }\n-            else if (score >= silver && !user.getAchievements().contains(achievement)) {\n-                user.addAchievement(achievement);\n-                userRepository.save(user);\n-            }\n-            else if (score >= bronze && !user.getAchievements().contains(achievement)) {\n-                user.addAchievement(achievement);\n-                userRepository.save(user);\n-            }\n-        }\n-    }\n }\n", "next_change": {"commit": "1871fe479e13e32629073b2a2ab2ae293cf2a6ae", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\nindex eff8b25290f..1954a518ca6 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n", "chunk": "@@ -84,4 +89,35 @@ public class AchievementService {\n         }\n         achievementRepository.delete(achievement);\n     }\n+\n+    // @Transactional\n+    public void assignPointBasedAchievementIfEarned(Result result) {\n+        var score = result.getScore();\n+        // TODO: add actually required score for achievements\n+        var gold = 0.9;\n+        var silver = 0.8;\n+        var bronze = 0.7;\n+\n+        // TODO: get respective achievement\n+        var achievement = new Achievement();\n+\n+        var optionalUser = participationService.findOneStudentParticipation(result.getParticipation().getId()).getStudent();\n+\n+        if (optionalUser.isPresent()) {\n+            var user = optionalUser.get();\n+\n+            if (score >= gold && !user.getAchievements().contains(achievement)) {\n+                user.addAchievement(achievement);\n+                userRepository.save(user);\n+            }\n+            else if (score >= silver && !user.getAchievements().contains(achievement)) {\n+                user.addAchievement(achievement);\n+                userRepository.save(user);\n+            }\n+            else if (score >= bronze && !user.getAchievements().contains(achievement)) {\n+                user.addAchievement(achievement);\n+                userRepository.save(user);\n+            }\n+        }\n+    }\n }\n", "next_change": {"commit": "2d1887ebc2c67095c5a13eee2f86b7fb39b901d3", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\nindex 1954a518ca6..eff8b25290f 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n", "chunk": "@@ -89,35 +84,4 @@ public class AchievementService {\n         }\n         achievementRepository.delete(achievement);\n     }\n-\n-    // @Transactional\n-    public void assignPointBasedAchievementIfEarned(Result result) {\n-        var score = result.getScore();\n-        // TODO: add actually required score for achievements\n-        var gold = 0.9;\n-        var silver = 0.8;\n-        var bronze = 0.7;\n-\n-        // TODO: get respective achievement\n-        var achievement = new Achievement();\n-\n-        var optionalUser = participationService.findOneStudentParticipation(result.getParticipation().getId()).getStudent();\n-\n-        if (optionalUser.isPresent()) {\n-            var user = optionalUser.get();\n-\n-            if (score >= gold && !user.getAchievements().contains(achievement)) {\n-                user.addAchievement(achievement);\n-                userRepository.save(user);\n-            }\n-            else if (score >= silver && !user.getAchievements().contains(achievement)) {\n-                user.addAchievement(achievement);\n-                userRepository.save(user);\n-            }\n-            else if (score >= bronze && !user.getAchievements().contains(achievement)) {\n-                user.addAchievement(achievement);\n-                userRepository.save(user);\n-            }\n-        }\n-    }\n }\n", "next_change": {"commit": "f0e4daee087d8b6f0d36b1b78465a31f6f09713d", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\nindex eff8b25290f..1954a518ca6 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n", "chunk": "@@ -84,4 +89,35 @@ public class AchievementService {\n         }\n         achievementRepository.delete(achievement);\n     }\n+\n+    // @Transactional\n+    public void assignPointBasedAchievementIfEarned(Result result) {\n+        var score = result.getScore();\n+        // TODO: add actually required score for achievements\n+        var gold = 0.9;\n+        var silver = 0.8;\n+        var bronze = 0.7;\n+\n+        // TODO: get respective achievement\n+        var achievement = new Achievement();\n+\n+        var optionalUser = participationService.findOneStudentParticipation(result.getParticipation().getId()).getStudent();\n+\n+        if (optionalUser.isPresent()) {\n+            var user = optionalUser.get();\n+\n+            if (score >= gold && !user.getAchievements().contains(achievement)) {\n+                user.addAchievement(achievement);\n+                userRepository.save(user);\n+            }\n+            else if (score >= silver && !user.getAchievements().contains(achievement)) {\n+                user.addAchievement(achievement);\n+                userRepository.save(user);\n+            }\n+            else if (score >= bronze && !user.getAchievements().contains(achievement)) {\n+                user.addAchievement(achievement);\n+                userRepository.save(user);\n+            }\n+        }\n+    }\n }\n", "next_change": {"commit": "95622742bd3fa7623d0ad8df6089acef534ee60f", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\nindex 1954a518ca6..140afa73bd9 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n", "chunk": "@@ -90,34 +103,60 @@ public class AchievementService {\n         achievementRepository.delete(achievement);\n     }\n \n-    // @Transactional\n-    public void assignPointBasedAchievementIfEarned(Result result) {\n-        var score = result.getScore();\n-        // TODO: add actually required score for achievements\n-        var gold = 0.9;\n-        var silver = 0.8;\n-        var bronze = 0.7;\n+    public void generateForCourse(Course course) {\n+        progressBasedAchievementService.generateAchievements(course);\n+    }\n+\n+    public void generateForExercise(Exercise exercise) {\n+        pointBasedAchievementService.generateAchievements(exercise);\n+        timeBasedAchievementService.generateAchievements(exercise);\n+    }\n+\n+    public void checkForAchievements(Result result) {\n+        if (!result.getParticipation().getExercise().getCourseViaExerciseGroupOrCourseMember().getHasAchievements()) {\n+            return;\n+        }\n+        pointBasedAchievementService.checkForAchievement(result);\n+        timeBasedAchievementService.checkForAchievement(result);\n+        progressBasedAchievementService.checkForAchievement(result);\n+    }\n \n-        // TODO: get respective achievement\n-        var achievement = new Achievement();\n+    public void rewardAchievement(Course course, Exercise exercise, AchievementType type, AchievementRank rank, User user) {\n+        Set<Achievement> achievements;\n+        Achievement achievement;\n \n-        var optionalUser = participationService.findOneStudentParticipation(result.getParticipation().getId()).getStudent();\n+        if (exercise == null) {\n+            achievements = achievementRepository.findAllForRewardedTypeInCourse(course.getId(), type);\n+        }\n+        else {\n+            achievements = achievementRepository.findAllForRewardedTypeInExercise(course.getId(), exercise.getId(), type);\n+        }\n \n-        if (optionalUser.isPresent()) {\n-            var user = optionalUser.get();\n+        var optionalAchievement = achievements.stream().filter(a -> a.getRank().equals(rank)).findAny();\n+        if (!optionalAchievement.isPresent()) {\n+            return;\n+        }\n \n-            if (score >= gold && !user.getAchievements().contains(achievement)) {\n-                user.addAchievement(achievement);\n-                userRepository.save(user);\n-            }\n-            else if (score >= silver && !user.getAchievements().contains(achievement)) {\n-                user.addAchievement(achievement);\n-                userRepository.save(user);\n+        achievement = optionalAchievement.get();\n+        if (achievement.getUsers().contains(user)) {\n+            return;\n+        }\n+\n+        var optionalAchievementsOfHigherRank = achievements.stream().filter(a -> a.getRank().ordinal() > rank.ordinal()).collect(Collectors.toSet());\n+        for (Achievement a : optionalAchievementsOfHigherRank) {\n+            if (a.getUsers().contains(user)) {\n+                return;\n             }\n-            else if (score >= bronze && !user.getAchievements().contains(achievement)) {\n-                user.addAchievement(achievement);\n-                userRepository.save(user);\n+        }\n+\n+        var optionalAchievementsOfLowerRank = achievements.stream().filter(a -> a.getRank().ordinal() < rank.ordinal()).collect(Collectors.toSet());\n+        for (Achievement a : optionalAchievementsOfLowerRank) {\n+            if (a.getUsers().contains(user)) {\n+                user.removeAchievement(a);\n             }\n         }\n+\n+        user.addAchievement(achievement);\n+        userRepository.save(user);\n     }\n }\n", "next_change": {"commit": "0e82242b97cdbc112e1d3a883cb2281d462dd405", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\nindex 140afa73bd9..eff8b25290f 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n", "chunk": "@@ -102,61 +84,4 @@ public class AchievementService {\n         }\n         achievementRepository.delete(achievement);\n     }\n-\n-    public void generateForCourse(Course course) {\n-        progressBasedAchievementService.generateAchievements(course);\n-    }\n-\n-    public void generateForExercise(Exercise exercise) {\n-        pointBasedAchievementService.generateAchievements(exercise);\n-        timeBasedAchievementService.generateAchievements(exercise);\n-    }\n-\n-    public void checkForAchievements(Result result) {\n-        if (!result.getParticipation().getExercise().getCourseViaExerciseGroupOrCourseMember().getHasAchievements()) {\n-            return;\n-        }\n-        pointBasedAchievementService.checkForAchievement(result);\n-        timeBasedAchievementService.checkForAchievement(result);\n-        progressBasedAchievementService.checkForAchievement(result);\n-    }\n-\n-    public void rewardAchievement(Course course, Exercise exercise, AchievementType type, AchievementRank rank, User user) {\n-        Set<Achievement> achievements;\n-        Achievement achievement;\n-\n-        if (exercise == null) {\n-            achievements = achievementRepository.findAllForRewardedTypeInCourse(course.getId(), type);\n-        }\n-        else {\n-            achievements = achievementRepository.findAllForRewardedTypeInExercise(course.getId(), exercise.getId(), type);\n-        }\n-\n-        var optionalAchievement = achievements.stream().filter(a -> a.getRank().equals(rank)).findAny();\n-        if (!optionalAchievement.isPresent()) {\n-            return;\n-        }\n-\n-        achievement = optionalAchievement.get();\n-        if (achievement.getUsers().contains(user)) {\n-            return;\n-        }\n-\n-        var optionalAchievementsOfHigherRank = achievements.stream().filter(a -> a.getRank().ordinal() > rank.ordinal()).collect(Collectors.toSet());\n-        for (Achievement a : optionalAchievementsOfHigherRank) {\n-            if (a.getUsers().contains(user)) {\n-                return;\n-            }\n-        }\n-\n-        var optionalAchievementsOfLowerRank = achievements.stream().filter(a -> a.getRank().ordinal() < rank.ordinal()).collect(Collectors.toSet());\n-        for (Achievement a : optionalAchievementsOfLowerRank) {\n-            if (a.getUsers().contains(user)) {\n-                user.removeAchievement(a);\n-            }\n-        }\n-\n-        user.addAchievement(achievement);\n-        userRepository.save(user);\n-    }\n }\n", "next_change": {"commit": "c7425c9af8e7e15cd22a3771029b103c6d79608f", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\nindex eff8b25290f..07259f551f0 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n", "chunk": "@@ -84,4 +79,78 @@ public class AchievementService {\n         }\n         achievementRepository.delete(achievement);\n     }\n+\n+    public void generateForCourse(Course course) {\n+        progressBasedAchievementService.generateAchievements(course);\n+    }\n+\n+    public void generateForExercise(Exercise exercise) {\n+        pointBasedAchievementService.generateAchievements(exercise);\n+        timeBasedAchievementService.generateAchievements(exercise);\n+    }\n+\n+    public void checkForAchievements(Result result) {\n+        var course = result.getParticipation().getExercise().getCourseViaExerciseGroupOrCourseMember();\n+        if (!course.getHasAchievements()) {\n+            return;\n+        }\n+        var exercise = result.getParticipation().getExercise();\n+        var optionalUser = participationService.findOneStudentParticipation(result.getParticipation().getId()).getStudent();\n+        if (!optionalUser.isPresent()) {\n+            return;\n+        }\n+        var user = optionalUser.get();\n+\n+        var pointRank = pointBasedAchievementService.checkForAchievement(result);\n+        rewardAchievement(course, exercise, AchievementType.POINT, pointRank, user);\n+\n+        var timeRank = timeBasedAchievementService.checkForAchievement(result);\n+        rewardAchievement(course, exercise, AchievementType.TIME, timeRank, user);\n+\n+        var progressRank = progressBasedAchievementService.checkForAchievement(course, user);\n+        rewardAchievement(course, exercise, AchievementType.PROGRESS, progressRank, user);\n+    }\n+\n+    public void rewardAchievement(Course course, Exercise exercise, AchievementType type, AchievementRank rank, User user) {\n+        Set<Achievement> achievements;\n+        Achievement achievement;\n+\n+        if (rank == null) {\n+            return;\n+        }\n+\n+        if (exercise == null) {\n+            achievements = achievementRepository.findAllForRewardedTypeInCourse(course.getId(), type);\n+        }\n+        else {\n+            achievements = achievementRepository.findAllForRewardedTypeInExercise(course.getId(), exercise.getId(), type);\n+        }\n+\n+        var optionalAchievement = achievements.stream().filter(a -> a.getRank().equals(rank)).findAny();\n+        if (!optionalAchievement.isPresent()) {\n+            return;\n+        }\n+\n+        achievement = optionalAchievement.get();\n+        if (achievement.getUsers().contains(user)) {\n+            return;\n+        }\n+\n+        var optionalAchievementsOfHigherRank = achievements.stream().filter(a -> a.getRank().ordinal() > rank.ordinal()).collect(Collectors.toSet());\n+        for (Achievement a : optionalAchievementsOfHigherRank) {\n+            if (a.getUsers().contains(user)) {\n+                return;\n+            }\n+        }\n+\n+        var optionalAchievementsOfLowerRank = achievements.stream().filter(a -> a.getRank().ordinal() < rank.ordinal()).collect(Collectors.toSet());\n+        for (Achievement a : optionalAchievementsOfLowerRank) {\n+            if (a.getUsers().contains(user)) {\n+                user.removeAchievement(a);\n+            }\n+        }\n+\n+        user.addAchievement(achievement);\n+        userRepository.save(user);\n+    }\n }\n", "next_change": {"commit": "28ed83395042c9e9faddf43940bd9f3c221684b3", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\nindex 07259f551f0..eff8b25290f 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n", "chunk": "@@ -79,78 +84,4 @@ public class AchievementService {\n         }\n         achievementRepository.delete(achievement);\n     }\n-\n-    public void generateForCourse(Course course) {\n-        progressBasedAchievementService.generateAchievements(course);\n-    }\n-\n-    public void generateForExercise(Exercise exercise) {\n-        pointBasedAchievementService.generateAchievements(exercise);\n-        timeBasedAchievementService.generateAchievements(exercise);\n-    }\n-\n-    public void checkForAchievements(Result result) {\n-        var course = result.getParticipation().getExercise().getCourseViaExerciseGroupOrCourseMember();\n-        if (!course.getHasAchievements()) {\n-            return;\n-        }\n-        var exercise = result.getParticipation().getExercise();\n-        var optionalUser = participationService.findOneStudentParticipation(result.getParticipation().getId()).getStudent();\n-        if (!optionalUser.isPresent()) {\n-            return;\n-        }\n-        var user = optionalUser.get();\n-\n-        var pointRank = pointBasedAchievementService.checkForAchievement(result);\n-        rewardAchievement(course, exercise, AchievementType.POINT, pointRank, user);\n-\n-        var timeRank = timeBasedAchievementService.checkForAchievement(result);\n-        rewardAchievement(course, exercise, AchievementType.TIME, timeRank, user);\n-\n-        var progressRank = progressBasedAchievementService.checkForAchievement(course, user);\n-        rewardAchievement(course, exercise, AchievementType.PROGRESS, progressRank, user);\n-    }\n-\n-    public void rewardAchievement(Course course, Exercise exercise, AchievementType type, AchievementRank rank, User user) {\n-        Set<Achievement> achievements;\n-        Achievement achievement;\n-\n-        if (rank == null) {\n-            return;\n-        }\n-\n-        if (exercise == null) {\n-            achievements = achievementRepository.findAllForRewardedTypeInCourse(course.getId(), type);\n-        }\n-        else {\n-            achievements = achievementRepository.findAllForRewardedTypeInExercise(course.getId(), exercise.getId(), type);\n-        }\n-\n-        var optionalAchievement = achievements.stream().filter(a -> a.getRank().equals(rank)).findAny();\n-        if (!optionalAchievement.isPresent()) {\n-            return;\n-        }\n-\n-        achievement = optionalAchievement.get();\n-        if (achievement.getUsers().contains(user)) {\n-            return;\n-        }\n-\n-        var optionalAchievementsOfHigherRank = achievements.stream().filter(a -> a.getRank().ordinal() > rank.ordinal()).collect(Collectors.toSet());\n-        for (Achievement a : optionalAchievementsOfHigherRank) {\n-            if (a.getUsers().contains(user)) {\n-                return;\n-            }\n-        }\n-\n-        var optionalAchievementsOfLowerRank = achievements.stream().filter(a -> a.getRank().ordinal() < rank.ordinal()).collect(Collectors.toSet());\n-        for (Achievement a : optionalAchievementsOfLowerRank) {\n-            if (a.getUsers().contains(user)) {\n-                user.removeAchievement(a);\n-            }\n-        }\n-\n-        user.addAchievement(achievement);\n-        userRepository.save(user);\n-    }\n }\n", "next_change": {"commit": "c3317e06a092c8dbee21b52de380addd92f73b3f", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\nindex eff8b25290f..9f934956a2c 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n", "chunk": "@@ -84,4 +79,78 @@ public class AchievementService {\n         }\n         achievementRepository.delete(achievement);\n     }\n+\n+    public void generateForCourse(Course course) {\n+        progressBasedAchievementService.generateAchievements(course);\n+    }\n+\n+    public void generateForExercise(Exercise exercise) {\n+        pointBasedAchievementService.generateAchievements(exercise);\n+        timeBasedAchievementService.generateAchievements(exercise);\n+    }\n+\n+    public void checkForAchievements(Result result) {\n+        var course = result.getParticipation().getExercise().getCourseViaExerciseGroupOrCourseMember();\n+        if (!course.getHasAchievements()) {\n+            return;\n+        }\n+        var exercise = result.getParticipation().getExercise();\n+        var optionalUser = participationService.findOneStudentParticipation(result.getParticipation().getId()).getStudent();\n+        if (!optionalUser.isPresent()) {\n+            return;\n+        }\n+        var user = optionalUser.get();\n+\n+        var pointRank = pointBasedAchievementService.checkForAchievement(result);\n+        rewardAchievement(course, exercise, AchievementType.POINT, pointRank, user);\n+\n+        var timeRank = timeBasedAchievementService.checkForAchievement(result);\n+        rewardAchievement(course, exercise, AchievementType.TIME, timeRank, user);\n+\n+        var progressRank = progressBasedAchievementService.checkForAchievement(course, user);\n+        rewardAchievement(course, exercise, AchievementType.PROGRESS, progressRank, user);\n+    }\n+\n+    public void rewardAchievement(Course course, Exercise exercise, AchievementType type, AchievementRank rank, User user) {\n+        Set<Achievement> achievements;\n+        Achievement achievement;\n+\n+        if (rank == null) {\n+            return;\n+        }\n+\n+        if (exercise == null) {\n+            achievements = achievementRepository.findAllForRewardedTypeInCourse(course.getId(), type);\n+        }\n+        else {\n+            achievements = achievementRepository.findAllForRewardedTypeInExercise(course.getId(), exercise.getId(), type);\n+        }\n+\n+        var optionalAchievement = achievements.stream().filter(a -> a.getRank().equals(rank)).findAny();\n+        if (!optionalAchievement.isPresent()) {\n+            return;\n+        }\n+\n+        achievement = optionalAchievement.get();\n+        if (achievement.getUsers().contains(user)) {\n+            return;\n+        }\n+\n+        var optionalAchievementsOfHigherRank = achievements.stream().filter(a -> a.getRank().ordinal() > rank.ordinal()).collect(Collectors.toSet());\n+        for (Achievement a : optionalAchievementsOfHigherRank) {\n+            if (a.getUsers().contains(user)) {\n+                return;\n+            }\n+        }\n+\n+        var optionalAchievementsOfLowerRank = achievements.stream().filter(a -> a.getRank().ordinal() < rank.ordinal()).collect(Collectors.toSet());\n+        for (Achievement a : optionalAchievementsOfLowerRank) {\n+            if (a.getUsers().contains(user) && a.getExercise() != null) {\n+                user.removeAchievement(a);\n+            }\n+        }\n+\n+        user.addAchievement(achievement);\n+        userRepository.save(user);\n+    }\n }\n", "next_change": {"commit": "508e8977abe4d1e8ec1c8a817fe9bd0f91f6bb8a", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\nindex 9f934956a2c..eff8b25290f 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n", "chunk": "@@ -79,78 +84,4 @@ public class AchievementService {\n         }\n         achievementRepository.delete(achievement);\n     }\n-\n-    public void generateForCourse(Course course) {\n-        progressBasedAchievementService.generateAchievements(course);\n-    }\n-\n-    public void generateForExercise(Exercise exercise) {\n-        pointBasedAchievementService.generateAchievements(exercise);\n-        timeBasedAchievementService.generateAchievements(exercise);\n-    }\n-\n-    public void checkForAchievements(Result result) {\n-        var course = result.getParticipation().getExercise().getCourseViaExerciseGroupOrCourseMember();\n-        if (!course.getHasAchievements()) {\n-            return;\n-        }\n-        var exercise = result.getParticipation().getExercise();\n-        var optionalUser = participationService.findOneStudentParticipation(result.getParticipation().getId()).getStudent();\n-        if (!optionalUser.isPresent()) {\n-            return;\n-        }\n-        var user = optionalUser.get();\n-\n-        var pointRank = pointBasedAchievementService.checkForAchievement(result);\n-        rewardAchievement(course, exercise, AchievementType.POINT, pointRank, user);\n-\n-        var timeRank = timeBasedAchievementService.checkForAchievement(result);\n-        rewardAchievement(course, exercise, AchievementType.TIME, timeRank, user);\n-\n-        var progressRank = progressBasedAchievementService.checkForAchievement(course, user);\n-        rewardAchievement(course, exercise, AchievementType.PROGRESS, progressRank, user);\n-    }\n-\n-    public void rewardAchievement(Course course, Exercise exercise, AchievementType type, AchievementRank rank, User user) {\n-        Set<Achievement> achievements;\n-        Achievement achievement;\n-\n-        if (rank == null) {\n-            return;\n-        }\n-\n-        if (exercise == null) {\n-            achievements = achievementRepository.findAllForRewardedTypeInCourse(course.getId(), type);\n-        }\n-        else {\n-            achievements = achievementRepository.findAllForRewardedTypeInExercise(course.getId(), exercise.getId(), type);\n-        }\n-\n-        var optionalAchievement = achievements.stream().filter(a -> a.getRank().equals(rank)).findAny();\n-        if (!optionalAchievement.isPresent()) {\n-            return;\n-        }\n-\n-        achievement = optionalAchievement.get();\n-        if (achievement.getUsers().contains(user)) {\n-            return;\n-        }\n-\n-        var optionalAchievementsOfHigherRank = achievements.stream().filter(a -> a.getRank().ordinal() > rank.ordinal()).collect(Collectors.toSet());\n-        for (Achievement a : optionalAchievementsOfHigherRank) {\n-            if (a.getUsers().contains(user)) {\n-                return;\n-            }\n-        }\n-\n-        var optionalAchievementsOfLowerRank = achievements.stream().filter(a -> a.getRank().ordinal() < rank.ordinal()).collect(Collectors.toSet());\n-        for (Achievement a : optionalAchievementsOfLowerRank) {\n-            if (a.getUsers().contains(user) && a.getExercise() != null) {\n-                user.removeAchievement(a);\n-            }\n-        }\n-\n-        user.addAchievement(achievement);\n-        userRepository.save(user);\n-    }\n }\n", "next_change": {"commit": "d3d2ea3ec69fdc3185bac66822f03c4a1bf0b6b1", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\nindex eff8b25290f..9f934956a2c 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n", "chunk": "@@ -84,4 +79,78 @@ public class AchievementService {\n         }\n         achievementRepository.delete(achievement);\n     }\n+\n+    public void generateForCourse(Course course) {\n+        progressBasedAchievementService.generateAchievements(course);\n+    }\n+\n+    public void generateForExercise(Exercise exercise) {\n+        pointBasedAchievementService.generateAchievements(exercise);\n+        timeBasedAchievementService.generateAchievements(exercise);\n+    }\n+\n+    public void checkForAchievements(Result result) {\n+        var course = result.getParticipation().getExercise().getCourseViaExerciseGroupOrCourseMember();\n+        if (!course.getHasAchievements()) {\n+            return;\n+        }\n+        var exercise = result.getParticipation().getExercise();\n+        var optionalUser = participationService.findOneStudentParticipation(result.getParticipation().getId()).getStudent();\n+        if (!optionalUser.isPresent()) {\n+            return;\n+        }\n+        var user = optionalUser.get();\n+\n+        var pointRank = pointBasedAchievementService.checkForAchievement(result);\n+        rewardAchievement(course, exercise, AchievementType.POINT, pointRank, user);\n+\n+        var timeRank = timeBasedAchievementService.checkForAchievement(result);\n+        rewardAchievement(course, exercise, AchievementType.TIME, timeRank, user);\n+\n+        var progressRank = progressBasedAchievementService.checkForAchievement(course, user);\n+        rewardAchievement(course, exercise, AchievementType.PROGRESS, progressRank, user);\n+    }\n+\n+    public void rewardAchievement(Course course, Exercise exercise, AchievementType type, AchievementRank rank, User user) {\n+        Set<Achievement> achievements;\n+        Achievement achievement;\n+\n+        if (rank == null) {\n+            return;\n+        }\n+\n+        if (exercise == null) {\n+            achievements = achievementRepository.findAllForRewardedTypeInCourse(course.getId(), type);\n+        }\n+        else {\n+            achievements = achievementRepository.findAllForRewardedTypeInExercise(course.getId(), exercise.getId(), type);\n+        }\n+\n+        var optionalAchievement = achievements.stream().filter(a -> a.getRank().equals(rank)).findAny();\n+        if (!optionalAchievement.isPresent()) {\n+            return;\n+        }\n+\n+        achievement = optionalAchievement.get();\n+        if (achievement.getUsers().contains(user)) {\n+            return;\n+        }\n+\n+        var optionalAchievementsOfHigherRank = achievements.stream().filter(a -> a.getRank().ordinal() > rank.ordinal()).collect(Collectors.toSet());\n+        for (Achievement a : optionalAchievementsOfHigherRank) {\n+            if (a.getUsers().contains(user)) {\n+                return;\n+            }\n+        }\n+\n+        var optionalAchievementsOfLowerRank = achievements.stream().filter(a -> a.getRank().ordinal() < rank.ordinal()).collect(Collectors.toSet());\n+        for (Achievement a : optionalAchievementsOfLowerRank) {\n+            if (a.getUsers().contains(user) && a.getExercise() != null) {\n+                user.removeAchievement(a);\n+            }\n+        }\n+\n+        user.addAchievement(achievement);\n+        userRepository.save(user);\n+    }\n }\n", "next_change": {"commit": "ee25bd720633e2da0f2ad7b9354358590178e20f", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\nindex 9f934956a2c..bc4d28824f4 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n", "chunk": "@@ -153,4 +153,12 @@ public class AchievementService {\n         user.addAchievement(achievement);\n         userRepository.save(user);\n     }\n+\n+    public void prepareForClient(Set<Achievement> achievements) {\n+        for (Achievement achievement : achievements) {\n+            achievement.setExercise(null);\n+            achievement.setCourse(null);\n+            achievement.setUsers(null);\n+        }\n+    }\n }\n", "next_change": {"commit": "64778c859b7f2d14015c50aedae62db4c98bcee7", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\nindex bc4d28824f4..eff8b25290f 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n", "chunk": "@@ -79,86 +84,4 @@ public class AchievementService {\n         }\n         achievementRepository.delete(achievement);\n     }\n-\n-    public void generateForCourse(Course course) {\n-        progressBasedAchievementService.generateAchievements(course);\n-    }\n-\n-    public void generateForExercise(Exercise exercise) {\n-        pointBasedAchievementService.generateAchievements(exercise);\n-        timeBasedAchievementService.generateAchievements(exercise);\n-    }\n-\n-    public void checkForAchievements(Result result) {\n-        var course = result.getParticipation().getExercise().getCourseViaExerciseGroupOrCourseMember();\n-        if (!course.getHasAchievements()) {\n-            return;\n-        }\n-        var exercise = result.getParticipation().getExercise();\n-        var optionalUser = participationService.findOneStudentParticipation(result.getParticipation().getId()).getStudent();\n-        if (!optionalUser.isPresent()) {\n-            return;\n-        }\n-        var user = optionalUser.get();\n-\n-        var pointRank = pointBasedAchievementService.checkForAchievement(result);\n-        rewardAchievement(course, exercise, AchievementType.POINT, pointRank, user);\n-\n-        var timeRank = timeBasedAchievementService.checkForAchievement(result);\n-        rewardAchievement(course, exercise, AchievementType.TIME, timeRank, user);\n-\n-        var progressRank = progressBasedAchievementService.checkForAchievement(course, user);\n-        rewardAchievement(course, exercise, AchievementType.PROGRESS, progressRank, user);\n-    }\n-\n-    public void rewardAchievement(Course course, Exercise exercise, AchievementType type, AchievementRank rank, User user) {\n-        Set<Achievement> achievements;\n-        Achievement achievement;\n-\n-        if (rank == null) {\n-            return;\n-        }\n-\n-        if (exercise == null) {\n-            achievements = achievementRepository.findAllForRewardedTypeInCourse(course.getId(), type);\n-        }\n-        else {\n-            achievements = achievementRepository.findAllForRewardedTypeInExercise(course.getId(), exercise.getId(), type);\n-        }\n-\n-        var optionalAchievement = achievements.stream().filter(a -> a.getRank().equals(rank)).findAny();\n-        if (!optionalAchievement.isPresent()) {\n-            return;\n-        }\n-\n-        achievement = optionalAchievement.get();\n-        if (achievement.getUsers().contains(user)) {\n-            return;\n-        }\n-\n-        var optionalAchievementsOfHigherRank = achievements.stream().filter(a -> a.getRank().ordinal() > rank.ordinal()).collect(Collectors.toSet());\n-        for (Achievement a : optionalAchievementsOfHigherRank) {\n-            if (a.getUsers().contains(user)) {\n-                return;\n-            }\n-        }\n-\n-        var optionalAchievementsOfLowerRank = achievements.stream().filter(a -> a.getRank().ordinal() < rank.ordinal()).collect(Collectors.toSet());\n-        for (Achievement a : optionalAchievementsOfLowerRank) {\n-            if (a.getUsers().contains(user) && a.getExercise() != null) {\n-                user.removeAchievement(a);\n-            }\n-        }\n-\n-        user.addAchievement(achievement);\n-        userRepository.save(user);\n-    }\n-\n-    public void prepareForClient(Set<Achievement> achievements) {\n-        for (Achievement achievement : achievements) {\n-            achievement.setExercise(null);\n-            achievement.setCourse(null);\n-            achievement.setUsers(null);\n-        }\n-    }\n }\n", "next_change": {"commit": "8d5bfc049d9e75323290b069e7343df6fc579ee7", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\nindex eff8b25290f..6668ed36f44 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n", "chunk": "@@ -1,87 +1,161 @@\n package de.tum.in.www1.artemis.service;\n \n-import java.util.List;\n-import java.util.Optional;\n import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import javax.transaction.Transactional;\n \n import org.springframework.stereotype.Service;\n \n+import de.tum.in.www1.artemis.domain.*;\n import de.tum.in.www1.artemis.domain.Achievement;\n import de.tum.in.www1.artemis.domain.Course;\n import de.tum.in.www1.artemis.domain.Exercise;\n import de.tum.in.www1.artemis.domain.User;\n import de.tum.in.www1.artemis.domain.enumeration.AchievementRank;\n+import de.tum.in.www1.artemis.domain.enumeration.AchievementType;\n import de.tum.in.www1.artemis.repository.AchievementRepository;\n import de.tum.in.www1.artemis.repository.UserRepository;\n \n @Service\n public class AchievementService {\n \n+    private final PointBasedAchievementService pointBasedAchievementService;\n+\n+    private final TimeBasedAchievementService timeBasedAchievementService;\n+\n+    private final ProgressBasedAchievementService progressBasedAchievementService;\n+\n+    private final ParticipationService participationService;\n+\n     private final AchievementRepository achievementRepository;\n \n     private final UserRepository userRepository;\n \n-    public AchievementService(AchievementRepository achievementRepository, UserRepository userRepository) {\n+    public AchievementService(AchievementRepository achievementRepository, UserRepository userRepository, PointBasedAchievementService pointBasedAchievementService,\n+            TimeBasedAchievementService timeBasedAchievementService, ProgressBasedAchievementService progressBasedAchievementService, ParticipationService participationService) {\n         this.achievementRepository = achievementRepository;\n+        this.pointBasedAchievementService = pointBasedAchievementService;\n+        this.timeBasedAchievementService = timeBasedAchievementService;\n+        this.progressBasedAchievementService = progressBasedAchievementService;\n         this.userRepository = userRepository;\n+        this.participationService = participationService;\n     }\n \n-    public Optional<Achievement> findById(Long achievementId) {\n-        return achievementRepository.findById(achievementId);\n+    public Set<Achievement> findAllByUserIdAndCourseId(Long userId, Long courseId) {\n+        return achievementRepository.findAllByUserIdAndCourseId(userId, courseId);\n     }\n \n-    public List<Achievement> findAll() {\n-        return achievementRepository.findAll();\n+    @Transactional\n+    public void deleteByCourseId(Long courseId) {\n+        Set<Achievement> achievements = achievementRepository.findAllByCourseId(courseId);\n+        for (Achievement achievement : achievements) {\n+            removeFromUsers(achievement);\n+        }\n+        achievementRepository.deleteAll(achievements);\n     }\n \n-    public Set<Achievement> findAllByCourseId(Long courseId) {\n-        return achievementRepository.findAllByCourseId(courseId);\n+    @Transactional\n+    public void deleteByExerciseId(Long exerciseId) {\n+        Set<Achievement> achievements = achievementRepository.findAllByExerciseId(exerciseId);\n+        for (Achievement achievement : achievements) {\n+            removeFromUsers(achievement);\n+        }\n+        achievementRepository.deleteAll(achievements);\n     }\n \n-    public Set<Achievement> findAllByExerciseId(Long exerciseId) {\n-        return achievementRepository.findAllByExerciseId(exerciseId);\n+    /**\n+     * Removes an achievement from all users\n+     * @param achievement achievement to be deleted\n+     */\n+    public void removeFromUsers(Achievement achievement) {\n+        var users = achievement.getUsers();\n+        for (User user : users) {\n+            user.removeAchievement(achievement);\n+        }\n+        userRepository.saveAll(users);\n     }\n \n-    public Set<Achievement> findAllByUserId(Long userId) {\n-        return achievementRepository.findAllByUserId(userId);\n+    public void generateForCourse(Course course) {\n+        progressBasedAchievementService.generateAchievements(course);\n     }\n \n-    public Achievement save(Achievement achievement) {\n-        return achievementRepository.save(achievement);\n+    public void generateForExercise(Exercise exercise) {\n+        pointBasedAchievementService.generateAchievements(exercise);\n+        timeBasedAchievementService.generateAchievements(exercise);\n     }\n \n-    /**\n-     * Creates an achievement and persist it\n-     * @param title title of the achievement\n-     * @param description description of the achievement\n-     * @param icon the font awesome icon string identifier\n-     * @param rank rank of the achievement\n-     * @param course course which the achievement belongs to\n-     * @param exercise which the achievement belongs to\n-     * @return the created and persisted achievement\n-     */\n-    public Achievement create(String title, String description, String icon, AchievementRank rank, Course course, Exercise exercise) {\n-        Achievement achievement = new Achievement();\n-        achievement.setTitle(title);\n-        achievement.setDescription(description);\n-        achievement.setIcon(icon);\n-        achievement.setRank(rank);\n-        achievement.setCourse(course);\n-        achievement.setExercise(exercise);\n-        return achievementRepository.save(achievement);\n+    @Transactional\n+    public void checkForAchievements(Result result) {\n+        var course = result.getParticipation().getExercise().getCourseViaExerciseGroupOrCourseMember();\n+        if (course.getHasAchievements() == null || !course.getHasAchievements()) {\n+            return;\n+        }\n+        var exercise = result.getParticipation().getExercise();\n+        var optionalUser = participationService.findOneStudentParticipation(result.getParticipation().getId()).getStudent();\n+        if (!optionalUser.isPresent()) {\n+            return;\n+        }\n+        var user = optionalUser.get();\n+\n+        var pointRank = pointBasedAchievementService.checkForAchievement(result);\n+        rewardAchievement(course, exercise, AchievementType.POINT, pointRank, user);\n+\n+        var timeRank = timeBasedAchievementService.checkForAchievement(result);\n+        rewardAchievement(course, exercise, AchievementType.TIME, timeRank, user);\n+\n+        var progressRank = progressBasedAchievementService.checkForAchievement(course, user);\n+        rewardAchievement(course, exercise, AchievementType.PROGRESS, progressRank, user);\n     }\n \n-    /**\n-     * Deletes an achievement by also removing it from all users\n-     * @param achievement achievement to be deleted\n-     */\n-    public void delete(Achievement achievement) {\n-        var users = userRepository.findAllByAchievementId(achievement.getId());\n-        achievement.setUsers(users);\n-        for (User user : users) {\n-            user.removeAchievement(achievement);\n-            userRepository.save(user);\n+    public void rewardAchievement(Course course, Exercise exercise, AchievementType type, AchievementRank rank, User user) {\n+        Set<Achievement> achievements;\n+        Achievement achievement;\n+\n+        if (rank == null) {\n+            return;\n+        }\n+\n+        if (exercise == null) {\n+            achievements = achievementRepository.findAllForRewardedTypeInCourse(course.getId(), type);\n+        }\n+        else {\n+            achievements = achievementRepository.findAllForRewardedTypeInExercise(course.getId(), exercise.getId(), type);\n+        }\n+\n+        var optionalAchievement = achievements.stream().filter(a -> a.getRank().equals(rank)).findAny();\n+        if (!optionalAchievement.isPresent()) {\n+            return;\n+        }\n+\n+        achievement = optionalAchievement.get();\n+        if (achievement.getUsers().contains(user)) {\n+            return;\n+        }\n+\n+        var optionalAchievementsOfHigherRank = achievements.stream().filter(a -> a.getRank().ordinal() > rank.ordinal()).collect(Collectors.toSet());\n+        for (Achievement a : optionalAchievementsOfHigherRank) {\n+            if (a.getUsers().contains(user)) {\n+                return;\n+            }\n+        }\n+\n+        var optionalAchievementsOfLowerRank = achievements.stream().filter(a -> a.getRank().ordinal() < rank.ordinal()).collect(Collectors.toSet());\n+        for (Achievement a : optionalAchievementsOfLowerRank) {\n+            if (a.getUsers().contains(user) && a.getExercise() != null) {\n+                user.removeAchievement(a);\n+            }\n+        }\n+\n+        user.addAchievement(achievement);\n+        userRepository.save(user);\n+    }\n+\n+    public void prepareForClient(Set<Achievement> achievements) {\n+        for (Achievement achievement : achievements) {\n+            achievement.setExercise(null);\n+            achievement.setCourse(null);\n+            achievement.setUsers(null);\n         }\n-        achievementRepository.delete(achievement);\n     }\n }\n", "next_change": {"commit": "7a5de1a37353eb19f93ef49666bba352198834cb", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\nindex 6668ed36f44..eff8b25290f 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n", "chunk": "@@ -1,161 +1,87 @@\n package de.tum.in.www1.artemis.service;\n \n+import java.util.List;\n+import java.util.Optional;\n import java.util.Set;\n-import java.util.stream.Collectors;\n-\n-import javax.transaction.Transactional;\n \n import org.springframework.stereotype.Service;\n \n-import de.tum.in.www1.artemis.domain.*;\n import de.tum.in.www1.artemis.domain.Achievement;\n import de.tum.in.www1.artemis.domain.Course;\n import de.tum.in.www1.artemis.domain.Exercise;\n import de.tum.in.www1.artemis.domain.User;\n import de.tum.in.www1.artemis.domain.enumeration.AchievementRank;\n-import de.tum.in.www1.artemis.domain.enumeration.AchievementType;\n import de.tum.in.www1.artemis.repository.AchievementRepository;\n import de.tum.in.www1.artemis.repository.UserRepository;\n \n @Service\n public class AchievementService {\n \n-    private final PointBasedAchievementService pointBasedAchievementService;\n-\n-    private final TimeBasedAchievementService timeBasedAchievementService;\n-\n-    private final ProgressBasedAchievementService progressBasedAchievementService;\n-\n-    private final ParticipationService participationService;\n-\n     private final AchievementRepository achievementRepository;\n \n     private final UserRepository userRepository;\n \n-    public AchievementService(AchievementRepository achievementRepository, UserRepository userRepository, PointBasedAchievementService pointBasedAchievementService,\n-            TimeBasedAchievementService timeBasedAchievementService, ProgressBasedAchievementService progressBasedAchievementService, ParticipationService participationService) {\n+    public AchievementService(AchievementRepository achievementRepository, UserRepository userRepository) {\n         this.achievementRepository = achievementRepository;\n-        this.pointBasedAchievementService = pointBasedAchievementService;\n-        this.timeBasedAchievementService = timeBasedAchievementService;\n-        this.progressBasedAchievementService = progressBasedAchievementService;\n         this.userRepository = userRepository;\n-        this.participationService = participationService;\n     }\n \n-    public Set<Achievement> findAllByUserIdAndCourseId(Long userId, Long courseId) {\n-        return achievementRepository.findAllByUserIdAndCourseId(userId, courseId);\n+    public Optional<Achievement> findById(Long achievementId) {\n+        return achievementRepository.findById(achievementId);\n     }\n \n-    @Transactional\n-    public void deleteByCourseId(Long courseId) {\n-        Set<Achievement> achievements = achievementRepository.findAllByCourseId(courseId);\n-        for (Achievement achievement : achievements) {\n-            removeFromUsers(achievement);\n-        }\n-        achievementRepository.deleteAll(achievements);\n+    public List<Achievement> findAll() {\n+        return achievementRepository.findAll();\n     }\n \n-    @Transactional\n-    public void deleteByExerciseId(Long exerciseId) {\n-        Set<Achievement> achievements = achievementRepository.findAllByExerciseId(exerciseId);\n-        for (Achievement achievement : achievements) {\n-            removeFromUsers(achievement);\n-        }\n-        achievementRepository.deleteAll(achievements);\n+    public Set<Achievement> findAllByCourseId(Long courseId) {\n+        return achievementRepository.findAllByCourseId(courseId);\n     }\n \n-    /**\n-     * Removes an achievement from all users\n-     * @param achievement achievement to be deleted\n-     */\n-    public void removeFromUsers(Achievement achievement) {\n-        var users = achievement.getUsers();\n-        for (User user : users) {\n-            user.removeAchievement(achievement);\n-        }\n-        userRepository.saveAll(users);\n+    public Set<Achievement> findAllByExerciseId(Long exerciseId) {\n+        return achievementRepository.findAllByExerciseId(exerciseId);\n     }\n \n-    public void generateForCourse(Course course) {\n-        progressBasedAchievementService.generateAchievements(course);\n+    public Set<Achievement> findAllByUserId(Long userId) {\n+        return achievementRepository.findAllByUserId(userId);\n     }\n \n-    public void generateForExercise(Exercise exercise) {\n-        pointBasedAchievementService.generateAchievements(exercise);\n-        timeBasedAchievementService.generateAchievements(exercise);\n-    }\n-\n-    @Transactional\n-    public void checkForAchievements(Result result) {\n-        var course = result.getParticipation().getExercise().getCourseViaExerciseGroupOrCourseMember();\n-        if (course.getHasAchievements() == null || !course.getHasAchievements()) {\n-            return;\n-        }\n-        var exercise = result.getParticipation().getExercise();\n-        var optionalUser = participationService.findOneStudentParticipation(result.getParticipation().getId()).getStudent();\n-        if (!optionalUser.isPresent()) {\n-            return;\n-        }\n-        var user = optionalUser.get();\n-\n-        var pointRank = pointBasedAchievementService.checkForAchievement(result);\n-        rewardAchievement(course, exercise, AchievementType.POINT, pointRank, user);\n-\n-        var timeRank = timeBasedAchievementService.checkForAchievement(result);\n-        rewardAchievement(course, exercise, AchievementType.TIME, timeRank, user);\n-\n-        var progressRank = progressBasedAchievementService.checkForAchievement(course, user);\n-        rewardAchievement(course, exercise, AchievementType.PROGRESS, progressRank, user);\n+    public Achievement save(Achievement achievement) {\n+        return achievementRepository.save(achievement);\n     }\n \n-    public void rewardAchievement(Course course, Exercise exercise, AchievementType type, AchievementRank rank, User user) {\n-        Set<Achievement> achievements;\n-        Achievement achievement;\n-\n-        if (rank == null) {\n-            return;\n-        }\n-\n-        if (exercise == null) {\n-            achievements = achievementRepository.findAllForRewardedTypeInCourse(course.getId(), type);\n-        }\n-        else {\n-            achievements = achievementRepository.findAllForRewardedTypeInExercise(course.getId(), exercise.getId(), type);\n-        }\n-\n-        var optionalAchievement = achievements.stream().filter(a -> a.getRank().equals(rank)).findAny();\n-        if (!optionalAchievement.isPresent()) {\n-            return;\n-        }\n-\n-        achievement = optionalAchievement.get();\n-        if (achievement.getUsers().contains(user)) {\n-            return;\n-        }\n-\n-        var optionalAchievementsOfHigherRank = achievements.stream().filter(a -> a.getRank().ordinal() > rank.ordinal()).collect(Collectors.toSet());\n-        for (Achievement a : optionalAchievementsOfHigherRank) {\n-            if (a.getUsers().contains(user)) {\n-                return;\n-            }\n-        }\n-\n-        var optionalAchievementsOfLowerRank = achievements.stream().filter(a -> a.getRank().ordinal() < rank.ordinal()).collect(Collectors.toSet());\n-        for (Achievement a : optionalAchievementsOfLowerRank) {\n-            if (a.getUsers().contains(user) && a.getExercise() != null) {\n-                user.removeAchievement(a);\n-            }\n-        }\n-\n-        user.addAchievement(achievement);\n-        userRepository.save(user);\n+    /**\n+     * Creates an achievement and persist it\n+     * @param title title of the achievement\n+     * @param description description of the achievement\n+     * @param icon the font awesome icon string identifier\n+     * @param rank rank of the achievement\n+     * @param course course which the achievement belongs to\n+     * @param exercise which the achievement belongs to\n+     * @return the created and persisted achievement\n+     */\n+    public Achievement create(String title, String description, String icon, AchievementRank rank, Course course, Exercise exercise) {\n+        Achievement achievement = new Achievement();\n+        achievement.setTitle(title);\n+        achievement.setDescription(description);\n+        achievement.setIcon(icon);\n+        achievement.setRank(rank);\n+        achievement.setCourse(course);\n+        achievement.setExercise(exercise);\n+        return achievementRepository.save(achievement);\n     }\n \n-    public void prepareForClient(Set<Achievement> achievements) {\n-        for (Achievement achievement : achievements) {\n-            achievement.setExercise(null);\n-            achievement.setCourse(null);\n-            achievement.setUsers(null);\n+    /**\n+     * Deletes an achievement by also removing it from all users\n+     * @param achievement achievement to be deleted\n+     */\n+    public void delete(Achievement achievement) {\n+        var users = userRepository.findAllByAchievementId(achievement.getId());\n+        achievement.setUsers(users);\n+        for (User user : users) {\n+            user.removeAchievement(achievement);\n+            userRepository.save(user);\n         }\n+        achievementRepository.delete(achievement);\n     }\n }\n", "next_change": {"commit": "116151629d403403ee9b750c30c182f44f70e233", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\nindex eff8b25290f..30708f42a32 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n", "chunk": "@@ -1,87 +1,117 @@\n package de.tum.in.www1.artemis.service;\n \n-import java.util.List;\n-import java.util.Optional;\n import java.util.Set;\n \n+import javax.transaction.Transactional;\n+\n import org.springframework.stereotype.Service;\n \n import de.tum.in.www1.artemis.domain.Achievement;\n import de.tum.in.www1.artemis.domain.Course;\n import de.tum.in.www1.artemis.domain.Exercise;\n import de.tum.in.www1.artemis.domain.User;\n-import de.tum.in.www1.artemis.domain.enumeration.AchievementRank;\n import de.tum.in.www1.artemis.repository.AchievementRepository;\n import de.tum.in.www1.artemis.repository.UserRepository;\n \n @Service\n public class AchievementService {\n \n+    private final PointBasedAchievementService pointBasedAchievementService;\n+\n+    private final TimeBasedAchievementService timeBasedAchievementService;\n+\n+    private final ProgressBasedAchievementService progressBasedAchievementService;\n+\n     private final AchievementRepository achievementRepository;\n \n     private final UserRepository userRepository;\n \n-    public AchievementService(AchievementRepository achievementRepository, UserRepository userRepository) {\n+    public AchievementService(AchievementRepository achievementRepository, UserRepository userRepository, PointBasedAchievementService pointBasedAchievementService,\n+            TimeBasedAchievementService timeBasedAchievementService, ProgressBasedAchievementService progressBasedAchievementService) {\n         this.achievementRepository = achievementRepository;\n+        this.pointBasedAchievementService = pointBasedAchievementService;\n+        this.timeBasedAchievementService = timeBasedAchievementService;\n+        this.progressBasedAchievementService = progressBasedAchievementService;\n         this.userRepository = userRepository;\n     }\n \n-    public Optional<Achievement> findById(Long achievementId) {\n-        return achievementRepository.findById(achievementId);\n-    }\n-\n-    public List<Achievement> findAll() {\n-        return achievementRepository.findAll();\n+    /**\n+     * Finds all achievements for a user in a given course and returns them as a set\n+     * @param userId\n+     * @param courseId\n+     */\n+    public Set<Achievement> findAllByUserIdAndCourseId(Long userId, Long courseId) {\n+        return achievementRepository.findAllByUserIdAndCourseId(userId, courseId);\n     }\n \n-    public Set<Achievement> findAllByCourseId(Long courseId) {\n-        return achievementRepository.findAllByCourseId(courseId);\n+    /**\n+     * Deletes all achievements that belong to the course with the given courseId\n+     * Used when a course is deleted or when achievements are disabled again for a course\n+     * @param courseId\n+     */\n+    @Transactional\n+    public void deleteByCourseId(Long courseId) {\n+        Set<Achievement> achievements = achievementRepository.findAllByCourseId(courseId);\n+        for (Achievement achievement : achievements) {\n+            removeFromUsers(achievement);\n+        }\n+        achievementRepository.deleteAll(achievements);\n     }\n \n-    public Set<Achievement> findAllByExerciseId(Long exerciseId) {\n-        return achievementRepository.findAllByExerciseId(exerciseId);\n+    /**\n+     * Deletes all achievements that belong to the exercise with the given exerciseId\n+     * Used when an exercise is deleted\n+     * @param exerciseId\n+     */\n+    @Transactional\n+    public void deleteByExerciseId(Long exerciseId) {\n+        Set<Achievement> achievements = achievementRepository.findAllByExerciseId(exerciseId);\n+        for (Achievement achievement : achievements) {\n+            removeFromUsers(achievement);\n+        }\n+        achievementRepository.deleteAll(achievements);\n     }\n \n-    public Set<Achievement> findAllByUserId(Long userId) {\n-        return achievementRepository.findAllByUserId(userId);\n+    /**\n+     * Removes an achievement from all users\n+     * @param achievement achievement to be deleted\n+     */\n+    public void removeFromUsers(Achievement achievement) {\n+        var users = achievement.getUsers();\n+        for (User user : users) {\n+            user.removeAchievement(achievement);\n+        }\n+        userRepository.saveAll(users);\n     }\n \n-    public Achievement save(Achievement achievement) {\n-        return achievementRepository.save(achievement);\n+    /**\n+     * Generates achievements for a course\n+     * Used when course is updated or created and achievements are enabled for course\n+     * @param course\n+     */\n+    public void generateForCourse(Course course) {\n+        progressBasedAchievementService.generateAchievements(course);\n     }\n \n     /**\n-     * Creates an achievement and persist it\n-     * @param title title of the achievement\n-     * @param description description of the achievement\n-     * @param icon the font awesome icon string identifier\n-     * @param rank rank of the achievement\n-     * @param course course which the achievement belongs to\n-     * @param exercise which the achievement belongs to\n-     * @return the created and persisted achievement\n+     * Generates achievements for an exercise\n+     * Used when exercise is created and achievements are enabled for corresponding course\n+     * @param exercise\n      */\n-    public Achievement create(String title, String description, String icon, AchievementRank rank, Course course, Exercise exercise) {\n-        Achievement achievement = new Achievement();\n-        achievement.setTitle(title);\n-        achievement.setDescription(description);\n-        achievement.setIcon(icon);\n-        achievement.setRank(rank);\n-        achievement.setCourse(course);\n-        achievement.setExercise(exercise);\n-        return achievementRepository.save(achievement);\n+    public void generateForExercise(Exercise exercise) {\n+        pointBasedAchievementService.generateAchievements(exercise);\n+        timeBasedAchievementService.generateAchievements(exercise);\n     }\n \n     /**\n-     * Deletes an achievement by also removing it from all users\n-     * @param achievement achievement to be deleted\n+     * Prepares the given set of achievements to be sent to the client by removing exercise, course and users\n+     * @param achievements\n      */\n-    public void delete(Achievement achievement) {\n-        var users = userRepository.findAllByAchievementId(achievement.getId());\n-        achievement.setUsers(users);\n-        for (User user : users) {\n-            user.removeAchievement(achievement);\n-            userRepository.save(user);\n+    public void prepareForClient(Set<Achievement> achievements) {\n+        for (Achievement achievement : achievements) {\n+            achievement.setExercise(null);\n+            achievement.setCourse(null);\n+            achievement.setUsers(null);\n         }\n-        achievementRepository.delete(achievement);\n     }\n }\n", "next_change": {"commit": "07837b56882d0df7027dd1422c761e34f89147f1", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\nindex 30708f42a32..4635dbaba17 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n", "chunk": "@@ -16,102 +14,43 @@ import de.tum.in.www1.artemis.repository.UserRepository;\n @Service\n public class AchievementService {\n \n-    private final PointBasedAchievementService pointBasedAchievementService;\n-\n-    private final TimeBasedAchievementService timeBasedAchievementService;\n-\n-    private final ProgressBasedAchievementService progressBasedAchievementService;\n-\n     private final AchievementRepository achievementRepository;\n \n     private final UserRepository userRepository;\n \n-    public AchievementService(AchievementRepository achievementRepository, UserRepository userRepository, PointBasedAchievementService pointBasedAchievementService,\n-            TimeBasedAchievementService timeBasedAchievementService, ProgressBasedAchievementService progressBasedAchievementService) {\n+    public AchievementService(AchievementRepository achievementRepository, UserRepository userRepository) {\n         this.achievementRepository = achievementRepository;\n-        this.pointBasedAchievementService = pointBasedAchievementService;\n-        this.timeBasedAchievementService = timeBasedAchievementService;\n-        this.progressBasedAchievementService = progressBasedAchievementService;\n         this.userRepository = userRepository;\n     }\n \n-    /**\n-     * Finds all achievements for a user in a given course and returns them as a set\n-     * @param userId\n-     * @param courseId\n-     */\n-    public Set<Achievement> findAllByUserIdAndCourseId(Long userId, Long courseId) {\n-        return achievementRepository.findAllByUserIdAndCourseId(userId, courseId);\n+    public Optional<Achievement> findById(Long achievementId) {\n+        return achievementRepository.findById(achievementId);\n     }\n \n-    /**\n-     * Deletes all achievements that belong to the course with the given courseId\n-     * Used when a course is deleted or when achievements are disabled again for a course\n-     * @param courseId\n-     */\n     @Transactional\n-    public void deleteByCourseId(Long courseId) {\n-        Set<Achievement> achievements = achievementRepository.findAllByCourseId(courseId);\n-        for (Achievement achievement : achievements) {\n-            removeFromUsers(achievement);\n-        }\n-        achievementRepository.deleteAll(achievements);\n+    public Set<Achievement> findAllForCourse(Long courseId, Long userId) {\n+        var achievements = achievementRepository.getAllByCourseId(courseId);\n+        return hideUsersInAchievements(achievements, userId);\n     }\n \n-    /**\n-     * Deletes all achievements that belong to the exercise with the given exerciseId\n-     * Used when an exercise is deleted\n-     * @param exerciseId\n-     */\n     @Transactional\n-    public void deleteByExerciseId(Long exerciseId) {\n-        Set<Achievement> achievements = achievementRepository.findAllByExerciseId(exerciseId);\n-        for (Achievement achievement : achievements) {\n-            removeFromUsers(achievement);\n-        }\n-        achievementRepository.deleteAll(achievements);\n+    public Set<Achievement> findAllForUser(Long userId) {\n+        var achievements = achievementRepository.getAllByUserId(userId);\n+        return hideUsersInAchievements(achievements, userId);\n     }\n \n-    /**\n-     * Removes an achievement from all users\n-     * @param achievement achievement to be deleted\n-     */\n-    public void removeFromUsers(Achievement achievement) {\n-        var users = achievement.getUsers();\n-        for (User user : users) {\n+    public void delete(Achievement achievement) {\n+        for (User user : achievement.getUsers()) {\n             user.removeAchievement(achievement);\n+            userRepository.save(user);\n         }\n-        userRepository.saveAll(users);\n-    }\n-\n-    /**\n-     * Generates achievements for a course\n-     * Used when course is updated or created and achievements are enabled for course\n-     * @param course\n-     */\n-    public void generateForCourse(Course course) {\n-        progressBasedAchievementService.generateAchievements(course);\n-    }\n-\n-    /**\n-     * Generates achievements for an exercise\n-     * Used when exercise is created and achievements are enabled for corresponding course\n-     * @param exercise\n-     */\n-    public void generateForExercise(Exercise exercise) {\n-        pointBasedAchievementService.generateAchievements(exercise);\n-        timeBasedAchievementService.generateAchievements(exercise);\n+        achievementRepository.delete(achievement);\n     }\n \n-    /**\n-     * Prepares the given set of achievements to be sent to the client by removing exercise, course and users\n-     * @param achievements\n-     */\n-    public void prepareForClient(Set<Achievement> achievements) {\n+    private Set<Achievement> hideUsersInAchievements(Set<Achievement> achievements, Long userId) {\n         for (Achievement achievement : achievements) {\n-            achievement.setExercise(null);\n-            achievement.setCourse(null);\n-            achievement.setUsers(null);\n+            achievement.getUsers().removeIf(userToRemove -> !userToRemove.getId().equals(userId));\n         }\n+        return achievements;\n     }\n }\n", "next_change": {"commit": "f0bc01d15b7e677a36aa71c0319f71bb6ed7a885", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\nindex 4635dbaba17..06905809bef 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n", "chunk": "@@ -46,11 +41,4 @@ public class AchievementService {\n         }\n         achievementRepository.delete(achievement);\n     }\n-\n-    private Set<Achievement> hideUsersInAchievements(Set<Achievement> achievements, Long userId) {\n-        for (Achievement achievement : achievements) {\n-            achievement.getUsers().removeIf(userToRemove -> !userToRemove.getId().equals(userId));\n-        }\n-        return achievements;\n-    }\n }\n", "next_change": {"commit": "fd13e3d27e731c1b8d1a2dea0e1c43ae2468034b", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\nindex 06905809bef..adc27ea88a9 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n", "chunk": "@@ -26,16 +29,44 @@ public class AchievementService {\n         return achievementRepository.findById(achievementId);\n     }\n \n-    public Set<Achievement> findAllForCourse(Long courseId) {\n-        return achievementRepository.getAllByCourseId(courseId);\n+    public List<Achievement> findAll() {\n+        return achievementRepository.findAll();\n     }\n \n-    public Set<Achievement> findAllForUser(Long userId) {\n-        return achievementRepository.getAllByUserId(userId);\n+    public Set<Achievement> findAllByCourseId(Long courseId) {\n+        return achievementRepository.findAllByCourseId(courseId);\n     }\n \n+    public Set<Achievement> findAllByExerciseId(Long exerciseId) {\n+        return achievementRepository.findAllByExerciseId(exerciseId);\n+    }\n+\n+    public Set<Achievement> findAllByUserId(Long userId) {\n+        return achievementRepository.findAllByUserId(userId);\n+    }\n+\n+    public Achievement save(Achievement achievement) {\n+        return achievementRepository.save(achievement);\n+    }\n+\n+    public Achievement create(String title, String description, String icon, Rank rank, Course course) {\n+        Achievement achievement = new Achievement();\n+        achievement.setTitle(title);\n+        achievement.setDescription(description);\n+        achievement.setIcon(icon);\n+        achievement.setRank(rank);\n+        achievement.setCourse(course);\n+        return achievementRepository.save(achievement);\n+    }\n+\n+    /**\n+     * Deletes an achievement by also removing it from all users\n+     * @param achievement achievement to be deleted\n+     */\n     public void delete(Achievement achievement) {\n-        for (User user : achievement.getUsers()) {\n+        var users = userRepository.findAllWithEagerAchievements(achievement.getId());\n+        achievement.setUsers(users);\n+        for (User user : users) {\n             user.removeAchievement(achievement);\n             userRepository.save(user);\n         }\n", "next_change": {"commit": "e71c08bfb8259e519230dcb95a44996794c4e79e", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\nindex adc27ea88a9..2440806b0f3 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n", "chunk": "@@ -64,7 +64,7 @@ public class AchievementService {\n      * @param achievement achievement to be deleted\n      */\n     public void delete(Achievement achievement) {\n-        var users = userRepository.findAllWithEagerAchievements(achievement.getId());\n+        var users = userRepository.findAllByAchievementId(achievement.getId());\n         achievement.setUsers(users);\n         for (User user : users) {\n             user.removeAchievement(achievement);\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}, {"oid": "07837b56882d0df7027dd1422c761e34f89147f1", "url": "https://github.com/ls1intum/Artemis/commit/07837b56882d0df7027dd1422c761e34f89147f1", "message": "update variable name", "committedDate": "2020-08-30T20:34:54Z", "type": "commit"}, {"oid": "f0bc01d15b7e677a36aa71c0319f71bb6ed7a885", "url": "https://github.com/ls1intum/Artemis/commit/f0bc01d15b7e677a36aa71c0319f71bb6ed7a885", "message": "few fixes", "committedDate": "2020-08-30T22:23:52Z", "type": "commit"}, {"oid": "cbe0fa5d020deb1872587771311cf95735d6fbeb", "url": "https://github.com/ls1intum/Artemis/commit/cbe0fa5d020deb1872587771311cf95735d6fbeb", "message": "Merge branch 'feature/achievements/storage' of https://github.com/ls1intum/Artemis into feature/achievements/storage", "committedDate": "2020-08-30T22:25:53Z", "type": "commit"}, {"oid": "1882f801a065a93bf07972cc6cbca1f623579186", "url": "https://github.com/ls1intum/Artemis/commit/1882f801a065a93bf07972cc6cbca1f623579186", "message": "fix wrong variable", "committedDate": "2020-08-30T22:30:32Z", "type": "commit"}, {"oid": "31966613a4ee4179be8f16688ef84aa51272e675", "url": "https://github.com/ls1intum/Artemis/commit/31966613a4ee4179be8f16688ef84aa51272e675", "message": "add documentation", "committedDate": "2020-08-30T22:59:23Z", "type": "commit"}, {"oid": "5a890b63c2cf16cf422548fe9d20849d71967bcd", "url": "https://github.com/ls1intum/Artemis/commit/5a890b63c2cf16cf422548fe9d20849d71967bcd", "message": "trigger new build 1/2", "committedDate": "2020-08-31T09:16:58Z", "type": "commit"}, {"oid": "1631126ec91b00529db9044aca65d2b9eae6e1d1", "url": "https://github.com/ls1intum/Artemis/commit/1631126ec91b00529db9044aca65d2b9eae6e1d1", "message": "trigger new build 2/2", "committedDate": "2020-08-31T09:17:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMyNDUzNg==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r480324536", "body": "Is there no better way to check if a user is logged in? If roles change in the future, they would need to be adjusted here as well.", "bodyText": "Is there no better way to check if a user is logged in? If roles change in the future, they would need to be adjusted here as well.", "bodyHTML": "<p dir=\"auto\">Is there no better way to check if a user is logged in? If roles change in the future, they would need to be adjusted here as well.</p>", "author": "linusmichel", "createdAt": "2020-08-31T18:55:34Z", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java", "diffHunk": "@@ -0,0 +1,130 @@\n+package de.tum.in.www1.artemis.web.rest;\n+\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.springframework.web.bind.annotation.*;\n+\n+import de.tum.in.www1.artemis.domain.Achievement;\n+import de.tum.in.www1.artemis.domain.Course;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.repository.AchievementRepository;\n+import de.tum.in.www1.artemis.service.AchievementService;\n+import de.tum.in.www1.artemis.service.AuthorizationCheckService;\n+import de.tum.in.www1.artemis.service.UserService;\n+import de.tum.in.www1.artemis.web.rest.errors.AccessForbiddenException;\n+import de.tum.in.www1.artemis.web.rest.util.HeaderUtil;\n+\n+/**\n+ * REST controller for managing Achievements.\n+ */\n+@RestController\n+@RequestMapping(\"/api\")\n+public class AchievementResource {\n+\n+    private static final String ENTITY_NAME = \"achievement\";\n+\n+    @Value(\"${jhipster.clientApp.name}\")\n+    private String applicationName;\n+\n+    private final Logger log = LoggerFactory.getLogger(AchievementResource.class);\n+\n+    private final AuthorizationCheckService authCheckService;\n+\n+    private final AchievementService achievementService;\n+\n+    private final UserService userService;\n+\n+    private final AchievementRepository achievementRepository;\n+\n+    public AchievementResource(AuthorizationCheckService authCheckService, AchievementService achievementService, UserService userService,\n+            AchievementRepository achievementRepository) {\n+        this.authCheckService = authCheckService;\n+        this.achievementService = achievementService;\n+        this.userService = userService;\n+        this.achievementRepository = achievementRepository;\n+    }\n+\n+    /**\n+     * GET /achievements : Get all achievements for user.\n+     *\n+     * @return the ResponseEntity with status 200 (OK) and with the found achievements as body\n+     */\n+    @GetMapping(\"/achievements\")\n+    @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")", "originalCommit": "1631126ec91b00529db9044aca65d2b9eae6e1d1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM0OTQ5MA==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r480349490", "bodyText": "Well, this is how we usually check for access rights based on authorities", "author": "balazs-czopf", "createdAt": "2020-08-31T19:28:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMyNDUzNg=="}], "type": "inlineReview", "revised_code": {"commit": "6aa68b0ab7a071fa631c7c72cdb8ea02ccf15a39", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\nindex f86a24ff382..9a9cebd81ef 100644\n--- a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n+++ b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n", "chunk": "@@ -61,7 +55,7 @@ public class AchievementResource {\n     public ResponseEntity<Set<Achievement>> getAchievementsForUser() {\n         User user = userService.getUser();\n         log.debug(\"REST request to get achievements for user : {}\", user.getLogin());\n-        Set<Achievement> achievements = achievementService.findAllForUser(user.getId());\n+        Set<Achievement> achievements = achievementService.findAllByUserId(user.getId());\n         return ResponseEntity.ok(achievements);\n     }\n \n", "next_change": {"commit": "ee25bd720633e2da0f2ad7b9354358590178e20f", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\nindex 9a9cebd81ef..d5f8bbf6398 100644\n--- a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n+++ b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n", "chunk": "@@ -56,6 +61,7 @@ public class AchievementResource {\n         User user = userService.getUser();\n         log.debug(\"REST request to get achievements for user : {}\", user.getLogin());\n         Set<Achievement> achievements = achievementService.findAllByUserId(user.getId());\n+        achievementService.prepareForClient(achievements);\n         return ResponseEntity.ok(achievements);\n     }\n \n", "next_change": {"commit": "64778c859b7f2d14015c50aedae62db4c98bcee7", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\nindex d5f8bbf6398..9a9cebd81ef 100644\n--- a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n+++ b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n", "chunk": "@@ -61,7 +56,6 @@ public class AchievementResource {\n         User user = userService.getUser();\n         log.debug(\"REST request to get achievements for user : {}\", user.getLogin());\n         Set<Achievement> achievements = achievementService.findAllByUserId(user.getId());\n-        achievementService.prepareForClient(achievements);\n         return ResponseEntity.ok(achievements);\n     }\n \n", "next_change": {"commit": "8d5bfc049d9e75323290b069e7343df6fc579ee7", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\nindex 9a9cebd81ef..19fd5df9305 100644\n--- a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n+++ b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n", "chunk": "@@ -26,39 +21,20 @@ import de.tum.in.www1.artemis.web.rest.util.HeaderUtil;\n @RequestMapping(\"/api\")\n public class AchievementResource {\n \n-    private static final String ENTITY_NAME = \"achievement\";\n-\n-    @Value(\"${jhipster.clientApp.name}\")\n-    private String applicationName;\n-\n     private final Logger log = LoggerFactory.getLogger(AchievementResource.class);\n \n-    private final AuthorizationCheckService authCheckService;\n-\n     private final AchievementService achievementService;\n \n+    private final AchievementRepository achievementRepository;\n+\n     private final UserService userService;\n \n-    public AchievementResource(AuthorizationCheckService authCheckService, AchievementService achievementService, UserService userService) {\n-        this.authCheckService = authCheckService;\n+    public AchievementResource(AchievementService achievementService, AchievementRepository achievementRepository, UserService userService) {\n         this.achievementService = achievementService;\n+        this.achievementRepository = achievementRepository;\n         this.userService = userService;\n     }\n \n-    /**\n-     * GET /achievements : Get all achievements for user.\n-     *\n-     * @return the ResponseEntity with status 200 (OK) and with the found achievements as body\n-     */\n-    @GetMapping(\"/achievements\")\n-    @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n-    public ResponseEntity<Set<Achievement>> getAchievementsForUser() {\n-        User user = userService.getUser();\n-        log.debug(\"REST request to get achievements for user : {}\", user.getLogin());\n-        Set<Achievement> achievements = achievementService.findAllByUserId(user.getId());\n-        return ResponseEntity.ok(achievements);\n-    }\n-\n     /**\n      * GET /courses/{courseId}/achievements : Get all achievements for course.\n      *\n", "next_change": {"commit": "d253878f2c48324cce17332d858163dc22f932f6", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\nindex 19fd5df9305..2367bc01f2b 100644\n--- a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n+++ b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n", "chunk": "@@ -36,9 +36,9 @@ public class AchievementResource {\n     }\n \n     /**\n-     * GET /courses/{courseId}/achievements : Get all achievements for course.\n+     * GET /courses/{courseId}/achievements : Get all achievements for requesting user in given course.\n      *\n-     * @param courseId the course to which the achievements belong to\n+     * @param courseId\n      * @return the ResponseEntity with status 200 (OK) and with the found achievements as body\n      */\n     @GetMapping(\"/courses/{courseId}/achievements\")\n", "next_change": {"commit": "7a5de1a37353eb19f93ef49666bba352198834cb", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\nindex 2367bc01f2b..9a9cebd81ef 100644\n--- a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n+++ b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n", "chunk": "@@ -21,33 +26,103 @@ import de.tum.in.www1.artemis.service.UserService;\n @RequestMapping(\"/api\")\n public class AchievementResource {\n \n+    private static final String ENTITY_NAME = \"achievement\";\n+\n+    @Value(\"${jhipster.clientApp.name}\")\n+    private String applicationName;\n+\n     private final Logger log = LoggerFactory.getLogger(AchievementResource.class);\n \n-    private final AchievementService achievementService;\n+    private final AuthorizationCheckService authCheckService;\n \n-    private final AchievementRepository achievementRepository;\n+    private final AchievementService achievementService;\n \n     private final UserService userService;\n \n-    public AchievementResource(AchievementService achievementService, AchievementRepository achievementRepository, UserService userService) {\n+    public AchievementResource(AuthorizationCheckService authCheckService, AchievementService achievementService, UserService userService) {\n+        this.authCheckService = authCheckService;\n         this.achievementService = achievementService;\n-        this.achievementRepository = achievementRepository;\n         this.userService = userService;\n     }\n \n     /**\n-     * GET /courses/{courseId}/achievements : Get all achievements for requesting user in given course.\n+     * GET /achievements : Get all achievements for user.\n      *\n-     * @param courseId\n+     * @return the ResponseEntity with status 200 (OK) and with the found achievements as body\n+     */\n+    @GetMapping(\"/achievements\")\n+    @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Set<Achievement>> getAchievementsForUser() {\n+        User user = userService.getUser();\n+        log.debug(\"REST request to get achievements for user : {}\", user.getLogin());\n+        Set<Achievement> achievements = achievementService.findAllByUserId(user.getId());\n+        return ResponseEntity.ok(achievements);\n+    }\n+\n+    /**\n+     * GET /courses/{courseId}/achievements : Get all achievements for course.\n+     *\n+     * @param courseId the course to which the achievements belong to\n      * @return the ResponseEntity with status 200 (OK) and with the found achievements as body\n      */\n     @GetMapping(\"/courses/{courseId}/achievements\")\n     @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n-    public ResponseEntity<Set<Achievement>> getAchievementsForUserInCourse(@PathVariable Long courseId) {\n-        User user = userService.getUserWithGroupsAndAuthorities();\n-        log.debug(\"REST request to get achievements for user : {} in course : {}\", user.getLogin(), courseId);\n-        Set<Achievement> achievements = achievementRepository.findAllByUserIdAndCourseId(user.getId(), courseId);\n-        achievementService.prepareForClient(achievements);\n+    public ResponseEntity<Set<Achievement>> getAchievementsForCourse(@PathVariable Long courseId) {\n+        log.debug(\"REST request to get achievements for course : {}\", courseId);\n+        Set<Achievement> achievements = achievementService.findAllByCourseId(courseId);\n         return ResponseEntity.ok(achievements);\n     }\n+\n+    /**\n+     * PUT /achievements : Updates an existing achievement.\n+     *\n+     * @param achievement the achievement to update\n+     * @return the ResponseEntity with status 200 (OK) and with body the updated achievement, or with status 500\n+     *         (Internal Server Error) if the achievement couldn't be updated\n+     */\n+    @PutMapping(\"/achievements\")\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Achievement> updateAchievement(@RequestBody Achievement achievement) {\n+        log.debug(\"REST request to update Achievement : {}\", achievement);\n+\n+        if (achievement.getId() == null) {\n+            return ResponseEntity.badRequest().build();\n+        }\n+\n+        Course course = achievement.getCourse();\n+        User user = userService.getUserWithGroupsAndAuthorities();\n+        if (!authCheckService.isAtLeastInstructorInCourse(course, user)) {\n+            throw new AccessForbiddenException(\"You are not allowed to access this resource\");\n+        }\n+\n+        Achievement savedAchievement = achievementService.save(achievement);\n+        return ResponseEntity.ok().headers(HeaderUtil.createEntityUpdateAlert(applicationName, true, ENTITY_NAME, savedAchievement.getId().toString())).body(savedAchievement);\n+    }\n+\n+    /**\n+     * DELETE /achievements/:achievementId : delete the \"id\" achievement.\n+     *\n+     * @param achievementId the id of the achievement to delete\n+     * @return the ResponseEntity with status 200 (OK)\n+     */\n+    @DeleteMapping(\"/achievements/{achievementId}\")\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Void> deleteAchievement(@PathVariable long achievementId) {\n+        log.info(\"REST request to delete Achievement : {}\", achievementId);\n+        User user = userService.getUserWithGroupsAndAuthorities();\n+        Optional<Achievement> optionalAchievement = achievementService.findById(achievementId);\n+        if (optionalAchievement.isEmpty()) {\n+            return ResponseEntity.notFound().build();\n+        }\n+        Achievement achievement = optionalAchievement.get();\n+        Course course = achievement.getCourse();\n+        if (!authCheckService.isAtLeastInstructorInCourse(course, user)) {\n+            throw new AccessForbiddenException(\"You are not allowed to access this resource\");\n+        }\n+\n+        log.info(\"User \" + user.getLogin() + \" has requested to delete the achievement {}\", achievement.getId());\n+        achievementService.delete(achievement);\n+        return ResponseEntity.ok().headers(HeaderUtil.createEntityDeletionAlert(applicationName, true, ENTITY_NAME, achievement.getId().toString())).build();\n+    }\n+\n }\n", "next_change": {"commit": "116151629d403403ee9b750c30c182f44f70e233", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\nindex 9a9cebd81ef..2367bc01f2b 100644\n--- a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n+++ b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n", "chunk": "@@ -26,103 +21,33 @@ import de.tum.in.www1.artemis.web.rest.util.HeaderUtil;\n @RequestMapping(\"/api\")\n public class AchievementResource {\n \n-    private static final String ENTITY_NAME = \"achievement\";\n-\n-    @Value(\"${jhipster.clientApp.name}\")\n-    private String applicationName;\n-\n     private final Logger log = LoggerFactory.getLogger(AchievementResource.class);\n \n-    private final AuthorizationCheckService authCheckService;\n-\n     private final AchievementService achievementService;\n \n+    private final AchievementRepository achievementRepository;\n+\n     private final UserService userService;\n \n-    public AchievementResource(AuthorizationCheckService authCheckService, AchievementService achievementService, UserService userService) {\n-        this.authCheckService = authCheckService;\n+    public AchievementResource(AchievementService achievementService, AchievementRepository achievementRepository, UserService userService) {\n         this.achievementService = achievementService;\n+        this.achievementRepository = achievementRepository;\n         this.userService = userService;\n     }\n \n     /**\n-     * GET /achievements : Get all achievements for user.\n+     * GET /courses/{courseId}/achievements : Get all achievements for requesting user in given course.\n      *\n-     * @return the ResponseEntity with status 200 (OK) and with the found achievements as body\n-     */\n-    @GetMapping(\"/achievements\")\n-    @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n-    public ResponseEntity<Set<Achievement>> getAchievementsForUser() {\n-        User user = userService.getUser();\n-        log.debug(\"REST request to get achievements for user : {}\", user.getLogin());\n-        Set<Achievement> achievements = achievementService.findAllByUserId(user.getId());\n-        return ResponseEntity.ok(achievements);\n-    }\n-\n-    /**\n-     * GET /courses/{courseId}/achievements : Get all achievements for course.\n-     *\n-     * @param courseId the course to which the achievements belong to\n+     * @param courseId\n      * @return the ResponseEntity with status 200 (OK) and with the found achievements as body\n      */\n     @GetMapping(\"/courses/{courseId}/achievements\")\n     @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n-    public ResponseEntity<Set<Achievement>> getAchievementsForCourse(@PathVariable Long courseId) {\n-        log.debug(\"REST request to get achievements for course : {}\", courseId);\n-        Set<Achievement> achievements = achievementService.findAllByCourseId(courseId);\n-        return ResponseEntity.ok(achievements);\n-    }\n-\n-    /**\n-     * PUT /achievements : Updates an existing achievement.\n-     *\n-     * @param achievement the achievement to update\n-     * @return the ResponseEntity with status 200 (OK) and with body the updated achievement, or with status 500\n-     *         (Internal Server Error) if the achievement couldn't be updated\n-     */\n-    @PutMapping(\"/achievements\")\n-    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n-    public ResponseEntity<Achievement> updateAchievement(@RequestBody Achievement achievement) {\n-        log.debug(\"REST request to update Achievement : {}\", achievement);\n-\n-        if (achievement.getId() == null) {\n-            return ResponseEntity.badRequest().build();\n-        }\n-\n-        Course course = achievement.getCourse();\n+    public ResponseEntity<Set<Achievement>> getAchievementsForUserInCourse(@PathVariable Long courseId) {\n         User user = userService.getUserWithGroupsAndAuthorities();\n-        if (!authCheckService.isAtLeastInstructorInCourse(course, user)) {\n-            throw new AccessForbiddenException(\"You are not allowed to access this resource\");\n-        }\n-\n-        Achievement savedAchievement = achievementService.save(achievement);\n-        return ResponseEntity.ok().headers(HeaderUtil.createEntityUpdateAlert(applicationName, true, ENTITY_NAME, savedAchievement.getId().toString())).body(savedAchievement);\n-    }\n-\n-    /**\n-     * DELETE /achievements/:achievementId : delete the \"id\" achievement.\n-     *\n-     * @param achievementId the id of the achievement to delete\n-     * @return the ResponseEntity with status 200 (OK)\n-     */\n-    @DeleteMapping(\"/achievements/{achievementId}\")\n-    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n-    public ResponseEntity<Void> deleteAchievement(@PathVariable long achievementId) {\n-        log.info(\"REST request to delete Achievement : {}\", achievementId);\n-        User user = userService.getUserWithGroupsAndAuthorities();\n-        Optional<Achievement> optionalAchievement = achievementService.findById(achievementId);\n-        if (optionalAchievement.isEmpty()) {\n-            return ResponseEntity.notFound().build();\n-        }\n-        Achievement achievement = optionalAchievement.get();\n-        Course course = achievement.getCourse();\n-        if (!authCheckService.isAtLeastInstructorInCourse(course, user)) {\n-            throw new AccessForbiddenException(\"You are not allowed to access this resource\");\n-        }\n-\n-        log.info(\"User \" + user.getLogin() + \" has requested to delete the achievement {}\", achievement.getId());\n-        achievementService.delete(achievement);\n-        return ResponseEntity.ok().headers(HeaderUtil.createEntityDeletionAlert(applicationName, true, ENTITY_NAME, achievement.getId().toString())).build();\n+        log.debug(\"REST request to get achievements for user : {} in course : {}\", user.getLogin(), courseId);\n+        Set<Achievement> achievements = achievementRepository.findAllByUserIdAndCourseId(user.getId(), courseId);\n+        achievementService.prepareForClient(achievements);\n+        return ResponseEntity.ok(achievements);\n     }\n-\n }\n", "next_change": {"commit": "53c319a21a4053a341e9b24da4987de5abfb656d", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\nindex 2367bc01f2b..7789b9e0412 100644\n--- a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n+++ b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n", "chunk": "@@ -46,7 +42,7 @@ public class AchievementResource {\n     public ResponseEntity<Set<Achievement>> getAchievementsForUserInCourse(@PathVariable Long courseId) {\n         User user = userService.getUserWithGroupsAndAuthorities();\n         log.debug(\"REST request to get achievements for user : {} in course : {}\", user.getLogin(), courseId);\n-        Set<Achievement> achievements = achievementRepository.findAllByUserIdAndCourseId(user.getId(), courseId);\n+        Set<Achievement> achievements = achievementService.findAllByUserIdAndCourseId(user.getId(), courseId);\n         achievementService.prepareForClient(achievements);\n         return ResponseEntity.ok(achievements);\n     }\n", "next_change": {"commit": "8e040450690f9f7b8962366e1d892df304682c95", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\nindex 7789b9e0412..4627a735259 100644\n--- a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n+++ b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n", "chunk": "@@ -20,30 +28,103 @@ import de.tum.in.www1.artemis.service.UserService;\n @RequestMapping(\"/api\")\n public class AchievementResource {\n \n+    private static final String ENTITY_NAME = \"achievement\";\n+\n+    @Value(\"${jhipster.clientApp.name}\")\n+    private String applicationName;\n+\n     private final Logger log = LoggerFactory.getLogger(AchievementResource.class);\n \n+    private final AuthorizationCheckService authCheckService;\n+\n     private final AchievementService achievementService;\n \n     private final UserService userService;\n \n-    public AchievementResource(AchievementService achievementService, UserService userService) {\n+    private final AchievementRepository achievementRepository;\n+\n+    public AchievementResource(AuthorizationCheckService authCheckService, AchievementService achievementService, UserService userService,\n+            AchievementRepository achievementRepository) {\n+        this.authCheckService = authCheckService;\n         this.achievementService = achievementService;\n         this.userService = userService;\n+        this.achievementRepository = achievementRepository;\n     }\n \n     /**\n-     * GET /courses/{courseId}/achievements : Get all achievements for requesting user in given course.\n+     * GET /achievements : Get all achievements for user.\n      *\n-     * @param courseId\n+     * @return the ResponseEntity with status 200 (OK) and with the found achievements as body\n+     */\n+    @GetMapping(\"/achievements\")\n+    @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Set<Achievement>> getAchievementsForUser() {\n+        User user = userService.getUser();\n+        log.debug(\"REST request to get achievements for user : {}\", user.getLogin());\n+        Set<Achievement> achievements = achievementService.findAllForUser(user.getId());\n+        return ResponseEntity.ok(achievements);\n+    }\n+\n+    /**\n+     * GET /courses/{courseId}/achievements : Get all achievements for course.\n+     *\n+     * @param courseId the course to which the achievements belong to\n      * @return the ResponseEntity with status 200 (OK) and with the found achievements as body\n      */\n     @GetMapping(\"/courses/{courseId}/achievements\")\n     @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n-    public ResponseEntity<Set<Achievement>> getAchievementsForUserInCourse(@PathVariable Long courseId) {\n-        User user = userService.getUserWithGroupsAndAuthorities();\n-        log.debug(\"REST request to get achievements for user : {} in course : {}\", user.getLogin(), courseId);\n-        Set<Achievement> achievements = achievementService.findAllByUserIdAndCourseId(user.getId(), courseId);\n-        achievementService.prepareForClient(achievements);\n+    public ResponseEntity<Set<Achievement>> getAchievementsForCourse(@PathVariable Long courseId) {\n+        log.debug(\"REST request to get achievements for course : {}\", courseId);\n+        Set<Achievement> achievements = achievementService.findAllForCourse(courseId);\n         return ResponseEntity.ok(achievements);\n     }\n+\n+    /**\n+     * PUT /achievements : Updates an existing achievement.\n+     *\n+     * @param achievement the achievement to update\n+     * @return the ResponseEntity with status 200 (OK) and with body the updated achievement, or with status 500\n+     *         (Internal Server Error) if the achievement couldn't be updated\n+     */\n+    @PutMapping(\"/achievements\")\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Achievement> updateAchievement(@RequestBody Achievement achievement) {\n+        log.debug(\"REST request to update Achievement : {}\", achievement);\n+\n+        if (achievement.getId() == null) {\n+            return ResponseEntity.badRequest().build();\n+        }\n+\n+        Course course = achievement.getCourse();\n+        User user = userService.getUserWithGroupsAndAuthorities();\n+        if (!authCheckService.isAtLeastInstructorInCourse(course, user)) {\n+            throw new AccessForbiddenException(\"You are not allowed to access this resource\");\n+        }\n+\n+        Achievement savedAchievement = achievementRepository.save(achievement);\n+        return ResponseEntity.ok().headers(HeaderUtil.createEntityUpdateAlert(applicationName, true, ENTITY_NAME, savedAchievement.getId().toString())).body(savedAchievement);\n+    }\n+\n+    /**\n+     * DELETE /achievements/:achievementId : delete the \"id\" achievement.\n+     *\n+     * @param achievementId the id of the achievement to delete\n+     * @return the ResponseEntity with status 200 (OK)\n+     */\n+    @DeleteMapping(\"/achievements/{achievementId}\")\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    @Transactional\n+    public ResponseEntity<Void> deleteAchievement(@PathVariable long achievementId) {\n+        log.info(\"REST request to delete Achievement : {}\", achievementId);\n+        User user = userService.getUserWithGroupsAndAuthorities();\n+        Optional<Achievement> optionalAchievement = achievementService.findById(achievementId);\n+        if (optionalAchievement.isEmpty()) {\n+            return ResponseEntity.notFound().build();\n+        }\n+        Achievement achievement = optionalAchievement.get();\n+        log.info(\"User \" + user.getLogin() + \" has requested to delete the achievement {}\", achievement.getId());\n+        achievementService.delete(achievement);\n+        return ResponseEntity.ok().headers(HeaderUtil.createEntityDeletionAlert(applicationName, true, ENTITY_NAME, achievement.getId().toString())).build();\n+    }\n+\n }\n", "next_change": {"commit": "0616ac4ef001698a1e962c595c2ceecc0eb76dd0", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\nindex 4627a735259..efa5f0e0668 100644\n--- a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n+++ b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n", "chunk": "@@ -122,6 +122,11 @@ public class AchievementResource {\n             return ResponseEntity.notFound().build();\n         }\n         Achievement achievement = optionalAchievement.get();\n+        Course course = achievement.getCourse();\n+        if (!authCheckService.isAtLeastInstructorInCourse(course, user)) {\n+            throw new AccessForbiddenException(\"You are not allowed to access this resource\");\n+        }\n+\n         log.info(\"User \" + user.getLogin() + \" has requested to delete the achievement {}\", achievement.getId());\n         achievementService.delete(achievement);\n         return ResponseEntity.ok().headers(HeaderUtil.createEntityDeletionAlert(applicationName, true, ENTITY_NAME, achievement.getId().toString())).build();\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMyNDc1OQ==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r480324759", "body": "Is there no better way to check if a user is logged in? If roles change in the future, they would need to be adjusted here as well.", "bodyText": "Is there no better way to check if a user is logged in? If roles change in the future, they would need to be adjusted here as well.", "bodyHTML": "<p dir=\"auto\">Is there no better way to check if a user is logged in? If roles change in the future, they would need to be adjusted here as well.</p>", "author": "linusmichel", "createdAt": "2020-08-31T18:55:53Z", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java", "diffHunk": "@@ -0,0 +1,130 @@\n+package de.tum.in.www1.artemis.web.rest;\n+\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.springframework.web.bind.annotation.*;\n+\n+import de.tum.in.www1.artemis.domain.Achievement;\n+import de.tum.in.www1.artemis.domain.Course;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.repository.AchievementRepository;\n+import de.tum.in.www1.artemis.service.AchievementService;\n+import de.tum.in.www1.artemis.service.AuthorizationCheckService;\n+import de.tum.in.www1.artemis.service.UserService;\n+import de.tum.in.www1.artemis.web.rest.errors.AccessForbiddenException;\n+import de.tum.in.www1.artemis.web.rest.util.HeaderUtil;\n+\n+/**\n+ * REST controller for managing Achievements.\n+ */\n+@RestController\n+@RequestMapping(\"/api\")\n+public class AchievementResource {\n+\n+    private static final String ENTITY_NAME = \"achievement\";\n+\n+    @Value(\"${jhipster.clientApp.name}\")\n+    private String applicationName;\n+\n+    private final Logger log = LoggerFactory.getLogger(AchievementResource.class);\n+\n+    private final AuthorizationCheckService authCheckService;\n+\n+    private final AchievementService achievementService;\n+\n+    private final UserService userService;\n+\n+    private final AchievementRepository achievementRepository;\n+\n+    public AchievementResource(AuthorizationCheckService authCheckService, AchievementService achievementService, UserService userService,\n+            AchievementRepository achievementRepository) {\n+        this.authCheckService = authCheckService;\n+        this.achievementService = achievementService;\n+        this.userService = userService;\n+        this.achievementRepository = achievementRepository;\n+    }\n+\n+    /**\n+     * GET /achievements : Get all achievements for user.\n+     *\n+     * @return the ResponseEntity with status 200 (OK) and with the found achievements as body\n+     */\n+    @GetMapping(\"/achievements\")\n+    @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Set<Achievement>> getAchievementsForUser() {\n+        User user = userService.getUser();\n+        log.debug(\"REST request to get achievements for user : {}\", user.getLogin());\n+        Set<Achievement> achievements = achievementService.findAllForUser(user.getId());\n+        return ResponseEntity.ok(achievements);\n+    }\n+\n+    /**\n+     * GET /courses/{courseId}/achievements : Get all achievements for course.\n+     *\n+     * @param courseId the course to which the achievements belong to\n+     * @return the ResponseEntity with status 200 (OK) and with the found achievements as body\n+     */\n+    @GetMapping(\"/courses/{courseId}/achievements\")\n+    @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")", "originalCommit": "1631126ec91b00529db9044aca65d2b9eae6e1d1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM0OTYzOQ==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r480349639", "bodyText": "Same as above", "author": "balazs-czopf", "createdAt": "2020-08-31T19:28:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMyNDc1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "6aa68b0ab7a071fa631c7c72cdb8ea02ccf15a39", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\nindex f86a24ff382..9a9cebd81ef 100644\n--- a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n+++ b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n", "chunk": "@@ -75,7 +69,7 @@ public class AchievementResource {\n     @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n     public ResponseEntity<Set<Achievement>> getAchievementsForCourse(@PathVariable Long courseId) {\n         log.debug(\"REST request to get achievements for course : {}\", courseId);\n-        Set<Achievement> achievements = achievementService.findAllForCourse(courseId);\n+        Set<Achievement> achievements = achievementService.findAllByCourseId(courseId);\n         return ResponseEntity.ok(achievements);\n     }\n \n", "next_change": {"commit": "c3317e06a092c8dbee21b52de380addd92f73b3f", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\nindex 9a9cebd81ef..6234a06e7a2 100644\n--- a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n+++ b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n", "chunk": "@@ -67,9 +72,11 @@ public class AchievementResource {\n      */\n     @GetMapping(\"/courses/{courseId}/achievements\")\n     @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n-    public ResponseEntity<Set<Achievement>> getAchievementsForCourse(@PathVariable Long courseId) {\n-        log.debug(\"REST request to get achievements for course : {}\", courseId);\n-        Set<Achievement> achievements = achievementService.findAllByCourseId(courseId);\n+    public ResponseEntity<Set<Achievement>> getAchievementsForUserInCourse(@PathVariable Long courseId) {\n+        User user = userService.getUserWithGroupsAndAuthorities();\n+        log.debug(\"REST request to get achievements for user : {} in course : {}\", user.getLogin(), courseId);\n+        Set<Achievement> achievements = achievementRepository.findAllByUserIdAndCourseId(user.getId(), courseId);\n+\n         return ResponseEntity.ok(achievements);\n     }\n \n", "next_change": {"commit": "508e8977abe4d1e8ec1c8a817fe9bd0f91f6bb8a", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\nindex 6234a06e7a2..9a9cebd81ef 100644\n--- a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n+++ b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n", "chunk": "@@ -72,11 +67,9 @@ public class AchievementResource {\n      */\n     @GetMapping(\"/courses/{courseId}/achievements\")\n     @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n-    public ResponseEntity<Set<Achievement>> getAchievementsForUserInCourse(@PathVariable Long courseId) {\n-        User user = userService.getUserWithGroupsAndAuthorities();\n-        log.debug(\"REST request to get achievements for user : {} in course : {}\", user.getLogin(), courseId);\n-        Set<Achievement> achievements = achievementRepository.findAllByUserIdAndCourseId(user.getId(), courseId);\n-\n+    public ResponseEntity<Set<Achievement>> getAchievementsForCourse(@PathVariable Long courseId) {\n+        log.debug(\"REST request to get achievements for course : {}\", courseId);\n+        Set<Achievement> achievements = achievementService.findAllByCourseId(courseId);\n         return ResponseEntity.ok(achievements);\n     }\n \n", "next_change": {"commit": "d3d2ea3ec69fdc3185bac66822f03c4a1bf0b6b1", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\nindex 9a9cebd81ef..6234a06e7a2 100644\n--- a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n+++ b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n", "chunk": "@@ -67,9 +72,11 @@ public class AchievementResource {\n      */\n     @GetMapping(\"/courses/{courseId}/achievements\")\n     @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n-    public ResponseEntity<Set<Achievement>> getAchievementsForCourse(@PathVariable Long courseId) {\n-        log.debug(\"REST request to get achievements for course : {}\", courseId);\n-        Set<Achievement> achievements = achievementService.findAllByCourseId(courseId);\n+    public ResponseEntity<Set<Achievement>> getAchievementsForUserInCourse(@PathVariable Long courseId) {\n+        User user = userService.getUserWithGroupsAndAuthorities();\n+        log.debug(\"REST request to get achievements for user : {} in course : {}\", user.getLogin(), courseId);\n+        Set<Achievement> achievements = achievementRepository.findAllByUserIdAndCourseId(user.getId(), courseId);\n+\n         return ResponseEntity.ok(achievements);\n     }\n \n", "next_change": {"commit": "ee25bd720633e2da0f2ad7b9354358590178e20f", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\nindex 6234a06e7a2..d5f8bbf6398 100644\n--- a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n+++ b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n", "chunk": "@@ -76,7 +77,7 @@ public class AchievementResource {\n         User user = userService.getUserWithGroupsAndAuthorities();\n         log.debug(\"REST request to get achievements for user : {} in course : {}\", user.getLogin(), courseId);\n         Set<Achievement> achievements = achievementRepository.findAllByUserIdAndCourseId(user.getId(), courseId);\n-\n+        achievementService.prepareForClient(achievements);\n         return ResponseEntity.ok(achievements);\n     }\n \n", "next_change": {"commit": "64778c859b7f2d14015c50aedae62db4c98bcee7", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\nindex d5f8bbf6398..9a9cebd81ef 100644\n--- a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n+++ b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n", "chunk": "@@ -73,11 +67,9 @@ public class AchievementResource {\n      */\n     @GetMapping(\"/courses/{courseId}/achievements\")\n     @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n-    public ResponseEntity<Set<Achievement>> getAchievementsForUserInCourse(@PathVariable Long courseId) {\n-        User user = userService.getUserWithGroupsAndAuthorities();\n-        log.debug(\"REST request to get achievements for user : {} in course : {}\", user.getLogin(), courseId);\n-        Set<Achievement> achievements = achievementRepository.findAllByUserIdAndCourseId(user.getId(), courseId);\n-        achievementService.prepareForClient(achievements);\n+    public ResponseEntity<Set<Achievement>> getAchievementsForCourse(@PathVariable Long courseId) {\n+        log.debug(\"REST request to get achievements for course : {}\", courseId);\n+        Set<Achievement> achievements = achievementService.findAllByCourseId(courseId);\n         return ResponseEntity.ok(achievements);\n     }\n \n", "next_change": {"commit": "8d5bfc049d9e75323290b069e7343df6fc579ee7", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\nindex 9a9cebd81ef..19fd5df9305 100644\n--- a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n+++ b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n", "chunk": "@@ -67,62 +43,11 @@ public class AchievementResource {\n      */\n     @GetMapping(\"/courses/{courseId}/achievements\")\n     @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n-    public ResponseEntity<Set<Achievement>> getAchievementsForCourse(@PathVariable Long courseId) {\n-        log.debug(\"REST request to get achievements for course : {}\", courseId);\n-        Set<Achievement> achievements = achievementService.findAllByCourseId(courseId);\n-        return ResponseEntity.ok(achievements);\n-    }\n-\n-    /**\n-     * PUT /achievements : Updates an existing achievement.\n-     *\n-     * @param achievement the achievement to update\n-     * @return the ResponseEntity with status 200 (OK) and with body the updated achievement, or with status 500\n-     *         (Internal Server Error) if the achievement couldn't be updated\n-     */\n-    @PutMapping(\"/achievements\")\n-    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n-    public ResponseEntity<Achievement> updateAchievement(@RequestBody Achievement achievement) {\n-        log.debug(\"REST request to update Achievement : {}\", achievement);\n-\n-        if (achievement.getId() == null) {\n-            return ResponseEntity.badRequest().build();\n-        }\n-\n-        Course course = achievement.getCourse();\n+    public ResponseEntity<Set<Achievement>> getAchievementsForUserInCourse(@PathVariable Long courseId) {\n         User user = userService.getUserWithGroupsAndAuthorities();\n-        if (!authCheckService.isAtLeastInstructorInCourse(course, user)) {\n-            throw new AccessForbiddenException(\"You are not allowed to access this resource\");\n-        }\n-\n-        Achievement savedAchievement = achievementService.save(achievement);\n-        return ResponseEntity.ok().headers(HeaderUtil.createEntityUpdateAlert(applicationName, true, ENTITY_NAME, savedAchievement.getId().toString())).body(savedAchievement);\n-    }\n-\n-    /**\n-     * DELETE /achievements/:achievementId : delete the \"id\" achievement.\n-     *\n-     * @param achievementId the id of the achievement to delete\n-     * @return the ResponseEntity with status 200 (OK)\n-     */\n-    @DeleteMapping(\"/achievements/{achievementId}\")\n-    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n-    public ResponseEntity<Void> deleteAchievement(@PathVariable long achievementId) {\n-        log.info(\"REST request to delete Achievement : {}\", achievementId);\n-        User user = userService.getUserWithGroupsAndAuthorities();\n-        Optional<Achievement> optionalAchievement = achievementService.findById(achievementId);\n-        if (optionalAchievement.isEmpty()) {\n-            return ResponseEntity.notFound().build();\n-        }\n-        Achievement achievement = optionalAchievement.get();\n-        Course course = achievement.getCourse();\n-        if (!authCheckService.isAtLeastInstructorInCourse(course, user)) {\n-            throw new AccessForbiddenException(\"You are not allowed to access this resource\");\n-        }\n-\n-        log.info(\"User \" + user.getLogin() + \" has requested to delete the achievement {}\", achievement.getId());\n-        achievementService.delete(achievement);\n-        return ResponseEntity.ok().headers(HeaderUtil.createEntityDeletionAlert(applicationName, true, ENTITY_NAME, achievement.getId().toString())).build();\n+        log.debug(\"REST request to get achievements for user : {} in course : {}\", user.getLogin(), courseId);\n+        Set<Achievement> achievements = achievementRepository.findAllByUserIdAndCourseId(user.getId(), courseId);\n+        achievementService.prepareForClient(achievements);\n+        return ResponseEntity.ok(achievements);\n     }\n-\n }\n", "next_change": {"commit": "7a5de1a37353eb19f93ef49666bba352198834cb", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\nindex 19fd5df9305..9a9cebd81ef 100644\n--- a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n+++ b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n", "chunk": "@@ -43,11 +67,62 @@ public class AchievementResource {\n      */\n     @GetMapping(\"/courses/{courseId}/achievements\")\n     @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n-    public ResponseEntity<Set<Achievement>> getAchievementsForUserInCourse(@PathVariable Long courseId) {\n-        User user = userService.getUserWithGroupsAndAuthorities();\n-        log.debug(\"REST request to get achievements for user : {} in course : {}\", user.getLogin(), courseId);\n-        Set<Achievement> achievements = achievementRepository.findAllByUserIdAndCourseId(user.getId(), courseId);\n-        achievementService.prepareForClient(achievements);\n+    public ResponseEntity<Set<Achievement>> getAchievementsForCourse(@PathVariable Long courseId) {\n+        log.debug(\"REST request to get achievements for course : {}\", courseId);\n+        Set<Achievement> achievements = achievementService.findAllByCourseId(courseId);\n         return ResponseEntity.ok(achievements);\n     }\n+\n+    /**\n+     * PUT /achievements : Updates an existing achievement.\n+     *\n+     * @param achievement the achievement to update\n+     * @return the ResponseEntity with status 200 (OK) and with body the updated achievement, or with status 500\n+     *         (Internal Server Error) if the achievement couldn't be updated\n+     */\n+    @PutMapping(\"/achievements\")\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Achievement> updateAchievement(@RequestBody Achievement achievement) {\n+        log.debug(\"REST request to update Achievement : {}\", achievement);\n+\n+        if (achievement.getId() == null) {\n+            return ResponseEntity.badRequest().build();\n+        }\n+\n+        Course course = achievement.getCourse();\n+        User user = userService.getUserWithGroupsAndAuthorities();\n+        if (!authCheckService.isAtLeastInstructorInCourse(course, user)) {\n+            throw new AccessForbiddenException(\"You are not allowed to access this resource\");\n+        }\n+\n+        Achievement savedAchievement = achievementService.save(achievement);\n+        return ResponseEntity.ok().headers(HeaderUtil.createEntityUpdateAlert(applicationName, true, ENTITY_NAME, savedAchievement.getId().toString())).body(savedAchievement);\n+    }\n+\n+    /**\n+     * DELETE /achievements/:achievementId : delete the \"id\" achievement.\n+     *\n+     * @param achievementId the id of the achievement to delete\n+     * @return the ResponseEntity with status 200 (OK)\n+     */\n+    @DeleteMapping(\"/achievements/{achievementId}\")\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Void> deleteAchievement(@PathVariable long achievementId) {\n+        log.info(\"REST request to delete Achievement : {}\", achievementId);\n+        User user = userService.getUserWithGroupsAndAuthorities();\n+        Optional<Achievement> optionalAchievement = achievementService.findById(achievementId);\n+        if (optionalAchievement.isEmpty()) {\n+            return ResponseEntity.notFound().build();\n+        }\n+        Achievement achievement = optionalAchievement.get();\n+        Course course = achievement.getCourse();\n+        if (!authCheckService.isAtLeastInstructorInCourse(course, user)) {\n+            throw new AccessForbiddenException(\"You are not allowed to access this resource\");\n+        }\n+\n+        log.info(\"User \" + user.getLogin() + \" has requested to delete the achievement {}\", achievement.getId());\n+        achievementService.delete(achievement);\n+        return ResponseEntity.ok().headers(HeaderUtil.createEntityDeletionAlert(applicationName, true, ENTITY_NAME, achievement.getId().toString())).build();\n+    }\n+\n }\n", "next_change": {"commit": "116151629d403403ee9b750c30c182f44f70e233", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\nindex 9a9cebd81ef..2367bc01f2b 100644\n--- a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n+++ b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n", "chunk": "@@ -26,103 +21,33 @@ import de.tum.in.www1.artemis.web.rest.util.HeaderUtil;\n @RequestMapping(\"/api\")\n public class AchievementResource {\n \n-    private static final String ENTITY_NAME = \"achievement\";\n-\n-    @Value(\"${jhipster.clientApp.name}\")\n-    private String applicationName;\n-\n     private final Logger log = LoggerFactory.getLogger(AchievementResource.class);\n \n-    private final AuthorizationCheckService authCheckService;\n-\n     private final AchievementService achievementService;\n \n+    private final AchievementRepository achievementRepository;\n+\n     private final UserService userService;\n \n-    public AchievementResource(AuthorizationCheckService authCheckService, AchievementService achievementService, UserService userService) {\n-        this.authCheckService = authCheckService;\n+    public AchievementResource(AchievementService achievementService, AchievementRepository achievementRepository, UserService userService) {\n         this.achievementService = achievementService;\n+        this.achievementRepository = achievementRepository;\n         this.userService = userService;\n     }\n \n     /**\n-     * GET /achievements : Get all achievements for user.\n+     * GET /courses/{courseId}/achievements : Get all achievements for requesting user in given course.\n      *\n-     * @return the ResponseEntity with status 200 (OK) and with the found achievements as body\n-     */\n-    @GetMapping(\"/achievements\")\n-    @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n-    public ResponseEntity<Set<Achievement>> getAchievementsForUser() {\n-        User user = userService.getUser();\n-        log.debug(\"REST request to get achievements for user : {}\", user.getLogin());\n-        Set<Achievement> achievements = achievementService.findAllByUserId(user.getId());\n-        return ResponseEntity.ok(achievements);\n-    }\n-\n-    /**\n-     * GET /courses/{courseId}/achievements : Get all achievements for course.\n-     *\n-     * @param courseId the course to which the achievements belong to\n+     * @param courseId\n      * @return the ResponseEntity with status 200 (OK) and with the found achievements as body\n      */\n     @GetMapping(\"/courses/{courseId}/achievements\")\n     @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n-    public ResponseEntity<Set<Achievement>> getAchievementsForCourse(@PathVariable Long courseId) {\n-        log.debug(\"REST request to get achievements for course : {}\", courseId);\n-        Set<Achievement> achievements = achievementService.findAllByCourseId(courseId);\n-        return ResponseEntity.ok(achievements);\n-    }\n-\n-    /**\n-     * PUT /achievements : Updates an existing achievement.\n-     *\n-     * @param achievement the achievement to update\n-     * @return the ResponseEntity with status 200 (OK) and with body the updated achievement, or with status 500\n-     *         (Internal Server Error) if the achievement couldn't be updated\n-     */\n-    @PutMapping(\"/achievements\")\n-    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n-    public ResponseEntity<Achievement> updateAchievement(@RequestBody Achievement achievement) {\n-        log.debug(\"REST request to update Achievement : {}\", achievement);\n-\n-        if (achievement.getId() == null) {\n-            return ResponseEntity.badRequest().build();\n-        }\n-\n-        Course course = achievement.getCourse();\n+    public ResponseEntity<Set<Achievement>> getAchievementsForUserInCourse(@PathVariable Long courseId) {\n         User user = userService.getUserWithGroupsAndAuthorities();\n-        if (!authCheckService.isAtLeastInstructorInCourse(course, user)) {\n-            throw new AccessForbiddenException(\"You are not allowed to access this resource\");\n-        }\n-\n-        Achievement savedAchievement = achievementService.save(achievement);\n-        return ResponseEntity.ok().headers(HeaderUtil.createEntityUpdateAlert(applicationName, true, ENTITY_NAME, savedAchievement.getId().toString())).body(savedAchievement);\n-    }\n-\n-    /**\n-     * DELETE /achievements/:achievementId : delete the \"id\" achievement.\n-     *\n-     * @param achievementId the id of the achievement to delete\n-     * @return the ResponseEntity with status 200 (OK)\n-     */\n-    @DeleteMapping(\"/achievements/{achievementId}\")\n-    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n-    public ResponseEntity<Void> deleteAchievement(@PathVariable long achievementId) {\n-        log.info(\"REST request to delete Achievement : {}\", achievementId);\n-        User user = userService.getUserWithGroupsAndAuthorities();\n-        Optional<Achievement> optionalAchievement = achievementService.findById(achievementId);\n-        if (optionalAchievement.isEmpty()) {\n-            return ResponseEntity.notFound().build();\n-        }\n-        Achievement achievement = optionalAchievement.get();\n-        Course course = achievement.getCourse();\n-        if (!authCheckService.isAtLeastInstructorInCourse(course, user)) {\n-            throw new AccessForbiddenException(\"You are not allowed to access this resource\");\n-        }\n-\n-        log.info(\"User \" + user.getLogin() + \" has requested to delete the achievement {}\", achievement.getId());\n-        achievementService.delete(achievement);\n-        return ResponseEntity.ok().headers(HeaderUtil.createEntityDeletionAlert(applicationName, true, ENTITY_NAME, achievement.getId().toString())).build();\n+        log.debug(\"REST request to get achievements for user : {} in course : {}\", user.getLogin(), courseId);\n+        Set<Achievement> achievements = achievementRepository.findAllByUserIdAndCourseId(user.getId(), courseId);\n+        achievementService.prepareForClient(achievements);\n+        return ResponseEntity.ok(achievements);\n     }\n-\n }\n", "next_change": {"commit": "53c319a21a4053a341e9b24da4987de5abfb656d", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\nindex 2367bc01f2b..7789b9e0412 100644\n--- a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n+++ b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n", "chunk": "@@ -46,7 +42,7 @@ public class AchievementResource {\n     public ResponseEntity<Set<Achievement>> getAchievementsForUserInCourse(@PathVariable Long courseId) {\n         User user = userService.getUserWithGroupsAndAuthorities();\n         log.debug(\"REST request to get achievements for user : {} in course : {}\", user.getLogin(), courseId);\n-        Set<Achievement> achievements = achievementRepository.findAllByUserIdAndCourseId(user.getId(), courseId);\n+        Set<Achievement> achievements = achievementService.findAllByUserIdAndCourseId(user.getId(), courseId);\n         achievementService.prepareForClient(achievements);\n         return ResponseEntity.ok(achievements);\n     }\n", "next_change": {"commit": "8e040450690f9f7b8962366e1d892df304682c95", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\nindex 7789b9e0412..4627a735259 100644\n--- a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n+++ b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n", "chunk": "@@ -20,30 +28,103 @@ import de.tum.in.www1.artemis.service.UserService;\n @RequestMapping(\"/api\")\n public class AchievementResource {\n \n+    private static final String ENTITY_NAME = \"achievement\";\n+\n+    @Value(\"${jhipster.clientApp.name}\")\n+    private String applicationName;\n+\n     private final Logger log = LoggerFactory.getLogger(AchievementResource.class);\n \n+    private final AuthorizationCheckService authCheckService;\n+\n     private final AchievementService achievementService;\n \n     private final UserService userService;\n \n-    public AchievementResource(AchievementService achievementService, UserService userService) {\n+    private final AchievementRepository achievementRepository;\n+\n+    public AchievementResource(AuthorizationCheckService authCheckService, AchievementService achievementService, UserService userService,\n+            AchievementRepository achievementRepository) {\n+        this.authCheckService = authCheckService;\n         this.achievementService = achievementService;\n         this.userService = userService;\n+        this.achievementRepository = achievementRepository;\n     }\n \n     /**\n-     * GET /courses/{courseId}/achievements : Get all achievements for requesting user in given course.\n+     * GET /achievements : Get all achievements for user.\n      *\n-     * @param courseId\n+     * @return the ResponseEntity with status 200 (OK) and with the found achievements as body\n+     */\n+    @GetMapping(\"/achievements\")\n+    @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Set<Achievement>> getAchievementsForUser() {\n+        User user = userService.getUser();\n+        log.debug(\"REST request to get achievements for user : {}\", user.getLogin());\n+        Set<Achievement> achievements = achievementService.findAllForUser(user.getId());\n+        return ResponseEntity.ok(achievements);\n+    }\n+\n+    /**\n+     * GET /courses/{courseId}/achievements : Get all achievements for course.\n+     *\n+     * @param courseId the course to which the achievements belong to\n      * @return the ResponseEntity with status 200 (OK) and with the found achievements as body\n      */\n     @GetMapping(\"/courses/{courseId}/achievements\")\n     @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n-    public ResponseEntity<Set<Achievement>> getAchievementsForUserInCourse(@PathVariable Long courseId) {\n-        User user = userService.getUserWithGroupsAndAuthorities();\n-        log.debug(\"REST request to get achievements for user : {} in course : {}\", user.getLogin(), courseId);\n-        Set<Achievement> achievements = achievementService.findAllByUserIdAndCourseId(user.getId(), courseId);\n-        achievementService.prepareForClient(achievements);\n+    public ResponseEntity<Set<Achievement>> getAchievementsForCourse(@PathVariable Long courseId) {\n+        log.debug(\"REST request to get achievements for course : {}\", courseId);\n+        Set<Achievement> achievements = achievementService.findAllForCourse(courseId);\n         return ResponseEntity.ok(achievements);\n     }\n+\n+    /**\n+     * PUT /achievements : Updates an existing achievement.\n+     *\n+     * @param achievement the achievement to update\n+     * @return the ResponseEntity with status 200 (OK) and with body the updated achievement, or with status 500\n+     *         (Internal Server Error) if the achievement couldn't be updated\n+     */\n+    @PutMapping(\"/achievements\")\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Achievement> updateAchievement(@RequestBody Achievement achievement) {\n+        log.debug(\"REST request to update Achievement : {}\", achievement);\n+\n+        if (achievement.getId() == null) {\n+            return ResponseEntity.badRequest().build();\n+        }\n+\n+        Course course = achievement.getCourse();\n+        User user = userService.getUserWithGroupsAndAuthorities();\n+        if (!authCheckService.isAtLeastInstructorInCourse(course, user)) {\n+            throw new AccessForbiddenException(\"You are not allowed to access this resource\");\n+        }\n+\n+        Achievement savedAchievement = achievementRepository.save(achievement);\n+        return ResponseEntity.ok().headers(HeaderUtil.createEntityUpdateAlert(applicationName, true, ENTITY_NAME, savedAchievement.getId().toString())).body(savedAchievement);\n+    }\n+\n+    /**\n+     * DELETE /achievements/:achievementId : delete the \"id\" achievement.\n+     *\n+     * @param achievementId the id of the achievement to delete\n+     * @return the ResponseEntity with status 200 (OK)\n+     */\n+    @DeleteMapping(\"/achievements/{achievementId}\")\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    @Transactional\n+    public ResponseEntity<Void> deleteAchievement(@PathVariable long achievementId) {\n+        log.info(\"REST request to delete Achievement : {}\", achievementId);\n+        User user = userService.getUserWithGroupsAndAuthorities();\n+        Optional<Achievement> optionalAchievement = achievementService.findById(achievementId);\n+        if (optionalAchievement.isEmpty()) {\n+            return ResponseEntity.notFound().build();\n+        }\n+        Achievement achievement = optionalAchievement.get();\n+        log.info(\"User \" + user.getLogin() + \" has requested to delete the achievement {}\", achievement.getId());\n+        achievementService.delete(achievement);\n+        return ResponseEntity.ok().headers(HeaderUtil.createEntityDeletionAlert(applicationName, true, ENTITY_NAME, achievement.getId().toString())).build();\n+    }\n+\n }\n", "next_change": {"commit": "0616ac4ef001698a1e962c595c2ceecc0eb76dd0", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\nindex 4627a735259..efa5f0e0668 100644\n--- a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n+++ b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n", "chunk": "@@ -122,6 +122,11 @@ public class AchievementResource {\n             return ResponseEntity.notFound().build();\n         }\n         Achievement achievement = optionalAchievement.get();\n+        Course course = achievement.getCourse();\n+        if (!authCheckService.isAtLeastInstructorInCourse(course, user)) {\n+            throw new AccessForbiddenException(\"You are not allowed to access this resource\");\n+        }\n+\n         log.info(\"User \" + user.getLogin() + \" has requested to delete the achievement {}\", achievement.getId());\n         achievementService.delete(achievement);\n         return ResponseEntity.ok().headers(HeaderUtil.createEntityDeletionAlert(applicationName, true, ENTITY_NAME, achievement.getId().toString())).build();\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMyNjQ1OA==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r480326458", "body": "Is there a chance of some sensitive data coming along with achievements? In this case, I guess we would need to check for the user access rights for the course first.", "bodyText": "Is there a chance of some sensitive data coming along with achievements? In this case, I guess we would need to check for the user access rights for the course first.", "bodyHTML": "<p dir=\"auto\">Is there a chance of some sensitive data coming along with achievements? In this case, I guess we would need to check for the user access rights for the course first.</p>", "author": "linusmichel", "createdAt": "2020-08-31T18:58:53Z", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java", "diffHunk": "@@ -0,0 +1,130 @@\n+package de.tum.in.www1.artemis.web.rest;\n+\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.springframework.web.bind.annotation.*;\n+\n+import de.tum.in.www1.artemis.domain.Achievement;\n+import de.tum.in.www1.artemis.domain.Course;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.repository.AchievementRepository;\n+import de.tum.in.www1.artemis.service.AchievementService;\n+import de.tum.in.www1.artemis.service.AuthorizationCheckService;\n+import de.tum.in.www1.artemis.service.UserService;\n+import de.tum.in.www1.artemis.web.rest.errors.AccessForbiddenException;\n+import de.tum.in.www1.artemis.web.rest.util.HeaderUtil;\n+\n+/**\n+ * REST controller for managing Achievements.\n+ */\n+@RestController\n+@RequestMapping(\"/api\")\n+public class AchievementResource {\n+\n+    private static final String ENTITY_NAME = \"achievement\";\n+\n+    @Value(\"${jhipster.clientApp.name}\")\n+    private String applicationName;\n+\n+    private final Logger log = LoggerFactory.getLogger(AchievementResource.class);\n+\n+    private final AuthorizationCheckService authCheckService;\n+\n+    private final AchievementService achievementService;\n+\n+    private final UserService userService;\n+\n+    private final AchievementRepository achievementRepository;\n+\n+    public AchievementResource(AuthorizationCheckService authCheckService, AchievementService achievementService, UserService userService,\n+            AchievementRepository achievementRepository) {\n+        this.authCheckService = authCheckService;\n+        this.achievementService = achievementService;\n+        this.userService = userService;\n+        this.achievementRepository = achievementRepository;\n+    }\n+\n+    /**\n+     * GET /achievements : Get all achievements for user.\n+     *\n+     * @return the ResponseEntity with status 200 (OK) and with the found achievements as body\n+     */\n+    @GetMapping(\"/achievements\")\n+    @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Set<Achievement>> getAchievementsForUser() {\n+        User user = userService.getUser();\n+        log.debug(\"REST request to get achievements for user : {}\", user.getLogin());\n+        Set<Achievement> achievements = achievementService.findAllForUser(user.getId());\n+        return ResponseEntity.ok(achievements);\n+    }\n+\n+    /**\n+     * GET /courses/{courseId}/achievements : Get all achievements for course.\n+     *\n+     * @param courseId the course to which the achievements belong to\n+     * @return the ResponseEntity with status 200 (OK) and with the found achievements as body\n+     */\n+    @GetMapping(\"/courses/{courseId}/achievements\")\n+    @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Set<Achievement>> getAchievementsForCourse(@PathVariable Long courseId) {\n+        log.debug(\"REST request to get achievements for course : {}\", courseId);\n+        Set<Achievement> achievements = achievementService.findAllForCourse(courseId);", "originalCommit": "1631126ec91b00529db9044aca65d2b9eae6e1d1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM2MDQ3Mw==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r480360473", "bodyText": "Not really. Well achievements do have a relation to users but users are loaded lazily within achievements by default and since not requested explicitly they remain null here.", "author": "balazs-czopf", "createdAt": "2020-08-31T19:47:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMyNjQ1OA=="}], "type": "inlineReview", "revised_code": {"commit": "6aa68b0ab7a071fa631c7c72cdb8ea02ccf15a39", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\nindex f86a24ff382..9a9cebd81ef 100644\n--- a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n+++ b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n", "chunk": "@@ -75,7 +69,7 @@ public class AchievementResource {\n     @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n     public ResponseEntity<Set<Achievement>> getAchievementsForCourse(@PathVariable Long courseId) {\n         log.debug(\"REST request to get achievements for course : {}\", courseId);\n-        Set<Achievement> achievements = achievementService.findAllForCourse(courseId);\n+        Set<Achievement> achievements = achievementService.findAllByCourseId(courseId);\n         return ResponseEntity.ok(achievements);\n     }\n \n", "next_change": {"commit": "c3317e06a092c8dbee21b52de380addd92f73b3f", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\nindex 9a9cebd81ef..6234a06e7a2 100644\n--- a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n+++ b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n", "chunk": "@@ -67,9 +72,11 @@ public class AchievementResource {\n      */\n     @GetMapping(\"/courses/{courseId}/achievements\")\n     @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n-    public ResponseEntity<Set<Achievement>> getAchievementsForCourse(@PathVariable Long courseId) {\n-        log.debug(\"REST request to get achievements for course : {}\", courseId);\n-        Set<Achievement> achievements = achievementService.findAllByCourseId(courseId);\n+    public ResponseEntity<Set<Achievement>> getAchievementsForUserInCourse(@PathVariable Long courseId) {\n+        User user = userService.getUserWithGroupsAndAuthorities();\n+        log.debug(\"REST request to get achievements for user : {} in course : {}\", user.getLogin(), courseId);\n+        Set<Achievement> achievements = achievementRepository.findAllByUserIdAndCourseId(user.getId(), courseId);\n+\n         return ResponseEntity.ok(achievements);\n     }\n \n", "next_change": {"commit": "508e8977abe4d1e8ec1c8a817fe9bd0f91f6bb8a", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\nindex 6234a06e7a2..9a9cebd81ef 100644\n--- a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n+++ b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n", "chunk": "@@ -72,11 +67,9 @@ public class AchievementResource {\n      */\n     @GetMapping(\"/courses/{courseId}/achievements\")\n     @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n-    public ResponseEntity<Set<Achievement>> getAchievementsForUserInCourse(@PathVariable Long courseId) {\n-        User user = userService.getUserWithGroupsAndAuthorities();\n-        log.debug(\"REST request to get achievements for user : {} in course : {}\", user.getLogin(), courseId);\n-        Set<Achievement> achievements = achievementRepository.findAllByUserIdAndCourseId(user.getId(), courseId);\n-\n+    public ResponseEntity<Set<Achievement>> getAchievementsForCourse(@PathVariable Long courseId) {\n+        log.debug(\"REST request to get achievements for course : {}\", courseId);\n+        Set<Achievement> achievements = achievementService.findAllByCourseId(courseId);\n         return ResponseEntity.ok(achievements);\n     }\n \n", "next_change": {"commit": "d3d2ea3ec69fdc3185bac66822f03c4a1bf0b6b1", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\nindex 9a9cebd81ef..6234a06e7a2 100644\n--- a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n+++ b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n", "chunk": "@@ -67,9 +72,11 @@ public class AchievementResource {\n      */\n     @GetMapping(\"/courses/{courseId}/achievements\")\n     @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n-    public ResponseEntity<Set<Achievement>> getAchievementsForCourse(@PathVariable Long courseId) {\n-        log.debug(\"REST request to get achievements for course : {}\", courseId);\n-        Set<Achievement> achievements = achievementService.findAllByCourseId(courseId);\n+    public ResponseEntity<Set<Achievement>> getAchievementsForUserInCourse(@PathVariable Long courseId) {\n+        User user = userService.getUserWithGroupsAndAuthorities();\n+        log.debug(\"REST request to get achievements for user : {} in course : {}\", user.getLogin(), courseId);\n+        Set<Achievement> achievements = achievementRepository.findAllByUserIdAndCourseId(user.getId(), courseId);\n+\n         return ResponseEntity.ok(achievements);\n     }\n \n", "next_change": {"commit": "ee25bd720633e2da0f2ad7b9354358590178e20f", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\nindex 6234a06e7a2..d5f8bbf6398 100644\n--- a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n+++ b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n", "chunk": "@@ -76,7 +77,7 @@ public class AchievementResource {\n         User user = userService.getUserWithGroupsAndAuthorities();\n         log.debug(\"REST request to get achievements for user : {} in course : {}\", user.getLogin(), courseId);\n         Set<Achievement> achievements = achievementRepository.findAllByUserIdAndCourseId(user.getId(), courseId);\n-\n+        achievementService.prepareForClient(achievements);\n         return ResponseEntity.ok(achievements);\n     }\n \n", "next_change": {"commit": "64778c859b7f2d14015c50aedae62db4c98bcee7", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\nindex d5f8bbf6398..9a9cebd81ef 100644\n--- a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n+++ b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n", "chunk": "@@ -73,11 +67,9 @@ public class AchievementResource {\n      */\n     @GetMapping(\"/courses/{courseId}/achievements\")\n     @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n-    public ResponseEntity<Set<Achievement>> getAchievementsForUserInCourse(@PathVariable Long courseId) {\n-        User user = userService.getUserWithGroupsAndAuthorities();\n-        log.debug(\"REST request to get achievements for user : {} in course : {}\", user.getLogin(), courseId);\n-        Set<Achievement> achievements = achievementRepository.findAllByUserIdAndCourseId(user.getId(), courseId);\n-        achievementService.prepareForClient(achievements);\n+    public ResponseEntity<Set<Achievement>> getAchievementsForCourse(@PathVariable Long courseId) {\n+        log.debug(\"REST request to get achievements for course : {}\", courseId);\n+        Set<Achievement> achievements = achievementService.findAllByCourseId(courseId);\n         return ResponseEntity.ok(achievements);\n     }\n \n", "next_change": {"commit": "8d5bfc049d9e75323290b069e7343df6fc579ee7", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\nindex 9a9cebd81ef..19fd5df9305 100644\n--- a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n+++ b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n", "chunk": "@@ -67,62 +43,11 @@ public class AchievementResource {\n      */\n     @GetMapping(\"/courses/{courseId}/achievements\")\n     @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n-    public ResponseEntity<Set<Achievement>> getAchievementsForCourse(@PathVariable Long courseId) {\n-        log.debug(\"REST request to get achievements for course : {}\", courseId);\n-        Set<Achievement> achievements = achievementService.findAllByCourseId(courseId);\n-        return ResponseEntity.ok(achievements);\n-    }\n-\n-    /**\n-     * PUT /achievements : Updates an existing achievement.\n-     *\n-     * @param achievement the achievement to update\n-     * @return the ResponseEntity with status 200 (OK) and with body the updated achievement, or with status 500\n-     *         (Internal Server Error) if the achievement couldn't be updated\n-     */\n-    @PutMapping(\"/achievements\")\n-    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n-    public ResponseEntity<Achievement> updateAchievement(@RequestBody Achievement achievement) {\n-        log.debug(\"REST request to update Achievement : {}\", achievement);\n-\n-        if (achievement.getId() == null) {\n-            return ResponseEntity.badRequest().build();\n-        }\n-\n-        Course course = achievement.getCourse();\n+    public ResponseEntity<Set<Achievement>> getAchievementsForUserInCourse(@PathVariable Long courseId) {\n         User user = userService.getUserWithGroupsAndAuthorities();\n-        if (!authCheckService.isAtLeastInstructorInCourse(course, user)) {\n-            throw new AccessForbiddenException(\"You are not allowed to access this resource\");\n-        }\n-\n-        Achievement savedAchievement = achievementService.save(achievement);\n-        return ResponseEntity.ok().headers(HeaderUtil.createEntityUpdateAlert(applicationName, true, ENTITY_NAME, savedAchievement.getId().toString())).body(savedAchievement);\n-    }\n-\n-    /**\n-     * DELETE /achievements/:achievementId : delete the \"id\" achievement.\n-     *\n-     * @param achievementId the id of the achievement to delete\n-     * @return the ResponseEntity with status 200 (OK)\n-     */\n-    @DeleteMapping(\"/achievements/{achievementId}\")\n-    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n-    public ResponseEntity<Void> deleteAchievement(@PathVariable long achievementId) {\n-        log.info(\"REST request to delete Achievement : {}\", achievementId);\n-        User user = userService.getUserWithGroupsAndAuthorities();\n-        Optional<Achievement> optionalAchievement = achievementService.findById(achievementId);\n-        if (optionalAchievement.isEmpty()) {\n-            return ResponseEntity.notFound().build();\n-        }\n-        Achievement achievement = optionalAchievement.get();\n-        Course course = achievement.getCourse();\n-        if (!authCheckService.isAtLeastInstructorInCourse(course, user)) {\n-            throw new AccessForbiddenException(\"You are not allowed to access this resource\");\n-        }\n-\n-        log.info(\"User \" + user.getLogin() + \" has requested to delete the achievement {}\", achievement.getId());\n-        achievementService.delete(achievement);\n-        return ResponseEntity.ok().headers(HeaderUtil.createEntityDeletionAlert(applicationName, true, ENTITY_NAME, achievement.getId().toString())).build();\n+        log.debug(\"REST request to get achievements for user : {} in course : {}\", user.getLogin(), courseId);\n+        Set<Achievement> achievements = achievementRepository.findAllByUserIdAndCourseId(user.getId(), courseId);\n+        achievementService.prepareForClient(achievements);\n+        return ResponseEntity.ok(achievements);\n     }\n-\n }\n", "next_change": {"commit": "7a5de1a37353eb19f93ef49666bba352198834cb", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\nindex 19fd5df9305..9a9cebd81ef 100644\n--- a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n+++ b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n", "chunk": "@@ -43,11 +67,62 @@ public class AchievementResource {\n      */\n     @GetMapping(\"/courses/{courseId}/achievements\")\n     @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n-    public ResponseEntity<Set<Achievement>> getAchievementsForUserInCourse(@PathVariable Long courseId) {\n-        User user = userService.getUserWithGroupsAndAuthorities();\n-        log.debug(\"REST request to get achievements for user : {} in course : {}\", user.getLogin(), courseId);\n-        Set<Achievement> achievements = achievementRepository.findAllByUserIdAndCourseId(user.getId(), courseId);\n-        achievementService.prepareForClient(achievements);\n+    public ResponseEntity<Set<Achievement>> getAchievementsForCourse(@PathVariable Long courseId) {\n+        log.debug(\"REST request to get achievements for course : {}\", courseId);\n+        Set<Achievement> achievements = achievementService.findAllByCourseId(courseId);\n         return ResponseEntity.ok(achievements);\n     }\n+\n+    /**\n+     * PUT /achievements : Updates an existing achievement.\n+     *\n+     * @param achievement the achievement to update\n+     * @return the ResponseEntity with status 200 (OK) and with body the updated achievement, or with status 500\n+     *         (Internal Server Error) if the achievement couldn't be updated\n+     */\n+    @PutMapping(\"/achievements\")\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Achievement> updateAchievement(@RequestBody Achievement achievement) {\n+        log.debug(\"REST request to update Achievement : {}\", achievement);\n+\n+        if (achievement.getId() == null) {\n+            return ResponseEntity.badRequest().build();\n+        }\n+\n+        Course course = achievement.getCourse();\n+        User user = userService.getUserWithGroupsAndAuthorities();\n+        if (!authCheckService.isAtLeastInstructorInCourse(course, user)) {\n+            throw new AccessForbiddenException(\"You are not allowed to access this resource\");\n+        }\n+\n+        Achievement savedAchievement = achievementService.save(achievement);\n+        return ResponseEntity.ok().headers(HeaderUtil.createEntityUpdateAlert(applicationName, true, ENTITY_NAME, savedAchievement.getId().toString())).body(savedAchievement);\n+    }\n+\n+    /**\n+     * DELETE /achievements/:achievementId : delete the \"id\" achievement.\n+     *\n+     * @param achievementId the id of the achievement to delete\n+     * @return the ResponseEntity with status 200 (OK)\n+     */\n+    @DeleteMapping(\"/achievements/{achievementId}\")\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Void> deleteAchievement(@PathVariable long achievementId) {\n+        log.info(\"REST request to delete Achievement : {}\", achievementId);\n+        User user = userService.getUserWithGroupsAndAuthorities();\n+        Optional<Achievement> optionalAchievement = achievementService.findById(achievementId);\n+        if (optionalAchievement.isEmpty()) {\n+            return ResponseEntity.notFound().build();\n+        }\n+        Achievement achievement = optionalAchievement.get();\n+        Course course = achievement.getCourse();\n+        if (!authCheckService.isAtLeastInstructorInCourse(course, user)) {\n+            throw new AccessForbiddenException(\"You are not allowed to access this resource\");\n+        }\n+\n+        log.info(\"User \" + user.getLogin() + \" has requested to delete the achievement {}\", achievement.getId());\n+        achievementService.delete(achievement);\n+        return ResponseEntity.ok().headers(HeaderUtil.createEntityDeletionAlert(applicationName, true, ENTITY_NAME, achievement.getId().toString())).build();\n+    }\n+\n }\n", "next_change": {"commit": "116151629d403403ee9b750c30c182f44f70e233", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\nindex 9a9cebd81ef..2367bc01f2b 100644\n--- a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n+++ b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n", "chunk": "@@ -26,103 +21,33 @@ import de.tum.in.www1.artemis.web.rest.util.HeaderUtil;\n @RequestMapping(\"/api\")\n public class AchievementResource {\n \n-    private static final String ENTITY_NAME = \"achievement\";\n-\n-    @Value(\"${jhipster.clientApp.name}\")\n-    private String applicationName;\n-\n     private final Logger log = LoggerFactory.getLogger(AchievementResource.class);\n \n-    private final AuthorizationCheckService authCheckService;\n-\n     private final AchievementService achievementService;\n \n+    private final AchievementRepository achievementRepository;\n+\n     private final UserService userService;\n \n-    public AchievementResource(AuthorizationCheckService authCheckService, AchievementService achievementService, UserService userService) {\n-        this.authCheckService = authCheckService;\n+    public AchievementResource(AchievementService achievementService, AchievementRepository achievementRepository, UserService userService) {\n         this.achievementService = achievementService;\n+        this.achievementRepository = achievementRepository;\n         this.userService = userService;\n     }\n \n     /**\n-     * GET /achievements : Get all achievements for user.\n+     * GET /courses/{courseId}/achievements : Get all achievements for requesting user in given course.\n      *\n-     * @return the ResponseEntity with status 200 (OK) and with the found achievements as body\n-     */\n-    @GetMapping(\"/achievements\")\n-    @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n-    public ResponseEntity<Set<Achievement>> getAchievementsForUser() {\n-        User user = userService.getUser();\n-        log.debug(\"REST request to get achievements for user : {}\", user.getLogin());\n-        Set<Achievement> achievements = achievementService.findAllByUserId(user.getId());\n-        return ResponseEntity.ok(achievements);\n-    }\n-\n-    /**\n-     * GET /courses/{courseId}/achievements : Get all achievements for course.\n-     *\n-     * @param courseId the course to which the achievements belong to\n+     * @param courseId\n      * @return the ResponseEntity with status 200 (OK) and with the found achievements as body\n      */\n     @GetMapping(\"/courses/{courseId}/achievements\")\n     @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n-    public ResponseEntity<Set<Achievement>> getAchievementsForCourse(@PathVariable Long courseId) {\n-        log.debug(\"REST request to get achievements for course : {}\", courseId);\n-        Set<Achievement> achievements = achievementService.findAllByCourseId(courseId);\n-        return ResponseEntity.ok(achievements);\n-    }\n-\n-    /**\n-     * PUT /achievements : Updates an existing achievement.\n-     *\n-     * @param achievement the achievement to update\n-     * @return the ResponseEntity with status 200 (OK) and with body the updated achievement, or with status 500\n-     *         (Internal Server Error) if the achievement couldn't be updated\n-     */\n-    @PutMapping(\"/achievements\")\n-    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n-    public ResponseEntity<Achievement> updateAchievement(@RequestBody Achievement achievement) {\n-        log.debug(\"REST request to update Achievement : {}\", achievement);\n-\n-        if (achievement.getId() == null) {\n-            return ResponseEntity.badRequest().build();\n-        }\n-\n-        Course course = achievement.getCourse();\n+    public ResponseEntity<Set<Achievement>> getAchievementsForUserInCourse(@PathVariable Long courseId) {\n         User user = userService.getUserWithGroupsAndAuthorities();\n-        if (!authCheckService.isAtLeastInstructorInCourse(course, user)) {\n-            throw new AccessForbiddenException(\"You are not allowed to access this resource\");\n-        }\n-\n-        Achievement savedAchievement = achievementService.save(achievement);\n-        return ResponseEntity.ok().headers(HeaderUtil.createEntityUpdateAlert(applicationName, true, ENTITY_NAME, savedAchievement.getId().toString())).body(savedAchievement);\n-    }\n-\n-    /**\n-     * DELETE /achievements/:achievementId : delete the \"id\" achievement.\n-     *\n-     * @param achievementId the id of the achievement to delete\n-     * @return the ResponseEntity with status 200 (OK)\n-     */\n-    @DeleteMapping(\"/achievements/{achievementId}\")\n-    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n-    public ResponseEntity<Void> deleteAchievement(@PathVariable long achievementId) {\n-        log.info(\"REST request to delete Achievement : {}\", achievementId);\n-        User user = userService.getUserWithGroupsAndAuthorities();\n-        Optional<Achievement> optionalAchievement = achievementService.findById(achievementId);\n-        if (optionalAchievement.isEmpty()) {\n-            return ResponseEntity.notFound().build();\n-        }\n-        Achievement achievement = optionalAchievement.get();\n-        Course course = achievement.getCourse();\n-        if (!authCheckService.isAtLeastInstructorInCourse(course, user)) {\n-            throw new AccessForbiddenException(\"You are not allowed to access this resource\");\n-        }\n-\n-        log.info(\"User \" + user.getLogin() + \" has requested to delete the achievement {}\", achievement.getId());\n-        achievementService.delete(achievement);\n-        return ResponseEntity.ok().headers(HeaderUtil.createEntityDeletionAlert(applicationName, true, ENTITY_NAME, achievement.getId().toString())).build();\n+        log.debug(\"REST request to get achievements for user : {} in course : {}\", user.getLogin(), courseId);\n+        Set<Achievement> achievements = achievementRepository.findAllByUserIdAndCourseId(user.getId(), courseId);\n+        achievementService.prepareForClient(achievements);\n+        return ResponseEntity.ok(achievements);\n     }\n-\n }\n", "next_change": {"commit": "53c319a21a4053a341e9b24da4987de5abfb656d", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\nindex 2367bc01f2b..7789b9e0412 100644\n--- a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n+++ b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n", "chunk": "@@ -46,7 +42,7 @@ public class AchievementResource {\n     public ResponseEntity<Set<Achievement>> getAchievementsForUserInCourse(@PathVariable Long courseId) {\n         User user = userService.getUserWithGroupsAndAuthorities();\n         log.debug(\"REST request to get achievements for user : {} in course : {}\", user.getLogin(), courseId);\n-        Set<Achievement> achievements = achievementRepository.findAllByUserIdAndCourseId(user.getId(), courseId);\n+        Set<Achievement> achievements = achievementService.findAllByUserIdAndCourseId(user.getId(), courseId);\n         achievementService.prepareForClient(achievements);\n         return ResponseEntity.ok(achievements);\n     }\n", "next_change": {"commit": "8e040450690f9f7b8962366e1d892df304682c95", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\nindex 7789b9e0412..4627a735259 100644\n--- a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n+++ b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n", "chunk": "@@ -20,30 +28,103 @@ import de.tum.in.www1.artemis.service.UserService;\n @RequestMapping(\"/api\")\n public class AchievementResource {\n \n+    private static final String ENTITY_NAME = \"achievement\";\n+\n+    @Value(\"${jhipster.clientApp.name}\")\n+    private String applicationName;\n+\n     private final Logger log = LoggerFactory.getLogger(AchievementResource.class);\n \n+    private final AuthorizationCheckService authCheckService;\n+\n     private final AchievementService achievementService;\n \n     private final UserService userService;\n \n-    public AchievementResource(AchievementService achievementService, UserService userService) {\n+    private final AchievementRepository achievementRepository;\n+\n+    public AchievementResource(AuthorizationCheckService authCheckService, AchievementService achievementService, UserService userService,\n+            AchievementRepository achievementRepository) {\n+        this.authCheckService = authCheckService;\n         this.achievementService = achievementService;\n         this.userService = userService;\n+        this.achievementRepository = achievementRepository;\n     }\n \n     /**\n-     * GET /courses/{courseId}/achievements : Get all achievements for requesting user in given course.\n+     * GET /achievements : Get all achievements for user.\n      *\n-     * @param courseId\n+     * @return the ResponseEntity with status 200 (OK) and with the found achievements as body\n+     */\n+    @GetMapping(\"/achievements\")\n+    @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Set<Achievement>> getAchievementsForUser() {\n+        User user = userService.getUser();\n+        log.debug(\"REST request to get achievements for user : {}\", user.getLogin());\n+        Set<Achievement> achievements = achievementService.findAllForUser(user.getId());\n+        return ResponseEntity.ok(achievements);\n+    }\n+\n+    /**\n+     * GET /courses/{courseId}/achievements : Get all achievements for course.\n+     *\n+     * @param courseId the course to which the achievements belong to\n      * @return the ResponseEntity with status 200 (OK) and with the found achievements as body\n      */\n     @GetMapping(\"/courses/{courseId}/achievements\")\n     @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n-    public ResponseEntity<Set<Achievement>> getAchievementsForUserInCourse(@PathVariable Long courseId) {\n-        User user = userService.getUserWithGroupsAndAuthorities();\n-        log.debug(\"REST request to get achievements for user : {} in course : {}\", user.getLogin(), courseId);\n-        Set<Achievement> achievements = achievementService.findAllByUserIdAndCourseId(user.getId(), courseId);\n-        achievementService.prepareForClient(achievements);\n+    public ResponseEntity<Set<Achievement>> getAchievementsForCourse(@PathVariable Long courseId) {\n+        log.debug(\"REST request to get achievements for course : {}\", courseId);\n+        Set<Achievement> achievements = achievementService.findAllForCourse(courseId);\n         return ResponseEntity.ok(achievements);\n     }\n+\n+    /**\n+     * PUT /achievements : Updates an existing achievement.\n+     *\n+     * @param achievement the achievement to update\n+     * @return the ResponseEntity with status 200 (OK) and with body the updated achievement, or with status 500\n+     *         (Internal Server Error) if the achievement couldn't be updated\n+     */\n+    @PutMapping(\"/achievements\")\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Achievement> updateAchievement(@RequestBody Achievement achievement) {\n+        log.debug(\"REST request to update Achievement : {}\", achievement);\n+\n+        if (achievement.getId() == null) {\n+            return ResponseEntity.badRequest().build();\n+        }\n+\n+        Course course = achievement.getCourse();\n+        User user = userService.getUserWithGroupsAndAuthorities();\n+        if (!authCheckService.isAtLeastInstructorInCourse(course, user)) {\n+            throw new AccessForbiddenException(\"You are not allowed to access this resource\");\n+        }\n+\n+        Achievement savedAchievement = achievementRepository.save(achievement);\n+        return ResponseEntity.ok().headers(HeaderUtil.createEntityUpdateAlert(applicationName, true, ENTITY_NAME, savedAchievement.getId().toString())).body(savedAchievement);\n+    }\n+\n+    /**\n+     * DELETE /achievements/:achievementId : delete the \"id\" achievement.\n+     *\n+     * @param achievementId the id of the achievement to delete\n+     * @return the ResponseEntity with status 200 (OK)\n+     */\n+    @DeleteMapping(\"/achievements/{achievementId}\")\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    @Transactional\n+    public ResponseEntity<Void> deleteAchievement(@PathVariable long achievementId) {\n+        log.info(\"REST request to delete Achievement : {}\", achievementId);\n+        User user = userService.getUserWithGroupsAndAuthorities();\n+        Optional<Achievement> optionalAchievement = achievementService.findById(achievementId);\n+        if (optionalAchievement.isEmpty()) {\n+            return ResponseEntity.notFound().build();\n+        }\n+        Achievement achievement = optionalAchievement.get();\n+        log.info(\"User \" + user.getLogin() + \" has requested to delete the achievement {}\", achievement.getId());\n+        achievementService.delete(achievement);\n+        return ResponseEntity.ok().headers(HeaderUtil.createEntityDeletionAlert(applicationName, true, ENTITY_NAME, achievement.getId().toString())).build();\n+    }\n+\n }\n", "next_change": {"commit": "0616ac4ef001698a1e962c595c2ceecc0eb76dd0", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\nindex 4627a735259..efa5f0e0668 100644\n--- a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n+++ b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n", "chunk": "@@ -122,6 +122,11 @@ public class AchievementResource {\n             return ResponseEntity.notFound().build();\n         }\n         Achievement achievement = optionalAchievement.get();\n+        Course course = achievement.getCourse();\n+        if (!authCheckService.isAtLeastInstructorInCourse(course, user)) {\n+            throw new AccessForbiddenException(\"You are not allowed to access this resource\");\n+        }\n+\n         log.info(\"User \" + user.getLogin() + \" has requested to delete the achievement {}\", achievement.getId());\n         achievementService.delete(achievement);\n         return ResponseEntity.ok().headers(HeaderUtil.createEntityDeletionAlert(applicationName, true, ENTITY_NAME, achievement.getId().toString())).build();\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMyOTQxOA==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r480329418", "body": "I would move this check to the method start", "bodyText": "I would move this check to the method start", "bodyHTML": "<p dir=\"auto\">I would move this check to the method start</p>", "author": "linusmichel", "createdAt": "2020-08-31T19:04:41Z", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java", "diffHunk": "@@ -0,0 +1,130 @@\n+package de.tum.in.www1.artemis.web.rest;\n+\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.springframework.web.bind.annotation.*;\n+\n+import de.tum.in.www1.artemis.domain.Achievement;\n+import de.tum.in.www1.artemis.domain.Course;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.repository.AchievementRepository;\n+import de.tum.in.www1.artemis.service.AchievementService;\n+import de.tum.in.www1.artemis.service.AuthorizationCheckService;\n+import de.tum.in.www1.artemis.service.UserService;\n+import de.tum.in.www1.artemis.web.rest.errors.AccessForbiddenException;\n+import de.tum.in.www1.artemis.web.rest.util.HeaderUtil;\n+\n+/**\n+ * REST controller for managing Achievements.\n+ */\n+@RestController\n+@RequestMapping(\"/api\")\n+public class AchievementResource {\n+\n+    private static final String ENTITY_NAME = \"achievement\";\n+\n+    @Value(\"${jhipster.clientApp.name}\")\n+    private String applicationName;\n+\n+    private final Logger log = LoggerFactory.getLogger(AchievementResource.class);\n+\n+    private final AuthorizationCheckService authCheckService;\n+\n+    private final AchievementService achievementService;\n+\n+    private final UserService userService;\n+\n+    private final AchievementRepository achievementRepository;\n+\n+    public AchievementResource(AuthorizationCheckService authCheckService, AchievementService achievementService, UserService userService,\n+            AchievementRepository achievementRepository) {\n+        this.authCheckService = authCheckService;\n+        this.achievementService = achievementService;\n+        this.userService = userService;\n+        this.achievementRepository = achievementRepository;\n+    }\n+\n+    /**\n+     * GET /achievements : Get all achievements for user.\n+     *\n+     * @return the ResponseEntity with status 200 (OK) and with the found achievements as body\n+     */\n+    @GetMapping(\"/achievements\")\n+    @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Set<Achievement>> getAchievementsForUser() {\n+        User user = userService.getUser();\n+        log.debug(\"REST request to get achievements for user : {}\", user.getLogin());\n+        Set<Achievement> achievements = achievementService.findAllForUser(user.getId());\n+        return ResponseEntity.ok(achievements);\n+    }\n+\n+    /**\n+     * GET /courses/{courseId}/achievements : Get all achievements for course.\n+     *\n+     * @param courseId the course to which the achievements belong to\n+     * @return the ResponseEntity with status 200 (OK) and with the found achievements as body\n+     */\n+    @GetMapping(\"/courses/{courseId}/achievements\")\n+    @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Set<Achievement>> getAchievementsForCourse(@PathVariable Long courseId) {\n+        log.debug(\"REST request to get achievements for course : {}\", courseId);\n+        Set<Achievement> achievements = achievementService.findAllForCourse(courseId);\n+        return ResponseEntity.ok(achievements);\n+    }\n+\n+    /**\n+     * PUT /achievements : Updates an existing achievement.\n+     *\n+     * @param achievement the achievement to update\n+     * @return the ResponseEntity with status 200 (OK) and with body the updated achievement, or with status 500\n+     *         (Internal Server Error) if the achievement couldn't be updated\n+     */\n+    @PutMapping(\"/achievements\")\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Achievement> updateAchievement(@RequestBody Achievement achievement) {\n+        log.debug(\"REST request to update Achievement : {}\", achievement);\n+\n+        Course course = achievement.getCourse();\n+        User user = userService.getUserWithGroupsAndAuthorities();\n+        if (!authCheckService.isAtLeastInstructorInCourse(course, user)) {\n+            throw new AccessForbiddenException(\"You are not allowed to access this resource\");\n+        }\n+\n+        if (achievement.getId() == null) {\n+            return ResponseEntity.badRequest().build();\n+        }", "originalCommit": "1631126ec91b00529db9044aca65d2b9eae6e1d1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM2NjI5Ng==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r480366296", "bodyText": "Done :) thanks", "author": "balazs-czopf", "createdAt": "2020-08-31T19:59:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMyOTQxOA=="}], "type": "inlineReview", "revised_code": {"commit": "6aa68b0ab7a071fa631c7c72cdb8ea02ccf15a39", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\nindex f86a24ff382..9a9cebd81ef 100644\n--- a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n+++ b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n", "chunk": "@@ -91,17 +85,17 @@ public class AchievementResource {\n     public ResponseEntity<Achievement> updateAchievement(@RequestBody Achievement achievement) {\n         log.debug(\"REST request to update Achievement : {}\", achievement);\n \n+        if (achievement.getId() == null) {\n+            return ResponseEntity.badRequest().build();\n+        }\n+\n         Course course = achievement.getCourse();\n         User user = userService.getUserWithGroupsAndAuthorities();\n         if (!authCheckService.isAtLeastInstructorInCourse(course, user)) {\n             throw new AccessForbiddenException(\"You are not allowed to access this resource\");\n         }\n \n-        if (achievement.getId() == null) {\n-            return ResponseEntity.badRequest().build();\n-        }\n-\n-        Achievement savedAchievement = achievementRepository.save(achievement);\n+        Achievement savedAchievement = achievementService.save(achievement);\n         return ResponseEntity.ok().headers(HeaderUtil.createEntityUpdateAlert(applicationName, true, ENTITY_NAME, savedAchievement.getId().toString())).body(savedAchievement);\n     }\n \n", "next_change": {"commit": "c0a4b8df894787c7f22b172ecf3a3a9ce1ff398d", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\nindex 9a9cebd81ef..9b2067369c7 100644\n--- a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n+++ b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n", "chunk": "@@ -95,7 +100,7 @@ public class AchievementResource {\n             throw new AccessForbiddenException(\"You are not allowed to access this resource\");\n         }\n \n-        Achievement savedAchievement = achievementService.save(achievement);\n+        Achievement savedAchievement = achievementRepository.save(achievement);\n         return ResponseEntity.ok().headers(HeaderUtil.createEntityUpdateAlert(applicationName, true, ENTITY_NAME, savedAchievement.getId().toString())).body(savedAchievement);\n     }\n \n", "next_change": {"commit": "0e82242b97cdbc112e1d3a883cb2281d462dd405", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\nindex 9b2067369c7..9a9cebd81ef 100644\n--- a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n+++ b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n", "chunk": "@@ -100,7 +95,7 @@ public class AchievementResource {\n             throw new AccessForbiddenException(\"You are not allowed to access this resource\");\n         }\n \n-        Achievement savedAchievement = achievementRepository.save(achievement);\n+        Achievement savedAchievement = achievementService.save(achievement);\n         return ResponseEntity.ok().headers(HeaderUtil.createEntityUpdateAlert(applicationName, true, ENTITY_NAME, savedAchievement.getId().toString())).body(savedAchievement);\n     }\n \n", "next_change": {"commit": "c7425c9af8e7e15cd22a3771029b103c6d79608f", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\nindex 9a9cebd81ef..9b2067369c7 100644\n--- a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n+++ b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n", "chunk": "@@ -95,7 +100,7 @@ public class AchievementResource {\n             throw new AccessForbiddenException(\"You are not allowed to access this resource\");\n         }\n \n-        Achievement savedAchievement = achievementService.save(achievement);\n+        Achievement savedAchievement = achievementRepository.save(achievement);\n         return ResponseEntity.ok().headers(HeaderUtil.createEntityUpdateAlert(applicationName, true, ENTITY_NAME, savedAchievement.getId().toString())).body(savedAchievement);\n     }\n \n", "next_change": {"commit": "28ed83395042c9e9faddf43940bd9f3c221684b3", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\nindex 9b2067369c7..9a9cebd81ef 100644\n--- a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n+++ b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n", "chunk": "@@ -100,7 +95,7 @@ public class AchievementResource {\n             throw new AccessForbiddenException(\"You are not allowed to access this resource\");\n         }\n \n-        Achievement savedAchievement = achievementRepository.save(achievement);\n+        Achievement savedAchievement = achievementService.save(achievement);\n         return ResponseEntity.ok().headers(HeaderUtil.createEntityUpdateAlert(applicationName, true, ENTITY_NAME, savedAchievement.getId().toString())).body(savedAchievement);\n     }\n \n", "next_change": {"commit": "c3317e06a092c8dbee21b52de380addd92f73b3f", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\nindex 9a9cebd81ef..6234a06e7a2 100644\n--- a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n+++ b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n", "chunk": "@@ -95,7 +102,7 @@ public class AchievementResource {\n             throw new AccessForbiddenException(\"You are not allowed to access this resource\");\n         }\n \n-        Achievement savedAchievement = achievementService.save(achievement);\n+        Achievement savedAchievement = achievementRepository.save(achievement);\n         return ResponseEntity.ok().headers(HeaderUtil.createEntityUpdateAlert(applicationName, true, ENTITY_NAME, savedAchievement.getId().toString())).body(savedAchievement);\n     }\n \n", "next_change": {"commit": "508e8977abe4d1e8ec1c8a817fe9bd0f91f6bb8a", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\nindex 6234a06e7a2..9a9cebd81ef 100644\n--- a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n+++ b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n", "chunk": "@@ -102,7 +95,7 @@ public class AchievementResource {\n             throw new AccessForbiddenException(\"You are not allowed to access this resource\");\n         }\n \n-        Achievement savedAchievement = achievementRepository.save(achievement);\n+        Achievement savedAchievement = achievementService.save(achievement);\n         return ResponseEntity.ok().headers(HeaderUtil.createEntityUpdateAlert(applicationName, true, ENTITY_NAME, savedAchievement.getId().toString())).body(savedAchievement);\n     }\n \n", "next_change": {"commit": "d3d2ea3ec69fdc3185bac66822f03c4a1bf0b6b1", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\nindex 9a9cebd81ef..6234a06e7a2 100644\n--- a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n+++ b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n", "chunk": "@@ -95,7 +102,7 @@ public class AchievementResource {\n             throw new AccessForbiddenException(\"You are not allowed to access this resource\");\n         }\n \n-        Achievement savedAchievement = achievementService.save(achievement);\n+        Achievement savedAchievement = achievementRepository.save(achievement);\n         return ResponseEntity.ok().headers(HeaderUtil.createEntityUpdateAlert(applicationName, true, ENTITY_NAME, savedAchievement.getId().toString())).body(savedAchievement);\n     }\n \n", "next_change": {"commit": "64778c859b7f2d14015c50aedae62db4c98bcee7", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\nindex 6234a06e7a2..9a9cebd81ef 100644\n--- a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n+++ b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n", "chunk": "@@ -102,7 +95,7 @@ public class AchievementResource {\n             throw new AccessForbiddenException(\"You are not allowed to access this resource\");\n         }\n \n-        Achievement savedAchievement = achievementRepository.save(achievement);\n+        Achievement savedAchievement = achievementService.save(achievement);\n         return ResponseEntity.ok().headers(HeaderUtil.createEntityUpdateAlert(applicationName, true, ENTITY_NAME, savedAchievement.getId().toString())).body(savedAchievement);\n     }\n \n", "next_change": {"commit": "8d5bfc049d9e75323290b069e7343df6fc579ee7", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\nindex 9a9cebd81ef..19fd5df9305 100644\n--- a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n+++ b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n", "chunk": "@@ -67,62 +43,11 @@ public class AchievementResource {\n      */\n     @GetMapping(\"/courses/{courseId}/achievements\")\n     @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n-    public ResponseEntity<Set<Achievement>> getAchievementsForCourse(@PathVariable Long courseId) {\n-        log.debug(\"REST request to get achievements for course : {}\", courseId);\n-        Set<Achievement> achievements = achievementService.findAllByCourseId(courseId);\n-        return ResponseEntity.ok(achievements);\n-    }\n-\n-    /**\n-     * PUT /achievements : Updates an existing achievement.\n-     *\n-     * @param achievement the achievement to update\n-     * @return the ResponseEntity with status 200 (OK) and with body the updated achievement, or with status 500\n-     *         (Internal Server Error) if the achievement couldn't be updated\n-     */\n-    @PutMapping(\"/achievements\")\n-    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n-    public ResponseEntity<Achievement> updateAchievement(@RequestBody Achievement achievement) {\n-        log.debug(\"REST request to update Achievement : {}\", achievement);\n-\n-        if (achievement.getId() == null) {\n-            return ResponseEntity.badRequest().build();\n-        }\n-\n-        Course course = achievement.getCourse();\n+    public ResponseEntity<Set<Achievement>> getAchievementsForUserInCourse(@PathVariable Long courseId) {\n         User user = userService.getUserWithGroupsAndAuthorities();\n-        if (!authCheckService.isAtLeastInstructorInCourse(course, user)) {\n-            throw new AccessForbiddenException(\"You are not allowed to access this resource\");\n-        }\n-\n-        Achievement savedAchievement = achievementService.save(achievement);\n-        return ResponseEntity.ok().headers(HeaderUtil.createEntityUpdateAlert(applicationName, true, ENTITY_NAME, savedAchievement.getId().toString())).body(savedAchievement);\n-    }\n-\n-    /**\n-     * DELETE /achievements/:achievementId : delete the \"id\" achievement.\n-     *\n-     * @param achievementId the id of the achievement to delete\n-     * @return the ResponseEntity with status 200 (OK)\n-     */\n-    @DeleteMapping(\"/achievements/{achievementId}\")\n-    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n-    public ResponseEntity<Void> deleteAchievement(@PathVariable long achievementId) {\n-        log.info(\"REST request to delete Achievement : {}\", achievementId);\n-        User user = userService.getUserWithGroupsAndAuthorities();\n-        Optional<Achievement> optionalAchievement = achievementService.findById(achievementId);\n-        if (optionalAchievement.isEmpty()) {\n-            return ResponseEntity.notFound().build();\n-        }\n-        Achievement achievement = optionalAchievement.get();\n-        Course course = achievement.getCourse();\n-        if (!authCheckService.isAtLeastInstructorInCourse(course, user)) {\n-            throw new AccessForbiddenException(\"You are not allowed to access this resource\");\n-        }\n-\n-        log.info(\"User \" + user.getLogin() + \" has requested to delete the achievement {}\", achievement.getId());\n-        achievementService.delete(achievement);\n-        return ResponseEntity.ok().headers(HeaderUtil.createEntityDeletionAlert(applicationName, true, ENTITY_NAME, achievement.getId().toString())).build();\n+        log.debug(\"REST request to get achievements for user : {} in course : {}\", user.getLogin(), courseId);\n+        Set<Achievement> achievements = achievementRepository.findAllByUserIdAndCourseId(user.getId(), courseId);\n+        achievementService.prepareForClient(achievements);\n+        return ResponseEntity.ok(achievements);\n     }\n-\n }\n", "next_change": {"commit": "7a5de1a37353eb19f93ef49666bba352198834cb", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\nindex 19fd5df9305..9a9cebd81ef 100644\n--- a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n+++ b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n", "chunk": "@@ -43,11 +67,62 @@ public class AchievementResource {\n      */\n     @GetMapping(\"/courses/{courseId}/achievements\")\n     @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n-    public ResponseEntity<Set<Achievement>> getAchievementsForUserInCourse(@PathVariable Long courseId) {\n-        User user = userService.getUserWithGroupsAndAuthorities();\n-        log.debug(\"REST request to get achievements for user : {} in course : {}\", user.getLogin(), courseId);\n-        Set<Achievement> achievements = achievementRepository.findAllByUserIdAndCourseId(user.getId(), courseId);\n-        achievementService.prepareForClient(achievements);\n+    public ResponseEntity<Set<Achievement>> getAchievementsForCourse(@PathVariable Long courseId) {\n+        log.debug(\"REST request to get achievements for course : {}\", courseId);\n+        Set<Achievement> achievements = achievementService.findAllByCourseId(courseId);\n         return ResponseEntity.ok(achievements);\n     }\n+\n+    /**\n+     * PUT /achievements : Updates an existing achievement.\n+     *\n+     * @param achievement the achievement to update\n+     * @return the ResponseEntity with status 200 (OK) and with body the updated achievement, or with status 500\n+     *         (Internal Server Error) if the achievement couldn't be updated\n+     */\n+    @PutMapping(\"/achievements\")\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Achievement> updateAchievement(@RequestBody Achievement achievement) {\n+        log.debug(\"REST request to update Achievement : {}\", achievement);\n+\n+        if (achievement.getId() == null) {\n+            return ResponseEntity.badRequest().build();\n+        }\n+\n+        Course course = achievement.getCourse();\n+        User user = userService.getUserWithGroupsAndAuthorities();\n+        if (!authCheckService.isAtLeastInstructorInCourse(course, user)) {\n+            throw new AccessForbiddenException(\"You are not allowed to access this resource\");\n+        }\n+\n+        Achievement savedAchievement = achievementService.save(achievement);\n+        return ResponseEntity.ok().headers(HeaderUtil.createEntityUpdateAlert(applicationName, true, ENTITY_NAME, savedAchievement.getId().toString())).body(savedAchievement);\n+    }\n+\n+    /**\n+     * DELETE /achievements/:achievementId : delete the \"id\" achievement.\n+     *\n+     * @param achievementId the id of the achievement to delete\n+     * @return the ResponseEntity with status 200 (OK)\n+     */\n+    @DeleteMapping(\"/achievements/{achievementId}\")\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Void> deleteAchievement(@PathVariable long achievementId) {\n+        log.info(\"REST request to delete Achievement : {}\", achievementId);\n+        User user = userService.getUserWithGroupsAndAuthorities();\n+        Optional<Achievement> optionalAchievement = achievementService.findById(achievementId);\n+        if (optionalAchievement.isEmpty()) {\n+            return ResponseEntity.notFound().build();\n+        }\n+        Achievement achievement = optionalAchievement.get();\n+        Course course = achievement.getCourse();\n+        if (!authCheckService.isAtLeastInstructorInCourse(course, user)) {\n+            throw new AccessForbiddenException(\"You are not allowed to access this resource\");\n+        }\n+\n+        log.info(\"User \" + user.getLogin() + \" has requested to delete the achievement {}\", achievement.getId());\n+        achievementService.delete(achievement);\n+        return ResponseEntity.ok().headers(HeaderUtil.createEntityDeletionAlert(applicationName, true, ENTITY_NAME, achievement.getId().toString())).build();\n+    }\n+\n }\n", "next_change": {"commit": "116151629d403403ee9b750c30c182f44f70e233", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\nindex 9a9cebd81ef..2367bc01f2b 100644\n--- a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n+++ b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n", "chunk": "@@ -26,103 +21,33 @@ import de.tum.in.www1.artemis.web.rest.util.HeaderUtil;\n @RequestMapping(\"/api\")\n public class AchievementResource {\n \n-    private static final String ENTITY_NAME = \"achievement\";\n-\n-    @Value(\"${jhipster.clientApp.name}\")\n-    private String applicationName;\n-\n     private final Logger log = LoggerFactory.getLogger(AchievementResource.class);\n \n-    private final AuthorizationCheckService authCheckService;\n-\n     private final AchievementService achievementService;\n \n+    private final AchievementRepository achievementRepository;\n+\n     private final UserService userService;\n \n-    public AchievementResource(AuthorizationCheckService authCheckService, AchievementService achievementService, UserService userService) {\n-        this.authCheckService = authCheckService;\n+    public AchievementResource(AchievementService achievementService, AchievementRepository achievementRepository, UserService userService) {\n         this.achievementService = achievementService;\n+        this.achievementRepository = achievementRepository;\n         this.userService = userService;\n     }\n \n     /**\n-     * GET /achievements : Get all achievements for user.\n+     * GET /courses/{courseId}/achievements : Get all achievements for requesting user in given course.\n      *\n-     * @return the ResponseEntity with status 200 (OK) and with the found achievements as body\n-     */\n-    @GetMapping(\"/achievements\")\n-    @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n-    public ResponseEntity<Set<Achievement>> getAchievementsForUser() {\n-        User user = userService.getUser();\n-        log.debug(\"REST request to get achievements for user : {}\", user.getLogin());\n-        Set<Achievement> achievements = achievementService.findAllByUserId(user.getId());\n-        return ResponseEntity.ok(achievements);\n-    }\n-\n-    /**\n-     * GET /courses/{courseId}/achievements : Get all achievements for course.\n-     *\n-     * @param courseId the course to which the achievements belong to\n+     * @param courseId\n      * @return the ResponseEntity with status 200 (OK) and with the found achievements as body\n      */\n     @GetMapping(\"/courses/{courseId}/achievements\")\n     @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n-    public ResponseEntity<Set<Achievement>> getAchievementsForCourse(@PathVariable Long courseId) {\n-        log.debug(\"REST request to get achievements for course : {}\", courseId);\n-        Set<Achievement> achievements = achievementService.findAllByCourseId(courseId);\n-        return ResponseEntity.ok(achievements);\n-    }\n-\n-    /**\n-     * PUT /achievements : Updates an existing achievement.\n-     *\n-     * @param achievement the achievement to update\n-     * @return the ResponseEntity with status 200 (OK) and with body the updated achievement, or with status 500\n-     *         (Internal Server Error) if the achievement couldn't be updated\n-     */\n-    @PutMapping(\"/achievements\")\n-    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n-    public ResponseEntity<Achievement> updateAchievement(@RequestBody Achievement achievement) {\n-        log.debug(\"REST request to update Achievement : {}\", achievement);\n-\n-        if (achievement.getId() == null) {\n-            return ResponseEntity.badRequest().build();\n-        }\n-\n-        Course course = achievement.getCourse();\n+    public ResponseEntity<Set<Achievement>> getAchievementsForUserInCourse(@PathVariable Long courseId) {\n         User user = userService.getUserWithGroupsAndAuthorities();\n-        if (!authCheckService.isAtLeastInstructorInCourse(course, user)) {\n-            throw new AccessForbiddenException(\"You are not allowed to access this resource\");\n-        }\n-\n-        Achievement savedAchievement = achievementService.save(achievement);\n-        return ResponseEntity.ok().headers(HeaderUtil.createEntityUpdateAlert(applicationName, true, ENTITY_NAME, savedAchievement.getId().toString())).body(savedAchievement);\n-    }\n-\n-    /**\n-     * DELETE /achievements/:achievementId : delete the \"id\" achievement.\n-     *\n-     * @param achievementId the id of the achievement to delete\n-     * @return the ResponseEntity with status 200 (OK)\n-     */\n-    @DeleteMapping(\"/achievements/{achievementId}\")\n-    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n-    public ResponseEntity<Void> deleteAchievement(@PathVariable long achievementId) {\n-        log.info(\"REST request to delete Achievement : {}\", achievementId);\n-        User user = userService.getUserWithGroupsAndAuthorities();\n-        Optional<Achievement> optionalAchievement = achievementService.findById(achievementId);\n-        if (optionalAchievement.isEmpty()) {\n-            return ResponseEntity.notFound().build();\n-        }\n-        Achievement achievement = optionalAchievement.get();\n-        Course course = achievement.getCourse();\n-        if (!authCheckService.isAtLeastInstructorInCourse(course, user)) {\n-            throw new AccessForbiddenException(\"You are not allowed to access this resource\");\n-        }\n-\n-        log.info(\"User \" + user.getLogin() + \" has requested to delete the achievement {}\", achievement.getId());\n-        achievementService.delete(achievement);\n-        return ResponseEntity.ok().headers(HeaderUtil.createEntityDeletionAlert(applicationName, true, ENTITY_NAME, achievement.getId().toString())).build();\n+        log.debug(\"REST request to get achievements for user : {} in course : {}\", user.getLogin(), courseId);\n+        Set<Achievement> achievements = achievementRepository.findAllByUserIdAndCourseId(user.getId(), courseId);\n+        achievementService.prepareForClient(achievements);\n+        return ResponseEntity.ok(achievements);\n     }\n-\n }\n", "next_change": {"commit": "53c319a21a4053a341e9b24da4987de5abfb656d", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\nindex 2367bc01f2b..7789b9e0412 100644\n--- a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n+++ b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n", "chunk": "@@ -46,7 +42,7 @@ public class AchievementResource {\n     public ResponseEntity<Set<Achievement>> getAchievementsForUserInCourse(@PathVariable Long courseId) {\n         User user = userService.getUserWithGroupsAndAuthorities();\n         log.debug(\"REST request to get achievements for user : {} in course : {}\", user.getLogin(), courseId);\n-        Set<Achievement> achievements = achievementRepository.findAllByUserIdAndCourseId(user.getId(), courseId);\n+        Set<Achievement> achievements = achievementService.findAllByUserIdAndCourseId(user.getId(), courseId);\n         achievementService.prepareForClient(achievements);\n         return ResponseEntity.ok(achievements);\n     }\n", "next_change": {"commit": "8e040450690f9f7b8962366e1d892df304682c95", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\nindex 7789b9e0412..4627a735259 100644\n--- a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n+++ b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n", "chunk": "@@ -20,30 +28,103 @@ import de.tum.in.www1.artemis.service.UserService;\n @RequestMapping(\"/api\")\n public class AchievementResource {\n \n+    private static final String ENTITY_NAME = \"achievement\";\n+\n+    @Value(\"${jhipster.clientApp.name}\")\n+    private String applicationName;\n+\n     private final Logger log = LoggerFactory.getLogger(AchievementResource.class);\n \n+    private final AuthorizationCheckService authCheckService;\n+\n     private final AchievementService achievementService;\n \n     private final UserService userService;\n \n-    public AchievementResource(AchievementService achievementService, UserService userService) {\n+    private final AchievementRepository achievementRepository;\n+\n+    public AchievementResource(AuthorizationCheckService authCheckService, AchievementService achievementService, UserService userService,\n+            AchievementRepository achievementRepository) {\n+        this.authCheckService = authCheckService;\n         this.achievementService = achievementService;\n         this.userService = userService;\n+        this.achievementRepository = achievementRepository;\n     }\n \n     /**\n-     * GET /courses/{courseId}/achievements : Get all achievements for requesting user in given course.\n+     * GET /achievements : Get all achievements for user.\n      *\n-     * @param courseId\n+     * @return the ResponseEntity with status 200 (OK) and with the found achievements as body\n+     */\n+    @GetMapping(\"/achievements\")\n+    @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Set<Achievement>> getAchievementsForUser() {\n+        User user = userService.getUser();\n+        log.debug(\"REST request to get achievements for user : {}\", user.getLogin());\n+        Set<Achievement> achievements = achievementService.findAllForUser(user.getId());\n+        return ResponseEntity.ok(achievements);\n+    }\n+\n+    /**\n+     * GET /courses/{courseId}/achievements : Get all achievements for course.\n+     *\n+     * @param courseId the course to which the achievements belong to\n      * @return the ResponseEntity with status 200 (OK) and with the found achievements as body\n      */\n     @GetMapping(\"/courses/{courseId}/achievements\")\n     @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n-    public ResponseEntity<Set<Achievement>> getAchievementsForUserInCourse(@PathVariable Long courseId) {\n-        User user = userService.getUserWithGroupsAndAuthorities();\n-        log.debug(\"REST request to get achievements for user : {} in course : {}\", user.getLogin(), courseId);\n-        Set<Achievement> achievements = achievementService.findAllByUserIdAndCourseId(user.getId(), courseId);\n-        achievementService.prepareForClient(achievements);\n+    public ResponseEntity<Set<Achievement>> getAchievementsForCourse(@PathVariable Long courseId) {\n+        log.debug(\"REST request to get achievements for course : {}\", courseId);\n+        Set<Achievement> achievements = achievementService.findAllForCourse(courseId);\n         return ResponseEntity.ok(achievements);\n     }\n+\n+    /**\n+     * PUT /achievements : Updates an existing achievement.\n+     *\n+     * @param achievement the achievement to update\n+     * @return the ResponseEntity with status 200 (OK) and with body the updated achievement, or with status 500\n+     *         (Internal Server Error) if the achievement couldn't be updated\n+     */\n+    @PutMapping(\"/achievements\")\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Achievement> updateAchievement(@RequestBody Achievement achievement) {\n+        log.debug(\"REST request to update Achievement : {}\", achievement);\n+\n+        if (achievement.getId() == null) {\n+            return ResponseEntity.badRequest().build();\n+        }\n+\n+        Course course = achievement.getCourse();\n+        User user = userService.getUserWithGroupsAndAuthorities();\n+        if (!authCheckService.isAtLeastInstructorInCourse(course, user)) {\n+            throw new AccessForbiddenException(\"You are not allowed to access this resource\");\n+        }\n+\n+        Achievement savedAchievement = achievementRepository.save(achievement);\n+        return ResponseEntity.ok().headers(HeaderUtil.createEntityUpdateAlert(applicationName, true, ENTITY_NAME, savedAchievement.getId().toString())).body(savedAchievement);\n+    }\n+\n+    /**\n+     * DELETE /achievements/:achievementId : delete the \"id\" achievement.\n+     *\n+     * @param achievementId the id of the achievement to delete\n+     * @return the ResponseEntity with status 200 (OK)\n+     */\n+    @DeleteMapping(\"/achievements/{achievementId}\")\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    @Transactional\n+    public ResponseEntity<Void> deleteAchievement(@PathVariable long achievementId) {\n+        log.info(\"REST request to delete Achievement : {}\", achievementId);\n+        User user = userService.getUserWithGroupsAndAuthorities();\n+        Optional<Achievement> optionalAchievement = achievementService.findById(achievementId);\n+        if (optionalAchievement.isEmpty()) {\n+            return ResponseEntity.notFound().build();\n+        }\n+        Achievement achievement = optionalAchievement.get();\n+        log.info(\"User \" + user.getLogin() + \" has requested to delete the achievement {}\", achievement.getId());\n+        achievementService.delete(achievement);\n+        return ResponseEntity.ok().headers(HeaderUtil.createEntityDeletionAlert(applicationName, true, ENTITY_NAME, achievement.getId().toString())).build();\n+    }\n+\n }\n", "next_change": {"commit": "0616ac4ef001698a1e962c595c2ceecc0eb76dd0", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\nindex 4627a735259..efa5f0e0668 100644\n--- a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n+++ b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n", "chunk": "@@ -122,6 +122,11 @@ public class AchievementResource {\n             return ResponseEntity.notFound().build();\n         }\n         Achievement achievement = optionalAchievement.get();\n+        Course course = achievement.getCourse();\n+        if (!authCheckService.isAtLeastInstructorInCourse(course, user)) {\n+            throw new AccessForbiddenException(\"You are not allowed to access this resource\");\n+        }\n+\n         log.info(\"User \" + user.getLogin() + \" has requested to delete the achievement {}\", achievement.getId());\n         achievementService.delete(achievement);\n         return ResponseEntity.ok().headers(HeaderUtil.createEntityDeletionAlert(applicationName, true, ENTITY_NAME, achievement.getId().toString())).build();\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}, {"oid": "8e040450690f9f7b8962366e1d892df304682c95", "url": "https://github.com/ls1intum/Artemis/commit/8e040450690f9f7b8962366e1d892df304682c95", "message": "move check in function", "committedDate": "2020-08-31T19:55:47Z", "type": "commit"}, {"oid": "b07582a02ee19947182bc0e8c8d434041dc35755", "url": "https://github.com/ls1intum/Artemis/commit/b07582a02ee19947182bc0e8c8d434041dc35755", "message": "Merge branch 'develop' into feature/achievements/storage", "committedDate": "2020-08-31T19:59:14Z", "type": "commit"}, {"oid": "0616ac4ef001698a1e962c595c2ceecc0eb76dd0", "url": "https://github.com/ls1intum/Artemis/commit/0616ac4ef001698a1e962c595c2ceecc0eb76dd0", "message": "get 100 percent test coverage", "committedDate": "2020-08-31T21:25:54Z", "type": "commit"}, {"oid": "45dac20bf2cd9e41c1e6ff21336a2849962b462e", "url": "https://github.com/ls1intum/Artemis/commit/45dac20bf2cd9e41c1e6ff21336a2849962b462e", "message": "tiny fix", "committedDate": "2020-08-31T22:03:36Z", "type": "commit"}, {"oid": "11b272cd28a879d99eefff297aec8bf6d3f4748c", "url": "https://github.com/ls1intum/Artemis/commit/11b272cd28a879d99eefff297aec8bf6d3f4748c", "message": "remove unnecessary eager", "committedDate": "2020-08-31T23:26:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQ4MDUxMQ==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r480480511", "body": "Double check if this is correct: https://docs.jboss.org/hibernate/orm/current/userguide/html_single/Hibernate_User_Guide.html#pc-cascade-on-delete. Sounds to me like this is only for auto generated schemas. We also never use this in Artemis at the moment", "bodyText": "Double check if this is correct: https://docs.jboss.org/hibernate/orm/current/userguide/html_single/Hibernate_User_Guide.html#pc-cascade-on-delete. Sounds to me like this is only for auto generated schemas. We also never use this in Artemis at the moment", "bodyHTML": "<p dir=\"auto\">Double check if this is correct: <a href=\"https://docs.jboss.org/hibernate/orm/current/userguide/html_single/Hibernate_User_Guide.html#pc-cascade-on-delete\" rel=\"nofollow\">https://docs.jboss.org/hibernate/orm/current/userguide/html_single/Hibernate_User_Guide.html#pc-cascade-on-delete</a>. Sounds to me like this is only for auto generated schemas. We also never use this in Artemis at the moment</p>", "author": "kloessst", "createdAt": "2020-08-31T23:58:44Z", "path": "src/main/java/de/tum/in/www1/artemis/domain/Achievement.java", "diffHunk": "@@ -0,0 +1,140 @@\n+package de.tum.in.www1.artemis.domain;\n+\n+import java.io.Serializable;\n+import java.util.HashSet;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import javax.persistence.*;\n+\n+import org.hibernate.annotations.Cache;\n+import org.hibernate.annotations.CacheConcurrencyStrategy;\n+import org.hibernate.annotations.OnDelete;\n+import org.hibernate.annotations.OnDeleteAction;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+\n+@Entity\n+@Table(name = \"achievement\")\n+@Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)\n+@JsonInclude(JsonInclude.Include.NON_EMPTY)\n+public class Achievement implements Serializable {\n+\n+    @Id\n+    @Column(name = \"id\")\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    private Long id;\n+\n+    @Column(name = \"title\")\n+    private String title;\n+\n+    @Column(name = \"description\")\n+    private String description;\n+\n+    @Column(name = \"icon\")\n+    private String icon;\n+\n+    @Column(name = \"rank\")\n+    private Integer rank;\n+\n+    @ManyToOne\n+    @OnDelete(action = OnDeleteAction.CASCADE)", "originalCommit": "11b272cd28a879d99eefff297aec8bf6d3f4748c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDgyOTI5Mw==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r480829293", "bodyText": "Well, the example in this link shows quite the behavior I want to have here.", "author": "balazs-czopf", "createdAt": "2020-09-01T05:24:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQ4MDUxMQ=="}], "type": "inlineReview", "revised_code": {"commit": "6aa68b0ab7a071fa631c7c72cdb8ea02ccf15a39", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java b/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java\nindex b0217f136e0..7a96d7f38b1 100644\n--- a/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java\n+++ b/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java\n", "chunk": "@@ -35,11 +34,11 @@ public class Achievement implements Serializable {\n     @Column(name = \"icon\")\n     private String icon;\n \n+    @Enumerated(EnumType.STRING)\n     @Column(name = \"rank\")\n-    private Integer rank;\n+    private AchievementRank rank;\n \n     @ManyToOne\n-    @OnDelete(action = OnDeleteAction.CASCADE)\n     private Course course;\n \n     @ManyToOne\n", "next_change": {"commit": "95622742bd3fa7623d0ad8df6089acef534ee60f", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java b/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java\nindex 7a96d7f38b1..1a62a5a07d7 100644\n--- a/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java\n+++ b/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java\n", "chunk": "@@ -38,6 +40,10 @@ public class Achievement implements Serializable {\n     @Column(name = \"rank\")\n     private AchievementRank rank;\n \n+    @Enumerated(EnumType.STRING)\n+    @Column(name = \"type\")\n+    private AchievementType type;\n+\n     @ManyToOne\n     private Course course;\n \n", "next_change": {"commit": "0e82242b97cdbc112e1d3a883cb2281d462dd405", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java b/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java\nindex 1a62a5a07d7..7a96d7f38b1 100644\n--- a/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java\n+++ b/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java\n", "chunk": "@@ -40,10 +38,6 @@ public class Achievement implements Serializable {\n     @Column(name = \"rank\")\n     private AchievementRank rank;\n \n-    @Enumerated(EnumType.STRING)\n-    @Column(name = \"type\")\n-    private AchievementType type;\n-\n     @ManyToOne\n     private Course course;\n \n", "next_change": {"commit": "c7425c9af8e7e15cd22a3771029b103c6d79608f", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java b/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java\nindex 7a96d7f38b1..2f31a8fcbc5 100644\n--- a/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java\n+++ b/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java\n", "chunk": "@@ -38,6 +40,10 @@ public class Achievement implements Serializable {\n     @Column(name = \"rank\")\n     private AchievementRank rank;\n \n+    @Enumerated(EnumType.STRING)\n+    @Column(name = \"type\")\n+    private AchievementType type;\n+\n     @ManyToOne\n     private Course course;\n \n", "next_change": {"commit": "28ed83395042c9e9faddf43940bd9f3c221684b3", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java b/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java\nindex 2f31a8fcbc5..7a96d7f38b1 100644\n--- a/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java\n+++ b/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java\n", "chunk": "@@ -40,10 +38,6 @@ public class Achievement implements Serializable {\n     @Column(name = \"rank\")\n     private AchievementRank rank;\n \n-    @Enumerated(EnumType.STRING)\n-    @Column(name = \"type\")\n-    private AchievementType type;\n-\n     @ManyToOne\n     private Course course;\n \n", "next_change": {"commit": "c3317e06a092c8dbee21b52de380addd92f73b3f", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java b/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java\nindex 7a96d7f38b1..2f31a8fcbc5 100644\n--- a/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java\n+++ b/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java\n", "chunk": "@@ -38,6 +40,10 @@ public class Achievement implements Serializable {\n     @Column(name = \"rank\")\n     private AchievementRank rank;\n \n+    @Enumerated(EnumType.STRING)\n+    @Column(name = \"type\")\n+    private AchievementType type;\n+\n     @ManyToOne\n     private Course course;\n \n", "next_change": {"commit": "508e8977abe4d1e8ec1c8a817fe9bd0f91f6bb8a", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java b/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java\nindex 2f31a8fcbc5..7a96d7f38b1 100644\n--- a/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java\n+++ b/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java\n", "chunk": "@@ -40,10 +38,6 @@ public class Achievement implements Serializable {\n     @Column(name = \"rank\")\n     private AchievementRank rank;\n \n-    @Enumerated(EnumType.STRING)\n-    @Column(name = \"type\")\n-    private AchievementType type;\n-\n     @ManyToOne\n     private Course course;\n \n", "next_change": {"commit": "d3d2ea3ec69fdc3185bac66822f03c4a1bf0b6b1", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java b/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java\nindex 7a96d7f38b1..2f31a8fcbc5 100644\n--- a/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java\n+++ b/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java\n", "chunk": "@@ -38,6 +40,10 @@ public class Achievement implements Serializable {\n     @Column(name = \"rank\")\n     private AchievementRank rank;\n \n+    @Enumerated(EnumType.STRING)\n+    @Column(name = \"type\")\n+    private AchievementType type;\n+\n     @ManyToOne\n     private Course course;\n \n", "next_change": {"commit": "87e1b7686ddcdf36dbefc8407242e70d200a329d", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java b/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java\nindex 2f31a8fcbc5..4d69ebdcf6a 100644\n--- a/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java\n+++ b/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java\n", "chunk": "@@ -37,11 +37,11 @@ public class Achievement implements Serializable {\n     private String icon;\n \n     @Enumerated(EnumType.STRING)\n-    @Column(name = \"rank\")\n+    @Column(name = \"`rank`\")\n     private AchievementRank rank;\n \n     @Enumerated(EnumType.STRING)\n-    @Column(name = \"type\")\n+    @Column(name = \"`type`\")\n     private AchievementType type;\n \n     @ManyToOne\n", "next_change": {"commit": "64778c859b7f2d14015c50aedae62db4c98bcee7", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java b/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java\nindex 4d69ebdcf6a..7a96d7f38b1 100644\n--- a/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java\n+++ b/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java\n", "chunk": "@@ -37,13 +35,9 @@ public class Achievement implements Serializable {\n     private String icon;\n \n     @Enumerated(EnumType.STRING)\n-    @Column(name = \"`rank`\")\n+    @Column(name = \"rank\")\n     private AchievementRank rank;\n \n-    @Enumerated(EnumType.STRING)\n-    @Column(name = \"`type`\")\n-    private AchievementType type;\n-\n     @ManyToOne\n     private Course course;\n \n", "next_change": {"commit": "8d5bfc049d9e75323290b069e7343df6fc579ee7", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java b/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java\nindex 7a96d7f38b1..4d69ebdcf6a 100644\n--- a/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java\n+++ b/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java\n", "chunk": "@@ -35,9 +37,13 @@ public class Achievement implements Serializable {\n     private String icon;\n \n     @Enumerated(EnumType.STRING)\n-    @Column(name = \"rank\")\n+    @Column(name = \"`rank`\")\n     private AchievementRank rank;\n \n+    @Enumerated(EnumType.STRING)\n+    @Column(name = \"`type`\")\n+    private AchievementType type;\n+\n     @ManyToOne\n     private Course course;\n \n", "next_change": {"commit": "7a5de1a37353eb19f93ef49666bba352198834cb", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java b/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java\nindex 4d69ebdcf6a..7a96d7f38b1 100644\n--- a/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java\n+++ b/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java\n", "chunk": "@@ -37,13 +35,9 @@ public class Achievement implements Serializable {\n     private String icon;\n \n     @Enumerated(EnumType.STRING)\n-    @Column(name = \"`rank`\")\n+    @Column(name = \"rank\")\n     private AchievementRank rank;\n \n-    @Enumerated(EnumType.STRING)\n-    @Column(name = \"`type`\")\n-    private AchievementType type;\n-\n     @ManyToOne\n     private Course course;\n \n", "next_change": {"commit": "116151629d403403ee9b750c30c182f44f70e233", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java b/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java\nindex 7a96d7f38b1..4d69ebdcf6a 100644\n--- a/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java\n+++ b/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java\n", "chunk": "@@ -35,9 +37,13 @@ public class Achievement implements Serializable {\n     private String icon;\n \n     @Enumerated(EnumType.STRING)\n-    @Column(name = \"rank\")\n+    @Column(name = \"`rank`\")\n     private AchievementRank rank;\n \n+    @Enumerated(EnumType.STRING)\n+    @Column(name = \"`type`\")\n+    private AchievementType type;\n+\n     @ManyToOne\n     private Course course;\n \n", "next_change": {"commit": "2d87fe70c504d9d9c855d7c0371f19b9bd8c745d", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java b/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java\nindex 4d69ebdcf6a..25ab0a87c9f 100644\n--- a/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java\n+++ b/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java\n", "chunk": "@@ -37,11 +36,11 @@ public class Achievement implements Serializable {\n     private String icon;\n \n     @Enumerated(EnumType.STRING)\n-    @Column(name = \"`rank`\")\n+    @Column(name = \"achievement_rank\")\n     private AchievementRank rank;\n \n     @Enumerated(EnumType.STRING)\n-    @Column(name = \"`type`\")\n+    @Column(name = \"achievement_type\")\n     private AchievementType type;\n \n     @ManyToOne\n", "next_change": {"commit": "38f60a94a755877c7b502fda4cd54fca2ba8cb18", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java b/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java\nindex 25ab0a87c9f..94e1e11c66b 100644\n--- a/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java\n+++ b/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java\n", "chunk": "@@ -36,14 +37,11 @@ public class Achievement implements Serializable {\n     private String icon;\n \n     @Enumerated(EnumType.STRING)\n-    @Column(name = \"achievement_rank\")\n-    private AchievementRank rank;\n-\n-    @Enumerated(EnumType.STRING)\n-    @Column(name = \"achievement_type\")\n-    private AchievementType type;\n+    @Column(name = \"rank\")\n+    private Rank rank;\n \n     @ManyToOne\n+    @OnDelete(action = OnDeleteAction.CASCADE)\n     private Course course;\n \n     @ManyToOne\n", "next_change": {"commit": "fd13e3d27e731c1b8d1a2dea0e1c43ae2468034b", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java b/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java\nindex 94e1e11c66b..938f0638259 100644\n--- a/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java\n+++ b/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java\n", "chunk": "@@ -41,7 +41,6 @@ public class Achievement implements Serializable {\n     private Rank rank;\n \n     @ManyToOne\n-    @OnDelete(action = OnDeleteAction.CASCADE)\n     private Course course;\n \n     @ManyToOne\n", "next_change": {"commit": "9d6b585f50ea18da108af99466daf80870a21a0b", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java b/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java\nindex 938f0638259..7a96d7f38b1 100644\n--- a/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java\n+++ b/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java\n", "chunk": "@@ -38,7 +36,7 @@ public class Achievement implements Serializable {\n \n     @Enumerated(EnumType.STRING)\n     @Column(name = \"rank\")\n-    private Rank rank;\n+    private AchievementRank rank;\n \n     @ManyToOne\n     private Course course;\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQ5NTM3OQ==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r480495379", "body": "I'd rather use an enum here to standardize the ranks across the system. For example AchievementRanks with PLATIN, GOLD, SILVER, BRONZE. Then you can easily couple these values with your achievement definitions.", "bodyText": "I'd rather use an enum here to standardize the ranks across the system. For example AchievementRanks with PLATIN, GOLD, SILVER, BRONZE. Then you can easily couple these values with your achievement definitions.", "bodyHTML": "<p dir=\"auto\">I'd rather use an enum here to standardize the ranks across the system. For example AchievementRanks with PLATIN, GOLD, SILVER, BRONZE. Then you can easily couple these values with your achievement definitions.</p>", "author": "kloessst", "createdAt": "2020-09-01T00:26:23Z", "path": "src/main/java/de/tum/in/www1/artemis/domain/Achievement.java", "diffHunk": "@@ -0,0 +1,140 @@\n+package de.tum.in.www1.artemis.domain;\n+\n+import java.io.Serializable;\n+import java.util.HashSet;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import javax.persistence.*;\n+\n+import org.hibernate.annotations.Cache;\n+import org.hibernate.annotations.CacheConcurrencyStrategy;\n+import org.hibernate.annotations.OnDelete;\n+import org.hibernate.annotations.OnDeleteAction;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+\n+@Entity\n+@Table(name = \"achievement\")\n+@Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)\n+@JsonInclude(JsonInclude.Include.NON_EMPTY)\n+public class Achievement implements Serializable {\n+\n+    @Id\n+    @Column(name = \"id\")\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    private Long id;\n+\n+    @Column(name = \"title\")\n+    private String title;\n+\n+    @Column(name = \"description\")\n+    private String description;\n+\n+    @Column(name = \"icon\")\n+    private String icon;\n+\n+    @Column(name = \"rank\")\n+    private Integer rank;", "originalCommit": "11b272cd28a879d99eefff297aec8bf6d3f4748c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDgzNjA5Mg==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r480836092", "bodyText": "That\u00b4s a good point actually, thanks \ud83d\udc4d", "author": "balazs-czopf", "createdAt": "2020-09-01T05:35:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQ5NTM3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "6aa68b0ab7a071fa631c7c72cdb8ea02ccf15a39", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java b/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java\nindex b0217f136e0..7a96d7f38b1 100644\n--- a/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java\n+++ b/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java\n", "chunk": "@@ -35,11 +34,11 @@ public class Achievement implements Serializable {\n     @Column(name = \"icon\")\n     private String icon;\n \n+    @Enumerated(EnumType.STRING)\n     @Column(name = \"rank\")\n-    private Integer rank;\n+    private AchievementRank rank;\n \n     @ManyToOne\n-    @OnDelete(action = OnDeleteAction.CASCADE)\n     private Course course;\n \n     @ManyToOne\n", "next_change": {"commit": "95622742bd3fa7623d0ad8df6089acef534ee60f", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java b/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java\nindex 7a96d7f38b1..1a62a5a07d7 100644\n--- a/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java\n+++ b/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java\n", "chunk": "@@ -38,6 +40,10 @@ public class Achievement implements Serializable {\n     @Column(name = \"rank\")\n     private AchievementRank rank;\n \n+    @Enumerated(EnumType.STRING)\n+    @Column(name = \"type\")\n+    private AchievementType type;\n+\n     @ManyToOne\n     private Course course;\n \n", "next_change": {"commit": "0e82242b97cdbc112e1d3a883cb2281d462dd405", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java b/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java\nindex 1a62a5a07d7..7a96d7f38b1 100644\n--- a/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java\n+++ b/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java\n", "chunk": "@@ -40,10 +38,6 @@ public class Achievement implements Serializable {\n     @Column(name = \"rank\")\n     private AchievementRank rank;\n \n-    @Enumerated(EnumType.STRING)\n-    @Column(name = \"type\")\n-    private AchievementType type;\n-\n     @ManyToOne\n     private Course course;\n \n", "next_change": {"commit": "c7425c9af8e7e15cd22a3771029b103c6d79608f", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java b/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java\nindex 7a96d7f38b1..2f31a8fcbc5 100644\n--- a/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java\n+++ b/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java\n", "chunk": "@@ -38,6 +40,10 @@ public class Achievement implements Serializable {\n     @Column(name = \"rank\")\n     private AchievementRank rank;\n \n+    @Enumerated(EnumType.STRING)\n+    @Column(name = \"type\")\n+    private AchievementType type;\n+\n     @ManyToOne\n     private Course course;\n \n", "next_change": {"commit": "28ed83395042c9e9faddf43940bd9f3c221684b3", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java b/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java\nindex 2f31a8fcbc5..7a96d7f38b1 100644\n--- a/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java\n+++ b/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java\n", "chunk": "@@ -40,10 +38,6 @@ public class Achievement implements Serializable {\n     @Column(name = \"rank\")\n     private AchievementRank rank;\n \n-    @Enumerated(EnumType.STRING)\n-    @Column(name = \"type\")\n-    private AchievementType type;\n-\n     @ManyToOne\n     private Course course;\n \n", "next_change": {"commit": "c3317e06a092c8dbee21b52de380addd92f73b3f", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java b/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java\nindex 7a96d7f38b1..2f31a8fcbc5 100644\n--- a/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java\n+++ b/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java\n", "chunk": "@@ -38,6 +40,10 @@ public class Achievement implements Serializable {\n     @Column(name = \"rank\")\n     private AchievementRank rank;\n \n+    @Enumerated(EnumType.STRING)\n+    @Column(name = \"type\")\n+    private AchievementType type;\n+\n     @ManyToOne\n     private Course course;\n \n", "next_change": {"commit": "508e8977abe4d1e8ec1c8a817fe9bd0f91f6bb8a", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java b/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java\nindex 2f31a8fcbc5..7a96d7f38b1 100644\n--- a/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java\n+++ b/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java\n", "chunk": "@@ -40,10 +38,6 @@ public class Achievement implements Serializable {\n     @Column(name = \"rank\")\n     private AchievementRank rank;\n \n-    @Enumerated(EnumType.STRING)\n-    @Column(name = \"type\")\n-    private AchievementType type;\n-\n     @ManyToOne\n     private Course course;\n \n", "next_change": {"commit": "d3d2ea3ec69fdc3185bac66822f03c4a1bf0b6b1", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java b/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java\nindex 7a96d7f38b1..2f31a8fcbc5 100644\n--- a/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java\n+++ b/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java\n", "chunk": "@@ -38,6 +40,10 @@ public class Achievement implements Serializable {\n     @Column(name = \"rank\")\n     private AchievementRank rank;\n \n+    @Enumerated(EnumType.STRING)\n+    @Column(name = \"type\")\n+    private AchievementType type;\n+\n     @ManyToOne\n     private Course course;\n \n", "next_change": {"commit": "87e1b7686ddcdf36dbefc8407242e70d200a329d", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java b/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java\nindex 2f31a8fcbc5..4d69ebdcf6a 100644\n--- a/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java\n+++ b/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java\n", "chunk": "@@ -37,11 +37,11 @@ public class Achievement implements Serializable {\n     private String icon;\n \n     @Enumerated(EnumType.STRING)\n-    @Column(name = \"rank\")\n+    @Column(name = \"`rank`\")\n     private AchievementRank rank;\n \n     @Enumerated(EnumType.STRING)\n-    @Column(name = \"type\")\n+    @Column(name = \"`type`\")\n     private AchievementType type;\n \n     @ManyToOne\n", "next_change": {"commit": "64778c859b7f2d14015c50aedae62db4c98bcee7", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java b/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java\nindex 4d69ebdcf6a..7a96d7f38b1 100644\n--- a/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java\n+++ b/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java\n", "chunk": "@@ -37,13 +35,9 @@ public class Achievement implements Serializable {\n     private String icon;\n \n     @Enumerated(EnumType.STRING)\n-    @Column(name = \"`rank`\")\n+    @Column(name = \"rank\")\n     private AchievementRank rank;\n \n-    @Enumerated(EnumType.STRING)\n-    @Column(name = \"`type`\")\n-    private AchievementType type;\n-\n     @ManyToOne\n     private Course course;\n \n", "next_change": {"commit": "8d5bfc049d9e75323290b069e7343df6fc579ee7", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java b/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java\nindex 7a96d7f38b1..4d69ebdcf6a 100644\n--- a/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java\n+++ b/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java\n", "chunk": "@@ -35,9 +37,13 @@ public class Achievement implements Serializable {\n     private String icon;\n \n     @Enumerated(EnumType.STRING)\n-    @Column(name = \"rank\")\n+    @Column(name = \"`rank`\")\n     private AchievementRank rank;\n \n+    @Enumerated(EnumType.STRING)\n+    @Column(name = \"`type`\")\n+    private AchievementType type;\n+\n     @ManyToOne\n     private Course course;\n \n", "next_change": {"commit": "7a5de1a37353eb19f93ef49666bba352198834cb", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java b/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java\nindex 4d69ebdcf6a..7a96d7f38b1 100644\n--- a/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java\n+++ b/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java\n", "chunk": "@@ -37,13 +35,9 @@ public class Achievement implements Serializable {\n     private String icon;\n \n     @Enumerated(EnumType.STRING)\n-    @Column(name = \"`rank`\")\n+    @Column(name = \"rank\")\n     private AchievementRank rank;\n \n-    @Enumerated(EnumType.STRING)\n-    @Column(name = \"`type`\")\n-    private AchievementType type;\n-\n     @ManyToOne\n     private Course course;\n \n", "next_change": {"commit": "116151629d403403ee9b750c30c182f44f70e233", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java b/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java\nindex 7a96d7f38b1..4d69ebdcf6a 100644\n--- a/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java\n+++ b/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java\n", "chunk": "@@ -35,9 +37,13 @@ public class Achievement implements Serializable {\n     private String icon;\n \n     @Enumerated(EnumType.STRING)\n-    @Column(name = \"rank\")\n+    @Column(name = \"`rank`\")\n     private AchievementRank rank;\n \n+    @Enumerated(EnumType.STRING)\n+    @Column(name = \"`type`\")\n+    private AchievementType type;\n+\n     @ManyToOne\n     private Course course;\n \n", "next_change": {"commit": "2d87fe70c504d9d9c855d7c0371f19b9bd8c745d", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java b/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java\nindex 4d69ebdcf6a..25ab0a87c9f 100644\n--- a/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java\n+++ b/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java\n", "chunk": "@@ -37,11 +36,11 @@ public class Achievement implements Serializable {\n     private String icon;\n \n     @Enumerated(EnumType.STRING)\n-    @Column(name = \"`rank`\")\n+    @Column(name = \"achievement_rank\")\n     private AchievementRank rank;\n \n     @Enumerated(EnumType.STRING)\n-    @Column(name = \"`type`\")\n+    @Column(name = \"achievement_type\")\n     private AchievementType type;\n \n     @ManyToOne\n", "next_change": {"commit": "38f60a94a755877c7b502fda4cd54fca2ba8cb18", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java b/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java\nindex 25ab0a87c9f..94e1e11c66b 100644\n--- a/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java\n+++ b/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java\n", "chunk": "@@ -36,14 +37,11 @@ public class Achievement implements Serializable {\n     private String icon;\n \n     @Enumerated(EnumType.STRING)\n-    @Column(name = \"achievement_rank\")\n-    private AchievementRank rank;\n-\n-    @Enumerated(EnumType.STRING)\n-    @Column(name = \"achievement_type\")\n-    private AchievementType type;\n+    @Column(name = \"rank\")\n+    private Rank rank;\n \n     @ManyToOne\n+    @OnDelete(action = OnDeleteAction.CASCADE)\n     private Course course;\n \n     @ManyToOne\n", "next_change": {"commit": "fd13e3d27e731c1b8d1a2dea0e1c43ae2468034b", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java b/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java\nindex 94e1e11c66b..938f0638259 100644\n--- a/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java\n+++ b/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java\n", "chunk": "@@ -41,7 +41,6 @@ public class Achievement implements Serializable {\n     private Rank rank;\n \n     @ManyToOne\n-    @OnDelete(action = OnDeleteAction.CASCADE)\n     private Course course;\n \n     @ManyToOne\n", "next_change": {"commit": "9d6b585f50ea18da108af99466daf80870a21a0b", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java b/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java\nindex 938f0638259..7a96d7f38b1 100644\n--- a/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java\n+++ b/src/main/java/de/tum/in/www1/artemis/domain/Achievement.java\n", "chunk": "@@ -38,7 +36,7 @@ public class Achievement implements Serializable {\n \n     @Enumerated(EnumType.STRING)\n     @Column(name = \"rank\")\n-    private Rank rank;\n+    private AchievementRank rank;\n \n     @ManyToOne\n     private Course course;\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQ5NjMxOA==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r480496318", "body": "I would add an validation for the rank which is defined as INT at the moment. For example only allow ranks >0 or use the enum approach explained above.", "bodyText": "I would add an validation for the rank which is defined as INT at the moment. For example only allow ranks >0 or use the enum approach explained above.", "bodyHTML": "<p dir=\"auto\">I would add an validation for the rank which is defined as INT at the moment. For example only allow ranks &gt;0 or use the enum approach explained above.</p>", "author": "kloessst", "createdAt": "2020-09-01T00:27:55Z", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java", "diffHunk": "@@ -0,0 +1,135 @@\n+package de.tum.in.www1.artemis.web.rest;\n+\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.springframework.web.bind.annotation.*;\n+\n+import de.tum.in.www1.artemis.domain.Achievement;\n+import de.tum.in.www1.artemis.domain.Course;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.repository.AchievementRepository;\n+import de.tum.in.www1.artemis.service.AchievementService;\n+import de.tum.in.www1.artemis.service.AuthorizationCheckService;\n+import de.tum.in.www1.artemis.service.UserService;\n+import de.tum.in.www1.artemis.web.rest.errors.AccessForbiddenException;\n+import de.tum.in.www1.artemis.web.rest.util.HeaderUtil;\n+\n+/**\n+ * REST controller for managing Achievements.\n+ */\n+@RestController\n+@RequestMapping(\"/api\")\n+public class AchievementResource {\n+\n+    private static final String ENTITY_NAME = \"achievement\";\n+\n+    @Value(\"${jhipster.clientApp.name}\")\n+    private String applicationName;\n+\n+    private final Logger log = LoggerFactory.getLogger(AchievementResource.class);\n+\n+    private final AuthorizationCheckService authCheckService;\n+\n+    private final AchievementService achievementService;\n+\n+    private final UserService userService;\n+\n+    private final AchievementRepository achievementRepository;\n+\n+    public AchievementResource(AuthorizationCheckService authCheckService, AchievementService achievementService, UserService userService,\n+            AchievementRepository achievementRepository) {\n+        this.authCheckService = authCheckService;\n+        this.achievementService = achievementService;\n+        this.userService = userService;\n+        this.achievementRepository = achievementRepository;\n+    }\n+\n+    /**\n+     * GET /achievements : Get all achievements for user.\n+     *\n+     * @return the ResponseEntity with status 200 (OK) and with the found achievements as body\n+     */\n+    @GetMapping(\"/achievements\")\n+    @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Set<Achievement>> getAchievementsForUser() {\n+        User user = userService.getUser();\n+        log.debug(\"REST request to get achievements for user : {}\", user.getLogin());\n+        Set<Achievement> achievements = achievementService.findAllForUser(user.getId());\n+        return ResponseEntity.ok(achievements);\n+    }\n+\n+    /**\n+     * GET /courses/{courseId}/achievements : Get all achievements for course.\n+     *\n+     * @param courseId the course to which the achievements belong to\n+     * @return the ResponseEntity with status 200 (OK) and with the found achievements as body\n+     */\n+    @GetMapping(\"/courses/{courseId}/achievements\")\n+    @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Set<Achievement>> getAchievementsForCourse(@PathVariable Long courseId) {\n+        log.debug(\"REST request to get achievements for course : {}\", courseId);\n+        Set<Achievement> achievements = achievementService.findAllForCourse(courseId);\n+        return ResponseEntity.ok(achievements);\n+    }\n+\n+    /**\n+     * PUT /achievements : Updates an existing achievement.\n+     *\n+     * @param achievement the achievement to update\n+     * @return the ResponseEntity with status 200 (OK) and with body the updated achievement, or with status 500\n+     *         (Internal Server Error) if the achievement couldn't be updated\n+     */\n+    @PutMapping(\"/achievements\")\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Achievement> updateAchievement(@RequestBody Achievement achievement) {\n+        log.debug(\"REST request to update Achievement : {}\", achievement);\n+\n+        if (achievement.getId() == null) {\n+            return ResponseEntity.badRequest().build();\n+        }", "originalCommit": "11b272cd28a879d99eefff297aec8bf6d3f4748c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDgzNjk5NQ==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r480836995", "bodyText": "Went for the enum approach :)", "author": "balazs-czopf", "createdAt": "2020-09-01T05:36:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQ5NjMxOA=="}], "type": "inlineReview", "revised_code": {"commit": "8d5bfc049d9e75323290b069e7343df6fc579ee7", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\nindex efa5f0e0668..19fd5df9305 100644\n--- a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n+++ b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n", "chunk": "@@ -73,63 +43,11 @@ public class AchievementResource {\n      */\n     @GetMapping(\"/courses/{courseId}/achievements\")\n     @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n-    public ResponseEntity<Set<Achievement>> getAchievementsForCourse(@PathVariable Long courseId) {\n-        log.debug(\"REST request to get achievements for course : {}\", courseId);\n-        Set<Achievement> achievements = achievementService.findAllForCourse(courseId);\n-        return ResponseEntity.ok(achievements);\n-    }\n-\n-    /**\n-     * PUT /achievements : Updates an existing achievement.\n-     *\n-     * @param achievement the achievement to update\n-     * @return the ResponseEntity with status 200 (OK) and with body the updated achievement, or with status 500\n-     *         (Internal Server Error) if the achievement couldn't be updated\n-     */\n-    @PutMapping(\"/achievements\")\n-    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n-    public ResponseEntity<Achievement> updateAchievement(@RequestBody Achievement achievement) {\n-        log.debug(\"REST request to update Achievement : {}\", achievement);\n-\n-        if (achievement.getId() == null) {\n-            return ResponseEntity.badRequest().build();\n-        }\n-\n-        Course course = achievement.getCourse();\n+    public ResponseEntity<Set<Achievement>> getAchievementsForUserInCourse(@PathVariable Long courseId) {\n         User user = userService.getUserWithGroupsAndAuthorities();\n-        if (!authCheckService.isAtLeastInstructorInCourse(course, user)) {\n-            throw new AccessForbiddenException(\"You are not allowed to access this resource\");\n-        }\n-\n-        Achievement savedAchievement = achievementRepository.save(achievement);\n-        return ResponseEntity.ok().headers(HeaderUtil.createEntityUpdateAlert(applicationName, true, ENTITY_NAME, savedAchievement.getId().toString())).body(savedAchievement);\n-    }\n-\n-    /**\n-     * DELETE /achievements/:achievementId : delete the \"id\" achievement.\n-     *\n-     * @param achievementId the id of the achievement to delete\n-     * @return the ResponseEntity with status 200 (OK)\n-     */\n-    @DeleteMapping(\"/achievements/{achievementId}\")\n-    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n-    @Transactional\n-    public ResponseEntity<Void> deleteAchievement(@PathVariable long achievementId) {\n-        log.info(\"REST request to delete Achievement : {}\", achievementId);\n-        User user = userService.getUserWithGroupsAndAuthorities();\n-        Optional<Achievement> optionalAchievement = achievementService.findById(achievementId);\n-        if (optionalAchievement.isEmpty()) {\n-            return ResponseEntity.notFound().build();\n-        }\n-        Achievement achievement = optionalAchievement.get();\n-        Course course = achievement.getCourse();\n-        if (!authCheckService.isAtLeastInstructorInCourse(course, user)) {\n-            throw new AccessForbiddenException(\"You are not allowed to access this resource\");\n-        }\n-\n-        log.info(\"User \" + user.getLogin() + \" has requested to delete the achievement {}\", achievement.getId());\n-        achievementService.delete(achievement);\n-        return ResponseEntity.ok().headers(HeaderUtil.createEntityDeletionAlert(applicationName, true, ENTITY_NAME, achievement.getId().toString())).build();\n+        log.debug(\"REST request to get achievements for user : {} in course : {}\", user.getLogin(), courseId);\n+        Set<Achievement> achievements = achievementRepository.findAllByUserIdAndCourseId(user.getId(), courseId);\n+        achievementService.prepareForClient(achievements);\n+        return ResponseEntity.ok(achievements);\n     }\n-\n }\n", "next_change": {"commit": "7a5de1a37353eb19f93ef49666bba352198834cb", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\nindex 19fd5df9305..9a9cebd81ef 100644\n--- a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n+++ b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n", "chunk": "@@ -43,11 +67,62 @@ public class AchievementResource {\n      */\n     @GetMapping(\"/courses/{courseId}/achievements\")\n     @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n-    public ResponseEntity<Set<Achievement>> getAchievementsForUserInCourse(@PathVariable Long courseId) {\n-        User user = userService.getUserWithGroupsAndAuthorities();\n-        log.debug(\"REST request to get achievements for user : {} in course : {}\", user.getLogin(), courseId);\n-        Set<Achievement> achievements = achievementRepository.findAllByUserIdAndCourseId(user.getId(), courseId);\n-        achievementService.prepareForClient(achievements);\n+    public ResponseEntity<Set<Achievement>> getAchievementsForCourse(@PathVariable Long courseId) {\n+        log.debug(\"REST request to get achievements for course : {}\", courseId);\n+        Set<Achievement> achievements = achievementService.findAllByCourseId(courseId);\n         return ResponseEntity.ok(achievements);\n     }\n+\n+    /**\n+     * PUT /achievements : Updates an existing achievement.\n+     *\n+     * @param achievement the achievement to update\n+     * @return the ResponseEntity with status 200 (OK) and with body the updated achievement, or with status 500\n+     *         (Internal Server Error) if the achievement couldn't be updated\n+     */\n+    @PutMapping(\"/achievements\")\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Achievement> updateAchievement(@RequestBody Achievement achievement) {\n+        log.debug(\"REST request to update Achievement : {}\", achievement);\n+\n+        if (achievement.getId() == null) {\n+            return ResponseEntity.badRequest().build();\n+        }\n+\n+        Course course = achievement.getCourse();\n+        User user = userService.getUserWithGroupsAndAuthorities();\n+        if (!authCheckService.isAtLeastInstructorInCourse(course, user)) {\n+            throw new AccessForbiddenException(\"You are not allowed to access this resource\");\n+        }\n+\n+        Achievement savedAchievement = achievementService.save(achievement);\n+        return ResponseEntity.ok().headers(HeaderUtil.createEntityUpdateAlert(applicationName, true, ENTITY_NAME, savedAchievement.getId().toString())).body(savedAchievement);\n+    }\n+\n+    /**\n+     * DELETE /achievements/:achievementId : delete the \"id\" achievement.\n+     *\n+     * @param achievementId the id of the achievement to delete\n+     * @return the ResponseEntity with status 200 (OK)\n+     */\n+    @DeleteMapping(\"/achievements/{achievementId}\")\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Void> deleteAchievement(@PathVariable long achievementId) {\n+        log.info(\"REST request to delete Achievement : {}\", achievementId);\n+        User user = userService.getUserWithGroupsAndAuthorities();\n+        Optional<Achievement> optionalAchievement = achievementService.findById(achievementId);\n+        if (optionalAchievement.isEmpty()) {\n+            return ResponseEntity.notFound().build();\n+        }\n+        Achievement achievement = optionalAchievement.get();\n+        Course course = achievement.getCourse();\n+        if (!authCheckService.isAtLeastInstructorInCourse(course, user)) {\n+            throw new AccessForbiddenException(\"You are not allowed to access this resource\");\n+        }\n+\n+        log.info(\"User \" + user.getLogin() + \" has requested to delete the achievement {}\", achievement.getId());\n+        achievementService.delete(achievement);\n+        return ResponseEntity.ok().headers(HeaderUtil.createEntityDeletionAlert(applicationName, true, ENTITY_NAME, achievement.getId().toString())).build();\n+    }\n+\n }\n", "next_change": {"commit": "116151629d403403ee9b750c30c182f44f70e233", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\nindex 9a9cebd81ef..2367bc01f2b 100644\n--- a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n+++ b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n", "chunk": "@@ -26,103 +21,33 @@ import de.tum.in.www1.artemis.web.rest.util.HeaderUtil;\n @RequestMapping(\"/api\")\n public class AchievementResource {\n \n-    private static final String ENTITY_NAME = \"achievement\";\n-\n-    @Value(\"${jhipster.clientApp.name}\")\n-    private String applicationName;\n-\n     private final Logger log = LoggerFactory.getLogger(AchievementResource.class);\n \n-    private final AuthorizationCheckService authCheckService;\n-\n     private final AchievementService achievementService;\n \n+    private final AchievementRepository achievementRepository;\n+\n     private final UserService userService;\n \n-    public AchievementResource(AuthorizationCheckService authCheckService, AchievementService achievementService, UserService userService) {\n-        this.authCheckService = authCheckService;\n+    public AchievementResource(AchievementService achievementService, AchievementRepository achievementRepository, UserService userService) {\n         this.achievementService = achievementService;\n+        this.achievementRepository = achievementRepository;\n         this.userService = userService;\n     }\n \n     /**\n-     * GET /achievements : Get all achievements for user.\n+     * GET /courses/{courseId}/achievements : Get all achievements for requesting user in given course.\n      *\n-     * @return the ResponseEntity with status 200 (OK) and with the found achievements as body\n-     */\n-    @GetMapping(\"/achievements\")\n-    @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n-    public ResponseEntity<Set<Achievement>> getAchievementsForUser() {\n-        User user = userService.getUser();\n-        log.debug(\"REST request to get achievements for user : {}\", user.getLogin());\n-        Set<Achievement> achievements = achievementService.findAllByUserId(user.getId());\n-        return ResponseEntity.ok(achievements);\n-    }\n-\n-    /**\n-     * GET /courses/{courseId}/achievements : Get all achievements for course.\n-     *\n-     * @param courseId the course to which the achievements belong to\n+     * @param courseId\n      * @return the ResponseEntity with status 200 (OK) and with the found achievements as body\n      */\n     @GetMapping(\"/courses/{courseId}/achievements\")\n     @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n-    public ResponseEntity<Set<Achievement>> getAchievementsForCourse(@PathVariable Long courseId) {\n-        log.debug(\"REST request to get achievements for course : {}\", courseId);\n-        Set<Achievement> achievements = achievementService.findAllByCourseId(courseId);\n-        return ResponseEntity.ok(achievements);\n-    }\n-\n-    /**\n-     * PUT /achievements : Updates an existing achievement.\n-     *\n-     * @param achievement the achievement to update\n-     * @return the ResponseEntity with status 200 (OK) and with body the updated achievement, or with status 500\n-     *         (Internal Server Error) if the achievement couldn't be updated\n-     */\n-    @PutMapping(\"/achievements\")\n-    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n-    public ResponseEntity<Achievement> updateAchievement(@RequestBody Achievement achievement) {\n-        log.debug(\"REST request to update Achievement : {}\", achievement);\n-\n-        if (achievement.getId() == null) {\n-            return ResponseEntity.badRequest().build();\n-        }\n-\n-        Course course = achievement.getCourse();\n+    public ResponseEntity<Set<Achievement>> getAchievementsForUserInCourse(@PathVariable Long courseId) {\n         User user = userService.getUserWithGroupsAndAuthorities();\n-        if (!authCheckService.isAtLeastInstructorInCourse(course, user)) {\n-            throw new AccessForbiddenException(\"You are not allowed to access this resource\");\n-        }\n-\n-        Achievement savedAchievement = achievementService.save(achievement);\n-        return ResponseEntity.ok().headers(HeaderUtil.createEntityUpdateAlert(applicationName, true, ENTITY_NAME, savedAchievement.getId().toString())).body(savedAchievement);\n-    }\n-\n-    /**\n-     * DELETE /achievements/:achievementId : delete the \"id\" achievement.\n-     *\n-     * @param achievementId the id of the achievement to delete\n-     * @return the ResponseEntity with status 200 (OK)\n-     */\n-    @DeleteMapping(\"/achievements/{achievementId}\")\n-    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n-    public ResponseEntity<Void> deleteAchievement(@PathVariable long achievementId) {\n-        log.info(\"REST request to delete Achievement : {}\", achievementId);\n-        User user = userService.getUserWithGroupsAndAuthorities();\n-        Optional<Achievement> optionalAchievement = achievementService.findById(achievementId);\n-        if (optionalAchievement.isEmpty()) {\n-            return ResponseEntity.notFound().build();\n-        }\n-        Achievement achievement = optionalAchievement.get();\n-        Course course = achievement.getCourse();\n-        if (!authCheckService.isAtLeastInstructorInCourse(course, user)) {\n-            throw new AccessForbiddenException(\"You are not allowed to access this resource\");\n-        }\n-\n-        log.info(\"User \" + user.getLogin() + \" has requested to delete the achievement {}\", achievement.getId());\n-        achievementService.delete(achievement);\n-        return ResponseEntity.ok().headers(HeaderUtil.createEntityDeletionAlert(applicationName, true, ENTITY_NAME, achievement.getId().toString())).build();\n+        log.debug(\"REST request to get achievements for user : {} in course : {}\", user.getLogin(), courseId);\n+        Set<Achievement> achievements = achievementRepository.findAllByUserIdAndCourseId(user.getId(), courseId);\n+        achievementService.prepareForClient(achievements);\n+        return ResponseEntity.ok(achievements);\n     }\n-\n }\n", "next_change": {"commit": "53c319a21a4053a341e9b24da4987de5abfb656d", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\nindex 2367bc01f2b..7789b9e0412 100644\n--- a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n+++ b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n", "chunk": "@@ -46,7 +42,7 @@ public class AchievementResource {\n     public ResponseEntity<Set<Achievement>> getAchievementsForUserInCourse(@PathVariable Long courseId) {\n         User user = userService.getUserWithGroupsAndAuthorities();\n         log.debug(\"REST request to get achievements for user : {} in course : {}\", user.getLogin(), courseId);\n-        Set<Achievement> achievements = achievementRepository.findAllByUserIdAndCourseId(user.getId(), courseId);\n+        Set<Achievement> achievements = achievementService.findAllByUserIdAndCourseId(user.getId(), courseId);\n         achievementService.prepareForClient(achievements);\n         return ResponseEntity.ok(achievements);\n     }\n", "next_change": {"commit": "38f60a94a755877c7b502fda4cd54fca2ba8cb18", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\nindex 7789b9e0412..efa5f0e0668 100644\n--- a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n+++ b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n", "chunk": "@@ -20,30 +28,108 @@ import de.tum.in.www1.artemis.service.UserService;\n @RequestMapping(\"/api\")\n public class AchievementResource {\n \n+    private static final String ENTITY_NAME = \"achievement\";\n+\n+    @Value(\"${jhipster.clientApp.name}\")\n+    private String applicationName;\n+\n     private final Logger log = LoggerFactory.getLogger(AchievementResource.class);\n \n+    private final AuthorizationCheckService authCheckService;\n+\n     private final AchievementService achievementService;\n \n     private final UserService userService;\n \n-    public AchievementResource(AchievementService achievementService, UserService userService) {\n+    private final AchievementRepository achievementRepository;\n+\n+    public AchievementResource(AuthorizationCheckService authCheckService, AchievementService achievementService, UserService userService,\n+            AchievementRepository achievementRepository) {\n+        this.authCheckService = authCheckService;\n         this.achievementService = achievementService;\n         this.userService = userService;\n+        this.achievementRepository = achievementRepository;\n     }\n \n     /**\n-     * GET /courses/{courseId}/achievements : Get all achievements for requesting user in given course.\n+     * GET /achievements : Get all achievements for user.\n      *\n-     * @param courseId\n+     * @return the ResponseEntity with status 200 (OK) and with the found achievements as body\n+     */\n+    @GetMapping(\"/achievements\")\n+    @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Set<Achievement>> getAchievementsForUser() {\n+        User user = userService.getUser();\n+        log.debug(\"REST request to get achievements for user : {}\", user.getLogin());\n+        Set<Achievement> achievements = achievementService.findAllForUser(user.getId());\n+        return ResponseEntity.ok(achievements);\n+    }\n+\n+    /**\n+     * GET /courses/{courseId}/achievements : Get all achievements for course.\n+     *\n+     * @param courseId the course to which the achievements belong to\n      * @return the ResponseEntity with status 200 (OK) and with the found achievements as body\n      */\n     @GetMapping(\"/courses/{courseId}/achievements\")\n     @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n-    public ResponseEntity<Set<Achievement>> getAchievementsForUserInCourse(@PathVariable Long courseId) {\n-        User user = userService.getUserWithGroupsAndAuthorities();\n-        log.debug(\"REST request to get achievements for user : {} in course : {}\", user.getLogin(), courseId);\n-        Set<Achievement> achievements = achievementService.findAllByUserIdAndCourseId(user.getId(), courseId);\n-        achievementService.prepareForClient(achievements);\n+    public ResponseEntity<Set<Achievement>> getAchievementsForCourse(@PathVariable Long courseId) {\n+        log.debug(\"REST request to get achievements for course : {}\", courseId);\n+        Set<Achievement> achievements = achievementService.findAllForCourse(courseId);\n         return ResponseEntity.ok(achievements);\n     }\n+\n+    /**\n+     * PUT /achievements : Updates an existing achievement.\n+     *\n+     * @param achievement the achievement to update\n+     * @return the ResponseEntity with status 200 (OK) and with body the updated achievement, or with status 500\n+     *         (Internal Server Error) if the achievement couldn't be updated\n+     */\n+    @PutMapping(\"/achievements\")\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Achievement> updateAchievement(@RequestBody Achievement achievement) {\n+        log.debug(\"REST request to update Achievement : {}\", achievement);\n+\n+        if (achievement.getId() == null) {\n+            return ResponseEntity.badRequest().build();\n+        }\n+\n+        Course course = achievement.getCourse();\n+        User user = userService.getUserWithGroupsAndAuthorities();\n+        if (!authCheckService.isAtLeastInstructorInCourse(course, user)) {\n+            throw new AccessForbiddenException(\"You are not allowed to access this resource\");\n+        }\n+\n+        Achievement savedAchievement = achievementRepository.save(achievement);\n+        return ResponseEntity.ok().headers(HeaderUtil.createEntityUpdateAlert(applicationName, true, ENTITY_NAME, savedAchievement.getId().toString())).body(savedAchievement);\n+    }\n+\n+    /**\n+     * DELETE /achievements/:achievementId : delete the \"id\" achievement.\n+     *\n+     * @param achievementId the id of the achievement to delete\n+     * @return the ResponseEntity with status 200 (OK)\n+     */\n+    @DeleteMapping(\"/achievements/{achievementId}\")\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    @Transactional\n+    public ResponseEntity<Void> deleteAchievement(@PathVariable long achievementId) {\n+        log.info(\"REST request to delete Achievement : {}\", achievementId);\n+        User user = userService.getUserWithGroupsAndAuthorities();\n+        Optional<Achievement> optionalAchievement = achievementService.findById(achievementId);\n+        if (optionalAchievement.isEmpty()) {\n+            return ResponseEntity.notFound().build();\n+        }\n+        Achievement achievement = optionalAchievement.get();\n+        Course course = achievement.getCourse();\n+        if (!authCheckService.isAtLeastInstructorInCourse(course, user)) {\n+            throw new AccessForbiddenException(\"You are not allowed to access this resource\");\n+        }\n+\n+        log.info(\"User \" + user.getLogin() + \" has requested to delete the achievement {}\", achievement.getId());\n+        achievementService.delete(achievement);\n+        return ResponseEntity.ok().headers(HeaderUtil.createEntityDeletionAlert(applicationName, true, ENTITY_NAME, achievement.getId().toString())).build();\n+    }\n+\n }\n", "next_change": null}]}}]}}]}}]}}]}}, {"oid": "38f60a94a755877c7b502fda4cd54fca2ba8cb18", "url": "https://github.com/ls1intum/Artemis/commit/38f60a94a755877c7b502fda4cd54fca2ba8cb18", "message": "turn rank into enum", "committedDate": "2020-09-01T05:59:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDk0MTAyMg==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r480941022", "body": "what happens if the user objects are proxy objects here?\r\nIf you expect that the achievement includes the actual users, please clearly mention this in the JavaDoc", "bodyText": "what happens if the user objects are proxy objects here?\nIf you expect that the achievement includes the actual users, please clearly mention this in the JavaDoc", "bodyHTML": "<p dir=\"auto\">what happens if the user objects are proxy objects here?<br>\nIf you expect that the achievement includes the actual users, please clearly mention this in the JavaDoc</p>", "author": "krusche", "createdAt": "2020-09-01T07:54:57Z", "path": "src/main/java/de/tum/in/www1/artemis/service/AchievementService.java", "diffHunk": "@@ -0,0 +1,48 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import org.springframework.stereotype.Service;\n+\n+import de.tum.in.www1.artemis.domain.Achievement;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.repository.AchievementRepository;\n+import de.tum.in.www1.artemis.repository.UserRepository;\n+\n+@Service\n+public class AchievementService {\n+\n+    private final AchievementRepository achievementRepository;\n+\n+    private final UserRepository userRepository;\n+\n+    public AchievementService(AchievementRepository achievementRepository, UserRepository userRepository) {\n+        this.achievementRepository = achievementRepository;\n+        this.userRepository = userRepository;\n+    }\n+\n+    public Optional<Achievement> findById(Long achievementId) {\n+        return achievementRepository.findById(achievementId);\n+    }\n+\n+    public Set<Achievement> findAllForCourse(Long courseId) {\n+        return achievementRepository.getAllByCourseId(courseId);\n+    }\n+\n+    public Set<Achievement> findAllForUser(Long userId) {\n+        return achievementRepository.getAllByUserId(userId);\n+    }\n+\n+    /**\n+     * Deletes an achievement by also removing it from all users\n+     * @param achievement achievement to be deleted\n+     */\n+    public void delete(Achievement achievement) {\n+        for (User user : achievement.getUsers()) {", "originalCommit": "38f60a94a755877c7b502fda4cd54fca2ba8cb18", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI3MTYwMQ==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r481271601", "bodyText": "refactored", "author": "balazs-czopf", "createdAt": "2020-09-01T16:18:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDk0MTAyMg=="}], "type": "inlineReview", "revised_code": {"commit": "6aa68b0ab7a071fa631c7c72cdb8ea02ccf15a39", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\nindex 0798404b91c..d89d918c0e2 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n", "chunk": "@@ -26,12 +29,42 @@ public class AchievementService {\n         return achievementRepository.findById(achievementId);\n     }\n \n-    public Set<Achievement> findAllForCourse(Long courseId) {\n-        return achievementRepository.getAllByCourseId(courseId);\n+    public List<Achievement> findAll() {\n+        return achievementRepository.findAll();\n     }\n \n-    public Set<Achievement> findAllForUser(Long userId) {\n-        return achievementRepository.getAllByUserId(userId);\n+    public Set<Achievement> findAllByCourseId(Long courseId) {\n+        return achievementRepository.findAllByCourseId(courseId);\n+    }\n+\n+    public Set<Achievement> findAllByExerciseId(Long exerciseId) {\n+        return achievementRepository.findAllByExerciseId(exerciseId);\n+    }\n+\n+    public Set<Achievement> findAllByUserId(Long userId) {\n+        return achievementRepository.findAllByUserId(userId);\n+    }\n+\n+    public Achievement save(Achievement achievement) {\n+        return achievementRepository.save(achievement);\n+    }\n+\n+    /**\n+     * Creates an achievement and persist it\n+     * @param title title of the achievement\n+     * @param description description of the achievement\n+     * @param icon the font awesome icon string identifier\n+     * @param rank rank of the achievement\n+     * @param course course which the achievement belongs to\n+     */\n+    public Achievement create(String title, String description, String icon, AchievementRank rank, Course course) {\n+        Achievement achievement = new Achievement();\n+        achievement.setTitle(title);\n+        achievement.setDescription(description);\n+        achievement.setIcon(icon);\n+        achievement.setRank(rank);\n+        achievement.setCourse(course);\n+        return achievementRepository.save(achievement);\n     }\n \n     /**\n", "next_change": {"commit": "d6f4c8861d530ee606cd33ce9bea33c51e4f2728", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\nindex d89d918c0e2..652012db670 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n", "chunk": "@@ -56,14 +57,16 @@ public class AchievementService {\n      * @param icon the font awesome icon string identifier\n      * @param rank rank of the achievement\n      * @param course course which the achievement belongs to\n+     * @param exercise which the achievement belongs to\n      */\n-    public Achievement create(String title, String description, String icon, AchievementRank rank, Course course) {\n+    public Achievement create(String title, String description, String icon, AchievementRank rank, Course course, Exercise exercise) {\n         Achievement achievement = new Achievement();\n         achievement.setTitle(title);\n         achievement.setDescription(description);\n         achievement.setIcon(icon);\n         achievement.setRank(rank);\n         achievement.setCourse(course);\n+        achievement.setExercise(exercise);\n         return achievementRepository.save(achievement);\n     }\n \n", "next_change": {"commit": "95622742bd3fa7623d0ad8df6089acef534ee60f", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\nindex 652012db670..140afa73bd9 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n", "chunk": "@@ -58,16 +75,18 @@ public class AchievementService {\n      * @param rank rank of the achievement\n      * @param course course which the achievement belongs to\n      * @param exercise which the achievement belongs to\n+     * @return the created and persisted achievement\n      */\n-    public Achievement create(String title, String description, String icon, AchievementRank rank, Course course, Exercise exercise) {\n+    public Achievement create(String title, String description, String icon, AchievementRank rank, AchievementType type, Course course, Exercise exercise) {\n         Achievement achievement = new Achievement();\n         achievement.setTitle(title);\n         achievement.setDescription(description);\n         achievement.setIcon(icon);\n         achievement.setRank(rank);\n+        achievement.setType(type);\n         achievement.setCourse(course);\n         achievement.setExercise(exercise);\n-        return achievementRepository.save(achievement);\n+        return save(achievement);\n     }\n \n     /**\n", "next_change": {"commit": "c0a4b8df894787c7f22b172ecf3a3a9ce1ff398d", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\nindex 140afa73bd9..07259f551f0 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n", "chunk": "@@ -59,36 +62,10 @@ public class AchievementService {\n         return achievementRepository.findAllByUserId(userId);\n     }\n \n-    public Achievement save(Achievement achievement) {\n-        return achievementRepository.save(achievement);\n-    }\n-\n     public void deleteAchievementsForCourse(Course course) {\n         achievementRepository.deleteByCourse_Id(course.getId());\n     }\n \n-    /**\n-     * Creates an achievement and persist it\n-     * @param title title of the achievement\n-     * @param description description of the achievement\n-     * @param icon the font awesome icon string identifier\n-     * @param rank rank of the achievement\n-     * @param course course which the achievement belongs to\n-     * @param exercise which the achievement belongs to\n-     * @return the created and persisted achievement\n-     */\n-    public Achievement create(String title, String description, String icon, AchievementRank rank, AchievementType type, Course course, Exercise exercise) {\n-        Achievement achievement = new Achievement();\n-        achievement.setTitle(title);\n-        achievement.setDescription(description);\n-        achievement.setIcon(icon);\n-        achievement.setRank(rank);\n-        achievement.setType(type);\n-        achievement.setCourse(course);\n-        achievement.setExercise(exercise);\n-        return save(achievement);\n-    }\n-\n     /**\n      * Deletes an achievement by also removing it from all users\n      * @param achievement achievement to be deleted\n", "next_change": {"commit": "0e82242b97cdbc112e1d3a883cb2281d462dd405", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\nindex 07259f551f0..eff8b25290f 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n", "chunk": "@@ -62,8 +46,29 @@ public class AchievementService {\n         return achievementRepository.findAllByUserId(userId);\n     }\n \n-    public void deleteAchievementsForCourse(Course course) {\n-        achievementRepository.deleteByCourse_Id(course.getId());\n+    public Achievement save(Achievement achievement) {\n+        return achievementRepository.save(achievement);\n+    }\n+\n+    /**\n+     * Creates an achievement and persist it\n+     * @param title title of the achievement\n+     * @param description description of the achievement\n+     * @param icon the font awesome icon string identifier\n+     * @param rank rank of the achievement\n+     * @param course course which the achievement belongs to\n+     * @param exercise which the achievement belongs to\n+     * @return the created and persisted achievement\n+     */\n+    public Achievement create(String title, String description, String icon, AchievementRank rank, Course course, Exercise exercise) {\n+        Achievement achievement = new Achievement();\n+        achievement.setTitle(title);\n+        achievement.setDescription(description);\n+        achievement.setIcon(icon);\n+        achievement.setRank(rank);\n+        achievement.setCourse(course);\n+        achievement.setExercise(exercise);\n+        return achievementRepository.save(achievement);\n     }\n \n     /**\n", "next_change": {"commit": "c7425c9af8e7e15cd22a3771029b103c6d79608f", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\nindex eff8b25290f..07259f551f0 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n", "chunk": "@@ -46,29 +62,8 @@ public class AchievementService {\n         return achievementRepository.findAllByUserId(userId);\n     }\n \n-    public Achievement save(Achievement achievement) {\n-        return achievementRepository.save(achievement);\n-    }\n-\n-    /**\n-     * Creates an achievement and persist it\n-     * @param title title of the achievement\n-     * @param description description of the achievement\n-     * @param icon the font awesome icon string identifier\n-     * @param rank rank of the achievement\n-     * @param course course which the achievement belongs to\n-     * @param exercise which the achievement belongs to\n-     * @return the created and persisted achievement\n-     */\n-    public Achievement create(String title, String description, String icon, AchievementRank rank, Course course, Exercise exercise) {\n-        Achievement achievement = new Achievement();\n-        achievement.setTitle(title);\n-        achievement.setDescription(description);\n-        achievement.setIcon(icon);\n-        achievement.setRank(rank);\n-        achievement.setCourse(course);\n-        achievement.setExercise(exercise);\n-        return achievementRepository.save(achievement);\n+    public void deleteAchievementsForCourse(Course course) {\n+        achievementRepository.deleteByCourse_Id(course.getId());\n     }\n \n     /**\n", "next_change": {"commit": "28ed83395042c9e9faddf43940bd9f3c221684b3", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\nindex 07259f551f0..eff8b25290f 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n", "chunk": "@@ -62,8 +46,29 @@ public class AchievementService {\n         return achievementRepository.findAllByUserId(userId);\n     }\n \n-    public void deleteAchievementsForCourse(Course course) {\n-        achievementRepository.deleteByCourse_Id(course.getId());\n+    public Achievement save(Achievement achievement) {\n+        return achievementRepository.save(achievement);\n+    }\n+\n+    /**\n+     * Creates an achievement and persist it\n+     * @param title title of the achievement\n+     * @param description description of the achievement\n+     * @param icon the font awesome icon string identifier\n+     * @param rank rank of the achievement\n+     * @param course course which the achievement belongs to\n+     * @param exercise which the achievement belongs to\n+     * @return the created and persisted achievement\n+     */\n+    public Achievement create(String title, String description, String icon, AchievementRank rank, Course course, Exercise exercise) {\n+        Achievement achievement = new Achievement();\n+        achievement.setTitle(title);\n+        achievement.setDescription(description);\n+        achievement.setIcon(icon);\n+        achievement.setRank(rank);\n+        achievement.setCourse(course);\n+        achievement.setExercise(exercise);\n+        return achievementRepository.save(achievement);\n     }\n \n     /**\n", "next_change": {"commit": "c3317e06a092c8dbee21b52de380addd92f73b3f", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\nindex eff8b25290f..9f934956a2c 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n", "chunk": "@@ -46,29 +62,8 @@ public class AchievementService {\n         return achievementRepository.findAllByUserId(userId);\n     }\n \n-    public Achievement save(Achievement achievement) {\n-        return achievementRepository.save(achievement);\n-    }\n-\n-    /**\n-     * Creates an achievement and persist it\n-     * @param title title of the achievement\n-     * @param description description of the achievement\n-     * @param icon the font awesome icon string identifier\n-     * @param rank rank of the achievement\n-     * @param course course which the achievement belongs to\n-     * @param exercise which the achievement belongs to\n-     * @return the created and persisted achievement\n-     */\n-    public Achievement create(String title, String description, String icon, AchievementRank rank, Course course, Exercise exercise) {\n-        Achievement achievement = new Achievement();\n-        achievement.setTitle(title);\n-        achievement.setDescription(description);\n-        achievement.setIcon(icon);\n-        achievement.setRank(rank);\n-        achievement.setCourse(course);\n-        achievement.setExercise(exercise);\n-        return achievementRepository.save(achievement);\n+    public void deleteAchievementsForCourse(Course course) {\n+        achievementRepository.deleteByCourse_Id(course.getId());\n     }\n \n     /**\n", "next_change": {"commit": "508e8977abe4d1e8ec1c8a817fe9bd0f91f6bb8a", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\nindex 9f934956a2c..eff8b25290f 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n", "chunk": "@@ -62,8 +46,29 @@ public class AchievementService {\n         return achievementRepository.findAllByUserId(userId);\n     }\n \n-    public void deleteAchievementsForCourse(Course course) {\n-        achievementRepository.deleteByCourse_Id(course.getId());\n+    public Achievement save(Achievement achievement) {\n+        return achievementRepository.save(achievement);\n+    }\n+\n+    /**\n+     * Creates an achievement and persist it\n+     * @param title title of the achievement\n+     * @param description description of the achievement\n+     * @param icon the font awesome icon string identifier\n+     * @param rank rank of the achievement\n+     * @param course course which the achievement belongs to\n+     * @param exercise which the achievement belongs to\n+     * @return the created and persisted achievement\n+     */\n+    public Achievement create(String title, String description, String icon, AchievementRank rank, Course course, Exercise exercise) {\n+        Achievement achievement = new Achievement();\n+        achievement.setTitle(title);\n+        achievement.setDescription(description);\n+        achievement.setIcon(icon);\n+        achievement.setRank(rank);\n+        achievement.setCourse(course);\n+        achievement.setExercise(exercise);\n+        return achievementRepository.save(achievement);\n     }\n \n     /**\n", "next_change": {"commit": "d3d2ea3ec69fdc3185bac66822f03c4a1bf0b6b1", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\nindex eff8b25290f..9f934956a2c 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n", "chunk": "@@ -46,29 +62,8 @@ public class AchievementService {\n         return achievementRepository.findAllByUserId(userId);\n     }\n \n-    public Achievement save(Achievement achievement) {\n-        return achievementRepository.save(achievement);\n-    }\n-\n-    /**\n-     * Creates an achievement and persist it\n-     * @param title title of the achievement\n-     * @param description description of the achievement\n-     * @param icon the font awesome icon string identifier\n-     * @param rank rank of the achievement\n-     * @param course course which the achievement belongs to\n-     * @param exercise which the achievement belongs to\n-     * @return the created and persisted achievement\n-     */\n-    public Achievement create(String title, String description, String icon, AchievementRank rank, Course course, Exercise exercise) {\n-        Achievement achievement = new Achievement();\n-        achievement.setTitle(title);\n-        achievement.setDescription(description);\n-        achievement.setIcon(icon);\n-        achievement.setRank(rank);\n-        achievement.setCourse(course);\n-        achievement.setExercise(exercise);\n-        return achievementRepository.save(achievement);\n+    public void deleteAchievementsForCourse(Course course) {\n+        achievementRepository.deleteByCourse_Id(course.getId());\n     }\n \n     /**\n", "next_change": {"commit": "87e1b7686ddcdf36dbefc8407242e70d200a329d", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\nindex 9f934956a2c..40dd00fd6b3 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n", "chunk": "@@ -62,6 +63,7 @@ public class AchievementService {\n         return achievementRepository.findAllByUserId(userId);\n     }\n \n+    @Transactional\n     public void deleteAchievementsForCourse(Course course) {\n         achievementRepository.deleteByCourse_Id(course.getId());\n     }\n", "next_change": {"commit": "64778c859b7f2d14015c50aedae62db4c98bcee7", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\nindex 40dd00fd6b3..eff8b25290f 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n", "chunk": "@@ -63,9 +46,29 @@ public class AchievementService {\n         return achievementRepository.findAllByUserId(userId);\n     }\n \n-    @Transactional\n-    public void deleteAchievementsForCourse(Course course) {\n-        achievementRepository.deleteByCourse_Id(course.getId());\n+    public Achievement save(Achievement achievement) {\n+        return achievementRepository.save(achievement);\n+    }\n+\n+    /**\n+     * Creates an achievement and persist it\n+     * @param title title of the achievement\n+     * @param description description of the achievement\n+     * @param icon the font awesome icon string identifier\n+     * @param rank rank of the achievement\n+     * @param course course which the achievement belongs to\n+     * @param exercise which the achievement belongs to\n+     * @return the created and persisted achievement\n+     */\n+    public Achievement create(String title, String description, String icon, AchievementRank rank, Course course, Exercise exercise) {\n+        Achievement achievement = new Achievement();\n+        achievement.setTitle(title);\n+        achievement.setDescription(description);\n+        achievement.setIcon(icon);\n+        achievement.setRank(rank);\n+        achievement.setCourse(course);\n+        achievement.setExercise(exercise);\n+        return achievementRepository.save(achievement);\n     }\n \n     /**\n", "next_change": {"commit": "8d5bfc049d9e75323290b069e7343df6fc579ee7", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\nindex eff8b25290f..6668ed36f44 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n", "chunk": "@@ -1,87 +1,161 @@\n package de.tum.in.www1.artemis.service;\n \n-import java.util.List;\n-import java.util.Optional;\n import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import javax.transaction.Transactional;\n \n import org.springframework.stereotype.Service;\n \n+import de.tum.in.www1.artemis.domain.*;\n import de.tum.in.www1.artemis.domain.Achievement;\n import de.tum.in.www1.artemis.domain.Course;\n import de.tum.in.www1.artemis.domain.Exercise;\n import de.tum.in.www1.artemis.domain.User;\n import de.tum.in.www1.artemis.domain.enumeration.AchievementRank;\n+import de.tum.in.www1.artemis.domain.enumeration.AchievementType;\n import de.tum.in.www1.artemis.repository.AchievementRepository;\n import de.tum.in.www1.artemis.repository.UserRepository;\n \n @Service\n public class AchievementService {\n \n+    private final PointBasedAchievementService pointBasedAchievementService;\n+\n+    private final TimeBasedAchievementService timeBasedAchievementService;\n+\n+    private final ProgressBasedAchievementService progressBasedAchievementService;\n+\n+    private final ParticipationService participationService;\n+\n     private final AchievementRepository achievementRepository;\n \n     private final UserRepository userRepository;\n \n-    public AchievementService(AchievementRepository achievementRepository, UserRepository userRepository) {\n+    public AchievementService(AchievementRepository achievementRepository, UserRepository userRepository, PointBasedAchievementService pointBasedAchievementService,\n+            TimeBasedAchievementService timeBasedAchievementService, ProgressBasedAchievementService progressBasedAchievementService, ParticipationService participationService) {\n         this.achievementRepository = achievementRepository;\n+        this.pointBasedAchievementService = pointBasedAchievementService;\n+        this.timeBasedAchievementService = timeBasedAchievementService;\n+        this.progressBasedAchievementService = progressBasedAchievementService;\n         this.userRepository = userRepository;\n+        this.participationService = participationService;\n     }\n \n-    public Optional<Achievement> findById(Long achievementId) {\n-        return achievementRepository.findById(achievementId);\n+    public Set<Achievement> findAllByUserIdAndCourseId(Long userId, Long courseId) {\n+        return achievementRepository.findAllByUserIdAndCourseId(userId, courseId);\n     }\n \n-    public List<Achievement> findAll() {\n-        return achievementRepository.findAll();\n+    @Transactional\n+    public void deleteByCourseId(Long courseId) {\n+        Set<Achievement> achievements = achievementRepository.findAllByCourseId(courseId);\n+        for (Achievement achievement : achievements) {\n+            removeFromUsers(achievement);\n+        }\n+        achievementRepository.deleteAll(achievements);\n     }\n \n-    public Set<Achievement> findAllByCourseId(Long courseId) {\n-        return achievementRepository.findAllByCourseId(courseId);\n+    @Transactional\n+    public void deleteByExerciseId(Long exerciseId) {\n+        Set<Achievement> achievements = achievementRepository.findAllByExerciseId(exerciseId);\n+        for (Achievement achievement : achievements) {\n+            removeFromUsers(achievement);\n+        }\n+        achievementRepository.deleteAll(achievements);\n     }\n \n-    public Set<Achievement> findAllByExerciseId(Long exerciseId) {\n-        return achievementRepository.findAllByExerciseId(exerciseId);\n+    /**\n+     * Removes an achievement from all users\n+     * @param achievement achievement to be deleted\n+     */\n+    public void removeFromUsers(Achievement achievement) {\n+        var users = achievement.getUsers();\n+        for (User user : users) {\n+            user.removeAchievement(achievement);\n+        }\n+        userRepository.saveAll(users);\n     }\n \n-    public Set<Achievement> findAllByUserId(Long userId) {\n-        return achievementRepository.findAllByUserId(userId);\n+    public void generateForCourse(Course course) {\n+        progressBasedAchievementService.generateAchievements(course);\n     }\n \n-    public Achievement save(Achievement achievement) {\n-        return achievementRepository.save(achievement);\n+    public void generateForExercise(Exercise exercise) {\n+        pointBasedAchievementService.generateAchievements(exercise);\n+        timeBasedAchievementService.generateAchievements(exercise);\n     }\n \n-    /**\n-     * Creates an achievement and persist it\n-     * @param title title of the achievement\n-     * @param description description of the achievement\n-     * @param icon the font awesome icon string identifier\n-     * @param rank rank of the achievement\n-     * @param course course which the achievement belongs to\n-     * @param exercise which the achievement belongs to\n-     * @return the created and persisted achievement\n-     */\n-    public Achievement create(String title, String description, String icon, AchievementRank rank, Course course, Exercise exercise) {\n-        Achievement achievement = new Achievement();\n-        achievement.setTitle(title);\n-        achievement.setDescription(description);\n-        achievement.setIcon(icon);\n-        achievement.setRank(rank);\n-        achievement.setCourse(course);\n-        achievement.setExercise(exercise);\n-        return achievementRepository.save(achievement);\n+    @Transactional\n+    public void checkForAchievements(Result result) {\n+        var course = result.getParticipation().getExercise().getCourseViaExerciseGroupOrCourseMember();\n+        if (course.getHasAchievements() == null || !course.getHasAchievements()) {\n+            return;\n+        }\n+        var exercise = result.getParticipation().getExercise();\n+        var optionalUser = participationService.findOneStudentParticipation(result.getParticipation().getId()).getStudent();\n+        if (!optionalUser.isPresent()) {\n+            return;\n+        }\n+        var user = optionalUser.get();\n+\n+        var pointRank = pointBasedAchievementService.checkForAchievement(result);\n+        rewardAchievement(course, exercise, AchievementType.POINT, pointRank, user);\n+\n+        var timeRank = timeBasedAchievementService.checkForAchievement(result);\n+        rewardAchievement(course, exercise, AchievementType.TIME, timeRank, user);\n+\n+        var progressRank = progressBasedAchievementService.checkForAchievement(course, user);\n+        rewardAchievement(course, exercise, AchievementType.PROGRESS, progressRank, user);\n     }\n \n-    /**\n-     * Deletes an achievement by also removing it from all users\n-     * @param achievement achievement to be deleted\n-     */\n-    public void delete(Achievement achievement) {\n-        var users = userRepository.findAllByAchievementId(achievement.getId());\n-        achievement.setUsers(users);\n-        for (User user : users) {\n-            user.removeAchievement(achievement);\n-            userRepository.save(user);\n+    public void rewardAchievement(Course course, Exercise exercise, AchievementType type, AchievementRank rank, User user) {\n+        Set<Achievement> achievements;\n+        Achievement achievement;\n+\n+        if (rank == null) {\n+            return;\n+        }\n+\n+        if (exercise == null) {\n+            achievements = achievementRepository.findAllForRewardedTypeInCourse(course.getId(), type);\n+        }\n+        else {\n+            achievements = achievementRepository.findAllForRewardedTypeInExercise(course.getId(), exercise.getId(), type);\n+        }\n+\n+        var optionalAchievement = achievements.stream().filter(a -> a.getRank().equals(rank)).findAny();\n+        if (!optionalAchievement.isPresent()) {\n+            return;\n+        }\n+\n+        achievement = optionalAchievement.get();\n+        if (achievement.getUsers().contains(user)) {\n+            return;\n+        }\n+\n+        var optionalAchievementsOfHigherRank = achievements.stream().filter(a -> a.getRank().ordinal() > rank.ordinal()).collect(Collectors.toSet());\n+        for (Achievement a : optionalAchievementsOfHigherRank) {\n+            if (a.getUsers().contains(user)) {\n+                return;\n+            }\n+        }\n+\n+        var optionalAchievementsOfLowerRank = achievements.stream().filter(a -> a.getRank().ordinal() < rank.ordinal()).collect(Collectors.toSet());\n+        for (Achievement a : optionalAchievementsOfLowerRank) {\n+            if (a.getUsers().contains(user) && a.getExercise() != null) {\n+                user.removeAchievement(a);\n+            }\n+        }\n+\n+        user.addAchievement(achievement);\n+        userRepository.save(user);\n+    }\n+\n+    public void prepareForClient(Set<Achievement> achievements) {\n+        for (Achievement achievement : achievements) {\n+            achievement.setExercise(null);\n+            achievement.setCourse(null);\n+            achievement.setUsers(null);\n         }\n-        achievementRepository.delete(achievement);\n     }\n }\n", "next_change": {"commit": "7a5de1a37353eb19f93ef49666bba352198834cb", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\nindex 6668ed36f44..eff8b25290f 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n", "chunk": "@@ -1,161 +1,87 @@\n package de.tum.in.www1.artemis.service;\n \n+import java.util.List;\n+import java.util.Optional;\n import java.util.Set;\n-import java.util.stream.Collectors;\n-\n-import javax.transaction.Transactional;\n \n import org.springframework.stereotype.Service;\n \n-import de.tum.in.www1.artemis.domain.*;\n import de.tum.in.www1.artemis.domain.Achievement;\n import de.tum.in.www1.artemis.domain.Course;\n import de.tum.in.www1.artemis.domain.Exercise;\n import de.tum.in.www1.artemis.domain.User;\n import de.tum.in.www1.artemis.domain.enumeration.AchievementRank;\n-import de.tum.in.www1.artemis.domain.enumeration.AchievementType;\n import de.tum.in.www1.artemis.repository.AchievementRepository;\n import de.tum.in.www1.artemis.repository.UserRepository;\n \n @Service\n public class AchievementService {\n \n-    private final PointBasedAchievementService pointBasedAchievementService;\n-\n-    private final TimeBasedAchievementService timeBasedAchievementService;\n-\n-    private final ProgressBasedAchievementService progressBasedAchievementService;\n-\n-    private final ParticipationService participationService;\n-\n     private final AchievementRepository achievementRepository;\n \n     private final UserRepository userRepository;\n \n-    public AchievementService(AchievementRepository achievementRepository, UserRepository userRepository, PointBasedAchievementService pointBasedAchievementService,\n-            TimeBasedAchievementService timeBasedAchievementService, ProgressBasedAchievementService progressBasedAchievementService, ParticipationService participationService) {\n+    public AchievementService(AchievementRepository achievementRepository, UserRepository userRepository) {\n         this.achievementRepository = achievementRepository;\n-        this.pointBasedAchievementService = pointBasedAchievementService;\n-        this.timeBasedAchievementService = timeBasedAchievementService;\n-        this.progressBasedAchievementService = progressBasedAchievementService;\n         this.userRepository = userRepository;\n-        this.participationService = participationService;\n     }\n \n-    public Set<Achievement> findAllByUserIdAndCourseId(Long userId, Long courseId) {\n-        return achievementRepository.findAllByUserIdAndCourseId(userId, courseId);\n+    public Optional<Achievement> findById(Long achievementId) {\n+        return achievementRepository.findById(achievementId);\n     }\n \n-    @Transactional\n-    public void deleteByCourseId(Long courseId) {\n-        Set<Achievement> achievements = achievementRepository.findAllByCourseId(courseId);\n-        for (Achievement achievement : achievements) {\n-            removeFromUsers(achievement);\n-        }\n-        achievementRepository.deleteAll(achievements);\n+    public List<Achievement> findAll() {\n+        return achievementRepository.findAll();\n     }\n \n-    @Transactional\n-    public void deleteByExerciseId(Long exerciseId) {\n-        Set<Achievement> achievements = achievementRepository.findAllByExerciseId(exerciseId);\n-        for (Achievement achievement : achievements) {\n-            removeFromUsers(achievement);\n-        }\n-        achievementRepository.deleteAll(achievements);\n+    public Set<Achievement> findAllByCourseId(Long courseId) {\n+        return achievementRepository.findAllByCourseId(courseId);\n     }\n \n-    /**\n-     * Removes an achievement from all users\n-     * @param achievement achievement to be deleted\n-     */\n-    public void removeFromUsers(Achievement achievement) {\n-        var users = achievement.getUsers();\n-        for (User user : users) {\n-            user.removeAchievement(achievement);\n-        }\n-        userRepository.saveAll(users);\n+    public Set<Achievement> findAllByExerciseId(Long exerciseId) {\n+        return achievementRepository.findAllByExerciseId(exerciseId);\n     }\n \n-    public void generateForCourse(Course course) {\n-        progressBasedAchievementService.generateAchievements(course);\n+    public Set<Achievement> findAllByUserId(Long userId) {\n+        return achievementRepository.findAllByUserId(userId);\n     }\n \n-    public void generateForExercise(Exercise exercise) {\n-        pointBasedAchievementService.generateAchievements(exercise);\n-        timeBasedAchievementService.generateAchievements(exercise);\n-    }\n-\n-    @Transactional\n-    public void checkForAchievements(Result result) {\n-        var course = result.getParticipation().getExercise().getCourseViaExerciseGroupOrCourseMember();\n-        if (course.getHasAchievements() == null || !course.getHasAchievements()) {\n-            return;\n-        }\n-        var exercise = result.getParticipation().getExercise();\n-        var optionalUser = participationService.findOneStudentParticipation(result.getParticipation().getId()).getStudent();\n-        if (!optionalUser.isPresent()) {\n-            return;\n-        }\n-        var user = optionalUser.get();\n-\n-        var pointRank = pointBasedAchievementService.checkForAchievement(result);\n-        rewardAchievement(course, exercise, AchievementType.POINT, pointRank, user);\n-\n-        var timeRank = timeBasedAchievementService.checkForAchievement(result);\n-        rewardAchievement(course, exercise, AchievementType.TIME, timeRank, user);\n-\n-        var progressRank = progressBasedAchievementService.checkForAchievement(course, user);\n-        rewardAchievement(course, exercise, AchievementType.PROGRESS, progressRank, user);\n+    public Achievement save(Achievement achievement) {\n+        return achievementRepository.save(achievement);\n     }\n \n-    public void rewardAchievement(Course course, Exercise exercise, AchievementType type, AchievementRank rank, User user) {\n-        Set<Achievement> achievements;\n-        Achievement achievement;\n-\n-        if (rank == null) {\n-            return;\n-        }\n-\n-        if (exercise == null) {\n-            achievements = achievementRepository.findAllForRewardedTypeInCourse(course.getId(), type);\n-        }\n-        else {\n-            achievements = achievementRepository.findAllForRewardedTypeInExercise(course.getId(), exercise.getId(), type);\n-        }\n-\n-        var optionalAchievement = achievements.stream().filter(a -> a.getRank().equals(rank)).findAny();\n-        if (!optionalAchievement.isPresent()) {\n-            return;\n-        }\n-\n-        achievement = optionalAchievement.get();\n-        if (achievement.getUsers().contains(user)) {\n-            return;\n-        }\n-\n-        var optionalAchievementsOfHigherRank = achievements.stream().filter(a -> a.getRank().ordinal() > rank.ordinal()).collect(Collectors.toSet());\n-        for (Achievement a : optionalAchievementsOfHigherRank) {\n-            if (a.getUsers().contains(user)) {\n-                return;\n-            }\n-        }\n-\n-        var optionalAchievementsOfLowerRank = achievements.stream().filter(a -> a.getRank().ordinal() < rank.ordinal()).collect(Collectors.toSet());\n-        for (Achievement a : optionalAchievementsOfLowerRank) {\n-            if (a.getUsers().contains(user) && a.getExercise() != null) {\n-                user.removeAchievement(a);\n-            }\n-        }\n-\n-        user.addAchievement(achievement);\n-        userRepository.save(user);\n+    /**\n+     * Creates an achievement and persist it\n+     * @param title title of the achievement\n+     * @param description description of the achievement\n+     * @param icon the font awesome icon string identifier\n+     * @param rank rank of the achievement\n+     * @param course course which the achievement belongs to\n+     * @param exercise which the achievement belongs to\n+     * @return the created and persisted achievement\n+     */\n+    public Achievement create(String title, String description, String icon, AchievementRank rank, Course course, Exercise exercise) {\n+        Achievement achievement = new Achievement();\n+        achievement.setTitle(title);\n+        achievement.setDescription(description);\n+        achievement.setIcon(icon);\n+        achievement.setRank(rank);\n+        achievement.setCourse(course);\n+        achievement.setExercise(exercise);\n+        return achievementRepository.save(achievement);\n     }\n \n-    public void prepareForClient(Set<Achievement> achievements) {\n-        for (Achievement achievement : achievements) {\n-            achievement.setExercise(null);\n-            achievement.setCourse(null);\n-            achievement.setUsers(null);\n+    /**\n+     * Deletes an achievement by also removing it from all users\n+     * @param achievement achievement to be deleted\n+     */\n+    public void delete(Achievement achievement) {\n+        var users = userRepository.findAllByAchievementId(achievement.getId());\n+        achievement.setUsers(users);\n+        for (User user : users) {\n+            user.removeAchievement(achievement);\n+            userRepository.save(user);\n         }\n+        achievementRepository.delete(achievement);\n     }\n }\n", "next_change": {"commit": "116151629d403403ee9b750c30c182f44f70e233", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\nindex eff8b25290f..30708f42a32 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n", "chunk": "@@ -1,87 +1,117 @@\n package de.tum.in.www1.artemis.service;\n \n-import java.util.List;\n-import java.util.Optional;\n import java.util.Set;\n \n+import javax.transaction.Transactional;\n+\n import org.springframework.stereotype.Service;\n \n import de.tum.in.www1.artemis.domain.Achievement;\n import de.tum.in.www1.artemis.domain.Course;\n import de.tum.in.www1.artemis.domain.Exercise;\n import de.tum.in.www1.artemis.domain.User;\n-import de.tum.in.www1.artemis.domain.enumeration.AchievementRank;\n import de.tum.in.www1.artemis.repository.AchievementRepository;\n import de.tum.in.www1.artemis.repository.UserRepository;\n \n @Service\n public class AchievementService {\n \n+    private final PointBasedAchievementService pointBasedAchievementService;\n+\n+    private final TimeBasedAchievementService timeBasedAchievementService;\n+\n+    private final ProgressBasedAchievementService progressBasedAchievementService;\n+\n     private final AchievementRepository achievementRepository;\n \n     private final UserRepository userRepository;\n \n-    public AchievementService(AchievementRepository achievementRepository, UserRepository userRepository) {\n+    public AchievementService(AchievementRepository achievementRepository, UserRepository userRepository, PointBasedAchievementService pointBasedAchievementService,\n+            TimeBasedAchievementService timeBasedAchievementService, ProgressBasedAchievementService progressBasedAchievementService) {\n         this.achievementRepository = achievementRepository;\n+        this.pointBasedAchievementService = pointBasedAchievementService;\n+        this.timeBasedAchievementService = timeBasedAchievementService;\n+        this.progressBasedAchievementService = progressBasedAchievementService;\n         this.userRepository = userRepository;\n     }\n \n-    public Optional<Achievement> findById(Long achievementId) {\n-        return achievementRepository.findById(achievementId);\n-    }\n-\n-    public List<Achievement> findAll() {\n-        return achievementRepository.findAll();\n+    /**\n+     * Finds all achievements for a user in a given course and returns them as a set\n+     * @param userId\n+     * @param courseId\n+     */\n+    public Set<Achievement> findAllByUserIdAndCourseId(Long userId, Long courseId) {\n+        return achievementRepository.findAllByUserIdAndCourseId(userId, courseId);\n     }\n \n-    public Set<Achievement> findAllByCourseId(Long courseId) {\n-        return achievementRepository.findAllByCourseId(courseId);\n+    /**\n+     * Deletes all achievements that belong to the course with the given courseId\n+     * Used when a course is deleted or when achievements are disabled again for a course\n+     * @param courseId\n+     */\n+    @Transactional\n+    public void deleteByCourseId(Long courseId) {\n+        Set<Achievement> achievements = achievementRepository.findAllByCourseId(courseId);\n+        for (Achievement achievement : achievements) {\n+            removeFromUsers(achievement);\n+        }\n+        achievementRepository.deleteAll(achievements);\n     }\n \n-    public Set<Achievement> findAllByExerciseId(Long exerciseId) {\n-        return achievementRepository.findAllByExerciseId(exerciseId);\n+    /**\n+     * Deletes all achievements that belong to the exercise with the given exerciseId\n+     * Used when an exercise is deleted\n+     * @param exerciseId\n+     */\n+    @Transactional\n+    public void deleteByExerciseId(Long exerciseId) {\n+        Set<Achievement> achievements = achievementRepository.findAllByExerciseId(exerciseId);\n+        for (Achievement achievement : achievements) {\n+            removeFromUsers(achievement);\n+        }\n+        achievementRepository.deleteAll(achievements);\n     }\n \n-    public Set<Achievement> findAllByUserId(Long userId) {\n-        return achievementRepository.findAllByUserId(userId);\n+    /**\n+     * Removes an achievement from all users\n+     * @param achievement achievement to be deleted\n+     */\n+    public void removeFromUsers(Achievement achievement) {\n+        var users = achievement.getUsers();\n+        for (User user : users) {\n+            user.removeAchievement(achievement);\n+        }\n+        userRepository.saveAll(users);\n     }\n \n-    public Achievement save(Achievement achievement) {\n-        return achievementRepository.save(achievement);\n+    /**\n+     * Generates achievements for a course\n+     * Used when course is updated or created and achievements are enabled for course\n+     * @param course\n+     */\n+    public void generateForCourse(Course course) {\n+        progressBasedAchievementService.generateAchievements(course);\n     }\n \n     /**\n-     * Creates an achievement and persist it\n-     * @param title title of the achievement\n-     * @param description description of the achievement\n-     * @param icon the font awesome icon string identifier\n-     * @param rank rank of the achievement\n-     * @param course course which the achievement belongs to\n-     * @param exercise which the achievement belongs to\n-     * @return the created and persisted achievement\n+     * Generates achievements for an exercise\n+     * Used when exercise is created and achievements are enabled for corresponding course\n+     * @param exercise\n      */\n-    public Achievement create(String title, String description, String icon, AchievementRank rank, Course course, Exercise exercise) {\n-        Achievement achievement = new Achievement();\n-        achievement.setTitle(title);\n-        achievement.setDescription(description);\n-        achievement.setIcon(icon);\n-        achievement.setRank(rank);\n-        achievement.setCourse(course);\n-        achievement.setExercise(exercise);\n-        return achievementRepository.save(achievement);\n+    public void generateForExercise(Exercise exercise) {\n+        pointBasedAchievementService.generateAchievements(exercise);\n+        timeBasedAchievementService.generateAchievements(exercise);\n     }\n \n     /**\n-     * Deletes an achievement by also removing it from all users\n-     * @param achievement achievement to be deleted\n+     * Prepares the given set of achievements to be sent to the client by removing exercise, course and users\n+     * @param achievements\n      */\n-    public void delete(Achievement achievement) {\n-        var users = userRepository.findAllByAchievementId(achievement.getId());\n-        achievement.setUsers(users);\n-        for (User user : users) {\n-            user.removeAchievement(achievement);\n-            userRepository.save(user);\n+    public void prepareForClient(Set<Achievement> achievements) {\n+        for (Achievement achievement : achievements) {\n+            achievement.setExercise(null);\n+            achievement.setCourse(null);\n+            achievement.setUsers(null);\n         }\n-        achievementRepository.delete(achievement);\n     }\n }\n", "next_change": {"commit": "d85f5f34a571777d2b7558382f25bf6bc7434049", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\nindex 30708f42a32..0798404b91c 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n", "chunk": "@@ -16,102 +13,36 @@ import de.tum.in.www1.artemis.repository.UserRepository;\n @Service\n public class AchievementService {\n \n-    private final PointBasedAchievementService pointBasedAchievementService;\n-\n-    private final TimeBasedAchievementService timeBasedAchievementService;\n-\n-    private final ProgressBasedAchievementService progressBasedAchievementService;\n-\n     private final AchievementRepository achievementRepository;\n \n     private final UserRepository userRepository;\n \n-    public AchievementService(AchievementRepository achievementRepository, UserRepository userRepository, PointBasedAchievementService pointBasedAchievementService,\n-            TimeBasedAchievementService timeBasedAchievementService, ProgressBasedAchievementService progressBasedAchievementService) {\n+    public AchievementService(AchievementRepository achievementRepository, UserRepository userRepository) {\n         this.achievementRepository = achievementRepository;\n-        this.pointBasedAchievementService = pointBasedAchievementService;\n-        this.timeBasedAchievementService = timeBasedAchievementService;\n-        this.progressBasedAchievementService = progressBasedAchievementService;\n         this.userRepository = userRepository;\n     }\n \n-    /**\n-     * Finds all achievements for a user in a given course and returns them as a set\n-     * @param userId\n-     * @param courseId\n-     */\n-    public Set<Achievement> findAllByUserIdAndCourseId(Long userId, Long courseId) {\n-        return achievementRepository.findAllByUserIdAndCourseId(userId, courseId);\n+    public Optional<Achievement> findById(Long achievementId) {\n+        return achievementRepository.findById(achievementId);\n     }\n \n-    /**\n-     * Deletes all achievements that belong to the course with the given courseId\n-     * Used when a course is deleted or when achievements are disabled again for a course\n-     * @param courseId\n-     */\n-    @Transactional\n-    public void deleteByCourseId(Long courseId) {\n-        Set<Achievement> achievements = achievementRepository.findAllByCourseId(courseId);\n-        for (Achievement achievement : achievements) {\n-            removeFromUsers(achievement);\n-        }\n-        achievementRepository.deleteAll(achievements);\n+    public Set<Achievement> findAllForCourse(Long courseId) {\n+        return achievementRepository.getAllByCourseId(courseId);\n     }\n \n-    /**\n-     * Deletes all achievements that belong to the exercise with the given exerciseId\n-     * Used when an exercise is deleted\n-     * @param exerciseId\n-     */\n-    @Transactional\n-    public void deleteByExerciseId(Long exerciseId) {\n-        Set<Achievement> achievements = achievementRepository.findAllByExerciseId(exerciseId);\n-        for (Achievement achievement : achievements) {\n-            removeFromUsers(achievement);\n-        }\n-        achievementRepository.deleteAll(achievements);\n+    public Set<Achievement> findAllForUser(Long userId) {\n+        return achievementRepository.getAllByUserId(userId);\n     }\n \n     /**\n-     * Removes an achievement from all users\n+     * Deletes an achievement by also removing it from all users\n      * @param achievement achievement to be deleted\n      */\n-    public void removeFromUsers(Achievement achievement) {\n-        var users = achievement.getUsers();\n-        for (User user : users) {\n+    public void delete(Achievement achievement) {\n+        for (User user : achievement.getUsers()) {\n             user.removeAchievement(achievement);\n+            userRepository.save(user);\n         }\n-        userRepository.saveAll(users);\n-    }\n-\n-    /**\n-     * Generates achievements for a course\n-     * Used when course is updated or created and achievements are enabled for course\n-     * @param course\n-     */\n-    public void generateForCourse(Course course) {\n-        progressBasedAchievementService.generateAchievements(course);\n-    }\n-\n-    /**\n-     * Generates achievements for an exercise\n-     * Used when exercise is created and achievements are enabled for corresponding course\n-     * @param exercise\n-     */\n-    public void generateForExercise(Exercise exercise) {\n-        pointBasedAchievementService.generateAchievements(exercise);\n-        timeBasedAchievementService.generateAchievements(exercise);\n-    }\n-\n-    /**\n-     * Prepares the given set of achievements to be sent to the client by removing exercise, course and users\n-     * @param achievements\n-     */\n-    public void prepareForClient(Set<Achievement> achievements) {\n-        for (Achievement achievement : achievements) {\n-            achievement.setExercise(null);\n-            achievement.setCourse(null);\n-            achievement.setUsers(null);\n-        }\n+        achievementRepository.delete(achievement);\n     }\n }\n", "next_change": {"commit": "fd13e3d27e731c1b8d1a2dea0e1c43ae2468034b", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\nindex 0798404b91c..adc27ea88a9 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n", "chunk": "@@ -39,7 +64,9 @@ public class AchievementService {\n      * @param achievement achievement to be deleted\n      */\n     public void delete(Achievement achievement) {\n-        for (User user : achievement.getUsers()) {\n+        var users = userRepository.findAllWithEagerAchievements(achievement.getId());\n+        achievement.setUsers(users);\n+        for (User user : users) {\n             user.removeAchievement(achievement);\n             userRepository.save(user);\n         }\n", "next_change": {"commit": "e71c08bfb8259e519230dcb95a44996794c4e79e", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\nindex adc27ea88a9..2440806b0f3 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n", "chunk": "@@ -64,7 +64,7 @@ public class AchievementService {\n      * @param achievement achievement to be deleted\n      */\n     public void delete(Achievement achievement) {\n-        var users = userRepository.findAllWithEagerAchievements(achievement.getId());\n+        var users = userRepository.findAllByAchievementId(achievement.getId());\n         achievement.setUsers(users);\n         for (User user : users) {\n             user.removeAchievement(achievement);\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}, {"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\nindex 0798404b91c..d89d918c0e2 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n", "chunk": "@@ -39,7 +72,9 @@ public class AchievementService {\n      * @param achievement achievement to be deleted\n      */\n     public void delete(Achievement achievement) {\n-        for (User user : achievement.getUsers()) {\n+        var users = userRepository.findAllByAchievementId(achievement.getId());\n+        achievement.setUsers(users);\n+        for (User user : users) {\n             user.removeAchievement(achievement);\n             userRepository.save(user);\n         }\n", "next_change": {"commit": "b55d823034cdd1c7d78f81b2656deb0463a57163", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\nindex d89d918c0e2..1954a518ca6 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n", "chunk": "@@ -80,4 +89,35 @@ public class AchievementService {\n         }\n         achievementRepository.delete(achievement);\n     }\n+\n+    // @Transactional\n+    public void assignPointBasedAchievementIfEarned(Result result) {\n+        var score = result.getScore();\n+        // TODO: add actually required score for achievements\n+        var gold = 0.9;\n+        var silver = 0.8;\n+        var bronze = 0.7;\n+\n+        // TODO: get respective achievement\n+        var achievement = new Achievement();\n+\n+        var optionalUser = participationService.findOneStudentParticipation(result.getParticipation().getId()).getStudent();\n+\n+        if (optionalUser.isPresent()) {\n+            var user = optionalUser.get();\n+\n+            if (score >= gold && !user.getAchievements().contains(achievement)) {\n+                user.addAchievement(achievement);\n+                userRepository.save(user);\n+            }\n+            else if (score >= silver && !user.getAchievements().contains(achievement)) {\n+                user.addAchievement(achievement);\n+                userRepository.save(user);\n+            }\n+            else if (score >= bronze && !user.getAchievements().contains(achievement)) {\n+                user.addAchievement(achievement);\n+                userRepository.save(user);\n+            }\n+        }\n+    }\n }\n", "next_change": {"commit": "865d4c8c0b2383053a0206e3f554ad5ddd33ed22", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\nindex 1954a518ca6..eff8b25290f 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n", "chunk": "@@ -89,35 +84,4 @@ public class AchievementService {\n         }\n         achievementRepository.delete(achievement);\n     }\n-\n-    // @Transactional\n-    public void assignPointBasedAchievementIfEarned(Result result) {\n-        var score = result.getScore();\n-        // TODO: add actually required score for achievements\n-        var gold = 0.9;\n-        var silver = 0.8;\n-        var bronze = 0.7;\n-\n-        // TODO: get respective achievement\n-        var achievement = new Achievement();\n-\n-        var optionalUser = participationService.findOneStudentParticipation(result.getParticipation().getId()).getStudent();\n-\n-        if (optionalUser.isPresent()) {\n-            var user = optionalUser.get();\n-\n-            if (score >= gold && !user.getAchievements().contains(achievement)) {\n-                user.addAchievement(achievement);\n-                userRepository.save(user);\n-            }\n-            else if (score >= silver && !user.getAchievements().contains(achievement)) {\n-                user.addAchievement(achievement);\n-                userRepository.save(user);\n-            }\n-            else if (score >= bronze && !user.getAchievements().contains(achievement)) {\n-                user.addAchievement(achievement);\n-                userRepository.save(user);\n-            }\n-        }\n-    }\n }\n", "next_change": {"commit": "72ed71a2a7717d3b129f6365d24db139ca9ffdf8", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\nindex eff8b25290f..1954a518ca6 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n", "chunk": "@@ -84,4 +89,35 @@ public class AchievementService {\n         }\n         achievementRepository.delete(achievement);\n     }\n+\n+    // @Transactional\n+    public void assignPointBasedAchievementIfEarned(Result result) {\n+        var score = result.getScore();\n+        // TODO: add actually required score for achievements\n+        var gold = 0.9;\n+        var silver = 0.8;\n+        var bronze = 0.7;\n+\n+        // TODO: get respective achievement\n+        var achievement = new Achievement();\n+\n+        var optionalUser = participationService.findOneStudentParticipation(result.getParticipation().getId()).getStudent();\n+\n+        if (optionalUser.isPresent()) {\n+            var user = optionalUser.get();\n+\n+            if (score >= gold && !user.getAchievements().contains(achievement)) {\n+                user.addAchievement(achievement);\n+                userRepository.save(user);\n+            }\n+            else if (score >= silver && !user.getAchievements().contains(achievement)) {\n+                user.addAchievement(achievement);\n+                userRepository.save(user);\n+            }\n+            else if (score >= bronze && !user.getAchievements().contains(achievement)) {\n+                user.addAchievement(achievement);\n+                userRepository.save(user);\n+            }\n+        }\n+    }\n }\n", "next_change": {"commit": "2880feed09fc2090a643646854d2f6a5d2a67e8f", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\nindex 1954a518ca6..eff8b25290f 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n", "chunk": "@@ -89,35 +84,4 @@ public class AchievementService {\n         }\n         achievementRepository.delete(achievement);\n     }\n-\n-    // @Transactional\n-    public void assignPointBasedAchievementIfEarned(Result result) {\n-        var score = result.getScore();\n-        // TODO: add actually required score for achievements\n-        var gold = 0.9;\n-        var silver = 0.8;\n-        var bronze = 0.7;\n-\n-        // TODO: get respective achievement\n-        var achievement = new Achievement();\n-\n-        var optionalUser = participationService.findOneStudentParticipation(result.getParticipation().getId()).getStudent();\n-\n-        if (optionalUser.isPresent()) {\n-            var user = optionalUser.get();\n-\n-            if (score >= gold && !user.getAchievements().contains(achievement)) {\n-                user.addAchievement(achievement);\n-                userRepository.save(user);\n-            }\n-            else if (score >= silver && !user.getAchievements().contains(achievement)) {\n-                user.addAchievement(achievement);\n-                userRepository.save(user);\n-            }\n-            else if (score >= bronze && !user.getAchievements().contains(achievement)) {\n-                user.addAchievement(achievement);\n-                userRepository.save(user);\n-            }\n-        }\n-    }\n }\n", "next_change": {"commit": "f9aef805a8b7948a9d5cd14781203108636a085e", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\nindex eff8b25290f..1954a518ca6 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n", "chunk": "@@ -84,4 +89,35 @@ public class AchievementService {\n         }\n         achievementRepository.delete(achievement);\n     }\n+\n+    // @Transactional\n+    public void assignPointBasedAchievementIfEarned(Result result) {\n+        var score = result.getScore();\n+        // TODO: add actually required score for achievements\n+        var gold = 0.9;\n+        var silver = 0.8;\n+        var bronze = 0.7;\n+\n+        // TODO: get respective achievement\n+        var achievement = new Achievement();\n+\n+        var optionalUser = participationService.findOneStudentParticipation(result.getParticipation().getId()).getStudent();\n+\n+        if (optionalUser.isPresent()) {\n+            var user = optionalUser.get();\n+\n+            if (score >= gold && !user.getAchievements().contains(achievement)) {\n+                user.addAchievement(achievement);\n+                userRepository.save(user);\n+            }\n+            else if (score >= silver && !user.getAchievements().contains(achievement)) {\n+                user.addAchievement(achievement);\n+                userRepository.save(user);\n+            }\n+            else if (score >= bronze && !user.getAchievements().contains(achievement)) {\n+                user.addAchievement(achievement);\n+                userRepository.save(user);\n+            }\n+        }\n+    }\n }\n", "next_change": {"commit": "16c868730f899decba01ea6e156f8e7aebc0f26a", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\nindex 1954a518ca6..eff8b25290f 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n", "chunk": "@@ -89,35 +84,4 @@ public class AchievementService {\n         }\n         achievementRepository.delete(achievement);\n     }\n-\n-    // @Transactional\n-    public void assignPointBasedAchievementIfEarned(Result result) {\n-        var score = result.getScore();\n-        // TODO: add actually required score for achievements\n-        var gold = 0.9;\n-        var silver = 0.8;\n-        var bronze = 0.7;\n-\n-        // TODO: get respective achievement\n-        var achievement = new Achievement();\n-\n-        var optionalUser = participationService.findOneStudentParticipation(result.getParticipation().getId()).getStudent();\n-\n-        if (optionalUser.isPresent()) {\n-            var user = optionalUser.get();\n-\n-            if (score >= gold && !user.getAchievements().contains(achievement)) {\n-                user.addAchievement(achievement);\n-                userRepository.save(user);\n-            }\n-            else if (score >= silver && !user.getAchievements().contains(achievement)) {\n-                user.addAchievement(achievement);\n-                userRepository.save(user);\n-            }\n-            else if (score >= bronze && !user.getAchievements().contains(achievement)) {\n-                user.addAchievement(achievement);\n-                userRepository.save(user);\n-            }\n-        }\n-    }\n }\n", "next_change": {"commit": "c9e78d5f35e682dd1b8e5882d0883d782cecbe3f", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\nindex eff8b25290f..1954a518ca6 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n", "chunk": "@@ -84,4 +89,35 @@ public class AchievementService {\n         }\n         achievementRepository.delete(achievement);\n     }\n+\n+    // @Transactional\n+    public void assignPointBasedAchievementIfEarned(Result result) {\n+        var score = result.getScore();\n+        // TODO: add actually required score for achievements\n+        var gold = 0.9;\n+        var silver = 0.8;\n+        var bronze = 0.7;\n+\n+        // TODO: get respective achievement\n+        var achievement = new Achievement();\n+\n+        var optionalUser = participationService.findOneStudentParticipation(result.getParticipation().getId()).getStudent();\n+\n+        if (optionalUser.isPresent()) {\n+            var user = optionalUser.get();\n+\n+            if (score >= gold && !user.getAchievements().contains(achievement)) {\n+                user.addAchievement(achievement);\n+                userRepository.save(user);\n+            }\n+            else if (score >= silver && !user.getAchievements().contains(achievement)) {\n+                user.addAchievement(achievement);\n+                userRepository.save(user);\n+            }\n+            else if (score >= bronze && !user.getAchievements().contains(achievement)) {\n+                user.addAchievement(achievement);\n+                userRepository.save(user);\n+            }\n+        }\n+    }\n }\n", "next_change": {"commit": "4605b63a052365e502039c1e3d72f325538cf7eb", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\nindex 1954a518ca6..eff8b25290f 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n", "chunk": "@@ -89,35 +84,4 @@ public class AchievementService {\n         }\n         achievementRepository.delete(achievement);\n     }\n-\n-    // @Transactional\n-    public void assignPointBasedAchievementIfEarned(Result result) {\n-        var score = result.getScore();\n-        // TODO: add actually required score for achievements\n-        var gold = 0.9;\n-        var silver = 0.8;\n-        var bronze = 0.7;\n-\n-        // TODO: get respective achievement\n-        var achievement = new Achievement();\n-\n-        var optionalUser = participationService.findOneStudentParticipation(result.getParticipation().getId()).getStudent();\n-\n-        if (optionalUser.isPresent()) {\n-            var user = optionalUser.get();\n-\n-            if (score >= gold && !user.getAchievements().contains(achievement)) {\n-                user.addAchievement(achievement);\n-                userRepository.save(user);\n-            }\n-            else if (score >= silver && !user.getAchievements().contains(achievement)) {\n-                user.addAchievement(achievement);\n-                userRepository.save(user);\n-            }\n-            else if (score >= bronze && !user.getAchievements().contains(achievement)) {\n-                user.addAchievement(achievement);\n-                userRepository.save(user);\n-            }\n-        }\n-    }\n }\n", "next_change": {"commit": "18ddbfcae8f77e8cee1c7944a18fba5a589d46b5", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\nindex eff8b25290f..1954a518ca6 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n", "chunk": "@@ -84,4 +89,35 @@ public class AchievementService {\n         }\n         achievementRepository.delete(achievement);\n     }\n+\n+    // @Transactional\n+    public void assignPointBasedAchievementIfEarned(Result result) {\n+        var score = result.getScore();\n+        // TODO: add actually required score for achievements\n+        var gold = 0.9;\n+        var silver = 0.8;\n+        var bronze = 0.7;\n+\n+        // TODO: get respective achievement\n+        var achievement = new Achievement();\n+\n+        var optionalUser = participationService.findOneStudentParticipation(result.getParticipation().getId()).getStudent();\n+\n+        if (optionalUser.isPresent()) {\n+            var user = optionalUser.get();\n+\n+            if (score >= gold && !user.getAchievements().contains(achievement)) {\n+                user.addAchievement(achievement);\n+                userRepository.save(user);\n+            }\n+            else if (score >= silver && !user.getAchievements().contains(achievement)) {\n+                user.addAchievement(achievement);\n+                userRepository.save(user);\n+            }\n+            else if (score >= bronze && !user.getAchievements().contains(achievement)) {\n+                user.addAchievement(achievement);\n+                userRepository.save(user);\n+            }\n+        }\n+    }\n }\n", "next_change": {"commit": "1555470b055e8a99d34b9ed7f4fcb0929ede6bc6", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\nindex 1954a518ca6..eff8b25290f 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n", "chunk": "@@ -89,35 +84,4 @@ public class AchievementService {\n         }\n         achievementRepository.delete(achievement);\n     }\n-\n-    // @Transactional\n-    public void assignPointBasedAchievementIfEarned(Result result) {\n-        var score = result.getScore();\n-        // TODO: add actually required score for achievements\n-        var gold = 0.9;\n-        var silver = 0.8;\n-        var bronze = 0.7;\n-\n-        // TODO: get respective achievement\n-        var achievement = new Achievement();\n-\n-        var optionalUser = participationService.findOneStudentParticipation(result.getParticipation().getId()).getStudent();\n-\n-        if (optionalUser.isPresent()) {\n-            var user = optionalUser.get();\n-\n-            if (score >= gold && !user.getAchievements().contains(achievement)) {\n-                user.addAchievement(achievement);\n-                userRepository.save(user);\n-            }\n-            else if (score >= silver && !user.getAchievements().contains(achievement)) {\n-                user.addAchievement(achievement);\n-                userRepository.save(user);\n-            }\n-            else if (score >= bronze && !user.getAchievements().contains(achievement)) {\n-                user.addAchievement(achievement);\n-                userRepository.save(user);\n-            }\n-        }\n-    }\n }\n", "next_change": {"commit": "350087b6078ccb4c49a78aebe602a163fa860637", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\nindex eff8b25290f..1954a518ca6 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n", "chunk": "@@ -84,4 +89,35 @@ public class AchievementService {\n         }\n         achievementRepository.delete(achievement);\n     }\n+\n+    // @Transactional\n+    public void assignPointBasedAchievementIfEarned(Result result) {\n+        var score = result.getScore();\n+        // TODO: add actually required score for achievements\n+        var gold = 0.9;\n+        var silver = 0.8;\n+        var bronze = 0.7;\n+\n+        // TODO: get respective achievement\n+        var achievement = new Achievement();\n+\n+        var optionalUser = participationService.findOneStudentParticipation(result.getParticipation().getId()).getStudent();\n+\n+        if (optionalUser.isPresent()) {\n+            var user = optionalUser.get();\n+\n+            if (score >= gold && !user.getAchievements().contains(achievement)) {\n+                user.addAchievement(achievement);\n+                userRepository.save(user);\n+            }\n+            else if (score >= silver && !user.getAchievements().contains(achievement)) {\n+                user.addAchievement(achievement);\n+                userRepository.save(user);\n+            }\n+            else if (score >= bronze && !user.getAchievements().contains(achievement)) {\n+                user.addAchievement(achievement);\n+                userRepository.save(user);\n+            }\n+        }\n+    }\n }\n", "next_change": {"commit": "b496ec47dbd27567e02f96f7b2e363733ca7d89f", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\nindex 1954a518ca6..eff8b25290f 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n", "chunk": "@@ -89,35 +84,4 @@ public class AchievementService {\n         }\n         achievementRepository.delete(achievement);\n     }\n-\n-    // @Transactional\n-    public void assignPointBasedAchievementIfEarned(Result result) {\n-        var score = result.getScore();\n-        // TODO: add actually required score for achievements\n-        var gold = 0.9;\n-        var silver = 0.8;\n-        var bronze = 0.7;\n-\n-        // TODO: get respective achievement\n-        var achievement = new Achievement();\n-\n-        var optionalUser = participationService.findOneStudentParticipation(result.getParticipation().getId()).getStudent();\n-\n-        if (optionalUser.isPresent()) {\n-            var user = optionalUser.get();\n-\n-            if (score >= gold && !user.getAchievements().contains(achievement)) {\n-                user.addAchievement(achievement);\n-                userRepository.save(user);\n-            }\n-            else if (score >= silver && !user.getAchievements().contains(achievement)) {\n-                user.addAchievement(achievement);\n-                userRepository.save(user);\n-            }\n-            else if (score >= bronze && !user.getAchievements().contains(achievement)) {\n-                user.addAchievement(achievement);\n-                userRepository.save(user);\n-            }\n-        }\n-    }\n }\n", "next_change": {"commit": "1871fe479e13e32629073b2a2ab2ae293cf2a6ae", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\nindex eff8b25290f..1954a518ca6 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n", "chunk": "@@ -84,4 +89,35 @@ public class AchievementService {\n         }\n         achievementRepository.delete(achievement);\n     }\n+\n+    // @Transactional\n+    public void assignPointBasedAchievementIfEarned(Result result) {\n+        var score = result.getScore();\n+        // TODO: add actually required score for achievements\n+        var gold = 0.9;\n+        var silver = 0.8;\n+        var bronze = 0.7;\n+\n+        // TODO: get respective achievement\n+        var achievement = new Achievement();\n+\n+        var optionalUser = participationService.findOneStudentParticipation(result.getParticipation().getId()).getStudent();\n+\n+        if (optionalUser.isPresent()) {\n+            var user = optionalUser.get();\n+\n+            if (score >= gold && !user.getAchievements().contains(achievement)) {\n+                user.addAchievement(achievement);\n+                userRepository.save(user);\n+            }\n+            else if (score >= silver && !user.getAchievements().contains(achievement)) {\n+                user.addAchievement(achievement);\n+                userRepository.save(user);\n+            }\n+            else if (score >= bronze && !user.getAchievements().contains(achievement)) {\n+                user.addAchievement(achievement);\n+                userRepository.save(user);\n+            }\n+        }\n+    }\n }\n", "next_change": {"commit": "2d1887ebc2c67095c5a13eee2f86b7fb39b901d3", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\nindex 1954a518ca6..eff8b25290f 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n", "chunk": "@@ -89,35 +84,4 @@ public class AchievementService {\n         }\n         achievementRepository.delete(achievement);\n     }\n-\n-    // @Transactional\n-    public void assignPointBasedAchievementIfEarned(Result result) {\n-        var score = result.getScore();\n-        // TODO: add actually required score for achievements\n-        var gold = 0.9;\n-        var silver = 0.8;\n-        var bronze = 0.7;\n-\n-        // TODO: get respective achievement\n-        var achievement = new Achievement();\n-\n-        var optionalUser = participationService.findOneStudentParticipation(result.getParticipation().getId()).getStudent();\n-\n-        if (optionalUser.isPresent()) {\n-            var user = optionalUser.get();\n-\n-            if (score >= gold && !user.getAchievements().contains(achievement)) {\n-                user.addAchievement(achievement);\n-                userRepository.save(user);\n-            }\n-            else if (score >= silver && !user.getAchievements().contains(achievement)) {\n-                user.addAchievement(achievement);\n-                userRepository.save(user);\n-            }\n-            else if (score >= bronze && !user.getAchievements().contains(achievement)) {\n-                user.addAchievement(achievement);\n-                userRepository.save(user);\n-            }\n-        }\n-    }\n }\n", "next_change": {"commit": "f0e4daee087d8b6f0d36b1b78465a31f6f09713d", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\nindex eff8b25290f..1954a518ca6 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n", "chunk": "@@ -84,4 +89,35 @@ public class AchievementService {\n         }\n         achievementRepository.delete(achievement);\n     }\n+\n+    // @Transactional\n+    public void assignPointBasedAchievementIfEarned(Result result) {\n+        var score = result.getScore();\n+        // TODO: add actually required score for achievements\n+        var gold = 0.9;\n+        var silver = 0.8;\n+        var bronze = 0.7;\n+\n+        // TODO: get respective achievement\n+        var achievement = new Achievement();\n+\n+        var optionalUser = participationService.findOneStudentParticipation(result.getParticipation().getId()).getStudent();\n+\n+        if (optionalUser.isPresent()) {\n+            var user = optionalUser.get();\n+\n+            if (score >= gold && !user.getAchievements().contains(achievement)) {\n+                user.addAchievement(achievement);\n+                userRepository.save(user);\n+            }\n+            else if (score >= silver && !user.getAchievements().contains(achievement)) {\n+                user.addAchievement(achievement);\n+                userRepository.save(user);\n+            }\n+            else if (score >= bronze && !user.getAchievements().contains(achievement)) {\n+                user.addAchievement(achievement);\n+                userRepository.save(user);\n+            }\n+        }\n+    }\n }\n", "next_change": {"commit": "95622742bd3fa7623d0ad8df6089acef534ee60f", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\nindex 1954a518ca6..140afa73bd9 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n", "chunk": "@@ -90,34 +103,60 @@ public class AchievementService {\n         achievementRepository.delete(achievement);\n     }\n \n-    // @Transactional\n-    public void assignPointBasedAchievementIfEarned(Result result) {\n-        var score = result.getScore();\n-        // TODO: add actually required score for achievements\n-        var gold = 0.9;\n-        var silver = 0.8;\n-        var bronze = 0.7;\n+    public void generateForCourse(Course course) {\n+        progressBasedAchievementService.generateAchievements(course);\n+    }\n+\n+    public void generateForExercise(Exercise exercise) {\n+        pointBasedAchievementService.generateAchievements(exercise);\n+        timeBasedAchievementService.generateAchievements(exercise);\n+    }\n+\n+    public void checkForAchievements(Result result) {\n+        if (!result.getParticipation().getExercise().getCourseViaExerciseGroupOrCourseMember().getHasAchievements()) {\n+            return;\n+        }\n+        pointBasedAchievementService.checkForAchievement(result);\n+        timeBasedAchievementService.checkForAchievement(result);\n+        progressBasedAchievementService.checkForAchievement(result);\n+    }\n \n-        // TODO: get respective achievement\n-        var achievement = new Achievement();\n+    public void rewardAchievement(Course course, Exercise exercise, AchievementType type, AchievementRank rank, User user) {\n+        Set<Achievement> achievements;\n+        Achievement achievement;\n \n-        var optionalUser = participationService.findOneStudentParticipation(result.getParticipation().getId()).getStudent();\n+        if (exercise == null) {\n+            achievements = achievementRepository.findAllForRewardedTypeInCourse(course.getId(), type);\n+        }\n+        else {\n+            achievements = achievementRepository.findAllForRewardedTypeInExercise(course.getId(), exercise.getId(), type);\n+        }\n \n-        if (optionalUser.isPresent()) {\n-            var user = optionalUser.get();\n+        var optionalAchievement = achievements.stream().filter(a -> a.getRank().equals(rank)).findAny();\n+        if (!optionalAchievement.isPresent()) {\n+            return;\n+        }\n \n-            if (score >= gold && !user.getAchievements().contains(achievement)) {\n-                user.addAchievement(achievement);\n-                userRepository.save(user);\n-            }\n-            else if (score >= silver && !user.getAchievements().contains(achievement)) {\n-                user.addAchievement(achievement);\n-                userRepository.save(user);\n+        achievement = optionalAchievement.get();\n+        if (achievement.getUsers().contains(user)) {\n+            return;\n+        }\n+\n+        var optionalAchievementsOfHigherRank = achievements.stream().filter(a -> a.getRank().ordinal() > rank.ordinal()).collect(Collectors.toSet());\n+        for (Achievement a : optionalAchievementsOfHigherRank) {\n+            if (a.getUsers().contains(user)) {\n+                return;\n             }\n-            else if (score >= bronze && !user.getAchievements().contains(achievement)) {\n-                user.addAchievement(achievement);\n-                userRepository.save(user);\n+        }\n+\n+        var optionalAchievementsOfLowerRank = achievements.stream().filter(a -> a.getRank().ordinal() < rank.ordinal()).collect(Collectors.toSet());\n+        for (Achievement a : optionalAchievementsOfLowerRank) {\n+            if (a.getUsers().contains(user)) {\n+                user.removeAchievement(a);\n             }\n         }\n+\n+        user.addAchievement(achievement);\n+        userRepository.save(user);\n     }\n }\n", "next_change": {"commit": "0e82242b97cdbc112e1d3a883cb2281d462dd405", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\nindex 140afa73bd9..eff8b25290f 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n", "chunk": "@@ -102,61 +84,4 @@ public class AchievementService {\n         }\n         achievementRepository.delete(achievement);\n     }\n-\n-    public void generateForCourse(Course course) {\n-        progressBasedAchievementService.generateAchievements(course);\n-    }\n-\n-    public void generateForExercise(Exercise exercise) {\n-        pointBasedAchievementService.generateAchievements(exercise);\n-        timeBasedAchievementService.generateAchievements(exercise);\n-    }\n-\n-    public void checkForAchievements(Result result) {\n-        if (!result.getParticipation().getExercise().getCourseViaExerciseGroupOrCourseMember().getHasAchievements()) {\n-            return;\n-        }\n-        pointBasedAchievementService.checkForAchievement(result);\n-        timeBasedAchievementService.checkForAchievement(result);\n-        progressBasedAchievementService.checkForAchievement(result);\n-    }\n-\n-    public void rewardAchievement(Course course, Exercise exercise, AchievementType type, AchievementRank rank, User user) {\n-        Set<Achievement> achievements;\n-        Achievement achievement;\n-\n-        if (exercise == null) {\n-            achievements = achievementRepository.findAllForRewardedTypeInCourse(course.getId(), type);\n-        }\n-        else {\n-            achievements = achievementRepository.findAllForRewardedTypeInExercise(course.getId(), exercise.getId(), type);\n-        }\n-\n-        var optionalAchievement = achievements.stream().filter(a -> a.getRank().equals(rank)).findAny();\n-        if (!optionalAchievement.isPresent()) {\n-            return;\n-        }\n-\n-        achievement = optionalAchievement.get();\n-        if (achievement.getUsers().contains(user)) {\n-            return;\n-        }\n-\n-        var optionalAchievementsOfHigherRank = achievements.stream().filter(a -> a.getRank().ordinal() > rank.ordinal()).collect(Collectors.toSet());\n-        for (Achievement a : optionalAchievementsOfHigherRank) {\n-            if (a.getUsers().contains(user)) {\n-                return;\n-            }\n-        }\n-\n-        var optionalAchievementsOfLowerRank = achievements.stream().filter(a -> a.getRank().ordinal() < rank.ordinal()).collect(Collectors.toSet());\n-        for (Achievement a : optionalAchievementsOfLowerRank) {\n-            if (a.getUsers().contains(user)) {\n-                user.removeAchievement(a);\n-            }\n-        }\n-\n-        user.addAchievement(achievement);\n-        userRepository.save(user);\n-    }\n }\n", "next_change": {"commit": "c7425c9af8e7e15cd22a3771029b103c6d79608f", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\nindex eff8b25290f..07259f551f0 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n", "chunk": "@@ -84,4 +79,78 @@ public class AchievementService {\n         }\n         achievementRepository.delete(achievement);\n     }\n+\n+    public void generateForCourse(Course course) {\n+        progressBasedAchievementService.generateAchievements(course);\n+    }\n+\n+    public void generateForExercise(Exercise exercise) {\n+        pointBasedAchievementService.generateAchievements(exercise);\n+        timeBasedAchievementService.generateAchievements(exercise);\n+    }\n+\n+    public void checkForAchievements(Result result) {\n+        var course = result.getParticipation().getExercise().getCourseViaExerciseGroupOrCourseMember();\n+        if (!course.getHasAchievements()) {\n+            return;\n+        }\n+        var exercise = result.getParticipation().getExercise();\n+        var optionalUser = participationService.findOneStudentParticipation(result.getParticipation().getId()).getStudent();\n+        if (!optionalUser.isPresent()) {\n+            return;\n+        }\n+        var user = optionalUser.get();\n+\n+        var pointRank = pointBasedAchievementService.checkForAchievement(result);\n+        rewardAchievement(course, exercise, AchievementType.POINT, pointRank, user);\n+\n+        var timeRank = timeBasedAchievementService.checkForAchievement(result);\n+        rewardAchievement(course, exercise, AchievementType.TIME, timeRank, user);\n+\n+        var progressRank = progressBasedAchievementService.checkForAchievement(course, user);\n+        rewardAchievement(course, exercise, AchievementType.PROGRESS, progressRank, user);\n+    }\n+\n+    public void rewardAchievement(Course course, Exercise exercise, AchievementType type, AchievementRank rank, User user) {\n+        Set<Achievement> achievements;\n+        Achievement achievement;\n+\n+        if (rank == null) {\n+            return;\n+        }\n+\n+        if (exercise == null) {\n+            achievements = achievementRepository.findAllForRewardedTypeInCourse(course.getId(), type);\n+        }\n+        else {\n+            achievements = achievementRepository.findAllForRewardedTypeInExercise(course.getId(), exercise.getId(), type);\n+        }\n+\n+        var optionalAchievement = achievements.stream().filter(a -> a.getRank().equals(rank)).findAny();\n+        if (!optionalAchievement.isPresent()) {\n+            return;\n+        }\n+\n+        achievement = optionalAchievement.get();\n+        if (achievement.getUsers().contains(user)) {\n+            return;\n+        }\n+\n+        var optionalAchievementsOfHigherRank = achievements.stream().filter(a -> a.getRank().ordinal() > rank.ordinal()).collect(Collectors.toSet());\n+        for (Achievement a : optionalAchievementsOfHigherRank) {\n+            if (a.getUsers().contains(user)) {\n+                return;\n+            }\n+        }\n+\n+        var optionalAchievementsOfLowerRank = achievements.stream().filter(a -> a.getRank().ordinal() < rank.ordinal()).collect(Collectors.toSet());\n+        for (Achievement a : optionalAchievementsOfLowerRank) {\n+            if (a.getUsers().contains(user)) {\n+                user.removeAchievement(a);\n+            }\n+        }\n+\n+        user.addAchievement(achievement);\n+        userRepository.save(user);\n+    }\n }\n", "next_change": {"commit": "28ed83395042c9e9faddf43940bd9f3c221684b3", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\nindex 07259f551f0..eff8b25290f 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n", "chunk": "@@ -79,78 +84,4 @@ public class AchievementService {\n         }\n         achievementRepository.delete(achievement);\n     }\n-\n-    public void generateForCourse(Course course) {\n-        progressBasedAchievementService.generateAchievements(course);\n-    }\n-\n-    public void generateForExercise(Exercise exercise) {\n-        pointBasedAchievementService.generateAchievements(exercise);\n-        timeBasedAchievementService.generateAchievements(exercise);\n-    }\n-\n-    public void checkForAchievements(Result result) {\n-        var course = result.getParticipation().getExercise().getCourseViaExerciseGroupOrCourseMember();\n-        if (!course.getHasAchievements()) {\n-            return;\n-        }\n-        var exercise = result.getParticipation().getExercise();\n-        var optionalUser = participationService.findOneStudentParticipation(result.getParticipation().getId()).getStudent();\n-        if (!optionalUser.isPresent()) {\n-            return;\n-        }\n-        var user = optionalUser.get();\n-\n-        var pointRank = pointBasedAchievementService.checkForAchievement(result);\n-        rewardAchievement(course, exercise, AchievementType.POINT, pointRank, user);\n-\n-        var timeRank = timeBasedAchievementService.checkForAchievement(result);\n-        rewardAchievement(course, exercise, AchievementType.TIME, timeRank, user);\n-\n-        var progressRank = progressBasedAchievementService.checkForAchievement(course, user);\n-        rewardAchievement(course, exercise, AchievementType.PROGRESS, progressRank, user);\n-    }\n-\n-    public void rewardAchievement(Course course, Exercise exercise, AchievementType type, AchievementRank rank, User user) {\n-        Set<Achievement> achievements;\n-        Achievement achievement;\n-\n-        if (rank == null) {\n-            return;\n-        }\n-\n-        if (exercise == null) {\n-            achievements = achievementRepository.findAllForRewardedTypeInCourse(course.getId(), type);\n-        }\n-        else {\n-            achievements = achievementRepository.findAllForRewardedTypeInExercise(course.getId(), exercise.getId(), type);\n-        }\n-\n-        var optionalAchievement = achievements.stream().filter(a -> a.getRank().equals(rank)).findAny();\n-        if (!optionalAchievement.isPresent()) {\n-            return;\n-        }\n-\n-        achievement = optionalAchievement.get();\n-        if (achievement.getUsers().contains(user)) {\n-            return;\n-        }\n-\n-        var optionalAchievementsOfHigherRank = achievements.stream().filter(a -> a.getRank().ordinal() > rank.ordinal()).collect(Collectors.toSet());\n-        for (Achievement a : optionalAchievementsOfHigherRank) {\n-            if (a.getUsers().contains(user)) {\n-                return;\n-            }\n-        }\n-\n-        var optionalAchievementsOfLowerRank = achievements.stream().filter(a -> a.getRank().ordinal() < rank.ordinal()).collect(Collectors.toSet());\n-        for (Achievement a : optionalAchievementsOfLowerRank) {\n-            if (a.getUsers().contains(user)) {\n-                user.removeAchievement(a);\n-            }\n-        }\n-\n-        user.addAchievement(achievement);\n-        userRepository.save(user);\n-    }\n }\n", "next_change": {"commit": "c3317e06a092c8dbee21b52de380addd92f73b3f", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\nindex eff8b25290f..9f934956a2c 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n", "chunk": "@@ -84,4 +79,78 @@ public class AchievementService {\n         }\n         achievementRepository.delete(achievement);\n     }\n+\n+    public void generateForCourse(Course course) {\n+        progressBasedAchievementService.generateAchievements(course);\n+    }\n+\n+    public void generateForExercise(Exercise exercise) {\n+        pointBasedAchievementService.generateAchievements(exercise);\n+        timeBasedAchievementService.generateAchievements(exercise);\n+    }\n+\n+    public void checkForAchievements(Result result) {\n+        var course = result.getParticipation().getExercise().getCourseViaExerciseGroupOrCourseMember();\n+        if (!course.getHasAchievements()) {\n+            return;\n+        }\n+        var exercise = result.getParticipation().getExercise();\n+        var optionalUser = participationService.findOneStudentParticipation(result.getParticipation().getId()).getStudent();\n+        if (!optionalUser.isPresent()) {\n+            return;\n+        }\n+        var user = optionalUser.get();\n+\n+        var pointRank = pointBasedAchievementService.checkForAchievement(result);\n+        rewardAchievement(course, exercise, AchievementType.POINT, pointRank, user);\n+\n+        var timeRank = timeBasedAchievementService.checkForAchievement(result);\n+        rewardAchievement(course, exercise, AchievementType.TIME, timeRank, user);\n+\n+        var progressRank = progressBasedAchievementService.checkForAchievement(course, user);\n+        rewardAchievement(course, exercise, AchievementType.PROGRESS, progressRank, user);\n+    }\n+\n+    public void rewardAchievement(Course course, Exercise exercise, AchievementType type, AchievementRank rank, User user) {\n+        Set<Achievement> achievements;\n+        Achievement achievement;\n+\n+        if (rank == null) {\n+            return;\n+        }\n+\n+        if (exercise == null) {\n+            achievements = achievementRepository.findAllForRewardedTypeInCourse(course.getId(), type);\n+        }\n+        else {\n+            achievements = achievementRepository.findAllForRewardedTypeInExercise(course.getId(), exercise.getId(), type);\n+        }\n+\n+        var optionalAchievement = achievements.stream().filter(a -> a.getRank().equals(rank)).findAny();\n+        if (!optionalAchievement.isPresent()) {\n+            return;\n+        }\n+\n+        achievement = optionalAchievement.get();\n+        if (achievement.getUsers().contains(user)) {\n+            return;\n+        }\n+\n+        var optionalAchievementsOfHigherRank = achievements.stream().filter(a -> a.getRank().ordinal() > rank.ordinal()).collect(Collectors.toSet());\n+        for (Achievement a : optionalAchievementsOfHigherRank) {\n+            if (a.getUsers().contains(user)) {\n+                return;\n+            }\n+        }\n+\n+        var optionalAchievementsOfLowerRank = achievements.stream().filter(a -> a.getRank().ordinal() < rank.ordinal()).collect(Collectors.toSet());\n+        for (Achievement a : optionalAchievementsOfLowerRank) {\n+            if (a.getUsers().contains(user) && a.getExercise() != null) {\n+                user.removeAchievement(a);\n+            }\n+        }\n+\n+        user.addAchievement(achievement);\n+        userRepository.save(user);\n+    }\n }\n", "next_change": {"commit": "508e8977abe4d1e8ec1c8a817fe9bd0f91f6bb8a", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\nindex 9f934956a2c..eff8b25290f 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n", "chunk": "@@ -79,78 +84,4 @@ public class AchievementService {\n         }\n         achievementRepository.delete(achievement);\n     }\n-\n-    public void generateForCourse(Course course) {\n-        progressBasedAchievementService.generateAchievements(course);\n-    }\n-\n-    public void generateForExercise(Exercise exercise) {\n-        pointBasedAchievementService.generateAchievements(exercise);\n-        timeBasedAchievementService.generateAchievements(exercise);\n-    }\n-\n-    public void checkForAchievements(Result result) {\n-        var course = result.getParticipation().getExercise().getCourseViaExerciseGroupOrCourseMember();\n-        if (!course.getHasAchievements()) {\n-            return;\n-        }\n-        var exercise = result.getParticipation().getExercise();\n-        var optionalUser = participationService.findOneStudentParticipation(result.getParticipation().getId()).getStudent();\n-        if (!optionalUser.isPresent()) {\n-            return;\n-        }\n-        var user = optionalUser.get();\n-\n-        var pointRank = pointBasedAchievementService.checkForAchievement(result);\n-        rewardAchievement(course, exercise, AchievementType.POINT, pointRank, user);\n-\n-        var timeRank = timeBasedAchievementService.checkForAchievement(result);\n-        rewardAchievement(course, exercise, AchievementType.TIME, timeRank, user);\n-\n-        var progressRank = progressBasedAchievementService.checkForAchievement(course, user);\n-        rewardAchievement(course, exercise, AchievementType.PROGRESS, progressRank, user);\n-    }\n-\n-    public void rewardAchievement(Course course, Exercise exercise, AchievementType type, AchievementRank rank, User user) {\n-        Set<Achievement> achievements;\n-        Achievement achievement;\n-\n-        if (rank == null) {\n-            return;\n-        }\n-\n-        if (exercise == null) {\n-            achievements = achievementRepository.findAllForRewardedTypeInCourse(course.getId(), type);\n-        }\n-        else {\n-            achievements = achievementRepository.findAllForRewardedTypeInExercise(course.getId(), exercise.getId(), type);\n-        }\n-\n-        var optionalAchievement = achievements.stream().filter(a -> a.getRank().equals(rank)).findAny();\n-        if (!optionalAchievement.isPresent()) {\n-            return;\n-        }\n-\n-        achievement = optionalAchievement.get();\n-        if (achievement.getUsers().contains(user)) {\n-            return;\n-        }\n-\n-        var optionalAchievementsOfHigherRank = achievements.stream().filter(a -> a.getRank().ordinal() > rank.ordinal()).collect(Collectors.toSet());\n-        for (Achievement a : optionalAchievementsOfHigherRank) {\n-            if (a.getUsers().contains(user)) {\n-                return;\n-            }\n-        }\n-\n-        var optionalAchievementsOfLowerRank = achievements.stream().filter(a -> a.getRank().ordinal() < rank.ordinal()).collect(Collectors.toSet());\n-        for (Achievement a : optionalAchievementsOfLowerRank) {\n-            if (a.getUsers().contains(user) && a.getExercise() != null) {\n-                user.removeAchievement(a);\n-            }\n-        }\n-\n-        user.addAchievement(achievement);\n-        userRepository.save(user);\n-    }\n }\n", "next_change": {"commit": "d3d2ea3ec69fdc3185bac66822f03c4a1bf0b6b1", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\nindex eff8b25290f..9f934956a2c 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n", "chunk": "@@ -84,4 +79,78 @@ public class AchievementService {\n         }\n         achievementRepository.delete(achievement);\n     }\n+\n+    public void generateForCourse(Course course) {\n+        progressBasedAchievementService.generateAchievements(course);\n+    }\n+\n+    public void generateForExercise(Exercise exercise) {\n+        pointBasedAchievementService.generateAchievements(exercise);\n+        timeBasedAchievementService.generateAchievements(exercise);\n+    }\n+\n+    public void checkForAchievements(Result result) {\n+        var course = result.getParticipation().getExercise().getCourseViaExerciseGroupOrCourseMember();\n+        if (!course.getHasAchievements()) {\n+            return;\n+        }\n+        var exercise = result.getParticipation().getExercise();\n+        var optionalUser = participationService.findOneStudentParticipation(result.getParticipation().getId()).getStudent();\n+        if (!optionalUser.isPresent()) {\n+            return;\n+        }\n+        var user = optionalUser.get();\n+\n+        var pointRank = pointBasedAchievementService.checkForAchievement(result);\n+        rewardAchievement(course, exercise, AchievementType.POINT, pointRank, user);\n+\n+        var timeRank = timeBasedAchievementService.checkForAchievement(result);\n+        rewardAchievement(course, exercise, AchievementType.TIME, timeRank, user);\n+\n+        var progressRank = progressBasedAchievementService.checkForAchievement(course, user);\n+        rewardAchievement(course, exercise, AchievementType.PROGRESS, progressRank, user);\n+    }\n+\n+    public void rewardAchievement(Course course, Exercise exercise, AchievementType type, AchievementRank rank, User user) {\n+        Set<Achievement> achievements;\n+        Achievement achievement;\n+\n+        if (rank == null) {\n+            return;\n+        }\n+\n+        if (exercise == null) {\n+            achievements = achievementRepository.findAllForRewardedTypeInCourse(course.getId(), type);\n+        }\n+        else {\n+            achievements = achievementRepository.findAllForRewardedTypeInExercise(course.getId(), exercise.getId(), type);\n+        }\n+\n+        var optionalAchievement = achievements.stream().filter(a -> a.getRank().equals(rank)).findAny();\n+        if (!optionalAchievement.isPresent()) {\n+            return;\n+        }\n+\n+        achievement = optionalAchievement.get();\n+        if (achievement.getUsers().contains(user)) {\n+            return;\n+        }\n+\n+        var optionalAchievementsOfHigherRank = achievements.stream().filter(a -> a.getRank().ordinal() > rank.ordinal()).collect(Collectors.toSet());\n+        for (Achievement a : optionalAchievementsOfHigherRank) {\n+            if (a.getUsers().contains(user)) {\n+                return;\n+            }\n+        }\n+\n+        var optionalAchievementsOfLowerRank = achievements.stream().filter(a -> a.getRank().ordinal() < rank.ordinal()).collect(Collectors.toSet());\n+        for (Achievement a : optionalAchievementsOfLowerRank) {\n+            if (a.getUsers().contains(user) && a.getExercise() != null) {\n+                user.removeAchievement(a);\n+            }\n+        }\n+\n+        user.addAchievement(achievement);\n+        userRepository.save(user);\n+    }\n }\n", "next_change": {"commit": "ee25bd720633e2da0f2ad7b9354358590178e20f", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\nindex 9f934956a2c..bc4d28824f4 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n", "chunk": "@@ -153,4 +153,12 @@ public class AchievementService {\n         user.addAchievement(achievement);\n         userRepository.save(user);\n     }\n+\n+    public void prepareForClient(Set<Achievement> achievements) {\n+        for (Achievement achievement : achievements) {\n+            achievement.setExercise(null);\n+            achievement.setCourse(null);\n+            achievement.setUsers(null);\n+        }\n+    }\n }\n", "next_change": {"commit": "64778c859b7f2d14015c50aedae62db4c98bcee7", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\nindex bc4d28824f4..eff8b25290f 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n", "chunk": "@@ -79,86 +84,4 @@ public class AchievementService {\n         }\n         achievementRepository.delete(achievement);\n     }\n-\n-    public void generateForCourse(Course course) {\n-        progressBasedAchievementService.generateAchievements(course);\n-    }\n-\n-    public void generateForExercise(Exercise exercise) {\n-        pointBasedAchievementService.generateAchievements(exercise);\n-        timeBasedAchievementService.generateAchievements(exercise);\n-    }\n-\n-    public void checkForAchievements(Result result) {\n-        var course = result.getParticipation().getExercise().getCourseViaExerciseGroupOrCourseMember();\n-        if (!course.getHasAchievements()) {\n-            return;\n-        }\n-        var exercise = result.getParticipation().getExercise();\n-        var optionalUser = participationService.findOneStudentParticipation(result.getParticipation().getId()).getStudent();\n-        if (!optionalUser.isPresent()) {\n-            return;\n-        }\n-        var user = optionalUser.get();\n-\n-        var pointRank = pointBasedAchievementService.checkForAchievement(result);\n-        rewardAchievement(course, exercise, AchievementType.POINT, pointRank, user);\n-\n-        var timeRank = timeBasedAchievementService.checkForAchievement(result);\n-        rewardAchievement(course, exercise, AchievementType.TIME, timeRank, user);\n-\n-        var progressRank = progressBasedAchievementService.checkForAchievement(course, user);\n-        rewardAchievement(course, exercise, AchievementType.PROGRESS, progressRank, user);\n-    }\n-\n-    public void rewardAchievement(Course course, Exercise exercise, AchievementType type, AchievementRank rank, User user) {\n-        Set<Achievement> achievements;\n-        Achievement achievement;\n-\n-        if (rank == null) {\n-            return;\n-        }\n-\n-        if (exercise == null) {\n-            achievements = achievementRepository.findAllForRewardedTypeInCourse(course.getId(), type);\n-        }\n-        else {\n-            achievements = achievementRepository.findAllForRewardedTypeInExercise(course.getId(), exercise.getId(), type);\n-        }\n-\n-        var optionalAchievement = achievements.stream().filter(a -> a.getRank().equals(rank)).findAny();\n-        if (!optionalAchievement.isPresent()) {\n-            return;\n-        }\n-\n-        achievement = optionalAchievement.get();\n-        if (achievement.getUsers().contains(user)) {\n-            return;\n-        }\n-\n-        var optionalAchievementsOfHigherRank = achievements.stream().filter(a -> a.getRank().ordinal() > rank.ordinal()).collect(Collectors.toSet());\n-        for (Achievement a : optionalAchievementsOfHigherRank) {\n-            if (a.getUsers().contains(user)) {\n-                return;\n-            }\n-        }\n-\n-        var optionalAchievementsOfLowerRank = achievements.stream().filter(a -> a.getRank().ordinal() < rank.ordinal()).collect(Collectors.toSet());\n-        for (Achievement a : optionalAchievementsOfLowerRank) {\n-            if (a.getUsers().contains(user) && a.getExercise() != null) {\n-                user.removeAchievement(a);\n-            }\n-        }\n-\n-        user.addAchievement(achievement);\n-        userRepository.save(user);\n-    }\n-\n-    public void prepareForClient(Set<Achievement> achievements) {\n-        for (Achievement achievement : achievements) {\n-            achievement.setExercise(null);\n-            achievement.setCourse(null);\n-            achievement.setUsers(null);\n-        }\n-    }\n }\n", "next_change": {"commit": "8d5bfc049d9e75323290b069e7343df6fc579ee7", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\nindex eff8b25290f..6668ed36f44 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n", "chunk": "@@ -1,87 +1,161 @@\n package de.tum.in.www1.artemis.service;\n \n-import java.util.List;\n-import java.util.Optional;\n import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import javax.transaction.Transactional;\n \n import org.springframework.stereotype.Service;\n \n+import de.tum.in.www1.artemis.domain.*;\n import de.tum.in.www1.artemis.domain.Achievement;\n import de.tum.in.www1.artemis.domain.Course;\n import de.tum.in.www1.artemis.domain.Exercise;\n import de.tum.in.www1.artemis.domain.User;\n import de.tum.in.www1.artemis.domain.enumeration.AchievementRank;\n+import de.tum.in.www1.artemis.domain.enumeration.AchievementType;\n import de.tum.in.www1.artemis.repository.AchievementRepository;\n import de.tum.in.www1.artemis.repository.UserRepository;\n \n @Service\n public class AchievementService {\n \n+    private final PointBasedAchievementService pointBasedAchievementService;\n+\n+    private final TimeBasedAchievementService timeBasedAchievementService;\n+\n+    private final ProgressBasedAchievementService progressBasedAchievementService;\n+\n+    private final ParticipationService participationService;\n+\n     private final AchievementRepository achievementRepository;\n \n     private final UserRepository userRepository;\n \n-    public AchievementService(AchievementRepository achievementRepository, UserRepository userRepository) {\n+    public AchievementService(AchievementRepository achievementRepository, UserRepository userRepository, PointBasedAchievementService pointBasedAchievementService,\n+            TimeBasedAchievementService timeBasedAchievementService, ProgressBasedAchievementService progressBasedAchievementService, ParticipationService participationService) {\n         this.achievementRepository = achievementRepository;\n+        this.pointBasedAchievementService = pointBasedAchievementService;\n+        this.timeBasedAchievementService = timeBasedAchievementService;\n+        this.progressBasedAchievementService = progressBasedAchievementService;\n         this.userRepository = userRepository;\n+        this.participationService = participationService;\n     }\n \n-    public Optional<Achievement> findById(Long achievementId) {\n-        return achievementRepository.findById(achievementId);\n+    public Set<Achievement> findAllByUserIdAndCourseId(Long userId, Long courseId) {\n+        return achievementRepository.findAllByUserIdAndCourseId(userId, courseId);\n     }\n \n-    public List<Achievement> findAll() {\n-        return achievementRepository.findAll();\n+    @Transactional\n+    public void deleteByCourseId(Long courseId) {\n+        Set<Achievement> achievements = achievementRepository.findAllByCourseId(courseId);\n+        for (Achievement achievement : achievements) {\n+            removeFromUsers(achievement);\n+        }\n+        achievementRepository.deleteAll(achievements);\n     }\n \n-    public Set<Achievement> findAllByCourseId(Long courseId) {\n-        return achievementRepository.findAllByCourseId(courseId);\n+    @Transactional\n+    public void deleteByExerciseId(Long exerciseId) {\n+        Set<Achievement> achievements = achievementRepository.findAllByExerciseId(exerciseId);\n+        for (Achievement achievement : achievements) {\n+            removeFromUsers(achievement);\n+        }\n+        achievementRepository.deleteAll(achievements);\n     }\n \n-    public Set<Achievement> findAllByExerciseId(Long exerciseId) {\n-        return achievementRepository.findAllByExerciseId(exerciseId);\n+    /**\n+     * Removes an achievement from all users\n+     * @param achievement achievement to be deleted\n+     */\n+    public void removeFromUsers(Achievement achievement) {\n+        var users = achievement.getUsers();\n+        for (User user : users) {\n+            user.removeAchievement(achievement);\n+        }\n+        userRepository.saveAll(users);\n     }\n \n-    public Set<Achievement> findAllByUserId(Long userId) {\n-        return achievementRepository.findAllByUserId(userId);\n+    public void generateForCourse(Course course) {\n+        progressBasedAchievementService.generateAchievements(course);\n     }\n \n-    public Achievement save(Achievement achievement) {\n-        return achievementRepository.save(achievement);\n+    public void generateForExercise(Exercise exercise) {\n+        pointBasedAchievementService.generateAchievements(exercise);\n+        timeBasedAchievementService.generateAchievements(exercise);\n     }\n \n-    /**\n-     * Creates an achievement and persist it\n-     * @param title title of the achievement\n-     * @param description description of the achievement\n-     * @param icon the font awesome icon string identifier\n-     * @param rank rank of the achievement\n-     * @param course course which the achievement belongs to\n-     * @param exercise which the achievement belongs to\n-     * @return the created and persisted achievement\n-     */\n-    public Achievement create(String title, String description, String icon, AchievementRank rank, Course course, Exercise exercise) {\n-        Achievement achievement = new Achievement();\n-        achievement.setTitle(title);\n-        achievement.setDescription(description);\n-        achievement.setIcon(icon);\n-        achievement.setRank(rank);\n-        achievement.setCourse(course);\n-        achievement.setExercise(exercise);\n-        return achievementRepository.save(achievement);\n+    @Transactional\n+    public void checkForAchievements(Result result) {\n+        var course = result.getParticipation().getExercise().getCourseViaExerciseGroupOrCourseMember();\n+        if (course.getHasAchievements() == null || !course.getHasAchievements()) {\n+            return;\n+        }\n+        var exercise = result.getParticipation().getExercise();\n+        var optionalUser = participationService.findOneStudentParticipation(result.getParticipation().getId()).getStudent();\n+        if (!optionalUser.isPresent()) {\n+            return;\n+        }\n+        var user = optionalUser.get();\n+\n+        var pointRank = pointBasedAchievementService.checkForAchievement(result);\n+        rewardAchievement(course, exercise, AchievementType.POINT, pointRank, user);\n+\n+        var timeRank = timeBasedAchievementService.checkForAchievement(result);\n+        rewardAchievement(course, exercise, AchievementType.TIME, timeRank, user);\n+\n+        var progressRank = progressBasedAchievementService.checkForAchievement(course, user);\n+        rewardAchievement(course, exercise, AchievementType.PROGRESS, progressRank, user);\n     }\n \n-    /**\n-     * Deletes an achievement by also removing it from all users\n-     * @param achievement achievement to be deleted\n-     */\n-    public void delete(Achievement achievement) {\n-        var users = userRepository.findAllByAchievementId(achievement.getId());\n-        achievement.setUsers(users);\n-        for (User user : users) {\n-            user.removeAchievement(achievement);\n-            userRepository.save(user);\n+    public void rewardAchievement(Course course, Exercise exercise, AchievementType type, AchievementRank rank, User user) {\n+        Set<Achievement> achievements;\n+        Achievement achievement;\n+\n+        if (rank == null) {\n+            return;\n+        }\n+\n+        if (exercise == null) {\n+            achievements = achievementRepository.findAllForRewardedTypeInCourse(course.getId(), type);\n+        }\n+        else {\n+            achievements = achievementRepository.findAllForRewardedTypeInExercise(course.getId(), exercise.getId(), type);\n+        }\n+\n+        var optionalAchievement = achievements.stream().filter(a -> a.getRank().equals(rank)).findAny();\n+        if (!optionalAchievement.isPresent()) {\n+            return;\n+        }\n+\n+        achievement = optionalAchievement.get();\n+        if (achievement.getUsers().contains(user)) {\n+            return;\n+        }\n+\n+        var optionalAchievementsOfHigherRank = achievements.stream().filter(a -> a.getRank().ordinal() > rank.ordinal()).collect(Collectors.toSet());\n+        for (Achievement a : optionalAchievementsOfHigherRank) {\n+            if (a.getUsers().contains(user)) {\n+                return;\n+            }\n+        }\n+\n+        var optionalAchievementsOfLowerRank = achievements.stream().filter(a -> a.getRank().ordinal() < rank.ordinal()).collect(Collectors.toSet());\n+        for (Achievement a : optionalAchievementsOfLowerRank) {\n+            if (a.getUsers().contains(user) && a.getExercise() != null) {\n+                user.removeAchievement(a);\n+            }\n+        }\n+\n+        user.addAchievement(achievement);\n+        userRepository.save(user);\n+    }\n+\n+    public void prepareForClient(Set<Achievement> achievements) {\n+        for (Achievement achievement : achievements) {\n+            achievement.setExercise(null);\n+            achievement.setCourse(null);\n+            achievement.setUsers(null);\n         }\n-        achievementRepository.delete(achievement);\n     }\n }\n", "next_change": {"commit": "7a5de1a37353eb19f93ef49666bba352198834cb", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\nindex 6668ed36f44..eff8b25290f 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n", "chunk": "@@ -1,161 +1,87 @@\n package de.tum.in.www1.artemis.service;\n \n+import java.util.List;\n+import java.util.Optional;\n import java.util.Set;\n-import java.util.stream.Collectors;\n-\n-import javax.transaction.Transactional;\n \n import org.springframework.stereotype.Service;\n \n-import de.tum.in.www1.artemis.domain.*;\n import de.tum.in.www1.artemis.domain.Achievement;\n import de.tum.in.www1.artemis.domain.Course;\n import de.tum.in.www1.artemis.domain.Exercise;\n import de.tum.in.www1.artemis.domain.User;\n import de.tum.in.www1.artemis.domain.enumeration.AchievementRank;\n-import de.tum.in.www1.artemis.domain.enumeration.AchievementType;\n import de.tum.in.www1.artemis.repository.AchievementRepository;\n import de.tum.in.www1.artemis.repository.UserRepository;\n \n @Service\n public class AchievementService {\n \n-    private final PointBasedAchievementService pointBasedAchievementService;\n-\n-    private final TimeBasedAchievementService timeBasedAchievementService;\n-\n-    private final ProgressBasedAchievementService progressBasedAchievementService;\n-\n-    private final ParticipationService participationService;\n-\n     private final AchievementRepository achievementRepository;\n \n     private final UserRepository userRepository;\n \n-    public AchievementService(AchievementRepository achievementRepository, UserRepository userRepository, PointBasedAchievementService pointBasedAchievementService,\n-            TimeBasedAchievementService timeBasedAchievementService, ProgressBasedAchievementService progressBasedAchievementService, ParticipationService participationService) {\n+    public AchievementService(AchievementRepository achievementRepository, UserRepository userRepository) {\n         this.achievementRepository = achievementRepository;\n-        this.pointBasedAchievementService = pointBasedAchievementService;\n-        this.timeBasedAchievementService = timeBasedAchievementService;\n-        this.progressBasedAchievementService = progressBasedAchievementService;\n         this.userRepository = userRepository;\n-        this.participationService = participationService;\n     }\n \n-    public Set<Achievement> findAllByUserIdAndCourseId(Long userId, Long courseId) {\n-        return achievementRepository.findAllByUserIdAndCourseId(userId, courseId);\n+    public Optional<Achievement> findById(Long achievementId) {\n+        return achievementRepository.findById(achievementId);\n     }\n \n-    @Transactional\n-    public void deleteByCourseId(Long courseId) {\n-        Set<Achievement> achievements = achievementRepository.findAllByCourseId(courseId);\n-        for (Achievement achievement : achievements) {\n-            removeFromUsers(achievement);\n-        }\n-        achievementRepository.deleteAll(achievements);\n+    public List<Achievement> findAll() {\n+        return achievementRepository.findAll();\n     }\n \n-    @Transactional\n-    public void deleteByExerciseId(Long exerciseId) {\n-        Set<Achievement> achievements = achievementRepository.findAllByExerciseId(exerciseId);\n-        for (Achievement achievement : achievements) {\n-            removeFromUsers(achievement);\n-        }\n-        achievementRepository.deleteAll(achievements);\n+    public Set<Achievement> findAllByCourseId(Long courseId) {\n+        return achievementRepository.findAllByCourseId(courseId);\n     }\n \n-    /**\n-     * Removes an achievement from all users\n-     * @param achievement achievement to be deleted\n-     */\n-    public void removeFromUsers(Achievement achievement) {\n-        var users = achievement.getUsers();\n-        for (User user : users) {\n-            user.removeAchievement(achievement);\n-        }\n-        userRepository.saveAll(users);\n+    public Set<Achievement> findAllByExerciseId(Long exerciseId) {\n+        return achievementRepository.findAllByExerciseId(exerciseId);\n     }\n \n-    public void generateForCourse(Course course) {\n-        progressBasedAchievementService.generateAchievements(course);\n+    public Set<Achievement> findAllByUserId(Long userId) {\n+        return achievementRepository.findAllByUserId(userId);\n     }\n \n-    public void generateForExercise(Exercise exercise) {\n-        pointBasedAchievementService.generateAchievements(exercise);\n-        timeBasedAchievementService.generateAchievements(exercise);\n-    }\n-\n-    @Transactional\n-    public void checkForAchievements(Result result) {\n-        var course = result.getParticipation().getExercise().getCourseViaExerciseGroupOrCourseMember();\n-        if (course.getHasAchievements() == null || !course.getHasAchievements()) {\n-            return;\n-        }\n-        var exercise = result.getParticipation().getExercise();\n-        var optionalUser = participationService.findOneStudentParticipation(result.getParticipation().getId()).getStudent();\n-        if (!optionalUser.isPresent()) {\n-            return;\n-        }\n-        var user = optionalUser.get();\n-\n-        var pointRank = pointBasedAchievementService.checkForAchievement(result);\n-        rewardAchievement(course, exercise, AchievementType.POINT, pointRank, user);\n-\n-        var timeRank = timeBasedAchievementService.checkForAchievement(result);\n-        rewardAchievement(course, exercise, AchievementType.TIME, timeRank, user);\n-\n-        var progressRank = progressBasedAchievementService.checkForAchievement(course, user);\n-        rewardAchievement(course, exercise, AchievementType.PROGRESS, progressRank, user);\n+    public Achievement save(Achievement achievement) {\n+        return achievementRepository.save(achievement);\n     }\n \n-    public void rewardAchievement(Course course, Exercise exercise, AchievementType type, AchievementRank rank, User user) {\n-        Set<Achievement> achievements;\n-        Achievement achievement;\n-\n-        if (rank == null) {\n-            return;\n-        }\n-\n-        if (exercise == null) {\n-            achievements = achievementRepository.findAllForRewardedTypeInCourse(course.getId(), type);\n-        }\n-        else {\n-            achievements = achievementRepository.findAllForRewardedTypeInExercise(course.getId(), exercise.getId(), type);\n-        }\n-\n-        var optionalAchievement = achievements.stream().filter(a -> a.getRank().equals(rank)).findAny();\n-        if (!optionalAchievement.isPresent()) {\n-            return;\n-        }\n-\n-        achievement = optionalAchievement.get();\n-        if (achievement.getUsers().contains(user)) {\n-            return;\n-        }\n-\n-        var optionalAchievementsOfHigherRank = achievements.stream().filter(a -> a.getRank().ordinal() > rank.ordinal()).collect(Collectors.toSet());\n-        for (Achievement a : optionalAchievementsOfHigherRank) {\n-            if (a.getUsers().contains(user)) {\n-                return;\n-            }\n-        }\n-\n-        var optionalAchievementsOfLowerRank = achievements.stream().filter(a -> a.getRank().ordinal() < rank.ordinal()).collect(Collectors.toSet());\n-        for (Achievement a : optionalAchievementsOfLowerRank) {\n-            if (a.getUsers().contains(user) && a.getExercise() != null) {\n-                user.removeAchievement(a);\n-            }\n-        }\n-\n-        user.addAchievement(achievement);\n-        userRepository.save(user);\n+    /**\n+     * Creates an achievement and persist it\n+     * @param title title of the achievement\n+     * @param description description of the achievement\n+     * @param icon the font awesome icon string identifier\n+     * @param rank rank of the achievement\n+     * @param course course which the achievement belongs to\n+     * @param exercise which the achievement belongs to\n+     * @return the created and persisted achievement\n+     */\n+    public Achievement create(String title, String description, String icon, AchievementRank rank, Course course, Exercise exercise) {\n+        Achievement achievement = new Achievement();\n+        achievement.setTitle(title);\n+        achievement.setDescription(description);\n+        achievement.setIcon(icon);\n+        achievement.setRank(rank);\n+        achievement.setCourse(course);\n+        achievement.setExercise(exercise);\n+        return achievementRepository.save(achievement);\n     }\n \n-    public void prepareForClient(Set<Achievement> achievements) {\n-        for (Achievement achievement : achievements) {\n-            achievement.setExercise(null);\n-            achievement.setCourse(null);\n-            achievement.setUsers(null);\n+    /**\n+     * Deletes an achievement by also removing it from all users\n+     * @param achievement achievement to be deleted\n+     */\n+    public void delete(Achievement achievement) {\n+        var users = userRepository.findAllByAchievementId(achievement.getId());\n+        achievement.setUsers(users);\n+        for (User user : users) {\n+            user.removeAchievement(achievement);\n+            userRepository.save(user);\n         }\n+        achievementRepository.delete(achievement);\n     }\n }\n", "next_change": {"commit": "116151629d403403ee9b750c30c182f44f70e233", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\nindex eff8b25290f..30708f42a32 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n", "chunk": "@@ -1,87 +1,117 @@\n package de.tum.in.www1.artemis.service;\n \n-import java.util.List;\n-import java.util.Optional;\n import java.util.Set;\n \n+import javax.transaction.Transactional;\n+\n import org.springframework.stereotype.Service;\n \n import de.tum.in.www1.artemis.domain.Achievement;\n import de.tum.in.www1.artemis.domain.Course;\n import de.tum.in.www1.artemis.domain.Exercise;\n import de.tum.in.www1.artemis.domain.User;\n-import de.tum.in.www1.artemis.domain.enumeration.AchievementRank;\n import de.tum.in.www1.artemis.repository.AchievementRepository;\n import de.tum.in.www1.artemis.repository.UserRepository;\n \n @Service\n public class AchievementService {\n \n+    private final PointBasedAchievementService pointBasedAchievementService;\n+\n+    private final TimeBasedAchievementService timeBasedAchievementService;\n+\n+    private final ProgressBasedAchievementService progressBasedAchievementService;\n+\n     private final AchievementRepository achievementRepository;\n \n     private final UserRepository userRepository;\n \n-    public AchievementService(AchievementRepository achievementRepository, UserRepository userRepository) {\n+    public AchievementService(AchievementRepository achievementRepository, UserRepository userRepository, PointBasedAchievementService pointBasedAchievementService,\n+            TimeBasedAchievementService timeBasedAchievementService, ProgressBasedAchievementService progressBasedAchievementService) {\n         this.achievementRepository = achievementRepository;\n+        this.pointBasedAchievementService = pointBasedAchievementService;\n+        this.timeBasedAchievementService = timeBasedAchievementService;\n+        this.progressBasedAchievementService = progressBasedAchievementService;\n         this.userRepository = userRepository;\n     }\n \n-    public Optional<Achievement> findById(Long achievementId) {\n-        return achievementRepository.findById(achievementId);\n-    }\n-\n-    public List<Achievement> findAll() {\n-        return achievementRepository.findAll();\n+    /**\n+     * Finds all achievements for a user in a given course and returns them as a set\n+     * @param userId\n+     * @param courseId\n+     */\n+    public Set<Achievement> findAllByUserIdAndCourseId(Long userId, Long courseId) {\n+        return achievementRepository.findAllByUserIdAndCourseId(userId, courseId);\n     }\n \n-    public Set<Achievement> findAllByCourseId(Long courseId) {\n-        return achievementRepository.findAllByCourseId(courseId);\n+    /**\n+     * Deletes all achievements that belong to the course with the given courseId\n+     * Used when a course is deleted or when achievements are disabled again for a course\n+     * @param courseId\n+     */\n+    @Transactional\n+    public void deleteByCourseId(Long courseId) {\n+        Set<Achievement> achievements = achievementRepository.findAllByCourseId(courseId);\n+        for (Achievement achievement : achievements) {\n+            removeFromUsers(achievement);\n+        }\n+        achievementRepository.deleteAll(achievements);\n     }\n \n-    public Set<Achievement> findAllByExerciseId(Long exerciseId) {\n-        return achievementRepository.findAllByExerciseId(exerciseId);\n+    /**\n+     * Deletes all achievements that belong to the exercise with the given exerciseId\n+     * Used when an exercise is deleted\n+     * @param exerciseId\n+     */\n+    @Transactional\n+    public void deleteByExerciseId(Long exerciseId) {\n+        Set<Achievement> achievements = achievementRepository.findAllByExerciseId(exerciseId);\n+        for (Achievement achievement : achievements) {\n+            removeFromUsers(achievement);\n+        }\n+        achievementRepository.deleteAll(achievements);\n     }\n \n-    public Set<Achievement> findAllByUserId(Long userId) {\n-        return achievementRepository.findAllByUserId(userId);\n+    /**\n+     * Removes an achievement from all users\n+     * @param achievement achievement to be deleted\n+     */\n+    public void removeFromUsers(Achievement achievement) {\n+        var users = achievement.getUsers();\n+        for (User user : users) {\n+            user.removeAchievement(achievement);\n+        }\n+        userRepository.saveAll(users);\n     }\n \n-    public Achievement save(Achievement achievement) {\n-        return achievementRepository.save(achievement);\n+    /**\n+     * Generates achievements for a course\n+     * Used when course is updated or created and achievements are enabled for course\n+     * @param course\n+     */\n+    public void generateForCourse(Course course) {\n+        progressBasedAchievementService.generateAchievements(course);\n     }\n \n     /**\n-     * Creates an achievement and persist it\n-     * @param title title of the achievement\n-     * @param description description of the achievement\n-     * @param icon the font awesome icon string identifier\n-     * @param rank rank of the achievement\n-     * @param course course which the achievement belongs to\n-     * @param exercise which the achievement belongs to\n-     * @return the created and persisted achievement\n+     * Generates achievements for an exercise\n+     * Used when exercise is created and achievements are enabled for corresponding course\n+     * @param exercise\n      */\n-    public Achievement create(String title, String description, String icon, AchievementRank rank, Course course, Exercise exercise) {\n-        Achievement achievement = new Achievement();\n-        achievement.setTitle(title);\n-        achievement.setDescription(description);\n-        achievement.setIcon(icon);\n-        achievement.setRank(rank);\n-        achievement.setCourse(course);\n-        achievement.setExercise(exercise);\n-        return achievementRepository.save(achievement);\n+    public void generateForExercise(Exercise exercise) {\n+        pointBasedAchievementService.generateAchievements(exercise);\n+        timeBasedAchievementService.generateAchievements(exercise);\n     }\n \n     /**\n-     * Deletes an achievement by also removing it from all users\n-     * @param achievement achievement to be deleted\n+     * Prepares the given set of achievements to be sent to the client by removing exercise, course and users\n+     * @param achievements\n      */\n-    public void delete(Achievement achievement) {\n-        var users = userRepository.findAllByAchievementId(achievement.getId());\n-        achievement.setUsers(users);\n-        for (User user : users) {\n-            user.removeAchievement(achievement);\n-            userRepository.save(user);\n+    public void prepareForClient(Set<Achievement> achievements) {\n+        for (Achievement achievement : achievements) {\n+            achievement.setExercise(null);\n+            achievement.setCourse(null);\n+            achievement.setUsers(null);\n         }\n-        achievementRepository.delete(achievement);\n     }\n }\n", "next_change": {"commit": "d85f5f34a571777d2b7558382f25bf6bc7434049", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\nindex 30708f42a32..0798404b91c 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n", "chunk": "@@ -16,102 +13,36 @@ import de.tum.in.www1.artemis.repository.UserRepository;\n @Service\n public class AchievementService {\n \n-    private final PointBasedAchievementService pointBasedAchievementService;\n-\n-    private final TimeBasedAchievementService timeBasedAchievementService;\n-\n-    private final ProgressBasedAchievementService progressBasedAchievementService;\n-\n     private final AchievementRepository achievementRepository;\n \n     private final UserRepository userRepository;\n \n-    public AchievementService(AchievementRepository achievementRepository, UserRepository userRepository, PointBasedAchievementService pointBasedAchievementService,\n-            TimeBasedAchievementService timeBasedAchievementService, ProgressBasedAchievementService progressBasedAchievementService) {\n+    public AchievementService(AchievementRepository achievementRepository, UserRepository userRepository) {\n         this.achievementRepository = achievementRepository;\n-        this.pointBasedAchievementService = pointBasedAchievementService;\n-        this.timeBasedAchievementService = timeBasedAchievementService;\n-        this.progressBasedAchievementService = progressBasedAchievementService;\n         this.userRepository = userRepository;\n     }\n \n-    /**\n-     * Finds all achievements for a user in a given course and returns them as a set\n-     * @param userId\n-     * @param courseId\n-     */\n-    public Set<Achievement> findAllByUserIdAndCourseId(Long userId, Long courseId) {\n-        return achievementRepository.findAllByUserIdAndCourseId(userId, courseId);\n+    public Optional<Achievement> findById(Long achievementId) {\n+        return achievementRepository.findById(achievementId);\n     }\n \n-    /**\n-     * Deletes all achievements that belong to the course with the given courseId\n-     * Used when a course is deleted or when achievements are disabled again for a course\n-     * @param courseId\n-     */\n-    @Transactional\n-    public void deleteByCourseId(Long courseId) {\n-        Set<Achievement> achievements = achievementRepository.findAllByCourseId(courseId);\n-        for (Achievement achievement : achievements) {\n-            removeFromUsers(achievement);\n-        }\n-        achievementRepository.deleteAll(achievements);\n+    public Set<Achievement> findAllForCourse(Long courseId) {\n+        return achievementRepository.getAllByCourseId(courseId);\n     }\n \n-    /**\n-     * Deletes all achievements that belong to the exercise with the given exerciseId\n-     * Used when an exercise is deleted\n-     * @param exerciseId\n-     */\n-    @Transactional\n-    public void deleteByExerciseId(Long exerciseId) {\n-        Set<Achievement> achievements = achievementRepository.findAllByExerciseId(exerciseId);\n-        for (Achievement achievement : achievements) {\n-            removeFromUsers(achievement);\n-        }\n-        achievementRepository.deleteAll(achievements);\n+    public Set<Achievement> findAllForUser(Long userId) {\n+        return achievementRepository.getAllByUserId(userId);\n     }\n \n     /**\n-     * Removes an achievement from all users\n+     * Deletes an achievement by also removing it from all users\n      * @param achievement achievement to be deleted\n      */\n-    public void removeFromUsers(Achievement achievement) {\n-        var users = achievement.getUsers();\n-        for (User user : users) {\n+    public void delete(Achievement achievement) {\n+        for (User user : achievement.getUsers()) {\n             user.removeAchievement(achievement);\n+            userRepository.save(user);\n         }\n-        userRepository.saveAll(users);\n-    }\n-\n-    /**\n-     * Generates achievements for a course\n-     * Used when course is updated or created and achievements are enabled for course\n-     * @param course\n-     */\n-    public void generateForCourse(Course course) {\n-        progressBasedAchievementService.generateAchievements(course);\n-    }\n-\n-    /**\n-     * Generates achievements for an exercise\n-     * Used when exercise is created and achievements are enabled for corresponding course\n-     * @param exercise\n-     */\n-    public void generateForExercise(Exercise exercise) {\n-        pointBasedAchievementService.generateAchievements(exercise);\n-        timeBasedAchievementService.generateAchievements(exercise);\n-    }\n-\n-    /**\n-     * Prepares the given set of achievements to be sent to the client by removing exercise, course and users\n-     * @param achievements\n-     */\n-    public void prepareForClient(Set<Achievement> achievements) {\n-        for (Achievement achievement : achievements) {\n-            achievement.setExercise(null);\n-            achievement.setCourse(null);\n-            achievement.setUsers(null);\n-        }\n+        achievementRepository.delete(achievement);\n     }\n }\n", "next_change": {"commit": "fd13e3d27e731c1b8d1a2dea0e1c43ae2468034b", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\nindex 0798404b91c..adc27ea88a9 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n", "chunk": "@@ -39,7 +64,9 @@ public class AchievementService {\n      * @param achievement achievement to be deleted\n      */\n     public void delete(Achievement achievement) {\n-        for (User user : achievement.getUsers()) {\n+        var users = userRepository.findAllWithEagerAchievements(achievement.getId());\n+        achievement.setUsers(users);\n+        for (User user : users) {\n             user.removeAchievement(achievement);\n             userRepository.save(user);\n         }\n", "next_change": {"commit": "e71c08bfb8259e519230dcb95a44996794c4e79e", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\nindex adc27ea88a9..2440806b0f3 100644\n--- a/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n+++ b/src/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n", "chunk": "@@ -64,7 +64,7 @@ public class AchievementService {\n      * @param achievement achievement to be deleted\n      */\n     public void delete(Achievement achievement) {\n-        var users = userRepository.findAllWithEagerAchievements(achievement.getId());\n+        var users = userRepository.findAllByAchievementId(achievement.getId());\n         achievement.setUsers(users);\n         for (User user : users) {\n             user.removeAchievement(achievement);\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDk0MTQ2Nw==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r480941467", "body": "please remove Transactional, we don't want to use it!", "bodyText": "please remove Transactional, we don't want to use it!", "bodyHTML": "<p dir=\"auto\">please remove Transactional, we don't want to use it!</p>", "author": "krusche", "createdAt": "2020-09-01T07:55:25Z", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java", "diffHunk": "@@ -0,0 +1,135 @@\n+package de.tum.in.www1.artemis.web.rest;\n+\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.springframework.web.bind.annotation.*;\n+\n+import de.tum.in.www1.artemis.domain.Achievement;\n+import de.tum.in.www1.artemis.domain.Course;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.repository.AchievementRepository;\n+import de.tum.in.www1.artemis.service.AchievementService;\n+import de.tum.in.www1.artemis.service.AuthorizationCheckService;\n+import de.tum.in.www1.artemis.service.UserService;\n+import de.tum.in.www1.artemis.web.rest.errors.AccessForbiddenException;\n+import de.tum.in.www1.artemis.web.rest.util.HeaderUtil;\n+\n+/**\n+ * REST controller for managing Achievements.\n+ */\n+@RestController\n+@RequestMapping(\"/api\")\n+public class AchievementResource {\n+\n+    private static final String ENTITY_NAME = \"achievement\";\n+\n+    @Value(\"${jhipster.clientApp.name}\")\n+    private String applicationName;\n+\n+    private final Logger log = LoggerFactory.getLogger(AchievementResource.class);\n+\n+    private final AuthorizationCheckService authCheckService;\n+\n+    private final AchievementService achievementService;\n+\n+    private final UserService userService;\n+\n+    private final AchievementRepository achievementRepository;\n+\n+    public AchievementResource(AuthorizationCheckService authCheckService, AchievementService achievementService, UserService userService,\n+            AchievementRepository achievementRepository) {\n+        this.authCheckService = authCheckService;\n+        this.achievementService = achievementService;\n+        this.userService = userService;\n+        this.achievementRepository = achievementRepository;\n+    }\n+\n+    /**\n+     * GET /achievements : Get all achievements for user.\n+     *\n+     * @return the ResponseEntity with status 200 (OK) and with the found achievements as body\n+     */\n+    @GetMapping(\"/achievements\")\n+    @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Set<Achievement>> getAchievementsForUser() {\n+        User user = userService.getUser();\n+        log.debug(\"REST request to get achievements for user : {}\", user.getLogin());\n+        Set<Achievement> achievements = achievementService.findAllForUser(user.getId());\n+        return ResponseEntity.ok(achievements);\n+    }\n+\n+    /**\n+     * GET /courses/{courseId}/achievements : Get all achievements for course.\n+     *\n+     * @param courseId the course to which the achievements belong to\n+     * @return the ResponseEntity with status 200 (OK) and with the found achievements as body\n+     */\n+    @GetMapping(\"/courses/{courseId}/achievements\")\n+    @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Set<Achievement>> getAchievementsForCourse(@PathVariable Long courseId) {\n+        log.debug(\"REST request to get achievements for course : {}\", courseId);\n+        Set<Achievement> achievements = achievementService.findAllForCourse(courseId);\n+        return ResponseEntity.ok(achievements);\n+    }\n+\n+    /**\n+     * PUT /achievements : Updates an existing achievement.\n+     *\n+     * @param achievement the achievement to update\n+     * @return the ResponseEntity with status 200 (OK) and with body the updated achievement, or with status 500\n+     *         (Internal Server Error) if the achievement couldn't be updated\n+     */\n+    @PutMapping(\"/achievements\")\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Achievement> updateAchievement(@RequestBody Achievement achievement) {\n+        log.debug(\"REST request to update Achievement : {}\", achievement);\n+\n+        if (achievement.getId() == null) {\n+            return ResponseEntity.badRequest().build();\n+        }\n+\n+        Course course = achievement.getCourse();\n+        User user = userService.getUserWithGroupsAndAuthorities();\n+        if (!authCheckService.isAtLeastInstructorInCourse(course, user)) {\n+            throw new AccessForbiddenException(\"You are not allowed to access this resource\");\n+        }\n+\n+        Achievement savedAchievement = achievementRepository.save(achievement);\n+        return ResponseEntity.ok().headers(HeaderUtil.createEntityUpdateAlert(applicationName, true, ENTITY_NAME, savedAchievement.getId().toString())).body(savedAchievement);\n+    }\n+\n+    /**\n+     * DELETE /achievements/:achievementId : delete the \"id\" achievement.\n+     *\n+     * @param achievementId the id of the achievement to delete\n+     * @return the ResponseEntity with status 200 (OK)\n+     */\n+    @DeleteMapping(\"/achievements/{achievementId}\")\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    @Transactional", "originalCommit": "38f60a94a755877c7b502fda4cd54fca2ba8cb18", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI3MTQzNQ==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r481271435", "bodyText": "removed", "author": "balazs-czopf", "createdAt": "2020-09-01T16:18:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDk0MTQ2Nw=="}], "type": "inlineReview", "revised_code": {"commit": "6aa68b0ab7a071fa631c7c72cdb8ea02ccf15a39", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\nindex efa5f0e0668..9a9cebd81ef 100644\n--- a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n+++ b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n", "chunk": "@@ -113,7 +107,6 @@ public class AchievementResource {\n      */\n     @DeleteMapping(\"/achievements/{achievementId}\")\n     @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n-    @Transactional\n     public ResponseEntity<Void> deleteAchievement(@PathVariable long achievementId) {\n         log.info(\"REST request to delete Achievement : {}\", achievementId);\n         User user = userService.getUserWithGroupsAndAuthorities();\n", "next_change": {"commit": "8d5bfc049d9e75323290b069e7343df6fc579ee7", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\nindex 9a9cebd81ef..19fd5df9305 100644\n--- a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n+++ b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n", "chunk": "@@ -67,62 +43,11 @@ public class AchievementResource {\n      */\n     @GetMapping(\"/courses/{courseId}/achievements\")\n     @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n-    public ResponseEntity<Set<Achievement>> getAchievementsForCourse(@PathVariable Long courseId) {\n-        log.debug(\"REST request to get achievements for course : {}\", courseId);\n-        Set<Achievement> achievements = achievementService.findAllByCourseId(courseId);\n-        return ResponseEntity.ok(achievements);\n-    }\n-\n-    /**\n-     * PUT /achievements : Updates an existing achievement.\n-     *\n-     * @param achievement the achievement to update\n-     * @return the ResponseEntity with status 200 (OK) and with body the updated achievement, or with status 500\n-     *         (Internal Server Error) if the achievement couldn't be updated\n-     */\n-    @PutMapping(\"/achievements\")\n-    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n-    public ResponseEntity<Achievement> updateAchievement(@RequestBody Achievement achievement) {\n-        log.debug(\"REST request to update Achievement : {}\", achievement);\n-\n-        if (achievement.getId() == null) {\n-            return ResponseEntity.badRequest().build();\n-        }\n-\n-        Course course = achievement.getCourse();\n+    public ResponseEntity<Set<Achievement>> getAchievementsForUserInCourse(@PathVariable Long courseId) {\n         User user = userService.getUserWithGroupsAndAuthorities();\n-        if (!authCheckService.isAtLeastInstructorInCourse(course, user)) {\n-            throw new AccessForbiddenException(\"You are not allowed to access this resource\");\n-        }\n-\n-        Achievement savedAchievement = achievementService.save(achievement);\n-        return ResponseEntity.ok().headers(HeaderUtil.createEntityUpdateAlert(applicationName, true, ENTITY_NAME, savedAchievement.getId().toString())).body(savedAchievement);\n-    }\n-\n-    /**\n-     * DELETE /achievements/:achievementId : delete the \"id\" achievement.\n-     *\n-     * @param achievementId the id of the achievement to delete\n-     * @return the ResponseEntity with status 200 (OK)\n-     */\n-    @DeleteMapping(\"/achievements/{achievementId}\")\n-    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n-    public ResponseEntity<Void> deleteAchievement(@PathVariable long achievementId) {\n-        log.info(\"REST request to delete Achievement : {}\", achievementId);\n-        User user = userService.getUserWithGroupsAndAuthorities();\n-        Optional<Achievement> optionalAchievement = achievementService.findById(achievementId);\n-        if (optionalAchievement.isEmpty()) {\n-            return ResponseEntity.notFound().build();\n-        }\n-        Achievement achievement = optionalAchievement.get();\n-        Course course = achievement.getCourse();\n-        if (!authCheckService.isAtLeastInstructorInCourse(course, user)) {\n-            throw new AccessForbiddenException(\"You are not allowed to access this resource\");\n-        }\n-\n-        log.info(\"User \" + user.getLogin() + \" has requested to delete the achievement {}\", achievement.getId());\n-        achievementService.delete(achievement);\n-        return ResponseEntity.ok().headers(HeaderUtil.createEntityDeletionAlert(applicationName, true, ENTITY_NAME, achievement.getId().toString())).build();\n+        log.debug(\"REST request to get achievements for user : {} in course : {}\", user.getLogin(), courseId);\n+        Set<Achievement> achievements = achievementRepository.findAllByUserIdAndCourseId(user.getId(), courseId);\n+        achievementService.prepareForClient(achievements);\n+        return ResponseEntity.ok(achievements);\n     }\n-\n }\n", "next_change": {"commit": "7a5de1a37353eb19f93ef49666bba352198834cb", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\nindex 19fd5df9305..9a9cebd81ef 100644\n--- a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n+++ b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n", "chunk": "@@ -43,11 +67,62 @@ public class AchievementResource {\n      */\n     @GetMapping(\"/courses/{courseId}/achievements\")\n     @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n-    public ResponseEntity<Set<Achievement>> getAchievementsForUserInCourse(@PathVariable Long courseId) {\n-        User user = userService.getUserWithGroupsAndAuthorities();\n-        log.debug(\"REST request to get achievements for user : {} in course : {}\", user.getLogin(), courseId);\n-        Set<Achievement> achievements = achievementRepository.findAllByUserIdAndCourseId(user.getId(), courseId);\n-        achievementService.prepareForClient(achievements);\n+    public ResponseEntity<Set<Achievement>> getAchievementsForCourse(@PathVariable Long courseId) {\n+        log.debug(\"REST request to get achievements for course : {}\", courseId);\n+        Set<Achievement> achievements = achievementService.findAllByCourseId(courseId);\n         return ResponseEntity.ok(achievements);\n     }\n+\n+    /**\n+     * PUT /achievements : Updates an existing achievement.\n+     *\n+     * @param achievement the achievement to update\n+     * @return the ResponseEntity with status 200 (OK) and with body the updated achievement, or with status 500\n+     *         (Internal Server Error) if the achievement couldn't be updated\n+     */\n+    @PutMapping(\"/achievements\")\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Achievement> updateAchievement(@RequestBody Achievement achievement) {\n+        log.debug(\"REST request to update Achievement : {}\", achievement);\n+\n+        if (achievement.getId() == null) {\n+            return ResponseEntity.badRequest().build();\n+        }\n+\n+        Course course = achievement.getCourse();\n+        User user = userService.getUserWithGroupsAndAuthorities();\n+        if (!authCheckService.isAtLeastInstructorInCourse(course, user)) {\n+            throw new AccessForbiddenException(\"You are not allowed to access this resource\");\n+        }\n+\n+        Achievement savedAchievement = achievementService.save(achievement);\n+        return ResponseEntity.ok().headers(HeaderUtil.createEntityUpdateAlert(applicationName, true, ENTITY_NAME, savedAchievement.getId().toString())).body(savedAchievement);\n+    }\n+\n+    /**\n+     * DELETE /achievements/:achievementId : delete the \"id\" achievement.\n+     *\n+     * @param achievementId the id of the achievement to delete\n+     * @return the ResponseEntity with status 200 (OK)\n+     */\n+    @DeleteMapping(\"/achievements/{achievementId}\")\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Void> deleteAchievement(@PathVariable long achievementId) {\n+        log.info(\"REST request to delete Achievement : {}\", achievementId);\n+        User user = userService.getUserWithGroupsAndAuthorities();\n+        Optional<Achievement> optionalAchievement = achievementService.findById(achievementId);\n+        if (optionalAchievement.isEmpty()) {\n+            return ResponseEntity.notFound().build();\n+        }\n+        Achievement achievement = optionalAchievement.get();\n+        Course course = achievement.getCourse();\n+        if (!authCheckService.isAtLeastInstructorInCourse(course, user)) {\n+            throw new AccessForbiddenException(\"You are not allowed to access this resource\");\n+        }\n+\n+        log.info(\"User \" + user.getLogin() + \" has requested to delete the achievement {}\", achievement.getId());\n+        achievementService.delete(achievement);\n+        return ResponseEntity.ok().headers(HeaderUtil.createEntityDeletionAlert(applicationName, true, ENTITY_NAME, achievement.getId().toString())).build();\n+    }\n+\n }\n", "next_change": {"commit": "116151629d403403ee9b750c30c182f44f70e233", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\nindex 9a9cebd81ef..2367bc01f2b 100644\n--- a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n+++ b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n", "chunk": "@@ -26,103 +21,33 @@ import de.tum.in.www1.artemis.web.rest.util.HeaderUtil;\n @RequestMapping(\"/api\")\n public class AchievementResource {\n \n-    private static final String ENTITY_NAME = \"achievement\";\n-\n-    @Value(\"${jhipster.clientApp.name}\")\n-    private String applicationName;\n-\n     private final Logger log = LoggerFactory.getLogger(AchievementResource.class);\n \n-    private final AuthorizationCheckService authCheckService;\n-\n     private final AchievementService achievementService;\n \n+    private final AchievementRepository achievementRepository;\n+\n     private final UserService userService;\n \n-    public AchievementResource(AuthorizationCheckService authCheckService, AchievementService achievementService, UserService userService) {\n-        this.authCheckService = authCheckService;\n+    public AchievementResource(AchievementService achievementService, AchievementRepository achievementRepository, UserService userService) {\n         this.achievementService = achievementService;\n+        this.achievementRepository = achievementRepository;\n         this.userService = userService;\n     }\n \n     /**\n-     * GET /achievements : Get all achievements for user.\n+     * GET /courses/{courseId}/achievements : Get all achievements for requesting user in given course.\n      *\n-     * @return the ResponseEntity with status 200 (OK) and with the found achievements as body\n-     */\n-    @GetMapping(\"/achievements\")\n-    @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n-    public ResponseEntity<Set<Achievement>> getAchievementsForUser() {\n-        User user = userService.getUser();\n-        log.debug(\"REST request to get achievements for user : {}\", user.getLogin());\n-        Set<Achievement> achievements = achievementService.findAllByUserId(user.getId());\n-        return ResponseEntity.ok(achievements);\n-    }\n-\n-    /**\n-     * GET /courses/{courseId}/achievements : Get all achievements for course.\n-     *\n-     * @param courseId the course to which the achievements belong to\n+     * @param courseId\n      * @return the ResponseEntity with status 200 (OK) and with the found achievements as body\n      */\n     @GetMapping(\"/courses/{courseId}/achievements\")\n     @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n-    public ResponseEntity<Set<Achievement>> getAchievementsForCourse(@PathVariable Long courseId) {\n-        log.debug(\"REST request to get achievements for course : {}\", courseId);\n-        Set<Achievement> achievements = achievementService.findAllByCourseId(courseId);\n-        return ResponseEntity.ok(achievements);\n-    }\n-\n-    /**\n-     * PUT /achievements : Updates an existing achievement.\n-     *\n-     * @param achievement the achievement to update\n-     * @return the ResponseEntity with status 200 (OK) and with body the updated achievement, or with status 500\n-     *         (Internal Server Error) if the achievement couldn't be updated\n-     */\n-    @PutMapping(\"/achievements\")\n-    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n-    public ResponseEntity<Achievement> updateAchievement(@RequestBody Achievement achievement) {\n-        log.debug(\"REST request to update Achievement : {}\", achievement);\n-\n-        if (achievement.getId() == null) {\n-            return ResponseEntity.badRequest().build();\n-        }\n-\n-        Course course = achievement.getCourse();\n+    public ResponseEntity<Set<Achievement>> getAchievementsForUserInCourse(@PathVariable Long courseId) {\n         User user = userService.getUserWithGroupsAndAuthorities();\n-        if (!authCheckService.isAtLeastInstructorInCourse(course, user)) {\n-            throw new AccessForbiddenException(\"You are not allowed to access this resource\");\n-        }\n-\n-        Achievement savedAchievement = achievementService.save(achievement);\n-        return ResponseEntity.ok().headers(HeaderUtil.createEntityUpdateAlert(applicationName, true, ENTITY_NAME, savedAchievement.getId().toString())).body(savedAchievement);\n-    }\n-\n-    /**\n-     * DELETE /achievements/:achievementId : delete the \"id\" achievement.\n-     *\n-     * @param achievementId the id of the achievement to delete\n-     * @return the ResponseEntity with status 200 (OK)\n-     */\n-    @DeleteMapping(\"/achievements/{achievementId}\")\n-    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n-    public ResponseEntity<Void> deleteAchievement(@PathVariable long achievementId) {\n-        log.info(\"REST request to delete Achievement : {}\", achievementId);\n-        User user = userService.getUserWithGroupsAndAuthorities();\n-        Optional<Achievement> optionalAchievement = achievementService.findById(achievementId);\n-        if (optionalAchievement.isEmpty()) {\n-            return ResponseEntity.notFound().build();\n-        }\n-        Achievement achievement = optionalAchievement.get();\n-        Course course = achievement.getCourse();\n-        if (!authCheckService.isAtLeastInstructorInCourse(course, user)) {\n-            throw new AccessForbiddenException(\"You are not allowed to access this resource\");\n-        }\n-\n-        log.info(\"User \" + user.getLogin() + \" has requested to delete the achievement {}\", achievement.getId());\n-        achievementService.delete(achievement);\n-        return ResponseEntity.ok().headers(HeaderUtil.createEntityDeletionAlert(applicationName, true, ENTITY_NAME, achievement.getId().toString())).build();\n+        log.debug(\"REST request to get achievements for user : {} in course : {}\", user.getLogin(), courseId);\n+        Set<Achievement> achievements = achievementRepository.findAllByUserIdAndCourseId(user.getId(), courseId);\n+        achievementService.prepareForClient(achievements);\n+        return ResponseEntity.ok(achievements);\n     }\n-\n }\n", "next_change": {"commit": "53c319a21a4053a341e9b24da4987de5abfb656d", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\nindex 2367bc01f2b..7789b9e0412 100644\n--- a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n+++ b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n", "chunk": "@@ -46,7 +42,7 @@ public class AchievementResource {\n     public ResponseEntity<Set<Achievement>> getAchievementsForUserInCourse(@PathVariable Long courseId) {\n         User user = userService.getUserWithGroupsAndAuthorities();\n         log.debug(\"REST request to get achievements for user : {} in course : {}\", user.getLogin(), courseId);\n-        Set<Achievement> achievements = achievementRepository.findAllByUserIdAndCourseId(user.getId(), courseId);\n+        Set<Achievement> achievements = achievementService.findAllByUserIdAndCourseId(user.getId(), courseId);\n         achievementService.prepareForClient(achievements);\n         return ResponseEntity.ok(achievements);\n     }\n", "next_change": {"commit": "d85f5f34a571777d2b7558382f25bf6bc7434049", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\nindex 7789b9e0412..efa5f0e0668 100644\n--- a/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n+++ b/src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java\n", "chunk": "@@ -20,30 +28,108 @@ import de.tum.in.www1.artemis.service.UserService;\n @RequestMapping(\"/api\")\n public class AchievementResource {\n \n+    private static final String ENTITY_NAME = \"achievement\";\n+\n+    @Value(\"${jhipster.clientApp.name}\")\n+    private String applicationName;\n+\n     private final Logger log = LoggerFactory.getLogger(AchievementResource.class);\n \n+    private final AuthorizationCheckService authCheckService;\n+\n     private final AchievementService achievementService;\n \n     private final UserService userService;\n \n-    public AchievementResource(AchievementService achievementService, UserService userService) {\n+    private final AchievementRepository achievementRepository;\n+\n+    public AchievementResource(AuthorizationCheckService authCheckService, AchievementService achievementService, UserService userService,\n+            AchievementRepository achievementRepository) {\n+        this.authCheckService = authCheckService;\n         this.achievementService = achievementService;\n         this.userService = userService;\n+        this.achievementRepository = achievementRepository;\n     }\n \n     /**\n-     * GET /courses/{courseId}/achievements : Get all achievements for requesting user in given course.\n+     * GET /achievements : Get all achievements for user.\n      *\n-     * @param courseId\n+     * @return the ResponseEntity with status 200 (OK) and with the found achievements as body\n+     */\n+    @GetMapping(\"/achievements\")\n+    @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Set<Achievement>> getAchievementsForUser() {\n+        User user = userService.getUser();\n+        log.debug(\"REST request to get achievements for user : {}\", user.getLogin());\n+        Set<Achievement> achievements = achievementService.findAllForUser(user.getId());\n+        return ResponseEntity.ok(achievements);\n+    }\n+\n+    /**\n+     * GET /courses/{courseId}/achievements : Get all achievements for course.\n+     *\n+     * @param courseId the course to which the achievements belong to\n      * @return the ResponseEntity with status 200 (OK) and with the found achievements as body\n      */\n     @GetMapping(\"/courses/{courseId}/achievements\")\n     @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n-    public ResponseEntity<Set<Achievement>> getAchievementsForUserInCourse(@PathVariable Long courseId) {\n-        User user = userService.getUserWithGroupsAndAuthorities();\n-        log.debug(\"REST request to get achievements for user : {} in course : {}\", user.getLogin(), courseId);\n-        Set<Achievement> achievements = achievementService.findAllByUserIdAndCourseId(user.getId(), courseId);\n-        achievementService.prepareForClient(achievements);\n+    public ResponseEntity<Set<Achievement>> getAchievementsForCourse(@PathVariable Long courseId) {\n+        log.debug(\"REST request to get achievements for course : {}\", courseId);\n+        Set<Achievement> achievements = achievementService.findAllForCourse(courseId);\n         return ResponseEntity.ok(achievements);\n     }\n+\n+    /**\n+     * PUT /achievements : Updates an existing achievement.\n+     *\n+     * @param achievement the achievement to update\n+     * @return the ResponseEntity with status 200 (OK) and with body the updated achievement, or with status 500\n+     *         (Internal Server Error) if the achievement couldn't be updated\n+     */\n+    @PutMapping(\"/achievements\")\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Achievement> updateAchievement(@RequestBody Achievement achievement) {\n+        log.debug(\"REST request to update Achievement : {}\", achievement);\n+\n+        if (achievement.getId() == null) {\n+            return ResponseEntity.badRequest().build();\n+        }\n+\n+        Course course = achievement.getCourse();\n+        User user = userService.getUserWithGroupsAndAuthorities();\n+        if (!authCheckService.isAtLeastInstructorInCourse(course, user)) {\n+            throw new AccessForbiddenException(\"You are not allowed to access this resource\");\n+        }\n+\n+        Achievement savedAchievement = achievementRepository.save(achievement);\n+        return ResponseEntity.ok().headers(HeaderUtil.createEntityUpdateAlert(applicationName, true, ENTITY_NAME, savedAchievement.getId().toString())).body(savedAchievement);\n+    }\n+\n+    /**\n+     * DELETE /achievements/:achievementId : delete the \"id\" achievement.\n+     *\n+     * @param achievementId the id of the achievement to delete\n+     * @return the ResponseEntity with status 200 (OK)\n+     */\n+    @DeleteMapping(\"/achievements/{achievementId}\")\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    @Transactional\n+    public ResponseEntity<Void> deleteAchievement(@PathVariable long achievementId) {\n+        log.info(\"REST request to delete Achievement : {}\", achievementId);\n+        User user = userService.getUserWithGroupsAndAuthorities();\n+        Optional<Achievement> optionalAchievement = achievementService.findById(achievementId);\n+        if (optionalAchievement.isEmpty()) {\n+            return ResponseEntity.notFound().build();\n+        }\n+        Achievement achievement = optionalAchievement.get();\n+        Course course = achievement.getCourse();\n+        if (!authCheckService.isAtLeastInstructorInCourse(course, user)) {\n+            throw new AccessForbiddenException(\"You are not allowed to access this resource\");\n+        }\n+\n+        log.info(\"User \" + user.getLogin() + \" has requested to delete the achievement {}\", achievement.getId());\n+        achievementService.delete(achievement);\n+        return ResponseEntity.ok().headers(HeaderUtil.createEntityDeletionAlert(applicationName, true, ENTITY_NAME, achievement.getId().toString())).build();\n+    }\n+\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDk0Mjc2Nw==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r480942767", "body": "When you save new entities to the database, they should **not** contain an id already!", "bodyText": "When you save new entities to the database, they should not contain an id already!", "bodyHTML": "<p dir=\"auto\">When you save new entities to the database, they should <strong>not</strong> contain an id already!</p>", "author": "krusche", "createdAt": "2020-09-01T07:57:00Z", "path": "src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package de.tum.in.www1.artemis;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import de.tum.in.www1.artemis.domain.Achievement;\n+import de.tum.in.www1.artemis.domain.Course;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.domain.enumeration.Rank;\n+import de.tum.in.www1.artemis.repository.AchievementRepository;\n+import de.tum.in.www1.artemis.repository.CourseRepository;\n+import de.tum.in.www1.artemis.repository.UserRepository;\n+import de.tum.in.www1.artemis.service.AchievementService;\n+import de.tum.in.www1.artemis.util.DatabaseUtilService;\n+import de.tum.in.www1.artemis.util.RequestUtilService;\n+\n+public class AchievementIntegrationTest extends AbstractSpringIntegrationBambooBitbucketJiraTest {\n+\n+    @Autowired\n+    DatabaseUtilService database;\n+\n+    @Autowired\n+    RequestUtilService request;\n+\n+    @Autowired\n+    AchievementService achievementService;\n+\n+    @Autowired\n+    AchievementRepository achievementRepository;\n+\n+    @Autowired\n+    UserRepository userRepository;\n+\n+    @Autowired\n+    CourseRepository courseRepository;\n+\n+    private User student;\n+\n+    private User instructor;\n+\n+    private Course course;\n+\n+    private Achievement achievement;\n+\n+    @BeforeEach\n+    public void initTestCase() {\n+        var users = database.addUsers(1, 0, 1);\n+        student = users.get(0);\n+        instructor = users.get(1);\n+        instructor.setGroups(new HashSet<>(Arrays.asList(\"instructor\")));\n+        course = database.addEmptyCourse();\n+\n+        achievement = new Achievement();\n+        achievement.setId(1L);", "originalCommit": "38f60a94a755877c7b502fda4cd54fca2ba8cb18", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI3MTUyOA==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r481271528", "bodyText": "removed", "author": "balazs-czopf", "createdAt": "2020-09-01T16:18:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDk0Mjc2Nw=="}], "type": "inlineReview", "revised_code": {"commit": "6aa68b0ab7a071fa631c7c72cdb8ea02ccf15a39", "changed_code": [{"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\nindex be74f5c110f..0f3ea1379ab 100644\n--- a/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\n", "chunk": "@@ -58,17 +67,18 @@ public class AchievementIntegrationTest extends AbstractSpringIntegrationBambooB\n         student = users.get(0);\n         instructor = users.get(1);\n         instructor.setGroups(new HashSet<>(Arrays.asList(\"instructor\")));\n-        course = database.addEmptyCourse();\n-\n-        achievement = new Achievement();\n-        achievement.setId(1L);\n-        achievement.setTitle(\"Test Achievement\");\n-        achievement.setDescription(\"Create correct relations\");\n-        achievement.setIcon(\"test-icon\");\n-        achievement.setRank(Rank.UNRANKED);\n-        achievement.setCourse(course);\n-\n-        achievement = achievementRepository.save(achievement);\n+        first_course = database.addCourseWithModelingAndTextAndFileUploadExercise();\n+        second_course = database.addCourseWithModelingAndTextAndFileUploadExercise();\n+        first_achievement = achievementService.create(\"Test Achievement\", \"Create correct relations\", \"test-icon\", AchievementRank.UNRANKED, first_course);\n+        second_achievement = achievementService.create(\"Test Achievement\", \"Get 100 percent test coverage\", \"test-icon\", AchievementRank.GOLD, first_course);\n+        third_achievement = achievementService.create(\"Test Achievement\", \"Get PR ready to be merged\", \"test-icon\", AchievementRank.SILVER, second_course);\n+\n+        first_exercise = first_course.getExercises().stream().findFirst().get();\n+        first_achievement.setExercise(first_exercise);\n+        third_achievement.setExercise(first_exercise);\n+\n+        achievementService.save(first_achievement);\n+        achievementService.save(third_achievement);\n     }\n \n     @AfterEach\n", "next_change": {"commit": "d6f4c8861d530ee606cd33ce9bea33c51e4f2728", "changed_code": [{"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\nindex 0f3ea1379ab..3b8af6aa4c6 100644\n--- a/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\n", "chunk": "@@ -69,13 +69,11 @@ public class AchievementIntegrationTest extends AbstractSpringIntegrationBambooB\n         instructor.setGroups(new HashSet<>(Arrays.asList(\"instructor\")));\n         first_course = database.addCourseWithModelingAndTextAndFileUploadExercise();\n         second_course = database.addCourseWithModelingAndTextAndFileUploadExercise();\n-        first_achievement = achievementService.create(\"Test Achievement\", \"Create correct relations\", \"test-icon\", AchievementRank.UNRANKED, first_course);\n-        second_achievement = achievementService.create(\"Test Achievement\", \"Get 100 percent test coverage\", \"test-icon\", AchievementRank.GOLD, first_course);\n-        third_achievement = achievementService.create(\"Test Achievement\", \"Get PR ready to be merged\", \"test-icon\", AchievementRank.SILVER, second_course);\n-\n         first_exercise = first_course.getExercises().stream().findFirst().get();\n-        first_achievement.setExercise(first_exercise);\n-        third_achievement.setExercise(first_exercise);\n+\n+        first_achievement = achievementService.create(\"Test Achievement\", \"Create correct relations\", \"test-icon\", AchievementRank.UNRANKED, first_course, first_exercise);\n+        second_achievement = achievementService.create(\"Test Achievement\", \"Get 100 percent test coverage\", \"test-icon\", AchievementRank.GOLD, first_course, null);\n+        third_achievement = achievementService.create(\"Test Achievement\", \"Get PR ready to be merged\", \"test-icon\", AchievementRank.SILVER, second_course, first_exercise);\n \n         achievementService.save(first_achievement);\n         achievementService.save(third_achievement);\n", "next_change": {"commit": "c0a4b8df894787c7f22b172ecf3a3a9ce1ff398d", "changed_code": [{"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\nindex 3b8af6aa4c6..4854ad13159 100644\n--- a/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\n", "chunk": "@@ -71,12 +76,12 @@ public class AchievementIntegrationTest extends AbstractSpringIntegrationBambooB\n         second_course = database.addCourseWithModelingAndTextAndFileUploadExercise();\n         first_exercise = first_course.getExercises().stream().findFirst().get();\n \n-        first_achievement = achievementService.create(\"Test Achievement\", \"Create correct relations\", \"test-icon\", AchievementRank.UNRANKED, first_course, first_exercise);\n-        second_achievement = achievementService.create(\"Test Achievement\", \"Get 100 percent test coverage\", \"test-icon\", AchievementRank.GOLD, first_course, null);\n-        third_achievement = achievementService.create(\"Test Achievement\", \"Get PR ready to be merged\", \"test-icon\", AchievementRank.SILVER, second_course, first_exercise);\n-\n-        achievementService.save(first_achievement);\n-        achievementService.save(third_achievement);\n+        first_achievement = achievementRepository.save(\n+                new Achievement(\"Test Achievement\", \"Create correct relations\", \"test-icon\", AchievementRank.UNRANKED, AchievementType.PROGRESS, first_course, first_exercise));\n+        second_achievement = achievementRepository\n+                .save(new Achievement(\"Test Achievement\", \"Get 100 percent test coverage\", \"test-icon\", AchievementRank.GOLD, AchievementType.POINT, first_course, null));\n+        third_achievement = achievementRepository\n+                .save(new Achievement(\"Test Achievement\", \"Get PR ready to be merged\", \"test-icon\", AchievementRank.SILVER, AchievementType.TIME, second_course, first_exercise));\n     }\n \n     @AfterEach\n", "next_change": {"commit": "0e82242b97cdbc112e1d3a883cb2281d462dd405", "changed_code": [{"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\nindex 4854ad13159..3b8af6aa4c6 100644\n--- a/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\n", "chunk": "@@ -76,12 +71,12 @@ public class AchievementIntegrationTest extends AbstractSpringIntegrationBambooB\n         second_course = database.addCourseWithModelingAndTextAndFileUploadExercise();\n         first_exercise = first_course.getExercises().stream().findFirst().get();\n \n-        first_achievement = achievementRepository.save(\n-                new Achievement(\"Test Achievement\", \"Create correct relations\", \"test-icon\", AchievementRank.UNRANKED, AchievementType.PROGRESS, first_course, first_exercise));\n-        second_achievement = achievementRepository\n-                .save(new Achievement(\"Test Achievement\", \"Get 100 percent test coverage\", \"test-icon\", AchievementRank.GOLD, AchievementType.POINT, first_course, null));\n-        third_achievement = achievementRepository\n-                .save(new Achievement(\"Test Achievement\", \"Get PR ready to be merged\", \"test-icon\", AchievementRank.SILVER, AchievementType.TIME, second_course, first_exercise));\n+        first_achievement = achievementService.create(\"Test Achievement\", \"Create correct relations\", \"test-icon\", AchievementRank.UNRANKED, first_course, first_exercise);\n+        second_achievement = achievementService.create(\"Test Achievement\", \"Get 100 percent test coverage\", \"test-icon\", AchievementRank.GOLD, first_course, null);\n+        third_achievement = achievementService.create(\"Test Achievement\", \"Get PR ready to be merged\", \"test-icon\", AchievementRank.SILVER, second_course, first_exercise);\n+\n+        achievementService.save(first_achievement);\n+        achievementService.save(third_achievement);\n     }\n \n     @AfterEach\n", "next_change": {"commit": "c7425c9af8e7e15cd22a3771029b103c6d79608f", "changed_code": [{"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\nindex 3b8af6aa4c6..4854ad13159 100644\n--- a/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\n", "chunk": "@@ -71,12 +76,12 @@ public class AchievementIntegrationTest extends AbstractSpringIntegrationBambooB\n         second_course = database.addCourseWithModelingAndTextAndFileUploadExercise();\n         first_exercise = first_course.getExercises().stream().findFirst().get();\n \n-        first_achievement = achievementService.create(\"Test Achievement\", \"Create correct relations\", \"test-icon\", AchievementRank.UNRANKED, first_course, first_exercise);\n-        second_achievement = achievementService.create(\"Test Achievement\", \"Get 100 percent test coverage\", \"test-icon\", AchievementRank.GOLD, first_course, null);\n-        third_achievement = achievementService.create(\"Test Achievement\", \"Get PR ready to be merged\", \"test-icon\", AchievementRank.SILVER, second_course, first_exercise);\n-\n-        achievementService.save(first_achievement);\n-        achievementService.save(third_achievement);\n+        first_achievement = achievementRepository.save(\n+                new Achievement(\"Test Achievement\", \"Create correct relations\", \"test-icon\", AchievementRank.UNRANKED, AchievementType.PROGRESS, first_course, first_exercise));\n+        second_achievement = achievementRepository\n+                .save(new Achievement(\"Test Achievement\", \"Get 100 percent test coverage\", \"test-icon\", AchievementRank.GOLD, AchievementType.POINT, first_course, null));\n+        third_achievement = achievementRepository\n+                .save(new Achievement(\"Test Achievement\", \"Get PR ready to be merged\", \"test-icon\", AchievementRank.SILVER, AchievementType.TIME, second_course, first_exercise));\n     }\n \n     @AfterEach\n", "next_change": {"commit": "28ed83395042c9e9faddf43940bd9f3c221684b3", "changed_code": [{"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\nindex 4854ad13159..3b8af6aa4c6 100644\n--- a/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\n", "chunk": "@@ -76,12 +71,12 @@ public class AchievementIntegrationTest extends AbstractSpringIntegrationBambooB\n         second_course = database.addCourseWithModelingAndTextAndFileUploadExercise();\n         first_exercise = first_course.getExercises().stream().findFirst().get();\n \n-        first_achievement = achievementRepository.save(\n-                new Achievement(\"Test Achievement\", \"Create correct relations\", \"test-icon\", AchievementRank.UNRANKED, AchievementType.PROGRESS, first_course, first_exercise));\n-        second_achievement = achievementRepository\n-                .save(new Achievement(\"Test Achievement\", \"Get 100 percent test coverage\", \"test-icon\", AchievementRank.GOLD, AchievementType.POINT, first_course, null));\n-        third_achievement = achievementRepository\n-                .save(new Achievement(\"Test Achievement\", \"Get PR ready to be merged\", \"test-icon\", AchievementRank.SILVER, AchievementType.TIME, second_course, first_exercise));\n+        first_achievement = achievementService.create(\"Test Achievement\", \"Create correct relations\", \"test-icon\", AchievementRank.UNRANKED, first_course, first_exercise);\n+        second_achievement = achievementService.create(\"Test Achievement\", \"Get 100 percent test coverage\", \"test-icon\", AchievementRank.GOLD, first_course, null);\n+        third_achievement = achievementService.create(\"Test Achievement\", \"Get PR ready to be merged\", \"test-icon\", AchievementRank.SILVER, second_course, first_exercise);\n+\n+        achievementService.save(first_achievement);\n+        achievementService.save(third_achievement);\n     }\n \n     @AfterEach\n", "next_change": {"commit": "c3317e06a092c8dbee21b52de380addd92f73b3f", "changed_code": [{"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\nindex 3b8af6aa4c6..4854ad13159 100644\n--- a/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\n", "chunk": "@@ -71,12 +76,12 @@ public class AchievementIntegrationTest extends AbstractSpringIntegrationBambooB\n         second_course = database.addCourseWithModelingAndTextAndFileUploadExercise();\n         first_exercise = first_course.getExercises().stream().findFirst().get();\n \n-        first_achievement = achievementService.create(\"Test Achievement\", \"Create correct relations\", \"test-icon\", AchievementRank.UNRANKED, first_course, first_exercise);\n-        second_achievement = achievementService.create(\"Test Achievement\", \"Get 100 percent test coverage\", \"test-icon\", AchievementRank.GOLD, first_course, null);\n-        third_achievement = achievementService.create(\"Test Achievement\", \"Get PR ready to be merged\", \"test-icon\", AchievementRank.SILVER, second_course, first_exercise);\n-\n-        achievementService.save(first_achievement);\n-        achievementService.save(third_achievement);\n+        first_achievement = achievementRepository.save(\n+                new Achievement(\"Test Achievement\", \"Create correct relations\", \"test-icon\", AchievementRank.UNRANKED, AchievementType.PROGRESS, first_course, first_exercise));\n+        second_achievement = achievementRepository\n+                .save(new Achievement(\"Test Achievement\", \"Get 100 percent test coverage\", \"test-icon\", AchievementRank.GOLD, AchievementType.POINT, first_course, null));\n+        third_achievement = achievementRepository\n+                .save(new Achievement(\"Test Achievement\", \"Get PR ready to be merged\", \"test-icon\", AchievementRank.SILVER, AchievementType.TIME, second_course, first_exercise));\n     }\n \n     @AfterEach\n", "next_change": {"commit": "508e8977abe4d1e8ec1c8a817fe9bd0f91f6bb8a", "changed_code": [{"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\nindex 4854ad13159..3b8af6aa4c6 100644\n--- a/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\n", "chunk": "@@ -76,12 +71,12 @@ public class AchievementIntegrationTest extends AbstractSpringIntegrationBambooB\n         second_course = database.addCourseWithModelingAndTextAndFileUploadExercise();\n         first_exercise = first_course.getExercises().stream().findFirst().get();\n \n-        first_achievement = achievementRepository.save(\n-                new Achievement(\"Test Achievement\", \"Create correct relations\", \"test-icon\", AchievementRank.UNRANKED, AchievementType.PROGRESS, first_course, first_exercise));\n-        second_achievement = achievementRepository\n-                .save(new Achievement(\"Test Achievement\", \"Get 100 percent test coverage\", \"test-icon\", AchievementRank.GOLD, AchievementType.POINT, first_course, null));\n-        third_achievement = achievementRepository\n-                .save(new Achievement(\"Test Achievement\", \"Get PR ready to be merged\", \"test-icon\", AchievementRank.SILVER, AchievementType.TIME, second_course, first_exercise));\n+        first_achievement = achievementService.create(\"Test Achievement\", \"Create correct relations\", \"test-icon\", AchievementRank.UNRANKED, first_course, first_exercise);\n+        second_achievement = achievementService.create(\"Test Achievement\", \"Get 100 percent test coverage\", \"test-icon\", AchievementRank.GOLD, first_course, null);\n+        third_achievement = achievementService.create(\"Test Achievement\", \"Get PR ready to be merged\", \"test-icon\", AchievementRank.SILVER, second_course, first_exercise);\n+\n+        achievementService.save(first_achievement);\n+        achievementService.save(third_achievement);\n     }\n \n     @AfterEach\n", "next_change": {"commit": "d3d2ea3ec69fdc3185bac66822f03c4a1bf0b6b1", "changed_code": [{"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\nindex 3b8af6aa4c6..4854ad13159 100644\n--- a/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\n", "chunk": "@@ -71,12 +76,12 @@ public class AchievementIntegrationTest extends AbstractSpringIntegrationBambooB\n         second_course = database.addCourseWithModelingAndTextAndFileUploadExercise();\n         first_exercise = first_course.getExercises().stream().findFirst().get();\n \n-        first_achievement = achievementService.create(\"Test Achievement\", \"Create correct relations\", \"test-icon\", AchievementRank.UNRANKED, first_course, first_exercise);\n-        second_achievement = achievementService.create(\"Test Achievement\", \"Get 100 percent test coverage\", \"test-icon\", AchievementRank.GOLD, first_course, null);\n-        third_achievement = achievementService.create(\"Test Achievement\", \"Get PR ready to be merged\", \"test-icon\", AchievementRank.SILVER, second_course, first_exercise);\n-\n-        achievementService.save(first_achievement);\n-        achievementService.save(third_achievement);\n+        first_achievement = achievementRepository.save(\n+                new Achievement(\"Test Achievement\", \"Create correct relations\", \"test-icon\", AchievementRank.UNRANKED, AchievementType.PROGRESS, first_course, first_exercise));\n+        second_achievement = achievementRepository\n+                .save(new Achievement(\"Test Achievement\", \"Get 100 percent test coverage\", \"test-icon\", AchievementRank.GOLD, AchievementType.POINT, first_course, null));\n+        third_achievement = achievementRepository\n+                .save(new Achievement(\"Test Achievement\", \"Get PR ready to be merged\", \"test-icon\", AchievementRank.SILVER, AchievementType.TIME, second_course, first_exercise));\n     }\n \n     @AfterEach\n", "next_change": {"commit": "64778c859b7f2d14015c50aedae62db4c98bcee7", "changed_code": [{"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\nindex 4854ad13159..3b8af6aa4c6 100644\n--- a/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\n", "chunk": "@@ -76,12 +71,12 @@ public class AchievementIntegrationTest extends AbstractSpringIntegrationBambooB\n         second_course = database.addCourseWithModelingAndTextAndFileUploadExercise();\n         first_exercise = first_course.getExercises().stream().findFirst().get();\n \n-        first_achievement = achievementRepository.save(\n-                new Achievement(\"Test Achievement\", \"Create correct relations\", \"test-icon\", AchievementRank.UNRANKED, AchievementType.PROGRESS, first_course, first_exercise));\n-        second_achievement = achievementRepository\n-                .save(new Achievement(\"Test Achievement\", \"Get 100 percent test coverage\", \"test-icon\", AchievementRank.GOLD, AchievementType.POINT, first_course, null));\n-        third_achievement = achievementRepository\n-                .save(new Achievement(\"Test Achievement\", \"Get PR ready to be merged\", \"test-icon\", AchievementRank.SILVER, AchievementType.TIME, second_course, first_exercise));\n+        first_achievement = achievementService.create(\"Test Achievement\", \"Create correct relations\", \"test-icon\", AchievementRank.UNRANKED, first_course, first_exercise);\n+        second_achievement = achievementService.create(\"Test Achievement\", \"Get 100 percent test coverage\", \"test-icon\", AchievementRank.GOLD, first_course, null);\n+        third_achievement = achievementService.create(\"Test Achievement\", \"Get PR ready to be merged\", \"test-icon\", AchievementRank.SILVER, second_course, first_exercise);\n+\n+        achievementService.save(first_achievement);\n+        achievementService.save(third_achievement);\n     }\n \n     @AfterEach\n", "next_change": {"commit": "8d5bfc049d9e75323290b069e7343df6fc579ee7", "changed_code": [{"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\nindex 3b8af6aa4c6..6d5c48c239a 100644\n--- a/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\n", "chunk": "@@ -67,16 +65,15 @@ public class AchievementIntegrationTest extends AbstractSpringIntegrationBambooB\n         student = users.get(0);\n         instructor = users.get(1);\n         instructor.setGroups(new HashSet<>(Arrays.asList(\"instructor\")));\n-        first_course = database.addCourseWithModelingAndTextAndFileUploadExercise();\n-        second_course = database.addCourseWithModelingAndTextAndFileUploadExercise();\n-        first_exercise = first_course.getExercises().stream().findFirst().get();\n-\n-        first_achievement = achievementService.create(\"Test Achievement\", \"Create correct relations\", \"test-icon\", AchievementRank.UNRANKED, first_course, first_exercise);\n-        second_achievement = achievementService.create(\"Test Achievement\", \"Get 100 percent test coverage\", \"test-icon\", AchievementRank.GOLD, first_course, null);\n-        third_achievement = achievementService.create(\"Test Achievement\", \"Get PR ready to be merged\", \"test-icon\", AchievementRank.SILVER, second_course, first_exercise);\n-\n-        achievementService.save(first_achievement);\n-        achievementService.save(third_achievement);\n+        firstCourse = database.addCourseWithModelingAndTextAndFileUploadExercise();\n+        firstCourse.setHasAchievements(true);\n+        courseRepository.save(firstCourse);\n+        secondCourse = database.addCourseWithModelingAndTextAndFileUploadExercise();\n+        firstExercise = firstCourse.getExercises().stream().findFirst().get();\n+\n+        achievementService.generateForCourse(firstCourse);\n+        achievementService.generateForCourse(secondCourse);\n+        achievementService.generateForExercise(firstExercise);\n     }\n \n     @AfterEach\n", "next_change": {"commit": "7a5de1a37353eb19f93ef49666bba352198834cb", "changed_code": [{"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\nindex 6d5c48c239a..3b8af6aa4c6 100644\n--- a/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\n", "chunk": "@@ -65,15 +67,16 @@ public class AchievementIntegrationTest extends AbstractSpringIntegrationBambooB\n         student = users.get(0);\n         instructor = users.get(1);\n         instructor.setGroups(new HashSet<>(Arrays.asList(\"instructor\")));\n-        firstCourse = database.addCourseWithModelingAndTextAndFileUploadExercise();\n-        firstCourse.setHasAchievements(true);\n-        courseRepository.save(firstCourse);\n-        secondCourse = database.addCourseWithModelingAndTextAndFileUploadExercise();\n-        firstExercise = firstCourse.getExercises().stream().findFirst().get();\n-\n-        achievementService.generateForCourse(firstCourse);\n-        achievementService.generateForCourse(secondCourse);\n-        achievementService.generateForExercise(firstExercise);\n+        first_course = database.addCourseWithModelingAndTextAndFileUploadExercise();\n+        second_course = database.addCourseWithModelingAndTextAndFileUploadExercise();\n+        first_exercise = first_course.getExercises().stream().findFirst().get();\n+\n+        first_achievement = achievementService.create(\"Test Achievement\", \"Create correct relations\", \"test-icon\", AchievementRank.UNRANKED, first_course, first_exercise);\n+        second_achievement = achievementService.create(\"Test Achievement\", \"Get 100 percent test coverage\", \"test-icon\", AchievementRank.GOLD, first_course, null);\n+        third_achievement = achievementService.create(\"Test Achievement\", \"Get PR ready to be merged\", \"test-icon\", AchievementRank.SILVER, second_course, first_exercise);\n+\n+        achievementService.save(first_achievement);\n+        achievementService.save(third_achievement);\n     }\n \n     @AfterEach\n", "next_change": {"commit": "116151629d403403ee9b750c30c182f44f70e233", "changed_code": [{"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\nindex 3b8af6aa4c6..de43c5aeb29 100644\n--- a/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\n", "chunk": "@@ -67,16 +65,15 @@ public class AchievementIntegrationTest extends AbstractSpringIntegrationBambooB\n         student = users.get(0);\n         instructor = users.get(1);\n         instructor.setGroups(new HashSet<>(Arrays.asList(\"instructor\")));\n-        first_course = database.addCourseWithModelingAndTextAndFileUploadExercise();\n-        second_course = database.addCourseWithModelingAndTextAndFileUploadExercise();\n-        first_exercise = first_course.getExercises().stream().findFirst().get();\n-\n-        first_achievement = achievementService.create(\"Test Achievement\", \"Create correct relations\", \"test-icon\", AchievementRank.UNRANKED, first_course, first_exercise);\n-        second_achievement = achievementService.create(\"Test Achievement\", \"Get 100 percent test coverage\", \"test-icon\", AchievementRank.GOLD, first_course, null);\n-        third_achievement = achievementService.create(\"Test Achievement\", \"Get PR ready to be merged\", \"test-icon\", AchievementRank.SILVER, second_course, first_exercise);\n-\n-        achievementService.save(first_achievement);\n-        achievementService.save(third_achievement);\n+        firstCourse = database.addCourseWithModelingAndTextAndFileUploadExercise();\n+        firstCourse.setHasAchievements(true);\n+        courseRepository.save(firstCourse);\n+        secondCourse = database.addCourseWithModelingAndTextAndFileUploadExercise();\n+        firstExercise = firstCourse.getExercises().stream().findFirst().get();\n+\n+        achievementService.generateForCourse(firstCourse);\n+        achievementService.generateForCourse(secondCourse);\n+        achievementService.generateForExercise(firstExercise);\n     }\n \n     @AfterEach\n", "next_change": {"commit": "00ec5a4f4dc7f9eeeb161db5cd1c2f7e1a402c6b", "changed_code": [{"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\nindex de43c5aeb29..cada9d8e796 100644\n--- a/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\n", "chunk": "@@ -73,7 +73,7 @@ public class AchievementIntegrationTest extends AbstractSpringIntegrationBambooB\n \n         achievementService.generateForCourse(firstCourse);\n         achievementService.generateForCourse(secondCourse);\n-        achievementService.generateForExercise(firstExercise);\n+        achievementService.generateForExercise(firstCourse, firstExercise);\n     }\n \n     @AfterEach\n", "next_change": {"commit": "d85f5f34a571777d2b7558382f25bf6bc7434049", "changed_code": [{"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\nindex cada9d8e796..be74f5c110f 100644\n--- a/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\n", "chunk": "@@ -65,15 +58,17 @@ public class AchievementIntegrationTest extends AbstractSpringIntegrationBambooB\n         student = users.get(0);\n         instructor = users.get(1);\n         instructor.setGroups(new HashSet<>(Arrays.asList(\"instructor\")));\n-        firstCourse = database.addCourseWithModelingAndTextAndFileUploadExercise();\n-        firstCourse.setHasAchievements(true);\n-        courseRepository.save(firstCourse);\n-        secondCourse = database.addCourseWithModelingAndTextAndFileUploadExercise();\n-        firstExercise = firstCourse.getExercises().stream().findFirst().get();\n-\n-        achievementService.generateForCourse(firstCourse);\n-        achievementService.generateForCourse(secondCourse);\n-        achievementService.generateForExercise(firstCourse, firstExercise);\n+        course = database.addEmptyCourse();\n+\n+        achievement = new Achievement();\n+        achievement.setId(1L);\n+        achievement.setTitle(\"Test Achievement\");\n+        achievement.setDescription(\"Create correct relations\");\n+        achievement.setIcon(\"test-icon\");\n+        achievement.setRank(Rank.UNRANKED);\n+        achievement.setCourse(course);\n+\n+        achievement = achievementRepository.save(achievement);\n     }\n \n     @AfterEach\n", "next_change": {"commit": "fd13e3d27e731c1b8d1a2dea0e1c43ae2468034b", "changed_code": [{"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\nindex be74f5c110f..57b7dc2f9ee 100644\n--- a/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\n", "chunk": "@@ -58,17 +67,18 @@ public class AchievementIntegrationTest extends AbstractSpringIntegrationBambooB\n         student = users.get(0);\n         instructor = users.get(1);\n         instructor.setGroups(new HashSet<>(Arrays.asList(\"instructor\")));\n-        course = database.addEmptyCourse();\n-\n-        achievement = new Achievement();\n-        achievement.setId(1L);\n-        achievement.setTitle(\"Test Achievement\");\n-        achievement.setDescription(\"Create correct relations\");\n-        achievement.setIcon(\"test-icon\");\n-        achievement.setRank(Rank.UNRANKED);\n-        achievement.setCourse(course);\n-\n-        achievement = achievementRepository.save(achievement);\n+        first_course = database.addCourseWithModelingAndTextAndFileUploadExercise();\n+        second_course = database.addCourseWithModelingAndTextAndFileUploadExercise();\n+        first_achievement = achievementService.create(\"Test Achievement\", \"Create correct relations\", \"test-icon\", Rank.UNRANKED, first_course);\n+        second_achievement = achievementService.create(\"Test Achievement\", \"Get 100 percent test coverage\", \"test-icon\", Rank.GOLD, first_course);\n+        third_achievement = achievementService.create(\"Test Achievement\", \"Get PR ready to be merged\", \"test-icon\", Rank.SILVER, second_course);\n+\n+        first_exercise = first_course.getExercises().stream().findFirst().get();\n+        first_achievement.setExercise(first_exercise);\n+        third_achievement.setExercise(first_exercise);\n+\n+        achievementService.save(first_achievement);\n+        achievementService.save(third_achievement);\n     }\n \n     @AfterEach\n", "next_change": null}]}}, {"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\nindex cada9d8e796..be74f5c110f 100644\n--- a/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\n", "chunk": "@@ -82,53 +77,84 @@ public class AchievementIntegrationTest extends AbstractSpringIntegrationBambooB\n     }\n \n     @Test\n-    @WithMockUser(value = \"student1\", roles = \"ADMIN\")\n+    public void testManyToManyRelationToUser() {\n+        assertThat(student.getAchievements().size()).as(\"Number of achievements for user should be 0\").isEqualTo(0);\n+\n+        student.addAchievement(achievement);\n+        assertThat(student.getAchievements().size()).as(\"Number of achievements for user should be 1\").isEqualTo(1);\n+        assertThat(student.getAchievements().contains(achievement)).as(\"User has correct achievement\").isTrue();\n+        assertThat(achievement.getUsers().size()).as(\"Number of users for achievement should be 1\").isEqualTo(1);\n+        assertThat(achievement.getUsers().contains(student)).as(\"Achievement has correct user\").isTrue();\n+\n+        student.removeAchievement(achievement);\n+        assertThat(student.getAchievements().size()).as(\"Number of achievements for user should be 0\").isEqualTo(0);\n+        assertThat(student.getAchievements().contains(achievement)).as(\"User does not have removed achievement\").isFalse();\n+        assertThat(achievement.getUsers().size()).as(\"Number of users for achievement should be 0\").isEqualTo(0);\n+        assertThat(achievement.getUsers().contains(student)).as(\"Achievement does not have incorrect user\").isFalse();\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"USER\")\n     public void testDeleteUser() throws Exception {\n-        initTest();\n-        request.delete(\"/api/users/\" + student.getLogin(), HttpStatus.OK);\n-        var achievementsFirstCourse = request.get(\"/api/courses/\" + firstCourse.getId() + \"/achievements\", HttpStatus.NOT_FOUND, Set.class);\n-        assertThat(achievementsFirstCourse).as(\"Achievements for user should be null in course \" + firstCourse.getId()).isNullOrEmpty();\n-        var achievementsSecondCourse = request.get(\"/api/courses/\" + secondCourse.getId() + \"/achievements\", HttpStatus.NOT_FOUND, Set.class);\n-        assertThat(achievementsSecondCourse).as(\"Achievements for user should be null in course \" + secondCourse.getId()).isNullOrEmpty();\n+        student.addAchievement(achievement);\n+        student = userRepository.save(student);\n+\n+        var achievements = request.get(\"/api/achievements\", HttpStatus.OK, Set.class);\n+        assertThat(achievements.size()).as(\"Number of achievements for user should be 1\").isEqualTo(1);\n+\n+        userRepository.delete(student);\n+        assertThat(achievementRepository.findAll().contains(achievement)).as(\"Achievement does not get deleted if user does\").isTrue();\n     }\n \n     @Test\n-    @WithMockUser(value = \"student1\", roles = \"ADMIN\")\n+    @WithMockUser(value = \"student1\", roles = \"USER\")\n     public void testDeleteCourse() throws Exception {\n-        initTest();\n-        var courseId = firstCourse.getId();\n-        request.delete(\"/api/courses/\" + courseId, HttpStatus.OK);\n-        var achievementsFirstCourse = request.get(\"/api/courses/\" + courseId + \"/achievements\", HttpStatus.OK, Set.class);\n-        assertThat(achievementsFirstCourse.size()).as(\"Achievements in course \" + courseId + \" get deleted if course \" + courseId + \" is deleted\").isEqualTo(0);\n-        var achievementsSecondCourse = request.get(\"/api/courses/\" + secondCourse.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n-        assertThat(achievementsSecondCourse.size()).as(\"Achievements in course \" + secondCourse.getId() + \" do not get deleted if course \" + courseId + \" is deleted\").isEqualTo(4);\n+        var achievements = request.get(\"/api/courses/\" + course.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n+        assertThat(achievements.size()).as(\"Number of achievements for course should be 1\").isEqualTo(1);\n+\n+        courseRepository.delete(course);\n+        assertThat(achievementRepository.findAll().contains(achievement)).as(\"Achievement gets deleted if course does\").isFalse();\n     }\n \n     @Test\n     @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n-    public void testDeleteExercise() throws Exception {\n-        initTest();\n-        request.delete(\"/api/modeling-exercises/\" + firstExercise.getId(), HttpStatus.OK);\n-        var achievementsFirstCourse = request.get(\"/api/courses/\" + firstCourse.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n-        assertThat(achievementsFirstCourse.size()).as(\"Number of achievements for user should be 4 in course \" + firstCourse.getId()).isEqualTo(4);\n-        var achievementsSecondCourse = request.get(\"/api/courses/\" + secondCourse.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n-        assertThat(achievementsSecondCourse.size()).as(\"Number of achievements for user should be 4 in course \" + secondCourse.getId()).isEqualTo(4);\n+    public void testUpdateAchievement() throws Exception {\n+        instructor.addAchievement(achievement);\n+        userRepository.save(instructor);\n+        var achievementToUpdate = achievementRepository.findById(achievement.getId()).get();\n+        achievementToUpdate.setDescription(\"Updated achievement\");\n+        request.put(\"/api/achievements\", achievementToUpdate, HttpStatus.OK);\n+        assertThat(achievementRepository.findById(achievement.getId()).get()).as(\"Achievement is updated correctly\").isEqualTo(achievementToUpdate);\n     }\n \n-    private void initTest() throws Exception {\n-        var allAchievements = achievementRepository.findAllByCourseId(firstCourse.getId());\n-        allAchievements.addAll(achievementRepository.findAllByCourseId(secondCourse.getId()));\n-\n-        for (Achievement achievement : allAchievements) {\n-            student.addAchievement(achievement);\n-            instructor.addAchievement(achievement);\n-        }\n-        student = userRepository.save(student);\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testDeleteAchievement() throws Exception {\n+        instructor.addAchievement(achievement);\n         instructor = userRepository.save(instructor);\n+        achievement = achievementRepository.save(achievement);\n+        request.delete(\"/api/achievements/\" + achievement.getId(), HttpStatus.OK);\n+\n+        assertThat(achievementRepository.findAll().size()).as(\"Achievement is deleted\").isEqualTo(0);\n+        assertThat(userRepository.findById(instructor.getId()).isPresent()).as(\"User is not deleted\").isTrue();\n+        assertThat(request.get(\"/api/achievements\", HttpStatus.OK, Set.class).size()).as(\"User has no achievements\").isEqualTo(0);\n+        assertThat(courseRepository.findById(course.getId()).isPresent()).as(\"Course is not deleted\").isTrue();\n+        var achievements = request.get(\"/api/courses/\" + course.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n+        assertThat(achievements.size()).as(\"Course has no achievements\").isEqualTo(0);\n+    }\n \n-        var achievementsFirstCourse = request.get(\"/api/courses/\" + firstCourse.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n-        assertThat(achievementsFirstCourse.size()).as(\"Number of achievements for user should be 12 in course \" + firstCourse.getId()).isEqualTo(12);\n-        var achievementsSecondCourse = request.get(\"/api/courses/\" + secondCourse.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n-        assertThat(achievementsSecondCourse.size()).as(\"Number of achievements for user should be 4 in course \" + secondCourse.getId()).isEqualTo(4);\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testBadRequests() throws Exception {\n+        var emptyAchievement = new Achievement();\n+        request.put(\"/api/achievements\", emptyAchievement, HttpStatus.BAD_REQUEST);\n+        request.delete(\"/api/achievements/17\", HttpStatus.NOT_FOUND);\n+        instructor.setGroups(new HashSet<>());\n+        userRepository.save(instructor);\n+        emptyAchievement.setId(2L);\n+        emptyAchievement.setCourse(course);\n+        request.put(\"/api/achievements\", emptyAchievement, HttpStatus.FORBIDDEN);\n+        request.delete(\"/api/achievements/\" + achievement.getId(), HttpStatus.FORBIDDEN);\n     }\n+\n }\n", "next_change": {"commit": "fd13e3d27e731c1b8d1a2dea0e1c43ae2468034b", "changed_code": [{"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\nindex be74f5c110f..57b7dc2f9ee 100644\n--- a/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\n", "chunk": "@@ -148,13 +175,13 @@ public class AchievementIntegrationTest extends AbstractSpringIntegrationBambooB\n     public void testBadRequests() throws Exception {\n         var emptyAchievement = new Achievement();\n         request.put(\"/api/achievements\", emptyAchievement, HttpStatus.BAD_REQUEST);\n-        request.delete(\"/api/achievements/17\", HttpStatus.NOT_FOUND);\n+        request.delete(\"/api/achievements/\" + 999L, HttpStatus.NOT_FOUND);\n         instructor.setGroups(new HashSet<>());\n         userRepository.save(instructor);\n         emptyAchievement.setId(2L);\n-        emptyAchievement.setCourse(course);\n+        emptyAchievement.setCourse(first_course);\n         request.put(\"/api/achievements\", emptyAchievement, HttpStatus.FORBIDDEN);\n-        request.delete(\"/api/achievements/\" + achievement.getId(), HttpStatus.FORBIDDEN);\n+        request.delete(\"/api/achievements/\" + first_achievement.getId(), HttpStatus.FORBIDDEN);\n     }\n \n }\n", "next_change": null}]}}]}}]}}, {"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\nindex 3b8af6aa4c6..de43c5aeb29 100644\n--- a/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\n", "chunk": "@@ -85,101 +82,53 @@ public class AchievementIntegrationTest extends AbstractSpringIntegrationBambooB\n     }\n \n     @Test\n-    public void testManyToManyRelationToUser() {\n-        assertThat(student.getAchievements().size()).as(\"Number of achievements for user should be 0\").isEqualTo(0);\n-\n-        student.addAchievement(first_achievement);\n-        assertThat(student.getAchievements().size()).as(\"Number of achievements for user should be 1\").isEqualTo(1);\n-        assertThat(student.getAchievements().contains(first_achievement)).as(\"User has correct achievement\").isTrue();\n-        assertThat(first_achievement.getUsers().size()).as(\"Number of users for achievement should be 1\").isEqualTo(1);\n-        assertThat(first_achievement.getUsers().contains(student)).as(\"Achievement has correct user\").isTrue();\n-\n-        student.removeAchievement(first_achievement);\n-        assertThat(student.getAchievements().size()).as(\"Number of achievements for user should be 0\").isEqualTo(0);\n-        assertThat(student.getAchievements().contains(first_achievement)).as(\"User does not have removed achievement\").isFalse();\n-        assertThat(first_achievement.getUsers().size()).as(\"Number of users for achievement should be 0\").isEqualTo(0);\n-        assertThat(first_achievement.getUsers().contains(student)).as(\"Achievement does not have incorrect user\").isFalse();\n-    }\n-\n-    @Test\n-    @WithMockUser(value = \"student1\", roles = \"USER\")\n+    @WithMockUser(value = \"student1\", roles = \"ADMIN\")\n     public void testDeleteUser() throws Exception {\n-        student.addAchievement(first_achievement);\n-        student = userRepository.save(student);\n-\n-        var achievements = request.get(\"/api/achievements\", HttpStatus.OK, Set.class);\n-        assertThat(achievements.size()).as(\"Number of achievements for user should be 1\").isEqualTo(1);\n-\n-        userRepository.delete(student);\n-        assertThat(achievementService.findAll().contains(first_achievement)).as(\"Achievement does not get deleted if user does\").isTrue();\n+        initTest();\n+        request.delete(\"/api/users/\" + student.getLogin(), HttpStatus.OK);\n+        var achievementsFirstCourse = request.get(\"/api/courses/\" + firstCourse.getId() + \"/achievements\", HttpStatus.NOT_FOUND, Set.class);\n+        assertThat(achievementsFirstCourse).as(\"Achievements for user should be null in course \" + firstCourse.getId()).isNullOrEmpty();\n+        var achievementsSecondCourse = request.get(\"/api/courses/\" + secondCourse.getId() + \"/achievements\", HttpStatus.NOT_FOUND, Set.class);\n+        assertThat(achievementsSecondCourse).as(\"Achievements for user should be null in course \" + secondCourse.getId()).isNullOrEmpty();\n     }\n \n     @Test\n-    @WithMockUser(value = \"admin\", roles = \"ADMIN\")\n+    @WithMockUser(value = \"student1\", roles = \"ADMIN\")\n     public void testDeleteCourse() throws Exception {\n-        student.addAchievement(first_achievement);\n-        student = userRepository.save(student);\n-\n-        var achievements = request.get(\"/api/courses/\" + first_course.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n-        assertThat(achievements.size()).as(\"Number of achievements for course should be 2\").isEqualTo(2);\n-\n-        request.delete(\"/api/courses/\" + first_course.getId(), HttpStatus.OK);\n-        assertThat(achievementService.findAll().contains(first_achievement)).as(\"Achievement gets deleted if course does\").isFalse();\n+        initTest();\n+        var courseId = firstCourse.getId();\n+        request.delete(\"/api/courses/\" + courseId, HttpStatus.OK);\n+        var achievementsFirstCourse = request.get(\"/api/courses/\" + courseId + \"/achievements\", HttpStatus.OK, Set.class);\n+        assertThat(achievementsFirstCourse.size()).as(\"Achievements in course \" + courseId + \" get deleted if course \" + courseId + \" is deleted\").isEqualTo(0);\n+        var achievementsSecondCourse = request.get(\"/api/courses/\" + secondCourse.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n+        assertThat(achievementsSecondCourse.size()).as(\"Achievements in course \" + secondCourse.getId() + \" do not get deleted if course \" + courseId + \" is deleted\").isEqualTo(4);\n     }\n \n     @Test\n-    @WithMockUser(value = \"admin\", roles = \"ADMIN\")\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n     public void testDeleteExercise() throws Exception {\n-        student.addAchievement(first_achievement);\n-        student = userRepository.save(student);\n-\n-        var achievements = achievementService.findAllByExerciseId(first_exercise.getId());\n-        assertThat(achievements.size()).as(\"Number of achievements for course should be 2\").isEqualTo(2);\n-\n-        exerciseService.delete(first_exercise.getId(), false, false);\n-        assertThat(achievementService.findById(first_achievement.getId())).as(\"Achievement gets deleted if exercise does\").isNotPresent();\n-        assertThat(achievementService.findById(third_achievement.getId())).as(\"Achievement gets deleted if exercise does\").isNotPresent();\n+        initTest();\n+        request.delete(\"/api/modeling-exercises/\" + firstExercise.getId(), HttpStatus.OK);\n+        var achievementsFirstCourse = request.get(\"/api/courses/\" + firstCourse.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n+        assertThat(achievementsFirstCourse.size()).as(\"Number of achievements for user should be 4 in course \" + firstCourse.getId()).isEqualTo(4);\n+        var achievementsSecondCourse = request.get(\"/api/courses/\" + secondCourse.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n+        assertThat(achievementsSecondCourse.size()).as(\"Number of achievements for user should be 4 in course \" + secondCourse.getId()).isEqualTo(4);\n     }\n \n-    @Test\n-    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n-    public void testUpdateAchievement() throws Exception {\n-        instructor.addAchievement(first_achievement);\n-        userRepository.save(instructor);\n-        var achievementToUpdate = achievementService.findById(first_achievement.getId()).get();\n-        achievementToUpdate.setDescription(\"Updated achievement\");\n-        request.put(\"/api/achievements\", achievementToUpdate, HttpStatus.OK);\n-        assertThat(achievementService.findById(first_achievement.getId()).get()).as(\"Achievement is updated correctly\").isEqualTo(achievementToUpdate);\n-    }\n+    private void initTest() throws Exception {\n+        var allAchievements = achievementRepository.findAllByCourseId(firstCourse.getId());\n+        allAchievements.addAll(achievementRepository.findAllByCourseId(secondCourse.getId()));\n \n-    @Test\n-    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n-    public void testDeleteAchievement() throws Exception {\n-        instructor.addAchievement(first_achievement);\n+        for (Achievement achievement : allAchievements) {\n+            student.addAchievement(achievement);\n+            instructor.addAchievement(achievement);\n+        }\n+        student = userRepository.save(student);\n         instructor = userRepository.save(instructor);\n-        first_achievement = achievementService.save(first_achievement);\n-        request.delete(\"/api/achievements/\" + first_achievement.getId(), HttpStatus.OK);\n-\n-        assertThat(achievementService.findById(first_achievement.getId())).as(\"Achievement is deleted\").isNotPresent();\n-        assertThat(userRepository.findById(instructor.getId()).isPresent()).as(\"User is not deleted\").isTrue();\n-        assertThat(request.get(\"/api/achievements\", HttpStatus.OK, Set.class).size()).as(\"User has no achievements\").isEqualTo(0);\n-        assertThat(courseService.findOne(first_course.getId())).as(\"Course is not deleted\").isNotNull();\n-        var achievements = request.get(\"/api/courses/\" + first_course.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n-        assertThat(achievements.size()).as(\"Course has only one achievement\").isEqualTo(1);\n-    }\n \n-    @Test\n-    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n-    public void testBadRequests() throws Exception {\n-        var emptyAchievement = new Achievement();\n-        request.put(\"/api/achievements\", emptyAchievement, HttpStatus.BAD_REQUEST);\n-        request.delete(\"/api/achievements/\" + 999L, HttpStatus.NOT_FOUND);\n-        instructor.setGroups(new HashSet<>());\n-        userRepository.save(instructor);\n-        emptyAchievement.setId(2L);\n-        emptyAchievement.setCourse(first_course);\n-        request.put(\"/api/achievements\", emptyAchievement, HttpStatus.FORBIDDEN);\n-        request.delete(\"/api/achievements/\" + first_achievement.getId(), HttpStatus.FORBIDDEN);\n+        var achievementsFirstCourse = request.get(\"/api/courses/\" + firstCourse.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n+        assertThat(achievementsFirstCourse.size()).as(\"Number of achievements for user should be 12 in course \" + firstCourse.getId()).isEqualTo(12);\n+        var achievementsSecondCourse = request.get(\"/api/courses/\" + secondCourse.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n+        assertThat(achievementsSecondCourse.size()).as(\"Number of achievements for user should be 4 in course \" + secondCourse.getId()).isEqualTo(4);\n     }\n-\n }\n", "next_change": {"commit": "d85f5f34a571777d2b7558382f25bf6bc7434049", "changed_code": [{"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\nindex de43c5aeb29..be74f5c110f 100644\n--- a/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\n", "chunk": "@@ -82,53 +77,84 @@ public class AchievementIntegrationTest extends AbstractSpringIntegrationBambooB\n     }\n \n     @Test\n-    @WithMockUser(value = \"student1\", roles = \"ADMIN\")\n+    public void testManyToManyRelationToUser() {\n+        assertThat(student.getAchievements().size()).as(\"Number of achievements for user should be 0\").isEqualTo(0);\n+\n+        student.addAchievement(achievement);\n+        assertThat(student.getAchievements().size()).as(\"Number of achievements for user should be 1\").isEqualTo(1);\n+        assertThat(student.getAchievements().contains(achievement)).as(\"User has correct achievement\").isTrue();\n+        assertThat(achievement.getUsers().size()).as(\"Number of users for achievement should be 1\").isEqualTo(1);\n+        assertThat(achievement.getUsers().contains(student)).as(\"Achievement has correct user\").isTrue();\n+\n+        student.removeAchievement(achievement);\n+        assertThat(student.getAchievements().size()).as(\"Number of achievements for user should be 0\").isEqualTo(0);\n+        assertThat(student.getAchievements().contains(achievement)).as(\"User does not have removed achievement\").isFalse();\n+        assertThat(achievement.getUsers().size()).as(\"Number of users for achievement should be 0\").isEqualTo(0);\n+        assertThat(achievement.getUsers().contains(student)).as(\"Achievement does not have incorrect user\").isFalse();\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"USER\")\n     public void testDeleteUser() throws Exception {\n-        initTest();\n-        request.delete(\"/api/users/\" + student.getLogin(), HttpStatus.OK);\n-        var achievementsFirstCourse = request.get(\"/api/courses/\" + firstCourse.getId() + \"/achievements\", HttpStatus.NOT_FOUND, Set.class);\n-        assertThat(achievementsFirstCourse).as(\"Achievements for user should be null in course \" + firstCourse.getId()).isNullOrEmpty();\n-        var achievementsSecondCourse = request.get(\"/api/courses/\" + secondCourse.getId() + \"/achievements\", HttpStatus.NOT_FOUND, Set.class);\n-        assertThat(achievementsSecondCourse).as(\"Achievements for user should be null in course \" + secondCourse.getId()).isNullOrEmpty();\n+        student.addAchievement(achievement);\n+        student = userRepository.save(student);\n+\n+        var achievements = request.get(\"/api/achievements\", HttpStatus.OK, Set.class);\n+        assertThat(achievements.size()).as(\"Number of achievements for user should be 1\").isEqualTo(1);\n+\n+        userRepository.delete(student);\n+        assertThat(achievementRepository.findAll().contains(achievement)).as(\"Achievement does not get deleted if user does\").isTrue();\n     }\n \n     @Test\n-    @WithMockUser(value = \"student1\", roles = \"ADMIN\")\n+    @WithMockUser(value = \"student1\", roles = \"USER\")\n     public void testDeleteCourse() throws Exception {\n-        initTest();\n-        var courseId = firstCourse.getId();\n-        request.delete(\"/api/courses/\" + courseId, HttpStatus.OK);\n-        var achievementsFirstCourse = request.get(\"/api/courses/\" + courseId + \"/achievements\", HttpStatus.OK, Set.class);\n-        assertThat(achievementsFirstCourse.size()).as(\"Achievements in course \" + courseId + \" get deleted if course \" + courseId + \" is deleted\").isEqualTo(0);\n-        var achievementsSecondCourse = request.get(\"/api/courses/\" + secondCourse.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n-        assertThat(achievementsSecondCourse.size()).as(\"Achievements in course \" + secondCourse.getId() + \" do not get deleted if course \" + courseId + \" is deleted\").isEqualTo(4);\n+        var achievements = request.get(\"/api/courses/\" + course.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n+        assertThat(achievements.size()).as(\"Number of achievements for course should be 1\").isEqualTo(1);\n+\n+        courseRepository.delete(course);\n+        assertThat(achievementRepository.findAll().contains(achievement)).as(\"Achievement gets deleted if course does\").isFalse();\n     }\n \n     @Test\n     @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n-    public void testDeleteExercise() throws Exception {\n-        initTest();\n-        request.delete(\"/api/modeling-exercises/\" + firstExercise.getId(), HttpStatus.OK);\n-        var achievementsFirstCourse = request.get(\"/api/courses/\" + firstCourse.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n-        assertThat(achievementsFirstCourse.size()).as(\"Number of achievements for user should be 4 in course \" + firstCourse.getId()).isEqualTo(4);\n-        var achievementsSecondCourse = request.get(\"/api/courses/\" + secondCourse.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n-        assertThat(achievementsSecondCourse.size()).as(\"Number of achievements for user should be 4 in course \" + secondCourse.getId()).isEqualTo(4);\n+    public void testUpdateAchievement() throws Exception {\n+        instructor.addAchievement(achievement);\n+        userRepository.save(instructor);\n+        var achievementToUpdate = achievementRepository.findById(achievement.getId()).get();\n+        achievementToUpdate.setDescription(\"Updated achievement\");\n+        request.put(\"/api/achievements\", achievementToUpdate, HttpStatus.OK);\n+        assertThat(achievementRepository.findById(achievement.getId()).get()).as(\"Achievement is updated correctly\").isEqualTo(achievementToUpdate);\n     }\n \n-    private void initTest() throws Exception {\n-        var allAchievements = achievementRepository.findAllByCourseId(firstCourse.getId());\n-        allAchievements.addAll(achievementRepository.findAllByCourseId(secondCourse.getId()));\n-\n-        for (Achievement achievement : allAchievements) {\n-            student.addAchievement(achievement);\n-            instructor.addAchievement(achievement);\n-        }\n-        student = userRepository.save(student);\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testDeleteAchievement() throws Exception {\n+        instructor.addAchievement(achievement);\n         instructor = userRepository.save(instructor);\n+        achievement = achievementRepository.save(achievement);\n+        request.delete(\"/api/achievements/\" + achievement.getId(), HttpStatus.OK);\n+\n+        assertThat(achievementRepository.findAll().size()).as(\"Achievement is deleted\").isEqualTo(0);\n+        assertThat(userRepository.findById(instructor.getId()).isPresent()).as(\"User is not deleted\").isTrue();\n+        assertThat(request.get(\"/api/achievements\", HttpStatus.OK, Set.class).size()).as(\"User has no achievements\").isEqualTo(0);\n+        assertThat(courseRepository.findById(course.getId()).isPresent()).as(\"Course is not deleted\").isTrue();\n+        var achievements = request.get(\"/api/courses/\" + course.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n+        assertThat(achievements.size()).as(\"Course has no achievements\").isEqualTo(0);\n+    }\n \n-        var achievementsFirstCourse = request.get(\"/api/courses/\" + firstCourse.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n-        assertThat(achievementsFirstCourse.size()).as(\"Number of achievements for user should be 12 in course \" + firstCourse.getId()).isEqualTo(12);\n-        var achievementsSecondCourse = request.get(\"/api/courses/\" + secondCourse.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n-        assertThat(achievementsSecondCourse.size()).as(\"Number of achievements for user should be 4 in course \" + secondCourse.getId()).isEqualTo(4);\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testBadRequests() throws Exception {\n+        var emptyAchievement = new Achievement();\n+        request.put(\"/api/achievements\", emptyAchievement, HttpStatus.BAD_REQUEST);\n+        request.delete(\"/api/achievements/17\", HttpStatus.NOT_FOUND);\n+        instructor.setGroups(new HashSet<>());\n+        userRepository.save(instructor);\n+        emptyAchievement.setId(2L);\n+        emptyAchievement.setCourse(course);\n+        request.put(\"/api/achievements\", emptyAchievement, HttpStatus.FORBIDDEN);\n+        request.delete(\"/api/achievements/\" + achievement.getId(), HttpStatus.FORBIDDEN);\n     }\n+\n }\n", "next_change": {"commit": "fd13e3d27e731c1b8d1a2dea0e1c43ae2468034b", "changed_code": [{"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\nindex be74f5c110f..57b7dc2f9ee 100644\n--- a/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\n", "chunk": "@@ -148,13 +175,13 @@ public class AchievementIntegrationTest extends AbstractSpringIntegrationBambooB\n     public void testBadRequests() throws Exception {\n         var emptyAchievement = new Achievement();\n         request.put(\"/api/achievements\", emptyAchievement, HttpStatus.BAD_REQUEST);\n-        request.delete(\"/api/achievements/17\", HttpStatus.NOT_FOUND);\n+        request.delete(\"/api/achievements/\" + 999L, HttpStatus.NOT_FOUND);\n         instructor.setGroups(new HashSet<>());\n         userRepository.save(instructor);\n         emptyAchievement.setId(2L);\n-        emptyAchievement.setCourse(course);\n+        emptyAchievement.setCourse(first_course);\n         request.put(\"/api/achievements\", emptyAchievement, HttpStatus.FORBIDDEN);\n-        request.delete(\"/api/achievements/\" + achievement.getId(), HttpStatus.FORBIDDEN);\n+        request.delete(\"/api/achievements/\" + first_achievement.getId(), HttpStatus.FORBIDDEN);\n     }\n \n }\n", "next_change": null}]}}]}}]}}, {"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\nindex 6d5c48c239a..3b8af6aa4c6 100644\n--- a/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\n", "chunk": "@@ -82,67 +85,101 @@ public class AchievementIntegrationTest extends AbstractSpringIntegrationBambooB\n     }\n \n     @Test\n-    @WithMockUser(value = \"student1\", roles = \"ADMIN\")\n+    public void testManyToManyRelationToUser() {\n+        assertThat(student.getAchievements().size()).as(\"Number of achievements for user should be 0\").isEqualTo(0);\n+\n+        student.addAchievement(first_achievement);\n+        assertThat(student.getAchievements().size()).as(\"Number of achievements for user should be 1\").isEqualTo(1);\n+        assertThat(student.getAchievements().contains(first_achievement)).as(\"User has correct achievement\").isTrue();\n+        assertThat(first_achievement.getUsers().size()).as(\"Number of users for achievement should be 1\").isEqualTo(1);\n+        assertThat(first_achievement.getUsers().contains(student)).as(\"Achievement has correct user\").isTrue();\n+\n+        student.removeAchievement(first_achievement);\n+        assertThat(student.getAchievements().size()).as(\"Number of achievements for user should be 0\").isEqualTo(0);\n+        assertThat(student.getAchievements().contains(first_achievement)).as(\"User does not have removed achievement\").isFalse();\n+        assertThat(first_achievement.getUsers().size()).as(\"Number of users for achievement should be 0\").isEqualTo(0);\n+        assertThat(first_achievement.getUsers().contains(student)).as(\"Achievement does not have incorrect user\").isFalse();\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"USER\")\n     public void testDeleteUser() throws Exception {\n-        initTest();\n-        request.delete(\"/api/users/\" + student.getLogin(), HttpStatus.OK);\n-        var achievementsFirstCourse = request.get(\"/api/courses/\" + firstCourse.getId() + \"/achievements\", HttpStatus.NOT_FOUND, Set.class);\n-        assertThat(achievementsFirstCourse).as(\"Achievements for user should be null in course \" + firstCourse.getId()).isNullOrEmpty();\n-        var achievementsSecondCourse = request.get(\"/api/courses/\" + secondCourse.getId() + \"/achievements\", HttpStatus.NOT_FOUND, Set.class);\n-        assertThat(achievementsSecondCourse).as(\"Achievements for user should be null in course \" + secondCourse.getId()).isNullOrEmpty();\n+        student.addAchievement(first_achievement);\n+        student = userRepository.save(student);\n+\n+        var achievements = request.get(\"/api/achievements\", HttpStatus.OK, Set.class);\n+        assertThat(achievements.size()).as(\"Number of achievements for user should be 1\").isEqualTo(1);\n+\n+        userRepository.delete(student);\n+        assertThat(achievementService.findAll().contains(first_achievement)).as(\"Achievement does not get deleted if user does\").isTrue();\n     }\n \n     @Test\n-    @WithMockUser(value = \"student1\", roles = \"ADMIN\")\n+    @WithMockUser(value = \"admin\", roles = \"ADMIN\")\n     public void testDeleteCourse() throws Exception {\n-        initTest();\n-        var courseId = firstCourse.getId();\n-        request.delete(\"/api/courses/\" + courseId, HttpStatus.OK);\n-        var achievementsFirstCourse = request.get(\"/api/courses/\" + courseId + \"/achievements\", HttpStatus.OK, Set.class);\n-        assertThat(achievementsFirstCourse.size()).as(\"Achievements in course \" + courseId + \" get deleted if course \" + courseId + \" is deleted\").isEqualTo(0);\n-        var achievementsSecondCourse = request.get(\"/api/courses/\" + secondCourse.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n-        assertThat(achievementsSecondCourse.size()).as(\"Achievements in course \" + secondCourse.getId() + \" do not get deleted if course \" + courseId + \" is deleted\").isEqualTo(4);\n+        student.addAchievement(first_achievement);\n+        student = userRepository.save(student);\n+\n+        var achievements = request.get(\"/api/courses/\" + first_course.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n+        assertThat(achievements.size()).as(\"Number of achievements for course should be 2\").isEqualTo(2);\n+\n+        request.delete(\"/api/courses/\" + first_course.getId(), HttpStatus.OK);\n+        assertThat(achievementService.findAll().contains(first_achievement)).as(\"Achievement gets deleted if course does\").isFalse();\n     }\n \n     @Test\n-    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    @WithMockUser(value = \"admin\", roles = \"ADMIN\")\n     public void testDeleteExercise() throws Exception {\n-        initTest();\n-        request.delete(\"/api/modeling-exercises/\" + firstExercise.getId(), HttpStatus.OK);\n-        var achievementsFirstCourse = request.get(\"/api/courses/\" + firstCourse.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n-        assertThat(achievementsFirstCourse.size()).as(\"Number of achievements for user should be 4 in course \" + firstCourse.getId()).isEqualTo(4);\n-        var achievementsSecondCourse = request.get(\"/api/courses/\" + secondCourse.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n-        assertThat(achievementsSecondCourse.size()).as(\"Number of achievements for user should be 4 in course \" + secondCourse.getId()).isEqualTo(4);\n+        student.addAchievement(first_achievement);\n+        student = userRepository.save(student);\n+\n+        var achievements = achievementService.findAllByExerciseId(first_exercise.getId());\n+        assertThat(achievements.size()).as(\"Number of achievements for course should be 2\").isEqualTo(2);\n+\n+        exerciseService.delete(first_exercise.getId(), false, false);\n+        assertThat(achievementService.findById(first_achievement.getId())).as(\"Achievement gets deleted if exercise does\").isNotPresent();\n+        assertThat(achievementService.findById(third_achievement.getId())).as(\"Achievement gets deleted if exercise does\").isNotPresent();\n     }\n \n     @Test\n-    @WithMockUser(value = \"student1\", roles = \"USER\")\n-    public void testRewardAchievement() throws Exception {\n-        var participation = database.addParticipationForExercise(firstExercise, student.getLogin());\n-        var result = database.addResultToParticipation(participation);\n-        Set<Result> results = new HashSet<>();\n-        results.add(result);\n-        participation.setResults(results);\n-        participationRepository.save(participation);\n-        achievementService.checkForAchievements(result);\n-        var achievementsFirstCourse = request.get(\"/api/courses/\" + firstCourse.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n-        assertThat(achievementsFirstCourse.size()).as(\"User got an achievement\").isEqualTo(1);\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testUpdateAchievement() throws Exception {\n+        instructor.addAchievement(first_achievement);\n+        userRepository.save(instructor);\n+        var achievementToUpdate = achievementService.findById(first_achievement.getId()).get();\n+        achievementToUpdate.setDescription(\"Updated achievement\");\n+        request.put(\"/api/achievements\", achievementToUpdate, HttpStatus.OK);\n+        assertThat(achievementService.findById(first_achievement.getId()).get()).as(\"Achievement is updated correctly\").isEqualTo(achievementToUpdate);\n     }\n \n-    private void initTest() throws Exception {\n-        var allAchievements = achievementRepository.findAllByCourseId(firstCourse.getId());\n-        allAchievements.addAll(achievementRepository.findAllByCourseId(secondCourse.getId()));\n-\n-        for (Achievement achievement : allAchievements) {\n-            student.addAchievement(achievement);\n-            instructor.addAchievement(achievement);\n-        }\n-        student = userRepository.save(student);\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testDeleteAchievement() throws Exception {\n+        instructor.addAchievement(first_achievement);\n         instructor = userRepository.save(instructor);\n+        first_achievement = achievementService.save(first_achievement);\n+        request.delete(\"/api/achievements/\" + first_achievement.getId(), HttpStatus.OK);\n+\n+        assertThat(achievementService.findById(first_achievement.getId())).as(\"Achievement is deleted\").isNotPresent();\n+        assertThat(userRepository.findById(instructor.getId()).isPresent()).as(\"User is not deleted\").isTrue();\n+        assertThat(request.get(\"/api/achievements\", HttpStatus.OK, Set.class).size()).as(\"User has no achievements\").isEqualTo(0);\n+        assertThat(courseService.findOne(first_course.getId())).as(\"Course is not deleted\").isNotNull();\n+        var achievements = request.get(\"/api/courses/\" + first_course.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n+        assertThat(achievements.size()).as(\"Course has only one achievement\").isEqualTo(1);\n+    }\n \n-        var achievementsFirstCourse = request.get(\"/api/courses/\" + firstCourse.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n-        assertThat(achievementsFirstCourse.size()).as(\"Number of achievements for user should be 12 in course \" + firstCourse.getId()).isEqualTo(12);\n-        var achievementsSecondCourse = request.get(\"/api/courses/\" + secondCourse.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n-        assertThat(achievementsSecondCourse.size()).as(\"Number of achievements for user should be 4 in course \" + secondCourse.getId()).isEqualTo(4);\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testBadRequests() throws Exception {\n+        var emptyAchievement = new Achievement();\n+        request.put(\"/api/achievements\", emptyAchievement, HttpStatus.BAD_REQUEST);\n+        request.delete(\"/api/achievements/\" + 999L, HttpStatus.NOT_FOUND);\n+        instructor.setGroups(new HashSet<>());\n+        userRepository.save(instructor);\n+        emptyAchievement.setId(2L);\n+        emptyAchievement.setCourse(first_course);\n+        request.put(\"/api/achievements\", emptyAchievement, HttpStatus.FORBIDDEN);\n+        request.delete(\"/api/achievements/\" + first_achievement.getId(), HttpStatus.FORBIDDEN);\n     }\n+\n }\n", "next_change": {"commit": "116151629d403403ee9b750c30c182f44f70e233", "changed_code": [{"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\nindex 3b8af6aa4c6..de43c5aeb29 100644\n--- a/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\n", "chunk": "@@ -85,101 +82,53 @@ public class AchievementIntegrationTest extends AbstractSpringIntegrationBambooB\n     }\n \n     @Test\n-    public void testManyToManyRelationToUser() {\n-        assertThat(student.getAchievements().size()).as(\"Number of achievements for user should be 0\").isEqualTo(0);\n-\n-        student.addAchievement(first_achievement);\n-        assertThat(student.getAchievements().size()).as(\"Number of achievements for user should be 1\").isEqualTo(1);\n-        assertThat(student.getAchievements().contains(first_achievement)).as(\"User has correct achievement\").isTrue();\n-        assertThat(first_achievement.getUsers().size()).as(\"Number of users for achievement should be 1\").isEqualTo(1);\n-        assertThat(first_achievement.getUsers().contains(student)).as(\"Achievement has correct user\").isTrue();\n-\n-        student.removeAchievement(first_achievement);\n-        assertThat(student.getAchievements().size()).as(\"Number of achievements for user should be 0\").isEqualTo(0);\n-        assertThat(student.getAchievements().contains(first_achievement)).as(\"User does not have removed achievement\").isFalse();\n-        assertThat(first_achievement.getUsers().size()).as(\"Number of users for achievement should be 0\").isEqualTo(0);\n-        assertThat(first_achievement.getUsers().contains(student)).as(\"Achievement does not have incorrect user\").isFalse();\n-    }\n-\n-    @Test\n-    @WithMockUser(value = \"student1\", roles = \"USER\")\n+    @WithMockUser(value = \"student1\", roles = \"ADMIN\")\n     public void testDeleteUser() throws Exception {\n-        student.addAchievement(first_achievement);\n-        student = userRepository.save(student);\n-\n-        var achievements = request.get(\"/api/achievements\", HttpStatus.OK, Set.class);\n-        assertThat(achievements.size()).as(\"Number of achievements for user should be 1\").isEqualTo(1);\n-\n-        userRepository.delete(student);\n-        assertThat(achievementService.findAll().contains(first_achievement)).as(\"Achievement does not get deleted if user does\").isTrue();\n+        initTest();\n+        request.delete(\"/api/users/\" + student.getLogin(), HttpStatus.OK);\n+        var achievementsFirstCourse = request.get(\"/api/courses/\" + firstCourse.getId() + \"/achievements\", HttpStatus.NOT_FOUND, Set.class);\n+        assertThat(achievementsFirstCourse).as(\"Achievements for user should be null in course \" + firstCourse.getId()).isNullOrEmpty();\n+        var achievementsSecondCourse = request.get(\"/api/courses/\" + secondCourse.getId() + \"/achievements\", HttpStatus.NOT_FOUND, Set.class);\n+        assertThat(achievementsSecondCourse).as(\"Achievements for user should be null in course \" + secondCourse.getId()).isNullOrEmpty();\n     }\n \n     @Test\n-    @WithMockUser(value = \"admin\", roles = \"ADMIN\")\n+    @WithMockUser(value = \"student1\", roles = \"ADMIN\")\n     public void testDeleteCourse() throws Exception {\n-        student.addAchievement(first_achievement);\n-        student = userRepository.save(student);\n-\n-        var achievements = request.get(\"/api/courses/\" + first_course.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n-        assertThat(achievements.size()).as(\"Number of achievements for course should be 2\").isEqualTo(2);\n-\n-        request.delete(\"/api/courses/\" + first_course.getId(), HttpStatus.OK);\n-        assertThat(achievementService.findAll().contains(first_achievement)).as(\"Achievement gets deleted if course does\").isFalse();\n+        initTest();\n+        var courseId = firstCourse.getId();\n+        request.delete(\"/api/courses/\" + courseId, HttpStatus.OK);\n+        var achievementsFirstCourse = request.get(\"/api/courses/\" + courseId + \"/achievements\", HttpStatus.OK, Set.class);\n+        assertThat(achievementsFirstCourse.size()).as(\"Achievements in course \" + courseId + \" get deleted if course \" + courseId + \" is deleted\").isEqualTo(0);\n+        var achievementsSecondCourse = request.get(\"/api/courses/\" + secondCourse.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n+        assertThat(achievementsSecondCourse.size()).as(\"Achievements in course \" + secondCourse.getId() + \" do not get deleted if course \" + courseId + \" is deleted\").isEqualTo(4);\n     }\n \n     @Test\n-    @WithMockUser(value = \"admin\", roles = \"ADMIN\")\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n     public void testDeleteExercise() throws Exception {\n-        student.addAchievement(first_achievement);\n-        student = userRepository.save(student);\n-\n-        var achievements = achievementService.findAllByExerciseId(first_exercise.getId());\n-        assertThat(achievements.size()).as(\"Number of achievements for course should be 2\").isEqualTo(2);\n-\n-        exerciseService.delete(first_exercise.getId(), false, false);\n-        assertThat(achievementService.findById(first_achievement.getId())).as(\"Achievement gets deleted if exercise does\").isNotPresent();\n-        assertThat(achievementService.findById(third_achievement.getId())).as(\"Achievement gets deleted if exercise does\").isNotPresent();\n+        initTest();\n+        request.delete(\"/api/modeling-exercises/\" + firstExercise.getId(), HttpStatus.OK);\n+        var achievementsFirstCourse = request.get(\"/api/courses/\" + firstCourse.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n+        assertThat(achievementsFirstCourse.size()).as(\"Number of achievements for user should be 4 in course \" + firstCourse.getId()).isEqualTo(4);\n+        var achievementsSecondCourse = request.get(\"/api/courses/\" + secondCourse.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n+        assertThat(achievementsSecondCourse.size()).as(\"Number of achievements for user should be 4 in course \" + secondCourse.getId()).isEqualTo(4);\n     }\n \n-    @Test\n-    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n-    public void testUpdateAchievement() throws Exception {\n-        instructor.addAchievement(first_achievement);\n-        userRepository.save(instructor);\n-        var achievementToUpdate = achievementService.findById(first_achievement.getId()).get();\n-        achievementToUpdate.setDescription(\"Updated achievement\");\n-        request.put(\"/api/achievements\", achievementToUpdate, HttpStatus.OK);\n-        assertThat(achievementService.findById(first_achievement.getId()).get()).as(\"Achievement is updated correctly\").isEqualTo(achievementToUpdate);\n-    }\n+    private void initTest() throws Exception {\n+        var allAchievements = achievementRepository.findAllByCourseId(firstCourse.getId());\n+        allAchievements.addAll(achievementRepository.findAllByCourseId(secondCourse.getId()));\n \n-    @Test\n-    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n-    public void testDeleteAchievement() throws Exception {\n-        instructor.addAchievement(first_achievement);\n+        for (Achievement achievement : allAchievements) {\n+            student.addAchievement(achievement);\n+            instructor.addAchievement(achievement);\n+        }\n+        student = userRepository.save(student);\n         instructor = userRepository.save(instructor);\n-        first_achievement = achievementService.save(first_achievement);\n-        request.delete(\"/api/achievements/\" + first_achievement.getId(), HttpStatus.OK);\n-\n-        assertThat(achievementService.findById(first_achievement.getId())).as(\"Achievement is deleted\").isNotPresent();\n-        assertThat(userRepository.findById(instructor.getId()).isPresent()).as(\"User is not deleted\").isTrue();\n-        assertThat(request.get(\"/api/achievements\", HttpStatus.OK, Set.class).size()).as(\"User has no achievements\").isEqualTo(0);\n-        assertThat(courseService.findOne(first_course.getId())).as(\"Course is not deleted\").isNotNull();\n-        var achievements = request.get(\"/api/courses/\" + first_course.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n-        assertThat(achievements.size()).as(\"Course has only one achievement\").isEqualTo(1);\n-    }\n \n-    @Test\n-    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n-    public void testBadRequests() throws Exception {\n-        var emptyAchievement = new Achievement();\n-        request.put(\"/api/achievements\", emptyAchievement, HttpStatus.BAD_REQUEST);\n-        request.delete(\"/api/achievements/\" + 999L, HttpStatus.NOT_FOUND);\n-        instructor.setGroups(new HashSet<>());\n-        userRepository.save(instructor);\n-        emptyAchievement.setId(2L);\n-        emptyAchievement.setCourse(first_course);\n-        request.put(\"/api/achievements\", emptyAchievement, HttpStatus.FORBIDDEN);\n-        request.delete(\"/api/achievements/\" + first_achievement.getId(), HttpStatus.FORBIDDEN);\n+        var achievementsFirstCourse = request.get(\"/api/courses/\" + firstCourse.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n+        assertThat(achievementsFirstCourse.size()).as(\"Number of achievements for user should be 12 in course \" + firstCourse.getId()).isEqualTo(12);\n+        var achievementsSecondCourse = request.get(\"/api/courses/\" + secondCourse.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n+        assertThat(achievementsSecondCourse.size()).as(\"Number of achievements for user should be 4 in course \" + secondCourse.getId()).isEqualTo(4);\n     }\n-\n }\n", "next_change": {"commit": "d85f5f34a571777d2b7558382f25bf6bc7434049", "changed_code": [{"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\nindex de43c5aeb29..be74f5c110f 100644\n--- a/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\n", "chunk": "@@ -82,53 +77,84 @@ public class AchievementIntegrationTest extends AbstractSpringIntegrationBambooB\n     }\n \n     @Test\n-    @WithMockUser(value = \"student1\", roles = \"ADMIN\")\n+    public void testManyToManyRelationToUser() {\n+        assertThat(student.getAchievements().size()).as(\"Number of achievements for user should be 0\").isEqualTo(0);\n+\n+        student.addAchievement(achievement);\n+        assertThat(student.getAchievements().size()).as(\"Number of achievements for user should be 1\").isEqualTo(1);\n+        assertThat(student.getAchievements().contains(achievement)).as(\"User has correct achievement\").isTrue();\n+        assertThat(achievement.getUsers().size()).as(\"Number of users for achievement should be 1\").isEqualTo(1);\n+        assertThat(achievement.getUsers().contains(student)).as(\"Achievement has correct user\").isTrue();\n+\n+        student.removeAchievement(achievement);\n+        assertThat(student.getAchievements().size()).as(\"Number of achievements for user should be 0\").isEqualTo(0);\n+        assertThat(student.getAchievements().contains(achievement)).as(\"User does not have removed achievement\").isFalse();\n+        assertThat(achievement.getUsers().size()).as(\"Number of users for achievement should be 0\").isEqualTo(0);\n+        assertThat(achievement.getUsers().contains(student)).as(\"Achievement does not have incorrect user\").isFalse();\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"USER\")\n     public void testDeleteUser() throws Exception {\n-        initTest();\n-        request.delete(\"/api/users/\" + student.getLogin(), HttpStatus.OK);\n-        var achievementsFirstCourse = request.get(\"/api/courses/\" + firstCourse.getId() + \"/achievements\", HttpStatus.NOT_FOUND, Set.class);\n-        assertThat(achievementsFirstCourse).as(\"Achievements for user should be null in course \" + firstCourse.getId()).isNullOrEmpty();\n-        var achievementsSecondCourse = request.get(\"/api/courses/\" + secondCourse.getId() + \"/achievements\", HttpStatus.NOT_FOUND, Set.class);\n-        assertThat(achievementsSecondCourse).as(\"Achievements for user should be null in course \" + secondCourse.getId()).isNullOrEmpty();\n+        student.addAchievement(achievement);\n+        student = userRepository.save(student);\n+\n+        var achievements = request.get(\"/api/achievements\", HttpStatus.OK, Set.class);\n+        assertThat(achievements.size()).as(\"Number of achievements for user should be 1\").isEqualTo(1);\n+\n+        userRepository.delete(student);\n+        assertThat(achievementRepository.findAll().contains(achievement)).as(\"Achievement does not get deleted if user does\").isTrue();\n     }\n \n     @Test\n-    @WithMockUser(value = \"student1\", roles = \"ADMIN\")\n+    @WithMockUser(value = \"student1\", roles = \"USER\")\n     public void testDeleteCourse() throws Exception {\n-        initTest();\n-        var courseId = firstCourse.getId();\n-        request.delete(\"/api/courses/\" + courseId, HttpStatus.OK);\n-        var achievementsFirstCourse = request.get(\"/api/courses/\" + courseId + \"/achievements\", HttpStatus.OK, Set.class);\n-        assertThat(achievementsFirstCourse.size()).as(\"Achievements in course \" + courseId + \" get deleted if course \" + courseId + \" is deleted\").isEqualTo(0);\n-        var achievementsSecondCourse = request.get(\"/api/courses/\" + secondCourse.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n-        assertThat(achievementsSecondCourse.size()).as(\"Achievements in course \" + secondCourse.getId() + \" do not get deleted if course \" + courseId + \" is deleted\").isEqualTo(4);\n+        var achievements = request.get(\"/api/courses/\" + course.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n+        assertThat(achievements.size()).as(\"Number of achievements for course should be 1\").isEqualTo(1);\n+\n+        courseRepository.delete(course);\n+        assertThat(achievementRepository.findAll().contains(achievement)).as(\"Achievement gets deleted if course does\").isFalse();\n     }\n \n     @Test\n     @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n-    public void testDeleteExercise() throws Exception {\n-        initTest();\n-        request.delete(\"/api/modeling-exercises/\" + firstExercise.getId(), HttpStatus.OK);\n-        var achievementsFirstCourse = request.get(\"/api/courses/\" + firstCourse.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n-        assertThat(achievementsFirstCourse.size()).as(\"Number of achievements for user should be 4 in course \" + firstCourse.getId()).isEqualTo(4);\n-        var achievementsSecondCourse = request.get(\"/api/courses/\" + secondCourse.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n-        assertThat(achievementsSecondCourse.size()).as(\"Number of achievements for user should be 4 in course \" + secondCourse.getId()).isEqualTo(4);\n+    public void testUpdateAchievement() throws Exception {\n+        instructor.addAchievement(achievement);\n+        userRepository.save(instructor);\n+        var achievementToUpdate = achievementRepository.findById(achievement.getId()).get();\n+        achievementToUpdate.setDescription(\"Updated achievement\");\n+        request.put(\"/api/achievements\", achievementToUpdate, HttpStatus.OK);\n+        assertThat(achievementRepository.findById(achievement.getId()).get()).as(\"Achievement is updated correctly\").isEqualTo(achievementToUpdate);\n     }\n \n-    private void initTest() throws Exception {\n-        var allAchievements = achievementRepository.findAllByCourseId(firstCourse.getId());\n-        allAchievements.addAll(achievementRepository.findAllByCourseId(secondCourse.getId()));\n-\n-        for (Achievement achievement : allAchievements) {\n-            student.addAchievement(achievement);\n-            instructor.addAchievement(achievement);\n-        }\n-        student = userRepository.save(student);\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testDeleteAchievement() throws Exception {\n+        instructor.addAchievement(achievement);\n         instructor = userRepository.save(instructor);\n+        achievement = achievementRepository.save(achievement);\n+        request.delete(\"/api/achievements/\" + achievement.getId(), HttpStatus.OK);\n+\n+        assertThat(achievementRepository.findAll().size()).as(\"Achievement is deleted\").isEqualTo(0);\n+        assertThat(userRepository.findById(instructor.getId()).isPresent()).as(\"User is not deleted\").isTrue();\n+        assertThat(request.get(\"/api/achievements\", HttpStatus.OK, Set.class).size()).as(\"User has no achievements\").isEqualTo(0);\n+        assertThat(courseRepository.findById(course.getId()).isPresent()).as(\"Course is not deleted\").isTrue();\n+        var achievements = request.get(\"/api/courses/\" + course.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n+        assertThat(achievements.size()).as(\"Course has no achievements\").isEqualTo(0);\n+    }\n \n-        var achievementsFirstCourse = request.get(\"/api/courses/\" + firstCourse.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n-        assertThat(achievementsFirstCourse.size()).as(\"Number of achievements for user should be 12 in course \" + firstCourse.getId()).isEqualTo(12);\n-        var achievementsSecondCourse = request.get(\"/api/courses/\" + secondCourse.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n-        assertThat(achievementsSecondCourse.size()).as(\"Number of achievements for user should be 4 in course \" + secondCourse.getId()).isEqualTo(4);\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testBadRequests() throws Exception {\n+        var emptyAchievement = new Achievement();\n+        request.put(\"/api/achievements\", emptyAchievement, HttpStatus.BAD_REQUEST);\n+        request.delete(\"/api/achievements/17\", HttpStatus.NOT_FOUND);\n+        instructor.setGroups(new HashSet<>());\n+        userRepository.save(instructor);\n+        emptyAchievement.setId(2L);\n+        emptyAchievement.setCourse(course);\n+        request.put(\"/api/achievements\", emptyAchievement, HttpStatus.FORBIDDEN);\n+        request.delete(\"/api/achievements/\" + achievement.getId(), HttpStatus.FORBIDDEN);\n     }\n+\n }\n", "next_change": {"commit": "fd13e3d27e731c1b8d1a2dea0e1c43ae2468034b", "changed_code": [{"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\nindex be74f5c110f..57b7dc2f9ee 100644\n--- a/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\n", "chunk": "@@ -148,13 +175,13 @@ public class AchievementIntegrationTest extends AbstractSpringIntegrationBambooB\n     public void testBadRequests() throws Exception {\n         var emptyAchievement = new Achievement();\n         request.put(\"/api/achievements\", emptyAchievement, HttpStatus.BAD_REQUEST);\n-        request.delete(\"/api/achievements/17\", HttpStatus.NOT_FOUND);\n+        request.delete(\"/api/achievements/\" + 999L, HttpStatus.NOT_FOUND);\n         instructor.setGroups(new HashSet<>());\n         userRepository.save(instructor);\n         emptyAchievement.setId(2L);\n-        emptyAchievement.setCourse(course);\n+        emptyAchievement.setCourse(first_course);\n         request.put(\"/api/achievements\", emptyAchievement, HttpStatus.FORBIDDEN);\n-        request.delete(\"/api/achievements/\" + achievement.getId(), HttpStatus.FORBIDDEN);\n+        request.delete(\"/api/achievements/\" + first_achievement.getId(), HttpStatus.FORBIDDEN);\n     }\n \n }\n", "next_change": null}]}}]}}]}}]}}, {"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\nindex 3b8af6aa4c6..6d5c48c239a 100644\n--- a/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\n", "chunk": "@@ -85,101 +82,67 @@ public class AchievementIntegrationTest extends AbstractSpringIntegrationBambooB\n     }\n \n     @Test\n-    public void testManyToManyRelationToUser() {\n-        assertThat(student.getAchievements().size()).as(\"Number of achievements for user should be 0\").isEqualTo(0);\n-\n-        student.addAchievement(first_achievement);\n-        assertThat(student.getAchievements().size()).as(\"Number of achievements for user should be 1\").isEqualTo(1);\n-        assertThat(student.getAchievements().contains(first_achievement)).as(\"User has correct achievement\").isTrue();\n-        assertThat(first_achievement.getUsers().size()).as(\"Number of users for achievement should be 1\").isEqualTo(1);\n-        assertThat(first_achievement.getUsers().contains(student)).as(\"Achievement has correct user\").isTrue();\n-\n-        student.removeAchievement(first_achievement);\n-        assertThat(student.getAchievements().size()).as(\"Number of achievements for user should be 0\").isEqualTo(0);\n-        assertThat(student.getAchievements().contains(first_achievement)).as(\"User does not have removed achievement\").isFalse();\n-        assertThat(first_achievement.getUsers().size()).as(\"Number of users for achievement should be 0\").isEqualTo(0);\n-        assertThat(first_achievement.getUsers().contains(student)).as(\"Achievement does not have incorrect user\").isFalse();\n-    }\n-\n-    @Test\n-    @WithMockUser(value = \"student1\", roles = \"USER\")\n+    @WithMockUser(value = \"student1\", roles = \"ADMIN\")\n     public void testDeleteUser() throws Exception {\n-        student.addAchievement(first_achievement);\n-        student = userRepository.save(student);\n-\n-        var achievements = request.get(\"/api/achievements\", HttpStatus.OK, Set.class);\n-        assertThat(achievements.size()).as(\"Number of achievements for user should be 1\").isEqualTo(1);\n-\n-        userRepository.delete(student);\n-        assertThat(achievementService.findAll().contains(first_achievement)).as(\"Achievement does not get deleted if user does\").isTrue();\n+        initTest();\n+        request.delete(\"/api/users/\" + student.getLogin(), HttpStatus.OK);\n+        var achievementsFirstCourse = request.get(\"/api/courses/\" + firstCourse.getId() + \"/achievements\", HttpStatus.NOT_FOUND, Set.class);\n+        assertThat(achievementsFirstCourse).as(\"Achievements for user should be null in course \" + firstCourse.getId()).isNullOrEmpty();\n+        var achievementsSecondCourse = request.get(\"/api/courses/\" + secondCourse.getId() + \"/achievements\", HttpStatus.NOT_FOUND, Set.class);\n+        assertThat(achievementsSecondCourse).as(\"Achievements for user should be null in course \" + secondCourse.getId()).isNullOrEmpty();\n     }\n \n     @Test\n-    @WithMockUser(value = \"admin\", roles = \"ADMIN\")\n+    @WithMockUser(value = \"student1\", roles = \"ADMIN\")\n     public void testDeleteCourse() throws Exception {\n-        student.addAchievement(first_achievement);\n-        student = userRepository.save(student);\n-\n-        var achievements = request.get(\"/api/courses/\" + first_course.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n-        assertThat(achievements.size()).as(\"Number of achievements for course should be 2\").isEqualTo(2);\n-\n-        request.delete(\"/api/courses/\" + first_course.getId(), HttpStatus.OK);\n-        assertThat(achievementService.findAll().contains(first_achievement)).as(\"Achievement gets deleted if course does\").isFalse();\n+        initTest();\n+        var courseId = firstCourse.getId();\n+        request.delete(\"/api/courses/\" + courseId, HttpStatus.OK);\n+        var achievementsFirstCourse = request.get(\"/api/courses/\" + courseId + \"/achievements\", HttpStatus.OK, Set.class);\n+        assertThat(achievementsFirstCourse.size()).as(\"Achievements in course \" + courseId + \" get deleted if course \" + courseId + \" is deleted\").isEqualTo(0);\n+        var achievementsSecondCourse = request.get(\"/api/courses/\" + secondCourse.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n+        assertThat(achievementsSecondCourse.size()).as(\"Achievements in course \" + secondCourse.getId() + \" do not get deleted if course \" + courseId + \" is deleted\").isEqualTo(4);\n     }\n \n     @Test\n-    @WithMockUser(value = \"admin\", roles = \"ADMIN\")\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n     public void testDeleteExercise() throws Exception {\n-        student.addAchievement(first_achievement);\n-        student = userRepository.save(student);\n-\n-        var achievements = achievementService.findAllByExerciseId(first_exercise.getId());\n-        assertThat(achievements.size()).as(\"Number of achievements for course should be 2\").isEqualTo(2);\n-\n-        exerciseService.delete(first_exercise.getId(), false, false);\n-        assertThat(achievementService.findById(first_achievement.getId())).as(\"Achievement gets deleted if exercise does\").isNotPresent();\n-        assertThat(achievementService.findById(third_achievement.getId())).as(\"Achievement gets deleted if exercise does\").isNotPresent();\n+        initTest();\n+        request.delete(\"/api/modeling-exercises/\" + firstExercise.getId(), HttpStatus.OK);\n+        var achievementsFirstCourse = request.get(\"/api/courses/\" + firstCourse.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n+        assertThat(achievementsFirstCourse.size()).as(\"Number of achievements for user should be 4 in course \" + firstCourse.getId()).isEqualTo(4);\n+        var achievementsSecondCourse = request.get(\"/api/courses/\" + secondCourse.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n+        assertThat(achievementsSecondCourse.size()).as(\"Number of achievements for user should be 4 in course \" + secondCourse.getId()).isEqualTo(4);\n     }\n \n     @Test\n-    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n-    public void testUpdateAchievement() throws Exception {\n-        instructor.addAchievement(first_achievement);\n-        userRepository.save(instructor);\n-        var achievementToUpdate = achievementService.findById(first_achievement.getId()).get();\n-        achievementToUpdate.setDescription(\"Updated achievement\");\n-        request.put(\"/api/achievements\", achievementToUpdate, HttpStatus.OK);\n-        assertThat(achievementService.findById(first_achievement.getId()).get()).as(\"Achievement is updated correctly\").isEqualTo(achievementToUpdate);\n+    @WithMockUser(value = \"student1\", roles = \"USER\")\n+    public void testRewardAchievement() throws Exception {\n+        var participation = database.addParticipationForExercise(firstExercise, student.getLogin());\n+        var result = database.addResultToParticipation(participation);\n+        Set<Result> results = new HashSet<>();\n+        results.add(result);\n+        participation.setResults(results);\n+        participationRepository.save(participation);\n+        achievementService.checkForAchievements(result);\n+        var achievementsFirstCourse = request.get(\"/api/courses/\" + firstCourse.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n+        assertThat(achievementsFirstCourse.size()).as(\"User got an achievement\").isEqualTo(1);\n     }\n \n-    @Test\n-    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n-    public void testDeleteAchievement() throws Exception {\n-        instructor.addAchievement(first_achievement);\n+    private void initTest() throws Exception {\n+        var allAchievements = achievementRepository.findAllByCourseId(firstCourse.getId());\n+        allAchievements.addAll(achievementRepository.findAllByCourseId(secondCourse.getId()));\n+\n+        for (Achievement achievement : allAchievements) {\n+            student.addAchievement(achievement);\n+            instructor.addAchievement(achievement);\n+        }\n+        student = userRepository.save(student);\n         instructor = userRepository.save(instructor);\n-        first_achievement = achievementService.save(first_achievement);\n-        request.delete(\"/api/achievements/\" + first_achievement.getId(), HttpStatus.OK);\n-\n-        assertThat(achievementService.findById(first_achievement.getId())).as(\"Achievement is deleted\").isNotPresent();\n-        assertThat(userRepository.findById(instructor.getId()).isPresent()).as(\"User is not deleted\").isTrue();\n-        assertThat(request.get(\"/api/achievements\", HttpStatus.OK, Set.class).size()).as(\"User has no achievements\").isEqualTo(0);\n-        assertThat(courseService.findOne(first_course.getId())).as(\"Course is not deleted\").isNotNull();\n-        var achievements = request.get(\"/api/courses/\" + first_course.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n-        assertThat(achievements.size()).as(\"Course has only one achievement\").isEqualTo(1);\n-    }\n \n-    @Test\n-    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n-    public void testBadRequests() throws Exception {\n-        var emptyAchievement = new Achievement();\n-        request.put(\"/api/achievements\", emptyAchievement, HttpStatus.BAD_REQUEST);\n-        request.delete(\"/api/achievements/\" + 999L, HttpStatus.NOT_FOUND);\n-        instructor.setGroups(new HashSet<>());\n-        userRepository.save(instructor);\n-        emptyAchievement.setId(2L);\n-        emptyAchievement.setCourse(first_course);\n-        request.put(\"/api/achievements\", emptyAchievement, HttpStatus.FORBIDDEN);\n-        request.delete(\"/api/achievements/\" + first_achievement.getId(), HttpStatus.FORBIDDEN);\n+        var achievementsFirstCourse = request.get(\"/api/courses/\" + firstCourse.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n+        assertThat(achievementsFirstCourse.size()).as(\"Number of achievements for user should be 12 in course \" + firstCourse.getId()).isEqualTo(12);\n+        var achievementsSecondCourse = request.get(\"/api/courses/\" + secondCourse.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n+        assertThat(achievementsSecondCourse.size()).as(\"Number of achievements for user should be 4 in course \" + secondCourse.getId()).isEqualTo(4);\n     }\n-\n }\n", "next_change": {"commit": "7a5de1a37353eb19f93ef49666bba352198834cb", "changed_code": [{"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\nindex 6d5c48c239a..3b8af6aa4c6 100644\n--- a/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\n", "chunk": "@@ -82,67 +85,101 @@ public class AchievementIntegrationTest extends AbstractSpringIntegrationBambooB\n     }\n \n     @Test\n-    @WithMockUser(value = \"student1\", roles = \"ADMIN\")\n+    public void testManyToManyRelationToUser() {\n+        assertThat(student.getAchievements().size()).as(\"Number of achievements for user should be 0\").isEqualTo(0);\n+\n+        student.addAchievement(first_achievement);\n+        assertThat(student.getAchievements().size()).as(\"Number of achievements for user should be 1\").isEqualTo(1);\n+        assertThat(student.getAchievements().contains(first_achievement)).as(\"User has correct achievement\").isTrue();\n+        assertThat(first_achievement.getUsers().size()).as(\"Number of users for achievement should be 1\").isEqualTo(1);\n+        assertThat(first_achievement.getUsers().contains(student)).as(\"Achievement has correct user\").isTrue();\n+\n+        student.removeAchievement(first_achievement);\n+        assertThat(student.getAchievements().size()).as(\"Number of achievements for user should be 0\").isEqualTo(0);\n+        assertThat(student.getAchievements().contains(first_achievement)).as(\"User does not have removed achievement\").isFalse();\n+        assertThat(first_achievement.getUsers().size()).as(\"Number of users for achievement should be 0\").isEqualTo(0);\n+        assertThat(first_achievement.getUsers().contains(student)).as(\"Achievement does not have incorrect user\").isFalse();\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"USER\")\n     public void testDeleteUser() throws Exception {\n-        initTest();\n-        request.delete(\"/api/users/\" + student.getLogin(), HttpStatus.OK);\n-        var achievementsFirstCourse = request.get(\"/api/courses/\" + firstCourse.getId() + \"/achievements\", HttpStatus.NOT_FOUND, Set.class);\n-        assertThat(achievementsFirstCourse).as(\"Achievements for user should be null in course \" + firstCourse.getId()).isNullOrEmpty();\n-        var achievementsSecondCourse = request.get(\"/api/courses/\" + secondCourse.getId() + \"/achievements\", HttpStatus.NOT_FOUND, Set.class);\n-        assertThat(achievementsSecondCourse).as(\"Achievements for user should be null in course \" + secondCourse.getId()).isNullOrEmpty();\n+        student.addAchievement(first_achievement);\n+        student = userRepository.save(student);\n+\n+        var achievements = request.get(\"/api/achievements\", HttpStatus.OK, Set.class);\n+        assertThat(achievements.size()).as(\"Number of achievements for user should be 1\").isEqualTo(1);\n+\n+        userRepository.delete(student);\n+        assertThat(achievementService.findAll().contains(first_achievement)).as(\"Achievement does not get deleted if user does\").isTrue();\n     }\n \n     @Test\n-    @WithMockUser(value = \"student1\", roles = \"ADMIN\")\n+    @WithMockUser(value = \"admin\", roles = \"ADMIN\")\n     public void testDeleteCourse() throws Exception {\n-        initTest();\n-        var courseId = firstCourse.getId();\n-        request.delete(\"/api/courses/\" + courseId, HttpStatus.OK);\n-        var achievementsFirstCourse = request.get(\"/api/courses/\" + courseId + \"/achievements\", HttpStatus.OK, Set.class);\n-        assertThat(achievementsFirstCourse.size()).as(\"Achievements in course \" + courseId + \" get deleted if course \" + courseId + \" is deleted\").isEqualTo(0);\n-        var achievementsSecondCourse = request.get(\"/api/courses/\" + secondCourse.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n-        assertThat(achievementsSecondCourse.size()).as(\"Achievements in course \" + secondCourse.getId() + \" do not get deleted if course \" + courseId + \" is deleted\").isEqualTo(4);\n+        student.addAchievement(first_achievement);\n+        student = userRepository.save(student);\n+\n+        var achievements = request.get(\"/api/courses/\" + first_course.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n+        assertThat(achievements.size()).as(\"Number of achievements for course should be 2\").isEqualTo(2);\n+\n+        request.delete(\"/api/courses/\" + first_course.getId(), HttpStatus.OK);\n+        assertThat(achievementService.findAll().contains(first_achievement)).as(\"Achievement gets deleted if course does\").isFalse();\n     }\n \n     @Test\n-    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    @WithMockUser(value = \"admin\", roles = \"ADMIN\")\n     public void testDeleteExercise() throws Exception {\n-        initTest();\n-        request.delete(\"/api/modeling-exercises/\" + firstExercise.getId(), HttpStatus.OK);\n-        var achievementsFirstCourse = request.get(\"/api/courses/\" + firstCourse.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n-        assertThat(achievementsFirstCourse.size()).as(\"Number of achievements for user should be 4 in course \" + firstCourse.getId()).isEqualTo(4);\n-        var achievementsSecondCourse = request.get(\"/api/courses/\" + secondCourse.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n-        assertThat(achievementsSecondCourse.size()).as(\"Number of achievements for user should be 4 in course \" + secondCourse.getId()).isEqualTo(4);\n+        student.addAchievement(first_achievement);\n+        student = userRepository.save(student);\n+\n+        var achievements = achievementService.findAllByExerciseId(first_exercise.getId());\n+        assertThat(achievements.size()).as(\"Number of achievements for course should be 2\").isEqualTo(2);\n+\n+        exerciseService.delete(first_exercise.getId(), false, false);\n+        assertThat(achievementService.findById(first_achievement.getId())).as(\"Achievement gets deleted if exercise does\").isNotPresent();\n+        assertThat(achievementService.findById(third_achievement.getId())).as(\"Achievement gets deleted if exercise does\").isNotPresent();\n     }\n \n     @Test\n-    @WithMockUser(value = \"student1\", roles = \"USER\")\n-    public void testRewardAchievement() throws Exception {\n-        var participation = database.addParticipationForExercise(firstExercise, student.getLogin());\n-        var result = database.addResultToParticipation(participation);\n-        Set<Result> results = new HashSet<>();\n-        results.add(result);\n-        participation.setResults(results);\n-        participationRepository.save(participation);\n-        achievementService.checkForAchievements(result);\n-        var achievementsFirstCourse = request.get(\"/api/courses/\" + firstCourse.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n-        assertThat(achievementsFirstCourse.size()).as(\"User got an achievement\").isEqualTo(1);\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testUpdateAchievement() throws Exception {\n+        instructor.addAchievement(first_achievement);\n+        userRepository.save(instructor);\n+        var achievementToUpdate = achievementService.findById(first_achievement.getId()).get();\n+        achievementToUpdate.setDescription(\"Updated achievement\");\n+        request.put(\"/api/achievements\", achievementToUpdate, HttpStatus.OK);\n+        assertThat(achievementService.findById(first_achievement.getId()).get()).as(\"Achievement is updated correctly\").isEqualTo(achievementToUpdate);\n     }\n \n-    private void initTest() throws Exception {\n-        var allAchievements = achievementRepository.findAllByCourseId(firstCourse.getId());\n-        allAchievements.addAll(achievementRepository.findAllByCourseId(secondCourse.getId()));\n-\n-        for (Achievement achievement : allAchievements) {\n-            student.addAchievement(achievement);\n-            instructor.addAchievement(achievement);\n-        }\n-        student = userRepository.save(student);\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testDeleteAchievement() throws Exception {\n+        instructor.addAchievement(first_achievement);\n         instructor = userRepository.save(instructor);\n+        first_achievement = achievementService.save(first_achievement);\n+        request.delete(\"/api/achievements/\" + first_achievement.getId(), HttpStatus.OK);\n+\n+        assertThat(achievementService.findById(first_achievement.getId())).as(\"Achievement is deleted\").isNotPresent();\n+        assertThat(userRepository.findById(instructor.getId()).isPresent()).as(\"User is not deleted\").isTrue();\n+        assertThat(request.get(\"/api/achievements\", HttpStatus.OK, Set.class).size()).as(\"User has no achievements\").isEqualTo(0);\n+        assertThat(courseService.findOne(first_course.getId())).as(\"Course is not deleted\").isNotNull();\n+        var achievements = request.get(\"/api/courses/\" + first_course.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n+        assertThat(achievements.size()).as(\"Course has only one achievement\").isEqualTo(1);\n+    }\n \n-        var achievementsFirstCourse = request.get(\"/api/courses/\" + firstCourse.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n-        assertThat(achievementsFirstCourse.size()).as(\"Number of achievements for user should be 12 in course \" + firstCourse.getId()).isEqualTo(12);\n-        var achievementsSecondCourse = request.get(\"/api/courses/\" + secondCourse.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n-        assertThat(achievementsSecondCourse.size()).as(\"Number of achievements for user should be 4 in course \" + secondCourse.getId()).isEqualTo(4);\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testBadRequests() throws Exception {\n+        var emptyAchievement = new Achievement();\n+        request.put(\"/api/achievements\", emptyAchievement, HttpStatus.BAD_REQUEST);\n+        request.delete(\"/api/achievements/\" + 999L, HttpStatus.NOT_FOUND);\n+        instructor.setGroups(new HashSet<>());\n+        userRepository.save(instructor);\n+        emptyAchievement.setId(2L);\n+        emptyAchievement.setCourse(first_course);\n+        request.put(\"/api/achievements\", emptyAchievement, HttpStatus.FORBIDDEN);\n+        request.delete(\"/api/achievements/\" + first_achievement.getId(), HttpStatus.FORBIDDEN);\n     }\n+\n }\n", "next_change": {"commit": "116151629d403403ee9b750c30c182f44f70e233", "changed_code": [{"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\nindex 3b8af6aa4c6..de43c5aeb29 100644\n--- a/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\n", "chunk": "@@ -85,101 +82,53 @@ public class AchievementIntegrationTest extends AbstractSpringIntegrationBambooB\n     }\n \n     @Test\n-    public void testManyToManyRelationToUser() {\n-        assertThat(student.getAchievements().size()).as(\"Number of achievements for user should be 0\").isEqualTo(0);\n-\n-        student.addAchievement(first_achievement);\n-        assertThat(student.getAchievements().size()).as(\"Number of achievements for user should be 1\").isEqualTo(1);\n-        assertThat(student.getAchievements().contains(first_achievement)).as(\"User has correct achievement\").isTrue();\n-        assertThat(first_achievement.getUsers().size()).as(\"Number of users for achievement should be 1\").isEqualTo(1);\n-        assertThat(first_achievement.getUsers().contains(student)).as(\"Achievement has correct user\").isTrue();\n-\n-        student.removeAchievement(first_achievement);\n-        assertThat(student.getAchievements().size()).as(\"Number of achievements for user should be 0\").isEqualTo(0);\n-        assertThat(student.getAchievements().contains(first_achievement)).as(\"User does not have removed achievement\").isFalse();\n-        assertThat(first_achievement.getUsers().size()).as(\"Number of users for achievement should be 0\").isEqualTo(0);\n-        assertThat(first_achievement.getUsers().contains(student)).as(\"Achievement does not have incorrect user\").isFalse();\n-    }\n-\n-    @Test\n-    @WithMockUser(value = \"student1\", roles = \"USER\")\n+    @WithMockUser(value = \"student1\", roles = \"ADMIN\")\n     public void testDeleteUser() throws Exception {\n-        student.addAchievement(first_achievement);\n-        student = userRepository.save(student);\n-\n-        var achievements = request.get(\"/api/achievements\", HttpStatus.OK, Set.class);\n-        assertThat(achievements.size()).as(\"Number of achievements for user should be 1\").isEqualTo(1);\n-\n-        userRepository.delete(student);\n-        assertThat(achievementService.findAll().contains(first_achievement)).as(\"Achievement does not get deleted if user does\").isTrue();\n+        initTest();\n+        request.delete(\"/api/users/\" + student.getLogin(), HttpStatus.OK);\n+        var achievementsFirstCourse = request.get(\"/api/courses/\" + firstCourse.getId() + \"/achievements\", HttpStatus.NOT_FOUND, Set.class);\n+        assertThat(achievementsFirstCourse).as(\"Achievements for user should be null in course \" + firstCourse.getId()).isNullOrEmpty();\n+        var achievementsSecondCourse = request.get(\"/api/courses/\" + secondCourse.getId() + \"/achievements\", HttpStatus.NOT_FOUND, Set.class);\n+        assertThat(achievementsSecondCourse).as(\"Achievements for user should be null in course \" + secondCourse.getId()).isNullOrEmpty();\n     }\n \n     @Test\n-    @WithMockUser(value = \"admin\", roles = \"ADMIN\")\n+    @WithMockUser(value = \"student1\", roles = \"ADMIN\")\n     public void testDeleteCourse() throws Exception {\n-        student.addAchievement(first_achievement);\n-        student = userRepository.save(student);\n-\n-        var achievements = request.get(\"/api/courses/\" + first_course.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n-        assertThat(achievements.size()).as(\"Number of achievements for course should be 2\").isEqualTo(2);\n-\n-        request.delete(\"/api/courses/\" + first_course.getId(), HttpStatus.OK);\n-        assertThat(achievementService.findAll().contains(first_achievement)).as(\"Achievement gets deleted if course does\").isFalse();\n+        initTest();\n+        var courseId = firstCourse.getId();\n+        request.delete(\"/api/courses/\" + courseId, HttpStatus.OK);\n+        var achievementsFirstCourse = request.get(\"/api/courses/\" + courseId + \"/achievements\", HttpStatus.OK, Set.class);\n+        assertThat(achievementsFirstCourse.size()).as(\"Achievements in course \" + courseId + \" get deleted if course \" + courseId + \" is deleted\").isEqualTo(0);\n+        var achievementsSecondCourse = request.get(\"/api/courses/\" + secondCourse.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n+        assertThat(achievementsSecondCourse.size()).as(\"Achievements in course \" + secondCourse.getId() + \" do not get deleted if course \" + courseId + \" is deleted\").isEqualTo(4);\n     }\n \n     @Test\n-    @WithMockUser(value = \"admin\", roles = \"ADMIN\")\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n     public void testDeleteExercise() throws Exception {\n-        student.addAchievement(first_achievement);\n-        student = userRepository.save(student);\n-\n-        var achievements = achievementService.findAllByExerciseId(first_exercise.getId());\n-        assertThat(achievements.size()).as(\"Number of achievements for course should be 2\").isEqualTo(2);\n-\n-        exerciseService.delete(first_exercise.getId(), false, false);\n-        assertThat(achievementService.findById(first_achievement.getId())).as(\"Achievement gets deleted if exercise does\").isNotPresent();\n-        assertThat(achievementService.findById(third_achievement.getId())).as(\"Achievement gets deleted if exercise does\").isNotPresent();\n+        initTest();\n+        request.delete(\"/api/modeling-exercises/\" + firstExercise.getId(), HttpStatus.OK);\n+        var achievementsFirstCourse = request.get(\"/api/courses/\" + firstCourse.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n+        assertThat(achievementsFirstCourse.size()).as(\"Number of achievements for user should be 4 in course \" + firstCourse.getId()).isEqualTo(4);\n+        var achievementsSecondCourse = request.get(\"/api/courses/\" + secondCourse.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n+        assertThat(achievementsSecondCourse.size()).as(\"Number of achievements for user should be 4 in course \" + secondCourse.getId()).isEqualTo(4);\n     }\n \n-    @Test\n-    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n-    public void testUpdateAchievement() throws Exception {\n-        instructor.addAchievement(first_achievement);\n-        userRepository.save(instructor);\n-        var achievementToUpdate = achievementService.findById(first_achievement.getId()).get();\n-        achievementToUpdate.setDescription(\"Updated achievement\");\n-        request.put(\"/api/achievements\", achievementToUpdate, HttpStatus.OK);\n-        assertThat(achievementService.findById(first_achievement.getId()).get()).as(\"Achievement is updated correctly\").isEqualTo(achievementToUpdate);\n-    }\n+    private void initTest() throws Exception {\n+        var allAchievements = achievementRepository.findAllByCourseId(firstCourse.getId());\n+        allAchievements.addAll(achievementRepository.findAllByCourseId(secondCourse.getId()));\n \n-    @Test\n-    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n-    public void testDeleteAchievement() throws Exception {\n-        instructor.addAchievement(first_achievement);\n+        for (Achievement achievement : allAchievements) {\n+            student.addAchievement(achievement);\n+            instructor.addAchievement(achievement);\n+        }\n+        student = userRepository.save(student);\n         instructor = userRepository.save(instructor);\n-        first_achievement = achievementService.save(first_achievement);\n-        request.delete(\"/api/achievements/\" + first_achievement.getId(), HttpStatus.OK);\n-\n-        assertThat(achievementService.findById(first_achievement.getId())).as(\"Achievement is deleted\").isNotPresent();\n-        assertThat(userRepository.findById(instructor.getId()).isPresent()).as(\"User is not deleted\").isTrue();\n-        assertThat(request.get(\"/api/achievements\", HttpStatus.OK, Set.class).size()).as(\"User has no achievements\").isEqualTo(0);\n-        assertThat(courseService.findOne(first_course.getId())).as(\"Course is not deleted\").isNotNull();\n-        var achievements = request.get(\"/api/courses/\" + first_course.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n-        assertThat(achievements.size()).as(\"Course has only one achievement\").isEqualTo(1);\n-    }\n \n-    @Test\n-    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n-    public void testBadRequests() throws Exception {\n-        var emptyAchievement = new Achievement();\n-        request.put(\"/api/achievements\", emptyAchievement, HttpStatus.BAD_REQUEST);\n-        request.delete(\"/api/achievements/\" + 999L, HttpStatus.NOT_FOUND);\n-        instructor.setGroups(new HashSet<>());\n-        userRepository.save(instructor);\n-        emptyAchievement.setId(2L);\n-        emptyAchievement.setCourse(first_course);\n-        request.put(\"/api/achievements\", emptyAchievement, HttpStatus.FORBIDDEN);\n-        request.delete(\"/api/achievements/\" + first_achievement.getId(), HttpStatus.FORBIDDEN);\n+        var achievementsFirstCourse = request.get(\"/api/courses/\" + firstCourse.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n+        assertThat(achievementsFirstCourse.size()).as(\"Number of achievements for user should be 12 in course \" + firstCourse.getId()).isEqualTo(12);\n+        var achievementsSecondCourse = request.get(\"/api/courses/\" + secondCourse.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n+        assertThat(achievementsSecondCourse.size()).as(\"Number of achievements for user should be 4 in course \" + secondCourse.getId()).isEqualTo(4);\n     }\n-\n }\n", "next_change": {"commit": "d85f5f34a571777d2b7558382f25bf6bc7434049", "changed_code": [{"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\nindex de43c5aeb29..be74f5c110f 100644\n--- a/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\n", "chunk": "@@ -82,53 +77,84 @@ public class AchievementIntegrationTest extends AbstractSpringIntegrationBambooB\n     }\n \n     @Test\n-    @WithMockUser(value = \"student1\", roles = \"ADMIN\")\n+    public void testManyToManyRelationToUser() {\n+        assertThat(student.getAchievements().size()).as(\"Number of achievements for user should be 0\").isEqualTo(0);\n+\n+        student.addAchievement(achievement);\n+        assertThat(student.getAchievements().size()).as(\"Number of achievements for user should be 1\").isEqualTo(1);\n+        assertThat(student.getAchievements().contains(achievement)).as(\"User has correct achievement\").isTrue();\n+        assertThat(achievement.getUsers().size()).as(\"Number of users for achievement should be 1\").isEqualTo(1);\n+        assertThat(achievement.getUsers().contains(student)).as(\"Achievement has correct user\").isTrue();\n+\n+        student.removeAchievement(achievement);\n+        assertThat(student.getAchievements().size()).as(\"Number of achievements for user should be 0\").isEqualTo(0);\n+        assertThat(student.getAchievements().contains(achievement)).as(\"User does not have removed achievement\").isFalse();\n+        assertThat(achievement.getUsers().size()).as(\"Number of users for achievement should be 0\").isEqualTo(0);\n+        assertThat(achievement.getUsers().contains(student)).as(\"Achievement does not have incorrect user\").isFalse();\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"USER\")\n     public void testDeleteUser() throws Exception {\n-        initTest();\n-        request.delete(\"/api/users/\" + student.getLogin(), HttpStatus.OK);\n-        var achievementsFirstCourse = request.get(\"/api/courses/\" + firstCourse.getId() + \"/achievements\", HttpStatus.NOT_FOUND, Set.class);\n-        assertThat(achievementsFirstCourse).as(\"Achievements for user should be null in course \" + firstCourse.getId()).isNullOrEmpty();\n-        var achievementsSecondCourse = request.get(\"/api/courses/\" + secondCourse.getId() + \"/achievements\", HttpStatus.NOT_FOUND, Set.class);\n-        assertThat(achievementsSecondCourse).as(\"Achievements for user should be null in course \" + secondCourse.getId()).isNullOrEmpty();\n+        student.addAchievement(achievement);\n+        student = userRepository.save(student);\n+\n+        var achievements = request.get(\"/api/achievements\", HttpStatus.OK, Set.class);\n+        assertThat(achievements.size()).as(\"Number of achievements for user should be 1\").isEqualTo(1);\n+\n+        userRepository.delete(student);\n+        assertThat(achievementRepository.findAll().contains(achievement)).as(\"Achievement does not get deleted if user does\").isTrue();\n     }\n \n     @Test\n-    @WithMockUser(value = \"student1\", roles = \"ADMIN\")\n+    @WithMockUser(value = \"student1\", roles = \"USER\")\n     public void testDeleteCourse() throws Exception {\n-        initTest();\n-        var courseId = firstCourse.getId();\n-        request.delete(\"/api/courses/\" + courseId, HttpStatus.OK);\n-        var achievementsFirstCourse = request.get(\"/api/courses/\" + courseId + \"/achievements\", HttpStatus.OK, Set.class);\n-        assertThat(achievementsFirstCourse.size()).as(\"Achievements in course \" + courseId + \" get deleted if course \" + courseId + \" is deleted\").isEqualTo(0);\n-        var achievementsSecondCourse = request.get(\"/api/courses/\" + secondCourse.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n-        assertThat(achievementsSecondCourse.size()).as(\"Achievements in course \" + secondCourse.getId() + \" do not get deleted if course \" + courseId + \" is deleted\").isEqualTo(4);\n+        var achievements = request.get(\"/api/courses/\" + course.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n+        assertThat(achievements.size()).as(\"Number of achievements for course should be 1\").isEqualTo(1);\n+\n+        courseRepository.delete(course);\n+        assertThat(achievementRepository.findAll().contains(achievement)).as(\"Achievement gets deleted if course does\").isFalse();\n     }\n \n     @Test\n     @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n-    public void testDeleteExercise() throws Exception {\n-        initTest();\n-        request.delete(\"/api/modeling-exercises/\" + firstExercise.getId(), HttpStatus.OK);\n-        var achievementsFirstCourse = request.get(\"/api/courses/\" + firstCourse.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n-        assertThat(achievementsFirstCourse.size()).as(\"Number of achievements for user should be 4 in course \" + firstCourse.getId()).isEqualTo(4);\n-        var achievementsSecondCourse = request.get(\"/api/courses/\" + secondCourse.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n-        assertThat(achievementsSecondCourse.size()).as(\"Number of achievements for user should be 4 in course \" + secondCourse.getId()).isEqualTo(4);\n+    public void testUpdateAchievement() throws Exception {\n+        instructor.addAchievement(achievement);\n+        userRepository.save(instructor);\n+        var achievementToUpdate = achievementRepository.findById(achievement.getId()).get();\n+        achievementToUpdate.setDescription(\"Updated achievement\");\n+        request.put(\"/api/achievements\", achievementToUpdate, HttpStatus.OK);\n+        assertThat(achievementRepository.findById(achievement.getId()).get()).as(\"Achievement is updated correctly\").isEqualTo(achievementToUpdate);\n     }\n \n-    private void initTest() throws Exception {\n-        var allAchievements = achievementRepository.findAllByCourseId(firstCourse.getId());\n-        allAchievements.addAll(achievementRepository.findAllByCourseId(secondCourse.getId()));\n-\n-        for (Achievement achievement : allAchievements) {\n-            student.addAchievement(achievement);\n-            instructor.addAchievement(achievement);\n-        }\n-        student = userRepository.save(student);\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testDeleteAchievement() throws Exception {\n+        instructor.addAchievement(achievement);\n         instructor = userRepository.save(instructor);\n+        achievement = achievementRepository.save(achievement);\n+        request.delete(\"/api/achievements/\" + achievement.getId(), HttpStatus.OK);\n+\n+        assertThat(achievementRepository.findAll().size()).as(\"Achievement is deleted\").isEqualTo(0);\n+        assertThat(userRepository.findById(instructor.getId()).isPresent()).as(\"User is not deleted\").isTrue();\n+        assertThat(request.get(\"/api/achievements\", HttpStatus.OK, Set.class).size()).as(\"User has no achievements\").isEqualTo(0);\n+        assertThat(courseRepository.findById(course.getId()).isPresent()).as(\"Course is not deleted\").isTrue();\n+        var achievements = request.get(\"/api/courses/\" + course.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n+        assertThat(achievements.size()).as(\"Course has no achievements\").isEqualTo(0);\n+    }\n \n-        var achievementsFirstCourse = request.get(\"/api/courses/\" + firstCourse.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n-        assertThat(achievementsFirstCourse.size()).as(\"Number of achievements for user should be 12 in course \" + firstCourse.getId()).isEqualTo(12);\n-        var achievementsSecondCourse = request.get(\"/api/courses/\" + secondCourse.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n-        assertThat(achievementsSecondCourse.size()).as(\"Number of achievements for user should be 4 in course \" + secondCourse.getId()).isEqualTo(4);\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testBadRequests() throws Exception {\n+        var emptyAchievement = new Achievement();\n+        request.put(\"/api/achievements\", emptyAchievement, HttpStatus.BAD_REQUEST);\n+        request.delete(\"/api/achievements/17\", HttpStatus.NOT_FOUND);\n+        instructor.setGroups(new HashSet<>());\n+        userRepository.save(instructor);\n+        emptyAchievement.setId(2L);\n+        emptyAchievement.setCourse(course);\n+        request.put(\"/api/achievements\", emptyAchievement, HttpStatus.FORBIDDEN);\n+        request.delete(\"/api/achievements/\" + achievement.getId(), HttpStatus.FORBIDDEN);\n     }\n+\n }\n", "next_change": {"commit": "fd13e3d27e731c1b8d1a2dea0e1c43ae2468034b", "changed_code": [{"header": "diff --git a/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java b/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\nindex be74f5c110f..57b7dc2f9ee 100644\n--- a/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\n+++ b/src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java\n", "chunk": "@@ -148,13 +175,13 @@ public class AchievementIntegrationTest extends AbstractSpringIntegrationBambooB\n     public void testBadRequests() throws Exception {\n         var emptyAchievement = new Achievement();\n         request.put(\"/api/achievements\", emptyAchievement, HttpStatus.BAD_REQUEST);\n-        request.delete(\"/api/achievements/17\", HttpStatus.NOT_FOUND);\n+        request.delete(\"/api/achievements/\" + 999L, HttpStatus.NOT_FOUND);\n         instructor.setGroups(new HashSet<>());\n         userRepository.save(instructor);\n         emptyAchievement.setId(2L);\n-        emptyAchievement.setCourse(course);\n+        emptyAchievement.setCourse(first_course);\n         request.put(\"/api/achievements\", emptyAchievement, HttpStatus.FORBIDDEN);\n-        request.delete(\"/api/achievements/\" + achievement.getId(), HttpStatus.FORBIDDEN);\n+        request.delete(\"/api/achievements/\" + first_achievement.getId(), HttpStatus.FORBIDDEN);\n     }\n \n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}, {"oid": "d85f5f34a571777d2b7558382f25bf6bc7434049", "url": "https://github.com/ls1intum/Artemis/commit/d85f5f34a571777d2b7558382f25bf6bc7434049", "message": "remove unnecessary changesets", "committedDate": "2020-09-01T08:01:09Z", "type": "commit"}, {"oid": "fd13e3d27e731c1b8d1a2dea0e1c43ae2468034b", "url": "https://github.com/ls1intum/Artemis/commit/fd13e3d27e731c1b8d1a2dea0e1c43ae2468034b", "message": "integrate feedback", "committedDate": "2020-09-01T16:16:55Z", "type": "commit"}, {"oid": "4b93d0e90fde6137e06a126e85edefb5814f653c", "url": "https://github.com/ls1intum/Artemis/commit/4b93d0e90fde6137e06a126e85edefb5814f653c", "message": "Merge branch 'develop' into feature/achievements/storage", "committedDate": "2020-09-01T16:18:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMzNzY2NQ==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r481337665", "body": "Should be `findAllWithEagerAchivement` or not? \r\nI think this would be more understandable, when you do it the other way around. \r\nSo in the AchievementRepository and make `findByIdWithEagerUsers(achievementId)`", "bodyText": "Should be findAllWithEagerAchivement or not?\nI think this would be more understandable, when you do it the other way around.\nSo in the AchievementRepository and make findByIdWithEagerUsers(achievementId)", "bodyHTML": "<p dir=\"auto\">Should be <code>findAllWithEagerAchivement</code> or not?<br>\nI think this would be more understandable, when you do it the other way around.<br>\nSo in the AchievementRepository and make <code>findByIdWithEagerUsers(achievementId)</code></p>", "author": "fde312", "createdAt": "2020-09-01T18:12:27Z", "path": "src/main/java/de/tum/in/www1/artemis/repository/UserRepository.java", "diffHunk": "@@ -96,4 +96,7 @@\n \n     @Query(\"select distinct team.students from Team team where team.exercise.course.id = :#{#courseId} and team.shortName = :#{#teamShortName}\")\n     Set<User> findAllInTeam(@Param(\"courseId\") Long courseId, @Param(\"teamShortName\") String teamShortName);\n+\n+    @Query(\"SELECT u FROM User u JOIN FETCH u.achievements a WHERE a.id = :#{#achievementId}\")\n+    Set<User> findAllWithEagerAchievements(@Param(\"achievementId\") Long achievementId);", "originalCommit": "4b93d0e90fde6137e06a126e85edefb5814f653c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM0Mjg5NA==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r481342894", "bodyText": "yeah, a renaming to findAllByAchievementId makes sense, but I do want to get the users", "author": "balazs-czopf", "createdAt": "2020-09-01T18:21:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMzNzY2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQxMTAwNg==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r481411006", "bodyText": "sounds good! :)", "author": "fde312", "createdAt": "2020-09-01T20:26:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMzNzY2NQ=="}], "type": "inlineReview", "revised_code": {"commit": "6aa68b0ab7a071fa631c7c72cdb8ea02ccf15a39", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/repository/UserRepository.java b/src/main/java/de/tum/in/www1/artemis/repository/UserRepository.java\nindex cbafbffe0db..958daac0263 100644\n--- a/src/main/java/de/tum/in/www1/artemis/repository/UserRepository.java\n+++ b/src/main/java/de/tum/in/www1/artemis/repository/UserRepository.java\n", "chunk": "@@ -98,5 +98,5 @@ public interface UserRepository extends JpaRepository<User, Long> {\n     Set<User> findAllInTeam(@Param(\"courseId\") Long courseId, @Param(\"teamShortName\") String teamShortName);\n \n     @Query(\"SELECT u FROM User u JOIN FETCH u.achievements a WHERE a.id = :#{#achievementId}\")\n-    Set<User> findAllWithEagerAchievements(@Param(\"achievementId\") Long achievementId);\n+    Set<User> findAllByAchievementId(@Param(\"achievementId\") Long achievementId);\n }\n", "next_change": {"commit": "8d5bfc049d9e75323290b069e7343df6fc579ee7", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/repository/UserRepository.java b/src/main/java/de/tum/in/www1/artemis/repository/UserRepository.java\nindex 958daac0263..0fa1e2d9419 100644\n--- a/src/main/java/de/tum/in/www1/artemis/repository/UserRepository.java\n+++ b/src/main/java/de/tum/in/www1/artemis/repository/UserRepository.java\n", "chunk": "@@ -96,7 +96,4 @@ public interface UserRepository extends JpaRepository<User, Long> {\n \n     @Query(\"select distinct team.students from Team team where team.exercise.course.id = :#{#courseId} and team.shortName = :#{#teamShortName}\")\n     Set<User> findAllInTeam(@Param(\"courseId\") Long courseId, @Param(\"teamShortName\") String teamShortName);\n-\n-    @Query(\"SELECT u FROM User u JOIN FETCH u.achievements a WHERE a.id = :#{#achievementId}\")\n-    Set<User> findAllByAchievementId(@Param(\"achievementId\") Long achievementId);\n }\n", "next_change": {"commit": "7a5de1a37353eb19f93ef49666bba352198834cb", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/repository/UserRepository.java b/src/main/java/de/tum/in/www1/artemis/repository/UserRepository.java\nindex 0fa1e2d9419..958daac0263 100644\n--- a/src/main/java/de/tum/in/www1/artemis/repository/UserRepository.java\n+++ b/src/main/java/de/tum/in/www1/artemis/repository/UserRepository.java\n", "chunk": "@@ -96,4 +96,7 @@ public interface UserRepository extends JpaRepository<User, Long> {\n \n     @Query(\"select distinct team.students from Team team where team.exercise.course.id = :#{#courseId} and team.shortName = :#{#teamShortName}\")\n     Set<User> findAllInTeam(@Param(\"courseId\") Long courseId, @Param(\"teamShortName\") String teamShortName);\n+\n+    @Query(\"SELECT u FROM User u JOIN FETCH u.achievements a WHERE a.id = :#{#achievementId}\")\n+    Set<User> findAllByAchievementId(@Param(\"achievementId\") Long achievementId);\n }\n", "next_change": {"commit": "116151629d403403ee9b750c30c182f44f70e233", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/repository/UserRepository.java b/src/main/java/de/tum/in/www1/artemis/repository/UserRepository.java\nindex 958daac0263..0fa1e2d9419 100644\n--- a/src/main/java/de/tum/in/www1/artemis/repository/UserRepository.java\n+++ b/src/main/java/de/tum/in/www1/artemis/repository/UserRepository.java\n", "chunk": "@@ -96,7 +96,4 @@ public interface UserRepository extends JpaRepository<User, Long> {\n \n     @Query(\"select distinct team.students from Team team where team.exercise.course.id = :#{#courseId} and team.shortName = :#{#teamShortName}\")\n     Set<User> findAllInTeam(@Param(\"courseId\") Long courseId, @Param(\"teamShortName\") String teamShortName);\n-\n-    @Query(\"SELECT u FROM User u JOIN FETCH u.achievements a WHERE a.id = :#{#achievementId}\")\n-    Set<User> findAllByAchievementId(@Param(\"achievementId\") Long achievementId);\n }\n", "next_change": {"commit": "e71c08bfb8259e519230dcb95a44996794c4e79e", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/repository/UserRepository.java b/src/main/java/de/tum/in/www1/artemis/repository/UserRepository.java\nindex 0fa1e2d9419..958daac0263 100644\n--- a/src/main/java/de/tum/in/www1/artemis/repository/UserRepository.java\n+++ b/src/main/java/de/tum/in/www1/artemis/repository/UserRepository.java\n", "chunk": "@@ -96,4 +96,7 @@ public interface UserRepository extends JpaRepository<User, Long> {\n \n     @Query(\"select distinct team.students from Team team where team.exercise.course.id = :#{#courseId} and team.shortName = :#{#teamShortName}\")\n     Set<User> findAllInTeam(@Param(\"courseId\") Long courseId, @Param(\"teamShortName\") String teamShortName);\n+\n+    @Query(\"SELECT u FROM User u JOIN FETCH u.achievements a WHERE a.id = :#{#achievementId}\")\n+    Set<User> findAllByAchievementId(@Param(\"achievementId\") Long achievementId);\n }\n", "next_change": null}]}}]}}]}}]}}]}}, {"oid": "e71c08bfb8259e519230dcb95a44996794c4e79e", "url": "https://github.com/ls1intum/Artemis/commit/e71c08bfb8259e519230dcb95a44996794c4e79e", "message": "change query function name", "committedDate": "2020-09-01T20:26:30Z", "type": "commit"}, {"oid": "9508d2e30a1f565543bf539723faac6031854da4", "url": "https://github.com/ls1intum/Artemis/commit/9508d2e30a1f565543bf539723faac6031854da4", "message": "Merge branch 'develop' into feature/achievements/storage", "committedDate": "2020-09-01T20:28:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQxNTAzMg==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r481415032", "body": "Maybe rename this to `AchievementRank` so that one can see directly that this belongs to achievements :) ", "bodyText": "Maybe rename this to AchievementRank so that one can see directly that this belongs to achievements :)", "bodyHTML": "<p dir=\"auto\">Maybe rename this to <code>AchievementRank</code> so that one can see directly that this belongs to achievements :)</p>", "author": "fde312", "createdAt": "2020-09-01T20:34:55Z", "path": "src/main/java/de/tum/in/www1/artemis/domain/enumeration/Rank.java", "diffHunk": "@@ -0,0 +1,8 @@\n+package de.tum.in.www1.artemis.domain.enumeration;\n+", "originalCommit": "9508d2e30a1f565543bf539723faac6031854da4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQxNTgzNw==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r481415837", "bodyText": "Good point :) done so", "author": "balazs-czopf", "createdAt": "2020-09-01T20:36:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQxNTAzMg=="}], "type": "inlineReview", "revised_code": {"commit": "6aa68b0ab7a071fa631c7c72cdb8ea02ccf15a39", "changed_code": [{"header": "diff --git a/src/main/java/de/tum/in/www1/artemis/domain/enumeration/Rank.java b/src/main/java/de/tum/in/www1/artemis/domain/enumeration/AchievementRank.java\nsimilarity index 81%\nrename from src/main/java/de/tum/in/www1/artemis/domain/enumeration/Rank.java\nrename to src/main/java/de/tum/in/www1/artemis/domain/enumeration/AchievementRank.java\nindex 5e437f4a8a4..6c8e5340c3c 100644\n--- a/src/main/java/de/tum/in/www1/artemis/domain/enumeration/Rank.java\n+++ b/src/main/java/de/tum/in/www1/artemis/domain/enumeration/AchievementRank.java\n", "chunk": "@@ -3,6 +3,6 @@ package de.tum.in.www1.artemis.domain.enumeration;\n /**\n  * Rank enumeration for Achievements.\n  */\n-public enum Rank {\n+public enum AchievementRank {\n     UNRANKED, BRONZE, SILVER, GOLD\n }\n", "next_change": null}]}}, {"oid": "9d6b585f50ea18da108af99466daf80870a21a0b", "url": "https://github.com/ls1intum/Artemis/commit/9d6b585f50ea18da108af99466daf80870a21a0b", "message": "rename rank enum", "committedDate": "2020-09-01T20:35:23Z", "type": "commit"}, {"oid": "c842d6d85c758969dce647319d9e503bc90b7c11", "url": "https://github.com/ls1intum/Artemis/commit/c842d6d85c758969dce647319d9e503bc90b7c11", "message": "Merge branch 'feature/achievements/storage' of https://github.com/ls1intum/Artemis into feature/achievements/storage", "committedDate": "2020-09-01T20:35:57Z", "type": "commit"}, {"oid": "efe97b904e2506356b25a51a137cc654e2ffb140", "url": "https://github.com/ls1intum/Artemis/commit/efe97b904e2506356b25a51a137cc654e2ffb140", "message": "add javadoc", "committedDate": "2020-09-01T20:52:36Z", "type": "commit"}]}