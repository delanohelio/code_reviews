{"pr_number": 2641, "pr_title": "[MO] - [refactor] -> fileutils reworked to try with resource", "pr_author": "see-quick", "pr_createdAt": "2020-03-04T08:38:52Z", "pr_url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2641", "timeline": [{"oid": "0f9a318517fd8f17907f5fe5b2ee97337d1b40aa", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/0f9a318517fd8f17907f5fe5b2ee97337d1b40aa", "message": "[MO] - [refactor] -> fileutils reworked to try with resource\n\nSigned-off-by: see-quick <xorsak02@stud.fit.vutbr.cz>", "committedDate": "2020-03-04T08:35:34Z", "type": "commit"}, {"oid": "1af056d662d33d1ee52b7f11ff95e2583a974e86", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/1af056d662d33d1ee52b7f11ff95e2583a974e86", "message": "[MO] - [update] -ss\n\nSigned-off-by: see-quick <xorsak02@stud.fit.vutbr.cz>", "committedDate": "2020-03-04T08:47:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzUyMDQxMw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2641#discussion_r387520413", "body": "This case of the zip entry being a directory is no longer handled. ", "bodyText": "This case of the zip entry being a directory is no longer handled.", "bodyHTML": "<p dir=\"auto\">This case of the zip entry being a directory is no longer handled.</p>", "author": "tombentley", "createdAt": "2020-03-04T08:46:37Z", "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/FileUtils.java", "diffHunk": "@@ -30,132 +30,73 @@ private FileUtils() { }\n \n     @SuppressFBWarnings(\"RV_RETURN_VALUE_IGNORED_BAD_PRACTICE\")\n     public static File downloadAndUnzip(String url) {\n-        File dir = null;\n-        FileOutputStream fout = null;\n-        ZipInputStream zin = null;\n-        try {\n-            InputStream bais = (InputStream) URI.create(url).toURL().openConnection().getContent();\n-            dir = Files.createTempDirectory(FileUtils.class.getName()).toFile();\n+\n+        try (InputStream bais = (InputStream) URI.create(url).toURL().openConnection().getContent();\n+             ZipInputStream zin = new ZipInputStream(bais)){\n+\n+            File dir = Files.createTempDirectory(FileUtils.class.getName()).toFile();\n             dir.deleteOnExit();\n-            zin = new ZipInputStream(bais);\n+\n             ZipEntry entry = zin.getNextEntry();\n             byte[] buffer = new byte[8 * 1024];\n             int len;\n             while (entry != null) {\n                 File file = new File(dir, entry.getName());\n-                if (entry.isDirectory()) {", "originalCommit": "0f9a318517fd8f17907f5fe5b2ee97337d1b40aa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU4MDMwOA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2641#discussion_r387580308", "bodyText": "So you propose to make something like that\n               if (entry.isDirectory()) {\n                    LOGGER.info(\"Entry is not directory...?\");\n                    file.mkdirs();\n                } else {\n                    try (FileOutputStream fout = new FileOutputStream(file)) {\n                        while ((len = zin.read(buffer)) != -1) {\n                            fout.write(buffer, 0, len);\n                        }\n                    }\n                }\n\nWhat actually file.mkdirs(); will do?", "author": "see-quick", "createdAt": "2020-03-04T10:35:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzUyMDQxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU4NzAxNQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2641#discussion_r387587015", "bodyText": "There's this thing called Javadoc, you really should check it out \ud83d\ude09... It will create directories which don't exist. mkdir() (singular) will just create a single dir, failing if the parent doesn't exist. mkdirs() will create parent (and all the way up, as necessary).\nThe truth is that malformed zips are not unheard of (e.g. missing directory entries, or directory entries after file entries in that directory), so you probably should mkdirs(file.getParentFile()) even in the else block.", "author": "tombentley", "createdAt": "2020-03-04T10:47:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzUyMDQxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzYwODc5Mw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2641#discussion_r387608793", "bodyText": "Thanks for the exlanation and sorry for stupid question...Anyway i come up with the following sollution on this problem based on https://stackoverflow.com/questions/27904329/warning-file-mkdir-is-ignored", "author": "see-quick", "createdAt": "2020-03-04T11:32:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzUyMDQxMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzUyMDcyMw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2641#discussion_r387520723", "body": "I guess we should fix the captialization `NameSpace` \u2192 `Namespace`", "bodyText": "I guess we should fix the captialization NameSpace \u2192 Namespace", "bodyHTML": "<p dir=\"auto\">I guess we should fix the captialization <code>NameSpace</code> \u2192 <code>Namespace</code></p>", "author": "tombentley", "createdAt": "2020-03-04T08:47:16Z", "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/FileUtils.java", "diffHunk": "@@ -30,132 +30,73 @@ private FileUtils() { }\n \n     @SuppressFBWarnings(\"RV_RETURN_VALUE_IGNORED_BAD_PRACTICE\")\n     public static File downloadAndUnzip(String url) {\n-        File dir = null;\n-        FileOutputStream fout = null;\n-        ZipInputStream zin = null;\n-        try {\n-            InputStream bais = (InputStream) URI.create(url).toURL().openConnection().getContent();\n-            dir = Files.createTempDirectory(FileUtils.class.getName()).toFile();\n+\n+        try (InputStream bais = (InputStream) URI.create(url).toURL().openConnection().getContent();\n+             ZipInputStream zin = new ZipInputStream(bais)){\n+\n+            File dir = Files.createTempDirectory(FileUtils.class.getName()).toFile();\n             dir.deleteOnExit();\n-            zin = new ZipInputStream(bais);\n+\n             ZipEntry entry = zin.getNextEntry();\n             byte[] buffer = new byte[8 * 1024];\n             int len;\n             while (entry != null) {\n                 File file = new File(dir, entry.getName());\n-                if (entry.isDirectory()) {\n-                    file.mkdirs();\n-                } else {\n-                    fout = new FileOutputStream(file);\n+                try (FileOutputStream fout = new FileOutputStream(file)) {\n                     while ((len = zin.read(buffer)) != -1) {\n                         fout.write(buffer, 0, len);\n                     }\n-                    fout.close();\n                 }\n                 entry = zin.getNextEntry();\n             }\n         } catch (IOException e) {\n             LOGGER.error(\"IOException {}\", e.getMessage());\n-        } finally {\n-            if (fout != null) {\n-                try {\n-                    fout.close();\n-                } catch (IOException e) {\n-                    LOGGER.error(\"IOException {}\", e.getMessage());\n-                }\n-            }\n-            if (zin != null) {\n-                try {\n-                    zin.close();\n-                } catch (IOException e) {\n-                    e.printStackTrace();\n-                }\n-            }\n         }\n-        return dir;\n+        return null;\n     }\n \n-    public static File downloadYamlAndReplaceNameSpace(String url, String namespace) {\n-        InputStream bais = null;\n-        BufferedReader br = null;\n-        OutputStreamWriter osw = null;\n+    public static File downloadYamlAndReplaceNameSpace(String url, String namespace) throws IOException {", "originalCommit": "0f9a318517fd8f17907f5fe5b2ee97337d1b40aa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU4MTIwMA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2641#discussion_r387581200", "bodyText": "make sense )", "author": "see-quick", "createdAt": "2020-03-04T10:37:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzUyMDcyMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzUyMTM1MA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2641#discussion_r387521350", "body": "Wrapping into a `RuntimeException` is preferred, because it's much less easily overlooked.", "bodyText": "Wrapping into a RuntimeException is preferred, because it's much less easily overlooked.", "bodyHTML": "<p dir=\"auto\">Wrapping into a <code>RuntimeException</code> is preferred, because it's much less easily overlooked.</p>", "author": "tombentley", "createdAt": "2020-03-04T08:48:36Z", "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/FileUtils.java", "diffHunk": "@@ -30,132 +30,73 @@ private FileUtils() { }\n \n     @SuppressFBWarnings(\"RV_RETURN_VALUE_IGNORED_BAD_PRACTICE\")\n     public static File downloadAndUnzip(String url) {\n-        File dir = null;\n-        FileOutputStream fout = null;\n-        ZipInputStream zin = null;\n-        try {\n-            InputStream bais = (InputStream) URI.create(url).toURL().openConnection().getContent();\n-            dir = Files.createTempDirectory(FileUtils.class.getName()).toFile();\n+\n+        try (InputStream bais = (InputStream) URI.create(url).toURL().openConnection().getContent();\n+             ZipInputStream zin = new ZipInputStream(bais)){\n+\n+            File dir = Files.createTempDirectory(FileUtils.class.getName()).toFile();\n             dir.deleteOnExit();\n-            zin = new ZipInputStream(bais);\n+\n             ZipEntry entry = zin.getNextEntry();\n             byte[] buffer = new byte[8 * 1024];\n             int len;\n             while (entry != null) {\n                 File file = new File(dir, entry.getName());\n-                if (entry.isDirectory()) {\n-                    file.mkdirs();\n-                } else {\n-                    fout = new FileOutputStream(file);\n+                try (FileOutputStream fout = new FileOutputStream(file)) {\n                     while ((len = zin.read(buffer)) != -1) {\n                         fout.write(buffer, 0, len);\n                     }\n-                    fout.close();\n                 }\n                 entry = zin.getNextEntry();\n             }\n         } catch (IOException e) {\n             LOGGER.error(\"IOException {}\", e.getMessage());\n-        } finally {\n-            if (fout != null) {\n-                try {\n-                    fout.close();\n-                } catch (IOException e) {\n-                    LOGGER.error(\"IOException {}\", e.getMessage());\n-                }\n-            }\n-            if (zin != null) {\n-                try {\n-                    zin.close();\n-                } catch (IOException e) {\n-                    e.printStackTrace();\n-                }\n-            }\n         }\n-        return dir;\n+        return null;\n     }\n \n-    public static File downloadYamlAndReplaceNameSpace(String url, String namespace) {\n-        InputStream bais = null;\n-        BufferedReader br = null;\n-        OutputStreamWriter osw = null;\n+    public static File downloadYamlAndReplaceNameSpace(String url, String namespace) throws IOException {\n+        File yamlFile = File.createTempFile(\"temp-file\", \".yaml\");\n+\n+        try (InputStream bais = (InputStream) URI.create(url).toURL().openConnection().getContent();\n+             BufferedReader br = new BufferedReader(new InputStreamReader(bais, StandardCharsets.UTF_8));\n+             OutputStreamWriter osw = new OutputStreamWriter(new FileOutputStream(yamlFile), StandardCharsets.UTF_8)){\n \n-        try {\n-            bais = (InputStream) URI.create(url).toURL().openConnection().getContent();\n             StringBuilder sb = new StringBuilder();\n-            br = new BufferedReader(new InputStreamReader(bais, StandardCharsets.UTF_8));\n+\n             String read;\n             while ((read = br.readLine()) != null) {\n-                sb.append(read + \"\\n\");\n+                sb.append(read);\n+                sb.append(\"\\n\");\n             }\n-            br.close();\n             String yaml = sb.toString();\n-            File yamlFile = File.createTempFile(\"temp-file\", \".yaml\");\n-            osw = new OutputStreamWriter(new FileOutputStream(yamlFile), StandardCharsets.UTF_8);\n             yaml = yaml.replaceAll(\"namespace: .*\", \"namespace: \" + namespace);\n             yaml = yaml.replace(\"securityContext:\\n\" +\n                 \"        runAsNonRoot: true\\n\" +\n                 \"        runAsUser: 65534\", \"\");\n             osw.write(yaml);\n-            osw.close();\n             return yamlFile;\n \n         } catch (IOException e) {\n             e.printStackTrace();", "originalCommit": "0f9a318517fd8f17907f5fe5b2ee97337d1b40aa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzUyMTUzNg==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2641#discussion_r387521536", "body": "I don't think you need the `;`", "bodyText": "I don't think you need the ;", "bodyHTML": "<p dir=\"auto\">I don't think you need the <code>;</code></p>", "author": "tombentley", "createdAt": "2020-03-04T08:49:01Z", "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/FileUtils.java", "diffHunk": "@@ -30,132 +30,73 @@ private FileUtils() { }\n \n     @SuppressFBWarnings(\"RV_RETURN_VALUE_IGNORED_BAD_PRACTICE\")\n     public static File downloadAndUnzip(String url) {\n-        File dir = null;\n-        FileOutputStream fout = null;\n-        ZipInputStream zin = null;\n-        try {\n-            InputStream bais = (InputStream) URI.create(url).toURL().openConnection().getContent();\n-            dir = Files.createTempDirectory(FileUtils.class.getName()).toFile();\n+\n+        try (InputStream bais = (InputStream) URI.create(url).toURL().openConnection().getContent();\n+             ZipInputStream zin = new ZipInputStream(bais)){\n+\n+            File dir = Files.createTempDirectory(FileUtils.class.getName()).toFile();\n             dir.deleteOnExit();\n-            zin = new ZipInputStream(bais);\n+\n             ZipEntry entry = zin.getNextEntry();\n             byte[] buffer = new byte[8 * 1024];\n             int len;\n             while (entry != null) {\n                 File file = new File(dir, entry.getName());\n-                if (entry.isDirectory()) {\n-                    file.mkdirs();\n-                } else {\n-                    fout = new FileOutputStream(file);\n+                try (FileOutputStream fout = new FileOutputStream(file)) {\n                     while ((len = zin.read(buffer)) != -1) {\n                         fout.write(buffer, 0, len);\n                     }\n-                    fout.close();\n                 }\n                 entry = zin.getNextEntry();\n             }\n         } catch (IOException e) {\n             LOGGER.error(\"IOException {}\", e.getMessage());\n-        } finally {\n-            if (fout != null) {\n-                try {\n-                    fout.close();\n-                } catch (IOException e) {\n-                    LOGGER.error(\"IOException {}\", e.getMessage());\n-                }\n-            }\n-            if (zin != null) {\n-                try {\n-                    zin.close();\n-                } catch (IOException e) {\n-                    e.printStackTrace();\n-                }\n-            }\n         }\n-        return dir;\n+        return null;\n     }\n \n-    public static File downloadYamlAndReplaceNameSpace(String url, String namespace) {\n-        InputStream bais = null;\n-        BufferedReader br = null;\n-        OutputStreamWriter osw = null;\n+    public static File downloadYamlAndReplaceNameSpace(String url, String namespace) throws IOException {\n+        File yamlFile = File.createTempFile(\"temp-file\", \".yaml\");\n+\n+        try (InputStream bais = (InputStream) URI.create(url).toURL().openConnection().getContent();\n+             BufferedReader br = new BufferedReader(new InputStreamReader(bais, StandardCharsets.UTF_8));\n+             OutputStreamWriter osw = new OutputStreamWriter(new FileOutputStream(yamlFile), StandardCharsets.UTF_8)){\n \n-        try {\n-            bais = (InputStream) URI.create(url).toURL().openConnection().getContent();\n             StringBuilder sb = new StringBuilder();\n-            br = new BufferedReader(new InputStreamReader(bais, StandardCharsets.UTF_8));\n+\n             String read;\n             while ((read = br.readLine()) != null) {\n-                sb.append(read + \"\\n\");\n+                sb.append(read);\n+                sb.append(\"\\n\");\n             }\n-            br.close();\n             String yaml = sb.toString();\n-            File yamlFile = File.createTempFile(\"temp-file\", \".yaml\");\n-            osw = new OutputStreamWriter(new FileOutputStream(yamlFile), StandardCharsets.UTF_8);\n             yaml = yaml.replaceAll(\"namespace: .*\", \"namespace: \" + namespace);\n             yaml = yaml.replace(\"securityContext:\\n\" +\n                 \"        runAsNonRoot: true\\n\" +\n                 \"        runAsUser: 65534\", \"\");\n             osw.write(yaml);\n-            osw.close();\n             return yamlFile;\n \n         } catch (IOException e) {\n             e.printStackTrace();\n-        } finally {\n-            if (bais != null) {\n-                try {\n-                    bais.close();\n-                } catch (IOException e) {\n-                    e.printStackTrace();\n-                }\n-            }\n-\n-            if (br != null) {\n-                try {\n-                    br.close();\n-                } catch (IOException e) {\n-                    e.printStackTrace();\n-                }\n-            }\n-\n-            if (osw != null) {\n-                try {\n-                    osw.close();\n-                } catch (IOException e) {\n-                    e.printStackTrace();\n-                }\n-            }\n-\n         }\n         return null;\n     }\n \n-    public static File updateNamespaceOfYamlFile(String pathToOrigin, String namespace) {\n+    public static File updateNamespaceOfYamlFile(String pathToOrigin, String namespace) throws IOException {\n         byte[] encoded;\n-        OutputStreamWriter osw = null;\n+        File yamlFile = File.createTempFile(\"temp-file\", \".yaml\");\n \n-        try {\n+        try (OutputStreamWriter osw = new OutputStreamWriter(new FileOutputStream(yamlFile), StandardCharsets.UTF_8);) {", "originalCommit": "0f9a318517fd8f17907f5fe5b2ee97337d1b40aa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzUyMTczMA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2641#discussion_r387521730", "body": "Again, throw a `RuntimeException`", "bodyText": "Again, throw a RuntimeException", "bodyHTML": "<p dir=\"auto\">Again, throw a <code>RuntimeException</code></p>", "author": "tombentley", "createdAt": "2020-03-04T08:49:24Z", "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/FileUtils.java", "diffHunk": "@@ -30,132 +30,73 @@ private FileUtils() { }\n \n     @SuppressFBWarnings(\"RV_RETURN_VALUE_IGNORED_BAD_PRACTICE\")\n     public static File downloadAndUnzip(String url) {\n-        File dir = null;\n-        FileOutputStream fout = null;\n-        ZipInputStream zin = null;\n-        try {\n-            InputStream bais = (InputStream) URI.create(url).toURL().openConnection().getContent();\n-            dir = Files.createTempDirectory(FileUtils.class.getName()).toFile();\n+\n+        try (InputStream bais = (InputStream) URI.create(url).toURL().openConnection().getContent();\n+             ZipInputStream zin = new ZipInputStream(bais)){\n+\n+            File dir = Files.createTempDirectory(FileUtils.class.getName()).toFile();\n             dir.deleteOnExit();\n-            zin = new ZipInputStream(bais);\n+\n             ZipEntry entry = zin.getNextEntry();\n             byte[] buffer = new byte[8 * 1024];\n             int len;\n             while (entry != null) {\n                 File file = new File(dir, entry.getName());\n-                if (entry.isDirectory()) {\n-                    file.mkdirs();\n-                } else {\n-                    fout = new FileOutputStream(file);\n+                try (FileOutputStream fout = new FileOutputStream(file)) {\n                     while ((len = zin.read(buffer)) != -1) {\n                         fout.write(buffer, 0, len);\n                     }\n-                    fout.close();\n                 }\n                 entry = zin.getNextEntry();\n             }\n         } catch (IOException e) {\n             LOGGER.error(\"IOException {}\", e.getMessage());\n-        } finally {\n-            if (fout != null) {\n-                try {\n-                    fout.close();\n-                } catch (IOException e) {\n-                    LOGGER.error(\"IOException {}\", e.getMessage());\n-                }\n-            }\n-            if (zin != null) {\n-                try {\n-                    zin.close();\n-                } catch (IOException e) {\n-                    e.printStackTrace();\n-                }\n-            }\n         }\n-        return dir;\n+        return null;\n     }\n \n-    public static File downloadYamlAndReplaceNameSpace(String url, String namespace) {\n-        InputStream bais = null;\n-        BufferedReader br = null;\n-        OutputStreamWriter osw = null;\n+    public static File downloadYamlAndReplaceNameSpace(String url, String namespace) throws IOException {\n+        File yamlFile = File.createTempFile(\"temp-file\", \".yaml\");\n+\n+        try (InputStream bais = (InputStream) URI.create(url).toURL().openConnection().getContent();\n+             BufferedReader br = new BufferedReader(new InputStreamReader(bais, StandardCharsets.UTF_8));\n+             OutputStreamWriter osw = new OutputStreamWriter(new FileOutputStream(yamlFile), StandardCharsets.UTF_8)){\n \n-        try {\n-            bais = (InputStream) URI.create(url).toURL().openConnection().getContent();\n             StringBuilder sb = new StringBuilder();\n-            br = new BufferedReader(new InputStreamReader(bais, StandardCharsets.UTF_8));\n+\n             String read;\n             while ((read = br.readLine()) != null) {\n-                sb.append(read + \"\\n\");\n+                sb.append(read);\n+                sb.append(\"\\n\");\n             }\n-            br.close();\n             String yaml = sb.toString();\n-            File yamlFile = File.createTempFile(\"temp-file\", \".yaml\");\n-            osw = new OutputStreamWriter(new FileOutputStream(yamlFile), StandardCharsets.UTF_8);\n             yaml = yaml.replaceAll(\"namespace: .*\", \"namespace: \" + namespace);\n             yaml = yaml.replace(\"securityContext:\\n\" +\n                 \"        runAsNonRoot: true\\n\" +\n                 \"        runAsUser: 65534\", \"\");\n             osw.write(yaml);\n-            osw.close();\n             return yamlFile;\n \n         } catch (IOException e) {\n             e.printStackTrace();\n-        } finally {\n-            if (bais != null) {\n-                try {\n-                    bais.close();\n-                } catch (IOException e) {\n-                    e.printStackTrace();\n-                }\n-            }\n-\n-            if (br != null) {\n-                try {\n-                    br.close();\n-                } catch (IOException e) {\n-                    e.printStackTrace();\n-                }\n-            }\n-\n-            if (osw != null) {\n-                try {\n-                    osw.close();\n-                } catch (IOException e) {\n-                    e.printStackTrace();\n-                }\n-            }\n-\n         }\n         return null;\n     }\n \n-    public static File updateNamespaceOfYamlFile(String pathToOrigin, String namespace) {\n+    public static File updateNamespaceOfYamlFile(String pathToOrigin, String namespace) throws IOException {\n         byte[] encoded;\n-        OutputStreamWriter osw = null;\n+        File yamlFile = File.createTempFile(\"temp-file\", \".yaml\");\n \n-        try {\n+        try (OutputStreamWriter osw = new OutputStreamWriter(new FileOutputStream(yamlFile), StandardCharsets.UTF_8);) {\n             encoded = Files.readAllBytes(Paths.get(pathToOrigin));\n \n             String yaml = new String(encoded, StandardCharsets.UTF_8);\n             yaml = yaml.replaceAll(\"namespace: .*\", \"namespace: \" + namespace);\n \n-            File yamlFile = File.createTempFile(\"temp-file\", \".yaml\");\n-            osw = new OutputStreamWriter(new FileOutputStream(yamlFile), StandardCharsets.UTF_8);\n             osw.write(yaml);\n-            osw.close();\n             return yamlFile.toPath().toFile();\n         } catch (IOException e) {\n             e.printStackTrace();", "originalCommit": "0f9a318517fd8f17907f5fe5b2ee97337d1b40aa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzUyMTg2Mg==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2641#discussion_r387521862", "body": "Is this still needed?", "bodyText": "Is this still needed?", "bodyHTML": "<p dir=\"auto\">Is this still needed?</p>", "author": "tombentley", "createdAt": "2020-03-04T08:49:40Z", "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/FileUtils.java", "diffHunk": "@@ -30,132 +30,73 @@ private FileUtils() { }\n \n     @SuppressFBWarnings(\"RV_RETURN_VALUE_IGNORED_BAD_PRACTICE\")", "originalCommit": "0f9a318517fd8f17907f5fe5b2ee97337d1b40aa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzYwOTIxNA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2641#discussion_r387609214", "bodyText": "I have changed that now i will use return value from file.mkdirs() so it is not longer needed.", "author": "see-quick", "createdAt": "2020-03-04T11:33:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzUyMTg2Mg=="}], "type": "inlineReview"}, {"oid": "5ffb13b78f8910cea9067a5ceec525bff924bf4e", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/5ffb13b78f8910cea9067a5ceec525bff924bf4e", "message": "[MO] - [update] -> last values\n\nSigned-off-by: see-quick <xorsak02@stud.fit.vutbr.cz>", "committedDate": "2020-03-04T11:35:46Z", "type": "commit"}, {"oid": "16f76abcfacff676143b2ecae20f0de70110aad8", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/16f76abcfacff676143b2ecae20f0de70110aad8", "message": "[MO] - [update] -> add\n\nSigned-off-by: see-quick <xorsak02@stud.fit.vutbr.cz>", "committedDate": "2020-03-04T14:44:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzczMjI0MQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2641#discussion_r387732241", "body": "`file` is a filename in a temp directory you just created, so it wouldn't normally exist. I think you want something like this:\r\n```java\r\nif (entry.isDirectory()) {\r\n    if (file.exists()) {\r\n        if (!file.isDirectory()) {\r\n            throw new IOException(\"Malformed zip file\");\r\n        }\r\n    } else {\r\n        if (!file.mkdirs()) {\r\n            throw new IOException(\"Could not create directory \" + file);\r\n        }\r\n    }\r\n} else {\r\n    file.getParentFile().mkdirs(); // create parent; in case zip file is malformed\r\n    try (FileOutputStream fout = new FileOutputStream(file)) {\r\n    while ((len = zin.read(buffer)) != -1) {\r\n        fout.write(buffer, 0, len);\r\n    }\r\n}\r\n```\r\nYou could have similar logic for the 2nd `mkdirs()` as for the first (and maybe factor into a `maybeCreateDirectory()` method).", "bodyText": "file is a filename in a temp directory you just created, so it wouldn't normally exist. I think you want something like this:\nif (entry.isDirectory()) {\n    if (file.exists()) {\n        if (!file.isDirectory()) {\n            throw new IOException(\"Malformed zip file\");\n        }\n    } else {\n        if (!file.mkdirs()) {\n            throw new IOException(\"Could not create directory \" + file);\n        }\n    }\n} else {\n    file.getParentFile().mkdirs(); // create parent; in case zip file is malformed\n    try (FileOutputStream fout = new FileOutputStream(file)) {\n    while ((len = zin.read(buffer)) != -1) {\n        fout.write(buffer, 0, len);\n    }\n}\nYou could have similar logic for the 2nd mkdirs() as for the first (and maybe factor into a maybeCreateDirectory() method).", "bodyHTML": "<p dir=\"auto\"><code>file</code> is a filename in a temp directory you just created, so it wouldn't normally exist. I think you want something like this:</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"if (entry.isDirectory()) {\n    if (file.exists()) {\n        if (!file.isDirectory()) {\n            throw new IOException(&quot;Malformed zip file&quot;);\n        }\n    } else {\n        if (!file.mkdirs()) {\n            throw new IOException(&quot;Could not create directory &quot; + file);\n        }\n    }\n} else {\n    file.getParentFile().mkdirs(); // create parent; in case zip file is malformed\n    try (FileOutputStream fout = new FileOutputStream(file)) {\n    while ((len = zin.read(buffer)) != -1) {\n        fout.write(buffer, 0, len);\n    }\n}\"><pre><span class=\"pl-k\">if</span> (entry<span class=\"pl-k\">.</span>isDirectory()) {\n    <span class=\"pl-k\">if</span> (file<span class=\"pl-k\">.</span>exists()) {\n        <span class=\"pl-k\">if</span> (<span class=\"pl-k\">!</span>file<span class=\"pl-k\">.</span>isDirectory()) {\n            <span class=\"pl-k\">throw</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">IOException</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Malformed zip file<span class=\"pl-pds\">\"</span></span>);\n        }\n    } <span class=\"pl-k\">else</span> {\n        <span class=\"pl-k\">if</span> (<span class=\"pl-k\">!</span>file<span class=\"pl-k\">.</span>mkdirs()) {\n            <span class=\"pl-k\">throw</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">IOException</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Could not create directory <span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> file);\n        }\n    }\n} <span class=\"pl-k\">else</span> {\n    file<span class=\"pl-k\">.</span>getParentFile()<span class=\"pl-k\">.</span>mkdirs(); <span class=\"pl-c\"><span class=\"pl-c\">//</span> create parent; in case zip file is malformed</span>\n    <span class=\"pl-k\">try</span> (<span class=\"pl-smi\">FileOutputStream</span> fout <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">FileOutputStream</span>(file)) {\n    <span class=\"pl-k\">while</span> ((len <span class=\"pl-k\">=</span> zin<span class=\"pl-k\">.</span>read(buffer)) <span class=\"pl-k\">!=</span> <span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>) {\n        fout<span class=\"pl-k\">.</span>write(buffer, <span class=\"pl-c1\">0</span>, len);\n    }\n}</pre></div>\n<p dir=\"auto\">You could have similar logic for the 2nd <code>mkdirs()</code> as for the first (and maybe factor into a <code>maybeCreateDirectory()</code> method).</p>", "author": "tombentley", "createdAt": "2020-03-04T15:15:39Z", "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/FileUtils.java", "diffHunk": "@@ -28,134 +28,82 @@\n \n     private FileUtils() { }\n \n-    @SuppressFBWarnings(\"RV_RETURN_VALUE_IGNORED_BAD_PRACTICE\")\n-    public static File downloadAndUnzip(String url) {\n-        File dir = null;\n-        FileOutputStream fout = null;\n-        ZipInputStream zin = null;\n-        try {\n-            InputStream bais = (InputStream) URI.create(url).toURL().openConnection().getContent();\n-            dir = Files.createTempDirectory(FileUtils.class.getName()).toFile();\n+    @SuppressFBWarnings(\"RCN_REDUNDANT_NULLCHECK_WOULD_HAVE_BEEN_A_NPE\")\n+    public static File downloadAndUnzip(String url) throws IOException {\n+        File dir = Files.createTempDirectory(FileUtils.class.getName()).toFile();\n+\n+        try (InputStream bais = (InputStream) URI.create(url).toURL().openConnection().getContent();\n+            ZipInputStream zin = new ZipInputStream(bais)) {\n+\n             dir.deleteOnExit();\n-            zin = new ZipInputStream(bais);\n+\n             ZipEntry entry = zin.getNextEntry();\n             byte[] buffer = new byte[8 * 1024];\n             int len;\n             while (entry != null) {\n                 File file = new File(dir, entry.getName());\n-                if (entry.isDirectory()) {\n-                    file.mkdirs();\n-                } else {\n-                    fout = new FileOutputStream(file);\n-                    while ((len = zin.read(buffer)) != -1) {\n-                        fout.write(buffer, 0, len);\n+                boolean isDirectoryCreated = file.exists();", "originalCommit": "16f76abcfacff676143b2ecae20f0de70110aad8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "35775a3ae2b4023959b869965e0ccca211230060", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/35775a3ae2b4023959b869965e0ccca211230060", "message": "[MO] - [update] -> s\n\nSigned-off-by: see-quick <xorsak02@stud.fit.vutbr.cz>", "committedDate": "2020-03-04T21:46:02Z", "type": "commit"}]}