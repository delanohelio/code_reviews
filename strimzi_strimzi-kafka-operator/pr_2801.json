{"pr_number": 2801, "pr_title": "Make sure volume names are valid", "pr_author": "scholzj", "pr_createdAt": "2020-04-07T14:19:08Z", "pr_url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2801", "timeline": [{"oid": "b3710598699d6578782b11c61a510bb5b36bb801", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/b3710598699d6578782b11c61a510bb5b36bb801", "message": "Make sure volume names are valid\n\nSigned-off-by: Jakub Scholz <www@scholzj.com>", "committedDate": "2020-04-07T14:13:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDg0OTIyNQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2801#discussion_r404849225", "body": "I am curious, why use the AbstractModel log object as opposed to one inside this class?", "bodyText": "I am curious, why use the AbstractModel log object as opposed to one inside this class?", "bodyHTML": "<p dir=\"auto\">I am curious, why use the AbstractModel log object as opposed to one inside this class?</p>", "author": "samuel-hawker", "createdAt": "2020-04-07T14:23:12Z", "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/model/VolumeUtils.java", "diffHunk": "@@ -36,8 +43,28 @@\n  * Shared methods for working with Volume\n  */\n public class VolumeUtils {\n-\n     protected static final Logger log = LogManager.getLogger(VolumeUtils.class.getName());\n+    private static Pattern volumeNamePattern = Pattern.compile(\"^([a-z0-9]{1}[a-z0-9-]{0,61}[a-z0-9]{1})$\");\n+\n+    /**\n+     * Creates a Kubernetes volume which will map to ConfigMap\n+     *\n+     * @param name              Name of the Volume\n+     * @param configMapName     Name of the ConfigMap\n+     * @return                  The newly created Volume\n+     */\n+    public static Volume createConfigMapVolume(String name, String configMapName) {\n+        ConfigMapVolumeSource configMapVolumeSource = new ConfigMapVolumeSourceBuilder()\n+                .withName(configMapName)\n+                .build();\n+\n+        Volume volume = new VolumeBuilder()\n+                .withName(getValidVolumeName(name))\n+                .withConfigMap(configMapVolumeSource)\n+                .build();\n+        AbstractModel.log.trace(\"Created configMap Volume named '{}' with source configMap '{}'\", name, configMapName);", "originalCommit": "b3710598699d6578782b11c61a510bb5b36bb801", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDkzMDUyMQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2801#discussion_r404930521", "bodyText": "Thanks for noticing. That was just refactoring issue. Should be fixed now.", "author": "scholzj", "createdAt": "2020-04-07T16:06:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDg0OTIyNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDg1MTUxNg==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2801#discussion_r404851516", "body": "missing a space between to and 63 :P", "bodyText": "missing a space between to and 63 :P", "bodyHTML": "<p dir=\"auto\">missing a space between to and 63 :P</p>", "author": "samuel-hawker", "createdAt": "2020-04-07T14:26:03Z", "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/model/VolumeUtils.java", "diffHunk": "@@ -257,4 +284,80 @@ public static VolumeMount createVolumeMount(String name, String path) {\n     public static String getVolumePrefix(Integer id) {\n         return id == null ? AbstractModel.VOLUME_NAME : AbstractModel.VOLUME_NAME + \"-\" + id;\n     }\n+\n+    /**\n+     * Volume names have to follow DNS label standard form RFC1123:\n+     *     - contain at most 63 characters\n+     *     - contain only lowercase alphanumeric characters or \u2018-\u2019\n+     *     - start with an alphanumeric character\n+     *     - end with an alphanumeric character\n+     *\n+     *  This method checkes if the volume name is a valid name and if not it will modify it to make it valid.\n+     *\n+     * @param originalName  The original name of the volume\n+     * @return              Either the original volume name or a modified version to match volume name criteria\n+     */\n+    public static String getValidVolumeName(String originalName) {\n+        if (originalName == null) {\n+            throw new RuntimeException(\"Volume name cannot be null\");\n+        }\n+\n+        if (volumeNamePattern.matcher(originalName).matches()) {\n+            return originalName;\n+        } else {\n+            return makeValidVolumeName(originalName);\n+        }\n+    }\n+\n+    /**\n+     * Makes a valid volume name out of an invalid name. To do so it:\n+     *     - Replaces . and _ characters with -\n+     *     - Shortens the name if needed\n+     *     - Uses SHA1 hash for uniqueness of the new name\n+     *\n+     * @param originalName  Original invalid volume name\n+     * @return              New valid volume name\n+     */\n+    /*test*/ static String makeValidVolumeName(String originalName) {\n+        // SHA-1 hash is used for uniqueness\n+        String digestStub = getVolumeNameHashStub(originalName);\n+\n+        // Special characters need to be replaced\n+        String newName = originalName\n+                .replace(\".\", \"-\")\n+                .replace(\"_\", \"-\");\n+\n+        // The name with the hash should be only up to63 characters long", "originalCommit": "b3710598699d6578782b11c61a510bb5b36bb801", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDg1NDU2Ng==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2801#discussion_r404854566", "body": "Considering how similar this method and the volume name one are, is it worth consolidating them down into a single \r\n```\r\nmakeValidKubernetesName\r\n```\r\nmethod (or names something similar) ", "bodyText": "Considering how similar this method and the volume name one are, is it worth consolidating them down into a single\nmakeValidKubernetesName\n\nmethod (or names something similar)", "bodyHTML": "<p dir=\"auto\">Considering how similar this method and the volume name one are, is it worth consolidating them down into a single</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"makeValidKubernetesName\n\"><pre><code>makeValidKubernetesName\n</code></pre></div>\n<p dir=\"auto\">method (or names something similar)</p>", "author": "samuel-hawker", "createdAt": "2020-04-07T14:29:50Z", "path": "operator-common/src/main/java/io/strimzi/operator/common/model/Labels.java", "diffHunk": "@@ -286,7 +286,7 @@ public Labels withKubernetesPartOf(String instanceName) {\n         while (i > 0) {\n             char lastChar = instance.charAt(i - 1);\n \n-            if (lastChar == '.' || lastChar == '-') {\n+            if (lastChar == '.' || lastChar == '-' || lastChar == '_') {", "originalCommit": "b3710598699d6578782b11c61a510bb5b36bb801", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDkzMTgxNA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2801#discussion_r404931814", "bodyText": "We should keep them separate since the rules are separate. For example . or _ is legal in labale, just cannot be at the start or end. But in volume name, both . and _ are illegal. I really just added the _ here because I noticed it is missing.", "author": "scholzj", "createdAt": "2020-04-07T16:08:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDg1NDU2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk0MjQ1MA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2801#discussion_r404942450", "bodyText": "Makes sense to me, thanks for explaining!", "author": "samuel-hawker", "createdAt": "2020-04-07T16:23:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDg1NDU2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDg1MTU4MA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2801#discussion_r404851580", "body": "`Objects.requireNonNull(originalName, \"Volume name cannot be null\")` ?", "bodyText": "Objects.requireNonNull(originalName, \"Volume name cannot be null\") ?", "bodyHTML": "<p dir=\"auto\"><code>Objects.requireNonNull(originalName, \"Volume name cannot be null\")</code> ?</p>", "author": "tombentley", "createdAt": "2020-04-07T14:26:09Z", "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/model/VolumeUtils.java", "diffHunk": "@@ -257,4 +284,80 @@ public static VolumeMount createVolumeMount(String name, String path) {\n     public static String getVolumePrefix(Integer id) {\n         return id == null ? AbstractModel.VOLUME_NAME : AbstractModel.VOLUME_NAME + \"-\" + id;\n     }\n+\n+    /**\n+     * Volume names have to follow DNS label standard form RFC1123:\n+     *     - contain at most 63 characters\n+     *     - contain only lowercase alphanumeric characters or \u2018-\u2019\n+     *     - start with an alphanumeric character\n+     *     - end with an alphanumeric character\n+     *\n+     *  This method checkes if the volume name is a valid name and if not it will modify it to make it valid.\n+     *\n+     * @param originalName  The original name of the volume\n+     * @return              Either the original volume name or a modified version to match volume name criteria\n+     */\n+    public static String getValidVolumeName(String originalName) {\n+        if (originalName == null) {\n+            throw new RuntimeException(\"Volume name cannot be null\");\n+        }", "originalCommit": "b3710598699d6578782b11c61a510bb5b36bb801", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDkzNzA1MQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2801#discussion_r404937051", "bodyText": "Do I have to? :-o TBH I really find traditional if more readable. And from a quck search it doesn't seem like we are using Objects.requireNonNull everywhere apart from this part of code but rather as an exception.", "author": "scholzj", "createdAt": "2020-04-07T16:15:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDg1MTU4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTMzNTQ4Ng==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2801#discussion_r405335486", "bodyText": "No, you don't have to.\nI raised it as a question because it seems to be becoming an idiom in other projects (including vertx, for example). It's nice in that it's a one-liner, but I don't particularly like that it throws an NPE, because in cases like this, where it's asserting a precondition, I think IAE would be better. But really all I want is for us to have a consensus about whether we adopt this idiom, and if we decide to not use requireNonNull() then I do think we should be consistent about the exception we throw. I also think we could be a little more strict about checking preconditions, but that's irrelevant to this PR.", "author": "tombentley", "createdAt": "2020-04-08T08:07:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDg1MTU4MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDg1MzM4MQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2801#discussion_r404853381", "body": "```suggestion\r\n     * @return      First 8 characters of the SHA-1 hash\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @return      First 8 characters of the sHA-1 hash\n          \n          \n            \n                 * @return      First 8 characters of the SHA-1 hash", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">     <span class=\"pl-k\">*</span> <span class=\"pl-k\">@return</span>      <span class=\"pl-smi\">First</span> <span class=\"pl-c1\">8</span> characters of the <span class=\"x x-first x-last\">sHA</span><span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span> hash</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">     <span class=\"pl-k\">*</span> <span class=\"pl-k\">@return</span>      <span class=\"pl-smi\">First</span> <span class=\"pl-c1\">8</span> characters of the <span class=\"pl-c1 x x-first x-last\">SHA</span><span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span> hash</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "tombentley", "createdAt": "2020-04-07T14:28:24Z", "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/model/VolumeUtils.java", "diffHunk": "@@ -257,4 +284,80 @@ public static VolumeMount createVolumeMount(String name, String path) {\n     public static String getVolumePrefix(Integer id) {\n         return id == null ? AbstractModel.VOLUME_NAME : AbstractModel.VOLUME_NAME + \"-\" + id;\n     }\n+\n+    /**\n+     * Volume names have to follow DNS label standard form RFC1123:\n+     *     - contain at most 63 characters\n+     *     - contain only lowercase alphanumeric characters or \u2018-\u2019\n+     *     - start with an alphanumeric character\n+     *     - end with an alphanumeric character\n+     *\n+     *  This method checkes if the volume name is a valid name and if not it will modify it to make it valid.\n+     *\n+     * @param originalName  The original name of the volume\n+     * @return              Either the original volume name or a modified version to match volume name criteria\n+     */\n+    public static String getValidVolumeName(String originalName) {\n+        if (originalName == null) {\n+            throw new RuntimeException(\"Volume name cannot be null\");\n+        }\n+\n+        if (volumeNamePattern.matcher(originalName).matches()) {\n+            return originalName;\n+        } else {\n+            return makeValidVolumeName(originalName);\n+        }\n+    }\n+\n+    /**\n+     * Makes a valid volume name out of an invalid name. To do so it:\n+     *     - Replaces . and _ characters with -\n+     *     - Shortens the name if needed\n+     *     - Uses SHA1 hash for uniqueness of the new name\n+     *\n+     * @param originalName  Original invalid volume name\n+     * @return              New valid volume name\n+     */\n+    /*test*/ static String makeValidVolumeName(String originalName) {\n+        // SHA-1 hash is used for uniqueness\n+        String digestStub = getVolumeNameHashStub(originalName);\n+\n+        // Special characters need to be replaced\n+        String newName = originalName\n+                .replace(\".\", \"-\")\n+                .replace(\"_\", \"-\");\n+\n+        // The name with the hash should be only up to63 characters long\n+        int i = Math.min(newName.length(), 54);\n+\n+        while (i > 0) {\n+            char lastChar = newName.charAt(i - 1);\n+\n+            if (lastChar == '-') {\n+                i--;\n+            } else {\n+                break;\n+            }\n+        }\n+\n+        // Returned new fixed name with the hash at the end\n+        return newName.substring(0, i) + \"-\" + digestStub;\n+    }\n+\n+    /**\n+     * Gets the first 8 characters from a SHA-1 hash of a volume name\n+     *\n+     * @param name  Volume name\n+     * @return      First 8 characters of the sHA-1 hash", "originalCommit": "b3710598699d6578782b11c61a510bb5b36bb801", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "40a101e9ae699b08e756566a9ba0904e9dc3ea31", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/40a101e9ae699b08e756566a9ba0904e9dc3ea31", "message": "Review comments\n\nSigned-off-by: Jakub Scholz <www@scholzj.com>", "committedDate": "2020-04-07T14:42:07Z", "type": "commit"}, {"oid": "5008251082b192df38325cf746530214014aec1d", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/5008251082b192df38325cf746530214014aec1d", "message": "Review comments II\n\nSigned-off-by: Jakub Scholz <www@scholzj.com>", "committedDate": "2020-04-07T16:11:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk3NjY1Mg==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2801#discussion_r404976652", "body": "actually you are logging the `name` not the mangled one, maybe we could log them together.", "bodyText": "actually you are logging the name not the mangled one, maybe we could log them together.", "bodyHTML": "<p dir=\"auto\">actually you are logging the <code>name</code> not the mangled one, maybe we could log them together.</p>", "author": "ppatierno", "createdAt": "2020-04-07T17:13:26Z", "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/model/VolumeUtils.java", "diffHunk": "@@ -36,8 +43,28 @@\n  * Shared methods for working with Volume\n  */\n public class VolumeUtils {\n-\n     protected static final Logger log = LogManager.getLogger(VolumeUtils.class.getName());\n+    private static Pattern volumeNamePattern = Pattern.compile(\"^([a-z0-9]{1}[a-z0-9-]{0,61}[a-z0-9]{1})$\");\n+\n+    /**\n+     * Creates a Kubernetes volume which will map to ConfigMap\n+     *\n+     * @param name              Name of the Volume\n+     * @param configMapName     Name of the ConfigMap\n+     * @return                  The newly created Volume\n+     */\n+    public static Volume createConfigMapVolume(String name, String configMapName) {\n+        ConfigMapVolumeSource configMapVolumeSource = new ConfigMapVolumeSourceBuilder()\n+                .withName(configMapName)\n+                .build();\n+\n+        Volume volume = new VolumeBuilder()\n+                .withName(getValidVolumeName(name))\n+                .withConfigMap(configMapVolumeSource)\n+                .build();\n+        log.trace(\"Created configMap Volume named '{}' with source configMap '{}'\", name, configMapName);", "originalCommit": "5008251082b192df38325cf746530214014aec1d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAxOTU5Ng==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2801#discussion_r405019596", "bodyText": "Ok, good catch. Should be fixed.", "author": "scholzj", "createdAt": "2020-04-07T18:22:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk3NjY1Mg=="}], "type": "inlineReview"}, {"oid": "6fd669001edcada81e8f0f36662a20406711d7d8", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/6fd669001edcada81e8f0f36662a20406711d7d8", "message": "Review comments III\n\nSigned-off-by: Jakub Scholz <www@scholzj.com>", "committedDate": "2020-04-07T18:16:12Z", "type": "commit"}]}