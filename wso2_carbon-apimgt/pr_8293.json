{"pr_number": 8293, "pr_title": "Added workflowExecutors for ApprovalWorkflowExecutor and two rest APIs.", "pr_author": "SahanHerath", "pr_createdAt": "2020-03-03T06:05:30Z", "pr_url": "https://github.com/wso2/carbon-apimgt/pull/8293", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgyMjU5OA==", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r386822598", "body": "remove extra whitespace", "bodyText": "remove extra whitespace", "bodyHTML": "<p dir=\"auto\">remove extra whitespace</p>", "author": "chamilaadhi", "createdAt": "2020-03-03T06:35:32Z", "path": "components/apimgt/org.wso2.carbon.apimgt.api/src/main/java/org/wso2/carbon/apimgt/api/APIAdmin.java", "diffHunk": "@@ -200,4 +201,9 @@ void updateMonetizationUsagePublishInfo(MonetizationUsagePublishInfo monetizatio\n      * @return Timestamp in long format\n      */\n     long getTimestamp(String date);\n+\n+    Workflow[] getworkflows(String workflowType, String status, String tenantDomain) throws APIManagementException;\n+\n+", "originalCommit": "6e7d63f0cbce7821d881557b6f804ffd9f00caf6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e5f1ca8c0c731ff296553a3776fe7937da125395", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.api/src/main/java/org/wso2/carbon/apimgt/api/APIAdmin.java b/components/apimgt/org.wso2.carbon.apimgt.api/src/main/java/org/wso2/carbon/apimgt/api/APIAdmin.java\nindex 2df63b3ebcd..13ec35859ae 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.api/src/main/java/org/wso2/carbon/apimgt/api/APIAdmin.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.api/src/main/java/org/wso2/carbon/apimgt/api/APIAdmin.java\n", "chunk": "@@ -204,6 +204,5 @@ public interface APIAdmin  {\n \n     Workflow[] getworkflows(String workflowType, String status, String tenantDomain) throws APIManagementException;\n \n-\n     Workflow getworkflowReferenceByExternalWorkflowReferenceID(String externelWorkflowRef, String status, String tenantDomain) throws APIManagementException;\n }\n", "next_change": {"commit": "e00fe40f5ef809f1ac81dc7c22faacda062adfab", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.api/src/main/java/org/wso2/carbon/apimgt/api/APIAdmin.java b/components/apimgt/org.wso2.carbon.apimgt.api/src/main/java/org/wso2/carbon/apimgt/api/APIAdmin.java\nindex 13ec35859ae..3aba00877df 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.api/src/main/java/org/wso2/carbon/apimgt/api/APIAdmin.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.api/src/main/java/org/wso2/carbon/apimgt/api/APIAdmin.java\n", "chunk": "@@ -202,7 +202,26 @@ public interface APIAdmin  {\n      */\n     long getTimestamp(String date);\n \n+    /**\n+     * The method get all the pending workflow requests\n+     *\n+     * @param workflowType\n+     * @param status\n+     * @param tenantDomain\n+     * @return Workflow[]\n+     * @throws APIManagementException\n+     */\n     Workflow[] getworkflows(String workflowType, String status, String tenantDomain) throws APIManagementException;\n \n-    Workflow getworkflowReferenceByExternalWorkflowReferenceID(String externelWorkflowRef, String status, String tenantDomain) throws APIManagementException;\n+    /**\n+     * The method get all the pending workflow requests\n+     *\n+     * @param externelWorkflowRef\n+     * @param status\n+     * @param tenantDomain\n+     * @return Workflow\n+     * @throws APIManagementException\n+     */\n+    Workflow getworkflowReferenceByExternalWorkflowReferenceID(String externelWorkflowRef, String status, String tenantDomain)\n+            throws APIManagementException;\n }\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgyNTc3MA==", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r386825770", "body": "format this section. { should be after () . need space between =", "bodyText": "format this section. { should be after () . need space between =", "bodyHTML": "<p dir=\"auto\">format this section. { should be after () . need space between =</p>", "author": "chamilaadhi", "createdAt": "2020-03-03T06:47:12Z", "path": "components/apimgt/org.wso2.carbon.apimgt.api/src/main/java/org/wso2/carbon/apimgt/api/model/Workflow.java", "diffHunk": "@@ -0,0 +1,189 @@\n+package org.wso2.carbon.apimgt.api.model;\n+\n+import org.json.simple.JSONObject;\n+import org.wso2.carbon.apimgt.api.WorkflowStatus;\n+\n+public class Workflow {\n+\n+    private String workflowReference;\n+\n+    private String workflowType;\n+\n+    private WorkflowStatus status;\n+\n+    private String createdTime;\n+\n+    private String updatedTime;\n+\n+    private String workflowDescription;\n+\n+    private int tenantId;\n+\n+    private String tenantDomain;\n+\n+    private String externalWorkflowReference;\n+\n+    private String callbackUrl;\n+\n+    private int workflowId;\n+\n+    private String workflowStatusDesc;\n+\n+    private JSONObject metadata;\n+\n+    private JSONObject properties;\n+\n+    public Workflow()\n+    {\n+        metadata=new JSONObject();", "originalCommit": "6e7d63f0cbce7821d881557b6f804ffd9f00caf6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e5f1ca8c0c731ff296553a3776fe7937da125395", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.api/src/main/java/org/wso2/carbon/apimgt/api/model/Workflow.java b/components/apimgt/org.wso2.carbon.apimgt.api/src/main/java/org/wso2/carbon/apimgt/api/model/Workflow.java\nindex c6370dda62d..36dedcda1ef 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.api/src/main/java/org/wso2/carbon/apimgt/api/model/Workflow.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.api/src/main/java/org/wso2/carbon/apimgt/api/model/Workflow.java\n", "chunk": "@@ -33,10 +33,9 @@ public class Workflow {\n \n     private JSONObject properties;\n \n-    public Workflow()\n-    {\n-        metadata=new JSONObject();\n-        properties=new JSONObject();\n+    public Workflow() {\n+        metadata = new JSONObject();\n+        properties = new JSONObject();\n     }\n \n     public String getWorkflowReference() {\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgyNzAwNg==", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r386827006", "body": "format the method. lenght should be 120 characters ", "bodyText": "format the method. lenght should be 120 characters", "bodyHTML": "<p dir=\"auto\">format the method. lenght should be 120 characters</p>", "author": "chamilaadhi", "createdAt": "2020-03-03T06:51:31Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIAdminImpl.java", "diffHunk": "@@ -349,4 +346,21 @@ private int isCategoryAttached(APICategory category, String username) throws API\n         int length = (Integer) result.get(\"length\");\n         return length;\n     }\n+\n+    public Workflow[] getworkflows(String workflowType, String status, String tenantDomain ) throws APIManagementException {\n+\n+        return apiMgtDAO.getworkflows(workflowType, status , tenantDomain );\n+    }\n+\n+    public Workflow getworkflowReferenceByExternalWorkflowReferenceID(String externelWorkflowRef, String status, String tenantDomain) throws APIManagementException {\n+", "originalCommit": "6e7d63f0cbce7821d881557b6f804ffd9f00caf6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU5ODU1Nw==", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r387598557", "bodyText": "fixed with 1be4d86", "author": "SahanHerath", "createdAt": "2020-03-04T11:10:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgyNzAwNg=="}], "type": "inlineReview", "revised_code": {"commit": "e5f1ca8c0c731ff296553a3776fe7937da125395", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIAdminImpl.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIAdminImpl.java\nindex 8ce9950a56b..9ddab09bfa4 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIAdminImpl.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIAdminImpl.java\n", "chunk": "@@ -352,7 +352,8 @@ public class APIAdminImpl implements APIAdmin {\n         return apiMgtDAO.getworkflows(workflowType, status , tenantDomain );\n     }\n \n-    public Workflow getworkflowReferenceByExternalWorkflowReferenceID(String externelWorkflowRef, String status, String tenantDomain) throws APIManagementException {\n+    public Workflow getworkflowReferenceByExternalWorkflowReferenceID(String externelWorkflowRef, String status,\n+                                                                      String tenantDomain) throws APIManagementException {\n \n         Workflow workflow=apiMgtDAO.getworkflowReferenceByExternalWorkflowReferenceID(externelWorkflowRef, status ,tenantDomain );\n \n", "next_change": {"commit": "e00fe40f5ef809f1ac81dc7c22faacda062adfab", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIAdminImpl.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIAdminImpl.java\nindex 9ddab09bfa4..bbaddc0a067 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIAdminImpl.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIAdminImpl.java\n", "chunk": "@@ -347,21 +347,37 @@ public class APIAdminImpl implements APIAdmin {\n         return length;\n     }\n \n+    /**\n+     * The method converts the date into timestamp\n+     *\n+     * @param workflowType\n+     * @param status\n+     * @param tenantDomain\n+     * @return Workflow[]\n+     * @throws APIManagementException\n+     */\n     public Workflow[] getworkflows(String workflowType, String status, String tenantDomain ) throws APIManagementException {\n-\n-        return apiMgtDAO.getworkflows(workflowType, status , tenantDomain );\n+        return apiMgtDAO.getworkflows(workflowType, status, tenantDomain);\n     }\n \n+    /**\n+     * The method converts the date into timestamp\n+     *\n+     * @param externelWorkflowRef\n+     * @param status\n+     * @param tenantDomain\n+     * @return Workflow\n+     * @throws APIManagementException\n+     */\n     public Workflow getworkflowReferenceByExternalWorkflowReferenceID(String externelWorkflowRef, String status,\n                                                                       String tenantDomain) throws APIManagementException {\n \n         Workflow workflow=apiMgtDAO.getworkflowReferenceByExternalWorkflowReferenceID(externelWorkflowRef, status ,tenantDomain );\n \n         if (workflow == null) {\n-            String msg=\"External workflow Reference: \" + externelWorkflowRef + \" was not found.\";\n+            String msg = \"External workflow Reference: \" + externelWorkflowRef + \" was not found.\";\n             throw new APIMgtResourceNotFoundException(msg);\n         }\n-\n         return workflow;\n     }\n }\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgzNDcwNQ==", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r386834705", "body": "better to cast to string instead of using toString() . ", "bodyText": "better to cast to string instead of using toString() .", "bodyHTML": "<p dir=\"auto\">better to cast to string instead of using toString() .</p>", "author": "chamilaadhi", "createdAt": "2020-03-03T07:17:43Z", "path": "components/apimgt/org.wso2.carbon.apimgt.api/src/main/java/org/wso2/carbon/apimgt/api/model/Workflow.java", "diffHunk": "@@ -0,0 +1,189 @@\n+package org.wso2.carbon.apimgt.api.model;\n+\n+import org.json.simple.JSONObject;\n+import org.wso2.carbon.apimgt.api.WorkflowStatus;\n+\n+public class Workflow {\n+\n+    private String workflowReference;\n+\n+    private String workflowType;\n+\n+    private WorkflowStatus status;\n+\n+    private String createdTime;\n+\n+    private String updatedTime;\n+\n+    private String workflowDescription;\n+\n+    private int tenantId;\n+\n+    private String tenantDomain;\n+\n+    private String externalWorkflowReference;\n+\n+    private String callbackUrl;\n+\n+    private int workflowId;\n+\n+    private String workflowStatusDesc;\n+\n+    private JSONObject metadata;\n+\n+    private JSONObject properties;\n+\n+    public Workflow()\n+    {\n+        metadata=new JSONObject();\n+        properties=new JSONObject();\n+    }\n+\n+    public String getWorkflowReference() {\n+        return workflowReference;\n+    }\n+\n+    public void setWorkflowReference(String workflowReference) {\n+        this.workflowReference = workflowReference;\n+    }\n+\n+    public String getWorkflowType() {\n+        return workflowType;\n+    }\n+\n+    public void setWorkflowType(String workflowType) {\n+        this.workflowType = workflowType;\n+    }\n+\n+    public WorkflowStatus getStatus() {\n+        return status;\n+    }\n+\n+    public void setStatus(WorkflowStatus status) {\n+        this.status = status;\n+    }\n+\n+    public String getCreatedTime() {\n+        return createdTime;\n+    }\n+\n+    public void setCreatedTime(String createdTime) {\n+        this.createdTime = createdTime;\n+    }\n+\n+    public String getUpdatedTime() {\n+        return updatedTime;\n+    }\n+\n+    public void setUpdatedTime(String updatedTime) {\n+        this.updatedTime = updatedTime;\n+    }\n+\n+    public String getWorkflowDescription() {\n+        return workflowDescription;\n+    }\n+\n+    public void setWorkflowDescription(String workflowDescription) {\n+        this.workflowDescription = workflowDescription;\n+    }\n+\n+    public int getTenantId() {\n+        return tenantId;\n+    }\n+\n+    public void setTenantId(int tenantId) {\n+        this.tenantId = tenantId;\n+    }\n+\n+    public String getTenantDomain() {\n+        return tenantDomain;\n+    }\n+\n+    public void setTenantDomain(String tenantDomain) {\n+        this.tenantDomain = tenantDomain;\n+    }\n+\n+    public String getExternalWorkflowReference() {\n+        return externalWorkflowReference;\n+    }\n+\n+    public void setExternalWorkflowReference(String externalWorkflowReference) {\n+        this.externalWorkflowReference = externalWorkflowReference;\n+    }\n+\n+    public String getCallbackUrl() {\n+        return callbackUrl;\n+    }\n+\n+    public void setCallbackUrl(String callbackUrl) {\n+        this.callbackUrl = callbackUrl;\n+    }\n+\n+    public int getWorkflowId() {\n+        return workflowId;\n+    }\n+\n+    public void setWorkflowId(int workflowId) {\n+        this.workflowId = workflowId;\n+    }\n+\n+    public String getWorkflowStatusDesc() {\n+        return workflowStatusDesc;\n+    }\n+\n+    public void setWorkflowStatusDesc(String workflowStatusDesc) {\n+        this.workflowStatusDesc = workflowStatusDesc;\n+    }\n+\n+    public String getMetadata(String key) {\n+        return metadata.get(key).toString();\n+    }\n+\n+    public void setMetadata(String key, String value) {\n+        metadata.put(key, value);\n+    }\n+\n+    public String getProperties(String key) {\n+        return properties.get(key).toString();", "originalCommit": "6e7d63f0cbce7821d881557b6f804ffd9f00caf6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e5f1ca8c0c731ff296553a3776fe7937da125395", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.api/src/main/java/org/wso2/carbon/apimgt/api/model/Workflow.java b/components/apimgt/org.wso2.carbon.apimgt.api/src/main/java/org/wso2/carbon/apimgt/api/model/Workflow.java\nindex c6370dda62d..36dedcda1ef 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.api/src/main/java/org/wso2/carbon/apimgt/api/model/Workflow.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.api/src/main/java/org/wso2/carbon/apimgt/api/model/Workflow.java\n", "chunk": "@@ -136,7 +135,7 @@ public class Workflow {\n     }\n \n     public String getMetadata(String key) {\n-        return metadata.get(key).toString();\n+        return (String)metadata.get(key);\n     }\n \n     public void setMetadata(String key, String value) {\n", "next_change": null}, {"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.api/src/main/java/org/wso2/carbon/apimgt/api/model/Workflow.java b/components/apimgt/org.wso2.carbon.apimgt.api/src/main/java/org/wso2/carbon/apimgt/api/model/Workflow.java\nindex c6370dda62d..36dedcda1ef 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.api/src/main/java/org/wso2/carbon/apimgt/api/model/Workflow.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.api/src/main/java/org/wso2/carbon/apimgt/api/model/Workflow.java\n", "chunk": "@@ -144,7 +143,7 @@ public class Workflow {\n     }\n \n     public String getProperties(String key) {\n-        return properties.get(key).toString();\n+        return (String)properties.get(key);\n     }\n \n     public void setProperties(String key, String value) {\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgzNDgzNQ==", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r386834835", "body": "better to cast to string instead of using toString() ", "bodyText": "better to cast to string instead of using toString()", "bodyHTML": "<p dir=\"auto\">better to cast to string instead of using toString()</p>", "author": "chamilaadhi", "createdAt": "2020-03-03T07:18:09Z", "path": "components/apimgt/org.wso2.carbon.apimgt.api/src/main/java/org/wso2/carbon/apimgt/api/model/Workflow.java", "diffHunk": "@@ -0,0 +1,189 @@\n+package org.wso2.carbon.apimgt.api.model;\n+\n+import org.json.simple.JSONObject;\n+import org.wso2.carbon.apimgt.api.WorkflowStatus;\n+\n+public class Workflow {\n+\n+    private String workflowReference;\n+\n+    private String workflowType;\n+\n+    private WorkflowStatus status;\n+\n+    private String createdTime;\n+\n+    private String updatedTime;\n+\n+    private String workflowDescription;\n+\n+    private int tenantId;\n+\n+    private String tenantDomain;\n+\n+    private String externalWorkflowReference;\n+\n+    private String callbackUrl;\n+\n+    private int workflowId;\n+\n+    private String workflowStatusDesc;\n+\n+    private JSONObject metadata;\n+\n+    private JSONObject properties;\n+\n+    public Workflow()\n+    {\n+        metadata=new JSONObject();\n+        properties=new JSONObject();\n+    }\n+\n+    public String getWorkflowReference() {\n+        return workflowReference;\n+    }\n+\n+    public void setWorkflowReference(String workflowReference) {\n+        this.workflowReference = workflowReference;\n+    }\n+\n+    public String getWorkflowType() {\n+        return workflowType;\n+    }\n+\n+    public void setWorkflowType(String workflowType) {\n+        this.workflowType = workflowType;\n+    }\n+\n+    public WorkflowStatus getStatus() {\n+        return status;\n+    }\n+\n+    public void setStatus(WorkflowStatus status) {\n+        this.status = status;\n+    }\n+\n+    public String getCreatedTime() {\n+        return createdTime;\n+    }\n+\n+    public void setCreatedTime(String createdTime) {\n+        this.createdTime = createdTime;\n+    }\n+\n+    public String getUpdatedTime() {\n+        return updatedTime;\n+    }\n+\n+    public void setUpdatedTime(String updatedTime) {\n+        this.updatedTime = updatedTime;\n+    }\n+\n+    public String getWorkflowDescription() {\n+        return workflowDescription;\n+    }\n+\n+    public void setWorkflowDescription(String workflowDescription) {\n+        this.workflowDescription = workflowDescription;\n+    }\n+\n+    public int getTenantId() {\n+        return tenantId;\n+    }\n+\n+    public void setTenantId(int tenantId) {\n+        this.tenantId = tenantId;\n+    }\n+\n+    public String getTenantDomain() {\n+        return tenantDomain;\n+    }\n+\n+    public void setTenantDomain(String tenantDomain) {\n+        this.tenantDomain = tenantDomain;\n+    }\n+\n+    public String getExternalWorkflowReference() {\n+        return externalWorkflowReference;\n+    }\n+\n+    public void setExternalWorkflowReference(String externalWorkflowReference) {\n+        this.externalWorkflowReference = externalWorkflowReference;\n+    }\n+\n+    public String getCallbackUrl() {\n+        return callbackUrl;\n+    }\n+\n+    public void setCallbackUrl(String callbackUrl) {\n+        this.callbackUrl = callbackUrl;\n+    }\n+\n+    public int getWorkflowId() {\n+        return workflowId;\n+    }\n+\n+    public void setWorkflowId(int workflowId) {\n+        this.workflowId = workflowId;\n+    }\n+\n+    public String getWorkflowStatusDesc() {\n+        return workflowStatusDesc;\n+    }\n+\n+    public void setWorkflowStatusDesc(String workflowStatusDesc) {\n+        this.workflowStatusDesc = workflowStatusDesc;\n+    }\n+\n+    public String getMetadata(String key) {\n+        return metadata.get(key).toString();", "originalCommit": "6e7d63f0cbce7821d881557b6f804ffd9f00caf6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e5f1ca8c0c731ff296553a3776fe7937da125395", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.api/src/main/java/org/wso2/carbon/apimgt/api/model/Workflow.java b/components/apimgt/org.wso2.carbon.apimgt.api/src/main/java/org/wso2/carbon/apimgt/api/model/Workflow.java\nindex c6370dda62d..36dedcda1ef 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.api/src/main/java/org/wso2/carbon/apimgt/api/model/Workflow.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.api/src/main/java/org/wso2/carbon/apimgt/api/model/Workflow.java\n", "chunk": "@@ -136,7 +135,7 @@ public class Workflow {\n     }\n \n     public String getMetadata(String key) {\n-        return metadata.get(key).toString();\n+        return (String)metadata.get(key);\n     }\n \n     public void setMetadata(String key, String value) {\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg1NjgwOQ==", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r386856809", "body": "do a null check before converting to toJSONString(). otherwise if these properties are not set, NPE will be thrown", "bodyText": "do a null check before converting to toJSONString(). otherwise if these properties are not set, NPE will be thrown", "bodyHTML": "<p dir=\"auto\">do a null check before converting to toJSONString(). otherwise if these properties are not set, NPE will be thrown</p>", "author": "chamilaadhi", "createdAt": "2020-03-03T08:17:36Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "diffHunk": "@@ -5936,10 +5933,17 @@ public void addWorkflowEntry(WorkflowDTO workflow) throws APIManagementException\n             prepStmt.setString(7, workflow.getTenantDomain());\n             prepStmt.setString(8, workflow.getExternalWorkflowReference());\n \n+            byte[] byteData1 = workflow.getMetadata().toJSONString().getBytes(\"UTF-8\");\n+            byte[] byteData2 = workflow.getProperties().toJSONString().getBytes(\"UTF-8\");\n+", "originalCommit": "6e7d63f0cbce7821d881557b6f804ffd9f00caf6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e5f1ca8c0c731ff296553a3776fe7937da125395", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\nindex b25d82b29f3..d1b86fe2c24 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\n", "chunk": "@@ -5933,16 +5934,23 @@ public class ApiMgtDAO {\n             prepStmt.setString(7, workflow.getTenantDomain());\n             prepStmt.setString(8, workflow.getExternalWorkflowReference());\n \n-            byte[] byteData1 = workflow.getMetadata().toJSONString().getBytes(\"UTF-8\");\n-            byte[] byteData2 = workflow.getProperties().toJSONString().getBytes(\"UTF-8\");\n-\n-            prepStmt.setBlob(9, new ByteArrayInputStream(byteData1) );\n-            prepStmt.setBlob(10, new ByteArrayInputStream(byteData2) );\n+            if(workflow.getMetadata()!=null){\n+                byte[] metadataByte = workflow.getMetadata().toJSONString().getBytes(\"UTF-8\");\n+                prepStmt.setBlob(9, new ByteArrayInputStream(metadataByte) );\n+            } else {\n+                prepStmt.setNull(9, java.sql.Types.BLOB);\n+            }\n \n+            if(workflow.getProperties() != null) {\n+                byte[] propertiesByte = workflow.getProperties().toJSONString().getBytes(\"UTF-8\");\n+                prepStmt.setBlob(10, new ByteArrayInputStream(propertiesByte));\n+            } else {\n+                prepStmt.setNull(10, java.sql.Types.BLOB);\n+            }\n \n             prepStmt.execute();\n-\n             connection.commit();\n+\n         } catch (SQLException | UnsupportedEncodingException e) {\n             handleException(\"Error while adding Workflow : \" + workflow.getExternalWorkflowReference() + \" to the \" +\n                     \"database\", e);\n", "next_change": {"commit": "31f6f67b8a13bf657c46f4e2f9730d7b472c9b72", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\nindex d1b86fe2c24..b2a7ba61a62 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\n", "chunk": "@@ -5934,24 +5934,10 @@ public class ApiMgtDAO {\n             prepStmt.setString(7, workflow.getTenantDomain());\n             prepStmt.setString(8, workflow.getExternalWorkflowReference());\n \n-            if(workflow.getMetadata()!=null){\n-                byte[] metadataByte = workflow.getMetadata().toJSONString().getBytes(\"UTF-8\");\n-                prepStmt.setBlob(9, new ByteArrayInputStream(metadataByte) );\n-            } else {\n-                prepStmt.setNull(9, java.sql.Types.BLOB);\n-            }\n-\n-            if(workflow.getProperties() != null) {\n-                byte[] propertiesByte = workflow.getProperties().toJSONString().getBytes(\"UTF-8\");\n-                prepStmt.setBlob(10, new ByteArrayInputStream(propertiesByte));\n-            } else {\n-                prepStmt.setNull(10, java.sql.Types.BLOB);\n-            }\n-\n             prepStmt.execute();\n-            connection.commit();\n \n-        } catch (SQLException | UnsupportedEncodingException e) {\n+            connection.commit();\n+        } catch (SQLException e) {\n             handleException(\"Error while adding Workflow : \" + workflow.getExternalWorkflowReference() + \" to the \" +\n                     \"database\", e);\n         } finally {\n", "next_change": {"commit": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\nindex b2a7ba61a62..be9b41b3956 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\n", "chunk": "@@ -5934,10 +5934,24 @@ public class ApiMgtDAO {\n             prepStmt.setString(7, workflow.getTenantDomain());\n             prepStmt.setString(8, workflow.getExternalWorkflowReference());\n \n+            if(workflow.getMetadata()!=null){\n+                byte[] metadataByte = workflow.getMetadata().toJSONString().getBytes(\"UTF-8\");\n+                prepStmt.setBlob(9, new ByteArrayInputStream(metadataByte) );\n+            } else {\n+                prepStmt.setNull(9, java.sql.Types.BLOB);\n+            }\n+\n+            if(workflow.getProperties() != null) {\n+                byte[] propertiesByte = workflow.getProperties().toJSONString().getBytes(\"UTF-8\");\n+                prepStmt.setBlob(10, new ByteArrayInputStream(propertiesByte));\n+            } else {\n+                prepStmt.setNull(10, java.sql.Types.BLOB);\n+            }\n+\n             prepStmt.execute();\n \n             connection.commit();\n-        } catch (SQLException e) {\n+        } catch (SQLException | UnsupportedEncodingException e) {\n             handleException(\"Error while adding Workflow : \" + workflow.getExternalWorkflowReference() + \" to the \" +\n                     \"database\", e);\n         } finally {\n", "next_change": {"commit": "e00fe40f5ef809f1ac81dc7c22faacda062adfab", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\nindex be9b41b3956..c19a17b31df 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\n", "chunk": "@@ -5934,22 +5934,21 @@ public class ApiMgtDAO {\n             prepStmt.setString(7, workflow.getTenantDomain());\n             prepStmt.setString(8, workflow.getExternalWorkflowReference());\n \n-            if(workflow.getMetadata()!=null){\n+            if(workflow.getMetadata() != null) {\n                 byte[] metadataByte = workflow.getMetadata().toJSONString().getBytes(\"UTF-8\");\n                 prepStmt.setBlob(9, new ByteArrayInputStream(metadataByte) );\n             } else {\n-                prepStmt.setNull(9, java.sql.Types.BLOB);\n+                prepStmt.setBlob(9, (Blob)null);\n             }\n \n             if(workflow.getProperties() != null) {\n                 byte[] propertiesByte = workflow.getProperties().toJSONString().getBytes(\"UTF-8\");\n                 prepStmt.setBlob(10, new ByteArrayInputStream(propertiesByte));\n             } else {\n-                prepStmt.setNull(10, java.sql.Types.BLOB);\n+                //prepStmt.setNull(10, java.sql.Types.BLOB);\n+                prepStmt.setBlob(10, (Blob)null);\n             }\n-\n             prepStmt.execute();\n-\n             connection.commit();\n         } catch (SQLException | UnsupportedEncodingException e) {\n             handleException(\"Error while adding Workflow : \" + workflow.getExternalWorkflowReference() + \" to the \" +\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg1Njk4MQ==", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r386856981", "body": "add method description", "bodyText": "add method description", "bodyHTML": "<p dir=\"auto\">add method description</p>", "author": "chamilaadhi", "createdAt": "2020-03-03T08:18:02Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "diffHunk": "@@ -14576,4 +14580,284 @@ public String getUserID(String userName) throws APIManagementException {\n         }\n         return userID;\n     }\n+\n+\n+    public void deleteWorkflowRequest(String workflowExtRef) throws APIManagementException {", "originalCommit": "6e7d63f0cbce7821d881557b6f804ffd9f00caf6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU5ODkxNA==", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r387598914", "bodyText": "fixed with 1be4d86", "author": "SahanHerath", "createdAt": "2020-03-04T11:11:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg1Njk4MQ=="}], "type": "inlineReview", "revised_code": {"commit": "63aac0ce60d89723bf51b15c7f9f35b420b3e7cc", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\nindex b25d82b29f3..a6cb88653ec 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\n", "chunk": "@@ -14580,6 +14586,35 @@ public class ApiMgtDAO {\n         }\n         return userID;\n     }\n+<<<<<<< HEAD\n+    \n+    /**\n+     * Get names of the tiers which has bandwidth as the quota type\n+     * @param tenantId id of the tenant\n+     * @return list of names\n+     * @throws APIManagementException\n+     */\n+    public List<String> getNamesOfTierWithBandwidthQuotaType(int tenantId) throws APIManagementException {\n+        Connection conn = null;\n+        ResultSet resultSet = null;\n+        PreparedStatement ps = null;\n+        List<String> list = new ArrayList<String>();\n+        try {\n+            String sqlQuery = ThrottleSQLConstants.GET_TIERS_WITH_BANDWIDTH_QUOTA_TYPE_SQL;\n+            conn = APIMgtDBUtil.getConnection();\n+            ps = conn.prepareStatement(sqlQuery);\n+            ps.setInt(1, tenantId);\n+            resultSet = ps.executeQuery();\n+            while (resultSet.next()) {\n+                list.add(resultSet.getString(1));\n+            }\n+        } catch (SQLException e) {\n+            handleException(\"Failed to retrieve tiers with bandwidth QuotaType \", e);\n+        } finally {\n+            APIMgtDBUtil.closeAllConnections(ps, conn, resultSet);\n+        }\n+        return list;\n+=======\n \n \n     public void deleteWorkflowRequest(String workflowExtRef) throws APIManagementException {\n", "next_change": {"commit": "e5f1ca8c0c731ff296553a3776fe7937da125395", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\nindex a6cb88653ec..d1b86fe2c24 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\n", "chunk": "@@ -14616,6 +14623,12 @@ public class ApiMgtDAO {\n         return list;\n =======\n \n+    /**\n+     * Remove the Pending workflow Requests using ExternalWorkflowReference\n+     *\n+     * @param workflowExtRef\n+     * @return\n+     */\n \n     public void deleteWorkflowRequest(String workflowExtRef) throws APIManagementException {\n         Connection connection = null;\n", "next_change": {"commit": "e00fe40f5ef809f1ac81dc7c22faacda062adfab", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\nindex d1b86fe2c24..c19a17b31df 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\n", "chunk": "@@ -14621,70 +14619,59 @@ public class ApiMgtDAO {\n             APIMgtDBUtil.closeAllConnections(ps, conn, resultSet);\n         }\n         return list;\n-=======\n+    }\n \n     /**\n      * Remove the Pending workflow Requests using ExternalWorkflowReference\n-     *\n-     * @param workflowExtRef\n-     * @return\n+     * @param workflowExtRef External Workflow Reference of Workflow Pending Request\n+     * @throws APIManagementException\n      */\n-\n     public void deleteWorkflowRequest(String workflowExtRef) throws APIManagementException {\n         Connection connection = null;\n         PreparedStatement prepStmt = null;\n-\n         String query = SQLConstants.DELETE_WORKFLOW_REQUEST_SQL;\n         try {\n             connection = APIMgtDBUtil.getConnection();\n             connection.setAutoCommit(false);\n-\n             prepStmt = connection.prepareStatement(query);\n             prepStmt.setString(1, workflowExtRef);\n             prepStmt.executeUpdate();\n             connection.commit();\n         }\n         catch (SQLException e) {\n-            handleException(\"Failed to delete the workflow request \", e);\n+            handleException(\"Failed to delete the workflow request. \", e);\n+        } finally {\n+            APIMgtDBUtil.closeAllConnections(prepStmt, connection, null);\n         }\n     }\n \n     /**\n      * Get the Pending workflow Request using ExternalWorkflowReference\n-     *\n      * @param externalWorkflowRef\n-     * @return\n+     * @return workflow pending request\n+     * @throws APIManagementException\n      */\n-\n     public Workflow getworkflowReferenceByExternalWorkflowReference(String externalWorkflowRef)throws APIManagementException {\n \n         Connection connection = null;\n         PreparedStatement prepStmt = null;\n         ResultSet rs = null;\n-\n-        Workflow workflow=new Workflow();\n-\n-        String sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_BY_EWR;\n-\n+        Workflow workflow = new Workflow();\n+        String sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_BY_EXTERNALWORKFLOWREF;\n         try {\n             connection = APIMgtDBUtil.getConnection();\n             prepStmt = connection.prepareStatement(sqlQuery);\n             prepStmt.setString(1, externalWorkflowRef);\n-\n             rs = prepStmt.executeQuery();\n \n             while (rs.next()) {\n-\n                 workflow.setWorkflowId(rs.getInt(\"WF_ID\"));\n                 workflow.setWorkflowReference(rs.getString(\"WF_REFERENCE\"));\n                 workflow.setWorkflowType(rs.getString(\"WF_TYPE\"));\n-\n                 String workflowstatus =rs.getString(\"WF_STATUS\");\n                 workflow.setStatus(org.wso2.carbon.apimgt.api.WorkflowStatus.valueOf(workflowstatus));\n-\n                 workflow.setCreatedTime(rs.getTimestamp(\"WF_CREATED_TIME\").toString());\n                 workflow.setUpdatedTime(rs.getTimestamp(\"WF_UPDATED_TIME\").toString());\n-\n                 workflow.setWorkflowStatusDesc(rs.getString(\"WF_STATUS_DESC\"));\n                 workflow.setTenantId(rs.getInt(\"TENANT_ID\"));\n                 workflow.setTenantDomain(rs.getString(\"TENANT_DOMAIN\"));\n", "next_change": null}]}}, {"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\nindex a6cb88653ec..d1b86fe2c24 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\n", "chunk": "@@ -14623,11 +14636,9 @@ public class ApiMgtDAO {\n \n         String query = SQLConstants.DELETE_WORKFLOW_REQUEST_SQL;\n         try {\n-\n             connection = APIMgtDBUtil.getConnection();\n             connection.setAutoCommit(false);\n \n-\n             prepStmt = connection.prepareStatement(query);\n             prepStmt.setString(1, workflowExtRef);\n             prepStmt.executeUpdate();\n", "next_change": {"commit": "e00fe40f5ef809f1ac81dc7c22faacda062adfab", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\nindex d1b86fe2c24..c19a17b31df 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\n", "chunk": "@@ -14621,70 +14619,59 @@ public class ApiMgtDAO {\n             APIMgtDBUtil.closeAllConnections(ps, conn, resultSet);\n         }\n         return list;\n-=======\n+    }\n \n     /**\n      * Remove the Pending workflow Requests using ExternalWorkflowReference\n-     *\n-     * @param workflowExtRef\n-     * @return\n+     * @param workflowExtRef External Workflow Reference of Workflow Pending Request\n+     * @throws APIManagementException\n      */\n-\n     public void deleteWorkflowRequest(String workflowExtRef) throws APIManagementException {\n         Connection connection = null;\n         PreparedStatement prepStmt = null;\n-\n         String query = SQLConstants.DELETE_WORKFLOW_REQUEST_SQL;\n         try {\n             connection = APIMgtDBUtil.getConnection();\n             connection.setAutoCommit(false);\n-\n             prepStmt = connection.prepareStatement(query);\n             prepStmt.setString(1, workflowExtRef);\n             prepStmt.executeUpdate();\n             connection.commit();\n         }\n         catch (SQLException e) {\n-            handleException(\"Failed to delete the workflow request \", e);\n+            handleException(\"Failed to delete the workflow request. \", e);\n+        } finally {\n+            APIMgtDBUtil.closeAllConnections(prepStmt, connection, null);\n         }\n     }\n \n     /**\n      * Get the Pending workflow Request using ExternalWorkflowReference\n-     *\n      * @param externalWorkflowRef\n-     * @return\n+     * @return workflow pending request\n+     * @throws APIManagementException\n      */\n-\n     public Workflow getworkflowReferenceByExternalWorkflowReference(String externalWorkflowRef)throws APIManagementException {\n \n         Connection connection = null;\n         PreparedStatement prepStmt = null;\n         ResultSet rs = null;\n-\n-        Workflow workflow=new Workflow();\n-\n-        String sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_BY_EWR;\n-\n+        Workflow workflow = new Workflow();\n+        String sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_BY_EXTERNALWORKFLOWREF;\n         try {\n             connection = APIMgtDBUtil.getConnection();\n             prepStmt = connection.prepareStatement(sqlQuery);\n             prepStmt.setString(1, externalWorkflowRef);\n-\n             rs = prepStmt.executeQuery();\n \n             while (rs.next()) {\n-\n                 workflow.setWorkflowId(rs.getInt(\"WF_ID\"));\n                 workflow.setWorkflowReference(rs.getString(\"WF_REFERENCE\"));\n                 workflow.setWorkflowType(rs.getString(\"WF_TYPE\"));\n-\n                 String workflowstatus =rs.getString(\"WF_STATUS\");\n                 workflow.setStatus(org.wso2.carbon.apimgt.api.WorkflowStatus.valueOf(workflowstatus));\n-\n                 workflow.setCreatedTime(rs.getTimestamp(\"WF_CREATED_TIME\").toString());\n                 workflow.setUpdatedTime(rs.getTimestamp(\"WF_UPDATED_TIME\").toString());\n-\n                 workflow.setWorkflowStatusDesc(rs.getString(\"WF_STATUS_DESC\"));\n                 workflow.setTenantId(rs.getInt(\"TENANT_ID\"));\n                 workflow.setTenantDomain(rs.getString(\"TENANT_DOMAIN\"));\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg1NzEwMA==", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r386857100", "body": "remove unnecessary white space", "bodyText": "remove unnecessary white space", "bodyHTML": "<p dir=\"auto\">remove unnecessary white space</p>", "author": "chamilaadhi", "createdAt": "2020-03-03T08:18:20Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "diffHunk": "@@ -14576,4 +14580,284 @@ public String getUserID(String userName) throws APIManagementException {\n         }\n         return userID;\n     }\n+\n+\n+    public void deleteWorkflowRequest(String workflowExtRef) throws APIManagementException {\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+\n+        String query = SQLConstants.DELETE_WORKFLOW_REQUEST_SQL;\n+        try {\n+\n+            connection = APIMgtDBUtil.getConnection();\n+            connection.setAutoCommit(false);\n+\n+", "originalCommit": "6e7d63f0cbce7821d881557b6f804ffd9f00caf6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e5f1ca8c0c731ff296553a3776fe7937da125395", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\nindex b25d82b29f3..d1b86fe2c24 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\n", "chunk": "@@ -14588,11 +14636,9 @@ public class ApiMgtDAO {\n \n         String query = SQLConstants.DELETE_WORKFLOW_REQUEST_SQL;\n         try {\n-\n             connection = APIMgtDBUtil.getConnection();\n             connection.setAutoCommit(false);\n \n-\n             prepStmt = connection.prepareStatement(query);\n             prepStmt.setString(1, workflowExtRef);\n             prepStmt.executeUpdate();\n", "next_change": {"commit": "e00fe40f5ef809f1ac81dc7c22faacda062adfab", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\nindex d1b86fe2c24..c19a17b31df 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\n", "chunk": "@@ -14621,70 +14619,59 @@ public class ApiMgtDAO {\n             APIMgtDBUtil.closeAllConnections(ps, conn, resultSet);\n         }\n         return list;\n-=======\n+    }\n \n     /**\n      * Remove the Pending workflow Requests using ExternalWorkflowReference\n-     *\n-     * @param workflowExtRef\n-     * @return\n+     * @param workflowExtRef External Workflow Reference of Workflow Pending Request\n+     * @throws APIManagementException\n      */\n-\n     public void deleteWorkflowRequest(String workflowExtRef) throws APIManagementException {\n         Connection connection = null;\n         PreparedStatement prepStmt = null;\n-\n         String query = SQLConstants.DELETE_WORKFLOW_REQUEST_SQL;\n         try {\n             connection = APIMgtDBUtil.getConnection();\n             connection.setAutoCommit(false);\n-\n             prepStmt = connection.prepareStatement(query);\n             prepStmt.setString(1, workflowExtRef);\n             prepStmt.executeUpdate();\n             connection.commit();\n         }\n         catch (SQLException e) {\n-            handleException(\"Failed to delete the workflow request \", e);\n+            handleException(\"Failed to delete the workflow request. \", e);\n+        } finally {\n+            APIMgtDBUtil.closeAllConnections(prepStmt, connection, null);\n         }\n     }\n \n     /**\n      * Get the Pending workflow Request using ExternalWorkflowReference\n-     *\n      * @param externalWorkflowRef\n-     * @return\n+     * @return workflow pending request\n+     * @throws APIManagementException\n      */\n-\n     public Workflow getworkflowReferenceByExternalWorkflowReference(String externalWorkflowRef)throws APIManagementException {\n \n         Connection connection = null;\n         PreparedStatement prepStmt = null;\n         ResultSet rs = null;\n-\n-        Workflow workflow=new Workflow();\n-\n-        String sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_BY_EWR;\n-\n+        Workflow workflow = new Workflow();\n+        String sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_BY_EXTERNALWORKFLOWREF;\n         try {\n             connection = APIMgtDBUtil.getConnection();\n             prepStmt = connection.prepareStatement(sqlQuery);\n             prepStmt.setString(1, externalWorkflowRef);\n-\n             rs = prepStmt.executeQuery();\n \n             while (rs.next()) {\n-\n                 workflow.setWorkflowId(rs.getInt(\"WF_ID\"));\n                 workflow.setWorkflowReference(rs.getString(\"WF_REFERENCE\"));\n                 workflow.setWorkflowType(rs.getString(\"WF_TYPE\"));\n-\n                 String workflowstatus =rs.getString(\"WF_STATUS\");\n                 workflow.setStatus(org.wso2.carbon.apimgt.api.WorkflowStatus.valueOf(workflowstatus));\n-\n                 workflow.setCreatedTime(rs.getTimestamp(\"WF_CREATED_TIME\").toString());\n                 workflow.setUpdatedTime(rs.getTimestamp(\"WF_UPDATED_TIME\").toString());\n-\n                 workflow.setWorkflowStatusDesc(rs.getString(\"WF_STATUS_DESC\"));\n                 workflow.setTenantId(rs.getInt(\"TENANT_ID\"));\n                 workflow.setTenantDomain(rs.getString(\"TENANT_DOMAIN\"));\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg1NzY1Mw==", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r386857653", "body": "- format the method\r\n- add a self-explanatory method name (no idea what this EWR means)\r\n- add method description", "bodyText": "format the method\nadd a self-explanatory method name (no idea what this EWR means)\nadd method description", "bodyHTML": "<ul dir=\"auto\">\n<li>format the method</li>\n<li>add a self-explanatory method name (no idea what this EWR means)</li>\n<li>add method description</li>\n</ul>", "author": "chamilaadhi", "createdAt": "2020-03-03T08:19:41Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "diffHunk": "@@ -14576,4 +14580,284 @@ public String getUserID(String userName) throws APIManagementException {\n         }\n         return userID;\n     }\n+\n+\n+    public void deleteWorkflowRequest(String workflowExtRef) throws APIManagementException {\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+\n+        String query = SQLConstants.DELETE_WORKFLOW_REQUEST_SQL;\n+        try {\n+\n+            connection = APIMgtDBUtil.getConnection();\n+            connection.setAutoCommit(false);\n+\n+\n+            prepStmt = connection.prepareStatement(query);\n+            prepStmt.setString(1, workflowExtRef);\n+            prepStmt.executeUpdate();\n+            connection.commit();\n+        }\n+        catch (SQLException e) {\n+            handleException(\"Failed to delete the workflow request \", e);\n+\n+        }\n+    }\n+\n+    public Workflow getworkflowReferenceByEWR(String externalWorkflowRef)throws APIManagementException {\n+", "originalCommit": "6e7d63f0cbce7821d881557b6f804ffd9f00caf6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU5OTEzMw==", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r387599133", "bodyText": "fixed with 1be4d86", "author": "SahanHerath", "createdAt": "2020-03-04T11:11:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg1NzY1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "e5f1ca8c0c731ff296553a3776fe7937da125395", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\nindex b25d82b29f3..d1b86fe2c24 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\n", "chunk": "@@ -14600,17 +14646,22 @@ public class ApiMgtDAO {\n         }\n         catch (SQLException e) {\n             handleException(\"Failed to delete the workflow request \", e);\n-\n         }\n     }\n \n-    public Workflow getworkflowReferenceByEWR(String externalWorkflowRef)throws APIManagementException {\n+    /**\n+     * Get the Pending workflow Request using ExternalWorkflowReference\n+     *\n+     * @param externalWorkflowRef\n+     * @return\n+     */\n+\n+    public Workflow getworkflowReferenceByExternalWorkflowReference(String externalWorkflowRef)throws APIManagementException {\n \n         Connection connection = null;\n         PreparedStatement prepStmt = null;\n         ResultSet rs = null;\n \n-\n         Workflow workflow=new Workflow();\n \n         String sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_BY_EWR;\n", "next_change": {"commit": "e00fe40f5ef809f1ac81dc7c22faacda062adfab", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\nindex d1b86fe2c24..c19a17b31df 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\n", "chunk": "@@ -14621,70 +14619,59 @@ public class ApiMgtDAO {\n             APIMgtDBUtil.closeAllConnections(ps, conn, resultSet);\n         }\n         return list;\n-=======\n+    }\n \n     /**\n      * Remove the Pending workflow Requests using ExternalWorkflowReference\n-     *\n-     * @param workflowExtRef\n-     * @return\n+     * @param workflowExtRef External Workflow Reference of Workflow Pending Request\n+     * @throws APIManagementException\n      */\n-\n     public void deleteWorkflowRequest(String workflowExtRef) throws APIManagementException {\n         Connection connection = null;\n         PreparedStatement prepStmt = null;\n-\n         String query = SQLConstants.DELETE_WORKFLOW_REQUEST_SQL;\n         try {\n             connection = APIMgtDBUtil.getConnection();\n             connection.setAutoCommit(false);\n-\n             prepStmt = connection.prepareStatement(query);\n             prepStmt.setString(1, workflowExtRef);\n             prepStmt.executeUpdate();\n             connection.commit();\n         }\n         catch (SQLException e) {\n-            handleException(\"Failed to delete the workflow request \", e);\n+            handleException(\"Failed to delete the workflow request. \", e);\n+        } finally {\n+            APIMgtDBUtil.closeAllConnections(prepStmt, connection, null);\n         }\n     }\n \n     /**\n      * Get the Pending workflow Request using ExternalWorkflowReference\n-     *\n      * @param externalWorkflowRef\n-     * @return\n+     * @return workflow pending request\n+     * @throws APIManagementException\n      */\n-\n     public Workflow getworkflowReferenceByExternalWorkflowReference(String externalWorkflowRef)throws APIManagementException {\n \n         Connection connection = null;\n         PreparedStatement prepStmt = null;\n         ResultSet rs = null;\n-\n-        Workflow workflow=new Workflow();\n-\n-        String sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_BY_EWR;\n-\n+        Workflow workflow = new Workflow();\n+        String sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_BY_EXTERNALWORKFLOWREF;\n         try {\n             connection = APIMgtDBUtil.getConnection();\n             prepStmt = connection.prepareStatement(sqlQuery);\n             prepStmt.setString(1, externalWorkflowRef);\n-\n             rs = prepStmt.executeQuery();\n \n             while (rs.next()) {\n-\n                 workflow.setWorkflowId(rs.getInt(\"WF_ID\"));\n                 workflow.setWorkflowReference(rs.getString(\"WF_REFERENCE\"));\n                 workflow.setWorkflowType(rs.getString(\"WF_TYPE\"));\n-\n                 String workflowstatus =rs.getString(\"WF_STATUS\");\n                 workflow.setStatus(org.wso2.carbon.apimgt.api.WorkflowStatus.valueOf(workflowstatus));\n-\n                 workflow.setCreatedTime(rs.getTimestamp(\"WF_CREATED_TIME\").toString());\n                 workflow.setUpdatedTime(rs.getTimestamp(\"WF_UPDATED_TIME\").toString());\n-\n                 workflow.setWorkflowStatusDesc(rs.getString(\"WF_STATUS_DESC\"));\n                 workflow.setTenantId(rs.getInt(\"TENANT_ID\"));\n                 workflow.setTenantDomain(rs.getString(\"TENANT_DOMAIN\"));\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg1Nzc4NA==", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r386857784", "body": "remove all unnecessary white spaces", "bodyText": "remove all unnecessary white spaces", "bodyHTML": "<p dir=\"auto\">remove all unnecessary white spaces</p>", "author": "chamilaadhi", "createdAt": "2020-03-03T08:20:03Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "diffHunk": "@@ -14576,4 +14580,284 @@ public String getUserID(String userName) throws APIManagementException {\n         }\n         return userID;\n     }\n+\n+\n+    public void deleteWorkflowRequest(String workflowExtRef) throws APIManagementException {\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+\n+        String query = SQLConstants.DELETE_WORKFLOW_REQUEST_SQL;\n+        try {\n+\n+            connection = APIMgtDBUtil.getConnection();\n+            connection.setAutoCommit(false);\n+\n+\n+            prepStmt = connection.prepareStatement(query);\n+            prepStmt.setString(1, workflowExtRef);\n+            prepStmt.executeUpdate();\n+            connection.commit();\n+        }\n+        catch (SQLException e) {\n+            handleException(\"Failed to delete the workflow request \", e);\n+\n+        }\n+    }\n+\n+    public Workflow getworkflowReferenceByEWR(String externalWorkflowRef)throws APIManagementException {\n+\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+        ResultSet rs = null;\n+\n+\n+        Workflow workflow=new Workflow();\n+\n+        String sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_BY_EWR;\n+\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            prepStmt = connection.prepareStatement(sqlQuery);\n+            prepStmt.setString(1, externalWorkflowRef);\n+\n+\n+            rs = prepStmt.executeQuery();\n+\n+\n+", "originalCommit": "6e7d63f0cbce7821d881557b6f804ffd9f00caf6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e5f1ca8c0c731ff296553a3776fe7937da125395", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\nindex b25d82b29f3..d1b86fe2c24 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\n", "chunk": "@@ -14620,12 +14671,8 @@ public class ApiMgtDAO {\n             prepStmt = connection.prepareStatement(sqlQuery);\n             prepStmt.setString(1, externalWorkflowRef);\n \n-\n             rs = prepStmt.executeQuery();\n \n-\n-\n-\n             while (rs.next()) {\n \n                 workflow.setWorkflowId(rs.getInt(\"WF_ID\"));\n", "next_change": {"commit": "e00fe40f5ef809f1ac81dc7c22faacda062adfab", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\nindex d1b86fe2c24..c19a17b31df 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\n", "chunk": "@@ -14621,70 +14619,59 @@ public class ApiMgtDAO {\n             APIMgtDBUtil.closeAllConnections(ps, conn, resultSet);\n         }\n         return list;\n-=======\n+    }\n \n     /**\n      * Remove the Pending workflow Requests using ExternalWorkflowReference\n-     *\n-     * @param workflowExtRef\n-     * @return\n+     * @param workflowExtRef External Workflow Reference of Workflow Pending Request\n+     * @throws APIManagementException\n      */\n-\n     public void deleteWorkflowRequest(String workflowExtRef) throws APIManagementException {\n         Connection connection = null;\n         PreparedStatement prepStmt = null;\n-\n         String query = SQLConstants.DELETE_WORKFLOW_REQUEST_SQL;\n         try {\n             connection = APIMgtDBUtil.getConnection();\n             connection.setAutoCommit(false);\n-\n             prepStmt = connection.prepareStatement(query);\n             prepStmt.setString(1, workflowExtRef);\n             prepStmt.executeUpdate();\n             connection.commit();\n         }\n         catch (SQLException e) {\n-            handleException(\"Failed to delete the workflow request \", e);\n+            handleException(\"Failed to delete the workflow request. \", e);\n+        } finally {\n+            APIMgtDBUtil.closeAllConnections(prepStmt, connection, null);\n         }\n     }\n \n     /**\n      * Get the Pending workflow Request using ExternalWorkflowReference\n-     *\n      * @param externalWorkflowRef\n-     * @return\n+     * @return workflow pending request\n+     * @throws APIManagementException\n      */\n-\n     public Workflow getworkflowReferenceByExternalWorkflowReference(String externalWorkflowRef)throws APIManagementException {\n \n         Connection connection = null;\n         PreparedStatement prepStmt = null;\n         ResultSet rs = null;\n-\n-        Workflow workflow=new Workflow();\n-\n-        String sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_BY_EWR;\n-\n+        Workflow workflow = new Workflow();\n+        String sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_BY_EXTERNALWORKFLOWREF;\n         try {\n             connection = APIMgtDBUtil.getConnection();\n             prepStmt = connection.prepareStatement(sqlQuery);\n             prepStmt.setString(1, externalWorkflowRef);\n-\n             rs = prepStmt.executeQuery();\n \n             while (rs.next()) {\n-\n                 workflow.setWorkflowId(rs.getInt(\"WF_ID\"));\n                 workflow.setWorkflowReference(rs.getString(\"WF_REFERENCE\"));\n                 workflow.setWorkflowType(rs.getString(\"WF_TYPE\"));\n-\n                 String workflowstatus =rs.getString(\"WF_STATUS\");\n                 workflow.setStatus(org.wso2.carbon.apimgt.api.WorkflowStatus.valueOf(workflowstatus));\n-\n                 workflow.setCreatedTime(rs.getTimestamp(\"WF_CREATED_TIME\").toString());\n                 workflow.setUpdatedTime(rs.getTimestamp(\"WF_UPDATED_TIME\").toString());\n-\n                 workflow.setWorkflowStatusDesc(rs.getString(\"WF_STATUS_DESC\"));\n                 workflow.setTenantId(rs.getInt(\"TENANT_ID\"));\n                 workflow.setTenantDomain(rs.getString(\"TENANT_DOMAIN\"));\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg1ODI5Mw==", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r386858293", "body": "remove whitespace and format", "bodyText": "remove whitespace and format", "bodyHTML": "<p dir=\"auto\">remove whitespace and format</p>", "author": "chamilaadhi", "createdAt": "2020-03-03T08:21:18Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "diffHunk": "@@ -14576,4 +14580,284 @@ public String getUserID(String userName) throws APIManagementException {\n         }\n         return userID;\n     }\n+\n+\n+    public void deleteWorkflowRequest(String workflowExtRef) throws APIManagementException {\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+\n+        String query = SQLConstants.DELETE_WORKFLOW_REQUEST_SQL;\n+        try {\n+\n+            connection = APIMgtDBUtil.getConnection();\n+            connection.setAutoCommit(false);\n+\n+\n+            prepStmt = connection.prepareStatement(query);\n+            prepStmt.setString(1, workflowExtRef);\n+            prepStmt.executeUpdate();\n+            connection.commit();\n+        }\n+        catch (SQLException e) {\n+            handleException(\"Failed to delete the workflow request \", e);\n+\n+        }\n+    }\n+\n+    public Workflow getworkflowReferenceByEWR(String externalWorkflowRef)throws APIManagementException {\n+\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+        ResultSet rs = null;\n+\n+\n+        Workflow workflow=new Workflow();\n+\n+        String sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_BY_EWR;\n+\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            prepStmt = connection.prepareStatement(sqlQuery);\n+            prepStmt.setString(1, externalWorkflowRef);\n+\n+\n+            rs = prepStmt.executeQuery();\n+\n+\n+\n+\n+            while (rs.next()) {\n+\n+                workflow.setWorkflowId(rs.getInt(\"WF_ID\"));\n+                workflow.setWorkflowReference(rs.getString(\"WF_REFERENCE\"));\n+                workflow.setWorkflowType(rs.getString(\"WF_TYPE\"));\n+\n+                String workflowstatus =rs.getString(\"WF_STATUS\");\n+                workflow.setStatus(org.wso2.carbon.apimgt.api.WorkflowStatus.valueOf(workflowstatus));\n+\n+                workflow.setCreatedTime(rs.getTimestamp(\"WF_CREATED_TIME\").toString());\n+                workflow.setUpdatedTime(rs.getTimestamp(\"WF_UPDATED_TIME\").toString());\n+\n+                workflow.setWorkflowStatusDesc(rs.getString(\"WF_STATUS_DESC\"));\n+                workflow.setTenantId(rs.getInt(\"TENANT_ID\"));\n+                workflow.setTenantDomain(rs.getString(\"TENANT_DOMAIN\"));\n+                workflow.setExternalWorkflowReference(rs.getString(\"WF_EXTERNAL_REFERENCE\"));\n+                Blob blob = rs.getBlob(\"WF_METADATA\");\n+\n+                byte[] byteData;\n+\n+                if(blob != null) {\n+                    byteData = blob.getBytes(1L, (int) blob.length());\n+                    InputStream targetStream = new ByteArrayInputStream(byteData);\n+                    String data = APIMgtDBUtil.getStringFromInputStream(targetStream);\n+                    Gson g = new Gson();\n+\n+                    JSONObject json = g.fromJson(data, JSONObject.class);\n+                    workflow.setMetadata(json);\n+                }\n+                else{\n+                    JSONObject json=new JSONObject();\n+                    workflow.setMetadata(json);\n+                }\n+\n+\n+\n+            }\n+\n+        } catch (SQLException e) {\n+            handleException(\"Error when retriving the workflow details\" , e);\n+        } finally {\n+            APIMgtDBUtil.closeAllConnections(prepStmt, connection, rs);\n+        }\n+        return workflow;\n+    }\n+\n+    public Workflow[] getworkflows(String workflowType ,String status ,String tenantDomain) throws APIManagementException {\n+\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+        ResultSet rs = null;\n+\n+        Workflow[] workflows = null;\n+\n+        String sqlQuery;\n+\n+        if (workflowType != null){\n+            sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS;\n+        }\n+        else{\n+            sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_NO_TYPE;\n+        }\n+\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            prepStmt = connection.prepareStatement(sqlQuery);\n+\n+            if (workflowType != null){\n+                prepStmt.setString(1, workflowType);\n+                prepStmt.setString( 2, status);\n+                prepStmt.setString( 3, tenantDomain);\n+\n+            }\n+            else{\n+                prepStmt.setString( 1, status);\n+                prepStmt.setString( 2, tenantDomain);\n+            }\n+\n+\n+", "originalCommit": "6e7d63f0cbce7821d881557b6f804ffd9f00caf6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e5f1ca8c0c731ff296553a3776fe7937da125395", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\nindex b25d82b29f3..d1b86fe2c24 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\n", "chunk": "@@ -14698,15 +14747,11 @@ public class ApiMgtDAO {\n                 prepStmt.setString( 2, status);\n                 prepStmt.setString( 3, tenantDomain);\n \n-            }\n-            else{\n+            } else {\n                 prepStmt.setString( 1, status);\n                 prepStmt.setString( 2, tenantDomain);\n             }\n \n-\n-\n-\n             rs = prepStmt.executeQuery();\n \n             ArrayList<Workflow> workflowsList = new ArrayList<Workflow>();\n", "next_change": {"commit": "e00fe40f5ef809f1ac81dc7c22faacda062adfab", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\nindex d1b86fe2c24..c19a17b31df 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\n", "chunk": "@@ -14746,12 +14727,10 @@ public class ApiMgtDAO {\n                 prepStmt.setString(1, workflowType);\n                 prepStmt.setString( 2, status);\n                 prepStmt.setString( 3, tenantDomain);\n-\n             } else {\n                 prepStmt.setString( 1, status);\n                 prepStmt.setString( 2, tenantDomain);\n             }\n-\n             rs = prepStmt.executeQuery();\n \n             ArrayList<Workflow> workflowsList = new ArrayList<Workflow>();\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg1OTE4NA==", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r386859184", "body": "use a self descriptive variable names (ex: metadataBlob)", "bodyText": "use a self descriptive variable names (ex: metadataBlob)", "bodyHTML": "<p dir=\"auto\">use a self descriptive variable names (ex: metadataBlob)</p>", "author": "chamilaadhi", "createdAt": "2020-03-03T08:23:31Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "diffHunk": "@@ -14576,4 +14580,284 @@ public String getUserID(String userName) throws APIManagementException {\n         }\n         return userID;\n     }\n+\n+\n+    public void deleteWorkflowRequest(String workflowExtRef) throws APIManagementException {\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+\n+        String query = SQLConstants.DELETE_WORKFLOW_REQUEST_SQL;\n+        try {\n+\n+            connection = APIMgtDBUtil.getConnection();\n+            connection.setAutoCommit(false);\n+\n+\n+            prepStmt = connection.prepareStatement(query);\n+            prepStmt.setString(1, workflowExtRef);\n+            prepStmt.executeUpdate();\n+            connection.commit();\n+        }\n+        catch (SQLException e) {\n+            handleException(\"Failed to delete the workflow request \", e);\n+\n+        }\n+    }\n+\n+    public Workflow getworkflowReferenceByEWR(String externalWorkflowRef)throws APIManagementException {\n+\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+        ResultSet rs = null;\n+\n+\n+        Workflow workflow=new Workflow();\n+\n+        String sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_BY_EWR;\n+\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            prepStmt = connection.prepareStatement(sqlQuery);\n+            prepStmt.setString(1, externalWorkflowRef);\n+\n+\n+            rs = prepStmt.executeQuery();\n+\n+\n+\n+\n+            while (rs.next()) {\n+\n+                workflow.setWorkflowId(rs.getInt(\"WF_ID\"));\n+                workflow.setWorkflowReference(rs.getString(\"WF_REFERENCE\"));\n+                workflow.setWorkflowType(rs.getString(\"WF_TYPE\"));\n+\n+                String workflowstatus =rs.getString(\"WF_STATUS\");\n+                workflow.setStatus(org.wso2.carbon.apimgt.api.WorkflowStatus.valueOf(workflowstatus));\n+\n+                workflow.setCreatedTime(rs.getTimestamp(\"WF_CREATED_TIME\").toString());\n+                workflow.setUpdatedTime(rs.getTimestamp(\"WF_UPDATED_TIME\").toString());\n+\n+                workflow.setWorkflowStatusDesc(rs.getString(\"WF_STATUS_DESC\"));\n+                workflow.setTenantId(rs.getInt(\"TENANT_ID\"));\n+                workflow.setTenantDomain(rs.getString(\"TENANT_DOMAIN\"));\n+                workflow.setExternalWorkflowReference(rs.getString(\"WF_EXTERNAL_REFERENCE\"));\n+                Blob blob = rs.getBlob(\"WF_METADATA\");\n+\n+                byte[] byteData;\n+\n+                if(blob != null) {\n+                    byteData = blob.getBytes(1L, (int) blob.length());\n+                    InputStream targetStream = new ByteArrayInputStream(byteData);\n+                    String data = APIMgtDBUtil.getStringFromInputStream(targetStream);\n+                    Gson g = new Gson();\n+\n+                    JSONObject json = g.fromJson(data, JSONObject.class);\n+                    workflow.setMetadata(json);\n+                }\n+                else{\n+                    JSONObject json=new JSONObject();\n+                    workflow.setMetadata(json);\n+                }\n+\n+\n+\n+            }\n+\n+        } catch (SQLException e) {\n+            handleException(\"Error when retriving the workflow details\" , e);\n+        } finally {\n+            APIMgtDBUtil.closeAllConnections(prepStmt, connection, rs);\n+        }\n+        return workflow;\n+    }\n+\n+    public Workflow[] getworkflows(String workflowType ,String status ,String tenantDomain) throws APIManagementException {\n+\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+        ResultSet rs = null;\n+\n+        Workflow[] workflows = null;\n+\n+        String sqlQuery;\n+\n+        if (workflowType != null){\n+            sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS;\n+        }\n+        else{\n+            sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_NO_TYPE;\n+        }\n+\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            prepStmt = connection.prepareStatement(sqlQuery);\n+\n+            if (workflowType != null){\n+                prepStmt.setString(1, workflowType);\n+                prepStmt.setString( 2, status);\n+                prepStmt.setString( 3, tenantDomain);\n+\n+            }\n+            else{\n+                prepStmt.setString( 1, status);\n+                prepStmt.setString( 2, tenantDomain);\n+            }\n+\n+\n+\n+\n+            rs = prepStmt.executeQuery();\n+\n+            ArrayList<Workflow> workflowsList = new ArrayList<Workflow>();\n+            Workflow workflow;\n+            while (rs.next()) {\n+                workflow = new Workflow();\n+                workflow.setWorkflowId(rs.getInt(\"WF_ID\"));\n+                workflow.setWorkflowReference(rs.getString(\"WF_REFERENCE\"));\n+                workflow.setWorkflowType(rs.getString(\"WF_TYPE\"));\n+\n+                String workflowstatus =rs.getString(\"WF_STATUS\");\n+                workflow.setStatus(org.wso2.carbon.apimgt.api.WorkflowStatus.valueOf(workflowstatus));\n+\n+                workflow.setCreatedTime(rs.getTimestamp(\"WF_CREATED_TIME\").toString());\n+                workflow.setUpdatedTime(rs.getTimestamp(\"WF_UPDATED_TIME\").toString());\n+\n+                workflow.setWorkflowStatusDesc(rs.getString(\"WF_STATUS_DESC\"));\n+                workflow.setTenantId(rs.getInt(\"TENANT_ID\"));\n+                workflow.setTenantDomain(rs.getString(\"TENANT_DOMAIN\"));\n+                workflow.setExternalWorkflowReference(rs.getString(\"WF_EXTERNAL_REFERENCE\"));\n+                workflow.setWorkflowDescription(rs.getString(\"WF_STATUS_DESC\"));\n+                Blob blob = rs.getBlob(\"WF_METADATA\");\n+                Blob blob1 = rs.getBlob(\"WF_PROPERTIES\");\n+", "originalCommit": "6e7d63f0cbce7821d881557b6f804ffd9f00caf6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e5f1ca8c0c731ff296553a3776fe7937da125395", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\nindex b25d82b29f3..d1b86fe2c24 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\n", "chunk": "@@ -14728,38 +14773,35 @@ public class ApiMgtDAO {\n                 workflow.setTenantDomain(rs.getString(\"TENANT_DOMAIN\"));\n                 workflow.setExternalWorkflowReference(rs.getString(\"WF_EXTERNAL_REFERENCE\"));\n                 workflow.setWorkflowDescription(rs.getString(\"WF_STATUS_DESC\"));\n-                Blob blob = rs.getBlob(\"WF_METADATA\");\n-                Blob blob1 = rs.getBlob(\"WF_PROPERTIES\");\n+                Blob metadataBlob = rs.getBlob(\"WF_METADATA\");\n+                Blob propertiesBlob = rs.getBlob(\"WF_PROPERTIES\");\n \n+                byte[] metadataByte;\n \n-                byte[] byteData;\n-\n-                if(blob != null) {\n-                    byteData = blob.getBytes(1L, (int) blob.length());\n-                    InputStream targetStream = new ByteArrayInputStream(byteData);\n-                    String data = APIMgtDBUtil.getStringFromInputStream(targetStream);\n+                if(metadataBlob != null) {\n+                    metadataByte = metadataBlob.getBytes(1L, (int) metadataBlob.length());\n+                    InputStream targetStream = new ByteArrayInputStream(metadataByte);\n+                    String metadata = APIMgtDBUtil.getStringFromInputStream(targetStream);\n                     Gson g = new Gson();\n \n-                    JSONObject json = g.fromJson(data, JSONObject.class);\n+                    JSONObject json = g.fromJson(metadata, JSONObject.class);\n                     workflow.setMetadata(json);\n-                }\n-                else{\n+                } else {\n                     JSONObject json = new JSONObject();\n                     workflow.setMetadata(json);\n                 }\n \n-                byte[] byteData1;\n+                byte[] propertiesByte;\n \n-                if(blob1 != null) {\n-                    byteData1 = blob1.getBytes(1L, (int) blob.length());\n-                    InputStream targetStream1 = new ByteArrayInputStream(byteData1);\n-                    String data1 = APIMgtDBUtil.getStringFromInputStream(targetStream1);\n+                if(propertiesBlob != null) {\n+                    propertiesByte = propertiesBlob.getBytes(1L, (int) propertiesBlob.length());\n+                    InputStream propertiesTargetStream = new ByteArrayInputStream(propertiesByte);\n+                    String properties = APIMgtDBUtil.getStringFromInputStream(propertiesTargetStream);\n                     Gson g = new Gson();\n \n-                    JSONObject json = g.fromJson(data1, JSONObject.class);\n+                    JSONObject json = g.fromJson(properties, JSONObject.class);\n                     workflow.setProperties(json);\n-                }\n-                else{\n+                } else {\n                     JSONObject json = new JSONObject();\n                     workflow.setProperties(json);\n                 }\n", "next_change": {"commit": "e00fe40f5ef809f1ac81dc7c22faacda062adfab", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\nindex d1b86fe2c24..c19a17b31df 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\n", "chunk": "@@ -14777,40 +14753,35 @@ public class ApiMgtDAO {\n                 Blob propertiesBlob = rs.getBlob(\"WF_PROPERTIES\");\n \n                 byte[] metadataByte;\n-\n                 if(metadataBlob != null) {\n                     metadataByte = metadataBlob.getBytes(1L, (int) metadataBlob.length());\n                     InputStream targetStream = new ByteArrayInputStream(metadataByte);\n                     String metadata = APIMgtDBUtil.getStringFromInputStream(targetStream);\n-                    Gson g = new Gson();\n-\n-                    JSONObject json = g.fromJson(metadata, JSONObject.class);\n-                    workflow.setMetadata(json);\n+                    Gson metadataGson = new Gson();\n+                    JSONObject metadataJson = metadataGson.fromJson(metadata, JSONObject.class);\n+                    workflow.setMetadata(metadataJson);\n                 } else {\n-                    JSONObject json = new JSONObject();\n-                    workflow.setMetadata(json);\n+                    JSONObject metadataJson = new JSONObject();\n+                    workflow.setMetadata(metadataJson);\n                 }\n \n                 byte[] propertiesByte;\n-\n                 if(propertiesBlob != null) {\n                     propertiesByte = propertiesBlob.getBytes(1L, (int) propertiesBlob.length());\n                     InputStream propertiesTargetStream = new ByteArrayInputStream(propertiesByte);\n                     String properties = APIMgtDBUtil.getStringFromInputStream(propertiesTargetStream);\n-                    Gson g = new Gson();\n-\n-                    JSONObject json = g.fromJson(properties, JSONObject.class);\n-                    workflow.setProperties(json);\n+                    Gson propertiesGson = new Gson();\n+                    JSONObject propertiesJson = propertiesGson.fromJson(properties, JSONObject.class);\n+                    workflow.setProperties(propertiesJson);\n                 } else {\n-                    JSONObject json = new JSONObject();\n-                    workflow.setProperties(json);\n+                    JSONObject propertiesJson = new JSONObject();\n+                    workflow.setProperties(propertiesJson);\n                 }\n-\n                 workflowsList.add(workflow);\n             }\n             workflows = workflowsList.toArray(new Workflow[workflowsList.size()]);\n         } catch (SQLException e) {\n-            handleException(\"Error when retrieve all the workflow details\" , e);\n+            handleException(\"Error when retrieve all the workflow details. \" , e);\n         } finally {\n             APIMgtDBUtil.closeAllConnections(prepStmt, connection, rs);\n         }\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg1OTM3Nw==", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r386859377", "body": "same here", "bodyText": "same here", "bodyHTML": "<p dir=\"auto\">same here</p>", "author": "chamilaadhi", "createdAt": "2020-03-03T08:23:59Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "diffHunk": "@@ -14576,4 +14580,284 @@ public String getUserID(String userName) throws APIManagementException {\n         }\n         return userID;\n     }\n+\n+\n+    public void deleteWorkflowRequest(String workflowExtRef) throws APIManagementException {\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+\n+        String query = SQLConstants.DELETE_WORKFLOW_REQUEST_SQL;\n+        try {\n+\n+            connection = APIMgtDBUtil.getConnection();\n+            connection.setAutoCommit(false);\n+\n+\n+            prepStmt = connection.prepareStatement(query);\n+            prepStmt.setString(1, workflowExtRef);\n+            prepStmt.executeUpdate();\n+            connection.commit();\n+        }\n+        catch (SQLException e) {\n+            handleException(\"Failed to delete the workflow request \", e);\n+\n+        }\n+    }\n+\n+    public Workflow getworkflowReferenceByEWR(String externalWorkflowRef)throws APIManagementException {\n+\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+        ResultSet rs = null;\n+\n+\n+        Workflow workflow=new Workflow();\n+\n+        String sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_BY_EWR;\n+\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            prepStmt = connection.prepareStatement(sqlQuery);\n+            prepStmt.setString(1, externalWorkflowRef);\n+\n+\n+            rs = prepStmt.executeQuery();\n+\n+\n+\n+\n+            while (rs.next()) {\n+\n+                workflow.setWorkflowId(rs.getInt(\"WF_ID\"));\n+                workflow.setWorkflowReference(rs.getString(\"WF_REFERENCE\"));\n+                workflow.setWorkflowType(rs.getString(\"WF_TYPE\"));\n+\n+                String workflowstatus =rs.getString(\"WF_STATUS\");\n+                workflow.setStatus(org.wso2.carbon.apimgt.api.WorkflowStatus.valueOf(workflowstatus));\n+\n+                workflow.setCreatedTime(rs.getTimestamp(\"WF_CREATED_TIME\").toString());\n+                workflow.setUpdatedTime(rs.getTimestamp(\"WF_UPDATED_TIME\").toString());\n+\n+                workflow.setWorkflowStatusDesc(rs.getString(\"WF_STATUS_DESC\"));\n+                workflow.setTenantId(rs.getInt(\"TENANT_ID\"));\n+                workflow.setTenantDomain(rs.getString(\"TENANT_DOMAIN\"));\n+                workflow.setExternalWorkflowReference(rs.getString(\"WF_EXTERNAL_REFERENCE\"));\n+                Blob blob = rs.getBlob(\"WF_METADATA\");\n+\n+                byte[] byteData;\n+\n+                if(blob != null) {\n+                    byteData = blob.getBytes(1L, (int) blob.length());\n+                    InputStream targetStream = new ByteArrayInputStream(byteData);\n+                    String data = APIMgtDBUtil.getStringFromInputStream(targetStream);\n+                    Gson g = new Gson();\n+\n+                    JSONObject json = g.fromJson(data, JSONObject.class);\n+                    workflow.setMetadata(json);\n+                }\n+                else{\n+                    JSONObject json=new JSONObject();\n+                    workflow.setMetadata(json);\n+                }\n+\n+\n+\n+            }\n+\n+        } catch (SQLException e) {\n+            handleException(\"Error when retriving the workflow details\" , e);\n+        } finally {\n+            APIMgtDBUtil.closeAllConnections(prepStmt, connection, rs);\n+        }\n+        return workflow;\n+    }\n+\n+    public Workflow[] getworkflows(String workflowType ,String status ,String tenantDomain) throws APIManagementException {\n+\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+        ResultSet rs = null;\n+\n+        Workflow[] workflows = null;\n+\n+        String sqlQuery;\n+\n+        if (workflowType != null){\n+            sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS;\n+        }\n+        else{\n+            sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_NO_TYPE;\n+        }\n+\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            prepStmt = connection.prepareStatement(sqlQuery);\n+\n+            if (workflowType != null){\n+                prepStmt.setString(1, workflowType);\n+                prepStmt.setString( 2, status);\n+                prepStmt.setString( 3, tenantDomain);\n+\n+            }\n+            else{\n+                prepStmt.setString( 1, status);\n+                prepStmt.setString( 2, tenantDomain);\n+            }\n+\n+\n+\n+\n+            rs = prepStmt.executeQuery();\n+\n+            ArrayList<Workflow> workflowsList = new ArrayList<Workflow>();\n+            Workflow workflow;\n+            while (rs.next()) {\n+                workflow = new Workflow();\n+                workflow.setWorkflowId(rs.getInt(\"WF_ID\"));\n+                workflow.setWorkflowReference(rs.getString(\"WF_REFERENCE\"));\n+                workflow.setWorkflowType(rs.getString(\"WF_TYPE\"));\n+\n+                String workflowstatus =rs.getString(\"WF_STATUS\");\n+                workflow.setStatus(org.wso2.carbon.apimgt.api.WorkflowStatus.valueOf(workflowstatus));\n+\n+                workflow.setCreatedTime(rs.getTimestamp(\"WF_CREATED_TIME\").toString());\n+                workflow.setUpdatedTime(rs.getTimestamp(\"WF_UPDATED_TIME\").toString());\n+\n+                workflow.setWorkflowStatusDesc(rs.getString(\"WF_STATUS_DESC\"));\n+                workflow.setTenantId(rs.getInt(\"TENANT_ID\"));\n+                workflow.setTenantDomain(rs.getString(\"TENANT_DOMAIN\"));\n+                workflow.setExternalWorkflowReference(rs.getString(\"WF_EXTERNAL_REFERENCE\"));\n+                workflow.setWorkflowDescription(rs.getString(\"WF_STATUS_DESC\"));\n+                Blob blob = rs.getBlob(\"WF_METADATA\");\n+                Blob blob1 = rs.getBlob(\"WF_PROPERTIES\");\n+\n+\n+                byte[] byteData;\n+", "originalCommit": "6e7d63f0cbce7821d881557b6f804ffd9f00caf6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e5f1ca8c0c731ff296553a3776fe7937da125395", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\nindex b25d82b29f3..d1b86fe2c24 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\n", "chunk": "@@ -14728,38 +14773,35 @@ public class ApiMgtDAO {\n                 workflow.setTenantDomain(rs.getString(\"TENANT_DOMAIN\"));\n                 workflow.setExternalWorkflowReference(rs.getString(\"WF_EXTERNAL_REFERENCE\"));\n                 workflow.setWorkflowDescription(rs.getString(\"WF_STATUS_DESC\"));\n-                Blob blob = rs.getBlob(\"WF_METADATA\");\n-                Blob blob1 = rs.getBlob(\"WF_PROPERTIES\");\n+                Blob metadataBlob = rs.getBlob(\"WF_METADATA\");\n+                Blob propertiesBlob = rs.getBlob(\"WF_PROPERTIES\");\n \n+                byte[] metadataByte;\n \n-                byte[] byteData;\n-\n-                if(blob != null) {\n-                    byteData = blob.getBytes(1L, (int) blob.length());\n-                    InputStream targetStream = new ByteArrayInputStream(byteData);\n-                    String data = APIMgtDBUtil.getStringFromInputStream(targetStream);\n+                if(metadataBlob != null) {\n+                    metadataByte = metadataBlob.getBytes(1L, (int) metadataBlob.length());\n+                    InputStream targetStream = new ByteArrayInputStream(metadataByte);\n+                    String metadata = APIMgtDBUtil.getStringFromInputStream(targetStream);\n                     Gson g = new Gson();\n \n-                    JSONObject json = g.fromJson(data, JSONObject.class);\n+                    JSONObject json = g.fromJson(metadata, JSONObject.class);\n                     workflow.setMetadata(json);\n-                }\n-                else{\n+                } else {\n                     JSONObject json = new JSONObject();\n                     workflow.setMetadata(json);\n                 }\n \n-                byte[] byteData1;\n+                byte[] propertiesByte;\n \n-                if(blob1 != null) {\n-                    byteData1 = blob1.getBytes(1L, (int) blob.length());\n-                    InputStream targetStream1 = new ByteArrayInputStream(byteData1);\n-                    String data1 = APIMgtDBUtil.getStringFromInputStream(targetStream1);\n+                if(propertiesBlob != null) {\n+                    propertiesByte = propertiesBlob.getBytes(1L, (int) propertiesBlob.length());\n+                    InputStream propertiesTargetStream = new ByteArrayInputStream(propertiesByte);\n+                    String properties = APIMgtDBUtil.getStringFromInputStream(propertiesTargetStream);\n                     Gson g = new Gson();\n \n-                    JSONObject json = g.fromJson(data1, JSONObject.class);\n+                    JSONObject json = g.fromJson(properties, JSONObject.class);\n                     workflow.setProperties(json);\n-                }\n-                else{\n+                } else {\n                     JSONObject json = new JSONObject();\n                     workflow.setProperties(json);\n                 }\n", "next_change": {"commit": "e00fe40f5ef809f1ac81dc7c22faacda062adfab", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\nindex d1b86fe2c24..c19a17b31df 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\n", "chunk": "@@ -14777,40 +14753,35 @@ public class ApiMgtDAO {\n                 Blob propertiesBlob = rs.getBlob(\"WF_PROPERTIES\");\n \n                 byte[] metadataByte;\n-\n                 if(metadataBlob != null) {\n                     metadataByte = metadataBlob.getBytes(1L, (int) metadataBlob.length());\n                     InputStream targetStream = new ByteArrayInputStream(metadataByte);\n                     String metadata = APIMgtDBUtil.getStringFromInputStream(targetStream);\n-                    Gson g = new Gson();\n-\n-                    JSONObject json = g.fromJson(metadata, JSONObject.class);\n-                    workflow.setMetadata(json);\n+                    Gson metadataGson = new Gson();\n+                    JSONObject metadataJson = metadataGson.fromJson(metadata, JSONObject.class);\n+                    workflow.setMetadata(metadataJson);\n                 } else {\n-                    JSONObject json = new JSONObject();\n-                    workflow.setMetadata(json);\n+                    JSONObject metadataJson = new JSONObject();\n+                    workflow.setMetadata(metadataJson);\n                 }\n \n                 byte[] propertiesByte;\n-\n                 if(propertiesBlob != null) {\n                     propertiesByte = propertiesBlob.getBytes(1L, (int) propertiesBlob.length());\n                     InputStream propertiesTargetStream = new ByteArrayInputStream(propertiesByte);\n                     String properties = APIMgtDBUtil.getStringFromInputStream(propertiesTargetStream);\n-                    Gson g = new Gson();\n-\n-                    JSONObject json = g.fromJson(properties, JSONObject.class);\n-                    workflow.setProperties(json);\n+                    Gson propertiesGson = new Gson();\n+                    JSONObject propertiesJson = propertiesGson.fromJson(properties, JSONObject.class);\n+                    workflow.setProperties(propertiesJson);\n                 } else {\n-                    JSONObject json = new JSONObject();\n-                    workflow.setProperties(json);\n+                    JSONObject propertiesJson = new JSONObject();\n+                    workflow.setProperties(propertiesJson);\n                 }\n-\n                 workflowsList.add(workflow);\n             }\n             workflows = workflowsList.toArray(new Workflow[workflowsList.size()]);\n         } catch (SQLException e) {\n-            handleException(\"Error when retrieve all the workflow details\" , e);\n+            handleException(\"Error when retrieve all the workflow details. \" , e);\n         } finally {\n             APIMgtDBUtil.closeAllConnections(prepStmt, connection, rs);\n         }\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg1OTUzNw==", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r386859537", "body": "add meaningful variable name", "bodyText": "add meaningful variable name", "bodyHTML": "<p dir=\"auto\">add meaningful variable name</p>", "author": "chamilaadhi", "createdAt": "2020-03-03T08:24:25Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "diffHunk": "@@ -14576,4 +14580,284 @@ public String getUserID(String userName) throws APIManagementException {\n         }\n         return userID;\n     }\n+\n+\n+    public void deleteWorkflowRequest(String workflowExtRef) throws APIManagementException {\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+\n+        String query = SQLConstants.DELETE_WORKFLOW_REQUEST_SQL;\n+        try {\n+\n+            connection = APIMgtDBUtil.getConnection();\n+            connection.setAutoCommit(false);\n+\n+\n+            prepStmt = connection.prepareStatement(query);\n+            prepStmt.setString(1, workflowExtRef);\n+            prepStmt.executeUpdate();\n+            connection.commit();\n+        }\n+        catch (SQLException e) {\n+            handleException(\"Failed to delete the workflow request \", e);\n+\n+        }\n+    }\n+\n+    public Workflow getworkflowReferenceByEWR(String externalWorkflowRef)throws APIManagementException {\n+\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+        ResultSet rs = null;\n+\n+\n+        Workflow workflow=new Workflow();\n+\n+        String sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_BY_EWR;\n+\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            prepStmt = connection.prepareStatement(sqlQuery);\n+            prepStmt.setString(1, externalWorkflowRef);\n+\n+\n+            rs = prepStmt.executeQuery();\n+\n+\n+\n+\n+            while (rs.next()) {\n+\n+                workflow.setWorkflowId(rs.getInt(\"WF_ID\"));\n+                workflow.setWorkflowReference(rs.getString(\"WF_REFERENCE\"));\n+                workflow.setWorkflowType(rs.getString(\"WF_TYPE\"));\n+\n+                String workflowstatus =rs.getString(\"WF_STATUS\");\n+                workflow.setStatus(org.wso2.carbon.apimgt.api.WorkflowStatus.valueOf(workflowstatus));\n+\n+                workflow.setCreatedTime(rs.getTimestamp(\"WF_CREATED_TIME\").toString());\n+                workflow.setUpdatedTime(rs.getTimestamp(\"WF_UPDATED_TIME\").toString());\n+\n+                workflow.setWorkflowStatusDesc(rs.getString(\"WF_STATUS_DESC\"));\n+                workflow.setTenantId(rs.getInt(\"TENANT_ID\"));\n+                workflow.setTenantDomain(rs.getString(\"TENANT_DOMAIN\"));\n+                workflow.setExternalWorkflowReference(rs.getString(\"WF_EXTERNAL_REFERENCE\"));\n+                Blob blob = rs.getBlob(\"WF_METADATA\");\n+\n+                byte[] byteData;\n+\n+                if(blob != null) {\n+                    byteData = blob.getBytes(1L, (int) blob.length());\n+                    InputStream targetStream = new ByteArrayInputStream(byteData);\n+                    String data = APIMgtDBUtil.getStringFromInputStream(targetStream);\n+                    Gson g = new Gson();\n+\n+                    JSONObject json = g.fromJson(data, JSONObject.class);\n+                    workflow.setMetadata(json);\n+                }\n+                else{\n+                    JSONObject json=new JSONObject();\n+                    workflow.setMetadata(json);\n+                }\n+\n+\n+\n+            }\n+\n+        } catch (SQLException e) {\n+            handleException(\"Error when retriving the workflow details\" , e);\n+        } finally {\n+            APIMgtDBUtil.closeAllConnections(prepStmt, connection, rs);\n+        }\n+        return workflow;\n+    }\n+\n+    public Workflow[] getworkflows(String workflowType ,String status ,String tenantDomain) throws APIManagementException {\n+\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+        ResultSet rs = null;\n+\n+        Workflow[] workflows = null;\n+\n+        String sqlQuery;\n+\n+        if (workflowType != null){\n+            sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS;\n+        }\n+        else{\n+            sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_NO_TYPE;\n+        }\n+\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            prepStmt = connection.prepareStatement(sqlQuery);\n+\n+            if (workflowType != null){\n+                prepStmt.setString(1, workflowType);\n+                prepStmt.setString( 2, status);\n+                prepStmt.setString( 3, tenantDomain);\n+\n+            }\n+            else{\n+                prepStmt.setString( 1, status);\n+                prepStmt.setString( 2, tenantDomain);\n+            }\n+\n+\n+\n+\n+            rs = prepStmt.executeQuery();\n+\n+            ArrayList<Workflow> workflowsList = new ArrayList<Workflow>();\n+            Workflow workflow;\n+            while (rs.next()) {\n+                workflow = new Workflow();\n+                workflow.setWorkflowId(rs.getInt(\"WF_ID\"));\n+                workflow.setWorkflowReference(rs.getString(\"WF_REFERENCE\"));\n+                workflow.setWorkflowType(rs.getString(\"WF_TYPE\"));\n+\n+                String workflowstatus =rs.getString(\"WF_STATUS\");\n+                workflow.setStatus(org.wso2.carbon.apimgt.api.WorkflowStatus.valueOf(workflowstatus));\n+\n+                workflow.setCreatedTime(rs.getTimestamp(\"WF_CREATED_TIME\").toString());\n+                workflow.setUpdatedTime(rs.getTimestamp(\"WF_UPDATED_TIME\").toString());\n+\n+                workflow.setWorkflowStatusDesc(rs.getString(\"WF_STATUS_DESC\"));\n+                workflow.setTenantId(rs.getInt(\"TENANT_ID\"));\n+                workflow.setTenantDomain(rs.getString(\"TENANT_DOMAIN\"));\n+                workflow.setExternalWorkflowReference(rs.getString(\"WF_EXTERNAL_REFERENCE\"));\n+                workflow.setWorkflowDescription(rs.getString(\"WF_STATUS_DESC\"));\n+                Blob blob = rs.getBlob(\"WF_METADATA\");\n+                Blob blob1 = rs.getBlob(\"WF_PROPERTIES\");\n+\n+\n+                byte[] byteData;\n+\n+                if(blob != null) {\n+                    byteData = blob.getBytes(1L, (int) blob.length());\n+                    InputStream targetStream = new ByteArrayInputStream(byteData);\n+                    String data = APIMgtDBUtil.getStringFromInputStream(targetStream);\n+                    Gson g = new Gson();", "originalCommit": "6e7d63f0cbce7821d881557b6f804ffd9f00caf6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e5f1ca8c0c731ff296553a3776fe7937da125395", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\nindex b25d82b29f3..d1b86fe2c24 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\n", "chunk": "@@ -14728,38 +14773,35 @@ public class ApiMgtDAO {\n                 workflow.setTenantDomain(rs.getString(\"TENANT_DOMAIN\"));\n                 workflow.setExternalWorkflowReference(rs.getString(\"WF_EXTERNAL_REFERENCE\"));\n                 workflow.setWorkflowDescription(rs.getString(\"WF_STATUS_DESC\"));\n-                Blob blob = rs.getBlob(\"WF_METADATA\");\n-                Blob blob1 = rs.getBlob(\"WF_PROPERTIES\");\n+                Blob metadataBlob = rs.getBlob(\"WF_METADATA\");\n+                Blob propertiesBlob = rs.getBlob(\"WF_PROPERTIES\");\n \n+                byte[] metadataByte;\n \n-                byte[] byteData;\n-\n-                if(blob != null) {\n-                    byteData = blob.getBytes(1L, (int) blob.length());\n-                    InputStream targetStream = new ByteArrayInputStream(byteData);\n-                    String data = APIMgtDBUtil.getStringFromInputStream(targetStream);\n+                if(metadataBlob != null) {\n+                    metadataByte = metadataBlob.getBytes(1L, (int) metadataBlob.length());\n+                    InputStream targetStream = new ByteArrayInputStream(metadataByte);\n+                    String metadata = APIMgtDBUtil.getStringFromInputStream(targetStream);\n                     Gson g = new Gson();\n \n-                    JSONObject json = g.fromJson(data, JSONObject.class);\n+                    JSONObject json = g.fromJson(metadata, JSONObject.class);\n                     workflow.setMetadata(json);\n-                }\n-                else{\n+                } else {\n                     JSONObject json = new JSONObject();\n                     workflow.setMetadata(json);\n                 }\n \n-                byte[] byteData1;\n+                byte[] propertiesByte;\n \n-                if(blob1 != null) {\n-                    byteData1 = blob1.getBytes(1L, (int) blob.length());\n-                    InputStream targetStream1 = new ByteArrayInputStream(byteData1);\n-                    String data1 = APIMgtDBUtil.getStringFromInputStream(targetStream1);\n+                if(propertiesBlob != null) {\n+                    propertiesByte = propertiesBlob.getBytes(1L, (int) propertiesBlob.length());\n+                    InputStream propertiesTargetStream = new ByteArrayInputStream(propertiesByte);\n+                    String properties = APIMgtDBUtil.getStringFromInputStream(propertiesTargetStream);\n                     Gson g = new Gson();\n \n-                    JSONObject json = g.fromJson(data1, JSONObject.class);\n+                    JSONObject json = g.fromJson(properties, JSONObject.class);\n                     workflow.setProperties(json);\n-                }\n-                else{\n+                } else {\n                     JSONObject json = new JSONObject();\n                     workflow.setProperties(json);\n                 }\n", "next_change": {"commit": "e00fe40f5ef809f1ac81dc7c22faacda062adfab", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\nindex d1b86fe2c24..c19a17b31df 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\n", "chunk": "@@ -14777,40 +14753,35 @@ public class ApiMgtDAO {\n                 Blob propertiesBlob = rs.getBlob(\"WF_PROPERTIES\");\n \n                 byte[] metadataByte;\n-\n                 if(metadataBlob != null) {\n                     metadataByte = metadataBlob.getBytes(1L, (int) metadataBlob.length());\n                     InputStream targetStream = new ByteArrayInputStream(metadataByte);\n                     String metadata = APIMgtDBUtil.getStringFromInputStream(targetStream);\n-                    Gson g = new Gson();\n-\n-                    JSONObject json = g.fromJson(metadata, JSONObject.class);\n-                    workflow.setMetadata(json);\n+                    Gson metadataGson = new Gson();\n+                    JSONObject metadataJson = metadataGson.fromJson(metadata, JSONObject.class);\n+                    workflow.setMetadata(metadataJson);\n                 } else {\n-                    JSONObject json = new JSONObject();\n-                    workflow.setMetadata(json);\n+                    JSONObject metadataJson = new JSONObject();\n+                    workflow.setMetadata(metadataJson);\n                 }\n \n                 byte[] propertiesByte;\n-\n                 if(propertiesBlob != null) {\n                     propertiesByte = propertiesBlob.getBytes(1L, (int) propertiesBlob.length());\n                     InputStream propertiesTargetStream = new ByteArrayInputStream(propertiesByte);\n                     String properties = APIMgtDBUtil.getStringFromInputStream(propertiesTargetStream);\n-                    Gson g = new Gson();\n-\n-                    JSONObject json = g.fromJson(properties, JSONObject.class);\n-                    workflow.setProperties(json);\n+                    Gson propertiesGson = new Gson();\n+                    JSONObject propertiesJson = propertiesGson.fromJson(properties, JSONObject.class);\n+                    workflow.setProperties(propertiesJson);\n                 } else {\n-                    JSONObject json = new JSONObject();\n-                    workflow.setProperties(json);\n+                    JSONObject propertiesJson = new JSONObject();\n+                    workflow.setProperties(propertiesJson);\n                 }\n-\n                 workflowsList.add(workflow);\n             }\n             workflows = workflowsList.toArray(new Workflow[workflowsList.size()]);\n         } catch (SQLException e) {\n-            handleException(\"Error when retrieve all the workflow details\" , e);\n+            handleException(\"Error when retrieve all the workflow details. \" , e);\n         } finally {\n             APIMgtDBUtil.closeAllConnections(prepStmt, connection, rs);\n         }\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg1OTU5OQ==", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r386859599", "body": "add meaningful variable name", "bodyText": "add meaningful variable name", "bodyHTML": "<p dir=\"auto\">add meaningful variable name</p>", "author": "chamilaadhi", "createdAt": "2020-03-03T08:24:36Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "diffHunk": "@@ -14576,4 +14580,284 @@ public String getUserID(String userName) throws APIManagementException {\n         }\n         return userID;\n     }\n+\n+\n+    public void deleteWorkflowRequest(String workflowExtRef) throws APIManagementException {\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+\n+        String query = SQLConstants.DELETE_WORKFLOW_REQUEST_SQL;\n+        try {\n+\n+            connection = APIMgtDBUtil.getConnection();\n+            connection.setAutoCommit(false);\n+\n+\n+            prepStmt = connection.prepareStatement(query);\n+            prepStmt.setString(1, workflowExtRef);\n+            prepStmt.executeUpdate();\n+            connection.commit();\n+        }\n+        catch (SQLException e) {\n+            handleException(\"Failed to delete the workflow request \", e);\n+\n+        }\n+    }\n+\n+    public Workflow getworkflowReferenceByEWR(String externalWorkflowRef)throws APIManagementException {\n+\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+        ResultSet rs = null;\n+\n+\n+        Workflow workflow=new Workflow();\n+\n+        String sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_BY_EWR;\n+\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            prepStmt = connection.prepareStatement(sqlQuery);\n+            prepStmt.setString(1, externalWorkflowRef);\n+\n+\n+            rs = prepStmt.executeQuery();\n+\n+\n+\n+\n+            while (rs.next()) {\n+\n+                workflow.setWorkflowId(rs.getInt(\"WF_ID\"));\n+                workflow.setWorkflowReference(rs.getString(\"WF_REFERENCE\"));\n+                workflow.setWorkflowType(rs.getString(\"WF_TYPE\"));\n+\n+                String workflowstatus =rs.getString(\"WF_STATUS\");\n+                workflow.setStatus(org.wso2.carbon.apimgt.api.WorkflowStatus.valueOf(workflowstatus));\n+\n+                workflow.setCreatedTime(rs.getTimestamp(\"WF_CREATED_TIME\").toString());\n+                workflow.setUpdatedTime(rs.getTimestamp(\"WF_UPDATED_TIME\").toString());\n+\n+                workflow.setWorkflowStatusDesc(rs.getString(\"WF_STATUS_DESC\"));\n+                workflow.setTenantId(rs.getInt(\"TENANT_ID\"));\n+                workflow.setTenantDomain(rs.getString(\"TENANT_DOMAIN\"));\n+                workflow.setExternalWorkflowReference(rs.getString(\"WF_EXTERNAL_REFERENCE\"));\n+                Blob blob = rs.getBlob(\"WF_METADATA\");\n+\n+                byte[] byteData;\n+\n+                if(blob != null) {\n+                    byteData = blob.getBytes(1L, (int) blob.length());\n+                    InputStream targetStream = new ByteArrayInputStream(byteData);\n+                    String data = APIMgtDBUtil.getStringFromInputStream(targetStream);\n+                    Gson g = new Gson();\n+\n+                    JSONObject json = g.fromJson(data, JSONObject.class);\n+                    workflow.setMetadata(json);\n+                }\n+                else{\n+                    JSONObject json=new JSONObject();\n+                    workflow.setMetadata(json);\n+                }\n+\n+\n+\n+            }\n+\n+        } catch (SQLException e) {\n+            handleException(\"Error when retriving the workflow details\" , e);\n+        } finally {\n+            APIMgtDBUtil.closeAllConnections(prepStmt, connection, rs);\n+        }\n+        return workflow;\n+    }\n+\n+    public Workflow[] getworkflows(String workflowType ,String status ,String tenantDomain) throws APIManagementException {\n+\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+        ResultSet rs = null;\n+\n+        Workflow[] workflows = null;\n+\n+        String sqlQuery;\n+\n+        if (workflowType != null){\n+            sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS;\n+        }\n+        else{\n+            sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_NO_TYPE;\n+        }\n+\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            prepStmt = connection.prepareStatement(sqlQuery);\n+\n+            if (workflowType != null){\n+                prepStmt.setString(1, workflowType);\n+                prepStmt.setString( 2, status);\n+                prepStmt.setString( 3, tenantDomain);\n+\n+            }\n+            else{\n+                prepStmt.setString( 1, status);\n+                prepStmt.setString( 2, tenantDomain);\n+            }\n+\n+\n+\n+\n+            rs = prepStmt.executeQuery();\n+\n+            ArrayList<Workflow> workflowsList = new ArrayList<Workflow>();\n+            Workflow workflow;\n+            while (rs.next()) {\n+                workflow = new Workflow();\n+                workflow.setWorkflowId(rs.getInt(\"WF_ID\"));\n+                workflow.setWorkflowReference(rs.getString(\"WF_REFERENCE\"));\n+                workflow.setWorkflowType(rs.getString(\"WF_TYPE\"));\n+\n+                String workflowstatus =rs.getString(\"WF_STATUS\");\n+                workflow.setStatus(org.wso2.carbon.apimgt.api.WorkflowStatus.valueOf(workflowstatus));\n+\n+                workflow.setCreatedTime(rs.getTimestamp(\"WF_CREATED_TIME\").toString());\n+                workflow.setUpdatedTime(rs.getTimestamp(\"WF_UPDATED_TIME\").toString());\n+\n+                workflow.setWorkflowStatusDesc(rs.getString(\"WF_STATUS_DESC\"));\n+                workflow.setTenantId(rs.getInt(\"TENANT_ID\"));\n+                workflow.setTenantDomain(rs.getString(\"TENANT_DOMAIN\"));\n+                workflow.setExternalWorkflowReference(rs.getString(\"WF_EXTERNAL_REFERENCE\"));\n+                workflow.setWorkflowDescription(rs.getString(\"WF_STATUS_DESC\"));\n+                Blob blob = rs.getBlob(\"WF_METADATA\");\n+                Blob blob1 = rs.getBlob(\"WF_PROPERTIES\");\n+\n+\n+                byte[] byteData;\n+\n+                if(blob != null) {\n+                    byteData = blob.getBytes(1L, (int) blob.length());\n+                    InputStream targetStream = new ByteArrayInputStream(byteData);\n+                    String data = APIMgtDBUtil.getStringFromInputStream(targetStream);\n+                    Gson g = new Gson();\n+\n+                    JSONObject json = g.fromJson(data, JSONObject.class);\n+                    workflow.setMetadata(json);\n+                }\n+                else{\n+                    JSONObject json = new JSONObject();\n+                    workflow.setMetadata(json);\n+                }\n+\n+                byte[] byteData1;", "originalCommit": "6e7d63f0cbce7821d881557b6f804ffd9f00caf6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e5f1ca8c0c731ff296553a3776fe7937da125395", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\nindex b25d82b29f3..d1b86fe2c24 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\n", "chunk": "@@ -14728,38 +14773,35 @@ public class ApiMgtDAO {\n                 workflow.setTenantDomain(rs.getString(\"TENANT_DOMAIN\"));\n                 workflow.setExternalWorkflowReference(rs.getString(\"WF_EXTERNAL_REFERENCE\"));\n                 workflow.setWorkflowDescription(rs.getString(\"WF_STATUS_DESC\"));\n-                Blob blob = rs.getBlob(\"WF_METADATA\");\n-                Blob blob1 = rs.getBlob(\"WF_PROPERTIES\");\n+                Blob metadataBlob = rs.getBlob(\"WF_METADATA\");\n+                Blob propertiesBlob = rs.getBlob(\"WF_PROPERTIES\");\n \n+                byte[] metadataByte;\n \n-                byte[] byteData;\n-\n-                if(blob != null) {\n-                    byteData = blob.getBytes(1L, (int) blob.length());\n-                    InputStream targetStream = new ByteArrayInputStream(byteData);\n-                    String data = APIMgtDBUtil.getStringFromInputStream(targetStream);\n+                if(metadataBlob != null) {\n+                    metadataByte = metadataBlob.getBytes(1L, (int) metadataBlob.length());\n+                    InputStream targetStream = new ByteArrayInputStream(metadataByte);\n+                    String metadata = APIMgtDBUtil.getStringFromInputStream(targetStream);\n                     Gson g = new Gson();\n \n-                    JSONObject json = g.fromJson(data, JSONObject.class);\n+                    JSONObject json = g.fromJson(metadata, JSONObject.class);\n                     workflow.setMetadata(json);\n-                }\n-                else{\n+                } else {\n                     JSONObject json = new JSONObject();\n                     workflow.setMetadata(json);\n                 }\n \n-                byte[] byteData1;\n+                byte[] propertiesByte;\n \n-                if(blob1 != null) {\n-                    byteData1 = blob1.getBytes(1L, (int) blob.length());\n-                    InputStream targetStream1 = new ByteArrayInputStream(byteData1);\n-                    String data1 = APIMgtDBUtil.getStringFromInputStream(targetStream1);\n+                if(propertiesBlob != null) {\n+                    propertiesByte = propertiesBlob.getBytes(1L, (int) propertiesBlob.length());\n+                    InputStream propertiesTargetStream = new ByteArrayInputStream(propertiesByte);\n+                    String properties = APIMgtDBUtil.getStringFromInputStream(propertiesTargetStream);\n                     Gson g = new Gson();\n \n-                    JSONObject json = g.fromJson(data1, JSONObject.class);\n+                    JSONObject json = g.fromJson(properties, JSONObject.class);\n                     workflow.setProperties(json);\n-                }\n-                else{\n+                } else {\n                     JSONObject json = new JSONObject();\n                     workflow.setProperties(json);\n                 }\n", "next_change": {"commit": "e00fe40f5ef809f1ac81dc7c22faacda062adfab", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\nindex d1b86fe2c24..c19a17b31df 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\n", "chunk": "@@ -14777,40 +14753,35 @@ public class ApiMgtDAO {\n                 Blob propertiesBlob = rs.getBlob(\"WF_PROPERTIES\");\n \n                 byte[] metadataByte;\n-\n                 if(metadataBlob != null) {\n                     metadataByte = metadataBlob.getBytes(1L, (int) metadataBlob.length());\n                     InputStream targetStream = new ByteArrayInputStream(metadataByte);\n                     String metadata = APIMgtDBUtil.getStringFromInputStream(targetStream);\n-                    Gson g = new Gson();\n-\n-                    JSONObject json = g.fromJson(metadata, JSONObject.class);\n-                    workflow.setMetadata(json);\n+                    Gson metadataGson = new Gson();\n+                    JSONObject metadataJson = metadataGson.fromJson(metadata, JSONObject.class);\n+                    workflow.setMetadata(metadataJson);\n                 } else {\n-                    JSONObject json = new JSONObject();\n-                    workflow.setMetadata(json);\n+                    JSONObject metadataJson = new JSONObject();\n+                    workflow.setMetadata(metadataJson);\n                 }\n \n                 byte[] propertiesByte;\n-\n                 if(propertiesBlob != null) {\n                     propertiesByte = propertiesBlob.getBytes(1L, (int) propertiesBlob.length());\n                     InputStream propertiesTargetStream = new ByteArrayInputStream(propertiesByte);\n                     String properties = APIMgtDBUtil.getStringFromInputStream(propertiesTargetStream);\n-                    Gson g = new Gson();\n-\n-                    JSONObject json = g.fromJson(properties, JSONObject.class);\n-                    workflow.setProperties(json);\n+                    Gson propertiesGson = new Gson();\n+                    JSONObject propertiesJson = propertiesGson.fromJson(properties, JSONObject.class);\n+                    workflow.setProperties(propertiesJson);\n                 } else {\n-                    JSONObject json = new JSONObject();\n-                    workflow.setProperties(json);\n+                    JSONObject propertiesJson = new JSONObject();\n+                    workflow.setProperties(propertiesJson);\n                 }\n-\n                 workflowsList.add(workflow);\n             }\n             workflows = workflowsList.toArray(new Workflow[workflowsList.size()]);\n         } catch (SQLException e) {\n-            handleException(\"Error when retrieve all the workflow details\" , e);\n+            handleException(\"Error when retrieve all the workflow details. \" , e);\n         } finally {\n             APIMgtDBUtil.closeAllConnections(prepStmt, connection, rs);\n         }\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg1OTg2NQ==", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r386859865", "body": "add meaningful variable name", "bodyText": "add meaningful variable name", "bodyHTML": "<p dir=\"auto\">add meaningful variable name</p>", "author": "chamilaadhi", "createdAt": "2020-03-03T08:25:09Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "diffHunk": "@@ -14576,4 +14580,284 @@ public String getUserID(String userName) throws APIManagementException {\n         }\n         return userID;\n     }\n+\n+\n+    public void deleteWorkflowRequest(String workflowExtRef) throws APIManagementException {\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+\n+        String query = SQLConstants.DELETE_WORKFLOW_REQUEST_SQL;\n+        try {\n+\n+            connection = APIMgtDBUtil.getConnection();\n+            connection.setAutoCommit(false);\n+\n+\n+            prepStmt = connection.prepareStatement(query);\n+            prepStmt.setString(1, workflowExtRef);\n+            prepStmt.executeUpdate();\n+            connection.commit();\n+        }\n+        catch (SQLException e) {\n+            handleException(\"Failed to delete the workflow request \", e);\n+\n+        }\n+    }\n+\n+    public Workflow getworkflowReferenceByEWR(String externalWorkflowRef)throws APIManagementException {\n+\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+        ResultSet rs = null;\n+\n+\n+        Workflow workflow=new Workflow();\n+\n+        String sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_BY_EWR;\n+\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            prepStmt = connection.prepareStatement(sqlQuery);\n+            prepStmt.setString(1, externalWorkflowRef);\n+\n+\n+            rs = prepStmt.executeQuery();\n+\n+\n+\n+\n+            while (rs.next()) {\n+\n+                workflow.setWorkflowId(rs.getInt(\"WF_ID\"));\n+                workflow.setWorkflowReference(rs.getString(\"WF_REFERENCE\"));\n+                workflow.setWorkflowType(rs.getString(\"WF_TYPE\"));\n+\n+                String workflowstatus =rs.getString(\"WF_STATUS\");\n+                workflow.setStatus(org.wso2.carbon.apimgt.api.WorkflowStatus.valueOf(workflowstatus));\n+\n+                workflow.setCreatedTime(rs.getTimestamp(\"WF_CREATED_TIME\").toString());\n+                workflow.setUpdatedTime(rs.getTimestamp(\"WF_UPDATED_TIME\").toString());\n+\n+                workflow.setWorkflowStatusDesc(rs.getString(\"WF_STATUS_DESC\"));\n+                workflow.setTenantId(rs.getInt(\"TENANT_ID\"));\n+                workflow.setTenantDomain(rs.getString(\"TENANT_DOMAIN\"));\n+                workflow.setExternalWorkflowReference(rs.getString(\"WF_EXTERNAL_REFERENCE\"));\n+                Blob blob = rs.getBlob(\"WF_METADATA\");\n+\n+                byte[] byteData;\n+\n+                if(blob != null) {\n+                    byteData = blob.getBytes(1L, (int) blob.length());\n+                    InputStream targetStream = new ByteArrayInputStream(byteData);\n+                    String data = APIMgtDBUtil.getStringFromInputStream(targetStream);\n+                    Gson g = new Gson();\n+\n+                    JSONObject json = g.fromJson(data, JSONObject.class);\n+                    workflow.setMetadata(json);\n+                }\n+                else{\n+                    JSONObject json=new JSONObject();\n+                    workflow.setMetadata(json);\n+                }\n+\n+\n+\n+            }\n+\n+        } catch (SQLException e) {\n+            handleException(\"Error when retriving the workflow details\" , e);\n+        } finally {\n+            APIMgtDBUtil.closeAllConnections(prepStmt, connection, rs);\n+        }\n+        return workflow;\n+    }\n+\n+    public Workflow[] getworkflows(String workflowType ,String status ,String tenantDomain) throws APIManagementException {\n+\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+        ResultSet rs = null;\n+\n+        Workflow[] workflows = null;\n+\n+        String sqlQuery;\n+\n+        if (workflowType != null){\n+            sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS;\n+        }\n+        else{\n+            sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_NO_TYPE;\n+        }\n+\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            prepStmt = connection.prepareStatement(sqlQuery);\n+\n+            if (workflowType != null){\n+                prepStmt.setString(1, workflowType);\n+                prepStmt.setString( 2, status);\n+                prepStmt.setString( 3, tenantDomain);\n+\n+            }\n+            else{\n+                prepStmt.setString( 1, status);\n+                prepStmt.setString( 2, tenantDomain);\n+            }\n+\n+\n+\n+\n+            rs = prepStmt.executeQuery();\n+\n+            ArrayList<Workflow> workflowsList = new ArrayList<Workflow>();\n+            Workflow workflow;\n+            while (rs.next()) {\n+                workflow = new Workflow();\n+                workflow.setWorkflowId(rs.getInt(\"WF_ID\"));\n+                workflow.setWorkflowReference(rs.getString(\"WF_REFERENCE\"));\n+                workflow.setWorkflowType(rs.getString(\"WF_TYPE\"));\n+\n+                String workflowstatus =rs.getString(\"WF_STATUS\");\n+                workflow.setStatus(org.wso2.carbon.apimgt.api.WorkflowStatus.valueOf(workflowstatus));\n+\n+                workflow.setCreatedTime(rs.getTimestamp(\"WF_CREATED_TIME\").toString());\n+                workflow.setUpdatedTime(rs.getTimestamp(\"WF_UPDATED_TIME\").toString());\n+\n+                workflow.setWorkflowStatusDesc(rs.getString(\"WF_STATUS_DESC\"));\n+                workflow.setTenantId(rs.getInt(\"TENANT_ID\"));\n+                workflow.setTenantDomain(rs.getString(\"TENANT_DOMAIN\"));\n+                workflow.setExternalWorkflowReference(rs.getString(\"WF_EXTERNAL_REFERENCE\"));\n+                workflow.setWorkflowDescription(rs.getString(\"WF_STATUS_DESC\"));\n+                Blob blob = rs.getBlob(\"WF_METADATA\");\n+                Blob blob1 = rs.getBlob(\"WF_PROPERTIES\");\n+\n+\n+                byte[] byteData;\n+\n+                if(blob != null) {\n+                    byteData = blob.getBytes(1L, (int) blob.length());\n+                    InputStream targetStream = new ByteArrayInputStream(byteData);\n+                    String data = APIMgtDBUtil.getStringFromInputStream(targetStream);\n+                    Gson g = new Gson();\n+\n+                    JSONObject json = g.fromJson(data, JSONObject.class);\n+                    workflow.setMetadata(json);\n+                }\n+                else{\n+                    JSONObject json = new JSONObject();\n+                    workflow.setMetadata(json);\n+                }\n+\n+                byte[] byteData1;\n+\n+                if(blob1 != null) {\n+                    byteData1 = blob1.getBytes(1L, (int) blob.length());\n+                    InputStream targetStream1 = new ByteArrayInputStream(byteData1);\n+                    String data1 = APIMgtDBUtil.getStringFromInputStream(targetStream1);\n+                    Gson g = new Gson();", "originalCommit": "6e7d63f0cbce7821d881557b6f804ffd9f00caf6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e5f1ca8c0c731ff296553a3776fe7937da125395", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\nindex b25d82b29f3..d1b86fe2c24 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\n", "chunk": "@@ -14728,38 +14773,35 @@ public class ApiMgtDAO {\n                 workflow.setTenantDomain(rs.getString(\"TENANT_DOMAIN\"));\n                 workflow.setExternalWorkflowReference(rs.getString(\"WF_EXTERNAL_REFERENCE\"));\n                 workflow.setWorkflowDescription(rs.getString(\"WF_STATUS_DESC\"));\n-                Blob blob = rs.getBlob(\"WF_METADATA\");\n-                Blob blob1 = rs.getBlob(\"WF_PROPERTIES\");\n+                Blob metadataBlob = rs.getBlob(\"WF_METADATA\");\n+                Blob propertiesBlob = rs.getBlob(\"WF_PROPERTIES\");\n \n+                byte[] metadataByte;\n \n-                byte[] byteData;\n-\n-                if(blob != null) {\n-                    byteData = blob.getBytes(1L, (int) blob.length());\n-                    InputStream targetStream = new ByteArrayInputStream(byteData);\n-                    String data = APIMgtDBUtil.getStringFromInputStream(targetStream);\n+                if(metadataBlob != null) {\n+                    metadataByte = metadataBlob.getBytes(1L, (int) metadataBlob.length());\n+                    InputStream targetStream = new ByteArrayInputStream(metadataByte);\n+                    String metadata = APIMgtDBUtil.getStringFromInputStream(targetStream);\n                     Gson g = new Gson();\n \n-                    JSONObject json = g.fromJson(data, JSONObject.class);\n+                    JSONObject json = g.fromJson(metadata, JSONObject.class);\n                     workflow.setMetadata(json);\n-                }\n-                else{\n+                } else {\n                     JSONObject json = new JSONObject();\n                     workflow.setMetadata(json);\n                 }\n \n-                byte[] byteData1;\n+                byte[] propertiesByte;\n \n-                if(blob1 != null) {\n-                    byteData1 = blob1.getBytes(1L, (int) blob.length());\n-                    InputStream targetStream1 = new ByteArrayInputStream(byteData1);\n-                    String data1 = APIMgtDBUtil.getStringFromInputStream(targetStream1);\n+                if(propertiesBlob != null) {\n+                    propertiesByte = propertiesBlob.getBytes(1L, (int) propertiesBlob.length());\n+                    InputStream propertiesTargetStream = new ByteArrayInputStream(propertiesByte);\n+                    String properties = APIMgtDBUtil.getStringFromInputStream(propertiesTargetStream);\n                     Gson g = new Gson();\n \n-                    JSONObject json = g.fromJson(data1, JSONObject.class);\n+                    JSONObject json = g.fromJson(properties, JSONObject.class);\n                     workflow.setProperties(json);\n-                }\n-                else{\n+                } else {\n                     JSONObject json = new JSONObject();\n                     workflow.setProperties(json);\n                 }\n", "next_change": {"commit": "e00fe40f5ef809f1ac81dc7c22faacda062adfab", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\nindex d1b86fe2c24..c19a17b31df 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\n", "chunk": "@@ -14777,40 +14753,35 @@ public class ApiMgtDAO {\n                 Blob propertiesBlob = rs.getBlob(\"WF_PROPERTIES\");\n \n                 byte[] metadataByte;\n-\n                 if(metadataBlob != null) {\n                     metadataByte = metadataBlob.getBytes(1L, (int) metadataBlob.length());\n                     InputStream targetStream = new ByteArrayInputStream(metadataByte);\n                     String metadata = APIMgtDBUtil.getStringFromInputStream(targetStream);\n-                    Gson g = new Gson();\n-\n-                    JSONObject json = g.fromJson(metadata, JSONObject.class);\n-                    workflow.setMetadata(json);\n+                    Gson metadataGson = new Gson();\n+                    JSONObject metadataJson = metadataGson.fromJson(metadata, JSONObject.class);\n+                    workflow.setMetadata(metadataJson);\n                 } else {\n-                    JSONObject json = new JSONObject();\n-                    workflow.setMetadata(json);\n+                    JSONObject metadataJson = new JSONObject();\n+                    workflow.setMetadata(metadataJson);\n                 }\n \n                 byte[] propertiesByte;\n-\n                 if(propertiesBlob != null) {\n                     propertiesByte = propertiesBlob.getBytes(1L, (int) propertiesBlob.length());\n                     InputStream propertiesTargetStream = new ByteArrayInputStream(propertiesByte);\n                     String properties = APIMgtDBUtil.getStringFromInputStream(propertiesTargetStream);\n-                    Gson g = new Gson();\n-\n-                    JSONObject json = g.fromJson(properties, JSONObject.class);\n-                    workflow.setProperties(json);\n+                    Gson propertiesGson = new Gson();\n+                    JSONObject propertiesJson = propertiesGson.fromJson(properties, JSONObject.class);\n+                    workflow.setProperties(propertiesJson);\n                 } else {\n-                    JSONObject json = new JSONObject();\n-                    workflow.setProperties(json);\n+                    JSONObject propertiesJson = new JSONObject();\n+                    workflow.setProperties(propertiesJson);\n                 }\n-\n                 workflowsList.add(workflow);\n             }\n             workflows = workflowsList.toArray(new Workflow[workflowsList.size()]);\n         } catch (SQLException e) {\n-            handleException(\"Error when retrieve all the workflow details\" , e);\n+            handleException(\"Error when retrieve all the workflow details. \" , e);\n         } finally {\n             APIMgtDBUtil.closeAllConnections(prepStmt, connection, rs);\n         }\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg1OTkyMg==", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r386859922", "body": "format", "bodyText": "format", "bodyHTML": "<p dir=\"auto\">format</p>", "author": "chamilaadhi", "createdAt": "2020-03-03T08:25:16Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "diffHunk": "@@ -14576,4 +14580,284 @@ public String getUserID(String userName) throws APIManagementException {\n         }\n         return userID;\n     }\n+\n+\n+    public void deleteWorkflowRequest(String workflowExtRef) throws APIManagementException {\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+\n+        String query = SQLConstants.DELETE_WORKFLOW_REQUEST_SQL;\n+        try {\n+\n+            connection = APIMgtDBUtil.getConnection();\n+            connection.setAutoCommit(false);\n+\n+\n+            prepStmt = connection.prepareStatement(query);\n+            prepStmt.setString(1, workflowExtRef);\n+            prepStmt.executeUpdate();\n+            connection.commit();\n+        }\n+        catch (SQLException e) {\n+            handleException(\"Failed to delete the workflow request \", e);\n+\n+        }\n+    }\n+\n+    public Workflow getworkflowReferenceByEWR(String externalWorkflowRef)throws APIManagementException {\n+\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+        ResultSet rs = null;\n+\n+\n+        Workflow workflow=new Workflow();\n+\n+        String sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_BY_EWR;\n+\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            prepStmt = connection.prepareStatement(sqlQuery);\n+            prepStmt.setString(1, externalWorkflowRef);\n+\n+\n+            rs = prepStmt.executeQuery();\n+\n+\n+\n+\n+            while (rs.next()) {\n+\n+                workflow.setWorkflowId(rs.getInt(\"WF_ID\"));\n+                workflow.setWorkflowReference(rs.getString(\"WF_REFERENCE\"));\n+                workflow.setWorkflowType(rs.getString(\"WF_TYPE\"));\n+\n+                String workflowstatus =rs.getString(\"WF_STATUS\");\n+                workflow.setStatus(org.wso2.carbon.apimgt.api.WorkflowStatus.valueOf(workflowstatus));\n+\n+                workflow.setCreatedTime(rs.getTimestamp(\"WF_CREATED_TIME\").toString());\n+                workflow.setUpdatedTime(rs.getTimestamp(\"WF_UPDATED_TIME\").toString());\n+\n+                workflow.setWorkflowStatusDesc(rs.getString(\"WF_STATUS_DESC\"));\n+                workflow.setTenantId(rs.getInt(\"TENANT_ID\"));\n+                workflow.setTenantDomain(rs.getString(\"TENANT_DOMAIN\"));\n+                workflow.setExternalWorkflowReference(rs.getString(\"WF_EXTERNAL_REFERENCE\"));\n+                Blob blob = rs.getBlob(\"WF_METADATA\");\n+\n+                byte[] byteData;\n+\n+                if(blob != null) {\n+                    byteData = blob.getBytes(1L, (int) blob.length());\n+                    InputStream targetStream = new ByteArrayInputStream(byteData);\n+                    String data = APIMgtDBUtil.getStringFromInputStream(targetStream);\n+                    Gson g = new Gson();\n+\n+                    JSONObject json = g.fromJson(data, JSONObject.class);\n+                    workflow.setMetadata(json);\n+                }\n+                else{\n+                    JSONObject json=new JSONObject();\n+                    workflow.setMetadata(json);\n+                }\n+\n+\n+\n+            }\n+\n+        } catch (SQLException e) {\n+            handleException(\"Error when retriving the workflow details\" , e);\n+        } finally {\n+            APIMgtDBUtil.closeAllConnections(prepStmt, connection, rs);\n+        }\n+        return workflow;\n+    }\n+\n+    public Workflow[] getworkflows(String workflowType ,String status ,String tenantDomain) throws APIManagementException {\n+\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+        ResultSet rs = null;\n+\n+        Workflow[] workflows = null;\n+\n+        String sqlQuery;\n+\n+        if (workflowType != null){\n+            sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS;\n+        }\n+        else{\n+            sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_NO_TYPE;\n+        }\n+\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            prepStmt = connection.prepareStatement(sqlQuery);\n+\n+            if (workflowType != null){\n+                prepStmt.setString(1, workflowType);\n+                prepStmt.setString( 2, status);\n+                prepStmt.setString( 3, tenantDomain);\n+\n+            }\n+            else{\n+                prepStmt.setString( 1, status);\n+                prepStmt.setString( 2, tenantDomain);\n+            }\n+\n+\n+\n+\n+            rs = prepStmt.executeQuery();\n+\n+            ArrayList<Workflow> workflowsList = new ArrayList<Workflow>();\n+            Workflow workflow;\n+            while (rs.next()) {\n+                workflow = new Workflow();\n+                workflow.setWorkflowId(rs.getInt(\"WF_ID\"));\n+                workflow.setWorkflowReference(rs.getString(\"WF_REFERENCE\"));\n+                workflow.setWorkflowType(rs.getString(\"WF_TYPE\"));\n+\n+                String workflowstatus =rs.getString(\"WF_STATUS\");\n+                workflow.setStatus(org.wso2.carbon.apimgt.api.WorkflowStatus.valueOf(workflowstatus));\n+\n+                workflow.setCreatedTime(rs.getTimestamp(\"WF_CREATED_TIME\").toString());\n+                workflow.setUpdatedTime(rs.getTimestamp(\"WF_UPDATED_TIME\").toString());\n+\n+                workflow.setWorkflowStatusDesc(rs.getString(\"WF_STATUS_DESC\"));\n+                workflow.setTenantId(rs.getInt(\"TENANT_ID\"));\n+                workflow.setTenantDomain(rs.getString(\"TENANT_DOMAIN\"));\n+                workflow.setExternalWorkflowReference(rs.getString(\"WF_EXTERNAL_REFERENCE\"));\n+                workflow.setWorkflowDescription(rs.getString(\"WF_STATUS_DESC\"));\n+                Blob blob = rs.getBlob(\"WF_METADATA\");\n+                Blob blob1 = rs.getBlob(\"WF_PROPERTIES\");\n+\n+\n+                byte[] byteData;\n+\n+                if(blob != null) {\n+                    byteData = blob.getBytes(1L, (int) blob.length());\n+                    InputStream targetStream = new ByteArrayInputStream(byteData);\n+                    String data = APIMgtDBUtil.getStringFromInputStream(targetStream);\n+                    Gson g = new Gson();\n+\n+                    JSONObject json = g.fromJson(data, JSONObject.class);\n+                    workflow.setMetadata(json);\n+                }\n+                else{\n+                    JSONObject json = new JSONObject();\n+                    workflow.setMetadata(json);\n+                }\n+\n+                byte[] byteData1;\n+\n+                if(blob1 != null) {\n+                    byteData1 = blob1.getBytes(1L, (int) blob.length());\n+                    InputStream targetStream1 = new ByteArrayInputStream(byteData1);\n+                    String data1 = APIMgtDBUtil.getStringFromInputStream(targetStream1);\n+                    Gson g = new Gson();\n+\n+                    JSONObject json = g.fromJson(data1, JSONObject.class);\n+                    workflow.setProperties(json);\n+                }\n+                else{\n+                    JSONObject json = new JSONObject();\n+                    workflow.setProperties(json);", "originalCommit": "6e7d63f0cbce7821d881557b6f804ffd9f00caf6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e5f1ca8c0c731ff296553a3776fe7937da125395", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\nindex b25d82b29f3..d1b86fe2c24 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\n", "chunk": "@@ -14728,38 +14773,35 @@ public class ApiMgtDAO {\n                 workflow.setTenantDomain(rs.getString(\"TENANT_DOMAIN\"));\n                 workflow.setExternalWorkflowReference(rs.getString(\"WF_EXTERNAL_REFERENCE\"));\n                 workflow.setWorkflowDescription(rs.getString(\"WF_STATUS_DESC\"));\n-                Blob blob = rs.getBlob(\"WF_METADATA\");\n-                Blob blob1 = rs.getBlob(\"WF_PROPERTIES\");\n+                Blob metadataBlob = rs.getBlob(\"WF_METADATA\");\n+                Blob propertiesBlob = rs.getBlob(\"WF_PROPERTIES\");\n \n+                byte[] metadataByte;\n \n-                byte[] byteData;\n-\n-                if(blob != null) {\n-                    byteData = blob.getBytes(1L, (int) blob.length());\n-                    InputStream targetStream = new ByteArrayInputStream(byteData);\n-                    String data = APIMgtDBUtil.getStringFromInputStream(targetStream);\n+                if(metadataBlob != null) {\n+                    metadataByte = metadataBlob.getBytes(1L, (int) metadataBlob.length());\n+                    InputStream targetStream = new ByteArrayInputStream(metadataByte);\n+                    String metadata = APIMgtDBUtil.getStringFromInputStream(targetStream);\n                     Gson g = new Gson();\n \n-                    JSONObject json = g.fromJson(data, JSONObject.class);\n+                    JSONObject json = g.fromJson(metadata, JSONObject.class);\n                     workflow.setMetadata(json);\n-                }\n-                else{\n+                } else {\n                     JSONObject json = new JSONObject();\n                     workflow.setMetadata(json);\n                 }\n \n-                byte[] byteData1;\n+                byte[] propertiesByte;\n \n-                if(blob1 != null) {\n-                    byteData1 = blob1.getBytes(1L, (int) blob.length());\n-                    InputStream targetStream1 = new ByteArrayInputStream(byteData1);\n-                    String data1 = APIMgtDBUtil.getStringFromInputStream(targetStream1);\n+                if(propertiesBlob != null) {\n+                    propertiesByte = propertiesBlob.getBytes(1L, (int) propertiesBlob.length());\n+                    InputStream propertiesTargetStream = new ByteArrayInputStream(propertiesByte);\n+                    String properties = APIMgtDBUtil.getStringFromInputStream(propertiesTargetStream);\n                     Gson g = new Gson();\n \n-                    JSONObject json = g.fromJson(data1, JSONObject.class);\n+                    JSONObject json = g.fromJson(properties, JSONObject.class);\n                     workflow.setProperties(json);\n-                }\n-                else{\n+                } else {\n                     JSONObject json = new JSONObject();\n                     workflow.setProperties(json);\n                 }\n", "next_change": {"commit": "e00fe40f5ef809f1ac81dc7c22faacda062adfab", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\nindex d1b86fe2c24..c19a17b31df 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\n", "chunk": "@@ -14777,40 +14753,35 @@ public class ApiMgtDAO {\n                 Blob propertiesBlob = rs.getBlob(\"WF_PROPERTIES\");\n \n                 byte[] metadataByte;\n-\n                 if(metadataBlob != null) {\n                     metadataByte = metadataBlob.getBytes(1L, (int) metadataBlob.length());\n                     InputStream targetStream = new ByteArrayInputStream(metadataByte);\n                     String metadata = APIMgtDBUtil.getStringFromInputStream(targetStream);\n-                    Gson g = new Gson();\n-\n-                    JSONObject json = g.fromJson(metadata, JSONObject.class);\n-                    workflow.setMetadata(json);\n+                    Gson metadataGson = new Gson();\n+                    JSONObject metadataJson = metadataGson.fromJson(metadata, JSONObject.class);\n+                    workflow.setMetadata(metadataJson);\n                 } else {\n-                    JSONObject json = new JSONObject();\n-                    workflow.setMetadata(json);\n+                    JSONObject metadataJson = new JSONObject();\n+                    workflow.setMetadata(metadataJson);\n                 }\n \n                 byte[] propertiesByte;\n-\n                 if(propertiesBlob != null) {\n                     propertiesByte = propertiesBlob.getBytes(1L, (int) propertiesBlob.length());\n                     InputStream propertiesTargetStream = new ByteArrayInputStream(propertiesByte);\n                     String properties = APIMgtDBUtil.getStringFromInputStream(propertiesTargetStream);\n-                    Gson g = new Gson();\n-\n-                    JSONObject json = g.fromJson(properties, JSONObject.class);\n-                    workflow.setProperties(json);\n+                    Gson propertiesGson = new Gson();\n+                    JSONObject propertiesJson = propertiesGson.fromJson(properties, JSONObject.class);\n+                    workflow.setProperties(propertiesJson);\n                 } else {\n-                    JSONObject json = new JSONObject();\n-                    workflow.setProperties(json);\n+                    JSONObject propertiesJson = new JSONObject();\n+                    workflow.setProperties(propertiesJson);\n                 }\n-\n                 workflowsList.add(workflow);\n             }\n             workflows = workflowsList.toArray(new Workflow[workflowsList.size()]);\n         } catch (SQLException e) {\n-            handleException(\"Error when retrieve all the workflow details\" , e);\n+            handleException(\"Error when retrieve all the workflow details. \" , e);\n         } finally {\n             APIMgtDBUtil.closeAllConnections(prepStmt, connection, rs);\n         }\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg2MDE4Mw==", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r386860183", "body": "- format\r\n-add method description", "bodyText": "format\n-add method description", "bodyHTML": "<ul dir=\"auto\">\n<li>format<br>\n-add method description</li>\n</ul>", "author": "chamilaadhi", "createdAt": "2020-03-03T08:25:51Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "diffHunk": "@@ -14576,4 +14580,284 @@ public String getUserID(String userName) throws APIManagementException {\n         }\n         return userID;\n     }\n+\n+\n+    public void deleteWorkflowRequest(String workflowExtRef) throws APIManagementException {\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+\n+        String query = SQLConstants.DELETE_WORKFLOW_REQUEST_SQL;\n+        try {\n+\n+            connection = APIMgtDBUtil.getConnection();\n+            connection.setAutoCommit(false);\n+\n+\n+            prepStmt = connection.prepareStatement(query);\n+            prepStmt.setString(1, workflowExtRef);\n+            prepStmt.executeUpdate();\n+            connection.commit();\n+        }\n+        catch (SQLException e) {\n+            handleException(\"Failed to delete the workflow request \", e);\n+\n+        }\n+    }\n+\n+    public Workflow getworkflowReferenceByEWR(String externalWorkflowRef)throws APIManagementException {\n+\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+        ResultSet rs = null;\n+\n+\n+        Workflow workflow=new Workflow();\n+\n+        String sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_BY_EWR;\n+\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            prepStmt = connection.prepareStatement(sqlQuery);\n+            prepStmt.setString(1, externalWorkflowRef);\n+\n+\n+            rs = prepStmt.executeQuery();\n+\n+\n+\n+\n+            while (rs.next()) {\n+\n+                workflow.setWorkflowId(rs.getInt(\"WF_ID\"));\n+                workflow.setWorkflowReference(rs.getString(\"WF_REFERENCE\"));\n+                workflow.setWorkflowType(rs.getString(\"WF_TYPE\"));\n+\n+                String workflowstatus =rs.getString(\"WF_STATUS\");\n+                workflow.setStatus(org.wso2.carbon.apimgt.api.WorkflowStatus.valueOf(workflowstatus));\n+\n+                workflow.setCreatedTime(rs.getTimestamp(\"WF_CREATED_TIME\").toString());\n+                workflow.setUpdatedTime(rs.getTimestamp(\"WF_UPDATED_TIME\").toString());\n+\n+                workflow.setWorkflowStatusDesc(rs.getString(\"WF_STATUS_DESC\"));\n+                workflow.setTenantId(rs.getInt(\"TENANT_ID\"));\n+                workflow.setTenantDomain(rs.getString(\"TENANT_DOMAIN\"));\n+                workflow.setExternalWorkflowReference(rs.getString(\"WF_EXTERNAL_REFERENCE\"));\n+                Blob blob = rs.getBlob(\"WF_METADATA\");\n+\n+                byte[] byteData;\n+\n+                if(blob != null) {\n+                    byteData = blob.getBytes(1L, (int) blob.length());\n+                    InputStream targetStream = new ByteArrayInputStream(byteData);\n+                    String data = APIMgtDBUtil.getStringFromInputStream(targetStream);\n+                    Gson g = new Gson();\n+\n+                    JSONObject json = g.fromJson(data, JSONObject.class);\n+                    workflow.setMetadata(json);\n+                }\n+                else{\n+                    JSONObject json=new JSONObject();\n+                    workflow.setMetadata(json);\n+                }\n+\n+\n+\n+            }\n+\n+        } catch (SQLException e) {\n+            handleException(\"Error when retriving the workflow details\" , e);\n+        } finally {\n+            APIMgtDBUtil.closeAllConnections(prepStmt, connection, rs);\n+        }\n+        return workflow;\n+    }\n+\n+    public Workflow[] getworkflows(String workflowType ,String status ,String tenantDomain) throws APIManagementException {\n+\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+        ResultSet rs = null;\n+\n+        Workflow[] workflows = null;\n+\n+        String sqlQuery;\n+\n+        if (workflowType != null){\n+            sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS;\n+        }\n+        else{\n+            sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_NO_TYPE;\n+        }\n+\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            prepStmt = connection.prepareStatement(sqlQuery);\n+\n+            if (workflowType != null){\n+                prepStmt.setString(1, workflowType);\n+                prepStmt.setString( 2, status);\n+                prepStmt.setString( 3, tenantDomain);\n+\n+            }\n+            else{\n+                prepStmt.setString( 1, status);\n+                prepStmt.setString( 2, tenantDomain);\n+            }\n+\n+\n+\n+\n+            rs = prepStmt.executeQuery();\n+\n+            ArrayList<Workflow> workflowsList = new ArrayList<Workflow>();\n+            Workflow workflow;\n+            while (rs.next()) {\n+                workflow = new Workflow();\n+                workflow.setWorkflowId(rs.getInt(\"WF_ID\"));\n+                workflow.setWorkflowReference(rs.getString(\"WF_REFERENCE\"));\n+                workflow.setWorkflowType(rs.getString(\"WF_TYPE\"));\n+\n+                String workflowstatus =rs.getString(\"WF_STATUS\");\n+                workflow.setStatus(org.wso2.carbon.apimgt.api.WorkflowStatus.valueOf(workflowstatus));\n+\n+                workflow.setCreatedTime(rs.getTimestamp(\"WF_CREATED_TIME\").toString());\n+                workflow.setUpdatedTime(rs.getTimestamp(\"WF_UPDATED_TIME\").toString());\n+\n+                workflow.setWorkflowStatusDesc(rs.getString(\"WF_STATUS_DESC\"));\n+                workflow.setTenantId(rs.getInt(\"TENANT_ID\"));\n+                workflow.setTenantDomain(rs.getString(\"TENANT_DOMAIN\"));\n+                workflow.setExternalWorkflowReference(rs.getString(\"WF_EXTERNAL_REFERENCE\"));\n+                workflow.setWorkflowDescription(rs.getString(\"WF_STATUS_DESC\"));\n+                Blob blob = rs.getBlob(\"WF_METADATA\");\n+                Blob blob1 = rs.getBlob(\"WF_PROPERTIES\");\n+\n+\n+                byte[] byteData;\n+\n+                if(blob != null) {\n+                    byteData = blob.getBytes(1L, (int) blob.length());\n+                    InputStream targetStream = new ByteArrayInputStream(byteData);\n+                    String data = APIMgtDBUtil.getStringFromInputStream(targetStream);\n+                    Gson g = new Gson();\n+\n+                    JSONObject json = g.fromJson(data, JSONObject.class);\n+                    workflow.setMetadata(json);\n+                }\n+                else{\n+                    JSONObject json = new JSONObject();\n+                    workflow.setMetadata(json);\n+                }\n+\n+                byte[] byteData1;\n+\n+                if(blob1 != null) {\n+                    byteData1 = blob1.getBytes(1L, (int) blob.length());\n+                    InputStream targetStream1 = new ByteArrayInputStream(byteData1);\n+                    String data1 = APIMgtDBUtil.getStringFromInputStream(targetStream1);\n+                    Gson g = new Gson();\n+\n+                    JSONObject json = g.fromJson(data1, JSONObject.class);\n+                    workflow.setProperties(json);\n+                }\n+                else{\n+                    JSONObject json = new JSONObject();\n+                    workflow.setProperties(json);\n+                }\n+\n+                workflowsList.add(workflow);\n+            }\n+            workflows = workflowsList.toArray(new Workflow[workflowsList.size()]);\n+        } catch (SQLException e) {\n+            handleException(\"Error when retrieve all the workflow details\" , e);\n+        } finally {\n+            APIMgtDBUtil.closeAllConnections(prepStmt, connection, rs);\n+        }\n+        return workflows;\n+\n+    }\n+\n+    public Workflow getworkflowReferenceByExternalWorkflowReferenceID(String externelWorkflowRef, String status , String tenantDomain) throws APIManagementException {\n+", "originalCommit": "6e7d63f0cbce7821d881557b6f804ffd9f00caf6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc5MTE0Mw==", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r410791143", "bodyText": "fixed with 1be4d86", "author": "SahanHerath", "createdAt": "2020-04-19T01:55:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg2MDE4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "e5f1ca8c0c731ff296553a3776fe7937da125395", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\nindex b25d82b29f3..d1b86fe2c24 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\n", "chunk": "@@ -14773,10 +14815,19 @@ public class ApiMgtDAO {\n             APIMgtDBUtil.closeAllConnections(prepStmt, connection, rs);\n         }\n         return workflows;\n-\n     }\n \n-    public Workflow getworkflowReferenceByExternalWorkflowReferenceID(String externelWorkflowRef, String status , String tenantDomain) throws APIManagementException {\n+    /**\n+     * Get the Pending workflow Request using ExternalWorkflowReference for a particular tenant\n+     *\n+     * @param externelWorkflowRef\n+     * @param status\n+     * @param tenantDomain\n+     * @return\n+     */\n+\n+    public Workflow getworkflowReferenceByExternalWorkflowReferenceID(String externelWorkflowRef, String status ,\n+                                                                      String tenantDomain) throws APIManagementException {\n \n         Connection connection = null;\n         PreparedStatement prepStmt = null;\n", "next_change": {"commit": "e00fe40f5ef809f1ac81dc7c22faacda062adfab", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\nindex d1b86fe2c24..c19a17b31df 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\n", "chunk": "@@ -14819,45 +14790,35 @@ public class ApiMgtDAO {\n \n     /**\n      * Get the Pending workflow Request using ExternalWorkflowReference for a particular tenant\n-     *\n-     * @param externelWorkflowRef\n-     * @param status\n-     * @param tenantDomain\n-     * @return\n+     * @param externelWorkflowRef of pending workflow request\n+     * @param status workflow status of workflow pending process\n+     * @param tenantDomain tenant domain of user\n+     * @return workflow pending request\n      */\n-\n     public Workflow getworkflowReferenceByExternalWorkflowReferenceID(String externelWorkflowRef, String status ,\n                                                                       String tenantDomain) throws APIManagementException {\n \n         Connection connection = null;\n         PreparedStatement prepStmt = null;\n         ResultSet rs = null;\n-\n-        Workflow workflow=new Workflow();\n-\n+        Workflow workflow = new Workflow();\n         String sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_BY_EXTERNAL_WORKFLOW_REFERENCE;\n-\n         try {\n             connection = APIMgtDBUtil.getConnection();\n             prepStmt = connection.prepareStatement(sqlQuery);\n             prepStmt.setString(1, externelWorkflowRef);\n             prepStmt.setString(2, status);\n             prepStmt.setString(3, tenantDomain);\n-\n             rs = prepStmt.executeQuery();\n \n             while (rs.next()) {\n-\n                 workflow.setWorkflowId(rs.getInt(\"WF_ID\"));\n                 workflow.setWorkflowReference(rs.getString(\"WF_REFERENCE\"));\n                 workflow.setWorkflowType(rs.getString(\"WF_TYPE\"));\n-\n-                String workflowstatus =rs.getString(\"WF_STATUS\");\n+                String workflowstatus = rs.getString(\"WF_STATUS\");\n                 workflow.setStatus(org.wso2.carbon.apimgt.api.WorkflowStatus.valueOf(workflowstatus));\n-\n                 workflow.setCreatedTime(rs.getTimestamp(\"WF_CREATED_TIME\").toString());\n                 workflow.setUpdatedTime(rs.getTimestamp(\"WF_UPDATED_TIME\").toString());\n-\n                 workflow.setWorkflowDescription(rs.getString(\"WF_STATUS_DESC\"));\n                 workflow.setTenantId(rs.getInt(\"TENANT_ID\"));\n                 workflow.setTenantDomain(rs.getString(\"TENANT_DOMAIN\"));\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg2MDMwMQ==", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r386860301", "body": "remove spaces", "bodyText": "remove spaces", "bodyHTML": "<p dir=\"auto\">remove spaces</p>", "author": "chamilaadhi", "createdAt": "2020-03-03T08:26:07Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "diffHunk": "@@ -14576,4 +14580,284 @@ public String getUserID(String userName) throws APIManagementException {\n         }\n         return userID;\n     }\n+\n+\n+    public void deleteWorkflowRequest(String workflowExtRef) throws APIManagementException {\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+\n+        String query = SQLConstants.DELETE_WORKFLOW_REQUEST_SQL;\n+        try {\n+\n+            connection = APIMgtDBUtil.getConnection();\n+            connection.setAutoCommit(false);\n+\n+\n+            prepStmt = connection.prepareStatement(query);\n+            prepStmt.setString(1, workflowExtRef);\n+            prepStmt.executeUpdate();\n+            connection.commit();\n+        }\n+        catch (SQLException e) {\n+            handleException(\"Failed to delete the workflow request \", e);\n+\n+        }\n+    }\n+\n+    public Workflow getworkflowReferenceByEWR(String externalWorkflowRef)throws APIManagementException {\n+\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+        ResultSet rs = null;\n+\n+\n+        Workflow workflow=new Workflow();\n+\n+        String sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_BY_EWR;\n+\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            prepStmt = connection.prepareStatement(sqlQuery);\n+            prepStmt.setString(1, externalWorkflowRef);\n+\n+\n+            rs = prepStmt.executeQuery();\n+\n+\n+\n+\n+            while (rs.next()) {\n+\n+                workflow.setWorkflowId(rs.getInt(\"WF_ID\"));\n+                workflow.setWorkflowReference(rs.getString(\"WF_REFERENCE\"));\n+                workflow.setWorkflowType(rs.getString(\"WF_TYPE\"));\n+\n+                String workflowstatus =rs.getString(\"WF_STATUS\");\n+                workflow.setStatus(org.wso2.carbon.apimgt.api.WorkflowStatus.valueOf(workflowstatus));\n+\n+                workflow.setCreatedTime(rs.getTimestamp(\"WF_CREATED_TIME\").toString());\n+                workflow.setUpdatedTime(rs.getTimestamp(\"WF_UPDATED_TIME\").toString());\n+\n+                workflow.setWorkflowStatusDesc(rs.getString(\"WF_STATUS_DESC\"));\n+                workflow.setTenantId(rs.getInt(\"TENANT_ID\"));\n+                workflow.setTenantDomain(rs.getString(\"TENANT_DOMAIN\"));\n+                workflow.setExternalWorkflowReference(rs.getString(\"WF_EXTERNAL_REFERENCE\"));\n+                Blob blob = rs.getBlob(\"WF_METADATA\");\n+\n+                byte[] byteData;\n+\n+                if(blob != null) {\n+                    byteData = blob.getBytes(1L, (int) blob.length());\n+                    InputStream targetStream = new ByteArrayInputStream(byteData);\n+                    String data = APIMgtDBUtil.getStringFromInputStream(targetStream);\n+                    Gson g = new Gson();\n+\n+                    JSONObject json = g.fromJson(data, JSONObject.class);\n+                    workflow.setMetadata(json);\n+                }\n+                else{\n+                    JSONObject json=new JSONObject();\n+                    workflow.setMetadata(json);\n+                }\n+\n+\n+\n+            }\n+\n+        } catch (SQLException e) {\n+            handleException(\"Error when retriving the workflow details\" , e);\n+        } finally {\n+            APIMgtDBUtil.closeAllConnections(prepStmt, connection, rs);\n+        }\n+        return workflow;\n+    }\n+\n+    public Workflow[] getworkflows(String workflowType ,String status ,String tenantDomain) throws APIManagementException {\n+\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+        ResultSet rs = null;\n+\n+        Workflow[] workflows = null;\n+\n+        String sqlQuery;\n+\n+        if (workflowType != null){\n+            sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS;\n+        }\n+        else{\n+            sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_NO_TYPE;\n+        }\n+\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            prepStmt = connection.prepareStatement(sqlQuery);\n+\n+            if (workflowType != null){\n+                prepStmt.setString(1, workflowType);\n+                prepStmt.setString( 2, status);\n+                prepStmt.setString( 3, tenantDomain);\n+\n+            }\n+            else{\n+                prepStmt.setString( 1, status);\n+                prepStmt.setString( 2, tenantDomain);\n+            }\n+\n+\n+\n+\n+            rs = prepStmt.executeQuery();\n+\n+            ArrayList<Workflow> workflowsList = new ArrayList<Workflow>();\n+            Workflow workflow;\n+            while (rs.next()) {\n+                workflow = new Workflow();\n+                workflow.setWorkflowId(rs.getInt(\"WF_ID\"));\n+                workflow.setWorkflowReference(rs.getString(\"WF_REFERENCE\"));\n+                workflow.setWorkflowType(rs.getString(\"WF_TYPE\"));\n+\n+                String workflowstatus =rs.getString(\"WF_STATUS\");\n+                workflow.setStatus(org.wso2.carbon.apimgt.api.WorkflowStatus.valueOf(workflowstatus));\n+\n+                workflow.setCreatedTime(rs.getTimestamp(\"WF_CREATED_TIME\").toString());\n+                workflow.setUpdatedTime(rs.getTimestamp(\"WF_UPDATED_TIME\").toString());\n+\n+                workflow.setWorkflowStatusDesc(rs.getString(\"WF_STATUS_DESC\"));\n+                workflow.setTenantId(rs.getInt(\"TENANT_ID\"));\n+                workflow.setTenantDomain(rs.getString(\"TENANT_DOMAIN\"));\n+                workflow.setExternalWorkflowReference(rs.getString(\"WF_EXTERNAL_REFERENCE\"));\n+                workflow.setWorkflowDescription(rs.getString(\"WF_STATUS_DESC\"));\n+                Blob blob = rs.getBlob(\"WF_METADATA\");\n+                Blob blob1 = rs.getBlob(\"WF_PROPERTIES\");\n+\n+\n+                byte[] byteData;\n+\n+                if(blob != null) {\n+                    byteData = blob.getBytes(1L, (int) blob.length());\n+                    InputStream targetStream = new ByteArrayInputStream(byteData);\n+                    String data = APIMgtDBUtil.getStringFromInputStream(targetStream);\n+                    Gson g = new Gson();\n+\n+                    JSONObject json = g.fromJson(data, JSONObject.class);\n+                    workflow.setMetadata(json);\n+                }\n+                else{\n+                    JSONObject json = new JSONObject();\n+                    workflow.setMetadata(json);\n+                }\n+\n+                byte[] byteData1;\n+\n+                if(blob1 != null) {\n+                    byteData1 = blob1.getBytes(1L, (int) blob.length());\n+                    InputStream targetStream1 = new ByteArrayInputStream(byteData1);\n+                    String data1 = APIMgtDBUtil.getStringFromInputStream(targetStream1);\n+                    Gson g = new Gson();\n+\n+                    JSONObject json = g.fromJson(data1, JSONObject.class);\n+                    workflow.setProperties(json);\n+                }\n+                else{\n+                    JSONObject json = new JSONObject();\n+                    workflow.setProperties(json);\n+                }\n+\n+                workflowsList.add(workflow);\n+            }\n+            workflows = workflowsList.toArray(new Workflow[workflowsList.size()]);\n+        } catch (SQLException e) {\n+            handleException(\"Error when retrieve all the workflow details\" , e);\n+        } finally {\n+            APIMgtDBUtil.closeAllConnections(prepStmt, connection, rs);\n+        }\n+        return workflows;\n+\n+    }\n+\n+    public Workflow getworkflowReferenceByExternalWorkflowReferenceID(String externelWorkflowRef, String status , String tenantDomain) throws APIManagementException {\n+\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+        ResultSet rs = null;\n+\n+        Workflow workflow=new Workflow();\n+\n+        String sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAIL_REFER_BY_EXTERNALWORKFLOWREFERENCE;\n+\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            prepStmt = connection.prepareStatement(sqlQuery);\n+            prepStmt.setString(1, externelWorkflowRef);\n+            prepStmt.setString(2, status);\n+            prepStmt.setString(3, tenantDomain);\n+\n+\n+            rs = prepStmt.executeQuery();\n+\n+", "originalCommit": "6e7d63f0cbce7821d881557b6f804ffd9f00caf6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e5f1ca8c0c731ff296553a3776fe7937da125395", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\nindex b25d82b29f3..d1b86fe2c24 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\n", "chunk": "@@ -14793,11 +14844,8 @@ public class ApiMgtDAO {\n             prepStmt.setString(2, status);\n             prepStmt.setString(3, tenantDomain);\n \n-\n             rs = prepStmt.executeQuery();\n \n-\n-\n             while (rs.next()) {\n \n                 workflow.setWorkflowId(rs.getInt(\"WF_ID\"));\n", "next_change": {"commit": "e00fe40f5ef809f1ac81dc7c22faacda062adfab", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\nindex d1b86fe2c24..c19a17b31df 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\n", "chunk": "@@ -14819,45 +14790,35 @@ public class ApiMgtDAO {\n \n     /**\n      * Get the Pending workflow Request using ExternalWorkflowReference for a particular tenant\n-     *\n-     * @param externelWorkflowRef\n-     * @param status\n-     * @param tenantDomain\n-     * @return\n+     * @param externelWorkflowRef of pending workflow request\n+     * @param status workflow status of workflow pending process\n+     * @param tenantDomain tenant domain of user\n+     * @return workflow pending request\n      */\n-\n     public Workflow getworkflowReferenceByExternalWorkflowReferenceID(String externelWorkflowRef, String status ,\n                                                                       String tenantDomain) throws APIManagementException {\n \n         Connection connection = null;\n         PreparedStatement prepStmt = null;\n         ResultSet rs = null;\n-\n-        Workflow workflow=new Workflow();\n-\n+        Workflow workflow = new Workflow();\n         String sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_BY_EXTERNAL_WORKFLOW_REFERENCE;\n-\n         try {\n             connection = APIMgtDBUtil.getConnection();\n             prepStmt = connection.prepareStatement(sqlQuery);\n             prepStmt.setString(1, externelWorkflowRef);\n             prepStmt.setString(2, status);\n             prepStmt.setString(3, tenantDomain);\n-\n             rs = prepStmt.executeQuery();\n \n             while (rs.next()) {\n-\n                 workflow.setWorkflowId(rs.getInt(\"WF_ID\"));\n                 workflow.setWorkflowReference(rs.getString(\"WF_REFERENCE\"));\n                 workflow.setWorkflowType(rs.getString(\"WF_TYPE\"));\n-\n-                String workflowstatus =rs.getString(\"WF_STATUS\");\n+                String workflowstatus = rs.getString(\"WF_STATUS\");\n                 workflow.setStatus(org.wso2.carbon.apimgt.api.WorkflowStatus.valueOf(workflowstatus));\n-\n                 workflow.setCreatedTime(rs.getTimestamp(\"WF_CREATED_TIME\").toString());\n                 workflow.setUpdatedTime(rs.getTimestamp(\"WF_UPDATED_TIME\").toString());\n-\n                 workflow.setWorkflowDescription(rs.getString(\"WF_STATUS_DESC\"));\n                 workflow.setTenantId(rs.getInt(\"TENANT_ID\"));\n                 workflow.setTenantDomain(rs.getString(\"TENANT_DOMAIN\"));\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg2MDM3Mw==", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r386860373", "body": "add meaningful variable name", "bodyText": "add meaningful variable name", "bodyHTML": "<p dir=\"auto\">add meaningful variable name</p>", "author": "chamilaadhi", "createdAt": "2020-03-03T08:26:19Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "diffHunk": "@@ -14576,4 +14580,284 @@ public String getUserID(String userName) throws APIManagementException {\n         }\n         return userID;\n     }\n+\n+\n+    public void deleteWorkflowRequest(String workflowExtRef) throws APIManagementException {\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+\n+        String query = SQLConstants.DELETE_WORKFLOW_REQUEST_SQL;\n+        try {\n+\n+            connection = APIMgtDBUtil.getConnection();\n+            connection.setAutoCommit(false);\n+\n+\n+            prepStmt = connection.prepareStatement(query);\n+            prepStmt.setString(1, workflowExtRef);\n+            prepStmt.executeUpdate();\n+            connection.commit();\n+        }\n+        catch (SQLException e) {\n+            handleException(\"Failed to delete the workflow request \", e);\n+\n+        }\n+    }\n+\n+    public Workflow getworkflowReferenceByEWR(String externalWorkflowRef)throws APIManagementException {\n+\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+        ResultSet rs = null;\n+\n+\n+        Workflow workflow=new Workflow();\n+\n+        String sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_BY_EWR;\n+\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            prepStmt = connection.prepareStatement(sqlQuery);\n+            prepStmt.setString(1, externalWorkflowRef);\n+\n+\n+            rs = prepStmt.executeQuery();\n+\n+\n+\n+\n+            while (rs.next()) {\n+\n+                workflow.setWorkflowId(rs.getInt(\"WF_ID\"));\n+                workflow.setWorkflowReference(rs.getString(\"WF_REFERENCE\"));\n+                workflow.setWorkflowType(rs.getString(\"WF_TYPE\"));\n+\n+                String workflowstatus =rs.getString(\"WF_STATUS\");\n+                workflow.setStatus(org.wso2.carbon.apimgt.api.WorkflowStatus.valueOf(workflowstatus));\n+\n+                workflow.setCreatedTime(rs.getTimestamp(\"WF_CREATED_TIME\").toString());\n+                workflow.setUpdatedTime(rs.getTimestamp(\"WF_UPDATED_TIME\").toString());\n+\n+                workflow.setWorkflowStatusDesc(rs.getString(\"WF_STATUS_DESC\"));\n+                workflow.setTenantId(rs.getInt(\"TENANT_ID\"));\n+                workflow.setTenantDomain(rs.getString(\"TENANT_DOMAIN\"));\n+                workflow.setExternalWorkflowReference(rs.getString(\"WF_EXTERNAL_REFERENCE\"));\n+                Blob blob = rs.getBlob(\"WF_METADATA\");\n+\n+                byte[] byteData;\n+\n+                if(blob != null) {\n+                    byteData = blob.getBytes(1L, (int) blob.length());\n+                    InputStream targetStream = new ByteArrayInputStream(byteData);\n+                    String data = APIMgtDBUtil.getStringFromInputStream(targetStream);\n+                    Gson g = new Gson();\n+\n+                    JSONObject json = g.fromJson(data, JSONObject.class);\n+                    workflow.setMetadata(json);\n+                }\n+                else{\n+                    JSONObject json=new JSONObject();\n+                    workflow.setMetadata(json);\n+                }\n+\n+\n+\n+            }\n+\n+        } catch (SQLException e) {\n+            handleException(\"Error when retriving the workflow details\" , e);\n+        } finally {\n+            APIMgtDBUtil.closeAllConnections(prepStmt, connection, rs);\n+        }\n+        return workflow;\n+    }\n+\n+    public Workflow[] getworkflows(String workflowType ,String status ,String tenantDomain) throws APIManagementException {\n+\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+        ResultSet rs = null;\n+\n+        Workflow[] workflows = null;\n+\n+        String sqlQuery;\n+\n+        if (workflowType != null){\n+            sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS;\n+        }\n+        else{\n+            sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_NO_TYPE;\n+        }\n+\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            prepStmt = connection.prepareStatement(sqlQuery);\n+\n+            if (workflowType != null){\n+                prepStmt.setString(1, workflowType);\n+                prepStmt.setString( 2, status);\n+                prepStmt.setString( 3, tenantDomain);\n+\n+            }\n+            else{\n+                prepStmt.setString( 1, status);\n+                prepStmt.setString( 2, tenantDomain);\n+            }\n+\n+\n+\n+\n+            rs = prepStmt.executeQuery();\n+\n+            ArrayList<Workflow> workflowsList = new ArrayList<Workflow>();\n+            Workflow workflow;\n+            while (rs.next()) {\n+                workflow = new Workflow();\n+                workflow.setWorkflowId(rs.getInt(\"WF_ID\"));\n+                workflow.setWorkflowReference(rs.getString(\"WF_REFERENCE\"));\n+                workflow.setWorkflowType(rs.getString(\"WF_TYPE\"));\n+\n+                String workflowstatus =rs.getString(\"WF_STATUS\");\n+                workflow.setStatus(org.wso2.carbon.apimgt.api.WorkflowStatus.valueOf(workflowstatus));\n+\n+                workflow.setCreatedTime(rs.getTimestamp(\"WF_CREATED_TIME\").toString());\n+                workflow.setUpdatedTime(rs.getTimestamp(\"WF_UPDATED_TIME\").toString());\n+\n+                workflow.setWorkflowStatusDesc(rs.getString(\"WF_STATUS_DESC\"));\n+                workflow.setTenantId(rs.getInt(\"TENANT_ID\"));\n+                workflow.setTenantDomain(rs.getString(\"TENANT_DOMAIN\"));\n+                workflow.setExternalWorkflowReference(rs.getString(\"WF_EXTERNAL_REFERENCE\"));\n+                workflow.setWorkflowDescription(rs.getString(\"WF_STATUS_DESC\"));\n+                Blob blob = rs.getBlob(\"WF_METADATA\");\n+                Blob blob1 = rs.getBlob(\"WF_PROPERTIES\");\n+\n+\n+                byte[] byteData;\n+\n+                if(blob != null) {\n+                    byteData = blob.getBytes(1L, (int) blob.length());\n+                    InputStream targetStream = new ByteArrayInputStream(byteData);\n+                    String data = APIMgtDBUtil.getStringFromInputStream(targetStream);\n+                    Gson g = new Gson();\n+\n+                    JSONObject json = g.fromJson(data, JSONObject.class);\n+                    workflow.setMetadata(json);\n+                }\n+                else{\n+                    JSONObject json = new JSONObject();\n+                    workflow.setMetadata(json);\n+                }\n+\n+                byte[] byteData1;\n+\n+                if(blob1 != null) {\n+                    byteData1 = blob1.getBytes(1L, (int) blob.length());\n+                    InputStream targetStream1 = new ByteArrayInputStream(byteData1);\n+                    String data1 = APIMgtDBUtil.getStringFromInputStream(targetStream1);\n+                    Gson g = new Gson();\n+\n+                    JSONObject json = g.fromJson(data1, JSONObject.class);\n+                    workflow.setProperties(json);\n+                }\n+                else{\n+                    JSONObject json = new JSONObject();\n+                    workflow.setProperties(json);\n+                }\n+\n+                workflowsList.add(workflow);\n+            }\n+            workflows = workflowsList.toArray(new Workflow[workflowsList.size()]);\n+        } catch (SQLException e) {\n+            handleException(\"Error when retrieve all the workflow details\" , e);\n+        } finally {\n+            APIMgtDBUtil.closeAllConnections(prepStmt, connection, rs);\n+        }\n+        return workflows;\n+\n+    }\n+\n+    public Workflow getworkflowReferenceByExternalWorkflowReferenceID(String externelWorkflowRef, String status , String tenantDomain) throws APIManagementException {\n+\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+        ResultSet rs = null;\n+\n+        Workflow workflow=new Workflow();\n+\n+        String sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAIL_REFER_BY_EXTERNALWORKFLOWREFERENCE;\n+\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            prepStmt = connection.prepareStatement(sqlQuery);\n+            prepStmt.setString(1, externelWorkflowRef);\n+            prepStmt.setString(2, status);\n+            prepStmt.setString(3, tenantDomain);\n+\n+\n+            rs = prepStmt.executeQuery();\n+\n+\n+\n+            while (rs.next()) {\n+\n+                workflow.setWorkflowId(rs.getInt(\"WF_ID\"));\n+                workflow.setWorkflowReference(rs.getString(\"WF_REFERENCE\"));\n+                workflow.setWorkflowType(rs.getString(\"WF_TYPE\"));\n+\n+                String workflowstatus =rs.getString(\"WF_STATUS\");\n+                workflow.setStatus(org.wso2.carbon.apimgt.api.WorkflowStatus.valueOf(workflowstatus));\n+\n+                workflow.setCreatedTime(rs.getTimestamp(\"WF_CREATED_TIME\").toString());\n+                workflow.setUpdatedTime(rs.getTimestamp(\"WF_UPDATED_TIME\").toString());\n+\n+                workflow.setWorkflowDescription(rs.getString(\"WF_STATUS_DESC\"));\n+                workflow.setTenantId(rs.getInt(\"TENANT_ID\"));\n+                workflow.setTenantDomain(rs.getString(\"TENANT_DOMAIN\"));\n+                workflow.setExternalWorkflowReference(rs.getString(\"WF_EXTERNAL_REFERENCE\"));\n+                Blob blob = rs.getBlob(\"WF_METADATA\");\n+                Blob blob1 = rs.getBlob(\"WF_PROPERTIES\");", "originalCommit": "6e7d63f0cbce7821d881557b6f804ffd9f00caf6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e5f1ca8c0c731ff296553a3776fe7937da125395", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\nindex b25d82b29f3..d1b86fe2c24 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\n", "chunk": "@@ -14814,50 +14862,44 @@ public class ApiMgtDAO {\n                 workflow.setTenantId(rs.getInt(\"TENANT_ID\"));\n                 workflow.setTenantDomain(rs.getString(\"TENANT_DOMAIN\"));\n                 workflow.setExternalWorkflowReference(rs.getString(\"WF_EXTERNAL_REFERENCE\"));\n-                Blob blob = rs.getBlob(\"WF_METADATA\");\n-                Blob blob1 = rs.getBlob(\"WF_PROPERTIES\");\n+                Blob metadataBlob = rs.getBlob(\"WF_METADATA\");\n+                Blob propertiesBlob = rs.getBlob(\"WF_PROPERTIES\");\n \n-                byte[] byteData;\n+                byte[] metadataByte;\n \n-                if(blob != null) {\n-                    byteData = blob.getBytes(1L, (int) blob.length());\n-                    InputStream targetStream = new ByteArrayInputStream(byteData);\n-                    String data = APIMgtDBUtil.getStringFromInputStream(targetStream);\n+                if(metadataBlob != null) {\n+                    metadataByte = metadataBlob.getBytes(1L, (int) metadataBlob.length());\n+                    InputStream targetStream = new ByteArrayInputStream(metadataByte);\n+                    String metadata = APIMgtDBUtil.getStringFromInputStream(targetStream);\n                     Gson g = new Gson();\n \n-                    JSONObject json = g.fromJson(data, JSONObject.class);\n+                    JSONObject json = g.fromJson(metadata, JSONObject.class);\n                     workflow.setMetadata(json);\n-                }\n-                else{\n+                } else {\n                     JSONObject json=new JSONObject();\n                     workflow.setMetadata(json);\n                 }\n \n-                byte[] byteData1;\n+                byte[] propertiesByte;\n \n-                if(blob != null) {\n-                    byteData1 = blob1.getBytes(1L, (int) blob.length());\n-                    InputStream targetStream1 = new ByteArrayInputStream(byteData1);\n-                    String data1 = APIMgtDBUtil.getStringFromInputStream(targetStream1);\n+                if(propertiesBlob != null) {\n+                    propertiesByte = propertiesBlob.getBytes(1L, (int) propertiesBlob.length());\n+                    InputStream propertiesTargetStream = new ByteArrayInputStream(propertiesByte);\n+                    String properties = APIMgtDBUtil.getStringFromInputStream(propertiesTargetStream);\n                     Gson g = new Gson();\n-\n-                    JSONObject json1 = g.fromJson(data1, JSONObject.class);\n+                    JSONObject json1 = g.fromJson(properties, JSONObject.class);\n                     workflow.setProperties(json1);\n-                }\n-                else{\n+                } else {\n                     JSONObject json1=new JSONObject();\n                     workflow.setProperties(json1);\n                 }\n-\n-\n-\n             }\n-\n         } catch (SQLException e) {\n             handleException(\"Error when retriving the workflow details\" , e);\n         } finally {\n             APIMgtDBUtil.closeAllConnections(prepStmt, connection, rs);\n         }\n         return workflow;\n+>>>>>>> Added workflowExecutors for ApprovalWorkflowExecutor and two rest APIs.\n     }\n }\n", "next_change": {"commit": "31f6f67b8a13bf657c46f4e2f9730d7b472c9b72", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\nindex d1b86fe2c24..b2a7ba61a62 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\n", "chunk": "@@ -14900,6 +14885,6 @@ public class ApiMgtDAO {\n             APIMgtDBUtil.closeAllConnections(prepStmt, connection, rs);\n         }\n         return workflow;\n->>>>>>> Added workflowExecutors for ApprovalWorkflowExecutor and two rest APIs.\n+\n     }\n }\n", "next_change": {"commit": "e00fe40f5ef809f1ac81dc7c22faacda062adfab", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\nindex b2a7ba61a62..c19a17b31df 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\n", "chunk": "@@ -14851,40 +14827,36 @@ public class ApiMgtDAO {\n                 Blob propertiesBlob = rs.getBlob(\"WF_PROPERTIES\");\n \n                 byte[] metadataByte;\n-\n                 if(metadataBlob != null) {\n                     metadataByte = metadataBlob.getBytes(1L, (int) metadataBlob.length());\n                     InputStream targetStream = new ByteArrayInputStream(metadataByte);\n                     String metadata = APIMgtDBUtil.getStringFromInputStream(targetStream);\n-                    Gson g = new Gson();\n-\n-                    JSONObject json = g.fromJson(metadata, JSONObject.class);\n-                    workflow.setMetadata(json);\n+                    Gson metadataGson = new Gson();\n+                    JSONObject metadataJson = metadataGson.fromJson(metadata, JSONObject.class);\n+                    workflow.setMetadata(metadataJson);\n                 } else {\n-                    JSONObject json=new JSONObject();\n-                    workflow.setMetadata(json);\n+                    JSONObject metadataJson = new JSONObject();\n+                    workflow.setMetadata(metadataJson);\n                 }\n \n                 byte[] propertiesByte;\n-\n                 if(propertiesBlob != null) {\n                     propertiesByte = propertiesBlob.getBytes(1L, (int) propertiesBlob.length());\n                     InputStream propertiesTargetStream = new ByteArrayInputStream(propertiesByte);\n                     String properties = APIMgtDBUtil.getStringFromInputStream(propertiesTargetStream);\n-                    Gson g = new Gson();\n-                    JSONObject json1 = g.fromJson(properties, JSONObject.class);\n-                    workflow.setProperties(json1);\n+                    Gson propertiesGson = new Gson();\n+                    JSONObject propertiesJson = propertiesGson.fromJson(properties, JSONObject.class);\n+                    workflow.setProperties(propertiesJson);\n                 } else {\n-                    JSONObject json1=new JSONObject();\n-                    workflow.setProperties(json1);\n+                    JSONObject propertiesJson = new JSONObject();\n+                    workflow.setProperties(propertiesJson);\n                 }\n             }\n         } catch (SQLException e) {\n-            handleException(\"Error when retriving the workflow details\" , e);\n+            handleException(\"Error when retriving the workflow details. \", e);\n         } finally {\n             APIMgtDBUtil.closeAllConnections(prepStmt, connection, rs);\n         }\n         return workflow;\n-\n     }\n }\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg2MTM5NQ==", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r386861395", "body": "format", "bodyText": "format", "bodyHTML": "<p dir=\"auto\">format</p>", "author": "chamilaadhi", "createdAt": "2020-03-03T08:28:33Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/constants/SQLConstants.java", "diffHunk": "@@ -1869,6 +1869,27 @@\n     public static final String GET_ALL_WORKFLOW_ENTRY_FROM_INTERNAL_REF_SQL =\n             \"SELECT * FROM AM_WORKFLOWS WHERE WF_REFERENCE=? AND WF_TYPE=?\";\n \n+    public static final String ADD_PAYLOAD_SQL =\n+            \" UPDATE AM_WORKFLOWS \" +\n+                    \" SET \" +\n+                    \"   WF_METADATA = ?, \" +\n+                    \"   WF_PROPERTIES = ?, \" +\n+                    \"   WF_STATUS_DESC = ? \" +\n+                    \" WHERE \" +\n+                    \"    WF_EXTERNAL_REFERENCE = ?\";\n+\n+    public static final String DELETE_WORKFLOW_REQUEST_SQL=", "originalCommit": "6e7d63f0cbce7821d881557b6f804ffd9f00caf6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc5MTIwMw==", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r410791203", "bodyText": "fixed with 1be4d86", "author": "SahanHerath", "createdAt": "2020-04-19T01:55:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg2MTM5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "e5f1ca8c0c731ff296553a3776fe7937da125395", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/constants/SQLConstants.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/constants/SQLConstants.java\nindex 4dc7eb0d53e..1c8534b9389 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/constants/SQLConstants.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/constants/SQLConstants.java\n", "chunk": "@@ -1881,14 +1881,21 @@ public class SQLConstants {\n     public static final String DELETE_WORKFLOW_REQUEST_SQL=\n             \" DELETE FROM AM_WORKFLOWS WHERE WF_EXTERNAL_REFERENCE = ?\";\n \n-    public static final String GET_ALL_WORKFLOW_DETAILS_BY_EWR = \"SELECT  * FROM AM_WORKFLOWS WHERE WF_EXTERNAL_REFERENCE = ?\";\n+    public static final String GET_ALL_WORKFLOW_DETAILS_BY_EWR =\n+            \" SELECT  * FROM AM_WORKFLOWS WHERE WF_EXTERNAL_REFERENCE = ?\";\n \n-    public static final String GET_ALL_WORKFLOW_DETAILS = \"SELECT  * FROM AM_WORKFLOWS WHERE WF_TYPE = ? AND  WF_STATUS = ? AND TENANT_DOMAIN = ?\";\n+    public static final String GET_ALL_WORKFLOW_DETAILS_BY_WORKFLOW_TYPE =\n+            \" SELECT  * FROM AM_WORKFLOWS WHERE WF_TYPE = ? AND  WF_STATUS = ? AND TENANT_DOMAIN = ?\";\n \n-    public static final String GET_ALL_WORKFLOW_DETAILS_NO_TYPE = \"SELECT  * FROM AM_WORKFLOWS WHERE WF_STATUS = ? AND TENANT_DOMAIN = ?\";\n+    public static final String GET_ALL_WORKFLOW_DETAILS =\n+            \" SELECT  * FROM AM_WORKFLOWS WHERE WF_STATUS = ? AND TENANT_DOMAIN = ?\";\n \n \n-    public static final String GET_ALL_WORKFLOW_DETAIL_REFER_BY_EXTERNALWORKFLOWREFERENCE = \"SELECT  * FROM AM_WORKFLOWS WHERE WF_EXTERNAL_REFERENCE = ? AND WF_STATUS = ? AND TENANT_DOMAIN = ?\";\n+    public static final String GET_ALL_WORKFLOW_DETAILS_BY_EXTERNAL_WORKFLOW_REFERENCE =\n+            \" SELECT  * FROM AM_WORKFLOWS \" +\n+            \" WHERE WF_EXTERNAL_REFERENCE = ? \" +\n+            \" AND WF_STATUS = ? \" +\n+            \" AND TENANT_DOMAIN = ?\";\n \n     public static final String UPDATE_PUBLISHED_DEFAULT_VERSION_SQL =\n             \" UPDATE AM_API_DEFAULT_VERSION \" +\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg3MTkwNA==", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r386871904", "body": "format and add method description", "bodyText": "format and add method description", "bodyHTML": "<p dir=\"auto\">format and add method description</p>", "author": "chamilaadhi", "createdAt": "2020-03-03T08:50:05Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "diffHunk": "@@ -14576,4 +14580,284 @@ public String getUserID(String userName) throws APIManagementException {\n         }\n         return userID;\n     }\n+\n+\n+    public void deleteWorkflowRequest(String workflowExtRef) throws APIManagementException {\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+\n+        String query = SQLConstants.DELETE_WORKFLOW_REQUEST_SQL;\n+        try {\n+\n+            connection = APIMgtDBUtil.getConnection();\n+            connection.setAutoCommit(false);\n+\n+\n+            prepStmt = connection.prepareStatement(query);\n+            prepStmt.setString(1, workflowExtRef);\n+            prepStmt.executeUpdate();\n+            connection.commit();\n+        }\n+        catch (SQLException e) {\n+            handleException(\"Failed to delete the workflow request \", e);\n+\n+        }\n+    }\n+\n+    public Workflow getworkflowReferenceByEWR(String externalWorkflowRef)throws APIManagementException {\n+\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+        ResultSet rs = null;\n+\n+\n+        Workflow workflow=new Workflow();\n+\n+        String sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_BY_EWR;\n+\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            prepStmt = connection.prepareStatement(sqlQuery);\n+            prepStmt.setString(1, externalWorkflowRef);\n+\n+\n+            rs = prepStmt.executeQuery();\n+\n+\n+\n+\n+            while (rs.next()) {\n+\n+                workflow.setWorkflowId(rs.getInt(\"WF_ID\"));\n+                workflow.setWorkflowReference(rs.getString(\"WF_REFERENCE\"));\n+                workflow.setWorkflowType(rs.getString(\"WF_TYPE\"));\n+\n+                String workflowstatus =rs.getString(\"WF_STATUS\");\n+                workflow.setStatus(org.wso2.carbon.apimgt.api.WorkflowStatus.valueOf(workflowstatus));\n+\n+                workflow.setCreatedTime(rs.getTimestamp(\"WF_CREATED_TIME\").toString());\n+                workflow.setUpdatedTime(rs.getTimestamp(\"WF_UPDATED_TIME\").toString());\n+\n+                workflow.setWorkflowStatusDesc(rs.getString(\"WF_STATUS_DESC\"));\n+                workflow.setTenantId(rs.getInt(\"TENANT_ID\"));\n+                workflow.setTenantDomain(rs.getString(\"TENANT_DOMAIN\"));\n+                workflow.setExternalWorkflowReference(rs.getString(\"WF_EXTERNAL_REFERENCE\"));\n+                Blob blob = rs.getBlob(\"WF_METADATA\");\n+\n+                byte[] byteData;\n+\n+                if(blob != null) {\n+                    byteData = blob.getBytes(1L, (int) blob.length());\n+                    InputStream targetStream = new ByteArrayInputStream(byteData);\n+                    String data = APIMgtDBUtil.getStringFromInputStream(targetStream);\n+                    Gson g = new Gson();\n+\n+                    JSONObject json = g.fromJson(data, JSONObject.class);\n+                    workflow.setMetadata(json);\n+                }\n+                else{\n+                    JSONObject json=new JSONObject();\n+                    workflow.setMetadata(json);\n+                }\n+\n+\n+\n+            }\n+\n+        } catch (SQLException e) {\n+            handleException(\"Error when retriving the workflow details\" , e);\n+        } finally {\n+            APIMgtDBUtil.closeAllConnections(prepStmt, connection, rs);\n+        }\n+        return workflow;\n+    }\n+\n+    public Workflow[] getworkflows(String workflowType ,String status ,String tenantDomain) throws APIManagementException {\n+\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+        ResultSet rs = null;\n+\n+        Workflow[] workflows = null;\n+\n+        String sqlQuery;\n+\n+        if (workflowType != null){\n+            sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS;\n+        }\n+        else{\n+            sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_NO_TYPE;\n+        }\n+\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            prepStmt = connection.prepareStatement(sqlQuery);\n+\n+            if (workflowType != null){\n+                prepStmt.setString(1, workflowType);\n+                prepStmt.setString( 2, status);\n+                prepStmt.setString( 3, tenantDomain);\n+\n+            }\n+            else{\n+                prepStmt.setString( 1, status);\n+                prepStmt.setString( 2, tenantDomain);\n+            }\n+\n+\n+\n+\n+            rs = prepStmt.executeQuery();\n+\n+            ArrayList<Workflow> workflowsList = new ArrayList<Workflow>();\n+            Workflow workflow;\n+            while (rs.next()) {\n+                workflow = new Workflow();\n+                workflow.setWorkflowId(rs.getInt(\"WF_ID\"));\n+                workflow.setWorkflowReference(rs.getString(\"WF_REFERENCE\"));\n+                workflow.setWorkflowType(rs.getString(\"WF_TYPE\"));\n+\n+                String workflowstatus =rs.getString(\"WF_STATUS\");\n+                workflow.setStatus(org.wso2.carbon.apimgt.api.WorkflowStatus.valueOf(workflowstatus));\n+\n+                workflow.setCreatedTime(rs.getTimestamp(\"WF_CREATED_TIME\").toString());\n+                workflow.setUpdatedTime(rs.getTimestamp(\"WF_UPDATED_TIME\").toString());\n+\n+                workflow.setWorkflowStatusDesc(rs.getString(\"WF_STATUS_DESC\"));\n+                workflow.setTenantId(rs.getInt(\"TENANT_ID\"));\n+                workflow.setTenantDomain(rs.getString(\"TENANT_DOMAIN\"));\n+                workflow.setExternalWorkflowReference(rs.getString(\"WF_EXTERNAL_REFERENCE\"));\n+                workflow.setWorkflowDescription(rs.getString(\"WF_STATUS_DESC\"));\n+                Blob blob = rs.getBlob(\"WF_METADATA\");\n+                Blob blob1 = rs.getBlob(\"WF_PROPERTIES\");\n+\n+\n+                byte[] byteData;\n+\n+                if(blob != null) {\n+                    byteData = blob.getBytes(1L, (int) blob.length());\n+                    InputStream targetStream = new ByteArrayInputStream(byteData);\n+                    String data = APIMgtDBUtil.getStringFromInputStream(targetStream);\n+                    Gson g = new Gson();\n+\n+                    JSONObject json = g.fromJson(data, JSONObject.class);\n+                    workflow.setMetadata(json);\n+                }\n+                else{\n+                    JSONObject json = new JSONObject();\n+                    workflow.setMetadata(json);\n+                }\n+\n+                byte[] byteData1;\n+\n+                if(blob1 != null) {\n+                    byteData1 = blob1.getBytes(1L, (int) blob.length());\n+                    InputStream targetStream1 = new ByteArrayInputStream(byteData1);\n+                    String data1 = APIMgtDBUtil.getStringFromInputStream(targetStream1);\n+                    Gson g = new Gson();\n+\n+                    JSONObject json = g.fromJson(data1, JSONObject.class);\n+                    workflow.setProperties(json);\n+                }\n+                else{\n+                    JSONObject json = new JSONObject();\n+                    workflow.setProperties(json);\n+                }\n+\n+                workflowsList.add(workflow);\n+            }\n+            workflows = workflowsList.toArray(new Workflow[workflowsList.size()]);\n+        } catch (SQLException e) {\n+            handleException(\"Error when retrieve all the workflow details\" , e);\n+        } finally {\n+            APIMgtDBUtil.closeAllConnections(prepStmt, connection, rs);\n+        }\n+        return workflows;\n+\n+    }\n+\n+    public Workflow getworkflowReferenceByExternalWorkflowReferenceID(String externelWorkflowRef, String status , String tenantDomain) throws APIManagementException {\n+", "originalCommit": "6e7d63f0cbce7821d881557b6f804ffd9f00caf6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzYwMDgxMw==", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r387600813", "bodyText": "fixed with 1be4d86", "author": "SahanHerath", "createdAt": "2020-03-04T11:15:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg3MTkwNA=="}], "type": "inlineReview", "revised_code": {"commit": "e5f1ca8c0c731ff296553a3776fe7937da125395", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\nindex b25d82b29f3..d1b86fe2c24 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\n", "chunk": "@@ -14773,10 +14815,19 @@ public class ApiMgtDAO {\n             APIMgtDBUtil.closeAllConnections(prepStmt, connection, rs);\n         }\n         return workflows;\n-\n     }\n \n-    public Workflow getworkflowReferenceByExternalWorkflowReferenceID(String externelWorkflowRef, String status , String tenantDomain) throws APIManagementException {\n+    /**\n+     * Get the Pending workflow Request using ExternalWorkflowReference for a particular tenant\n+     *\n+     * @param externelWorkflowRef\n+     * @param status\n+     * @param tenantDomain\n+     * @return\n+     */\n+\n+    public Workflow getworkflowReferenceByExternalWorkflowReferenceID(String externelWorkflowRef, String status ,\n+                                                                      String tenantDomain) throws APIManagementException {\n \n         Connection connection = null;\n         PreparedStatement prepStmt = null;\n", "next_change": {"commit": "e00fe40f5ef809f1ac81dc7c22faacda062adfab", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\nindex d1b86fe2c24..c19a17b31df 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\n", "chunk": "@@ -14819,45 +14790,35 @@ public class ApiMgtDAO {\n \n     /**\n      * Get the Pending workflow Request using ExternalWorkflowReference for a particular tenant\n-     *\n-     * @param externelWorkflowRef\n-     * @param status\n-     * @param tenantDomain\n-     * @return\n+     * @param externelWorkflowRef of pending workflow request\n+     * @param status workflow status of workflow pending process\n+     * @param tenantDomain tenant domain of user\n+     * @return workflow pending request\n      */\n-\n     public Workflow getworkflowReferenceByExternalWorkflowReferenceID(String externelWorkflowRef, String status ,\n                                                                       String tenantDomain) throws APIManagementException {\n \n         Connection connection = null;\n         PreparedStatement prepStmt = null;\n         ResultSet rs = null;\n-\n-        Workflow workflow=new Workflow();\n-\n+        Workflow workflow = new Workflow();\n         String sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_BY_EXTERNAL_WORKFLOW_REFERENCE;\n-\n         try {\n             connection = APIMgtDBUtil.getConnection();\n             prepStmt = connection.prepareStatement(sqlQuery);\n             prepStmt.setString(1, externelWorkflowRef);\n             prepStmt.setString(2, status);\n             prepStmt.setString(3, tenantDomain);\n-\n             rs = prepStmt.executeQuery();\n \n             while (rs.next()) {\n-\n                 workflow.setWorkflowId(rs.getInt(\"WF_ID\"));\n                 workflow.setWorkflowReference(rs.getString(\"WF_REFERENCE\"));\n                 workflow.setWorkflowType(rs.getString(\"WF_TYPE\"));\n-\n-                String workflowstatus =rs.getString(\"WF_STATUS\");\n+                String workflowstatus = rs.getString(\"WF_STATUS\");\n                 workflow.setStatus(org.wso2.carbon.apimgt.api.WorkflowStatus.valueOf(workflowstatus));\n-\n                 workflow.setCreatedTime(rs.getTimestamp(\"WF_CREATED_TIME\").toString());\n                 workflow.setUpdatedTime(rs.getTimestamp(\"WF_UPDATED_TIME\").toString());\n-\n                 workflow.setWorkflowDescription(rs.getString(\"WF_STATUS_DESC\"));\n                 workflow.setTenantId(rs.getInt(\"TENANT_ID\"));\n                 workflow.setTenantDomain(rs.getString(\"TENANT_DOMAIN\"));\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg3MzgxMg==", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r386873812", "body": "lets rename to GET_ALL_WORKFLOW_DETAILS_BY_EXTERNAL_WORKFLOW_REFERENCE", "bodyText": "lets rename to GET_ALL_WORKFLOW_DETAILS_BY_EXTERNAL_WORKFLOW_REFERENCE", "bodyHTML": "<p dir=\"auto\">lets rename to GET_ALL_WORKFLOW_DETAILS_BY_EXTERNAL_WORKFLOW_REFERENCE</p>", "author": "chamilaadhi", "createdAt": "2020-03-03T08:53:46Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/constants/SQLConstants.java", "diffHunk": "@@ -1869,6 +1869,27 @@\n     public static final String GET_ALL_WORKFLOW_ENTRY_FROM_INTERNAL_REF_SQL =\n             \"SELECT * FROM AM_WORKFLOWS WHERE WF_REFERENCE=? AND WF_TYPE=?\";\n \n+    public static final String ADD_PAYLOAD_SQL =\n+            \" UPDATE AM_WORKFLOWS \" +\n+                    \" SET \" +\n+                    \"   WF_METADATA = ?, \" +\n+                    \"   WF_PROPERTIES = ?, \" +\n+                    \"   WF_STATUS_DESC = ? \" +\n+                    \" WHERE \" +\n+                    \"    WF_EXTERNAL_REFERENCE = ?\";\n+\n+    public static final String DELETE_WORKFLOW_REQUEST_SQL=\n+            \" DELETE FROM AM_WORKFLOWS WHERE WF_EXTERNAL_REFERENCE = ?\";\n+\n+    public static final String GET_ALL_WORKFLOW_DETAILS_BY_EWR = \"SELECT  * FROM AM_WORKFLOWS WHERE WF_EXTERNAL_REFERENCE = ?\";\n+\n+    public static final String GET_ALL_WORKFLOW_DETAILS = \"SELECT  * FROM AM_WORKFLOWS WHERE WF_TYPE = ? AND  WF_STATUS = ? AND TENANT_DOMAIN = ?\";\n+\n+    public static final String GET_ALL_WORKFLOW_DETAILS_NO_TYPE = \"SELECT  * FROM AM_WORKFLOWS WHERE WF_STATUS = ? AND TENANT_DOMAIN = ?\";\n+\n+\n+    public static final String GET_ALL_WORKFLOW_DETAIL_REFER_BY_EXTERNALWORKFLOWREFERENCE = \"SELECT  * FROM AM_WORKFLOWS WHERE WF_EXTERNAL_REFERENCE = ? AND WF_STATUS = ? AND TENANT_DOMAIN = ?\";", "originalCommit": "6e7d63f0cbce7821d881557b6f804ffd9f00caf6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e5f1ca8c0c731ff296553a3776fe7937da125395", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/constants/SQLConstants.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/constants/SQLConstants.java\nindex 4dc7eb0d53e..1c8534b9389 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/constants/SQLConstants.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/constants/SQLConstants.java\n", "chunk": "@@ -1881,14 +1881,21 @@ public class SQLConstants {\n     public static final String DELETE_WORKFLOW_REQUEST_SQL=\n             \" DELETE FROM AM_WORKFLOWS WHERE WF_EXTERNAL_REFERENCE = ?\";\n \n-    public static final String GET_ALL_WORKFLOW_DETAILS_BY_EWR = \"SELECT  * FROM AM_WORKFLOWS WHERE WF_EXTERNAL_REFERENCE = ?\";\n+    public static final String GET_ALL_WORKFLOW_DETAILS_BY_EWR =\n+            \" SELECT  * FROM AM_WORKFLOWS WHERE WF_EXTERNAL_REFERENCE = ?\";\n \n-    public static final String GET_ALL_WORKFLOW_DETAILS = \"SELECT  * FROM AM_WORKFLOWS WHERE WF_TYPE = ? AND  WF_STATUS = ? AND TENANT_DOMAIN = ?\";\n+    public static final String GET_ALL_WORKFLOW_DETAILS_BY_WORKFLOW_TYPE =\n+            \" SELECT  * FROM AM_WORKFLOWS WHERE WF_TYPE = ? AND  WF_STATUS = ? AND TENANT_DOMAIN = ?\";\n \n-    public static final String GET_ALL_WORKFLOW_DETAILS_NO_TYPE = \"SELECT  * FROM AM_WORKFLOWS WHERE WF_STATUS = ? AND TENANT_DOMAIN = ?\";\n+    public static final String GET_ALL_WORKFLOW_DETAILS =\n+            \" SELECT  * FROM AM_WORKFLOWS WHERE WF_STATUS = ? AND TENANT_DOMAIN = ?\";\n \n \n-    public static final String GET_ALL_WORKFLOW_DETAIL_REFER_BY_EXTERNALWORKFLOWREFERENCE = \"SELECT  * FROM AM_WORKFLOWS WHERE WF_EXTERNAL_REFERENCE = ? AND WF_STATUS = ? AND TENANT_DOMAIN = ?\";\n+    public static final String GET_ALL_WORKFLOW_DETAILS_BY_EXTERNAL_WORKFLOW_REFERENCE =\n+            \" SELECT  * FROM AM_WORKFLOWS \" +\n+            \" WHERE WF_EXTERNAL_REFERENCE = ? \" +\n+            \" AND WF_STATUS = ? \" +\n+            \" AND TENANT_DOMAIN = ?\";\n \n     public static final String UPDATE_PUBLISHED_DEFAULT_VERSION_SQL =\n             \" UPDATE AM_API_DEFAULT_VERSION \" +\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg3NDAxMA==", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r386874010", "body": "not clear enough (meaning)", "bodyText": "not clear enough (meaning)", "bodyHTML": "<p dir=\"auto\">not clear enough (meaning)</p>", "author": "chamilaadhi", "createdAt": "2020-03-03T08:54:09Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/constants/SQLConstants.java", "diffHunk": "@@ -1869,6 +1869,27 @@\n     public static final String GET_ALL_WORKFLOW_ENTRY_FROM_INTERNAL_REF_SQL =\n             \"SELECT * FROM AM_WORKFLOWS WHERE WF_REFERENCE=? AND WF_TYPE=?\";\n \n+    public static final String ADD_PAYLOAD_SQL =\n+            \" UPDATE AM_WORKFLOWS \" +\n+                    \" SET \" +\n+                    \"   WF_METADATA = ?, \" +\n+                    \"   WF_PROPERTIES = ?, \" +\n+                    \"   WF_STATUS_DESC = ? \" +\n+                    \" WHERE \" +\n+                    \"    WF_EXTERNAL_REFERENCE = ?\";\n+\n+    public static final String DELETE_WORKFLOW_REQUEST_SQL=\n+            \" DELETE FROM AM_WORKFLOWS WHERE WF_EXTERNAL_REFERENCE = ?\";\n+\n+    public static final String GET_ALL_WORKFLOW_DETAILS_BY_EWR = \"SELECT  * FROM AM_WORKFLOWS WHERE WF_EXTERNAL_REFERENCE = ?\";\n+\n+    public static final String GET_ALL_WORKFLOW_DETAILS = \"SELECT  * FROM AM_WORKFLOWS WHERE WF_TYPE = ? AND  WF_STATUS = ? AND TENANT_DOMAIN = ?\";\n+\n+    public static final String GET_ALL_WORKFLOW_DETAILS_NO_TYPE = \"SELECT  * FROM AM_WORKFLOWS WHERE WF_STATUS = ? AND TENANT_DOMAIN = ?\";", "originalCommit": "6e7d63f0cbce7821d881557b6f804ffd9f00caf6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e5f1ca8c0c731ff296553a3776fe7937da125395", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/constants/SQLConstants.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/constants/SQLConstants.java\nindex 4dc7eb0d53e..1c8534b9389 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/constants/SQLConstants.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/constants/SQLConstants.java\n", "chunk": "@@ -1881,14 +1881,21 @@ public class SQLConstants {\n     public static final String DELETE_WORKFLOW_REQUEST_SQL=\n             \" DELETE FROM AM_WORKFLOWS WHERE WF_EXTERNAL_REFERENCE = ?\";\n \n-    public static final String GET_ALL_WORKFLOW_DETAILS_BY_EWR = \"SELECT  * FROM AM_WORKFLOWS WHERE WF_EXTERNAL_REFERENCE = ?\";\n+    public static final String GET_ALL_WORKFLOW_DETAILS_BY_EWR =\n+            \" SELECT  * FROM AM_WORKFLOWS WHERE WF_EXTERNAL_REFERENCE = ?\";\n \n-    public static final String GET_ALL_WORKFLOW_DETAILS = \"SELECT  * FROM AM_WORKFLOWS WHERE WF_TYPE = ? AND  WF_STATUS = ? AND TENANT_DOMAIN = ?\";\n+    public static final String GET_ALL_WORKFLOW_DETAILS_BY_WORKFLOW_TYPE =\n+            \" SELECT  * FROM AM_WORKFLOWS WHERE WF_TYPE = ? AND  WF_STATUS = ? AND TENANT_DOMAIN = ?\";\n \n-    public static final String GET_ALL_WORKFLOW_DETAILS_NO_TYPE = \"SELECT  * FROM AM_WORKFLOWS WHERE WF_STATUS = ? AND TENANT_DOMAIN = ?\";\n+    public static final String GET_ALL_WORKFLOW_DETAILS =\n+            \" SELECT  * FROM AM_WORKFLOWS WHERE WF_STATUS = ? AND TENANT_DOMAIN = ?\";\n \n \n-    public static final String GET_ALL_WORKFLOW_DETAIL_REFER_BY_EXTERNALWORKFLOWREFERENCE = \"SELECT  * FROM AM_WORKFLOWS WHERE WF_EXTERNAL_REFERENCE = ? AND WF_STATUS = ? AND TENANT_DOMAIN = ?\";\n+    public static final String GET_ALL_WORKFLOW_DETAILS_BY_EXTERNAL_WORKFLOW_REFERENCE =\n+            \" SELECT  * FROM AM_WORKFLOWS \" +\n+            \" WHERE WF_EXTERNAL_REFERENCE = ? \" +\n+            \" AND WF_STATUS = ? \" +\n+            \" AND TENANT_DOMAIN = ?\";\n \n     public static final String UPDATE_PUBLISHED_DEFAULT_VERSION_SQL =\n             \" UPDATE AM_API_DEFAULT_VERSION \" +\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg3NDE2Mw==", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r386874163", "body": "format and remove space", "bodyText": "format and remove space", "bodyHTML": "<p dir=\"auto\">format and remove space</p>", "author": "chamilaadhi", "createdAt": "2020-03-03T08:54:28Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dto/WorkflowDTO.java", "diffHunk": "@@ -56,7 +57,26 @@\n     private String externalWorkflowReference;\n \n     private String callbackUrl;\n-    \n+\n+    private JSONObject metadata;\n+\n+    private JSONObject properties;\n+\n+    public WorkflowDTO(){\n+        metadata =new JSONObject();\n+        properties =new JSONObject();\n+    }\n+", "originalCommit": "6e7d63f0cbce7821d881557b6f804ffd9f00caf6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc2NDY3MQ==", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r406764671", "bodyText": "fixed with 1be4d86", "author": "SahanHerath", "createdAt": "2020-04-10T13:47:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg3NDE2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "e5f1ca8c0c731ff296553a3776fe7937da125395", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dto/WorkflowDTO.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dto/WorkflowDTO.java\nindex 797ebcaa318..ab961ba3fac 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dto/WorkflowDTO.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dto/WorkflowDTO.java\n", "chunk": "@@ -63,12 +63,10 @@ public class WorkflowDTO implements Serializable {\n     private JSONObject properties;\n \n     public WorkflowDTO(){\n-        metadata =new JSONObject();\n-        properties =new JSONObject();\n+        metadata = new JSONObject();\n+        properties = new JSONObject();\n     }\n \n-\n-\n     public String getProperties(String key) {\n         return properties.get(key).toString();\n     }\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg3NDQyMQ==", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r386874421", "body": "this is not needed", "bodyText": "this is not needed", "bodyHTML": "<p dir=\"auto\">this is not needed</p>", "author": "chamilaadhi", "createdAt": "2020-03-03T08:54:55Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/APIStateChangeApprovalWorkflowExecutor.java", "diffHunk": "@@ -0,0 +1,233 @@\n+package org.wso2.carbon.apimgt.impl.workflow;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n+import org.wso2.carbon.apimgt.api.WorkflowResponse;\n+import org.wso2.carbon.apimgt.api.model.APIIdentifier;\n+import org.wso2.carbon.apimgt.api.model.Workflow;\n+import org.wso2.carbon.apimgt.impl.APIConstants;\n+import org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO;\n+import org.wso2.carbon.apimgt.impl.dto.WorkflowDTO;\n+import org.wso2.carbon.apimgt.impl.internal.ServiceReferenceHolder;\n+import org.wso2.carbon.apimgt.impl.utils.APIUtil;\n+import org.wso2.carbon.context.PrivilegedCarbonContext;\n+import org.wso2.carbon.governance.api.generic.dataobjects.GenericArtifact;\n+import org.wso2.carbon.registry.core.Registry;\n+import org.wso2.carbon.registry.core.exceptions.RegistryException;\n+\n+import java.util.*;\n+\n+public class APIStateChangeApprovalWorkflowExecutor extends WorkflowExecutor{\n+\n+    private static final String RUNTIME_INSTANCE_RESOURCE_PATH = \"/runtime/process-instances\";", "originalCommit": "6e7d63f0cbce7821d881557b6f804ffd9f00caf6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzYwMDQ5NA==", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r387600494", "bodyText": "fixed with 1be4d86", "author": "SahanHerath", "createdAt": "2020-03-04T11:14:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg3NDQyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "e5f1ca8c0c731ff296553a3776fe7937da125395", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/APIStateChangeApprovalWorkflowExecutor.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/APIStateChangeApprovalWorkflowExecutor.java\nindex 770c95d310d..b18c28630f1 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/APIStateChangeApprovalWorkflowExecutor.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/APIStateChangeApprovalWorkflowExecutor.java\n", "chunk": "@@ -20,7 +20,6 @@ import java.util.*;\n \n public class APIStateChangeApprovalWorkflowExecutor extends WorkflowExecutor{\n \n-    private static final String RUNTIME_INSTANCE_RESOURCE_PATH = \"/runtime/process-instances\";\n     private static final Log log = LogFactory.getLog(APIStateChangeWSWorkflowExecutor.class);\n     private String stateList;\n \n", "next_change": {"commit": "e00fe40f5ef809f1ac81dc7c22faacda062adfab", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/APIStateChangeApprovalWorkflowExecutor.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/APIStateChangeApprovalWorkflowExecutor.java\nindex b18c28630f1..cb79bf0aaf2 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/APIStateChangeApprovalWorkflowExecutor.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/APIStateChangeApprovalWorkflowExecutor.java\n", "chunk": "@@ -15,9 +32,16 @@ import org.wso2.carbon.context.PrivilegedCarbonContext;\n import org.wso2.carbon.governance.api.generic.dataobjects.GenericArtifact;\n import org.wso2.carbon.registry.core.Registry;\n import org.wso2.carbon.registry.core.exceptions.RegistryException;\n-\n-import java.util.*;\n-\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.ArrayList;\n+\n+/**\n+ * Approval workflow for API state change.\n+ *\n+ */\n public class APIStateChangeApprovalWorkflowExecutor extends WorkflowExecutor{\n \n     private static final Log log = LogFactory.getLog(APIStateChangeWSWorkflowExecutor.class);\n", "next_change": {"commit": "9b48a01776745e4804aee0554f67dde112e0ccdd", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/APIStateChangeApprovalWorkflowExecutor.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/APIStateChangeApprovalWorkflowExecutor.java\nindex cb79bf0aaf2..1f581dbc8b4 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/APIStateChangeApprovalWorkflowExecutor.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/APIStateChangeApprovalWorkflowExecutor.java\n", "chunk": "@@ -42,7 +42,7 @@ import java.util.ArrayList;\n  * Approval workflow for API state change.\n  *\n  */\n-public class APIStateChangeApprovalWorkflowExecutor extends WorkflowExecutor{\n+public class APIStateChangeApprovalWorkflowExecutor extends WorkflowExecutor {\n \n     private static final Log log = LogFactory.getLog(APIStateChangeWSWorkflowExecutor.class);\n     private String stateList;\n", "next_change": null}]}}]}}]}}, {"oid": "63aac0ce60d89723bf51b15c7f9f35b420b3e7cc", "url": "https://github.com/wso2/carbon-apimgt/commit/63aac0ce60d89723bf51b15c7f9f35b420b3e7cc", "message": "Added workflowExecutors for ApprovalWorkflowExecutor and two rest APIs.", "committedDate": "2020-04-01T07:02:11Z", "type": "commit"}, {"oid": "e5f1ca8c0c731ff296553a3776fe7937da125395", "url": "https://github.com/wso2/carbon-apimgt/commit/e5f1ca8c0c731ff296553a3776fe7937da125395", "message": "Reformatted workflowExecutors for ApprovalWorkflowExecutor and two rest APIs", "committedDate": "2020-04-01T07:02:12Z", "type": "commit"}, {"oid": "8b030289aca2777f2d9be37fd3330df4e6ce1002", "url": "https://github.com/wso2/carbon-apimgt/commit/8b030289aca2777f2d9be37fd3330df4e6ce1002", "message": "Added database changes to the sql files", "committedDate": "2020-04-01T07:02:12Z", "type": "commit"}, {"oid": "31f6f67b8a13bf657c46f4e2f9730d7b472c9b72", "url": "https://github.com/wso2/carbon-apimgt/commit/31f6f67b8a13bf657c46f4e2f9730d7b472c9b72", "message": "Added workflowExecutors for ApprovalWorkflowExecutor and two rest APIs.", "committedDate": "2020-04-01T07:28:36Z", "type": "commit"}, {"oid": "63814cb85271ac3852fd12470cc7a81669d844ca", "url": "https://github.com/wso2/carbon-apimgt/commit/63814cb85271ac3852fd12470cc7a81669d844ca", "message": "Changes in the workflow executors", "committedDate": "2020-04-01T07:28:37Z", "type": "commit"}, {"oid": "63814cb85271ac3852fd12470cc7a81669d844ca", "url": "https://github.com/wso2/carbon-apimgt/commit/63814cb85271ac3852fd12470cc7a81669d844ca", "message": "Changes in the workflow executors", "committedDate": "2020-04-01T07:28:37Z", "type": "forcePushed"}, {"oid": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002", "url": "https://github.com/wso2/carbon-apimgt/commit/6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002", "message": "Changes in add workflow entry ApiMgtDAO.java", "committedDate": "2020-04-03T05:48:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYxNjkxMQ==", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r406616911", "body": "Missing license header", "bodyText": "Missing license header", "bodyHTML": "<p dir=\"auto\">Missing license header</p>", "author": "chamilaadhi", "createdAt": "2020-04-10T06:06:36Z", "path": "components/apimgt/org.wso2.carbon.apimgt.api/src/main/java/org/wso2/carbon/apimgt/api/model/Workflow.java", "diffHunk": "@@ -0,0 +1,188 @@\n+package org.wso2.carbon.apimgt.api.model;", "originalCommit": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc5MTQzNg==", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r410791436", "bodyText": "fixed with e00fe40", "author": "SahanHerath", "createdAt": "2020-04-19T01:57:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYxNjkxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc5NjgxOA==", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r410796818", "bodyText": "changed year with 3719d98", "author": "SahanHerath", "createdAt": "2020-04-19T02:37:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYxNjkxMQ=="}], "type": "inlineReview", "revised_code": {"commit": "e00fe40f5ef809f1ac81dc7c22faacda062adfab", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.api/src/main/java/org/wso2/carbon/apimgt/api/model/Workflow.java b/components/apimgt/org.wso2.carbon.apimgt.api/src/main/java/org/wso2/carbon/apimgt/api/model/Workflow.java\nindex 36dedcda1ef..480fdc5fedc 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.api/src/main/java/org/wso2/carbon/apimgt/api/model/Workflow.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.api/src/main/java/org/wso2/carbon/apimgt/api/model/Workflow.java\n", "chunk": "@@ -1,3 +1,20 @@\n+/*\n+ *  Copyright (c) 2005-2011, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n package org.wso2.carbon.apimgt.api.model;\n \n import org.json.simple.JSONObject;\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYxODE5MA==", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r406618190", "body": "seems like this method is still not formated. please format every new method you include. Ex: there is no space between '=', I can see some other issues as well", "bodyText": "seems like this method is still not formated. please format every new method you include. Ex: there is no space between '=', I can see some other issues as well", "bodyHTML": "<p dir=\"auto\">seems like this method is still not formated. please format every new method you include. Ex: there is no space between '=', I can see some other issues as well</p>", "author": "chamilaadhi", "createdAt": "2020-04-10T06:12:04Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIAdminImpl.java", "diffHunk": "@@ -349,4 +346,22 @@ private int isCategoryAttached(APICategory category, String username) throws API\n         int length = (Integer) result.get(\"length\");\n         return length;\n     }\n+\n+    public Workflow[] getworkflows(String workflowType, String status, String tenantDomain ) throws APIManagementException {\n+\n+        return apiMgtDAO.getworkflows(workflowType, status , tenantDomain );\n+    }\n+\n+    public Workflow getworkflowReferenceByExternalWorkflowReferenceID(String externelWorkflowRef, String status,\n+                                                                      String tenantDomain) throws APIManagementException {\n+\n+        Workflow workflow=apiMgtDAO.getworkflowReferenceByExternalWorkflowReferenceID(externelWorkflowRef, status ,tenantDomain );\n+\n+        if (workflow == null) {\n+            String msg=\"External workflow Reference: \" + externelWorkflowRef + \" was not found.\";\n+            throw new APIMgtResourceNotFoundException(msg);\n+        }\n+", "originalCommit": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e00fe40f5ef809f1ac81dc7c22faacda062adfab", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIAdminImpl.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIAdminImpl.java\nindex 9ddab09bfa4..bbaddc0a067 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIAdminImpl.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIAdminImpl.java\n", "chunk": "@@ -347,21 +347,37 @@ public class APIAdminImpl implements APIAdmin {\n         return length;\n     }\n \n+    /**\n+     * The method converts the date into timestamp\n+     *\n+     * @param workflowType\n+     * @param status\n+     * @param tenantDomain\n+     * @return Workflow[]\n+     * @throws APIManagementException\n+     */\n     public Workflow[] getworkflows(String workflowType, String status, String tenantDomain ) throws APIManagementException {\n-\n-        return apiMgtDAO.getworkflows(workflowType, status , tenantDomain );\n+        return apiMgtDAO.getworkflows(workflowType, status, tenantDomain);\n     }\n \n+    /**\n+     * The method converts the date into timestamp\n+     *\n+     * @param externelWorkflowRef\n+     * @param status\n+     * @param tenantDomain\n+     * @return Workflow\n+     * @throws APIManagementException\n+     */\n     public Workflow getworkflowReferenceByExternalWorkflowReferenceID(String externelWorkflowRef, String status,\n                                                                       String tenantDomain) throws APIManagementException {\n \n         Workflow workflow=apiMgtDAO.getworkflowReferenceByExternalWorkflowReferenceID(externelWorkflowRef, status ,tenantDomain );\n \n         if (workflow == null) {\n-            String msg=\"External workflow Reference: \" + externelWorkflowRef + \" was not found.\";\n+            String msg = \"External workflow Reference: \" + externelWorkflowRef + \" was not found.\";\n             throw new APIMgtResourceNotFoundException(msg);\n         }\n-\n         return workflow;\n     }\n }\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYxODIzMA==", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r406618230", "body": "format", "bodyText": "format", "bodyHTML": "<p dir=\"auto\">format</p>", "author": "chamilaadhi", "createdAt": "2020-04-10T06:12:16Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIAdminImpl.java", "diffHunk": "@@ -349,4 +346,22 @@ private int isCategoryAttached(APICategory category, String username) throws API\n         int length = (Integer) result.get(\"length\");\n         return length;\n     }\n+\n+    public Workflow[] getworkflows(String workflowType, String status, String tenantDomain ) throws APIManagementException {\n+\n+        return apiMgtDAO.getworkflows(workflowType, status , tenantDomain );", "originalCommit": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e00fe40f5ef809f1ac81dc7c22faacda062adfab", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIAdminImpl.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIAdminImpl.java\nindex 9ddab09bfa4..bbaddc0a067 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIAdminImpl.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIAdminImpl.java\n", "chunk": "@@ -347,21 +347,37 @@ public class APIAdminImpl implements APIAdmin {\n         return length;\n     }\n \n+    /**\n+     * The method converts the date into timestamp\n+     *\n+     * @param workflowType\n+     * @param status\n+     * @param tenantDomain\n+     * @return Workflow[]\n+     * @throws APIManagementException\n+     */\n     public Workflow[] getworkflows(String workflowType, String status, String tenantDomain ) throws APIManagementException {\n-\n-        return apiMgtDAO.getworkflows(workflowType, status , tenantDomain );\n+        return apiMgtDAO.getworkflows(workflowType, status, tenantDomain);\n     }\n \n+    /**\n+     * The method converts the date into timestamp\n+     *\n+     * @param externelWorkflowRef\n+     * @param status\n+     * @param tenantDomain\n+     * @return Workflow\n+     * @throws APIManagementException\n+     */\n     public Workflow getworkflowReferenceByExternalWorkflowReferenceID(String externelWorkflowRef, String status,\n                                                                       String tenantDomain) throws APIManagementException {\n \n         Workflow workflow=apiMgtDAO.getworkflowReferenceByExternalWorkflowReferenceID(externelWorkflowRef, status ,tenantDomain );\n \n         if (workflow == null) {\n-            String msg=\"External workflow Reference: \" + externelWorkflowRef + \" was not found.\";\n+            String msg = \"External workflow Reference: \" + externelWorkflowRef + \" was not found.\";\n             throw new APIMgtResourceNotFoundException(msg);\n         }\n-\n         return workflow;\n     }\n }\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYxODMyMw==", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r406618323", "body": "format", "bodyText": "format", "bodyHTML": "<p dir=\"auto\">format</p>", "author": "chamilaadhi", "createdAt": "2020-04-10T06:12:38Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "diffHunk": "@@ -5937,10 +5934,24 @@ public void addWorkflowEntry(WorkflowDTO workflow) throws APIManagementException\n             prepStmt.setString(7, workflow.getTenantDomain());\n             prepStmt.setString(8, workflow.getExternalWorkflowReference());\n \n+            if(workflow.getMetadata()!=null){\n+                byte[] metadataByte = workflow.getMetadata().toJSONString().getBytes(\"UTF-8\");", "originalCommit": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc5MTc2Mg==", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r410791762", "bodyText": "fixed with e00fe40", "author": "SahanHerath", "createdAt": "2020-04-19T01:59:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYxODMyMw=="}], "type": "inlineReview", "revised_code": {"commit": "e00fe40f5ef809f1ac81dc7c22faacda062adfab", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\nindex be9b41b3956..c19a17b31df 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\n", "chunk": "@@ -5934,22 +5934,21 @@ public class ApiMgtDAO {\n             prepStmt.setString(7, workflow.getTenantDomain());\n             prepStmt.setString(8, workflow.getExternalWorkflowReference());\n \n-            if(workflow.getMetadata()!=null){\n+            if(workflow.getMetadata() != null) {\n                 byte[] metadataByte = workflow.getMetadata().toJSONString().getBytes(\"UTF-8\");\n                 prepStmt.setBlob(9, new ByteArrayInputStream(metadataByte) );\n             } else {\n-                prepStmt.setNull(9, java.sql.Types.BLOB);\n+                prepStmt.setBlob(9, (Blob)null);\n             }\n \n             if(workflow.getProperties() != null) {\n                 byte[] propertiesByte = workflow.getProperties().toJSONString().getBytes(\"UTF-8\");\n                 prepStmt.setBlob(10, new ByteArrayInputStream(propertiesByte));\n             } else {\n-                prepStmt.setNull(10, java.sql.Types.BLOB);\n+                //prepStmt.setNull(10, java.sql.Types.BLOB);\n+                prepStmt.setBlob(10, (Blob)null);\n             }\n-\n             prepStmt.execute();\n-\n             connection.commit();\n         } catch (SQLException | UnsupportedEncodingException e) {\n             handleException(\"Error while adding Workflow : \" + workflow.getExternalWorkflowReference() + \" to the \" +\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYxODg0OQ==", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r406618849", "body": "close the db connection once finished \r\n    finally {\r\n                APIMgtDBUtil.closeAllConnections(ps, conn, resultSet);\r\n            }", "bodyText": "close the db connection once finished\nfinally {\nAPIMgtDBUtil.closeAllConnections(ps, conn, resultSet);\n}", "bodyHTML": "<p dir=\"auto\">close the db connection once finished<br>\nfinally {<br>\nAPIMgtDBUtil.closeAllConnections(ps, conn, resultSet);<br>\n}</p>", "author": "chamilaadhi", "createdAt": "2020-04-10T06:14:52Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "diffHunk": "@@ -14610,4 +14621,284 @@ public String getUserID(String userName) throws APIManagementException {\n         }\n         return list;\n     }\n+\n+    /**\n+     * Remove the Pending workflow Requests using ExternalWorkflowReference\n+     *\n+     * @param workflowExtRef\n+     * @return\n+     */\n+\n+    public void deleteWorkflowRequest(String workflowExtRef) throws APIManagementException {\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+\n+        String query = SQLConstants.DELETE_WORKFLOW_REQUEST_SQL;\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            connection.setAutoCommit(false);\n+\n+            prepStmt = connection.prepareStatement(query);\n+            prepStmt.setString(1, workflowExtRef);\n+            prepStmt.executeUpdate();\n+            connection.commit();\n+        }\n+        catch (SQLException e) {\n+            handleException(\"Failed to delete the workflow request \", e);\n+        }", "originalCommit": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc5MTc4Mw==", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r410791783", "bodyText": "fixed with e00fe40", "author": "SahanHerath", "createdAt": "2020-04-19T01:59:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYxODg0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "e00fe40f5ef809f1ac81dc7c22faacda062adfab", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\nindex be9b41b3956..c19a17b31df 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\n", "chunk": "@@ -14624,66 +14623,55 @@ public class ApiMgtDAO {\n \n     /**\n      * Remove the Pending workflow Requests using ExternalWorkflowReference\n-     *\n-     * @param workflowExtRef\n-     * @return\n+     * @param workflowExtRef External Workflow Reference of Workflow Pending Request\n+     * @throws APIManagementException\n      */\n-\n     public void deleteWorkflowRequest(String workflowExtRef) throws APIManagementException {\n         Connection connection = null;\n         PreparedStatement prepStmt = null;\n-\n         String query = SQLConstants.DELETE_WORKFLOW_REQUEST_SQL;\n         try {\n             connection = APIMgtDBUtil.getConnection();\n             connection.setAutoCommit(false);\n-\n             prepStmt = connection.prepareStatement(query);\n             prepStmt.setString(1, workflowExtRef);\n             prepStmt.executeUpdate();\n             connection.commit();\n         }\n         catch (SQLException e) {\n-            handleException(\"Failed to delete the workflow request \", e);\n+            handleException(\"Failed to delete the workflow request. \", e);\n+        } finally {\n+            APIMgtDBUtil.closeAllConnections(prepStmt, connection, null);\n         }\n     }\n \n     /**\n      * Get the Pending workflow Request using ExternalWorkflowReference\n-     *\n      * @param externalWorkflowRef\n-     * @return\n+     * @return workflow pending request\n+     * @throws APIManagementException\n      */\n-\n     public Workflow getworkflowReferenceByExternalWorkflowReference(String externalWorkflowRef)throws APIManagementException {\n \n         Connection connection = null;\n         PreparedStatement prepStmt = null;\n         ResultSet rs = null;\n-\n-        Workflow workflow=new Workflow();\n-\n-        String sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_BY_EWR;\n-\n+        Workflow workflow = new Workflow();\n+        String sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_BY_EXTERNALWORKFLOWREF;\n         try {\n             connection = APIMgtDBUtil.getConnection();\n             prepStmt = connection.prepareStatement(sqlQuery);\n             prepStmt.setString(1, externalWorkflowRef);\n-\n             rs = prepStmt.executeQuery();\n \n             while (rs.next()) {\n-\n                 workflow.setWorkflowId(rs.getInt(\"WF_ID\"));\n                 workflow.setWorkflowReference(rs.getString(\"WF_REFERENCE\"));\n                 workflow.setWorkflowType(rs.getString(\"WF_TYPE\"));\n-\n                 String workflowstatus =rs.getString(\"WF_STATUS\");\n                 workflow.setStatus(org.wso2.carbon.apimgt.api.WorkflowStatus.valueOf(workflowstatus));\n-\n                 workflow.setCreatedTime(rs.getTimestamp(\"WF_CREATED_TIME\").toString());\n                 workflow.setUpdatedTime(rs.getTimestamp(\"WF_UPDATED_TIME\").toString());\n-\n                 workflow.setWorkflowStatusDesc(rs.getString(\"WF_STATUS_DESC\"));\n                 workflow.setTenantId(rs.getInt(\"TENANT_ID\"));\n                 workflow.setTenantDomain(rs.getString(\"TENANT_DOMAIN\"));\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYxOTA1OQ==", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r406619059", "body": "add missing docs", "bodyText": "add missing docs", "bodyHTML": "<p dir=\"auto\">add missing docs</p>", "author": "chamilaadhi", "createdAt": "2020-04-10T06:15:48Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "diffHunk": "@@ -14610,4 +14621,284 @@ public String getUserID(String userName) throws APIManagementException {\n         }\n         return list;\n     }\n+\n+    /**\n+     * Remove the Pending workflow Requests using ExternalWorkflowReference\n+     *\n+     * @param workflowExtRef", "originalCommit": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e00fe40f5ef809f1ac81dc7c22faacda062adfab", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\nindex be9b41b3956..c19a17b31df 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\n", "chunk": "@@ -14624,66 +14623,55 @@ public class ApiMgtDAO {\n \n     /**\n      * Remove the Pending workflow Requests using ExternalWorkflowReference\n-     *\n-     * @param workflowExtRef\n-     * @return\n+     * @param workflowExtRef External Workflow Reference of Workflow Pending Request\n+     * @throws APIManagementException\n      */\n-\n     public void deleteWorkflowRequest(String workflowExtRef) throws APIManagementException {\n         Connection connection = null;\n         PreparedStatement prepStmt = null;\n-\n         String query = SQLConstants.DELETE_WORKFLOW_REQUEST_SQL;\n         try {\n             connection = APIMgtDBUtil.getConnection();\n             connection.setAutoCommit(false);\n-\n             prepStmt = connection.prepareStatement(query);\n             prepStmt.setString(1, workflowExtRef);\n             prepStmt.executeUpdate();\n             connection.commit();\n         }\n         catch (SQLException e) {\n-            handleException(\"Failed to delete the workflow request \", e);\n+            handleException(\"Failed to delete the workflow request. \", e);\n+        } finally {\n+            APIMgtDBUtil.closeAllConnections(prepStmt, connection, null);\n         }\n     }\n \n     /**\n      * Get the Pending workflow Request using ExternalWorkflowReference\n-     *\n      * @param externalWorkflowRef\n-     * @return\n+     * @return workflow pending request\n+     * @throws APIManagementException\n      */\n-\n     public Workflow getworkflowReferenceByExternalWorkflowReference(String externalWorkflowRef)throws APIManagementException {\n \n         Connection connection = null;\n         PreparedStatement prepStmt = null;\n         ResultSet rs = null;\n-\n-        Workflow workflow=new Workflow();\n-\n-        String sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_BY_EWR;\n-\n+        Workflow workflow = new Workflow();\n+        String sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_BY_EXTERNALWORKFLOWREF;\n         try {\n             connection = APIMgtDBUtil.getConnection();\n             prepStmt = connection.prepareStatement(sqlQuery);\n             prepStmt.setString(1, externalWorkflowRef);\n-\n             rs = prepStmt.executeQuery();\n \n             while (rs.next()) {\n-\n                 workflow.setWorkflowId(rs.getInt(\"WF_ID\"));\n                 workflow.setWorkflowReference(rs.getString(\"WF_REFERENCE\"));\n                 workflow.setWorkflowType(rs.getString(\"WF_TYPE\"));\n-\n                 String workflowstatus =rs.getString(\"WF_STATUS\");\n                 workflow.setStatus(org.wso2.carbon.apimgt.api.WorkflowStatus.valueOf(workflowstatus));\n-\n                 workflow.setCreatedTime(rs.getTimestamp(\"WF_CREATED_TIME\").toString());\n                 workflow.setUpdatedTime(rs.getTimestamp(\"WF_UPDATED_TIME\").toString());\n-\n                 workflow.setWorkflowStatusDesc(rs.getString(\"WF_STATUS_DESC\"));\n                 workflow.setTenantId(rs.getInt(\"TENANT_ID\"));\n                 workflow.setTenantDomain(rs.getString(\"TENANT_DOMAIN\"));\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYxOTE3MQ==", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r406619171", "body": "add missing docs", "bodyText": "add missing docs", "bodyHTML": "<p dir=\"auto\">add missing docs</p>", "author": "chamilaadhi", "createdAt": "2020-04-10T06:16:20Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "diffHunk": "@@ -14610,4 +14621,284 @@ public String getUserID(String userName) throws APIManagementException {\n         }\n         return list;\n     }\n+\n+    /**\n+     * Remove the Pending workflow Requests using ExternalWorkflowReference\n+     *\n+     * @param workflowExtRef\n+     * @return\n+     */\n+\n+    public void deleteWorkflowRequest(String workflowExtRef) throws APIManagementException {\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+\n+        String query = SQLConstants.DELETE_WORKFLOW_REQUEST_SQL;\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            connection.setAutoCommit(false);\n+\n+            prepStmt = connection.prepareStatement(query);\n+            prepStmt.setString(1, workflowExtRef);\n+            prepStmt.executeUpdate();\n+            connection.commit();\n+        }\n+        catch (SQLException e) {\n+            handleException(\"Failed to delete the workflow request \", e);\n+        }\n+    }\n+\n+    /**\n+     * Get the Pending workflow Request using ExternalWorkflowReference\n+     *\n+     * @param externalWorkflowRef\n+     * @return\n+     */", "originalCommit": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc5MTg0Nw==", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r410791847", "bodyText": "fixed with e00fe40", "author": "SahanHerath", "createdAt": "2020-04-19T02:00:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYxOTE3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "e00fe40f5ef809f1ac81dc7c22faacda062adfab", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\nindex be9b41b3956..c19a17b31df 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\n", "chunk": "@@ -14624,66 +14623,55 @@ public class ApiMgtDAO {\n \n     /**\n      * Remove the Pending workflow Requests using ExternalWorkflowReference\n-     *\n-     * @param workflowExtRef\n-     * @return\n+     * @param workflowExtRef External Workflow Reference of Workflow Pending Request\n+     * @throws APIManagementException\n      */\n-\n     public void deleteWorkflowRequest(String workflowExtRef) throws APIManagementException {\n         Connection connection = null;\n         PreparedStatement prepStmt = null;\n-\n         String query = SQLConstants.DELETE_WORKFLOW_REQUEST_SQL;\n         try {\n             connection = APIMgtDBUtil.getConnection();\n             connection.setAutoCommit(false);\n-\n             prepStmt = connection.prepareStatement(query);\n             prepStmt.setString(1, workflowExtRef);\n             prepStmt.executeUpdate();\n             connection.commit();\n         }\n         catch (SQLException e) {\n-            handleException(\"Failed to delete the workflow request \", e);\n+            handleException(\"Failed to delete the workflow request. \", e);\n+        } finally {\n+            APIMgtDBUtil.closeAllConnections(prepStmt, connection, null);\n         }\n     }\n \n     /**\n      * Get the Pending workflow Request using ExternalWorkflowReference\n-     *\n      * @param externalWorkflowRef\n-     * @return\n+     * @return workflow pending request\n+     * @throws APIManagementException\n      */\n-\n     public Workflow getworkflowReferenceByExternalWorkflowReference(String externalWorkflowRef)throws APIManagementException {\n \n         Connection connection = null;\n         PreparedStatement prepStmt = null;\n         ResultSet rs = null;\n-\n-        Workflow workflow=new Workflow();\n-\n-        String sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_BY_EWR;\n-\n+        Workflow workflow = new Workflow();\n+        String sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_BY_EXTERNALWORKFLOWREF;\n         try {\n             connection = APIMgtDBUtil.getConnection();\n             prepStmt = connection.prepareStatement(sqlQuery);\n             prepStmt.setString(1, externalWorkflowRef);\n-\n             rs = prepStmt.executeQuery();\n \n             while (rs.next()) {\n-\n                 workflow.setWorkflowId(rs.getInt(\"WF_ID\"));\n                 workflow.setWorkflowReference(rs.getString(\"WF_REFERENCE\"));\n                 workflow.setWorkflowType(rs.getString(\"WF_TYPE\"));\n-\n                 String workflowstatus =rs.getString(\"WF_STATUS\");\n                 workflow.setStatus(org.wso2.carbon.apimgt.api.WorkflowStatus.valueOf(workflowstatus));\n-\n                 workflow.setCreatedTime(rs.getTimestamp(\"WF_CREATED_TIME\").toString());\n                 workflow.setUpdatedTime(rs.getTimestamp(\"WF_UPDATED_TIME\").toString());\n-\n                 workflow.setWorkflowStatusDesc(rs.getString(\"WF_STATUS_DESC\"));\n                 workflow.setTenantId(rs.getInt(\"TENANT_ID\"));\n                 workflow.setTenantDomain(rs.getString(\"TENANT_DOMAIN\"));\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYxOTI2Mg==", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r406619262", "body": "format", "bodyText": "format", "bodyHTML": "<p dir=\"auto\">format</p>", "author": "chamilaadhi", "createdAt": "2020-04-10T06:16:49Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "diffHunk": "@@ -14610,4 +14621,284 @@ public String getUserID(String userName) throws APIManagementException {\n         }\n         return list;\n     }\n+\n+    /**\n+     * Remove the Pending workflow Requests using ExternalWorkflowReference\n+     *\n+     * @param workflowExtRef\n+     * @return\n+     */\n+\n+    public void deleteWorkflowRequest(String workflowExtRef) throws APIManagementException {\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+\n+        String query = SQLConstants.DELETE_WORKFLOW_REQUEST_SQL;\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            connection.setAutoCommit(false);\n+\n+            prepStmt = connection.prepareStatement(query);\n+            prepStmt.setString(1, workflowExtRef);\n+            prepStmt.executeUpdate();\n+            connection.commit();\n+        }\n+        catch (SQLException e) {\n+            handleException(\"Failed to delete the workflow request \", e);\n+        }\n+    }\n+\n+    /**\n+     * Get the Pending workflow Request using ExternalWorkflowReference\n+     *\n+     * @param externalWorkflowRef\n+     * @return\n+     */\n+\n+    public Workflow getworkflowReferenceByExternalWorkflowReference(String externalWorkflowRef)throws APIManagementException {", "originalCommit": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc5MTg4Nw==", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r410791887", "bodyText": "fixed with e00fe40", "author": "SahanHerath", "createdAt": "2020-04-19T02:00:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYxOTI2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "e00fe40f5ef809f1ac81dc7c22faacda062adfab", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\nindex be9b41b3956..c19a17b31df 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\n", "chunk": "@@ -14624,66 +14623,55 @@ public class ApiMgtDAO {\n \n     /**\n      * Remove the Pending workflow Requests using ExternalWorkflowReference\n-     *\n-     * @param workflowExtRef\n-     * @return\n+     * @param workflowExtRef External Workflow Reference of Workflow Pending Request\n+     * @throws APIManagementException\n      */\n-\n     public void deleteWorkflowRequest(String workflowExtRef) throws APIManagementException {\n         Connection connection = null;\n         PreparedStatement prepStmt = null;\n-\n         String query = SQLConstants.DELETE_WORKFLOW_REQUEST_SQL;\n         try {\n             connection = APIMgtDBUtil.getConnection();\n             connection.setAutoCommit(false);\n-\n             prepStmt = connection.prepareStatement(query);\n             prepStmt.setString(1, workflowExtRef);\n             prepStmt.executeUpdate();\n             connection.commit();\n         }\n         catch (SQLException e) {\n-            handleException(\"Failed to delete the workflow request \", e);\n+            handleException(\"Failed to delete the workflow request. \", e);\n+        } finally {\n+            APIMgtDBUtil.closeAllConnections(prepStmt, connection, null);\n         }\n     }\n \n     /**\n      * Get the Pending workflow Request using ExternalWorkflowReference\n-     *\n      * @param externalWorkflowRef\n-     * @return\n+     * @return workflow pending request\n+     * @throws APIManagementException\n      */\n-\n     public Workflow getworkflowReferenceByExternalWorkflowReference(String externalWorkflowRef)throws APIManagementException {\n \n         Connection connection = null;\n         PreparedStatement prepStmt = null;\n         ResultSet rs = null;\n-\n-        Workflow workflow=new Workflow();\n-\n-        String sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_BY_EWR;\n-\n+        Workflow workflow = new Workflow();\n+        String sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_BY_EXTERNALWORKFLOWREF;\n         try {\n             connection = APIMgtDBUtil.getConnection();\n             prepStmt = connection.prepareStatement(sqlQuery);\n             prepStmt.setString(1, externalWorkflowRef);\n-\n             rs = prepStmt.executeQuery();\n \n             while (rs.next()) {\n-\n                 workflow.setWorkflowId(rs.getInt(\"WF_ID\"));\n                 workflow.setWorkflowReference(rs.getString(\"WF_REFERENCE\"));\n                 workflow.setWorkflowType(rs.getString(\"WF_TYPE\"));\n-\n                 String workflowstatus =rs.getString(\"WF_STATUS\");\n                 workflow.setStatus(org.wso2.carbon.apimgt.api.WorkflowStatus.valueOf(workflowstatus));\n-\n                 workflow.setCreatedTime(rs.getTimestamp(\"WF_CREATED_TIME\").toString());\n                 workflow.setUpdatedTime(rs.getTimestamp(\"WF_UPDATED_TIME\").toString());\n-\n                 workflow.setWorkflowStatusDesc(rs.getString(\"WF_STATUS_DESC\"));\n                 workflow.setTenantId(rs.getInt(\"TENANT_ID\"));\n                 workflow.setTenantDomain(rs.getString(\"TENANT_DOMAIN\"));\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYxOTM5Nw==", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r406619397", "body": "format", "bodyText": "format", "bodyHTML": "<p dir=\"auto\">format</p>", "author": "chamilaadhi", "createdAt": "2020-04-10T06:17:28Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "diffHunk": "@@ -14610,4 +14621,284 @@ public String getUserID(String userName) throws APIManagementException {\n         }\n         return list;\n     }\n+\n+    /**\n+     * Remove the Pending workflow Requests using ExternalWorkflowReference\n+     *\n+     * @param workflowExtRef\n+     * @return\n+     */\n+\n+    public void deleteWorkflowRequest(String workflowExtRef) throws APIManagementException {\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+\n+        String query = SQLConstants.DELETE_WORKFLOW_REQUEST_SQL;\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            connection.setAutoCommit(false);\n+\n+            prepStmt = connection.prepareStatement(query);\n+            prepStmt.setString(1, workflowExtRef);\n+            prepStmt.executeUpdate();\n+            connection.commit();\n+        }\n+        catch (SQLException e) {\n+            handleException(\"Failed to delete the workflow request \", e);\n+        }\n+    }\n+\n+    /**\n+     * Get the Pending workflow Request using ExternalWorkflowReference\n+     *\n+     * @param externalWorkflowRef\n+     * @return\n+     */\n+\n+    public Workflow getworkflowReferenceByExternalWorkflowReference(String externalWorkflowRef)throws APIManagementException {\n+\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+        ResultSet rs = null;\n+\n+        Workflow workflow=new Workflow();", "originalCommit": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e00fe40f5ef809f1ac81dc7c22faacda062adfab", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\nindex be9b41b3956..c19a17b31df 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\n", "chunk": "@@ -14624,66 +14623,55 @@ public class ApiMgtDAO {\n \n     /**\n      * Remove the Pending workflow Requests using ExternalWorkflowReference\n-     *\n-     * @param workflowExtRef\n-     * @return\n+     * @param workflowExtRef External Workflow Reference of Workflow Pending Request\n+     * @throws APIManagementException\n      */\n-\n     public void deleteWorkflowRequest(String workflowExtRef) throws APIManagementException {\n         Connection connection = null;\n         PreparedStatement prepStmt = null;\n-\n         String query = SQLConstants.DELETE_WORKFLOW_REQUEST_SQL;\n         try {\n             connection = APIMgtDBUtil.getConnection();\n             connection.setAutoCommit(false);\n-\n             prepStmt = connection.prepareStatement(query);\n             prepStmt.setString(1, workflowExtRef);\n             prepStmt.executeUpdate();\n             connection.commit();\n         }\n         catch (SQLException e) {\n-            handleException(\"Failed to delete the workflow request \", e);\n+            handleException(\"Failed to delete the workflow request. \", e);\n+        } finally {\n+            APIMgtDBUtil.closeAllConnections(prepStmt, connection, null);\n         }\n     }\n \n     /**\n      * Get the Pending workflow Request using ExternalWorkflowReference\n-     *\n      * @param externalWorkflowRef\n-     * @return\n+     * @return workflow pending request\n+     * @throws APIManagementException\n      */\n-\n     public Workflow getworkflowReferenceByExternalWorkflowReference(String externalWorkflowRef)throws APIManagementException {\n \n         Connection connection = null;\n         PreparedStatement prepStmt = null;\n         ResultSet rs = null;\n-\n-        Workflow workflow=new Workflow();\n-\n-        String sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_BY_EWR;\n-\n+        Workflow workflow = new Workflow();\n+        String sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_BY_EXTERNALWORKFLOWREF;\n         try {\n             connection = APIMgtDBUtil.getConnection();\n             prepStmt = connection.prepareStatement(sqlQuery);\n             prepStmt.setString(1, externalWorkflowRef);\n-\n             rs = prepStmt.executeQuery();\n \n             while (rs.next()) {\n-\n                 workflow.setWorkflowId(rs.getInt(\"WF_ID\"));\n                 workflow.setWorkflowReference(rs.getString(\"WF_REFERENCE\"));\n                 workflow.setWorkflowType(rs.getString(\"WF_TYPE\"));\n-\n                 String workflowstatus =rs.getString(\"WF_STATUS\");\n                 workflow.setStatus(org.wso2.carbon.apimgt.api.WorkflowStatus.valueOf(workflowstatus));\n-\n                 workflow.setCreatedTime(rs.getTimestamp(\"WF_CREATED_TIME\").toString());\n                 workflow.setUpdatedTime(rs.getTimestamp(\"WF_UPDATED_TIME\").toString());\n-\n                 workflow.setWorkflowStatusDesc(rs.getString(\"WF_STATUS_DESC\"));\n                 workflow.setTenantId(rs.getInt(\"TENANT_ID\"));\n                 workflow.setTenantDomain(rs.getString(\"TENANT_DOMAIN\"));\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYxOTYwMw==", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r406619603", "body": "EWR?? please use a readable parameters", "bodyText": "EWR?? please use a readable parameters", "bodyHTML": "<p dir=\"auto\">EWR?? please use a readable parameters</p>", "author": "chamilaadhi", "createdAt": "2020-04-10T06:18:18Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "diffHunk": "@@ -14610,4 +14621,284 @@ public String getUserID(String userName) throws APIManagementException {\n         }\n         return list;\n     }\n+\n+    /**\n+     * Remove the Pending workflow Requests using ExternalWorkflowReference\n+     *\n+     * @param workflowExtRef\n+     * @return\n+     */\n+\n+    public void deleteWorkflowRequest(String workflowExtRef) throws APIManagementException {\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+\n+        String query = SQLConstants.DELETE_WORKFLOW_REQUEST_SQL;\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            connection.setAutoCommit(false);\n+\n+            prepStmt = connection.prepareStatement(query);\n+            prepStmt.setString(1, workflowExtRef);\n+            prepStmt.executeUpdate();\n+            connection.commit();\n+        }\n+        catch (SQLException e) {\n+            handleException(\"Failed to delete the workflow request \", e);\n+        }\n+    }\n+\n+    /**\n+     * Get the Pending workflow Request using ExternalWorkflowReference\n+     *\n+     * @param externalWorkflowRef\n+     * @return\n+     */\n+\n+    public Workflow getworkflowReferenceByExternalWorkflowReference(String externalWorkflowRef)throws APIManagementException {\n+\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+        ResultSet rs = null;\n+\n+        Workflow workflow=new Workflow();\n+\n+        String sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_BY_EWR;", "originalCommit": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e00fe40f5ef809f1ac81dc7c22faacda062adfab", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\nindex be9b41b3956..c19a17b31df 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\n", "chunk": "@@ -14624,66 +14623,55 @@ public class ApiMgtDAO {\n \n     /**\n      * Remove the Pending workflow Requests using ExternalWorkflowReference\n-     *\n-     * @param workflowExtRef\n-     * @return\n+     * @param workflowExtRef External Workflow Reference of Workflow Pending Request\n+     * @throws APIManagementException\n      */\n-\n     public void deleteWorkflowRequest(String workflowExtRef) throws APIManagementException {\n         Connection connection = null;\n         PreparedStatement prepStmt = null;\n-\n         String query = SQLConstants.DELETE_WORKFLOW_REQUEST_SQL;\n         try {\n             connection = APIMgtDBUtil.getConnection();\n             connection.setAutoCommit(false);\n-\n             prepStmt = connection.prepareStatement(query);\n             prepStmt.setString(1, workflowExtRef);\n             prepStmt.executeUpdate();\n             connection.commit();\n         }\n         catch (SQLException e) {\n-            handleException(\"Failed to delete the workflow request \", e);\n+            handleException(\"Failed to delete the workflow request. \", e);\n+        } finally {\n+            APIMgtDBUtil.closeAllConnections(prepStmt, connection, null);\n         }\n     }\n \n     /**\n      * Get the Pending workflow Request using ExternalWorkflowReference\n-     *\n      * @param externalWorkflowRef\n-     * @return\n+     * @return workflow pending request\n+     * @throws APIManagementException\n      */\n-\n     public Workflow getworkflowReferenceByExternalWorkflowReference(String externalWorkflowRef)throws APIManagementException {\n \n         Connection connection = null;\n         PreparedStatement prepStmt = null;\n         ResultSet rs = null;\n-\n-        Workflow workflow=new Workflow();\n-\n-        String sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_BY_EWR;\n-\n+        Workflow workflow = new Workflow();\n+        String sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_BY_EXTERNALWORKFLOWREF;\n         try {\n             connection = APIMgtDBUtil.getConnection();\n             prepStmt = connection.prepareStatement(sqlQuery);\n             prepStmt.setString(1, externalWorkflowRef);\n-\n             rs = prepStmt.executeQuery();\n \n             while (rs.next()) {\n-\n                 workflow.setWorkflowId(rs.getInt(\"WF_ID\"));\n                 workflow.setWorkflowReference(rs.getString(\"WF_REFERENCE\"));\n                 workflow.setWorkflowType(rs.getString(\"WF_TYPE\"));\n-\n                 String workflowstatus =rs.getString(\"WF_STATUS\");\n                 workflow.setStatus(org.wso2.carbon.apimgt.api.WorkflowStatus.valueOf(workflowstatus));\n-\n                 workflow.setCreatedTime(rs.getTimestamp(\"WF_CREATED_TIME\").toString());\n                 workflow.setUpdatedTime(rs.getTimestamp(\"WF_UPDATED_TIME\").toString());\n-\n                 workflow.setWorkflowStatusDesc(rs.getString(\"WF_STATUS_DESC\"));\n                 workflow.setTenantId(rs.getInt(\"TENANT_ID\"));\n                 workflow.setTenantDomain(rs.getString(\"TENANT_DOMAIN\"));\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYxOTgzOQ==", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r406619839", "body": "remove unnecessary gaps between each statement", "bodyText": "remove unnecessary gaps between each statement", "bodyHTML": "<p dir=\"auto\">remove unnecessary gaps between each statement</p>", "author": "chamilaadhi", "createdAt": "2020-04-10T06:19:02Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "diffHunk": "@@ -14610,4 +14621,284 @@ public String getUserID(String userName) throws APIManagementException {\n         }\n         return list;\n     }\n+\n+    /**\n+     * Remove the Pending workflow Requests using ExternalWorkflowReference\n+     *\n+     * @param workflowExtRef\n+     * @return\n+     */\n+\n+    public void deleteWorkflowRequest(String workflowExtRef) throws APIManagementException {\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+\n+        String query = SQLConstants.DELETE_WORKFLOW_REQUEST_SQL;\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            connection.setAutoCommit(false);\n+\n+            prepStmt = connection.prepareStatement(query);\n+            prepStmt.setString(1, workflowExtRef);\n+            prepStmt.executeUpdate();\n+            connection.commit();\n+        }\n+        catch (SQLException e) {\n+            handleException(\"Failed to delete the workflow request \", e);\n+        }\n+    }\n+\n+    /**\n+     * Get the Pending workflow Request using ExternalWorkflowReference\n+     *\n+     * @param externalWorkflowRef\n+     * @return\n+     */\n+\n+    public Workflow getworkflowReferenceByExternalWorkflowReference(String externalWorkflowRef)throws APIManagementException {\n+\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+        ResultSet rs = null;\n+\n+        Workflow workflow=new Workflow();\n+\n+        String sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_BY_EWR;\n+\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            prepStmt = connection.prepareStatement(sqlQuery);\n+            prepStmt.setString(1, externalWorkflowRef);\n+\n+            rs = prepStmt.executeQuery();\n+\n+            while (rs.next()) {\n+\n+                workflow.setWorkflowId(rs.getInt(\"WF_ID\"));\n+                workflow.setWorkflowReference(rs.getString(\"WF_REFERENCE\"));\n+                workflow.setWorkflowType(rs.getString(\"WF_TYPE\"));\n+\n+                String workflowstatus =rs.getString(\"WF_STATUS\");\n+                workflow.setStatus(org.wso2.carbon.apimgt.api.WorkflowStatus.valueOf(workflowstatus));\n+\n+                workflow.setCreatedTime(rs.getTimestamp(\"WF_CREATED_TIME\").toString());\n+                workflow.setUpdatedTime(rs.getTimestamp(\"WF_UPDATED_TIME\").toString());\n+\n+                workflow.setWorkflowStatusDesc(rs.getString(\"WF_STATUS_DESC\"));\n+                workflow.setTenantId(rs.getInt(\"TENANT_ID\"));\n+                workflow.setTenantDomain(rs.getString(\"TENANT_DOMAIN\"));\n+                workflow.setExternalWorkflowReference(rs.getString(\"WF_EXTERNAL_REFERENCE\"));\n+                Blob metadatablob = rs.getBlob(\"WF_METADATA\");\n+", "originalCommit": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc5MjAwMQ==", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r410792001", "bodyText": "fixed with e00fe40", "author": "SahanHerath", "createdAt": "2020-04-19T02:01:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYxOTgzOQ=="}], "type": "inlineReview", "revised_code": {"commit": "e00fe40f5ef809f1ac81dc7c22faacda062adfab", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\nindex be9b41b3956..c19a17b31df 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\n", "chunk": "@@ -14624,66 +14623,55 @@ public class ApiMgtDAO {\n \n     /**\n      * Remove the Pending workflow Requests using ExternalWorkflowReference\n-     *\n-     * @param workflowExtRef\n-     * @return\n+     * @param workflowExtRef External Workflow Reference of Workflow Pending Request\n+     * @throws APIManagementException\n      */\n-\n     public void deleteWorkflowRequest(String workflowExtRef) throws APIManagementException {\n         Connection connection = null;\n         PreparedStatement prepStmt = null;\n-\n         String query = SQLConstants.DELETE_WORKFLOW_REQUEST_SQL;\n         try {\n             connection = APIMgtDBUtil.getConnection();\n             connection.setAutoCommit(false);\n-\n             prepStmt = connection.prepareStatement(query);\n             prepStmt.setString(1, workflowExtRef);\n             prepStmt.executeUpdate();\n             connection.commit();\n         }\n         catch (SQLException e) {\n-            handleException(\"Failed to delete the workflow request \", e);\n+            handleException(\"Failed to delete the workflow request. \", e);\n+        } finally {\n+            APIMgtDBUtil.closeAllConnections(prepStmt, connection, null);\n         }\n     }\n \n     /**\n      * Get the Pending workflow Request using ExternalWorkflowReference\n-     *\n      * @param externalWorkflowRef\n-     * @return\n+     * @return workflow pending request\n+     * @throws APIManagementException\n      */\n-\n     public Workflow getworkflowReferenceByExternalWorkflowReference(String externalWorkflowRef)throws APIManagementException {\n \n         Connection connection = null;\n         PreparedStatement prepStmt = null;\n         ResultSet rs = null;\n-\n-        Workflow workflow=new Workflow();\n-\n-        String sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_BY_EWR;\n-\n+        Workflow workflow = new Workflow();\n+        String sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_BY_EXTERNALWORKFLOWREF;\n         try {\n             connection = APIMgtDBUtil.getConnection();\n             prepStmt = connection.prepareStatement(sqlQuery);\n             prepStmt.setString(1, externalWorkflowRef);\n-\n             rs = prepStmt.executeQuery();\n \n             while (rs.next()) {\n-\n                 workflow.setWorkflowId(rs.getInt(\"WF_ID\"));\n                 workflow.setWorkflowReference(rs.getString(\"WF_REFERENCE\"));\n                 workflow.setWorkflowType(rs.getString(\"WF_TYPE\"));\n-\n                 String workflowstatus =rs.getString(\"WF_STATUS\");\n                 workflow.setStatus(org.wso2.carbon.apimgt.api.WorkflowStatus.valueOf(workflowstatus));\n-\n                 workflow.setCreatedTime(rs.getTimestamp(\"WF_CREATED_TIME\").toString());\n                 workflow.setUpdatedTime(rs.getTimestamp(\"WF_UPDATED_TIME\").toString());\n-\n                 workflow.setWorkflowStatusDesc(rs.getString(\"WF_STATUS_DESC\"));\n                 workflow.setTenantId(rs.getInt(\"TENANT_ID\"));\n                 workflow.setTenantDomain(rs.getString(\"TENANT_DOMAIN\"));\n", "next_change": null}, {"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\nindex be9b41b3956..c19a17b31df 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\n", "chunk": "@@ -14691,21 +14679,20 @@ public class ApiMgtDAO {\n                 Blob metadatablob = rs.getBlob(\"WF_METADATA\");\n \n                 byte[] metadataByte;\n-\n                 if(metadatablob != null) {\n                     metadataByte = metadatablob.getBytes(1L, (int) metadatablob.length());\n                     InputStream targetStream = new ByteArrayInputStream(metadataByte);\n                     String metadata = APIMgtDBUtil.getStringFromInputStream(targetStream);\n-                    Gson g = new Gson();\n-                    JSONObject json = g.fromJson(metadata, JSONObject.class);\n-                    workflow.setMetadata(json);\n+                    Gson metadataGson = new Gson();\n+                    JSONObject metadataJson = metadataGson.fromJson(metadata, JSONObject.class);\n+                    workflow.setMetadata(metadataJson);\n                 } else {\n-                    JSONObject json=new JSONObject();\n-                    workflow.setMetadata(json);\n+                    JSONObject metadataJson = new JSONObject();\n+                    workflow.setMetadata(metadataJson);\n                 }\n             }\n         } catch (SQLException e) {\n-            handleException(\"Error when retriving the workflow details\" , e);\n+            handleException(\"Error when retriving the workflow details. \" , e);\n         } finally {\n             APIMgtDBUtil.closeAllConnections(prepStmt, connection, rs);\n         }\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYxOTk0OQ==", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r406619949", "body": "format", "bodyText": "format", "bodyHTML": "<p dir=\"auto\">format</p>", "author": "chamilaadhi", "createdAt": "2020-04-10T06:19:33Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "diffHunk": "@@ -14610,4 +14621,284 @@ public String getUserID(String userName) throws APIManagementException {\n         }\n         return list;\n     }\n+\n+    /**\n+     * Remove the Pending workflow Requests using ExternalWorkflowReference\n+     *\n+     * @param workflowExtRef\n+     * @return\n+     */\n+\n+    public void deleteWorkflowRequest(String workflowExtRef) throws APIManagementException {\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+\n+        String query = SQLConstants.DELETE_WORKFLOW_REQUEST_SQL;\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            connection.setAutoCommit(false);\n+\n+            prepStmt = connection.prepareStatement(query);\n+            prepStmt.setString(1, workflowExtRef);\n+            prepStmt.executeUpdate();\n+            connection.commit();\n+        }\n+        catch (SQLException e) {\n+            handleException(\"Failed to delete the workflow request \", e);\n+        }\n+    }\n+\n+    /**\n+     * Get the Pending workflow Request using ExternalWorkflowReference\n+     *\n+     * @param externalWorkflowRef\n+     * @return\n+     */\n+\n+    public Workflow getworkflowReferenceByExternalWorkflowReference(String externalWorkflowRef)throws APIManagementException {\n+\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+        ResultSet rs = null;\n+\n+        Workflow workflow=new Workflow();\n+\n+        String sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_BY_EWR;\n+\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            prepStmt = connection.prepareStatement(sqlQuery);\n+            prepStmt.setString(1, externalWorkflowRef);\n+\n+            rs = prepStmt.executeQuery();\n+\n+            while (rs.next()) {\n+\n+                workflow.setWorkflowId(rs.getInt(\"WF_ID\"));\n+                workflow.setWorkflowReference(rs.getString(\"WF_REFERENCE\"));\n+                workflow.setWorkflowType(rs.getString(\"WF_TYPE\"));\n+\n+                String workflowstatus =rs.getString(\"WF_STATUS\");", "originalCommit": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc5MjA4Mg==", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r410792082", "bodyText": "fixed with e00fe40", "author": "SahanHerath", "createdAt": "2020-04-19T02:01:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYxOTk0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "e00fe40f5ef809f1ac81dc7c22faacda062adfab", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\nindex be9b41b3956..c19a17b31df 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\n", "chunk": "@@ -14624,66 +14623,55 @@ public class ApiMgtDAO {\n \n     /**\n      * Remove the Pending workflow Requests using ExternalWorkflowReference\n-     *\n-     * @param workflowExtRef\n-     * @return\n+     * @param workflowExtRef External Workflow Reference of Workflow Pending Request\n+     * @throws APIManagementException\n      */\n-\n     public void deleteWorkflowRequest(String workflowExtRef) throws APIManagementException {\n         Connection connection = null;\n         PreparedStatement prepStmt = null;\n-\n         String query = SQLConstants.DELETE_WORKFLOW_REQUEST_SQL;\n         try {\n             connection = APIMgtDBUtil.getConnection();\n             connection.setAutoCommit(false);\n-\n             prepStmt = connection.prepareStatement(query);\n             prepStmt.setString(1, workflowExtRef);\n             prepStmt.executeUpdate();\n             connection.commit();\n         }\n         catch (SQLException e) {\n-            handleException(\"Failed to delete the workflow request \", e);\n+            handleException(\"Failed to delete the workflow request. \", e);\n+        } finally {\n+            APIMgtDBUtil.closeAllConnections(prepStmt, connection, null);\n         }\n     }\n \n     /**\n      * Get the Pending workflow Request using ExternalWorkflowReference\n-     *\n      * @param externalWorkflowRef\n-     * @return\n+     * @return workflow pending request\n+     * @throws APIManagementException\n      */\n-\n     public Workflow getworkflowReferenceByExternalWorkflowReference(String externalWorkflowRef)throws APIManagementException {\n \n         Connection connection = null;\n         PreparedStatement prepStmt = null;\n         ResultSet rs = null;\n-\n-        Workflow workflow=new Workflow();\n-\n-        String sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_BY_EWR;\n-\n+        Workflow workflow = new Workflow();\n+        String sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_BY_EXTERNALWORKFLOWREF;\n         try {\n             connection = APIMgtDBUtil.getConnection();\n             prepStmt = connection.prepareStatement(sqlQuery);\n             prepStmt.setString(1, externalWorkflowRef);\n-\n             rs = prepStmt.executeQuery();\n \n             while (rs.next()) {\n-\n                 workflow.setWorkflowId(rs.getInt(\"WF_ID\"));\n                 workflow.setWorkflowReference(rs.getString(\"WF_REFERENCE\"));\n                 workflow.setWorkflowType(rs.getString(\"WF_TYPE\"));\n-\n                 String workflowstatus =rs.getString(\"WF_STATUS\");\n                 workflow.setStatus(org.wso2.carbon.apimgt.api.WorkflowStatus.valueOf(workflowstatus));\n-\n                 workflow.setCreatedTime(rs.getTimestamp(\"WF_CREATED_TIME\").toString());\n                 workflow.setUpdatedTime(rs.getTimestamp(\"WF_UPDATED_TIME\").toString());\n-\n                 workflow.setWorkflowStatusDesc(rs.getString(\"WF_STATUS_DESC\"));\n                 workflow.setTenantId(rs.getInt(\"TENANT_ID\"));\n                 workflow.setTenantDomain(rs.getString(\"TENANT_DOMAIN\"));\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyMDAzNg==", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r406620036", "body": "format", "bodyText": "format", "bodyHTML": "<p dir=\"auto\">format</p>", "author": "chamilaadhi", "createdAt": "2020-04-10T06:19:57Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "diffHunk": "@@ -14610,4 +14621,284 @@ public String getUserID(String userName) throws APIManagementException {\n         }\n         return list;\n     }\n+\n+    /**\n+     * Remove the Pending workflow Requests using ExternalWorkflowReference\n+     *\n+     * @param workflowExtRef\n+     * @return\n+     */\n+\n+    public void deleteWorkflowRequest(String workflowExtRef) throws APIManagementException {\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+\n+        String query = SQLConstants.DELETE_WORKFLOW_REQUEST_SQL;\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            connection.setAutoCommit(false);\n+\n+            prepStmt = connection.prepareStatement(query);\n+            prepStmt.setString(1, workflowExtRef);\n+            prepStmt.executeUpdate();\n+            connection.commit();\n+        }\n+        catch (SQLException e) {\n+            handleException(\"Failed to delete the workflow request \", e);\n+        }\n+    }\n+\n+    /**\n+     * Get the Pending workflow Request using ExternalWorkflowReference\n+     *\n+     * @param externalWorkflowRef\n+     * @return\n+     */\n+\n+    public Workflow getworkflowReferenceByExternalWorkflowReference(String externalWorkflowRef)throws APIManagementException {\n+\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+        ResultSet rs = null;\n+\n+        Workflow workflow=new Workflow();\n+\n+        String sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_BY_EWR;\n+\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            prepStmt = connection.prepareStatement(sqlQuery);\n+            prepStmt.setString(1, externalWorkflowRef);\n+\n+            rs = prepStmt.executeQuery();\n+\n+            while (rs.next()) {\n+\n+                workflow.setWorkflowId(rs.getInt(\"WF_ID\"));\n+                workflow.setWorkflowReference(rs.getString(\"WF_REFERENCE\"));\n+                workflow.setWorkflowType(rs.getString(\"WF_TYPE\"));\n+\n+                String workflowstatus =rs.getString(\"WF_STATUS\");\n+                workflow.setStatus(org.wso2.carbon.apimgt.api.WorkflowStatus.valueOf(workflowstatus));\n+\n+                workflow.setCreatedTime(rs.getTimestamp(\"WF_CREATED_TIME\").toString());\n+                workflow.setUpdatedTime(rs.getTimestamp(\"WF_UPDATED_TIME\").toString());\n+\n+                workflow.setWorkflowStatusDesc(rs.getString(\"WF_STATUS_DESC\"));\n+                workflow.setTenantId(rs.getInt(\"TENANT_ID\"));\n+                workflow.setTenantDomain(rs.getString(\"TENANT_DOMAIN\"));\n+                workflow.setExternalWorkflowReference(rs.getString(\"WF_EXTERNAL_REFERENCE\"));\n+                Blob metadatablob = rs.getBlob(\"WF_METADATA\");\n+\n+                byte[] metadataByte;\n+\n+                if(metadatablob != null) {\n+                    metadataByte = metadatablob.getBytes(1L, (int) metadatablob.length());\n+                    InputStream targetStream = new ByteArrayInputStream(metadataByte);\n+                    String metadata = APIMgtDBUtil.getStringFromInputStream(targetStream);\n+                    Gson g = new Gson();\n+                    JSONObject json = g.fromJson(metadata, JSONObject.class);\n+                    workflow.setMetadata(json);\n+                } else {\n+                    JSONObject json=new JSONObject();", "originalCommit": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e00fe40f5ef809f1ac81dc7c22faacda062adfab", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\nindex be9b41b3956..c19a17b31df 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\n", "chunk": "@@ -14691,21 +14679,20 @@ public class ApiMgtDAO {\n                 Blob metadatablob = rs.getBlob(\"WF_METADATA\");\n \n                 byte[] metadataByte;\n-\n                 if(metadatablob != null) {\n                     metadataByte = metadatablob.getBytes(1L, (int) metadatablob.length());\n                     InputStream targetStream = new ByteArrayInputStream(metadataByte);\n                     String metadata = APIMgtDBUtil.getStringFromInputStream(targetStream);\n-                    Gson g = new Gson();\n-                    JSONObject json = g.fromJson(metadata, JSONObject.class);\n-                    workflow.setMetadata(json);\n+                    Gson metadataGson = new Gson();\n+                    JSONObject metadataJson = metadataGson.fromJson(metadata, JSONObject.class);\n+                    workflow.setMetadata(metadataJson);\n                 } else {\n-                    JSONObject json=new JSONObject();\n-                    workflow.setMetadata(json);\n+                    JSONObject metadataJson = new JSONObject();\n+                    workflow.setMetadata(metadataJson);\n                 }\n             }\n         } catch (SQLException e) {\n-            handleException(\"Error when retriving the workflow details\" , e);\n+            handleException(\"Error when retriving the workflow details. \" , e);\n         } finally {\n             APIMgtDBUtil.closeAllConnections(prepStmt, connection, rs);\n         }\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyMDA4Nw==", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r406620087", "body": "format", "bodyText": "format", "bodyHTML": "<p dir=\"auto\">format</p>", "author": "chamilaadhi", "createdAt": "2020-04-10T06:20:12Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "diffHunk": "@@ -14610,4 +14621,284 @@ public String getUserID(String userName) throws APIManagementException {\n         }\n         return list;\n     }\n+\n+    /**\n+     * Remove the Pending workflow Requests using ExternalWorkflowReference\n+     *\n+     * @param workflowExtRef\n+     * @return\n+     */\n+\n+    public void deleteWorkflowRequest(String workflowExtRef) throws APIManagementException {\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+\n+        String query = SQLConstants.DELETE_WORKFLOW_REQUEST_SQL;\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            connection.setAutoCommit(false);\n+\n+            prepStmt = connection.prepareStatement(query);\n+            prepStmt.setString(1, workflowExtRef);\n+            prepStmt.executeUpdate();\n+            connection.commit();\n+        }\n+        catch (SQLException e) {\n+            handleException(\"Failed to delete the workflow request \", e);\n+        }\n+    }\n+\n+    /**\n+     * Get the Pending workflow Request using ExternalWorkflowReference\n+     *\n+     * @param externalWorkflowRef\n+     * @return\n+     */\n+\n+    public Workflow getworkflowReferenceByExternalWorkflowReference(String externalWorkflowRef)throws APIManagementException {\n+\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+        ResultSet rs = null;\n+\n+        Workflow workflow=new Workflow();\n+\n+        String sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_BY_EWR;\n+\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            prepStmt = connection.prepareStatement(sqlQuery);\n+            prepStmt.setString(1, externalWorkflowRef);\n+\n+            rs = prepStmt.executeQuery();\n+\n+            while (rs.next()) {\n+\n+                workflow.setWorkflowId(rs.getInt(\"WF_ID\"));\n+                workflow.setWorkflowReference(rs.getString(\"WF_REFERENCE\"));\n+                workflow.setWorkflowType(rs.getString(\"WF_TYPE\"));\n+\n+                String workflowstatus =rs.getString(\"WF_STATUS\");\n+                workflow.setStatus(org.wso2.carbon.apimgt.api.WorkflowStatus.valueOf(workflowstatus));\n+\n+                workflow.setCreatedTime(rs.getTimestamp(\"WF_CREATED_TIME\").toString());\n+                workflow.setUpdatedTime(rs.getTimestamp(\"WF_UPDATED_TIME\").toString());\n+\n+                workflow.setWorkflowStatusDesc(rs.getString(\"WF_STATUS_DESC\"));\n+                workflow.setTenantId(rs.getInt(\"TENANT_ID\"));\n+                workflow.setTenantDomain(rs.getString(\"TENANT_DOMAIN\"));\n+                workflow.setExternalWorkflowReference(rs.getString(\"WF_EXTERNAL_REFERENCE\"));\n+                Blob metadatablob = rs.getBlob(\"WF_METADATA\");\n+\n+                byte[] metadataByte;\n+\n+                if(metadatablob != null) {", "originalCommit": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc5MjEyOQ==", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r410792129", "bodyText": "fixed with e00fe40", "author": "SahanHerath", "createdAt": "2020-04-19T02:02:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyMDA4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "e00fe40f5ef809f1ac81dc7c22faacda062adfab", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\nindex be9b41b3956..c19a17b31df 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\n", "chunk": "@@ -14691,21 +14679,20 @@ public class ApiMgtDAO {\n                 Blob metadatablob = rs.getBlob(\"WF_METADATA\");\n \n                 byte[] metadataByte;\n-\n                 if(metadatablob != null) {\n                     metadataByte = metadatablob.getBytes(1L, (int) metadatablob.length());\n                     InputStream targetStream = new ByteArrayInputStream(metadataByte);\n                     String metadata = APIMgtDBUtil.getStringFromInputStream(targetStream);\n-                    Gson g = new Gson();\n-                    JSONObject json = g.fromJson(metadata, JSONObject.class);\n-                    workflow.setMetadata(json);\n+                    Gson metadataGson = new Gson();\n+                    JSONObject metadataJson = metadataGson.fromJson(metadata, JSONObject.class);\n+                    workflow.setMetadata(metadataJson);\n                 } else {\n-                    JSONObject json=new JSONObject();\n-                    workflow.setMetadata(json);\n+                    JSONObject metadataJson = new JSONObject();\n+                    workflow.setMetadata(metadataJson);\n                 }\n             }\n         } catch (SQLException e) {\n-            handleException(\"Error when retriving the workflow details\" , e);\n+            handleException(\"Error when retriving the workflow details. \" , e);\n         } finally {\n             APIMgtDBUtil.closeAllConnections(prepStmt, connection, rs);\n         }\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyMDI5MA==", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r406620290", "body": "don't use g as a variable name", "bodyText": "don't use g as a variable name", "bodyHTML": "<p dir=\"auto\">don't use g as a variable name</p>", "author": "chamilaadhi", "createdAt": "2020-04-10T06:21:00Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "diffHunk": "@@ -14610,4 +14621,284 @@ public String getUserID(String userName) throws APIManagementException {\n         }\n         return list;\n     }\n+\n+    /**\n+     * Remove the Pending workflow Requests using ExternalWorkflowReference\n+     *\n+     * @param workflowExtRef\n+     * @return\n+     */\n+\n+    public void deleteWorkflowRequest(String workflowExtRef) throws APIManagementException {\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+\n+        String query = SQLConstants.DELETE_WORKFLOW_REQUEST_SQL;\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            connection.setAutoCommit(false);\n+\n+            prepStmt = connection.prepareStatement(query);\n+            prepStmt.setString(1, workflowExtRef);\n+            prepStmt.executeUpdate();\n+            connection.commit();\n+        }\n+        catch (SQLException e) {\n+            handleException(\"Failed to delete the workflow request \", e);\n+        }\n+    }\n+\n+    /**\n+     * Get the Pending workflow Request using ExternalWorkflowReference\n+     *\n+     * @param externalWorkflowRef\n+     * @return\n+     */\n+\n+    public Workflow getworkflowReferenceByExternalWorkflowReference(String externalWorkflowRef)throws APIManagementException {\n+\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+        ResultSet rs = null;\n+\n+        Workflow workflow=new Workflow();\n+\n+        String sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_BY_EWR;\n+\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            prepStmt = connection.prepareStatement(sqlQuery);\n+            prepStmt.setString(1, externalWorkflowRef);\n+\n+            rs = prepStmt.executeQuery();\n+\n+            while (rs.next()) {\n+\n+                workflow.setWorkflowId(rs.getInt(\"WF_ID\"));\n+                workflow.setWorkflowReference(rs.getString(\"WF_REFERENCE\"));\n+                workflow.setWorkflowType(rs.getString(\"WF_TYPE\"));\n+\n+                String workflowstatus =rs.getString(\"WF_STATUS\");\n+                workflow.setStatus(org.wso2.carbon.apimgt.api.WorkflowStatus.valueOf(workflowstatus));\n+\n+                workflow.setCreatedTime(rs.getTimestamp(\"WF_CREATED_TIME\").toString());\n+                workflow.setUpdatedTime(rs.getTimestamp(\"WF_UPDATED_TIME\").toString());\n+\n+                workflow.setWorkflowStatusDesc(rs.getString(\"WF_STATUS_DESC\"));\n+                workflow.setTenantId(rs.getInt(\"TENANT_ID\"));\n+                workflow.setTenantDomain(rs.getString(\"TENANT_DOMAIN\"));\n+                workflow.setExternalWorkflowReference(rs.getString(\"WF_EXTERNAL_REFERENCE\"));\n+                Blob metadatablob = rs.getBlob(\"WF_METADATA\");\n+\n+                byte[] metadataByte;\n+\n+                if(metadatablob != null) {\n+                    metadataByte = metadatablob.getBytes(1L, (int) metadatablob.length());\n+                    InputStream targetStream = new ByteArrayInputStream(metadataByte);\n+                    String metadata = APIMgtDBUtil.getStringFromInputStream(targetStream);\n+                    Gson g = new Gson();", "originalCommit": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e00fe40f5ef809f1ac81dc7c22faacda062adfab", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\nindex be9b41b3956..c19a17b31df 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\n", "chunk": "@@ -14691,21 +14679,20 @@ public class ApiMgtDAO {\n                 Blob metadatablob = rs.getBlob(\"WF_METADATA\");\n \n                 byte[] metadataByte;\n-\n                 if(metadatablob != null) {\n                     metadataByte = metadatablob.getBytes(1L, (int) metadatablob.length());\n                     InputStream targetStream = new ByteArrayInputStream(metadataByte);\n                     String metadata = APIMgtDBUtil.getStringFromInputStream(targetStream);\n-                    Gson g = new Gson();\n-                    JSONObject json = g.fromJson(metadata, JSONObject.class);\n-                    workflow.setMetadata(json);\n+                    Gson metadataGson = new Gson();\n+                    JSONObject metadataJson = metadataGson.fromJson(metadata, JSONObject.class);\n+                    workflow.setMetadata(metadataJson);\n                 } else {\n-                    JSONObject json=new JSONObject();\n-                    workflow.setMetadata(json);\n+                    JSONObject metadataJson = new JSONObject();\n+                    workflow.setMetadata(metadataJson);\n                 }\n             }\n         } catch (SQLException e) {\n-            handleException(\"Error when retriving the workflow details\" , e);\n+            handleException(\"Error when retriving the workflow details. \" , e);\n         } finally {\n             APIMgtDBUtil.closeAllConnections(prepStmt, connection, rs);\n         }\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyMDUyMA==", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r406620520", "body": "add a space at the end of the message", "bodyText": "add a space at the end of the message", "bodyHTML": "<p dir=\"auto\">add a space at the end of the message</p>", "author": "chamilaadhi", "createdAt": "2020-04-10T06:21:57Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "diffHunk": "@@ -14610,4 +14621,284 @@ public String getUserID(String userName) throws APIManagementException {\n         }\n         return list;\n     }\n+\n+    /**\n+     * Remove the Pending workflow Requests using ExternalWorkflowReference\n+     *\n+     * @param workflowExtRef\n+     * @return\n+     */\n+\n+    public void deleteWorkflowRequest(String workflowExtRef) throws APIManagementException {\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+\n+        String query = SQLConstants.DELETE_WORKFLOW_REQUEST_SQL;\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            connection.setAutoCommit(false);\n+\n+            prepStmt = connection.prepareStatement(query);\n+            prepStmt.setString(1, workflowExtRef);\n+            prepStmt.executeUpdate();\n+            connection.commit();\n+        }\n+        catch (SQLException e) {\n+            handleException(\"Failed to delete the workflow request \", e);\n+        }\n+    }\n+\n+    /**\n+     * Get the Pending workflow Request using ExternalWorkflowReference\n+     *\n+     * @param externalWorkflowRef\n+     * @return\n+     */\n+\n+    public Workflow getworkflowReferenceByExternalWorkflowReference(String externalWorkflowRef)throws APIManagementException {\n+\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+        ResultSet rs = null;\n+\n+        Workflow workflow=new Workflow();\n+\n+        String sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_BY_EWR;\n+\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            prepStmt = connection.prepareStatement(sqlQuery);\n+            prepStmt.setString(1, externalWorkflowRef);\n+\n+            rs = prepStmt.executeQuery();\n+\n+            while (rs.next()) {\n+\n+                workflow.setWorkflowId(rs.getInt(\"WF_ID\"));\n+                workflow.setWorkflowReference(rs.getString(\"WF_REFERENCE\"));\n+                workflow.setWorkflowType(rs.getString(\"WF_TYPE\"));\n+\n+                String workflowstatus =rs.getString(\"WF_STATUS\");\n+                workflow.setStatus(org.wso2.carbon.apimgt.api.WorkflowStatus.valueOf(workflowstatus));\n+\n+                workflow.setCreatedTime(rs.getTimestamp(\"WF_CREATED_TIME\").toString());\n+                workflow.setUpdatedTime(rs.getTimestamp(\"WF_UPDATED_TIME\").toString());\n+\n+                workflow.setWorkflowStatusDesc(rs.getString(\"WF_STATUS_DESC\"));\n+                workflow.setTenantId(rs.getInt(\"TENANT_ID\"));\n+                workflow.setTenantDomain(rs.getString(\"TENANT_DOMAIN\"));\n+                workflow.setExternalWorkflowReference(rs.getString(\"WF_EXTERNAL_REFERENCE\"));\n+                Blob metadatablob = rs.getBlob(\"WF_METADATA\");\n+\n+                byte[] metadataByte;\n+\n+                if(metadatablob != null) {\n+                    metadataByte = metadatablob.getBytes(1L, (int) metadatablob.length());\n+                    InputStream targetStream = new ByteArrayInputStream(metadataByte);\n+                    String metadata = APIMgtDBUtil.getStringFromInputStream(targetStream);\n+                    Gson g = new Gson();\n+                    JSONObject json = g.fromJson(metadata, JSONObject.class);\n+                    workflow.setMetadata(json);\n+                } else {\n+                    JSONObject json=new JSONObject();\n+                    workflow.setMetadata(json);\n+                }\n+            }\n+        } catch (SQLException e) {\n+            handleException(\"Error when retriving the workflow details\" , e);", "originalCommit": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e00fe40f5ef809f1ac81dc7c22faacda062adfab", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\nindex be9b41b3956..c19a17b31df 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\n", "chunk": "@@ -14691,21 +14679,20 @@ public class ApiMgtDAO {\n                 Blob metadatablob = rs.getBlob(\"WF_METADATA\");\n \n                 byte[] metadataByte;\n-\n                 if(metadatablob != null) {\n                     metadataByte = metadatablob.getBytes(1L, (int) metadatablob.length());\n                     InputStream targetStream = new ByteArrayInputStream(metadataByte);\n                     String metadata = APIMgtDBUtil.getStringFromInputStream(targetStream);\n-                    Gson g = new Gson();\n-                    JSONObject json = g.fromJson(metadata, JSONObject.class);\n-                    workflow.setMetadata(json);\n+                    Gson metadataGson = new Gson();\n+                    JSONObject metadataJson = metadataGson.fromJson(metadata, JSONObject.class);\n+                    workflow.setMetadata(metadataJson);\n                 } else {\n-                    JSONObject json=new JSONObject();\n-                    workflow.setMetadata(json);\n+                    JSONObject metadataJson = new JSONObject();\n+                    workflow.setMetadata(metadataJson);\n                 }\n             }\n         } catch (SQLException e) {\n-            handleException(\"Error when retriving the workflow details\" , e);\n+            handleException(\"Error when retriving the workflow details. \" , e);\n         } finally {\n             APIMgtDBUtil.closeAllConnections(prepStmt, connection, rs);\n         }\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyMDYyMw==", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r406620623", "body": "describe these", "bodyText": "describe these", "bodyHTML": "<p dir=\"auto\">describe these</p>", "author": "chamilaadhi", "createdAt": "2020-04-10T06:22:20Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "diffHunk": "@@ -14610,4 +14621,284 @@ public String getUserID(String userName) throws APIManagementException {\n         }\n         return list;\n     }\n+\n+    /**\n+     * Remove the Pending workflow Requests using ExternalWorkflowReference\n+     *\n+     * @param workflowExtRef\n+     * @return\n+     */\n+\n+    public void deleteWorkflowRequest(String workflowExtRef) throws APIManagementException {\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+\n+        String query = SQLConstants.DELETE_WORKFLOW_REQUEST_SQL;\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            connection.setAutoCommit(false);\n+\n+            prepStmt = connection.prepareStatement(query);\n+            prepStmt.setString(1, workflowExtRef);\n+            prepStmt.executeUpdate();\n+            connection.commit();\n+        }\n+        catch (SQLException e) {\n+            handleException(\"Failed to delete the workflow request \", e);\n+        }\n+    }\n+\n+    /**\n+     * Get the Pending workflow Request using ExternalWorkflowReference\n+     *\n+     * @param externalWorkflowRef\n+     * @return\n+     */\n+\n+    public Workflow getworkflowReferenceByExternalWorkflowReference(String externalWorkflowRef)throws APIManagementException {\n+\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+        ResultSet rs = null;\n+\n+        Workflow workflow=new Workflow();\n+\n+        String sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_BY_EWR;\n+\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            prepStmt = connection.prepareStatement(sqlQuery);\n+            prepStmt.setString(1, externalWorkflowRef);\n+\n+            rs = prepStmt.executeQuery();\n+\n+            while (rs.next()) {\n+\n+                workflow.setWorkflowId(rs.getInt(\"WF_ID\"));\n+                workflow.setWorkflowReference(rs.getString(\"WF_REFERENCE\"));\n+                workflow.setWorkflowType(rs.getString(\"WF_TYPE\"));\n+\n+                String workflowstatus =rs.getString(\"WF_STATUS\");\n+                workflow.setStatus(org.wso2.carbon.apimgt.api.WorkflowStatus.valueOf(workflowstatus));\n+\n+                workflow.setCreatedTime(rs.getTimestamp(\"WF_CREATED_TIME\").toString());\n+                workflow.setUpdatedTime(rs.getTimestamp(\"WF_UPDATED_TIME\").toString());\n+\n+                workflow.setWorkflowStatusDesc(rs.getString(\"WF_STATUS_DESC\"));\n+                workflow.setTenantId(rs.getInt(\"TENANT_ID\"));\n+                workflow.setTenantDomain(rs.getString(\"TENANT_DOMAIN\"));\n+                workflow.setExternalWorkflowReference(rs.getString(\"WF_EXTERNAL_REFERENCE\"));\n+                Blob metadatablob = rs.getBlob(\"WF_METADATA\");\n+\n+                byte[] metadataByte;\n+\n+                if(metadatablob != null) {\n+                    metadataByte = metadatablob.getBytes(1L, (int) metadatablob.length());\n+                    InputStream targetStream = new ByteArrayInputStream(metadataByte);\n+                    String metadata = APIMgtDBUtil.getStringFromInputStream(targetStream);\n+                    Gson g = new Gson();\n+                    JSONObject json = g.fromJson(metadata, JSONObject.class);\n+                    workflow.setMetadata(json);\n+                } else {\n+                    JSONObject json=new JSONObject();\n+                    workflow.setMetadata(json);\n+                }\n+            }\n+        } catch (SQLException e) {\n+            handleException(\"Error when retriving the workflow details\" , e);\n+        } finally {\n+            APIMgtDBUtil.closeAllConnections(prepStmt, connection, rs);\n+        }\n+        return workflow;\n+    }\n+\n+    /**\n+     * Get the Pending workflow Requests using WorkflowType for a particular tenant\n+     *\n+     * @param workflowType\n+     * @param status\n+     * @param tenantDomain\n+     * @return", "originalCommit": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e00fe40f5ef809f1ac81dc7c22faacda062adfab", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\nindex be9b41b3956..c19a17b31df 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\n", "chunk": "@@ -14714,29 +14701,24 @@ public class ApiMgtDAO {\n \n     /**\n      * Get the Pending workflow Requests using WorkflowType for a particular tenant\n-     *\n-     * @param workflowType\n-     * @param status\n-     * @param tenantDomain\n-     * @return\n+     * @param workflowType Type of the workflow pending request\n+     * @param status workflow status of workflow pending request\n+     * @param tenantDomain tenantDomain of the user\n+     * @return List of workflow pending request\n+     * @throws APIManagementException\n      */\n-\n-    public Workflow[] getworkflows(String workflowType ,String status ,String tenantDomain) throws APIManagementException {\n+    public Workflow[] getworkflows(String workflowType, String status, String tenantDomain) throws APIManagementException {\n \n         Connection connection = null;\n         PreparedStatement prepStmt = null;\n         ResultSet rs = null;\n-\n         Workflow[] workflows = null;\n-\n         String sqlQuery;\n-\n-        if (workflowType != null){\n+        if (workflowType != null) {\n             sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_BY_WORKFLOW_TYPE;\n         } else {\n             sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS;\n         }\n-\n         try {\n             connection = APIMgtDBUtil.getConnection();\n             prepStmt = connection.prepareStatement(sqlQuery);\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyMDg5Mg==", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r406620892", "body": "format this whole method.  remove any unnecessary spaces", "bodyText": "format this whole method.  remove any unnecessary spaces", "bodyHTML": "<p dir=\"auto\">format this whole method.  remove any unnecessary spaces</p>", "author": "chamilaadhi", "createdAt": "2020-04-10T06:23:19Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "diffHunk": "@@ -14610,4 +14621,284 @@ public String getUserID(String userName) throws APIManagementException {\n         }\n         return list;\n     }\n+\n+    /**\n+     * Remove the Pending workflow Requests using ExternalWorkflowReference\n+     *\n+     * @param workflowExtRef\n+     * @return\n+     */\n+\n+    public void deleteWorkflowRequest(String workflowExtRef) throws APIManagementException {\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+\n+        String query = SQLConstants.DELETE_WORKFLOW_REQUEST_SQL;\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            connection.setAutoCommit(false);\n+\n+            prepStmt = connection.prepareStatement(query);\n+            prepStmt.setString(1, workflowExtRef);\n+            prepStmt.executeUpdate();\n+            connection.commit();\n+        }\n+        catch (SQLException e) {\n+            handleException(\"Failed to delete the workflow request \", e);\n+        }\n+    }\n+\n+    /**\n+     * Get the Pending workflow Request using ExternalWorkflowReference\n+     *\n+     * @param externalWorkflowRef\n+     * @return\n+     */\n+\n+    public Workflow getworkflowReferenceByExternalWorkflowReference(String externalWorkflowRef)throws APIManagementException {\n+\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+        ResultSet rs = null;\n+\n+        Workflow workflow=new Workflow();\n+\n+        String sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_BY_EWR;\n+\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            prepStmt = connection.prepareStatement(sqlQuery);\n+            prepStmt.setString(1, externalWorkflowRef);\n+\n+            rs = prepStmt.executeQuery();\n+\n+            while (rs.next()) {\n+\n+                workflow.setWorkflowId(rs.getInt(\"WF_ID\"));\n+                workflow.setWorkflowReference(rs.getString(\"WF_REFERENCE\"));\n+                workflow.setWorkflowType(rs.getString(\"WF_TYPE\"));\n+\n+                String workflowstatus =rs.getString(\"WF_STATUS\");\n+                workflow.setStatus(org.wso2.carbon.apimgt.api.WorkflowStatus.valueOf(workflowstatus));\n+\n+                workflow.setCreatedTime(rs.getTimestamp(\"WF_CREATED_TIME\").toString());\n+                workflow.setUpdatedTime(rs.getTimestamp(\"WF_UPDATED_TIME\").toString());\n+\n+                workflow.setWorkflowStatusDesc(rs.getString(\"WF_STATUS_DESC\"));\n+                workflow.setTenantId(rs.getInt(\"TENANT_ID\"));\n+                workflow.setTenantDomain(rs.getString(\"TENANT_DOMAIN\"));\n+                workflow.setExternalWorkflowReference(rs.getString(\"WF_EXTERNAL_REFERENCE\"));\n+                Blob metadatablob = rs.getBlob(\"WF_METADATA\");\n+\n+                byte[] metadataByte;\n+\n+                if(metadatablob != null) {\n+                    metadataByte = metadatablob.getBytes(1L, (int) metadatablob.length());\n+                    InputStream targetStream = new ByteArrayInputStream(metadataByte);\n+                    String metadata = APIMgtDBUtil.getStringFromInputStream(targetStream);\n+                    Gson g = new Gson();\n+                    JSONObject json = g.fromJson(metadata, JSONObject.class);\n+                    workflow.setMetadata(json);\n+                } else {\n+                    JSONObject json=new JSONObject();\n+                    workflow.setMetadata(json);\n+                }\n+            }\n+        } catch (SQLException e) {\n+            handleException(\"Error when retriving the workflow details\" , e);\n+        } finally {\n+            APIMgtDBUtil.closeAllConnections(prepStmt, connection, rs);\n+        }\n+        return workflow;\n+    }\n+\n+    /**\n+     * Get the Pending workflow Requests using WorkflowType for a particular tenant\n+     *\n+     * @param workflowType\n+     * @param status\n+     * @param tenantDomain\n+     * @return\n+     */\n+\n+    public Workflow[] getworkflows(String workflowType ,String status ,String tenantDomain) throws APIManagementException {\n+\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+        ResultSet rs = null;\n+\n+        Workflow[] workflows = null;\n+\n+        String sqlQuery;\n+\n+        if (workflowType != null){\n+            sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_BY_WORKFLOW_TYPE;\n+        } else {\n+            sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS;\n+        }\n+\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            prepStmt = connection.prepareStatement(sqlQuery);\n+\n+            if (workflowType != null){\n+                prepStmt.setString(1, workflowType);\n+                prepStmt.setString( 2, status);\n+                prepStmt.setString( 3, tenantDomain);\n+\n+            } else {\n+                prepStmt.setString( 1, status);\n+                prepStmt.setString( 2, tenantDomain);\n+            }\n+", "originalCommit": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e00fe40f5ef809f1ac81dc7c22faacda062adfab", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\nindex be9b41b3956..c19a17b31df 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\n", "chunk": "@@ -14745,12 +14727,10 @@ public class ApiMgtDAO {\n                 prepStmt.setString(1, workflowType);\n                 prepStmt.setString( 2, status);\n                 prepStmt.setString( 3, tenantDomain);\n-\n             } else {\n                 prepStmt.setString( 1, status);\n                 prepStmt.setString( 2, tenantDomain);\n             }\n-\n             rs = prepStmt.executeQuery();\n \n             ArrayList<Workflow> workflowsList = new ArrayList<Workflow>();\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyMTI4Nw==", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r406621287", "body": "format whole method and remove unnecessary spaces", "bodyText": "format whole method and remove unnecessary spaces", "bodyHTML": "<p dir=\"auto\">format whole method and remove unnecessary spaces</p>", "author": "chamilaadhi", "createdAt": "2020-04-10T06:24:41Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "diffHunk": "@@ -14610,4 +14621,284 @@ public String getUserID(String userName) throws APIManagementException {\n         }\n         return list;\n     }\n+\n+    /**\n+     * Remove the Pending workflow Requests using ExternalWorkflowReference\n+     *\n+     * @param workflowExtRef\n+     * @return\n+     */\n+\n+    public void deleteWorkflowRequest(String workflowExtRef) throws APIManagementException {\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+\n+        String query = SQLConstants.DELETE_WORKFLOW_REQUEST_SQL;\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            connection.setAutoCommit(false);\n+\n+            prepStmt = connection.prepareStatement(query);\n+            prepStmt.setString(1, workflowExtRef);\n+            prepStmt.executeUpdate();\n+            connection.commit();\n+        }\n+        catch (SQLException e) {\n+            handleException(\"Failed to delete the workflow request \", e);\n+        }\n+    }\n+\n+    /**\n+     * Get the Pending workflow Request using ExternalWorkflowReference\n+     *\n+     * @param externalWorkflowRef\n+     * @return\n+     */\n+\n+    public Workflow getworkflowReferenceByExternalWorkflowReference(String externalWorkflowRef)throws APIManagementException {\n+\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+        ResultSet rs = null;\n+\n+        Workflow workflow=new Workflow();\n+\n+        String sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_BY_EWR;\n+\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            prepStmt = connection.prepareStatement(sqlQuery);\n+            prepStmt.setString(1, externalWorkflowRef);\n+\n+            rs = prepStmt.executeQuery();\n+\n+            while (rs.next()) {\n+\n+                workflow.setWorkflowId(rs.getInt(\"WF_ID\"));\n+                workflow.setWorkflowReference(rs.getString(\"WF_REFERENCE\"));\n+                workflow.setWorkflowType(rs.getString(\"WF_TYPE\"));\n+\n+                String workflowstatus =rs.getString(\"WF_STATUS\");\n+                workflow.setStatus(org.wso2.carbon.apimgt.api.WorkflowStatus.valueOf(workflowstatus));\n+\n+                workflow.setCreatedTime(rs.getTimestamp(\"WF_CREATED_TIME\").toString());\n+                workflow.setUpdatedTime(rs.getTimestamp(\"WF_UPDATED_TIME\").toString());\n+\n+                workflow.setWorkflowStatusDesc(rs.getString(\"WF_STATUS_DESC\"));\n+                workflow.setTenantId(rs.getInt(\"TENANT_ID\"));\n+                workflow.setTenantDomain(rs.getString(\"TENANT_DOMAIN\"));\n+                workflow.setExternalWorkflowReference(rs.getString(\"WF_EXTERNAL_REFERENCE\"));\n+                Blob metadatablob = rs.getBlob(\"WF_METADATA\");\n+\n+                byte[] metadataByte;\n+\n+                if(metadatablob != null) {\n+                    metadataByte = metadatablob.getBytes(1L, (int) metadatablob.length());\n+                    InputStream targetStream = new ByteArrayInputStream(metadataByte);\n+                    String metadata = APIMgtDBUtil.getStringFromInputStream(targetStream);\n+                    Gson g = new Gson();\n+                    JSONObject json = g.fromJson(metadata, JSONObject.class);\n+                    workflow.setMetadata(json);\n+                } else {\n+                    JSONObject json=new JSONObject();\n+                    workflow.setMetadata(json);\n+                }\n+            }\n+        } catch (SQLException e) {\n+            handleException(\"Error when retriving the workflow details\" , e);\n+        } finally {\n+            APIMgtDBUtil.closeAllConnections(prepStmt, connection, rs);\n+        }\n+        return workflow;\n+    }\n+\n+    /**\n+     * Get the Pending workflow Requests using WorkflowType for a particular tenant\n+     *\n+     * @param workflowType\n+     * @param status\n+     * @param tenantDomain\n+     * @return\n+     */\n+\n+    public Workflow[] getworkflows(String workflowType ,String status ,String tenantDomain) throws APIManagementException {\n+\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+        ResultSet rs = null;\n+\n+        Workflow[] workflows = null;\n+\n+        String sqlQuery;\n+\n+        if (workflowType != null){\n+            sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_BY_WORKFLOW_TYPE;\n+        } else {\n+            sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS;\n+        }\n+\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            prepStmt = connection.prepareStatement(sqlQuery);\n+\n+            if (workflowType != null){\n+                prepStmt.setString(1, workflowType);\n+                prepStmt.setString( 2, status);\n+                prepStmt.setString( 3, tenantDomain);\n+\n+            } else {\n+                prepStmt.setString( 1, status);\n+                prepStmt.setString( 2, tenantDomain);\n+            }\n+\n+            rs = prepStmt.executeQuery();\n+\n+            ArrayList<Workflow> workflowsList = new ArrayList<Workflow>();\n+            Workflow workflow;\n+            while (rs.next()) {\n+                workflow = new Workflow();\n+                workflow.setWorkflowId(rs.getInt(\"WF_ID\"));\n+                workflow.setWorkflowReference(rs.getString(\"WF_REFERENCE\"));\n+                workflow.setWorkflowType(rs.getString(\"WF_TYPE\"));\n+\n+                String workflowstatus =rs.getString(\"WF_STATUS\");\n+                workflow.setStatus(org.wso2.carbon.apimgt.api.WorkflowStatus.valueOf(workflowstatus));\n+\n+                workflow.setCreatedTime(rs.getTimestamp(\"WF_CREATED_TIME\").toString());\n+                workflow.setUpdatedTime(rs.getTimestamp(\"WF_UPDATED_TIME\").toString());\n+\n+                workflow.setWorkflowStatusDesc(rs.getString(\"WF_STATUS_DESC\"));\n+                workflow.setTenantId(rs.getInt(\"TENANT_ID\"));\n+                workflow.setTenantDomain(rs.getString(\"TENANT_DOMAIN\"));\n+                workflow.setExternalWorkflowReference(rs.getString(\"WF_EXTERNAL_REFERENCE\"));\n+                workflow.setWorkflowDescription(rs.getString(\"WF_STATUS_DESC\"));\n+                Blob metadataBlob = rs.getBlob(\"WF_METADATA\");\n+                Blob propertiesBlob = rs.getBlob(\"WF_PROPERTIES\");\n+\n+                byte[] metadataByte;\n+\n+                if(metadataBlob != null) {\n+                    metadataByte = metadataBlob.getBytes(1L, (int) metadataBlob.length());\n+                    InputStream targetStream = new ByteArrayInputStream(metadataByte);\n+                    String metadata = APIMgtDBUtil.getStringFromInputStream(targetStream);\n+                    Gson g = new Gson();\n+\n+                    JSONObject json = g.fromJson(metadata, JSONObject.class);\n+                    workflow.setMetadata(json);\n+                } else {\n+                    JSONObject json = new JSONObject();\n+                    workflow.setMetadata(json);\n+                }\n+\n+                byte[] propertiesByte;\n+\n+                if(propertiesBlob != null) {\n+                    propertiesByte = propertiesBlob.getBytes(1L, (int) propertiesBlob.length());\n+                    InputStream propertiesTargetStream = new ByteArrayInputStream(propertiesByte);\n+                    String properties = APIMgtDBUtil.getStringFromInputStream(propertiesTargetStream);\n+                    Gson g = new Gson();\n+\n+                    JSONObject json = g.fromJson(properties, JSONObject.class);\n+                    workflow.setProperties(json);\n+                } else {\n+                    JSONObject json = new JSONObject();\n+                    workflow.setProperties(json);\n+                }\n+\n+                workflowsList.add(workflow);\n+            }\n+            workflows = workflowsList.toArray(new Workflow[workflowsList.size()]);\n+        } catch (SQLException e) {\n+            handleException(\"Error when retrieve all the workflow details\" , e);\n+        } finally {\n+            APIMgtDBUtil.closeAllConnections(prepStmt, connection, rs);\n+        }\n+        return workflows;\n+    }\n+\n+    /**\n+     * Get the Pending workflow Request using ExternalWorkflowReference for a particular tenant\n+     *\n+     * @param externelWorkflowRef\n+     * @param status\n+     * @param tenantDomain\n+     * @return\n+     */\n+\n+    public Workflow getworkflowReferenceByExternalWorkflowReferenceID(String externelWorkflowRef, String status ,\n+                                                                      String tenantDomain) throws APIManagementException {\n+\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+        ResultSet rs = null;\n+\n+        Workflow workflow=new Workflow();\n+\n+        String sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_BY_EXTERNAL_WORKFLOW_REFERENCE;\n+\n+        try {", "originalCommit": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc5MjE3Mg==", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r410792172", "bodyText": "fixed with e00fe40", "author": "SahanHerath", "createdAt": "2020-04-19T02:02:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyMTI4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "e00fe40f5ef809f1ac81dc7c22faacda062adfab", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\nindex be9b41b3956..c19a17b31df 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\n", "chunk": "@@ -14818,45 +14790,35 @@ public class ApiMgtDAO {\n \n     /**\n      * Get the Pending workflow Request using ExternalWorkflowReference for a particular tenant\n-     *\n-     * @param externelWorkflowRef\n-     * @param status\n-     * @param tenantDomain\n-     * @return\n+     * @param externelWorkflowRef of pending workflow request\n+     * @param status workflow status of workflow pending process\n+     * @param tenantDomain tenant domain of user\n+     * @return workflow pending request\n      */\n-\n     public Workflow getworkflowReferenceByExternalWorkflowReferenceID(String externelWorkflowRef, String status ,\n                                                                       String tenantDomain) throws APIManagementException {\n \n         Connection connection = null;\n         PreparedStatement prepStmt = null;\n         ResultSet rs = null;\n-\n-        Workflow workflow=new Workflow();\n-\n+        Workflow workflow = new Workflow();\n         String sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_BY_EXTERNAL_WORKFLOW_REFERENCE;\n-\n         try {\n             connection = APIMgtDBUtil.getConnection();\n             prepStmt = connection.prepareStatement(sqlQuery);\n             prepStmt.setString(1, externelWorkflowRef);\n             prepStmt.setString(2, status);\n             prepStmt.setString(3, tenantDomain);\n-\n             rs = prepStmt.executeQuery();\n \n             while (rs.next()) {\n-\n                 workflow.setWorkflowId(rs.getInt(\"WF_ID\"));\n                 workflow.setWorkflowReference(rs.getString(\"WF_REFERENCE\"));\n                 workflow.setWorkflowType(rs.getString(\"WF_TYPE\"));\n-\n-                String workflowstatus =rs.getString(\"WF_STATUS\");\n+                String workflowstatus = rs.getString(\"WF_STATUS\");\n                 workflow.setStatus(org.wso2.carbon.apimgt.api.WorkflowStatus.valueOf(workflowstatus));\n-\n                 workflow.setCreatedTime(rs.getTimestamp(\"WF_CREATED_TIME\").toString());\n                 workflow.setUpdatedTime(rs.getTimestamp(\"WF_UPDATED_TIME\").toString());\n-\n                 workflow.setWorkflowDescription(rs.getString(\"WF_STATUS_DESC\"));\n                 workflow.setTenantId(rs.getInt(\"TENANT_ID\"));\n                 workflow.setTenantDomain(rs.getString(\"TENANT_DOMAIN\"));\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyMTU2Mw==", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r406621563", "body": "put a meaningful names to the variables. don't use g, json, json1", "bodyText": "put a meaningful names to the variables. don't use g, json, json1", "bodyHTML": "<p dir=\"auto\">put a meaningful names to the variables. don't use g, json, json1</p>", "author": "chamilaadhi", "createdAt": "2020-04-10T06:25:51Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "diffHunk": "@@ -14610,4 +14621,284 @@ public String getUserID(String userName) throws APIManagementException {\n         }\n         return list;\n     }\n+\n+    /**\n+     * Remove the Pending workflow Requests using ExternalWorkflowReference\n+     *\n+     * @param workflowExtRef\n+     * @return\n+     */\n+\n+    public void deleteWorkflowRequest(String workflowExtRef) throws APIManagementException {\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+\n+        String query = SQLConstants.DELETE_WORKFLOW_REQUEST_SQL;\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            connection.setAutoCommit(false);\n+\n+            prepStmt = connection.prepareStatement(query);\n+            prepStmt.setString(1, workflowExtRef);\n+            prepStmt.executeUpdate();\n+            connection.commit();\n+        }\n+        catch (SQLException e) {\n+            handleException(\"Failed to delete the workflow request \", e);\n+        }\n+    }\n+\n+    /**\n+     * Get the Pending workflow Request using ExternalWorkflowReference\n+     *\n+     * @param externalWorkflowRef\n+     * @return\n+     */\n+\n+    public Workflow getworkflowReferenceByExternalWorkflowReference(String externalWorkflowRef)throws APIManagementException {\n+\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+        ResultSet rs = null;\n+\n+        Workflow workflow=new Workflow();\n+\n+        String sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_BY_EWR;\n+\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            prepStmt = connection.prepareStatement(sqlQuery);\n+            prepStmt.setString(1, externalWorkflowRef);\n+\n+            rs = prepStmt.executeQuery();\n+\n+            while (rs.next()) {\n+\n+                workflow.setWorkflowId(rs.getInt(\"WF_ID\"));\n+                workflow.setWorkflowReference(rs.getString(\"WF_REFERENCE\"));\n+                workflow.setWorkflowType(rs.getString(\"WF_TYPE\"));\n+\n+                String workflowstatus =rs.getString(\"WF_STATUS\");\n+                workflow.setStatus(org.wso2.carbon.apimgt.api.WorkflowStatus.valueOf(workflowstatus));\n+\n+                workflow.setCreatedTime(rs.getTimestamp(\"WF_CREATED_TIME\").toString());\n+                workflow.setUpdatedTime(rs.getTimestamp(\"WF_UPDATED_TIME\").toString());\n+\n+                workflow.setWorkflowStatusDesc(rs.getString(\"WF_STATUS_DESC\"));\n+                workflow.setTenantId(rs.getInt(\"TENANT_ID\"));\n+                workflow.setTenantDomain(rs.getString(\"TENANT_DOMAIN\"));\n+                workflow.setExternalWorkflowReference(rs.getString(\"WF_EXTERNAL_REFERENCE\"));\n+                Blob metadatablob = rs.getBlob(\"WF_METADATA\");\n+\n+                byte[] metadataByte;\n+\n+                if(metadatablob != null) {\n+                    metadataByte = metadatablob.getBytes(1L, (int) metadatablob.length());\n+                    InputStream targetStream = new ByteArrayInputStream(metadataByte);\n+                    String metadata = APIMgtDBUtil.getStringFromInputStream(targetStream);\n+                    Gson g = new Gson();\n+                    JSONObject json = g.fromJson(metadata, JSONObject.class);\n+                    workflow.setMetadata(json);\n+                } else {\n+                    JSONObject json=new JSONObject();\n+                    workflow.setMetadata(json);\n+                }\n+            }\n+        } catch (SQLException e) {\n+            handleException(\"Error when retriving the workflow details\" , e);\n+        } finally {\n+            APIMgtDBUtil.closeAllConnections(prepStmt, connection, rs);\n+        }\n+        return workflow;\n+    }\n+\n+    /**\n+     * Get the Pending workflow Requests using WorkflowType for a particular tenant\n+     *\n+     * @param workflowType\n+     * @param status\n+     * @param tenantDomain\n+     * @return\n+     */\n+\n+    public Workflow[] getworkflows(String workflowType ,String status ,String tenantDomain) throws APIManagementException {\n+\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+        ResultSet rs = null;\n+\n+        Workflow[] workflows = null;\n+\n+        String sqlQuery;\n+\n+        if (workflowType != null){\n+            sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_BY_WORKFLOW_TYPE;\n+        } else {\n+            sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS;\n+        }\n+\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            prepStmt = connection.prepareStatement(sqlQuery);\n+\n+            if (workflowType != null){\n+                prepStmt.setString(1, workflowType);\n+                prepStmt.setString( 2, status);\n+                prepStmt.setString( 3, tenantDomain);\n+\n+            } else {\n+                prepStmt.setString( 1, status);\n+                prepStmt.setString( 2, tenantDomain);\n+            }\n+\n+            rs = prepStmt.executeQuery();\n+\n+            ArrayList<Workflow> workflowsList = new ArrayList<Workflow>();\n+            Workflow workflow;\n+            while (rs.next()) {\n+                workflow = new Workflow();\n+                workflow.setWorkflowId(rs.getInt(\"WF_ID\"));\n+                workflow.setWorkflowReference(rs.getString(\"WF_REFERENCE\"));\n+                workflow.setWorkflowType(rs.getString(\"WF_TYPE\"));\n+\n+                String workflowstatus =rs.getString(\"WF_STATUS\");\n+                workflow.setStatus(org.wso2.carbon.apimgt.api.WorkflowStatus.valueOf(workflowstatus));\n+\n+                workflow.setCreatedTime(rs.getTimestamp(\"WF_CREATED_TIME\").toString());\n+                workflow.setUpdatedTime(rs.getTimestamp(\"WF_UPDATED_TIME\").toString());\n+\n+                workflow.setWorkflowStatusDesc(rs.getString(\"WF_STATUS_DESC\"));\n+                workflow.setTenantId(rs.getInt(\"TENANT_ID\"));\n+                workflow.setTenantDomain(rs.getString(\"TENANT_DOMAIN\"));\n+                workflow.setExternalWorkflowReference(rs.getString(\"WF_EXTERNAL_REFERENCE\"));\n+                workflow.setWorkflowDescription(rs.getString(\"WF_STATUS_DESC\"));\n+                Blob metadataBlob = rs.getBlob(\"WF_METADATA\");\n+                Blob propertiesBlob = rs.getBlob(\"WF_PROPERTIES\");\n+\n+                byte[] metadataByte;\n+\n+                if(metadataBlob != null) {\n+                    metadataByte = metadataBlob.getBytes(1L, (int) metadataBlob.length());\n+                    InputStream targetStream = new ByteArrayInputStream(metadataByte);\n+                    String metadata = APIMgtDBUtil.getStringFromInputStream(targetStream);\n+                    Gson g = new Gson();\n+\n+                    JSONObject json = g.fromJson(metadata, JSONObject.class);\n+                    workflow.setMetadata(json);\n+                } else {\n+                    JSONObject json = new JSONObject();\n+                    workflow.setMetadata(json);\n+                }\n+\n+                byte[] propertiesByte;\n+\n+                if(propertiesBlob != null) {\n+                    propertiesByte = propertiesBlob.getBytes(1L, (int) propertiesBlob.length());\n+                    InputStream propertiesTargetStream = new ByteArrayInputStream(propertiesByte);\n+                    String properties = APIMgtDBUtil.getStringFromInputStream(propertiesTargetStream);\n+                    Gson g = new Gson();\n+\n+                    JSONObject json = g.fromJson(properties, JSONObject.class);\n+                    workflow.setProperties(json);\n+                } else {\n+                    JSONObject json = new JSONObject();\n+                    workflow.setProperties(json);\n+                }\n+\n+                workflowsList.add(workflow);\n+            }\n+            workflows = workflowsList.toArray(new Workflow[workflowsList.size()]);\n+        } catch (SQLException e) {\n+            handleException(\"Error when retrieve all the workflow details\" , e);\n+        } finally {\n+            APIMgtDBUtil.closeAllConnections(prepStmt, connection, rs);\n+        }\n+        return workflows;\n+    }\n+\n+    /**\n+     * Get the Pending workflow Request using ExternalWorkflowReference for a particular tenant\n+     *\n+     * @param externelWorkflowRef\n+     * @param status\n+     * @param tenantDomain\n+     * @return\n+     */\n+\n+    public Workflow getworkflowReferenceByExternalWorkflowReferenceID(String externelWorkflowRef, String status ,\n+                                                                      String tenantDomain) throws APIManagementException {\n+\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+        ResultSet rs = null;\n+\n+        Workflow workflow=new Workflow();\n+\n+        String sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_BY_EXTERNAL_WORKFLOW_REFERENCE;\n+\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            prepStmt = connection.prepareStatement(sqlQuery);\n+            prepStmt.setString(1, externelWorkflowRef);\n+            prepStmt.setString(2, status);\n+            prepStmt.setString(3, tenantDomain);\n+\n+            rs = prepStmt.executeQuery();\n+\n+            while (rs.next()) {\n+\n+                workflow.setWorkflowId(rs.getInt(\"WF_ID\"));\n+                workflow.setWorkflowReference(rs.getString(\"WF_REFERENCE\"));\n+                workflow.setWorkflowType(rs.getString(\"WF_TYPE\"));\n+\n+                String workflowstatus =rs.getString(\"WF_STATUS\");\n+                workflow.setStatus(org.wso2.carbon.apimgt.api.WorkflowStatus.valueOf(workflowstatus));\n+\n+                workflow.setCreatedTime(rs.getTimestamp(\"WF_CREATED_TIME\").toString());\n+                workflow.setUpdatedTime(rs.getTimestamp(\"WF_UPDATED_TIME\").toString());\n+\n+                workflow.setWorkflowDescription(rs.getString(\"WF_STATUS_DESC\"));\n+                workflow.setTenantId(rs.getInt(\"TENANT_ID\"));\n+                workflow.setTenantDomain(rs.getString(\"TENANT_DOMAIN\"));\n+                workflow.setExternalWorkflowReference(rs.getString(\"WF_EXTERNAL_REFERENCE\"));\n+                Blob metadataBlob = rs.getBlob(\"WF_METADATA\");\n+                Blob propertiesBlob = rs.getBlob(\"WF_PROPERTIES\");\n+\n+                byte[] metadataByte;\n+\n+                if(metadataBlob != null) {\n+                    metadataByte = metadataBlob.getBytes(1L, (int) metadataBlob.length());\n+                    InputStream targetStream = new ByteArrayInputStream(metadataByte);\n+                    String metadata = APIMgtDBUtil.getStringFromInputStream(targetStream);\n+                    Gson g = new Gson();\n+\n+                    JSONObject json = g.fromJson(metadata, JSONObject.class);\n+                    workflow.setMetadata(json);", "originalCommit": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e00fe40f5ef809f1ac81dc7c22faacda062adfab", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\nindex be9b41b3956..c19a17b31df 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\n", "chunk": "@@ -14865,40 +14827,36 @@ public class ApiMgtDAO {\n                 Blob propertiesBlob = rs.getBlob(\"WF_PROPERTIES\");\n \n                 byte[] metadataByte;\n-\n                 if(metadataBlob != null) {\n                     metadataByte = metadataBlob.getBytes(1L, (int) metadataBlob.length());\n                     InputStream targetStream = new ByteArrayInputStream(metadataByte);\n                     String metadata = APIMgtDBUtil.getStringFromInputStream(targetStream);\n-                    Gson g = new Gson();\n-\n-                    JSONObject json = g.fromJson(metadata, JSONObject.class);\n-                    workflow.setMetadata(json);\n+                    Gson metadataGson = new Gson();\n+                    JSONObject metadataJson = metadataGson.fromJson(metadata, JSONObject.class);\n+                    workflow.setMetadata(metadataJson);\n                 } else {\n-                    JSONObject json=new JSONObject();\n-                    workflow.setMetadata(json);\n+                    JSONObject metadataJson = new JSONObject();\n+                    workflow.setMetadata(metadataJson);\n                 }\n \n                 byte[] propertiesByte;\n-\n                 if(propertiesBlob != null) {\n                     propertiesByte = propertiesBlob.getBytes(1L, (int) propertiesBlob.length());\n                     InputStream propertiesTargetStream = new ByteArrayInputStream(propertiesByte);\n                     String properties = APIMgtDBUtil.getStringFromInputStream(propertiesTargetStream);\n-                    Gson g = new Gson();\n-                    JSONObject json1 = g.fromJson(properties, JSONObject.class);\n-                    workflow.setProperties(json1);\n+                    Gson propertiesGson = new Gson();\n+                    JSONObject propertiesJson = propertiesGson.fromJson(properties, JSONObject.class);\n+                    workflow.setProperties(propertiesJson);\n                 } else {\n-                    JSONObject json1=new JSONObject();\n-                    workflow.setProperties(json1);\n+                    JSONObject propertiesJson = new JSONObject();\n+                    workflow.setProperties(propertiesJson);\n                 }\n             }\n         } catch (SQLException e) {\n-            handleException(\"Error when retriving the workflow details\" , e);\n+            handleException(\"Error when retriving the workflow details. \", e);\n         } finally {\n             APIMgtDBUtil.closeAllConnections(prepStmt, connection, rs);\n         }\n         return workflow;\n-\n     }\n }\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyMTY1MQ==", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r406621651", "body": "use meaningful variable names", "bodyText": "use meaningful variable names", "bodyHTML": "<p dir=\"auto\">use meaningful variable names</p>", "author": "chamilaadhi", "createdAt": "2020-04-10T06:26:14Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "diffHunk": "@@ -14610,4 +14621,284 @@ public String getUserID(String userName) throws APIManagementException {\n         }\n         return list;\n     }\n+\n+    /**\n+     * Remove the Pending workflow Requests using ExternalWorkflowReference\n+     *\n+     * @param workflowExtRef\n+     * @return\n+     */\n+\n+    public void deleteWorkflowRequest(String workflowExtRef) throws APIManagementException {\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+\n+        String query = SQLConstants.DELETE_WORKFLOW_REQUEST_SQL;\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            connection.setAutoCommit(false);\n+\n+            prepStmt = connection.prepareStatement(query);\n+            prepStmt.setString(1, workflowExtRef);\n+            prepStmt.executeUpdate();\n+            connection.commit();\n+        }\n+        catch (SQLException e) {\n+            handleException(\"Failed to delete the workflow request \", e);\n+        }\n+    }\n+\n+    /**\n+     * Get the Pending workflow Request using ExternalWorkflowReference\n+     *\n+     * @param externalWorkflowRef\n+     * @return\n+     */\n+\n+    public Workflow getworkflowReferenceByExternalWorkflowReference(String externalWorkflowRef)throws APIManagementException {\n+\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+        ResultSet rs = null;\n+\n+        Workflow workflow=new Workflow();\n+\n+        String sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_BY_EWR;\n+\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            prepStmt = connection.prepareStatement(sqlQuery);\n+            prepStmt.setString(1, externalWorkflowRef);\n+\n+            rs = prepStmt.executeQuery();\n+\n+            while (rs.next()) {\n+\n+                workflow.setWorkflowId(rs.getInt(\"WF_ID\"));\n+                workflow.setWorkflowReference(rs.getString(\"WF_REFERENCE\"));\n+                workflow.setWorkflowType(rs.getString(\"WF_TYPE\"));\n+\n+                String workflowstatus =rs.getString(\"WF_STATUS\");\n+                workflow.setStatus(org.wso2.carbon.apimgt.api.WorkflowStatus.valueOf(workflowstatus));\n+\n+                workflow.setCreatedTime(rs.getTimestamp(\"WF_CREATED_TIME\").toString());\n+                workflow.setUpdatedTime(rs.getTimestamp(\"WF_UPDATED_TIME\").toString());\n+\n+                workflow.setWorkflowStatusDesc(rs.getString(\"WF_STATUS_DESC\"));\n+                workflow.setTenantId(rs.getInt(\"TENANT_ID\"));\n+                workflow.setTenantDomain(rs.getString(\"TENANT_DOMAIN\"));\n+                workflow.setExternalWorkflowReference(rs.getString(\"WF_EXTERNAL_REFERENCE\"));\n+                Blob metadatablob = rs.getBlob(\"WF_METADATA\");\n+\n+                byte[] metadataByte;\n+\n+                if(metadatablob != null) {\n+                    metadataByte = metadatablob.getBytes(1L, (int) metadatablob.length());\n+                    InputStream targetStream = new ByteArrayInputStream(metadataByte);\n+                    String metadata = APIMgtDBUtil.getStringFromInputStream(targetStream);\n+                    Gson g = new Gson();\n+                    JSONObject json = g.fromJson(metadata, JSONObject.class);\n+                    workflow.setMetadata(json);\n+                } else {\n+                    JSONObject json=new JSONObject();\n+                    workflow.setMetadata(json);\n+                }\n+            }\n+        } catch (SQLException e) {\n+            handleException(\"Error when retriving the workflow details\" , e);\n+        } finally {\n+            APIMgtDBUtil.closeAllConnections(prepStmt, connection, rs);\n+        }\n+        return workflow;\n+    }\n+\n+    /**\n+     * Get the Pending workflow Requests using WorkflowType for a particular tenant\n+     *\n+     * @param workflowType\n+     * @param status\n+     * @param tenantDomain\n+     * @return\n+     */\n+\n+    public Workflow[] getworkflows(String workflowType ,String status ,String tenantDomain) throws APIManagementException {\n+\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+        ResultSet rs = null;\n+\n+        Workflow[] workflows = null;\n+\n+        String sqlQuery;\n+\n+        if (workflowType != null){\n+            sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_BY_WORKFLOW_TYPE;\n+        } else {\n+            sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS;\n+        }\n+\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            prepStmt = connection.prepareStatement(sqlQuery);\n+\n+            if (workflowType != null){\n+                prepStmt.setString(1, workflowType);\n+                prepStmt.setString( 2, status);\n+                prepStmt.setString( 3, tenantDomain);\n+\n+            } else {\n+                prepStmt.setString( 1, status);\n+                prepStmt.setString( 2, tenantDomain);\n+            }\n+\n+            rs = prepStmt.executeQuery();\n+\n+            ArrayList<Workflow> workflowsList = new ArrayList<Workflow>();\n+            Workflow workflow;\n+            while (rs.next()) {\n+                workflow = new Workflow();\n+                workflow.setWorkflowId(rs.getInt(\"WF_ID\"));\n+                workflow.setWorkflowReference(rs.getString(\"WF_REFERENCE\"));\n+                workflow.setWorkflowType(rs.getString(\"WF_TYPE\"));\n+\n+                String workflowstatus =rs.getString(\"WF_STATUS\");\n+                workflow.setStatus(org.wso2.carbon.apimgt.api.WorkflowStatus.valueOf(workflowstatus));\n+\n+                workflow.setCreatedTime(rs.getTimestamp(\"WF_CREATED_TIME\").toString());\n+                workflow.setUpdatedTime(rs.getTimestamp(\"WF_UPDATED_TIME\").toString());\n+\n+                workflow.setWorkflowStatusDesc(rs.getString(\"WF_STATUS_DESC\"));\n+                workflow.setTenantId(rs.getInt(\"TENANT_ID\"));\n+                workflow.setTenantDomain(rs.getString(\"TENANT_DOMAIN\"));\n+                workflow.setExternalWorkflowReference(rs.getString(\"WF_EXTERNAL_REFERENCE\"));\n+                workflow.setWorkflowDescription(rs.getString(\"WF_STATUS_DESC\"));\n+                Blob metadataBlob = rs.getBlob(\"WF_METADATA\");\n+                Blob propertiesBlob = rs.getBlob(\"WF_PROPERTIES\");\n+\n+                byte[] metadataByte;\n+\n+                if(metadataBlob != null) {\n+                    metadataByte = metadataBlob.getBytes(1L, (int) metadataBlob.length());\n+                    InputStream targetStream = new ByteArrayInputStream(metadataByte);\n+                    String metadata = APIMgtDBUtil.getStringFromInputStream(targetStream);\n+                    Gson g = new Gson();\n+\n+                    JSONObject json = g.fromJson(metadata, JSONObject.class);\n+                    workflow.setMetadata(json);\n+                } else {\n+                    JSONObject json = new JSONObject();\n+                    workflow.setMetadata(json);\n+                }\n+\n+                byte[] propertiesByte;\n+\n+                if(propertiesBlob != null) {\n+                    propertiesByte = propertiesBlob.getBytes(1L, (int) propertiesBlob.length());\n+                    InputStream propertiesTargetStream = new ByteArrayInputStream(propertiesByte);\n+                    String properties = APIMgtDBUtil.getStringFromInputStream(propertiesTargetStream);\n+                    Gson g = new Gson();\n+\n+                    JSONObject json = g.fromJson(properties, JSONObject.class);\n+                    workflow.setProperties(json);\n+                } else {\n+                    JSONObject json = new JSONObject();\n+                    workflow.setProperties(json);\n+                }\n+\n+                workflowsList.add(workflow);\n+            }\n+            workflows = workflowsList.toArray(new Workflow[workflowsList.size()]);\n+        } catch (SQLException e) {\n+            handleException(\"Error when retrieve all the workflow details\" , e);\n+        } finally {\n+            APIMgtDBUtil.closeAllConnections(prepStmt, connection, rs);\n+        }\n+        return workflows;\n+    }\n+\n+    /**\n+     * Get the Pending workflow Request using ExternalWorkflowReference for a particular tenant\n+     *\n+     * @param externelWorkflowRef\n+     * @param status\n+     * @param tenantDomain\n+     * @return\n+     */\n+\n+    public Workflow getworkflowReferenceByExternalWorkflowReferenceID(String externelWorkflowRef, String status ,\n+                                                                      String tenantDomain) throws APIManagementException {\n+\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+        ResultSet rs = null;\n+\n+        Workflow workflow=new Workflow();\n+\n+        String sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_BY_EXTERNAL_WORKFLOW_REFERENCE;\n+\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            prepStmt = connection.prepareStatement(sqlQuery);\n+            prepStmt.setString(1, externelWorkflowRef);\n+            prepStmt.setString(2, status);\n+            prepStmt.setString(3, tenantDomain);\n+\n+            rs = prepStmt.executeQuery();\n+\n+            while (rs.next()) {\n+\n+                workflow.setWorkflowId(rs.getInt(\"WF_ID\"));\n+                workflow.setWorkflowReference(rs.getString(\"WF_REFERENCE\"));\n+                workflow.setWorkflowType(rs.getString(\"WF_TYPE\"));\n+\n+                String workflowstatus =rs.getString(\"WF_STATUS\");\n+                workflow.setStatus(org.wso2.carbon.apimgt.api.WorkflowStatus.valueOf(workflowstatus));\n+\n+                workflow.setCreatedTime(rs.getTimestamp(\"WF_CREATED_TIME\").toString());\n+                workflow.setUpdatedTime(rs.getTimestamp(\"WF_UPDATED_TIME\").toString());\n+\n+                workflow.setWorkflowDescription(rs.getString(\"WF_STATUS_DESC\"));\n+                workflow.setTenantId(rs.getInt(\"TENANT_ID\"));\n+                workflow.setTenantDomain(rs.getString(\"TENANT_DOMAIN\"));\n+                workflow.setExternalWorkflowReference(rs.getString(\"WF_EXTERNAL_REFERENCE\"));\n+                Blob metadataBlob = rs.getBlob(\"WF_METADATA\");\n+                Blob propertiesBlob = rs.getBlob(\"WF_PROPERTIES\");\n+\n+                byte[] metadataByte;\n+\n+                if(metadataBlob != null) {\n+                    metadataByte = metadataBlob.getBytes(1L, (int) metadataBlob.length());\n+                    InputStream targetStream = new ByteArrayInputStream(metadataByte);\n+                    String metadata = APIMgtDBUtil.getStringFromInputStream(targetStream);\n+                    Gson g = new Gson();\n+\n+                    JSONObject json = g.fromJson(metadata, JSONObject.class);\n+                    workflow.setMetadata(json);\n+                } else {\n+                    JSONObject json=new JSONObject();\n+                    workflow.setMetadata(json);\n+                }\n+\n+                byte[] propertiesByte;\n+\n+                if(propertiesBlob != null) {\n+                    propertiesByte = propertiesBlob.getBytes(1L, (int) propertiesBlob.length());\n+                    InputStream propertiesTargetStream = new ByteArrayInputStream(propertiesByte);\n+                    String properties = APIMgtDBUtil.getStringFromInputStream(propertiesTargetStream);\n+                    Gson g = new Gson();\n+                    JSONObject json1 = g.fromJson(properties, JSONObject.class);", "originalCommit": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e00fe40f5ef809f1ac81dc7c22faacda062adfab", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\nindex be9b41b3956..c19a17b31df 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\n", "chunk": "@@ -14865,40 +14827,36 @@ public class ApiMgtDAO {\n                 Blob propertiesBlob = rs.getBlob(\"WF_PROPERTIES\");\n \n                 byte[] metadataByte;\n-\n                 if(metadataBlob != null) {\n                     metadataByte = metadataBlob.getBytes(1L, (int) metadataBlob.length());\n                     InputStream targetStream = new ByteArrayInputStream(metadataByte);\n                     String metadata = APIMgtDBUtil.getStringFromInputStream(targetStream);\n-                    Gson g = new Gson();\n-\n-                    JSONObject json = g.fromJson(metadata, JSONObject.class);\n-                    workflow.setMetadata(json);\n+                    Gson metadataGson = new Gson();\n+                    JSONObject metadataJson = metadataGson.fromJson(metadata, JSONObject.class);\n+                    workflow.setMetadata(metadataJson);\n                 } else {\n-                    JSONObject json=new JSONObject();\n-                    workflow.setMetadata(json);\n+                    JSONObject metadataJson = new JSONObject();\n+                    workflow.setMetadata(metadataJson);\n                 }\n \n                 byte[] propertiesByte;\n-\n                 if(propertiesBlob != null) {\n                     propertiesByte = propertiesBlob.getBytes(1L, (int) propertiesBlob.length());\n                     InputStream propertiesTargetStream = new ByteArrayInputStream(propertiesByte);\n                     String properties = APIMgtDBUtil.getStringFromInputStream(propertiesTargetStream);\n-                    Gson g = new Gson();\n-                    JSONObject json1 = g.fromJson(properties, JSONObject.class);\n-                    workflow.setProperties(json1);\n+                    Gson propertiesGson = new Gson();\n+                    JSONObject propertiesJson = propertiesGson.fromJson(properties, JSONObject.class);\n+                    workflow.setProperties(propertiesJson);\n                 } else {\n-                    JSONObject json1=new JSONObject();\n-                    workflow.setProperties(json1);\n+                    JSONObject propertiesJson = new JSONObject();\n+                    workflow.setProperties(propertiesJson);\n                 }\n             }\n         } catch (SQLException e) {\n-            handleException(\"Error when retriving the workflow details\" , e);\n+            handleException(\"Error when retriving the workflow details. \", e);\n         } finally {\n             APIMgtDBUtil.closeAllConnections(prepStmt, connection, rs);\n         }\n         return workflow;\n-\n     }\n }\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyMTc3MA==", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r406621770", "body": "put a meaningful variable name", "bodyText": "put a meaningful variable name", "bodyHTML": "<p dir=\"auto\">put a meaningful variable name</p>", "author": "chamilaadhi", "createdAt": "2020-04-10T06:26:46Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/constants/SQLConstants.java", "diffHunk": "@@ -1869,6 +1869,34 @@\n     public static final String GET_ALL_WORKFLOW_ENTRY_FROM_INTERNAL_REF_SQL =\n             \"SELECT * FROM AM_WORKFLOWS WHERE WF_REFERENCE=? AND WF_TYPE=?\";\n \n+    public static final String ADD_PAYLOAD_SQL =\n+            \" UPDATE AM_WORKFLOWS \" +\n+                    \" SET \" +\n+                    \"   WF_METADATA = ?, \" +\n+                    \"   WF_PROPERTIES = ?, \" +\n+                    \"   WF_STATUS_DESC = ? \" +\n+                    \" WHERE \" +\n+                    \"    WF_EXTERNAL_REFERENCE = ?\";\n+\n+    public static final String DELETE_WORKFLOW_REQUEST_SQL=\n+            \" DELETE FROM AM_WORKFLOWS WHERE WF_EXTERNAL_REFERENCE = ?\";\n+\n+    public static final String GET_ALL_WORKFLOW_DETAILS_BY_EWR =", "originalCommit": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e00fe40f5ef809f1ac81dc7c22faacda062adfab", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/constants/SQLConstants.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/constants/SQLConstants.java\nindex 1c8534b9389..92c3f4ffb18 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/constants/SQLConstants.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/constants/SQLConstants.java\n", "chunk": "@@ -1881,7 +1881,7 @@ public class SQLConstants {\n     public static final String DELETE_WORKFLOW_REQUEST_SQL=\n             \" DELETE FROM AM_WORKFLOWS WHERE WF_EXTERNAL_REFERENCE = ?\";\n \n-    public static final String GET_ALL_WORKFLOW_DETAILS_BY_EWR =\n+    public static final String GET_ALL_WORKFLOW_DETAILS_BY_EXTERNALWORKFLOWREF =\n             \" SELECT  * FROM AM_WORKFLOWS WHERE WF_EXTERNAL_REFERENCE = ?\";\n \n     public static final String GET_ALL_WORKFLOW_DETAILS_BY_WORKFLOW_TYPE =\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyMTg4OQ==", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r406621889", "body": "Add license header", "bodyText": "Add license header", "bodyHTML": "<p dir=\"auto\">Add license header</p>", "author": "chamilaadhi", "createdAt": "2020-04-10T06:27:16Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/APIStateChangeApprovalWorkflowExecutor.java", "diffHunk": "@@ -0,0 +1,223 @@\n+package org.wso2.carbon.apimgt.impl.workflow;", "originalCommit": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc5MjI0MQ==", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r410792241", "bodyText": "fixed with e00fe40", "author": "SahanHerath", "createdAt": "2020-04-19T02:03:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyMTg4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc5NjI3NQ==", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r410796275", "bodyText": "changed year with 68b7419", "author": "SahanHerath", "createdAt": "2020-04-19T02:33:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyMTg4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "e00fe40f5ef809f1ac81dc7c22faacda062adfab", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/APIStateChangeApprovalWorkflowExecutor.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/APIStateChangeApprovalWorkflowExecutor.java\nindex b18c28630f1..cb79bf0aaf2 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/APIStateChangeApprovalWorkflowExecutor.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/APIStateChangeApprovalWorkflowExecutor.java\n", "chunk": "@@ -1,3 +1,20 @@\n+/*\n+ *  Copyright (c) 2016, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n package org.wso2.carbon.apimgt.impl.workflow;\n \n import org.apache.commons.logging.Log;\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyMjA2Mw==", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r406622063", "body": "don't use wildcard import.", "bodyText": "don't use wildcard import.", "bodyHTML": "<p dir=\"auto\">don't use wildcard import.</p>", "author": "chamilaadhi", "createdAt": "2020-04-10T06:27:50Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/APIStateChangeApprovalWorkflowExecutor.java", "diffHunk": "@@ -0,0 +1,223 @@\n+package org.wso2.carbon.apimgt.impl.workflow;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n+import org.wso2.carbon.apimgt.api.WorkflowResponse;\n+import org.wso2.carbon.apimgt.api.model.APIIdentifier;\n+import org.wso2.carbon.apimgt.api.model.Workflow;\n+import org.wso2.carbon.apimgt.impl.APIConstants;\n+import org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO;\n+import org.wso2.carbon.apimgt.impl.dto.WorkflowDTO;\n+import org.wso2.carbon.apimgt.impl.internal.ServiceReferenceHolder;\n+import org.wso2.carbon.apimgt.impl.utils.APIUtil;\n+import org.wso2.carbon.context.PrivilegedCarbonContext;\n+import org.wso2.carbon.governance.api.generic.dataobjects.GenericArtifact;\n+import org.wso2.carbon.registry.core.Registry;\n+import org.wso2.carbon.registry.core.exceptions.RegistryException;\n+\n+import java.util.*;", "originalCommit": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e00fe40f5ef809f1ac81dc7c22faacda062adfab", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/APIStateChangeApprovalWorkflowExecutor.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/APIStateChangeApprovalWorkflowExecutor.java\nindex b18c28630f1..cb79bf0aaf2 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/APIStateChangeApprovalWorkflowExecutor.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/APIStateChangeApprovalWorkflowExecutor.java\n", "chunk": "@@ -15,9 +32,16 @@ import org.wso2.carbon.context.PrivilegedCarbonContext;\n import org.wso2.carbon.governance.api.generic.dataobjects.GenericArtifact;\n import org.wso2.carbon.registry.core.Registry;\n import org.wso2.carbon.registry.core.exceptions.RegistryException;\n-\n-import java.util.*;\n-\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.ArrayList;\n+\n+/**\n+ * Approval workflow for API state change.\n+ *\n+ */\n public class APIStateChangeApprovalWorkflowExecutor extends WorkflowExecutor{\n \n     private static final Log log = LogFactory.getLog(APIStateChangeWSWorkflowExecutor.class);\n", "next_change": {"commit": "9b48a01776745e4804aee0554f67dde112e0ccdd", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/APIStateChangeApprovalWorkflowExecutor.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/APIStateChangeApprovalWorkflowExecutor.java\nindex cb79bf0aaf2..1f581dbc8b4 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/APIStateChangeApprovalWorkflowExecutor.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/APIStateChangeApprovalWorkflowExecutor.java\n", "chunk": "@@ -42,7 +42,7 @@ import java.util.ArrayList;\n  * Approval workflow for API state change.\n  *\n  */\n-public class APIStateChangeApprovalWorkflowExecutor extends WorkflowExecutor{\n+public class APIStateChangeApprovalWorkflowExecutor extends WorkflowExecutor {\n \n     private static final Log log = LogFactory.getLog(APIStateChangeWSWorkflowExecutor.class);\n     private String stateList;\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyMjE0MA==", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r406622140", "body": "where is the class description???", "bodyText": "where is the class description???", "bodyHTML": "<p dir=\"auto\">where is the class description???</p>", "author": "chamilaadhi", "createdAt": "2020-04-10T06:28:08Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/APIStateChangeApprovalWorkflowExecutor.java", "diffHunk": "@@ -0,0 +1,223 @@\n+package org.wso2.carbon.apimgt.impl.workflow;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n+import org.wso2.carbon.apimgt.api.WorkflowResponse;\n+import org.wso2.carbon.apimgt.api.model.APIIdentifier;\n+import org.wso2.carbon.apimgt.api.model.Workflow;\n+import org.wso2.carbon.apimgt.impl.APIConstants;\n+import org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO;\n+import org.wso2.carbon.apimgt.impl.dto.WorkflowDTO;\n+import org.wso2.carbon.apimgt.impl.internal.ServiceReferenceHolder;\n+import org.wso2.carbon.apimgt.impl.utils.APIUtil;\n+import org.wso2.carbon.context.PrivilegedCarbonContext;\n+import org.wso2.carbon.governance.api.generic.dataobjects.GenericArtifact;\n+import org.wso2.carbon.registry.core.Registry;\n+import org.wso2.carbon.registry.core.exceptions.RegistryException;\n+\n+import java.util.*;\n+\n+public class APIStateChangeApprovalWorkflowExecutor extends WorkflowExecutor{", "originalCommit": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc5MjQ3NA==", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r410792474", "bodyText": "fixed with e00fe40", "author": "SahanHerath", "createdAt": "2020-04-19T02:04:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyMjE0MA=="}], "type": "inlineReview", "revised_code": {"commit": "e00fe40f5ef809f1ac81dc7c22faacda062adfab", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/APIStateChangeApprovalWorkflowExecutor.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/APIStateChangeApprovalWorkflowExecutor.java\nindex b18c28630f1..cb79bf0aaf2 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/APIStateChangeApprovalWorkflowExecutor.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/APIStateChangeApprovalWorkflowExecutor.java\n", "chunk": "@@ -15,9 +32,16 @@ import org.wso2.carbon.context.PrivilegedCarbonContext;\n import org.wso2.carbon.governance.api.generic.dataobjects.GenericArtifact;\n import org.wso2.carbon.registry.core.Registry;\n import org.wso2.carbon.registry.core.exceptions.RegistryException;\n-\n-import java.util.*;\n-\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.ArrayList;\n+\n+/**\n+ * Approval workflow for API state change.\n+ *\n+ */\n public class APIStateChangeApprovalWorkflowExecutor extends WorkflowExecutor{\n \n     private static final Log log = LogFactory.getLog(APIStateChangeWSWorkflowExecutor.class);\n", "next_change": {"commit": "9b48a01776745e4804aee0554f67dde112e0ccdd", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/APIStateChangeApprovalWorkflowExecutor.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/APIStateChangeApprovalWorkflowExecutor.java\nindex cb79bf0aaf2..1f581dbc8b4 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/APIStateChangeApprovalWorkflowExecutor.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/APIStateChangeApprovalWorkflowExecutor.java\n", "chunk": "@@ -42,7 +42,7 @@ import java.util.ArrayList;\n  * Approval workflow for API state change.\n  *\n  */\n-public class APIStateChangeApprovalWorkflowExecutor extends WorkflowExecutor{\n+public class APIStateChangeApprovalWorkflowExecutor extends WorkflowExecutor {\n \n     private static final Log log = LogFactory.getLog(APIStateChangeWSWorkflowExecutor.class);\n     private String stateList;\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyMjM1Mg==", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r406622352", "body": "format the whole class and remove unnecessary spaces between statements ", "bodyText": "format the whole class and remove unnecessary spaces between statements", "bodyHTML": "<p dir=\"auto\">format the whole class and remove unnecessary spaces between statements</p>", "author": "chamilaadhi", "createdAt": "2020-04-10T06:28:52Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/APIStateChangeApprovalWorkflowExecutor.java", "diffHunk": "@@ -0,0 +1,223 @@\n+package org.wso2.carbon.apimgt.impl.workflow;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n+import org.wso2.carbon.apimgt.api.WorkflowResponse;\n+import org.wso2.carbon.apimgt.api.model.APIIdentifier;\n+import org.wso2.carbon.apimgt.api.model.Workflow;\n+import org.wso2.carbon.apimgt.impl.APIConstants;\n+import org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO;\n+import org.wso2.carbon.apimgt.impl.dto.WorkflowDTO;\n+import org.wso2.carbon.apimgt.impl.internal.ServiceReferenceHolder;\n+import org.wso2.carbon.apimgt.impl.utils.APIUtil;\n+import org.wso2.carbon.context.PrivilegedCarbonContext;\n+import org.wso2.carbon.governance.api.generic.dataobjects.GenericArtifact;\n+import org.wso2.carbon.registry.core.Registry;\n+import org.wso2.carbon.registry.core.exceptions.RegistryException;\n+\n+import java.util.*;\n+\n+public class APIStateChangeApprovalWorkflowExecutor extends WorkflowExecutor{\n+\n+    private static final Log log = LogFactory.getLog(APIStateChangeWSWorkflowExecutor.class);", "originalCommit": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc5MjUyMw==", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r410792523", "bodyText": "fixed with e00fe40", "author": "SahanHerath", "createdAt": "2020-04-19T02:05:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyMjM1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "e00fe40f5ef809f1ac81dc7c22faacda062adfab", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/APIStateChangeApprovalWorkflowExecutor.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/APIStateChangeApprovalWorkflowExecutor.java\nindex b18c28630f1..cb79bf0aaf2 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/APIStateChangeApprovalWorkflowExecutor.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/APIStateChangeApprovalWorkflowExecutor.java\n", "chunk": "@@ -15,9 +32,16 @@ import org.wso2.carbon.context.PrivilegedCarbonContext;\n import org.wso2.carbon.governance.api.generic.dataobjects.GenericArtifact;\n import org.wso2.carbon.registry.core.Registry;\n import org.wso2.carbon.registry.core.exceptions.RegistryException;\n-\n-import java.util.*;\n-\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.ArrayList;\n+\n+/**\n+ * Approval workflow for API state change.\n+ *\n+ */\n public class APIStateChangeApprovalWorkflowExecutor extends WorkflowExecutor{\n \n     private static final Log log = LogFactory.getLog(APIStateChangeWSWorkflowExecutor.class);\n", "next_change": {"commit": "9b48a01776745e4804aee0554f67dde112e0ccdd", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/APIStateChangeApprovalWorkflowExecutor.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/APIStateChangeApprovalWorkflowExecutor.java\nindex cb79bf0aaf2..1f581dbc8b4 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/APIStateChangeApprovalWorkflowExecutor.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/APIStateChangeApprovalWorkflowExecutor.java\n", "chunk": "@@ -42,7 +42,7 @@ import java.util.ArrayList;\n  * Approval workflow for API state change.\n  *\n  */\n-public class APIStateChangeApprovalWorkflowExecutor extends WorkflowExecutor{\n+public class APIStateChangeApprovalWorkflowExecutor extends WorkflowExecutor {\n \n     private static final Log log = LogFactory.getLog(APIStateChangeWSWorkflowExecutor.class);\n     private String stateList;\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyMjU3Mg==", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r406622572", "body": "lets put one debug log", "bodyText": "lets put one debug log", "bodyHTML": "<p dir=\"auto\">lets put one debug log</p>", "author": "chamilaadhi", "createdAt": "2020-04-10T06:29:30Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/APIStateChangeApprovalWorkflowExecutor.java", "diffHunk": "@@ -0,0 +1,223 @@\n+package org.wso2.carbon.apimgt.impl.workflow;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n+import org.wso2.carbon.apimgt.api.WorkflowResponse;\n+import org.wso2.carbon.apimgt.api.model.APIIdentifier;\n+import org.wso2.carbon.apimgt.api.model.Workflow;\n+import org.wso2.carbon.apimgt.impl.APIConstants;\n+import org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO;\n+import org.wso2.carbon.apimgt.impl.dto.WorkflowDTO;\n+import org.wso2.carbon.apimgt.impl.internal.ServiceReferenceHolder;\n+import org.wso2.carbon.apimgt.impl.utils.APIUtil;\n+import org.wso2.carbon.context.PrivilegedCarbonContext;\n+import org.wso2.carbon.governance.api.generic.dataobjects.GenericArtifact;\n+import org.wso2.carbon.registry.core.Registry;\n+import org.wso2.carbon.registry.core.exceptions.RegistryException;\n+\n+import java.util.*;\n+\n+public class APIStateChangeApprovalWorkflowExecutor extends WorkflowExecutor{\n+\n+    private static final Log log = LogFactory.getLog(APIStateChangeWSWorkflowExecutor.class);\n+    private String stateList;\n+\n+    public String getStateList() {\n+        return stateList;\n+    }\n+\n+    public void setStateList(String stateList) {\n+        this.stateList = stateList;\n+    }\n+\n+\n+    @Override\n+    public String getWorkflowType() {\n+        return WorkflowConstants.WF_TYPE_AM_API_STATE;\n+    }\n+\n+    @Override\n+    public List<WorkflowDTO> getWorkflowDetails(String workflowStatus) throws WorkflowException {\n+        return Collections.emptyList();\n+    }\n+\n+    @Override\n+    public WorkflowResponse execute(WorkflowDTO workflowDTO) throws WorkflowException {\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Executing API State change Workflow.\");\n+            log.debug(\"Execute workflowDTO \" + workflowDTO.toString());", "originalCommit": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e00fe40f5ef809f1ac81dc7c22faacda062adfab", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/APIStateChangeApprovalWorkflowExecutor.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/APIStateChangeApprovalWorkflowExecutor.java\nindex b18c28630f1..cb79bf0aaf2 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/APIStateChangeApprovalWorkflowExecutor.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/APIStateChangeApprovalWorkflowExecutor.java\n", "chunk": "@@ -42,14 +65,16 @@ public class APIStateChangeApprovalWorkflowExecutor extends WorkflowExecutor{\n         return Collections.emptyList();\n     }\n \n+    /**\n+     * Execute the API state change workflow approval process.\n+     * @param workflowDTO\n+     */\n     @Override\n     public WorkflowResponse execute(WorkflowDTO workflowDTO) throws WorkflowException {\n \n         if (log.isDebugEnabled()) {\n             log.debug(\"Executing API State change Workflow.\");\n-            log.debug(\"Execute workflowDTO \" + workflowDTO.toString());\n         }\n-\n         if (stateList != null) {\n             Map<String, List<String>> stateActionMap = getSelectedStatesToApprove();\n             APIStateWorkflowDTO apiStateWorkFlowDTO = (APIStateWorkflowDTO) workflowDTO;\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyMjg3Mw==", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r406622873", "body": "use simple s in 'State' ", "bodyText": "use simple s in 'State'", "bodyHTML": "<p dir=\"auto\">use simple s in 'State'</p>", "author": "chamilaadhi", "createdAt": "2020-04-10T06:30:46Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/APIStateChangeApprovalWorkflowExecutor.java", "diffHunk": "@@ -0,0 +1,223 @@\n+package org.wso2.carbon.apimgt.impl.workflow;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n+import org.wso2.carbon.apimgt.api.WorkflowResponse;\n+import org.wso2.carbon.apimgt.api.model.APIIdentifier;\n+import org.wso2.carbon.apimgt.api.model.Workflow;\n+import org.wso2.carbon.apimgt.impl.APIConstants;\n+import org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO;\n+import org.wso2.carbon.apimgt.impl.dto.WorkflowDTO;\n+import org.wso2.carbon.apimgt.impl.internal.ServiceReferenceHolder;\n+import org.wso2.carbon.apimgt.impl.utils.APIUtil;\n+import org.wso2.carbon.context.PrivilegedCarbonContext;\n+import org.wso2.carbon.governance.api.generic.dataobjects.GenericArtifact;\n+import org.wso2.carbon.registry.core.Registry;\n+import org.wso2.carbon.registry.core.exceptions.RegistryException;\n+\n+import java.util.*;\n+\n+public class APIStateChangeApprovalWorkflowExecutor extends WorkflowExecutor{\n+\n+    private static final Log log = LogFactory.getLog(APIStateChangeWSWorkflowExecutor.class);\n+    private String stateList;\n+\n+    public String getStateList() {\n+        return stateList;\n+    }\n+\n+    public void setStateList(String stateList) {\n+        this.stateList = stateList;\n+    }\n+\n+\n+    @Override\n+    public String getWorkflowType() {\n+        return WorkflowConstants.WF_TYPE_AM_API_STATE;\n+    }\n+\n+    @Override\n+    public List<WorkflowDTO> getWorkflowDetails(String workflowStatus) throws WorkflowException {\n+        return Collections.emptyList();\n+    }\n+\n+    @Override\n+    public WorkflowResponse execute(WorkflowDTO workflowDTO) throws WorkflowException {\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Executing API State change Workflow.\");\n+            log.debug(\"Execute workflowDTO \" + workflowDTO.toString());\n+        }\n+\n+        if (stateList != null) {\n+            Map<String, List<String>> stateActionMap = getSelectedStatesToApprove();\n+            APIStateWorkflowDTO apiStateWorkFlowDTO = (APIStateWorkflowDTO) workflowDTO;\n+\n+            if (stateActionMap.containsKey(apiStateWorkFlowDTO.getApiCurrentState().toUpperCase())\n+                    && stateActionMap.get(apiStateWorkFlowDTO.getApiCurrentState().toUpperCase())\n+                    .contains(apiStateWorkFlowDTO.getApiLCAction())) {\n+\n+                String callBackURL = apiStateWorkFlowDTO.getCallbackUrl();\n+                String message = \"Approval request for API State change action '\" + apiStateWorkFlowDTO.getApiLCAction()", "originalCommit": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e00fe40f5ef809f1ac81dc7c22faacda062adfab", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/APIStateChangeApprovalWorkflowExecutor.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/APIStateChangeApprovalWorkflowExecutor.java\nindex b18c28630f1..cb79bf0aaf2 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/APIStateChangeApprovalWorkflowExecutor.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/APIStateChangeApprovalWorkflowExecutor.java\n", "chunk": "@@ -59,35 +84,20 @@ public class APIStateChangeApprovalWorkflowExecutor extends WorkflowExecutor{\n                     .contains(apiStateWorkFlowDTO.getApiLCAction())) {\n \n                 String callBackURL = apiStateWorkFlowDTO.getCallbackUrl();\n-                String message = \"Approval request for API State change action '\" + apiStateWorkFlowDTO.getApiLCAction()\n+                String message = \"Approval request for API state change action '\" + apiStateWorkFlowDTO.getApiLCAction()\n                         + \"' from '\" + apiStateWorkFlowDTO.getApiCurrentState() + \"' state for the API '\"\n                         + apiStateWorkFlowDTO.getApiName() + \" : \" + apiStateWorkFlowDTO.getApiVersion() + \"' by \"\n                         + apiStateWorkFlowDTO.getApiProvider() + \"\";\n \n                 apiStateWorkFlowDTO.setWorkflowDescription(message);\n-\n-                apiStateWorkFlowDTO.setMetadata(\"ClientId\", apiStateWorkFlowDTO.getClientId());\n-                apiStateWorkFlowDTO.setMetadata(\"ClientSecret\", apiStateWorkFlowDTO.getClientSecret());\n-                apiStateWorkFlowDTO.setMetadata(\"Scope\", apiStateWorkFlowDTO.getScope());\n-                apiStateWorkFlowDTO.setMetadata(\"TokenAPI\", apiStateWorkFlowDTO.getTokenAPI());\n                 apiStateWorkFlowDTO.setMetadata(\"CurrentState\", apiStateWorkFlowDTO.getApiCurrentState());\n                 apiStateWorkFlowDTO.setMetadata(\"Action\", apiStateWorkFlowDTO.getApiLCAction());\n                 apiStateWorkFlowDTO.setMetadata(\"ApiName\", apiStateWorkFlowDTO.getApiName());\n                 apiStateWorkFlowDTO.setMetadata(\"ApiVersion\", apiStateWorkFlowDTO.getApiVersion());\n                 apiStateWorkFlowDTO.setMetadata(\"ApiProvider\", apiStateWorkFlowDTO.getApiProvider());\n-                apiStateWorkFlowDTO.setMetadata(\"workflowExternalRef\", apiStateWorkFlowDTO.getExternalWorkflowReference());\n                 apiStateWorkFlowDTO.setMetadata(\"Invoker\", apiStateWorkFlowDTO.getInvoker());\n                 apiStateWorkFlowDTO.setMetadata(\"TenantId\", String.valueOf(apiStateWorkFlowDTO.getTenantId()));\n-                apiStateWorkFlowDTO.setMetadata(\"callBackURL\", callBackURL != null ? callBackURL : \"?\");\n-\n-                apiStateWorkFlowDTO.setProperties(\"Workflow Process\",\"Application Creation\");\n-\n                 super.execute(workflowDTO);\n-\n-                if (log.isDebugEnabled()) {\n-                    log.debug(\"APIStateChange payload: \");\n-                }\n-\n             } else {\n                 // For any other states, act as simple workflow executor.\n                 workflowDTO.setStatus(WorkflowStatus.APPROVED);\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyMzM5Nw==", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r406623397", "body": "this property is not needed. you don't have to set any . don't set any value", "bodyText": "this property is not needed. you don't have to set any . don't set any value", "bodyHTML": "<p dir=\"auto\">this property is not needed. you don't have to set any . don't set any value</p>", "author": "chamilaadhi", "createdAt": "2020-04-10T06:33:05Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/APIStateChangeApprovalWorkflowExecutor.java", "diffHunk": "@@ -0,0 +1,223 @@\n+package org.wso2.carbon.apimgt.impl.workflow;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n+import org.wso2.carbon.apimgt.api.WorkflowResponse;\n+import org.wso2.carbon.apimgt.api.model.APIIdentifier;\n+import org.wso2.carbon.apimgt.api.model.Workflow;\n+import org.wso2.carbon.apimgt.impl.APIConstants;\n+import org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO;\n+import org.wso2.carbon.apimgt.impl.dto.WorkflowDTO;\n+import org.wso2.carbon.apimgt.impl.internal.ServiceReferenceHolder;\n+import org.wso2.carbon.apimgt.impl.utils.APIUtil;\n+import org.wso2.carbon.context.PrivilegedCarbonContext;\n+import org.wso2.carbon.governance.api.generic.dataobjects.GenericArtifact;\n+import org.wso2.carbon.registry.core.Registry;\n+import org.wso2.carbon.registry.core.exceptions.RegistryException;\n+\n+import java.util.*;\n+\n+public class APIStateChangeApprovalWorkflowExecutor extends WorkflowExecutor{\n+\n+    private static final Log log = LogFactory.getLog(APIStateChangeWSWorkflowExecutor.class);\n+    private String stateList;\n+\n+    public String getStateList() {\n+        return stateList;\n+    }\n+\n+    public void setStateList(String stateList) {\n+        this.stateList = stateList;\n+    }\n+\n+\n+    @Override\n+    public String getWorkflowType() {\n+        return WorkflowConstants.WF_TYPE_AM_API_STATE;\n+    }\n+\n+    @Override\n+    public List<WorkflowDTO> getWorkflowDetails(String workflowStatus) throws WorkflowException {\n+        return Collections.emptyList();\n+    }\n+\n+    @Override\n+    public WorkflowResponse execute(WorkflowDTO workflowDTO) throws WorkflowException {\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Executing API State change Workflow.\");\n+            log.debug(\"Execute workflowDTO \" + workflowDTO.toString());\n+        }\n+\n+        if (stateList != null) {\n+            Map<String, List<String>> stateActionMap = getSelectedStatesToApprove();\n+            APIStateWorkflowDTO apiStateWorkFlowDTO = (APIStateWorkflowDTO) workflowDTO;\n+\n+            if (stateActionMap.containsKey(apiStateWorkFlowDTO.getApiCurrentState().toUpperCase())\n+                    && stateActionMap.get(apiStateWorkFlowDTO.getApiCurrentState().toUpperCase())\n+                    .contains(apiStateWorkFlowDTO.getApiLCAction())) {\n+\n+                String callBackURL = apiStateWorkFlowDTO.getCallbackUrl();\n+                String message = \"Approval request for API State change action '\" + apiStateWorkFlowDTO.getApiLCAction()\n+                        + \"' from '\" + apiStateWorkFlowDTO.getApiCurrentState() + \"' state for the API '\"\n+                        + apiStateWorkFlowDTO.getApiName() + \" : \" + apiStateWorkFlowDTO.getApiVersion() + \"' by \"\n+                        + apiStateWorkFlowDTO.getApiProvider() + \"\";\n+\n+                apiStateWorkFlowDTO.setWorkflowDescription(message);\n+\n+                apiStateWorkFlowDTO.setMetadata(\"ClientId\", apiStateWorkFlowDTO.getClientId());\n+                apiStateWorkFlowDTO.setMetadata(\"ClientSecret\", apiStateWorkFlowDTO.getClientSecret());\n+                apiStateWorkFlowDTO.setMetadata(\"Scope\", apiStateWorkFlowDTO.getScope());\n+                apiStateWorkFlowDTO.setMetadata(\"TokenAPI\", apiStateWorkFlowDTO.getTokenAPI());\n+                apiStateWorkFlowDTO.setMetadata(\"CurrentState\", apiStateWorkFlowDTO.getApiCurrentState());\n+                apiStateWorkFlowDTO.setMetadata(\"Action\", apiStateWorkFlowDTO.getApiLCAction());\n+                apiStateWorkFlowDTO.setMetadata(\"ApiName\", apiStateWorkFlowDTO.getApiName());\n+                apiStateWorkFlowDTO.setMetadata(\"ApiVersion\", apiStateWorkFlowDTO.getApiVersion());\n+                apiStateWorkFlowDTO.setMetadata(\"ApiProvider\", apiStateWorkFlowDTO.getApiProvider());\n+                apiStateWorkFlowDTO.setMetadata(\"workflowExternalRef\", apiStateWorkFlowDTO.getExternalWorkflowReference());\n+                apiStateWorkFlowDTO.setMetadata(\"Invoker\", apiStateWorkFlowDTO.getInvoker());\n+                apiStateWorkFlowDTO.setMetadata(\"TenantId\", String.valueOf(apiStateWorkFlowDTO.getTenantId()));\n+                apiStateWorkFlowDTO.setMetadata(\"callBackURL\", callBackURL != null ? callBackURL : \"?\");\n+\n+                apiStateWorkFlowDTO.setProperties(\"Workflow Process\",\"Application Creation\");", "originalCommit": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e00fe40f5ef809f1ac81dc7c22faacda062adfab", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/APIStateChangeApprovalWorkflowExecutor.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/APIStateChangeApprovalWorkflowExecutor.java\nindex b18c28630f1..cb79bf0aaf2 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/APIStateChangeApprovalWorkflowExecutor.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/APIStateChangeApprovalWorkflowExecutor.java\n", "chunk": "@@ -59,35 +84,20 @@ public class APIStateChangeApprovalWorkflowExecutor extends WorkflowExecutor{\n                     .contains(apiStateWorkFlowDTO.getApiLCAction())) {\n \n                 String callBackURL = apiStateWorkFlowDTO.getCallbackUrl();\n-                String message = \"Approval request for API State change action '\" + apiStateWorkFlowDTO.getApiLCAction()\n+                String message = \"Approval request for API state change action '\" + apiStateWorkFlowDTO.getApiLCAction()\n                         + \"' from '\" + apiStateWorkFlowDTO.getApiCurrentState() + \"' state for the API '\"\n                         + apiStateWorkFlowDTO.getApiName() + \" : \" + apiStateWorkFlowDTO.getApiVersion() + \"' by \"\n                         + apiStateWorkFlowDTO.getApiProvider() + \"\";\n \n                 apiStateWorkFlowDTO.setWorkflowDescription(message);\n-\n-                apiStateWorkFlowDTO.setMetadata(\"ClientId\", apiStateWorkFlowDTO.getClientId());\n-                apiStateWorkFlowDTO.setMetadata(\"ClientSecret\", apiStateWorkFlowDTO.getClientSecret());\n-                apiStateWorkFlowDTO.setMetadata(\"Scope\", apiStateWorkFlowDTO.getScope());\n-                apiStateWorkFlowDTO.setMetadata(\"TokenAPI\", apiStateWorkFlowDTO.getTokenAPI());\n                 apiStateWorkFlowDTO.setMetadata(\"CurrentState\", apiStateWorkFlowDTO.getApiCurrentState());\n                 apiStateWorkFlowDTO.setMetadata(\"Action\", apiStateWorkFlowDTO.getApiLCAction());\n                 apiStateWorkFlowDTO.setMetadata(\"ApiName\", apiStateWorkFlowDTO.getApiName());\n                 apiStateWorkFlowDTO.setMetadata(\"ApiVersion\", apiStateWorkFlowDTO.getApiVersion());\n                 apiStateWorkFlowDTO.setMetadata(\"ApiProvider\", apiStateWorkFlowDTO.getApiProvider());\n-                apiStateWorkFlowDTO.setMetadata(\"workflowExternalRef\", apiStateWorkFlowDTO.getExternalWorkflowReference());\n                 apiStateWorkFlowDTO.setMetadata(\"Invoker\", apiStateWorkFlowDTO.getInvoker());\n                 apiStateWorkFlowDTO.setMetadata(\"TenantId\", String.valueOf(apiStateWorkFlowDTO.getTenantId()));\n-                apiStateWorkFlowDTO.setMetadata(\"callBackURL\", callBackURL != null ? callBackURL : \"?\");\n-\n-                apiStateWorkFlowDTO.setProperties(\"Workflow Process\",\"Application Creation\");\n-\n                 super.execute(workflowDTO);\n-\n-                if (log.isDebugEnabled()) {\n-                    log.debug(\"APIStateChange payload: \");\n-                }\n-\n             } else {\n                 // For any other states, act as simple workflow executor.\n                 workflowDTO.setStatus(WorkflowStatus.APPROVED);\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyMzU4NA==", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r406623584", "body": "Error message is not complete. see the end of the message", "bodyText": "Error message is not complete. see the end of the message", "bodyHTML": "<p dir=\"auto\">Error message is not complete. see the end of the message</p>", "author": "chamilaadhi", "createdAt": "2020-04-10T06:33:49Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/APIStateChangeApprovalWorkflowExecutor.java", "diffHunk": "@@ -0,0 +1,223 @@\n+package org.wso2.carbon.apimgt.impl.workflow;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n+import org.wso2.carbon.apimgt.api.WorkflowResponse;\n+import org.wso2.carbon.apimgt.api.model.APIIdentifier;\n+import org.wso2.carbon.apimgt.api.model.Workflow;\n+import org.wso2.carbon.apimgt.impl.APIConstants;\n+import org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO;\n+import org.wso2.carbon.apimgt.impl.dto.WorkflowDTO;\n+import org.wso2.carbon.apimgt.impl.internal.ServiceReferenceHolder;\n+import org.wso2.carbon.apimgt.impl.utils.APIUtil;\n+import org.wso2.carbon.context.PrivilegedCarbonContext;\n+import org.wso2.carbon.governance.api.generic.dataobjects.GenericArtifact;\n+import org.wso2.carbon.registry.core.Registry;\n+import org.wso2.carbon.registry.core.exceptions.RegistryException;\n+\n+import java.util.*;\n+\n+public class APIStateChangeApprovalWorkflowExecutor extends WorkflowExecutor{\n+\n+    private static final Log log = LogFactory.getLog(APIStateChangeWSWorkflowExecutor.class);\n+    private String stateList;\n+\n+    public String getStateList() {\n+        return stateList;\n+    }\n+\n+    public void setStateList(String stateList) {\n+        this.stateList = stateList;\n+    }\n+\n+\n+    @Override\n+    public String getWorkflowType() {\n+        return WorkflowConstants.WF_TYPE_AM_API_STATE;\n+    }\n+\n+    @Override\n+    public List<WorkflowDTO> getWorkflowDetails(String workflowStatus) throws WorkflowException {\n+        return Collections.emptyList();\n+    }\n+\n+    @Override\n+    public WorkflowResponse execute(WorkflowDTO workflowDTO) throws WorkflowException {\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Executing API State change Workflow.\");\n+            log.debug(\"Execute workflowDTO \" + workflowDTO.toString());\n+        }\n+\n+        if (stateList != null) {\n+            Map<String, List<String>> stateActionMap = getSelectedStatesToApprove();\n+            APIStateWorkflowDTO apiStateWorkFlowDTO = (APIStateWorkflowDTO) workflowDTO;\n+\n+            if (stateActionMap.containsKey(apiStateWorkFlowDTO.getApiCurrentState().toUpperCase())\n+                    && stateActionMap.get(apiStateWorkFlowDTO.getApiCurrentState().toUpperCase())\n+                    .contains(apiStateWorkFlowDTO.getApiLCAction())) {\n+\n+                String callBackURL = apiStateWorkFlowDTO.getCallbackUrl();\n+                String message = \"Approval request for API State change action '\" + apiStateWorkFlowDTO.getApiLCAction()\n+                        + \"' from '\" + apiStateWorkFlowDTO.getApiCurrentState() + \"' state for the API '\"\n+                        + apiStateWorkFlowDTO.getApiName() + \" : \" + apiStateWorkFlowDTO.getApiVersion() + \"' by \"\n+                        + apiStateWorkFlowDTO.getApiProvider() + \"\";\n+\n+                apiStateWorkFlowDTO.setWorkflowDescription(message);\n+\n+                apiStateWorkFlowDTO.setMetadata(\"ClientId\", apiStateWorkFlowDTO.getClientId());\n+                apiStateWorkFlowDTO.setMetadata(\"ClientSecret\", apiStateWorkFlowDTO.getClientSecret());\n+                apiStateWorkFlowDTO.setMetadata(\"Scope\", apiStateWorkFlowDTO.getScope());\n+                apiStateWorkFlowDTO.setMetadata(\"TokenAPI\", apiStateWorkFlowDTO.getTokenAPI());\n+                apiStateWorkFlowDTO.setMetadata(\"CurrentState\", apiStateWorkFlowDTO.getApiCurrentState());\n+                apiStateWorkFlowDTO.setMetadata(\"Action\", apiStateWorkFlowDTO.getApiLCAction());\n+                apiStateWorkFlowDTO.setMetadata(\"ApiName\", apiStateWorkFlowDTO.getApiName());\n+                apiStateWorkFlowDTO.setMetadata(\"ApiVersion\", apiStateWorkFlowDTO.getApiVersion());\n+                apiStateWorkFlowDTO.setMetadata(\"ApiProvider\", apiStateWorkFlowDTO.getApiProvider());\n+                apiStateWorkFlowDTO.setMetadata(\"workflowExternalRef\", apiStateWorkFlowDTO.getExternalWorkflowReference());\n+                apiStateWorkFlowDTO.setMetadata(\"Invoker\", apiStateWorkFlowDTO.getInvoker());\n+                apiStateWorkFlowDTO.setMetadata(\"TenantId\", String.valueOf(apiStateWorkFlowDTO.getTenantId()));\n+                apiStateWorkFlowDTO.setMetadata(\"callBackURL\", callBackURL != null ? callBackURL : \"?\");\n+\n+                apiStateWorkFlowDTO.setProperties(\"Workflow Process\",\"Application Creation\");\n+\n+                super.execute(workflowDTO);\n+\n+                if (log.isDebugEnabled()) {\n+                    log.debug(\"APIStateChange payload: \");\n+                }\n+\n+            } else {\n+                // For any other states, act as simple workflow executor.\n+                workflowDTO.setStatus(WorkflowStatus.APPROVED);\n+                // calling super.complete() instead of complete() to act as the simpleworkflow executor\n+                super.complete(workflowDTO);\n+            }\n+        } else {\n+            String msg = \"State change list is not provided. Please check <stateList> element in \";", "originalCommit": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e00fe40f5ef809f1ac81dc7c22faacda062adfab", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/APIStateChangeApprovalWorkflowExecutor.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/APIStateChangeApprovalWorkflowExecutor.java\nindex b18c28630f1..cb79bf0aaf2 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/APIStateChangeApprovalWorkflowExecutor.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/APIStateChangeApprovalWorkflowExecutor.java\n", "chunk": "@@ -59,35 +84,20 @@ public class APIStateChangeApprovalWorkflowExecutor extends WorkflowExecutor{\n                     .contains(apiStateWorkFlowDTO.getApiLCAction())) {\n \n                 String callBackURL = apiStateWorkFlowDTO.getCallbackUrl();\n-                String message = \"Approval request for API State change action '\" + apiStateWorkFlowDTO.getApiLCAction()\n+                String message = \"Approval request for API state change action '\" + apiStateWorkFlowDTO.getApiLCAction()\n                         + \"' from '\" + apiStateWorkFlowDTO.getApiCurrentState() + \"' state for the API '\"\n                         + apiStateWorkFlowDTO.getApiName() + \" : \" + apiStateWorkFlowDTO.getApiVersion() + \"' by \"\n                         + apiStateWorkFlowDTO.getApiProvider() + \"\";\n \n                 apiStateWorkFlowDTO.setWorkflowDescription(message);\n-\n-                apiStateWorkFlowDTO.setMetadata(\"ClientId\", apiStateWorkFlowDTO.getClientId());\n-                apiStateWorkFlowDTO.setMetadata(\"ClientSecret\", apiStateWorkFlowDTO.getClientSecret());\n-                apiStateWorkFlowDTO.setMetadata(\"Scope\", apiStateWorkFlowDTO.getScope());\n-                apiStateWorkFlowDTO.setMetadata(\"TokenAPI\", apiStateWorkFlowDTO.getTokenAPI());\n                 apiStateWorkFlowDTO.setMetadata(\"CurrentState\", apiStateWorkFlowDTO.getApiCurrentState());\n                 apiStateWorkFlowDTO.setMetadata(\"Action\", apiStateWorkFlowDTO.getApiLCAction());\n                 apiStateWorkFlowDTO.setMetadata(\"ApiName\", apiStateWorkFlowDTO.getApiName());\n                 apiStateWorkFlowDTO.setMetadata(\"ApiVersion\", apiStateWorkFlowDTO.getApiVersion());\n                 apiStateWorkFlowDTO.setMetadata(\"ApiProvider\", apiStateWorkFlowDTO.getApiProvider());\n-                apiStateWorkFlowDTO.setMetadata(\"workflowExternalRef\", apiStateWorkFlowDTO.getExternalWorkflowReference());\n                 apiStateWorkFlowDTO.setMetadata(\"Invoker\", apiStateWorkFlowDTO.getInvoker());\n                 apiStateWorkFlowDTO.setMetadata(\"TenantId\", String.valueOf(apiStateWorkFlowDTO.getTenantId()));\n-                apiStateWorkFlowDTO.setMetadata(\"callBackURL\", callBackURL != null ? callBackURL : \"?\");\n-\n-                apiStateWorkFlowDTO.setProperties(\"Workflow Process\",\"Application Creation\");\n-\n                 super.execute(workflowDTO);\n-\n-                if (log.isDebugEnabled()) {\n-                    log.debug(\"APIStateChange payload: \");\n-                }\n-\n             } else {\n                 // For any other states, act as simple workflow executor.\n                 workflowDTO.setStatus(WorkflowStatus.APPROVED);\n", "next_change": null}, {"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/APIStateChangeApprovalWorkflowExecutor.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/APIStateChangeApprovalWorkflowExecutor.java\nindex b18c28630f1..cb79bf0aaf2 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/APIStateChangeApprovalWorkflowExecutor.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/APIStateChangeApprovalWorkflowExecutor.java\n", "chunk": "@@ -95,42 +105,37 @@ public class APIStateChangeApprovalWorkflowExecutor extends WorkflowExecutor{\n                 super.complete(workflowDTO);\n             }\n         } else {\n-            String msg = \"State change list is not provided. Please check <stateList> element in \";\n+            String msg = \"State change list is not provided. Please check <stateList> element in workflow-extensions.xml\";\n             log.error(msg);\n             throw new WorkflowException(msg);\n         }\n-\n         return new GeneralWorkflowResponse();\n     }\n \n     /**\n-     * Complete the API state change workflow process.\n+     * Complete the API state change workflow approval process.\n+     * @param workflowDTO\n      */\n     @Override\n-    public WorkflowResponse complete(WorkflowDTO workflowDTO) throws WorkflowException{\n+    public WorkflowResponse complete(WorkflowDTO workflowDTO) throws WorkflowException {\n         if (log.isDebugEnabled()) {\n             log.debug(\"Completing API State change Workflow..\");\n-            log.debug(\"response: \" + workflowDTO.toString());\n         }\n-\n         workflowDTO.setUpdatedTime(System.currentTimeMillis());\n         super.complete(workflowDTO);\n-\n         String externalWorkflowRef=workflowDTO.getExternalWorkflowReference();\n \n         try {\n-            ApiMgtDAO apiMgtDAO1 = ApiMgtDAO.getInstance();\n-            Workflow workflow = apiMgtDAO1.getworkflowReferenceByExternalWorkflowReference(externalWorkflowRef);\n-\n+            ApiMgtDAO apiMgtDAO = ApiMgtDAO.getInstance();\n+            Workflow workflow = apiMgtDAO.getworkflowReferenceByExternalWorkflowReference(externalWorkflowRef);\n             String apiName = workflow.getMetadata(\"ApiName\");\n             String action = workflow.getMetadata(\"Action\");\n             String providerName = workflow.getMetadata(\"ApiProvider\");\n             String version = workflow.getMetadata(\"ApiVersion\");\n             String invoker = workflow.getMetadata(\"Invoker\");\n             String currentStatus = workflow.getMetadata(\"CurrentState\");\n-\n             int tenantId = workflowDTO.getTenantId();\n-            ApiMgtDAO apiMgtDAO = ApiMgtDAO.getInstance();\n+            //ApiMgtDAO apiMgtDAO = ApiMgtDAO.getInstance();\n             try {\n                 //tenant flow is already started from the rest api service impl. no need to start from here\n                 PrivilegedCarbonContext.getThreadLocalCarbonContext().setUsername(invoker);\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyMzY3Ng==", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r406623676", "body": "where is the payload??", "bodyText": "where is the payload??", "bodyHTML": "<p dir=\"auto\">where is the payload??</p>", "author": "chamilaadhi", "createdAt": "2020-04-10T06:34:07Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/APIStateChangeApprovalWorkflowExecutor.java", "diffHunk": "@@ -0,0 +1,223 @@\n+package org.wso2.carbon.apimgt.impl.workflow;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n+import org.wso2.carbon.apimgt.api.WorkflowResponse;\n+import org.wso2.carbon.apimgt.api.model.APIIdentifier;\n+import org.wso2.carbon.apimgt.api.model.Workflow;\n+import org.wso2.carbon.apimgt.impl.APIConstants;\n+import org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO;\n+import org.wso2.carbon.apimgt.impl.dto.WorkflowDTO;\n+import org.wso2.carbon.apimgt.impl.internal.ServiceReferenceHolder;\n+import org.wso2.carbon.apimgt.impl.utils.APIUtil;\n+import org.wso2.carbon.context.PrivilegedCarbonContext;\n+import org.wso2.carbon.governance.api.generic.dataobjects.GenericArtifact;\n+import org.wso2.carbon.registry.core.Registry;\n+import org.wso2.carbon.registry.core.exceptions.RegistryException;\n+\n+import java.util.*;\n+\n+public class APIStateChangeApprovalWorkflowExecutor extends WorkflowExecutor{\n+\n+    private static final Log log = LogFactory.getLog(APIStateChangeWSWorkflowExecutor.class);\n+    private String stateList;\n+\n+    public String getStateList() {\n+        return stateList;\n+    }\n+\n+    public void setStateList(String stateList) {\n+        this.stateList = stateList;\n+    }\n+\n+\n+    @Override\n+    public String getWorkflowType() {\n+        return WorkflowConstants.WF_TYPE_AM_API_STATE;\n+    }\n+\n+    @Override\n+    public List<WorkflowDTO> getWorkflowDetails(String workflowStatus) throws WorkflowException {\n+        return Collections.emptyList();\n+    }\n+\n+    @Override\n+    public WorkflowResponse execute(WorkflowDTO workflowDTO) throws WorkflowException {\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Executing API State change Workflow.\");\n+            log.debug(\"Execute workflowDTO \" + workflowDTO.toString());\n+        }\n+\n+        if (stateList != null) {\n+            Map<String, List<String>> stateActionMap = getSelectedStatesToApprove();\n+            APIStateWorkflowDTO apiStateWorkFlowDTO = (APIStateWorkflowDTO) workflowDTO;\n+\n+            if (stateActionMap.containsKey(apiStateWorkFlowDTO.getApiCurrentState().toUpperCase())\n+                    && stateActionMap.get(apiStateWorkFlowDTO.getApiCurrentState().toUpperCase())\n+                    .contains(apiStateWorkFlowDTO.getApiLCAction())) {\n+\n+                String callBackURL = apiStateWorkFlowDTO.getCallbackUrl();\n+                String message = \"Approval request for API State change action '\" + apiStateWorkFlowDTO.getApiLCAction()\n+                        + \"' from '\" + apiStateWorkFlowDTO.getApiCurrentState() + \"' state for the API '\"\n+                        + apiStateWorkFlowDTO.getApiName() + \" : \" + apiStateWorkFlowDTO.getApiVersion() + \"' by \"\n+                        + apiStateWorkFlowDTO.getApiProvider() + \"\";\n+\n+                apiStateWorkFlowDTO.setWorkflowDescription(message);\n+\n+                apiStateWorkFlowDTO.setMetadata(\"ClientId\", apiStateWorkFlowDTO.getClientId());\n+                apiStateWorkFlowDTO.setMetadata(\"ClientSecret\", apiStateWorkFlowDTO.getClientSecret());\n+                apiStateWorkFlowDTO.setMetadata(\"Scope\", apiStateWorkFlowDTO.getScope());\n+                apiStateWorkFlowDTO.setMetadata(\"TokenAPI\", apiStateWorkFlowDTO.getTokenAPI());\n+                apiStateWorkFlowDTO.setMetadata(\"CurrentState\", apiStateWorkFlowDTO.getApiCurrentState());\n+                apiStateWorkFlowDTO.setMetadata(\"Action\", apiStateWorkFlowDTO.getApiLCAction());\n+                apiStateWorkFlowDTO.setMetadata(\"ApiName\", apiStateWorkFlowDTO.getApiName());\n+                apiStateWorkFlowDTO.setMetadata(\"ApiVersion\", apiStateWorkFlowDTO.getApiVersion());\n+                apiStateWorkFlowDTO.setMetadata(\"ApiProvider\", apiStateWorkFlowDTO.getApiProvider());\n+                apiStateWorkFlowDTO.setMetadata(\"workflowExternalRef\", apiStateWorkFlowDTO.getExternalWorkflowReference());\n+                apiStateWorkFlowDTO.setMetadata(\"Invoker\", apiStateWorkFlowDTO.getInvoker());\n+                apiStateWorkFlowDTO.setMetadata(\"TenantId\", String.valueOf(apiStateWorkFlowDTO.getTenantId()));\n+                apiStateWorkFlowDTO.setMetadata(\"callBackURL\", callBackURL != null ? callBackURL : \"?\");\n+\n+                apiStateWorkFlowDTO.setProperties(\"Workflow Process\",\"Application Creation\");\n+\n+                super.execute(workflowDTO);\n+\n+                if (log.isDebugEnabled()) {\n+                    log.debug(\"APIStateChange payload: \");", "originalCommit": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e00fe40f5ef809f1ac81dc7c22faacda062adfab", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/APIStateChangeApprovalWorkflowExecutor.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/APIStateChangeApprovalWorkflowExecutor.java\nindex b18c28630f1..cb79bf0aaf2 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/APIStateChangeApprovalWorkflowExecutor.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/APIStateChangeApprovalWorkflowExecutor.java\n", "chunk": "@@ -59,35 +84,20 @@ public class APIStateChangeApprovalWorkflowExecutor extends WorkflowExecutor{\n                     .contains(apiStateWorkFlowDTO.getApiLCAction())) {\n \n                 String callBackURL = apiStateWorkFlowDTO.getCallbackUrl();\n-                String message = \"Approval request for API State change action '\" + apiStateWorkFlowDTO.getApiLCAction()\n+                String message = \"Approval request for API state change action '\" + apiStateWorkFlowDTO.getApiLCAction()\n                         + \"' from '\" + apiStateWorkFlowDTO.getApiCurrentState() + \"' state for the API '\"\n                         + apiStateWorkFlowDTO.getApiName() + \" : \" + apiStateWorkFlowDTO.getApiVersion() + \"' by \"\n                         + apiStateWorkFlowDTO.getApiProvider() + \"\";\n \n                 apiStateWorkFlowDTO.setWorkflowDescription(message);\n-\n-                apiStateWorkFlowDTO.setMetadata(\"ClientId\", apiStateWorkFlowDTO.getClientId());\n-                apiStateWorkFlowDTO.setMetadata(\"ClientSecret\", apiStateWorkFlowDTO.getClientSecret());\n-                apiStateWorkFlowDTO.setMetadata(\"Scope\", apiStateWorkFlowDTO.getScope());\n-                apiStateWorkFlowDTO.setMetadata(\"TokenAPI\", apiStateWorkFlowDTO.getTokenAPI());\n                 apiStateWorkFlowDTO.setMetadata(\"CurrentState\", apiStateWorkFlowDTO.getApiCurrentState());\n                 apiStateWorkFlowDTO.setMetadata(\"Action\", apiStateWorkFlowDTO.getApiLCAction());\n                 apiStateWorkFlowDTO.setMetadata(\"ApiName\", apiStateWorkFlowDTO.getApiName());\n                 apiStateWorkFlowDTO.setMetadata(\"ApiVersion\", apiStateWorkFlowDTO.getApiVersion());\n                 apiStateWorkFlowDTO.setMetadata(\"ApiProvider\", apiStateWorkFlowDTO.getApiProvider());\n-                apiStateWorkFlowDTO.setMetadata(\"workflowExternalRef\", apiStateWorkFlowDTO.getExternalWorkflowReference());\n                 apiStateWorkFlowDTO.setMetadata(\"Invoker\", apiStateWorkFlowDTO.getInvoker());\n                 apiStateWorkFlowDTO.setMetadata(\"TenantId\", String.valueOf(apiStateWorkFlowDTO.getTenantId()));\n-                apiStateWorkFlowDTO.setMetadata(\"callBackURL\", callBackURL != null ? callBackURL : \"?\");\n-\n-                apiStateWorkFlowDTO.setProperties(\"Workflow Process\",\"Application Creation\");\n-\n                 super.execute(workflowDTO);\n-\n-                if (log.isDebugEnabled()) {\n-                    log.debug(\"APIStateChange payload: \");\n-                }\n-\n             } else {\n                 // For any other states, act as simple workflow executor.\n                 workflowDTO.setStatus(WorkflowStatus.APPROVED);\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyNDYxNg==", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r406624616", "body": "You don't have to set all this information as metadata. ClientId, ClientSecret, Scope, TokenAPI, workflowExternalRef, callBackURL are not needed. plz remove them", "bodyText": "You don't have to set all this information as metadata. ClientId, ClientSecret, Scope, TokenAPI, workflowExternalRef, callBackURL are not needed. plz remove them", "bodyHTML": "<p dir=\"auto\">You don't have to set all this information as metadata. ClientId, ClientSecret, Scope, TokenAPI, workflowExternalRef, callBackURL are not needed. plz remove them</p>", "author": "chamilaadhi", "createdAt": "2020-04-10T06:37:51Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/APIStateChangeApprovalWorkflowExecutor.java", "diffHunk": "@@ -0,0 +1,223 @@\n+package org.wso2.carbon.apimgt.impl.workflow;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n+import org.wso2.carbon.apimgt.api.WorkflowResponse;\n+import org.wso2.carbon.apimgt.api.model.APIIdentifier;\n+import org.wso2.carbon.apimgt.api.model.Workflow;\n+import org.wso2.carbon.apimgt.impl.APIConstants;\n+import org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO;\n+import org.wso2.carbon.apimgt.impl.dto.WorkflowDTO;\n+import org.wso2.carbon.apimgt.impl.internal.ServiceReferenceHolder;\n+import org.wso2.carbon.apimgt.impl.utils.APIUtil;\n+import org.wso2.carbon.context.PrivilegedCarbonContext;\n+import org.wso2.carbon.governance.api.generic.dataobjects.GenericArtifact;\n+import org.wso2.carbon.registry.core.Registry;\n+import org.wso2.carbon.registry.core.exceptions.RegistryException;\n+\n+import java.util.*;\n+\n+public class APIStateChangeApprovalWorkflowExecutor extends WorkflowExecutor{\n+\n+    private static final Log log = LogFactory.getLog(APIStateChangeWSWorkflowExecutor.class);\n+    private String stateList;\n+\n+    public String getStateList() {\n+        return stateList;\n+    }\n+\n+    public void setStateList(String stateList) {\n+        this.stateList = stateList;\n+    }\n+\n+\n+    @Override\n+    public String getWorkflowType() {\n+        return WorkflowConstants.WF_TYPE_AM_API_STATE;\n+    }\n+\n+    @Override\n+    public List<WorkflowDTO> getWorkflowDetails(String workflowStatus) throws WorkflowException {\n+        return Collections.emptyList();\n+    }\n+\n+    @Override\n+    public WorkflowResponse execute(WorkflowDTO workflowDTO) throws WorkflowException {\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Executing API State change Workflow.\");\n+            log.debug(\"Execute workflowDTO \" + workflowDTO.toString());\n+        }\n+\n+        if (stateList != null) {\n+            Map<String, List<String>> stateActionMap = getSelectedStatesToApprove();\n+            APIStateWorkflowDTO apiStateWorkFlowDTO = (APIStateWorkflowDTO) workflowDTO;\n+\n+            if (stateActionMap.containsKey(apiStateWorkFlowDTO.getApiCurrentState().toUpperCase())\n+                    && stateActionMap.get(apiStateWorkFlowDTO.getApiCurrentState().toUpperCase())\n+                    .contains(apiStateWorkFlowDTO.getApiLCAction())) {\n+\n+                String callBackURL = apiStateWorkFlowDTO.getCallbackUrl();\n+                String message = \"Approval request for API State change action '\" + apiStateWorkFlowDTO.getApiLCAction()\n+                        + \"' from '\" + apiStateWorkFlowDTO.getApiCurrentState() + \"' state for the API '\"\n+                        + apiStateWorkFlowDTO.getApiName() + \" : \" + apiStateWorkFlowDTO.getApiVersion() + \"' by \"\n+                        + apiStateWorkFlowDTO.getApiProvider() + \"\";\n+\n+                apiStateWorkFlowDTO.setWorkflowDescription(message);\n+\n+                apiStateWorkFlowDTO.setMetadata(\"ClientId\", apiStateWorkFlowDTO.getClientId());\n+                apiStateWorkFlowDTO.setMetadata(\"ClientSecret\", apiStateWorkFlowDTO.getClientSecret());\n+                apiStateWorkFlowDTO.setMetadata(\"Scope\", apiStateWorkFlowDTO.getScope());\n+                apiStateWorkFlowDTO.setMetadata(\"TokenAPI\", apiStateWorkFlowDTO.getTokenAPI());\n+                apiStateWorkFlowDTO.setMetadata(\"CurrentState\", apiStateWorkFlowDTO.getApiCurrentState());\n+                apiStateWorkFlowDTO.setMetadata(\"Action\", apiStateWorkFlowDTO.getApiLCAction());\n+                apiStateWorkFlowDTO.setMetadata(\"ApiName\", apiStateWorkFlowDTO.getApiName());\n+                apiStateWorkFlowDTO.setMetadata(\"ApiVersion\", apiStateWorkFlowDTO.getApiVersion());\n+                apiStateWorkFlowDTO.setMetadata(\"ApiProvider\", apiStateWorkFlowDTO.getApiProvider());\n+                apiStateWorkFlowDTO.setMetadata(\"workflowExternalRef\", apiStateWorkFlowDTO.getExternalWorkflowReference());\n+                apiStateWorkFlowDTO.setMetadata(\"Invoker\", apiStateWorkFlowDTO.getInvoker());\n+                apiStateWorkFlowDTO.setMetadata(\"TenantId\", String.valueOf(apiStateWorkFlowDTO.getTenantId()));\n+                apiStateWorkFlowDTO.setMetadata(\"callBackURL\", callBackURL != null ? callBackURL : \"?\");\n+", "originalCommit": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e00fe40f5ef809f1ac81dc7c22faacda062adfab", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/APIStateChangeApprovalWorkflowExecutor.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/APIStateChangeApprovalWorkflowExecutor.java\nindex b18c28630f1..cb79bf0aaf2 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/APIStateChangeApprovalWorkflowExecutor.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/APIStateChangeApprovalWorkflowExecutor.java\n", "chunk": "@@ -59,35 +84,20 @@ public class APIStateChangeApprovalWorkflowExecutor extends WorkflowExecutor{\n                     .contains(apiStateWorkFlowDTO.getApiLCAction())) {\n \n                 String callBackURL = apiStateWorkFlowDTO.getCallbackUrl();\n-                String message = \"Approval request for API State change action '\" + apiStateWorkFlowDTO.getApiLCAction()\n+                String message = \"Approval request for API state change action '\" + apiStateWorkFlowDTO.getApiLCAction()\n                         + \"' from '\" + apiStateWorkFlowDTO.getApiCurrentState() + \"' state for the API '\"\n                         + apiStateWorkFlowDTO.getApiName() + \" : \" + apiStateWorkFlowDTO.getApiVersion() + \"' by \"\n                         + apiStateWorkFlowDTO.getApiProvider() + \"\";\n \n                 apiStateWorkFlowDTO.setWorkflowDescription(message);\n-\n-                apiStateWorkFlowDTO.setMetadata(\"ClientId\", apiStateWorkFlowDTO.getClientId());\n-                apiStateWorkFlowDTO.setMetadata(\"ClientSecret\", apiStateWorkFlowDTO.getClientSecret());\n-                apiStateWorkFlowDTO.setMetadata(\"Scope\", apiStateWorkFlowDTO.getScope());\n-                apiStateWorkFlowDTO.setMetadata(\"TokenAPI\", apiStateWorkFlowDTO.getTokenAPI());\n                 apiStateWorkFlowDTO.setMetadata(\"CurrentState\", apiStateWorkFlowDTO.getApiCurrentState());\n                 apiStateWorkFlowDTO.setMetadata(\"Action\", apiStateWorkFlowDTO.getApiLCAction());\n                 apiStateWorkFlowDTO.setMetadata(\"ApiName\", apiStateWorkFlowDTO.getApiName());\n                 apiStateWorkFlowDTO.setMetadata(\"ApiVersion\", apiStateWorkFlowDTO.getApiVersion());\n                 apiStateWorkFlowDTO.setMetadata(\"ApiProvider\", apiStateWorkFlowDTO.getApiProvider());\n-                apiStateWorkFlowDTO.setMetadata(\"workflowExternalRef\", apiStateWorkFlowDTO.getExternalWorkflowReference());\n                 apiStateWorkFlowDTO.setMetadata(\"Invoker\", apiStateWorkFlowDTO.getInvoker());\n                 apiStateWorkFlowDTO.setMetadata(\"TenantId\", String.valueOf(apiStateWorkFlowDTO.getTenantId()));\n-                apiStateWorkFlowDTO.setMetadata(\"callBackURL\", callBackURL != null ? callBackURL : \"?\");\n-\n-                apiStateWorkFlowDTO.setProperties(\"Workflow Process\",\"Application Creation\");\n-\n                 super.execute(workflowDTO);\n-\n-                if (log.isDebugEnabled()) {\n-                    log.debug(\"APIStateChange payload: \");\n-                }\n-\n             } else {\n                 // For any other states, act as simple workflow executor.\n                 workflowDTO.setStatus(WorkflowStatus.APPROVED);\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyNDgxMQ==", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r406624811", "body": "rename the variable name. don't use 1 ", "bodyText": "rename the variable name. don't use 1", "bodyHTML": "<p dir=\"auto\">rename the variable name. don't use 1</p>", "author": "chamilaadhi", "createdAt": "2020-04-10T06:38:35Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/APIStateChangeApprovalWorkflowExecutor.java", "diffHunk": "@@ -0,0 +1,223 @@\n+package org.wso2.carbon.apimgt.impl.workflow;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n+import org.wso2.carbon.apimgt.api.WorkflowResponse;\n+import org.wso2.carbon.apimgt.api.model.APIIdentifier;\n+import org.wso2.carbon.apimgt.api.model.Workflow;\n+import org.wso2.carbon.apimgt.impl.APIConstants;\n+import org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO;\n+import org.wso2.carbon.apimgt.impl.dto.WorkflowDTO;\n+import org.wso2.carbon.apimgt.impl.internal.ServiceReferenceHolder;\n+import org.wso2.carbon.apimgt.impl.utils.APIUtil;\n+import org.wso2.carbon.context.PrivilegedCarbonContext;\n+import org.wso2.carbon.governance.api.generic.dataobjects.GenericArtifact;\n+import org.wso2.carbon.registry.core.Registry;\n+import org.wso2.carbon.registry.core.exceptions.RegistryException;\n+\n+import java.util.*;\n+\n+public class APIStateChangeApprovalWorkflowExecutor extends WorkflowExecutor{\n+\n+    private static final Log log = LogFactory.getLog(APIStateChangeWSWorkflowExecutor.class);\n+    private String stateList;\n+\n+    public String getStateList() {\n+        return stateList;\n+    }\n+\n+    public void setStateList(String stateList) {\n+        this.stateList = stateList;\n+    }\n+\n+\n+    @Override\n+    public String getWorkflowType() {\n+        return WorkflowConstants.WF_TYPE_AM_API_STATE;\n+    }\n+\n+    @Override\n+    public List<WorkflowDTO> getWorkflowDetails(String workflowStatus) throws WorkflowException {\n+        return Collections.emptyList();\n+    }\n+\n+    @Override\n+    public WorkflowResponse execute(WorkflowDTO workflowDTO) throws WorkflowException {\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Executing API State change Workflow.\");\n+            log.debug(\"Execute workflowDTO \" + workflowDTO.toString());\n+        }\n+\n+        if (stateList != null) {\n+            Map<String, List<String>> stateActionMap = getSelectedStatesToApprove();\n+            APIStateWorkflowDTO apiStateWorkFlowDTO = (APIStateWorkflowDTO) workflowDTO;\n+\n+            if (stateActionMap.containsKey(apiStateWorkFlowDTO.getApiCurrentState().toUpperCase())\n+                    && stateActionMap.get(apiStateWorkFlowDTO.getApiCurrentState().toUpperCase())\n+                    .contains(apiStateWorkFlowDTO.getApiLCAction())) {\n+\n+                String callBackURL = apiStateWorkFlowDTO.getCallbackUrl();\n+                String message = \"Approval request for API State change action '\" + apiStateWorkFlowDTO.getApiLCAction()\n+                        + \"' from '\" + apiStateWorkFlowDTO.getApiCurrentState() + \"' state for the API '\"\n+                        + apiStateWorkFlowDTO.getApiName() + \" : \" + apiStateWorkFlowDTO.getApiVersion() + \"' by \"\n+                        + apiStateWorkFlowDTO.getApiProvider() + \"\";\n+\n+                apiStateWorkFlowDTO.setWorkflowDescription(message);\n+\n+                apiStateWorkFlowDTO.setMetadata(\"ClientId\", apiStateWorkFlowDTO.getClientId());\n+                apiStateWorkFlowDTO.setMetadata(\"ClientSecret\", apiStateWorkFlowDTO.getClientSecret());\n+                apiStateWorkFlowDTO.setMetadata(\"Scope\", apiStateWorkFlowDTO.getScope());\n+                apiStateWorkFlowDTO.setMetadata(\"TokenAPI\", apiStateWorkFlowDTO.getTokenAPI());\n+                apiStateWorkFlowDTO.setMetadata(\"CurrentState\", apiStateWorkFlowDTO.getApiCurrentState());\n+                apiStateWorkFlowDTO.setMetadata(\"Action\", apiStateWorkFlowDTO.getApiLCAction());\n+                apiStateWorkFlowDTO.setMetadata(\"ApiName\", apiStateWorkFlowDTO.getApiName());\n+                apiStateWorkFlowDTO.setMetadata(\"ApiVersion\", apiStateWorkFlowDTO.getApiVersion());\n+                apiStateWorkFlowDTO.setMetadata(\"ApiProvider\", apiStateWorkFlowDTO.getApiProvider());\n+                apiStateWorkFlowDTO.setMetadata(\"workflowExternalRef\", apiStateWorkFlowDTO.getExternalWorkflowReference());\n+                apiStateWorkFlowDTO.setMetadata(\"Invoker\", apiStateWorkFlowDTO.getInvoker());\n+                apiStateWorkFlowDTO.setMetadata(\"TenantId\", String.valueOf(apiStateWorkFlowDTO.getTenantId()));\n+                apiStateWorkFlowDTO.setMetadata(\"callBackURL\", callBackURL != null ? callBackURL : \"?\");\n+\n+                apiStateWorkFlowDTO.setProperties(\"Workflow Process\",\"Application Creation\");\n+\n+                super.execute(workflowDTO);\n+\n+                if (log.isDebugEnabled()) {\n+                    log.debug(\"APIStateChange payload: \");\n+                }\n+\n+            } else {\n+                // For any other states, act as simple workflow executor.\n+                workflowDTO.setStatus(WorkflowStatus.APPROVED);\n+                // calling super.complete() instead of complete() to act as the simpleworkflow executor\n+                super.complete(workflowDTO);\n+            }\n+        } else {\n+            String msg = \"State change list is not provided. Please check <stateList> element in \";\n+            log.error(msg);\n+            throw new WorkflowException(msg);\n+        }\n+\n+        return new GeneralWorkflowResponse();\n+    }\n+\n+    /**\n+     * Complete the API state change workflow process.\n+     */\n+    @Override\n+    public WorkflowResponse complete(WorkflowDTO workflowDTO) throws WorkflowException{\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Completing API State change Workflow..\");\n+            log.debug(\"response: \" + workflowDTO.toString());\n+        }\n+\n+        workflowDTO.setUpdatedTime(System.currentTimeMillis());\n+        super.complete(workflowDTO);\n+\n+        String externalWorkflowRef=workflowDTO.getExternalWorkflowReference();\n+\n+        try {\n+            ApiMgtDAO apiMgtDAO1 = ApiMgtDAO.getInstance();", "originalCommit": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e00fe40f5ef809f1ac81dc7c22faacda062adfab", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/APIStateChangeApprovalWorkflowExecutor.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/APIStateChangeApprovalWorkflowExecutor.java\nindex b18c28630f1..cb79bf0aaf2 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/APIStateChangeApprovalWorkflowExecutor.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/APIStateChangeApprovalWorkflowExecutor.java\n", "chunk": "@@ -95,42 +105,37 @@ public class APIStateChangeApprovalWorkflowExecutor extends WorkflowExecutor{\n                 super.complete(workflowDTO);\n             }\n         } else {\n-            String msg = \"State change list is not provided. Please check <stateList> element in \";\n+            String msg = \"State change list is not provided. Please check <stateList> element in workflow-extensions.xml\";\n             log.error(msg);\n             throw new WorkflowException(msg);\n         }\n-\n         return new GeneralWorkflowResponse();\n     }\n \n     /**\n-     * Complete the API state change workflow process.\n+     * Complete the API state change workflow approval process.\n+     * @param workflowDTO\n      */\n     @Override\n-    public WorkflowResponse complete(WorkflowDTO workflowDTO) throws WorkflowException{\n+    public WorkflowResponse complete(WorkflowDTO workflowDTO) throws WorkflowException {\n         if (log.isDebugEnabled()) {\n             log.debug(\"Completing API State change Workflow..\");\n-            log.debug(\"response: \" + workflowDTO.toString());\n         }\n-\n         workflowDTO.setUpdatedTime(System.currentTimeMillis());\n         super.complete(workflowDTO);\n-\n         String externalWorkflowRef=workflowDTO.getExternalWorkflowReference();\n \n         try {\n-            ApiMgtDAO apiMgtDAO1 = ApiMgtDAO.getInstance();\n-            Workflow workflow = apiMgtDAO1.getworkflowReferenceByExternalWorkflowReference(externalWorkflowRef);\n-\n+            ApiMgtDAO apiMgtDAO = ApiMgtDAO.getInstance();\n+            Workflow workflow = apiMgtDAO.getworkflowReferenceByExternalWorkflowReference(externalWorkflowRef);\n             String apiName = workflow.getMetadata(\"ApiName\");\n             String action = workflow.getMetadata(\"Action\");\n             String providerName = workflow.getMetadata(\"ApiProvider\");\n             String version = workflow.getMetadata(\"ApiVersion\");\n             String invoker = workflow.getMetadata(\"Invoker\");\n             String currentStatus = workflow.getMetadata(\"CurrentState\");\n-\n             int tenantId = workflowDTO.getTenantId();\n-            ApiMgtDAO apiMgtDAO = ApiMgtDAO.getInstance();\n+            //ApiMgtDAO apiMgtDAO = ApiMgtDAO.getInstance();\n             try {\n                 //tenant flow is already started from the rest api service impl. no need to start from here\n                 PrivilegedCarbonContext.getThreadLocalCarbonContext().setUsername(invoker);\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyNTAyOA==", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r406625028", "body": "use the previous apiMgtDAO instead of creating a new variable", "bodyText": "use the previous apiMgtDAO instead of creating a new variable", "bodyHTML": "<p dir=\"auto\">use the previous apiMgtDAO instead of creating a new variable</p>", "author": "chamilaadhi", "createdAt": "2020-04-10T06:39:17Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/APIStateChangeApprovalWorkflowExecutor.java", "diffHunk": "@@ -0,0 +1,223 @@\n+package org.wso2.carbon.apimgt.impl.workflow;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n+import org.wso2.carbon.apimgt.api.WorkflowResponse;\n+import org.wso2.carbon.apimgt.api.model.APIIdentifier;\n+import org.wso2.carbon.apimgt.api.model.Workflow;\n+import org.wso2.carbon.apimgt.impl.APIConstants;\n+import org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO;\n+import org.wso2.carbon.apimgt.impl.dto.WorkflowDTO;\n+import org.wso2.carbon.apimgt.impl.internal.ServiceReferenceHolder;\n+import org.wso2.carbon.apimgt.impl.utils.APIUtil;\n+import org.wso2.carbon.context.PrivilegedCarbonContext;\n+import org.wso2.carbon.governance.api.generic.dataobjects.GenericArtifact;\n+import org.wso2.carbon.registry.core.Registry;\n+import org.wso2.carbon.registry.core.exceptions.RegistryException;\n+\n+import java.util.*;\n+\n+public class APIStateChangeApprovalWorkflowExecutor extends WorkflowExecutor{\n+\n+    private static final Log log = LogFactory.getLog(APIStateChangeWSWorkflowExecutor.class);\n+    private String stateList;\n+\n+    public String getStateList() {\n+        return stateList;\n+    }\n+\n+    public void setStateList(String stateList) {\n+        this.stateList = stateList;\n+    }\n+\n+\n+    @Override\n+    public String getWorkflowType() {\n+        return WorkflowConstants.WF_TYPE_AM_API_STATE;\n+    }\n+\n+    @Override\n+    public List<WorkflowDTO> getWorkflowDetails(String workflowStatus) throws WorkflowException {\n+        return Collections.emptyList();\n+    }\n+\n+    @Override\n+    public WorkflowResponse execute(WorkflowDTO workflowDTO) throws WorkflowException {\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Executing API State change Workflow.\");\n+            log.debug(\"Execute workflowDTO \" + workflowDTO.toString());\n+        }\n+\n+        if (stateList != null) {\n+            Map<String, List<String>> stateActionMap = getSelectedStatesToApprove();\n+            APIStateWorkflowDTO apiStateWorkFlowDTO = (APIStateWorkflowDTO) workflowDTO;\n+\n+            if (stateActionMap.containsKey(apiStateWorkFlowDTO.getApiCurrentState().toUpperCase())\n+                    && stateActionMap.get(apiStateWorkFlowDTO.getApiCurrentState().toUpperCase())\n+                    .contains(apiStateWorkFlowDTO.getApiLCAction())) {\n+\n+                String callBackURL = apiStateWorkFlowDTO.getCallbackUrl();\n+                String message = \"Approval request for API State change action '\" + apiStateWorkFlowDTO.getApiLCAction()\n+                        + \"' from '\" + apiStateWorkFlowDTO.getApiCurrentState() + \"' state for the API '\"\n+                        + apiStateWorkFlowDTO.getApiName() + \" : \" + apiStateWorkFlowDTO.getApiVersion() + \"' by \"\n+                        + apiStateWorkFlowDTO.getApiProvider() + \"\";\n+\n+                apiStateWorkFlowDTO.setWorkflowDescription(message);\n+\n+                apiStateWorkFlowDTO.setMetadata(\"ClientId\", apiStateWorkFlowDTO.getClientId());\n+                apiStateWorkFlowDTO.setMetadata(\"ClientSecret\", apiStateWorkFlowDTO.getClientSecret());\n+                apiStateWorkFlowDTO.setMetadata(\"Scope\", apiStateWorkFlowDTO.getScope());\n+                apiStateWorkFlowDTO.setMetadata(\"TokenAPI\", apiStateWorkFlowDTO.getTokenAPI());\n+                apiStateWorkFlowDTO.setMetadata(\"CurrentState\", apiStateWorkFlowDTO.getApiCurrentState());\n+                apiStateWorkFlowDTO.setMetadata(\"Action\", apiStateWorkFlowDTO.getApiLCAction());\n+                apiStateWorkFlowDTO.setMetadata(\"ApiName\", apiStateWorkFlowDTO.getApiName());\n+                apiStateWorkFlowDTO.setMetadata(\"ApiVersion\", apiStateWorkFlowDTO.getApiVersion());\n+                apiStateWorkFlowDTO.setMetadata(\"ApiProvider\", apiStateWorkFlowDTO.getApiProvider());\n+                apiStateWorkFlowDTO.setMetadata(\"workflowExternalRef\", apiStateWorkFlowDTO.getExternalWorkflowReference());\n+                apiStateWorkFlowDTO.setMetadata(\"Invoker\", apiStateWorkFlowDTO.getInvoker());\n+                apiStateWorkFlowDTO.setMetadata(\"TenantId\", String.valueOf(apiStateWorkFlowDTO.getTenantId()));\n+                apiStateWorkFlowDTO.setMetadata(\"callBackURL\", callBackURL != null ? callBackURL : \"?\");\n+\n+                apiStateWorkFlowDTO.setProperties(\"Workflow Process\",\"Application Creation\");\n+\n+                super.execute(workflowDTO);\n+\n+                if (log.isDebugEnabled()) {\n+                    log.debug(\"APIStateChange payload: \");\n+                }\n+\n+            } else {\n+                // For any other states, act as simple workflow executor.\n+                workflowDTO.setStatus(WorkflowStatus.APPROVED);\n+                // calling super.complete() instead of complete() to act as the simpleworkflow executor\n+                super.complete(workflowDTO);\n+            }\n+        } else {\n+            String msg = \"State change list is not provided. Please check <stateList> element in \";\n+            log.error(msg);\n+            throw new WorkflowException(msg);\n+        }\n+\n+        return new GeneralWorkflowResponse();\n+    }\n+\n+    /**\n+     * Complete the API state change workflow process.\n+     */\n+    @Override\n+    public WorkflowResponse complete(WorkflowDTO workflowDTO) throws WorkflowException{\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Completing API State change Workflow..\");\n+            log.debug(\"response: \" + workflowDTO.toString());\n+        }\n+\n+        workflowDTO.setUpdatedTime(System.currentTimeMillis());\n+        super.complete(workflowDTO);\n+\n+        String externalWorkflowRef=workflowDTO.getExternalWorkflowReference();\n+\n+        try {\n+            ApiMgtDAO apiMgtDAO1 = ApiMgtDAO.getInstance();\n+            Workflow workflow = apiMgtDAO1.getworkflowReferenceByExternalWorkflowReference(externalWorkflowRef);\n+\n+            String apiName = workflow.getMetadata(\"ApiName\");\n+            String action = workflow.getMetadata(\"Action\");\n+            String providerName = workflow.getMetadata(\"ApiProvider\");\n+            String version = workflow.getMetadata(\"ApiVersion\");\n+            String invoker = workflow.getMetadata(\"Invoker\");\n+            String currentStatus = workflow.getMetadata(\"CurrentState\");\n+\n+            int tenantId = workflowDTO.getTenantId();\n+            ApiMgtDAO apiMgtDAO = ApiMgtDAO.getInstance();", "originalCommit": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e00fe40f5ef809f1ac81dc7c22faacda062adfab", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/APIStateChangeApprovalWorkflowExecutor.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/APIStateChangeApprovalWorkflowExecutor.java\nindex b18c28630f1..cb79bf0aaf2 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/APIStateChangeApprovalWorkflowExecutor.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/APIStateChangeApprovalWorkflowExecutor.java\n", "chunk": "@@ -95,42 +105,37 @@ public class APIStateChangeApprovalWorkflowExecutor extends WorkflowExecutor{\n                 super.complete(workflowDTO);\n             }\n         } else {\n-            String msg = \"State change list is not provided. Please check <stateList> element in \";\n+            String msg = \"State change list is not provided. Please check <stateList> element in workflow-extensions.xml\";\n             log.error(msg);\n             throw new WorkflowException(msg);\n         }\n-\n         return new GeneralWorkflowResponse();\n     }\n \n     /**\n-     * Complete the API state change workflow process.\n+     * Complete the API state change workflow approval process.\n+     * @param workflowDTO\n      */\n     @Override\n-    public WorkflowResponse complete(WorkflowDTO workflowDTO) throws WorkflowException{\n+    public WorkflowResponse complete(WorkflowDTO workflowDTO) throws WorkflowException {\n         if (log.isDebugEnabled()) {\n             log.debug(\"Completing API State change Workflow..\");\n-            log.debug(\"response: \" + workflowDTO.toString());\n         }\n-\n         workflowDTO.setUpdatedTime(System.currentTimeMillis());\n         super.complete(workflowDTO);\n-\n         String externalWorkflowRef=workflowDTO.getExternalWorkflowReference();\n \n         try {\n-            ApiMgtDAO apiMgtDAO1 = ApiMgtDAO.getInstance();\n-            Workflow workflow = apiMgtDAO1.getworkflowReferenceByExternalWorkflowReference(externalWorkflowRef);\n-\n+            ApiMgtDAO apiMgtDAO = ApiMgtDAO.getInstance();\n+            Workflow workflow = apiMgtDAO.getworkflowReferenceByExternalWorkflowReference(externalWorkflowRef);\n             String apiName = workflow.getMetadata(\"ApiName\");\n             String action = workflow.getMetadata(\"Action\");\n             String providerName = workflow.getMetadata(\"ApiProvider\");\n             String version = workflow.getMetadata(\"ApiVersion\");\n             String invoker = workflow.getMetadata(\"Invoker\");\n             String currentStatus = workflow.getMetadata(\"CurrentState\");\n-\n             int tenantId = workflowDTO.getTenantId();\n-            ApiMgtDAO apiMgtDAO = ApiMgtDAO.getInstance();\n+            //ApiMgtDAO apiMgtDAO = ApiMgtDAO.getInstance();\n             try {\n                 //tenant flow is already started from the rest api service impl. no need to start from here\n                 PrivilegedCarbonContext.getThreadLocalCarbonContext().setUsername(invoker);\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyNTMyMQ==", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r406625321", "body": "license header", "bodyText": "license header", "bodyHTML": "<p dir=\"auto\">license header</p>", "author": "chamilaadhi", "createdAt": "2020-04-10T06:40:26Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/ApplicationCreationApprovalWorkflowExecutor.java", "diffHunk": "@@ -0,0 +1,132 @@\n+package org.wso2.carbon.apimgt.impl.workflow;", "originalCommit": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc5MjU4OA==", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r410792588", "bodyText": "fixed with e00fe40", "author": "SahanHerath", "createdAt": "2020-04-19T02:05:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyNTMyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc5NjM0OA==", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r410796348", "bodyText": "changed year with 68b7419", "author": "SahanHerath", "createdAt": "2020-04-19T02:33:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyNTMyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "e00fe40f5ef809f1ac81dc7c22faacda062adfab", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/ApplicationCreationApprovalWorkflowExecutor.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/ApplicationCreationApprovalWorkflowExecutor.java\nindex 94da0ac8a1c..642be06b446 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/ApplicationCreationApprovalWorkflowExecutor.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/ApplicationCreationApprovalWorkflowExecutor.java\n", "chunk": "@@ -1,3 +1,20 @@\n+/*\n+ *  Copyright (c) 2016, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n package org.wso2.carbon.apimgt.impl.workflow;\n \n import org.apache.commons.logging.Log;\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyNTM5Mw==", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r406625393", "body": "class description", "bodyText": "class description", "bodyHTML": "<p dir=\"auto\">class description</p>", "author": "chamilaadhi", "createdAt": "2020-04-10T06:40:39Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/ApplicationCreationApprovalWorkflowExecutor.java", "diffHunk": "@@ -0,0 +1,132 @@\n+package org.wso2.carbon.apimgt.impl.workflow;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n+import org.wso2.carbon.apimgt.api.WorkflowResponse;\n+import org.wso2.carbon.apimgt.api.model.Application;\n+import org.wso2.carbon.apimgt.impl.APIConstants;\n+import org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO;\n+import org.wso2.carbon.apimgt.impl.dto.ApplicationWorkflowDTO;\n+import org.wso2.carbon.apimgt.impl.dto.WorkflowDTO;\n+\n+import java.util.List;\n+\n+public class ApplicationCreationApprovalWorkflowExecutor extends WorkflowExecutor{", "originalCommit": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc5MjYzMA==", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r410792630", "bodyText": "fixed with e00fe40", "author": "SahanHerath", "createdAt": "2020-04-19T02:05:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyNTM5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDMxMDE4OQ==", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r414310189", "bodyText": "formatting issue.", "author": "chamilaadhi", "createdAt": "2020-04-24T05:47:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyNTM5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "e00fe40f5ef809f1ac81dc7c22faacda062adfab", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/ApplicationCreationApprovalWorkflowExecutor.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/ApplicationCreationApprovalWorkflowExecutor.java\nindex 94da0ac8a1c..642be06b446 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/ApplicationCreationApprovalWorkflowExecutor.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/ApplicationCreationApprovalWorkflowExecutor.java\n", "chunk": "@@ -9,12 +26,14 @@ import org.wso2.carbon.apimgt.impl.APIConstants;\n import org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO;\n import org.wso2.carbon.apimgt.impl.dto.ApplicationWorkflowDTO;\n import org.wso2.carbon.apimgt.impl.dto.WorkflowDTO;\n-\n import java.util.List;\n \n+/**\n+ * Approval workflow for Application Creation.\n+ *\n+ */\n public class ApplicationCreationApprovalWorkflowExecutor extends WorkflowExecutor{\n \n-\n     private static final Log log = LogFactory.getLog(ApplicationCreationApprovalWorkflowExecutor.class);\n \n     @Override\n", "next_change": {"commit": "9b48a01776745e4804aee0554f67dde112e0ccdd", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/ApplicationCreationApprovalWorkflowExecutor.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/ApplicationCreationApprovalWorkflowExecutor.java\nindex 642be06b446..8b7487218af 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/ApplicationCreationApprovalWorkflowExecutor.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/ApplicationCreationApprovalWorkflowExecutor.java\n", "chunk": "@@ -32,7 +32,7 @@ import java.util.List;\n  * Approval workflow for Application Creation.\n  *\n  */\n-public class ApplicationCreationApprovalWorkflowExecutor extends WorkflowExecutor{\n+public class ApplicationCreationApprovalWorkflowExecutor extends WorkflowExecutor {\n \n     private static final Log log = LogFactory.getLog(ApplicationCreationApprovalWorkflowExecutor.class);\n \n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyNTQ4MA==", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r406625480", "body": "format whole class and remove spaces", "bodyText": "format whole class and remove spaces", "bodyHTML": "<p dir=\"auto\">format whole class and remove spaces</p>", "author": "chamilaadhi", "createdAt": "2020-04-10T06:41:00Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/ApplicationCreationApprovalWorkflowExecutor.java", "diffHunk": "@@ -0,0 +1,132 @@\n+package org.wso2.carbon.apimgt.impl.workflow;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n+import org.wso2.carbon.apimgt.api.WorkflowResponse;\n+import org.wso2.carbon.apimgt.api.model.Application;\n+import org.wso2.carbon.apimgt.impl.APIConstants;\n+import org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO;\n+import org.wso2.carbon.apimgt.impl.dto.ApplicationWorkflowDTO;\n+import org.wso2.carbon.apimgt.impl.dto.WorkflowDTO;\n+\n+import java.util.List;\n+\n+public class ApplicationCreationApprovalWorkflowExecutor extends WorkflowExecutor{\n+\n+", "originalCommit": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e00fe40f5ef809f1ac81dc7c22faacda062adfab", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/ApplicationCreationApprovalWorkflowExecutor.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/ApplicationCreationApprovalWorkflowExecutor.java\nindex 94da0ac8a1c..642be06b446 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/ApplicationCreationApprovalWorkflowExecutor.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/ApplicationCreationApprovalWorkflowExecutor.java\n", "chunk": "@@ -9,12 +26,14 @@ import org.wso2.carbon.apimgt.impl.APIConstants;\n import org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO;\n import org.wso2.carbon.apimgt.impl.dto.ApplicationWorkflowDTO;\n import org.wso2.carbon.apimgt.impl.dto.WorkflowDTO;\n-\n import java.util.List;\n \n+/**\n+ * Approval workflow for Application Creation.\n+ *\n+ */\n public class ApplicationCreationApprovalWorkflowExecutor extends WorkflowExecutor{\n \n-\n     private static final Log log = LogFactory.getLog(ApplicationCreationApprovalWorkflowExecutor.class);\n \n     @Override\n", "next_change": {"commit": "9b48a01776745e4804aee0554f67dde112e0ccdd", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/ApplicationCreationApprovalWorkflowExecutor.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/ApplicationCreationApprovalWorkflowExecutor.java\nindex 642be06b446..8b7487218af 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/ApplicationCreationApprovalWorkflowExecutor.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/ApplicationCreationApprovalWorkflowExecutor.java\n", "chunk": "@@ -32,7 +32,7 @@ import java.util.List;\n  * Approval workflow for Application Creation.\n  *\n  */\n-public class ApplicationCreationApprovalWorkflowExecutor extends WorkflowExecutor{\n+public class ApplicationCreationApprovalWorkflowExecutor extends WorkflowExecutor {\n \n     private static final Log log = LogFactory.getLog(ApplicationCreationApprovalWorkflowExecutor.class);\n \n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyNTYwOA==", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r406625608", "body": "no need to set this", "bodyText": "no need to set this", "bodyHTML": "<p dir=\"auto\">no need to set this</p>", "author": "chamilaadhi", "createdAt": "2020-04-10T06:41:32Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/ApplicationCreationApprovalWorkflowExecutor.java", "diffHunk": "@@ -0,0 +1,132 @@\n+package org.wso2.carbon.apimgt.impl.workflow;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n+import org.wso2.carbon.apimgt.api.WorkflowResponse;\n+import org.wso2.carbon.apimgt.api.model.Application;\n+import org.wso2.carbon.apimgt.impl.APIConstants;\n+import org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO;\n+import org.wso2.carbon.apimgt.impl.dto.ApplicationWorkflowDTO;\n+import org.wso2.carbon.apimgt.impl.dto.WorkflowDTO;\n+\n+import java.util.List;\n+\n+public class ApplicationCreationApprovalWorkflowExecutor extends WorkflowExecutor{\n+\n+\n+    private static final Log log = LogFactory.getLog(ApplicationCreationApprovalWorkflowExecutor.class);\n+\n+    @Override\n+    public String getWorkflowType() {\n+        return WorkflowConstants.WF_TYPE_AM_APPLICATION_CREATION;\n+    }\n+\n+    @Override\n+    public WorkflowResponse execute(WorkflowDTO workflowDTO) throws WorkflowException {\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Executing Application creation Workflow.\");\n+        }\n+\n+        ApplicationWorkflowDTO appWorkFlowDTO = (ApplicationWorkflowDTO) workflowDTO;\n+        Application application = appWorkFlowDTO.getApplication();\n+        String callBackURL = appWorkFlowDTO.getCallbackUrl();\n+\n+        String message=\"Approve application [\"+ application.getName() +\"] creation request from application creator -\"\n+                +appWorkFlowDTO.getUserName()+\" with throttling tier - \"+application.getTier();\n+\n+        workflowDTO.setWorkflowDescription(message);\n+\n+        workflowDTO.setMetadata(\"applicationName\", application.getName());\n+        workflowDTO.setMetadata(\"applicationTier\", application.getTier());\n+        workflowDTO.setMetadata(\"applicationCallbackUrl\", application.getCallbackUrl());\n+        workflowDTO.setMetadata(\"applicationDescription\", application.getDescription());\n+        workflowDTO.setMetadata(\"tenantDomain\", appWorkFlowDTO.getTenantDomain());\n+        workflowDTO.setMetadata(\"userName\", appWorkFlowDTO.getUserName());\n+        workflowDTO.setMetadata(\"workflowExternalRef\", appWorkFlowDTO.getExternalWorkflowReference());\n+        workflowDTO.setMetadata(\"callBackURL\", callBackURL != null ? callBackURL : \"?\");\n+\n+        workflowDTO.setProperties(\"Workflow Process\",\"Application Creation\");", "originalCommit": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e00fe40f5ef809f1ac81dc7c22faacda062adfab", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/ApplicationCreationApprovalWorkflowExecutor.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/ApplicationCreationApprovalWorkflowExecutor.java\nindex 94da0ac8a1c..642be06b446 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/ApplicationCreationApprovalWorkflowExecutor.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/ApplicationCreationApprovalWorkflowExecutor.java\n", "chunk": "@@ -31,34 +54,18 @@ public class ApplicationCreationApprovalWorkflowExecutor extends WorkflowExecuto\n         ApplicationWorkflowDTO appWorkFlowDTO = (ApplicationWorkflowDTO) workflowDTO;\n         Application application = appWorkFlowDTO.getApplication();\n         String callBackURL = appWorkFlowDTO.getCallbackUrl();\n-\n         String message=\"Approve application [\"+ application.getName() +\"] creation request from application creator -\"\n                 +appWorkFlowDTO.getUserName()+\" with throttling tier - \"+application.getTier();\n \n         workflowDTO.setWorkflowDescription(message);\n-\n-        workflowDTO.setMetadata(\"applicationName\", application.getName());\n-        workflowDTO.setMetadata(\"applicationTier\", application.getTier());\n-        workflowDTO.setMetadata(\"applicationCallbackUrl\", application.getCallbackUrl());\n-        workflowDTO.setMetadata(\"applicationDescription\", application.getDescription());\n-        workflowDTO.setMetadata(\"tenantDomain\", appWorkFlowDTO.getTenantDomain());\n-        workflowDTO.setMetadata(\"userName\", appWorkFlowDTO.getUserName());\n-        workflowDTO.setMetadata(\"workflowExternalRef\", appWorkFlowDTO.getExternalWorkflowReference());\n-        workflowDTO.setMetadata(\"callBackURL\", callBackURL != null ? callBackURL : \"?\");\n-\n-        workflowDTO.setProperties(\"Workflow Process\",\"Application Creation\");\n-\n         super.execute(workflowDTO);\n \n         return new GeneralWorkflowResponse();\n     }\n \n     /**\n-     * Complete the external process status.\n-     * Based on the workflow , we will update the status column of the\n-     * Application table\n-     *\n-     * @param workFlowDTO object\n+     * Complete the Application creation approval workflow peocess.\n+     * @param workFlowDTO\n      */\n     @Override\n     public WorkflowResponse complete(WorkflowDTO workFlowDTO) throws WorkflowException {\n", "next_change": {"commit": "9b48a01776745e4804aee0554f67dde112e0ccdd", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/ApplicationCreationApprovalWorkflowExecutor.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/ApplicationCreationApprovalWorkflowExecutor.java\nindex 642be06b446..8b7487218af 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/ApplicationCreationApprovalWorkflowExecutor.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/ApplicationCreationApprovalWorkflowExecutor.java\n", "chunk": "@@ -65,6 +64,7 @@ public class ApplicationCreationApprovalWorkflowExecutor extends WorkflowExecuto\n \n     /**\n      * Complete the Application creation approval workflow peocess.\n+     *\n      * @param workFlowDTO\n      */\n     @Override\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyNjAyNw==", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r406626027", "body": "you don't have to set any metadata. Only set them if you need to get it from the complete() method. seems like any of the above are not needed", "bodyText": "you don't have to set any metadata. Only set them if you need to get it from the complete() method. seems like any of the above are not needed", "bodyHTML": "<p dir=\"auto\">you don't have to set any metadata. Only set them if you need to get it from the complete() method. seems like any of the above are not needed</p>", "author": "chamilaadhi", "createdAt": "2020-04-10T06:43:04Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/ApplicationCreationApprovalWorkflowExecutor.java", "diffHunk": "@@ -0,0 +1,132 @@\n+package org.wso2.carbon.apimgt.impl.workflow;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n+import org.wso2.carbon.apimgt.api.WorkflowResponse;\n+import org.wso2.carbon.apimgt.api.model.Application;\n+import org.wso2.carbon.apimgt.impl.APIConstants;\n+import org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO;\n+import org.wso2.carbon.apimgt.impl.dto.ApplicationWorkflowDTO;\n+import org.wso2.carbon.apimgt.impl.dto.WorkflowDTO;\n+\n+import java.util.List;\n+\n+public class ApplicationCreationApprovalWorkflowExecutor extends WorkflowExecutor{\n+\n+\n+    private static final Log log = LogFactory.getLog(ApplicationCreationApprovalWorkflowExecutor.class);\n+\n+    @Override\n+    public String getWorkflowType() {\n+        return WorkflowConstants.WF_TYPE_AM_APPLICATION_CREATION;\n+    }\n+\n+    @Override\n+    public WorkflowResponse execute(WorkflowDTO workflowDTO) throws WorkflowException {\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Executing Application creation Workflow.\");\n+        }\n+\n+        ApplicationWorkflowDTO appWorkFlowDTO = (ApplicationWorkflowDTO) workflowDTO;\n+        Application application = appWorkFlowDTO.getApplication();\n+        String callBackURL = appWorkFlowDTO.getCallbackUrl();\n+\n+        String message=\"Approve application [\"+ application.getName() +\"] creation request from application creator -\"\n+                +appWorkFlowDTO.getUserName()+\" with throttling tier - \"+application.getTier();\n+\n+        workflowDTO.setWorkflowDescription(message);\n+\n+        workflowDTO.setMetadata(\"applicationName\", application.getName());\n+        workflowDTO.setMetadata(\"applicationTier\", application.getTier());\n+        workflowDTO.setMetadata(\"applicationCallbackUrl\", application.getCallbackUrl());\n+        workflowDTO.setMetadata(\"applicationDescription\", application.getDescription());\n+        workflowDTO.setMetadata(\"tenantDomain\", appWorkFlowDTO.getTenantDomain());\n+        workflowDTO.setMetadata(\"userName\", appWorkFlowDTO.getUserName());\n+        workflowDTO.setMetadata(\"workflowExternalRef\", appWorkFlowDTO.getExternalWorkflowReference());\n+        workflowDTO.setMetadata(\"callBackURL\", callBackURL != null ? callBackURL : \"?\");\n+", "originalCommit": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e00fe40f5ef809f1ac81dc7c22faacda062adfab", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/ApplicationCreationApprovalWorkflowExecutor.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/ApplicationCreationApprovalWorkflowExecutor.java\nindex 94da0ac8a1c..642be06b446 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/ApplicationCreationApprovalWorkflowExecutor.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/ApplicationCreationApprovalWorkflowExecutor.java\n", "chunk": "@@ -31,34 +54,18 @@ public class ApplicationCreationApprovalWorkflowExecutor extends WorkflowExecuto\n         ApplicationWorkflowDTO appWorkFlowDTO = (ApplicationWorkflowDTO) workflowDTO;\n         Application application = appWorkFlowDTO.getApplication();\n         String callBackURL = appWorkFlowDTO.getCallbackUrl();\n-\n         String message=\"Approve application [\"+ application.getName() +\"] creation request from application creator -\"\n                 +appWorkFlowDTO.getUserName()+\" with throttling tier - \"+application.getTier();\n \n         workflowDTO.setWorkflowDescription(message);\n-\n-        workflowDTO.setMetadata(\"applicationName\", application.getName());\n-        workflowDTO.setMetadata(\"applicationTier\", application.getTier());\n-        workflowDTO.setMetadata(\"applicationCallbackUrl\", application.getCallbackUrl());\n-        workflowDTO.setMetadata(\"applicationDescription\", application.getDescription());\n-        workflowDTO.setMetadata(\"tenantDomain\", appWorkFlowDTO.getTenantDomain());\n-        workflowDTO.setMetadata(\"userName\", appWorkFlowDTO.getUserName());\n-        workflowDTO.setMetadata(\"workflowExternalRef\", appWorkFlowDTO.getExternalWorkflowReference());\n-        workflowDTO.setMetadata(\"callBackURL\", callBackURL != null ? callBackURL : \"?\");\n-\n-        workflowDTO.setProperties(\"Workflow Process\",\"Application Creation\");\n-\n         super.execute(workflowDTO);\n \n         return new GeneralWorkflowResponse();\n     }\n \n     /**\n-     * Complete the external process status.\n-     * Based on the workflow , we will update the status column of the\n-     * Application table\n-     *\n-     * @param workFlowDTO object\n+     * Complete the Application creation approval workflow peocess.\n+     * @param workFlowDTO\n      */\n     @Override\n     public WorkflowResponse complete(WorkflowDTO workFlowDTO) throws WorkflowException {\n", "next_change": {"commit": "9b48a01776745e4804aee0554f67dde112e0ccdd", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/ApplicationCreationApprovalWorkflowExecutor.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/ApplicationCreationApprovalWorkflowExecutor.java\nindex 642be06b446..8b7487218af 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/ApplicationCreationApprovalWorkflowExecutor.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/ApplicationCreationApprovalWorkflowExecutor.java\n", "chunk": "@@ -65,6 +64,7 @@ public class ApplicationCreationApprovalWorkflowExecutor extends WorkflowExecuto\n \n     /**\n      * Complete the Application creation approval workflow peocess.\n+     *\n      * @param workFlowDTO\n      */\n     @Override\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyNjIzOA==", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r406626238", "body": "remove + ", "bodyText": "remove +", "bodyHTML": "<p dir=\"auto\">remove +</p>", "author": "chamilaadhi", "createdAt": "2020-04-10T06:43:44Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/ApplicationCreationApprovalWorkflowExecutor.java", "diffHunk": "@@ -0,0 +1,132 @@\n+package org.wso2.carbon.apimgt.impl.workflow;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n+import org.wso2.carbon.apimgt.api.WorkflowResponse;\n+import org.wso2.carbon.apimgt.api.model.Application;\n+import org.wso2.carbon.apimgt.impl.APIConstants;\n+import org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO;\n+import org.wso2.carbon.apimgt.impl.dto.ApplicationWorkflowDTO;\n+import org.wso2.carbon.apimgt.impl.dto.WorkflowDTO;\n+\n+import java.util.List;\n+\n+public class ApplicationCreationApprovalWorkflowExecutor extends WorkflowExecutor{\n+\n+\n+    private static final Log log = LogFactory.getLog(ApplicationCreationApprovalWorkflowExecutor.class);\n+\n+    @Override\n+    public String getWorkflowType() {\n+        return WorkflowConstants.WF_TYPE_AM_APPLICATION_CREATION;\n+    }\n+\n+    @Override\n+    public WorkflowResponse execute(WorkflowDTO workflowDTO) throws WorkflowException {\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Executing Application creation Workflow.\");\n+        }\n+\n+        ApplicationWorkflowDTO appWorkFlowDTO = (ApplicationWorkflowDTO) workflowDTO;\n+        Application application = appWorkFlowDTO.getApplication();\n+        String callBackURL = appWorkFlowDTO.getCallbackUrl();\n+\n+        String message=\"Approve application [\"+ application.getName() +\"] creation request from application creator -\"\n+                +appWorkFlowDTO.getUserName()+\" with throttling tier - \"+application.getTier();\n+\n+        workflowDTO.setWorkflowDescription(message);\n+\n+        workflowDTO.setMetadata(\"applicationName\", application.getName());\n+        workflowDTO.setMetadata(\"applicationTier\", application.getTier());\n+        workflowDTO.setMetadata(\"applicationCallbackUrl\", application.getCallbackUrl());\n+        workflowDTO.setMetadata(\"applicationDescription\", application.getDescription());\n+        workflowDTO.setMetadata(\"tenantDomain\", appWorkFlowDTO.getTenantDomain());\n+        workflowDTO.setMetadata(\"userName\", appWorkFlowDTO.getUserName());\n+        workflowDTO.setMetadata(\"workflowExternalRef\", appWorkFlowDTO.getExternalWorkflowReference());\n+        workflowDTO.setMetadata(\"callBackURL\", callBackURL != null ? callBackURL : \"?\");\n+\n+        workflowDTO.setProperties(\"Workflow Process\",\"Application Creation\");\n+\n+        super.execute(workflowDTO);\n+\n+        return new GeneralWorkflowResponse();\n+    }\n+\n+    /**\n+     * Complete the external process status.\n+     * Based on the workflow , we will update the status column of the\n+     * Application table\n+     *\n+     * @param workFlowDTO object\n+     */\n+    @Override\n+    public WorkflowResponse complete(WorkflowDTO workFlowDTO) throws WorkflowException {\n+\n+        workFlowDTO.setUpdatedTime(System.currentTimeMillis());\n+        ApiMgtDAO dao = ApiMgtDAO.getInstance();\n+        try {\n+            if (dao.getApplicationById(Integer.parseInt(workFlowDTO.getWorkflowReference())) != null) {\n+\n+                super.complete(workFlowDTO);\n+                log.info(\"Application Creation [Complete] Workflow Invoked. Workflow ID : \" + workFlowDTO\n+                        .getExternalWorkflowReference() + \"Workflow State : \" + workFlowDTO.getStatus());\n+\n+                String status = null;\n+                if (WorkflowStatus.CREATED.equals(workFlowDTO.getStatus())) {\n+                    status = APIConstants.ApplicationStatus.APPLICATION_CREATED;\n+                } else if (WorkflowStatus.REJECTED.equals(workFlowDTO.getStatus())) {\n+                    status = APIConstants.ApplicationStatus.APPLICATION_REJECTED;\n+                } else if (WorkflowStatus.APPROVED.equals(workFlowDTO.getStatus())) {\n+                    status = APIConstants.ApplicationStatus.APPLICATION_APPROVED;\n+                }\n+\n+                try {\n+                    dao.updateApplicationStatus(Integer.parseInt(workFlowDTO.getWorkflowReference()), status);\n+                } catch (APIManagementException e) {\n+                    String msg = \"Error occurred when updating the status of the Application creation \" + \"process\";\n+                    log.error(msg, e);", "originalCommit": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc5MjY5NA==", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r410792694", "bodyText": "fixed with e00fe40", "author": "SahanHerath", "createdAt": "2020-04-19T02:06:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyNjIzOA=="}], "type": "inlineReview", "revised_code": {"commit": "e00fe40f5ef809f1ac81dc7c22faacda062adfab", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/ApplicationCreationApprovalWorkflowExecutor.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/ApplicationCreationApprovalWorkflowExecutor.java\nindex 94da0ac8a1c..642be06b446 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/ApplicationCreationApprovalWorkflowExecutor.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/ApplicationCreationApprovalWorkflowExecutor.java\n", "chunk": "@@ -84,11 +90,10 @@ public class ApplicationCreationApprovalWorkflowExecutor extends WorkflowExecuto\n                 try {\n                     dao.updateApplicationStatus(Integer.parseInt(workFlowDTO.getWorkflowReference()), status);\n                 } catch (APIManagementException e) {\n-                    String msg = \"Error occurred when updating the status of the Application creation \" + \"process\";\n+                    String msg = \"Error occurred when updating the status of the Application creation process\";\n                     log.error(msg, e);\n                     throw new WorkflowException(msg, e);\n                 }\n-\n             } else {\n                 String msg = \"Application does not exist\";\n                 throw new WorkflowException(msg);\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyNjQ4Ng==", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r406626486", "body": "License header, class description and format the whole class", "bodyText": "License header, class description and format the whole class", "bodyHTML": "<p dir=\"auto\">License header, class description and format the whole class</p>", "author": "chamilaadhi", "createdAt": "2020-04-10T06:44:40Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/ApplicationRegistrationApprovalWorkflowExecutor.java", "diffHunk": "@@ -0,0 +1,102 @@\n+package org.wso2.carbon.apimgt.impl.workflow;", "originalCommit": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc5MjcwNA==", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r410792704", "bodyText": "fixed with e00fe40", "author": "SahanHerath", "createdAt": "2020-04-19T02:06:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyNjQ4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc5NjQwMA==", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r410796400", "bodyText": "changed year with 68b7419", "author": "SahanHerath", "createdAt": "2020-04-19T02:33:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyNjQ4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDMxMDkwMA==", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r414310900", "bodyText": "your haven't formatted the class .", "author": "chamilaadhi", "createdAt": "2020-04-24T05:49:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyNjQ4Ng=="}], "type": "inlineReview", "revised_code": {"commit": "e00fe40f5ef809f1ac81dc7c22faacda062adfab", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/ApplicationRegistrationApprovalWorkflowExecutor.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/ApplicationRegistrationApprovalWorkflowExecutor.java\nindex 0b28026a7e7..3e64b3dc376 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/ApplicationRegistrationApprovalWorkflowExecutor.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/ApplicationRegistrationApprovalWorkflowExecutor.java\n", "chunk": "@@ -1,3 +1,20 @@\n+/*\n+ *  Copyright (c) 2016, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n package org.wso2.carbon.apimgt.impl.workflow;\n \n import org.apache.commons.logging.Log;\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyNjgwOA==", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r406626808", "body": "metadata and properties are not needed.", "bodyText": "metadata and properties are not needed.", "bodyHTML": "<p dir=\"auto\">metadata and properties are not needed.</p>", "author": "chamilaadhi", "createdAt": "2020-04-10T06:45:43Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/ApplicationRegistrationApprovalWorkflowExecutor.java", "diffHunk": "@@ -0,0 +1,102 @@\n+package org.wso2.carbon.apimgt.impl.workflow;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n+import org.wso2.carbon.apimgt.api.WorkflowResponse;\n+import org.wso2.carbon.apimgt.api.model.Application;\n+import org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO;\n+import org.wso2.carbon.apimgt.impl.dto.ApplicationRegistrationWorkflowDTO;\n+import org.wso2.carbon.apimgt.impl.dto.WorkflowDTO;\n+\n+import java.util.List;\n+\n+public class ApplicationRegistrationApprovalWorkflowExecutor extends AbstractApplicationRegistrationWorkflowExecutor{\n+\n+\n+    private static final Log log = LogFactory.getLog(ApplicationRegistrationApprovalWorkflowExecutor.class);\n+\n+    @Override\n+    public WorkflowResponse execute(WorkflowDTO workflowDTO) throws WorkflowException {\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Executing Application registration Workflow..\");\n+        }\n+\n+        ApplicationRegistrationWorkflowDTO appRegDTO = (ApplicationRegistrationWorkflowDTO) workflowDTO;\n+        Application application = appRegDTO.getApplication();\n+        String callBackURL = appRegDTO.getCallbackUrl();\n+        String applicationCallbackUrl = application.getCallbackUrl();\n+        String applicationDescription = application.getDescription();\n+\n+        String message=\"Approve request to create \"+appRegDTO.getKeyType()+\" keys for [ \"+application.getName()+\n+                \" ] from application creator - \"+appRegDTO.getUserName()+\" with throttling tier - \"+application.getTier() ;\n+\n+        workflowDTO.setWorkflowDescription(message);\n+\n+        workflowDTO.setMetadata(\"applicationName\", application.getName());\n+        workflowDTO.setMetadata(\"applicationTier\", application.getTier());\n+        workflowDTO.setMetadata(\"applicationCallbackUrl\", applicationCallbackUrl != null ? applicationCallbackUrl : \"?\");\n+        workflowDTO.setMetadata(\"applicationDescription\", applicationDescription != null ? applicationDescription : \"?\");\n+        workflowDTO.setMetadata(\"TenantDomain\", appRegDTO.getTenantDomain());\n+        workflowDTO.setMetadata(\"UserName\", appRegDTO.getUserName());\n+        workflowDTO.setMetadata(\"workflowExternalRef\", appRegDTO.getExternalWorkflowReference());\n+        workflowDTO.setMetadata(\"callBackURL\", callBackURL != null ? callBackURL : \"?\");\n+        workflowDTO.setMetadata(\"KeyType\", appRegDTO.getKeyType());\n+\n+        workflowDTO.setProperties(\"Workflow Process\",\"Registration Creation\");\n+", "originalCommit": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e00fe40f5ef809f1ac81dc7c22faacda062adfab", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/ApplicationRegistrationApprovalWorkflowExecutor.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/ApplicationRegistrationApprovalWorkflowExecutor.java\nindex 0b28026a7e7..3e64b3dc376 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/ApplicationRegistrationApprovalWorkflowExecutor.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/ApplicationRegistrationApprovalWorkflowExecutor.java\n", "chunk": "@@ -8,53 +25,40 @@ import org.wso2.carbon.apimgt.api.model.Application;\n import org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO;\n import org.wso2.carbon.apimgt.impl.dto.ApplicationRegistrationWorkflowDTO;\n import org.wso2.carbon.apimgt.impl.dto.WorkflowDTO;\n-\n import java.util.List;\n \n+/**\n+ * Approval workflow for Application Registration key generation.\n+ */\n public class ApplicationRegistrationApprovalWorkflowExecutor extends AbstractApplicationRegistrationWorkflowExecutor{\n \n-\n     private static final Log log = LogFactory.getLog(ApplicationRegistrationApprovalWorkflowExecutor.class);\n \n+    /**\n+     * Execute the Application Creation workflow approval process.\n+     * @param workflowDTO\n+     */\n     @Override\n     public WorkflowResponse execute(WorkflowDTO workflowDTO) throws WorkflowException {\n         if (log.isDebugEnabled()) {\n             log.debug(\"Executing Application registration Workflow..\");\n         }\n-\n         ApplicationRegistrationWorkflowDTO appRegDTO = (ApplicationRegistrationWorkflowDTO) workflowDTO;\n         Application application = appRegDTO.getApplication();\n         String callBackURL = appRegDTO.getCallbackUrl();\n         String applicationCallbackUrl = application.getCallbackUrl();\n         String applicationDescription = application.getDescription();\n-\n         String message=\"Approve request to create \"+appRegDTO.getKeyType()+\" keys for [ \"+application.getName()+\n                 \" ] from application creator - \"+appRegDTO.getUserName()+\" with throttling tier - \"+application.getTier() ;\n \n         workflowDTO.setWorkflowDescription(message);\n-\n-        workflowDTO.setMetadata(\"applicationName\", application.getName());\n-        workflowDTO.setMetadata(\"applicationTier\", application.getTier());\n-        workflowDTO.setMetadata(\"applicationCallbackUrl\", applicationCallbackUrl != null ? applicationCallbackUrl : \"?\");\n-        workflowDTO.setMetadata(\"applicationDescription\", applicationDescription != null ? applicationDescription : \"?\");\n-        workflowDTO.setMetadata(\"TenantDomain\", appRegDTO.getTenantDomain());\n-        workflowDTO.setMetadata(\"UserName\", appRegDTO.getUserName());\n-        workflowDTO.setMetadata(\"workflowExternalRef\", appRegDTO.getExternalWorkflowReference());\n-        workflowDTO.setMetadata(\"callBackURL\", callBackURL != null ? callBackURL : \"?\");\n-        workflowDTO.setMetadata(\"KeyType\", appRegDTO.getKeyType());\n-\n-        workflowDTO.setProperties(\"Workflow Process\",\"Registration Creation\");\n-\n         super.execute(workflowDTO);\n \n         return new GeneralWorkflowResponse();\n     }\n \n     /**\n-     * Complete the external process status.\n-     * Based on the workflow , we will update the status column of the\n-     * AM_APPLICATION_KEY_MAPPING table\n-     *\n+     * Complete the Approval workflow executor for application key generation.\n      * @param workFlowDTO\n      */\n     @Override\n", "next_change": {"commit": "9b48a01776745e4804aee0554f67dde112e0ccdd", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/ApplicationRegistrationApprovalWorkflowExecutor.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/ApplicationRegistrationApprovalWorkflowExecutor.java\nindex 3e64b3dc376..22197955c19 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/ApplicationRegistrationApprovalWorkflowExecutor.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/ApplicationRegistrationApprovalWorkflowExecutor.java\n", "chunk": "@@ -59,6 +59,7 @@ public class ApplicationRegistrationApprovalWorkflowExecutor extends AbstractApp\n \n     /**\n      * Complete the Approval workflow executor for application key generation.\n+     *\n      * @param workFlowDTO\n      */\n     @Override\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyNzAwMA==", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r406627000", "body": "remove 'TODO Auto-generated method stub' and add a valid comment", "bodyText": "remove 'TODO Auto-generated method stub' and add a valid comment", "bodyHTML": "<p dir=\"auto\">remove 'TODO Auto-generated method stub' and add a valid comment</p>", "author": "chamilaadhi", "createdAt": "2020-04-10T06:46:34Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/ApplicationRegistrationApprovalWorkflowExecutor.java", "diffHunk": "@@ -0,0 +1,102 @@\n+package org.wso2.carbon.apimgt.impl.workflow;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n+import org.wso2.carbon.apimgt.api.WorkflowResponse;\n+import org.wso2.carbon.apimgt.api.model.Application;\n+import org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO;\n+import org.wso2.carbon.apimgt.impl.dto.ApplicationRegistrationWorkflowDTO;\n+import org.wso2.carbon.apimgt.impl.dto.WorkflowDTO;\n+\n+import java.util.List;\n+\n+public class ApplicationRegistrationApprovalWorkflowExecutor extends AbstractApplicationRegistrationWorkflowExecutor{\n+\n+\n+    private static final Log log = LogFactory.getLog(ApplicationRegistrationApprovalWorkflowExecutor.class);\n+\n+    @Override\n+    public WorkflowResponse execute(WorkflowDTO workflowDTO) throws WorkflowException {\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Executing Application registration Workflow..\");\n+        }\n+\n+        ApplicationRegistrationWorkflowDTO appRegDTO = (ApplicationRegistrationWorkflowDTO) workflowDTO;\n+        Application application = appRegDTO.getApplication();\n+        String callBackURL = appRegDTO.getCallbackUrl();\n+        String applicationCallbackUrl = application.getCallbackUrl();\n+        String applicationDescription = application.getDescription();\n+\n+        String message=\"Approve request to create \"+appRegDTO.getKeyType()+\" keys for [ \"+application.getName()+\n+                \" ] from application creator - \"+appRegDTO.getUserName()+\" with throttling tier - \"+application.getTier() ;\n+\n+        workflowDTO.setWorkflowDescription(message);\n+\n+        workflowDTO.setMetadata(\"applicationName\", application.getName());\n+        workflowDTO.setMetadata(\"applicationTier\", application.getTier());\n+        workflowDTO.setMetadata(\"applicationCallbackUrl\", applicationCallbackUrl != null ? applicationCallbackUrl : \"?\");\n+        workflowDTO.setMetadata(\"applicationDescription\", applicationDescription != null ? applicationDescription : \"?\");\n+        workflowDTO.setMetadata(\"TenantDomain\", appRegDTO.getTenantDomain());\n+        workflowDTO.setMetadata(\"UserName\", appRegDTO.getUserName());\n+        workflowDTO.setMetadata(\"workflowExternalRef\", appRegDTO.getExternalWorkflowReference());\n+        workflowDTO.setMetadata(\"callBackURL\", callBackURL != null ? callBackURL : \"?\");\n+        workflowDTO.setMetadata(\"KeyType\", appRegDTO.getKeyType());\n+\n+        workflowDTO.setProperties(\"Workflow Process\",\"Registration Creation\");\n+\n+        super.execute(workflowDTO);\n+\n+        return new GeneralWorkflowResponse();\n+    }\n+\n+    /**\n+     * Complete the external process status.\n+     * Based on the workflow , we will update the status column of the\n+     * AM_APPLICATION_KEY_MAPPING table\n+     *\n+     * @param workFlowDTO\n+     */\n+    @Override\n+    public WorkflowResponse complete(WorkflowDTO workFlowDTO) throws WorkflowException {\n+        workFlowDTO.setUpdatedTime(System.currentTimeMillis());\n+        super.complete(workFlowDTO);\n+        log.info(\"Application Registration [Complete] Workflow Invoked. Workflow ID : \" + workFlowDTO\n+                .getExternalWorkflowReference() + \"Workflow State : \" + workFlowDTO.getStatus());\n+\n+        if (WorkflowStatus.APPROVED.equals(workFlowDTO.getStatus())) {\n+            try {\n+                generateKeysForApplication((ApplicationRegistrationWorkflowDTO) workFlowDTO);\n+            } catch (APIManagementException e) {\n+                String msg = \"Error occurred when updating the status of the Application Registration process\";\n+                log.error(msg, e);\n+                throw new WorkflowException(msg, e);\n+            }\n+        }\n+        return new GeneralWorkflowResponse();\n+    }\n+\n+    @Override\n+    public List<WorkflowDTO> getWorkflowDetails(String workflowStatus) throws WorkflowException {\n+        // TODO Auto-generated method stub\n+        return null;", "originalCommit": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc5Mjc0OA==", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r410792748", "bodyText": "fixed with e00fe40", "author": "SahanHerath", "createdAt": "2020-04-19T02:06:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyNzAwMA=="}], "type": "inlineReview", "revised_code": {"commit": "e00fe40f5ef809f1ac81dc7c22faacda062adfab", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/ApplicationRegistrationApprovalWorkflowExecutor.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/ApplicationRegistrationApprovalWorkflowExecutor.java\nindex 0b28026a7e7..3e64b3dc376 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/ApplicationRegistrationApprovalWorkflowExecutor.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/ApplicationRegistrationApprovalWorkflowExecutor.java\n", "chunk": "@@ -78,10 +81,15 @@ public class ApplicationRegistrationApprovalWorkflowExecutor extends AbstractApp\n \n     @Override\n     public List<WorkflowDTO> getWorkflowDetails(String workflowStatus) throws WorkflowException {\n-        // TODO Auto-generated method stub\n+        // implemetation is not provided in this version\n         return null;\n     }\n \n+    /**\n+     * Handle cleanup task for application registration Approval workflow executor.\n+     * Use workflow external reference  to delete the pending workflow request\n+     * @param workflowExtRef Workflow external reference of pending workflow request\n+     */\n     @Override\n     public void cleanUpPendingTask(String workflowExtRef) throws WorkflowException {\n         super.cleanUpPendingTask(workflowExtRef);\n", "next_change": {"commit": "9b48a01776745e4804aee0554f67dde112e0ccdd", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/ApplicationRegistrationApprovalWorkflowExecutor.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/ApplicationRegistrationApprovalWorkflowExecutor.java\nindex 3e64b3dc376..22197955c19 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/ApplicationRegistrationApprovalWorkflowExecutor.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/ApplicationRegistrationApprovalWorkflowExecutor.java\n", "chunk": "@@ -88,6 +89,7 @@ public class ApplicationRegistrationApprovalWorkflowExecutor extends AbstractApp\n     /**\n      * Handle cleanup task for application registration Approval workflow executor.\n      * Use workflow external reference  to delete the pending workflow request\n+     *\n      * @param workflowExtRef Workflow external reference of pending workflow request\n      */\n     @Override\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyNzM5OA==", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r406627398", "body": "missing license header, class description. Also format the class", "bodyText": "missing license header, class description. Also format the class", "bodyHTML": "<p dir=\"auto\">missing license header, class description. Also format the class</p>", "author": "chamilaadhi", "createdAt": "2020-04-10T06:48:09Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/SubscriptionCreationApprovalWorkflowExecutor.java", "diffHunk": "@@ -0,0 +1,115 @@\n+package org.wso2.carbon.apimgt.impl.workflow;", "originalCommit": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc5Mjg5NQ==", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r410792895", "bodyText": "fixed with e00fe40", "author": "SahanHerath", "createdAt": "2020-04-19T02:08:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyNzM5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc5NjQ2OA==", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r410796468", "bodyText": "changed year with 68b7419", "author": "SahanHerath", "createdAt": "2020-04-19T02:34:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyNzM5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDMxMDgwNQ==", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r414310805", "bodyText": "your haven't formatted the class .", "author": "chamilaadhi", "createdAt": "2020-04-24T05:48:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyNzM5OA=="}], "type": "inlineReview", "revised_code": {"commit": "e00fe40f5ef809f1ac81dc7c22faacda062adfab", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/SubscriptionCreationApprovalWorkflowExecutor.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/SubscriptionCreationApprovalWorkflowExecutor.java\nindex 03b03653437..65c058d7ff2 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/SubscriptionCreationApprovalWorkflowExecutor.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/SubscriptionCreationApprovalWorkflowExecutor.java\n", "chunk": "@@ -1,3 +1,20 @@\n+/*\n+ *  Copyright (c) 2016, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n package org.wso2.carbon.apimgt.impl.workflow;\n \n import org.apache.commons.logging.Log;\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyNzUzNw==", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r406627537", "body": "remove properties and metadata since they are not needed", "bodyText": "remove properties and metadata since they are not needed", "bodyHTML": "<p dir=\"auto\">remove properties and metadata since they are not needed</p>", "author": "chamilaadhi", "createdAt": "2020-04-10T06:48:33Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/SubscriptionCreationApprovalWorkflowExecutor.java", "diffHunk": "@@ -0,0 +1,115 @@\n+package org.wso2.carbon.apimgt.impl.workflow;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n+import org.wso2.carbon.apimgt.api.WorkflowResponse;\n+import org.wso2.carbon.apimgt.impl.APIConstants;\n+import org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO;\n+import org.wso2.carbon.apimgt.impl.dto.SubscriptionWorkflowDTO;\n+import org.wso2.carbon.apimgt.impl.dto.WorkflowDTO;\n+\n+import java.util.List;\n+\n+public class SubscriptionCreationApprovalWorkflowExecutor extends WorkflowExecutor{\n+\n+    private static final Log log = LogFactory.getLog(SubscriptionCreationApprovalWorkflowExecutor.class);\n+\n+\n+    @Override\n+    public String getWorkflowType() {\n+        return WorkflowConstants.WF_TYPE_AM_SUBSCRIPTION_CREATION;\n+    }\n+\n+    @Override\n+    public List<WorkflowDTO> getWorkflowDetails(String workflowStatus) throws WorkflowException {\n+        return null;\n+    }\n+\n+    /**\n+     * This method is used to execute the workflow without giving a workflow response back to the caller to execute\n+     * some other task after completing the workflow\n+     *\n+     * @param workflowDTO - The WorkflowDTO which contains workflow contextual information related to the workflow.\n+     * @throws WorkflowException\n+     */\n+    @Override\n+    public WorkflowResponse execute(WorkflowDTO workflowDTO) throws WorkflowException {\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Executing Subscription Creation Webservice Workflow.. \");\n+        }\n+\n+        SubscriptionWorkflowDTO subsWorkflowDTO = (SubscriptionWorkflowDTO) workflowDTO;\n+        String callBackURL = subsWorkflowDTO.getCallbackUrl();\n+\n+        String message=\"Approve API [\"+ subsWorkflowDTO.getApiName()+\" - \"+subsWorkflowDTO.getApiVersion()+\n+                \"] subscription creation request from subscriber - \"+subsWorkflowDTO.getSubscriber()+\n+                \" for the application - \"+subsWorkflowDTO.getApplicationName();\n+\n+        workflowDTO.setWorkflowDescription(message);\n+\n+        workflowDTO.setMetadata(\"apiName\", subsWorkflowDTO.getApiName());\n+        workflowDTO.setMetadata(\"apiVersion\", subsWorkflowDTO.getApiVersion());\n+        workflowDTO.setMetadata(\"apiContext\", subsWorkflowDTO.getApiContext());\n+        workflowDTO.setMetadata(\"apiProvider\", subsWorkflowDTO.getApiProvider());\n+        workflowDTO.setMetadata(\"apiSubscriber\", subsWorkflowDTO.getSubscriber());\n+        workflowDTO.setMetadata(\"applicationName\", subsWorkflowDTO.getApplicationName());\n+        workflowDTO.setMetadata(\"TierName\", subsWorkflowDTO.getTierName());\n+        workflowDTO.setMetadata(\"workflowExternalRef\", subsWorkflowDTO.getExternalWorkflowReference());\n+        workflowDTO.setMetadata(\"callBackURL\", callBackURL != null ? callBackURL : \"?\");\n+\n+        workflowDTO.setProperties(\"Workflow Process\",\"Subscription Creation\");\n+", "originalCommit": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e00fe40f5ef809f1ac81dc7c22faacda062adfab", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/SubscriptionCreationApprovalWorkflowExecutor.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/SubscriptionCreationApprovalWorkflowExecutor.java\nindex 03b03653437..65c058d7ff2 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/SubscriptionCreationApprovalWorkflowExecutor.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/SubscriptionCreationApprovalWorkflowExecutor.java\n", "chunk": "@@ -39,33 +55,22 @@ public class SubscriptionCreationApprovalWorkflowExecutor extends WorkflowExecut\n         if (log.isDebugEnabled()) {\n             log.debug(\"Executing Subscription Creation Webservice Workflow.. \");\n         }\n-\n         SubscriptionWorkflowDTO subsWorkflowDTO = (SubscriptionWorkflowDTO) workflowDTO;\n         String callBackURL = subsWorkflowDTO.getCallbackUrl();\n-\n         String message=\"Approve API [\"+ subsWorkflowDTO.getApiName()+\" - \"+subsWorkflowDTO.getApiVersion()+\n                 \"] subscription creation request from subscriber - \"+subsWorkflowDTO.getSubscriber()+\n                 \" for the application - \"+subsWorkflowDTO.getApplicationName();\n \n         workflowDTO.setWorkflowDescription(message);\n-\n-        workflowDTO.setMetadata(\"apiName\", subsWorkflowDTO.getApiName());\n-        workflowDTO.setMetadata(\"apiVersion\", subsWorkflowDTO.getApiVersion());\n-        workflowDTO.setMetadata(\"apiContext\", subsWorkflowDTO.getApiContext());\n-        workflowDTO.setMetadata(\"apiProvider\", subsWorkflowDTO.getApiProvider());\n-        workflowDTO.setMetadata(\"apiSubscriber\", subsWorkflowDTO.getSubscriber());\n-        workflowDTO.setMetadata(\"applicationName\", subsWorkflowDTO.getApplicationName());\n-        workflowDTO.setMetadata(\"TierName\", subsWorkflowDTO.getTierName());\n-        workflowDTO.setMetadata(\"workflowExternalRef\", subsWorkflowDTO.getExternalWorkflowReference());\n-        workflowDTO.setMetadata(\"callBackURL\", callBackURL != null ? callBackURL : \"?\");\n-\n-        workflowDTO.setProperties(\"Workflow Process\",\"Subscription Creation\");\n-\n         super.execute(workflowDTO);\n \n         return new GeneralWorkflowResponse();\n     }\n \n+    /**\n+     * Complete the Approval workflow executor for Subscription creation.\n+     * @param workflowDTO\n+     */\n     @Override\n     public WorkflowResponse complete(WorkflowDTO workflowDTO) throws WorkflowException {\n         workflowDTO.setUpdatedTime(System.currentTimeMillis());\n", "next_change": {"commit": "9b48a01776745e4804aee0554f67dde112e0ccdd", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/SubscriptionCreationApprovalWorkflowExecutor.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/SubscriptionCreationApprovalWorkflowExecutor.java\nindex 65c058d7ff2..b59f877bb2b 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/SubscriptionCreationApprovalWorkflowExecutor.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/SubscriptionCreationApprovalWorkflowExecutor.java\n", "chunk": "@@ -69,6 +69,7 @@ public class SubscriptionCreationApprovalWorkflowExecutor extends WorkflowExecut\n \n     /**\n      * Complete the Approval workflow executor for Subscription creation.\n+     *\n      * @param workflowDTO\n      */\n     @Override\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyNzk0NQ==", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r406627945", "body": "missing license header, class description. Also format the class\r\n\r\n", "bodyText": "missing license header, class description. Also format the class", "bodyHTML": "<p dir=\"auto\">missing license header, class description. Also format the class</p>", "author": "chamilaadhi", "createdAt": "2020-04-10T06:49:57Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/UserSignUpApprovalWorkflowExecutor.java", "diffHunk": "@@ -0,0 +1,138 @@\n+package org.wso2.carbon.apimgt.impl.workflow;", "originalCommit": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc5MjkzMg==", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r410792932", "bodyText": "fixed with e00fe40", "author": "SahanHerath", "createdAt": "2020-04-19T02:08:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyNzk0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc5NjQ5Mw==", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r410796493", "bodyText": "changed year with 68b7419", "author": "SahanHerath", "createdAt": "2020-04-19T02:34:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyNzk0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDMxMDcxNQ==", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r414310715", "bodyText": "your haven't formatted the class .", "author": "chamilaadhi", "createdAt": "2020-04-24T05:48:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyNzk0NQ=="}], "type": "inlineReview", "revised_code": {"commit": "e00fe40f5ef809f1ac81dc7c22faacda062adfab", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/UserSignUpApprovalWorkflowExecutor.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/UserSignUpApprovalWorkflowExecutor.java\nindex 6a137762ca8..edb190aaf99 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/UserSignUpApprovalWorkflowExecutor.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/UserSignUpApprovalWorkflowExecutor.java\n", "chunk": "@@ -1,3 +1,20 @@\n+/*\n+ *  Copyright (c) 2016, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n package org.wso2.carbon.apimgt.impl.workflow;\n \n import org.apache.commons.logging.Log;\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyODI4NA==", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r406628284", "body": "metadata and properties are not needed", "bodyText": "metadata and properties are not needed", "bodyHTML": "<p dir=\"auto\">metadata and properties are not needed</p>", "author": "chamilaadhi", "createdAt": "2020-04-10T06:51:20Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/UserSignUpApprovalWorkflowExecutor.java", "diffHunk": "@@ -0,0 +1,138 @@\n+package org.wso2.carbon.apimgt.impl.workflow;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n+import org.wso2.carbon.apimgt.api.WorkflowResponse;\n+import org.wso2.carbon.apimgt.impl.APIConstants;\n+import org.wso2.carbon.apimgt.impl.APIManagerConfiguration;\n+import org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO;\n+import org.wso2.carbon.apimgt.impl.dto.UserRegistrationConfigDTO;\n+import org.wso2.carbon.apimgt.impl.dto.WorkflowDTO;\n+import org.wso2.carbon.apimgt.impl.internal.ServiceReferenceHolder;\n+import org.wso2.carbon.apimgt.impl.utils.SelfSignUpUtil;\n+import org.wso2.carbon.utils.multitenancy.MultitenantUtils;\n+\n+import java.util.List;\n+\n+public class UserSignUpApprovalWorkflowExecutor extends UserSignUpWorkflowExecutor{\n+\n+    private static final Log log = LogFactory.getLog(UserSignUpWSWorkflowExecutor.class);\n+\n+\n+    @Override\n+    public String getWorkflowType() {\n+        return WorkflowConstants.WF_TYPE_AM_USER_SIGNUP;\n+    }\n+\n+    @Override\n+    public WorkflowResponse execute(WorkflowDTO workflowDTO) throws WorkflowException  {\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Executing User SignUp Webservice Workflow for \" + workflowDTO.getWorkflowReference());\n+        }\n+\n+\n+        String callBackURL = workflowDTO.getCallbackUrl();\n+        String tenantAwareUserName = MultitenantUtils.getTenantAwareUsername(workflowDTO.getWorkflowReference());\n+\n+        String message=\"Approve APIStore signup request done by \"+tenantAwareUserName  +\" from the tenant domain \"+workflowDTO.getTenantDomain();\n+\n+        workflowDTO.setWorkflowDescription(message);\n+\n+        workflowDTO.setMetadata(\"TenantUserName\", tenantAwareUserName);\n+        workflowDTO.setMetadata(\"TenantDomain\", workflowDTO.getTenantDomain());\n+        workflowDTO.setMetadata(\"workflowExternalRef\", workflowDTO.getExternalWorkflowReference());\n+        workflowDTO.setMetadata(\"callBackURL\", callBackURL != null ? callBackURL : \"?\");\n+\n+        workflowDTO.setProperties(\"Workflow Process\",\"User Self Sign Up\");\n+", "originalCommit": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e00fe40f5ef809f1ac81dc7c22faacda062adfab", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/UserSignUpApprovalWorkflowExecutor.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/UserSignUpApprovalWorkflowExecutor.java\nindex 6a137762ca8..edb190aaf99 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/UserSignUpApprovalWorkflowExecutor.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/UserSignUpApprovalWorkflowExecutor.java\n", "chunk": "@@ -12,68 +29,60 @@ import org.wso2.carbon.apimgt.impl.dto.WorkflowDTO;\n import org.wso2.carbon.apimgt.impl.internal.ServiceReferenceHolder;\n import org.wso2.carbon.apimgt.impl.utils.SelfSignUpUtil;\n import org.wso2.carbon.utils.multitenancy.MultitenantUtils;\n-\n import java.util.List;\n \n+/**\n+ * Approval workflow for User Self Sign Up.\n+ *\n+ */\n public class UserSignUpApprovalWorkflowExecutor extends UserSignUpWorkflowExecutor{\n \n     private static final Log log = LogFactory.getLog(UserSignUpWSWorkflowExecutor.class);\n \n-\n     @Override\n     public String getWorkflowType() {\n         return WorkflowConstants.WF_TYPE_AM_USER_SIGNUP;\n     }\n \n+    /**\n+     * Execute the User self sign up workflow approval process.\n+     * @param workflowDTO\n+     */\n     @Override\n-    public WorkflowResponse execute(WorkflowDTO workflowDTO) throws WorkflowException  {\n+    public WorkflowResponse execute(WorkflowDTO workflowDTO) throws WorkflowException {\n \n         if (log.isDebugEnabled()) {\n             log.debug(\"Executing User SignUp Webservice Workflow for \" + workflowDTO.getWorkflowReference());\n         }\n-\n-\n         String callBackURL = workflowDTO.getCallbackUrl();\n         String tenantAwareUserName = MultitenantUtils.getTenantAwareUsername(workflowDTO.getWorkflowReference());\n-\n         String message=\"Approve APIStore signup request done by \"+tenantAwareUserName  +\" from the tenant domain \"+workflowDTO.getTenantDomain();\n \n         workflowDTO.setWorkflowDescription(message);\n-\n-        workflowDTO.setMetadata(\"TenantUserName\", tenantAwareUserName);\n-        workflowDTO.setMetadata(\"TenantDomain\", workflowDTO.getTenantDomain());\n-        workflowDTO.setMetadata(\"workflowExternalRef\", workflowDTO.getExternalWorkflowReference());\n-        workflowDTO.setMetadata(\"callBackURL\", callBackURL != null ? callBackURL : \"?\");\n-\n-        workflowDTO.setProperties(\"Workflow Process\",\"User Self Sign Up\");\n-\n         super.execute(workflowDTO);\n-\n         return new GeneralWorkflowResponse();\n     }\n \n+    /**\n+     * Complete the Approval workflow executor for User self sign up.\n+     * @param workflowDTO\n+     */\n     @Override\n     public WorkflowResponse complete(WorkflowDTO workflowDTO) throws WorkflowException {\n \n         workflowDTO.setUpdatedTime(System.currentTimeMillis());\n-\n         if (log.isDebugEnabled()) {\n             log.debug(\"User Sign Up [Complete] Workflow Invoked. Workflow ID : \" +\n                     workflowDTO.getExternalWorkflowReference() + \"Workflow State : \" +\n                     workflowDTO.getStatus());\n         }\n-\n         super.complete(workflowDTO);\n-\n         APIManagerConfiguration config = ServiceReferenceHolder.getInstance().getAPIManagerConfigurationService()\n                 .getAPIManagerConfiguration();\n         String serverURL = config.getFirstProperty(APIConstants.AUTH_MANAGER_URL);\n-\n         String tenantDomain = workflowDTO.getTenantDomain();\n         try {\n-\n             UserRegistrationConfigDTO signupConfig = SelfSignUpUtil.getSignupConfiguration(tenantDomain);\n-\n             String adminUsername = signupConfig.getAdminUserName();\n             String adminPassword = signupConfig.getAdminPassword();\n             if (serverURL == null) {\n", "next_change": {"commit": "9b48a01776745e4804aee0554f67dde112e0ccdd", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/UserSignUpApprovalWorkflowExecutor.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/UserSignUpApprovalWorkflowExecutor.java\nindex edb190aaf99..e8840ce751f 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/UserSignUpApprovalWorkflowExecutor.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/UserSignUpApprovalWorkflowExecutor.java\n", "chunk": "@@ -87,9 +89,9 @@ public class UserSignUpApprovalWorkflowExecutor extends UserSignUpWorkflowExecut\n             String adminPassword = signupConfig.getAdminPassword();\n             if (serverURL == null) {\n                 throw new WorkflowException(\"Can't connect to the authentication manager. serverUrl is missing\");\n-            } else if(adminUsername == null) {\n+            } else if (adminUsername == null) {\n                 throw new WorkflowException(\"Can't connect to the authentication manager. adminUsername is missing\");\n-            } else if(adminPassword == null) {\n+            } else if (adminPassword == null) {\n                 throw new WorkflowException(\"Can't connect to the authentication manager. adminPassword is missing\");\n             }\n             String tenantAwareUserName = MultitenantUtils.getTenantAwareUsername(workflowDTO.getWorkflowReference());\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyOTIwOA==", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r406629208", "body": "why catch a NPE here? fromWorkflowsToInfoDTO() method is not throwing it either. please remove this", "bodyText": "why catch a NPE here? fromWorkflowsToInfoDTO() method is not throwing it either. please remove this", "bodyHTML": "<p dir=\"auto\">why catch a NPE here? fromWorkflowsToInfoDTO() method is not throwing it either. please remove this</p>", "author": "chamilaadhi", "createdAt": "2020-04-10T06:54:33Z", "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/impl/WorkflowsApiServiceImpl.java", "diffHunk": "@@ -42,6 +48,87 @@\n \n     private static final Log log = LogFactory.getLog(WorkflowsApiService.class);\n \n+\n+    /**\n+     * This is used to get the workflow pending request according to ExternalWorkflowReference\n+     *\n+     * @param externalWorkflowRef is the unique identifier for workflow request\n+     * @param ifNoneMatch If-None-Match header value\n+     * @return\n+     */\n+\n+    @Override\n+    public Response workflowsExternalWorkflowRefGet(String externalWorkflowRef, String ifNoneMatch) {\n+        WorkflowInfoDTO workflowinfoDTO;\n+        try {\n+            Workflow workflow;\n+\n+            String status=\"CREATED\";\n+            String tenantDomain = RestApiUtil.getLoggedInUserTenantDomain();\n+\n+            APIAdmin apiAdmin = new APIAdminImpl();\n+            workflow=apiAdmin.getworkflowReferenceByExternalWorkflowReferenceID(externalWorkflowRef, status ,tenantDomain);\n+\n+            try {\n+                workflowinfoDTO = WorkflowMappingUtil.fromWorkflowsToInfoDTO(workflow);\n+                return Response.ok().entity(workflowinfoDTO).build();\n+            }\n+            catch(NullPointerException e){", "originalCommit": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e00fe40f5ef809f1ac81dc7c22faacda062adfab", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/impl/WorkflowsApiServiceImpl.java b/components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/impl/WorkflowsApiServiceImpl.java\nindex 396bd8a8955..505e9a9d913 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/impl/WorkflowsApiServiceImpl.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/impl/WorkflowsApiServiceImpl.java\n", "chunk": "@@ -65,21 +63,13 @@ public class WorkflowsApiServiceImpl extends WorkflowsApiService {\n \n             String status=\"CREATED\";\n             String tenantDomain = RestApiUtil.getLoggedInUserTenantDomain();\n-\n             APIAdmin apiAdmin = new APIAdminImpl();\n             workflow=apiAdmin.getworkflowReferenceByExternalWorkflowReferenceID(externalWorkflowRef, status ,tenantDomain);\n-\n-            try {\n-                workflowinfoDTO = WorkflowMappingUtil.fromWorkflowsToInfoDTO(workflow);\n-                return Response.ok().entity(workflowinfoDTO).build();\n-            }\n-            catch(NullPointerException e){\n-                RestApiUtil.handleInternalServerError(\"Error while retrieving workflow request by the external workflow reference\" , e,log);\n-            }\n+            workflowinfoDTO = WorkflowMappingUtil.fromWorkflowsToInfoDTO(workflow);\n+            return Response.ok().entity(workflowinfoDTO).build();\n         }\n-\n-        catch(APIManagementException e){\n-            RestApiUtil.handleInternalServerError(\"Error while retrieving workflow request by the external workflow reference\" , e, log);\n+        catch(APIManagementException e) {\n+            RestApiUtil.handleInternalServerError(\"Error while retrieving workflow request by the external workflow reference. \", e, log);\n         }\n         return null;\n     }\n", "next_change": {"commit": "9b48a01776745e4804aee0554f67dde112e0ccdd", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/impl/WorkflowsApiServiceImpl.java b/components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/impl/WorkflowsApiServiceImpl.java\nindex 505e9a9d913..9e13fe0a323 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/impl/WorkflowsApiServiceImpl.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/impl/WorkflowsApiServiceImpl.java\n", "chunk": "@@ -60,16 +60,15 @@ public class WorkflowsApiServiceImpl extends WorkflowsApiService {\n         WorkflowInfoDTO workflowinfoDTO;\n         try {\n             Workflow workflow;\n-\n-            String status=\"CREATED\";\n+            String status = \"CREATED\";\n             String tenantDomain = RestApiUtil.getLoggedInUserTenantDomain();\n             APIAdmin apiAdmin = new APIAdminImpl();\n-            workflow=apiAdmin.getworkflowReferenceByExternalWorkflowReferenceID(externalWorkflowRef, status ,tenantDomain);\n+            workflow = apiAdmin.getworkflowReferenceByExternalWorkflowReferenceID(externalWorkflowRef, status, tenantDomain);\n             workflowinfoDTO = WorkflowMappingUtil.fromWorkflowsToInfoDTO(workflow);\n             return Response.ok().entity(workflowinfoDTO).build();\n-        }\n-        catch(APIManagementException e) {\n-            RestApiUtil.handleInternalServerError(\"Error while retrieving workflow request by the external workflow reference. \", e, log);\n+        } catch (APIManagementException e) {\n+            RestApiUtil.handleInternalServerError(\"Error while retrieving workflow request by the \" +\n+                    \"external workflow reference. \", e, log);\n         }\n         return null;\n     }\n", "next_change": null}, {"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/impl/WorkflowsApiServiceImpl.java b/components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/impl/WorkflowsApiServiceImpl.java\nindex 505e9a9d913..9e13fe0a323 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/impl/WorkflowsApiServiceImpl.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/impl/WorkflowsApiServiceImpl.java\n", "chunk": "@@ -77,10 +76,10 @@ public class WorkflowsApiServiceImpl extends WorkflowsApiService {\n     /**\n      * This is used to get the workflow pending requests\n      *\n-     * @param limit       maximum number of workflow returns\n-     * @param offset      starting index\n-     * @param accept      accept header value\n-     * @param ifNoneMatch If-None-Match header value\n+     * @param limit        maximum number of workflow returns\n+     * @param offset       starting index\n+     * @param accept       accept header value\n+     * @param ifNoneMatch  If-None-Match header value\n      * @param workflowType is the the type of the workflow request. (e.g: Application Creation, Application Subscription etc.)\n      * @return\n      */\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyOTI2Mg==", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r406629262", "body": "format this whole method", "bodyText": "format this whole method", "bodyHTML": "<p dir=\"auto\">format this whole method</p>", "author": "chamilaadhi", "createdAt": "2020-04-10T06:54:45Z", "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/impl/WorkflowsApiServiceImpl.java", "diffHunk": "@@ -42,6 +48,87 @@\n \n     private static final Log log = LogFactory.getLog(WorkflowsApiService.class);\n \n+\n+    /**\n+     * This is used to get the workflow pending request according to ExternalWorkflowReference\n+     *\n+     * @param externalWorkflowRef is the unique identifier for workflow request\n+     * @param ifNoneMatch If-None-Match header value\n+     * @return\n+     */\n+\n+    @Override\n+    public Response workflowsExternalWorkflowRefGet(String externalWorkflowRef, String ifNoneMatch) {\n+        WorkflowInfoDTO workflowinfoDTO;\n+        try {", "originalCommit": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc5MzAzOA==", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r410793038", "bodyText": "fixed with e00fe40", "author": "SahanHerath", "createdAt": "2020-04-19T02:09:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyOTI2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDMxMTQ4NQ==", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r414311485", "bodyText": "your haven't formatted the method . see that there are no spaces between the '='", "author": "chamilaadhi", "createdAt": "2020-04-24T05:50:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyOTI2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "e00fe40f5ef809f1ac81dc7c22faacda062adfab", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/impl/WorkflowsApiServiceImpl.java b/components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/impl/WorkflowsApiServiceImpl.java\nindex 396bd8a8955..505e9a9d913 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/impl/WorkflowsApiServiceImpl.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/impl/WorkflowsApiServiceImpl.java\n", "chunk": "@@ -56,7 +55,6 @@ public class WorkflowsApiServiceImpl extends WorkflowsApiService {\n      * @param ifNoneMatch If-None-Match header value\n      * @return\n      */\n-\n     @Override\n     public Response workflowsExternalWorkflowRefGet(String externalWorkflowRef, String ifNoneMatch) {\n         WorkflowInfoDTO workflowinfoDTO;\n", "next_change": {"commit": "9b48a01776745e4804aee0554f67dde112e0ccdd", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/impl/WorkflowsApiServiceImpl.java b/components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/impl/WorkflowsApiServiceImpl.java\nindex 505e9a9d913..9e13fe0a323 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/impl/WorkflowsApiServiceImpl.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/impl/WorkflowsApiServiceImpl.java\n", "chunk": "@@ -52,7 +52,7 @@ public class WorkflowsApiServiceImpl extends WorkflowsApiService {\n      * This is used to get the workflow pending request according to ExternalWorkflowReference\n      *\n      * @param externalWorkflowRef is the unique identifier for workflow request\n-     * @param ifNoneMatch If-None-Match header value\n+     * @param ifNoneMatch         If-None-Match header value\n      * @return\n      */\n     @Override\n", "next_change": null}, {"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/impl/WorkflowsApiServiceImpl.java b/components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/impl/WorkflowsApiServiceImpl.java\nindex 505e9a9d913..9e13fe0a323 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/impl/WorkflowsApiServiceImpl.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/impl/WorkflowsApiServiceImpl.java\n", "chunk": "@@ -60,16 +60,15 @@ public class WorkflowsApiServiceImpl extends WorkflowsApiService {\n         WorkflowInfoDTO workflowinfoDTO;\n         try {\n             Workflow workflow;\n-\n-            String status=\"CREATED\";\n+            String status = \"CREATED\";\n             String tenantDomain = RestApiUtil.getLoggedInUserTenantDomain();\n             APIAdmin apiAdmin = new APIAdminImpl();\n-            workflow=apiAdmin.getworkflowReferenceByExternalWorkflowReferenceID(externalWorkflowRef, status ,tenantDomain);\n+            workflow = apiAdmin.getworkflowReferenceByExternalWorkflowReferenceID(externalWorkflowRef, status, tenantDomain);\n             workflowinfoDTO = WorkflowMappingUtil.fromWorkflowsToInfoDTO(workflow);\n             return Response.ok().entity(workflowinfoDTO).build();\n-        }\n-        catch(APIManagementException e) {\n-            RestApiUtil.handleInternalServerError(\"Error while retrieving workflow request by the external workflow reference. \", e, log);\n+        } catch (APIManagementException e) {\n+            RestApiUtil.handleInternalServerError(\"Error while retrieving workflow request by the \" +\n+                    \"external workflow reference. \", e, log);\n         }\n         return null;\n     }\n", "next_change": null}]}}, {"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/impl/WorkflowsApiServiceImpl.java b/components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/impl/WorkflowsApiServiceImpl.java\nindex 396bd8a8955..505e9a9d913 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/impl/WorkflowsApiServiceImpl.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/impl/WorkflowsApiServiceImpl.java\n", "chunk": "@@ -65,21 +63,13 @@ public class WorkflowsApiServiceImpl extends WorkflowsApiService {\n \n             String status=\"CREATED\";\n             String tenantDomain = RestApiUtil.getLoggedInUserTenantDomain();\n-\n             APIAdmin apiAdmin = new APIAdminImpl();\n             workflow=apiAdmin.getworkflowReferenceByExternalWorkflowReferenceID(externalWorkflowRef, status ,tenantDomain);\n-\n-            try {\n-                workflowinfoDTO = WorkflowMappingUtil.fromWorkflowsToInfoDTO(workflow);\n-                return Response.ok().entity(workflowinfoDTO).build();\n-            }\n-            catch(NullPointerException e){\n-                RestApiUtil.handleInternalServerError(\"Error while retrieving workflow request by the external workflow reference\" , e,log);\n-            }\n+            workflowinfoDTO = WorkflowMappingUtil.fromWorkflowsToInfoDTO(workflow);\n+            return Response.ok().entity(workflowinfoDTO).build();\n         }\n-\n-        catch(APIManagementException e){\n-            RestApiUtil.handleInternalServerError(\"Error while retrieving workflow request by the external workflow reference\" , e, log);\n+        catch(APIManagementException e) {\n+            RestApiUtil.handleInternalServerError(\"Error while retrieving workflow request by the external workflow reference. \", e, log);\n         }\n         return null;\n     }\n", "next_change": {"commit": "9b48a01776745e4804aee0554f67dde112e0ccdd", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/impl/WorkflowsApiServiceImpl.java b/components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/impl/WorkflowsApiServiceImpl.java\nindex 505e9a9d913..9e13fe0a323 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/impl/WorkflowsApiServiceImpl.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/impl/WorkflowsApiServiceImpl.java\n", "chunk": "@@ -60,16 +60,15 @@ public class WorkflowsApiServiceImpl extends WorkflowsApiService {\n         WorkflowInfoDTO workflowinfoDTO;\n         try {\n             Workflow workflow;\n-\n-            String status=\"CREATED\";\n+            String status = \"CREATED\";\n             String tenantDomain = RestApiUtil.getLoggedInUserTenantDomain();\n             APIAdmin apiAdmin = new APIAdminImpl();\n-            workflow=apiAdmin.getworkflowReferenceByExternalWorkflowReferenceID(externalWorkflowRef, status ,tenantDomain);\n+            workflow = apiAdmin.getworkflowReferenceByExternalWorkflowReferenceID(externalWorkflowRef, status, tenantDomain);\n             workflowinfoDTO = WorkflowMappingUtil.fromWorkflowsToInfoDTO(workflow);\n             return Response.ok().entity(workflowinfoDTO).build();\n-        }\n-        catch(APIManagementException e) {\n-            RestApiUtil.handleInternalServerError(\"Error while retrieving workflow request by the external workflow reference. \", e, log);\n+        } catch (APIManagementException e) {\n+            RestApiUtil.handleInternalServerError(\"Error while retrieving workflow request by the \" +\n+                    \"external workflow reference. \", e, log);\n         }\n         return null;\n     }\n", "next_change": null}, {"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/impl/WorkflowsApiServiceImpl.java b/components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/impl/WorkflowsApiServiceImpl.java\nindex 505e9a9d913..9e13fe0a323 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/impl/WorkflowsApiServiceImpl.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/impl/WorkflowsApiServiceImpl.java\n", "chunk": "@@ -77,10 +76,10 @@ public class WorkflowsApiServiceImpl extends WorkflowsApiService {\n     /**\n      * This is used to get the workflow pending requests\n      *\n-     * @param limit       maximum number of workflow returns\n-     * @param offset      starting index\n-     * @param accept      accept header value\n-     * @param ifNoneMatch If-None-Match header value\n+     * @param limit        maximum number of workflow returns\n+     * @param offset       starting index\n+     * @param accept       accept header value\n+     * @param ifNoneMatch  If-None-Match header value\n      * @param workflowType is the the type of the workflow request. (e.g: Application Creation, Application Subscription etc.)\n      * @return\n      */\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyOTY3NQ==", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r406629675", "body": "format whole method. remove unnecessary spaces ", "bodyText": "format whole method. remove unnecessary spaces", "bodyHTML": "<p dir=\"auto\">format whole method. remove unnecessary spaces</p>", "author": "chamilaadhi", "createdAt": "2020-04-10T06:56:15Z", "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/impl/WorkflowsApiServiceImpl.java", "diffHunk": "@@ -42,6 +48,87 @@\n \n     private static final Log log = LogFactory.getLog(WorkflowsApiService.class);\n \n+\n+    /**\n+     * This is used to get the workflow pending request according to ExternalWorkflowReference\n+     *\n+     * @param externalWorkflowRef is the unique identifier for workflow request\n+     * @param ifNoneMatch If-None-Match header value\n+     * @return\n+     */\n+\n+    @Override\n+    public Response workflowsExternalWorkflowRefGet(String externalWorkflowRef, String ifNoneMatch) {\n+        WorkflowInfoDTO workflowinfoDTO;\n+        try {\n+            Workflow workflow;\n+\n+            String status=\"CREATED\";\n+            String tenantDomain = RestApiUtil.getLoggedInUserTenantDomain();\n+\n+            APIAdmin apiAdmin = new APIAdminImpl();\n+            workflow=apiAdmin.getworkflowReferenceByExternalWorkflowReferenceID(externalWorkflowRef, status ,tenantDomain);\n+\n+            try {\n+                workflowinfoDTO = WorkflowMappingUtil.fromWorkflowsToInfoDTO(workflow);\n+                return Response.ok().entity(workflowinfoDTO).build();\n+            }\n+            catch(NullPointerException e){\n+                RestApiUtil.handleInternalServerError(\"Error while retrieving workflow request by the external workflow reference\" , e,log);\n+            }\n+        }\n+\n+        catch(APIManagementException e){\n+            RestApiUtil.handleInternalServerError(\"Error while retrieving workflow request by the external workflow reference\" , e, log);\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * This is used to get the workflow pending requests\n+     *\n+     * @param limit       maximum number of workflow returns\n+     * @param offset      starting index\n+     * @param accept      accept header value\n+     * @param ifNoneMatch If-None-Match header value\n+     * @param workflowType is the the type of the workflow request. (e.g: Application Creation, Application Subscription etc.)\n+     * @return\n+     */\n+\n+    @Override\n+    public Response workflowsGet(Integer limit, Integer offset, String accept, String ifNoneMatch, String workflowType) {\n+\n+        limit = limit != null ? limit : RestApiConstants.PAGINATION_LIMIT_DEFAULT;", "originalCommit": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc5MzIyOQ==", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r410793229", "bodyText": "fixed with e00fe40", "author": "SahanHerath", "createdAt": "2020-04-19T02:10:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyOTY3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDMxMTgyMA==", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r414311820", "bodyText": "your haven't formatted the class .", "author": "chamilaadhi", "createdAt": "2020-04-24T05:51:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyOTY3NQ=="}], "type": "inlineReview", "revised_code": {"commit": "e00fe40f5ef809f1ac81dc7c22faacda062adfab", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/impl/WorkflowsApiServiceImpl.java b/components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/impl/WorkflowsApiServiceImpl.java\nindex 396bd8a8955..505e9a9d913 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/impl/WorkflowsApiServiceImpl.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/impl/WorkflowsApiServiceImpl.java\n", "chunk": "@@ -94,37 +84,25 @@ public class WorkflowsApiServiceImpl extends WorkflowsApiService {\n      * @param workflowType is the the type of the workflow request. (e.g: Application Creation, Application Subscription etc.)\n      * @return\n      */\n-\n     @Override\n     public Response workflowsGet(Integer limit, Integer offset, String accept, String ifNoneMatch, String workflowType) {\n \n         limit = limit != null ? limit : RestApiConstants.PAGINATION_LIMIT_DEFAULT;\n         offset = offset != null ? offset : RestApiConstants.PAGINATION_OFFSET_DEFAULT;\n-\n-\n         String tenantDomain = RestApiUtil.getLoggedInUserTenantDomain();\n-\n         WorkflowListDTO workflowListDTO;\n         try {\n             Workflow[] workflows;\n             String status=\"CREATED\";\n-\n             APIAdmin apiAdmin = new APIAdminImpl();\n             workflows=apiAdmin.getworkflows(workflowType, status ,tenantDomain);\n-\n-\n-            try {\n-                workflowListDTO = WorkflowMappingUtil.fromWorkflowsToDTO(workflows, limit, offset);\n-                WorkflowMappingUtil.setPaginationParams(workflowListDTO, limit, offset,\n+            workflowListDTO = WorkflowMappingUtil.fromWorkflowsToDTO(workflows, limit, offset);\n+            WorkflowMappingUtil.setPaginationParams(workflowListDTO, limit, offset,\n                         workflows.length);\n-                return Response.ok().entity(workflowListDTO).build();\n-            }\n-            catch( NullPointerException e){\n-                RestApiUtil.handleInternalServerError(\"Error while retrieving workflow requests\" , e, log);\n-            }\n+            return Response.ok().entity(workflowListDTO).build();\n         }\n         catch(APIManagementException e){\n-            RestApiUtil.handleInternalServerError(\"Error while retrieving workflow requests\" , e, log);\n+            RestApiUtil.handleInternalServerError(\"Error while retrieving workflow requests. \", e, log);\n         }\n         return null;\n     }\n", "next_change": {"commit": "9b48a01776745e4804aee0554f67dde112e0ccdd", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/impl/WorkflowsApiServiceImpl.java b/components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/impl/WorkflowsApiServiceImpl.java\nindex 505e9a9d913..9e13fe0a323 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/impl/WorkflowsApiServiceImpl.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/impl/WorkflowsApiServiceImpl.java\n", "chunk": "@@ -93,15 +92,14 @@ public class WorkflowsApiServiceImpl extends WorkflowsApiService {\n         WorkflowListDTO workflowListDTO;\n         try {\n             Workflow[] workflows;\n-            String status=\"CREATED\";\n+            String status = \"CREATED\";\n             APIAdmin apiAdmin = new APIAdminImpl();\n-            workflows=apiAdmin.getworkflows(workflowType, status ,tenantDomain);\n+            workflows = apiAdmin.getworkflows(workflowType, status, tenantDomain);\n             workflowListDTO = WorkflowMappingUtil.fromWorkflowsToDTO(workflows, limit, offset);\n             WorkflowMappingUtil.setPaginationParams(workflowListDTO, limit, offset,\n-                        workflows.length);\n+                    workflows.length);\n             return Response.ok().entity(workflowListDTO).build();\n-        }\n-        catch(APIManagementException e){\n+        } catch (APIManagementException e) {\n             RestApiUtil.handleInternalServerError(\"Error while retrieving workflow requests. \", e, log);\n         }\n         return null;\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyOTcyMA==", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r406629720", "body": "why???", "bodyText": "why???", "bodyHTML": "<p dir=\"auto\">why???</p>", "author": "chamilaadhi", "createdAt": "2020-04-10T06:56:27Z", "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/impl/WorkflowsApiServiceImpl.java", "diffHunk": "@@ -42,6 +48,87 @@\n \n     private static final Log log = LogFactory.getLog(WorkflowsApiService.class);\n \n+\n+    /**\n+     * This is used to get the workflow pending request according to ExternalWorkflowReference\n+     *\n+     * @param externalWorkflowRef is the unique identifier for workflow request\n+     * @param ifNoneMatch If-None-Match header value\n+     * @return\n+     */\n+\n+    @Override\n+    public Response workflowsExternalWorkflowRefGet(String externalWorkflowRef, String ifNoneMatch) {\n+        WorkflowInfoDTO workflowinfoDTO;\n+        try {\n+            Workflow workflow;\n+\n+            String status=\"CREATED\";\n+            String tenantDomain = RestApiUtil.getLoggedInUserTenantDomain();\n+\n+            APIAdmin apiAdmin = new APIAdminImpl();\n+            workflow=apiAdmin.getworkflowReferenceByExternalWorkflowReferenceID(externalWorkflowRef, status ,tenantDomain);\n+\n+            try {\n+                workflowinfoDTO = WorkflowMappingUtil.fromWorkflowsToInfoDTO(workflow);\n+                return Response.ok().entity(workflowinfoDTO).build();\n+            }\n+            catch(NullPointerException e){\n+                RestApiUtil.handleInternalServerError(\"Error while retrieving workflow request by the external workflow reference\" , e,log);\n+            }\n+        }\n+\n+        catch(APIManagementException e){\n+            RestApiUtil.handleInternalServerError(\"Error while retrieving workflow request by the external workflow reference\" , e, log);\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * This is used to get the workflow pending requests\n+     *\n+     * @param limit       maximum number of workflow returns\n+     * @param offset      starting index\n+     * @param accept      accept header value\n+     * @param ifNoneMatch If-None-Match header value\n+     * @param workflowType is the the type of the workflow request. (e.g: Application Creation, Application Subscription etc.)\n+     * @return\n+     */\n+\n+    @Override\n+    public Response workflowsGet(Integer limit, Integer offset, String accept, String ifNoneMatch, String workflowType) {\n+\n+        limit = limit != null ? limit : RestApiConstants.PAGINATION_LIMIT_DEFAULT;\n+        offset = offset != null ? offset : RestApiConstants.PAGINATION_OFFSET_DEFAULT;\n+\n+\n+        String tenantDomain = RestApiUtil.getLoggedInUserTenantDomain();\n+\n+        WorkflowListDTO workflowListDTO;\n+        try {\n+            Workflow[] workflows;\n+            String status=\"CREATED\";\n+\n+            APIAdmin apiAdmin = new APIAdminImpl();\n+            workflows=apiAdmin.getworkflows(workflowType, status ,tenantDomain);\n+\n+\n+            try {\n+                workflowListDTO = WorkflowMappingUtil.fromWorkflowsToDTO(workflows, limit, offset);\n+                WorkflowMappingUtil.setPaginationParams(workflowListDTO, limit, offset,\n+                        workflows.length);\n+                return Response.ok().entity(workflowListDTO).build();\n+            }\n+            catch( NullPointerException e){\n+                RestApiUtil.handleInternalServerError(\"Error while retrieving workflow requests\" , e, log);", "originalCommit": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e00fe40f5ef809f1ac81dc7c22faacda062adfab", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/impl/WorkflowsApiServiceImpl.java b/components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/impl/WorkflowsApiServiceImpl.java\nindex 396bd8a8955..505e9a9d913 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/impl/WorkflowsApiServiceImpl.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/impl/WorkflowsApiServiceImpl.java\n", "chunk": "@@ -94,37 +84,25 @@ public class WorkflowsApiServiceImpl extends WorkflowsApiService {\n      * @param workflowType is the the type of the workflow request. (e.g: Application Creation, Application Subscription etc.)\n      * @return\n      */\n-\n     @Override\n     public Response workflowsGet(Integer limit, Integer offset, String accept, String ifNoneMatch, String workflowType) {\n \n         limit = limit != null ? limit : RestApiConstants.PAGINATION_LIMIT_DEFAULT;\n         offset = offset != null ? offset : RestApiConstants.PAGINATION_OFFSET_DEFAULT;\n-\n-\n         String tenantDomain = RestApiUtil.getLoggedInUserTenantDomain();\n-\n         WorkflowListDTO workflowListDTO;\n         try {\n             Workflow[] workflows;\n             String status=\"CREATED\";\n-\n             APIAdmin apiAdmin = new APIAdminImpl();\n             workflows=apiAdmin.getworkflows(workflowType, status ,tenantDomain);\n-\n-\n-            try {\n-                workflowListDTO = WorkflowMappingUtil.fromWorkflowsToDTO(workflows, limit, offset);\n-                WorkflowMappingUtil.setPaginationParams(workflowListDTO, limit, offset,\n+            workflowListDTO = WorkflowMappingUtil.fromWorkflowsToDTO(workflows, limit, offset);\n+            WorkflowMappingUtil.setPaginationParams(workflowListDTO, limit, offset,\n                         workflows.length);\n-                return Response.ok().entity(workflowListDTO).build();\n-            }\n-            catch( NullPointerException e){\n-                RestApiUtil.handleInternalServerError(\"Error while retrieving workflow requests\" , e, log);\n-            }\n+            return Response.ok().entity(workflowListDTO).build();\n         }\n         catch(APIManagementException e){\n-            RestApiUtil.handleInternalServerError(\"Error while retrieving workflow requests\" , e, log);\n+            RestApiUtil.handleInternalServerError(\"Error while retrieving workflow requests. \", e, log);\n         }\n         return null;\n     }\n", "next_change": {"commit": "9b48a01776745e4804aee0554f67dde112e0ccdd", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/impl/WorkflowsApiServiceImpl.java b/components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/impl/WorkflowsApiServiceImpl.java\nindex 505e9a9d913..9e13fe0a323 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/impl/WorkflowsApiServiceImpl.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/impl/WorkflowsApiServiceImpl.java\n", "chunk": "@@ -93,15 +92,14 @@ public class WorkflowsApiServiceImpl extends WorkflowsApiService {\n         WorkflowListDTO workflowListDTO;\n         try {\n             Workflow[] workflows;\n-            String status=\"CREATED\";\n+            String status = \"CREATED\";\n             APIAdmin apiAdmin = new APIAdminImpl();\n-            workflows=apiAdmin.getworkflows(workflowType, status ,tenantDomain);\n+            workflows = apiAdmin.getworkflows(workflowType, status, tenantDomain);\n             workflowListDTO = WorkflowMappingUtil.fromWorkflowsToDTO(workflows, limit, offset);\n             WorkflowMappingUtil.setPaginationParams(workflowListDTO, limit, offset,\n-                        workflows.length);\n+                    workflows.length);\n             return Response.ok().entity(workflowListDTO).build();\n-        }\n-        catch(APIManagementException e){\n+        } catch (APIManagementException e) {\n             RestApiUtil.handleInternalServerError(\"Error while retrieving workflow requests. \", e, log);\n         }\n         return null;\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyOTk4Nw==", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r406629987", "body": "License header missing", "bodyText": "License header missing", "bodyHTML": "<p dir=\"auto\">License header missing</p>", "author": "chamilaadhi", "createdAt": "2020-04-10T06:57:25Z", "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/utils/mappings/WorkflowMappingUtil.java", "diffHunk": "@@ -0,0 +1,83 @@\n+package org.wso2.carbon.apimgt.rest.api.admin.utils.mappings;", "originalCommit": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc5MzMzMQ==", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r410793331", "bodyText": "fixed with e00fe40", "author": "SahanHerath", "createdAt": "2020-04-19T02:11:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyOTk4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc5NjU4MA==", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r410796580", "bodyText": "changed year with 68b7419", "author": "SahanHerath", "createdAt": "2020-04-19T02:35:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyOTk4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "e00fe40f5ef809f1ac81dc7c22faacda062adfab", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/utils/mappings/WorkflowMappingUtil.java b/components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/utils/mappings/WorkflowMappingUtil.java\nindex 82a505c15e6..bc30ec6dd12 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/utils/mappings/WorkflowMappingUtil.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/utils/mappings/WorkflowMappingUtil.java\n", "chunk": "@@ -1,3 +1,21 @@\n+/*\n+ *   Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *   WSO2 Inc. licenses this file to you under the Apache License,\n+ *   Version 2.0 (the \"License\"); you may not use this file except\n+ *   in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ *\n+ */\n package org.wso2.carbon.apimgt.rest.api.admin.utils.mappings;\n \n import org.wso2.carbon.apimgt.api.model.Workflow;\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYzMDE3NA==", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r406630174", "body": "class description missing. also format the whole class", "bodyText": "class description missing. also format the whole class", "bodyHTML": "<p dir=\"auto\">class description missing. also format the whole class</p>", "author": "chamilaadhi", "createdAt": "2020-04-10T06:57:54Z", "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/utils/mappings/WorkflowMappingUtil.java", "diffHunk": "@@ -0,0 +1,83 @@\n+package org.wso2.carbon.apimgt.rest.api.admin.utils.mappings;\n+\n+import org.wso2.carbon.apimgt.api.model.Workflow;\n+import org.wso2.carbon.apimgt.rest.api.admin.dto.WorkflowInfoDTO;\n+import org.wso2.carbon.apimgt.rest.api.admin.dto.WorkflowListDTO;\n+import org.wso2.carbon.apimgt.rest.api.util.RestApiConstants;\n+import org.wso2.carbon.apimgt.rest.api.util.utils.RestApiUtil;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class WorkflowMappingUtil {", "originalCommit": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc5MzM4Ng==", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r410793386", "bodyText": "fixed with e00fe40", "author": "SahanHerath", "createdAt": "2020-04-19T02:11:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYzMDE3NA=="}], "type": "inlineReview", "revised_code": {"commit": "e00fe40f5ef809f1ac81dc7c22faacda062adfab", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/utils/mappings/WorkflowMappingUtil.java b/components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/utils/mappings/WorkflowMappingUtil.java\nindex 82a505c15e6..bc30ec6dd12 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/utils/mappings/WorkflowMappingUtil.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/utils/mappings/WorkflowMappingUtil.java\n", "chunk": "@@ -10,12 +28,13 @@ import java.util.ArrayList;\n import java.util.List;\n import java.util.Map;\n \n+/**\n+ * This class manage mapping to DTO of  workflow requests\n+ */\n public class WorkflowMappingUtil {\n \n     private static Object WorkflowTypeEnum;\n \n-\n-\n     public enum WorkflowTypeEnum {\n         AM_APPLICATION_CREATION,  AM_SUBSCRIPTION_CREATION,  AM_USER_SIGNUP,  AM_APPLICATION_REGISTRATION_PRODUCTION,  AM_APPLICATION_REGISTRATION_SANDBOX,  AM_APPLICATION_DELETION,  AM_API_STATE,  AM_SUBSCRIPTION_DELETION,\n     };\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYzMDI0Ng==", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r406630246", "body": "remove unnecessary spaces", "bodyText": "remove unnecessary spaces", "bodyHTML": "<p dir=\"auto\">remove unnecessary spaces</p>", "author": "chamilaadhi", "createdAt": "2020-04-10T06:58:06Z", "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/utils/mappings/WorkflowMappingUtil.java", "diffHunk": "@@ -0,0 +1,83 @@\n+package org.wso2.carbon.apimgt.rest.api.admin.utils.mappings;\n+\n+import org.wso2.carbon.apimgt.api.model.Workflow;\n+import org.wso2.carbon.apimgt.rest.api.admin.dto.WorkflowInfoDTO;\n+import org.wso2.carbon.apimgt.rest.api.admin.dto.WorkflowListDTO;\n+import org.wso2.carbon.apimgt.rest.api.util.RestApiConstants;\n+import org.wso2.carbon.apimgt.rest.api.util.utils.RestApiUtil;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class WorkflowMappingUtil {\n+\n+    private static Object WorkflowTypeEnum;\n+\n+\n+", "originalCommit": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e00fe40f5ef809f1ac81dc7c22faacda062adfab", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/utils/mappings/WorkflowMappingUtil.java b/components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/utils/mappings/WorkflowMappingUtil.java\nindex 82a505c15e6..bc30ec6dd12 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/utils/mappings/WorkflowMappingUtil.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/utils/mappings/WorkflowMappingUtil.java\n", "chunk": "@@ -10,12 +28,13 @@ import java.util.ArrayList;\n import java.util.List;\n import java.util.Map;\n \n+/**\n+ * This class manage mapping to DTO of  workflow requests\n+ */\n public class WorkflowMappingUtil {\n \n     private static Object WorkflowTypeEnum;\n \n-\n-\n     public enum WorkflowTypeEnum {\n         AM_APPLICATION_CREATION,  AM_SUBSCRIPTION_CREATION,  AM_USER_SIGNUP,  AM_APPLICATION_REGISTRATION_PRODUCTION,  AM_APPLICATION_REGISTRATION_SANDBOX,  AM_APPLICATION_DELETION,  AM_API_STATE,  AM_SUBSCRIPTION_DELETION,\n     };\n", "next_change": null}]}}, {"oid": "e00fe40f5ef809f1ac81dc7c22faacda062adfab", "url": "https://github.com/wso2/carbon-apimgt/commit/e00fe40f5ef809f1ac81dc7c22faacda062adfab", "message": "Reformatted the approval workflow executor and rest APIs", "committedDate": "2020-04-15T10:56:04Z", "type": "commit"}, {"oid": "68b7419e6cbaa0784e59e60fbdbe77dbb27eb484", "url": "https://github.com/wso2/carbon-apimgt/commit/68b7419e6cbaa0784e59e60fbdbe77dbb27eb484", "message": "Changed the licence header in Approval Workflow Executor tests", "committedDate": "2020-04-19T01:46:12Z", "type": "commit"}, {"oid": "3719d98f3d2faba218147e15535025aa6169e371", "url": "https://github.com/wso2/carbon-apimgt/commit/3719d98f3d2faba218147e15535025aa6169e371", "message": "Change the licence header of Workflow.java", "committedDate": "2020-04-19T02:28:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDMwNzI2NQ==", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r414307265", "body": "formatting issue", "bodyText": "formatting issue", "bodyHTML": "<p dir=\"auto\">formatting issue</p>", "author": "chamilaadhi", "createdAt": "2020-04-24T05:39:14Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIAdminImpl.java", "diffHunk": "@@ -349,4 +346,38 @@ private int isCategoryAttached(APICategory category, String username) throws API\n         int length = (Integer) result.get(\"length\");\n         return length;\n     }\n+\n+    /**\n+     * The method converts the date into timestamp\n+     *\n+     * @param workflowType\n+     * @param status\n+     * @param tenantDomain\n+     * @return Workflow[]\n+     * @throws APIManagementException\n+     */\n+    public Workflow[] getworkflows(String workflowType, String status, String tenantDomain ) throws APIManagementException {", "originalCommit": "3719d98f3d2faba218147e15535025aa6169e371", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9b48a01776745e4804aee0554f67dde112e0ccdd", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIAdminImpl.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIAdminImpl.java\nindex bbaddc0a067..a75bc0f2a0a 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIAdminImpl.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIAdminImpl.java\n", "chunk": "@@ -350,29 +350,30 @@ public class APIAdminImpl implements APIAdmin {\n     /**\n      * The method converts the date into timestamp\n      *\n-     * @param workflowType\n-     * @param status\n-     * @param tenantDomain\n-     * @return Workflow[]\n+     * @param workflowType workflow Type of workflow pending request\n+     * @param status       Workflow status of workflow pending request\n+     * @param tenantDomain tenant domain of user\n+     * @return Workflow[]  list of workflow pending requests\n      * @throws APIManagementException\n      */\n-    public Workflow[] getworkflows(String workflowType, String status, String tenantDomain ) throws APIManagementException {\n+    public Workflow[] getworkflows(String workflowType, String status, String tenantDomain)\n+            throws APIManagementException {\n         return apiMgtDAO.getworkflows(workflowType, status, tenantDomain);\n     }\n \n     /**\n      * The method converts the date into timestamp\n      *\n-     * @param externelWorkflowRef\n-     * @param status\n-     * @param tenantDomain\n-     * @return Workflow\n+     * @param externelWorkflowRef External Workflow Reference of workflow pending request\n+     * @param status              Workflow status of workflow pending request\n+     * @param tenantDomain        tenant domain of user\n+     * @return Workflow           Workflow pending request\n      * @throws APIManagementException\n      */\n     public Workflow getworkflowReferenceByExternalWorkflowReferenceID(String externelWorkflowRef, String status,\n                                                                       String tenantDomain) throws APIManagementException {\n-\n-        Workflow workflow=apiMgtDAO.getworkflowReferenceByExternalWorkflowReferenceID(externelWorkflowRef, status ,tenantDomain );\n+        Workflow workflow = apiMgtDAO.getworkflowReferenceByExternalWorkflowReferenceID(externelWorkflowRef,\n+                status, tenantDomain);\n \n         if (workflow == null) {\n             String msg = \"External workflow Reference: \" + externelWorkflowRef + \" was not found.\";\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDMwNzQxOQ==", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r414307419", "body": "add a description for each parameter", "bodyText": "add a description for each parameter", "bodyHTML": "<p dir=\"auto\">add a description for each parameter</p>", "author": "chamilaadhi", "createdAt": "2020-04-24T05:39:39Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIAdminImpl.java", "diffHunk": "@@ -349,4 +346,38 @@ private int isCategoryAttached(APICategory category, String username) throws API\n         int length = (Integer) result.get(\"length\");\n         return length;\n     }\n+\n+    /**\n+     * The method converts the date into timestamp\n+     *\n+     * @param workflowType", "originalCommit": "3719d98f3d2faba218147e15535025aa6169e371", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9b48a01776745e4804aee0554f67dde112e0ccdd", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIAdminImpl.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIAdminImpl.java\nindex bbaddc0a067..a75bc0f2a0a 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIAdminImpl.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIAdminImpl.java\n", "chunk": "@@ -350,29 +350,30 @@ public class APIAdminImpl implements APIAdmin {\n     /**\n      * The method converts the date into timestamp\n      *\n-     * @param workflowType\n-     * @param status\n-     * @param tenantDomain\n-     * @return Workflow[]\n+     * @param workflowType workflow Type of workflow pending request\n+     * @param status       Workflow status of workflow pending request\n+     * @param tenantDomain tenant domain of user\n+     * @return Workflow[]  list of workflow pending requests\n      * @throws APIManagementException\n      */\n-    public Workflow[] getworkflows(String workflowType, String status, String tenantDomain ) throws APIManagementException {\n+    public Workflow[] getworkflows(String workflowType, String status, String tenantDomain)\n+            throws APIManagementException {\n         return apiMgtDAO.getworkflows(workflowType, status, tenantDomain);\n     }\n \n     /**\n      * The method converts the date into timestamp\n      *\n-     * @param externelWorkflowRef\n-     * @param status\n-     * @param tenantDomain\n-     * @return Workflow\n+     * @param externelWorkflowRef External Workflow Reference of workflow pending request\n+     * @param status              Workflow status of workflow pending request\n+     * @param tenantDomain        tenant domain of user\n+     * @return Workflow           Workflow pending request\n      * @throws APIManagementException\n      */\n     public Workflow getworkflowReferenceByExternalWorkflowReferenceID(String externelWorkflowRef, String status,\n                                                                       String tenantDomain) throws APIManagementException {\n-\n-        Workflow workflow=apiMgtDAO.getworkflowReferenceByExternalWorkflowReferenceID(externelWorkflowRef, status ,tenantDomain );\n+        Workflow workflow = apiMgtDAO.getworkflowReferenceByExternalWorkflowReferenceID(externelWorkflowRef,\n+                status, tenantDomain);\n \n         if (workflow == null) {\n             String msg = \"External workflow Reference: \" + externelWorkflowRef + \" was not found.\";\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDMwNzk3OQ==", "url": "https://github.com/wso2/carbon-apimgt/pull/8293#discussion_r414307979", "body": "this method is not formatted", "bodyText": "this method is not formatted", "bodyHTML": "<p dir=\"auto\">this method is not formatted</p>", "author": "chamilaadhi", "createdAt": "2020-04-24T05:41:07Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "diffHunk": "@@ -14610,4 +14620,243 @@ public String getUserID(String userName) throws APIManagementException {\n         }\n         return list;\n     }\n+\n+    /**\n+     * Remove the Pending workflow Requests using ExternalWorkflowReference\n+     * @param workflowExtRef External Workflow Reference of Workflow Pending Request\n+     * @throws APIManagementException\n+     */\n+    public void deleteWorkflowRequest(String workflowExtRef) throws APIManagementException {\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+        String query = SQLConstants.DELETE_WORKFLOW_REQUEST_SQL;\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            connection.setAutoCommit(false);\n+            prepStmt = connection.prepareStatement(query);\n+            prepStmt.setString(1, workflowExtRef);\n+            prepStmt.executeUpdate();\n+            connection.commit();\n+        }\n+        catch (SQLException e) {\n+            handleException(\"Failed to delete the workflow request. \", e);\n+        } finally {\n+            APIMgtDBUtil.closeAllConnections(prepStmt, connection, null);\n+        }\n+    }\n+\n+    /**\n+     * Get the Pending workflow Request using ExternalWorkflowReference\n+     * @param externalWorkflowRef\n+     * @return workflow pending request\n+     * @throws APIManagementException\n+     */\n+    public Workflow getworkflowReferenceByExternalWorkflowReference(String externalWorkflowRef)throws APIManagementException {\n+\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+        ResultSet rs = null;\n+        Workflow workflow = new Workflow();\n+        String sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_BY_EXTERNALWORKFLOWREF;\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            prepStmt = connection.prepareStatement(sqlQuery);\n+            prepStmt.setString(1, externalWorkflowRef);\n+            rs = prepStmt.executeQuery();\n+\n+            while (rs.next()) {\n+                workflow.setWorkflowId(rs.getInt(\"WF_ID\"));\n+                workflow.setWorkflowReference(rs.getString(\"WF_REFERENCE\"));\n+                workflow.setWorkflowType(rs.getString(\"WF_TYPE\"));\n+                String workflowstatus =rs.getString(\"WF_STATUS\");\n+                workflow.setStatus(org.wso2.carbon.apimgt.api.WorkflowStatus.valueOf(workflowstatus));\n+                workflow.setCreatedTime(rs.getTimestamp(\"WF_CREATED_TIME\").toString());\n+                workflow.setUpdatedTime(rs.getTimestamp(\"WF_UPDATED_TIME\").toString());\n+                workflow.setWorkflowStatusDesc(rs.getString(\"WF_STATUS_DESC\"));\n+                workflow.setTenantId(rs.getInt(\"TENANT_ID\"));\n+                workflow.setTenantDomain(rs.getString(\"TENANT_DOMAIN\"));\n+                workflow.setExternalWorkflowReference(rs.getString(\"WF_EXTERNAL_REFERENCE\"));\n+                Blob metadatablob = rs.getBlob(\"WF_METADATA\");\n+\n+                byte[] metadataByte;\n+                if(metadatablob != null) {\n+                    metadataByte = metadatablob.getBytes(1L, (int) metadatablob.length());\n+                    InputStream targetStream = new ByteArrayInputStream(metadataByte);\n+                    String metadata = APIMgtDBUtil.getStringFromInputStream(targetStream);\n+                    Gson metadataGson = new Gson();\n+                    JSONObject metadataJson = metadataGson.fromJson(metadata, JSONObject.class);\n+                    workflow.setMetadata(metadataJson);\n+                } else {\n+                    JSONObject metadataJson = new JSONObject();\n+                    workflow.setMetadata(metadataJson);\n+                }\n+            }\n+        } catch (SQLException e) {\n+            handleException(\"Error when retriving the workflow details. \" , e);\n+        } finally {\n+            APIMgtDBUtil.closeAllConnections(prepStmt, connection, rs);\n+        }\n+        return workflow;\n+    }\n+\n+    /**\n+     * Get the Pending workflow Requests using WorkflowType for a particular tenant\n+     * @param workflowType Type of the workflow pending request\n+     * @param status workflow status of workflow pending request\n+     * @param tenantDomain tenantDomain of the user\n+     * @return List of workflow pending request\n+     * @throws APIManagementException\n+     */\n+    public Workflow[] getworkflows(String workflowType, String status, String tenantDomain) throws APIManagementException {", "originalCommit": "3719d98f3d2faba218147e15535025aa6169e371", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "9b48a01776745e4804aee0554f67dde112e0ccdd", "url": "https://github.com/wso2/carbon-apimgt/commit/9b48a01776745e4804aee0554f67dde112e0ccdd", "message": "Reformtted the previous commits and removed unwanted files", "committedDate": "2020-04-24T09:47:33Z", "type": "commit"}, {"oid": "56d859aa06815de769c0130c450c2764150312fc", "url": "https://github.com/wso2/carbon-apimgt/commit/56d859aa06815de769c0130c450c2764150312fc", "message": "Changed the admin-api.yaml and beans.xml in org.wso2.carbon.apimgt.rest.api.admin", "committedDate": "2020-04-28T10:11:28Z", "type": "commit"}]}