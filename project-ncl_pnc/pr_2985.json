{"pr_number": 2985, "pr_title": "Add an option to define nodeId for sequence generator.", "pr_author": "matejonnet", "pr_createdAt": "2020-04-20T21:39:48Z", "pr_url": "https://github.com/project-ncl/pnc/pull/2985", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjEzMjIzNg==", "url": "https://github.com/project-ncl/pnc/pull/2985#discussion_r412132236", "body": "```suggestion\r\n    private static final Map<Integer, Sequence> instance = new ConcurrentHashMap<>(1,1.0f);\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static final Map<Integer, Sequence> instance = new ConcurrentHashMap<>();\n          \n          \n            \n                private static final Map<Integer, Sequence> instance = new ConcurrentHashMap<>(1,1.0f);", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">private</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">final</span> <span class=\"pl-k\">Map&lt;<span class=\"pl-smi\">Integer</span>, <span class=\"pl-smi\">Sequence</span>&gt;</span> instance <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-k\">ConcurrentHashMap&lt;&gt;</span>();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">private</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">final</span> <span class=\"pl-k\">Map&lt;<span class=\"pl-smi\">Integer</span>, <span class=\"pl-smi\">Sequence</span>&gt;</span> instance <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-k\">ConcurrentHashMap&lt;&gt;</span>(<span class=\"pl-c1 x x-first\">1</span><span class=\"x\">,</span><span class=\"pl-c1 x x-last\">1.0f</span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "janinko", "createdAt": "2020-04-21T12:16:34Z", "path": "common/src/main/java/org/jboss/pnc/common/concurrent/Sequence.java", "diffHunk": "@@ -20,13 +20,47 @@\n import java.util.Map;\n import java.util.concurrent.ConcurrentHashMap;\n \n+/**\n+ * A class for generating 64-bit unique IDs at high scale. The IDs generated by this service are roughly time sortable.\n+ *\n+ * The ID generation follows Twitter snowflake pattern and the IDs are made up of the following components:\n+ *\n+ * Epoch timestamp in millisecond precision - 41 bits (gives us 69 years with a custom epoch) Configured machine id - 10\n+ * bits (gives us up to 1024 machines) Sequence number - 12 bits (A local counter per machine that rolls over every\n+ * 4096)\n+ */\n public class Sequence {\n \n-    private static final Map<Integer, SequenceGenerator> instance = new ConcurrentHashMap<>();\n-    private static final int INSTANCE_KEY = 0;\n+    private static final Map<Integer, Sequence> instance = new ConcurrentHashMap<>();", "originalCommit": "d69a995a0ccbe7c041ae0c6fc2093d6d7a8cba60", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjEzNDU2NA==", "url": "https://github.com/project-ncl/pnc/pull/2985#discussion_r412134564", "body": "Make the `0` constant.", "bodyText": "Make the 0 constant.", "bodyHTML": "<p dir=\"auto\">Make the <code>0</code> constant.</p>", "author": "janinko", "createdAt": "2020-04-21T12:20:03Z", "path": "common/src/main/java/org/jboss/pnc/common/concurrent/Sequence.java", "diffHunk": "@@ -20,13 +20,47 @@\n import java.util.Map;\n import java.util.concurrent.ConcurrentHashMap;\n \n+/**\n+ * A class for generating 64-bit unique IDs at high scale. The IDs generated by this service are roughly time sortable.\n+ *\n+ * The ID generation follows Twitter snowflake pattern and the IDs are made up of the following components:\n+ *\n+ * Epoch timestamp in millisecond precision - 41 bits (gives us 69 years with a custom epoch) Configured machine id - 10\n+ * bits (gives us up to 1024 machines) Sequence number - 12 bits (A local counter per machine that rolls over every\n+ * 4096)\n+ */\n public class Sequence {\n \n-    private static final Map<Integer, SequenceGenerator> instance = new ConcurrentHashMap<>();\n-    private static final int INSTANCE_KEY = 0;\n+    private static final Map<Integer, Sequence> instance = new ConcurrentHashMap<>();\n+\n+    /**\n+     * If nodeId is used, it can be set only once and have to be set before the first nextId() call. If nodeId is not\n+     * explicitly defined it's calculated based on machines mac address.\n+     *\n+     * @param nodeId an int value between (inclusive) 0 and 1023.\n+     */\n+    public static void setNodeId(int nodeId) {\n+        getInstance(nodeId);\n+    }\n \n     public static Long nextId() {\n-        SequenceGenerator sequenceGenerator = instance.computeIfAbsent(INSTANCE_KEY, k -> new SequenceGenerator());\n-        return sequenceGenerator.nextId();\n+        return getInstance(null).sequenceGenerator.nextId();\n+    }\n+\n+    private static Sequence getInstance(Integer nodeId) {\n+        return instance.computeIfAbsent(0, k -> new Sequence(nodeId));", "originalCommit": "d69a995a0ccbe7c041ae0c6fc2093d6d7a8cba60", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjE4MDY4NQ==", "url": "https://github.com/project-ncl/pnc/pull/2985#discussion_r412180685", "bodyText": "What the benefit of using the constant, it's used only here and it can be anything ?", "author": "matejonnet", "createdAt": "2020-04-21T13:23:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjEzNDU2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjIzOTcyOQ==", "url": "https://github.com/project-ncl/pnc/pull/2985#discussion_r412239729", "bodyText": "readability - giving it a name may be less confusing (\"Why is there zero? Why not one?\")\nnegligible speed - making it Integer constant removes the autoboxing of int.\n\ngcode with autoboxing:\n       3: iconst_0\n       4: invokestatic  #3                  // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;\n\ngcode with constant:\n       3: getstatic     #3                  // Field KEY:Ljava/lang/Integer;", "author": "janinko", "createdAt": "2020-04-21T14:34:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjEzNDU2NA=="}], "type": "inlineReview"}, {"oid": "a616da12af6bbb1831557a2a5c738cab776025ee", "url": "https://github.com/project-ncl/pnc/commit/a616da12af6bbb1831557a2a5c738cab776025ee", "message": "Add an option to define nodeId for sequence generator.", "committedDate": "2020-04-22T09:55:40Z", "type": "forcePushed"}, {"oid": "a0ecf5498984cffa416669e5fff980af3fd2a8de", "url": "https://github.com/project-ncl/pnc/commit/a0ecf5498984cffa416669e5fff980af3fd2a8de", "message": "Add an option to define nodeId for sequence generator.", "committedDate": "2020-04-22T11:07:16Z", "type": "commit"}, {"oid": "a0ecf5498984cffa416669e5fff980af3fd2a8de", "url": "https://github.com/project-ncl/pnc/commit/a0ecf5498984cffa416669e5fff980af3fd2a8de", "message": "Add an option to define nodeId for sequence generator.", "committedDate": "2020-04-22T11:07:16Z", "type": "forcePushed"}]}