{"pr_number": 10784, "pr_title": "[#9536] Migrate remaining Admin E2E tests", "pr_author": "wkurniawan07", "pr_createdAt": "2020-10-14T16:25:16Z", "pr_url": "https://github.com/TEAMMATES/teammates/pull/10784", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDgxNDc0OQ==", "url": "https://github.com/TEAMMATES/teammates/pull/10784#discussion_r504814749", "body": "Aware that there is `verifyEmailSent` method. However currently there are places whereby even `verifyEmailSent` will not work due to wrongly configured email (i.e. forget to append `@gmail.com`), so we might as well fix this together when fixing the above.", "bodyText": "Aware that there is verifyEmailSent method. However currently there are places whereby even verifyEmailSent will not work due to wrongly configured email (i.e. forget to append @gmail.com), so we might as well fix this together when fixing the above.", "bodyHTML": "<p dir=\"auto\">Aware that there is <code>verifyEmailSent</code> method. However currently there are places whereby even <code>verifyEmailSent</code> will not work due to wrongly configured email (i.e. forget to append <code>@gmail.com</code>), so we might as well fix this together when fixing the above.</p>", "author": "wkurniawan07", "createdAt": "2020-10-14T16:29:55Z", "path": "src/e2e/java/teammates/e2e/cases/e2e/AutomatedSessionRemindersTest.java", "diffHunk": "@@ -1,43 +1,40 @@\n-package teammates.test.cases.browsertests;\n+package teammates.e2e.cases.e2e;\n \n import org.testng.annotations.Test;\n \n import teammates.common.datatransfer.attributes.FeedbackSessionAttributes;\n import teammates.common.util.AppUrl;\n-import teammates.common.util.Config;\n import teammates.common.util.Const;\n import teammates.common.util.TimeHelper;\n import teammates.common.util.TimeHelperExtension;\n-import teammates.e2e.util.Priority;\n-import teammates.test.pageobjects.GenericAppPage;\n+import teammates.e2e.pageobjects.GenericAppPage;\n+import teammates.e2e.util.TestProperties;\n \n /**\n  * SUT: {@link Const.CronJobURIs#AUTOMATED_FEEDBACK_OPENING_REMINDERS},\n  *      {@link Const.CronJobURIs#AUTOMATED_FEEDBACK_CLOSING_REMINDERS},\n  *      {@link Const.CronJobURIs#AUTOMATED_FEEDBACK_CLOSED_REMINDERS},\n  *      {@link Const.CronJobURIs#AUTOMATED_FEEDBACK_PUBLISHED_REMINDERS}.\n  */\n-@Priority(5)\n-public class AutomatedSessionRemindersTest extends BaseLegacyUiTestCase {\n+public class AutomatedSessionRemindersTest extends BaseE2ETestCase {\n \n     @Override\n     protected void prepareTestData() {\n         testData = loadDataBundle(\"/AutomatedSessionRemindersTest.json\");\n \n-        /*\n-         * In this test, we set the email address of the accounts to be the same as the\n-         * support email address. When running the test against a production server,\n-         * email alerts will be sent to the specified support email address.\n-         * The tester should manually check the email box after running the test suite.\n-         */\n-\n-        testData.accounts.get(\"instructorWithEvals\").email = Config.SUPPORT_EMAIL;\n-        testData.instructors.get(\"AutSessRem.instructor\").email = Config.SUPPORT_EMAIL;\n-        testData.students.get(\"alice.tmms@AutSessRem.course\").email = Config.SUPPORT_EMAIL;\n-        testData.feedbackSessions.get(\"closedSession\").setCreatorEmail(Config.SUPPORT_EMAIL);\n-        testData.feedbackSessions.get(\"closingSession\").setCreatorEmail(Config.SUPPORT_EMAIL);\n-        testData.feedbackSessions.get(\"openingSession\").setCreatorEmail(Config.SUPPORT_EMAIL);\n-        testData.feedbackSessions.get(\"publishedSession\").setCreatorEmail(Config.SUPPORT_EMAIL);\n+        // When running the test against a production server, email alerts will be sent\n+        // to the specified email address\n+        // The tester should manually check the email box after running the test suite\n+        // TODO check if we can automate this checking process", "originalCommit": "19a148650beac33a322fb47a422045d5427c279f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc5MDA1Nw==", "url": "https://github.com/TEAMMATES/teammates/pull/10784#discussion_r506790057", "body": "I believe interactions with Backdoor are abstracted in `BaseTestCaseWithBackDoorApiAccess` so it may be better to add a `getAccount()` method there.", "bodyText": "I believe interactions with Backdoor are abstracted in BaseTestCaseWithBackDoorApiAccess so it may be better to add a getAccount() method there.", "bodyHTML": "<p dir=\"auto\">I believe interactions with Backdoor are abstracted in <code>BaseTestCaseWithBackDoorApiAccess</code> so it may be better to add a <code>getAccount()</code> method there.</p>", "author": "jtankw3", "createdAt": "2020-10-17T03:55:55Z", "path": "src/e2e/java/teammates/e2e/cases/e2e/AdminAccountsPageE2ETest.java", "diffHunk": "@@ -0,0 +1,85 @@\n+package teammates.e2e.cases.e2e;\n+\n+import org.testng.annotations.Test;\n+\n+import teammates.common.datatransfer.attributes.AccountAttributes;\n+import teammates.common.util.AppUrl;\n+import teammates.common.util.Const;\n+import teammates.e2e.pageobjects.AdminAccountsPage;\n+import teammates.e2e.util.BackDoor;\n+\n+/**\n+ * SUT: {@link Const.WebPageURIs#ADMIN_ACCOUNTS_PAGE}.\n+ */\n+public class AdminAccountsPageE2ETest extends BaseE2ETestCase {\n+\n+    @Override\n+    protected void prepareTestData() {\n+        testData = loadDataBundle(\"/AdminAccountsPageE2ETest.json\");\n+        removeAndRestoreDataBundle(testData);\n+    }\n+\n+    @Test\n+    public void testAll() {\n+\n+        String googleId = \"AAMgtE2eT.instr2\";\n+\n+        ______TS(\"verify loaded data\");\n+\n+        AppUrl accountsPageUrl = createUrl(Const.WebPageURIs.ADMIN_ACCOUNTS_PAGE)\n+                .withParam(Const.ParamsNames.INSTRUCTOR_ID, googleId);\n+        AdminAccountsPage accountsPage = loginAdminToPage(accountsPageUrl, AdminAccountsPage.class);\n+\n+        AccountAttributes account = BackDoor.getAccount(googleId);", "originalCommit": "3936c91b552a4a368192f8119c7d241f4d797c14", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "00e9352bf71f91ac4d9c14035b8510361747ee46", "changed_code": [{"header": "diff --git a/src/e2e/java/teammates/e2e/cases/e2e/AdminAccountsPageE2ETest.java b/src/e2e/java/teammates/e2e/cases/e2e/AdminAccountsPageE2ETest.java\nindex 978cbc04a9..9c9f457785 100644\n--- a/src/e2e/java/teammates/e2e/cases/e2e/AdminAccountsPageE2ETest.java\n+++ b/src/e2e/java/teammates/e2e/cases/e2e/AdminAccountsPageE2ETest.java\n", "chunk": "@@ -30,7 +30,7 @@ public class AdminAccountsPageE2ETest extends BaseE2ETestCase {\n                 .withParam(Const.ParamsNames.INSTRUCTOR_ID, googleId);\n         AdminAccountsPage accountsPage = loginAdminToPage(accountsPageUrl, AdminAccountsPage.class);\n \n-        AccountAttributes account = BackDoor.getAccount(googleId);\n+        AccountAttributes account = getAccount(googleId);\n         accountsPage.verifyAccountDetails(account);\n \n         ______TS(\"action: remove instructor from course\");\n", "next_change": {"commit": "8154021ab829ca217ed19532a531c703282e37a8", "changed_code": [{"header": "diff --git a/src/e2e/java/teammates/e2e/cases/e2e/AdminAccountsPageE2ETest.java b/src/e2e/java/teammates/e2e/cases/e2e/AdminAccountsPageE2ETest.java\nindex 9c9f457785..fcacdb8f37 100644\n--- a/src/e2e/java/teammates/e2e/cases/e2e/AdminAccountsPageE2ETest.java\n+++ b/src/e2e/java/teammates/e2e/cases/e2e/AdminAccountsPageE2ETest.java\n", "chunk": "@@ -38,25 +40,29 @@ public class AdminAccountsPageE2ETest extends BaseE2ETestCase {\n         String courseId = \"AAMgtE2eT.CS2103\";\n         String email = \"AAMgtE2eT.instr2@gmail.tmt\";\n \n-        verifyPresentInDatastore(getInstructor(courseId, email));\n+        InstructorAttributes instructor = getInstructor(courseId, email);\n+        verifyPresentInDatastore(instructor);\n         accountsPage.clickRemoveInstructorFromCourse(courseId);\n         accountsPage.verifyStatusMessage(\"Instructor is successfully deleted from course \\\"\" + courseId + \"\\\"\");\n-        verifyAbsentInDatastore(getInstructor(courseId, email));\n+        verifyAbsentInDatastore(instructor);\n \n         ______TS(\"action: remove student from course\");\n \n-        verifyPresentInDatastore(BackDoor.getStudent(courseId, email));\n+        StudentAttributes student = BackDoor.getStudent(courseId, email);\n+        verifyPresentInDatastore(student);\n         accountsPage.clickRemoveStudentFromCourse(courseId);\n         accountsPage.verifyStatusMessage(\"Student is successfully deleted from course \\\"\" + courseId + \"\\\"\");\n-        verifyAbsentInDatastore(BackDoor.getStudent(courseId, email));\n+        verifyAbsentInDatastore(student);\n \n         ______TS(\"action: downgrade instructor account\");\n \n         String courseId2 = \"AAMgtE2eT.CS1101\";\n         String courseId3 = \"AAMgtE2eT.CS2104\";\n \n-        verifyPresentInDatastore(getInstructor(courseId2, email));\n-        verifyPresentInDatastore(getInstructor(courseId3, email));\n+        InstructorAttributes instructor2 = getInstructor(courseId2, email);\n+        InstructorAttributes instructor3 = getInstructor(courseId3, email);\n+        verifyPresentInDatastore(instructor2);\n+        verifyPresentInDatastore(instructor3);\n \n         accountsPage.clickDowngradeAccount();\n         accountsPage.verifyStatusMessage(\"Instructor account is successfully downgraded to student.\");\n", "next_change": {"commit": "8926f4f0b61ef7379bf0cb5750c81a3f4a75b225", "changed_code": [{"header": "diff --git a/src/e2e/java/teammates/e2e/cases/e2e/AdminAccountsPageE2ETest.java b/src/e2e/java/teammates/e2e/cases/e2e/AdminAccountsPageE2ETest.java\ndeleted file mode 100644\nindex fcacdb8f37..0000000000\n--- a/src/e2e/java/teammates/e2e/cases/e2e/AdminAccountsPageE2ETest.java\n+++ /dev/null\n", "chunk": "@@ -1,96 +0,0 @@\n-package teammates.e2e.cases.e2e;\n-\n-import org.testng.annotations.Test;\n-\n-import teammates.common.datatransfer.attributes.AccountAttributes;\n-import teammates.common.datatransfer.attributes.InstructorAttributes;\n-import teammates.common.datatransfer.attributes.StudentAttributes;\n-import teammates.common.util.AppUrl;\n-import teammates.common.util.Const;\n-import teammates.e2e.pageobjects.AdminAccountsPage;\n-import teammates.e2e.util.BackDoor;\n-\n-/**\n- * SUT: {@link Const.WebPageURIs#ADMIN_ACCOUNTS_PAGE}.\n- */\n-public class AdminAccountsPageE2ETest extends BaseE2ETestCase {\n-\n-    @Override\n-    protected void prepareTestData() {\n-        testData = loadDataBundle(\"/AdminAccountsPageE2ETest.json\");\n-        removeAndRestoreDataBundle(testData);\n-    }\n-\n-    @Test\n-    public void testAll() {\n-\n-        String googleId = \"AAMgtE2eT.instr2\";\n-\n-        ______TS(\"verify loaded data\");\n-\n-        AppUrl accountsPageUrl = createUrl(Const.WebPageURIs.ADMIN_ACCOUNTS_PAGE)\n-                .withParam(Const.ParamsNames.INSTRUCTOR_ID, googleId);\n-        AdminAccountsPage accountsPage = loginAdminToPage(accountsPageUrl, AdminAccountsPage.class);\n-\n-        AccountAttributes account = getAccount(googleId);\n-        accountsPage.verifyAccountDetails(account);\n-\n-        ______TS(\"action: remove instructor from course\");\n-\n-        String courseId = \"AAMgtE2eT.CS2103\";\n-        String email = \"AAMgtE2eT.instr2@gmail.tmt\";\n-\n-        InstructorAttributes instructor = getInstructor(courseId, email);\n-        verifyPresentInDatastore(instructor);\n-        accountsPage.clickRemoveInstructorFromCourse(courseId);\n-        accountsPage.verifyStatusMessage(\"Instructor is successfully deleted from course \\\"\" + courseId + \"\\\"\");\n-        verifyAbsentInDatastore(instructor);\n-\n-        ______TS(\"action: remove student from course\");\n-\n-        StudentAttributes student = BackDoor.getStudent(courseId, email);\n-        verifyPresentInDatastore(student);\n-        accountsPage.clickRemoveStudentFromCourse(courseId);\n-        accountsPage.verifyStatusMessage(\"Student is successfully deleted from course \\\"\" + courseId + \"\\\"\");\n-        verifyAbsentInDatastore(student);\n-\n-        ______TS(\"action: downgrade instructor account\");\n-\n-        String courseId2 = \"AAMgtE2eT.CS1101\";\n-        String courseId3 = \"AAMgtE2eT.CS2104\";\n-\n-        InstructorAttributes instructor2 = getInstructor(courseId2, email);\n-        InstructorAttributes instructor3 = getInstructor(courseId3, email);\n-        verifyPresentInDatastore(instructor2);\n-        verifyPresentInDatastore(instructor3);\n-\n-        accountsPage.clickDowngradeAccount();\n-        accountsPage.verifyStatusMessage(\"Instructor account is successfully downgraded to student.\");\n-\n-        account = getAccount(googleId);\n-        assertFalse(account.isInstructor);\n-        accountsPage.verifyAccountDetails(account);\n-\n-        // instructor entities should also be deleted\n-        verifyAbsentInDatastore(instructor2);\n-        verifyAbsentInDatastore(instructor3);\n-\n-        ______TS(\"action: delete account entirely\");\n-\n-        StudentAttributes student2 = BackDoor.getStudent(courseId2, email);\n-        StudentAttributes student3 = BackDoor.getStudent(courseId3, email);\n-        verifyPresentInDatastore(student2);\n-        verifyPresentInDatastore(student3);\n-\n-        accountsPage.clickDeleteAccount();\n-        accountsPage.verifyStatusMessage(\"Account \\\"\" + googleId + \"\\\" is successfully deleted.\");\n-\n-        verifyAbsentInDatastore(account);\n-\n-        // student entities should be deleted\n-        verifyAbsentInDatastore(student2);\n-        verifyAbsentInDatastore(student3);\n-\n-    }\n-\n-}\n", "next_change": {"commit": "4aa04aeaace8f2eb17bd2d2fc4f49534d1848f6d", "changed_code": [{"header": "diff --git a/src/e2e/java/teammates/e2e/cases/e2e/AdminAccountsPageE2ETest.java b/src/e2e/java/teammates/e2e/cases/e2e/AdminAccountsPageE2ETest.java\nnew file mode 100644\nindex 0000000000..0a1a0766ed\n--- /dev/null\n+++ b/src/e2e/java/teammates/e2e/cases/e2e/AdminAccountsPageE2ETest.java\n", "chunk": "@@ -0,0 +1,38 @@\n+package teammates.e2e.cases.e2e;\n+\n+import org.testng.annotations.Test;\n+\n+import teammates.common.datatransfer.attributes.AccountAttributes;\n+import teammates.common.util.AppUrl;\n+import teammates.common.util.Const;\n+import teammates.e2e.pageobjects.AdminAccountsPage;\n+import teammates.e2e.util.BackDoor;\n+\n+/**\n+ * SUT: {@link Const.WebPageURIs#ADMIN_ACCOUNTS_PAGE}.\n+ */\n+public class AdminAccountsPageE2ETest extends BaseE2ETestCase {\n+\n+    @Override\n+    protected void prepareTestData() {\n+        testData = loadDataBundle(\"/AdminAccountsPageE2ETest.json\");\n+        removeAndRestoreDataBundle(testData);\n+    }\n+\n+    @Test\n+    public void testAll() {\n+\n+        String googleId = \"AAMgtE2eT.instr2\";\n+\n+        ______TS(\"verify loaded data\");\n+\n+        AppUrl accountsPageUrl = createUrl(Const.WebPageURIs.ADMIN_ACCOUNTS_PAGE)\n+                .withParam(Const.ParamsNames.INSTRUCTOR_ID, googleId);\n+        AdminAccountsPage accountsPage = loginAdminToPage(accountsPageUrl, AdminAccountsPage.class);\n+\n+        AccountAttributes account = getAccount(googleId);\n+        accountsPage.verifyAccountDetails(account);\n+\n+    }\n+\n+}\n", "next_change": {"commit": "258427b99b0f9d815af913039fa649c4a1bd4156", "changed_code": [{"header": "diff --git a/src/e2e/java/teammates/e2e/cases/e2e/AdminAccountsPageE2ETest.java b/src/e2e/java/teammates/e2e/cases/e2e/AdminAccountsPageE2ETest.java\nindex 0a1a0766ed..c68ceb6df7 100644\n--- a/src/e2e/java/teammates/e2e/cases/e2e/AdminAccountsPageE2ETest.java\n+++ b/src/e2e/java/teammates/e2e/cases/e2e/AdminAccountsPageE2ETest.java\n", "chunk": "@@ -33,6 +34,60 @@ public class AdminAccountsPageE2ETest extends BaseE2ETestCase {\n         AccountAttributes account = getAccount(googleId);\n         accountsPage.verifyAccountDetails(account);\n \n+        ______TS(\"action: remove instructor from course\");\n+\n+        InstructorAttributes instructor = testData.instructors.get(\"AAMgtE2eT.instr2-AAMgtE2eT.CS2103\");\n+        String courseId = instructor.courseId;\n+\n+        verifyPresentInDatastore(instructor);\n+        accountsPage.clickRemoveInstructorFromCourse(courseId);\n+        accountsPage.verifyStatusMessage(\"Instructor is successfully deleted from course \\\"\" + courseId + \"\\\"\");\n+        verifyAbsentInDatastore(instructor);\n+\n+        ______TS(\"action: remove student from course\");\n+\n+        StudentAttributes student = testData.students.get(\"AAMgtE2eT.instr2-student-CS2103\");\n+        courseId = student.course;\n+\n+        verifyPresentInDatastore(student);\n+        accountsPage.clickRemoveStudentFromCourse(courseId);\n+        accountsPage.verifyStatusMessage(\"Student is successfully deleted from course \\\"\" + courseId + \"\\\"\");\n+        verifyAbsentInDatastore(student);\n+\n+        ______TS(\"action: downgrade instructor account\");\n+\n+        InstructorAttributes instructor2 = testData.instructors.get(\"AAMgtE2eT.instr2-AAMgtE2eT.CS2104\");\n+        InstructorAttributes instructor3 = testData.instructors.get(\"AAMgtE2eT.instr2-AAMgtE2eT.CS1101\");\n+        verifyPresentInDatastore(instructor2);\n+        verifyPresentInDatastore(instructor3);\n+\n+        accountsPage.clickDowngradeAccount();\n+        accountsPage.verifyStatusMessage(\"Instructor account is successfully downgraded to student.\");\n+\n+        account = getAccount(googleId);\n+        assertFalse(account.isInstructor);\n+        accountsPage.verifyAccountDetails(account);\n+\n+        // instructor entities should also be deleted\n+        verifyAbsentInDatastore(instructor2);\n+        verifyAbsentInDatastore(instructor3);\n+\n+        ______TS(\"action: delete account entirely\");\n+\n+        StudentAttributes student2 = testData.students.get(\"AAMgtE2eT.instr2-student-CS2104\");\n+        StudentAttributes student3 = testData.students.get(\"AAMgtE2eT.instr2-student-CS1101\");\n+        verifyPresentInDatastore(student2);\n+        verifyPresentInDatastore(student3);\n+\n+        accountsPage.clickDeleteAccount();\n+        accountsPage.verifyStatusMessage(\"Account \\\"\" + googleId + \"\\\" is successfully deleted.\");\n+\n+        verifyAbsentInDatastore(account);\n+\n+        // student entities should be deleted\n+        verifyAbsentInDatastore(student2);\n+        verifyAbsentInDatastore(student3);\n+\n     }\n \n }\n", "next_change": null}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc5MDI3MQ==", "url": "https://github.com/TEAMMATES/teammates/pull/10784#discussion_r506790271", "body": "Can consider using the existing `verifyPresentInDatastore` and `verifyAbsentInDatastore` which has the retry functionality", "bodyText": "Can consider using the existing verifyPresentInDatastore and verifyAbsentInDatastore which has the retry functionality", "bodyHTML": "<p dir=\"auto\">Can consider using the existing <code>verifyPresentInDatastore</code> and <code>verifyAbsentInDatastore</code> which has the retry functionality</p>", "author": "jtankw3", "createdAt": "2020-10-17T03:59:25Z", "path": "src/e2e/java/teammates/e2e/cases/e2e/AdminAccountsPageE2ETest.java", "diffHunk": "@@ -0,0 +1,85 @@\n+package teammates.e2e.cases.e2e;\n+\n+import org.testng.annotations.Test;\n+\n+import teammates.common.datatransfer.attributes.AccountAttributes;\n+import teammates.common.util.AppUrl;\n+import teammates.common.util.Const;\n+import teammates.e2e.pageobjects.AdminAccountsPage;\n+import teammates.e2e.util.BackDoor;\n+\n+/**\n+ * SUT: {@link Const.WebPageURIs#ADMIN_ACCOUNTS_PAGE}.\n+ */\n+public class AdminAccountsPageE2ETest extends BaseE2ETestCase {\n+\n+    @Override\n+    protected void prepareTestData() {\n+        testData = loadDataBundle(\"/AdminAccountsPageE2ETest.json\");\n+        removeAndRestoreDataBundle(testData);\n+    }\n+\n+    @Test\n+    public void testAll() {\n+\n+        String googleId = \"AAMgtE2eT.instr2\";\n+\n+        ______TS(\"verify loaded data\");\n+\n+        AppUrl accountsPageUrl = createUrl(Const.WebPageURIs.ADMIN_ACCOUNTS_PAGE)\n+                .withParam(Const.ParamsNames.INSTRUCTOR_ID, googleId);\n+        AdminAccountsPage accountsPage = loginAdminToPage(accountsPageUrl, AdminAccountsPage.class);\n+\n+        AccountAttributes account = BackDoor.getAccount(googleId);\n+        accountsPage.verifyAccountDetails(account);\n+\n+        ______TS(\"action: remove instructor from course\");\n+\n+        String courseId = \"AAMgtE2eT.CS2103\";\n+        String email = \"AAMgtE2eT.instr2@gmail.tmt\";\n+\n+        assertNotNull(BackDoor.getInstructor(courseId, email));\n+        accountsPage.clickRemoveInstructorFromCourse(courseId);\n+        assertNull(BackDoor.getInstructor(courseId, email));", "originalCommit": "3936c91b552a4a368192f8119c7d241f4d797c14", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "00e9352bf71f91ac4d9c14035b8510361747ee46", "changed_code": [{"header": "diff --git a/src/e2e/java/teammates/e2e/cases/e2e/AdminAccountsPageE2ETest.java b/src/e2e/java/teammates/e2e/cases/e2e/AdminAccountsPageE2ETest.java\nindex 978cbc04a9..9c9f457785 100644\n--- a/src/e2e/java/teammates/e2e/cases/e2e/AdminAccountsPageE2ETest.java\n+++ b/src/e2e/java/teammates/e2e/cases/e2e/AdminAccountsPageE2ETest.java\n", "chunk": "@@ -38,47 +38,51 @@ public class AdminAccountsPageE2ETest extends BaseE2ETestCase {\n         String courseId = \"AAMgtE2eT.CS2103\";\n         String email = \"AAMgtE2eT.instr2@gmail.tmt\";\n \n-        assertNotNull(BackDoor.getInstructor(courseId, email));\n+        verifyPresentInDatastore(getInstructor(courseId, email));\n         accountsPage.clickRemoveInstructorFromCourse(courseId);\n-        assertNull(BackDoor.getInstructor(courseId, email));\n+        accountsPage.verifyStatusMessage(\"Instructor is successfully deleted from course \\\"\" + courseId + \"\\\"\");\n+        verifyAbsentInDatastore(getInstructor(courseId, email));\n \n         ______TS(\"action: remove student from course\");\n \n-        assertNotNull(BackDoor.getStudent(courseId, email));\n+        verifyPresentInDatastore(BackDoor.getStudent(courseId, email));\n         accountsPage.clickRemoveStudentFromCourse(courseId);\n-        assertNull(BackDoor.getStudent(courseId, email));\n+        accountsPage.verifyStatusMessage(\"Student is successfully deleted from course \\\"\" + courseId + \"\\\"\");\n+        verifyAbsentInDatastore(BackDoor.getStudent(courseId, email));\n \n         ______TS(\"action: downgrade instructor account\");\n \n         String courseId2 = \"AAMgtE2eT.CS1101\";\n         String courseId3 = \"AAMgtE2eT.CS2104\";\n \n-        assertNotNull(BackDoor.getInstructor(courseId2, email));\n-        assertNotNull(BackDoor.getInstructor(courseId3, email));\n+        verifyPresentInDatastore(getInstructor(courseId2, email));\n+        verifyPresentInDatastore(getInstructor(courseId3, email));\n \n         accountsPage.clickDowngradeAccount();\n+        accountsPage.verifyStatusMessage(\"Instructor account is successfully downgraded to student.\");\n \n-        account = BackDoor.getAccount(googleId);\n+        account = getAccount(googleId);\n         assertFalse(account.isInstructor);\n         accountsPage.verifyAccountDetails(account);\n \n         // instructor entities should also be deleted\n-        assertNull(BackDoor.getInstructor(courseId2, email));\n-        assertNull(BackDoor.getInstructor(courseId3, email));\n+        verifyAbsentInDatastore(getInstructor(courseId2, email));\n+        verifyAbsentInDatastore(getInstructor(courseId3, email));\n \n         ______TS(\"action: delete account entirely\");\n \n-        assertNotNull(BackDoor.getStudent(courseId2, email));\n-        assertNotNull(BackDoor.getStudent(courseId3, email));\n+        verifyPresentInDatastore(BackDoor.getStudent(courseId2, email));\n+        verifyPresentInDatastore(BackDoor.getStudent(courseId3, email));\n \n-        accountsPage.clickDeleteAccount(googleId);\n+        accountsPage.clickDeleteAccount();\n+        accountsPage.verifyStatusMessage(\"Account \\\"\" + googleId + \"\\\" is successfully deleted.\");\n \n-        account = BackDoor.getAccount(googleId);\n-        assertNull(account);\n+        account = getAccount(googleId);\n+        verifyAbsentInDatastore(account);\n \n         // student entities should be deleted\n-        assertNull(BackDoor.getStudent(courseId2, email));\n-        assertNull(BackDoor.getStudent(courseId3, email));\n+        verifyAbsentInDatastore(BackDoor.getStudent(courseId2, email));\n+        verifyAbsentInDatastore(BackDoor.getStudent(courseId3, email));\n \n     }\n \n", "next_change": {"commit": "8154021ab829ca217ed19532a531c703282e37a8", "changed_code": [{"header": "diff --git a/src/e2e/java/teammates/e2e/cases/e2e/AdminAccountsPageE2ETest.java b/src/e2e/java/teammates/e2e/cases/e2e/AdminAccountsPageE2ETest.java\nindex 9c9f457785..fcacdb8f37 100644\n--- a/src/e2e/java/teammates/e2e/cases/e2e/AdminAccountsPageE2ETest.java\n+++ b/src/e2e/java/teammates/e2e/cases/e2e/AdminAccountsPageE2ETest.java\n", "chunk": "@@ -66,23 +72,24 @@ public class AdminAccountsPageE2ETest extends BaseE2ETestCase {\n         accountsPage.verifyAccountDetails(account);\n \n         // instructor entities should also be deleted\n-        verifyAbsentInDatastore(getInstructor(courseId2, email));\n-        verifyAbsentInDatastore(getInstructor(courseId3, email));\n+        verifyAbsentInDatastore(instructor2);\n+        verifyAbsentInDatastore(instructor3);\n \n         ______TS(\"action: delete account entirely\");\n \n-        verifyPresentInDatastore(BackDoor.getStudent(courseId2, email));\n-        verifyPresentInDatastore(BackDoor.getStudent(courseId3, email));\n+        StudentAttributes student2 = BackDoor.getStudent(courseId2, email);\n+        StudentAttributes student3 = BackDoor.getStudent(courseId3, email);\n+        verifyPresentInDatastore(student2);\n+        verifyPresentInDatastore(student3);\n \n         accountsPage.clickDeleteAccount();\n         accountsPage.verifyStatusMessage(\"Account \\\"\" + googleId + \"\\\" is successfully deleted.\");\n \n-        account = getAccount(googleId);\n         verifyAbsentInDatastore(account);\n \n         // student entities should be deleted\n-        verifyAbsentInDatastore(BackDoor.getStudent(courseId2, email));\n-        verifyAbsentInDatastore(BackDoor.getStudent(courseId3, email));\n+        verifyAbsentInDatastore(student2);\n+        verifyAbsentInDatastore(student3);\n \n     }\n \n", "next_change": {"commit": "8926f4f0b61ef7379bf0cb5750c81a3f4a75b225", "changed_code": [{"header": "diff --git a/src/e2e/java/teammates/e2e/cases/e2e/AdminAccountsPageE2ETest.java b/src/e2e/java/teammates/e2e/cases/e2e/AdminAccountsPageE2ETest.java\ndeleted file mode 100644\nindex fcacdb8f37..0000000000\n--- a/src/e2e/java/teammates/e2e/cases/e2e/AdminAccountsPageE2ETest.java\n+++ /dev/null\n", "chunk": "@@ -1,96 +0,0 @@\n-package teammates.e2e.cases.e2e;\n-\n-import org.testng.annotations.Test;\n-\n-import teammates.common.datatransfer.attributes.AccountAttributes;\n-import teammates.common.datatransfer.attributes.InstructorAttributes;\n-import teammates.common.datatransfer.attributes.StudentAttributes;\n-import teammates.common.util.AppUrl;\n-import teammates.common.util.Const;\n-import teammates.e2e.pageobjects.AdminAccountsPage;\n-import teammates.e2e.util.BackDoor;\n-\n-/**\n- * SUT: {@link Const.WebPageURIs#ADMIN_ACCOUNTS_PAGE}.\n- */\n-public class AdminAccountsPageE2ETest extends BaseE2ETestCase {\n-\n-    @Override\n-    protected void prepareTestData() {\n-        testData = loadDataBundle(\"/AdminAccountsPageE2ETest.json\");\n-        removeAndRestoreDataBundle(testData);\n-    }\n-\n-    @Test\n-    public void testAll() {\n-\n-        String googleId = \"AAMgtE2eT.instr2\";\n-\n-        ______TS(\"verify loaded data\");\n-\n-        AppUrl accountsPageUrl = createUrl(Const.WebPageURIs.ADMIN_ACCOUNTS_PAGE)\n-                .withParam(Const.ParamsNames.INSTRUCTOR_ID, googleId);\n-        AdminAccountsPage accountsPage = loginAdminToPage(accountsPageUrl, AdminAccountsPage.class);\n-\n-        AccountAttributes account = getAccount(googleId);\n-        accountsPage.verifyAccountDetails(account);\n-\n-        ______TS(\"action: remove instructor from course\");\n-\n-        String courseId = \"AAMgtE2eT.CS2103\";\n-        String email = \"AAMgtE2eT.instr2@gmail.tmt\";\n-\n-        InstructorAttributes instructor = getInstructor(courseId, email);\n-        verifyPresentInDatastore(instructor);\n-        accountsPage.clickRemoveInstructorFromCourse(courseId);\n-        accountsPage.verifyStatusMessage(\"Instructor is successfully deleted from course \\\"\" + courseId + \"\\\"\");\n-        verifyAbsentInDatastore(instructor);\n-\n-        ______TS(\"action: remove student from course\");\n-\n-        StudentAttributes student = BackDoor.getStudent(courseId, email);\n-        verifyPresentInDatastore(student);\n-        accountsPage.clickRemoveStudentFromCourse(courseId);\n-        accountsPage.verifyStatusMessage(\"Student is successfully deleted from course \\\"\" + courseId + \"\\\"\");\n-        verifyAbsentInDatastore(student);\n-\n-        ______TS(\"action: downgrade instructor account\");\n-\n-        String courseId2 = \"AAMgtE2eT.CS1101\";\n-        String courseId3 = \"AAMgtE2eT.CS2104\";\n-\n-        InstructorAttributes instructor2 = getInstructor(courseId2, email);\n-        InstructorAttributes instructor3 = getInstructor(courseId3, email);\n-        verifyPresentInDatastore(instructor2);\n-        verifyPresentInDatastore(instructor3);\n-\n-        accountsPage.clickDowngradeAccount();\n-        accountsPage.verifyStatusMessage(\"Instructor account is successfully downgraded to student.\");\n-\n-        account = getAccount(googleId);\n-        assertFalse(account.isInstructor);\n-        accountsPage.verifyAccountDetails(account);\n-\n-        // instructor entities should also be deleted\n-        verifyAbsentInDatastore(instructor2);\n-        verifyAbsentInDatastore(instructor3);\n-\n-        ______TS(\"action: delete account entirely\");\n-\n-        StudentAttributes student2 = BackDoor.getStudent(courseId2, email);\n-        StudentAttributes student3 = BackDoor.getStudent(courseId3, email);\n-        verifyPresentInDatastore(student2);\n-        verifyPresentInDatastore(student3);\n-\n-        accountsPage.clickDeleteAccount();\n-        accountsPage.verifyStatusMessage(\"Account \\\"\" + googleId + \"\\\" is successfully deleted.\");\n-\n-        verifyAbsentInDatastore(account);\n-\n-        // student entities should be deleted\n-        verifyAbsentInDatastore(student2);\n-        verifyAbsentInDatastore(student3);\n-\n-    }\n-\n-}\n", "next_change": {"commit": "4aa04aeaace8f2eb17bd2d2fc4f49534d1848f6d", "changed_code": [{"header": "diff --git a/src/e2e/java/teammates/e2e/cases/e2e/AdminAccountsPageE2ETest.java b/src/e2e/java/teammates/e2e/cases/e2e/AdminAccountsPageE2ETest.java\nnew file mode 100644\nindex 0000000000..0a1a0766ed\n--- /dev/null\n+++ b/src/e2e/java/teammates/e2e/cases/e2e/AdminAccountsPageE2ETest.java\n", "chunk": "@@ -0,0 +1,38 @@\n+package teammates.e2e.cases.e2e;\n+\n+import org.testng.annotations.Test;\n+\n+import teammates.common.datatransfer.attributes.AccountAttributes;\n+import teammates.common.util.AppUrl;\n+import teammates.common.util.Const;\n+import teammates.e2e.pageobjects.AdminAccountsPage;\n+import teammates.e2e.util.BackDoor;\n+\n+/**\n+ * SUT: {@link Const.WebPageURIs#ADMIN_ACCOUNTS_PAGE}.\n+ */\n+public class AdminAccountsPageE2ETest extends BaseE2ETestCase {\n+\n+    @Override\n+    protected void prepareTestData() {\n+        testData = loadDataBundle(\"/AdminAccountsPageE2ETest.json\");\n+        removeAndRestoreDataBundle(testData);\n+    }\n+\n+    @Test\n+    public void testAll() {\n+\n+        String googleId = \"AAMgtE2eT.instr2\";\n+\n+        ______TS(\"verify loaded data\");\n+\n+        AppUrl accountsPageUrl = createUrl(Const.WebPageURIs.ADMIN_ACCOUNTS_PAGE)\n+                .withParam(Const.ParamsNames.INSTRUCTOR_ID, googleId);\n+        AdminAccountsPage accountsPage = loginAdminToPage(accountsPageUrl, AdminAccountsPage.class);\n+\n+        AccountAttributes account = getAccount(googleId);\n+        accountsPage.verifyAccountDetails(account);\n+\n+    }\n+\n+}\n", "next_change": {"commit": "258427b99b0f9d815af913039fa649c4a1bd4156", "changed_code": [{"header": "diff --git a/src/e2e/java/teammates/e2e/cases/e2e/AdminAccountsPageE2ETest.java b/src/e2e/java/teammates/e2e/cases/e2e/AdminAccountsPageE2ETest.java\nindex 0a1a0766ed..c68ceb6df7 100644\n--- a/src/e2e/java/teammates/e2e/cases/e2e/AdminAccountsPageE2ETest.java\n+++ b/src/e2e/java/teammates/e2e/cases/e2e/AdminAccountsPageE2ETest.java\n", "chunk": "@@ -33,6 +34,60 @@ public class AdminAccountsPageE2ETest extends BaseE2ETestCase {\n         AccountAttributes account = getAccount(googleId);\n         accountsPage.verifyAccountDetails(account);\n \n+        ______TS(\"action: remove instructor from course\");\n+\n+        InstructorAttributes instructor = testData.instructors.get(\"AAMgtE2eT.instr2-AAMgtE2eT.CS2103\");\n+        String courseId = instructor.courseId;\n+\n+        verifyPresentInDatastore(instructor);\n+        accountsPage.clickRemoveInstructorFromCourse(courseId);\n+        accountsPage.verifyStatusMessage(\"Instructor is successfully deleted from course \\\"\" + courseId + \"\\\"\");\n+        verifyAbsentInDatastore(instructor);\n+\n+        ______TS(\"action: remove student from course\");\n+\n+        StudentAttributes student = testData.students.get(\"AAMgtE2eT.instr2-student-CS2103\");\n+        courseId = student.course;\n+\n+        verifyPresentInDatastore(student);\n+        accountsPage.clickRemoveStudentFromCourse(courseId);\n+        accountsPage.verifyStatusMessage(\"Student is successfully deleted from course \\\"\" + courseId + \"\\\"\");\n+        verifyAbsentInDatastore(student);\n+\n+        ______TS(\"action: downgrade instructor account\");\n+\n+        InstructorAttributes instructor2 = testData.instructors.get(\"AAMgtE2eT.instr2-AAMgtE2eT.CS2104\");\n+        InstructorAttributes instructor3 = testData.instructors.get(\"AAMgtE2eT.instr2-AAMgtE2eT.CS1101\");\n+        verifyPresentInDatastore(instructor2);\n+        verifyPresentInDatastore(instructor3);\n+\n+        accountsPage.clickDowngradeAccount();\n+        accountsPage.verifyStatusMessage(\"Instructor account is successfully downgraded to student.\");\n+\n+        account = getAccount(googleId);\n+        assertFalse(account.isInstructor);\n+        accountsPage.verifyAccountDetails(account);\n+\n+        // instructor entities should also be deleted\n+        verifyAbsentInDatastore(instructor2);\n+        verifyAbsentInDatastore(instructor3);\n+\n+        ______TS(\"action: delete account entirely\");\n+\n+        StudentAttributes student2 = testData.students.get(\"AAMgtE2eT.instr2-student-CS2104\");\n+        StudentAttributes student3 = testData.students.get(\"AAMgtE2eT.instr2-student-CS1101\");\n+        verifyPresentInDatastore(student2);\n+        verifyPresentInDatastore(student3);\n+\n+        accountsPage.clickDeleteAccount();\n+        accountsPage.verifyStatusMessage(\"Account \\\"\" + googleId + \"\\\" is successfully deleted.\");\n+\n+        verifyAbsentInDatastore(account);\n+\n+        // student entities should be deleted\n+        verifyAbsentInDatastore(student2);\n+        verifyAbsentInDatastore(student3);\n+\n     }\n \n }\n", "next_change": null}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc5MTE0NQ==", "url": "https://github.com/TEAMMATES/teammates/pull/10784#discussion_r506791145", "body": "Might be better to have `verifyStatusMessage` in `AdminAccountsPageE2ETest` instead as it does not feel like it belongs to these action related methods. ", "bodyText": "Might be better to have verifyStatusMessage in AdminAccountsPageE2ETest instead as it does not feel like it belongs to these action related methods.", "bodyHTML": "<p dir=\"auto\">Might be better to have <code>verifyStatusMessage</code> in <code>AdminAccountsPageE2ETest</code> instead as it does not feel like it belongs to these action related methods.</p>", "author": "jtankw3", "createdAt": "2020-10-17T04:10:21Z", "path": "src/e2e/java/teammates/e2e/pageobjects/AdminAccountsPage.java", "diffHunk": "@@ -0,0 +1,116 @@\n+package teammates.e2e.pageobjects;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+\n+import java.util.List;\n+\n+import org.openqa.selenium.By;\n+import org.openqa.selenium.WebElement;\n+import org.openqa.selenium.support.FindBy;\n+\n+import teammates.common.datatransfer.attributes.AccountAttributes;\n+\n+/**\n+ * Page Object Model for the admin accounts page.\n+ */\n+public class AdminAccountsPage extends AppPage {\n+\n+    @FindBy(id = \"account-google-id\")\n+    private WebElement accountId;\n+\n+    @FindBy(id = \"account-name\")\n+    private WebElement accountName;\n+\n+    @FindBy(id = \"account-email\")\n+    private WebElement accountEmail;\n+\n+    @FindBy(id = \"account-institute\")\n+    private WebElement accountInstitute;\n+\n+    @FindBy(id = \"account-is-instructor\")\n+    private WebElement accountIsInstructor;\n+\n+    @FindBy(id = \"instructor-table\")\n+    private WebElement instructorTable;\n+\n+    @FindBy(id = \"student-table\")\n+    private WebElement studentTable;\n+\n+    @FindBy(id = \"btn-downgrade-account\")\n+    private WebElement downgradeAccountButton;\n+\n+    @FindBy(id = \"btn-delete-account\")\n+    private WebElement deleteAccountButton;\n+\n+    public AdminAccountsPage(Browser browser) {\n+        super(browser);\n+    }\n+\n+    @Override\n+    protected boolean containsExpectedPageContents() {\n+        return getPageSource().contains(\"Account Details\");\n+    }\n+\n+    public void verifyAccountDetails(AccountAttributes account) {\n+        assertEquals(account.getGoogleId(), accountId.getText());\n+        assertEquals(account.getName(), accountName.getText());\n+        assertEquals(account.getEmail(), accountEmail.getText());\n+        assertEquals(account.getInstitute(), accountInstitute.getText());\n+        assertEquals(account.isInstructor(), Boolean.parseBoolean(accountIsInstructor.getText()));\n+    }\n+\n+    public void clickRemoveInstructorFromCourse(String courseId) {\n+        List<WebElement> instructorRows =\n+                instructorTable.findElement(By.tagName(\"tbody\")).findElements(By.tagName(\"tr\"));\n+\n+        WebElement deleteButton = null;\n+        for (WebElement instructorRow : instructorRows) {\n+            List<WebElement> cells = instructorRow.findElements(By.tagName(\"td\"));\n+            if (cells.get(0).getText().startsWith(\"[\" + courseId + \"]\")) {\n+                deleteButton = cells.get(1).findElement(By.className(\"btn-danger\"));\n+            }\n+        }\n+\n+        if (deleteButton == null) {\n+            fail(\"Instructor to be deleted is not found\");\n+        }\n+        click(deleteButton);\n+        waitForPageToLoad(true);\n+        verifyStatusMessage(\"Instructor is successfully deleted from course \\\"\" + courseId + \"\\\"\");", "originalCommit": "3936c91b552a4a368192f8119c7d241f4d797c14", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "00e9352bf71f91ac4d9c14035b8510361747ee46", "changed_code": [{"header": "diff --git a/src/e2e/java/teammates/e2e/pageobjects/AdminAccountsPage.java b/src/e2e/java/teammates/e2e/pageobjects/AdminAccountsPage.java\nindex 8f4d663a64..e9091d9ced 100644\n--- a/src/e2e/java/teammates/e2e/pageobjects/AdminAccountsPage.java\n+++ b/src/e2e/java/teammates/e2e/pageobjects/AdminAccountsPage.java\n", "chunk": "@@ -77,16 +77,15 @@ public class AdminAccountsPage extends AppPage {\n         }\n         click(deleteButton);\n         waitForPageToLoad(true);\n-        verifyStatusMessage(\"Instructor is successfully deleted from course \\\"\" + courseId + \"\\\"\");\n     }\n \n     public void clickRemoveStudentFromCourse(String courseId) {\n-        List<WebElement> instructorRows =\n+        List<WebElement> studentRows =\n                 studentTable.findElement(By.tagName(\"tbody\")).findElements(By.tagName(\"tr\"));\n \n         WebElement deleteButton = null;\n-        for (WebElement instructorRow : instructorRows) {\n-            List<WebElement> cells = instructorRow.findElements(By.tagName(\"td\"));\n+        for (WebElement studentRow : studentRows) {\n+            List<WebElement> cells = studentRow.findElements(By.tagName(\"td\"));\n             if (cells.get(0).getText().startsWith(\"[\" + courseId + \"]\")) {\n                 deleteButton = cells.get(1).findElement(By.className(\"btn-danger\"));\n             }\n", "next_change": {"commit": "8926f4f0b61ef7379bf0cb5750c81a3f4a75b225", "changed_code": [{"header": "diff --git a/src/e2e/java/teammates/e2e/pageobjects/AdminAccountsPage.java b/src/e2e/java/teammates/e2e/pageobjects/AdminAccountsPage.java\ndeleted file mode 100644\nindex e9091d9ced..0000000000\n--- a/src/e2e/java/teammates/e2e/pageobjects/AdminAccountsPage.java\n+++ /dev/null\n", "chunk": "@@ -1,111 +0,0 @@\n-package teammates.e2e.pageobjects;\n-\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.fail;\n-\n-import java.util.List;\n-\n-import org.openqa.selenium.By;\n-import org.openqa.selenium.WebElement;\n-import org.openqa.selenium.support.FindBy;\n-\n-import teammates.common.datatransfer.attributes.AccountAttributes;\n-\n-/**\n- * Page Object Model for the admin accounts page.\n- */\n-public class AdminAccountsPage extends AppPage {\n-\n-    @FindBy(id = \"account-google-id\")\n-    private WebElement accountId;\n-\n-    @FindBy(id = \"account-name\")\n-    private WebElement accountName;\n-\n-    @FindBy(id = \"account-email\")\n-    private WebElement accountEmail;\n-\n-    @FindBy(id = \"account-institute\")\n-    private WebElement accountInstitute;\n-\n-    @FindBy(id = \"account-is-instructor\")\n-    private WebElement accountIsInstructor;\n-\n-    @FindBy(id = \"instructor-table\")\n-    private WebElement instructorTable;\n-\n-    @FindBy(id = \"student-table\")\n-    private WebElement studentTable;\n-\n-    @FindBy(id = \"btn-downgrade-account\")\n-    private WebElement downgradeAccountButton;\n-\n-    @FindBy(id = \"btn-delete-account\")\n-    private WebElement deleteAccountButton;\n-\n-    public AdminAccountsPage(Browser browser) {\n-        super(browser);\n-    }\n-\n-    @Override\n-    protected boolean containsExpectedPageContents() {\n-        return getPageSource().contains(\"Account Details\");\n-    }\n-\n-    public void verifyAccountDetails(AccountAttributes account) {\n-        assertEquals(account.getGoogleId(), accountId.getText());\n-        assertEquals(account.getName(), accountName.getText());\n-        assertEquals(account.getEmail(), accountEmail.getText());\n-        assertEquals(account.getInstitute(), accountInstitute.getText());\n-        assertEquals(account.isInstructor(), Boolean.parseBoolean(accountIsInstructor.getText()));\n-    }\n-\n-    public void clickRemoveInstructorFromCourse(String courseId) {\n-        List<WebElement> instructorRows =\n-                instructorTable.findElement(By.tagName(\"tbody\")).findElements(By.tagName(\"tr\"));\n-\n-        WebElement deleteButton = null;\n-        for (WebElement instructorRow : instructorRows) {\n-            List<WebElement> cells = instructorRow.findElements(By.tagName(\"td\"));\n-            if (cells.get(0).getText().startsWith(\"[\" + courseId + \"]\")) {\n-                deleteButton = cells.get(1).findElement(By.className(\"btn-danger\"));\n-            }\n-        }\n-\n-        if (deleteButton == null) {\n-            fail(\"Instructor to be deleted is not found\");\n-        }\n-        click(deleteButton);\n-        waitForPageToLoad(true);\n-    }\n-\n-    public void clickRemoveStudentFromCourse(String courseId) {\n-        List<WebElement> studentRows =\n-                studentTable.findElement(By.tagName(\"tbody\")).findElements(By.tagName(\"tr\"));\n-\n-        WebElement deleteButton = null;\n-        for (WebElement studentRow : studentRows) {\n-            List<WebElement> cells = studentRow.findElements(By.tagName(\"td\"));\n-            if (cells.get(0).getText().startsWith(\"[\" + courseId + \"]\")) {\n-                deleteButton = cells.get(1).findElement(By.className(\"btn-danger\"));\n-            }\n-        }\n-\n-        if (deleteButton == null) {\n-            fail(\"Student to be deleted is not found\");\n-        }\n-        click(deleteButton);\n-        waitForPageToLoad(true);\n-    }\n-\n-    public void clickDowngradeAccount() {\n-        click(downgradeAccountButton);\n-        waitForPageToLoad(true);\n-    }\n-\n-    public void clickDeleteAccount() {\n-        click(deleteAccountButton);\n-        waitForPageToLoad(true);\n-    }\n-\n-}\n", "next_change": {"commit": "4aa04aeaace8f2eb17bd2d2fc4f49534d1848f6d", "changed_code": [{"header": "diff --git a/src/e2e/java/teammates/e2e/pageobjects/AdminAccountsPage.java b/src/e2e/java/teammates/e2e/pageobjects/AdminAccountsPage.java\nnew file mode 100644\nindex 0000000000..920710ebc2\n--- /dev/null\n+++ b/src/e2e/java/teammates/e2e/pageobjects/AdminAccountsPage.java\n", "chunk": "@@ -0,0 +1,47 @@\n+package teammates.e2e.pageobjects;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import org.openqa.selenium.WebElement;\n+import org.openqa.selenium.support.FindBy;\n+\n+import teammates.common.datatransfer.attributes.AccountAttributes;\n+\n+/**\n+ * Page Object Model for the admin accounts page.\n+ */\n+public class AdminAccountsPage extends AppPage {\n+\n+    @FindBy(id = \"account-google-id\")\n+    private WebElement accountId;\n+\n+    @FindBy(id = \"account-name\")\n+    private WebElement accountName;\n+\n+    @FindBy(id = \"account-email\")\n+    private WebElement accountEmail;\n+\n+    @FindBy(id = \"account-institute\")\n+    private WebElement accountInstitute;\n+\n+    @FindBy(id = \"account-is-instructor\")\n+    private WebElement accountIsInstructor;\n+\n+    public AdminAccountsPage(Browser browser) {\n+        super(browser);\n+    }\n+\n+    @Override\n+    protected boolean containsExpectedPageContents() {\n+        return getPageSource().contains(\"Account Details\");\n+    }\n+\n+    public void verifyAccountDetails(AccountAttributes account) {\n+        assertEquals(account.getGoogleId(), accountId.getText());\n+        assertEquals(account.getName(), accountName.getText());\n+        assertEquals(account.getEmail(), accountEmail.getText());\n+        assertEquals(account.getInstitute(), accountInstitute.getText());\n+        assertEquals(account.isInstructor(), Boolean.parseBoolean(accountIsInstructor.getText()));\n+    }\n+\n+}\n", "next_change": {"commit": "258427b99b0f9d815af913039fa649c4a1bd4156", "changed_code": [{"header": "diff --git a/src/e2e/java/teammates/e2e/pageobjects/AdminAccountsPage.java b/src/e2e/java/teammates/e2e/pageobjects/AdminAccountsPage.java\nindex 920710ebc2..e9091d9ced 100644\n--- a/src/e2e/java/teammates/e2e/pageobjects/AdminAccountsPage.java\n+++ b/src/e2e/java/teammates/e2e/pageobjects/AdminAccountsPage.java\n", "chunk": "@@ -44,4 +60,52 @@ public class AdminAccountsPage extends AppPage {\n         assertEquals(account.isInstructor(), Boolean.parseBoolean(accountIsInstructor.getText()));\n     }\n \n+    public void clickRemoveInstructorFromCourse(String courseId) {\n+        List<WebElement> instructorRows =\n+                instructorTable.findElement(By.tagName(\"tbody\")).findElements(By.tagName(\"tr\"));\n+\n+        WebElement deleteButton = null;\n+        for (WebElement instructorRow : instructorRows) {\n+            List<WebElement> cells = instructorRow.findElements(By.tagName(\"td\"));\n+            if (cells.get(0).getText().startsWith(\"[\" + courseId + \"]\")) {\n+                deleteButton = cells.get(1).findElement(By.className(\"btn-danger\"));\n+            }\n+        }\n+\n+        if (deleteButton == null) {\n+            fail(\"Instructor to be deleted is not found\");\n+        }\n+        click(deleteButton);\n+        waitForPageToLoad(true);\n+    }\n+\n+    public void clickRemoveStudentFromCourse(String courseId) {\n+        List<WebElement> studentRows =\n+                studentTable.findElement(By.tagName(\"tbody\")).findElements(By.tagName(\"tr\"));\n+\n+        WebElement deleteButton = null;\n+        for (WebElement studentRow : studentRows) {\n+            List<WebElement> cells = studentRow.findElements(By.tagName(\"td\"));\n+            if (cells.get(0).getText().startsWith(\"[\" + courseId + \"]\")) {\n+                deleteButton = cells.get(1).findElement(By.className(\"btn-danger\"));\n+            }\n+        }\n+\n+        if (deleteButton == null) {\n+            fail(\"Student to be deleted is not found\");\n+        }\n+        click(deleteButton);\n+        waitForPageToLoad(true);\n+    }\n+\n+    public void clickDowngradeAccount() {\n+        click(downgradeAccountButton);\n+        waitForPageToLoad(true);\n+    }\n+\n+    public void clickDeleteAccount() {\n+        click(deleteAccountButton);\n+        waitForPageToLoad(true);\n+    }\n+\n }\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc5MTE2NQ==", "url": "https://github.com/TEAMMATES/teammates/pull/10784#discussion_r506791165", "body": "Should be `studentRows` here.", "bodyText": "Should be studentRows here.", "bodyHTML": "<p dir=\"auto\">Should be <code>studentRows</code> here.</p>", "author": "jtankw3", "createdAt": "2020-10-17T04:10:48Z", "path": "src/e2e/java/teammates/e2e/pageobjects/AdminAccountsPage.java", "diffHunk": "@@ -0,0 +1,116 @@\n+package teammates.e2e.pageobjects;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+\n+import java.util.List;\n+\n+import org.openqa.selenium.By;\n+import org.openqa.selenium.WebElement;\n+import org.openqa.selenium.support.FindBy;\n+\n+import teammates.common.datatransfer.attributes.AccountAttributes;\n+\n+/**\n+ * Page Object Model for the admin accounts page.\n+ */\n+public class AdminAccountsPage extends AppPage {\n+\n+    @FindBy(id = \"account-google-id\")\n+    private WebElement accountId;\n+\n+    @FindBy(id = \"account-name\")\n+    private WebElement accountName;\n+\n+    @FindBy(id = \"account-email\")\n+    private WebElement accountEmail;\n+\n+    @FindBy(id = \"account-institute\")\n+    private WebElement accountInstitute;\n+\n+    @FindBy(id = \"account-is-instructor\")\n+    private WebElement accountIsInstructor;\n+\n+    @FindBy(id = \"instructor-table\")\n+    private WebElement instructorTable;\n+\n+    @FindBy(id = \"student-table\")\n+    private WebElement studentTable;\n+\n+    @FindBy(id = \"btn-downgrade-account\")\n+    private WebElement downgradeAccountButton;\n+\n+    @FindBy(id = \"btn-delete-account\")\n+    private WebElement deleteAccountButton;\n+\n+    public AdminAccountsPage(Browser browser) {\n+        super(browser);\n+    }\n+\n+    @Override\n+    protected boolean containsExpectedPageContents() {\n+        return getPageSource().contains(\"Account Details\");\n+    }\n+\n+    public void verifyAccountDetails(AccountAttributes account) {\n+        assertEquals(account.getGoogleId(), accountId.getText());\n+        assertEquals(account.getName(), accountName.getText());\n+        assertEquals(account.getEmail(), accountEmail.getText());\n+        assertEquals(account.getInstitute(), accountInstitute.getText());\n+        assertEquals(account.isInstructor(), Boolean.parseBoolean(accountIsInstructor.getText()));\n+    }\n+\n+    public void clickRemoveInstructorFromCourse(String courseId) {\n+        List<WebElement> instructorRows =\n+                instructorTable.findElement(By.tagName(\"tbody\")).findElements(By.tagName(\"tr\"));\n+\n+        WebElement deleteButton = null;\n+        for (WebElement instructorRow : instructorRows) {\n+            List<WebElement> cells = instructorRow.findElements(By.tagName(\"td\"));\n+            if (cells.get(0).getText().startsWith(\"[\" + courseId + \"]\")) {\n+                deleteButton = cells.get(1).findElement(By.className(\"btn-danger\"));\n+            }\n+        }\n+\n+        if (deleteButton == null) {\n+            fail(\"Instructor to be deleted is not found\");\n+        }\n+        click(deleteButton);\n+        waitForPageToLoad(true);\n+        verifyStatusMessage(\"Instructor is successfully deleted from course \\\"\" + courseId + \"\\\"\");\n+    }\n+\n+    public void clickRemoveStudentFromCourse(String courseId) {\n+        List<WebElement> instructorRows =", "originalCommit": "3936c91b552a4a368192f8119c7d241f4d797c14", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "00e9352bf71f91ac4d9c14035b8510361747ee46", "changed_code": [{"header": "diff --git a/src/e2e/java/teammates/e2e/pageobjects/AdminAccountsPage.java b/src/e2e/java/teammates/e2e/pageobjects/AdminAccountsPage.java\nindex 8f4d663a64..e9091d9ced 100644\n--- a/src/e2e/java/teammates/e2e/pageobjects/AdminAccountsPage.java\n+++ b/src/e2e/java/teammates/e2e/pageobjects/AdminAccountsPage.java\n", "chunk": "@@ -77,16 +77,15 @@ public class AdminAccountsPage extends AppPage {\n         }\n         click(deleteButton);\n         waitForPageToLoad(true);\n-        verifyStatusMessage(\"Instructor is successfully deleted from course \\\"\" + courseId + \"\\\"\");\n     }\n \n     public void clickRemoveStudentFromCourse(String courseId) {\n-        List<WebElement> instructorRows =\n+        List<WebElement> studentRows =\n                 studentTable.findElement(By.tagName(\"tbody\")).findElements(By.tagName(\"tr\"));\n \n         WebElement deleteButton = null;\n-        for (WebElement instructorRow : instructorRows) {\n-            List<WebElement> cells = instructorRow.findElements(By.tagName(\"td\"));\n+        for (WebElement studentRow : studentRows) {\n+            List<WebElement> cells = studentRow.findElements(By.tagName(\"td\"));\n             if (cells.get(0).getText().startsWith(\"[\" + courseId + \"]\")) {\n                 deleteButton = cells.get(1).findElement(By.className(\"btn-danger\"));\n             }\n", "next_change": {"commit": "8926f4f0b61ef7379bf0cb5750c81a3f4a75b225", "changed_code": [{"header": "diff --git a/src/e2e/java/teammates/e2e/pageobjects/AdminAccountsPage.java b/src/e2e/java/teammates/e2e/pageobjects/AdminAccountsPage.java\ndeleted file mode 100644\nindex e9091d9ced..0000000000\n--- a/src/e2e/java/teammates/e2e/pageobjects/AdminAccountsPage.java\n+++ /dev/null\n", "chunk": "@@ -1,111 +0,0 @@\n-package teammates.e2e.pageobjects;\n-\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.fail;\n-\n-import java.util.List;\n-\n-import org.openqa.selenium.By;\n-import org.openqa.selenium.WebElement;\n-import org.openqa.selenium.support.FindBy;\n-\n-import teammates.common.datatransfer.attributes.AccountAttributes;\n-\n-/**\n- * Page Object Model for the admin accounts page.\n- */\n-public class AdminAccountsPage extends AppPage {\n-\n-    @FindBy(id = \"account-google-id\")\n-    private WebElement accountId;\n-\n-    @FindBy(id = \"account-name\")\n-    private WebElement accountName;\n-\n-    @FindBy(id = \"account-email\")\n-    private WebElement accountEmail;\n-\n-    @FindBy(id = \"account-institute\")\n-    private WebElement accountInstitute;\n-\n-    @FindBy(id = \"account-is-instructor\")\n-    private WebElement accountIsInstructor;\n-\n-    @FindBy(id = \"instructor-table\")\n-    private WebElement instructorTable;\n-\n-    @FindBy(id = \"student-table\")\n-    private WebElement studentTable;\n-\n-    @FindBy(id = \"btn-downgrade-account\")\n-    private WebElement downgradeAccountButton;\n-\n-    @FindBy(id = \"btn-delete-account\")\n-    private WebElement deleteAccountButton;\n-\n-    public AdminAccountsPage(Browser browser) {\n-        super(browser);\n-    }\n-\n-    @Override\n-    protected boolean containsExpectedPageContents() {\n-        return getPageSource().contains(\"Account Details\");\n-    }\n-\n-    public void verifyAccountDetails(AccountAttributes account) {\n-        assertEquals(account.getGoogleId(), accountId.getText());\n-        assertEquals(account.getName(), accountName.getText());\n-        assertEquals(account.getEmail(), accountEmail.getText());\n-        assertEquals(account.getInstitute(), accountInstitute.getText());\n-        assertEquals(account.isInstructor(), Boolean.parseBoolean(accountIsInstructor.getText()));\n-    }\n-\n-    public void clickRemoveInstructorFromCourse(String courseId) {\n-        List<WebElement> instructorRows =\n-                instructorTable.findElement(By.tagName(\"tbody\")).findElements(By.tagName(\"tr\"));\n-\n-        WebElement deleteButton = null;\n-        for (WebElement instructorRow : instructorRows) {\n-            List<WebElement> cells = instructorRow.findElements(By.tagName(\"td\"));\n-            if (cells.get(0).getText().startsWith(\"[\" + courseId + \"]\")) {\n-                deleteButton = cells.get(1).findElement(By.className(\"btn-danger\"));\n-            }\n-        }\n-\n-        if (deleteButton == null) {\n-            fail(\"Instructor to be deleted is not found\");\n-        }\n-        click(deleteButton);\n-        waitForPageToLoad(true);\n-    }\n-\n-    public void clickRemoveStudentFromCourse(String courseId) {\n-        List<WebElement> studentRows =\n-                studentTable.findElement(By.tagName(\"tbody\")).findElements(By.tagName(\"tr\"));\n-\n-        WebElement deleteButton = null;\n-        for (WebElement studentRow : studentRows) {\n-            List<WebElement> cells = studentRow.findElements(By.tagName(\"td\"));\n-            if (cells.get(0).getText().startsWith(\"[\" + courseId + \"]\")) {\n-                deleteButton = cells.get(1).findElement(By.className(\"btn-danger\"));\n-            }\n-        }\n-\n-        if (deleteButton == null) {\n-            fail(\"Student to be deleted is not found\");\n-        }\n-        click(deleteButton);\n-        waitForPageToLoad(true);\n-    }\n-\n-    public void clickDowngradeAccount() {\n-        click(downgradeAccountButton);\n-        waitForPageToLoad(true);\n-    }\n-\n-    public void clickDeleteAccount() {\n-        click(deleteAccountButton);\n-        waitForPageToLoad(true);\n-    }\n-\n-}\n", "next_change": {"commit": "4aa04aeaace8f2eb17bd2d2fc4f49534d1848f6d", "changed_code": [{"header": "diff --git a/src/e2e/java/teammates/e2e/pageobjects/AdminAccountsPage.java b/src/e2e/java/teammates/e2e/pageobjects/AdminAccountsPage.java\nnew file mode 100644\nindex 0000000000..920710ebc2\n--- /dev/null\n+++ b/src/e2e/java/teammates/e2e/pageobjects/AdminAccountsPage.java\n", "chunk": "@@ -0,0 +1,47 @@\n+package teammates.e2e.pageobjects;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import org.openqa.selenium.WebElement;\n+import org.openqa.selenium.support.FindBy;\n+\n+import teammates.common.datatransfer.attributes.AccountAttributes;\n+\n+/**\n+ * Page Object Model for the admin accounts page.\n+ */\n+public class AdminAccountsPage extends AppPage {\n+\n+    @FindBy(id = \"account-google-id\")\n+    private WebElement accountId;\n+\n+    @FindBy(id = \"account-name\")\n+    private WebElement accountName;\n+\n+    @FindBy(id = \"account-email\")\n+    private WebElement accountEmail;\n+\n+    @FindBy(id = \"account-institute\")\n+    private WebElement accountInstitute;\n+\n+    @FindBy(id = \"account-is-instructor\")\n+    private WebElement accountIsInstructor;\n+\n+    public AdminAccountsPage(Browser browser) {\n+        super(browser);\n+    }\n+\n+    @Override\n+    protected boolean containsExpectedPageContents() {\n+        return getPageSource().contains(\"Account Details\");\n+    }\n+\n+    public void verifyAccountDetails(AccountAttributes account) {\n+        assertEquals(account.getGoogleId(), accountId.getText());\n+        assertEquals(account.getName(), accountName.getText());\n+        assertEquals(account.getEmail(), accountEmail.getText());\n+        assertEquals(account.getInstitute(), accountInstitute.getText());\n+        assertEquals(account.isInstructor(), Boolean.parseBoolean(accountIsInstructor.getText()));\n+    }\n+\n+}\n", "next_change": {"commit": "258427b99b0f9d815af913039fa649c4a1bd4156", "changed_code": [{"header": "diff --git a/src/e2e/java/teammates/e2e/pageobjects/AdminAccountsPage.java b/src/e2e/java/teammates/e2e/pageobjects/AdminAccountsPage.java\nindex 920710ebc2..e9091d9ced 100644\n--- a/src/e2e/java/teammates/e2e/pageobjects/AdminAccountsPage.java\n+++ b/src/e2e/java/teammates/e2e/pageobjects/AdminAccountsPage.java\n", "chunk": "@@ -44,4 +60,52 @@ public class AdminAccountsPage extends AppPage {\n         assertEquals(account.isInstructor(), Boolean.parseBoolean(accountIsInstructor.getText()));\n     }\n \n+    public void clickRemoveInstructorFromCourse(String courseId) {\n+        List<WebElement> instructorRows =\n+                instructorTable.findElement(By.tagName(\"tbody\")).findElements(By.tagName(\"tr\"));\n+\n+        WebElement deleteButton = null;\n+        for (WebElement instructorRow : instructorRows) {\n+            List<WebElement> cells = instructorRow.findElements(By.tagName(\"td\"));\n+            if (cells.get(0).getText().startsWith(\"[\" + courseId + \"]\")) {\n+                deleteButton = cells.get(1).findElement(By.className(\"btn-danger\"));\n+            }\n+        }\n+\n+        if (deleteButton == null) {\n+            fail(\"Instructor to be deleted is not found\");\n+        }\n+        click(deleteButton);\n+        waitForPageToLoad(true);\n+    }\n+\n+    public void clickRemoveStudentFromCourse(String courseId) {\n+        List<WebElement> studentRows =\n+                studentTable.findElement(By.tagName(\"tbody\")).findElements(By.tagName(\"tr\"));\n+\n+        WebElement deleteButton = null;\n+        for (WebElement studentRow : studentRows) {\n+            List<WebElement> cells = studentRow.findElements(By.tagName(\"td\"));\n+            if (cells.get(0).getText().startsWith(\"[\" + courseId + \"]\")) {\n+                deleteButton = cells.get(1).findElement(By.className(\"btn-danger\"));\n+            }\n+        }\n+\n+        if (deleteButton == null) {\n+            fail(\"Student to be deleted is not found\");\n+        }\n+        click(deleteButton);\n+        waitForPageToLoad(true);\n+    }\n+\n+    public void clickDowngradeAccount() {\n+        click(downgradeAccountButton);\n+        waitForPageToLoad(true);\n+    }\n+\n+    public void clickDeleteAccount() {\n+        click(deleteAccountButton);\n+        waitForPageToLoad(true);\n+    }\n+\n }\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc5MjA1MQ==", "url": "https://github.com/TEAMMATES/teammates/pull/10784#discussion_r506792051", "body": "Is it possible to shift this verification into `AdminSessionsPage` as I believe all interaction with WebElements should be hidden in the page object and we should avoid having getters for any WebElements. It can also be reused for the below testcase.", "bodyText": "Is it possible to shift this verification into AdminSessionsPage as I believe all interaction with WebElements should be hidden in the page object and we should avoid having getters for any WebElements. It can also be reused for the below testcase.", "bodyHTML": "<p dir=\"auto\">Is it possible to shift this verification into <code>AdminSessionsPage</code> as I believe all interaction with WebElements should be hidden in the page object and we should avoid having getters for any WebElements. It can also be reused for the below testcase.</p>", "author": "jtankw3", "createdAt": "2020-10-17T04:22:37Z", "path": "src/e2e/java/teammates/e2e/cases/e2e/AdminSessionsPageE2ETest.java", "diffHunk": "@@ -0,0 +1,181 @@\n+package teammates.e2e.cases.e2e;\n+\n+import java.time.Instant;\n+import java.time.ZoneId;\n+import java.time.format.DateTimeFormatter;\n+import java.util.List;\n+\n+import org.openqa.selenium.By;\n+import org.openqa.selenium.WebElement;\n+import org.testng.annotations.Test;\n+\n+import teammates.common.datatransfer.attributes.FeedbackSessionAttributes;\n+import teammates.common.util.AppUrl;\n+import teammates.common.util.Const;\n+import teammates.common.util.TimeHelper;\n+import teammates.e2e.pageobjects.AdminSessionsPage;\n+\n+/**\n+ * SUT: {@link Const.WebPageURIs#ADMIN_SESSIONS_PAGE}.\n+ */\n+public class AdminSessionsPageE2ETest extends BaseE2ETestCase {\n+    private FeedbackSessionAttributes openFeedbackSession;\n+    private FeedbackSessionAttributes awaitingFeedbackSession;\n+    private FeedbackSessionAttributes futureFeedbackSession;\n+    private Instant instant3DaysAgo = TimeHelper.getInstantDaysOffsetFromNow(-3);\n+    private Instant instantTomorrow = TimeHelper.getInstantDaysOffsetFromNow(1);\n+    private Instant instant3DaysLater = TimeHelper.getInstantDaysOffsetFromNow(3);\n+    private Instant instantNextWeek = TimeHelper.getInstantDaysOffsetFromNow(7);\n+    private Instant instant10DaysLater = TimeHelper.getInstantDaysOffsetFromNow(10);\n+    private Instant instant14DaysLater = TimeHelper.getInstantDaysOffsetFromNow(14);\n+    private Instant instant24DaysLater = TimeHelper.getInstantDaysOffsetFromNow(24);\n+\n+    private String formatDateTime(Instant instant, String timeZone) {\n+        return DateTimeFormatter\n+                .ofPattern(\"EEE, dd MMM YYYY, hh:mm a\")\n+                .format(instant.atZone(ZoneId.of(timeZone)))\n+                .replaceFirst(\" AM$\", \" am\")\n+                .replaceFirst(\" PM$\", \" pm\");\n+    }\n+\n+    @Override\n+    protected void prepareTestData() {\n+        testData = loadDataBundle(\"/AdminSessionsPageE2ETest.json\");\n+\n+        // To guarantee that there will always be some \"ongoing sessions\" listed,\n+        // the test data is injected with date/time values relative to the time where the test takes place\n+\n+        openFeedbackSession = testData.feedbackSessions.get(\"session1InCourse1\");\n+        openFeedbackSession.setStartTime(instant3DaysAgo);\n+        openFeedbackSession.setCreatedTime(instant3DaysAgo);\n+        openFeedbackSession.setSessionVisibleFromTime(instant3DaysAgo);\n+        openFeedbackSession.setEndTime(instant3DaysLater);\n+        openFeedbackSession.setResultsVisibleFromTime(instant3DaysLater);\n+\n+        awaitingFeedbackSession = testData.feedbackSessions.get(\"session2InCourse1\");\n+        awaitingFeedbackSession.setStartTime(instantTomorrow);\n+        awaitingFeedbackSession.setCreatedTime(instant3DaysAgo);\n+        awaitingFeedbackSession.setSessionVisibleFromTime(instantTomorrow);\n+        awaitingFeedbackSession.setEndTime(instant3DaysLater);\n+        awaitingFeedbackSession.setResultsVisibleFromTime(instant3DaysLater);\n+\n+        futureFeedbackSession = testData.feedbackSessions.get(\"session3InCourse1\");\n+        futureFeedbackSession.setStartTime(instant10DaysLater);\n+        futureFeedbackSession.setCreatedTime(instant3DaysAgo);\n+        futureFeedbackSession.setSessionVisibleFromTime(instant10DaysLater);\n+        futureFeedbackSession.setEndTime(instant24DaysLater);\n+        futureFeedbackSession.setResultsVisibleFromTime(instant24DaysLater);\n+\n+        removeAndRestoreDataBundle(testData);\n+    }\n+\n+    @Test\n+    public void testAll() {\n+\n+        ______TS(\"verify loaded data\");\n+\n+        AppUrl sessionsUrl = createUrl(Const.WebPageURIs.ADMIN_SESSIONS_PAGE);\n+        AdminSessionsPage sessionsPage = loginAdminToPage(sessionsUrl, AdminSessionsPage.class);\n+        sessionsPage.waitUntilAnimationFinish();\n+\n+        String tableTimezone = sessionsPage.getSessionsTableTimezone();\n+\n+        List<WebElement> ongoingSessionRows = sessionsPage.getOngoingSessionsRows();", "originalCommit": "3936c91b552a4a368192f8119c7d241f4d797c14", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "00e9352bf71f91ac4d9c14035b8510361747ee46", "changed_code": [{"header": "diff --git a/src/e2e/java/teammates/e2e/cases/e2e/AdminSessionsPageE2ETest.java b/src/e2e/java/teammates/e2e/cases/e2e/AdminSessionsPageE2ETest.java\nindex 6f83885334..b6345b2f8c 100644\n--- a/src/e2e/java/teammates/e2e/cases/e2e/AdminSessionsPageE2ETest.java\n+++ b/src/e2e/java/teammates/e2e/cases/e2e/AdminSessionsPageE2ETest.java\n", "chunk": "@@ -80,8 +77,6 @@ public class AdminSessionsPageE2ETest extends BaseE2ETestCase {\n \n         String tableTimezone = sessionsPage.getSessionsTableTimezone();\n \n-        List<WebElement> ongoingSessionRows = sessionsPage.getOngoingSessionsRows();\n-\n         String[] openSessionCells = {\n                 \"[Opened]\",\n                 String.format(\"[%s] %s\", openFeedbackSession.getCourseId(),\n", "next_change": {"commit": "8926f4f0b61ef7379bf0cb5750c81a3f4a75b225", "changed_code": [{"header": "diff --git a/src/e2e/java/teammates/e2e/cases/e2e/AdminSessionsPageE2ETest.java b/src/e2e/java/teammates/e2e/cases/e2e/AdminSessionsPageE2ETest.java\ndeleted file mode 100644\nindex b6345b2f8c..0000000000\n--- a/src/e2e/java/teammates/e2e/cases/e2e/AdminSessionsPageE2ETest.java\n+++ /dev/null\n", "chunk": "@@ -1,139 +0,0 @@\n-package teammates.e2e.cases.e2e;\n-\n-import java.time.Instant;\n-import java.time.ZoneId;\n-import java.time.format.DateTimeFormatter;\n-\n-import org.testng.annotations.Test;\n-\n-import teammates.common.datatransfer.attributes.FeedbackSessionAttributes;\n-import teammates.common.util.AppUrl;\n-import teammates.common.util.Const;\n-import teammates.common.util.TimeHelper;\n-import teammates.e2e.pageobjects.AdminSessionsPage;\n-\n-/**\n- * SUT: {@link Const.WebPageURIs#ADMIN_SESSIONS_PAGE}.\n- */\n-public class AdminSessionsPageE2ETest extends BaseE2ETestCase {\n-    private FeedbackSessionAttributes openFeedbackSession;\n-    private FeedbackSessionAttributes awaitingFeedbackSession;\n-    private FeedbackSessionAttributes futureFeedbackSession;\n-    private Instant instant3DaysAgo = TimeHelper.getInstantDaysOffsetFromNow(-3);\n-    private Instant instantTomorrow = TimeHelper.getInstantDaysOffsetFromNow(1);\n-    private Instant instant3DaysLater = TimeHelper.getInstantDaysOffsetFromNow(3);\n-    private Instant instantNextWeek = TimeHelper.getInstantDaysOffsetFromNow(7);\n-    private Instant instant10DaysLater = TimeHelper.getInstantDaysOffsetFromNow(10);\n-    private Instant instant14DaysLater = TimeHelper.getInstantDaysOffsetFromNow(14);\n-    private Instant instant24DaysLater = TimeHelper.getInstantDaysOffsetFromNow(24);\n-\n-    private String formatDateTime(Instant instant, String timeZone) {\n-        return DateTimeFormatter\n-                .ofPattern(\"EEE, dd MMM YYYY, hh:mm a\")\n-                .format(instant.atZone(ZoneId.of(timeZone)))\n-                .replaceFirst(\" AM$\", \" am\")\n-                .replaceFirst(\" PM$\", \" pm\");\n-    }\n-\n-    @Override\n-    protected void prepareTestData() {\n-        testData = loadDataBundle(\"/AdminSessionsPageE2ETest.json\");\n-\n-        // To guarantee that there will always be some \"ongoing sessions\" listed,\n-        // the test data is injected with date/time values relative to the time where the test takes place\n-\n-        openFeedbackSession = testData.feedbackSessions.get(\"session1InCourse1\");\n-        openFeedbackSession.setStartTime(instant3DaysAgo);\n-        openFeedbackSession.setCreatedTime(instant3DaysAgo);\n-        openFeedbackSession.setSessionVisibleFromTime(instant3DaysAgo);\n-        openFeedbackSession.setEndTime(instant3DaysLater);\n-        openFeedbackSession.setResultsVisibleFromTime(instant3DaysLater);\n-\n-        awaitingFeedbackSession = testData.feedbackSessions.get(\"session2InCourse1\");\n-        awaitingFeedbackSession.setStartTime(instantTomorrow);\n-        awaitingFeedbackSession.setCreatedTime(instant3DaysAgo);\n-        awaitingFeedbackSession.setSessionVisibleFromTime(instantTomorrow);\n-        awaitingFeedbackSession.setEndTime(instant3DaysLater);\n-        awaitingFeedbackSession.setResultsVisibleFromTime(instant3DaysLater);\n-\n-        futureFeedbackSession = testData.feedbackSessions.get(\"session3InCourse1\");\n-        futureFeedbackSession.setStartTime(instant10DaysLater);\n-        futureFeedbackSession.setCreatedTime(instant3DaysAgo);\n-        futureFeedbackSession.setSessionVisibleFromTime(instant10DaysLater);\n-        futureFeedbackSession.setEndTime(instant24DaysLater);\n-        futureFeedbackSession.setResultsVisibleFromTime(instant24DaysLater);\n-\n-        removeAndRestoreDataBundle(testData);\n-    }\n-\n-    @Test\n-    public void testAll() {\n-\n-        ______TS(\"verify loaded data\");\n-\n-        AppUrl sessionsUrl = createUrl(Const.WebPageURIs.ADMIN_SESSIONS_PAGE);\n-        AdminSessionsPage sessionsPage = loginAdminToPage(sessionsUrl, AdminSessionsPage.class);\n-        sessionsPage.waitUntilAnimationFinish();\n-\n-        String tableTimezone = sessionsPage.getSessionsTableTimezone();\n-\n-        String[] openSessionCells = {\n-                \"[Opened]\",\n-                String.format(\"[%s] %s\", openFeedbackSession.getCourseId(),\n-                        openFeedbackSession.getFeedbackSessionName()),\n-                \"Show\",\n-                formatDateTime(instant3DaysAgo, tableTimezone),\n-                formatDateTime(instant3DaysLater, tableTimezone),\n-                openFeedbackSession.getCreatorEmail(),\n-        };\n-\n-        String[] awaitingSessionCells = {\n-                \"[Waiting To Open]\",\n-                String.format(\"[%s] %s\", awaitingFeedbackSession.getCourseId(),\n-                        awaitingFeedbackSession.getFeedbackSessionName()),\n-                \"Show\",\n-                formatDateTime(instantTomorrow, tableTimezone),\n-                formatDateTime(instant3DaysLater, tableTimezone),\n-                awaitingFeedbackSession.getCreatorEmail(),\n-        };\n-\n-        String[] futureSessionCells = {\n-                \"[Waiting To Open]\",\n-                String.format(\"[%s] %s\", futureFeedbackSession.getCourseId(),\n-                        futureFeedbackSession.getFeedbackSessionName()),\n-                \"Show\",\n-                formatDateTime(instant10DaysLater, tableTimezone),\n-                formatDateTime(instant24DaysLater, tableTimezone),\n-                futureFeedbackSession.getCreatorEmail(),\n-        };\n-\n-        String[][] sessionsCells = {\n-                openSessionCells, awaitingSessionCells, futureSessionCells,\n-        };\n-\n-        // Open and awaiting session should be displayed with the appropriate status\n-        // Future session should not be displayed yet\n-\n-        boolean[] expectedSessionShownStatus = { true, true, false };\n-\n-        sessionsPage.verifySessionRows(sessionsCells, expectedSessionShownStatus);\n-\n-        ______TS(\"query future session\");\n-\n-        sessionsPage.toggleSessionFilter();\n-        sessionsPage.waitForSessionFilterVisibility();\n-\n-        sessionsPage.setFilterStartDate(instantNextWeek);\n-        sessionsPage.setFilterEndDate(instant14DaysLater);\n-        sessionsPage.filterSessions();\n-\n-        // This time, only future session should be displayed\n-        // The previous open and awaiting session would have closed by this date\n-\n-        expectedSessionShownStatus = new boolean[] { false, false, true };\n-\n-        sessionsPage.verifySessionRows(sessionsCells, expectedSessionShownStatus);\n-\n-    }\n-\n-}\n", "next_change": {"commit": "cc7b6ee363a954760287e509b0c835ebef743280", "changed_code": [{"header": "diff --git a/src/e2e/java/teammates/e2e/cases/e2e/AdminSessionsPageE2ETest.java b/src/e2e/java/teammates/e2e/cases/e2e/AdminSessionsPageE2ETest.java\nnew file mode 100644\nindex 0000000000..e8901c1f68\n--- /dev/null\n+++ b/src/e2e/java/teammates/e2e/cases/e2e/AdminSessionsPageE2ETest.java\n", "chunk": "@@ -0,0 +1,113 @@\n+package teammates.e2e.cases.e2e;\n+\n+import java.time.Instant;\n+import java.time.ZoneId;\n+import java.time.format.DateTimeFormatter;\n+import java.util.List;\n+\n+import org.openqa.selenium.By;\n+import org.openqa.selenium.WebElement;\n+import org.testng.annotations.Test;\n+\n+import teammates.common.datatransfer.attributes.FeedbackSessionAttributes;\n+import teammates.common.util.AppUrl;\n+import teammates.common.util.Const;\n+import teammates.common.util.TimeHelper;\n+import teammates.e2e.pageobjects.AdminSessionsPage;\n+\n+/**\n+ * SUT: {@link Const.WebPageURIs#ADMIN_SESSIONS_PAGE}.\n+ */\n+public class AdminSessionsPageE2ETest extends BaseE2ETestCase {\n+    private FeedbackSessionAttributes openFeedbackSession;\n+    private FeedbackSessionAttributes awaitingFeedbackSession;\n+    private Instant instant3DaysAgo = TimeHelper.getInstantDaysOffsetFromNow(-3);\n+    private Instant instantTomorrow = TimeHelper.getInstantDaysOffsetFromNow(1);\n+    private Instant instant3DaysLater = TimeHelper.getInstantDaysOffsetFromNow(3);\n+\n+    private String formatDateTime(Instant instant, ZoneId timeZone) {\n+        return DateTimeFormatter\n+                .ofPattern(\"EEE, dd MMM YYYY, hh:mm a\")\n+                .format(instant.atZone(timeZone))\n+                .replaceFirst(\" AM$\", \" am\")\n+                .replaceFirst(\" PM$\", \" pm\");\n+    }\n+\n+    @Override\n+    protected void prepareTestData() {\n+        testData = loadDataBundle(\"/AdminSessionsPageE2ETest.json\");\n+\n+        // To guarantee that there will always be some \"ongoing sessions\" listed,\n+        // the test data is injected with date/time values relative to the time where the test takes place\n+\n+        openFeedbackSession = testData.feedbackSessions.get(\"session1InCourse1\");\n+        openFeedbackSession.setStartTime(instant3DaysAgo);\n+        openFeedbackSession.setCreatedTime(instant3DaysAgo);\n+        openFeedbackSession.setSessionVisibleFromTime(instant3DaysAgo);\n+        openFeedbackSession.setEndTime(instant3DaysLater);\n+        openFeedbackSession.setResultsVisibleFromTime(instant3DaysLater);\n+\n+        awaitingFeedbackSession = testData.feedbackSessions.get(\"session2InCourse1\");\n+        awaitingFeedbackSession.setStartTime(instantTomorrow);\n+        awaitingFeedbackSession.setCreatedTime(instant3DaysAgo);\n+        awaitingFeedbackSession.setSessionVisibleFromTime(instantTomorrow);\n+        awaitingFeedbackSession.setEndTime(instant3DaysLater);\n+        awaitingFeedbackSession.setResultsVisibleFromTime(instant3DaysLater);\n+\n+        removeAndRestoreDataBundle(testData);\n+    }\n+\n+    @Test\n+    public void testAll() {\n+\n+        ______TS(\"verify loaded data\");\n+\n+        AppUrl sessionsUrl = createUrl(Const.WebPageURIs.ADMIN_SESSIONS_PAGE);\n+        AdminSessionsPage sessionsPage = loginAdminToPage(sessionsUrl, AdminSessionsPage.class);\n+        sessionsPage.waitUntilAnimationFinish();\n+\n+        List<WebElement> ongoingSessionRows = sessionsPage.getOngoingSessionsRows();\n+\n+        String[] openSessionCells = {\n+                \"[Opened]\",\n+                String.format(\"[%s] %s\", openFeedbackSession.getCourseId(),\n+                        openFeedbackSession.getFeedbackSessionName()),\n+                \"Show\",\n+                formatDateTime(instant3DaysAgo, openFeedbackSession.getTimeZone()),\n+                formatDateTime(instant3DaysLater, openFeedbackSession.getTimeZone()),\n+                openFeedbackSession.getCreatorEmail(),\n+        };\n+        boolean hasOpenSession = false;\n+\n+        String[] awaitingSessionCells = {\n+                \"[Waiting To Open]\",\n+                String.format(\"[%s] %s\", awaitingFeedbackSession.getCourseId(),\n+                        awaitingFeedbackSession.getFeedbackSessionName()),\n+                \"Show\",\n+                formatDateTime(instantTomorrow, awaitingFeedbackSession.getTimeZone()),\n+                formatDateTime(instant3DaysLater, awaitingFeedbackSession.getTimeZone()),\n+                awaitingFeedbackSession.getCreatorEmail(),\n+        };\n+        boolean hasAwaitingSession = false;\n+\n+        for (WebElement sessionRow : ongoingSessionRows) {\n+            List<WebElement> cells = sessionRow.findElements(By.tagName(\"td\"));\n+\n+            // Only validate for the preset ongoing sessions\n+            // This is because the page will display all ongoing sessions in the database, which is not predictable\n+\n+            if (openSessionCells[1].equals(cells.get(1).getText())) {\n+                sessionsPage.verifySessionRow(sessionRow, openSessionCells);\n+                hasOpenSession = true;\n+            } else if (awaitingSessionCells[1].equals(cells.get(1).getText())) {\n+                sessionsPage.verifySessionRow(sessionRow, awaitingSessionCells);\n+                hasAwaitingSession = true;\n+            }\n+        }\n+\n+        assertTrue(hasOpenSession);\n+        assertTrue(hasAwaitingSession);\n+\n+    }\n+\n+}\n", "next_change": {"commit": "ecb8ef0f52d0c562848f404e3094d8e87b154032", "changed_code": [{"header": "diff --git a/src/e2e/java/teammates/e2e/cases/e2e/AdminSessionsPageE2ETest.java b/src/e2e/java/teammates/e2e/cases/e2e/AdminSessionsPageE2ETest.java\nindex e8901c1f68..ab5f009800 100644\n--- a/src/e2e/java/teammates/e2e/cases/e2e/AdminSessionsPageE2ETest.java\n+++ b/src/e2e/java/teammates/e2e/cases/e2e/AdminSessionsPageE2ETest.java\n", "chunk": "@@ -102,11 +125,54 @@ public class AdminSessionsPageE2ETest extends BaseE2ETestCase {\n             } else if (awaitingSessionCells[1].equals(cells.get(1).getText())) {\n                 sessionsPage.verifySessionRow(sessionRow, awaitingSessionCells);\n                 hasAwaitingSession = true;\n+            } else if (futureSessionCells[1].equals(cells.get(1).getText())) {\n+                sessionsPage.verifySessionRow(sessionRow, futureSessionCells);\n+                hasFutureSession = true;\n             }\n         }\n \n+        // Open and awaiting session should be displayed with the appropriate status\n+        // Future session should not be displayed yet\n+\n         assertTrue(hasOpenSession);\n         assertTrue(hasAwaitingSession);\n+        assertFalse(hasFutureSession);\n+\n+        ______TS(\"query future session\");\n+\n+        sessionsPage.toggleSessionFilter();\n+        sessionsPage.waitForSessionFilterVisibility();\n+\n+        sessionsPage.setFilterStartDate(instantNextWeek);\n+        sessionsPage.setFilterEndDate(instant14DaysLater);\n+        sessionsPage.filterSessions();\n+\n+        ongoingSessionRows = sessionsPage.getOngoingSessionsRows();\n+        hasOpenSession = false;\n+        hasAwaitingSession = false;\n+        hasFutureSession = false;\n+\n+        for (WebElement sessionRow : ongoingSessionRows) {\n+            List<WebElement> cells = sessionRow.findElements(By.tagName(\"td\"));\n+\n+            if (openSessionCells[1].equals(cells.get(1).getText())) {\n+                sessionsPage.verifySessionRow(sessionRow, openSessionCells);\n+                hasOpenSession = true;\n+            } else if (awaitingSessionCells[1].equals(cells.get(1).getText())) {\n+                sessionsPage.verifySessionRow(sessionRow, awaitingSessionCells);\n+                hasAwaitingSession = true;\n+            } else if (futureSessionCells[1].equals(cells.get(1).getText())) {\n+                sessionsPage.verifySessionRow(sessionRow, futureSessionCells);\n+                hasFutureSession = true;\n+            }\n+        }\n+\n+        // This time, only future session should be displayed\n+        // The previous open and awaiting session would have closed by this date\n+\n+        assertFalse(hasOpenSession);\n+        assertFalse(hasAwaitingSession);\n+        assertTrue(hasFutureSession);\n \n     }\n \n", "next_change": {"commit": "d278d62aff7748c79f6f32491cebcc01116545a6", "changed_code": [{"header": "diff --git a/src/e2e/java/teammates/e2e/cases/e2e/AdminSessionsPageE2ETest.java b/src/e2e/java/teammates/e2e/cases/e2e/AdminSessionsPageE2ETest.java\nindex ab5f009800..b6345b2f8c 100644\n--- a/src/e2e/java/teammates/e2e/cases/e2e/AdminSessionsPageE2ETest.java\n+++ b/src/e2e/java/teammates/e2e/cases/e2e/AdminSessionsPageE2ETest.java\n", "chunk": "@@ -147,32 +127,12 @@ public class AdminSessionsPageE2ETest extends BaseE2ETestCase {\n         sessionsPage.setFilterEndDate(instant14DaysLater);\n         sessionsPage.filterSessions();\n \n-        ongoingSessionRows = sessionsPage.getOngoingSessionsRows();\n-        hasOpenSession = false;\n-        hasAwaitingSession = false;\n-        hasFutureSession = false;\n-\n-        for (WebElement sessionRow : ongoingSessionRows) {\n-            List<WebElement> cells = sessionRow.findElements(By.tagName(\"td\"));\n-\n-            if (openSessionCells[1].equals(cells.get(1).getText())) {\n-                sessionsPage.verifySessionRow(sessionRow, openSessionCells);\n-                hasOpenSession = true;\n-            } else if (awaitingSessionCells[1].equals(cells.get(1).getText())) {\n-                sessionsPage.verifySessionRow(sessionRow, awaitingSessionCells);\n-                hasAwaitingSession = true;\n-            } else if (futureSessionCells[1].equals(cells.get(1).getText())) {\n-                sessionsPage.verifySessionRow(sessionRow, futureSessionCells);\n-                hasFutureSession = true;\n-            }\n-        }\n-\n         // This time, only future session should be displayed\n         // The previous open and awaiting session would have closed by this date\n \n-        assertFalse(hasOpenSession);\n-        assertFalse(hasAwaitingSession);\n-        assertTrue(hasFutureSession);\n+        expectedSessionShownStatus = new boolean[] { false, false, true };\n+\n+        sessionsPage.verifySessionRows(sessionsCells, expectedSessionShownStatus);\n \n     }\n \n", "next_change": null}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc5MjMxMA==", "url": "https://github.com/TEAMMATES/teammates/pull/10784#discussion_r506792310", "body": "I think we should avoid returning WebElements as we want to minimize interaction outside of the page object.", "bodyText": "I think we should avoid returning WebElements as we want to minimize interaction outside of the page object.", "bodyHTML": "<p dir=\"auto\">I think we should avoid returning WebElements as we want to minimize interaction outside of the page object.</p>", "author": "jtankw3", "createdAt": "2020-10-17T04:25:32Z", "path": "src/e2e/java/teammates/e2e/pageobjects/AdminSessionsPage.java", "diffHunk": "@@ -0,0 +1,84 @@\n+package teammates.e2e.pageobjects;\n+\n+import java.time.Instant;\n+import java.time.ZoneId;\n+import java.time.format.DateTimeFormatter;\n+import java.util.List;\n+\n+import org.openqa.selenium.By;\n+import org.openqa.selenium.WebElement;\n+import org.openqa.selenium.support.FindBy;\n+\n+/**\n+ * Page Object Model for the admin sessions page.\n+ */\n+public class AdminSessionsPage extends AppPage {\n+\n+    @FindBy(id = \"btn-toggle-filter\")\n+    private WebElement toggleFilterButton;\n+\n+    @FindBy(id = \"ongoing-sessions-table\")\n+    private WebElement ongoingSessionsTable;\n+\n+    public AdminSessionsPage(Browser browser) {\n+        super(browser);\n+    }\n+\n+    @Override\n+    protected boolean containsExpectedPageContents() {\n+        return getPageSource().contains(\"Ongoing Sessions\");\n+    }\n+\n+    public List<WebElement> getOngoingSessionsRows() {", "originalCommit": "3936c91b552a4a368192f8119c7d241f4d797c14", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "00e9352bf71f91ac4d9c14035b8510361747ee46", "changed_code": [{"header": "diff --git a/src/e2e/java/teammates/e2e/pageobjects/AdminSessionsPage.java b/src/e2e/java/teammates/e2e/pageobjects/AdminSessionsPage.java\nindex 8cfc09f932..7b8392aed1 100644\n--- a/src/e2e/java/teammates/e2e/pageobjects/AdminSessionsPage.java\n+++ b/src/e2e/java/teammates/e2e/pageobjects/AdminSessionsPage.java\n", "chunk": "@@ -29,12 +31,34 @@ public class AdminSessionsPage extends AppPage {\n         return getPageSource().contains(\"Ongoing Sessions\");\n     }\n \n-    public List<WebElement> getOngoingSessionsRows() {\n+    private List<WebElement> getOngoingSessionsRows() {\n         return ongoingSessionsTable.findElement(By.tagName(\"tbody\")).findElements(By.tagName(\"tr\"));\n     }\n \n-    public void verifySessionRow(WebElement sessionRow, String[] expectedRowValues) {\n-        verifyTableRowValues(sessionRow, expectedRowValues);\n+    public void verifySessionRows(String[][] sessionsCells, boolean[] expectedSessionShownStatus) {\n+        assertEquals(sessionsCells.length, expectedSessionShownStatus.length);\n+\n+        boolean[] actualSessionShownStatus = new boolean[expectedSessionShownStatus.length];\n+\n+        List<WebElement> ongoingSessionRows = getOngoingSessionsRows();\n+        for (WebElement sessionRow : ongoingSessionRows) {\n+            List<WebElement> cells = sessionRow.findElements(By.tagName(\"td\"));\n+\n+            // Only validate for the preset ongoing sessions\n+            // This is because the page will display all ongoing sessions in the database, which is not predictable\n+\n+            for (int i = 0; i < sessionsCells.length; i++) {\n+                String[] sessionCells = sessionsCells[i];\n+                if (sessionCells[1].equals(cells.get(1).getText())) {\n+                    verifyTableRowValues(sessionRow, sessionCells);\n+                    actualSessionShownStatus[i] = true;\n+                }\n+            }\n+        }\n+\n+        for (int i = 0; i < expectedSessionShownStatus.length; i++) {\n+            assertEquals(expectedSessionShownStatus[i], actualSessionShownStatus[i]);\n+        }\n     }\n \n     public void toggleSessionFilter() {\n", "next_change": {"commit": "8926f4f0b61ef7379bf0cb5750c81a3f4a75b225", "changed_code": [{"header": "diff --git a/src/e2e/java/teammates/e2e/pageobjects/AdminSessionsPage.java b/src/e2e/java/teammates/e2e/pageobjects/AdminSessionsPage.java\ndeleted file mode 100644\nindex 7b8392aed1..0000000000\n--- a/src/e2e/java/teammates/e2e/pageobjects/AdminSessionsPage.java\n+++ /dev/null\n", "chunk": "@@ -1,108 +0,0 @@\n-package teammates.e2e.pageobjects;\n-\n-import static org.junit.Assert.assertEquals;\n-\n-import java.time.Instant;\n-import java.time.ZoneId;\n-import java.time.format.DateTimeFormatter;\n-import java.util.List;\n-\n-import org.openqa.selenium.By;\n-import org.openqa.selenium.WebElement;\n-import org.openqa.selenium.support.FindBy;\n-\n-/**\n- * Page Object Model for the admin sessions page.\n- */\n-public class AdminSessionsPage extends AppPage {\n-\n-    @FindBy(id = \"btn-toggle-filter\")\n-    private WebElement toggleFilterButton;\n-\n-    @FindBy(id = \"ongoing-sessions-table\")\n-    private WebElement ongoingSessionsTable;\n-\n-    public AdminSessionsPage(Browser browser) {\n-        super(browser);\n-    }\n-\n-    @Override\n-    protected boolean containsExpectedPageContents() {\n-        return getPageSource().contains(\"Ongoing Sessions\");\n-    }\n-\n-    private List<WebElement> getOngoingSessionsRows() {\n-        return ongoingSessionsTable.findElement(By.tagName(\"tbody\")).findElements(By.tagName(\"tr\"));\n-    }\n-\n-    public void verifySessionRows(String[][] sessionsCells, boolean[] expectedSessionShownStatus) {\n-        assertEquals(sessionsCells.length, expectedSessionShownStatus.length);\n-\n-        boolean[] actualSessionShownStatus = new boolean[expectedSessionShownStatus.length];\n-\n-        List<WebElement> ongoingSessionRows = getOngoingSessionsRows();\n-        for (WebElement sessionRow : ongoingSessionRows) {\n-            List<WebElement> cells = sessionRow.findElements(By.tagName(\"td\"));\n-\n-            // Only validate for the preset ongoing sessions\n-            // This is because the page will display all ongoing sessions in the database, which is not predictable\n-\n-            for (int i = 0; i < sessionsCells.length; i++) {\n-                String[] sessionCells = sessionsCells[i];\n-                if (sessionCells[1].equals(cells.get(1).getText())) {\n-                    verifyTableRowValues(sessionRow, sessionCells);\n-                    actualSessionShownStatus[i] = true;\n-                }\n-            }\n-        }\n-\n-        for (int i = 0; i < expectedSessionShownStatus.length; i++) {\n-            assertEquals(expectedSessionShownStatus[i], actualSessionShownStatus[i]);\n-        }\n-    }\n-\n-    public void toggleSessionFilter() {\n-        click(toggleFilterButton);\n-    }\n-\n-    public void waitForSessionFilterVisibility() {\n-        By by = By.id(\"filter-section\");\n-        waitForElementVisibility(by);\n-    }\n-\n-    public void setFilterStartDate(Instant instant) {\n-        WebElement timezoneElement = browser.driver.findElement(By.id(\"filter-timezone\"));\n-        String timezone = getSelectedDropdownOptionText(timezoneElement);\n-\n-        WebElement startDate = browser.driver.findElement(By.id(\"start-date\"));\n-        fillTextBox(startDate, formatDateTimeForFilter(instant, ZoneId.of(timezone)));\n-    }\n-\n-    public void setFilterEndDate(Instant instant) {\n-        WebElement timezoneElement = browser.driver.findElement(By.id(\"filter-timezone\"));\n-        String timezone = getSelectedDropdownOptionText(timezoneElement);\n-\n-        WebElement endDate = browser.driver.findElement(By.id(\"end-date\"));\n-        fillTextBox(endDate, formatDateTimeForFilter(instant, ZoneId.of(timezone)));\n-    }\n-\n-    public void filterSessions() {\n-        By by = By.id(\"btn-get-sessions\");\n-        waitForElementPresence(by);\n-        click(by);\n-        waitForPageToLoad();\n-        waitUntilAnimationFinish();\n-    }\n-\n-    private String formatDateTimeForFilter(Instant instant, ZoneId timeZone) {\n-        return DateTimeFormatter\n-                .ofPattern(\"YYYY-MM-dd\")\n-                .format(instant.atZone(timeZone));\n-    }\n-\n-    public String getSessionsTableTimezone() {\n-        WebElement timezoneElement = browser.driver.findElement(By.id(\"table-timezone\"));\n-        return getSelectedDropdownOptionText(timezoneElement);\n-    }\n-\n-}\n", "next_change": {"commit": "cc7b6ee363a954760287e509b0c835ebef743280", "changed_code": [{"header": "diff --git a/src/e2e/java/teammates/e2e/pageobjects/AdminSessionsPage.java b/src/e2e/java/teammates/e2e/pageobjects/AdminSessionsPage.java\nnew file mode 100644\nindex 0000000000..6b0f3f79d1\n--- /dev/null\n+++ b/src/e2e/java/teammates/e2e/pageobjects/AdminSessionsPage.java\n", "chunk": "@@ -0,0 +1,34 @@\n+package teammates.e2e.pageobjects;\n+\n+import java.util.List;\n+\n+import org.openqa.selenium.By;\n+import org.openqa.selenium.WebElement;\n+import org.openqa.selenium.support.FindBy;\n+\n+/**\n+ * Page Object Model for the admin sessions page.\n+ */\n+public class AdminSessionsPage extends AppPage {\n+\n+    @FindBy(id = \"ongoing-sessions-table\")\n+    private WebElement ongoingSessionsTable;\n+\n+    public AdminSessionsPage(Browser browser) {\n+        super(browser);\n+    }\n+\n+    @Override\n+    protected boolean containsExpectedPageContents() {\n+        return getPageSource().contains(\"Ongoing Sessions\");\n+    }\n+\n+    public List<WebElement> getOngoingSessionsRows() {\n+        return ongoingSessionsTable.findElement(By.tagName(\"tbody\")).findElements(By.tagName(\"tr\"));\n+    }\n+\n+    public void verifySessionRow(WebElement sessionRow, String[] expectedRowValues) {\n+        verifyTableRowValues(sessionRow, expectedRowValues);\n+    }\n+\n+}\n", "next_change": {"commit": "ecb8ef0f52d0c562848f404e3094d8e87b154032", "changed_code": [{"header": "diff --git a/src/e2e/java/teammates/e2e/pageobjects/AdminSessionsPage.java b/src/e2e/java/teammates/e2e/pageobjects/AdminSessionsPage.java\nindex 6b0f3f79d1..a1ef8f2a9f 100644\n--- a/src/e2e/java/teammates/e2e/pageobjects/AdminSessionsPage.java\n+++ b/src/e2e/java/teammates/e2e/pageobjects/AdminSessionsPage.java\n", "chunk": "@@ -31,4 +37,42 @@ public class AdminSessionsPage extends AppPage {\n         verifyTableRowValues(sessionRow, expectedRowValues);\n     }\n \n+    public void toggleSessionFilter() {\n+        click(toggleFilterButton);\n+    }\n+\n+    public void waitForSessionFilterVisibility() {\n+        By by = By.id(\"filter-section\");\n+        waitForElementVisibility(by);\n+    }\n+\n+    public void setFilterStartDate(Instant instant) {\n+        WebElement timezoneElement = browser.driver.findElement(By.id(\"timezone\"));\n+        String timezone = getSelectedDropdownOptionText(timezoneElement);\n+\n+        WebElement startDate = browser.driver.findElement(By.id(\"start-date\"));\n+        fillTextBox(startDate, formatDateTimeForFilter(instant, ZoneId.of(timezone)));\n+    }\n+\n+    public void setFilterEndDate(Instant instant) {\n+        WebElement timezoneElement = browser.driver.findElement(By.id(\"timezone\"));\n+        String timezone = getSelectedDropdownOptionText(timezoneElement);\n+\n+        WebElement endDate = browser.driver.findElement(By.id(\"end-date\"));\n+        fillTextBox(endDate, formatDateTimeForFilter(instant, ZoneId.of(timezone)));\n+    }\n+\n+    public void filterSessions() {\n+        By by = By.id(\"btn-get-sessions\");\n+        waitForElementPresence(by);\n+        click(by);\n+        waitForPageToLoad();\n+    }\n+\n+    private String formatDateTimeForFilter(Instant instant, ZoneId timeZone) {\n+        return DateTimeFormatter\n+                .ofPattern(\"YYYY-MM-dd\")\n+                .format(instant.atZone(timeZone));\n+    }\n+\n }\n", "next_change": {"commit": "ec864a90bbb691d72a2738d7c4d5558e66b3345b", "changed_code": [{"header": "diff --git a/src/e2e/java/teammates/e2e/pageobjects/AdminSessionsPage.java b/src/e2e/java/teammates/e2e/pageobjects/AdminSessionsPage.java\nindex a1ef8f2a9f..8cfc09f932 100644\n--- a/src/e2e/java/teammates/e2e/pageobjects/AdminSessionsPage.java\n+++ b/src/e2e/java/teammates/e2e/pageobjects/AdminSessionsPage.java\n", "chunk": "@@ -75,4 +76,9 @@ public class AdminSessionsPage extends AppPage {\n                 .format(instant.atZone(timeZone));\n     }\n \n+    public String getSessionsTableTimezone() {\n+        WebElement timezoneElement = browser.driver.findElement(By.id(\"table-timezone\"));\n+        return getSelectedDropdownOptionText(timezoneElement);\n+    }\n+\n }\n", "next_change": null}]}}]}}]}}]}}]}}, {"oid": "00e9352bf71f91ac4d9c14035b8510361747ee46", "url": "https://github.com/TEAMMATES/teammates/commit/00e9352bf71f91ac4d9c14035b8510361747ee46", "message": "Abstract out checking of session rows to page object class", "committedDate": "2020-10-17T07:41:24Z", "type": "forcePushed"}, {"oid": "8154021ab829ca217ed19532a531c703282e37a8", "url": "https://github.com/TEAMMATES/teammates/commit/8154021ab829ca217ed19532a531c703282e37a8", "message": "Abstract out checking of session rows to page object class", "committedDate": "2020-10-17T08:32:43Z", "type": "forcePushed"}, {"oid": "8926f4f0b61ef7379bf0cb5750c81a3f4a75b225", "url": "https://github.com/TEAMMATES/teammates/commit/8926f4f0b61ef7379bf0cb5750c81a3f4a75b225", "message": "Move AutomatedSessionRemindersTest to new E2E test package", "committedDate": "2020-10-17T12:52:34Z", "type": "commit"}, {"oid": "cc7b6ee363a954760287e509b0c835ebef743280", "url": "https://github.com/TEAMMATES/teammates/commit/cc7b6ee363a954760287e509b0c835ebef743280", "message": "Add minimum E2E test for admin sessions page", "committedDate": "2020-10-17T12:52:34Z", "type": "commit"}, {"oid": "ecb8ef0f52d0c562848f404e3094d8e87b154032", "url": "https://github.com/TEAMMATES/teammates/commit/ecb8ef0f52d0c562848f404e3094d8e87b154032", "message": "Add test case for querying future session", "committedDate": "2020-10-17T12:52:34Z", "type": "commit"}, {"oid": "4aa04aeaace8f2eb17bd2d2fc4f49534d1848f6d", "url": "https://github.com/TEAMMATES/teammates/commit/4aa04aeaace8f2eb17bd2d2fc4f49534d1848f6d", "message": "Add minimum E2E test for admin accounts page", "committedDate": "2020-10-17T12:52:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk0MTQwOA==", "url": "https://github.com/TEAMMATES/teammates/pull/10784#discussion_r506941408", "body": "Actually the `getInstructor` method will get the `InstructorAttribute` from the datastore so it is not necessary to verify present again after you call `getInstructor`. I think you can either get the `InstructorAttribute` from `testData` instead or you can just skip the verification.", "bodyText": "Actually the getInstructor method will get the InstructorAttribute from the datastore so it is not necessary to verify present again after you call getInstructor. I think you can either get the InstructorAttribute from testData instead or you can just skip the verification.", "bodyHTML": "<p dir=\"auto\">Actually the <code>getInstructor</code> method will get the <code>InstructorAttribute</code> from the datastore so it is not necessary to verify present again after you call <code>getInstructor</code>. I think you can either get the <code>InstructorAttribute</code> from <code>testData</code> instead or you can just skip the verification.</p>", "author": "jtankw3", "createdAt": "2020-10-17T13:04:59Z", "path": "src/e2e/java/teammates/e2e/cases/e2e/AdminAccountsPageE2ETest.java", "diffHunk": "@@ -0,0 +1,96 @@\n+package teammates.e2e.cases.e2e;\n+\n+import org.testng.annotations.Test;\n+\n+import teammates.common.datatransfer.attributes.AccountAttributes;\n+import teammates.common.datatransfer.attributes.InstructorAttributes;\n+import teammates.common.datatransfer.attributes.StudentAttributes;\n+import teammates.common.util.AppUrl;\n+import teammates.common.util.Const;\n+import teammates.e2e.pageobjects.AdminAccountsPage;\n+import teammates.e2e.util.BackDoor;\n+\n+/**\n+ * SUT: {@link Const.WebPageURIs#ADMIN_ACCOUNTS_PAGE}.\n+ */\n+public class AdminAccountsPageE2ETest extends BaseE2ETestCase {\n+\n+    @Override\n+    protected void prepareTestData() {\n+        testData = loadDataBundle(\"/AdminAccountsPageE2ETest.json\");\n+        removeAndRestoreDataBundle(testData);\n+    }\n+\n+    @Test\n+    public void testAll() {\n+\n+        String googleId = \"AAMgtE2eT.instr2\";\n+\n+        ______TS(\"verify loaded data\");\n+\n+        AppUrl accountsPageUrl = createUrl(Const.WebPageURIs.ADMIN_ACCOUNTS_PAGE)\n+                .withParam(Const.ParamsNames.INSTRUCTOR_ID, googleId);\n+        AdminAccountsPage accountsPage = loginAdminToPage(accountsPageUrl, AdminAccountsPage.class);\n+\n+        AccountAttributes account = getAccount(googleId);\n+        accountsPage.verifyAccountDetails(account);\n+\n+        ______TS(\"action: remove instructor from course\");\n+\n+        String courseId = \"AAMgtE2eT.CS2103\";\n+        String email = \"AAMgtE2eT.instr2@gmail.tmt\";\n+\n+        InstructorAttributes instructor = getInstructor(courseId, email);\n+        verifyPresentInDatastore(instructor);", "originalCommit": "8154021ab829ca217ed19532a531c703282e37a8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "258427b99b0f9d815af913039fa649c4a1bd4156", "changed_code": [{"header": "diff --git a/src/e2e/java/teammates/e2e/cases/e2e/AdminAccountsPageE2ETest.java b/src/e2e/java/teammates/e2e/cases/e2e/AdminAccountsPageE2ETest.java\nindex fcacdb8f37..c68ceb6df7 100644\n--- a/src/e2e/java/teammates/e2e/cases/e2e/AdminAccountsPageE2ETest.java\n+++ b/src/e2e/java/teammates/e2e/cases/e2e/AdminAccountsPageE2ETest.java\n", "chunk": "@@ -37,10 +36,9 @@ public class AdminAccountsPageE2ETest extends BaseE2ETestCase {\n \n         ______TS(\"action: remove instructor from course\");\n \n-        String courseId = \"AAMgtE2eT.CS2103\";\n-        String email = \"AAMgtE2eT.instr2@gmail.tmt\";\n+        InstructorAttributes instructor = testData.instructors.get(\"AAMgtE2eT.instr2-AAMgtE2eT.CS2103\");\n+        String courseId = instructor.courseId;\n \n-        InstructorAttributes instructor = getInstructor(courseId, email);\n         verifyPresentInDatastore(instructor);\n         accountsPage.clickRemoveInstructorFromCourse(courseId);\n         accountsPage.verifyStatusMessage(\"Instructor is successfully deleted from course \\\"\" + courseId + \"\\\"\");\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk0MTUxOA==", "url": "https://github.com/TEAMMATES/teammates/pull/10784#discussion_r506941518", "body": "Same for `getStudent` and actually we do not have to import `BackDoor` here because of the `getStudent` method in `BaseTestCaseWithBackDoorApiAccess`", "bodyText": "Same for getStudent and actually we do not have to import BackDoor here because of the getStudent method in BaseTestCaseWithBackDoorApiAccess", "bodyHTML": "<p dir=\"auto\">Same for <code>getStudent</code> and actually we do not have to import <code>BackDoor</code> here because of the <code>getStudent</code> method in <code>BaseTestCaseWithBackDoorApiAccess</code></p>", "author": "jtankw3", "createdAt": "2020-10-17T13:06:16Z", "path": "src/e2e/java/teammates/e2e/cases/e2e/AdminAccountsPageE2ETest.java", "diffHunk": "@@ -0,0 +1,96 @@\n+package teammates.e2e.cases.e2e;\n+\n+import org.testng.annotations.Test;\n+\n+import teammates.common.datatransfer.attributes.AccountAttributes;\n+import teammates.common.datatransfer.attributes.InstructorAttributes;\n+import teammates.common.datatransfer.attributes.StudentAttributes;\n+import teammates.common.util.AppUrl;\n+import teammates.common.util.Const;\n+import teammates.e2e.pageobjects.AdminAccountsPage;\n+import teammates.e2e.util.BackDoor;\n+\n+/**\n+ * SUT: {@link Const.WebPageURIs#ADMIN_ACCOUNTS_PAGE}.\n+ */\n+public class AdminAccountsPageE2ETest extends BaseE2ETestCase {\n+\n+    @Override\n+    protected void prepareTestData() {\n+        testData = loadDataBundle(\"/AdminAccountsPageE2ETest.json\");\n+        removeAndRestoreDataBundle(testData);\n+    }\n+\n+    @Test\n+    public void testAll() {\n+\n+        String googleId = \"AAMgtE2eT.instr2\";\n+\n+        ______TS(\"verify loaded data\");\n+\n+        AppUrl accountsPageUrl = createUrl(Const.WebPageURIs.ADMIN_ACCOUNTS_PAGE)\n+                .withParam(Const.ParamsNames.INSTRUCTOR_ID, googleId);\n+        AdminAccountsPage accountsPage = loginAdminToPage(accountsPageUrl, AdminAccountsPage.class);\n+\n+        AccountAttributes account = getAccount(googleId);\n+        accountsPage.verifyAccountDetails(account);\n+\n+        ______TS(\"action: remove instructor from course\");\n+\n+        String courseId = \"AAMgtE2eT.CS2103\";\n+        String email = \"AAMgtE2eT.instr2@gmail.tmt\";\n+\n+        InstructorAttributes instructor = getInstructor(courseId, email);\n+        verifyPresentInDatastore(instructor);\n+        accountsPage.clickRemoveInstructorFromCourse(courseId);\n+        accountsPage.verifyStatusMessage(\"Instructor is successfully deleted from course \\\"\" + courseId + \"\\\"\");\n+        verifyAbsentInDatastore(instructor);\n+\n+        ______TS(\"action: remove student from course\");\n+\n+        StudentAttributes student = BackDoor.getStudent(courseId, email);\n+        verifyPresentInDatastore(student);", "originalCommit": "8154021ab829ca217ed19532a531c703282e37a8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "258427b99b0f9d815af913039fa649c4a1bd4156", "changed_code": [{"header": "diff --git a/src/e2e/java/teammates/e2e/cases/e2e/AdminAccountsPageE2ETest.java b/src/e2e/java/teammates/e2e/cases/e2e/AdminAccountsPageE2ETest.java\nindex fcacdb8f37..c68ceb6df7 100644\n--- a/src/e2e/java/teammates/e2e/cases/e2e/AdminAccountsPageE2ETest.java\n+++ b/src/e2e/java/teammates/e2e/cases/e2e/AdminAccountsPageE2ETest.java\n", "chunk": "@@ -48,7 +46,9 @@ public class AdminAccountsPageE2ETest extends BaseE2ETestCase {\n \n         ______TS(\"action: remove student from course\");\n \n-        StudentAttributes student = BackDoor.getStudent(courseId, email);\n+        StudentAttributes student = testData.students.get(\"AAMgtE2eT.instr2-student-CS2103\");\n+        courseId = student.course;\n+\n         verifyPresentInDatastore(student);\n         accountsPage.clickRemoveStudentFromCourse(courseId);\n         accountsPage.verifyStatusMessage(\"Student is successfully deleted from course \\\"\" + courseId + \"\\\"\");\n", "next_change": null}]}}, {"oid": "258427b99b0f9d815af913039fa649c4a1bd4156", "url": "https://github.com/TEAMMATES/teammates/commit/258427b99b0f9d815af913039fa649c4a1bd4156", "message": "Add test cases for removing/downgrading accounts", "committedDate": "2020-10-17T13:23:36Z", "type": "commit"}, {"oid": "ec864a90bbb691d72a2738d7c4d5558e66b3345b", "url": "https://github.com/TEAMMATES/teammates/commit/ec864a90bbb691d72a2738d7c4d5558e66b3345b", "message": "Add feature to choose time zone for times displayed in sessions table", "committedDate": "2020-10-17T13:23:36Z", "type": "commit"}, {"oid": "d278d62aff7748c79f6f32491cebcc01116545a6", "url": "https://github.com/TEAMMATES/teammates/commit/d278d62aff7748c79f6f32491cebcc01116545a6", "message": "Abstract out checking of session rows to page object class", "committedDate": "2020-10-17T13:23:36Z", "type": "commit"}, {"oid": "d278d62aff7748c79f6f32491cebcc01116545a6", "url": "https://github.com/TEAMMATES/teammates/commit/d278d62aff7748c79f6f32491cebcc01116545a6", "message": "Abstract out checking of session rows to page object class", "committedDate": "2020-10-17T13:23:36Z", "type": "forcePushed"}]}