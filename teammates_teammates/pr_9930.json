{"pr_number": 9930, "pr_title": "[#9382] Add Access Control Tests for UpdateFeedbackResponseAction", "pr_author": "madanalogy", "pr_createdAt": "2020-01-28T01:55:50Z", "pr_url": "https://github.com/TEAMMATES/teammates/pull/9930", "timeline": [{"oid": "e87225d631903af13ef59d59ba83ef1de860bdf6", "url": "https://github.com/TEAMMATES/teammates/commit/e87225d631903af13ef59d59ba83ef1de860bdf6", "message": "Prepare draft test code", "committedDate": "2020-01-28T01:37:06Z", "type": "commit"}, {"oid": "619d77e8f694433c41d9f8e973fdd82595be568f", "url": "https://github.com/TEAMMATES/teammates/commit/619d77e8f694433c41d9f8e973fdd82595be568f", "message": "Implement generic access control tests", "committedDate": "2020-01-29T12:45:26Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzA2NTk0MQ==", "url": "https://github.com/TEAMMATES/teammates/pull/9930#discussion_r373065941", "body": "verifyCannotAccess(studentAccessOtherTeamParams)", "bodyText": "verifyCannotAccess(studentAccessOtherTeamParams)", "bodyHTML": "<p dir=\"auto\">verifyCannotAccess(studentAccessOtherTeamParams)</p>", "author": "ChooJeremy", "createdAt": "2020-01-30T16:47:33Z", "path": "src/test/java/teammates/test/cases/webapi/UpdateFeedbackResponseActionTest.java", "diffHunk": "@@ -158,7 +215,273 @@ public void testExecute_instructorFeedbackSubmissionMcqGenerateOptionsForTeams_s\n     @Test\n     @Override\n     protected void testAccessControl() throws Exception {\n-        // TODO\n+\n+        ______TS(\"wrong giver type\");\n+\n+        loginAsStudent(student1InCourse1.getGoogleId());\n+\n+        String[] wrongGiverTypeParams = new String[] {\n+                Const.ParamsNames.INTENT, Intent.INSTRUCTOR_SUBMISSION.toString(),\n+                Const.ParamsNames.FEEDBACK_RESPONSE_ID, typicalResponse.getId(),\n+        };\n+\n+        verifyCannotAccess(wrongGiverTypeParams);\n+\n+        ______TS(\"preview mode, cannot access\");\n+\n+        loginAsInstructor(instructor1OfCourse1.getGoogleId());\n+\n+        String[] previewParams = new String[] {\n+                Const.ParamsNames.INTENT, Intent.INSTRUCTOR_SUBMISSION.toString(),\n+                Const.ParamsNames.FEEDBACK_RESPONSE_ID, typicalResponse.getId(),\n+                Const.ParamsNames.PREVIEWAS, instructor1OfCourse1.email,\n+        };\n+\n+        verifyCannotAccess(previewParams);\n+\n+        ______TS(\"response in session not open, cannot access\");\n+\n+        loginAsInstructor(instructor1OfCourse1.getGoogleId());\n+\n+        assertFalse(closedSession.isOpened());\n+\n+        String[] sessionNotOpenParams = new String[] {\n+                Const.ParamsNames.INTENT, Intent.INSTRUCTOR_SUBMISSION.toString(),\n+                Const.ParamsNames.FEEDBACK_RESPONSE_ID, responseInClosedSession.getId(),\n+        };\n+\n+        verifyCannotAccess(sessionNotOpenParams);\n+\n+        ______TS(\"Response contains question not intended shown to instructor, \"\n+                + \"moderated instructor should not be accessible\");\n+\n+        loginAsInstructor(instructor1OfCourse1.googleId);\n+\n+        assertFalse(logic.getFeedbackQuestion(typicalResponse2.getFeedbackQuestionId())\n+                .getShowResponsesTo().contains(FeedbackParticipantType.INSTRUCTORS));\n+\n+        String[] invalidModeratedInstructorSubmissionParams = new String[] {\n+                Const.ParamsNames.INTENT, Intent.INSTRUCTOR_SUBMISSION.toString(),\n+                Const.ParamsNames.FEEDBACK_RESPONSE_ID, typicalResponse2.getId(),\n+                Const.ParamsNames.FEEDBACK_SESSION_MODERATED_PERSON, instructor1OfCourse1.getEmail(),\n+        };\n+\n+        verifyCannotAccess(invalidModeratedInstructorSubmissionParams);\n+\n+        ______TS(\"non-existent feedback response\");\n+\n+        loginAsStudent(student1InCourse1.getGoogleId());\n+\n+        String[] nonExistParams = new String[] {\n+                Const.ParamsNames.INTENT, Intent.STUDENT_SUBMISSION.toString(),\n+                Const.ParamsNames.FEEDBACK_RESPONSE_ID, \"randomNonExistId\",\n+        };\n+\n+        assertThrows(EntityNotFoundException.class, () -> getAction(nonExistParams).checkAccessControl());\n+\n+        ______TS(\"Unknown intent, should not be accessible\");\n+\n+        loginAsInstructor(instructor2OfCourse1.getGoogleId());\n+\n+        String[] unknownIntentParams = new String[] {\n+                Const.ParamsNames.INTENT, Intent.FULL_DETAIL.toString(),\n+                Const.ParamsNames.FEEDBACK_RESPONSE_ID, typicalResponse3.getId(),\n+        };\n+\n+        assertThrows(InvalidHttpParameterException.class, () -> getAction(unknownIntentParams).checkAccessControl());\n+    }\n+\n+    @Test\n+    protected void testAccessControl_giverNotModeratedStudent_inaccessible() {\n+\n+        ______TS(\"Instructor moderates student's response, but response not given by moderated student, \"\n+                + \"should not be accessible\");\n+\n+        loginAsInstructor(instructor1OfCourse1.googleId);\n+\n+        assertEquals(FeedbackParticipantType.STUDENTS,\n+                logic.getFeedbackQuestion(testModerateResponse.getFeedbackQuestionId()).getGiverType());\n+        assertNotEquals(student1InCourse1.getEmail(), testModerateResponse.getGiver());\n+\n+        // send update request\n+        FeedbackResponseUpdateRequest updateRequest = new FeedbackResponseUpdateRequest();\n+        updateRequest.setQuestionType(FeedbackQuestionType.MCQ);\n+        updateRequest.setRecipientIdentifier(instructor1OfCourse1.getEmail());\n+        FeedbackMcqResponseDetails newDetails = new FeedbackMcqResponseDetails();\n+        newDetails.setAnswer(\"TEAM_NOT_EXIST\");\n+        updateRequest.setResponseDetails(newDetails);\n+\n+        String[] moderatedStudentSubmissionParams = new String[] {\n+                Const.ParamsNames.INTENT, Intent.STUDENT_SUBMISSION.toString(),\n+                Const.ParamsNames.FEEDBACK_RESPONSE_ID, testModerateResponse.getId(),\n+                Const.ParamsNames.FEEDBACK_SESSION_MODERATED_PERSON, student1InCourse1.getEmail(),\n+        };\n+\n+        UpdateFeedbackResponseAction a = getAction(updateRequest, moderatedStudentSubmissionParams);\n+        assertThrows(UnauthorizedAccessException.class, a::checkAccessControl);\n+    }\n+\n+    @Test\n+    protected void testAccessControl_studentAccessOtherStudent_inaccessible() throws Exception {\n+\n+        ______TS(\"Student intends to access other person's response, should not be accessible\");\n+\n+        loginAsStudent(student2InCourse1.getGoogleId());\n+\n+        assertEquals(FeedbackParticipantType.STUDENTS,\n+                logic.getFeedbackQuestion(typicalResponse.getFeedbackQuestionId()).getGiverType());\n+        assertNotEquals(student2InCourse1.getEmail(), typicalResponse.getGiver());\n+\n+        // send update request\n+        FeedbackResponseUpdateRequest updateRequest = new FeedbackResponseUpdateRequest();\n+        updateRequest.setQuestionType(FeedbackQuestionType.MCQ);\n+        updateRequest.setRecipientIdentifier(typicalResponse.getRecipient());\n+        FeedbackMcqResponseDetails newDetails = new FeedbackMcqResponseDetails();\n+        newDetails.setAnswer(\"TEAM_NOT_EXIST\");\n+        updateRequest.setResponseDetails(newDetails);\n+\n+        String[] studentAccessOtherPersonParams = new String[] {\n+                Const.ParamsNames.INTENT, Intent.STUDENT_SUBMISSION.toString(),\n+                Const.ParamsNames.FEEDBACK_RESPONSE_ID, typicalResponse.getId(),\n+        };\n+\n+        UpdateFeedbackResponseAction a = getAction(updateRequest, studentAccessOtherPersonParams);\n+        assertThrows(UnauthorizedAccessException.class, a::checkAccessControl);\n+    }\n+\n+    @Test\n+    protected void testAccessControl_studentAccessOtherTeam_inaccessible() {\n+\n+        ______TS(\"Student intends to access other team's response, should not be accessible\");\n+\n+        loginAsStudent(student5InCourse1.getGoogleId());\n+\n+        assertEquals(FeedbackParticipantType.TEAMS,\n+                logic.getFeedbackQuestion(typicalResponse2.getFeedbackQuestionId()).getGiverType());\n+        assertNotEquals(student5InCourse1.getTeam(), typicalResponse2.getGiver());\n+\n+        // send update request\n+        FeedbackResponseUpdateRequest updateRequest = new FeedbackResponseUpdateRequest();\n+        updateRequest.setQuestionType(FeedbackQuestionType.MCQ);\n+        updateRequest.setRecipientIdentifier(student5InCourse1.getEmail());\n+        FeedbackMcqResponseDetails newDetails = new FeedbackMcqResponseDetails();\n+        newDetails.setAnswer(\"TEAM_NOT_EXIST\");\n+        updateRequest.setResponseDetails(newDetails);\n+\n+        String[] studentAccessOtherTeamParams = new String[] {\n+                Const.ParamsNames.INTENT, Intent.STUDENT_SUBMISSION.toString(),\n+                Const.ParamsNames.FEEDBACK_RESPONSE_ID, typicalResponse2.getId(),\n+        };\n+\n+        UpdateFeedbackResponseAction a = getAction(updateRequest, studentAccessOtherTeamParams);\n+        assertThrows(UnauthorizedAccessException.class, a::checkAccessControl);", "originalCommit": "a1bca228674adeeff92cdaf4ff31cad633f1a459", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzI4NTYyMw==", "url": "https://github.com/TEAMMATES/teammates/pull/9930#discussion_r373285623", "bodyText": "I did this initially because verifyCannotAccess() can't take in an UpdateRequest as a parameter. But now that I think about it I could overload the method thanks for the inspiration! :)", "author": "madanalogy", "createdAt": "2020-01-31T01:58:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzA2NTk0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzA2NzU1NQ==", "url": "https://github.com/TEAMMATES/teammates/pull/9930#discussion_r373067555", "body": "Already logged in?", "bodyText": "Already logged in?", "bodyHTML": "<p dir=\"auto\">Already logged in?</p>", "author": "ChooJeremy", "createdAt": "2020-01-30T16:50:27Z", "path": "src/test/java/teammates/test/cases/webapi/UpdateFeedbackResponseActionTest.java", "diffHunk": "@@ -158,7 +215,273 @@ public void testExecute_instructorFeedbackSubmissionMcqGenerateOptionsForTeams_s\n     @Test\n     @Override\n     protected void testAccessControl() throws Exception {\n-        // TODO\n+\n+        ______TS(\"wrong giver type\");\n+\n+        loginAsStudent(student1InCourse1.getGoogleId());\n+\n+        String[] wrongGiverTypeParams = new String[] {\n+                Const.ParamsNames.INTENT, Intent.INSTRUCTOR_SUBMISSION.toString(),\n+                Const.ParamsNames.FEEDBACK_RESPONSE_ID, typicalResponse.getId(),\n+        };\n+\n+        verifyCannotAccess(wrongGiverTypeParams);\n+\n+        ______TS(\"preview mode, cannot access\");\n+\n+        loginAsInstructor(instructor1OfCourse1.getGoogleId());\n+\n+        String[] previewParams = new String[] {\n+                Const.ParamsNames.INTENT, Intent.INSTRUCTOR_SUBMISSION.toString(),\n+                Const.ParamsNames.FEEDBACK_RESPONSE_ID, typicalResponse.getId(),\n+                Const.ParamsNames.PREVIEWAS, instructor1OfCourse1.email,\n+        };\n+\n+        verifyCannotAccess(previewParams);\n+\n+        ______TS(\"response in session not open, cannot access\");\n+\n+        loginAsInstructor(instructor1OfCourse1.getGoogleId());", "originalCommit": "a1bca228674adeeff92cdaf4ff31cad633f1a459", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzI4NjIxMg==", "url": "https://github.com/TEAMMATES/teammates/pull/9930#discussion_r373286212", "bodyText": "Yea this would make more sense when I separate the test cases into their individual methods haha", "author": "madanalogy", "createdAt": "2020-01-31T02:01:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzA2NzU1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzA3MDI4NA==", "url": "https://github.com/TEAMMATES/teammates/pull/9930#discussion_r373070284", "body": "I think it would be good to enwrap this code into a helper method, since you're using it a lot. You can add things like recipient identifier as parameters and reuse the method instead of copy and pasting this.", "bodyText": "I think it would be good to enwrap this code into a helper method, since you're using it a lot. You can add things like recipient identifier as parameters and reuse the method instead of copy and pasting this.", "bodyHTML": "<p dir=\"auto\">I think it would be good to enwrap this code into a helper method, since you're using it a lot. You can add things like recipient identifier as parameters and reuse the method instead of copy and pasting this.</p>", "author": "ChooJeremy", "createdAt": "2020-01-30T16:55:11Z", "path": "src/test/java/teammates/test/cases/webapi/UpdateFeedbackResponseActionTest.java", "diffHunk": "@@ -158,7 +215,273 @@ public void testExecute_instructorFeedbackSubmissionMcqGenerateOptionsForTeams_s\n     @Test\n     @Override\n     protected void testAccessControl() throws Exception {\n-        // TODO\n+\n+        ______TS(\"wrong giver type\");\n+\n+        loginAsStudent(student1InCourse1.getGoogleId());\n+\n+        String[] wrongGiverTypeParams = new String[] {\n+                Const.ParamsNames.INTENT, Intent.INSTRUCTOR_SUBMISSION.toString(),\n+                Const.ParamsNames.FEEDBACK_RESPONSE_ID, typicalResponse.getId(),\n+        };\n+\n+        verifyCannotAccess(wrongGiverTypeParams);\n+\n+        ______TS(\"preview mode, cannot access\");\n+\n+        loginAsInstructor(instructor1OfCourse1.getGoogleId());\n+\n+        String[] previewParams = new String[] {\n+                Const.ParamsNames.INTENT, Intent.INSTRUCTOR_SUBMISSION.toString(),\n+                Const.ParamsNames.FEEDBACK_RESPONSE_ID, typicalResponse.getId(),\n+                Const.ParamsNames.PREVIEWAS, instructor1OfCourse1.email,\n+        };\n+\n+        verifyCannotAccess(previewParams);\n+\n+        ______TS(\"response in session not open, cannot access\");\n+\n+        loginAsInstructor(instructor1OfCourse1.getGoogleId());\n+\n+        assertFalse(closedSession.isOpened());\n+\n+        String[] sessionNotOpenParams = new String[] {\n+                Const.ParamsNames.INTENT, Intent.INSTRUCTOR_SUBMISSION.toString(),\n+                Const.ParamsNames.FEEDBACK_RESPONSE_ID, responseInClosedSession.getId(),\n+        };\n+\n+        verifyCannotAccess(sessionNotOpenParams);\n+\n+        ______TS(\"Response contains question not intended shown to instructor, \"\n+                + \"moderated instructor should not be accessible\");\n+\n+        loginAsInstructor(instructor1OfCourse1.googleId);\n+\n+        assertFalse(logic.getFeedbackQuestion(typicalResponse2.getFeedbackQuestionId())\n+                .getShowResponsesTo().contains(FeedbackParticipantType.INSTRUCTORS));\n+\n+        String[] invalidModeratedInstructorSubmissionParams = new String[] {\n+                Const.ParamsNames.INTENT, Intent.INSTRUCTOR_SUBMISSION.toString(),\n+                Const.ParamsNames.FEEDBACK_RESPONSE_ID, typicalResponse2.getId(),\n+                Const.ParamsNames.FEEDBACK_SESSION_MODERATED_PERSON, instructor1OfCourse1.getEmail(),\n+        };\n+\n+        verifyCannotAccess(invalidModeratedInstructorSubmissionParams);\n+\n+        ______TS(\"non-existent feedback response\");\n+\n+        loginAsStudent(student1InCourse1.getGoogleId());\n+\n+        String[] nonExistParams = new String[] {\n+                Const.ParamsNames.INTENT, Intent.STUDENT_SUBMISSION.toString(),\n+                Const.ParamsNames.FEEDBACK_RESPONSE_ID, \"randomNonExistId\",\n+        };\n+\n+        assertThrows(EntityNotFoundException.class, () -> getAction(nonExistParams).checkAccessControl());\n+\n+        ______TS(\"Unknown intent, should not be accessible\");\n+\n+        loginAsInstructor(instructor2OfCourse1.getGoogleId());\n+\n+        String[] unknownIntentParams = new String[] {\n+                Const.ParamsNames.INTENT, Intent.FULL_DETAIL.toString(),\n+                Const.ParamsNames.FEEDBACK_RESPONSE_ID, typicalResponse3.getId(),\n+        };\n+\n+        assertThrows(InvalidHttpParameterException.class, () -> getAction(unknownIntentParams).checkAccessControl());\n+    }\n+\n+    @Test\n+    protected void testAccessControl_giverNotModeratedStudent_inaccessible() {\n+\n+        ______TS(\"Instructor moderates student's response, but response not given by moderated student, \"\n+                + \"should not be accessible\");\n+\n+        loginAsInstructor(instructor1OfCourse1.googleId);\n+\n+        assertEquals(FeedbackParticipantType.STUDENTS,\n+                logic.getFeedbackQuestion(testModerateResponse.getFeedbackQuestionId()).getGiverType());\n+        assertNotEquals(student1InCourse1.getEmail(), testModerateResponse.getGiver());\n+\n+        // send update request\n+        FeedbackResponseUpdateRequest updateRequest = new FeedbackResponseUpdateRequest();\n+        updateRequest.setQuestionType(FeedbackQuestionType.MCQ);\n+        updateRequest.setRecipientIdentifier(instructor1OfCourse1.getEmail());\n+        FeedbackMcqResponseDetails newDetails = new FeedbackMcqResponseDetails();\n+        newDetails.setAnswer(\"TEAM_NOT_EXIST\");\n+        updateRequest.setResponseDetails(newDetails);\n+\n+        String[] moderatedStudentSubmissionParams = new String[] {\n+                Const.ParamsNames.INTENT, Intent.STUDENT_SUBMISSION.toString(),\n+                Const.ParamsNames.FEEDBACK_RESPONSE_ID, testModerateResponse.getId(),\n+                Const.ParamsNames.FEEDBACK_SESSION_MODERATED_PERSON, student1InCourse1.getEmail(),\n+        };\n+\n+        UpdateFeedbackResponseAction a = getAction(updateRequest, moderatedStudentSubmissionParams);\n+        assertThrows(UnauthorizedAccessException.class, a::checkAccessControl);\n+    }\n+\n+    @Test\n+    protected void testAccessControl_studentAccessOtherStudent_inaccessible() throws Exception {\n+\n+        ______TS(\"Student intends to access other person's response, should not be accessible\");\n+\n+        loginAsStudent(student2InCourse1.getGoogleId());\n+\n+        assertEquals(FeedbackParticipantType.STUDENTS,\n+                logic.getFeedbackQuestion(typicalResponse.getFeedbackQuestionId()).getGiverType());\n+        assertNotEquals(student2InCourse1.getEmail(), typicalResponse.getGiver());\n+\n+        // send update request\n+        FeedbackResponseUpdateRequest updateRequest = new FeedbackResponseUpdateRequest();\n+        updateRequest.setQuestionType(FeedbackQuestionType.MCQ);\n+        updateRequest.setRecipientIdentifier(typicalResponse.getRecipient());\n+        FeedbackMcqResponseDetails newDetails = new FeedbackMcqResponseDetails();\n+        newDetails.setAnswer(\"TEAM_NOT_EXIST\");\n+        updateRequest.setResponseDetails(newDetails);\n+\n+        String[] studentAccessOtherPersonParams = new String[] {\n+                Const.ParamsNames.INTENT, Intent.STUDENT_SUBMISSION.toString(),\n+                Const.ParamsNames.FEEDBACK_RESPONSE_ID, typicalResponse.getId(),\n+        };\n+\n+        UpdateFeedbackResponseAction a = getAction(updateRequest, studentAccessOtherPersonParams);\n+        assertThrows(UnauthorizedAccessException.class, a::checkAccessControl);\n+    }\n+\n+    @Test\n+    protected void testAccessControl_studentAccessOtherTeam_inaccessible() {\n+\n+        ______TS(\"Student intends to access other team's response, should not be accessible\");\n+\n+        loginAsStudent(student5InCourse1.getGoogleId());\n+\n+        assertEquals(FeedbackParticipantType.TEAMS,\n+                logic.getFeedbackQuestion(typicalResponse2.getFeedbackQuestionId()).getGiverType());\n+        assertNotEquals(student5InCourse1.getTeam(), typicalResponse2.getGiver());\n+\n+        // send update request\n+        FeedbackResponseUpdateRequest updateRequest = new FeedbackResponseUpdateRequest();\n+        updateRequest.setQuestionType(FeedbackQuestionType.MCQ);\n+        updateRequest.setRecipientIdentifier(student5InCourse1.getEmail());\n+        FeedbackMcqResponseDetails newDetails = new FeedbackMcqResponseDetails();\n+        newDetails.setAnswer(\"TEAM_NOT_EXIST\");\n+        updateRequest.setResponseDetails(newDetails);\n+\n+        String[] studentAccessOtherTeamParams = new String[] {\n+                Const.ParamsNames.INTENT, Intent.STUDENT_SUBMISSION.toString(),\n+                Const.ParamsNames.FEEDBACK_RESPONSE_ID, typicalResponse2.getId(),\n+        };\n+\n+        UpdateFeedbackResponseAction a = getAction(updateRequest, studentAccessOtherTeamParams);\n+        assertThrows(UnauthorizedAccessException.class, a::checkAccessControl);\n+    }\n+\n+    @Test\n+    protected void testAccessControl_instructorAccessOtherGiver_inaccessible() {\n+\n+        ______TS(\"Instructor intends to access other person's response, should not be accessible\");\n+\n+        loginAsInstructor(instructor2OfCourse1.getGoogleId());\n+\n+        assertEquals(FeedbackParticipantType.SELF,\n+                logic.getFeedbackQuestion(typicalResponse3.getFeedbackQuestionId()).getGiverType());\n+        assertNotEquals(instructor2OfCourse1.getEmail(), typicalResponse3.getGiver());\n+\n+        // send update request\n+        FeedbackResponseUpdateRequest updateRequest = new FeedbackResponseUpdateRequest();\n+        updateRequest.setQuestionType(FeedbackQuestionType.MCQ);\n+        updateRequest.setRecipientIdentifier(instructor2OfCourse1.getEmail());\n+        FeedbackMcqResponseDetails newDetails = new FeedbackMcqResponseDetails();\n+        newDetails.setAnswer(\"TEAM_NOT_EXIST\");\n+        updateRequest.setResponseDetails(newDetails);\n+\n+        String[] instructorAccessOtherPersonParams = new String[] {\n+                Const.ParamsNames.INTENT, Intent.INSTRUCTOR_SUBMISSION.toString(),\n+                Const.ParamsNames.FEEDBACK_RESPONSE_ID, typicalResponse3.getId(),\n+        };\n+\n+        UpdateFeedbackResponseAction a = getAction(updateRequest, instructorAccessOtherPersonParams);\n+        assertThrows(UnauthorizedAccessException.class, a::checkAccessControl);\n     }\n \n+    @Test\n+    protected void testAccessControl_instructorAccessOwnResponse_accessible() {\n+\n+        ______TS(\"Instructor intends to access own response, should be accessible\");\n+\n+        loginAsInstructor(instructor1OfCourse1.getGoogleId());\n+\n+        assertEquals(instructor1OfCourse1.getEmail(), typicalResponse3.getGiver());\n+\n+        // send update request\n+        FeedbackResponseUpdateRequest updateRequest = new FeedbackResponseUpdateRequest();\n+        updateRequest.setQuestionType(FeedbackQuestionType.MCQ);\n+        updateRequest.setRecipientIdentifier(typicalResponse3.getRecipient());\n+        FeedbackMcqResponseDetails newDetails = new FeedbackMcqResponseDetails();\n+        newDetails.setAnswer(\"TEAM_NOT_EXIST\");\n+        updateRequest.setResponseDetails(newDetails);", "originalCommit": "a1bca228674adeeff92cdaf4ff31cad633f1a459", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc5NDcxMA==", "url": "https://github.com/TEAMMATES/teammates/pull/9930#discussion_r373794710", "body": "Similar to the other tests, assert that a feedback response with ID \"randomNonExistId\" doesn't exist.", "bodyText": "Similar to the other tests, assert that a feedback response with ID \"randomNonExistId\" doesn't exist.", "bodyHTML": "<p dir=\"auto\">Similar to the other tests, assert that a feedback response with ID \"randomNonExistId\" doesn't exist.</p>", "author": "ChooJeremy", "createdAt": "2020-02-01T18:32:10Z", "path": "src/test/java/teammates/test/cases/webapi/UpdateFeedbackResponseActionTest.java", "diffHunk": "@@ -155,10 +201,263 @@ public void testExecute_instructorFeedbackSubmissionMcqGenerateOptionsForTeams_s\n         AssertHelper.assertContains(Const.FeedbackQuestion.MCQ_ERROR_INVALID_OPTION, e.getMessage());\n     }\n \n+    private FeedbackResponseUpdateRequest getUpdateRequest(String recipientIdentifier) {\n+        FeedbackResponseUpdateRequest updateRequest = new FeedbackResponseUpdateRequest();\n+        updateRequest.setQuestionType(FeedbackQuestionType.MCQ);\n+        updateRequest.setRecipientIdentifier(recipientIdentifier);\n+        FeedbackMcqResponseDetails newDetails = new FeedbackMcqResponseDetails();\n+        newDetails.setAnswer(\"TEAM_NOT_EXIST\");\n+        updateRequest.setResponseDetails(newDetails);\n+        return updateRequest;\n+    }\n+\n     @Test\n     @Override\n     protected void testAccessControl() throws Exception {\n-        // TODO\n+        // See individual test cases below\n+    }\n+\n+    @Test\n+    protected void testAccessControl_wrongGiver_inaccessible() {\n+\n+        ______TS(\"wrong giver type\");\n+\n+        loginAsStudent(student1InCourse1.getGoogleId());\n+\n+        String[] wrongGiverTypeParams = new String[] {\n+                Const.ParamsNames.INTENT, Intent.INSTRUCTOR_SUBMISSION.toString(),\n+                Const.ParamsNames.FEEDBACK_RESPONSE_ID, typicalResponse.getId(),\n+        };\n+\n+        verifyCannotAccess(wrongGiverTypeParams);\n+    }\n+\n+    @Test\n+    protected void testAccessControl_previewMode_inaccessible() {\n+\n+        ______TS(\"preview mode, cannot access\");\n+\n+        loginAsInstructor(instructor1OfCourse1.getGoogleId());\n+\n+        String[] previewParams = new String[] {\n+                Const.ParamsNames.INTENT, Intent.INSTRUCTOR_SUBMISSION.toString(),\n+                Const.ParamsNames.FEEDBACK_RESPONSE_ID, typicalResponse.getId(),\n+                Const.ParamsNames.PREVIEWAS, instructor1OfCourse1.email,\n+        };\n+\n+        verifyCannotAccess(previewParams);\n+\n+    }\n+\n+    @Test\n+    protected void testAccessControl_responseSessionNotOpen_inaccessible() {\n+\n+        ______TS(\"response in session not open, cannot access\");\n+\n+        loginAsInstructor(instructor1OfCourse1.getGoogleId());\n+\n+        assertFalse(closedSession.isOpened());\n+\n+        String[] sessionNotOpenParams = new String[] {\n+                Const.ParamsNames.INTENT, Intent.INSTRUCTOR_SUBMISSION.toString(),\n+                Const.ParamsNames.FEEDBACK_RESPONSE_ID, responseInClosedSession.getId(),\n+        };\n+\n+        verifyCannotAccess(sessionNotOpenParams);\n+    }\n+\n+    @Test\n+    protected void testAccessControl_containsQuestionNotForInstructor_inaccessible() {\n+\n+        ______TS(\"Response contains question not intended shown to instructor, \"\n+                + \"moderated instructor should not be accessible\");\n+\n+        loginAsInstructor(instructor1OfCourse1.googleId);\n+\n+        assertFalse(logic.getFeedbackQuestion(typicalResponse2.getFeedbackQuestionId())\n+                .getShowResponsesTo().contains(FeedbackParticipantType.INSTRUCTORS));\n+\n+        String[] invalidModeratedInstructorSubmissionParams = new String[] {\n+                Const.ParamsNames.INTENT, Intent.INSTRUCTOR_SUBMISSION.toString(),\n+                Const.ParamsNames.FEEDBACK_RESPONSE_ID, typicalResponse2.getId(),\n+                Const.ParamsNames.FEEDBACK_SESSION_MODERATED_PERSON, instructor1OfCourse1.getEmail(),\n+        };\n+\n+        verifyCannotAccess(invalidModeratedInstructorSubmissionParams);\n+    }\n+\n+    @Test\n+    protected void testAccessControl_noFeedbackResponse_inaccessible() {\n+\n+        ______TS(\"non-existent feedback response\");\n+\n+        loginAsStudent(student1InCourse1.getGoogleId());\n+\n+        String[] nonExistParams = new String[] {\n+                Const.ParamsNames.INTENT, Intent.STUDENT_SUBMISSION.toString(),\n+                Const.ParamsNames.FEEDBACK_RESPONSE_ID, \"randomNonExistId\",", "originalCommit": "ca4950d373cec823cc061f740b311b107717bb62", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkxOTcwNQ==", "url": "https://github.com/TEAMMATES/teammates/pull/9930#discussion_r373919705", "bodyText": "Just checking my understanding on this, but isn't this already being done by this test case in the assertThrows() method call?", "author": "madanalogy", "createdAt": "2020-02-03T04:38:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc5NDcxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzk0NTA5Mw==", "url": "https://github.com/TEAMMATES/teammates/pull/9930#discussion_r373945093", "bodyText": "Not exactly, the assertThrows method call verifies that the method says that the feedback response doesn't exist. However, we want to verify that this is indeed correct (i.e. what if there's actually a feedback response ID with \"randomNonExistId\"? This is similar to your testAccessControl_studentAccessOtherTeam_inaccessible method, where before the check you verify that (1) the question is indeed for responding as a team and (2) the team giving the response is not the team of the logged in student.", "author": "ChooJeremy", "createdAt": "2020-02-03T06:58:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc5NDcxMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc5NDk0NQ==", "url": "https://github.com/TEAMMATES/teammates/pull/9930#discussion_r373794945", "body": "Let's try to reduce the amount of class variables used, where possible.\r\nclosedSession (and responseInClosedSession) is only used in one method (testAccessControl_responseSessionNotOpen_inaccessible), we can refactor all the code into there. \r\nAlso let's have more descriptive names for the responses. Instead of typicalResponse, how about \"student1ResponseToStudent1\".\r\n", "bodyText": "Let's try to reduce the amount of class variables used, where possible.\nclosedSession (and responseInClosedSession) is only used in one method (testAccessControl_responseSessionNotOpen_inaccessible), we can refactor all the code into there.\nAlso let's have more descriptive names for the responses. Instead of typicalResponse, how about \"student1ResponseToStudent1\".", "bodyHTML": "<p dir=\"auto\">Let's try to reduce the amount of class variables used, where possible.<br>\nclosedSession (and responseInClosedSession) is only used in one method (testAccessControl_responseSessionNotOpen_inaccessible), we can refactor all the code into there.<br>\nAlso let's have more descriptive names for the responses. Instead of typicalResponse, how about \"student1ResponseToStudent1\".</p>", "author": "ChooJeremy", "createdAt": "2020-02-01T18:36:52Z", "path": "src/test/java/teammates/test/cases/webapi/UpdateFeedbackResponseActionTest.java", "diffHunk": "@@ -25,6 +27,18 @@\n  */\n public class UpdateFeedbackResponseActionTest extends BaseActionTest<UpdateFeedbackResponseAction> {\n \n+    private StudentAttributes student1InCourse1;\n+    private StudentAttributes student2InCourse1;\n+    private StudentAttributes student5InCourse1;\n+    private InstructorAttributes instructor2OfCourse1;\n+    private InstructorAttributes instructor1OfCourse1;\n+    private FeedbackResponseAttributes typicalResponse;\n+    private FeedbackResponseAttributes testModerateResponse;\n+    private FeedbackResponseAttributes typicalResponse2;\n+    private FeedbackResponseAttributes typicalResponse3;\n+    private FeedbackResponseAttributes responseInClosedSession;\n+    private FeedbackSessionAttributes closedSession;", "originalCommit": "ca4950d373cec823cc061f740b311b107717bb62", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ4ODYzNA==", "url": "https://github.com/TEAMMATES/teammates/pull/9930#discussion_r374488634", "body": "```suggestion\r\nverifyHttpParameterFailure(missingResponseIdParams);\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertThrows(NullHttpParameterException.class, () -> getAction(missingResponseIdParams).checkAccessControl());\n          \n          \n            \n            verifyHttpParameterFailure(missingResponseIdParams);", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"><span class=\"x x-first\">        assertThrows(</span><span class=\"pl-smi x\">NullHttpParameterException</span><span class=\"pl-k x\">.</span><span class=\"x\">class, () </span><span class=\"pl-k x\">-</span><span class=\"pl-k x\">&gt;</span><span class=\"x x-last\"> getAction(</span>missingResponseIdParams<span class=\"x x-first\">)</span><span class=\"pl-k x\">.</span><span class=\"x x-last\">checkAccessControl()</span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\"><span class=\"x x-first x-last\">verifyHttpParameterFailure(</span>missingResponseIdParams);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "ChooJeremy", "createdAt": "2020-02-04T06:06:11Z", "path": "src/test/java/teammates/test/cases/webapi/UpdateFeedbackResponseActionTest.java", "diffHunk": "@@ -301,6 +302,34 @@ protected void testAccessControl_noFeedbackResponse_inaccessible() {\n         assertThrows(EntityNotFoundException.class, () -> getAction(nonExistParams).checkAccessControl());\n     }\n \n+    @Test\n+    protected void testAccessControl_missingIntent_inaccessible() {\n+\n+        ______TS(\"missing intent response parameters\");\n+\n+        loginAsStudent(student1InCourse1.getGoogleId());\n+\n+        String[] missingIntentParams = new String[] {\n+                Const.ParamsNames.FEEDBACK_RESPONSE_ID, \"randomNonExistId\",\n+        };\n+\n+        assertThrows(EntityNotFoundException.class, () -> getAction(missingIntentParams).checkAccessControl());\n+    }\n+\n+    @Test\n+    protected void testAccessControl_missingResponseId_inaccessible() {\n+\n+        ______TS(\"missing response id parameters\");\n+\n+        loginAsStudent(student1InCourse1.getGoogleId());\n+\n+        String[] missingResponseIdParams = new String[] {\n+                Const.ParamsNames.INTENT, Intent.STUDENT_SUBMISSION.toString(),\n+        };\n+\n+        assertThrows(NullHttpParameterException.class, () -> getAction(missingResponseIdParams).checkAccessControl());", "originalCommit": "52581d7a03f61357c4e1c6fcff3537f084fb202c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ4OTAyMw==", "url": "https://github.com/TEAMMATES/teammates/pull/9930#discussion_r374489023", "body": "A bit of a renaming, since this effectively comes down to a permission issue\r\n```suggestion\r\n        ______TS(\"Instructor attempts to edit student's response with appropriate permission, should be accessible\");\r\n```", "bodyText": "A bit of a renaming, since this effectively comes down to a permission issue\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    ______TS(\"Student intends to access own response, but logged in as instructor, should be accessible\");\n          \n          \n            \n                    ______TS(\"Instructor attempts to edit student's response with appropriate permission, should be accessible\");", "bodyHTML": "<p dir=\"auto\">A bit of a renaming, since this effectively comes down to a permission issue</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        ______TS(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"x x-first x-last\">Student intends</span> to <span class=\"x x-first x-last\">access own</span> response<span class=\"x x-first x-last\">, but logged in as instructor</span>, should be accessible<span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        ______TS(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"x x-first x-last\">Instructor attempts</span> to <span class=\"x x-first x-last\">edit student's</span> response<span class=\"x x-first x-last\"> with appropriate permission</span>, should be accessible<span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "ChooJeremy", "createdAt": "2020-02-04T06:08:05Z", "path": "src/test/java/teammates/test/cases/webapi/UpdateFeedbackResponseActionTest.java", "diffHunk": "@@ -449,15 +497,58 @@ protected void testAccessControl_studentAccessOwnResponse_accessible() {\n \n         loginAsStudent(student1InCourse1.getGoogleId());\n \n-        assertEquals(student1InCourse1.getEmail(), typicalResponse.getGiver());\n+        assertEquals(student1InCourse1.getEmail(), student1ResponseToStudent1.getGiver());\n \n-        FeedbackResponseUpdateRequest updateRequest = getUpdateRequest(typicalResponse.getRecipient());\n+        FeedbackResponseUpdateRequest updateRequest = getUpdateRequest(student1ResponseToStudent1.getRecipient());\n \n         String[] studentAccessOwnPersonParams = new String[] {\n                 Const.ParamsNames.INTENT, Intent.STUDENT_SUBMISSION.toString(),\n-                Const.ParamsNames.FEEDBACK_RESPONSE_ID, typicalResponse.getId(),\n+                Const.ParamsNames.FEEDBACK_RESPONSE_ID, student1ResponseToStudent1.getId(),\n         };\n \n         verifyCanAccess(updateRequest, studentAccessOwnPersonParams);\n     }\n+\n+    @Test\n+    protected void testAccessControl_instructorSubmitStudentResponse_accessible() {\n+\n+        ______TS(\"Student intends to access own response, but logged in as instructor, should be accessible\");", "originalCommit": "52581d7a03f61357c4e1c6fcff3537f084fb202c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ5MDgzNA==", "url": "https://github.com/TEAMMATES/teammates/pull/9930#discussion_r374490834", "body": "Use a valid ID for this other than randomNonExistId. Then you shouldn't get the EntityNotFoundException and should instead properly get NullHttpParameterException.", "bodyText": "Use a valid ID for this other than randomNonExistId. Then you shouldn't get the EntityNotFoundException and should instead properly get NullHttpParameterException.", "bodyHTML": "<p dir=\"auto\">Use a valid ID for this other than randomNonExistId. Then you shouldn't get the EntityNotFoundException and should instead properly get NullHttpParameterException.</p>", "author": "ChooJeremy", "createdAt": "2020-02-04T06:16:58Z", "path": "src/test/java/teammates/test/cases/webapi/UpdateFeedbackResponseActionTest.java", "diffHunk": "@@ -301,6 +302,34 @@ protected void testAccessControl_noFeedbackResponse_inaccessible() {\n         assertThrows(EntityNotFoundException.class, () -> getAction(nonExistParams).checkAccessControl());\n     }\n \n+    @Test\n+    protected void testAccessControl_missingIntent_inaccessible() {\n+\n+        ______TS(\"missing intent response parameters\");\n+\n+        loginAsStudent(student1InCourse1.getGoogleId());\n+\n+        String[] missingIntentParams = new String[] {\n+                Const.ParamsNames.FEEDBACK_RESPONSE_ID, \"randomNonExistId\",", "originalCommit": "52581d7a03f61357c4e1c6fcff3537f084fb202c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ5NDY4NQ==", "url": "https://github.com/TEAMMATES/teammates/pull/9930#discussion_r374494685", "body": "```suggestion\r\n        ______TS(\"Instructor attempts to edit student's response, but without appropriate permission, \"\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    ______TS(\"Student intends to access own response, but logged in as instructor without permission, \"\n          \n          \n            \n                    ______TS(\"Instructor attempts to edit student's response, but without appropriate permission, \"", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        ______TS(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"x x-first x-last\">Student intends</span> to <span class=\"x x-first x-last\">access own</span> response, but <span class=\"x x-first x-last\">logged in as instructor </span>without permission, <span class=\"pl-pds\">\"</span></span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        ______TS(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"x x-first x-last\">Instructor attempts</span> to <span class=\"x x-first x-last\">edit student's</span> response, but without<span class=\"x x-first x-last\"> appropriate</span> permission, <span class=\"pl-pds\">\"</span></span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "ChooJeremy", "createdAt": "2020-02-04T06:33:36Z", "path": "src/test/java/teammates/test/cases/webapi/UpdateFeedbackResponseActionTest.java", "diffHunk": "@@ -449,15 +497,58 @@ protected void testAccessControl_studentAccessOwnResponse_accessible() {\n \n         loginAsStudent(student1InCourse1.getGoogleId());\n \n-        assertEquals(student1InCourse1.getEmail(), typicalResponse.getGiver());\n+        assertEquals(student1InCourse1.getEmail(), student1ResponseToStudent1.getGiver());\n \n-        FeedbackResponseUpdateRequest updateRequest = getUpdateRequest(typicalResponse.getRecipient());\n+        FeedbackResponseUpdateRequest updateRequest = getUpdateRequest(student1ResponseToStudent1.getRecipient());\n \n         String[] studentAccessOwnPersonParams = new String[] {\n                 Const.ParamsNames.INTENT, Intent.STUDENT_SUBMISSION.toString(),\n-                Const.ParamsNames.FEEDBACK_RESPONSE_ID, typicalResponse.getId(),\n+                Const.ParamsNames.FEEDBACK_RESPONSE_ID, student1ResponseToStudent1.getId(),\n         };\n \n         verifyCanAccess(updateRequest, studentAccessOwnPersonParams);\n     }\n+\n+    @Test\n+    protected void testAccessControl_instructorSubmitStudentResponse_accessible() {\n+\n+        ______TS(\"Student intends to access own response, but logged in as instructor, should be accessible\");\n+\n+        loginAsInstructor(instructor1OfCourse1.getGoogleId());\n+\n+        assertEquals(student1InCourse1.getEmail(), student1ResponseToStudent1.getGiver());\n+\n+        FeedbackResponseUpdateRequest updateRequest = getUpdateRequest(student1ResponseToStudent1.getRecipient());\n+\n+        String[] studentAccessOwnPersonParams = new String[] {\n+                Const.ParamsNames.INTENT, Intent.STUDENT_SUBMISSION.toString(),\n+                Const.ParamsNames.FEEDBACK_RESPONSE_ID, student1ResponseToStudent1.getId(),\n+                Const.ParamsNames.FEEDBACK_SESSION_MODERATED_PERSON, student1InCourse1.getEmail(),\n+        };\n+\n+        verifyCanAccess(updateRequest, studentAccessOwnPersonParams);\n+    }\n+\n+    @Test\n+    protected void testAccessControl_instructorSubmitStudentResponseNoPermission_inaccessible() {\n+\n+        ______TS(\"Student intends to access own response, but logged in as instructor without permission, \"", "originalCommit": "52581d7a03f61357c4e1c6fcff3537f084fb202c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a25561032de605c96c1056de1506ea7650b56e65", "url": "https://github.com/TEAMMATES/teammates/commit/a25561032de605c96c1056de1506ea7650b56e65", "message": "Implement access control tests with update requests", "committedDate": "2020-02-04T10:41:14Z", "type": "commit"}, {"oid": "b830087fcf3d91333b8242439a19d69f12df05dc", "url": "https://github.com/TEAMMATES/teammates/commit/b830087fcf3d91333b8242439a19d69f12df05dc", "message": "Refactor test helpers and test cases", "committedDate": "2020-02-04T10:41:37Z", "type": "commit"}, {"oid": "ae64e09fce7d743123ba6b84d9812e6d26851168", "url": "https://github.com/TEAMMATES/teammates/commit/ae64e09fce7d743123ba6b84d9812e6d26851168", "message": "Add additional test cases", "committedDate": "2020-02-04T10:41:51Z", "type": "commit"}, {"oid": "ae64e09fce7d743123ba6b84d9812e6d26851168", "url": "https://github.com/TEAMMATES/teammates/commit/ae64e09fce7d743123ba6b84d9812e6d26851168", "message": "Add additional test cases", "committedDate": "2020-02-04T10:41:51Z", "type": "forcePushed"}, {"oid": "0aba0486482fe7951288c7cead14e23f7a3d0d4c", "url": "https://github.com/TEAMMATES/teammates/commit/0aba0486482fe7951288c7cead14e23f7a3d0d4c", "message": "Merge branch 'master' into 9382-test-java", "committedDate": "2020-02-04T10:43:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDcyNzg1Mw==", "url": "https://github.com/TEAMMATES/teammates/pull/9930#discussion_r374727853", "body": "This is only utilized in `testAccessControl_studentAccessOtherStudent_inaccessible`.", "bodyText": "This is only utilized in testAccessControl_studentAccessOtherStudent_inaccessible.", "bodyHTML": "<p dir=\"auto\">This is only utilized in <code>testAccessControl_studentAccessOtherStudent_inaccessible</code>.</p>", "author": "ChooJeremy", "createdAt": "2020-02-04T15:09:52Z", "path": "src/test/java/teammates/test/cases/webapi/UpdateFeedbackResponseActionTest.java", "diffHunk": "@@ -25,6 +27,16 @@\n  */\n public class UpdateFeedbackResponseActionTest extends BaseActionTest<UpdateFeedbackResponseAction> {\n \n+    private StudentAttributes student1InCourse1;\n+    private StudentAttributes student2InCourse1;", "originalCommit": "0aba0486482fe7951288c7cead14e23f7a3d0d4c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTc3MTI5MA==", "url": "https://github.com/TEAMMATES/teammates/pull/9930#discussion_r375771290", "bodyText": "It's also needed in testAccessControl_giverNotModeratedStudent_inaccessible because it's required by testModerateResponse which in turn requires two additional students of which neither should be the moderated person", "author": "madanalogy", "createdAt": "2020-02-06T11:04:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDcyNzg1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDcyODMzNA==", "url": "https://github.com/TEAMMATES/teammates/pull/9930#discussion_r374728334", "body": "This is only utilized in `testAccessControl_studentAccessOtherTeam_inaccessible`", "bodyText": "This is only utilized in testAccessControl_studentAccessOtherTeam_inaccessible", "bodyHTML": "<p dir=\"auto\">This is only utilized in <code>testAccessControl_studentAccessOtherTeam_inaccessible</code></p>", "author": "ChooJeremy", "createdAt": "2020-02-04T15:10:34Z", "path": "src/test/java/teammates/test/cases/webapi/UpdateFeedbackResponseActionTest.java", "diffHunk": "@@ -25,6 +27,16 @@\n  */\n public class UpdateFeedbackResponseActionTest extends BaseActionTest<UpdateFeedbackResponseAction> {\n \n+    private StudentAttributes student1InCourse1;\n+    private StudentAttributes student2InCourse1;\n+    private StudentAttributes student5InCourse1;", "originalCommit": "0aba0486482fe7951288c7cead14e23f7a3d0d4c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTc3MTQ4NA==", "url": "https://github.com/TEAMMATES/teammates/pull/9930#discussion_r375771484", "bodyText": "It's also needed in testAccessControl_giverNotModeratedStudent_inaccessible because it's required by testModerateResponse which in turn requires two additional students of which neither should be the moderated person\n\nSame requirement here as above", "author": "madanalogy", "createdAt": "2020-02-06T11:04:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDcyODMzNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDcyODc4OQ==", "url": "https://github.com/TEAMMATES/teammates/pull/9930#discussion_r374728789", "body": "This is only utilized in `testAccessControl_instructorAccessOtherGiver_inaccessible`. It's also used in unknown intent, but any other instructor / student will do too.", "bodyText": "This is only utilized in testAccessControl_instructorAccessOtherGiver_inaccessible. It's also used in unknown intent, but any other instructor / student will do too.", "bodyHTML": "<p dir=\"auto\">This is only utilized in <code>testAccessControl_instructorAccessOtherGiver_inaccessible</code>. It's also used in unknown intent, but any other instructor / student will do too.</p>", "author": "ChooJeremy", "createdAt": "2020-02-04T15:11:15Z", "path": "src/test/java/teammates/test/cases/webapi/UpdateFeedbackResponseActionTest.java", "diffHunk": "@@ -25,6 +27,16 @@\n  */\n public class UpdateFeedbackResponseActionTest extends BaseActionTest<UpdateFeedbackResponseAction> {\n \n+    private StudentAttributes student1InCourse1;\n+    private StudentAttributes student2InCourse1;\n+    private StudentAttributes student5InCourse1;\n+    private InstructorAttributes instructor2OfCourse1;", "originalCommit": "0aba0486482fe7951288c7cead14e23f7a3d0d4c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDcyOTQ2Mw==", "url": "https://github.com/TEAMMATES/teammates/pull/9930#discussion_r374729463", "body": "This is only utilized in `testAccessControl_giverNotModeratedStudent_inaccessible`", "bodyText": "This is only utilized in testAccessControl_giverNotModeratedStudent_inaccessible", "bodyHTML": "<p dir=\"auto\">This is only utilized in <code>testAccessControl_giverNotModeratedStudent_inaccessible</code></p>", "author": "ChooJeremy", "createdAt": "2020-02-04T15:12:13Z", "path": "src/test/java/teammates/test/cases/webapi/UpdateFeedbackResponseActionTest.java", "diffHunk": "@@ -25,6 +27,16 @@\n  */\n public class UpdateFeedbackResponseActionTest extends BaseActionTest<UpdateFeedbackResponseAction> {\n \n+    private StudentAttributes student1InCourse1;\n+    private StudentAttributes student2InCourse1;\n+    private StudentAttributes student5InCourse1;\n+    private InstructorAttributes instructor2OfCourse1;\n+    private InstructorAttributes instructor1OfCourse1;\n+    private FeedbackResponseAttributes student1ResponseToStudent1;\n+    private FeedbackResponseAttributes testModerateResponse;", "originalCommit": "0aba0486482fe7951288c7cead14e23f7a3d0d4c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDc1MTgwNw==", "url": "https://github.com/TEAMMATES/teammates/pull/9930#discussion_r374751807", "body": "This is used in `testAccessControl_containsQuestionNotForInstructor_inaccessible` and `testAccessControl_studentAccessOtherTeam_inaccessible`, can `testAccessControl_containsQuestionNotForInstructor_inaccessible` use some other response? ", "bodyText": "This is used in testAccessControl_containsQuestionNotForInstructor_inaccessible and testAccessControl_studentAccessOtherTeam_inaccessible, can testAccessControl_containsQuestionNotForInstructor_inaccessible use some other response?", "bodyHTML": "<p dir=\"auto\">This is used in <code>testAccessControl_containsQuestionNotForInstructor_inaccessible</code> and <code>testAccessControl_studentAccessOtherTeam_inaccessible</code>, can <code>testAccessControl_containsQuestionNotForInstructor_inaccessible</code> use some other response?</p>", "author": "ChooJeremy", "createdAt": "2020-02-04T15:45:37Z", "path": "src/test/java/teammates/test/cases/webapi/UpdateFeedbackResponseActionTest.java", "diffHunk": "@@ -25,6 +27,16 @@\n  */\n public class UpdateFeedbackResponseActionTest extends BaseActionTest<UpdateFeedbackResponseAction> {\n \n+    private StudentAttributes student1InCourse1;\n+    private StudentAttributes student2InCourse1;\n+    private StudentAttributes student5InCourse1;\n+    private InstructorAttributes instructor2OfCourse1;\n+    private InstructorAttributes instructor1OfCourse1;\n+    private FeedbackResponseAttributes student1ResponseToStudent1;\n+    private FeedbackResponseAttributes testModerateResponse;\n+    private FeedbackResponseAttributes student4ResponseToTeam;", "originalCommit": "0aba0486482fe7951288c7cead14e23f7a3d0d4c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTc2ODI4Nw==", "url": "https://github.com/TEAMMATES/teammates/pull/9930#discussion_r375768287", "bodyText": "Hmm the assertion fails when I use student1ResponseToStudent1 or instructor1ResponseToAll. I've resorted to declaring the variable locally anyway for easier reference.", "author": "madanalogy", "createdAt": "2020-02-06T10:57:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDc1MTgwNw=="}], "type": "inlineReview"}, {"oid": "83432c923f38e6c6388fe35fd01c7c092c2b9bb6", "url": "https://github.com/TEAMMATES/teammates/commit/83432c923f38e6c6388fe35fd01c7c092c2b9bb6", "message": "Refactor static variables to local scope", "committedDate": "2020-02-06T11:11:24Z", "type": "commit"}, {"oid": "ab343c0ed5cf20a802edb2f3952a3c8f2ca0e93f", "url": "https://github.com/TEAMMATES/teammates/commit/ab343c0ed5cf20a802edb2f3952a3c8f2ca0e93f", "message": "Merge branch 'master' into 9382-test-java", "committedDate": "2020-02-06T11:12:21Z", "type": "commit"}, {"oid": "ab80f9a22a36af320644d8efb9871a7f1bab9ffb", "url": "https://github.com/TEAMMATES/teammates/commit/ab80f9a22a36af320644d8efb9871a7f1bab9ffb", "message": "Merge branch 'master' into 9382-test-java", "committedDate": "2020-02-07T01:05:16Z", "type": "commit"}, {"oid": "21995a1d89b4d7ab983e5b8d3aba8e2244855bcc", "url": "https://github.com/TEAMMATES/teammates/commit/21995a1d89b4d7ab983e5b8d3aba8e2244855bcc", "message": "Edit containsQuestionNotForInstructor for clarity", "committedDate": "2020-02-07T13:08:37Z", "type": "commit"}, {"oid": "21995a1d89b4d7ab983e5b8d3aba8e2244855bcc", "url": "https://github.com/TEAMMATES/teammates/commit/21995a1d89b4d7ab983e5b8d3aba8e2244855bcc", "message": "Edit containsQuestionNotForInstructor for clarity", "committedDate": "2020-02-07T13:08:37Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzI0MTg1Nw==", "url": "https://github.com/TEAMMATES/teammates/pull/9930#discussion_r377241857", "body": "The type is too specific for `BaseActionTest`? (i.e. what if we want to add this method for `FeedbackResponseCreateRequest`, `FeedbackSessionCreateRequest` etc.)", "bodyText": "The type is too specific for BaseActionTest? (i.e. what if we want to add this method for FeedbackResponseCreateRequest, FeedbackSessionCreateRequest etc.)", "bodyHTML": "<p dir=\"auto\">The type is too specific for <code>BaseActionTest</code>? (i.e. what if we want to add this method for <code>FeedbackResponseCreateRequest</code>, <code>FeedbackSessionCreateRequest</code> etc.)</p>", "author": "xpdavid", "createdAt": "2020-02-10T18:35:37Z", "path": "src/test/java/teammates/test/cases/webapi/BaseActionTest.java", "diffHunk": "@@ -433,12 +434,22 @@ protected void verifyCanAccess(String... params) {\n         c.checkAccessControl();\n     }\n \n+    protected void verifyCanAccess(FeedbackResponseUpdateRequest updateRequest, String... params) {", "originalCommit": "21995a1d89b4d7ab983e5b8d3aba8e2244855bcc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQyMTgyMA==", "url": "https://github.com/TEAMMATES/teammates/pull/9930#discussion_r377421820", "bodyText": "Updated to now take in a BasicRequest instead", "author": "madanalogy", "createdAt": "2020-02-11T02:23:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzI0MTg1Nw=="}], "type": "inlineReview"}, {"oid": "b7b7bbdf7fceb23baedbf0c7f31324d76d5eddc0", "url": "https://github.com/TEAMMATES/teammates/commit/b7b7bbdf7fceb23baedbf0c7f31324d76d5eddc0", "message": "Refactor verifyAccess method signatures to more generic request", "committedDate": "2020-02-11T02:21:53Z", "type": "commit"}]}