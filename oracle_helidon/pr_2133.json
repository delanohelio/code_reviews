{"pr_number": 2133, "pr_title": "Buffer single-byte writes in MultiFromOutputStream for better performance", "pr_author": "spericas", "pr_createdAt": "2020-07-06T13:53:52Z", "pr_url": "https://github.com/oracle/helidon/pull/2133", "timeline": [{"oid": "183c3051f9a6d6775e2e507ea5467342553bf159", "url": "https://github.com/oracle/helidon/commit/183c3051f9a6d6775e2e507ea5467342553bf159", "message": "Enhanced implementation of MultiFromOutputStream to buffer bytes when written one at a time to avoid publishing single-byte data chunks. The logic remains the same for byte array writes. Some new tests.\n\nSigned-off-by: Santiago Pericasgeertsen <santiago.pericasgeertsen@oracle.com>", "committedDate": "2020-07-01T12:40:26Z", "type": "commit"}, {"oid": "698b69d726f8203fb032eb074e704c70828bada3", "url": "https://github.com/oracle/helidon/commit/698b69d726f8203fb032eb074e704c70828bada3", "message": "Merge branch 'master' into streaming-writes", "committedDate": "2020-07-06T13:25:20Z", "type": "commit"}, {"oid": "33dcac3f383034b129f9b9e96ed4f0318ec08e0b", "url": "https://github.com/oracle/helidon/commit/33dcac3f383034b129f9b9e96ed4f0318ec08e0b", "message": "Improved comments.", "committedDate": "2020-07-06T13:49:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTMzNjE2OA==", "url": "https://github.com/oracle/helidon/pull/2133#discussion_r451336168", "body": "```java\r\npublisher.write(0);         // first\r\nsubscriber.assertEmpty();\r\npublisher.flush();             // second\r\nsubscriber.assertItemCount(2);\r\n\r\n```", "bodyText": "publisher.write(0);         // first\nsubscriber.assertEmpty();\npublisher.flush();             // second\nsubscriber.assertItemCount(2);", "bodyHTML": "<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"publisher.write(0);         // first\nsubscriber.assertEmpty();\npublisher.flush();             // second\nsubscriber.assertItemCount(2);\n\"><pre>publisher<span class=\"pl-k\">.</span>write(<span class=\"pl-c1\">0</span>);         <span class=\"pl-c\"><span class=\"pl-c\">//</span> first</span>\nsubscriber<span class=\"pl-k\">.</span>assertEmpty();\npublisher<span class=\"pl-k\">.</span>flush();             <span class=\"pl-c\"><span class=\"pl-c\">//</span> second</span>\nsubscriber<span class=\"pl-k\">.</span>assertItemCount(<span class=\"pl-c1\">2</span>);\n</pre></div>", "author": "danielkec", "createdAt": "2020-07-08T07:25:04Z", "path": "common/reactive/src/test/java/io/helidon/common/reactive/MultiFromOutputStreamTest.java", "diffHunk": "@@ -167,6 +167,37 @@ public void onNext(ByteBuffer item) {\n         publisher.close();\n     }\n \n+    @Test\n+    void testByteAtTimeBuffer() throws IOException {\n+        MultiFromOutputStream publisher = IoMulti.createOutputStream();\n+        TestSubscriber<ByteBuffer> subscriber = new TestSubscriber<>();\n+        publisher.subscribe(subscriber);\n+        subscriber.requestMax();\n+        publisher.write(0);\n+        publisher.write(0);\n+        publisher.write(0);         // first\n+        publisher.flush();             // second\n+        long size = subscriber.getItems().stream().count();\n+        assertThat(size, is(equalTo(2L)));", "originalCommit": "33dcac3f383034b129f9b9e96ed4f0318ec08e0b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM0OTgyNw==", "url": "https://github.com/oracle/helidon/pull/2133#discussion_r451349827", "body": "```java\r\n        subscriber.requestMax();\r\n        publisher.write(0);                  // first\r\n        subscriber.assertEmpty();\r\n        publisher.write(new byte[] { 0 });   // second\r\n        subscriber.assertItemCount(2);\r\n        publisher.write(0);\r\n        publisher.write(0);                  // third\r\n        subscriber.assertItemCount(2);\r\n        publisher.write(new byte[] { 0 });   // fourth\r\n        subscriber.assertItemCount(4);\r\n        publisher.write(0);                  // fifth\r\n        subscriber.assertItemCount(4);\r\n        publisher.close();\r\n        subscriber.assertItemCount(5).assertComplete();\r\n```", "bodyText": "subscriber.requestMax();\n        publisher.write(0);                  // first\n        subscriber.assertEmpty();\n        publisher.write(new byte[] { 0 });   // second\n        subscriber.assertItemCount(2);\n        publisher.write(0);\n        publisher.write(0);                  // third\n        subscriber.assertItemCount(2);\n        publisher.write(new byte[] { 0 });   // fourth\n        subscriber.assertItemCount(4);\n        publisher.write(0);                  // fifth\n        subscriber.assertItemCount(4);\n        publisher.close();\n        subscriber.assertItemCount(5).assertComplete();", "bodyHTML": "<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"        subscriber.requestMax();\n        publisher.write(0);                  // first\n        subscriber.assertEmpty();\n        publisher.write(new byte[] { 0 });   // second\n        subscriber.assertItemCount(2);\n        publisher.write(0);\n        publisher.write(0);                  // third\n        subscriber.assertItemCount(2);\n        publisher.write(new byte[] { 0 });   // fourth\n        subscriber.assertItemCount(4);\n        publisher.write(0);                  // fifth\n        subscriber.assertItemCount(4);\n        publisher.close();\n        subscriber.assertItemCount(5).assertComplete();\"><pre>        subscriber<span class=\"pl-k\">.</span>requestMax();\n        publisher<span class=\"pl-k\">.</span>write(<span class=\"pl-c1\">0</span>);                  <span class=\"pl-c\"><span class=\"pl-c\">//</span> first</span>\n        subscriber<span class=\"pl-k\">.</span>assertEmpty();\n        publisher<span class=\"pl-k\">.</span>write(<span class=\"pl-k\">new</span> <span class=\"pl-smi\">byte</span>[] { <span class=\"pl-c1\">0</span> });   <span class=\"pl-c\"><span class=\"pl-c\">//</span> second</span>\n        subscriber<span class=\"pl-k\">.</span>assertItemCount(<span class=\"pl-c1\">2</span>);\n        publisher<span class=\"pl-k\">.</span>write(<span class=\"pl-c1\">0</span>);\n        publisher<span class=\"pl-k\">.</span>write(<span class=\"pl-c1\">0</span>);                  <span class=\"pl-c\"><span class=\"pl-c\">//</span> third</span>\n        subscriber<span class=\"pl-k\">.</span>assertItemCount(<span class=\"pl-c1\">2</span>);\n        publisher<span class=\"pl-k\">.</span>write(<span class=\"pl-k\">new</span> <span class=\"pl-smi\">byte</span>[] { <span class=\"pl-c1\">0</span> });   <span class=\"pl-c\"><span class=\"pl-c\">//</span> fourth</span>\n        subscriber<span class=\"pl-k\">.</span>assertItemCount(<span class=\"pl-c1\">4</span>);\n        publisher<span class=\"pl-k\">.</span>write(<span class=\"pl-c1\">0</span>);                  <span class=\"pl-c\"><span class=\"pl-c\">//</span> fifth</span>\n        subscriber<span class=\"pl-k\">.</span>assertItemCount(<span class=\"pl-c1\">4</span>);\n        publisher<span class=\"pl-k\">.</span>close();\n        subscriber<span class=\"pl-k\">.</span>assertItemCount(<span class=\"pl-c1\">5</span>)<span class=\"pl-k\">.</span>assertComplete();</pre></div>", "author": "danielkec", "createdAt": "2020-07-08T07:49:59Z", "path": "common/reactive/src/test/java/io/helidon/common/reactive/MultiFromOutputStreamTest.java", "diffHunk": "@@ -167,6 +167,37 @@ public void onNext(ByteBuffer item) {\n         publisher.close();\n     }\n \n+    @Test\n+    void testByteAtTimeBuffer() throws IOException {\n+        MultiFromOutputStream publisher = IoMulti.createOutputStream();\n+        TestSubscriber<ByteBuffer> subscriber = new TestSubscriber<>();\n+        publisher.subscribe(subscriber);\n+        subscriber.requestMax();\n+        publisher.write(0);\n+        publisher.write(0);\n+        publisher.write(0);         // first\n+        publisher.flush();             // second\n+        long size = subscriber.getItems().stream().count();\n+        assertThat(size, is(equalTo(2L)));\n+    }\n+\n+    @Test\n+    void testByteAtTimeBufferArray() throws IOException {\n+        MultiFromOutputStream publisher = IoMulti.createOutputStream();\n+        TestSubscriber<ByteBuffer> subscriber = new TestSubscriber<>();\n+        publisher.subscribe(subscriber);\n+        subscriber.requestMax();\n+        publisher.write(0);                // first\n+        publisher.write(new byte[] { 0 });    // second\n+        publisher.write(0);\n+        publisher.write(0);                // third\n+        publisher.write(new byte[] { 0 });    // fourth\n+        publisher.write(0);                // fifth\n+        publisher.close();", "originalCommit": "33dcac3f383034b129f9b9e96ed4f0318ec08e0b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "15ac63f781cd777d8f5f7580d3db15617e45ce72", "url": "https://github.com/oracle/helidon/commit/15ac63f781cd777d8f5f7580d3db15617e45ce72", "message": "Improvements to unit tests.\n\nSigned-off-by: Santiago Pericasgeertsen <santiago.pericasgeertsen@oracle.com>", "committedDate": "2020-07-08T19:29:31Z", "type": "commit"}]}