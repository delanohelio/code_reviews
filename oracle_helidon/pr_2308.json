{"pr_number": 2308, "pr_title": "Update MediaType, lazy non known type, read-only parameters map", "pr_author": "romain-grecourt", "pr_createdAt": "2020-09-01T01:59:53Z", "pr_url": "https://github.com/oracle/helidon/pull/2308", "timeline": [{"oid": "0c6200ec668afbd9e117fc6b9d5ae9d831809b3f", "url": "https://github.com/oracle/helidon/commit/0c6200ec668afbd9e117fc6b9d5ae9d831809b3f", "message": "Update MediaType.create\n - create the non known type with a supplier, instead of always creating them\n - return a known type only if there is no parameters\n - change MediaType.KNOWN_TYPES from Map<MediaType,MediaType> to Map<String, MediaType>\n - build a key as a String of the form type/subtype,\n   this is a minor optimization for known types that avoids creating a MediaType instance as a key\n\nMake parameters a read-only map\n - Optimize for empty parameters and use Map.of()\n - otherwise wrap it with Collections.unmodifiableMap()", "committedDate": "2020-09-01T01:56:46Z", "type": "commit"}, {"oid": "aa2b7b77f14669a3a52a41d330450451acb820d0", "url": "https://github.com/oracle/helidon/commit/aa2b7b77f14669a3a52a41d330450451acb820d0", "message": "More micro optimizations to justify the first changes:\n - avoid creating too many objects in MediaType.create: replace Optional and Supplier with plain ifs.\n - update the code that creates the MediaType concstants for the known types: replace createContentType() with\n   a new constructor to avoid 3 static method calls (createContentType(), create(), builder()) and build object\n   creation.", "committedDate": "2020-09-01T18:57:05Z", "type": "commit"}, {"oid": "d6177fd3a76254f102ac80a9de06d22fd2d5dbd2", "url": "https://github.com/oracle/helidon/commit/d6177fd3a76254f102ac80a9de06d22fd2d5dbd2", "message": "use a static initializer block to initialize all the MediaType constants", "committedDate": "2020-09-01T19:53:08Z", "type": "commit"}, {"oid": "f0bbba5b1196377a55837107c2f6ff72bc143abf", "url": "https://github.com/oracle/helidon/commit/f0bbba5b1196377a55837107c2f6ff72bc143abf", "message": "use a local map while initializing", "committedDate": "2020-09-01T20:11:20Z", "type": "commit"}, {"oid": "73d65bfaa97327cb27a0c7402550a91c77036f15", "url": "https://github.com/oracle/helidon/commit/73d65bfaa97327cb27a0c7402550a91c77036f15", "message": "make KNOWN_TYPES an unmodifiable map", "committedDate": "2020-09-01T20:15:51Z", "type": "commit"}, {"oid": "73d65bfaa97327cb27a0c7402550a91c77036f15", "url": "https://github.com/oracle/helidon/commit/73d65bfaa97327cb27a0c7402550a91c77036f15", "message": "make KNOWN_TYPES an unmodifiable map", "committedDate": "2020-09-01T20:15:51Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQxMTI2Ng==", "url": "https://github.com/oracle/helidon/pull/2308#discussion_r481411266", "body": "You can avoid the `HashMap` creation in probably the vast majority of cases by testing `parameters.isEmpty()` first.  Then, you can move line 363 up as well and simplify.  e.g.:\r\n```\r\nif (parameters.isEmpty()) {\r\n  mediaType = KNOWN_TYPES.get(normalizedType + '/' + normalizedSubtype);\r\n} else {\r\n  Map<String, String> normalizedParameters = new HashMap<>();\r\n  for (Map.Entry<String, String> entry : parameters.entrySet()) {\r\n    String attribute = Tokenizer.normalize(TOKEN_MATCHER, entry.getKey());\r\n    normalizedParameters.put(attribute, normalizeParameterValue(attribute, entry.getValue()));\r\n  }\r\n}\r\nif (mediaType == null) {\r\n  mediaType = MediaType.builder()\r\n    .type(normalizedType)\r\n    .subtype(normalizedSubtype)\r\n    .parameters(normalizedParameters)\r\n    .build();\r\n}\r\n```\r\n", "bodyText": "You can avoid the HashMap creation in probably the vast majority of cases by testing parameters.isEmpty() first.  Then, you can move line 363 up as well and simplify.  e.g.:\nif (parameters.isEmpty()) {\n  mediaType = KNOWN_TYPES.get(normalizedType + '/' + normalizedSubtype);\n} else {\n  Map<String, String> normalizedParameters = new HashMap<>();\n  for (Map.Entry<String, String> entry : parameters.entrySet()) {\n    String attribute = Tokenizer.normalize(TOKEN_MATCHER, entry.getKey());\n    normalizedParameters.put(attribute, normalizeParameterValue(attribute, entry.getValue()));\n  }\n}\nif (mediaType == null) {\n  mediaType = MediaType.builder()\n    .type(normalizedType)\n    .subtype(normalizedSubtype)\n    .parameters(normalizedParameters)\n    .build();\n}", "bodyHTML": "<p dir=\"auto\">You can avoid the <code>HashMap</code> creation in probably the vast majority of cases by testing <code>parameters.isEmpty()</code> first.  Then, you can move line 363 up as well and simplify.  e.g.:</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"if (parameters.isEmpty()) {\n  mediaType = KNOWN_TYPES.get(normalizedType + '/' + normalizedSubtype);\n} else {\n  Map&lt;String, String&gt; normalizedParameters = new HashMap&lt;&gt;();\n  for (Map.Entry&lt;String, String&gt; entry : parameters.entrySet()) {\n    String attribute = Tokenizer.normalize(TOKEN_MATCHER, entry.getKey());\n    normalizedParameters.put(attribute, normalizeParameterValue(attribute, entry.getValue()));\n  }\n}\nif (mediaType == null) {\n  mediaType = MediaType.builder()\n    .type(normalizedType)\n    .subtype(normalizedSubtype)\n    .parameters(normalizedParameters)\n    .build();\n}\"><pre><code>if (parameters.isEmpty()) {\n  mediaType = KNOWN_TYPES.get(normalizedType + '/' + normalizedSubtype);\n} else {\n  Map&lt;String, String&gt; normalizedParameters = new HashMap&lt;&gt;();\n  for (Map.Entry&lt;String, String&gt; entry : parameters.entrySet()) {\n    String attribute = Tokenizer.normalize(TOKEN_MATCHER, entry.getKey());\n    normalizedParameters.put(attribute, normalizeParameterValue(attribute, entry.getValue()));\n  }\n}\nif (mediaType == null) {\n  mediaType = MediaType.builder()\n    .type(normalizedType)\n    .subtype(normalizedSubtype)\n    .parameters(normalizedParameters)\n    .build();\n}\n</code></pre></div>", "author": "ljnelson", "createdAt": "2020-09-01T20:27:26Z", "path": "common/http/src/main/java/io/helidon/common/http/MediaType.java", "diffHunk": "@@ -268,21 +351,26 @@ private static MediaType create(String type, String subtype,\n             throw new IllegalStateException(\n                     \"A wildcard type cannot be used with a non-wildcard subtype\");\n         }\n-        Map<String, String> builder = new HashMap<>();\n+        Map<String, String> normalizedParameters = new HashMap<>();\n         for (Map.Entry<String, String> entry : parameters.entrySet()) {\n             String attribute = Tokenizer.normalize(TOKEN_MATCHER, entry.getKey());\n-            builder.put(attribute, normalizeParameterValue(attribute, entry.getValue()));\n+            normalizedParameters.put(attribute, normalizeParameterValue(attribute, entry.getValue()));\n         }\n \n-        MediaType mediaType = MediaType.builder()\n-                .type(normalizedType)\n-                .subtype(normalizedSubtype)\n-                .parameters(builder)\n-                .build();\n+        MediaType mediaType = null;\n \n         // Return one of the constants if the media type is a known type.\n-        //TODO or else get?\n-        return Optional.ofNullable(KNOWN_TYPES.get(mediaType)).orElse(mediaType);\n+        if (normalizedParameters.isEmpty()) {\n+            mediaType = KNOWN_TYPES.get(normalizedType + '/' + normalizedSubtype);\n+        }", "originalCommit": "73d65bfaa97327cb27a0c7402550a91c77036f15", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQzMjIxOQ==", "url": "https://github.com/oracle/helidon/pull/2308#discussion_r481432219", "bodyText": "fixed.", "author": "romain-grecourt", "createdAt": "2020-09-01T21:08:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQxMTI2Ng=="}], "type": "inlineReview"}, {"oid": "0539663a35b19e39abdb5918130d7e8e15cc1b4c", "url": "https://github.com/oracle/helidon/commit/0539663a35b19e39abdb5918130d7e8e15cc1b4c", "message": "incorporate review feedback", "committedDate": "2020-09-01T21:07:28Z", "type": "commit"}]}