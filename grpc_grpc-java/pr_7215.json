{"pr_number": 7215, "pr_title": "xds: perform header matching on concatenated values", "pr_author": "voidzcy", "pr_createdAt": "2020-07-15T19:14:58Z", "pr_url": "https://github.com/grpc/grpc-java/pull/7215", "timeline": [{"oid": "a028860f08e443f02ca20f2edcf976c2d7d224eb", "url": "https://github.com/grpc/grpc-java/commit/a028860f08e443f02ca20f2edcf976c2d7d224eb", "message": "Pass order preserved iterable of header values for header matching.", "committedDate": "2020-07-15T19:13:28Z", "type": "commit"}, {"oid": "1d9f42c345a26441d46f74eda3eb97a73e9f9de3", "url": "https://github.com/grpc/grpc-java/commit/1d9f42c345a26441d46f74eda3eb97a73e9f9de3", "message": "Concatenate header values to perform matching.", "committedDate": "2020-07-15T19:13:53Z", "type": "commit"}, {"oid": "bc50dcfed4d6b9308c5900b48d361b6cede4678b", "url": "https://github.com/grpc/grpc-java/commit/bc50dcfed4d6b9308c5900b48d361b6cede4678b", "message": "Fix test", "committedDate": "2020-07-15T19:14:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTI4Nzc0MQ==", "url": "https://github.com/grpc/grpc-java/pull/7215#discussion_r455287741", "body": "Why not just `boolean matches(String path, Metadata headers)` without making a copy map?  \r\n```java\r\nfor (HeaderMatcher headerMatcher : headerMatchers) {\r\n  headerName = headerMatcher.getName();\r\n  Iterable<String> values = headers.getAll(\r\n      Metadata.Key.of(headerName, Metadata.ASCII_STRING_MARSHALLER));\r\n  if (headerMatcher.matchesValue(values)) {\r\n    return false;\r\n  }\r\n}\r\n```", "bodyText": "Why not just boolean matches(String path, Metadata headers) without making a copy map?\nfor (HeaderMatcher headerMatcher : headerMatchers) {\n  headerName = headerMatcher.getName();\n  Iterable<String> values = headers.getAll(\n      Metadata.Key.of(headerName, Metadata.ASCII_STRING_MARSHALLER));\n  if (headerMatcher.matchesValue(values)) {\n    return false;\n  }\n}", "bodyHTML": "<p dir=\"auto\">Why not just <code>boolean matches(String path, Metadata headers)</code> without making a copy map?</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"for (HeaderMatcher headerMatcher : headerMatchers) {\n  headerName = headerMatcher.getName();\n  Iterable&lt;String&gt; values = headers.getAll(\n      Metadata.Key.of(headerName, Metadata.ASCII_STRING_MARSHALLER));\n  if (headerMatcher.matchesValue(values)) {\n    return false;\n  }\n}\"><pre><span class=\"pl-k\">for</span> (<span class=\"pl-smi\">HeaderMatcher</span> headerMatcher <span class=\"pl-k\">:</span> headerMatchers) {\n  headerName <span class=\"pl-k\">=</span> headerMatcher<span class=\"pl-k\">.</span>getName();\n  <span class=\"pl-k\">Iterable&lt;<span class=\"pl-smi\">String</span>&gt;</span> values <span class=\"pl-k\">=</span> headers<span class=\"pl-k\">.</span>getAll(\n      <span class=\"pl-smi\">Metadata</span><span class=\"pl-k\">.</span><span class=\"pl-smi\">Key</span><span class=\"pl-k\">.</span>of(headerName, <span class=\"pl-smi\">Metadata</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>ASCII_STRING_MARSHALLER</span>));\n  <span class=\"pl-k\">if</span> (headerMatcher<span class=\"pl-k\">.</span>matchesValue(values)) {\n    <span class=\"pl-k\">return</span> <span class=\"pl-c1\">false</span>;\n  }\n}</pre></div>", "author": "dapengzhang0", "createdAt": "2020-07-15T19:23:44Z", "path": "xds/src/main/java/io/grpc/xds/RouteMatch.java", "diffHunk": "@@ -60,7 +60,7 @@\n    *\n    * <p>Match is not deterministic if a runtime fraction match rule presents in this RouteMatch.\n    */\n-  boolean matches(String path, Map<String, Set<String>> headers) {\n+  boolean matches(String path, Map<String, Iterable<String>> headers) {", "originalCommit": "bc50dcfed4d6b9308c5900b48d361b6cede4678b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTI5NjcwNQ==", "url": "https://github.com/grpc/grpc-java/pull/7215#discussion_r455296705", "bodyText": "Seems the copy map can be reused for multiple RouteMatches in pickSubchannel(), which is more efficient.", "author": "dapengzhang0", "createdAt": "2020-07-15T19:40:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTI4Nzc0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTI5NzMwOQ==", "url": "https://github.com/grpc/grpc-java/pull/7215#discussion_r455297309", "bodyText": "Yes, exactly.", "author": "voidzcy", "createdAt": "2020-07-15T19:41:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTI4Nzc0MQ=="}], "type": "inlineReview"}]}