{"pr_number": 7023, "pr_title": "netty: return status code unavailable when netty channel has unresolved InetSocketAddress", "pr_author": "reggiemcdonald", "pr_createdAt": "2020-05-08T05:48:18Z", "pr_url": "https://github.com/grpc/grpc-java/pull/7023", "timeline": [{"oid": "71f56cb3881edb430d6f549aa188d83866bf0c84", "url": "https://github.com/grpc/grpc-java/commit/71f56cb3881edb430d6f549aa188d83866bf0c84", "message": "netty: add check for UnresolvedAddressException for netty channels with unresolved InetSocketAddresses\n\nThis commit adds a check for UnresolvedAddressException in netty Utils. This change was made to ensure that netty channels built from an unresolved InetSocketAddress would return Status UNAVAILABLE instead of UNKNOWN.", "committedDate": "2020-05-08T05:38:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjMxNTQzMg==", "url": "https://github.com/grpc/grpc-java/pull/7023#discussion_r422315432", "body": "can you remove this? it will prevent calling shutdown after the test.", "bodyText": "can you remove this? it will prevent calling shutdown after the test.", "bodyHTML": "<p dir=\"auto\">can you remove this? it will prevent calling shutdown after the test.</p>", "author": "creamsoup", "createdAt": "2020-05-08T18:58:26Z", "path": "netty/src/test/java/io/grpc/netty/NettyTransportTest.java", "diffHunk": "@@ -106,4 +123,23 @@ protected ManagedClientTransport newClientTransport(InternalServer server) {\n   public void clientChecksInboundMetadataSize_trailer() throws Exception {\n     // Server-side is flaky due to https://github.com/netty/netty/pull/8332\n   }\n+\n+  @Test\n+  public void channelHasUnresolvedHostname() throws Exception {\n+    server = null;", "originalCommit": "71f56cb3881edb430d6f549aa188d83866bf0c84", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM5MDAzNQ==", "url": "https://github.com/grpc/grpc-java/pull/7023#discussion_r422390035", "bodyText": "Correct me if I'm wrong here -\nBut I never start the server in this test case. So calling shutdown on server will cause an exception to be thrown", "author": "reggiemcdonald", "createdAt": "2020-05-08T21:43:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjMxNTQzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM5NzY5NA==", "url": "https://github.com/grpc/grpc-java/pull/7023#discussion_r422397694", "bodyText": "oops yes my bad. right it need to be started or assigned to null.", "author": "creamsoup", "createdAt": "2020-05-08T22:06:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjMxNTQzMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQyMDY4MQ==", "url": "https://github.com/grpc/grpc-java/pull/7023#discussion_r422420681", "body": "`InetSocketAddress.createUnresolved()`", "bodyText": "InetSocketAddress.createUnresolved()", "bodyHTML": "<p dir=\"auto\"><code>InetSocketAddress.createUnresolved()</code></p>", "author": "ejona86", "createdAt": "2020-05-08T23:40:25Z", "path": "netty/src/test/java/io/grpc/netty/NettyTransportTest.java", "diffHunk": "@@ -106,4 +123,23 @@ protected ManagedClientTransport newClientTransport(InternalServer server) {\n   public void clientChecksInboundMetadataSize_trailer() throws Exception {\n     // Server-side is flaky due to https://github.com/netty/netty/pull/8332\n   }\n+\n+  @Test\n+  public void channelHasUnresolvedHostname() throws Exception {\n+    server = null;\n+    ManagedChannel channel = NettyChannelBuilder\n+        .forAddress(new InetSocketAddress(\"invalid\", 1234))", "originalCommit": "71f56cb3881edb430d6f549aa188d83866bf0c84", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU2ODgxNQ==", "url": "https://github.com/grpc/grpc-java/pull/7023#discussion_r422568815", "bodyText": "ahh missed this in the docs. Thanks!", "author": "reggiemcdonald", "createdAt": "2020-05-10T01:25:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQyMDY4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQyNDE5Mw==", "url": "https://github.com/grpc/grpc-java/pull/7023#discussion_r422424193", "body": "So we went with this approach with in-process because there wasn't much infrastructure to support \"smaller\" unit tests.\r\n\r\nIn this case we should at least extend this unit test (new test method, or dump on the end):\r\nhttps://github.com/grpc/grpc-java/blob/96a32ed768f7ba8cc23660e6d64ad08a7e6790db/netty/src/test/java/io/grpc/netty/UtilsTest.java#L58-L63\r\n\r\nThat said, it's also not at all obvious in this case that the unresolved address will go through that exception code path, so a higher-level test does seem fair. Since this is a channel-creation issue, I think we can use a lower-level API without much pain. (Ideally in your other PR we would have done a lower-level API, but it was clear there wasn't enough infrastructure to support such a test, so we \"took the easy way out.\")\r\n\r\nYou can use `clientFactory.newClientTransport()` here. None of the ClientTransportOptions should matter, except ChannelLogger (can be created via `transportLogger()`). No, I don't know why ChannelLogger is passed as both an argument newClientTransport and in the options.\r\n\r\nAfter you have a transport, you'll call `transport.start()` and pass a Listener. We will expect the listener to fail in transportShutdown(). If we get transportReady() then the test failed. The listener will be called asynchronously, so you'll need to wait for the event. Easiest way to do that is probably using a SettableFuture<Status> (so on success do set() and on failure do setException()) and just `get()` in the test method.\r\n\r\nThat will produce a much \"lighter\" test that is much more direct. The test you have written here looks fine (and I could live with it if I needed to), but we try to avoid bringing in components unless we really need to.", "bodyText": "So we went with this approach with in-process because there wasn't much infrastructure to support \"smaller\" unit tests.\nIn this case we should at least extend this unit test (new test method, or dump on the end):\n\n  \n    \n      grpc-java/netty/src/test/java/io/grpc/netty/UtilsTest.java\n    \n    \n        Lines 58 to 63\n      in\n      96a32ed\n    \n    \n    \n    \n\n        \n          \n           public void testStatusFromThrowable() { \n        \n\n        \n          \n             Status s = Status.CANCELLED.withDescription(\"msg\"); \n        \n\n        \n          \n             assertSame(s, Utils.statusFromThrowable(new Exception(s.asException()))); \n        \n\n        \n          \n             Throwable t; \n        \n\n        \n          \n             t = new ConnectTimeoutException(\"msg\"); \n        \n\n        \n          \n             assertStatusEquals(Status.UNAVAILABLE.withCause(t), Utils.statusFromThrowable(t)); \n        \n    \n  \n\n\nThat said, it's also not at all obvious in this case that the unresolved address will go through that exception code path, so a higher-level test does seem fair. Since this is a channel-creation issue, I think we can use a lower-level API without much pain. (Ideally in your other PR we would have done a lower-level API, but it was clear there wasn't enough infrastructure to support such a test, so we \"took the easy way out.\")\nYou can use clientFactory.newClientTransport() here. None of the ClientTransportOptions should matter, except ChannelLogger (can be created via transportLogger()). No, I don't know why ChannelLogger is passed as both an argument newClientTransport and in the options.\nAfter you have a transport, you'll call transport.start() and pass a Listener. We will expect the listener to fail in transportShutdown(). If we get transportReady() then the test failed. The listener will be called asynchronously, so you'll need to wait for the event. Easiest way to do that is probably using a SettableFuture (so on success do set() and on failure do setException()) and just get() in the test method.\nThat will produce a much \"lighter\" test that is much more direct. The test you have written here looks fine (and I could live with it if I needed to), but we try to avoid bringing in components unless we really need to.", "bodyHTML": "<p dir=\"auto\">So we went with this approach with in-process because there wasn't much infrastructure to support \"smaller\" unit tests.</p>\n<p dir=\"auto\">In this case we should at least extend this unit test (new test method, or dump on the end):<br>\n<div class=\"border rounded-1 my-2\">\n  <div class=\"f6 px-3 py-2 lh-condensed border-bottom color-bg-subtle\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/grpc/grpc-java/blob/96a32ed768f7ba8cc23660e6d64ad08a7e6790db/netty/src/test/java/io/grpc/netty/UtilsTest.java#L58-L63\">grpc-java/netty/src/test/java/io/grpc/netty/UtilsTest.java</a>\n    </p>\n    <p class=\"mb-0 color-fg-muted\">\n        Lines 58 to 63\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha\" href=\"/grpc/grpc-java/commit/96a32ed768f7ba8cc23660e6d64ad08a7e6790db\">96a32ed</a>\n    </p>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\" data-paste-markdown-skip=\"\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L58\" class=\"blob-num border-0 px-3 py-0 color-bg-default js-line-number\" data-line-number=\"58\"></td>\n          <td id=\"LC58\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\"> <span class=\"pl-k\">public</span> <span class=\"pl-k\">void</span> <span class=\"pl-en\">testStatusFromThrowable</span>() { </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L59\" class=\"blob-num border-0 px-3 py-0 color-bg-default js-line-number\" data-line-number=\"59\"></td>\n          <td id=\"LC59\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">   <span class=\"pl-smi\">Status</span> s <span class=\"pl-k\">=</span> <span class=\"pl-smi\">Status</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>CANCELLED</span><span class=\"pl-k\">.</span>withDescription(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>msg<span class=\"pl-pds\">\"</span></span>); </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L60\" class=\"blob-num border-0 px-3 py-0 color-bg-default js-line-number\" data-line-number=\"60\"></td>\n          <td id=\"LC60\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">   assertSame(s, <span class=\"pl-smi\">Utils</span><span class=\"pl-k\">.</span>statusFromThrowable(<span class=\"pl-k\">new</span> <span class=\"pl-smi\">Exception</span>(s<span class=\"pl-k\">.</span>asException()))); </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L61\" class=\"blob-num border-0 px-3 py-0 color-bg-default js-line-number\" data-line-number=\"61\"></td>\n          <td id=\"LC61\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">   <span class=\"pl-smi\">Throwable</span> t; </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L62\" class=\"blob-num border-0 px-3 py-0 color-bg-default js-line-number\" data-line-number=\"62\"></td>\n          <td id=\"LC62\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">   t <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">ConnectTimeoutException</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>msg<span class=\"pl-pds\">\"</span></span>); </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L63\" class=\"blob-num border-0 px-3 py-0 color-bg-default js-line-number\" data-line-number=\"63\"></td>\n          <td id=\"LC63\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">   assertStatusEquals(<span class=\"pl-smi\">Status</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>UNAVAILABLE</span><span class=\"pl-k\">.</span>withCause(t), <span class=\"pl-smi\">Utils</span><span class=\"pl-k\">.</span>statusFromThrowable(t)); </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n</p>\n<p dir=\"auto\">That said, it's also not at all obvious in this case that the unresolved address will go through that exception code path, so a higher-level test does seem fair. Since this is a channel-creation issue, I think we can use a lower-level API without much pain. (Ideally in your other PR we would have done a lower-level API, but it was clear there wasn't enough infrastructure to support such a test, so we \"took the easy way out.\")</p>\n<p dir=\"auto\">You can use <code>clientFactory.newClientTransport()</code> here. None of the ClientTransportOptions should matter, except ChannelLogger (can be created via <code>transportLogger()</code>). No, I don't know why ChannelLogger is passed as both an argument newClientTransport and in the options.</p>\n<p dir=\"auto\">After you have a transport, you'll call <code>transport.start()</code> and pass a Listener. We will expect the listener to fail in transportShutdown(). If we get transportReady() then the test failed. The listener will be called asynchronously, so you'll need to wait for the event. Easiest way to do that is probably using a SettableFuture (so on success do set() and on failure do setException()) and just <code>get()</code> in the test method.</p>\n<p dir=\"auto\">That will produce a much \"lighter\" test that is much more direct. The test you have written here looks fine (and I could live with it if I needed to), but we try to avoid bringing in components unless we really need to.</p>", "author": "ejona86", "createdAt": "2020-05-08T23:59:15Z", "path": "netty/src/test/java/io/grpc/netty/NettyTransportTest.java", "diffHunk": "@@ -106,4 +123,23 @@ protected ManagedClientTransport newClientTransport(InternalServer server) {\n   public void clientChecksInboundMetadataSize_trailer() throws Exception {\n     // Server-side is flaky due to https://github.com/netty/netty/pull/8332\n   }\n+\n+  @Test\n+  public void channelHasUnresolvedHostname() throws Exception {", "originalCommit": "71f56cb3881edb430d6f549aa188d83866bf0c84", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU2OTA3Mg==", "url": "https://github.com/grpc/grpc-java/pull/7023#discussion_r422569072", "bodyText": "Thanks so much for your advice!\nThis makes a lot of sense. I like the idea of making the test case lighter. I've pushed changes to the test case that I think addresses your comment.\nIn terms of extending netty.UtilsTest.testStatusFromThrowable - I did make a change to it here:\n\n  \n    \n      grpc-java/netty/src/test/java/io/grpc/netty/UtilsTest.java\n    \n    \n        Lines 59 to 66\n      in\n      52a7b3a\n    \n    \n    \n    \n\n        \n          \n           public void testStatusFromThrowable() { \n        \n\n        \n          \n             Status s = Status.CANCELLED.withDescription(\"msg\"); \n        \n\n        \n          \n             assertSame(s, Utils.statusFromThrowable(new Exception(s.asException()))); \n        \n\n        \n          \n             Throwable t; \n        \n\n        \n          \n             t = new ConnectTimeoutException(\"msg\"); \n        \n\n        \n          \n             assertStatusEquals(Status.UNAVAILABLE.withCause(t), Utils.statusFromThrowable(t)); \n        \n\n        \n          \n             t = new UnresolvedAddressException(); \n        \n\n        \n          \n             assertStatusEquals(Status.UNAVAILABLE.withCause(t), Utils.statusFromThrowable(t)); \n        \n    \n  \n\n\nWere you thinking that more needed to be added to this?", "author": "reggiemcdonald", "createdAt": "2020-05-10T01:29:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQyNDE5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI1MDkyNQ==", "url": "https://github.com/grpc/grpc-java/pull/7023#discussion_r423250925", "bodyText": "In terms of extending netty.UtilsTest.testStatusFromThrowable - I did make a change to it here\n\nDoh. It was so small I missed it! Yeah, that looks good.", "author": "ejona86", "createdAt": "2020-05-11T18:56:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQyNDE5Mw=="}], "type": "inlineReview"}, {"oid": "52a7b3aaf56403d44662a008ccf41f025bf6a279", "url": "https://github.com/grpc/grpc-java/commit/52a7b3aaf56403d44662a008ccf41f025bf6a279", "message": "netty: make netty transport test more lightweight\n\nThis commit addresses PR feedback to make NettyTransportTest.channelHasUnresolvedHost more lightweight.", "committedDate": "2020-05-10T00:21:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI1MjIwNA==", "url": "https://github.com/grpc/grpc-java/pull/7023#discussion_r423252204", "body": "super-nit: this can just be created within `transportReady()` itself. I would be fine with merging it like this.", "bodyText": "super-nit: this can just be created within transportReady() itself. I would be fine with merging it like this.", "bodyHTML": "<p dir=\"auto\">super-nit: this can just be created within <code>transportReady()</code> itself. I would be fine with merging it like this.</p>", "author": "ejona86", "createdAt": "2020-05-11T18:58:31Z", "path": "netty/src/test/java/io/grpc/netty/NettyTransportTest.java", "diffHunk": "@@ -106,4 +114,48 @@ protected ManagedClientTransport newClientTransport(InternalServer server) {\n   public void clientChecksInboundMetadataSize_trailer() throws Exception {\n     // Server-side is flaky due to https://github.com/netty/netty/pull/8332\n   }\n+\n+  @Test\n+  public void channelHasUnresolvedHostname() throws Exception {\n+    server = null;\n+    final SettableFuture<Status> future = SettableFuture.create();\n+    ChannelLogger logger = transportLogger();\n+    ManagedClientTransport transport = clientFactory.newClientTransport(\n+        InetSocketAddress.createUnresolved(\"invalid\", 1234),\n+        new ClientTransportFactory.ClientTransportOptions()\n+            .setChannelLogger(logger), logger);\n+    Runnable runnable = transport.start(new ManagedClientTransport.Listener() {\n+      final Throwable failTestException =\n+          new Throwable(\"transport should have failed and shutdown but didnt\");", "originalCommit": "52a7b3aaf56403d44662a008ccf41f025bf6a279", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI4NTYzMA==", "url": "https://github.com/grpc/grpc-java/pull/7023#discussion_r423285630", "bodyText": "Done", "author": "reggiemcdonald", "createdAt": "2020-05-11T20:01:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI1MjIwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI1MjkxMA==", "url": "https://github.com/grpc/grpc-java/pull/7023#discussion_r423252910", "body": "This is cleaner and clearer as a try-finally.", "bodyText": "This is cleaner and clearer as a try-finally.", "bodyHTML": "<p dir=\"auto\">This is cleaner and clearer as a try-finally.</p>", "author": "ejona86", "createdAt": "2020-05-11T18:59:55Z", "path": "netty/src/test/java/io/grpc/netty/NettyTransportTest.java", "diffHunk": "@@ -106,4 +114,48 @@ protected ManagedClientTransport newClientTransport(InternalServer server) {\n   public void clientChecksInboundMetadataSize_trailer() throws Exception {\n     // Server-side is flaky due to https://github.com/netty/netty/pull/8332\n   }\n+\n+  @Test\n+  public void channelHasUnresolvedHostname() throws Exception {\n+    server = null;\n+    final SettableFuture<Status> future = SettableFuture.create();\n+    ChannelLogger logger = transportLogger();\n+    ManagedClientTransport transport = clientFactory.newClientTransport(\n+        InetSocketAddress.createUnresolved(\"invalid\", 1234),\n+        new ClientTransportFactory.ClientTransportOptions()\n+            .setChannelLogger(logger), logger);\n+    Runnable runnable = transport.start(new ManagedClientTransport.Listener() {\n+      final Throwable failTestException =\n+          new Throwable(\"transport should have failed and shutdown but didnt\");\n+      @Override\n+      public void transportShutdown(Status s) {\n+        future.set(s);\n+      }\n+\n+      @Override\n+      public void transportTerminated() {}\n+\n+      @Override\n+      public void transportReady() {\n+        future.setException(failTestException);\n+      }\n+\n+      @Override\n+      public void transportInUse(boolean inUse) {\n+        future.setException(failTestException);\n+      }\n+    });\n+    if (runnable != null) {\n+      runnable.run();\n+    }\n+    try {\n+      Status status = future.get();\n+      assertEquals(Status.Code.UNAVAILABLE, status.getCode());\n+      assertTrue(status.getCause() instanceof UnresolvedAddressException);\n+      assertEquals(\"unresolved address\", status.getDescription());\n+    } catch (Exception e) {", "originalCommit": "52a7b3aaf56403d44662a008ccf41f025bf6a279", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI4NTU2Mg==", "url": "https://github.com/grpc/grpc-java/pull/7023#discussion_r423285562", "bodyText": "Done", "author": "reggiemcdonald", "createdAt": "2020-05-11T20:01:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI1MjkxMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI1NTgzOA==", "url": "https://github.com/grpc/grpc-java/pull/7023#discussion_r423255838", "body": "You can leave it as-is, but I'll note that assertTrue/assertFalse commonly produce poor error messages if they fail.\r\n\r\nThis is one of the biggest reasons using Truth can be nice. With Truth, this would be `assertThat(status.getCause()).isinstanceof(UnresolvedAddressException.class)` (`assertThat` is typically a static import from the `Truth` class). Then if it fails, instead of saying \"expected true but was false\" it can say \"expected UnresolvedAddressException but was SomeOtherException\" which can greatly aid debugging. It's possible to do that with the JUnit assertion, but you have to create a string and pass it as the first argument. Something to consider for the future.", "bodyText": "You can leave it as-is, but I'll note that assertTrue/assertFalse commonly produce poor error messages if they fail.\nThis is one of the biggest reasons using Truth can be nice. With Truth, this would be assertThat(status.getCause()).isinstanceof(UnresolvedAddressException.class) (assertThat is typically a static import from the Truth class). Then if it fails, instead of saying \"expected true but was false\" it can say \"expected UnresolvedAddressException but was SomeOtherException\" which can greatly aid debugging. It's possible to do that with the JUnit assertion, but you have to create a string and pass it as the first argument. Something to consider for the future.", "bodyHTML": "<p dir=\"auto\">You can leave it as-is, but I'll note that assertTrue/assertFalse commonly produce poor error messages if they fail.</p>\n<p dir=\"auto\">This is one of the biggest reasons using Truth can be nice. With Truth, this would be <code>assertThat(status.getCause()).isinstanceof(UnresolvedAddressException.class)</code> (<code>assertThat</code> is typically a static import from the <code>Truth</code> class). Then if it fails, instead of saying \"expected true but was false\" it can say \"expected UnresolvedAddressException but was SomeOtherException\" which can greatly aid debugging. It's possible to do that with the JUnit assertion, but you have to create a string and pass it as the first argument. Something to consider for the future.</p>", "author": "ejona86", "createdAt": "2020-05-11T19:05:05Z", "path": "netty/src/test/java/io/grpc/netty/NettyTransportTest.java", "diffHunk": "@@ -106,4 +114,48 @@ protected ManagedClientTransport newClientTransport(InternalServer server) {\n   public void clientChecksInboundMetadataSize_trailer() throws Exception {\n     // Server-side is flaky due to https://github.com/netty/netty/pull/8332\n   }\n+\n+  @Test\n+  public void channelHasUnresolvedHostname() throws Exception {\n+    server = null;\n+    final SettableFuture<Status> future = SettableFuture.create();\n+    ChannelLogger logger = transportLogger();\n+    ManagedClientTransport transport = clientFactory.newClientTransport(\n+        InetSocketAddress.createUnresolved(\"invalid\", 1234),\n+        new ClientTransportFactory.ClientTransportOptions()\n+            .setChannelLogger(logger), logger);\n+    Runnable runnable = transport.start(new ManagedClientTransport.Listener() {\n+      final Throwable failTestException =\n+          new Throwable(\"transport should have failed and shutdown but didnt\");\n+      @Override\n+      public void transportShutdown(Status s) {\n+        future.set(s);\n+      }\n+\n+      @Override\n+      public void transportTerminated() {}\n+\n+      @Override\n+      public void transportReady() {\n+        future.setException(failTestException);\n+      }\n+\n+      @Override\n+      public void transportInUse(boolean inUse) {\n+        future.setException(failTestException);\n+      }\n+    });\n+    if (runnable != null) {\n+      runnable.run();\n+    }\n+    try {\n+      Status status = future.get();\n+      assertEquals(Status.Code.UNAVAILABLE, status.getCode());\n+      assertTrue(status.getCause() instanceof UnresolvedAddressException);", "originalCommit": "52a7b3aaf56403d44662a008ccf41f025bf6a279", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI4NTUwNA==", "url": "https://github.com/grpc/grpc-java/pull/7023#discussion_r423285504", "bodyText": "I like that a lot better! Change made", "author": "reggiemcdonald", "createdAt": "2020-05-11T20:01:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI1NTgzOA=="}], "type": "inlineReview"}, {"oid": "02ec5f884f5b365b2a978e20a24aa6047f352a21", "url": "https://github.com/grpc/grpc-java/commit/02ec5f884f5b365b2a978e20a24aa6047f352a21", "message": "netty: change try-catch to try-finally for better clarity\n\nThis commit addresses a PR comment to make the try-catch a try-finally. Swaps assertTrue to Truth.assertThat.", "committedDate": "2020-05-11T19:59:03Z", "type": "commit"}]}