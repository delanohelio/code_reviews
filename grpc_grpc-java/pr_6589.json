{"pr_number": 6589, "pr_title": "xds: suppress hostname check but keep trust check in the delegated X509TrustManagerImpl", "pr_author": "sanjaypujare", "pr_createdAt": "2020-01-08T22:33:44Z", "pr_url": "https://github.com/grpc/grpc-java/pull/6589", "timeline": [{"oid": "15f717cea47a257dfe1338d7e07965b8978f0532", "url": "https://github.com/grpc/grpc-java/commit/15f717cea47a257dfe1338d7e07965b8978f0532", "message": "xds: suppress hostname check but keep trust check in the delegated X509TrustManagerImpl", "committedDate": "2020-01-08T22:31:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDUwOTc1Nw==", "url": "https://github.com/grpc/grpc-java/pull/6589#discussion_r364509757", "body": "```suggestion\r\n      SSLSocket sslSocket = (SSLSocket) socket;\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  SSLSocket sslSocket = (SSLSocket)socket;\n          \n          \n            \n                  SSLSocket sslSocket = (SSLSocket) socket;", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">      <span class=\"pl-smi\">SSLSocket</span> sslSocket <span class=\"pl-k\">=</span> (<span class=\"pl-smi\">SSLSocket</span>)socket;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">      <span class=\"pl-smi\">SSLSocket</span> sslSocket <span class=\"pl-k\">=</span> (<span class=\"pl-smi\">SSLSocket</span>)<span class=\"x x-first x-last\"> </span>socket;</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "creamsoup", "createdAt": "2020-01-09T00:27:49Z", "path": "xds/src/main/java/io/grpc/xds/sds/trust/SdsX509TrustManager.java", "diffHunk": "@@ -256,13 +258,26 @@ public void checkClientTrusted(X509Certificate[] chain, String authType)\n   @Override\n   public void checkServerTrusted(X509Certificate[] chain, String authType, Socket socket)\n       throws CertificateException {\n+    if (socket instanceof SSLSocket) {\n+      SSLSocket sslSocket = (SSLSocket)socket;", "originalCommit": "15f717cea47a257dfe1338d7e07965b8978f0532", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDUxMTA1Nw==", "url": "https://github.com/grpc/grpc-java/pull/6589#discussion_r364511057", "body": "same for this.", "bodyText": "same for this.", "bodyHTML": "<p dir=\"auto\">same for this.</p>", "author": "creamsoup", "createdAt": "2020-01-09T00:33:16Z", "path": "xds/src/test/java/io/grpc/xds/sds/trust/SdsX509TrustManagerTest.java", "diffHunk": "@@ -221,14 +244,346 @@ public void oneIpAddressInPeerCertsMismatch() throws CertificateException, IOExc\n             .addVerifySubjectAltName(\"x.foo.com\")\n             .addVerifySubjectAltName(\"192.168.2.3\")\n             .build();\n-    SdsX509TrustManager trustManager = new SdsX509TrustManager(certContext, mockDelegate);\n+    trustManager = new SdsX509TrustManager(certContext, mockDelegate);\n     X509Certificate[] certs =\n         CertificateUtils.toX509Certificates(TestUtils.loadCert(SERVER_1_PEM_FILE));\n     try {\n       trustManager.verifySubjectAltNameInChain(certs);\n-      Assert.fail(\"no exception thrown\");\n+      fail(\"no exception thrown\");\n     } catch (CertificateException expected) {\n       assertThat(expected).hasMessageThat().isEqualTo(\"Peer certificate SAN check failed\");\n     }\n   }\n+\n+  @Test\n+  public void checkServerTrustedSslEngine()\n+      throws CertificateException, IOException, CertStoreException {\n+    SSLEngine sslEngine = buildTrustManagerAndGetSslEngine();\n+    X509Certificate[] serverCerts =\n+        CertificateUtils.toX509Certificates(TestUtils.loadCert(SERVER_1_PEM_FILE));\n+    trustManager.checkServerTrusted(serverCerts, \"ECDHE_ECDSA\", sslEngine);\n+  }\n+\n+  @Test\n+  public void checkServerTrustedSslEngine_untrustedServer_expectException()\n+      throws CertificateException, IOException, CertStoreException {\n+    SSLEngine sslEngine = buildTrustManagerAndGetSslEngine();\n+    X509Certificate[] badServerCert =\n+        CertificateUtils.toX509Certificates(TestUtils.loadCert(BAD_SERVER_PEM_FILE));\n+    try {\n+      trustManager.checkServerTrusted(badServerCert, \"ECDHE_ECDSA\", sslEngine);\n+      fail(\"exception expected\");\n+    } catch (ValidatorException expected) {\n+      assertThat(expected).hasMessageThat()\n+          .endsWith(\"unable to find valid certification path to requested target\");\n+    }\n+  }\n+\n+  @Test\n+  public void checkServerTrustedSslSocket()\n+      throws CertificateException, IOException, CertStoreException {\n+    SSLSocket sslSocket = buildTrustManagerAndGetSslSocket();\n+    X509Certificate[] serverCerts =\n+        CertificateUtils.toX509Certificates(TestUtils.loadCert(SERVER_1_PEM_FILE));\n+    trustManager.checkServerTrusted(serverCerts, \"ECDHE_ECDSA\", sslSocket);\n+  }\n+\n+  @Test\n+  public void checkServerTrustedSslSocket_untrustedServer_expectException()\n+      throws CertificateException, IOException, CertStoreException {\n+    SSLSocket sslSocket = buildTrustManagerAndGetSslSocket();\n+    X509Certificate[] badServerCert =\n+        CertificateUtils.toX509Certificates(TestUtils.loadCert(BAD_SERVER_PEM_FILE));\n+    try {\n+      trustManager.checkServerTrusted(badServerCert, \"ECDHE_ECDSA\", sslSocket);\n+      fail(\"exception expected\");\n+    } catch (ValidatorException expected) {\n+      assertThat(expected).hasMessageThat()\n+          .endsWith(\"unable to find valid certification path to requested target\");\n+    }\n+  }\n+\n+  private SSLEngine buildTrustManagerAndGetSslEngine()\n+      throws CertificateException, IOException, CertStoreException {\n+    SSLParameters sslParams = buildTrustManagerAndGetSslParameters();\n+    SSLEngine sslEngine =  new SSLEngine() {\n+      @Override\n+      public SSLEngineResult wrap(ByteBuffer[] byteBuffers, int i, int i1, ByteBuffer byteBuffer)\n+          throws SSLException {\n+        return null;\n+      }\n+\n+      @Override\n+      public SSLEngineResult unwrap(ByteBuffer byteBuffer, ByteBuffer[] byteBuffers, int i, int i1)\n+          throws SSLException {\n+        return null;\n+      }\n+\n+      @Override\n+      public Runnable getDelegatedTask() {\n+        return null;\n+      }\n+\n+      @Override\n+      public void closeInbound() throws SSLException {\n+\n+      }\n+\n+      @Override\n+      public boolean isInboundDone() {\n+        return false;\n+      }\n+\n+      @Override\n+      public void closeOutbound() {\n+\n+      }\n+\n+      @Override\n+      public boolean isOutboundDone() {\n+        return false;\n+      }\n+\n+      @Override\n+      public String[] getSupportedCipherSuites() {\n+        return new String[0];\n+      }\n+\n+      @Override\n+      public String[] getEnabledCipherSuites() {\n+        return new String[0];\n+      }\n+\n+      @Override\n+      public void setEnabledCipherSuites(String[] strings) {\n+\n+      }\n+\n+      @Override\n+      public String[] getSupportedProtocols() {\n+        return new String[0];\n+      }\n+\n+      @Override\n+      public String[] getEnabledProtocols() {\n+        return new String[0];\n+      }\n+\n+      @Override\n+      public void setEnabledProtocols(String[] strings) {\n+\n+      }\n+\n+      @Override\n+      public SSLSession getSession() {\n+        return mockSession;\n+      }\n+\n+      @Override\n+      public void beginHandshake() throws SSLException {\n+\n+      }\n+\n+      @Override\n+      public HandshakeStatus getHandshakeStatus() {\n+        return null;\n+      }\n+\n+      @Override\n+      public void setUseClientMode(boolean b) {\n+\n+      }\n+\n+      @Override\n+      public boolean getUseClientMode() {\n+        return false;\n+      }\n+\n+      @Override\n+      public void setNeedClientAuth(boolean b) {\n+\n+      }\n+\n+      @Override\n+      public boolean getNeedClientAuth() {\n+        return false;\n+      }\n+\n+      @Override\n+      public void setWantClientAuth(boolean b) {\n+\n+      }\n+\n+      @Override\n+      public boolean getWantClientAuth() {\n+        return false;\n+      }\n+\n+      @Override\n+      public void setEnableSessionCreation(boolean b) {\n+\n+      }\n+\n+      @Override\n+      public boolean getEnableSessionCreation() {\n+        return false;\n+      }\n+\n+      @Override\n+      public SSLSession getHandshakeSession() {\n+        return mockSession;\n+      }\n+\n+      @Override\n+      public SSLParameters getSSLParameters() {\n+        return sslParameters;\n+      }\n+\n+      @Override\n+      public void setSSLParameters(SSLParameters sslParameters) {\n+        this.sslParameters = sslParameters;\n+      }\n+\n+      private SSLParameters sslParameters;\n+    };\n+    sslEngine.setSSLParameters(sslParams);\n+    return sslEngine;\n+  }\n+\n+  private SSLSocket buildTrustManagerAndGetSslSocket()\n+      throws CertificateException, IOException, CertStoreException {\n+    SSLParameters sslParams = buildTrustManagerAndGetSslParameters();\n+\n+    SSLSocket sslSocket = new SSLSocket() {", "originalCommit": "15f717cea47a257dfe1338d7e07965b8978f0532", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDUxNDgyOQ==", "url": "https://github.com/grpc/grpc-java/pull/6589#discussion_r364514829", "bodyText": "Mocks won't work here (AFAIK) as stated before.", "author": "sanjaypujare", "createdAt": "2020-01-09T00:49:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDUxMTA1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDUxMTc5MA==", "url": "https://github.com/grpc/grpc-java/pull/6589#discussion_r364511790", "body": "can you use mock to get rid of boiler plate? mock should be avoided, but in this case it seems like a better idea.", "bodyText": "can you use mock to get rid of boiler plate? mock should be avoided, but in this case it seems like a better idea.", "bodyHTML": "<p dir=\"auto\">can you use mock to get rid of boiler plate? mock should be avoided, but in this case it seems like a better idea.</p>", "author": "creamsoup", "createdAt": "2020-01-09T00:36:19Z", "path": "xds/src/test/java/io/grpc/xds/sds/trust/SdsX509TrustManagerTest.java", "diffHunk": "@@ -221,14 +244,346 @@ public void oneIpAddressInPeerCertsMismatch() throws CertificateException, IOExc\n             .addVerifySubjectAltName(\"x.foo.com\")\n             .addVerifySubjectAltName(\"192.168.2.3\")\n             .build();\n-    SdsX509TrustManager trustManager = new SdsX509TrustManager(certContext, mockDelegate);\n+    trustManager = new SdsX509TrustManager(certContext, mockDelegate);\n     X509Certificate[] certs =\n         CertificateUtils.toX509Certificates(TestUtils.loadCert(SERVER_1_PEM_FILE));\n     try {\n       trustManager.verifySubjectAltNameInChain(certs);\n-      Assert.fail(\"no exception thrown\");\n+      fail(\"no exception thrown\");\n     } catch (CertificateException expected) {\n       assertThat(expected).hasMessageThat().isEqualTo(\"Peer certificate SAN check failed\");\n     }\n   }\n+\n+  @Test\n+  public void checkServerTrustedSslEngine()\n+      throws CertificateException, IOException, CertStoreException {\n+    SSLEngine sslEngine = buildTrustManagerAndGetSslEngine();\n+    X509Certificate[] serverCerts =\n+        CertificateUtils.toX509Certificates(TestUtils.loadCert(SERVER_1_PEM_FILE));\n+    trustManager.checkServerTrusted(serverCerts, \"ECDHE_ECDSA\", sslEngine);\n+  }\n+\n+  @Test\n+  public void checkServerTrustedSslEngine_untrustedServer_expectException()\n+      throws CertificateException, IOException, CertStoreException {\n+    SSLEngine sslEngine = buildTrustManagerAndGetSslEngine();\n+    X509Certificate[] badServerCert =\n+        CertificateUtils.toX509Certificates(TestUtils.loadCert(BAD_SERVER_PEM_FILE));\n+    try {\n+      trustManager.checkServerTrusted(badServerCert, \"ECDHE_ECDSA\", sslEngine);\n+      fail(\"exception expected\");\n+    } catch (ValidatorException expected) {\n+      assertThat(expected).hasMessageThat()\n+          .endsWith(\"unable to find valid certification path to requested target\");\n+    }\n+  }\n+\n+  @Test\n+  public void checkServerTrustedSslSocket()\n+      throws CertificateException, IOException, CertStoreException {\n+    SSLSocket sslSocket = buildTrustManagerAndGetSslSocket();\n+    X509Certificate[] serverCerts =\n+        CertificateUtils.toX509Certificates(TestUtils.loadCert(SERVER_1_PEM_FILE));\n+    trustManager.checkServerTrusted(serverCerts, \"ECDHE_ECDSA\", sslSocket);\n+  }\n+\n+  @Test\n+  public void checkServerTrustedSslSocket_untrustedServer_expectException()\n+      throws CertificateException, IOException, CertStoreException {\n+    SSLSocket sslSocket = buildTrustManagerAndGetSslSocket();\n+    X509Certificate[] badServerCert =\n+        CertificateUtils.toX509Certificates(TestUtils.loadCert(BAD_SERVER_PEM_FILE));\n+    try {\n+      trustManager.checkServerTrusted(badServerCert, \"ECDHE_ECDSA\", sslSocket);\n+      fail(\"exception expected\");\n+    } catch (ValidatorException expected) {\n+      assertThat(expected).hasMessageThat()\n+          .endsWith(\"unable to find valid certification path to requested target\");\n+    }\n+  }\n+\n+  private SSLEngine buildTrustManagerAndGetSslEngine()\n+      throws CertificateException, IOException, CertStoreException {\n+    SSLParameters sslParams = buildTrustManagerAndGetSslParameters();\n+    SSLEngine sslEngine =  new SSLEngine() {", "originalCommit": "15f717cea47a257dfe1338d7e07965b8978f0532", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDUxNDUxMQ==", "url": "https://github.com/grpc/grpc-java/pull/6589#discussion_r364514511", "bodyText": "I would have used a mock if it worked. In the actual (new) code it is setting values in the object:\n    if (sslParams != null) {\n      sslParams.setEndpointIdentificationAlgorithm(null);\n      sslEngine.setSSLParameters(sslParams);\n    }\n\nIf sslEngine and sslParams were mocks, the setters will be no-op and the corresponding getters (called in Java/Sun library code) won't return the correct values. Isn't that right?", "author": "sanjaypujare", "createdAt": "2020-01-09T00:47:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDUxMTc5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDUxNTM2MQ==", "url": "https://github.com/grpc/grpc-java/pull/6589#discussion_r364515361", "bodyText": "i think you can create an abstract class with the set/get implemented and use mock with Mockito.CALLS_REAL_METHODS to achieve exact same behavior as current code.", "author": "creamsoup", "createdAt": "2020-01-09T00:51:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDUxMTc5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDk0MTM1NA==", "url": "https://github.com/grpc/grpc-java/pull/6589#discussion_r364941354", "bodyText": "good suggestion. done.", "author": "sanjaypujare", "createdAt": "2020-01-09T20:18:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDUxMTc5MA=="}], "type": "inlineReview"}, {"oid": "88b0d01a94287f2e15ea5e96dd6132e62a8ee7c3", "url": "https://github.com/grpc/grpc-java/commit/88b0d01a94287f2e15ea5e96dd6132e62a8ee7c3", "message": "address review comments", "committedDate": "2020-01-09T20:12:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTAwOTU2Mg==", "url": "https://github.com/grpc/grpc-java/pull/6589#discussion_r365009562", "body": "fyi, times(1) can be omitted unless very good reason to emphasize times(1). i am just pointing out because all verify has it. ", "bodyText": "fyi, times(1) can be omitted unless very good reason to emphasize times(1). i am just pointing out because all verify has it.", "bodyHTML": "<p dir=\"auto\">fyi, times(1) can be omitted unless very good reason to emphasize times(1). i am just pointing out because all verify has it.</p>", "author": "creamsoup", "createdAt": "2020-01-09T23:27:01Z", "path": "xds/src/test/java/io/grpc/xds/sds/trust/SdsX509TrustManagerTest.java", "diffHunk": "@@ -221,14 +244,132 @@ public void oneIpAddressInPeerCertsMismatch() throws CertificateException, IOExc\n             .addVerifySubjectAltName(\"x.foo.com\")\n             .addVerifySubjectAltName(\"192.168.2.3\")\n             .build();\n-    SdsX509TrustManager trustManager = new SdsX509TrustManager(certContext, mockDelegate);\n+    trustManager = new SdsX509TrustManager(certContext, mockDelegate);\n     X509Certificate[] certs =\n         CertificateUtils.toX509Certificates(TestUtils.loadCert(SERVER_1_PEM_FILE));\n     try {\n       trustManager.verifySubjectAltNameInChain(certs);\n-      Assert.fail(\"no exception thrown\");\n+      fail(\"no exception thrown\");\n     } catch (CertificateException expected) {\n       assertThat(expected).hasMessageThat().isEqualTo(\"Peer certificate SAN check failed\");\n     }\n   }\n+\n+  @Test\n+  public void checkServerTrustedSslEngine()\n+      throws CertificateException, IOException, CertStoreException {\n+    TestSslEngine sslEngine = buildTrustManagerAndGetSslEngine();\n+    X509Certificate[] serverCerts =\n+        CertificateUtils.toX509Certificates(TestUtils.loadCert(SERVER_1_PEM_FILE));\n+    trustManager.checkServerTrusted(serverCerts, \"ECDHE_ECDSA\", sslEngine);\n+    verify(sslEngine, times(1)).getHandshakeSession();", "originalCommit": "88b0d01a94287f2e15ea5e96dd6132e62a8ee7c3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}