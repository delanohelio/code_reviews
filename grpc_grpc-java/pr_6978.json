{"pr_number": 6978, "pr_title": "xds: create XdsServer wrapper for correct start and shutdown semantics", "pr_author": "sanjaypujare", "pr_createdAt": "2020-04-24T17:40:57Z", "pr_url": "https://github.com/grpc/grpc-java/pull/6978", "timeline": [{"oid": "33871e1f23a26a2006a9ca3a9a2a3d1a7828fa4e", "url": "https://github.com/grpc/grpc-java/commit/33871e1f23a26a2006a9ca3a9a2a3d1a7828fa4e", "message": "xds: create XdsServer wrapper for correct start and shutdown semantics", "committedDate": "2020-04-24T17:37:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE5NDY0OA==", "url": "https://github.com/grpc/grpc-java/pull/6978#discussion_r416194648", "body": "you can just use instance variable `port`. \r\n\r\n```suggestion\r\n  private SynchronizationContext createSynchronizationContext() {\r\n```", "bodyText": "you can just use instance variable port.\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private SynchronizationContext createSynchronizationContext(int port) {\n          \n          \n            \n              private SynchronizationContext createSynchronizationContext() {", "bodyHTML": "<p dir=\"auto\">you can just use instance variable <code>port</code>.</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">  <span class=\"pl-k\">private</span> <span class=\"pl-smi\">SynchronizationContext</span> createSynchronizationContext(<span class=\"pl-k x x-first\">int</span><span class=\"x x-last\"> port</span>) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">  <span class=\"pl-k\">private</span> <span class=\"pl-smi\">SynchronizationContext</span> createSynchronizationContext() {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "creamsoup", "createdAt": "2020-04-27T22:32:53Z", "path": "xds/src/main/java/io/grpc/xds/XdsClientWrapperForServerSds.java", "diffHunk": "@@ -84,41 +84,76 @@ public ManagementServerNotFoundException(String msg) {\n   }\n \n   /**\n-   * Factory method for creating a {@link XdsClientWrapperForServerSds}.\n+   * Creates a {@link XdsClientWrapperForServerSds}.\n    *\n    * @param port server's port for which listener config is needed.\n-   * @param bootstrapper {@link Bootstrapper} instance to load bootstrap config.\n-   * @param syncContext {@link SynchronizationContext} needed by {@link XdsClient}.\n    */\n-  public static XdsClientWrapperForServerSds newInstance(\n-      int port, Bootstrapper bootstrapper, SynchronizationContext syncContext)\n-      throws IOException, ManagementServerNotFoundException {\n-    Bootstrapper.BootstrapInfo bootstrapInfo = bootstrapper.readBootstrap();\n-    final List<Bootstrapper.ServerInfo> serverList = bootstrapInfo.getServers();\n-    if (serverList.isEmpty()) {\n-      throw new ManagementServerNotFoundException(\"No management server provided by bootstrap\");\n+  public XdsClientWrapperForServerSds(int port) {\n+    this.port = port;\n+  }\n+\n+  private SynchronizationContext createSynchronizationContext(int port) {", "originalCommit": "33871e1f23a26a2006a9ca3a9a2a3d1a7828fa4e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE5NTgxMw==", "url": "https://github.com/grpc/grpc-java/pull/6978#discussion_r416195813", "body": "`final` is not necessary.  we discourage to use local scoped final if not required. since final should be default behavior.", "bodyText": "final is not necessary.  we discourage to use local scoped final if not required. since final should be default behavior.", "bodyHTML": "<p dir=\"auto\"><code>final</code> is not necessary.  we discourage to use local scoped final if not required. since final should be default behavior.</p>", "author": "creamsoup", "createdAt": "2020-04-27T22:35:39Z", "path": "xds/src/main/java/io/grpc/xds/XdsClientWrapperForServerSds.java", "diffHunk": "@@ -84,41 +84,76 @@ public ManagementServerNotFoundException(String msg) {\n   }\n \n   /**\n-   * Factory method for creating a {@link XdsClientWrapperForServerSds}.\n+   * Creates a {@link XdsClientWrapperForServerSds}.\n    *\n    * @param port server's port for which listener config is needed.\n-   * @param bootstrapper {@link Bootstrapper} instance to load bootstrap config.\n-   * @param syncContext {@link SynchronizationContext} needed by {@link XdsClient}.\n    */\n-  public static XdsClientWrapperForServerSds newInstance(\n-      int port, Bootstrapper bootstrapper, SynchronizationContext syncContext)\n-      throws IOException, ManagementServerNotFoundException {\n-    Bootstrapper.BootstrapInfo bootstrapInfo = bootstrapper.readBootstrap();\n-    final List<Bootstrapper.ServerInfo> serverList = bootstrapInfo.getServers();\n-    if (serverList.isEmpty()) {\n-      throw new ManagementServerNotFoundException(\"No management server provided by bootstrap\");\n+  public XdsClientWrapperForServerSds(int port) {\n+    this.port = port;\n+  }\n+\n+  private SynchronizationContext createSynchronizationContext(int port) {\n+    final InternalLogId logId =\n+        InternalLogId.allocate(\"XdsClientWrapperForServerSds\", Integer.toString(port));\n+    return new SynchronizationContext(\n+        new Thread.UncaughtExceptionHandler() {\n+          // needed by syncContext\n+          private boolean panicMode;\n+\n+          @Override\n+          public void uncaughtException(Thread t, Throwable e) {\n+            logger.log(\n+                Level.SEVERE,\n+                \"[\" + logId + \"] Uncaught exception in the SynchronizationContext. Panic!\",\n+                e);\n+            panic(e);\n+          }\n+\n+          void panic(final Throwable t) {\n+            if (panicMode) {\n+              // Preserve the first panic information\n+              return;\n+            }\n+            panicMode = true;\n+            shutdown();\n+          }\n+        });\n+  }\n+\n+  /** Creates an XdsClient and starts a watch. */\n+  public void start() {\n+    Bootstrapper.BootstrapInfo bootstrapInfo;\n+    final List<Bootstrapper.ServerInfo> serverList;", "originalCommit": "33871e1f23a26a2006a9ca3a9a2a3d1a7828fa4e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE5NjI0Mg==", "url": "https://github.com/grpc/grpc-java/pull/6978#discussion_r416196242", "body": "same here, no final.", "bodyText": "same here, no final.", "bodyHTML": "<p dir=\"auto\">same here, no final.</p>", "author": "creamsoup", "createdAt": "2020-04-27T22:36:29Z", "path": "xds/src/main/java/io/grpc/xds/XdsClientWrapperForServerSds.java", "diffHunk": "@@ -84,41 +84,76 @@ public ManagementServerNotFoundException(String msg) {\n   }\n \n   /**\n-   * Factory method for creating a {@link XdsClientWrapperForServerSds}.\n+   * Creates a {@link XdsClientWrapperForServerSds}.\n    *\n    * @param port server's port for which listener config is needed.\n-   * @param bootstrapper {@link Bootstrapper} instance to load bootstrap config.\n-   * @param syncContext {@link SynchronizationContext} needed by {@link XdsClient}.\n    */\n-  public static XdsClientWrapperForServerSds newInstance(\n-      int port, Bootstrapper bootstrapper, SynchronizationContext syncContext)\n-      throws IOException, ManagementServerNotFoundException {\n-    Bootstrapper.BootstrapInfo bootstrapInfo = bootstrapper.readBootstrap();\n-    final List<Bootstrapper.ServerInfo> serverList = bootstrapInfo.getServers();\n-    if (serverList.isEmpty()) {\n-      throw new ManagementServerNotFoundException(\"No management server provided by bootstrap\");\n+  public XdsClientWrapperForServerSds(int port) {\n+    this.port = port;\n+  }\n+\n+  private SynchronizationContext createSynchronizationContext(int port) {\n+    final InternalLogId logId =\n+        InternalLogId.allocate(\"XdsClientWrapperForServerSds\", Integer.toString(port));\n+    return new SynchronizationContext(\n+        new Thread.UncaughtExceptionHandler() {\n+          // needed by syncContext\n+          private boolean panicMode;\n+\n+          @Override\n+          public void uncaughtException(Thread t, Throwable e) {\n+            logger.log(\n+                Level.SEVERE,\n+                \"[\" + logId + \"] Uncaught exception in the SynchronizationContext. Panic!\",\n+                e);\n+            panic(e);\n+          }\n+\n+          void panic(final Throwable t) {\n+            if (panicMode) {\n+              // Preserve the first panic information\n+              return;\n+            }\n+            panicMode = true;\n+            shutdown();\n+          }\n+        });\n+  }\n+\n+  /** Creates an XdsClient and starts a watch. */\n+  public void start() {\n+    Bootstrapper.BootstrapInfo bootstrapInfo;\n+    final List<Bootstrapper.ServerInfo> serverList;\n+    try {\n+      bootstrapInfo = Bootstrapper.getInstance().readBootstrap();\n+      serverList = bootstrapInfo.getServers();\n+      if (serverList.isEmpty()) {\n+        throw new ManagementServerNotFoundException(\"No management server provided by bootstrap\");\n+      }\n+    } catch (IOException | ManagementServerNotFoundException e) {\n+      logger.log(Level.FINE, \"Exception reading bootstrap\", e);\n+      logger.log(Level.INFO, \"Fallback to plaintext for server at port {0}\", port);\n+      return;\n     }\n     final Node node = bootstrapInfo.getNode();", "originalCommit": "33871e1f23a26a2006a9ca3a9a2a3d1a7828fa4e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjIwMDk4Mw==", "url": "https://github.com/grpc/grpc-java/pull/6978#discussion_r416200983", "body": "should those be in reverse order? since server is using the xdsClientWrapperForServerSds?", "bodyText": "should those be in reverse order? since server is using the xdsClientWrapperForServerSds?", "bodyHTML": "<p dir=\"auto\">should those be in reverse order? since server is using the xdsClientWrapperForServerSds?</p>", "author": "creamsoup", "createdAt": "2020-04-27T22:47:34Z", "path": "xds/src/main/java/io/grpc/xds/internal/sds/ServerWrapperForXds.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds.internal.sds;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import io.grpc.Server;\n+import io.grpc.ServerServiceDefinition;\n+import io.grpc.xds.XdsClientWrapperForServerSds;\n+import java.io.IOException;\n+import java.net.SocketAddress;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Wraps a {@link Server} delegate and {@link XdsClientWrapperForServerSds} and intercepts {@link\n+ * Server#shutdown()} and {@link Server#start()} to shut down and start the\n+ * {@link XdsClientWrapperForServerSds} object.\n+ */\n+final class ServerWrapperForXds extends Server {\n+  private final Server delegate;\n+  private final XdsClientWrapperForServerSds xdsClientWrapperForServerSds;\n+\n+  ServerWrapperForXds(Server delegate, XdsClientWrapperForServerSds xdsClientWrapperForServerSds) {\n+    this.delegate = checkNotNull(delegate, \"delegate\");\n+    this.xdsClientWrapperForServerSds =\n+        checkNotNull(xdsClientWrapperForServerSds, \"xdsClientWrapperForServerSds\");\n+  }\n+\n+  @Override\n+  public Server start() throws IOException {\n+    delegate.start();\n+    xdsClientWrapperForServerSds.start();", "originalCommit": "33871e1f23a26a2006a9ca3a9a2a3d1a7828fa4e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjIxNDMyNw==", "url": "https://github.com/grpc/grpc-java/pull/6978#discussion_r416214327", "bodyText": "delegate.start() can throw an IOException in which case we avoid starting the xdsClientWrapperForServerSds unnecessarily.  In terms of server depending on xdsClientWrapperForServerSds, having the reverse order doesn't guarantee anything: only when the xDS response arrives the server is ready to use the correct SslContext.", "author": "sanjaypujare", "createdAt": "2020-04-27T23:19:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjIwMDk4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjc2NDQ0NQ==", "url": "https://github.com/grpc/grpc-java/pull/6978#discussion_r416764445", "bodyText": "Not changing the order based on my previous comment", "author": "sanjaypujare", "createdAt": "2020-04-28T16:43:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjIwMDk4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjc4OTcyMA==", "url": "https://github.com/grpc/grpc-java/pull/6978#discussion_r416789720", "bodyText": "as discussed offline this raises concern about how we handle fallback in general. as the design is finalized, we will revisit.", "author": "creamsoup", "createdAt": "2020-04-28T17:21:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjIwMDk4Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjIwMjU0Ng==", "url": "https://github.com/grpc/grpc-java/pull/6978#discussion_r416202546", "body": "can you cleanup in @After.", "bodyText": "can you cleanup in @after.", "bodyHTML": "<p dir=\"auto\">can you cleanup in <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/after/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/after\">@after</a>.</p>", "author": "creamsoup", "createdAt": "2020-04-27T22:51:27Z", "path": "xds/src/test/java/io/grpc/xds/XdsClientWrapperForServerSdsTest.java", "diffHunk": "@@ -163,7 +164,8 @@ static void generateListenerUpdateToWatcher(\n   @Before\n   public void setUp() throws IOException {\n     MockitoAnnotations.initMocks(this);\n-    xdsClientWrapperForServerSds = new XdsClientWrapperForServerSds(PORT, xdsClient, null);\n+    xdsClientWrapperForServerSds = new XdsClientWrapperForServerSds(PORT);\n+    xdsClientWrapperForServerSds.start(xdsClient);", "originalCommit": "33871e1f23a26a2006a9ca3a9a2a3d1a7828fa4e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjc2MjY0Ng==", "url": "https://github.com/grpc/grpc-java/pull/6978#discussion_r416762646", "bodyText": "start(xdsClient) just sets up a watch but in this case xdsClient is supposed to be a mock so there is nothing to clean up here. Agree?", "author": "sanjaypujare", "createdAt": "2020-04-28T16:41:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjIwMjU0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjc4OTgwNA==", "url": "https://github.com/grpc/grpc-java/pull/6978#discussion_r416789804", "bodyText": "i think timeServiceResource still need to be cleaned.", "author": "creamsoup", "createdAt": "2020-04-28T17:22:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjIwMjU0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjc5Njg1OQ==", "url": "https://github.com/grpc/grpc-java/pull/6978#discussion_r416796859", "bodyText": "timeServiceResource is not touched in the tests which call only start(xdsClient) . Mainline code calls start() which uses timeServiceResource. Pls verify", "author": "sanjaypujare", "createdAt": "2020-04-28T17:32:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjIwMjU0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjgwMTQ3Mg==", "url": "https://github.com/grpc/grpc-java/pull/6978#discussion_r416801472", "bodyText": "okay it is not used. but i don't understand why you don't want to add cleanup? what's the downside? i can't think any downsides other than few positives.", "author": "creamsoup", "createdAt": "2020-04-28T17:40:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjIwMjU0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjgxMDQ1Mw==", "url": "https://github.com/grpc/grpc-java/pull/6978#discussion_r416810453", "bodyText": "There is no downside. What is there to call in cleanup? Just call xdsClientWrapperForServerSds.shutdown() knowing that it will have no effect? I am asking because having superfluous code can also look bad", "author": "sanjaypujare", "createdAt": "2020-04-28T17:53:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjIwMjU0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjgyMTgxNA==", "url": "https://github.com/grpc/grpc-java/pull/6978#discussion_r416821814", "bodyText": "maybe it is just for me, but calling start and not calling shutdown look bad. it almost feel like you don't call close for closeable because you maybe know the internal at that time.", "author": "creamsoup", "createdAt": "2020-04-28T18:11:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjIwMjU0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjgyMzk2OQ==", "url": "https://github.com/grpc/grpc-java/pull/6978#discussion_r416823969", "bodyText": "I don't mind adding the shutdown calls and I will add them. But I can see someone commenting that this is superfluous code. And I remember seeing those comments before.", "author": "sanjaypujare", "createdAt": "2020-04-28T18:15:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjIwMjU0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjgzMzkyMQ==", "url": "https://github.com/grpc/grpc-java/pull/6978#discussion_r416833921", "bodyText": "if your api design is calling shutdown only when it must be, i am fine with what you are saying.", "author": "creamsoup", "createdAt": "2020-04-28T18:31:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjIwMjU0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjgzNTA4MQ==", "url": "https://github.com/grpc/grpc-java/pull/6978#discussion_r416835081", "bodyText": "added", "author": "sanjaypujare", "createdAt": "2020-04-28T18:33:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjIwMjU0Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjIwMjY3NA==", "url": "https://github.com/grpc/grpc-java/pull/6978#discussion_r416202674", "body": "same here. cleanup the resource.", "bodyText": "same here. cleanup the resource.", "bodyHTML": "<p dir=\"auto\">same here. cleanup the resource.</p>", "author": "creamsoup", "createdAt": "2020-04-27T22:51:42Z", "path": "xds/src/test/java/io/grpc/xds/XdsClientWrapperForServerSdsTestMisc.java", "diffHunk": "@@ -55,7 +54,8 @@\n   @Before\n   public void setUp() throws IOException {\n     MockitoAnnotations.initMocks(this);\n-    xdsClientWrapperForServerSds = new XdsClientWrapperForServerSds(PORT, xdsClient, null);\n+    xdsClientWrapperForServerSds = new XdsClientWrapperForServerSds(PORT);\n+    xdsClientWrapperForServerSds.start(xdsClient);", "originalCommit": "33871e1f23a26a2006a9ca3a9a2a3d1a7828fa4e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjc2MzIwMA==", "url": "https://github.com/grpc/grpc-java/pull/6978#discussion_r416763200", "bodyText": "Same as above. There is no real client or a real connection to anything - so nothing to clean up AFAIS", "author": "sanjaypujare", "createdAt": "2020-04-28T16:42:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjIwMjY3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjgzNTE4Ng==", "url": "https://github.com/grpc/grpc-java/pull/6978#discussion_r416835186", "bodyText": "done", "author": "sanjaypujare", "createdAt": "2020-04-28T18:33:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjIwMjY3NA=="}], "type": "inlineReview"}, {"oid": "4835168dd098099c0dd37d458237f88eede3ddd5", "url": "https://github.com/grpc/grpc-java/commit/4835168dd098099c0dd37d458237f88eede3ddd5", "message": "address review comments", "committedDate": "2020-04-28T16:42:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjc5MjA3NQ==", "url": "https://github.com/grpc/grpc-java/pull/6978#discussion_r416792075", "body": "make sure the start can be called at most once. although it is programmer error, it will be very hard to debug resource leaks and random behavior due to internal reference changes.", "bodyText": "make sure the start can be called at most once. although it is programmer error, it will be very hard to debug resource leaks and random behavior due to internal reference changes.", "bodyHTML": "<p dir=\"auto\">make sure the start can be called at most once. although it is programmer error, it will be very hard to debug resource leaks and random behavior due to internal reference changes.</p>", "author": "creamsoup", "createdAt": "2020-04-28T17:25:30Z", "path": "xds/src/main/java/io/grpc/xds/XdsClientWrapperForServerSds.java", "diffHunk": "@@ -84,41 +84,76 @@ public ManagementServerNotFoundException(String msg) {\n   }\n \n   /**\n-   * Factory method for creating a {@link XdsClientWrapperForServerSds}.\n+   * Creates a {@link XdsClientWrapperForServerSds}.\n    *\n    * @param port server's port for which listener config is needed.\n-   * @param bootstrapper {@link Bootstrapper} instance to load bootstrap config.\n-   * @param syncContext {@link SynchronizationContext} needed by {@link XdsClient}.\n    */\n-  public static XdsClientWrapperForServerSds newInstance(\n-      int port, Bootstrapper bootstrapper, SynchronizationContext syncContext)\n-      throws IOException, ManagementServerNotFoundException {\n-    Bootstrapper.BootstrapInfo bootstrapInfo = bootstrapper.readBootstrap();\n-    final List<Bootstrapper.ServerInfo> serverList = bootstrapInfo.getServers();\n-    if (serverList.isEmpty()) {\n-      throw new ManagementServerNotFoundException(\"No management server provided by bootstrap\");\n+  public XdsClientWrapperForServerSds(int port) {\n+    this.port = port;\n+  }\n+\n+  private SynchronizationContext createSynchronizationContext() {\n+    final InternalLogId logId =\n+        InternalLogId.allocate(\"XdsClientWrapperForServerSds\", Integer.toString(port));\n+    return new SynchronizationContext(\n+        new Thread.UncaughtExceptionHandler() {\n+          // needed by syncContext\n+          private boolean panicMode;\n+\n+          @Override\n+          public void uncaughtException(Thread t, Throwable e) {\n+            logger.log(\n+                Level.SEVERE,\n+                \"[\" + logId + \"] Uncaught exception in the SynchronizationContext. Panic!\",\n+                e);\n+            panic(e);\n+          }\n+\n+          void panic(final Throwable t) {\n+            if (panicMode) {\n+              // Preserve the first panic information\n+              return;\n+            }\n+            panicMode = true;\n+            shutdown();\n+          }\n+        });\n+  }\n+\n+  /** Creates an XdsClient and starts a watch. */\n+  public void start() {", "originalCommit": "4835168dd098099c0dd37d458237f88eede3ddd5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjgxNjE2Nw==", "url": "https://github.com/grpc/grpc-java/pull/6978#discussion_r416816167", "bodyText": "added the check in start(XdsClient xdsClient) which this one calls", "author": "sanjaypujare", "createdAt": "2020-04-28T18:02:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjc5MjA3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjgzNTM1MA==", "url": "https://github.com/grpc/grpc-java/pull/6978#discussion_r416835350", "bodyText": "this is not correct because internal state (timeService) is already mutated.", "author": "creamsoup", "createdAt": "2020-04-28T18:33:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjc5MjA3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjgzNjYzOA==", "url": "https://github.com/grpc/grpc-java/pull/6978#discussion_r416836638", "bodyText": "you are right. I will move it to the real \"start\" then", "author": "sanjaypujare", "createdAt": "2020-04-28T18:35:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjc5MjA3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzc2OTU3NA==", "url": "https://github.com/grpc/grpc-java/pull/6978#discussion_r417769574", "bodyText": "Done. I had to create another startForTestXdsClient() method just for the tests.", "author": "sanjaypujare", "createdAt": "2020-04-30T05:53:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjc5MjA3NQ=="}], "type": "inlineReview"}, {"oid": "2a9026deb5bb852c5b4c86c627c56d2ab02b031a", "url": "https://github.com/grpc/grpc-java/commit/2a9026deb5bb852c5b4c86c627c56d2ab02b031a", "message": "address review comments - set 2", "committedDate": "2020-04-28T18:01:40Z", "type": "commit"}, {"oid": "eb5bde4b9d9b63259af54e222980f381f21ee55f", "url": "https://github.com/grpc/grpc-java/commit/eb5bde4b9d9b63259af54e222980f381f21ee55f", "message": "address review comments - set 3", "committedDate": "2020-04-28T18:32:45Z", "type": "commit"}, {"oid": "39257ad69ab098a319f1704a647d9ba015bb5fa0", "url": "https://github.com/grpc/grpc-java/commit/39257ad69ab098a319f1704a647d9ba015bb5fa0", "message": "add check for start call", "committedDate": "2020-04-30T05:47:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODEzNzI3Mw==", "url": "https://github.com/grpc/grpc-java/pull/6978#discussion_r418137273", "body": "why we need this? test seems fine with using the start", "bodyText": "why we need this? test seems fine with using the start", "bodyHTML": "<p dir=\"auto\">why we need this? test seems fine with using the start</p>", "author": "creamsoup", "createdAt": "2020-04-30T16:29:15Z", "path": "xds/src/main/java/io/grpc/xds/internal/sds/ServerWrapperForXds.java", "diffHunk": "@@ -48,6 +50,12 @@ public Server start() throws IOException {\n     return this;\n   }\n \n+  @VisibleForTesting\n+  public Server startForTestXdsClient() throws IOException {", "originalCommit": "39257ad69ab098a319f1704a647d9ba015bb5fa0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODE0MjExNA==", "url": "https://github.com/grpc/grpc-java/pull/6978#discussion_r418142114", "bodyText": "This is needed for tests in XdsSdsClientServerTest. To avoid an actual XDS server, I use a mock XDS client that I inject using XdsClientWrapperForServerSds.start(XdsClient xdsClient). So when a regular ServerWrapperForXds.start is called I get the \"start() called more than once\" exception. Under the circumstances I thought this was the best solution.", "author": "sanjaypujare", "createdAt": "2020-04-30T16:37:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODEzNzI3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODE2NTE0NQ==", "url": "https://github.com/grpc/grpc-java/pull/6978#discussion_r418165145", "bodyText": "The other option is to remove the check for \"start() called more than once\" and instead silently return from XdsClientWrapperForServerSds.start() if xdsClient is set. Since end users never use XdsClientWrapperForServerSds directly this may not be too bad.", "author": "sanjaypujare", "createdAt": "2020-04-30T17:16:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODEzNzI3Mw=="}], "type": "inlineReview"}, {"oid": "83f91692f840eba89ee95ee37e3380c928c4830b", "url": "https://github.com/grpc/grpc-java/commit/83f91692f840eba89ee95ee37e3380c928c4830b", "message": "start semantics improved", "committedDate": "2020-05-04T05:43:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU1NzUzNg==", "url": "https://github.com/grpc/grpc-java/pull/6978#discussion_r419557536", "body": "can you add null check here?", "bodyText": "can you add null check here?", "bodyHTML": "<p dir=\"auto\">can you add null check here?</p>", "author": "creamsoup", "createdAt": "2020-05-04T16:18:30Z", "path": "xds/src/main/java/io/grpc/xds/XdsClientWrapperForServerSds.java", "diffHunk": "@@ -84,41 +84,82 @@ public ManagementServerNotFoundException(String msg) {\n   }\n \n   /**\n-   * Factory method for creating a {@link XdsClientWrapperForServerSds}.\n+   * Creates a {@link XdsClientWrapperForServerSds}.\n    *\n    * @param port server's port for which listener config is needed.\n-   * @param bootstrapper {@link Bootstrapper} instance to load bootstrap config.\n-   * @param syncContext {@link SynchronizationContext} needed by {@link XdsClient}.\n    */\n-  public static XdsClientWrapperForServerSds newInstance(\n-      int port, Bootstrapper bootstrapper, SynchronizationContext syncContext)\n-      throws IOException, ManagementServerNotFoundException {\n-    Bootstrapper.BootstrapInfo bootstrapInfo = bootstrapper.readBootstrap();\n-    final List<Bootstrapper.ServerInfo> serverList = bootstrapInfo.getServers();\n-    if (serverList.isEmpty()) {\n-      throw new ManagementServerNotFoundException(\"No management server provided by bootstrap\");\n+  public XdsClientWrapperForServerSds(int port) {\n+    this.port = port;\n+  }\n+\n+  private SynchronizationContext createSynchronizationContext() {\n+    final InternalLogId logId =\n+        InternalLogId.allocate(\"XdsClientWrapperForServerSds\", Integer.toString(port));\n+    return new SynchronizationContext(\n+        new Thread.UncaughtExceptionHandler() {\n+          // needed by syncContext\n+          private boolean panicMode;\n+\n+          @Override\n+          public void uncaughtException(Thread t, Throwable e) {\n+            logger.log(\n+                Level.SEVERE,\n+                \"[\" + logId + \"] Uncaught exception in the SynchronizationContext. Panic!\",\n+                e);\n+            panic(e);\n+          }\n+\n+          void panic(final Throwable t) {\n+            if (panicMode) {\n+              // Preserve the first panic information\n+              return;\n+            }\n+            panicMode = true;\n+            shutdown();\n+          }\n+        });\n+  }\n+\n+  public boolean hasXdsClient() {\n+    return xdsClient != null;\n+  }\n+\n+  /** Creates an XdsClient and starts a watch. */\n+  public void createXdsClientAndStart() {\n+    checkState(xdsClient == null, \"start() called more than once\");\n+    Bootstrapper.BootstrapInfo bootstrapInfo;\n+    List<Bootstrapper.ServerInfo> serverList;\n+    try {\n+      bootstrapInfo = Bootstrapper.getInstance().readBootstrap();\n+      serverList = bootstrapInfo.getServers();\n+      if (serverList.isEmpty()) {\n+        throw new ManagementServerNotFoundException(\"No management server provided by bootstrap\");\n+      }\n+    } catch (IOException | ManagementServerNotFoundException e) {\n+      logger.log(Level.FINE, \"Exception reading bootstrap\", e);\n+      logger.log(Level.INFO, \"Fallback to plaintext for server at port {0}\", port);\n+      return;\n     }\n-    final Node node = bootstrapInfo.getNode();\n-    ScheduledExecutorService timeService = SharedResourceHolder.get(timeServiceResource);\n+    Node node = bootstrapInfo.getNode();\n+    timeService = SharedResourceHolder.get(timeServiceResource);\n     XdsClientImpl xdsClientImpl =\n         new XdsClientImpl(\n             \"\",\n             serverList,\n             XdsClient.XdsChannelFactory.getInstance(),\n             node,\n-            syncContext,\n+            createSynchronizationContext(),\n             timeService,\n             new ExponentialBackoffPolicy.Provider(),\n             GrpcUtil.STOPWATCH_SUPPLIER);\n-    return new XdsClientWrapperForServerSds(port, xdsClientImpl, timeService);\n+    start(xdsClientImpl);\n   }\n \n+  /** Accepts an XdsClient and starts a watch. */\n   @VisibleForTesting\n-  XdsClientWrapperForServerSds(int port, XdsClient xdsClient,\n-      ScheduledExecutorService timeService) {\n-    this.port = port;\n+  public void start(XdsClient xdsClient) {\n+    checkState(this.xdsClient == null, \"start() called more than once\");\n     this.xdsClient = xdsClient;", "originalCommit": "83f91692f840eba89ee95ee37e3380c928c4830b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU2ODI5NA==", "url": "https://github.com/grpc/grpc-java/pull/6978#discussion_r419568294", "bodyText": "done", "author": "sanjaypujare", "createdAt": "2020-05-04T16:34:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU1NzUzNg=="}], "type": "inlineReview"}, {"oid": "c423e4281df87896f410e62ec6c07029e4454c80", "url": "https://github.com/grpc/grpc-java/commit/c423e4281df87896f410e62ec6c07029e4454c80", "message": "address review comment - next set", "committedDate": "2020-05-04T16:33:16Z", "type": "commit"}]}