{"pr_number": 4442, "pr_title": "[JENKINS-60848] Improve RSS title wording + Add more RSS tests", "pr_author": "jeffret-b", "pr_createdAt": "2020-01-20T21:58:12Z", "pr_url": "https://github.com/jenkinsci/jenkins/pull/4442", "timeline": [{"oid": "3ff813649621cd536b48965d8fe112e91fde65ba", "url": "https://github.com/jenkinsci/jenkins/commit/3ff813649621cd536b48965d8fe112e91fde65ba", "message": "Add more tests.\n\nAlso a little cleanup of RSS.\nFix the broken \"All all ...\" title and description.\nRemove a long unused bit for never implemented trackback.", "committedDate": "2020-01-20T21:51:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODkxNTc0MA==", "url": "https://github.com/jenkinsci/jenkins/pull/4442#discussion_r368915740", "body": "> Fix the broken \"All all ...\" title\r\n\r\nNot sure it's a bug as the default view is called \"All\", as the code adds \"all builds\" as it's the option chosen for RSS (compared to \"failed builds\"). I would say it's an improvement, if desired.\r\n\r\n\"if desired\" => we are not correcting the behavior here, just hiding the symptom. For example, in french, the default view is called \"Tous\" (= All in english), and the RSS will have as title and description: \"Tous all builds\". ~Perhaps a \"better\" way to change this is to just put a \":\", like `All: all builds`.~\r\n\r\nSecond thoughts: after having seen the rssHeader.jelly, I am convinced we need to change the behavior, but not in the way proposed.", "bodyText": "Fix the broken \"All all ...\" title\n\nNot sure it's a bug as the default view is called \"All\", as the code adds \"all builds\" as it's the option chosen for RSS (compared to \"failed builds\"). I would say it's an improvement, if desired.\n\"if desired\" => we are not correcting the behavior here, just hiding the symptom. For example, in french, the default view is called \"Tous\" (= All in english), and the RSS will have as title and description: \"Tous all builds\". Perhaps a \"better\" way to change this is to just put a \":\", like All: all builds.\nSecond thoughts: after having seen the rssHeader.jelly, I am convinced we need to change the behavior, but not in the way proposed.", "bodyHTML": "<blockquote>\n<p dir=\"auto\">Fix the broken \"All all ...\" title</p>\n</blockquote>\n<p dir=\"auto\">Not sure it's a bug as the default view is called \"All\", as the code adds \"all builds\" as it's the option chosen for RSS (compared to \"failed builds\"). I would say it's an improvement, if desired.</p>\n<p dir=\"auto\">\"if desired\" =&gt; we are not correcting the behavior here, just hiding the symptom. For example, in french, the default view is called \"Tous\" (= All in english), and the RSS will have as title and description: \"Tous all builds\". <del>Perhaps a \"better\" way to change this is to just put a \":\", like <code>All: all builds</code>.</del></p>\n<p dir=\"auto\">Second thoughts: after having seen the rssHeader.jelly, I am convinced we need to change the behavior, but not in the way proposed.</p>", "author": "Wadeck", "createdAt": "2020-01-21T10:19:12Z", "path": "core/src/main/java/hudson/model/RSS.java", "diffHunk": "@@ -75,7 +56,14 @@ public static void doTrackback( Object it, StaplerRequest req, StaplerResponse r\n      */\n     public static <E> void forwardToRss(String title, String url, Collection<? extends E> entries, FeedAdapter<E> adapter, StaplerRequest req, HttpServletResponse rsp) throws IOException, ServletException {\n         req.setAttribute(\"adapter\",adapter);\n-        req.setAttribute(\"title\",title);\n+        String fixedTitle = title;\n+        String brokenFragment = \"All all \";\n+        if (title.startsWith(brokenFragment)) {\n+            StringBuilder fixing = new StringBuilder(\"All \");\n+            fixing.append(title.substring(brokenFragment.length()));\n+            fixedTitle = fixing.toString();\n+        }\n+        req.setAttribute(\"title\",fixedTitle);", "originalCommit": "3ff813649621cd536b48965d8fe112e91fde65ba", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI1NTMwNA==", "url": "https://github.com/jenkinsci/jenkins/pull/4442#discussion_r369255304", "bodyText": "What's your proposal here Wadeck? \"All all builds\" is pretty bad.", "author": "jeffret-b", "createdAt": "2020-01-21T21:35:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODkxNTc0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI1ODI5NA==", "url": "https://github.com/jenkinsci/jenkins/pull/4442#discussion_r369258294", "bodyText": "Here's what it looks like in Thunderbird:\n\nIt doesn't make much sense to separate this fix out, though changing the title is better and it probably needs a ticket filed.", "author": "jeffret-b", "createdAt": "2020-01-21T21:42:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODkxNTc0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQxMDg4MQ==", "url": "https://github.com/jenkinsci/jenkins/pull/4442#discussion_r369410881", "bodyText": "As the RSS titles are potentially more debatable, I am in favor of separating the addition of test and the change on the title / description.\nThe proposal would be to just apply the same naming as in the header => Jenkins:all (all builds)", "author": "Wadeck", "createdAt": "2020-01-22T07:54:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODkxNTc0MA=="}], "type": "inlineReview", "revised_code": {"commit": "f379a9a7f41d83135898de043e5eac9e538c2561", "changed_code": [{"header": "diff --git a/core/src/main/java/hudson/model/RSS.java b/core/src/main/java/hudson/model/RSS.java\nindex 4cd348a2ca..ab9177ccc8 100644\n--- a/core/src/main/java/hudson/model/RSS.java\n+++ b/core/src/main/java/hudson/model/RSS.java\n", "chunk": "@@ -56,14 +55,7 @@ public final class RSS {\n      */\n     public static <E> void forwardToRss(String title, String url, Collection<? extends E> entries, FeedAdapter<E> adapter, StaplerRequest req, HttpServletResponse rsp) throws IOException, ServletException {\n         req.setAttribute(\"adapter\",adapter);\n-        String fixedTitle = title;\n-        String brokenFragment = \"All all \";\n-        if (title.startsWith(brokenFragment)) {\n-            StringBuilder fixing = new StringBuilder(\"All \");\n-            fixing.append(title.substring(brokenFragment.length()));\n-            fixedTitle = fixing.toString();\n-        }\n-        req.setAttribute(\"title\",fixedTitle);\n+        req.setAttribute(\"title\",title);\n         req.setAttribute(\"url\",url);\n         req.setAttribute(\"entries\",entries);\n \n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODkzNzA3Ng==", "url": "https://github.com/jenkinsci/jenkins/pull/4442#discussion_r368937076", "body": ":x: Does not cover the regression corrected by https://github.com/jenkinsci/jenkins/pull/4148. The \"published\" was empty and so, is still not null.", "bodyText": "\u274c Does not cover the regression corrected by #4148. The \"published\" was empty and so, is still not null.", "bodyHTML": "<p dir=\"auto\"><g-emoji class=\"g-emoji\" alias=\"x\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/274c.png\">\u274c</g-emoji> Does not cover the regression corrected by <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"479047695\" data-permission-text=\"Title is private\" data-url=\"https://github.com/jenkinsci/jenkins/issues/4148\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/jenkinsci/jenkins/pull/4148/hovercard\" href=\"https://github.com/jenkinsci/jenkins/pull/4148\">#4148</a>. The \"published\" was empty and so, is still not null.</p>", "author": "Wadeck", "createdAt": "2020-01-21T11:02:54Z", "path": "test/src/test/java/hudson/model/RSSTest.java", "diffHunk": "@@ -63,16 +64,89 @@ public void absoluteURLsPresentInRSS_evenWithoutRootUrlSetup() throws Exception\n         assertAllRSSLinksContainRootUrl(allLinks);\n     }\n \n-    private XmlPage getRssAllPage() throws Exception {\n-        return (XmlPage) j.createWebClient().goTo(\"rssAll?flavor=rss20\", \"text/xml\");\n+    @Test\n+    public void checkInitialContentAllRss() throws Exception {\n+        XmlPage page = getRssAllPage();\n+        Document xmlDocument = page.getXmlDocument();\n+        Element documentElement = xmlDocument.getDocumentElement();\n+        assertThat(documentElement.getNodeName(), is(\"rss\"));\n+        assertThat(documentElement.getAttribute(\"version\"), is(\"2.0\"));\n+        assertThat(documentElement.getChildNodes().getLength(), is(1));\n+        Node channelNode = documentElement.getFirstChild();\n+        assertThat(channelNode.getNodeName(), is(\"channel\"));\n+        checkRssBasicNodes(channelNode, \"All builds\", 3);\n     }\n \n-    private void assertAllRSSLinksContainRootUrl(NodeList allLinks) throws Exception {\n-        for (int i = 0; i < allLinks.getLength(); i++) {\n-            Node item = allLinks.item(i);\n-            String url = item.getTextContent();\n-            assertThat(url, containsString(j.getURL().toString()));\n-        }\n+    @Test\n+    public void checkInitialContentFailedRss() throws Exception {\n+        XmlPage page = (XmlPage) j.createWebClient().goTo(\"rssFailed?flavor=rss20\", \"text/xml\");\n+        Document xmlDocument = page.getXmlDocument();\n+        Element documentElement = xmlDocument.getDocumentElement();\n+        assertThat(documentElement.getNodeName(), is(\"rss\"));\n+        assertThat(documentElement.getAttribute(\"version\"), is(\"2.0\"));\n+        assertThat(documentElement.getChildNodes().getLength(), is(1));\n+        Node channelNode = documentElement.getFirstChild();\n+        assertThat(channelNode.getNodeName(), is(\"channel\"));\n+        checkRssBasicNodes(channelNode, \"All failed builds\", 3);\n+    }\n+\n+    @Test\n+    public void checkInitialContentAllAtom() throws Exception {\n+        XmlPage page = getRssAllAtomPage();\n+        Document xmlDocument = page.getXmlDocument();\n+        Element documentElement = xmlDocument.getDocumentElement();\n+        assertThat(documentElement.getNodeName(), is(\"feed\"));\n+        checkAtomBasicNodes(documentElement, \"All builds\", 5);\n+    }\n+\n+    @Test\n+    public void checkWithSingleBuildAllRss() throws Exception {\n+        FreeStyleProject p = j.createFreeStyleProject();\n+        j.assertBuildStatusSuccess(p.scheduleBuild2(0));\n+\n+        XmlPage page = getRssAllPage();\n+        Document xmlDocument = page.getXmlDocument();\n+        Element documentElement = xmlDocument.getDocumentElement();\n+        assertThat(documentElement.getNodeName(), is(\"rss\"));\n+        assertThat(documentElement.getAttribute(\"version\"), is(\"2.0\"));\n+        assertThat(documentElement.getChildNodes().getLength(), is(1));\n+        Node channelNode = documentElement.getFirstChild();\n+        assertThat(channelNode.getNodeName(), is(\"channel\"));\n+        checkRssBasicNodes(channelNode, \"All builds\", 4);\n+        NodeList items = xmlDocument.getElementsByTagName(\"item\");\n+        assertThat(items.getLength(), is(1));\n+        Node firstBuild = items.item(0);\n+        assertThat(firstBuild.getChildNodes().getLength(), is(5));\n+        assertThat(getSingleNode(firstBuild, \"title\").getTextContent(), is(\"test0 #1 (stable)\"));\n+        assertNotNull(getSingleNode(firstBuild, \"pubDate\").getTextContent());\n+        assertNotNull(getSingleNode(firstBuild, \"author\").getTextContent());\n+        Node guidNode = getSingleNode(firstBuild, \"guid\");\n+        assertThat(guidNode.getAttributes().getNamedItem(\"isPermaLink\").getTextContent(), is(\"false\"));\n+        assertNotNull(guidNode.getTextContent());\n+    }\n+\n+    @Test\n+    public void checkWithSingleBuildAllAtom() throws Exception {\n+        FreeStyleProject p = j.createFreeStyleProject();\n+        j.assertBuildStatusSuccess(p.scheduleBuild2(0));\n+\n+        XmlPage page = getRssAllAtomPage();\n+        Document xmlDocument = page.getXmlDocument();\n+        Element documentElement = xmlDocument.getDocumentElement();\n+        assertThat(documentElement.getNodeName(), is(\"feed\"));\n+        checkAtomBasicNodes(documentElement, \"All builds\", 6);\n+        NodeList entries = xmlDocument.getElementsByTagName(\"entry\");\n+        assertThat(entries.getLength(), is(1));\n+        Node firstBuild = entries.item(0);\n+        assertThat(firstBuild.getChildNodes().getLength(), is(5));\n+        assertThat(getSingleNode(firstBuild, \"title\").getTextContent(), is(\"test0 #1 (stable)\"));\n+        assertNotNull(getSingleNode(firstBuild, \"published\").getTextContent());", "originalCommit": "3ff813649621cd536b48965d8fe112e91fde65ba", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI4MDEwNg==", "url": "https://github.com/jenkinsci/jenkins/pull/4442#discussion_r369280106", "bodyText": "Added checks to validate the dates. There are advantages and disadvantages to canned data. It can mask or complicate other things. There isn't any real need for canned data here.", "author": "jeffret-b", "createdAt": "2020-01-21T22:34:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODkzNzA3Ng=="}], "type": "inlineReview", "revised_code": {"commit": "0244339945447207df3007ff313a8452b010f4e0", "changed_code": [{"header": "diff --git a/test/src/test/java/hudson/model/RSSTest.java b/test/src/test/java/hudson/model/RSSTest.java\nindex cb977cd765..eb62861142 100644\n--- a/test/src/test/java/hudson/model/RSSTest.java\n+++ b/test/src/test/java/hudson/model/RSSTest.java\n", "chunk": "@@ -140,8 +145,8 @@ public class RSSTest {\n         Node firstBuild = entries.item(0);\n         assertThat(firstBuild.getChildNodes().getLength(), is(5));\n         assertThat(getSingleNode(firstBuild, \"title\").getTextContent(), is(\"test0 #1 (stable)\"));\n-        assertNotNull(getSingleNode(firstBuild, \"published\").getTextContent());\n-        assertNotNull(getSingleNode(firstBuild, \"updated\").getTextContent());\n+        checkAtomTimeNode(firstBuild, \"published\");\n+        checkAtomTimeNode(firstBuild, \"updated\");\n         assertNotNull(getSingleNode(firstBuild, \"id\").getTextContent());\n         Node linkNode = getSingleNode(firstBuild, \"link\");\n         assertThat(linkNode.getAttributes().getNamedItem(\"rel\").getTextContent(), is(\"alternate\"));\n", "next_change": {"commit": "f379a9a7f41d83135898de043e5eac9e538c2561", "changed_code": [{"header": "diff --git a/test/src/test/java/hudson/model/RSSTest.java b/test/src/test/java/hudson/model/RSSTest.java\nindex eb62861142..1a573dea0d 100644\n--- a/test/src/test/java/hudson/model/RSSTest.java\n+++ b/test/src/test/java/hudson/model/RSSTest.java\n", "chunk": "@@ -70,101 +81,77 @@ public class RSSTest {\n     }\n \n     @Test\n-    public void checkInitialContentAllRss() throws Exception {\n-        XmlPage page = getRssAllPage();\n-        Document xmlDocument = page.getXmlDocument();\n-        Element documentElement = xmlDocument.getDocumentElement();\n-        assertThat(documentElement.getNodeName(), is(\"rss\"));\n-        assertThat(documentElement.getAttribute(\"version\"), is(\"2.0\"));\n-        assertThat(documentElement.getChildNodes().getLength(), is(1));\n-        Node channelNode = documentElement.getFirstChild();\n-        assertThat(channelNode.getNodeName(), is(\"channel\"));\n-        checkRssBasicNodes(channelNode, \"All builds\", 3);\n+    public void checkInitialContent_Rss_All_AllView() throws Exception {\n+        String pathPrefix = ROOT_PATH_PREFIX;\n+        int expectedNodes = 3;\n+        XmlPage page = getRssAllPage(pathPrefix);\n+        Node channelNode = checkRssWrapperNodes(page.getXmlDocument());\n+        checkRssBasicNodes(channelNode, \"Jenkins:All (all builds)\", expectedNodes, pathPrefix);\n     }\n \n     @Test\n-    public void checkInitialContentFailedRss() throws Exception {\n-        XmlPage page = (XmlPage) j.createWebClient().goTo(\"rssFailed?flavor=rss20\", \"text/xml\");\n-        Document xmlDocument = page.getXmlDocument();\n-        Element documentElement = xmlDocument.getDocumentElement();\n-        assertThat(documentElement.getNodeName(), is(\"rss\"));\n-        assertThat(documentElement.getAttribute(\"version\"), is(\"2.0\"));\n-        assertThat(documentElement.getChildNodes().getLength(), is(1));\n-        Node channelNode = documentElement.getFirstChild();\n-        assertThat(channelNode.getNodeName(), is(\"channel\"));\n-        checkRssBasicNodes(channelNode, \"All failed builds\", 3);\n+    public void checkInitialContent_Rss_Failed_AllView() throws Exception {\n+        String pathPrefix = ROOT_PATH_PREFIX;\n+        int expectedNodes = 3;\n+        XmlPage page = getRssFailedPage(pathPrefix);\n+        Node channelNode = checkRssWrapperNodes(page.getXmlDocument());\n+        checkRssBasicNodes(channelNode, \"Jenkins:All (failed builds)\", expectedNodes, pathPrefix);\n     }\n \n     @Test\n-    public void checkInitialContentAllAtom() throws Exception {\n+    public void checkInitialContent_Atom_All_AllView() throws Exception {\n+        int expectedNodes = 5;\n         XmlPage page = getRssAllAtomPage();\n-        Document xmlDocument = page.getXmlDocument();\n-        Element documentElement = xmlDocument.getDocumentElement();\n+        Element documentElement = page.getXmlDocument().getDocumentElement();\n         assertThat(documentElement.getNodeName(), is(\"feed\"));\n-        checkAtomBasicNodes(documentElement, \"All builds\", 5);\n+        checkAtomBasicNodes(documentElement, \"Jenkins:All (all builds)\", expectedNodes);\n     }\n \n     @Test\n-    public void checkWithSingleBuildAllRss() throws Exception {\n-        FreeStyleProject p = j.createFreeStyleProject();\n-        j.assertBuildStatusSuccess(p.scheduleBuild2(0));\n+    public void checkWithSingleBuild_Rss_All_AllView() throws Exception {\n+        runSuccessfulBuild();\n+\n+        String pathPrefix = ROOT_PATH_PREFIX;\n+        String displayName = \"All\";\n+        String buildType = ALL_BUILD_TYPE;\n+        String buildTitle = STABLE_BUILD_TITLE;\n+        XmlPage page = getRssAllPage(pathPrefix);\n+        checkSingleBuild_Rss(page, pathPrefix, displayName, buildType, buildTitle);\n+    }\n \n-        XmlPage page = getRssAllPage();\n-        Document xmlDocument = page.getXmlDocument();\n-        Element documentElement = xmlDocument.getDocumentElement();\n-        assertThat(documentElement.getNodeName(), is(\"rss\"));\n-        assertThat(documentElement.getAttribute(\"version\"), is(\"2.0\"));\n-        assertThat(documentElement.getChildNodes().getLength(), is(1));\n-        Node channelNode = documentElement.getFirstChild();\n-        assertThat(channelNode.getNodeName(), is(\"channel\"));\n-        checkRssBasicNodes(channelNode, \"All builds\", 4);\n-        NodeList items = xmlDocument.getElementsByTagName(\"item\");\n-        assertThat(items.getLength(), is(1));\n-        Node firstBuild = items.item(0);\n-        assertThat(firstBuild.getChildNodes().getLength(), is(5));\n-        assertThat(getSingleNode(firstBuild, \"title\").getTextContent(), is(\"test0 #1 (stable)\"));\n-        checkRssTimeNode(firstBuild, \"pubDate\");\n-        assertNotNull(getSingleNode(firstBuild, \"author\").getTextContent());\n-        Node guidNode = getSingleNode(firstBuild, \"guid\");\n-        assertThat(guidNode.getAttributes().getNamedItem(\"isPermaLink\").getTextContent(), is(\"false\"));\n-        assertNotNull(guidNode.getTextContent());\n+    @Test\n+    public void checkWithSingleBuild_Rss_Failed_AllView() throws Exception {\n+        runFailingBuild();\n+\n+        String pathPrefix = ROOT_PATH_PREFIX;\n+        String displayName = \"All\";\n+        String buildType = FAILED_BUILD_TYPE;\n+        String buildTitle = FAILED_BUILD_TITLE;\n+        XmlPage page = getRssFailedPage(pathPrefix);\n+        checkSingleBuild_Rss(page, pathPrefix, displayName, buildType, buildTitle);\n     }\n \n     @Test\n-    public void checkWithSingleBuildAllAtom() throws Exception {\n-        FreeStyleProject p = j.createFreeStyleProject();\n-        j.assertBuildStatusSuccess(p.scheduleBuild2(0));\n+    public void checkWithSingleBuild_Atom_All_AllView() throws Exception {\n+        runSuccessfulBuild();\n \n+        String displayName = \"All\";\n+        String buildType = ALL_BUILD_TYPE;\n+        String buildTitle = STABLE_BUILD_TITLE;\n         XmlPage page = getRssAllAtomPage();\n-        Document xmlDocument = page.getXmlDocument();\n-        Element documentElement = xmlDocument.getDocumentElement();\n-        assertThat(documentElement.getNodeName(), is(\"feed\"));\n-        checkAtomBasicNodes(documentElement, \"All builds\", 6);\n-        NodeList entries = xmlDocument.getElementsByTagName(\"entry\");\n-        assertThat(entries.getLength(), is(1));\n-        Node firstBuild = entries.item(0);\n-        assertThat(firstBuild.getChildNodes().getLength(), is(5));\n-        assertThat(getSingleNode(firstBuild, \"title\").getTextContent(), is(\"test0 #1 (stable)\"));\n-        checkAtomTimeNode(firstBuild, \"published\");\n-        checkAtomTimeNode(firstBuild, \"updated\");\n-        assertNotNull(getSingleNode(firstBuild, \"id\").getTextContent());\n-        Node linkNode = getSingleNode(firstBuild, \"link\");\n-        assertThat(linkNode.getAttributes().getNamedItem(\"rel\").getTextContent(), is(\"alternate\"));\n-        assertThat(linkNode.getAttributes().getNamedItem(\"type\").getTextContent(), is(\"text/html\"));\n-        assertThat(linkNode.getAttributes().getNamedItem(\"href\").getTextContent(), containsString(j.getURL().toString()));\n+        checkSingleBuild_Atom(page, displayName, buildType, buildTitle);\n     }\n \n     @Test\n     @Issue(\"JENKINS-59167\")\n-    public void absoluteURLsPresentInAtom_evenWithoutRootUrlSetup() throws Exception {\n+    public void absoluteURLsPresentInAtom_evenWithoutRootUrlSetup_View() throws Exception {\n         XmlPage page = getRssAllAtomPage();\n         NodeList allLinks = page.getXmlDocument().getElementsByTagName(\"link\");\n \n         assertEquals(1, allLinks.getLength());\n         assertAllAtomLinksContainRootUrl(allLinks);\n \n-        FreeStyleProject p = j.createFreeStyleProject();\n-        j.assertBuildStatusSuccess(p.scheduleBuild2(0));\n+        runSuccessfulBuild();\n \n         page = getRssAllAtomPage();\n         allLinks = page.getXmlDocument().getElementsByTagName(\"link\");\n", "next_change": null}]}}]}}, {"oid": "0244339945447207df3007ff313a8452b010f4e0", "url": "https://github.com/jenkinsci/jenkins/commit/0244339945447207df3007ff313a8452b010f4e0", "message": "Increase date time checks.", "committedDate": "2020-01-21T22:25:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQyMTE5NA==", "url": "https://github.com/jenkinsci/jenkins/pull/4442#discussion_r369421194", "body": "```suggestion\r\n        Date date = formatter.parse(pubDate);\r\n```\r\n\r\nOtherwise the test does not test what you want.\r\n\r\nAdditionnally, the `parse` will throw an exception if the date is not parseable, so the `assertNotNull` does not provide any value except confusion.", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Date date = formatter.parse(\"Sat, 24 Apr 2010 14:01:00 GMT\");\n          \n          \n            \n                    Date date = formatter.parse(pubDate);\n          \n      \n    \n    \n  \n\nOtherwise the test does not test what you want.\nAdditionnally, the parse will throw an exception if the date is not parseable, so the assertNotNull does not provide any value except confusion.", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-smi\">Date</span> date <span class=\"pl-k\">=</span> formatter<span class=\"pl-k\">.</span>parse(<span class=\"pl-s\"><span class=\"pl-pds x x-first\">\"</span><span class=\"x\">Sat, 24 Apr 2010 14:01:00 GMT</span><span class=\"pl-pds x x-last\">\"</span></span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-smi\">Date</span> date <span class=\"pl-k\">=</span> formatter<span class=\"pl-k\">.</span>parse(<span class=\"x x-first x-last\">pubDate</span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\">Otherwise the test does not test what you want.</p>\n<p dir=\"auto\">Additionnally, the <code>parse</code> will throw an exception if the date is not parseable, so the <code>assertNotNull</code> does not provide any value except confusion.</p>", "author": "Wadeck", "createdAt": "2020-01-22T08:24:16Z", "path": "test/src/test/java/hudson/model/RSSTest.java", "diffHunk": "@@ -135,6 +201,86 @@ public void latestBuilds() throws Exception {\n         assertEquals(6, allLinks.getLength());\n     }\n \n+    private void checkRssBasicNodes(Node channelNode, String expectedTitle, int expectedNodes) throws IOException {\n+        assertThat(channelNode.getChildNodes().getLength(), is(expectedNodes));\n+        assertThat(getSingleNode(channelNode, \"link\").getTextContent(), is(j.getURL().toString()));\n+        assertThat(getSingleNode(channelNode, \"description\").getTextContent(), is(expectedTitle));\n+        assertThat(getSingleNode(channelNode, \"title\").getTextContent(), is(expectedTitle));\n+    }\n+\n+    private void checkAtomBasicNodes(Node feedNode, String expectedTitle, int expectedNodes) throws IOException {\n+        assertThat(feedNode.getChildNodes().getLength(), is(expectedNodes));\n+        Node linkNode = getSingleNode(feedNode, \"link\");\n+        assertThat(linkNode.getAttributes().getNamedItem(\"rel\").getTextContent(), is(\"alternate\"));\n+        assertThat(linkNode.getAttributes().getNamedItem(\"type\").getTextContent(), is(\"text/html\"));\n+        assertThat(linkNode.getAttributes().getNamedItem(\"href\").getTextContent(), is(j.getURL().toString()));\n+        assertNotNull(getSingleNode(feedNode, \"updated\"));\n+        assertThat(getSingleNode(feedNode, \"title\").getTextContent(), is(expectedTitle));\n+        Node authorNode = getSingleNode(feedNode, \"author\");\n+        NodeList authorNodes = authorNode.getChildNodes();\n+        assertThat(authorNodes.getLength(), is(1));\n+        Node nameNode = authorNodes.item(0);\n+        assertThat(nameNode.getTextContent(), is(\"Jenkins Server\"));\n+        Node idNode = getSingleNode(feedNode, \"id\");\n+        assertFalse(idNode.getTextContent().isEmpty());\n+    }\n+\n+    private Node getSingleNode(Node parentNode, String nodeName) {\n+        Node childNode = null;\n+        NodeList childNodes = parentNode.getChildNodes();\n+        for (int i = 0; i < childNodes.getLength(); i++) {\n+            if (childNodes.item(i).getNodeName().equals(nodeName)) {\n+                if (childNode == null) {\n+                    childNode = childNodes.item(i);\n+                } else {\n+                    fail(\"Too many children.\");\n+                }\n+            }\n+        }\n+        return childNode;\n+    }\n+\n+    private void checkRssTimeNode(Node firstBuild, String nodeName) throws ParseException {\n+        String pubDate = getSingleNode(firstBuild, nodeName).getTextContent();\n+        assertNotNull(pubDate);\n+        DateFormat formatter = new SimpleDateFormat(\"EEE, dd MMM yyyy HH:mm:ss zzz\");\n+        Date date = formatter.parse(\"Sat, 24 Apr 2010 14:01:00 GMT\");", "originalCommit": "0244339945447207df3007ff313a8452b010f4e0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTcxMDE2Nw==", "url": "https://github.com/jenkinsci/jenkins/pull/4442#discussion_r369710167", "bodyText": "I tried with and without. It felt kind of weird and more confusing to have it there without any assertion.", "author": "jeffret-b", "createdAt": "2020-01-22T17:50:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQyMTE5NA=="}], "type": "inlineReview", "revised_code": {"commit": "618604ed4e3f60a8574d21201d1bfabd54236baa", "changed_code": [{"header": "diff --git a/test/src/test/java/hudson/model/RSSTest.java b/test/src/test/java/hudson/model/RSSTest.java\nindex eb62861142..198fb4c7b6 100644\n--- a/test/src/test/java/hudson/model/RSSTest.java\n+++ b/test/src/test/java/hudson/model/RSSTest.java\n", "chunk": "@@ -244,7 +244,7 @@ public class RSSTest {\n         String pubDate = getSingleNode(firstBuild, nodeName).getTextContent();\n         assertNotNull(pubDate);\n         DateFormat formatter = new SimpleDateFormat(\"EEE, dd MMM yyyy HH:mm:ss zzz\");\n-        Date date = formatter.parse(\"Sat, 24 Apr 2010 14:01:00 GMT\");\n+        Date date = formatter.parse(pubDate);\n         assertNotNull(date);\n     }\n \n", "next_change": {"commit": "d65241e9103cea418ea09a25126fcfc7b45b32bd", "changed_code": [{"header": "diff --git a/test/src/test/java/hudson/model/RSSTest.java b/test/src/test/java/hudson/model/RSSTest.java\nindex 198fb4c7b6..aad940a16c 100644\n--- a/test/src/test/java/hudson/model/RSSTest.java\n+++ b/test/src/test/java/hudson/model/RSSTest.java\n", "chunk": "@@ -242,7 +242,7 @@ public class RSSTest {\n \n     private void checkRssTimeNode(Node firstBuild, String nodeName) throws ParseException {\n         String pubDate = getSingleNode(firstBuild, nodeName).getTextContent();\n-        assertNotNull(pubDate);\n+        assertThat(pubDate, not(emptyString()));\n         DateFormat formatter = new SimpleDateFormat(\"EEE, dd MMM yyyy HH:mm:ss zzz\");\n         Date date = formatter.parse(pubDate);\n         assertNotNull(date);\n", "next_change": {"commit": "f379a9a7f41d83135898de043e5eac9e538c2561", "changed_code": [{"header": "diff --git a/test/src/test/java/hudson/model/RSSTest.java b/test/src/test/java/hudson/model/RSSTest.java\nindex aad940a16c..1a573dea0d 100644\n--- a/test/src/test/java/hudson/model/RSSTest.java\n+++ b/test/src/test/java/hudson/model/RSSTest.java\n", "chunk": "@@ -242,9 +403,9 @@ public class RSSTest {\n \n     private void checkRssTimeNode(Node firstBuild, String nodeName) throws ParseException {\n         String pubDate = getSingleNode(firstBuild, nodeName).getTextContent();\n-        assertThat(pubDate, not(emptyString()));\n+        assertNotNull(pubDate);\n         DateFormat formatter = new SimpleDateFormat(\"EEE, dd MMM yyyy HH:mm:ss zzz\");\n-        Date date = formatter.parse(pubDate);\n+        Date date = formatter.parse(\"Sat, 24 Apr 2010 14:01:00 GMT\");\n         assertNotNull(date);\n     }\n \n", "next_change": {"commit": "12aaaee183a7c20c6e5632f7e8967e5dea4c3990", "changed_code": [{"header": "diff --git a/test/src/test/java/hudson/model/RSSTest.java b/test/src/test/java/hudson/model/RSSTest.java\nindex 1a573dea0d..f7a586c02a 100644\n--- a/test/src/test/java/hudson/model/RSSTest.java\n+++ b/test/src/test/java/hudson/model/RSSTest.java\n", "chunk": "@@ -403,9 +403,9 @@ public class RSSTest {\n \n     private void checkRssTimeNode(Node firstBuild, String nodeName) throws ParseException {\n         String pubDate = getSingleNode(firstBuild, nodeName).getTextContent();\n-        assertNotNull(pubDate);\n+        assertThat(pubDate, not(emptyString()));\n         DateFormat formatter = new SimpleDateFormat(\"EEE, dd MMM yyyy HH:mm:ss zzz\");\n-        Date date = formatter.parse(\"Sat, 24 Apr 2010 14:01:00 GMT\");\n+        Date date = formatter.parse(pubDate);\n         assertNotNull(date);\n     }\n \n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQyNTgwOA==", "url": "https://github.com/jenkinsci/jenkins/pull/4442#discussion_r369425808", "body": "```suggestion\r\n        assertThat(pubDate, not(emptyString()));\r\n```\r\n\r\n`getTextContent` never returns null. If the node does not exist, it's an NPE before the method being called.\r\nThat also prevent the next suggestion to not throw an exception if the string is empty.", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertNotNull(pubDate);\n          \n          \n            \n                    assertThat(pubDate, not(emptyString()));\n          \n      \n    \n    \n  \n\ngetTextContent never returns null. If the node does not exist, it's an NPE before the method being called.\nThat also prevent the next suggestion to not throw an exception if the string is empty.", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"x x-first x-last\">assertNotNull</span>(pubDate);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"x x-first x-last\">assertThat</span>(pubDate<span class=\"x x-first x-last\">, not(emptyString())</span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\"><code>getTextContent</code> never returns null. If the node does not exist, it's an NPE before the method being called.<br>\nThat also prevent the next suggestion to not throw an exception if the string is empty.</p>", "author": "Wadeck", "createdAt": "2020-01-22T08:35:52Z", "path": "test/src/test/java/hudson/model/RSSTest.java", "diffHunk": "@@ -135,6 +201,86 @@ public void latestBuilds() throws Exception {\n         assertEquals(6, allLinks.getLength());\n     }\n \n+    private void checkRssBasicNodes(Node channelNode, String expectedTitle, int expectedNodes) throws IOException {\n+        assertThat(channelNode.getChildNodes().getLength(), is(expectedNodes));\n+        assertThat(getSingleNode(channelNode, \"link\").getTextContent(), is(j.getURL().toString()));\n+        assertThat(getSingleNode(channelNode, \"description\").getTextContent(), is(expectedTitle));\n+        assertThat(getSingleNode(channelNode, \"title\").getTextContent(), is(expectedTitle));\n+    }\n+\n+    private void checkAtomBasicNodes(Node feedNode, String expectedTitle, int expectedNodes) throws IOException {\n+        assertThat(feedNode.getChildNodes().getLength(), is(expectedNodes));\n+        Node linkNode = getSingleNode(feedNode, \"link\");\n+        assertThat(linkNode.getAttributes().getNamedItem(\"rel\").getTextContent(), is(\"alternate\"));\n+        assertThat(linkNode.getAttributes().getNamedItem(\"type\").getTextContent(), is(\"text/html\"));\n+        assertThat(linkNode.getAttributes().getNamedItem(\"href\").getTextContent(), is(j.getURL().toString()));\n+        assertNotNull(getSingleNode(feedNode, \"updated\"));\n+        assertThat(getSingleNode(feedNode, \"title\").getTextContent(), is(expectedTitle));\n+        Node authorNode = getSingleNode(feedNode, \"author\");\n+        NodeList authorNodes = authorNode.getChildNodes();\n+        assertThat(authorNodes.getLength(), is(1));\n+        Node nameNode = authorNodes.item(0);\n+        assertThat(nameNode.getTextContent(), is(\"Jenkins Server\"));\n+        Node idNode = getSingleNode(feedNode, \"id\");\n+        assertFalse(idNode.getTextContent().isEmpty());\n+    }\n+\n+    private Node getSingleNode(Node parentNode, String nodeName) {\n+        Node childNode = null;\n+        NodeList childNodes = parentNode.getChildNodes();\n+        for (int i = 0; i < childNodes.getLength(); i++) {\n+            if (childNodes.item(i).getNodeName().equals(nodeName)) {\n+                if (childNode == null) {\n+                    childNode = childNodes.item(i);\n+                } else {\n+                    fail(\"Too many children.\");\n+                }\n+            }\n+        }\n+        return childNode;\n+    }\n+\n+    private void checkRssTimeNode(Node firstBuild, String nodeName) throws ParseException {\n+        String pubDate = getSingleNode(firstBuild, nodeName).getTextContent();\n+        assertNotNull(pubDate);", "originalCommit": "0244339945447207df3007ff313a8452b010f4e0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "618604ed4e3f60a8574d21201d1bfabd54236baa", "changed_code": [{"header": "diff --git a/test/src/test/java/hudson/model/RSSTest.java b/test/src/test/java/hudson/model/RSSTest.java\nindex eb62861142..198fb4c7b6 100644\n--- a/test/src/test/java/hudson/model/RSSTest.java\n+++ b/test/src/test/java/hudson/model/RSSTest.java\n", "chunk": "@@ -244,7 +244,7 @@ public class RSSTest {\n         String pubDate = getSingleNode(firstBuild, nodeName).getTextContent();\n         assertNotNull(pubDate);\n         DateFormat formatter = new SimpleDateFormat(\"EEE, dd MMM yyyy HH:mm:ss zzz\");\n-        Date date = formatter.parse(\"Sat, 24 Apr 2010 14:01:00 GMT\");\n+        Date date = formatter.parse(pubDate);\n         assertNotNull(date);\n     }\n \n", "next_change": {"commit": "d65241e9103cea418ea09a25126fcfc7b45b32bd", "changed_code": [{"header": "diff --git a/test/src/test/java/hudson/model/RSSTest.java b/test/src/test/java/hudson/model/RSSTest.java\nindex 198fb4c7b6..aad940a16c 100644\n--- a/test/src/test/java/hudson/model/RSSTest.java\n+++ b/test/src/test/java/hudson/model/RSSTest.java\n", "chunk": "@@ -242,7 +242,7 @@ public class RSSTest {\n \n     private void checkRssTimeNode(Node firstBuild, String nodeName) throws ParseException {\n         String pubDate = getSingleNode(firstBuild, nodeName).getTextContent();\n-        assertNotNull(pubDate);\n+        assertThat(pubDate, not(emptyString()));\n         DateFormat formatter = new SimpleDateFormat(\"EEE, dd MMM yyyy HH:mm:ss zzz\");\n         Date date = formatter.parse(pubDate);\n         assertNotNull(date);\n", "next_change": {"commit": "f379a9a7f41d83135898de043e5eac9e538c2561", "changed_code": [{"header": "diff --git a/test/src/test/java/hudson/model/RSSTest.java b/test/src/test/java/hudson/model/RSSTest.java\nindex aad940a16c..1a573dea0d 100644\n--- a/test/src/test/java/hudson/model/RSSTest.java\n+++ b/test/src/test/java/hudson/model/RSSTest.java\n", "chunk": "@@ -242,9 +403,9 @@ public class RSSTest {\n \n     private void checkRssTimeNode(Node firstBuild, String nodeName) throws ParseException {\n         String pubDate = getSingleNode(firstBuild, nodeName).getTextContent();\n-        assertThat(pubDate, not(emptyString()));\n+        assertNotNull(pubDate);\n         DateFormat formatter = new SimpleDateFormat(\"EEE, dd MMM yyyy HH:mm:ss zzz\");\n-        Date date = formatter.parse(pubDate);\n+        Date date = formatter.parse(\"Sat, 24 Apr 2010 14:01:00 GMT\");\n         assertNotNull(date);\n     }\n \n", "next_change": {"commit": "12aaaee183a7c20c6e5632f7e8967e5dea4c3990", "changed_code": [{"header": "diff --git a/test/src/test/java/hudson/model/RSSTest.java b/test/src/test/java/hudson/model/RSSTest.java\nindex 1a573dea0d..f7a586c02a 100644\n--- a/test/src/test/java/hudson/model/RSSTest.java\n+++ b/test/src/test/java/hudson/model/RSSTest.java\n", "chunk": "@@ -403,9 +403,9 @@ public class RSSTest {\n \n     private void checkRssTimeNode(Node firstBuild, String nodeName) throws ParseException {\n         String pubDate = getSingleNode(firstBuild, nodeName).getTextContent();\n-        assertNotNull(pubDate);\n+        assertThat(pubDate, not(emptyString()));\n         DateFormat formatter = new SimpleDateFormat(\"EEE, dd MMM yyyy HH:mm:ss zzz\");\n-        Date date = formatter.parse(\"Sat, 24 Apr 2010 14:01:00 GMT\");\n+        Date date = formatter.parse(pubDate);\n         assertNotNull(date);\n     }\n \n", "next_change": null}]}}]}}]}}]}}, {"oid": "618604ed4e3f60a8574d21201d1bfabd54236baa", "url": "https://github.com/jenkinsci/jenkins/commit/618604ed4e3f60a8574d21201d1bfabd54236baa", "message": "Copy and paste error.\n\nCo-Authored-By: Wadeck Follonier <Wadeck@users.noreply.github.com>", "committedDate": "2020-01-22T17:47:23Z", "type": "commit"}, {"oid": "d65241e9103cea418ea09a25126fcfc7b45b32bd", "url": "https://github.com/jenkinsci/jenkins/commit/d65241e9103cea418ea09a25126fcfc7b45b32bd", "message": "Assert not empty.\n\nCo-Authored-By: Wadeck Follonier <Wadeck@users.noreply.github.com>", "committedDate": "2020-01-22T17:50:58Z", "type": "commit"}, {"oid": "f379a9a7f41d83135898de043e5eac9e538c2561", "url": "https://github.com/jenkinsci/jenkins/commit/f379a9a7f41d83135898de043e5eac9e538c2561", "message": "Add a bunch more tests and clarify title.\n\nAdd a number of more tests. Test the various places that RSS is used.\nImprove title wording to something consistent and somewhat sensible.", "committedDate": "2020-01-23T21:12:18Z", "type": "commit"}, {"oid": "12aaaee183a7c20c6e5632f7e8967e5dea4c3990", "url": "https://github.com/jenkinsci/jenkins/commit/12aaaee183a7c20c6e5632f7e8967e5dea4c3990", "message": "Merge branch 'rssTestCoverage' of github.com:jeffret-b/jenkins into rssTestCoverage", "committedDate": "2020-01-23T21:13:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIyNzg5OA==", "url": "https://github.com/jenkinsci/jenkins/pull/4442#discussion_r375227898", "body": "I was unable to find any usages, but it would be great to have some binary compatibility analysis when such changes are submitted. Also not sure why it needs to be renamed", "bodyText": "I was unable to find any usages, but it would be great to have some binary compatibility analysis when such changes are submitted. Also not sure why it needs to be renamed", "bodyHTML": "<p dir=\"auto\">I was unable to find any usages, but it would be great to have some binary compatibility analysis when such changes are submitted. Also not sure why it needs to be renamed</p>", "author": "oleg-nenashev", "createdAt": "2020-02-05T12:31:14Z", "path": "core/src/main/java/hudson/model/RSS.java", "diffHunk": "@@ -42,25 +41,6 @@\n  */\n public final class RSS {\n \n-    /**\n-     * Parses trackback ping.\n-     */\n-    public static void doTrackback( Object it, StaplerRequest req, StaplerResponse rsp ) throws IOException, ServletException {", "originalCommit": "12aaaee183a7c20c6e5632f7e8967e5dea4c3990", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}