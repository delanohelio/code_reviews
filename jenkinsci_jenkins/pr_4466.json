{"pr_number": 4466, "pr_title": "[JENKINS-20052] Refactor ListView getItems", "pr_author": "res0nance", "pr_createdAt": "2020-01-31T02:25:17Z", "pr_url": "https://github.com/jenkinsci/jenkins/pull/4466", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzMyNzEyMQ==", "url": "https://github.com/jenkinsci/jenkins/pull/4466#discussion_r373327121", "body": "Probably should be refactored", "bodyText": "Probably should be refactored", "bodyHTML": "<p dir=\"auto\">Probably should be refactored</p>", "author": "res0nance", "createdAt": "2020-01-31T06:02:18Z", "path": "core/src/main/java/hudson/model/ListView.java", "diffHunk": "@@ -211,28 +212,57 @@ public boolean hasJobFilterExtensions() {\n         }\n \n         ItemGroup<? extends TopLevelItem> parent = getOwner().getItemGroup();\n-        List<TopLevelItem> parentItems = new ArrayList<>(parent.getItems());\n-        includeItems(parent, parentItems, names);\n \n         Boolean statusFilter = this.statusFilter; // capture the value to isolate us from concurrent update\n-        Iterable<? extends TopLevelItem> candidates;\n+        List<TopLevelItem> allItems;\n         if (recurse) {\n-            candidates = parent.getAllItems(TopLevelItem.class);\n+            allItems = parent.getAllItems(TopLevelItem.class);\n+            for (TopLevelItem item : allItems) {\n+                String itemName = item.getRelativeNameFrom(parent);\n+                for (String name : names) {\n+                    if (itemName.equals(name)) {\n+                        if (statusFilter == null || !(item instanceof ParameterizedJobMixIn.ParameterizedJob) // TODO or better to call the more generic Job.isBuildable?\n+                                || ((ParameterizedJobMixIn.ParameterizedJob) item).isDisabled() ^ statusFilter)\n+                            items.add(item);", "originalCommit": "f27fd78edcaf4f99410c8705227afe30df669468", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "29db74055708d6a7cdaed2680c6bc13a84a1c296", "changed_code": [{"header": "diff --git a/core/src/main/java/hudson/model/ListView.java b/core/src/main/java/hudson/model/ListView.java\nindex 364dfd9f11..232f56ff47 100644\n--- a/core/src/main/java/hudson/model/ListView.java\n+++ b/core/src/main/java/hudson/model/ListView.java\n", "chunk": "@@ -219,19 +219,12 @@ public class ListView extends View implements DirectlyModifiableView {\n             allItems = parent.getAllItems(TopLevelItem.class);\n             for (TopLevelItem item : allItems) {\n                 String itemName = item.getRelativeNameFrom(parent);\n-                for (String name : names) {\n-                    if (itemName.equals(name)) {\n-                        if (statusFilter == null || !(item instanceof ParameterizedJobMixIn.ParameterizedJob) // TODO or better to call the more generic Job.isBuildable?\n-                                || ((ParameterizedJobMixIn.ParameterizedJob) item).isDisabled() ^ statusFilter)\n-                            items.add(item);\n-                        continue;\n-                    }\n+                if (names.contains(itemName)) {\n+                    checkAddItem(statusFilter, items, item);\n                 }\n                 if (includePattern != null) {\n                     if (includePattern.matcher(itemName).matches()) {\n-                        if (statusFilter == null || !(item instanceof ParameterizedJobMixIn.ParameterizedJob) // TODO or better to call the more generic Job.isBuildable?\n-                                || ((ParameterizedJobMixIn.ParameterizedJob) item).isDisabled() ^ statusFilter)\n-                            items.add(item);\n+                        checkAddItem(statusFilter, items, item);\n                     }\n                 }\n             }\n", "next_change": {"commit": "fbe70d2327c8dd6fd915a7c08eb59f8cbd4f6e21", "changed_code": [{"header": "diff --git a/core/src/main/java/hudson/model/ListView.java b/core/src/main/java/hudson/model/ListView.java\nindex 232f56ff47..b0af7342c1 100644\n--- a/core/src/main/java/hudson/model/ListView.java\n+++ b/core/src/main/java/hudson/model/ListView.java\n", "chunk": "@@ -229,7 +230,6 @@ public class ListView extends View implements DirectlyModifiableView {\n                 }\n             }\n         } else {\n-            allItems = new ArrayList<>(parent.getItems());\n             for (String name : names) {\n                 try {\n                     TopLevelItem i = parent.getItem(name);\n", "next_change": {"commit": "ccf128a2d0b743b46bc5792ae3691a32023e8f43", "changed_code": [{"header": "diff --git a/core/src/main/java/hudson/model/ListView.java b/core/src/main/java/hudson/model/ListView.java\nindex b0af7342c1..ac8ece8ed9 100644\n--- a/core/src/main/java/hudson/model/ListView.java\n+++ b/core/src/main/java/hudson/model/ListView.java\n", "chunk": "@@ -213,19 +217,19 @@ public class ListView extends View implements DirectlyModifiableView {\n \n         ItemGroup<? extends TopLevelItem> parent = getOwner().getItemGroup();\n \n-        Boolean statusFilter = this.statusFilter; // capture the value to isolate us from concurrent update\n         Collection<ViewJobFilter> jobFilters = getJobFilters();\n         List<TopLevelItem> allItems = null;\n         if (recurse) {\n+            // Recursive case so we need all items down initialize allItems so filters can reuse it later\n             allItems = parent.getAllItems(TopLevelItem.class);\n             for (TopLevelItem item : allItems) {\n                 String itemName = item.getRelativeNameFrom(parent);\n                 if (names.contains(itemName)) {\n-                    checkAddItem(statusFilter, items, item);\n+                    items.add(item);\n                 }\n                 if (includePattern != null) {\n                     if (includePattern.matcher(itemName).matches()) {\n-                        checkAddItem(statusFilter, items, item);\n+                        items.add(item);\n                     }\n                 }\n             }\n", "next_change": {"commit": "bc9c862f324eab7584ca95bfb7bde97351bc49ce", "changed_code": [{"header": "diff --git a/core/src/main/java/hudson/model/ListView.java b/core/src/main/java/hudson/model/ListView.java\nindex ac8ece8ed9..8f97e25f05 100644\n--- a/core/src/main/java/hudson/model/ListView.java\n+++ b/core/src/main/java/hudson/model/ListView.java\n", "chunk": "@@ -218,21 +220,17 @@ public class ListView extends View implements DirectlyModifiableView {\n         ItemGroup<? extends TopLevelItem> parent = getOwner().getItemGroup();\n \n         Collection<ViewJobFilter> jobFilters = getJobFilters();\n-        List<TopLevelItem> allItems = null;\n         if (recurse) {\n-            // Recursive case so we need all items down initialize allItems so filters can reuse it later\n-            allItems = parent.getAllItems(TopLevelItem.class);\n-            for (TopLevelItem item : allItems) {\n+            items.addAll(parent.getAllItems(TopLevelItem.class, item -> {\n                 String itemName = item.getRelativeNameFrom(parent);\n                 if (names.contains(itemName)) {\n-                    items.add(item);\n+                    return true;\n                 }\n                 if (includePattern != null) {\n-                    if (includePattern.matcher(itemName).matches()) {\n-                        items.add(item);\n-                    }\n+                    return includePattern.matcher(itemName).matches();\n                 }\n-            }\n+                return false;\n+            }));\n         } else {\n             for (String name : names) {\n                 try {\n", "next_change": {"commit": "123f756f37eea8c988d4f5a48458dbb414a443d5", "changed_code": [{"header": "diff --git a/core/src/main/java/hudson/model/ListView.java b/core/src/main/java/hudson/model/ListView.java\nindex 8f97e25f05..f66b0d6289 100644\n--- a/core/src/main/java/hudson/model/ListView.java\n+++ b/core/src/main/java/hudson/model/ListView.java\n", "chunk": "@@ -219,18 +219,19 @@ public class ListView extends View implements DirectlyModifiableView {\n \n         ItemGroup<? extends TopLevelItem> parent = getOwner().getItemGroup();\n \n-        Collection<ViewJobFilter> jobFilters = getJobFilters();\n         if (recurse) {\n-            items.addAll(parent.getAllItems(TopLevelItem.class, item -> {\n-                String itemName = item.getRelativeNameFrom(parent);\n-                if (names.contains(itemName)) {\n-                    return true;\n-                }\n-                if (includePattern != null) {\n-                    return includePattern.matcher(itemName).matches();\n-                }\n-                return false;\n-            }));\n+            if (!names.isEmpty() || includePattern != null) {\n+                items.addAll(parent.getAllItems(TopLevelItem.class, item -> {\n+                    String itemName = item.getRelativeNameFrom(parent);\n+                    if (names.contains(itemName)) {\n+                        return true;\n+                    }\n+                    if (includePattern != null) {\n+                        return includePattern.matcher(itemName).matches();\n+                    }\n+                    return false;\n+                }));\n+            }\n         } else {\n             for (String name : names) {\n                 try {\n", "next_change": null}]}}]}}, {"header": "diff --git a/core/src/main/java/hudson/model/ListView.java b/core/src/main/java/hudson/model/ListView.java\nindex b0af7342c1..ac8ece8ed9 100644\n--- a/core/src/main/java/hudson/model/ListView.java\n+++ b/core/src/main/java/hudson/model/ListView.java\n", "chunk": "@@ -234,22 +238,22 @@ public class ListView extends View implements DirectlyModifiableView {\n                 try {\n                     TopLevelItem i = parent.getItem(name);\n                     if (i != null) {\n-                        checkAddItem(statusFilter, items, i);\n+                        items.add(i);\n                     }\n                 } catch (AccessDeniedException e) {\n                     //Ignore\n                 }\n             }\n-            //Only call getItems if there is a pattern or we have Job Filters\n             if (includePattern != null) {\n+                //We have to iterate child items just initialize allItems with the child items can be reused by filters\n                 allItems = new ArrayList<>(parent.getItems());\n                 for (TopLevelItem item : allItems) {\n                     String itemName = item.getRelativeNameFrom(parent);\n                     if (includePattern.matcher(itemName).matches()) {\n-                        checkAddItem(statusFilter, items, item);\n+                        items.add(item);\n                     }\n                 }\n-            } else if(!jobFilters.isEmpty()) {\n+            } else if(!jobFilters.isEmpty()) { //If there are job filters they need allItems initialized\n                 allItems = new ArrayList<>(parent.getItems());\n             }\n         }\n", "next_change": {"commit": "bc9c862f324eab7584ca95bfb7bde97351bc49ce", "changed_code": [{"header": "diff --git a/core/src/main/java/hudson/model/ListView.java b/core/src/main/java/hudson/model/ListView.java\nindex ac8ece8ed9..8f97e25f05 100644\n--- a/core/src/main/java/hudson/model/ListView.java\n+++ b/core/src/main/java/hudson/model/ListView.java\n", "chunk": "@@ -245,23 +243,20 @@ public class ListView extends View implements DirectlyModifiableView {\n                 }\n             }\n             if (includePattern != null) {\n-                //We have to iterate child items just initialize allItems with the child items can be reused by filters\n-                allItems = new ArrayList<>(parent.getItems());\n-                for (TopLevelItem item : allItems) {\n+                items.addAll(parent.getItems(item -> {\n                     String itemName = item.getRelativeNameFrom(parent);\n-                    if (includePattern.matcher(itemName).matches()) {\n-                        items.add(item);\n-                    }\n-                }\n-            } else if(!jobFilters.isEmpty()) { //If there are job filters they need allItems initialized\n-                allItems = new ArrayList<>(parent.getItems());\n+                    return includePattern.matcher(itemName).matches();\n+                }));\n             }\n         }\n \n-        // check the filters\n-    \tfor (ViewJobFilter jobFilter: jobFilters) {\n-    \t\titems = jobFilter.filter(items, allItems, this);\n-    \t}\n+        if (!jobFilters.isEmpty()) {\n+            List<TopLevelItem> candidates = recurse ? new ArrayList<>(parent.getItems()) : parent.getAllItems(TopLevelItem.class);\n+            // check the filters\n+            for (ViewJobFilter jobFilter : jobFilters) {\n+                items = jobFilter.filter(items, candidates, this);\n+            }\n+        }\n         // for sanity, trim off duplicates\n         items = new ArrayList<>(new LinkedHashSet<>(items));\n         \n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzMyNzMwOQ==", "url": "https://github.com/jenkinsci/jenkins/pull/4466#discussion_r373327309", "body": "Assumed that expand is the same as `parent.getAllItems()` in this case", "bodyText": "Assumed that expand is the same as parent.getAllItems() in this case", "bodyHTML": "<p dir=\"auto\">Assumed that expand is the same as <code>parent.getAllItems()</code> in this case</p>", "author": "res0nance", "createdAt": "2020-01-31T06:03:28Z", "path": "core/src/main/java/hudson/model/ListView.java", "diffHunk": "@@ -211,28 +212,57 @@ public boolean hasJobFilterExtensions() {\n         }\n \n         ItemGroup<? extends TopLevelItem> parent = getOwner().getItemGroup();\n-        List<TopLevelItem> parentItems = new ArrayList<>(parent.getItems());\n-        includeItems(parent, parentItems, names);\n \n         Boolean statusFilter = this.statusFilter; // capture the value to isolate us from concurrent update\n-        Iterable<? extends TopLevelItem> candidates;\n+        List<TopLevelItem> allItems;\n         if (recurse) {\n-            candidates = parent.getAllItems(TopLevelItem.class);\n+            allItems = parent.getAllItems(TopLevelItem.class);\n+            for (TopLevelItem item : allItems) {\n+                String itemName = item.getRelativeNameFrom(parent);\n+                for (String name : names) {\n+                    if (itemName.equals(name)) {\n+                        if (statusFilter == null || !(item instanceof ParameterizedJobMixIn.ParameterizedJob) // TODO or better to call the more generic Job.isBuildable?\n+                                || ((ParameterizedJobMixIn.ParameterizedJob) item).isDisabled() ^ statusFilter)\n+                            items.add(item);\n+                        continue;\n+                    }\n+                }\n+                if (includePattern != null) {\n+                    if (includePattern.matcher(itemName).matches()) {\n+                        if (statusFilter == null || !(item instanceof ParameterizedJobMixIn.ParameterizedJob) // TODO or better to call the more generic Job.isBuildable?\n+                                || ((ParameterizedJobMixIn.ParameterizedJob) item).isDisabled() ^ statusFilter)\n+                            items.add(item);\n+                    }\n+                }\n+            }\n         } else {\n-            candidates = parent.getItems();\n-        }\n-        for (TopLevelItem item : candidates) {\n-            if (!names.contains(item.getRelativeNameFrom(getOwner().getItemGroup()))) continue;\n-            // Add if no status filter or filter matches enabled/disabled status:\n-            if(statusFilter == null || !(item instanceof ParameterizedJobMixIn.ParameterizedJob) // TODO or better to call the more generic Job.isBuildable?\n-                              || ((ParameterizedJobMixIn.ParameterizedJob)item).isDisabled() ^ statusFilter)\n-                items.add(item);\n+            allItems = new ArrayList<>(parent.getItems());\n+            for (String name : names) {\n+                try {\n+                    TopLevelItem i = parent.getItem(name);\n+                    if (i != null) {\n+                        if(statusFilter == null || !(i instanceof ParameterizedJobMixIn.ParameterizedJob) // TODO or better to call the more generic Job.isBuildable?\n+                                || ((ParameterizedJobMixIn.ParameterizedJob)i).isDisabled() ^ statusFilter)\n+                            items.add(i);\n+                    }\n+                } catch (AccessDeniedException e) {\n+                    //Ignore\n+                }\n+            }\n+            if (includePattern != null) {\n+                for (TopLevelItem item : allItems) {\n+                    String itemName = item.getRelativeNameFrom(parent);\n+                    if (includePattern.matcher(itemName).matches()) {\n+                        if (statusFilter == null || !(item instanceof ParameterizedJobMixIn.ParameterizedJob) // TODO or better to call the more generic Job.isBuildable?\n+                                || ((ParameterizedJobMixIn.ParameterizedJob) item).isDisabled() ^ statusFilter)\n+                            items.add(item);\n+                    }\n+                }\n+            }\n         }\n \n         // check the filters\n         Iterable<ViewJobFilter> jobFilters = getJobFilters();\n-        List<TopLevelItem> allItems = new ArrayList<>(parentItems);\n-        if (recurse) allItems = expand(allItems, new ArrayList<>());", "originalCommit": "f27fd78edcaf4f99410c8705227afe30df669468", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "29db74055708d6a7cdaed2680c6bc13a84a1c296", "changed_code": [{"header": "diff --git a/core/src/main/java/hudson/model/ListView.java b/core/src/main/java/hudson/model/ListView.java\nindex 364dfd9f11..232f56ff47 100644\n--- a/core/src/main/java/hudson/model/ListView.java\n+++ b/core/src/main/java/hudson/model/ListView.java\n", "chunk": "@@ -253,9 +244,7 @@ public class ListView extends View implements DirectlyModifiableView {\n                 for (TopLevelItem item : allItems) {\n                     String itemName = item.getRelativeNameFrom(parent);\n                     if (includePattern.matcher(itemName).matches()) {\n-                        if (statusFilter == null || !(item instanceof ParameterizedJobMixIn.ParameterizedJob) // TODO or better to call the more generic Job.isBuildable?\n-                                || ((ParameterizedJobMixIn.ParameterizedJob) item).isDisabled() ^ statusFilter)\n-                            items.add(item);\n+                        checkAddItem(statusFilter, items, item);\n                     }\n                 }\n             }\n", "next_change": {"commit": "fbe70d2327c8dd6fd915a7c08eb59f8cbd4f6e21", "changed_code": [{"header": "diff --git a/core/src/main/java/hudson/model/ListView.java b/core/src/main/java/hudson/model/ListView.java\nindex 232f56ff47..b0af7342c1 100644\n--- a/core/src/main/java/hudson/model/ListView.java\n+++ b/core/src/main/java/hudson/model/ListView.java\n", "chunk": "@@ -240,18 +240,21 @@ public class ListView extends View implements DirectlyModifiableView {\n                     //Ignore\n                 }\n             }\n+            //Only call getItems if there is a pattern or we have Job Filters\n             if (includePattern != null) {\n+                allItems = new ArrayList<>(parent.getItems());\n                 for (TopLevelItem item : allItems) {\n                     String itemName = item.getRelativeNameFrom(parent);\n                     if (includePattern.matcher(itemName).matches()) {\n                         checkAddItem(statusFilter, items, item);\n                     }\n                 }\n+            } else if(!jobFilters.isEmpty()) {\n+                allItems = new ArrayList<>(parent.getItems());\n             }\n         }\n \n         // check the filters\n-        Iterable<ViewJobFilter> jobFilters = getJobFilters();\n     \tfor (ViewJobFilter jobFilter: jobFilters) {\n     \t\titems = jobFilter.filter(items, allItems, this);\n     \t}\n", "next_change": {"commit": "bc9c862f324eab7584ca95bfb7bde97351bc49ce", "changed_code": [{"header": "diff --git a/core/src/main/java/hudson/model/ListView.java b/core/src/main/java/hudson/model/ListView.java\nindex b0af7342c1..8f97e25f05 100644\n--- a/core/src/main/java/hudson/model/ListView.java\n+++ b/core/src/main/java/hudson/model/ListView.java\n", "chunk": "@@ -213,64 +219,50 @@ public class ListView extends View implements DirectlyModifiableView {\n \n         ItemGroup<? extends TopLevelItem> parent = getOwner().getItemGroup();\n \n-        Boolean statusFilter = this.statusFilter; // capture the value to isolate us from concurrent update\n         Collection<ViewJobFilter> jobFilters = getJobFilters();\n-        List<TopLevelItem> allItems = null;\n         if (recurse) {\n-            allItems = parent.getAllItems(TopLevelItem.class);\n-            for (TopLevelItem item : allItems) {\n+            items.addAll(parent.getAllItems(TopLevelItem.class, item -> {\n                 String itemName = item.getRelativeNameFrom(parent);\n                 if (names.contains(itemName)) {\n-                    checkAddItem(statusFilter, items, item);\n+                    return true;\n                 }\n                 if (includePattern != null) {\n-                    if (includePattern.matcher(itemName).matches()) {\n-                        checkAddItem(statusFilter, items, item);\n-                    }\n+                    return includePattern.matcher(itemName).matches();\n                 }\n-            }\n+                return false;\n+            }));\n         } else {\n             for (String name : names) {\n                 try {\n                     TopLevelItem i = parent.getItem(name);\n                     if (i != null) {\n-                        checkAddItem(statusFilter, items, i);\n+                        items.add(i);\n                     }\n                 } catch (AccessDeniedException e) {\n                     //Ignore\n                 }\n             }\n-            //Only call getItems if there is a pattern or we have Job Filters\n             if (includePattern != null) {\n-                allItems = new ArrayList<>(parent.getItems());\n-                for (TopLevelItem item : allItems) {\n+                items.addAll(parent.getItems(item -> {\n                     String itemName = item.getRelativeNameFrom(parent);\n-                    if (includePattern.matcher(itemName).matches()) {\n-                        checkAddItem(statusFilter, items, item);\n-                    }\n-                }\n-            } else if(!jobFilters.isEmpty()) {\n-                allItems = new ArrayList<>(parent.getItems());\n+                    return includePattern.matcher(itemName).matches();\n+                }));\n             }\n         }\n \n-        // check the filters\n-    \tfor (ViewJobFilter jobFilter: jobFilters) {\n-    \t\titems = jobFilter.filter(items, allItems, this);\n-    \t}\n+        if (!jobFilters.isEmpty()) {\n+            List<TopLevelItem> candidates = recurse ? new ArrayList<>(parent.getItems()) : parent.getAllItems(TopLevelItem.class);\n+            // check the filters\n+            for (ViewJobFilter jobFilter : jobFilters) {\n+                items = jobFilter.filter(items, candidates, this);\n+            }\n+        }\n         // for sanity, trim off duplicates\n         items = new ArrayList<>(new LinkedHashSet<>(items));\n         \n         return items;\n     }\n \n-    // Used by getItems\n-    private static void checkAddItem(Boolean statusFilter, List<TopLevelItem> items, TopLevelItem item) {\n-        if (statusFilter == null || !(item instanceof ParameterizedJobMixIn.ParameterizedJob) // TODO or better to call the more generic Job.isBuildable?\n-                || ((ParameterizedJobMixIn.ParameterizedJob) item).isDisabled() ^ statusFilter)\n-            items.add(item);\n-    }\n-\n     @Override\n     public SearchIndexBuilder makeSearchIndex() {\n         SearchIndexBuilder sib = new SearchIndexBuilder().addAllAnnotations(this);\n", "next_change": null}]}}]}}]}}, {"oid": "cc45a014ecd9ecc86b078f42b836c827abe8957d", "url": "https://github.com/jenkinsci/jenkins/commit/cc45a014ecd9ecc86b078f42b836c827abe8957d", "message": "Refactor ListView getItems\n\nSigned-off-by: Raihaan Shouhell <raihaan.shouhell@autodesk.com>", "committedDate": "2020-02-10T09:13:03Z", "type": "commit"}, {"oid": "29db74055708d6a7cdaed2680c6bc13a84a1c296", "url": "https://github.com/jenkinsci/jenkins/commit/29db74055708d6a7cdaed2680c6bc13a84a1c296", "message": "Minor Refactor", "committedDate": "2020-02-10T09:13:03Z", "type": "commit"}, {"oid": "fbe70d2327c8dd6fd915a7c08eb59f8cbd4f6e21", "url": "https://github.com/jenkinsci/jenkins/commit/fbe70d2327c8dd6fd915a7c08eb59f8cbd4f6e21", "message": "Optimization for specific case", "committedDate": "2020-02-10T09:13:03Z", "type": "commit"}, {"oid": "fbe70d2327c8dd6fd915a7c08eb59f8cbd4f6e21", "url": "https://github.com/jenkinsci/jenkins/commit/fbe70d2327c8dd6fd915a7c08eb59f8cbd4f6e21", "message": "Optimization for specific case", "committedDate": "2020-02-10T09:13:03Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjYxNDA5Ng==", "url": "https://github.com/jenkinsci/jenkins/pull/4466#discussion_r382614096", "body": "```suggestion\r\n    private static void addItemMatchingStatus(Boolean statusFilter, List<TopLevelItem> items, TopLevelItem item) {\r\n```\r\n\r\nPlus corresponding changes.", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static void checkAddItem(Boolean statusFilter, List<TopLevelItem> items, TopLevelItem item) {\n          \n          \n            \n                private static void addItemMatchingStatus(Boolean statusFilter, List<TopLevelItem> items, TopLevelItem item) {\n          \n      \n    \n    \n  \n\nPlus corresponding changes.", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">private</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">void</span> <span class=\"x x-first x-last\">checkAddItem</span>(<span class=\"pl-smi\">Boolean</span> statusFilter, <span class=\"pl-k\">List&lt;<span class=\"pl-smi\">TopLevelItem</span>&gt;</span> items, <span class=\"pl-smi\">TopLevelItem</span> item) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">private</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">void</span> <span class=\"x x-first x-last\">addItemMatchingStatus</span>(<span class=\"pl-smi\">Boolean</span> statusFilter, <span class=\"pl-k\">List&lt;<span class=\"pl-smi\">TopLevelItem</span>&gt;</span> items, <span class=\"pl-smi\">TopLevelItem</span> item) {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\">Plus corresponding changes.</p>", "author": "daniel-beck", "createdAt": "2020-02-21T14:36:03Z", "path": "core/src/main/java/hudson/model/ListView.java", "diffHunk": "@@ -242,6 +264,13 @@ public boolean hasJobFilterExtensions() {\n         return items;\n     }\n \n+    // Used by getItems\n+    private static void checkAddItem(Boolean statusFilter, List<TopLevelItem> items, TopLevelItem item) {", "originalCommit": "fbe70d2327c8dd6fd915a7c08eb59f8cbd4f6e21", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ccf128a2d0b743b46bc5792ae3691a32023e8f43", "changed_code": [{"header": "diff --git a/core/src/main/java/hudson/model/ListView.java b/core/src/main/java/hudson/model/ListView.java\nindex b0af7342c1..ac8ece8ed9 100644\n--- a/core/src/main/java/hudson/model/ListView.java\n+++ b/core/src/main/java/hudson/model/ListView.java\n", "chunk": "@@ -264,13 +268,6 @@ public class ListView extends View implements DirectlyModifiableView {\n         return items;\n     }\n \n-    // Used by getItems\n-    private static void checkAddItem(Boolean statusFilter, List<TopLevelItem> items, TopLevelItem item) {\n-        if (statusFilter == null || !(item instanceof ParameterizedJobMixIn.ParameterizedJob) // TODO or better to call the more generic Job.isBuildable?\n-                || ((ParameterizedJobMixIn.ParameterizedJob) item).isDisabled() ^ statusFilter)\n-            items.add(item);\n-    }\n-\n     @Override\n     public SearchIndexBuilder makeSearchIndex() {\n         SearchIndexBuilder sib = new SearchIndexBuilder().addAllAnnotations(this);\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjYyMTM0Nw==", "url": "https://github.com/jenkinsci/jenkins/pull/4466#discussion_r382621347", "body": "I think it would help readability if this comment had 2 specific lines of matching code, rather than it explaining the if/else if structure with a repeated statement in block blocks.", "bodyText": "I think it would help readability if this comment had 2 specific lines of matching code, rather than it explaining the if/else if structure with a repeated statement in block blocks.", "bodyHTML": "<p dir=\"auto\">I think it would help readability if this comment had 2 specific lines of matching code, rather than it explaining the if/else if structure with a repeated statement in block blocks.</p>", "author": "daniel-beck", "createdAt": "2020-02-21T14:48:50Z", "path": "core/src/main/java/hudson/model/ListView.java", "diffHunk": "@@ -211,28 +212,49 @@ public boolean hasJobFilterExtensions() {\n         }\n \n         ItemGroup<? extends TopLevelItem> parent = getOwner().getItemGroup();\n-        List<TopLevelItem> parentItems = new ArrayList<>(parent.getItems());\n-        includeItems(parent, parentItems, names);\n \n         Boolean statusFilter = this.statusFilter; // capture the value to isolate us from concurrent update\n-        Iterable<? extends TopLevelItem> candidates;\n+        Collection<ViewJobFilter> jobFilters = getJobFilters();\n+        List<TopLevelItem> allItems = null;\n         if (recurse) {\n-            candidates = parent.getAllItems(TopLevelItem.class);\n+            allItems = parent.getAllItems(TopLevelItem.class);\n+            for (TopLevelItem item : allItems) {\n+                String itemName = item.getRelativeNameFrom(parent);\n+                if (names.contains(itemName)) {\n+                    checkAddItem(statusFilter, items, item);\n+                }\n+                if (includePattern != null) {\n+                    if (includePattern.matcher(itemName).matches()) {\n+                        checkAddItem(statusFilter, items, item);\n+                    }\n+                }\n+            }\n         } else {\n-            candidates = parentItems;\n-        }\n-        for (TopLevelItem item : candidates) {\n-            if (!names.contains(item.getRelativeNameFrom(getOwner().getItemGroup()))) continue;\n-            // Add if no status filter or filter matches enabled/disabled status:\n-            if(statusFilter == null || !(item instanceof ParameterizedJobMixIn.ParameterizedJob) // TODO or better to call the more generic Job.isBuildable?\n-                              || ((ParameterizedJobMixIn.ParameterizedJob)item).isDisabled() ^ statusFilter)\n-                items.add(item);\n+            for (String name : names) {\n+                try {\n+                    TopLevelItem i = parent.getItem(name);\n+                    if (i != null) {\n+                        checkAddItem(statusFilter, items, i);\n+                    }\n+                } catch (AccessDeniedException e) {\n+                    //Ignore\n+                }\n+            }\n+            //Only call getItems if there is a pattern or we have Job Filters", "originalCommit": "fbe70d2327c8dd6fd915a7c08eb59f8cbd4f6e21", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ccf128a2d0b743b46bc5792ae3691a32023e8f43", "changed_code": [{"header": "diff --git a/core/src/main/java/hudson/model/ListView.java b/core/src/main/java/hudson/model/ListView.java\nindex b0af7342c1..ac8ece8ed9 100644\n--- a/core/src/main/java/hudson/model/ListView.java\n+++ b/core/src/main/java/hudson/model/ListView.java\n", "chunk": "@@ -234,22 +238,22 @@ public class ListView extends View implements DirectlyModifiableView {\n                 try {\n                     TopLevelItem i = parent.getItem(name);\n                     if (i != null) {\n-                        checkAddItem(statusFilter, items, i);\n+                        items.add(i);\n                     }\n                 } catch (AccessDeniedException e) {\n                     //Ignore\n                 }\n             }\n-            //Only call getItems if there is a pattern or we have Job Filters\n             if (includePattern != null) {\n+                //We have to iterate child items just initialize allItems with the child items can be reused by filters\n                 allItems = new ArrayList<>(parent.getItems());\n                 for (TopLevelItem item : allItems) {\n                     String itemName = item.getRelativeNameFrom(parent);\n                     if (includePattern.matcher(itemName).matches()) {\n-                        checkAddItem(statusFilter, items, item);\n+                        items.add(item);\n                     }\n                 }\n-            } else if(!jobFilters.isEmpty()) {\n+            } else if(!jobFilters.isEmpty()) { //If there are job filters they need allItems initialized\n                 allItems = new ArrayList<>(parent.getItems());\n             }\n         }\n", "next_change": {"commit": "bc9c862f324eab7584ca95bfb7bde97351bc49ce", "changed_code": [{"header": "diff --git a/core/src/main/java/hudson/model/ListView.java b/core/src/main/java/hudson/model/ListView.java\nindex ac8ece8ed9..8f97e25f05 100644\n--- a/core/src/main/java/hudson/model/ListView.java\n+++ b/core/src/main/java/hudson/model/ListView.java\n", "chunk": "@@ -245,23 +243,20 @@ public class ListView extends View implements DirectlyModifiableView {\n                 }\n             }\n             if (includePattern != null) {\n-                //We have to iterate child items just initialize allItems with the child items can be reused by filters\n-                allItems = new ArrayList<>(parent.getItems());\n-                for (TopLevelItem item : allItems) {\n+                items.addAll(parent.getItems(item -> {\n                     String itemName = item.getRelativeNameFrom(parent);\n-                    if (includePattern.matcher(itemName).matches()) {\n-                        items.add(item);\n-                    }\n-                }\n-            } else if(!jobFilters.isEmpty()) { //If there are job filters they need allItems initialized\n-                allItems = new ArrayList<>(parent.getItems());\n+                    return includePattern.matcher(itemName).matches();\n+                }));\n             }\n         }\n \n-        // check the filters\n-    \tfor (ViewJobFilter jobFilter: jobFilters) {\n-    \t\titems = jobFilter.filter(items, allItems, this);\n-    \t}\n+        if (!jobFilters.isEmpty()) {\n+            List<TopLevelItem> candidates = recurse ? new ArrayList<>(parent.getItems()) : parent.getAllItems(TopLevelItem.class);\n+            // check the filters\n+            for (ViewJobFilter jobFilter : jobFilters) {\n+                items = jobFilter.filter(items, candidates, this);\n+            }\n+        }\n         // for sanity, trim off duplicates\n         items = new ArrayList<>(new LinkedHashSet<>(items));\n         \n", "next_change": null}]}}]}}, {"oid": "ccf128a2d0b743b46bc5792ae3691a32023e8f43", "url": "https://github.com/jenkinsci/jenkins/commit/ccf128a2d0b743b46bc5792ae3691a32023e8f43", "message": "Migrate statusfilter to viewjobfilter", "committedDate": "2020-03-20T08:43:25Z", "type": "commit"}, {"oid": "c95ecac87b75b1737116da5f611536ea85707052", "url": "https://github.com/jenkinsci/jenkins/commit/c95ecac87b75b1737116da5f611536ea85707052", "message": "Use unboxed boolean so we don't have to deal with null", "committedDate": "2020-03-20T08:45:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA3NTk5NQ==", "url": "https://github.com/jenkinsci/jenkins/pull/4466#discussion_r396075995", "body": "This should add the `StatusFilter` first into the list to minimize behavior changes through interactions between filters.", "bodyText": "This should add the StatusFilter first into the list to minimize behavior changes through interactions between filters.", "bodyHTML": "<p dir=\"auto\">This should add the <code>StatusFilter</code> first into the list to minimize behavior changes through interactions between filters.</p>", "author": "daniel-beck", "createdAt": "2020-03-22T10:13:37Z", "path": "core/src/main/java/hudson/model/ListView.java", "diffHunk": "@@ -145,6 +147,9 @@ private Object readResolve() {\n         }\n         initColumns();\n         initJobFilters();\n+        if (statusFilter != null) {\n+            jobFilters.add(new StatusFilter(statusFilter));", "originalCommit": "c95ecac87b75b1737116da5f611536ea85707052", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjIwMDc3Mw==", "url": "https://github.com/jenkinsci/jenkins/pull/4466#discussion_r396200773", "bodyText": "Rewritten to be added to the first index", "author": "res0nance", "createdAt": "2020-03-23T03:48:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA3NTk5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "dada74630c91764fa59aab6ed0683911df2d1fe4", "changed_code": [{"header": "diff --git a/core/src/main/java/hudson/model/ListView.java b/core/src/main/java/hudson/model/ListView.java\nindex b7df2a8fcc..1f9d6704f4 100644\n--- a/core/src/main/java/hudson/model/ListView.java\n+++ b/core/src/main/java/hudson/model/ListView.java\n", "chunk": "@@ -148,7 +150,7 @@ public class ListView extends View implements DirectlyModifiableView {\n         initColumns();\n         initJobFilters();\n         if (statusFilter != null) {\n-            jobFilters.add(new StatusFilter(statusFilter));\n+            jobFilters.add(0, new StatusFilter(statusFilter));\n         }\n         return this;\n     }\n", "next_change": null}]}}, {"oid": "dada74630c91764fa59aab6ed0683911df2d1fe4", "url": "https://github.com/jenkinsci/jenkins/commit/dada74630c91764fa59aab6ed0683911df2d1fe4", "message": "UI Changes", "committedDate": "2020-03-23T03:43:48Z", "type": "commit"}, {"oid": "773e13143239fd41ac5ddbf31f0678a6e43089d2", "url": "https://github.com/jenkinsci/jenkins/commit/773e13143239fd41ac5ddbf31f0678a6e43089d2", "message": "Merge branch 'master' of https://github.com/res0nance/jenkins into JENKINS-20052", "committedDate": "2020-03-23T07:15:46Z", "type": "commit"}, {"oid": "bc9c862f324eab7584ca95bfb7bde97351bc49ce", "url": "https://github.com/jenkinsci/jenkins/commit/bc9c862f324eab7584ca95bfb7bde97351bc49ce", "message": "Add tests and use pre-auth filters", "committedDate": "2020-03-23T07:41:46Z", "type": "commit"}, {"oid": "7d4fda60e93d14372b0e5319b1b4b37dcd32e796", "url": "https://github.com/jenkinsci/jenkins/commit/7d4fda60e93d14372b0e5319b1b4b37dcd32e796", "message": "Add test with a simple filter", "committedDate": "2020-03-23T08:45:32Z", "type": "commit"}, {"oid": "83c84635d08cf9f76519cabe9cb34a7eeebf9feb", "url": "https://github.com/jenkinsci/jenkins/commit/83c84635d08cf9f76519cabe9cb34a7eeebf9feb", "message": "Remove old tests as the new tests should cover this", "committedDate": "2020-03-23T12:36:48Z", "type": "commit"}, {"oid": "e1e3e612e7b136d99256549c69afa411b7c16187", "url": "https://github.com/jenkinsci/jenkins/commit/e1e3e612e7b136d99256549c69afa411b7c16187", "message": "Change annotation", "committedDate": "2020-04-07T07:47:08Z", "type": "commit"}, {"oid": "5deb98819f0f585acb9998f56183f51fe74ebdeb", "url": "https://github.com/jenkinsci/jenkins/commit/5deb98819f0f585acb9998f56183f51fe74ebdeb", "message": "Merge branch 'master' into JENKINS-20052", "committedDate": "2020-05-13T01:01:22Z", "type": "commit"}, {"oid": "123f756f37eea8c988d4f5a48458dbb414a443d5", "url": "https://github.com/jenkinsci/jenkins/commit/123f756f37eea8c988d4f5a48458dbb414a443d5", "message": "Only iterate if there are names or a regex pattern", "committedDate": "2020-05-13T01:12:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQ5NDMxMA==", "url": "https://github.com/jenkinsci/jenkins/pull/4466#discussion_r488494310", "body": "@TobiX identified this as the problem in [JENKINS-62661]( https://issues.jenkins-ci.org/browse/JENKINS-62661): `DescribableList` does not implement `#add(int,T)`.", "bodyText": "@TobiX identified this as the problem in JENKINS-62661: DescribableList does not implement #add(int,T).", "bodyHTML": "<p dir=\"auto\"><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/TobiX/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/TobiX\">@TobiX</a> identified this as the problem in <a href=\"https://issues.jenkins-ci.org/browse/JENKINS-62661\" rel=\"nofollow\">JENKINS-62661</a>: <code>DescribableList</code> does not implement <code>#add(int,T)</code>.</p>", "author": "daniel-beck", "createdAt": "2020-09-15T08:45:42Z", "path": "core/src/main/java/hudson/model/ListView.java", "diffHunk": "@@ -145,6 +149,9 @@ private Object readResolve() {\n         }\n         initColumns();\n         initJobFilters();\n+        if (statusFilter != null) {\n+            jobFilters.add(0, new StatusFilter(statusFilter));", "originalCommit": "123f756f37eea8c988d4f5a48458dbb414a443d5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}