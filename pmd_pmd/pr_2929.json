{"pr_number": 2929, "pr_title": "[scala] Add support for CPD-ON and CPD-OFF special comments", "pr_author": "andyrobinson", "pr_createdAt": "2020-11-16T17:53:46Z", "pr_url": "https://github.com/pmd/pmd/pull/2929", "timeline": [{"oid": "cb5ce5d9d1ef29ab9ea2e8f8091f1cc4c82d620b", "url": "https://github.com/pmd/pmd/commit/cb5ce5d9d1ef29ab9ea2e8f8091f1cc4c82d620b", "message": "[scala] adding support for CPD-ON and CPD-OFF special comments", "committedDate": "2020-11-16T12:08:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQ5MDk2MQ==", "url": "https://github.com/pmd/pmd/pull/2929#discussion_r524490961", "body": "It's the getBeginLine implementation that should add `+1`, same for the other methods", "bodyText": "It's the getBeginLine implementation that should add +1, same for the other methods", "bodyHTML": "<p dir=\"auto\">It's the getBeginLine implementation that should add <code>+1</code>, same for the other methods</p>", "author": "oowekyala", "createdAt": "2020-11-16T18:40:40Z", "path": "pmd-scala-modules/pmd-scala-common/src/main/java/net/sourceforge/pmd/cpd/ScalaTokenizer.java", "diffHunk": "@@ -72,19 +75,21 @@ public void tokenize(SourceCode sourceCode, Tokens tokenEntries) throws IOExcept\n         // tokenize with a filter\n         try {\n             scala.meta.tokens.Tokens tokens = tokenizer.tokenize();\n-            ScalaTokenFilter filter = new ScalaTokenFilter(tokens.iterator());\n \n-            Token token;\n+            // use extensions to the standard PMD TokenManager and Filter\n+            ScalaTokenManager scalaTokenManager = new ScalaTokenManager(tokens.iterator());\n+            ScalaTokenFilter filter = new ScalaTokenFilter(scalaTokenManager);\n+\n+            GenericToken token;\n             while ((token = filter.getNextToken()) != null) {\n-                if (StringUtils.isEmpty(token.text())) {\n+                if (StringUtils.isEmpty(token.getImage())) {\n                     continue;\n                 }\n-                Position pos = token.pos();\n-                TokenEntry cpdToken = new TokenEntry(token.text(),\n+                TokenEntry cpdToken = new TokenEntry(token.getImage(),\n                                                      filename,\n-                                                     pos.startLine() + 1,\n-                                                     pos.startColumn() + 1,\n-                                                     pos.endColumn() + 1);\n+                                                     token.getBeginLine() + 1,", "originalCommit": "cb5ce5d9d1ef29ab9ea2e8f8091f1cc4c82d620b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDU0Mzk4Mw==", "url": "https://github.com/pmd/pmd/pull/2929#discussion_r524543983", "body": "```suggestion\r\n            return token instanceof Token.Comment;\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        return token != null && (token.text().startsWith(\"//\") || token.text().startsWith(\"/*\"));\n          \n          \n            \n                        return token instanceof Token.Comment;", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            <span class=\"pl-k\">return</span> token <span class=\"pl-k x x-first\">!=</span><span class=\"x\"> </span><span class=\"pl-c1 x\">null</span><span class=\"x\"> </span><span class=\"pl-k x\">&amp;&amp;</span><span class=\"x\"> (token</span><span class=\"pl-k x\">.</span><span class=\"x\">text()</span><span class=\"pl-k x\">.</span><span class=\"x\">startsWith(</span><span class=\"pl-s\"><span class=\"pl-pds x\">\"</span><span class=\"x\">//</span><span class=\"pl-pds x\">\"</span></span><span class=\"x\">) </span><span class=\"pl-k x\">||</span><span class=\"x\"> token</span><span class=\"pl-k x\">.</span><span class=\"x\">text()</span><span class=\"pl-k x\">.</span><span class=\"x\">startsWith(</span><span class=\"pl-s\"><span class=\"pl-pds x\">\"</span><span class=\"x\">/*</span><span class=\"pl-pds x\">\"</span></span><span class=\"x x-last\">))</span>;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            <span class=\"pl-k\">return</span> token <span class=\"pl-k x x-first\">instanceof</span><span class=\"x\"> </span><span class=\"pl-smi x\">Token</span><span class=\"pl-k x\">.</span><span class=\"pl-smi x x-last\">Comment</span>;</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "oowekyala", "createdAt": "2020-11-16T20:13:36Z", "path": "pmd-scala-modules/pmd-scala-common/src/main/java/net/sourceforge/pmd/cpd/ScalaTokenizer.java", "diffHunk": "@@ -137,5 +155,27 @@ private boolean skipToken(Token token) {\n             }\n             return skip;\n         }\n+\n+        private boolean isComment(Token token) {\n+            return token != null && (token.text().startsWith(\"//\") || token.text().startsWith(\"/*\"));", "originalCommit": "cb5ce5d9d1ef29ab9ea2e8f8091f1cc4c82d620b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjEwMTMyNw==", "url": "https://github.com/pmd/pmd/pull/2929#discussion_r526101327", "bodyText": "Done", "author": "andyrobinson", "createdAt": "2020-11-18T13:50:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDU0Mzk4Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDU1Mjk1Mw==", "url": "https://github.com/pmd/pmd/pull/2929#discussion_r524552953", "body": "Please either implement this or throw `NotImplementedException` (from lang3) or `UnsupportedOperationException`", "bodyText": "Please either implement this or throw NotImplementedException (from lang3) or UnsupportedOperationException", "bodyHTML": "<p dir=\"auto\">Please either implement this or throw <code>NotImplementedException</code> (from lang3) or <code>UnsupportedOperationException</code></p>", "author": "oowekyala", "createdAt": "2020-11-16T20:29:52Z", "path": "pmd-scala-modules/pmd-scala-common/src/main/java/net/sourceforge/pmd/cpd/ScalaTokenAdapter.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/**\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+package net.sourceforge.pmd.cpd;\n+\n+import net.sourceforge.pmd.lang.ast.GenericToken;\n+\n+import scala.meta.tokens.Token;\n+\n+/**\n+ * Adapts the scala.meta.tokens.Token so that it can be used with the generic BaseTokenFilter\n+ */\n+public class ScalaTokenAdapter implements GenericToken {\n+\n+    private Token token;\n+    private GenericToken previousComment;\n+\n+    ScalaTokenAdapter(Token token, GenericToken comment) {\n+        this.token = token;\n+        this.previousComment = comment;\n+    }\n+\n+    @Override\n+    public GenericToken getNext() {\n+        // not required\n+        return null;", "originalCommit": "cb5ce5d9d1ef29ab9ea2e8f8091f1cc4c82d620b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDU2MDMwNQ==", "url": "https://github.com/pmd/pmd/pull/2929#discussion_r524560305", "bodyText": "Would also be nice to add a toString to this class (any autogenerated one will do)", "author": "oowekyala", "createdAt": "2020-11-16T20:43:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDU1Mjk1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjEwMTgwOQ==", "url": "https://github.com/pmd/pmd/pull/2929#discussion_r526101809", "bodyText": "now throws", "author": "andyrobinson", "createdAt": "2020-11-18T13:51:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDU1Mjk1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDU1OTczNw==", "url": "https://github.com/pmd/pmd/pull/2929#discussion_r524559737", "body": "If the token is a comment it should actually not be returned, to implement this interface correctly. This is why your CPD-OFF comments are not filtered out (arguably all comments should actually be filtered out). ", "bodyText": "If the token is a comment it should actually not be returned, to implement this interface correctly. This is why your CPD-OFF comments are not filtered out (arguably all comments should actually be filtered out).", "bodyHTML": "<p dir=\"auto\">If the token is a comment it should actually not be returned, to implement this interface correctly. This is why your CPD-OFF comments are not filtered out (arguably all comments should actually be filtered out).</p>", "author": "oowekyala", "createdAt": "2020-11-16T20:42:40Z", "path": "pmd-scala-modules/pmd-scala-common/src/main/java/net/sourceforge/pmd/cpd/ScalaTokenizer.java", "diffHunk": "@@ -125,7 +137,13 @@ Token getNextToken() {\n                 token = tokenIter.next();\n             } while (token != null && skipToken(token) && tokenIter.hasNext());\n \n-            return token;\n+            result = new ScalaTokenAdapter(token, previousComment);\n+\n+            if (isComment(token)) {\n+                previousComment = result;\n+            }\n+\n+            return result;", "originalCommit": "cb5ce5d9d1ef29ab9ea2e8f8091f1cc4c82d620b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjEwMjA2NA==", "url": "https://github.com/pmd/pmd/pull/2929#discussion_r526102064", "bodyText": "rewritten to skip comments", "author": "andyrobinson", "createdAt": "2020-11-18T13:51:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDU1OTczNw=="}], "type": "inlineReview"}, {"oid": "035ec0a5370f409c34d305c6b86f86f16e9823a0", "url": "https://github.com/pmd/pmd/commit/035ec0a5370f409c34d305c6b86f86f16e9823a0", "message": "[scala] fixing support for CPD-ON and CPD-OFF special comments\n- minor fix ups as per PR comments\n- comments are skipped and no longer tokenised", "committedDate": "2020-11-18T13:49:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODU1NTU1NQ==", "url": "https://github.com/pmd/pmd/pull/2929#discussion_r528555555", "body": "I think, this class can be static", "bodyText": "I think, this class can be static", "bodyHTML": "<p dir=\"auto\">I think, this class can be static</p>", "author": "adangel", "createdAt": "2020-11-23T09:10:47Z", "path": "pmd-scala-modules/pmd-scala-common/src/main/java/net/sourceforge/pmd/cpd/ScalaTokenizer.java", "diffHunk": "@@ -103,29 +108,39 @@ public void tokenize(SourceCode sourceCode, Tokens tokenEntries) throws IOExcept\n     }\n \n     /**\n-     * Token Filter skips un-helpful tokens to only register important tokens\n+     * Implementation of the generic Token Manager, also skips un-helpful tokens and comments to only register important tokens\n      * and patterns.\n+     *\n+     * Keeps track of comments, for special comment processing\n      */\n-    private static class ScalaTokenFilter {\n+    private class ScalaTokenManager implements TokenManager {", "originalCommit": "035ec0a5370f409c34d305c6b86f86f16e9823a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODU1NjkwMw==", "url": "https://github.com/pmd/pmd/pull/2929#discussion_r528556903", "body": "can be static as well", "bodyText": "can be static as well", "bodyHTML": "<p dir=\"auto\">can be static as well</p>", "author": "adangel", "createdAt": "2020-11-23T09:13:15Z", "path": "pmd-scala-modules/pmd-scala-common/src/main/java/net/sourceforge/pmd/cpd/ScalaTokenizer.java", "diffHunk": "@@ -137,5 +152,27 @@ private boolean skipToken(Token token) {\n             }\n             return skip;\n         }\n+\n+        private boolean isComment(Token token) {\n+            return token instanceof Token.Comment;\n+        }\n+\n+        @Override\n+        public void setFileName(String fileName) {\n+            throw new UnsupportedOperationException(\"setFileName deprecated\");\n+        }\n+    }\n+\n+    private class ScalaTokenFilter extends BaseTokenFilter<ScalaTokenAdapter> {", "originalCommit": "035ec0a5370f409c34d305c6b86f86f16e9823a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}