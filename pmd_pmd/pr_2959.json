{"pr_number": 2959, "pr_title": "[apex] New Rule: override equals and hashcode rule", "pr_author": "recdevs", "pr_createdAt": "2020-12-07T01:44:15Z", "pr_url": "https://github.com/pmd/pmd/pull/2959", "timeline": [{"oid": "7b17c31b914571e3d0dc09ec3008a3c761f61cca", "url": "https://github.com/pmd/pmd/commit/7b17c31b914571e3d0dc09ec3008a3c761f61cca", "message": "feat: apex override equals and hashcode rule", "committedDate": "2020-12-07T01:45:17Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDczNDUwMQ==", "url": "https://github.com/pmd/pmd/pull/2959#discussion_r540734501", "body": "You could just loop over `node.findChildrenOfType(ASTMethod.class)`. This removes the statefulness in the rule, and avoids exploring methods of nested classes (which would cause bugs). Stateless rules can use [the rulechain](https://pmd.github.io/latest/pmd_userdocs_extending_writing_java_rules.html#economic-traversal-the-rulechain), which makes them faster.", "bodyText": "You could just loop over node.findChildrenOfType(ASTMethod.class). This removes the statefulness in the rule, and avoids exploring methods of nested classes (which would cause bugs). Stateless rules can use the rulechain, which makes them faster.", "bodyHTML": "<p dir=\"auto\">You could just loop over <code>node.findChildrenOfType(ASTMethod.class)</code>. This removes the statefulness in the rule, and avoids exploring methods of nested classes (which would cause bugs). Stateless rules can use <a href=\"https://pmd.github.io/latest/pmd_userdocs_extending_writing_java_rules.html#economic-traversal-the-rulechain\" rel=\"nofollow\">the rulechain</a>, which makes them faster.</p>", "author": "oowekyala", "createdAt": "2020-12-11T07:07:27Z", "path": "pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/errorprone/OverrideBothEqualsAndHashcodeRule.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/**\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+package net.sourceforge.pmd.lang.apex.rule.errorprone;\n+\n+import net.sourceforge.pmd.lang.apex.ast.ASTMethod;\n+import net.sourceforge.pmd.lang.apex.ast.ASTParameter;\n+import net.sourceforge.pmd.lang.apex.ast.ASTUserClass;\n+import net.sourceforge.pmd.lang.apex.ast.ApexNode;\n+import net.sourceforge.pmd.lang.apex.rule.AbstractApexRule;\n+\n+public class OverrideBothEqualsAndHashcodeRule extends AbstractApexRule {\n+\n+    private boolean containsEquals = false;\n+\n+    private boolean containsHashCode = false;\n+\n+    private ApexNode<?> nodeFound = null;\n+\n+    @Override\n+    public Object visit(ASTUserClass node, Object data) {\n+        super.visit(node, data);", "originalCommit": "7b17c31b914571e3d0dc09ec3008a3c761f61cca", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDgzMDgxMA==", "url": "https://github.com/pmd/pmd/pull/2959#discussion_r540830810", "bodyText": "Also it may be better to report not on the class node but on the method that's alone.", "author": "oowekyala", "createdAt": "2020-12-11T10:03:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDczNDUwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjg4NjA3NQ==", "url": "https://github.com/pmd/pmd/pull/2959#discussion_r542886075", "bodyText": "done! thanks for the suggestion.", "author": "recdevs", "createdAt": "2020-12-14T22:40:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDczNDUwMQ=="}], "type": "inlineReview"}, {"oid": "275e66d77a0f5f214fa4f159337f15e6a3429cb7", "url": "https://github.com/pmd/pmd/commit/275e66d77a0f5f214fa4f159337f15e6a3429cb7", "message": "[apex] New Rule: override equals and hashcode rule", "committedDate": "2020-12-14T22:38:45Z", "type": "commit"}, {"oid": "275e66d77a0f5f214fa4f159337f15e6a3429cb7", "url": "https://github.com/pmd/pmd/commit/275e66d77a0f5f214fa4f159337f15e6a3429cb7", "message": "[apex] New Rule: override equals and hashcode rule", "committedDate": "2020-12-14T22:38:45Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzE1OTE0NQ==", "url": "https://github.com/pmd/pmd/pull/2959#discussion_r543159145", "body": "```suggestion\r\n    private boolean isEquals(ASTMethod node) {\r\n```\r\nIn Java `Boolean` is rarely used over `boolean`. The former has its value boxed onto the heap.", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private Boolean isEquals(ASTMethod node) {\n          \n          \n            \n                private boolean isEquals(ASTMethod node) {\n          \n      \n    \n    \n  \n\nIn Java Boolean is rarely used over boolean. The former has its value boxed onto the heap.", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">private</span> <span class=\"pl-smi x x-first x-last\">Boolean</span> isEquals(<span class=\"pl-smi\">ASTMethod</span> node) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">private</span> <span class=\"pl-k x x-first x-last\">boolean</span> isEquals(<span class=\"pl-smi\">ASTMethod</span> node) {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\">In Java <code>Boolean</code> is rarely used over <code>boolean</code>. The former has its value boxed onto the heap.</p>", "author": "oowekyala", "createdAt": "2020-12-15T08:55:54Z", "path": "pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/errorprone/OverrideBothEqualsAndHashcodeRule.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/**\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+package net.sourceforge.pmd.lang.apex.rule.errorprone;\n+\n+import net.sourceforge.pmd.lang.apex.ast.ASTMethod;\n+import net.sourceforge.pmd.lang.apex.ast.ASTParameter;\n+import net.sourceforge.pmd.lang.apex.ast.ASTUserClass;\n+import net.sourceforge.pmd.lang.apex.ast.ApexNode;\n+import net.sourceforge.pmd.lang.apex.rule.AbstractApexRule;\n+\n+public class OverrideBothEqualsAndHashcodeRule extends AbstractApexRule {\n+\n+    @Override\n+    public Object visit(ASTUserClass node, Object data) {\n+        super.visit(node, data);\n+\n+        ApexNode<?> equalsNode = null;\n+        ApexNode<?> hashNode = null;\n+        for (ASTMethod method : node.findChildrenOfType(ASTMethod.class)) {\n+            if (equalsNode == null && isEquals(method)) {\n+                equalsNode = method;\n+            }\n+            if (hashNode == null && isHashCode(method)) {\n+                hashNode = method;\n+            }\n+            if (hashNode != null && equalsNode != null) {\n+                break;\n+            }\n+        }\n+\n+        if (equalsNode != null && hashNode == null) {\n+            addViolation(data, equalsNode);\n+        } else if (hashNode != null && equalsNode == null) {\n+            addViolation(data, hashNode);\n+        }\n+\n+        return data;\n+    }\n+\n+    private Boolean isEquals(ASTMethod node) {", "originalCommit": "275e66d77a0f5f214fa4f159337f15e6a3429cb7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzIwMDQyMQ==", "url": "https://github.com/pmd/pmd/pull/2959#discussion_r543200421", "body": "```suggestion\r\n    private boolean isHashCode(ASTMethod node) {\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private Boolean isHashCode(ASTMethod node) {\n          \n          \n            \n                private boolean isHashCode(ASTMethod node) {", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">private</span> <span class=\"pl-smi x x-first x-last\">Boolean</span> isHashCode(<span class=\"pl-smi\">ASTMethod</span> node) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">private</span> <span class=\"pl-k x x-first x-last\">boolean</span> isHashCode(<span class=\"pl-smi\">ASTMethod</span> node) {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "oowekyala", "createdAt": "2020-12-15T09:54:16Z", "path": "pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/errorprone/OverrideBothEqualsAndHashcodeRule.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/**\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+package net.sourceforge.pmd.lang.apex.rule.errorprone;\n+\n+import net.sourceforge.pmd.lang.apex.ast.ASTMethod;\n+import net.sourceforge.pmd.lang.apex.ast.ASTParameter;\n+import net.sourceforge.pmd.lang.apex.ast.ASTUserClass;\n+import net.sourceforge.pmd.lang.apex.ast.ApexNode;\n+import net.sourceforge.pmd.lang.apex.rule.AbstractApexRule;\n+\n+public class OverrideBothEqualsAndHashcodeRule extends AbstractApexRule {\n+\n+    @Override\n+    public Object visit(ASTUserClass node, Object data) {\n+        super.visit(node, data);\n+\n+        ApexNode<?> equalsNode = null;\n+        ApexNode<?> hashNode = null;\n+        for (ASTMethod method : node.findChildrenOfType(ASTMethod.class)) {\n+            if (equalsNode == null && isEquals(method)) {\n+                equalsNode = method;\n+            }\n+            if (hashNode == null && isHashCode(method)) {\n+                hashNode = method;\n+            }\n+            if (hashNode != null && equalsNode != null) {\n+                break;\n+            }\n+        }\n+\n+        if (equalsNode != null && hashNode == null) {\n+            addViolation(data, equalsNode);\n+        } else if (hashNode != null && equalsNode == null) {\n+            addViolation(data, hashNode);\n+        }\n+\n+        return data;\n+    }\n+\n+    private Boolean isEquals(ASTMethod node) {\n+        int numParams = 0;\n+        String paramType = null;\n+        for (int ix = 0; ix < node.getNumChildren(); ix++) {\n+            ApexNode<?> sn = node.getChild(ix);\n+            if (sn instanceof ASTParameter) {\n+                numParams++;\n+                paramType = ((ASTParameter) sn).getType();\n+            }\n+        }\n+        return numParams == 1 && node.hasImageEqualTo(\"equals\") && \"Object\".equalsIgnoreCase(paramType);\n+    }\n+\n+    private Boolean isHashCode(ASTMethod node) {", "originalCommit": "275e66d77a0f5f214fa4f159337f15e6a3429cb7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODc1NjYyNg==", "url": "https://github.com/pmd/pmd/pull/2959#discussion_r548756626", "bodyText": "sorry. force of habit from working in Apex :)", "author": "recdevs", "createdAt": "2020-12-24T22:23:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzIwMDQyMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzIwMTY0Nw==", "url": "https://github.com/pmd/pmd/pull/2959#discussion_r543201647", "body": "In order to use the rulechain, you need to remove this call, and declare a constructor that calls `addRuleChainVisit(ASTUserClass.class);`", "bodyText": "In order to use the rulechain, you need to remove this call, and declare a constructor that calls addRuleChainVisit(ASTUserClass.class);", "bodyHTML": "<p dir=\"auto\">In order to use the rulechain, you need to remove this call, and declare a constructor that calls <code>addRuleChainVisit(ASTUserClass.class);</code></p>", "author": "oowekyala", "createdAt": "2020-12-15T09:55:52Z", "path": "pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/errorprone/OverrideBothEqualsAndHashcodeRule.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/**\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+package net.sourceforge.pmd.lang.apex.rule.errorprone;\n+\n+import net.sourceforge.pmd.lang.apex.ast.ASTMethod;\n+import net.sourceforge.pmd.lang.apex.ast.ASTParameter;\n+import net.sourceforge.pmd.lang.apex.ast.ASTUserClass;\n+import net.sourceforge.pmd.lang.apex.ast.ApexNode;\n+import net.sourceforge.pmd.lang.apex.rule.AbstractApexRule;\n+\n+public class OverrideBothEqualsAndHashcodeRule extends AbstractApexRule {\n+\n+    @Override\n+    public Object visit(ASTUserClass node, Object data) {\n+        super.visit(node, data);", "originalCommit": "275e66d77a0f5f214fa4f159337f15e6a3429cb7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "539f457d8171db34bb5a74543b9eb913b247ea5f", "url": "https://github.com/pmd/pmd/commit/539f457d8171db34bb5a74543b9eb913b247ea5f", "message": "fix: use rulechain", "committedDate": "2020-12-24T22:21:44Z", "type": "commit"}, {"oid": "49bab051e8d970b8967e71f61fdab56523258b2b", "url": "https://github.com/pmd/pmd/commit/49bab051e8d970b8967e71f61fdab56523258b2b", "message": "fix: use primitive", "committedDate": "2020-12-24T22:22:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjYzNjIyMQ==", "url": "https://github.com/pmd/pmd/pull/2959#discussion_r556636221", "body": "Arent apex identifiers case insensitive? Should this compare the image ignoring case?", "bodyText": "Arent apex identifiers case insensitive? Should this compare the image ignoring case?", "bodyHTML": "<p dir=\"auto\">Arent apex identifiers case insensitive? Should this compare the image ignoring case?</p>", "author": "oowekyala", "createdAt": "2021-01-13T15:57:41Z", "path": "pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/errorprone/OverrideBothEqualsAndHashcodeRule.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/**\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+package net.sourceforge.pmd.lang.apex.rule.errorprone;\n+\n+import net.sourceforge.pmd.lang.apex.ast.ASTMethod;\n+import net.sourceforge.pmd.lang.apex.ast.ASTParameter;\n+import net.sourceforge.pmd.lang.apex.ast.ASTUserClass;\n+import net.sourceforge.pmd.lang.apex.ast.ApexNode;\n+import net.sourceforge.pmd.lang.apex.rule.AbstractApexRule;\n+\n+public class OverrideBothEqualsAndHashcodeRule extends AbstractApexRule {\n+\n+    public OverrideBothEqualsAndHashcodeRule() {\n+        addRuleChainVisit(ASTUserClass.class);\n+    }\n+\n+    @Override\n+    public Object visit(ASTUserClass node, Object data) {\n+        ApexNode<?> equalsNode = null;\n+        ApexNode<?> hashNode = null;\n+        for (ASTMethod method : node.findChildrenOfType(ASTMethod.class)) {\n+            if (equalsNode == null && isEquals(method)) {\n+                equalsNode = method;\n+            }\n+            if (hashNode == null && isHashCode(method)) {\n+                hashNode = method;\n+            }\n+            if (hashNode != null && equalsNode != null) {\n+                break;\n+            }\n+        }\n+\n+        if (equalsNode != null && hashNode == null) {\n+            addViolation(data, equalsNode);\n+        } else if (hashNode != null && equalsNode == null) {\n+            addViolation(data, hashNode);\n+        }\n+\n+        return data;\n+    }\n+\n+    private boolean isEquals(ASTMethod node) {\n+        int numParams = 0;\n+        String paramType = null;\n+        for (int ix = 0; ix < node.getNumChildren(); ix++) {\n+            ApexNode<?> sn = node.getChild(ix);\n+            if (sn instanceof ASTParameter) {\n+                numParams++;\n+                paramType = ((ASTParameter) sn).getType();\n+            }\n+        }\n+        return numParams == 1 && node.hasImageEqualTo(\"equals\") && \"Object\".equalsIgnoreCase(paramType);", "originalCommit": "49bab051e8d970b8967e71f61fdab56523258b2b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTIwOTg5Ng==", "url": "https://github.com/pmd/pmd/pull/2959#discussion_r559209896", "bodyText": "Yes, apex is case-insensitive. I'll adjust this when merging....", "author": "adangel", "createdAt": "2021-01-17T17:09:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjYzNjIyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODgzMjI1MA==", "url": "https://github.com/pmd/pmd/pull/2959#discussion_r568832250", "bodyText": "ah, good catch. thanks.", "author": "recdevs", "createdAt": "2021-02-02T18:25:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjYzNjIyMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTIwOTk4Nw==", "url": "https://github.com/pmd/pmd/pull/2959#discussion_r559209987", "body": "same here\r\n\r\n```suggestion\r\n        return numParams == 0 && \"hashCode\".equalsIgnoreCase(node.getImage());\r\n```", "bodyText": "same here\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return numParams == 0 && node.hasImageEqualTo(\"hashCode\");\n          \n          \n            \n                    return numParams == 0 && \"hashCode\".equalsIgnoreCase(node.getImage());", "bodyHTML": "<p dir=\"auto\">same here</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"66\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">return</span> numParams <span class=\"pl-k\">==</span> <span class=\"pl-c1\">0</span> <span class=\"pl-k\">&amp;&amp;</span> <span class=\"x x-first\">node</span><span class=\"pl-k x\">.</span><span class=\"x x-last\">hasImageEqualTo(</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>hashCode<span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"66\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">return</span> numParams <span class=\"pl-k\">==</span> <span class=\"pl-c1\">0</span> <span class=\"pl-k\">&amp;&amp;</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>hashCode<span class=\"pl-pds\">\"</span></span><span class=\"pl-k x x-first\">.</span><span class=\"x\">equalsIgnoreCase(node</span><span class=\"pl-k x\">.</span><span class=\"x x-last\">getImage()</span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "adangel", "createdAt": "2021-01-17T17:10:25Z", "path": "pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/errorprone/OverrideBothEqualsAndHashcodeRule.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/**\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+package net.sourceforge.pmd.lang.apex.rule.errorprone;\n+\n+import net.sourceforge.pmd.lang.apex.ast.ASTMethod;\n+import net.sourceforge.pmd.lang.apex.ast.ASTParameter;\n+import net.sourceforge.pmd.lang.apex.ast.ASTUserClass;\n+import net.sourceforge.pmd.lang.apex.ast.ApexNode;\n+import net.sourceforge.pmd.lang.apex.rule.AbstractApexRule;\n+\n+public class OverrideBothEqualsAndHashcodeRule extends AbstractApexRule {\n+\n+    public OverrideBothEqualsAndHashcodeRule() {\n+        addRuleChainVisit(ASTUserClass.class);\n+    }\n+\n+    @Override\n+    public Object visit(ASTUserClass node, Object data) {\n+        ApexNode<?> equalsNode = null;\n+        ApexNode<?> hashNode = null;\n+        for (ASTMethod method : node.findChildrenOfType(ASTMethod.class)) {\n+            if (equalsNode == null && isEquals(method)) {\n+                equalsNode = method;\n+            }\n+            if (hashNode == null && isHashCode(method)) {\n+                hashNode = method;\n+            }\n+            if (hashNode != null && equalsNode != null) {\n+                break;\n+            }\n+        }\n+\n+        if (equalsNode != null && hashNode == null) {\n+            addViolation(data, equalsNode);\n+        } else if (hashNode != null && equalsNode == null) {\n+            addViolation(data, hashNode);\n+        }\n+\n+        return data;\n+    }\n+\n+    private boolean isEquals(ASTMethod node) {\n+        int numParams = 0;\n+        String paramType = null;\n+        for (int ix = 0; ix < node.getNumChildren(); ix++) {\n+            ApexNode<?> sn = node.getChild(ix);\n+            if (sn instanceof ASTParameter) {\n+                numParams++;\n+                paramType = ((ASTParameter) sn).getType();\n+            }\n+        }\n+        return numParams == 1 && node.hasImageEqualTo(\"equals\") && \"Object\".equalsIgnoreCase(paramType);\n+    }\n+\n+    private boolean isHashCode(ASTMethod node) {\n+        int numParams = 0;\n+        for (int ix = 0; ix < node.getNumChildren(); ix++) {\n+            ApexNode<?> sn = node.getChild(ix);\n+            if (sn instanceof ASTParameter) {\n+                numParams++;\n+            }\n+        }\n+\n+        return numParams == 0 && node.hasImageEqualTo(\"hashCode\");", "originalCommit": "49bab051e8d970b8967e71f61fdab56523258b2b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}