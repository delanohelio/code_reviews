{"pr_number": 2665, "pr_title": "[java] Name disambiguation in annotations", "pr_author": "oowekyala", "pr_createdAt": "2020-07-26T14:26:31Z", "pr_url": "https://github.com/pmd/pmd/pull/2665", "timeline": [{"oid": "64ee073fcaca62da12023726b5a6683253c6bfa1", "url": "https://github.com/pmd/pmd/commit/64ee073fcaca62da12023726b5a6683253c6bfa1", "message": "Annotation disambiguation", "committedDate": "2020-07-24T22:30:30Z", "type": "commit"}, {"oid": "95d8f49010e62caf9b5a3954503665de89690a39", "url": "https://github.com/pmd/pmd/commit/95d8f49010e62caf9b5a3954503665de89690a39", "message": "Tighter validation", "committedDate": "2020-07-24T23:24:57Z", "type": "commit"}, {"oid": "516a3866835ada3b51fdd080bb4f9b6a5a4656b1", "url": "https://github.com/pmd/pmd/commit/516a3866835ada3b51fdd080bb4f9b6a5a4656b1", "message": "Remove image of ClassOrInterfaceType", "committedDate": "2020-07-26T12:30:18Z", "type": "commit"}, {"oid": "1770cdc22777414ad2e10e716d079a80e8934223", "url": "https://github.com/pmd/pmd/commit/1770cdc22777414ad2e10e716d079a80e8934223", "message": "Remove some methods that depend on type image", "committedDate": "2020-07-26T13:10:26Z", "type": "commit"}, {"oid": "2a14d7363bf6a3dbbb8ed21bfb5ca0500ccfba91", "url": "https://github.com/pmd/pmd/commit/2a14d7363bf6a3dbbb8ed21bfb5ca0500ccfba91", "message": "Complete designer bindings", "committedDate": "2020-07-26T13:27:52Z", "type": "commit"}, {"oid": "d4febe7fdd212ab73fd5d4abbaa12d116174eaa4", "url": "https://github.com/pmd/pmd/commit/d4febe7fdd212ab73fd5d4abbaa12d116174eaa4", "message": "Better errors for annotations", "committedDate": "2020-07-26T14:24:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjg2MTYzNQ==", "url": "https://github.com/pmd/pmd/pull/2665#discussion_r462861635", "body": "Would it make sense to keep a deprecated `getAnnotationName()` method around (DeprecatedUntil700)?", "bodyText": "Would it make sense to keep a deprecated getAnnotationName() method around (DeprecatedUntil700)?", "bodyHTML": "<p dir=\"auto\">Would it make sense to keep a deprecated <code>getAnnotationName()</code> method around (DeprecatedUntil700)?</p>", "author": "adangel", "createdAt": "2020-07-30T09:12:51Z", "path": "pmd-java/src/main/java/net/sourceforge/pmd/lang/java/ast/ASTAnnotation.java", "diffHunk": "@@ -9,45 +9,47 @@\n import org.checkerframework.checker.nullness.qual.Nullable;\n \n import net.sourceforge.pmd.lang.ast.NodeStream;\n-import net.sourceforge.pmd.util.StringUtil;\n+import net.sourceforge.pmd.lang.java.symbols.JClassSymbol;\n \n /**\n  * Represents an annotation.\n  *\n  * <pre class=\"grammar\">\n  *\n- * Annotation ::= \"@\" Name {@link ASTAnnotationMemberList AnnotationMemberList}?\n+ * Annotation ::= \"@\" {@link ASTClassOrInterfaceType ClassName} {@link ASTAnnotationMemberList AnnotationMemberList}?\n  *\n  * </pre>\n  */\n public final class ASTAnnotation extends AbstractJavaTypeNode implements TypeNode, ASTMemberValue, Iterable<ASTMemberValuePair> {\n \n-    String name;\n-\n     ASTAnnotation(int id) {\n         super(id);\n     }\n \n \n     /**\n-     * Returns the name of the annotation as it is used,\n-     * eg {@code java.lang.Override} or {@code Override}.\n+     * Returns the node that represents the name of the annotation.\n      */\n-    public String getAnnotationName() {", "originalCommit": "d4febe7fdd212ab73fd5d4abbaa12d116174eaa4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjg2NDczNw==", "url": "https://github.com/pmd/pmd/pull/2665#discussion_r462864737", "body": "I guess, we should deprecate this method on master. It seems to be used only by one rule - ExceptionAsFlowControl", "bodyText": "I guess, we should deprecate this method on master. It seems to be used only by one rule - ExceptionAsFlowControl", "bodyHTML": "<p dir=\"auto\">I guess, we should deprecate this method on master. It seems to be used only by one rule - ExceptionAsFlowControl</p>", "author": "adangel", "createdAt": "2020-07-30T09:18:25Z", "path": "pmd-java/src/main/java/net/sourceforge/pmd/lang/java/ast/ASTThrowStatement.java", "diffHunk": "@@ -32,23 +32,4 @@ public ASTExpression getExpr() {\n         return (ASTExpression) getFirstChild();\n     }\n \n-    /**\n-     * Gets the image of the first ASTClassOrInterfaceType child or\n-     * <code>null</code> if none is found. Note that when the statement is\n-     * something like throw new Exception, this method returns 'Exception' and\n-     * if the throw statement is like throw e: this method returns 'e'. A\n-     * special case of returning <code>null</code> is when the throws is like\n-     * throw this.e or throw this.\n-     *\n-     * This is too specific\n-     *\n-     * <p>TODO - use symbol table (?)</p>\n-     *\n-     * @return the image of the first ASTClassOrInterfaceType node found or\n-     *     <code>null</code>\n-     */\n-    public String getFirstClassOrInterfaceTypeImage() {", "originalCommit": "d4febe7fdd212ab73fd5d4abbaa12d116174eaa4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjg5NDE2NA==", "url": "https://github.com/pmd/pmd/pull/2665#discussion_r462894164", "bodyText": "Done: a5eb602", "author": "adangel", "createdAt": "2020-07-30T10:11:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjg2NDczNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjg2NjAzMQ==", "url": "https://github.com/pmd/pmd/pull/2665#discussion_r462866031", "body": "We'll get a PositionLiteralFirstInComparison violation\r\n\r\n```suggestion\r\n        if (\"java.lang.SuppressWarnings\".equals(annotation.getSymbol().getBinaryName())) {\r\n```", "bodyText": "We'll get a PositionLiteralFirstInComparison violation\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (annotation.getSymbol().getBinaryName().equals(\"java.lang.SuppressWarnings\")) {\n          \n          \n            \n                    if (\"java.lang.SuppressWarnings\".equals(annotation.getSymbol().getBinaryName())) {", "bodyHTML": "<p dir=\"auto\">We'll get a PositionLiteralFirstInComparison violation</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"109\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">if</span> (annotation<span class=\"pl-k\">.</span>getSymbol()<span class=\"pl-k\">.</span>getBinaryName()<span class=\"pl-k x x-first\">.</span><span class=\"x\">equals(</span><span class=\"pl-s\"><span class=\"pl-pds x\">\"</span><span class=\"x\">java.lang.SuppressWarnings</span><span class=\"pl-pds x x-last\">\"</span></span>)) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"109\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">if</span> (<span class=\"pl-s\"><span class=\"pl-pds x x-first\">\"</span><span class=\"x\">java.lang.SuppressWarnings</span><span class=\"pl-pds x\">\"</span></span><span class=\"pl-k x\">.</span><span class=\"x x-last\">equals(</span>annotation<span class=\"pl-k\">.</span>getSymbol()<span class=\"pl-k\">.</span>getBinaryName())) {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "adangel", "createdAt": "2020-07-30T09:20:42Z", "path": "pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/internal/AnnotationSuppressionUtil.java", "diffHunk": "@@ -107,9 +106,8 @@ private static boolean hasSuppressWarningsAnnotationFor(final Annotatable node,\n \n     // @formatter:on\n     private static boolean annotationSuppresses(ASTAnnotation annotation, Rule rule) {\n-        // if (SuppressWarnings.class.equals(getType())) { // typeres is not always on\n-        if (TypeHelper.isA(annotation, SuppressWarnings.class)) {\n-            for (ASTLiteral element : annotation.findDescendantsOfType(ASTLiteral.class)) {\n+        if (annotation.getSymbol().getBinaryName().equals(\"java.lang.SuppressWarnings\")) {", "originalCommit": "d4febe7fdd212ab73fd5d4abbaa12d116174eaa4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}