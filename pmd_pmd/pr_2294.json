{"pr_number": 2294, "pr_title": "[vf, jsp] Adapt JSP & VF modules to new javacc wrapper", "pr_author": "oowekyala", "pr_createdAt": "2020-02-17T07:32:20Z", "pr_url": "https://github.com/pmd/pmd/pull/2294", "timeline": [{"oid": "f914319bcb4eb735b09679ae0edc0de8279af694", "url": "https://github.com/pmd/pmd/commit/f914319bcb4eb735b09679ae0edc0de8279af694", "message": "Port JSP module", "committedDate": "2020-02-17T07:06:11Z", "type": "commit"}, {"oid": "c96f9b17348f2eaa3dbfdd404fa9231aa6821494", "url": "https://github.com/pmd/pmd/commit/c96f9b17348f2eaa3dbfdd404fa9231aa6821494", "message": "Fix tests", "committedDate": "2020-02-17T07:06:11Z", "type": "commit"}, {"oid": "137a6a74f4207e5f684ed07a58f00489b709f456", "url": "https://github.com/pmd/pmd/commit/137a6a74f4207e5f684ed07a58f00489b709f456", "message": "Port VF module", "committedDate": "2020-02-17T07:06:11Z", "type": "commit"}, {"oid": "b5bc047b2152b41d78113958799d67c2e9af3d2e", "url": "https://github.com/pmd/pmd/commit/b5bc047b2152b41d78113958799d67c2e9af3d2e", "message": "Fix jsp node class visibility", "committedDate": "2020-02-17T07:06:11Z", "type": "commit"}, {"oid": "8060e37da470758ba4a2afc1fc3667266a7a0b68", "url": "https://github.com/pmd/pmd/commit/8060e37da470758ba4a2afc1fc3667266a7a0b68", "message": "Restrict visibility of node ctors", "committedDate": "2020-02-17T07:06:11Z", "type": "commit"}, {"oid": "a69fa93a32264f10fd6c773ded5c525dbbcaaaf2", "url": "https://github.com/pmd/pmd/commit/a69fa93a32264f10fd6c773ded5c525dbbcaaaf2", "message": "Remove whitespace changes", "committedDate": "2020-02-17T07:31:47Z", "type": "commit"}, {"oid": "a9b6e78cfc250531e4b2fc55813177a729f1ecc0", "url": "https://github.com/pmd/pmd/commit/a9b6e78cfc250531e4b2fc55813177a729f1ecc0", "message": "Normalise line endings in test", "committedDate": "2020-02-17T15:59:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ2NTE5NA==", "url": "https://github.com/pmd/pmd/pull/2294#discussion_r388465194", "body": "Hm... seems we lost the feature to skip the BOM...\r\n\r\nThe simplest way would be probably:\r\n\r\n```java\r\nStringBuilder buffer = sourceCode.getCodeBuffer();\r\nReader reader;\r\n\r\nif (buffer.charAt(0) == '\\uFEFF') {\r\n    // skip BOM if present\r\n    reader = new CharSequenceReader(buffer.substring(1));\r\n} else {\r\n    reader = new CharSequenceReader(buffer);\r\n}\r\nreturn new JspTokenManager(reader);\r\n```", "bodyText": "Hm... seems we lost the feature to skip the BOM...\nThe simplest way would be probably:\nStringBuilder buffer = sourceCode.getCodeBuffer();\nReader reader;\n\nif (buffer.charAt(0) == '\\uFEFF') {\n    // skip BOM if present\n    reader = new CharSequenceReader(buffer.substring(1));\n} else {\n    reader = new CharSequenceReader(buffer);\n}\nreturn new JspTokenManager(reader);", "bodyHTML": "<p dir=\"auto\">Hm... seems we lost the feature to skip the BOM...</p>\n<p dir=\"auto\">The simplest way would be probably:</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"StringBuilder buffer = sourceCode.getCodeBuffer();\nReader reader;\n\nif (buffer.charAt(0) == '\\uFEFF') {\n    // skip BOM if present\n    reader = new CharSequenceReader(buffer.substring(1));\n} else {\n    reader = new CharSequenceReader(buffer);\n}\nreturn new JspTokenManager(reader);\"><pre><span class=\"pl-smi\">StringBuilder</span> buffer <span class=\"pl-k\">=</span> sourceCode<span class=\"pl-k\">.</span>getCodeBuffer();\n<span class=\"pl-smi\">Reader</span> reader;\n\n<span class=\"pl-k\">if</span> (buffer<span class=\"pl-k\">.</span>charAt(<span class=\"pl-c1\">0</span>) <span class=\"pl-k\">==</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span><span class=\"pl-cce\">\\u</span>FEFF<span class=\"pl-pds\">'</span></span>) {\n    <span class=\"pl-c\"><span class=\"pl-c\">//</span> skip BOM if present</span>\n    reader <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">CharSequenceReader</span>(buffer<span class=\"pl-k\">.</span>substring(<span class=\"pl-c1\">1</span>));\n} <span class=\"pl-k\">else</span> {\n    reader <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">CharSequenceReader</span>(buffer);\n}\n<span class=\"pl-k\">return</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">JspTokenManager</span>(reader);</pre></div>", "author": "adangel", "createdAt": "2020-03-05T18:00:02Z", "path": "pmd-jsp/src/main/java/net/sourceforge/pmd/cpd/JSPTokenizer.java", "diffHunk": "@@ -4,38 +4,17 @@\n \n package net.sourceforge.pmd.cpd;\n \n-import java.io.IOException;\n-import java.io.Reader;\n-import java.io.StringReader;\n+import org.apache.commons.io.input.CharSequenceReader;\n \n-import net.sourceforge.pmd.lang.LanguageRegistry;\n-import net.sourceforge.pmd.lang.LanguageVersionHandler;\n+import net.sourceforge.pmd.cpd.internal.JavaCCTokenizer;\n import net.sourceforge.pmd.lang.TokenManager;\n-import net.sourceforge.pmd.lang.jsp.JspLanguageModule;\n-import net.sourceforge.pmd.lang.jsp.ast.Token;\n-import net.sourceforge.pmd.util.IOUtil;\n+import net.sourceforge.pmd.lang.jsp.ast.JspTokenManager;\n \n-public class JSPTokenizer implements Tokenizer {\n+public class JSPTokenizer extends JavaCCTokenizer {\n \n     @Override\n-    public void tokenize(SourceCode sourceCode, Tokens tokenEntries) {\n-        StringBuilder buffer = sourceCode.getCodeBuffer();\n-        LanguageVersionHandler languageVersionHandler = LanguageRegistry.getLanguage(JspLanguageModule.NAME)\n-                .getDefaultVersion().getLanguageVersionHandler();\n-\n-        try (Reader reader = IOUtil.skipBOM(new StringReader(buffer.toString()))) {\n-            TokenManager tokenMgr = languageVersionHandler.getParser(languageVersionHandler.getDefaultParserOptions())\n-                    .getTokenManager(sourceCode.getFileName(), reader);\n-            Token currentToken = (Token) tokenMgr.getNextToken();\n-\n-            while (currentToken.image.length() > 0) {\n-                tokenEntries.add(new TokenEntry(String.valueOf(currentToken.kind), sourceCode.getFileName(),\n-                        currentToken.beginLine, currentToken.beginColumn, currentToken.endColumn));\n-                currentToken = (Token) tokenMgr.getNextToken();\n-            }\n-        } catch (IOException e) {\n-            e.printStackTrace();\n-        }\n-        tokenEntries.add(TokenEntry.getEOF());\n+    protected TokenManager getLexerForSource(SourceCode sourceCode) {\n+        return new JspTokenManager(new CharSequenceReader(sourceCode.getCodeBuffer()));", "originalCommit": "a9b6e78cfc250531e4b2fc55813177a729f1ecc0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTYxMzU3Mg==", "url": "https://github.com/pmd/pmd/pull/2294#discussion_r389613572", "bodyText": "Can we just use IOUtil::skipBOM?", "author": "oowekyala", "createdAt": "2020-03-09T11:54:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ2NTE5NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ2NjA5MA==", "url": "https://github.com/pmd/pmd/pull/2294#discussion_r388466090", "body": "* We need to deprecate/internalize first on master.\r\n* We should directly make the AST node final now\r\n* The setter `setName()` can be package-private.", "bodyText": "We need to deprecate/internalize first on master.\nWe should directly make the AST node final now\nThe setter setName() can be package-private.", "bodyHTML": "<ul dir=\"auto\">\n<li>We need to deprecate/internalize first on master.</li>\n<li>We should directly make the AST node final now</li>\n<li>The setter <code>setName()</code> can be package-private.</li>\n</ul>", "author": "adangel", "createdAt": "2020-03-05T18:01:42Z", "path": "pmd-jsp/src/main/java/net/sourceforge/pmd/lang/jsp/ast/ASTAttribute.java", "diffHunk": "@@ -9,14 +9,10 @@\n \n     private String name;\n \n-    public ASTAttribute(int id) {\n+    ASTAttribute(int id) {", "originalCommit": "a9b6e78cfc250531e4b2fc55813177a729f1ecc0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ4OTE5Mg==", "url": "https://github.com/pmd/pmd/pull/2294#discussion_r388489192", "body": "`setName()` can be package-private as well", "bodyText": "setName() can be package-private as well", "bodyHTML": "<p dir=\"auto\"><code>setName()</code> can be package-private as well</p>", "author": "adangel", "createdAt": "2020-03-05T18:46:12Z", "path": "pmd-jsp/src/main/java/net/sourceforge/pmd/lang/jsp/ast/ASTDeclaration.java", "diffHunk": "@@ -9,14 +9,10 @@\n \n     private String name;\n \n-    public ASTDeclaration(int id) {\n+    ASTDeclaration(int id) {", "originalCommit": "a9b6e78cfc250531e4b2fc55813177a729f1ecc0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ4OTUyNw==", "url": "https://github.com/pmd/pmd/pull/2294#discussion_r388489527", "body": "`setName()` can be package-private", "bodyText": "setName() can be package-private", "bodyHTML": "<p dir=\"auto\"><code>setName()</code> can be package-private</p>", "author": "adangel", "createdAt": "2020-03-05T18:46:50Z", "path": "pmd-jsp/src/main/java/net/sourceforge/pmd/lang/jsp/ast/ASTDoctypeDeclaration.java", "diffHunk": "@@ -12,14 +12,10 @@\n      */\n     private String name;\n \n-    public ASTDoctypeDeclaration(int id) {\n+    ASTDoctypeDeclaration(int id) {", "originalCommit": "a9b6e78cfc250531e4b2fc55813177a729f1ecc0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ4OTg2Ng==", "url": "https://github.com/pmd/pmd/pull/2294#discussion_r388489866", "body": "`setUri()` and `setPublicId()` can be package-private", "bodyText": "setUri() and setPublicId() can be package-private", "bodyHTML": "<p dir=\"auto\"><code>setUri()</code> and <code>setPublicId()</code> can be package-private</p>", "author": "adangel", "createdAt": "2020-03-05T18:47:32Z", "path": "pmd-jsp/src/main/java/net/sourceforge/pmd/lang/jsp/ast/ASTDoctypeExternalId.java", "diffHunk": "@@ -17,14 +17,10 @@\n      */\n     private String publicId;\n \n-    public ASTDoctypeExternalId(int id) {\n+    ASTDoctypeExternalId(int id) {", "originalCommit": "a9b6e78cfc250531e4b2fc55813177a729f1ecc0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ5MTcxMQ==", "url": "https://github.com/pmd/pmd/pull/2294#discussion_r388491711", "body": "The setters setEmpty, setName, setUnclosed can be package-private as well.", "bodyText": "The setters setEmpty, setName, setUnclosed can be package-private as well.", "bodyHTML": "<p dir=\"auto\">The setters setEmpty, setName, setUnclosed can be package-private as well.</p>", "author": "adangel", "createdAt": "2020-03-05T18:50:55Z", "path": "pmd-jsp/src/main/java/net/sourceforge/pmd/lang/jsp/ast/ASTElement.java", "diffHunk": "@@ -23,14 +23,10 @@\n      */\n     private boolean unclosed;\n \n-    public ASTElement(int id) {\n+    ASTElement(int id) {", "originalCommit": "a9b6e78cfc250531e4b2fc55813177a729f1ecc0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ5MjczOQ==", "url": "https://github.com/pmd/pmd/pull/2294#discussion_r388492739", "body": "The setter \"setName\" can be package-private as well", "bodyText": "The setter \"setName\" can be package-private as well", "bodyHTML": "<p dir=\"auto\">The setter \"setName\" can be package-private as well</p>", "author": "adangel", "createdAt": "2020-03-05T18:52:45Z", "path": "pmd-jsp/src/main/java/net/sourceforge/pmd/lang/jsp/ast/ASTJspDirective.java", "diffHunk": "@@ -12,14 +12,10 @@\n      */\n     private String name;\n \n-    public ASTJspDirective(int id) {\n+    ASTJspDirective(int id) {", "originalCommit": "a9b6e78cfc250531e4b2fc55813177a729f1ecc0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ5MzA5OQ==", "url": "https://github.com/pmd/pmd/pull/2294#discussion_r388493099", "body": "The setters setName and setValue can be package-private as well.", "bodyText": "The setters setName and setValue can be package-private as well.", "bodyHTML": "<p dir=\"auto\">The setters setName and setValue can be package-private as well.</p>", "author": "adangel", "createdAt": "2020-03-05T18:53:27Z", "path": "pmd-jsp/src/main/java/net/sourceforge/pmd/lang/jsp/ast/ASTJspDirectiveAttribute.java", "diffHunk": "@@ -10,14 +10,10 @@\n     private String name;\n     private String value;\n \n-    public ASTJspDirectiveAttribute(int id) {\n+    ASTJspDirectiveAttribute(int id) {", "originalCommit": "a9b6e78cfc250531e4b2fc55813177a729f1ecc0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUxMjUzOQ==", "url": "https://github.com/pmd/pmd/pull/2294#discussion_r388512539", "body": "We need to skip the BOM to preserve same behavior...", "bodyText": "We need to skip the BOM to preserve same behavior...", "bodyHTML": "<p dir=\"auto\">We need to skip the BOM to preserve same behavior...</p>", "author": "adangel", "createdAt": "2020-03-05T19:26:37Z", "path": "pmd-visualforce/src/main/java/net/sourceforge/pmd/cpd/VfTokenizer.java", "diffHunk": "@@ -4,42 +4,19 @@\n \n package net.sourceforge.pmd.cpd;\n \n-import java.io.IOException;\n-import java.io.Reader;\n-import java.io.StringReader;\n+import org.apache.commons.io.input.CharSequenceReader;\n \n-import net.sourceforge.pmd.lang.LanguageRegistry;\n-import net.sourceforge.pmd.lang.LanguageVersionHandler;\n+import net.sourceforge.pmd.cpd.internal.JavaCCTokenizer;\n import net.sourceforge.pmd.lang.TokenManager;\n-import net.sourceforge.pmd.lang.vf.VfLanguageModule;\n-import net.sourceforge.pmd.lang.vf.ast.Token;\n-import net.sourceforge.pmd.util.IOUtil;\n+import net.sourceforge.pmd.lang.vf.ast.VfTokenManager;\n \n /**\n  * @author sergey.gorbaty\n- *\n  */\n-public class VfTokenizer implements Tokenizer {\n+public class VfTokenizer extends JavaCCTokenizer {\n \n     @Override\n-    public void tokenize(SourceCode sourceCode, Tokens tokenEntries) {\n-        StringBuilder buffer = sourceCode.getCodeBuffer();\n-        LanguageVersionHandler languageVersionHandler = LanguageRegistry.getLanguage(VfLanguageModule.NAME)\n-                .getDefaultVersion().getLanguageVersionHandler();\n-\n-        try (Reader reader = IOUtil.skipBOM(new StringReader(buffer.toString()))) {\n-            TokenManager tokenMgr = languageVersionHandler.getParser(languageVersionHandler.getDefaultParserOptions())\n-                    .getTokenManager(sourceCode.getFileName(), reader);\n-            Token currentToken = (Token) tokenMgr.getNextToken();\n-\n-            while (currentToken.image.length() > 0) {\n-                tokenEntries.add(new TokenEntry(String.valueOf(currentToken.kind), sourceCode.getFileName(),\n-                        currentToken.beginLine, currentToken.beginColumn, currentToken.endColumn));\n-                currentToken = (Token) tokenMgr.getNextToken();\n-            }\n-        } catch (IOException e) {\n-            e.printStackTrace();\n-        }\n-        tokenEntries.add(TokenEntry.getEOF());\n+    protected TokenManager getLexerForSource(SourceCode sourceCode) {\n+        return new VfTokenManager(new CharSequenceReader(sourceCode.getCodeBuffer()));", "originalCommit": "a9b6e78cfc250531e4b2fc55813177a729f1ecc0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUxMzM4OA==", "url": "https://github.com/pmd/pmd/pull/2294#discussion_r388513388", "body": "The setter \"setName\" can be package-private as well", "bodyText": "The setter \"setName\" can be package-private as well", "bodyHTML": "<p dir=\"auto\">The setter \"setName\" can be package-private as well</p>", "author": "adangel", "createdAt": "2020-03-05T19:28:09Z", "path": "pmd-visualforce/src/main/java/net/sourceforge/pmd/lang/vf/ast/ASTAttribute.java", "diffHunk": "@@ -5,18 +5,14 @@\n \n package net.sourceforge.pmd.lang.vf.ast;\n \n-public class ASTAttribute extends AbstractVFNode {\n+public class ASTAttribute extends AbstractVfNode {\n \n     private String name;\n \n-    public ASTAttribute(int id) {\n+    ASTAttribute(int id) {", "originalCommit": "a9b6e78cfc250531e4b2fc55813177a729f1ecc0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUxNDE1OA==", "url": "https://github.com/pmd/pmd/pull/2294#discussion_r388514158", "body": "The setter \"setName\" can be package-private as well.", "bodyText": "The setter \"setName\" can be package-private as well.", "bodyHTML": "<p dir=\"auto\">The setter \"setName\" can be package-private as well.</p>", "author": "adangel", "createdAt": "2020-03-05T19:29:36Z", "path": "pmd-visualforce/src/main/java/net/sourceforge/pmd/lang/vf/ast/ASTDeclaration.java", "diffHunk": "@@ -5,18 +5,14 @@\n \n package net.sourceforge.pmd.lang.vf.ast;\n \n-public class ASTDeclaration extends AbstractVFNode {\n+public class ASTDeclaration extends AbstractVfNode {\n \n     private String name;\n \n-    public ASTDeclaration(int id) {\n+    ASTDeclaration(int id) {", "originalCommit": "a9b6e78cfc250531e4b2fc55813177a729f1ecc0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUxNDU3Mg==", "url": "https://github.com/pmd/pmd/pull/2294#discussion_r388514572", "body": "The setter \"setName\" can be package-private as well.", "bodyText": "The setter \"setName\" can be package-private as well.", "bodyHTML": "<p dir=\"auto\">The setter \"setName\" can be package-private as well.</p>", "author": "adangel", "createdAt": "2020-03-05T19:30:24Z", "path": "pmd-visualforce/src/main/java/net/sourceforge/pmd/lang/vf/ast/ASTDoctypeDeclaration.java", "diffHunk": "@@ -5,21 +5,17 @@\n \n package net.sourceforge.pmd.lang.vf.ast;\n \n-public class ASTDoctypeDeclaration extends AbstractVFNode {\n+public class ASTDoctypeDeclaration extends AbstractVfNode {\n \n     /**\n      * Name of the document type. Cannot be null.\n      */\n     private String name;\n \n-    public ASTDoctypeDeclaration(int id) {\n+    ASTDoctypeDeclaration(int id) {", "originalCommit": "a9b6e78cfc250531e4b2fc55813177a729f1ecc0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUxNTE2Nw==", "url": "https://github.com/pmd/pmd/pull/2294#discussion_r388515167", "body": "The setters \"setPublicId\" and \"setUri\" can be package-private", "bodyText": "The setters \"setPublicId\" and \"setUri\" can be package-private", "bodyHTML": "<p dir=\"auto\">The setters \"setPublicId\" and \"setUri\" can be package-private</p>", "author": "adangel", "createdAt": "2020-03-05T19:31:31Z", "path": "pmd-visualforce/src/main/java/net/sourceforge/pmd/lang/vf/ast/ASTDoctypeExternalId.java", "diffHunk": "@@ -17,14 +17,10 @@\n      */\n     private String publicId;\n \n-    public ASTDoctypeExternalId(int id) {\n+    ASTDoctypeExternalId(int id) {", "originalCommit": "a9b6e78cfc250531e4b2fc55813177a729f1ecc0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUxNTk4MA==", "url": "https://github.com/pmd/pmd/pull/2294#discussion_r388515980", "body": "The setters \"setEmpty\", \"setName\", \"setUnclosed\" can be package-private", "bodyText": "The setters \"setEmpty\", \"setName\", \"setUnclosed\" can be package-private", "bodyHTML": "<p dir=\"auto\">The setters \"setEmpty\", \"setName\", \"setUnclosed\" can be package-private</p>", "author": "adangel", "createdAt": "2020-03-05T19:33:13Z", "path": "pmd-visualforce/src/main/java/net/sourceforge/pmd/lang/vf/ast/ASTElement.java", "diffHunk": "@@ -23,14 +23,10 @@\n      */\n     private boolean unclosed;\n \n-    public ASTElement(int id) {\n+    ASTElement(int id) {", "originalCommit": "a9b6e78cfc250531e4b2fc55813177a729f1ecc0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "fd0d53b5900b6f7bb2119ca8e9048a6c5c2002af", "url": "https://github.com/pmd/pmd/commit/fd0d53b5900b6f7bb2119ca8e9048a6c5c2002af", "message": "Merge branch '7.0.x' into port-jsp-vf-modules", "committedDate": "2020-03-17T14:46:41Z", "type": "commit"}, {"oid": "5fe9fb8f522e4b0319848dffab52cc29f7afe6ee", "url": "https://github.com/pmd/pmd/commit/5fe9fb8f522e4b0319848dffab52cc29f7afe6ee", "message": "Make JSP nodes final", "committedDate": "2020-03-17T14:47:51Z", "type": "commit"}, {"oid": "7ecdd394b2afa7be25ed7e4081887f91b955cd48", "url": "https://github.com/pmd/pmd/commit/7ecdd394b2afa7be25ed7e4081887f91b955cd48", "message": "Make VF nodes final", "committedDate": "2020-03-17T14:48:30Z", "type": "commit"}, {"oid": "7108a166d4d08fb2e015e294cadbd86c791fd6aa", "url": "https://github.com/pmd/pmd/commit/7108a166d4d08fb2e015e294cadbd86c791fd6aa", "message": "Make setters package-private", "committedDate": "2020-03-17T14:51:22Z", "type": "commit"}, {"oid": "affb0461c9ca39129571c046c1cf96010020a964", "url": "https://github.com/pmd/pmd/commit/affb0461c9ca39129571c046c1cf96010020a964", "message": "Skip bom", "committedDate": "2020-03-17T14:53:37Z", "type": "commit"}, {"oid": "affb0461c9ca39129571c046c1cf96010020a964", "url": "https://github.com/pmd/pmd/commit/affb0461c9ca39129571c046c1cf96010020a964", "message": "Skip bom", "committedDate": "2020-03-17T14:53:37Z", "type": "forcePushed"}, {"oid": "f767903b0c9e0f45d48049d566fea12c148c24c7", "url": "https://github.com/pmd/pmd/commit/f767903b0c9e0f45d48049d566fea12c148c24c7", "message": "Checkstyle", "committedDate": "2020-03-17T16:25:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDk3MDg0Ng==", "url": "https://github.com/pmd/pmd/pull/2294#discussion_r394970846", "body": "We can remove now `@Deprecated` / `@InternalApi`", "bodyText": "We can remove now @Deprecated / @InternalApi", "bodyHTML": "<p dir=\"auto\">We can remove now <code>@Deprecated</code> / <code>@InternalApi</code></p>", "author": "adangel", "createdAt": "2020-03-19T11:52:31Z", "path": "pmd-visualforce/src/main/java/net/sourceforge/pmd/lang/vf/ast/ASTArguments.java", "diffHunk": "@@ -6,17 +6,12 @@\n \n import net.sourceforge.pmd.annotation.InternalApi;\n \n-public class ASTArguments extends AbstractVFNode {\n-    @Deprecated\n-    @InternalApi\n-    public ASTArguments(int id) {\n-        super(id);\n-    }\n+public final class ASTArguments extends AbstractVfNode {\n \n     @Deprecated", "originalCommit": "f767903b0c9e0f45d48049d566fea12c148c24c7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAzMjQ3Mg==", "url": "https://github.com/pmd/pmd/pull/2294#discussion_r395032472", "body": "Not sure, whether we decided yet: Are the `*TokenManager` classes internal api or not? The JavaTokenManager isn't...", "bodyText": "Not sure, whether we decided yet: Are the *TokenManager classes internal api or not? The JavaTokenManager isn't...", "bodyHTML": "<p dir=\"auto\">Not sure, whether we decided yet: Are the <code>*TokenManager</code> classes internal api or not? The JavaTokenManager isn't...</p>", "author": "adangel", "createdAt": "2020-03-19T13:41:26Z", "path": "pmd-visualforce/src/main/java/net/sourceforge/pmd/lang/vf/ast/VfTokenManager.java", "diffHunk": "@@ -23,10 +23,10 @@\n @Deprecated\n @InternalApi", "originalCommit": "f767903b0c9e0f45d48049d566fea12c148c24c7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA3MDMxNA==", "url": "https://github.com/pmd/pmd/pull/2294#discussion_r395070314", "bodyText": "I'll remove @Deprecated and keep @InternalApi for now...", "author": "adangel", "createdAt": "2020-03-19T14:32:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAzMjQ3Mg=="}], "type": "inlineReview"}]}