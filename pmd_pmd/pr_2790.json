{"pr_number": 2790, "pr_title": "[java] CloseResource: Fix NPE in case of \"var\"", "pr_author": "adangel", "pr_createdAt": "2020-09-17T16:54:00Z", "pr_url": "https://github.com/pmd/pmd/pull/2790", "timeline": [{"oid": "81a72cb43ef77f920732a4db80a7885e129e6a67", "url": "https://github.com/pmd/pmd/commit/81a72cb43ef77f920732a4db80a7885e129e6a67", "message": "[java] CloseResource: Fix NPE in case of \"var\"", "committedDate": "2020-09-17T16:49:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTQ1MzIyOA==", "url": "https://github.com/pmd/pmd/pull/2790#discussion_r491453228", "body": "So we don't get a NPE anymore, but we also don't consider the var as a violation? I wonder, for example, what is the behavior of the rule if you write\r\n```java\r\nimport java.io.*;\r\npublic class Foo {\r\n    public int bar() throws IOException {\r\n        var inputStream = getInputStreamFromSomewhere();\r\n        char c = reader.read();\r\n        return c;\r\n    }\r\n\r\n    InputStream getInputStreamFromSomewhere() { return null; }\r\n}\r\n```\r\n\r\nNormally, it should be exactly the same behavior as if `var` was explicitly written, right? In that case, I'm not sure the rule accounts for that, given we test the ASTType node, not VariableDeclaratorId::getType (which is the type of the var). (Note: since we do that, we are probably failing if the var is declared like `InputStream streamArray[]`)\r\n\r\nI think it would make more sense to test VariableDeclaratorId::getType, though I don't know how that interacts with existing tests\r\n", "bodyText": "So we don't get a NPE anymore, but we also don't consider the var as a violation? I wonder, for example, what is the behavior of the rule if you write\nimport java.io.*;\npublic class Foo {\n    public int bar() throws IOException {\n        var inputStream = getInputStreamFromSomewhere();\n        char c = reader.read();\n        return c;\n    }\n\n    InputStream getInputStreamFromSomewhere() { return null; }\n}\nNormally, it should be exactly the same behavior as if var was explicitly written, right? In that case, I'm not sure the rule accounts for that, given we test the ASTType node, not VariableDeclaratorId::getType (which is the type of the var). (Note: since we do that, we are probably failing if the var is declared like InputStream streamArray[])\nI think it would make more sense to test VariableDeclaratorId::getType, though I don't know how that interacts with existing tests", "bodyHTML": "<p dir=\"auto\">So we don't get a NPE anymore, but we also don't consider the var as a violation? I wonder, for example, what is the behavior of the rule if you write</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import java.io.*;\npublic class Foo {\n    public int bar() throws IOException {\n        var inputStream = getInputStreamFromSomewhere();\n        char c = reader.read();\n        return c;\n    }\n\n    InputStream getInputStreamFromSomewhere() { return null; }\n}\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-smi\">java.io.*</span>;\n<span class=\"pl-k\">public</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">Foo</span> {\n    <span class=\"pl-k\">public</span> <span class=\"pl-k\">int</span> <span class=\"pl-en\">bar</span>() <span class=\"pl-k\">throws</span> <span class=\"pl-smi\">IOException</span> {\n        <span class=\"pl-k\">var</span> inputStream <span class=\"pl-k\">=</span> getInputStreamFromSomewhere();\n        <span class=\"pl-k\">char</span> c <span class=\"pl-k\">=</span> reader<span class=\"pl-k\">.</span>read();\n        <span class=\"pl-k\">return</span> c;\n    }\n\n    <span class=\"pl-smi\">InputStream</span> <span class=\"pl-en\">getInputStreamFromSomewhere</span>() { <span class=\"pl-k\">return</span> <span class=\"pl-c1\">null</span>; }\n}</pre></div>\n<p dir=\"auto\">Normally, it should be exactly the same behavior as if <code>var</code> was explicitly written, right? In that case, I'm not sure the rule accounts for that, given we test the ASTType node, not VariableDeclaratorId::getType (which is the type of the var). (Note: since we do that, we are probably failing if the var is declared like <code>InputStream streamArray[]</code>)</p>\n<p dir=\"auto\">I think it would make more sense to test VariableDeclaratorId::getType, though I don't know how that interacts with existing tests</p>", "author": "oowekyala", "createdAt": "2020-09-19T14:24:13Z", "path": "pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/errorprone/CloseResourceRule.java", "diffHunk": "@@ -175,7 +175,7 @@ private void checkForResources(ASTMethodOrConstructorDeclaration methodOrConstru\n         Map<ASTVariableDeclarator, TypeNode> resVars = new HashMap<>();\n         for (ASTVariableDeclarator var : vars) {\n             TypeNode varType = getTypeOfVariable(var);\n-            if (isResourceTypeOrSubtype(varType)) {\n+            if (varType != null && isResourceTypeOrSubtype(varType)) {", "originalCommit": "81a72cb43ef77f920732a4db80a7885e129e6a67", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTc0MzA0Ng==", "url": "https://github.com/pmd/pmd/pull/2790#discussion_r491743046", "bodyText": "I was passing by and wanted to ask how is it possible to get var Type in PMD? In that case var variable is just ignored, right?", "author": "KroArtem", "createdAt": "2020-09-20T22:38:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTQ1MzIyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTc0Nzk1Ng==", "url": "https://github.com/pmd/pmd/pull/2790#discussion_r491747956", "bodyText": "If the variable type is inferred, then there is no type node, but the type of the VariableDeclaratorId node may be set anyway, if we can resolve the type of the initializer. In the example above, if Foo is on the classpath, then varId.getType() == InputStream.class\nThe type of the VariableDeclaratorId is always the \"real\" type of the variable, provided it's on the classpath and we can resolve it. Manipulating the VariableDeclaratorId is always preferable to testing the type node manually, for reasons explained in the javadoc", "author": "oowekyala", "createdAt": "2020-09-20T23:30:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTQ1MzIyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTgzNjA2NQ==", "url": "https://github.com/pmd/pmd/pull/2790#discussion_r491836065", "bodyText": "Thanks for your explanation!", "author": "KroArtem", "createdAt": "2020-09-21T07:23:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTQ1MzIyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI0MjMwMA==", "url": "https://github.com/pmd/pmd/pull/2790#discussion_r492242300", "bodyText": "@oowekyala I've added a simple test case for var and it seems to work as long as the initializer expression is not a method call. But I think, the lack of resolving method call result types is part of PMD 6. Maybe you fixed this already on the 7 branch?\nAnyway: The goal of this PR was to fix the NPE, it was never a goal to improve the rule.\nFeel free to create a new issue for tracking the false negative with the above sample.", "author": "adangel", "createdAt": "2020-09-21T17:51:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTQ1MzIyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjY4MTgyMA==", "url": "https://github.com/pmd/pmd/pull/2790#discussion_r492681820", "bodyText": "OK in that case I believe this pr is good to merge. I'll open an issue as you said", "author": "oowekyala", "createdAt": "2020-09-22T12:10:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTQ1MzIyOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTc0MzE2Mg==", "url": "https://github.com/pmd/pmd/pull/2790#discussion_r491743162", "body": "This is a random place to ask: is it a good idea to use `var` as a variable name?", "bodyText": "This is a random place to ask: is it a good idea to use var as a variable name?", "bodyHTML": "<p dir=\"auto\">This is a random place to ask: is it a good idea to use <code>var</code> as a variable name?</p>", "author": "KroArtem", "createdAt": "2020-09-20T22:39:38Z", "path": "pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/errorprone/CloseResourceRule.java", "diffHunk": "@@ -189,7 +189,7 @@ private TypeNode getTypeOfVariable(ASTVariableDeclarator var) {\n \n     private TypeNode getDeclaredTypeOfVariable(ASTVariableDeclarator var) {", "originalCommit": "81a72cb43ef77f920732a4db80a7885e129e6a67", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTc0ODIxMA==", "url": "https://github.com/pmd/pmd/pull/2790#discussion_r491748210", "bodyText": "There is no ambiguity with the var keyword for type inference if that's what you mean, and in this context it's semantically descriptive (not like int var1, var2 would be), so to me it's fine", "author": "oowekyala", "createdAt": "2020-09-20T23:32:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTc0MzE2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTgzOTQyMw==", "url": "https://github.com/pmd/pmd/pull/2790#discussion_r491839423", "bodyText": "Yep, this is what I was asking, I see your point of view, thanks \ud83d\udc4c", "author": "KroArtem", "createdAt": "2020-09-21T07:30:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTc0MzE2Mg=="}], "type": "inlineReview"}, {"oid": "87890b852a88f9b9762c514682de6aafa211c04d", "url": "https://github.com/pmd/pmd/commit/87890b852a88f9b9762c514682de6aafa211c04d", "message": "[java] CloseResource: Fix test code", "committedDate": "2020-09-21T17:39:24Z", "type": "commit"}, {"oid": "f046268058e04f121d127b7fa802cba7f009651c", "url": "https://github.com/pmd/pmd/commit/f046268058e04f121d127b7fa802cba7f009651c", "message": "[java] CloseResource: add simple test case for var", "committedDate": "2020-09-21T17:47:42Z", "type": "commit"}]}