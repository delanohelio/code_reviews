{"pr_number": 2382, "pr_title": "[core] Saxon rulechain excludes for path expressions", "pr_author": "adangel", "pr_createdAt": "2020-03-27T12:55:41Z", "pr_url": "https://github.com/pmd/pmd/pull/2382", "timeline": [{"oid": "a0e1e40bcb75762d58bb8da7c7e07d16e9190d6e", "url": "https://github.com/pmd/pmd/commit/a0e1e40bcb75762d58bb8da7c7e07d16e9190d6e", "message": "[core] saxon rulechain: don't use rule chain for other path expressions", "committedDate": "2020-03-27T11:58:38Z", "type": "commit"}, {"oid": "8ffe160f12fcef076265e73eb2a3eea899bf78c9", "url": "https://github.com/pmd/pmd/commit/8ffe160f12fcef076265e73eb2a3eea899bf78c9", "message": "[core] saxon rulechain: consider boolean expr", "committedDate": "2020-03-27T12:35:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM0MjMwOA==", "url": "https://github.com/pmd/pmd/pull/2382#discussion_r399342308", "body": "I'm only mentioning this, because this kind of pattern is common in the parser (maybe it's not relevant here). In the parser when we have an attribute like \"inInterface\", which must be true inside of some context, then it's usually necessary to save the previous state and restore it. Like\r\n```java\r\nboolean prevCtx = insideLazyExpression;\r\ninsideLazyExpression = true;\r\nExpression result = super.visit(e);\r\ninsideLazyExpression = prevCtx;\r\n```\r\n\r\nOtherwise you risk overwriting the \"true\" value if the bit was already set when entering the method.\r\n\r\nNow I don't know if nested lazy expressions are a thing in the saxon expression tree, but this may be a bug that comes up later to bite us\r\n\r\n\r\n", "bodyText": "I'm only mentioning this, because this kind of pattern is common in the parser (maybe it's not relevant here). In the parser when we have an attribute like \"inInterface\", which must be true inside of some context, then it's usually necessary to save the previous state and restore it. Like\nboolean prevCtx = insideLazyExpression;\ninsideLazyExpression = true;\nExpression result = super.visit(e);\ninsideLazyExpression = prevCtx;\nOtherwise you risk overwriting the \"true\" value if the bit was already set when entering the method.\nNow I don't know if nested lazy expressions are a thing in the saxon expression tree, but this may be a bug that comes up later to bite us", "bodyHTML": "<p dir=\"auto\">I'm only mentioning this, because this kind of pattern is common in the parser (maybe it's not relevant here). In the parser when we have an attribute like \"inInterface\", which must be true inside of some context, then it's usually necessary to save the previous state and restore it. Like</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"boolean prevCtx = insideLazyExpression;\ninsideLazyExpression = true;\nExpression result = super.visit(e);\ninsideLazyExpression = prevCtx;\"><pre><span class=\"pl-k\">boolean</span> prevCtx <span class=\"pl-k\">=</span> insideLazyExpression;\ninsideLazyExpression <span class=\"pl-k\">=</span> <span class=\"pl-c1\">true</span>;\n<span class=\"pl-smi\">Expression</span> result <span class=\"pl-k\">=</span> <span class=\"pl-c1\">super</span><span class=\"pl-k\">.</span>visit(e);\ninsideLazyExpression <span class=\"pl-k\">=</span> prevCtx;</pre></div>\n<p dir=\"auto\">Otherwise you risk overwriting the \"true\" value if the bit was already set when entering the method.</p>\n<p dir=\"auto\">Now I don't know if nested lazy expressions are a thing in the saxon expression tree, but this may be a bug that comes up later to bite us</p>", "author": "oowekyala", "createdAt": "2020-03-27T15:20:20Z", "path": "pmd-core/src/main/java/net/sourceforge/pmd/lang/rule/xpath/internal/RuleChainAnalyzer.java", "diffHunk": "@@ -96,6 +105,14 @@ public Expression visit(AxisExpression e) {\n         return super.visit(e);\n     }\n \n+    @Override\n+    public Expression visit(LazyExpression e) {\n+        insideLazyExpression = true;\n+        Expression result = super.visit(e);\n+        insideLazyExpression = false;", "originalCommit": "8ffe160f12fcef076265e73eb2a3eea899bf78c9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM5ODc4NA==", "url": "https://github.com/pmd/pmd/pull/2382#discussion_r399398784", "bodyText": "Good point, I'll fix this", "author": "adangel", "createdAt": "2020-03-27T16:42:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM0MjMwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM0NTIzNw==", "url": "https://github.com/pmd/pmd/pull/2382#discussion_r399345237", "body": "Just fyi, I think it would be nice if this class had a more descriptive name, eg `SaxonExprVisitor` or something. I'll change the name when merging unless you disagree", "bodyText": "Just fyi, I think it would be nice if this class had a more descriptive name, eg SaxonExprVisitor or something. I'll change the name when merging unless you disagree", "bodyHTML": "<p dir=\"auto\">Just fyi, I think it would be nice if this class had a more descriptive name, eg <code>SaxonExprVisitor</code> or something. I'll change the name when merging unless you disagree</p>", "author": "oowekyala", "createdAt": "2020-03-27T15:24:23Z", "path": "pmd-core/src/main/java/net/sourceforge/pmd/lang/rule/xpath/internal/Visitor.java", "diffHunk": "@@ -5,8 +5,10 @@\n package net.sourceforge.pmd.lang.rule.xpath.internal;", "originalCommit": "8ffe160f12fcef076265e73eb2a3eea899bf78c9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM5OTI1Ng==", "url": "https://github.com/pmd/pmd/pull/2382#discussion_r399399256", "bodyText": "Sounds good, I'll rename it.", "author": "adangel", "createdAt": "2020-03-27T16:43:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM0NTIzNw=="}], "type": "inlineReview"}, {"oid": "263c6e0d091cc9e0f292b538e51ebdcf83dbc6c6", "url": "https://github.com/pmd/pmd/commit/263c6e0d091cc9e0f292b538e51ebdcf83dbc6c6", "message": "[core] Apply PR review suggestions, refs #2382", "committedDate": "2020-03-27T16:46:07Z", "type": "commit"}]}