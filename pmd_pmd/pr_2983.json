{"pr_number": 2983, "pr_title": "[java] LiteralsFirstInComparisons should consider constant fields", "pr_author": "ozangulle", "pr_createdAt": "2020-12-21T20:58:27Z", "pr_url": "https://github.com/pmd/pmd/pull/2983", "timeline": [{"oid": "d0fb81de1f9eb616893f1c4b7f0bf63fc0982f1b", "url": "https://github.com/pmd/pmd/commit/d0fb81de1f9eb616893f1c4b7f0bf63fc0982f1b", "message": "LiteralsFirstInComparisonsRule also checks for constants", "committedDate": "2020-12-16T20:49:38Z", "type": "commit"}, {"oid": "ae12a6db3542d6a491b3f750062b70b2a221668e", "url": "https://github.com/pmd/pmd/commit/ae12a6db3542d6a491b3f750062b70b2a221668e", "message": "Put duplicated code in a separate method", "committedDate": "2020-12-16T21:09:11Z", "type": "commit"}, {"oid": "129790ddfc6270c3592a51fae9dc0da0de001bcc", "url": "https://github.com/pmd/pmd/commit/129790ddfc6270c3592a51fae9dc0da0de001bcc", "message": "Fixed the order of imports", "committedDate": "2020-12-16T21:44:33Z", "type": "commit"}, {"oid": "2bbf56ec064b62389d32e8ae8389cdbd47adeea8", "url": "https://github.com/pmd/pmd/commit/2bbf56ec064b62389d32e8ae8389cdbd47adeea8", "message": "Added a new test case", "committedDate": "2020-12-21T20:37:09Z", "type": "commit"}, {"oid": "49fbb90cb133f6933122c885cea1d8d9d711565d", "url": "https://github.com/pmd/pmd/commit/49fbb90cb133f6933122c885cea1d8d9d711565d", "message": "Changed naming of the method", "committedDate": "2020-12-21T20:37:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzM3MTkwMw==", "url": "https://github.com/pmd/pmd/pull/2983#discussion_r553371903", "body": "This can be written as\r\n\r\n```suggestion\r\n                        && java.lang.String.class.equals(declaration.getType())\r\n```", "bodyText": "This can be written as\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    && \"class java.lang.String\".equals(declaration.getType().toString())\n          \n          \n            \n                                    && java.lang.String.class.equals(declaration.getType())", "bodyHTML": "<p dir=\"auto\">This can be written as</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"171\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                        <span class=\"pl-k\">&amp;&amp;</span> <span class=\"pl-s\"><span class=\"pl-pds x x-first\">\"</span><span class=\"x x-last\">class </span>java.lang.String<span class=\"pl-pds x x-first\">\"</span></span><span class=\"pl-k x x-last\">.</span>equals(declaration<span class=\"pl-k\">.</span>getType<span class=\"x x-first\">()</span><span class=\"pl-k x\">.</span><span class=\"x x-last\">toString</span>())</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"171\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                        <span class=\"pl-k\">&amp;&amp;</span> <span class=\"pl-smi\">java.lang<span class=\"pl-k\">.</span>String</span><span class=\"pl-k x x-first\">.</span><span class=\"x\">class</span><span class=\"pl-k x x-last\">.</span>equals(declaration<span class=\"pl-k\">.</span>getType())</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "adangel", "createdAt": "2021-01-07T14:45:51Z", "path": "pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/bestpractices/LiteralsFirstInComparisonsRule.java", "diffHunk": "@@ -147,6 +159,25 @@ private boolean isStringLiteral(JavaNode node) {\n         return false;\n     }\n \n+    private boolean isConstantString(JavaNode node) {\n+        if (node instanceof ASTName) {\n+            ASTName name = (ASTName) node;\n+            ASTClassOrInterfaceBody classBody = name.getFirstParentOfType(ASTClassOrInterfaceBody.class);\n+            ASTClassOrInterfaceBodyDeclaration classOrInterfaceBodyDeclaration = classBody.getFirstChildOfType(ASTClassOrInterfaceBodyDeclaration.class);\n+            List<ASTFieldDeclaration> fieldDeclarations = classOrInterfaceBodyDeclaration.findChildrenOfType(ASTFieldDeclaration.class);\n+            for (ASTFieldDeclaration fieldDeclaration : fieldDeclarations) {\n+                ASTVariableDeclarator declaration = fieldDeclaration.getFirstChildOfType(ASTVariableDeclarator.class);\n+                if (declaration.getName().equals(name.getImage())\n+                        && \"class java.lang.String\".equals(declaration.getType().toString())", "originalCommit": "49fbb90cb133f6933122c885cea1d8d9d711565d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}