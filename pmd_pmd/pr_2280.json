{"pr_number": 2280, "pr_title": "[cs] CPD: Replace C# tokenizer by an Antlr-based one", "pr_author": "maikelsteneker", "pr_createdAt": "2020-02-12T11:08:18Z", "pr_url": "https://github.com/pmd/pmd/pull/2280", "timeline": [{"oid": "659e709f7988a5cda6338d8820bde289a22d5f62", "url": "https://github.com/pmd/pmd/commit/659e709f7988a5cda6338d8820bde289a22d5f62", "message": "Adjusted BaseTokenFilter to allow filtering on more than one token.\n\nWhen filtering tokens, the analyzeToken method can be overriden to access the current token. This can then be used to implement isLanguageSpecificDiscarding. However, it may be desirable to \"look ahead\" and base the decision of whether to filter or not on multiple tokens. In order to support this new use case, a new extension point analyzeTokens is provided, which not only has access to the current token, but can also iterate over the upcoming tokens.\n\nThe functionality of iterating over remaining tokens uses Guava for its implementation. Since pmd-core targets Java 7, the Android flavour of Guava is used. In order to stay consistent with pmd-apex-jorje, this has also been adjusted to the Android flavour. For PMD 7.0, the jre flavour can be used instead.", "committedDate": "2020-02-12T10:12:14Z", "type": "commit"}, {"oid": "bdfbfae231ce437f6c9a6a67e7a313b6295a9632", "url": "https://github.com/pmd/pmd/commit/bdfbfae231ce437f6c9a6a67e7a313b6295a9632", "message": "C# tokenizer is now Antlr-based.\n\nThis is based on the Antlr grammar from https://github.com/antlr/grammars-v4/tree/master/csharp.\n\nThis adds column information for C# and fixes #2139.", "committedDate": "2020-02-12T10:46:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODkzODczMw==", "url": "https://github.com/pmd/pmd/pull/2280#discussion_r378938733", "body": "To avoid the dependency to guava, we can also write\r\n\r\n```suggestion\r\n        Iterator<String> iterator = Collections.unmodifiableList(Arrays.asList(\"a\", \"b\", \"c\")).iterator();\r\n```\r\n", "bodyText": "To avoid the dependency to guava, we can also write\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Iterator<String> iterator = ImmutableList.of(\"a\", \"b\", \"c\").iterator();\n          \n          \n            \n                    Iterator<String> iterator = Collections.unmodifiableList(Arrays.asList(\"a\", \"b\", \"c\")).iterator();", "bodyHTML": "<p dir=\"auto\">To avoid the dependency to guava, we can also write</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">Iterator&lt;<span class=\"pl-smi\">String</span>&gt;</span> iterator <span class=\"pl-k\">=</span> <span class=\"pl-smi x x-first\">ImmutableList</span><span class=\"pl-k x\">.</span><span class=\"x x-last\">of(</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>a<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>b<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>c<span class=\"pl-pds\">\"</span></span>)<span class=\"pl-k\">.</span>iterator();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">Iterator&lt;<span class=\"pl-smi\">String</span>&gt;</span> iterator <span class=\"pl-k\">=</span> <span class=\"pl-smi x x-first\">Collections</span><span class=\"pl-k x\">.</span><span class=\"x\">unmodifiableList(</span><span class=\"pl-smi x\">Arrays</span><span class=\"pl-k x\">.</span><span class=\"x x-last\">asList(</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>a<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>b<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>c<span class=\"pl-pds\">\"</span></span><span class=\"x x-first x-last\">)</span>)<span class=\"pl-k\">.</span>iterator();</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "adangel", "createdAt": "2020-02-13T15:37:25Z", "path": "pmd-core/src/test/java/net/sourceforge/pmd/cpd/token/internal/BaseTokenFilterTest.java", "diffHunk": "@@ -0,0 +1,190 @@\n+/**\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+package net.sourceforge.pmd.cpd.token.internal;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.ConcurrentModificationException;\n+import java.util.Iterator;\n+import java.util.NoSuchElementException;\n+\n+import org.junit.Test;\n+\n+import net.sourceforge.pmd.lang.TokenManager;\n+import net.sourceforge.pmd.lang.ast.GenericToken;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+public class BaseTokenFilterTest {\n+\n+    class StringToken implements GenericToken {\n+\n+        private final String text;\n+\n+        StringToken(final String text) {\n+            this.text = text;\n+        }\n+\n+        @Override\n+        public GenericToken getNext() {\n+            return null;\n+        }\n+\n+        @Override\n+        public GenericToken getPreviousComment() {\n+            return null;\n+        }\n+\n+        @Override\n+        public String getImage() {\n+            return text;\n+        }\n+\n+        @Override\n+        public int getBeginLine() {\n+            return 0;\n+        }\n+\n+        @Override\n+        public int getEndLine() {\n+            return 0;\n+        }\n+\n+        @Override\n+        public int getBeginColumn() {\n+            return 0;\n+        }\n+\n+        @Override\n+        public int getEndColumn() {\n+            return 0;\n+        }\n+    }\n+\n+    class StringTokenManager implements TokenManager {\n+\n+        Iterator<String> iterator = ImmutableList.of(\"a\", \"b\", \"c\").iterator();", "originalCommit": "bdfbfae231ce437f6c9a6a67e7a313b6295a9632", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "4bd5a159e504b7f92e00e779da214c4ca102f0b8", "url": "https://github.com/pmd/pmd/commit/4bd5a159e504b7f92e00e779da214c4ca102f0b8", "message": "Rewrite to avoid Guava dependency.", "committedDate": "2020-02-27T10:36:28Z", "type": "commit"}]}