{"pr_number": 2968, "pr_title": "[java] NPE in UseCollectionIsEmptyRule with enums", "pr_author": "foxmason", "pr_createdAt": "2020-12-12T01:00:35Z", "pr_url": "https://github.com/pmd/pmd/pull/2968", "merge_commit": "175d535e9fe73de8afd40445650dc979a3209b07", "timeline": [{"oid": "cce0a35cb132ac3ab3050caeff8a94e385fb81e8", "url": "https://github.com/pmd/pmd/commit/cce0a35cb132ac3ab3050caeff8a94e385fb81e8", "message": "[java] NPE in UseCollectionIsEmptyRule with enums #2833", "committedDate": "2020-12-12T00:43:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDYyMjc1Mg==", "url": "https://github.com/pmd/pmd/pull/2968#discussion_r554622752", "body": "Is it the only case when `classOrEnumBody` can be null? Unfortunately I don't know.", "bodyText": "Is it the only case when classOrEnumBody can be null? Unfortunately I don't know.", "bodyHTML": "<p dir=\"auto\">Is it the only case when <code>classOrEnumBody</code> can be null? Unfortunately I don't know.</p>", "author": "KroArtem", "createdAt": "2021-01-10T21:05:48Z", "path": "pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/bestpractices/UseCollectionIsEmptyRule.java", "diffHunk": "@@ -112,11 +113,14 @@ private String getVariableNameBySuffix(ASTPrimaryExpression primaryExpression) {\n     }\n \n     private ASTClassOrInterfaceType getTypeOfVariableByName(String varName, ASTPrimaryExpression expr) {\n-        ASTClassOrInterfaceBody classBody = expr.getFirstParentOfType(ASTClassOrInterfaceBody.class);\n-        List<ASTVariableDeclarator> varDeclarators = classBody.findDescendantsOfType(ASTVariableDeclarator.class);\n+        Node classOrEnumBody = expr.getFirstParentOfType(ASTClassOrInterfaceBody.class);\n+        if (classOrEnumBody == null) {", "originalCommit": "cce0a35cb132ac3ab3050caeff8a94e385fb81e8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTgwODc4Mw==", "url": "https://github.com/pmd/pmd/pull/2968#discussion_r555808783", "bodyText": "Technically it could also be in an annotation type, but I think it's ok, as annotations may not contain code (at least, not code that this rule would pick up on).", "author": "oowekyala", "createdAt": "2021-01-12T14:24:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDYyMjc1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTgwOTUwMQ==", "url": "https://github.com/pmd/pmd/pull/2968#discussion_r555809501", "bodyText": "Technically it could also be in an annotation type, but I think it's ok, as annotations may not contain code (at least, not code that this rule would pick up on).\nIt could also be an ASTRecordBody", "author": "oowekyala", "createdAt": "2021-01-12T14:25:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDYyMjc1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTY5MDU1NA==", "url": "https://github.com/pmd/pmd/pull/2968#discussion_r561690554", "bodyText": "I'll add a test case when merging", "author": "adangel", "createdAt": "2021-01-21T08:39:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDYyMjc1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "4be2562f01f90ece6a4ddad69c165b108b29b2b5", "changed_code": [{"header": "diff --git a/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/bestpractices/UseCollectionIsEmptyRule.java b/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/bestpractices/UseCollectionIsEmptyRule.java\nindex b5acfc0195..44ffe0d43e 100644\n--- a/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/bestpractices/UseCollectionIsEmptyRule.java\n+++ b/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/bestpractices/UseCollectionIsEmptyRule.java\n", "chunk": "@@ -112,7 +113,7 @@ public class UseCollectionIsEmptyRule extends AbstractInefficientZeroCheck {\n         return varSuffix.getImage();\n     }\n \n-    private ASTClassOrInterfaceType getTypeOfVariableByName(String varName, ASTPrimaryExpression expr) {\n+    private JavaTypeDefinition getTypeOfVariableByName(String varName, ASTPrimaryExpression expr) {\n         Node classOrEnumBody = expr.getFirstParentOfType(ASTClassOrInterfaceBody.class);\n         if (classOrEnumBody == null) {\n             classOrEnumBody = expr.getFirstParentOfType(ASTEnumBody.class);\n", "next_change": null}]}, "revised_code_in_main": {"commit": "175d535e9fe73de8afd40445650dc979a3209b07", "changed_code": [{"header": "diff --git a/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/bestpractices/UseCollectionIsEmptyRule.java b/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/bestpractices/UseCollectionIsEmptyRule.java\nindex b5acfc0195..44ffe0d43e 100644\n--- a/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/bestpractices/UseCollectionIsEmptyRule.java\n+++ b/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/bestpractices/UseCollectionIsEmptyRule.java\n", "chunk": "@@ -112,7 +113,7 @@ public class UseCollectionIsEmptyRule extends AbstractInefficientZeroCheck {\n         return varSuffix.getImage();\n     }\n \n-    private ASTClassOrInterfaceType getTypeOfVariableByName(String varName, ASTPrimaryExpression expr) {\n+    private JavaTypeDefinition getTypeOfVariableByName(String varName, ASTPrimaryExpression expr) {\n         Node classOrEnumBody = expr.getFirstParentOfType(ASTClassOrInterfaceBody.class);\n         if (classOrEnumBody == null) {\n             classOrEnumBody = expr.getFirstParentOfType(ASTEnumBody.class);\n", "next_change": {"commit": "ecef88aa0aed9157618ef7b457d51b902eba71a6", "changed_code": [{"header": "diff --git a/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/bestpractices/UseCollectionIsEmptyRule.java b/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/bestpractices/UseCollectionIsEmptyRule.java\nindex 44ffe0d43e..ea55ce94c4 100644\n--- a/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/bestpractices/UseCollectionIsEmptyRule.java\n+++ b/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/bestpractices/UseCollectionIsEmptyRule.java\n", "chunk": "@@ -52,83 +45,45 @@ public class UseCollectionIsEmptyRule extends AbstractInefficientZeroCheck {\n      */\n     @Override\n     public boolean isTargetMethod(JavaNameOccurrence occ) {\n-        return occ.getNameForWhichThisIsAQualifier() != null\n-                && occ.getLocation().getImage().endsWith(\".size\");\n+        if (occ.getNameForWhichThisIsAQualifier() != null) {\n+            if (occ.getLocation().getImage().endsWith(\".size\")) {\n+                return true;\n+            }\n+        }\n+        return false;\n     }\n \n     @Override\n     public Map<String, List<String>> getComparisonTargets() {\n-        List<String> zeroAndOne = asList(\"0\", \"1\");\n-        List<String> zero = singletonList(\"0\");\n         Map<String, List<String>> rules = new HashMap<>();\n-        rules.put(\"<\", zeroAndOne);\n-        rules.put(\">\", zero);\n-        rules.put(\"==\", zero);\n-        rules.put(\"!=\", zero);\n-        rules.put(\">=\", zeroAndOne);\n-        rules.put(\"<=\", zero);\n+        rules.put(\"<\", Arrays.asList(\"0\", \"1\"));\n+        rules.put(\">\", Arrays.asList(\"0\"));\n+        rules.put(\"==\", Arrays.asList(\"0\"));\n+        rules.put(\"!=\", Arrays.asList(\"0\"));\n+        rules.put(\">=\", Arrays.asList(\"0\", \"1\"));\n+        rules.put(\"<=\", Arrays.asList(\"0\"));\n         return rules;\n     }\n \n     @Override\n     public Object visit(ASTPrimarySuffix node, Object data) {\n-        if (isSizeMethodCall(node) && isCalledOnCollection(node)) {\n-            Node expr = node.getParent().getParent();\n-            checkNodeAndReport(data, node, expr);\n-        }\n-        return data;\n-    }\n-\n-    private boolean isSizeMethodCall(ASTPrimarySuffix primarySuffix) {\n-        String calledMethodName = primarySuffix.getImage();\n-        return calledMethodName != null && \"size\".equals(calledMethodName);\n-    }\n-\n-    private boolean isCalledOnCollection(ASTPrimarySuffix primarySuffix) {\n-        JavaTypeDefinition calledOnType = getTypeOfVariable(primarySuffix);\n-        if (calledOnType == null) {\n-            calledOnType = getTypeOfMethodCall(primarySuffix);\n-        }\n-        return calledOnType != null\n-                && CollectionUtil.isCollectionType(calledOnType.getType(), true);\n-    }\n+        if (node.getImage() != null && node.getImage().endsWith(\"size\")) {\n \n-    private JavaTypeDefinition getTypeOfVariable(ASTPrimarySuffix primarySuffix) {\n-        ASTPrimaryExpression primaryExpression = primarySuffix.getFirstParentOfType(ASTPrimaryExpression.class);\n-        ASTPrimaryPrefix varPrefix = primaryExpression.getFirstChildOfType(ASTPrimaryPrefix.class);\n-        if (prefixWithNoModifiers(varPrefix)) {\n-            return varPrefix.getTypeDefinition();\n-        }\n-        String varName = getVariableNameBySuffix(primaryExpression);\n-        return varName != null ? getTypeOfVariableByName(varName, primaryExpression) : null;\n-    }\n-\n-    private boolean prefixWithNoModifiers(ASTPrimaryPrefix primaryPrefix) {\n-        return !primaryPrefix.usesSuperModifier() && !primaryPrefix.usesThisModifier();\n-    }\n-\n-    private String getVariableNameBySuffix(ASTPrimaryExpression primaryExpression) {\n-        ASTPrimarySuffix varSuffix = primaryExpression\n-                .getFirstChildOfType(ASTPrimarySuffix.class);\n-        return varSuffix.getImage();\n-    }\n+            ASTClassOrInterfaceType type = getTypeOfPrimaryPrefix(node);\n+            if (type == null) {\n+                type = getTypeOfMethodCall(node);\n+            }\n \n-    private JavaTypeDefinition getTypeOfVariableByName(String varName, ASTPrimaryExpression expr) {\n-        Node classOrEnumBody = expr.getFirstParentOfType(ASTClassOrInterfaceBody.class);\n-        if (classOrEnumBody == null) {\n-            classOrEnumBody = expr.getFirstParentOfType(ASTEnumBody.class);\n-        }                 \n-        List<ASTVariableDeclarator> varDeclarators = classOrEnumBody.findDescendantsOfType(ASTVariableDeclarator.class);\n-        for (ASTVariableDeclarator varDeclarator : varDeclarators) {\n-            if (varDeclarator.getName().equals(varName)) {\n-                return varDeclarator.getVariableId().getTypeNode().getTypeDefinition();\n+            if (type != null && CollectionUtil.isCollectionType(type.getType(), true)) {\n+                Node expr = node.getParent().getParent();\n+                checkNodeAndReport(data, node, expr);\n             }\n         }\n-        return null;\n+        return data;\n     }\n \n-    private JavaTypeDefinition getTypeOfMethodCall(ASTPrimarySuffix node) {\n-        JavaTypeDefinition type = null;\n+    private ASTClassOrInterfaceType getTypeOfMethodCall(ASTPrimarySuffix node) {\n+        ASTClassOrInterfaceType type = null;\n         ASTName methodName = node.getParent().getFirstChildOfType(ASTPrimaryPrefix.class)\n                 .getFirstChildOfType(ASTName.class);\n         if (methodName != null) {\n", "next_change": {"commit": "49d0d2aebc86f4d243c2424e8e85cfc766644557", "changed_code": [{"header": "diff --git a/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/bestpractices/UseCollectionIsEmptyRule.java b/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/bestpractices/UseCollectionIsEmptyRule.java\nindex ea55ce94c4..552d1116a7 100644\n--- a/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/bestpractices/UseCollectionIsEmptyRule.java\n+++ b/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/bestpractices/UseCollectionIsEmptyRule.java\n", "chunk": "@@ -45,41 +50,76 @@ public class UseCollectionIsEmptyRule extends AbstractInefficientZeroCheck {\n      */\n     @Override\n     public boolean isTargetMethod(JavaNameOccurrence occ) {\n-        if (occ.getNameForWhichThisIsAQualifier() != null) {\n-            if (occ.getLocation().getImage().endsWith(\".size\")) {\n-                return true;\n-            }\n-        }\n-        return false;\n+        return occ.getNameForWhichThisIsAQualifier() != null\n+                && occ.getLocation().getImage().endsWith(\".size\");\n     }\n \n     @Override\n     public Map<String, List<String>> getComparisonTargets() {\n+        List<String> zeroAndOne = asList(\"0\", \"1\");\n+        List<String> zero = singletonList(\"0\");\n         Map<String, List<String>> rules = new HashMap<>();\n-        rules.put(\"<\", Arrays.asList(\"0\", \"1\"));\n-        rules.put(\">\", Arrays.asList(\"0\"));\n-        rules.put(\"==\", Arrays.asList(\"0\"));\n-        rules.put(\"!=\", Arrays.asList(\"0\"));\n-        rules.put(\">=\", Arrays.asList(\"0\", \"1\"));\n-        rules.put(\"<=\", Arrays.asList(\"0\"));\n+        rules.put(\"<\", zeroAndOne);\n+        rules.put(\">\", zero);\n+        rules.put(\"==\", zero);\n+        rules.put(\"!=\", zero);\n+        rules.put(\">=\", zeroAndOne);\n+        rules.put(\"<=\", zero);\n         return rules;\n     }\n \n     @Override\n     public Object visit(ASTPrimarySuffix node, Object data) {\n-        if (node.getImage() != null && node.getImage().endsWith(\"size\")) {\n+        if (isSizeMethodCall(node) && isCalledOnCollection(node)) {\n+            Node expr = node.getParent().getParent();\n+            checkNodeAndReport(data, node, expr);\n+        }\n+        return data;\n+    }\n \n-            ASTClassOrInterfaceType type = getTypeOfPrimaryPrefix(node);\n-            if (type == null) {\n-                type = getTypeOfMethodCall(node);\n-            }\n+    private boolean isSizeMethodCall(ASTPrimarySuffix primarySuffix) {\n+        String calledMethodName = primarySuffix.getImage();\n+        return calledMethodName != null && calledMethodName.endsWith(\"size\");\n+    }\n+\n+    private boolean isCalledOnCollection(ASTPrimarySuffix primarySuffix) {\n+        ASTClassOrInterfaceType calledOnType = getTypeOfVariable(primarySuffix);\n+        if (calledOnType == null) {\n+            calledOnType = getTypeOfMethodCall(primarySuffix);\n+        }\n+        return calledOnType != null\n+                && CollectionUtil.isCollectionType(calledOnType.getType(), true);\n+    }\n \n-            if (type != null && CollectionUtil.isCollectionType(type.getType(), true)) {\n-                Node expr = node.getParent().getParent();\n-                checkNodeAndReport(data, node, expr);\n+    private ASTClassOrInterfaceType getTypeOfVariable(ASTPrimarySuffix primarySuffix) {\n+        ASTPrimaryExpression primaryExpression = primarySuffix.getFirstParentOfType(ASTPrimaryExpression.class);\n+        ASTPrimaryPrefix varPrefix = primaryExpression.getFirstChildOfType(ASTPrimaryPrefix.class);\n+        if (prefixWithNoModifiers(varPrefix)) {\n+            return varPrefix.getFirstDescendantOfType(ASTClassOrInterfaceType.class);\n+        }\n+        String varName = getVariableNameBySuffix(primaryExpression);\n+        return varName != null ? getTypeOfVariableByName(varName, primaryExpression) : null;\n+    }\n+\n+    private boolean prefixWithNoModifiers(ASTPrimaryPrefix primaryPrefix) {\n+        return !primaryPrefix.usesSuperModifier() && !primaryPrefix.usesThisModifier();\n+    }\n+\n+    private String getVariableNameBySuffix(ASTPrimaryExpression primaryExpression) {\n+        ASTPrimarySuffix varSuffix = primaryExpression\n+                .getFirstChildOfType(ASTPrimarySuffix.class);\n+        return varSuffix.getImage();\n+    }\n+\n+    private ASTClassOrInterfaceType getTypeOfVariableByName(String varName, ASTPrimaryExpression expr) {\n+        ASTClassOrInterfaceBody classBody = expr.getFirstParentOfType(ASTClassOrInterfaceBody.class);\n+        List<ASTVariableDeclarator> varDeclarators = classBody.findDescendantsOfType(ASTVariableDeclarator.class);\n+        for (ASTVariableDeclarator varDeclarator : varDeclarators) {\n+            if (varDeclarator.getName().equals(varName)) {\n+                return varDeclarator.getFirstDescendantOfType(ASTClassOrInterfaceType.class);\n             }\n         }\n-        return data;\n+        return null;\n     }\n \n     private ASTClassOrInterfaceType getTypeOfMethodCall(ASTPrimarySuffix node) {\n", "next_change": {"commit": "2e3b52a33b5e41991b7e17e4113b7b97def8b126", "changed_code": [{"header": "diff --git a/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/bestpractices/UseCollectionIsEmptyRule.java b/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/bestpractices/UseCollectionIsEmptyRule.java\nindex 552d1116a7..f313f76be2 100644\n--- a/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/bestpractices/UseCollectionIsEmptyRule.java\n+++ b/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/bestpractices/UseCollectionIsEmptyRule.java\n", "chunk": "@@ -34,110 +18,25 @@ import net.sourceforge.pmd.util.CollectionUtil;\n  *\n  * @author Jason Bennett\n  */\n-public class UseCollectionIsEmptyRule extends AbstractInefficientZeroCheck {\n-\n-    @Override\n-    public boolean appliesToClassName(String name) {\n-        return CollectionUtil.isCollectionType(name, true);\n-    }\n-\n-    /**\n-     * Determine if we're dealing with .size method\n-     *\n-     * @param occ\n-     *            The name occurrence\n-     * @return true if it's .size, else false\n-     */\n-    @Override\n-    public boolean isTargetMethod(JavaNameOccurrence occ) {\n-        return occ.getNameForWhichThisIsAQualifier() != null\n-                && occ.getLocation().getImage().endsWith(\".size\");\n-    }\n+public class UseCollectionIsEmptyRule extends AbstractJavaRulechainRule {\n \n-    @Override\n-    public Map<String, List<String>> getComparisonTargets() {\n-        List<String> zeroAndOne = asList(\"0\", \"1\");\n-        List<String> zero = singletonList(\"0\");\n-        Map<String, List<String>> rules = new HashMap<>();\n-        rules.put(\"<\", zeroAndOne);\n-        rules.put(\">\", zero);\n-        rules.put(\"==\", zero);\n-        rules.put(\"!=\", zero);\n-        rules.put(\">=\", zeroAndOne);\n-        rules.put(\"<=\", zero);\n-        return rules;\n+    public UseCollectionIsEmptyRule() {\n+        super(ASTMethodCall.class);\n     }\n \n     @Override\n-    public Object visit(ASTPrimarySuffix node, Object data) {\n-        if (isSizeMethodCall(node) && isCalledOnCollection(node)) {\n-            Node expr = node.getParent().getParent();\n-            checkNodeAndReport(data, node, expr);\n-        }\n-        return data;\n-    }\n-\n-    private boolean isSizeMethodCall(ASTPrimarySuffix primarySuffix) {\n-        String calledMethodName = primarySuffix.getImage();\n-        return calledMethodName != null && calledMethodName.endsWith(\"size\");\n-    }\n-\n-    private boolean isCalledOnCollection(ASTPrimarySuffix primarySuffix) {\n-        ASTClassOrInterfaceType calledOnType = getTypeOfVariable(primarySuffix);\n-        if (calledOnType == null) {\n-            calledOnType = getTypeOfMethodCall(primarySuffix);\n-        }\n-        return calledOnType != null\n-                && CollectionUtil.isCollectionType(calledOnType.getType(), true);\n-    }\n-\n-    private ASTClassOrInterfaceType getTypeOfVariable(ASTPrimarySuffix primarySuffix) {\n-        ASTPrimaryExpression primaryExpression = primarySuffix.getFirstParentOfType(ASTPrimaryExpression.class);\n-        ASTPrimaryPrefix varPrefix = primaryExpression.getFirstChildOfType(ASTPrimaryPrefix.class);\n-        if (prefixWithNoModifiers(varPrefix)) {\n-            return varPrefix.getFirstDescendantOfType(ASTClassOrInterfaceType.class);\n-        }\n-        String varName = getVariableNameBySuffix(primaryExpression);\n-        return varName != null ? getTypeOfVariableByName(varName, primaryExpression) : null;\n-    }\n-\n-    private boolean prefixWithNoModifiers(ASTPrimaryPrefix primaryPrefix) {\n-        return !primaryPrefix.usesSuperModifier() && !primaryPrefix.usesThisModifier();\n-    }\n-\n-    private String getVariableNameBySuffix(ASTPrimaryExpression primaryExpression) {\n-        ASTPrimarySuffix varSuffix = primaryExpression\n-                .getFirstChildOfType(ASTPrimarySuffix.class);\n-        return varSuffix.getImage();\n-    }\n-\n-    private ASTClassOrInterfaceType getTypeOfVariableByName(String varName, ASTPrimaryExpression expr) {\n-        ASTClassOrInterfaceBody classBody = expr.getFirstParentOfType(ASTClassOrInterfaceBody.class);\n-        List<ASTVariableDeclarator> varDeclarators = classBody.findDescendantsOfType(ASTVariableDeclarator.class);\n-        for (ASTVariableDeclarator varDeclarator : varDeclarators) {\n-            if (varDeclarator.getName().equals(varName)) {\n-                return varDeclarator.getFirstDescendantOfType(ASTClassOrInterfaceType.class);\n-            }\n+    public Object visit(ASTMethodCall call, Object data) {\n+        if ((TypeTestUtil.isA(Collection.class, call.getQualifier())\n+            || TypeTestUtil.isA(Map.class, call.getQualifier()))\n+            && isSizeZeroCheck(call)) {\n+            addViolation(data, call);\n         }\n         return null;\n     }\n \n-    private ASTClassOrInterfaceType getTypeOfMethodCall(ASTPrimarySuffix node) {\n-        ASTClassOrInterfaceType type = null;\n-        ASTName methodName = node.getParent().getFirstChildOfType(ASTPrimaryPrefix.class)\n-                .getFirstChildOfType(ASTName.class);\n-        if (methodName != null) {\n-            ClassScope classScope = node.getScope().getEnclosingScope(ClassScope.class);\n-            Map<MethodNameDeclaration, List<NameOccurrence>> methods = classScope.getMethodDeclarations();\n-            for (Map.Entry<MethodNameDeclaration, List<NameOccurrence>> e : methods.entrySet()) {\n-                if (e.getKey().getName().equals(methodName.getImage())) {\n-                    type = e.getKey().getNode().getFirstParentOfType(ASTMethodDeclaration.class)\n-                            .getFirstChildOfType(ASTResultType.class)\n-                            .getFirstDescendantOfType(ASTClassOrInterfaceType.class);\n-                    break;\n-                }\n-            }\n-        }\n-        return type;\n+    private static boolean isSizeZeroCheck(ASTMethodCall call) {\n+        return call.getMethodName().equals(\"size\")\n+            && call.getArguments().size() == 0\n+            && JavaRuleUtil.isZeroChecked(call);\n     }\n }\n", "next_change": {"commit": "d905c5f0aae3618c069499dce379cc643d597dae", "changed_code": [{"header": "diff --git a/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/bestpractices/UseCollectionIsEmptyRule.java b/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/bestpractices/UseCollectionIsEmptyRule.java\nindex f313f76be2..9a3bc18c97 100644\n--- a/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/bestpractices/UseCollectionIsEmptyRule.java\n+++ b/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/bestpractices/UseCollectionIsEmptyRule.java\n", "chunk": "@@ -35,7 +35,7 @@ public class UseCollectionIsEmptyRule extends AbstractJavaRulechainRule {\n     }\n \n     private static boolean isSizeZeroCheck(ASTMethodCall call) {\n-        return call.getMethodName().equals(\"size\")\n+        return \"size\".equals(call.getMethodName())\n             && call.getArguments().size() == 0\n             && JavaRuleUtil.isZeroChecked(call);\n     }\n", "next_change": null}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "175d535e9fe73de8afd40445650dc979a3209b07", "message": "Merge commit", "committedDate": null}, {"oid": "ecef88aa0aed9157618ef7b457d51b902eba71a6", "committedDate": "2020-01-17 12:10:51 +0100", "message": "Merge branch 'master' into 7.0.x"}, {"oid": "49d0d2aebc86f4d243c2424e8e85cfc766644557", "committedDate": "2020-07-23 15:55:13 +0200", "message": "Merge branch 'master' into 7.0.x"}, {"oid": "942493051eb3deb429b7c4a755807b5a366f2bdf", "committedDate": "2020-07-28 12:31:59 +0200", "message": "Remove some utils"}, {"oid": "226cb0f74afc46f4366797f76c2961843bd29022", "committedDate": "2020-08-23 19:17:05 +0200", "message": "Update TypeTestUtil WIP"}, {"oid": "2e3b52a33b5e41991b7e17e4113b7b97def8b126", "committedDate": "2020-10-30 09:33:56 +0100", "message": "Update UseCollectionsIsEmpty"}, {"oid": "d905c5f0aae3618c069499dce379cc643d597dae", "committedDate": "2020-11-02 02:44:06 +0100", "message": "PMD warnings"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDYyMjg5OQ==", "url": "https://github.com/pmd/pmd/pull/2968#discussion_r554622899", "body": "What's the reason to go one level up in the hierarchy?", "bodyText": "What's the reason to go one level up in the hierarchy?", "bodyHTML": "<p dir=\"auto\">What's the reason to go one level up in the hierarchy?</p>", "author": "KroArtem", "createdAt": "2021-01-10T21:06:43Z", "path": "pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/bestpractices/UseCollectionIsEmptyRule.java", "diffHunk": "@@ -112,11 +113,14 @@ private String getVariableNameBySuffix(ASTPrimaryExpression primaryExpression) {\n     }\n \n     private ASTClassOrInterfaceType getTypeOfVariableByName(String varName, ASTPrimaryExpression expr) {\n-        ASTClassOrInterfaceBody classBody = expr.getFirstParentOfType(ASTClassOrInterfaceBody.class);\n-        List<ASTVariableDeclarator> varDeclarators = classBody.findDescendantsOfType(ASTVariableDeclarator.class);\n+        Node classOrEnumBody = expr.getFirstParentOfType(ASTClassOrInterfaceBody.class);\n+        if (classOrEnumBody == null) {\n+            classOrEnumBody = expr.getFirstParentOfType(ASTEnumBody.class);\n+        }                 \n+        List<ASTVariableDeclarator> varDeclarators = classOrEnumBody.findDescendantsOfType(ASTVariableDeclarator.class);\n         for (ASTVariableDeclarator varDeclarator : varDeclarators) {\n             if (varDeclarator.getName().equals(varName)) {\n-                return varDeclarator.getFirstDescendantOfType(ASTClassOrInterfaceType.class);\n+                return varDeclarator.getParent().getFirstDescendantOfType(ASTClassOrInterfaceType.class);", "originalCommit": "cce0a35cb132ac3ab3050caeff8a94e385fb81e8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTgwODgxMQ==", "url": "https://github.com/pmd/pmd/pull/2968#discussion_r555808811", "bodyText": "This fetches a LocalVariableDeclaration or FieldDeclaration node. VariableDeclarator nodes never have themselves a type node child.\nBut the actual right way to do that is varDeclarator.getVariableId().getTypeNode().", "author": "oowekyala", "createdAt": "2021-01-12T14:24:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDYyMjg5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTgwOTcyOQ==", "url": "https://github.com/pmd/pmd/pull/2968#discussion_r555809729", "bodyText": "This fetches a LocalVariableDeclaration or FieldDeclaration node. VariableDeclarator nodes never have themselves a type node child.\nBut the actual right way to do that is varDeclarator.getVariableId().getTypeNode().", "author": "oowekyala", "createdAt": "2021-01-12T14:26:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDYyMjg5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTY5MDY1OA==", "url": "https://github.com/pmd/pmd/pull/2968#discussion_r561690658", "bodyText": "I'll fix that when merging", "author": "adangel", "createdAt": "2021-01-21T08:39:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDYyMjg5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "4be2562f01f90ece6a4ddad69c165b108b29b2b5", "changed_code": [{"header": "diff --git a/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/bestpractices/UseCollectionIsEmptyRule.java b/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/bestpractices/UseCollectionIsEmptyRule.java\nindex b5acfc0195..44ffe0d43e 100644\n--- a/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/bestpractices/UseCollectionIsEmptyRule.java\n+++ b/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/bestpractices/UseCollectionIsEmptyRule.java\n", "chunk": "@@ -112,7 +113,7 @@ public class UseCollectionIsEmptyRule extends AbstractInefficientZeroCheck {\n         return varSuffix.getImage();\n     }\n \n-    private ASTClassOrInterfaceType getTypeOfVariableByName(String varName, ASTPrimaryExpression expr) {\n+    private JavaTypeDefinition getTypeOfVariableByName(String varName, ASTPrimaryExpression expr) {\n         Node classOrEnumBody = expr.getFirstParentOfType(ASTClassOrInterfaceBody.class);\n         if (classOrEnumBody == null) {\n             classOrEnumBody = expr.getFirstParentOfType(ASTEnumBody.class);\n", "next_change": null}, {"header": "diff --git a/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/bestpractices/UseCollectionIsEmptyRule.java b/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/bestpractices/UseCollectionIsEmptyRule.java\nindex b5acfc0195..44ffe0d43e 100644\n--- a/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/bestpractices/UseCollectionIsEmptyRule.java\n+++ b/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/bestpractices/UseCollectionIsEmptyRule.java\n", "chunk": "@@ -120,14 +121,14 @@ public class UseCollectionIsEmptyRule extends AbstractInefficientZeroCheck {\n         List<ASTVariableDeclarator> varDeclarators = classOrEnumBody.findDescendantsOfType(ASTVariableDeclarator.class);\n         for (ASTVariableDeclarator varDeclarator : varDeclarators) {\n             if (varDeclarator.getName().equals(varName)) {\n-                return varDeclarator.getParent().getFirstDescendantOfType(ASTClassOrInterfaceType.class);\n+                return varDeclarator.getVariableId().getTypeNode().getTypeDefinition();\n             }\n         }\n         return null;\n     }\n \n-    private ASTClassOrInterfaceType getTypeOfMethodCall(ASTPrimarySuffix node) {\n-        ASTClassOrInterfaceType type = null;\n+    private JavaTypeDefinition getTypeOfMethodCall(ASTPrimarySuffix node) {\n+        JavaTypeDefinition type = null;\n         ASTName methodName = node.getParent().getFirstChildOfType(ASTPrimaryPrefix.class)\n                 .getFirstChildOfType(ASTName.class);\n         if (methodName != null) {\n", "next_change": null}]}, "revised_code_in_main": {"commit": "175d535e9fe73de8afd40445650dc979a3209b07", "changed_code": [{"header": "diff --git a/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/bestpractices/UseCollectionIsEmptyRule.java b/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/bestpractices/UseCollectionIsEmptyRule.java\nindex b5acfc0195..44ffe0d43e 100644\n--- a/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/bestpractices/UseCollectionIsEmptyRule.java\n+++ b/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/bestpractices/UseCollectionIsEmptyRule.java\n", "chunk": "@@ -112,7 +113,7 @@ public class UseCollectionIsEmptyRule extends AbstractInefficientZeroCheck {\n         return varSuffix.getImage();\n     }\n \n-    private ASTClassOrInterfaceType getTypeOfVariableByName(String varName, ASTPrimaryExpression expr) {\n+    private JavaTypeDefinition getTypeOfVariableByName(String varName, ASTPrimaryExpression expr) {\n         Node classOrEnumBody = expr.getFirstParentOfType(ASTClassOrInterfaceBody.class);\n         if (classOrEnumBody == null) {\n             classOrEnumBody = expr.getFirstParentOfType(ASTEnumBody.class);\n", "next_change": {"commit": "ecef88aa0aed9157618ef7b457d51b902eba71a6", "changed_code": [{"header": "diff --git a/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/bestpractices/UseCollectionIsEmptyRule.java b/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/bestpractices/UseCollectionIsEmptyRule.java\nindex 44ffe0d43e..ea55ce94c4 100644\n--- a/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/bestpractices/UseCollectionIsEmptyRule.java\n+++ b/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/bestpractices/UseCollectionIsEmptyRule.java\n", "chunk": "@@ -52,83 +45,45 @@ public class UseCollectionIsEmptyRule extends AbstractInefficientZeroCheck {\n      */\n     @Override\n     public boolean isTargetMethod(JavaNameOccurrence occ) {\n-        return occ.getNameForWhichThisIsAQualifier() != null\n-                && occ.getLocation().getImage().endsWith(\".size\");\n+        if (occ.getNameForWhichThisIsAQualifier() != null) {\n+            if (occ.getLocation().getImage().endsWith(\".size\")) {\n+                return true;\n+            }\n+        }\n+        return false;\n     }\n \n     @Override\n     public Map<String, List<String>> getComparisonTargets() {\n-        List<String> zeroAndOne = asList(\"0\", \"1\");\n-        List<String> zero = singletonList(\"0\");\n         Map<String, List<String>> rules = new HashMap<>();\n-        rules.put(\"<\", zeroAndOne);\n-        rules.put(\">\", zero);\n-        rules.put(\"==\", zero);\n-        rules.put(\"!=\", zero);\n-        rules.put(\">=\", zeroAndOne);\n-        rules.put(\"<=\", zero);\n+        rules.put(\"<\", Arrays.asList(\"0\", \"1\"));\n+        rules.put(\">\", Arrays.asList(\"0\"));\n+        rules.put(\"==\", Arrays.asList(\"0\"));\n+        rules.put(\"!=\", Arrays.asList(\"0\"));\n+        rules.put(\">=\", Arrays.asList(\"0\", \"1\"));\n+        rules.put(\"<=\", Arrays.asList(\"0\"));\n         return rules;\n     }\n \n     @Override\n     public Object visit(ASTPrimarySuffix node, Object data) {\n-        if (isSizeMethodCall(node) && isCalledOnCollection(node)) {\n-            Node expr = node.getParent().getParent();\n-            checkNodeAndReport(data, node, expr);\n-        }\n-        return data;\n-    }\n-\n-    private boolean isSizeMethodCall(ASTPrimarySuffix primarySuffix) {\n-        String calledMethodName = primarySuffix.getImage();\n-        return calledMethodName != null && \"size\".equals(calledMethodName);\n-    }\n-\n-    private boolean isCalledOnCollection(ASTPrimarySuffix primarySuffix) {\n-        JavaTypeDefinition calledOnType = getTypeOfVariable(primarySuffix);\n-        if (calledOnType == null) {\n-            calledOnType = getTypeOfMethodCall(primarySuffix);\n-        }\n-        return calledOnType != null\n-                && CollectionUtil.isCollectionType(calledOnType.getType(), true);\n-    }\n+        if (node.getImage() != null && node.getImage().endsWith(\"size\")) {\n \n-    private JavaTypeDefinition getTypeOfVariable(ASTPrimarySuffix primarySuffix) {\n-        ASTPrimaryExpression primaryExpression = primarySuffix.getFirstParentOfType(ASTPrimaryExpression.class);\n-        ASTPrimaryPrefix varPrefix = primaryExpression.getFirstChildOfType(ASTPrimaryPrefix.class);\n-        if (prefixWithNoModifiers(varPrefix)) {\n-            return varPrefix.getTypeDefinition();\n-        }\n-        String varName = getVariableNameBySuffix(primaryExpression);\n-        return varName != null ? getTypeOfVariableByName(varName, primaryExpression) : null;\n-    }\n-\n-    private boolean prefixWithNoModifiers(ASTPrimaryPrefix primaryPrefix) {\n-        return !primaryPrefix.usesSuperModifier() && !primaryPrefix.usesThisModifier();\n-    }\n-\n-    private String getVariableNameBySuffix(ASTPrimaryExpression primaryExpression) {\n-        ASTPrimarySuffix varSuffix = primaryExpression\n-                .getFirstChildOfType(ASTPrimarySuffix.class);\n-        return varSuffix.getImage();\n-    }\n+            ASTClassOrInterfaceType type = getTypeOfPrimaryPrefix(node);\n+            if (type == null) {\n+                type = getTypeOfMethodCall(node);\n+            }\n \n-    private JavaTypeDefinition getTypeOfVariableByName(String varName, ASTPrimaryExpression expr) {\n-        Node classOrEnumBody = expr.getFirstParentOfType(ASTClassOrInterfaceBody.class);\n-        if (classOrEnumBody == null) {\n-            classOrEnumBody = expr.getFirstParentOfType(ASTEnumBody.class);\n-        }                 \n-        List<ASTVariableDeclarator> varDeclarators = classOrEnumBody.findDescendantsOfType(ASTVariableDeclarator.class);\n-        for (ASTVariableDeclarator varDeclarator : varDeclarators) {\n-            if (varDeclarator.getName().equals(varName)) {\n-                return varDeclarator.getVariableId().getTypeNode().getTypeDefinition();\n+            if (type != null && CollectionUtil.isCollectionType(type.getType(), true)) {\n+                Node expr = node.getParent().getParent();\n+                checkNodeAndReport(data, node, expr);\n             }\n         }\n-        return null;\n+        return data;\n     }\n \n-    private JavaTypeDefinition getTypeOfMethodCall(ASTPrimarySuffix node) {\n-        JavaTypeDefinition type = null;\n+    private ASTClassOrInterfaceType getTypeOfMethodCall(ASTPrimarySuffix node) {\n+        ASTClassOrInterfaceType type = null;\n         ASTName methodName = node.getParent().getFirstChildOfType(ASTPrimaryPrefix.class)\n                 .getFirstChildOfType(ASTName.class);\n         if (methodName != null) {\n", "next_change": {"commit": "49d0d2aebc86f4d243c2424e8e85cfc766644557", "changed_code": [{"header": "diff --git a/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/bestpractices/UseCollectionIsEmptyRule.java b/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/bestpractices/UseCollectionIsEmptyRule.java\nindex ea55ce94c4..552d1116a7 100644\n--- a/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/bestpractices/UseCollectionIsEmptyRule.java\n+++ b/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/bestpractices/UseCollectionIsEmptyRule.java\n", "chunk": "@@ -45,41 +50,76 @@ public class UseCollectionIsEmptyRule extends AbstractInefficientZeroCheck {\n      */\n     @Override\n     public boolean isTargetMethod(JavaNameOccurrence occ) {\n-        if (occ.getNameForWhichThisIsAQualifier() != null) {\n-            if (occ.getLocation().getImage().endsWith(\".size\")) {\n-                return true;\n-            }\n-        }\n-        return false;\n+        return occ.getNameForWhichThisIsAQualifier() != null\n+                && occ.getLocation().getImage().endsWith(\".size\");\n     }\n \n     @Override\n     public Map<String, List<String>> getComparisonTargets() {\n+        List<String> zeroAndOne = asList(\"0\", \"1\");\n+        List<String> zero = singletonList(\"0\");\n         Map<String, List<String>> rules = new HashMap<>();\n-        rules.put(\"<\", Arrays.asList(\"0\", \"1\"));\n-        rules.put(\">\", Arrays.asList(\"0\"));\n-        rules.put(\"==\", Arrays.asList(\"0\"));\n-        rules.put(\"!=\", Arrays.asList(\"0\"));\n-        rules.put(\">=\", Arrays.asList(\"0\", \"1\"));\n-        rules.put(\"<=\", Arrays.asList(\"0\"));\n+        rules.put(\"<\", zeroAndOne);\n+        rules.put(\">\", zero);\n+        rules.put(\"==\", zero);\n+        rules.put(\"!=\", zero);\n+        rules.put(\">=\", zeroAndOne);\n+        rules.put(\"<=\", zero);\n         return rules;\n     }\n \n     @Override\n     public Object visit(ASTPrimarySuffix node, Object data) {\n-        if (node.getImage() != null && node.getImage().endsWith(\"size\")) {\n+        if (isSizeMethodCall(node) && isCalledOnCollection(node)) {\n+            Node expr = node.getParent().getParent();\n+            checkNodeAndReport(data, node, expr);\n+        }\n+        return data;\n+    }\n \n-            ASTClassOrInterfaceType type = getTypeOfPrimaryPrefix(node);\n-            if (type == null) {\n-                type = getTypeOfMethodCall(node);\n-            }\n+    private boolean isSizeMethodCall(ASTPrimarySuffix primarySuffix) {\n+        String calledMethodName = primarySuffix.getImage();\n+        return calledMethodName != null && calledMethodName.endsWith(\"size\");\n+    }\n+\n+    private boolean isCalledOnCollection(ASTPrimarySuffix primarySuffix) {\n+        ASTClassOrInterfaceType calledOnType = getTypeOfVariable(primarySuffix);\n+        if (calledOnType == null) {\n+            calledOnType = getTypeOfMethodCall(primarySuffix);\n+        }\n+        return calledOnType != null\n+                && CollectionUtil.isCollectionType(calledOnType.getType(), true);\n+    }\n \n-            if (type != null && CollectionUtil.isCollectionType(type.getType(), true)) {\n-                Node expr = node.getParent().getParent();\n-                checkNodeAndReport(data, node, expr);\n+    private ASTClassOrInterfaceType getTypeOfVariable(ASTPrimarySuffix primarySuffix) {\n+        ASTPrimaryExpression primaryExpression = primarySuffix.getFirstParentOfType(ASTPrimaryExpression.class);\n+        ASTPrimaryPrefix varPrefix = primaryExpression.getFirstChildOfType(ASTPrimaryPrefix.class);\n+        if (prefixWithNoModifiers(varPrefix)) {\n+            return varPrefix.getFirstDescendantOfType(ASTClassOrInterfaceType.class);\n+        }\n+        String varName = getVariableNameBySuffix(primaryExpression);\n+        return varName != null ? getTypeOfVariableByName(varName, primaryExpression) : null;\n+    }\n+\n+    private boolean prefixWithNoModifiers(ASTPrimaryPrefix primaryPrefix) {\n+        return !primaryPrefix.usesSuperModifier() && !primaryPrefix.usesThisModifier();\n+    }\n+\n+    private String getVariableNameBySuffix(ASTPrimaryExpression primaryExpression) {\n+        ASTPrimarySuffix varSuffix = primaryExpression\n+                .getFirstChildOfType(ASTPrimarySuffix.class);\n+        return varSuffix.getImage();\n+    }\n+\n+    private ASTClassOrInterfaceType getTypeOfVariableByName(String varName, ASTPrimaryExpression expr) {\n+        ASTClassOrInterfaceBody classBody = expr.getFirstParentOfType(ASTClassOrInterfaceBody.class);\n+        List<ASTVariableDeclarator> varDeclarators = classBody.findDescendantsOfType(ASTVariableDeclarator.class);\n+        for (ASTVariableDeclarator varDeclarator : varDeclarators) {\n+            if (varDeclarator.getName().equals(varName)) {\n+                return varDeclarator.getFirstDescendantOfType(ASTClassOrInterfaceType.class);\n             }\n         }\n-        return data;\n+        return null;\n     }\n \n     private ASTClassOrInterfaceType getTypeOfMethodCall(ASTPrimarySuffix node) {\n", "next_change": {"commit": "2e3b52a33b5e41991b7e17e4113b7b97def8b126", "changed_code": [{"header": "diff --git a/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/bestpractices/UseCollectionIsEmptyRule.java b/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/bestpractices/UseCollectionIsEmptyRule.java\nindex 552d1116a7..f313f76be2 100644\n--- a/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/bestpractices/UseCollectionIsEmptyRule.java\n+++ b/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/bestpractices/UseCollectionIsEmptyRule.java\n", "chunk": "@@ -34,110 +18,25 @@ import net.sourceforge.pmd.util.CollectionUtil;\n  *\n  * @author Jason Bennett\n  */\n-public class UseCollectionIsEmptyRule extends AbstractInefficientZeroCheck {\n-\n-    @Override\n-    public boolean appliesToClassName(String name) {\n-        return CollectionUtil.isCollectionType(name, true);\n-    }\n-\n-    /**\n-     * Determine if we're dealing with .size method\n-     *\n-     * @param occ\n-     *            The name occurrence\n-     * @return true if it's .size, else false\n-     */\n-    @Override\n-    public boolean isTargetMethod(JavaNameOccurrence occ) {\n-        return occ.getNameForWhichThisIsAQualifier() != null\n-                && occ.getLocation().getImage().endsWith(\".size\");\n-    }\n+public class UseCollectionIsEmptyRule extends AbstractJavaRulechainRule {\n \n-    @Override\n-    public Map<String, List<String>> getComparisonTargets() {\n-        List<String> zeroAndOne = asList(\"0\", \"1\");\n-        List<String> zero = singletonList(\"0\");\n-        Map<String, List<String>> rules = new HashMap<>();\n-        rules.put(\"<\", zeroAndOne);\n-        rules.put(\">\", zero);\n-        rules.put(\"==\", zero);\n-        rules.put(\"!=\", zero);\n-        rules.put(\">=\", zeroAndOne);\n-        rules.put(\"<=\", zero);\n-        return rules;\n+    public UseCollectionIsEmptyRule() {\n+        super(ASTMethodCall.class);\n     }\n \n     @Override\n-    public Object visit(ASTPrimarySuffix node, Object data) {\n-        if (isSizeMethodCall(node) && isCalledOnCollection(node)) {\n-            Node expr = node.getParent().getParent();\n-            checkNodeAndReport(data, node, expr);\n-        }\n-        return data;\n-    }\n-\n-    private boolean isSizeMethodCall(ASTPrimarySuffix primarySuffix) {\n-        String calledMethodName = primarySuffix.getImage();\n-        return calledMethodName != null && calledMethodName.endsWith(\"size\");\n-    }\n-\n-    private boolean isCalledOnCollection(ASTPrimarySuffix primarySuffix) {\n-        ASTClassOrInterfaceType calledOnType = getTypeOfVariable(primarySuffix);\n-        if (calledOnType == null) {\n-            calledOnType = getTypeOfMethodCall(primarySuffix);\n-        }\n-        return calledOnType != null\n-                && CollectionUtil.isCollectionType(calledOnType.getType(), true);\n-    }\n-\n-    private ASTClassOrInterfaceType getTypeOfVariable(ASTPrimarySuffix primarySuffix) {\n-        ASTPrimaryExpression primaryExpression = primarySuffix.getFirstParentOfType(ASTPrimaryExpression.class);\n-        ASTPrimaryPrefix varPrefix = primaryExpression.getFirstChildOfType(ASTPrimaryPrefix.class);\n-        if (prefixWithNoModifiers(varPrefix)) {\n-            return varPrefix.getFirstDescendantOfType(ASTClassOrInterfaceType.class);\n-        }\n-        String varName = getVariableNameBySuffix(primaryExpression);\n-        return varName != null ? getTypeOfVariableByName(varName, primaryExpression) : null;\n-    }\n-\n-    private boolean prefixWithNoModifiers(ASTPrimaryPrefix primaryPrefix) {\n-        return !primaryPrefix.usesSuperModifier() && !primaryPrefix.usesThisModifier();\n-    }\n-\n-    private String getVariableNameBySuffix(ASTPrimaryExpression primaryExpression) {\n-        ASTPrimarySuffix varSuffix = primaryExpression\n-                .getFirstChildOfType(ASTPrimarySuffix.class);\n-        return varSuffix.getImage();\n-    }\n-\n-    private ASTClassOrInterfaceType getTypeOfVariableByName(String varName, ASTPrimaryExpression expr) {\n-        ASTClassOrInterfaceBody classBody = expr.getFirstParentOfType(ASTClassOrInterfaceBody.class);\n-        List<ASTVariableDeclarator> varDeclarators = classBody.findDescendantsOfType(ASTVariableDeclarator.class);\n-        for (ASTVariableDeclarator varDeclarator : varDeclarators) {\n-            if (varDeclarator.getName().equals(varName)) {\n-                return varDeclarator.getFirstDescendantOfType(ASTClassOrInterfaceType.class);\n-            }\n+    public Object visit(ASTMethodCall call, Object data) {\n+        if ((TypeTestUtil.isA(Collection.class, call.getQualifier())\n+            || TypeTestUtil.isA(Map.class, call.getQualifier()))\n+            && isSizeZeroCheck(call)) {\n+            addViolation(data, call);\n         }\n         return null;\n     }\n \n-    private ASTClassOrInterfaceType getTypeOfMethodCall(ASTPrimarySuffix node) {\n-        ASTClassOrInterfaceType type = null;\n-        ASTName methodName = node.getParent().getFirstChildOfType(ASTPrimaryPrefix.class)\n-                .getFirstChildOfType(ASTName.class);\n-        if (methodName != null) {\n-            ClassScope classScope = node.getScope().getEnclosingScope(ClassScope.class);\n-            Map<MethodNameDeclaration, List<NameOccurrence>> methods = classScope.getMethodDeclarations();\n-            for (Map.Entry<MethodNameDeclaration, List<NameOccurrence>> e : methods.entrySet()) {\n-                if (e.getKey().getName().equals(methodName.getImage())) {\n-                    type = e.getKey().getNode().getFirstParentOfType(ASTMethodDeclaration.class)\n-                            .getFirstChildOfType(ASTResultType.class)\n-                            .getFirstDescendantOfType(ASTClassOrInterfaceType.class);\n-                    break;\n-                }\n-            }\n-        }\n-        return type;\n+    private static boolean isSizeZeroCheck(ASTMethodCall call) {\n+        return call.getMethodName().equals(\"size\")\n+            && call.getArguments().size() == 0\n+            && JavaRuleUtil.isZeroChecked(call);\n     }\n }\n", "next_change": {"commit": "d905c5f0aae3618c069499dce379cc643d597dae", "changed_code": [{"header": "diff --git a/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/bestpractices/UseCollectionIsEmptyRule.java b/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/bestpractices/UseCollectionIsEmptyRule.java\nindex f313f76be2..9a3bc18c97 100644\n--- a/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/bestpractices/UseCollectionIsEmptyRule.java\n+++ b/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/bestpractices/UseCollectionIsEmptyRule.java\n", "chunk": "@@ -35,7 +35,7 @@ public class UseCollectionIsEmptyRule extends AbstractJavaRulechainRule {\n     }\n \n     private static boolean isSizeZeroCheck(ASTMethodCall call) {\n-        return call.getMethodName().equals(\"size\")\n+        return \"size\".equals(call.getMethodName())\n             && call.getArguments().size() == 0\n             && JavaRuleUtil.isZeroChecked(call);\n     }\n", "next_change": null}]}}]}}]}}]}}, {"header": "diff --git a/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/bestpractices/UseCollectionIsEmptyRule.java b/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/bestpractices/UseCollectionIsEmptyRule.java\nindex b5acfc0195..44ffe0d43e 100644\n--- a/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/bestpractices/UseCollectionIsEmptyRule.java\n+++ b/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/bestpractices/UseCollectionIsEmptyRule.java\n", "chunk": "@@ -120,14 +121,14 @@ public class UseCollectionIsEmptyRule extends AbstractInefficientZeroCheck {\n         List<ASTVariableDeclarator> varDeclarators = classOrEnumBody.findDescendantsOfType(ASTVariableDeclarator.class);\n         for (ASTVariableDeclarator varDeclarator : varDeclarators) {\n             if (varDeclarator.getName().equals(varName)) {\n-                return varDeclarator.getParent().getFirstDescendantOfType(ASTClassOrInterfaceType.class);\n+                return varDeclarator.getVariableId().getTypeNode().getTypeDefinition();\n             }\n         }\n         return null;\n     }\n \n-    private ASTClassOrInterfaceType getTypeOfMethodCall(ASTPrimarySuffix node) {\n-        ASTClassOrInterfaceType type = null;\n+    private JavaTypeDefinition getTypeOfMethodCall(ASTPrimarySuffix node) {\n+        JavaTypeDefinition type = null;\n         ASTName methodName = node.getParent().getFirstChildOfType(ASTPrimaryPrefix.class)\n                 .getFirstChildOfType(ASTName.class);\n         if (methodName != null) {\n", "next_change": {"commit": "ecef88aa0aed9157618ef7b457d51b902eba71a6", "changed_code": [{"header": "diff --git a/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/bestpractices/UseCollectionIsEmptyRule.java b/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/bestpractices/UseCollectionIsEmptyRule.java\nindex 44ffe0d43e..ea55ce94c4 100644\n--- a/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/bestpractices/UseCollectionIsEmptyRule.java\n+++ b/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/bestpractices/UseCollectionIsEmptyRule.java\n", "chunk": "@@ -52,83 +45,45 @@ public class UseCollectionIsEmptyRule extends AbstractInefficientZeroCheck {\n      */\n     @Override\n     public boolean isTargetMethod(JavaNameOccurrence occ) {\n-        return occ.getNameForWhichThisIsAQualifier() != null\n-                && occ.getLocation().getImage().endsWith(\".size\");\n+        if (occ.getNameForWhichThisIsAQualifier() != null) {\n+            if (occ.getLocation().getImage().endsWith(\".size\")) {\n+                return true;\n+            }\n+        }\n+        return false;\n     }\n \n     @Override\n     public Map<String, List<String>> getComparisonTargets() {\n-        List<String> zeroAndOne = asList(\"0\", \"1\");\n-        List<String> zero = singletonList(\"0\");\n         Map<String, List<String>> rules = new HashMap<>();\n-        rules.put(\"<\", zeroAndOne);\n-        rules.put(\">\", zero);\n-        rules.put(\"==\", zero);\n-        rules.put(\"!=\", zero);\n-        rules.put(\">=\", zeroAndOne);\n-        rules.put(\"<=\", zero);\n+        rules.put(\"<\", Arrays.asList(\"0\", \"1\"));\n+        rules.put(\">\", Arrays.asList(\"0\"));\n+        rules.put(\"==\", Arrays.asList(\"0\"));\n+        rules.put(\"!=\", Arrays.asList(\"0\"));\n+        rules.put(\">=\", Arrays.asList(\"0\", \"1\"));\n+        rules.put(\"<=\", Arrays.asList(\"0\"));\n         return rules;\n     }\n \n     @Override\n     public Object visit(ASTPrimarySuffix node, Object data) {\n-        if (isSizeMethodCall(node) && isCalledOnCollection(node)) {\n-            Node expr = node.getParent().getParent();\n-            checkNodeAndReport(data, node, expr);\n-        }\n-        return data;\n-    }\n-\n-    private boolean isSizeMethodCall(ASTPrimarySuffix primarySuffix) {\n-        String calledMethodName = primarySuffix.getImage();\n-        return calledMethodName != null && \"size\".equals(calledMethodName);\n-    }\n-\n-    private boolean isCalledOnCollection(ASTPrimarySuffix primarySuffix) {\n-        JavaTypeDefinition calledOnType = getTypeOfVariable(primarySuffix);\n-        if (calledOnType == null) {\n-            calledOnType = getTypeOfMethodCall(primarySuffix);\n-        }\n-        return calledOnType != null\n-                && CollectionUtil.isCollectionType(calledOnType.getType(), true);\n-    }\n+        if (node.getImage() != null && node.getImage().endsWith(\"size\")) {\n \n-    private JavaTypeDefinition getTypeOfVariable(ASTPrimarySuffix primarySuffix) {\n-        ASTPrimaryExpression primaryExpression = primarySuffix.getFirstParentOfType(ASTPrimaryExpression.class);\n-        ASTPrimaryPrefix varPrefix = primaryExpression.getFirstChildOfType(ASTPrimaryPrefix.class);\n-        if (prefixWithNoModifiers(varPrefix)) {\n-            return varPrefix.getTypeDefinition();\n-        }\n-        String varName = getVariableNameBySuffix(primaryExpression);\n-        return varName != null ? getTypeOfVariableByName(varName, primaryExpression) : null;\n-    }\n-\n-    private boolean prefixWithNoModifiers(ASTPrimaryPrefix primaryPrefix) {\n-        return !primaryPrefix.usesSuperModifier() && !primaryPrefix.usesThisModifier();\n-    }\n-\n-    private String getVariableNameBySuffix(ASTPrimaryExpression primaryExpression) {\n-        ASTPrimarySuffix varSuffix = primaryExpression\n-                .getFirstChildOfType(ASTPrimarySuffix.class);\n-        return varSuffix.getImage();\n-    }\n+            ASTClassOrInterfaceType type = getTypeOfPrimaryPrefix(node);\n+            if (type == null) {\n+                type = getTypeOfMethodCall(node);\n+            }\n \n-    private JavaTypeDefinition getTypeOfVariableByName(String varName, ASTPrimaryExpression expr) {\n-        Node classOrEnumBody = expr.getFirstParentOfType(ASTClassOrInterfaceBody.class);\n-        if (classOrEnumBody == null) {\n-            classOrEnumBody = expr.getFirstParentOfType(ASTEnumBody.class);\n-        }                 \n-        List<ASTVariableDeclarator> varDeclarators = classOrEnumBody.findDescendantsOfType(ASTVariableDeclarator.class);\n-        for (ASTVariableDeclarator varDeclarator : varDeclarators) {\n-            if (varDeclarator.getName().equals(varName)) {\n-                return varDeclarator.getVariableId().getTypeNode().getTypeDefinition();\n+            if (type != null && CollectionUtil.isCollectionType(type.getType(), true)) {\n+                Node expr = node.getParent().getParent();\n+                checkNodeAndReport(data, node, expr);\n             }\n         }\n-        return null;\n+        return data;\n     }\n \n-    private JavaTypeDefinition getTypeOfMethodCall(ASTPrimarySuffix node) {\n-        JavaTypeDefinition type = null;\n+    private ASTClassOrInterfaceType getTypeOfMethodCall(ASTPrimarySuffix node) {\n+        ASTClassOrInterfaceType type = null;\n         ASTName methodName = node.getParent().getFirstChildOfType(ASTPrimaryPrefix.class)\n                 .getFirstChildOfType(ASTName.class);\n         if (methodName != null) {\n", "next_change": {"commit": "49d0d2aebc86f4d243c2424e8e85cfc766644557", "changed_code": [{"header": "diff --git a/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/bestpractices/UseCollectionIsEmptyRule.java b/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/bestpractices/UseCollectionIsEmptyRule.java\nindex ea55ce94c4..552d1116a7 100644\n--- a/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/bestpractices/UseCollectionIsEmptyRule.java\n+++ b/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/bestpractices/UseCollectionIsEmptyRule.java\n", "chunk": "@@ -45,41 +50,76 @@ public class UseCollectionIsEmptyRule extends AbstractInefficientZeroCheck {\n      */\n     @Override\n     public boolean isTargetMethod(JavaNameOccurrence occ) {\n-        if (occ.getNameForWhichThisIsAQualifier() != null) {\n-            if (occ.getLocation().getImage().endsWith(\".size\")) {\n-                return true;\n-            }\n-        }\n-        return false;\n+        return occ.getNameForWhichThisIsAQualifier() != null\n+                && occ.getLocation().getImage().endsWith(\".size\");\n     }\n \n     @Override\n     public Map<String, List<String>> getComparisonTargets() {\n+        List<String> zeroAndOne = asList(\"0\", \"1\");\n+        List<String> zero = singletonList(\"0\");\n         Map<String, List<String>> rules = new HashMap<>();\n-        rules.put(\"<\", Arrays.asList(\"0\", \"1\"));\n-        rules.put(\">\", Arrays.asList(\"0\"));\n-        rules.put(\"==\", Arrays.asList(\"0\"));\n-        rules.put(\"!=\", Arrays.asList(\"0\"));\n-        rules.put(\">=\", Arrays.asList(\"0\", \"1\"));\n-        rules.put(\"<=\", Arrays.asList(\"0\"));\n+        rules.put(\"<\", zeroAndOne);\n+        rules.put(\">\", zero);\n+        rules.put(\"==\", zero);\n+        rules.put(\"!=\", zero);\n+        rules.put(\">=\", zeroAndOne);\n+        rules.put(\"<=\", zero);\n         return rules;\n     }\n \n     @Override\n     public Object visit(ASTPrimarySuffix node, Object data) {\n-        if (node.getImage() != null && node.getImage().endsWith(\"size\")) {\n+        if (isSizeMethodCall(node) && isCalledOnCollection(node)) {\n+            Node expr = node.getParent().getParent();\n+            checkNodeAndReport(data, node, expr);\n+        }\n+        return data;\n+    }\n \n-            ASTClassOrInterfaceType type = getTypeOfPrimaryPrefix(node);\n-            if (type == null) {\n-                type = getTypeOfMethodCall(node);\n-            }\n+    private boolean isSizeMethodCall(ASTPrimarySuffix primarySuffix) {\n+        String calledMethodName = primarySuffix.getImage();\n+        return calledMethodName != null && calledMethodName.endsWith(\"size\");\n+    }\n+\n+    private boolean isCalledOnCollection(ASTPrimarySuffix primarySuffix) {\n+        ASTClassOrInterfaceType calledOnType = getTypeOfVariable(primarySuffix);\n+        if (calledOnType == null) {\n+            calledOnType = getTypeOfMethodCall(primarySuffix);\n+        }\n+        return calledOnType != null\n+                && CollectionUtil.isCollectionType(calledOnType.getType(), true);\n+    }\n \n-            if (type != null && CollectionUtil.isCollectionType(type.getType(), true)) {\n-                Node expr = node.getParent().getParent();\n-                checkNodeAndReport(data, node, expr);\n+    private ASTClassOrInterfaceType getTypeOfVariable(ASTPrimarySuffix primarySuffix) {\n+        ASTPrimaryExpression primaryExpression = primarySuffix.getFirstParentOfType(ASTPrimaryExpression.class);\n+        ASTPrimaryPrefix varPrefix = primaryExpression.getFirstChildOfType(ASTPrimaryPrefix.class);\n+        if (prefixWithNoModifiers(varPrefix)) {\n+            return varPrefix.getFirstDescendantOfType(ASTClassOrInterfaceType.class);\n+        }\n+        String varName = getVariableNameBySuffix(primaryExpression);\n+        return varName != null ? getTypeOfVariableByName(varName, primaryExpression) : null;\n+    }\n+\n+    private boolean prefixWithNoModifiers(ASTPrimaryPrefix primaryPrefix) {\n+        return !primaryPrefix.usesSuperModifier() && !primaryPrefix.usesThisModifier();\n+    }\n+\n+    private String getVariableNameBySuffix(ASTPrimaryExpression primaryExpression) {\n+        ASTPrimarySuffix varSuffix = primaryExpression\n+                .getFirstChildOfType(ASTPrimarySuffix.class);\n+        return varSuffix.getImage();\n+    }\n+\n+    private ASTClassOrInterfaceType getTypeOfVariableByName(String varName, ASTPrimaryExpression expr) {\n+        ASTClassOrInterfaceBody classBody = expr.getFirstParentOfType(ASTClassOrInterfaceBody.class);\n+        List<ASTVariableDeclarator> varDeclarators = classBody.findDescendantsOfType(ASTVariableDeclarator.class);\n+        for (ASTVariableDeclarator varDeclarator : varDeclarators) {\n+            if (varDeclarator.getName().equals(varName)) {\n+                return varDeclarator.getFirstDescendantOfType(ASTClassOrInterfaceType.class);\n             }\n         }\n-        return data;\n+        return null;\n     }\n \n     private ASTClassOrInterfaceType getTypeOfMethodCall(ASTPrimarySuffix node) {\n", "next_change": {"commit": "2e3b52a33b5e41991b7e17e4113b7b97def8b126", "changed_code": [{"header": "diff --git a/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/bestpractices/UseCollectionIsEmptyRule.java b/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/bestpractices/UseCollectionIsEmptyRule.java\nindex 552d1116a7..f313f76be2 100644\n--- a/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/bestpractices/UseCollectionIsEmptyRule.java\n+++ b/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/bestpractices/UseCollectionIsEmptyRule.java\n", "chunk": "@@ -34,110 +18,25 @@ import net.sourceforge.pmd.util.CollectionUtil;\n  *\n  * @author Jason Bennett\n  */\n-public class UseCollectionIsEmptyRule extends AbstractInefficientZeroCheck {\n-\n-    @Override\n-    public boolean appliesToClassName(String name) {\n-        return CollectionUtil.isCollectionType(name, true);\n-    }\n-\n-    /**\n-     * Determine if we're dealing with .size method\n-     *\n-     * @param occ\n-     *            The name occurrence\n-     * @return true if it's .size, else false\n-     */\n-    @Override\n-    public boolean isTargetMethod(JavaNameOccurrence occ) {\n-        return occ.getNameForWhichThisIsAQualifier() != null\n-                && occ.getLocation().getImage().endsWith(\".size\");\n-    }\n+public class UseCollectionIsEmptyRule extends AbstractJavaRulechainRule {\n \n-    @Override\n-    public Map<String, List<String>> getComparisonTargets() {\n-        List<String> zeroAndOne = asList(\"0\", \"1\");\n-        List<String> zero = singletonList(\"0\");\n-        Map<String, List<String>> rules = new HashMap<>();\n-        rules.put(\"<\", zeroAndOne);\n-        rules.put(\">\", zero);\n-        rules.put(\"==\", zero);\n-        rules.put(\"!=\", zero);\n-        rules.put(\">=\", zeroAndOne);\n-        rules.put(\"<=\", zero);\n-        return rules;\n+    public UseCollectionIsEmptyRule() {\n+        super(ASTMethodCall.class);\n     }\n \n     @Override\n-    public Object visit(ASTPrimarySuffix node, Object data) {\n-        if (isSizeMethodCall(node) && isCalledOnCollection(node)) {\n-            Node expr = node.getParent().getParent();\n-            checkNodeAndReport(data, node, expr);\n-        }\n-        return data;\n-    }\n-\n-    private boolean isSizeMethodCall(ASTPrimarySuffix primarySuffix) {\n-        String calledMethodName = primarySuffix.getImage();\n-        return calledMethodName != null && calledMethodName.endsWith(\"size\");\n-    }\n-\n-    private boolean isCalledOnCollection(ASTPrimarySuffix primarySuffix) {\n-        ASTClassOrInterfaceType calledOnType = getTypeOfVariable(primarySuffix);\n-        if (calledOnType == null) {\n-            calledOnType = getTypeOfMethodCall(primarySuffix);\n-        }\n-        return calledOnType != null\n-                && CollectionUtil.isCollectionType(calledOnType.getType(), true);\n-    }\n-\n-    private ASTClassOrInterfaceType getTypeOfVariable(ASTPrimarySuffix primarySuffix) {\n-        ASTPrimaryExpression primaryExpression = primarySuffix.getFirstParentOfType(ASTPrimaryExpression.class);\n-        ASTPrimaryPrefix varPrefix = primaryExpression.getFirstChildOfType(ASTPrimaryPrefix.class);\n-        if (prefixWithNoModifiers(varPrefix)) {\n-            return varPrefix.getFirstDescendantOfType(ASTClassOrInterfaceType.class);\n-        }\n-        String varName = getVariableNameBySuffix(primaryExpression);\n-        return varName != null ? getTypeOfVariableByName(varName, primaryExpression) : null;\n-    }\n-\n-    private boolean prefixWithNoModifiers(ASTPrimaryPrefix primaryPrefix) {\n-        return !primaryPrefix.usesSuperModifier() && !primaryPrefix.usesThisModifier();\n-    }\n-\n-    private String getVariableNameBySuffix(ASTPrimaryExpression primaryExpression) {\n-        ASTPrimarySuffix varSuffix = primaryExpression\n-                .getFirstChildOfType(ASTPrimarySuffix.class);\n-        return varSuffix.getImage();\n-    }\n-\n-    private ASTClassOrInterfaceType getTypeOfVariableByName(String varName, ASTPrimaryExpression expr) {\n-        ASTClassOrInterfaceBody classBody = expr.getFirstParentOfType(ASTClassOrInterfaceBody.class);\n-        List<ASTVariableDeclarator> varDeclarators = classBody.findDescendantsOfType(ASTVariableDeclarator.class);\n-        for (ASTVariableDeclarator varDeclarator : varDeclarators) {\n-            if (varDeclarator.getName().equals(varName)) {\n-                return varDeclarator.getFirstDescendantOfType(ASTClassOrInterfaceType.class);\n-            }\n+    public Object visit(ASTMethodCall call, Object data) {\n+        if ((TypeTestUtil.isA(Collection.class, call.getQualifier())\n+            || TypeTestUtil.isA(Map.class, call.getQualifier()))\n+            && isSizeZeroCheck(call)) {\n+            addViolation(data, call);\n         }\n         return null;\n     }\n \n-    private ASTClassOrInterfaceType getTypeOfMethodCall(ASTPrimarySuffix node) {\n-        ASTClassOrInterfaceType type = null;\n-        ASTName methodName = node.getParent().getFirstChildOfType(ASTPrimaryPrefix.class)\n-                .getFirstChildOfType(ASTName.class);\n-        if (methodName != null) {\n-            ClassScope classScope = node.getScope().getEnclosingScope(ClassScope.class);\n-            Map<MethodNameDeclaration, List<NameOccurrence>> methods = classScope.getMethodDeclarations();\n-            for (Map.Entry<MethodNameDeclaration, List<NameOccurrence>> e : methods.entrySet()) {\n-                if (e.getKey().getName().equals(methodName.getImage())) {\n-                    type = e.getKey().getNode().getFirstParentOfType(ASTMethodDeclaration.class)\n-                            .getFirstChildOfType(ASTResultType.class)\n-                            .getFirstDescendantOfType(ASTClassOrInterfaceType.class);\n-                    break;\n-                }\n-            }\n-        }\n-        return type;\n+    private static boolean isSizeZeroCheck(ASTMethodCall call) {\n+        return call.getMethodName().equals(\"size\")\n+            && call.getArguments().size() == 0\n+            && JavaRuleUtil.isZeroChecked(call);\n     }\n }\n", "next_change": {"commit": "d905c5f0aae3618c069499dce379cc643d597dae", "changed_code": [{"header": "diff --git a/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/bestpractices/UseCollectionIsEmptyRule.java b/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/bestpractices/UseCollectionIsEmptyRule.java\nindex f313f76be2..9a3bc18c97 100644\n--- a/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/bestpractices/UseCollectionIsEmptyRule.java\n+++ b/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/bestpractices/UseCollectionIsEmptyRule.java\n", "chunk": "@@ -35,7 +35,7 @@ public class UseCollectionIsEmptyRule extends AbstractJavaRulechainRule {\n     }\n \n     private static boolean isSizeZeroCheck(ASTMethodCall call) {\n-        return call.getMethodName().equals(\"size\")\n+        return \"size\".equals(call.getMethodName())\n             && call.getArguments().size() == 0\n             && JavaRuleUtil.isZeroChecked(call);\n     }\n", "next_change": null}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "175d535e9fe73de8afd40445650dc979a3209b07", "message": "Merge commit", "committedDate": null}, {"oid": "ecef88aa0aed9157618ef7b457d51b902eba71a6", "committedDate": "2020-01-17 12:10:51 +0100", "message": "Merge branch 'master' into 7.0.x"}, {"oid": "49d0d2aebc86f4d243c2424e8e85cfc766644557", "committedDate": "2020-07-23 15:55:13 +0200", "message": "Merge branch 'master' into 7.0.x"}, {"oid": "942493051eb3deb429b7c4a755807b5a366f2bdf", "committedDate": "2020-07-28 12:31:59 +0200", "message": "Remove some utils"}, {"oid": "226cb0f74afc46f4366797f76c2961843bd29022", "committedDate": "2020-08-23 19:17:05 +0200", "message": "Update TypeTestUtil WIP"}, {"oid": "2e3b52a33b5e41991b7e17e4113b7b97def8b126", "committedDate": "2020-10-30 09:33:56 +0100", "message": "Update UseCollectionsIsEmpty"}, {"oid": "d905c5f0aae3618c069499dce379cc643d597dae", "committedDate": "2020-11-02 02:44:06 +0100", "message": "PMD warnings"}]}, {"oid": "4be2562f01f90ece6a4ddad69c165b108b29b2b5", "url": "https://github.com/pmd/pmd/commit/4be2562f01f90ece6a4ddad69c165b108b29b2b5", "message": "Fixups for #2968\n\n- Use better typeres\n- Add test cases for records and local var", "committedDate": "2021-01-21T10:03:51Z", "type": "commit"}]}