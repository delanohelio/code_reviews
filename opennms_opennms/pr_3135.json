{"pr_number": 3135, "pr_title": "NMS-12874: Renamed RemotePoller to PerspectivePoller", "pr_author": "fooker", "pr_createdAt": "2020-08-28T13:02:01Z", "pr_url": "https://github.com/OpenNMS/opennms/pull/3135", "merge_commit": "c12e898c493c388db257abbf9cf9e7a5a2ae6be4", "timeline": [{"oid": "ca5e642854d94211641c85627e3fb99e3a329a71", "url": "https://github.com/OpenNMS/opennms/commit/ca5e642854d94211641c85627e3fb99e3a329a71", "message": "NMS-12874: Renamed RemotePoller to PerspectivePoller", "committedDate": "2020-08-29T08:42:50Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTkxODE5OQ==", "url": "https://github.com/OpenNMS/opennms/pull/3135#discussion_r479918199", "body": "Typo", "bodyText": "Typo", "bodyHTML": "<p dir=\"auto\">Typo</p>", "author": "christianpape", "createdAt": "2020-08-31T06:23:47Z", "path": "features/perspectivepoller/src/test/java/org/opennms/netmgt/perspectivepoller/PerspectivePollerdIT.java", "diffHunk": "@@ -98,7 +98,7 @@\n         \"classpath:/META-INF/opennms/applicationContext-commonConfigs.xml\",\n         \"classpath:/META-INF/opennms/applicationContext-dao.xml\",\n         \"classpath:/META-INF/opennms/applicationContext-databasePopulator.xml\",\n-        \"classpath:/META-INF/opennms/applicationContext-testRemotePollerDaemon.xml\",\n+        \"classpath:/META-INF/opennms/applicationContext-testPerpsectivePollerDaemon.xml\",", "originalCommit": "ca5e642854d94211641c85627e3fb99e3a329a71", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c01ddbac560ddfb1d76cfd82188c53b42c165e22", "changed_code": [{"header": "diff --git a/features/perspectivepoller/src/test/java/org/opennms/netmgt/perspectivepoller/PerspectivePollerdIT.java b/features/perspectivepoller/src/test/java/org/opennms/netmgt/perspectivepoller/PerspectivePollerdIT.java\nindex 6d7a562cc47..860b5df988f 100644\n--- a/features/perspectivepoller/src/test/java/org/opennms/netmgt/perspectivepoller/PerspectivePollerdIT.java\n+++ b/features/perspectivepoller/src/test/java/org/opennms/netmgt/perspectivepoller/PerspectivePollerdIT.java\n", "chunk": "@@ -98,7 +98,7 @@ import io.opentracing.util.GlobalTracer;\n         \"classpath:/META-INF/opennms/applicationContext-commonConfigs.xml\",\n         \"classpath:/META-INF/opennms/applicationContext-dao.xml\",\n         \"classpath:/META-INF/opennms/applicationContext-databasePopulator.xml\",\n-        \"classpath:/META-INF/opennms/applicationContext-testPerpsectivePollerDaemon.xml\",\n+        \"classpath:/META-INF/opennms/applicationContext-testPerspectivePollerDaemon.xml\",\n         \"classpath:/META-INF/opennms/applicationContext-shared.xml\",\n         \"classpath:/META-INF/opennms/mockEventIpcManager.xml\",\n         \"classpath:/META-INF/opennms/applicationContext-minimal-conf.xml\",\n", "next_change": null}]}, "revised_code_in_main": {"commit": "c12e898c493c388db257abbf9cf9e7a5a2ae6be4", "changed_code": [{"header": "diff --git a/features/perspectivepoller/src/test/java/org/opennms/netmgt/perspectivepoller/PerspectivePollerdIT.java b/features/perspectivepoller/src/test/java/org/opennms/netmgt/perspectivepoller/PerspectivePollerdIT.java\nindex 6d7a562cc47..1fac0324ab4 100644\n--- a/features/perspectivepoller/src/test/java/org/opennms/netmgt/perspectivepoller/PerspectivePollerdIT.java\n+++ b/features/perspectivepoller/src/test/java/org/opennms/netmgt/perspectivepoller/PerspectivePollerdIT.java\n", "chunk": "@@ -98,7 +100,7 @@ import io.opentracing.util.GlobalTracer;\n         \"classpath:/META-INF/opennms/applicationContext-commonConfigs.xml\",\n         \"classpath:/META-INF/opennms/applicationContext-dao.xml\",\n         \"classpath:/META-INF/opennms/applicationContext-databasePopulator.xml\",\n-        \"classpath:/META-INF/opennms/applicationContext-testPerpsectivePollerDaemon.xml\",\n+        \"classpath:/META-INF/opennms/applicationContext-testPerspectivePollerDaemon.xml\",\n         \"classpath:/META-INF/opennms/applicationContext-shared.xml\",\n         \"classpath:/META-INF/opennms/mockEventIpcManager.xml\",\n         \"classpath:/META-INF/opennms/applicationContext-minimal-conf.xml\",\n", "next_change": {"commit": "70c67465dd0d4a58783bf0f4ed6d670daa43a2bf", "changed_code": [{"header": "diff --git a/features/perspectivepoller/src/test/java/org/opennms/netmgt/perspectivepoller/PerspectivePollerdIT.java b/features/perspectivepoller/src/test/java/org/opennms/netmgt/perspectivepoller/PerspectivePollerdIT.java\nindex 1fac0324ab4..bc709b1c72b 100644\n--- a/features/perspectivepoller/src/test/java/org/opennms/netmgt/perspectivepoller/PerspectivePollerdIT.java\n+++ b/features/perspectivepoller/src/test/java/org/opennms/netmgt/perspectivepoller/PerspectivePollerdIT.java\n", "chunk": "@@ -99,6 +99,7 @@ import io.opentracing.util.GlobalTracer;\n         \"classpath:/META-INF/opennms/applicationContext-daemon.xml\",\n         \"classpath:/META-INF/opennms/applicationContext-commonConfigs.xml\",\n         \"classpath:/META-INF/opennms/applicationContext-dao.xml\",\n+        \"classpath:/META-INF/opennms/applicationContext-mockConfigManager.xml\",\n         \"classpath:/META-INF/opennms/applicationContext-databasePopulator.xml\",\n         \"classpath:/META-INF/opennms/applicationContext-testPerspectivePollerDaemon.xml\",\n         \"classpath:/META-INF/opennms/applicationContext-shared.xml\",\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "c12e898c493c388db257abbf9cf9e7a5a2ae6be4", "message": "Merge commit", "committedDate": null}, {"oid": "2f1edb048a5b3496aba66c2d3ced97a8cde09bf1", "committedDate": "2020-09-03 17:11:10 +0200", "message": "NMS-12889: Fix duplicated key for multi-app services"}, {"oid": "70c67465dd0d4a58783bf0f4ed6d670daa43a2bf", "committedDate": "2022-01-26 08:34:12 -0500", "message": "Features/cm phase1 backend (#4000)"}, {"oid": "fa50a760846cf4d429792d9821ff42b00a5915aa", "committedDate": "2022-02-03 11:28:16 -0500", "message": "mockito: remove easymock from features/perspectivepoller"}, {"oid": "e5c159a1ce2a9db5783ffb3898403e3220cd41e6", "committedDate": "2022-04-27 13:01:15 -0400", "message": "NMS-14155: Add support for SCV retrieval through  Metadata API (#4540)"}, {"oid": "c2845f7a0bc98f39f58a3f435675a42873226061", "committedDate": "2022-10-18 15:41:49 -0400", "message": "NMS-14839: Fix issues with MockDatabase using wrong systemID"}, {"oid": "5915c4d63cc15310a708f5c10f78d6b2e2603fa6", "committedDate": "2022-11-22 17:59:00 +0100", "message": "NMS-15001: Use service locator key in poller client"}, {"oid": "b9b69fba5731a0edde81063e93457b393b10814d", "committedDate": "2023-02-05 01:58:43 -0500", "message": "Move from com.jayway.awaitility (1.7.0) to org.awaitility (4.2.0)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTkxODY4Mw==", "url": "https://github.com/OpenNMS/opennms/pull/3135#discussion_r479918683", "body": "upper case P please, findPerspectivePolledService", "bodyText": "upper case P please, findPerspectivePolledService", "bodyHTML": "<p dir=\"auto\">upper case P please, findPerspectivePolledService</p>", "author": "christianpape", "createdAt": "2020-08-31T06:25:10Z", "path": "features/perspectivepoller/src/test/java/org/opennms/netmgt/perspectivepoller/PerspectivePollerdIT.java", "diffHunk": "@@ -263,66 +263,66 @@ public void reportResultTest() throws Exception {\n         final InetAddress ipAddress = this.node1icmp.getIpAddress();\n         final String location = this.node1icmp.getIpInterface().getNode().getLocation().getLocationName();\n \n-        final RemotePolledService remotePolledService = findRemotePolledService(this.node1icmp, \"RDU\");\n+        final PerspectivePolledService perspectivePolledService = findperspectivePolledService(this.node1icmp, \"RDU\");\n         assertThat(this.databasePopulator.getOutageDao().currentOutageForServiceFromPerspective(this.node1icmp, this.databasePopulator.getLocRDU()), is(nullValue()));\n \n         this.eventIpcManager.getEventAnticipator().reset();\n-        this.eventIpcManager.getEventAnticipator().anticipateEvent(new EventBuilder(EventConstants.REMOTE_NODE_REGAINED_SERVICE_UEI, \"RemotePollerd\").setNodeid(nodeId).setInterface(ipAddress).setService(serviceMatch.service.getName()).setParam(\"location\", location).getEvent());\n-        this.remotePollerd.reportResult(remotePolledService, PollStatus.available());\n+        this.eventIpcManager.getEventAnticipator().anticipateEvent(new EventBuilder(EventConstants.PERSPECTIVE_NODE_REGAINED_SERVICE_UEI, \"PerspectivePollerd\").setNodeid(nodeId).setInterface(ipAddress).setService(serviceMatch.service.getName()).setParam(\"location\", location).getEvent());\n+        this.perspectivePollerd.reportResult(perspectivePolledService, PollStatus.available());\n         assertThat(this.databasePopulator.getOutageDao().currentOutageForServiceFromPerspective(this.node1icmp, this.databasePopulator.getLocRDU()), is(nullValue()));\n         this.eventIpcManager.getEventAnticipator().verifyAnticipated();\n \n         this.eventIpcManager.getEventAnticipator().reset();\n-        this.remotePollerd.reportResult(remotePolledService, PollStatus.available());\n+        this.perspectivePollerd.reportResult(perspectivePolledService, PollStatus.available());\n         assertThat(this.databasePopulator.getOutageDao().currentOutageForServiceFromPerspective(this.node1icmp, this.databasePopulator.getLocRDU()), is(nullValue()));\n         this.eventIpcManager.getEventAnticipator().verifyAnticipated();\n \n         this.eventIpcManager.getEventAnticipator().reset();\n-        this.eventIpcManager.getEventAnticipator().anticipateEvent(new EventBuilder(EventConstants.REMOTE_NODE_LOST_SERVICE_UEI, \"RemotePollerd\").setNodeid(nodeId).setInterface(ipAddress).setService(serviceMatch.service.getName()).setParam(\"location\", location).getEvent());\n-        this.eventIpcManager.getEventAnticipator().anticipateEvent(new EventBuilder(EventConstants.OUTAGE_CREATED_EVENT_UEI, \"RemotePollerd\").setNodeid(nodeId).setInterface(ipAddress).setService(serviceMatch.service.getName()).setParam(\"location\", location).getEvent());\n-        this.remotePollerd.reportResult(remotePolledService, PollStatus.unavailable(\"old reason\"));\n+        this.eventIpcManager.getEventAnticipator().anticipateEvent(new EventBuilder(EventConstants.PERSPECTIVE_NODE_LOST_SERVICE_UEI, \"PerspectivePollerd\").setNodeid(nodeId).setInterface(ipAddress).setService(serviceMatch.service.getName()).setParam(\"location\", location).getEvent());\n+        this.eventIpcManager.getEventAnticipator().anticipateEvent(new EventBuilder(EventConstants.OUTAGE_CREATED_EVENT_UEI, \"PerspectivePollerd\").setNodeid(nodeId).setInterface(ipAddress).setService(serviceMatch.service.getName()).setParam(\"location\", location).getEvent());\n+        this.perspectivePollerd.reportResult(perspectivePolledService, PollStatus.unavailable(\"old reason\"));\n         assertThat(this.databasePopulator.getOutageDao().currentOutageForServiceFromPerspective(this.node1icmp, this.databasePopulator.getLocRDU()), is(notNullValue()));\n         this.eventIpcManager.getEventAnticipator().verifyAnticipated();\n \n         this.eventIpcManager.getEventAnticipator().reset();\n-        this.remotePollerd.reportResult(remotePolledService, PollStatus.unavailable(\"old reason\"));\n+        this.perspectivePollerd.reportResult(perspectivePolledService, PollStatus.unavailable(\"old reason\"));\n         assertThat(this.databasePopulator.getOutageDao().currentOutageForServiceFromPerspective(this.node1icmp, this.databasePopulator.getLocRDU()), is(notNullValue()));\n         this.eventIpcManager.getEventAnticipator().verifyAnticipated();\n \n         this.eventIpcManager.getEventAnticipator().reset();\n-        this.remotePollerd.reportResult(remotePolledService, PollStatus.unavailable(\"new reason\"));\n+        this.perspectivePollerd.reportResult(perspectivePolledService, PollStatus.unavailable(\"new reason\"));\n         assertThat(this.databasePopulator.getOutageDao().currentOutageForServiceFromPerspective(this.node1icmp, this.databasePopulator.getLocRDU()), is(notNullValue()));\n         this.eventIpcManager.getEventAnticipator().verifyAnticipated();\n \n         this.eventIpcManager.getEventAnticipator().reset();\n-        this.eventIpcManager.getEventAnticipator().anticipateEvent(new EventBuilder(EventConstants.REMOTE_NODE_REGAINED_SERVICE_UEI, \"RemotePollerd\").setNodeid(nodeId).setInterface(ipAddress).setService(serviceMatch.service.getName()).setParam(\"location\", location).getEvent());\n-        this.eventIpcManager.getEventAnticipator().anticipateEvent(new EventBuilder(EventConstants.OUTAGE_RESOLVED_EVENT_UEI, \"RemotePollerd\").setNodeid(nodeId).setInterface(ipAddress).setService(serviceMatch.service.getName()).setParam(\"location\", location).getEvent());\n-        this.remotePollerd.reportResult(remotePolledService, PollStatus.available());\n+        this.eventIpcManager.getEventAnticipator().anticipateEvent(new EventBuilder(EventConstants.PERSPECTIVE_NODE_REGAINED_SERVICE_UEI, \"PerspectivePollerd\").setNodeid(nodeId).setInterface(ipAddress).setService(serviceMatch.service.getName()).setParam(\"location\", location).getEvent());\n+        this.eventIpcManager.getEventAnticipator().anticipateEvent(new EventBuilder(EventConstants.OUTAGE_RESOLVED_EVENT_UEI, \"PerspectivePollerd\").setNodeid(nodeId).setInterface(ipAddress).setService(serviceMatch.service.getName()).setParam(\"location\", location).getEvent());\n+        this.perspectivePollerd.reportResult(perspectivePolledService, PollStatus.available());\n         assertThat(this.databasePopulator.getOutageDao().currentOutageForServiceFromPerspective(this.node1icmp, this.databasePopulator.getLocRDU()), is(nullValue()));\n         this.eventIpcManager.getEventAnticipator().verifyAnticipated();\n     }\n \n     @Test\n     public void testDaemonReload() throws Exception {\n         // Initial config, ICMP and SNMP bound to single package\n-        Assert.assertEquals(8, this.remotePollerd.scheduler.getJobKeys(GroupMatcher.anyGroup()).size());\n-        assertThat(findRemotePolledService(this.node1icmp, \"RDU\").getPkg().getName(), is(\"foo1\"));\n-        assertThat(findRemotePolledService(this.node1icmp, \"Fulda\").getPkg().getName(), is(\"foo1\"));\n-        assertThat(findRemotePolledService(this.node2icmp, \"RDU\").getPkg().getName(), is(\"foo1\"));\n-        assertThat(findRemotePolledService(this.node2icmp, \"Fulda\").getPkg().getName(), is(\"foo1\"));\n-        assertThat(findRemotePolledService(this.node1snmp, \"RDU\").getPkg().getName(), is(\"foo1\"));\n-        assertThat(findRemotePolledService(this.node2snmp, \"RDU\").getPkg().getName(), is(\"foo1\"));\n+        Assert.assertEquals(8, this.perspectivePollerd.scheduler.getJobKeys(GroupMatcher.anyGroup()).size());\n+        assertThat(findperspectivePolledService(this.node1icmp, \"RDU\").getPkg().getName(), is(\"foo1\"));", "originalCommit": "ca5e642854d94211641c85627e3fb99e3a329a71", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c01ddbac560ddfb1d76cfd82188c53b42c165e22", "changed_code": [{"header": "diff --git a/features/perspectivepoller/src/test/java/org/opennms/netmgt/perspectivepoller/PerspectivePollerdIT.java b/features/perspectivepoller/src/test/java/org/opennms/netmgt/perspectivepoller/PerspectivePollerdIT.java\nindex 6d7a562cc47..860b5df988f 100644\n--- a/features/perspectivepoller/src/test/java/org/opennms/netmgt/perspectivepoller/PerspectivePollerdIT.java\n+++ b/features/perspectivepoller/src/test/java/org/opennms/netmgt/perspectivepoller/PerspectivePollerdIT.java\n", "chunk": "@@ -306,23 +306,23 @@ public class PerspectivePollerdIT implements InitializingBean, TemporaryDatabase\n     public void testDaemonReload() throws Exception {\n         // Initial config, ICMP and SNMP bound to single package\n         Assert.assertEquals(8, this.perspectivePollerd.scheduler.getJobKeys(GroupMatcher.anyGroup()).size());\n-        assertThat(findperspectivePolledService(this.node1icmp, \"RDU\").getPkg().getName(), is(\"foo1\"));\n-        assertThat(findperspectivePolledService(this.node1icmp, \"Fulda\").getPkg().getName(), is(\"foo1\"));\n-        assertThat(findperspectivePolledService(this.node2icmp, \"RDU\").getPkg().getName(), is(\"foo1\"));\n-        assertThat(findperspectivePolledService(this.node2icmp, \"Fulda\").getPkg().getName(), is(\"foo1\"));\n-        assertThat(findperspectivePolledService(this.node1snmp, \"RDU\").getPkg().getName(), is(\"foo1\"));\n-        assertThat(findperspectivePolledService(this.node2snmp, \"RDU\").getPkg().getName(), is(\"foo1\"));\n+        assertThat(findPerspectivePolledService(this.node1icmp, \"RDU\").getPkg().getName(), is(\"foo1\"));\n+        assertThat(findPerspectivePolledService(this.node1icmp, \"Fulda\").getPkg().getName(), is(\"foo1\"));\n+        assertThat(findPerspectivePolledService(this.node2icmp, \"RDU\").getPkg().getName(), is(\"foo1\"));\n+        assertThat(findPerspectivePolledService(this.node2icmp, \"Fulda\").getPkg().getName(), is(\"foo1\"));\n+        assertThat(findPerspectivePolledService(this.node1snmp, \"RDU\").getPkg().getName(), is(\"foo1\"));\n+        assertThat(findPerspectivePolledService(this.node2snmp, \"RDU\").getPkg().getName(), is(\"foo1\"));\n \n         // New config, package ICMP and SNMP bound to two different packages\n         PollerConfigFactory.setPollerConfigFile(POLLER_CONFIG_2);\n         sendReloadPerspectivePollerdEvent();\n         Assert.assertEquals(8, this.perspectivePollerd.scheduler.getJobKeys(GroupMatcher.anyGroup()).size());\n-        assertThat(findperspectivePolledService(this.node1icmp, \"RDU\").getPkg().getName(), is(\"foo1\"));\n-        assertThat(findperspectivePolledService(this.node1icmp, \"Fulda\").getPkg().getName(), is(\"foo1\"));\n-        assertThat(findperspectivePolledService(this.node2icmp, \"RDU\").getPkg().getName(), is(\"foo1\"));\n-        assertThat(findperspectivePolledService(this.node2icmp, \"Fulda\").getPkg().getName(), is(\"foo1\"));\n-        assertThat(findperspectivePolledService(this.node1snmp, \"RDU\").getPkg().getName(), is(\"foo2\"));\n-        assertThat(findperspectivePolledService(this.node2snmp, \"RDU\").getPkg().getName(), is(\"foo2\"));\n+        assertThat(findPerspectivePolledService(this.node1icmp, \"RDU\").getPkg().getName(), is(\"foo1\"));\n+        assertThat(findPerspectivePolledService(this.node1icmp, \"Fulda\").getPkg().getName(), is(\"foo1\"));\n+        assertThat(findPerspectivePolledService(this.node2icmp, \"RDU\").getPkg().getName(), is(\"foo1\"));\n+        assertThat(findPerspectivePolledService(this.node2icmp, \"Fulda\").getPkg().getName(), is(\"foo1\"));\n+        assertThat(findPerspectivePolledService(this.node1snmp, \"RDU\").getPkg().getName(), is(\"foo2\"));\n+        assertThat(findPerspectivePolledService(this.node2snmp, \"RDU\").getPkg().getName(), is(\"foo2\"));\n     }\n \n     @Test\n", "next_change": {"commit": "0e119dad1135d969be71b33d8ba7c530b1d40a79", "changed_code": [{"header": "diff --git a/features/perspectivepoller/src/test/java/org/opennms/netmgt/perspectivepoller/PerspectivePollerdIT.java b/features/perspectivepoller/src/test/java/org/opennms/netmgt/perspectivepoller/PerspectivePollerdIT.java\nindex 860b5df988f..1fac0324ab4 100644\n--- a/features/perspectivepoller/src/test/java/org/opennms/netmgt/perspectivepoller/PerspectivePollerdIT.java\n+++ b/features/perspectivepoller/src/test/java/org/opennms/netmgt/perspectivepoller/PerspectivePollerdIT.java\n", "chunk": "@@ -264,65 +264,90 @@ public class PerspectivePollerdIT implements InitializingBean, TemporaryDatabase\n         final String location = this.node1icmp.getIpInterface().getNode().getLocation().getLocationName();\n \n         final PerspectivePolledService perspectivePolledService = findPerspectivePolledService(this.node1icmp, \"RDU\");\n-        assertThat(this.databasePopulator.getOutageDao().currentOutageForServiceFromPerspective(this.node1icmp, this.databasePopulator.getLocRDU()), is(nullValue()));\n+        await().atMost(5, TimeUnit.SECONDS).until(() -> this.databasePopulator.getOutageDao().currentOutageForServiceFromPerspective(this.node1icmp, this.databasePopulator.getLocRDU()), is(nullValue()));\n \n         this.eventIpcManager.getEventAnticipator().reset();\n         this.eventIpcManager.getEventAnticipator().anticipateEvent(new EventBuilder(EventConstants.PERSPECTIVE_NODE_REGAINED_SERVICE_UEI, \"PerspectivePollerd\").setNodeid(nodeId).setInterface(ipAddress).setService(serviceMatch.service.getName()).setParam(\"location\", location).getEvent());\n         this.perspectivePollerd.reportResult(perspectivePolledService, PollStatus.available());\n-        assertThat(this.databasePopulator.getOutageDao().currentOutageForServiceFromPerspective(this.node1icmp, this.databasePopulator.getLocRDU()), is(nullValue()));\n+        await().atMost(5, TimeUnit.SECONDS).until(() -> this.databasePopulator.getOutageDao().currentOutageForServiceFromPerspective(this.node1icmp, this.databasePopulator.getLocRDU()), is(nullValue()));\n         this.eventIpcManager.getEventAnticipator().verifyAnticipated();\n \n         this.eventIpcManager.getEventAnticipator().reset();\n         this.perspectivePollerd.reportResult(perspectivePolledService, PollStatus.available());\n-        assertThat(this.databasePopulator.getOutageDao().currentOutageForServiceFromPerspective(this.node1icmp, this.databasePopulator.getLocRDU()), is(nullValue()));\n+        await().atMost(5, TimeUnit.SECONDS).until(() -> this.databasePopulator.getOutageDao().currentOutageForServiceFromPerspective(this.node1icmp, this.databasePopulator.getLocRDU()), is(nullValue()));\n         this.eventIpcManager.getEventAnticipator().verifyAnticipated();\n \n         this.eventIpcManager.getEventAnticipator().reset();\n         this.eventIpcManager.getEventAnticipator().anticipateEvent(new EventBuilder(EventConstants.PERSPECTIVE_NODE_LOST_SERVICE_UEI, \"PerspectivePollerd\").setNodeid(nodeId).setInterface(ipAddress).setService(serviceMatch.service.getName()).setParam(\"location\", location).getEvent());\n         this.eventIpcManager.getEventAnticipator().anticipateEvent(new EventBuilder(EventConstants.OUTAGE_CREATED_EVENT_UEI, \"PerspectivePollerd\").setNodeid(nodeId).setInterface(ipAddress).setService(serviceMatch.service.getName()).setParam(\"location\", location).getEvent());\n         this.perspectivePollerd.reportResult(perspectivePolledService, PollStatus.unavailable(\"old reason\"));\n-        assertThat(this.databasePopulator.getOutageDao().currentOutageForServiceFromPerspective(this.node1icmp, this.databasePopulator.getLocRDU()), is(notNullValue()));\n+        await().atMost(5, TimeUnit.SECONDS).until(() -> this.databasePopulator.getOutageDao().currentOutageForServiceFromPerspective(this.node1icmp, this.databasePopulator.getLocRDU()), is(notNullValue()));\n         this.eventIpcManager.getEventAnticipator().verifyAnticipated();\n \n         this.eventIpcManager.getEventAnticipator().reset();\n         this.perspectivePollerd.reportResult(perspectivePolledService, PollStatus.unavailable(\"old reason\"));\n-        assertThat(this.databasePopulator.getOutageDao().currentOutageForServiceFromPerspective(this.node1icmp, this.databasePopulator.getLocRDU()), is(notNullValue()));\n+        await().atMost(5, TimeUnit.SECONDS).until(() -> this.databasePopulator.getOutageDao().currentOutageForServiceFromPerspective(this.node1icmp, this.databasePopulator.getLocRDU()), is(notNullValue()));\n         this.eventIpcManager.getEventAnticipator().verifyAnticipated();\n \n         this.eventIpcManager.getEventAnticipator().reset();\n         this.perspectivePollerd.reportResult(perspectivePolledService, PollStatus.unavailable(\"new reason\"));\n-        assertThat(this.databasePopulator.getOutageDao().currentOutageForServiceFromPerspective(this.node1icmp, this.databasePopulator.getLocRDU()), is(notNullValue()));\n+        await().atMost(5, TimeUnit.SECONDS).until(() -> this.databasePopulator.getOutageDao().currentOutageForServiceFromPerspective(this.node1icmp, this.databasePopulator.getLocRDU()), is(notNullValue()));\n         this.eventIpcManager.getEventAnticipator().verifyAnticipated();\n \n         this.eventIpcManager.getEventAnticipator().reset();\n         this.eventIpcManager.getEventAnticipator().anticipateEvent(new EventBuilder(EventConstants.PERSPECTIVE_NODE_REGAINED_SERVICE_UEI, \"PerspectivePollerd\").setNodeid(nodeId).setInterface(ipAddress).setService(serviceMatch.service.getName()).setParam(\"location\", location).getEvent());\n         this.eventIpcManager.getEventAnticipator().anticipateEvent(new EventBuilder(EventConstants.OUTAGE_RESOLVED_EVENT_UEI, \"PerspectivePollerd\").setNodeid(nodeId).setInterface(ipAddress).setService(serviceMatch.service.getName()).setParam(\"location\", location).getEvent());\n         this.perspectivePollerd.reportResult(perspectivePolledService, PollStatus.available());\n-        assertThat(this.databasePopulator.getOutageDao().currentOutageForServiceFromPerspective(this.node1icmp, this.databasePopulator.getLocRDU()), is(nullValue()));\n+        await().atMost(5, TimeUnit.SECONDS).until(() -> this.databasePopulator.getOutageDao().currentOutageForServiceFromPerspective(this.node1icmp, this.databasePopulator.getLocRDU()), is(nullValue()));\n         this.eventIpcManager.getEventAnticipator().verifyAnticipated();\n     }\n \n+    @Test\n+    public void testCloseOutageOnUnschedule() throws Exception {\n+        final Package pkg = PollerConfigFactory.getInstance().getPackage(\"foo1\");\n+        final Package.ServiceMatch serviceMatch = pkg.findService(\"ICMP\").get();\n+        final ServiceMonitor svcMon = PollerConfigFactory.getInstance().getServiceMonitor(\"ICMP\");\n+\n+        final int nodeId = this.node1icmp.getNodeId();\n+        final InetAddress ipAddress = this.node1icmp.getIpAddress();\n+        final String location = this.node1icmp.getIpInterface().getNode().getLocation().getLocationName();\n+\n+        final PerspectivePolledService perspectivePolledService = findPerspectivePolledService(this.node1icmp, \"RDU\");\n+        await().atMost(5, TimeUnit.SECONDS).until(() -> this.databasePopulator.getOutageDao().currentOutageForServiceFromPerspective(this.node1icmp, this.databasePopulator.getLocRDU()), is(nullValue()));\n+\n+        this.perspectivePollerd.reportResult(perspectivePolledService, PollStatus.unavailable(\"old reason\"));\n+        await().atMost(5, TimeUnit.SECONDS).until(() -> this.databasePopulator.getOutageDao().currentOutageForServiceFromPerspective(this.node1icmp, this.databasePopulator.getLocRDU()), is(notNullValue()));\n+\n+        this.databasePopulator.getApplicationDao().delete(this.app1);\n+        this.eventIpcManager.sendNowSync(new EventBuilder(EventConstants.APPLICATION_DELETED_EVENT_UEI, \"test\")\n+                                                 .addParam(PARM_APPLICATION_ID, this.app1.getId())\n+                                                 .addParam(PARM_APPLICATION_NAME, this.app1.getName())\n+                                                 .getEvent());\n+\n+        await().atMost(5, TimeUnit.SECONDS).until(() -> this.databasePopulator.getOutageDao().currentOutageForServiceFromPerspective(this.node1icmp, this.databasePopulator.getLocRDU()), is(nullValue()));\n+    }\n+\n     @Test\n     public void testDaemonReload() throws Exception {\n         // Initial config, ICMP and SNMP bound to single package\n         Assert.assertEquals(8, this.perspectivePollerd.scheduler.getJobKeys(GroupMatcher.anyGroup()).size());\n-        assertThat(findPerspectivePolledService(this.node1icmp, \"RDU\").getPkg().getName(), is(\"foo1\"));\n-        assertThat(findPerspectivePolledService(this.node1icmp, \"Fulda\").getPkg().getName(), is(\"foo1\"));\n-        assertThat(findPerspectivePolledService(this.node2icmp, \"RDU\").getPkg().getName(), is(\"foo1\"));\n-        assertThat(findPerspectivePolledService(this.node2icmp, \"Fulda\").getPkg().getName(), is(\"foo1\"));\n-        assertThat(findPerspectivePolledService(this.node1snmp, \"RDU\").getPkg().getName(), is(\"foo1\"));\n-        assertThat(findPerspectivePolledService(this.node2snmp, \"RDU\").getPkg().getName(), is(\"foo1\"));\n+        await().atMost(5, TimeUnit.SECONDS).until(() -> findPerspectivePolledService(this.node1icmp, \"RDU\").getPkg().getName(), is(\"foo1\"));\n+        await().atMost(5, TimeUnit.SECONDS).until(() -> findPerspectivePolledService(this.node1icmp, \"Fulda\").getPkg().getName(), is(\"foo1\"));\n+        await().atMost(5, TimeUnit.SECONDS).until(() -> findPerspectivePolledService(this.node2icmp, \"RDU\").getPkg().getName(), is(\"foo1\"));\n+        await().atMost(5, TimeUnit.SECONDS).until(() -> findPerspectivePolledService(this.node2icmp, \"Fulda\").getPkg().getName(), is(\"foo1\"));\n+        await().atMost(5, TimeUnit.SECONDS).until(() -> findPerspectivePolledService(this.node1snmp, \"RDU\").getPkg().getName(), is(\"foo1\"));\n+        await().atMost(5, TimeUnit.SECONDS).until(() -> findPerspectivePolledService(this.node2snmp, \"RDU\").getPkg().getName(), is(\"foo1\"));\n \n         // New config, package ICMP and SNMP bound to two different packages\n         PollerConfigFactory.setPollerConfigFile(POLLER_CONFIG_2);\n         sendReloadPerspectivePollerdEvent();\n-        Assert.assertEquals(8, this.perspectivePollerd.scheduler.getJobKeys(GroupMatcher.anyGroup()).size());\n-        assertThat(findPerspectivePolledService(this.node1icmp, \"RDU\").getPkg().getName(), is(\"foo1\"));\n-        assertThat(findPerspectivePolledService(this.node1icmp, \"Fulda\").getPkg().getName(), is(\"foo1\"));\n-        assertThat(findPerspectivePolledService(this.node2icmp, \"RDU\").getPkg().getName(), is(\"foo1\"));\n-        assertThat(findPerspectivePolledService(this.node2icmp, \"Fulda\").getPkg().getName(), is(\"foo1\"));\n-        assertThat(findPerspectivePolledService(this.node1snmp, \"RDU\").getPkg().getName(), is(\"foo2\"));\n-        assertThat(findPerspectivePolledService(this.node2snmp, \"RDU\").getPkg().getName(), is(\"foo2\"));\n+        await().atMost(5, TimeUnit.SECONDS).until(() -> this.perspectivePollerd.scheduler.getJobKeys(GroupMatcher.anyGroup()).size(), is(8));\n+        await().atMost(5, TimeUnit.SECONDS).until(() -> findPerspectivePolledService(this.node1icmp, \"RDU\").getPkg().getName(), is(\"foo1\"));\n+        await().atMost(5, TimeUnit.SECONDS).until(() -> findPerspectivePolledService(this.node1icmp, \"Fulda\").getPkg().getName(), is(\"foo1\"));\n+        await().atMost(5, TimeUnit.SECONDS).until(() -> findPerspectivePolledService(this.node2icmp, \"RDU\").getPkg().getName(), is(\"foo1\"));\n+        await().atMost(5, TimeUnit.SECONDS).until(() -> findPerspectivePolledService(this.node2icmp, \"Fulda\").getPkg().getName(), is(\"foo1\"));\n+        await().atMost(5, TimeUnit.SECONDS).until(() -> findPerspectivePolledService(this.node1snmp, \"RDU\").getPkg().getName(), is(\"foo2\"));\n+        await().atMost(5, TimeUnit.SECONDS).until(() -> findPerspectivePolledService(this.node2snmp, \"RDU\").getPkg().getName(), is(\"foo2\"));\n     }\n \n     @Test\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "c12e898c493c388db257abbf9cf9e7a5a2ae6be4", "changed_code": [{"header": "diff --git a/features/perspectivepoller/src/test/java/org/opennms/netmgt/perspectivepoller/PerspectivePollerdIT.java b/features/perspectivepoller/src/test/java/org/opennms/netmgt/perspectivepoller/PerspectivePollerdIT.java\nindex 6d7a562cc47..1fac0324ab4 100644\n--- a/features/perspectivepoller/src/test/java/org/opennms/netmgt/perspectivepoller/PerspectivePollerdIT.java\n+++ b/features/perspectivepoller/src/test/java/org/opennms/netmgt/perspectivepoller/PerspectivePollerdIT.java\n", "chunk": "@@ -263,66 +263,91 @@ public class PerspectivePollerdIT implements InitializingBean, TemporaryDatabase\n         final InetAddress ipAddress = this.node1icmp.getIpAddress();\n         final String location = this.node1icmp.getIpInterface().getNode().getLocation().getLocationName();\n \n-        final PerspectivePolledService perspectivePolledService = findperspectivePolledService(this.node1icmp, \"RDU\");\n-        assertThat(this.databasePopulator.getOutageDao().currentOutageForServiceFromPerspective(this.node1icmp, this.databasePopulator.getLocRDU()), is(nullValue()));\n+        final PerspectivePolledService perspectivePolledService = findPerspectivePolledService(this.node1icmp, \"RDU\");\n+        await().atMost(5, TimeUnit.SECONDS).until(() -> this.databasePopulator.getOutageDao().currentOutageForServiceFromPerspective(this.node1icmp, this.databasePopulator.getLocRDU()), is(nullValue()));\n \n         this.eventIpcManager.getEventAnticipator().reset();\n         this.eventIpcManager.getEventAnticipator().anticipateEvent(new EventBuilder(EventConstants.PERSPECTIVE_NODE_REGAINED_SERVICE_UEI, \"PerspectivePollerd\").setNodeid(nodeId).setInterface(ipAddress).setService(serviceMatch.service.getName()).setParam(\"location\", location).getEvent());\n         this.perspectivePollerd.reportResult(perspectivePolledService, PollStatus.available());\n-        assertThat(this.databasePopulator.getOutageDao().currentOutageForServiceFromPerspective(this.node1icmp, this.databasePopulator.getLocRDU()), is(nullValue()));\n+        await().atMost(5, TimeUnit.SECONDS).until(() -> this.databasePopulator.getOutageDao().currentOutageForServiceFromPerspective(this.node1icmp, this.databasePopulator.getLocRDU()), is(nullValue()));\n         this.eventIpcManager.getEventAnticipator().verifyAnticipated();\n \n         this.eventIpcManager.getEventAnticipator().reset();\n         this.perspectivePollerd.reportResult(perspectivePolledService, PollStatus.available());\n-        assertThat(this.databasePopulator.getOutageDao().currentOutageForServiceFromPerspective(this.node1icmp, this.databasePopulator.getLocRDU()), is(nullValue()));\n+        await().atMost(5, TimeUnit.SECONDS).until(() -> this.databasePopulator.getOutageDao().currentOutageForServiceFromPerspective(this.node1icmp, this.databasePopulator.getLocRDU()), is(nullValue()));\n         this.eventIpcManager.getEventAnticipator().verifyAnticipated();\n \n         this.eventIpcManager.getEventAnticipator().reset();\n         this.eventIpcManager.getEventAnticipator().anticipateEvent(new EventBuilder(EventConstants.PERSPECTIVE_NODE_LOST_SERVICE_UEI, \"PerspectivePollerd\").setNodeid(nodeId).setInterface(ipAddress).setService(serviceMatch.service.getName()).setParam(\"location\", location).getEvent());\n         this.eventIpcManager.getEventAnticipator().anticipateEvent(new EventBuilder(EventConstants.OUTAGE_CREATED_EVENT_UEI, \"PerspectivePollerd\").setNodeid(nodeId).setInterface(ipAddress).setService(serviceMatch.service.getName()).setParam(\"location\", location).getEvent());\n         this.perspectivePollerd.reportResult(perspectivePolledService, PollStatus.unavailable(\"old reason\"));\n-        assertThat(this.databasePopulator.getOutageDao().currentOutageForServiceFromPerspective(this.node1icmp, this.databasePopulator.getLocRDU()), is(notNullValue()));\n+        await().atMost(5, TimeUnit.SECONDS).until(() -> this.databasePopulator.getOutageDao().currentOutageForServiceFromPerspective(this.node1icmp, this.databasePopulator.getLocRDU()), is(notNullValue()));\n         this.eventIpcManager.getEventAnticipator().verifyAnticipated();\n \n         this.eventIpcManager.getEventAnticipator().reset();\n         this.perspectivePollerd.reportResult(perspectivePolledService, PollStatus.unavailable(\"old reason\"));\n-        assertThat(this.databasePopulator.getOutageDao().currentOutageForServiceFromPerspective(this.node1icmp, this.databasePopulator.getLocRDU()), is(notNullValue()));\n+        await().atMost(5, TimeUnit.SECONDS).until(() -> this.databasePopulator.getOutageDao().currentOutageForServiceFromPerspective(this.node1icmp, this.databasePopulator.getLocRDU()), is(notNullValue()));\n         this.eventIpcManager.getEventAnticipator().verifyAnticipated();\n \n         this.eventIpcManager.getEventAnticipator().reset();\n         this.perspectivePollerd.reportResult(perspectivePolledService, PollStatus.unavailable(\"new reason\"));\n-        assertThat(this.databasePopulator.getOutageDao().currentOutageForServiceFromPerspective(this.node1icmp, this.databasePopulator.getLocRDU()), is(notNullValue()));\n+        await().atMost(5, TimeUnit.SECONDS).until(() -> this.databasePopulator.getOutageDao().currentOutageForServiceFromPerspective(this.node1icmp, this.databasePopulator.getLocRDU()), is(notNullValue()));\n         this.eventIpcManager.getEventAnticipator().verifyAnticipated();\n \n         this.eventIpcManager.getEventAnticipator().reset();\n         this.eventIpcManager.getEventAnticipator().anticipateEvent(new EventBuilder(EventConstants.PERSPECTIVE_NODE_REGAINED_SERVICE_UEI, \"PerspectivePollerd\").setNodeid(nodeId).setInterface(ipAddress).setService(serviceMatch.service.getName()).setParam(\"location\", location).getEvent());\n         this.eventIpcManager.getEventAnticipator().anticipateEvent(new EventBuilder(EventConstants.OUTAGE_RESOLVED_EVENT_UEI, \"PerspectivePollerd\").setNodeid(nodeId).setInterface(ipAddress).setService(serviceMatch.service.getName()).setParam(\"location\", location).getEvent());\n         this.perspectivePollerd.reportResult(perspectivePolledService, PollStatus.available());\n-        assertThat(this.databasePopulator.getOutageDao().currentOutageForServiceFromPerspective(this.node1icmp, this.databasePopulator.getLocRDU()), is(nullValue()));\n+        await().atMost(5, TimeUnit.SECONDS).until(() -> this.databasePopulator.getOutageDao().currentOutageForServiceFromPerspective(this.node1icmp, this.databasePopulator.getLocRDU()), is(nullValue()));\n         this.eventIpcManager.getEventAnticipator().verifyAnticipated();\n     }\n \n+    @Test\n+    public void testCloseOutageOnUnschedule() throws Exception {\n+        final Package pkg = PollerConfigFactory.getInstance().getPackage(\"foo1\");\n+        final Package.ServiceMatch serviceMatch = pkg.findService(\"ICMP\").get();\n+        final ServiceMonitor svcMon = PollerConfigFactory.getInstance().getServiceMonitor(\"ICMP\");\n+\n+        final int nodeId = this.node1icmp.getNodeId();\n+        final InetAddress ipAddress = this.node1icmp.getIpAddress();\n+        final String location = this.node1icmp.getIpInterface().getNode().getLocation().getLocationName();\n+\n+        final PerspectivePolledService perspectivePolledService = findPerspectivePolledService(this.node1icmp, \"RDU\");\n+        await().atMost(5, TimeUnit.SECONDS).until(() -> this.databasePopulator.getOutageDao().currentOutageForServiceFromPerspective(this.node1icmp, this.databasePopulator.getLocRDU()), is(nullValue()));\n+\n+        this.perspectivePollerd.reportResult(perspectivePolledService, PollStatus.unavailable(\"old reason\"));\n+        await().atMost(5, TimeUnit.SECONDS).until(() -> this.databasePopulator.getOutageDao().currentOutageForServiceFromPerspective(this.node1icmp, this.databasePopulator.getLocRDU()), is(notNullValue()));\n+\n+        this.databasePopulator.getApplicationDao().delete(this.app1);\n+        this.eventIpcManager.sendNowSync(new EventBuilder(EventConstants.APPLICATION_DELETED_EVENT_UEI, \"test\")\n+                                                 .addParam(PARM_APPLICATION_ID, this.app1.getId())\n+                                                 .addParam(PARM_APPLICATION_NAME, this.app1.getName())\n+                                                 .getEvent());\n+\n+        await().atMost(5, TimeUnit.SECONDS).until(() -> this.databasePopulator.getOutageDao().currentOutageForServiceFromPerspective(this.node1icmp, this.databasePopulator.getLocRDU()), is(nullValue()));\n+    }\n+\n     @Test\n     public void testDaemonReload() throws Exception {\n         // Initial config, ICMP and SNMP bound to single package\n         Assert.assertEquals(8, this.perspectivePollerd.scheduler.getJobKeys(GroupMatcher.anyGroup()).size());\n-        assertThat(findperspectivePolledService(this.node1icmp, \"RDU\").getPkg().getName(), is(\"foo1\"));\n-        assertThat(findperspectivePolledService(this.node1icmp, \"Fulda\").getPkg().getName(), is(\"foo1\"));\n-        assertThat(findperspectivePolledService(this.node2icmp, \"RDU\").getPkg().getName(), is(\"foo1\"));\n-        assertThat(findperspectivePolledService(this.node2icmp, \"Fulda\").getPkg().getName(), is(\"foo1\"));\n-        assertThat(findperspectivePolledService(this.node1snmp, \"RDU\").getPkg().getName(), is(\"foo1\"));\n-        assertThat(findperspectivePolledService(this.node2snmp, \"RDU\").getPkg().getName(), is(\"foo1\"));\n+        await().atMost(5, TimeUnit.SECONDS).until(() -> findPerspectivePolledService(this.node1icmp, \"RDU\").getPkg().getName(), is(\"foo1\"));\n+        await().atMost(5, TimeUnit.SECONDS).until(() -> findPerspectivePolledService(this.node1icmp, \"Fulda\").getPkg().getName(), is(\"foo1\"));\n+        await().atMost(5, TimeUnit.SECONDS).until(() -> findPerspectivePolledService(this.node2icmp, \"RDU\").getPkg().getName(), is(\"foo1\"));\n+        await().atMost(5, TimeUnit.SECONDS).until(() -> findPerspectivePolledService(this.node2icmp, \"Fulda\").getPkg().getName(), is(\"foo1\"));\n+        await().atMost(5, TimeUnit.SECONDS).until(() -> findPerspectivePolledService(this.node1snmp, \"RDU\").getPkg().getName(), is(\"foo1\"));\n+        await().atMost(5, TimeUnit.SECONDS).until(() -> findPerspectivePolledService(this.node2snmp, \"RDU\").getPkg().getName(), is(\"foo1\"));\n \n         // New config, package ICMP and SNMP bound to two different packages\n         PollerConfigFactory.setPollerConfigFile(POLLER_CONFIG_2);\n         sendReloadPerspectivePollerdEvent();\n-        Assert.assertEquals(8, this.perspectivePollerd.scheduler.getJobKeys(GroupMatcher.anyGroup()).size());\n-        assertThat(findperspectivePolledService(this.node1icmp, \"RDU\").getPkg().getName(), is(\"foo1\"));\n-        assertThat(findperspectivePolledService(this.node1icmp, \"Fulda\").getPkg().getName(), is(\"foo1\"));\n-        assertThat(findperspectivePolledService(this.node2icmp, \"RDU\").getPkg().getName(), is(\"foo1\"));\n-        assertThat(findperspectivePolledService(this.node2icmp, \"Fulda\").getPkg().getName(), is(\"foo1\"));\n-        assertThat(findperspectivePolledService(this.node1snmp, \"RDU\").getPkg().getName(), is(\"foo2\"));\n-        assertThat(findperspectivePolledService(this.node2snmp, \"RDU\").getPkg().getName(), is(\"foo2\"));\n+        await().atMost(5, TimeUnit.SECONDS).until(() -> this.perspectivePollerd.scheduler.getJobKeys(GroupMatcher.anyGroup()).size(), is(8));\n+        await().atMost(5, TimeUnit.SECONDS).until(() -> findPerspectivePolledService(this.node1icmp, \"RDU\").getPkg().getName(), is(\"foo1\"));\n+        await().atMost(5, TimeUnit.SECONDS).until(() -> findPerspectivePolledService(this.node1icmp, \"Fulda\").getPkg().getName(), is(\"foo1\"));\n+        await().atMost(5, TimeUnit.SECONDS).until(() -> findPerspectivePolledService(this.node2icmp, \"RDU\").getPkg().getName(), is(\"foo1\"));\n+        await().atMost(5, TimeUnit.SECONDS).until(() -> findPerspectivePolledService(this.node2icmp, \"Fulda\").getPkg().getName(), is(\"foo1\"));\n+        await().atMost(5, TimeUnit.SECONDS).until(() -> findPerspectivePolledService(this.node1snmp, \"RDU\").getPkg().getName(), is(\"foo2\"));\n+        await().atMost(5, TimeUnit.SECONDS).until(() -> findPerspectivePolledService(this.node2snmp, \"RDU\").getPkg().getName(), is(\"foo2\"));\n     }\n \n     @Test\n", "next_change": {"commit": "2f1edb048a5b3496aba66c2d3ced97a8cde09bf1", "changed_code": [{"header": "diff --git a/features/perspectivepoller/src/test/java/org/opennms/netmgt/perspectivepoller/PerspectivePollerdIT.java b/features/perspectivepoller/src/test/java/org/opennms/netmgt/perspectivepoller/PerspectivePollerdIT.java\nindex 1fac0324ab4..c54a01d172f 100644\n--- a/features/perspectivepoller/src/test/java/org/opennms/netmgt/perspectivepoller/PerspectivePollerdIT.java\n+++ b/features/perspectivepoller/src/test/java/org/opennms/netmgt/perspectivepoller/PerspectivePollerdIT.java\n", "chunk": "@@ -352,6 +353,8 @@ public class PerspectivePollerdIT implements InitializingBean, TemporaryDatabase\n \n     @Test\n     public void testAddService() throws Exception {\n+        this.perspectivePollerd.start();\n+\n         final NetworkBuilder builder = new NetworkBuilder();\n \n         // Add service with application\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "c12e898c493c388db257abbf9cf9e7a5a2ae6be4", "message": "Merge commit", "committedDate": null}, {"oid": "2f1edb048a5b3496aba66c2d3ced97a8cde09bf1", "committedDate": "2020-09-03 17:11:10 +0200", "message": "NMS-12889: Fix duplicated key for multi-app services"}, {"oid": "70c67465dd0d4a58783bf0f4ed6d670daa43a2bf", "committedDate": "2022-01-26 08:34:12 -0500", "message": "Features/cm phase1 backend (#4000)"}, {"oid": "fa50a760846cf4d429792d9821ff42b00a5915aa", "committedDate": "2022-02-03 11:28:16 -0500", "message": "mockito: remove easymock from features/perspectivepoller"}, {"oid": "e5c159a1ce2a9db5783ffb3898403e3220cd41e6", "committedDate": "2022-04-27 13:01:15 -0400", "message": "NMS-14155: Add support for SCV retrieval through  Metadata API (#4540)"}, {"oid": "c2845f7a0bc98f39f58a3f435675a42873226061", "committedDate": "2022-10-18 15:41:49 -0400", "message": "NMS-14839: Fix issues with MockDatabase using wrong systemID"}, {"oid": "5915c4d63cc15310a708f5c10f78d6b2e2603fa6", "committedDate": "2022-11-22 17:59:00 +0100", "message": "NMS-15001: Use service locator key in poller client"}, {"oid": "b9b69fba5731a0edde81063e93457b393b10814d", "committedDate": "2023-02-05 01:58:43 -0500", "message": "Move from com.jayway.awaitility (1.7.0) to org.awaitility (4.2.0)"}]}, {"oid": "c01ddbac560ddfb1d76cfd82188c53b42c165e22", "url": "https://github.com/OpenNMS/opennms/commit/c01ddbac560ddfb1d76cfd82188c53b42c165e22", "message": "NMS-12874: Renamed RemotePoller to PerspectivePoller", "committedDate": "2020-09-01T15:27:09Z", "type": "commit"}, {"oid": "0e119dad1135d969be71b33d8ba7c530b1d40a79", "url": "https://github.com/OpenNMS/opennms/commit/0e119dad1135d969be71b33d8ba7c530b1d40a79", "message": "Merge remote-tracking branch 'origin/features/rpwm' into jira/NMS-12874", "committedDate": "2020-09-01T20:17:51Z", "type": "commit"}, {"oid": "f41e70cbb9fd86a98a9edb176b519307339fb241", "url": "https://github.com/OpenNMS/opennms/commit/f41e70cbb9fd86a98a9edb176b519307339fb241", "message": "NSM-12874: Fix tests", "committedDate": "2020-09-01T20:18:22Z", "type": "commit"}, {"oid": "f41e70cbb9fd86a98a9edb176b519307339fb241", "url": "https://github.com/OpenNMS/opennms/commit/f41e70cbb9fd86a98a9edb176b519307339fb241", "message": "NSM-12874: Fix tests", "committedDate": "2020-09-01T20:18:22Z", "type": "forcePushed"}, {"oid": "b7bd4a3cabc21cbd274897bd98264082215b16b4", "url": "https://github.com/OpenNMS/opennms/commit/b7bd4a3cabc21cbd274897bd98264082215b16b4", "message": "fixup! NSM-12874: Fix tests", "committedDate": "2020-09-02T08:17:40Z", "type": "commit"}, {"oid": "45c985d98aeff5a6725748d5308934be9f35a762", "url": "https://github.com/OpenNMS/opennms/commit/45c985d98aeff5a6725748d5308934be9f35a762", "message": "fixup! NSM-12874: Fix tests", "committedDate": "2020-09-02T11:25:12Z", "type": "commit"}]}