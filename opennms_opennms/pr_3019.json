{"pr_number": 3019, "pr_title": "NMS-12730: Meta-data tag enhancements to Time Series Storage API", "pr_author": "patrick-schweizer", "pr_createdAt": "2020-05-24T16:37:45Z", "pr_url": "https://github.com/OpenNMS/opennms/pull/3019", "timeline": [{"oid": "29ed20e23d9c09b9c3ee50355e21c02e23fd40bd", "url": "https://github.com/OpenNMS/opennms/commit/29ed20e23d9c09b9c3ee50355e21c02e23fd40bd", "message": "NMS-12730 Meta-data tag enhancements to Time Series Storage API: first version", "committedDate": "2020-05-24T16:27:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY1NDc2NQ==", "url": "https://github.com/OpenNMS/opennms/pull/3019#discussion_r429654765", "body": "Tags are unique by the combination of key and value. Thus we could have category tags like:\r\nTag(key=\"category\", value=\"myFirstCategory\"), Tag(key=\"category\", value=\"mySecondCategory\") etc.\r\nThe problem here is that we store the future tags as key value pairs in a Map<String, String>. That disallows us to store the tags with the same key since they have to be unique. I see two ways out of that:\r\n\r\n1. make the keys unique like: Tag(key=\"category_1\", value=\"myFirstCategory\"), Tag(key=\"category_2\", value=\"mySecondCategory\")\r\n2. Enhance (by our own class) or substitute org.opennms.newts.api.Resource to store a set of Tags instead a Map of Strings\r\n\r\nThe first is the easier way (currently implemented) the second one more work but I guess the better way. I am not sure how we use the category tags later so it's hard for me to make a call here. @j-white What is your take?", "bodyText": "Tags are unique by the combination of key and value. Thus we could have category tags like:\nTag(key=\"category\", value=\"myFirstCategory\"), Tag(key=\"category\", value=\"mySecondCategory\") etc.\nThe problem here is that we store the future tags as key value pairs in a Map<String, String>. That disallows us to store the tags with the same key since they have to be unique. I see two ways out of that:\n\nmake the keys unique like: Tag(key=\"category_1\", value=\"myFirstCategory\"), Tag(key=\"category_2\", value=\"mySecondCategory\")\nEnhance (by our own class) or substitute org.opennms.newts.api.Resource to store a set of Tags instead a Map of Strings\n\nThe first is the easier way (currently implemented) the second one more work but I guess the better way. I am not sure how we use the category tags later so it's hard for me to make a call here. @j-white What is your take?", "bodyHTML": "<p dir=\"auto\">Tags are unique by the combination of key and value. Thus we could have category tags like:<br>\nTag(key=\"category\", value=\"myFirstCategory\"), Tag(key=\"category\", value=\"mySecondCategory\") etc.<br>\nThe problem here is that we store the future tags as key value pairs in a Map&lt;String, String&gt;. That disallows us to store the tags with the same key since they have to be unique. I see two ways out of that:</p>\n<ol dir=\"auto\">\n<li>make the keys unique like: Tag(key=\"category_1\", value=\"myFirstCategory\"), Tag(key=\"category_2\", value=\"mySecondCategory\")</li>\n<li>Enhance (by our own class) or substitute org.opennms.newts.api.Resource to store a set of Tags instead a Map of Strings</li>\n</ol>\n<p dir=\"auto\">The first is the easier way (currently implemented) the second one more work but I guess the better way. I am not sure how we use the category tags later so it's hard for me to make a call here. <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/j-white/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/j-white\">@j-white</a> What is your take?</p>", "author": "patrick-schweizer", "createdAt": "2020-05-24T16:49:54Z", "path": "features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/persistence/MetaTagDataLoader.java", "diffHunk": "@@ -0,0 +1,220 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2006-2015 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2015 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+\n+package org.opennms.netmgt.timeseries.integration.persistence;\n+\n+import java.net.InetAddress;\n+import java.net.UnknownHostException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.function.Supplier;\n+\n+import javax.inject.Inject;\n+\n+import org.opennms.netmgt.collection.api.CollectionResource;\n+import org.opennms.netmgt.dao.api.NodeDao;\n+import org.opennms.netmgt.dao.api.SessionUtils;\n+import org.opennms.netmgt.model.OnmsAssetRecord;\n+import org.opennms.netmgt.model.OnmsCategory;\n+import org.opennms.netmgt.model.OnmsNode;\n+import org.opennms.netmgt.model.ResourceTypeUtils;\n+import org.opennms.netmgt.model.monitoringLocations.OnmsMonitoringLocation;\n+import org.opennms.netmgt.timeseries.integration.MetaTagConfiguration;\n+import org.opennms.netmgt.timeseries.integration.MetaTagConfiguration.AssetTagKey;\n+import org.opennms.netmgt.timeseries.integration.MetaTagConfiguration.MetaTagKey;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.common.base.Strings;\n+import com.google.common.cache.CacheLoader;\n+import com.google.common.collect.Maps;\n+\n+public class MetaTagDataLoader extends CacheLoader<CollectionResource, Map<String, String>> {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(MetaTagDataLoader.class);\n+\n+    private final NodeDao nodeDao;\n+    private final SessionUtils sessionUtils;\n+    private MetaTagConfiguration config;\n+\n+    @Inject\n+    public MetaTagDataLoader(final NodeDao nodeDao, final SessionUtils sessionUtils) {\n+        this.nodeDao = nodeDao;\n+        this.sessionUtils = sessionUtils;\n+        setConfig(new MetaTagConfiguration(Maps.fromProperties(System.getProperties())));\n+    }\n+\n+    public void setConfig(final MetaTagConfiguration config) {\n+        this.config = config;\n+    }\n+\n+    public Map<String, String> load(final CollectionResource resource) {\n+        return sessionUtils.withReadOnlyTransaction(() -> {\n+            final Map<String, String> tags = new HashMap<>();\n+            addTag(tags, MetaTagKey.resourceLabel, () -> Optional.ofNullable(resource.getInterfaceLabel()).orElse(null));\n+\n+            if (resource.getResourceTypeName().equals(CollectionResource.RESOURCE_TYPE_NODE)) {\n+                String nodeCriteria = getNodeCriteriaFromResource(resource);\n+                mapNode(tags, nodeCriteria);\n+            } else if (resource.getResourceTypeName().equals(CollectionResource.RESOURCE_TYPE_IF)) {\n+\n+                String nodeCriteria = getNodeCriteriaFromResource(resource);\n+                if (!Strings.isNullOrEmpty(nodeCriteria)) {\n+                    mapNode(tags, nodeCriteria);\n+                }\n+            } else if (resource.getResourceTypeName().equals(CollectionResource.RESOURCE_TYPE_LATENCY)) {\n+                mapResponseTimeResource(resource, tags);\n+            } else {\n+                String nodeCriteria = getNodeCriteriaFromResource(resource);\n+                if (!Strings.isNullOrEmpty(nodeCriteria)) {\n+                    mapNode(tags, nodeCriteria);\n+                }\n+            }\n+\n+            return tags;\n+        });\n+    }\n+\n+    private void mapNode(final Map<String, String> tags, final String nodeCriteria) {\n+        Optional<OnmsNode> node = getNode(nodeCriteria);\n+        addTag(tags, MetaTagKey.nodeCriteria, () -> nodeCriteria);\n+        addTag(tags, MetaTagKey.nodeLabel, () -> node.map(OnmsNode::getLabel).orElse(null));\n+        addTag(tags, MetaTagKey.location, () -> node.map(OnmsNode::getLocation).map(OnmsMonitoringLocation::getLocationName).orElse(null));\n+        addTag(tags, MetaTagKey.sysObjectID, () -> node.map(OnmsNode::getSysObjectId).orElse(null));\n+        addTag(tags, MetaTagKey.foreignSource, () -> node.map(OnmsNode::getForeignSource).orElse(null));\n+        addTag(tags, MetaTagKey.foreignId, () -> node.map(OnmsNode::getForeignId).orElse(null));\n+        // TODO Patrick: map rest of attributes\n+\n+        // categories\n+        if(node.isPresent()) {\n+            AtomicInteger n = new AtomicInteger(1);\n+            // Tags are only unique by key and value\n+            node.get().getCategories().stream()\n+                    .map(OnmsCategory::getName)\n+                    .filter(config::isCategoryEnabled)\n+                    // TODO: Patrick: is this acceptable? Or would we rather create Tags instead of a HashMap?", "originalCommit": "29ed20e23d9c09b9c3ee50355e21c02e23fd40bd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTk2MTM5OA==", "url": "https://github.com/OpenNMS/opennms/pull/3019#discussion_r429961398", "bodyText": "I was thinking we could do something like this:\nfor(String categoryName : categoryNames) {\n  if (!enabledCategoryNames.contains(categoryName)) {\n      continue;\n   }\n  addTag(tags, \"cat\" + categoryName, categoryName);\n}", "author": "j-white", "createdAt": "2020-05-25T14:22:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY1NDc2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA3Njk4Ng==", "url": "https://github.com/OpenNMS/opennms/pull/3019#discussion_r430076986", "bodyText": "\ud83d\udc4d fixed", "author": "patrick-schweizer", "createdAt": "2020-05-25T21:19:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY1NDc2NQ=="}], "type": "inlineReview", "revised_code": {"commit": "be46a55a9d69682d953bac0dcb85be0c1af410d4", "changed_code": [{"header": "diff --git a/features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/persistence/MetaTagDataLoader.java b/features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/persistence/MetaTagDataLoader.java\nindex cf6eb86d8c2..c94af03f3a6 100644\n--- a/features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/persistence/MetaTagDataLoader.java\n+++ b/features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/persistence/MetaTagDataLoader.java\n", "chunk": "@@ -120,34 +120,96 @@ public class MetaTagDataLoader extends CacheLoader<CollectionResource, Map<Strin\n             node.get().getCategories().stream()\n                     .map(OnmsCategory::getName)\n                     .filter(config::isCategoryEnabled)\n-                    // TODO: Patrick: is this acceptable? Or would we rather create Tags instead of a HashMap?\n-                    .forEach(catName -> tags.put(\"category_\" + n.getAndIncrement(), catName));\n+                    .forEach(catName -> tags.put(\"cat_\" + catName , catName));\n         }\n \n         // assets\n         if(node.map(OnmsNode::getAssetRecord).isPresent()) {\n             mapAssets(tags, node.get().getAssetRecord());\n         }\n+\n+        // Meta-Data DSL\n+        // TODO Patrick: how will that work?\n     }\n \n     private void mapAssets(final Map<String, String> tags, final OnmsAssetRecord assets) {\n         Objects.requireNonNull(assets);\n-        addTag(tags, AssetTagKey.additionalHardware, assets::getAdditionalhardware);\n-        addTag(tags, AssetTagKey.admin, assets::getAdmin);\n-        addTag(tags, AssetTagKey.assetNumber, assets::getAssetNumber);\n-        // TODO: Patrick add rest of assets\n+\n+        addTag(tags, AssetTagKey.id, Optional.ofNullable(assets.getId()).map(Object::toString).orElse(null));\n+        addTag(tags, AssetTagKey.category, assets.getCategory());\n+        addTag(tags, AssetTagKey.manufacturer, assets.getManufacturer());\n+        addTag(tags, AssetTagKey.vendor, assets.getVendor());\n+        addTag(tags, AssetTagKey.modelNumber, assets.getModelNumber());\n+        addTag(tags, AssetTagKey.serialNumber, assets.getSerialNumber());\n+        addTag(tags, AssetTagKey.description, assets.getDescription());\n+        addTag(tags, AssetTagKey.circuitId, assets.getCircuitId());\n+        addTag(tags, AssetTagKey.assetNumber, assets.getAssetNumber());\n+        addTag(tags, AssetTagKey.operatingSystem, assets.getOperatingSystem());\n+        addTag(tags, AssetTagKey.rack, assets.getRack());\n+        addTag(tags, AssetTagKey.slot, assets.getSlot());\n+        addTag(tags, AssetTagKey.port, assets.getPort());\n+        addTag(tags, AssetTagKey.region, assets.getRegion());\n+        addTag(tags, AssetTagKey.division, assets.getDivision());\n+        addTag(tags, AssetTagKey.department, assets.getDepartment());\n+        addTag(tags, AssetTagKey.building, assets.getBuilding());\n+        addTag(tags, AssetTagKey.floor, assets.getFloor());\n+        addTag(tags, AssetTagKey.room, assets.getRoom());\n+        addTag(tags, AssetTagKey.vendorPhone, assets.getVendorPhone());\n+        addTag(tags, AssetTagKey.vendorFax, assets.getVendorFax());\n+        addTag(tags, AssetTagKey.vendorAssetNumber, assets.getVendorAssetNumber());\n+        addTag(tags, AssetTagKey.username, assets.getUsername());\n+        addTag(tags, AssetTagKey.password, assets.getPassword());\n+        addTag(tags, AssetTagKey.enable, assets.getEnable());\n+        addTag(tags, AssetTagKey.connection, assets.getConnection());\n+        addTag(tags, AssetTagKey.autoenable, assets.getAutoenable());\n+        addTag(tags, AssetTagKey.lastModifiedBy, assets.getLastModifiedBy());\n+        addTag(tags, AssetTagKey.lastModifiedDate, Optional.ofNullable(assets.getLastModifiedDate()).map(Date::toString).orElse(null));\n+        addTag(tags, AssetTagKey.dateInstalled, assets.getDateInstalled());\n+        addTag(tags, AssetTagKey.lease, assets.getLease());\n+        addTag(tags, AssetTagKey.leaseExpires, assets.getLeaseExpires());\n+        addTag(tags, AssetTagKey.supportPhone, assets.getSupportPhone());\n+        addTag(tags, AssetTagKey.maintcontract, assets.getMaintcontract());\n+        addTag(tags, AssetTagKey.maintContractExpiration, assets.getMaintContractExpiration());\n+        addTag(tags, AssetTagKey.displayCategory, assets.getDisplayCategory());\n+        addTag(tags, AssetTagKey.notifyCategory, assets.getNotifyCategory());\n+        addTag(tags, AssetTagKey.pollerCategory, assets.getPollerCategory());\n+        addTag(tags, AssetTagKey.thresholdCategory, assets.getThresholdCategory());\n+        addTag(tags, AssetTagKey.comment, assets.getComment());\n+        addTag(tags, AssetTagKey.cpu, assets.getCpu());\n+        addTag(tags, AssetTagKey.ram, assets.getRam());\n+        addTag(tags, AssetTagKey.storagectrl, assets.getStoragectrl());\n+        addTag(tags, AssetTagKey.hdd1, assets.getHdd1());\n+        addTag(tags, AssetTagKey.hdd2, assets.getHdd2());\n+        addTag(tags, AssetTagKey.hdd3, assets.getHdd3());\n+        addTag(tags, AssetTagKey.hdd4, assets.getHdd4());\n+        addTag(tags, AssetTagKey.hdd5, assets.getHdd5());\n+        addTag(tags, AssetTagKey.hdd6, assets.getHdd6());\n+        addTag(tags, AssetTagKey.numpowersupplies, assets.getNumpowersupplies());\n+        addTag(tags, AssetTagKey.inputpower, assets.getInputpower());\n+        addTag(tags, AssetTagKey.additionalhardware, assets.getAdditionalhardware());\n+        addTag(tags, AssetTagKey.admin, assets.getAdmin());\n+        addTag(tags, AssetTagKey.snmpcommunity, assets.getSnmpcommunity());\n+        addTag(tags, AssetTagKey.rackunitheight, assets.getRackunitheight());\n+        addTag(tags, AssetTagKey.managedObjectType, assets.getManagedObjectType());\n+        addTag(tags, AssetTagKey.managedObjectInstance, assets.getManagedObjectInstance());\n+        addTag(tags, AssetTagKey.geolocation, Optional.ofNullable(assets.getGeolocation()).map(Object::toString).orElse(null));\n+        addTag(tags, AssetTagKey.vmwareManagedObjectId, assets.getVmwareManagedObjectId());\n+        addTag(tags, AssetTagKey.vmwareManagedEntityType, assets.getVmwareManagedEntityType());\n+        addTag(tags, AssetTagKey.vmwareManagementServer, assets.getVmwareManagementServer());\n+        addTag(tags, AssetTagKey.vmwareTopologyInfo, assets.getVmwareTopologyInfo());\n+        addTag(tags, AssetTagKey.vmwareState, assets.getVmwareState());\n     }\n \n-    private void addTag(final Map<String, String> tags, final MetaTagKey key, final Supplier<String> valueSupplier){\n-        Optional.ofNullable(valueSupplier.get())\n-                .filter((value) -> this.config.isEnabled(key))\n-                .ifPresent((value) -> tags.put(key.name(), value));\n+    private void addTag(final Map<String, String> tags, final MetaTagKey key, final String value) {\n+        Optional.ofNullable(value)\n+                .filter((v) -> this.config.isEnabled(key))\n+                .ifPresent((v) -> tags.put(key.name(), v));\n     }\n \n-    private void addTag(final Map<String, String> tags, final AssetTagKey key, final Supplier<String> valueSupplier){\n-        Optional.ofNullable(valueSupplier.get())\n-                .filter((value) -> this.config.isEnabled(key))\n-                .ifPresent((value) -> tags.put(key.name(), value));\n+    private void addTag(final Map<String, String> tags, final AssetTagKey key, final String value){\n+        Optional.ofNullable(value)\n+                .filter((v) -> this.config.isEnabled(key))\n+                .ifPresent((v) -> tags.put(key.name(), v));\n     }\n \n     private Optional<OnmsNode> getNode(String nodeCriteria) {\n", "next_change": {"commit": "87c3163bbd5405f2f2fe297065420f5631058e98", "changed_code": [{"header": "diff --git a/features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/persistence/MetaTagDataLoader.java b/features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/persistence/MetaTagDataLoader.java\nindex c94af03f3a6..f43defc50b3 100644\n--- a/features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/persistence/MetaTagDataLoader.java\n+++ b/features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/persistence/MetaTagDataLoader.java\n", "chunk": "@@ -78,147 +82,74 @@ public class MetaTagDataLoader extends CacheLoader<CollectionResource, Map<Strin\n \n     public Map<String, String> load(final CollectionResource resource) {\n         return sessionUtils.withReadOnlyTransaction(() -> {\n+\n             final Map<String, String> tags = new HashMap<>();\n-            addTag(tags, MetaTagKey.resourceLabel, Optional.ofNullable(resource.getInterfaceLabel()).orElse(null));\n+            List<Scope> scopes = new ArrayList<>();\n+\n+            // resource related scope\n+            scopes.add(getScopeForResource(resource));\n+\n+            // node related scopes\n+            String nodeCriteria = getNodeCriteriaFromResource(resource);\n+            Optional<OnmsNode> nodeOptional = getNode(nodeCriteria);\n+            if(nodeOptional.isPresent()) {\n+                OnmsNode node = nodeOptional.get();\n+                String interfaceAddress = null; // TODO Patrick\n+                String serviceName = null; // TODO Patrick\n+                scopes.add(this.entityScopeProvider.getScopeForNode(node.getId()));\n+                scopes.add(this.entityScopeProvider.getScopeForInterface(node.getId(), interfaceAddress));\n+                scopes.add(this.entityScopeProvider.getScopeForService(node.getId(), InetAddressUtils.getInetAddress(interfaceAddress), serviceName));\n+            }\n+\n+            if (resource.getResourceTypeName().equals(CollectionResource.RESOURCE_TYPE_LATENCY)) {\n+                // mapResponseTimeResource(resource, tags);\n+                // TODO: Patrick: check with @Jesse how we get the data\n+            }\n+\n+            // create tags for scopes\n+            Scope scope = new FallbackScope(scopes);\n+            Map<String, String> configuredMetaTags = this.config.getConfiguredMetaTags();\n+            for(Map.Entry<String, String> entry: configuredMetaTags.entrySet()) {\n+                final String value = Interpolator.interpolate(entry.getValue(), scope);\n+                tags.put(entry.getKey(), value);\n+            }\n \n-            if (resource.getResourceTypeName().equals(CollectionResource.RESOURCE_TYPE_NODE)) {\n-                String nodeCriteria = getNodeCriteriaFromResource(resource);\n-                mapNode(tags, nodeCriteria);\n-            } else if (resource.getResourceTypeName().equals(CollectionResource.RESOURCE_TYPE_IF)) {\n-                String nodeCriteria = getNodeCriteriaFromResource(resource);\n-                if (!Strings.isNullOrEmpty(nodeCriteria)) {\n-                    mapNode(tags, nodeCriteria);\n-                }\n-                addTag(tags, MetaTagKey.ifDescr, resource.getInterfaceLabel()); // TODO: Patrick: is that correct?\n-                // addTag(tags, MetaTagKey.ifAlias, ); // TODO: Patrick: from where do we get that attribute?\n-            } else if (resource.getResourceTypeName().equals(CollectionResource.RESOURCE_TYPE_LATENCY)) {\n-                mapResponseTimeResource(resource, tags);\n-            } else {\n-                String nodeCriteria = getNodeCriteriaFromResource(resource);\n-                if (!Strings.isNullOrEmpty(nodeCriteria)) {\n-                    mapNode(tags, nodeCriteria);\n-                }\n+            // create tags for categories\n+            if(nodeOptional.isPresent()) {\n+                mapCategories(tags, nodeOptional.get());\n             }\n \n             return tags;\n         });\n     }\n \n-    private void mapNode(final Map<String, String> tags, final String nodeCriteria) {\n-        Optional<OnmsNode> node = getNode(nodeCriteria);\n-        addTag(tags, MetaTagKey.nodeLabel, node.map(OnmsNode::getLabel).orElse(null));\n-        addTag(tags, MetaTagKey.location, node.map(OnmsNode::getLocation).map(OnmsMonitoringLocation::getLocationName).orElse(null));\n-        addTag(tags, MetaTagKey.sysObjectID, node.map(OnmsNode::getSysObjectId).orElse(null));\n-        addTag(tags, MetaTagKey.foreignSource, node.map(OnmsNode::getForeignSource).orElse(null));\n-        addTag(tags, MetaTagKey.foreignId, node.map(OnmsNode::getForeignId).orElse(null));\n-        addTag(tags, MetaTagKey.nodeCriteria, nodeCriteria);\n-\n-        // categories\n-        if(node.isPresent()) {\n-            AtomicInteger n = new AtomicInteger(1);\n-            // Tags are only unique by key and value\n-            node.get().getCategories().stream()\n+    private void mapCategories(final Map<String, String> tags, final OnmsNode node) {\n+        Objects.requireNonNull(node);\n+        node.getCategories().stream()\n                     .map(OnmsCategory::getName)\n                     .filter(config::isCategoryEnabled)\n                     .forEach(catName -> tags.put(\"cat_\" + catName , catName));\n-        }\n-\n-        // assets\n-        if(node.map(OnmsNode::getAssetRecord).isPresent()) {\n-            mapAssets(tags, node.get().getAssetRecord());\n-        }\n-\n-        // Meta-Data DSL\n-        // TODO Patrick: how will that work?\n     }\n \n-    private void mapAssets(final Map<String, String> tags, final OnmsAssetRecord assets) {\n-        Objects.requireNonNull(assets);\n-\n-        addTag(tags, AssetTagKey.id, Optional.ofNullable(assets.getId()).map(Object::toString).orElse(null));\n-        addTag(tags, AssetTagKey.category, assets.getCategory());\n-        addTag(tags, AssetTagKey.manufacturer, assets.getManufacturer());\n-        addTag(tags, AssetTagKey.vendor, assets.getVendor());\n-        addTag(tags, AssetTagKey.modelNumber, assets.getModelNumber());\n-        addTag(tags, AssetTagKey.serialNumber, assets.getSerialNumber());\n-        addTag(tags, AssetTagKey.description, assets.getDescription());\n-        addTag(tags, AssetTagKey.circuitId, assets.getCircuitId());\n-        addTag(tags, AssetTagKey.assetNumber, assets.getAssetNumber());\n-        addTag(tags, AssetTagKey.operatingSystem, assets.getOperatingSystem());\n-        addTag(tags, AssetTagKey.rack, assets.getRack());\n-        addTag(tags, AssetTagKey.slot, assets.getSlot());\n-        addTag(tags, AssetTagKey.port, assets.getPort());\n-        addTag(tags, AssetTagKey.region, assets.getRegion());\n-        addTag(tags, AssetTagKey.division, assets.getDivision());\n-        addTag(tags, AssetTagKey.department, assets.getDepartment());\n-        addTag(tags, AssetTagKey.building, assets.getBuilding());\n-        addTag(tags, AssetTagKey.floor, assets.getFloor());\n-        addTag(tags, AssetTagKey.room, assets.getRoom());\n-        addTag(tags, AssetTagKey.vendorPhone, assets.getVendorPhone());\n-        addTag(tags, AssetTagKey.vendorFax, assets.getVendorFax());\n-        addTag(tags, AssetTagKey.vendorAssetNumber, assets.getVendorAssetNumber());\n-        addTag(tags, AssetTagKey.username, assets.getUsername());\n-        addTag(tags, AssetTagKey.password, assets.getPassword());\n-        addTag(tags, AssetTagKey.enable, assets.getEnable());\n-        addTag(tags, AssetTagKey.connection, assets.getConnection());\n-        addTag(tags, AssetTagKey.autoenable, assets.getAutoenable());\n-        addTag(tags, AssetTagKey.lastModifiedBy, assets.getLastModifiedBy());\n-        addTag(tags, AssetTagKey.lastModifiedDate, Optional.ofNullable(assets.getLastModifiedDate()).map(Date::toString).orElse(null));\n-        addTag(tags, AssetTagKey.dateInstalled, assets.getDateInstalled());\n-        addTag(tags, AssetTagKey.lease, assets.getLease());\n-        addTag(tags, AssetTagKey.leaseExpires, assets.getLeaseExpires());\n-        addTag(tags, AssetTagKey.supportPhone, assets.getSupportPhone());\n-        addTag(tags, AssetTagKey.maintcontract, assets.getMaintcontract());\n-        addTag(tags, AssetTagKey.maintContractExpiration, assets.getMaintContractExpiration());\n-        addTag(tags, AssetTagKey.displayCategory, assets.getDisplayCategory());\n-        addTag(tags, AssetTagKey.notifyCategory, assets.getNotifyCategory());\n-        addTag(tags, AssetTagKey.pollerCategory, assets.getPollerCategory());\n-        addTag(tags, AssetTagKey.thresholdCategory, assets.getThresholdCategory());\n-        addTag(tags, AssetTagKey.comment, assets.getComment());\n-        addTag(tags, AssetTagKey.cpu, assets.getCpu());\n-        addTag(tags, AssetTagKey.ram, assets.getRam());\n-        addTag(tags, AssetTagKey.storagectrl, assets.getStoragectrl());\n-        addTag(tags, AssetTagKey.hdd1, assets.getHdd1());\n-        addTag(tags, AssetTagKey.hdd2, assets.getHdd2());\n-        addTag(tags, AssetTagKey.hdd3, assets.getHdd3());\n-        addTag(tags, AssetTagKey.hdd4, assets.getHdd4());\n-        addTag(tags, AssetTagKey.hdd5, assets.getHdd5());\n-        addTag(tags, AssetTagKey.hdd6, assets.getHdd6());\n-        addTag(tags, AssetTagKey.numpowersupplies, assets.getNumpowersupplies());\n-        addTag(tags, AssetTagKey.inputpower, assets.getInputpower());\n-        addTag(tags, AssetTagKey.additionalhardware, assets.getAdditionalhardware());\n-        addTag(tags, AssetTagKey.admin, assets.getAdmin());\n-        addTag(tags, AssetTagKey.snmpcommunity, assets.getSnmpcommunity());\n-        addTag(tags, AssetTagKey.rackunitheight, assets.getRackunitheight());\n-        addTag(tags, AssetTagKey.managedObjectType, assets.getManagedObjectType());\n-        addTag(tags, AssetTagKey.managedObjectInstance, assets.getManagedObjectInstance());\n-        addTag(tags, AssetTagKey.geolocation, Optional.ofNullable(assets.getGeolocation()).map(Object::toString).orElse(null));\n-        addTag(tags, AssetTagKey.vmwareManagedObjectId, assets.getVmwareManagedObjectId());\n-        addTag(tags, AssetTagKey.vmwareManagedEntityType, assets.getVmwareManagedEntityType());\n-        addTag(tags, AssetTagKey.vmwareManagementServer, assets.getVmwareManagementServer());\n-        addTag(tags, AssetTagKey.vmwareTopologyInfo, assets.getVmwareTopologyInfo());\n-        addTag(tags, AssetTagKey.vmwareState, assets.getVmwareState());\n-    }\n-\n-    private void addTag(final Map<String, String> tags, final MetaTagKey key, final String value) {\n-        Optional.ofNullable(value)\n-                .filter((v) -> this.config.isEnabled(key))\n-                .ifPresent((v) -> tags.put(key.name(), v));\n-    }\n-\n-    private void addTag(final Map<String, String> tags, final AssetTagKey key, final String value){\n-        Optional.ofNullable(value)\n-                .filter((v) -> this.config.isEnabled(key))\n-                .ifPresent((v) -> tags.put(key.name(), v));\n+    public Scope getScopeForResource(final CollectionResource resource) {\n+        if (resource == null) {\n+            return EmptyScope.EMPTY;\n+        }\n+        return new ObjectScope<>(resource)\n+                .map(\"resource\", \"criteria\", (r) -> Optional.ofNullable(getNodeCriteriaFromResource(resource)))\n+                .map(\"resource\", \"label\", (r) -> Optional.ofNullable(r.getInterfaceLabel()));\n     }\n \n     private Optional<OnmsNode> getNode(String nodeCriteria) {\n-            try {\n-                return Optional.ofNullable(nodeDao.get(nodeCriteria));\n-            } catch (Exception e) {\n-                LOG.error(\"error while trying to match node from {}\", nodeCriteria);\n-            }\n+        if (nodeCriteria == null || nodeCriteria.trim().isEmpty()) {\n             return Optional.empty();\n+        }\n+        try {\n+            return Optional.ofNullable(nodeDao.get(nodeCriteria));\n+        } catch (Exception e) {\n+            LOG.error(\"error while trying to match node from {}\", nodeCriteria);\n+        }\n+        return Optional.empty();\n     }\n \n     private String getNodeCriteriaFromResource(CollectionResource resource) {\n", "next_change": {"commit": "085d523f8fda8767ddf4c9aca130fdf38731ff70", "changed_code": [{"header": "diff --git a/features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/persistence/MetaTagDataLoader.java b/features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/persistence/MetaTagDataLoader.java\nindex f43defc50b3..14d63c36d5b 100644\n--- a/features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/persistence/MetaTagDataLoader.java\n+++ b/features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/persistence/MetaTagDataLoader.java\n", "chunk": "@@ -147,7 +149,7 @@ public class MetaTagDataLoader extends CacheLoader<CollectionResource, Map<Strin\n         try {\n             return Optional.ofNullable(nodeDao.get(nodeCriteria));\n         } catch (Exception e) {\n-            LOG.error(\"error while trying to match node from {}\", nodeCriteria);\n+            LOG.error(\"Error while trying to load node for criteria: {}. No node will be returned.\", nodeCriteria, e);\n         }\n         return Optional.empty();\n     }\n", "next_change": {"commit": "ddd150165e98160a3424db4c792a83fe059db55a", "changed_code": [{"header": "diff --git a/features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/persistence/MetaTagDataLoader.java b/features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/persistence/MetaTagDataLoader.java\nindex 14d63c36d5b..4cfdbbcdeb2 100644\n--- a/features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/persistence/MetaTagDataLoader.java\n+++ b/features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/persistence/MetaTagDataLoader.java\n", "chunk": "@@ -149,7 +135,7 @@ public class MetaTagDataLoader extends CacheLoader<CollectionResource, Map<Strin\n         try {\n             return Optional.ofNullable(nodeDao.get(nodeCriteria));\n         } catch (Exception e) {\n-            LOG.error(\"Error while trying to load node for criteria: {}. No node will be returned.\", nodeCriteria, e);\n+            LOG.error(\"error while trying to match node from {}\", nodeCriteria);\n         }\n         return Optional.empty();\n     }\n", "next_change": {"commit": "6ddcf6cc3f29ac1a0cd01f210eee14490c8cd27a", "changed_code": [{"header": "diff --git a/features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/persistence/MetaTagDataLoader.java b/features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/persistence/MetaTagDataLoader.java\nindex 4cfdbbcdeb2..89e79492eb1 100644\n--- a/features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/persistence/MetaTagDataLoader.java\n+++ b/features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/persistence/MetaTagDataLoader.java\n", "chunk": "@@ -135,7 +135,7 @@ public class MetaTagDataLoader extends CacheLoader<CollectionResource, Map<Strin\n         try {\n             return Optional.ofNullable(nodeDao.get(nodeCriteria));\n         } catch (Exception e) {\n-            LOG.error(\"error while trying to match node from {}\", nodeCriteria);\n+            LOG.error(\"Error while trying to load node for criteria: {}. No node will be returned.\", nodeCriteria, e);\n         }\n         return Optional.empty();\n     }\n", "next_change": null}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY1NDgzOA==", "url": "https://github.com/OpenNMS/opennms/pull/3019#discussion_r429654838", "body": "@j-white what do you have here in mind? Do we have already something similar?", "bodyText": "@j-white what do you have here in mind? Do we have already something similar?", "bodyHTML": "<p dir=\"auto\"><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/j-white/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/j-white\">@j-white</a> what do you have here in mind? Do we have already something similar?</p>", "author": "patrick-schweizer", "createdAt": "2020-05-24T16:50:44Z", "path": "features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/MetaTagConfiguration.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+package org.opennms.netmgt.timeseries.integration;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+/** Defines which additional meta tags should be exposed to the timeseries integration plugin. */\n+public class MetaTagConfiguration {\n+\n+    final static String PREFIX = \"org.opennms.timeseries.tin.metatags\";\n+\n+    /** properties defined in opennms.properties */\n+    public enum PropertyKey {\n+        assets,\n+        tags,\n+        categories\n+    }\n+\n+    public enum MetaTagKey {\n+        nodeLabel,\n+        location,\n+        sysObjectID,\n+        foreignSource,\n+        foreignId,\n+        nodeCriteria,\n+        ipAddress, // for response time resources\n+        service, // for response time resources\n+        ifDescr, // for interface resources\n+        ifAlias, // for interface resources\n+        resourceLabel\n+    }\n+\n+    // TODO: Patrick: do we want to merge MetaTagKey & AssetTagKey?\n+    public enum AssetTagKey {\n+        admin, additionalHardware, assetNumber,\n+    }\n+\n+    private final Set<MetaTagKey> enabledMetaTags;\n+    private final Set<String> enabledCategories;\n+    private final Set<AssetTagKey> enabledAssets;\n+\n+    public MetaTagConfiguration(final Map<String, String> properties) {\n+\n+        final Set<String> configuredAssets = getAsList(getProperty(properties, PropertyKey.assets));\n+        enabledAssets = Arrays\n+                .stream(AssetTagKey.values())\n+                .filter(key -> configuredAssets.contains(key.name()))\n+                .collect(Collectors.toSet());\n+\n+        enabledCategories = getAsList(getProperty(properties, PropertyKey.categories));\n+\n+        final Set<String> configuredTags = getAsList(getProperty(properties, PropertyKey.tags));\n+        enabledMetaTags = Arrays\n+                .stream(MetaTagKey.values())\n+                .filter(key -> configuredTags.contains(key.name()))\n+                .collect(Collectors.toSet());\n+\n+        // TODO: Patrick Meta-Data DSL expressions to build tags", "originalCommit": "29ed20e23d9c09b9c3ee50355e21c02e23fd40bd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTk1ODc0OA==", "url": "https://github.com/OpenNMS/opennms/pull/3019#discussion_r429958748", "bodyText": "We can evaluate meta-data DSL expressions similarly to what is done here: https://github.com/OpenNMS/opennms/blob/opennms-26.1.0-1/core/ipc/rpc/shell-commands/src/main/java/org/opennms/core/rpc/commands/MetaCommand.java#L95", "author": "j-white", "createdAt": "2020-05-25T14:17:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY1NDgzOA=="}], "type": "inlineReview", "revised_code": {"commit": "87c3163bbd5405f2f2fe297065420f5631058e98", "changed_code": [{"header": "diff --git a/features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/MetaTagConfiguration.java b/features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/MetaTagConfiguration.java\nindex 3da771541ef..a8345469bed 100644\n--- a/features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/MetaTagConfiguration.java\n+++ b/features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/MetaTagConfiguration.java\n", "chunk": "@@ -29,88 +29,66 @@ package org.opennms.netmgt.timeseries.integration;\n \n import java.util.Arrays;\n import java.util.Collections;\n+import java.util.HashMap;\n import java.util.Map;\n import java.util.Set;\n import java.util.stream.Collectors;\n \n-/** Defines which additional meta tags should be exposed to the timeseries integration plugin. */\n+/**\n+ * Defines which additional meta tags should be exposed to the timeseries integration plugin.\n+ */\n public class MetaTagConfiguration {\n \n-    final static String PREFIX = \"org.opennms.timeseries.tin.metatags\";\n+    final static String CONFIG_PREFIX = \"org.opennms.timeseries.tin.metatags\";\n+    final static String CONFIG_KEY_FOR_CATEGORIES = CONFIG_PREFIX + \".categories\";\n+    final static String CONFIG_PREFIX_FOR_TAGS = CONFIG_PREFIX + \".tag.\";\n \n-    /** properties defined in opennms.properties */\n+    /**\n+     * properties defined in opennms.properties\n+     */\n     public enum PropertyKey {\n         assets,\n-        tags,\n+        tag,\n         categories\n     }\n-\n-    public enum MetaTagKey {\n-        nodeLabel,\n-        location,\n-        sysObjectID,\n-        foreignSource,\n-        foreignId,\n-        nodeCriteria,\n-        ipAddress, // for response time resources\n-        service, // for response time resources\n-        ifDescr, // for interface resources\n-        ifAlias, // for interface resources\n-        resourceLabel\n-    }\n-\n-    // TODO: Patrick: do we want to merge MetaTagKey & AssetTagKey?\n-    public enum AssetTagKey {\n-        admin, additionalHardware, assetNumber,\n-    }\n-\n-    private final Set<MetaTagKey> enabledMetaTags;\n     private final Set<String> enabledCategories;\n-    private final Set<AssetTagKey> enabledAssets;\n \n-    public MetaTagConfiguration(final Map<String, String> properties) {\n-\n-        final Set<String> configuredAssets = getAsList(getProperty(properties, PropertyKey.assets));\n-        enabledAssets = Arrays\n-                .stream(AssetTagKey.values())\n-                .filter(key -> configuredAssets.contains(key.name()))\n-                .collect(Collectors.toSet());\n+    private final Map<String, String> configuredMetaTags;\n \n-        enabledCategories = getAsList(getProperty(properties, PropertyKey.categories));\n-\n-        final Set<String> configuredTags = getAsList(getProperty(properties, PropertyKey.tags));\n-        enabledMetaTags = Arrays\n-                .stream(MetaTagKey.values())\n-                .filter(key -> configuredTags.contains(key.name()))\n-                .collect(Collectors.toSet());\n-\n-        // TODO: Patrick Meta-Data DSL expressions to build tags\n-    }\n+    public MetaTagConfiguration(final Map<String, String> properties) {\n \n-    public boolean isEnabled(final AssetTagKey key) {\n-        return enabledAssets.contains(key);\n+        this.enabledCategories = findConfiguredCategories(properties);\n+        this.configuredMetaTags = findConfiguredMetaTags(properties);\n     }\n \n-    public boolean isEnabled(final MetaTagKey key) {\n-        return enabledMetaTags.contains(key);\n+    public Map<String, String> getConfiguredMetaTags() {\n+        return this.configuredMetaTags;\n     }\n \n     public boolean isCategoryEnabled(final String category) {\n         return this.enabledCategories.contains(category);\n     }\n \n-    private Set<String> getAsList(final String value) {\n-        if(value == null || value.trim().isEmpty()) {\n+    private Map<String, String> findConfiguredMetaTags(final Map<String, String> properties) {\n+        Map<String, String> filteredMap = new HashMap<>();\n+        properties\n+                .entrySet()\n+                .stream()\n+                .filter(e -> e.getKey().startsWith(MetaTagConfiguration.CONFIG_PREFIX_FOR_TAGS))\n+                .forEach((entry) -> filteredMap.put(entry.getKey().substring(MetaTagConfiguration.CONFIG_PREFIX_FOR_TAGS.length()), entry.getValue()));\n+        return filteredMap;\n+    }\n+\n+    private Set<String> findConfiguredCategories(final Map<String, String> properties) {\n+        String value = properties.get(CONFIG_KEY_FOR_CATEGORIES);\n+\n+        if (value == null || value.trim().isEmpty()) {\n             return Collections.emptySet();\n         }\n         return Arrays\n                 .stream(value.split(\",\"))\n                 .map(String::trim)\n                 .filter(s -> !s.isEmpty())\n-        .collect(Collectors.toSet());\n-    }\n-\n-    private String getProperty(final Map<String, String> properties, final PropertyKey property) {\n-        return properties.get(PREFIX + \".\" + property.name());\n+                .collect(Collectors.toSet());\n     }\n }\n", "next_change": {"commit": "9878e614701c8476e038cf6b992822bc1ddc71a1", "changed_code": [{"header": "diff --git a/features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/MetaTagConfiguration.java b/features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/MetaTagConfiguration.java\nindex a8345469bed..97c832df1a1 100644\n--- a/features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/MetaTagConfiguration.java\n+++ b/features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/MetaTagConfiguration.java\n", "chunk": "@@ -78,17 +74,4 @@ public class MetaTagConfiguration {\n                 .forEach((entry) -> filteredMap.put(entry.getKey().substring(MetaTagConfiguration.CONFIG_PREFIX_FOR_TAGS.length()), entry.getValue()));\n         return filteredMap;\n     }\n-\n-    private Set<String> findConfiguredCategories(final Map<String, String> properties) {\n-        String value = properties.get(CONFIG_KEY_FOR_CATEGORIES);\n-\n-        if (value == null || value.trim().isEmpty()) {\n-            return Collections.emptySet();\n-        }\n-        return Arrays\n-                .stream(value.split(\",\"))\n-                .map(String::trim)\n-                .filter(s -> !s.isEmpty())\n-                .collect(Collectors.toSet());\n-    }\n }\n", "next_change": {"commit": "af869d2b4d592e25c30741da94f45ab9ca6df18e", "changed_code": [{"header": "diff --git a/features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/MetaTagConfiguration.java b/features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/MetaTagConfiguration.java\nindex 97c832df1a1..09c3157c520 100644\n--- a/features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/MetaTagConfiguration.java\n+++ b/features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/MetaTagConfiguration.java\n", "chunk": "@@ -70,8 +70,10 @@ public class MetaTagConfiguration {\n         properties\n                 .entrySet()\n                 .stream()\n-                .filter(e -> e.getKey().startsWith(MetaTagConfiguration.CONFIG_PREFIX_FOR_TAGS))\n-                .forEach((entry) -> filteredMap.put(entry.getKey().substring(MetaTagConfiguration.CONFIG_PREFIX_FOR_TAGS.length()), entry.getValue()));\n+                .flatMap((entry) -> StringUtils.truncatePrefix(entry.getKey(), MetaTagConfiguration.CONFIG_PREFIX_FOR_TAGS)\n+                                               .map(Stream::of)\n+                                               .orElseGet(Stream::empty))\n+                .collect(Collectors.toMap((entry) -> entry.getKey(), (entry) -> entry.getValue()));\n         return filteredMap;\n     }\n }\n", "next_change": {"commit": "3f13ae9be5dbbf0424ce3c30e3abab5f10d08c5f", "changed_code": [{"header": "diff --git a/features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/MetaTagConfiguration.java b/features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/MetaTagConfiguration.java\nindex 09c3157c520..4145c28b740 100644\n--- a/features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/MetaTagConfiguration.java\n+++ b/features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/MetaTagConfiguration.java\n", "chunk": "@@ -67,13 +60,10 @@ public class MetaTagConfiguration {\n \n     private Map<String, String> findConfiguredMetaTags(final Map<String, String> properties) {\n         Map<String, String> filteredMap = new HashMap<>();\n-        properties\n+        return properties\n                 .entrySet()\n                 .stream()\n-                .flatMap((entry) -> StringUtils.truncatePrefix(entry.getKey(), MetaTagConfiguration.CONFIG_PREFIX_FOR_TAGS)\n-                                               .map(Stream::of)\n-                                               .orElseGet(Stream::empty))\n-                .collect(Collectors.toMap((entry) -> entry.getKey(), (entry) -> entry.getValue()));\n-        return filteredMap;\n+                .filter(e -> e.getKey().startsWith(MetaTagConfiguration.CONFIG_PREFIX_FOR_TAGS))\n+                .collect(Collectors.toMap((entry) -> entry.getKey().substring(MetaTagConfiguration.CONFIG_PREFIX_FOR_TAGS.length()), Map.Entry::getValue));\n     }\n }\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY1NDg5Mw==", "url": "https://github.com/OpenNMS/opennms/pull/3019#discussion_r429654893", "body": "@j-white how often do we expect the Resource Meta Data to change / what should our eviction policy be?", "bodyText": "@j-white how often do we expect the Resource Meta Data to change / what should our eviction policy be?", "bodyHTML": "<p dir=\"auto\"><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/j-white/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/j-white\">@j-white</a> how often do we expect the Resource Meta Data to change / what should our eviction policy be?</p>", "author": "patrick-schweizer", "createdAt": "2020-05-24T16:51:43Z", "path": "features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/persistence/TimeseriesPersisterFactory.java", "diffHunk": "@@ -47,13 +52,19 @@\n public class TimeseriesPersisterFactory implements PersisterFactory {\n \n     private final TimeseriesWriter timeseriesWriter;\n-\n     private final Context context;\n+    private final MetaTagDataLoader metaTagDataLoader;\n+    private final Map<ResourcePath, Map<String, String>> metaCache;\n \n     @Inject\n-    public TimeseriesPersisterFactory(Context context, TimeseriesWriter timeseriesWriter) {\n+    public TimeseriesPersisterFactory(final Context context, final TimeseriesWriter timeseriesWriter, final MetaTagDataLoader metaTagDataLoader) {\n         this.context = Objects.requireNonNull(context);\n         this.timeseriesWriter = timeseriesWriter;\n+        this.metaTagDataLoader = metaTagDataLoader;\n+        Cache<ResourcePath, Map<String, String>> cache = CacheBuilder // TODO Patrick: define with Jesse the eviction policy", "originalCommit": "29ed20e23d9c09b9c3ee50355e21c02e23fd40bd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTk2MzEzMw==", "url": "https://github.com/OpenNMS/opennms/pull/3019#discussion_r429963133", "bodyText": "Let's use expireAfterWrite with a default of 5m. (And make it configurable.)", "author": "j-white", "createdAt": "2020-05-25T14:26:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY1NDg5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "be46a55a9d69682d953bac0dcb85be0c1af410d4", "changed_code": [{"header": "diff --git a/features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/persistence/TimeseriesPersisterFactory.java b/features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/persistence/TimeseriesPersisterFactory.java\nindex 94b8bc8b580..1d4a0d6480a 100644\n--- a/features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/persistence/TimeseriesPersisterFactory.java\n+++ b/features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/persistence/TimeseriesPersisterFactory.java\n", "chunk": "@@ -61,8 +62,9 @@ public class TimeseriesPersisterFactory implements PersisterFactory {\n         this.context = Objects.requireNonNull(context);\n         this.timeseriesWriter = timeseriesWriter;\n         this.metaTagDataLoader = metaTagDataLoader;\n-        Cache<ResourcePath, Map<String, String>> cache = CacheBuilder // TODO Patrick: define with Jesse the eviction policy\n+        Cache<ResourcePath, Map<String, String>> cache = CacheBuilder\n                 .newBuilder()\n+                .expireAfterWrite(5, TimeUnit.MINUTES) // TODO Patrick: make configurable\n                 .build();\n         this.metaCache = cache.asMap();\n     }\n", "next_change": {"commit": "f9daa3e8890a479256ae119911b84b7a6d514b74", "changed_code": [{"header": "diff --git a/features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/persistence/TimeseriesPersisterFactory.java b/features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/persistence/TimeseriesPersisterFactory.java\nindex 1d4a0d6480a..4e2ba5cf979 100644\n--- a/features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/persistence/TimeseriesPersisterFactory.java\n+++ b/features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/persistence/TimeseriesPersisterFactory.java\n", "chunk": "@@ -64,7 +64,7 @@ public class TimeseriesPersisterFactory implements PersisterFactory {\n         this.metaTagDataLoader = metaTagDataLoader;\n         Cache<ResourcePath, Map<String, String>> cache = CacheBuilder\n                 .newBuilder()\n-                .expireAfterWrite(5, TimeUnit.MINUTES) // TODO Patrick: make configurable\n+                .expireAfterWrite(5, TimeUnit.MINUTES) // TODO Patrick: make configurable - can use CacheBuilder.from(cacheConfig).build();\n                 .build();\n         this.metaCache = cache.asMap();\n     }\n", "next_change": {"commit": "ddd150165e98160a3424db4c792a83fe059db55a", "changed_code": [{"header": "diff --git a/features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/persistence/TimeseriesPersisterFactory.java b/features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/persistence/TimeseriesPersisterFactory.java\nindex 4e2ba5cf979..e9697c265e8 100644\n--- a/features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/persistence/TimeseriesPersisterFactory.java\n+++ b/features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/persistence/TimeseriesPersisterFactory.java\n", "chunk": "@@ -55,18 +54,18 @@ public class TimeseriesPersisterFactory implements PersisterFactory {\n     private final TimeseriesWriter timeseriesWriter;\n     private final Context context;\n     private final MetaTagDataLoader metaTagDataLoader;\n-    private final Map<ResourcePath, Map<String, String>> metaCache;\n+    private final Cache<ResourcePath, Map<String, String>> metaCache;\n \n     @Inject\n-    public TimeseriesPersisterFactory(final Context context, final TimeseriesWriter timeseriesWriter, final MetaTagDataLoader metaTagDataLoader) {\n+    public TimeseriesPersisterFactory(final Context context, final TimeseriesWriter timeseriesWriter,\n+                                      final MetaTagDataLoader metaTagDataLoader, final CacheConfig cacheConfig) {\n         this.context = Objects.requireNonNull(context);\n         this.timeseriesWriter = timeseriesWriter;\n         this.metaTagDataLoader = metaTagDataLoader;\n-        Cache<ResourcePath, Map<String, String>> cache = CacheBuilder\n-                .newBuilder()\n-                .expireAfterWrite(5, TimeUnit.MINUTES) // TODO Patrick: make configurable - can use CacheBuilder.from(cacheConfig).build();\n+        this.metaCache = new CacheBuilder<>()\n+                .withConfig(cacheConfig)\n+                .withCacheLoader(metaTagDataLoader)\n                 .build();\n-        this.metaCache = cache.asMap();\n     }\n \n     @Override\n", "next_change": null}]}}]}}]}}, {"oid": "a5449bfbe4b996de47c6cc5ebb064ad00aeb9775", "url": "https://github.com/OpenNMS/opennms/commit/a5449bfbe4b996de47c6cc5ebb064ad00aeb9775", "message": "NMS-12730 Meta-data tag enhancements to Time Series Storage API: map more attributes", "committedDate": "2020-05-24T19:24:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY2NzA2MQ==", "url": "https://github.com/OpenNMS/opennms/pull/3019#discussion_r429667061", "body": "@j-white ?", "bodyText": "@j-white ?", "bodyHTML": "<p dir=\"auto\"><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/j-white/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/j-white\">@j-white</a> ?</p>", "author": "patrick-schweizer", "createdAt": "2020-05-24T19:25:36Z", "path": "features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/persistence/MetaTagDataLoader.java", "diffHunk": "@@ -0,0 +1,286 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2006-2015 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2015 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+\n+package org.opennms.netmgt.timeseries.integration.persistence;\n+\n+import java.net.InetAddress;\n+import java.net.UnknownHostException;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import javax.inject.Inject;\n+\n+import org.opennms.netmgt.collection.api.CollectionResource;\n+import org.opennms.netmgt.dao.api.NodeDao;\n+import org.opennms.netmgt.dao.api.SessionUtils;\n+import org.opennms.netmgt.model.OnmsAssetRecord;\n+import org.opennms.netmgt.model.OnmsCategory;\n+import org.opennms.netmgt.model.OnmsNode;\n+import org.opennms.netmgt.model.ResourceTypeUtils;\n+import org.opennms.netmgt.model.monitoringLocations.OnmsMonitoringLocation;\n+import org.opennms.netmgt.timeseries.integration.MetaTagConfiguration;\n+import org.opennms.netmgt.timeseries.integration.MetaTagConfiguration.AssetTagKey;\n+import org.opennms.netmgt.timeseries.integration.MetaTagConfiguration.MetaTagKey;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.common.base.Strings;\n+import com.google.common.cache.CacheLoader;\n+import com.google.common.collect.Maps;\n+\n+public class MetaTagDataLoader extends CacheLoader<CollectionResource, Map<String, String>> {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(MetaTagDataLoader.class);\n+\n+    private final NodeDao nodeDao;\n+    private final SessionUtils sessionUtils;\n+    private MetaTagConfiguration config;\n+\n+    @Inject\n+    public MetaTagDataLoader(final NodeDao nodeDao, final SessionUtils sessionUtils) {\n+        this.nodeDao = nodeDao;\n+        this.sessionUtils = sessionUtils;\n+        setConfig(new MetaTagConfiguration(Maps.fromProperties(System.getProperties())));\n+    }\n+\n+    public void setConfig(final MetaTagConfiguration config) {\n+        this.config = config;\n+    }\n+\n+    public Map<String, String> load(final CollectionResource resource) {\n+        return sessionUtils.withReadOnlyTransaction(() -> {\n+            final Map<String, String> tags = new HashMap<>();\n+            addTag(tags, MetaTagKey.resourceLabel, Optional.ofNullable(resource.getInterfaceLabel()).orElse(null));\n+\n+            if (resource.getResourceTypeName().equals(CollectionResource.RESOURCE_TYPE_NODE)) {\n+                String nodeCriteria = getNodeCriteriaFromResource(resource);\n+                mapNode(tags, nodeCriteria);\n+            } else if (resource.getResourceTypeName().equals(CollectionResource.RESOURCE_TYPE_IF)) {\n+                String nodeCriteria = getNodeCriteriaFromResource(resource);\n+                if (!Strings.isNullOrEmpty(nodeCriteria)) {\n+                    mapNode(tags, nodeCriteria);\n+                }\n+                addTag(tags, MetaTagKey.ifDescr, resource.getInterfaceLabel()); // TODO: Patrick: is that correct?", "originalCommit": "a5449bfbe4b996de47c6cc5ebb064ad00aeb9775", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTk1OTQ4MA==", "url": "https://github.com/OpenNMS/opennms/pull/3019#discussion_r429959480", "bodyText": "We'll need to extract the ifIndex from the resource to be able to get everything we need.", "author": "j-white", "createdAt": "2020-05-25T14:19:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY2NzA2MQ=="}], "type": "inlineReview", "revised_code": {"commit": "87c3163bbd5405f2f2fe297065420f5631058e98", "changed_code": [{"header": "diff --git a/features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/persistence/MetaTagDataLoader.java b/features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/persistence/MetaTagDataLoader.java\nindex 059ef23566a..f43defc50b3 100644\n--- a/features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/persistence/MetaTagDataLoader.java\n+++ b/features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/persistence/MetaTagDataLoader.java\n", "chunk": "@@ -78,148 +82,74 @@ public class MetaTagDataLoader extends CacheLoader<CollectionResource, Map<Strin\n \n     public Map<String, String> load(final CollectionResource resource) {\n         return sessionUtils.withReadOnlyTransaction(() -> {\n+\n             final Map<String, String> tags = new HashMap<>();\n-            addTag(tags, MetaTagKey.resourceLabel, Optional.ofNullable(resource.getInterfaceLabel()).orElse(null));\n+            List<Scope> scopes = new ArrayList<>();\n+\n+            // resource related scope\n+            scopes.add(getScopeForResource(resource));\n+\n+            // node related scopes\n+            String nodeCriteria = getNodeCriteriaFromResource(resource);\n+            Optional<OnmsNode> nodeOptional = getNode(nodeCriteria);\n+            if(nodeOptional.isPresent()) {\n+                OnmsNode node = nodeOptional.get();\n+                String interfaceAddress = null; // TODO Patrick\n+                String serviceName = null; // TODO Patrick\n+                scopes.add(this.entityScopeProvider.getScopeForNode(node.getId()));\n+                scopes.add(this.entityScopeProvider.getScopeForInterface(node.getId(), interfaceAddress));\n+                scopes.add(this.entityScopeProvider.getScopeForService(node.getId(), InetAddressUtils.getInetAddress(interfaceAddress), serviceName));\n+            }\n+\n+            if (resource.getResourceTypeName().equals(CollectionResource.RESOURCE_TYPE_LATENCY)) {\n+                // mapResponseTimeResource(resource, tags);\n+                // TODO: Patrick: check with @Jesse how we get the data\n+            }\n+\n+            // create tags for scopes\n+            Scope scope = new FallbackScope(scopes);\n+            Map<String, String> configuredMetaTags = this.config.getConfiguredMetaTags();\n+            for(Map.Entry<String, String> entry: configuredMetaTags.entrySet()) {\n+                final String value = Interpolator.interpolate(entry.getValue(), scope);\n+                tags.put(entry.getKey(), value);\n+            }\n \n-            if (resource.getResourceTypeName().equals(CollectionResource.RESOURCE_TYPE_NODE)) {\n-                String nodeCriteria = getNodeCriteriaFromResource(resource);\n-                mapNode(tags, nodeCriteria);\n-            } else if (resource.getResourceTypeName().equals(CollectionResource.RESOURCE_TYPE_IF)) {\n-                String nodeCriteria = getNodeCriteriaFromResource(resource);\n-                if (!Strings.isNullOrEmpty(nodeCriteria)) {\n-                    mapNode(tags, nodeCriteria);\n-                }\n-                addTag(tags, MetaTagKey.ifDescr, resource.getInterfaceLabel()); // TODO: Patrick: is that correct?\n-                // addTag(tags, MetaTagKey.ifAlias, ); // TODO: Patrick: from where do we get that attribute?\n-            } else if (resource.getResourceTypeName().equals(CollectionResource.RESOURCE_TYPE_LATENCY)) {\n-                mapResponseTimeResource(resource, tags);\n-            } else {\n-                String nodeCriteria = getNodeCriteriaFromResource(resource);\n-                if (!Strings.isNullOrEmpty(nodeCriteria)) {\n-                    mapNode(tags, nodeCriteria);\n-                }\n+            // create tags for categories\n+            if(nodeOptional.isPresent()) {\n+                mapCategories(tags, nodeOptional.get());\n             }\n \n             return tags;\n         });\n     }\n \n-    private void mapNode(final Map<String, String> tags, final String nodeCriteria) {\n-        Optional<OnmsNode> node = getNode(nodeCriteria);\n-        addTag(tags, MetaTagKey.nodeLabel, node.map(OnmsNode::getLabel).orElse(null));\n-        addTag(tags, MetaTagKey.location, node.map(OnmsNode::getLocation).map(OnmsMonitoringLocation::getLocationName).orElse(null));\n-        addTag(tags, MetaTagKey.sysObjectID, node.map(OnmsNode::getSysObjectId).orElse(null));\n-        addTag(tags, MetaTagKey.foreignSource, node.map(OnmsNode::getForeignSource).orElse(null));\n-        addTag(tags, MetaTagKey.foreignId, node.map(OnmsNode::getForeignId).orElse(null));\n-        addTag(tags, MetaTagKey.nodeCriteria, nodeCriteria);\n-\n-        // categories\n-        if(node.isPresent()) {\n-            AtomicInteger n = new AtomicInteger(1);\n-            // Tags are only unique by key and value\n-            node.get().getCategories().stream()\n+    private void mapCategories(final Map<String, String> tags, final OnmsNode node) {\n+        Objects.requireNonNull(node);\n+        node.getCategories().stream()\n                     .map(OnmsCategory::getName)\n                     .filter(config::isCategoryEnabled)\n-                    // TODO: Patrick: is this acceptable? Or would we rather create Tags instead of a HashMap?\n-                    .forEach(catName -> tags.put(\"category_\" + n.getAndIncrement(), catName));\n-        }\n-\n-        // assets\n-        if(node.map(OnmsNode::getAssetRecord).isPresent()) {\n-            mapAssets(tags, node.get().getAssetRecord());\n-        }\n-\n-        // Meta-Data DSL\n-        // TODO Patrick: how will that work?\n+                    .forEach(catName -> tags.put(\"cat_\" + catName , catName));\n     }\n \n-    private void mapAssets(final Map<String, String> tags, final OnmsAssetRecord assets) {\n-        Objects.requireNonNull(assets);\n-\n-        addTag(tags, AssetTagKey.id, Optional.ofNullable(assets.getId()).map(Object::toString).orElse(null));\n-        addTag(tags, AssetTagKey.category, assets.getCategory());\n-        addTag(tags, AssetTagKey.manufacturer, assets.getManufacturer());\n-        addTag(tags, AssetTagKey.vendor, assets.getVendor());\n-        addTag(tags, AssetTagKey.modelNumber, assets.getModelNumber());\n-        addTag(tags, AssetTagKey.serialNumber, assets.getSerialNumber());\n-        addTag(tags, AssetTagKey.description, assets.getDescription());\n-        addTag(tags, AssetTagKey.circuitId, assets.getCircuitId());\n-        addTag(tags, AssetTagKey.assetNumber, assets.getAssetNumber());\n-        addTag(tags, AssetTagKey.operatingSystem, assets.getOperatingSystem());\n-        addTag(tags, AssetTagKey.rack, assets.getRack());\n-        addTag(tags, AssetTagKey.slot, assets.getSlot());\n-        addTag(tags, AssetTagKey.port, assets.getPort());\n-        addTag(tags, AssetTagKey.region, assets.getRegion());\n-        addTag(tags, AssetTagKey.division, assets.getDivision());\n-        addTag(tags, AssetTagKey.department, assets.getDepartment());\n-        addTag(tags, AssetTagKey.building, assets.getBuilding());\n-        addTag(tags, AssetTagKey.floor, assets.getFloor());\n-        addTag(tags, AssetTagKey.room, assets.getRoom());\n-        addTag(tags, AssetTagKey.vendorPhone, assets.getVendorPhone());\n-        addTag(tags, AssetTagKey.vendorFax, assets.getVendorFax());\n-        addTag(tags, AssetTagKey.vendorAssetNumber, assets.getVendorAssetNumber());\n-        addTag(tags, AssetTagKey.username, assets.getUsername());\n-        addTag(tags, AssetTagKey.password, assets.getPassword());\n-        addTag(tags, AssetTagKey.enable, assets.getEnable());\n-        addTag(tags, AssetTagKey.connection, assets.getConnection());\n-        addTag(tags, AssetTagKey.autoenable, assets.getAutoenable());\n-        addTag(tags, AssetTagKey.lastModifiedBy, assets.getLastModifiedBy());\n-        addTag(tags, AssetTagKey.lastModifiedDate, Optional.ofNullable(assets.getLastModifiedDate()).map(Date::toString).orElse(null));\n-        addTag(tags, AssetTagKey.dateInstalled, assets.getDateInstalled());\n-        addTag(tags, AssetTagKey.lease, assets.getLease());\n-        addTag(tags, AssetTagKey.leaseExpires, assets.getLeaseExpires());\n-        addTag(tags, AssetTagKey.supportPhone, assets.getSupportPhone());\n-        addTag(tags, AssetTagKey.maintcontract, assets.getMaintcontract());\n-        addTag(tags, AssetTagKey.maintContractExpiration, assets.getMaintContractExpiration());\n-        addTag(tags, AssetTagKey.displayCategory, assets.getDisplayCategory());\n-        addTag(tags, AssetTagKey.notifyCategory, assets.getNotifyCategory());\n-        addTag(tags, AssetTagKey.pollerCategory, assets.getPollerCategory());\n-        addTag(tags, AssetTagKey.thresholdCategory, assets.getThresholdCategory());\n-        addTag(tags, AssetTagKey.comment, assets.getComment());\n-        addTag(tags, AssetTagKey.cpu, assets.getCpu());\n-        addTag(tags, AssetTagKey.ram, assets.getRam());\n-        addTag(tags, AssetTagKey.storagectrl, assets.getStoragectrl());\n-        addTag(tags, AssetTagKey.hdd1, assets.getHdd1());\n-        addTag(tags, AssetTagKey.hdd2, assets.getHdd2());\n-        addTag(tags, AssetTagKey.hdd3, assets.getHdd3());\n-        addTag(tags, AssetTagKey.hdd4, assets.getHdd4());\n-        addTag(tags, AssetTagKey.hdd5, assets.getHdd5());\n-        addTag(tags, AssetTagKey.hdd6, assets.getHdd6());\n-        addTag(tags, AssetTagKey.numpowersupplies, assets.getNumpowersupplies());\n-        addTag(tags, AssetTagKey.inputpower, assets.getInputpower());\n-        addTag(tags, AssetTagKey.additionalhardware, assets.getAdditionalhardware());\n-        addTag(tags, AssetTagKey.admin, assets.getAdmin());\n-        addTag(tags, AssetTagKey.snmpcommunity, assets.getSnmpcommunity());\n-        addTag(tags, AssetTagKey.rackunitheight, assets.getRackunitheight());\n-        addTag(tags, AssetTagKey.managedObjectType, assets.getManagedObjectType());\n-        addTag(tags, AssetTagKey.managedObjectInstance, assets.getManagedObjectInstance());\n-        addTag(tags, AssetTagKey.geolocation, Optional.ofNullable(assets.getGeolocation()).map(Object::toString).orElse(null));\n-        addTag(tags, AssetTagKey.vmwareManagedObjectId, assets.getVmwareManagedObjectId());\n-        addTag(tags, AssetTagKey.vmwareManagedEntityType, assets.getVmwareManagedEntityType());\n-        addTag(tags, AssetTagKey.vmwareManagementServer, assets.getVmwareManagementServer());\n-        addTag(tags, AssetTagKey.vmwareTopologyInfo, assets.getVmwareTopologyInfo());\n-        addTag(tags, AssetTagKey.vmwareState, assets.getVmwareState());\n-    }\n-\n-    private void addTag(final Map<String, String> tags, final MetaTagKey key, final String value) {\n-        Optional.ofNullable(value)\n-                .filter((v) -> this.config.isEnabled(key))\n-                .ifPresent((v) -> tags.put(key.name(), v));\n-    }\n-\n-    private void addTag(final Map<String, String> tags, final AssetTagKey key, final String value){\n-        Optional.ofNullable(value)\n-                .filter((v) -> this.config.isEnabled(key))\n-                .ifPresent((v) -> tags.put(key.name(), v));\n+    public Scope getScopeForResource(final CollectionResource resource) {\n+        if (resource == null) {\n+            return EmptyScope.EMPTY;\n+        }\n+        return new ObjectScope<>(resource)\n+                .map(\"resource\", \"criteria\", (r) -> Optional.ofNullable(getNodeCriteriaFromResource(resource)))\n+                .map(\"resource\", \"label\", (r) -> Optional.ofNullable(r.getInterfaceLabel()));\n     }\n \n     private Optional<OnmsNode> getNode(String nodeCriteria) {\n-            try {\n-                return Optional.ofNullable(nodeDao.get(nodeCriteria));\n-            } catch (Exception e) {\n-                LOG.error(\"error while trying to match node from {}\", nodeCriteria);\n-            }\n+        if (nodeCriteria == null || nodeCriteria.trim().isEmpty()) {\n             return Optional.empty();\n+        }\n+        try {\n+            return Optional.ofNullable(nodeDao.get(nodeCriteria));\n+        } catch (Exception e) {\n+            LOG.error(\"error while trying to match node from {}\", nodeCriteria);\n+        }\n+        return Optional.empty();\n     }\n \n     private String getNodeCriteriaFromResource(CollectionResource resource) {\n", "next_change": {"commit": "085d523f8fda8767ddf4c9aca130fdf38731ff70", "changed_code": [{"header": "diff --git a/features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/persistence/MetaTagDataLoader.java b/features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/persistence/MetaTagDataLoader.java\nindex f43defc50b3..14d63c36d5b 100644\n--- a/features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/persistence/MetaTagDataLoader.java\n+++ b/features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/persistence/MetaTagDataLoader.java\n", "chunk": "@@ -147,7 +149,7 @@ public class MetaTagDataLoader extends CacheLoader<CollectionResource, Map<Strin\n         try {\n             return Optional.ofNullable(nodeDao.get(nodeCriteria));\n         } catch (Exception e) {\n-            LOG.error(\"error while trying to match node from {}\", nodeCriteria);\n+            LOG.error(\"Error while trying to load node for criteria: {}. No node will be returned.\", nodeCriteria, e);\n         }\n         return Optional.empty();\n     }\n", "next_change": {"commit": "ddd150165e98160a3424db4c792a83fe059db55a", "changed_code": [{"header": "diff --git a/features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/persistence/MetaTagDataLoader.java b/features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/persistence/MetaTagDataLoader.java\nindex 14d63c36d5b..4cfdbbcdeb2 100644\n--- a/features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/persistence/MetaTagDataLoader.java\n+++ b/features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/persistence/MetaTagDataLoader.java\n", "chunk": "@@ -149,7 +135,7 @@ public class MetaTagDataLoader extends CacheLoader<CollectionResource, Map<Strin\n         try {\n             return Optional.ofNullable(nodeDao.get(nodeCriteria));\n         } catch (Exception e) {\n-            LOG.error(\"Error while trying to load node for criteria: {}. No node will be returned.\", nodeCriteria, e);\n+            LOG.error(\"error while trying to match node from {}\", nodeCriteria);\n         }\n         return Optional.empty();\n     }\n", "next_change": {"commit": "6ddcf6cc3f29ac1a0cd01f210eee14490c8cd27a", "changed_code": [{"header": "diff --git a/features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/persistence/MetaTagDataLoader.java b/features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/persistence/MetaTagDataLoader.java\nindex 4cfdbbcdeb2..89e79492eb1 100644\n--- a/features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/persistence/MetaTagDataLoader.java\n+++ b/features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/persistence/MetaTagDataLoader.java\n", "chunk": "@@ -135,7 +135,7 @@ public class MetaTagDataLoader extends CacheLoader<CollectionResource, Map<Strin\n         try {\n             return Optional.ofNullable(nodeDao.get(nodeCriteria));\n         } catch (Exception e) {\n-            LOG.error(\"error while trying to match node from {}\", nodeCriteria);\n+            LOG.error(\"Error while trying to load node for criteria: {}. No node will be returned.\", nodeCriteria, e);\n         }\n         return Optional.empty();\n     }\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY2NzA3NA==", "url": "https://github.com/OpenNMS/opennms/pull/3019#discussion_r429667074", "body": "@j-white ", "bodyText": "@j-white", "bodyHTML": "<p dir=\"auto\"><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/j-white/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/j-white\">@j-white</a></p>", "author": "patrick-schweizer", "createdAt": "2020-05-24T19:25:45Z", "path": "features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/persistence/MetaTagDataLoader.java", "diffHunk": "@@ -0,0 +1,286 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2006-2015 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2015 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+\n+package org.opennms.netmgt.timeseries.integration.persistence;\n+\n+import java.net.InetAddress;\n+import java.net.UnknownHostException;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import javax.inject.Inject;\n+\n+import org.opennms.netmgt.collection.api.CollectionResource;\n+import org.opennms.netmgt.dao.api.NodeDao;\n+import org.opennms.netmgt.dao.api.SessionUtils;\n+import org.opennms.netmgt.model.OnmsAssetRecord;\n+import org.opennms.netmgt.model.OnmsCategory;\n+import org.opennms.netmgt.model.OnmsNode;\n+import org.opennms.netmgt.model.ResourceTypeUtils;\n+import org.opennms.netmgt.model.monitoringLocations.OnmsMonitoringLocation;\n+import org.opennms.netmgt.timeseries.integration.MetaTagConfiguration;\n+import org.opennms.netmgt.timeseries.integration.MetaTagConfiguration.AssetTagKey;\n+import org.opennms.netmgt.timeseries.integration.MetaTagConfiguration.MetaTagKey;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.common.base.Strings;\n+import com.google.common.cache.CacheLoader;\n+import com.google.common.collect.Maps;\n+\n+public class MetaTagDataLoader extends CacheLoader<CollectionResource, Map<String, String>> {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(MetaTagDataLoader.class);\n+\n+    private final NodeDao nodeDao;\n+    private final SessionUtils sessionUtils;\n+    private MetaTagConfiguration config;\n+\n+    @Inject\n+    public MetaTagDataLoader(final NodeDao nodeDao, final SessionUtils sessionUtils) {\n+        this.nodeDao = nodeDao;\n+        this.sessionUtils = sessionUtils;\n+        setConfig(new MetaTagConfiguration(Maps.fromProperties(System.getProperties())));\n+    }\n+\n+    public void setConfig(final MetaTagConfiguration config) {\n+        this.config = config;\n+    }\n+\n+    public Map<String, String> load(final CollectionResource resource) {\n+        return sessionUtils.withReadOnlyTransaction(() -> {\n+            final Map<String, String> tags = new HashMap<>();\n+            addTag(tags, MetaTagKey.resourceLabel, Optional.ofNullable(resource.getInterfaceLabel()).orElse(null));\n+\n+            if (resource.getResourceTypeName().equals(CollectionResource.RESOURCE_TYPE_NODE)) {\n+                String nodeCriteria = getNodeCriteriaFromResource(resource);\n+                mapNode(tags, nodeCriteria);\n+            } else if (resource.getResourceTypeName().equals(CollectionResource.RESOURCE_TYPE_IF)) {\n+                String nodeCriteria = getNodeCriteriaFromResource(resource);\n+                if (!Strings.isNullOrEmpty(nodeCriteria)) {\n+                    mapNode(tags, nodeCriteria);\n+                }\n+                addTag(tags, MetaTagKey.ifDescr, resource.getInterfaceLabel()); // TODO: Patrick: is that correct?\n+                // addTag(tags, MetaTagKey.ifAlias, ); // TODO: Patrick: from where do we get that attribute?", "originalCommit": "a5449bfbe4b996de47c6cc5ebb064ad00aeb9775", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "87c3163bbd5405f2f2fe297065420f5631058e98", "changed_code": [{"header": "diff --git a/features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/persistence/MetaTagDataLoader.java b/features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/persistence/MetaTagDataLoader.java\nindex 059ef23566a..f43defc50b3 100644\n--- a/features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/persistence/MetaTagDataLoader.java\n+++ b/features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/persistence/MetaTagDataLoader.java\n", "chunk": "@@ -78,148 +82,74 @@ public class MetaTagDataLoader extends CacheLoader<CollectionResource, Map<Strin\n \n     public Map<String, String> load(final CollectionResource resource) {\n         return sessionUtils.withReadOnlyTransaction(() -> {\n+\n             final Map<String, String> tags = new HashMap<>();\n-            addTag(tags, MetaTagKey.resourceLabel, Optional.ofNullable(resource.getInterfaceLabel()).orElse(null));\n+            List<Scope> scopes = new ArrayList<>();\n+\n+            // resource related scope\n+            scopes.add(getScopeForResource(resource));\n+\n+            // node related scopes\n+            String nodeCriteria = getNodeCriteriaFromResource(resource);\n+            Optional<OnmsNode> nodeOptional = getNode(nodeCriteria);\n+            if(nodeOptional.isPresent()) {\n+                OnmsNode node = nodeOptional.get();\n+                String interfaceAddress = null; // TODO Patrick\n+                String serviceName = null; // TODO Patrick\n+                scopes.add(this.entityScopeProvider.getScopeForNode(node.getId()));\n+                scopes.add(this.entityScopeProvider.getScopeForInterface(node.getId(), interfaceAddress));\n+                scopes.add(this.entityScopeProvider.getScopeForService(node.getId(), InetAddressUtils.getInetAddress(interfaceAddress), serviceName));\n+            }\n+\n+            if (resource.getResourceTypeName().equals(CollectionResource.RESOURCE_TYPE_LATENCY)) {\n+                // mapResponseTimeResource(resource, tags);\n+                // TODO: Patrick: check with @Jesse how we get the data\n+            }\n+\n+            // create tags for scopes\n+            Scope scope = new FallbackScope(scopes);\n+            Map<String, String> configuredMetaTags = this.config.getConfiguredMetaTags();\n+            for(Map.Entry<String, String> entry: configuredMetaTags.entrySet()) {\n+                final String value = Interpolator.interpolate(entry.getValue(), scope);\n+                tags.put(entry.getKey(), value);\n+            }\n \n-            if (resource.getResourceTypeName().equals(CollectionResource.RESOURCE_TYPE_NODE)) {\n-                String nodeCriteria = getNodeCriteriaFromResource(resource);\n-                mapNode(tags, nodeCriteria);\n-            } else if (resource.getResourceTypeName().equals(CollectionResource.RESOURCE_TYPE_IF)) {\n-                String nodeCriteria = getNodeCriteriaFromResource(resource);\n-                if (!Strings.isNullOrEmpty(nodeCriteria)) {\n-                    mapNode(tags, nodeCriteria);\n-                }\n-                addTag(tags, MetaTagKey.ifDescr, resource.getInterfaceLabel()); // TODO: Patrick: is that correct?\n-                // addTag(tags, MetaTagKey.ifAlias, ); // TODO: Patrick: from where do we get that attribute?\n-            } else if (resource.getResourceTypeName().equals(CollectionResource.RESOURCE_TYPE_LATENCY)) {\n-                mapResponseTimeResource(resource, tags);\n-            } else {\n-                String nodeCriteria = getNodeCriteriaFromResource(resource);\n-                if (!Strings.isNullOrEmpty(nodeCriteria)) {\n-                    mapNode(tags, nodeCriteria);\n-                }\n+            // create tags for categories\n+            if(nodeOptional.isPresent()) {\n+                mapCategories(tags, nodeOptional.get());\n             }\n \n             return tags;\n         });\n     }\n \n-    private void mapNode(final Map<String, String> tags, final String nodeCriteria) {\n-        Optional<OnmsNode> node = getNode(nodeCriteria);\n-        addTag(tags, MetaTagKey.nodeLabel, node.map(OnmsNode::getLabel).orElse(null));\n-        addTag(tags, MetaTagKey.location, node.map(OnmsNode::getLocation).map(OnmsMonitoringLocation::getLocationName).orElse(null));\n-        addTag(tags, MetaTagKey.sysObjectID, node.map(OnmsNode::getSysObjectId).orElse(null));\n-        addTag(tags, MetaTagKey.foreignSource, node.map(OnmsNode::getForeignSource).orElse(null));\n-        addTag(tags, MetaTagKey.foreignId, node.map(OnmsNode::getForeignId).orElse(null));\n-        addTag(tags, MetaTagKey.nodeCriteria, nodeCriteria);\n-\n-        // categories\n-        if(node.isPresent()) {\n-            AtomicInteger n = new AtomicInteger(1);\n-            // Tags are only unique by key and value\n-            node.get().getCategories().stream()\n+    private void mapCategories(final Map<String, String> tags, final OnmsNode node) {\n+        Objects.requireNonNull(node);\n+        node.getCategories().stream()\n                     .map(OnmsCategory::getName)\n                     .filter(config::isCategoryEnabled)\n-                    // TODO: Patrick: is this acceptable? Or would we rather create Tags instead of a HashMap?\n-                    .forEach(catName -> tags.put(\"category_\" + n.getAndIncrement(), catName));\n-        }\n-\n-        // assets\n-        if(node.map(OnmsNode::getAssetRecord).isPresent()) {\n-            mapAssets(tags, node.get().getAssetRecord());\n-        }\n-\n-        // Meta-Data DSL\n-        // TODO Patrick: how will that work?\n+                    .forEach(catName -> tags.put(\"cat_\" + catName , catName));\n     }\n \n-    private void mapAssets(final Map<String, String> tags, final OnmsAssetRecord assets) {\n-        Objects.requireNonNull(assets);\n-\n-        addTag(tags, AssetTagKey.id, Optional.ofNullable(assets.getId()).map(Object::toString).orElse(null));\n-        addTag(tags, AssetTagKey.category, assets.getCategory());\n-        addTag(tags, AssetTagKey.manufacturer, assets.getManufacturer());\n-        addTag(tags, AssetTagKey.vendor, assets.getVendor());\n-        addTag(tags, AssetTagKey.modelNumber, assets.getModelNumber());\n-        addTag(tags, AssetTagKey.serialNumber, assets.getSerialNumber());\n-        addTag(tags, AssetTagKey.description, assets.getDescription());\n-        addTag(tags, AssetTagKey.circuitId, assets.getCircuitId());\n-        addTag(tags, AssetTagKey.assetNumber, assets.getAssetNumber());\n-        addTag(tags, AssetTagKey.operatingSystem, assets.getOperatingSystem());\n-        addTag(tags, AssetTagKey.rack, assets.getRack());\n-        addTag(tags, AssetTagKey.slot, assets.getSlot());\n-        addTag(tags, AssetTagKey.port, assets.getPort());\n-        addTag(tags, AssetTagKey.region, assets.getRegion());\n-        addTag(tags, AssetTagKey.division, assets.getDivision());\n-        addTag(tags, AssetTagKey.department, assets.getDepartment());\n-        addTag(tags, AssetTagKey.building, assets.getBuilding());\n-        addTag(tags, AssetTagKey.floor, assets.getFloor());\n-        addTag(tags, AssetTagKey.room, assets.getRoom());\n-        addTag(tags, AssetTagKey.vendorPhone, assets.getVendorPhone());\n-        addTag(tags, AssetTagKey.vendorFax, assets.getVendorFax());\n-        addTag(tags, AssetTagKey.vendorAssetNumber, assets.getVendorAssetNumber());\n-        addTag(tags, AssetTagKey.username, assets.getUsername());\n-        addTag(tags, AssetTagKey.password, assets.getPassword());\n-        addTag(tags, AssetTagKey.enable, assets.getEnable());\n-        addTag(tags, AssetTagKey.connection, assets.getConnection());\n-        addTag(tags, AssetTagKey.autoenable, assets.getAutoenable());\n-        addTag(tags, AssetTagKey.lastModifiedBy, assets.getLastModifiedBy());\n-        addTag(tags, AssetTagKey.lastModifiedDate, Optional.ofNullable(assets.getLastModifiedDate()).map(Date::toString).orElse(null));\n-        addTag(tags, AssetTagKey.dateInstalled, assets.getDateInstalled());\n-        addTag(tags, AssetTagKey.lease, assets.getLease());\n-        addTag(tags, AssetTagKey.leaseExpires, assets.getLeaseExpires());\n-        addTag(tags, AssetTagKey.supportPhone, assets.getSupportPhone());\n-        addTag(tags, AssetTagKey.maintcontract, assets.getMaintcontract());\n-        addTag(tags, AssetTagKey.maintContractExpiration, assets.getMaintContractExpiration());\n-        addTag(tags, AssetTagKey.displayCategory, assets.getDisplayCategory());\n-        addTag(tags, AssetTagKey.notifyCategory, assets.getNotifyCategory());\n-        addTag(tags, AssetTagKey.pollerCategory, assets.getPollerCategory());\n-        addTag(tags, AssetTagKey.thresholdCategory, assets.getThresholdCategory());\n-        addTag(tags, AssetTagKey.comment, assets.getComment());\n-        addTag(tags, AssetTagKey.cpu, assets.getCpu());\n-        addTag(tags, AssetTagKey.ram, assets.getRam());\n-        addTag(tags, AssetTagKey.storagectrl, assets.getStoragectrl());\n-        addTag(tags, AssetTagKey.hdd1, assets.getHdd1());\n-        addTag(tags, AssetTagKey.hdd2, assets.getHdd2());\n-        addTag(tags, AssetTagKey.hdd3, assets.getHdd3());\n-        addTag(tags, AssetTagKey.hdd4, assets.getHdd4());\n-        addTag(tags, AssetTagKey.hdd5, assets.getHdd5());\n-        addTag(tags, AssetTagKey.hdd6, assets.getHdd6());\n-        addTag(tags, AssetTagKey.numpowersupplies, assets.getNumpowersupplies());\n-        addTag(tags, AssetTagKey.inputpower, assets.getInputpower());\n-        addTag(tags, AssetTagKey.additionalhardware, assets.getAdditionalhardware());\n-        addTag(tags, AssetTagKey.admin, assets.getAdmin());\n-        addTag(tags, AssetTagKey.snmpcommunity, assets.getSnmpcommunity());\n-        addTag(tags, AssetTagKey.rackunitheight, assets.getRackunitheight());\n-        addTag(tags, AssetTagKey.managedObjectType, assets.getManagedObjectType());\n-        addTag(tags, AssetTagKey.managedObjectInstance, assets.getManagedObjectInstance());\n-        addTag(tags, AssetTagKey.geolocation, Optional.ofNullable(assets.getGeolocation()).map(Object::toString).orElse(null));\n-        addTag(tags, AssetTagKey.vmwareManagedObjectId, assets.getVmwareManagedObjectId());\n-        addTag(tags, AssetTagKey.vmwareManagedEntityType, assets.getVmwareManagedEntityType());\n-        addTag(tags, AssetTagKey.vmwareManagementServer, assets.getVmwareManagementServer());\n-        addTag(tags, AssetTagKey.vmwareTopologyInfo, assets.getVmwareTopologyInfo());\n-        addTag(tags, AssetTagKey.vmwareState, assets.getVmwareState());\n-    }\n-\n-    private void addTag(final Map<String, String> tags, final MetaTagKey key, final String value) {\n-        Optional.ofNullable(value)\n-                .filter((v) -> this.config.isEnabled(key))\n-                .ifPresent((v) -> tags.put(key.name(), v));\n-    }\n-\n-    private void addTag(final Map<String, String> tags, final AssetTagKey key, final String value){\n-        Optional.ofNullable(value)\n-                .filter((v) -> this.config.isEnabled(key))\n-                .ifPresent((v) -> tags.put(key.name(), v));\n+    public Scope getScopeForResource(final CollectionResource resource) {\n+        if (resource == null) {\n+            return EmptyScope.EMPTY;\n+        }\n+        return new ObjectScope<>(resource)\n+                .map(\"resource\", \"criteria\", (r) -> Optional.ofNullable(getNodeCriteriaFromResource(resource)))\n+                .map(\"resource\", \"label\", (r) -> Optional.ofNullable(r.getInterfaceLabel()));\n     }\n \n     private Optional<OnmsNode> getNode(String nodeCriteria) {\n-            try {\n-                return Optional.ofNullable(nodeDao.get(nodeCriteria));\n-            } catch (Exception e) {\n-                LOG.error(\"error while trying to match node from {}\", nodeCriteria);\n-            }\n+        if (nodeCriteria == null || nodeCriteria.trim().isEmpty()) {\n             return Optional.empty();\n+        }\n+        try {\n+            return Optional.ofNullable(nodeDao.get(nodeCriteria));\n+        } catch (Exception e) {\n+            LOG.error(\"error while trying to match node from {}\", nodeCriteria);\n+        }\n+        return Optional.empty();\n     }\n \n     private String getNodeCriteriaFromResource(CollectionResource resource) {\n", "next_change": {"commit": "085d523f8fda8767ddf4c9aca130fdf38731ff70", "changed_code": [{"header": "diff --git a/features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/persistence/MetaTagDataLoader.java b/features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/persistence/MetaTagDataLoader.java\nindex f43defc50b3..14d63c36d5b 100644\n--- a/features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/persistence/MetaTagDataLoader.java\n+++ b/features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/persistence/MetaTagDataLoader.java\n", "chunk": "@@ -147,7 +149,7 @@ public class MetaTagDataLoader extends CacheLoader<CollectionResource, Map<Strin\n         try {\n             return Optional.ofNullable(nodeDao.get(nodeCriteria));\n         } catch (Exception e) {\n-            LOG.error(\"error while trying to match node from {}\", nodeCriteria);\n+            LOG.error(\"Error while trying to load node for criteria: {}. No node will be returned.\", nodeCriteria, e);\n         }\n         return Optional.empty();\n     }\n", "next_change": {"commit": "ddd150165e98160a3424db4c792a83fe059db55a", "changed_code": [{"header": "diff --git a/features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/persistence/MetaTagDataLoader.java b/features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/persistence/MetaTagDataLoader.java\nindex 14d63c36d5b..4cfdbbcdeb2 100644\n--- a/features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/persistence/MetaTagDataLoader.java\n+++ b/features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/persistence/MetaTagDataLoader.java\n", "chunk": "@@ -149,7 +135,7 @@ public class MetaTagDataLoader extends CacheLoader<CollectionResource, Map<Strin\n         try {\n             return Optional.ofNullable(nodeDao.get(nodeCriteria));\n         } catch (Exception e) {\n-            LOG.error(\"Error while trying to load node for criteria: {}. No node will be returned.\", nodeCriteria, e);\n+            LOG.error(\"error while trying to match node from {}\", nodeCriteria);\n         }\n         return Optional.empty();\n     }\n", "next_change": {"commit": "6ddcf6cc3f29ac1a0cd01f210eee14490c8cd27a", "changed_code": [{"header": "diff --git a/features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/persistence/MetaTagDataLoader.java b/features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/persistence/MetaTagDataLoader.java\nindex 4cfdbbcdeb2..89e79492eb1 100644\n--- a/features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/persistence/MetaTagDataLoader.java\n+++ b/features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/persistence/MetaTagDataLoader.java\n", "chunk": "@@ -135,7 +135,7 @@ public class MetaTagDataLoader extends CacheLoader<CollectionResource, Map<Strin\n         try {\n             return Optional.ofNullable(nodeDao.get(nodeCriteria));\n         } catch (Exception e) {\n-            LOG.error(\"error while trying to match node from {}\", nodeCriteria);\n+            LOG.error(\"Error while trying to load node for criteria: {}. No node will be returned.\", nodeCriteria, e);\n         }\n         return Optional.empty();\n     }\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTk1NzY3MQ==", "url": "https://github.com/OpenNMS/opennms/pull/3019#discussion_r429957671", "body": "I think we should move this to the Meta-Data DSL instead of defining it here.\r\n\r\nWe could add these to a new \"asset\" context and make them available in expressions like `${asset:operatingSystem}`.", "bodyText": "I think we should move this to the Meta-Data DSL instead of defining it here.\nWe could add these to a new \"asset\" context and make them available in expressions like ${asset:operatingSystem}.", "bodyHTML": "<p dir=\"auto\">I think we should move this to the Meta-Data DSL instead of defining it here.</p>\n<p dir=\"auto\">We could add these to a new \"asset\" context and make them available in expressions like <code>${asset:operatingSystem}</code>.</p>", "author": "j-white", "createdAt": "2020-05-25T14:15:22Z", "path": "features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/MetaTagConfiguration.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+package org.opennms.netmgt.timeseries.integration;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+/** Defines which additional meta tags should be exposed to the timeseries integration plugin. */\n+public class MetaTagConfiguration {\n+\n+    final static String PREFIX = \"org.opennms.timeseries.tin.metatags\";\n+\n+    /** properties defined in opennms.properties */\n+    public enum PropertyKey {\n+        assets,\n+        tags,\n+        categories\n+    }\n+\n+    public enum MetaTagKey {\n+        nodeLabel,\n+        location,\n+        sysObjectID,\n+        foreignSource,\n+        foreignId,\n+        nodeCriteria,\n+        ipAddress, // for response time resources\n+        service, // for response time resources\n+        ifDescr, // for interface resources\n+        ifAlias, // for interface resources\n+        resourceLabel\n+    }\n+\n+    // TODO: Patrick: do we want to merge MetaTagKey & AssetTagKey?", "originalCommit": "a5449bfbe4b996de47c6cc5ebb064ad00aeb9775", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "87c3163bbd5405f2f2fe297065420f5631058e98", "changed_code": [{"header": "diff --git a/features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/MetaTagConfiguration.java b/features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/MetaTagConfiguration.java\nindex f9240767388..a8345469bed 100644\n--- a/features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/MetaTagConfiguration.java\n+++ b/features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/MetaTagConfiguration.java\n", "chunk": "@@ -29,150 +29,66 @@ package org.opennms.netmgt.timeseries.integration;\n \n import java.util.Arrays;\n import java.util.Collections;\n+import java.util.HashMap;\n import java.util.Map;\n import java.util.Set;\n import java.util.stream.Collectors;\n \n-/** Defines which additional meta tags should be exposed to the timeseries integration plugin. */\n+/**\n+ * Defines which additional meta tags should be exposed to the timeseries integration plugin.\n+ */\n public class MetaTagConfiguration {\n \n-    final static String PREFIX = \"org.opennms.timeseries.tin.metatags\";\n+    final static String CONFIG_PREFIX = \"org.opennms.timeseries.tin.metatags\";\n+    final static String CONFIG_KEY_FOR_CATEGORIES = CONFIG_PREFIX + \".categories\";\n+    final static String CONFIG_PREFIX_FOR_TAGS = CONFIG_PREFIX + \".tag.\";\n \n-    /** properties defined in opennms.properties */\n+    /**\n+     * properties defined in opennms.properties\n+     */\n     public enum PropertyKey {\n         assets,\n-        tags,\n+        tag,\n         categories\n     }\n-\n-    public enum MetaTagKey {\n-        nodeLabel,\n-        location,\n-        sysObjectID,\n-        foreignSource,\n-        foreignId,\n-        nodeCriteria,\n-        ipAddress, // for response time resources\n-        service, // for response time resources\n-        ifDescr, // for interface resources\n-        ifAlias, // for interface resources\n-        resourceLabel\n-    }\n-\n-    // TODO: Patrick: do we want to merge MetaTagKey & AssetTagKey?\n-    public enum AssetTagKey {\n-        id,\n-        category,\n-        manufacturer,\n-        vendor,\n-        modelNumber,\n-        serialNumber,\n-        description,\n-        circuitId,\n-        assetNumber,\n-        operatingSystem,\n-        rack,\n-        slot,\n-        port,\n-        region,\n-        division,\n-        department,\n-        building,\n-        floor,\n-        room,\n-        vendorPhone,\n-        vendorFax,\n-        vendorAssetNumber,\n-        username,\n-        password,\n-        enable,\n-        connection,\n-        autoenable,\n-        lastModifiedBy,\n-        lastModifiedDate,\n-        dateInstalled,\n-        lease,\n-        leaseExpires,\n-        supportPhone,\n-        maintcontract,\n-        maintContractExpiration,\n-        displayCategory,\n-        notifyCategory,\n-        pollerCategory,\n-        thresholdCategory,\n-        comment,\n-        cpu,\n-        ram,\n-        storagectrl,\n-        hdd1,\n-        hdd2,\n-        hdd3,\n-        hdd4,\n-        hdd5,\n-        hdd6,\n-        numpowersupplies,\n-        inputpower,\n-        additionalhardware,\n-        admin,\n-        snmpcommunity,\n-        rackunitheight,\n-        managedObjectType,\n-        managedObjectInstance,\n-        geolocation,\n-        vmwareManagedObjectId,\n-        vmwareManagedEntityType,\n-        vmwareManagementServer,\n-        vmwareTopologyInfo,\n-        vmwareState;\n-    }\n-\n-    private final Set<MetaTagKey> enabledMetaTags;\n     private final Set<String> enabledCategories;\n-    private final Set<AssetTagKey> enabledAssets;\n \n-    public MetaTagConfiguration(final Map<String, String> properties) {\n-\n-        final Set<String> configuredAssets = getAsList(getProperty(properties, PropertyKey.assets));\n-        enabledAssets = Arrays\n-                .stream(AssetTagKey.values())\n-                .filter(key -> configuredAssets.contains(key.name()))\n-                .collect(Collectors.toSet());\n+    private final Map<String, String> configuredMetaTags;\n \n-        enabledCategories = getAsList(getProperty(properties, PropertyKey.categories));\n-\n-        final Set<String> configuredTags = getAsList(getProperty(properties, PropertyKey.tags));\n-        enabledMetaTags = Arrays\n-                .stream(MetaTagKey.values())\n-                .filter(key -> configuredTags.contains(key.name()))\n-                .collect(Collectors.toSet());\n-\n-        // TODO: Patrick Meta-Data DSL expressions to build tags\n-    }\n+    public MetaTagConfiguration(final Map<String, String> properties) {\n \n-    public boolean isEnabled(final AssetTagKey key) {\n-        return enabledAssets.contains(key);\n+        this.enabledCategories = findConfiguredCategories(properties);\n+        this.configuredMetaTags = findConfiguredMetaTags(properties);\n     }\n \n-    public boolean isEnabled(final MetaTagKey key) {\n-        return enabledMetaTags.contains(key);\n+    public Map<String, String> getConfiguredMetaTags() {\n+        return this.configuredMetaTags;\n     }\n \n     public boolean isCategoryEnabled(final String category) {\n         return this.enabledCategories.contains(category);\n     }\n \n-    private Set<String> getAsList(final String value) {\n-        if(value == null || value.trim().isEmpty()) {\n+    private Map<String, String> findConfiguredMetaTags(final Map<String, String> properties) {\n+        Map<String, String> filteredMap = new HashMap<>();\n+        properties\n+                .entrySet()\n+                .stream()\n+                .filter(e -> e.getKey().startsWith(MetaTagConfiguration.CONFIG_PREFIX_FOR_TAGS))\n+                .forEach((entry) -> filteredMap.put(entry.getKey().substring(MetaTagConfiguration.CONFIG_PREFIX_FOR_TAGS.length()), entry.getValue()));\n+        return filteredMap;\n+    }\n+\n+    private Set<String> findConfiguredCategories(final Map<String, String> properties) {\n+        String value = properties.get(CONFIG_KEY_FOR_CATEGORIES);\n+\n+        if (value == null || value.trim().isEmpty()) {\n             return Collections.emptySet();\n         }\n         return Arrays\n                 .stream(value.split(\",\"))\n                 .map(String::trim)\n                 .filter(s -> !s.isEmpty())\n-        .collect(Collectors.toSet());\n-    }\n-\n-    private String getProperty(final Map<String, String> properties, final PropertyKey property) {\n-        return properties.get(PREFIX + \".\" + property.name());\n+                .collect(Collectors.toSet());\n     }\n }\n", "next_change": {"commit": "9878e614701c8476e038cf6b992822bc1ddc71a1", "changed_code": [{"header": "diff --git a/features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/MetaTagConfiguration.java b/features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/MetaTagConfiguration.java\nindex a8345469bed..97c832df1a1 100644\n--- a/features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/MetaTagConfiguration.java\n+++ b/features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/MetaTagConfiguration.java\n", "chunk": "@@ -78,17 +74,4 @@ public class MetaTagConfiguration {\n                 .forEach((entry) -> filteredMap.put(entry.getKey().substring(MetaTagConfiguration.CONFIG_PREFIX_FOR_TAGS.length()), entry.getValue()));\n         return filteredMap;\n     }\n-\n-    private Set<String> findConfiguredCategories(final Map<String, String> properties) {\n-        String value = properties.get(CONFIG_KEY_FOR_CATEGORIES);\n-\n-        if (value == null || value.trim().isEmpty()) {\n-            return Collections.emptySet();\n-        }\n-        return Arrays\n-                .stream(value.split(\",\"))\n-                .map(String::trim)\n-                .filter(s -> !s.isEmpty())\n-                .collect(Collectors.toSet());\n-    }\n }\n", "next_change": {"commit": "af869d2b4d592e25c30741da94f45ab9ca6df18e", "changed_code": [{"header": "diff --git a/features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/MetaTagConfiguration.java b/features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/MetaTagConfiguration.java\nindex 97c832df1a1..09c3157c520 100644\n--- a/features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/MetaTagConfiguration.java\n+++ b/features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/MetaTagConfiguration.java\n", "chunk": "@@ -70,8 +70,10 @@ public class MetaTagConfiguration {\n         properties\n                 .entrySet()\n                 .stream()\n-                .filter(e -> e.getKey().startsWith(MetaTagConfiguration.CONFIG_PREFIX_FOR_TAGS))\n-                .forEach((entry) -> filteredMap.put(entry.getKey().substring(MetaTagConfiguration.CONFIG_PREFIX_FOR_TAGS.length()), entry.getValue()));\n+                .flatMap((entry) -> StringUtils.truncatePrefix(entry.getKey(), MetaTagConfiguration.CONFIG_PREFIX_FOR_TAGS)\n+                                               .map(Stream::of)\n+                                               .orElseGet(Stream::empty))\n+                .collect(Collectors.toMap((entry) -> entry.getKey(), (entry) -> entry.getValue()));\n         return filteredMap;\n     }\n }\n", "next_change": {"commit": "3f13ae9be5dbbf0424ce3c30e3abab5f10d08c5f", "changed_code": [{"header": "diff --git a/features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/MetaTagConfiguration.java b/features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/MetaTagConfiguration.java\nindex 09c3157c520..4145c28b740 100644\n--- a/features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/MetaTagConfiguration.java\n+++ b/features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/MetaTagConfiguration.java\n", "chunk": "@@ -67,13 +60,10 @@ public class MetaTagConfiguration {\n \n     private Map<String, String> findConfiguredMetaTags(final Map<String, String> properties) {\n         Map<String, String> filteredMap = new HashMap<>();\n-        properties\n+        return properties\n                 .entrySet()\n                 .stream()\n-                .flatMap((entry) -> StringUtils.truncatePrefix(entry.getKey(), MetaTagConfiguration.CONFIG_PREFIX_FOR_TAGS)\n-                                               .map(Stream::of)\n-                                               .orElseGet(Stream::empty))\n-                .collect(Collectors.toMap((entry) -> entry.getKey(), (entry) -> entry.getValue()));\n-        return filteredMap;\n+                .filter(e -> e.getKey().startsWith(MetaTagConfiguration.CONFIG_PREFIX_FOR_TAGS))\n+                .collect(Collectors.toMap((entry) -> entry.getKey().substring(MetaTagConfiguration.CONFIG_PREFIX_FOR_TAGS.length()), Map.Entry::getValue));\n     }\n }\n", "next_change": null}]}}]}}]}}]}}, {"oid": "be46a55a9d69682d953bac0dcb85be0c1af410d4", "url": "https://github.com/OpenNMS/opennms/commit/be46a55a9d69682d953bac0dcb85be0c1af410d4", "message": "NMS-12730 Meta-data tag enhancements to Time Series Storage API: cache config & categories", "committedDate": "2020-05-25T21:30:42Z", "type": "commit"}, {"oid": "87c3163bbd5405f2f2fe297065420f5631058e98", "url": "https://github.com/OpenNMS/opennms/commit/87c3163bbd5405f2f2fe297065420f5631058e98", "message": "NMS-12730 Meta-data tag enhancements to Time Series Storage API: use entity DSL", "committedDate": "2020-05-27T16:40:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQwNTEwMg==", "url": "https://github.com/OpenNMS/opennms/pull/3019#discussion_r431405102", "body": "I would strongly advocate to put this into the \"asset\" context.\r\n\r\nI would like to see the assets stored as meta-data itself. By putting it in its own context we can avoid a rename later on.\r\n\r\nAnd we should update to docs for these additional keys.", "bodyText": "I would strongly advocate to put this into the \"asset\" context.\nI would like to see the assets stored as meta-data itself. By putting it in its own context we can avoid a rename later on.\nAnd we should update to docs for these additional keys.", "bodyHTML": "<p dir=\"auto\">I would strongly advocate to put this into the \"asset\" context.</p>\n<p dir=\"auto\">I would like to see the assets stored as meta-data itself. By putting it in its own context we can avoid a rename later on.</p>\n<p dir=\"auto\">And we should update to docs for these additional keys.</p>", "author": "fooker", "createdAt": "2020-05-27T19:53:13Z", "path": "core/ipc/rpc/utils/src/main/java/org/opennms/core/rpc/utils/mate/EntityScopeProviderImpl.java", "diffHunk": "@@ -87,11 +89,73 @@ public Scope getScopeForNode(final Integer nodeId) {\n                             .map(\"node\", \"sys-location\", (n) -> Optional.ofNullable(n.getSysLocation()))\n                             .map(\"node\", \"sys-contact\", (n) -> Optional.ofNullable(n.getSysContact()))\n                             .map(\"node\", \"sys-description\", (n) -> Optional.ofNullable(n.getSysDescription()))\n+                            .map(\"node\", \"sys-objectid\", (n) -> Optional.ofNullable(n.getSysObjectId()))\n                             .map(\"node\", \"location\", (n) -> Optional.ofNullable(n.getLocation().getLocationName()))\n                             .map(\"node\", \"area\", (n) -> Optional.ofNullable(n.getLocation().getMonitoringArea()))\n-            );\n+                            .map(\"node\", \"category\" , (n) -> Optional.ofNullable(node.getAssetRecord()).map(OnmsAssetRecord::getCategory))", "originalCommit": "87c3163bbd5405f2f2fe297065420f5631058e98", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQwODg2OQ==", "url": "https://github.com/OpenNMS/opennms/pull/3019#discussion_r431408869", "bodyText": "I would strongly advocate to put this into the \"asset\" context.\nSure, I have no strong opinion on that. You propose to create a different scope \"asset\"?\n\n\nAnd we should update to docs for these additional keys.\n\ud83d\udc4d will do that once we have settled on all attributes. There still might be a few missing.", "author": "patrick-schweizer", "createdAt": "2020-05-27T20:00:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQwNTEwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQzMjgzNA==", "url": "https://github.com/OpenNMS/opennms/pull/3019#discussion_r431432834", "bodyText": "@fooker is that how you were envisioning the asset scope?", "author": "patrick-schweizer", "createdAt": "2020-05-27T20:48:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQwNTEwMg=="}], "type": "inlineReview", "revised_code": {"commit": "95ca2867e403071e5c409cd3528c3e695ecaeea4", "changed_code": [{"header": "diff --git a/core/ipc/rpc/utils/src/main/java/org/opennms/core/rpc/utils/mate/EntityScopeProviderImpl.java b/core/ipc/rpc/utils/src/main/java/org/opennms/core/rpc/utils/mate/EntityScopeProviderImpl.java\nindex 7944eb2189d..12562c41a74 100644\n--- a/core/ipc/rpc/utils/src/main/java/org/opennms/core/rpc/utils/mate/EntityScopeProviderImpl.java\n+++ b/core/ipc/rpc/utils/src/main/java/org/opennms/core/rpc/utils/mate/EntityScopeProviderImpl.java\n", "chunk": "@@ -91,70 +91,88 @@ public class EntityScopeProviderImpl implements EntityScopeProvider {\n                             .map(\"node\", \"sys-description\", (n) -> Optional.ofNullable(n.getSysDescription()))\n                             .map(\"node\", \"sys-objectid\", (n) -> Optional.ofNullable(n.getSysObjectId()))\n                             .map(\"node\", \"location\", (n) -> Optional.ofNullable(n.getLocation().getLocationName()))\n-                            .map(\"node\", \"area\", (n) -> Optional.ofNullable(n.getLocation().getMonitoringArea()))\n-                            .map(\"node\", \"category\" , (n) -> Optional.ofNullable(node.getAssetRecord()).map(OnmsAssetRecord::getCategory))\n-                            .map(\"node\", \"vendor\" , (n) -> Optional.ofNullable(node.getAssetRecord()).map(OnmsAssetRecord::getVendor))\n-                            .map(\"node\", \"manufacturer\" , (n) -> Optional.ofNullable(node.getAssetRecord()).map(OnmsAssetRecord::getManufacturer))\n-                            .map(\"node\", \"vendor\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getVendor))\n-                            .map(\"node\", \"model-number\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getModelNumber))\n-                            .map(\"node\", \"serial-number\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getSerialNumber))\n-                            .map(\"node\", \"description\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getDescription))\n-                            .map(\"node\", \"circuit-id\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getCircuitId))\n-                            .map(\"node\", \"asset-number\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getAssetNumber))\n-                            .map(\"node\", \"operating-system\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getOperatingSystem))\n-                            .map(\"node\", \"rack\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getRack))\n-                            .map(\"node\", \"slot\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getSlot))\n-                            .map(\"node\", \"port\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getPort))\n-                            .map(\"node\", \"region\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getRegion))\n-                            .map(\"node\", \"division\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getDivision))\n-                            .map(\"node\", \"department\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getDepartment))\n-                            .map(\"node\", \"building\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getBuilding))\n-                            .map(\"node\", \"floor\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getFloor))\n-                            .map(\"node\", \"room\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getRoom))\n-                            .map(\"node\", \"vendor-phone\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getVendorPhone))\n-                            .map(\"node\", \"vendor-fax\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getVendorFax))\n-                            .map(\"node\", \"vendor-asset-number\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getVendorAssetNumber))\n-                            .map(\"node\", \"username\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getUsername))\n-                            .map(\"node\", \"password\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getPassword))\n-                            .map(\"node\", \"enable\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getEnable))\n-                            .map(\"node\", \"connection\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getConnection))\n-                            .map(\"node\", \"autoenable\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getAutoenable))\n-                            .map(\"node\", \"last-modified-by\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getLastModifiedBy))\n-                            .map(\"node\", \"last-modified-date\", (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getLastModifiedDate).map(Date::toString))\n-                            .map(\"node\", \"date-installed\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getDateInstalled))\n-                            .map(\"node\", \"lease\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getLease))\n-                            .map(\"node\", \"lease-expires\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getLeaseExpires))\n-                            .map(\"node\", \"support-phone\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getSupportPhone))\n-                            .map(\"node\", \"maintcontract\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getMaintcontract))\n-                            .map(\"node\", \"maint-contract-expiration\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getMaintContractExpiration))\n-                            .map(\"node\", \"display-category\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getDisplayCategory))\n-                            .map(\"node\", \"notify-category\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getNotifyCategory))\n-                            .map(\"node\", \"poller-category\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getPollerCategory))\n-                            .map(\"node\", \"threshold-category\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getThresholdCategory))\n-                            .map(\"node\", \"comment\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getComment))\n-                            .map(\"node\", \"cpu\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getCpu))\n-                            .map(\"node\", \"ram\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getRam))\n-                            .map(\"node\", \"storagectrl\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getStoragectrl))\n-                            .map(\"node\", \"hdd1\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getHdd1))\n-                            .map(\"node\", \"hdd2\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getHdd2))\n-                            .map(\"node\", \"hdd3\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getHdd3))\n-                            .map(\"node\", \"hdd4\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getHdd4))\n-                            .map(\"node\", \"hdd5\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getHdd5))\n-                            .map(\"node\", \"hdd6\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getHdd6))\n-                            .map(\"node\", \"numpowersupplies\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getNumpowersupplies))\n-                            .map(\"node\", \"inputpower\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getInputpower))\n-                            .map(\"node\", \"additionalhardware\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getAdditionalhardware))\n-                            .map(\"node\", \"admin\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getAdmin))\n-                            .map(\"node\", \"snmpcommunity\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getSnmpcommunity))\n-                            .map(\"node\", \"rackunitheight\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getRackunitheight))\n-                            .map(\"node\", \"managed-object-type\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getManagedObjectType))\n-                            .map(\"node\", \"managed-object-instance\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getManagedObjectInstance))\n-                            .map(\"node\", \"geolocation\", (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getGeolocation).map(Object::toString))\n-                            .map(\"node\", \"vmware-managed-object-id\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getVmwareManagedObjectId))\n-                            .map(\"node\", \"vmware-managed-entity-type\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getVmwareManagedEntityType))\n-                            .map(\"node\", \"vmware-management-server\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getVmwareManagementServer))\n-                            .map(\"node\", \"vmware-topology-info\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getVmwareTopologyInfo))\n-                            .map(\"node\", \"vmware-state\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getVmwareState)));\n+                            .map(\"node\", \"area\", (n) -> Optional.ofNullable(n.getLocation().getMonitoringArea())));\n+        });\n+        return metaDataScope;\n+    }\n+\n+    @Override\n+    public Scope getScopeForAssets(final Integer nodeId) {\n+        if (nodeId == null) {\n+            return EmptyScope.EMPTY;\n+        }\n+\n+        final Scope metaDataScope = this.sessionUtils.withReadOnlyTransaction(() -> {\n+            final OnmsNode node = nodeDao.get(nodeId);\n+            if (node == null) {\n+                return EmptyScope.EMPTY;\n+            }\n+\n+            return new FallbackScope(transform(node.getMetaData()),\n+                    new ObjectScope<>(node)\n+                            .map(\"asset\", \"category\" , (n) -> Optional.ofNullable(node.getAssetRecord()).map(OnmsAssetRecord::getCategory))\n+                            .map(\"asset\", \"vendor\" , (n) -> Optional.ofNullable(node.getAssetRecord()).map(OnmsAssetRecord::getVendor))\n+                            .map(\"asset\", \"manufacturer\" , (n) -> Optional.ofNullable(node.getAssetRecord()).map(OnmsAssetRecord::getManufacturer))\n+                            .map(\"asset\", \"vendor\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getVendor))\n+                            .map(\"asset\", \"model-number\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getModelNumber))\n+                            .map(\"asset\", \"serial-number\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getSerialNumber))\n+                            .map(\"asset\", \"description\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getDescription))\n+                            .map(\"asset\", \"circuit-id\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getCircuitId))\n+                            .map(\"asset\", \"asset-number\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getAssetNumber))\n+                            .map(\"asset\", \"operating-system\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getOperatingSystem))\n+                            .map(\"asset\", \"rack\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getRack))\n+                            .map(\"asset\", \"slot\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getSlot))\n+                            .map(\"asset\", \"port\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getPort))\n+                            .map(\"asset\", \"region\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getRegion))\n+                            .map(\"asset\", \"division\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getDivision))\n+                            .map(\"asset\", \"department\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getDepartment))\n+                            .map(\"asset\", \"building\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getBuilding))\n+                            .map(\"asset\", \"floor\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getFloor))\n+                            .map(\"asset\", \"room\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getRoom))\n+                            .map(\"asset\", \"vendor-phone\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getVendorPhone))\n+                            .map(\"asset\", \"vendor-fax\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getVendorFax))\n+                            .map(\"asset\", \"vendor-asset-number\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getVendorAssetNumber))\n+                            .map(\"asset\", \"username\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getUsername))\n+                            .map(\"asset\", \"password\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getPassword))\n+                            .map(\"asset\", \"enable\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getEnable))\n+                            .map(\"asset\", \"connection\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getConnection))\n+                            .map(\"asset\", \"autoenable\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getAutoenable))\n+                            .map(\"asset\", \"last-modified-by\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getLastModifiedBy))\n+                            .map(\"asset\", \"last-modified-date\", (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getLastModifiedDate).map(Date::toString))\n+                            .map(\"asset\", \"date-installed\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getDateInstalled))\n+                            .map(\"asset\", \"lease\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getLease))\n+                            .map(\"asset\", \"lease-expires\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getLeaseExpires))\n+                            .map(\"asset\", \"support-phone\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getSupportPhone))\n+                            .map(\"asset\", \"maintcontract\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getMaintcontract))\n+                            .map(\"asset\", \"maint-contract-expiration\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getMaintContractExpiration))\n+                            .map(\"asset\", \"display-category\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getDisplayCategory))\n+                            .map(\"asset\", \"notify-category\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getNotifyCategory))\n+                            .map(\"asset\", \"poller-category\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getPollerCategory))\n+                            .map(\"asset\", \"threshold-category\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getThresholdCategory))\n+                            .map(\"asset\", \"comment\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getComment))\n+                            .map(\"asset\", \"cpu\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getCpu))\n+                            .map(\"asset\", \"ram\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getRam))\n+                            .map(\"asset\", \"storagectrl\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getStoragectrl))\n+                            .map(\"asset\", \"hdd1\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getHdd1))\n+                            .map(\"asset\", \"hdd2\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getHdd2))\n+                            .map(\"asset\", \"hdd3\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getHdd3))\n+                            .map(\"asset\", \"hdd4\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getHdd4))\n+                            .map(\"asset\", \"hdd5\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getHdd5))\n+                            .map(\"asset\", \"hdd6\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getHdd6))\n+                            .map(\"asset\", \"numpowersupplies\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getNumpowersupplies))\n+                            .map(\"asset\", \"inputpower\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getInputpower))\n+                            .map(\"asset\", \"additionalhardware\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getAdditionalhardware))\n+                            .map(\"asset\", \"admin\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getAdmin))\n+                            .map(\"asset\", \"snmpcommunity\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getSnmpcommunity))\n+                            .map(\"asset\", \"rackunitheight\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getRackunitheight))\n+                            .map(\"asset\", \"managed-object-type\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getManagedObjectType))\n+                            .map(\"asset\", \"managed-object-instance\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getManagedObjectInstance))\n+                            .map(\"asset\", \"geolocation\", (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getGeolocation).map(Object::toString))\n+                            .map(\"asset\", \"vmware-managed-object-id\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getVmwareManagedObjectId))\n+                            .map(\"asset\", \"vmware-managed-entity-type\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getVmwareManagedEntityType))\n+                            .map(\"asset\", \"vmware-management-server\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getVmwareManagementServer))\n+                            .map(\"asset\", \"vmware-topology-info\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getVmwareTopologyInfo))\n+                            .map(\"asset\", \"vmware-state\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getVmwareState)));\n         });\n         return metaDataScope;\n     }\n", "next_change": {"commit": "0bd5f470cd90ff5f185d78fd0da852444be743a3", "changed_code": [{"header": "diff --git a/core/ipc/rpc/utils/src/main/java/org/opennms/core/rpc/utils/mate/EntityScopeProviderImpl.java b/core/ipc/rpc/utils/src/main/java/org/opennms/core/rpc/utils/mate/EntityScopeProviderImpl.java\nindex 12562c41a74..78e91d87da6 100644\n--- a/core/ipc/rpc/utils/src/main/java/org/opennms/core/rpc/utils/mate/EntityScopeProviderImpl.java\n+++ b/core/ipc/rpc/utils/src/main/java/org/opennms/core/rpc/utils/mate/EntityScopeProviderImpl.java\n", "chunk": "@@ -71,110 +79,112 @@ public class EntityScopeProviderImpl implements EntityScopeProvider {\n             return EmptyScope.EMPTY;\n         }\n \n-        final Scope metaDataScope = this.sessionUtils.withReadOnlyTransaction(() -> {\n+        return this.sessionUtils.withReadOnlyTransaction(() -> {\n             final OnmsNode node = nodeDao.get(nodeId);\n             if (node == null) {\n                 return EmptyScope.EMPTY;\n             }\n \n-            return new FallbackScope(transform(node.getMetaData()),\n-                    new ObjectScope<>(node)\n-                            .map(\"node\", \"label\", (n) -> Optional.ofNullable(n.getLabel()))\n-                            .map(\"node\", \"foreign-source\", (n) -> Optional.ofNullable(n.getForeignSource()))\n-                            .map(\"node\", \"foreign-id\", (n) -> Optional.ofNullable(n.getForeignId()))\n-                            .map(\"node\", \"netbios-domain\", (n) -> Optional.ofNullable(n.getNetBiosDomain()))\n-                            .map(\"node\", \"netbios-name\", (n) -> Optional.ofNullable(n.getNetBiosName()))\n-                            .map(\"node\", \"os\", (n) -> Optional.ofNullable(n.getOperatingSystem()))\n-                            .map(\"node\", \"sys-name\", (n) -> Optional.ofNullable(n.getSysName()))\n-                            .map(\"node\", \"sys-location\", (n) -> Optional.ofNullable(n.getSysLocation()))\n-                            .map(\"node\", \"sys-contact\", (n) -> Optional.ofNullable(n.getSysContact()))\n-                            .map(\"node\", \"sys-description\", (n) -> Optional.ofNullable(n.getSysDescription()))\n-                            .map(\"node\", \"sys-objectid\", (n) -> Optional.ofNullable(n.getSysObjectId()))\n-                            .map(\"node\", \"location\", (n) -> Optional.ofNullable(n.getLocation().getLocationName()))\n-                            .map(\"node\", \"area\", (n) -> Optional.ofNullable(n.getLocation().getMonitoringArea())));\n-        });\n-        return metaDataScope;\n-    }\n+            List<Scope> scopes = new ArrayList<>();\n+            scopes.add(transform(node.getMetaData()));\n \n-    @Override\n-    public Scope getScopeForAssets(final Integer nodeId) {\n-        if (nodeId == null) {\n-            return EmptyScope.EMPTY;\n-        }\n+            Scope nodeScope = new ObjectScope<>(node)\n+                    .map(NODE, \"criteria\", this::getNodeCriteria)\n+                    .map(NODE, \"label\", (n) -> Optional.ofNullable(n.getLabel()))\n+                    .map(NODE, \"foreign-source\", (n) -> Optional.ofNullable(n.getForeignSource()))\n+                    .map(NODE, \"foreign-id\", (n) -> Optional.ofNullable(n.getForeignId()))\n+                    .map(NODE, \"netbios-domain\", (n) -> Optional.ofNullable(n.getNetBiosDomain()))\n+                    .map(NODE, \"netbios-name\", (n) -> Optional.ofNullable(n.getNetBiosName()))\n+                    .map(NODE, \"os\", (n) -> Optional.ofNullable(n.getOperatingSystem()))\n+                    .map(NODE, \"sys-name\", (n) -> Optional.ofNullable(n.getSysName()))\n+                    .map(NODE, \"sys-location\", (n) -> Optional.ofNullable(n.getSysLocation()))\n+                    .map(NODE, \"sys-contact\", (n) -> Optional.ofNullable(n.getSysContact()))\n+                    .map(NODE, \"sys-description\", (n) -> Optional.ofNullable(n.getSysDescription()))\n+                    .map(NODE, \"sys-object-id\", (n) -> Optional.ofNullable(n.getSysObjectId()))\n+                    .map(NODE, \"location\", (n) -> Optional.ofNullable(n.getLocation().getLocationName()))\n+                    .map(NODE, \"area\", (n) -> Optional.ofNullable(n.getLocation().getMonitoringArea()));\n+            scopes.add(nodeScope);\n \n-        final Scope metaDataScope = this.sessionUtils.withReadOnlyTransaction(() -> {\n-            final OnmsNode node = nodeDao.get(nodeId);\n-            if (node == null) {\n-                return EmptyScope.EMPTY;\n+            if (node.getAssetRecord() == null) {\n+                Scope assetScope = new ObjectScope<>(node.getAssetRecord())\n+                        .map(ASSET, \"category\", (a) -> Optional.ofNullable(a.getCategory()))\n+                        .map(ASSET, \"vendor\", (a) -> Optional.ofNullable(a.getVendor()))\n+                        .map(ASSET, \"manufacturer\", (a) -> Optional.ofNullable(a.getManufacturer()))\n+                        .map(ASSET, \"vendor\", (a) -> Optional.ofNullable(a.getVendor()))\n+                        .map(ASSET, \"model-number\", (a) -> Optional.ofNullable(a.getModelNumber()))\n+                        .map(ASSET, \"serial-number\", (a) -> Optional.ofNullable(a.getSerialNumber()))\n+                        .map(ASSET, \"description\", (a) -> Optional.ofNullable(a.getDescription()))\n+                        .map(ASSET, \"circuit-id\", (a) -> Optional.ofNullable(a.getCircuitId()))\n+                        .map(ASSET, \"asset-number\", (a) -> Optional.ofNullable(a.getAssetNumber()))\n+                        .map(ASSET, \"operating-system\", (a) -> Optional.ofNullable(a.getOperatingSystem()))\n+                        .map(ASSET, \"rack\", (a) -> Optional.ofNullable(a.getRack()))\n+                        .map(ASSET, \"slot\", (a) -> Optional.ofNullable(a.getSlot()))\n+                        .map(ASSET, \"port\", (a) -> Optional.ofNullable(a.getPort()))\n+                        .map(ASSET, \"region\", (a) -> Optional.ofNullable(a.getRegion()))\n+                        .map(ASSET, \"division\", (a) -> Optional.ofNullable(a.getDivision()))\n+                        .map(ASSET, \"department\", (a) -> Optional.ofNullable(a.getDepartment()))\n+                        .map(ASSET, \"building\", (a) -> Optional.ofNullable(a.getBuilding()))\n+                        .map(ASSET, \"floor\", (a) -> Optional.ofNullable(a.getFloor()))\n+                        .map(ASSET, \"room\", (a) -> Optional.ofNullable(a.getRoom()))\n+                        .map(ASSET, \"vendor-phone\", (a) -> Optional.ofNullable(a.getVendorPhone()))\n+                        .map(ASSET, \"vendor-fax\", (a) -> Optional.ofNullable(a.getVendorFax()))\n+                        .map(ASSET, \"vendor-asset-number\", (a) -> Optional.ofNullable(a.getVendorAssetNumber()))\n+                        .map(ASSET, \"username\", (a) -> Optional.ofNullable(a.getUsername()))\n+                        .map(ASSET, \"password\", (a) -> Optional.ofNullable(a.getPassword()))\n+                        .map(ASSET, \"enable\", (a) -> Optional.ofNullable(a.getEnable()))\n+                        .map(ASSET, \"connection\", (a) -> Optional.ofNullable(a.getConnection()))\n+                        .map(ASSET, \"autoenable\", (a) -> Optional.ofNullable(a.getAutoenable()))\n+                        .map(ASSET, \"last-modified-by\", (a) -> Optional.ofNullable(a.getLastModifiedBy()))\n+                        .map(ASSET, \"last-modified-date\", (a) -> Optional.ofNullable(a.getLastModifiedDate()).map(Date::toString))\n+                        .map(ASSET, \"date-installed\", (a) -> Optional.ofNullable(a.getDateInstalled()))\n+                        .map(ASSET, \"lease\", (a) -> Optional.ofNullable(a.getLease()))\n+                        .map(ASSET, \"lease-expires\", (a) -> Optional.ofNullable(a.getLeaseExpires()))\n+                        .map(ASSET, \"support-phone\", (a) -> Optional.ofNullable(a.getSupportPhone()))\n+                        .map(ASSET, \"maintcontract\", (a) -> Optional.ofNullable(a.getMaintcontract()))\n+                        .map(ASSET, \"maint-contract-expiration\", (a) -> Optional.ofNullable(a.getMaintContractExpiration()))\n+                        .map(ASSET, \"display-category\", (a) -> Optional.ofNullable(a.getDisplayCategory()))\n+                        .map(ASSET, \"notify-category\", (a) -> Optional.ofNullable(a.getNotifyCategory()))\n+                        .map(ASSET, \"poller-category\", (a) -> Optional.ofNullable(a.getPollerCategory()))\n+                        .map(ASSET, \"threshold-category\", (a) -> Optional.ofNullable(a.getThresholdCategory()))\n+                        .map(ASSET, \"comment\", (a) -> Optional.ofNullable(a.getComment()))\n+                        .map(ASSET, \"cpu\", (a) -> Optional.ofNullable(a.getCpu()))\n+                        .map(ASSET, \"ram\", (a) -> Optional.ofNullable(a.getRam()))\n+                        .map(ASSET, \"storagectrl\", (a) -> Optional.ofNullable(a.getStoragectrl()))\n+                        .map(ASSET, \"hdd1\", (a) -> Optional.ofNullable(a.getHdd1()))\n+                        .map(ASSET, \"hdd2\", (a) -> Optional.ofNullable(a.getHdd2()))\n+                        .map(ASSET, \"hdd3\", (a) -> Optional.ofNullable(a.getHdd3()))\n+                        .map(ASSET, \"hdd4\", (a) -> Optional.ofNullable(a.getHdd4()))\n+                        .map(ASSET, \"hdd5\", (a) -> Optional.ofNullable(a.getHdd5()))\n+                        .map(ASSET, \"hdd6\", (a) -> Optional.ofNullable(a.getHdd6()))\n+                        .map(ASSET, \"numpowersupplies\", (a) -> Optional.ofNullable(a.getNumpowersupplies()))\n+                        .map(ASSET, \"inputpower\", (a) -> Optional.ofNullable(a.getInputpower()))\n+                        .map(ASSET, \"additionalhardware\", (a) -> Optional.ofNullable(a.getAdditionalhardware()))\n+                        .map(ASSET, \"admin\", (a) -> Optional.ofNullable(a.getAdmin()))\n+                        .map(ASSET, \"snmpcommunity\", (a) -> Optional.ofNullable(a.getSnmpcommunity()))\n+                        .map(ASSET, \"rackunitheight\", (a) -> Optional.ofNullable(a.getRackunitheight()))\n+                        .map(ASSET, \"managed-object-type\", (a) -> Optional.ofNullable(a.getManagedObjectType()))\n+                        .map(ASSET, \"managed-object-instance\", (a) -> Optional.ofNullable(a.getManagedObjectInstance()))\n+                        .map(ASSET, \"geolocation\", (a) -> Optional.ofNullable(a.getGeolocation()).map(Object::toString))\n+                        .map(ASSET, \"vmware-managed-object-id\", (a) -> Optional.ofNullable(a.getVmwareManagedObjectId()))\n+                        .map(ASSET, \"vmware-managed-entity-type\", (a) -> Optional.ofNullable(a.getVmwareManagedEntityType()))\n+                        .map(ASSET, \"vmware-management-server\", (a) -> Optional.ofNullable(a.getVmwareManagementServer()))\n+                        .map(ASSET, \"vmware-topology-info\", (a) -> Optional.ofNullable(a.getVmwareTopologyInfo()))\n+                        .map(ASSET, \"vmware-state\", (a) -> Optional.ofNullable(a.getVmwareState()));\n+                scopes.add(assetScope);\n             }\n \n-            return new FallbackScope(transform(node.getMetaData()),\n-                    new ObjectScope<>(node)\n-                            .map(\"asset\", \"category\" , (n) -> Optional.ofNullable(node.getAssetRecord()).map(OnmsAssetRecord::getCategory))\n-                            .map(\"asset\", \"vendor\" , (n) -> Optional.ofNullable(node.getAssetRecord()).map(OnmsAssetRecord::getVendor))\n-                            .map(\"asset\", \"manufacturer\" , (n) -> Optional.ofNullable(node.getAssetRecord()).map(OnmsAssetRecord::getManufacturer))\n-                            .map(\"asset\", \"vendor\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getVendor))\n-                            .map(\"asset\", \"model-number\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getModelNumber))\n-                            .map(\"asset\", \"serial-number\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getSerialNumber))\n-                            .map(\"asset\", \"description\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getDescription))\n-                            .map(\"asset\", \"circuit-id\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getCircuitId))\n-                            .map(\"asset\", \"asset-number\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getAssetNumber))\n-                            .map(\"asset\", \"operating-system\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getOperatingSystem))\n-                            .map(\"asset\", \"rack\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getRack))\n-                            .map(\"asset\", \"slot\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getSlot))\n-                            .map(\"asset\", \"port\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getPort))\n-                            .map(\"asset\", \"region\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getRegion))\n-                            .map(\"asset\", \"division\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getDivision))\n-                            .map(\"asset\", \"department\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getDepartment))\n-                            .map(\"asset\", \"building\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getBuilding))\n-                            .map(\"asset\", \"floor\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getFloor))\n-                            .map(\"asset\", \"room\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getRoom))\n-                            .map(\"asset\", \"vendor-phone\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getVendorPhone))\n-                            .map(\"asset\", \"vendor-fax\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getVendorFax))\n-                            .map(\"asset\", \"vendor-asset-number\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getVendorAssetNumber))\n-                            .map(\"asset\", \"username\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getUsername))\n-                            .map(\"asset\", \"password\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getPassword))\n-                            .map(\"asset\", \"enable\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getEnable))\n-                            .map(\"asset\", \"connection\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getConnection))\n-                            .map(\"asset\", \"autoenable\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getAutoenable))\n-                            .map(\"asset\", \"last-modified-by\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getLastModifiedBy))\n-                            .map(\"asset\", \"last-modified-date\", (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getLastModifiedDate).map(Date::toString))\n-                            .map(\"asset\", \"date-installed\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getDateInstalled))\n-                            .map(\"asset\", \"lease\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getLease))\n-                            .map(\"asset\", \"lease-expires\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getLeaseExpires))\n-                            .map(\"asset\", \"support-phone\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getSupportPhone))\n-                            .map(\"asset\", \"maintcontract\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getMaintcontract))\n-                            .map(\"asset\", \"maint-contract-expiration\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getMaintContractExpiration))\n-                            .map(\"asset\", \"display-category\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getDisplayCategory))\n-                            .map(\"asset\", \"notify-category\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getNotifyCategory))\n-                            .map(\"asset\", \"poller-category\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getPollerCategory))\n-                            .map(\"asset\", \"threshold-category\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getThresholdCategory))\n-                            .map(\"asset\", \"comment\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getComment))\n-                            .map(\"asset\", \"cpu\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getCpu))\n-                            .map(\"asset\", \"ram\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getRam))\n-                            .map(\"asset\", \"storagectrl\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getStoragectrl))\n-                            .map(\"asset\", \"hdd1\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getHdd1))\n-                            .map(\"asset\", \"hdd2\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getHdd2))\n-                            .map(\"asset\", \"hdd3\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getHdd3))\n-                            .map(\"asset\", \"hdd4\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getHdd4))\n-                            .map(\"asset\", \"hdd5\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getHdd5))\n-                            .map(\"asset\", \"hdd6\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getHdd6))\n-                            .map(\"asset\", \"numpowersupplies\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getNumpowersupplies))\n-                            .map(\"asset\", \"inputpower\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getInputpower))\n-                            .map(\"asset\", \"additionalhardware\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getAdditionalhardware))\n-                            .map(\"asset\", \"admin\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getAdmin))\n-                            .map(\"asset\", \"snmpcommunity\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getSnmpcommunity))\n-                            .map(\"asset\", \"rackunitheight\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getRackunitheight))\n-                            .map(\"asset\", \"managed-object-type\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getManagedObjectType))\n-                            .map(\"asset\", \"managed-object-instance\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getManagedObjectInstance))\n-                            .map(\"asset\", \"geolocation\", (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getGeolocation).map(Object::toString))\n-                            .map(\"asset\", \"vmware-managed-object-id\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getVmwareManagedObjectId))\n-                            .map(\"asset\", \"vmware-managed-entity-type\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getVmwareManagedEntityType))\n-                            .map(\"asset\", \"vmware-management-server\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getVmwareManagementServer))\n-                            .map(\"asset\", \"vmware-topology-info\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getVmwareTopologyInfo))\n-                            .map(\"asset\", \"vmware-state\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getVmwareState)));\n+            return new FallbackScope(scopes);\n         });\n-        return metaDataScope;\n+\n+    }\n+\n+    private Optional<String> getNodeCriteria(final OnmsNode node) {\n+        Objects.requireNonNull(node, \"Node can not be null\");\n+        if (node.getForeignSource() != null) {\n+            return Optional.of(node.getForeignSource() + \":\" + node.getForeignId());\n+        } else {\n+            return Optional.of(Integer.toString(node.getId()));\n+        }\n     }\n \n     @Override\n", "next_change": null}]}}]}}, {"oid": "95ca2867e403071e5c409cd3528c3e695ecaeea4", "url": "https://github.com/OpenNMS/opennms/commit/95ca2867e403071e5c409cd3528c3e695ecaeea4", "message": "NMS-12730 Meta-data tag enhancements to Time Series Storage API: move assets to its own scope", "committedDate": "2020-05-27T20:45:31Z", "type": "commit"}, {"oid": "c95f13b6ec582d5236d5965ca6821f2b3f42d521", "url": "https://github.com/OpenNMS/opennms/commit/c95f13b6ec582d5236d5965ca6821f2b3f42d521", "message": "NMS-12730 Meta-data tag enhancements to Time Series Storage API: move assets to its own scope", "committedDate": "2020-05-27T20:52:24Z", "type": "commit"}, {"oid": "9d5431a16625e2f688df54333b8b774459d9ab1c", "url": "https://github.com/OpenNMS/opennms/commit/9d5431a16625e2f688df54333b8b774459d9ab1c", "message": "NMS-12730 Meta-data tag enhancements to Time Series Storage API: add docu", "committedDate": "2020-05-27T23:38:11Z", "type": "commit"}, {"oid": "0ebcfe3975f570c01a0dc6e9be783a06341a3759", "url": "https://github.com/OpenNMS/opennms/commit/0ebcfe3975f570c01a0dc6e9be783a06341a3759", "message": "NMS-12730 Meta-data tag enhancements to Time Series Storage API: add assets to RoundtripTest", "committedDate": "2020-05-28T00:06:44Z", "type": "commit"}, {"oid": "f9daa3e8890a479256ae119911b84b7a6d514b74", "url": "https://github.com/OpenNMS/opennms/commit/f9daa3e8890a479256ae119911b84b7a6d514b74", "message": "NMS-12730: Add support for looking up interfaces by ifIndex.", "committedDate": "2020-05-28T12:59:37Z", "type": "commit"}, {"oid": "7337f2c958afaf74830f83325b98c22bf112dca9", "url": "https://github.com/OpenNMS/opennms/commit/7337f2c958afaf74830f83325b98c22bf112dca9", "message": "NMS-12730 Meta-data tag enhancements to Time Series Storage API: add test for interface attributes", "committedDate": "2020-05-28T20:27:33Z", "type": "commit"}, {"oid": "9878e614701c8476e038cf6b992822bc1ddc71a1", "url": "https://github.com/OpenNMS/opennms/commit/9878e614701c8476e038cf6b992822bc1ddc71a1", "message": "NMS-12730 Meta-data tag enhancements to Time Series Storage API: enable categories, fix doc", "committedDate": "2020-05-28T20:54:46Z", "type": "commit"}, {"oid": "b22e4d3e9e136fffedbb546d13e67d4ab4e3bfa3", "url": "https://github.com/OpenNMS/opennms/commit/b22e4d3e9e136fffedbb546d13e67d4ab4e3bfa3", "message": "NMS-12730 Meta-data tag enhancements to Time Series Storage API: fix integration test", "committedDate": "2020-05-29T17:30:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY0MjMzMA==", "url": "https://github.com/OpenNMS/opennms/pull/3019#discussion_r432642330", "body": "TODO", "bodyText": "TODO", "bodyHTML": "<p dir=\"auto\">TODO</p>", "author": "j-white", "createdAt": "2020-05-29T17:46:17Z", "path": "features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/persistence/TimeseriesPersisterFactory.java", "diffHunk": "@@ -47,13 +53,20 @@\n public class TimeseriesPersisterFactory implements PersisterFactory {\n \n     private final TimeseriesWriter timeseriesWriter;\n-\n     private final Context context;\n+    private final MetaTagDataLoader metaTagDataLoader;\n+    private final Map<ResourcePath, Map<String, String>> metaCache;\n \n     @Inject\n-    public TimeseriesPersisterFactory(Context context, TimeseriesWriter timeseriesWriter) {\n+    public TimeseriesPersisterFactory(final Context context, final TimeseriesWriter timeseriesWriter, final MetaTagDataLoader metaTagDataLoader) {\n         this.context = Objects.requireNonNull(context);\n         this.timeseriesWriter = timeseriesWriter;\n+        this.metaTagDataLoader = metaTagDataLoader;\n+        Cache<ResourcePath, Map<String, String>> cache = CacheBuilder\n+                .newBuilder()\n+                .expireAfterWrite(5, TimeUnit.MINUTES) // TODO Patrick: make configurable - can use CacheBuilder.from(cacheConfig).build();", "originalCommit": "b22e4d3e9e136fffedbb546d13e67d4ab4e3bfa3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjczMjA0Nw==", "url": "https://github.com/OpenNMS/opennms/pull/3019#discussion_r432732047", "bodyText": "fixed", "author": "patrick-schweizer", "createdAt": "2020-05-29T20:58:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY0MjMzMA=="}], "type": "inlineReview", "revised_code": {"commit": "ddd150165e98160a3424db4c792a83fe059db55a", "changed_code": [{"header": "diff --git a/features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/persistence/TimeseriesPersisterFactory.java b/features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/persistence/TimeseriesPersisterFactory.java\nindex 4e2ba5cf979..e9697c265e8 100644\n--- a/features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/persistence/TimeseriesPersisterFactory.java\n+++ b/features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/persistence/TimeseriesPersisterFactory.java\n", "chunk": "@@ -55,18 +54,18 @@ public class TimeseriesPersisterFactory implements PersisterFactory {\n     private final TimeseriesWriter timeseriesWriter;\n     private final Context context;\n     private final MetaTagDataLoader metaTagDataLoader;\n-    private final Map<ResourcePath, Map<String, String>> metaCache;\n+    private final Cache<ResourcePath, Map<String, String>> metaCache;\n \n     @Inject\n-    public TimeseriesPersisterFactory(final Context context, final TimeseriesWriter timeseriesWriter, final MetaTagDataLoader metaTagDataLoader) {\n+    public TimeseriesPersisterFactory(final Context context, final TimeseriesWriter timeseriesWriter,\n+                                      final MetaTagDataLoader metaTagDataLoader, final CacheConfig cacheConfig) {\n         this.context = Objects.requireNonNull(context);\n         this.timeseriesWriter = timeseriesWriter;\n         this.metaTagDataLoader = metaTagDataLoader;\n-        Cache<ResourcePath, Map<String, String>> cache = CacheBuilder\n-                .newBuilder()\n-                .expireAfterWrite(5, TimeUnit.MINUTES) // TODO Patrick: make configurable - can use CacheBuilder.from(cacheConfig).build();\n+        this.metaCache = new CacheBuilder<>()\n+                .withConfig(cacheConfig)\n+                .withCacheLoader(metaTagDataLoader)\n                 .build();\n-        this.metaCache = cache.asMap();\n     }\n \n     @Override\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY0MzY1Mg==", "url": "https://github.com/OpenNMS/opennms/pull/3019#discussion_r432643652", "body": "Let's store this in the \"node\" context instead (and move it to the EntityScopeProvider).\r\n\r\nThe criteria should also be derived from the OnmsNode object and not the resource. (It's possible that the resource only references the node id, but an FS:FID is present on the node.)", "bodyText": "Let's store this in the \"node\" context instead (and move it to the EntityScopeProvider).\nThe criteria should also be derived from the OnmsNode object and not the resource. (It's possible that the resource only references the node id, but an FS:FID is present on the node.)", "bodyHTML": "<p dir=\"auto\">Let's store this in the \"node\" context instead (and move it to the EntityScopeProvider).</p>\n<p dir=\"auto\">The criteria should also be derived from the OnmsNode object and not the resource. (It's possible that the resource only references the node id, but an FS:FID is present on the node.)</p>", "author": "j-white", "createdAt": "2020-05-29T17:48:52Z", "path": "features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/persistence/MetaTagDataLoader.java", "diffHunk": "@@ -0,0 +1,184 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2006-2015 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2015 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+\n+package org.opennms.netmgt.timeseries.integration.persistence;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import javax.inject.Inject;\n+\n+import org.opennms.core.rpc.utils.mate.EmptyScope;\n+import org.opennms.core.rpc.utils.mate.EntityScopeProvider;\n+import org.opennms.core.rpc.utils.mate.FallbackScope;\n+import org.opennms.core.rpc.utils.mate.Interpolator;\n+import org.opennms.core.rpc.utils.mate.ObjectScope;\n+import org.opennms.core.rpc.utils.mate.Scope;\n+import org.opennms.netmgt.collection.api.CollectionResource;\n+import org.opennms.netmgt.dao.api.NodeDao;\n+import org.opennms.netmgt.dao.api.SessionUtils;\n+import org.opennms.netmgt.model.OnmsCategory;\n+import org.opennms.netmgt.model.OnmsNode;\n+import org.opennms.netmgt.model.ResourceTypeUtils;\n+import org.opennms.netmgt.timeseries.integration.MetaTagConfiguration;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.common.base.Strings;\n+import com.google.common.cache.CacheLoader;\n+import com.google.common.collect.Maps;\n+\n+public class MetaTagDataLoader extends CacheLoader<CollectionResource, Map<String, String>> {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(MetaTagDataLoader.class);\n+\n+    private final NodeDao nodeDao;\n+    private final SessionUtils sessionUtils;\n+    private final EntityScopeProvider entityScopeProvider;\n+    private MetaTagConfiguration config;\n+\n+    @Inject\n+    public MetaTagDataLoader(final NodeDao nodeDao, final SessionUtils sessionUtils, final EntityScopeProvider entityScopeProvider) {\n+        this.nodeDao = nodeDao;\n+        this.sessionUtils = sessionUtils;\n+        this.entityScopeProvider = entityScopeProvider;\n+        setConfig(new MetaTagConfiguration(Maps.fromProperties(System.getProperties())));\n+    }\n+\n+    public void setConfig(final MetaTagConfiguration config) {\n+        this.config = config;\n+    }\n+\n+    public Map<String, String> load(final CollectionResource resource) {\n+        return sessionUtils.withReadOnlyTransaction(() -> {\n+\n+            final Map<String, String> tags = new HashMap<>();\n+            List<Scope> scopes = new ArrayList<>();\n+\n+            // resource related scope\n+            scopes.add(getScopeForResource(resource));\n+\n+            // node related scopes\n+            String nodeCriteria = getNodeCriteriaFromResource(resource);\n+            Optional<OnmsNode> nodeOptional = getNode(nodeCriteria);\n+            if(nodeOptional.isPresent()) {\n+                OnmsNode node = nodeOptional.get();\n+                scopes.add(this.entityScopeProvider.getScopeForNode(node.getId()));\n+                scopes.add(this.entityScopeProvider.getScopeForAssets(node.getId()));\n+                if (resource.getResourceTypeName().equals(CollectionResource.RESOURCE_TYPE_IF)) {\n+                    // We expect #getInstance to return the ifIndex for interface-level resources\n+                    try {\n+                        int ifIndex = Integer.parseInt(resource.getInstance());\n+                        scopes.add(this.entityScopeProvider.getScopeForInterfaceByIfIndex(node.getId(), ifIndex));\n+                    } catch(NumberFormatException nfe) {\n+                        // pass\n+                    }\n+                }\n+                // We cannot retrieve service meta-data - resource time resources contain the IP address and service name, but not the node\n+            }\n+\n+            // create tags for scopes\n+            Scope scope = new FallbackScope(scopes);\n+            Map<String, String> configuredMetaTags = this.config.getConfiguredMetaTags();\n+            for(Map.Entry<String, String> entry: configuredMetaTags.entrySet()) {\n+                final String value = Interpolator.interpolate(entry.getValue(), scope);\n+                // Ignore tags with empty values\n+                if (Strings.isNullOrEmpty(value)) {\n+                    continue;\n+                }\n+                tags.put(entry.getKey(), value);\n+            }\n+\n+            // create tags for categories\n+            nodeOptional.ifPresent(onmsNode -> mapCategories(tags, onmsNode));\n+            return tags;\n+        });\n+    }\n+\n+    private void mapCategories(final Map<String, String> tags, final OnmsNode node) {\n+        Objects.requireNonNull(node);\n+        if(config.isCategoriesEnabled()) {\n+            node.getCategories().stream()\n+                    .map(OnmsCategory::getName)\n+                    .forEach(catName -> tags.put(\"cat_\" + catName, catName));\n+        }\n+    }\n+\n+    public Scope getScopeForResource(final CollectionResource resource) {\n+        if (resource == null) {\n+            return EmptyScope.EMPTY;\n+        }\n+        return new ObjectScope<>(resource)\n+                .map(\"resource\", \"criteria\", (r) -> Optional.ofNullable(getNodeCriteriaFromResource(resource)))", "originalCommit": "b22e4d3e9e136fffedbb546d13e67d4ab4e3bfa3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjcwOTIyNQ==", "url": "https://github.com/OpenNMS/opennms/pull/3019#discussion_r432709225", "bodyText": "done.", "author": "patrick-schweizer", "createdAt": "2020-05-29T20:04:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY0MzY1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "ddd150165e98160a3424db4c792a83fe059db55a", "changed_code": [{"header": "diff --git a/features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/persistence/MetaTagDataLoader.java b/features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/persistence/MetaTagDataLoader.java\nindex d8757b54170..4cfdbbcdeb2 100644\n--- a/features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/persistence/MetaTagDataLoader.java\n+++ b/features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/persistence/MetaTagDataLoader.java\n", "chunk": "@@ -133,15 +128,6 @@ public class MetaTagDataLoader extends CacheLoader<CollectionResource, Map<Strin\n         }\n     }\n \n-    public Scope getScopeForResource(final CollectionResource resource) {\n-        if (resource == null) {\n-            return EmptyScope.EMPTY;\n-        }\n-        return new ObjectScope<>(resource)\n-                .map(\"resource\", \"criteria\", (r) -> Optional.ofNullable(getNodeCriteriaFromResource(resource)))\n-                .map(\"resource\", \"label\", (r) -> Optional.ofNullable(r.getInterfaceLabel()));\n-    }\n-\n     private Optional<OnmsNode> getNode(String nodeCriteria) {\n         if (nodeCriteria == null || nodeCriteria.trim().isEmpty()) {\n             return Optional.empty();\n", "next_change": {"commit": "6ddcf6cc3f29ac1a0cd01f210eee14490c8cd27a", "changed_code": [{"header": "diff --git a/features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/persistence/MetaTagDataLoader.java b/features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/persistence/MetaTagDataLoader.java\nindex 4cfdbbcdeb2..89e79492eb1 100644\n--- a/features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/persistence/MetaTagDataLoader.java\n+++ b/features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/persistence/MetaTagDataLoader.java\n", "chunk": "@@ -135,7 +135,7 @@ public class MetaTagDataLoader extends CacheLoader<CollectionResource, Map<Strin\n         try {\n             return Optional.ofNullable(nodeDao.get(nodeCriteria));\n         } catch (Exception e) {\n-            LOG.error(\"error while trying to match node from {}\", nodeCriteria);\n+            LOG.error(\"Error while trying to load node for criteria: {}. No node will be returned.\", nodeCriteria, e);\n         }\n         return Optional.empty();\n     }\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY0NDAyMQ==", "url": "https://github.com/OpenNMS/opennms/pull/3019#discussion_r432644021", "body": "```suggestion\r\n            LOG.error(\"Error while trying to load node for criteria: {}. No node will be returned.\", nodeCriteria, e);\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        LOG.error(\"error while trying to match node from {}\", nodeCriteria);\n          \n          \n            \n                        LOG.error(\"Error while trying to load node for criteria: {}. No node will be returned.\", nodeCriteria, e);", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            <span class=\"pl-c1\">LOG</span><span class=\"pl-k\">.</span>error(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"x x-first x-last\">error</span> while trying to <span class=\"x x-first x-last\">match</span> node <span class=\"x x-first x-last\">from {}</span><span class=\"pl-pds\">\"</span></span>, nodeCriteria);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            <span class=\"pl-c1\">LOG</span><span class=\"pl-k\">.</span>error(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"x x-first x-last\">Error</span> while trying to <span class=\"x x-first x-last\">load</span> node <span class=\"x x-first x-last\">for criteria: {}. No node will be returned.</span><span class=\"pl-pds\">\"</span></span>, nodeCriteria<span class=\"x x-first x-last\">, e</span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "j-white", "createdAt": "2020-05-29T17:49:40Z", "path": "features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/persistence/MetaTagDataLoader.java", "diffHunk": "@@ -0,0 +1,184 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2006-2015 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2015 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+\n+package org.opennms.netmgt.timeseries.integration.persistence;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import javax.inject.Inject;\n+\n+import org.opennms.core.rpc.utils.mate.EmptyScope;\n+import org.opennms.core.rpc.utils.mate.EntityScopeProvider;\n+import org.opennms.core.rpc.utils.mate.FallbackScope;\n+import org.opennms.core.rpc.utils.mate.Interpolator;\n+import org.opennms.core.rpc.utils.mate.ObjectScope;\n+import org.opennms.core.rpc.utils.mate.Scope;\n+import org.opennms.netmgt.collection.api.CollectionResource;\n+import org.opennms.netmgt.dao.api.NodeDao;\n+import org.opennms.netmgt.dao.api.SessionUtils;\n+import org.opennms.netmgt.model.OnmsCategory;\n+import org.opennms.netmgt.model.OnmsNode;\n+import org.opennms.netmgt.model.ResourceTypeUtils;\n+import org.opennms.netmgt.timeseries.integration.MetaTagConfiguration;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.common.base.Strings;\n+import com.google.common.cache.CacheLoader;\n+import com.google.common.collect.Maps;\n+\n+public class MetaTagDataLoader extends CacheLoader<CollectionResource, Map<String, String>> {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(MetaTagDataLoader.class);\n+\n+    private final NodeDao nodeDao;\n+    private final SessionUtils sessionUtils;\n+    private final EntityScopeProvider entityScopeProvider;\n+    private MetaTagConfiguration config;\n+\n+    @Inject\n+    public MetaTagDataLoader(final NodeDao nodeDao, final SessionUtils sessionUtils, final EntityScopeProvider entityScopeProvider) {\n+        this.nodeDao = nodeDao;\n+        this.sessionUtils = sessionUtils;\n+        this.entityScopeProvider = entityScopeProvider;\n+        setConfig(new MetaTagConfiguration(Maps.fromProperties(System.getProperties())));\n+    }\n+\n+    public void setConfig(final MetaTagConfiguration config) {\n+        this.config = config;\n+    }\n+\n+    public Map<String, String> load(final CollectionResource resource) {\n+        return sessionUtils.withReadOnlyTransaction(() -> {\n+\n+            final Map<String, String> tags = new HashMap<>();\n+            List<Scope> scopes = new ArrayList<>();\n+\n+            // resource related scope\n+            scopes.add(getScopeForResource(resource));\n+\n+            // node related scopes\n+            String nodeCriteria = getNodeCriteriaFromResource(resource);\n+            Optional<OnmsNode> nodeOptional = getNode(nodeCriteria);\n+            if(nodeOptional.isPresent()) {\n+                OnmsNode node = nodeOptional.get();\n+                scopes.add(this.entityScopeProvider.getScopeForNode(node.getId()));\n+                scopes.add(this.entityScopeProvider.getScopeForAssets(node.getId()));\n+                if (resource.getResourceTypeName().equals(CollectionResource.RESOURCE_TYPE_IF)) {\n+                    // We expect #getInstance to return the ifIndex for interface-level resources\n+                    try {\n+                        int ifIndex = Integer.parseInt(resource.getInstance());\n+                        scopes.add(this.entityScopeProvider.getScopeForInterfaceByIfIndex(node.getId(), ifIndex));\n+                    } catch(NumberFormatException nfe) {\n+                        // pass\n+                    }\n+                }\n+                // We cannot retrieve service meta-data - resource time resources contain the IP address and service name, but not the node\n+            }\n+\n+            // create tags for scopes\n+            Scope scope = new FallbackScope(scopes);\n+            Map<String, String> configuredMetaTags = this.config.getConfiguredMetaTags();\n+            for(Map.Entry<String, String> entry: configuredMetaTags.entrySet()) {\n+                final String value = Interpolator.interpolate(entry.getValue(), scope);\n+                // Ignore tags with empty values\n+                if (Strings.isNullOrEmpty(value)) {\n+                    continue;\n+                }\n+                tags.put(entry.getKey(), value);\n+            }\n+\n+            // create tags for categories\n+            nodeOptional.ifPresent(onmsNode -> mapCategories(tags, onmsNode));\n+            return tags;\n+        });\n+    }\n+\n+    private void mapCategories(final Map<String, String> tags, final OnmsNode node) {\n+        Objects.requireNonNull(node);\n+        if(config.isCategoriesEnabled()) {\n+            node.getCategories().stream()\n+                    .map(OnmsCategory::getName)\n+                    .forEach(catName -> tags.put(\"cat_\" + catName, catName));\n+        }\n+    }\n+\n+    public Scope getScopeForResource(final CollectionResource resource) {\n+        if (resource == null) {\n+            return EmptyScope.EMPTY;\n+        }\n+        return new ObjectScope<>(resource)\n+                .map(\"resource\", \"criteria\", (r) -> Optional.ofNullable(getNodeCriteriaFromResource(resource)))\n+                .map(\"resource\", \"label\", (r) -> Optional.ofNullable(r.getInterfaceLabel()));\n+    }\n+\n+    private Optional<OnmsNode> getNode(String nodeCriteria) {\n+        if (nodeCriteria == null || nodeCriteria.trim().isEmpty()) {\n+            return Optional.empty();\n+        }\n+        try {\n+            return Optional.ofNullable(nodeDao.get(nodeCriteria));\n+        } catch (Exception e) {\n+            LOG.error(\"error while trying to match node from {}\", nodeCriteria);", "originalCommit": "b22e4d3e9e136fffedbb546d13e67d4ab4e3bfa3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "085d523f8fda8767ddf4c9aca130fdf38731ff70", "changed_code": [{"header": "diff --git a/features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/persistence/MetaTagDataLoader.java b/features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/persistence/MetaTagDataLoader.java\nindex d8757b54170..14d63c36d5b 100644\n--- a/features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/persistence/MetaTagDataLoader.java\n+++ b/features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/persistence/MetaTagDataLoader.java\n", "chunk": "@@ -149,7 +149,7 @@ public class MetaTagDataLoader extends CacheLoader<CollectionResource, Map<Strin\n         try {\n             return Optional.ofNullable(nodeDao.get(nodeCriteria));\n         } catch (Exception e) {\n-            LOG.error(\"error while trying to match node from {}\", nodeCriteria);\n+            LOG.error(\"Error while trying to load node for criteria: {}. No node will be returned.\", nodeCriteria, e);\n         }\n         return Optional.empty();\n     }\n", "next_change": {"commit": "ddd150165e98160a3424db4c792a83fe059db55a", "changed_code": [{"header": "diff --git a/features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/persistence/MetaTagDataLoader.java b/features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/persistence/MetaTagDataLoader.java\nindex 14d63c36d5b..4cfdbbcdeb2 100644\n--- a/features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/persistence/MetaTagDataLoader.java\n+++ b/features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/persistence/MetaTagDataLoader.java\n", "chunk": "@@ -149,7 +135,7 @@ public class MetaTagDataLoader extends CacheLoader<CollectionResource, Map<Strin\n         try {\n             return Optional.ofNullable(nodeDao.get(nodeCriteria));\n         } catch (Exception e) {\n-            LOG.error(\"Error while trying to load node for criteria: {}. No node will be returned.\", nodeCriteria, e);\n+            LOG.error(\"error while trying to match node from {}\", nodeCriteria);\n         }\n         return Optional.empty();\n     }\n", "next_change": {"commit": "6ddcf6cc3f29ac1a0cd01f210eee14490c8cd27a", "changed_code": [{"header": "diff --git a/features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/persistence/MetaTagDataLoader.java b/features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/persistence/MetaTagDataLoader.java\nindex 4cfdbbcdeb2..89e79492eb1 100644\n--- a/features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/persistence/MetaTagDataLoader.java\n+++ b/features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/persistence/MetaTagDataLoader.java\n", "chunk": "@@ -135,7 +135,7 @@ public class MetaTagDataLoader extends CacheLoader<CollectionResource, Map<Strin\n         try {\n             return Optional.ofNullable(nodeDao.get(nodeCriteria));\n         } catch (Exception e) {\n-            LOG.error(\"error while trying to match node from {}\", nodeCriteria);\n+            LOG.error(\"Error while trying to load node for criteria: {}. No node will be returned.\", nodeCriteria, e);\n         }\n         return Optional.empty();\n     }\n", "next_change": null}]}}]}}]}}, {"oid": "085d523f8fda8767ddf4c9aca130fdf38731ff70", "url": "https://github.com/OpenNMS/opennms/commit/085d523f8fda8767ddf4c9aca130fdf38731ff70", "message": "Apply suggestions from code review\r\n\r\nNMS-12730 Meta-data tag enhancements: PR comments\n\nCo-authored-by: Jesse White <jesse@opennms.org>", "committedDate": "2020-05-29T19:40:30Z", "type": "commit"}, {"oid": "ddd150165e98160a3424db4c792a83fe059db55a", "url": "https://github.com/OpenNMS/opennms/commit/ddd150165e98160a3424db4c792a83fe059db55a", "message": "NMS-12730 Meta-data tag enhancements to Time Series Storage API: add cache config, move node criteria to EntityScopeProviderImpl", "committedDate": "2020-05-29T21:01:29Z", "type": "commit"}, {"oid": "6ddcf6cc3f29ac1a0cd01f210eee14490c8cd27a", "url": "https://github.com/OpenNMS/opennms/commit/6ddcf6cc3f29ac1a0cd01f210eee14490c8cd27a", "message": "Merge branch 'NMS-12730-metatag' of github.com:OpenNMS/opennms into NMS-12730-metatag", "committedDate": "2020-05-29T21:02:09Z", "type": "commit"}, {"oid": "455f6ad42b897d340361b525ba7d02a5c416d6a4", "url": "https://github.com/OpenNMS/opennms/commit/455f6ad42b897d340361b525ba7d02a5c416d6a4", "message": "NMS-12730 Meta-data tag enhancements to Time Series Storage API: add cache config", "committedDate": "2020-05-29T22:03:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM1Mzk0Mg==", "url": "https://github.com/OpenNMS/opennms/pull/3019#discussion_r434353942", "body": "Makes sense. Can you do that for the other context names, too. And maybe move them to the interface?", "bodyText": "Makes sense. Can you do that for the other context names, too. And maybe move them to the interface?", "bodyHTML": "<p dir=\"auto\">Makes sense. Can you do that for the other context names, too. And maybe move them to the interface?</p>", "author": "fooker", "createdAt": "2020-06-03T07:11:32Z", "path": "core/ipc/rpc/utils/src/main/java/org/opennms/core/rpc/utils/mate/EntityScopeProviderImpl.java", "diffHunk": "@@ -51,12 +55,17 @@\n \n public class EntityScopeProviderImpl implements EntityScopeProvider {\n \n+    private static final String INTERFACE = \"interface\";", "originalCommit": "455f6ad42b897d340361b525ba7d02a5c416d6a4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY2NzI0MQ==", "url": "https://github.com/OpenNMS/opennms/pull/3019#discussion_r434667241", "bodyText": "\ud83d\udc4d done", "author": "patrick-schweizer", "createdAt": "2020-06-03T15:44:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM1Mzk0Mg=="}], "type": "inlineReview", "revised_code": {"commit": "0bd5f470cd90ff5f185d78fd0da852444be743a3", "changed_code": [{"header": "diff --git a/core/ipc/rpc/utils/src/main/java/org/opennms/core/rpc/utils/mate/EntityScopeProviderImpl.java b/core/ipc/rpc/utils/src/main/java/org/opennms/core/rpc/utils/mate/EntityScopeProviderImpl.java\nindex f38f91ef08d..78e91d87da6 100644\n--- a/core/ipc/rpc/utils/src/main/java/org/opennms/core/rpc/utils/mate/EntityScopeProviderImpl.java\n+++ b/core/ipc/rpc/utils/src/main/java/org/opennms/core/rpc/utils/mate/EntityScopeProviderImpl.java\n", "chunk": "@@ -55,8 +58,6 @@ import com.google.common.base.Strings;\n \n public class EntityScopeProviderImpl implements EntityScopeProvider {\n \n-    private static final String INTERFACE = \"interface\";\n-\n     @Autowired\n     private NodeDao nodeDao;\n \n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM1NzU4Nw==", "url": "https://github.com/OpenNMS/opennms/pull/3019#discussion_r434357587", "body": "You should use `i.getIfAlias()` here.", "bodyText": "You should use i.getIfAlias() here.", "bodyHTML": "<p dir=\"auto\">You should use <code>i.getIfAlias()</code> here.</p>", "author": "fooker", "createdAt": "2020-06-03T07:18:49Z", "path": "core/ipc/rpc/utils/src/main/java/org/opennms/core/rpc/utils/mate/EntityScopeProviderImpl.java", "diffHunk": "@@ -108,20 +207,56 @@ public Scope getScopeForInterface(final Integer nodeId, final String ipAddress)\n             }\n \n             return new FallbackScope(transform(ipInterface.getMetaData()),\n-                    new ObjectScope<>(ipInterface)\n-                            .map(\"interface\", \"hostname\", (i) -> Optional.ofNullable(i.getIpHostName()))\n-                            .map(\"interface\", \"address\", (i) -> Optional.ofNullable(i.getIpAddress()).map(InetAddressUtils::toIpAddrString))\n-                            .map(\"interface\", \"netmask\", (i) -> Optional.ofNullable(i.getNetMask()).map(InetAddressUtils::toIpAddrString))\n-                            .map(\"interface\", \"if-index\", (i) -> Optional.ofNullable(i.getIfIndex()).map(Object::toString))\n-                            .map(\"interface\", \"if-alias\", (i) -> Optional.ofNullable(i.getSnmpInterface()).map(OnmsSnmpInterface::getIfAlias))\n-                            .map(\"interface\", \"if-description\", (i) -> Optional.ofNullable(i.getSnmpInterface()).map(OnmsSnmpInterface::getIfDescr))\n-                            .map(\"interface\", \"phy-addr\", (i) -> Optional.ofNullable(i.getSnmpInterface()).map(OnmsSnmpInterface::getPhysAddr))\n+                    mapIpIntefaceKeys(new ObjectScope<>(ipInterface))\n+                            .map(INTERFACE, \"if-alias\", (i) -> Optional.ofNullable(i.getSnmpInterface()).map(OnmsSnmpInterface::getIfAlias))\n+                            .map(INTERFACE, \"if-description\", (i) -> Optional.ofNullable(i.getSnmpInterface()).map(OnmsSnmpInterface::getIfDescr))\n+                            .map(INTERFACE, \"phy-addr\", (i) -> Optional.ofNullable(i.getSnmpInterface()).map(OnmsSnmpInterface::getPhysAddr))\n             );\n         });\n \n         return metaDataScope;\n     }\n \n+    private static ObjectScope<OnmsIpInterface> mapIpIntefaceKeys(ObjectScope<OnmsIpInterface> scope) {\n+        return scope.map(INTERFACE, \"hostname\", (i) -> Optional.ofNullable(i.getIpHostName()))\n+                .map(INTERFACE, \"address\", (i) -> Optional.ofNullable(i.getIpAddress()).map(InetAddressUtils::toIpAddrString))\n+                .map(INTERFACE, \"netmask\", (i) -> Optional.ofNullable(i.getNetMask()).map(InetAddressUtils::toIpAddrString))\n+                .map(INTERFACE, \"if-index\", (i) -> Optional.ofNullable(i.getIfIndex()).map(Object::toString));\n+    }\n+\n+    @Override\n+    public Scope getScopeForInterfaceByIfIndex(final Integer nodeId, final int ifIndex) {\n+        if (nodeId == null) {\n+            return EmptyScope.EMPTY;\n+        }\n+\n+        final Scope metaDataScope = this.sessionUtils.withReadOnlyTransaction(() -> {\n+            final OnmsSnmpInterface snmpInterface = this.snmpInterfaceDao.findByNodeIdAndIfIndex(nodeId, ifIndex);\n+            if (snmpInterface == null) {\n+                return EmptyScope.EMPTY;\n+            }\n+\n+            ArrayList<Scope> scopes = new ArrayList<>();\n+\n+            // SNMP interface facts\n+            scopes.add(new ObjectScope<>(snmpInterface)\n+                    .map(INTERFACE, \"if-alias\", (i) -> Optional.ofNullable(snmpInterface.getIfAlias()))", "originalCommit": "455f6ad42b897d340361b525ba7d02a5c416d6a4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY2OTg1Ng==", "url": "https://github.com/OpenNMS/opennms/pull/3019#discussion_r434669856", "bodyText": "\ud83d\udc4d done", "author": "patrick-schweizer", "createdAt": "2020-06-03T15:48:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM1NzU4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "0bd5f470cd90ff5f185d78fd0da852444be743a3", "changed_code": [{"header": "diff --git a/core/ipc/rpc/utils/src/main/java/org/opennms/core/rpc/utils/mate/EntityScopeProviderImpl.java b/core/ipc/rpc/utils/src/main/java/org/opennms/core/rpc/utils/mate/EntityScopeProviderImpl.java\nindex f38f91ef08d..78e91d87da6 100644\n--- a/core/ipc/rpc/utils/src/main/java/org/opennms/core/rpc/utils/mate/EntityScopeProviderImpl.java\n+++ b/core/ipc/rpc/utils/src/main/java/org/opennms/core/rpc/utils/mate/EntityScopeProviderImpl.java\n", "chunk": "@@ -240,21 +232,19 @@ public class EntityScopeProviderImpl implements EntityScopeProvider {\n \n             // SNMP interface facts\n             scopes.add(new ObjectScope<>(snmpInterface)\n-                    .map(INTERFACE, \"if-alias\", (i) -> Optional.ofNullable(snmpInterface.getIfAlias()))\n-                    .map(INTERFACE, \"if-description\", (i) -> Optional.ofNullable(snmpInterface.getIfDescr()))\n-                    .map(INTERFACE, \"phy-addr\", (i) -> Optional.ofNullable(snmpInterface.getPhysAddr())));\n+                    .map(ScopeId.INTERFACE, \"if-alias\", (i) -> Optional.ofNullable(i.getIfAlias()))\n+                    .map(ScopeId.INTERFACE, \"if-description\", (i) -> Optional.ofNullable(i.getIfDescr()))\n+                    .map(ScopeId.INTERFACE, \"phy-addr\", (i) -> Optional.ofNullable(i.getPhysAddr())));\n \n             // IP interface facts w/ meta-data extracted from IP interface\n             Optional.ofNullable(snmpInterface.getPrimaryIpInterface())\n                     .ifPresent(ipInterface -> {\n                         scopes.add(transform(ipInterface.getMetaData()));\n-                        scopes.add(mapIpIntefaceKeys(new ObjectScope<>(ipInterface)));\n+                        scopes.add(mapIpInterfaceKeys(ipInterface));\n                     });\n \n-            return new FallbackScope(scopes.toArray(new Scope[0]));\n+            return new FallbackScope(scopes);\n         });\n-\n-        return metaDataScope;\n     }\n \n     @Override\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM1OTU4MQ==", "url": "https://github.com/OpenNMS/opennms/pull/3019#discussion_r434359581", "body": "`FallbackScope` uses a list internally. You can add a constructor which accepts a list (and alter the existing constructor to forward to the new one). If you use an `ImmutableList.Builder` here, this renders down to a no-op without any allocation.", "bodyText": "FallbackScope uses a list internally. You can add a constructor which accepts a list (and alter the existing constructor to forward to the new one). If you use an ImmutableList.Builder here, this renders down to a no-op without any allocation.", "bodyHTML": "<p dir=\"auto\"><code>FallbackScope</code> uses a list internally. You can add a constructor which accepts a list (and alter the existing constructor to forward to the new one). If you use an <code>ImmutableList.Builder</code> here, this renders down to a no-op without any allocation.</p>", "author": "fooker", "createdAt": "2020-06-03T07:22:40Z", "path": "core/ipc/rpc/utils/src/main/java/org/opennms/core/rpc/utils/mate/EntityScopeProviderImpl.java", "diffHunk": "@@ -108,20 +207,56 @@ public Scope getScopeForInterface(final Integer nodeId, final String ipAddress)\n             }\n \n             return new FallbackScope(transform(ipInterface.getMetaData()),\n-                    new ObjectScope<>(ipInterface)\n-                            .map(\"interface\", \"hostname\", (i) -> Optional.ofNullable(i.getIpHostName()))\n-                            .map(\"interface\", \"address\", (i) -> Optional.ofNullable(i.getIpAddress()).map(InetAddressUtils::toIpAddrString))\n-                            .map(\"interface\", \"netmask\", (i) -> Optional.ofNullable(i.getNetMask()).map(InetAddressUtils::toIpAddrString))\n-                            .map(\"interface\", \"if-index\", (i) -> Optional.ofNullable(i.getIfIndex()).map(Object::toString))\n-                            .map(\"interface\", \"if-alias\", (i) -> Optional.ofNullable(i.getSnmpInterface()).map(OnmsSnmpInterface::getIfAlias))\n-                            .map(\"interface\", \"if-description\", (i) -> Optional.ofNullable(i.getSnmpInterface()).map(OnmsSnmpInterface::getIfDescr))\n-                            .map(\"interface\", \"phy-addr\", (i) -> Optional.ofNullable(i.getSnmpInterface()).map(OnmsSnmpInterface::getPhysAddr))\n+                    mapIpIntefaceKeys(new ObjectScope<>(ipInterface))\n+                            .map(INTERFACE, \"if-alias\", (i) -> Optional.ofNullable(i.getSnmpInterface()).map(OnmsSnmpInterface::getIfAlias))\n+                            .map(INTERFACE, \"if-description\", (i) -> Optional.ofNullable(i.getSnmpInterface()).map(OnmsSnmpInterface::getIfDescr))\n+                            .map(INTERFACE, \"phy-addr\", (i) -> Optional.ofNullable(i.getSnmpInterface()).map(OnmsSnmpInterface::getPhysAddr))\n             );\n         });\n \n         return metaDataScope;\n     }\n \n+    private static ObjectScope<OnmsIpInterface> mapIpIntefaceKeys(ObjectScope<OnmsIpInterface> scope) {\n+        return scope.map(INTERFACE, \"hostname\", (i) -> Optional.ofNullable(i.getIpHostName()))\n+                .map(INTERFACE, \"address\", (i) -> Optional.ofNullable(i.getIpAddress()).map(InetAddressUtils::toIpAddrString))\n+                .map(INTERFACE, \"netmask\", (i) -> Optional.ofNullable(i.getNetMask()).map(InetAddressUtils::toIpAddrString))\n+                .map(INTERFACE, \"if-index\", (i) -> Optional.ofNullable(i.getIfIndex()).map(Object::toString));\n+    }\n+\n+    @Override\n+    public Scope getScopeForInterfaceByIfIndex(final Integer nodeId, final int ifIndex) {\n+        if (nodeId == null) {\n+            return EmptyScope.EMPTY;\n+        }\n+\n+        final Scope metaDataScope = this.sessionUtils.withReadOnlyTransaction(() -> {\n+            final OnmsSnmpInterface snmpInterface = this.snmpInterfaceDao.findByNodeIdAndIfIndex(nodeId, ifIndex);\n+            if (snmpInterface == null) {\n+                return EmptyScope.EMPTY;\n+            }\n+\n+            ArrayList<Scope> scopes = new ArrayList<>();\n+\n+            // SNMP interface facts\n+            scopes.add(new ObjectScope<>(snmpInterface)\n+                    .map(INTERFACE, \"if-alias\", (i) -> Optional.ofNullable(snmpInterface.getIfAlias()))\n+                    .map(INTERFACE, \"if-description\", (i) -> Optional.ofNullable(snmpInterface.getIfDescr()))\n+                    .map(INTERFACE, \"phy-addr\", (i) -> Optional.ofNullable(snmpInterface.getPhysAddr())));\n+\n+            // IP interface facts w/ meta-data extracted from IP interface\n+            Optional.ofNullable(snmpInterface.getPrimaryIpInterface())\n+                    .ifPresent(ipInterface -> {\n+                        scopes.add(transform(ipInterface.getMetaData()));\n+                        scopes.add(mapIpIntefaceKeys(new ObjectScope<>(ipInterface)));\n+                    });\n+\n+            return new FallbackScope(scopes.toArray(new Scope[0]));", "originalCommit": "455f6ad42b897d340361b525ba7d02a5c416d6a4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY3MjA1OA==", "url": "https://github.com/OpenNMS/opennms/pull/3019#discussion_r434672058", "bodyText": "done.", "author": "patrick-schweizer", "createdAt": "2020-06-03T15:51:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM1OTU4MQ=="}], "type": "inlineReview", "revised_code": {"commit": "0bd5f470cd90ff5f185d78fd0da852444be743a3", "changed_code": [{"header": "diff --git a/core/ipc/rpc/utils/src/main/java/org/opennms/core/rpc/utils/mate/EntityScopeProviderImpl.java b/core/ipc/rpc/utils/src/main/java/org/opennms/core/rpc/utils/mate/EntityScopeProviderImpl.java\nindex f38f91ef08d..78e91d87da6 100644\n--- a/core/ipc/rpc/utils/src/main/java/org/opennms/core/rpc/utils/mate/EntityScopeProviderImpl.java\n+++ b/core/ipc/rpc/utils/src/main/java/org/opennms/core/rpc/utils/mate/EntityScopeProviderImpl.java\n", "chunk": "@@ -240,21 +232,19 @@ public class EntityScopeProviderImpl implements EntityScopeProvider {\n \n             // SNMP interface facts\n             scopes.add(new ObjectScope<>(snmpInterface)\n-                    .map(INTERFACE, \"if-alias\", (i) -> Optional.ofNullable(snmpInterface.getIfAlias()))\n-                    .map(INTERFACE, \"if-description\", (i) -> Optional.ofNullable(snmpInterface.getIfDescr()))\n-                    .map(INTERFACE, \"phy-addr\", (i) -> Optional.ofNullable(snmpInterface.getPhysAddr())));\n+                    .map(ScopeId.INTERFACE, \"if-alias\", (i) -> Optional.ofNullable(i.getIfAlias()))\n+                    .map(ScopeId.INTERFACE, \"if-description\", (i) -> Optional.ofNullable(i.getIfDescr()))\n+                    .map(ScopeId.INTERFACE, \"phy-addr\", (i) -> Optional.ofNullable(i.getPhysAddr())));\n \n             // IP interface facts w/ meta-data extracted from IP interface\n             Optional.ofNullable(snmpInterface.getPrimaryIpInterface())\n                     .ifPresent(ipInterface -> {\n                         scopes.add(transform(ipInterface.getMetaData()));\n-                        scopes.add(mapIpIntefaceKeys(new ObjectScope<>(ipInterface)));\n+                        scopes.add(mapIpInterfaceKeys(ipInterface));\n                     });\n \n-            return new FallbackScope(scopes.toArray(new Scope[0]));\n+            return new FallbackScope(scopes);\n         });\n-\n-        return metaDataScope;\n     }\n \n     @Override\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM2MDMwMw==", "url": "https://github.com/OpenNMS/opennms/pull/3019#discussion_r434360303", "body": "Just return a new `Scope` as the are used in `FallbackScope`s anyway?", "bodyText": "Just return a new Scope as the are used in FallbackScopes anyway?", "bodyHTML": "<p dir=\"auto\">Just return a new <code>Scope</code> as the are used in <code>FallbackScope</code>s anyway?</p>", "author": "fooker", "createdAt": "2020-06-03T07:23:58Z", "path": "core/ipc/rpc/utils/src/main/java/org/opennms/core/rpc/utils/mate/EntityScopeProviderImpl.java", "diffHunk": "@@ -108,20 +207,56 @@ public Scope getScopeForInterface(final Integer nodeId, final String ipAddress)\n             }\n \n             return new FallbackScope(transform(ipInterface.getMetaData()),\n-                    new ObjectScope<>(ipInterface)\n-                            .map(\"interface\", \"hostname\", (i) -> Optional.ofNullable(i.getIpHostName()))\n-                            .map(\"interface\", \"address\", (i) -> Optional.ofNullable(i.getIpAddress()).map(InetAddressUtils::toIpAddrString))\n-                            .map(\"interface\", \"netmask\", (i) -> Optional.ofNullable(i.getNetMask()).map(InetAddressUtils::toIpAddrString))\n-                            .map(\"interface\", \"if-index\", (i) -> Optional.ofNullable(i.getIfIndex()).map(Object::toString))\n-                            .map(\"interface\", \"if-alias\", (i) -> Optional.ofNullable(i.getSnmpInterface()).map(OnmsSnmpInterface::getIfAlias))\n-                            .map(\"interface\", \"if-description\", (i) -> Optional.ofNullable(i.getSnmpInterface()).map(OnmsSnmpInterface::getIfDescr))\n-                            .map(\"interface\", \"phy-addr\", (i) -> Optional.ofNullable(i.getSnmpInterface()).map(OnmsSnmpInterface::getPhysAddr))\n+                    mapIpIntefaceKeys(new ObjectScope<>(ipInterface))\n+                            .map(INTERFACE, \"if-alias\", (i) -> Optional.ofNullable(i.getSnmpInterface()).map(OnmsSnmpInterface::getIfAlias))\n+                            .map(INTERFACE, \"if-description\", (i) -> Optional.ofNullable(i.getSnmpInterface()).map(OnmsSnmpInterface::getIfDescr))\n+                            .map(INTERFACE, \"phy-addr\", (i) -> Optional.ofNullable(i.getSnmpInterface()).map(OnmsSnmpInterface::getPhysAddr))\n             );\n         });\n \n         return metaDataScope;\n     }\n \n+    private static ObjectScope<OnmsIpInterface> mapIpIntefaceKeys(ObjectScope<OnmsIpInterface> scope) {", "originalCommit": "455f6ad42b897d340361b525ba7d02a5c416d6a4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY5MTIyNg==", "url": "https://github.com/OpenNMS/opennms/pull/3019#discussion_r434691226", "bodyText": "\ud83d\udc4d fixed", "author": "patrick-schweizer", "createdAt": "2020-06-03T16:16:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM2MDMwMw=="}], "type": "inlineReview", "revised_code": {"commit": "0bd5f470cd90ff5f185d78fd0da852444be743a3", "changed_code": [{"header": "diff --git a/core/ipc/rpc/utils/src/main/java/org/opennms/core/rpc/utils/mate/EntityScopeProviderImpl.java b/core/ipc/rpc/utils/src/main/java/org/opennms/core/rpc/utils/mate/EntityScopeProviderImpl.java\nindex f38f91ef08d..78e91d87da6 100644\n--- a/core/ipc/rpc/utils/src/main/java/org/opennms/core/rpc/utils/mate/EntityScopeProviderImpl.java\n+++ b/core/ipc/rpc/utils/src/main/java/org/opennms/core/rpc/utils/mate/EntityScopeProviderImpl.java\n", "chunk": "@@ -113,115 +187,33 @@ public class EntityScopeProviderImpl implements EntityScopeProvider {\n         }\n     }\n \n-    @Override\n-    public Scope getScopeForAssets(final Integer nodeId) {\n-        if (nodeId == null) {\n-            return EmptyScope.EMPTY;\n-        }\n-\n-        final Scope metaDataScope = this.sessionUtils.withReadOnlyTransaction(() -> {\n-            final OnmsNode node = nodeDao.get(nodeId);\n-            if (node == null) {\n-                return EmptyScope.EMPTY;\n-            }\n-\n-            return new FallbackScope(transform(node.getMetaData()),\n-                    new ObjectScope<>(node)\n-                            .map(\"asset\", \"category\" , (n) -> Optional.ofNullable(node.getAssetRecord()).map(OnmsAssetRecord::getCategory))\n-                            .map(\"asset\", \"vendor\" , (n) -> Optional.ofNullable(node.getAssetRecord()).map(OnmsAssetRecord::getVendor))\n-                            .map(\"asset\", \"manufacturer\" , (n) -> Optional.ofNullable(node.getAssetRecord()).map(OnmsAssetRecord::getManufacturer))\n-                            .map(\"asset\", \"vendor\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getVendor))\n-                            .map(\"asset\", \"model-number\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getModelNumber))\n-                            .map(\"asset\", \"serial-number\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getSerialNumber))\n-                            .map(\"asset\", \"description\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getDescription))\n-                            .map(\"asset\", \"circuit-id\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getCircuitId))\n-                            .map(\"asset\", \"asset-number\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getAssetNumber))\n-                            .map(\"asset\", \"operating-system\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getOperatingSystem))\n-                            .map(\"asset\", \"rack\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getRack))\n-                            .map(\"asset\", \"slot\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getSlot))\n-                            .map(\"asset\", \"port\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getPort))\n-                            .map(\"asset\", \"region\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getRegion))\n-                            .map(\"asset\", \"division\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getDivision))\n-                            .map(\"asset\", \"department\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getDepartment))\n-                            .map(\"asset\", \"building\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getBuilding))\n-                            .map(\"asset\", \"floor\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getFloor))\n-                            .map(\"asset\", \"room\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getRoom))\n-                            .map(\"asset\", \"vendor-phone\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getVendorPhone))\n-                            .map(\"asset\", \"vendor-fax\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getVendorFax))\n-                            .map(\"asset\", \"vendor-asset-number\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getVendorAssetNumber))\n-                            .map(\"asset\", \"username\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getUsername))\n-                            .map(\"asset\", \"password\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getPassword))\n-                            .map(\"asset\", \"enable\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getEnable))\n-                            .map(\"asset\", \"connection\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getConnection))\n-                            .map(\"asset\", \"autoenable\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getAutoenable))\n-                            .map(\"asset\", \"last-modified-by\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getLastModifiedBy))\n-                            .map(\"asset\", \"last-modified-date\", (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getLastModifiedDate).map(Date::toString))\n-                            .map(\"asset\", \"date-installed\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getDateInstalled))\n-                            .map(\"asset\", \"lease\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getLease))\n-                            .map(\"asset\", \"lease-expires\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getLeaseExpires))\n-                            .map(\"asset\", \"support-phone\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getSupportPhone))\n-                            .map(\"asset\", \"maintcontract\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getMaintcontract))\n-                            .map(\"asset\", \"maint-contract-expiration\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getMaintContractExpiration))\n-                            .map(\"asset\", \"display-category\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getDisplayCategory))\n-                            .map(\"asset\", \"notify-category\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getNotifyCategory))\n-                            .map(\"asset\", \"poller-category\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getPollerCategory))\n-                            .map(\"asset\", \"threshold-category\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getThresholdCategory))\n-                            .map(\"asset\", \"comment\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getComment))\n-                            .map(\"asset\", \"cpu\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getCpu))\n-                            .map(\"asset\", \"ram\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getRam))\n-                            .map(\"asset\", \"storagectrl\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getStoragectrl))\n-                            .map(\"asset\", \"hdd1\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getHdd1))\n-                            .map(\"asset\", \"hdd2\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getHdd2))\n-                            .map(\"asset\", \"hdd3\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getHdd3))\n-                            .map(\"asset\", \"hdd4\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getHdd4))\n-                            .map(\"asset\", \"hdd5\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getHdd5))\n-                            .map(\"asset\", \"hdd6\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getHdd6))\n-                            .map(\"asset\", \"numpowersupplies\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getNumpowersupplies))\n-                            .map(\"asset\", \"inputpower\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getInputpower))\n-                            .map(\"asset\", \"additionalhardware\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getAdditionalhardware))\n-                            .map(\"asset\", \"admin\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getAdmin))\n-                            .map(\"asset\", \"snmpcommunity\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getSnmpcommunity))\n-                            .map(\"asset\", \"rackunitheight\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getRackunitheight))\n-                            .map(\"asset\", \"managed-object-type\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getManagedObjectType))\n-                            .map(\"asset\", \"managed-object-instance\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getManagedObjectInstance))\n-                            .map(\"asset\", \"geolocation\", (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getGeolocation).map(Object::toString))\n-                            .map(\"asset\", \"vmware-managed-object-id\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getVmwareManagedObjectId))\n-                            .map(\"asset\", \"vmware-managed-entity-type\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getVmwareManagedEntityType))\n-                            .map(\"asset\", \"vmware-management-server\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getVmwareManagementServer))\n-                            .map(\"asset\", \"vmware-topology-info\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getVmwareTopologyInfo))\n-                            .map(\"asset\", \"vmware-state\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getVmwareState)));\n-        });\n-        return metaDataScope;\n-    }\n-\n     @Override\n     public Scope getScopeForInterface(final Integer nodeId, final String ipAddress) {\n         if (nodeId == null || Strings.isNullOrEmpty(ipAddress)) {\n             return EmptyScope.EMPTY;\n         }\n \n-        final Scope metaDataScope = this.sessionUtils.withReadOnlyTransaction(() -> {\n+        return this.sessionUtils.withReadOnlyTransaction(() -> {\n             final OnmsIpInterface ipInterface = this.ipInterfaceDao.findByNodeIdAndIpAddress(nodeId, ipAddress);\n             if (ipInterface == null) {\n                 return EmptyScope.EMPTY;\n             }\n \n             return new FallbackScope(transform(ipInterface.getMetaData()),\n-                    mapIpIntefaceKeys(new ObjectScope<>(ipInterface))\n-                            .map(INTERFACE, \"if-alias\", (i) -> Optional.ofNullable(i.getSnmpInterface()).map(OnmsSnmpInterface::getIfAlias))\n-                            .map(INTERFACE, \"if-description\", (i) -> Optional.ofNullable(i.getSnmpInterface()).map(OnmsSnmpInterface::getIfDescr))\n-                            .map(INTERFACE, \"phy-addr\", (i) -> Optional.ofNullable(i.getSnmpInterface()).map(OnmsSnmpInterface::getPhysAddr))\n+                    mapIpInterfaceKeys(ipInterface)\n+                            .map(ScopeId.INTERFACE, \"if-alias\", (i) -> Optional.ofNullable(i.getSnmpInterface()).map(OnmsSnmpInterface::getIfAlias))\n+                            .map(ScopeId.INTERFACE, \"if-description\", (i) -> Optional.ofNullable(i.getSnmpInterface()).map(OnmsSnmpInterface::getIfDescr))\n+                            .map(ScopeId.INTERFACE, \"phy-addr\", (i) -> Optional.ofNullable(i.getSnmpInterface()).map(OnmsSnmpInterface::getPhysAddr))\n             );\n         });\n-\n-        return metaDataScope;\n     }\n \n-    private static ObjectScope<OnmsIpInterface> mapIpIntefaceKeys(ObjectScope<OnmsIpInterface> scope) {\n-        return scope.map(INTERFACE, \"hostname\", (i) -> Optional.ofNullable(i.getIpHostName()))\n-                .map(INTERFACE, \"address\", (i) -> Optional.ofNullable(i.getIpAddress()).map(InetAddressUtils::toIpAddrString))\n-                .map(INTERFACE, \"netmask\", (i) -> Optional.ofNullable(i.getNetMask()).map(InetAddressUtils::toIpAddrString))\n-                .map(INTERFACE, \"if-index\", (i) -> Optional.ofNullable(i.getIfIndex()).map(Object::toString));\n+    private static ObjectScope<OnmsIpInterface> mapIpInterfaceKeys(OnmsIpInterface ipInterface) {\n+        return new ObjectScope<>(ipInterface)\n+                .map(ScopeId.INTERFACE, \"hostname\", (i) -> Optional.ofNullable(i.getIpHostName()))\n+                .map(ScopeId.INTERFACE, \"address\", (i) -> Optional.ofNullable(i.getIpAddress()).map(InetAddressUtils::toIpAddrString))\n+                .map(ScopeId.INTERFACE, \"netmask\", (i) -> Optional.ofNullable(i.getNetMask()).map(InetAddressUtils::toIpAddrString))\n+                .map(ScopeId.INTERFACE, \"if-index\", (i) -> Optional.ofNullable(i.getIfIndex()).map(Object::toString));\n     }\n \n     @Override\n", "next_change": {"commit": "f958ba3387113f5cac940af793e23bed1e20606f", "changed_code": [{"header": "diff --git a/core/ipc/rpc/utils/src/main/java/org/opennms/core/rpc/utils/mate/EntityScopeProviderImpl.java b/core/ipc/rpc/utils/src/main/java/org/opennms/core/rpc/utils/mate/EntityScopeProviderImpl.java\nindex 78e91d87da6..641dfae62c5 100644\n--- a/core/ipc/rpc/utils/src/main/java/org/opennms/core/rpc/utils/mate/EntityScopeProviderImpl.java\n+++ b/core/ipc/rpc/utils/src/main/java/org/opennms/core/rpc/utils/mate/EntityScopeProviderImpl.java\n", "chunk": "@@ -201,19 +203,19 @@ public class EntityScopeProviderImpl implements EntityScopeProvider {\n \n             return new FallbackScope(transform(ipInterface.getMetaData()),\n                     mapIpInterfaceKeys(ipInterface)\n-                            .map(ScopeId.INTERFACE, \"if-alias\", (i) -> Optional.ofNullable(i.getSnmpInterface()).map(OnmsSnmpInterface::getIfAlias))\n-                            .map(ScopeId.INTERFACE, \"if-description\", (i) -> Optional.ofNullable(i.getSnmpInterface()).map(OnmsSnmpInterface::getIfDescr))\n-                            .map(ScopeId.INTERFACE, \"phy-addr\", (i) -> Optional.ofNullable(i.getSnmpInterface()).map(OnmsSnmpInterface::getPhysAddr))\n+                            .map(INTERFACE, \"if-alias\", (i) -> Optional.ofNullable(i.getSnmpInterface()).map(OnmsSnmpInterface::getIfAlias))\n+                            .map(INTERFACE, \"if-description\", (i) -> Optional.ofNullable(i.getSnmpInterface()).map(OnmsSnmpInterface::getIfDescr))\n+                            .map(INTERFACE, \"phy-addr\", (i) -> Optional.ofNullable(i.getSnmpInterface()).map(OnmsSnmpInterface::getPhysAddr))\n             );\n         });\n     }\n \n     private static ObjectScope<OnmsIpInterface> mapIpInterfaceKeys(OnmsIpInterface ipInterface) {\n         return new ObjectScope<>(ipInterface)\n-                .map(ScopeId.INTERFACE, \"hostname\", (i) -> Optional.ofNullable(i.getIpHostName()))\n-                .map(ScopeId.INTERFACE, \"address\", (i) -> Optional.ofNullable(i.getIpAddress()).map(InetAddressUtils::toIpAddrString))\n-                .map(ScopeId.INTERFACE, \"netmask\", (i) -> Optional.ofNullable(i.getNetMask()).map(InetAddressUtils::toIpAddrString))\n-                .map(ScopeId.INTERFACE, \"if-index\", (i) -> Optional.ofNullable(i.getIfIndex()).map(Object::toString));\n+                .map(INTERFACE, \"hostname\", (i) -> Optional.ofNullable(i.getIpHostName()))\n+                .map(INTERFACE, \"address\", (i) -> Optional.ofNullable(i.getIpAddress()).map(InetAddressUtils::toIpAddrString))\n+                .map(INTERFACE, \"netmask\", (i) -> Optional.ofNullable(i.getNetMask()).map(InetAddressUtils::toIpAddrString))\n+                .map(INTERFACE, \"if-index\", (i) -> Optional.ofNullable(i.getIfIndex()).map(Object::toString));\n     }\n \n     @Override\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM2MjY2Mg==", "url": "https://github.com/OpenNMS/opennms/pull/3019#discussion_r434362662", "body": "I have mixed feelings about having a new method. If we can merge this with `getScopeForNode` by just adding the `Scope` created here to the Nodes `FallbackScope`, all existing usages would benefit from the available data.", "bodyText": "I have mixed feelings about having a new method. If we can merge this with getScopeForNode by just adding the Scope created here to the Nodes FallbackScope, all existing usages would benefit from the available data.", "bodyHTML": "<p dir=\"auto\">I have mixed feelings about having a new method. If we can merge this with <code>getScopeForNode</code> by just adding the <code>Scope</code> created here to the Nodes <code>FallbackScope</code>, all existing usages would benefit from the available data.</p>", "author": "fooker", "createdAt": "2020-06-03T07:28:19Z", "path": "core/ipc/rpc/utils/src/main/java/org/opennms/core/rpc/utils/mate/EntityScopeProviderImpl.java", "diffHunk": "@@ -87,11 +97,100 @@ public Scope getScopeForNode(final Integer nodeId) {\n                             .map(\"node\", \"sys-location\", (n) -> Optional.ofNullable(n.getSysLocation()))\n                             .map(\"node\", \"sys-contact\", (n) -> Optional.ofNullable(n.getSysContact()))\n                             .map(\"node\", \"sys-description\", (n) -> Optional.ofNullable(n.getSysDescription()))\n+                            .map(\"node\", \"sys-object-id\", (n) -> Optional.ofNullable(n.getSysObjectId()))\n                             .map(\"node\", \"location\", (n) -> Optional.ofNullable(n.getLocation().getLocationName()))\n-                            .map(\"node\", \"area\", (n) -> Optional.ofNullable(n.getLocation().getMonitoringArea()))\n-            );\n+                            .map(\"node\", \"area\", (n) -> Optional.ofNullable(n.getLocation().getMonitoringArea())));\n         });\n+        return metaDataScope;\n+    }\n \n+    private Optional<String> getNodeCriteria(final OnmsNode node) {\n+        Objects.requireNonNull(node, \"Node can not be null\");\n+        if (node.getForeignSource() != null) {\n+            return Optional.of(node.getForeignSource() + \":\" + node.getForeignId());\n+        } else {\n+            return Optional.of(Integer.toString(node.getId()));\n+        }\n+    }\n+\n+    @Override\n+    public Scope getScopeForAssets(final Integer nodeId) {", "originalCommit": "455f6ad42b897d340361b525ba7d02a5c416d6a4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY5MzQ1Mw==", "url": "https://github.com/OpenNMS/opennms/pull/3019#discussion_r434693453", "bodyText": "I'm easy here. I merged the 2 methods.", "author": "patrick-schweizer", "createdAt": "2020-06-03T16:19:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM2MjY2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "0bd5f470cd90ff5f185d78fd0da852444be743a3", "changed_code": [{"header": "diff --git a/core/ipc/rpc/utils/src/main/java/org/opennms/core/rpc/utils/mate/EntityScopeProviderImpl.java b/core/ipc/rpc/utils/src/main/java/org/opennms/core/rpc/utils/mate/EntityScopeProviderImpl.java\nindex f38f91ef08d..78e91d87da6 100644\n--- a/core/ipc/rpc/utils/src/main/java/org/opennms/core/rpc/utils/mate/EntityScopeProviderImpl.java\n+++ b/core/ipc/rpc/utils/src/main/java/org/opennms/core/rpc/utils/mate/EntityScopeProviderImpl.java\n", "chunk": "@@ -113,115 +187,33 @@ public class EntityScopeProviderImpl implements EntityScopeProvider {\n         }\n     }\n \n-    @Override\n-    public Scope getScopeForAssets(final Integer nodeId) {\n-        if (nodeId == null) {\n-            return EmptyScope.EMPTY;\n-        }\n-\n-        final Scope metaDataScope = this.sessionUtils.withReadOnlyTransaction(() -> {\n-            final OnmsNode node = nodeDao.get(nodeId);\n-            if (node == null) {\n-                return EmptyScope.EMPTY;\n-            }\n-\n-            return new FallbackScope(transform(node.getMetaData()),\n-                    new ObjectScope<>(node)\n-                            .map(\"asset\", \"category\" , (n) -> Optional.ofNullable(node.getAssetRecord()).map(OnmsAssetRecord::getCategory))\n-                            .map(\"asset\", \"vendor\" , (n) -> Optional.ofNullable(node.getAssetRecord()).map(OnmsAssetRecord::getVendor))\n-                            .map(\"asset\", \"manufacturer\" , (n) -> Optional.ofNullable(node.getAssetRecord()).map(OnmsAssetRecord::getManufacturer))\n-                            .map(\"asset\", \"vendor\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getVendor))\n-                            .map(\"asset\", \"model-number\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getModelNumber))\n-                            .map(\"asset\", \"serial-number\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getSerialNumber))\n-                            .map(\"asset\", \"description\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getDescription))\n-                            .map(\"asset\", \"circuit-id\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getCircuitId))\n-                            .map(\"asset\", \"asset-number\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getAssetNumber))\n-                            .map(\"asset\", \"operating-system\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getOperatingSystem))\n-                            .map(\"asset\", \"rack\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getRack))\n-                            .map(\"asset\", \"slot\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getSlot))\n-                            .map(\"asset\", \"port\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getPort))\n-                            .map(\"asset\", \"region\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getRegion))\n-                            .map(\"asset\", \"division\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getDivision))\n-                            .map(\"asset\", \"department\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getDepartment))\n-                            .map(\"asset\", \"building\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getBuilding))\n-                            .map(\"asset\", \"floor\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getFloor))\n-                            .map(\"asset\", \"room\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getRoom))\n-                            .map(\"asset\", \"vendor-phone\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getVendorPhone))\n-                            .map(\"asset\", \"vendor-fax\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getVendorFax))\n-                            .map(\"asset\", \"vendor-asset-number\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getVendorAssetNumber))\n-                            .map(\"asset\", \"username\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getUsername))\n-                            .map(\"asset\", \"password\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getPassword))\n-                            .map(\"asset\", \"enable\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getEnable))\n-                            .map(\"asset\", \"connection\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getConnection))\n-                            .map(\"asset\", \"autoenable\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getAutoenable))\n-                            .map(\"asset\", \"last-modified-by\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getLastModifiedBy))\n-                            .map(\"asset\", \"last-modified-date\", (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getLastModifiedDate).map(Date::toString))\n-                            .map(\"asset\", \"date-installed\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getDateInstalled))\n-                            .map(\"asset\", \"lease\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getLease))\n-                            .map(\"asset\", \"lease-expires\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getLeaseExpires))\n-                            .map(\"asset\", \"support-phone\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getSupportPhone))\n-                            .map(\"asset\", \"maintcontract\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getMaintcontract))\n-                            .map(\"asset\", \"maint-contract-expiration\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getMaintContractExpiration))\n-                            .map(\"asset\", \"display-category\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getDisplayCategory))\n-                            .map(\"asset\", \"notify-category\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getNotifyCategory))\n-                            .map(\"asset\", \"poller-category\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getPollerCategory))\n-                            .map(\"asset\", \"threshold-category\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getThresholdCategory))\n-                            .map(\"asset\", \"comment\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getComment))\n-                            .map(\"asset\", \"cpu\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getCpu))\n-                            .map(\"asset\", \"ram\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getRam))\n-                            .map(\"asset\", \"storagectrl\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getStoragectrl))\n-                            .map(\"asset\", \"hdd1\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getHdd1))\n-                            .map(\"asset\", \"hdd2\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getHdd2))\n-                            .map(\"asset\", \"hdd3\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getHdd3))\n-                            .map(\"asset\", \"hdd4\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getHdd4))\n-                            .map(\"asset\", \"hdd5\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getHdd5))\n-                            .map(\"asset\", \"hdd6\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getHdd6))\n-                            .map(\"asset\", \"numpowersupplies\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getNumpowersupplies))\n-                            .map(\"asset\", \"inputpower\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getInputpower))\n-                            .map(\"asset\", \"additionalhardware\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getAdditionalhardware))\n-                            .map(\"asset\", \"admin\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getAdmin))\n-                            .map(\"asset\", \"snmpcommunity\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getSnmpcommunity))\n-                            .map(\"asset\", \"rackunitheight\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getRackunitheight))\n-                            .map(\"asset\", \"managed-object-type\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getManagedObjectType))\n-                            .map(\"asset\", \"managed-object-instance\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getManagedObjectInstance))\n-                            .map(\"asset\", \"geolocation\", (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getGeolocation).map(Object::toString))\n-                            .map(\"asset\", \"vmware-managed-object-id\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getVmwareManagedObjectId))\n-                            .map(\"asset\", \"vmware-managed-entity-type\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getVmwareManagedEntityType))\n-                            .map(\"asset\", \"vmware-management-server\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getVmwareManagementServer))\n-                            .map(\"asset\", \"vmware-topology-info\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getVmwareTopologyInfo))\n-                            .map(\"asset\", \"vmware-state\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getVmwareState)));\n-        });\n-        return metaDataScope;\n-    }\n-\n     @Override\n     public Scope getScopeForInterface(final Integer nodeId, final String ipAddress) {\n         if (nodeId == null || Strings.isNullOrEmpty(ipAddress)) {\n             return EmptyScope.EMPTY;\n         }\n \n-        final Scope metaDataScope = this.sessionUtils.withReadOnlyTransaction(() -> {\n+        return this.sessionUtils.withReadOnlyTransaction(() -> {\n             final OnmsIpInterface ipInterface = this.ipInterfaceDao.findByNodeIdAndIpAddress(nodeId, ipAddress);\n             if (ipInterface == null) {\n                 return EmptyScope.EMPTY;\n             }\n \n             return new FallbackScope(transform(ipInterface.getMetaData()),\n-                    mapIpIntefaceKeys(new ObjectScope<>(ipInterface))\n-                            .map(INTERFACE, \"if-alias\", (i) -> Optional.ofNullable(i.getSnmpInterface()).map(OnmsSnmpInterface::getIfAlias))\n-                            .map(INTERFACE, \"if-description\", (i) -> Optional.ofNullable(i.getSnmpInterface()).map(OnmsSnmpInterface::getIfDescr))\n-                            .map(INTERFACE, \"phy-addr\", (i) -> Optional.ofNullable(i.getSnmpInterface()).map(OnmsSnmpInterface::getPhysAddr))\n+                    mapIpInterfaceKeys(ipInterface)\n+                            .map(ScopeId.INTERFACE, \"if-alias\", (i) -> Optional.ofNullable(i.getSnmpInterface()).map(OnmsSnmpInterface::getIfAlias))\n+                            .map(ScopeId.INTERFACE, \"if-description\", (i) -> Optional.ofNullable(i.getSnmpInterface()).map(OnmsSnmpInterface::getIfDescr))\n+                            .map(ScopeId.INTERFACE, \"phy-addr\", (i) -> Optional.ofNullable(i.getSnmpInterface()).map(OnmsSnmpInterface::getPhysAddr))\n             );\n         });\n-\n-        return metaDataScope;\n     }\n \n-    private static ObjectScope<OnmsIpInterface> mapIpIntefaceKeys(ObjectScope<OnmsIpInterface> scope) {\n-        return scope.map(INTERFACE, \"hostname\", (i) -> Optional.ofNullable(i.getIpHostName()))\n-                .map(INTERFACE, \"address\", (i) -> Optional.ofNullable(i.getIpAddress()).map(InetAddressUtils::toIpAddrString))\n-                .map(INTERFACE, \"netmask\", (i) -> Optional.ofNullable(i.getNetMask()).map(InetAddressUtils::toIpAddrString))\n-                .map(INTERFACE, \"if-index\", (i) -> Optional.ofNullable(i.getIfIndex()).map(Object::toString));\n+    private static ObjectScope<OnmsIpInterface> mapIpInterfaceKeys(OnmsIpInterface ipInterface) {\n+        return new ObjectScope<>(ipInterface)\n+                .map(ScopeId.INTERFACE, \"hostname\", (i) -> Optional.ofNullable(i.getIpHostName()))\n+                .map(ScopeId.INTERFACE, \"address\", (i) -> Optional.ofNullable(i.getIpAddress()).map(InetAddressUtils::toIpAddrString))\n+                .map(ScopeId.INTERFACE, \"netmask\", (i) -> Optional.ofNullable(i.getNetMask()).map(InetAddressUtils::toIpAddrString))\n+                .map(ScopeId.INTERFACE, \"if-index\", (i) -> Optional.ofNullable(i.getIfIndex()).map(Object::toString));\n     }\n \n     @Override\n", "next_change": {"commit": "f958ba3387113f5cac940af793e23bed1e20606f", "changed_code": [{"header": "diff --git a/core/ipc/rpc/utils/src/main/java/org/opennms/core/rpc/utils/mate/EntityScopeProviderImpl.java b/core/ipc/rpc/utils/src/main/java/org/opennms/core/rpc/utils/mate/EntityScopeProviderImpl.java\nindex 78e91d87da6..641dfae62c5 100644\n--- a/core/ipc/rpc/utils/src/main/java/org/opennms/core/rpc/utils/mate/EntityScopeProviderImpl.java\n+++ b/core/ipc/rpc/utils/src/main/java/org/opennms/core/rpc/utils/mate/EntityScopeProviderImpl.java\n", "chunk": "@@ -201,19 +203,19 @@ public class EntityScopeProviderImpl implements EntityScopeProvider {\n \n             return new FallbackScope(transform(ipInterface.getMetaData()),\n                     mapIpInterfaceKeys(ipInterface)\n-                            .map(ScopeId.INTERFACE, \"if-alias\", (i) -> Optional.ofNullable(i.getSnmpInterface()).map(OnmsSnmpInterface::getIfAlias))\n-                            .map(ScopeId.INTERFACE, \"if-description\", (i) -> Optional.ofNullable(i.getSnmpInterface()).map(OnmsSnmpInterface::getIfDescr))\n-                            .map(ScopeId.INTERFACE, \"phy-addr\", (i) -> Optional.ofNullable(i.getSnmpInterface()).map(OnmsSnmpInterface::getPhysAddr))\n+                            .map(INTERFACE, \"if-alias\", (i) -> Optional.ofNullable(i.getSnmpInterface()).map(OnmsSnmpInterface::getIfAlias))\n+                            .map(INTERFACE, \"if-description\", (i) -> Optional.ofNullable(i.getSnmpInterface()).map(OnmsSnmpInterface::getIfDescr))\n+                            .map(INTERFACE, \"phy-addr\", (i) -> Optional.ofNullable(i.getSnmpInterface()).map(OnmsSnmpInterface::getPhysAddr))\n             );\n         });\n     }\n \n     private static ObjectScope<OnmsIpInterface> mapIpInterfaceKeys(OnmsIpInterface ipInterface) {\n         return new ObjectScope<>(ipInterface)\n-                .map(ScopeId.INTERFACE, \"hostname\", (i) -> Optional.ofNullable(i.getIpHostName()))\n-                .map(ScopeId.INTERFACE, \"address\", (i) -> Optional.ofNullable(i.getIpAddress()).map(InetAddressUtils::toIpAddrString))\n-                .map(ScopeId.INTERFACE, \"netmask\", (i) -> Optional.ofNullable(i.getNetMask()).map(InetAddressUtils::toIpAddrString))\n-                .map(ScopeId.INTERFACE, \"if-index\", (i) -> Optional.ofNullable(i.getIfIndex()).map(Object::toString));\n+                .map(INTERFACE, \"hostname\", (i) -> Optional.ofNullable(i.getIpHostName()))\n+                .map(INTERFACE, \"address\", (i) -> Optional.ofNullable(i.getIpAddress()).map(InetAddressUtils::toIpAddrString))\n+                .map(INTERFACE, \"netmask\", (i) -> Optional.ofNullable(i.getNetMask()).map(InetAddressUtils::toIpAddrString))\n+                .map(INTERFACE, \"if-index\", (i) -> Optional.ofNullable(i.getIfIndex()).map(Object::toString));\n     }\n \n     @Override\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM2MzIzMw==", "url": "https://github.com/OpenNMS/opennms/pull/3019#discussion_r434363233", "body": "By using `new ObjectScope<>(node.getAssetRecord())` this can be much less verbose.", "bodyText": "By using new ObjectScope<>(node.getAssetRecord()) this can be much less verbose.", "bodyHTML": "<p dir=\"auto\">By using <code>new ObjectScope&lt;&gt;(node.getAssetRecord())</code> this can be much less verbose.</p>", "author": "fooker", "createdAt": "2020-06-03T07:29:16Z", "path": "core/ipc/rpc/utils/src/main/java/org/opennms/core/rpc/utils/mate/EntityScopeProviderImpl.java", "diffHunk": "@@ -87,11 +97,100 @@ public Scope getScopeForNode(final Integer nodeId) {\n                             .map(\"node\", \"sys-location\", (n) -> Optional.ofNullable(n.getSysLocation()))\n                             .map(\"node\", \"sys-contact\", (n) -> Optional.ofNullable(n.getSysContact()))\n                             .map(\"node\", \"sys-description\", (n) -> Optional.ofNullable(n.getSysDescription()))\n+                            .map(\"node\", \"sys-object-id\", (n) -> Optional.ofNullable(n.getSysObjectId()))\n                             .map(\"node\", \"location\", (n) -> Optional.ofNullable(n.getLocation().getLocationName()))\n-                            .map(\"node\", \"area\", (n) -> Optional.ofNullable(n.getLocation().getMonitoringArea()))\n-            );\n+                            .map(\"node\", \"area\", (n) -> Optional.ofNullable(n.getLocation().getMonitoringArea())));\n         });\n+        return metaDataScope;\n+    }\n \n+    private Optional<String> getNodeCriteria(final OnmsNode node) {\n+        Objects.requireNonNull(node, \"Node can not be null\");\n+        if (node.getForeignSource() != null) {\n+            return Optional.of(node.getForeignSource() + \":\" + node.getForeignId());\n+        } else {\n+            return Optional.of(Integer.toString(node.getId()));\n+        }\n+    }\n+\n+    @Override\n+    public Scope getScopeForAssets(final Integer nodeId) {\n+        if (nodeId == null) {\n+            return EmptyScope.EMPTY;\n+        }\n+\n+        final Scope metaDataScope = this.sessionUtils.withReadOnlyTransaction(() -> {\n+            final OnmsNode node = nodeDao.get(nodeId);\n+            if (node == null) {\n+                return EmptyScope.EMPTY;\n+            }\n+\n+            return new FallbackScope(transform(node.getMetaData()),\n+                    new ObjectScope<>(node)", "originalCommit": "455f6ad42b897d340361b525ba7d02a5c416d6a4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgzNDAxMw==", "url": "https://github.com/OpenNMS/opennms/pull/3019#discussion_r434834013", "bodyText": "fixed.", "author": "patrick-schweizer", "createdAt": "2020-06-03T20:27:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM2MzIzMw=="}], "type": "inlineReview", "revised_code": {"commit": "0bd5f470cd90ff5f185d78fd0da852444be743a3", "changed_code": [{"header": "diff --git a/core/ipc/rpc/utils/src/main/java/org/opennms/core/rpc/utils/mate/EntityScopeProviderImpl.java b/core/ipc/rpc/utils/src/main/java/org/opennms/core/rpc/utils/mate/EntityScopeProviderImpl.java\nindex f38f91ef08d..78e91d87da6 100644\n--- a/core/ipc/rpc/utils/src/main/java/org/opennms/core/rpc/utils/mate/EntityScopeProviderImpl.java\n+++ b/core/ipc/rpc/utils/src/main/java/org/opennms/core/rpc/utils/mate/EntityScopeProviderImpl.java\n", "chunk": "@@ -113,115 +187,33 @@ public class EntityScopeProviderImpl implements EntityScopeProvider {\n         }\n     }\n \n-    @Override\n-    public Scope getScopeForAssets(final Integer nodeId) {\n-        if (nodeId == null) {\n-            return EmptyScope.EMPTY;\n-        }\n-\n-        final Scope metaDataScope = this.sessionUtils.withReadOnlyTransaction(() -> {\n-            final OnmsNode node = nodeDao.get(nodeId);\n-            if (node == null) {\n-                return EmptyScope.EMPTY;\n-            }\n-\n-            return new FallbackScope(transform(node.getMetaData()),\n-                    new ObjectScope<>(node)\n-                            .map(\"asset\", \"category\" , (n) -> Optional.ofNullable(node.getAssetRecord()).map(OnmsAssetRecord::getCategory))\n-                            .map(\"asset\", \"vendor\" , (n) -> Optional.ofNullable(node.getAssetRecord()).map(OnmsAssetRecord::getVendor))\n-                            .map(\"asset\", \"manufacturer\" , (n) -> Optional.ofNullable(node.getAssetRecord()).map(OnmsAssetRecord::getManufacturer))\n-                            .map(\"asset\", \"vendor\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getVendor))\n-                            .map(\"asset\", \"model-number\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getModelNumber))\n-                            .map(\"asset\", \"serial-number\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getSerialNumber))\n-                            .map(\"asset\", \"description\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getDescription))\n-                            .map(\"asset\", \"circuit-id\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getCircuitId))\n-                            .map(\"asset\", \"asset-number\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getAssetNumber))\n-                            .map(\"asset\", \"operating-system\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getOperatingSystem))\n-                            .map(\"asset\", \"rack\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getRack))\n-                            .map(\"asset\", \"slot\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getSlot))\n-                            .map(\"asset\", \"port\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getPort))\n-                            .map(\"asset\", \"region\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getRegion))\n-                            .map(\"asset\", \"division\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getDivision))\n-                            .map(\"asset\", \"department\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getDepartment))\n-                            .map(\"asset\", \"building\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getBuilding))\n-                            .map(\"asset\", \"floor\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getFloor))\n-                            .map(\"asset\", \"room\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getRoom))\n-                            .map(\"asset\", \"vendor-phone\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getVendorPhone))\n-                            .map(\"asset\", \"vendor-fax\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getVendorFax))\n-                            .map(\"asset\", \"vendor-asset-number\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getVendorAssetNumber))\n-                            .map(\"asset\", \"username\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getUsername))\n-                            .map(\"asset\", \"password\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getPassword))\n-                            .map(\"asset\", \"enable\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getEnable))\n-                            .map(\"asset\", \"connection\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getConnection))\n-                            .map(\"asset\", \"autoenable\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getAutoenable))\n-                            .map(\"asset\", \"last-modified-by\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getLastModifiedBy))\n-                            .map(\"asset\", \"last-modified-date\", (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getLastModifiedDate).map(Date::toString))\n-                            .map(\"asset\", \"date-installed\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getDateInstalled))\n-                            .map(\"asset\", \"lease\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getLease))\n-                            .map(\"asset\", \"lease-expires\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getLeaseExpires))\n-                            .map(\"asset\", \"support-phone\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getSupportPhone))\n-                            .map(\"asset\", \"maintcontract\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getMaintcontract))\n-                            .map(\"asset\", \"maint-contract-expiration\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getMaintContractExpiration))\n-                            .map(\"asset\", \"display-category\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getDisplayCategory))\n-                            .map(\"asset\", \"notify-category\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getNotifyCategory))\n-                            .map(\"asset\", \"poller-category\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getPollerCategory))\n-                            .map(\"asset\", \"threshold-category\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getThresholdCategory))\n-                            .map(\"asset\", \"comment\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getComment))\n-                            .map(\"asset\", \"cpu\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getCpu))\n-                            .map(\"asset\", \"ram\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getRam))\n-                            .map(\"asset\", \"storagectrl\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getStoragectrl))\n-                            .map(\"asset\", \"hdd1\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getHdd1))\n-                            .map(\"asset\", \"hdd2\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getHdd2))\n-                            .map(\"asset\", \"hdd3\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getHdd3))\n-                            .map(\"asset\", \"hdd4\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getHdd4))\n-                            .map(\"asset\", \"hdd5\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getHdd5))\n-                            .map(\"asset\", \"hdd6\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getHdd6))\n-                            .map(\"asset\", \"numpowersupplies\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getNumpowersupplies))\n-                            .map(\"asset\", \"inputpower\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getInputpower))\n-                            .map(\"asset\", \"additionalhardware\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getAdditionalhardware))\n-                            .map(\"asset\", \"admin\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getAdmin))\n-                            .map(\"asset\", \"snmpcommunity\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getSnmpcommunity))\n-                            .map(\"asset\", \"rackunitheight\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getRackunitheight))\n-                            .map(\"asset\", \"managed-object-type\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getManagedObjectType))\n-                            .map(\"asset\", \"managed-object-instance\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getManagedObjectInstance))\n-                            .map(\"asset\", \"geolocation\", (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getGeolocation).map(Object::toString))\n-                            .map(\"asset\", \"vmware-managed-object-id\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getVmwareManagedObjectId))\n-                            .map(\"asset\", \"vmware-managed-entity-type\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getVmwareManagedEntityType))\n-                            .map(\"asset\", \"vmware-management-server\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getVmwareManagementServer))\n-                            .map(\"asset\", \"vmware-topology-info\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getVmwareTopologyInfo))\n-                            .map(\"asset\", \"vmware-state\" , (n) -> Optional.ofNullable(n.getAssetRecord()).map(OnmsAssetRecord::getVmwareState)));\n-        });\n-        return metaDataScope;\n-    }\n-\n     @Override\n     public Scope getScopeForInterface(final Integer nodeId, final String ipAddress) {\n         if (nodeId == null || Strings.isNullOrEmpty(ipAddress)) {\n             return EmptyScope.EMPTY;\n         }\n \n-        final Scope metaDataScope = this.sessionUtils.withReadOnlyTransaction(() -> {\n+        return this.sessionUtils.withReadOnlyTransaction(() -> {\n             final OnmsIpInterface ipInterface = this.ipInterfaceDao.findByNodeIdAndIpAddress(nodeId, ipAddress);\n             if (ipInterface == null) {\n                 return EmptyScope.EMPTY;\n             }\n \n             return new FallbackScope(transform(ipInterface.getMetaData()),\n-                    mapIpIntefaceKeys(new ObjectScope<>(ipInterface))\n-                            .map(INTERFACE, \"if-alias\", (i) -> Optional.ofNullable(i.getSnmpInterface()).map(OnmsSnmpInterface::getIfAlias))\n-                            .map(INTERFACE, \"if-description\", (i) -> Optional.ofNullable(i.getSnmpInterface()).map(OnmsSnmpInterface::getIfDescr))\n-                            .map(INTERFACE, \"phy-addr\", (i) -> Optional.ofNullable(i.getSnmpInterface()).map(OnmsSnmpInterface::getPhysAddr))\n+                    mapIpInterfaceKeys(ipInterface)\n+                            .map(ScopeId.INTERFACE, \"if-alias\", (i) -> Optional.ofNullable(i.getSnmpInterface()).map(OnmsSnmpInterface::getIfAlias))\n+                            .map(ScopeId.INTERFACE, \"if-description\", (i) -> Optional.ofNullable(i.getSnmpInterface()).map(OnmsSnmpInterface::getIfDescr))\n+                            .map(ScopeId.INTERFACE, \"phy-addr\", (i) -> Optional.ofNullable(i.getSnmpInterface()).map(OnmsSnmpInterface::getPhysAddr))\n             );\n         });\n-\n-        return metaDataScope;\n     }\n \n-    private static ObjectScope<OnmsIpInterface> mapIpIntefaceKeys(ObjectScope<OnmsIpInterface> scope) {\n-        return scope.map(INTERFACE, \"hostname\", (i) -> Optional.ofNullable(i.getIpHostName()))\n-                .map(INTERFACE, \"address\", (i) -> Optional.ofNullable(i.getIpAddress()).map(InetAddressUtils::toIpAddrString))\n-                .map(INTERFACE, \"netmask\", (i) -> Optional.ofNullable(i.getNetMask()).map(InetAddressUtils::toIpAddrString))\n-                .map(INTERFACE, \"if-index\", (i) -> Optional.ofNullable(i.getIfIndex()).map(Object::toString));\n+    private static ObjectScope<OnmsIpInterface> mapIpInterfaceKeys(OnmsIpInterface ipInterface) {\n+        return new ObjectScope<>(ipInterface)\n+                .map(ScopeId.INTERFACE, \"hostname\", (i) -> Optional.ofNullable(i.getIpHostName()))\n+                .map(ScopeId.INTERFACE, \"address\", (i) -> Optional.ofNullable(i.getIpAddress()).map(InetAddressUtils::toIpAddrString))\n+                .map(ScopeId.INTERFACE, \"netmask\", (i) -> Optional.ofNullable(i.getNetMask()).map(InetAddressUtils::toIpAddrString))\n+                .map(ScopeId.INTERFACE, \"if-index\", (i) -> Optional.ofNullable(i.getIfIndex()).map(Object::toString));\n     }\n \n     @Override\n", "next_change": {"commit": "f958ba3387113f5cac940af793e23bed1e20606f", "changed_code": [{"header": "diff --git a/core/ipc/rpc/utils/src/main/java/org/opennms/core/rpc/utils/mate/EntityScopeProviderImpl.java b/core/ipc/rpc/utils/src/main/java/org/opennms/core/rpc/utils/mate/EntityScopeProviderImpl.java\nindex 78e91d87da6..641dfae62c5 100644\n--- a/core/ipc/rpc/utils/src/main/java/org/opennms/core/rpc/utils/mate/EntityScopeProviderImpl.java\n+++ b/core/ipc/rpc/utils/src/main/java/org/opennms/core/rpc/utils/mate/EntityScopeProviderImpl.java\n", "chunk": "@@ -201,19 +203,19 @@ public class EntityScopeProviderImpl implements EntityScopeProvider {\n \n             return new FallbackScope(transform(ipInterface.getMetaData()),\n                     mapIpInterfaceKeys(ipInterface)\n-                            .map(ScopeId.INTERFACE, \"if-alias\", (i) -> Optional.ofNullable(i.getSnmpInterface()).map(OnmsSnmpInterface::getIfAlias))\n-                            .map(ScopeId.INTERFACE, \"if-description\", (i) -> Optional.ofNullable(i.getSnmpInterface()).map(OnmsSnmpInterface::getIfDescr))\n-                            .map(ScopeId.INTERFACE, \"phy-addr\", (i) -> Optional.ofNullable(i.getSnmpInterface()).map(OnmsSnmpInterface::getPhysAddr))\n+                            .map(INTERFACE, \"if-alias\", (i) -> Optional.ofNullable(i.getSnmpInterface()).map(OnmsSnmpInterface::getIfAlias))\n+                            .map(INTERFACE, \"if-description\", (i) -> Optional.ofNullable(i.getSnmpInterface()).map(OnmsSnmpInterface::getIfDescr))\n+                            .map(INTERFACE, \"phy-addr\", (i) -> Optional.ofNullable(i.getSnmpInterface()).map(OnmsSnmpInterface::getPhysAddr))\n             );\n         });\n     }\n \n     private static ObjectScope<OnmsIpInterface> mapIpInterfaceKeys(OnmsIpInterface ipInterface) {\n         return new ObjectScope<>(ipInterface)\n-                .map(ScopeId.INTERFACE, \"hostname\", (i) -> Optional.ofNullable(i.getIpHostName()))\n-                .map(ScopeId.INTERFACE, \"address\", (i) -> Optional.ofNullable(i.getIpAddress()).map(InetAddressUtils::toIpAddrString))\n-                .map(ScopeId.INTERFACE, \"netmask\", (i) -> Optional.ofNullable(i.getNetMask()).map(InetAddressUtils::toIpAddrString))\n-                .map(ScopeId.INTERFACE, \"if-index\", (i) -> Optional.ofNullable(i.getIfIndex()).map(Object::toString));\n+                .map(INTERFACE, \"hostname\", (i) -> Optional.ofNullable(i.getIpHostName()))\n+                .map(INTERFACE, \"address\", (i) -> Optional.ofNullable(i.getIpAddress()).map(InetAddressUtils::toIpAddrString))\n+                .map(INTERFACE, \"netmask\", (i) -> Optional.ofNullable(i.getNetMask()).map(InetAddressUtils::toIpAddrString))\n+                .map(INTERFACE, \"if-index\", (i) -> Optional.ofNullable(i.getIfIndex()).map(Object::toString));\n     }\n \n     @Override\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM2NDAwMA==", "url": "https://github.com/OpenNMS/opennms/pull/3019#discussion_r434364000", "body": "Not used, or did I miss something?", "bodyText": "Not used, or did I miss something?", "bodyHTML": "<p dir=\"auto\">Not used, or did I miss something?</p>", "author": "fooker", "createdAt": "2020-06-03T07:30:35Z", "path": "features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/MetaTagConfiguration.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+package org.opennms.netmgt.timeseries.integration;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+/**\n+ * Defines which additional meta tags should be exposed to the timeseries integration plugin.\n+ */\n+public class MetaTagConfiguration {\n+\n+    final static String CONFIG_PREFIX = \"org.opennms.timeseries.tin.metatags\";\n+    final static String CONFIG_KEY_FOR_CATEGORIES = CONFIG_PREFIX + \".exposeCategories\";\n+    final static String CONFIG_PREFIX_FOR_TAGS = CONFIG_PREFIX + \".tag.\";\n+\n+    /**\n+     * properties defined in opennms.properties\n+     */\n+    public enum PropertyKey {", "originalCommit": "455f6ad42b897d340361b525ba7d02a5c416d6a4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgzNDkyNA==", "url": "https://github.com/OpenNMS/opennms/pull/3019#discussion_r434834924", "bodyText": "Good catch. It was used but it is not anymore. I removed it...", "author": "patrick-schweizer", "createdAt": "2020-06-03T20:29:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM2NDAwMA=="}], "type": "inlineReview", "revised_code": {"commit": "0bd5f470cd90ff5f185d78fd0da852444be743a3", "changed_code": [{"header": "diff --git a/features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/MetaTagConfiguration.java b/features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/MetaTagConfiguration.java\nindex 97c832df1a1..549c750ab14 100644\n--- a/features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/MetaTagConfiguration.java\n+++ b/features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/MetaTagConfiguration.java\n", "chunk": "@@ -40,14 +40,6 @@ public class MetaTagConfiguration {\n     final static String CONFIG_KEY_FOR_CATEGORIES = CONFIG_PREFIX + \".exposeCategories\";\n     final static String CONFIG_PREFIX_FOR_TAGS = CONFIG_PREFIX + \".tag.\";\n \n-    /**\n-     * properties defined in opennms.properties\n-     */\n-    public enum PropertyKey {\n-        assets,\n-        tag,\n-        categories\n-    }\n     private final boolean categoriesEnabled;\n \n     private final Map<String, String> configuredMetaTags;\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM3MDY1MQ==", "url": "https://github.com/OpenNMS/opennms/pull/3019#discussion_r434370651", "body": "```suggestion\r\n                .flatMap((entry) -> StringUtils.truncatePrefix(entry.getKey(), MetaTagConfiguration.CONFIG_PREFIX_FOR_TAGS)\r\n                                               .map(Stream::of)\r\n                                               .orElseGet(Stream::empty))\r\n                .collect(Collectors.toMap((entry) -> entry.getKey(), (entry) -> entry.getValue()));\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            .filter(e -> e.getKey().startsWith(MetaTagConfiguration.CONFIG_PREFIX_FOR_TAGS))\n          \n          \n            \n                            .forEach((entry) -> filteredMap.put(entry.getKey().substring(MetaTagConfiguration.CONFIG_PREFIX_FOR_TAGS.length()), entry.getValue()));\n          \n          \n            \n                            .flatMap((entry) -> StringUtils.truncatePrefix(entry.getKey(), MetaTagConfiguration.CONFIG_PREFIX_FOR_TAGS)\n          \n          \n            \n                                                           .map(Stream::of)\n          \n          \n            \n                                                           .orElseGet(Stream::empty))\n          \n          \n            \n                            .collect(Collectors.toMap((entry) -> entry.getKey(), (entry) -> entry.getValue()));", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                .filter(e <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> e<span class=\"pl-k\">.</span>getKey()<span class=\"pl-k\">.</span>startsWith(<span class=\"pl-smi\">MetaTagConfiguration</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>CONFIG_PREFIX_FOR_TAGS</span>))</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                .forEach((entry) <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> filteredMap<span class=\"pl-k\">.</span>put(entry<span class=\"pl-k\">.</span>getKey()<span class=\"pl-k\">.</span>substring(<span class=\"pl-smi\">MetaTagConfiguration</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>CONFIG_PREFIX_FOR_TAGS</span><span class=\"pl-k\">.</span>length()), entry<span class=\"pl-k\">.</span>getValue()));</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                .flatMap((entry) <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-smi\">StringUtils</span><span class=\"pl-k\">.</span>truncatePrefix(entry<span class=\"pl-k\">.</span>getKey(), <span class=\"pl-smi\">MetaTagConfiguration</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>CONFIG_PREFIX_FOR_TAGS</span>)</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                                               .map(<span class=\"pl-smi\">Stream</span><span class=\"pl-k\">::</span>of)</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                                               .orElseGet(<span class=\"pl-smi\">Stream</span><span class=\"pl-k\">::</span>empty))</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                .collect(<span class=\"pl-smi\">Collectors</span><span class=\"pl-k\">.</span>toMap((entry) <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> entry<span class=\"pl-k\">.</span>getKey(), (entry) <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> entry<span class=\"pl-k\">.</span>getValue()));</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "fooker", "createdAt": "2020-06-03T07:42:44Z", "path": "features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/MetaTagConfiguration.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+package org.opennms.netmgt.timeseries.integration;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+/**\n+ * Defines which additional meta tags should be exposed to the timeseries integration plugin.\n+ */\n+public class MetaTagConfiguration {\n+\n+    final static String CONFIG_PREFIX = \"org.opennms.timeseries.tin.metatags\";\n+    final static String CONFIG_KEY_FOR_CATEGORIES = CONFIG_PREFIX + \".exposeCategories\";\n+    final static String CONFIG_PREFIX_FOR_TAGS = CONFIG_PREFIX + \".tag.\";\n+\n+    /**\n+     * properties defined in opennms.properties\n+     */\n+    public enum PropertyKey {\n+        assets,\n+        tag,\n+        categories\n+    }\n+    private final boolean categoriesEnabled;\n+\n+    private final Map<String, String> configuredMetaTags;\n+\n+    public MetaTagConfiguration(final Map<String, String> properties) {\n+        this.categoriesEnabled = Optional.ofNullable(properties.get(CONFIG_KEY_FOR_CATEGORIES)).map(Boolean::valueOf).orElse(false);\n+        this.configuredMetaTags = findConfiguredMetaTags(properties);\n+    }\n+\n+    public Map<String, String> getConfiguredMetaTags() {\n+        return this.configuredMetaTags;\n+    }\n+\n+    public boolean isCategoriesEnabled() {\n+        return this.categoriesEnabled;\n+    }\n+\n+    private Map<String, String> findConfiguredMetaTags(final Map<String, String> properties) {\n+        Map<String, String> filteredMap = new HashMap<>();\n+        properties\n+                .entrySet()\n+                .stream()\n+                .filter(e -> e.getKey().startsWith(MetaTagConfiguration.CONFIG_PREFIX_FOR_TAGS))\n+                .forEach((entry) -> filteredMap.put(entry.getKey().substring(MetaTagConfiguration.CONFIG_PREFIX_FOR_TAGS.length()), entry.getValue()));", "originalCommit": "455f6ad42b897d340361b525ba7d02a5c416d6a4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "af869d2b4d592e25c30741da94f45ab9ca6df18e", "changed_code": [{"header": "diff --git a/features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/MetaTagConfiguration.java b/features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/MetaTagConfiguration.java\nindex 97c832df1a1..09c3157c520 100644\n--- a/features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/MetaTagConfiguration.java\n+++ b/features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/MetaTagConfiguration.java\n", "chunk": "@@ -70,8 +70,10 @@ public class MetaTagConfiguration {\n         properties\n                 .entrySet()\n                 .stream()\n-                .filter(e -> e.getKey().startsWith(MetaTagConfiguration.CONFIG_PREFIX_FOR_TAGS))\n-                .forEach((entry) -> filteredMap.put(entry.getKey().substring(MetaTagConfiguration.CONFIG_PREFIX_FOR_TAGS.length()), entry.getValue()));\n+                .flatMap((entry) -> StringUtils.truncatePrefix(entry.getKey(), MetaTagConfiguration.CONFIG_PREFIX_FOR_TAGS)\n+                                               .map(Stream::of)\n+                                               .orElseGet(Stream::empty))\n+                .collect(Collectors.toMap((entry) -> entry.getKey(), (entry) -> entry.getValue()));\n         return filteredMap;\n     }\n }\n", "next_change": {"commit": "3f13ae9be5dbbf0424ce3c30e3abab5f10d08c5f", "changed_code": [{"header": "diff --git a/features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/MetaTagConfiguration.java b/features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/MetaTagConfiguration.java\nindex 09c3157c520..4145c28b740 100644\n--- a/features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/MetaTagConfiguration.java\n+++ b/features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/MetaTagConfiguration.java\n", "chunk": "@@ -67,13 +60,10 @@ public class MetaTagConfiguration {\n \n     private Map<String, String> findConfiguredMetaTags(final Map<String, String> properties) {\n         Map<String, String> filteredMap = new HashMap<>();\n-        properties\n+        return properties\n                 .entrySet()\n                 .stream()\n-                .flatMap((entry) -> StringUtils.truncatePrefix(entry.getKey(), MetaTagConfiguration.CONFIG_PREFIX_FOR_TAGS)\n-                                               .map(Stream::of)\n-                                               .orElseGet(Stream::empty))\n-                .collect(Collectors.toMap((entry) -> entry.getKey(), (entry) -> entry.getValue()));\n-        return filteredMap;\n+                .filter(e -> e.getKey().startsWith(MetaTagConfiguration.CONFIG_PREFIX_FOR_TAGS))\n+                .collect(Collectors.toMap((entry) -> entry.getKey().substring(MetaTagConfiguration.CONFIG_PREFIX_FOR_TAGS.length()), Map.Entry::getValue));\n     }\n }\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM3MjYyNw==", "url": "https://github.com/OpenNMS/opennms/pull/3019#discussion_r434372627", "body": "I found a lot of benefit in using `Objects.requireNotNull` very often. Maybe add it here, too.", "bodyText": "I found a lot of benefit in using Objects.requireNotNull very often. Maybe add it here, too.", "bodyHTML": "<p dir=\"auto\">I found a lot of benefit in using <code>Objects.requireNotNull</code> very often. Maybe add it here, too.</p>", "author": "fooker", "createdAt": "2020-06-03T07:46:20Z", "path": "features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/MetaTagConfiguration.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+package org.opennms.netmgt.timeseries.integration;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+/**\n+ * Defines which additional meta tags should be exposed to the timeseries integration plugin.\n+ */\n+public class MetaTagConfiguration {\n+\n+    final static String CONFIG_PREFIX = \"org.opennms.timeseries.tin.metatags\";\n+    final static String CONFIG_KEY_FOR_CATEGORIES = CONFIG_PREFIX + \".exposeCategories\";\n+    final static String CONFIG_PREFIX_FOR_TAGS = CONFIG_PREFIX + \".tag.\";\n+\n+    /**\n+     * properties defined in opennms.properties\n+     */\n+    public enum PropertyKey {\n+        assets,\n+        tag,\n+        categories\n+    }\n+    private final boolean categoriesEnabled;\n+\n+    private final Map<String, String> configuredMetaTags;\n+\n+    public MetaTagConfiguration(final Map<String, String> properties) {\n+        this.categoriesEnabled = Optional.ofNullable(properties.get(CONFIG_KEY_FOR_CATEGORIES)).map(Boolean::valueOf).orElse(false);", "originalCommit": "455f6ad42b897d340361b525ba7d02a5c416d6a4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0bd5f470cd90ff5f185d78fd0da852444be743a3", "changed_code": [{"header": "diff --git a/features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/MetaTagConfiguration.java b/features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/MetaTagConfiguration.java\nindex 97c832df1a1..549c750ab14 100644\n--- a/features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/MetaTagConfiguration.java\n+++ b/features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/MetaTagConfiguration.java\n", "chunk": "@@ -40,14 +40,6 @@ public class MetaTagConfiguration {\n     final static String CONFIG_KEY_FOR_CATEGORIES = CONFIG_PREFIX + \".exposeCategories\";\n     final static String CONFIG_PREFIX_FOR_TAGS = CONFIG_PREFIX + \".tag.\";\n \n-    /**\n-     * properties defined in opennms.properties\n-     */\n-    public enum PropertyKey {\n-        assets,\n-        tag,\n-        categories\n-    }\n     private final boolean categoriesEnabled;\n \n     private final Map<String, String> configuredMetaTags;\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM3MzI2Nw==", "url": "https://github.com/OpenNMS/opennms/pull/3019#discussion_r434373267", "body": "`Objects.requireNotNull`, too. Especially, if the value is not actively used in the constructor.", "bodyText": "Objects.requireNotNull, too. Especially, if the value is not actively used in the constructor.", "bodyHTML": "<p dir=\"auto\"><code>Objects.requireNotNull</code>, too. Especially, if the value is not actively used in the constructor.</p>", "author": "fooker", "createdAt": "2020-06-03T07:47:26Z", "path": "features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/persistence/MetaTagDataLoader.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2006-2015 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2015 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+\n+package org.opennms.netmgt.timeseries.integration.persistence;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import javax.inject.Inject;\n+\n+import org.opennms.core.rpc.utils.mate.EntityScopeProvider;\n+import org.opennms.core.rpc.utils.mate.FallbackScope;\n+import org.opennms.core.rpc.utils.mate.Interpolator;\n+import org.opennms.core.rpc.utils.mate.Scope;\n+import org.opennms.netmgt.collection.api.CollectionResource;\n+import org.opennms.netmgt.dao.api.NodeDao;\n+import org.opennms.netmgt.dao.api.SessionUtils;\n+import org.opennms.netmgt.model.OnmsCategory;\n+import org.opennms.netmgt.model.OnmsNode;\n+import org.opennms.netmgt.model.ResourceTypeUtils;\n+import org.opennms.netmgt.timeseries.integration.MetaTagConfiguration;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.common.base.Strings;\n+import com.google.common.cache.CacheLoader;\n+import com.google.common.collect.Maps;\n+\n+public class MetaTagDataLoader extends CacheLoader<CollectionResource, Map<String, String>> {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(MetaTagDataLoader.class);\n+\n+    private final NodeDao nodeDao;\n+    private final SessionUtils sessionUtils;\n+    private final EntityScopeProvider entityScopeProvider;\n+    private MetaTagConfiguration config;\n+\n+    @Inject\n+    public MetaTagDataLoader(final NodeDao nodeDao, final SessionUtils sessionUtils, final EntityScopeProvider entityScopeProvider) {\n+        this.nodeDao = nodeDao;", "originalCommit": "455f6ad42b897d340361b525ba7d02a5c416d6a4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgzNjU4MQ==", "url": "https://github.com/OpenNMS/opennms/pull/3019#discussion_r434836581", "bodyText": "\ud83d\udc4d fixed.", "author": "patrick-schweizer", "createdAt": "2020-06-03T20:32:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM3MzI2Nw=="}], "type": "inlineReview", "revised_code": {"commit": "0bd5f470cd90ff5f185d78fd0da852444be743a3", "changed_code": [{"header": "diff --git a/features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/persistence/MetaTagDataLoader.java b/features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/persistence/MetaTagDataLoader.java\nindex 89e79492eb1..eaa6e32365e 100644\n--- a/features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/persistence/MetaTagDataLoader.java\n+++ b/features/timeseries/src/main/java/org/opennms/netmgt/timeseries/integration/persistence/MetaTagDataLoader.java\n", "chunk": "@@ -66,9 +66,10 @@ public class MetaTagDataLoader extends CacheLoader<CollectionResource, Map<Strin\n \n     @Inject\n     public MetaTagDataLoader(final NodeDao nodeDao, final SessionUtils sessionUtils, final EntityScopeProvider entityScopeProvider) {\n-        this.nodeDao = nodeDao;\n-        this.sessionUtils = sessionUtils;\n-        this.entityScopeProvider = entityScopeProvider;\n+\n+        this.nodeDao = Objects.requireNonNull(nodeDao, \"nodeDao must not be null\");\n+        this.sessionUtils = Objects.requireNonNull(sessionUtils, \"sessionUtils must not be null\");\n+        this.entityScopeProvider = Objects.requireNonNull(entityScopeProvider, \"entityScopeProvider must not be null\");\n         setConfig(new MetaTagConfiguration(Maps.fromProperties(System.getProperties())));\n     }\n \n", "next_change": null}]}}, {"oid": "af869d2b4d592e25c30741da94f45ab9ca6df18e", "url": "https://github.com/OpenNMS/opennms/commit/af869d2b4d592e25c30741da94f45ab9ca6df18e", "message": "NMS-12730: Meta-data tag enhancements to Time Series Storage API: code review suggestions\n\nCo-authored-by: Dustin Frisch <fooker@lab.sh>", "committedDate": "2020-06-03T20:36:24Z", "type": "commit"}, {"oid": "0bd5f470cd90ff5f185d78fd0da852444be743a3", "url": "https://github.com/OpenNMS/opennms/commit/0bd5f470cd90ff5f185d78fd0da852444be743a3", "message": "NMS-12730 Meta-data tag enhancements to Time Series Storage API: apply pr comments", "committedDate": "2020-06-03T20:40:19Z", "type": "commit"}, {"oid": "3f13ae9be5dbbf0424ce3c30e3abab5f10d08c5f", "url": "https://github.com/OpenNMS/opennms/commit/3f13ae9be5dbbf0424ce3c30e3abab5f10d08c5f", "message": "NMS-12730 Meta-data tag enhancements to Time Series Storage API: apply pr comments", "committedDate": "2020-06-03T21:00:51Z", "type": "commit"}, {"oid": "6236b05e3a3599dadc771e7c179fe32cbe829f13", "url": "https://github.com/OpenNMS/opennms/commit/6236b05e3a3599dadc771e7c179fe32cbe829f13", "message": "NMS-12730 Meta-data tag enhancements to Time Series Storage API: apply pr comments", "committedDate": "2020-06-03T21:12:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg3MDg0NQ==", "url": "https://github.com/OpenNMS/opennms/pull/3019#discussion_r434870845", "body": "To be more clear, it should be called `Contexts`. The terminology here is that the meta-data consists of (context, key, value) triplets whereas the (context, key) tuple is used to access a value. The scopes are just used be more flexible during interpolation.", "bodyText": "To be more clear, it should be called Contexts. The terminology here is that the meta-data consists of (context, key, value) triplets whereas the (context, key) tuple is used to access a value. The scopes are just used be more flexible during interpolation.", "bodyHTML": "<p dir=\"auto\">To be more clear, it should be called <code>Contexts</code>. The terminology here is that the meta-data consists of (context, key, value) triplets whereas the (context, key) tuple is used to access a value. The scopes are just used be more flexible during interpolation.</p>", "author": "fooker", "createdAt": "2020-06-03T21:34:09Z", "path": "core/ipc/rpc/utils/src/main/java/org/opennms/core/rpc/utils/mate/EntityScopeProvider.java", "diffHunk": "@@ -31,9 +31,15 @@\n import java.net.InetAddress;\n \n public interface EntityScopeProvider {\n-    Scope getScopeForNode(final Integer nodeId);\n \n-    Scope getScopeForAssets(final Integer nodeId);\n+    interface ScopeId {", "originalCommit": "6236b05e3a3599dadc771e7c179fe32cbe829f13", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg4OTU5Nw==", "url": "https://github.com/OpenNMS/opennms/pull/3019#discussion_r434889597", "bodyText": "fixed", "author": "patrick-schweizer", "createdAt": "2020-06-03T22:19:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg3MDg0NQ=="}], "type": "inlineReview", "revised_code": {"commit": "37cb2b7cbda6d7ecc9802d9ad14cf71a330cdf5f", "changed_code": [{"header": "diff --git a/core/ipc/rpc/utils/src/main/java/org/opennms/core/rpc/utils/mate/EntityScopeProvider.java b/core/ipc/rpc/utils/src/main/java/org/opennms/core/rpc/utils/mate/EntityScopeProvider.java\nindex 8d4ea0f071c..d7012737658 100644\n--- a/core/ipc/rpc/utils/src/main/java/org/opennms/core/rpc/utils/mate/EntityScopeProvider.java\n+++ b/core/ipc/rpc/utils/src/main/java/org/opennms/core/rpc/utils/mate/EntityScopeProvider.java\n", "chunk": "@@ -32,7 +32,7 @@ import java.net.InetAddress;\n \n public interface EntityScopeProvider {\n \n-    interface ScopeId {\n+    interface Contexts {\n         String ASSET = \"asset\";\n         String INTERFACE = \"interface\";\n         String NODE = \"node\";\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg3MjIwNQ==", "url": "https://github.com/OpenNMS/opennms/pull/3019#discussion_r434872205", "body": "Jut a nit: you import all the other context names statically. But not this one.", "bodyText": "Jut a nit: you import all the other context names statically. But not this one.", "bodyHTML": "<p dir=\"auto\">Jut a nit: you import all the other context names statically. But not this one.</p>", "author": "fooker", "createdAt": "2020-06-03T21:37:13Z", "path": "core/ipc/rpc/utils/src/main/java/org/opennms/core/rpc/utils/mate/EntityScopeProviderImpl.java", "diffHunk": "@@ -240,21 +233,19 @@ public Scope getScopeForInterfaceByIfIndex(final Integer nodeId, final int ifInd\n \n             // SNMP interface facts\n             scopes.add(new ObjectScope<>(snmpInterface)\n-                    .map(INTERFACE, \"if-alias\", (i) -> Optional.ofNullable(snmpInterface.getIfAlias()))\n-                    .map(INTERFACE, \"if-description\", (i) -> Optional.ofNullable(snmpInterface.getIfDescr()))\n-                    .map(INTERFACE, \"phy-addr\", (i) -> Optional.ofNullable(snmpInterface.getPhysAddr())));\n+                    .map(ScopeId.INTERFACE, \"if-alias\", (i) -> Optional.ofNullable(i.getIfAlias()))", "originalCommit": "6236b05e3a3599dadc771e7c179fe32cbe829f13", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg5MDUzNQ==", "url": "https://github.com/OpenNMS/opennms/pull/3019#discussion_r434890535", "bodyText": "true :-) fixed", "author": "patrick-schweizer", "createdAt": "2020-06-03T22:22:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg3MjIwNQ=="}], "type": "inlineReview", "revised_code": {"commit": "f958ba3387113f5cac940af793e23bed1e20606f", "changed_code": [{"header": "diff --git a/core/ipc/rpc/utils/src/main/java/org/opennms/core/rpc/utils/mate/EntityScopeProviderImpl.java b/core/ipc/rpc/utils/src/main/java/org/opennms/core/rpc/utils/mate/EntityScopeProviderImpl.java\nindex 4173e5d0d80..641dfae62c5 100644\n--- a/core/ipc/rpc/utils/src/main/java/org/opennms/core/rpc/utils/mate/EntityScopeProviderImpl.java\n+++ b/core/ipc/rpc/utils/src/main/java/org/opennms/core/rpc/utils/mate/EntityScopeProviderImpl.java\n", "chunk": "@@ -233,9 +234,9 @@ public class EntityScopeProviderImpl implements EntityScopeProvider {\n \n             // SNMP interface facts\n             scopes.add(new ObjectScope<>(snmpInterface)\n-                    .map(ScopeId.INTERFACE, \"if-alias\", (i) -> Optional.ofNullable(i.getIfAlias()))\n-                    .map(ScopeId.INTERFACE, \"if-description\", (i) -> Optional.ofNullable(i.getIfDescr()))\n-                    .map(ScopeId.INTERFACE, \"phy-addr\", (i) -> Optional.ofNullable(i.getPhysAddr())));\n+                    .map(INTERFACE, \"if-alias\", (i) -> Optional.ofNullable(i.getIfAlias()))\n+                    .map(INTERFACE, \"if-description\", (i) -> Optional.ofNullable(i.getIfDescr()))\n+                    .map(INTERFACE, \"phy-addr\", (i) -> Optional.ofNullable(i.getPhysAddr())));\n \n             // IP interface facts w/ meta-data extracted from IP interface\n             Optional.ofNullable(snmpInterface.getPrimaryIpInterface())\n", "next_change": null}]}}, {"oid": "55738c26a4815a31e844ab1bbe95237adeb49f1c", "url": "https://github.com/OpenNMS/opennms/commit/55738c26a4815a31e844ab1bbe95237adeb49f1c", "message": "NMS-12730 Meta-data tag enhancements to Time Series Storage API: apply pr comments", "committedDate": "2020-06-03T22:18:04Z", "type": "commit"}, {"oid": "37cb2b7cbda6d7ecc9802d9ad14cf71a330cdf5f", "url": "https://github.com/OpenNMS/opennms/commit/37cb2b7cbda6d7ecc9802d9ad14cf71a330cdf5f", "message": "NMS-12730 Meta-data tag enhancements to Time Series Storage API: apply pr comments", "committedDate": "2020-06-03T22:22:05Z", "type": "commit"}, {"oid": "f958ba3387113f5cac940af793e23bed1e20606f", "url": "https://github.com/OpenNMS/opennms/commit/f958ba3387113f5cac940af793e23bed1e20606f", "message": "NMS-12730 Meta-data tag enhancements to Time Series Storage API: apply pr comments", "committedDate": "2020-06-03T22:26:24Z", "type": "commit"}]}