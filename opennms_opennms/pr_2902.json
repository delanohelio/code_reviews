{"pr_number": 2902, "pr_title": "NMS-12554: Added basic system test", "pr_author": "christianpape", "pr_createdAt": "2020-02-25T13:59:34Z", "pr_url": "https://github.com/OpenNMS/opennms/pull/2902", "timeline": [{"oid": "6412db271856688c9514acf20f990b95da306f25", "url": "https://github.com/OpenNMS/opennms/commit/6412db271856688c9514acf20f990b95da306f25", "message": "NMS-12554: Added basic system test", "committedDate": "2020-02-25T13:57:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzkwODI4MA==", "url": "https://github.com/OpenNMS/opennms/pull/2902#discussion_r383908280", "body": "```suggestion\r\n                            \"<sysDescription>Black Ops 4</sysDescription>\" +\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                        \"<sysDescription>PDP-8</sysDescription>\" +\n          \n          \n            \n                                        \"<sysDescription>Black Ops 4</sysDescription>\" +", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                            <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>&lt;sysDescription&gt;<span class=\"x x-first x-last\">PDP-8</span>&lt;/sysDescription&gt;<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                            <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>&lt;sysDescription&gt;<span class=\"x x-first x-last\">Black Ops 4</span>&lt;/sysDescription&gt;<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "j-white", "createdAt": "2020-02-25T14:22:14Z", "path": "smoke-test/src/test/java/org/opennms/smoketest/flow/BmpIT.java", "diffHunk": "@@ -0,0 +1,175 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+\n+package org.opennms.smoketest.flow;\n+\n+import static com.jayway.awaitility.Awaitility.await;\n+import static io.restassured.RestAssured.given;\n+import static io.restassured.RestAssured.preemptive;\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static org.opennms.smoketest.selenium.AbstractOpenNMSSeleniumHelper.BASIC_AUTH_PASSWORD;\n+import static org.opennms.smoketest.selenium.AbstractOpenNMSSeleniumHelper.BASIC_AUTH_USERNAME;\n+\n+import java.io.IOException;\n+import java.net.InetSocketAddress;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.opennms.netmgt.model.resource.ResourceDTO;\n+import org.opennms.smoketest.stacks.NetworkProtocol;\n+import org.opennms.smoketest.stacks.OpenNMSStack;\n+import org.opennms.smoketest.stacks.StackModel;\n+import org.opennms.smoketest.telemetry.Packet;\n+import org.opennms.smoketest.telemetry.Packets;\n+import org.opennms.smoketest.telemetry.Sender;\n+import org.opennms.smoketest.utils.RestClient;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.common.collect.Sets;\n+\n+import io.restassured.RestAssured;\n+import io.restassured.http.ContentType;\n+\n+public class BmpIT {\n+    private static final Logger LOG = LoggerFactory.getLogger(BmpIT.class);\n+\n+    private final static Set<String> EXPECTED_RRD_FILES = Sets.newHashSet(\n+            \"inv_cl_loop.rrd\",\n+            \"export_rib.rrd\",\n+            \"inv_as_path_loop.rrd\",\n+            \"adj_rib_out.rrd\",\n+            \"rejected.rrd\",\n+            \"duplicate_update.rrd\",\n+            \"inv_originator_id.rrd\",\n+            \"inv_as_confed_loop.rrd\",\n+            \"duplicate_withdraw.rrd\",\n+            \"duplicate_prefix.rrd\",\n+            \"adj_rib_in.rrd\",\n+            \"loc_rib.rrd\",\n+            \"prefix_withdraw.rrd\",\n+            \"update_withdraw.rrd\"\n+    );\n+\n+    @ClassRule\n+    public static final OpenNMSStack stack = OpenNMSStack.withModel(StackModel.newBuilder()\n+            .withTelemetryProcessing()\n+            .build());\n+\n+    @Before\n+    public void setUp() {\n+        RestAssured.baseURI = stack.opennms().getBaseUrlExternal().toString();\n+        RestAssured.port = stack.opennms().getWebPort();\n+        RestAssured.basePath = \"/opennms/rest\";\n+        RestAssured.authentication = preemptive().basic(BASIC_AUTH_USERNAME, BASIC_AUTH_PASSWORD);\n+    }\n+\n+    @After\n+    public void tearDown() {\n+        given().delete(\"SmokeTests:TestNode\");\n+\n+        RestAssured.reset();\n+    }\n+\n+    private String getLocalAddress() {\n+        return stack.opennms()\n+                .getCurrentContainerInfo()\n+                .getNetworkSettings()\n+                .getNetworks()\n+                .entrySet()\n+                .stream()\n+                .findFirst()\n+                .get()\n+                .getValue()\n+                .getGateway();\n+    }\n+\n+    private void sendBmpTelemetryMessage(final InetSocketAddress tcpAddress) {\n+        try {\n+            new Packet(Packets.BMP.getPayload()).send(Sender.tcp(tcpAddress));\n+        } catch (IOException e) {\n+            LOG.error(\"Exception while sending BMP packets\", e);\n+        }\n+    }\n+\n+    private boolean matchRrdFileFromNodeResource(final String foreignId) {\n+        final RestClient client = stack.opennms().getRestClient();\n+        final ResourceDTO resources = client.getResourcesForNode(foreignId);\n+\n+        final Set<String> rrdFiles = resources.getChildren().getObjects().stream()\n+                .flatMap(r -> r.getRrdGraphAttributes().values().stream())\n+                .map(e -> e.getRrdFile())\n+                .collect(Collectors.toSet());\n+\n+        return rrdFiles.containsAll(EXPECTED_RRD_FILES);\n+    }\n+\n+    @Test\n+    public void verifyBmpProcessing() {\n+        final InetSocketAddress bgpTelemetryAddress = stack.opennms().getNetworkProtocolAddress(NetworkProtocol.BMP);\n+\n+        final String node = \"<node type=\\\"A\\\" label=\\\"TestNode\\\" foreignSource=\\\"SmokeTests\\\" foreignId=\\\"TestNode\\\">\" +\n+                            \"<labelSource>H</labelSource>\" +\n+                            \"<sysContact>Me</sysContact>\" +\n+                            \"<sysDescription>PDP-8</sysDescription>\" +", "originalCommit": "6412db271856688c9514acf20f990b95da306f25", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "875a124acafef0df666118341db1232af7d0fed9", "url": "https://github.com/OpenNMS/opennms/commit/875a124acafef0df666118341db1232af7d0fed9", "message": "Update smoke-test/src/test/java/org/opennms/smoketest/flow/BmpIT.java\n\nCo-Authored-By: Jesse White <jesse@opennms.org>", "committedDate": "2020-02-25T15:00:55Z", "type": "commit"}]}