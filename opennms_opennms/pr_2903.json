{"pr_number": 2903, "pr_title": "NMS-12521: Use protobuf instead of bson for Netflow", "pr_author": "cgorantla", "pr_createdAt": "2020-02-26T15:54:44Z", "pr_url": "https://github.com/OpenNMS/opennms/pull/2903", "merge_commit": "3352dcced0424e52de475b87840f05dff94fbec4", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU5Mzg1NA==", "url": "https://github.com/OpenNMS/opennms/pull/2903#discussion_r384593854", "body": "BMP? :)", "bodyText": "BMP? :)", "bodyHTML": "<p dir=\"auto\">BMP? :)</p>", "author": "j-white", "createdAt": "2020-02-26T16:05:21Z", "path": "features/telemetry/protocols/bmp/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/bmp/adpater/routes/BmpRoutesAdapterTest.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+\n+package org.opennms.netmgt.telemetry.protocols.bmp.adpater.routes;\n+\n+import java.util.concurrent.CompletableFuture;\n+\n+import org.junit.Test;\n+import org.opennms.core.ipc.sink.api.AsyncDispatcher;\n+import org.opennms.netmgt.telemetry.api.receiver.TelemetryMessage;\n+import org.opennms.netmgt.telemetry.protocols.bmp.parser.BmpParser;\n+\n+import com.codahale.metrics.MetricRegistry;\n+\n+public class BmpRoutesAdapterTest {", "originalCommit": "766d7069386bc37238465cc8b8d38a51eec8ff4d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b0e90f013c5b6948e960f7eb2d66870c3c84e12a", "changed_code": [{"header": "diff --git a/features/telemetry/protocols/bmp/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/bmp/adpater/routes/BmpRoutesAdapterTest.java b/features/graph/service/src/main/java/org/opennms/netmgt/graph/enrichment/EnrichmentUtils.java\nsimilarity index 54%\nrename from features/telemetry/protocols/bmp/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/bmp/adpater/routes/BmpRoutesAdapterTest.java\nrename to features/graph/service/src/main/java/org/opennms/netmgt/graph/enrichment/EnrichmentUtils.java\nindex aade757b833..94af9015b93 100644\n--- a/features/telemetry/protocols/bmp/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/bmp/adpater/routes/BmpRoutesAdapterTest.java\n+++ b/features/graph/service/src/main/java/org/opennms/netmgt/graph/enrichment/EnrichmentUtils.java\n", "chunk": "@@ -26,42 +26,24 @@\n  *     http://www.opennms.com/\n  *******************************************************************************/\n \n-package org.opennms.netmgt.telemetry.protocols.bmp.adpater.routes;\n+package org.opennms.netmgt.graph.enrichment;\n \n-import java.util.concurrent.CompletableFuture;\n+import java.util.Map;\n+import java.util.Objects;\n \n-import org.junit.Test;\n-import org.opennms.core.ipc.sink.api.AsyncDispatcher;\n-import org.opennms.netmgt.telemetry.api.receiver.TelemetryMessage;\n-import org.opennms.netmgt.telemetry.protocols.bmp.parser.BmpParser;\n+public final class EnrichmentUtils {\n \n-import com.codahale.metrics.MetricRegistry;\n+    private EnrichmentUtils() {}\n \n-public class BmpRoutesAdapterTest {\n-\n-\n-    @Test\n-    public void testBmpPeerAdapter() {\n-\n-        BmpParser bmpParser = new BmpParser(\"bmp-parser0\", new BmpPacketDispatcher(), new MetricRegistry());\n-\n-    }\n-\n-    class BmpPacketDispatcher implements  AsyncDispatcher<TelemetryMessage> {\n-\n-        @Override\n-        public CompletableFuture<TelemetryMessage> send(TelemetryMessage message) {\n-            return null;\n-        }\n-\n-        @Override\n-        public int getQueueSize() {\n-            return 0;\n+    public static boolean parseBoolean(final Map<String, Object> properties, final String propertyKey) {\n+        Objects.requireNonNull(properties);\n+        final Object value = properties.get(propertyKey);\n+        if (value instanceof Boolean) {\n+            return (Boolean) value;\n         }\n-\n-        @Override\n-        public void close() throws Exception {\n-\n+        if (value instanceof String) {\n+            return Boolean.parseBoolean((String) value);\n         }\n+        return false;\n     }\n }\n", "next_change": null}]}, "revised_code_in_main": {"commit": "3352dcced0424e52de475b87840f05dff94fbec4", "changed_code": [{"header": "diff --git a/features/telemetry/protocols/bmp/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/bmp/adpater/routes/BmpRoutesAdapterTest.java b/features/flows/elastic/src/test/java/org/opennms/netmgt/flows/elastic/MockDocumentForwarder.java\nsimilarity index 56%\nrename from features/telemetry/protocols/bmp/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/bmp/adpater/routes/BmpRoutesAdapterTest.java\nrename to features/flows/elastic/src/test/java/org/opennms/netmgt/flows/elastic/MockDocumentForwarder.java\nindex aade757b833..b1da7f18ea7 100644\n--- a/features/telemetry/protocols/bmp/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/bmp/adpater/routes/BmpRoutesAdapterTest.java\n+++ b/features/flows/elastic/src/test/java/org/opennms/netmgt/flows/elastic/MockDocumentForwarder.java\n", "chunk": "@@ -26,42 +26,16 @@\n  *     http://www.opennms.com/\n  *******************************************************************************/\n \n-package org.opennms.netmgt.telemetry.protocols.bmp.adpater.routes;\n+package org.opennms.netmgt.flows.elastic;\n \n-import java.util.concurrent.CompletableFuture;\n+import org.opennms.netmgt.flows.api.EnrichedFlowForwarder;\n+import org.opennms.netmgt.flows.api.EnrichedFlow;\n \n-import org.junit.Test;\n-import org.opennms.core.ipc.sink.api.AsyncDispatcher;\n-import org.opennms.netmgt.telemetry.api.receiver.TelemetryMessage;\n-import org.opennms.netmgt.telemetry.protocols.bmp.parser.BmpParser;\n+public class MockDocumentForwarder implements EnrichedFlowForwarder {\n \n-import com.codahale.metrics.MetricRegistry;\n \n-public class BmpRoutesAdapterTest {\n+    @Override\n+    public void forward(EnrichedFlow enrichedFlow) {\n \n-\n-    @Test\n-    public void testBmpPeerAdapter() {\n-\n-        BmpParser bmpParser = new BmpParser(\"bmp-parser0\", new BmpPacketDispatcher(), new MetricRegistry());\n-\n-    }\n-\n-    class BmpPacketDispatcher implements  AsyncDispatcher<TelemetryMessage> {\n-\n-        @Override\n-        public CompletableFuture<TelemetryMessage> send(TelemetryMessage message) {\n-            return null;\n-        }\n-\n-        @Override\n-        public int getQueueSize() {\n-            return 0;\n-        }\n-\n-        @Override\n-        public void close() throws Exception {\n-\n-        }\n     }\n }\n", "next_change": null}]}, "commits_in_main": [{"oid": "3352dcced0424e52de475b87840f05dff94fbec4", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDYzNTcwMg==", "url": "https://github.com/OpenNMS/opennms/pull/2903#discussion_r384635702", "body": "Not sure if this will work out well. In sflow it's still possible to return multiple flows from one incoming message.\r\n`Collections.singletonList` should make it easy to implement the original interface.", "bodyText": "Not sure if this will work out well. In sflow it's still possible to return multiple flows from one incoming message.\nCollections.singletonList should make it easy to implement the original interface.", "bodyHTML": "<p dir=\"auto\">Not sure if this will work out well. In sflow it's still possible to return multiple flows from one incoming message.<br>\n<code>Collections.singletonList</code> should make it easy to implement the original interface.</p>", "author": "fooker", "createdAt": "2020-02-26T17:07:42Z", "path": "features/flows/api/src/main/java/org/opennms/netmgt/flows/api/Converter.java", "diffHunk": "@@ -30,6 +30,8 @@\n \n import java.util.List;\n \n+// TODO: Remove the converter once proto maps to Flow interface directly.\n public interface Converter<P> {\n     List<Flow> convert(P packet);\n+    Flow convertTo(P packet);", "originalCommit": "766d7069386bc37238465cc8b8d38a51eec8ff4d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b0e90f013c5b6948e960f7eb2d66870c3c84e12a", "changed_code": [{"header": "diff --git a/features/flows/api/src/main/java/org/opennms/netmgt/flows/api/Converter.java b/features/flows/api/src/main/java/org/opennms/netmgt/flows/api/Converter.java\nindex f559b5ec54a..15bc5ebe840 100644\n--- a/features/flows/api/src/main/java/org/opennms/netmgt/flows/api/Converter.java\n+++ b/features/flows/api/src/main/java/org/opennms/netmgt/flows/api/Converter.java\n", "chunk": "@@ -30,8 +30,6 @@ package org.opennms.netmgt.flows.api;\n \n import java.util.List;\n \n-// TODO: Remove the converter once proto maps to Flow interface directly.\n public interface Converter<P> {\n     List<Flow> convert(P packet);\n-    Flow convertTo(P packet);\n }\n", "next_change": null}]}, "revised_code_in_main": {"commit": "3352dcced0424e52de475b87840f05dff94fbec4", "changed_code": [{"header": "diff --git a/features/flows/api/src/main/java/org/opennms/netmgt/flows/api/Converter.java b/features/flows/api/src/main/java/org/opennms/netmgt/flows/api/Converter.java\nindex f559b5ec54a..15bc5ebe840 100644\n--- a/features/flows/api/src/main/java/org/opennms/netmgt/flows/api/Converter.java\n+++ b/features/flows/api/src/main/java/org/opennms/netmgt/flows/api/Converter.java\n", "chunk": "@@ -30,8 +30,6 @@ package org.opennms.netmgt.flows.api;\n \n import java.util.List;\n \n-// TODO: Remove the converter once proto maps to Flow interface directly.\n public interface Converter<P> {\n     List<Flow> convert(P packet);\n-    Flow convertTo(P packet);\n }\n", "next_change": {"commit": "78ce7c55c0d1988f90dfa22ce33846fb3d0fa53d", "changed_code": [{"header": "diff --git a/features/flows/api/src/main/java/org/opennms/netmgt/flows/api/Converter.java b/features/flows/api/src/main/java/org/opennms/netmgt/flows/api/Converter.java\nindex 15bc5ebe840..caa04563c37 100644\n--- a/features/flows/api/src/main/java/org/opennms/netmgt/flows/api/Converter.java\n+++ b/features/flows/api/src/main/java/org/opennms/netmgt/flows/api/Converter.java\n", "chunk": "@@ -28,8 +28,9 @@\n \n package org.opennms.netmgt.flows.api;\n \n+import java.time.Instant;\n import java.util.List;\n \n public interface Converter<P> {\n-    List<Flow> convert(P packet);\n+    List<Flow> convert(P packet, final Instant receivedAt);\n }\n", "next_change": {"commit": "bd3afc72cd09053d307d383e58ff243a991bb3ef", "changed_code": [{"header": "diff --git a/features/flows/api/src/main/java/org/opennms/netmgt/flows/api/Converter.java b/features/telemetry/protocols/bmp/persistence/api/src/main/java/org/opennms/netmgt/telemetry/protocols/bmp/persistence/api/BmpBaseAttributeDao.java\nsimilarity index 78%\nrename from features/flows/api/src/main/java/org/opennms/netmgt/flows/api/Converter.java\nrename to features/telemetry/protocols/bmp/persistence/api/src/main/java/org/opennms/netmgt/telemetry/protocols/bmp/persistence/api/BmpBaseAttributeDao.java\nindex caa04563c37..e4d6f7a415f 100644\n--- a/features/flows/api/src/main/java/org/opennms/netmgt/flows/api/Converter.java\n+++ b/features/telemetry/protocols/bmp/persistence/api/src/main/java/org/opennms/netmgt/telemetry/protocols/bmp/persistence/api/BmpBaseAttributeDao.java\n", "chunk": "@@ -26,11 +26,9 @@\n  *     http://www.opennms.com/\n  *******************************************************************************/\n \n-package org.opennms.netmgt.flows.api;\n+package org.opennms.netmgt.telemetry.protocols.bmp.persistence.api;\n \n-import java.time.Instant;\n-import java.util.List;\n+import org.opennms.netmgt.dao.api.OnmsDao;\n \n-public interface Converter<P> {\n-    List<Flow> convert(P packet, final Instant receivedAt);\n+public interface BmpBaseAttributeDao extends OnmsDao<BmpBaseAttribute, Long> {\n }\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "3352dcced0424e52de475b87840f05dff94fbec4", "message": "Merge commit", "committedDate": null}, {"oid": "78ce7c55c0d1988f90dfa22ce33846fb3d0fa53d", "committedDate": "2020-12-01 09:53:12 +0100", "message": "NMS-12973: Correct clock skew"}, {"oid": "bd3afc72cd09053d307d383e58ff243a991bb3ef", "committedDate": "2022-07-26 16:13:39 +0200", "message": "NMS-13770: Inline Converter with adapters"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDYzNjg0NA==", "url": "https://github.com/OpenNMS/opennms/pull/2903#discussion_r384636844", "body": "Should be `Optional.ofNullable`.", "bodyText": "Should be Optional.ofNullable.", "bodyHTML": "<p dir=\"auto\">Should be <code>Optional.ofNullable</code>.</p>", "author": "fooker", "createdAt": "2020-02-26T17:09:48Z", "path": "features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5Converter.java", "diffHunk": "@@ -28,17 +28,223 @@\n \n package org.opennms.netmgt.telemetry.protocols.netflow.adapter.netflow5;\n \n-import java.util.Collections;\n+import java.util.ArrayList;\n import java.util.List;\n+import java.util.Optional;\n \n-import org.bson.BsonDocument;\n import org.opennms.netmgt.flows.api.Converter;\n import org.opennms.netmgt.flows.api.Flow;\n+import org.opennms.netmgt.flows.api.FlowMessage;\n \n-public class Netflow5Converter implements Converter<BsonDocument> {\n+public class Netflow5Converter implements Converter<FlowMessage> {\n \n     @Override\n-    public List<Flow> convert(final BsonDocument packet) {\n-        return Collections.singletonList(new Netflow5Flow(packet));\n+    public List<Flow> convert(final FlowMessage flowMessage) {\n+\n+        Flow flow = buildFlowFromProto(flowMessage);\n+        List<Flow> flows = new ArrayList<>();\n+        flows.add(flow);\n+        return flows;\n+    }\n+\n+    @Override\n+    public Flow convertTo(FlowMessage flowMessage) {\n+        return buildFlowFromProto(flowMessage);\n+    }\n+\n+    //TODO: Remove conversion and map the interface directly.\n+    private Flow buildFlowFromProto(FlowMessage flowMessage) {\n+        return new Flow() {\n+            @Override\n+            public long getTimestamp() {\n+                return flowMessage.getTimestamp();\n+            }\n+\n+            @Override\n+            public Long getBytes() {\n+                return flowMessage.getNumBytes();\n+            }\n+\n+            @Override\n+            public Direction getDirection() {\n+                if (flowMessage.getDirection().equals(org.opennms.netmgt.flows.model.Direction.EGRESS)) {\n+                    return Direction.EGRESS;\n+                }\n+                return Direction.INGRESS;\n+\n+            }\n+\n+            @Override\n+            public String getDstAddr() {\n+                return flowMessage.getDstAddress();\n+            }\n+\n+            @Override\n+            public Optional<String> getDstAddrHostname() {\n+                return Optional.of(flowMessage.getDstHostname());", "originalCommit": "766d7069386bc37238465cc8b8d38a51eec8ff4d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b0e90f013c5b6948e960f7eb2d66870c3c84e12a", "changed_code": [{"header": "diff --git a/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5Converter.java b/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5Converter.java\ndeleted file mode 100644\nindex 8d866358533..00000000000\n--- a/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5Converter.java\n+++ /dev/null\n", "chunk": "@@ -1,250 +0,0 @@\n-/*******************************************************************************\n- * This file is part of OpenNMS(R).\n- *\n- * Copyright (C) 2017-2017 The OpenNMS Group, Inc.\n- * OpenNMS(R) is Copyright (C) 1999-2017 The OpenNMS Group, Inc.\n- *\n- * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n- *\n- * OpenNMS(R) is free software: you can redistribute it and/or modify\n- * it under the terms of the GNU Affero General Public License as published\n- * by the Free Software Foundation, either version 3 of the License,\n- * or (at your option) any later version.\n- *\n- * OpenNMS(R) is distributed in the hope that it will be useful,\n- * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n- * GNU Affero General Public License for more details.\n- *\n- * You should have received a copy of the GNU Affero General Public License\n- * along with OpenNMS(R).  If not, see:\n- *      http://www.gnu.org/licenses/\n- *\n- * For more information contact:\n- *     OpenNMS(R) Licensing <license@opennms.org>\n- *     http://www.opennms.org/\n- *     http://www.opennms.com/\n- *******************************************************************************/\n-\n-package org.opennms.netmgt.telemetry.protocols.netflow.adapter.netflow5;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.Optional;\n-\n-import org.opennms.netmgt.flows.api.Converter;\n-import org.opennms.netmgt.flows.api.Flow;\n-import org.opennms.netmgt.flows.api.FlowMessage;\n-\n-public class Netflow5Converter implements Converter<FlowMessage> {\n-\n-    @Override\n-    public List<Flow> convert(final FlowMessage flowMessage) {\n-\n-        Flow flow = buildFlowFromProto(flowMessage);\n-        List<Flow> flows = new ArrayList<>();\n-        flows.add(flow);\n-        return flows;\n-    }\n-\n-    @Override\n-    public Flow convertTo(FlowMessage flowMessage) {\n-        return buildFlowFromProto(flowMessage);\n-    }\n-\n-    //TODO: Remove conversion and map the interface directly.\n-    private Flow buildFlowFromProto(FlowMessage flowMessage) {\n-        return new Flow() {\n-            @Override\n-            public long getTimestamp() {\n-                return flowMessage.getTimestamp();\n-            }\n-\n-            @Override\n-            public Long getBytes() {\n-                return flowMessage.getNumBytes();\n-            }\n-\n-            @Override\n-            public Direction getDirection() {\n-                if (flowMessage.getDirection().equals(org.opennms.netmgt.flows.model.Direction.EGRESS)) {\n-                    return Direction.EGRESS;\n-                }\n-                return Direction.INGRESS;\n-\n-            }\n-\n-            @Override\n-            public String getDstAddr() {\n-                return flowMessage.getDstAddress();\n-            }\n-\n-            @Override\n-            public Optional<String> getDstAddrHostname() {\n-                return Optional.of(flowMessage.getDstHostname());\n-            }\n-\n-            @Override\n-            public Long getDstAs() {\n-                return flowMessage.getDstAs();\n-            }\n-\n-            @Override\n-            public Integer getDstMaskLen() {\n-                return flowMessage.getDstMaskLen();\n-            }\n-\n-            @Override\n-            public Integer getDstPort() {\n-                return flowMessage.getDstPort();\n-            }\n-\n-            @Override\n-            public Integer getEngineId() {\n-                return flowMessage.getEngineId();\n-            }\n-\n-            @Override\n-            public Integer getEngineType() {\n-                return flowMessage.getEngineType();\n-            }\n-\n-            @Override\n-            public Long getDeltaSwitched() {\n-                return flowMessage.getDeltaSwitched();\n-            }\n-\n-            @Override\n-            public Long getFirstSwitched() {\n-                return flowMessage.getFirstSwitched();\n-            }\n-\n-            @Override\n-            public int getFlowRecords() {\n-                return flowMessage.getNumFlowRecords();\n-            }\n-\n-            @Override\n-            public long getFlowSeqNum() {\n-                return flowMessage.getFlowSeqNum();\n-            }\n-\n-            @Override\n-            public Integer getInputSnmp() {\n-                return flowMessage.getInputSnmpIfindex();\n-            }\n-\n-            @Override\n-            public Integer getIpProtocolVersion() {\n-                return flowMessage.getIpProtocolVersion();\n-            }\n-\n-            @Override\n-            public Long getLastSwitched() {\n-                return flowMessage.getLastSwitched();\n-            }\n-\n-            @Override\n-            public String getNextHop() {\n-                return flowMessage.getNextHopAddress();\n-            }\n-\n-            @Override\n-            public Optional<String> getNextHopHostname() {\n-                return Optional.of(flowMessage.getNextHopHostname());\n-            }\n-\n-            @Override\n-            public Integer getOutputSnmp() {\n-                return flowMessage.getOutputSnmpIfindex();\n-            }\n-\n-            @Override\n-            public Long getPackets() {\n-                return flowMessage.getNumPackets();\n-            }\n-\n-            @Override\n-            public Integer getProtocol() {\n-                return flowMessage.getProtocol();\n-            }\n-\n-            @Override\n-            public SamplingAlgorithm getSamplingAlgorithm() {\n-                switch (flowMessage.getSamplingAlgorithm().getNumber()) {\n-                    case 1:\n-                        return SamplingAlgorithm.SystematicCountBasedSampling;\n-                    case 2:\n-                        return SamplingAlgorithm.SystematicTimeBasedSampling;\n-                }\n-                return SamplingAlgorithm.Unassigned;\n-            }\n-\n-            @Override\n-            public Double getSamplingInterval() {\n-                return flowMessage.getSamplingInterval();\n-            }\n-\n-            @Override\n-            public String getSrcAddr() {\n-                return flowMessage.getSrcAddress();\n-            }\n-\n-            @Override\n-            public Optional<String> getSrcAddrHostname() {\n-                return Optional.of(flowMessage.getSrcHostname());\n-            }\n-\n-            @Override\n-            public Long getSrcAs() {\n-                return flowMessage.getSrcAs();\n-            }\n-\n-            @Override\n-            public Integer getSrcMaskLen() {\n-                return flowMessage.getSrcMaskLen();\n-            }\n-\n-            @Override\n-            public Integer getSrcPort() {\n-                return flowMessage.getSrcPort();\n-            }\n-\n-            @Override\n-            public Integer getTcpFlags() {\n-                return flowMessage.getTcpFlags();\n-            }\n-\n-            @Override\n-            public Integer getTos() {\n-                return flowMessage.getTos();\n-            }\n-\n-            @Override\n-            public NetflowVersion getNetflowVersion() {\n-                switch (flowMessage.getNetflowVersion().getNumber()) {\n-                    case 0:\n-                        return NetflowVersion.V5;\n-                    case 1:\n-                        return NetflowVersion.V9;\n-                    case 2:\n-                        return NetflowVersion.IPFIX;\n-                    case 3:\n-                        return NetflowVersion.SFLOW;\n-                    default:\n-                        return NetflowVersion.V5;\n-                }\n-            }\n-\n-            @Override\n-            public Integer getVlan() {\n-                return flowMessage.getVlan();\n-            }\n-\n-            @Override\n-            public String getNodeIdentifier() {\n-                return flowMessage.getNodeIdentifier();\n-            }\n-        };\n-    }\n-}\n", "next_change": null}]}, "revised_code_in_main": {"commit": "3352dcced0424e52de475b87840f05dff94fbec4", "changed_code": [{"header": "diff --git a/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5Converter.java b/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5Converter.java\ndeleted file mode 100644\nindex 8d866358533..00000000000\n--- a/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5Converter.java\n+++ /dev/null\n", "chunk": "@@ -1,250 +0,0 @@\n-/*******************************************************************************\n- * This file is part of OpenNMS(R).\n- *\n- * Copyright (C) 2017-2017 The OpenNMS Group, Inc.\n- * OpenNMS(R) is Copyright (C) 1999-2017 The OpenNMS Group, Inc.\n- *\n- * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n- *\n- * OpenNMS(R) is free software: you can redistribute it and/or modify\n- * it under the terms of the GNU Affero General Public License as published\n- * by the Free Software Foundation, either version 3 of the License,\n- * or (at your option) any later version.\n- *\n- * OpenNMS(R) is distributed in the hope that it will be useful,\n- * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n- * GNU Affero General Public License for more details.\n- *\n- * You should have received a copy of the GNU Affero General Public License\n- * along with OpenNMS(R).  If not, see:\n- *      http://www.gnu.org/licenses/\n- *\n- * For more information contact:\n- *     OpenNMS(R) Licensing <license@opennms.org>\n- *     http://www.opennms.org/\n- *     http://www.opennms.com/\n- *******************************************************************************/\n-\n-package org.opennms.netmgt.telemetry.protocols.netflow.adapter.netflow5;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.Optional;\n-\n-import org.opennms.netmgt.flows.api.Converter;\n-import org.opennms.netmgt.flows.api.Flow;\n-import org.opennms.netmgt.flows.api.FlowMessage;\n-\n-public class Netflow5Converter implements Converter<FlowMessage> {\n-\n-    @Override\n-    public List<Flow> convert(final FlowMessage flowMessage) {\n-\n-        Flow flow = buildFlowFromProto(flowMessage);\n-        List<Flow> flows = new ArrayList<>();\n-        flows.add(flow);\n-        return flows;\n-    }\n-\n-    @Override\n-    public Flow convertTo(FlowMessage flowMessage) {\n-        return buildFlowFromProto(flowMessage);\n-    }\n-\n-    //TODO: Remove conversion and map the interface directly.\n-    private Flow buildFlowFromProto(FlowMessage flowMessage) {\n-        return new Flow() {\n-            @Override\n-            public long getTimestamp() {\n-                return flowMessage.getTimestamp();\n-            }\n-\n-            @Override\n-            public Long getBytes() {\n-                return flowMessage.getNumBytes();\n-            }\n-\n-            @Override\n-            public Direction getDirection() {\n-                if (flowMessage.getDirection().equals(org.opennms.netmgt.flows.model.Direction.EGRESS)) {\n-                    return Direction.EGRESS;\n-                }\n-                return Direction.INGRESS;\n-\n-            }\n-\n-            @Override\n-            public String getDstAddr() {\n-                return flowMessage.getDstAddress();\n-            }\n-\n-            @Override\n-            public Optional<String> getDstAddrHostname() {\n-                return Optional.of(flowMessage.getDstHostname());\n-            }\n-\n-            @Override\n-            public Long getDstAs() {\n-                return flowMessage.getDstAs();\n-            }\n-\n-            @Override\n-            public Integer getDstMaskLen() {\n-                return flowMessage.getDstMaskLen();\n-            }\n-\n-            @Override\n-            public Integer getDstPort() {\n-                return flowMessage.getDstPort();\n-            }\n-\n-            @Override\n-            public Integer getEngineId() {\n-                return flowMessage.getEngineId();\n-            }\n-\n-            @Override\n-            public Integer getEngineType() {\n-                return flowMessage.getEngineType();\n-            }\n-\n-            @Override\n-            public Long getDeltaSwitched() {\n-                return flowMessage.getDeltaSwitched();\n-            }\n-\n-            @Override\n-            public Long getFirstSwitched() {\n-                return flowMessage.getFirstSwitched();\n-            }\n-\n-            @Override\n-            public int getFlowRecords() {\n-                return flowMessage.getNumFlowRecords();\n-            }\n-\n-            @Override\n-            public long getFlowSeqNum() {\n-                return flowMessage.getFlowSeqNum();\n-            }\n-\n-            @Override\n-            public Integer getInputSnmp() {\n-                return flowMessage.getInputSnmpIfindex();\n-            }\n-\n-            @Override\n-            public Integer getIpProtocolVersion() {\n-                return flowMessage.getIpProtocolVersion();\n-            }\n-\n-            @Override\n-            public Long getLastSwitched() {\n-                return flowMessage.getLastSwitched();\n-            }\n-\n-            @Override\n-            public String getNextHop() {\n-                return flowMessage.getNextHopAddress();\n-            }\n-\n-            @Override\n-            public Optional<String> getNextHopHostname() {\n-                return Optional.of(flowMessage.getNextHopHostname());\n-            }\n-\n-            @Override\n-            public Integer getOutputSnmp() {\n-                return flowMessage.getOutputSnmpIfindex();\n-            }\n-\n-            @Override\n-            public Long getPackets() {\n-                return flowMessage.getNumPackets();\n-            }\n-\n-            @Override\n-            public Integer getProtocol() {\n-                return flowMessage.getProtocol();\n-            }\n-\n-            @Override\n-            public SamplingAlgorithm getSamplingAlgorithm() {\n-                switch (flowMessage.getSamplingAlgorithm().getNumber()) {\n-                    case 1:\n-                        return SamplingAlgorithm.SystematicCountBasedSampling;\n-                    case 2:\n-                        return SamplingAlgorithm.SystematicTimeBasedSampling;\n-                }\n-                return SamplingAlgorithm.Unassigned;\n-            }\n-\n-            @Override\n-            public Double getSamplingInterval() {\n-                return flowMessage.getSamplingInterval();\n-            }\n-\n-            @Override\n-            public String getSrcAddr() {\n-                return flowMessage.getSrcAddress();\n-            }\n-\n-            @Override\n-            public Optional<String> getSrcAddrHostname() {\n-                return Optional.of(flowMessage.getSrcHostname());\n-            }\n-\n-            @Override\n-            public Long getSrcAs() {\n-                return flowMessage.getSrcAs();\n-            }\n-\n-            @Override\n-            public Integer getSrcMaskLen() {\n-                return flowMessage.getSrcMaskLen();\n-            }\n-\n-            @Override\n-            public Integer getSrcPort() {\n-                return flowMessage.getSrcPort();\n-            }\n-\n-            @Override\n-            public Integer getTcpFlags() {\n-                return flowMessage.getTcpFlags();\n-            }\n-\n-            @Override\n-            public Integer getTos() {\n-                return flowMessage.getTos();\n-            }\n-\n-            @Override\n-            public NetflowVersion getNetflowVersion() {\n-                switch (flowMessage.getNetflowVersion().getNumber()) {\n-                    case 0:\n-                        return NetflowVersion.V5;\n-                    case 1:\n-                        return NetflowVersion.V9;\n-                    case 2:\n-                        return NetflowVersion.IPFIX;\n-                    case 3:\n-                        return NetflowVersion.SFLOW;\n-                    default:\n-                        return NetflowVersion.V5;\n-                }\n-            }\n-\n-            @Override\n-            public Integer getVlan() {\n-                return flowMessage.getVlan();\n-            }\n-\n-            @Override\n-            public String getNodeIdentifier() {\n-                return flowMessage.getNodeIdentifier();\n-            }\n-        };\n-    }\n-}\n", "next_change": null}]}, "commits_in_main": [{"oid": "3352dcced0424e52de475b87840f05dff94fbec4", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDYzNjk2Mg==", "url": "https://github.com/OpenNMS/opennms/pull/2903#discussion_r384636962", "body": "Should be `Optional.ofNullable`", "bodyText": "Should be Optional.ofNullable", "bodyHTML": "<p dir=\"auto\">Should be <code>Optional.ofNullable</code></p>", "author": "fooker", "createdAt": "2020-02-26T17:10:02Z", "path": "features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5Converter.java", "diffHunk": "@@ -28,17 +28,223 @@\n \n package org.opennms.netmgt.telemetry.protocols.netflow.adapter.netflow5;\n \n-import java.util.Collections;\n+import java.util.ArrayList;\n import java.util.List;\n+import java.util.Optional;\n \n-import org.bson.BsonDocument;\n import org.opennms.netmgt.flows.api.Converter;\n import org.opennms.netmgt.flows.api.Flow;\n+import org.opennms.netmgt.flows.api.FlowMessage;\n \n-public class Netflow5Converter implements Converter<BsonDocument> {\n+public class Netflow5Converter implements Converter<FlowMessage> {\n \n     @Override\n-    public List<Flow> convert(final BsonDocument packet) {\n-        return Collections.singletonList(new Netflow5Flow(packet));\n+    public List<Flow> convert(final FlowMessage flowMessage) {\n+\n+        Flow flow = buildFlowFromProto(flowMessage);\n+        List<Flow> flows = new ArrayList<>();\n+        flows.add(flow);\n+        return flows;\n+    }\n+\n+    @Override\n+    public Flow convertTo(FlowMessage flowMessage) {\n+        return buildFlowFromProto(flowMessage);\n+    }\n+\n+    //TODO: Remove conversion and map the interface directly.\n+    private Flow buildFlowFromProto(FlowMessage flowMessage) {\n+        return new Flow() {\n+            @Override\n+            public long getTimestamp() {\n+                return flowMessage.getTimestamp();\n+            }\n+\n+            @Override\n+            public Long getBytes() {\n+                return flowMessage.getNumBytes();\n+            }\n+\n+            @Override\n+            public Direction getDirection() {\n+                if (flowMessage.getDirection().equals(org.opennms.netmgt.flows.model.Direction.EGRESS)) {\n+                    return Direction.EGRESS;\n+                }\n+                return Direction.INGRESS;\n+\n+            }\n+\n+            @Override\n+            public String getDstAddr() {\n+                return flowMessage.getDstAddress();\n+            }\n+\n+            @Override\n+            public Optional<String> getDstAddrHostname() {\n+                return Optional.of(flowMessage.getDstHostname());\n+            }\n+\n+            @Override\n+            public Long getDstAs() {\n+                return flowMessage.getDstAs();\n+            }\n+\n+            @Override\n+            public Integer getDstMaskLen() {\n+                return flowMessage.getDstMaskLen();\n+            }\n+\n+            @Override\n+            public Integer getDstPort() {\n+                return flowMessage.getDstPort();\n+            }\n+\n+            @Override\n+            public Integer getEngineId() {\n+                return flowMessage.getEngineId();\n+            }\n+\n+            @Override\n+            public Integer getEngineType() {\n+                return flowMessage.getEngineType();\n+            }\n+\n+            @Override\n+            public Long getDeltaSwitched() {\n+                return flowMessage.getDeltaSwitched();\n+            }\n+\n+            @Override\n+            public Long getFirstSwitched() {\n+                return flowMessage.getFirstSwitched();\n+            }\n+\n+            @Override\n+            public int getFlowRecords() {\n+                return flowMessage.getNumFlowRecords();\n+            }\n+\n+            @Override\n+            public long getFlowSeqNum() {\n+                return flowMessage.getFlowSeqNum();\n+            }\n+\n+            @Override\n+            public Integer getInputSnmp() {\n+                return flowMessage.getInputSnmpIfindex();\n+            }\n+\n+            @Override\n+            public Integer getIpProtocolVersion() {\n+                return flowMessage.getIpProtocolVersion();\n+            }\n+\n+            @Override\n+            public Long getLastSwitched() {\n+                return flowMessage.getLastSwitched();\n+            }\n+\n+            @Override\n+            public String getNextHop() {\n+                return flowMessage.getNextHopAddress();\n+            }\n+\n+            @Override\n+            public Optional<String> getNextHopHostname() {\n+                return Optional.of(flowMessage.getNextHopHostname());", "originalCommit": "766d7069386bc37238465cc8b8d38a51eec8ff4d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b0e90f013c5b6948e960f7eb2d66870c3c84e12a", "changed_code": [{"header": "diff --git a/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5Converter.java b/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5Converter.java\ndeleted file mode 100644\nindex 8d866358533..00000000000\n--- a/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5Converter.java\n+++ /dev/null\n", "chunk": "@@ -1,250 +0,0 @@\n-/*******************************************************************************\n- * This file is part of OpenNMS(R).\n- *\n- * Copyright (C) 2017-2017 The OpenNMS Group, Inc.\n- * OpenNMS(R) is Copyright (C) 1999-2017 The OpenNMS Group, Inc.\n- *\n- * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n- *\n- * OpenNMS(R) is free software: you can redistribute it and/or modify\n- * it under the terms of the GNU Affero General Public License as published\n- * by the Free Software Foundation, either version 3 of the License,\n- * or (at your option) any later version.\n- *\n- * OpenNMS(R) is distributed in the hope that it will be useful,\n- * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n- * GNU Affero General Public License for more details.\n- *\n- * You should have received a copy of the GNU Affero General Public License\n- * along with OpenNMS(R).  If not, see:\n- *      http://www.gnu.org/licenses/\n- *\n- * For more information contact:\n- *     OpenNMS(R) Licensing <license@opennms.org>\n- *     http://www.opennms.org/\n- *     http://www.opennms.com/\n- *******************************************************************************/\n-\n-package org.opennms.netmgt.telemetry.protocols.netflow.adapter.netflow5;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.Optional;\n-\n-import org.opennms.netmgt.flows.api.Converter;\n-import org.opennms.netmgt.flows.api.Flow;\n-import org.opennms.netmgt.flows.api.FlowMessage;\n-\n-public class Netflow5Converter implements Converter<FlowMessage> {\n-\n-    @Override\n-    public List<Flow> convert(final FlowMessage flowMessage) {\n-\n-        Flow flow = buildFlowFromProto(flowMessage);\n-        List<Flow> flows = new ArrayList<>();\n-        flows.add(flow);\n-        return flows;\n-    }\n-\n-    @Override\n-    public Flow convertTo(FlowMessage flowMessage) {\n-        return buildFlowFromProto(flowMessage);\n-    }\n-\n-    //TODO: Remove conversion and map the interface directly.\n-    private Flow buildFlowFromProto(FlowMessage flowMessage) {\n-        return new Flow() {\n-            @Override\n-            public long getTimestamp() {\n-                return flowMessage.getTimestamp();\n-            }\n-\n-            @Override\n-            public Long getBytes() {\n-                return flowMessage.getNumBytes();\n-            }\n-\n-            @Override\n-            public Direction getDirection() {\n-                if (flowMessage.getDirection().equals(org.opennms.netmgt.flows.model.Direction.EGRESS)) {\n-                    return Direction.EGRESS;\n-                }\n-                return Direction.INGRESS;\n-\n-            }\n-\n-            @Override\n-            public String getDstAddr() {\n-                return flowMessage.getDstAddress();\n-            }\n-\n-            @Override\n-            public Optional<String> getDstAddrHostname() {\n-                return Optional.of(flowMessage.getDstHostname());\n-            }\n-\n-            @Override\n-            public Long getDstAs() {\n-                return flowMessage.getDstAs();\n-            }\n-\n-            @Override\n-            public Integer getDstMaskLen() {\n-                return flowMessage.getDstMaskLen();\n-            }\n-\n-            @Override\n-            public Integer getDstPort() {\n-                return flowMessage.getDstPort();\n-            }\n-\n-            @Override\n-            public Integer getEngineId() {\n-                return flowMessage.getEngineId();\n-            }\n-\n-            @Override\n-            public Integer getEngineType() {\n-                return flowMessage.getEngineType();\n-            }\n-\n-            @Override\n-            public Long getDeltaSwitched() {\n-                return flowMessage.getDeltaSwitched();\n-            }\n-\n-            @Override\n-            public Long getFirstSwitched() {\n-                return flowMessage.getFirstSwitched();\n-            }\n-\n-            @Override\n-            public int getFlowRecords() {\n-                return flowMessage.getNumFlowRecords();\n-            }\n-\n-            @Override\n-            public long getFlowSeqNum() {\n-                return flowMessage.getFlowSeqNum();\n-            }\n-\n-            @Override\n-            public Integer getInputSnmp() {\n-                return flowMessage.getInputSnmpIfindex();\n-            }\n-\n-            @Override\n-            public Integer getIpProtocolVersion() {\n-                return flowMessage.getIpProtocolVersion();\n-            }\n-\n-            @Override\n-            public Long getLastSwitched() {\n-                return flowMessage.getLastSwitched();\n-            }\n-\n-            @Override\n-            public String getNextHop() {\n-                return flowMessage.getNextHopAddress();\n-            }\n-\n-            @Override\n-            public Optional<String> getNextHopHostname() {\n-                return Optional.of(flowMessage.getNextHopHostname());\n-            }\n-\n-            @Override\n-            public Integer getOutputSnmp() {\n-                return flowMessage.getOutputSnmpIfindex();\n-            }\n-\n-            @Override\n-            public Long getPackets() {\n-                return flowMessage.getNumPackets();\n-            }\n-\n-            @Override\n-            public Integer getProtocol() {\n-                return flowMessage.getProtocol();\n-            }\n-\n-            @Override\n-            public SamplingAlgorithm getSamplingAlgorithm() {\n-                switch (flowMessage.getSamplingAlgorithm().getNumber()) {\n-                    case 1:\n-                        return SamplingAlgorithm.SystematicCountBasedSampling;\n-                    case 2:\n-                        return SamplingAlgorithm.SystematicTimeBasedSampling;\n-                }\n-                return SamplingAlgorithm.Unassigned;\n-            }\n-\n-            @Override\n-            public Double getSamplingInterval() {\n-                return flowMessage.getSamplingInterval();\n-            }\n-\n-            @Override\n-            public String getSrcAddr() {\n-                return flowMessage.getSrcAddress();\n-            }\n-\n-            @Override\n-            public Optional<String> getSrcAddrHostname() {\n-                return Optional.of(flowMessage.getSrcHostname());\n-            }\n-\n-            @Override\n-            public Long getSrcAs() {\n-                return flowMessage.getSrcAs();\n-            }\n-\n-            @Override\n-            public Integer getSrcMaskLen() {\n-                return flowMessage.getSrcMaskLen();\n-            }\n-\n-            @Override\n-            public Integer getSrcPort() {\n-                return flowMessage.getSrcPort();\n-            }\n-\n-            @Override\n-            public Integer getTcpFlags() {\n-                return flowMessage.getTcpFlags();\n-            }\n-\n-            @Override\n-            public Integer getTos() {\n-                return flowMessage.getTos();\n-            }\n-\n-            @Override\n-            public NetflowVersion getNetflowVersion() {\n-                switch (flowMessage.getNetflowVersion().getNumber()) {\n-                    case 0:\n-                        return NetflowVersion.V5;\n-                    case 1:\n-                        return NetflowVersion.V9;\n-                    case 2:\n-                        return NetflowVersion.IPFIX;\n-                    case 3:\n-                        return NetflowVersion.SFLOW;\n-                    default:\n-                        return NetflowVersion.V5;\n-                }\n-            }\n-\n-            @Override\n-            public Integer getVlan() {\n-                return flowMessage.getVlan();\n-            }\n-\n-            @Override\n-            public String getNodeIdentifier() {\n-                return flowMessage.getNodeIdentifier();\n-            }\n-        };\n-    }\n-}\n", "next_change": null}]}, "revised_code_in_main": {"commit": "3352dcced0424e52de475b87840f05dff94fbec4", "changed_code": [{"header": "diff --git a/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5Converter.java b/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5Converter.java\ndeleted file mode 100644\nindex 8d866358533..00000000000\n--- a/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5Converter.java\n+++ /dev/null\n", "chunk": "@@ -1,250 +0,0 @@\n-/*******************************************************************************\n- * This file is part of OpenNMS(R).\n- *\n- * Copyright (C) 2017-2017 The OpenNMS Group, Inc.\n- * OpenNMS(R) is Copyright (C) 1999-2017 The OpenNMS Group, Inc.\n- *\n- * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n- *\n- * OpenNMS(R) is free software: you can redistribute it and/or modify\n- * it under the terms of the GNU Affero General Public License as published\n- * by the Free Software Foundation, either version 3 of the License,\n- * or (at your option) any later version.\n- *\n- * OpenNMS(R) is distributed in the hope that it will be useful,\n- * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n- * GNU Affero General Public License for more details.\n- *\n- * You should have received a copy of the GNU Affero General Public License\n- * along with OpenNMS(R).  If not, see:\n- *      http://www.gnu.org/licenses/\n- *\n- * For more information contact:\n- *     OpenNMS(R) Licensing <license@opennms.org>\n- *     http://www.opennms.org/\n- *     http://www.opennms.com/\n- *******************************************************************************/\n-\n-package org.opennms.netmgt.telemetry.protocols.netflow.adapter.netflow5;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.Optional;\n-\n-import org.opennms.netmgt.flows.api.Converter;\n-import org.opennms.netmgt.flows.api.Flow;\n-import org.opennms.netmgt.flows.api.FlowMessage;\n-\n-public class Netflow5Converter implements Converter<FlowMessage> {\n-\n-    @Override\n-    public List<Flow> convert(final FlowMessage flowMessage) {\n-\n-        Flow flow = buildFlowFromProto(flowMessage);\n-        List<Flow> flows = new ArrayList<>();\n-        flows.add(flow);\n-        return flows;\n-    }\n-\n-    @Override\n-    public Flow convertTo(FlowMessage flowMessage) {\n-        return buildFlowFromProto(flowMessage);\n-    }\n-\n-    //TODO: Remove conversion and map the interface directly.\n-    private Flow buildFlowFromProto(FlowMessage flowMessage) {\n-        return new Flow() {\n-            @Override\n-            public long getTimestamp() {\n-                return flowMessage.getTimestamp();\n-            }\n-\n-            @Override\n-            public Long getBytes() {\n-                return flowMessage.getNumBytes();\n-            }\n-\n-            @Override\n-            public Direction getDirection() {\n-                if (flowMessage.getDirection().equals(org.opennms.netmgt.flows.model.Direction.EGRESS)) {\n-                    return Direction.EGRESS;\n-                }\n-                return Direction.INGRESS;\n-\n-            }\n-\n-            @Override\n-            public String getDstAddr() {\n-                return flowMessage.getDstAddress();\n-            }\n-\n-            @Override\n-            public Optional<String> getDstAddrHostname() {\n-                return Optional.of(flowMessage.getDstHostname());\n-            }\n-\n-            @Override\n-            public Long getDstAs() {\n-                return flowMessage.getDstAs();\n-            }\n-\n-            @Override\n-            public Integer getDstMaskLen() {\n-                return flowMessage.getDstMaskLen();\n-            }\n-\n-            @Override\n-            public Integer getDstPort() {\n-                return flowMessage.getDstPort();\n-            }\n-\n-            @Override\n-            public Integer getEngineId() {\n-                return flowMessage.getEngineId();\n-            }\n-\n-            @Override\n-            public Integer getEngineType() {\n-                return flowMessage.getEngineType();\n-            }\n-\n-            @Override\n-            public Long getDeltaSwitched() {\n-                return flowMessage.getDeltaSwitched();\n-            }\n-\n-            @Override\n-            public Long getFirstSwitched() {\n-                return flowMessage.getFirstSwitched();\n-            }\n-\n-            @Override\n-            public int getFlowRecords() {\n-                return flowMessage.getNumFlowRecords();\n-            }\n-\n-            @Override\n-            public long getFlowSeqNum() {\n-                return flowMessage.getFlowSeqNum();\n-            }\n-\n-            @Override\n-            public Integer getInputSnmp() {\n-                return flowMessage.getInputSnmpIfindex();\n-            }\n-\n-            @Override\n-            public Integer getIpProtocolVersion() {\n-                return flowMessage.getIpProtocolVersion();\n-            }\n-\n-            @Override\n-            public Long getLastSwitched() {\n-                return flowMessage.getLastSwitched();\n-            }\n-\n-            @Override\n-            public String getNextHop() {\n-                return flowMessage.getNextHopAddress();\n-            }\n-\n-            @Override\n-            public Optional<String> getNextHopHostname() {\n-                return Optional.of(flowMessage.getNextHopHostname());\n-            }\n-\n-            @Override\n-            public Integer getOutputSnmp() {\n-                return flowMessage.getOutputSnmpIfindex();\n-            }\n-\n-            @Override\n-            public Long getPackets() {\n-                return flowMessage.getNumPackets();\n-            }\n-\n-            @Override\n-            public Integer getProtocol() {\n-                return flowMessage.getProtocol();\n-            }\n-\n-            @Override\n-            public SamplingAlgorithm getSamplingAlgorithm() {\n-                switch (flowMessage.getSamplingAlgorithm().getNumber()) {\n-                    case 1:\n-                        return SamplingAlgorithm.SystematicCountBasedSampling;\n-                    case 2:\n-                        return SamplingAlgorithm.SystematicTimeBasedSampling;\n-                }\n-                return SamplingAlgorithm.Unassigned;\n-            }\n-\n-            @Override\n-            public Double getSamplingInterval() {\n-                return flowMessage.getSamplingInterval();\n-            }\n-\n-            @Override\n-            public String getSrcAddr() {\n-                return flowMessage.getSrcAddress();\n-            }\n-\n-            @Override\n-            public Optional<String> getSrcAddrHostname() {\n-                return Optional.of(flowMessage.getSrcHostname());\n-            }\n-\n-            @Override\n-            public Long getSrcAs() {\n-                return flowMessage.getSrcAs();\n-            }\n-\n-            @Override\n-            public Integer getSrcMaskLen() {\n-                return flowMessage.getSrcMaskLen();\n-            }\n-\n-            @Override\n-            public Integer getSrcPort() {\n-                return flowMessage.getSrcPort();\n-            }\n-\n-            @Override\n-            public Integer getTcpFlags() {\n-                return flowMessage.getTcpFlags();\n-            }\n-\n-            @Override\n-            public Integer getTos() {\n-                return flowMessage.getTos();\n-            }\n-\n-            @Override\n-            public NetflowVersion getNetflowVersion() {\n-                switch (flowMessage.getNetflowVersion().getNumber()) {\n-                    case 0:\n-                        return NetflowVersion.V5;\n-                    case 1:\n-                        return NetflowVersion.V9;\n-                    case 2:\n-                        return NetflowVersion.IPFIX;\n-                    case 3:\n-                        return NetflowVersion.SFLOW;\n-                    default:\n-                        return NetflowVersion.V5;\n-                }\n-            }\n-\n-            @Override\n-            public Integer getVlan() {\n-                return flowMessage.getVlan();\n-            }\n-\n-            @Override\n-            public String getNodeIdentifier() {\n-                return flowMessage.getNodeIdentifier();\n-            }\n-        };\n-    }\n-}\n", "next_change": null}]}, "commits_in_main": [{"oid": "3352dcced0424e52de475b87840f05dff94fbec4", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDYzNzg3NA==", "url": "https://github.com/OpenNMS/opennms/pull/2903#discussion_r384637874", "body": "`SmaplingAlgorithm` is an enum by itself. We should use the enum variants instead of the number.", "bodyText": "SmaplingAlgorithm is an enum by itself. We should use the enum variants instead of the number.", "bodyHTML": "<p dir=\"auto\"><code>SmaplingAlgorithm</code> is an enum by itself. We should use the enum variants instead of the number.</p>", "author": "fooker", "createdAt": "2020-02-26T17:11:27Z", "path": "features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5Converter.java", "diffHunk": "@@ -28,17 +28,223 @@\n \n package org.opennms.netmgt.telemetry.protocols.netflow.adapter.netflow5;\n \n-import java.util.Collections;\n+import java.util.ArrayList;\n import java.util.List;\n+import java.util.Optional;\n \n-import org.bson.BsonDocument;\n import org.opennms.netmgt.flows.api.Converter;\n import org.opennms.netmgt.flows.api.Flow;\n+import org.opennms.netmgt.flows.api.FlowMessage;\n \n-public class Netflow5Converter implements Converter<BsonDocument> {\n+public class Netflow5Converter implements Converter<FlowMessage> {\n \n     @Override\n-    public List<Flow> convert(final BsonDocument packet) {\n-        return Collections.singletonList(new Netflow5Flow(packet));\n+    public List<Flow> convert(final FlowMessage flowMessage) {\n+\n+        Flow flow = buildFlowFromProto(flowMessage);\n+        List<Flow> flows = new ArrayList<>();\n+        flows.add(flow);\n+        return flows;\n+    }\n+\n+    @Override\n+    public Flow convertTo(FlowMessage flowMessage) {\n+        return buildFlowFromProto(flowMessage);\n+    }\n+\n+    //TODO: Remove conversion and map the interface directly.\n+    private Flow buildFlowFromProto(FlowMessage flowMessage) {\n+        return new Flow() {\n+            @Override\n+            public long getTimestamp() {\n+                return flowMessage.getTimestamp();\n+            }\n+\n+            @Override\n+            public Long getBytes() {\n+                return flowMessage.getNumBytes();\n+            }\n+\n+            @Override\n+            public Direction getDirection() {\n+                if (flowMessage.getDirection().equals(org.opennms.netmgt.flows.model.Direction.EGRESS)) {\n+                    return Direction.EGRESS;\n+                }\n+                return Direction.INGRESS;\n+\n+            }\n+\n+            @Override\n+            public String getDstAddr() {\n+                return flowMessage.getDstAddress();\n+            }\n+\n+            @Override\n+            public Optional<String> getDstAddrHostname() {\n+                return Optional.of(flowMessage.getDstHostname());\n+            }\n+\n+            @Override\n+            public Long getDstAs() {\n+                return flowMessage.getDstAs();\n+            }\n+\n+            @Override\n+            public Integer getDstMaskLen() {\n+                return flowMessage.getDstMaskLen();\n+            }\n+\n+            @Override\n+            public Integer getDstPort() {\n+                return flowMessage.getDstPort();\n+            }\n+\n+            @Override\n+            public Integer getEngineId() {\n+                return flowMessage.getEngineId();\n+            }\n+\n+            @Override\n+            public Integer getEngineType() {\n+                return flowMessage.getEngineType();\n+            }\n+\n+            @Override\n+            public Long getDeltaSwitched() {\n+                return flowMessage.getDeltaSwitched();\n+            }\n+\n+            @Override\n+            public Long getFirstSwitched() {\n+                return flowMessage.getFirstSwitched();\n+            }\n+\n+            @Override\n+            public int getFlowRecords() {\n+                return flowMessage.getNumFlowRecords();\n+            }\n+\n+            @Override\n+            public long getFlowSeqNum() {\n+                return flowMessage.getFlowSeqNum();\n+            }\n+\n+            @Override\n+            public Integer getInputSnmp() {\n+                return flowMessage.getInputSnmpIfindex();\n+            }\n+\n+            @Override\n+            public Integer getIpProtocolVersion() {\n+                return flowMessage.getIpProtocolVersion();\n+            }\n+\n+            @Override\n+            public Long getLastSwitched() {\n+                return flowMessage.getLastSwitched();\n+            }\n+\n+            @Override\n+            public String getNextHop() {\n+                return flowMessage.getNextHopAddress();\n+            }\n+\n+            @Override\n+            public Optional<String> getNextHopHostname() {\n+                return Optional.of(flowMessage.getNextHopHostname());\n+            }\n+\n+            @Override\n+            public Integer getOutputSnmp() {\n+                return flowMessage.getOutputSnmpIfindex();\n+            }\n+\n+            @Override\n+            public Long getPackets() {\n+                return flowMessage.getNumPackets();\n+            }\n+\n+            @Override\n+            public Integer getProtocol() {\n+                return flowMessage.getProtocol();\n+            }\n+\n+            @Override\n+            public SamplingAlgorithm getSamplingAlgorithm() {\n+                switch (flowMessage.getSamplingAlgorithm().getNumber()) {", "originalCommit": "766d7069386bc37238465cc8b8d38a51eec8ff4d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b0e90f013c5b6948e960f7eb2d66870c3c84e12a", "changed_code": [{"header": "diff --git a/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5Converter.java b/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5Converter.java\ndeleted file mode 100644\nindex 8d866358533..00000000000\n--- a/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5Converter.java\n+++ /dev/null\n", "chunk": "@@ -1,250 +0,0 @@\n-/*******************************************************************************\n- * This file is part of OpenNMS(R).\n- *\n- * Copyright (C) 2017-2017 The OpenNMS Group, Inc.\n- * OpenNMS(R) is Copyright (C) 1999-2017 The OpenNMS Group, Inc.\n- *\n- * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n- *\n- * OpenNMS(R) is free software: you can redistribute it and/or modify\n- * it under the terms of the GNU Affero General Public License as published\n- * by the Free Software Foundation, either version 3 of the License,\n- * or (at your option) any later version.\n- *\n- * OpenNMS(R) is distributed in the hope that it will be useful,\n- * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n- * GNU Affero General Public License for more details.\n- *\n- * You should have received a copy of the GNU Affero General Public License\n- * along with OpenNMS(R).  If not, see:\n- *      http://www.gnu.org/licenses/\n- *\n- * For more information contact:\n- *     OpenNMS(R) Licensing <license@opennms.org>\n- *     http://www.opennms.org/\n- *     http://www.opennms.com/\n- *******************************************************************************/\n-\n-package org.opennms.netmgt.telemetry.protocols.netflow.adapter.netflow5;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.Optional;\n-\n-import org.opennms.netmgt.flows.api.Converter;\n-import org.opennms.netmgt.flows.api.Flow;\n-import org.opennms.netmgt.flows.api.FlowMessage;\n-\n-public class Netflow5Converter implements Converter<FlowMessage> {\n-\n-    @Override\n-    public List<Flow> convert(final FlowMessage flowMessage) {\n-\n-        Flow flow = buildFlowFromProto(flowMessage);\n-        List<Flow> flows = new ArrayList<>();\n-        flows.add(flow);\n-        return flows;\n-    }\n-\n-    @Override\n-    public Flow convertTo(FlowMessage flowMessage) {\n-        return buildFlowFromProto(flowMessage);\n-    }\n-\n-    //TODO: Remove conversion and map the interface directly.\n-    private Flow buildFlowFromProto(FlowMessage flowMessage) {\n-        return new Flow() {\n-            @Override\n-            public long getTimestamp() {\n-                return flowMessage.getTimestamp();\n-            }\n-\n-            @Override\n-            public Long getBytes() {\n-                return flowMessage.getNumBytes();\n-            }\n-\n-            @Override\n-            public Direction getDirection() {\n-                if (flowMessage.getDirection().equals(org.opennms.netmgt.flows.model.Direction.EGRESS)) {\n-                    return Direction.EGRESS;\n-                }\n-                return Direction.INGRESS;\n-\n-            }\n-\n-            @Override\n-            public String getDstAddr() {\n-                return flowMessage.getDstAddress();\n-            }\n-\n-            @Override\n-            public Optional<String> getDstAddrHostname() {\n-                return Optional.of(flowMessage.getDstHostname());\n-            }\n-\n-            @Override\n-            public Long getDstAs() {\n-                return flowMessage.getDstAs();\n-            }\n-\n-            @Override\n-            public Integer getDstMaskLen() {\n-                return flowMessage.getDstMaskLen();\n-            }\n-\n-            @Override\n-            public Integer getDstPort() {\n-                return flowMessage.getDstPort();\n-            }\n-\n-            @Override\n-            public Integer getEngineId() {\n-                return flowMessage.getEngineId();\n-            }\n-\n-            @Override\n-            public Integer getEngineType() {\n-                return flowMessage.getEngineType();\n-            }\n-\n-            @Override\n-            public Long getDeltaSwitched() {\n-                return flowMessage.getDeltaSwitched();\n-            }\n-\n-            @Override\n-            public Long getFirstSwitched() {\n-                return flowMessage.getFirstSwitched();\n-            }\n-\n-            @Override\n-            public int getFlowRecords() {\n-                return flowMessage.getNumFlowRecords();\n-            }\n-\n-            @Override\n-            public long getFlowSeqNum() {\n-                return flowMessage.getFlowSeqNum();\n-            }\n-\n-            @Override\n-            public Integer getInputSnmp() {\n-                return flowMessage.getInputSnmpIfindex();\n-            }\n-\n-            @Override\n-            public Integer getIpProtocolVersion() {\n-                return flowMessage.getIpProtocolVersion();\n-            }\n-\n-            @Override\n-            public Long getLastSwitched() {\n-                return flowMessage.getLastSwitched();\n-            }\n-\n-            @Override\n-            public String getNextHop() {\n-                return flowMessage.getNextHopAddress();\n-            }\n-\n-            @Override\n-            public Optional<String> getNextHopHostname() {\n-                return Optional.of(flowMessage.getNextHopHostname());\n-            }\n-\n-            @Override\n-            public Integer getOutputSnmp() {\n-                return flowMessage.getOutputSnmpIfindex();\n-            }\n-\n-            @Override\n-            public Long getPackets() {\n-                return flowMessage.getNumPackets();\n-            }\n-\n-            @Override\n-            public Integer getProtocol() {\n-                return flowMessage.getProtocol();\n-            }\n-\n-            @Override\n-            public SamplingAlgorithm getSamplingAlgorithm() {\n-                switch (flowMessage.getSamplingAlgorithm().getNumber()) {\n-                    case 1:\n-                        return SamplingAlgorithm.SystematicCountBasedSampling;\n-                    case 2:\n-                        return SamplingAlgorithm.SystematicTimeBasedSampling;\n-                }\n-                return SamplingAlgorithm.Unassigned;\n-            }\n-\n-            @Override\n-            public Double getSamplingInterval() {\n-                return flowMessage.getSamplingInterval();\n-            }\n-\n-            @Override\n-            public String getSrcAddr() {\n-                return flowMessage.getSrcAddress();\n-            }\n-\n-            @Override\n-            public Optional<String> getSrcAddrHostname() {\n-                return Optional.of(flowMessage.getSrcHostname());\n-            }\n-\n-            @Override\n-            public Long getSrcAs() {\n-                return flowMessage.getSrcAs();\n-            }\n-\n-            @Override\n-            public Integer getSrcMaskLen() {\n-                return flowMessage.getSrcMaskLen();\n-            }\n-\n-            @Override\n-            public Integer getSrcPort() {\n-                return flowMessage.getSrcPort();\n-            }\n-\n-            @Override\n-            public Integer getTcpFlags() {\n-                return flowMessage.getTcpFlags();\n-            }\n-\n-            @Override\n-            public Integer getTos() {\n-                return flowMessage.getTos();\n-            }\n-\n-            @Override\n-            public NetflowVersion getNetflowVersion() {\n-                switch (flowMessage.getNetflowVersion().getNumber()) {\n-                    case 0:\n-                        return NetflowVersion.V5;\n-                    case 1:\n-                        return NetflowVersion.V9;\n-                    case 2:\n-                        return NetflowVersion.IPFIX;\n-                    case 3:\n-                        return NetflowVersion.SFLOW;\n-                    default:\n-                        return NetflowVersion.V5;\n-                }\n-            }\n-\n-            @Override\n-            public Integer getVlan() {\n-                return flowMessage.getVlan();\n-            }\n-\n-            @Override\n-            public String getNodeIdentifier() {\n-                return flowMessage.getNodeIdentifier();\n-            }\n-        };\n-    }\n-}\n", "next_change": null}]}, "revised_code_in_main": {"commit": "3352dcced0424e52de475b87840f05dff94fbec4", "changed_code": [{"header": "diff --git a/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5Converter.java b/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5Converter.java\ndeleted file mode 100644\nindex 8d866358533..00000000000\n--- a/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5Converter.java\n+++ /dev/null\n", "chunk": "@@ -1,250 +0,0 @@\n-/*******************************************************************************\n- * This file is part of OpenNMS(R).\n- *\n- * Copyright (C) 2017-2017 The OpenNMS Group, Inc.\n- * OpenNMS(R) is Copyright (C) 1999-2017 The OpenNMS Group, Inc.\n- *\n- * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n- *\n- * OpenNMS(R) is free software: you can redistribute it and/or modify\n- * it under the terms of the GNU Affero General Public License as published\n- * by the Free Software Foundation, either version 3 of the License,\n- * or (at your option) any later version.\n- *\n- * OpenNMS(R) is distributed in the hope that it will be useful,\n- * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n- * GNU Affero General Public License for more details.\n- *\n- * You should have received a copy of the GNU Affero General Public License\n- * along with OpenNMS(R).  If not, see:\n- *      http://www.gnu.org/licenses/\n- *\n- * For more information contact:\n- *     OpenNMS(R) Licensing <license@opennms.org>\n- *     http://www.opennms.org/\n- *     http://www.opennms.com/\n- *******************************************************************************/\n-\n-package org.opennms.netmgt.telemetry.protocols.netflow.adapter.netflow5;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.Optional;\n-\n-import org.opennms.netmgt.flows.api.Converter;\n-import org.opennms.netmgt.flows.api.Flow;\n-import org.opennms.netmgt.flows.api.FlowMessage;\n-\n-public class Netflow5Converter implements Converter<FlowMessage> {\n-\n-    @Override\n-    public List<Flow> convert(final FlowMessage flowMessage) {\n-\n-        Flow flow = buildFlowFromProto(flowMessage);\n-        List<Flow> flows = new ArrayList<>();\n-        flows.add(flow);\n-        return flows;\n-    }\n-\n-    @Override\n-    public Flow convertTo(FlowMessage flowMessage) {\n-        return buildFlowFromProto(flowMessage);\n-    }\n-\n-    //TODO: Remove conversion and map the interface directly.\n-    private Flow buildFlowFromProto(FlowMessage flowMessage) {\n-        return new Flow() {\n-            @Override\n-            public long getTimestamp() {\n-                return flowMessage.getTimestamp();\n-            }\n-\n-            @Override\n-            public Long getBytes() {\n-                return flowMessage.getNumBytes();\n-            }\n-\n-            @Override\n-            public Direction getDirection() {\n-                if (flowMessage.getDirection().equals(org.opennms.netmgt.flows.model.Direction.EGRESS)) {\n-                    return Direction.EGRESS;\n-                }\n-                return Direction.INGRESS;\n-\n-            }\n-\n-            @Override\n-            public String getDstAddr() {\n-                return flowMessage.getDstAddress();\n-            }\n-\n-            @Override\n-            public Optional<String> getDstAddrHostname() {\n-                return Optional.of(flowMessage.getDstHostname());\n-            }\n-\n-            @Override\n-            public Long getDstAs() {\n-                return flowMessage.getDstAs();\n-            }\n-\n-            @Override\n-            public Integer getDstMaskLen() {\n-                return flowMessage.getDstMaskLen();\n-            }\n-\n-            @Override\n-            public Integer getDstPort() {\n-                return flowMessage.getDstPort();\n-            }\n-\n-            @Override\n-            public Integer getEngineId() {\n-                return flowMessage.getEngineId();\n-            }\n-\n-            @Override\n-            public Integer getEngineType() {\n-                return flowMessage.getEngineType();\n-            }\n-\n-            @Override\n-            public Long getDeltaSwitched() {\n-                return flowMessage.getDeltaSwitched();\n-            }\n-\n-            @Override\n-            public Long getFirstSwitched() {\n-                return flowMessage.getFirstSwitched();\n-            }\n-\n-            @Override\n-            public int getFlowRecords() {\n-                return flowMessage.getNumFlowRecords();\n-            }\n-\n-            @Override\n-            public long getFlowSeqNum() {\n-                return flowMessage.getFlowSeqNum();\n-            }\n-\n-            @Override\n-            public Integer getInputSnmp() {\n-                return flowMessage.getInputSnmpIfindex();\n-            }\n-\n-            @Override\n-            public Integer getIpProtocolVersion() {\n-                return flowMessage.getIpProtocolVersion();\n-            }\n-\n-            @Override\n-            public Long getLastSwitched() {\n-                return flowMessage.getLastSwitched();\n-            }\n-\n-            @Override\n-            public String getNextHop() {\n-                return flowMessage.getNextHopAddress();\n-            }\n-\n-            @Override\n-            public Optional<String> getNextHopHostname() {\n-                return Optional.of(flowMessage.getNextHopHostname());\n-            }\n-\n-            @Override\n-            public Integer getOutputSnmp() {\n-                return flowMessage.getOutputSnmpIfindex();\n-            }\n-\n-            @Override\n-            public Long getPackets() {\n-                return flowMessage.getNumPackets();\n-            }\n-\n-            @Override\n-            public Integer getProtocol() {\n-                return flowMessage.getProtocol();\n-            }\n-\n-            @Override\n-            public SamplingAlgorithm getSamplingAlgorithm() {\n-                switch (flowMessage.getSamplingAlgorithm().getNumber()) {\n-                    case 1:\n-                        return SamplingAlgorithm.SystematicCountBasedSampling;\n-                    case 2:\n-                        return SamplingAlgorithm.SystematicTimeBasedSampling;\n-                }\n-                return SamplingAlgorithm.Unassigned;\n-            }\n-\n-            @Override\n-            public Double getSamplingInterval() {\n-                return flowMessage.getSamplingInterval();\n-            }\n-\n-            @Override\n-            public String getSrcAddr() {\n-                return flowMessage.getSrcAddress();\n-            }\n-\n-            @Override\n-            public Optional<String> getSrcAddrHostname() {\n-                return Optional.of(flowMessage.getSrcHostname());\n-            }\n-\n-            @Override\n-            public Long getSrcAs() {\n-                return flowMessage.getSrcAs();\n-            }\n-\n-            @Override\n-            public Integer getSrcMaskLen() {\n-                return flowMessage.getSrcMaskLen();\n-            }\n-\n-            @Override\n-            public Integer getSrcPort() {\n-                return flowMessage.getSrcPort();\n-            }\n-\n-            @Override\n-            public Integer getTcpFlags() {\n-                return flowMessage.getTcpFlags();\n-            }\n-\n-            @Override\n-            public Integer getTos() {\n-                return flowMessage.getTos();\n-            }\n-\n-            @Override\n-            public NetflowVersion getNetflowVersion() {\n-                switch (flowMessage.getNetflowVersion().getNumber()) {\n-                    case 0:\n-                        return NetflowVersion.V5;\n-                    case 1:\n-                        return NetflowVersion.V9;\n-                    case 2:\n-                        return NetflowVersion.IPFIX;\n-                    case 3:\n-                        return NetflowVersion.SFLOW;\n-                    default:\n-                        return NetflowVersion.V5;\n-                }\n-            }\n-\n-            @Override\n-            public Integer getVlan() {\n-                return flowMessage.getVlan();\n-            }\n-\n-            @Override\n-            public String getNodeIdentifier() {\n-                return flowMessage.getNodeIdentifier();\n-            }\n-        };\n-    }\n-}\n", "next_change": null}]}, "commits_in_main": [{"oid": "3352dcced0424e52de475b87840f05dff94fbec4", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDYzNzk4MA==", "url": "https://github.com/OpenNMS/opennms/pull/2903#discussion_r384637980", "body": "Should be `Optional.ofNullable`", "bodyText": "Should be Optional.ofNullable", "bodyHTML": "<p dir=\"auto\">Should be <code>Optional.ofNullable</code></p>", "author": "fooker", "createdAt": "2020-02-26T17:11:36Z", "path": "features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5Converter.java", "diffHunk": "@@ -28,17 +28,223 @@\n \n package org.opennms.netmgt.telemetry.protocols.netflow.adapter.netflow5;\n \n-import java.util.Collections;\n+import java.util.ArrayList;\n import java.util.List;\n+import java.util.Optional;\n \n-import org.bson.BsonDocument;\n import org.opennms.netmgt.flows.api.Converter;\n import org.opennms.netmgt.flows.api.Flow;\n+import org.opennms.netmgt.flows.api.FlowMessage;\n \n-public class Netflow5Converter implements Converter<BsonDocument> {\n+public class Netflow5Converter implements Converter<FlowMessage> {\n \n     @Override\n-    public List<Flow> convert(final BsonDocument packet) {\n-        return Collections.singletonList(new Netflow5Flow(packet));\n+    public List<Flow> convert(final FlowMessage flowMessage) {\n+\n+        Flow flow = buildFlowFromProto(flowMessage);\n+        List<Flow> flows = new ArrayList<>();\n+        flows.add(flow);\n+        return flows;\n+    }\n+\n+    @Override\n+    public Flow convertTo(FlowMessage flowMessage) {\n+        return buildFlowFromProto(flowMessage);\n+    }\n+\n+    //TODO: Remove conversion and map the interface directly.\n+    private Flow buildFlowFromProto(FlowMessage flowMessage) {\n+        return new Flow() {\n+            @Override\n+            public long getTimestamp() {\n+                return flowMessage.getTimestamp();\n+            }\n+\n+            @Override\n+            public Long getBytes() {\n+                return flowMessage.getNumBytes();\n+            }\n+\n+            @Override\n+            public Direction getDirection() {\n+                if (flowMessage.getDirection().equals(org.opennms.netmgt.flows.model.Direction.EGRESS)) {\n+                    return Direction.EGRESS;\n+                }\n+                return Direction.INGRESS;\n+\n+            }\n+\n+            @Override\n+            public String getDstAddr() {\n+                return flowMessage.getDstAddress();\n+            }\n+\n+            @Override\n+            public Optional<String> getDstAddrHostname() {\n+                return Optional.of(flowMessage.getDstHostname());\n+            }\n+\n+            @Override\n+            public Long getDstAs() {\n+                return flowMessage.getDstAs();\n+            }\n+\n+            @Override\n+            public Integer getDstMaskLen() {\n+                return flowMessage.getDstMaskLen();\n+            }\n+\n+            @Override\n+            public Integer getDstPort() {\n+                return flowMessage.getDstPort();\n+            }\n+\n+            @Override\n+            public Integer getEngineId() {\n+                return flowMessage.getEngineId();\n+            }\n+\n+            @Override\n+            public Integer getEngineType() {\n+                return flowMessage.getEngineType();\n+            }\n+\n+            @Override\n+            public Long getDeltaSwitched() {\n+                return flowMessage.getDeltaSwitched();\n+            }\n+\n+            @Override\n+            public Long getFirstSwitched() {\n+                return flowMessage.getFirstSwitched();\n+            }\n+\n+            @Override\n+            public int getFlowRecords() {\n+                return flowMessage.getNumFlowRecords();\n+            }\n+\n+            @Override\n+            public long getFlowSeqNum() {\n+                return flowMessage.getFlowSeqNum();\n+            }\n+\n+            @Override\n+            public Integer getInputSnmp() {\n+                return flowMessage.getInputSnmpIfindex();\n+            }\n+\n+            @Override\n+            public Integer getIpProtocolVersion() {\n+                return flowMessage.getIpProtocolVersion();\n+            }\n+\n+            @Override\n+            public Long getLastSwitched() {\n+                return flowMessage.getLastSwitched();\n+            }\n+\n+            @Override\n+            public String getNextHop() {\n+                return flowMessage.getNextHopAddress();\n+            }\n+\n+            @Override\n+            public Optional<String> getNextHopHostname() {\n+                return Optional.of(flowMessage.getNextHopHostname());\n+            }\n+\n+            @Override\n+            public Integer getOutputSnmp() {\n+                return flowMessage.getOutputSnmpIfindex();\n+            }\n+\n+            @Override\n+            public Long getPackets() {\n+                return flowMessage.getNumPackets();\n+            }\n+\n+            @Override\n+            public Integer getProtocol() {\n+                return flowMessage.getProtocol();\n+            }\n+\n+            @Override\n+            public SamplingAlgorithm getSamplingAlgorithm() {\n+                switch (flowMessage.getSamplingAlgorithm().getNumber()) {\n+                    case 1:\n+                        return SamplingAlgorithm.SystematicCountBasedSampling;\n+                    case 2:\n+                        return SamplingAlgorithm.SystematicTimeBasedSampling;\n+                }\n+                return SamplingAlgorithm.Unassigned;\n+            }\n+\n+            @Override\n+            public Double getSamplingInterval() {\n+                return flowMessage.getSamplingInterval();\n+            }\n+\n+            @Override\n+            public String getSrcAddr() {\n+                return flowMessage.getSrcAddress();\n+            }\n+\n+            @Override\n+            public Optional<String> getSrcAddrHostname() {\n+                return Optional.of(flowMessage.getSrcHostname());", "originalCommit": "766d7069386bc37238465cc8b8d38a51eec8ff4d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b0e90f013c5b6948e960f7eb2d66870c3c84e12a", "changed_code": [{"header": "diff --git a/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5Converter.java b/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5Converter.java\ndeleted file mode 100644\nindex 8d866358533..00000000000\n--- a/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5Converter.java\n+++ /dev/null\n", "chunk": "@@ -1,250 +0,0 @@\n-/*******************************************************************************\n- * This file is part of OpenNMS(R).\n- *\n- * Copyright (C) 2017-2017 The OpenNMS Group, Inc.\n- * OpenNMS(R) is Copyright (C) 1999-2017 The OpenNMS Group, Inc.\n- *\n- * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n- *\n- * OpenNMS(R) is free software: you can redistribute it and/or modify\n- * it under the terms of the GNU Affero General Public License as published\n- * by the Free Software Foundation, either version 3 of the License,\n- * or (at your option) any later version.\n- *\n- * OpenNMS(R) is distributed in the hope that it will be useful,\n- * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n- * GNU Affero General Public License for more details.\n- *\n- * You should have received a copy of the GNU Affero General Public License\n- * along with OpenNMS(R).  If not, see:\n- *      http://www.gnu.org/licenses/\n- *\n- * For more information contact:\n- *     OpenNMS(R) Licensing <license@opennms.org>\n- *     http://www.opennms.org/\n- *     http://www.opennms.com/\n- *******************************************************************************/\n-\n-package org.opennms.netmgt.telemetry.protocols.netflow.adapter.netflow5;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.Optional;\n-\n-import org.opennms.netmgt.flows.api.Converter;\n-import org.opennms.netmgt.flows.api.Flow;\n-import org.opennms.netmgt.flows.api.FlowMessage;\n-\n-public class Netflow5Converter implements Converter<FlowMessage> {\n-\n-    @Override\n-    public List<Flow> convert(final FlowMessage flowMessage) {\n-\n-        Flow flow = buildFlowFromProto(flowMessage);\n-        List<Flow> flows = new ArrayList<>();\n-        flows.add(flow);\n-        return flows;\n-    }\n-\n-    @Override\n-    public Flow convertTo(FlowMessage flowMessage) {\n-        return buildFlowFromProto(flowMessage);\n-    }\n-\n-    //TODO: Remove conversion and map the interface directly.\n-    private Flow buildFlowFromProto(FlowMessage flowMessage) {\n-        return new Flow() {\n-            @Override\n-            public long getTimestamp() {\n-                return flowMessage.getTimestamp();\n-            }\n-\n-            @Override\n-            public Long getBytes() {\n-                return flowMessage.getNumBytes();\n-            }\n-\n-            @Override\n-            public Direction getDirection() {\n-                if (flowMessage.getDirection().equals(org.opennms.netmgt.flows.model.Direction.EGRESS)) {\n-                    return Direction.EGRESS;\n-                }\n-                return Direction.INGRESS;\n-\n-            }\n-\n-            @Override\n-            public String getDstAddr() {\n-                return flowMessage.getDstAddress();\n-            }\n-\n-            @Override\n-            public Optional<String> getDstAddrHostname() {\n-                return Optional.of(flowMessage.getDstHostname());\n-            }\n-\n-            @Override\n-            public Long getDstAs() {\n-                return flowMessage.getDstAs();\n-            }\n-\n-            @Override\n-            public Integer getDstMaskLen() {\n-                return flowMessage.getDstMaskLen();\n-            }\n-\n-            @Override\n-            public Integer getDstPort() {\n-                return flowMessage.getDstPort();\n-            }\n-\n-            @Override\n-            public Integer getEngineId() {\n-                return flowMessage.getEngineId();\n-            }\n-\n-            @Override\n-            public Integer getEngineType() {\n-                return flowMessage.getEngineType();\n-            }\n-\n-            @Override\n-            public Long getDeltaSwitched() {\n-                return flowMessage.getDeltaSwitched();\n-            }\n-\n-            @Override\n-            public Long getFirstSwitched() {\n-                return flowMessage.getFirstSwitched();\n-            }\n-\n-            @Override\n-            public int getFlowRecords() {\n-                return flowMessage.getNumFlowRecords();\n-            }\n-\n-            @Override\n-            public long getFlowSeqNum() {\n-                return flowMessage.getFlowSeqNum();\n-            }\n-\n-            @Override\n-            public Integer getInputSnmp() {\n-                return flowMessage.getInputSnmpIfindex();\n-            }\n-\n-            @Override\n-            public Integer getIpProtocolVersion() {\n-                return flowMessage.getIpProtocolVersion();\n-            }\n-\n-            @Override\n-            public Long getLastSwitched() {\n-                return flowMessage.getLastSwitched();\n-            }\n-\n-            @Override\n-            public String getNextHop() {\n-                return flowMessage.getNextHopAddress();\n-            }\n-\n-            @Override\n-            public Optional<String> getNextHopHostname() {\n-                return Optional.of(flowMessage.getNextHopHostname());\n-            }\n-\n-            @Override\n-            public Integer getOutputSnmp() {\n-                return flowMessage.getOutputSnmpIfindex();\n-            }\n-\n-            @Override\n-            public Long getPackets() {\n-                return flowMessage.getNumPackets();\n-            }\n-\n-            @Override\n-            public Integer getProtocol() {\n-                return flowMessage.getProtocol();\n-            }\n-\n-            @Override\n-            public SamplingAlgorithm getSamplingAlgorithm() {\n-                switch (flowMessage.getSamplingAlgorithm().getNumber()) {\n-                    case 1:\n-                        return SamplingAlgorithm.SystematicCountBasedSampling;\n-                    case 2:\n-                        return SamplingAlgorithm.SystematicTimeBasedSampling;\n-                }\n-                return SamplingAlgorithm.Unassigned;\n-            }\n-\n-            @Override\n-            public Double getSamplingInterval() {\n-                return flowMessage.getSamplingInterval();\n-            }\n-\n-            @Override\n-            public String getSrcAddr() {\n-                return flowMessage.getSrcAddress();\n-            }\n-\n-            @Override\n-            public Optional<String> getSrcAddrHostname() {\n-                return Optional.of(flowMessage.getSrcHostname());\n-            }\n-\n-            @Override\n-            public Long getSrcAs() {\n-                return flowMessage.getSrcAs();\n-            }\n-\n-            @Override\n-            public Integer getSrcMaskLen() {\n-                return flowMessage.getSrcMaskLen();\n-            }\n-\n-            @Override\n-            public Integer getSrcPort() {\n-                return flowMessage.getSrcPort();\n-            }\n-\n-            @Override\n-            public Integer getTcpFlags() {\n-                return flowMessage.getTcpFlags();\n-            }\n-\n-            @Override\n-            public Integer getTos() {\n-                return flowMessage.getTos();\n-            }\n-\n-            @Override\n-            public NetflowVersion getNetflowVersion() {\n-                switch (flowMessage.getNetflowVersion().getNumber()) {\n-                    case 0:\n-                        return NetflowVersion.V5;\n-                    case 1:\n-                        return NetflowVersion.V9;\n-                    case 2:\n-                        return NetflowVersion.IPFIX;\n-                    case 3:\n-                        return NetflowVersion.SFLOW;\n-                    default:\n-                        return NetflowVersion.V5;\n-                }\n-            }\n-\n-            @Override\n-            public Integer getVlan() {\n-                return flowMessage.getVlan();\n-            }\n-\n-            @Override\n-            public String getNodeIdentifier() {\n-                return flowMessage.getNodeIdentifier();\n-            }\n-        };\n-    }\n-}\n", "next_change": null}]}, "revised_code_in_main": {"commit": "3352dcced0424e52de475b87840f05dff94fbec4", "changed_code": [{"header": "diff --git a/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5Converter.java b/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5Converter.java\ndeleted file mode 100644\nindex 8d866358533..00000000000\n--- a/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5Converter.java\n+++ /dev/null\n", "chunk": "@@ -1,250 +0,0 @@\n-/*******************************************************************************\n- * This file is part of OpenNMS(R).\n- *\n- * Copyright (C) 2017-2017 The OpenNMS Group, Inc.\n- * OpenNMS(R) is Copyright (C) 1999-2017 The OpenNMS Group, Inc.\n- *\n- * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n- *\n- * OpenNMS(R) is free software: you can redistribute it and/or modify\n- * it under the terms of the GNU Affero General Public License as published\n- * by the Free Software Foundation, either version 3 of the License,\n- * or (at your option) any later version.\n- *\n- * OpenNMS(R) is distributed in the hope that it will be useful,\n- * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n- * GNU Affero General Public License for more details.\n- *\n- * You should have received a copy of the GNU Affero General Public License\n- * along with OpenNMS(R).  If not, see:\n- *      http://www.gnu.org/licenses/\n- *\n- * For more information contact:\n- *     OpenNMS(R) Licensing <license@opennms.org>\n- *     http://www.opennms.org/\n- *     http://www.opennms.com/\n- *******************************************************************************/\n-\n-package org.opennms.netmgt.telemetry.protocols.netflow.adapter.netflow5;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.Optional;\n-\n-import org.opennms.netmgt.flows.api.Converter;\n-import org.opennms.netmgt.flows.api.Flow;\n-import org.opennms.netmgt.flows.api.FlowMessage;\n-\n-public class Netflow5Converter implements Converter<FlowMessage> {\n-\n-    @Override\n-    public List<Flow> convert(final FlowMessage flowMessage) {\n-\n-        Flow flow = buildFlowFromProto(flowMessage);\n-        List<Flow> flows = new ArrayList<>();\n-        flows.add(flow);\n-        return flows;\n-    }\n-\n-    @Override\n-    public Flow convertTo(FlowMessage flowMessage) {\n-        return buildFlowFromProto(flowMessage);\n-    }\n-\n-    //TODO: Remove conversion and map the interface directly.\n-    private Flow buildFlowFromProto(FlowMessage flowMessage) {\n-        return new Flow() {\n-            @Override\n-            public long getTimestamp() {\n-                return flowMessage.getTimestamp();\n-            }\n-\n-            @Override\n-            public Long getBytes() {\n-                return flowMessage.getNumBytes();\n-            }\n-\n-            @Override\n-            public Direction getDirection() {\n-                if (flowMessage.getDirection().equals(org.opennms.netmgt.flows.model.Direction.EGRESS)) {\n-                    return Direction.EGRESS;\n-                }\n-                return Direction.INGRESS;\n-\n-            }\n-\n-            @Override\n-            public String getDstAddr() {\n-                return flowMessage.getDstAddress();\n-            }\n-\n-            @Override\n-            public Optional<String> getDstAddrHostname() {\n-                return Optional.of(flowMessage.getDstHostname());\n-            }\n-\n-            @Override\n-            public Long getDstAs() {\n-                return flowMessage.getDstAs();\n-            }\n-\n-            @Override\n-            public Integer getDstMaskLen() {\n-                return flowMessage.getDstMaskLen();\n-            }\n-\n-            @Override\n-            public Integer getDstPort() {\n-                return flowMessage.getDstPort();\n-            }\n-\n-            @Override\n-            public Integer getEngineId() {\n-                return flowMessage.getEngineId();\n-            }\n-\n-            @Override\n-            public Integer getEngineType() {\n-                return flowMessage.getEngineType();\n-            }\n-\n-            @Override\n-            public Long getDeltaSwitched() {\n-                return flowMessage.getDeltaSwitched();\n-            }\n-\n-            @Override\n-            public Long getFirstSwitched() {\n-                return flowMessage.getFirstSwitched();\n-            }\n-\n-            @Override\n-            public int getFlowRecords() {\n-                return flowMessage.getNumFlowRecords();\n-            }\n-\n-            @Override\n-            public long getFlowSeqNum() {\n-                return flowMessage.getFlowSeqNum();\n-            }\n-\n-            @Override\n-            public Integer getInputSnmp() {\n-                return flowMessage.getInputSnmpIfindex();\n-            }\n-\n-            @Override\n-            public Integer getIpProtocolVersion() {\n-                return flowMessage.getIpProtocolVersion();\n-            }\n-\n-            @Override\n-            public Long getLastSwitched() {\n-                return flowMessage.getLastSwitched();\n-            }\n-\n-            @Override\n-            public String getNextHop() {\n-                return flowMessage.getNextHopAddress();\n-            }\n-\n-            @Override\n-            public Optional<String> getNextHopHostname() {\n-                return Optional.of(flowMessage.getNextHopHostname());\n-            }\n-\n-            @Override\n-            public Integer getOutputSnmp() {\n-                return flowMessage.getOutputSnmpIfindex();\n-            }\n-\n-            @Override\n-            public Long getPackets() {\n-                return flowMessage.getNumPackets();\n-            }\n-\n-            @Override\n-            public Integer getProtocol() {\n-                return flowMessage.getProtocol();\n-            }\n-\n-            @Override\n-            public SamplingAlgorithm getSamplingAlgorithm() {\n-                switch (flowMessage.getSamplingAlgorithm().getNumber()) {\n-                    case 1:\n-                        return SamplingAlgorithm.SystematicCountBasedSampling;\n-                    case 2:\n-                        return SamplingAlgorithm.SystematicTimeBasedSampling;\n-                }\n-                return SamplingAlgorithm.Unassigned;\n-            }\n-\n-            @Override\n-            public Double getSamplingInterval() {\n-                return flowMessage.getSamplingInterval();\n-            }\n-\n-            @Override\n-            public String getSrcAddr() {\n-                return flowMessage.getSrcAddress();\n-            }\n-\n-            @Override\n-            public Optional<String> getSrcAddrHostname() {\n-                return Optional.of(flowMessage.getSrcHostname());\n-            }\n-\n-            @Override\n-            public Long getSrcAs() {\n-                return flowMessage.getSrcAs();\n-            }\n-\n-            @Override\n-            public Integer getSrcMaskLen() {\n-                return flowMessage.getSrcMaskLen();\n-            }\n-\n-            @Override\n-            public Integer getSrcPort() {\n-                return flowMessage.getSrcPort();\n-            }\n-\n-            @Override\n-            public Integer getTcpFlags() {\n-                return flowMessage.getTcpFlags();\n-            }\n-\n-            @Override\n-            public Integer getTos() {\n-                return flowMessage.getTos();\n-            }\n-\n-            @Override\n-            public NetflowVersion getNetflowVersion() {\n-                switch (flowMessage.getNetflowVersion().getNumber()) {\n-                    case 0:\n-                        return NetflowVersion.V5;\n-                    case 1:\n-                        return NetflowVersion.V9;\n-                    case 2:\n-                        return NetflowVersion.IPFIX;\n-                    case 3:\n-                        return NetflowVersion.SFLOW;\n-                    default:\n-                        return NetflowVersion.V5;\n-                }\n-            }\n-\n-            @Override\n-            public Integer getVlan() {\n-                return flowMessage.getVlan();\n-            }\n-\n-            @Override\n-            public String getNodeIdentifier() {\n-                return flowMessage.getNodeIdentifier();\n-            }\n-        };\n-    }\n-}\n", "next_change": null}]}, "commits_in_main": [{"oid": "3352dcced0424e52de475b87840f05dff94fbec4", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDYzODE5Mw==", "url": "https://github.com/OpenNMS/opennms/pull/2903#discussion_r384638193", "body": "Use the variants here, too.", "bodyText": "Use the variants here, too.", "bodyHTML": "<p dir=\"auto\">Use the variants here, too.</p>", "author": "fooker", "createdAt": "2020-02-26T17:11:53Z", "path": "features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5Converter.java", "diffHunk": "@@ -28,17 +28,223 @@\n \n package org.opennms.netmgt.telemetry.protocols.netflow.adapter.netflow5;\n \n-import java.util.Collections;\n+import java.util.ArrayList;\n import java.util.List;\n+import java.util.Optional;\n \n-import org.bson.BsonDocument;\n import org.opennms.netmgt.flows.api.Converter;\n import org.opennms.netmgt.flows.api.Flow;\n+import org.opennms.netmgt.flows.api.FlowMessage;\n \n-public class Netflow5Converter implements Converter<BsonDocument> {\n+public class Netflow5Converter implements Converter<FlowMessage> {\n \n     @Override\n-    public List<Flow> convert(final BsonDocument packet) {\n-        return Collections.singletonList(new Netflow5Flow(packet));\n+    public List<Flow> convert(final FlowMessage flowMessage) {\n+\n+        Flow flow = buildFlowFromProto(flowMessage);\n+        List<Flow> flows = new ArrayList<>();\n+        flows.add(flow);\n+        return flows;\n+    }\n+\n+    @Override\n+    public Flow convertTo(FlowMessage flowMessage) {\n+        return buildFlowFromProto(flowMessage);\n+    }\n+\n+    //TODO: Remove conversion and map the interface directly.\n+    private Flow buildFlowFromProto(FlowMessage flowMessage) {\n+        return new Flow() {\n+            @Override\n+            public long getTimestamp() {\n+                return flowMessage.getTimestamp();\n+            }\n+\n+            @Override\n+            public Long getBytes() {\n+                return flowMessage.getNumBytes();\n+            }\n+\n+            @Override\n+            public Direction getDirection() {\n+                if (flowMessage.getDirection().equals(org.opennms.netmgt.flows.model.Direction.EGRESS)) {\n+                    return Direction.EGRESS;\n+                }\n+                return Direction.INGRESS;\n+\n+            }\n+\n+            @Override\n+            public String getDstAddr() {\n+                return flowMessage.getDstAddress();\n+            }\n+\n+            @Override\n+            public Optional<String> getDstAddrHostname() {\n+                return Optional.of(flowMessage.getDstHostname());\n+            }\n+\n+            @Override\n+            public Long getDstAs() {\n+                return flowMessage.getDstAs();\n+            }\n+\n+            @Override\n+            public Integer getDstMaskLen() {\n+                return flowMessage.getDstMaskLen();\n+            }\n+\n+            @Override\n+            public Integer getDstPort() {\n+                return flowMessage.getDstPort();\n+            }\n+\n+            @Override\n+            public Integer getEngineId() {\n+                return flowMessage.getEngineId();\n+            }\n+\n+            @Override\n+            public Integer getEngineType() {\n+                return flowMessage.getEngineType();\n+            }\n+\n+            @Override\n+            public Long getDeltaSwitched() {\n+                return flowMessage.getDeltaSwitched();\n+            }\n+\n+            @Override\n+            public Long getFirstSwitched() {\n+                return flowMessage.getFirstSwitched();\n+            }\n+\n+            @Override\n+            public int getFlowRecords() {\n+                return flowMessage.getNumFlowRecords();\n+            }\n+\n+            @Override\n+            public long getFlowSeqNum() {\n+                return flowMessage.getFlowSeqNum();\n+            }\n+\n+            @Override\n+            public Integer getInputSnmp() {\n+                return flowMessage.getInputSnmpIfindex();\n+            }\n+\n+            @Override\n+            public Integer getIpProtocolVersion() {\n+                return flowMessage.getIpProtocolVersion();\n+            }\n+\n+            @Override\n+            public Long getLastSwitched() {\n+                return flowMessage.getLastSwitched();\n+            }\n+\n+            @Override\n+            public String getNextHop() {\n+                return flowMessage.getNextHopAddress();\n+            }\n+\n+            @Override\n+            public Optional<String> getNextHopHostname() {\n+                return Optional.of(flowMessage.getNextHopHostname());\n+            }\n+\n+            @Override\n+            public Integer getOutputSnmp() {\n+                return flowMessage.getOutputSnmpIfindex();\n+            }\n+\n+            @Override\n+            public Long getPackets() {\n+                return flowMessage.getNumPackets();\n+            }\n+\n+            @Override\n+            public Integer getProtocol() {\n+                return flowMessage.getProtocol();\n+            }\n+\n+            @Override\n+            public SamplingAlgorithm getSamplingAlgorithm() {\n+                switch (flowMessage.getSamplingAlgorithm().getNumber()) {\n+                    case 1:\n+                        return SamplingAlgorithm.SystematicCountBasedSampling;\n+                    case 2:\n+                        return SamplingAlgorithm.SystematicTimeBasedSampling;\n+                }\n+                return SamplingAlgorithm.Unassigned;\n+            }\n+\n+            @Override\n+            public Double getSamplingInterval() {\n+                return flowMessage.getSamplingInterval();\n+            }\n+\n+            @Override\n+            public String getSrcAddr() {\n+                return flowMessage.getSrcAddress();\n+            }\n+\n+            @Override\n+            public Optional<String> getSrcAddrHostname() {\n+                return Optional.of(flowMessage.getSrcHostname());\n+            }\n+\n+            @Override\n+            public Long getSrcAs() {\n+                return flowMessage.getSrcAs();\n+            }\n+\n+            @Override\n+            public Integer getSrcMaskLen() {\n+                return flowMessage.getSrcMaskLen();\n+            }\n+\n+            @Override\n+            public Integer getSrcPort() {\n+                return flowMessage.getSrcPort();\n+            }\n+\n+            @Override\n+            public Integer getTcpFlags() {\n+                return flowMessage.getTcpFlags();\n+            }\n+\n+            @Override\n+            public Integer getTos() {\n+                return flowMessage.getTos();\n+            }\n+\n+            @Override\n+            public NetflowVersion getNetflowVersion() {\n+                switch (flowMessage.getNetflowVersion().getNumber()) {", "originalCommit": "766d7069386bc37238465cc8b8d38a51eec8ff4d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b0e90f013c5b6948e960f7eb2d66870c3c84e12a", "changed_code": [{"header": "diff --git a/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5Converter.java b/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5Converter.java\ndeleted file mode 100644\nindex 8d866358533..00000000000\n--- a/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5Converter.java\n+++ /dev/null\n", "chunk": "@@ -1,250 +0,0 @@\n-/*******************************************************************************\n- * This file is part of OpenNMS(R).\n- *\n- * Copyright (C) 2017-2017 The OpenNMS Group, Inc.\n- * OpenNMS(R) is Copyright (C) 1999-2017 The OpenNMS Group, Inc.\n- *\n- * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n- *\n- * OpenNMS(R) is free software: you can redistribute it and/or modify\n- * it under the terms of the GNU Affero General Public License as published\n- * by the Free Software Foundation, either version 3 of the License,\n- * or (at your option) any later version.\n- *\n- * OpenNMS(R) is distributed in the hope that it will be useful,\n- * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n- * GNU Affero General Public License for more details.\n- *\n- * You should have received a copy of the GNU Affero General Public License\n- * along with OpenNMS(R).  If not, see:\n- *      http://www.gnu.org/licenses/\n- *\n- * For more information contact:\n- *     OpenNMS(R) Licensing <license@opennms.org>\n- *     http://www.opennms.org/\n- *     http://www.opennms.com/\n- *******************************************************************************/\n-\n-package org.opennms.netmgt.telemetry.protocols.netflow.adapter.netflow5;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.Optional;\n-\n-import org.opennms.netmgt.flows.api.Converter;\n-import org.opennms.netmgt.flows.api.Flow;\n-import org.opennms.netmgt.flows.api.FlowMessage;\n-\n-public class Netflow5Converter implements Converter<FlowMessage> {\n-\n-    @Override\n-    public List<Flow> convert(final FlowMessage flowMessage) {\n-\n-        Flow flow = buildFlowFromProto(flowMessage);\n-        List<Flow> flows = new ArrayList<>();\n-        flows.add(flow);\n-        return flows;\n-    }\n-\n-    @Override\n-    public Flow convertTo(FlowMessage flowMessage) {\n-        return buildFlowFromProto(flowMessage);\n-    }\n-\n-    //TODO: Remove conversion and map the interface directly.\n-    private Flow buildFlowFromProto(FlowMessage flowMessage) {\n-        return new Flow() {\n-            @Override\n-            public long getTimestamp() {\n-                return flowMessage.getTimestamp();\n-            }\n-\n-            @Override\n-            public Long getBytes() {\n-                return flowMessage.getNumBytes();\n-            }\n-\n-            @Override\n-            public Direction getDirection() {\n-                if (flowMessage.getDirection().equals(org.opennms.netmgt.flows.model.Direction.EGRESS)) {\n-                    return Direction.EGRESS;\n-                }\n-                return Direction.INGRESS;\n-\n-            }\n-\n-            @Override\n-            public String getDstAddr() {\n-                return flowMessage.getDstAddress();\n-            }\n-\n-            @Override\n-            public Optional<String> getDstAddrHostname() {\n-                return Optional.of(flowMessage.getDstHostname());\n-            }\n-\n-            @Override\n-            public Long getDstAs() {\n-                return flowMessage.getDstAs();\n-            }\n-\n-            @Override\n-            public Integer getDstMaskLen() {\n-                return flowMessage.getDstMaskLen();\n-            }\n-\n-            @Override\n-            public Integer getDstPort() {\n-                return flowMessage.getDstPort();\n-            }\n-\n-            @Override\n-            public Integer getEngineId() {\n-                return flowMessage.getEngineId();\n-            }\n-\n-            @Override\n-            public Integer getEngineType() {\n-                return flowMessage.getEngineType();\n-            }\n-\n-            @Override\n-            public Long getDeltaSwitched() {\n-                return flowMessage.getDeltaSwitched();\n-            }\n-\n-            @Override\n-            public Long getFirstSwitched() {\n-                return flowMessage.getFirstSwitched();\n-            }\n-\n-            @Override\n-            public int getFlowRecords() {\n-                return flowMessage.getNumFlowRecords();\n-            }\n-\n-            @Override\n-            public long getFlowSeqNum() {\n-                return flowMessage.getFlowSeqNum();\n-            }\n-\n-            @Override\n-            public Integer getInputSnmp() {\n-                return flowMessage.getInputSnmpIfindex();\n-            }\n-\n-            @Override\n-            public Integer getIpProtocolVersion() {\n-                return flowMessage.getIpProtocolVersion();\n-            }\n-\n-            @Override\n-            public Long getLastSwitched() {\n-                return flowMessage.getLastSwitched();\n-            }\n-\n-            @Override\n-            public String getNextHop() {\n-                return flowMessage.getNextHopAddress();\n-            }\n-\n-            @Override\n-            public Optional<String> getNextHopHostname() {\n-                return Optional.of(flowMessage.getNextHopHostname());\n-            }\n-\n-            @Override\n-            public Integer getOutputSnmp() {\n-                return flowMessage.getOutputSnmpIfindex();\n-            }\n-\n-            @Override\n-            public Long getPackets() {\n-                return flowMessage.getNumPackets();\n-            }\n-\n-            @Override\n-            public Integer getProtocol() {\n-                return flowMessage.getProtocol();\n-            }\n-\n-            @Override\n-            public SamplingAlgorithm getSamplingAlgorithm() {\n-                switch (flowMessage.getSamplingAlgorithm().getNumber()) {\n-                    case 1:\n-                        return SamplingAlgorithm.SystematicCountBasedSampling;\n-                    case 2:\n-                        return SamplingAlgorithm.SystematicTimeBasedSampling;\n-                }\n-                return SamplingAlgorithm.Unassigned;\n-            }\n-\n-            @Override\n-            public Double getSamplingInterval() {\n-                return flowMessage.getSamplingInterval();\n-            }\n-\n-            @Override\n-            public String getSrcAddr() {\n-                return flowMessage.getSrcAddress();\n-            }\n-\n-            @Override\n-            public Optional<String> getSrcAddrHostname() {\n-                return Optional.of(flowMessage.getSrcHostname());\n-            }\n-\n-            @Override\n-            public Long getSrcAs() {\n-                return flowMessage.getSrcAs();\n-            }\n-\n-            @Override\n-            public Integer getSrcMaskLen() {\n-                return flowMessage.getSrcMaskLen();\n-            }\n-\n-            @Override\n-            public Integer getSrcPort() {\n-                return flowMessage.getSrcPort();\n-            }\n-\n-            @Override\n-            public Integer getTcpFlags() {\n-                return flowMessage.getTcpFlags();\n-            }\n-\n-            @Override\n-            public Integer getTos() {\n-                return flowMessage.getTos();\n-            }\n-\n-            @Override\n-            public NetflowVersion getNetflowVersion() {\n-                switch (flowMessage.getNetflowVersion().getNumber()) {\n-                    case 0:\n-                        return NetflowVersion.V5;\n-                    case 1:\n-                        return NetflowVersion.V9;\n-                    case 2:\n-                        return NetflowVersion.IPFIX;\n-                    case 3:\n-                        return NetflowVersion.SFLOW;\n-                    default:\n-                        return NetflowVersion.V5;\n-                }\n-            }\n-\n-            @Override\n-            public Integer getVlan() {\n-                return flowMessage.getVlan();\n-            }\n-\n-            @Override\n-            public String getNodeIdentifier() {\n-                return flowMessage.getNodeIdentifier();\n-            }\n-        };\n-    }\n-}\n", "next_change": null}]}, "revised_code_in_main": {"commit": "3352dcced0424e52de475b87840f05dff94fbec4", "changed_code": [{"header": "diff --git a/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5Converter.java b/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5Converter.java\ndeleted file mode 100644\nindex 8d866358533..00000000000\n--- a/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5Converter.java\n+++ /dev/null\n", "chunk": "@@ -1,250 +0,0 @@\n-/*******************************************************************************\n- * This file is part of OpenNMS(R).\n- *\n- * Copyright (C) 2017-2017 The OpenNMS Group, Inc.\n- * OpenNMS(R) is Copyright (C) 1999-2017 The OpenNMS Group, Inc.\n- *\n- * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n- *\n- * OpenNMS(R) is free software: you can redistribute it and/or modify\n- * it under the terms of the GNU Affero General Public License as published\n- * by the Free Software Foundation, either version 3 of the License,\n- * or (at your option) any later version.\n- *\n- * OpenNMS(R) is distributed in the hope that it will be useful,\n- * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n- * GNU Affero General Public License for more details.\n- *\n- * You should have received a copy of the GNU Affero General Public License\n- * along with OpenNMS(R).  If not, see:\n- *      http://www.gnu.org/licenses/\n- *\n- * For more information contact:\n- *     OpenNMS(R) Licensing <license@opennms.org>\n- *     http://www.opennms.org/\n- *     http://www.opennms.com/\n- *******************************************************************************/\n-\n-package org.opennms.netmgt.telemetry.protocols.netflow.adapter.netflow5;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.Optional;\n-\n-import org.opennms.netmgt.flows.api.Converter;\n-import org.opennms.netmgt.flows.api.Flow;\n-import org.opennms.netmgt.flows.api.FlowMessage;\n-\n-public class Netflow5Converter implements Converter<FlowMessage> {\n-\n-    @Override\n-    public List<Flow> convert(final FlowMessage flowMessage) {\n-\n-        Flow flow = buildFlowFromProto(flowMessage);\n-        List<Flow> flows = new ArrayList<>();\n-        flows.add(flow);\n-        return flows;\n-    }\n-\n-    @Override\n-    public Flow convertTo(FlowMessage flowMessage) {\n-        return buildFlowFromProto(flowMessage);\n-    }\n-\n-    //TODO: Remove conversion and map the interface directly.\n-    private Flow buildFlowFromProto(FlowMessage flowMessage) {\n-        return new Flow() {\n-            @Override\n-            public long getTimestamp() {\n-                return flowMessage.getTimestamp();\n-            }\n-\n-            @Override\n-            public Long getBytes() {\n-                return flowMessage.getNumBytes();\n-            }\n-\n-            @Override\n-            public Direction getDirection() {\n-                if (flowMessage.getDirection().equals(org.opennms.netmgt.flows.model.Direction.EGRESS)) {\n-                    return Direction.EGRESS;\n-                }\n-                return Direction.INGRESS;\n-\n-            }\n-\n-            @Override\n-            public String getDstAddr() {\n-                return flowMessage.getDstAddress();\n-            }\n-\n-            @Override\n-            public Optional<String> getDstAddrHostname() {\n-                return Optional.of(flowMessage.getDstHostname());\n-            }\n-\n-            @Override\n-            public Long getDstAs() {\n-                return flowMessage.getDstAs();\n-            }\n-\n-            @Override\n-            public Integer getDstMaskLen() {\n-                return flowMessage.getDstMaskLen();\n-            }\n-\n-            @Override\n-            public Integer getDstPort() {\n-                return flowMessage.getDstPort();\n-            }\n-\n-            @Override\n-            public Integer getEngineId() {\n-                return flowMessage.getEngineId();\n-            }\n-\n-            @Override\n-            public Integer getEngineType() {\n-                return flowMessage.getEngineType();\n-            }\n-\n-            @Override\n-            public Long getDeltaSwitched() {\n-                return flowMessage.getDeltaSwitched();\n-            }\n-\n-            @Override\n-            public Long getFirstSwitched() {\n-                return flowMessage.getFirstSwitched();\n-            }\n-\n-            @Override\n-            public int getFlowRecords() {\n-                return flowMessage.getNumFlowRecords();\n-            }\n-\n-            @Override\n-            public long getFlowSeqNum() {\n-                return flowMessage.getFlowSeqNum();\n-            }\n-\n-            @Override\n-            public Integer getInputSnmp() {\n-                return flowMessage.getInputSnmpIfindex();\n-            }\n-\n-            @Override\n-            public Integer getIpProtocolVersion() {\n-                return flowMessage.getIpProtocolVersion();\n-            }\n-\n-            @Override\n-            public Long getLastSwitched() {\n-                return flowMessage.getLastSwitched();\n-            }\n-\n-            @Override\n-            public String getNextHop() {\n-                return flowMessage.getNextHopAddress();\n-            }\n-\n-            @Override\n-            public Optional<String> getNextHopHostname() {\n-                return Optional.of(flowMessage.getNextHopHostname());\n-            }\n-\n-            @Override\n-            public Integer getOutputSnmp() {\n-                return flowMessage.getOutputSnmpIfindex();\n-            }\n-\n-            @Override\n-            public Long getPackets() {\n-                return flowMessage.getNumPackets();\n-            }\n-\n-            @Override\n-            public Integer getProtocol() {\n-                return flowMessage.getProtocol();\n-            }\n-\n-            @Override\n-            public SamplingAlgorithm getSamplingAlgorithm() {\n-                switch (flowMessage.getSamplingAlgorithm().getNumber()) {\n-                    case 1:\n-                        return SamplingAlgorithm.SystematicCountBasedSampling;\n-                    case 2:\n-                        return SamplingAlgorithm.SystematicTimeBasedSampling;\n-                }\n-                return SamplingAlgorithm.Unassigned;\n-            }\n-\n-            @Override\n-            public Double getSamplingInterval() {\n-                return flowMessage.getSamplingInterval();\n-            }\n-\n-            @Override\n-            public String getSrcAddr() {\n-                return flowMessage.getSrcAddress();\n-            }\n-\n-            @Override\n-            public Optional<String> getSrcAddrHostname() {\n-                return Optional.of(flowMessage.getSrcHostname());\n-            }\n-\n-            @Override\n-            public Long getSrcAs() {\n-                return flowMessage.getSrcAs();\n-            }\n-\n-            @Override\n-            public Integer getSrcMaskLen() {\n-                return flowMessage.getSrcMaskLen();\n-            }\n-\n-            @Override\n-            public Integer getSrcPort() {\n-                return flowMessage.getSrcPort();\n-            }\n-\n-            @Override\n-            public Integer getTcpFlags() {\n-                return flowMessage.getTcpFlags();\n-            }\n-\n-            @Override\n-            public Integer getTos() {\n-                return flowMessage.getTos();\n-            }\n-\n-            @Override\n-            public NetflowVersion getNetflowVersion() {\n-                switch (flowMessage.getNetflowVersion().getNumber()) {\n-                    case 0:\n-                        return NetflowVersion.V5;\n-                    case 1:\n-                        return NetflowVersion.V9;\n-                    case 2:\n-                        return NetflowVersion.IPFIX;\n-                    case 3:\n-                        return NetflowVersion.SFLOW;\n-                    default:\n-                        return NetflowVersion.V5;\n-                }\n-            }\n-\n-            @Override\n-            public Integer getVlan() {\n-                return flowMessage.getVlan();\n-            }\n-\n-            @Override\n-            public String getNodeIdentifier() {\n-                return flowMessage.getNodeIdentifier();\n-            }\n-        };\n-    }\n-}\n", "next_change": null}]}, "commits_in_main": [{"oid": "3352dcced0424e52de475b87840f05dff94fbec4", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDYzODgzMw==", "url": "https://github.com/OpenNMS/opennms/pull/2903#discussion_r384638833", "body": "I'm not sure if `\"\"` is semantically equal to `null` in this case.", "bodyText": "I'm not sure if \"\" is semantically equal to null in this case.", "bodyHTML": "<p dir=\"auto\">I'm not sure if <code>\"\"</code> is semantically equal to <code>null</code> in this case.</p>", "author": "fooker", "createdAt": "2020-02-26T17:12:53Z", "path": "features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5ConverterTest.java", "diffHunk": "@@ -78,11 +76,11 @@ public void canParseNetflow5Flows() {\n         assertThat(flow.getSamplingInterval(), is(0.0));\n         assertThat(flow.getSamplingAlgorithm(), is(Flow.SamplingAlgorithm.Unassigned));\n         MatcherAssert.assertThat(flow.getSrcAddr(), equalTo(\"10.0.2.2\"));\n-        MatcherAssert.assertThat(flow.getSrcAddrHostname(), equalTo(Optional.empty()));\n+        MatcherAssert.assertThat(flow.getSrcAddrHostname(), equalTo(Optional.of(\"\")));\n         MatcherAssert.assertThat(flow.getSrcPort(), equalTo(54435));\n         MatcherAssert.assertThat(flow.getSrcMaskLen(), equalTo(0));\n         MatcherAssert.assertThat(flow.getDstAddr(), equalTo(\"10.0.2.15\"));\n-        MatcherAssert.assertThat(flow.getDstAddrHostname(), equalTo(Optional.empty()));\n+        MatcherAssert.assertThat(flow.getDstAddrHostname(), equalTo(Optional.of(\"\")));", "originalCommit": "766d7069386bc37238465cc8b8d38a51eec8ff4d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b0e90f013c5b6948e960f7eb2d66870c3c84e12a", "changed_code": [{"header": "diff --git a/features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5ConverterTest.java b/features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5ConverterTest.java\nindex 755be329a82..4a194792409 100644\n--- a/features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5ConverterTest.java\n+++ b/features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5ConverterTest.java\n", "chunk": "@@ -76,11 +78,11 @@ public class Netflow5ConverterTest {\n         assertThat(flow.getSamplingInterval(), is(0.0));\n         assertThat(flow.getSamplingAlgorithm(), is(Flow.SamplingAlgorithm.Unassigned));\n         MatcherAssert.assertThat(flow.getSrcAddr(), equalTo(\"10.0.2.2\"));\n-        MatcherAssert.assertThat(flow.getSrcAddrHostname(), equalTo(Optional.of(\"\")));\n+        MatcherAssert.assertThat(flow.getSrcAddrHostname(), equalTo(Optional.empty()));\n         MatcherAssert.assertThat(flow.getSrcPort(), equalTo(54435));\n         MatcherAssert.assertThat(flow.getSrcMaskLen(), equalTo(0));\n         MatcherAssert.assertThat(flow.getDstAddr(), equalTo(\"10.0.2.15\"));\n-        MatcherAssert.assertThat(flow.getDstAddrHostname(), equalTo(Optional.of(\"\")));\n+        MatcherAssert.assertThat(flow.getDstAddrHostname(), equalTo(Optional.empty()));\n         MatcherAssert.assertThat(flow.getDstPort(), equalTo(22));\n         MatcherAssert.assertThat(flow.getDstMaskLen(), equalTo(0));\n         MatcherAssert.assertThat(flow.getTcpFlags(), equalTo(16));\n", "next_change": null}]}, "revised_code_in_main": {"commit": "3352dcced0424e52de475b87840f05dff94fbec4", "changed_code": [{"header": "diff --git a/features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5ConverterTest.java b/features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5ConverterTest.java\nindex 755be329a82..aec7fb7d95d 100644\n--- a/features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5ConverterTest.java\n+++ b/features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5ConverterTest.java\n", "chunk": "@@ -76,11 +79,11 @@ public class Netflow5ConverterTest {\n         assertThat(flow.getSamplingInterval(), is(0.0));\n         assertThat(flow.getSamplingAlgorithm(), is(Flow.SamplingAlgorithm.Unassigned));\n         MatcherAssert.assertThat(flow.getSrcAddr(), equalTo(\"10.0.2.2\"));\n-        MatcherAssert.assertThat(flow.getSrcAddrHostname(), equalTo(Optional.of(\"\")));\n+        MatcherAssert.assertThat(flow.getSrcAddrHostname(), equalTo(Optional.empty()));\n         MatcherAssert.assertThat(flow.getSrcPort(), equalTo(54435));\n         MatcherAssert.assertThat(flow.getSrcMaskLen(), equalTo(0));\n         MatcherAssert.assertThat(flow.getDstAddr(), equalTo(\"10.0.2.15\"));\n-        MatcherAssert.assertThat(flow.getDstAddrHostname(), equalTo(Optional.of(\"\")));\n+        MatcherAssert.assertThat(flow.getDstAddrHostname(), equalTo(Optional.empty()));\n         MatcherAssert.assertThat(flow.getDstPort(), equalTo(22));\n         MatcherAssert.assertThat(flow.getDstMaskLen(), equalTo(0));\n         MatcherAssert.assertThat(flow.getTcpFlags(), equalTo(16));\n", "next_change": {"commit": "f34d1195ea7ca3d51a5d3f0b4e7d149ef20c3f3e", "changed_code": [{"header": "diff --git a/features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5ConverterTest.java b/features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5ConverterTest.java\nindex aec7fb7d95d..635806456bd 100644\n--- a/features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5ConverterTest.java\n+++ b/features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5ConverterTest.java\n", "chunk": "@@ -91,8 +92,9 @@ public class Netflow5ConverterTest {\n         MatcherAssert.assertThat(flow.getBytes(), equalTo(230L));\n         MatcherAssert.assertThat(flow.getInputSnmp(), equalTo(0));\n         MatcherAssert.assertThat(flow.getOutputSnmp(), equalTo(0));\n-        MatcherAssert.assertThat(flow.getFirstSwitched(), equalTo(1434886852194L));\n-        MatcherAssert.assertThat(flow.getLastSwitched(), equalTo(1430591887476L));\n+        MatcherAssert.assertThat(flow.getFirstSwitched(), equalTo(1430608661859L));\n+        MatcherAssert.assertThat(flow.getLastSwitched(), equalTo(1434870077556L));\n+        MatcherAssert.assertThat(flow.getDeltaSwitched(), equalTo(1430608661859L));\n         MatcherAssert.assertThat(flow.getPackets(), equalTo(5L));\n         MatcherAssert.assertThat(flow.getDirection(), equalTo(Flow.Direction.INGRESS));\n         MatcherAssert.assertThat(flow.getNextHop(), equalTo(\"0.0.0.0\"));\n", "next_change": {"commit": "7fd50342801477afe3bbf72522872f4f86ce14c8", "changed_code": [{"header": "diff --git a/features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5ConverterTest.java b/features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5ConverterTest.java\nindex 635806456bd..1e2646cf5be 100644\n--- a/features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5ConverterTest.java\n+++ b/features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5ConverterTest.java\n", "chunk": "@@ -92,11 +91,11 @@ public class Netflow5ConverterTest {\n         MatcherAssert.assertThat(flow.getBytes(), equalTo(230L));\n         MatcherAssert.assertThat(flow.getInputSnmp(), equalTo(0));\n         MatcherAssert.assertThat(flow.getOutputSnmp(), equalTo(0));\n-        MatcherAssert.assertThat(flow.getFirstSwitched(), equalTo(1430608661859L));\n-        MatcherAssert.assertThat(flow.getLastSwitched(), equalTo(1434870077556L));\n-        MatcherAssert.assertThat(flow.getDeltaSwitched(), equalTo(1430608661859L));\n+        MatcherAssert.assertThat(flow.getFirstSwitched(), equalTo(Instant.ofEpochMilli(1430608661859L)));\n+        MatcherAssert.assertThat(flow.getLastSwitched(), equalTo(Instant.ofEpochMilli(1434870077556L)));\n+        MatcherAssert.assertThat(flow.getDeltaSwitched(), equalTo(Instant.ofEpochMilli(1430608661859L)));\n         MatcherAssert.assertThat(flow.getPackets(), equalTo(5L));\n-        MatcherAssert.assertThat(flow.getDirection(), equalTo(Flow.Direction.INGRESS));\n+        MatcherAssert.assertThat(flow.getDirection(), equalTo(Direction.INGRESS));\n         MatcherAssert.assertThat(flow.getNextHop(), equalTo(\"0.0.0.0\"));\n         MatcherAssert.assertThat(flow.getNextHopHostname(), equalTo(Optional.empty()));\n         MatcherAssert.assertThat(flow.getVlan(), nullValue());\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "3352dcced0424e52de475b87840f05dff94fbec4", "message": "Merge commit", "committedDate": null}, {"oid": "0d10ea77e00e72dfee00a1ee15a5ae266193ddb6", "committedDate": "2020-06-22 19:25:05 -0400", "message": "NMS-12750: Fix delta switched for Netflow5 (#3035)"}, {"oid": "f34d1195ea7ca3d51a5d3f0b4e7d149ef20c3f3e", "committedDate": "2020-10-08 07:28:32 +0200", "message": "NMS-12800: Drop flows with negative duration"}, {"oid": "78ce7c55c0d1988f90dfa22ce33846fb3d0fa53d", "committedDate": "2020-12-01 09:53:12 +0100", "message": "NMS-12973: Correct clock skew"}, {"oid": "7dcfa4927ebf40e48a1f62ad6837f9cb99ea57e6", "committedDate": "2021-01-15 11:20:53 +0100", "message": "NMS-13088: Adapt invalid flows instead of dropping (#3261)"}, {"oid": "bd3afc72cd09053d307d383e58ff243a991bb3ef", "committedDate": "2022-07-26 16:13:39 +0200", "message": "NMS-13770: Inline Converter with adapters"}, {"oid": "7fd50342801477afe3bbf72522872f4f86ce14c8", "committedDate": "2022-08-03 18:20:37 +0200", "message": "NMS-13770: Implement flow repo OIA"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDYzOTA3Mg==", "url": "https://github.com/OpenNMS/opennms/pull/2903#discussion_r384639072", "body": "VLAN 0 is not equal to no VLAN", "bodyText": "VLAN 0 is not equal to no VLAN", "bodyHTML": "<p dir=\"auto\">VLAN 0 is not equal to no VLAN</p>", "author": "fooker", "createdAt": "2020-02-26T17:13:16Z", "path": "features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5ConverterTest.java", "diffHunk": "@@ -95,8 +93,8 @@ public void canParseNetflow5Flows() {\n         MatcherAssert.assertThat(flow.getPackets(), equalTo(5L));\n         MatcherAssert.assertThat(flow.getDirection(), equalTo(Flow.Direction.INGRESS));\n         MatcherAssert.assertThat(flow.getNextHop(), equalTo(\"0.0.0.0\"));\n-        MatcherAssert.assertThat(flow.getNextHopHostname(), equalTo(Optional.empty()));\n-        MatcherAssert.assertThat(flow.getVlan(), nullValue());\n+        MatcherAssert.assertThat(flow.getNextHopHostname(), equalTo(Optional.of(\"\")));\n+        MatcherAssert.assertThat(flow.getVlan(), equalTo(0));", "originalCommit": "766d7069386bc37238465cc8b8d38a51eec8ff4d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY4NDgwMw==", "url": "https://github.com/OpenNMS/opennms/pull/2903#discussion_r384684803", "bodyText": "yeah, proto has primitives and never returns null  even for Strings.  need to find a way to differentiate between actual values and not having a value.", "author": "cgorantla", "createdAt": "2020-02-26T18:35:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDYzOTA3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "b0e90f013c5b6948e960f7eb2d66870c3c84e12a", "changed_code": [{"header": "diff --git a/features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5ConverterTest.java b/features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5ConverterTest.java\nindex 755be329a82..4a194792409 100644\n--- a/features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5ConverterTest.java\n+++ b/features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5ConverterTest.java\n", "chunk": "@@ -93,8 +95,8 @@ public class Netflow5ConverterTest {\n         MatcherAssert.assertThat(flow.getPackets(), equalTo(5L));\n         MatcherAssert.assertThat(flow.getDirection(), equalTo(Flow.Direction.INGRESS));\n         MatcherAssert.assertThat(flow.getNextHop(), equalTo(\"0.0.0.0\"));\n-        MatcherAssert.assertThat(flow.getNextHopHostname(), equalTo(Optional.of(\"\")));\n-        MatcherAssert.assertThat(flow.getVlan(), equalTo(0));\n+        MatcherAssert.assertThat(flow.getNextHopHostname(), equalTo(Optional.empty()));\n+        MatcherAssert.assertThat(flow.getVlan(), equalTo(null));\n     }\n \n     private List<Flow> getFlowsForPayloadsInSession(String... resources) {\n", "next_change": {"commit": "e388d89b283f332b44cf6614f61985d9f9c2c420", "changed_code": [{"header": "diff --git a/features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5ConverterTest.java b/features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5ConverterTest.java\nindex 4a194792409..2965e7fee6e 100644\n--- a/features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5ConverterTest.java\n+++ b/features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5ConverterTest.java\n", "chunk": "@@ -96,7 +97,7 @@ public class Netflow5ConverterTest {\n         MatcherAssert.assertThat(flow.getDirection(), equalTo(Flow.Direction.INGRESS));\n         MatcherAssert.assertThat(flow.getNextHop(), equalTo(\"0.0.0.0\"));\n         MatcherAssert.assertThat(flow.getNextHopHostname(), equalTo(Optional.empty()));\n-        MatcherAssert.assertThat(flow.getVlan(), equalTo(null));\n+        MatcherAssert.assertThat(flow.getVlan(), nullValue());\n     }\n \n     private List<Flow> getFlowsForPayloadsInSession(String... resources) {\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "3352dcced0424e52de475b87840f05dff94fbec4", "changed_code": [{"header": "diff --git a/features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5ConverterTest.java b/features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5ConverterTest.java\nindex 755be329a82..aec7fb7d95d 100644\n--- a/features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5ConverterTest.java\n+++ b/features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5ConverterTest.java\n", "chunk": "@@ -93,8 +96,8 @@ public class Netflow5ConverterTest {\n         MatcherAssert.assertThat(flow.getPackets(), equalTo(5L));\n         MatcherAssert.assertThat(flow.getDirection(), equalTo(Flow.Direction.INGRESS));\n         MatcherAssert.assertThat(flow.getNextHop(), equalTo(\"0.0.0.0\"));\n-        MatcherAssert.assertThat(flow.getNextHopHostname(), equalTo(Optional.of(\"\")));\n-        MatcherAssert.assertThat(flow.getVlan(), equalTo(0));\n+        MatcherAssert.assertThat(flow.getNextHopHostname(), equalTo(Optional.empty()));\n+        MatcherAssert.assertThat(flow.getVlan(), nullValue());\n     }\n \n     private List<Flow> getFlowsForPayloadsInSession(String... resources) {\n", "next_change": {"commit": "7fd50342801477afe3bbf72522872f4f86ce14c8", "changed_code": [{"header": "diff --git a/features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5ConverterTest.java b/features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5ConverterTest.java\nindex aec7fb7d95d..1e2646cf5be 100644\n--- a/features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5ConverterTest.java\n+++ b/features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5ConverterTest.java\n", "chunk": "@@ -91,10 +91,11 @@ public class Netflow5ConverterTest {\n         MatcherAssert.assertThat(flow.getBytes(), equalTo(230L));\n         MatcherAssert.assertThat(flow.getInputSnmp(), equalTo(0));\n         MatcherAssert.assertThat(flow.getOutputSnmp(), equalTo(0));\n-        MatcherAssert.assertThat(flow.getFirstSwitched(), equalTo(1434886852194L));\n-        MatcherAssert.assertThat(flow.getLastSwitched(), equalTo(1430591887476L));\n+        MatcherAssert.assertThat(flow.getFirstSwitched(), equalTo(Instant.ofEpochMilli(1430608661859L)));\n+        MatcherAssert.assertThat(flow.getLastSwitched(), equalTo(Instant.ofEpochMilli(1434870077556L)));\n+        MatcherAssert.assertThat(flow.getDeltaSwitched(), equalTo(Instant.ofEpochMilli(1430608661859L)));\n         MatcherAssert.assertThat(flow.getPackets(), equalTo(5L));\n-        MatcherAssert.assertThat(flow.getDirection(), equalTo(Flow.Direction.INGRESS));\n+        MatcherAssert.assertThat(flow.getDirection(), equalTo(Direction.INGRESS));\n         MatcherAssert.assertThat(flow.getNextHop(), equalTo(\"0.0.0.0\"));\n         MatcherAssert.assertThat(flow.getNextHopHostname(), equalTo(Optional.empty()));\n         MatcherAssert.assertThat(flow.getVlan(), nullValue());\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "3352dcced0424e52de475b87840f05dff94fbec4", "message": "Merge commit", "committedDate": null}, {"oid": "0d10ea77e00e72dfee00a1ee15a5ae266193ddb6", "committedDate": "2020-06-22 19:25:05 -0400", "message": "NMS-12750: Fix delta switched for Netflow5 (#3035)"}, {"oid": "f34d1195ea7ca3d51a5d3f0b4e7d149ef20c3f3e", "committedDate": "2020-10-08 07:28:32 +0200", "message": "NMS-12800: Drop flows with negative duration"}, {"oid": "78ce7c55c0d1988f90dfa22ce33846fb3d0fa53d", "committedDate": "2020-12-01 09:53:12 +0100", "message": "NMS-12973: Correct clock skew"}, {"oid": "7dcfa4927ebf40e48a1f62ad6837f9cb99ea57e6", "committedDate": "2021-01-15 11:20:53 +0100", "message": "NMS-13088: Adapt invalid flows instead of dropping (#3261)"}, {"oid": "bd3afc72cd09053d307d383e58ff243a991bb3ef", "committedDate": "2022-07-26 16:13:39 +0200", "message": "NMS-13770: Inline Converter with adapters"}, {"oid": "7fd50342801477afe3bbf72522872f4f86ce14c8", "committedDate": "2022-08-03 18:20:37 +0200", "message": "NMS-13770: Implement flow repo OIA"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY0MzA1NA==", "url": "https://github.com/OpenNMS/opennms/pull/2903#discussion_r384643054", "body": "I would prefer to have these messages in the parser and keep the proto implementations clean of that knowledge. ", "bodyText": "I would prefer to have these messages in the parser and keep the proto implementations clean of that knowledge.", "bodyHTML": "<p dir=\"auto\">I would prefer to have these messages in the parser and keep the proto implementations clean of that knowledge.</p>", "author": "fooker", "createdAt": "2020-02-26T17:19:54Z", "path": "features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/netflow5/proto/Header.java", "diffHunk": "@@ -111,4 +114,28 @@ public String toString() {\n                 .add(new UnsignedValue(\"@samplingInterval\", this.samplingInterval))\n                 .build();\n     }\n+\n+    void updateBuilder(FlowMessageProto.Builder builder) {", "originalCommit": "766d7069386bc37238465cc8b8d38a51eec8ff4d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY5MTYzMw==", "url": "https://github.com/OpenNMS/opennms/pull/2903#discussion_r384691633", "bodyText": "Makes sense. will do that.", "author": "cgorantla", "createdAt": "2020-02-26T18:48:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY0MzA1NA=="}], "type": "inlineReview", "revised_code": {"commit": "b0e90f013c5b6948e960f7eb2d66870c3c84e12a", "changed_code": [{"header": "diff --git a/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/netflow5/proto/Header.java b/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/netflow5/proto/Header.java\nindex 4dfb03b0062..99ee3f06424 100644\n--- a/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/netflow5/proto/Header.java\n+++ b/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/netflow5/proto/Header.java\n", "chunk": "@@ -114,28 +111,4 @@ public final class Header {\n                 .add(new UnsignedValue(\"@samplingInterval\", this.samplingInterval))\n                 .build();\n     }\n-\n-    void updateBuilder(FlowMessageProto.Builder builder) {\n-        long timeStamp = this.unixSecs * 1000L + this.unixNSecs / 1000_000L;\n-        SamplingAlgorithm samplingAlgorithm = SamplingAlgorithm.Unassigned;\n-        switch (this.samplingAlgorithm) {\n-            case 1:\n-                samplingAlgorithm = SamplingAlgorithm.SystematicCountBasedSampling;\n-                break;\n-            case 2:\n-                samplingAlgorithm = SamplingAlgorithm.RandomNoutOfNSampling;\n-                break;\n-        }\n-        long bootTime = timeStamp - this.sysUptime;\n-        builder.setNetflowVersion(NetflowVersion.V5)\n-                .setNumFlowRecords(this.count)\n-                .setFirstSwitched(bootTime)\n-                .setTimestamp(timeStamp)\n-                .setFlowSeqNum(this.flowSequence)\n-                .setEngineType(this.engineType)\n-                .setEngineId(this.engineId)\n-                .setSamplingAlgorithm(samplingAlgorithm)\n-                .setSamplingInterval(this.samplingInterval)\n-                .setNodeIdentifier(String.valueOf(this.engineId));\n-    }\n }\n", "next_change": null}]}, "revised_code_in_main": {"commit": "3352dcced0424e52de475b87840f05dff94fbec4", "changed_code": [{"header": "diff --git a/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/netflow5/proto/Header.java b/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/netflow5/proto/Header.java\nindex 4dfb03b0062..99ee3f06424 100644\n--- a/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/netflow5/proto/Header.java\n+++ b/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/netflow5/proto/Header.java\n", "chunk": "@@ -114,28 +111,4 @@ public final class Header {\n                 .add(new UnsignedValue(\"@samplingInterval\", this.samplingInterval))\n                 .build();\n     }\n-\n-    void updateBuilder(FlowMessageProto.Builder builder) {\n-        long timeStamp = this.unixSecs * 1000L + this.unixNSecs / 1000_000L;\n-        SamplingAlgorithm samplingAlgorithm = SamplingAlgorithm.Unassigned;\n-        switch (this.samplingAlgorithm) {\n-            case 1:\n-                samplingAlgorithm = SamplingAlgorithm.SystematicCountBasedSampling;\n-                break;\n-            case 2:\n-                samplingAlgorithm = SamplingAlgorithm.RandomNoutOfNSampling;\n-                break;\n-        }\n-        long bootTime = timeStamp - this.sysUptime;\n-        builder.setNetflowVersion(NetflowVersion.V5)\n-                .setNumFlowRecords(this.count)\n-                .setFirstSwitched(bootTime)\n-                .setTimestamp(timeStamp)\n-                .setFlowSeqNum(this.flowSequence)\n-                .setEngineType(this.engineType)\n-                .setEngineId(this.engineId)\n-                .setSamplingAlgorithm(samplingAlgorithm)\n-                .setSamplingInterval(this.samplingInterval)\n-                .setNodeIdentifier(String.valueOf(this.engineId));\n-    }\n }\n", "next_change": null}]}, "commits_in_main": [{"oid": "3352dcced0424e52de475b87840f05dff94fbec4", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY0MzM0OA==", "url": "https://github.com/OpenNMS/opennms/pull/2903#discussion_r384643348", "body": "I would prefer to have these messages in the parser and keep the proto implementations clean of that knowledge. ", "bodyText": "I would prefer to have these messages in the parser and keep the proto implementations clean of that knowledge.", "bodyHTML": "<p dir=\"auto\">I would prefer to have these messages in the parser and keep the proto implementations clean of that knowledge.</p>", "author": "fooker", "createdAt": "2020-02-26T17:20:25Z", "path": "features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/netflow5/proto/Packet.java", "diffHunk": "@@ -70,6 +75,18 @@ public Packet(final Header header,\n         this.records = records;\n     }\n \n+    private FlowMessageProto.Builder createFlowMessage(Header header, Record record) {", "originalCommit": "766d7069386bc37238465cc8b8d38a51eec8ff4d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b0e90f013c5b6948e960f7eb2d66870c3c84e12a", "changed_code": [{"header": "diff --git a/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/netflow5/proto/Packet.java b/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/netflow5/proto/Packet.java\nindex ba960d72a4e..6dcba2e484a 100644\n--- a/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/netflow5/proto/Packet.java\n+++ b/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/netflow5/proto/Packet.java\n", "chunk": "@@ -75,18 +70,6 @@ public final class Packet implements Iterable<Record>, RecordProvider {\n         this.records = records;\n     }\n \n-    private FlowMessageProto.Builder createFlowMessage(Header header, Record record) {\n-        FlowMessageProto.Builder builder = FlowMessageProto.newBuilder();\n-        header.updateBuilder(builder);\n-        record.updateBuilder(builder);\n-        return builder;\n-    }\n-\n-    @Override\n-    public List<FlowMessageProto.Builder> getFlowBuilders() {\n-        return flowBuilders;\n-    }\n-\n     @Override\n     public Iterator<Record> iterator() {\n         return this.records.iterator();\n", "next_change": null}]}, "revised_code_in_main": {"commit": "3352dcced0424e52de475b87840f05dff94fbec4", "changed_code": [{"header": "diff --git a/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/netflow5/proto/Packet.java b/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/netflow5/proto/Packet.java\nindex ba960d72a4e..6dcba2e484a 100644\n--- a/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/netflow5/proto/Packet.java\n+++ b/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/netflow5/proto/Packet.java\n", "chunk": "@@ -75,18 +70,6 @@ public final class Packet implements Iterable<Record>, RecordProvider {\n         this.records = records;\n     }\n \n-    private FlowMessageProto.Builder createFlowMessage(Header header, Record record) {\n-        FlowMessageProto.Builder builder = FlowMessageProto.newBuilder();\n-        header.updateBuilder(builder);\n-        record.updateBuilder(builder);\n-        return builder;\n-    }\n-\n-    @Override\n-    public List<FlowMessageProto.Builder> getFlowBuilders() {\n-        return flowBuilders;\n-    }\n-\n     @Override\n     public Iterator<Record> iterator() {\n         return this.records.iterator();\n", "next_change": null}]}, "commits_in_main": [{"oid": "3352dcced0424e52de475b87840f05dff94fbec4", "message": "Merge commit", "committedDate": null}, {"oid": "a57dcccf00db8f5129ca27c63fbfbbe5638bed79", "committedDate": "2020-11-30 11:23:08 +0100", "message": "NMS-12973: Check flows are in sequence"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY0MzgzMQ==", "url": "https://github.com/OpenNMS/opennms/pull/2903#discussion_r384643831", "body": "Any reason to remove these finals?", "bodyText": "Any reason to remove these finals?", "bodyHTML": "<p dir=\"auto\">Any reason to remove these finals?</p>", "author": "fooker", "createdAt": "2020-02-26T17:21:14Z", "path": "features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/netflow5/proto/Record.java", "diffHunk": "@@ -54,9 +56,9 @@\n \n     public final Packet packet; // Enclosing packet\n \n-    public final Inet4Address srcAddr;\n-    public final Inet4Address dstAddr;\n-    public final Inet4Address nextHop;\n+    public Inet4Address srcAddr;", "originalCommit": "766d7069386bc37238465cc8b8d38a51eec8ff4d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b0e90f013c5b6948e960f7eb2d66870c3c84e12a", "changed_code": [{"header": "diff --git a/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/netflow5/proto/Record.java b/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/netflow5/proto/Record.java\nindex ae6d67c90c0..308b23951f3 100644\n--- a/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/netflow5/proto/Record.java\n+++ b/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/netflow5/proto/Record.java\n", "chunk": "@@ -56,9 +54,9 @@ public class Record {\n \n     public final Packet packet; // Enclosing packet\n \n-    public Inet4Address srcAddr;\n-    public Inet4Address dstAddr;\n-    public Inet4Address nextHop;\n+    public final Inet4Address srcAddr;\n+    public final Inet4Address dstAddr;\n+    public final Inet4Address nextHop;\n \n     // SNMP index of input / output interface\n     public final int input;\n", "next_change": null}]}, "revised_code_in_main": {"commit": "3352dcced0424e52de475b87840f05dff94fbec4", "changed_code": [{"header": "diff --git a/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/netflow5/proto/Record.java b/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/netflow5/proto/Record.java\nindex ae6d67c90c0..308b23951f3 100644\n--- a/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/netflow5/proto/Record.java\n+++ b/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/netflow5/proto/Record.java\n", "chunk": "@@ -56,9 +54,9 @@ public class Record {\n \n     public final Packet packet; // Enclosing packet\n \n-    public Inet4Address srcAddr;\n-    public Inet4Address dstAddr;\n-    public Inet4Address nextHop;\n+    public final Inet4Address srcAddr;\n+    public final Inet4Address dstAddr;\n+    public final Inet4Address nextHop;\n \n     // SNMP index of input / output interface\n     public final int input;\n", "next_change": null}]}, "commits_in_main": [{"oid": "3352dcced0424e52de475b87840f05dff94fbec4", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE5MzQxNw==", "url": "https://github.com/OpenNMS/opennms/pull/2903#discussion_r390193417", "body": "This can implement the `Converter` interface and can be used instead of the {Netflow 5, Netflow9, IPFIX} specific converter implementations. And Therefore it should be renamed, too.", "bodyText": "This can implement the Converter interface and can be used instead of the {Netflow 5, Netflow9, IPFIX} specific converter implementations. And Therefore it should be renamed, too.", "bodyHTML": "<p dir=\"auto\">This can implement the <code>Converter</code> interface and can be used instead of the {Netflow 5, Netflow9, IPFIX} specific converter implementations. And Therefore it should be renamed, too.</p>", "author": "fooker", "createdAt": "2020-03-10T09:41:48Z", "path": "features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/common/FlowMapper.java", "diffHunk": "@@ -0,0 +1,270 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+\n+package org.opennms.netmgt.telemetry.protocols.netflow.adapter.common;\n+\n+import java.util.Optional;\n+\n+import org.opennms.netmgt.flows.api.Flow;\n+import org.opennms.netmgt.telemetry.protocols.netflow.common.FlowMessage;\n+\n+import com.google.common.base.Strings;\n+\n+public class FlowMapper {", "originalCommit": "628f488dd99abfee27aab31b69ba5a1409717e77", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b0e90f013c5b6948e960f7eb2d66870c3c84e12a", "changed_code": [{"header": "diff --git a/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/common/FlowMapper.java b/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/common/FlowMapper.java\ndeleted file mode 100644\nindex ea7d467149e..00000000000\n--- a/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/common/FlowMapper.java\n+++ /dev/null\n", "chunk": "@@ -1,270 +0,0 @@\n-/*******************************************************************************\n- * This file is part of OpenNMS(R).\n- *\n- * Copyright (C) 2020 The OpenNMS Group, Inc.\n- * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n- *\n- * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n- *\n- * OpenNMS(R) is free software: you can redistribute it and/or modify\n- * it under the terms of the GNU Affero General Public License as published\n- * by the Free Software Foundation, either version 3 of the License,\n- * or (at your option) any later version.\n- *\n- * OpenNMS(R) is distributed in the hope that it will be useful,\n- * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n- * GNU Affero General Public License for more details.\n- *\n- * You should have received a copy of the GNU Affero General Public License\n- * along with OpenNMS(R).  If not, see:\n- *      http://www.gnu.org/licenses/\n- *\n- * For more information contact:\n- *     OpenNMS(R) Licensing <license@opennms.org>\n- *     http://www.opennms.org/\n- *     http://www.opennms.com/\n- *******************************************************************************/\n-\n-package org.opennms.netmgt.telemetry.protocols.netflow.adapter.common;\n-\n-import java.util.Optional;\n-\n-import org.opennms.netmgt.flows.api.Flow;\n-import org.opennms.netmgt.telemetry.protocols.netflow.common.FlowMessage;\n-\n-import com.google.common.base.Strings;\n-\n-public class FlowMapper {\n-\n-    public static Flow buildFlowFromProto(FlowMessage flowMessage) {\n-        return new Flow() {\n-            @Override\n-            public long getTimestamp() {\n-                return flowMessage.getTimestamp();\n-            }\n-\n-            @Override\n-            public Long getBytes() {\n-                return flowMessage.hasNumBytes() ? flowMessage.getNumBytes().getValue() : null;\n-            }\n-\n-            @Override\n-            public Direction getDirection() {\n-                switch (flowMessage.getDirection()) {\n-                    case INGRESS:\n-                        return Direction.INGRESS;\n-                    case EGRESS:\n-                        return Direction.EGRESS;\n-                }\n-                return Direction.INGRESS;\n-\n-            }\n-\n-            @Override\n-            public String getDstAddr() {\n-\n-                if (!Strings.isNullOrEmpty(flowMessage.getDstAddress())) {\n-                    return flowMessage.getDstAddress();\n-                }\n-                return null;\n-            }\n-\n-            @Override\n-            public Optional<String> getDstAddrHostname() {\n-                if (!Strings.isNullOrEmpty(flowMessage.getDstHostname())) {\n-                    return Optional.of(flowMessage.getDstHostname());\n-                }\n-                return Optional.empty();\n-            }\n-\n-            @Override\n-            public Long getDstAs() {\n-                return flowMessage.hasDstAs() ? flowMessage.getDstAs().getValue() : null;\n-            }\n-\n-            @Override\n-            public Integer getDstMaskLen() {\n-                return flowMessage.hasDstMaskLen() ? flowMessage.getDstMaskLen().getValue() : null;\n-            }\n-\n-            @Override\n-            public Integer getDstPort() {\n-                return flowMessage.hasDstPort() ? flowMessage.getDstPort().getValue() : null;\n-            }\n-\n-            @Override\n-            public Integer getEngineId() {\n-                return flowMessage.hasEngineId() ? flowMessage.getEngineId().getValue() : null;\n-            }\n-\n-            @Override\n-            public Integer getEngineType() {\n-                return flowMessage.hasEngineType() ? flowMessage.getEngineType().getValue() : null;\n-            }\n-\n-            @Override\n-            public Long getDeltaSwitched() {\n-                return flowMessage.hasDeltaSwitched() ? flowMessage.getDeltaSwitched().getValue() : null;\n-            }\n-\n-            @Override\n-            public Long getFirstSwitched() {\n-                return flowMessage.hasFirstSwitched() ? flowMessage.getFirstSwitched().getValue() : null;\n-            }\n-\n-            @Override\n-            public int getFlowRecords() {\n-                return flowMessage.hasNumFlowRecords() ? flowMessage.getNumFlowRecords().getValue() : 0;\n-            }\n-\n-            @Override\n-            public long getFlowSeqNum() {\n-                return flowMessage.hasFlowSeqNum() ? flowMessage.getFlowSeqNum().getValue() : 0L;\n-            }\n-\n-            @Override\n-            public Integer getInputSnmp() {\n-                return flowMessage.hasInputSnmpIfindex() ? flowMessage.getInputSnmpIfindex().getValue() : null;\n-            }\n-\n-            @Override\n-            public Integer getIpProtocolVersion() {\n-                return flowMessage.hasIpProtocolVersion() ? flowMessage.getIpProtocolVersion().getValue() : null;\n-            }\n-\n-            @Override\n-            public Long getLastSwitched() {\n-                return flowMessage.hasLastSwitched() ? flowMessage.getLastSwitched().getValue() : null;\n-            }\n-\n-            @Override\n-            public String getNextHop() {\n-                if (!Strings.isNullOrEmpty(flowMessage.getNextHopAddress())) {\n-                    return flowMessage.getNextHopAddress();\n-                }\n-                return null;\n-            }\n-\n-            @Override\n-            public Optional<String> getNextHopHostname() {\n-                if (!Strings.isNullOrEmpty(flowMessage.getNextHopHostname())) {\n-                    return Optional.of(flowMessage.getNextHopHostname());\n-                }\n-                return Optional.empty();\n-            }\n-\n-            @Override\n-            public Integer getOutputSnmp() {\n-                return flowMessage.hasOutputSnmpIfindex() ? flowMessage.getOutputSnmpIfindex().getValue() : null;\n-            }\n-\n-            @Override\n-            public Long getPackets() {\n-                return flowMessage.hasNumPackets() ? flowMessage.getNumPackets().getValue() : null;\n-            }\n-\n-            @Override\n-            public Integer getProtocol() {\n-                return flowMessage.hasProtocol() ? flowMessage.getProtocol().getValue() : null;\n-            }\n-\n-            @Override\n-            public SamplingAlgorithm getSamplingAlgorithm() {\n-\n-                switch (flowMessage.getSamplingAlgorithm()) {\n-                    case SystematicCountBasedSampling:\n-                        return SamplingAlgorithm.SystematicCountBasedSampling;\n-                    case SystematicTimeBasedSampling:\n-                        return SamplingAlgorithm.SystematicTimeBasedSampling;\n-                    case RandomNoutOfNSampling:\n-                        return SamplingAlgorithm.RandomNoutOfNSampling;\n-                    case UniformProbabilisticSampling:\n-                        return SamplingAlgorithm.UniformProbabilisticSampling;\n-                    case PropertyMatchFiltering:\n-                        return SamplingAlgorithm.PropertyMatchFiltering;\n-                    case HashBasedFiltering:\n-                        return SamplingAlgorithm.HashBasedFiltering;\n-                    case FlowStateDependentIntermediateFlowSelectionProcess:\n-                        return SamplingAlgorithm.FlowStateDependentIntermediateFlowSelectionProcess;\n-                }\n-                return SamplingAlgorithm.Unassigned;\n-            }\n-\n-            @Override\n-            public Double getSamplingInterval() {\n-                return  flowMessage.hasSamplingInterval() ? flowMessage.getSamplingInterval().getValue() : null;\n-            }\n-\n-            @Override\n-            public String getSrcAddr() {\n-                if(!Strings.isNullOrEmpty(flowMessage.getSrcAddress())) {\n-                    return flowMessage.getSrcAddress();\n-                }\n-                return null;\n-            }\n-\n-            @Override\n-            public Optional<String> getSrcAddrHostname() {\n-                if (!Strings.isNullOrEmpty(flowMessage.getSrcHostname())) {\n-                    return Optional.of(flowMessage.getSrcHostname());\n-                }\n-                return Optional.empty();\n-            }\n-\n-            @Override\n-            public Long getSrcAs() {\n-                return flowMessage.hasSrcAs() ? flowMessage.getSrcAs().getValue() : null;\n-            }\n-\n-            @Override\n-            public Integer getSrcMaskLen() {\n-                return flowMessage.hasSrcMaskLen() ? flowMessage.getSrcMaskLen().getValue() : null;\n-            }\n-\n-            @Override\n-            public Integer getSrcPort() {\n-                return flowMessage.hasSrcPort() ? flowMessage.getSrcPort().getValue() : null;\n-            }\n-\n-            @Override\n-            public Integer getTcpFlags() {\n-                return flowMessage.hasTcpFlags() ? flowMessage.getTcpFlags().getValue() : null;\n-            }\n-\n-            @Override\n-            public Integer getTos() {\n-                return flowMessage.hasTos() ? flowMessage.getTos().getValue() : null;\n-            }\n-\n-            @Override\n-            public NetflowVersion getNetflowVersion() {\n-                switch (flowMessage.getNetflowVersion()) {\n-                    case V5:\n-                        return NetflowVersion.V5;\n-                    case V9:\n-                        return NetflowVersion.V9;\n-                    case IPFIX:\n-                        return NetflowVersion.IPFIX;\n-                    case SFLOW:\n-                        return NetflowVersion.SFLOW;\n-                    default:\n-                        return NetflowVersion.V5;\n-                }\n-            }\n-\n-            @Override\n-            public Integer getVlan() {\n-                return flowMessage.hasVlan() ? flowMessage.getVlan().getValue() : null;\n-            }\n-\n-            @Override\n-            public String getNodeIdentifier() {\n-                if (!Strings.isNullOrEmpty(flowMessage.getNodeIdentifier())) {\n-                    return flowMessage.getNodeIdentifier();\n-                }\n-                return null;\n-            }\n-        };\n-    }\n-}\n", "next_change": null}]}, "revised_code_in_main": {"commit": "3352dcced0424e52de475b87840f05dff94fbec4", "changed_code": [{"header": "diff --git a/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/common/FlowMapper.java b/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/common/FlowMapper.java\ndeleted file mode 100644\nindex ea7d467149e..00000000000\n--- a/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/common/FlowMapper.java\n+++ /dev/null\n", "chunk": "@@ -1,270 +0,0 @@\n-/*******************************************************************************\n- * This file is part of OpenNMS(R).\n- *\n- * Copyright (C) 2020 The OpenNMS Group, Inc.\n- * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n- *\n- * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n- *\n- * OpenNMS(R) is free software: you can redistribute it and/or modify\n- * it under the terms of the GNU Affero General Public License as published\n- * by the Free Software Foundation, either version 3 of the License,\n- * or (at your option) any later version.\n- *\n- * OpenNMS(R) is distributed in the hope that it will be useful,\n- * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n- * GNU Affero General Public License for more details.\n- *\n- * You should have received a copy of the GNU Affero General Public License\n- * along with OpenNMS(R).  If not, see:\n- *      http://www.gnu.org/licenses/\n- *\n- * For more information contact:\n- *     OpenNMS(R) Licensing <license@opennms.org>\n- *     http://www.opennms.org/\n- *     http://www.opennms.com/\n- *******************************************************************************/\n-\n-package org.opennms.netmgt.telemetry.protocols.netflow.adapter.common;\n-\n-import java.util.Optional;\n-\n-import org.opennms.netmgt.flows.api.Flow;\n-import org.opennms.netmgt.telemetry.protocols.netflow.common.FlowMessage;\n-\n-import com.google.common.base.Strings;\n-\n-public class FlowMapper {\n-\n-    public static Flow buildFlowFromProto(FlowMessage flowMessage) {\n-        return new Flow() {\n-            @Override\n-            public long getTimestamp() {\n-                return flowMessage.getTimestamp();\n-            }\n-\n-            @Override\n-            public Long getBytes() {\n-                return flowMessage.hasNumBytes() ? flowMessage.getNumBytes().getValue() : null;\n-            }\n-\n-            @Override\n-            public Direction getDirection() {\n-                switch (flowMessage.getDirection()) {\n-                    case INGRESS:\n-                        return Direction.INGRESS;\n-                    case EGRESS:\n-                        return Direction.EGRESS;\n-                }\n-                return Direction.INGRESS;\n-\n-            }\n-\n-            @Override\n-            public String getDstAddr() {\n-\n-                if (!Strings.isNullOrEmpty(flowMessage.getDstAddress())) {\n-                    return flowMessage.getDstAddress();\n-                }\n-                return null;\n-            }\n-\n-            @Override\n-            public Optional<String> getDstAddrHostname() {\n-                if (!Strings.isNullOrEmpty(flowMessage.getDstHostname())) {\n-                    return Optional.of(flowMessage.getDstHostname());\n-                }\n-                return Optional.empty();\n-            }\n-\n-            @Override\n-            public Long getDstAs() {\n-                return flowMessage.hasDstAs() ? flowMessage.getDstAs().getValue() : null;\n-            }\n-\n-            @Override\n-            public Integer getDstMaskLen() {\n-                return flowMessage.hasDstMaskLen() ? flowMessage.getDstMaskLen().getValue() : null;\n-            }\n-\n-            @Override\n-            public Integer getDstPort() {\n-                return flowMessage.hasDstPort() ? flowMessage.getDstPort().getValue() : null;\n-            }\n-\n-            @Override\n-            public Integer getEngineId() {\n-                return flowMessage.hasEngineId() ? flowMessage.getEngineId().getValue() : null;\n-            }\n-\n-            @Override\n-            public Integer getEngineType() {\n-                return flowMessage.hasEngineType() ? flowMessage.getEngineType().getValue() : null;\n-            }\n-\n-            @Override\n-            public Long getDeltaSwitched() {\n-                return flowMessage.hasDeltaSwitched() ? flowMessage.getDeltaSwitched().getValue() : null;\n-            }\n-\n-            @Override\n-            public Long getFirstSwitched() {\n-                return flowMessage.hasFirstSwitched() ? flowMessage.getFirstSwitched().getValue() : null;\n-            }\n-\n-            @Override\n-            public int getFlowRecords() {\n-                return flowMessage.hasNumFlowRecords() ? flowMessage.getNumFlowRecords().getValue() : 0;\n-            }\n-\n-            @Override\n-            public long getFlowSeqNum() {\n-                return flowMessage.hasFlowSeqNum() ? flowMessage.getFlowSeqNum().getValue() : 0L;\n-            }\n-\n-            @Override\n-            public Integer getInputSnmp() {\n-                return flowMessage.hasInputSnmpIfindex() ? flowMessage.getInputSnmpIfindex().getValue() : null;\n-            }\n-\n-            @Override\n-            public Integer getIpProtocolVersion() {\n-                return flowMessage.hasIpProtocolVersion() ? flowMessage.getIpProtocolVersion().getValue() : null;\n-            }\n-\n-            @Override\n-            public Long getLastSwitched() {\n-                return flowMessage.hasLastSwitched() ? flowMessage.getLastSwitched().getValue() : null;\n-            }\n-\n-            @Override\n-            public String getNextHop() {\n-                if (!Strings.isNullOrEmpty(flowMessage.getNextHopAddress())) {\n-                    return flowMessage.getNextHopAddress();\n-                }\n-                return null;\n-            }\n-\n-            @Override\n-            public Optional<String> getNextHopHostname() {\n-                if (!Strings.isNullOrEmpty(flowMessage.getNextHopHostname())) {\n-                    return Optional.of(flowMessage.getNextHopHostname());\n-                }\n-                return Optional.empty();\n-            }\n-\n-            @Override\n-            public Integer getOutputSnmp() {\n-                return flowMessage.hasOutputSnmpIfindex() ? flowMessage.getOutputSnmpIfindex().getValue() : null;\n-            }\n-\n-            @Override\n-            public Long getPackets() {\n-                return flowMessage.hasNumPackets() ? flowMessage.getNumPackets().getValue() : null;\n-            }\n-\n-            @Override\n-            public Integer getProtocol() {\n-                return flowMessage.hasProtocol() ? flowMessage.getProtocol().getValue() : null;\n-            }\n-\n-            @Override\n-            public SamplingAlgorithm getSamplingAlgorithm() {\n-\n-                switch (flowMessage.getSamplingAlgorithm()) {\n-                    case SystematicCountBasedSampling:\n-                        return SamplingAlgorithm.SystematicCountBasedSampling;\n-                    case SystematicTimeBasedSampling:\n-                        return SamplingAlgorithm.SystematicTimeBasedSampling;\n-                    case RandomNoutOfNSampling:\n-                        return SamplingAlgorithm.RandomNoutOfNSampling;\n-                    case UniformProbabilisticSampling:\n-                        return SamplingAlgorithm.UniformProbabilisticSampling;\n-                    case PropertyMatchFiltering:\n-                        return SamplingAlgorithm.PropertyMatchFiltering;\n-                    case HashBasedFiltering:\n-                        return SamplingAlgorithm.HashBasedFiltering;\n-                    case FlowStateDependentIntermediateFlowSelectionProcess:\n-                        return SamplingAlgorithm.FlowStateDependentIntermediateFlowSelectionProcess;\n-                }\n-                return SamplingAlgorithm.Unassigned;\n-            }\n-\n-            @Override\n-            public Double getSamplingInterval() {\n-                return  flowMessage.hasSamplingInterval() ? flowMessage.getSamplingInterval().getValue() : null;\n-            }\n-\n-            @Override\n-            public String getSrcAddr() {\n-                if(!Strings.isNullOrEmpty(flowMessage.getSrcAddress())) {\n-                    return flowMessage.getSrcAddress();\n-                }\n-                return null;\n-            }\n-\n-            @Override\n-            public Optional<String> getSrcAddrHostname() {\n-                if (!Strings.isNullOrEmpty(flowMessage.getSrcHostname())) {\n-                    return Optional.of(flowMessage.getSrcHostname());\n-                }\n-                return Optional.empty();\n-            }\n-\n-            @Override\n-            public Long getSrcAs() {\n-                return flowMessage.hasSrcAs() ? flowMessage.getSrcAs().getValue() : null;\n-            }\n-\n-            @Override\n-            public Integer getSrcMaskLen() {\n-                return flowMessage.hasSrcMaskLen() ? flowMessage.getSrcMaskLen().getValue() : null;\n-            }\n-\n-            @Override\n-            public Integer getSrcPort() {\n-                return flowMessage.hasSrcPort() ? flowMessage.getSrcPort().getValue() : null;\n-            }\n-\n-            @Override\n-            public Integer getTcpFlags() {\n-                return flowMessage.hasTcpFlags() ? flowMessage.getTcpFlags().getValue() : null;\n-            }\n-\n-            @Override\n-            public Integer getTos() {\n-                return flowMessage.hasTos() ? flowMessage.getTos().getValue() : null;\n-            }\n-\n-            @Override\n-            public NetflowVersion getNetflowVersion() {\n-                switch (flowMessage.getNetflowVersion()) {\n-                    case V5:\n-                        return NetflowVersion.V5;\n-                    case V9:\n-                        return NetflowVersion.V9;\n-                    case IPFIX:\n-                        return NetflowVersion.IPFIX;\n-                    case SFLOW:\n-                        return NetflowVersion.SFLOW;\n-                    default:\n-                        return NetflowVersion.V5;\n-                }\n-            }\n-\n-            @Override\n-            public Integer getVlan() {\n-                return flowMessage.hasVlan() ? flowMessage.getVlan().getValue() : null;\n-            }\n-\n-            @Override\n-            public String getNodeIdentifier() {\n-                if (!Strings.isNullOrEmpty(flowMessage.getNodeIdentifier())) {\n-                    return flowMessage.getNodeIdentifier();\n-                }\n-                return null;\n-            }\n-        };\n-    }\n-}\n", "next_change": null}]}, "commits_in_main": [{"oid": "3352dcced0424e52de475b87840f05dff94fbec4", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE5NDEwNg==", "url": "https://github.com/OpenNMS/opennms/pull/2903#discussion_r390194106", "body": "Organize your imports :)", "bodyText": "Organize your imports :)", "bodyHTML": "<p dir=\"auto\">Organize your imports :)</p>", "author": "fooker", "createdAt": "2020-03-10T09:43:08Z", "path": "features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/ipfix/IpfixAdapter.java", "diffHunk": "@@ -33,10 +33,18 @@\n import org.opennms.netmgt.flows.api.FlowRepository;\n import org.opennms.netmgt.telemetry.api.adapter.TelemetryMessageLogEntry;\n import org.opennms.netmgt.telemetry.protocols.flows.AbstractFlowAdapter;\n+import org.opennms.netmgt.telemetry.protocols.netflow.adapter.netflow5.Netflow5Adapter;", "originalCommit": "628f488dd99abfee27aab31b69ba5a1409717e77", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b0e90f013c5b6948e960f7eb2d66870c3c84e12a", "changed_code": [{"header": "diff --git a/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/ipfix/IpfixAdapter.java b/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/ipfix/IpfixAdapter.java\nindex f8f21b7e1ba..5f57b6708e7 100644\n--- a/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/ipfix/IpfixAdapter.java\n+++ b/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/ipfix/IpfixAdapter.java\n", "chunk": "@@ -28,37 +28,18 @@\n \n package org.opennms.netmgt.telemetry.protocols.netflow.adapter.ipfix;\n \n-import org.bson.BsonDocument;\n-import org.bson.RawBsonDocument;\n import org.opennms.netmgt.flows.api.FlowRepository;\n-import org.opennms.netmgt.telemetry.api.adapter.TelemetryMessageLogEntry;\n-import org.opennms.netmgt.telemetry.protocols.flows.AbstractFlowAdapter;\n-import org.opennms.netmgt.telemetry.protocols.netflow.adapter.netflow5.Netflow5Adapter;\n-import org.opennms.netmgt.telemetry.protocols.netflow.common.FlowMessage;\n-import org.opennms.netmgt.telemetry.protocols.netflow.proto.FlowMessageProto;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n+import org.opennms.netmgt.telemetry.protocols.netflow.adapter.common.AbstractNetflowAdapter;\n \n import com.codahale.metrics.MetricRegistry;\n-import com.google.protobuf.InvalidProtocolBufferException;\n \n-public class IpfixAdapter extends AbstractFlowAdapter<FlowMessage> {\n+public class IpfixAdapter extends AbstractNetflowAdapter {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(IpfixAdapter.class);\n \n     public IpfixAdapter(final String name,\n                         final MetricRegistry metricRegistry,\n                         final FlowRepository flowRepository) {\n-        super(name, metricRegistry, flowRepository, new IpfixConverter());\n+        super(name, metricRegistry, flowRepository);\n     }\n \n-    @Override\n-    protected FlowMessage parse(TelemetryMessageLogEntry message) {\n-        try {\n-            return FlowMessageProto.parseFrom(message.getByteArray());\n-        } catch (InvalidProtocolBufferException e) {\n-            LOG.error(\"Unable to parse message from proto\", e);\n-        }\n-        return null;\n-    }\n }\n", "next_change": null}]}, "revised_code_in_main": {"commit": "3352dcced0424e52de475b87840f05dff94fbec4", "changed_code": [{"header": "diff --git a/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/ipfix/IpfixAdapter.java b/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/ipfix/IpfixAdapter.java\nindex f8f21b7e1ba..d02308e7544 100644\n--- a/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/ipfix/IpfixAdapter.java\n+++ b/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/ipfix/IpfixAdapter.java\n", "chunk": "@@ -28,37 +28,18 @@\n \n package org.opennms.netmgt.telemetry.protocols.netflow.adapter.ipfix;\n \n-import org.bson.BsonDocument;\n-import org.bson.RawBsonDocument;\n import org.opennms.netmgt.flows.api.FlowRepository;\n-import org.opennms.netmgt.telemetry.api.adapter.TelemetryMessageLogEntry;\n-import org.opennms.netmgt.telemetry.protocols.flows.AbstractFlowAdapter;\n-import org.opennms.netmgt.telemetry.protocols.netflow.adapter.netflow5.Netflow5Adapter;\n-import org.opennms.netmgt.telemetry.protocols.netflow.common.FlowMessage;\n-import org.opennms.netmgt.telemetry.protocols.netflow.proto.FlowMessageProto;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n+import org.opennms.netmgt.telemetry.protocols.netflow.adapter.common.NetflowAdapter;\n \n import com.codahale.metrics.MetricRegistry;\n-import com.google.protobuf.InvalidProtocolBufferException;\n \n-public class IpfixAdapter extends AbstractFlowAdapter<FlowMessage> {\n+public class IpfixAdapter extends NetflowAdapter {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(IpfixAdapter.class);\n \n     public IpfixAdapter(final String name,\n                         final MetricRegistry metricRegistry,\n                         final FlowRepository flowRepository) {\n-        super(name, metricRegistry, flowRepository, new IpfixConverter());\n+        super(name, metricRegistry, flowRepository);\n     }\n \n-    @Override\n-    protected FlowMessage parse(TelemetryMessageLogEntry message) {\n-        try {\n-            return FlowMessageProto.parseFrom(message.getByteArray());\n-        } catch (InvalidProtocolBufferException e) {\n-            LOG.error(\"Unable to parse message from proto\", e);\n-        }\n-        return null;\n-    }\n }\n", "next_change": {"commit": "2ffea3b94e0c349dd6e4bbc13d24aa4d242b05b8", "changed_code": [{"header": "diff --git a/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/ipfix/IpfixAdapter.java b/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/ipfix/IpfixAdapter.java\nindex d02308e7544..f29714ff76d 100644\n--- a/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/ipfix/IpfixAdapter.java\n+++ b/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/ipfix/IpfixAdapter.java\n", "chunk": "@@ -28,18 +28,25 @@\n \n package org.opennms.netmgt.telemetry.protocols.netflow.adapter.ipfix;\n \n+import org.bson.BsonDocument;\n+import org.bson.RawBsonDocument;\n import org.opennms.netmgt.flows.api.FlowRepository;\n-import org.opennms.netmgt.telemetry.protocols.netflow.adapter.common.NetflowAdapter;\n+import org.opennms.netmgt.telemetry.api.adapter.TelemetryMessageLogEntry;\n+import org.opennms.netmgt.telemetry.config.api.AdapterDefinition;\n+import org.opennms.netmgt.telemetry.protocols.flows.AbstractFlowAdapter;\n \n import com.codahale.metrics.MetricRegistry;\n \n-public class IpfixAdapter extends NetflowAdapter {\n+public class IpfixAdapter extends AbstractFlowAdapter<BsonDocument> {\n \n-\n-    public IpfixAdapter(final String name,\n+    public IpfixAdapter(final AdapterDefinition adapterConfig,\n                         final MetricRegistry metricRegistry,\n                         final FlowRepository flowRepository) {\n-        super(name, metricRegistry, flowRepository);\n+        super(adapterConfig, metricRegistry, flowRepository, new IpfixConverter());\n     }\n \n+    @Override\n+    protected BsonDocument parse(TelemetryMessageLogEntry message) {\n+        return new RawBsonDocument(message.getByteArray());\n+    }\n }\n", "next_change": {"commit": "1367469c8ddc45b3db66af5db87dc4c189a90888", "changed_code": [{"header": "diff --git a/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/ipfix/IpfixAdapter.java b/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/ipfix/IpfixAdapter.java\nindex f29714ff76d..053727da928 100644\n--- a/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/ipfix/IpfixAdapter.java\n+++ b/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/ipfix/IpfixAdapter.java\n", "chunk": "@@ -28,25 +28,18 @@\n \n package org.opennms.netmgt.telemetry.protocols.netflow.adapter.ipfix;\n \n-import org.bson.BsonDocument;\n-import org.bson.RawBsonDocument;\n import org.opennms.netmgt.flows.api.FlowRepository;\n-import org.opennms.netmgt.telemetry.api.adapter.TelemetryMessageLogEntry;\n import org.opennms.netmgt.telemetry.config.api.AdapterDefinition;\n-import org.opennms.netmgt.telemetry.protocols.flows.AbstractFlowAdapter;\n+import org.opennms.netmgt.telemetry.protocols.netflow.adapter.common.NetflowAdapter;\n \n import com.codahale.metrics.MetricRegistry;\n \n-public class IpfixAdapter extends AbstractFlowAdapter<BsonDocument> {\n+public class IpfixAdapter extends NetflowAdapter {\n \n     public IpfixAdapter(final AdapterDefinition adapterConfig,\n                         final MetricRegistry metricRegistry,\n                         final FlowRepository flowRepository) {\n-        super(adapterConfig, metricRegistry, flowRepository, new IpfixConverter());\n+        super(adapterConfig, metricRegistry, flowRepository);\n     }\n \n-    @Override\n-    protected BsonDocument parse(TelemetryMessageLogEntry message) {\n-        return new RawBsonDocument(message.getByteArray());\n-    }\n }\n", "next_change": {"commit": "7f48409a888adfaefb4db7ebca68b1e8dd5f950d", "changed_code": [{"header": "diff --git a/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/ipfix/IpfixAdapter.java b/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/ipfix/IpfixAdapter.java\nindex 053727da928..6e066ba5a52 100644\n--- a/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/ipfix/IpfixAdapter.java\n+++ b/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/ipfix/IpfixAdapter.java\n", "chunk": "@@ -38,8 +38,8 @@ public class IpfixAdapter extends NetflowAdapter {\n \n     public IpfixAdapter(final AdapterDefinition adapterConfig,\n                         final MetricRegistry metricRegistry,\n-                        final FlowRepository flowRepository) {\n-        super(adapterConfig, metricRegistry, flowRepository);\n+                        final Pipeline pipeline) {\n+        super(adapterConfig, metricRegistry, pipeline);\n     }\n \n }\n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "3352dcced0424e52de475b87840f05dff94fbec4", "message": "Merge commit", "committedDate": null}, {"oid": "2ffea3b94e0c349dd6e4bbc13d24aa4d242b05b8", "committedDate": "2020-01-21 13:36:07 +0100", "message": "NMS-12424: Simplify telemetry adapter init"}, {"oid": "1367469c8ddc45b3db66af5db87dc4c189a90888", "committedDate": "2020-04-01 14:22:53 -0400", "message": "Merge remote-tracking branch 'origin/features/bmp' into release-26.0.0"}, {"oid": "7f48409a888adfaefb4db7ebca68b1e8dd5f950d", "committedDate": "2022-07-26 16:13:39 +0200", "message": "NMS-13770: Refactoring of flow processing"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE5NTcyMw==", "url": "https://github.com/OpenNMS/opennms/pull/2903#discussion_r390195723", "body": "Maybe we can add a generic `NetflowAdapter` which reduces the duplicated code in all adapters (which will be all the same, if we unify the `Converter`s). The old `Adapter` implementations should kept for backward compatibility but will reduce to empty sub-classes.", "bodyText": "Maybe we can add a generic NetflowAdapter which reduces the duplicated code in all adapters (which will be all the same, if we unify the Converters). The old Adapter implementations should kept for backward compatibility but will reduce to empty sub-classes.", "bodyHTML": "<p dir=\"auto\">Maybe we can add a generic <code>NetflowAdapter</code> which reduces the duplicated code in all adapters (which will be all the same, if we unify the <code>Converter</code>s). The old <code>Adapter</code> implementations should kept for backward compatibility but will reduce to empty sub-classes.</p>", "author": "fooker", "createdAt": "2020-03-10T09:45:56Z", "path": "features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/ipfix/IpfixAdapter.java", "diffHunk": "@@ -33,10 +33,18 @@\n import org.opennms.netmgt.flows.api.FlowRepository;\n import org.opennms.netmgt.telemetry.api.adapter.TelemetryMessageLogEntry;\n import org.opennms.netmgt.telemetry.protocols.flows.AbstractFlowAdapter;\n+import org.opennms.netmgt.telemetry.protocols.netflow.adapter.netflow5.Netflow5Adapter;\n+import org.opennms.netmgt.telemetry.protocols.netflow.common.FlowMessage;\n+import org.opennms.netmgt.telemetry.protocols.netflow.proto.FlowMessageProto;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n import com.codahale.metrics.MetricRegistry;\n+import com.google.protobuf.InvalidProtocolBufferException;\n \n-public class IpfixAdapter extends AbstractFlowAdapter<BsonDocument> {", "originalCommit": "628f488dd99abfee27aab31b69ba5a1409717e77", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b0e90f013c5b6948e960f7eb2d66870c3c84e12a", "changed_code": [{"header": "diff --git a/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/ipfix/IpfixAdapter.java b/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/ipfix/IpfixAdapter.java\nindex f8f21b7e1ba..5f57b6708e7 100644\n--- a/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/ipfix/IpfixAdapter.java\n+++ b/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/ipfix/IpfixAdapter.java\n", "chunk": "@@ -28,37 +28,18 @@\n \n package org.opennms.netmgt.telemetry.protocols.netflow.adapter.ipfix;\n \n-import org.bson.BsonDocument;\n-import org.bson.RawBsonDocument;\n import org.opennms.netmgt.flows.api.FlowRepository;\n-import org.opennms.netmgt.telemetry.api.adapter.TelemetryMessageLogEntry;\n-import org.opennms.netmgt.telemetry.protocols.flows.AbstractFlowAdapter;\n-import org.opennms.netmgt.telemetry.protocols.netflow.adapter.netflow5.Netflow5Adapter;\n-import org.opennms.netmgt.telemetry.protocols.netflow.common.FlowMessage;\n-import org.opennms.netmgt.telemetry.protocols.netflow.proto.FlowMessageProto;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n+import org.opennms.netmgt.telemetry.protocols.netflow.adapter.common.AbstractNetflowAdapter;\n \n import com.codahale.metrics.MetricRegistry;\n-import com.google.protobuf.InvalidProtocolBufferException;\n \n-public class IpfixAdapter extends AbstractFlowAdapter<FlowMessage> {\n+public class IpfixAdapter extends AbstractNetflowAdapter {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(IpfixAdapter.class);\n \n     public IpfixAdapter(final String name,\n                         final MetricRegistry metricRegistry,\n                         final FlowRepository flowRepository) {\n-        super(name, metricRegistry, flowRepository, new IpfixConverter());\n+        super(name, metricRegistry, flowRepository);\n     }\n \n-    @Override\n-    protected FlowMessage parse(TelemetryMessageLogEntry message) {\n-        try {\n-            return FlowMessageProto.parseFrom(message.getByteArray());\n-        } catch (InvalidProtocolBufferException e) {\n-            LOG.error(\"Unable to parse message from proto\", e);\n-        }\n-        return null;\n-    }\n }\n", "next_change": null}]}, "revised_code_in_main": {"commit": "3352dcced0424e52de475b87840f05dff94fbec4", "changed_code": [{"header": "diff --git a/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/ipfix/IpfixAdapter.java b/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/ipfix/IpfixAdapter.java\nindex f8f21b7e1ba..d02308e7544 100644\n--- a/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/ipfix/IpfixAdapter.java\n+++ b/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/ipfix/IpfixAdapter.java\n", "chunk": "@@ -28,37 +28,18 @@\n \n package org.opennms.netmgt.telemetry.protocols.netflow.adapter.ipfix;\n \n-import org.bson.BsonDocument;\n-import org.bson.RawBsonDocument;\n import org.opennms.netmgt.flows.api.FlowRepository;\n-import org.opennms.netmgt.telemetry.api.adapter.TelemetryMessageLogEntry;\n-import org.opennms.netmgt.telemetry.protocols.flows.AbstractFlowAdapter;\n-import org.opennms.netmgt.telemetry.protocols.netflow.adapter.netflow5.Netflow5Adapter;\n-import org.opennms.netmgt.telemetry.protocols.netflow.common.FlowMessage;\n-import org.opennms.netmgt.telemetry.protocols.netflow.proto.FlowMessageProto;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n+import org.opennms.netmgt.telemetry.protocols.netflow.adapter.common.NetflowAdapter;\n \n import com.codahale.metrics.MetricRegistry;\n-import com.google.protobuf.InvalidProtocolBufferException;\n \n-public class IpfixAdapter extends AbstractFlowAdapter<FlowMessage> {\n+public class IpfixAdapter extends NetflowAdapter {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(IpfixAdapter.class);\n \n     public IpfixAdapter(final String name,\n                         final MetricRegistry metricRegistry,\n                         final FlowRepository flowRepository) {\n-        super(name, metricRegistry, flowRepository, new IpfixConverter());\n+        super(name, metricRegistry, flowRepository);\n     }\n \n-    @Override\n-    protected FlowMessage parse(TelemetryMessageLogEntry message) {\n-        try {\n-            return FlowMessageProto.parseFrom(message.getByteArray());\n-        } catch (InvalidProtocolBufferException e) {\n-            LOG.error(\"Unable to parse message from proto\", e);\n-        }\n-        return null;\n-    }\n }\n", "next_change": {"commit": "2ffea3b94e0c349dd6e4bbc13d24aa4d242b05b8", "changed_code": [{"header": "diff --git a/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/ipfix/IpfixAdapter.java b/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/ipfix/IpfixAdapter.java\nindex d02308e7544..f29714ff76d 100644\n--- a/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/ipfix/IpfixAdapter.java\n+++ b/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/ipfix/IpfixAdapter.java\n", "chunk": "@@ -28,18 +28,25 @@\n \n package org.opennms.netmgt.telemetry.protocols.netflow.adapter.ipfix;\n \n+import org.bson.BsonDocument;\n+import org.bson.RawBsonDocument;\n import org.opennms.netmgt.flows.api.FlowRepository;\n-import org.opennms.netmgt.telemetry.protocols.netflow.adapter.common.NetflowAdapter;\n+import org.opennms.netmgt.telemetry.api.adapter.TelemetryMessageLogEntry;\n+import org.opennms.netmgt.telemetry.config.api.AdapterDefinition;\n+import org.opennms.netmgt.telemetry.protocols.flows.AbstractFlowAdapter;\n \n import com.codahale.metrics.MetricRegistry;\n \n-public class IpfixAdapter extends NetflowAdapter {\n+public class IpfixAdapter extends AbstractFlowAdapter<BsonDocument> {\n \n-\n-    public IpfixAdapter(final String name,\n+    public IpfixAdapter(final AdapterDefinition adapterConfig,\n                         final MetricRegistry metricRegistry,\n                         final FlowRepository flowRepository) {\n-        super(name, metricRegistry, flowRepository);\n+        super(adapterConfig, metricRegistry, flowRepository, new IpfixConverter());\n     }\n \n+    @Override\n+    protected BsonDocument parse(TelemetryMessageLogEntry message) {\n+        return new RawBsonDocument(message.getByteArray());\n+    }\n }\n", "next_change": {"commit": "1367469c8ddc45b3db66af5db87dc4c189a90888", "changed_code": [{"header": "diff --git a/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/ipfix/IpfixAdapter.java b/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/ipfix/IpfixAdapter.java\nindex f29714ff76d..053727da928 100644\n--- a/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/ipfix/IpfixAdapter.java\n+++ b/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/ipfix/IpfixAdapter.java\n", "chunk": "@@ -28,25 +28,18 @@\n \n package org.opennms.netmgt.telemetry.protocols.netflow.adapter.ipfix;\n \n-import org.bson.BsonDocument;\n-import org.bson.RawBsonDocument;\n import org.opennms.netmgt.flows.api.FlowRepository;\n-import org.opennms.netmgt.telemetry.api.adapter.TelemetryMessageLogEntry;\n import org.opennms.netmgt.telemetry.config.api.AdapterDefinition;\n-import org.opennms.netmgt.telemetry.protocols.flows.AbstractFlowAdapter;\n+import org.opennms.netmgt.telemetry.protocols.netflow.adapter.common.NetflowAdapter;\n \n import com.codahale.metrics.MetricRegistry;\n \n-public class IpfixAdapter extends AbstractFlowAdapter<BsonDocument> {\n+public class IpfixAdapter extends NetflowAdapter {\n \n     public IpfixAdapter(final AdapterDefinition adapterConfig,\n                         final MetricRegistry metricRegistry,\n                         final FlowRepository flowRepository) {\n-        super(adapterConfig, metricRegistry, flowRepository, new IpfixConverter());\n+        super(adapterConfig, metricRegistry, flowRepository);\n     }\n \n-    @Override\n-    protected BsonDocument parse(TelemetryMessageLogEntry message) {\n-        return new RawBsonDocument(message.getByteArray());\n-    }\n }\n", "next_change": {"commit": "7f48409a888adfaefb4db7ebca68b1e8dd5f950d", "changed_code": [{"header": "diff --git a/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/ipfix/IpfixAdapter.java b/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/ipfix/IpfixAdapter.java\nindex 053727da928..6e066ba5a52 100644\n--- a/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/ipfix/IpfixAdapter.java\n+++ b/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/ipfix/IpfixAdapter.java\n", "chunk": "@@ -38,8 +38,8 @@ public class IpfixAdapter extends NetflowAdapter {\n \n     public IpfixAdapter(final AdapterDefinition adapterConfig,\n                         final MetricRegistry metricRegistry,\n-                        final FlowRepository flowRepository) {\n-        super(adapterConfig, metricRegistry, flowRepository);\n+                        final Pipeline pipeline) {\n+        super(adapterConfig, metricRegistry, pipeline);\n     }\n \n }\n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "3352dcced0424e52de475b87840f05dff94fbec4", "message": "Merge commit", "committedDate": null}, {"oid": "2ffea3b94e0c349dd6e4bbc13d24aa4d242b05b8", "committedDate": "2020-01-21 13:36:07 +0100", "message": "NMS-12424: Simplify telemetry adapter init"}, {"oid": "1367469c8ddc45b3db66af5db87dc4c189a90888", "committedDate": "2020-04-01 14:22:53 -0400", "message": "Merge remote-tracking branch 'origin/features/bmp' into release-26.0.0"}, {"oid": "7f48409a888adfaefb4db7ebca68b1e8dd5f950d", "committedDate": "2022-07-26 16:13:39 +0200", "message": "NMS-13770: Refactoring of flow processing"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE5NjEzNQ==", "url": "https://github.com/OpenNMS/opennms/pull/2903#discussion_r390196135", "body": "Same as for `IpfixAdapter`.", "bodyText": "Same as for IpfixAdapter.", "bodyHTML": "<p dir=\"auto\">Same as for <code>IpfixAdapter</code>.</p>", "author": "fooker", "createdAt": "2020-03-10T09:46:33Z", "path": "features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5Adapter.java", "diffHunk": "@@ -28,17 +28,20 @@\n \n package org.opennms.netmgt.telemetry.protocols.netflow.adapter.netflow5;\n \n-import org.bson.BsonDocument;\n-import org.bson.RawBsonDocument;\n import org.opennms.netmgt.flows.api.FlowRepository;\n import org.opennms.netmgt.telemetry.api.adapter.TelemetryMessageLogEntry;\n import org.opennms.netmgt.telemetry.protocols.flows.AbstractFlowAdapter;\n+import org.opennms.netmgt.telemetry.protocols.netflow.common.FlowMessage;\n+import org.opennms.netmgt.telemetry.protocols.netflow.proto.FlowMessageProto;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n import com.codahale.metrics.MetricRegistry;\n+import com.google.protobuf.InvalidProtocolBufferException;\n \n-public class Netflow5Adapter extends AbstractFlowAdapter<BsonDocument> {\n+public class Netflow5Adapter extends AbstractFlowAdapter<FlowMessage> {", "originalCommit": "628f488dd99abfee27aab31b69ba5a1409717e77", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b0e90f013c5b6948e960f7eb2d66870c3c84e12a", "changed_code": [{"header": "diff --git a/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5Adapter.java b/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5Adapter.java\nindex d2b5eac041e..2370b5ef265 100644\n--- a/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5Adapter.java\n+++ b/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5Adapter.java\n", "chunk": "@@ -29,34 +29,16 @@\n package org.opennms.netmgt.telemetry.protocols.netflow.adapter.netflow5;\n \n import org.opennms.netmgt.flows.api.FlowRepository;\n-import org.opennms.netmgt.telemetry.api.adapter.TelemetryMessageLogEntry;\n-import org.opennms.netmgt.telemetry.protocols.flows.AbstractFlowAdapter;\n-import org.opennms.netmgt.telemetry.protocols.netflow.common.FlowMessage;\n-import org.opennms.netmgt.telemetry.protocols.netflow.proto.FlowMessageProto;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n+import org.opennms.netmgt.telemetry.protocols.netflow.adapter.common.AbstractNetflowAdapter;\n \n import com.codahale.metrics.MetricRegistry;\n-import com.google.protobuf.InvalidProtocolBufferException;\n \n-public class Netflow5Adapter extends AbstractFlowAdapter<FlowMessage> {\n-\n-    private static final Logger LOG = LoggerFactory.getLogger(Netflow5Adapter.class);\n+public class Netflow5Adapter extends AbstractNetflowAdapter {\n \n     public Netflow5Adapter(final String name,\n                            final MetricRegistry metricRegistry,\n                            final FlowRepository flowRepository) {\n-        super(name, metricRegistry, flowRepository, new Netflow5Converter());\n+        super(name, metricRegistry, flowRepository);\n     }\n \n-    @Override\n-    protected FlowMessage parse(TelemetryMessageLogEntry message) {\n-\n-        try {\n-            return FlowMessageProto.parseFrom(message.getByteArray());\n-        } catch (InvalidProtocolBufferException e) {\n-            LOG.error(\"Unable to parse message from proto\", e);\n-        }\n-        return null;\n-    }\n }\n", "next_change": null}]}, "revised_code_in_main": {"commit": "3352dcced0424e52de475b87840f05dff94fbec4", "changed_code": [{"header": "diff --git a/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5Adapter.java b/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5Adapter.java\nindex d2b5eac041e..f60a7b0825e 100644\n--- a/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5Adapter.java\n+++ b/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5Adapter.java\n", "chunk": "@@ -29,34 +29,16 @@\n package org.opennms.netmgt.telemetry.protocols.netflow.adapter.netflow5;\n \n import org.opennms.netmgt.flows.api.FlowRepository;\n-import org.opennms.netmgt.telemetry.api.adapter.TelemetryMessageLogEntry;\n-import org.opennms.netmgt.telemetry.protocols.flows.AbstractFlowAdapter;\n-import org.opennms.netmgt.telemetry.protocols.netflow.common.FlowMessage;\n-import org.opennms.netmgt.telemetry.protocols.netflow.proto.FlowMessageProto;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n+import org.opennms.netmgt.telemetry.protocols.netflow.adapter.common.NetflowAdapter;\n \n import com.codahale.metrics.MetricRegistry;\n-import com.google.protobuf.InvalidProtocolBufferException;\n \n-public class Netflow5Adapter extends AbstractFlowAdapter<FlowMessage> {\n-\n-    private static final Logger LOG = LoggerFactory.getLogger(Netflow5Adapter.class);\n+public class Netflow5Adapter extends NetflowAdapter {\n \n     public Netflow5Adapter(final String name,\n                            final MetricRegistry metricRegistry,\n                            final FlowRepository flowRepository) {\n-        super(name, metricRegistry, flowRepository, new Netflow5Converter());\n+        super(name, metricRegistry, flowRepository);\n     }\n \n-    @Override\n-    protected FlowMessage parse(TelemetryMessageLogEntry message) {\n-\n-        try {\n-            return FlowMessageProto.parseFrom(message.getByteArray());\n-        } catch (InvalidProtocolBufferException e) {\n-            LOG.error(\"Unable to parse message from proto\", e);\n-        }\n-        return null;\n-    }\n }\n", "next_change": {"commit": "2ffea3b94e0c349dd6e4bbc13d24aa4d242b05b8", "changed_code": [{"header": "diff --git a/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5Adapter.java b/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5Adapter.java\nindex f60a7b0825e..53dfcc4c359 100644\n--- a/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5Adapter.java\n+++ b/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5Adapter.java\n", "chunk": "@@ -28,17 +28,27 @@\n \n package org.opennms.netmgt.telemetry.protocols.netflow.adapter.netflow5;\n \n+import org.bson.BsonDocument;\n+import org.bson.RawBsonDocument;\n import org.opennms.netmgt.flows.api.FlowRepository;\n-import org.opennms.netmgt.telemetry.protocols.netflow.adapter.common.NetflowAdapter;\n+import org.opennms.netmgt.telemetry.api.adapter.TelemetryMessageLogEntry;\n+import org.opennms.netmgt.telemetry.config.api.AdapterDefinition;\n+import org.opennms.netmgt.telemetry.protocols.flows.AbstractFlowAdapter;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n import com.codahale.metrics.MetricRegistry;\n \n-public class Netflow5Adapter extends NetflowAdapter {\n+public class Netflow5Adapter extends AbstractFlowAdapter<BsonDocument> {\n \n-    public Netflow5Adapter(final String name,\n+    public Netflow5Adapter(final AdapterDefinition adapterConfig,\n                            final MetricRegistry metricRegistry,\n                            final FlowRepository flowRepository) {\n-        super(name, metricRegistry, flowRepository);\n+        super(adapterConfig, metricRegistry, flowRepository, new Netflow5Converter());\n     }\n \n+    @Override\n+    protected BsonDocument parse(TelemetryMessageLogEntry message) {\n+        return new RawBsonDocument(message.getByteArray());\n+    }\n }\n", "next_change": {"commit": "1367469c8ddc45b3db66af5db87dc4c189a90888", "changed_code": [{"header": "diff --git a/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5Adapter.java b/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5Adapter.java\nindex 53dfcc4c359..2f58e86c31c 100644\n--- a/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5Adapter.java\n+++ b/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5Adapter.java\n", "chunk": "@@ -28,27 +28,18 @@\n \n package org.opennms.netmgt.telemetry.protocols.netflow.adapter.netflow5;\n \n-import org.bson.BsonDocument;\n-import org.bson.RawBsonDocument;\n import org.opennms.netmgt.flows.api.FlowRepository;\n-import org.opennms.netmgt.telemetry.api.adapter.TelemetryMessageLogEntry;\n import org.opennms.netmgt.telemetry.config.api.AdapterDefinition;\n-import org.opennms.netmgt.telemetry.protocols.flows.AbstractFlowAdapter;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n+import org.opennms.netmgt.telemetry.protocols.netflow.adapter.common.NetflowAdapter;\n \n import com.codahale.metrics.MetricRegistry;\n \n-public class Netflow5Adapter extends AbstractFlowAdapter<BsonDocument> {\n+public class Netflow5Adapter extends NetflowAdapter {\n \n     public Netflow5Adapter(final AdapterDefinition adapterConfig,\n                            final MetricRegistry metricRegistry,\n                            final FlowRepository flowRepository) {\n-        super(adapterConfig, metricRegistry, flowRepository, new Netflow5Converter());\n+        super(adapterConfig, metricRegistry, flowRepository);\n     }\n \n-    @Override\n-    protected BsonDocument parse(TelemetryMessageLogEntry message) {\n-        return new RawBsonDocument(message.getByteArray());\n-    }\n }\n", "next_change": {"commit": "7f48409a888adfaefb4db7ebca68b1e8dd5f950d", "changed_code": [{"header": "diff --git a/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5Adapter.java b/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5Adapter.java\nindex 2f58e86c31c..fe16bfa9828 100644\n--- a/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5Adapter.java\n+++ b/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5Adapter.java\n", "chunk": "@@ -38,8 +38,8 @@ public class Netflow5Adapter extends NetflowAdapter {\n \n     public Netflow5Adapter(final AdapterDefinition adapterConfig,\n                            final MetricRegistry metricRegistry,\n-                           final FlowRepository flowRepository) {\n-        super(adapterConfig, metricRegistry, flowRepository);\n+                           final Pipeline pipeline) {\n+        super(adapterConfig, metricRegistry, pipeline);\n     }\n \n }\n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "3352dcced0424e52de475b87840f05dff94fbec4", "message": "Merge commit", "committedDate": null}, {"oid": "2ffea3b94e0c349dd6e4bbc13d24aa4d242b05b8", "committedDate": "2020-01-21 13:36:07 +0100", "message": "NMS-12424: Simplify telemetry adapter init"}, {"oid": "1367469c8ddc45b3db66af5db87dc4c189a90888", "committedDate": "2020-04-01 14:22:53 -0400", "message": "Merge remote-tracking branch 'origin/features/bmp' into release-26.0.0"}, {"oid": "7f48409a888adfaefb4db7ebca68b1e8dd5f950d", "committedDate": "2022-07-26 16:13:39 +0200", "message": "NMS-13770: Refactoring of flow processing"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE5NjM5Nw==", "url": "https://github.com/OpenNMS/opennms/pull/2903#discussion_r390196397", "body": "Same as for `IpfixAdapter`.", "bodyText": "Same as for IpfixAdapter.", "bodyHTML": "<p dir=\"auto\">Same as for <code>IpfixAdapter</code>.</p>", "author": "fooker", "createdAt": "2020-03-10T09:46:58Z", "path": "features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow9/Netflow9Adapter.java", "diffHunk": "@@ -28,15 +28,20 @@\n \n package org.opennms.netmgt.telemetry.protocols.netflow.adapter.netflow9;\n \n-import org.bson.BsonDocument;\n-import org.bson.RawBsonDocument;\n import org.opennms.netmgt.flows.api.FlowRepository;\n import org.opennms.netmgt.telemetry.api.adapter.TelemetryMessageLogEntry;\n import org.opennms.netmgt.telemetry.protocols.flows.AbstractFlowAdapter;\n+import org.opennms.netmgt.telemetry.protocols.netflow.common.FlowMessage;\n+import org.opennms.netmgt.telemetry.protocols.netflow.proto.FlowMessageProto;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n import com.codahale.metrics.MetricRegistry;\n+import com.google.protobuf.InvalidProtocolBufferException;\n \n-public class Netflow9Adapter extends AbstractFlowAdapter<BsonDocument> {\n+public class Netflow9Adapter extends AbstractFlowAdapter<FlowMessage> {", "originalCommit": "628f488dd99abfee27aab31b69ba5a1409717e77", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b0e90f013c5b6948e960f7eb2d66870c3c84e12a", "changed_code": [{"header": "diff --git a/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow9/Netflow9Adapter.java b/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow9/Netflow9Adapter.java\nindex 9bdb6d62bf1..a5c31ea4065 100644\n--- a/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow9/Netflow9Adapter.java\n+++ b/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow9/Netflow9Adapter.java\n", "chunk": "@@ -29,34 +29,16 @@\n package org.opennms.netmgt.telemetry.protocols.netflow.adapter.netflow9;\n \n import org.opennms.netmgt.flows.api.FlowRepository;\n-import org.opennms.netmgt.telemetry.api.adapter.TelemetryMessageLogEntry;\n-import org.opennms.netmgt.telemetry.protocols.flows.AbstractFlowAdapter;\n-import org.opennms.netmgt.telemetry.protocols.netflow.common.FlowMessage;\n-import org.opennms.netmgt.telemetry.protocols.netflow.proto.FlowMessageProto;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n+import org.opennms.netmgt.telemetry.protocols.netflow.adapter.common.AbstractNetflowAdapter;\n \n import com.codahale.metrics.MetricRegistry;\n-import com.google.protobuf.InvalidProtocolBufferException;\n \n-public class Netflow9Adapter extends AbstractFlowAdapter<FlowMessage> {\n-\n-    private static final Logger LOG = LoggerFactory.getLogger(Netflow9Adapter.class);\n+public class Netflow9Adapter extends AbstractNetflowAdapter {\n \n     public Netflow9Adapter(final String name,\n                            final MetricRegistry metricRegistry,\n                            final FlowRepository flowRepository) {\n-        super(name, metricRegistry, flowRepository, new Netflow9Converter());\n+        super(name, metricRegistry, flowRepository);\n     }\n \n-    @Override\n-    protected FlowMessage parse(TelemetryMessageLogEntry message) {\n-\n-        try {\n-            return FlowMessageProto.parseFrom(message.getByteArray());\n-        } catch (InvalidProtocolBufferException e) {\n-            LOG.error(\"Unable to parse message from proto\", e);\n-        }\n-        return null;\n-    }\n }\n", "next_change": null}]}, "revised_code_in_main": {"commit": "3352dcced0424e52de475b87840f05dff94fbec4", "changed_code": [{"header": "diff --git a/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow9/Netflow9Adapter.java b/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow9/Netflow9Adapter.java\nindex 9bdb6d62bf1..c70fd287bd9 100644\n--- a/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow9/Netflow9Adapter.java\n+++ b/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow9/Netflow9Adapter.java\n", "chunk": "@@ -29,34 +29,16 @@\n package org.opennms.netmgt.telemetry.protocols.netflow.adapter.netflow9;\n \n import org.opennms.netmgt.flows.api.FlowRepository;\n-import org.opennms.netmgt.telemetry.api.adapter.TelemetryMessageLogEntry;\n-import org.opennms.netmgt.telemetry.protocols.flows.AbstractFlowAdapter;\n-import org.opennms.netmgt.telemetry.protocols.netflow.common.FlowMessage;\n-import org.opennms.netmgt.telemetry.protocols.netflow.proto.FlowMessageProto;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n+import org.opennms.netmgt.telemetry.protocols.netflow.adapter.common.NetflowAdapter;\n \n import com.codahale.metrics.MetricRegistry;\n-import com.google.protobuf.InvalidProtocolBufferException;\n \n-public class Netflow9Adapter extends AbstractFlowAdapter<FlowMessage> {\n-\n-    private static final Logger LOG = LoggerFactory.getLogger(Netflow9Adapter.class);\n+public class Netflow9Adapter extends NetflowAdapter {\n \n     public Netflow9Adapter(final String name,\n                            final MetricRegistry metricRegistry,\n                            final FlowRepository flowRepository) {\n-        super(name, metricRegistry, flowRepository, new Netflow9Converter());\n+        super(name, metricRegistry, flowRepository);\n     }\n \n-    @Override\n-    protected FlowMessage parse(TelemetryMessageLogEntry message) {\n-\n-        try {\n-            return FlowMessageProto.parseFrom(message.getByteArray());\n-        } catch (InvalidProtocolBufferException e) {\n-            LOG.error(\"Unable to parse message from proto\", e);\n-        }\n-        return null;\n-    }\n }\n", "next_change": {"commit": "2ffea3b94e0c349dd6e4bbc13d24aa4d242b05b8", "changed_code": [{"header": "diff --git a/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow9/Netflow9Adapter.java b/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow9/Netflow9Adapter.java\nindex c70fd287bd9..3cd62b342d9 100644\n--- a/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow9/Netflow9Adapter.java\n+++ b/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow9/Netflow9Adapter.java\n", "chunk": "@@ -28,17 +28,25 @@\n \n package org.opennms.netmgt.telemetry.protocols.netflow.adapter.netflow9;\n \n+import org.bson.BsonDocument;\n+import org.bson.RawBsonDocument;\n import org.opennms.netmgt.flows.api.FlowRepository;\n-import org.opennms.netmgt.telemetry.protocols.netflow.adapter.common.NetflowAdapter;\n+import org.opennms.netmgt.telemetry.api.adapter.TelemetryMessageLogEntry;\n+import org.opennms.netmgt.telemetry.config.api.AdapterDefinition;\n+import org.opennms.netmgt.telemetry.protocols.flows.AbstractFlowAdapter;\n \n import com.codahale.metrics.MetricRegistry;\n \n-public class Netflow9Adapter extends NetflowAdapter {\n+public class Netflow9Adapter extends AbstractFlowAdapter<BsonDocument> {\n \n-    public Netflow9Adapter(final String name,\n+    public Netflow9Adapter(final AdapterDefinition adapterConfig,\n                            final MetricRegistry metricRegistry,\n                            final FlowRepository flowRepository) {\n-        super(name, metricRegistry, flowRepository);\n+        super(adapterConfig, metricRegistry, flowRepository, new Netflow9Converter());\n     }\n \n+    @Override\n+    protected BsonDocument parse(TelemetryMessageLogEntry message) {\n+        return new RawBsonDocument(message.getByteArray());\n+    }\n }\n", "next_change": {"commit": "1367469c8ddc45b3db66af5db87dc4c189a90888", "changed_code": [{"header": "diff --git a/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow9/Netflow9Adapter.java b/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow9/Netflow9Adapter.java\nindex 3cd62b342d9..1c76844b102 100644\n--- a/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow9/Netflow9Adapter.java\n+++ b/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow9/Netflow9Adapter.java\n", "chunk": "@@ -28,25 +28,18 @@\n \n package org.opennms.netmgt.telemetry.protocols.netflow.adapter.netflow9;\n \n-import org.bson.BsonDocument;\n-import org.bson.RawBsonDocument;\n import org.opennms.netmgt.flows.api.FlowRepository;\n-import org.opennms.netmgt.telemetry.api.adapter.TelemetryMessageLogEntry;\n import org.opennms.netmgt.telemetry.config.api.AdapterDefinition;\n-import org.opennms.netmgt.telemetry.protocols.flows.AbstractFlowAdapter;\n+import org.opennms.netmgt.telemetry.protocols.netflow.adapter.common.NetflowAdapter;\n \n import com.codahale.metrics.MetricRegistry;\n \n-public class Netflow9Adapter extends AbstractFlowAdapter<BsonDocument> {\n+public class Netflow9Adapter extends NetflowAdapter {\n \n     public Netflow9Adapter(final AdapterDefinition adapterConfig,\n                            final MetricRegistry metricRegistry,\n                            final FlowRepository flowRepository) {\n-        super(adapterConfig, metricRegistry, flowRepository, new Netflow9Converter());\n+        super(adapterConfig, metricRegistry, flowRepository);\n     }\n \n-    @Override\n-    protected BsonDocument parse(TelemetryMessageLogEntry message) {\n-        return new RawBsonDocument(message.getByteArray());\n-    }\n }\n", "next_change": {"commit": "7f48409a888adfaefb4db7ebca68b1e8dd5f950d", "changed_code": [{"header": "diff --git a/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow9/Netflow9Adapter.java b/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow9/Netflow9Adapter.java\nindex 1c76844b102..54bed2e6b0c 100644\n--- a/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow9/Netflow9Adapter.java\n+++ b/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow9/Netflow9Adapter.java\n", "chunk": "@@ -38,8 +38,8 @@ public class Netflow9Adapter extends NetflowAdapter {\n \n     public Netflow9Adapter(final AdapterDefinition adapterConfig,\n                            final MetricRegistry metricRegistry,\n-                           final FlowRepository flowRepository) {\n-        super(adapterConfig, metricRegistry, flowRepository);\n+                           final Pipeline pipeline) {\n+        super(adapterConfig, metricRegistry, pipeline);\n     }\n \n }\n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "3352dcced0424e52de475b87840f05dff94fbec4", "message": "Merge commit", "committedDate": null}, {"oid": "2ffea3b94e0c349dd6e4bbc13d24aa4d242b05b8", "committedDate": "2020-01-21 13:36:07 +0100", "message": "NMS-12424: Simplify telemetry adapter init"}, {"oid": "1367469c8ddc45b3db66af5db87dc4c189a90888", "committedDate": "2020-04-01 14:22:53 -0400", "message": "Merge remote-tracking branch 'origin/features/bmp' into release-26.0.0"}, {"oid": "7f48409a888adfaefb4db7ebca68b1e8dd5f950d", "committedDate": "2022-07-26 16:13:39 +0200", "message": "NMS-13770: Refactoring of flow processing"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE5ODI5Nw==", "url": "https://github.com/OpenNMS/opennms/pull/2903#discussion_r390198297", "body": "Same as for `IpfixConverter`.", "bodyText": "Same as for IpfixConverter.", "bodyHTML": "<p dir=\"auto\">Same as for <code>IpfixConverter</code>.</p>", "author": "fooker", "createdAt": "2020-03-10T09:50:12Z", "path": "features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5Converter.java", "diffHunk": "@@ -28,17 +28,21 @@\n \n package org.opennms.netmgt.telemetry.protocols.netflow.adapter.netflow5;\n \n+import static org.opennms.netmgt.telemetry.protocols.netflow.adapter.common.FlowMapper.buildFlowFromProto;\n+\n import java.util.Collections;\n import java.util.List;\n \n-import org.bson.BsonDocument;\n import org.opennms.netmgt.flows.api.Converter;\n import org.opennms.netmgt.flows.api.Flow;\n+import org.opennms.netmgt.telemetry.protocols.netflow.common.FlowMessage;\n \n-public class Netflow5Converter implements Converter<BsonDocument> {\n+public class Netflow5Converter implements Converter<FlowMessage> {", "originalCommit": "628f488dd99abfee27aab31b69ba5a1409717e77", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b0e90f013c5b6948e960f7eb2d66870c3c84e12a", "changed_code": [{"header": "diff --git a/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5Converter.java b/features/graph/service/src/main/java/org/opennms/netmgt/graph/enrichment/EnrichmentUtils.java\nsimilarity index 59%\nrename from features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5Converter.java\nrename to features/graph/service/src/main/java/org/opennms/netmgt/graph/enrichment/EnrichmentUtils.java\nindex 6e3d90acb57..94af9015b93 100644\n--- a/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5Converter.java\n+++ b/features/graph/service/src/main/java/org/opennms/netmgt/graph/enrichment/EnrichmentUtils.java\n", "chunk": "@@ -26,23 +26,24 @@\n  *     http://www.opennms.com/\n  *******************************************************************************/\n \n-package org.opennms.netmgt.telemetry.protocols.netflow.adapter.netflow5;\n+package org.opennms.netmgt.graph.enrichment;\n \n-import static org.opennms.netmgt.telemetry.protocols.netflow.adapter.common.FlowMapper.buildFlowFromProto;\n+import java.util.Map;\n+import java.util.Objects;\n \n-import java.util.Collections;\n-import java.util.List;\n+public final class EnrichmentUtils {\n \n-import org.opennms.netmgt.flows.api.Converter;\n-import org.opennms.netmgt.flows.api.Flow;\n-import org.opennms.netmgt.telemetry.protocols.netflow.common.FlowMessage;\n+    private EnrichmentUtils() {}\n \n-public class Netflow5Converter implements Converter<FlowMessage> {\n-\n-    @Override\n-    public List<Flow> convert(final FlowMessage flowMessage) {\n-\n-        Flow flow = buildFlowFromProto(flowMessage);\n-        return Collections.singletonList(flow);\n+    public static boolean parseBoolean(final Map<String, Object> properties, final String propertyKey) {\n+        Objects.requireNonNull(properties);\n+        final Object value = properties.get(propertyKey);\n+        if (value instanceof Boolean) {\n+            return (Boolean) value;\n+        }\n+        if (value instanceof String) {\n+            return Boolean.parseBoolean((String) value);\n+        }\n+        return false;\n     }\n }\n", "next_change": null}]}, "revised_code_in_main": {"commit": "3352dcced0424e52de475b87840f05dff94fbec4", "changed_code": [{"header": "diff --git a/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5Converter.java b/features/flows/api/src/main/java/org/opennms/netmgt/flows/api/NodeInfo.java\nsimilarity index 60%\nrename from features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5Converter.java\nrename to features/flows/api/src/main/java/org/opennms/netmgt/flows/api/NodeInfo.java\nindex 6e3d90acb57..a5003f40ae7 100644\n--- a/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5Converter.java\n+++ b/features/flows/api/src/main/java/org/opennms/netmgt/flows/api/NodeInfo.java\n", "chunk": "@@ -26,23 +26,19 @@\n  *     http://www.opennms.com/\n  *******************************************************************************/\n \n-package org.opennms.netmgt.telemetry.protocols.netflow.adapter.netflow5;\n+package org.opennms.netmgt.flows.api;\n \n-import static org.opennms.netmgt.telemetry.protocols.netflow.adapter.common.FlowMapper.buildFlowFromProto;\n-\n-import java.util.Collections;\n import java.util.List;\n \n-import org.opennms.netmgt.flows.api.Converter;\n-import org.opennms.netmgt.flows.api.Flow;\n-import org.opennms.netmgt.telemetry.protocols.netflow.common.FlowMessage;\n+public interface NodeInfo {\n+\n+    Integer getNodeId();\n+\n+    String getForeignId();\n+\n+    String getForeignSource();\n \n-public class Netflow5Converter implements Converter<FlowMessage> {\n+    List<String> getCategories();\n \n-    @Override\n-    public List<Flow> convert(final FlowMessage flowMessage) {\n \n-        Flow flow = buildFlowFromProto(flowMessage);\n-        return Collections.singletonList(flow);\n-    }\n }\n", "next_change": null}]}, "commits_in_main": [{"oid": "3352dcced0424e52de475b87840f05dff94fbec4", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE5ODgwMw==", "url": "https://github.com/OpenNMS/opennms/pull/2903#discussion_r390198803", "body": "Same as for `IpfixConverter`.", "bodyText": "Same as for IpfixConverter.", "bodyHTML": "<p dir=\"auto\">Same as for <code>IpfixConverter</code>.</p>", "author": "fooker", "createdAt": "2020-03-10T09:51:00Z", "path": "features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow9/Netflow9Converter.java", "diffHunk": "@@ -31,14 +31,16 @@\n import java.util.Collections;\n import java.util.List;\n \n-import org.bson.BsonDocument;\n import org.opennms.netmgt.flows.api.Converter;\n import org.opennms.netmgt.flows.api.Flow;\n+import org.opennms.netmgt.telemetry.protocols.netflow.common.FlowMessage;\n+import org.opennms.netmgt.telemetry.protocols.netflow.adapter.common.FlowMapper;\n \n-public class Netflow9Converter implements Converter<BsonDocument> {\n+public class Netflow9Converter implements Converter<FlowMessage> {", "originalCommit": "628f488dd99abfee27aab31b69ba5a1409717e77", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b0e90f013c5b6948e960f7eb2d66870c3c84e12a", "changed_code": [{"header": "diff --git a/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow9/Netflow9Converter.java b/features/api-layer/src/main/java/org/opennms/features/apilayer/graph/GraphContainerCacheImpl.java\nsimilarity index 61%\nrename from features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow9/Netflow9Converter.java\nrename to features/api-layer/src/main/java/org/opennms/features/apilayer/graph/GraphContainerCacheImpl.java\nindex 1eff9808ca2..eac5ddf5fee 100644\n--- a/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow9/Netflow9Converter.java\n+++ b/features/api-layer/src/main/java/org/opennms/features/apilayer/graph/GraphContainerCacheImpl.java\n", "chunk": "@@ -26,21 +26,22 @@\n  *     http://www.opennms.com/\n  *******************************************************************************/\n \n-package org.opennms.netmgt.telemetry.protocols.netflow.adapter.netflow9;\n+package org.opennms.features.apilayer.graph;\n \n-import java.util.Collections;\n-import java.util.List;\n+import java.util.Objects;\n \n-import org.opennms.netmgt.flows.api.Converter;\n-import org.opennms.netmgt.flows.api.Flow;\n-import org.opennms.netmgt.telemetry.protocols.netflow.common.FlowMessage;\n-import org.opennms.netmgt.telemetry.protocols.netflow.adapter.common.FlowMapper;\n+import org.opennms.integration.api.v1.graph.GraphContainerCache;\n \n-public class Netflow9Converter implements Converter<FlowMessage> {\n+public class GraphContainerCacheImpl implements GraphContainerCache {\n \n-    @Override\n-    public List<Flow> convert(final FlowMessage packet) {\n-        return Collections.singletonList(FlowMapper.buildFlowFromProto(packet));\n+    private final org.opennms.netmgt.graph.api.service.GraphContainerCache delegate;\n+\n+    public GraphContainerCacheImpl(org.opennms.netmgt.graph.api.service.GraphContainerCache delegate) {\n+        this.delegate = Objects.requireNonNull(delegate);\n     }\n \n+    @Override\n+    public void invalidate(String containerId) {\n+        delegate.invalidate(containerId);\n+    }\n }\n", "next_change": null}]}, "revised_code_in_main": {"commit": "3352dcced0424e52de475b87840f05dff94fbec4", "changed_code": [{"header": "diff --git a/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow9/Netflow9Converter.java b/features/timeseries/src/test/java/org/opennms/netmgt/timeseries/integration/MockPersistenceSelectorStrategy.java\nsimilarity index 69%\nrename from features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow9/Netflow9Converter.java\nrename to features/timeseries/src/test/java/org/opennms/netmgt/timeseries/integration/MockPersistenceSelectorStrategy.java\nindex 1eff9808ca2..5cbb929f26f 100644\n--- a/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow9/Netflow9Converter.java\n+++ b/features/timeseries/src/test/java/org/opennms/netmgt/timeseries/integration/MockPersistenceSelectorStrategy.java\n", "chunk": "@@ -26,21 +26,24 @@\n  *     http://www.opennms.com/\n  *******************************************************************************/\n \n-package org.opennms.netmgt.telemetry.protocols.netflow.adapter.netflow9;\n+package org.opennms.netmgt.timeseries.integration;\n \n-import java.util.Collections;\n import java.util.List;\n \n-import org.opennms.netmgt.flows.api.Converter;\n-import org.opennms.netmgt.flows.api.Flow;\n-import org.opennms.netmgt.telemetry.protocols.netflow.common.FlowMessage;\n-import org.opennms.netmgt.telemetry.protocols.netflow.adapter.common.FlowMapper;\n+import org.opennms.netmgt.collection.api.CollectionResource;\n+import org.opennms.netmgt.collection.api.Parameter;\n+import org.opennms.netmgt.collection.api.PersistenceSelectorStrategy;\n \n-public class Netflow9Converter implements Converter<FlowMessage> {\n+public class MockPersistenceSelectorStrategy implements PersistenceSelectorStrategy {\n \n     @Override\n-    public List<Flow> convert(final FlowMessage packet) {\n-        return Collections.singletonList(FlowMapper.buildFlowFromProto(packet));\n+    public boolean shouldPersist(CollectionResource resource) {\n+        return false;\n+    }\n+\n+    @Override\n+    public void setParameters(List<Parameter> parameterCollection) {\n+        // pass\n     }\n \n }\n", "next_change": null}]}, "commits_in_main": [{"oid": "3352dcced0424e52de475b87840f05dff94fbec4", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE5OTI3MQ==", "url": "https://github.com/OpenNMS/opennms/pull/2903#discussion_r390199271", "body": "This can will be obsolete if `FlowMapper` will implement `Converter`", "bodyText": "This can will be obsolete if FlowMapper will implement Converter", "bodyHTML": "<p dir=\"auto\">This can will be obsolete if <code>FlowMapper</code> will implement <code>Converter</code></p>", "author": "fooker", "createdAt": "2020-03-10T09:51:47Z", "path": "features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/ipfix/IpfixConverter.java", "diffHunk": "@@ -31,14 +31,16 @@\n import java.util.Collections;\n import java.util.List;\n \n-import org.bson.BsonDocument;\n import org.opennms.netmgt.flows.api.Converter;\n import org.opennms.netmgt.flows.api.Flow;\n+import org.opennms.netmgt.telemetry.protocols.netflow.adapter.common.FlowMapper;\n+import org.opennms.netmgt.telemetry.protocols.netflow.common.FlowMessage;\n \n-public class IpfixConverter implements Converter<BsonDocument> {\n+public class IpfixConverter implements Converter<FlowMessage> {", "originalCommit": "628f488dd99abfee27aab31b69ba5a1409717e77", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b0e90f013c5b6948e960f7eb2d66870c3c84e12a", "changed_code": [{"header": "diff --git a/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/ipfix/IpfixConverter.java b/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/common/NetFlowConverter.java\nsimilarity index 69%\nrename from features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/ipfix/IpfixConverter.java\nrename to features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/common/NetFlowConverter.java\nindex 44dcc595556..b5722732b51 100644\n--- a/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/ipfix/IpfixConverter.java\n+++ b/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/common/NetFlowConverter.java\n", "chunk": "@@ -26,21 +26,19 @@\n  *     http://www.opennms.com/\n  *******************************************************************************/\n \n-package org.opennms.netmgt.telemetry.protocols.netflow.adapter.ipfix;\n+package org.opennms.netmgt.telemetry.protocols.netflow.adapter.common;\n \n import java.util.Collections;\n import java.util.List;\n \n import org.opennms.netmgt.flows.api.Converter;\n import org.opennms.netmgt.flows.api.Flow;\n-import org.opennms.netmgt.telemetry.protocols.netflow.adapter.common.FlowMapper;\n-import org.opennms.netmgt.telemetry.protocols.netflow.common.FlowMessage;\n+import org.opennms.netmgt.telemetry.protocols.netflow.transport.FlowMessage;\n \n-public class IpfixConverter implements Converter<FlowMessage> {\n+public class NetFlowConverter implements Converter<FlowMessage> {\n \n     @Override\n-    public List<Flow> convert(final FlowMessage packet) {\n-        return Collections.singletonList(FlowMapper.buildFlowFromProto(packet));\n+    public List<Flow> convert(FlowMessage packet) {\n+        return Collections.singletonList(new NetFlowMessage(packet));\n     }\n-\n }\n", "next_change": null}]}, "revised_code_in_main": {"commit": "3352dcced0424e52de475b87840f05dff94fbec4", "changed_code": [{"header": "diff --git a/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/ipfix/IpfixConverter.java b/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/common/NetflowConverter.java\nsimilarity index 69%\nrename from features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/ipfix/IpfixConverter.java\nrename to features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/common/NetflowConverter.java\nindex 44dcc595556..d5c4210bd07 100644\n--- a/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/ipfix/IpfixConverter.java\n+++ b/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/common/NetflowConverter.java\n", "chunk": "@@ -26,21 +26,19 @@\n  *     http://www.opennms.com/\n  *******************************************************************************/\n \n-package org.opennms.netmgt.telemetry.protocols.netflow.adapter.ipfix;\n+package org.opennms.netmgt.telemetry.protocols.netflow.adapter.common;\n \n import java.util.Collections;\n import java.util.List;\n \n import org.opennms.netmgt.flows.api.Converter;\n import org.opennms.netmgt.flows.api.Flow;\n-import org.opennms.netmgt.telemetry.protocols.netflow.adapter.common.FlowMapper;\n-import org.opennms.netmgt.telemetry.protocols.netflow.common.FlowMessage;\n+import org.opennms.netmgt.telemetry.protocols.netflow.transport.FlowMessage;\n \n-public class IpfixConverter implements Converter<FlowMessage> {\n+public class NetflowConverter implements Converter<FlowMessage> {\n \n     @Override\n-    public List<Flow> convert(final FlowMessage packet) {\n-        return Collections.singletonList(FlowMapper.buildFlowFromProto(packet));\n+    public List<Flow> convert(FlowMessage packet) {\n+        return Collections.singletonList(new NetflowMessage(packet));\n     }\n-\n }\n", "next_change": null}]}, "commits_in_main": [{"oid": "3352dcced0424e52de475b87840f05dff94fbec4", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIxMjQyNQ==", "url": "https://github.com/OpenNMS/opennms/pull/2903#discussion_r390212425", "body": "Can we move the `FlowMessageBuilder` implementations to the `parser` module and let the parser do the dispatch by an abstract method (something like `protected abstract FlowMessageProtoOrBuilder buildMessage(record, enrichment)`.\r\n\r\nIn addition, there are a couple of methods below, which still do BSON stuff. Are the still needed?", "bodyText": "Can we move the FlowMessageBuilder implementations to the parser module and let the parser do the dispatch by an abstract method (something like protected abstract FlowMessageProtoOrBuilder buildMessage(record, enrichment).\nIn addition, there are a couple of methods below, which still do BSON stuff. Are the still needed?", "bodyHTML": "<p dir=\"auto\">Can we move the <code>FlowMessageBuilder</code> implementations to the <code>parser</code> module and let the parser do the dispatch by an abstract method (something like <code>protected abstract FlowMessageProtoOrBuilder buildMessage(record, enrichment)</code>.</p>\n<p dir=\"auto\">In addition, there are a couple of methods below, which still do BSON stuff. Are the still needed?</p>", "author": "fooker", "createdAt": "2020-03-10T10:14:51Z", "path": "features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/ParserBase.java", "diffHunk": "@@ -259,13 +259,13 @@ public void setThreads(int threads) {\n                     // if we can't keep up\n                     final Runnable dispatch = () -> {\n                         // Let's serialize\n-                        final ByteBuffer buffer = serializeRecords(this.protocol, record, enrichment);\n+                        byte[] flowMessage = FlowMessageBuilderFactory.buildAndSerialize(this.protocol, record, enrichment);", "originalCommit": "628f488dd99abfee27aab31b69ba5a1409717e77", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b0e90f013c5b6948e960f7eb2d66870c3c84e12a", "changed_code": [{"header": "diff --git a/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/ParserBase.java b/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/ParserBase.java\nindex cc4c1df37e7..a79141e8045 100644\n--- a/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/ParserBase.java\n+++ b/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/ParserBase.java\n", "chunk": "@@ -259,7 +240,7 @@ public class ParserBase implements Parser {\n                     // if we can't keep up\n                     final Runnable dispatch = () -> {\n                         // Let's serialize\n-                        byte[] flowMessage = FlowMessageBuilderFactory.buildAndSerialize(this.protocol, record, enrichment);\n+                        byte[] flowMessage = buildMessage(record, enrichment);\n \n                         // Build the message to dispatch\n                         final TelemetryMessage msg = new TelemetryMessage(remoteAddress, ByteBuffer.wrap(flowMessage));\n", "next_change": null}]}, "revised_code_in_main": {"commit": "3352dcced0424e52de475b87840f05dff94fbec4", "changed_code": [{"header": "diff --git a/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/ParserBase.java b/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/ParserBase.java\nindex cc4c1df37e7..a79141e8045 100644\n--- a/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/ParserBase.java\n+++ b/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/ParserBase.java\n", "chunk": "@@ -259,7 +240,7 @@ public class ParserBase implements Parser {\n                     // if we can't keep up\n                     final Runnable dispatch = () -> {\n                         // Let's serialize\n-                        byte[] flowMessage = FlowMessageBuilderFactory.buildAndSerialize(this.protocol, record, enrichment);\n+                        byte[] flowMessage = buildMessage(record, enrichment);\n \n                         // Build the message to dispatch\n                         final TelemetryMessage msg = new TelemetryMessage(remoteAddress, ByteBuffer.wrap(flowMessage));\n", "next_change": {"commit": "f34d1195ea7ca3d51a5d3f0b4e7d149ef20c3f3e", "changed_code": [{"header": "diff --git a/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/ParserBase.java b/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/ParserBase.java\nindex a79141e8045..900a0eb363d 100644\n--- a/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/ParserBase.java\n+++ b/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/ParserBase.java\n", "chunk": "@@ -240,7 +265,33 @@ public abstract class ParserBase implements Parser {\n                     // if we can't keep up\n                     final Runnable dispatch = () -> {\n                         // Let's serialize\n-                        byte[] flowMessage = buildMessage(record, enrichment);\n+                        byte[] flowMessage = new byte[0];\n+                        try {\n+                            flowMessage = buildMessage(record, enrichment);\n+                        } catch (IllegalFlowException e) {\n+                            final Optional<Instant> instant = illegalFlowEventCache.getUnchecked(remoteAddress.getAddress());\n+\n+                            if (!instant.isPresent() || Duration.between(instant.get(), Instant.now()).getSeconds() > getIllegalFlowEventRate()) {\n+                                illegalFlowEventCache.put(remoteAddress.getAddress(), Optional.of(Instant.now()));\n+\n+                                eventForwarder.sendNow(new EventBuilder()\n+                                        .setUei(ILLEGAL_FLOW_EVENT_UEI)\n+                                        .setTime(new Date())\n+                                        .setSource(getName())\n+                                        .setInterface(remoteAddress.getAddress())\n+                                        .setDistPoller(identity.getId())\n+                                        .addParam(\"monitoringSystemId\", identity.getId())\n+                                        .addParam(\"monitoringSystemLocation\", identity.getLocation())\n+                                        .setParam(\"cause\", e.getMessage())\n+                                        .setParam(\"protocol\", protocol.name())\n+                                        .setParam(\"illegalFlowEventRate\", (int) getIllegalFlowEventRate())\n+                                        .getEvent());\n+\n+                                LOG.warn(\"Illegal flow detected from exporter {}\", remoteAddress.getAddress(), e);\n+                            }\n+\n+                            return;\n+                        }\n \n                         // Build the message to dispatch\n                         final TelemetryMessage msg = new TelemetryMessage(remoteAddress, ByteBuffer.wrap(flowMessage));\n", "next_change": {"commit": "d90a2570f8e740c13734c89f3e2cdafc7dd8e755", "changed_code": [{"header": "diff --git a/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/ParserBase.java b/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/ParserBase.java\nindex 900a0eb363d..a41e283a7d7 100644\n--- a/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/ParserBase.java\n+++ b/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/ParserBase.java\n", "chunk": "@@ -299,10 +324,12 @@ public abstract class ParserBase implements Parser {\n                         // Dispatch\n                         dispatcher.send(msg).whenComplete((b, exx) -> {\n                             if (exx != null) {\n+                                this.recordDispatchErrors.inc();\n                                 future.completeExceptionally(exx);\n-                                return;\n+                            } else {\n+                                this.recordsCompleted.mark();\n+                                future.complete(b);\n                             }\n-                            future.complete(b);\n                         });\n \n                         recordsDispatched.mark();\n", "next_change": {"commit": "593fe342be2ef4f886dcb16c10c168e8965f8ce3", "changed_code": [{"header": "diff --git a/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/ParserBase.java b/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/ParserBase.java\nindex a41e283a7d7..3b7858a92b8 100644\n--- a/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/ParserBase.java\n+++ b/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/ParserBase.java\n", "chunk": "@@ -328,7 +328,7 @@ public abstract class ParserBase implements Parser {\n                                 future.completeExceptionally(exx);\n                             } else {\n                                 this.recordsCompleted.mark();\n-                                future.complete(b);\n+                                future.complete(null);\n                             }\n                         });\n \n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "3352dcced0424e52de475b87840f05dff94fbec4", "message": "Merge commit", "committedDate": null}, {"oid": "9c9cc63319854d48431fe2690a62939c19ab09e1", "committedDate": "2020-05-20 10:04:29 -0400", "message": "NMS-12724: Optimize queuing for throughput."}, {"oid": "f34d1195ea7ca3d51a5d3f0b4e7d149ef20c3f3e", "committedDate": "2020-10-08 07:28:32 +0200", "message": "NMS-12800: Drop flows with negative duration"}, {"oid": "d90a2570f8e740c13734c89f3e2cdafc7dd8e755", "committedDate": "2020-11-30 11:23:08 +0100", "message": "NMS-12973: Add instrumentation for flow receiver"}, {"oid": "593fe342be2ef4f886dcb16c10c168e8965f8ce3", "committedDate": "2020-11-30 11:23:08 +0100", "message": "NMS-12973: Fix memory leak for illegal flow handling"}, {"oid": "a57dcccf00db8f5129ca27c63fbfbbe5638bed79", "committedDate": "2020-11-30 11:23:08 +0100", "message": "NMS-12973: Check flows are in sequence"}, {"oid": "079c5ace3c3199fbd7333943767c8754755bda2c", "committedDate": "2020-11-30 12:11:16 +0100", "message": "NMS-12973: Add instrumentation for flow receiver"}, {"oid": "7dcfa4927ebf40e48a1f62ad6837f9cb99ea57e6", "committedDate": "2021-01-15 11:20:53 +0100", "message": "NMS-13088: Adapt invalid flows instead of dropping (#3261)"}, {"oid": "6c9f456a216163b107f586370676e02be58adb0b", "committedDate": "2021-02-04 10:31:42 +0100", "message": "NMS-13106: Configureable flow sequence tracking"}, {"oid": "bfccf974f7792fa1d64b785b2f713050e6071928", "committedDate": "2021-04-07 15:47:12 +0200", "message": "NMS-13215: Fallback config for flow timeouts"}, {"oid": "5a9998531ac8e748bf0b5a787e81baae30563ead", "committedDate": "2021-07-05 11:07:27 +0200", "message": "NMS-13346: Add commands to examine telemetryd"}, {"oid": "891392f3703d888769bad2990fec27455de669af", "committedDate": "2021-07-12 22:46:42 -0400", "message": "Revert \"NMS-13346: Add commands to examine telemetryd\""}, {"oid": "8b3895e87a51be523baea04fcc2a164c38de571d", "committedDate": "2021-07-13 13:52:39 +0200", "message": "NMS-13346: Add commands to examine telemetryd"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIxMjgzNA==", "url": "https://github.com/OpenNMS/opennms/pull/2903#discussion_r390212834", "body": "This dispatching should be done in the parsers...", "bodyText": "This dispatching should be done in the parsers...", "bodyHTML": "<p dir=\"auto\">This dispatching should be done in the parsers...</p>", "author": "fooker", "createdAt": "2020-03-10T10:15:39Z", "path": "features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/FlowMessageBuilderFactory.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+\n+package org.opennms.netmgt.telemetry.protocols.netflow.parser.transport;\n+\n+import java.net.InetAddress;\n+import java.time.Instant;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.Protocol;\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.RecordEnrichment;\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.ie.Value;\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.ie.values.BooleanValue;\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.ie.values.DateTimeValue;\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.ie.values.IPv4AddressValue;\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.ie.values.IPv6AddressValue;\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.ie.values.UnsignedValue;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.primitives.UnsignedLong;\n+import com.google.protobuf.DoubleValue;\n+import com.google.protobuf.UInt32Value;\n+import com.google.protobuf.UInt64Value;\n+\n+public class FlowMessageBuilderFactory {\n+\n+    public static byte[] buildAndSerialize(Protocol protocol, Iterable<Value<?>> record, RecordEnrichment enrichment) {", "originalCommit": "628f488dd99abfee27aab31b69ba5a1409717e77", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b0e90f013c5b6948e960f7eb2d66870c3c84e12a", "changed_code": [{"header": "diff --git a/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/FlowMessageBuilderFactory.java b/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/MessageUtils.java\nsimilarity index 67%\nrename from features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/FlowMessageBuilderFactory.java\nrename to features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/MessageUtils.java\nindex e94008094e1..816d7901773 100644\n--- a/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/FlowMessageBuilderFactory.java\n+++ b/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/MessageUtils.java\n", "chunk": "@@ -43,50 +41,13 @@ import org.opennms.netmgt.telemetry.protocols.netflow.parser.ie.values.IPv4Addre\n import org.opennms.netmgt.telemetry.protocols.netflow.parser.ie.values.IPv6AddressValue;\n import org.opennms.netmgt.telemetry.protocols.netflow.parser.ie.values.UnsignedValue;\n \n-import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Strings;\n import com.google.common.primitives.UnsignedLong;\n import com.google.protobuf.DoubleValue;\n import com.google.protobuf.UInt32Value;\n import com.google.protobuf.UInt64Value;\n \n-public class FlowMessageBuilderFactory {\n-\n-    public static byte[] buildAndSerialize(Protocol protocol, Iterable<Value<?>> record, RecordEnrichment enrichment) {\n-        if (protocol.equals(Protocol.NETFLOW5)) {\n-            Netflow5MessageBuilder builder = new Netflow5MessageBuilder(record, enrichment);\n-            return builder.buildData();\n-        } else if (protocol.equals(Protocol.NETFLOW9)) {\n-            NetFlow9MessageBuilder builder = new NetFlow9MessageBuilder(record, enrichment);\n-            return builder.buildData();\n-        } else if (protocol.equals(Protocol.IPFIX)) {\n-            IpFixMessageBuilder builder = new IpFixMessageBuilder(record, enrichment);\n-            return builder.buildData();\n-        } else {\n-            throw new RuntimeException(\"Unknown netflow Protocol\");\n-        }\n-    }\n-\n-    @VisibleForTesting\n-    public static byte[] buildAndSerialize(Protocol protocol, Iterable<Value<?>> record) {\n-        RecordEnrichment enrichment = new RecordEnrichment() {\n-            @Override\n-            public Optional<String> getHostnameFor(InetAddress srcAddress) {\n-                return Optional.empty();\n-            }\n-        };\n-        if (protocol.equals(Protocol.NETFLOW5)) {\n-            Netflow5MessageBuilder builder = new Netflow5MessageBuilder(record, enrichment);\n-            return builder.buildData();\n-        } else if (protocol.equals(Protocol.NETFLOW9)) {\n-            NetFlow9MessageBuilder builder = new NetFlow9MessageBuilder(record, enrichment);\n-            return builder.buildData();\n-        } else if (protocol.equals(Protocol.IPFIX)) {\n-            IpFixMessageBuilder builder = new IpFixMessageBuilder(record, enrichment);\n-            return builder.buildData();\n-        }\n-        return null;\n-    }\n-\n+public class MessageUtils {\n \n     static Long getLongValue(Value<?> value) {\n         if (value instanceof UnsignedValue) {\n", "next_change": null}]}, "revised_code_in_main": {"commit": "3352dcced0424e52de475b87840f05dff94fbec4", "changed_code": [{"header": "diff --git a/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/FlowMessageBuilderFactory.java b/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/MessageUtils.java\nsimilarity index 61%\nrename from features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/FlowMessageBuilderFactory.java\nrename to features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/MessageUtils.java\nindex e94008094e1..00efb4fce2f 100644\n--- a/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/FlowMessageBuilderFactory.java\n+++ b/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/MessageUtils.java\n", "chunk": "@@ -43,50 +41,13 @@ import org.opennms.netmgt.telemetry.protocols.netflow.parser.ie.values.IPv4Addre\n import org.opennms.netmgt.telemetry.protocols.netflow.parser.ie.values.IPv6AddressValue;\n import org.opennms.netmgt.telemetry.protocols.netflow.parser.ie.values.UnsignedValue;\n \n-import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Strings;\n import com.google.common.primitives.UnsignedLong;\n import com.google.protobuf.DoubleValue;\n import com.google.protobuf.UInt32Value;\n import com.google.protobuf.UInt64Value;\n \n-public class FlowMessageBuilderFactory {\n-\n-    public static byte[] buildAndSerialize(Protocol protocol, Iterable<Value<?>> record, RecordEnrichment enrichment) {\n-        if (protocol.equals(Protocol.NETFLOW5)) {\n-            Netflow5MessageBuilder builder = new Netflow5MessageBuilder(record, enrichment);\n-            return builder.buildData();\n-        } else if (protocol.equals(Protocol.NETFLOW9)) {\n-            NetFlow9MessageBuilder builder = new NetFlow9MessageBuilder(record, enrichment);\n-            return builder.buildData();\n-        } else if (protocol.equals(Protocol.IPFIX)) {\n-            IpFixMessageBuilder builder = new IpFixMessageBuilder(record, enrichment);\n-            return builder.buildData();\n-        } else {\n-            throw new RuntimeException(\"Unknown netflow Protocol\");\n-        }\n-    }\n-\n-    @VisibleForTesting\n-    public static byte[] buildAndSerialize(Protocol protocol, Iterable<Value<?>> record) {\n-        RecordEnrichment enrichment = new RecordEnrichment() {\n-            @Override\n-            public Optional<String> getHostnameFor(InetAddress srcAddress) {\n-                return Optional.empty();\n-            }\n-        };\n-        if (protocol.equals(Protocol.NETFLOW5)) {\n-            Netflow5MessageBuilder builder = new Netflow5MessageBuilder(record, enrichment);\n-            return builder.buildData();\n-        } else if (protocol.equals(Protocol.NETFLOW9)) {\n-            NetFlow9MessageBuilder builder = new NetFlow9MessageBuilder(record, enrichment);\n-            return builder.buildData();\n-        } else if (protocol.equals(Protocol.IPFIX)) {\n-            IpFixMessageBuilder builder = new IpFixMessageBuilder(record, enrichment);\n-            return builder.buildData();\n-        }\n-        return null;\n-    }\n-\n+public class MessageUtils {\n \n     static Long getLongValue(Value<?> value) {\n         if (value instanceof UnsignedValue) {\n", "next_change": null}]}, "commits_in_main": [{"oid": "3352dcced0424e52de475b87840f05dff94fbec4", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIxMzczOQ==", "url": "https://github.com/OpenNMS/opennms/pull/2903#discussion_r390213739", "body": "Is this really required? The simple no-op `RecordEnrichement` implementation can be moved to the tests and the original method can be called instead.", "bodyText": "Is this really required? The simple no-op RecordEnrichement implementation can be moved to the tests and the original method can be called instead.", "bodyHTML": "<p dir=\"auto\">Is this really required? The simple no-op <code>RecordEnrichement</code> implementation can be moved to the tests and the original method can be called instead.</p>", "author": "fooker", "createdAt": "2020-03-10T10:17:13Z", "path": "features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/FlowMessageBuilderFactory.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+\n+package org.opennms.netmgt.telemetry.protocols.netflow.parser.transport;\n+\n+import java.net.InetAddress;\n+import java.time.Instant;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.Protocol;\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.RecordEnrichment;\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.ie.Value;\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.ie.values.BooleanValue;\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.ie.values.DateTimeValue;\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.ie.values.IPv4AddressValue;\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.ie.values.IPv6AddressValue;\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.ie.values.UnsignedValue;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.primitives.UnsignedLong;\n+import com.google.protobuf.DoubleValue;\n+import com.google.protobuf.UInt32Value;\n+import com.google.protobuf.UInt64Value;\n+\n+public class FlowMessageBuilderFactory {\n+\n+    public static byte[] buildAndSerialize(Protocol protocol, Iterable<Value<?>> record, RecordEnrichment enrichment) {\n+        if (protocol.equals(Protocol.NETFLOW5)) {\n+            Netflow5MessageBuilder builder = new Netflow5MessageBuilder(record, enrichment);\n+            return builder.buildData();\n+        } else if (protocol.equals(Protocol.NETFLOW9)) {\n+            NetFlow9MessageBuilder builder = new NetFlow9MessageBuilder(record, enrichment);\n+            return builder.buildData();\n+        } else if (protocol.equals(Protocol.IPFIX)) {\n+            IpFixMessageBuilder builder = new IpFixMessageBuilder(record, enrichment);\n+            return builder.buildData();\n+        } else {\n+            throw new RuntimeException(\"Unknown netflow Protocol\");\n+        }\n+    }\n+\n+    @VisibleForTesting\n+    public static byte[] buildAndSerialize(Protocol protocol, Iterable<Value<?>> record) {", "originalCommit": "628f488dd99abfee27aab31b69ba5a1409717e77", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b0e90f013c5b6948e960f7eb2d66870c3c84e12a", "changed_code": [{"header": "diff --git a/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/FlowMessageBuilderFactory.java b/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/MessageUtils.java\nsimilarity index 67%\nrename from features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/FlowMessageBuilderFactory.java\nrename to features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/MessageUtils.java\nindex e94008094e1..816d7901773 100644\n--- a/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/FlowMessageBuilderFactory.java\n+++ b/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/MessageUtils.java\n", "chunk": "@@ -43,50 +41,13 @@ import org.opennms.netmgt.telemetry.protocols.netflow.parser.ie.values.IPv4Addre\n import org.opennms.netmgt.telemetry.protocols.netflow.parser.ie.values.IPv6AddressValue;\n import org.opennms.netmgt.telemetry.protocols.netflow.parser.ie.values.UnsignedValue;\n \n-import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Strings;\n import com.google.common.primitives.UnsignedLong;\n import com.google.protobuf.DoubleValue;\n import com.google.protobuf.UInt32Value;\n import com.google.protobuf.UInt64Value;\n \n-public class FlowMessageBuilderFactory {\n-\n-    public static byte[] buildAndSerialize(Protocol protocol, Iterable<Value<?>> record, RecordEnrichment enrichment) {\n-        if (protocol.equals(Protocol.NETFLOW5)) {\n-            Netflow5MessageBuilder builder = new Netflow5MessageBuilder(record, enrichment);\n-            return builder.buildData();\n-        } else if (protocol.equals(Protocol.NETFLOW9)) {\n-            NetFlow9MessageBuilder builder = new NetFlow9MessageBuilder(record, enrichment);\n-            return builder.buildData();\n-        } else if (protocol.equals(Protocol.IPFIX)) {\n-            IpFixMessageBuilder builder = new IpFixMessageBuilder(record, enrichment);\n-            return builder.buildData();\n-        } else {\n-            throw new RuntimeException(\"Unknown netflow Protocol\");\n-        }\n-    }\n-\n-    @VisibleForTesting\n-    public static byte[] buildAndSerialize(Protocol protocol, Iterable<Value<?>> record) {\n-        RecordEnrichment enrichment = new RecordEnrichment() {\n-            @Override\n-            public Optional<String> getHostnameFor(InetAddress srcAddress) {\n-                return Optional.empty();\n-            }\n-        };\n-        if (protocol.equals(Protocol.NETFLOW5)) {\n-            Netflow5MessageBuilder builder = new Netflow5MessageBuilder(record, enrichment);\n-            return builder.buildData();\n-        } else if (protocol.equals(Protocol.NETFLOW9)) {\n-            NetFlow9MessageBuilder builder = new NetFlow9MessageBuilder(record, enrichment);\n-            return builder.buildData();\n-        } else if (protocol.equals(Protocol.IPFIX)) {\n-            IpFixMessageBuilder builder = new IpFixMessageBuilder(record, enrichment);\n-            return builder.buildData();\n-        }\n-        return null;\n-    }\n-\n+public class MessageUtils {\n \n     static Long getLongValue(Value<?> value) {\n         if (value instanceof UnsignedValue) {\n", "next_change": null}]}, "revised_code_in_main": {"commit": "3352dcced0424e52de475b87840f05dff94fbec4", "changed_code": [{"header": "diff --git a/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/FlowMessageBuilderFactory.java b/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/MessageUtils.java\nsimilarity index 61%\nrename from features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/FlowMessageBuilderFactory.java\nrename to features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/MessageUtils.java\nindex e94008094e1..00efb4fce2f 100644\n--- a/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/FlowMessageBuilderFactory.java\n+++ b/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/MessageUtils.java\n", "chunk": "@@ -43,50 +41,13 @@ import org.opennms.netmgt.telemetry.protocols.netflow.parser.ie.values.IPv4Addre\n import org.opennms.netmgt.telemetry.protocols.netflow.parser.ie.values.IPv6AddressValue;\n import org.opennms.netmgt.telemetry.protocols.netflow.parser.ie.values.UnsignedValue;\n \n-import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Strings;\n import com.google.common.primitives.UnsignedLong;\n import com.google.protobuf.DoubleValue;\n import com.google.protobuf.UInt32Value;\n import com.google.protobuf.UInt64Value;\n \n-public class FlowMessageBuilderFactory {\n-\n-    public static byte[] buildAndSerialize(Protocol protocol, Iterable<Value<?>> record, RecordEnrichment enrichment) {\n-        if (protocol.equals(Protocol.NETFLOW5)) {\n-            Netflow5MessageBuilder builder = new Netflow5MessageBuilder(record, enrichment);\n-            return builder.buildData();\n-        } else if (protocol.equals(Protocol.NETFLOW9)) {\n-            NetFlow9MessageBuilder builder = new NetFlow9MessageBuilder(record, enrichment);\n-            return builder.buildData();\n-        } else if (protocol.equals(Protocol.IPFIX)) {\n-            IpFixMessageBuilder builder = new IpFixMessageBuilder(record, enrichment);\n-            return builder.buildData();\n-        } else {\n-            throw new RuntimeException(\"Unknown netflow Protocol\");\n-        }\n-    }\n-\n-    @VisibleForTesting\n-    public static byte[] buildAndSerialize(Protocol protocol, Iterable<Value<?>> record) {\n-        RecordEnrichment enrichment = new RecordEnrichment() {\n-            @Override\n-            public Optional<String> getHostnameFor(InetAddress srcAddress) {\n-                return Optional.empty();\n-            }\n-        };\n-        if (protocol.equals(Protocol.NETFLOW5)) {\n-            Netflow5MessageBuilder builder = new Netflow5MessageBuilder(record, enrichment);\n-            return builder.buildData();\n-        } else if (protocol.equals(Protocol.NETFLOW9)) {\n-            NetFlow9MessageBuilder builder = new NetFlow9MessageBuilder(record, enrichment);\n-            return builder.buildData();\n-        } else if (protocol.equals(Protocol.IPFIX)) {\n-            IpFixMessageBuilder builder = new IpFixMessageBuilder(record, enrichment);\n-            return builder.buildData();\n-        }\n-        return null;\n-    }\n-\n+public class MessageUtils {\n \n     static Long getLongValue(Value<?> value) {\n         if (value instanceof UnsignedValue) {\n", "next_change": null}]}, "commits_in_main": [{"oid": "3352dcced0424e52de475b87840f05dff94fbec4", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIyMTUxMg==", "url": "https://github.com/OpenNMS/opennms/pull/2903#discussion_r390221512", "body": "I'm not sure about this one. I would prefer to use the `Value`s visitor instead of `instanceof`.", "bodyText": "I'm not sure about this one. I would prefer to use the Values visitor instead of instanceof.", "bodyHTML": "<p dir=\"auto\">I'm not sure about this one. I would prefer to use the <code>Value</code>s visitor instead of <code>instanceof</code>.</p>", "author": "fooker", "createdAt": "2020-03-10T10:31:24Z", "path": "features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/FlowMessageBuilderFactory.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+\n+package org.opennms.netmgt.telemetry.protocols.netflow.parser.transport;\n+\n+import java.net.InetAddress;\n+import java.time.Instant;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.Protocol;\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.RecordEnrichment;\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.ie.Value;\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.ie.values.BooleanValue;\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.ie.values.DateTimeValue;\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.ie.values.IPv4AddressValue;\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.ie.values.IPv6AddressValue;\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.ie.values.UnsignedValue;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.primitives.UnsignedLong;\n+import com.google.protobuf.DoubleValue;\n+import com.google.protobuf.UInt32Value;\n+import com.google.protobuf.UInt64Value;\n+\n+public class FlowMessageBuilderFactory {\n+\n+    public static byte[] buildAndSerialize(Protocol protocol, Iterable<Value<?>> record, RecordEnrichment enrichment) {\n+        if (protocol.equals(Protocol.NETFLOW5)) {\n+            Netflow5MessageBuilder builder = new Netflow5MessageBuilder(record, enrichment);\n+            return builder.buildData();\n+        } else if (protocol.equals(Protocol.NETFLOW9)) {\n+            NetFlow9MessageBuilder builder = new NetFlow9MessageBuilder(record, enrichment);\n+            return builder.buildData();\n+        } else if (protocol.equals(Protocol.IPFIX)) {\n+            IpFixMessageBuilder builder = new IpFixMessageBuilder(record, enrichment);\n+            return builder.buildData();\n+        } else {\n+            throw new RuntimeException(\"Unknown netflow Protocol\");\n+        }\n+    }\n+\n+    @VisibleForTesting\n+    public static byte[] buildAndSerialize(Protocol protocol, Iterable<Value<?>> record) {\n+        RecordEnrichment enrichment = new RecordEnrichment() {\n+            @Override\n+            public Optional<String> getHostnameFor(InetAddress srcAddress) {\n+                return Optional.empty();\n+            }\n+        };\n+        if (protocol.equals(Protocol.NETFLOW5)) {\n+            Netflow5MessageBuilder builder = new Netflow5MessageBuilder(record, enrichment);\n+            return builder.buildData();\n+        } else if (protocol.equals(Protocol.NETFLOW9)) {\n+            NetFlow9MessageBuilder builder = new NetFlow9MessageBuilder(record, enrichment);\n+            return builder.buildData();\n+        } else if (protocol.equals(Protocol.IPFIX)) {\n+            IpFixMessageBuilder builder = new IpFixMessageBuilder(record, enrichment);\n+            return builder.buildData();\n+        }\n+        return null;\n+    }\n+\n+\n+    static Long getLongValue(Value<?> value) {\n+        if (value instanceof UnsignedValue) {", "originalCommit": "628f488dd99abfee27aab31b69ba5a1409717e77", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b0e90f013c5b6948e960f7eb2d66870c3c84e12a", "changed_code": [{"header": "diff --git a/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/FlowMessageBuilderFactory.java b/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/MessageUtils.java\nsimilarity index 67%\nrename from features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/FlowMessageBuilderFactory.java\nrename to features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/MessageUtils.java\nindex e94008094e1..816d7901773 100644\n--- a/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/FlowMessageBuilderFactory.java\n+++ b/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/MessageUtils.java\n", "chunk": "@@ -43,50 +41,13 @@ import org.opennms.netmgt.telemetry.protocols.netflow.parser.ie.values.IPv4Addre\n import org.opennms.netmgt.telemetry.protocols.netflow.parser.ie.values.IPv6AddressValue;\n import org.opennms.netmgt.telemetry.protocols.netflow.parser.ie.values.UnsignedValue;\n \n-import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Strings;\n import com.google.common.primitives.UnsignedLong;\n import com.google.protobuf.DoubleValue;\n import com.google.protobuf.UInt32Value;\n import com.google.protobuf.UInt64Value;\n \n-public class FlowMessageBuilderFactory {\n-\n-    public static byte[] buildAndSerialize(Protocol protocol, Iterable<Value<?>> record, RecordEnrichment enrichment) {\n-        if (protocol.equals(Protocol.NETFLOW5)) {\n-            Netflow5MessageBuilder builder = new Netflow5MessageBuilder(record, enrichment);\n-            return builder.buildData();\n-        } else if (protocol.equals(Protocol.NETFLOW9)) {\n-            NetFlow9MessageBuilder builder = new NetFlow9MessageBuilder(record, enrichment);\n-            return builder.buildData();\n-        } else if (protocol.equals(Protocol.IPFIX)) {\n-            IpFixMessageBuilder builder = new IpFixMessageBuilder(record, enrichment);\n-            return builder.buildData();\n-        } else {\n-            throw new RuntimeException(\"Unknown netflow Protocol\");\n-        }\n-    }\n-\n-    @VisibleForTesting\n-    public static byte[] buildAndSerialize(Protocol protocol, Iterable<Value<?>> record) {\n-        RecordEnrichment enrichment = new RecordEnrichment() {\n-            @Override\n-            public Optional<String> getHostnameFor(InetAddress srcAddress) {\n-                return Optional.empty();\n-            }\n-        };\n-        if (protocol.equals(Protocol.NETFLOW5)) {\n-            Netflow5MessageBuilder builder = new Netflow5MessageBuilder(record, enrichment);\n-            return builder.buildData();\n-        } else if (protocol.equals(Protocol.NETFLOW9)) {\n-            NetFlow9MessageBuilder builder = new NetFlow9MessageBuilder(record, enrichment);\n-            return builder.buildData();\n-        } else if (protocol.equals(Protocol.IPFIX)) {\n-            IpFixMessageBuilder builder = new IpFixMessageBuilder(record, enrichment);\n-            return builder.buildData();\n-        }\n-        return null;\n-    }\n-\n+public class MessageUtils {\n \n     static Long getLongValue(Value<?> value) {\n         if (value instanceof UnsignedValue) {\n", "next_change": null}]}, "revised_code_in_main": {"commit": "3352dcced0424e52de475b87840f05dff94fbec4", "changed_code": [{"header": "diff --git a/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/FlowMessageBuilderFactory.java b/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/MessageUtils.java\nsimilarity index 61%\nrename from features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/FlowMessageBuilderFactory.java\nrename to features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/MessageUtils.java\nindex e94008094e1..00efb4fce2f 100644\n--- a/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/FlowMessageBuilderFactory.java\n+++ b/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/MessageUtils.java\n", "chunk": "@@ -43,50 +41,13 @@ import org.opennms.netmgt.telemetry.protocols.netflow.parser.ie.values.IPv4Addre\n import org.opennms.netmgt.telemetry.protocols.netflow.parser.ie.values.IPv6AddressValue;\n import org.opennms.netmgt.telemetry.protocols.netflow.parser.ie.values.UnsignedValue;\n \n-import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Strings;\n import com.google.common.primitives.UnsignedLong;\n import com.google.protobuf.DoubleValue;\n import com.google.protobuf.UInt32Value;\n import com.google.protobuf.UInt64Value;\n \n-public class FlowMessageBuilderFactory {\n-\n-    public static byte[] buildAndSerialize(Protocol protocol, Iterable<Value<?>> record, RecordEnrichment enrichment) {\n-        if (protocol.equals(Protocol.NETFLOW5)) {\n-            Netflow5MessageBuilder builder = new Netflow5MessageBuilder(record, enrichment);\n-            return builder.buildData();\n-        } else if (protocol.equals(Protocol.NETFLOW9)) {\n-            NetFlow9MessageBuilder builder = new NetFlow9MessageBuilder(record, enrichment);\n-            return builder.buildData();\n-        } else if (protocol.equals(Protocol.IPFIX)) {\n-            IpFixMessageBuilder builder = new IpFixMessageBuilder(record, enrichment);\n-            return builder.buildData();\n-        } else {\n-            throw new RuntimeException(\"Unknown netflow Protocol\");\n-        }\n-    }\n-\n-    @VisibleForTesting\n-    public static byte[] buildAndSerialize(Protocol protocol, Iterable<Value<?>> record) {\n-        RecordEnrichment enrichment = new RecordEnrichment() {\n-            @Override\n-            public Optional<String> getHostnameFor(InetAddress srcAddress) {\n-                return Optional.empty();\n-            }\n-        };\n-        if (protocol.equals(Protocol.NETFLOW5)) {\n-            Netflow5MessageBuilder builder = new Netflow5MessageBuilder(record, enrichment);\n-            return builder.buildData();\n-        } else if (protocol.equals(Protocol.NETFLOW9)) {\n-            NetFlow9MessageBuilder builder = new NetFlow9MessageBuilder(record, enrichment);\n-            return builder.buildData();\n-        } else if (protocol.equals(Protocol.IPFIX)) {\n-            IpFixMessageBuilder builder = new IpFixMessageBuilder(record, enrichment);\n-            return builder.buildData();\n-        }\n-        return null;\n-    }\n-\n+public class MessageUtils {\n \n     static Long getLongValue(Value<?> value) {\n         if (value instanceof UnsignedValue) {\n", "next_change": null}]}, "commits_in_main": [{"oid": "3352dcced0424e52de475b87840f05dff94fbec4", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIyMTYwNg==", "url": "https://github.com/OpenNMS/opennms/pull/2903#discussion_r390221606", "body": "Maybe this should return Optional instead of a hard coded default.", "bodyText": "Maybe this should return Optional instead of a hard coded default.", "bodyHTML": "<p dir=\"auto\">Maybe this should return Optional instead of a hard coded default.</p>", "author": "fooker", "createdAt": "2020-03-10T10:31:33Z", "path": "features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/FlowMessageBuilderFactory.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+\n+package org.opennms.netmgt.telemetry.protocols.netflow.parser.transport;\n+\n+import java.net.InetAddress;\n+import java.time.Instant;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.Protocol;\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.RecordEnrichment;\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.ie.Value;\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.ie.values.BooleanValue;\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.ie.values.DateTimeValue;\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.ie.values.IPv4AddressValue;\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.ie.values.IPv6AddressValue;\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.ie.values.UnsignedValue;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.primitives.UnsignedLong;\n+import com.google.protobuf.DoubleValue;\n+import com.google.protobuf.UInt32Value;\n+import com.google.protobuf.UInt64Value;\n+\n+public class FlowMessageBuilderFactory {\n+\n+    public static byte[] buildAndSerialize(Protocol protocol, Iterable<Value<?>> record, RecordEnrichment enrichment) {\n+        if (protocol.equals(Protocol.NETFLOW5)) {\n+            Netflow5MessageBuilder builder = new Netflow5MessageBuilder(record, enrichment);\n+            return builder.buildData();\n+        } else if (protocol.equals(Protocol.NETFLOW9)) {\n+            NetFlow9MessageBuilder builder = new NetFlow9MessageBuilder(record, enrichment);\n+            return builder.buildData();\n+        } else if (protocol.equals(Protocol.IPFIX)) {\n+            IpFixMessageBuilder builder = new IpFixMessageBuilder(record, enrichment);\n+            return builder.buildData();\n+        } else {\n+            throw new RuntimeException(\"Unknown netflow Protocol\");\n+        }\n+    }\n+\n+    @VisibleForTesting\n+    public static byte[] buildAndSerialize(Protocol protocol, Iterable<Value<?>> record) {\n+        RecordEnrichment enrichment = new RecordEnrichment() {\n+            @Override\n+            public Optional<String> getHostnameFor(InetAddress srcAddress) {\n+                return Optional.empty();\n+            }\n+        };\n+        if (protocol.equals(Protocol.NETFLOW5)) {\n+            Netflow5MessageBuilder builder = new Netflow5MessageBuilder(record, enrichment);\n+            return builder.buildData();\n+        } else if (protocol.equals(Protocol.NETFLOW9)) {\n+            NetFlow9MessageBuilder builder = new NetFlow9MessageBuilder(record, enrichment);\n+            return builder.buildData();\n+        } else if (protocol.equals(Protocol.IPFIX)) {\n+            IpFixMessageBuilder builder = new IpFixMessageBuilder(record, enrichment);\n+            return builder.buildData();\n+        }\n+        return null;\n+    }\n+\n+\n+    static Long getLongValue(Value<?> value) {", "originalCommit": "628f488dd99abfee27aab31b69ba5a1409717e77", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b0e90f013c5b6948e960f7eb2d66870c3c84e12a", "changed_code": [{"header": "diff --git a/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/FlowMessageBuilderFactory.java b/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/MessageUtils.java\nsimilarity index 67%\nrename from features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/FlowMessageBuilderFactory.java\nrename to features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/MessageUtils.java\nindex e94008094e1..816d7901773 100644\n--- a/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/FlowMessageBuilderFactory.java\n+++ b/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/MessageUtils.java\n", "chunk": "@@ -43,50 +41,13 @@ import org.opennms.netmgt.telemetry.protocols.netflow.parser.ie.values.IPv4Addre\n import org.opennms.netmgt.telemetry.protocols.netflow.parser.ie.values.IPv6AddressValue;\n import org.opennms.netmgt.telemetry.protocols.netflow.parser.ie.values.UnsignedValue;\n \n-import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Strings;\n import com.google.common.primitives.UnsignedLong;\n import com.google.protobuf.DoubleValue;\n import com.google.protobuf.UInt32Value;\n import com.google.protobuf.UInt64Value;\n \n-public class FlowMessageBuilderFactory {\n-\n-    public static byte[] buildAndSerialize(Protocol protocol, Iterable<Value<?>> record, RecordEnrichment enrichment) {\n-        if (protocol.equals(Protocol.NETFLOW5)) {\n-            Netflow5MessageBuilder builder = new Netflow5MessageBuilder(record, enrichment);\n-            return builder.buildData();\n-        } else if (protocol.equals(Protocol.NETFLOW9)) {\n-            NetFlow9MessageBuilder builder = new NetFlow9MessageBuilder(record, enrichment);\n-            return builder.buildData();\n-        } else if (protocol.equals(Protocol.IPFIX)) {\n-            IpFixMessageBuilder builder = new IpFixMessageBuilder(record, enrichment);\n-            return builder.buildData();\n-        } else {\n-            throw new RuntimeException(\"Unknown netflow Protocol\");\n-        }\n-    }\n-\n-    @VisibleForTesting\n-    public static byte[] buildAndSerialize(Protocol protocol, Iterable<Value<?>> record) {\n-        RecordEnrichment enrichment = new RecordEnrichment() {\n-            @Override\n-            public Optional<String> getHostnameFor(InetAddress srcAddress) {\n-                return Optional.empty();\n-            }\n-        };\n-        if (protocol.equals(Protocol.NETFLOW5)) {\n-            Netflow5MessageBuilder builder = new Netflow5MessageBuilder(record, enrichment);\n-            return builder.buildData();\n-        } else if (protocol.equals(Protocol.NETFLOW9)) {\n-            NetFlow9MessageBuilder builder = new NetFlow9MessageBuilder(record, enrichment);\n-            return builder.buildData();\n-        } else if (protocol.equals(Protocol.IPFIX)) {\n-            IpFixMessageBuilder builder = new IpFixMessageBuilder(record, enrichment);\n-            return builder.buildData();\n-        }\n-        return null;\n-    }\n-\n+public class MessageUtils {\n \n     static Long getLongValue(Value<?> value) {\n         if (value instanceof UnsignedValue) {\n", "next_change": null}]}, "revised_code_in_main": {"commit": "3352dcced0424e52de475b87840f05dff94fbec4", "changed_code": [{"header": "diff --git a/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/FlowMessageBuilderFactory.java b/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/MessageUtils.java\nsimilarity index 61%\nrename from features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/FlowMessageBuilderFactory.java\nrename to features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/MessageUtils.java\nindex e94008094e1..00efb4fce2f 100644\n--- a/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/FlowMessageBuilderFactory.java\n+++ b/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/MessageUtils.java\n", "chunk": "@@ -43,50 +41,13 @@ import org.opennms.netmgt.telemetry.protocols.netflow.parser.ie.values.IPv4Addre\n import org.opennms.netmgt.telemetry.protocols.netflow.parser.ie.values.IPv6AddressValue;\n import org.opennms.netmgt.telemetry.protocols.netflow.parser.ie.values.UnsignedValue;\n \n-import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Strings;\n import com.google.common.primitives.UnsignedLong;\n import com.google.protobuf.DoubleValue;\n import com.google.protobuf.UInt32Value;\n import com.google.protobuf.UInt64Value;\n \n-public class FlowMessageBuilderFactory {\n-\n-    public static byte[] buildAndSerialize(Protocol protocol, Iterable<Value<?>> record, RecordEnrichment enrichment) {\n-        if (protocol.equals(Protocol.NETFLOW5)) {\n-            Netflow5MessageBuilder builder = new Netflow5MessageBuilder(record, enrichment);\n-            return builder.buildData();\n-        } else if (protocol.equals(Protocol.NETFLOW9)) {\n-            NetFlow9MessageBuilder builder = new NetFlow9MessageBuilder(record, enrichment);\n-            return builder.buildData();\n-        } else if (protocol.equals(Protocol.IPFIX)) {\n-            IpFixMessageBuilder builder = new IpFixMessageBuilder(record, enrichment);\n-            return builder.buildData();\n-        } else {\n-            throw new RuntimeException(\"Unknown netflow Protocol\");\n-        }\n-    }\n-\n-    @VisibleForTesting\n-    public static byte[] buildAndSerialize(Protocol protocol, Iterable<Value<?>> record) {\n-        RecordEnrichment enrichment = new RecordEnrichment() {\n-            @Override\n-            public Optional<String> getHostnameFor(InetAddress srcAddress) {\n-                return Optional.empty();\n-            }\n-        };\n-        if (protocol.equals(Protocol.NETFLOW5)) {\n-            Netflow5MessageBuilder builder = new Netflow5MessageBuilder(record, enrichment);\n-            return builder.buildData();\n-        } else if (protocol.equals(Protocol.NETFLOW9)) {\n-            NetFlow9MessageBuilder builder = new NetFlow9MessageBuilder(record, enrichment);\n-            return builder.buildData();\n-        } else if (protocol.equals(Protocol.IPFIX)) {\n-            IpFixMessageBuilder builder = new IpFixMessageBuilder(record, enrichment);\n-            return builder.buildData();\n-        }\n-        return null;\n-    }\n-\n+public class MessageUtils {\n \n     static Long getLongValue(Value<?> value) {\n         if (value instanceof UnsignedValue) {\n", "next_change": null}]}, "commits_in_main": [{"oid": "3352dcced0424e52de475b87840f05dff94fbec4", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIyMjExNg==", "url": "https://github.com/OpenNMS/opennms/pull/2903#discussion_r390222116", "body": "This would benefit from `Optional`s, too.", "bodyText": "This would benefit from Optionals, too.", "bodyHTML": "<p dir=\"auto\">This would benefit from <code>Optional</code>s, too.</p>", "author": "fooker", "createdAt": "2020-03-10T10:32:30Z", "path": "features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/FlowMessageBuilderFactory.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+\n+package org.opennms.netmgt.telemetry.protocols.netflow.parser.transport;\n+\n+import java.net.InetAddress;\n+import java.time.Instant;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.Protocol;\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.RecordEnrichment;\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.ie.Value;\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.ie.values.BooleanValue;\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.ie.values.DateTimeValue;\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.ie.values.IPv4AddressValue;\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.ie.values.IPv6AddressValue;\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.ie.values.UnsignedValue;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.primitives.UnsignedLong;\n+import com.google.protobuf.DoubleValue;\n+import com.google.protobuf.UInt32Value;\n+import com.google.protobuf.UInt64Value;\n+\n+public class FlowMessageBuilderFactory {\n+\n+    public static byte[] buildAndSerialize(Protocol protocol, Iterable<Value<?>> record, RecordEnrichment enrichment) {\n+        if (protocol.equals(Protocol.NETFLOW5)) {\n+            Netflow5MessageBuilder builder = new Netflow5MessageBuilder(record, enrichment);\n+            return builder.buildData();\n+        } else if (protocol.equals(Protocol.NETFLOW9)) {\n+            NetFlow9MessageBuilder builder = new NetFlow9MessageBuilder(record, enrichment);\n+            return builder.buildData();\n+        } else if (protocol.equals(Protocol.IPFIX)) {\n+            IpFixMessageBuilder builder = new IpFixMessageBuilder(record, enrichment);\n+            return builder.buildData();\n+        } else {\n+            throw new RuntimeException(\"Unknown netflow Protocol\");\n+        }\n+    }\n+\n+    @VisibleForTesting\n+    public static byte[] buildAndSerialize(Protocol protocol, Iterable<Value<?>> record) {\n+        RecordEnrichment enrichment = new RecordEnrichment() {\n+            @Override\n+            public Optional<String> getHostnameFor(InetAddress srcAddress) {\n+                return Optional.empty();\n+            }\n+        };\n+        if (protocol.equals(Protocol.NETFLOW5)) {\n+            Netflow5MessageBuilder builder = new Netflow5MessageBuilder(record, enrichment);\n+            return builder.buildData();\n+        } else if (protocol.equals(Protocol.NETFLOW9)) {\n+            NetFlow9MessageBuilder builder = new NetFlow9MessageBuilder(record, enrichment);\n+            return builder.buildData();\n+        } else if (protocol.equals(Protocol.IPFIX)) {\n+            IpFixMessageBuilder builder = new IpFixMessageBuilder(record, enrichment);\n+            return builder.buildData();\n+        }\n+        return null;\n+    }\n+\n+\n+    static Long getLongValue(Value<?> value) {\n+        if (value instanceof UnsignedValue) {\n+            UnsignedLong unsignedValue = ((UnsignedValue) value).getValue();\n+            return unsignedValue.longValue();\n+        }\n+        return null;\n+    }\n+\n+    static Boolean getBooleanValue(Value<?> value) {\n+        if (value instanceof BooleanValue) {\n+            return ((BooleanValue) value).getValue();\n+        }\n+        return Boolean.FALSE;\n+    }\n+\n+    static InetAddress getInetAddress(Value<?> value) {\n+        if (value instanceof IPv4AddressValue) {\n+            return (InetAddress) value.getValue();\n+        }\n+        if (value instanceof IPv6AddressValue) {\n+            return (InetAddress) value.getValue();\n+        }\n+        return null;\n+    }\n+\n+    static Instant getTime(Value<?> value) {\n+        if (value instanceof DateTimeValue) {\n+            return ((DateTimeValue) value).getValue();\n+        }\n+        return null;\n+    }\n+\n+    public static <V> Optional<V> first(final V... values) {", "originalCommit": "628f488dd99abfee27aab31b69ba5a1409717e77", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null, "revised_code_in_main": null, "commits_in_main": [{"oid": "3352dcced0424e52de475b87840f05dff94fbec4", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIyMjY5NQ==", "url": "https://github.com/OpenNMS/opennms/pull/2903#discussion_r390222695", "body": "I can't see any usage - do I miss something?", "bodyText": "I can't see any usage - do I miss something?", "bodyHTML": "<p dir=\"auto\">I can't see any usage - do I miss something?</p>", "author": "fooker", "createdAt": "2020-03-10T10:33:36Z", "path": "features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/FlowMessageBuilderFactory.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+\n+package org.opennms.netmgt.telemetry.protocols.netflow.parser.transport;\n+\n+import java.net.InetAddress;\n+import java.time.Instant;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.Protocol;\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.RecordEnrichment;\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.ie.Value;\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.ie.values.BooleanValue;\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.ie.values.DateTimeValue;\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.ie.values.IPv4AddressValue;\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.ie.values.IPv6AddressValue;\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.ie.values.UnsignedValue;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.primitives.UnsignedLong;\n+import com.google.protobuf.DoubleValue;\n+import com.google.protobuf.UInt32Value;\n+import com.google.protobuf.UInt64Value;\n+\n+public class FlowMessageBuilderFactory {\n+\n+    public static byte[] buildAndSerialize(Protocol protocol, Iterable<Value<?>> record, RecordEnrichment enrichment) {\n+        if (protocol.equals(Protocol.NETFLOW5)) {\n+            Netflow5MessageBuilder builder = new Netflow5MessageBuilder(record, enrichment);\n+            return builder.buildData();\n+        } else if (protocol.equals(Protocol.NETFLOW9)) {\n+            NetFlow9MessageBuilder builder = new NetFlow9MessageBuilder(record, enrichment);\n+            return builder.buildData();\n+        } else if (protocol.equals(Protocol.IPFIX)) {\n+            IpFixMessageBuilder builder = new IpFixMessageBuilder(record, enrichment);\n+            return builder.buildData();\n+        } else {\n+            throw new RuntimeException(\"Unknown netflow Protocol\");\n+        }\n+    }\n+\n+    @VisibleForTesting\n+    public static byte[] buildAndSerialize(Protocol protocol, Iterable<Value<?>> record) {\n+        RecordEnrichment enrichment = new RecordEnrichment() {\n+            @Override\n+            public Optional<String> getHostnameFor(InetAddress srcAddress) {\n+                return Optional.empty();\n+            }\n+        };\n+        if (protocol.equals(Protocol.NETFLOW5)) {\n+            Netflow5MessageBuilder builder = new Netflow5MessageBuilder(record, enrichment);\n+            return builder.buildData();\n+        } else if (protocol.equals(Protocol.NETFLOW9)) {\n+            NetFlow9MessageBuilder builder = new NetFlow9MessageBuilder(record, enrichment);\n+            return builder.buildData();\n+        } else if (protocol.equals(Protocol.IPFIX)) {\n+            IpFixMessageBuilder builder = new IpFixMessageBuilder(record, enrichment);\n+            return builder.buildData();\n+        }\n+        return null;\n+    }\n+\n+\n+    static Long getLongValue(Value<?> value) {\n+        if (value instanceof UnsignedValue) {\n+            UnsignedLong unsignedValue = ((UnsignedValue) value).getValue();\n+            return unsignedValue.longValue();\n+        }\n+        return null;\n+    }\n+\n+    static Boolean getBooleanValue(Value<?> value) {\n+        if (value instanceof BooleanValue) {\n+            return ((BooleanValue) value).getValue();\n+        }\n+        return Boolean.FALSE;\n+    }\n+\n+    static InetAddress getInetAddress(Value<?> value) {\n+        if (value instanceof IPv4AddressValue) {\n+            return (InetAddress) value.getValue();\n+        }\n+        if (value instanceof IPv6AddressValue) {\n+            return (InetAddress) value.getValue();\n+        }\n+        return null;\n+    }\n+\n+    static Instant getTime(Value<?> value) {\n+        if (value instanceof DateTimeValue) {\n+            return ((DateTimeValue) value).getValue();\n+        }\n+        return null;\n+    }\n+\n+    public static <V> Optional<V> first(final V... values) {\n+        return Stream.of(values)\n+                .filter(Objects::nonNull)\n+                .findFirst();\n+    }\n+\n+    public static class Timeout {", "originalCommit": "628f488dd99abfee27aab31b69ba5a1409717e77", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "36b00350ef2a7a091f87639d723466f4b9e83b84", "changed_code": [{"header": "diff --git a/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/FlowMessageBuilderFactory.java b/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/MessageUtils.java\nsimilarity index 61%\nrename from features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/FlowMessageBuilderFactory.java\nrename to features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/MessageUtils.java\nindex e94008094e1..00efb4fce2f 100644\n--- a/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/FlowMessageBuilderFactory.java\n+++ b/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/MessageUtils.java\n", "chunk": "@@ -126,24 +88,49 @@ public class FlowMessageBuilderFactory {\n                 .findFirst();\n     }\n \n-    public static class Timeout {\n-        protected final long active;\n-        protected final long inactive;\n \n-        public Timeout(final long active, final long inactive) {\n-            this.active = active;\n-            this.inactive = inactive;\n+    static Optional<UInt64Value> getUInt64Value(Value<?> value) {\n+        Long longValue = getLongValue(value);\n+        if (longValue != null) {\n+            return Optional.of(UInt64Value.newBuilder().setValue(longValue).build());\n+        }\n+        return Optional.empty();\n+    }\n+\n+    static Optional<UInt64Value> getUInt64Value(Long value) {\n+        if (value != null) {\n+            return Optional.of(UInt64Value.newBuilder().setValue(value).build());\n+        }\n+        return Optional.empty();\n+    }\n+\n+\n+    static Optional<UInt32Value> getUInt32Value(Value<?> value) {\n+        Long longValue = getLongValue(value);\n+        if (longValue != null) {\n+            return Optional.of(UInt32Value.newBuilder().setValue(longValue.intValue()).build());\n         }\n+        return Optional.empty();\n+    }\n+\n \n-        public long getActive() {\n-            return this.active;\n+    static Optional<DoubleValue> getDoubleValue(Value<?> value) {\n+        Long longValue = getLongValue(value);\n+        if (longValue != null) {\n+            return Optional.of(DoubleValue.newBuilder().setValue(longValue.doubleValue()).build());\n         }\n+        return Optional.empty();\n+    }\n \n-        public long getInactive() {\n-            return this.inactive;\n+    static Optional<String> getString(String value) {\n+        if (!Strings.isNullOrEmpty(value)) {\n+            return Optional.of(value);\n         }\n+        return Optional.empty();\n     }\n \n+\n+\n     static UInt32Value setIntValue(int value) {\n         return UInt32Value.newBuilder().setValue(value).build();\n     }\n", "next_change": null}]}, "revised_code_in_main": {"commit": "3352dcced0424e52de475b87840f05dff94fbec4", "changed_code": [{"header": "diff --git a/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/FlowMessageBuilderFactory.java b/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/MessageUtils.java\nsimilarity index 61%\nrename from features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/FlowMessageBuilderFactory.java\nrename to features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/MessageUtils.java\nindex e94008094e1..00efb4fce2f 100644\n--- a/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/FlowMessageBuilderFactory.java\n+++ b/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/MessageUtils.java\n", "chunk": "@@ -126,24 +88,49 @@ public class FlowMessageBuilderFactory {\n                 .findFirst();\n     }\n \n-    public static class Timeout {\n-        protected final long active;\n-        protected final long inactive;\n \n-        public Timeout(final long active, final long inactive) {\n-            this.active = active;\n-            this.inactive = inactive;\n+    static Optional<UInt64Value> getUInt64Value(Value<?> value) {\n+        Long longValue = getLongValue(value);\n+        if (longValue != null) {\n+            return Optional.of(UInt64Value.newBuilder().setValue(longValue).build());\n+        }\n+        return Optional.empty();\n+    }\n+\n+    static Optional<UInt64Value> getUInt64Value(Long value) {\n+        if (value != null) {\n+            return Optional.of(UInt64Value.newBuilder().setValue(value).build());\n+        }\n+        return Optional.empty();\n+    }\n+\n+\n+    static Optional<UInt32Value> getUInt32Value(Value<?> value) {\n+        Long longValue = getLongValue(value);\n+        if (longValue != null) {\n+            return Optional.of(UInt32Value.newBuilder().setValue(longValue.intValue()).build());\n         }\n+        return Optional.empty();\n+    }\n+\n \n-        public long getActive() {\n-            return this.active;\n+    static Optional<DoubleValue> getDoubleValue(Value<?> value) {\n+        Long longValue = getLongValue(value);\n+        if (longValue != null) {\n+            return Optional.of(DoubleValue.newBuilder().setValue(longValue.doubleValue()).build());\n         }\n+        return Optional.empty();\n+    }\n \n-        public long getInactive() {\n-            return this.inactive;\n+    static Optional<String> getString(String value) {\n+        if (!Strings.isNullOrEmpty(value)) {\n+            return Optional.of(value);\n         }\n+        return Optional.empty();\n     }\n \n+\n+\n     static UInt32Value setIntValue(int value) {\n         return UInt32Value.newBuilder().setValue(value).build();\n     }\n", "next_change": null}]}, "commits_in_main": [{"oid": "3352dcced0424e52de475b87840f05dff94fbec4", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIyMzE5Mg==", "url": "https://github.com/OpenNMS/opennms/pull/2903#discussion_r390223192", "body": "Maybe this should be called `makeTypeValue` or `buildTypeValue`.", "bodyText": "Maybe this should be called makeTypeValue or buildTypeValue.", "bodyHTML": "<p dir=\"auto\">Maybe this should be called <code>makeTypeValue</code> or <code>buildTypeValue</code>.</p>", "author": "fooker", "createdAt": "2020-03-10T10:34:28Z", "path": "features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/FlowMessageBuilderFactory.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+\n+package org.opennms.netmgt.telemetry.protocols.netflow.parser.transport;\n+\n+import java.net.InetAddress;\n+import java.time.Instant;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.Protocol;\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.RecordEnrichment;\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.ie.Value;\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.ie.values.BooleanValue;\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.ie.values.DateTimeValue;\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.ie.values.IPv4AddressValue;\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.ie.values.IPv6AddressValue;\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.ie.values.UnsignedValue;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.primitives.UnsignedLong;\n+import com.google.protobuf.DoubleValue;\n+import com.google.protobuf.UInt32Value;\n+import com.google.protobuf.UInt64Value;\n+\n+public class FlowMessageBuilderFactory {\n+\n+    public static byte[] buildAndSerialize(Protocol protocol, Iterable<Value<?>> record, RecordEnrichment enrichment) {\n+        if (protocol.equals(Protocol.NETFLOW5)) {\n+            Netflow5MessageBuilder builder = new Netflow5MessageBuilder(record, enrichment);\n+            return builder.buildData();\n+        } else if (protocol.equals(Protocol.NETFLOW9)) {\n+            NetFlow9MessageBuilder builder = new NetFlow9MessageBuilder(record, enrichment);\n+            return builder.buildData();\n+        } else if (protocol.equals(Protocol.IPFIX)) {\n+            IpFixMessageBuilder builder = new IpFixMessageBuilder(record, enrichment);\n+            return builder.buildData();\n+        } else {\n+            throw new RuntimeException(\"Unknown netflow Protocol\");\n+        }\n+    }\n+\n+    @VisibleForTesting\n+    public static byte[] buildAndSerialize(Protocol protocol, Iterable<Value<?>> record) {\n+        RecordEnrichment enrichment = new RecordEnrichment() {\n+            @Override\n+            public Optional<String> getHostnameFor(InetAddress srcAddress) {\n+                return Optional.empty();\n+            }\n+        };\n+        if (protocol.equals(Protocol.NETFLOW5)) {\n+            Netflow5MessageBuilder builder = new Netflow5MessageBuilder(record, enrichment);\n+            return builder.buildData();\n+        } else if (protocol.equals(Protocol.NETFLOW9)) {\n+            NetFlow9MessageBuilder builder = new NetFlow9MessageBuilder(record, enrichment);\n+            return builder.buildData();\n+        } else if (protocol.equals(Protocol.IPFIX)) {\n+            IpFixMessageBuilder builder = new IpFixMessageBuilder(record, enrichment);\n+            return builder.buildData();\n+        }\n+        return null;\n+    }\n+\n+\n+    static Long getLongValue(Value<?> value) {\n+        if (value instanceof UnsignedValue) {\n+            UnsignedLong unsignedValue = ((UnsignedValue) value).getValue();\n+            return unsignedValue.longValue();\n+        }\n+        return null;\n+    }\n+\n+    static Boolean getBooleanValue(Value<?> value) {\n+        if (value instanceof BooleanValue) {\n+            return ((BooleanValue) value).getValue();\n+        }\n+        return Boolean.FALSE;\n+    }\n+\n+    static InetAddress getInetAddress(Value<?> value) {\n+        if (value instanceof IPv4AddressValue) {\n+            return (InetAddress) value.getValue();\n+        }\n+        if (value instanceof IPv6AddressValue) {\n+            return (InetAddress) value.getValue();\n+        }\n+        return null;\n+    }\n+\n+    static Instant getTime(Value<?> value) {\n+        if (value instanceof DateTimeValue) {\n+            return ((DateTimeValue) value).getValue();\n+        }\n+        return null;\n+    }\n+\n+    public static <V> Optional<V> first(final V... values) {\n+        return Stream.of(values)\n+                .filter(Objects::nonNull)\n+                .findFirst();\n+    }\n+\n+    public static class Timeout {\n+        protected final long active;\n+        protected final long inactive;\n+\n+        public Timeout(final long active, final long inactive) {\n+            this.active = active;\n+            this.inactive = inactive;\n+        }\n+\n+        public long getActive() {\n+            return this.active;\n+        }\n+\n+        public long getInactive() {\n+            return this.inactive;\n+        }\n+    }\n+\n+    static UInt32Value setIntValue(int value) {", "originalCommit": "628f488dd99abfee27aab31b69ba5a1409717e77", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b0e90f013c5b6948e960f7eb2d66870c3c84e12a", "changed_code": [{"header": "diff --git a/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/FlowMessageBuilderFactory.java b/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/MessageUtils.java\nsimilarity index 67%\nrename from features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/FlowMessageBuilderFactory.java\nrename to features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/MessageUtils.java\nindex e94008094e1..816d7901773 100644\n--- a/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/FlowMessageBuilderFactory.java\n+++ b/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/MessageUtils.java\n", "chunk": "@@ -144,6 +106,48 @@ public class FlowMessageBuilderFactory {\n         }\n     }\n \n+    static Optional<UInt64Value> getUInt64Value(Value<?> value) {\n+        Long longValue = getLongValue(value);\n+        if (longValue != null) {\n+            return Optional.of(UInt64Value.newBuilder().setValue(longValue).build());\n+        }\n+        return Optional.empty();\n+    }\n+\n+    static Optional<UInt64Value> getUInt64Value(Long value) {\n+        if (value != null) {\n+            return Optional.of(UInt64Value.newBuilder().setValue(value).build());\n+        }\n+        return Optional.empty();\n+    }\n+\n+\n+    static Optional<UInt32Value> getUInt32Value(Value<?> value) {\n+        Long longValue = getLongValue(value);\n+        if (longValue != null) {\n+            return Optional.of(UInt32Value.newBuilder().setValue(longValue.intValue()).build());\n+        }\n+        return Optional.empty();\n+    }\n+\n+\n+    static Optional<DoubleValue> getDoubleValue(Value<?> value) {\n+        Long longValue = getLongValue(value);\n+        if (longValue != null) {\n+            return Optional.of(DoubleValue.newBuilder().setValue(longValue.doubleValue()).build());\n+        }\n+        return Optional.empty();\n+    }\n+\n+    static Optional<String> getString(String value) {\n+        if (!Strings.isNullOrEmpty(value)) {\n+            return Optional.of(value);\n+        }\n+        return Optional.empty();\n+    }\n+\n+\n+\n     static UInt32Value setIntValue(int value) {\n         return UInt32Value.newBuilder().setValue(value).build();\n     }\n", "next_change": null}]}, "revised_code_in_main": {"commit": "3352dcced0424e52de475b87840f05dff94fbec4", "changed_code": [{"header": "diff --git a/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/FlowMessageBuilderFactory.java b/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/MessageUtils.java\nsimilarity index 61%\nrename from features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/FlowMessageBuilderFactory.java\nrename to features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/MessageUtils.java\nindex e94008094e1..00efb4fce2f 100644\n--- a/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/FlowMessageBuilderFactory.java\n+++ b/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/MessageUtils.java\n", "chunk": "@@ -126,24 +88,49 @@ public class FlowMessageBuilderFactory {\n                 .findFirst();\n     }\n \n-    public static class Timeout {\n-        protected final long active;\n-        protected final long inactive;\n \n-        public Timeout(final long active, final long inactive) {\n-            this.active = active;\n-            this.inactive = inactive;\n+    static Optional<UInt64Value> getUInt64Value(Value<?> value) {\n+        Long longValue = getLongValue(value);\n+        if (longValue != null) {\n+            return Optional.of(UInt64Value.newBuilder().setValue(longValue).build());\n+        }\n+        return Optional.empty();\n+    }\n+\n+    static Optional<UInt64Value> getUInt64Value(Long value) {\n+        if (value != null) {\n+            return Optional.of(UInt64Value.newBuilder().setValue(value).build());\n+        }\n+        return Optional.empty();\n+    }\n+\n+\n+    static Optional<UInt32Value> getUInt32Value(Value<?> value) {\n+        Long longValue = getLongValue(value);\n+        if (longValue != null) {\n+            return Optional.of(UInt32Value.newBuilder().setValue(longValue.intValue()).build());\n         }\n+        return Optional.empty();\n+    }\n+\n \n-        public long getActive() {\n-            return this.active;\n+    static Optional<DoubleValue> getDoubleValue(Value<?> value) {\n+        Long longValue = getLongValue(value);\n+        if (longValue != null) {\n+            return Optional.of(DoubleValue.newBuilder().setValue(longValue.doubleValue()).build());\n         }\n+        return Optional.empty();\n+    }\n \n-        public long getInactive() {\n-            return this.inactive;\n+    static Optional<String> getString(String value) {\n+        if (!Strings.isNullOrEmpty(value)) {\n+            return Optional.of(value);\n         }\n+        return Optional.empty();\n     }\n \n+\n+\n     static UInt32Value setIntValue(int value) {\n         return UInt32Value.newBuilder().setValue(value).build();\n     }\n", "next_change": null}]}, "commits_in_main": [{"oid": "3352dcced0424e52de475b87840f05dff94fbec4", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIyOTYxMQ==", "url": "https://github.com/OpenNMS/opennms/pull/2903#discussion_r390229611", "body": "I think this can be simplified by assuming that there will be only one value for each of these \"duplicates\" which we try to resolve with the `first(...)` calls below.\r\n\r\nAs an example:\r\n`Intant flowEnd` should be just. You can set it for all its variants (`flowEndSeconds`, `flowEndMilliseconds`, `flowEndMicroseconds`, ...) and just overwrite it if it really should occur more than once.\r\nThis would reduce the complexity to just the handling of the absolute and the delta values.\r\n\r\nThis is true for a couple of other fields, too.", "bodyText": "I think this can be simplified by assuming that there will be only one value for each of these \"duplicates\" which we try to resolve with the first(...) calls below.\nAs an example:\nIntant flowEnd should be just. You can set it for all its variants (flowEndSeconds, flowEndMilliseconds, flowEndMicroseconds, ...) and just overwrite it if it really should occur more than once.\nThis would reduce the complexity to just the handling of the absolute and the delta values.\nThis is true for a couple of other fields, too.", "bodyHTML": "<p dir=\"auto\">I think this can be simplified by assuming that there will be only one value for each of these \"duplicates\" which we try to resolve with the <code>first(...)</code> calls below.</p>\n<p dir=\"auto\">As an example:<br>\n<code>Intant flowEnd</code> should be just. You can set it for all its variants (<code>flowEndSeconds</code>, <code>flowEndMilliseconds</code>, <code>flowEndMicroseconds</code>, ...) and just overwrite it if it really should occur more than once.<br>\nThis would reduce the complexity to just the handling of the absolute and the delta values.</p>\n<p dir=\"auto\">This is true for a couple of other fields, too.</p>", "author": "fooker", "createdAt": "2020-03-10T10:46:47Z", "path": "features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/IpFixMessageBuilder.java", "diffHunk": "@@ -0,0 +1,640 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+\n+package org.opennms.netmgt.telemetry.protocols.netflow.parser.transport;\n+\n+import static org.opennms.netmgt.telemetry.protocols.netflow.parser.transport.FlowMessageBuilderFactory.first;\n+import static org.opennms.netmgt.telemetry.protocols.netflow.parser.transport.FlowMessageBuilderFactory.getInetAddress;\n+import static org.opennms.netmgt.telemetry.protocols.netflow.parser.transport.FlowMessageBuilderFactory.getLongValue;\n+import static org.opennms.netmgt.telemetry.protocols.netflow.parser.transport.FlowMessageBuilderFactory.getTime;\n+import static org.opennms.netmgt.telemetry.protocols.netflow.parser.transport.FlowMessageBuilderFactory.setDoubleValue;\n+import static org.opennms.netmgt.telemetry.protocols.netflow.parser.transport.FlowMessageBuilderFactory.setIntValue;\n+import static org.opennms.netmgt.telemetry.protocols.netflow.parser.transport.FlowMessageBuilderFactory.setLongValue;\n+\n+import java.net.InetAddress;\n+import java.time.Instant;\n+import java.util.Optional;\n+\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.RecordEnrichment;\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.ie.Value;\n+import org.opennms.netmgt.telemetry.protocols.netflow.proto.Direction;\n+import org.opennms.netmgt.telemetry.protocols.netflow.proto.FlowMessageProto;\n+import org.opennms.netmgt.telemetry.protocols.netflow.proto.NetflowVersion;\n+import org.opennms.netmgt.telemetry.protocols.netflow.proto.SamplingAlgorithm;\n+\n+import com.google.common.primitives.UnsignedLong;\n+\n+class IpFixMessageBuilder {\n+\n+    private final FlowMessageProto.Builder builder;\n+    private final Iterable<Value<?>> values;\n+    private final RecordEnrichment enrichment;\n+    private Long exportTime;\n+    private Long octetDeltaCount;\n+    private Long postOctetDeltaCount;\n+    private Long layer2OctetDeltaCount;\n+    private Long postLayer2OctetDeltaCount;\n+    private Long transportOctetDeltaCount;\n+    private InetAddress destinationIPv6Address;\n+    private InetAddress destinationIPv4Address;\n+    private Long destinationIPv6PrefixLength;\n+    private Long destinationIPv4PrefixLength;\n+    private Instant flowStartSeconds;\n+    private Instant flowStartMilliseconds;\n+    private Instant flowStartMicroseconds;\n+    private Instant flowStartNanoseconds;\n+    private Long flowStartDeltaMicroseconds;\n+    private Long flowStartSysUpTime;\n+    private Instant systemInitTimeMilliseconds;\n+    private Instant flowEndSeconds;", "originalCommit": "628f488dd99abfee27aab31b69ba5a1409717e77", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "7dcfa4927ebf40e48a1f62ad6837f9cb99ea57e6", "changed_code": [{"header": "diff --git a/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/IpFixMessageBuilder.java b/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/IpFixMessageBuilder.java\nindex de7a270412d..6ed358aa583 100644\n--- a/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/IpFixMessageBuilder.java\n+++ b/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/IpFixMessageBuilder.java\n", "chunk": "@@ -28,394 +28,350 @@\n \n package org.opennms.netmgt.telemetry.protocols.netflow.parser.transport;\n \n-import static org.opennms.netmgt.telemetry.protocols.netflow.parser.transport.FlowMessageBuilderFactory.first;\n-import static org.opennms.netmgt.telemetry.protocols.netflow.parser.transport.FlowMessageBuilderFactory.getInetAddress;\n-import static org.opennms.netmgt.telemetry.protocols.netflow.parser.transport.FlowMessageBuilderFactory.getLongValue;\n-import static org.opennms.netmgt.telemetry.protocols.netflow.parser.transport.FlowMessageBuilderFactory.getTime;\n-import static org.opennms.netmgt.telemetry.protocols.netflow.parser.transport.FlowMessageBuilderFactory.setDoubleValue;\n-import static org.opennms.netmgt.telemetry.protocols.netflow.parser.transport.FlowMessageBuilderFactory.setIntValue;\n-import static org.opennms.netmgt.telemetry.protocols.netflow.parser.transport.FlowMessageBuilderFactory.setLongValue;\n+import static org.opennms.netmgt.telemetry.protocols.netflow.parser.transport.MessageUtils.first;\n+import static org.opennms.netmgt.telemetry.protocols.netflow.parser.transport.MessageUtils.getInetAddress;\n+import static org.opennms.netmgt.telemetry.protocols.netflow.parser.transport.MessageUtils.getLongValue;\n+import static org.opennms.netmgt.telemetry.protocols.netflow.parser.transport.MessageUtils.getTime;\n+import static org.opennms.netmgt.telemetry.protocols.netflow.parser.transport.MessageUtils.getUInt32Value;\n+import static org.opennms.netmgt.telemetry.protocols.netflow.parser.transport.MessageUtils.getUInt64Value;\n+import static org.opennms.netmgt.telemetry.protocols.netflow.parser.transport.MessageUtils.setDoubleValue;\n+import static org.opennms.netmgt.telemetry.protocols.netflow.parser.transport.MessageUtils.setIntValue;\n+import static org.opennms.netmgt.telemetry.protocols.netflow.parser.transport.MessageUtils.setLongValue;\n \n import java.net.InetAddress;\n import java.time.Instant;\n import java.util.Optional;\n \n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.IllegalFlowException;\n import org.opennms.netmgt.telemetry.protocols.netflow.parser.RecordEnrichment;\n import org.opennms.netmgt.telemetry.protocols.netflow.parser.ie.Value;\n-import org.opennms.netmgt.telemetry.protocols.netflow.proto.Direction;\n-import org.opennms.netmgt.telemetry.protocols.netflow.proto.FlowMessageProto;\n-import org.opennms.netmgt.telemetry.protocols.netflow.proto.NetflowVersion;\n-import org.opennms.netmgt.telemetry.protocols.netflow.proto.SamplingAlgorithm;\n+import org.opennms.netmgt.telemetry.protocols.netflow.transport.Direction;\n+import org.opennms.netmgt.telemetry.protocols.netflow.transport.FlowMessage;\n+import org.opennms.netmgt.telemetry.protocols.netflow.transport.NetflowVersion;\n+import org.opennms.netmgt.telemetry.protocols.netflow.transport.SamplingAlgorithm;\n \n import com.google.common.primitives.UnsignedLong;\n \n-class IpFixMessageBuilder {\n-\n-    private final FlowMessageProto.Builder builder;\n-    private final Iterable<Value<?>> values;\n-    private final RecordEnrichment enrichment;\n-    private Long exportTime;\n-    private Long octetDeltaCount;\n-    private Long postOctetDeltaCount;\n-    private Long layer2OctetDeltaCount;\n-    private Long postLayer2OctetDeltaCount;\n-    private Long transportOctetDeltaCount;\n-    private InetAddress destinationIPv6Address;\n-    private InetAddress destinationIPv4Address;\n-    private Long destinationIPv6PrefixLength;\n-    private Long destinationIPv4PrefixLength;\n-    private Instant flowStartSeconds;\n-    private Instant flowStartMilliseconds;\n-    private Instant flowStartMicroseconds;\n-    private Instant flowStartNanoseconds;\n-    private Long flowStartDeltaMicroseconds;\n-    private Long flowStartSysUpTime;\n-    private Instant systemInitTimeMilliseconds;\n-    private Instant flowEndSeconds;\n-    private Instant flowEndMilliseconds;\n-    private Instant flowEndMicroseconds;\n-    private Instant flowEndNanoseconds;\n-    private Long flowEndDeltaMicroseconds;\n-    private Long flowEndSysUpTime;\n-    private InetAddress ipNextHopIPv6Address;\n-    private InetAddress ipNextHopIPv4Address;\n-    private InetAddress bgpNextHopIPv6Address;\n-    private InetAddress bgpNextHopIPv4Address;\n-    private Long packetDeltaCount;\n-    private Long postPacketDeltaCount;\n-    private Long transportPacketDeltaCount;\n-    private Long samplingAlgorithm;\n-    private Long samplerMode;\n-    private Long selectorAlgorithm;\n-    private Long samplingInterval;\n-    private Long samplerRandomInterval;\n-    private Long samplingFlowInterval;\n-    private Long samplingFlowSpacing;\n-    private Long flowSamplingTimeInterval;\n-    private Long flowSamplingTimeSpacing;\n-    private Long samplingSize;\n-    private Long samplingPopulation;\n-    private Long samplingProbability;\n-    private Long hashSelectedRangeMin;\n-    private Long hashSelectedRangeMax;\n-    private Long hashOutputRangeMin;\n-    private Long hashOutputRangeMax;\n-    private InetAddress sourceIPv6Address;\n-    private InetAddress sourceIPv4Address;\n-    private Long sourceIPv6PrefixLength;\n-    private Long sourceIPv4PrefixLength;\n-    private Long vlanId;\n-    private Long postVlanId;\n-    private Long dot1qVlanId;\n-    private Long dot1qCustomerVlanId;\n-    private Long postDot1qVlanId;\n-    private Long postDot1qCustomerVlanId;\n-    private Long flowActiveTimeout;\n-    private Long flowInactiveTimeout;\n-    private Long numBytes;\n-    private Long numPackets;\n-    private Long firstSwitched;\n-    private Long lastSwitched;\n-\n-    IpFixMessageBuilder(Iterable<Value<?>> values, RecordEnrichment enrichment) {\n-        this.values = values;\n-        this.enrichment = enrichment;\n-        this.builder = FlowMessageProto.newBuilder();\n-    }\n+public class IpFixMessageBuilder implements MessageBuilder {\n \n-    private void addField(Value<?> value) {\n-        switch (value.getName()) {\n-            case \"@exportTime\":\n-                exportTime = getLongValue(value);\n-                break;\n-            case \"octetDeltaCount\":\n-                octetDeltaCount = getLongValue(value);\n-                break;\n-            case \"postOctetDeltaCount\":\n-                postOctetDeltaCount = getLongValue(value);\n-                break;\n-            case \"layer2OctetDeltaCount\":\n-                layer2OctetDeltaCount = getLongValue(value);\n-                break;\n-            case \"postLayer2OctetDeltaCount\":\n-                postLayer2OctetDeltaCount = getLongValue(value);\n-                break;\n-            case \"transportOctetDeltaCount\":\n-                transportOctetDeltaCount = getLongValue(value);\n-                break;\n-            case \"flowDirection\":\n-                Long directionValue = getLongValue(value);\n-                Direction direction = Direction.UNRECOGNIZED;\n-                if (directionValue != null) {\n-                    switch (directionValue.intValue()) {\n-                        case 0:\n-                            direction = Direction.INGRESS;\n-                            break;\n-                        case 1:\n-                            direction = Direction.EGRESS;\n-                            break;\n-                    }\n-                }\n-                if (!direction.equals(Direction.UNRECOGNIZED)) {\n-                    this.builder.setDirection(direction);\n-                }\n-                break;\n-            case \"destinationIPv6Address\":\n-                destinationIPv6Address = getInetAddress(value);\n-                break;\n-            case \"destinationIPv4Address\":\n-                destinationIPv4Address = getInetAddress(value);\n-                break;\n-            case \"bgpDestinationAsNumber\":\n-                Long bgpDestinationAsNumber = getLongValue(value);\n-                if (bgpDestinationAsNumber != null) {\n-                    builder.setDstAs(setLongValue(bgpDestinationAsNumber));\n-                }\n-                break;\n-            case \"destinationIPv6PrefixLength\":\n-                destinationIPv6PrefixLength = getLongValue(value);\n-                break;\n-            case \"destinationIPv4PrefixLength\":\n-                destinationIPv4PrefixLength = getLongValue(value);\n-                break;\n-            case \"destinationTransportPort\":\n-                Long destinationTransportPort = getLongValue(value);\n-                if (destinationTransportPort != null) {\n-                    builder.setDstPort(setIntValue(destinationTransportPort.intValue()));\n-                }\n-                break;\n-            case \"engineId\":\n-                Long engineId = getLongValue(value);\n-                if (engineId != null) {\n-                    builder.setEngineId(setIntValue(engineId.intValue()));\n-                }\n-                break;\n-            case \"engineType\":\n-                Long engineType = getLongValue(value);\n-                if (engineType != null) {\n-                    builder.setEngineType(setIntValue(engineType.intValue()));\n-                }\n-                break;\n-            case \"@recordCount\":\n-                Long recordCount = getLongValue(value);\n-                if (recordCount != null) {\n-                    builder.setNumFlowRecords(setIntValue(recordCount.intValue()));\n-                }\n-                break;\n-            case \"@sequenceNumber\":\n-                Long sequenceNumber = getLongValue(value);\n-                if (sequenceNumber != null) {\n-                    builder.setFlowSeqNum(setLongValue(sequenceNumber));\n-                }\n-                break;\n-            case \"ingressInterface\":\n-                Long ingressInterface = getLongValue(value);\n-                if (ingressInterface != null) {\n-                    builder.setInputSnmpIfindex(setIntValue(ingressInterface.intValue()));\n-                }\n-                break;\n-            case \"ipVersion\":\n-                Long ipVersion = getLongValue(value);\n-                if (ipVersion != null) {\n-                    builder.setIpProtocolVersion(setIntValue(ipVersion.intValue()));\n-                }\n-                break;\n-            case \"egressInterface\":\n-                Long egressInterface = getLongValue(value);\n-                if (egressInterface != null) {\n-                    builder.setOutputSnmpIfindex(setIntValue(egressInterface.intValue()));\n-                }\n-                break;\n-            case \"protocolIdentifier\":\n-                Long protocolIdentifier = getLongValue(value);\n-                if (protocolIdentifier != null) {\n-                    builder.setProtocol(setIntValue(protocolIdentifier.intValue()));\n-                }\n-                break;\n-            case \"tcpControlBits\":\n-                Long tcpControlBits = getLongValue(value);\n-                if (tcpControlBits != null) {\n-                    builder.setTcpFlags(setIntValue(tcpControlBits.intValue()));\n-                }\n-                break;\n-            case \"ipClassOfService\":\n-                Long ipClassOfService = getLongValue(value);\n-                if (ipClassOfService != null) {\n-                    builder.setTos(setIntValue(ipClassOfService.intValue()));\n-                }\n-                break;\n-            case \"@observationDomainId\":\n-                Long observationDomainId = getLongValue(value);\n-                if (observationDomainId != null) {\n-                    builder.setNodeIdentifier(String.valueOf(observationDomainId));\n-                }\n-                break;\n-\n-            case \"flowStartSeconds\":\n-                flowStartSeconds = getTime(value);\n-                break;\n-            case \"flowStartMilliseconds\":\n-                flowStartMilliseconds = getTime(value);\n-                break;\n-            case \"flowStartMicroseconds\":\n-                flowStartMicroseconds = getTime(value);\n-                break;\n-            case \"flowStartNanoseconds\":\n-                flowStartNanoseconds = getTime(value);\n-                break;\n-            case \"flowStartDeltaMicroseconds\":\n-                flowStartDeltaMicroseconds = getLongValue(value);\n-                break;\n-            case \"flowStartSysUpTime\":\n-                flowStartSysUpTime = getLongValue(value);\n-                break;\n-            case \"systemInitTimeMilliseconds\":\n-                systemInitTimeMilliseconds = getTime(value);\n-                break;\n-            case \"flowEndSeconds\":\n-                flowEndSeconds = getTime(value);\n-                break;\n-            case \"flowEndMilliseconds\":\n-                flowEndMilliseconds = getTime(value);\n-                break;\n-            case \"flowEndMicroseconds\":\n-                flowEndMicroseconds = getTime(value);\n-                break;\n-            case \"flowEndNanoseconds\":\n-                flowEndNanoseconds = getTime(value);\n-            case \"flowEndDeltaMicroseconds\":\n-                flowEndDeltaMicroseconds = getLongValue(value);\n-                break;\n-            case \"flowEndSysUpTime\":\n-                flowEndSysUpTime = getLongValue(value);\n-                break;\n-            case \"ipNextHopIPv6Address\":\n-                ipNextHopIPv6Address = getInetAddress(value);\n-                break;\n-            case \"ipNextHopIPv4Address\":\n-                ipNextHopIPv4Address = getInetAddress(value);\n-                break;\n-            case \"bgpNextHopIPv6Address\":\n-                bgpNextHopIPv6Address = getInetAddress(value);\n-                break;\n-            case \"bgpNextHopIPv4Address\":\n-                bgpNextHopIPv4Address = getInetAddress(value);\n-                break;\n-            case \"packetDeltaCount\":\n-                packetDeltaCount = getLongValue(value);\n-                break;\n-            case \"postPacketDeltaCount\":\n-                postPacketDeltaCount = getLongValue(value);\n-                break;\n-            case \"transportPacketDeltaCount\":\n-                transportPacketDeltaCount = getLongValue(value);\n-                break;\n-            case \"samplingAlgorithm\":\n-                samplingAlgorithm = getLongValue(value);\n-                break;\n-            case \"samplerMode\":\n-                samplerMode = getLongValue(value);\n-                break;\n-            case \"selectorAlgorithm\":\n-                selectorAlgorithm = getLongValue(value);\n-                break;\n-            case \"samplingInterval\":\n-                samplingInterval = getLongValue(value);\n-                break;\n-            case \"samplerRandomInterval\":\n-                samplerRandomInterval = getLongValue(value);\n-                break;\n-            case \"samplingFlowInterval\":\n-                samplingFlowInterval = getLongValue(value);\n-                break;\n-            case \"samplingFlowSpacing\":\n-                samplingFlowSpacing = getLongValue(value);\n-                break;\n-            case \"flowSamplingTimeInterval\":\n-                flowSamplingTimeInterval = getLongValue(value);\n-                break;\n-            case \"flowSamplingTimeSpacing\":\n-                flowSamplingTimeSpacing = getLongValue(value);\n-                break;\n-            case \"samplingSize\":\n-                samplingSize = getLongValue(value);\n-                break;\n-            case \"samplingPopulation\":\n-                samplingPopulation = getLongValue(value);\n-                break;\n-            case \"samplingProbability\":\n-                samplingProbability = getLongValue(value);\n-                break;\n-            case \"hashSelectedRangeMin\":\n-                hashSelectedRangeMin = getLongValue(value);\n-                break;\n-            case \"hashSelectedRangeMax\":\n-                hashSelectedRangeMax = getLongValue(value);\n-                break;\n-            case \"hashOutputRangeMin\":\n-                hashOutputRangeMin = getLongValue(value);\n-                break;\n-            case \"hashOutputRangeMax\":\n-                hashOutputRangeMax = getLongValue(value);\n-                break;\n-            case \"sourceIPv6Address\":\n-                sourceIPv6Address = getInetAddress(value);\n-                break;\n-            case \"sourceIPv4Address\":\n-                sourceIPv4Address = getInetAddress(value);\n-                break;\n-            case \"sourceIPv6PrefixLength\":\n-                sourceIPv6PrefixLength = getLongValue(value);\n-                break;\n-            case \"sourceIPv4PrefixLength\":\n-                sourceIPv4PrefixLength = getLongValue(value);\n-                break;\n-            case \"sourceTransportPort\":\n-                Long sourceTransportPort = getLongValue(value);\n-                if (sourceTransportPort != null) {\n-                    builder.setSrcPort(setIntValue(sourceTransportPort.intValue()));\n-                }\n-                break;\n-            case \"vlanId\":\n-                vlanId = getLongValue(value);\n-                break;\n-            case \"postVlanId\":\n-                postVlanId = getLongValue(value);\n-                break;\n-            case \"dot1qVlanId\":\n-                dot1qVlanId = getLongValue(value);\n-                break;\n-            case \"dot1qCustomerVlanId\":\n-                dot1qCustomerVlanId = getLongValue(value);\n-                break;\n-            case \"postDot1qVlanId\":\n-                postDot1qVlanId = getLongValue(value);\n-                break;\n-            case \"postDot1qCustomerVlanId\":\n-                postDot1qCustomerVlanId = getLongValue(value);\n-                break;\n-            case \"flowActiveTimeout\":\n-                flowActiveTimeout = getLongValue(value);\n-                break;\n-            case \"flowInactiveTimeout\":\n-                flowInactiveTimeout = getLongValue(value);\n-                break;\n-        }\n+    public IpFixMessageBuilder() {\n     }\n \n-    byte[] buildData() {\n+    @Override\n+    public FlowMessage.Builder buildMessage(final Iterable<Value<?>> values, final RecordEnrichment enrichment) {\n+        final FlowMessage.Builder builder = FlowMessage.newBuilder();\n+\n+        Long exportTime = null;\n+        Long octetDeltaCount = null;\n+        Long postOctetDeltaCount = null;\n+        Long layer2OctetDeltaCount = null;\n+        Long postLayer2OctetDeltaCount = null;\n+        Long transportOctetDeltaCount = null;\n+        InetAddress destinationIPv6Address = null;\n+        InetAddress destinationIPv4Address = null;\n+        Long destinationIPv6PrefixLength = null;\n+        Long destinationIPv4PrefixLength = null;\n+        Instant flowStartSeconds = null;\n+        Instant flowStartMilliseconds = null;\n+        Instant flowStartMicroseconds = null;\n+        Instant flowStartNanoseconds = null;\n+        Long flowStartDeltaMicroseconds = null;\n+        Long flowStartSysUpTime = null;\n+        Instant systemInitTimeMilliseconds = null;\n+        Instant flowEndSeconds = null;\n+        Instant flowEndMilliseconds = null;\n+        Instant flowEndMicroseconds = null;\n+        Instant flowEndNanoseconds = null;\n+        Long flowEndDeltaMicroseconds = null;\n+        Long flowEndSysUpTime = null;\n+        InetAddress ipNextHopIPv6Address = null;\n+        InetAddress ipNextHopIPv4Address = null;\n+        InetAddress bgpNextHopIPv6Address = null;\n+        InetAddress bgpNextHopIPv4Address = null;\n+        Long packetDeltaCount = null;\n+        Long postPacketDeltaCount = null;\n+        Long transportPacketDeltaCount = null;\n+        Long samplingAlgorithm = null;\n+        Long samplerMode = null;\n+        Long selectorAlgorithm = null;\n+        Long samplingInterval = null;\n+        Long samplerRandomInterval = null;\n+        Long samplingFlowInterval = null;\n+        Long samplingFlowSpacing = null;\n+        Long flowSamplingTimeInterval = null;\n+        Long flowSamplingTimeSpacing = null;\n+        Long samplingSize = null;\n+        Long samplingPopulation = null;\n+        Long samplingProbability = null;\n+        Long hashSelectedRangeMin = null;\n+        Long hashSelectedRangeMax = null;\n+        Long hashOutputRangeMin = null;\n+        Long hashOutputRangeMax = null;\n+        InetAddress sourceIPv6Address = null;\n+        InetAddress sourceIPv4Address = null;\n+        Long sourceIPv6PrefixLength = null;\n+        Long sourceIPv4PrefixLength = null;\n+        Long vlanId = null;\n+        Long postVlanId = null;\n+        Long dot1qVlanId = null;\n+        Long dot1qCustomerVlanId = null;\n+        Long postDot1qVlanId = null;\n+        Long postDot1qCustomerVlanId = null;\n+        Long flowActiveTimeout = null;\n+        Long flowInactiveTimeout = null;\n+\n+        for (Value<?> value : values) {\n+            switch (value.getName()) {\n+                case \"@exportTime\":\n+                    exportTime = getLongValue(value);\n+                    break;\n+                case \"octetDeltaCount\":\n+                    octetDeltaCount = getLongValue(value);\n+                    break;\n+                case \"postOctetDeltaCount\":\n+                    postOctetDeltaCount = getLongValue(value);\n+                    break;\n+                case \"layer2OctetDeltaCount\":\n+                    layer2OctetDeltaCount = getLongValue(value);\n+                    break;\n+                case \"postLayer2OctetDeltaCount\":\n+                    postLayer2OctetDeltaCount = getLongValue(value);\n+                    break;\n+                case \"transportOctetDeltaCount\":\n+                    transportOctetDeltaCount = getLongValue(value);\n+                    break;\n+                case \"flowDirection\":\n+                    Long directionValue = getLongValue(value);\n+                    Direction direction = Direction.UNRECOGNIZED;\n+                    if (directionValue != null) {\n+                        switch (directionValue.intValue()) {\n+                            case 0:\n+                                direction = Direction.INGRESS;\n+                                break;\n+                            case 1:\n+                                direction = Direction.EGRESS;\n+                                break;\n+                        }\n+                    }\n+                    if (!direction.equals(Direction.UNRECOGNIZED)) {\n+                        builder.setDirection(direction);\n+                    }\n+                    break;\n+                case \"destinationIPv6Address\":\n+                    destinationIPv6Address = getInetAddress(value);\n+                    break;\n+                case \"destinationIPv4Address\":\n+                    destinationIPv4Address = getInetAddress(value);\n+                    break;\n+                case \"bgpDestinationAsNumber\":\n+                    getUInt64Value(value).ifPresent(builder::setDstAs);\n+                    break;\n+                case \"destinationIPv6PrefixLength\":\n+                    destinationIPv6PrefixLength = getLongValue(value);\n+                    break;\n+                case \"destinationIPv4PrefixLength\":\n+                    destinationIPv4PrefixLength = getLongValue(value);\n+                    break;\n+                case \"destinationTransportPort\":\n+                    getUInt32Value(value).ifPresent(builder::setDstPort);\n+                    break;\n+                case \"engineId\":\n+                    getUInt32Value(value).ifPresent(builder::setEngineId);\n+                    break;\n+                case \"engineType\":\n+                    getUInt32Value(value).ifPresent(builder::setEngineType);\n+                    break;\n+                case \"@recordCount\":\n+                    getUInt32Value(value).ifPresent(builder::setNumFlowRecords);\n+                    break;\n+                case \"@sequenceNumber\":\n+                    getUInt64Value(value).ifPresent(builder::setFlowSeqNum);\n+                    break;\n+                case \"ingressInterface\":\n+                    getUInt32Value(value).ifPresent(builder::setInputSnmpIfindex);\n+                    break;\n+                case \"ipVersion\":\n+                    Long ipVersion = getLongValue(value);\n+                    if (ipVersion != null) {\n+                        builder.setIpProtocolVersion(setIntValue(ipVersion.intValue()));\n+                    }\n+                    break;\n+                case \"egressInterface\":\n+                    getUInt32Value(value).ifPresent(builder::setOutputSnmpIfindex);\n+                    break;\n+                case \"protocolIdentifier\":\n+                    getUInt32Value(value).ifPresent(builder::setProtocol);\n+                    break;\n+                case \"tcpControlBits\":\n+                    getUInt32Value(value).ifPresent(builder::setTcpFlags);\n+                    break;\n+                case \"ipClassOfService\":\n+                    getUInt32Value(value).ifPresent(builder::setTos);\n+                    break;\n+                case \"@observationDomainId\":\n+                    Long observationDomainId = getLongValue(value);\n+                    if (observationDomainId != null) {\n+                        builder.setNodeIdentifier(String.valueOf(observationDomainId));\n+                    }\n+                    break;\n \n-        values.forEach(this::addField);\n+                case \"flowStartSeconds\":\n+                    flowStartSeconds = getTime(value);\n+                    break;\n+                case \"flowStartMilliseconds\":\n+                    flowStartMilliseconds = getTime(value);\n+                    break;\n+                case \"flowStartMicroseconds\":\n+                    flowStartMicroseconds = getTime(value);\n+                    break;\n+                case \"flowStartNanoseconds\":\n+                    flowStartNanoseconds = getTime(value);\n+                    break;\n+                case \"flowStartDeltaMicroseconds\":\n+                    flowStartDeltaMicroseconds = getLongValue(value);\n+                    break;\n+                case \"flowStartSysUpTime\":\n+                    flowStartSysUpTime = getLongValue(value);\n+                    break;\n+                case \"systemInitTimeMilliseconds\":\n+                    systemInitTimeMilliseconds = getTime(value);\n+                    break;\n+                case \"flowEndSeconds\":\n+                    flowEndSeconds = getTime(value);\n+                    break;\n+                case \"flowEndMilliseconds\":\n+                    flowEndMilliseconds = getTime(value);\n+                    break;\n+                case \"flowEndMicroseconds\":\n+                    flowEndMicroseconds = getTime(value);\n+                    break;\n+                case \"flowEndNanoseconds\":\n+                    flowEndNanoseconds = getTime(value);\n+                case \"flowEndDeltaMicroseconds\":\n+                    flowEndDeltaMicroseconds = getLongValue(value);\n+                    break;\n+                case \"flowEndSysUpTime\":\n+                    flowEndSysUpTime = getLongValue(value);\n+                    break;\n+                case \"ipNextHopIPv6Address\":\n+                    ipNextHopIPv6Address = getInetAddress(value);\n+                    break;\n+                case \"ipNextHopIPv4Address\":\n+                    ipNextHopIPv4Address = getInetAddress(value);\n+                    break;\n+                case \"bgpNextHopIPv6Address\":\n+                    bgpNextHopIPv6Address = getInetAddress(value);\n+                    break;\n+                case \"bgpNextHopIPv4Address\":\n+                    bgpNextHopIPv4Address = getInetAddress(value);\n+                    break;\n+                case \"packetDeltaCount\":\n+                    packetDeltaCount = getLongValue(value);\n+                    break;\n+                case \"postPacketDeltaCount\":\n+                    postPacketDeltaCount = getLongValue(value);\n+                    break;\n+                case \"transportPacketDeltaCount\":\n+                    transportPacketDeltaCount = getLongValue(value);\n+                    break;\n+                case \"samplingAlgorithm\":\n+                    samplingAlgorithm = getLongValue(value);\n+                    break;\n+                case \"samplerMode\":\n+                    samplerMode = getLongValue(value);\n+                    break;\n+                case \"selectorAlgorithm\":\n+                    selectorAlgorithm = getLongValue(value);\n+                    break;\n+                case \"samplingInterval\":\n+                    samplingInterval = getLongValue(value);\n+                    break;\n+                case \"samplerRandomInterval\":\n+                    samplerRandomInterval = getLongValue(value);\n+                    break;\n+                case \"samplingFlowInterval\":\n+                    samplingFlowInterval = getLongValue(value);\n+                    break;\n+                case \"samplingFlowSpacing\":\n+                    samplingFlowSpacing = getLongValue(value);\n+                    break;\n+                case \"flowSamplingTimeInterval\":\n+                    flowSamplingTimeInterval = getLongValue(value);\n+                    break;\n+                case \"flowSamplingTimeSpacing\":\n+                    flowSamplingTimeSpacing = getLongValue(value);\n+                    break;\n+                case \"samplingSize\":\n+                    samplingSize = getLongValue(value);\n+                    break;\n+                case \"samplingPopulation\":\n+                    samplingPopulation = getLongValue(value);\n+                    break;\n+                case \"samplingProbability\":\n+                    samplingProbability = getLongValue(value);\n+                    break;\n+                case \"hashSelectedRangeMin\":\n+                    hashSelectedRangeMin = getLongValue(value);\n+                    break;\n+                case \"hashSelectedRangeMax\":\n+                    hashSelectedRangeMax = getLongValue(value);\n+                    break;\n+                case \"hashOutputRangeMin\":\n+                    hashOutputRangeMin = getLongValue(value);\n+                    break;\n+                case \"hashOutputRangeMax\":\n+                    hashOutputRangeMax = getLongValue(value);\n+                    break;\n+                case \"sourceIPv6Address\":\n+                    sourceIPv6Address = getInetAddress(value);\n+                    break;\n+                case \"sourceIPv4Address\":\n+                    sourceIPv4Address = getInetAddress(value);\n+                    break;\n+                case \"sourceIPv6PrefixLength\":\n+                    sourceIPv6PrefixLength = getLongValue(value);\n+                    break;\n+                case \"sourceIPv4PrefixLength\":\n+                    sourceIPv4PrefixLength = getLongValue(value);\n+                    break;\n+                case \"sourceTransportPort\":\n+                    getUInt32Value(value).ifPresent(builder::setSrcPort);\n+                    break;\n+                case \"vlanId\":\n+                    vlanId = getLongValue(value);\n+                    break;\n+                case \"postVlanId\":\n+                    postVlanId = getLongValue(value);\n+                    break;\n+                case \"dot1qVlanId\":\n+                    dot1qVlanId = getLongValue(value);\n+                    break;\n+                case \"dot1qCustomerVlanId\":\n+                    dot1qCustomerVlanId = getLongValue(value);\n+                    break;\n+                case \"postDot1qVlanId\":\n+                    postDot1qVlanId = getLongValue(value);\n+                    break;\n+                case \"postDot1qCustomerVlanId\":\n+                    postDot1qCustomerVlanId = getLongValue(value);\n+                    break;\n+                case \"flowActiveTimeout\":\n+                    flowActiveTimeout = getLongValue(value);\n+                    break;\n+                case \"flowInactiveTimeout\":\n+                    flowInactiveTimeout = getLongValue(value);\n+                    break;\n+            }\n+        }\n \n         first(octetDeltaCount,\n                 postOctetDeltaCount,\n                 layer2OctetDeltaCount,\n                 postLayer2OctetDeltaCount,\n                 transportOctetDeltaCount)\n-                .ifPresent(bytes -> {\n-                    numBytes = bytes;\n-                    builder.setNumBytes(setLongValue(bytes));\n-                });\n+                .ifPresent(bytes ->\n+                    builder.setNumBytes(setLongValue(bytes))\n+                );\n \n         first(destinationIPv6Address,\n                 destinationIPv4Address).ifPresent(ipAddress -> {\n", "next_change": null}]}, "commits_in_main": [{"oid": "3352dcced0424e52de475b87840f05dff94fbec4", "message": "Merge commit", "committedDate": null}, {"oid": "f34d1195ea7ca3d51a5d3f0b4e7d149ef20c3f3e", "committedDate": "2020-10-08 07:28:32 +0200", "message": "NMS-12800: Drop flows with negative duration"}, {"oid": "7dcfa4927ebf40e48a1f62ad6837f9cb99ea57e6", "committedDate": "2021-01-15 11:20:53 +0100", "message": "NMS-13088: Adapt invalid flows instead of dropping (#3261)"}, {"oid": "bfccf974f7792fa1d64b785b2f713050e6071928", "committedDate": "2021-04-07 15:47:12 +0200", "message": "NMS-13215: Fallback config for flow timeouts"}, {"oid": "d66f3a3f9bee90b88a7721b8a6c8d4a2fe95ae06", "committedDate": "2021-06-30 13:48:43 +0200", "message": "NMS-13215: Fallback config for flow sampling interval"}, {"oid": "d202fb4f89682ce8fe85a24c3997fa4f8f0fc695", "committedDate": "2022-04-20 11:13:56 +0200", "message": "NMS-14169: Added IEs to set input and output ifIndex"}, {"oid": "ddab6036c8204535b5fc068855740acde95d8fd1", "committedDate": "2022-07-01 09:14:27 +0200", "message": "NMS-14279: Handle unknown flow direction"}, {"oid": "46c2e6206ea795198eb05cc03843f07d4b7d4c52", "committedDate": "2022-07-01 12:44:55 -0400", "message": "NMS-14467: Prefer ingressPhysicalInterface/egressPhysicalInterface over INPUT_SNMP/OUTPUT_SNMP"}, {"oid": "47c1ec367ef0db43b80413b37966df56f16794f2", "committedDate": "2022-07-05 13:40:49 -0400", "message": "Merge pull request #4969 from OpenNMS/jira/NMS-14279"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIzMDM2Mg==", "url": "https://github.com/OpenNMS/opennms/pull/2903#discussion_r390230362", "body": "Things like this would simplify if `getTypeValue` would return an `Optional`.", "bodyText": "Things like this would simplify if getTypeValue would return an Optional.", "bodyHTML": "<p dir=\"auto\">Things like this would simplify if <code>getTypeValue</code> would return an <code>Optional</code>.</p>", "author": "fooker", "createdAt": "2020-03-10T10:48:13Z", "path": "features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/IpFixMessageBuilder.java", "diffHunk": "@@ -0,0 +1,640 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+\n+package org.opennms.netmgt.telemetry.protocols.netflow.parser.transport;\n+\n+import static org.opennms.netmgt.telemetry.protocols.netflow.parser.transport.FlowMessageBuilderFactory.first;\n+import static org.opennms.netmgt.telemetry.protocols.netflow.parser.transport.FlowMessageBuilderFactory.getInetAddress;\n+import static org.opennms.netmgt.telemetry.protocols.netflow.parser.transport.FlowMessageBuilderFactory.getLongValue;\n+import static org.opennms.netmgt.telemetry.protocols.netflow.parser.transport.FlowMessageBuilderFactory.getTime;\n+import static org.opennms.netmgt.telemetry.protocols.netflow.parser.transport.FlowMessageBuilderFactory.setDoubleValue;\n+import static org.opennms.netmgt.telemetry.protocols.netflow.parser.transport.FlowMessageBuilderFactory.setIntValue;\n+import static org.opennms.netmgt.telemetry.protocols.netflow.parser.transport.FlowMessageBuilderFactory.setLongValue;\n+\n+import java.net.InetAddress;\n+import java.time.Instant;\n+import java.util.Optional;\n+\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.RecordEnrichment;\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.ie.Value;\n+import org.opennms.netmgt.telemetry.protocols.netflow.proto.Direction;\n+import org.opennms.netmgt.telemetry.protocols.netflow.proto.FlowMessageProto;\n+import org.opennms.netmgt.telemetry.protocols.netflow.proto.NetflowVersion;\n+import org.opennms.netmgt.telemetry.protocols.netflow.proto.SamplingAlgorithm;\n+\n+import com.google.common.primitives.UnsignedLong;\n+\n+class IpFixMessageBuilder {\n+\n+    private final FlowMessageProto.Builder builder;\n+    private final Iterable<Value<?>> values;\n+    private final RecordEnrichment enrichment;\n+    private Long exportTime;\n+    private Long octetDeltaCount;\n+    private Long postOctetDeltaCount;\n+    private Long layer2OctetDeltaCount;\n+    private Long postLayer2OctetDeltaCount;\n+    private Long transportOctetDeltaCount;\n+    private InetAddress destinationIPv6Address;\n+    private InetAddress destinationIPv4Address;\n+    private Long destinationIPv6PrefixLength;\n+    private Long destinationIPv4PrefixLength;\n+    private Instant flowStartSeconds;\n+    private Instant flowStartMilliseconds;\n+    private Instant flowStartMicroseconds;\n+    private Instant flowStartNanoseconds;\n+    private Long flowStartDeltaMicroseconds;\n+    private Long flowStartSysUpTime;\n+    private Instant systemInitTimeMilliseconds;\n+    private Instant flowEndSeconds;\n+    private Instant flowEndMilliseconds;\n+    private Instant flowEndMicroseconds;\n+    private Instant flowEndNanoseconds;\n+    private Long flowEndDeltaMicroseconds;\n+    private Long flowEndSysUpTime;\n+    private InetAddress ipNextHopIPv6Address;\n+    private InetAddress ipNextHopIPv4Address;\n+    private InetAddress bgpNextHopIPv6Address;\n+    private InetAddress bgpNextHopIPv4Address;\n+    private Long packetDeltaCount;\n+    private Long postPacketDeltaCount;\n+    private Long transportPacketDeltaCount;\n+    private Long samplingAlgorithm;\n+    private Long samplerMode;\n+    private Long selectorAlgorithm;\n+    private Long samplingInterval;\n+    private Long samplerRandomInterval;\n+    private Long samplingFlowInterval;\n+    private Long samplingFlowSpacing;\n+    private Long flowSamplingTimeInterval;\n+    private Long flowSamplingTimeSpacing;\n+    private Long samplingSize;\n+    private Long samplingPopulation;\n+    private Long samplingProbability;\n+    private Long hashSelectedRangeMin;\n+    private Long hashSelectedRangeMax;\n+    private Long hashOutputRangeMin;\n+    private Long hashOutputRangeMax;\n+    private InetAddress sourceIPv6Address;\n+    private InetAddress sourceIPv4Address;\n+    private Long sourceIPv6PrefixLength;\n+    private Long sourceIPv4PrefixLength;\n+    private Long vlanId;\n+    private Long postVlanId;\n+    private Long dot1qVlanId;\n+    private Long dot1qCustomerVlanId;\n+    private Long postDot1qVlanId;\n+    private Long postDot1qCustomerVlanId;\n+    private Long flowActiveTimeout;\n+    private Long flowInactiveTimeout;\n+    private Long numBytes;\n+    private Long numPackets;\n+    private Long firstSwitched;\n+    private Long lastSwitched;\n+\n+    IpFixMessageBuilder(Iterable<Value<?>> values, RecordEnrichment enrichment) {\n+        this.values = values;\n+        this.enrichment = enrichment;\n+        this.builder = FlowMessageProto.newBuilder();\n+    }\n+\n+    private void addField(Value<?> value) {\n+        switch (value.getName()) {\n+            case \"@exportTime\":\n+                exportTime = getLongValue(value);\n+                break;\n+            case \"octetDeltaCount\":\n+                octetDeltaCount = getLongValue(value);\n+                break;\n+            case \"postOctetDeltaCount\":\n+                postOctetDeltaCount = getLongValue(value);\n+                break;\n+            case \"layer2OctetDeltaCount\":\n+                layer2OctetDeltaCount = getLongValue(value);\n+                break;\n+            case \"postLayer2OctetDeltaCount\":\n+                postLayer2OctetDeltaCount = getLongValue(value);\n+                break;\n+            case \"transportOctetDeltaCount\":\n+                transportOctetDeltaCount = getLongValue(value);\n+                break;\n+            case \"flowDirection\":\n+                Long directionValue = getLongValue(value);\n+                Direction direction = Direction.UNRECOGNIZED;\n+                if (directionValue != null) {\n+                    switch (directionValue.intValue()) {\n+                        case 0:\n+                            direction = Direction.INGRESS;\n+                            break;\n+                        case 1:\n+                            direction = Direction.EGRESS;\n+                            break;\n+                    }\n+                }\n+                if (!direction.equals(Direction.UNRECOGNIZED)) {\n+                    this.builder.setDirection(direction);\n+                }\n+                break;\n+            case \"destinationIPv6Address\":\n+                destinationIPv6Address = getInetAddress(value);\n+                break;\n+            case \"destinationIPv4Address\":\n+                destinationIPv4Address = getInetAddress(value);\n+                break;\n+            case \"bgpDestinationAsNumber\":\n+                Long bgpDestinationAsNumber = getLongValue(value);\n+                if (bgpDestinationAsNumber != null) {\n+                    builder.setDstAs(setLongValue(bgpDestinationAsNumber));\n+                }\n+                break;\n+            case \"destinationIPv6PrefixLength\":\n+                destinationIPv6PrefixLength = getLongValue(value);\n+                break;\n+            case \"destinationIPv4PrefixLength\":\n+                destinationIPv4PrefixLength = getLongValue(value);\n+                break;\n+            case \"destinationTransportPort\":\n+                Long destinationTransportPort = getLongValue(value);\n+                if (destinationTransportPort != null) {\n+                    builder.setDstPort(setIntValue(destinationTransportPort.intValue()));\n+                }\n+                break;\n+            case \"engineId\":\n+                Long engineId = getLongValue(value);\n+                if (engineId != null) {\n+                    builder.setEngineId(setIntValue(engineId.intValue()));\n+                }\n+                break;\n+            case \"engineType\":\n+                Long engineType = getLongValue(value);\n+                if (engineType != null) {\n+                    builder.setEngineType(setIntValue(engineType.intValue()));\n+                }\n+                break;\n+            case \"@recordCount\":\n+                Long recordCount = getLongValue(value);\n+                if (recordCount != null) {\n+                    builder.setNumFlowRecords(setIntValue(recordCount.intValue()));\n+                }\n+                break;\n+            case \"@sequenceNumber\":\n+                Long sequenceNumber = getLongValue(value);\n+                if (sequenceNumber != null) {\n+                    builder.setFlowSeqNum(setLongValue(sequenceNumber));\n+                }\n+                break;\n+            case \"ingressInterface\":\n+                Long ingressInterface = getLongValue(value);\n+                if (ingressInterface != null) {\n+                    builder.setInputSnmpIfindex(setIntValue(ingressInterface.intValue()));\n+                }\n+                break;\n+            case \"ipVersion\":\n+                Long ipVersion = getLongValue(value);\n+                if (ipVersion != null) {\n+                    builder.setIpProtocolVersion(setIntValue(ipVersion.intValue()));\n+                }\n+                break;\n+            case \"egressInterface\":\n+                Long egressInterface = getLongValue(value);\n+                if (egressInterface != null) {\n+                    builder.setOutputSnmpIfindex(setIntValue(egressInterface.intValue()));\n+                }\n+                break;\n+            case \"protocolIdentifier\":\n+                Long protocolIdentifier = getLongValue(value);\n+                if (protocolIdentifier != null) {\n+                    builder.setProtocol(setIntValue(protocolIdentifier.intValue()));\n+                }\n+                break;\n+            case \"tcpControlBits\":\n+                Long tcpControlBits = getLongValue(value);", "originalCommit": "628f488dd99abfee27aab31b69ba5a1409717e77", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b0e90f013c5b6948e960f7eb2d66870c3c84e12a", "changed_code": [{"header": "diff --git a/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/IpFixMessageBuilder.java b/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/IpFixMessageBuilder.java\nindex de7a270412d..944b547da08 100644\n--- a/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/IpFixMessageBuilder.java\n+++ b/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/IpFixMessageBuilder.java\n", "chunk": "@@ -221,28 +437,16 @@ class IpFixMessageBuilder {\n                 }\n                 break;\n             case \"egressInterface\":\n-                Long egressInterface = getLongValue(value);\n-                if (egressInterface != null) {\n-                    builder.setOutputSnmpIfindex(setIntValue(egressInterface.intValue()));\n-                }\n+                getUInt32Value(value).ifPresent( builder::setOutputSnmpIfindex);\n                 break;\n             case \"protocolIdentifier\":\n-                Long protocolIdentifier = getLongValue(value);\n-                if (protocolIdentifier != null) {\n-                    builder.setProtocol(setIntValue(protocolIdentifier.intValue()));\n-                }\n+                getUInt32Value(value).ifPresent(builder::setProtocol);\n                 break;\n             case \"tcpControlBits\":\n-                Long tcpControlBits = getLongValue(value);\n-                if (tcpControlBits != null) {\n-                    builder.setTcpFlags(setIntValue(tcpControlBits.intValue()));\n-                }\n+                getUInt32Value(value).ifPresent(builder::setTcpFlags);\n                 break;\n             case \"ipClassOfService\":\n-                Long ipClassOfService = getLongValue(value);\n-                if (ipClassOfService != null) {\n-                    builder.setTos(setIntValue(ipClassOfService.intValue()));\n-                }\n+                getUInt32Value(value).ifPresent(builder::setTos);\n                 break;\n             case \"@observationDomainId\":\n                 Long observationDomainId = getLongValue(value);\n", "next_change": null}]}, "revised_code_in_main": {"commit": "3352dcced0424e52de475b87840f05dff94fbec4", "changed_code": [{"header": "diff --git a/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/IpFixMessageBuilder.java b/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/IpFixMessageBuilder.java\nindex de7a270412d..acfbb61a710 100644\n--- a/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/IpFixMessageBuilder.java\n+++ b/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/IpFixMessageBuilder.java\n", "chunk": "@@ -221,28 +432,16 @@ class IpFixMessageBuilder {\n                 }\n                 break;\n             case \"egressInterface\":\n-                Long egressInterface = getLongValue(value);\n-                if (egressInterface != null) {\n-                    builder.setOutputSnmpIfindex(setIntValue(egressInterface.intValue()));\n-                }\n+                getUInt32Value(value).ifPresent( builder::setOutputSnmpIfindex);\n                 break;\n             case \"protocolIdentifier\":\n-                Long protocolIdentifier = getLongValue(value);\n-                if (protocolIdentifier != null) {\n-                    builder.setProtocol(setIntValue(protocolIdentifier.intValue()));\n-                }\n+                getUInt32Value(value).ifPresent(builder::setProtocol);\n                 break;\n             case \"tcpControlBits\":\n-                Long tcpControlBits = getLongValue(value);\n-                if (tcpControlBits != null) {\n-                    builder.setTcpFlags(setIntValue(tcpControlBits.intValue()));\n-                }\n+                getUInt32Value(value).ifPresent(builder::setTcpFlags);\n                 break;\n             case \"ipClassOfService\":\n-                Long ipClassOfService = getLongValue(value);\n-                if (ipClassOfService != null) {\n-                    builder.setTos(setIntValue(ipClassOfService.intValue()));\n-                }\n+                getUInt32Value(value).ifPresent(builder::setTos);\n                 break;\n             case \"@observationDomainId\":\n                 Long observationDomainId = getLongValue(value);\n", "next_change": {"commit": "7dcfa4927ebf40e48a1f62ad6837f9cb99ea57e6", "changed_code": [{"header": "diff --git a/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/IpFixMessageBuilder.java b/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/IpFixMessageBuilder.java\nindex acfbb61a710..6ed358aa583 100644\n--- a/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/IpFixMessageBuilder.java\n+++ b/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/IpFixMessageBuilder.java\n", "chunk": "@@ -339,263 +569,15 @@ public class IpFixMessageBuilder {\n         }\n \n         // Build delta switched\n-        Long firstSwitched = builder.hasFirstSwitched() ? builder.getFirstSwitched().getValue() : null;\n-        Long lastSwitched = builder.hasLastSwitched() ? builder.getLastSwitched().getValue() : null;\n-\n         Timeout timeout = new Timeout(flowActiveTimeout, flowInactiveTimeout);\n-        timeout.setFirstSwitched(firstSwitched);\n-        timeout.setLastSwitched(lastSwitched);\n-        timeout.setNumBytes(this.numBytes);\n-        timeout.setNumPackets(this.numPackets);\n+        timeout.setFirstSwitched(builder.hasFirstSwitched() ? builder.getFirstSwitched().getValue() : null);\n+        timeout.setLastSwitched(builder.hasLastSwitched() ? builder.getLastSwitched().getValue() : null);\n+        timeout.setNumBytes(builder.getNumBytes().getValue());\n+        timeout.setNumPackets(builder.getNumPackets().getValue());\n         Long deltaSwitched = timeout.getDeltaSwitched();\n         getUInt64Value(deltaSwitched).ifPresent(builder::setDeltaSwitched);\n \n         builder.setNetflowVersion(NetflowVersion.IPFIX);\n-        return builder.build().toByteArray();\n-    }\n-\n-\n-    private void addField(Value<?> value) {\n-        switch (value.getName()) {\n-            case \"@exportTime\":\n-                exportTime = getLongValue(value);\n-                break;\n-            case \"octetDeltaCount\":\n-                octetDeltaCount = getLongValue(value);\n-                break;\n-            case \"postOctetDeltaCount\":\n-                postOctetDeltaCount = getLongValue(value);\n-                break;\n-            case \"layer2OctetDeltaCount\":\n-                layer2OctetDeltaCount = getLongValue(value);\n-                break;\n-            case \"postLayer2OctetDeltaCount\":\n-                postLayer2OctetDeltaCount = getLongValue(value);\n-                break;\n-            case \"transportOctetDeltaCount\":\n-                transportOctetDeltaCount = getLongValue(value);\n-                break;\n-            case \"flowDirection\":\n-                Long directionValue = getLongValue(value);\n-                Direction direction = Direction.UNRECOGNIZED;\n-                if (directionValue != null) {\n-                    switch (directionValue.intValue()) {\n-                        case 0:\n-                            direction = Direction.INGRESS;\n-                            break;\n-                        case 1:\n-                            direction = Direction.EGRESS;\n-                            break;\n-                    }\n-                }\n-                if (!direction.equals(Direction.UNRECOGNIZED)) {\n-                    this.builder.setDirection(direction);\n-                }\n-                break;\n-            case \"destinationIPv6Address\":\n-                destinationIPv6Address = getInetAddress(value);\n-                break;\n-            case \"destinationIPv4Address\":\n-                destinationIPv4Address = getInetAddress(value);\n-                break;\n-            case \"bgpDestinationAsNumber\":\n-                getUInt64Value(value).ifPresent(builder::setDstAs);\n-                break;\n-            case \"destinationIPv6PrefixLength\":\n-                destinationIPv6PrefixLength = getLongValue(value);\n-                break;\n-            case \"destinationIPv4PrefixLength\":\n-                destinationIPv4PrefixLength = getLongValue(value);\n-                break;\n-            case \"destinationTransportPort\":\n-                getUInt32Value(value).ifPresent(builder::setDstPort);\n-                break;\n-            case \"engineId\":\n-                getUInt32Value(value).ifPresent(builder::setEngineId);\n-                break;\n-            case \"engineType\":\n-                getUInt32Value(value).ifPresent(builder::setEngineType);\n-                break;\n-            case \"@recordCount\":\n-                getUInt32Value(value).ifPresent(builder::setNumFlowRecords);\n-                break;\n-            case \"@sequenceNumber\":\n-                getUInt64Value(value).ifPresent(builder::setFlowSeqNum);\n-                break;\n-            case \"ingressInterface\":\n-                getUInt32Value(value).ifPresent(builder::setInputSnmpIfindex);\n-                break;\n-            case \"ipVersion\":\n-                Long ipVersion = getLongValue(value);\n-                if (ipVersion != null) {\n-                    builder.setIpProtocolVersion(setIntValue(ipVersion.intValue()));\n-                }\n-                break;\n-            case \"egressInterface\":\n-                getUInt32Value(value).ifPresent( builder::setOutputSnmpIfindex);\n-                break;\n-            case \"protocolIdentifier\":\n-                getUInt32Value(value).ifPresent(builder::setProtocol);\n-                break;\n-            case \"tcpControlBits\":\n-                getUInt32Value(value).ifPresent(builder::setTcpFlags);\n-                break;\n-            case \"ipClassOfService\":\n-                getUInt32Value(value).ifPresent(builder::setTos);\n-                break;\n-            case \"@observationDomainId\":\n-                Long observationDomainId = getLongValue(value);\n-                if (observationDomainId != null) {\n-                    builder.setNodeIdentifier(String.valueOf(observationDomainId));\n-                }\n-                break;\n-\n-            case \"flowStartSeconds\":\n-                flowStartSeconds = getTime(value);\n-                break;\n-            case \"flowStartMilliseconds\":\n-                flowStartMilliseconds = getTime(value);\n-                break;\n-            case \"flowStartMicroseconds\":\n-                flowStartMicroseconds = getTime(value);\n-                break;\n-            case \"flowStartNanoseconds\":\n-                flowStartNanoseconds = getTime(value);\n-                break;\n-            case \"flowStartDeltaMicroseconds\":\n-                flowStartDeltaMicroseconds = getLongValue(value);\n-                break;\n-            case \"flowStartSysUpTime\":\n-                flowStartSysUpTime = getLongValue(value);\n-                break;\n-            case \"systemInitTimeMilliseconds\":\n-                systemInitTimeMilliseconds = getTime(value);\n-                break;\n-            case \"flowEndSeconds\":\n-                flowEndSeconds = getTime(value);\n-                break;\n-            case \"flowEndMilliseconds\":\n-                flowEndMilliseconds = getTime(value);\n-                break;\n-            case \"flowEndMicroseconds\":\n-                flowEndMicroseconds = getTime(value);\n-                break;\n-            case \"flowEndNanoseconds\":\n-                flowEndNanoseconds = getTime(value);\n-            case \"flowEndDeltaMicroseconds\":\n-                flowEndDeltaMicroseconds = getLongValue(value);\n-                break;\n-            case \"flowEndSysUpTime\":\n-                flowEndSysUpTime = getLongValue(value);\n-                break;\n-            case \"ipNextHopIPv6Address\":\n-                ipNextHopIPv6Address = getInetAddress(value);\n-                break;\n-            case \"ipNextHopIPv4Address\":\n-                ipNextHopIPv4Address = getInetAddress(value);\n-                break;\n-            case \"bgpNextHopIPv6Address\":\n-                bgpNextHopIPv6Address = getInetAddress(value);\n-                break;\n-            case \"bgpNextHopIPv4Address\":\n-                bgpNextHopIPv4Address = getInetAddress(value);\n-                break;\n-            case \"packetDeltaCount\":\n-                packetDeltaCount = getLongValue(value);\n-                break;\n-            case \"postPacketDeltaCount\":\n-                postPacketDeltaCount = getLongValue(value);\n-                break;\n-            case \"transportPacketDeltaCount\":\n-                transportPacketDeltaCount = getLongValue(value);\n-                break;\n-            case \"samplingAlgorithm\":\n-                samplingAlgorithm = getLongValue(value);\n-                break;\n-            case \"samplerMode\":\n-                samplerMode = getLongValue(value);\n-                break;\n-            case \"selectorAlgorithm\":\n-                selectorAlgorithm = getLongValue(value);\n-                break;\n-            case \"samplingInterval\":\n-                samplingInterval = getLongValue(value);\n-                break;\n-            case \"samplerRandomInterval\":\n-                samplerRandomInterval = getLongValue(value);\n-                break;\n-            case \"samplingFlowInterval\":\n-                samplingFlowInterval = getLongValue(value);\n-                break;\n-            case \"samplingFlowSpacing\":\n-                samplingFlowSpacing = getLongValue(value);\n-                break;\n-            case \"flowSamplingTimeInterval\":\n-                flowSamplingTimeInterval = getLongValue(value);\n-                break;\n-            case \"flowSamplingTimeSpacing\":\n-                flowSamplingTimeSpacing = getLongValue(value);\n-                break;\n-            case \"samplingSize\":\n-                samplingSize = getLongValue(value);\n-                break;\n-            case \"samplingPopulation\":\n-                samplingPopulation = getLongValue(value);\n-                break;\n-            case \"samplingProbability\":\n-                samplingProbability = getLongValue(value);\n-                break;\n-            case \"hashSelectedRangeMin\":\n-                hashSelectedRangeMin = getLongValue(value);\n-                break;\n-            case \"hashSelectedRangeMax\":\n-                hashSelectedRangeMax = getLongValue(value);\n-                break;\n-            case \"hashOutputRangeMin\":\n-                hashOutputRangeMin = getLongValue(value);\n-                break;\n-            case \"hashOutputRangeMax\":\n-                hashOutputRangeMax = getLongValue(value);\n-                break;\n-            case \"sourceIPv6Address\":\n-                sourceIPv6Address = getInetAddress(value);\n-                break;\n-            case \"sourceIPv4Address\":\n-                sourceIPv4Address = getInetAddress(value);\n-                break;\n-            case \"sourceIPv6PrefixLength\":\n-                sourceIPv6PrefixLength = getLongValue(value);\n-                break;\n-            case \"sourceIPv4PrefixLength\":\n-                sourceIPv4PrefixLength = getLongValue(value);\n-                break;\n-            case \"sourceTransportPort\":\n-                getUInt32Value(value).ifPresent(builder::setSrcPort);\n-                break;\n-            case \"vlanId\":\n-                vlanId = getLongValue(value);\n-                break;\n-            case \"postVlanId\":\n-                postVlanId = getLongValue(value);\n-                break;\n-            case \"dot1qVlanId\":\n-                dot1qVlanId = getLongValue(value);\n-                break;\n-            case \"dot1qCustomerVlanId\":\n-                dot1qCustomerVlanId = getLongValue(value);\n-                break;\n-            case \"postDot1qVlanId\":\n-                postDot1qVlanId = getLongValue(value);\n-                break;\n-            case \"postDot1qCustomerVlanId\":\n-                postDot1qCustomerVlanId = getLongValue(value);\n-                break;\n-            case \"flowActiveTimeout\":\n-                flowActiveTimeout = getLongValue(value);\n-                break;\n-            case \"flowInactiveTimeout\":\n-                flowInactiveTimeout = getLongValue(value);\n-                break;\n-        }\n+        return builder;\n     }\n }\n", "next_change": {"commit": "bfccf974f7792fa1d64b785b2f713050e6071928", "changed_code": [{"header": "diff --git a/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/IpFixMessageBuilder.java b/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/IpFixMessageBuilder.java\nindex 6ed358aa583..95f41df020c 100644\n--- a/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/IpFixMessageBuilder.java\n+++ b/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/IpFixMessageBuilder.java\n", "chunk": "@@ -580,4 +583,20 @@ public class IpFixMessageBuilder implements MessageBuilder {\n         builder.setNetflowVersion(NetflowVersion.IPFIX);\n         return builder;\n     }\n+\n+    public Long getFlowActiveTimeoutFallback() {\n+        return this.flowActiveTimeoutFallback;\n+    }\n+\n+    public void setFlowActiveTimeoutFallback(final Long flowActiveTimeoutFallback) {\n+        this.flowActiveTimeoutFallback = flowActiveTimeoutFallback;\n+    }\n+\n+    public Long getFlowInactiveTimeoutFallback() {\n+        return this.flowInactiveTimeoutFallback;\n+    }\n+\n+    public void setFlowInactiveTimeoutFallback(final Long flowInactiveTimeoutFallback) {\n+        this.flowInactiveTimeoutFallback = flowInactiveTimeoutFallback;\n+    }\n }\n", "next_change": {"commit": "d66f3a3f9bee90b88a7721b8a6c8d4a2fe95ae06", "changed_code": [{"header": "diff --git a/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/IpFixMessageBuilder.java b/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/IpFixMessageBuilder.java\nindex 95f41df020c..c0ee842c42f 100644\n--- a/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/IpFixMessageBuilder.java\n+++ b/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/IpFixMessageBuilder.java\n", "chunk": "@@ -599,4 +600,12 @@ public class IpFixMessageBuilder implements MessageBuilder {\n     public void setFlowInactiveTimeoutFallback(final Long flowInactiveTimeoutFallback) {\n         this.flowInactiveTimeoutFallback = flowInactiveTimeoutFallback;\n     }\n+\n+    public Long getFlowSamplingIntervalFallback() {\n+        return this.flowSamplingIntervalFallback;\n+    }\n+\n+    public void setFlowSamplingIntervalFallback(final Long flowSamplingIntervalFallback) {\n+        this.flowSamplingIntervalFallback = flowSamplingIntervalFallback;\n+    }\n }\n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "3352dcced0424e52de475b87840f05dff94fbec4", "message": "Merge commit", "committedDate": null}, {"oid": "f34d1195ea7ca3d51a5d3f0b4e7d149ef20c3f3e", "committedDate": "2020-10-08 07:28:32 +0200", "message": "NMS-12800: Drop flows with negative duration"}, {"oid": "7dcfa4927ebf40e48a1f62ad6837f9cb99ea57e6", "committedDate": "2021-01-15 11:20:53 +0100", "message": "NMS-13088: Adapt invalid flows instead of dropping (#3261)"}, {"oid": "bfccf974f7792fa1d64b785b2f713050e6071928", "committedDate": "2021-04-07 15:47:12 +0200", "message": "NMS-13215: Fallback config for flow timeouts"}, {"oid": "d66f3a3f9bee90b88a7721b8a6c8d4a2fe95ae06", "committedDate": "2021-06-30 13:48:43 +0200", "message": "NMS-13215: Fallback config for flow sampling interval"}, {"oid": "d202fb4f89682ce8fe85a24c3997fa4f8f0fc695", "committedDate": "2022-04-20 11:13:56 +0200", "message": "NMS-14169: Added IEs to set input and output ifIndex"}, {"oid": "ddab6036c8204535b5fc068855740acde95d8fd1", "committedDate": "2022-07-01 09:14:27 +0200", "message": "NMS-14279: Handle unknown flow direction"}, {"oid": "46c2e6206ea795198eb05cc03843f07d4b7d4c52", "committedDate": "2022-07-01 12:44:55 -0400", "message": "NMS-14467: Prefer ingressPhysicalInterface/egressPhysicalInterface over INPUT_SNMP/OUTPUT_SNMP"}, {"oid": "47c1ec367ef0db43b80413b37966df56f16794f2", "committedDate": "2022-07-05 13:40:49 -0400", "message": "Merge pull request #4969 from OpenNMS/jira/NMS-14279"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIzMTYyNg==", "url": "https://github.com/OpenNMS/opennms/pull/2903#discussion_r390231626", "body": "Don't use `isPresent`. This can be done by nested `first`s and single `ifPresent` which will set the value.", "bodyText": "Don't use isPresent. This can be done by nested firsts and single ifPresent which will set the value.", "bodyHTML": "<p dir=\"auto\">Don't use <code>isPresent</code>. This can be done by nested <code>first</code>s and single <code>ifPresent</code> which will set the value.</p>", "author": "fooker", "createdAt": "2020-03-10T10:50:31Z", "path": "features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/IpFixMessageBuilder.java", "diffHunk": "@@ -0,0 +1,640 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+\n+package org.opennms.netmgt.telemetry.protocols.netflow.parser.transport;\n+\n+import static org.opennms.netmgt.telemetry.protocols.netflow.parser.transport.FlowMessageBuilderFactory.first;\n+import static org.opennms.netmgt.telemetry.protocols.netflow.parser.transport.FlowMessageBuilderFactory.getInetAddress;\n+import static org.opennms.netmgt.telemetry.protocols.netflow.parser.transport.FlowMessageBuilderFactory.getLongValue;\n+import static org.opennms.netmgt.telemetry.protocols.netflow.parser.transport.FlowMessageBuilderFactory.getTime;\n+import static org.opennms.netmgt.telemetry.protocols.netflow.parser.transport.FlowMessageBuilderFactory.setDoubleValue;\n+import static org.opennms.netmgt.telemetry.protocols.netflow.parser.transport.FlowMessageBuilderFactory.setIntValue;\n+import static org.opennms.netmgt.telemetry.protocols.netflow.parser.transport.FlowMessageBuilderFactory.setLongValue;\n+\n+import java.net.InetAddress;\n+import java.time.Instant;\n+import java.util.Optional;\n+\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.RecordEnrichment;\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.ie.Value;\n+import org.opennms.netmgt.telemetry.protocols.netflow.proto.Direction;\n+import org.opennms.netmgt.telemetry.protocols.netflow.proto.FlowMessageProto;\n+import org.opennms.netmgt.telemetry.protocols.netflow.proto.NetflowVersion;\n+import org.opennms.netmgt.telemetry.protocols.netflow.proto.SamplingAlgorithm;\n+\n+import com.google.common.primitives.UnsignedLong;\n+\n+class IpFixMessageBuilder {\n+\n+    private final FlowMessageProto.Builder builder;\n+    private final Iterable<Value<?>> values;\n+    private final RecordEnrichment enrichment;\n+    private Long exportTime;\n+    private Long octetDeltaCount;\n+    private Long postOctetDeltaCount;\n+    private Long layer2OctetDeltaCount;\n+    private Long postLayer2OctetDeltaCount;\n+    private Long transportOctetDeltaCount;\n+    private InetAddress destinationIPv6Address;\n+    private InetAddress destinationIPv4Address;\n+    private Long destinationIPv6PrefixLength;\n+    private Long destinationIPv4PrefixLength;\n+    private Instant flowStartSeconds;\n+    private Instant flowStartMilliseconds;\n+    private Instant flowStartMicroseconds;\n+    private Instant flowStartNanoseconds;\n+    private Long flowStartDeltaMicroseconds;\n+    private Long flowStartSysUpTime;\n+    private Instant systemInitTimeMilliseconds;\n+    private Instant flowEndSeconds;\n+    private Instant flowEndMilliseconds;\n+    private Instant flowEndMicroseconds;\n+    private Instant flowEndNanoseconds;\n+    private Long flowEndDeltaMicroseconds;\n+    private Long flowEndSysUpTime;\n+    private InetAddress ipNextHopIPv6Address;\n+    private InetAddress ipNextHopIPv4Address;\n+    private InetAddress bgpNextHopIPv6Address;\n+    private InetAddress bgpNextHopIPv4Address;\n+    private Long packetDeltaCount;\n+    private Long postPacketDeltaCount;\n+    private Long transportPacketDeltaCount;\n+    private Long samplingAlgorithm;\n+    private Long samplerMode;\n+    private Long selectorAlgorithm;\n+    private Long samplingInterval;\n+    private Long samplerRandomInterval;\n+    private Long samplingFlowInterval;\n+    private Long samplingFlowSpacing;\n+    private Long flowSamplingTimeInterval;\n+    private Long flowSamplingTimeSpacing;\n+    private Long samplingSize;\n+    private Long samplingPopulation;\n+    private Long samplingProbability;\n+    private Long hashSelectedRangeMin;\n+    private Long hashSelectedRangeMax;\n+    private Long hashOutputRangeMin;\n+    private Long hashOutputRangeMax;\n+    private InetAddress sourceIPv6Address;\n+    private InetAddress sourceIPv4Address;\n+    private Long sourceIPv6PrefixLength;\n+    private Long sourceIPv4PrefixLength;\n+    private Long vlanId;\n+    private Long postVlanId;\n+    private Long dot1qVlanId;\n+    private Long dot1qCustomerVlanId;\n+    private Long postDot1qVlanId;\n+    private Long postDot1qCustomerVlanId;\n+    private Long flowActiveTimeout;\n+    private Long flowInactiveTimeout;\n+    private Long numBytes;\n+    private Long numPackets;\n+    private Long firstSwitched;\n+    private Long lastSwitched;\n+\n+    IpFixMessageBuilder(Iterable<Value<?>> values, RecordEnrichment enrichment) {\n+        this.values = values;\n+        this.enrichment = enrichment;\n+        this.builder = FlowMessageProto.newBuilder();\n+    }\n+\n+    private void addField(Value<?> value) {\n+        switch (value.getName()) {\n+            case \"@exportTime\":\n+                exportTime = getLongValue(value);\n+                break;\n+            case \"octetDeltaCount\":\n+                octetDeltaCount = getLongValue(value);\n+                break;\n+            case \"postOctetDeltaCount\":\n+                postOctetDeltaCount = getLongValue(value);\n+                break;\n+            case \"layer2OctetDeltaCount\":\n+                layer2OctetDeltaCount = getLongValue(value);\n+                break;\n+            case \"postLayer2OctetDeltaCount\":\n+                postLayer2OctetDeltaCount = getLongValue(value);\n+                break;\n+            case \"transportOctetDeltaCount\":\n+                transportOctetDeltaCount = getLongValue(value);\n+                break;\n+            case \"flowDirection\":\n+                Long directionValue = getLongValue(value);\n+                Direction direction = Direction.UNRECOGNIZED;\n+                if (directionValue != null) {\n+                    switch (directionValue.intValue()) {\n+                        case 0:\n+                            direction = Direction.INGRESS;\n+                            break;\n+                        case 1:\n+                            direction = Direction.EGRESS;\n+                            break;\n+                    }\n+                }\n+                if (!direction.equals(Direction.UNRECOGNIZED)) {\n+                    this.builder.setDirection(direction);\n+                }\n+                break;\n+            case \"destinationIPv6Address\":\n+                destinationIPv6Address = getInetAddress(value);\n+                break;\n+            case \"destinationIPv4Address\":\n+                destinationIPv4Address = getInetAddress(value);\n+                break;\n+            case \"bgpDestinationAsNumber\":\n+                Long bgpDestinationAsNumber = getLongValue(value);\n+                if (bgpDestinationAsNumber != null) {\n+                    builder.setDstAs(setLongValue(bgpDestinationAsNumber));\n+                }\n+                break;\n+            case \"destinationIPv6PrefixLength\":\n+                destinationIPv6PrefixLength = getLongValue(value);\n+                break;\n+            case \"destinationIPv4PrefixLength\":\n+                destinationIPv4PrefixLength = getLongValue(value);\n+                break;\n+            case \"destinationTransportPort\":\n+                Long destinationTransportPort = getLongValue(value);\n+                if (destinationTransportPort != null) {\n+                    builder.setDstPort(setIntValue(destinationTransportPort.intValue()));\n+                }\n+                break;\n+            case \"engineId\":\n+                Long engineId = getLongValue(value);\n+                if (engineId != null) {\n+                    builder.setEngineId(setIntValue(engineId.intValue()));\n+                }\n+                break;\n+            case \"engineType\":\n+                Long engineType = getLongValue(value);\n+                if (engineType != null) {\n+                    builder.setEngineType(setIntValue(engineType.intValue()));\n+                }\n+                break;\n+            case \"@recordCount\":\n+                Long recordCount = getLongValue(value);\n+                if (recordCount != null) {\n+                    builder.setNumFlowRecords(setIntValue(recordCount.intValue()));\n+                }\n+                break;\n+            case \"@sequenceNumber\":\n+                Long sequenceNumber = getLongValue(value);\n+                if (sequenceNumber != null) {\n+                    builder.setFlowSeqNum(setLongValue(sequenceNumber));\n+                }\n+                break;\n+            case \"ingressInterface\":\n+                Long ingressInterface = getLongValue(value);\n+                if (ingressInterface != null) {\n+                    builder.setInputSnmpIfindex(setIntValue(ingressInterface.intValue()));\n+                }\n+                break;\n+            case \"ipVersion\":\n+                Long ipVersion = getLongValue(value);\n+                if (ipVersion != null) {\n+                    builder.setIpProtocolVersion(setIntValue(ipVersion.intValue()));\n+                }\n+                break;\n+            case \"egressInterface\":\n+                Long egressInterface = getLongValue(value);\n+                if (egressInterface != null) {\n+                    builder.setOutputSnmpIfindex(setIntValue(egressInterface.intValue()));\n+                }\n+                break;\n+            case \"protocolIdentifier\":\n+                Long protocolIdentifier = getLongValue(value);\n+                if (protocolIdentifier != null) {\n+                    builder.setProtocol(setIntValue(protocolIdentifier.intValue()));\n+                }\n+                break;\n+            case \"tcpControlBits\":\n+                Long tcpControlBits = getLongValue(value);\n+                if (tcpControlBits != null) {\n+                    builder.setTcpFlags(setIntValue(tcpControlBits.intValue()));\n+                }\n+                break;\n+            case \"ipClassOfService\":\n+                Long ipClassOfService = getLongValue(value);\n+                if (ipClassOfService != null) {\n+                    builder.setTos(setIntValue(ipClassOfService.intValue()));\n+                }\n+                break;\n+            case \"@observationDomainId\":\n+                Long observationDomainId = getLongValue(value);\n+                if (observationDomainId != null) {\n+                    builder.setNodeIdentifier(String.valueOf(observationDomainId));\n+                }\n+                break;\n+\n+            case \"flowStartSeconds\":\n+                flowStartSeconds = getTime(value);\n+                break;\n+            case \"flowStartMilliseconds\":\n+                flowStartMilliseconds = getTime(value);\n+                break;\n+            case \"flowStartMicroseconds\":\n+                flowStartMicroseconds = getTime(value);\n+                break;\n+            case \"flowStartNanoseconds\":\n+                flowStartNanoseconds = getTime(value);\n+                break;\n+            case \"flowStartDeltaMicroseconds\":\n+                flowStartDeltaMicroseconds = getLongValue(value);\n+                break;\n+            case \"flowStartSysUpTime\":\n+                flowStartSysUpTime = getLongValue(value);\n+                break;\n+            case \"systemInitTimeMilliseconds\":\n+                systemInitTimeMilliseconds = getTime(value);\n+                break;\n+            case \"flowEndSeconds\":\n+                flowEndSeconds = getTime(value);\n+                break;\n+            case \"flowEndMilliseconds\":\n+                flowEndMilliseconds = getTime(value);\n+                break;\n+            case \"flowEndMicroseconds\":\n+                flowEndMicroseconds = getTime(value);\n+                break;\n+            case \"flowEndNanoseconds\":\n+                flowEndNanoseconds = getTime(value);\n+            case \"flowEndDeltaMicroseconds\":\n+                flowEndDeltaMicroseconds = getLongValue(value);\n+                break;\n+            case \"flowEndSysUpTime\":\n+                flowEndSysUpTime = getLongValue(value);\n+                break;\n+            case \"ipNextHopIPv6Address\":\n+                ipNextHopIPv6Address = getInetAddress(value);\n+                break;\n+            case \"ipNextHopIPv4Address\":\n+                ipNextHopIPv4Address = getInetAddress(value);\n+                break;\n+            case \"bgpNextHopIPv6Address\":\n+                bgpNextHopIPv6Address = getInetAddress(value);\n+                break;\n+            case \"bgpNextHopIPv4Address\":\n+                bgpNextHopIPv4Address = getInetAddress(value);\n+                break;\n+            case \"packetDeltaCount\":\n+                packetDeltaCount = getLongValue(value);\n+                break;\n+            case \"postPacketDeltaCount\":\n+                postPacketDeltaCount = getLongValue(value);\n+                break;\n+            case \"transportPacketDeltaCount\":\n+                transportPacketDeltaCount = getLongValue(value);\n+                break;\n+            case \"samplingAlgorithm\":\n+                samplingAlgorithm = getLongValue(value);\n+                break;\n+            case \"samplerMode\":\n+                samplerMode = getLongValue(value);\n+                break;\n+            case \"selectorAlgorithm\":\n+                selectorAlgorithm = getLongValue(value);\n+                break;\n+            case \"samplingInterval\":\n+                samplingInterval = getLongValue(value);\n+                break;\n+            case \"samplerRandomInterval\":\n+                samplerRandomInterval = getLongValue(value);\n+                break;\n+            case \"samplingFlowInterval\":\n+                samplingFlowInterval = getLongValue(value);\n+                break;\n+            case \"samplingFlowSpacing\":\n+                samplingFlowSpacing = getLongValue(value);\n+                break;\n+            case \"flowSamplingTimeInterval\":\n+                flowSamplingTimeInterval = getLongValue(value);\n+                break;\n+            case \"flowSamplingTimeSpacing\":\n+                flowSamplingTimeSpacing = getLongValue(value);\n+                break;\n+            case \"samplingSize\":\n+                samplingSize = getLongValue(value);\n+                break;\n+            case \"samplingPopulation\":\n+                samplingPopulation = getLongValue(value);\n+                break;\n+            case \"samplingProbability\":\n+                samplingProbability = getLongValue(value);\n+                break;\n+            case \"hashSelectedRangeMin\":\n+                hashSelectedRangeMin = getLongValue(value);\n+                break;\n+            case \"hashSelectedRangeMax\":\n+                hashSelectedRangeMax = getLongValue(value);\n+                break;\n+            case \"hashOutputRangeMin\":\n+                hashOutputRangeMin = getLongValue(value);\n+                break;\n+            case \"hashOutputRangeMax\":\n+                hashOutputRangeMax = getLongValue(value);\n+                break;\n+            case \"sourceIPv6Address\":\n+                sourceIPv6Address = getInetAddress(value);\n+                break;\n+            case \"sourceIPv4Address\":\n+                sourceIPv4Address = getInetAddress(value);\n+                break;\n+            case \"sourceIPv6PrefixLength\":\n+                sourceIPv6PrefixLength = getLongValue(value);\n+                break;\n+            case \"sourceIPv4PrefixLength\":\n+                sourceIPv4PrefixLength = getLongValue(value);\n+                break;\n+            case \"sourceTransportPort\":\n+                Long sourceTransportPort = getLongValue(value);\n+                if (sourceTransportPort != null) {\n+                    builder.setSrcPort(setIntValue(sourceTransportPort.intValue()));\n+                }\n+                break;\n+            case \"vlanId\":\n+                vlanId = getLongValue(value);\n+                break;\n+            case \"postVlanId\":\n+                postVlanId = getLongValue(value);\n+                break;\n+            case \"dot1qVlanId\":\n+                dot1qVlanId = getLongValue(value);\n+                break;\n+            case \"dot1qCustomerVlanId\":\n+                dot1qCustomerVlanId = getLongValue(value);\n+                break;\n+            case \"postDot1qVlanId\":\n+                postDot1qVlanId = getLongValue(value);\n+                break;\n+            case \"postDot1qCustomerVlanId\":\n+                postDot1qCustomerVlanId = getLongValue(value);\n+                break;\n+            case \"flowActiveTimeout\":\n+                flowActiveTimeout = getLongValue(value);\n+                break;\n+            case \"flowInactiveTimeout\":\n+                flowInactiveTimeout = getLongValue(value);\n+                break;\n+        }\n+    }\n+\n+    byte[] buildData() {\n+\n+        values.forEach(this::addField);\n+\n+        first(octetDeltaCount,\n+                postOctetDeltaCount,\n+                layer2OctetDeltaCount,\n+                postLayer2OctetDeltaCount,\n+                transportOctetDeltaCount)\n+                .ifPresent(bytes -> {\n+                    numBytes = bytes;\n+                    builder.setNumBytes(setLongValue(bytes));\n+                });\n+\n+        first(destinationIPv6Address,\n+                destinationIPv4Address).ifPresent(ipAddress -> {\n+            builder.setDstAddress(ipAddress.getHostAddress());\n+            enrichment.getHostnameFor(ipAddress).ifPresent(builder::setDstHostname);\n+        });\n+\n+        first(destinationIPv6PrefixLength,\n+                destinationIPv4PrefixLength)\n+                .ifPresent(prefixLen -> builder.setDstMaskLen(setIntValue(prefixLen.intValue())));\n+\n+\n+        first(ipNextHopIPv6Address,\n+                ipNextHopIPv4Address,\n+                bgpNextHopIPv6Address,\n+                bgpNextHopIPv4Address).ifPresent(ipAddress -> {\n+            builder.setNextHopAddress(ipAddress.getHostAddress());\n+            enrichment.getHostnameFor(ipAddress).ifPresent(builder::setNextHopHostname);\n+        });\n+\n+        first(sourceIPv6Address,\n+                sourceIPv4Address).ifPresent(ipAddress -> {\n+            builder.setSrcAddress(ipAddress.getHostAddress());\n+            enrichment.getHostnameFor(ipAddress).ifPresent(builder::setSrcHostname);\n+        });\n+\n+        first(sourceIPv6PrefixLength,\n+                sourceIPv4PrefixLength)\n+                .ifPresent(prefixLen -> builder.setSrcMaskLen(setIntValue(prefixLen.intValue())));\n+\n+        first(vlanId,\n+                postVlanId,\n+                dot1qVlanId,\n+                dot1qCustomerVlanId,\n+                postDot1qVlanId,\n+                postDot1qCustomerVlanId)\n+                .ifPresent(vlanId -> builder.setVlan(setIntValue(vlanId.intValue())));\n+\n+        long timeStamp = exportTime * 1000;\n+        builder.setTimestamp(timeStamp);\n+\n+        // Set first switched\n+        Long flowStartDeltaMicroseconds = this.flowStartDeltaMicroseconds != null ?\n+                this.flowStartDeltaMicroseconds + timeStamp : null;\n+        Long systemInitTimeMilliseconds = this.systemInitTimeMilliseconds != null ?\n+                this.systemInitTimeMilliseconds.toEpochMilli() : null;\n+        Long flowStartSysUpTime = this.flowStartSysUpTime != null && systemInitTimeMilliseconds != null ?\n+                this.flowStartSysUpTime + systemInitTimeMilliseconds : null;\n+\n+        Optional<Long> firstSwitchedInMilli = first(flowStartSeconds,\n+                flowStartMilliseconds,\n+                flowStartMicroseconds,\n+                flowStartNanoseconds).map(Instant::toEpochMilli);\n+        if (firstSwitchedInMilli.isPresent()) {", "originalCommit": "628f488dd99abfee27aab31b69ba5a1409717e77", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b0e90f013c5b6948e960f7eb2d66870c3c84e12a", "changed_code": [{"header": "diff --git a/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/IpFixMessageBuilder.java b/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/IpFixMessageBuilder.java\nindex de7a270412d..944b547da08 100644\n--- a/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/IpFixMessageBuilder.java\n+++ b/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/IpFixMessageBuilder.java\n", "chunk": "@@ -402,239 +603,4 @@ class IpFixMessageBuilder {\n                 break;\n         }\n     }\n-\n-    byte[] buildData() {\n-\n-        values.forEach(this::addField);\n-\n-        first(octetDeltaCount,\n-                postOctetDeltaCount,\n-                layer2OctetDeltaCount,\n-                postLayer2OctetDeltaCount,\n-                transportOctetDeltaCount)\n-                .ifPresent(bytes -> {\n-                    numBytes = bytes;\n-                    builder.setNumBytes(setLongValue(bytes));\n-                });\n-\n-        first(destinationIPv6Address,\n-                destinationIPv4Address).ifPresent(ipAddress -> {\n-            builder.setDstAddress(ipAddress.getHostAddress());\n-            enrichment.getHostnameFor(ipAddress).ifPresent(builder::setDstHostname);\n-        });\n-\n-        first(destinationIPv6PrefixLength,\n-                destinationIPv4PrefixLength)\n-                .ifPresent(prefixLen -> builder.setDstMaskLen(setIntValue(prefixLen.intValue())));\n-\n-\n-        first(ipNextHopIPv6Address,\n-                ipNextHopIPv4Address,\n-                bgpNextHopIPv6Address,\n-                bgpNextHopIPv4Address).ifPresent(ipAddress -> {\n-            builder.setNextHopAddress(ipAddress.getHostAddress());\n-            enrichment.getHostnameFor(ipAddress).ifPresent(builder::setNextHopHostname);\n-        });\n-\n-        first(sourceIPv6Address,\n-                sourceIPv4Address).ifPresent(ipAddress -> {\n-            builder.setSrcAddress(ipAddress.getHostAddress());\n-            enrichment.getHostnameFor(ipAddress).ifPresent(builder::setSrcHostname);\n-        });\n-\n-        first(sourceIPv6PrefixLength,\n-                sourceIPv4PrefixLength)\n-                .ifPresent(prefixLen -> builder.setSrcMaskLen(setIntValue(prefixLen.intValue())));\n-\n-        first(vlanId,\n-                postVlanId,\n-                dot1qVlanId,\n-                dot1qCustomerVlanId,\n-                postDot1qVlanId,\n-                postDot1qCustomerVlanId)\n-                .ifPresent(vlanId -> builder.setVlan(setIntValue(vlanId.intValue())));\n-\n-        long timeStamp = exportTime * 1000;\n-        builder.setTimestamp(timeStamp);\n-\n-        // Set first switched\n-        Long flowStartDeltaMicroseconds = this.flowStartDeltaMicroseconds != null ?\n-                this.flowStartDeltaMicroseconds + timeStamp : null;\n-        Long systemInitTimeMilliseconds = this.systemInitTimeMilliseconds != null ?\n-                this.systemInitTimeMilliseconds.toEpochMilli() : null;\n-        Long flowStartSysUpTime = this.flowStartSysUpTime != null && systemInitTimeMilliseconds != null ?\n-                this.flowStartSysUpTime + systemInitTimeMilliseconds : null;\n-\n-        Optional<Long> firstSwitchedInMilli = first(flowStartSeconds,\n-                flowStartMilliseconds,\n-                flowStartMicroseconds,\n-                flowStartNanoseconds).map(Instant::toEpochMilli);\n-        if (firstSwitchedInMilli.isPresent()) {\n-            this.firstSwitched = firstSwitchedInMilli.get();\n-            builder.setFirstSwitched(setLongValue(firstSwitchedInMilli.get()));\n-        } else {\n-            first(flowStartDeltaMicroseconds,\n-                    flowStartSysUpTime).ifPresent(firstSwitched -> {\n-                        this.firstSwitched = firstSwitched;\n-                        builder.setFirstSwitched(setLongValue(firstSwitched));\n-                    }\n-            );\n-        }\n-\n-        // Set lastSwitched\n-        Long flowEndDeltaMicroseconds = this.flowEndDeltaMicroseconds != null ?\n-                this.flowEndDeltaMicroseconds + timeStamp : null;\n-        Long flowEndSysUpTime = this.flowEndSysUpTime != null && systemInitTimeMilliseconds != null ?\n-                this.flowEndSysUpTime + systemInitTimeMilliseconds : null;\n-\n-        Optional<Long> lastSwitchedInMilli = first(flowEndSeconds,\n-                flowEndMilliseconds,\n-                flowEndMicroseconds,\n-                flowEndNanoseconds).map(Instant::toEpochMilli);\n-\n-        if(lastSwitchedInMilli.isPresent()) {\n-            builder.setLastSwitched(setLongValue(lastSwitchedInMilli.get()));\n-        } else {\n-            first(flowEndDeltaMicroseconds,\n-                    flowEndSysUpTime).ifPresent(lastSwitchedValue ->\n-                    builder.setLastSwitched(setLongValue(lastSwitchedValue))\n-            );\n-        }\n-\n-        first(packetDeltaCount,\n-                postPacketDeltaCount,\n-                transportPacketDeltaCount).ifPresent(packets -> {\n-            builder.setNumPackets(setLongValue(packets));\n-            this.numPackets = packets;\n-        });\n-\n-        SamplingAlgorithm samplingAlgorithm = SamplingAlgorithm.Unassigned;\n-        final Integer deprecatedSamplingAlgorithm = first(this.samplingAlgorithm,\n-                samplerMode)\n-                .map(Long::intValue).orElse(null);\n-        if (deprecatedSamplingAlgorithm != null) {\n-            if (deprecatedSamplingAlgorithm == 1) {\n-                samplingAlgorithm = SamplingAlgorithm.SystematicCountBasedSampling;\n-            }\n-            if (deprecatedSamplingAlgorithm == 2) {\n-                samplingAlgorithm = SamplingAlgorithm.RandomNoutOfNSampling;\n-            }\n-        }\n-\n-        final Integer selectorAlgorithm = this.selectorAlgorithm != null ? this.selectorAlgorithm.intValue() : null;\n-\n-        if (selectorAlgorithm != null) {\n-            switch (selectorAlgorithm) {\n-                case 0:\n-                    samplingAlgorithm = SamplingAlgorithm.Unassigned;\n-                    break;\n-                case 1:\n-                    samplingAlgorithm = SamplingAlgorithm.SystematicCountBasedSampling;\n-                    break;\n-                case 2:\n-                    samplingAlgorithm = SamplingAlgorithm.SystematicTimeBasedSampling;\n-                    break;\n-                case 3:\n-                    samplingAlgorithm = SamplingAlgorithm.RandomNoutOfNSampling;\n-                    break;\n-                case 4:\n-                    samplingAlgorithm = SamplingAlgorithm.UniformProbabilisticSampling;\n-                    break;\n-                case 5:\n-                    samplingAlgorithm = SamplingAlgorithm.PropertyMatchFiltering;\n-                    break;\n-                case 6:\n-                case 7:\n-                case 8:\n-                    samplingAlgorithm = SamplingAlgorithm.HashBasedFiltering;\n-                    break;\n-                case 9:\n-                    samplingAlgorithm = SamplingAlgorithm.FlowStateDependentIntermediateFlowSelectionProcess;\n-                    break;\n-            }\n-        }\n-        builder.setSamplingAlgorithm(samplingAlgorithm);\n-\n-        final Double deprecatedSamplingInterval = first(\n-                samplingInterval,\n-                samplerRandomInterval)\n-                .map(Long::doubleValue).orElse(null);\n-\n-        if (deprecatedSamplingInterval != null) {\n-            builder.setSamplingInterval(setDoubleValue(deprecatedSamplingInterval));\n-        } else {\n-            if (selectorAlgorithm != null) {\n-                switch (selectorAlgorithm) {\n-                    case 0:\n-                        break;\n-                    case 1:\n-                        Double samplingInterval = this.samplingFlowInterval != null ?\n-                                samplingFlowInterval.doubleValue() : 1.0;\n-                        Double samplingSpacing = samplingFlowSpacing != null ?\n-                                samplingFlowSpacing.doubleValue() : 0.0;\n-                        Double samplingIntervalValue = samplingInterval + samplingSpacing / samplingInterval;\n-                        builder.setSamplingInterval(setDoubleValue(samplingIntervalValue));\n-                        break;\n-                    case 2:\n-                        Double flowSamplingTimeInterval = this.flowSamplingTimeInterval != null ?\n-                                this.flowSamplingTimeInterval.doubleValue() : 1.0;\n-                        Double flowSamplingTimeSpacing = this.flowSamplingTimeSpacing != null ?\n-                                this.flowSamplingTimeSpacing.doubleValue() : 0.0;\n-                        samplingIntervalValue = flowSamplingTimeInterval + flowSamplingTimeSpacing / flowSamplingTimeSpacing;\n-                        builder.setSamplingInterval(setDoubleValue(samplingIntervalValue));\n-                        break;\n-                    case 3:\n-                        Double samplingSize = this.samplingSize != null ?\n-                                this.samplingSize.doubleValue() : 1.0;\n-                        Double samplingPopulation = this.samplingPopulation != null ?\n-                                this.samplingPopulation.doubleValue() : 1.0;\n-                        samplingIntervalValue = samplingPopulation / samplingSize;\n-                        builder.setSamplingInterval(setDoubleValue(samplingIntervalValue));\n-                        break;\n-                    case 4:\n-                        Double samplingProbability = this.samplingProbability != null ?\n-                                this.samplingProbability.doubleValue() : 1.0;\n-                        builder.setSamplingInterval(setDoubleValue(1.0 / samplingProbability));\n-                        break;\n-                    case 5:\n-                    case 6:\n-                    case 7:\n-                        UnsignedLong hashSelectedRangeMin = this.hashSelectedRangeMin != null ?\n-                                UnsignedLong.fromLongBits(this.hashSelectedRangeMin) : UnsignedLong.ZERO;\n-                        UnsignedLong hashSelectedRangeMax = this.hashSelectedRangeMax != null ?\n-                                UnsignedLong.fromLongBits(this.hashSelectedRangeMax) : UnsignedLong.MAX_VALUE;\n-                        UnsignedLong hashOutputRangeMin = this.hashOutputRangeMin != null ?\n-                                UnsignedLong.fromLongBits(this.hashOutputRangeMin) : UnsignedLong.ZERO;\n-                        UnsignedLong hashOutputRangeMax = this.hashOutputRangeMax != null ?\n-                                UnsignedLong.fromLongBits(this.hashOutputRangeMax) : UnsignedLong.MAX_VALUE;\n-                        samplingIntervalValue = (hashOutputRangeMax.minus(hashOutputRangeMin)).dividedBy(hashSelectedRangeMax.minus(hashSelectedRangeMin)).doubleValue();\n-                        builder.setSamplingInterval(setDoubleValue(samplingIntervalValue));\n-                        break;\n-                    case 8:\n-                    case 9:\n-                    default:\n-                        builder.setSamplingInterval(setDoubleValue(Double.NaN));\n-                }\n-            } else {\n-                builder.setSamplingInterval(setDoubleValue(1.0));\n-            }\n-        }\n-        Long deltaSwitched = null;\n-        if (flowActiveTimeout != null && flowInactiveTimeout != null) {\n-            long activeTimeout = flowActiveTimeout * 1000L;\n-            long inactiveTimeout = flowInactiveTimeout * 1000L;\n-            FlowMessageBuilderFactory.Timeout timeout = new FlowMessageBuilderFactory.Timeout(activeTimeout, inactiveTimeout);\n-            deltaSwitched = Optional.of(timeout)\n-                    .map(timeoutValue -> (this.numBytes > 0 || this.numPackets > 0) ? timeoutValue.active : timeout.inactive)\n-                    .map(timeoutValue -> this.lastSwitched - timeoutValue)\n-                    .map(t -> Math.max(this.lastSwitched, t)).orElse(null);\n-        }\n-        if (deltaSwitched == null && this.firstSwitched != null) {\n-            builder.setDeltaSwitched(setLongValue(firstSwitched));\n-        }\n-\n-        builder.setNetflowVersion(NetflowVersion.IPFIX);\n-        return builder.build().toByteArray();\n-    }\n-\n }\n", "next_change": null}]}, "revised_code_in_main": {"commit": "3352dcced0424e52de475b87840f05dff94fbec4", "changed_code": [{"header": "diff --git a/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/IpFixMessageBuilder.java b/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/IpFixMessageBuilder.java\nindex de7a270412d..acfbb61a710 100644\n--- a/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/IpFixMessageBuilder.java\n+++ b/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/IpFixMessageBuilder.java\n", "chunk": "@@ -402,239 +598,4 @@ class IpFixMessageBuilder {\n                 break;\n         }\n     }\n-\n-    byte[] buildData() {\n-\n-        values.forEach(this::addField);\n-\n-        first(octetDeltaCount,\n-                postOctetDeltaCount,\n-                layer2OctetDeltaCount,\n-                postLayer2OctetDeltaCount,\n-                transportOctetDeltaCount)\n-                .ifPresent(bytes -> {\n-                    numBytes = bytes;\n-                    builder.setNumBytes(setLongValue(bytes));\n-                });\n-\n-        first(destinationIPv6Address,\n-                destinationIPv4Address).ifPresent(ipAddress -> {\n-            builder.setDstAddress(ipAddress.getHostAddress());\n-            enrichment.getHostnameFor(ipAddress).ifPresent(builder::setDstHostname);\n-        });\n-\n-        first(destinationIPv6PrefixLength,\n-                destinationIPv4PrefixLength)\n-                .ifPresent(prefixLen -> builder.setDstMaskLen(setIntValue(prefixLen.intValue())));\n-\n-\n-        first(ipNextHopIPv6Address,\n-                ipNextHopIPv4Address,\n-                bgpNextHopIPv6Address,\n-                bgpNextHopIPv4Address).ifPresent(ipAddress -> {\n-            builder.setNextHopAddress(ipAddress.getHostAddress());\n-            enrichment.getHostnameFor(ipAddress).ifPresent(builder::setNextHopHostname);\n-        });\n-\n-        first(sourceIPv6Address,\n-                sourceIPv4Address).ifPresent(ipAddress -> {\n-            builder.setSrcAddress(ipAddress.getHostAddress());\n-            enrichment.getHostnameFor(ipAddress).ifPresent(builder::setSrcHostname);\n-        });\n-\n-        first(sourceIPv6PrefixLength,\n-                sourceIPv4PrefixLength)\n-                .ifPresent(prefixLen -> builder.setSrcMaskLen(setIntValue(prefixLen.intValue())));\n-\n-        first(vlanId,\n-                postVlanId,\n-                dot1qVlanId,\n-                dot1qCustomerVlanId,\n-                postDot1qVlanId,\n-                postDot1qCustomerVlanId)\n-                .ifPresent(vlanId -> builder.setVlan(setIntValue(vlanId.intValue())));\n-\n-        long timeStamp = exportTime * 1000;\n-        builder.setTimestamp(timeStamp);\n-\n-        // Set first switched\n-        Long flowStartDeltaMicroseconds = this.flowStartDeltaMicroseconds != null ?\n-                this.flowStartDeltaMicroseconds + timeStamp : null;\n-        Long systemInitTimeMilliseconds = this.systemInitTimeMilliseconds != null ?\n-                this.systemInitTimeMilliseconds.toEpochMilli() : null;\n-        Long flowStartSysUpTime = this.flowStartSysUpTime != null && systemInitTimeMilliseconds != null ?\n-                this.flowStartSysUpTime + systemInitTimeMilliseconds : null;\n-\n-        Optional<Long> firstSwitchedInMilli = first(flowStartSeconds,\n-                flowStartMilliseconds,\n-                flowStartMicroseconds,\n-                flowStartNanoseconds).map(Instant::toEpochMilli);\n-        if (firstSwitchedInMilli.isPresent()) {\n-            this.firstSwitched = firstSwitchedInMilli.get();\n-            builder.setFirstSwitched(setLongValue(firstSwitchedInMilli.get()));\n-        } else {\n-            first(flowStartDeltaMicroseconds,\n-                    flowStartSysUpTime).ifPresent(firstSwitched -> {\n-                        this.firstSwitched = firstSwitched;\n-                        builder.setFirstSwitched(setLongValue(firstSwitched));\n-                    }\n-            );\n-        }\n-\n-        // Set lastSwitched\n-        Long flowEndDeltaMicroseconds = this.flowEndDeltaMicroseconds != null ?\n-                this.flowEndDeltaMicroseconds + timeStamp : null;\n-        Long flowEndSysUpTime = this.flowEndSysUpTime != null && systemInitTimeMilliseconds != null ?\n-                this.flowEndSysUpTime + systemInitTimeMilliseconds : null;\n-\n-        Optional<Long> lastSwitchedInMilli = first(flowEndSeconds,\n-                flowEndMilliseconds,\n-                flowEndMicroseconds,\n-                flowEndNanoseconds).map(Instant::toEpochMilli);\n-\n-        if(lastSwitchedInMilli.isPresent()) {\n-            builder.setLastSwitched(setLongValue(lastSwitchedInMilli.get()));\n-        } else {\n-            first(flowEndDeltaMicroseconds,\n-                    flowEndSysUpTime).ifPresent(lastSwitchedValue ->\n-                    builder.setLastSwitched(setLongValue(lastSwitchedValue))\n-            );\n-        }\n-\n-        first(packetDeltaCount,\n-                postPacketDeltaCount,\n-                transportPacketDeltaCount).ifPresent(packets -> {\n-            builder.setNumPackets(setLongValue(packets));\n-            this.numPackets = packets;\n-        });\n-\n-        SamplingAlgorithm samplingAlgorithm = SamplingAlgorithm.Unassigned;\n-        final Integer deprecatedSamplingAlgorithm = first(this.samplingAlgorithm,\n-                samplerMode)\n-                .map(Long::intValue).orElse(null);\n-        if (deprecatedSamplingAlgorithm != null) {\n-            if (deprecatedSamplingAlgorithm == 1) {\n-                samplingAlgorithm = SamplingAlgorithm.SystematicCountBasedSampling;\n-            }\n-            if (deprecatedSamplingAlgorithm == 2) {\n-                samplingAlgorithm = SamplingAlgorithm.RandomNoutOfNSampling;\n-            }\n-        }\n-\n-        final Integer selectorAlgorithm = this.selectorAlgorithm != null ? this.selectorAlgorithm.intValue() : null;\n-\n-        if (selectorAlgorithm != null) {\n-            switch (selectorAlgorithm) {\n-                case 0:\n-                    samplingAlgorithm = SamplingAlgorithm.Unassigned;\n-                    break;\n-                case 1:\n-                    samplingAlgorithm = SamplingAlgorithm.SystematicCountBasedSampling;\n-                    break;\n-                case 2:\n-                    samplingAlgorithm = SamplingAlgorithm.SystematicTimeBasedSampling;\n-                    break;\n-                case 3:\n-                    samplingAlgorithm = SamplingAlgorithm.RandomNoutOfNSampling;\n-                    break;\n-                case 4:\n-                    samplingAlgorithm = SamplingAlgorithm.UniformProbabilisticSampling;\n-                    break;\n-                case 5:\n-                    samplingAlgorithm = SamplingAlgorithm.PropertyMatchFiltering;\n-                    break;\n-                case 6:\n-                case 7:\n-                case 8:\n-                    samplingAlgorithm = SamplingAlgorithm.HashBasedFiltering;\n-                    break;\n-                case 9:\n-                    samplingAlgorithm = SamplingAlgorithm.FlowStateDependentIntermediateFlowSelectionProcess;\n-                    break;\n-            }\n-        }\n-        builder.setSamplingAlgorithm(samplingAlgorithm);\n-\n-        final Double deprecatedSamplingInterval = first(\n-                samplingInterval,\n-                samplerRandomInterval)\n-                .map(Long::doubleValue).orElse(null);\n-\n-        if (deprecatedSamplingInterval != null) {\n-            builder.setSamplingInterval(setDoubleValue(deprecatedSamplingInterval));\n-        } else {\n-            if (selectorAlgorithm != null) {\n-                switch (selectorAlgorithm) {\n-                    case 0:\n-                        break;\n-                    case 1:\n-                        Double samplingInterval = this.samplingFlowInterval != null ?\n-                                samplingFlowInterval.doubleValue() : 1.0;\n-                        Double samplingSpacing = samplingFlowSpacing != null ?\n-                                samplingFlowSpacing.doubleValue() : 0.0;\n-                        Double samplingIntervalValue = samplingInterval + samplingSpacing / samplingInterval;\n-                        builder.setSamplingInterval(setDoubleValue(samplingIntervalValue));\n-                        break;\n-                    case 2:\n-                        Double flowSamplingTimeInterval = this.flowSamplingTimeInterval != null ?\n-                                this.flowSamplingTimeInterval.doubleValue() : 1.0;\n-                        Double flowSamplingTimeSpacing = this.flowSamplingTimeSpacing != null ?\n-                                this.flowSamplingTimeSpacing.doubleValue() : 0.0;\n-                        samplingIntervalValue = flowSamplingTimeInterval + flowSamplingTimeSpacing / flowSamplingTimeSpacing;\n-                        builder.setSamplingInterval(setDoubleValue(samplingIntervalValue));\n-                        break;\n-                    case 3:\n-                        Double samplingSize = this.samplingSize != null ?\n-                                this.samplingSize.doubleValue() : 1.0;\n-                        Double samplingPopulation = this.samplingPopulation != null ?\n-                                this.samplingPopulation.doubleValue() : 1.0;\n-                        samplingIntervalValue = samplingPopulation / samplingSize;\n-                        builder.setSamplingInterval(setDoubleValue(samplingIntervalValue));\n-                        break;\n-                    case 4:\n-                        Double samplingProbability = this.samplingProbability != null ?\n-                                this.samplingProbability.doubleValue() : 1.0;\n-                        builder.setSamplingInterval(setDoubleValue(1.0 / samplingProbability));\n-                        break;\n-                    case 5:\n-                    case 6:\n-                    case 7:\n-                        UnsignedLong hashSelectedRangeMin = this.hashSelectedRangeMin != null ?\n-                                UnsignedLong.fromLongBits(this.hashSelectedRangeMin) : UnsignedLong.ZERO;\n-                        UnsignedLong hashSelectedRangeMax = this.hashSelectedRangeMax != null ?\n-                                UnsignedLong.fromLongBits(this.hashSelectedRangeMax) : UnsignedLong.MAX_VALUE;\n-                        UnsignedLong hashOutputRangeMin = this.hashOutputRangeMin != null ?\n-                                UnsignedLong.fromLongBits(this.hashOutputRangeMin) : UnsignedLong.ZERO;\n-                        UnsignedLong hashOutputRangeMax = this.hashOutputRangeMax != null ?\n-                                UnsignedLong.fromLongBits(this.hashOutputRangeMax) : UnsignedLong.MAX_VALUE;\n-                        samplingIntervalValue = (hashOutputRangeMax.minus(hashOutputRangeMin)).dividedBy(hashSelectedRangeMax.minus(hashSelectedRangeMin)).doubleValue();\n-                        builder.setSamplingInterval(setDoubleValue(samplingIntervalValue));\n-                        break;\n-                    case 8:\n-                    case 9:\n-                    default:\n-                        builder.setSamplingInterval(setDoubleValue(Double.NaN));\n-                }\n-            } else {\n-                builder.setSamplingInterval(setDoubleValue(1.0));\n-            }\n-        }\n-        Long deltaSwitched = null;\n-        if (flowActiveTimeout != null && flowInactiveTimeout != null) {\n-            long activeTimeout = flowActiveTimeout * 1000L;\n-            long inactiveTimeout = flowInactiveTimeout * 1000L;\n-            FlowMessageBuilderFactory.Timeout timeout = new FlowMessageBuilderFactory.Timeout(activeTimeout, inactiveTimeout);\n-            deltaSwitched = Optional.of(timeout)\n-                    .map(timeoutValue -> (this.numBytes > 0 || this.numPackets > 0) ? timeoutValue.active : timeout.inactive)\n-                    .map(timeoutValue -> this.lastSwitched - timeoutValue)\n-                    .map(t -> Math.max(this.lastSwitched, t)).orElse(null);\n-        }\n-        if (deltaSwitched == null && this.firstSwitched != null) {\n-            builder.setDeltaSwitched(setLongValue(firstSwitched));\n-        }\n-\n-        builder.setNetflowVersion(NetflowVersion.IPFIX);\n-        return builder.build().toByteArray();\n-    }\n-\n }\n", "next_change": {"commit": "7dcfa4927ebf40e48a1f62ad6837f9cb99ea57e6", "changed_code": [{"header": "diff --git a/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/IpFixMessageBuilder.java b/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/IpFixMessageBuilder.java\nindex acfbb61a710..6ed358aa583 100644\n--- a/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/IpFixMessageBuilder.java\n+++ b/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/IpFixMessageBuilder.java\n", "chunk": "@@ -339,263 +569,15 @@ public class IpFixMessageBuilder {\n         }\n \n         // Build delta switched\n-        Long firstSwitched = builder.hasFirstSwitched() ? builder.getFirstSwitched().getValue() : null;\n-        Long lastSwitched = builder.hasLastSwitched() ? builder.getLastSwitched().getValue() : null;\n-\n         Timeout timeout = new Timeout(flowActiveTimeout, flowInactiveTimeout);\n-        timeout.setFirstSwitched(firstSwitched);\n-        timeout.setLastSwitched(lastSwitched);\n-        timeout.setNumBytes(this.numBytes);\n-        timeout.setNumPackets(this.numPackets);\n+        timeout.setFirstSwitched(builder.hasFirstSwitched() ? builder.getFirstSwitched().getValue() : null);\n+        timeout.setLastSwitched(builder.hasLastSwitched() ? builder.getLastSwitched().getValue() : null);\n+        timeout.setNumBytes(builder.getNumBytes().getValue());\n+        timeout.setNumPackets(builder.getNumPackets().getValue());\n         Long deltaSwitched = timeout.getDeltaSwitched();\n         getUInt64Value(deltaSwitched).ifPresent(builder::setDeltaSwitched);\n \n         builder.setNetflowVersion(NetflowVersion.IPFIX);\n-        return builder.build().toByteArray();\n-    }\n-\n-\n-    private void addField(Value<?> value) {\n-        switch (value.getName()) {\n-            case \"@exportTime\":\n-                exportTime = getLongValue(value);\n-                break;\n-            case \"octetDeltaCount\":\n-                octetDeltaCount = getLongValue(value);\n-                break;\n-            case \"postOctetDeltaCount\":\n-                postOctetDeltaCount = getLongValue(value);\n-                break;\n-            case \"layer2OctetDeltaCount\":\n-                layer2OctetDeltaCount = getLongValue(value);\n-                break;\n-            case \"postLayer2OctetDeltaCount\":\n-                postLayer2OctetDeltaCount = getLongValue(value);\n-                break;\n-            case \"transportOctetDeltaCount\":\n-                transportOctetDeltaCount = getLongValue(value);\n-                break;\n-            case \"flowDirection\":\n-                Long directionValue = getLongValue(value);\n-                Direction direction = Direction.UNRECOGNIZED;\n-                if (directionValue != null) {\n-                    switch (directionValue.intValue()) {\n-                        case 0:\n-                            direction = Direction.INGRESS;\n-                            break;\n-                        case 1:\n-                            direction = Direction.EGRESS;\n-                            break;\n-                    }\n-                }\n-                if (!direction.equals(Direction.UNRECOGNIZED)) {\n-                    this.builder.setDirection(direction);\n-                }\n-                break;\n-            case \"destinationIPv6Address\":\n-                destinationIPv6Address = getInetAddress(value);\n-                break;\n-            case \"destinationIPv4Address\":\n-                destinationIPv4Address = getInetAddress(value);\n-                break;\n-            case \"bgpDestinationAsNumber\":\n-                getUInt64Value(value).ifPresent(builder::setDstAs);\n-                break;\n-            case \"destinationIPv6PrefixLength\":\n-                destinationIPv6PrefixLength = getLongValue(value);\n-                break;\n-            case \"destinationIPv4PrefixLength\":\n-                destinationIPv4PrefixLength = getLongValue(value);\n-                break;\n-            case \"destinationTransportPort\":\n-                getUInt32Value(value).ifPresent(builder::setDstPort);\n-                break;\n-            case \"engineId\":\n-                getUInt32Value(value).ifPresent(builder::setEngineId);\n-                break;\n-            case \"engineType\":\n-                getUInt32Value(value).ifPresent(builder::setEngineType);\n-                break;\n-            case \"@recordCount\":\n-                getUInt32Value(value).ifPresent(builder::setNumFlowRecords);\n-                break;\n-            case \"@sequenceNumber\":\n-                getUInt64Value(value).ifPresent(builder::setFlowSeqNum);\n-                break;\n-            case \"ingressInterface\":\n-                getUInt32Value(value).ifPresent(builder::setInputSnmpIfindex);\n-                break;\n-            case \"ipVersion\":\n-                Long ipVersion = getLongValue(value);\n-                if (ipVersion != null) {\n-                    builder.setIpProtocolVersion(setIntValue(ipVersion.intValue()));\n-                }\n-                break;\n-            case \"egressInterface\":\n-                getUInt32Value(value).ifPresent( builder::setOutputSnmpIfindex);\n-                break;\n-            case \"protocolIdentifier\":\n-                getUInt32Value(value).ifPresent(builder::setProtocol);\n-                break;\n-            case \"tcpControlBits\":\n-                getUInt32Value(value).ifPresent(builder::setTcpFlags);\n-                break;\n-            case \"ipClassOfService\":\n-                getUInt32Value(value).ifPresent(builder::setTos);\n-                break;\n-            case \"@observationDomainId\":\n-                Long observationDomainId = getLongValue(value);\n-                if (observationDomainId != null) {\n-                    builder.setNodeIdentifier(String.valueOf(observationDomainId));\n-                }\n-                break;\n-\n-            case \"flowStartSeconds\":\n-                flowStartSeconds = getTime(value);\n-                break;\n-            case \"flowStartMilliseconds\":\n-                flowStartMilliseconds = getTime(value);\n-                break;\n-            case \"flowStartMicroseconds\":\n-                flowStartMicroseconds = getTime(value);\n-                break;\n-            case \"flowStartNanoseconds\":\n-                flowStartNanoseconds = getTime(value);\n-                break;\n-            case \"flowStartDeltaMicroseconds\":\n-                flowStartDeltaMicroseconds = getLongValue(value);\n-                break;\n-            case \"flowStartSysUpTime\":\n-                flowStartSysUpTime = getLongValue(value);\n-                break;\n-            case \"systemInitTimeMilliseconds\":\n-                systemInitTimeMilliseconds = getTime(value);\n-                break;\n-            case \"flowEndSeconds\":\n-                flowEndSeconds = getTime(value);\n-                break;\n-            case \"flowEndMilliseconds\":\n-                flowEndMilliseconds = getTime(value);\n-                break;\n-            case \"flowEndMicroseconds\":\n-                flowEndMicroseconds = getTime(value);\n-                break;\n-            case \"flowEndNanoseconds\":\n-                flowEndNanoseconds = getTime(value);\n-            case \"flowEndDeltaMicroseconds\":\n-                flowEndDeltaMicroseconds = getLongValue(value);\n-                break;\n-            case \"flowEndSysUpTime\":\n-                flowEndSysUpTime = getLongValue(value);\n-                break;\n-            case \"ipNextHopIPv6Address\":\n-                ipNextHopIPv6Address = getInetAddress(value);\n-                break;\n-            case \"ipNextHopIPv4Address\":\n-                ipNextHopIPv4Address = getInetAddress(value);\n-                break;\n-            case \"bgpNextHopIPv6Address\":\n-                bgpNextHopIPv6Address = getInetAddress(value);\n-                break;\n-            case \"bgpNextHopIPv4Address\":\n-                bgpNextHopIPv4Address = getInetAddress(value);\n-                break;\n-            case \"packetDeltaCount\":\n-                packetDeltaCount = getLongValue(value);\n-                break;\n-            case \"postPacketDeltaCount\":\n-                postPacketDeltaCount = getLongValue(value);\n-                break;\n-            case \"transportPacketDeltaCount\":\n-                transportPacketDeltaCount = getLongValue(value);\n-                break;\n-            case \"samplingAlgorithm\":\n-                samplingAlgorithm = getLongValue(value);\n-                break;\n-            case \"samplerMode\":\n-                samplerMode = getLongValue(value);\n-                break;\n-            case \"selectorAlgorithm\":\n-                selectorAlgorithm = getLongValue(value);\n-                break;\n-            case \"samplingInterval\":\n-                samplingInterval = getLongValue(value);\n-                break;\n-            case \"samplerRandomInterval\":\n-                samplerRandomInterval = getLongValue(value);\n-                break;\n-            case \"samplingFlowInterval\":\n-                samplingFlowInterval = getLongValue(value);\n-                break;\n-            case \"samplingFlowSpacing\":\n-                samplingFlowSpacing = getLongValue(value);\n-                break;\n-            case \"flowSamplingTimeInterval\":\n-                flowSamplingTimeInterval = getLongValue(value);\n-                break;\n-            case \"flowSamplingTimeSpacing\":\n-                flowSamplingTimeSpacing = getLongValue(value);\n-                break;\n-            case \"samplingSize\":\n-                samplingSize = getLongValue(value);\n-                break;\n-            case \"samplingPopulation\":\n-                samplingPopulation = getLongValue(value);\n-                break;\n-            case \"samplingProbability\":\n-                samplingProbability = getLongValue(value);\n-                break;\n-            case \"hashSelectedRangeMin\":\n-                hashSelectedRangeMin = getLongValue(value);\n-                break;\n-            case \"hashSelectedRangeMax\":\n-                hashSelectedRangeMax = getLongValue(value);\n-                break;\n-            case \"hashOutputRangeMin\":\n-                hashOutputRangeMin = getLongValue(value);\n-                break;\n-            case \"hashOutputRangeMax\":\n-                hashOutputRangeMax = getLongValue(value);\n-                break;\n-            case \"sourceIPv6Address\":\n-                sourceIPv6Address = getInetAddress(value);\n-                break;\n-            case \"sourceIPv4Address\":\n-                sourceIPv4Address = getInetAddress(value);\n-                break;\n-            case \"sourceIPv6PrefixLength\":\n-                sourceIPv6PrefixLength = getLongValue(value);\n-                break;\n-            case \"sourceIPv4PrefixLength\":\n-                sourceIPv4PrefixLength = getLongValue(value);\n-                break;\n-            case \"sourceTransportPort\":\n-                getUInt32Value(value).ifPresent(builder::setSrcPort);\n-                break;\n-            case \"vlanId\":\n-                vlanId = getLongValue(value);\n-                break;\n-            case \"postVlanId\":\n-                postVlanId = getLongValue(value);\n-                break;\n-            case \"dot1qVlanId\":\n-                dot1qVlanId = getLongValue(value);\n-                break;\n-            case \"dot1qCustomerVlanId\":\n-                dot1qCustomerVlanId = getLongValue(value);\n-                break;\n-            case \"postDot1qVlanId\":\n-                postDot1qVlanId = getLongValue(value);\n-                break;\n-            case \"postDot1qCustomerVlanId\":\n-                postDot1qCustomerVlanId = getLongValue(value);\n-                break;\n-            case \"flowActiveTimeout\":\n-                flowActiveTimeout = getLongValue(value);\n-                break;\n-            case \"flowInactiveTimeout\":\n-                flowInactiveTimeout = getLongValue(value);\n-                break;\n-        }\n+        return builder;\n     }\n }\n", "next_change": {"commit": "bfccf974f7792fa1d64b785b2f713050e6071928", "changed_code": [{"header": "diff --git a/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/IpFixMessageBuilder.java b/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/IpFixMessageBuilder.java\nindex 6ed358aa583..95f41df020c 100644\n--- a/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/IpFixMessageBuilder.java\n+++ b/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/IpFixMessageBuilder.java\n", "chunk": "@@ -580,4 +583,20 @@ public class IpFixMessageBuilder implements MessageBuilder {\n         builder.setNetflowVersion(NetflowVersion.IPFIX);\n         return builder;\n     }\n+\n+    public Long getFlowActiveTimeoutFallback() {\n+        return this.flowActiveTimeoutFallback;\n+    }\n+\n+    public void setFlowActiveTimeoutFallback(final Long flowActiveTimeoutFallback) {\n+        this.flowActiveTimeoutFallback = flowActiveTimeoutFallback;\n+    }\n+\n+    public Long getFlowInactiveTimeoutFallback() {\n+        return this.flowInactiveTimeoutFallback;\n+    }\n+\n+    public void setFlowInactiveTimeoutFallback(final Long flowInactiveTimeoutFallback) {\n+        this.flowInactiveTimeoutFallback = flowInactiveTimeoutFallback;\n+    }\n }\n", "next_change": {"commit": "d66f3a3f9bee90b88a7721b8a6c8d4a2fe95ae06", "changed_code": [{"header": "diff --git a/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/IpFixMessageBuilder.java b/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/IpFixMessageBuilder.java\nindex 95f41df020c..c0ee842c42f 100644\n--- a/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/IpFixMessageBuilder.java\n+++ b/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/IpFixMessageBuilder.java\n", "chunk": "@@ -599,4 +600,12 @@ public class IpFixMessageBuilder implements MessageBuilder {\n     public void setFlowInactiveTimeoutFallback(final Long flowInactiveTimeoutFallback) {\n         this.flowInactiveTimeoutFallback = flowInactiveTimeoutFallback;\n     }\n+\n+    public Long getFlowSamplingIntervalFallback() {\n+        return this.flowSamplingIntervalFallback;\n+    }\n+\n+    public void setFlowSamplingIntervalFallback(final Long flowSamplingIntervalFallback) {\n+        this.flowSamplingIntervalFallback = flowSamplingIntervalFallback;\n+    }\n }\n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "3352dcced0424e52de475b87840f05dff94fbec4", "message": "Merge commit", "committedDate": null}, {"oid": "f34d1195ea7ca3d51a5d3f0b4e7d149ef20c3f3e", "committedDate": "2020-10-08 07:28:32 +0200", "message": "NMS-12800: Drop flows with negative duration"}, {"oid": "7dcfa4927ebf40e48a1f62ad6837f9cb99ea57e6", "committedDate": "2021-01-15 11:20:53 +0100", "message": "NMS-13088: Adapt invalid flows instead of dropping (#3261)"}, {"oid": "bfccf974f7792fa1d64b785b2f713050e6071928", "committedDate": "2021-04-07 15:47:12 +0200", "message": "NMS-13215: Fallback config for flow timeouts"}, {"oid": "d66f3a3f9bee90b88a7721b8a6c8d4a2fe95ae06", "committedDate": "2021-06-30 13:48:43 +0200", "message": "NMS-13215: Fallback config for flow sampling interval"}, {"oid": "d202fb4f89682ce8fe85a24c3997fa4f8f0fc695", "committedDate": "2022-04-20 11:13:56 +0200", "message": "NMS-14169: Added IEs to set input and output ifIndex"}, {"oid": "ddab6036c8204535b5fc068855740acde95d8fd1", "committedDate": "2022-07-01 09:14:27 +0200", "message": "NMS-14279: Handle unknown flow direction"}, {"oid": "46c2e6206ea795198eb05cc03843f07d4b7d4c52", "committedDate": "2022-07-01 12:44:55 -0400", "message": "NMS-14467: Prefer ingressPhysicalInterface/egressPhysicalInterface over INPUT_SNMP/OUTPUT_SNMP"}, {"oid": "47c1ec367ef0db43b80413b37966df56f16794f2", "committedDate": "2022-07-05 13:40:49 -0400", "message": "Merge pull request #4969 from OpenNMS/jira/NMS-14279"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIzNDMxMA==", "url": "https://github.com/OpenNMS/opennms/pull/2903#discussion_r390234310", "body": "Oh man, this thing is quite a mess - but I don't have any idea on how to make it any better.", "bodyText": "Oh man, this thing is quite a mess - but I don't have any idea on how to make it any better.", "bodyHTML": "<p dir=\"auto\">Oh man, this thing is quite a mess - but I don't have any idea on how to make it any better.</p>", "author": "fooker", "createdAt": "2020-03-10T10:55:37Z", "path": "features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/IpFixMessageBuilder.java", "diffHunk": "@@ -0,0 +1,640 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+\n+package org.opennms.netmgt.telemetry.protocols.netflow.parser.transport;\n+\n+import static org.opennms.netmgt.telemetry.protocols.netflow.parser.transport.FlowMessageBuilderFactory.first;\n+import static org.opennms.netmgt.telemetry.protocols.netflow.parser.transport.FlowMessageBuilderFactory.getInetAddress;\n+import static org.opennms.netmgt.telemetry.protocols.netflow.parser.transport.FlowMessageBuilderFactory.getLongValue;\n+import static org.opennms.netmgt.telemetry.protocols.netflow.parser.transport.FlowMessageBuilderFactory.getTime;\n+import static org.opennms.netmgt.telemetry.protocols.netflow.parser.transport.FlowMessageBuilderFactory.setDoubleValue;\n+import static org.opennms.netmgt.telemetry.protocols.netflow.parser.transport.FlowMessageBuilderFactory.setIntValue;\n+import static org.opennms.netmgt.telemetry.protocols.netflow.parser.transport.FlowMessageBuilderFactory.setLongValue;\n+\n+import java.net.InetAddress;\n+import java.time.Instant;\n+import java.util.Optional;\n+\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.RecordEnrichment;\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.ie.Value;\n+import org.opennms.netmgt.telemetry.protocols.netflow.proto.Direction;\n+import org.opennms.netmgt.telemetry.protocols.netflow.proto.FlowMessageProto;\n+import org.opennms.netmgt.telemetry.protocols.netflow.proto.NetflowVersion;\n+import org.opennms.netmgt.telemetry.protocols.netflow.proto.SamplingAlgorithm;\n+\n+import com.google.common.primitives.UnsignedLong;\n+\n+class IpFixMessageBuilder {", "originalCommit": "628f488dd99abfee27aab31b69ba5a1409717e77", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b0e90f013c5b6948e960f7eb2d66870c3c84e12a", "changed_code": [{"header": "diff --git a/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/IpFixMessageBuilder.java b/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/IpFixMessageBuilder.java\nindex de7a270412d..944b547da08 100644\n--- a/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/IpFixMessageBuilder.java\n+++ b/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/IpFixMessageBuilder.java\n", "chunk": "@@ -42,16 +44,16 @@ import java.util.Optional;\n \n import org.opennms.netmgt.telemetry.protocols.netflow.parser.RecordEnrichment;\n import org.opennms.netmgt.telemetry.protocols.netflow.parser.ie.Value;\n-import org.opennms.netmgt.telemetry.protocols.netflow.proto.Direction;\n-import org.opennms.netmgt.telemetry.protocols.netflow.proto.FlowMessageProto;\n-import org.opennms.netmgt.telemetry.protocols.netflow.proto.NetflowVersion;\n-import org.opennms.netmgt.telemetry.protocols.netflow.proto.SamplingAlgorithm;\n+import org.opennms.netmgt.telemetry.protocols.netflow.transport.Direction;\n+import org.opennms.netmgt.telemetry.protocols.netflow.transport.FlowMessage;\n+import org.opennms.netmgt.telemetry.protocols.netflow.transport.NetflowVersion;\n+import org.opennms.netmgt.telemetry.protocols.netflow.transport.SamplingAlgorithm;\n \n import com.google.common.primitives.UnsignedLong;\n \n-class IpFixMessageBuilder {\n+public class IpFixMessageBuilder {\n \n-    private final FlowMessageProto.Builder builder;\n+    private final FlowMessage.Builder builder;\n     private final Iterable<Value<?>> values;\n     private final RecordEnrichment enrichment;\n     private Long exportTime;\n", "next_change": null}]}, "revised_code_in_main": {"commit": "3352dcced0424e52de475b87840f05dff94fbec4", "changed_code": [{"header": "diff --git a/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/IpFixMessageBuilder.java b/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/IpFixMessageBuilder.java\nindex de7a270412d..acfbb61a710 100644\n--- a/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/IpFixMessageBuilder.java\n+++ b/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/IpFixMessageBuilder.java\n", "chunk": "@@ -42,16 +44,16 @@ import java.util.Optional;\n \n import org.opennms.netmgt.telemetry.protocols.netflow.parser.RecordEnrichment;\n import org.opennms.netmgt.telemetry.protocols.netflow.parser.ie.Value;\n-import org.opennms.netmgt.telemetry.protocols.netflow.proto.Direction;\n-import org.opennms.netmgt.telemetry.protocols.netflow.proto.FlowMessageProto;\n-import org.opennms.netmgt.telemetry.protocols.netflow.proto.NetflowVersion;\n-import org.opennms.netmgt.telemetry.protocols.netflow.proto.SamplingAlgorithm;\n+import org.opennms.netmgt.telemetry.protocols.netflow.transport.Direction;\n+import org.opennms.netmgt.telemetry.protocols.netflow.transport.FlowMessage;\n+import org.opennms.netmgt.telemetry.protocols.netflow.transport.NetflowVersion;\n+import org.opennms.netmgt.telemetry.protocols.netflow.transport.SamplingAlgorithm;\n \n import com.google.common.primitives.UnsignedLong;\n \n-class IpFixMessageBuilder {\n+public class IpFixMessageBuilder {\n \n-    private final FlowMessageProto.Builder builder;\n+    private final FlowMessage.Builder builder;\n     private final Iterable<Value<?>> values;\n     private final RecordEnrichment enrichment;\n     private Long exportTime;\n", "next_change": {"commit": "7dcfa4927ebf40e48a1f62ad6837f9cb99ea57e6", "changed_code": [{"header": "diff --git a/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/IpFixMessageBuilder.java b/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/IpFixMessageBuilder.java\nindex acfbb61a710..6ed358aa583 100644\n--- a/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/IpFixMessageBuilder.java\n+++ b/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/IpFixMessageBuilder.java\n", "chunk": "@@ -51,91 +52,326 @@ import org.opennms.netmgt.telemetry.protocols.netflow.transport.SamplingAlgorith\n \n import com.google.common.primitives.UnsignedLong;\n \n-public class IpFixMessageBuilder {\n-\n-    private final FlowMessage.Builder builder;\n-    private final Iterable<Value<?>> values;\n-    private final RecordEnrichment enrichment;\n-    private Long exportTime;\n-    private Long octetDeltaCount;\n-    private Long postOctetDeltaCount;\n-    private Long layer2OctetDeltaCount;\n-    private Long postLayer2OctetDeltaCount;\n-    private Long transportOctetDeltaCount;\n-    private InetAddress destinationIPv6Address;\n-    private InetAddress destinationIPv4Address;\n-    private Long destinationIPv6PrefixLength;\n-    private Long destinationIPv4PrefixLength;\n-    private Instant flowStartSeconds;\n-    private Instant flowStartMilliseconds;\n-    private Instant flowStartMicroseconds;\n-    private Instant flowStartNanoseconds;\n-    private Long flowStartDeltaMicroseconds;\n-    private Long flowStartSysUpTime;\n-    private Instant systemInitTimeMilliseconds;\n-    private Instant flowEndSeconds;\n-    private Instant flowEndMilliseconds;\n-    private Instant flowEndMicroseconds;\n-    private Instant flowEndNanoseconds;\n-    private Long flowEndDeltaMicroseconds;\n-    private Long flowEndSysUpTime;\n-    private InetAddress ipNextHopIPv6Address;\n-    private InetAddress ipNextHopIPv4Address;\n-    private InetAddress bgpNextHopIPv6Address;\n-    private InetAddress bgpNextHopIPv4Address;\n-    private Long packetDeltaCount;\n-    private Long postPacketDeltaCount;\n-    private Long transportPacketDeltaCount;\n-    private Long samplingAlgorithm;\n-    private Long samplerMode;\n-    private Long selectorAlgorithm;\n-    private Long samplingInterval;\n-    private Long samplerRandomInterval;\n-    private Long samplingFlowInterval;\n-    private Long samplingFlowSpacing;\n-    private Long flowSamplingTimeInterval;\n-    private Long flowSamplingTimeSpacing;\n-    private Long samplingSize;\n-    private Long samplingPopulation;\n-    private Long samplingProbability;\n-    private Long hashSelectedRangeMin;\n-    private Long hashSelectedRangeMax;\n-    private Long hashOutputRangeMin;\n-    private Long hashOutputRangeMax;\n-    private InetAddress sourceIPv6Address;\n-    private InetAddress sourceIPv4Address;\n-    private Long sourceIPv6PrefixLength;\n-    private Long sourceIPv4PrefixLength;\n-    private Long vlanId;\n-    private Long postVlanId;\n-    private Long dot1qVlanId;\n-    private Long dot1qCustomerVlanId;\n-    private Long postDot1qVlanId;\n-    private Long postDot1qCustomerVlanId;\n-    private Long flowActiveTimeout;\n-    private Long flowInactiveTimeout;\n-    private Long numBytes;\n-    private Long numPackets;\n-\n-    public IpFixMessageBuilder(Iterable<Value<?>> values, RecordEnrichment enrichment) {\n-        this.values = values;\n-        this.enrichment = enrichment;\n-        this.builder = FlowMessage.newBuilder();\n+public class IpFixMessageBuilder implements MessageBuilder {\n+\n+    public IpFixMessageBuilder() {\n     }\n \n-    public byte[] buildData() {\n+    @Override\n+    public FlowMessage.Builder buildMessage(final Iterable<Value<?>> values, final RecordEnrichment enrichment) {\n+        final FlowMessage.Builder builder = FlowMessage.newBuilder();\n+\n+        Long exportTime = null;\n+        Long octetDeltaCount = null;\n+        Long postOctetDeltaCount = null;\n+        Long layer2OctetDeltaCount = null;\n+        Long postLayer2OctetDeltaCount = null;\n+        Long transportOctetDeltaCount = null;\n+        InetAddress destinationIPv6Address = null;\n+        InetAddress destinationIPv4Address = null;\n+        Long destinationIPv6PrefixLength = null;\n+        Long destinationIPv4PrefixLength = null;\n+        Instant flowStartSeconds = null;\n+        Instant flowStartMilliseconds = null;\n+        Instant flowStartMicroseconds = null;\n+        Instant flowStartNanoseconds = null;\n+        Long flowStartDeltaMicroseconds = null;\n+        Long flowStartSysUpTime = null;\n+        Instant systemInitTimeMilliseconds = null;\n+        Instant flowEndSeconds = null;\n+        Instant flowEndMilliseconds = null;\n+        Instant flowEndMicroseconds = null;\n+        Instant flowEndNanoseconds = null;\n+        Long flowEndDeltaMicroseconds = null;\n+        Long flowEndSysUpTime = null;\n+        InetAddress ipNextHopIPv6Address = null;\n+        InetAddress ipNextHopIPv4Address = null;\n+        InetAddress bgpNextHopIPv6Address = null;\n+        InetAddress bgpNextHopIPv4Address = null;\n+        Long packetDeltaCount = null;\n+        Long postPacketDeltaCount = null;\n+        Long transportPacketDeltaCount = null;\n+        Long samplingAlgorithm = null;\n+        Long samplerMode = null;\n+        Long selectorAlgorithm = null;\n+        Long samplingInterval = null;\n+        Long samplerRandomInterval = null;\n+        Long samplingFlowInterval = null;\n+        Long samplingFlowSpacing = null;\n+        Long flowSamplingTimeInterval = null;\n+        Long flowSamplingTimeSpacing = null;\n+        Long samplingSize = null;\n+        Long samplingPopulation = null;\n+        Long samplingProbability = null;\n+        Long hashSelectedRangeMin = null;\n+        Long hashSelectedRangeMax = null;\n+        Long hashOutputRangeMin = null;\n+        Long hashOutputRangeMax = null;\n+        InetAddress sourceIPv6Address = null;\n+        InetAddress sourceIPv4Address = null;\n+        Long sourceIPv6PrefixLength = null;\n+        Long sourceIPv4PrefixLength = null;\n+        Long vlanId = null;\n+        Long postVlanId = null;\n+        Long dot1qVlanId = null;\n+        Long dot1qCustomerVlanId = null;\n+        Long postDot1qVlanId = null;\n+        Long postDot1qCustomerVlanId = null;\n+        Long flowActiveTimeout = null;\n+        Long flowInactiveTimeout = null;\n+\n+        for (Value<?> value : values) {\n+            switch (value.getName()) {\n+                case \"@exportTime\":\n+                    exportTime = getLongValue(value);\n+                    break;\n+                case \"octetDeltaCount\":\n+                    octetDeltaCount = getLongValue(value);\n+                    break;\n+                case \"postOctetDeltaCount\":\n+                    postOctetDeltaCount = getLongValue(value);\n+                    break;\n+                case \"layer2OctetDeltaCount\":\n+                    layer2OctetDeltaCount = getLongValue(value);\n+                    break;\n+                case \"postLayer2OctetDeltaCount\":\n+                    postLayer2OctetDeltaCount = getLongValue(value);\n+                    break;\n+                case \"transportOctetDeltaCount\":\n+                    transportOctetDeltaCount = getLongValue(value);\n+                    break;\n+                case \"flowDirection\":\n+                    Long directionValue = getLongValue(value);\n+                    Direction direction = Direction.UNRECOGNIZED;\n+                    if (directionValue != null) {\n+                        switch (directionValue.intValue()) {\n+                            case 0:\n+                                direction = Direction.INGRESS;\n+                                break;\n+                            case 1:\n+                                direction = Direction.EGRESS;\n+                                break;\n+                        }\n+                    }\n+                    if (!direction.equals(Direction.UNRECOGNIZED)) {\n+                        builder.setDirection(direction);\n+                    }\n+                    break;\n+                case \"destinationIPv6Address\":\n+                    destinationIPv6Address = getInetAddress(value);\n+                    break;\n+                case \"destinationIPv4Address\":\n+                    destinationIPv4Address = getInetAddress(value);\n+                    break;\n+                case \"bgpDestinationAsNumber\":\n+                    getUInt64Value(value).ifPresent(builder::setDstAs);\n+                    break;\n+                case \"destinationIPv6PrefixLength\":\n+                    destinationIPv6PrefixLength = getLongValue(value);\n+                    break;\n+                case \"destinationIPv4PrefixLength\":\n+                    destinationIPv4PrefixLength = getLongValue(value);\n+                    break;\n+                case \"destinationTransportPort\":\n+                    getUInt32Value(value).ifPresent(builder::setDstPort);\n+                    break;\n+                case \"engineId\":\n+                    getUInt32Value(value).ifPresent(builder::setEngineId);\n+                    break;\n+                case \"engineType\":\n+                    getUInt32Value(value).ifPresent(builder::setEngineType);\n+                    break;\n+                case \"@recordCount\":\n+                    getUInt32Value(value).ifPresent(builder::setNumFlowRecords);\n+                    break;\n+                case \"@sequenceNumber\":\n+                    getUInt64Value(value).ifPresent(builder::setFlowSeqNum);\n+                    break;\n+                case \"ingressInterface\":\n+                    getUInt32Value(value).ifPresent(builder::setInputSnmpIfindex);\n+                    break;\n+                case \"ipVersion\":\n+                    Long ipVersion = getLongValue(value);\n+                    if (ipVersion != null) {\n+                        builder.setIpProtocolVersion(setIntValue(ipVersion.intValue()));\n+                    }\n+                    break;\n+                case \"egressInterface\":\n+                    getUInt32Value(value).ifPresent(builder::setOutputSnmpIfindex);\n+                    break;\n+                case \"protocolIdentifier\":\n+                    getUInt32Value(value).ifPresent(builder::setProtocol);\n+                    break;\n+                case \"tcpControlBits\":\n+                    getUInt32Value(value).ifPresent(builder::setTcpFlags);\n+                    break;\n+                case \"ipClassOfService\":\n+                    getUInt32Value(value).ifPresent(builder::setTos);\n+                    break;\n+                case \"@observationDomainId\":\n+                    Long observationDomainId = getLongValue(value);\n+                    if (observationDomainId != null) {\n+                        builder.setNodeIdentifier(String.valueOf(observationDomainId));\n+                    }\n+                    break;\n \n-        values.forEach(this::addField);\n+                case \"flowStartSeconds\":\n+                    flowStartSeconds = getTime(value);\n+                    break;\n+                case \"flowStartMilliseconds\":\n+                    flowStartMilliseconds = getTime(value);\n+                    break;\n+                case \"flowStartMicroseconds\":\n+                    flowStartMicroseconds = getTime(value);\n+                    break;\n+                case \"flowStartNanoseconds\":\n+                    flowStartNanoseconds = getTime(value);\n+                    break;\n+                case \"flowStartDeltaMicroseconds\":\n+                    flowStartDeltaMicroseconds = getLongValue(value);\n+                    break;\n+                case \"flowStartSysUpTime\":\n+                    flowStartSysUpTime = getLongValue(value);\n+                    break;\n+                case \"systemInitTimeMilliseconds\":\n+                    systemInitTimeMilliseconds = getTime(value);\n+                    break;\n+                case \"flowEndSeconds\":\n+                    flowEndSeconds = getTime(value);\n+                    break;\n+                case \"flowEndMilliseconds\":\n+                    flowEndMilliseconds = getTime(value);\n+                    break;\n+                case \"flowEndMicroseconds\":\n+                    flowEndMicroseconds = getTime(value);\n+                    break;\n+                case \"flowEndNanoseconds\":\n+                    flowEndNanoseconds = getTime(value);\n+                case \"flowEndDeltaMicroseconds\":\n+                    flowEndDeltaMicroseconds = getLongValue(value);\n+                    break;\n+                case \"flowEndSysUpTime\":\n+                    flowEndSysUpTime = getLongValue(value);\n+                    break;\n+                case \"ipNextHopIPv6Address\":\n+                    ipNextHopIPv6Address = getInetAddress(value);\n+                    break;\n+                case \"ipNextHopIPv4Address\":\n+                    ipNextHopIPv4Address = getInetAddress(value);\n+                    break;\n+                case \"bgpNextHopIPv6Address\":\n+                    bgpNextHopIPv6Address = getInetAddress(value);\n+                    break;\n+                case \"bgpNextHopIPv4Address\":\n+                    bgpNextHopIPv4Address = getInetAddress(value);\n+                    break;\n+                case \"packetDeltaCount\":\n+                    packetDeltaCount = getLongValue(value);\n+                    break;\n+                case \"postPacketDeltaCount\":\n+                    postPacketDeltaCount = getLongValue(value);\n+                    break;\n+                case \"transportPacketDeltaCount\":\n+                    transportPacketDeltaCount = getLongValue(value);\n+                    break;\n+                case \"samplingAlgorithm\":\n+                    samplingAlgorithm = getLongValue(value);\n+                    break;\n+                case \"samplerMode\":\n+                    samplerMode = getLongValue(value);\n+                    break;\n+                case \"selectorAlgorithm\":\n+                    selectorAlgorithm = getLongValue(value);\n+                    break;\n+                case \"samplingInterval\":\n+                    samplingInterval = getLongValue(value);\n+                    break;\n+                case \"samplerRandomInterval\":\n+                    samplerRandomInterval = getLongValue(value);\n+                    break;\n+                case \"samplingFlowInterval\":\n+                    samplingFlowInterval = getLongValue(value);\n+                    break;\n+                case \"samplingFlowSpacing\":\n+                    samplingFlowSpacing = getLongValue(value);\n+                    break;\n+                case \"flowSamplingTimeInterval\":\n+                    flowSamplingTimeInterval = getLongValue(value);\n+                    break;\n+                case \"flowSamplingTimeSpacing\":\n+                    flowSamplingTimeSpacing = getLongValue(value);\n+                    break;\n+                case \"samplingSize\":\n+                    samplingSize = getLongValue(value);\n+                    break;\n+                case \"samplingPopulation\":\n+                    samplingPopulation = getLongValue(value);\n+                    break;\n+                case \"samplingProbability\":\n+                    samplingProbability = getLongValue(value);\n+                    break;\n+                case \"hashSelectedRangeMin\":\n+                    hashSelectedRangeMin = getLongValue(value);\n+                    break;\n+                case \"hashSelectedRangeMax\":\n+                    hashSelectedRangeMax = getLongValue(value);\n+                    break;\n+                case \"hashOutputRangeMin\":\n+                    hashOutputRangeMin = getLongValue(value);\n+                    break;\n+                case \"hashOutputRangeMax\":\n+                    hashOutputRangeMax = getLongValue(value);\n+                    break;\n+                case \"sourceIPv6Address\":\n+                    sourceIPv6Address = getInetAddress(value);\n+                    break;\n+                case \"sourceIPv4Address\":\n+                    sourceIPv4Address = getInetAddress(value);\n+                    break;\n+                case \"sourceIPv6PrefixLength\":\n+                    sourceIPv6PrefixLength = getLongValue(value);\n+                    break;\n+                case \"sourceIPv4PrefixLength\":\n+                    sourceIPv4PrefixLength = getLongValue(value);\n+                    break;\n+                case \"sourceTransportPort\":\n+                    getUInt32Value(value).ifPresent(builder::setSrcPort);\n+                    break;\n+                case \"vlanId\":\n+                    vlanId = getLongValue(value);\n+                    break;\n+                case \"postVlanId\":\n+                    postVlanId = getLongValue(value);\n+                    break;\n+                case \"dot1qVlanId\":\n+                    dot1qVlanId = getLongValue(value);\n+                    break;\n+                case \"dot1qCustomerVlanId\":\n+                    dot1qCustomerVlanId = getLongValue(value);\n+                    break;\n+                case \"postDot1qVlanId\":\n+                    postDot1qVlanId = getLongValue(value);\n+                    break;\n+                case \"postDot1qCustomerVlanId\":\n+                    postDot1qCustomerVlanId = getLongValue(value);\n+                    break;\n+                case \"flowActiveTimeout\":\n+                    flowActiveTimeout = getLongValue(value);\n+                    break;\n+                case \"flowInactiveTimeout\":\n+                    flowInactiveTimeout = getLongValue(value);\n+                    break;\n+            }\n+        }\n \n         first(octetDeltaCount,\n                 postOctetDeltaCount,\n                 layer2OctetDeltaCount,\n                 postLayer2OctetDeltaCount,\n                 transportOctetDeltaCount)\n-                .ifPresent(bytes -> {\n-                    numBytes = bytes;\n-                    builder.setNumBytes(setLongValue(bytes));\n-                });\n+                .ifPresent(bytes ->\n+                    builder.setNumBytes(setLongValue(bytes))\n+                );\n \n         first(destinationIPv6Address,\n                 destinationIPv4Address).ifPresent(ipAddress -> {\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "3352dcced0424e52de475b87840f05dff94fbec4", "message": "Merge commit", "committedDate": null}, {"oid": "f34d1195ea7ca3d51a5d3f0b4e7d149ef20c3f3e", "committedDate": "2020-10-08 07:28:32 +0200", "message": "NMS-12800: Drop flows with negative duration"}, {"oid": "7dcfa4927ebf40e48a1f62ad6837f9cb99ea57e6", "committedDate": "2021-01-15 11:20:53 +0100", "message": "NMS-13088: Adapt invalid flows instead of dropping (#3261)"}, {"oid": "bfccf974f7792fa1d64b785b2f713050e6071928", "committedDate": "2021-04-07 15:47:12 +0200", "message": "NMS-13215: Fallback config for flow timeouts"}, {"oid": "d66f3a3f9bee90b88a7721b8a6c8d4a2fe95ae06", "committedDate": "2021-06-30 13:48:43 +0200", "message": "NMS-13215: Fallback config for flow sampling interval"}, {"oid": "d202fb4f89682ce8fe85a24c3997fa4f8f0fc695", "committedDate": "2022-04-20 11:13:56 +0200", "message": "NMS-14169: Added IEs to set input and output ifIndex"}, {"oid": "ddab6036c8204535b5fc068855740acde95d8fd1", "committedDate": "2022-07-01 09:14:27 +0200", "message": "NMS-14279: Handle unknown flow direction"}, {"oid": "46c2e6206ea795198eb05cc03843f07d4b7d4c52", "committedDate": "2022-07-01 12:44:55 -0400", "message": "NMS-14467: Prefer ingressPhysicalInterface/egressPhysicalInterface over INPUT_SNMP/OUTPUT_SNMP"}, {"oid": "47c1ec367ef0db43b80413b37966df56f16794f2", "committedDate": "2022-07-05 13:40:49 -0400", "message": "Merge pull request #4969 from OpenNMS/jira/NMS-14279"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIzNjQ3MQ==", "url": "https://github.com/OpenNMS/opennms/pull/2903#discussion_r390236471", "body": "Please do not commit stuff like this - makes review more hard...", "bodyText": "Please do not commit stuff like this - makes review more hard...", "bodyHTML": "<p dir=\"auto\">Please do not commit stuff like this - makes review more hard...</p>", "author": "fooker", "createdAt": "2020-03-10T10:59:30Z", "path": "features/telemetry/protocols/sflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/sflow/adapter/SFlowConverter.java", "diffHunk": "@@ -74,4 +74,5 @@ private static RuntimeException invalidDocument() {\n \n         return result;\n     }\n+", "originalCommit": "628f488dd99abfee27aab31b69ba5a1409717e77", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b0e90f013c5b6948e960f7eb2d66870c3c84e12a", "changed_code": [{"header": "diff --git a/features/telemetry/protocols/sflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/sflow/adapter/SFlowConverter.java b/features/telemetry/protocols/sflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/sflow/adapter/SFlowConverter.java\nindex 63647aacfbb..3c4747f5be1 100644\n--- a/features/telemetry/protocols/sflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/sflow/adapter/SFlowConverter.java\n+++ b/features/telemetry/protocols/sflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/sflow/adapter/SFlowConverter.java\n", "chunk": "@@ -74,5 +74,4 @@ public class SFlowConverter implements Converter<BsonDocument> {\n \n         return result;\n     }\n-\n }\n", "next_change": null}]}, "revised_code_in_main": {"commit": "3352dcced0424e52de475b87840f05dff94fbec4", "changed_code": [{"header": "diff --git a/features/telemetry/protocols/sflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/sflow/adapter/SFlowConverter.java b/features/telemetry/protocols/sflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/sflow/adapter/SFlowConverter.java\nindex 63647aacfbb..3c4747f5be1 100644\n--- a/features/telemetry/protocols/sflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/sflow/adapter/SFlowConverter.java\n+++ b/features/telemetry/protocols/sflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/sflow/adapter/SFlowConverter.java\n", "chunk": "@@ -74,5 +74,4 @@ public class SFlowConverter implements Converter<BsonDocument> {\n \n         return result;\n     }\n-\n }\n", "next_change": {"commit": "78ce7c55c0d1988f90dfa22ce33846fb3d0fa53d", "changed_code": [{"header": "diff --git a/features/telemetry/protocols/sflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/sflow/adapter/SFlowConverter.java b/features/telemetry/protocols/sflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/sflow/adapter/SFlowConverter.java\nindex 3c4747f5be1..0960ff8b68e 100644\n--- a/features/telemetry/protocols/sflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/sflow/adapter/SFlowConverter.java\n+++ b/features/telemetry/protocols/sflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/sflow/adapter/SFlowConverter.java\n", "chunk": "@@ -67,7 +68,7 @@ public class SFlowConverter implements Converter<BsonDocument> {\n                            get(sampleDocument, \"data\", \"flows\", \"0:3\"),\n                            get(sampleDocument, \"data\", \"flows\", \"0:4\")).isPresent()) {\n                     // Handle only flows containing IP related records\n-                    result.add(new SFlow(header, getDocument(sampleDocument, \"data\").orElseThrow(SFlowConverter::invalidDocument)));\n+                    result.add(new SFlow(header, getDocument(sampleDocument, \"data\").orElseThrow(SFlowConverter::invalidDocument), receivedAt));\n                 }\n             }\n         }\n", "next_change": {"commit": "bd3afc72cd09053d307d383e58ff243a991bb3ef", "changed_code": [{"header": "diff --git a/features/telemetry/protocols/sflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/sflow/adapter/SFlowConverter.java b/features/telemetry/protocols/sflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/sflow/adapter/SFlowConverter.java\ndeleted file mode 100644\nindex 0960ff8b68e..00000000000\n--- a/features/telemetry/protocols/sflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/sflow/adapter/SFlowConverter.java\n+++ /dev/null\n", "chunk": "@@ -1,78 +0,0 @@\n-/*******************************************************************************\n- * This file is part of OpenNMS(R).\n- *\n- * Copyright (C) 2017-2017 The OpenNMS Group, Inc.\n- * OpenNMS(R) is Copyright (C) 1999-2017 The OpenNMS Group, Inc.\n- *\n- * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n- *\n- * OpenNMS(R) is free software: you can redistribute it and/or modify\n- * it under the terms of the GNU Affero General Public License as published\n- * by the Free Software Foundation, either version 3 of the License,\n- * or (at your option) any later version.\n- *\n- * OpenNMS(R) is distributed in the hope that it will be useful,\n- * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n- * GNU Affero General Public License for more details.\n- *\n- * You should have received a copy of the GNU Affero General Public License\n- * along with OpenNMS(R).  If not, see:\n- *      http://www.gnu.org/licenses/\n- *\n- * For more information contact:\n- *     OpenNMS(R) Licensing <license@opennms.org>\n- *     http://www.opennms.org/\n- *     http://www.opennms.com/\n- *******************************************************************************/\n-\n-package org.opennms.netmgt.telemetry.protocols.sflow.adapter;\n-\n-import static org.opennms.netmgt.telemetry.protocols.common.utils.BsonUtils.first;\n-import static org.opennms.netmgt.telemetry.protocols.common.utils.BsonUtils.getArray;\n-import static org.opennms.netmgt.telemetry.protocols.common.utils.BsonUtils.getString;\n-import static org.opennms.netmgt.telemetry.protocols.common.utils.BsonUtils.getDocument;\n-import static org.opennms.netmgt.telemetry.protocols.common.utils.BsonUtils.get;\n-\n-import java.time.Instant;\n-import java.util.List;\n-\n-import org.bson.BsonDocument;\n-import org.bson.BsonValue;\n-import org.opennms.netmgt.flows.api.Converter;\n-import org.opennms.netmgt.flows.api.Flow;\n-\n-import com.google.common.collect.Lists;\n-\n-public class SFlowConverter implements Converter<BsonDocument> {\n-\n-    private static RuntimeException invalidDocument() {\n-        throw new RuntimeException(\"Invalid Document\");\n-    }\n-\n-    @Override\n-    public List<Flow> convert(final BsonDocument packet, final Instant receivedAt) {\n-        final List<Flow> result = Lists.newLinkedList();\n-\n-        final SFlow.Header header = new SFlow.Header(packet);\n-\n-        for (final BsonValue sample : getArray(packet, \"data\", \"samples\").orElseThrow(SFlowConverter::invalidDocument)) {\n-            final BsonDocument sampleDocument = sample.asDocument();\n-\n-            final String format = getString(sampleDocument, \"format\").orElseThrow(SFlowConverter::invalidDocument);\n-            if (\"0:1\".equals(format) || \"0:3\".equals(format)) {\n-                // Handle only (expanded) flow samples\n-\n-                if (first(get(sampleDocument, \"data\", \"flows\", \"0:1\", \"ipv4\"),\n-                           get(sampleDocument, \"data\", \"flows\", \"0:1\", \"ipv6\"),\n-                           get(sampleDocument, \"data\", \"flows\", \"0:3\"),\n-                           get(sampleDocument, \"data\", \"flows\", \"0:4\")).isPresent()) {\n-                    // Handle only flows containing IP related records\n-                    result.add(new SFlow(header, getDocument(sampleDocument, \"data\").orElseThrow(SFlowConverter::invalidDocument), receivedAt));\n-                }\n-            }\n-        }\n-\n-        return result;\n-    }\n-}\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "3352dcced0424e52de475b87840f05dff94fbec4", "message": "Merge commit", "committedDate": null}, {"oid": "78ce7c55c0d1988f90dfa22ce33846fb3d0fa53d", "committedDate": "2020-12-01 09:53:12 +0100", "message": "NMS-12973: Correct clock skew"}, {"oid": "bd3afc72cd09053d307d383e58ff243a991bb3ef", "committedDate": "2022-07-26 16:13:39 +0200", "message": "NMS-13770: Inline Converter with adapters"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI0MDc4NA==", "url": "https://github.com/OpenNMS/opennms/pull/2903#discussion_r390240784", "body": "Do not commit stuff like this, please.", "bodyText": "Do not commit stuff like this, please.", "bodyHTML": "<p dir=\"auto\">Do not commit stuff like this, please.</p>", "author": "fooker", "createdAt": "2020-03-10T11:08:21Z", "path": "features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/ie/RecordProvider.java", "diffHunk": "@@ -30,6 +30,7 @@\n \n import java.util.stream.Stream;\n \n+", "originalCommit": "628f488dd99abfee27aab31b69ba5a1409717e77", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b0e90f013c5b6948e960f7eb2d66870c3c84e12a", "changed_code": [{"header": "diff --git a/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/ie/RecordProvider.java b/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/ie/RecordProvider.java\nindex 1ff755c19bc..6efa38aeac4 100644\n--- a/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/ie/RecordProvider.java\n+++ b/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/ie/RecordProvider.java\n", "chunk": "@@ -30,7 +30,6 @@ package org.opennms.netmgt.telemetry.protocols.netflow.parser.ie;\n \n import java.util.stream.Stream;\n \n-\n public interface RecordProvider {\n     Stream<Iterable<Value<?>>> getRecords();\n }\n", "next_change": null}]}, "revised_code_in_main": {"commit": "3352dcced0424e52de475b87840f05dff94fbec4", "changed_code": [{"header": "diff --git a/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/ie/RecordProvider.java b/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/ie/RecordProvider.java\nindex 1ff755c19bc..6efa38aeac4 100644\n--- a/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/ie/RecordProvider.java\n+++ b/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/ie/RecordProvider.java\n", "chunk": "@@ -30,7 +30,6 @@ package org.opennms.netmgt.telemetry.protocols.netflow.parser.ie;\n \n import java.util.stream.Stream;\n \n-\n public interface RecordProvider {\n     Stream<Iterable<Value<?>>> getRecords();\n }\n", "next_change": {"commit": "a57dcccf00db8f5129ca27c63fbfbbe5638bed79", "changed_code": [{"header": "diff --git a/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/ie/RecordProvider.java b/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/ie/RecordProvider.java\nindex 6efa38aeac4..3f400e05d61 100644\n--- a/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/ie/RecordProvider.java\n+++ b/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/ie/RecordProvider.java\n", "chunk": "@@ -32,4 +32,16 @@ import java.util.stream.Stream;\n \n public interface RecordProvider {\n     Stream<Iterable<Value<?>>> getRecords();\n+\n+    /** Returns the observation domain ID as specified by the underlying packet used to generate these records.\n+     *\n+     * @return the observation domain ID or <code>0</code> if there is no such concept available.\n+     */\n+    long getObservationDomainId();\n+\n+    /** Returns the sequence number as provided by the underlying packet used to generate these records.\n+     *\n+     * @return the sequence number\n+     */\n+    long getSequenceNumber();\n }\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "3352dcced0424e52de475b87840f05dff94fbec4", "message": "Merge commit", "committedDate": null}, {"oid": "a57dcccf00db8f5129ca27c63fbfbbe5638bed79", "committedDate": "2020-11-30 11:23:08 +0100", "message": "NMS-12973: Check flows are in sequence"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI0MjA3Ng==", "url": "https://github.com/OpenNMS/opennms/pull/2903#discussion_r390242076", "body": "I can't find any usage of this - is it still needed?", "bodyText": "I can't find any usage of this - is it still needed?", "bodyHTML": "<p dir=\"auto\">I can't find any usage of this - is it still needed?</p>", "author": "fooker", "createdAt": "2020-03-10T11:11:03Z", "path": "features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/InvalidPacketException.java", "diffHunk": "@@ -40,6 +40,10 @@ public InvalidPacketException(final ByteBuf buffer, final String message, final\n         super(appendPosition(message, buffer), cause);\n     }\n \n+    public InvalidPacketException(final String message, final Throwable cause) {", "originalCommit": "628f488dd99abfee27aab31b69ba5a1409717e77", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e388d89b283f332b44cf6614f61985d9f9c2c420", "changed_code": [{"header": "diff --git a/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/InvalidPacketException.java b/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/InvalidPacketException.java\nindex 8eb8d78c221..1a1918af99f 100644\n--- a/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/InvalidPacketException.java\n+++ b/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/InvalidPacketException.java\n", "chunk": "@@ -39,11 +39,7 @@ public class InvalidPacketException extends Exception {\n     public InvalidPacketException(final ByteBuf buffer, final String message, final Throwable cause) {\n         super(appendPosition(message, buffer), cause);\n     }\n-\n-    public InvalidPacketException(final String message, final Throwable cause) {\n-        super(message, cause);\n-    }\n-\n+    \n     private static String appendPosition(final String message, final ByteBuf buffer) {\n         if (buffer.hasArray()) {\n             return String.format(\"%s [0x%04X]\", message, buffer.arrayOffset() + buffer.readerIndex());\n", "next_change": null}]}, "revised_code_in_main": {"commit": "3352dcced0424e52de475b87840f05dff94fbec4", "changed_code": [{"header": "diff --git a/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/InvalidPacketException.java b/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/InvalidPacketException.java\nindex 8eb8d78c221..1a1918af99f 100644\n--- a/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/InvalidPacketException.java\n+++ b/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/InvalidPacketException.java\n", "chunk": "@@ -39,11 +39,7 @@ public class InvalidPacketException extends Exception {\n     public InvalidPacketException(final ByteBuf buffer, final String message, final Throwable cause) {\n         super(appendPosition(message, buffer), cause);\n     }\n-\n-    public InvalidPacketException(final String message, final Throwable cause) {\n-        super(message, cause);\n-    }\n-\n+    \n     private static String appendPosition(final String message, final ByteBuf buffer) {\n         if (buffer.hasArray()) {\n             return String.format(\"%s [0x%04X]\", message, buffer.arrayOffset() + buffer.readerIndex());\n", "next_change": {"commit": "4bb0c2091031a39438555d0d4377c4501eb1dfdc", "changed_code": [{"header": "diff --git a/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/InvalidPacketException.java b/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/InvalidPacketException.java\nindex 1a1918af99f..7f8177c9c61 100644\n--- a/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/InvalidPacketException.java\n+++ b/features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/InvalidPacketException.java\n", "chunk": "@@ -39,12 +41,15 @@ public class InvalidPacketException extends Exception {\n     public InvalidPacketException(final ByteBuf buffer, final String message, final Throwable cause) {\n         super(appendPosition(message, buffer), cause);\n     }\n-    \n+\n     private static String appendPosition(final String message, final ByteBuf buffer) {\n-        if (buffer.hasArray()) {\n-            return String.format(\"%s [0x%04X]\", message, buffer.arrayOffset() + buffer.readerIndex());\n-        } else {\n-            return message;\n-        }\n+        // we want to hex-dump the whole PDU, wo we need to get the unsliced buffer\n+        final ByteBuf unwrappedBuffer = Unpooled.wrappedUnmodifiableBuffer(buffer.unwrap() != null ? buffer.unwrap() : buffer).resetReaderIndex();\n+        // compare the readableBytes() to determine the adjustment\n+        final int delta = unwrappedBuffer.readableBytes() - (buffer.readableBytes() + buffer.readerIndex());\n+        // compute the offset for which this exception had occurred\n+        final int offset = buffer.readerIndex() + delta;\n+\n+        return String.format(\"%s, Offset: [0x%04X], Payload:\\n%s\", message, offset, ByteBufUtil.prettyHexDump(unwrappedBuffer));\n     }\n }\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "3352dcced0424e52de475b87840f05dff94fbec4", "message": "Merge commit", "committedDate": null}, {"oid": "4bb0c2091031a39438555d0d4377c4501eb1dfdc", "committedDate": "2021-08-25 07:59:42 +0200", "message": "NMS-13480: Improve debug output for invalid packets"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI0Mzc1Mg==", "url": "https://github.com/OpenNMS/opennms/pull/2903#discussion_r390243752", "body": "This should be moved to a standalone class.\r\nThe old `*Flow` (like `IpfixFlow`) classes can be removed.", "bodyText": "This should be moved to a standalone class.\nThe old *Flow (like IpfixFlow) classes can be removed.", "bodyHTML": "<p dir=\"auto\">This should be moved to a standalone class.<br>\nThe old <code>*Flow</code> (like <code>IpfixFlow</code>) classes can be removed.</p>", "author": "fooker", "createdAt": "2020-03-10T11:14:41Z", "path": "features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/common/FlowMapper.java", "diffHunk": "@@ -0,0 +1,270 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+\n+package org.opennms.netmgt.telemetry.protocols.netflow.adapter.common;\n+\n+import java.util.Optional;\n+\n+import org.opennms.netmgt.flows.api.Flow;\n+import org.opennms.netmgt.telemetry.protocols.netflow.common.FlowMessage;\n+\n+import com.google.common.base.Strings;\n+\n+public class FlowMapper {\n+\n+    public static Flow buildFlowFromProto(FlowMessage flowMessage) {\n+        return new Flow() {", "originalCommit": "628f488dd99abfee27aab31b69ba5a1409717e77", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b0e90f013c5b6948e960f7eb2d66870c3c84e12a", "changed_code": [{"header": "diff --git a/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/common/FlowMapper.java b/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/common/FlowMapper.java\ndeleted file mode 100644\nindex ea7d467149e..00000000000\n--- a/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/common/FlowMapper.java\n+++ /dev/null\n", "chunk": "@@ -1,270 +0,0 @@\n-/*******************************************************************************\n- * This file is part of OpenNMS(R).\n- *\n- * Copyright (C) 2020 The OpenNMS Group, Inc.\n- * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n- *\n- * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n- *\n- * OpenNMS(R) is free software: you can redistribute it and/or modify\n- * it under the terms of the GNU Affero General Public License as published\n- * by the Free Software Foundation, either version 3 of the License,\n- * or (at your option) any later version.\n- *\n- * OpenNMS(R) is distributed in the hope that it will be useful,\n- * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n- * GNU Affero General Public License for more details.\n- *\n- * You should have received a copy of the GNU Affero General Public License\n- * along with OpenNMS(R).  If not, see:\n- *      http://www.gnu.org/licenses/\n- *\n- * For more information contact:\n- *     OpenNMS(R) Licensing <license@opennms.org>\n- *     http://www.opennms.org/\n- *     http://www.opennms.com/\n- *******************************************************************************/\n-\n-package org.opennms.netmgt.telemetry.protocols.netflow.adapter.common;\n-\n-import java.util.Optional;\n-\n-import org.opennms.netmgt.flows.api.Flow;\n-import org.opennms.netmgt.telemetry.protocols.netflow.common.FlowMessage;\n-\n-import com.google.common.base.Strings;\n-\n-public class FlowMapper {\n-\n-    public static Flow buildFlowFromProto(FlowMessage flowMessage) {\n-        return new Flow() {\n-            @Override\n-            public long getTimestamp() {\n-                return flowMessage.getTimestamp();\n-            }\n-\n-            @Override\n-            public Long getBytes() {\n-                return flowMessage.hasNumBytes() ? flowMessage.getNumBytes().getValue() : null;\n-            }\n-\n-            @Override\n-            public Direction getDirection() {\n-                switch (flowMessage.getDirection()) {\n-                    case INGRESS:\n-                        return Direction.INGRESS;\n-                    case EGRESS:\n-                        return Direction.EGRESS;\n-                }\n-                return Direction.INGRESS;\n-\n-            }\n-\n-            @Override\n-            public String getDstAddr() {\n-\n-                if (!Strings.isNullOrEmpty(flowMessage.getDstAddress())) {\n-                    return flowMessage.getDstAddress();\n-                }\n-                return null;\n-            }\n-\n-            @Override\n-            public Optional<String> getDstAddrHostname() {\n-                if (!Strings.isNullOrEmpty(flowMessage.getDstHostname())) {\n-                    return Optional.of(flowMessage.getDstHostname());\n-                }\n-                return Optional.empty();\n-            }\n-\n-            @Override\n-            public Long getDstAs() {\n-                return flowMessage.hasDstAs() ? flowMessage.getDstAs().getValue() : null;\n-            }\n-\n-            @Override\n-            public Integer getDstMaskLen() {\n-                return flowMessage.hasDstMaskLen() ? flowMessage.getDstMaskLen().getValue() : null;\n-            }\n-\n-            @Override\n-            public Integer getDstPort() {\n-                return flowMessage.hasDstPort() ? flowMessage.getDstPort().getValue() : null;\n-            }\n-\n-            @Override\n-            public Integer getEngineId() {\n-                return flowMessage.hasEngineId() ? flowMessage.getEngineId().getValue() : null;\n-            }\n-\n-            @Override\n-            public Integer getEngineType() {\n-                return flowMessage.hasEngineType() ? flowMessage.getEngineType().getValue() : null;\n-            }\n-\n-            @Override\n-            public Long getDeltaSwitched() {\n-                return flowMessage.hasDeltaSwitched() ? flowMessage.getDeltaSwitched().getValue() : null;\n-            }\n-\n-            @Override\n-            public Long getFirstSwitched() {\n-                return flowMessage.hasFirstSwitched() ? flowMessage.getFirstSwitched().getValue() : null;\n-            }\n-\n-            @Override\n-            public int getFlowRecords() {\n-                return flowMessage.hasNumFlowRecords() ? flowMessage.getNumFlowRecords().getValue() : 0;\n-            }\n-\n-            @Override\n-            public long getFlowSeqNum() {\n-                return flowMessage.hasFlowSeqNum() ? flowMessage.getFlowSeqNum().getValue() : 0L;\n-            }\n-\n-            @Override\n-            public Integer getInputSnmp() {\n-                return flowMessage.hasInputSnmpIfindex() ? flowMessage.getInputSnmpIfindex().getValue() : null;\n-            }\n-\n-            @Override\n-            public Integer getIpProtocolVersion() {\n-                return flowMessage.hasIpProtocolVersion() ? flowMessage.getIpProtocolVersion().getValue() : null;\n-            }\n-\n-            @Override\n-            public Long getLastSwitched() {\n-                return flowMessage.hasLastSwitched() ? flowMessage.getLastSwitched().getValue() : null;\n-            }\n-\n-            @Override\n-            public String getNextHop() {\n-                if (!Strings.isNullOrEmpty(flowMessage.getNextHopAddress())) {\n-                    return flowMessage.getNextHopAddress();\n-                }\n-                return null;\n-            }\n-\n-            @Override\n-            public Optional<String> getNextHopHostname() {\n-                if (!Strings.isNullOrEmpty(flowMessage.getNextHopHostname())) {\n-                    return Optional.of(flowMessage.getNextHopHostname());\n-                }\n-                return Optional.empty();\n-            }\n-\n-            @Override\n-            public Integer getOutputSnmp() {\n-                return flowMessage.hasOutputSnmpIfindex() ? flowMessage.getOutputSnmpIfindex().getValue() : null;\n-            }\n-\n-            @Override\n-            public Long getPackets() {\n-                return flowMessage.hasNumPackets() ? flowMessage.getNumPackets().getValue() : null;\n-            }\n-\n-            @Override\n-            public Integer getProtocol() {\n-                return flowMessage.hasProtocol() ? flowMessage.getProtocol().getValue() : null;\n-            }\n-\n-            @Override\n-            public SamplingAlgorithm getSamplingAlgorithm() {\n-\n-                switch (flowMessage.getSamplingAlgorithm()) {\n-                    case SystematicCountBasedSampling:\n-                        return SamplingAlgorithm.SystematicCountBasedSampling;\n-                    case SystematicTimeBasedSampling:\n-                        return SamplingAlgorithm.SystematicTimeBasedSampling;\n-                    case RandomNoutOfNSampling:\n-                        return SamplingAlgorithm.RandomNoutOfNSampling;\n-                    case UniformProbabilisticSampling:\n-                        return SamplingAlgorithm.UniformProbabilisticSampling;\n-                    case PropertyMatchFiltering:\n-                        return SamplingAlgorithm.PropertyMatchFiltering;\n-                    case HashBasedFiltering:\n-                        return SamplingAlgorithm.HashBasedFiltering;\n-                    case FlowStateDependentIntermediateFlowSelectionProcess:\n-                        return SamplingAlgorithm.FlowStateDependentIntermediateFlowSelectionProcess;\n-                }\n-                return SamplingAlgorithm.Unassigned;\n-            }\n-\n-            @Override\n-            public Double getSamplingInterval() {\n-                return  flowMessage.hasSamplingInterval() ? flowMessage.getSamplingInterval().getValue() : null;\n-            }\n-\n-            @Override\n-            public String getSrcAddr() {\n-                if(!Strings.isNullOrEmpty(flowMessage.getSrcAddress())) {\n-                    return flowMessage.getSrcAddress();\n-                }\n-                return null;\n-            }\n-\n-            @Override\n-            public Optional<String> getSrcAddrHostname() {\n-                if (!Strings.isNullOrEmpty(flowMessage.getSrcHostname())) {\n-                    return Optional.of(flowMessage.getSrcHostname());\n-                }\n-                return Optional.empty();\n-            }\n-\n-            @Override\n-            public Long getSrcAs() {\n-                return flowMessage.hasSrcAs() ? flowMessage.getSrcAs().getValue() : null;\n-            }\n-\n-            @Override\n-            public Integer getSrcMaskLen() {\n-                return flowMessage.hasSrcMaskLen() ? flowMessage.getSrcMaskLen().getValue() : null;\n-            }\n-\n-            @Override\n-            public Integer getSrcPort() {\n-                return flowMessage.hasSrcPort() ? flowMessage.getSrcPort().getValue() : null;\n-            }\n-\n-            @Override\n-            public Integer getTcpFlags() {\n-                return flowMessage.hasTcpFlags() ? flowMessage.getTcpFlags().getValue() : null;\n-            }\n-\n-            @Override\n-            public Integer getTos() {\n-                return flowMessage.hasTos() ? flowMessage.getTos().getValue() : null;\n-            }\n-\n-            @Override\n-            public NetflowVersion getNetflowVersion() {\n-                switch (flowMessage.getNetflowVersion()) {\n-                    case V5:\n-                        return NetflowVersion.V5;\n-                    case V9:\n-                        return NetflowVersion.V9;\n-                    case IPFIX:\n-                        return NetflowVersion.IPFIX;\n-                    case SFLOW:\n-                        return NetflowVersion.SFLOW;\n-                    default:\n-                        return NetflowVersion.V5;\n-                }\n-            }\n-\n-            @Override\n-            public Integer getVlan() {\n-                return flowMessage.hasVlan() ? flowMessage.getVlan().getValue() : null;\n-            }\n-\n-            @Override\n-            public String getNodeIdentifier() {\n-                if (!Strings.isNullOrEmpty(flowMessage.getNodeIdentifier())) {\n-                    return flowMessage.getNodeIdentifier();\n-                }\n-                return null;\n-            }\n-        };\n-    }\n-}\n", "next_change": null}]}, "revised_code_in_main": {"commit": "3352dcced0424e52de475b87840f05dff94fbec4", "changed_code": [{"header": "diff --git a/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/common/FlowMapper.java b/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/common/FlowMapper.java\ndeleted file mode 100644\nindex ea7d467149e..00000000000\n--- a/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/common/FlowMapper.java\n+++ /dev/null\n", "chunk": "@@ -1,270 +0,0 @@\n-/*******************************************************************************\n- * This file is part of OpenNMS(R).\n- *\n- * Copyright (C) 2020 The OpenNMS Group, Inc.\n- * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n- *\n- * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n- *\n- * OpenNMS(R) is free software: you can redistribute it and/or modify\n- * it under the terms of the GNU Affero General Public License as published\n- * by the Free Software Foundation, either version 3 of the License,\n- * or (at your option) any later version.\n- *\n- * OpenNMS(R) is distributed in the hope that it will be useful,\n- * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n- * GNU Affero General Public License for more details.\n- *\n- * You should have received a copy of the GNU Affero General Public License\n- * along with OpenNMS(R).  If not, see:\n- *      http://www.gnu.org/licenses/\n- *\n- * For more information contact:\n- *     OpenNMS(R) Licensing <license@opennms.org>\n- *     http://www.opennms.org/\n- *     http://www.opennms.com/\n- *******************************************************************************/\n-\n-package org.opennms.netmgt.telemetry.protocols.netflow.adapter.common;\n-\n-import java.util.Optional;\n-\n-import org.opennms.netmgt.flows.api.Flow;\n-import org.opennms.netmgt.telemetry.protocols.netflow.common.FlowMessage;\n-\n-import com.google.common.base.Strings;\n-\n-public class FlowMapper {\n-\n-    public static Flow buildFlowFromProto(FlowMessage flowMessage) {\n-        return new Flow() {\n-            @Override\n-            public long getTimestamp() {\n-                return flowMessage.getTimestamp();\n-            }\n-\n-            @Override\n-            public Long getBytes() {\n-                return flowMessage.hasNumBytes() ? flowMessage.getNumBytes().getValue() : null;\n-            }\n-\n-            @Override\n-            public Direction getDirection() {\n-                switch (flowMessage.getDirection()) {\n-                    case INGRESS:\n-                        return Direction.INGRESS;\n-                    case EGRESS:\n-                        return Direction.EGRESS;\n-                }\n-                return Direction.INGRESS;\n-\n-            }\n-\n-            @Override\n-            public String getDstAddr() {\n-\n-                if (!Strings.isNullOrEmpty(flowMessage.getDstAddress())) {\n-                    return flowMessage.getDstAddress();\n-                }\n-                return null;\n-            }\n-\n-            @Override\n-            public Optional<String> getDstAddrHostname() {\n-                if (!Strings.isNullOrEmpty(flowMessage.getDstHostname())) {\n-                    return Optional.of(flowMessage.getDstHostname());\n-                }\n-                return Optional.empty();\n-            }\n-\n-            @Override\n-            public Long getDstAs() {\n-                return flowMessage.hasDstAs() ? flowMessage.getDstAs().getValue() : null;\n-            }\n-\n-            @Override\n-            public Integer getDstMaskLen() {\n-                return flowMessage.hasDstMaskLen() ? flowMessage.getDstMaskLen().getValue() : null;\n-            }\n-\n-            @Override\n-            public Integer getDstPort() {\n-                return flowMessage.hasDstPort() ? flowMessage.getDstPort().getValue() : null;\n-            }\n-\n-            @Override\n-            public Integer getEngineId() {\n-                return flowMessage.hasEngineId() ? flowMessage.getEngineId().getValue() : null;\n-            }\n-\n-            @Override\n-            public Integer getEngineType() {\n-                return flowMessage.hasEngineType() ? flowMessage.getEngineType().getValue() : null;\n-            }\n-\n-            @Override\n-            public Long getDeltaSwitched() {\n-                return flowMessage.hasDeltaSwitched() ? flowMessage.getDeltaSwitched().getValue() : null;\n-            }\n-\n-            @Override\n-            public Long getFirstSwitched() {\n-                return flowMessage.hasFirstSwitched() ? flowMessage.getFirstSwitched().getValue() : null;\n-            }\n-\n-            @Override\n-            public int getFlowRecords() {\n-                return flowMessage.hasNumFlowRecords() ? flowMessage.getNumFlowRecords().getValue() : 0;\n-            }\n-\n-            @Override\n-            public long getFlowSeqNum() {\n-                return flowMessage.hasFlowSeqNum() ? flowMessage.getFlowSeqNum().getValue() : 0L;\n-            }\n-\n-            @Override\n-            public Integer getInputSnmp() {\n-                return flowMessage.hasInputSnmpIfindex() ? flowMessage.getInputSnmpIfindex().getValue() : null;\n-            }\n-\n-            @Override\n-            public Integer getIpProtocolVersion() {\n-                return flowMessage.hasIpProtocolVersion() ? flowMessage.getIpProtocolVersion().getValue() : null;\n-            }\n-\n-            @Override\n-            public Long getLastSwitched() {\n-                return flowMessage.hasLastSwitched() ? flowMessage.getLastSwitched().getValue() : null;\n-            }\n-\n-            @Override\n-            public String getNextHop() {\n-                if (!Strings.isNullOrEmpty(flowMessage.getNextHopAddress())) {\n-                    return flowMessage.getNextHopAddress();\n-                }\n-                return null;\n-            }\n-\n-            @Override\n-            public Optional<String> getNextHopHostname() {\n-                if (!Strings.isNullOrEmpty(flowMessage.getNextHopHostname())) {\n-                    return Optional.of(flowMessage.getNextHopHostname());\n-                }\n-                return Optional.empty();\n-            }\n-\n-            @Override\n-            public Integer getOutputSnmp() {\n-                return flowMessage.hasOutputSnmpIfindex() ? flowMessage.getOutputSnmpIfindex().getValue() : null;\n-            }\n-\n-            @Override\n-            public Long getPackets() {\n-                return flowMessage.hasNumPackets() ? flowMessage.getNumPackets().getValue() : null;\n-            }\n-\n-            @Override\n-            public Integer getProtocol() {\n-                return flowMessage.hasProtocol() ? flowMessage.getProtocol().getValue() : null;\n-            }\n-\n-            @Override\n-            public SamplingAlgorithm getSamplingAlgorithm() {\n-\n-                switch (flowMessage.getSamplingAlgorithm()) {\n-                    case SystematicCountBasedSampling:\n-                        return SamplingAlgorithm.SystematicCountBasedSampling;\n-                    case SystematicTimeBasedSampling:\n-                        return SamplingAlgorithm.SystematicTimeBasedSampling;\n-                    case RandomNoutOfNSampling:\n-                        return SamplingAlgorithm.RandomNoutOfNSampling;\n-                    case UniformProbabilisticSampling:\n-                        return SamplingAlgorithm.UniformProbabilisticSampling;\n-                    case PropertyMatchFiltering:\n-                        return SamplingAlgorithm.PropertyMatchFiltering;\n-                    case HashBasedFiltering:\n-                        return SamplingAlgorithm.HashBasedFiltering;\n-                    case FlowStateDependentIntermediateFlowSelectionProcess:\n-                        return SamplingAlgorithm.FlowStateDependentIntermediateFlowSelectionProcess;\n-                }\n-                return SamplingAlgorithm.Unassigned;\n-            }\n-\n-            @Override\n-            public Double getSamplingInterval() {\n-                return  flowMessage.hasSamplingInterval() ? flowMessage.getSamplingInterval().getValue() : null;\n-            }\n-\n-            @Override\n-            public String getSrcAddr() {\n-                if(!Strings.isNullOrEmpty(flowMessage.getSrcAddress())) {\n-                    return flowMessage.getSrcAddress();\n-                }\n-                return null;\n-            }\n-\n-            @Override\n-            public Optional<String> getSrcAddrHostname() {\n-                if (!Strings.isNullOrEmpty(flowMessage.getSrcHostname())) {\n-                    return Optional.of(flowMessage.getSrcHostname());\n-                }\n-                return Optional.empty();\n-            }\n-\n-            @Override\n-            public Long getSrcAs() {\n-                return flowMessage.hasSrcAs() ? flowMessage.getSrcAs().getValue() : null;\n-            }\n-\n-            @Override\n-            public Integer getSrcMaskLen() {\n-                return flowMessage.hasSrcMaskLen() ? flowMessage.getSrcMaskLen().getValue() : null;\n-            }\n-\n-            @Override\n-            public Integer getSrcPort() {\n-                return flowMessage.hasSrcPort() ? flowMessage.getSrcPort().getValue() : null;\n-            }\n-\n-            @Override\n-            public Integer getTcpFlags() {\n-                return flowMessage.hasTcpFlags() ? flowMessage.getTcpFlags().getValue() : null;\n-            }\n-\n-            @Override\n-            public Integer getTos() {\n-                return flowMessage.hasTos() ? flowMessage.getTos().getValue() : null;\n-            }\n-\n-            @Override\n-            public NetflowVersion getNetflowVersion() {\n-                switch (flowMessage.getNetflowVersion()) {\n-                    case V5:\n-                        return NetflowVersion.V5;\n-                    case V9:\n-                        return NetflowVersion.V9;\n-                    case IPFIX:\n-                        return NetflowVersion.IPFIX;\n-                    case SFLOW:\n-                        return NetflowVersion.SFLOW;\n-                    default:\n-                        return NetflowVersion.V5;\n-                }\n-            }\n-\n-            @Override\n-            public Integer getVlan() {\n-                return flowMessage.hasVlan() ? flowMessage.getVlan().getValue() : null;\n-            }\n-\n-            @Override\n-            public String getNodeIdentifier() {\n-                if (!Strings.isNullOrEmpty(flowMessage.getNodeIdentifier())) {\n-                    return flowMessage.getNodeIdentifier();\n-                }\n-                return null;\n-            }\n-        };\n-    }\n-}\n", "next_change": null}]}, "commits_in_main": [{"oid": "3352dcced0424e52de475b87840f05dff94fbec4", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI0NjAyMg==", "url": "https://github.com/OpenNMS/opennms/pull/2903#discussion_r390246022", "body": "This should throw an `IllegalStateException`.", "bodyText": "This should throw an IllegalStateException.", "bodyHTML": "<p dir=\"auto\">This should throw an <code>IllegalStateException</code>.</p>", "author": "fooker", "createdAt": "2020-03-10T11:19:48Z", "path": "features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/common/FlowMapper.java", "diffHunk": "@@ -0,0 +1,270 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+\n+package org.opennms.netmgt.telemetry.protocols.netflow.adapter.common;\n+\n+import java.util.Optional;\n+\n+import org.opennms.netmgt.flows.api.Flow;\n+import org.opennms.netmgt.telemetry.protocols.netflow.common.FlowMessage;\n+\n+import com.google.common.base.Strings;\n+\n+public class FlowMapper {\n+\n+    public static Flow buildFlowFromProto(FlowMessage flowMessage) {\n+        return new Flow() {\n+            @Override\n+            public long getTimestamp() {\n+                return flowMessage.getTimestamp();\n+            }\n+\n+            @Override\n+            public Long getBytes() {\n+                return flowMessage.hasNumBytes() ? flowMessage.getNumBytes().getValue() : null;\n+            }\n+\n+            @Override\n+            public Direction getDirection() {\n+                switch (flowMessage.getDirection()) {\n+                    case INGRESS:\n+                        return Direction.INGRESS;\n+                    case EGRESS:\n+                        return Direction.EGRESS;\n+                }\n+                return Direction.INGRESS;\n+\n+            }\n+\n+            @Override\n+            public String getDstAddr() {\n+\n+                if (!Strings.isNullOrEmpty(flowMessage.getDstAddress())) {\n+                    return flowMessage.getDstAddress();\n+                }\n+                return null;\n+            }\n+\n+            @Override\n+            public Optional<String> getDstAddrHostname() {\n+                if (!Strings.isNullOrEmpty(flowMessage.getDstHostname())) {\n+                    return Optional.of(flowMessage.getDstHostname());\n+                }\n+                return Optional.empty();\n+            }\n+\n+            @Override\n+            public Long getDstAs() {\n+                return flowMessage.hasDstAs() ? flowMessage.getDstAs().getValue() : null;\n+            }\n+\n+            @Override\n+            public Integer getDstMaskLen() {\n+                return flowMessage.hasDstMaskLen() ? flowMessage.getDstMaskLen().getValue() : null;\n+            }\n+\n+            @Override\n+            public Integer getDstPort() {\n+                return flowMessage.hasDstPort() ? flowMessage.getDstPort().getValue() : null;\n+            }\n+\n+            @Override\n+            public Integer getEngineId() {\n+                return flowMessage.hasEngineId() ? flowMessage.getEngineId().getValue() : null;\n+            }\n+\n+            @Override\n+            public Integer getEngineType() {\n+                return flowMessage.hasEngineType() ? flowMessage.getEngineType().getValue() : null;\n+            }\n+\n+            @Override\n+            public Long getDeltaSwitched() {\n+                return flowMessage.hasDeltaSwitched() ? flowMessage.getDeltaSwitched().getValue() : null;\n+            }\n+\n+            @Override\n+            public Long getFirstSwitched() {\n+                return flowMessage.hasFirstSwitched() ? flowMessage.getFirstSwitched().getValue() : null;\n+            }\n+\n+            @Override\n+            public int getFlowRecords() {\n+                return flowMessage.hasNumFlowRecords() ? flowMessage.getNumFlowRecords().getValue() : 0;\n+            }\n+\n+            @Override\n+            public long getFlowSeqNum() {\n+                return flowMessage.hasFlowSeqNum() ? flowMessage.getFlowSeqNum().getValue() : 0L;\n+            }\n+\n+            @Override\n+            public Integer getInputSnmp() {\n+                return flowMessage.hasInputSnmpIfindex() ? flowMessage.getInputSnmpIfindex().getValue() : null;\n+            }\n+\n+            @Override\n+            public Integer getIpProtocolVersion() {\n+                return flowMessage.hasIpProtocolVersion() ? flowMessage.getIpProtocolVersion().getValue() : null;\n+            }\n+\n+            @Override\n+            public Long getLastSwitched() {\n+                return flowMessage.hasLastSwitched() ? flowMessage.getLastSwitched().getValue() : null;\n+            }\n+\n+            @Override\n+            public String getNextHop() {\n+                if (!Strings.isNullOrEmpty(flowMessage.getNextHopAddress())) {\n+                    return flowMessage.getNextHopAddress();\n+                }\n+                return null;\n+            }\n+\n+            @Override\n+            public Optional<String> getNextHopHostname() {\n+                if (!Strings.isNullOrEmpty(flowMessage.getNextHopHostname())) {\n+                    return Optional.of(flowMessage.getNextHopHostname());\n+                }\n+                return Optional.empty();\n+            }\n+\n+            @Override\n+            public Integer getOutputSnmp() {\n+                return flowMessage.hasOutputSnmpIfindex() ? flowMessage.getOutputSnmpIfindex().getValue() : null;\n+            }\n+\n+            @Override\n+            public Long getPackets() {\n+                return flowMessage.hasNumPackets() ? flowMessage.getNumPackets().getValue() : null;\n+            }\n+\n+            @Override\n+            public Integer getProtocol() {\n+                return flowMessage.hasProtocol() ? flowMessage.getProtocol().getValue() : null;\n+            }\n+\n+            @Override\n+            public SamplingAlgorithm getSamplingAlgorithm() {\n+\n+                switch (flowMessage.getSamplingAlgorithm()) {\n+                    case SystematicCountBasedSampling:\n+                        return SamplingAlgorithm.SystematicCountBasedSampling;\n+                    case SystematicTimeBasedSampling:\n+                        return SamplingAlgorithm.SystematicTimeBasedSampling;\n+                    case RandomNoutOfNSampling:\n+                        return SamplingAlgorithm.RandomNoutOfNSampling;\n+                    case UniformProbabilisticSampling:\n+                        return SamplingAlgorithm.UniformProbabilisticSampling;\n+                    case PropertyMatchFiltering:\n+                        return SamplingAlgorithm.PropertyMatchFiltering;\n+                    case HashBasedFiltering:\n+                        return SamplingAlgorithm.HashBasedFiltering;\n+                    case FlowStateDependentIntermediateFlowSelectionProcess:\n+                        return SamplingAlgorithm.FlowStateDependentIntermediateFlowSelectionProcess;\n+                }\n+                return SamplingAlgorithm.Unassigned;\n+            }\n+\n+            @Override\n+            public Double getSamplingInterval() {\n+                return  flowMessage.hasSamplingInterval() ? flowMessage.getSamplingInterval().getValue() : null;\n+            }\n+\n+            @Override\n+            public String getSrcAddr() {\n+                if(!Strings.isNullOrEmpty(flowMessage.getSrcAddress())) {\n+                    return flowMessage.getSrcAddress();\n+                }\n+                return null;\n+            }\n+\n+            @Override\n+            public Optional<String> getSrcAddrHostname() {\n+                if (!Strings.isNullOrEmpty(flowMessage.getSrcHostname())) {\n+                    return Optional.of(flowMessage.getSrcHostname());\n+                }\n+                return Optional.empty();\n+            }\n+\n+            @Override\n+            public Long getSrcAs() {\n+                return flowMessage.hasSrcAs() ? flowMessage.getSrcAs().getValue() : null;\n+            }\n+\n+            @Override\n+            public Integer getSrcMaskLen() {\n+                return flowMessage.hasSrcMaskLen() ? flowMessage.getSrcMaskLen().getValue() : null;\n+            }\n+\n+            @Override\n+            public Integer getSrcPort() {\n+                return flowMessage.hasSrcPort() ? flowMessage.getSrcPort().getValue() : null;\n+            }\n+\n+            @Override\n+            public Integer getTcpFlags() {\n+                return flowMessage.hasTcpFlags() ? flowMessage.getTcpFlags().getValue() : null;\n+            }\n+\n+            @Override\n+            public Integer getTos() {\n+                return flowMessage.hasTos() ? flowMessage.getTos().getValue() : null;\n+            }\n+\n+            @Override\n+            public NetflowVersion getNetflowVersion() {\n+                switch (flowMessage.getNetflowVersion()) {\n+                    case V5:\n+                        return NetflowVersion.V5;\n+                    case V9:\n+                        return NetflowVersion.V9;\n+                    case IPFIX:\n+                        return NetflowVersion.IPFIX;\n+                    case SFLOW:\n+                        return NetflowVersion.SFLOW;\n+                    default:\n+                        return NetflowVersion.V5;", "originalCommit": "628f488dd99abfee27aab31b69ba5a1409717e77", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b0e90f013c5b6948e960f7eb2d66870c3c84e12a", "changed_code": [{"header": "diff --git a/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/common/FlowMapper.java b/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/common/FlowMapper.java\ndeleted file mode 100644\nindex ea7d467149e..00000000000\n--- a/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/common/FlowMapper.java\n+++ /dev/null\n", "chunk": "@@ -1,270 +0,0 @@\n-/*******************************************************************************\n- * This file is part of OpenNMS(R).\n- *\n- * Copyright (C) 2020 The OpenNMS Group, Inc.\n- * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n- *\n- * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n- *\n- * OpenNMS(R) is free software: you can redistribute it and/or modify\n- * it under the terms of the GNU Affero General Public License as published\n- * by the Free Software Foundation, either version 3 of the License,\n- * or (at your option) any later version.\n- *\n- * OpenNMS(R) is distributed in the hope that it will be useful,\n- * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n- * GNU Affero General Public License for more details.\n- *\n- * You should have received a copy of the GNU Affero General Public License\n- * along with OpenNMS(R).  If not, see:\n- *      http://www.gnu.org/licenses/\n- *\n- * For more information contact:\n- *     OpenNMS(R) Licensing <license@opennms.org>\n- *     http://www.opennms.org/\n- *     http://www.opennms.com/\n- *******************************************************************************/\n-\n-package org.opennms.netmgt.telemetry.protocols.netflow.adapter.common;\n-\n-import java.util.Optional;\n-\n-import org.opennms.netmgt.flows.api.Flow;\n-import org.opennms.netmgt.telemetry.protocols.netflow.common.FlowMessage;\n-\n-import com.google.common.base.Strings;\n-\n-public class FlowMapper {\n-\n-    public static Flow buildFlowFromProto(FlowMessage flowMessage) {\n-        return new Flow() {\n-            @Override\n-            public long getTimestamp() {\n-                return flowMessage.getTimestamp();\n-            }\n-\n-            @Override\n-            public Long getBytes() {\n-                return flowMessage.hasNumBytes() ? flowMessage.getNumBytes().getValue() : null;\n-            }\n-\n-            @Override\n-            public Direction getDirection() {\n-                switch (flowMessage.getDirection()) {\n-                    case INGRESS:\n-                        return Direction.INGRESS;\n-                    case EGRESS:\n-                        return Direction.EGRESS;\n-                }\n-                return Direction.INGRESS;\n-\n-            }\n-\n-            @Override\n-            public String getDstAddr() {\n-\n-                if (!Strings.isNullOrEmpty(flowMessage.getDstAddress())) {\n-                    return flowMessage.getDstAddress();\n-                }\n-                return null;\n-            }\n-\n-            @Override\n-            public Optional<String> getDstAddrHostname() {\n-                if (!Strings.isNullOrEmpty(flowMessage.getDstHostname())) {\n-                    return Optional.of(flowMessage.getDstHostname());\n-                }\n-                return Optional.empty();\n-            }\n-\n-            @Override\n-            public Long getDstAs() {\n-                return flowMessage.hasDstAs() ? flowMessage.getDstAs().getValue() : null;\n-            }\n-\n-            @Override\n-            public Integer getDstMaskLen() {\n-                return flowMessage.hasDstMaskLen() ? flowMessage.getDstMaskLen().getValue() : null;\n-            }\n-\n-            @Override\n-            public Integer getDstPort() {\n-                return flowMessage.hasDstPort() ? flowMessage.getDstPort().getValue() : null;\n-            }\n-\n-            @Override\n-            public Integer getEngineId() {\n-                return flowMessage.hasEngineId() ? flowMessage.getEngineId().getValue() : null;\n-            }\n-\n-            @Override\n-            public Integer getEngineType() {\n-                return flowMessage.hasEngineType() ? flowMessage.getEngineType().getValue() : null;\n-            }\n-\n-            @Override\n-            public Long getDeltaSwitched() {\n-                return flowMessage.hasDeltaSwitched() ? flowMessage.getDeltaSwitched().getValue() : null;\n-            }\n-\n-            @Override\n-            public Long getFirstSwitched() {\n-                return flowMessage.hasFirstSwitched() ? flowMessage.getFirstSwitched().getValue() : null;\n-            }\n-\n-            @Override\n-            public int getFlowRecords() {\n-                return flowMessage.hasNumFlowRecords() ? flowMessage.getNumFlowRecords().getValue() : 0;\n-            }\n-\n-            @Override\n-            public long getFlowSeqNum() {\n-                return flowMessage.hasFlowSeqNum() ? flowMessage.getFlowSeqNum().getValue() : 0L;\n-            }\n-\n-            @Override\n-            public Integer getInputSnmp() {\n-                return flowMessage.hasInputSnmpIfindex() ? flowMessage.getInputSnmpIfindex().getValue() : null;\n-            }\n-\n-            @Override\n-            public Integer getIpProtocolVersion() {\n-                return flowMessage.hasIpProtocolVersion() ? flowMessage.getIpProtocolVersion().getValue() : null;\n-            }\n-\n-            @Override\n-            public Long getLastSwitched() {\n-                return flowMessage.hasLastSwitched() ? flowMessage.getLastSwitched().getValue() : null;\n-            }\n-\n-            @Override\n-            public String getNextHop() {\n-                if (!Strings.isNullOrEmpty(flowMessage.getNextHopAddress())) {\n-                    return flowMessage.getNextHopAddress();\n-                }\n-                return null;\n-            }\n-\n-            @Override\n-            public Optional<String> getNextHopHostname() {\n-                if (!Strings.isNullOrEmpty(flowMessage.getNextHopHostname())) {\n-                    return Optional.of(flowMessage.getNextHopHostname());\n-                }\n-                return Optional.empty();\n-            }\n-\n-            @Override\n-            public Integer getOutputSnmp() {\n-                return flowMessage.hasOutputSnmpIfindex() ? flowMessage.getOutputSnmpIfindex().getValue() : null;\n-            }\n-\n-            @Override\n-            public Long getPackets() {\n-                return flowMessage.hasNumPackets() ? flowMessage.getNumPackets().getValue() : null;\n-            }\n-\n-            @Override\n-            public Integer getProtocol() {\n-                return flowMessage.hasProtocol() ? flowMessage.getProtocol().getValue() : null;\n-            }\n-\n-            @Override\n-            public SamplingAlgorithm getSamplingAlgorithm() {\n-\n-                switch (flowMessage.getSamplingAlgorithm()) {\n-                    case SystematicCountBasedSampling:\n-                        return SamplingAlgorithm.SystematicCountBasedSampling;\n-                    case SystematicTimeBasedSampling:\n-                        return SamplingAlgorithm.SystematicTimeBasedSampling;\n-                    case RandomNoutOfNSampling:\n-                        return SamplingAlgorithm.RandomNoutOfNSampling;\n-                    case UniformProbabilisticSampling:\n-                        return SamplingAlgorithm.UniformProbabilisticSampling;\n-                    case PropertyMatchFiltering:\n-                        return SamplingAlgorithm.PropertyMatchFiltering;\n-                    case HashBasedFiltering:\n-                        return SamplingAlgorithm.HashBasedFiltering;\n-                    case FlowStateDependentIntermediateFlowSelectionProcess:\n-                        return SamplingAlgorithm.FlowStateDependentIntermediateFlowSelectionProcess;\n-                }\n-                return SamplingAlgorithm.Unassigned;\n-            }\n-\n-            @Override\n-            public Double getSamplingInterval() {\n-                return  flowMessage.hasSamplingInterval() ? flowMessage.getSamplingInterval().getValue() : null;\n-            }\n-\n-            @Override\n-            public String getSrcAddr() {\n-                if(!Strings.isNullOrEmpty(flowMessage.getSrcAddress())) {\n-                    return flowMessage.getSrcAddress();\n-                }\n-                return null;\n-            }\n-\n-            @Override\n-            public Optional<String> getSrcAddrHostname() {\n-                if (!Strings.isNullOrEmpty(flowMessage.getSrcHostname())) {\n-                    return Optional.of(flowMessage.getSrcHostname());\n-                }\n-                return Optional.empty();\n-            }\n-\n-            @Override\n-            public Long getSrcAs() {\n-                return flowMessage.hasSrcAs() ? flowMessage.getSrcAs().getValue() : null;\n-            }\n-\n-            @Override\n-            public Integer getSrcMaskLen() {\n-                return flowMessage.hasSrcMaskLen() ? flowMessage.getSrcMaskLen().getValue() : null;\n-            }\n-\n-            @Override\n-            public Integer getSrcPort() {\n-                return flowMessage.hasSrcPort() ? flowMessage.getSrcPort().getValue() : null;\n-            }\n-\n-            @Override\n-            public Integer getTcpFlags() {\n-                return flowMessage.hasTcpFlags() ? flowMessage.getTcpFlags().getValue() : null;\n-            }\n-\n-            @Override\n-            public Integer getTos() {\n-                return flowMessage.hasTos() ? flowMessage.getTos().getValue() : null;\n-            }\n-\n-            @Override\n-            public NetflowVersion getNetflowVersion() {\n-                switch (flowMessage.getNetflowVersion()) {\n-                    case V5:\n-                        return NetflowVersion.V5;\n-                    case V9:\n-                        return NetflowVersion.V9;\n-                    case IPFIX:\n-                        return NetflowVersion.IPFIX;\n-                    case SFLOW:\n-                        return NetflowVersion.SFLOW;\n-                    default:\n-                        return NetflowVersion.V5;\n-                }\n-            }\n-\n-            @Override\n-            public Integer getVlan() {\n-                return flowMessage.hasVlan() ? flowMessage.getVlan().getValue() : null;\n-            }\n-\n-            @Override\n-            public String getNodeIdentifier() {\n-                if (!Strings.isNullOrEmpty(flowMessage.getNodeIdentifier())) {\n-                    return flowMessage.getNodeIdentifier();\n-                }\n-                return null;\n-            }\n-        };\n-    }\n-}\n", "next_change": null}]}, "revised_code_in_main": {"commit": "3352dcced0424e52de475b87840f05dff94fbec4", "changed_code": [{"header": "diff --git a/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/common/FlowMapper.java b/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/common/FlowMapper.java\ndeleted file mode 100644\nindex ea7d467149e..00000000000\n--- a/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/common/FlowMapper.java\n+++ /dev/null\n", "chunk": "@@ -1,270 +0,0 @@\n-/*******************************************************************************\n- * This file is part of OpenNMS(R).\n- *\n- * Copyright (C) 2020 The OpenNMS Group, Inc.\n- * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n- *\n- * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n- *\n- * OpenNMS(R) is free software: you can redistribute it and/or modify\n- * it under the terms of the GNU Affero General Public License as published\n- * by the Free Software Foundation, either version 3 of the License,\n- * or (at your option) any later version.\n- *\n- * OpenNMS(R) is distributed in the hope that it will be useful,\n- * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n- * GNU Affero General Public License for more details.\n- *\n- * You should have received a copy of the GNU Affero General Public License\n- * along with OpenNMS(R).  If not, see:\n- *      http://www.gnu.org/licenses/\n- *\n- * For more information contact:\n- *     OpenNMS(R) Licensing <license@opennms.org>\n- *     http://www.opennms.org/\n- *     http://www.opennms.com/\n- *******************************************************************************/\n-\n-package org.opennms.netmgt.telemetry.protocols.netflow.adapter.common;\n-\n-import java.util.Optional;\n-\n-import org.opennms.netmgt.flows.api.Flow;\n-import org.opennms.netmgt.telemetry.protocols.netflow.common.FlowMessage;\n-\n-import com.google.common.base.Strings;\n-\n-public class FlowMapper {\n-\n-    public static Flow buildFlowFromProto(FlowMessage flowMessage) {\n-        return new Flow() {\n-            @Override\n-            public long getTimestamp() {\n-                return flowMessage.getTimestamp();\n-            }\n-\n-            @Override\n-            public Long getBytes() {\n-                return flowMessage.hasNumBytes() ? flowMessage.getNumBytes().getValue() : null;\n-            }\n-\n-            @Override\n-            public Direction getDirection() {\n-                switch (flowMessage.getDirection()) {\n-                    case INGRESS:\n-                        return Direction.INGRESS;\n-                    case EGRESS:\n-                        return Direction.EGRESS;\n-                }\n-                return Direction.INGRESS;\n-\n-            }\n-\n-            @Override\n-            public String getDstAddr() {\n-\n-                if (!Strings.isNullOrEmpty(flowMessage.getDstAddress())) {\n-                    return flowMessage.getDstAddress();\n-                }\n-                return null;\n-            }\n-\n-            @Override\n-            public Optional<String> getDstAddrHostname() {\n-                if (!Strings.isNullOrEmpty(flowMessage.getDstHostname())) {\n-                    return Optional.of(flowMessage.getDstHostname());\n-                }\n-                return Optional.empty();\n-            }\n-\n-            @Override\n-            public Long getDstAs() {\n-                return flowMessage.hasDstAs() ? flowMessage.getDstAs().getValue() : null;\n-            }\n-\n-            @Override\n-            public Integer getDstMaskLen() {\n-                return flowMessage.hasDstMaskLen() ? flowMessage.getDstMaskLen().getValue() : null;\n-            }\n-\n-            @Override\n-            public Integer getDstPort() {\n-                return flowMessage.hasDstPort() ? flowMessage.getDstPort().getValue() : null;\n-            }\n-\n-            @Override\n-            public Integer getEngineId() {\n-                return flowMessage.hasEngineId() ? flowMessage.getEngineId().getValue() : null;\n-            }\n-\n-            @Override\n-            public Integer getEngineType() {\n-                return flowMessage.hasEngineType() ? flowMessage.getEngineType().getValue() : null;\n-            }\n-\n-            @Override\n-            public Long getDeltaSwitched() {\n-                return flowMessage.hasDeltaSwitched() ? flowMessage.getDeltaSwitched().getValue() : null;\n-            }\n-\n-            @Override\n-            public Long getFirstSwitched() {\n-                return flowMessage.hasFirstSwitched() ? flowMessage.getFirstSwitched().getValue() : null;\n-            }\n-\n-            @Override\n-            public int getFlowRecords() {\n-                return flowMessage.hasNumFlowRecords() ? flowMessage.getNumFlowRecords().getValue() : 0;\n-            }\n-\n-            @Override\n-            public long getFlowSeqNum() {\n-                return flowMessage.hasFlowSeqNum() ? flowMessage.getFlowSeqNum().getValue() : 0L;\n-            }\n-\n-            @Override\n-            public Integer getInputSnmp() {\n-                return flowMessage.hasInputSnmpIfindex() ? flowMessage.getInputSnmpIfindex().getValue() : null;\n-            }\n-\n-            @Override\n-            public Integer getIpProtocolVersion() {\n-                return flowMessage.hasIpProtocolVersion() ? flowMessage.getIpProtocolVersion().getValue() : null;\n-            }\n-\n-            @Override\n-            public Long getLastSwitched() {\n-                return flowMessage.hasLastSwitched() ? flowMessage.getLastSwitched().getValue() : null;\n-            }\n-\n-            @Override\n-            public String getNextHop() {\n-                if (!Strings.isNullOrEmpty(flowMessage.getNextHopAddress())) {\n-                    return flowMessage.getNextHopAddress();\n-                }\n-                return null;\n-            }\n-\n-            @Override\n-            public Optional<String> getNextHopHostname() {\n-                if (!Strings.isNullOrEmpty(flowMessage.getNextHopHostname())) {\n-                    return Optional.of(flowMessage.getNextHopHostname());\n-                }\n-                return Optional.empty();\n-            }\n-\n-            @Override\n-            public Integer getOutputSnmp() {\n-                return flowMessage.hasOutputSnmpIfindex() ? flowMessage.getOutputSnmpIfindex().getValue() : null;\n-            }\n-\n-            @Override\n-            public Long getPackets() {\n-                return flowMessage.hasNumPackets() ? flowMessage.getNumPackets().getValue() : null;\n-            }\n-\n-            @Override\n-            public Integer getProtocol() {\n-                return flowMessage.hasProtocol() ? flowMessage.getProtocol().getValue() : null;\n-            }\n-\n-            @Override\n-            public SamplingAlgorithm getSamplingAlgorithm() {\n-\n-                switch (flowMessage.getSamplingAlgorithm()) {\n-                    case SystematicCountBasedSampling:\n-                        return SamplingAlgorithm.SystematicCountBasedSampling;\n-                    case SystematicTimeBasedSampling:\n-                        return SamplingAlgorithm.SystematicTimeBasedSampling;\n-                    case RandomNoutOfNSampling:\n-                        return SamplingAlgorithm.RandomNoutOfNSampling;\n-                    case UniformProbabilisticSampling:\n-                        return SamplingAlgorithm.UniformProbabilisticSampling;\n-                    case PropertyMatchFiltering:\n-                        return SamplingAlgorithm.PropertyMatchFiltering;\n-                    case HashBasedFiltering:\n-                        return SamplingAlgorithm.HashBasedFiltering;\n-                    case FlowStateDependentIntermediateFlowSelectionProcess:\n-                        return SamplingAlgorithm.FlowStateDependentIntermediateFlowSelectionProcess;\n-                }\n-                return SamplingAlgorithm.Unassigned;\n-            }\n-\n-            @Override\n-            public Double getSamplingInterval() {\n-                return  flowMessage.hasSamplingInterval() ? flowMessage.getSamplingInterval().getValue() : null;\n-            }\n-\n-            @Override\n-            public String getSrcAddr() {\n-                if(!Strings.isNullOrEmpty(flowMessage.getSrcAddress())) {\n-                    return flowMessage.getSrcAddress();\n-                }\n-                return null;\n-            }\n-\n-            @Override\n-            public Optional<String> getSrcAddrHostname() {\n-                if (!Strings.isNullOrEmpty(flowMessage.getSrcHostname())) {\n-                    return Optional.of(flowMessage.getSrcHostname());\n-                }\n-                return Optional.empty();\n-            }\n-\n-            @Override\n-            public Long getSrcAs() {\n-                return flowMessage.hasSrcAs() ? flowMessage.getSrcAs().getValue() : null;\n-            }\n-\n-            @Override\n-            public Integer getSrcMaskLen() {\n-                return flowMessage.hasSrcMaskLen() ? flowMessage.getSrcMaskLen().getValue() : null;\n-            }\n-\n-            @Override\n-            public Integer getSrcPort() {\n-                return flowMessage.hasSrcPort() ? flowMessage.getSrcPort().getValue() : null;\n-            }\n-\n-            @Override\n-            public Integer getTcpFlags() {\n-                return flowMessage.hasTcpFlags() ? flowMessage.getTcpFlags().getValue() : null;\n-            }\n-\n-            @Override\n-            public Integer getTos() {\n-                return flowMessage.hasTos() ? flowMessage.getTos().getValue() : null;\n-            }\n-\n-            @Override\n-            public NetflowVersion getNetflowVersion() {\n-                switch (flowMessage.getNetflowVersion()) {\n-                    case V5:\n-                        return NetflowVersion.V5;\n-                    case V9:\n-                        return NetflowVersion.V9;\n-                    case IPFIX:\n-                        return NetflowVersion.IPFIX;\n-                    case SFLOW:\n-                        return NetflowVersion.SFLOW;\n-                    default:\n-                        return NetflowVersion.V5;\n-                }\n-            }\n-\n-            @Override\n-            public Integer getVlan() {\n-                return flowMessage.hasVlan() ? flowMessage.getVlan().getValue() : null;\n-            }\n-\n-            @Override\n-            public String getNodeIdentifier() {\n-                if (!Strings.isNullOrEmpty(flowMessage.getNodeIdentifier())) {\n-                    return flowMessage.getNodeIdentifier();\n-                }\n-                return null;\n-            }\n-        };\n-    }\n-}\n", "next_change": null}]}, "commits_in_main": [{"oid": "3352dcced0424e52de475b87840f05dff94fbec4", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI0OTQ5NA==", "url": "https://github.com/OpenNMS/opennms/pull/2903#discussion_r390249494", "body": "Is this hand edited?", "bodyText": "Is this hand edited?", "bodyHTML": "<p dir=\"auto\">Is this hand edited?</p>", "author": "fooker", "createdAt": "2020-03-10T11:27:35Z", "path": "features/telemetry/protocols/netflow/transport/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/proto/FlowMessageProtoOrBuilder.java", "diffHunk": "@@ -0,0 +1,800 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+\n+// Generated by the protocol buffer compiler.  DO NOT EDIT!\n+// source: netflow.proto\n+\n+package org.opennms.netmgt.telemetry.protocols.netflow.proto;\n+\n+import org.opennms.netmgt.telemetry.protocols.netflow.common.FlowMessage;\n+\n+public interface FlowMessageProtoOrBuilder extends\n+    // @@protoc_insertion_point(interface_extends:FlowMessageProto)\n+    com.google.protobuf.MessageOrBuilder, FlowMessage {", "originalCommit": "628f488dd99abfee27aab31b69ba5a1409717e77", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b0e90f013c5b6948e960f7eb2d66870c3c84e12a", "changed_code": [{"header": "diff --git a/features/telemetry/protocols/netflow/transport/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/proto/FlowMessageProtoOrBuilder.java b/features/telemetry/protocols/netflow/transport/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/transport/FlowMessageOrBuilder.java\nsimilarity index 96%\nrename from features/telemetry/protocols/netflow/transport/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/proto/FlowMessageProtoOrBuilder.java\nrename to features/telemetry/protocols/netflow/transport/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/transport/FlowMessageOrBuilder.java\nindex 8d82b56724c..7504f235abb 100644\n--- a/features/telemetry/protocols/netflow/transport/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/proto/FlowMessageProtoOrBuilder.java\n+++ b/features/telemetry/protocols/netflow/transport/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/transport/FlowMessageOrBuilder.java\n", "chunk": "@@ -29,13 +29,11 @@\n // Generated by the protocol buffer compiler.  DO NOT EDIT!\n // source: netflow.proto\n \n-package org.opennms.netmgt.telemetry.protocols.netflow.proto;\n+package org.opennms.netmgt.telemetry.protocols.netflow.transport;\n \n-import org.opennms.netmgt.telemetry.protocols.netflow.common.FlowMessage;\n-\n-public interface FlowMessageProtoOrBuilder extends\n-    // @@protoc_insertion_point(interface_extends:FlowMessageProto)\n-    com.google.protobuf.MessageOrBuilder, FlowMessage {\n+public interface FlowMessageOrBuilder extends\n+    // @@protoc_insertion_point(interface_extends:FlowMessage)\n+    com.google.protobuf.MessageOrBuilder {\n \n   /**\n    * <pre>\n", "next_change": null}]}, "revised_code_in_main": {"commit": "3352dcced0424e52de475b87840f05dff94fbec4", "changed_code": [{"header": "diff --git a/features/telemetry/protocols/netflow/transport/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/proto/FlowMessageProtoOrBuilder.java b/features/telemetry/protocols/netflow/transport/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/transport/FlowMessageOrBuilder.java\nsimilarity index 96%\nrename from features/telemetry/protocols/netflow/transport/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/proto/FlowMessageProtoOrBuilder.java\nrename to features/telemetry/protocols/netflow/transport/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/transport/FlowMessageOrBuilder.java\nindex 8d82b56724c..7504f235abb 100644\n--- a/features/telemetry/protocols/netflow/transport/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/proto/FlowMessageProtoOrBuilder.java\n+++ b/features/telemetry/protocols/netflow/transport/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/transport/FlowMessageOrBuilder.java\n", "chunk": "@@ -29,13 +29,11 @@\n // Generated by the protocol buffer compiler.  DO NOT EDIT!\n // source: netflow.proto\n \n-package org.opennms.netmgt.telemetry.protocols.netflow.proto;\n+package org.opennms.netmgt.telemetry.protocols.netflow.transport;\n \n-import org.opennms.netmgt.telemetry.protocols.netflow.common.FlowMessage;\n-\n-public interface FlowMessageProtoOrBuilder extends\n-    // @@protoc_insertion_point(interface_extends:FlowMessageProto)\n-    com.google.protobuf.MessageOrBuilder, FlowMessage {\n+public interface FlowMessageOrBuilder extends\n+    // @@protoc_insertion_point(interface_extends:FlowMessage)\n+    com.google.protobuf.MessageOrBuilder {\n \n   /**\n    * <pre>\n", "next_change": null}]}, "commits_in_main": [{"oid": "3352dcced0424e52de475b87840f05dff94fbec4", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI0OTkzNw==", "url": "https://github.com/OpenNMS/opennms/pull/2903#discussion_r390249937", "body": "I don't think we need this interface at all. Instead, we should use the `FlowMessageProto` directly in the converters.", "bodyText": "I don't think we need this interface at all. Instead, we should use the FlowMessageProto directly in the converters.", "bodyHTML": "<p dir=\"auto\">I don't think we need this interface at all. Instead, we should use the <code>FlowMessageProto</code> directly in the converters.</p>", "author": "fooker", "createdAt": "2020-03-10T11:28:32Z", "path": "features/telemetry/protocols/netflow/transport/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/common/FlowMessage.java", "diffHunk": "@@ -0,0 +1,266 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+\n+package org.opennms.netmgt.telemetry.protocols.netflow.common;\n+\n+import org.opennms.netmgt.telemetry.protocols.netflow.proto.Direction;\n+import org.opennms.netmgt.telemetry.protocols.netflow.proto.NetflowVersion;\n+import org.opennms.netmgt.telemetry.protocols.netflow.proto.SamplingAlgorithm;\n+\n+import com.google.protobuf.DoubleValue;\n+import com.google.protobuf.UInt32Value;\n+import com.google.protobuf.UInt64Value;\n+\n+public interface FlowMessage {", "originalCommit": "628f488dd99abfee27aab31b69ba5a1409717e77", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b0e90f013c5b6948e960f7eb2d66870c3c84e12a", "changed_code": [{"header": "diff --git a/features/telemetry/protocols/netflow/transport/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/common/FlowMessage.java b/features/telemetry/protocols/netflow/transport/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/common/FlowMessage.java\ndeleted file mode 100644\nindex c9c9f9f0d14..00000000000\n--- a/features/telemetry/protocols/netflow/transport/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/common/FlowMessage.java\n+++ /dev/null\n", "chunk": "@@ -1,266 +0,0 @@\n-/*******************************************************************************\n- * This file is part of OpenNMS(R).\n- *\n- * Copyright (C) 2020 The OpenNMS Group, Inc.\n- * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n- *\n- * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n- *\n- * OpenNMS(R) is free software: you can redistribute it and/or modify\n- * it under the terms of the GNU Affero General Public License as published\n- * by the Free Software Foundation, either version 3 of the License,\n- * or (at your option) any later version.\n- *\n- * OpenNMS(R) is distributed in the hope that it will be useful,\n- * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n- * GNU Affero General Public License for more details.\n- *\n- * You should have received a copy of the GNU Affero General Public License\n- * along with OpenNMS(R).  If not, see:\n- *      http://www.gnu.org/licenses/\n- *\n- * For more information contact:\n- *     OpenNMS(R) Licensing <license@opennms.org>\n- *     http://www.opennms.org/\n- *     http://www.opennms.com/\n- *******************************************************************************/\n-\n-package org.opennms.netmgt.telemetry.protocols.netflow.common;\n-\n-import org.opennms.netmgt.telemetry.protocols.netflow.proto.Direction;\n-import org.opennms.netmgt.telemetry.protocols.netflow.proto.NetflowVersion;\n-import org.opennms.netmgt.telemetry.protocols.netflow.proto.SamplingAlgorithm;\n-\n-import com.google.protobuf.DoubleValue;\n-import com.google.protobuf.UInt32Value;\n-import com.google.protobuf.UInt64Value;\n-\n-public interface FlowMessage {\n-    /**\n-     * Flow timestamp in milliseconds.\n-     */\n-    long getTimestamp();\n-\n-    /**\n-     * Number of bytes transferred in the flow.\n-     */\n-    UInt64Value getNumBytes();\n-\n-    boolean hasNumBytes();\n-\n-    /**\n-     * Direction of the flow (egress vs ingress)\n-     */\n-     Direction getDirection();\n-\n-    /**\n-     * Destination address.\n-     */\n-    String getDstAddress();\n-\n-    /**\n-     * Destination address hostname.\n-     */\n-    String getDstHostname();\n-\n-    /**\n-     * Destination autonomous system (AS).\n-     */\n-    UInt64Value getDstAs();\n-\n-    boolean hasDstAs();\n-\n-    /**\n-     * The number of contiguous bits in the source address subnet mask.\n-     */\n-    UInt32Value getDstMaskLen();\n-\n-    boolean hasDstMaskLen();\n-\n-    /**\n-     * Destination port.\n-     */\n-    UInt32Value getDstPort();\n-\n-    boolean hasDstPort();\n-\n-    /**\n-     * Slot number of the flow-switching engine.\n-     */\n-    UInt32Value getEngineId();\n-\n-    boolean hasEngineId();\n-\n-    /**\n-     * Type of flow-switching engine.\n-     */\n-    UInt32Value getEngineType();\n-\n-    boolean hasEngineType();\n-\n-    /**\n-     * Unix timestamp in ms at which the previous exported packet\n-     * associated with this flow was switched.\n-     */\n-    UInt64Value getDeltaSwitched();\n-\n-    boolean hasDeltaSwitched();\n-\n-    /**\n-     * Unix timestamp in ms at which the first packet\n-     * associated with this flow was switched.\n-     */\n-    UInt64Value getFirstSwitched();\n-\n-    boolean hasFirstSwitched();\n-\n-    /**\n-     * Number of flow records in the associated packet.\n-     */\n-    UInt32Value getNumFlowRecords();\n-\n-    boolean hasNumFlowRecords();\n-\n-    /**\n-     * Flow packet sequence number.\n-     */\n-    UInt64Value getFlowSeqNum();\n-\n-    boolean hasFlowSeqNum();\n-\n-    /**\n-     * SNMP ifIndex\n-     */\n-    UInt32Value getInputSnmpIfindex();\n-\n-    boolean hasInputSnmpIfindex();\n-\n-    /**\n-     * IPv4 vs IPv6\n-     */\n-    UInt32Value getIpProtocolVersion();\n-\n-    boolean hasIpProtocolVersion();\n-\n-    /**\n-     * Unix timestamp in ms at which the last packet\n-     * associated with this flow was switched.\n-     */\n-    UInt64Value getLastSwitched();\n-\n-    boolean hasLastSwitched();\n-\n-    /**\n-     * Next hop\n-     */\n-    String getNextHopAddress();\n-\n-\n-    /**\n-     * Next hop hostname\n-     */\n-    String getNextHopHostname();\n-\n-    /**\n-     * SNMP ifIndex\n-     */\n-    UInt32Value getOutputSnmpIfindex();\n-\n-    boolean hasOutputSnmpIfindex();\n-\n-    /**\n-     * Number of packets in the flow\n-     */\n-    UInt64Value getNumPackets();\n-\n-    boolean hasNumPackets();\n-\n-    /**\n-     * IP protocol number i.e 6 for TCP, 17 for UDP\n-     */\n-    UInt32Value getProtocol();\n-\n-    boolean hasProtocol();\n-\n-    /**\n-     * Sampling algorithm ID value.\n-     */\n-    SamplingAlgorithm getSamplingAlgorithm();\n-\n-    /**\n-     * Sampling interval\n-     */\n-    DoubleValue getSamplingInterval();\n-\n-    boolean hasSamplingInterval();\n-\n-    /**\n-     * Source address.\n-     */\n-    String getSrcAddress();\n-\n-    /**\n-     * Source address hostname.\n-     */\n-    String getSrcHostname();\n-\n-    /**\n-     * Source autonomous system (AS).\n-     */\n-    UInt64Value getSrcAs();\n-\n-    boolean hasSrcAs();\n-\n-    /**\n-     * The number of contiguous bits in the destination address subnet mask.\n-     */\n-    UInt32Value getSrcMaskLen();\n-\n-    boolean hasSrcMaskLen();\n-\n-    /**\n-     * Source port.\n-     */\n-    UInt32Value getSrcPort();\n-\n-    boolean hasSrcPort();\n-\n-    /**\n-     * TCP Flags.\n-     */\n-    UInt32Value getTcpFlags();\n-\n-    boolean hasTcpFlags();\n-\n-    /**\n-     * TOS.\n-     */\n-    UInt32Value getTos();\n-\n-    boolean hasTos();\n-\n-    /**\n-     * Netfow version value\n-     */\n-    NetflowVersion getNetflowVersion();\n-\n-    /**\n-     * VLAN ID.\n-     */\n-    UInt32Value getVlan();\n-\n-\n-    boolean hasVlan();\n-\n-    /**\n-     * Method to get node lookup identifier.\n-     *\n-     * This field can be used as an alternate means to identify the\n-     * exporter node when the source address of the packets are altered\n-     * due to address translation.\n-     *\n-     * * @return the identifier\n-     */\n-    String getNodeIdentifier();\n-}\n", "next_change": null}]}, "revised_code_in_main": {"commit": "3352dcced0424e52de475b87840f05dff94fbec4", "changed_code": [{"header": "diff --git a/features/telemetry/protocols/netflow/transport/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/common/FlowMessage.java b/features/telemetry/protocols/netflow/transport/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/common/FlowMessage.java\ndeleted file mode 100644\nindex c9c9f9f0d14..00000000000\n--- a/features/telemetry/protocols/netflow/transport/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/common/FlowMessage.java\n+++ /dev/null\n", "chunk": "@@ -1,266 +0,0 @@\n-/*******************************************************************************\n- * This file is part of OpenNMS(R).\n- *\n- * Copyright (C) 2020 The OpenNMS Group, Inc.\n- * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n- *\n- * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n- *\n- * OpenNMS(R) is free software: you can redistribute it and/or modify\n- * it under the terms of the GNU Affero General Public License as published\n- * by the Free Software Foundation, either version 3 of the License,\n- * or (at your option) any later version.\n- *\n- * OpenNMS(R) is distributed in the hope that it will be useful,\n- * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n- * GNU Affero General Public License for more details.\n- *\n- * You should have received a copy of the GNU Affero General Public License\n- * along with OpenNMS(R).  If not, see:\n- *      http://www.gnu.org/licenses/\n- *\n- * For more information contact:\n- *     OpenNMS(R) Licensing <license@opennms.org>\n- *     http://www.opennms.org/\n- *     http://www.opennms.com/\n- *******************************************************************************/\n-\n-package org.opennms.netmgt.telemetry.protocols.netflow.common;\n-\n-import org.opennms.netmgt.telemetry.protocols.netflow.proto.Direction;\n-import org.opennms.netmgt.telemetry.protocols.netflow.proto.NetflowVersion;\n-import org.opennms.netmgt.telemetry.protocols.netflow.proto.SamplingAlgorithm;\n-\n-import com.google.protobuf.DoubleValue;\n-import com.google.protobuf.UInt32Value;\n-import com.google.protobuf.UInt64Value;\n-\n-public interface FlowMessage {\n-    /**\n-     * Flow timestamp in milliseconds.\n-     */\n-    long getTimestamp();\n-\n-    /**\n-     * Number of bytes transferred in the flow.\n-     */\n-    UInt64Value getNumBytes();\n-\n-    boolean hasNumBytes();\n-\n-    /**\n-     * Direction of the flow (egress vs ingress)\n-     */\n-     Direction getDirection();\n-\n-    /**\n-     * Destination address.\n-     */\n-    String getDstAddress();\n-\n-    /**\n-     * Destination address hostname.\n-     */\n-    String getDstHostname();\n-\n-    /**\n-     * Destination autonomous system (AS).\n-     */\n-    UInt64Value getDstAs();\n-\n-    boolean hasDstAs();\n-\n-    /**\n-     * The number of contiguous bits in the source address subnet mask.\n-     */\n-    UInt32Value getDstMaskLen();\n-\n-    boolean hasDstMaskLen();\n-\n-    /**\n-     * Destination port.\n-     */\n-    UInt32Value getDstPort();\n-\n-    boolean hasDstPort();\n-\n-    /**\n-     * Slot number of the flow-switching engine.\n-     */\n-    UInt32Value getEngineId();\n-\n-    boolean hasEngineId();\n-\n-    /**\n-     * Type of flow-switching engine.\n-     */\n-    UInt32Value getEngineType();\n-\n-    boolean hasEngineType();\n-\n-    /**\n-     * Unix timestamp in ms at which the previous exported packet\n-     * associated with this flow was switched.\n-     */\n-    UInt64Value getDeltaSwitched();\n-\n-    boolean hasDeltaSwitched();\n-\n-    /**\n-     * Unix timestamp in ms at which the first packet\n-     * associated with this flow was switched.\n-     */\n-    UInt64Value getFirstSwitched();\n-\n-    boolean hasFirstSwitched();\n-\n-    /**\n-     * Number of flow records in the associated packet.\n-     */\n-    UInt32Value getNumFlowRecords();\n-\n-    boolean hasNumFlowRecords();\n-\n-    /**\n-     * Flow packet sequence number.\n-     */\n-    UInt64Value getFlowSeqNum();\n-\n-    boolean hasFlowSeqNum();\n-\n-    /**\n-     * SNMP ifIndex\n-     */\n-    UInt32Value getInputSnmpIfindex();\n-\n-    boolean hasInputSnmpIfindex();\n-\n-    /**\n-     * IPv4 vs IPv6\n-     */\n-    UInt32Value getIpProtocolVersion();\n-\n-    boolean hasIpProtocolVersion();\n-\n-    /**\n-     * Unix timestamp in ms at which the last packet\n-     * associated with this flow was switched.\n-     */\n-    UInt64Value getLastSwitched();\n-\n-    boolean hasLastSwitched();\n-\n-    /**\n-     * Next hop\n-     */\n-    String getNextHopAddress();\n-\n-\n-    /**\n-     * Next hop hostname\n-     */\n-    String getNextHopHostname();\n-\n-    /**\n-     * SNMP ifIndex\n-     */\n-    UInt32Value getOutputSnmpIfindex();\n-\n-    boolean hasOutputSnmpIfindex();\n-\n-    /**\n-     * Number of packets in the flow\n-     */\n-    UInt64Value getNumPackets();\n-\n-    boolean hasNumPackets();\n-\n-    /**\n-     * IP protocol number i.e 6 for TCP, 17 for UDP\n-     */\n-    UInt32Value getProtocol();\n-\n-    boolean hasProtocol();\n-\n-    /**\n-     * Sampling algorithm ID value.\n-     */\n-    SamplingAlgorithm getSamplingAlgorithm();\n-\n-    /**\n-     * Sampling interval\n-     */\n-    DoubleValue getSamplingInterval();\n-\n-    boolean hasSamplingInterval();\n-\n-    /**\n-     * Source address.\n-     */\n-    String getSrcAddress();\n-\n-    /**\n-     * Source address hostname.\n-     */\n-    String getSrcHostname();\n-\n-    /**\n-     * Source autonomous system (AS).\n-     */\n-    UInt64Value getSrcAs();\n-\n-    boolean hasSrcAs();\n-\n-    /**\n-     * The number of contiguous bits in the destination address subnet mask.\n-     */\n-    UInt32Value getSrcMaskLen();\n-\n-    boolean hasSrcMaskLen();\n-\n-    /**\n-     * Source port.\n-     */\n-    UInt32Value getSrcPort();\n-\n-    boolean hasSrcPort();\n-\n-    /**\n-     * TCP Flags.\n-     */\n-    UInt32Value getTcpFlags();\n-\n-    boolean hasTcpFlags();\n-\n-    /**\n-     * TOS.\n-     */\n-    UInt32Value getTos();\n-\n-    boolean hasTos();\n-\n-    /**\n-     * Netfow version value\n-     */\n-    NetflowVersion getNetflowVersion();\n-\n-    /**\n-     * VLAN ID.\n-     */\n-    UInt32Value getVlan();\n-\n-\n-    boolean hasVlan();\n-\n-    /**\n-     * Method to get node lookup identifier.\n-     *\n-     * This field can be used as an alternate means to identify the\n-     * exporter node when the source address of the packets are altered\n-     * due to address translation.\n-     *\n-     * * @return the identifier\n-     */\n-    String getNodeIdentifier();\n-}\n", "next_change": null}]}, "commits_in_main": [{"oid": "3352dcced0424e52de475b87840f05dff94fbec4", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI1MTc3MQ==", "url": "https://github.com/OpenNMS/opennms/pull/2903#discussion_r390251771", "body": "I can see this is useful during the transition but I would prefer to get rid of the BSON stuff completely. My proposal is to generate the BSON output one last time and use it to generate some JSON which will be used in this tests instead.", "bodyText": "I can see this is useful during the transition but I would prefer to get rid of the BSON stuff completely. My proposal is to generate the BSON output one last time and use it to generate some JSON which will be used in this tests instead.", "bodyHTML": "<p dir=\"auto\">I can see this is useful during the transition but I would prefer to get rid of the BSON stuff completely. My proposal is to generate the BSON output one last time and use it to generate some JSON which will be used in this tests instead.</p>", "author": "fooker", "createdAt": "2020-03-10T11:32:32Z", "path": "features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/ipfix/IpFixProtobufValidationTest.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+\n+package org.opennms.netmgt.telemetry.protocols.netflow.adapter.ipfix;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.opennms.netmgt.telemetry.listeners.utils.BufferUtils.slice;\n+\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.nio.ByteBuffer;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.bson.BsonDocument;\n+import org.bson.RawBsonDocument;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.opennms.netmgt.flows.api.Converter;\n+import org.opennms.netmgt.flows.api.Flow;\n+import org.opennms.netmgt.telemetry.protocols.netflow.adapter.netflow9.Netflow9Converter;\n+import org.opennms.netmgt.telemetry.protocols.netflow.common.FlowMessage;\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.InvalidPacketException;\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.ParserBase;\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.Protocol;\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.ipfix.proto.Header;\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.ipfix.proto.Packet;\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.session.Session;\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.session.TcpSession;\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.transport.FlowMessageBuilderFactory;\n+import org.opennms.netmgt.telemetry.protocols.netflow.proto.FlowMessageProto;\n+\n+import com.google.protobuf.InvalidProtocolBufferException;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.Unpooled;\n+\n+\n+/**\n+ * This test validates netflow protobuf values against bson output.\n+ */\n+public class IpFixProtobufValidationTest {", "originalCommit": "628f488dd99abfee27aab31b69ba5a1409717e77", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b0e90f013c5b6948e960f7eb2d66870c3c84e12a", "changed_code": [{"header": "diff --git a/features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/ipfix/IpFixProtobufValidationTest.java b/features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/ipfix/IpFixProtobufValidationTest.java\nindex bb81ebacd5f..b1078668eec 100644\n--- a/features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/ipfix/IpFixProtobufValidationTest.java\n+++ b/features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/ipfix/IpFixProtobufValidationTest.java\n", "chunk": "@@ -75,64 +69,55 @@ public class IpFixProtobufValidationTest {\n     private Converter ipFixConverter;\n \n     @Test\n-    public void canValidateIpFixFlowsWithBson() {\n+    public void canValidateIpFixFlowsWithJsonOutput() {\n         // Generate flows from existing packet payloads\n-        ipFixConverter = new Netflow9Converter();\n-        List<Flow> flows = getFlowsForPayloadsInSession(false, \"/flows/ipfix.dat\",\n+        ipFixConverter = new NetFlowConverter();\n+        List<Flow> flows = getFlowsForPayloadsInSession(\"/flows/ipfix.dat\",\n                 \"/flows/ipfix_test.dat\");\n         assertThat(flows, hasSize(8));\n-        ipFixConverter = new IpFixBsonConverter();\n-        List<Flow> flowsWithBson = getFlowsForPayloadsInSession(true, \"/flows/ipfix.dat\",\n-                \"/flows/ipfix_test.dat\");\n-        assertThat(flowsWithBson, hasSize(8));\n+        ipFixConverter = new Utils.JsonConverter();\n+        List<Flow> jsonData = ipFixConverter.convert(IpfixTestData.ipFixData);\n+        assertThat(jsonData, hasSize(8));\n         for (int i = 0; i < 8; i++) {\n-            Assert.assertEquals(flows.get(i).getFlowSeqNum(), flowsWithBson.get(i).getFlowSeqNum());\n-            Assert.assertEquals(flows.get(i).getFlowRecords(), flowsWithBson.get(i).getFlowRecords());\n-            Assert.assertEquals(flows.get(i).getTimestamp(), flowsWithBson.get(i).getTimestamp());\n-            Assert.assertEquals(flows.get(i).getBytes(), flowsWithBson.get(i).getBytes());\n-            Flow.Direction direction = flowsWithBson.get(i).getDirection() != null ? flowsWithBson.get(i).getDirection() : Flow.Direction.INGRESS;\n+            Assert.assertEquals(flows.get(i).getFlowSeqNum(), jsonData.get(i).getFlowSeqNum());\n+            Assert.assertEquals(flows.get(i).getFlowRecords(), jsonData.get(i).getFlowRecords());\n+            Assert.assertEquals(flows.get(i).getTimestamp(), jsonData.get(i).getTimestamp());\n+            Assert.assertEquals(flows.get(i).getBytes(), jsonData.get(i).getBytes());\n+            Flow.Direction direction = jsonData.get(i).getDirection() != null ? jsonData.get(i).getDirection() : Flow.Direction.INGRESS;\n             Assert.assertEquals(flows.get(i).getDirection(), direction);\n-            Assert.assertEquals(flows.get(i).getFirstSwitched(), flowsWithBson.get(i).getFirstSwitched());\n-            Assert.assertEquals(flows.get(i).getLastSwitched(), flowsWithBson.get(i).getLastSwitched());\n-            Assert.assertEquals(flows.get(i).getDeltaSwitched(), flowsWithBson.get(i).getDeltaSwitched());\n-            Assert.assertEquals(flows.get(i).getDstAddr(), flowsWithBson.get(i).getDstAddr());\n-            Assert.assertEquals(flows.get(i).getDstAs(), flowsWithBson.get(i).getDstAs());\n-            Assert.assertEquals(flows.get(i).getDstPort(), flowsWithBson.get(i).getDstPort());\n-            Assert.assertEquals(flows.get(i).getDstMaskLen(), flowsWithBson.get(i).getDstMaskLen());\n-            Assert.assertEquals(flows.get(i).getDstAddrHostname(), flowsWithBson.get(i).getDstAddrHostname());\n-            Assert.assertEquals(flows.get(i).getSrcAddr(), flowsWithBson.get(i).getSrcAddr());\n-            Assert.assertEquals(flows.get(i).getSrcAs(), flowsWithBson.get(i).getSrcAs());\n-            Assert.assertEquals(flows.get(i).getSrcPort(), flowsWithBson.get(i).getSrcPort());\n-            Assert.assertEquals(flows.get(i).getSrcAddrHostname(), flowsWithBson.get(i).getSrcAddrHostname());\n-            Assert.assertEquals(flows.get(i).getSrcMaskLen(), flowsWithBson.get(i).getSrcMaskLen());\n-            Assert.assertEquals(flows.get(i).getNextHop(), flowsWithBson.get(i).getNextHop());\n-            Assert.assertEquals(flows.get(i).getInputSnmp(), flowsWithBson.get(i).getInputSnmp());\n-            Assert.assertEquals(flows.get(i).getOutputSnmp(), flowsWithBson.get(i).getOutputSnmp());\n-            Assert.assertEquals(flows.get(i).getNetflowVersion(), flowsWithBson.get(i).getNetflowVersion());\n-            Assert.assertEquals(flows.get(i).getTcpFlags(), flowsWithBson.get(i).getTcpFlags());\n-            Assert.assertEquals(flows.get(i).getProtocol(), flowsWithBson.get(i).getProtocol());\n-            Assert.assertEquals(flows.get(i).getTos(), flowsWithBson.get(i).getTos());\n-            Assert.assertEquals(flows.get(i).getEngineId(), flowsWithBson.get(i).getEngineId());\n-            Assert.assertEquals(flows.get(i).getEngineType(), flowsWithBson.get(i).getEngineType());\n-            Assert.assertEquals(flows.get(i).getPackets(), flowsWithBson.get(i).getPackets());\n-            Assert.assertEquals(flows.get(i).getSamplingAlgorithm(), flowsWithBson.get(i).getSamplingAlgorithm());\n-            Assert.assertEquals(flows.get(i).getSamplingInterval(), flowsWithBson.get(i).getSamplingInterval());\n-            Assert.assertEquals(flows.get(i).getIpProtocolVersion(), flowsWithBson.get(i).getIpProtocolVersion());\n-            Assert.assertEquals(flows.get(i).getVlan(), flowsWithBson.get(i).getVlan());\n-            Assert.assertEquals(flows.get(i).getNodeIdentifier(), flowsWithBson.get(i).getNodeIdentifier());\n+            Assert.assertEquals(flows.get(i).getFirstSwitched(), jsonData.get(i).getFirstSwitched());\n+            Assert.assertEquals(flows.get(i).getLastSwitched(), jsonData.get(i).getLastSwitched());\n+            Assert.assertEquals(flows.get(i).getDeltaSwitched(), jsonData.get(i).getDeltaSwitched());\n+            Assert.assertEquals(flows.get(i).getDstAddr(), jsonData.get(i).getDstAddr());\n+            Assert.assertEquals(flows.get(i).getDstAs(), jsonData.get(i).getDstAs());\n+            Assert.assertEquals(flows.get(i).getDstPort(), jsonData.get(i).getDstPort());\n+            Assert.assertEquals(flows.get(i).getDstMaskLen(), jsonData.get(i).getDstMaskLen());\n+            Assert.assertEquals(flows.get(i).getDstAddrHostname(), jsonData.get(i).getDstAddrHostname());\n+            Assert.assertEquals(flows.get(i).getSrcAddr(), jsonData.get(i).getSrcAddr());\n+            Assert.assertEquals(flows.get(i).getSrcAs(), jsonData.get(i).getSrcAs());\n+            Assert.assertEquals(flows.get(i).getSrcPort(), jsonData.get(i).getSrcPort());\n+            Assert.assertEquals(flows.get(i).getSrcAddrHostname(), jsonData.get(i).getSrcAddrHostname());\n+            Assert.assertEquals(flows.get(i).getSrcMaskLen(), jsonData.get(i).getSrcMaskLen());\n+            Assert.assertEquals(flows.get(i).getNextHop(), jsonData.get(i).getNextHop());\n+            Assert.assertEquals(flows.get(i).getInputSnmp(), jsonData.get(i).getInputSnmp());\n+            Assert.assertEquals(flows.get(i).getOutputSnmp(), jsonData.get(i).getOutputSnmp());\n+            Assert.assertEquals(flows.get(i).getNetflowVersion(), jsonData.get(i).getNetflowVersion());\n+            Assert.assertEquals(flows.get(i).getTcpFlags(), jsonData.get(i).getTcpFlags());\n+            Assert.assertEquals(flows.get(i).getProtocol(), jsonData.get(i).getProtocol());\n+            Assert.assertEquals(flows.get(i).getTos(), jsonData.get(i).getTos());\n+            Assert.assertEquals(flows.get(i).getEngineId(), jsonData.get(i).getEngineId());\n+            Assert.assertEquals(flows.get(i).getEngineType(), jsonData.get(i).getEngineType());\n+            Assert.assertEquals(flows.get(i).getPackets(), jsonData.get(i).getPackets());\n+            Assert.assertEquals(flows.get(i).getSamplingAlgorithm(), jsonData.get(i).getSamplingAlgorithm());\n+            Assert.assertEquals(flows.get(i).getSamplingInterval(), jsonData.get(i).getSamplingInterval());\n+            Assert.assertEquals(flows.get(i).getIpProtocolVersion(), jsonData.get(i).getIpProtocolVersion());\n+            Assert.assertEquals(flows.get(i).getVlan(), jsonData.get(i).getVlan());\n+            Assert.assertEquals(flows.get(i).getNodeIdentifier(), jsonData.get(i).getNodeIdentifier());\n \n         }\n     }\n \n-    class IpFixBsonConverter implements Converter<BsonDocument> {\n-\n-        @Override\n-        public List<Flow> convert(BsonDocument packet) {\n-            return Collections.singletonList(new IpfixFlow(packet));\n-        }\n-    }\n-\n-    private List<Flow> getFlowsForPayloadsInSession(boolean bson, String... resources) {\n+    private List<Flow> getFlowsForPayloadsInSession(String... resources) {\n         final List<byte[]> payloads = new ArrayList<>(resources.length);\n         for (String resource : resources) {\n             URL resourceURL = getClass().getResource(resource);\n", "next_change": null}]}, "revised_code_in_main": {"commit": "3352dcced0424e52de475b87840f05dff94fbec4", "changed_code": [{"header": "diff --git a/features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/ipfix/IpFixProtobufValidationTest.java b/features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/ipfix/IpFixProtobufValidationTest.java\nindex bb81ebacd5f..a2a9ce10a0d 100644\n--- a/features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/ipfix/IpFixProtobufValidationTest.java\n+++ b/features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/ipfix/IpFixProtobufValidationTest.java\n", "chunk": "@@ -68,71 +62,64 @@ import io.netty.buffer.Unpooled;\n \n \n /**\n- * This test validates netflow protobuf values against bson output.\n+ * This test validates netflow protobuf values against json output.\n  */\n public class IpFixProtobufValidationTest {\n \n     private Converter ipFixConverter;\n \n     @Test\n-    public void canValidateIpFixFlowsWithBson() {\n+    public void canValidateIpFixFlowsWithJsonOutput() {\n         // Generate flows from existing packet payloads\n-        ipFixConverter = new Netflow9Converter();\n-        List<Flow> flows = getFlowsForPayloadsInSession(false, \"/flows/ipfix.dat\",\n-                \"/flows/ipfix_test.dat\");\n+        ipFixConverter = new NetflowConverter();\n+        List<Flow> flows = getFlowsForPayloadsInSession(\"/flows/ipfix_test_1.dat\",\n+                \"/flows/ipfix_test_2.dat\");\n         assertThat(flows, hasSize(8));\n-        ipFixConverter = new IpFixBsonConverter();\n-        List<Flow> flowsWithBson = getFlowsForPayloadsInSession(true, \"/flows/ipfix.dat\",\n-                \"/flows/ipfix_test.dat\");\n-        assertThat(flowsWithBson, hasSize(8));\n+        Utils.JsonConverter jsonConverter = new Utils.JsonConverter();\n+        List<String> jsonStrings = jsonConverter.getJsonStringFromResources(\"/flows/ipfix_test_1.json\",\n+                \"/flows/ipfix_test_2.json\");\n+        List<Flow> jsonData = jsonConverter.convert(jsonStrings);\n+        assertThat(jsonData, hasSize(8));\n         for (int i = 0; i < 8; i++) {\n-            Assert.assertEquals(flows.get(i).getFlowSeqNum(), flowsWithBson.get(i).getFlowSeqNum());\n-            Assert.assertEquals(flows.get(i).getFlowRecords(), flowsWithBson.get(i).getFlowRecords());\n-            Assert.assertEquals(flows.get(i).getTimestamp(), flowsWithBson.get(i).getTimestamp());\n-            Assert.assertEquals(flows.get(i).getBytes(), flowsWithBson.get(i).getBytes());\n-            Flow.Direction direction = flowsWithBson.get(i).getDirection() != null ? flowsWithBson.get(i).getDirection() : Flow.Direction.INGRESS;\n+            Assert.assertEquals(flows.get(i).getFlowSeqNum(), jsonData.get(i).getFlowSeqNum());\n+            Assert.assertEquals(flows.get(i).getFlowRecords(), jsonData.get(i).getFlowRecords());\n+            Assert.assertEquals(flows.get(i).getTimestamp(), jsonData.get(i).getTimestamp());\n+            Assert.assertEquals(flows.get(i).getBytes(), jsonData.get(i).getBytes());\n+            Flow.Direction direction = jsonData.get(i).getDirection() != null ? jsonData.get(i).getDirection() : Flow.Direction.INGRESS;\n             Assert.assertEquals(flows.get(i).getDirection(), direction);\n-            Assert.assertEquals(flows.get(i).getFirstSwitched(), flowsWithBson.get(i).getFirstSwitched());\n-            Assert.assertEquals(flows.get(i).getLastSwitched(), flowsWithBson.get(i).getLastSwitched());\n-            Assert.assertEquals(flows.get(i).getDeltaSwitched(), flowsWithBson.get(i).getDeltaSwitched());\n-            Assert.assertEquals(flows.get(i).getDstAddr(), flowsWithBson.get(i).getDstAddr());\n-            Assert.assertEquals(flows.get(i).getDstAs(), flowsWithBson.get(i).getDstAs());\n-            Assert.assertEquals(flows.get(i).getDstPort(), flowsWithBson.get(i).getDstPort());\n-            Assert.assertEquals(flows.get(i).getDstMaskLen(), flowsWithBson.get(i).getDstMaskLen());\n-            Assert.assertEquals(flows.get(i).getDstAddrHostname(), flowsWithBson.get(i).getDstAddrHostname());\n-            Assert.assertEquals(flows.get(i).getSrcAddr(), flowsWithBson.get(i).getSrcAddr());\n-            Assert.assertEquals(flows.get(i).getSrcAs(), flowsWithBson.get(i).getSrcAs());\n-            Assert.assertEquals(flows.get(i).getSrcPort(), flowsWithBson.get(i).getSrcPort());\n-            Assert.assertEquals(flows.get(i).getSrcAddrHostname(), flowsWithBson.get(i).getSrcAddrHostname());\n-            Assert.assertEquals(flows.get(i).getSrcMaskLen(), flowsWithBson.get(i).getSrcMaskLen());\n-            Assert.assertEquals(flows.get(i).getNextHop(), flowsWithBson.get(i).getNextHop());\n-            Assert.assertEquals(flows.get(i).getInputSnmp(), flowsWithBson.get(i).getInputSnmp());\n-            Assert.assertEquals(flows.get(i).getOutputSnmp(), flowsWithBson.get(i).getOutputSnmp());\n-            Assert.assertEquals(flows.get(i).getNetflowVersion(), flowsWithBson.get(i).getNetflowVersion());\n-            Assert.assertEquals(flows.get(i).getTcpFlags(), flowsWithBson.get(i).getTcpFlags());\n-            Assert.assertEquals(flows.get(i).getProtocol(), flowsWithBson.get(i).getProtocol());\n-            Assert.assertEquals(flows.get(i).getTos(), flowsWithBson.get(i).getTos());\n-            Assert.assertEquals(flows.get(i).getEngineId(), flowsWithBson.get(i).getEngineId());\n-            Assert.assertEquals(flows.get(i).getEngineType(), flowsWithBson.get(i).getEngineType());\n-            Assert.assertEquals(flows.get(i).getPackets(), flowsWithBson.get(i).getPackets());\n-            Assert.assertEquals(flows.get(i).getSamplingAlgorithm(), flowsWithBson.get(i).getSamplingAlgorithm());\n-            Assert.assertEquals(flows.get(i).getSamplingInterval(), flowsWithBson.get(i).getSamplingInterval());\n-            Assert.assertEquals(flows.get(i).getIpProtocolVersion(), flowsWithBson.get(i).getIpProtocolVersion());\n-            Assert.assertEquals(flows.get(i).getVlan(), flowsWithBson.get(i).getVlan());\n-            Assert.assertEquals(flows.get(i).getNodeIdentifier(), flowsWithBson.get(i).getNodeIdentifier());\n+            Assert.assertEquals(flows.get(i).getFirstSwitched(), jsonData.get(i).getFirstSwitched());\n+            Assert.assertEquals(flows.get(i).getLastSwitched(), jsonData.get(i).getLastSwitched());\n+            Assert.assertEquals(flows.get(i).getDeltaSwitched(), jsonData.get(i).getDeltaSwitched());\n+            Assert.assertEquals(flows.get(i).getDstAddr(), jsonData.get(i).getDstAddr());\n+            Assert.assertEquals(flows.get(i).getDstAs(), jsonData.get(i).getDstAs());\n+            Assert.assertEquals(flows.get(i).getDstPort(), jsonData.get(i).getDstPort());\n+            Assert.assertEquals(flows.get(i).getDstMaskLen(), jsonData.get(i).getDstMaskLen());\n+            Assert.assertEquals(flows.get(i).getDstAddrHostname(), jsonData.get(i).getDstAddrHostname());\n+            Assert.assertEquals(flows.get(i).getSrcAddr(), jsonData.get(i).getSrcAddr());\n+            Assert.assertEquals(flows.get(i).getSrcAs(), jsonData.get(i).getSrcAs());\n+            Assert.assertEquals(flows.get(i).getSrcPort(), jsonData.get(i).getSrcPort());\n+            Assert.assertEquals(flows.get(i).getSrcAddrHostname(), jsonData.get(i).getSrcAddrHostname());\n+            Assert.assertEquals(flows.get(i).getSrcMaskLen(), jsonData.get(i).getSrcMaskLen());\n+            Assert.assertEquals(flows.get(i).getNextHop(), jsonData.get(i).getNextHop());\n+            Assert.assertEquals(flows.get(i).getInputSnmp(), jsonData.get(i).getInputSnmp());\n+            Assert.assertEquals(flows.get(i).getOutputSnmp(), jsonData.get(i).getOutputSnmp());\n+            Assert.assertEquals(flows.get(i).getNetflowVersion(), jsonData.get(i).getNetflowVersion());\n+            Assert.assertEquals(flows.get(i).getTcpFlags(), jsonData.get(i).getTcpFlags());\n+            Assert.assertEquals(flows.get(i).getProtocol(), jsonData.get(i).getProtocol());\n+            Assert.assertEquals(flows.get(i).getTos(), jsonData.get(i).getTos());\n+            Assert.assertEquals(flows.get(i).getEngineId(), jsonData.get(i).getEngineId());\n+            Assert.assertEquals(flows.get(i).getEngineType(), jsonData.get(i).getEngineType());\n+            Assert.assertEquals(flows.get(i).getPackets(), jsonData.get(i).getPackets());\n+            Assert.assertEquals(flows.get(i).getSamplingAlgorithm(), jsonData.get(i).getSamplingAlgorithm());\n+            Assert.assertEquals(flows.get(i).getSamplingInterval(), jsonData.get(i).getSamplingInterval());\n+            Assert.assertEquals(flows.get(i).getIpProtocolVersion(), jsonData.get(i).getIpProtocolVersion());\n+            Assert.assertEquals(flows.get(i).getVlan(), jsonData.get(i).getVlan());\n+            Assert.assertEquals(flows.get(i).getNodeIdentifier(), jsonData.get(i).getNodeIdentifier());\n \n         }\n     }\n \n-    class IpFixBsonConverter implements Converter<BsonDocument> {\n-\n-        @Override\n-        public List<Flow> convert(BsonDocument packet) {\n-            return Collections.singletonList(new IpfixFlow(packet));\n-        }\n-    }\n-\n-    private List<Flow> getFlowsForPayloadsInSession(boolean bson, String... resources) {\n+    private List<Flow> getFlowsForPayloadsInSession(String... resources) {\n         final List<byte[]> payloads = new ArrayList<>(resources.length);\n         for (String resource : resources) {\n             URL resourceURL = getClass().getResource(resource);\n", "next_change": null}]}, "commits_in_main": [{"oid": "3352dcced0424e52de475b87840f05dff94fbec4", "message": "Merge commit", "committedDate": null}, {"oid": "f34d1195ea7ca3d51a5d3f0b4e7d149ef20c3f3e", "committedDate": "2020-10-08 07:28:32 +0200", "message": "NMS-12800: Drop flows with negative duration"}, {"oid": "78ce7c55c0d1988f90dfa22ce33846fb3d0fa53d", "committedDate": "2020-12-01 09:53:12 +0100", "message": "NMS-12973: Correct clock skew"}, {"oid": "7dcfa4927ebf40e48a1f62ad6837f9cb99ea57e6", "committedDate": "2021-01-15 11:20:53 +0100", "message": "NMS-13088: Adapt invalid flows instead of dropping (#3261)"}, {"oid": "6c9f456a216163b107f586370676e02be58adb0b", "committedDate": "2021-02-04 10:31:42 +0100", "message": "NMS-13106: Configureable flow sequence tracking"}, {"oid": "bd3afc72cd09053d307d383e58ff243a991bb3ef", "committedDate": "2022-07-26 16:13:39 +0200", "message": "NMS-13770: Inline Converter with adapters"}, {"oid": "7fd50342801477afe3bbf72522872f4f86ce14c8", "committedDate": "2022-08-03 18:20:37 +0200", "message": "NMS-13770: Implement flow repo OIA"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI1MjU0OQ==", "url": "https://github.com/OpenNMS/opennms/pull/2903#discussion_r390252549", "body": "What's the difference?", "bodyText": "What's the difference?", "bodyHTML": "<p dir=\"auto\">What's the difference?</p>", "author": "fooker", "createdAt": "2020-03-10T11:34:04Z", "path": "features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5ConverterTest.java", "diffHunk": "@@ -96,7 +96,7 @@ public void canParseNetflow5Flows() {\n         MatcherAssert.assertThat(flow.getDirection(), equalTo(Flow.Direction.INGRESS));\n         MatcherAssert.assertThat(flow.getNextHop(), equalTo(\"0.0.0.0\"));\n         MatcherAssert.assertThat(flow.getNextHopHostname(), equalTo(Optional.empty()));\n-        MatcherAssert.assertThat(flow.getVlan(), nullValue());", "originalCommit": "628f488dd99abfee27aab31b69ba5a1409717e77", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e388d89b283f332b44cf6614f61985d9f9c2c420", "changed_code": [{"header": "diff --git a/features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5ConverterTest.java b/features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5ConverterTest.java\nindex 74f21499c94..2965e7fee6e 100644\n--- a/features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5ConverterTest.java\n+++ b/features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5ConverterTest.java\n", "chunk": "@@ -96,7 +97,7 @@ public class Netflow5ConverterTest {\n         MatcherAssert.assertThat(flow.getDirection(), equalTo(Flow.Direction.INGRESS));\n         MatcherAssert.assertThat(flow.getNextHop(), equalTo(\"0.0.0.0\"));\n         MatcherAssert.assertThat(flow.getNextHopHostname(), equalTo(Optional.empty()));\n-        MatcherAssert.assertThat(flow.getVlan(), equalTo(null));\n+        MatcherAssert.assertThat(flow.getVlan(), nullValue());\n     }\n \n     private List<Flow> getFlowsForPayloadsInSession(String... resources) {\n", "next_change": null}]}, "revised_code_in_main": {"commit": "3352dcced0424e52de475b87840f05dff94fbec4", "changed_code": [{"header": "diff --git a/features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5ConverterTest.java b/features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5ConverterTest.java\nindex 74f21499c94..aec7fb7d95d 100644\n--- a/features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5ConverterTest.java\n+++ b/features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5ConverterTest.java\n", "chunk": "@@ -96,7 +97,7 @@ public class Netflow5ConverterTest {\n         MatcherAssert.assertThat(flow.getDirection(), equalTo(Flow.Direction.INGRESS));\n         MatcherAssert.assertThat(flow.getNextHop(), equalTo(\"0.0.0.0\"));\n         MatcherAssert.assertThat(flow.getNextHopHostname(), equalTo(Optional.empty()));\n-        MatcherAssert.assertThat(flow.getVlan(), equalTo(null));\n+        MatcherAssert.assertThat(flow.getVlan(), nullValue());\n     }\n \n     private List<Flow> getFlowsForPayloadsInSession(String... resources) {\n", "next_change": {"commit": "7fd50342801477afe3bbf72522872f4f86ce14c8", "changed_code": [{"header": "diff --git a/features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5ConverterTest.java b/features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5ConverterTest.java\nindex aec7fb7d95d..1e2646cf5be 100644\n--- a/features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5ConverterTest.java\n+++ b/features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5ConverterTest.java\n", "chunk": "@@ -91,10 +91,11 @@ public class Netflow5ConverterTest {\n         MatcherAssert.assertThat(flow.getBytes(), equalTo(230L));\n         MatcherAssert.assertThat(flow.getInputSnmp(), equalTo(0));\n         MatcherAssert.assertThat(flow.getOutputSnmp(), equalTo(0));\n-        MatcherAssert.assertThat(flow.getFirstSwitched(), equalTo(1434886852194L));\n-        MatcherAssert.assertThat(flow.getLastSwitched(), equalTo(1430591887476L));\n+        MatcherAssert.assertThat(flow.getFirstSwitched(), equalTo(Instant.ofEpochMilli(1430608661859L)));\n+        MatcherAssert.assertThat(flow.getLastSwitched(), equalTo(Instant.ofEpochMilli(1434870077556L)));\n+        MatcherAssert.assertThat(flow.getDeltaSwitched(), equalTo(Instant.ofEpochMilli(1430608661859L)));\n         MatcherAssert.assertThat(flow.getPackets(), equalTo(5L));\n-        MatcherAssert.assertThat(flow.getDirection(), equalTo(Flow.Direction.INGRESS));\n+        MatcherAssert.assertThat(flow.getDirection(), equalTo(Direction.INGRESS));\n         MatcherAssert.assertThat(flow.getNextHop(), equalTo(\"0.0.0.0\"));\n         MatcherAssert.assertThat(flow.getNextHopHostname(), equalTo(Optional.empty()));\n         MatcherAssert.assertThat(flow.getVlan(), nullValue());\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "3352dcced0424e52de475b87840f05dff94fbec4", "message": "Merge commit", "committedDate": null}, {"oid": "0d10ea77e00e72dfee00a1ee15a5ae266193ddb6", "committedDate": "2020-06-22 19:25:05 -0400", "message": "NMS-12750: Fix delta switched for Netflow5 (#3035)"}, {"oid": "f34d1195ea7ca3d51a5d3f0b4e7d149ef20c3f3e", "committedDate": "2020-10-08 07:28:32 +0200", "message": "NMS-12800: Drop flows with negative duration"}, {"oid": "78ce7c55c0d1988f90dfa22ce33846fb3d0fa53d", "committedDate": "2020-12-01 09:53:12 +0100", "message": "NMS-12973: Correct clock skew"}, {"oid": "7dcfa4927ebf40e48a1f62ad6837f9cb99ea57e6", "committedDate": "2021-01-15 11:20:53 +0100", "message": "NMS-13088: Adapt invalid flows instead of dropping (#3261)"}, {"oid": "bd3afc72cd09053d307d383e58ff243a991bb3ef", "committedDate": "2022-07-26 16:13:39 +0200", "message": "NMS-13770: Inline Converter with adapters"}, {"oid": "7fd50342801477afe3bbf72522872f4f86ce14c8", "committedDate": "2022-08-03 18:20:37 +0200", "message": "NMS-13770: Implement flow repo OIA"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI1Mjc5NA==", "url": "https://github.com/OpenNMS/opennms/pull/2903#discussion_r390252794", "body": "Just make the method `throws Exception`.", "bodyText": "Just make the method throws Exception.", "bodyHTML": "<p dir=\"auto\">Just make the method <code>throws Exception</code>.</p>", "author": "fooker", "createdAt": "2020-03-10T11:34:39Z", "path": "features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5ConverterTest.java", "diffHunk": "@@ -121,9 +121,15 @@ public void canParseNetflow5Flows() {\n                 header = new Header(slice(buffer, Header.SIZE));\n                 final Packet packet = new Packet(header, buffer);\n                 packet.getRecords().forEach(rec -> {\n-                    final ByteBuffer bf = ParserBase.serialize(Protocol.NETFLOW9, rec);\n-                    final BsonDocument doc = new RawBsonDocument(bf.array());\n-                    flows.addAll(nf5Converter.convert(doc));\n+\n+                    byte[] message = FlowMessageBuilderFactory.buildAndSerialize(Protocol.NETFLOW5, rec);\n+                    try {\n+                        FlowMessage flowMessage = FlowMessageProto.parseFrom(message);\n+                        flows.addAll(nf5Converter.convert(flowMessage));\n+                    } catch (InvalidProtocolBufferException e) {", "originalCommit": "628f488dd99abfee27aab31b69ba5a1409717e77", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDMzMzQ4Mg==", "url": "https://github.com/OpenNMS/opennms/pull/2903#discussion_r394333482", "bodyText": "It's in lambda expression", "author": "cgorantla", "createdAt": "2020-03-18T13:10:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI1Mjc5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUxNzgzNA==", "url": "https://github.com/OpenNMS/opennms/pull/2903#discussion_r397517834", "bodyText": "Right. But in the end it could be a good old for loop, right?", "author": "fooker", "createdAt": "2020-03-24T23:14:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI1Mjc5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE1NzE2Mg==", "url": "https://github.com/OpenNMS/opennms/pull/2903#discussion_r401157162", "bodyText": "Since packet.getRecords() is a stream, I'm inclined to keep this way.", "author": "cgorantla", "createdAt": "2020-03-31T19:22:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI1Mjc5NA=="}], "type": "inlineReview", "revised_code": {"commit": "b0e90f013c5b6948e960f7eb2d66870c3c84e12a", "changed_code": [{"header": "diff --git a/features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5ConverterTest.java b/features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5ConverterTest.java\nindex 74f21499c94..4a194792409 100644\n--- a/features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5ConverterTest.java\n+++ b/features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5ConverterTest.java\n", "chunk": "@@ -122,9 +122,9 @@ public class Netflow5ConverterTest {\n                 final Packet packet = new Packet(header, buffer);\n                 packet.getRecords().forEach(rec -> {\n \n-                    byte[] message = FlowMessageBuilderFactory.buildAndSerialize(Protocol.NETFLOW5, rec);\n+                    byte[] message = buildAndSerialize(Protocol.NETFLOW5, rec);\n                     try {\n-                        FlowMessage flowMessage = FlowMessageProto.parseFrom(message);\n+                        FlowMessage flowMessage = FlowMessage.parseFrom(message);\n                         flows.addAll(nf5Converter.convert(flowMessage));\n                     } catch (InvalidProtocolBufferException e) {\n                         throw new RuntimeException(e);\n", "next_change": null}]}, "revised_code_in_main": {"commit": "3352dcced0424e52de475b87840f05dff94fbec4", "changed_code": [{"header": "diff --git a/features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5ConverterTest.java b/features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5ConverterTest.java\nindex 74f21499c94..aec7fb7d95d 100644\n--- a/features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5ConverterTest.java\n+++ b/features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5ConverterTest.java\n", "chunk": "@@ -122,9 +123,9 @@ public class Netflow5ConverterTest {\n                 final Packet packet = new Packet(header, buffer);\n                 packet.getRecords().forEach(rec -> {\n \n-                    byte[] message = FlowMessageBuilderFactory.buildAndSerialize(Protocol.NETFLOW5, rec);\n+                    byte[] message = buildAndSerialize(Protocol.NETFLOW5, rec);\n                     try {\n-                        FlowMessage flowMessage = FlowMessageProto.parseFrom(message);\n+                        FlowMessage flowMessage = FlowMessage.parseFrom(message);\n                         flows.addAll(nf5Converter.convert(flowMessage));\n                     } catch (InvalidProtocolBufferException e) {\n                         throw new RuntimeException(e);\n", "next_change": {"commit": "f34d1195ea7ca3d51a5d3f0b4e7d149ef20c3f3e", "changed_code": [{"header": "diff --git a/features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5ConverterTest.java b/features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5ConverterTest.java\nindex aec7fb7d95d..635806456bd 100644\n--- a/features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5ConverterTest.java\n+++ b/features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5ConverterTest.java\n", "chunk": "@@ -123,7 +125,13 @@ public class Netflow5ConverterTest {\n                 final Packet packet = new Packet(header, buffer);\n                 packet.getRecords().forEach(rec -> {\n \n-                    byte[] message = buildAndSerialize(Protocol.NETFLOW5, rec);\n+                    byte[] message = new byte[0];\n+                    try {\n+                        message = buildAndSerialize(Protocol.NETFLOW5, rec);\n+                    } catch (IllegalFlowException e) {\n+                        throw new RuntimeException(e);\n+                    }\n+\n                     try {\n                         FlowMessage flowMessage = FlowMessage.parseFrom(message);\n                         flows.addAll(nf5Converter.convert(flowMessage));\n", "next_change": {"commit": "78ce7c55c0d1988f90dfa22ce33846fb3d0fa53d", "changed_code": [{"header": "diff --git a/features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5ConverterTest.java b/features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5ConverterTest.java\nindex 635806456bd..7fe8c99a8e6 100644\n--- a/features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5ConverterTest.java\n+++ b/features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5ConverterTest.java\n", "chunk": "@@ -134,7 +135,7 @@ public class Netflow5ConverterTest {\n \n                     try {\n                         FlowMessage flowMessage = FlowMessage.parseFrom(message);\n-                        flows.addAll(nf5Converter.convert(flowMessage));\n+                        flows.addAll(nf5Converter.convert(flowMessage, Instant.now()));\n                     } catch (InvalidProtocolBufferException e) {\n                         throw new RuntimeException(e);\n                     }\n", "next_change": {"commit": "7dcfa4927ebf40e48a1f62ad6837f9cb99ea57e6", "changed_code": [{"header": "diff --git a/features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5ConverterTest.java b/features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5ConverterTest.java\nindex 7fe8c99a8e6..353719a22b8 100644\n--- a/features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5ConverterTest.java\n+++ b/features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5ConverterTest.java\n", "chunk": "@@ -126,19 +126,14 @@ public class Netflow5ConverterTest {\n                 final Packet packet = new Packet(header, buffer);\n                 packet.getRecords().forEach(rec -> {\n \n-                    byte[] message = new byte[0];\n+                    final FlowMessage flowMessage;\n                     try {\n-                        message = buildAndSerialize(Protocol.NETFLOW5, rec);\n+                        flowMessage = buildAndSerialize(Protocol.NETFLOW5, rec).build();\n                     } catch (IllegalFlowException e) {\n                         throw new RuntimeException(e);\n                     }\n \n-                    try {\n-                        FlowMessage flowMessage = FlowMessage.parseFrom(message);\n-                        flows.addAll(nf5Converter.convert(flowMessage, Instant.now()));\n-                    } catch (InvalidProtocolBufferException e) {\n-                        throw new RuntimeException(e);\n-                    }\n+                    flows.addAll(nf5Converter.convert(flowMessage, Instant.now()));\n \n                 });\n             } catch (InvalidPacketException e) {\n", "next_change": {"commit": "bd3afc72cd09053d307d383e58ff243a991bb3ef", "changed_code": [{"header": "diff --git a/features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5ConverterTest.java b/features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5ConverterTest.java\nindex 353719a22b8..615f301fa96 100644\n--- a/features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5ConverterTest.java\n+++ b/features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5ConverterTest.java\n", "chunk": "@@ -125,16 +119,8 @@ public class Netflow5ConverterTest {\n                 header = new Header(slice(buffer, Header.SIZE));\n                 final Packet packet = new Packet(header, buffer);\n                 packet.getRecords().forEach(rec -> {\n-\n-                    final FlowMessage flowMessage;\n-                    try {\n-                        flowMessage = buildAndSerialize(Protocol.NETFLOW5, rec).build();\n-                    } catch (IllegalFlowException e) {\n-                        throw new RuntimeException(e);\n-                    }\n-\n-                    flows.addAll(nf5Converter.convert(flowMessage, Instant.now()));\n-\n+                    final FlowMessage flowMessage = new Netflow5MessageBuilder().buildMessage(rec, (address) -> Optional.empty()).build();\n+                    flows.add(new NetflowMessage(flowMessage, Instant.now()));\n                 });\n             } catch (InvalidPacketException e) {\n                 throw new RuntimeException(e);\n", "next_change": null}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "3352dcced0424e52de475b87840f05dff94fbec4", "message": "Merge commit", "committedDate": null}, {"oid": "0d10ea77e00e72dfee00a1ee15a5ae266193ddb6", "committedDate": "2020-06-22 19:25:05 -0400", "message": "NMS-12750: Fix delta switched for Netflow5 (#3035)"}, {"oid": "f34d1195ea7ca3d51a5d3f0b4e7d149ef20c3f3e", "committedDate": "2020-10-08 07:28:32 +0200", "message": "NMS-12800: Drop flows with negative duration"}, {"oid": "78ce7c55c0d1988f90dfa22ce33846fb3d0fa53d", "committedDate": "2020-12-01 09:53:12 +0100", "message": "NMS-12973: Correct clock skew"}, {"oid": "7dcfa4927ebf40e48a1f62ad6837f9cb99ea57e6", "committedDate": "2021-01-15 11:20:53 +0100", "message": "NMS-13088: Adapt invalid flows instead of dropping (#3261)"}, {"oid": "bd3afc72cd09053d307d383e58ff243a991bb3ef", "committedDate": "2022-07-26 16:13:39 +0200", "message": "NMS-13770: Inline Converter with adapters"}, {"oid": "7fd50342801477afe3bbf72522872f4f86ce14c8", "committedDate": "2022-08-03 18:20:37 +0200", "message": "NMS-13770: Implement flow repo OIA"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI1MzQxNQ==", "url": "https://github.com/OpenNMS/opennms/pull/2903#discussion_r390253415", "body": "Same here", "bodyText": "Same here", "bodyHTML": "<p dir=\"auto\">Same here</p>", "author": "fooker", "createdAt": "2020-03-10T11:35:56Z", "path": "features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow9/Netflow9ConverterTest.java", "diffHunk": "@@ -113,9 +116,15 @@ public void canParseNetflow9Flows() {\n                 header = new Header(slice(buffer, Header.SIZE));\n                 final Packet packet = new Packet(session, header, buffer);\n                 packet.getRecords().forEach(rec -> {\n-                    final ByteBuffer bf = ParserBase.serialize(Protocol.NETFLOW9, rec);\n-                    final BsonDocument doc = new RawBsonDocument(bf.array());\n-                    flows.addAll(nf9Converter.convert(doc));\n+\n+                    byte[] message = FlowMessageBuilderFactory.buildAndSerialize(Protocol.NETFLOW9, rec);\n+                    try {\n+                        FlowMessage flowMessage = FlowMessageProto.parseFrom(message);\n+                        flows.addAll(nf9Converter.convert(flowMessage));\n+                    } catch (InvalidProtocolBufferException e) {", "originalCommit": "628f488dd99abfee27aab31b69ba5a1409717e77", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b0e90f013c5b6948e960f7eb2d66870c3c84e12a", "changed_code": [{"header": "diff --git a/features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow9/Netflow9ConverterTest.java b/features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow9/Netflow9ConverterTest.java\nindex 9d507e22f01..7b0af4dfd34 100644\n--- a/features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow9/Netflow9ConverterTest.java\n+++ b/features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow9/Netflow9ConverterTest.java\n", "chunk": "@@ -117,9 +117,9 @@ public class Netflow9ConverterTest {\n                 final Packet packet = new Packet(session, header, buffer);\n                 packet.getRecords().forEach(rec -> {\n \n-                    byte[] message = FlowMessageBuilderFactory.buildAndSerialize(Protocol.NETFLOW9, rec);\n+                    byte[] message = buildAndSerialize(Protocol.NETFLOW9, rec);\n                     try {\n-                        FlowMessage flowMessage = FlowMessageProto.parseFrom(message);\n+                        FlowMessage flowMessage = FlowMessage.parseFrom(message);\n                         flows.addAll(nf9Converter.convert(flowMessage));\n                     } catch (InvalidProtocolBufferException e) {\n                         throw new RuntimeException(e);\n", "next_change": null}]}, "revised_code_in_main": {"commit": "3352dcced0424e52de475b87840f05dff94fbec4", "changed_code": [{"header": "diff --git a/features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow9/Netflow9ConverterTest.java b/features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow9/Netflow9ConverterTest.java\nindex 9d507e22f01..17fc15895e1 100644\n--- a/features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow9/Netflow9ConverterTest.java\n+++ b/features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow9/Netflow9ConverterTest.java\n", "chunk": "@@ -117,9 +117,9 @@ public class Netflow9ConverterTest {\n                 final Packet packet = new Packet(session, header, buffer);\n                 packet.getRecords().forEach(rec -> {\n \n-                    byte[] message = FlowMessageBuilderFactory.buildAndSerialize(Protocol.NETFLOW9, rec);\n+                    byte[] message = buildAndSerialize(Protocol.NETFLOW9, rec);\n                     try {\n-                        FlowMessage flowMessage = FlowMessageProto.parseFrom(message);\n+                        FlowMessage flowMessage = FlowMessage.parseFrom(message);\n                         flows.addAll(nf9Converter.convert(flowMessage));\n                     } catch (InvalidProtocolBufferException e) {\n                         throw new RuntimeException(e);\n", "next_change": {"commit": "f34d1195ea7ca3d51a5d3f0b4e7d149ef20c3f3e", "changed_code": [{"header": "diff --git a/features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow9/Netflow9ConverterTest.java b/features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow9/Netflow9ConverterTest.java\nindex 17fc15895e1..a6efd5c6678 100644\n--- a/features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow9/Netflow9ConverterTest.java\n+++ b/features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow9/Netflow9ConverterTest.java\n", "chunk": "@@ -117,7 +117,12 @@ public class Netflow9ConverterTest {\n                 final Packet packet = new Packet(session, header, buffer);\n                 packet.getRecords().forEach(rec -> {\n \n-                    byte[] message = buildAndSerialize(Protocol.NETFLOW9, rec);\n+                    byte[] message = new byte[0];\n+                    try {\n+                        message = buildAndSerialize(Protocol.NETFLOW9, rec);\n+                    } catch (Exception e) {\n+                        throw new RuntimeException(e);\n+                    }\n                     try {\n                         FlowMessage flowMessage = FlowMessage.parseFrom(message);\n                         flows.addAll(nf9Converter.convert(flowMessage));\n", "next_change": {"commit": "78ce7c55c0d1988f90dfa22ce33846fb3d0fa53d", "changed_code": [{"header": "diff --git a/features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow9/Netflow9ConverterTest.java b/features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow9/Netflow9ConverterTest.java\nindex a6efd5c6678..0cf57f34c80 100644\n--- a/features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow9/Netflow9ConverterTest.java\n+++ b/features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow9/Netflow9ConverterTest.java\n", "chunk": "@@ -125,7 +126,7 @@ public class Netflow9ConverterTest {\n                     }\n                     try {\n                         FlowMessage flowMessage = FlowMessage.parseFrom(message);\n-                        flows.addAll(nf9Converter.convert(flowMessage));\n+                        flows.addAll(nf9Converter.convert(flowMessage, Instant.now()));\n                     } catch (InvalidProtocolBufferException e) {\n                         throw new RuntimeException(e);\n                     }\n", "next_change": {"commit": "7dcfa4927ebf40e48a1f62ad6837f9cb99ea57e6", "changed_code": [{"header": "diff --git a/features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow9/Netflow9ConverterTest.java b/features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow9/Netflow9ConverterTest.java\nindex 0cf57f34c80..45855f2412f 100644\n--- a/features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow9/Netflow9ConverterTest.java\n+++ b/features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow9/Netflow9ConverterTest.java\n", "chunk": "@@ -118,19 +118,14 @@ public class Netflow9ConverterTest {\n                 final Packet packet = new Packet(session, header, buffer);\n                 packet.getRecords().forEach(rec -> {\n \n-                    byte[] message = new byte[0];\n+                    final FlowMessage flowMessage;\n                     try {\n-                        message = buildAndSerialize(Protocol.NETFLOW9, rec);\n+                        flowMessage = buildAndSerialize(Protocol.NETFLOW9, rec).build();\n                     } catch (Exception e) {\n                         throw new RuntimeException(e);\n                     }\n-                    try {\n-                        FlowMessage flowMessage = FlowMessage.parseFrom(message);\n-                        flows.addAll(nf9Converter.convert(flowMessage, Instant.now()));\n-                    } catch (InvalidProtocolBufferException e) {\n-                        throw new RuntimeException(e);\n-                    }\n \n+                    flows.addAll(nf9Converter.convert(flowMessage, Instant.now()));\n                 });\n             } catch (InvalidPacketException e) {\n                 throw new RuntimeException(e);\n", "next_change": {"commit": "bd3afc72cd09053d307d383e58ff243a991bb3ef", "changed_code": [{"header": "diff --git a/features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow9/Netflow9ConverterTest.java b/features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow9/Netflow9ConverterTest.java\nindex 45855f2412f..428663f4e73 100644\n--- a/features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow9/Netflow9ConverterTest.java\n+++ b/features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow9/Netflow9ConverterTest.java\n", "chunk": "@@ -117,15 +113,8 @@ public class Netflow9ConverterTest {\n                 header = new Header(slice(buffer, Header.SIZE));\n                 final Packet packet = new Packet(session, header, buffer);\n                 packet.getRecords().forEach(rec -> {\n-\n-                    final FlowMessage flowMessage;\n-                    try {\n-                        flowMessage = buildAndSerialize(Protocol.NETFLOW9, rec).build();\n-                    } catch (Exception e) {\n-                        throw new RuntimeException(e);\n-                    }\n-\n-                    flows.addAll(nf9Converter.convert(flowMessage, Instant.now()));\n+                    final FlowMessage flowMessage = new Netflow9MessageBuilder().buildMessage(rec, (address) -> Optional.empty()).build();\n+                    flows.add(new NetflowMessage(flowMessage, Instant.now()));\n                 });\n             } catch (InvalidPacketException e) {\n                 throw new RuntimeException(e);\n", "next_change": null}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "3352dcced0424e52de475b87840f05dff94fbec4", "message": "Merge commit", "committedDate": null}, {"oid": "f34d1195ea7ca3d51a5d3f0b4e7d149ef20c3f3e", "committedDate": "2020-10-08 07:28:32 +0200", "message": "NMS-12800: Drop flows with negative duration"}, {"oid": "78ce7c55c0d1988f90dfa22ce33846fb3d0fa53d", "committedDate": "2020-12-01 09:53:12 +0100", "message": "NMS-12973: Correct clock skew"}, {"oid": "7dcfa4927ebf40e48a1f62ad6837f9cb99ea57e6", "committedDate": "2021-01-15 11:20:53 +0100", "message": "NMS-13088: Adapt invalid flows instead of dropping (#3261)"}, {"oid": "6c9f456a216163b107f586370676e02be58adb0b", "committedDate": "2021-02-04 10:31:42 +0100", "message": "NMS-13106: Configureable flow sequence tracking"}, {"oid": "bd3afc72cd09053d307d383e58ff243a991bb3ef", "committedDate": "2022-07-26 16:13:39 +0200", "message": "NMS-13770: Inline Converter with adapters"}, {"oid": "7fd50342801477afe3bbf72522872f4f86ce14c8", "committedDate": "2022-08-03 18:20:37 +0200", "message": "NMS-13770: Implement flow repo OIA"}]}, {"oid": "b0e90f013c5b6948e960f7eb2d66870c3c84e12a", "url": "https://github.com/OpenNMS/opennms/commit/b0e90f013c5b6948e960f7eb2d66870c3c84e12a", "message": "NMS-12521: Move from bson to proto for netflow\n\nNMS-12521: Some more refactoring\n\nNMS-12521: Fix integration tests and may be smoke as well\n\nNMS-12521: Only use proto for netflow5 to make smoke tests pass\n\nNMS-12521: Add proto for Netflow9\n\nNMS-12521: More changes in Netflow9\n\nNMS-12521: Add netflow9, IPFIX\n\nNMS-12521: Move FlowMessage, fix features\n\nNMS-12521: Use protobuf wrapper for all primitives\n\nNMS-12521: Fix sentinel telemetry\n\nNMS-12521: Avoid empty values for addresses\n\nNMS-12521: Add more validation tests\n\nNMS-12521: Refactor to proto", "committedDate": "2020-03-18T03:34:14Z", "type": "forcePushed"}, {"oid": "b52efa8ffe9c0a00c1ed698732ad397d9831ef6d", "url": "https://github.com/OpenNMS/opennms/commit/b52efa8ffe9c0a00c1ed698732ad397d9831ef6d", "message": "NMS-12521: Move from bson to proto for netflow\n\nNMS-12521: Some more refactoring\n\nNMS-12521: Fix integration tests and may be smoke as well\n\nNMS-12521: Only use proto for netflow5 to make smoke tests pass\n\nNMS-12521: Add proto for Netflow9\n\nNMS-12521: More changes in Netflow9\n\nNMS-12521: Add netflow9, IPFIX\n\nNMS-12521: Move FlowMessage, fix features\n\nNMS-12521: Use protobuf wrapper for all primitives\n\nNMS-12521: Fix sentinel telemetry\n\nNMS-12521: Avoid empty values for addresses\n\nNMS-12521: Add more validation tests\n\nNMS-12521: Refactor to proto", "committedDate": "2020-03-18T03:39:14Z", "type": "forcePushed"}, {"oid": "2338ce52a009fb3c722d05a08923f8ef829ef1a1", "url": "https://github.com/OpenNMS/opennms/commit/2338ce52a009fb3c722d05a08923f8ef829ef1a1", "message": "NMS-12521: Move from bson to proto for netflow\n\nNMS-12521: Some more refactoring\n\nNMS-12521: Fix integration tests and may be smoke as well\n\nNMS-12521: Only use proto for netflow5 to make smoke tests pass\n\nNMS-12521: Add proto for Netflow9\n\nNMS-12521: More changes in Netflow9\n\nNMS-12521: Add netflow9, IPFIX\n\nNMS-12521: Move FlowMessage, fix features\n\nNMS-12521: Use protobuf wrapper for all primitives\n\nNMS-12521: Fix sentinel telemetry\n\nNMS-12521: Avoid empty values for addresses\n\nNMS-12521: Add more validation tests\n\nNMS-12521: Refactor to proto", "committedDate": "2020-03-18T03:45:45Z", "type": "forcePushed"}, {"oid": "c84a68990b5e619da9a4d0498ed5867c25a03df7", "url": "https://github.com/OpenNMS/opennms/commit/c84a68990b5e619da9a4d0498ed5867c25a03df7", "message": "NMS-12521: Move from bson to proto for netflow\n\nNMS-12521: Some more refactoring\n\nNMS-12521: Fix integration tests and may be smoke as well\n\nNMS-12521: Only use proto for netflow5 to make smoke tests pass\n\nNMS-12521: Add proto for Netflow9\n\nNMS-12521: More changes in Netflow9\n\nNMS-12521: Add netflow9, IPFIX\n\nNMS-12521: Move FlowMessage, fix features\n\nNMS-12521: Use protobuf wrapper for all primitives\n\nNMS-12521: Fix sentinel telemetry\n\nNMS-12521: Avoid empty values for addresses\n\nNMS-12521: Add more validation tests\n\nNMS-12521: Refactor to proto", "committedDate": "2020-03-18T13:11:15Z", "type": "forcePushed"}, {"oid": "e388d89b283f332b44cf6614f61985d9f9c2c420", "url": "https://github.com/OpenNMS/opennms/commit/e388d89b283f332b44cf6614f61985d9f9c2c420", "message": "NMS-12521: Move from bson to proto for netflow\n\nNMS-12521: Some more refactoring\n\nNMS-12521: Fix integration tests and may be smoke as well\n\nNMS-12521: Only use proto for netflow5 to make smoke tests pass\n\nNMS-12521: Add proto for Netflow9\n\nNMS-12521: More changes in Netflow9\n\nNMS-12521: Add netflow9, IPFIX\n\nNMS-12521: Move FlowMessage, fix features\n\nNMS-12521: Use protobuf wrapper for all primitives\n\nNMS-12521: Fix sentinel telemetry\n\nNMS-12521: Avoid empty values for addresses\n\nNMS-12521: Add more validation tests\n\nNMS-12521: Refactor to proto", "committedDate": "2020-03-18T13:13:34Z", "type": "commit"}, {"oid": "e388d89b283f332b44cf6614f61985d9f9c2c420", "url": "https://github.com/OpenNMS/opennms/commit/e388d89b283f332b44cf6614f61985d9f9c2c420", "message": "NMS-12521: Move from bson to proto for netflow\n\nNMS-12521: Some more refactoring\n\nNMS-12521: Fix integration tests and may be smoke as well\n\nNMS-12521: Only use proto for netflow5 to make smoke tests pass\n\nNMS-12521: Add proto for Netflow9\n\nNMS-12521: More changes in Netflow9\n\nNMS-12521: Add netflow9, IPFIX\n\nNMS-12521: Move FlowMessage, fix features\n\nNMS-12521: Use protobuf wrapper for all primitives\n\nNMS-12521: Fix sentinel telemetry\n\nNMS-12521: Avoid empty values for addresses\n\nNMS-12521: Add more validation tests\n\nNMS-12521: Refactor to proto", "committedDate": "2020-03-18T13:13:34Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUxMTY3MA==", "url": "https://github.com/OpenNMS/opennms/pull/2903#discussion_r397511670", "body": "Small nit: Should be `Netflow` (vs `NetFlow`)", "bodyText": "Small nit: Should be Netflow (vs NetFlow)", "bodyHTML": "<p dir=\"auto\">Small nit: Should be <code>Netflow</code> (vs <code>NetFlow</code>)</p>", "author": "fooker", "createdAt": "2020-03-24T22:57:55Z", "path": "features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/common/NetFlowConverter.java", "diffHunk": "@@ -26,19 +26,19 @@\n  *     http://www.opennms.com/\n  *******************************************************************************/\n \n-package org.opennms.netmgt.telemetry.protocols.netflow.adapter.ipfix;\n+package org.opennms.netmgt.telemetry.protocols.netflow.adapter.common;\n \n import java.util.Collections;\n import java.util.List;\n \n-import org.bson.BsonDocument;\n import org.opennms.netmgt.flows.api.Converter;\n import org.opennms.netmgt.flows.api.Flow;\n+import org.opennms.netmgt.telemetry.protocols.netflow.transport.FlowMessage;\n \n-public class IpfixConverter implements Converter<BsonDocument> {\n+public class NetFlowConverter implements Converter<FlowMessage> {", "originalCommit": "e388d89b283f332b44cf6614f61985d9f9c2c420", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "36b00350ef2a7a091f87639d723466f4b9e83b84", "changed_code": [{"header": "diff --git a/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/common/NetFlowConverter.java b/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/common/NetflowConverter.java\nsimilarity index 92%\nrename from features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/common/NetFlowConverter.java\nrename to features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/common/NetflowConverter.java\nindex b5722732b51..d5c4210bd07 100644\n--- a/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/common/NetFlowConverter.java\n+++ b/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/common/NetflowConverter.java\n", "chunk": "@@ -35,10 +35,10 @@ import org.opennms.netmgt.flows.api.Converter;\n import org.opennms.netmgt.flows.api.Flow;\n import org.opennms.netmgt.telemetry.protocols.netflow.transport.FlowMessage;\n \n-public class NetFlowConverter implements Converter<FlowMessage> {\n+public class NetflowConverter implements Converter<FlowMessage> {\n \n     @Override\n     public List<Flow> convert(FlowMessage packet) {\n-        return Collections.singletonList(new NetFlowMessage(packet));\n+        return Collections.singletonList(new NetflowMessage(packet));\n     }\n }\n", "next_change": null}]}, "revised_code_in_main": {"commit": "3352dcced0424e52de475b87840f05dff94fbec4", "changed_code": [{"header": "diff --git a/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/common/NetFlowConverter.java b/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/common/NetflowConverter.java\nsimilarity index 92%\nrename from features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/common/NetFlowConverter.java\nrename to features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/common/NetflowConverter.java\nindex b5722732b51..d5c4210bd07 100644\n--- a/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/common/NetFlowConverter.java\n+++ b/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/common/NetflowConverter.java\n", "chunk": "@@ -35,10 +35,10 @@ import org.opennms.netmgt.flows.api.Converter;\n import org.opennms.netmgt.flows.api.Flow;\n import org.opennms.netmgt.telemetry.protocols.netflow.transport.FlowMessage;\n \n-public class NetFlowConverter implements Converter<FlowMessage> {\n+public class NetflowConverter implements Converter<FlowMessage> {\n \n     @Override\n     public List<Flow> convert(FlowMessage packet) {\n-        return Collections.singletonList(new NetFlowMessage(packet));\n+        return Collections.singletonList(new NetflowMessage(packet));\n     }\n }\n", "next_change": null}]}, "commits_in_main": [{"oid": "3352dcced0424e52de475b87840f05dff94fbec4", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUxMjI1Nw==", "url": "https://github.com/OpenNMS/opennms/pull/2903#discussion_r397512257", "body": "Same here: `Netflow` (vs `NetFlow`)", "bodyText": "Same here: Netflow (vs NetFlow)", "bodyHTML": "<p dir=\"auto\">Same here: <code>Netflow</code> (vs <code>NetFlow</code>)</p>", "author": "fooker", "createdAt": "2020-03-24T22:59:23Z", "path": "features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/common/NetFlowMessage.java", "diffHunk": "@@ -0,0 +1,271 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+\n+package org.opennms.netmgt.telemetry.protocols.netflow.adapter.common;\n+\n+import java.util.Optional;\n+\n+import org.opennms.netmgt.flows.api.Flow;\n+import org.opennms.netmgt.telemetry.protocols.netflow.transport.FlowMessage;\n+\n+import com.google.common.base.Strings;\n+\n+public class NetFlowMessage implements Flow {", "originalCommit": "e388d89b283f332b44cf6614f61985d9f9c2c420", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "36b00350ef2a7a091f87639d723466f4b9e83b84", "changed_code": [{"header": "diff --git a/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/common/NetFlowMessage.java b/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/common/NetflowMessage.java\nsimilarity index 98%\nrename from features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/common/NetFlowMessage.java\nrename to features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/common/NetflowMessage.java\nindex 71bc3f81e9c..3edd849d133 100644\n--- a/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/common/NetFlowMessage.java\n+++ b/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/common/NetflowMessage.java\n", "chunk": "@@ -35,12 +35,12 @@ import org.opennms.netmgt.telemetry.protocols.netflow.transport.FlowMessage;\n \n import com.google.common.base.Strings;\n \n-public class NetFlowMessage implements Flow {\n+public class NetflowMessage implements Flow {\n \n     private final FlowMessage flowMessageProto;\n \n \n-    public NetFlowMessage(FlowMessage flowMessageProto) {\n+    public NetflowMessage(FlowMessage flowMessageProto) {\n         this.flowMessageProto = flowMessageProto;\n     }\n \n", "next_change": null}]}, "revised_code_in_main": {"commit": "3352dcced0424e52de475b87840f05dff94fbec4", "changed_code": [{"header": "diff --git a/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/common/NetFlowMessage.java b/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/common/NetflowMessage.java\nsimilarity index 98%\nrename from features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/common/NetFlowMessage.java\nrename to features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/common/NetflowMessage.java\nindex 71bc3f81e9c..3edd849d133 100644\n--- a/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/common/NetFlowMessage.java\n+++ b/features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/common/NetflowMessage.java\n", "chunk": "@@ -35,12 +35,12 @@ import org.opennms.netmgt.telemetry.protocols.netflow.transport.FlowMessage;\n \n import com.google.common.base.Strings;\n \n-public class NetFlowMessage implements Flow {\n+public class NetflowMessage implements Flow {\n \n     private final FlowMessage flowMessageProto;\n \n \n-    public NetFlowMessage(FlowMessage flowMessageProto) {\n+    public NetflowMessage(FlowMessage flowMessageProto) {\n         this.flowMessageProto = flowMessageProto;\n     }\n \n", "next_change": null}]}, "commits_in_main": [{"oid": "3352dcced0424e52de475b87840f05dff94fbec4", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUxNDcyMw==", "url": "https://github.com/OpenNMS/opennms/pull/2903#discussion_r397514723", "body": "We should adopt this test. I remember this was quite tricky to get right - so it would be nice to test the behavior on the parser, too.", "bodyText": "We should adopt this test. I remember this was quite tricky to get right - so it would be nice to test the behavior on the parser, too.", "bodyHTML": "<p dir=\"auto\">We should adopt this test. I remember this was quite tricky to get right - so it would be nice to test the behavior on the parser, too.</p>", "author": "fooker", "createdAt": "2020-03-24T23:06:15Z", "path": "features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/ipfix/FlowTimeoutTest.java", "diffHunk": "@@ -1,129 +0,0 @@\n-/*******************************************************************************\n- * This file is part of OpenNMS(R).\n- *\n- * Copyright (C) 2019 The OpenNMS Group, Inc.\n- * OpenNMS(R) is Copyright (C) 1999-2019 The OpenNMS Group, Inc.\n- *\n- * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n- *\n- * OpenNMS(R) is free software: you can redistribute it and/or modify\n- * it under the terms of the GNU Affero General Public License as published\n- * by the Free Software Foundation, either version 3 of the License,\n- * or (at your option) any later version.\n- *\n- * OpenNMS(R) is distributed in the hope that it will be useful,\n- * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n- * GNU Affero General Public License for more details.\n- *\n- * You should have received a copy of the GNU Affero General Public License\n- * along with OpenNMS(R).  If not, see:\n- *      http://www.gnu.org/licenses/\n- *\n- * For more information contact:\n- *     OpenNMS(R) Licensing <license@opennms.org>\n- *     http://www.opennms.org/\n- *     http://www.opennms.com/\n- *******************************************************************************/\n-\n-package org.opennms.netmgt.telemetry.protocols.netflow.adapter.ipfix;\n-\n-import static org.hamcrest.CoreMatchers.is;\n-import static org.junit.Assert.assertThat;\n-\n-import org.bson.BsonDocument;\n-import org.bson.BsonDocumentWriter;\n-import org.junit.Test;\n-\n-public class FlowTimeoutTest {", "originalCommit": "e388d89b283f332b44cf6614f61985d9f9c2c420", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE0ODQ0NQ==", "url": "https://github.com/OpenNMS/opennms/pull/2903#discussion_r401148445", "bodyText": "Updated tests to handle this directly on proto builder.", "author": "cgorantla", "createdAt": "2020-03-31T19:07:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUxNDcyMw=="}], "type": "inlineReview", "revised_code": {"commit": "36b00350ef2a7a091f87639d723466f4b9e83b84", "changed_code": [{"header": "diff --git a/features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/ipfix/FlowTimeoutTest.java b/features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/ipfix/FlowTimeoutTest.java\nnew file mode 100644\nindex 00000000000..2496137fc96\n--- /dev/null\n+++ b/features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/ipfix/FlowTimeoutTest.java\n", "chunk": "@@ -0,0 +1,136 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2019 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2019 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+\n+package org.opennms.netmgt.telemetry.protocols.netflow.adapter.ipfix;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertThat;\n+\n+import java.time.Instant;\n+import java.util.Optional;\n+\n+import org.junit.Test;\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.ie.Value;\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.ie.values.DateTimeValue;\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.ie.values.UnsignedValue;\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.transport.IpFixMessageBuilder;\n+import org.opennms.netmgt.telemetry.protocols.netflow.transport.FlowMessage;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.protobuf.InvalidProtocolBufferException;\n+\n+public class FlowTimeoutTest {\n+\n+    @Test\n+    public void testWithoutTimeout() throws InvalidProtocolBufferException {\n+\n+        Iterable<Value<?>> values = ImmutableList.<Value<?>>builder()\n+                .add(new DateTimeValue(\"flowStartSeconds\", Instant.ofEpochSecond(123)))\n+                .add(new DateTimeValue(\"flowEndSeconds\", Instant.ofEpochSecond(987)))\n+                .build();\n+\n+        final IpFixMessageBuilder ipFixMessageBuilder = new IpFixMessageBuilder(values, (address -> Optional.empty()));\n+        FlowMessage flowMessage = FlowMessage.parseFrom(ipFixMessageBuilder.buildData());\n+\n+        assertThat(flowMessage.getFirstSwitched().getValue(), is(123000L));\n+        assertThat(flowMessage.getDeltaSwitched().getValue(), is(123000L)); // Timeout is same as first\n+        assertThat(flowMessage.getLastSwitched().getValue(), is(987000L));\n+    }\n+\n+    @Test\n+    public void testWithActiveTimeout() throws InvalidProtocolBufferException {\n+\n+        Iterable<Value<?>> values = ImmutableList.<Value<?>>builder()\n+                .add(new DateTimeValue(\"flowStartSeconds\", Instant.ofEpochSecond(123)))\n+                .add(new DateTimeValue(\"flowEndSeconds\", Instant.ofEpochSecond(987)))\n+                .add(new UnsignedValue(\"octetDeltaCount\", 10))\n+                .add(new UnsignedValue(\"packetDeltaCount\", 10))\n+                .add(new UnsignedValue(\"flowActiveTimeout\", 10))\n+                .add(new UnsignedValue(\"flowInactiveTimeout\", 300))\n+                .build();\n+\n+\n+        final IpFixMessageBuilder ipFixMessageBuilder = new IpFixMessageBuilder(values, (address -> Optional.empty()));\n+        FlowMessage flowMessage = FlowMessage.parseFrom(ipFixMessageBuilder.buildData());\n+\n+        assertThat(flowMessage.getFirstSwitched().getValue(), is(123000L));\n+        assertThat(flowMessage.getDeltaSwitched().getValue(), is(987000L - 10000L));\n+        assertThat(flowMessage.getLastSwitched().getValue(), is(987000L));\n+    }\n+\n+    @Test\n+    public void testWithInactiveTimeout() throws InvalidProtocolBufferException {\n+\n+        Iterable<Value<?>> values = ImmutableList.<Value<?>>builder()\n+                .add(new DateTimeValue(\"flowStartSeconds\", Instant.ofEpochSecond(123)))\n+                .add(new DateTimeValue(\"flowEndSeconds\", Instant.ofEpochSecond(987)))\n+                .add(new UnsignedValue(\"octetDeltaCount\", 0))\n+                .add(new UnsignedValue(\"packetDeltaCount\", 0))\n+                .add(new UnsignedValue(\"flowActiveTimeout\", 10))\n+                .add(new UnsignedValue(\"flowInactiveTimeout\", 300))\n+                .build();\n+        final IpFixMessageBuilder ipFixMessageBuilder = new IpFixMessageBuilder(values, (address -> Optional.empty()));\n+        FlowMessage flowMessage = FlowMessage.parseFrom(ipFixMessageBuilder.buildData());\n+\n+\n+        assertThat(flowMessage.getFirstSwitched().getValue(), is(123000L));\n+        assertThat(flowMessage.getDeltaSwitched().getValue(), is(987000L - 300000L));\n+        assertThat(flowMessage.getLastSwitched().getValue(), is(987000L));\n+    }\n+\n+\n+    @Test\n+    public void testFirstLastSwitchedValues() throws InvalidProtocolBufferException {\n+\n+        Iterable<Value<?>> values = ImmutableList.<Value<?>>builder()\n+                .add(new DateTimeValue(\"flowStartSeconds\", Instant.ofEpochSecond(123)))\n+                .add(new DateTimeValue(\"flowEndSeconds\", Instant.ofEpochSecond(987)))\n+                .build();\n+\n+        IpFixMessageBuilder ipFixMessageBuilder = new IpFixMessageBuilder(values, (address -> Optional.empty()));\n+        FlowMessage flowMessage = FlowMessage.parseFrom(ipFixMessageBuilder.buildData());\n+\n+        assertThat(flowMessage.getFirstSwitched().getValue(), is(123000L));\n+        assertThat(flowMessage.getDeltaSwitched().getValue(), is(123000L));\n+        assertThat(flowMessage.getLastSwitched().getValue(), is(987000L));\n+\n+        values = ImmutableList.<Value<?>>builder()\n+                .add(new DateTimeValue(\"systemInitTimeMilliseconds\", Instant.ofEpochMilli(100000)))\n+                .add(new UnsignedValue(\"flowStartSysUpTime\", 2000000))\n+                .build();\n+\n+        ipFixMessageBuilder = new IpFixMessageBuilder(values, (address -> Optional.empty()));\n+        flowMessage = FlowMessage.parseFrom(ipFixMessageBuilder.buildData());\n+\n+        assertThat(flowMessage.getFirstSwitched().getValue(), is(2000000L + 100000L));\n+        assertThat(flowMessage.getDeltaSwitched().getValue(), is(2000000L + 100000L));\n+        assertThat(flowMessage.getLastSwitched().getValue(), is(0L));\n+\n+\n+    }\n+}\n\\ No newline at end of file\n", "next_change": null}]}, "revised_code_in_main": {"commit": "3352dcced0424e52de475b87840f05dff94fbec4", "changed_code": [{"header": "diff --git a/features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/ipfix/FlowTimeoutTest.java b/features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/ipfix/FlowTimeoutTest.java\nnew file mode 100644\nindex 00000000000..2496137fc96\n--- /dev/null\n+++ b/features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/ipfix/FlowTimeoutTest.java\n", "chunk": "@@ -0,0 +1,136 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2019 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2019 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+\n+package org.opennms.netmgt.telemetry.protocols.netflow.adapter.ipfix;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertThat;\n+\n+import java.time.Instant;\n+import java.util.Optional;\n+\n+import org.junit.Test;\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.ie.Value;\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.ie.values.DateTimeValue;\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.ie.values.UnsignedValue;\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.transport.IpFixMessageBuilder;\n+import org.opennms.netmgt.telemetry.protocols.netflow.transport.FlowMessage;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.protobuf.InvalidProtocolBufferException;\n+\n+public class FlowTimeoutTest {\n+\n+    @Test\n+    public void testWithoutTimeout() throws InvalidProtocolBufferException {\n+\n+        Iterable<Value<?>> values = ImmutableList.<Value<?>>builder()\n+                .add(new DateTimeValue(\"flowStartSeconds\", Instant.ofEpochSecond(123)))\n+                .add(new DateTimeValue(\"flowEndSeconds\", Instant.ofEpochSecond(987)))\n+                .build();\n+\n+        final IpFixMessageBuilder ipFixMessageBuilder = new IpFixMessageBuilder(values, (address -> Optional.empty()));\n+        FlowMessage flowMessage = FlowMessage.parseFrom(ipFixMessageBuilder.buildData());\n+\n+        assertThat(flowMessage.getFirstSwitched().getValue(), is(123000L));\n+        assertThat(flowMessage.getDeltaSwitched().getValue(), is(123000L)); // Timeout is same as first\n+        assertThat(flowMessage.getLastSwitched().getValue(), is(987000L));\n+    }\n+\n+    @Test\n+    public void testWithActiveTimeout() throws InvalidProtocolBufferException {\n+\n+        Iterable<Value<?>> values = ImmutableList.<Value<?>>builder()\n+                .add(new DateTimeValue(\"flowStartSeconds\", Instant.ofEpochSecond(123)))\n+                .add(new DateTimeValue(\"flowEndSeconds\", Instant.ofEpochSecond(987)))\n+                .add(new UnsignedValue(\"octetDeltaCount\", 10))\n+                .add(new UnsignedValue(\"packetDeltaCount\", 10))\n+                .add(new UnsignedValue(\"flowActiveTimeout\", 10))\n+                .add(new UnsignedValue(\"flowInactiveTimeout\", 300))\n+                .build();\n+\n+\n+        final IpFixMessageBuilder ipFixMessageBuilder = new IpFixMessageBuilder(values, (address -> Optional.empty()));\n+        FlowMessage flowMessage = FlowMessage.parseFrom(ipFixMessageBuilder.buildData());\n+\n+        assertThat(flowMessage.getFirstSwitched().getValue(), is(123000L));\n+        assertThat(flowMessage.getDeltaSwitched().getValue(), is(987000L - 10000L));\n+        assertThat(flowMessage.getLastSwitched().getValue(), is(987000L));\n+    }\n+\n+    @Test\n+    public void testWithInactiveTimeout() throws InvalidProtocolBufferException {\n+\n+        Iterable<Value<?>> values = ImmutableList.<Value<?>>builder()\n+                .add(new DateTimeValue(\"flowStartSeconds\", Instant.ofEpochSecond(123)))\n+                .add(new DateTimeValue(\"flowEndSeconds\", Instant.ofEpochSecond(987)))\n+                .add(new UnsignedValue(\"octetDeltaCount\", 0))\n+                .add(new UnsignedValue(\"packetDeltaCount\", 0))\n+                .add(new UnsignedValue(\"flowActiveTimeout\", 10))\n+                .add(new UnsignedValue(\"flowInactiveTimeout\", 300))\n+                .build();\n+        final IpFixMessageBuilder ipFixMessageBuilder = new IpFixMessageBuilder(values, (address -> Optional.empty()));\n+        FlowMessage flowMessage = FlowMessage.parseFrom(ipFixMessageBuilder.buildData());\n+\n+\n+        assertThat(flowMessage.getFirstSwitched().getValue(), is(123000L));\n+        assertThat(flowMessage.getDeltaSwitched().getValue(), is(987000L - 300000L));\n+        assertThat(flowMessage.getLastSwitched().getValue(), is(987000L));\n+    }\n+\n+\n+    @Test\n+    public void testFirstLastSwitchedValues() throws InvalidProtocolBufferException {\n+\n+        Iterable<Value<?>> values = ImmutableList.<Value<?>>builder()\n+                .add(new DateTimeValue(\"flowStartSeconds\", Instant.ofEpochSecond(123)))\n+                .add(new DateTimeValue(\"flowEndSeconds\", Instant.ofEpochSecond(987)))\n+                .build();\n+\n+        IpFixMessageBuilder ipFixMessageBuilder = new IpFixMessageBuilder(values, (address -> Optional.empty()));\n+        FlowMessage flowMessage = FlowMessage.parseFrom(ipFixMessageBuilder.buildData());\n+\n+        assertThat(flowMessage.getFirstSwitched().getValue(), is(123000L));\n+        assertThat(flowMessage.getDeltaSwitched().getValue(), is(123000L));\n+        assertThat(flowMessage.getLastSwitched().getValue(), is(987000L));\n+\n+        values = ImmutableList.<Value<?>>builder()\n+                .add(new DateTimeValue(\"systemInitTimeMilliseconds\", Instant.ofEpochMilli(100000)))\n+                .add(new UnsignedValue(\"flowStartSysUpTime\", 2000000))\n+                .build();\n+\n+        ipFixMessageBuilder = new IpFixMessageBuilder(values, (address -> Optional.empty()));\n+        flowMessage = FlowMessage.parseFrom(ipFixMessageBuilder.buildData());\n+\n+        assertThat(flowMessage.getFirstSwitched().getValue(), is(2000000L + 100000L));\n+        assertThat(flowMessage.getDeltaSwitched().getValue(), is(2000000L + 100000L));\n+        assertThat(flowMessage.getLastSwitched().getValue(), is(0L));\n+\n+\n+    }\n+}\n\\ No newline at end of file\n", "next_change": {"commit": "f34d1195ea7ca3d51a5d3f0b4e7d149ef20c3f3e", "changed_code": [{"header": "diff --git a/features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/ipfix/FlowTimeoutTest.java b/features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/ipfix/FlowTimeoutTest.java\nindex 2496137fc96..438b6486e11 100644\n--- a/features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/ipfix/FlowTimeoutTest.java\n+++ b/features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/ipfix/FlowTimeoutTest.java\n", "chunk": "@@ -122,15 +123,13 @@ public class FlowTimeoutTest {\n         values = ImmutableList.<Value<?>>builder()\n                 .add(new DateTimeValue(\"systemInitTimeMilliseconds\", Instant.ofEpochMilli(100000)))\n                 .add(new UnsignedValue(\"flowStartSysUpTime\", 2000000))\n+                .add(new UnsignedValue(\"flowEndSysUpTime\", 4000000))\n                 .build();\n-\n         ipFixMessageBuilder = new IpFixMessageBuilder(values, (address -> Optional.empty()));\n         flowMessage = FlowMessage.parseFrom(ipFixMessageBuilder.buildData());\n \n         assertThat(flowMessage.getFirstSwitched().getValue(), is(2000000L + 100000L));\n         assertThat(flowMessage.getDeltaSwitched().getValue(), is(2000000L + 100000L));\n-        assertThat(flowMessage.getLastSwitched().getValue(), is(0L));\n-\n-\n+        assertThat(flowMessage.getLastSwitched().getValue(), is(4100000L));\n     }\n }\n\\ No newline at end of file\n", "next_change": {"commit": "7dcfa4927ebf40e48a1f62ad6837f9cb99ea57e6", "changed_code": [{"header": "diff --git a/features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/ipfix/FlowTimeoutTest.java b/features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/ipfix/FlowTimeoutTest.java\nindex 438b6486e11..6e5bd2bfd26 100644\n--- a/features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/ipfix/FlowTimeoutTest.java\n+++ b/features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/ipfix/FlowTimeoutTest.java\n", "chunk": "@@ -125,11 +125,11 @@ public class FlowTimeoutTest {\n                 .add(new UnsignedValue(\"flowStartSysUpTime\", 2000000))\n                 .add(new UnsignedValue(\"flowEndSysUpTime\", 4000000))\n                 .build();\n-        ipFixMessageBuilder = new IpFixMessageBuilder(values, (address -> Optional.empty()));\n-        flowMessage = FlowMessage.parseFrom(ipFixMessageBuilder.buildData());\n+        ipFixMessageBuilder = new IpFixMessageBuilder();\n+        flowMessage = ipFixMessageBuilder.buildMessage(values, (address -> Optional.empty())).build();\n \n         assertThat(flowMessage.getFirstSwitched().getValue(), is(2000000L + 100000L));\n         assertThat(flowMessage.getDeltaSwitched().getValue(), is(2000000L + 100000L));\n         assertThat(flowMessage.getLastSwitched().getValue(), is(4100000L));\n     }\n-}\n\\ No newline at end of file\n+}\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "3352dcced0424e52de475b87840f05dff94fbec4", "message": "Merge commit", "committedDate": null}, {"oid": "f34d1195ea7ca3d51a5d3f0b4e7d149ef20c3f3e", "committedDate": "2020-10-08 07:28:32 +0200", "message": "NMS-12800: Drop flows with negative duration"}, {"oid": "7dcfa4927ebf40e48a1f62ad6837f9cb99ea57e6", "committedDate": "2021-01-15 11:20:53 +0100", "message": "NMS-13088: Adapt invalid flows instead of dropping (#3261)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUxNjMwNQ==", "url": "https://github.com/OpenNMS/opennms/pull/2903#discussion_r397516305", "body": "Why not load this as resource?", "bodyText": "Why not load this as resource?", "bodyHTML": "<p dir=\"auto\">Why not load this as resource?</p>", "author": "fooker", "createdAt": "2020-03-24T23:10:41Z", "path": "features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/ipfix/IpfixTestData.java", "diffHunk": "@@ -0,0 +1,207 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+\n+package org.opennms.netmgt.telemetry.protocols.netflow.adapter.ipfix;\n+\n+// Generated using protobuf json utils.\n+public interface IpfixTestData {\n+\n+    String[] ipFixData = {\"{\\n\" +", "originalCommit": "e388d89b283f332b44cf6614f61985d9f9c2c420", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "36b00350ef2a7a091f87639d723466f4b9e83b84", "changed_code": [{"header": "diff --git a/features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/ipfix/IpfixTestData.java b/features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/ipfix/IpfixTestData.java\ndeleted file mode 100644\nindex a69779d9271..00000000000\n--- a/features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/ipfix/IpfixTestData.java\n+++ /dev/null\n", "chunk": "@@ -1,207 +0,0 @@\n-/*******************************************************************************\n- * This file is part of OpenNMS(R).\n- *\n- * Copyright (C) 2020 The OpenNMS Group, Inc.\n- * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n- *\n- * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n- *\n- * OpenNMS(R) is free software: you can redistribute it and/or modify\n- * it under the terms of the GNU Affero General Public License as published\n- * by the Free Software Foundation, either version 3 of the License,\n- * or (at your option) any later version.\n- *\n- * OpenNMS(R) is distributed in the hope that it will be useful,\n- * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n- * GNU Affero General Public License for more details.\n- *\n- * You should have received a copy of the GNU Affero General Public License\n- * along with OpenNMS(R).  If not, see:\n- *      http://www.gnu.org/licenses/\n- *\n- * For more information contact:\n- *     OpenNMS(R) Licensing <license@opennms.org>\n- *     http://www.opennms.org/\n- *     http://www.opennms.com/\n- *******************************************************************************/\n-\n-package org.opennms.netmgt.telemetry.protocols.netflow.adapter.ipfix;\n-\n-// Generated using protobuf json utils.\n-public interface IpfixTestData {\n-\n-    String[] ipFixData = {\"{\\n\" +\n-            \"  \\\"timestamp\\\": \\\"1431516026000\\\",\\n\" +\n-            \"  \\\"numBytes\\\": \\\"260\\\",\\n\" +\n-            \"  \\\"dstAddress\\\": \\\"192.168.253.128\\\",\\n\" +\n-            \"  \\\"dstPort\\\": 22,\\n\" +\n-            \"  \\\"numFlowRecords\\\": 6,\\n\" +\n-            \"  \\\"numPackets\\\": \\\"5\\\",\\n\" +\n-            \"  \\\"flowSeqNum\\\": \\\"6\\\",\\n\" +\n-            \"  \\\"inputSnmpIfindex\\\": 0,\\n\" +\n-            \"  \\\"outputSnmpIfindex\\\": 0,\\n\" +\n-            \"  \\\"ipProtocolVersion\\\": 4,\\n\" +\n-            \"  \\\"protocol\\\": 6,\\n\" +\n-            \"  \\\"samplingInterval\\\": 1.0,\\n\" +\n-            \"  \\\"srcAddress\\\": \\\"192.168.253.1\\\",\\n\" +\n-            \"  \\\"srcPort\\\": 60560,\\n\" +\n-            \"  \\\"tcpFlags\\\": 16,\\n\" +\n-            \"  \\\"tos\\\": 0,\\n\" +\n-            \"  \\\"netflowVersion\\\": \\\"IPFIX\\\",\\n\" +\n-            \"  \\\"vlan\\\": 0,\\n\" +\n-            \"  \\\"nodeIdentifier\\\": \\\"0\\\"\\n\" +\n-            \"}\",\n-            \"{\\n\" +\n-                    \"  \\\"timestamp\\\": \\\"1431516026000\\\",\\n\" +\n-                    \"  \\\"numBytes\\\": \\\"1000\\\",\\n\" +\n-                    \"  \\\"dstAddress\\\": \\\"192.168.253.1\\\",\\n\" +\n-                    \"  \\\"dstPort\\\": 60560,\\n\" +\n-                    \"  \\\"numFlowRecords\\\": 6,\\n\" +\n-                    \"  \\\"numPackets\\\": \\\"6\\\",\\n\" +\n-                    \"  \\\"flowSeqNum\\\": \\\"6\\\",\\n\" +\n-                    \"  \\\"inputSnmpIfindex\\\": 0,\\n\" +\n-                    \"  \\\"outputSnmpIfindex\\\": 0,\\n\" +\n-                    \"  \\\"ipProtocolVersion\\\": 4,\\n\" +\n-                    \"  \\\"protocol\\\": 6,\\n\" +\n-                    \"  \\\"samplingInterval\\\": 1.0,\\n\" +\n-                    \"  \\\"srcAddress\\\": \\\"192.168.253.128\\\",\\n\" +\n-                    \"  \\\"srcPort\\\": 22,\\n\" +\n-                    \"  \\\"tcpFlags\\\": 24,\\n\" +\n-                    \"  \\\"tos\\\": 0,\\n\" +\n-                    \"  \\\"netflowVersion\\\": \\\"IPFIX\\\",\\n\" +\n-                    \"  \\\"vlan\\\": 0,\\n\" +\n-                    \"  \\\"nodeIdentifier\\\": \\\"0\\\"\\n\" +\n-                    \"}\",\n-            \"{\\n\" +\n-                    \"  \\\"timestamp\\\": \\\"1431516026000\\\",\\n\" +\n-                    \"  \\\"numBytes\\\": \\\"601\\\",\\n\" +\n-                    \"  \\\"dstAddress\\\": \\\"192.168.253.132\\\",\\n\" +\n-                    \"  \\\"dstPort\\\": 35262,\\n\" +\n-                    \"  \\\"numFlowRecords\\\": 6,\\n\" +\n-                    \"  \\\"numPackets\\\": \\\"2\\\",\\n\" +\n-                    \"  \\\"flowSeqNum\\\": \\\"6\\\",\\n\" +\n-                    \"  \\\"inputSnmpIfindex\\\": 0,\\n\" +\n-                    \"  \\\"outputSnmpIfindex\\\": 0,\\n\" +\n-                    \"  \\\"ipProtocolVersion\\\": 4,\\n\" +\n-                    \"  \\\"protocol\\\": 17,\\n\" +\n-                    \"  \\\"samplingInterval\\\": 1.0,\\n\" +\n-                    \"  \\\"srcAddress\\\": \\\"192.168.253.2\\\",\\n\" +\n-                    \"  \\\"srcPort\\\": 53,\\n\" +\n-                    \"  \\\"tcpFlags\\\": 0,\\n\" +\n-                    \"  \\\"tos\\\": 0,\\n\" +\n-                    \"  \\\"netflowVersion\\\": \\\"IPFIX\\\",\\n\" +\n-                    \"  \\\"vlan\\\": 0,\\n\" +\n-                    \"  \\\"nodeIdentifier\\\": \\\"0\\\"\\n\" +\n-                    \"}\",\n-            \"{\\n\" +\n-                    \"  \\\"timestamp\\\": \\\"1431516026000\\\",\\n\" +\n-                    \"  \\\"numBytes\\\": \\\"148\\\",\\n\" +\n-                    \"  \\\"dstAddress\\\": \\\"192.168.253.2\\\",\\n\" +\n-                    \"  \\\"dstPort\\\": 53,\\n\" +\n-                    \"  \\\"numFlowRecords\\\": 6,\\n\" +\n-                    \"  \\\"numPackets\\\": \\\"2\\\",\\n\" +\n-                    \"  \\\"flowSeqNum\\\": \\\"6\\\",\\n\" +\n-                    \"  \\\"inputSnmpIfindex\\\": 0,\\n\" +\n-                    \"  \\\"outputSnmpIfindex\\\": 0,\\n\" +\n-                    \"  \\\"ipProtocolVersion\\\": 4,\\n\" +\n-                    \"  \\\"protocol\\\": 17,\\n\" +\n-                    \"  \\\"samplingInterval\\\": 1.0,\\n\" +\n-                    \"  \\\"srcAddress\\\": \\\"192.168.253.132\\\",\\n\" +\n-                    \"  \\\"srcPort\\\": 35262,\\n\" +\n-                    \"  \\\"tcpFlags\\\": 0,\\n\" +\n-                    \"  \\\"tos\\\": 0,\\n\" +\n-                    \"  \\\"netflowVersion\\\": \\\"IPFIX\\\",\\n\" +\n-                    \"  \\\"vlan\\\": 0,\\n\" +\n-                    \"  \\\"nodeIdentifier\\\": \\\"0\\\"\\n\" +\n-                    \"}\",\n-            \"{\\n\" +\n-                    \"  \\\"timestamp\\\": \\\"1431516026000\\\",\\n\" +\n-                    \"  \\\"numBytes\\\": \\\"5946\\\",\\n\" +\n-                    \"  \\\"dstAddress\\\": \\\"192.168.253.132\\\",\\n\" +\n-                    \"  \\\"dstPort\\\": 49935,\\n\" +\n-                    \"  \\\"numFlowRecords\\\": 6,\\n\" +\n-                    \"  \\\"numPackets\\\": \\\"14\\\",\\n\" +\n-                    \"  \\\"flowSeqNum\\\": \\\"6\\\",\\n\" +\n-                    \"  \\\"inputSnmpIfindex\\\": 0,\\n\" +\n-                    \"  \\\"outputSnmpIfindex\\\": 0,\\n\" +\n-                    \"  \\\"ipProtocolVersion\\\": 4,\\n\" +\n-                    \"  \\\"protocol\\\": 6,\\n\" +\n-                    \"  \\\"samplingInterval\\\": 1.0,\\n\" +\n-                    \"  \\\"srcAddress\\\": \\\"54.214.9.161\\\",\\n\" +\n-                    \"  \\\"srcPort\\\": 443,\\n\" +\n-                    \"  \\\"tcpFlags\\\": 26,\\n\" +\n-                    \"  \\\"tos\\\": 0,\\n\" +\n-                    \"  \\\"netflowVersion\\\": \\\"IPFIX\\\",\\n\" +\n-                    \"  \\\"vlan\\\": 0,\\n\" +\n-                    \"  \\\"nodeIdentifier\\\": \\\"0\\\"\\n\" +\n-                    \"}\",\n-            \"{\\n\" +\n-                    \"  \\\"timestamp\\\": \\\"1431516026000\\\",\\n\" +\n-                    \"  \\\"numBytes\\\": \\\"2608\\\",\\n\" +\n-                    \"  \\\"dstAddress\\\": \\\"54.214.9.161\\\",\\n\" +\n-                    \"  \\\"dstPort\\\": 443,\\n\" +\n-                    \"  \\\"numFlowRecords\\\": 6,\\n\" +\n-                    \"  \\\"numPackets\\\": \\\"13\\\",\\n\" +\n-                    \"  \\\"flowSeqNum\\\": \\\"6\\\",\\n\" +\n-                    \"  \\\"inputSnmpIfindex\\\": 0,\\n\" +\n-                    \"  \\\"outputSnmpIfindex\\\": 0,\\n\" +\n-                    \"  \\\"ipProtocolVersion\\\": 4,\\n\" +\n-                    \"  \\\"protocol\\\": 6,\\n\" +\n-                    \"  \\\"samplingInterval\\\": 1.0,\\n\" +\n-                    \"  \\\"srcAddress\\\": \\\"192.168.253.132\\\",\\n\" +\n-                    \"  \\\"srcPort\\\": 49935,\\n\" +\n-                    \"  \\\"tcpFlags\\\": 26,\\n\" +\n-                    \"  \\\"tos\\\": 0,\\n\" +\n-                    \"  \\\"netflowVersion\\\": \\\"IPFIX\\\",\\n\" +\n-                    \"  \\\"vlan\\\": 0,\\n\" +\n-                    \"  \\\"nodeIdentifier\\\": \\\"0\\\"\\n\" +\n-                    \"}\",\n-            \"{\\n\" +\n-                    \"  \\\"timestamp\\\": \\\"1519137963000\\\",\\n\" +\n-                    \"  \\\"numBytes\\\": \\\"4295\\\",\\n\" +\n-                    \"  \\\"direction\\\": \\\"EGRESS\\\",\\n\" +\n-                    \"  \\\"dstAddress\\\": \\\"192.168.3.90\\\",\\n\" +\n-                    \"  \\\"dstPort\\\": 62870,\\n\" +\n-                    \"  \\\"deltaSwitched\\\": \\\"1519137948000\\\",\\n\" +\n-                    \"  \\\"firstSwitched\\\": \\\"1519137948000\\\",\\n\" +\n-                    \"  \\\"lastSwitched\\\": \\\"1519137948000\\\",\\n\" +\n-                    \"  \\\"numFlowRecords\\\": 2,\\n\" +\n-                    \"  \\\"numPackets\\\": \\\"15\\\",\\n\" +\n-                    \"  \\\"flowSeqNum\\\": \\\"14057793\\\",\\n\" +\n-                    \"  \\\"inputSnmpIfindex\\\": 364,\\n\" +\n-                    \"  \\\"outputSnmpIfindex\\\": 137,\\n\" +\n-                    \"  \\\"protocol\\\": 6,\\n\" +\n-                    \"  \\\"samplingInterval\\\": 1.0,\\n\" +\n-                    \"  \\\"srcAddress\\\": \\\"192.168.3.91\\\",\\n\" +\n-                    \"  \\\"srcPort\\\": 443,\\n\" +\n-                    \"  \\\"tcpFlags\\\": 24,\\n\" +\n-                    \"  \\\"tos\\\": 0,\\n\" +\n-                    \"  \\\"netflowVersion\\\": \\\"IPFIX\\\",\\n\" +\n-                    \"  \\\"nodeIdentifier\\\": \\\"0\\\"\\n\" +\n-                    \"}\",\n-            \"{\\n\" +\n-                    \"  \\\"timestamp\\\": \\\"1519137963000\\\",\\n\" +\n-                    \"  \\\"numBytes\\\": \\\"385184\\\",\\n\" +\n-                    \"  \\\"direction\\\": \\\"EGRESS\\\",\\n\" +\n-                    \"  \\\"dstAddress\\\": \\\"192.168.3.90\\\",\\n\" +\n-                    \"  \\\"dstPort\\\": 62870,\\n\" +\n-                    \"  \\\"deltaSwitched\\\": \\\"1519137934000\\\",\\n\" +\n-                    \"  \\\"firstSwitched\\\": \\\"1519137934000\\\",\\n\" +\n-                    \"  \\\"lastSwitched\\\": \\\"1519137948000\\\",\\n\" +\n-                    \"  \\\"numFlowRecords\\\": 2,\\n\" +\n-                    \"  \\\"numPackets\\\": \\\"262\\\",\\n\" +\n-                    \"  \\\"flowSeqNum\\\": \\\"14057793\\\",\\n\" +\n-                    \"  \\\"inputSnmpIfindex\\\": 364,\\n\" +\n-                    \"  \\\"outputSnmpIfindex\\\": 137,\\n\" +\n-                    \"  \\\"protocol\\\": 6,\\n\" +\n-                    \"  \\\"samplingInterval\\\": 1.0,\\n\" +\n-                    \"  \\\"srcAddress\\\": \\\"192.168.3.91\\\",\\n\" +\n-                    \"  \\\"srcPort\\\": 443,\\n\" +\n-                    \"  \\\"tcpFlags\\\": 16,\\n\" +\n-                    \"  \\\"tos\\\": 0,\\n\" +\n-                    \"  \\\"netflowVersion\\\": \\\"IPFIX\\\",\\n\" +\n-                    \"  \\\"nodeIdentifier\\\": \\\"0\\\"\\n\" +\n-                    \"}\"\n-    };\n-}\n", "next_change": null}]}, "revised_code_in_main": {"commit": "3352dcced0424e52de475b87840f05dff94fbec4", "changed_code": [{"header": "diff --git a/features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/ipfix/IpfixTestData.java b/features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/ipfix/IpfixTestData.java\ndeleted file mode 100644\nindex a69779d9271..00000000000\n--- a/features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/ipfix/IpfixTestData.java\n+++ /dev/null\n", "chunk": "@@ -1,207 +0,0 @@\n-/*******************************************************************************\n- * This file is part of OpenNMS(R).\n- *\n- * Copyright (C) 2020 The OpenNMS Group, Inc.\n- * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n- *\n- * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n- *\n- * OpenNMS(R) is free software: you can redistribute it and/or modify\n- * it under the terms of the GNU Affero General Public License as published\n- * by the Free Software Foundation, either version 3 of the License,\n- * or (at your option) any later version.\n- *\n- * OpenNMS(R) is distributed in the hope that it will be useful,\n- * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n- * GNU Affero General Public License for more details.\n- *\n- * You should have received a copy of the GNU Affero General Public License\n- * along with OpenNMS(R).  If not, see:\n- *      http://www.gnu.org/licenses/\n- *\n- * For more information contact:\n- *     OpenNMS(R) Licensing <license@opennms.org>\n- *     http://www.opennms.org/\n- *     http://www.opennms.com/\n- *******************************************************************************/\n-\n-package org.opennms.netmgt.telemetry.protocols.netflow.adapter.ipfix;\n-\n-// Generated using protobuf json utils.\n-public interface IpfixTestData {\n-\n-    String[] ipFixData = {\"{\\n\" +\n-            \"  \\\"timestamp\\\": \\\"1431516026000\\\",\\n\" +\n-            \"  \\\"numBytes\\\": \\\"260\\\",\\n\" +\n-            \"  \\\"dstAddress\\\": \\\"192.168.253.128\\\",\\n\" +\n-            \"  \\\"dstPort\\\": 22,\\n\" +\n-            \"  \\\"numFlowRecords\\\": 6,\\n\" +\n-            \"  \\\"numPackets\\\": \\\"5\\\",\\n\" +\n-            \"  \\\"flowSeqNum\\\": \\\"6\\\",\\n\" +\n-            \"  \\\"inputSnmpIfindex\\\": 0,\\n\" +\n-            \"  \\\"outputSnmpIfindex\\\": 0,\\n\" +\n-            \"  \\\"ipProtocolVersion\\\": 4,\\n\" +\n-            \"  \\\"protocol\\\": 6,\\n\" +\n-            \"  \\\"samplingInterval\\\": 1.0,\\n\" +\n-            \"  \\\"srcAddress\\\": \\\"192.168.253.1\\\",\\n\" +\n-            \"  \\\"srcPort\\\": 60560,\\n\" +\n-            \"  \\\"tcpFlags\\\": 16,\\n\" +\n-            \"  \\\"tos\\\": 0,\\n\" +\n-            \"  \\\"netflowVersion\\\": \\\"IPFIX\\\",\\n\" +\n-            \"  \\\"vlan\\\": 0,\\n\" +\n-            \"  \\\"nodeIdentifier\\\": \\\"0\\\"\\n\" +\n-            \"}\",\n-            \"{\\n\" +\n-                    \"  \\\"timestamp\\\": \\\"1431516026000\\\",\\n\" +\n-                    \"  \\\"numBytes\\\": \\\"1000\\\",\\n\" +\n-                    \"  \\\"dstAddress\\\": \\\"192.168.253.1\\\",\\n\" +\n-                    \"  \\\"dstPort\\\": 60560,\\n\" +\n-                    \"  \\\"numFlowRecords\\\": 6,\\n\" +\n-                    \"  \\\"numPackets\\\": \\\"6\\\",\\n\" +\n-                    \"  \\\"flowSeqNum\\\": \\\"6\\\",\\n\" +\n-                    \"  \\\"inputSnmpIfindex\\\": 0,\\n\" +\n-                    \"  \\\"outputSnmpIfindex\\\": 0,\\n\" +\n-                    \"  \\\"ipProtocolVersion\\\": 4,\\n\" +\n-                    \"  \\\"protocol\\\": 6,\\n\" +\n-                    \"  \\\"samplingInterval\\\": 1.0,\\n\" +\n-                    \"  \\\"srcAddress\\\": \\\"192.168.253.128\\\",\\n\" +\n-                    \"  \\\"srcPort\\\": 22,\\n\" +\n-                    \"  \\\"tcpFlags\\\": 24,\\n\" +\n-                    \"  \\\"tos\\\": 0,\\n\" +\n-                    \"  \\\"netflowVersion\\\": \\\"IPFIX\\\",\\n\" +\n-                    \"  \\\"vlan\\\": 0,\\n\" +\n-                    \"  \\\"nodeIdentifier\\\": \\\"0\\\"\\n\" +\n-                    \"}\",\n-            \"{\\n\" +\n-                    \"  \\\"timestamp\\\": \\\"1431516026000\\\",\\n\" +\n-                    \"  \\\"numBytes\\\": \\\"601\\\",\\n\" +\n-                    \"  \\\"dstAddress\\\": \\\"192.168.253.132\\\",\\n\" +\n-                    \"  \\\"dstPort\\\": 35262,\\n\" +\n-                    \"  \\\"numFlowRecords\\\": 6,\\n\" +\n-                    \"  \\\"numPackets\\\": \\\"2\\\",\\n\" +\n-                    \"  \\\"flowSeqNum\\\": \\\"6\\\",\\n\" +\n-                    \"  \\\"inputSnmpIfindex\\\": 0,\\n\" +\n-                    \"  \\\"outputSnmpIfindex\\\": 0,\\n\" +\n-                    \"  \\\"ipProtocolVersion\\\": 4,\\n\" +\n-                    \"  \\\"protocol\\\": 17,\\n\" +\n-                    \"  \\\"samplingInterval\\\": 1.0,\\n\" +\n-                    \"  \\\"srcAddress\\\": \\\"192.168.253.2\\\",\\n\" +\n-                    \"  \\\"srcPort\\\": 53,\\n\" +\n-                    \"  \\\"tcpFlags\\\": 0,\\n\" +\n-                    \"  \\\"tos\\\": 0,\\n\" +\n-                    \"  \\\"netflowVersion\\\": \\\"IPFIX\\\",\\n\" +\n-                    \"  \\\"vlan\\\": 0,\\n\" +\n-                    \"  \\\"nodeIdentifier\\\": \\\"0\\\"\\n\" +\n-                    \"}\",\n-            \"{\\n\" +\n-                    \"  \\\"timestamp\\\": \\\"1431516026000\\\",\\n\" +\n-                    \"  \\\"numBytes\\\": \\\"148\\\",\\n\" +\n-                    \"  \\\"dstAddress\\\": \\\"192.168.253.2\\\",\\n\" +\n-                    \"  \\\"dstPort\\\": 53,\\n\" +\n-                    \"  \\\"numFlowRecords\\\": 6,\\n\" +\n-                    \"  \\\"numPackets\\\": \\\"2\\\",\\n\" +\n-                    \"  \\\"flowSeqNum\\\": \\\"6\\\",\\n\" +\n-                    \"  \\\"inputSnmpIfindex\\\": 0,\\n\" +\n-                    \"  \\\"outputSnmpIfindex\\\": 0,\\n\" +\n-                    \"  \\\"ipProtocolVersion\\\": 4,\\n\" +\n-                    \"  \\\"protocol\\\": 17,\\n\" +\n-                    \"  \\\"samplingInterval\\\": 1.0,\\n\" +\n-                    \"  \\\"srcAddress\\\": \\\"192.168.253.132\\\",\\n\" +\n-                    \"  \\\"srcPort\\\": 35262,\\n\" +\n-                    \"  \\\"tcpFlags\\\": 0,\\n\" +\n-                    \"  \\\"tos\\\": 0,\\n\" +\n-                    \"  \\\"netflowVersion\\\": \\\"IPFIX\\\",\\n\" +\n-                    \"  \\\"vlan\\\": 0,\\n\" +\n-                    \"  \\\"nodeIdentifier\\\": \\\"0\\\"\\n\" +\n-                    \"}\",\n-            \"{\\n\" +\n-                    \"  \\\"timestamp\\\": \\\"1431516026000\\\",\\n\" +\n-                    \"  \\\"numBytes\\\": \\\"5946\\\",\\n\" +\n-                    \"  \\\"dstAddress\\\": \\\"192.168.253.132\\\",\\n\" +\n-                    \"  \\\"dstPort\\\": 49935,\\n\" +\n-                    \"  \\\"numFlowRecords\\\": 6,\\n\" +\n-                    \"  \\\"numPackets\\\": \\\"14\\\",\\n\" +\n-                    \"  \\\"flowSeqNum\\\": \\\"6\\\",\\n\" +\n-                    \"  \\\"inputSnmpIfindex\\\": 0,\\n\" +\n-                    \"  \\\"outputSnmpIfindex\\\": 0,\\n\" +\n-                    \"  \\\"ipProtocolVersion\\\": 4,\\n\" +\n-                    \"  \\\"protocol\\\": 6,\\n\" +\n-                    \"  \\\"samplingInterval\\\": 1.0,\\n\" +\n-                    \"  \\\"srcAddress\\\": \\\"54.214.9.161\\\",\\n\" +\n-                    \"  \\\"srcPort\\\": 443,\\n\" +\n-                    \"  \\\"tcpFlags\\\": 26,\\n\" +\n-                    \"  \\\"tos\\\": 0,\\n\" +\n-                    \"  \\\"netflowVersion\\\": \\\"IPFIX\\\",\\n\" +\n-                    \"  \\\"vlan\\\": 0,\\n\" +\n-                    \"  \\\"nodeIdentifier\\\": \\\"0\\\"\\n\" +\n-                    \"}\",\n-            \"{\\n\" +\n-                    \"  \\\"timestamp\\\": \\\"1431516026000\\\",\\n\" +\n-                    \"  \\\"numBytes\\\": \\\"2608\\\",\\n\" +\n-                    \"  \\\"dstAddress\\\": \\\"54.214.9.161\\\",\\n\" +\n-                    \"  \\\"dstPort\\\": 443,\\n\" +\n-                    \"  \\\"numFlowRecords\\\": 6,\\n\" +\n-                    \"  \\\"numPackets\\\": \\\"13\\\",\\n\" +\n-                    \"  \\\"flowSeqNum\\\": \\\"6\\\",\\n\" +\n-                    \"  \\\"inputSnmpIfindex\\\": 0,\\n\" +\n-                    \"  \\\"outputSnmpIfindex\\\": 0,\\n\" +\n-                    \"  \\\"ipProtocolVersion\\\": 4,\\n\" +\n-                    \"  \\\"protocol\\\": 6,\\n\" +\n-                    \"  \\\"samplingInterval\\\": 1.0,\\n\" +\n-                    \"  \\\"srcAddress\\\": \\\"192.168.253.132\\\",\\n\" +\n-                    \"  \\\"srcPort\\\": 49935,\\n\" +\n-                    \"  \\\"tcpFlags\\\": 26,\\n\" +\n-                    \"  \\\"tos\\\": 0,\\n\" +\n-                    \"  \\\"netflowVersion\\\": \\\"IPFIX\\\",\\n\" +\n-                    \"  \\\"vlan\\\": 0,\\n\" +\n-                    \"  \\\"nodeIdentifier\\\": \\\"0\\\"\\n\" +\n-                    \"}\",\n-            \"{\\n\" +\n-                    \"  \\\"timestamp\\\": \\\"1519137963000\\\",\\n\" +\n-                    \"  \\\"numBytes\\\": \\\"4295\\\",\\n\" +\n-                    \"  \\\"direction\\\": \\\"EGRESS\\\",\\n\" +\n-                    \"  \\\"dstAddress\\\": \\\"192.168.3.90\\\",\\n\" +\n-                    \"  \\\"dstPort\\\": 62870,\\n\" +\n-                    \"  \\\"deltaSwitched\\\": \\\"1519137948000\\\",\\n\" +\n-                    \"  \\\"firstSwitched\\\": \\\"1519137948000\\\",\\n\" +\n-                    \"  \\\"lastSwitched\\\": \\\"1519137948000\\\",\\n\" +\n-                    \"  \\\"numFlowRecords\\\": 2,\\n\" +\n-                    \"  \\\"numPackets\\\": \\\"15\\\",\\n\" +\n-                    \"  \\\"flowSeqNum\\\": \\\"14057793\\\",\\n\" +\n-                    \"  \\\"inputSnmpIfindex\\\": 364,\\n\" +\n-                    \"  \\\"outputSnmpIfindex\\\": 137,\\n\" +\n-                    \"  \\\"protocol\\\": 6,\\n\" +\n-                    \"  \\\"samplingInterval\\\": 1.0,\\n\" +\n-                    \"  \\\"srcAddress\\\": \\\"192.168.3.91\\\",\\n\" +\n-                    \"  \\\"srcPort\\\": 443,\\n\" +\n-                    \"  \\\"tcpFlags\\\": 24,\\n\" +\n-                    \"  \\\"tos\\\": 0,\\n\" +\n-                    \"  \\\"netflowVersion\\\": \\\"IPFIX\\\",\\n\" +\n-                    \"  \\\"nodeIdentifier\\\": \\\"0\\\"\\n\" +\n-                    \"}\",\n-            \"{\\n\" +\n-                    \"  \\\"timestamp\\\": \\\"1519137963000\\\",\\n\" +\n-                    \"  \\\"numBytes\\\": \\\"385184\\\",\\n\" +\n-                    \"  \\\"direction\\\": \\\"EGRESS\\\",\\n\" +\n-                    \"  \\\"dstAddress\\\": \\\"192.168.3.90\\\",\\n\" +\n-                    \"  \\\"dstPort\\\": 62870,\\n\" +\n-                    \"  \\\"deltaSwitched\\\": \\\"1519137934000\\\",\\n\" +\n-                    \"  \\\"firstSwitched\\\": \\\"1519137934000\\\",\\n\" +\n-                    \"  \\\"lastSwitched\\\": \\\"1519137948000\\\",\\n\" +\n-                    \"  \\\"numFlowRecords\\\": 2,\\n\" +\n-                    \"  \\\"numPackets\\\": \\\"262\\\",\\n\" +\n-                    \"  \\\"flowSeqNum\\\": \\\"14057793\\\",\\n\" +\n-                    \"  \\\"inputSnmpIfindex\\\": 364,\\n\" +\n-                    \"  \\\"outputSnmpIfindex\\\": 137,\\n\" +\n-                    \"  \\\"protocol\\\": 6,\\n\" +\n-                    \"  \\\"samplingInterval\\\": 1.0,\\n\" +\n-                    \"  \\\"srcAddress\\\": \\\"192.168.3.91\\\",\\n\" +\n-                    \"  \\\"srcPort\\\": 443,\\n\" +\n-                    \"  \\\"tcpFlags\\\": 16,\\n\" +\n-                    \"  \\\"tos\\\": 0,\\n\" +\n-                    \"  \\\"netflowVersion\\\": \\\"IPFIX\\\",\\n\" +\n-                    \"  \\\"nodeIdentifier\\\": \\\"0\\\"\\n\" +\n-                    \"}\"\n-    };\n-}\n", "next_change": null}]}, "commits_in_main": [{"oid": "3352dcced0424e52de475b87840f05dff94fbec4", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUxODAyNQ==", "url": "https://github.com/OpenNMS/opennms/pull/2903#discussion_r397518025", "body": "Same here, we should adopt this test.", "bodyText": "Same here, we should adopt this test.", "bodyHTML": "<p dir=\"auto\">Same here, we should adopt this test.</p>", "author": "fooker", "createdAt": "2020-03-24T23:15:23Z", "path": "features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow9/FlowTimeoutTest.java", "diffHunk": "@@ -1,123 +0,0 @@\n-/*******************************************************************************\n- * This file is part of OpenNMS(R).\n- *\n- * Copyright (C) 2019 The OpenNMS Group, Inc.\n- * OpenNMS(R) is Copyright (C) 1999-2019 The OpenNMS Group, Inc.\n- *\n- * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n- *\n- * OpenNMS(R) is free software: you can redistribute it and/or modify\n- * it under the terms of the GNU Affero General Public License as published\n- * by the Free Software Foundation, either version 3 of the License,\n- * or (at your option) any later version.\n- *\n- * OpenNMS(R) is distributed in the hope that it will be useful,\n- * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n- * GNU Affero General Public License for more details.\n- *\n- * You should have received a copy of the GNU Affero General Public License\n- * along with OpenNMS(R).  If not, see:\n- *      http://www.gnu.org/licenses/\n- *\n- * For more information contact:\n- *     OpenNMS(R) Licensing <license@opennms.org>\n- *     http://www.opennms.org/\n- *     http://www.opennms.com/\n- *******************************************************************************/\n-\n-package org.opennms.netmgt.telemetry.protocols.netflow.adapter.netflow9;\n-\n-import static org.hamcrest.CoreMatchers.is;\n-import static org.junit.Assert.assertThat;\n-\n-import org.bson.BsonDocument;\n-import org.bson.BsonDocumentWriter;\n-import org.junit.Test;\n-\n-public class FlowTimeoutTest {", "originalCommit": "e388d89b283f332b44cf6614f61985d9f9c2c420", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "36b00350ef2a7a091f87639d723466f4b9e83b84", "changed_code": [{"header": "diff --git a/features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow9/FlowTimeoutTest.java b/features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow9/FlowTimeoutTest.java\nnew file mode 100644\nindex 00000000000..36d3979fd80\n--- /dev/null\n+++ b/features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow9/FlowTimeoutTest.java\n", "chunk": "@@ -0,0 +1,108 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2019 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2019 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+\n+package org.opennms.netmgt.telemetry.protocols.netflow.adapter.netflow9;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertThat;\n+\n+import java.util.Optional;\n+\n+import org.junit.Test;\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.ie.Value;\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.ie.values.UnsignedValue;\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.transport.Netflow9MessageBuilder;\n+import org.opennms.netmgt.telemetry.protocols.netflow.transport.FlowMessage;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.protobuf.InvalidProtocolBufferException;\n+\n+public class FlowTimeoutTest {\n+\n+    @Test\n+    public void testWithoutTimeout() throws InvalidProtocolBufferException {\n+\n+        Iterable<Value<?>> values = ImmutableList.<Value<?>>builder()\n+                .add(new UnsignedValue(\"@unixSecs\", 0))\n+                .add(new UnsignedValue(\"@sysUpTime\", 0))\n+                .add(new UnsignedValue(\"FIRST_SWITCHED\", 123000))\n+                .add(new UnsignedValue(\"LAST_SWITCHED\", 987000)).build();\n+        Netflow9MessageBuilder netflow9MessageBuilder = new Netflow9MessageBuilder(values, (address -> Optional.empty()));\n+\n+        FlowMessage flowMessage = FlowMessage.parseFrom(netflow9MessageBuilder.buildData());\n+        assertThat(flowMessage.getFirstSwitched().getValue(), is(123000L));\n+        assertThat(flowMessage.getDeltaSwitched().getValue(), is(123000L));\n+        assertThat(flowMessage.getLastSwitched().getValue(), is(987000L));\n+\n+    }\n+\n+    @Test\n+    public void testWithActiveTimeout() throws InvalidProtocolBufferException {\n+\n+        Iterable<Value<?>> values = ImmutableList.<Value<?>>builder()\n+                .add(new UnsignedValue(\"@unixSecs\", 0))\n+                .add(new UnsignedValue(\"@sysUpTime\", 0))\n+                .add(new UnsignedValue(\"FIRST_SWITCHED\", 123000))\n+                .add(new UnsignedValue(\"LAST_SWITCHED\", 987000))\n+                .add(new UnsignedValue(\"IN_BYTES\", 10))\n+                .add(new UnsignedValue(\"IN_PKTS\", 10))\n+                .add(new UnsignedValue(\"FLOW_ACTIVE_TIMEOUT\", 10))\n+                .add(new UnsignedValue(\"FLOW_INACTIVE_TIMEOUT\", 300))\n+                .build();\n+\n+        Netflow9MessageBuilder netflow9MessageBuilder = new Netflow9MessageBuilder(values, (address -> Optional.empty()));\n+\n+        FlowMessage flowMessage = FlowMessage.parseFrom(netflow9MessageBuilder.buildData());\n+        assertThat(flowMessage.getFirstSwitched().getValue(), is(123000L));\n+        assertThat(flowMessage.getDeltaSwitched().getValue(),  is(987000L - 10000L));\n+        assertThat(flowMessage.getLastSwitched().getValue(), is(987000L));\n+    }\n+\n+    @Test\n+    public void testWithInactiveTimeout() throws InvalidProtocolBufferException {\n+\n+        Iterable<Value<?>> values = ImmutableList.<Value<?>>builder()\n+                .add(new UnsignedValue(\"@unixSecs\", 0))\n+                .add(new UnsignedValue(\"@sysUpTime\", 0))\n+                .add(new UnsignedValue(\"FIRST_SWITCHED\", 123000))\n+                .add(new UnsignedValue(\"LAST_SWITCHED\", 987000))\n+                .add(new UnsignedValue(\"IN_BYTES\", 0))\n+                .add(new UnsignedValue(\"IN_PKTS\", 0))\n+                .add(new UnsignedValue(\"FLOW_ACTIVE_TIMEOUT\", 10))\n+                .add(new UnsignedValue(\"FLOW_INACTIVE_TIMEOUT\", 300))\n+                .build();\n+\n+        Netflow9MessageBuilder netflow9MessageBuilder = new Netflow9MessageBuilder(values, (address -> Optional.empty()));\n+\n+        FlowMessage flowMessage = FlowMessage.parseFrom(netflow9MessageBuilder.buildData());\n+\n+        assertThat(flowMessage.getFirstSwitched().getValue(), is(123000L));\n+        assertThat(flowMessage.getDeltaSwitched().getValue(), is(987000L - 300000L));\n+        assertThat(flowMessage.getLastSwitched().getValue(), is(987000L));\n+    }\n+}\n\\ No newline at end of file\n", "next_change": null}]}, "revised_code_in_main": {"commit": "3352dcced0424e52de475b87840f05dff94fbec4", "changed_code": [{"header": "diff --git a/features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow9/FlowTimeoutTest.java b/features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow9/FlowTimeoutTest.java\nnew file mode 100644\nindex 00000000000..36d3979fd80\n--- /dev/null\n+++ b/features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow9/FlowTimeoutTest.java\n", "chunk": "@@ -0,0 +1,108 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2019 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2019 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+\n+package org.opennms.netmgt.telemetry.protocols.netflow.adapter.netflow9;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertThat;\n+\n+import java.util.Optional;\n+\n+import org.junit.Test;\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.ie.Value;\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.ie.values.UnsignedValue;\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.transport.Netflow9MessageBuilder;\n+import org.opennms.netmgt.telemetry.protocols.netflow.transport.FlowMessage;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.protobuf.InvalidProtocolBufferException;\n+\n+public class FlowTimeoutTest {\n+\n+    @Test\n+    public void testWithoutTimeout() throws InvalidProtocolBufferException {\n+\n+        Iterable<Value<?>> values = ImmutableList.<Value<?>>builder()\n+                .add(new UnsignedValue(\"@unixSecs\", 0))\n+                .add(new UnsignedValue(\"@sysUpTime\", 0))\n+                .add(new UnsignedValue(\"FIRST_SWITCHED\", 123000))\n+                .add(new UnsignedValue(\"LAST_SWITCHED\", 987000)).build();\n+        Netflow9MessageBuilder netflow9MessageBuilder = new Netflow9MessageBuilder(values, (address -> Optional.empty()));\n+\n+        FlowMessage flowMessage = FlowMessage.parseFrom(netflow9MessageBuilder.buildData());\n+        assertThat(flowMessage.getFirstSwitched().getValue(), is(123000L));\n+        assertThat(flowMessage.getDeltaSwitched().getValue(), is(123000L));\n+        assertThat(flowMessage.getLastSwitched().getValue(), is(987000L));\n+\n+    }\n+\n+    @Test\n+    public void testWithActiveTimeout() throws InvalidProtocolBufferException {\n+\n+        Iterable<Value<?>> values = ImmutableList.<Value<?>>builder()\n+                .add(new UnsignedValue(\"@unixSecs\", 0))\n+                .add(new UnsignedValue(\"@sysUpTime\", 0))\n+                .add(new UnsignedValue(\"FIRST_SWITCHED\", 123000))\n+                .add(new UnsignedValue(\"LAST_SWITCHED\", 987000))\n+                .add(new UnsignedValue(\"IN_BYTES\", 10))\n+                .add(new UnsignedValue(\"IN_PKTS\", 10))\n+                .add(new UnsignedValue(\"FLOW_ACTIVE_TIMEOUT\", 10))\n+                .add(new UnsignedValue(\"FLOW_INACTIVE_TIMEOUT\", 300))\n+                .build();\n+\n+        Netflow9MessageBuilder netflow9MessageBuilder = new Netflow9MessageBuilder(values, (address -> Optional.empty()));\n+\n+        FlowMessage flowMessage = FlowMessage.parseFrom(netflow9MessageBuilder.buildData());\n+        assertThat(flowMessage.getFirstSwitched().getValue(), is(123000L));\n+        assertThat(flowMessage.getDeltaSwitched().getValue(),  is(987000L - 10000L));\n+        assertThat(flowMessage.getLastSwitched().getValue(), is(987000L));\n+    }\n+\n+    @Test\n+    public void testWithInactiveTimeout() throws InvalidProtocolBufferException {\n+\n+        Iterable<Value<?>> values = ImmutableList.<Value<?>>builder()\n+                .add(new UnsignedValue(\"@unixSecs\", 0))\n+                .add(new UnsignedValue(\"@sysUpTime\", 0))\n+                .add(new UnsignedValue(\"FIRST_SWITCHED\", 123000))\n+                .add(new UnsignedValue(\"LAST_SWITCHED\", 987000))\n+                .add(new UnsignedValue(\"IN_BYTES\", 0))\n+                .add(new UnsignedValue(\"IN_PKTS\", 0))\n+                .add(new UnsignedValue(\"FLOW_ACTIVE_TIMEOUT\", 10))\n+                .add(new UnsignedValue(\"FLOW_INACTIVE_TIMEOUT\", 300))\n+                .build();\n+\n+        Netflow9MessageBuilder netflow9MessageBuilder = new Netflow9MessageBuilder(values, (address -> Optional.empty()));\n+\n+        FlowMessage flowMessage = FlowMessage.parseFrom(netflow9MessageBuilder.buildData());\n+\n+        assertThat(flowMessage.getFirstSwitched().getValue(), is(123000L));\n+        assertThat(flowMessage.getDeltaSwitched().getValue(), is(987000L - 300000L));\n+        assertThat(flowMessage.getLastSwitched().getValue(), is(987000L));\n+    }\n+}\n\\ No newline at end of file\n", "next_change": {"commit": "7dcfa4927ebf40e48a1f62ad6837f9cb99ea57e6", "changed_code": [{"header": "diff --git a/features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow9/FlowTimeoutTest.java b/features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow9/FlowTimeoutTest.java\nindex 36d3979fd80..5aca13dd70d 100644\n--- a/features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow9/FlowTimeoutTest.java\n+++ b/features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow9/FlowTimeoutTest.java\n", "chunk": "@@ -97,12 +98,12 @@ public class FlowTimeoutTest {\n                 .add(new UnsignedValue(\"FLOW_INACTIVE_TIMEOUT\", 300))\n                 .build();\n \n-        Netflow9MessageBuilder netflow9MessageBuilder = new Netflow9MessageBuilder(values, (address -> Optional.empty()));\n+        Netflow9MessageBuilder netflow9MessageBuilder = new Netflow9MessageBuilder();\n \n-        FlowMessage flowMessage = FlowMessage.parseFrom(netflow9MessageBuilder.buildData());\n+        FlowMessage flowMessage = netflow9MessageBuilder.buildMessage(values, (address -> Optional.empty())).build();\n \n         assertThat(flowMessage.getFirstSwitched().getValue(), is(123000L));\n         assertThat(flowMessage.getDeltaSwitched().getValue(), is(987000L - 300000L));\n         assertThat(flowMessage.getLastSwitched().getValue(), is(987000L));\n     }\n-}\n\\ No newline at end of file\n+}\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "3352dcced0424e52de475b87840f05dff94fbec4", "message": "Merge commit", "committedDate": null}, {"oid": "f34d1195ea7ca3d51a5d3f0b4e7d149ef20c3f3e", "committedDate": "2020-10-08 07:28:32 +0200", "message": "NMS-12800: Drop flows with negative duration"}, {"oid": "7dcfa4927ebf40e48a1f62ad6837f9cb99ea57e6", "committedDate": "2021-01-15 11:20:53 +0100", "message": "NMS-13088: Adapt invalid flows instead of dropping (#3261)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUxODQ1Nw==", "url": "https://github.com/OpenNMS/opennms/pull/2903#discussion_r397518457", "body": "Make this a resource, too.", "bodyText": "Make this a resource, too.", "bodyHTML": "<p dir=\"auto\">Make this a resource, too.</p>", "author": "fooker", "createdAt": "2020-03-24T23:16:37Z", "path": "features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow9/Netflow9TestData.java", "diffHunk": "@@ -0,0 +1,311 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+\n+package org.opennms.netmgt.telemetry.protocols.netflow.adapter.netflow9;\n+\n+// Generated using protobuf json utils.\n+public interface Netflow9TestData {\n+\n+    String[] Netflow9Message = {", "originalCommit": "e388d89b283f332b44cf6614f61985d9f9c2c420", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "36b00350ef2a7a091f87639d723466f4b9e83b84", "changed_code": [{"header": "diff --git a/features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow9/Netflow9TestData.java b/features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow9/Netflow9TestData.java\ndeleted file mode 100644\nindex 993f6fbf114..00000000000\n--- a/features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow9/Netflow9TestData.java\n+++ /dev/null\n", "chunk": "@@ -1,311 +0,0 @@\n-/*******************************************************************************\n- * This file is part of OpenNMS(R).\n- *\n- * Copyright (C) 2020 The OpenNMS Group, Inc.\n- * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n- *\n- * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n- *\n- * OpenNMS(R) is free software: you can redistribute it and/or modify\n- * it under the terms of the GNU Affero General Public License as published\n- * by the Free Software Foundation, either version 3 of the License,\n- * or (at your option) any later version.\n- *\n- * OpenNMS(R) is distributed in the hope that it will be useful,\n- * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n- * GNU Affero General Public License for more details.\n- *\n- * You should have received a copy of the GNU Affero General Public License\n- * along with OpenNMS(R).  If not, see:\n- *      http://www.gnu.org/licenses/\n- *\n- * For more information contact:\n- *     OpenNMS(R) Licensing <license@opennms.org>\n- *     http://www.opennms.org/\n- *     http://www.opennms.com/\n- *******************************************************************************/\n-\n-package org.opennms.netmgt.telemetry.protocols.netflow.adapter.netflow9;\n-\n-// Generated using protobuf json utils.\n-public interface Netflow9TestData {\n-\n-    String[] Netflow9Message = {\n-            \"{\\n\" +\n-                    \"  \\\"timestamp\\\": \\\"1444331070000\\\",\\n\" +\n-                    \"  \\\"numBytes\\\": \\\"76\\\",\\n\" +\n-                    \"  \\\"dstAddress\\\": \\\"172.16.32.248\\\",\\n\" +\n-                    \"  \\\"dstPort\\\": 123,\\n\" +\n-                    \"  \\\"deltaSwitched\\\": \\\"1444331026140\\\",\\n\" +\n-                    \"  \\\"firstSwitched\\\": \\\"1444331026140\\\",\\n\" +\n-                    \"  \\\"lastSwitched\\\": \\\"1444331026141\\\",\\n\" +\n-                    \"  \\\"numFlowRecords\\\": 7,\\n\" +\n-                    \"  \\\"numPackets\\\": \\\"1\\\",\\n\" +\n-                    \"  \\\"flowSeqNum\\\": \\\"1\\\",\\n\" +\n-                    \"  \\\"inputSnmpIfindex\\\": 0,\\n\" +\n-                    \"  \\\"outputSnmpIfindex\\\": 0,\\n\" +\n-                    \"  \\\"ipProtocolVersion\\\": 4,\\n\" +\n-                    \"  \\\"protocol\\\": 17,\\n\" +\n-                    \"  \\\"srcAddress\\\": \\\"172.16.32.100\\\",\\n\" +\n-                    \"  \\\"srcPort\\\": 123,\\n\" +\n-                    \"  \\\"tcpFlags\\\": 0,\\n\" +\n-                    \"  \\\"tos\\\": 0,\\n\" +\n-                    \"  \\\"netflowVersion\\\": \\\"V9\\\",\\n\" +\n-                    \"  \\\"nodeIdentifier\\\": \\\"0\\\"\\n\" +\n-                    \"}\",\n-            \"{\\n\" +\n-                    \"  \\\"timestamp\\\": \\\"1444331070000\\\",\\n\" +\n-                    \"  \\\"numBytes\\\": \\\"76\\\",\\n\" +\n-                    \"  \\\"dstAddress\\\": \\\"172.16.32.100\\\",\\n\" +\n-                    \"  \\\"dstPort\\\": 123,\\n\" +\n-                    \"  \\\"deltaSwitched\\\": \\\"1444331026140\\\",\\n\" +\n-                    \"  \\\"firstSwitched\\\": \\\"1444331026140\\\",\\n\" +\n-                    \"  \\\"lastSwitched\\\": \\\"1444331026141\\\",\\n\" +\n-                    \"  \\\"numFlowRecords\\\": 7,\\n\" +\n-                    \"  \\\"numPackets\\\": \\\"1\\\",\\n\" +\n-                    \"  \\\"flowSeqNum\\\": \\\"1\\\",\\n\" +\n-                    \"  \\\"inputSnmpIfindex\\\": 0,\\n\" +\n-                    \"  \\\"outputSnmpIfindex\\\": 0,\\n\" +\n-                    \"  \\\"ipProtocolVersion\\\": 4,\\n\" +\n-                    \"  \\\"protocol\\\": 17,\\n\" +\n-                    \"  \\\"srcAddress\\\": \\\"172.16.32.248\\\",\\n\" +\n-                    \"  \\\"srcPort\\\": 123,\\n\" +\n-                    \"  \\\"tcpFlags\\\": 0,\\n\" +\n-                    \"  \\\"tos\\\": 0,\\n\" +\n-                    \"  \\\"netflowVersion\\\": \\\"V9\\\",\\n\" +\n-                    \"  \\\"nodeIdentifier\\\": \\\"0\\\"\\n\" +\n-                    \"}\",\n-            \"{\\n\" +\n-                    \"  \\\"timestamp\\\": \\\"1444331070000\\\",\\n\" +\n-                    \"  \\\"numBytes\\\": \\\"76\\\",\\n\" +\n-                    \"  \\\"dstAddress\\\": \\\"172.16.32.201\\\",\\n\" +\n-                    \"  \\\"dstPort\\\": 123,\\n\" +\n-                    \"  \\\"deltaSwitched\\\": \\\"1444331031813\\\",\\n\" +\n-                    \"  \\\"firstSwitched\\\": \\\"1444331031813\\\",\\n\" +\n-                    \"  \\\"lastSwitched\\\": \\\"1444331031814\\\",\\n\" +\n-                    \"  \\\"numFlowRecords\\\": 7,\\n\" +\n-                    \"  \\\"numPackets\\\": \\\"1\\\",\\n\" +\n-                    \"  \\\"flowSeqNum\\\": \\\"1\\\",\\n\" +\n-                    \"  \\\"inputSnmpIfindex\\\": 0,\\n\" +\n-                    \"  \\\"outputSnmpIfindex\\\": 0,\\n\" +\n-                    \"  \\\"ipProtocolVersion\\\": 4,\\n\" +\n-                    \"  \\\"protocol\\\": 17,\\n\" +\n-                    \"  \\\"srcAddress\\\": \\\"172.16.32.100\\\",\\n\" +\n-                    \"  \\\"srcPort\\\": 123,\\n\" +\n-                    \"  \\\"tcpFlags\\\": 0,\\n\" +\n-                    \"  \\\"tos\\\": 0,\\n\" +\n-                    \"  \\\"netflowVersion\\\": \\\"V9\\\",\\n\" +\n-                    \"  \\\"nodeIdentifier\\\": \\\"0\\\"\\n\" +\n-                    \"}\",\n-            \"{\\n\" +\n-                    \"  \\\"timestamp\\\": \\\"1444331070000\\\",\\n\" +\n-                    \"  \\\"numBytes\\\": \\\"76\\\",\\n\" +\n-                    \"  \\\"dstAddress\\\": \\\"172.16.32.100\\\",\\n\" +\n-                    \"  \\\"dstPort\\\": 123,\\n\" +\n-                    \"  \\\"deltaSwitched\\\": \\\"1444331031813\\\",\\n\" +\n-                    \"  \\\"firstSwitched\\\": \\\"1444331031813\\\",\\n\" +\n-                    \"  \\\"lastSwitched\\\": \\\"1444331031814\\\",\\n\" +\n-                    \"  \\\"numFlowRecords\\\": 7,\\n\" +\n-                    \"  \\\"numPackets\\\": \\\"1\\\",\\n\" +\n-                    \"  \\\"flowSeqNum\\\": \\\"1\\\",\\n\" +\n-                    \"  \\\"inputSnmpIfindex\\\": 0,\\n\" +\n-                    \"  \\\"outputSnmpIfindex\\\": 0,\\n\" +\n-                    \"  \\\"ipProtocolVersion\\\": 4,\\n\" +\n-                    \"  \\\"protocol\\\": 17,\\n\" +\n-                    \"  \\\"srcAddress\\\": \\\"172.16.32.201\\\",\\n\" +\n-                    \"  \\\"srcPort\\\": 123,\\n\" +\n-                    \"  \\\"tcpFlags\\\": 0,\\n\" +\n-                    \"  \\\"tos\\\": 0,\\n\" +\n-                    \"  \\\"netflowVersion\\\": \\\"V9\\\",\\n\" +\n-                    \"  \\\"nodeIdentifier\\\": \\\"0\\\"\\n\" +\n-                    \"}\",\n-            \"{\\n\" +\n-                    \"  \\\"timestamp\\\": \\\"1444331070000\\\",\\n\" +\n-                    \"  \\\"numBytes\\\": \\\"76\\\",\\n\" +\n-                    \"  \\\"dstAddress\\\": \\\"172.16.32.202\\\",\\n\" +\n-                    \"  \\\"dstPort\\\": 123,\\n\" +\n-                    \"  \\\"deltaSwitched\\\": \\\"1444331035958\\\",\\n\" +\n-                    \"  \\\"firstSwitched\\\": \\\"1444331035958\\\",\\n\" +\n-                    \"  \\\"lastSwitched\\\": \\\"1444331035958\\\",\\n\" +\n-                    \"  \\\"numFlowRecords\\\": 7,\\n\" +\n-                    \"  \\\"numPackets\\\": \\\"1\\\",\\n\" +\n-                    \"  \\\"flowSeqNum\\\": \\\"1\\\",\\n\" +\n-                    \"  \\\"inputSnmpIfindex\\\": 0,\\n\" +\n-                    \"  \\\"outputSnmpIfindex\\\": 0,\\n\" +\n-                    \"  \\\"ipProtocolVersion\\\": 4,\\n\" +\n-                    \"  \\\"protocol\\\": 17,\\n\" +\n-                    \"  \\\"srcAddress\\\": \\\"172.16.32.100\\\",\\n\" +\n-                    \"  \\\"srcPort\\\": 123,\\n\" +\n-                    \"  \\\"tcpFlags\\\": 0,\\n\" +\n-                    \"  \\\"tos\\\": 0,\\n\" +\n-                    \"  \\\"netflowVersion\\\": \\\"V9\\\",\\n\" +\n-                    \"  \\\"nodeIdentifier\\\": \\\"0\\\"\\n\" +\n-                    \"}\",\n-            \"{\\n\" +\n-                    \"  \\\"timestamp\\\": \\\"1444331070000\\\",\\n\" +\n-                    \"  \\\"numBytes\\\": \\\"76\\\",\\n\" +\n-                    \"  \\\"dstAddress\\\": \\\"172.16.32.100\\\",\\n\" +\n-                    \"  \\\"dstPort\\\": 123,\\n\" +\n-                    \"  \\\"deltaSwitched\\\": \\\"1444331035958\\\",\\n\" +\n-                    \"  \\\"firstSwitched\\\": \\\"1444331035958\\\",\\n\" +\n-                    \"  \\\"lastSwitched\\\": \\\"1444331035958\\\",\\n\" +\n-                    \"  \\\"numFlowRecords\\\": 7,\\n\" +\n-                    \"  \\\"numPackets\\\": \\\"1\\\",\\n\" +\n-                    \"  \\\"flowSeqNum\\\": \\\"1\\\",\\n\" +\n-                    \"  \\\"inputSnmpIfindex\\\": 0,\\n\" +\n-                    \"  \\\"outputSnmpIfindex\\\": 0,\\n\" +\n-                    \"  \\\"ipProtocolVersion\\\": 4,\\n\" +\n-                    \"  \\\"protocol\\\": 17,\\n\" +\n-                    \"  \\\"srcAddress\\\": \\\"172.16.32.202\\\",\\n\" +\n-                    \"  \\\"srcPort\\\": 123,\\n\" +\n-                    \"  \\\"tcpFlags\\\": 0,\\n\" +\n-                    \"  \\\"tos\\\": 0,\\n\" +\n-                    \"  \\\"netflowVersion\\\": \\\"V9\\\",\\n\" +\n-                    \"  \\\"nodeIdentifier\\\": \\\"0\\\"\\n\" +\n-                    \"}\",\n-            \"{\\n\" +\n-                    \"  \\\"timestamp\\\": \\\"1444331070000\\\",\\n\" +\n-                    \"  \\\"numBytes\\\": \\\"672\\\",\\n\" +\n-                    \"  \\\"dstAddress\\\": \\\"ff02:0:0:0:0:0:0:1\\\",\\n\" +\n-                    \"  \\\"dstPort\\\": 34304,\\n\" +\n-                    \"  \\\"deltaSwitched\\\": \\\"1444331027819\\\",\\n\" +\n-                    \"  \\\"firstSwitched\\\": \\\"1444331027819\\\",\\n\" +\n-                    \"  \\\"lastSwitched\\\": \\\"1444331065900\\\",\\n\" +\n-                    \"  \\\"numFlowRecords\\\": 7,\\n\" +\n-                    \"  \\\"numPackets\\\": \\\"7\\\",\\n\" +\n-                    \"  \\\"flowSeqNum\\\": \\\"1\\\",\\n\" +\n-                    \"  \\\"inputSnmpIfindex\\\": 0,\\n\" +\n-                    \"  \\\"outputSnmpIfindex\\\": 0,\\n\" +\n-                    \"  \\\"ipProtocolVersion\\\": 6,\\n\" +\n-                    \"  \\\"protocol\\\": 58,\\n\" +\n-                    \"  \\\"srcAddress\\\": \\\"fe80:0:0:0:20c:29ff:fe83:3b6e\\\",\\n\" +\n-                    \"  \\\"srcPort\\\": 0,\\n\" +\n-                    \"  \\\"tcpFlags\\\": 0,\\n\" +\n-                    \"  \\\"tos\\\": 0,\\n\" +\n-                    \"  \\\"netflowVersion\\\": \\\"V9\\\",\\n\" +\n-                    \"  \\\"nodeIdentifier\\\": \\\"0\\\"\\n\" +\n-                    \"}\",\n-            \"{\\n\" +\n-                    \"  \\\"timestamp\\\": \\\"1524773528000\\\",\\n\" +\n-                    \"  \\\"numBytes\\\": \\\"80\\\",\\n\" +\n-                    \"  \\\"dstAddress\\\": \\\"224.0.0.102\\\",\\n\" +\n-                    \"  \\\"dstAs\\\": \\\"0\\\",\\n\" +\n-                    \"  \\\"dstPort\\\": 1985,\\n\" +\n-                    \"  \\\"deltaSwitched\\\": \\\"1524773515000\\\",\\n\" +\n-                    \"  \\\"firstSwitched\\\": \\\"1524773515000\\\",\\n\" +\n-                    \"  \\\"lastSwitched\\\": \\\"1524773515000\\\",\\n\" +\n-                    \"  \\\"numFlowRecords\\\": 5,\\n\" +\n-                    \"  \\\"numPackets\\\": \\\"1\\\",\\n\" +\n-                    \"  \\\"flowSeqNum\\\": \\\"1238343\\\",\\n\" +\n-                    \"  \\\"inputSnmpIfindex\\\": 369098755,\\n\" +\n-                    \"  \\\"outputSnmpIfindex\\\": 0,\\n\" +\n-                    \"  \\\"nextHopAddress\\\": \\\"0.0.0.0\\\",\\n\" +\n-                    \"  \\\"protocol\\\": 17,\\n\" +\n-                    \"  \\\"srcAddress\\\": \\\"10.1.21.131\\\",\\n\" +\n-                    \"  \\\"srcAs\\\": \\\"0\\\",\\n\" +\n-                    \"  \\\"srcPort\\\": 1985,\\n\" +\n-                    \"  \\\"tcpFlags\\\": 0,\\n\" +\n-                    \"  \\\"tos\\\": 192,\\n\" +\n-                    \"  \\\"netflowVersion\\\": \\\"V9\\\",\\n\" +\n-                    \"  \\\"nodeIdentifier\\\": \\\"256\\\"\\n\" +\n-                    \"}\",\n-            \"{\\n\" +\n-                    \"  \\\"timestamp\\\": \\\"1524773528000\\\",\\n\" +\n-                    \"  \\\"numBytes\\\": \\\"80\\\",\\n\" +\n-                    \"  \\\"dstAddress\\\": \\\"224.0.0.102\\\",\\n\" +\n-                    \"  \\\"dstAs\\\": \\\"0\\\",\\n\" +\n-                    \"  \\\"dstPort\\\": 1985,\\n\" +\n-                    \"  \\\"deltaSwitched\\\": \\\"1524773515000\\\",\\n\" +\n-                    \"  \\\"firstSwitched\\\": \\\"1524773515000\\\",\\n\" +\n-                    \"  \\\"lastSwitched\\\": \\\"1524773515000\\\",\\n\" +\n-                    \"  \\\"numFlowRecords\\\": 5,\\n\" +\n-                    \"  \\\"numPackets\\\": \\\"1\\\",\\n\" +\n-                    \"  \\\"flowSeqNum\\\": \\\"1238343\\\",\\n\" +\n-                    \"  \\\"inputSnmpIfindex\\\": 369098754,\\n\" +\n-                    \"  \\\"outputSnmpIfindex\\\": 0,\\n\" +\n-                    \"  \\\"nextHopAddress\\\": \\\"0.0.0.0\\\",\\n\" +\n-                    \"  \\\"protocol\\\": 17,\\n\" +\n-                    \"  \\\"srcAddress\\\": \\\"10.1.99.3\\\",\\n\" +\n-                    \"  \\\"srcAs\\\": \\\"0\\\",\\n\" +\n-                    \"  \\\"srcPort\\\": 1985,\\n\" +\n-                    \"  \\\"tcpFlags\\\": 0,\\n\" +\n-                    \"  \\\"tos\\\": 192,\\n\" +\n-                    \"  \\\"netflowVersion\\\": \\\"V9\\\",\\n\" +\n-                    \"  \\\"nodeIdentifier\\\": \\\"256\\\"\\n\" +\n-                    \"}\",\n-            \"{\\n\" +\n-                    \"  \\\"timestamp\\\": \\\"1524773528000\\\",\\n\" +\n-                    \"  \\\"numBytes\\\": \\\"78\\\",\\n\" +\n-                    \"  \\\"dstAddress\\\": \\\"10.1.104.63\\\",\\n\" +\n-                    \"  \\\"dstAs\\\": \\\"0\\\",\\n\" +\n-                    \"  \\\"dstPort\\\": 137,\\n\" +\n-                    \"  \\\"deltaSwitched\\\": \\\"1524773523000\\\",\\n\" +\n-                    \"  \\\"firstSwitched\\\": \\\"1524773523000\\\",\\n\" +\n-                    \"  \\\"lastSwitched\\\": \\\"1524773523000\\\",\\n\" +\n-                    \"  \\\"numFlowRecords\\\": 5,\\n\" +\n-                    \"  \\\"numPackets\\\": \\\"1\\\",\\n\" +\n-                    \"  \\\"flowSeqNum\\\": \\\"1238343\\\",\\n\" +\n-                    \"  \\\"inputSnmpIfindex\\\": 369098754,\\n\" +\n-                    \"  \\\"outputSnmpIfindex\\\": 0,\\n\" +\n-                    \"  \\\"nextHopAddress\\\": \\\"0.0.0.0\\\",\\n\" +\n-                    \"  \\\"protocol\\\": 17,\\n\" +\n-                    \"  \\\"srcAddress\\\": \\\"10.1.104.41\\\",\\n\" +\n-                    \"  \\\"srcAs\\\": \\\"0\\\",\\n\" +\n-                    \"  \\\"srcPort\\\": 137,\\n\" +\n-                    \"  \\\"tcpFlags\\\": 0,\\n\" +\n-                    \"  \\\"tos\\\": 0,\\n\" +\n-                    \"  \\\"netflowVersion\\\": \\\"V9\\\",\\n\" +\n-                    \"  \\\"nodeIdentifier\\\": \\\"256\\\"\\n\" +\n-                    \"}\\n\",\n-            \"{\\n\" +\n-                    \"  \\\"timestamp\\\": \\\"1524773528000\\\",\\n\" +\n-                    \"  \\\"numBytes\\\": \\\"215\\\",\\n\" +\n-                    \"  \\\"dstAddress\\\": \\\"239.140.14.55\\\",\\n\" +\n-                    \"  \\\"dstAs\\\": \\\"0\\\",\\n\" +\n-                    \"  \\\"dstPort\\\": 5405,\\n\" +\n-                    \"  \\\"deltaSwitched\\\": \\\"1524773525000\\\",\\n\" +\n-                    \"  \\\"firstSwitched\\\": \\\"1524773525000\\\",\\n\" +\n-                    \"  \\\"lastSwitched\\\": \\\"1524773525000\\\",\\n\" +\n-                    \"  \\\"numFlowRecords\\\": 5,\\n\" +\n-                    \"  \\\"numPackets\\\": \\\"1\\\",\\n\" +\n-                    \"  \\\"flowSeqNum\\\": \\\"1238343\\\",\\n\" +\n-                    \"  \\\"inputSnmpIfindex\\\": 369098755,\\n\" +\n-                    \"  \\\"outputSnmpIfindex\\\": 0,\\n\" +\n-                    \"  \\\"nextHopAddress\\\": \\\"0.0.0.0\\\",\\n\" +\n-                    \"  \\\"protocol\\\": 17,\\n\" +\n-                    \"  \\\"srcAddress\\\": \\\"159.140.62.8\\\",\\n\" +\n-                    \"  \\\"srcAs\\\": \\\"0\\\",\\n\" +\n-                    \"  \\\"srcPort\\\": 5404,\\n\" +\n-                    \"  \\\"tcpFlags\\\": 0,\\n\" +\n-                    \"  \\\"tos\\\": 0,\\n\" +\n-                    \"  \\\"netflowVersion\\\": \\\"V9\\\",\\n\" +\n-                    \"  \\\"nodeIdentifier\\\": \\\"256\\\"\\n\" +\n-                    \"}\",\n-            \"{\\n\" +\n-                    \"  \\\"timestamp\\\": \\\"1524773528000\\\",\\n\" +\n-                    \"  \\\"numBytes\\\": \\\"156\\\",\\n\" +\n-                    \"  \\\"dstAddress\\\": \\\"10.1.20.127\\\",\\n\" +\n-                    \"  \\\"dstAs\\\": \\\"0\\\",\\n\" +\n-                    \"  \\\"dstPort\\\": 137,\\n\" +\n-                    \"  \\\"deltaSwitched\\\": \\\"1524773519000\\\",\\n\" +\n-                    \"  \\\"firstSwitched\\\": \\\"1524773519000\\\",\\n\" +\n-                    \"  \\\"lastSwitched\\\": \\\"1524773527000\\\",\\n\" +\n-                    \"  \\\"numFlowRecords\\\": 5,\\n\" +\n-                    \"  \\\"numPackets\\\": \\\"2\\\",\\n\" +\n-                    \"  \\\"flowSeqNum\\\": \\\"1238343\\\",\\n\" +\n-                    \"  \\\"inputSnmpIfindex\\\": 369098754,\\n\" +\n-                    \"  \\\"outputSnmpIfindex\\\": 0,\\n\" +\n-                    \"  \\\"nextHopAddress\\\": \\\"0.0.0.0\\\",\\n\" +\n-                    \"  \\\"protocol\\\": 17,\\n\" +\n-                    \"  \\\"srcAddress\\\": \\\"10.1.20.85\\\",\\n\" +\n-                    \"  \\\"srcAs\\\": \\\"0\\\",\\n\" +\n-                    \"  \\\"srcPort\\\": 137,\\n\" +\n-                    \"  \\\"tcpFlags\\\": 0,\\n\" +\n-                    \"  \\\"tos\\\": 0,\\n\" +\n-                    \"  \\\"netflowVersion\\\": \\\"V9\\\",\\n\" +\n-                    \"  \\\"nodeIdentifier\\\": \\\"256\\\"\\n\" +\n-                    \"}\"\n-\n-    };\n-}\n", "next_change": null}]}, "revised_code_in_main": {"commit": "3352dcced0424e52de475b87840f05dff94fbec4", "changed_code": [{"header": "diff --git a/features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow9/Netflow9TestData.java b/features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow9/Netflow9TestData.java\ndeleted file mode 100644\nindex 993f6fbf114..00000000000\n--- a/features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow9/Netflow9TestData.java\n+++ /dev/null\n", "chunk": "@@ -1,311 +0,0 @@\n-/*******************************************************************************\n- * This file is part of OpenNMS(R).\n- *\n- * Copyright (C) 2020 The OpenNMS Group, Inc.\n- * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n- *\n- * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n- *\n- * OpenNMS(R) is free software: you can redistribute it and/or modify\n- * it under the terms of the GNU Affero General Public License as published\n- * by the Free Software Foundation, either version 3 of the License,\n- * or (at your option) any later version.\n- *\n- * OpenNMS(R) is distributed in the hope that it will be useful,\n- * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n- * GNU Affero General Public License for more details.\n- *\n- * You should have received a copy of the GNU Affero General Public License\n- * along with OpenNMS(R).  If not, see:\n- *      http://www.gnu.org/licenses/\n- *\n- * For more information contact:\n- *     OpenNMS(R) Licensing <license@opennms.org>\n- *     http://www.opennms.org/\n- *     http://www.opennms.com/\n- *******************************************************************************/\n-\n-package org.opennms.netmgt.telemetry.protocols.netflow.adapter.netflow9;\n-\n-// Generated using protobuf json utils.\n-public interface Netflow9TestData {\n-\n-    String[] Netflow9Message = {\n-            \"{\\n\" +\n-                    \"  \\\"timestamp\\\": \\\"1444331070000\\\",\\n\" +\n-                    \"  \\\"numBytes\\\": \\\"76\\\",\\n\" +\n-                    \"  \\\"dstAddress\\\": \\\"172.16.32.248\\\",\\n\" +\n-                    \"  \\\"dstPort\\\": 123,\\n\" +\n-                    \"  \\\"deltaSwitched\\\": \\\"1444331026140\\\",\\n\" +\n-                    \"  \\\"firstSwitched\\\": \\\"1444331026140\\\",\\n\" +\n-                    \"  \\\"lastSwitched\\\": \\\"1444331026141\\\",\\n\" +\n-                    \"  \\\"numFlowRecords\\\": 7,\\n\" +\n-                    \"  \\\"numPackets\\\": \\\"1\\\",\\n\" +\n-                    \"  \\\"flowSeqNum\\\": \\\"1\\\",\\n\" +\n-                    \"  \\\"inputSnmpIfindex\\\": 0,\\n\" +\n-                    \"  \\\"outputSnmpIfindex\\\": 0,\\n\" +\n-                    \"  \\\"ipProtocolVersion\\\": 4,\\n\" +\n-                    \"  \\\"protocol\\\": 17,\\n\" +\n-                    \"  \\\"srcAddress\\\": \\\"172.16.32.100\\\",\\n\" +\n-                    \"  \\\"srcPort\\\": 123,\\n\" +\n-                    \"  \\\"tcpFlags\\\": 0,\\n\" +\n-                    \"  \\\"tos\\\": 0,\\n\" +\n-                    \"  \\\"netflowVersion\\\": \\\"V9\\\",\\n\" +\n-                    \"  \\\"nodeIdentifier\\\": \\\"0\\\"\\n\" +\n-                    \"}\",\n-            \"{\\n\" +\n-                    \"  \\\"timestamp\\\": \\\"1444331070000\\\",\\n\" +\n-                    \"  \\\"numBytes\\\": \\\"76\\\",\\n\" +\n-                    \"  \\\"dstAddress\\\": \\\"172.16.32.100\\\",\\n\" +\n-                    \"  \\\"dstPort\\\": 123,\\n\" +\n-                    \"  \\\"deltaSwitched\\\": \\\"1444331026140\\\",\\n\" +\n-                    \"  \\\"firstSwitched\\\": \\\"1444331026140\\\",\\n\" +\n-                    \"  \\\"lastSwitched\\\": \\\"1444331026141\\\",\\n\" +\n-                    \"  \\\"numFlowRecords\\\": 7,\\n\" +\n-                    \"  \\\"numPackets\\\": \\\"1\\\",\\n\" +\n-                    \"  \\\"flowSeqNum\\\": \\\"1\\\",\\n\" +\n-                    \"  \\\"inputSnmpIfindex\\\": 0,\\n\" +\n-                    \"  \\\"outputSnmpIfindex\\\": 0,\\n\" +\n-                    \"  \\\"ipProtocolVersion\\\": 4,\\n\" +\n-                    \"  \\\"protocol\\\": 17,\\n\" +\n-                    \"  \\\"srcAddress\\\": \\\"172.16.32.248\\\",\\n\" +\n-                    \"  \\\"srcPort\\\": 123,\\n\" +\n-                    \"  \\\"tcpFlags\\\": 0,\\n\" +\n-                    \"  \\\"tos\\\": 0,\\n\" +\n-                    \"  \\\"netflowVersion\\\": \\\"V9\\\",\\n\" +\n-                    \"  \\\"nodeIdentifier\\\": \\\"0\\\"\\n\" +\n-                    \"}\",\n-            \"{\\n\" +\n-                    \"  \\\"timestamp\\\": \\\"1444331070000\\\",\\n\" +\n-                    \"  \\\"numBytes\\\": \\\"76\\\",\\n\" +\n-                    \"  \\\"dstAddress\\\": \\\"172.16.32.201\\\",\\n\" +\n-                    \"  \\\"dstPort\\\": 123,\\n\" +\n-                    \"  \\\"deltaSwitched\\\": \\\"1444331031813\\\",\\n\" +\n-                    \"  \\\"firstSwitched\\\": \\\"1444331031813\\\",\\n\" +\n-                    \"  \\\"lastSwitched\\\": \\\"1444331031814\\\",\\n\" +\n-                    \"  \\\"numFlowRecords\\\": 7,\\n\" +\n-                    \"  \\\"numPackets\\\": \\\"1\\\",\\n\" +\n-                    \"  \\\"flowSeqNum\\\": \\\"1\\\",\\n\" +\n-                    \"  \\\"inputSnmpIfindex\\\": 0,\\n\" +\n-                    \"  \\\"outputSnmpIfindex\\\": 0,\\n\" +\n-                    \"  \\\"ipProtocolVersion\\\": 4,\\n\" +\n-                    \"  \\\"protocol\\\": 17,\\n\" +\n-                    \"  \\\"srcAddress\\\": \\\"172.16.32.100\\\",\\n\" +\n-                    \"  \\\"srcPort\\\": 123,\\n\" +\n-                    \"  \\\"tcpFlags\\\": 0,\\n\" +\n-                    \"  \\\"tos\\\": 0,\\n\" +\n-                    \"  \\\"netflowVersion\\\": \\\"V9\\\",\\n\" +\n-                    \"  \\\"nodeIdentifier\\\": \\\"0\\\"\\n\" +\n-                    \"}\",\n-            \"{\\n\" +\n-                    \"  \\\"timestamp\\\": \\\"1444331070000\\\",\\n\" +\n-                    \"  \\\"numBytes\\\": \\\"76\\\",\\n\" +\n-                    \"  \\\"dstAddress\\\": \\\"172.16.32.100\\\",\\n\" +\n-                    \"  \\\"dstPort\\\": 123,\\n\" +\n-                    \"  \\\"deltaSwitched\\\": \\\"1444331031813\\\",\\n\" +\n-                    \"  \\\"firstSwitched\\\": \\\"1444331031813\\\",\\n\" +\n-                    \"  \\\"lastSwitched\\\": \\\"1444331031814\\\",\\n\" +\n-                    \"  \\\"numFlowRecords\\\": 7,\\n\" +\n-                    \"  \\\"numPackets\\\": \\\"1\\\",\\n\" +\n-                    \"  \\\"flowSeqNum\\\": \\\"1\\\",\\n\" +\n-                    \"  \\\"inputSnmpIfindex\\\": 0,\\n\" +\n-                    \"  \\\"outputSnmpIfindex\\\": 0,\\n\" +\n-                    \"  \\\"ipProtocolVersion\\\": 4,\\n\" +\n-                    \"  \\\"protocol\\\": 17,\\n\" +\n-                    \"  \\\"srcAddress\\\": \\\"172.16.32.201\\\",\\n\" +\n-                    \"  \\\"srcPort\\\": 123,\\n\" +\n-                    \"  \\\"tcpFlags\\\": 0,\\n\" +\n-                    \"  \\\"tos\\\": 0,\\n\" +\n-                    \"  \\\"netflowVersion\\\": \\\"V9\\\",\\n\" +\n-                    \"  \\\"nodeIdentifier\\\": \\\"0\\\"\\n\" +\n-                    \"}\",\n-            \"{\\n\" +\n-                    \"  \\\"timestamp\\\": \\\"1444331070000\\\",\\n\" +\n-                    \"  \\\"numBytes\\\": \\\"76\\\",\\n\" +\n-                    \"  \\\"dstAddress\\\": \\\"172.16.32.202\\\",\\n\" +\n-                    \"  \\\"dstPort\\\": 123,\\n\" +\n-                    \"  \\\"deltaSwitched\\\": \\\"1444331035958\\\",\\n\" +\n-                    \"  \\\"firstSwitched\\\": \\\"1444331035958\\\",\\n\" +\n-                    \"  \\\"lastSwitched\\\": \\\"1444331035958\\\",\\n\" +\n-                    \"  \\\"numFlowRecords\\\": 7,\\n\" +\n-                    \"  \\\"numPackets\\\": \\\"1\\\",\\n\" +\n-                    \"  \\\"flowSeqNum\\\": \\\"1\\\",\\n\" +\n-                    \"  \\\"inputSnmpIfindex\\\": 0,\\n\" +\n-                    \"  \\\"outputSnmpIfindex\\\": 0,\\n\" +\n-                    \"  \\\"ipProtocolVersion\\\": 4,\\n\" +\n-                    \"  \\\"protocol\\\": 17,\\n\" +\n-                    \"  \\\"srcAddress\\\": \\\"172.16.32.100\\\",\\n\" +\n-                    \"  \\\"srcPort\\\": 123,\\n\" +\n-                    \"  \\\"tcpFlags\\\": 0,\\n\" +\n-                    \"  \\\"tos\\\": 0,\\n\" +\n-                    \"  \\\"netflowVersion\\\": \\\"V9\\\",\\n\" +\n-                    \"  \\\"nodeIdentifier\\\": \\\"0\\\"\\n\" +\n-                    \"}\",\n-            \"{\\n\" +\n-                    \"  \\\"timestamp\\\": \\\"1444331070000\\\",\\n\" +\n-                    \"  \\\"numBytes\\\": \\\"76\\\",\\n\" +\n-                    \"  \\\"dstAddress\\\": \\\"172.16.32.100\\\",\\n\" +\n-                    \"  \\\"dstPort\\\": 123,\\n\" +\n-                    \"  \\\"deltaSwitched\\\": \\\"1444331035958\\\",\\n\" +\n-                    \"  \\\"firstSwitched\\\": \\\"1444331035958\\\",\\n\" +\n-                    \"  \\\"lastSwitched\\\": \\\"1444331035958\\\",\\n\" +\n-                    \"  \\\"numFlowRecords\\\": 7,\\n\" +\n-                    \"  \\\"numPackets\\\": \\\"1\\\",\\n\" +\n-                    \"  \\\"flowSeqNum\\\": \\\"1\\\",\\n\" +\n-                    \"  \\\"inputSnmpIfindex\\\": 0,\\n\" +\n-                    \"  \\\"outputSnmpIfindex\\\": 0,\\n\" +\n-                    \"  \\\"ipProtocolVersion\\\": 4,\\n\" +\n-                    \"  \\\"protocol\\\": 17,\\n\" +\n-                    \"  \\\"srcAddress\\\": \\\"172.16.32.202\\\",\\n\" +\n-                    \"  \\\"srcPort\\\": 123,\\n\" +\n-                    \"  \\\"tcpFlags\\\": 0,\\n\" +\n-                    \"  \\\"tos\\\": 0,\\n\" +\n-                    \"  \\\"netflowVersion\\\": \\\"V9\\\",\\n\" +\n-                    \"  \\\"nodeIdentifier\\\": \\\"0\\\"\\n\" +\n-                    \"}\",\n-            \"{\\n\" +\n-                    \"  \\\"timestamp\\\": \\\"1444331070000\\\",\\n\" +\n-                    \"  \\\"numBytes\\\": \\\"672\\\",\\n\" +\n-                    \"  \\\"dstAddress\\\": \\\"ff02:0:0:0:0:0:0:1\\\",\\n\" +\n-                    \"  \\\"dstPort\\\": 34304,\\n\" +\n-                    \"  \\\"deltaSwitched\\\": \\\"1444331027819\\\",\\n\" +\n-                    \"  \\\"firstSwitched\\\": \\\"1444331027819\\\",\\n\" +\n-                    \"  \\\"lastSwitched\\\": \\\"1444331065900\\\",\\n\" +\n-                    \"  \\\"numFlowRecords\\\": 7,\\n\" +\n-                    \"  \\\"numPackets\\\": \\\"7\\\",\\n\" +\n-                    \"  \\\"flowSeqNum\\\": \\\"1\\\",\\n\" +\n-                    \"  \\\"inputSnmpIfindex\\\": 0,\\n\" +\n-                    \"  \\\"outputSnmpIfindex\\\": 0,\\n\" +\n-                    \"  \\\"ipProtocolVersion\\\": 6,\\n\" +\n-                    \"  \\\"protocol\\\": 58,\\n\" +\n-                    \"  \\\"srcAddress\\\": \\\"fe80:0:0:0:20c:29ff:fe83:3b6e\\\",\\n\" +\n-                    \"  \\\"srcPort\\\": 0,\\n\" +\n-                    \"  \\\"tcpFlags\\\": 0,\\n\" +\n-                    \"  \\\"tos\\\": 0,\\n\" +\n-                    \"  \\\"netflowVersion\\\": \\\"V9\\\",\\n\" +\n-                    \"  \\\"nodeIdentifier\\\": \\\"0\\\"\\n\" +\n-                    \"}\",\n-            \"{\\n\" +\n-                    \"  \\\"timestamp\\\": \\\"1524773528000\\\",\\n\" +\n-                    \"  \\\"numBytes\\\": \\\"80\\\",\\n\" +\n-                    \"  \\\"dstAddress\\\": \\\"224.0.0.102\\\",\\n\" +\n-                    \"  \\\"dstAs\\\": \\\"0\\\",\\n\" +\n-                    \"  \\\"dstPort\\\": 1985,\\n\" +\n-                    \"  \\\"deltaSwitched\\\": \\\"1524773515000\\\",\\n\" +\n-                    \"  \\\"firstSwitched\\\": \\\"1524773515000\\\",\\n\" +\n-                    \"  \\\"lastSwitched\\\": \\\"1524773515000\\\",\\n\" +\n-                    \"  \\\"numFlowRecords\\\": 5,\\n\" +\n-                    \"  \\\"numPackets\\\": \\\"1\\\",\\n\" +\n-                    \"  \\\"flowSeqNum\\\": \\\"1238343\\\",\\n\" +\n-                    \"  \\\"inputSnmpIfindex\\\": 369098755,\\n\" +\n-                    \"  \\\"outputSnmpIfindex\\\": 0,\\n\" +\n-                    \"  \\\"nextHopAddress\\\": \\\"0.0.0.0\\\",\\n\" +\n-                    \"  \\\"protocol\\\": 17,\\n\" +\n-                    \"  \\\"srcAddress\\\": \\\"10.1.21.131\\\",\\n\" +\n-                    \"  \\\"srcAs\\\": \\\"0\\\",\\n\" +\n-                    \"  \\\"srcPort\\\": 1985,\\n\" +\n-                    \"  \\\"tcpFlags\\\": 0,\\n\" +\n-                    \"  \\\"tos\\\": 192,\\n\" +\n-                    \"  \\\"netflowVersion\\\": \\\"V9\\\",\\n\" +\n-                    \"  \\\"nodeIdentifier\\\": \\\"256\\\"\\n\" +\n-                    \"}\",\n-            \"{\\n\" +\n-                    \"  \\\"timestamp\\\": \\\"1524773528000\\\",\\n\" +\n-                    \"  \\\"numBytes\\\": \\\"80\\\",\\n\" +\n-                    \"  \\\"dstAddress\\\": \\\"224.0.0.102\\\",\\n\" +\n-                    \"  \\\"dstAs\\\": \\\"0\\\",\\n\" +\n-                    \"  \\\"dstPort\\\": 1985,\\n\" +\n-                    \"  \\\"deltaSwitched\\\": \\\"1524773515000\\\",\\n\" +\n-                    \"  \\\"firstSwitched\\\": \\\"1524773515000\\\",\\n\" +\n-                    \"  \\\"lastSwitched\\\": \\\"1524773515000\\\",\\n\" +\n-                    \"  \\\"numFlowRecords\\\": 5,\\n\" +\n-                    \"  \\\"numPackets\\\": \\\"1\\\",\\n\" +\n-                    \"  \\\"flowSeqNum\\\": \\\"1238343\\\",\\n\" +\n-                    \"  \\\"inputSnmpIfindex\\\": 369098754,\\n\" +\n-                    \"  \\\"outputSnmpIfindex\\\": 0,\\n\" +\n-                    \"  \\\"nextHopAddress\\\": \\\"0.0.0.0\\\",\\n\" +\n-                    \"  \\\"protocol\\\": 17,\\n\" +\n-                    \"  \\\"srcAddress\\\": \\\"10.1.99.3\\\",\\n\" +\n-                    \"  \\\"srcAs\\\": \\\"0\\\",\\n\" +\n-                    \"  \\\"srcPort\\\": 1985,\\n\" +\n-                    \"  \\\"tcpFlags\\\": 0,\\n\" +\n-                    \"  \\\"tos\\\": 192,\\n\" +\n-                    \"  \\\"netflowVersion\\\": \\\"V9\\\",\\n\" +\n-                    \"  \\\"nodeIdentifier\\\": \\\"256\\\"\\n\" +\n-                    \"}\",\n-            \"{\\n\" +\n-                    \"  \\\"timestamp\\\": \\\"1524773528000\\\",\\n\" +\n-                    \"  \\\"numBytes\\\": \\\"78\\\",\\n\" +\n-                    \"  \\\"dstAddress\\\": \\\"10.1.104.63\\\",\\n\" +\n-                    \"  \\\"dstAs\\\": \\\"0\\\",\\n\" +\n-                    \"  \\\"dstPort\\\": 137,\\n\" +\n-                    \"  \\\"deltaSwitched\\\": \\\"1524773523000\\\",\\n\" +\n-                    \"  \\\"firstSwitched\\\": \\\"1524773523000\\\",\\n\" +\n-                    \"  \\\"lastSwitched\\\": \\\"1524773523000\\\",\\n\" +\n-                    \"  \\\"numFlowRecords\\\": 5,\\n\" +\n-                    \"  \\\"numPackets\\\": \\\"1\\\",\\n\" +\n-                    \"  \\\"flowSeqNum\\\": \\\"1238343\\\",\\n\" +\n-                    \"  \\\"inputSnmpIfindex\\\": 369098754,\\n\" +\n-                    \"  \\\"outputSnmpIfindex\\\": 0,\\n\" +\n-                    \"  \\\"nextHopAddress\\\": \\\"0.0.0.0\\\",\\n\" +\n-                    \"  \\\"protocol\\\": 17,\\n\" +\n-                    \"  \\\"srcAddress\\\": \\\"10.1.104.41\\\",\\n\" +\n-                    \"  \\\"srcAs\\\": \\\"0\\\",\\n\" +\n-                    \"  \\\"srcPort\\\": 137,\\n\" +\n-                    \"  \\\"tcpFlags\\\": 0,\\n\" +\n-                    \"  \\\"tos\\\": 0,\\n\" +\n-                    \"  \\\"netflowVersion\\\": \\\"V9\\\",\\n\" +\n-                    \"  \\\"nodeIdentifier\\\": \\\"256\\\"\\n\" +\n-                    \"}\\n\",\n-            \"{\\n\" +\n-                    \"  \\\"timestamp\\\": \\\"1524773528000\\\",\\n\" +\n-                    \"  \\\"numBytes\\\": \\\"215\\\",\\n\" +\n-                    \"  \\\"dstAddress\\\": \\\"239.140.14.55\\\",\\n\" +\n-                    \"  \\\"dstAs\\\": \\\"0\\\",\\n\" +\n-                    \"  \\\"dstPort\\\": 5405,\\n\" +\n-                    \"  \\\"deltaSwitched\\\": \\\"1524773525000\\\",\\n\" +\n-                    \"  \\\"firstSwitched\\\": \\\"1524773525000\\\",\\n\" +\n-                    \"  \\\"lastSwitched\\\": \\\"1524773525000\\\",\\n\" +\n-                    \"  \\\"numFlowRecords\\\": 5,\\n\" +\n-                    \"  \\\"numPackets\\\": \\\"1\\\",\\n\" +\n-                    \"  \\\"flowSeqNum\\\": \\\"1238343\\\",\\n\" +\n-                    \"  \\\"inputSnmpIfindex\\\": 369098755,\\n\" +\n-                    \"  \\\"outputSnmpIfindex\\\": 0,\\n\" +\n-                    \"  \\\"nextHopAddress\\\": \\\"0.0.0.0\\\",\\n\" +\n-                    \"  \\\"protocol\\\": 17,\\n\" +\n-                    \"  \\\"srcAddress\\\": \\\"159.140.62.8\\\",\\n\" +\n-                    \"  \\\"srcAs\\\": \\\"0\\\",\\n\" +\n-                    \"  \\\"srcPort\\\": 5404,\\n\" +\n-                    \"  \\\"tcpFlags\\\": 0,\\n\" +\n-                    \"  \\\"tos\\\": 0,\\n\" +\n-                    \"  \\\"netflowVersion\\\": \\\"V9\\\",\\n\" +\n-                    \"  \\\"nodeIdentifier\\\": \\\"256\\\"\\n\" +\n-                    \"}\",\n-            \"{\\n\" +\n-                    \"  \\\"timestamp\\\": \\\"1524773528000\\\",\\n\" +\n-                    \"  \\\"numBytes\\\": \\\"156\\\",\\n\" +\n-                    \"  \\\"dstAddress\\\": \\\"10.1.20.127\\\",\\n\" +\n-                    \"  \\\"dstAs\\\": \\\"0\\\",\\n\" +\n-                    \"  \\\"dstPort\\\": 137,\\n\" +\n-                    \"  \\\"deltaSwitched\\\": \\\"1524773519000\\\",\\n\" +\n-                    \"  \\\"firstSwitched\\\": \\\"1524773519000\\\",\\n\" +\n-                    \"  \\\"lastSwitched\\\": \\\"1524773527000\\\",\\n\" +\n-                    \"  \\\"numFlowRecords\\\": 5,\\n\" +\n-                    \"  \\\"numPackets\\\": \\\"2\\\",\\n\" +\n-                    \"  \\\"flowSeqNum\\\": \\\"1238343\\\",\\n\" +\n-                    \"  \\\"inputSnmpIfindex\\\": 369098754,\\n\" +\n-                    \"  \\\"outputSnmpIfindex\\\": 0,\\n\" +\n-                    \"  \\\"nextHopAddress\\\": \\\"0.0.0.0\\\",\\n\" +\n-                    \"  \\\"protocol\\\": 17,\\n\" +\n-                    \"  \\\"srcAddress\\\": \\\"10.1.20.85\\\",\\n\" +\n-                    \"  \\\"srcAs\\\": \\\"0\\\",\\n\" +\n-                    \"  \\\"srcPort\\\": 137,\\n\" +\n-                    \"  \\\"tcpFlags\\\": 0,\\n\" +\n-                    \"  \\\"tos\\\": 0,\\n\" +\n-                    \"  \\\"netflowVersion\\\": \\\"V9\\\",\\n\" +\n-                    \"  \\\"nodeIdentifier\\\": \\\"256\\\"\\n\" +\n-                    \"}\"\n-\n-    };\n-}\n", "next_change": null}]}, "commits_in_main": [{"oid": "3352dcced0424e52de475b87840f05dff94fbec4", "message": "Merge commit", "committedDate": null}]}, {"oid": "f2e7af2606e9c55ee99039b4c03f0541024381ee", "url": "https://github.com/OpenNMS/opennms/commit/f2e7af2606e9c55ee99039b4c03f0541024381ee", "message": "Merge branch 'release-26.0.0' into jira/NMS-12521", "committedDate": "2020-03-26T21:36:29Z", "type": "commit"}, {"oid": "36b00350ef2a7a091f87639d723466f4b9e83b84", "url": "https://github.com/OpenNMS/opennms/commit/36b00350ef2a7a091f87639d723466f4b9e83b84", "message": "NMS-12521: Re-structure timeout tests, handle review comments", "committedDate": "2020-03-31T19:05:22Z", "type": "commit"}, {"oid": "36b00350ef2a7a091f87639d723466f4b9e83b84", "url": "https://github.com/OpenNMS/opennms/commit/36b00350ef2a7a091f87639d723466f4b9e83b84", "message": "NMS-12521: Re-structure timeout tests, handle review comments", "committedDate": "2020-03-31T19:05:22Z", "type": "forcePushed"}, {"oid": "d904c9db45dc6c129e6c35dcbe08240ab45290fe", "url": "https://github.com/OpenNMS/opennms/commit/d904c9db45dc6c129e6c35dcbe08240ab45290fe", "message": "NMS-12521: Refactor NetflowAdapter", "committedDate": "2020-03-31T20:23:33Z", "type": "commit"}]}