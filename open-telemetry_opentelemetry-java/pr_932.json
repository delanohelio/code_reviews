{"pr_number": 932, "pr_title": "Add minimal benchmarks for Counter instruments", "pr_author": "bogdandrutu", "pr_createdAt": "2020-02-26T00:46:34Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java/pull/932", "timeline": [{"oid": "03dd3864aaaa45af6fbe4a2e0665a44961f8aca9", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/03dd3864aaaa45af6fbe4a2e0665a44961f8aca9", "message": "Add minimal benchmarks for Counter instruments\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>", "committedDate": "2020-02-26T00:51:32Z", "type": "forcePushed"}, {"oid": "ecef6e7f1943da0c1203c3ddd7db472326d16860", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/ecef6e7f1943da0c1203c3ddd7db472326d16860", "message": "Add minimal benchmarks for Counter instruments\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>", "committedDate": "2020-02-26T01:29:14Z", "type": "commit"}, {"oid": "ecef6e7f1943da0c1203c3ddd7db472326d16860", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/ecef6e7f1943da0c1203c3ddd7db472326d16860", "message": "Add minimal benchmarks for Counter instruments\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>", "committedDate": "2020-02-26T01:29:14Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDUzMjAzMA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/932#discussion_r384532030", "body": "```suggestion\r\n      meter.doubleCounterBuilder(\"benchmark_double_counter\").build();\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  meter.doubleCounterBuilder(\"benchmark_long_counter\").build();\n          \n          \n            \n                  meter.doubleCounterBuilder(\"benchmark_double_counter\").build();", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">      meter<span class=\"pl-k\">.</span>doubleCounterBuilder(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"x x-first x-last\">benchmark_long_counter</span><span class=\"pl-pds\">\"</span></span>)<span class=\"pl-k\">.</span>build();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">      meter<span class=\"pl-k\">.</span>doubleCounterBuilder(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"x x-first x-last\">benchmark_double_counter</span><span class=\"pl-pds\">\"</span></span>)<span class=\"pl-k\">.</span>build();</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "arminru", "createdAt": "2020-02-26T14:37:39Z", "path": "sdk/src/jmh/java/io/opentelemetry/sdk/metrics/DoubleCounterSdkBenchmark.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.metrics;\n+\n+import io.opentelemetry.metrics.DoubleCounter;\n+import io.opentelemetry.metrics.DoubleCounter.BoundDoubleCounter;\n+import io.opentelemetry.metrics.Meter;\n+import io.opentelemetry.sdk.common.InstrumentationLibraryInfo;\n+import io.opentelemetry.sdk.internal.MillisClock;\n+import io.opentelemetry.sdk.resources.Resource;\n+import java.util.concurrent.TimeUnit;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Level;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.TearDown;\n+import org.openjdk.jmh.annotations.Threads;\n+import org.openjdk.jmh.annotations.Warmup;\n+\n+@BenchmarkMode({Mode.AverageTime})\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@Warmup(iterations = 5, time = 1)\n+@Measurement(iterations = 10, time = 1)\n+@Fork(1)\n+public class DoubleCounterSdkBenchmark {\n+\n+  private static final MeterProviderSharedState METER_PROVIDER_SHARED_STATE =\n+      MeterProviderSharedState.create(MillisClock.getInstance(), Resource.getEmpty());\n+  private static final InstrumentationLibraryInfo INSTRUMENTATION_LIBRARY_INFO =\n+      InstrumentationLibraryInfo.create(\"io.opentelemetry.sdk.metrics\", null);\n+  private static final String KEY = \"key\";\n+  private static final String VALUE = \"value\";\n+\n+  private static final Meter meter =\n+      new MeterSdk(METER_PROVIDER_SHARED_STATE, INSTRUMENTATION_LIBRARY_INFO);\n+  private static final DoubleCounter doubleCounter =\n+      meter.doubleCounterBuilder(\"benchmark_long_counter\").build();", "originalCommit": "ecef6e7f1943da0c1203c3ddd7db472326d16860", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "5e251e0c055a2f1c39488a3932ae39f0e54bb7ff", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/5e251e0c055a2f1c39488a3932ae39f0e54bb7ff", "message": "Update sdk/src/jmh/java/io/opentelemetry/sdk/metrics/DoubleCounterSdkBenchmark.java\n\nCo-Authored-By: Armin Ruech <armin.ruech@gmail.com>", "committedDate": "2020-02-26T17:00:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY1MDk1Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/932#discussion_r384650957", "body": "why 8? I think it would be useful to have a benchmark with a number of threads that's unlikely to match a multiple of the number of cores. 5 or 10 would be other nice numbers to try.", "bodyText": "why 8? I think it would be useful to have a benchmark with a number of threads that's unlikely to match a multiple of the number of cores. 5 or 10 would be other nice numbers to try.", "bodyHTML": "<p dir=\"auto\">why 8? I think it would be useful to have a benchmark with a number of threads that's unlikely to match a multiple of the number of cores. 5 or 10 would be other nice numbers to try.</p>", "author": "jkwatson", "createdAt": "2020-02-26T17:33:48Z", "path": "sdk/src/jmh/java/io/opentelemetry/sdk/metrics/DoubleCounterSdkBenchmark.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.metrics;\n+\n+import io.opentelemetry.metrics.DoubleCounter;\n+import io.opentelemetry.metrics.DoubleCounter.BoundDoubleCounter;\n+import io.opentelemetry.metrics.Meter;\n+import io.opentelemetry.sdk.common.InstrumentationLibraryInfo;\n+import io.opentelemetry.sdk.internal.MillisClock;\n+import io.opentelemetry.sdk.resources.Resource;\n+import java.util.concurrent.TimeUnit;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Level;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.TearDown;\n+import org.openjdk.jmh.annotations.Threads;\n+import org.openjdk.jmh.annotations.Warmup;\n+\n+@BenchmarkMode({Mode.AverageTime})\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@Warmup(iterations = 5, time = 1)\n+@Measurement(iterations = 10, time = 1)\n+@Fork(1)\n+public class DoubleCounterSdkBenchmark {\n+\n+  private static final MeterProviderSharedState METER_PROVIDER_SHARED_STATE =\n+      MeterProviderSharedState.create(MillisClock.getInstance(), Resource.getEmpty());\n+  private static final InstrumentationLibraryInfo INSTRUMENTATION_LIBRARY_INFO =\n+      InstrumentationLibraryInfo.create(\"io.opentelemetry.sdk.metrics\", null);\n+  private static final String KEY = \"key\";\n+  private static final String VALUE = \"value\";\n+\n+  private static final Meter meter =\n+      new MeterSdk(METER_PROVIDER_SHARED_STATE, INSTRUMENTATION_LIBRARY_INFO);\n+  private static final DoubleCounter doubleCounter =\n+      meter.doubleCounterBuilder(\"benchmark_double_counter\").build();\n+  private static final BoundDoubleCounter boundDoubleCounter =\n+      doubleCounter.bind(meter.createLabelSet(KEY, VALUE));\n+\n+  @State(Scope.Thread)\n+  public static class ThreadState {\n+\n+    @Setup(Level.Trial)\n+    public void doSetup() {\n+      threadKey = KEY + \"_\" + Thread.currentThread().getId();\n+      boundDoubleCounter = doubleCounter.bind(meter.createLabelSet(threadKey, VALUE));\n+    }\n+\n+    @TearDown(Level.Trial)\n+    public void doTearDown() {\n+      boundDoubleCounter.unbind();\n+    }\n+\n+    private String threadKey;\n+    private BoundDoubleCounter boundDoubleCounter;\n+  }\n+\n+  @Benchmark\n+  @Threads(value = 1)\n+  public void add_1Threads() {\n+    doubleCounter.add(100.1d, meter.createLabelSet(KEY, VALUE));\n+  }\n+\n+  @Benchmark\n+  @Threads(value = 8)\n+  public void add_8Threads_SameLabelSet() {\n+    doubleCounter.add(100.1d, meter.createLabelSet(KEY, VALUE));\n+  }\n+\n+  @Benchmark\n+  @Threads(value = 8)\n+  public void add_8Threads_DifferentLabelSet(ThreadState state) {\n+    doubleCounter.add(100.1d, meter.createLabelSet(state.threadKey, VALUE));\n+  }\n+\n+  @Benchmark\n+  @Threads(value = 1)\n+  public void bindingAdd_1Threads() {\n+    boundDoubleCounter.add(100.1d);\n+  }\n+\n+  @Benchmark\n+  @Threads(value = 8)\n+  public void bindingAdd_8Threads_SameLabelSet() {\n+    boundDoubleCounter.add(100.1d);\n+  }\n+\n+  @Benchmark\n+  @Threads(value = 8)\n+  public void bindingAdd_8Threads_DifferentLabelSet(ThreadState state) {", "originalCommit": "5e251e0c055a2f1c39488a3932ae39f0e54bb7ff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY1ODI0Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/932#discussion_r384658247", "bodyText": "Let me think about this, and will do the change in a different PR.", "author": "bogdandrutu", "createdAt": "2020-02-26T17:46:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY1MDk1Nw=="}], "type": "inlineReview"}]}