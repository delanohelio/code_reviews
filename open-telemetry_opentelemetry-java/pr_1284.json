{"pr_number": 1284, "pr_title": "feat: examples for metrics", "pr_author": "DotSpy", "pr_createdAt": "2020-05-28T21:28:20Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284", "timeline": [{"oid": "157ba337878056d2941c9df1263913cdb96bd8cb", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/157ba337878056d2941c9df1263913cdb96bd8cb", "message": "feat: examples for metrics", "committedDate": "2020-05-28T21:27:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE2MDU0Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#discussion_r432160543", "body": "this is probably a bad example of how to use a counter. Counters are intended to be used as a part of a \"synchronous\" measurement, associated with a span context. Measuring jvm memory usage is a better use-case for an Observer instrument.\n", "bodyText": "this is probably a bad example of how to use a counter. Counters are intended to be used as a part of a \"synchronous\" measurement, associated with a span context. Measuring jvm memory usage is a better use-case for an Observer instrument.", "bodyHTML": "<p dir=\"auto\">this is probably a bad example of how to use a counter. Counters are intended to be used as a part of a \"synchronous\" measurement, associated with a span context. Measuring jvm memory usage is a better use-case for an Observer instrument.</p>", "author": "jkwatson", "createdAt": "2020-05-28T22:32:53Z", "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/DoubleMeterExample.java", "diffHunk": "@@ -0,0 +1,22 @@\n+package io.opentelemetry.example.metrics;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.metrics.DoubleCounter;\n+import io.opentelemetry.metrics.Meter;\n+\n+public class DoubleMeterExample {\n+\n+  public static void main(String[] args) {\n+    Meter sampleMeter = OpenTelemetry.getMeterProvider().get(\"sample\", \"0.1\");\n+    DoubleCounter jvmUsageCounter = sampleMeter.doubleCounterBuilder(\"jvm_memory_usage\")", "originalCommit": "157ba337878056d2941c9df1263913cdb96bd8cb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYwOTYzNg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#discussion_r432609636", "bodyText": "@jkwatson maybe u have smth on mind to count wia double counter?", "author": "DotSpy", "createdAt": "2020-05-29T16:48:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE2MDU0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYxNjc1NA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#discussion_r432616754", "bodyText": "I don't. I'm not sure what a use-case is for counting things that are non-integer valued. Maybe total number of kilobytes processed in some kind of web request?", "author": "jkwatson", "createdAt": "2020-05-29T16:58:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE2MDU0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYyNzUxOQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#discussion_r432627519", "bodyText": "but they are also int", "author": "DotSpy", "createdAt": "2020-05-29T17:18:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE2MDU0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYyODcxOQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#discussion_r432628719", "bodyText": "you can have fractional kb, though, right?", "author": "jkwatson", "createdAt": "2020-05-29T17:20:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE2MDU0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY1NDY3Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#discussion_r432654673", "bodyText": "ok i got smth on my mind", "author": "DotSpy", "createdAt": "2020-05-29T18:11:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE2MDU0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE2MDc3MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#discussion_r432160771", "body": "Please add Javadoc explaining the purpose of the example.", "bodyText": "Please add Javadoc explaining the purpose of the example.", "bodyHTML": "<p dir=\"auto\">Please add Javadoc explaining the purpose of the example.</p>", "author": "jkwatson", "createdAt": "2020-05-28T22:33:33Z", "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/ObserverMeterExample.java", "diffHunk": "@@ -0,0 +1,25 @@\n+package io.opentelemetry.example.metrics;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.metrics.LongValueObserver;\n+import io.opentelemetry.metrics.LongValueObserver.ResultLongValueObserver;\n+import io.opentelemetry.metrics.Meter;\n+\n+public class ObserverMeterExample {", "originalCommit": "157ba337878056d2941c9df1263913cdb96bd8cb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE2OTQwMA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#discussion_r432169400", "body": "I think it would be helpful to have the meter name reflect reommended meter naming standards, which would mean this should probably be something like \"io.opentelemetry.example.metrics\" with a version of 0.5, maybe", "bodyText": "I think it would be helpful to have the meter name reflect reommended meter naming standards, which would mean this should probably be something like \"io.opentelemetry.example.metrics\" with a version of 0.5, maybe", "bodyHTML": "<p dir=\"auto\">I think it would be helpful to have the meter name reflect reommended meter naming standards, which would mean this should probably be something like \"io.opentelemetry.example.metrics\" with a version of 0.5, maybe</p>", "author": "jkwatson", "createdAt": "2020-05-28T22:59:40Z", "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/ObserverMeterExample.java", "diffHunk": "@@ -0,0 +1,25 @@\n+package io.opentelemetry.example.metrics;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.metrics.LongValueObserver;\n+import io.opentelemetry.metrics.LongValueObserver.ResultLongValueObserver;\n+import io.opentelemetry.metrics.Meter;\n+\n+public class ObserverMeterExample {\n+\n+  public static void main(String[] args) {\n+    Meter sampleMeter = OpenTelemetry.getMeterProvider().get(\"sample\", \"0.1\");", "originalCommit": "157ba337878056d2941c9df1263913cdb96bd8cb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI2MDA0Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#discussion_r432260046", "body": "```suggestion\r\n            result.observe(Runtime.getRuntime().totalMemory(), \"jvm memory\", \"total\");\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        result.observe(Runtime.getRuntime().totalMemory(), \"jvm memory\", \"free\");\n          \n          \n            \n                        result.observe(Runtime.getRuntime().totalMemory(), \"jvm memory\", \"total\");", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            result<span class=\"pl-k\">.</span>observe(<span class=\"pl-smi\">Runtime</span><span class=\"pl-k\">.</span>getRuntime()<span class=\"pl-k\">.</span>totalMemory(), <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>jvm memory<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"x x-first x-last\">free</span><span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            result<span class=\"pl-k\">.</span>observe(<span class=\"pl-smi\">Runtime</span><span class=\"pl-k\">.</span>getRuntime()<span class=\"pl-k\">.</span>totalMemory(), <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>jvm memory<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"x x-first x-last\">total</span><span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "thisthat", "createdAt": "2020-05-29T05:17:30Z", "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/ObserverMeterExample.java", "diffHunk": "@@ -0,0 +1,25 @@\n+package io.opentelemetry.example.metrics;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.metrics.LongValueObserver;\n+import io.opentelemetry.metrics.LongValueObserver.ResultLongValueObserver;\n+import io.opentelemetry.metrics.Meter;\n+\n+public class ObserverMeterExample {\n+\n+  public static void main(String[] args) {\n+    Meter sampleMeter = OpenTelemetry.getMeterProvider().get(\"sample\", \"0.1\");\n+    LongValueObserver observer = sampleMeter.longValueObserverBuilder(\"jvm_memory_usage\")\n+        .setDescription(\"should meter jvm memory usage\")\n+        .setUnit(\"byte\")\n+        .build();\n+\n+    observer.setCallback(\n+        new LongValueObserver.Callback<LongValueObserver.ResultLongValueObserver>() {\n+          @Override\n+          public void update(ResultLongValueObserver result) {\n+            result.observe(Runtime.getRuntime().totalMemory(), \"jvm memory\", \"free\");", "originalCommit": "157ba337878056d2941c9df1263913cdb96bd8cb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYxNzc1OA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#discussion_r432617758", "body": "Same comment about using a synchronous instrument for doing what should be an asynchronous measurement. We should make sure our examples are using the APIs idiomatically. In general, synchronous instruments should be used to instrument code executing within a span context.", "bodyText": "Same comment about using a synchronous instrument for doing what should be an asynchronous measurement. We should make sure our examples are using the APIs idiomatically. In general, synchronous instruments should be used to instrument code executing within a span context.", "bodyHTML": "<p dir=\"auto\">Same comment about using a synchronous instrument for doing what should be an asynchronous measurement. We should make sure our examples are using the APIs idiomatically. In general, synchronous instruments should be used to instrument code executing within a span context.</p>", "author": "jkwatson", "createdAt": "2020-05-29T17:00:28Z", "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/LongMeterExample.java", "diffHunk": "@@ -0,0 +1,22 @@\n+package io.opentelemetry.example.metrics;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.metrics.LongCounter;\n+import io.opentelemetry.metrics.Meter;\n+\n+public class LongMeterExample {\n+\n+  public static void main(String[] args) {\n+    Meter sampleMeter = OpenTelemetry.getMeterProvider().get(\"sample\", \"0.1\");\n+    LongCounter jvmUsageCounter = sampleMeter.longCounterBuilder(\"jvm_memory_usage\")", "originalCommit": "157ba337878056d2941c9df1263913cdb96bd8cb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "3dc4559967d170f9b7072412ced817e5ccf4c95a", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/3dc4559967d170f9b7072412ced817e5ccf4c95a", "message": "Update examples/metrics/src/main/java/io/opentelemetry/example/metrics/ObserverMeterExample.java\n\nCo-authored-by: Giovanni Liva <giovanni.liva@dynatrace.com>", "committedDate": "2020-05-29T17:20:24Z", "type": "commit"}, {"oid": "8e3754e990cfe750a10b9df3b7102d9f9399746a", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/8e3754e990cfe750a10b9df3b7102d9f9399746a", "message": "feat: metrics examples adding bound() and applying review comments", "committedDate": "2020-05-29T22:36:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjgwMDA4NA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#discussion_r432800084", "body": "This should be renamed to `LongCounterExample`, and it still needs to have a span context surrounding the usage of the counter, to be idiomatically correct.\r\n\r\nThe javadoc should definitely be more descriptive, and probably include a reference to the relevant section of the metric specifications. It should explain under what circumstances it is appropriate to use a LongCounter, and explain what \"bound\" means. My expectation is that a newbie who is looking at this code will see an idiomatic example of how to use the instrument being demonstrated and understand why and when they would use such an instrument.", "bodyText": "This should be renamed to LongCounterExample, and it still needs to have a span context surrounding the usage of the counter, to be idiomatically correct.\nThe javadoc should definitely be more descriptive, and probably include a reference to the relevant section of the metric specifications. It should explain under what circumstances it is appropriate to use a LongCounter, and explain what \"bound\" means. My expectation is that a newbie who is looking at this code will see an idiomatic example of how to use the instrument being demonstrated and understand why and when they would use such an instrument.", "bodyHTML": "<p dir=\"auto\">This should be renamed to <code>LongCounterExample</code>, and it still needs to have a span context surrounding the usage of the counter, to be idiomatically correct.</p>\n<p dir=\"auto\">The javadoc should definitely be more descriptive, and probably include a reference to the relevant section of the metric specifications. It should explain under what circumstances it is appropriate to use a LongCounter, and explain what \"bound\" means. My expectation is that a newbie who is looking at this code will see an idiomatic example of how to use the instrument being demonstrated and understand why and when they would use such an instrument.</p>", "author": "jkwatson", "createdAt": "2020-05-30T01:59:59Z", "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/LongMeterExample.java", "diffHunk": "@@ -0,0 +1,38 @@\n+package io.opentelemetry.example.metrics;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.metrics.LongCounter;\n+import io.opentelemetry.metrics.LongCounter.BoundLongCounter;\n+import io.opentelemetry.metrics.Meter;\n+import java.util.Random;\n+\n+/**\n+ * Long meter example with bound counter\n+ */\n+public class LongMeterExample {", "originalCommit": "8e3754e990cfe750a10b9df3b7102d9f9399746a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjgzNzk0NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#discussion_r432837945", "bodyText": "@jkwatson gotch you", "author": "DotSpy", "createdAt": "2020-05-30T12:33:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjgwMDA4NA=="}], "type": "inlineReview"}, {"oid": "aaf02afe6680851e54ceb9ab49337e8295bb09e5", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/aaf02afe6680851e54ceb9ab49337e8295bb09e5", "message": "feat: example for directory search", "committedDate": "2020-05-31T08:43:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI5Mzc5MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#discussion_r433293791", "body": "I think you missed my point here. The javadoc should explain what the example is trying to teach. We aren't trying to teach people how to traverse directory structures. We're trying to teach people how to use a Counter, a LongCounter in particular. ", "bodyText": "I think you missed my point here. The javadoc should explain what the example is trying to teach. We aren't trying to teach people how to traverse directory structures. We're trying to teach people how to use a Counter, a LongCounter in particular.", "bodyHTML": "<p dir=\"auto\">I think you missed my point here. The javadoc should explain what the example is trying to teach. We aren't trying to teach people how to traverse directory structures. We're trying to teach people how to use a Counter, a LongCounter in particular.</p>", "author": "jkwatson", "createdAt": "2020-06-01T15:12:08Z", "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/LongCounterExample.java", "diffHunk": "@@ -0,0 +1,60 @@\n+package io.opentelemetry.example.metrics;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.metrics.LongCounter;\n+import io.opentelemetry.metrics.LongCounter.BoundLongCounter;\n+import io.opentelemetry.metrics.Meter;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.Tracer;\n+import java.io.File;\n+import javax.swing.filechooser.FileSystemView;\n+\n+/**\n+ * Example to search all directories for specific file.\n+ * Here we will search directory recursively for specific file, using meter to count searched directories.", "originalCommit": "aaf02afe6680851e54ceb9ab49337e8295bb09e5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM1NjA1Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#discussion_r433356053", "bodyText": "That example trying to show usage of LongCounter, so as i understand u JD will look like\nExample of using LongCounter and BoundCounters to count searched directories.", "author": "DotSpy", "createdAt": "2020-06-01T16:43:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI5Mzc5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM2MDIwMQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#discussion_r433360201", "bodyText": "I would also include a link to the relevant specification, and a link to the javadoc for LongCounter class itself, if possible.", "author": "jkwatson", "createdAt": "2020-06-01T16:51:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI5Mzc5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQ3OTI0OA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#discussion_r433479248", "bodyText": "Applied suggestions, also added span status and catch block", "author": "DotSpy", "createdAt": "2020-06-01T20:44:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI5Mzc5MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI5NDEwMA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#discussion_r433294100", "body": "this is a strange label. Why would this be a useful label for this process?", "bodyText": "this is a strange label. Why would this be a useful label for this process?", "bodyHTML": "<p dir=\"auto\">this is a strange label. Why would this be a useful label for this process?</p>", "author": "jkwatson", "createdAt": "2020-06-01T15:12:36Z", "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/LongCounterExample.java", "diffHunk": "@@ -0,0 +1,60 @@\n+package io.opentelemetry.example.metrics;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.metrics.LongCounter;\n+import io.opentelemetry.metrics.LongCounter.BoundLongCounter;\n+import io.opentelemetry.metrics.Meter;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.Tracer;\n+import java.io.File;\n+import javax.swing.filechooser.FileSystemView;\n+\n+/**\n+ * Example to search all directories for specific file.\n+ * Here we will search directory recursively for specific file, using meter to count searched directories.\n+ */\n+public class LongCounterExample {\n+\n+  private static final Tracer tracer =\n+      OpenTelemetry.getTracer(\"io.opentelemetry.example.metrics\");\n+  private static final Meter sampleMeter = OpenTelemetry.getMeterProvider()\n+      .get(\"io.opentelemetry.example.metrics\", \"0.5\");\n+  private static final LongCounter methodCallCounter = sampleMeter\n+      .longCounterBuilder(\"directories_search_count\")\n+      .setDescription(\"should count directories searched\")\n+      .setUnit(\"unit\")\n+      .build();\n+  //we can use BoundCounters to not specify labels each time\n+  private static final BoundLongCounter directoryCounter = methodCallCounter\n+      .bind(\"directory\", \"searched\");", "originalCommit": "aaf02afe6680851e54ceb9ab49337e8295bb09e5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM0MDkzNA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#discussion_r433340934", "bodyText": "i was thinking to count number of directories that was searched", "author": "DotSpy", "createdAt": "2020-06-01T16:16:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI5NDEwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM0MTI1OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#discussion_r433341259", "bodyText": "Shouldn't it be like Directories searched 5 with this label?", "author": "DotSpy", "createdAt": "2020-06-01T16:16:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI5NDEwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM2MDc5MA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#discussion_r433360790", "bodyText": "but, the name of the instrument already has this same information in it, so why would you add a redundant label? You might add a bound label for the disk volume, or the host name, or something that would not just repeat the information that is in the instrument name.", "author": "jkwatson", "createdAt": "2020-06-01T16:52:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI5NDEwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI5NDUyOA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#discussion_r433294528", "body": "As above, the javadoc should explain what we're trying to teach people with the example.", "bodyText": "As above, the javadoc should explain what we're trying to teach people with the example.", "bodyHTML": "<p dir=\"auto\">As above, the javadoc should explain what we're trying to teach people with the example.</p>", "author": "jkwatson", "createdAt": "2020-06-01T15:13:19Z", "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/ObserverMeterExample.java", "diffHunk": "@@ -0,0 +1,29 @@\n+package io.opentelemetry.example.metrics;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.metrics.LongValueObserver;\n+import io.opentelemetry.metrics.LongValueObserver.ResultLongValueObserver;\n+import io.opentelemetry.metrics.Meter;\n+\n+/**\n+ * In this example we are setting callback to get asynchronously jvm memory usage", "originalCommit": "aaf02afe6680851e54ceb9ab49337e8295bb09e5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "6c0f327f6549ff3c1274bacd526a90010cc75403", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/6c0f327f6549ff3c1274bacd526a90010cc75403", "message": "feat: apply review suggestions", "committedDate": "2020-06-01T20:43:30Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUxNTU4Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#discussion_r433515586", "body": "rename to `DoubleCounterExample`", "bodyText": "rename to DoubleCounterExample", "bodyHTML": "<p dir=\"auto\">rename to <code>DoubleCounterExample</code></p>", "author": "jkwatson", "createdAt": "2020-06-01T22:06:14Z", "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/DoubleMeterExample.java", "diffHunk": "@@ -0,0 +1,34 @@\n+package io.opentelemetry.example.metrics;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.metrics.DoubleCounter;\n+import io.opentelemetry.metrics.Meter;\n+\n+\n+/**\n+ * Example of using {@link DoubleCounter} to measure execution time of method.\n+ */\n+public class DoubleMeterExample {", "originalCommit": "6c0f327f6549ff3c1274bacd526a90010cc75403", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUxNTczNg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#discussion_r433515736", "body": "this usage should also be in a Span scope, like in the LongCounterExample.", "bodyText": "this usage should also be in a Span scope, like in the LongCounterExample.", "bodyHTML": "<p dir=\"auto\">this usage should also be in a Span scope, like in the LongCounterExample.</p>", "author": "jkwatson", "createdAt": "2020-06-01T22:06:40Z", "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/DoubleMeterExample.java", "diffHunk": "@@ -0,0 +1,34 @@\n+package io.opentelemetry.example.metrics;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.metrics.DoubleCounter;\n+import io.opentelemetry.metrics.Meter;\n+\n+\n+/**\n+ * Example of using {@link DoubleCounter} to measure execution time of method.\n+ */\n+public class DoubleMeterExample {\n+\n+  public static void main(String[] args) {\n+    Meter sampleMeter = OpenTelemetry.getMeterProvider()\n+        .get(\"io.opentelemetry.example.metrics\", \"0.5\");\n+    DoubleCounter timeCounter = sampleMeter.doubleCounterBuilder(\"some_method_time_usage\")\n+        .setDescription(\"should measure some method execution time\")\n+        .setUnit(\"second\")\n+        .build();\n+    Long timeStart = System.currentTimeMillis();\n+    superLongMethod();\n+    Long timeEnd = System.currentTimeMillis();\n+    Double seconds = (timeEnd.doubleValue() - timeStart.doubleValue()) / 1000;\n+    timeCounter.add(seconds, \"someWork\", \"execution time\");", "originalCommit": "6c0f327f6549ff3c1274bacd526a90010cc75403", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "e5e931fcca20006fadcbb07c4346feb0643616e3", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/e5e931fcca20006fadcbb07c4346feb0643616e3", "message": "feat: apply review suggestions", "committedDate": "2020-06-02T16:14:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDA2NTE4Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#discussion_r434065186", "body": "Move the creation of the counter up out of the try block. We only need to use the counter inside a span context, not create it.", "bodyText": "Move the creation of the counter up out of the try block. We only need to use the counter inside a span context, not create it.", "bodyHTML": "<p dir=\"auto\">Move the creation of the counter up out of the try block. We only need to use the counter inside a span context, not create it.</p>", "author": "jkwatson", "createdAt": "2020-06-02T17:55:22Z", "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/DoubleCounterExample.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package io.opentelemetry.example.metrics;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.metrics.DoubleCounter;\n+import io.opentelemetry.metrics.Meter;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.Tracer;\n+\n+\n+/**\n+ * Example of using {@link DoubleCounter} to measure execution time of method.\n+ */\n+public class DoubleCounterExample {\n+\n+  private static final Tracer tracer =\n+      OpenTelemetry.getTracer(\"io.opentelemetry.example.metrics\");\n+\n+  public static void main(String[] args) {\n+    Span span = tracer.spanBuilder(\"superLongMethod\")\n+        .setSpanKind(Kind.INTERNAL)\n+        .startSpan();\n+    try (Scope scope = tracer.withSpan(span)) {\n+      Meter sampleMeter = OpenTelemetry.getMeterProvider()\n+          .get(\"io.opentelemetry.example.metrics\", \"0.5\");\n+      DoubleCounter timeCounter = sampleMeter.doubleCounterBuilder(\"some_method_time_usage\")\n+          .setDescription(\"should measure some method execution time\")\n+          .setUnit(\"second\")\n+          .build();", "originalCommit": "e5e931fcca20006fadcbb07c4346feb0643616e3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "c8c4b07e687217b3e3e87fe1de5ae8367a13bfa2", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/c8c4b07e687217b3e3e87fe1de5ae8367a13bfa2", "message": "feat: move creation of counter out of try block", "committedDate": "2020-06-02T19:52:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY4NTY5Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#discussion_r434685696", "body": "Is a counter really the right instrument type to use here?\r\nI thought this was only used for things that you actually count, like, the number of requests, errors or total bytes written or something like this. In particular, things where one would be interested in the total sum only and not distinct values or their min/max. Of course one could argue that measuring time entails counting seconds but I thought the ValueRecorder would be the correct instrument to record such distinct measurements.\r\n\r\nThe [spec](https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/metrics/api.md#valuerecorder) even mentions:\r\n\r\n>Example uses for ValueRecorder that are non-additive:\r\n>- capture any kind of timing information\r\n\r\nAlso the example in the Javadoc even demonstrates how it's used to report timings:\r\nhttps://github.com/open-telemetry/opentelemetry-java/blob/master/api/src/main/java/io/opentelemetry/metrics/DoubleValueRecorder.java", "bodyText": "Is a counter really the right instrument type to use here?\nI thought this was only used for things that you actually count, like, the number of requests, errors or total bytes written or something like this. In particular, things where one would be interested in the total sum only and not distinct values or their min/max. Of course one could argue that measuring time entails counting seconds but I thought the ValueRecorder would be the correct instrument to record such distinct measurements.\nThe spec even mentions:\n\nExample uses for ValueRecorder that are non-additive:\n\ncapture any kind of timing information\n\n\nAlso the example in the Javadoc even demonstrates how it's used to report timings:\nhttps://github.com/open-telemetry/opentelemetry-java/blob/master/api/src/main/java/io/opentelemetry/metrics/DoubleValueRecorder.java", "bodyHTML": "<p dir=\"auto\">Is a counter really the right instrument type to use here?<br>\nI thought this was only used for things that you actually count, like, the number of requests, errors or total bytes written or something like this. In particular, things where one would be interested in the total sum only and not distinct values or their min/max. Of course one could argue that measuring time entails counting seconds but I thought the ValueRecorder would be the correct instrument to record such distinct measurements.</p>\n<p dir=\"auto\">The <a href=\"https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/metrics/api.md#valuerecorder\">spec</a> even mentions:</p>\n<blockquote>\n<p dir=\"auto\">Example uses for ValueRecorder that are non-additive:</p>\n<ul dir=\"auto\">\n<li>capture any kind of timing information</li>\n</ul>\n</blockquote>\n<p dir=\"auto\">Also the example in the Javadoc even demonstrates how it's used to report timings:<br>\n<a href=\"https://github.com/open-telemetry/opentelemetry-java/blob/master/api/src/main/java/io/opentelemetry/metrics/DoubleValueRecorder.java\">https://github.com/open-telemetry/opentelemetry-java/blob/master/api/src/main/java/io/opentelemetry/metrics/DoubleValueRecorder.java</a></p>", "author": "arminru", "createdAt": "2020-06-03T16:08:09Z", "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/DoubleCounterExample.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package io.opentelemetry.example.metrics;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.metrics.DoubleCounter;\n+import io.opentelemetry.metrics.Meter;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.Tracer;\n+\n+\n+/**\n+ * Example of using {@link DoubleCounter} to measure execution time of method.\n+ */\n+public class DoubleCounterExample {\n+\n+  private static final Tracer tracer =\n+      OpenTelemetry.getTracer(\"io.opentelemetry.example.metrics\");\n+\n+  public static void main(String[] args) {\n+    Span span = tracer.spanBuilder(\"superLongMethod\")\n+        .setSpanKind(Kind.INTERNAL)\n+        .startSpan();\n+    Meter sampleMeter = OpenTelemetry.getMeterProvider()\n+        .get(\"io.opentelemetry.example.metrics\", \"0.5\");\n+    DoubleCounter timeCounter = sampleMeter.doubleCounterBuilder(\"some_method_time_usage\")\n+        .setDescription(\"should measure some method execution time\")\n+        .setUnit(\"second\")", "originalCommit": "c8c4b07e687217b3e3e87fe1de5ae8367a13bfa2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDcwMDY2Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#discussion_r434700663", "bodyText": "@arminru you are correct, also I think our examples should try to follow these recommendations.", "author": "bogdandrutu", "createdAt": "2020-06-03T16:30:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY4NTY5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDcxODI1OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#discussion_r434718259", "bodyText": "Do we know what a DoubleCounter would be used to count? Seems like an odd thing to count fractional stuff.", "author": "jkwatson", "createdAt": "2020-06-03T16:58:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY4NTY5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDcyNDAyNA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#discussion_r434724024", "bodyText": "@jkwatson Good question. If one would use MB as a unit of bytes written to disk, for example, fractions would make sense -- but it would probably make even more sense to use KB or B if one is interested in such a precision.", "author": "arminru", "createdAt": "2020-06-03T17:08:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY4NTY5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc0MjcwNA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#discussion_r434742704", "bodyText": "I wonder, if we don't have a good use-case for it, if we should consider removing it from the API.", "author": "jkwatson", "createdAt": "2020-06-03T17:40:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY4NTY5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA3MTIxMA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#discussion_r435071210", "bodyText": "@jkwatson Fair point. I think it makes sense to consider it but it might only be us not being able to come up with a good example. The example in DoubleCounter's Javadoc is slightly contrived but I could imagine that there are reasonable use cases for it out in the wild. Apart from that, removing it might be surprising to users for the lack of symmetry in the API then.", "author": "arminru", "createdAt": "2020-06-04T08:11:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY4NTY5Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY4NjAzMQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#discussion_r434686031", "body": "Leftover, this example is not about finding any files.", "bodyText": "Leftover, this example is not about finding any files.", "bodyHTML": "<p dir=\"auto\">Leftover, this example is not about finding any files.</p>", "author": "arminru", "createdAt": "2020-06-03T16:08:39Z", "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/DoubleCounterExample.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package io.opentelemetry.example.metrics;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.metrics.DoubleCounter;\n+import io.opentelemetry.metrics.Meter;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.Tracer;\n+\n+\n+/**\n+ * Example of using {@link DoubleCounter} to measure execution time of method.\n+ */\n+public class DoubleCounterExample {\n+\n+  private static final Tracer tracer =\n+      OpenTelemetry.getTracer(\"io.opentelemetry.example.metrics\");\n+\n+  public static void main(String[] args) {\n+    Span span = tracer.spanBuilder(\"superLongMethod\")\n+        .setSpanKind(Kind.INTERNAL)\n+        .startSpan();\n+    Meter sampleMeter = OpenTelemetry.getMeterProvider()\n+        .get(\"io.opentelemetry.example.metrics\", \"0.5\");\n+    DoubleCounter timeCounter = sampleMeter.doubleCounterBuilder(\"some_method_time_usage\")\n+        .setDescription(\"should measure some method execution time\")\n+        .setUnit(\"second\")\n+        .build();\n+    try (Scope scope = tracer.withSpan(span)) {\n+      Long timeStart = System.currentTimeMillis();\n+      superLongMethod();\n+      Long timeEnd = System.currentTimeMillis();\n+      Double seconds = (timeEnd.doubleValue() - timeStart.doubleValue()) / 1000;\n+      //we can add values to counter without addition label key-values pairs\n+      timeCounter.add(seconds);\n+    } catch (Exception e) {\n+      Status status = Status.UNKNOWN.withDescription(\"Error while finding file\");", "originalCommit": "c8c4b07e687217b3e3e87fe1de5ae8367a13bfa2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a55b245ae220a66de7eb5c080d44ef7413836770", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/a55b245ae220a66de7eb5c080d44ef7413836770", "message": "feat: use double counter to count MB", "committedDate": "2020-06-03T20:05:05Z", "type": "commit"}, {"oid": "1de2543209cc766904f4a3ea6b4bb844d7895173", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/1de2543209cc766904f4a3ea6b4bb844d7895173", "message": "fix: javadoc", "committedDate": "2020-06-03T20:07:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA0NjkzNg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#discussion_r435046936", "body": "```suggestion\r\n * Example of using {@link DoubleCounter} and {@link DoubleCounter.BoundDoubleCounter} to count disk space used by files with a specific extension.\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Example of using {@link DoubleCounter} and {@link DoubleCounter.BoundDoubleCounter} to count used space by file  with specific extension.\n          \n          \n            \n             * Example of using {@link DoubleCounter} and {@link DoubleCounter.BoundDoubleCounter} to count disk space used by files with a specific extension.", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"> <span class=\"pl-k\">*</span> <span class=\"pl-smi\">Example</span> of using {<span class=\"pl-k\">@link</span> <span class=\"pl-smi\">DoubleCounter</span>} and {<span class=\"pl-k\">@link</span> <span class=\"pl-smi\">DoubleCounter</span><span class=\"pl-k\">.</span><span class=\"pl-smi\">BoundDoubleCounter</span>} to count <span class=\"x x-first x-last\">used</span> space by <span class=\"x x-first x-last\">file  </span>with specific extension.</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\"> <span class=\"pl-k\">*</span> <span class=\"pl-smi\">Example</span> of using {<span class=\"pl-k\">@link</span> <span class=\"pl-smi\">DoubleCounter</span>} and {<span class=\"pl-k\">@link</span> <span class=\"pl-smi\">DoubleCounter</span><span class=\"pl-k\">.</span><span class=\"pl-smi\">BoundDoubleCounter</span>} to count <span class=\"x x-first x-last\">disk</span> space <span class=\"x x-first x-last\">used </span>by <span class=\"x x-first x-last\">files </span>with<span class=\"x x-first x-last\"> a</span> specific extension.</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "arminru", "createdAt": "2020-06-04T07:27:40Z", "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/DoubleCounterExample.java", "diffHunk": "@@ -0,0 +1,57 @@\n+package io.opentelemetry.example.metrics;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.metrics.DoubleCounter;\n+import io.opentelemetry.metrics.LongCounter;\n+import io.opentelemetry.metrics.Meter;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.Tracer;\n+import java.io.File;\n+import javax.swing.filechooser.FileSystemView;\n+\n+/**\n+ * Example of using {@link DoubleCounter} and {@link DoubleCounter.BoundDoubleCounter} to count used space by file  with specific extension.", "originalCommit": "1de2543209cc766904f4a3ea6b4bb844d7895173", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA2NTU5Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#discussion_r435065596", "body": "Actually you don't use the `BoundDoubleCounter` or labels here at all, or am I missing something? \ud83d\ude05 \r\n\r\nThe file extension would actually make a great metric dimension/label in your example.\r\n\r\n```\r\ndisk_space_used[file_extension=dll]:   5 MB\r\ndisk_space_used[file_extension=pdf]:   1 MB\r\ndisk_space_used[file_extension=png]: 710 MB\r\n```\r\nand so on.\r\n\r\nWhat do you think? \ud83d\ude42", "bodyText": "Actually you don't use the BoundDoubleCounter or labels here at all, or am I missing something? \ud83d\ude05\nThe file extension would actually make a great metric dimension/label in your example.\ndisk_space_used[file_extension=dll]:   5 MB\ndisk_space_used[file_extension=pdf]:   1 MB\ndisk_space_used[file_extension=png]: 710 MB\n\nand so on.\nWhat do you think? \ud83d\ude42", "bodyHTML": "<p dir=\"auto\">Actually you don't use the <code>BoundDoubleCounter</code> or labels here at all, or am I missing something? <g-emoji class=\"g-emoji\" alias=\"sweat_smile\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f605.png\">\ud83d\ude05</g-emoji></p>\n<p dir=\"auto\">The file extension would actually make a great metric dimension/label in your example.</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"disk_space_used[file_extension=dll]:   5 MB\ndisk_space_used[file_extension=pdf]:   1 MB\ndisk_space_used[file_extension=png]: 710 MB\n\"><pre><code>disk_space_used[file_extension=dll]:   5 MB\ndisk_space_used[file_extension=pdf]:   1 MB\ndisk_space_used[file_extension=png]: 710 MB\n</code></pre></div>\n<p dir=\"auto\">and so on.</p>\n<p dir=\"auto\">What do you think? <g-emoji class=\"g-emoji\" alias=\"slightly_smiling_face\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f642.png\">\ud83d\ude42</g-emoji></p>", "author": "arminru", "createdAt": "2020-06-04T08:01:45Z", "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/DoubleCounterExample.java", "diffHunk": "@@ -0,0 +1,57 @@\n+package io.opentelemetry.example.metrics;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.metrics.DoubleCounter;\n+import io.opentelemetry.metrics.LongCounter;\n+import io.opentelemetry.metrics.Meter;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.Tracer;\n+import java.io.File;\n+import javax.swing.filechooser.FileSystemView;\n+\n+/**\n+ * Example of using {@link DoubleCounter} and {@link DoubleCounter.BoundDoubleCounter} to count used space by file  with specific extension.", "originalCommit": "1de2543209cc766904f4a3ea6b4bb844d7895173", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE0MTg4NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#discussion_r435141885", "bodyText": "Sounds good, when i will be at home i'll try to implement it", "author": "DotSpy", "createdAt": "2020-06-04T10:09:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA2NTU5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTMyODY5NA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#discussion_r435328694", "bodyText": "@arminru when u have a time, pls take a look", "author": "DotSpy", "createdAt": "2020-06-04T15:02:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA2NTU5Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA2NjUwMw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#discussion_r435066503", "body": "```suggestion\r\n      .setDescription(\"Counts disk space used by file extension.\")\r\n```\r\n\r\nIt actually does so no need for the subjunctive \ud83d\ude09 ", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  .setDescription(\"should count space used by file extension\")\n          \n          \n            \n                  .setDescription(\"Counts disk space used by file extension.\")\n          \n      \n    \n    \n  \n\nIt actually does so no need for the subjunctive \ud83d\ude09", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">      .setDescription(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"x x-first x-last\">should count</span> space used by file extension<span class=\"pl-pds\">\"</span></span>)</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">      .setDescription(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"x x-first x-last\">Counts disk</span> space used by file extension<span class=\"x x-first x-last\">.</span><span class=\"pl-pds\">\"</span></span>)</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\">It actually does so no need for the subjunctive <g-emoji class=\"g-emoji\" alias=\"wink\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f609.png\">\ud83d\ude09</g-emoji></p>", "author": "arminru", "createdAt": "2020-06-04T08:03:23Z", "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/DoubleCounterExample.java", "diffHunk": "@@ -0,0 +1,57 @@\n+package io.opentelemetry.example.metrics;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.metrics.DoubleCounter;\n+import io.opentelemetry.metrics.LongCounter;\n+import io.opentelemetry.metrics.Meter;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.Tracer;\n+import java.io.File;\n+import javax.swing.filechooser.FileSystemView;\n+\n+/**\n+ * Example of using {@link DoubleCounter} and {@link DoubleCounter.BoundDoubleCounter} to count used space by file  with specific extension.\n+ */\n+public class DoubleCounterExample {\n+\n+  private static final Tracer tracer =\n+      OpenTelemetry.getTracer(\"io.opentelemetry.example.metrics\");\n+  private static final Meter sampleMeter = OpenTelemetry.getMeterProvider()\n+      .get(\"io.opentelemetry.example.metrics\", \"0.5\");\n+  private static final File directoryToCountIn = FileSystemView.getFileSystemView().getHomeDirectory();\n+  private static final DoubleCounter methodCallCounter = sampleMeter\n+      .doubleCounterBuilder(\"calculated_used_space\")\n+      .setDescription(\"should count space used by file extension\")", "originalCommit": "1de2543209cc766904f4a3ea6b4bb844d7895173", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA2Njg0MA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#discussion_r435066840", "body": "```suggestion\r\n          methodCallCounter.add((double) file.length() / 1_000_000);\r\n```\r\n\r\n`File.length()` returns the size in Bytes but you specified `.setUnit(\"MB\")` above.", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      methodCallCounter.add((double) file.length() / 1024);\n          \n          \n            \n                      methodCallCounter.add((double) file.length() / 1_000_000);\n          \n      \n    \n    \n  \n\nFile.length() returns the size in Bytes but you specified .setUnit(\"MB\") above.", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">          methodCallCounter<span class=\"pl-k\">.</span>add((<span class=\"pl-k\">double</span>) file<span class=\"pl-k\">.</span>length() <span class=\"pl-k\">/</span> <span class=\"pl-c1 x x-first x-last\">1024</span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">          methodCallCounter<span class=\"pl-k\">.</span>add((<span class=\"pl-k\">double</span>) file<span class=\"pl-k\">.</span>length() <span class=\"pl-k\">/</span> <span class=\"pl-c1 x x-first x-last\">1_000_000</span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\"><code>File.length()</code> returns the size in Bytes but you specified <code>.setUnit(\"MB\")</code> above.</p>", "author": "arminru", "createdAt": "2020-06-04T08:04:03Z", "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/DoubleCounterExample.java", "diffHunk": "@@ -0,0 +1,57 @@\n+package io.opentelemetry.example.metrics;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.metrics.DoubleCounter;\n+import io.opentelemetry.metrics.LongCounter;\n+import io.opentelemetry.metrics.Meter;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.Tracer;\n+import java.io.File;\n+import javax.swing.filechooser.FileSystemView;\n+\n+/**\n+ * Example of using {@link DoubleCounter} and {@link DoubleCounter.BoundDoubleCounter} to count used space by file  with specific extension.\n+ */\n+public class DoubleCounterExample {\n+\n+  private static final Tracer tracer =\n+      OpenTelemetry.getTracer(\"io.opentelemetry.example.metrics\");\n+  private static final Meter sampleMeter = OpenTelemetry.getMeterProvider()\n+      .get(\"io.opentelemetry.example.metrics\", \"0.5\");\n+  private static final File directoryToCountIn = FileSystemView.getFileSystemView().getHomeDirectory();\n+  private static final DoubleCounter methodCallCounter = sampleMeter\n+      .doubleCounterBuilder(\"calculated_used_space\")\n+      .setDescription(\"should count space used by file extension\")\n+      .setUnit(\"MB\")\n+      .build();\n+\n+  public static void main(String[] args) {\n+    Span span = tracer.spanBuilder(\"calculate space\")\n+        .setSpanKind(Kind.INTERNAL)\n+        .startSpan();\n+    DoubleCounterExample example = new DoubleCounterExample();\n+    try (Scope scope = tracer.withSpan(span)) {\n+      example.calculateSpaceUsedByFilesWithExtension(\"dll\", directoryToCountIn);\n+    } catch (Exception e) {\n+      Status status = Status.UNKNOWN.withDescription(\"Error while calculating used space\");\n+      span.setStatus(status);\n+    } finally {\n+      span.end();\n+    }\n+  }\n+\n+  public void calculateSpaceUsedByFilesWithExtension(String extension, File directory) {\n+    File[] files = directory.listFiles();\n+    if (files != null) {\n+      for (File file : files) {\n+        if (file.getName().endsWith(\".\" + extension)) {\n+          //we can add values to counter without addition label key-values pairs\n+          methodCallCounter.add((double) file.length() / 1024);", "originalCommit": "1de2543209cc766904f4a3ea6b4bb844d7895173", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE0MDE4OA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#discussion_r435140188", "bodyText": "True :)", "author": "DotSpy", "createdAt": "2020-06-04T10:06:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA2Njg0MA=="}], "type": "inlineReview"}, {"oid": "b75eee2aa744e9f7733a2783669e7dbde5142c61", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/b75eee2aa744e9f7733a2783669e7dbde5142c61", "message": "Update examples/metrics/src/main/java/io/opentelemetry/example/metrics/DoubleCounterExample.java\n\nCo-authored-by: Armin Ruech <armin.ruech@dynatrace.com>", "committedDate": "2020-06-04T10:04:28Z", "type": "commit"}, {"oid": "4e65cee6950caf2dcdec3bffddea34a33cf1ea13", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/4e65cee6950caf2dcdec3bffddea34a33cf1ea13", "message": "Update examples/metrics/src/main/java/io/opentelemetry/example/metrics/DoubleCounterExample.java\n\nCo-authored-by: Armin Ruech <armin.ruech@dynatrace.com>", "committedDate": "2020-06-04T10:04:48Z", "type": "commit"}, {"oid": "58f2ea70b3a016c16ab195ad2c8f4c7ac4578a23", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/58f2ea70b3a016c16ab195ad2c8f4c7ac4578a23", "message": "Update examples/metrics/src/main/java/io/opentelemetry/example/metrics/DoubleCounterExample.java\n\nCo-authored-by: Armin Ruech <armin.ruech@dynatrace.com>", "committedDate": "2020-06-04T10:06:10Z", "type": "commit"}, {"oid": "d00c5b775d00fc91fe18fa289cb217cf5dcd49f4", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/d00c5b775d00fc91fe18fa289cb217cf5dcd49f4", "message": "feat: apply review suggestions", "committedDate": "2020-06-04T15:01:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM0MDk2Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#discussion_r435340966", "body": "```suggestion\r\n  private static final DoubleCounter diskSpaceCounter = sampleMeter\r\n```\r\nyou're no longer counting method calls ;-)", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private static final DoubleCounter methodCallCounter = sampleMeter\n          \n          \n            \n              private static final DoubleCounter diskSpaceCounter = sampleMeter\n          \n      \n    \n    \n  \n\nyou're no longer counting method calls ;-)", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">  <span class=\"pl-k\">private</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">final</span> <span class=\"pl-smi\">DoubleCounter</span> <span class=\"x x-first x-last\">methodCallCounter</span> <span class=\"pl-k\">=</span> sampleMeter</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">  <span class=\"pl-k\">private</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">final</span> <span class=\"pl-smi\">DoubleCounter</span> <span class=\"x x-first x-last\">diskSpaceCounter</span> <span class=\"pl-k\">=</span> sampleMeter</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\">you're no longer counting method calls ;-)</p>", "author": "arminru", "createdAt": "2020-06-04T15:19:24Z", "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/DoubleCounterExample.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package io.opentelemetry.example.metrics;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.metrics.DoubleCounter;\n+import io.opentelemetry.metrics.Meter;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.Tracer;\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.swing.filechooser.FileSystemView;\n+\n+/**\n+ * Example of using {@link DoubleCounter} and {@link DoubleCounter.BoundDoubleCounter} to count disk space used by files with a specific extensions.\n+ */\n+public class DoubleCounterExample {\n+\n+  private static final Tracer tracer =\n+      OpenTelemetry.getTracer(\"io.opentelemetry.example.metrics\");\n+  private static final Meter sampleMeter = OpenTelemetry.getMeterProvider()\n+      .get(\"io.opentelemetry.example.metrics\", \"0.5\");\n+  private static final File directoryToCountIn = FileSystemView.getFileSystemView()\n+      .getHomeDirectory();\n+  private static final DoubleCounter methodCallCounter = sampleMeter", "originalCommit": "d00c5b775d00fc91fe18fa289cb217cf5dcd49f4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM0MTE1Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#discussion_r435341153", "body": "```suggestion\r\n            diskSpaceCounter.add((double) file.length() / 1_000_000, \"file_extension\", extension);\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        methodCallCounter.add((double) file.length() / 1_000_000, \"file_extension\", extension);\n          \n          \n            \n                        diskSpaceCounter.add((double) file.length() / 1_000_000, \"file_extension\", extension);", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            <span class=\"x x-first x-last\">methodCallCounter</span><span class=\"pl-k\">.</span>add((<span class=\"pl-k\">double</span>) file<span class=\"pl-k\">.</span>length() <span class=\"pl-k\">/</span> <span class=\"pl-c1\">1_000_000</span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>file_extension<span class=\"pl-pds\">\"</span></span>, extension);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            <span class=\"x x-first x-last\">diskSpaceCounter</span><span class=\"pl-k\">.</span>add((<span class=\"pl-k\">double</span>) file<span class=\"pl-k\">.</span>length() <span class=\"pl-k\">/</span> <span class=\"pl-c1\">1_000_000</span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>file_extension<span class=\"pl-pds\">\"</span></span>, extension);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "arminru", "createdAt": "2020-06-04T15:19:40Z", "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/DoubleCounterExample.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package io.opentelemetry.example.metrics;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.metrics.DoubleCounter;\n+import io.opentelemetry.metrics.Meter;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.Tracer;\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.swing.filechooser.FileSystemView;\n+\n+/**\n+ * Example of using {@link DoubleCounter} and {@link DoubleCounter.BoundDoubleCounter} to count disk space used by files with a specific extensions.\n+ */\n+public class DoubleCounterExample {\n+\n+  private static final Tracer tracer =\n+      OpenTelemetry.getTracer(\"io.opentelemetry.example.metrics\");\n+  private static final Meter sampleMeter = OpenTelemetry.getMeterProvider()\n+      .get(\"io.opentelemetry.example.metrics\", \"0.5\");\n+  private static final File directoryToCountIn = FileSystemView.getFileSystemView()\n+      .getHomeDirectory();\n+  private static final DoubleCounter methodCallCounter = sampleMeter\n+      .doubleCounterBuilder(\"calculated_used_space\")\n+      .setDescription(\"Counts disk space used by file extension.\")\n+      .setUnit(\"MB\")\n+      .build();\n+\n+  public static void main(String[] args) {\n+    Span span = tracer.spanBuilder(\"calculate space\")\n+        .setSpanKind(Kind.INTERNAL)\n+        .startSpan();\n+    DoubleCounterExample example = new DoubleCounterExample();\n+    try (Scope scope = tracer.withSpan(span)) {\n+      List<String> extensionsToFind = new ArrayList<>();\n+      extensionsToFind.add(\"dll\");\n+      extensionsToFind.add(\"png\");\n+      extensionsToFind.add(\"exe\");\n+      example.calculateSpaceUsedByFilesWithExtension(extensionsToFind, directoryToCountIn);\n+    } catch (Exception e) {\n+      Status status = Status.UNKNOWN.withDescription(\"Error while calculating used space\");\n+      span.setStatus(status);\n+    } finally {\n+      span.end();\n+    }\n+  }\n+\n+  public void calculateSpaceUsedByFilesWithExtension(List<String> extensions, File directory) {\n+    File[] files = directory.listFiles();\n+    if (files != null) {\n+      for (File file : files) {\n+        for (String extension : extensions) {\n+          if (file.getName().endsWith(\".\" + extension)) {\n+            //we can add values to counter without addition label key-values pairs\n+            methodCallCounter.add((double) file.length() / 1_000_000, \"file_extension\", extension);", "originalCommit": "d00c5b775d00fc91fe18fa289cb217cf5dcd49f4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM0MTg2MA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#discussion_r435341860", "body": "```suggestion\r\n      OpenTelemetry.getTracer(\"io.opentelemetry.example.metrics\", \"0.5\");\r\n```\r\nYou would usually supply the same library version as for the meter below.", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  OpenTelemetry.getTracer(\"io.opentelemetry.example.metrics\");\n          \n          \n            \n                  OpenTelemetry.getTracer(\"io.opentelemetry.example.metrics\", \"0.5\");\n          \n      \n    \n    \n  \n\nYou would usually supply the same library version as for the meter below.", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">      <span class=\"pl-smi\">OpenTelemetry</span><span class=\"pl-k\">.</span>getTracer(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>io.opentelemetry.example.metrics<span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">      <span class=\"pl-smi\">OpenTelemetry</span><span class=\"pl-k\">.</span>getTracer(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>io.opentelemetry.example.metrics<span class=\"pl-pds\">\"</span></span><span class=\"x x-first\">, </span><span class=\"pl-s\"><span class=\"pl-pds x\">\"</span><span class=\"x\">0.5</span><span class=\"pl-pds x x-last\">\"</span></span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\">You would usually supply the same library version as for the meter below.</p>", "author": "arminru", "createdAt": "2020-06-04T15:20:37Z", "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/DoubleCounterExample.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package io.opentelemetry.example.metrics;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.metrics.DoubleCounter;\n+import io.opentelemetry.metrics.Meter;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.Tracer;\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.swing.filechooser.FileSystemView;\n+\n+/**\n+ * Example of using {@link DoubleCounter} and {@link DoubleCounter.BoundDoubleCounter} to count disk space used by files with a specific extensions.\n+ */\n+public class DoubleCounterExample {\n+\n+  private static final Tracer tracer =\n+      OpenTelemetry.getTracer(\"io.opentelemetry.example.metrics\");", "originalCommit": "d00c5b775d00fc91fe18fa289cb217cf5dcd49f4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM0MzIwMQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#discussion_r435343201", "body": "```suggestion\r\n            // we can add values to the counter for specific labels\r\n            // the label key is \"file_extension\", its value is the name of the extension\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        //we can add values to counter without addition label key-values pairs\n          \n          \n            \n                        // we can add values to the counter for specific labels\n          \n          \n            \n                        // the label key is \"file_extension\", its value is the name of the extension", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            <span class=\"pl-c\"><span class=\"pl-c\">//</span>we can add values to counter <span class=\"x x-first x-last\">without addition label key-values pairs</span></span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            <span class=\"pl-c\"><span class=\"pl-c\">//</span><span class=\"x x-first x-last\"> </span>we can add values to <span class=\"x x-first x-last\">the </span>counter <span class=\"x x-first x-last\">for specific labels</span></span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            <span class=\"pl-c\"><span class=\"pl-c\">//</span> the label key is \"file_extension\", its value is the name of the extension</span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "arminru", "createdAt": "2020-06-04T15:22:27Z", "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/DoubleCounterExample.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package io.opentelemetry.example.metrics;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.metrics.DoubleCounter;\n+import io.opentelemetry.metrics.Meter;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.Tracer;\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.swing.filechooser.FileSystemView;\n+\n+/**\n+ * Example of using {@link DoubleCounter} and {@link DoubleCounter.BoundDoubleCounter} to count disk space used by files with a specific extensions.\n+ */\n+public class DoubleCounterExample {\n+\n+  private static final Tracer tracer =\n+      OpenTelemetry.getTracer(\"io.opentelemetry.example.metrics\");\n+  private static final Meter sampleMeter = OpenTelemetry.getMeterProvider()\n+      .get(\"io.opentelemetry.example.metrics\", \"0.5\");\n+  private static final File directoryToCountIn = FileSystemView.getFileSystemView()\n+      .getHomeDirectory();\n+  private static final DoubleCounter methodCallCounter = sampleMeter\n+      .doubleCounterBuilder(\"calculated_used_space\")\n+      .setDescription(\"Counts disk space used by file extension.\")\n+      .setUnit(\"MB\")\n+      .build();\n+\n+  public static void main(String[] args) {\n+    Span span = tracer.spanBuilder(\"calculate space\")\n+        .setSpanKind(Kind.INTERNAL)\n+        .startSpan();\n+    DoubleCounterExample example = new DoubleCounterExample();\n+    try (Scope scope = tracer.withSpan(span)) {\n+      List<String> extensionsToFind = new ArrayList<>();\n+      extensionsToFind.add(\"dll\");\n+      extensionsToFind.add(\"png\");\n+      extensionsToFind.add(\"exe\");\n+      example.calculateSpaceUsedByFilesWithExtension(extensionsToFind, directoryToCountIn);\n+    } catch (Exception e) {\n+      Status status = Status.UNKNOWN.withDescription(\"Error while calculating used space\");\n+      span.setStatus(status);\n+    } finally {\n+      span.end();\n+    }\n+  }\n+\n+  public void calculateSpaceUsedByFilesWithExtension(List<String> extensions, File directory) {\n+    File[] files = directory.listFiles();\n+    if (files != null) {\n+      for (File file : files) {\n+        for (String extension : extensions) {\n+          if (file.getName().endsWith(\".\" + extension)) {\n+            //we can add values to counter without addition label key-values pairs", "originalCommit": "d00c5b775d00fc91fe18fa289cb217cf5dcd49f4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM0MzQxNQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#discussion_r435343415", "body": "```suggestion\r\n      OpenTelemetry.getTracer(\"io.opentelemetry.example.metrics\", \"0.5\");\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  OpenTelemetry.getTracer(\"io.opentelemetry.example.metrics\");\n          \n          \n            \n                  OpenTelemetry.getTracer(\"io.opentelemetry.example.metrics\", \"0.5\");", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">      <span class=\"pl-smi\">OpenTelemetry</span><span class=\"pl-k\">.</span>getTracer(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>io.opentelemetry.example.metrics<span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">      <span class=\"pl-smi\">OpenTelemetry</span><span class=\"pl-k\">.</span>getTracer(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>io.opentelemetry.example.metrics<span class=\"pl-pds\">\"</span></span><span class=\"x x-first\">, </span><span class=\"pl-s\"><span class=\"pl-pds x\">\"</span><span class=\"x\">0.5</span><span class=\"pl-pds x x-last\">\"</span></span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "arminru", "createdAt": "2020-06-04T15:22:45Z", "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/LongCounterExample.java", "diffHunk": "@@ -0,0 +1,64 @@\n+package io.opentelemetry.example.metrics;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.metrics.LongCounter;\n+import io.opentelemetry.metrics.LongCounter.BoundLongCounter;\n+import io.opentelemetry.metrics.Meter;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.Tracer;\n+import java.io.File;\n+import javax.swing.filechooser.FileSystemView;\n+\n+/**\n+ * Example of using {@link LongCounter} and {@link LongCounter.BoundLongCounter} to count searched directories.\n+ */\n+public class LongCounterExample {\n+\n+  private static final Tracer tracer =\n+      OpenTelemetry.getTracer(\"io.opentelemetry.example.metrics\");", "originalCommit": "d00c5b775d00fc91fe18fa289cb217cf5dcd49f4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM0Mzc1MA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#discussion_r435343750", "body": "```suggestion\r\n * Example of using {@link DoubleCounter} to count disk space used by files with specific extensions.\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Example of using {@link DoubleCounter} and {@link DoubleCounter.BoundDoubleCounter} to count disk space used by files with a specific extensions.\n          \n          \n            \n             * Example of using {@link DoubleCounter} to count disk space used by files with specific extensions.", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"> <span class=\"pl-k\">*</span> <span class=\"pl-smi\">Example</span> of using {<span class=\"pl-k\">@link</span> <span class=\"pl-smi\">DoubleCounter</span>} <span class=\"x x-first\">and {</span><span class=\"pl-k x\">@link</span><span class=\"x\"> </span><span class=\"pl-smi x\">DoubleCounter</span><span class=\"pl-k x\">.</span><span class=\"pl-smi x\">BoundDoubleCounter</span><span class=\"x x-last\">} </span>to count disk space used by files with<span class=\"x x-first x-last\"> a</span> specific extensions.</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\"> <span class=\"pl-k\">*</span> <span class=\"pl-smi\">Example</span> of using {<span class=\"pl-k\">@link</span> <span class=\"pl-smi\">DoubleCounter</span>} to count disk space used by files with specific extensions.</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "arminru", "createdAt": "2020-06-04T15:23:10Z", "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/DoubleCounterExample.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package io.opentelemetry.example.metrics;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.metrics.DoubleCounter;\n+import io.opentelemetry.metrics.Meter;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.Tracer;\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.swing.filechooser.FileSystemView;\n+\n+/**\n+ * Example of using {@link DoubleCounter} and {@link DoubleCounter.BoundDoubleCounter} to count disk space used by files with a specific extensions.", "originalCommit": "d00c5b775d00fc91fe18fa289cb217cf5dcd49f4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM0NDg5OA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#discussion_r435344898", "body": "```suggestion\r\n  private static final LongCounter directoryCounter = sampleMeter\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private static final LongCounter methodCallCounter = sampleMeter\n          \n          \n            \n              private static final LongCounter directoryCounter = sampleMeter", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">  <span class=\"pl-k\">private</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">final</span> <span class=\"pl-smi\">LongCounter</span> <span class=\"x x-first x-last\">methodCallCounter</span> <span class=\"pl-k\">=</span> sampleMeter</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">  <span class=\"pl-k\">private</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">final</span> <span class=\"pl-smi\">LongCounter</span> <span class=\"x x-first x-last\">directoryCounter</span> <span class=\"pl-k\">=</span> sampleMeter</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "arminru", "createdAt": "2020-06-04T15:24:40Z", "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/LongCounterExample.java", "diffHunk": "@@ -0,0 +1,64 @@\n+package io.opentelemetry.example.metrics;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.metrics.LongCounter;\n+import io.opentelemetry.metrics.LongCounter.BoundLongCounter;\n+import io.opentelemetry.metrics.Meter;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.Tracer;\n+import java.io.File;\n+import javax.swing.filechooser.FileSystemView;\n+\n+/**\n+ * Example of using {@link LongCounter} and {@link LongCounter.BoundLongCounter} to count searched directories.\n+ */\n+public class LongCounterExample {\n+\n+  private static final Tracer tracer =\n+      OpenTelemetry.getTracer(\"io.opentelemetry.example.metrics\");\n+  private static final Meter sampleMeter = OpenTelemetry.getMeterProvider()\n+      .get(\"io.opentelemetry.example.metrics\", \"0.5\");\n+  private static final LongCounter methodCallCounter = sampleMeter", "originalCommit": "d00c5b775d00fc91fe18fa289cb217cf5dcd49f4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM0NTE3NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#discussion_r435345175", "body": "```suggestion\r\n  private static final BoundLongCounter homeDirectoryCounter = directoryCounter\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private static final BoundLongCounter directoryCounter = methodCallCounter\n          \n          \n            \n              private static final BoundLongCounter homeDirectoryCounter = directoryCounter", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">  <span class=\"pl-k\">private</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">final</span> <span class=\"pl-smi\">BoundLongCounter</span> <span class=\"x x-first x-last\">directoryCounter</span> <span class=\"pl-k\">=</span> <span class=\"x x-first x-last\">methodCallCounter</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">  <span class=\"pl-k\">private</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">final</span> <span class=\"pl-smi\">BoundLongCounter</span> <span class=\"x x-first x-last\">homeDirectoryCounter</span> <span class=\"pl-k\">=</span> <span class=\"x x-first x-last\">directoryCounter</span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "arminru", "createdAt": "2020-06-04T15:25:05Z", "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/LongCounterExample.java", "diffHunk": "@@ -0,0 +1,64 @@\n+package io.opentelemetry.example.metrics;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.metrics.LongCounter;\n+import io.opentelemetry.metrics.LongCounter.BoundLongCounter;\n+import io.opentelemetry.metrics.Meter;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.Tracer;\n+import java.io.File;\n+import javax.swing.filechooser.FileSystemView;\n+\n+/**\n+ * Example of using {@link LongCounter} and {@link LongCounter.BoundLongCounter} to count searched directories.\n+ */\n+public class LongCounterExample {\n+\n+  private static final Tracer tracer =\n+      OpenTelemetry.getTracer(\"io.opentelemetry.example.metrics\");\n+  private static final Meter sampleMeter = OpenTelemetry.getMeterProvider()\n+      .get(\"io.opentelemetry.example.metrics\", \"0.5\");\n+  private static final LongCounter methodCallCounter = sampleMeter\n+      .longCounterBuilder(\"directories_search_count\")\n+      .setDescription(\"should count directories searched\")\n+      .setUnit(\"unit\")\n+      .build();\n+  private static final File homeDirectory = FileSystemView.getFileSystemView().getHomeDirectory();\n+  //we can use BoundCounters to not specify labels each time\n+  private static final BoundLongCounter directoryCounter = methodCallCounter", "originalCommit": "d00c5b775d00fc91fe18fa289cb217cf5dcd49f4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM0NjAzNw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#discussion_r435346037", "body": "```suggestion\r\n          // we don't have to specify the value for the \"root directory\" label again\r\n          // since this is a BoundLongCounter with pre-set labels\r\n          homeDirectoryCounter.add(1);\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      directoryCounter.add(1);\n          \n          \n            \n                      // we don't have to specify the value for the \"root directory\" label again\n          \n          \n            \n                      // since this is a BoundLongCounter with pre-set labels\n          \n          \n            \n                      homeDirectoryCounter.add(1);", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">          <span class=\"x x-first\">directoryCounter</span><span class=\"pl-k x\">.</span><span class=\"x\">add(</span><span class=\"pl-c1 x\">1</span><span class=\"x x-last\">);</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">          <span class=\"pl-c\"><span class=\"pl-c x x-first\">//</span><span class=\"x x-last\"> we don't have to specify the value for the \"root directory\" label again</span></span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">          <span class=\"pl-c\"><span class=\"pl-c\">//</span> since this is a BoundLongCounter with pre-set labels</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">          homeDirectoryCounter<span class=\"pl-k\">.</span>add(<span class=\"pl-c1\">1</span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "arminru", "createdAt": "2020-06-04T15:26:10Z", "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/LongCounterExample.java", "diffHunk": "@@ -0,0 +1,64 @@\n+package io.opentelemetry.example.metrics;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.metrics.LongCounter;\n+import io.opentelemetry.metrics.LongCounter.BoundLongCounter;\n+import io.opentelemetry.metrics.Meter;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.Tracer;\n+import java.io.File;\n+import javax.swing.filechooser.FileSystemView;\n+\n+/**\n+ * Example of using {@link LongCounter} and {@link LongCounter.BoundLongCounter} to count searched directories.\n+ */\n+public class LongCounterExample {\n+\n+  private static final Tracer tracer =\n+      OpenTelemetry.getTracer(\"io.opentelemetry.example.metrics\");\n+  private static final Meter sampleMeter = OpenTelemetry.getMeterProvider()\n+      .get(\"io.opentelemetry.example.metrics\", \"0.5\");\n+  private static final LongCounter methodCallCounter = sampleMeter\n+      .longCounterBuilder(\"directories_search_count\")\n+      .setDescription(\"should count directories searched\")\n+      .setUnit(\"unit\")\n+      .build();\n+  private static final File homeDirectory = FileSystemView.getFileSystemView().getHomeDirectory();\n+  //we can use BoundCounters to not specify labels each time\n+  private static final BoundLongCounter directoryCounter = methodCallCounter\n+      .bind(\"root directory\", homeDirectory.getName());\n+\n+  public static void main(String[] args) {\n+    Span span = tracer.spanBuilder(\"workflow\")\n+        .setSpanKind(Kind.INTERNAL)\n+        .startSpan();\n+    LongCounterExample example = new LongCounterExample();\n+    try (Scope scope = tracer.withSpan(span)) {\n+      directoryCounter.add(1);// count root directory\n+      example.findFile(\"file_to_find.txt\", homeDirectory);\n+    } catch (Exception e) {\n+      Status status = Status.UNKNOWN.withDescription(\"Error while finding file\");\n+      span.setStatus(status);\n+    } finally {\n+      span.end();\n+    }\n+  }\n+\n+  public void findFile(String name, File directory) {\n+    File[] files = directory.listFiles();\n+    System.out.println(\"Currently looking at \" + directory.getAbsolutePath());\n+    if (files != null) {\n+      for (File file : files) {\n+        if (file.isDirectory()) {\n+          directoryCounter.add(1);", "originalCommit": "d00c5b775d00fc91fe18fa289cb217cf5dcd49f4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM0NjQzMw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#discussion_r435346433", "body": "```suggestion\r\n      homeDirectoryCounter.add(1); // count root directory\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  directoryCounter.add(1);// count root directory\n          \n          \n            \n                  homeDirectoryCounter.add(1); // count root directory", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">      <span class=\"x x-first x-last\">directoryCounter</span><span class=\"pl-k\">.</span>add(<span class=\"pl-c1\">1</span>);<span class=\"pl-c\"><span class=\"pl-c\">//</span> count root directory</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">      <span class=\"x x-first x-last\">homeDirectoryCounter</span><span class=\"pl-k\">.</span>add(<span class=\"pl-c1\">1</span>);<span class=\"x x-first x-last\"> </span><span class=\"pl-c\"><span class=\"pl-c\">//</span> count root directory</span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "arminru", "createdAt": "2020-06-04T15:26:40Z", "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/LongCounterExample.java", "diffHunk": "@@ -0,0 +1,64 @@\n+package io.opentelemetry.example.metrics;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.metrics.LongCounter;\n+import io.opentelemetry.metrics.LongCounter.BoundLongCounter;\n+import io.opentelemetry.metrics.Meter;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.Tracer;\n+import java.io.File;\n+import javax.swing.filechooser.FileSystemView;\n+\n+/**\n+ * Example of using {@link LongCounter} and {@link LongCounter.BoundLongCounter} to count searched directories.\n+ */\n+public class LongCounterExample {\n+\n+  private static final Tracer tracer =\n+      OpenTelemetry.getTracer(\"io.opentelemetry.example.metrics\");\n+  private static final Meter sampleMeter = OpenTelemetry.getMeterProvider()\n+      .get(\"io.opentelemetry.example.metrics\", \"0.5\");\n+  private static final LongCounter methodCallCounter = sampleMeter\n+      .longCounterBuilder(\"directories_search_count\")\n+      .setDescription(\"should count directories searched\")\n+      .setUnit(\"unit\")\n+      .build();\n+  private static final File homeDirectory = FileSystemView.getFileSystemView().getHomeDirectory();\n+  //we can use BoundCounters to not specify labels each time\n+  private static final BoundLongCounter directoryCounter = methodCallCounter\n+      .bind(\"root directory\", homeDirectory.getName());\n+\n+  public static void main(String[] args) {\n+    Span span = tracer.spanBuilder(\"workflow\")\n+        .setSpanKind(Kind.INTERNAL)\n+        .startSpan();\n+    LongCounterExample example = new LongCounterExample();\n+    try (Scope scope = tracer.withSpan(span)) {\n+      directoryCounter.add(1);// count root directory", "originalCommit": "d00c5b775d00fc91fe18fa289cb217cf5dcd49f4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM0NzIzNQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#discussion_r435347235", "body": "```suggestion\r\n      .setDescription(\"Counts directories accessed while searching for files.\")\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  .setDescription(\"should count directories searched\")\n          \n          \n            \n                  .setDescription(\"Counts directories accessed while searching for files.\")", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">      .setDescription(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"x x-first x-last\">should count </span>directories <span class=\"x x-first x-last\">searched</span><span class=\"pl-pds\">\"</span></span>)</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">      .setDescription(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"x x-first x-last\">Counts </span>directories <span class=\"x x-first x-last\">accessed while searching for files.</span><span class=\"pl-pds\">\"</span></span>)</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "arminru", "createdAt": "2020-06-04T15:27:44Z", "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/LongCounterExample.java", "diffHunk": "@@ -0,0 +1,64 @@\n+package io.opentelemetry.example.metrics;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.metrics.LongCounter;\n+import io.opentelemetry.metrics.LongCounter.BoundLongCounter;\n+import io.opentelemetry.metrics.Meter;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.Tracer;\n+import java.io.File;\n+import javax.swing.filechooser.FileSystemView;\n+\n+/**\n+ * Example of using {@link LongCounter} and {@link LongCounter.BoundLongCounter} to count searched directories.\n+ */\n+public class LongCounterExample {\n+\n+  private static final Tracer tracer =\n+      OpenTelemetry.getTracer(\"io.opentelemetry.example.metrics\");\n+  private static final Meter sampleMeter = OpenTelemetry.getMeterProvider()\n+      .get(\"io.opentelemetry.example.metrics\", \"0.5\");\n+  private static final LongCounter methodCallCounter = sampleMeter\n+      .longCounterBuilder(\"directories_search_count\")\n+      .setDescription(\"should count directories searched\")", "originalCommit": "d00c5b775d00fc91fe18fa289cb217cf5dcd49f4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM0OTI4OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#discussion_r435349289", "body": "```suggestion\r\n        .setDescription(\"Reports JVM memory usage.\")\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    .setDescription(\"should meter jvm memory usage\")\n          \n          \n            \n                    .setDescription(\"Reports JVM memory usage.\")", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        .setDescription(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"x x-first x-last\">should meter jvm </span>memory usage<span class=\"pl-pds\">\"</span></span>)</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        .setDescription(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"x x-first x-last\">Reports JVM </span>memory usage<span class=\"x x-first x-last\">.</span><span class=\"pl-pds\">\"</span></span>)</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "arminru", "createdAt": "2020-06-04T15:30:43Z", "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/LongValueObserverExample.java", "diffHunk": "@@ -0,0 +1,32 @@\n+package io.opentelemetry.example.metrics;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.metrics.LongValueObserver;\n+import io.opentelemetry.metrics.LongValueObserver.ResultLongValueObserver;\n+import io.opentelemetry.metrics.Meter;\n+\n+/**\n+ * Example of using {@link LongValueObserver} to measure execution time of method.\n+ * Setting {@link LongValueObserver.Callback} a callback that gets executed every collection interval.\n+ * Useful for expensive measurements that would be wastefully to calculate each request.\n+ */\n+public class LongValueObserverExample {\n+\n+  public static void main(String[] args) {\n+    Meter sampleMeter = OpenTelemetry.getMeterProvider()\n+        .get(\"io.opentelemetry.example.metrics\", \"0.5\");\n+    LongValueObserver observer = sampleMeter.longValueObserverBuilder(\"jvm_memory_usage\")\n+        .setDescription(\"should meter jvm memory usage\")", "originalCommit": "d00c5b775d00fc91fe18fa289cb217cf5dcd49f4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM1MjM3MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#discussion_r435352371", "body": "```suggestion\r\n            result.observe(Runtime.getRuntime().totalMemory(), \"kind\", \"total\");\r\n            result.observe(Runtime.getRuntime().freeMemory(), \"kind\", \"free\");\r\n```\r\n\r\nTo demonstrate the advantage of using labels. Otherwise it doesn't really show why you would use them at all here.\r\n\r\nOne might prefer to report these as two separate metrics rather than metric dimensions, however.\r\n@bogdandrutu, you're more experienced with metrics. WDYT?", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        result.observe(Runtime.getRuntime().totalMemory(), \"jvm memory\", \"total\");\n          \n          \n            \n                        result.observe(Runtime.getRuntime().totalMemory(), \"kind\", \"total\");\n          \n          \n            \n                        result.observe(Runtime.getRuntime().freeMemory(), \"kind\", \"free\");\n          \n      \n    \n    \n  \n\nTo demonstrate the advantage of using labels. Otherwise it doesn't really show why you would use them at all here.\nOne might prefer to report these as two separate metrics rather than metric dimensions, however.\n@bogdandrutu, you're more experienced with metrics. WDYT?", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            result<span class=\"pl-k\">.</span>observe(<span class=\"pl-smi\">Runtime</span><span class=\"pl-k\">.</span>getRuntime()<span class=\"pl-k\">.</span>totalMemory(), <span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"x x-first x-last\">jvm memory</span><span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>total<span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            result<span class=\"pl-k\">.</span>observe(<span class=\"pl-smi\">Runtime</span><span class=\"pl-k\">.</span>getRuntime()<span class=\"pl-k\">.</span>totalMemory(), <span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"x x-first x-last\">kind</span><span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>total<span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            result<span class=\"pl-k\">.</span>observe(<span class=\"pl-smi\">Runtime</span><span class=\"pl-k\">.</span>getRuntime()<span class=\"pl-k\">.</span>freeMemory(), <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>kind<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>free<span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\">To demonstrate the advantage of using labels. Otherwise it doesn't really show why you would use them at all here.</p>\n<p dir=\"auto\">One might prefer to report these as two separate metrics rather than metric dimensions, however.<br>\n<a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/bogdandrutu/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/bogdandrutu\">@bogdandrutu</a>, you're more experienced with metrics. WDYT?</p>", "author": "arminru", "createdAt": "2020-06-04T15:34:37Z", "path": "examples/metrics/src/main/java/io/opentelemetry/example/metrics/LongValueObserverExample.java", "diffHunk": "@@ -0,0 +1,32 @@\n+package io.opentelemetry.example.metrics;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.metrics.LongValueObserver;\n+import io.opentelemetry.metrics.LongValueObserver.ResultLongValueObserver;\n+import io.opentelemetry.metrics.Meter;\n+\n+/**\n+ * Example of using {@link LongValueObserver} to measure execution time of method.\n+ * Setting {@link LongValueObserver.Callback} a callback that gets executed every collection interval.\n+ * Useful for expensive measurements that would be wastefully to calculate each request.\n+ */\n+public class LongValueObserverExample {\n+\n+  public static void main(String[] args) {\n+    Meter sampleMeter = OpenTelemetry.getMeterProvider()\n+        .get(\"io.opentelemetry.example.metrics\", \"0.5\");\n+    LongValueObserver observer = sampleMeter.longValueObserverBuilder(\"jvm_memory_usage\")\n+        .setDescription(\"should meter jvm memory usage\")\n+        .setUnit(\"byte\")\n+        .build();\n+\n+    observer.setCallback(\n+        new LongValueObserver.Callback<LongValueObserver.ResultLongValueObserver>() {\n+          @Override\n+          public void update(ResultLongValueObserver result) {\n+            result.observe(Runtime.getRuntime().totalMemory(), \"jvm memory\", \"total\");", "originalCommit": "d00c5b775d00fc91fe18fa289cb217cf5dcd49f4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM2MzM3Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#discussion_r435363373", "bodyText": "we can throw away labels from this example if it misleading", "author": "DotSpy", "createdAt": "2020-06-04T15:47:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM1MjM3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM2NTg3NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1284#discussion_r435365875", "bodyText": "You already demonstrate how to use them with the file extensions, so dropping them here and reporting only total or free would be fine, I guess. In this case I'd name the metric jvm.memory.total or jvm.memory.free to specify which kind memory is being reported.", "author": "arminru", "createdAt": "2020-06-04T15:51:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM1MjM3MQ=="}], "type": "inlineReview"}, {"oid": "0a66f2d8f78af709c53bfb97480797f96b50912d", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/0a66f2d8f78af709c53bfb97480797f96b50912d", "message": "Update examples/metrics/src/main/java/io/opentelemetry/example/metrics/DoubleCounterExample.java\n\nCo-authored-by: Armin Ruech <armin.ruech@dynatrace.com>", "committedDate": "2020-06-04T15:44:07Z", "type": "commit"}, {"oid": "a69eb975225ba84f05abccf830c8b772cc803534", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/a69eb975225ba84f05abccf830c8b772cc803534", "message": "Update examples/metrics/src/main/java/io/opentelemetry/example/metrics/DoubleCounterExample.java\n\nCo-authored-by: Armin Ruech <armin.ruech@dynatrace.com>", "committedDate": "2020-06-04T15:44:22Z", "type": "commit"}, {"oid": "6f2a113c964fc9b00210577fda713f28f1d77c1a", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/6f2a113c964fc9b00210577fda713f28f1d77c1a", "message": "Update examples/metrics/src/main/java/io/opentelemetry/example/metrics/DoubleCounterExample.java\n\nCo-authored-by: Armin Ruech <armin.ruech@dynatrace.com>", "committedDate": "2020-06-04T15:44:43Z", "type": "commit"}, {"oid": "428d62b75cd1a37bbcece7b39bcb64e2b3598c88", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/428d62b75cd1a37bbcece7b39bcb64e2b3598c88", "message": "Update examples/metrics/src/main/java/io/opentelemetry/example/metrics/DoubleCounterExample.java\n\nCo-authored-by: Armin Ruech <armin.ruech@dynatrace.com>", "committedDate": "2020-06-04T15:45:04Z", "type": "commit"}, {"oid": "8fa063682c1ef0c9f4f1cbd037cc2159f93e960d", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/8fa063682c1ef0c9f4f1cbd037cc2159f93e960d", "message": "Update examples/metrics/src/main/java/io/opentelemetry/example/metrics/LongCounterExample.java\n\nCo-authored-by: Armin Ruech <armin.ruech@dynatrace.com>", "committedDate": "2020-06-04T15:45:22Z", "type": "commit"}, {"oid": "b96ba309b568f97f3f9132c09aef9c24abded97b", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/b96ba309b568f97f3f9132c09aef9c24abded97b", "message": "Update examples/metrics/src/main/java/io/opentelemetry/example/metrics/LongCounterExample.java\n\nCo-authored-by: Armin Ruech <armin.ruech@dynatrace.com>", "committedDate": "2020-06-04T15:45:33Z", "type": "commit"}, {"oid": "820f488d8e47a6d3fd2c6c0125137d57781c160e", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/820f488d8e47a6d3fd2c6c0125137d57781c160e", "message": "Update examples/metrics/src/main/java/io/opentelemetry/example/metrics/LongCounterExample.java\n\nCo-authored-by: Armin Ruech <armin.ruech@dynatrace.com>", "committedDate": "2020-06-04T15:45:41Z", "type": "commit"}, {"oid": "621e7ae32283ebe4eb1ce0f5b68c4ae659ef2d8c", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/621e7ae32283ebe4eb1ce0f5b68c4ae659ef2d8c", "message": "Update examples/metrics/src/main/java/io/opentelemetry/example/metrics/LongValueObserverExample.java\n\nCo-authored-by: Armin Ruech <armin.ruech@dynatrace.com>", "committedDate": "2020-06-04T15:45:56Z", "type": "commit"}, {"oid": "1a0218e5f3d0ca41f25d58704ddaaeb2adc73ea5", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/1a0218e5f3d0ca41f25d58704ddaaeb2adc73ea5", "message": "Update examples/metrics/src/main/java/io/opentelemetry/example/metrics/LongCounterExample.java\n\nCo-authored-by: Armin Ruech <armin.ruech@dynatrace.com>", "committedDate": "2020-06-04T15:47:53Z", "type": "commit"}, {"oid": "5ba3815b20e179f570687d7aab6c6774831a1720", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/5ba3815b20e179f570687d7aab6c6774831a1720", "message": "feat: apply review suggestions", "committedDate": "2020-06-04T16:21:04Z", "type": "commit"}, {"oid": "a954091661b1d3fbe3c92ff4cddb054d917c8a82", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/a954091661b1d3fbe3c92ff4cddb054d917c8a82", "message": "Update examples/metrics/src/main/java/io/opentelemetry/example/metrics/LongCounterExample.java\n\nCo-authored-by: Armin Ruech <armin.ruech@dynatrace.com>", "committedDate": "2020-06-04T19:53:11Z", "type": "commit"}, {"oid": "835ba967b625ab178acaab0a5331627ecd19a4a5", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/835ba967b625ab178acaab0a5331627ecd19a4a5", "message": "Update examples/metrics/src/main/java/io/opentelemetry/example/metrics/DoubleCounterExample.java\n\nCo-authored-by: Armin Ruech <armin.ruech@dynatrace.com>", "committedDate": "2020-06-04T19:54:16Z", "type": "commit"}, {"oid": "3e783bb372cc5f0735191f02341e9b501a4cd56f", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/3e783bb372cc5f0735191f02341e9b501a4cd56f", "message": "Update examples/metrics/src/main/java/io/opentelemetry/example/metrics/LongCounterExample.java\n\nCo-authored-by: Armin Ruech <armin.ruech@dynatrace.com>", "committedDate": "2020-06-04T19:55:06Z", "type": "commit"}]}