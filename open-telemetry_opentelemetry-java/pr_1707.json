{"pr_number": 1707, "pr_title": "Change the Sampler interface to allow a SamplingResult to update the TraceState", "pr_author": "jkwatson", "pr_createdAt": "2020-09-25T21:57:52Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java/pull/1707", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQyNjc1Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1707#discussion_r495426757", "body": "```suggestion\r\n     * <p>Note: if {@code null} is returned, the TraceState will be reset to {@link\r\n```\r\n\r\nOr I might remove this, this is not a nullable method so we don't want to indicate null is allowed. We just happen to have a default to prevent crashing in case that happens.", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * <p>Note: if a null is returned, the TraceState will be reset to {@link\n          \n          \n            \n                 * <p>Note: if {@code null} is returned, the TraceState will be reset to {@link\n          \n      \n    \n    \n  \n\nOr I might remove this, this is not a nullable method so we don't want to indicate null is allowed. We just happen to have a default to prevent crashing in case that happens.", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">     <span class=\"pl-k\">*</span> <span class=\"pl-k\">&lt;</span>p<span class=\"pl-k\">&gt;</span><span class=\"pl-smi\">Note</span><span class=\"pl-k\">:</span> <span class=\"pl-k\">if</span> <span class=\"x x-first x-last\">a</span> <span class=\"pl-c1\">null</span> is returned, the <span class=\"pl-smi\">TraceState</span> will be reset to {<span class=\"pl-k\">@link</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">     <span class=\"pl-k\">*</span> <span class=\"pl-k\">&lt;</span>p<span class=\"pl-k\">&gt;</span><span class=\"pl-smi\">Note</span><span class=\"pl-k\">:</span> <span class=\"pl-k\">if</span> <span class=\"x x-first\">{</span><span class=\"pl-k x x-last\">@code</span> <span class=\"pl-c1\">null</span><span class=\"x x-first x-last\">}</span> is returned, the <span class=\"pl-smi\">TraceState</span> will be reset to {<span class=\"pl-k\">@link</span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\">Or I might remove this, this is not a nullable method so we don't want to indicate null is allowed. We just happen to have a default to prevent crashing in case that happens.</p>", "author": "anuraaga", "createdAt": "2020-09-26T07:22:47Z", "path": "sdk/tracing/src/main/java/io/opentelemetry/sdk/trace/Sampler.java", "diffHunk": "@@ -88,5 +89,14 @@ SamplingResult shouldSample(\n      *     {@link Decision#RECORD_AND_SAMPLE}.\n      */\n     Attributes getAttributes();\n+\n+    /**\n+     * Return the {@link TraceState} that should be associated with the resulting Span. This may be\n+     * the same {@link TraceState} that was provided originally, or an updated one.\n+     *\n+     * <p>Note: if a null is returned, the TraceState will be reset to {@link", "originalCommit": "f23245425e088292de52b8e05773359bcf9080bb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU3NTA1OA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1707#discussion_r495575058", "bodyText": "Indeed, should we require non-null return value?", "author": "iNikem", "createdAt": "2020-09-27T13:49:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQyNjc1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTYwNjM3MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1707#discussion_r495606371", "bodyText": "The spec explicitly specifies the behavior for the null return, but I wouldn't have a problem making this non-nullable. It's easy enough for samplers to explicitly return TraceState.getInvalid() if that's what they want.", "author": "jkwatson", "createdAt": "2020-09-27T19:26:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQyNjc1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjAyMTIzNg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1707#discussion_r496021236", "bodyText": "Sorry..my comment above is wrong. I mis-read \"empty\" as \"null\" in the spec.", "author": "jkwatson", "createdAt": "2020-09-28T15:09:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQyNjc1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQ0NTU2Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1707#discussion_r495445567", "body": "If we use null (or some static final instance of TraceState) to indicate \"use parent tracestate\", we could keep the constant objects, conserving allocations.", "bodyText": "If we use null (or some static final instance of TraceState) to indicate \"use parent tracestate\", we could keep the constant objects, conserving allocations.", "bodyHTML": "<p dir=\"auto\">If we use null (or some static final instance of TraceState) to indicate \"use parent tracestate\", we could keep the constant objects, conserving allocations.</p>", "author": "Oberon00", "createdAt": "2020-09-26T11:04:40Z", "path": "sdk/tracing/src/main/java/io/opentelemetry/sdk/trace/Samplers.java", "diffHunk": "@@ -96,19 +92,20 @@ public static SamplingResult samplingResult(Decision decision, Attributes attrib\n    *\n    * <p>This is meant for use by custom {@link Sampler} implementations.\n    *\n-   * <p>Use {@link #samplingResult(Decision, Attributes)} if you need attributes.\n+   * <p>Use {@link #samplingResult(Decision, Attributes, TraceState)} if you need attributes.\n    *\n    * @param decision The decision made on the span.\n+   * @param traceState The {@link TraceState} to use.\n    * @return A {@link SamplingResult} with empty attributes and the provided {@code decision}.\n    */\n-  public static SamplingResult emptySamplingResult(Decision decision) {\n+  public static SamplingResult emptySamplingResult(Decision decision, TraceState traceState) {\n     switch (decision) {\n       case RECORD_AND_SAMPLE:\n-        return EMPTY_RECORDED_AND_SAMPLED_SAMPLING_RESULT;\n+        return SamplingResultImpl.createWithoutAttributes(Decision.RECORD_AND_SAMPLE, traceState);", "originalCommit": "f23245425e088292de52b8e05773359bcf9080bb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTYwNjQzMw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1707#discussion_r495606433", "bodyText": "yeah, but the spec describes the behavior for null, which is to invalidate the tracestate. :(", "author": "jkwatson", "createdAt": "2020-09-27T19:27:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQ0NTU2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTYwNzU2Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1707#discussion_r495607566", "bodyText": "OK, that was unintentional. But still, we could do private static final TraceState USE_PARENT = TraceState.builder.build()  and then check if the object identity of the contained tracestate == USE_PARENT.", "author": "Oberon00", "createdAt": "2020-09-27T19:38:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQ0NTU2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTcyOTU2MA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1707#discussion_r495729560", "bodyText": "I think the spec doesn't say anything about a null tracestate here, only an empty one: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/trace/sdk.md#shouldsample\n\n\nA Tracestate that will be associated with the Span through the new\nSpanContext.\nNote: If the sampler returns an empty Tracestate here, the Tracestate will be cleared,\nso samplers should normally return the passed-in Tracestate if they do not intend\nto change it.", "author": "Oberon00", "createdAt": "2020-09-28T07:07:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQ0NTU2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjAxOTUyMQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1707#discussion_r496019521", "bodyText": "You're right. I read that wrong. But, I don't think using null as a signal to use the parent is a great API. I'd rather have an explicit way for Samplers to signal that, rather than an implicit null.", "author": "jkwatson", "createdAt": "2020-09-28T15:08:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQ0NTU2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA1MTAyMg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1707#discussion_r496051022", "bodyText": "Agreed, null isn't a great API here. So maybe the sentinel object instance I mentioned above?", "author": "Oberon00", "createdAt": "2020-09-28T15:43:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQ0NTU2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjExMTgxNg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1707#discussion_r496111816", "bodyText": "I'm not sure yet. My main concern is making sure that Sampler authors have a clear obvious way to do it. At the moment, the Sampler interface forces everyone to think about whether to modify the TraceState or not, and I think the most common use-case will be to not modify the TraceState, but just use the existing parent's.\n@Oberon00 do you think it's worth opening up a spec issue to make it easier to do the \"right thing\" in our SDK, or do you think the current spec is flexible enough to allow default-behavior to be implemented (using a sentinel value, or explicit boolean attribute)?", "author": "jkwatson", "createdAt": "2020-09-28T17:18:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQ0NTU2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE2MTY5OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1707#discussion_r496161699", "bodyText": "I no one will complain that you violate the current spec if you make \"use parent\" the default somehow, but an editorial spec change / recommendation would make sense I think.", "author": "Oberon00", "createdAt": "2020-09-28T18:48:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQ0NTU2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE4ODE1Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1707#discussion_r496188156", "bodyText": "I decided to start with an issue:  open-telemetry/opentelemetry-specification#1031", "author": "jkwatson", "createdAt": "2020-09-28T19:39:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQ0NTU2Nw=="}], "type": "inlineReview"}, {"oid": "33ac2b472b0d5f966af47ccd6ada2c66d073f366", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/33ac2b472b0d5f966af47ccd6ada2c66d073f366", "message": "Change the SamplingResult API to allow a Function that will update the TraceState.", "committedDate": "2020-10-09T16:48:24Z", "type": "forcePushed"}, {"oid": "4524a201f37fc575d84076e0342f335cad97f5ed", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/4524a201f37fc575d84076e0342f335cad97f5ed", "message": "Change the Sampler interface to have the SamplingResult contain the TraceState to use.", "committedDate": "2020-10-12T16:59:51Z", "type": "commit"}, {"oid": "bf8747fe45a4d0f41ef4db36bc2692e48f5f446a", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/bf8747fe45a4d0f41ef4db36bc2692e48f5f446a", "message": "revert errant change from another PR", "committedDate": "2020-10-12T16:59:51Z", "type": "commit"}, {"oid": "ad4c85a0802f8cdd9bc4d5de147242c37d74d062", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/ad4c85a0802f8cdd9bc4d5de147242c37d74d062", "message": "Change the SamplingResult API to allow a Function that will update the TraceState.", "committedDate": "2020-10-12T16:59:51Z", "type": "commit"}, {"oid": "ba3b61f8fceedc8d1d0d9ce35a0279cc7644ce99", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/ba3b61f8fceedc8d1d0d9ce35a0279cc7644ce99", "message": "revert an odd change from a rebase", "committedDate": "2020-10-12T16:59:51Z", "type": "commit"}, {"oid": "55224f011bae0f37cdd106f3864ad2a525239fb5", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/55224f011bae0f37cdd106f3864ad2a525239fb5", "message": "Change the SamplingResult to not have a functional response a concrete one.", "committedDate": "2020-10-12T17:07:15Z", "type": "commit"}, {"oid": "55224f011bae0f37cdd106f3864ad2a525239fb5", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/55224f011bae0f37cdd106f3864ad2a525239fb5", "message": "Change the SamplingResult to not have a functional response a concrete one.", "committedDate": "2020-10-12T17:07:15Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQyODcwMw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1707#discussion_r503428703", "body": "We could document here that this will always be the same instance as the one passed to ShouldSample before.", "bodyText": "We could document here that this will always be the same instance as the one passed to ShouldSample before.", "bodyHTML": "<p dir=\"auto\">We could document here that this will always be the same instance as the one passed to ShouldSample before.</p>", "author": "Oberon00", "createdAt": "2020-10-12T17:12:02Z", "path": "sdk/tracing/src/main/java/io/opentelemetry/sdk/trace/Sampler.java", "diffHunk": "@@ -77,5 +79,16 @@ SamplingResult shouldSample(\n      *     {@link Decision#RECORD_AND_SAMPLE}.\n      */\n     Attributes getAttributes();\n+\n+    /**\n+     * Return an optionally-updated {@link TraceState}, based on the parent TraceState. This may\n+     * return the same {@link TraceState} that was provided originally, or an updated one.\n+     *\n+     * @param parentTraceState The TraceState from any parent span. Might be an empty TraceState, if", "originalCommit": "55224f011bae0f37cdd106f3864ad2a525239fb5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU3MDczOA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1707#discussion_r503570738", "bodyText": "good idea. done!", "author": "jkwatson", "createdAt": "2020-10-12T22:45:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQyODcwMw=="}], "type": "inlineReview"}, {"oid": "28a37ea61b00be48a2baa7cb2978ab93deb57c61", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/28a37ea61b00be48a2baa7cb2978ab93deb57c61", "message": "Add an additional bit of javadoc to the new method.", "committedDate": "2020-10-12T22:45:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY1MTUxOQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1707#discussion_r503651519", "body": "Thanks sorry for missing the allocation issue, got it. TBH this API still feels weird to me - having to call the sampler, and then the caller has to correctly call this method to get the trace state. \r\n\r\nI'm reading the discussion here\r\n\r\nhttps://github.com/open-telemetry/opentelemetry-java/pull/1707#discussion_r496019521\r\n\r\nand I'm personally not sure this functional style is that much better than `null` indicating a non-update, in a caller\r\n\r\n```\r\nspan.traceState = result.getUpdatedTraceState() != null ? result.getUpdatedTraceState() : parentTraceState;\r\n```\r\n\r\nseems more direct? It's true that there's no updated trace state, so use the non-updated one.\r\n\r\nOtherwise, another approach that is similar to this one but seems a bit nicer is having this sort of method on the `Sampler`, accepting the decision with the parent trace state. \"update trace state\" is a business logic operation, it's nice if that lives in the Sampler which has the logic, a result feels like it should be mostly constant.\r\n\r\nFinally, maybe we can just live with an extra allocation if it seems like a normal `getTraceState()` seems like a more intuitive API. Sampling result is very short lived, it may even be optimized away who knows.\r\n\r\nFood for thought, I don't really have a strong preference for any, but a small preference for eating the allocation.", "bodyText": "Thanks sorry for missing the allocation issue, got it. TBH this API still feels weird to me - having to call the sampler, and then the caller has to correctly call this method to get the trace state.\nI'm reading the discussion here\n#1707 (comment)\nand I'm personally not sure this functional style is that much better than null indicating a non-update, in a caller\nspan.traceState = result.getUpdatedTraceState() != null ? result.getUpdatedTraceState() : parentTraceState;\n\nseems more direct? It's true that there's no updated trace state, so use the non-updated one.\nOtherwise, another approach that is similar to this one but seems a bit nicer is having this sort of method on the Sampler, accepting the decision with the parent trace state. \"update trace state\" is a business logic operation, it's nice if that lives in the Sampler which has the logic, a result feels like it should be mostly constant.\nFinally, maybe we can just live with an extra allocation if it seems like a normal getTraceState() seems like a more intuitive API. Sampling result is very short lived, it may even be optimized away who knows.\nFood for thought, I don't really have a strong preference for any, but a small preference for eating the allocation.", "bodyHTML": "<p dir=\"auto\">Thanks sorry for missing the allocation issue, got it. TBH this API still feels weird to me - having to call the sampler, and then the caller has to correctly call this method to get the trace state.</p>\n<p dir=\"auto\">I'm reading the discussion here</p>\n<p dir=\"auto\"><a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"709307019\" data-permission-text=\"Title is private\" data-url=\"https://github.com/open-telemetry/opentelemetry-java/issues/1707\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/open-telemetry/opentelemetry-java/pull/1707/hovercard?comment_id=496019521&amp;comment_type=review_comment\" href=\"https://github.com/open-telemetry/opentelemetry-java/pull/1707#discussion_r496019521\">#1707 (comment)</a></p>\n<p dir=\"auto\">and I'm personally not sure this functional style is that much better than <code>null</code> indicating a non-update, in a caller</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"span.traceState = result.getUpdatedTraceState() != null ? result.getUpdatedTraceState() : parentTraceState;\"><pre><code>span.traceState = result.getUpdatedTraceState() != null ? result.getUpdatedTraceState() : parentTraceState;\n</code></pre></div>\n<p dir=\"auto\">seems more direct? It's true that there's no updated trace state, so use the non-updated one.</p>\n<p dir=\"auto\">Otherwise, another approach that is similar to this one but seems a bit nicer is having this sort of method on the <code>Sampler</code>, accepting the decision with the parent trace state. \"update trace state\" is a business logic operation, it's nice if that lives in the Sampler which has the logic, a result feels like it should be mostly constant.</p>\n<p dir=\"auto\">Finally, maybe we can just live with an extra allocation if it seems like a normal <code>getTraceState()</code> seems like a more intuitive API. Sampling result is very short lived, it may even be optimized away who knows.</p>\n<p dir=\"auto\">Food for thought, I don't really have a strong preference for any, but a small preference for eating the allocation.</p>", "author": "anuraaga", "createdAt": "2020-10-13T03:51:36Z", "path": "sdk/tracing/src/main/java/io/opentelemetry/sdk/trace/Sampler.java", "diffHunk": "@@ -77,5 +79,18 @@ SamplingResult shouldSample(\n      *     {@link Decision#RECORD_AND_SAMPLE}.\n      */\n     Attributes getAttributes();\n+\n+    /**\n+     * Return an optionally-updated {@link TraceState}, based on the parent TraceState. This may\n+     * return the same {@link TraceState} that was provided originally, or an updated one.\n+     *\n+     * @param parentTraceState The TraceState from the parent span. Might be an empty TraceState, if\n+     *     there is no parent. This will be the same TraceState that was passed in via the {@link\n+     *     SpanContext} parameter on the {@link #shouldSample(SpanContext, String, String, Kind,\n+     *     ReadableAttributes, List)} call.\n+     */\n+    default TraceState getUpdatedTraceState(TraceState parentTraceState) {", "originalCommit": "28a37ea61b00be48a2baa7cb2978ab93deb57c61", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY2NzUxMQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1707#discussion_r503667511", "bodyText": "The other reason to avoid \"eating the allocation\" is that we really want to make it super easy for \"normal\" samplers to do the right thing (that is, not modify the TraceState). I really dislike using \"null\" as a meaningful business result, but if y'all prefer that as the API, then I can get on board. What if we had it return Optional<TraceState> so the \"normal\" samplers can just have a constant Optional.empty()?", "author": "jkwatson", "createdAt": "2020-10-13T04:59:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY1MTUxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY4MDUwOQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1707#discussion_r503680509", "bodyText": "@anuraaga and I discussed offline and decided to stick with what we have right now; if someone actually uses this API and doesn't like how it works, we can definitely change it, since it's SDK-only functionality, and we can be a little more loose with making changes.", "author": "jkwatson", "createdAt": "2020-10-13T05:45:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY1MTUxOQ=="}], "type": "inlineReview"}]}