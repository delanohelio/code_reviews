{"pr_number": 1038, "pr_title": "test: end to end opentelemetry test with jaeger exporter", "pr_author": "DotSpy", "pr_createdAt": "2020-03-21T11:53:39Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java/pull/1038", "timeline": [{"oid": "ab63b26c0687c09eff050d0a1fa3a661ed8a4f3f", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/ab63b26c0687c09eff050d0a1fa3a661ed8a4f3f", "message": "test: end to end opentelemetry test with jaeger exporter", "committedDate": "2020-03-21T11:50:50Z", "type": "commit"}, {"oid": "924d2ef673ad609a9529a721afb7d98866b7d7b1", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/924d2ef673ad609a9529a721afb7d98866b7d7b1", "message": "fix: add license header", "committedDate": "2020-03-21T11:58:00Z", "type": "commit"}, {"oid": "68caa9089b7ef16e0c7fee4df6af16cf3868e503", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/68caa9089b7ef16e0c7fee4df6af16cf3868e503", "message": "build: circle ci use machine executor type\n\nhttps://www.testcontainers.org/supported_docker_environment/continuous_integration/circle_ci/", "committedDate": "2020-03-21T12:12:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjE4NDQwOA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1038#discussion_r396184408", "body": "Can we file an issue to remove the serviceName from the Jaeger config and use the Resource to define service? ", "bodyText": "Can we file an issue to remove the serviceName from the Jaeger config and use the Resource to define service?", "bodyHTML": "<p dir=\"auto\">Can we file an issue to remove the serviceName from the Jaeger config and use the Resource to define service?</p>", "author": "bogdandrutu", "createdAt": "2020-03-23T02:20:02Z", "path": "exporters/jaeger/src/test/java/io/opentelemetry/exporters/jaeger/JaegerIntegrationTest.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.exporters.jaeger;\n+\n+import static io.restassured.RestAssured.given;\n+\n+import io.grpc.ManagedChannel;\n+import io.grpc.ManagedChannelBuilder;\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.sdk.trace.export.SimpleSpansProcessor;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n+import io.restassured.http.ContentType;\n+import io.restassured.response.Response;\n+import java.util.Map;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.TimeUnit;\n+import org.awaitility.Awaitility;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.containers.wait.strategy.HttpWaitStrategy;\n+\n+@RunWith(JUnit4.class)\n+public class JaegerIntegrationTest {\n+\n+  private static final int QUERY_PORT = 16686;\n+  private static final int COLLECTOR_PORT = 14250;\n+  private static final String JAEGER_VERSION = \"1.17\";\n+  private static final String SERVICE_NAME = \"E2E-test\";\n+  private static final String JAEGER_IP = \"http://localhost\";\n+  private final Tracer tracer =\n+      OpenTelemetry.getTracerProvider()\n+          .get(\"io.opentelemetry.exporters.jaeger.JaegerIntegrationTest\");\n+  private JaegerGrpcSpanExporter jaegerExporter;\n+\n+  private void setupJaegerExporter() {\n+    ManagedChannel jaegerChannel =\n+        ManagedChannelBuilder.forAddress(\"127.0.0.1\", jaeger.getMappedPort(COLLECTOR_PORT))\n+            .usePlaintext()\n+            .build();\n+    this.jaegerExporter =\n+        JaegerGrpcSpanExporter.newBuilder()\n+            .setServiceName(SERVICE_NAME)", "originalCommit": "68caa9089b7ef16e0c7fee4df6af16cf3868e503", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjIzNzQ1Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1038#discussion_r396237453", "bodyText": "I would not rather removing, but adding a possibility to configure whole jaeger exporter with config file", "author": "DotSpy", "createdAt": "2020-03-23T06:41:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjE4NDQwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjI0NzM4NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1038#discussion_r396247385", "bodyText": "@bogdandrutu it exists already: #978", "author": "thisthat", "createdAt": "2020-03-23T07:14:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjE4NDQwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjI0NTEzNw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1038#discussion_r396245137", "body": "```suggestion\r\n  private static final String JAEGER_URL = \"http://localhost\";\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private static final String JAEGER_IP = \"http://localhost\";\n          \n          \n            \n              private static final String JAEGER_URL = \"http://localhost\";", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">  <span class=\"pl-k\">private</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">final</span> <span class=\"pl-smi\">String</span> <span class=\"pl-c1 x x-first x-last\">JAEGER_IP</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>http://localhost<span class=\"pl-pds\">\"</span></span>;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">  <span class=\"pl-k\">private</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">final</span> <span class=\"pl-smi\">String</span> <span class=\"pl-c1 x x-first x-last\">JAEGER_URL</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>http://localhost<span class=\"pl-pds\">\"</span></span>;</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "thisthat", "createdAt": "2020-03-23T07:07:18Z", "path": "exporters/jaeger/src/test/java/io/opentelemetry/exporters/jaeger/JaegerIntegrationTest.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.exporters.jaeger;\n+\n+import static io.restassured.RestAssured.given;\n+\n+import io.grpc.ManagedChannel;\n+import io.grpc.ManagedChannelBuilder;\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.sdk.trace.export.SimpleSpansProcessor;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n+import io.restassured.http.ContentType;\n+import io.restassured.response.Response;\n+import java.util.Map;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.TimeUnit;\n+import org.awaitility.Awaitility;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.containers.wait.strategy.HttpWaitStrategy;\n+\n+@RunWith(JUnit4.class)\n+public class JaegerIntegrationTest {\n+\n+  private static final int QUERY_PORT = 16686;\n+  private static final int COLLECTOR_PORT = 14250;\n+  private static final String JAEGER_VERSION = \"1.17\";\n+  private static final String SERVICE_NAME = \"E2E-test\";\n+  private static final String JAEGER_IP = \"http://localhost\";", "originalCommit": "68caa9089b7ef16e0c7fee4df6af16cf3868e503", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjI0NjA0Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1038#discussion_r396246046", "body": "Maybe use `getClass().getCanonicalName()`? ", "bodyText": "Maybe use getClass().getCanonicalName()?", "bodyHTML": "<p dir=\"auto\">Maybe use <code>getClass().getCanonicalName()</code>?</p>", "author": "thisthat", "createdAt": "2020-03-23T07:10:08Z", "path": "exporters/jaeger/src/test/java/io/opentelemetry/exporters/jaeger/JaegerIntegrationTest.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.exporters.jaeger;\n+\n+import static io.restassured.RestAssured.given;\n+\n+import io.grpc.ManagedChannel;\n+import io.grpc.ManagedChannelBuilder;\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.sdk.trace.export.SimpleSpansProcessor;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n+import io.restassured.http.ContentType;\n+import io.restassured.response.Response;\n+import java.util.Map;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.TimeUnit;\n+import org.awaitility.Awaitility;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.containers.wait.strategy.HttpWaitStrategy;\n+\n+@RunWith(JUnit4.class)\n+public class JaegerIntegrationTest {\n+\n+  private static final int QUERY_PORT = 16686;\n+  private static final int COLLECTOR_PORT = 14250;\n+  private static final String JAEGER_VERSION = \"1.17\";\n+  private static final String SERVICE_NAME = \"E2E-test\";\n+  private static final String JAEGER_IP = \"http://localhost\";\n+  private final Tracer tracer =\n+      OpenTelemetry.getTracerProvider()\n+          .get(\"io.opentelemetry.exporters.jaeger.JaegerIntegrationTest\");", "originalCommit": "68caa9089b7ef16e0c7fee4df6af16cf3868e503", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjI4MTM3NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1038#discussion_r396281375", "bodyText": "Thanks for review @thisthat actually i would like it, but in whole code in project i saw we using string approach", "author": "DotSpy", "createdAt": "2020-03-23T08:33:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjI0NjA0Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjI0NjY2OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1038#discussion_r396246669", "body": "I would move this method after the definition of the jaeger container", "bodyText": "I would move this method after the definition of the jaeger container", "bodyHTML": "<p dir=\"auto\">I would move this method after the definition of the jaeger container</p>", "author": "thisthat", "createdAt": "2020-03-23T07:12:12Z", "path": "exporters/jaeger/src/test/java/io/opentelemetry/exporters/jaeger/JaegerIntegrationTest.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.exporters.jaeger;\n+\n+import static io.restassured.RestAssured.given;\n+\n+import io.grpc.ManagedChannel;\n+import io.grpc.ManagedChannelBuilder;\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.sdk.trace.export.SimpleSpansProcessor;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n+import io.restassured.http.ContentType;\n+import io.restassured.response.Response;\n+import java.util.Map;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.TimeUnit;\n+import org.awaitility.Awaitility;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.containers.wait.strategy.HttpWaitStrategy;\n+\n+@RunWith(JUnit4.class)\n+public class JaegerIntegrationTest {\n+\n+  private static final int QUERY_PORT = 16686;\n+  private static final int COLLECTOR_PORT = 14250;\n+  private static final String JAEGER_VERSION = \"1.17\";\n+  private static final String SERVICE_NAME = \"E2E-test\";\n+  private static final String JAEGER_IP = \"http://localhost\";\n+  private final Tracer tracer =\n+      OpenTelemetry.getTracerProvider()\n+          .get(\"io.opentelemetry.exporters.jaeger.JaegerIntegrationTest\");\n+  private JaegerGrpcSpanExporter jaegerExporter;\n+\n+  private void setupJaegerExporter() {", "originalCommit": "68caa9089b7ef16e0c7fee4df6af16cf3868e503", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjI0ODA0OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1038#discussion_r396248049", "bodyText": "Also, WDYT about adding @before?", "author": "thisthat", "createdAt": "2020-03-23T07:16:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjI0NjY2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjI0ODE5Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1038#discussion_r396248196", "body": "this can be add to a SetUp method - see my other comment", "bodyText": "this can be add to a SetUp method - see my other comment", "bodyHTML": "<p dir=\"auto\">this can be add to a SetUp method - see my other comment</p>", "author": "thisthat", "createdAt": "2020-03-23T07:16:40Z", "path": "exporters/jaeger/src/test/java/io/opentelemetry/exporters/jaeger/JaegerIntegrationTest.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.exporters.jaeger;\n+\n+import static io.restassured.RestAssured.given;\n+\n+import io.grpc.ManagedChannel;\n+import io.grpc.ManagedChannelBuilder;\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.sdk.trace.export.SimpleSpansProcessor;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n+import io.restassured.http.ContentType;\n+import io.restassured.response.Response;\n+import java.util.Map;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.TimeUnit;\n+import org.awaitility.Awaitility;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.containers.wait.strategy.HttpWaitStrategy;\n+\n+@RunWith(JUnit4.class)\n+public class JaegerIntegrationTest {\n+\n+  private static final int QUERY_PORT = 16686;\n+  private static final int COLLECTOR_PORT = 14250;\n+  private static final String JAEGER_VERSION = \"1.17\";\n+  private static final String SERVICE_NAME = \"E2E-test\";\n+  private static final String JAEGER_IP = \"http://localhost\";\n+  private final Tracer tracer =\n+      OpenTelemetry.getTracerProvider()\n+          .get(\"io.opentelemetry.exporters.jaeger.JaegerIntegrationTest\");\n+  private JaegerGrpcSpanExporter jaegerExporter;\n+\n+  private void setupJaegerExporter() {\n+    ManagedChannel jaegerChannel =\n+        ManagedChannelBuilder.forAddress(\"127.0.0.1\", jaeger.getMappedPort(COLLECTOR_PORT))\n+            .usePlaintext()\n+            .build();\n+    this.jaegerExporter =\n+        JaegerGrpcSpanExporter.newBuilder()\n+            .setServiceName(SERVICE_NAME)\n+            .setChannel(jaegerChannel)\n+            .setDeadlineMs(30000)\n+            .build();\n+    OpenTelemetrySdk.getTracerProvider()\n+        .addSpanProcessor(SimpleSpansProcessor.newBuilder(this.jaegerExporter).build());\n+  }\n+\n+  @SuppressWarnings(\"rawtypes\")\n+  @ClassRule\n+  public static GenericContainer jaeger =\n+      new GenericContainer(\"jaegertracing/all-in-one:\" + JAEGER_VERSION)\n+          .withExposedPorts(COLLECTOR_PORT, QUERY_PORT)\n+          .waitingFor(new HttpWaitStrategy().forPath(\"/\"));\n+\n+  @Test\n+  public void testJaegerIntegration() {\n+    setupJaegerExporter();", "originalCommit": "68caa9089b7ef16e0c7fee4df6af16cf3868e503", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjI4MzM2OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1038#discussion_r396283369", "bodyText": "yeap good point", "author": "DotSpy", "createdAt": "2020-03-23T08:37:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjI0ODE5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAzMjYzNg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1038#discussion_r398032636", "bodyText": "You should remove the call to  setupJaegerExporter();", "author": "bogdandrutu", "createdAt": "2020-03-25T17:20:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjI0ODE5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQzNTMyNw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1038#discussion_r398435327", "bodyText": "yeap, forgot, done", "author": "DotSpy", "createdAt": "2020-03-26T09:41:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjI0ODE5Ng=="}], "type": "inlineReview"}, {"oid": "387d07be42b35bd96758cb0097f19f1a275e58c9", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/387d07be42b35bd96758cb0097f19f1a275e58c9", "message": "Update exporters/jaeger/src/test/java/io/opentelemetry/exporters/jaeger/JaegerIntegrationTest.java\n\nCo-Authored-By: Giovanni Liva <giovanni.liva@dynatrace.com>", "committedDate": "2020-03-23T08:31:49Z", "type": "commit"}, {"oid": "81d6c4c0f0bf72d87b8a8b458d3b650b31a32328", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/81d6c4c0f0bf72d87b8a8b458d3b650b31a32328", "message": "refactor: apply review suggestions", "committedDate": "2020-03-23T17:37:18Z", "type": "commit"}, {"oid": "fa6d91741c99f5534786d5dd4bc563c7cc23030e", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/fa6d91741c99f5534786d5dd4bc563c7cc23030e", "message": "style: apply google code style", "committedDate": "2020-03-23T17:40:21Z", "type": "commit"}, {"oid": "9cf3a96300e1373e9b307ed8593729b42ad74423", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/9cf3a96300e1373e9b307ed8593729b42ad74423", "message": "docs: add comment explaining why executor type machine", "committedDate": "2020-03-24T17:47:11Z", "type": "commit"}, {"oid": "1e886f5204e401d6c74895f4866f3b449ba743b3", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/1e886f5204e401d6c74895f4866f3b449ba743b3", "message": "fix: remove setup as it run via @Before", "committedDate": "2020-03-26T09:32:04Z", "type": "commit"}]}