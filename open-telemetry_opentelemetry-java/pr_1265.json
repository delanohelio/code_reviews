{"pr_number": 1265, "pr_title": "Add API for ValueObserver", "pr_author": "bogdandrutu", "pr_createdAt": "2020-05-21T21:42:00Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java/pull/1265", "timeline": [{"oid": "c5205b20408f3d5ce650e0f8f0d892a421e9b28f", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/c5205b20408f3d5ce650e0f8f0d892a421e9b28f", "message": "Add API for ValueObserver\n\nSigned-off-by: Bogdan Drutu <bogdandrutu@gmail.com>", "committedDate": "2020-05-21T21:41:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODkzMzA5Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1265#discussion_r428933092", "body": "0.5.0 , here and below", "bodyText": "0.5.0 , here and below", "bodyHTML": "<p dir=\"auto\">0.5.0 , here and below</p>", "author": "jkwatson", "createdAt": "2020-05-21T21:44:03Z", "path": "api/src/main/java/io/opentelemetry/metrics/Meter.java", "diffHunk": "@@ -166,6 +166,32 @@\n    */\n   LongUpDownSumObserver.Builder longUpDownSumObserverBuilder(String name);\n \n+  /**\n+   * Returns a new builder for a {@link DoubleValueObserver}.\n+   *\n+   * @param name the name of the instrument. Should be a ASCII string with a length no greater than\n+   *     255 characters.\n+   * @return a new builder for a {@code DoubleValueObserver}.\n+   * @throws NullPointerException if {@code name} is null.\n+   * @throws IllegalArgumentException if different metric with the same name already registered.\n+   * @throws IllegalArgumentException if the {@code name} does not match the requirements.\n+   * @since 0.1.0", "originalCommit": "c5205b20408f3d5ce650e0f8f0d892a421e9b28f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk0NjY5NA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1265#discussion_r428946694", "bodyText": "Done.", "author": "bogdandrutu", "createdAt": "2020-05-21T22:19:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODkzMzA5Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODkzMzI1Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1265#discussion_r428933253", "body": "probably `@since 0.5.0`", "bodyText": "probably @since 0.5.0", "bodyHTML": "<p dir=\"auto\">probably <code>@since 0.5.0</code></p>", "author": "jkwatson", "createdAt": "2020-05-21T21:44:28Z", "path": "api/src/main/java/io/opentelemetry/metrics/LongValueObserver.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.metrics;\n+\n+import io.opentelemetry.metrics.LongValueObserver.ResultLongValueObserver;\n+import java.util.Map;\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+/**\n+ * {@code ValueObserver} is the asynchronous instrument corresponding to ValueRecorder, used to\n+ * capture values that are treated as individual with Observe(value).\n+ *\n+ * <p>A {@code ValueObserver} is a good choice in situations where a measurement is expensive to\n+ * compute, such that it would be wasteful to compute on every request.\n+ *\n+ * <p>Example:\n+ *\n+ * <pre>{@code\n+ * class YourClass {\n+ *\n+ *   private static final Meter meter = OpenTelemetry.getMeterRegistry().get(\"my_library_name\");\n+ *   private static final LongSumObserver cpuObserver =\n+ *       meter.\n+ *           .longSumObserverBuilder(\"cpu_fan_speed\")\n+ *           .setDescription(\"System CPU fan speed\")\n+ *           .setUnit(\"ms\")\n+ *           .build();\n+ *\n+ *   void init() {\n+ *     cpuObserver.setCallback(\n+ *         new LongSumObserver.Callback<ResultLongSumObserver>() {\n+ *          {@literal @}Override\n+ *           public void update(ResultLongSumObserver result) {\n+ *             // Get system cpu fan speed\n+ *             result.observe(cpuFanSpeed);\n+ *           }\n+ *         });\n+ *   }\n+ * }\n+ * }</pre>\n+ *\n+ * @since 0.1.0", "originalCommit": "c5205b20408f3d5ce650e0f8f0d892a421e9b28f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk0NjcwMg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1265#discussion_r428946702", "bodyText": "Done.", "author": "bogdandrutu", "createdAt": "2020-05-21T22:19:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODkzMzI1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODkzMzk0MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1265#discussion_r428933941", "body": "```suggestion\r\n * capture values that are treated as individual with observe(value).\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * capture values that are treated as individual with Observe(value).\n          \n          \n            \n             * capture values that are treated as individual with observe(value).", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"> <span class=\"pl-k\">*</span> capture values that are treated as individual with <span class=\"x x-first x-last\">Observe</span>(value)<span class=\"pl-c1\">.</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\"> <span class=\"pl-k\">*</span> capture values that are treated as individual with <span class=\"x x-first x-last\">observe</span>(value)<span class=\"pl-c1\">.</span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "jkwatson", "createdAt": "2020-05-21T21:46:03Z", "path": "api/src/main/java/io/opentelemetry/metrics/DoubleValueObserver.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.metrics;\n+\n+import io.opentelemetry.metrics.DoubleValueObserver.ResultDoubleValueObserver;\n+import java.util.Map;\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+/**\n+ * {@code ValueObserver} is the asynchronous instrument corresponding to ValueRecorder, used to\n+ * capture values that are treated as individual with Observe(value).", "originalCommit": "c5205b20408f3d5ce650e0f8f0d892a421e9b28f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODkzNDQ2MA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1265#discussion_r428934460", "bodyText": "maybe better:  \"capture values that are treated as individual observations, recorded with the observe(value) method\"", "author": "jkwatson", "createdAt": "2020-05-21T21:47:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODkzMzk0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk0NjE4OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1265#discussion_r428946189", "bodyText": "Done.", "author": "bogdandrutu", "createdAt": "2020-05-21T22:18:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODkzMzk0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODkzNDg0Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1265#discussion_r428934847", "body": "```suggestion\r\n *   private static final DoubleValueObserver cpuObserver =\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             *   private static final DoubleSumObserver cpuObserver =\n          \n          \n            \n             *   private static final DoubleValueObserver cpuObserver =", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"> <span class=\"pl-k\">*</span>   <span class=\"pl-k\">private</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">final</span> <span class=\"pl-smi x x-first x-last\">DoubleSumObserver</span> cpuObserver <span class=\"pl-k\">=</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\"> <span class=\"pl-k\">*</span>   <span class=\"pl-k\">private</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">final</span> <span class=\"pl-smi x x-first x-last\">DoubleValueObserver</span> cpuObserver <span class=\"pl-k\">=</span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "jkwatson", "createdAt": "2020-05-21T21:48:25Z", "path": "api/src/main/java/io/opentelemetry/metrics/DoubleValueObserver.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.metrics;\n+\n+import io.opentelemetry.metrics.DoubleValueObserver.ResultDoubleValueObserver;\n+import java.util.Map;\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+/**\n+ * {@code ValueObserver} is the asynchronous instrument corresponding to ValueRecorder, used to\n+ * capture values that are treated as individual with Observe(value).\n+ *\n+ * <p>A {@code ValueObserver} is a good choice in situations where a measurement is expensive to\n+ * compute, such that it would be wasteful to compute on every request.\n+ *\n+ * <p>Example:\n+ *\n+ * <pre>{@code\n+ * class YourClass {\n+ *\n+ *   private static final Meter meter = OpenTelemetry.getMeterRegistry().get(\"my_library_name\");\n+ *   private static final DoubleSumObserver cpuObserver =", "originalCommit": "c5205b20408f3d5ce650e0f8f0d892a421e9b28f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk0NjM2MA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1265#discussion_r428946360", "bodyText": "Done.", "author": "bogdandrutu", "createdAt": "2020-05-21T22:18:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODkzNDg0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODkzNDk0Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1265#discussion_r428934947", "body": "```suggestion\r\n *           .doubleValueObserverBuilder(\"cpu_temperature\")\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             *           .doubleSumObserverBuilder(\"cpu_temperature\")\n          \n          \n            \n             *           .doubleValueObserverBuilder(\"cpu_temperature\")", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"> <span class=\"pl-k\">*</span>           .<span class=\"x x-first x-last\">doubleSumObserverBuilder</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>cpu_temperature<span class=\"pl-pds\">\"</span></span>)</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\"> <span class=\"pl-k\">*</span>           .<span class=\"x x-first x-last\">doubleValueObserverBuilder</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>cpu_temperature<span class=\"pl-pds\">\"</span></span>)</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "jkwatson", "createdAt": "2020-05-21T21:48:40Z", "path": "api/src/main/java/io/opentelemetry/metrics/DoubleValueObserver.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.metrics;\n+\n+import io.opentelemetry.metrics.DoubleValueObserver.ResultDoubleValueObserver;\n+import java.util.Map;\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+/**\n+ * {@code ValueObserver} is the asynchronous instrument corresponding to ValueRecorder, used to\n+ * capture values that are treated as individual with Observe(value).\n+ *\n+ * <p>A {@code ValueObserver} is a good choice in situations where a measurement is expensive to\n+ * compute, such that it would be wasteful to compute on every request.\n+ *\n+ * <p>Example:\n+ *\n+ * <pre>{@code\n+ * class YourClass {\n+ *\n+ *   private static final Meter meter = OpenTelemetry.getMeterRegistry().get(\"my_library_name\");\n+ *   private static final DoubleSumObserver cpuObserver =\n+ *       meter.\n+ *           .doubleSumObserverBuilder(\"cpu_temperature\")", "originalCommit": "c5205b20408f3d5ce650e0f8f0d892a421e9b28f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk0NjM1MA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1265#discussion_r428946350", "bodyText": "Done.", "author": "bogdandrutu", "createdAt": "2020-05-21T22:18:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODkzNDk0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODkzNTE2NA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1265#discussion_r428935164", "body": "needs to be updated for s/sum/value/i", "bodyText": "needs to be updated for s/sum/value/i", "bodyHTML": "<p dir=\"auto\">needs to be updated for s/sum/value/i</p>", "author": "jkwatson", "createdAt": "2020-05-21T21:49:17Z", "path": "api/src/main/java/io/opentelemetry/metrics/DoubleValueObserver.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.metrics;\n+\n+import io.opentelemetry.metrics.DoubleValueObserver.ResultDoubleValueObserver;\n+import java.util.Map;\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+/**\n+ * {@code ValueObserver} is the asynchronous instrument corresponding to ValueRecorder, used to\n+ * capture values that are treated as individual with Observe(value).\n+ *\n+ * <p>A {@code ValueObserver} is a good choice in situations where a measurement is expensive to\n+ * compute, such that it would be wasteful to compute on every request.\n+ *\n+ * <p>Example:\n+ *\n+ * <pre>{@code\n+ * class YourClass {\n+ *\n+ *   private static final Meter meter = OpenTelemetry.getMeterRegistry().get(\"my_library_name\");\n+ *   private static final DoubleSumObserver cpuObserver =\n+ *       meter.\n+ *           .doubleSumObserverBuilder(\"cpu_temperature\")\n+ *           .setDescription(\"System CPU temperature\")\n+ *           .setUnit(\"ms\")\n+ *           .build();\n+ *\n+ *   void init() {\n+ *     cpuObserver.setCallback(\n+ *         new DoubleSumObserver.Callback<ResultDoubleSumObserver>() {", "originalCommit": "c5205b20408f3d5ce650e0f8f0d892a421e9b28f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk0NjQzMA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1265#discussion_r428946430", "bodyText": "Done.", "author": "bogdandrutu", "createdAt": "2020-05-21T22:19:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODkzNTE2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODkzOTI3Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1265#discussion_r428939273", "body": "all the same comments from the DoubleValueObserver apply in here, as well.", "bodyText": "all the same comments from the DoubleValueObserver apply in here, as well.", "bodyHTML": "<p dir=\"auto\">all the same comments from the DoubleValueObserver apply in here, as well.</p>", "author": "jkwatson", "createdAt": "2020-05-21T21:59:24Z", "path": "api/src/main/java/io/opentelemetry/metrics/LongValueObserver.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.metrics;\n+\n+import io.opentelemetry.metrics.LongValueObserver.ResultLongValueObserver;\n+import java.util.Map;\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+/**\n+ * {@code ValueObserver} is the asynchronous instrument corresponding to ValueRecorder, used to\n+ * capture values that are treated as individual with Observe(value).", "originalCommit": "c5205b20408f3d5ce650e0f8f0d892a421e9b28f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk0NjQ3OA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1265#discussion_r428946478", "bodyText": "Done.", "author": "bogdandrutu", "createdAt": "2020-05-21T22:19:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODkzOTI3Mw=="}], "type": "inlineReview"}, {"oid": "0b5c2bfc0fa3faed94f71fcd6575ac7ab08ff10a", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/0b5c2bfc0fa3faed94f71fcd6575ac7ab08ff10a", "message": "Address feedback\n\nSigned-off-by: Bogdan Drutu <bogdandrutu@gmail.com>", "committedDate": "2020-05-21T22:19:34Z", "type": "commit"}]}