{"pr_number": 1521, "pr_title": "Changed TraceConfigz zPage form to use POST request", "pr_author": "wtyanan", "pr_createdAt": "2020-08-07T17:00:11Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java/pull/1521", "timeline": [{"oid": "ec31e3e9cb0212c75133331290246b258f445b13", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/ec31e3e9cb0212c75133331290246b258f445b13", "message": "Removed URLEncoder", "committedDate": "2020-07-18T00:27:58Z", "type": "commit"}, {"oid": "e0fe0ede7bbd0e660feab6b0eac647f972224a12", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/e0fe0ede7bbd0e660feab6b0eac647f972224a12", "message": "Fixed typo", "committedDate": "2020-07-18T00:44:15Z", "type": "commit"}, {"oid": "cf7f5c8f7890ffb19aabcd675ca4bcc7f4a5739a", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/cf7f5c8f7890ffb19aabcd675ca4bcc7f4a5739a", "message": "Added URLDecoding", "committedDate": "2020-07-20T21:20:21Z", "type": "commit"}, {"oid": "9db8e7e6edd7b8188fe3b4deda6b091cf2f92a66", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/9db8e7e6edd7b8188fe3b4deda6b091cf2f92a66", "message": "Included comment for string replacement", "committedDate": "2020-07-20T21:29:32Z", "type": "commit"}, {"oid": "412797843fe71d406538cd0173d414afd3872019", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/412797843fe71d406538cd0173d414afd3872019", "message": "Added unit tests for special characters in span names", "committedDate": "2020-07-20T23:50:41Z", "type": "commit"}, {"oid": "e17c337050a0c57947eea07b53c36393805fc3e3", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/e17c337050a0c57947eea07b53c36393805fc3e3", "message": "Resolved URL decoding issues", "committedDate": "2020-07-21T20:34:47Z", "type": "commit"}, {"oid": "bb58b26018ed710133ff0493894b58d70b977640", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/bb58b26018ed710133ff0493894b58d70b977640", "message": "Moved url decoding to parseQueryMap and updated the corresponding unit tests", "committedDate": "2020-07-21T22:08:18Z", "type": "commit"}, {"oid": "80a5ccf2b19dbdb2cd3fad4a968962318131883f", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/80a5ccf2b19dbdb2cd3fad4a968962318131883f", "message": "Added a README file for zPage quickstart", "committedDate": "2020-07-22T20:39:04Z", "type": "commit"}, {"oid": "dcbd9aa23db84e85639a17f02f25d2e54d5b5f4b", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/dcbd9aa23db84e85639a17f02f25d2e54d5b5f4b", "message": "Add images for README", "committedDate": "2020-07-22T20:42:13Z", "type": "commit"}, {"oid": "24ffce2bb7b6a24ba3ad8e86e476710be7ccd76a", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/24ffce2bb7b6a24ba3ad8e86e476710be7ccd76a", "message": "Updated README", "committedDate": "2020-07-22T21:02:18Z", "type": "commit"}, {"oid": "5047849b2843b486649d3a286cc36ab627f76901", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/5047849b2843b486649d3a286cc36ab627f76901", "message": "Add frontend images", "committedDate": "2020-07-22T21:52:04Z", "type": "commit"}, {"oid": "85a539ed8b5539985017b3a96e9539dd11f70aa1", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/85a539ed8b5539985017b3a96e9539dd11f70aa1", "message": "Add backend images", "committedDate": "2020-07-22T22:05:05Z", "type": "commit"}, {"oid": "4156123799670059e9ea44cb1a0174b8a65c9aed", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/4156123799670059e9ea44cb1a0174b8a65c9aed", "message": "Added our design doc", "committedDate": "2020-07-22T23:32:06Z", "type": "commit"}, {"oid": "265cf27c704f368c0b28c04c555568f1be926e9a", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/265cf27c704f368c0b28c04c555568f1be926e9a", "message": "Added details on package", "committedDate": "2020-07-23T17:19:22Z", "type": "commit"}, {"oid": "c102e45b016ccb12458c3f657fe8cf64c0cc5d2a", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/c102e45b016ccb12458c3f657fe8cf64c0cc5d2a", "message": "Reworded a few lines", "committedDate": "2020-07-23T19:17:16Z", "type": "commit"}, {"oid": "e977dcf1146700915bbe6d1a2d095aaa79ed131f", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/e977dcf1146700915bbe6d1a2d095aaa79ed131f", "message": "Merge branch 'master' of https://github.com/open-telemetry/opentelemetry-java into master", "committedDate": "2020-07-23T19:26:44Z", "type": "commit"}, {"oid": "ed8ef33353ece317374cb46b29209c030781460c", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/ed8ef33353ece317374cb46b29209c030781460c", "message": "Moved DESIGN.md to a docs folder and changed gradle config to implementation", "committedDate": "2020-07-24T17:09:38Z", "type": "commit"}, {"oid": "f595909769797804702ce7ccca807df9b177e197", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/f595909769797804702ce7ccca807df9b177e197", "message": "Changed wording regarding HttpServer requirement", "committedDate": "2020-07-27T14:34:34Z", "type": "commit"}, {"oid": "806b6322ef2e6440c0569e255ffa954cf97da42d", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/806b6322ef2e6440c0569e255ffa954cf97da42d", "message": "Added zpages folder under docs, resolved broken image links", "committedDate": "2020-07-27T15:12:53Z", "type": "commit"}, {"oid": "9e4dde8cdcae5bcd69322b04d30fd4b3d85887c2", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/9e4dde8cdcae5bcd69322b04d30fd4b3d85887c2", "message": "Resolved comments for the design md file", "committedDate": "2020-07-27T18:00:10Z", "type": "commit"}, {"oid": "86c2a517f201cc217acf5f747a62dd55078cafa1", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/86c2a517f201cc217acf5f747a62dd55078cafa1", "message": "Made a few wording changes", "committedDate": "2020-07-27T20:40:52Z", "type": "commit"}, {"oid": "a3c9a5a03bb2e2ea9ad1d62eadc3110794c5c823", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/a3c9a5a03bb2e2ea9ad1d62eadc3110794c5c823", "message": "Wrote a benchmark test for TracezSpanBuckets (#23)\n\n* Scaffolded logic for basic benchmark tests\r\n\r\n* Wrote benchmark tests for TracezSpanBuckets\r\n\r\n* Updated README with benchmark tests\r\n\r\n* Changed the wording slightly", "committedDate": "2020-07-29T22:02:47Z", "type": "commit"}, {"oid": "07b2fcf7564f64347c0d4fa4b2e482fec28d247e", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/07b2fcf7564f64347c0d4fa4b2e482fec28d247e", "message": "Updated README file (#25)", "committedDate": "2020-08-04T18:57:44Z", "type": "commit"}, {"oid": "542f7569c7d47c1565c76912bdddd7ab245c429f", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/542f7569c7d47c1565c76912bdddd7ab245c429f", "message": "Wrote benchmark tests for TracezDataAggregator (#24)\n\n* Scaffolded logic for basic benchmark tests\r\n\r\n* Wrote benchmark tests for TracezSpanBuckets\r\n\r\n* Updated README with benchmark tests\r\n\r\n* Changed the wording slightly\r\n\r\n* Added a set of benchmark tests for TracezDataAggregator\r\n\r\n* Modified README formatting\r\n\r\n* Changed benchmark test to negate dead code elimination", "committedDate": "2020-08-04T22:17:07Z", "type": "commit"}, {"oid": "fe056e3a4dce4816efd2c6e3a7ae626a54e396bc", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/fe056e3a4dce4816efd2c6e3a7ae626a54e396bc", "message": "Merged with original repo", "committedDate": "2020-08-04T22:20:58Z", "type": "commit"}, {"oid": "f714b4397ad69538999336a4283c08c7a1b0e0a9", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/f714b4397ad69538999336a4283c08c7a1b0e0a9", "message": "Added Javadocs to the TracezDataAggregator benchmark tests", "committedDate": "2020-08-05T00:27:38Z", "type": "commit"}, {"oid": "922e95059d3616de987e26e7b127d7924cca8358", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/922e95059d3616de987e26e7b127d7924cca8358", "message": "Removed benchmark results from README and added a param to the TracezDataAggregator benchmark tests", "committedDate": "2020-08-05T20:15:45Z", "type": "commit"}, {"oid": "13d82c49fb7daa1bdeb2640dbfca59fdb275cb5d", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/13d82c49fb7daa1bdeb2640dbfca59fdb275cb5d", "message": "Update sdk_extensions/zpages/src/jmh/java/io/opentelemetry/sdk/extensions/zpages/TracezDataAggregatorBenchmark.java\n\nCo-authored-by: Anuraag Agrawal <anuraaga@gmail.com>", "committedDate": "2020-08-06T17:40:54Z", "type": "commit"}, {"oid": "5ab6f6afdbb19f3cb393ccb3be29fe4dd1893556", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/5ab6f6afdbb19f3cb393ccb3be29fe4dd1893556", "message": "Added multiple param values for TracezDataAggregatorBenchmark", "committedDate": "2020-08-06T18:10:19Z", "type": "commit"}, {"oid": "18a4141a519f15b4fa308d36501585f0f5c3f20d", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/18a4141a519f15b4fa308d36501585f0f5c3f20d", "message": "Merge branch 'master' of github.com:williamhu99/opentelemetry-java into master", "committedDate": "2020-08-06T18:10:36Z", "type": "commit"}, {"oid": "0ad0ebeb473923d138ac0921ee8c779497d55b81", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/0ad0ebeb473923d138ac0921ee8c779497d55b81", "message": "Merged with OpenTelemetry repo for latest updates", "committedDate": "2020-08-07T14:36:53Z", "type": "commit"}, {"oid": "48138f77a0be0663033400a516c58c7f755e2531", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/48138f77a0be0663033400a516c58c7f755e2531", "message": "Changed TraceConfigz zPage form submit to use POST request", "committedDate": "2020-08-07T16:40:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzIxNzE0OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1521#discussion_r467217149", "body": "Is this saying that using the GET request still works?", "bodyText": "Is this saying that using the GET request still works?", "bodyHTML": "<p dir=\"auto\">Is this saying that using the GET request still works?</p>", "author": "v-y-l", "createdAt": "2020-08-07T19:00:08Z", "path": "sdk_extensions/zpages/src/test/java/io/opentelemetry/sdk/extensions/zpages/ZPageHttpHandlerTest.java", "diffHunk": "@@ -29,14 +29,19 @@\n   @Test\n   void parseEmptyQuery() throws URISyntaxException, UnsupportedEncodingException {\n     URI uri = new URI(\"http://localhost:8000/tracez\");\n+    String queryString = \"\";\n     assertThat(ZPageHttpHandler.parseQueryMap(uri)).isEmpty();\n+    assertThat(ZPageHttpHandler.parseQueryMap(queryString)).isEmpty();\n   }\n \n   @Test\n   void parseNormalQuery() throws URISyntaxException, UnsupportedEncodingException {\n     URI uri =\n         new URI(\"http://localhost:8000/tracez/tracez?zspanname=Test&ztype=1&zsubtype=5&noval\");\n+    String queryString = \"zspanname=Test&ztype=1&zsubtype=5&noval\";\n     assertThat(ZPageHttpHandler.parseQueryMap(uri))", "originalCommit": "48138f77a0be0663033400a516c58c7f755e2531", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzIxNzk1OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1521#discussion_r467217959", "bodyText": "TraceZ still uses GET request for displaying information", "author": "wtyanan", "createdAt": "2020-08-07T19:01:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzIxNzE0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzIyMDE4NA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1521#discussion_r467220184", "bodyText": "Thinking of this now, GET request can still work on TraceConfigZ page, I should try to limit to POST request only", "author": "wtyanan", "createdAt": "2020-08-07T19:05:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzIxNzE0OQ=="}], "type": "inlineReview"}, {"oid": "1eb533251f71b9b3b3a0bd8692d2ac3506d49cce", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/1eb533251f71b9b3b3a0bd8692d2ac3506d49cce", "message": "Added requestMethod parameter to emitHtml, limited TraceConfig change on POST request only", "committedDate": "2020-08-07T19:31:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM0OTg4OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1521#discussion_r467349889", "body": "Does it work to just use `CharStreams.toString(httpExchange.getRequestBody())`?\r\n\r\nAlso don't forget to close it.", "bodyText": "Does it work to just use CharStreams.toString(httpExchange.getRequestBody())?\nAlso don't forget to close it.", "bodyHTML": "<p dir=\"auto\">Does it work to just use <code>CharStreams.toString(httpExchange.getRequestBody())</code>?</p>\n<p dir=\"auto\">Also don't forget to close it.</p>", "author": "anuraaga", "createdAt": "2020-08-08T02:22:23Z", "path": "sdk_extensions/zpages/src/main/java/io/opentelemetry/sdk/extensions/zpages/ZPageHttpHandler.java", "diffHunk": "@@ -75,9 +103,20 @@\n   @Override\n   public final void handle(HttpExchange httpExchange) throws IOException {\n     try {\n+      String requestMethod = httpExchange.getRequestMethod();\n       httpExchange.sendResponseHeaders(200, 0);\n-      zpageHandler.emitHtml(\n-          parseQueryMap(httpExchange.getRequestURI()), httpExchange.getResponseBody());\n+      if (requestMethod.equalsIgnoreCase(\"get\")) {\n+        zpageHandler.emitHtml(\n+            requestMethod,\n+            parseQueryMap(httpExchange.getRequestURI()),\n+            httpExchange.getResponseBody());\n+      } else if (requestMethod.equalsIgnoreCase(\"post\")) {\n+        BufferedReader requestBodyReader =\n+            new BufferedReader(new InputStreamReader(httpExchange.getRequestBody(), \"utf-8\"));\n+        String queryString = requestBodyReader.readLine();", "originalCommit": "1eb533251f71b9b3b3a0bd8692d2ac3506d49cce", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODAwMTE2NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1521#discussion_r468001165", "bodyText": "I've changed to\nInputStreamReader requestBodyReader = new InputStreamReader(httpExchange.getRequestBody(), \"utf-8\"));\nString queryString = CharStreams.toString(requestBodyReader);\nrequestBodyReader.close()\n\nhttpExchange.getRequestBody() is a inputStream and toString requries Readable", "author": "wtyanan", "createdAt": "2020-08-10T15:42:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM0OTg4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM0OTk4MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1521#discussion_r467349981", "body": "`parseQueryString`", "bodyText": "parseQueryString", "bodyHTML": "<p dir=\"auto\"><code>parseQueryString</code></p>", "author": "anuraaga", "createdAt": "2020-08-08T02:23:34Z", "path": "sdk_extensions/zpages/src/main/java/io/opentelemetry/sdk/extensions/zpages/ZPageHttpHandler.java", "diffHunk": "@@ -49,17 +51,43 @@\n   /**\n    * Build a query map from the {@code uri}.\n    *\n-   * @param uri the {@link URI} for buiding the query map\n-   * @return the query map built based on the @{code uri}\n+   * @param uri the {@link URI} for buiding the query map.\n+   * @return the query map built based on the @{code uri}.\n    */\n   @VisibleForTesting\n   static ImmutableMap<String, String> parseQueryMap(URI uri) throws UnsupportedEncodingException {\n-    String queryStrings = uri.getRawQuery();\n-    if (queryStrings == null) {\n+    String queryString = uri.getRawQuery();\n+    if (queryString == null) {\n       return ImmutableMap.of();\n     }\n     Map<String, String> queryMap = new HashMap<String, String>();\n-    for (String param : QUERY_SPLITTER.split(queryStrings)) {\n+    for (String param : QUERY_SPLITTER.split(queryString)) {\n+      List<String> keyValuePair = QUERY_KEYVAL_SPLITTER.splitToList(param);\n+      if (keyValuePair.size() > 1) {\n+        if (keyValuePair.get(0).equals(PARAM_SPAN_NAME)) {\n+          queryMap.put(keyValuePair.get(0), URLDecoder.decode(keyValuePair.get(1), \"UTF-8\"));\n+        } else {\n+          queryMap.put(keyValuePair.get(0), keyValuePair.get(1));\n+        }\n+      }\n+    }\n+    return ImmutableMap.copyOf(queryMap);\n+  }\n+\n+  /**\n+   * Build a query map from the query string.\n+   *\n+   * @param queryString the query string for buiding the query map.\n+   * @return the query map built based on the query string.\n+   */\n+  @VisibleForTesting\n+  static ImmutableMap<String, String> parseQueryMap(String queryString)", "originalCommit": "1eb533251f71b9b3b3a0bd8692d2ac3506d49cce", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM1MDIxMQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1521#discussion_r467350211", "body": "You should be able to just pass this instead of copying the logic as is.", "bodyText": "You should be able to just pass this instead of copying the logic as is.", "bodyHTML": "<p dir=\"auto\">You should be able to just pass this instead of copying the logic as is.</p>", "author": "anuraaga", "createdAt": "2020-08-08T02:26:10Z", "path": "sdk_extensions/zpages/src/main/java/io/opentelemetry/sdk/extensions/zpages/ZPageHttpHandler.java", "diffHunk": "@@ -49,17 +51,43 @@\n   /**\n    * Build a query map from the {@code uri}.\n    *\n-   * @param uri the {@link URI} for buiding the query map\n-   * @return the query map built based on the @{code uri}\n+   * @param uri the {@link URI} for buiding the query map.\n+   * @return the query map built based on the @{code uri}.\n    */\n   @VisibleForTesting\n   static ImmutableMap<String, String> parseQueryMap(URI uri) throws UnsupportedEncodingException {\n-    String queryStrings = uri.getRawQuery();\n-    if (queryStrings == null) {\n+    String queryString = uri.getRawQuery();", "originalCommit": "1eb533251f71b9b3b3a0bd8692d2ac3506d49cce", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM1MDYwOA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1521#discussion_r467350608", "body": "Can you add a test that makes sure get doesn't update the config?", "bodyText": "Can you add a test that makes sure get doesn't update the config?", "bodyHTML": "<p dir=\"auto\">Can you add a test that makes sure get doesn't update the config?</p>", "author": "anuraaga", "createdAt": "2020-08-08T02:30:41Z", "path": "sdk_extensions/zpages/src/test/java/io/opentelemetry/sdk/extensions/zpages/TraceConfigzZPageHandlerTest.java", "diffHunk": "@@ -45,7 +45,7 @@ void changeTable_emitRowsCorrectly() {\n \n     TraceConfigzZPageHandler traceConfigzZPageHandler =", "originalCommit": "1eb533251f71b9b3b3a0bd8692d2ac3506d49cce", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "0f0928883388f313fc38b481c8c32398aaa90d82", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/0f0928883388f313fc38b481c8c32398aaa90d82", "message": "Removed duplicate parse function, added test for update on POST request only", "committedDate": "2020-08-10T15:40:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA1NzY0MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1521#discussion_r468057641", "body": "if the requestMethod isn't used in this method, why pass it in?", "bodyText": "if the requestMethod isn't used in this method, why pass it in?", "bodyHTML": "<p dir=\"auto\">if the requestMethod isn't used in this method, why pass it in?</p>", "author": "jkwatson", "createdAt": "2020-08-10T17:17:40Z", "path": "sdk_extensions/zpages/src/main/java/io/opentelemetry/sdk/extensions/zpages/TracezZPageHandler.java", "diffHunk": "@@ -522,7 +522,8 @@ private void emitHtmlBody(Map<String, String> queryMap, PrintStream out) {\n   }\n \n   @Override\n-  public void emitHtml(Map<String, String> queryMap, OutputStream outputStream) {\n+  public void emitHtml(\n+      String requestMethod, Map<String, String> queryMap, OutputStream outputStream) {", "originalCommit": "0f0928883388f313fc38b481c8c32398aaa90d82", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA1ODE0NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1521#discussion_r468058145", "bodyText": "hmm. I see...it's added to the interface. This make me think the interface isn't quite right, since only the one page needs to know that it's a post vs. get.", "author": "jkwatson", "createdAt": "2020-08-10T17:18:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA1NzY0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA2MDYxNw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1521#discussion_r468060617", "bodyText": "I'm not sure if any future zPages will require requestMethod, but this will also allow any potential new zPage to have access to the requestMethod as well", "author": "wtyanan", "createdAt": "2020-08-10T17:23:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA1NzY0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODEwMTcwMg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1521#discussion_r468101702", "bodyText": "all the more reason to not pollute all the other page implementations with the request method.", "author": "jkwatson", "createdAt": "2020-08-10T18:37:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA1NzY0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA2MTgzMA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1521#discussion_r468061830", "body": "rather than just having a single `emitHtml` method, it would be better to have 2 methods, I think.  One to process the POST changes, and one to then emit the resulting HTML page. What do you think about splitting the interface in 2, and then the things that don't support any updates can just no-op the implementation on the `processUpdate` method (or whatever you call it)?", "bodyText": "rather than just having a single emitHtml method, it would be better to have 2 methods, I think.  One to process the POST changes, and one to then emit the resulting HTML page. What do you think about splitting the interface in 2, and then the things that don't support any updates can just no-op the implementation on the processUpdate method (or whatever you call it)?", "bodyHTML": "<p dir=\"auto\">rather than just having a single <code>emitHtml</code> method, it would be better to have 2 methods, I think.  One to process the POST changes, and one to then emit the resulting HTML page. What do you think about splitting the interface in 2, and then the things that don't support any updates can just no-op the implementation on the <code>processUpdate</code> method (or whatever you call it)?</p>", "author": "jkwatson", "createdAt": "2020-08-10T17:25:13Z", "path": "sdk_extensions/zpages/src/main/java/io/opentelemetry/sdk/extensions/zpages/ZPageHttpHandler.java", "diffHunk": "@@ -75,9 +76,24 @@\n   @Override\n   public final void handle(HttpExchange httpExchange) throws IOException {\n     try {\n+      String requestMethod = httpExchange.getRequestMethod();\n       httpExchange.sendResponseHeaders(200, 0);\n-      zpageHandler.emitHtml(\n-          parseQueryMap(httpExchange.getRequestURI()), httpExchange.getResponseBody());\n+      if (requestMethod.equalsIgnoreCase(\"GET\")) {\n+        zpageHandler.emitHtml(\n+            requestMethod,\n+            parseQueryString(httpExchange.getRequestURI().getRawQuery()),\n+            httpExchange.getResponseBody());\n+      } else if (requestMethod.equalsIgnoreCase(\"POST\")) {\n+        // BufferedReader requestBodyReader =\n+        // new BufferedReader(new InputStreamReader(httpExchange.getRequestBody(), \"utf-8\"));\n+        // String queryString = requestBodyReader.readLine();\n+        InputStreamReader requestBodyReader =\n+            new InputStreamReader(httpExchange.getRequestBody(), \"utf-8\");\n+        String queryString = CharStreams.toString(requestBodyReader);\n+        requestBodyReader.close();\n+        zpageHandler.emitHtml(", "originalCommit": "0f0928883388f313fc38b481c8c32398aaa90d82", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA2MzcxNA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1521#discussion_r468063714", "bodyText": "So one for normally emitting HTML on GET, and another one for processing updates on POST (or any other request methods) then?", "author": "wtyanan", "createdAt": "2020-08-10T17:28:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA2MTgzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA5OTk0Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1521#discussion_r468099947", "bodyText": "right, and if a POST is received, first you call \"processUpdate\", then you call \"emitHtml\". If a GET is received, you just call \"emitHtml\" and you're done.", "author": "jkwatson", "createdAt": "2020-08-10T18:34:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA2MTgzMA=="}], "type": "inlineReview"}, {"oid": "8044ba183ca7bb7c1fcea61814437f825aab06fa", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/8044ba183ca7bb7c1fcea61814437f825aab06fa", "message": "Added separate method for processing request", "committedDate": "2020-08-11T01:32:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODUxNTgxMQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1521#discussion_r468515811", "body": "This section seems like an error applying the config, not an error generating HTML right?", "bodyText": "This section seems like an error applying the config, not an error generating HTML right?", "bodyHTML": "<p dir=\"auto\">This section seems like an error applying the config, not an error generating HTML right?</p>", "author": "anuraaga", "createdAt": "2020-08-11T11:39:40Z", "path": "sdk_extensions/zpages/src/main/java/io/opentelemetry/sdk/extensions/zpages/TraceConfigzZPageHandler.java", "diffHunk": "@@ -327,6 +325,44 @@ public void emitHtml(Map<String, String> queryMap, OutputStream outputStream) {\n     }\n   }\n \n+  @Override\n+  public boolean processRequest(\n+      String requestMethod, Map<String, String> queryMap, OutputStream outputStream) {\n+    if (requestMethod.equalsIgnoreCase(\"POST\")) {\n+      try {\n+        applyTraceConfig(queryMap);\n+      } catch (Throwable t) {\n+        try (PrintStream out = new PrintStream(outputStream, /* autoFlush= */ false, \"UTF-8\")) {", "originalCommit": "8044ba183ca7bb7c1fcea61814437f825aab06fa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODYyNzQ3Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1521#discussion_r468627472", "bodyText": "Yea it's error applying config, I will adjust the error message", "author": "wtyanan", "createdAt": "2020-08-11T14:31:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODUxNTgxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODUxNjQwMw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1521#discussion_r468516403", "body": "```suggestion\r\n        final String queryString;\r\n        try (InputStreamReader requestBodyReader =\r\n            new InputStreamReader(httpExchange.getRequestBody(), \"utf-8\")) {\r\n          queryString = CharStreams.toString(requestBodyReader);\r\n        }\r\n```\r\n\r\nMay as well use try/resources", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    InputStreamReader requestBodyReader =\n          \n          \n            \n                        new InputStreamReader(httpExchange.getRequestBody(), \"utf-8\");\n          \n          \n            \n                    String queryString = CharStreams.toString(requestBodyReader);\n          \n          \n            \n                    requestBodyReader.close();\n          \n          \n            \n                    final String queryString;\n          \n          \n            \n                    try (InputStreamReader requestBodyReader =\n          \n          \n            \n                        new InputStreamReader(httpExchange.getRequestBody(), \"utf-8\")) {\n          \n          \n            \n                      queryString = CharStreams.toString(requestBodyReader);\n          \n          \n            \n                    }\n          \n      \n    \n    \n  \n\nMay as well use try/resources", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-smi\">InputStreamReader</span> requestBodyReader <span class=\"pl-k\">=</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            <span class=\"pl-k\">new</span> <span class=\"pl-smi\">InputStreamReader</span>(httpExchange<span class=\"pl-k\">.</span>getRequestBody(), <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>utf-8<span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-smi\">String</span> queryString <span class=\"pl-k\">=</span> <span class=\"pl-smi\">CharStreams</span><span class=\"pl-k\">.</span>toString(requestBodyReader);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        requestBodyReader<span class=\"pl-k\">.</span>close();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">final</span> <span class=\"pl-smi\">String</span> queryString;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">try</span> (<span class=\"pl-smi\">InputStreamReader</span> requestBodyReader <span class=\"pl-k\">=</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            <span class=\"pl-k\">new</span> <span class=\"pl-smi\">InputStreamReader</span>(httpExchange<span class=\"pl-k\">.</span>getRequestBody(), <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>utf-8<span class=\"pl-pds\">\"</span></span>)) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">          queryString <span class=\"pl-k\">=</span> <span class=\"pl-smi\">CharStreams</span><span class=\"pl-k\">.</span>toString(requestBodyReader);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        }</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\">May as well use try/resources</p>", "author": "anuraaga", "createdAt": "2020-08-11T11:40:44Z", "path": "sdk_extensions/zpages/src/main/java/io/opentelemetry/sdk/extensions/zpages/ZPageHttpHandler.java", "diffHunk": "@@ -75,9 +76,24 @@\n   @Override\n   public final void handle(HttpExchange httpExchange) throws IOException {\n     try {\n+      String requestMethod = httpExchange.getRequestMethod();\n       httpExchange.sendResponseHeaders(200, 0);\n-      zpageHandler.emitHtml(\n-          parseQueryMap(httpExchange.getRequestURI()), httpExchange.getResponseBody());\n+      if (requestMethod.equalsIgnoreCase(\"GET\")) {\n+        zpageHandler.emitHtml(\n+            parseQueryString(httpExchange.getRequestURI().getRawQuery()),\n+            httpExchange.getResponseBody());\n+      } else {\n+        InputStreamReader requestBodyReader =\n+            new InputStreamReader(httpExchange.getRequestBody(), \"utf-8\");\n+        String queryString = CharStreams.toString(requestBodyReader);\n+        requestBodyReader.close();", "originalCommit": "8044ba183ca7bb7c1fcea61814437f825aab06fa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODUxNjU4MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1521#discussion_r468516581", "body": "Do we need to check this in all the tests? Aren't they non-error tests?", "bodyText": "Do we need to check this in all the tests? Aren't they non-error tests?", "bodyHTML": "<p dir=\"auto\">Do we need to check this in all the tests? Aren't they non-error tests?</p>", "author": "anuraaga", "createdAt": "2020-08-11T11:41:06Z", "path": "sdk_extensions/zpages/src/test/java/io/opentelemetry/sdk/extensions/zpages/TraceConfigzZPageHandlerTest.java", "diffHunk": "@@ -154,7 +182,10 @@ void appliesChangesCorrectly_formSubmit() {\n \n     TraceConfigzZPageHandler traceConfigzZPageHandler =\n         new TraceConfigzZPageHandler(tracerProvider);\n-    traceConfigzZPageHandler.emitHtml(queryMap, output);\n+    boolean error = traceConfigzZPageHandler.processRequest(\"POST\", queryMap, output);\n+    if (!error) {", "originalCommit": "8044ba183ca7bb7c1fcea61814437f825aab06fa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODYyNjk2NA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1521#discussion_r468626964", "bodyText": "Yea they're non-error tests, I replaced all with search, I'll removed the checks", "author": "wtyanan", "createdAt": "2020-08-11T14:30:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODUxNjU4MQ=="}], "type": "inlineReview"}, {"oid": "95ff5b77f87bcb805d8d10cb94d82ef5ee84c52f", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/95ff5b77f87bcb805d8d10cb94d82ef5ee84c52f", "message": "Removed unnecessary error check in tests, used try resources for inputstream", "committedDate": "2020-08-11T14:58:56Z", "type": "commit"}]}