{"pr_number": 429, "pr_title": "[PPL] Create ANTLR parser and implement basic syntax - Phase0", "pr_author": "chloe-zh", "pr_createdAt": "2020-04-14T04:44:17Z", "pr_url": "https://github.com/opendistro-for-elasticsearch/sql/pull/429", "merge_commit": "ded0421c435977e2fc64ba5161bf007a6deca33b", "timeline": [{"oid": "8a44cfc3e1246d3f39012aa5e476f5e5717a01c4", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/8a44cfc3e1246d3f39012aa5e476f5e5717a01c4", "message": "m", "committedDate": "2020-04-06T18:25:14Z", "type": "commit"}, {"oid": "204bb818b31ba0e2726f2cfc9c7b3a27e4994515", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/204bb818b31ba0e2726f2cfc9c7b3a27e4994515", "message": "Merge branch 'feature/ppl' of github.com:opendistro-for-elasticsearch/sql into ppl-parser", "committedDate": "2020-04-09T04:45:46Z", "type": "commit"}, {"oid": "3bfdb2844147556cd37a51a325f1f599ec9b4ab5", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/3bfdb2844147556cd37a51a325f1f599ec9b4ab5", "message": "Added antlr files", "committedDate": "2020-04-09T17:10:56Z", "type": "commit"}, {"oid": "c2f63c040031556f3ad154c09ae996c9b34b55ec", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/c2f63c040031556f3ad154c09ae996c9b34b55ec", "message": "Merge remote-tracking branch 'upstream/feature/ppl' into ppl-parser", "committedDate": "2020-04-10T01:05:24Z", "type": "commit"}, {"oid": "084f380ec79e76c8665e780f40e921564ba33b8d", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/084f380ec79e76c8665e780f40e921564ba33b8d", "message": "Added wildcard", "committedDate": "2020-04-12T00:40:23Z", "type": "commit"}, {"oid": "8c45b24b366fb80b3aa67e5dd68ede0f3d765d83", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/8c45b24b366fb80b3aa67e5dd68ede0f3d765d83", "message": "Implemented parser for commands of simple syntax", "committedDate": "2020-04-14T04:31:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE5NjU2OQ==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/429#discussion_r408196569", "body": "Remove unused imports", "bodyText": "Remove unused imports", "bodyHTML": "<p dir=\"auto\">Remove unused imports</p>", "author": "penghuo", "createdAt": "2020-04-14T14:48:19Z", "path": "ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/node/NodeVisitor.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.ppl.node;\n+\n+import com.amazon.opendistroforelasticsearch.sql.ppl.plans.expression.Literal;", "originalCommit": "8c45b24b366fb80b3aa67e5dd68ede0f3d765d83", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI3OTg4MQ==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/429#discussion_r408279881", "bodyText": "done, thanks!", "author": "chloe-zh", "createdAt": "2020-04-14T16:39:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE5NjU2OQ=="}], "type": "inlineReview", "revised_code": {"commit": "6b542eb5496b0034f8506a8b15e53071d56686ad", "changed_code": [{"header": "diff --git a/ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/node/NodeVisitor.java b/ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/node/NodeVisitor.java\nindex 0bc55ad0..5c0fb002 100644\n--- a/ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/node/NodeVisitor.java\n+++ b/ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/node/NodeVisitor.java\n", "chunk": "@@ -15,8 +15,6 @@\n \n package com.amazon.opendistroforelasticsearch.sql.ppl.node;\n \n-import com.amazon.opendistroforelasticsearch.sql.ppl.plans.expression.Literal;\n-\n public interface NodeVisitor<T> {\n     default T visit(Node<?> tree) {\n         return tree.accept(this);\n", "next_change": {"commit": "784df880868ef82a3062bbded3b28a5a3d8412f0", "changed_code": [{"header": "diff --git a/ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/node/NodeVisitor.java b/ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/node/NodeVisitor.java\nindex 5c0fb002..cdd60cb3 100644\n--- a/ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/node/NodeVisitor.java\n+++ b/ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/node/NodeVisitor.java\n", "chunk": "@@ -15,6 +15,9 @@\n \n package com.amazon.opendistroforelasticsearch.sql.ppl.node;\n \n+/**\n+ * Node visitor interface and default traverse rules for node visitor\n+ */\n public interface NodeVisitor<T> {\n     default T visit(Node<?> tree) {\n         return tree.accept(this);\n", "next_change": {"commit": "3a92f1169381a911bde9adb31a9e0aa28700be24", "changed_code": [{"header": "diff --git a/ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/node/NodeVisitor.java b/ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/node/NodeVisitor.java\nindex cdd60cb3..346aa177 100644\n--- a/ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/node/NodeVisitor.java\n+++ b/ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/node/NodeVisitor.java\n", "chunk": "@@ -16,7 +16,7 @@\n package com.amazon.opendistroforelasticsearch.sql.ppl.node;\n \n /**\n- * Node visitor interface and default traverse rules for node visitor\n+ * AST visitor interface and default traverse rules\n  */\n public interface NodeVisitor<T> {\n     default T visit(Node<?> tree) {\n", "next_change": {"commit": "a898546c411297b33e149ce4249ae7376a1db5ac", "changed_code": [{"header": "diff --git a/ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/node/NodeVisitor.java b/ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/node/NodeVisitor.java\ndeleted file mode 100644\nindex 346aa177..00000000\n--- a/ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/node/NodeVisitor.java\n+++ /dev/null\n", "chunk": "@@ -1,51 +0,0 @@\n-/*\n- *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n- *\n- *   Licensed under the Apache License, Version 2.0 (the \"License\").\n- *   You may not use this file except in compliance with the License.\n- *   A copy of the License is located at\n- *\n- *       http://www.apache.org/licenses/LICENSE-2.0\n- *\n- *   or in the \"license\" file accompanying this file. This file is distributed\n- *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n- *   express or implied. See the License for the specific language governing\n- *   permissions and limitations under the License.\n- */\n-\n-package com.amazon.opendistroforelasticsearch.sql.ppl.node;\n-\n-/**\n- * AST visitor interface and default traverse rules\n- */\n-public interface NodeVisitor<T> {\n-    default T visit(Node<?> tree) {\n-        return tree.accept(this);\n-    }\n-\n-    default public T visitChildren(Node<?> node) {\n-        T result = defaultResult();\n-\n-        for (Node<?> child : node.getChild()) {\n-            if (!shouldVisitNextChild(child, result)) {\n-                break;\n-            }\n-            T childResult = child.accept(this);\n-            result = aggregateResult(result, childResult);\n-        }\n-        return result;\n-    }\n-\n-    default T defaultResult() {\n-        return null;\n-    }\n-\n-    default T aggregateResult(T aggregate, T nextResult) {\n-        return nextResult;\n-    }\n-\n-    default boolean shouldVisitNextChild(Node<?> node, T currentResult) {\n-        return true;\n-    }\n-\n-}\n", "next_change": null}]}}]}}]}}]}}, {"oid": "6b542eb5496b0034f8506a8b15e53071d56686ad", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/6b542eb5496b0034f8506a8b15e53071d56686ad", "message": "addressed comments", "committedDate": "2020-04-14T16:39:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODMzMjY5MQ==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/429#discussion_r408332691", "body": "Could you add JavaDoc for all public classes to document their abstractions and responsibilities?", "bodyText": "Could you add JavaDoc for all public classes to document their abstractions and responsibilities?", "bodyHTML": "<p dir=\"auto\">Could you add JavaDoc for all public classes to document their abstractions and responsibilities?</p>", "author": "dai-chen", "createdAt": "2020-04-14T18:03:32Z", "path": "ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/node/AbstractNodeVisitor.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.ppl.node;\n+\n+import com.amazon.opendistroforelasticsearch.sql.ppl.plans.expression.AggregateFunction;\n+import com.amazon.opendistroforelasticsearch.sql.ppl.plans.expression.And;\n+import com.amazon.opendistroforelasticsearch.sql.ppl.plans.expression.AttributeList;\n+import com.amazon.opendistroforelasticsearch.sql.ppl.plans.expression.AttributeReference;\n+import com.amazon.opendistroforelasticsearch.sql.ppl.plans.expression.EqualTo;\n+import com.amazon.opendistroforelasticsearch.sql.ppl.plans.expression.Function;\n+import com.amazon.opendistroforelasticsearch.sql.ppl.plans.expression.In;\n+import com.amazon.opendistroforelasticsearch.sql.ppl.plans.expression.Literal;\n+import com.amazon.opendistroforelasticsearch.sql.ppl.plans.expression.Map;\n+import com.amazon.opendistroforelasticsearch.sql.ppl.plans.expression.Not;\n+import com.amazon.opendistroforelasticsearch.sql.ppl.plans.expression.Or;\n+import com.amazon.opendistroforelasticsearch.sql.ppl.plans.expression.UnresolvedAttribute;\n+import com.amazon.opendistroforelasticsearch.sql.ppl.plans.logical.Aggregation;\n+import com.amazon.opendistroforelasticsearch.sql.ppl.plans.logical.Filter;\n+import com.amazon.opendistroforelasticsearch.sql.ppl.plans.logical.Project;\n+import com.amazon.opendistroforelasticsearch.sql.ppl.plans.logical.Relation;\n+\n+public class AbstractNodeVisitor<T> implements NodeVisitor<T> {", "originalCommit": "6b542eb5496b0034f8506a8b15e53071d56686ad", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM4NjIzNQ==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/429#discussion_r410386235", "bodyText": "Sure will do, thanks!", "author": "chloe-zh", "createdAt": "2020-04-17T18:05:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODMzMjY5MQ=="}], "type": "inlineReview", "revised_code": {"commit": "ddf9c5a0dd4fc45dab4737cbd122396ddce87b6f", "changed_code": [{"header": "diff --git a/ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/node/AbstractNodeVisitor.java b/ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/node/AbstractNodeVisitor.java\nindex f920eac3..422bab86 100644\n--- a/ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/node/AbstractNodeVisitor.java\n+++ b/ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/node/AbstractNodeVisitor.java\n", "chunk": "@@ -32,6 +33,10 @@ import com.amazon.opendistroforelasticsearch.sql.ppl.plans.logical.Filter;\n import com.amazon.opendistroforelasticsearch.sql.ppl.plans.logical.Project;\n import com.amazon.opendistroforelasticsearch.sql.ppl.plans.logical.Relation;\n \n+/**\n+ * Node visitor for nodes at the constructed (LogicalPlan and Expression) interface\n+ * Defines the traverse path among LogicalPlan and Expression nodes\n+ */\n public class AbstractNodeVisitor<T> implements NodeVisitor<T> {\n \n     public T visitRelation(Relation node) {\n", "next_change": {"commit": "3a92f1169381a911bde9adb31a9e0aa28700be24", "changed_code": [{"header": "diff --git a/ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/node/AbstractNodeVisitor.java b/ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/node/AbstractNodeVisitor.java\nindex 422bab86..4071fb54 100644\n--- a/ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/node/AbstractNodeVisitor.java\n+++ b/ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/node/AbstractNodeVisitor.java\n", "chunk": "@@ -34,8 +34,8 @@ import com.amazon.opendistroforelasticsearch.sql.ppl.plans.logical.Project;\n import com.amazon.opendistroforelasticsearch.sql.ppl.plans.logical.Relation;\n \n /**\n- * Node visitor for nodes at the constructed (LogicalPlan and Expression) interface\n- * Defines the traverse path among LogicalPlan and Expression nodes\n+ * AST nodes visitor\n+ * Defines the traverse path\n  */\n public class AbstractNodeVisitor<T> implements NodeVisitor<T> {\n \n", "next_change": {"commit": "a898546c411297b33e149ce4249ae7376a1db5ac", "changed_code": [{"header": "diff --git a/ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/node/AbstractNodeVisitor.java b/ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/node/AbstractNodeVisitor.java\nindex 4071fb54..9d9c141a 100644\n--- a/ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/node/AbstractNodeVisitor.java\n+++ b/ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/node/AbstractNodeVisitor.java\n", "chunk": "@@ -37,74 +35,88 @@ import com.amazon.opendistroforelasticsearch.sql.ppl.plans.logical.Relation;\n  * AST nodes visitor\n  * Defines the traverse path\n  */\n-public class AbstractNodeVisitor<T> implements NodeVisitor<T> {\n+public abstract class AbstractNodeVisitor<T, C> {\n \n-    public T visitRelation(Relation node) {\n-        return visitChildren(node);\n+    public T visit(Node node, C context) {\n+        return null;\n     }\n \n-    public T visitFilter(Filter node) {\n-        return visitChildren(node);\n+    public T visitChildren(Node node, C context) {\n+        T result = defaultResult();\n+\n+        for (Node child : node.getChild()) {\n+            T childResult = child.accept(this, context);\n+            result = aggregateResult(result, childResult);\n+        }\n+        return result;\n+    }\n+\n+    private T defaultResult() {\n+        return null;\n+    }\n+\n+    private T aggregateResult(T aggregate, T nextResult) {\n+        return nextResult;\n     }\n \n-    public T visitProject(Project node) {\n-        return visitChildren(node);\n+    public T visitRelation(Relation node, C context) {\n+        return visitChildren(node, context);\n     }\n \n-    public T visitAggregation(Aggregation node) {\n-        return visitChildren(node);\n+    public T visitFilter(Filter node, C context) {\n+        return visitChildren(node, context);\n     }\n \n-    public T visitEqualTo(EqualTo node) {\n-        return visitChildren(node);\n+    public T visitProject(Project node, C context) {\n+        return visitChildren(node, context);\n     }\n \n-    public T visitLiteral(Literal node) {\n-        return visitChildren(node);\n+    public T visitAggregation(Aggregation node, C context) {\n+        return visitChildren(node, context);\n     }\n \n-    public T visitUnresolvedAttribute(UnresolvedAttribute node) {\n-        return visitChildren(node);\n+    public T visitEqualTo(EqualTo node, C context) {\n+        return visitChildren(node, context);\n     }\n \n-    public T visitUnresolvedAttributeList(AttributeList node) {\n-        return visitChildren(node);\n+    public T visitLiteral(Literal node, C context) {\n+        return visitChildren(node, context);\n     }\n \n-    public T visitMap(Map node) {\n-        return visitChildren(node);\n+    public T visitUnresolvedAttribute(UnresolvedAttribute node, C context) {\n+        return visitChildren(node, context);\n     }\n \n-    public T visitNot(Not node) {\n-        return visitChildren(node);\n+    public T visitAttributeList(AttributeList node, C context) {\n+        return visitChildren(node, context);\n     }\n \n-    public T visitOr(Or node) {\n-        return visitChildren(node);\n+    public T visitMap(Map node, C context) {\n+        return visitChildren(node, context);\n     }\n \n-    public T visitAnd(And node) {\n-        return visitChildren(node);\n+    public T visitNot(Not node, C context) {\n+        return visitChildren(node, context);\n     }\n \n-    public T visitAggregateFunction(AggregateFunction node) {\n-        return visitChildren(node);\n+    public T visitOr(Or node, C context) {\n+        return visitChildren(node, context);\n     }\n \n-    public T visitFunction(Function node) {\n-        return visitChildren(node);\n+    public T visitAnd(And node, C context) {\n+        return visitChildren(node, context);\n     }\n \n-    public T visitIn(In node) {\n-        return visitChildren(node);\n+    public T visitAggregateFunction(AggregateFunction node, C context) {\n+        return visitChildren(node, context);\n     }\n \n-    public T visitNest(Nest node) {\n-        return visitChildren(node);\n+    public T visitFunction(Function node, C context) {\n+        return visitChildren(node, context);\n     }\n \n-    public T visitArray(Array node) {\n-        return visitChildren(node);\n+    public T visitIn(In node, C context) {\n+        return visitChildren(node, context);\n     }\n \n }\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODMzNzQ1Mg==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/429#discussion_r408337452", "body": "Np: using static import can make this class cleaner.", "bodyText": "Np: using static import can make this class cleaner.", "bodyHTML": "<p dir=\"auto\">Np: using static import can make this class cleaner.</p>", "author": "dai-chen", "createdAt": "2020-04-14T18:11:35Z", "path": "ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/parser/AstBuilder.java", "diffHunk": "@@ -0,0 +1,177 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.ppl.parser;\n+\n+import com.amazon.opendistroforelasticsearch.sql.ppl.antlr.parser.OpenDistroPPLParser;\n+import com.amazon.opendistroforelasticsearch.sql.ppl.antlr.parser.OpenDistroPPLParserBaseVisitor;\n+import com.amazon.opendistroforelasticsearch.sql.ppl.plans.expression.Expression;\n+import com.amazon.opendistroforelasticsearch.sql.ppl.plans.expression.Map;\n+import com.amazon.opendistroforelasticsearch.sql.ppl.plans.logical.Aggregation;\n+import com.amazon.opendistroforelasticsearch.sql.ppl.plans.logical.Filter;\n+import com.amazon.opendistroforelasticsearch.sql.ppl.plans.logical.LogicalPlan;\n+import com.amazon.opendistroforelasticsearch.sql.ppl.plans.logical.Project;\n+import com.amazon.opendistroforelasticsearch.sql.ppl.plans.logical.Relation;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.stream.Collectors;\n+import lombok.RequiredArgsConstructor;\n+import org.antlr.v4.runtime.tree.ParseTree;\n+\n+@RequiredArgsConstructor\n+public class AstBuilder extends OpenDistroPPLParserBaseVisitor<LogicalPlan> {\n+    private final AstExpressionBuilder expressionBuilder;\n+\n+    @Override\n+    public LogicalPlan visitPplStatement(OpenDistroPPLParser.PplStatementContext ctx) {", "originalCommit": "6b542eb5496b0034f8506a8b15e53071d56686ad", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ4MDE0OA==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/429#discussion_r410480148", "bodyText": "Yes that's what I would like to do but the IDEA was not able to automatically add them as the static methods. I will manually replace them", "author": "chloe-zh", "createdAt": "2020-04-17T21:32:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODMzNzQ1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "ddf9c5a0dd4fc45dab4737cbd122396ddce87b6f", "changed_code": [{"header": "diff --git a/ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/parser/AstBuilder.java b/ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/parser/AstBuilder.java\nindex c6d64692..ea13b031 100644\n--- a/ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/parser/AstBuilder.java\n+++ b/ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/parser/AstBuilder.java\n", "chunk": "@@ -26,10 +26,15 @@ import com.amazon.opendistroforelasticsearch.sql.ppl.plans.logical.Project;\n import com.amazon.opendistroforelasticsearch.sql.ppl.plans.logical.Relation;\n import java.util.ArrayList;\n import java.util.Collections;\n+import java.util.List;\n import java.util.stream.Collectors;\n import lombok.RequiredArgsConstructor;\n import org.antlr.v4.runtime.tree.ParseTree;\n \n+/**\n+ * Class of walking the AST\n+ * Refines the visit path and build the LogicalPlan and Expression nodes interface\n+ */\n @RequiredArgsConstructor\n public class AstBuilder extends OpenDistroPPLParserBaseVisitor<LogicalPlan> {\n     private final AstExpressionBuilder expressionBuilder;\n", "next_change": {"commit": "17a8503378d37e5ba5d76ef0a888aedd909d3ea4", "changed_code": [{"header": "diff --git a/ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/parser/AstBuilder.java b/ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/parser/AstBuilder.java\nindex ea13b031..861a354c 100644\n--- a/ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/parser/AstBuilder.java\n+++ b/ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/parser/AstBuilder.java\n", "chunk": "@@ -31,6 +30,19 @@ import java.util.stream.Collectors;\n import lombok.RequiredArgsConstructor;\n import org.antlr.v4.runtime.tree.ParseTree;\n \n+import static com.amazon.opendistroforelasticsearch.sql.ppl.antlr.parser.OpenDistroPPLParser.DedupCommandContext;\n+import static com.amazon.opendistroforelasticsearch.sql.ppl.antlr.parser.OpenDistroPPLParser.EvalCommandContext;\n+import static com.amazon.opendistroforelasticsearch.sql.ppl.antlr.parser.OpenDistroPPLParser.FieldsCommandContext;\n+import static com.amazon.opendistroforelasticsearch.sql.ppl.antlr.parser.OpenDistroPPLParser.FromClauseContext;\n+import static com.amazon.opendistroforelasticsearch.sql.ppl.antlr.parser.OpenDistroPPLParser.PplStatementContext;\n+import static com.amazon.opendistroforelasticsearch.sql.ppl.antlr.parser.OpenDistroPPLParser.RenameCommandContext;\n+import static com.amazon.opendistroforelasticsearch.sql.ppl.antlr.parser.OpenDistroPPLParser.SearchFilterFromContext;\n+import static com.amazon.opendistroforelasticsearch.sql.ppl.antlr.parser.OpenDistroPPLParser.SearchFromContext;\n+import static com.amazon.opendistroforelasticsearch.sql.ppl.antlr.parser.OpenDistroPPLParser.SearchFromFilterContext;\n+import static com.amazon.opendistroforelasticsearch.sql.ppl.antlr.parser.OpenDistroPPLParser.SortCommandContext;\n+import static com.amazon.opendistroforelasticsearch.sql.ppl.antlr.parser.OpenDistroPPLParser.StatsCommandContext;\n+import static com.amazon.opendistroforelasticsearch.sql.ppl.antlr.parser.OpenDistroPPLParser.WhereCommandContext;\n+\n /**\n  * Class of walking the AST\n  * Refines the visit path and build the LogicalPlan and Expression nodes interface\n", "next_change": {"commit": "3a92f1169381a911bde9adb31a9e0aa28700be24", "changed_code": [{"header": "diff --git a/ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/parser/AstBuilder.java b/ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/parser/AstBuilder.java\nindex 861a354c..75f09ed1 100644\n--- a/ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/parser/AstBuilder.java\n+++ b/ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/parser/AstBuilder.java\n", "chunk": "@@ -44,8 +44,8 @@ import static com.amazon.opendistroforelasticsearch.sql.ppl.antlr.parser.OpenDis\n import static com.amazon.opendistroforelasticsearch.sql.ppl.antlr.parser.OpenDistroPPLParser.WhereCommandContext;\n \n /**\n- * Class of walking the AST\n- * Refines the visit path and build the LogicalPlan and Expression nodes interface\n+ * Class of building the AST\n+ * Refines the visit path and build the AST nodes\n  */\n @RequiredArgsConstructor\n public class AstBuilder extends OpenDistroPPLParserBaseVisitor<LogicalPlan> {\n", "next_change": {"commit": "412f6f05349a36433d8f9697b21591295de0a3ac", "changed_code": [{"header": "diff --git a/ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/parser/AstBuilder.java b/ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/parser/AstBuilder.java\nindex 75f09ed1..2ab13a05 100644\n--- a/ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/parser/AstBuilder.java\n+++ b/ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/parser/AstBuilder.java\n", "chunk": "@@ -48,41 +49,41 @@ import static com.amazon.opendistroforelasticsearch.sql.ppl.antlr.parser.OpenDis\n  * Refines the visit path and build the AST nodes\n  */\n @RequiredArgsConstructor\n-public class AstBuilder extends OpenDistroPPLParserBaseVisitor<LogicalPlan> {\n+public class AstBuilder extends OpenDistroPPLParserBaseVisitor<UnresolvedPlan> {\n     private final AstExpressionBuilder expressionBuilder;\n \n     @Override\n-    public LogicalPlan visitPplStatement(PplStatementContext ctx) {\n-        LogicalPlan search = visit(ctx.searchCommand());\n-        LogicalPlan reduce = ctx.commands().stream().map(this::visit).reduce(search, (r, e) -> e.withInput(r));\n+    public UnresolvedPlan visitPplStatement(PplStatementContext ctx) {\n+        UnresolvedPlan search = visit(ctx.searchCommand());\n+        UnresolvedPlan reduce = ctx.commands().stream().map(this::visit).reduce(search, (r, e) -> e.withInput(r));\n         return reduce;\n     }\n \n     /** Search command */\n     @Override\n-    public LogicalPlan visitSearchFrom(SearchFromContext ctx) {\n+    public UnresolvedPlan visitSearchFrom(SearchFromContext ctx) {\n         return visitFromClause(ctx.fromClause());\n     }\n \n     @Override\n-    public LogicalPlan visitSearchFromFilter(SearchFromFilterContext ctx) {\n+    public UnresolvedPlan visitSearchFromFilter(SearchFromFilterContext ctx) {\n         return new Filter(visitExpression(ctx.logicalExpression())).withInput(visit(ctx.fromClause()));\n     }\n \n     @Override\n-    public LogicalPlan visitSearchFilterFrom(SearchFilterFromContext ctx) {\n+    public UnresolvedPlan visitSearchFilterFrom(SearchFilterFromContext ctx) {\n         return new Filter(visitExpression(ctx.logicalExpression())).withInput(visit(ctx.fromClause()));\n     }\n \n     /** Where command */\n     @Override\n-    public LogicalPlan visitWhereCommand(WhereCommandContext ctx) {\n+    public UnresolvedPlan visitWhereCommand(WhereCommandContext ctx) {\n         return new Filter(visitExpression(ctx.logicalExpression()));\n     }\n \n     /** Fields command */\n     @Override\n-    public LogicalPlan visitFieldsCommand(FieldsCommandContext ctx) {\n+    public UnresolvedPlan visitFieldsCommand(FieldsCommandContext ctx) {\n         return new Project(\n                 ctx.wcFieldList()\n                         .wcFieldExpression()\n", "next_change": null}]}}]}}, {"header": "diff --git a/ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/parser/AstBuilder.java b/ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/parser/AstBuilder.java\nindex ea13b031..861a354c 100644\n--- a/ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/parser/AstBuilder.java\n+++ b/ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/parser/AstBuilder.java\n", "chunk": "@@ -40,7 +52,7 @@ public class AstBuilder extends OpenDistroPPLParserBaseVisitor<LogicalPlan> {\n     private final AstExpressionBuilder expressionBuilder;\n \n     @Override\n-    public LogicalPlan visitPplStatement(OpenDistroPPLParser.PplStatementContext ctx) {\n+    public LogicalPlan visitPplStatement(PplStatementContext ctx) {\n         LogicalPlan search = visit(ctx.searchCommand());\n         LogicalPlan reduce = ctx.commands().stream().map(this::visit).reduce(search, (r, e) -> e.withInput(r));\n         return reduce;\n", "next_change": {"commit": "412f6f05349a36433d8f9697b21591295de0a3ac", "changed_code": [{"header": "diff --git a/ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/parser/AstBuilder.java b/ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/parser/AstBuilder.java\nindex 861a354c..2ab13a05 100644\n--- a/ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/parser/AstBuilder.java\n+++ b/ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/parser/AstBuilder.java\n", "chunk": "@@ -44,45 +45,45 @@ import static com.amazon.opendistroforelasticsearch.sql.ppl.antlr.parser.OpenDis\n import static com.amazon.opendistroforelasticsearch.sql.ppl.antlr.parser.OpenDistroPPLParser.WhereCommandContext;\n \n /**\n- * Class of walking the AST\n- * Refines the visit path and build the LogicalPlan and Expression nodes interface\n+ * Class of building the AST\n+ * Refines the visit path and build the AST nodes\n  */\n @RequiredArgsConstructor\n-public class AstBuilder extends OpenDistroPPLParserBaseVisitor<LogicalPlan> {\n+public class AstBuilder extends OpenDistroPPLParserBaseVisitor<UnresolvedPlan> {\n     private final AstExpressionBuilder expressionBuilder;\n \n     @Override\n-    public LogicalPlan visitPplStatement(PplStatementContext ctx) {\n-        LogicalPlan search = visit(ctx.searchCommand());\n-        LogicalPlan reduce = ctx.commands().stream().map(this::visit).reduce(search, (r, e) -> e.withInput(r));\n+    public UnresolvedPlan visitPplStatement(PplStatementContext ctx) {\n+        UnresolvedPlan search = visit(ctx.searchCommand());\n+        UnresolvedPlan reduce = ctx.commands().stream().map(this::visit).reduce(search, (r, e) -> e.withInput(r));\n         return reduce;\n     }\n \n     /** Search command */\n     @Override\n-    public LogicalPlan visitSearchFrom(SearchFromContext ctx) {\n+    public UnresolvedPlan visitSearchFrom(SearchFromContext ctx) {\n         return visitFromClause(ctx.fromClause());\n     }\n \n     @Override\n-    public LogicalPlan visitSearchFromFilter(SearchFromFilterContext ctx) {\n+    public UnresolvedPlan visitSearchFromFilter(SearchFromFilterContext ctx) {\n         return new Filter(visitExpression(ctx.logicalExpression())).withInput(visit(ctx.fromClause()));\n     }\n \n     @Override\n-    public LogicalPlan visitSearchFilterFrom(SearchFilterFromContext ctx) {\n+    public UnresolvedPlan visitSearchFilterFrom(SearchFilterFromContext ctx) {\n         return new Filter(visitExpression(ctx.logicalExpression())).withInput(visit(ctx.fromClause()));\n     }\n \n     /** Where command */\n     @Override\n-    public LogicalPlan visitWhereCommand(WhereCommandContext ctx) {\n+    public UnresolvedPlan visitWhereCommand(WhereCommandContext ctx) {\n         return new Filter(visitExpression(ctx.logicalExpression()));\n     }\n \n     /** Fields command */\n     @Override\n-    public LogicalPlan visitFieldsCommand(FieldsCommandContext ctx) {\n+    public UnresolvedPlan visitFieldsCommand(FieldsCommandContext ctx) {\n         return new Project(\n                 ctx.wcFieldList()\n                         .wcFieldExpression()\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODMzOTk3Ng==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/429#discussion_r408339976", "body": "Is this necessary? I assume parser has handled this?", "bodyText": "Is this necessary? I assume parser has handled this?", "bodyHTML": "<p dir=\"auto\">Is this necessary? I assume parser has handled this?</p>", "author": "dai-chen", "createdAt": "2020-04-14T18:15:59Z", "path": "ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/parser/AstExpressionBuilder.java", "diffHunk": "@@ -0,0 +1,177 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.ppl.parser;\n+\n+import com.amazon.opendistroforelasticsearch.sql.ppl.antlr.parser.OpenDistroPPLParser;\n+import com.amazon.opendistroforelasticsearch.sql.ppl.antlr.parser.OpenDistroPPLParserBaseVisitor;\n+import com.amazon.opendistroforelasticsearch.sql.ppl.plans.expression.AggregateFunction;\n+import com.amazon.opendistroforelasticsearch.sql.ppl.plans.expression.And;\n+import com.amazon.opendistroforelasticsearch.sql.ppl.plans.expression.AttributeList;\n+import com.amazon.opendistroforelasticsearch.sql.ppl.plans.expression.DataType;\n+import com.amazon.opendistroforelasticsearch.sql.ppl.plans.expression.EqualTo;\n+import com.amazon.opendistroforelasticsearch.sql.ppl.plans.expression.Expression;\n+import com.amazon.opendistroforelasticsearch.sql.ppl.plans.expression.Function;\n+import com.amazon.opendistroforelasticsearch.sql.ppl.plans.expression.In;\n+import com.amazon.opendistroforelasticsearch.sql.ppl.plans.expression.Literal;\n+import com.amazon.opendistroforelasticsearch.sql.ppl.plans.expression.Not;\n+import com.amazon.opendistroforelasticsearch.sql.ppl.plans.expression.Or;\n+import com.amazon.opendistroforelasticsearch.sql.ppl.plans.expression.UnresolvedAttribute;\n+import java.util.stream.Collectors;\n+\n+public class AstExpressionBuilder extends OpenDistroPPLParserBaseVisitor<Expression> {\n+    /** Logical expression excluding boolean, eval, comparison */\n+    @Override\n+    public Expression visitLogicalNot(OpenDistroPPLParser.LogicalNotContext ctx) {\n+        return new Not(visit(ctx.logicalExpression()));\n+    }\n+\n+    @Override\n+    public Expression visitLogicalOr(OpenDistroPPLParser.LogicalOrContext ctx) {\n+        return new Or(visit(ctx.left), visit(ctx.right));\n+    }\n+\n+    @Override\n+    public Expression visitLogicalAnd(OpenDistroPPLParser.LogicalAndContext ctx) {\n+        return new And(visit(ctx.left), visit(ctx.right));\n+    }\n+\n+\n+    /** Eval expression */\n+    @Override\n+    public Expression visitEvalExpression(OpenDistroPPLParser.EvalExpressionContext ctx) {\n+        Expression field = visit(ctx.fieldExpression());\n+        Expression evalFunctionCall = visit(ctx.evalFunctionCall());\n+        return new EqualTo(field, evalFunctionCall);\n+    }\n+\n+    /** Comparison expression */\n+    @Override\n+    public Expression visitCompareExpr(OpenDistroPPLParser.CompareExprContext ctx) {\n+        Expression field = visit(ctx.left);\n+        Expression value = visit(ctx.right);\n+        String operator = ctx.comparisonOperator().getText();\n+        switch (operator.replaceAll(\"\\\\s\",\"\")) {", "originalCommit": "6b542eb5496b0034f8506a8b15e53071d56686ad", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ4MDUwNA==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/429#discussion_r410480504", "bodyText": "Yeah makes sense, I overthought the cases. I will remove it. Thanks!", "author": "chloe-zh", "createdAt": "2020-04-17T21:33:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODMzOTk3Ng=="}], "type": "inlineReview", "revised_code": {"commit": "17a8503378d37e5ba5d76ef0a888aedd909d3ea4", "changed_code": [{"header": "diff --git a/ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/parser/AstExpressionBuilder.java b/ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/parser/AstExpressionBuilder.java\nindex db1c7cd4..0fd37e85 100644\n--- a/ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/parser/AstExpressionBuilder.java\n+++ b/ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/parser/AstExpressionBuilder.java\n", "chunk": "@@ -59,7 +87,7 @@ public class AstExpressionBuilder extends OpenDistroPPLParserBaseVisitor<Express\n \n     /** Comparison expression */\n     @Override\n-    public Expression visitCompareExpr(OpenDistroPPLParser.CompareExprContext ctx) {\n+    public Expression visitCompareExpr(CompareExprContext ctx) {\n         Expression field = visit(ctx.left);\n         Expression value = visit(ctx.right);\n         String operator = ctx.comparisonOperator().getText();\n", "next_change": {"commit": "784df880868ef82a3062bbded3b28a5a3d8412f0", "changed_code": [{"header": "diff --git a/ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/parser/AstExpressionBuilder.java b/ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/parser/AstExpressionBuilder.java\nindex 0fd37e85..8b50b674 100644\n--- a/ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/parser/AstExpressionBuilder.java\n+++ b/ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/parser/AstExpressionBuilder.java\n", "chunk": "@@ -91,7 +91,7 @@ public class AstExpressionBuilder extends OpenDistroPPLParserBaseVisitor<Express\n         Expression field = visit(ctx.left);\n         Expression value = visit(ctx.right);\n         String operator = ctx.comparisonOperator().getText();\n-        switch (operator.replaceAll(\"\\\\s\",\"\")) {\n+        switch (operator) {\n             case \"==\":\n             case \"=\":\n                 return new EqualTo(field, value);\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM0MDMyMg==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/429#discussion_r408340322", "body": "Why not just remove it from grammar?", "bodyText": "Why not just remove it from grammar?", "bodyHTML": "<p dir=\"auto\">Why not just remove it from grammar?</p>", "author": "dai-chen", "createdAt": "2020-04-14T18:16:38Z", "path": "ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/parser/AstExpressionBuilder.java", "diffHunk": "@@ -0,0 +1,177 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.ppl.parser;\n+\n+import com.amazon.opendistroforelasticsearch.sql.ppl.antlr.parser.OpenDistroPPLParser;\n+import com.amazon.opendistroforelasticsearch.sql.ppl.antlr.parser.OpenDistroPPLParserBaseVisitor;\n+import com.amazon.opendistroforelasticsearch.sql.ppl.plans.expression.AggregateFunction;\n+import com.amazon.opendistroforelasticsearch.sql.ppl.plans.expression.And;\n+import com.amazon.opendistroforelasticsearch.sql.ppl.plans.expression.AttributeList;\n+import com.amazon.opendistroforelasticsearch.sql.ppl.plans.expression.DataType;\n+import com.amazon.opendistroforelasticsearch.sql.ppl.plans.expression.EqualTo;\n+import com.amazon.opendistroforelasticsearch.sql.ppl.plans.expression.Expression;\n+import com.amazon.opendistroforelasticsearch.sql.ppl.plans.expression.Function;\n+import com.amazon.opendistroforelasticsearch.sql.ppl.plans.expression.In;\n+import com.amazon.opendistroforelasticsearch.sql.ppl.plans.expression.Literal;\n+import com.amazon.opendistroforelasticsearch.sql.ppl.plans.expression.Not;\n+import com.amazon.opendistroforelasticsearch.sql.ppl.plans.expression.Or;\n+import com.amazon.opendistroforelasticsearch.sql.ppl.plans.expression.UnresolvedAttribute;\n+import java.util.stream.Collectors;\n+\n+public class AstExpressionBuilder extends OpenDistroPPLParserBaseVisitor<Expression> {\n+    /** Logical expression excluding boolean, eval, comparison */\n+    @Override\n+    public Expression visitLogicalNot(OpenDistroPPLParser.LogicalNotContext ctx) {\n+        return new Not(visit(ctx.logicalExpression()));\n+    }\n+\n+    @Override\n+    public Expression visitLogicalOr(OpenDistroPPLParser.LogicalOrContext ctx) {\n+        return new Or(visit(ctx.left), visit(ctx.right));\n+    }\n+\n+    @Override\n+    public Expression visitLogicalAnd(OpenDistroPPLParser.LogicalAndContext ctx) {\n+        return new And(visit(ctx.left), visit(ctx.right));\n+    }\n+\n+\n+    /** Eval expression */\n+    @Override\n+    public Expression visitEvalExpression(OpenDistroPPLParser.EvalExpressionContext ctx) {\n+        Expression field = visit(ctx.fieldExpression());\n+        Expression evalFunctionCall = visit(ctx.evalFunctionCall());\n+        return new EqualTo(field, evalFunctionCall);\n+    }\n+\n+    /** Comparison expression */\n+    @Override\n+    public Expression visitCompareExpr(OpenDistroPPLParser.CompareExprContext ctx) {\n+        Expression field = visit(ctx.left);\n+        Expression value = visit(ctx.right);\n+        String operator = ctx.comparisonOperator().getText();\n+        switch (operator.replaceAll(\"\\\\s\",\"\")) {\n+            case \"==\":\n+            case \"=\":\n+                return new EqualTo(field, value);\n+            default:\n+                throw new UnsupportedOperationException(String.format(\"unsupported operator [%s]\", operator));", "originalCommit": "6b542eb5496b0034f8506a8b15e53071d56686ad", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ4MTM3Mg==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/429#discussion_r410481372", "bodyText": "This was a temporary solution here, because we still have a couple of binary operators to add. I will finish them in next PR, which is to supplement all the optional arguments in commands of phase0.", "author": "chloe-zh", "createdAt": "2020-04-17T21:35:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM0MDMyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDUyMTI2Mg==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/429#discussion_r410521262", "bodyText": "Got it. Thanks!", "author": "dai-chen", "createdAt": "2020-04-18T00:09:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM0MDMyMg=="}], "type": "inlineReview", "revised_code": {"commit": "17a8503378d37e5ba5d76ef0a888aedd909d3ea4", "changed_code": [{"header": "diff --git a/ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/parser/AstExpressionBuilder.java b/ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/parser/AstExpressionBuilder.java\nindex db1c7cd4..0fd37e85 100644\n--- a/ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/parser/AstExpressionBuilder.java\n+++ b/ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/parser/AstExpressionBuilder.java\n", "chunk": "@@ -73,7 +101,7 @@ public class AstExpressionBuilder extends OpenDistroPPLParserBaseVisitor<Express\n     }\n \n     @Override\n-    public Expression visitInExpr(OpenDistroPPLParser.InExprContext ctx) {\n+    public Expression visitInExpr(InExprContext ctx) {\n         return new In(\n                 visit(ctx.fieldExpression()),\n                 ctx.valueList()\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM0MzE1OA==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/429#discussion_r408343158", "body": "return `left` and `right`? And same for other `getChild()`.", "bodyText": "return left and right? And same for other getChild().", "bodyHTML": "<p dir=\"auto\">return <code>left</code> and <code>right</code>? And same for other <code>getChild()</code>.</p>", "author": "dai-chen", "createdAt": "2020-04-14T18:21:27Z", "path": "ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/plans/expression/And.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.ppl.plans.expression;\n+\n+import com.amazon.opendistroforelasticsearch.sql.ppl.node.AbstractNodeVisitor;\n+import com.amazon.opendistroforelasticsearch.sql.ppl.node.NodeVisitor;\n+import com.google.common.collect.ImmutableList;\n+import java.util.List;\n+import lombok.EqualsAndHashCode;\n+import lombok.Getter;\n+import lombok.RequiredArgsConstructor;\n+import lombok.ToString;\n+\n+@Getter\n+@ToString\n+@EqualsAndHashCode\n+@RequiredArgsConstructor\n+public class And extends Expression {\n+    private final Expression left;\n+    private final Expression right;\n+\n+    @Override\n+    public List<Expression> getChild() {\n+        return ImmutableList.of();", "originalCommit": "6b542eb5496b0034f8506a8b15e53071d56686ad", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ5ODAyOA==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/429#discussion_r410498028", "bodyText": "Yes exactly, will do. Thanks!", "author": "chloe-zh", "createdAt": "2020-04-17T22:24:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM0MzE1OA=="}], "type": "inlineReview", "revised_code": {"commit": "c251f030006ab69ee24a1aa8c7b1d905d2701703", "changed_code": [{"header": "diff --git a/ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/plans/expression/And.java b/ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/plans/expression/And.java\nindex ceec866c..b8bac077 100644\n--- a/ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/plans/expression/And.java\n+++ b/ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/plans/expression/And.java\n", "chunk": "@@ -34,7 +37,7 @@ public class And extends Expression {\n \n     @Override\n     public List<Expression> getChild() {\n-        return ImmutableList.of();\n+        return Arrays.asList(left, right);\n     }\n \n     @Override\n", "next_change": {"commit": "a898546c411297b33e149ce4249ae7376a1db5ac", "changed_code": [{"header": "diff --git a/ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/plans/expression/And.java b/ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/plans/expression/And.java\nindex b8bac077..1ca2f256 100644\n--- a/ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/plans/expression/And.java\n+++ b/ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/plans/expression/And.java\n", "chunk": "@@ -41,11 +40,7 @@ public class And extends Expression {\n     }\n \n     @Override\n-    public <R> R accept(NodeVisitor<R> nodeVisitor) {\n-        if (nodeVisitor instanceof AbstractNodeVisitor) {\n-            return ((AbstractNodeVisitor<R>) nodeVisitor).visitAnd(this);\n-        } else {\n-            return nodeVisitor.visitChildren(this);\n-        }\n+    public <R, C> R accept(AbstractNodeVisitor<R, C> nodeVisitor, C context) {\n+        return nodeVisitor.visitAnd(this, context);\n     }\n }\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM0NTA3OQ==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/429#discussion_r408345079", "body": "I see a pattern for all `accept` methods. We can think about how to make it clean.", "bodyText": "I see a pattern for all accept methods. We can think about how to make it clean.", "bodyHTML": "<p dir=\"auto\">I see a pattern for all <code>accept</code> methods. We can think about how to make it clean.</p>", "author": "dai-chen", "createdAt": "2020-04-14T18:24:32Z", "path": "ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/plans/expression/AggregateFunction.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.ppl.plans.expression;\n+\n+import com.amazon.opendistroforelasticsearch.sql.ppl.node.AbstractNodeVisitor;\n+import com.amazon.opendistroforelasticsearch.sql.ppl.node.NodeVisitor;\n+import com.google.common.collect.ImmutableList;\n+import java.util.List;\n+import lombok.EqualsAndHashCode;\n+import lombok.Getter;\n+import lombok.RequiredArgsConstructor;\n+import lombok.ToString;\n+\n+@Getter\n+@ToString\n+@EqualsAndHashCode\n+@RequiredArgsConstructor\n+public class AggregateFunction extends Expression {\n+    private final Expression funcName;\n+    private final Expression field;\n+\n+    @Override\n+    public List<Expression> getChild() {\n+        return ImmutableList.of();\n+    }\n+\n+    @Override\n+    public <R> R accept(NodeVisitor<R> nodeVisitor) {\n+        if (nodeVisitor instanceof AbstractNodeVisitor) {\n+            return ((AbstractNodeVisitor<R>) nodeVisitor).visitAggregateFunction(this);\n+        } else {\n+            return nodeVisitor.visitChildren(this);\n+        }", "originalCommit": "6b542eb5496b0034f8506a8b15e53071d56686ad", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a898546c411297b33e149ce4249ae7376a1db5ac", "changed_code": [{"header": "diff --git a/ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/plans/expression/AggregateFunction.java b/ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/plans/expression/AggregateFunction.java\nindex 59287f2c..5ebcd474 100644\n--- a/ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/plans/expression/AggregateFunction.java\n+++ b/ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/plans/expression/AggregateFunction.java\n", "chunk": "@@ -16,33 +16,32 @@\n package com.amazon.opendistroforelasticsearch.sql.ppl.plans.expression;\n \n import com.amazon.opendistroforelasticsearch.sql.ppl.node.AbstractNodeVisitor;\n-import com.amazon.opendistroforelasticsearch.sql.ppl.node.NodeVisitor;\n-import com.google.common.collect.ImmutableList;\n+import java.util.Arrays;\n import java.util.List;\n import lombok.EqualsAndHashCode;\n import lombok.Getter;\n import lombok.RequiredArgsConstructor;\n import lombok.ToString;\n \n+/**\n+ * Expression node of aggregate functions\n+ * Params include aggregate function name (AVG, SUM, MAX etc.) and the field to aggregate\n+ */\n @Getter\n @ToString\n-@EqualsAndHashCode\n+@EqualsAndHashCode(callSuper = false)\n @RequiredArgsConstructor\n public class AggregateFunction extends Expression {\n-    private final Expression funcName;\n+    private final String funcName;\n     private final Expression field;\n \n     @Override\n     public List<Expression> getChild() {\n-        return ImmutableList.of();\n+        return Arrays.asList(field);\n     }\n \n     @Override\n-    public <R> R accept(NodeVisitor<R> nodeVisitor) {\n-        if (nodeVisitor instanceof AbstractNodeVisitor) {\n-            return ((AbstractNodeVisitor<R>) nodeVisitor).visitAggregateFunction(this);\n-        } else {\n-            return nodeVisitor.visitChildren(this);\n-        }\n+    public <R, C> R accept(AbstractNodeVisitor<R, C> nodeVisitor, C context) {\n+        return nodeVisitor.visitAggregateFunction(this, context);\n     }\n }\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM0NjU5MA==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/429#discussion_r408346590", "body": "The class is already annotated by `@Getter`?", "bodyText": "The class is already annotated by @Getter?", "bodyHTML": "<p dir=\"auto\">The class is already annotated by <code>@Getter</code>?</p>", "author": "dai-chen", "createdAt": "2020-04-14T18:27:05Z", "path": "ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/plans/logical/Aggregation.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.ppl.plans.logical;\n+\n+import com.amazon.opendistroforelasticsearch.sql.ppl.node.AbstractNodeVisitor;\n+import com.amazon.opendistroforelasticsearch.sql.ppl.node.NodeVisitor;\n+import com.amazon.opendistroforelasticsearch.sql.ppl.plans.expression.Expression;\n+import com.google.common.collect.ImmutableList;\n+import java.util.List;\n+import lombok.EqualsAndHashCode;\n+import lombok.Getter;\n+import lombok.Setter;\n+import lombok.ToString;\n+\n+@Getter\n+@ToString\n+@EqualsAndHashCode\n+public class Aggregation extends LogicalPlan {\n+    @Getter", "originalCommit": "6b542eb5496b0034f8506a8b15e53071d56686ad", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ4Njk4OQ==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/429#discussion_r410486989", "bodyText": "Removed, thanks!", "author": "chloe-zh", "createdAt": "2020-04-17T21:50:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM0NjU5MA=="}], "type": "inlineReview", "revised_code": {"commit": "ddf9c5a0dd4fc45dab4737cbd122396ddce87b6f", "changed_code": [{"header": "diff --git a/ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/plans/logical/Aggregation.java b/ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/plans/logical/Aggregation.java\nindex 798d8343..2e6c85de 100644\n--- a/ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/plans/logical/Aggregation.java\n+++ b/ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/plans/logical/Aggregation.java\n", "chunk": "@@ -25,6 +25,9 @@ import lombok.Getter;\n import lombok.Setter;\n import lombok.ToString;\n \n+/**\n+ * Logical plan node of Aggregation, the interface for building aggregation actions in queries\n+ */\n @Getter\n @ToString\n @EqualsAndHashCode\n", "next_change": {"commit": "784df880868ef82a3062bbded3b28a5a3d8412f0", "changed_code": [{"header": "diff --git a/ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/plans/logical/Aggregation.java b/ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/plans/logical/Aggregation.java\nindex 2e6c85de..a1a16a17 100644\n--- a/ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/plans/logical/Aggregation.java\n+++ b/ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/plans/logical/Aggregation.java\n", "chunk": "@@ -32,7 +32,6 @@ import lombok.ToString;\n @ToString\n @EqualsAndHashCode\n public class Aggregation extends LogicalPlan {\n-    @Getter\n     private LogicalPlan input;\n     @Setter\n     private List<Expression> aggExprList;\n", "next_change": {"commit": "412f6f05349a36433d8f9697b21591295de0a3ac", "changed_code": [{"header": "diff --git a/ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/plans/logical/Aggregation.java b/ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/plans/logical/Aggregation.java\nindex a1a16a17..12acd5bd 100644\n--- a/ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/plans/logical/Aggregation.java\n+++ b/ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/plans/logical/Aggregation.java\n", "chunk": "@@ -31,8 +31,8 @@ import lombok.ToString;\n @Getter\n @ToString\n @EqualsAndHashCode\n-public class Aggregation extends LogicalPlan {\n-    private LogicalPlan input;\n+public class Aggregation extends UnresolvedPlan {\n+    private UnresolvedPlan input;\n     @Setter\n     private List<Expression> aggExprList;\n     @Setter\n", "next_change": {"commit": "a898546c411297b33e149ce4249ae7376a1db5ac", "changed_code": [{"header": "diff --git a/ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/plans/logical/Aggregation.java b/ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/plans/logical/Aggregation.java\nindex 12acd5bd..56ef4b8c 100644\n--- a/ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/plans/logical/Aggregation.java\n+++ b/ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/plans/logical/Aggregation.java\n", "chunk": "@@ -29,42 +30,29 @@ import lombok.ToString;\n  * Logical plan node of Aggregation, the interface for building aggregation actions in queries\n  */\n @Getter\n+@Setter\n @ToString\n-@EqualsAndHashCode\n+@EqualsAndHashCode(callSuper = false)\n+@AllArgsConstructor\n public class Aggregation extends UnresolvedPlan {\n-    private UnresolvedPlan input;\n-    @Setter\n     private List<Expression> aggExprList;\n-    @Setter\n     private List<Expression> sortExprList;\n-    @Setter\n     private List<Expression> groupExprList;\n+    private UnresolvedPlan input;\n \n-    public Aggregation(List<Expression> aggExprList,\n-                       List<Expression> sortExprList,\n-                       List<Expression> groupExprList) {\n+    public Aggregation(List<Expression> aggExprList, List<Expression> sortExprList, List<Expression> groupExprList) {\n         this.aggExprList = aggExprList;\n         this.sortExprList = sortExprList;\n         this.groupExprList = groupExprList;\n     }\n \n-    @Override\n-    public Aggregation withInput(UnresolvedPlan input) {\n-        this.input = input;\n-        return this;\n-    }\n-\n     @Override\n     public List<UnresolvedPlan> getChild() {\n-        return ImmutableList.of(input);\n+        return ImmutableList.of(this.input);\n     }\n \n     @Override\n-    public <R> R accept(NodeVisitor<R> nodeVisitor) {\n-        if (nodeVisitor instanceof AbstractNodeVisitor) {\n-            return ((AbstractNodeVisitor<R>) nodeVisitor).visitAggregation(this);\n-        } else {\n-            return nodeVisitor.visitChildren(this);\n-        }\n+    public <T, C> T accept(AbstractNodeVisitor<T, C> nodeVisitor, C context) {\n+        return nodeVisitor.visitAggregation(this, context);\n     }\n }\n", "next_change": {"commit": "acb157508ae78ee1fa08975d7bbbbfc36aa45576", "changed_code": [{"header": "diff --git a/ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/plans/logical/Aggregation.java b/ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/plans/logical/Aggregation.java\nindex 56ef4b8c..ea7373af 100644\n--- a/ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/plans/logical/Aggregation.java\n+++ b/ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/plans/logical/Aggregation.java\n", "chunk": "@@ -48,11 +48,37 @@ public class Aggregation extends UnresolvedPlan {\n \n     @Override\n     public List<UnresolvedPlan> getChild() {\n-        return ImmutableList.of(this.input);\n+        return ImmutableList.of(this.child);\n     }\n \n     @Override\n     public <T, C> T accept(AbstractNodeVisitor<T, C> nodeVisitor, C context) {\n         return nodeVisitor.visitAggregation(this, context);\n     }\n+\n+    private Aggregation(Builder builder) {\n+        this.child = builder.child;\n+    }\n+\n+    /**\n+     * Aggregation plan builder\n+     */\n+    public static class Builder extends UnresolvedPlanBuilder<Aggregation> {\n+        private UnresolvedPlan child;\n+\n+        public Builder(Aggregation plan) {\n+            super(plan);\n+        }\n+\n+        @Override\n+        public UnresolvedPlanBuilder attachPlan(UnresolvedPlan attach) {\n+            this.child = attach;\n+            return this;\n+        }\n+\n+        @Override\n+        public Aggregation build() {\n+            return new Aggregation(this);\n+        }\n+    }\n }\n", "next_change": {"commit": "092adbfbb4b647dffddacca21efa39d8ec601c33", "changed_code": [{"header": "diff --git a/ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/plans/logical/Aggregation.java b/ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/plans/logical/Aggregation.java\nindex ea7373af..157958f3 100644\n--- a/ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/plans/logical/Aggregation.java\n+++ b/ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/plans/logical/Aggregation.java\n", "chunk": "@@ -55,30 +61,4 @@ public class Aggregation extends UnresolvedPlan {\n     public <T, C> T accept(AbstractNodeVisitor<T, C> nodeVisitor, C context) {\n         return nodeVisitor.visitAggregation(this, context);\n     }\n-\n-    private Aggregation(Builder builder) {\n-        this.child = builder.child;\n-    }\n-\n-    /**\n-     * Aggregation plan builder\n-     */\n-    public static class Builder extends UnresolvedPlanBuilder<Aggregation> {\n-        private UnresolvedPlan child;\n-\n-        public Builder(Aggregation plan) {\n-            super(plan);\n-        }\n-\n-        @Override\n-        public UnresolvedPlanBuilder attachPlan(UnresolvedPlan attach) {\n-            this.child = attach;\n-            return this;\n-        }\n-\n-        @Override\n-        public Aggregation build() {\n-            return new Aggregation(this);\n-        }\n-    }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM0NzU5MA==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/429#discussion_r408347590", "body": "Please add JavaDoc for generic type too.", "bodyText": "Please add JavaDoc for generic type too.", "bodyHTML": "<p dir=\"auto\">Please add JavaDoc for generic type too.</p>", "author": "dai-chen", "createdAt": "2020-04-14T18:28:46Z", "path": "ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/plans/logical/HasInput.java", "diffHunk": "@@ -0,0 +1,20 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.ppl.plans.logical;\n+\n+public interface HasInput<T, R> {", "originalCommit": "6b542eb5496b0034f8506a8b15e53071d56686ad", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ4OTk5Mw==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/429#discussion_r410489993", "bodyText": "Ok will do, thanks!", "author": "chloe-zh", "createdAt": "2020-04-17T21:58:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM0NzU5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ2MTg5OA==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/429#discussion_r411461898", "bodyText": "could we make the node Immutable by using the context to maintain the current parent command?", "author": "penghuo", "createdAt": "2020-04-20T15:15:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM0NzU5MA=="}], "type": "inlineReview", "revised_code": {"commit": "784df880868ef82a3062bbded3b28a5a3d8412f0", "changed_code": [{"header": "diff --git a/ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/plans/logical/HasInput.java b/ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/plans/logical/HasInput.java\nindex 6d12b45a..9b757d78 100644\n--- a/ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/plans/logical/HasInput.java\n+++ b/ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/plans/logical/HasInput.java\n", "chunk": "@@ -15,6 +15,11 @@\n \n package com.amazon.opendistroforelasticsearch.sql.ppl.plans.logical;\n \n+/**\n+ * The interface to set the parent for current LogicalPlan/Expression node\n+ * @param <T> type of parent node\n+ * @param <R> type of current node\n+ */\n public interface HasInput<T, R> {\n     R withInput(T input);\n }\n", "next_change": {"commit": "412f6f05349a36433d8f9697b21591295de0a3ac", "changed_code": [{"header": "diff --git a/ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/plans/logical/HasInput.java b/ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/plans/logical/HasInput.java\nindex 9b757d78..dcd5adce 100644\n--- a/ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/plans/logical/HasInput.java\n+++ b/ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/plans/logical/HasInput.java\n", "chunk": "@@ -16,7 +16,7 @@\n package com.amazon.opendistroforelasticsearch.sql.ppl.plans.logical;\n \n /**\n- * The interface to set the parent for current LogicalPlan/Expression node\n+ * The interface to set the parent for current UnresolvedPlan/Expression node\n  * @param <T> type of parent node\n  * @param <R> type of current node\n  */\n", "next_change": {"commit": "acb157508ae78ee1fa08975d7bbbbfc36aa45576", "changed_code": [{"header": "diff --git a/ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/plans/logical/HasInput.java b/core/src/main/java/com/amazon/opendistroforelasticsearch/sql/data/model/ExprValue.java\nsimilarity index 66%\nrename from ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/plans/logical/HasInput.java\nrename to core/src/main/java/com/amazon/opendistroforelasticsearch/sql/data/model/ExprValue.java\nindex dcd5adce..d61ea8a7 100644\n--- a/ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/plans/logical/HasInput.java\n+++ b/core/src/main/java/com/amazon/opendistroforelasticsearch/sql/data/model/ExprValue.java\n", "chunk": "@@ -13,13 +13,19 @@\n  *   permissions and limitations under the License.\n  */\n \n-package com.amazon.opendistroforelasticsearch.sql.ppl.plans.logical;\n+package com.amazon.opendistroforelasticsearch.sql.data.model;\n \n /**\n- * The interface to set the parent for current UnresolvedPlan/Expression node\n- * @param <T> type of parent node\n- * @param <R> type of current node\n+ * The definition of the Expression Value.\n  */\n-public interface HasInput<T, R> {\n-    R withInput(T input);\n+public interface ExprValue {\n+    /**\n+     * Get the Object value of the Expression Value.\n+     */\n+    Object value();\n+\n+    /**\n+     * Get the {@link ExprType} of the Expression Value.\n+     */\n+    ExprType type();\n }\n", "next_change": null}]}}]}}]}}, {"oid": "46bb1dc41b5154bd4274c2dc9b0c2b63b8582a24", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/46bb1dc41b5154bd4274c2dc9b0c2b63b8582a24", "message": "Enabled parsing nested fields and arrays in field", "committedDate": "2020-04-16T22:00:14Z", "type": "commit"}, {"oid": "80b06294773f7013a2f51b72ebce3c71f54257f8", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/80b06294773f7013a2f51b72ebce3c71f54257f8", "message": "Added unit tests for nested fields", "committedDate": "2020-04-17T18:00:26Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ2NDcxMw==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/429#discussion_r410464713", "body": "should it be \"Keyword\" instead of \"KeyWord\"", "bodyText": "should it be \"Keyword\" instead of \"KeyWord\"", "bodyHTML": "<p dir=\"auto\">should it be \"Keyword\" instead of \"KeyWord\"</p>", "author": "zhongnansu", "createdAt": "2020-04-17T20:54:19Z", "path": "ppl/src/test/java/com/amazon/opendistroforelasticsearch/sql/ppl/parser/AstExpressionBuilderTest.java", "diffHunk": "@@ -0,0 +1,190 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.ppl.parser;\n+\n+import java.util.Collections;\n+import org.junit.Test;\n+import static com.amazon.opendistroforelasticsearch.sql.ppl.plans.dsl.DSL.agg;\n+import static com.amazon.opendistroforelasticsearch.sql.ppl.plans.dsl.DSL.aggregate;\n+import static com.amazon.opendistroforelasticsearch.sql.ppl.plans.dsl.DSL.and;\n+import static com.amazon.opendistroforelasticsearch.sql.ppl.plans.dsl.DSL.doubleLiteral;\n+import static com.amazon.opendistroforelasticsearch.sql.ppl.plans.dsl.DSL.equalTo;\n+import static com.amazon.opendistroforelasticsearch.sql.ppl.plans.dsl.DSL.filter;\n+import static com.amazon.opendistroforelasticsearch.sql.ppl.plans.dsl.DSL.function;\n+import static com.amazon.opendistroforelasticsearch.sql.ppl.plans.dsl.DSL.in;\n+import static com.amazon.opendistroforelasticsearch.sql.ppl.plans.dsl.DSL.intLiteral;\n+import static com.amazon.opendistroforelasticsearch.sql.ppl.plans.dsl.DSL.not;\n+import static com.amazon.opendistroforelasticsearch.sql.ppl.plans.dsl.DSL.or;\n+import static com.amazon.opendistroforelasticsearch.sql.ppl.plans.dsl.DSL.project;\n+import static com.amazon.opendistroforelasticsearch.sql.ppl.plans.dsl.DSL.relation;\n+import static com.amazon.opendistroforelasticsearch.sql.ppl.plans.dsl.DSL.stringLiteral;\n+import static com.amazon.opendistroforelasticsearch.sql.ppl.plans.dsl.DSL.unresolvedAttr;\n+\n+public class AstExpressionBuilderTest extends AstBuilderTest{\n+\n+    @Test\n+    public void testLogicalNotExpr() {\n+        assertEqual(\"source=t not a=1\",\n+                filter(\n+                        relation(\"t\"),\n+                        not(\n+                                equalTo(unresolvedAttr(\"a\"), intLiteral(1))\n+                        )\n+                ));\n+    }\n+\n+    @Test\n+    public void testLogicalOrExpr() {\n+        assertEqual(\"source=t a=1 or b=2\",\n+                filter(\n+                        relation(\"t\"),\n+                        or(\n+                                equalTo(unresolvedAttr(\"a\"), intLiteral(1)),\n+                                equalTo(unresolvedAttr(\"b\"), intLiteral(2))\n+                        )\n+                ));\n+    }\n+\n+    @Test\n+    public void testLogicalAndExpr() {\n+        assertEqual(\"source=t a=1 and b=2\",\n+                filter(\n+                        relation(\"t\"),\n+                        and(\n+                                equalTo(unresolvedAttr(\"a\"), intLiteral(1)),\n+                                equalTo(unresolvedAttr(\"b\"), intLiteral(2))\n+                        )\n+                ));\n+    }\n+\n+    @Test\n+    public void testLogicalAndExprWithoutKeyWordAnd() {", "originalCommit": "6b542eb5496b0034f8506a8b15e53071d56686ad", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ5MDIyMQ==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/429#discussion_r410490221", "bodyText": "Will do, thanks!", "author": "chloe-zh", "createdAt": "2020-04-17T21:59:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ2NDcxMw=="}], "type": "inlineReview", "revised_code": {"commit": "784df880868ef82a3062bbded3b28a5a3d8412f0", "changed_code": [{"header": "diff --git a/ppl/src/test/java/com/amazon/opendistroforelasticsearch/sql/ppl/parser/AstExpressionBuilderTest.java b/ppl/src/test/java/com/amazon/opendistroforelasticsearch/sql/ppl/parser/AstExpressionBuilderTest.java\nindex 6bc73f44..e368ff4b 100644\n--- a/ppl/src/test/java/com/amazon/opendistroforelasticsearch/sql/ppl/parser/AstExpressionBuilderTest.java\n+++ b/ppl/src/test/java/com/amazon/opendistroforelasticsearch/sql/ppl/parser/AstExpressionBuilderTest.java\n", "chunk": "@@ -71,7 +73,7 @@ public class AstExpressionBuilderTest extends AstBuilderTest{\n     }\n \n     @Test\n-    public void testLogicalAndExprWithoutKeyWordAnd() {\n+    public void testLogicalAndExprWithoutKeywordAnd() {\n         assertEqual(\"source=t a=1 b=2\",\n                 filter(\n                         relation(\"t\"),\n", "next_change": null}]}}, {"oid": "ddf9c5a0dd4fc45dab4737cbd122396ddce87b6f", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/ddf9c5a0dd4fc45dab4737cbd122396ddce87b6f", "message": "Added Java doc for classes", "committedDate": "2020-04-17T21:30:08Z", "type": "commit"}, {"oid": "17a8503378d37e5ba5d76ef0a888aedd909d3ea4", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/17a8503378d37e5ba5d76ef0a888aedd909d3ea4", "message": "Replaced the imported parser with static methods in the parser", "committedDate": "2020-04-17T21:49:03Z", "type": "commit"}, {"oid": "784df880868ef82a3062bbded3b28a5a3d8412f0", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/784df880868ef82a3062bbded3b28a5a3d8412f0", "message": "Addressed comments", "committedDate": "2020-04-17T22:01:36Z", "type": "commit"}, {"oid": "c251f030006ab69ee24a1aa8c7b1d905d2701703", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/c251f030006ab69ee24a1aa8c7b1d905d2701703", "message": "Addressed comments", "committedDate": "2020-04-17T22:22:36Z", "type": "commit"}, {"oid": "3a92f1169381a911bde9adb31a9e0aa28700be24", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/3a92f1169381a911bde9adb31a9e0aa28700be24", "message": "Addressed comments", "committedDate": "2020-04-18T01:58:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ2MDkxMA==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/429#discussion_r411460910", "body": "change LogicalPlan to UnresolvedPlan. In case all the object is from literal query string which is not resolved with env yet.", "bodyText": "change LogicalPlan to UnresolvedPlan. In case all the object is from literal query string which is not resolved with env yet.", "bodyHTML": "<p dir=\"auto\">change LogicalPlan to UnresolvedPlan. In case all the object is from literal query string which is not resolved with env yet.</p>", "author": "penghuo", "createdAt": "2020-04-20T15:14:34Z", "path": "ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/plans/logical/LogicalPlan.java", "diffHunk": "@@ -0,0 +1,22 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.ppl.plans.logical;\n+\n+import com.amazon.opendistroforelasticsearch.sql.ppl.node.Node;\n+\n+public abstract class LogicalPlan implements Node<LogicalPlan>, HasInput<LogicalPlan, LogicalPlan> {", "originalCommit": "c251f030006ab69ee24a1aa8c7b1d905d2701703", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU2MDU0OQ==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/429#discussion_r411560549", "bodyText": "Ok will do", "author": "chloe-zh", "createdAt": "2020-04-20T17:30:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ2MDkxMA=="}], "type": "inlineReview", "revised_code": {"commit": "412f6f05349a36433d8f9697b21591295de0a3ac", "changed_code": [{"header": "diff --git a/ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/plans/logical/LogicalPlan.java b/ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/plans/logical/UnresolvedPlan.java\nsimilarity index 86%\nrename from ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/plans/logical/LogicalPlan.java\nrename to ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/plans/logical/UnresolvedPlan.java\nindex a52b6673..f4b4d035 100644\n--- a/ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/plans/logical/LogicalPlan.java\n+++ b/ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/plans/logical/UnresolvedPlan.java\n", "chunk": "@@ -17,6 +17,6 @@ package com.amazon.opendistroforelasticsearch.sql.ppl.plans.logical;\n \n import com.amazon.opendistroforelasticsearch.sql.ppl.node.Node;\n \n-public abstract class LogicalPlan implements Node<LogicalPlan>, HasInput<LogicalPlan, LogicalPlan> {\n+public abstract class UnresolvedPlan implements Node<UnresolvedPlan>, HasInput<UnresolvedPlan, UnresolvedPlan> {\n \n }\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ3MTE2MA==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/429#discussion_r411471160", "body": "Why we want to different SearchFromFilter and SearchFilterFrom? ", "bodyText": "Why we want to different SearchFromFilter and SearchFilterFrom?", "bodyHTML": "<p dir=\"auto\">Why we want to different SearchFromFilter and SearchFilterFrom?</p>", "author": "penghuo", "createdAt": "2020-04-20T15:27:22Z", "path": "ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/parser/AstBuilder.java", "diffHunk": "@@ -0,0 +1,194 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.ppl.parser;\n+\n+import com.amazon.opendistroforelasticsearch.sql.ppl.antlr.parser.OpenDistroPPLParserBaseVisitor;\n+import com.amazon.opendistroforelasticsearch.sql.ppl.plans.expression.Expression;\n+import com.amazon.opendistroforelasticsearch.sql.ppl.plans.expression.Map;\n+import com.amazon.opendistroforelasticsearch.sql.ppl.plans.logical.Aggregation;\n+import com.amazon.opendistroforelasticsearch.sql.ppl.plans.logical.Filter;\n+import com.amazon.opendistroforelasticsearch.sql.ppl.plans.logical.LogicalPlan;\n+import com.amazon.opendistroforelasticsearch.sql.ppl.plans.logical.Project;\n+import com.amazon.opendistroforelasticsearch.sql.ppl.plans.logical.Relation;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import lombok.RequiredArgsConstructor;\n+import org.antlr.v4.runtime.tree.ParseTree;\n+\n+import static com.amazon.opendistroforelasticsearch.sql.ppl.antlr.parser.OpenDistroPPLParser.DedupCommandContext;\n+import static com.amazon.opendistroforelasticsearch.sql.ppl.antlr.parser.OpenDistroPPLParser.EvalCommandContext;\n+import static com.amazon.opendistroforelasticsearch.sql.ppl.antlr.parser.OpenDistroPPLParser.FieldsCommandContext;\n+import static com.amazon.opendistroforelasticsearch.sql.ppl.antlr.parser.OpenDistroPPLParser.FromClauseContext;\n+import static com.amazon.opendistroforelasticsearch.sql.ppl.antlr.parser.OpenDistroPPLParser.PplStatementContext;\n+import static com.amazon.opendistroforelasticsearch.sql.ppl.antlr.parser.OpenDistroPPLParser.RenameCommandContext;\n+import static com.amazon.opendistroforelasticsearch.sql.ppl.antlr.parser.OpenDistroPPLParser.SearchFilterFromContext;\n+import static com.amazon.opendistroforelasticsearch.sql.ppl.antlr.parser.OpenDistroPPLParser.SearchFromContext;\n+import static com.amazon.opendistroforelasticsearch.sql.ppl.antlr.parser.OpenDistroPPLParser.SearchFromFilterContext;\n+import static com.amazon.opendistroforelasticsearch.sql.ppl.antlr.parser.OpenDistroPPLParser.SortCommandContext;\n+import static com.amazon.opendistroforelasticsearch.sql.ppl.antlr.parser.OpenDistroPPLParser.StatsCommandContext;\n+import static com.amazon.opendistroforelasticsearch.sql.ppl.antlr.parser.OpenDistroPPLParser.WhereCommandContext;\n+\n+/**\n+ * Class of walking the AST\n+ * Refines the visit path and build the LogicalPlan and Expression nodes interface\n+ */\n+@RequiredArgsConstructor\n+public class AstBuilder extends OpenDistroPPLParserBaseVisitor<LogicalPlan> {\n+    private final AstExpressionBuilder expressionBuilder;\n+\n+    @Override\n+    public LogicalPlan visitPplStatement(PplStatementContext ctx) {\n+        LogicalPlan search = visit(ctx.searchCommand());\n+        LogicalPlan reduce = ctx.commands().stream().map(this::visit).reduce(search, (r, e) -> e.withInput(r));\n+        return reduce;\n+    }\n+\n+    /** Search command */\n+    @Override\n+    public LogicalPlan visitSearchFrom(SearchFromContext ctx) {\n+        return visitFromClause(ctx.fromClause());\n+    }\n+\n+    @Override\n+    public LogicalPlan visitSearchFromFilter(SearchFromFilterContext ctx) {\n+        return new Filter(visitExpression(ctx.logicalExpression())).withInput(visit(ctx.fromClause()));\n+    }\n+\n+    @Override\n+    public LogicalPlan visitSearchFilterFrom(SearchFilterFromContext ctx) {\n+        return new Filter(visitExpression(ctx.logicalExpression())).withInput(visit(ctx.fromClause()));\n+    }", "originalCommit": "c251f030006ab69ee24a1aa8c7b1d905d2701703", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU2MDQxMg==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/429#discussion_r411560412", "bodyText": "It was only the matter of the order in grammar file", "author": "chloe-zh", "createdAt": "2020-04-20T17:30:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ3MTE2MA=="}], "type": "inlineReview", "revised_code": {"commit": "412f6f05349a36433d8f9697b21591295de0a3ac", "changed_code": [{"header": "diff --git a/ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/parser/AstBuilder.java b/ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/parser/AstBuilder.java\nindex 861a354c..2ab13a05 100644\n--- a/ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/parser/AstBuilder.java\n+++ b/ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/parser/AstBuilder.java\n", "chunk": "@@ -44,45 +45,45 @@ import static com.amazon.opendistroforelasticsearch.sql.ppl.antlr.parser.OpenDis\n import static com.amazon.opendistroforelasticsearch.sql.ppl.antlr.parser.OpenDistroPPLParser.WhereCommandContext;\n \n /**\n- * Class of walking the AST\n- * Refines the visit path and build the LogicalPlan and Expression nodes interface\n+ * Class of building the AST\n+ * Refines the visit path and build the AST nodes\n  */\n @RequiredArgsConstructor\n-public class AstBuilder extends OpenDistroPPLParserBaseVisitor<LogicalPlan> {\n+public class AstBuilder extends OpenDistroPPLParserBaseVisitor<UnresolvedPlan> {\n     private final AstExpressionBuilder expressionBuilder;\n \n     @Override\n-    public LogicalPlan visitPplStatement(PplStatementContext ctx) {\n-        LogicalPlan search = visit(ctx.searchCommand());\n-        LogicalPlan reduce = ctx.commands().stream().map(this::visit).reduce(search, (r, e) -> e.withInput(r));\n+    public UnresolvedPlan visitPplStatement(PplStatementContext ctx) {\n+        UnresolvedPlan search = visit(ctx.searchCommand());\n+        UnresolvedPlan reduce = ctx.commands().stream().map(this::visit).reduce(search, (r, e) -> e.withInput(r));\n         return reduce;\n     }\n \n     /** Search command */\n     @Override\n-    public LogicalPlan visitSearchFrom(SearchFromContext ctx) {\n+    public UnresolvedPlan visitSearchFrom(SearchFromContext ctx) {\n         return visitFromClause(ctx.fromClause());\n     }\n \n     @Override\n-    public LogicalPlan visitSearchFromFilter(SearchFromFilterContext ctx) {\n+    public UnresolvedPlan visitSearchFromFilter(SearchFromFilterContext ctx) {\n         return new Filter(visitExpression(ctx.logicalExpression())).withInput(visit(ctx.fromClause()));\n     }\n \n     @Override\n-    public LogicalPlan visitSearchFilterFrom(SearchFilterFromContext ctx) {\n+    public UnresolvedPlan visitSearchFilterFrom(SearchFilterFromContext ctx) {\n         return new Filter(visitExpression(ctx.logicalExpression())).withInput(visit(ctx.fromClause()));\n     }\n \n     /** Where command */\n     @Override\n-    public LogicalPlan visitWhereCommand(WhereCommandContext ctx) {\n+    public UnresolvedPlan visitWhereCommand(WhereCommandContext ctx) {\n         return new Filter(visitExpression(ctx.logicalExpression()));\n     }\n \n     /** Fields command */\n     @Override\n-    public LogicalPlan visitFieldsCommand(FieldsCommandContext ctx) {\n+    public UnresolvedPlan visitFieldsCommand(FieldsCommandContext ctx) {\n         return new Project(\n                 ctx.wcFieldList()\n                         .wcFieldExpression()\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ3ODM4Mg==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/429#discussion_r411478382", "body": "I think funcName is just Name instead of Expression.", "bodyText": "I think funcName is just Name instead of Expression.", "bodyHTML": "<p dir=\"auto\">I think funcName is just Name instead of Expression.</p>", "author": "penghuo", "createdAt": "2020-04-20T15:36:18Z", "path": "ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/plans/expression/Function.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.ppl.plans.expression;\n+\n+import com.amazon.opendistroforelasticsearch.sql.ppl.node.AbstractNodeVisitor;\n+import com.amazon.opendistroforelasticsearch.sql.ppl.node.NodeVisitor;\n+import java.util.Arrays;\n+import java.util.List;\n+import lombok.EqualsAndHashCode;\n+import lombok.Getter;\n+import lombok.RequiredArgsConstructor;\n+import lombok.ToString;\n+\n+/**\n+ * Expression node of scalar function\n+ * Params include function name (@funcName) and function arguments (@funcArgs)\n+ */\n+@Getter\n+@ToString\n+@EqualsAndHashCode\n+@RequiredArgsConstructor\n+public class Function extends Expression {\n+    private final Expression funcName;", "originalCommit": "c251f030006ab69ee24a1aa8c7b1d905d2701703", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU1ODQ1Nw==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/429#discussion_r411558457", "bodyText": "Ok yes that sounds better", "author": "chloe-zh", "createdAt": "2020-04-20T17:27:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ3ODM4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "412f6f05349a36433d8f9697b21591295de0a3ac", "changed_code": [{"header": "diff --git a/ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/plans/expression/Function.java b/ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/plans/expression/Function.java\nindex b2abb2d5..e8a7a711 100644\n--- a/ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/plans/expression/Function.java\n+++ b/ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/plans/expression/Function.java\n", "chunk": "@@ -33,12 +33,12 @@ import lombok.ToString;\n @EqualsAndHashCode\n @RequiredArgsConstructor\n public class Function extends Expression {\n-    private final Expression funcName;\n+    private final String funcName;\n     private final List<Expression> funcArgs;\n \n     @Override\n     public List<Expression> getChild() {\n-        return Arrays.asList(funcName);\n+        return ImmutableList.of();\n     }\n \n     @Override\n", "next_change": {"commit": "a898546c411297b33e149ce4249ae7376a1db5ac", "changed_code": [{"header": "diff --git a/ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/plans/expression/Function.java b/ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/plans/expression/Function.java\nindex e8a7a711..c6d8649f 100644\n--- a/ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/plans/expression/Function.java\n+++ b/ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/plans/expression/Function.java\n", "chunk": "@@ -42,11 +41,7 @@ public class Function extends Expression {\n     }\n \n     @Override\n-    public <R> R accept(NodeVisitor<R> nodeVisitor) {\n-        if (nodeVisitor instanceof AbstractNodeVisitor) {\n-            return ((AbstractNodeVisitor<R>) nodeVisitor).visitFunction(this);\n-        } else {\n-            return nodeVisitor.visitChildren(this);\n-        }\n+    public <R, C> R accept(AbstractNodeVisitor<R, C> nodeVisitor, C context) {\n+        return nodeVisitor.visitFunction(this, context);\n     }\n }\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ4MDc5MQ==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/429#discussion_r411480791", "body": "could u add test case for qualified index name, \"log.2020.04.20.\"", "bodyText": "could u add test case for qualified index name, \"log.2020.04.20.\"", "bodyHTML": "<p dir=\"auto\">could u add test case for qualified index name, \"log.2020.04.20.\"</p>", "author": "penghuo", "createdAt": "2020-04-20T15:39:22Z", "path": "ppl/src/test/java/com/amazon/opendistroforelasticsearch/sql/ppl/parser/AstBuilderTest.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.ppl.parser;\n+\n+import com.amazon.opendistroforelasticsearch.sql.ppl.antlr.PPLSyntaxParser;\n+import com.amazon.opendistroforelasticsearch.sql.ppl.node.Node;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import org.junit.Test;\n+import static com.amazon.opendistroforelasticsearch.sql.ppl.plans.dsl.DSL.agg;\n+import static com.amazon.opendistroforelasticsearch.sql.ppl.plans.dsl.DSL.aggregate;\n+import static com.amazon.opendistroforelasticsearch.sql.ppl.plans.dsl.DSL.equalTo;\n+import static com.amazon.opendistroforelasticsearch.sql.ppl.plans.dsl.DSL.filter;\n+import static com.amazon.opendistroforelasticsearch.sql.ppl.plans.dsl.DSL.function;\n+import static com.amazon.opendistroforelasticsearch.sql.ppl.plans.dsl.DSL.intLiteral;\n+import static com.amazon.opendistroforelasticsearch.sql.ppl.plans.dsl.DSL.map;\n+import static com.amazon.opendistroforelasticsearch.sql.ppl.plans.dsl.DSL.project;\n+import static com.amazon.opendistroforelasticsearch.sql.ppl.plans.dsl.DSL.relation;\n+import static com.amazon.opendistroforelasticsearch.sql.ppl.plans.dsl.DSL.stringLiteral;\n+import static com.amazon.opendistroforelasticsearch.sql.ppl.plans.dsl.DSL.unresolvedAttr;\n+import static org.junit.Assert.assertEquals;\n+\n+public class AstBuilderTest {", "originalCommit": "c251f030006ab69ee24a1aa8c7b1d905d2701703", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU1ODEwMg==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/429#discussion_r411558102", "bodyText": "Ok sure, one question: shall we unquote the (single/double/backticks) quoted identifiers in this module?", "author": "chloe-zh", "createdAt": "2020-04-20T17:26:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ4MDc5MQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "412f6f05349a36433d8f9697b21591295de0a3ac", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/412f6f05349a36433d8f9697b21591295de0a3ac", "message": "changed LogicalPlan to UnresolvedPlan; added test for index name with dots; changed the funcName to String in Function expression", "committedDate": "2020-04-20T18:03:35Z", "type": "commit"}, {"oid": "5430902214ce490e7f4b21371ed9dd5ca903af05", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/5430902214ce490e7f4b21371ed9dd5ca903af05", "message": "Merge branch 'feature/ppl' of github.com:opendistro-for-elasticsearch/sql into ppl-parser", "committedDate": "2020-04-20T20:01:15Z", "type": "commit"}, {"oid": "bd56129da5bede67cdaca9ee743c57e4304481bb", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/bd56129da5bede67cdaca9ee743c57e4304481bb", "message": "Reverted nest", "committedDate": "2020-04-21T19:33:53Z", "type": "commit"}, {"oid": "9489e4166b66a0ce8f3682bc195b314477a5d8a5", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/9489e4166b66a0ce8f3682bc195b314477a5d8a5", "message": "Removed constant and replaced it with literalValue in antlr parser", "committedDate": "2020-04-21T19:45:13Z", "type": "commit"}, {"oid": "a898546c411297b33e149ce4249ae7376a1db5ac", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/a898546c411297b33e149ce4249ae7376a1db5ac", "message": "Simplified the accept methods", "committedDate": "2020-04-22T06:22:37Z", "type": "commit"}, {"oid": "daf4767ec7586c8892dd54580f3658058ff268ed", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/daf4767ec7586c8892dd54580f3658058ff268ed", "message": "Update", "committedDate": "2020-04-22T19:14:05Z", "type": "commit"}, {"oid": "acb157508ae78ee1fa08975d7bbbbfc36aa45576", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/acb157508ae78ee1fa08975d7bbbbfc36aa45576", "message": "Added builder pattern", "committedDate": "2020-04-23T08:44:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzkyOTMwNg==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/429#discussion_r413929306", "body": "lombok has Buiilder annotation, could you use it?", "bodyText": "lombok has Buiilder annotation, could you use it?", "bodyHTML": "<p dir=\"auto\">lombok has Buiilder annotation, could you use it?</p>", "author": "penghuo", "createdAt": "2020-04-23T16:09:23Z", "path": "ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/plans/logical/Aggregation.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.ppl.plans.logical;\n+\n+import com.amazon.opendistroforelasticsearch.sql.ppl.node.AbstractNodeVisitor;\n+import com.amazon.opendistroforelasticsearch.sql.ppl.plans.expression.Expression;\n+import com.amazon.opendistroforelasticsearch.sql.ppl.plans.logical.builder.UnresolvedPlanBuilder;\n+import com.google.common.collect.ImmutableList;\n+import java.util.List;\n+import lombok.AllArgsConstructor;\n+import lombok.EqualsAndHashCode;\n+import lombok.Getter;\n+import lombok.Setter;\n+import lombok.ToString;\n+\n+/**\n+ * Logical plan node of Aggregation, the interface for building aggregation actions in queries\n+ */\n+@Getter\n+@Setter\n+@ToString\n+@EqualsAndHashCode(callSuper = false)\n+@AllArgsConstructor\n+public class Aggregation extends UnresolvedPlan {", "originalCommit": "acb157508ae78ee1fa08975d7bbbbfc36aa45576", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "2cc689bbf0177d0cea7e6a90a9b45302e5edfdd5", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/2cc689bbf0177d0cea7e6a90a9b45302e5edfdd5", "message": "Rolled back to remove builder", "committedDate": "2020-04-23T18:06:10Z", "type": "commit"}, {"oid": "42609bcc4ac80ae121a22115702e5622a823fe0a", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/42609bcc4ac80ae121a22115702e5622a823fe0a", "message": "update", "committedDate": "2020-04-23T19:31:49Z", "type": "commit"}, {"oid": "092adbfbb4b647dffddacca21efa39d8ec601c33", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/092adbfbb4b647dffddacca21efa39d8ec601c33", "message": "Revert \"Added builder pattern\"\n\nThis reverts commit acb15750", "committedDate": "2020-04-23T19:33:08Z", "type": "commit"}, {"oid": "e8c2eff609a8f831ccc215bccd6271aecd059cd8", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/e8c2eff609a8f831ccc215bccd6271aecd059cd8", "message": "update", "committedDate": "2020-04-23T19:58:36Z", "type": "commit"}, {"oid": "0c78efa4c6617f6f94bb62ee3f98152989b33f41", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/0c78efa4c6617f6f94bb62ee3f98152989b33f41", "message": "Merge remote-tracking branch 'upstream/feature/ppl' into ppl-parser", "committedDate": "2020-04-23T20:33:48Z", "type": "commit"}]}