{"pr_number": 4838, "pr_title": "Issue #4835 - Addressing flush/commit with GzipHttpOutputInterceptor", "pr_author": "joakime", "pr_createdAt": "2020-05-01T19:44:07Z", "pr_url": "https://github.com/eclipse/jetty.project/pull/4838", "timeline": [{"oid": "c645d0f7c4abf31a8ca1e56f7982de33efef8e88", "url": "https://github.com/eclipse/jetty.project/commit/c645d0f7c4abf31a8ca1e56f7982de33efef8e88", "message": "Issue #4835 - Addressing flush/commit with GzipHttpOutputInterceptor\n\nSigned-off-by: Joakim Erdfelt <joakim.erdfelt@gmail.com>", "committedDate": "2020-05-01T19:42:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTA2NjUzOQ==", "url": "https://github.com/eclipse/jetty.project/pull/4838#discussion_r419066539", "body": "Don't use `static` for these fields.", "bodyText": "Don't use static for these fields.", "bodyHTML": "<p dir=\"auto\">Don't use <code>static</code> for these fields.</p>", "author": "sbordet", "createdAt": "2020-05-03T08:11:40Z", "path": "jetty-servlet/src/test/java/org/eclipse/jetty/servlet/GzipHandlerCommitTest.java", "diffHunk": "@@ -0,0 +1,157 @@\n+//\n+//  ========================================================================\n+//  Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//  ------------------------------------------------------------------------\n+//  All rights reserved. This program and the accompanying materials\n+//  are made available under the terms of the Eclipse Public License v1.0\n+//  and Apache License v2.0 which accompanies this distribution.\n+//\n+//      The Eclipse Public License is available at\n+//      http://www.eclipse.org/legal/epl-v10.html\n+//\n+//      The Apache License v2.0 is available at\n+//      http://www.opensource.org/licenses/apache2.0.php\n+//\n+//  You may elect to redistribute this code under either of these licenses.\n+//  ========================================================================\n+//\n+\n+package org.eclipse.jetty.servlet;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.util.Arrays;\n+import java.util.concurrent.atomic.AtomicLong;\n+import javax.servlet.ServletException;\n+import javax.servlet.ServletOutputStream;\n+import javax.servlet.http.HttpServlet;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.http.HttpHeader;\n+import org.eclipse.jetty.server.Server;\n+import org.eclipse.jetty.server.ServerConnector;\n+import org.eclipse.jetty.server.handler.gzip.GzipHandler;\n+import org.eclipse.jetty.util.component.LifeCycle;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.lessThan;\n+\n+public class GzipHandlerCommitTest\n+{\n+    private static Server server;\n+    private static HttpClient client;", "originalCommit": "c645d0f7c4abf31a8ca1e56f7982de33efef8e88", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTA2NzU2MQ==", "url": "https://github.com/eclipse/jetty.project/pull/4838#discussion_r419067561", "body": "These tests could be rewritten easily so that each test passes its own `Servlet` implementation to the `Server` startup.\r\nThen, it would be easy to use a latch to coordinate with the client, so that the test does not need to wait 2000 ms but it will be immediate.\r\n\r\nPseudo code:\r\n\r\n```java\r\n@Test\r\npublic void test() {\r\n  CountDownLatch latch = new CountDownLatch(1);\r\n  start(new HttpServlet() {\r\n    service(request, response) {\r\n      response.flushBuffer();\r\n      latch.await();\r\n    }\r\n  });\r\n\r\n  client.newRequest(...)\r\n    .onResponseHeaders(response -> latch.countDown())\r\n    ...\r\n    .send();\r\n}\r\n```", "bodyText": "These tests could be rewritten easily so that each test passes its own Servlet implementation to the Server startup.\nThen, it would be easy to use a latch to coordinate with the client, so that the test does not need to wait 2000 ms but it will be immediate.\nPseudo code:\n@Test\npublic void test() {\n  CountDownLatch latch = new CountDownLatch(1);\n  start(new HttpServlet() {\n    service(request, response) {\n      response.flushBuffer();\n      latch.await();\n    }\n  });\n\n  client.newRequest(...)\n    .onResponseHeaders(response -> latch.countDown())\n    ...\n    .send();\n}", "bodyHTML": "<p dir=\"auto\">These tests could be rewritten easily so that each test passes its own <code>Servlet</code> implementation to the <code>Server</code> startup.<br>\nThen, it would be easy to use a latch to coordinate with the client, so that the test does not need to wait 2000 ms but it will be immediate.</p>\n<p dir=\"auto\">Pseudo code:</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"@Test\npublic void test() {\n  CountDownLatch latch = new CountDownLatch(1);\n  start(new HttpServlet() {\n    service(request, response) {\n      response.flushBuffer();\n      latch.await();\n    }\n  });\n\n  client.newRequest(...)\n    .onResponseHeaders(response -&gt; latch.countDown())\n    ...\n    .send();\n}\"><pre><span class=\"pl-k\">@Test</span>\n<span class=\"pl-k\">public</span> <span class=\"pl-k\">void</span> test() {\n  <span class=\"pl-smi\">CountDownLatch</span> latch <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">CountDownLatch</span>(<span class=\"pl-c1\">1</span>);\n  start(<span class=\"pl-k\">new</span> <span class=\"pl-smi\">HttpServlet</span>() {\n    <span class=\"pl-en\">service</span>(<span class=\"pl-v\">request</span>, <span class=\"pl-v\">response</span>) {\n      response<span class=\"pl-k\">.</span>flushBuffer();\n      latch<span class=\"pl-k\">.</span>await();\n    }\n  });\n\n  client<span class=\"pl-k\">.</span>newRequest(<span class=\"pl-c1\">...</span>)\n    .onResponseHeaders(response <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> latch<span class=\"pl-k\">.</span>countDown())\n    <span class=\"pl-c1\">...</span>\n    .send();\n}</pre></div>", "author": "sbordet", "createdAt": "2020-05-03T08:20:14Z", "path": "jetty-servlet/src/test/java/org/eclipse/jetty/servlet/GzipHandlerCommitTest.java", "diffHunk": "@@ -0,0 +1,157 @@\n+//\n+//  ========================================================================\n+//  Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//  ------------------------------------------------------------------------\n+//  All rights reserved. This program and the accompanying materials\n+//  are made available under the terms of the Eclipse Public License v1.0\n+//  and Apache License v2.0 which accompanies this distribution.\n+//\n+//      The Eclipse Public License is available at\n+//      http://www.eclipse.org/legal/epl-v10.html\n+//\n+//      The Apache License v2.0 is available at\n+//      http://www.opensource.org/licenses/apache2.0.php\n+//\n+//  You may elect to redistribute this code under either of these licenses.\n+//  ========================================================================\n+//\n+\n+package org.eclipse.jetty.servlet;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.util.Arrays;\n+import java.util.concurrent.atomic.AtomicLong;\n+import javax.servlet.ServletException;\n+import javax.servlet.ServletOutputStream;\n+import javax.servlet.http.HttpServlet;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.http.HttpHeader;\n+import org.eclipse.jetty.server.Server;\n+import org.eclipse.jetty.server.ServerConnector;\n+import org.eclipse.jetty.server.handler.gzip.GzipHandler;\n+import org.eclipse.jetty.util.component.LifeCycle;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.lessThan;\n+\n+public class GzipHandlerCommitTest\n+{\n+    private static Server server;\n+    private static HttpClient client;\n+\n+    @BeforeEach\n+    public void startUp() throws Exception\n+    {\n+        server = new Server();\n+        ServerConnector connector = new ServerConnector(server);\n+        connector.setPort(0);\n+        server.addConnector(connector);\n+\n+        ServletContextHandler contextHandler = new ServletContextHandler();\n+        contextHandler.setContextPath(\"/\");\n+        contextHandler.addServlet(FlushBufferServlet.class, \"/flush-buffer/*\");\n+\n+        GzipHandler gzipHandler = new GzipHandler();\n+        gzipHandler.setHandler(contextHandler);\n+\n+        server.setHandler(gzipHandler);\n+        server.start();\n+\n+        client = new HttpClient();\n+        client.start();\n+    }\n+\n+    @AfterEach\n+    public void tearDown()\n+    {\n+        LifeCycle.stop(client);\n+        LifeCycle.stop(server);\n+    }\n+\n+    /**\n+     * A servlet should be able to flush and then produce no content.\n+     */\n+    @Test\n+    public void testFlushNoContent() throws Exception\n+    {\n+        long delay = 2000;", "originalCommit": "c645d0f7c4abf31a8ca1e56f7982de33efef8e88", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ1NDY2NA==", "url": "https://github.com/eclipse/jetty.project/pull/4838#discussion_r419454664", "bodyText": "This is an invalid test unfortunately.\nIf we just use latch.await() then we'd have to rely on client.setIdleTimeout().\nIf we do that, the client finishes and errors out with TimeoutException, and the servlet is now hung and the server.stop() doesn't clean it up in a timely fashion.\nAlso, if we switch to a latch.await(timeout), the flush will occur when the servlet is done with its dispatch, which is a false positive.\nWe want to hold the dispatch and test the timing.\nAs the bug is that the flush doesn't immediately flush when requested.\nThe bug isn't the flush never occurs. (which your proposed test is good for)", "author": "joakime", "createdAt": "2020-05-04T13:55:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTA2NzU2MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTA3MzczMw==", "url": "https://github.com/eclipse/jetty.project/pull/4838#discussion_r419073733", "body": "Let's be very explicit that we are just writing the headers:\r\n\r\n```suggestion\r\n            if (BufferUtil.isEmpty(content))\r\n            {\r\n                // We are committing, but have no content to compress, so flush empty buffer to write headers.\r\n                _interceptor.write(BufferUtil.EMPTY_BUFFER, complete, callback);\r\n            }\r\n```\r\n\r\nI've also used BufferUtil to protect against a null content... probably would not happen, but there is only one other place in this method that assumes a non null content, so may as well protect.  So also change the `content.remaining` on 208 to `BufferUtil.remaining(content)` ", "bodyText": "Let's be very explicit that we are just writing the headers:\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (content.remaining() == 0)\n          \n          \n            \n                        {\n          \n          \n            \n                            // We are committing, and we have no content to compress.\n          \n          \n            \n                            _interceptor.write(content, complete, callback);\n          \n          \n            \n                        }\n          \n          \n            \n                        if (BufferUtil.isEmpty(content))\n          \n          \n            \n                        {\n          \n          \n            \n                            // We are committing, but have no content to compress, so flush empty buffer to write headers.\n          \n          \n            \n                            _interceptor.write(BufferUtil.EMPTY_BUFFER, complete, callback);\n          \n          \n            \n                        }\n          \n      \n    \n    \n  \n\nI've also used BufferUtil to protect against a null content... probably would not happen, but there is only one other place in this method that assumes a non null content, so may as well protect.  So also change the content.remaining on 208 to BufferUtil.remaining(content)", "bodyHTML": "<p dir=\"auto\">Let's be very explicit that we are just writing the headers:</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"236\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            <span class=\"pl-k\">if</span> (<span class=\"x x-first\">content</span><span class=\"pl-k x\">.</span><span class=\"x\">remaining() </span><span class=\"pl-k x\">==</span><span class=\"x\"> </span><span class=\"pl-c1 x x-last\">0</span>)</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"237\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"238\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                <span class=\"pl-c\"><span class=\"pl-c\">//</span> We are committing, <span class=\"x x-first x-last\">and we </span>have no content to compress.</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"239\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                _interceptor<span class=\"pl-k\">.</span>write(<span class=\"x x-first x-last\">content</span>, complete, callback);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"240\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"236\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            <span class=\"pl-k\">if</span> (<span class=\"pl-smi x x-first\">BufferUtil</span><span class=\"pl-k x\">.</span><span class=\"x x-last\">isEmpty(content)</span>)</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"237\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"238\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                <span class=\"pl-c\"><span class=\"pl-c\">//</span> We are committing, <span class=\"x x-first x-last\">but </span>have no content to compress<span class=\"x x-first x-last\">, so flush empty buffer to write headers</span>.</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"239\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                _interceptor<span class=\"pl-k\">.</span>write(<span class=\"pl-smi x x-first\">BufferUtil</span><span class=\"pl-c1\"><span class=\"pl-k x\">.</span><span class=\"x x-last\">EMPTY_BUFFER</span></span>, complete, callback);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"240\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            }</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\">I've also used BufferUtil to protect against a null content... probably would not happen, but there is only one other place in this method that assumes a non null content, so may as well protect.  So also change the <code>content.remaining</code> on 208 to <code>BufferUtil.remaining(content)</code></p>", "author": "gregw", "createdAt": "2020-05-03T09:14:23Z", "path": "jetty-server/src/main/java/org/eclipse/jetty/server/handler/gzip/GzipHttpOutputInterceptor.java", "diffHunk": "@@ -229,7 +229,15 @@ protected void commit(ByteBuffer content, boolean complete, Callback callback)\n             LOG.debug(\"{} compressing {}\", this, _deflater);\n             _state.set(GZState.COMPRESSING);\n \n-            gzip(content, complete, callback);\n+            if (content.remaining() == 0)\n+            {\n+                // We are committing, and we have no content to compress.\n+                _interceptor.write(content, complete, callback);\n+            }", "originalCommit": "c645d0f7c4abf31a8ca1e56f7982de33efef8e88", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "d58da0f7d2e30c732f52a38feaba2974e299bf70", "url": "https://github.com/eclipse/jetty.project/commit/d58da0f7d2e30c732f52a38feaba2974e299bf70", "message": "Issue #4824 - Addressing flush/commit with GzipHttpOutputInterceptor\n\nSigned-off-by: Joakim Erdfelt <joakim.erdfelt@gmail.com>", "committedDate": "2020-05-04T14:22:08Z", "type": "commit"}]}