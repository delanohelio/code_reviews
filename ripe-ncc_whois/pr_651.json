{"pr_number": 651, "pr_title": "Return remark in rdap response when abuse mailbox validation has failed.", "pr_author": "sbusk", "pr_createdAt": "2020-08-06T20:36:32Z", "pr_url": "https://github.com/RIPE-NCC/whois/pull/651", "merge_commit": "ae101b630bc4395e9867660c33c341da3e3c11e1", "timeline": [{"oid": "abaa1a8c546e7e5fdab62e98fca0e3611e8bb36f", "url": "https://github.com/RIPE-NCC/whois/commit/abaa1a8c546e7e5fdab62e98fca0e3611e8bb36f", "message": "Return remark in rdap response when abuse mailbox validation has failed.", "committedDate": "2020-08-06T20:25:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODQ5ODI4MA==", "url": "https://github.com/RIPE-NCC/whois/pull/651#discussion_r468498280", "body": "Mixing Nullable and Optional in the same method arguments? Can we choose one style for consistency?", "bodyText": "Mixing Nullable and Optional in the same method arguments? Can we choose one style for consistency?", "bodyHTML": "<p dir=\"auto\">Mixing Nullable and Optional in the same method arguments? Can we choose one style for consistency?</p>", "author": "eshryane", "createdAt": "2020-08-11T11:02:48Z", "path": "whois-api/src/main/java/net/ripe/db/whois/api/rdap/RdapObjectMapper.java", "diffHunk": "@@ -161,7 +160,11 @@ public RdapObject mapHelp(final String requestUrl) {\n         return mapCommons(new RdapObject(), requestUrl);\n     }\n \n-    private RdapObject getRdapObject(final String requestUrl, final RpslObject rpslObject, final LocalDateTime lastChangedTimestamp, @Nullable final RpslObject abuseContact) {\n+    private RdapObject getRdapObject(final String requestUrl,\n+                                     final RpslObject rpslObject,\n+                                     final LocalDateTime lastChangedTimestamp,\n+                                     @Nullable final RpslObject abuseRoleObject,", "originalCommit": "abaa1a8c546e7e5fdab62e98fca0e3611e8bb36f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQwODE5Mg==", "url": "https://github.com/RIPE-NCC/whois/pull/651#discussion_r471408192", "bodyText": "We use just the AbuseContact now.", "author": "sbusk", "createdAt": "2020-08-17T11:12:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODQ5ODI4MA=="}], "type": "inlineReview", "revised_code": {"commit": "5550905a431eac32e1e082097948d1c35b1bb580", "changed_code": [{"header": "diff --git a/whois-api/src/main/java/net/ripe/db/whois/api/rdap/RdapObjectMapper.java b/whois-api/src/main/java/net/ripe/db/whois/api/rdap/RdapObjectMapper.java\nindex 6ac71e911..31b06cce5 100644\n--- a/whois-api/src/main/java/net/ripe/db/whois/api/rdap/RdapObjectMapper.java\n+++ b/whois-api/src/main/java/net/ripe/db/whois/api/rdap/RdapObjectMapper.java\n", "chunk": "@@ -163,7 +162,6 @@ class RdapObjectMapper {\n     private RdapObject getRdapObject(final String requestUrl,\n                                      final RpslObject rpslObject,\n                                      final LocalDateTime lastChangedTimestamp,\n-                                     @Nullable final RpslObject abuseRoleObject,\n                                      final Optional<AbuseContact> optionalAbuseContact) {\n         RdapObject rdapResponse;\n         final ObjectType rpslObjectType = rpslObject.getType();\n", "next_change": null}]}, "revised_code_in_main": {"commit": "ae101b630bc4395e9867660c33c341da3e3c11e1", "changed_code": [{"header": "diff --git a/whois-api/src/main/java/net/ripe/db/whois/api/rdap/RdapObjectMapper.java b/whois-api/src/main/java/net/ripe/db/whois/api/rdap/RdapObjectMapper.java\nindex 6ac71e911..aee7588bb 100644\n--- a/whois-api/src/main/java/net/ripe/db/whois/api/rdap/RdapObjectMapper.java\n+++ b/whois-api/src/main/java/net/ripe/db/whois/api/rdap/RdapObjectMapper.java\n", "chunk": "@@ -163,7 +163,6 @@ class RdapObjectMapper {\n     private RdapObject getRdapObject(final String requestUrl,\n                                      final RpslObject rpslObject,\n                                      final LocalDateTime lastChangedTimestamp,\n-                                     @Nullable final RpslObject abuseRoleObject,\n                                      final Optional<AbuseContact> optionalAbuseContact) {\n         RdapObject rdapResponse;\n         final ObjectType rpslObjectType = rpslObject.getType();\n", "next_change": {"commit": "e87f0e27ee39d7762c31c8d4eb1036fe373170d1", "changed_code": [{"header": "diff --git a/whois-api/src/main/java/net/ripe/db/whois/api/rdap/RdapObjectMapper.java b/whois-api/src/main/java/net/ripe/db/whois/api/rdap/RdapObjectMapper.java\nindex aee7588bb..19f0b5490 100644\n--- a/whois-api/src/main/java/net/ripe/db/whois/api/rdap/RdapObjectMapper.java\n+++ b/whois-api/src/main/java/net/ripe/db/whois/api/rdap/RdapObjectMapper.java\n", "chunk": "@@ -162,7 +171,6 @@ class RdapObjectMapper {\n \n     private RdapObject getRdapObject(final String requestUrl,\n                                      final RpslObject rpslObject,\n-                                     final LocalDateTime lastChangedTimestamp,\n                                      final Optional<AbuseContact> optionalAbuseContact) {\n         RdapObject rdapResponse;\n         final ObjectType rpslObjectType = rpslObject.getType();\n", "next_change": {"commit": "4241a2308eb15969d2a9f9ae1d8a03e47fb5d8ea", "changed_code": [{"header": "diff --git a/whois-api/src/main/java/net/ripe/db/whois/api/rdap/RdapObjectMapper.java b/whois-api/src/main/java/net/ripe/db/whois/api/rdap/RdapObjectMapper.java\nindex 19f0b5490..729f04da9 100644\n--- a/whois-api/src/main/java/net/ripe/db/whois/api/rdap/RdapObjectMapper.java\n+++ b/whois-api/src/main/java/net/ripe/db/whois/api/rdap/RdapObjectMapper.java\n", "chunk": "@@ -169,6 +196,13 @@ class RdapObjectMapper {\n         return mapCommons(new RdapObject(), requestUrl);\n     }\n \n+    private List<Ip> filterTopLevelIps(String requestUrl, Stream<RpslObject> inetnumResult,\n+                                       Stream<RpslObject> inet6numResult, int maxResultSize) {\n+        return Stream.concat((Stream<RpslObject>) new TopLevelFilter(inetnumResult).getTopLevelValues().stream(),\n+                        (Stream<RpslObject>) new TopLevelFilter(inet6numResult).getTopLevelValues().stream())\n+                .limit(maxResultSize)\n+                .map(topLevelRpsl -> (Ip) getRdapObject(requestUrl, topLevelRpsl, Optional.empty())).collect(Collectors.toList());\n+    }\n     private RdapObject getRdapObject(final String requestUrl,\n                                      final RpslObject rpslObject,\n                                      final Optional<AbuseContact> optionalAbuseContact) {\n", "next_change": {"commit": "f852de26fb74ba4aeacb2ceaaf1d2f8bf5d077b9", "changed_code": [{"header": "diff --git a/whois-api/src/main/java/net/ripe/db/whois/api/rdap/RdapObjectMapper.java b/whois-api/src/main/java/net/ripe/db/whois/api/rdap/RdapObjectMapper.java\nindex 729f04da9..8656c2eac 100644\n--- a/whois-api/src/main/java/net/ripe/db/whois/api/rdap/RdapObjectMapper.java\n+++ b/whois-api/src/main/java/net/ripe/db/whois/api/rdap/RdapObjectMapper.java\n", "chunk": "@@ -193,16 +207,49 @@ class RdapObjectMapper {\n     }\n \n     public RdapObject mapHelp(final String requestUrl) {\n-        return mapCommons(new RdapObject(), requestUrl);\n+        final RdapObject rdapObject = mapCommonNoticesAndPort(new RdapObject(), requestUrl);\n+        mapCommonLinks(rdapObject, requestUrl);\n+        rdapObject.getRdapConformance().addAll(Stream.of(RdapConformance.values()).map(RdapConformance::getValue).collect(Collectors.toList()));\n+        return rdapObject;\n+    }\n+\n+    private List<Autnum> mapAutnums(\n+                final String requestUrl,\n+                final List<RpslObjectInfo> autnumResult) {\n+        return autnumResult.stream()\n+                .map(rpslObjectInfo -> getRpslObject(rpslObjectInfo))\n+                .filter(Objects::nonNull)\n+                .map(rpslObject -> (Autnum)getRdapObject(requestUrl, rpslObject, Optional.empty()))\n+                .collect(Collectors.toList());\n     }\n \n-    private List<Ip> filterTopLevelIps(String requestUrl, Stream<RpslObject> inetnumResult,\n-                                       Stream<RpslObject> inet6numResult, int maxResultSize) {\n-        return Stream.concat((Stream<RpslObject>) new TopLevelFilter(inetnumResult).getTopLevelValues().stream(),\n-                        (Stream<RpslObject>) new TopLevelFilter(inet6numResult).getTopLevelValues().stream())\n+    private List<Ip> mapNetworks(\n+                final String requestUrl,\n+                final List<RpslObjectInfo> inetnums,\n+                final List<RpslObjectInfo> inet6nums,\n+                final int maxResultSize) {\n+        return Stream.concat(inet6nums.stream(), inetnums.stream())\n                 .limit(maxResultSize)\n-                .map(topLevelRpsl -> (Ip) getRdapObject(requestUrl, topLevelRpsl, Optional.empty())).collect(Collectors.toList());\n+                .map(this::getRpslObject)\n+                .filter(Objects::nonNull)\n+                .map(rpslObject -> (Ip)getRdapObject(requestUrl, rpslObject, Optional.empty()))\n+                .toList();\n+    }\n+\n+    @Nullable\n+    private RpslObject getRpslObject(final RpslObjectInfo rpslObjectInfo) {\n+        return getRpslObject(rpslObjectInfo.getObjectId());\n+    }\n+\n+    @Nullable\n+    private RpslObject getRpslObject(final int objectId) {\n+        try {\n+            return rpslObjectDao.getById(objectId);\n+        } catch (DataAccessException e) {\n+            return null;\n+        }\n     }\n+\n     private RdapObject getRdapObject(final String requestUrl,\n                                      final RpslObject rpslObject,\n                                      final Optional<AbuseContact> optionalAbuseContact) {\n", "next_change": {"commit": "162bec846ddd30d30e7febbb3a732107cbf2cc92", "changed_code": [{"header": "diff --git a/whois-api/src/main/java/net/ripe/db/whois/api/rdap/RdapObjectMapper.java b/whois-api/src/main/java/net/ripe/db/whois/api/rdap/RdapObjectMapper.java\nindex 8656c2eac..208e46fc6 100644\n--- a/whois-api/src/main/java/net/ripe/db/whois/api/rdap/RdapObjectMapper.java\n+++ b/whois-api/src/main/java/net/ripe/db/whois/api/rdap/RdapObjectMapper.java\n", "chunk": "@@ -252,7 +252,7 @@ class RdapObjectMapper {\n \n     private RdapObject getRdapObject(final String requestUrl,\n                                      final RpslObject rpslObject,\n-                                     final Optional<AbuseContact> optionalAbuseContact) {\n+                                     @Nullable final AbuseContact abuseContact) {\n         RdapObject rdapResponse;\n         final ObjectType rpslObjectType = rpslObject.getType();\n \n", "next_change": null}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "ae101b630bc4395e9867660c33c341da3e3c11e1", "message": "Merge commit", "committedDate": null}, {"oid": "43c8c9547f7f61f8f3f9dfff935a9829d94b3013", "committedDate": "2022-08-25 15:42:00 +0200", "message": "cidr0 notation for rdap response (#1068)"}, {"oid": "e9effad1ad8a7dd4844a28fed21a332f54f8a9ef", "committedDate": "2022-09-26 13:17:14 +0200", "message": "rdap autnum include start and end autnum (#1081)"}, {"oid": "ac940bb4beb0e4dbf12cb302768bc395e12a24c7", "committedDate": "2022-10-06 10:52:45 +0200", "message": "add status field to rdap query response (#1088)"}, {"oid": "e87f0e27ee39d7762c31c8d4eb1036fe373170d1", "committedDate": "2022-11-16 14:41:22 +0100", "message": "Rdap events and notices (#1112)"}, {"oid": "4241a2308eb15969d2a9f9ae1d8a03e47fb5d8ea", "committedDate": "2022-11-22 08:39:15 +0100", "message": "Db 2337 include networks autnums rdap (#1103)"}, {"oid": "22e35c61682abf2722d31bb747178f07994346c2", "committedDate": "2022-11-23 08:50:49 +0100", "message": "feat: add trailing dot in domains ldh name (#1118)"}, {"oid": "501765e43d404ea982400b4c8550c08da26f3004", "committedDate": "2022-11-24 12:54:13 +0100", "message": "Db 4316 add remaining profiles (#1119)"}, {"oid": "afcd0567afa03e5a7224e203962b651dd7ad3e00", "committedDate": "2022-12-08 12:08:32 +0100", "message": "feat: add networks and remove self link (#1135)"}, {"oid": "f852de26fb74ba4aeacb2ceaaf1d2f8bf5d077b9", "committedDate": "2023-04-13 17:25:34 +0200", "message": "Limit resource lookups in RDAP organisation entity requests (#1220)"}, {"oid": "162bec846ddd30d30e7febbb3a732107cbf2cc92", "committedDate": "2023-04-17 13:54:42 +0200", "message": "Rdap refactoring (#1221)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODQ5ODUxMg==", "url": "https://github.com/RIPE-NCC/whois/pull/651#discussion_r468498512", "body": "Can the TODO be resolved?", "bodyText": "Can the TODO be resolved?", "bodyHTML": "<p dir=\"auto\">Can the TODO be resolved?</p>", "author": "eshryane", "createdAt": "2020-08-11T11:03:18Z", "path": "whois-api/src/main/java/net/ripe/db/whois/api/rdap/RdapObjectMapper.java", "diffHunk": "@@ -296,7 +305,12 @@ private static Remark createRemark(final RpslObject rpslObject) {\n         return new Remark(descriptions);\n     }\n \n-    private static boolean hasRemark(final RpslObject rpslObject) {\n+    private static Remark createRemark(final CIString key, final AbuseContact abuseContact) {\n+        // TODO message duplicated from QueryMessages.unvalidatedAbuseCShown", "originalCommit": "abaa1a8c546e7e5fdab62e98fca0e3611e8bb36f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjA1MzE1OA==", "url": "https://github.com/RIPE-NCC/whois/pull/651#discussion_r472053158", "bodyText": "Done.", "author": "sbusk", "createdAt": "2020-08-18T09:44:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODQ5ODUxMg=="}], "type": "inlineReview", "revised_code": {"commit": "3bd97905a836525f0008e3728e6afe6deb78e8c1", "changed_code": [{"header": "diff --git a/whois-api/src/main/java/net/ripe/db/whois/api/rdap/RdapObjectMapper.java b/whois-api/src/main/java/net/ripe/db/whois/api/rdap/RdapObjectMapper.java\nindex 6ac71e911..aee7588bb 100644\n--- a/whois-api/src/main/java/net/ripe/db/whois/api/rdap/RdapObjectMapper.java\n+++ b/whois-api/src/main/java/net/ripe/db/whois/api/rdap/RdapObjectMapper.java\n", "chunk": "@@ -306,8 +303,11 @@ class RdapObjectMapper {\n     }\n \n     private static Remark createRemark(final CIString key, final AbuseContact abuseContact) {\n-        // TODO message duplicated from QueryMessages.unvalidatedAbuseCShown\n-        return new Remark(Lists.newArrayList(String.format(\"Abuse-mailbox validation failed. Please refer to %s for further information.\", abuseContact.getOrgId())));\n+        return new Remark(\n+           Lists.newArrayList(\n+               QueryMessages.unvalidatedAbuseCShown(key, abuseContact.getAbuseMailbox(), abuseContact.getOrgId()).toString().replaceAll(\"% \", \"\")\n+           )\n+        );\n     }\n \n     private static boolean hasDescriptions(final RpslObject rpslObject) {\n", "next_change": null}]}, "revised_code_in_main": {"commit": "ae101b630bc4395e9867660c33c341da3e3c11e1", "changed_code": [{"header": "diff --git a/whois-api/src/main/java/net/ripe/db/whois/api/rdap/RdapObjectMapper.java b/whois-api/src/main/java/net/ripe/db/whois/api/rdap/RdapObjectMapper.java\nindex 6ac71e911..aee7588bb 100644\n--- a/whois-api/src/main/java/net/ripe/db/whois/api/rdap/RdapObjectMapper.java\n+++ b/whois-api/src/main/java/net/ripe/db/whois/api/rdap/RdapObjectMapper.java\n", "chunk": "@@ -306,8 +303,11 @@ class RdapObjectMapper {\n     }\n \n     private static Remark createRemark(final CIString key, final AbuseContact abuseContact) {\n-        // TODO message duplicated from QueryMessages.unvalidatedAbuseCShown\n-        return new Remark(Lists.newArrayList(String.format(\"Abuse-mailbox validation failed. Please refer to %s for further information.\", abuseContact.getOrgId())));\n+        return new Remark(\n+           Lists.newArrayList(\n+               QueryMessages.unvalidatedAbuseCShown(key, abuseContact.getAbuseMailbox(), abuseContact.getOrgId()).toString().replaceAll(\"% \", \"\")\n+           )\n+        );\n     }\n \n     private static boolean hasDescriptions(final RpslObject rpslObject) {\n", "next_change": {"commit": "e87f0e27ee39d7762c31c8d4eb1036fe373170d1", "changed_code": [{"header": "diff --git a/whois-api/src/main/java/net/ripe/db/whois/api/rdap/RdapObjectMapper.java b/whois-api/src/main/java/net/ripe/db/whois/api/rdap/RdapObjectMapper.java\nindex aee7588bb..19f0b5490 100644\n--- a/whois-api/src/main/java/net/ripe/db/whois/api/rdap/RdapObjectMapper.java\n+++ b/whois-api/src/main/java/net/ripe/db/whois/api/rdap/RdapObjectMapper.java\n", "chunk": "@@ -314,9 +371,9 @@ class RdapObjectMapper {\n         return !rpslObject.getValuesForAttribute(AttributeType.DESCR).isEmpty();\n     }\n \n-    private static Event createEvent(final LocalDateTime lastChanged) {\n+    private static Event createEvent(final LocalDateTime lastChanged, final Action action) {\n         final Event lastChangedEvent = new Event();\n-        lastChangedEvent.setEventAction(Action.LAST_CHANGED);\n+        lastChangedEvent.setEventAction(action);\n         lastChangedEvent.setEventDate(lastChanged);\n         return lastChangedEvent;\n     }\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "ae101b630bc4395e9867660c33c341da3e3c11e1", "message": "Merge commit", "committedDate": null}, {"oid": "43c8c9547f7f61f8f3f9dfff935a9829d94b3013", "committedDate": "2022-08-25 15:42:00 +0200", "message": "cidr0 notation for rdap response (#1068)"}, {"oid": "e9effad1ad8a7dd4844a28fed21a332f54f8a9ef", "committedDate": "2022-09-26 13:17:14 +0200", "message": "rdap autnum include start and end autnum (#1081)"}, {"oid": "ac940bb4beb0e4dbf12cb302768bc395e12a24c7", "committedDate": "2022-10-06 10:52:45 +0200", "message": "add status field to rdap query response (#1088)"}, {"oid": "e87f0e27ee39d7762c31c8d4eb1036fe373170d1", "committedDate": "2022-11-16 14:41:22 +0100", "message": "Rdap events and notices (#1112)"}, {"oid": "4241a2308eb15969d2a9f9ae1d8a03e47fb5d8ea", "committedDate": "2022-11-22 08:39:15 +0100", "message": "Db 2337 include networks autnums rdap (#1103)"}, {"oid": "22e35c61682abf2722d31bb747178f07994346c2", "committedDate": "2022-11-23 08:50:49 +0100", "message": "feat: add trailing dot in domains ldh name (#1118)"}, {"oid": "501765e43d404ea982400b4c8550c08da26f3004", "committedDate": "2022-11-24 12:54:13 +0100", "message": "Db 4316 add remaining profiles (#1119)"}, {"oid": "afcd0567afa03e5a7224e203962b651dd7ad3e00", "committedDate": "2022-12-08 12:08:32 +0100", "message": "feat: add networks and remove self link (#1135)"}, {"oid": "f852de26fb74ba4aeacb2ceaaf1d2f8bf5d077b9", "committedDate": "2023-04-13 17:25:34 +0200", "message": "Limit resource lookups in RDAP organisation entity requests (#1220)"}, {"oid": "162bec846ddd30d30e7febbb3a732107cbf2cc92", "committedDate": "2023-04-17 13:54:42 +0200", "message": "Rdap refactoring (#1221)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODQ5OTE5MA==", "url": "https://github.com/RIPE-NCC/whois/pull/651#discussion_r468499190", "body": "Do we need two separate calls to the abuseCFinder? can you read the abuse-mailbox from the RpslObject from the  getAbuseContactRole() ?", "bodyText": "Do we need two separate calls to the abuseCFinder? can you read the abuse-mailbox from the RpslObject from the  getAbuseContactRole() ?", "bodyHTML": "<p dir=\"auto\">Do we need two separate calls to the abuseCFinder? can you read the abuse-mailbox from the RpslObject from the  getAbuseContactRole() ?</p>", "author": "eshryane", "createdAt": "2020-08-11T11:04:48Z", "path": "whois-api/src/main/java/net/ripe/db/whois/api/rdap/WhoisRdapService.java", "diffHunk": "@@ -276,7 +276,8 @@ private Response getResponse(HttpServletRequest request, List<RpslObject> result\n                         getRequestUrl(request),\n                         resultObject,\n                         objectDao.getLastUpdated(resultObject.getObjectId()),\n-                        abuseCFinder.getAbuseContactRole(resultObject)))\n+                        abuseCFinder.getAbuseContactRole(resultObject),", "originalCommit": "abaa1a8c546e7e5fdab62e98fca0e3611e8bb36f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQwODA0Nw==", "url": "https://github.com/RIPE-NCC/whois/pull/651#discussion_r471408047", "bodyText": "I've added the abuse role object to the AbuseContact so we don't need multiple lookups and we have all the information we need in one place.", "author": "sbusk", "createdAt": "2020-08-17T11:12:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODQ5OTE5MA=="}], "type": "inlineReview", "revised_code": {"commit": "5550905a431eac32e1e082097948d1c35b1bb580", "changed_code": [{"header": "diff --git a/whois-api/src/main/java/net/ripe/db/whois/api/rdap/WhoisRdapService.java b/whois-api/src/main/java/net/ripe/db/whois/api/rdap/WhoisRdapService.java\nindex 1f882eae0..252d16121 100644\n--- a/whois-api/src/main/java/net/ripe/db/whois/api/rdap/WhoisRdapService.java\n+++ b/whois-api/src/main/java/net/ripe/db/whois/api/rdap/WhoisRdapService.java\n", "chunk": "@@ -276,7 +276,6 @@ public class WhoisRdapService {\n                         getRequestUrl(request),\n                         resultObject,\n                         objectDao.getLastUpdated(resultObject.getObjectId()),\n-                        abuseCFinder.getAbuseContactRole(resultObject),\n                         abuseCFinder.getAbuseContact(resultObject)))\n                 .header(CONTENT_TYPE, CONTENT_TYPE_RDAP_JSON)\n                 .build();\n", "next_change": null}]}, "revised_code_in_main": {"commit": "ae101b630bc4395e9867660c33c341da3e3c11e1", "changed_code": [{"header": "diff --git a/whois-api/src/main/java/net/ripe/db/whois/api/rdap/WhoisRdapService.java b/whois-api/src/main/java/net/ripe/db/whois/api/rdap/WhoisRdapService.java\nindex 1f882eae0..252d16121 100644\n--- a/whois-api/src/main/java/net/ripe/db/whois/api/rdap/WhoisRdapService.java\n+++ b/whois-api/src/main/java/net/ripe/db/whois/api/rdap/WhoisRdapService.java\n", "chunk": "@@ -276,7 +276,6 @@ public class WhoisRdapService {\n                         getRequestUrl(request),\n                         resultObject,\n                         objectDao.getLastUpdated(resultObject.getObjectId()),\n-                        abuseCFinder.getAbuseContactRole(resultObject),\n                         abuseCFinder.getAbuseContact(resultObject)))\n                 .header(CONTENT_TYPE, CONTENT_TYPE_RDAP_JSON)\n                 .build();\n", "next_change": {"commit": "e87f0e27ee39d7762c31c8d4eb1036fe373170d1", "changed_code": [{"header": "diff --git a/whois-api/src/main/java/net/ripe/db/whois/api/rdap/WhoisRdapService.java b/whois-api/src/main/java/net/ripe/db/whois/api/rdap/WhoisRdapService.java\nindex 252d16121..13ca9c80e 100644\n--- a/whois-api/src/main/java/net/ripe/db/whois/api/rdap/WhoisRdapService.java\n+++ b/whois-api/src/main/java/net/ripe/db/whois/api/rdap/WhoisRdapService.java\n", "chunk": "@@ -265,17 +231,11 @@ public class WhoisRdapService {\n \n         final RpslObject resultObject = result.get(0);\n \n-        if (resultObject.getKey().equals(CIString.ciString(\"0.0.0.0 - 255.255.255.255\")) ||\n-                resultObject.getKey().equals(CIString.ciString(\"::/0\"))) {\n-            // TODO: handle root object in RIPE space\n-            throw new NotFoundException(\"not found\");\n-        }\n \n         return Response.ok(\n                 rdapObjectMapper.map(\n                         getRequestUrl(request),\n                         resultObject,\n-                        objectDao.getLastUpdated(resultObject.getObjectId()),\n                         abuseCFinder.getAbuseContact(resultObject)))\n                 .header(CONTENT_TYPE, CONTENT_TYPE_RDAP_JSON)\n                 .build();\n", "next_change": {"commit": "98098cb176df301dbc2717ad7e8fff93b55c9350", "changed_code": [{"header": "diff --git a/whois-api/src/main/java/net/ripe/db/whois/api/rdap/WhoisRdapService.java b/whois-api/src/main/java/net/ripe/db/whois/api/rdap/WhoisRdapService.java\nindex 13ca9c80e..5b1c2d888 100644\n--- a/whois-api/src/main/java/net/ripe/db/whois/api/rdap/WhoisRdapService.java\n+++ b/whois-api/src/main/java/net/ripe/db/whois/api/rdap/WhoisRdapService.java\n", "chunk": "@@ -243,11 +376,22 @@ public class WhoisRdapService {\n \n     private Response redirect(final String requestPath, final Query query) {\n         final URI uri;\n-\n         try {\n             uri = delegatedStatsService.getUriForRedirect(requestPath, query);\n         } catch (WebApplicationException e) {\n-            throw new NotFoundException(\"not found\");\n+            throw new RdapException(\"404 Redirect URI not found\", e.getMessage(), HttpStatus.NOT_FOUND_404);\n+        }\n+\n+        return Response.status(Response.Status.MOVED_PERMANENTLY).location(uri).build();\n+    }\n+\n+    private Response redirectDomain(final String requestPath, final Domain domain) {\n+        final URI uri;\n+        try {\n+            uri = delegatedStatsService.getUriForRedirect(requestPath,\n+                        getQueryObject(Collections.singleton(getReverseObjectType(domain)), domain.getReverseIp().toString()));\n+        } catch (WebApplicationException e) {\n+            throw new RdapException(\"404 Redirect URI not found\", e.getMessage(), HttpStatus.NOT_FOUND_404);\n         }\n \n         return Response.status(Response.Status.MOVED_PERMANENTLY).location(uri).build();\n", "next_change": {"commit": "f852de26fb74ba4aeacb2ceaaf1d2f8bf5d077b9", "changed_code": [{"header": "diff --git a/whois-api/src/main/java/net/ripe/db/whois/api/rdap/WhoisRdapService.java b/whois-api/src/main/java/net/ripe/db/whois/api/rdap/WhoisRdapService.java\nindex 5b1c2d888..4b6e00e0d 100644\n--- a/whois-api/src/main/java/net/ripe/db/whois/api/rdap/WhoisRdapService.java\n+++ b/whois-api/src/main/java/net/ripe/db/whois/api/rdap/WhoisRdapService.java\n", "chunk": "@@ -385,11 +388,22 @@ public class WhoisRdapService {\n         return Response.status(Response.Status.MOVED_PERMANENTLY).location(uri).build();\n     }\n \n+    private Response redirect(final String requestPath, @Nullable final ObjectType objectType, final String searchValue) {\n+        final URI uri;\n+        try {\n+            uri = delegatedStatsService.getUriForRedirect(requestPath, objectType, searchValue);\n+        } catch (WebApplicationException e) {\n+            throw new RdapException(\"404 Redirect URI not found\", e.getMessage(), HttpStatus.NOT_FOUND_404);\n+        }\n+\n+        return Response.status(Response.Status.MOVED_PERMANENTLY).location(uri).build();\n+    }\n+\n     private Response redirectDomain(final String requestPath, final Domain domain) {\n         final URI uri;\n         try {\n             uri = delegatedStatsService.getUriForRedirect(requestPath,\n-                        getQueryObject(Collections.singleton(getReverseObjectType(domain)), domain.getReverseIp().toString()));\n+                        getReverseObjectType(domain), domain.getReverseIp().toString());\n         } catch (WebApplicationException e) {\n             throw new RdapException(\"404 Redirect URI not found\", e.getMessage(), HttpStatus.NOT_FOUND_404);\n         }\n", "next_change": {"commit": "162bec846ddd30d30e7febbb3a732107cbf2cc92", "changed_code": [{"header": "diff --git a/whois-api/src/main/java/net/ripe/db/whois/api/rdap/WhoisRdapService.java b/whois-api/src/main/java/net/ripe/db/whois/api/rdap/WhoisRdapService.java\nindex 4b6e00e0d..365b83ed6 100644\n--- a/whois-api/src/main/java/net/ripe/db/whois/api/rdap/WhoisRdapService.java\n+++ b/whois-api/src/main/java/net/ripe/db/whois/api/rdap/WhoisRdapService.java\n", "chunk": "@@ -402,8 +405,10 @@ public class WhoisRdapService {\n     private Response redirectDomain(final String requestPath, final Domain domain) {\n         final URI uri;\n         try {\n-            uri = delegatedStatsService.getUriForRedirect(requestPath,\n-                        getReverseObjectType(domain), domain.getReverseIp().toString());\n+            uri = delegatedStatsService.getUriForRedirect(\n+                        requestPath,\n+                        getReverseObjectType(domain),\n+                        domain.getReverseIp().toString());\n         } catch (WebApplicationException e) {\n             throw new RdapException(\"404 Redirect URI not found\", e.getMessage(), HttpStatus.NOT_FOUND_404);\n         }\n", "next_change": null}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "ae101b630bc4395e9867660c33c341da3e3c11e1", "message": "Merge commit", "committedDate": null}, {"oid": "0dee568faa0b4d2e05089d9a7821188a5bdc14e2", "committedDate": "2020-10-05 16:44:59 +0200", "message": "Update Dependencies (#659)"}, {"oid": "c1f192406eba2f7f42b6ab0c9a77b6b00f51efd4", "committedDate": "2020-12-11 14:27:37 +0100", "message": "nameserver not implemented (#711)"}, {"oid": "a6c5a97f7d3ac9df149f908ba8681882cda81e11", "committedDate": "2022-03-25 16:37:05 +0100", "message": "Rdap elasticsearch (#993)"}, {"oid": "ac940bb4beb0e4dbf12cb302768bc395e12a24c7", "committedDate": "2022-10-06 10:52:45 +0200", "message": "add status field to rdap query response (#1088)"}, {"oid": "e87f0e27ee39d7762c31c8d4eb1036fe373170d1", "committedDate": "2022-11-16 14:41:22 +0100", "message": "Rdap events and notices (#1112)"}, {"oid": "4241a2308eb15969d2a9f9ae1d8a03e47fb5d8ea", "committedDate": "2022-11-22 08:39:15 +0100", "message": "Db 2337 include networks autnums rdap (#1103)"}, {"oid": "f9f71f0976aa02527daae2db1df4104b7fdbfa7d", "committedDate": "2022-11-30 10:30:13 +0100", "message": "feat: refactor rdap errors (#1124)"}, {"oid": "02a42551e9fdba501d2937bb84b14eb22b621c2b", "committedDate": "2022-11-30 16:52:30 +0100", "message": "feat: do no return as-block if the autnum does not exist (#1125)"}, {"oid": "afcd0567afa03e5a7224e203962b651dd7ad3e00", "committedDate": "2022-12-08 12:08:32 +0100", "message": "feat: add networks and remove self link (#1135)"}, {"oid": "98098cb176df301dbc2717ad7e8fff93b55c9350", "committedDate": "2023-04-04 15:57:32 +0200", "message": "Redirect RDAP domain queries (#1213)"}, {"oid": "f852de26fb74ba4aeacb2ceaaf1d2f8bf5d077b9", "committedDate": "2023-04-13 17:25:34 +0200", "message": "Limit resource lookups in RDAP organisation entity requests (#1220)"}, {"oid": "162bec846ddd30d30e7febbb3a732107cbf2cc92", "committedDate": "2023-04-17 13:54:42 +0200", "message": "Rdap refactoring (#1221)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODQ5OTYwNA==", "url": "https://github.com/RIPE-NCC/whois/pull/651#discussion_r468499604", "body": "Can you add a negative test in a different test case? (i.e. the messages doesn't appear)", "bodyText": "Can you add a negative test in a different test case? (i.e. the messages doesn't appear)", "bodyHTML": "<p dir=\"auto\">Can you add a negative test in a different test case? (i.e. the messages doesn't appear)</p>", "author": "eshryane", "createdAt": "2020-08-11T11:05:43Z", "path": "whois-api/src/test/java/net/ripe/db/whois/api/rdap/RdapObjectMapperTest.java", "diffHunk": "@@ -591,14 +599,49 @@ public void help() {\n         assertThat(result.getPort43(), is(\"whois.ripe.net\"));\n     }\n \n+    @Test\n+    public void abuse_validation_failed() {\n+        when(abuseContact.isSuspect()).thenReturn(true);\n+        when(abuseContact.getOrgId()).thenReturn(ciString(\"ORG-NCC1-RIPE\"));\n+        when(abuseContact.getAbuseMailbox()).thenReturn(ciString(\"abuse@test.com\"));\n+        when(abuseContact.getNicHandle()).thenReturn(ciString(\"AB-TEST\"));\n+\n+        final Autnum result = (Autnum) map(\n+                RpslObject.parse(\"\" +\n+                    \"aut-num:        AS102\\n\" +\n+                    \"as-name:        End-User-2\\n\" +\n+                    \"org:            ORG-NCC1-RIPE\\n\" +\n+                    \"admin-c:        AP1-TEST\\n\" +\n+                    \"tech-c:         AP1-TEST\\n\" +\n+                    \"abuse-c:        AB-TEST\\n\" +\n+                    \"notify:         noreply@ripe.net\\n\" +\n+                    \"mnt-by:         UPD-MNT\\n\" +\n+                    \"source:         TEST\\n\"\n+                ),\n+                RpslObject.parse(\n+                    \"role:           Abuse Contact\\n\" +\n+                    \"nic-hdl:        AB-TEST\\n\" +\n+                    \"mnt-by:         TEST-MNT\\n\" +\n+                    \"abuse-mailbox:  abuse@test.com\\n\" +\n+                    \"admin-c:        TP1-TEST\\n\" +\n+                    \"tech-c:         TP2-TEST\\n\" +\n+                    \"phone:          +31 12345678\\n\" +\n+                    \"source:         TEST\"\n+                ),\n+                Optional.of(abuseContact)\n+        );\n+\n+        assertThat(result.getRemarks().get(0).getDescription().get(0), is(\"Abuse-mailbox validation failed. Please refer to ORG-NCC1-RIPE for further information.\"));", "originalCommit": "abaa1a8c546e7e5fdab62e98fca0e3611e8bb36f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjEyNjg4Nw==", "url": "https://github.com/RIPE-NCC/whois/pull/651#discussion_r472126887", "bodyText": "I've added a bunch of test cases (message doesn't appear, responsible org not found, IT).", "author": "sbusk", "createdAt": "2020-08-18T12:05:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODQ5OTYwNA=="}], "type": "inlineReview", "revised_code": {"commit": "5550905a431eac32e1e082097948d1c35b1bb580", "changed_code": [{"header": "diff --git a/whois-api/src/test/java/net/ripe/db/whois/api/rdap/RdapObjectMapperTest.java b/whois-api/src/test/java/net/ripe/db/whois/api/rdap/RdapObjectMapperTest.java\nindex 03da6e898..90b6da797 100644\n--- a/whois-api/src/test/java/net/ripe/db/whois/api/rdap/RdapObjectMapperTest.java\n+++ b/whois-api/src/test/java/net/ripe/db/whois/api/rdap/RdapObjectMapperTest.java\n", "chunk": "@@ -618,16 +630,6 @@ public class RdapObjectMapperTest {\n                     \"mnt-by:         UPD-MNT\\n\" +\n                     \"source:         TEST\\n\"\n                 ),\n-                RpslObject.parse(\n-                    \"role:           Abuse Contact\\n\" +\n-                    \"nic-hdl:        AB-TEST\\n\" +\n-                    \"mnt-by:         TEST-MNT\\n\" +\n-                    \"abuse-mailbox:  abuse@test.com\\n\" +\n-                    \"admin-c:        TP1-TEST\\n\" +\n-                    \"tech-c:         TP2-TEST\\n\" +\n-                    \"phone:          +31 12345678\\n\" +\n-                    \"source:         TEST\"\n-                ),\n                 Optional.of(abuseContact)\n         );\n \n", "next_change": {"commit": "3bd97905a836525f0008e3728e6afe6deb78e8c1", "changed_code": [{"header": "diff --git a/whois-api/src/test/java/net/ripe/db/whois/api/rdap/RdapObjectMapperTest.java b/whois-api/src/test/java/net/ripe/db/whois/api/rdap/RdapObjectMapperTest.java\nindex 90b6da797..d95df500a 100644\n--- a/whois-api/src/test/java/net/ripe/db/whois/api/rdap/RdapObjectMapperTest.java\n+++ b/whois-api/src/test/java/net/ripe/db/whois/api/rdap/RdapObjectMapperTest.java\n", "chunk": "@@ -633,7 +633,80 @@ public class RdapObjectMapperTest {\n                 Optional.of(abuseContact)\n         );\n \n-        assertThat(result.getRemarks().get(0).getDescription().get(0), is(\"Abuse-mailbox validation failed. Please refer to ORG-NCC1-RIPE for further information.\"));\n+        assertThat(\n+            result.getRemarks().get(0).getDescription().get(0),\n+            is(\"Abuse contact for 'AS102' is 'abuse@test.com'\\nAbuse-mailbox validation failed. Please refer to ORG-NCC1-RIPE for further information.\\n\")\n+        );\n+    }\n+\n+    @Test\n+    public void abuse_validation_passed() {\n+        final AbuseContact abuseContact = new AbuseContact(\n+            RpslObject.parse(\n+                \"role:           Abuse Contact\\n\" +\n+                \"nic-hdl:        AB-TEST\\n\" +\n+                \"mnt-by:         TEST-MNT\\n\" +\n+                \"abuse-mailbox:  abuse@test.com\\n\" +\n+                \"admin-c:        TP1-TEST\\n\" +\n+                \"tech-c:         TP2-TEST\\n\" +\n+                \"phone:          +31 12345678\\n\" +\n+                \"source:         TEST\"\n+            ),\n+            false,\n+            ciString(\"ORG-NCC1-RIPE\")\n+        );\n+\n+        final Autnum result = (Autnum) map(\n+            RpslObject.parse(\"\" +\n+                \"aut-num:        AS102\\n\" +\n+                \"as-name:        End-User-2\\n\" +\n+                \"org:            ORG-NCC1-RIPE\\n\" +\n+                \"admin-c:        AP1-TEST\\n\" +\n+                \"tech-c:         AP1-TEST\\n\" +\n+                \"abuse-c:        AB-TEST\\n\" +\n+                \"notify:         noreply@ripe.net\\n\" +\n+                \"mnt-by:         UPD-MNT\\n\" +\n+                \"source:         TEST\\n\"\n+            ),\n+            Optional.of(abuseContact)\n+        );\n+\n+        assertThat(result.getRemarks(), hasSize(0));\n+    }\n+\n+    @Test\n+    public void abuse_validation_failed_no_responsible_org() {\n+        final AbuseContact abuseContact = new AbuseContact(\n+                RpslObject.parse(\n+                        \"role:           Abuse Contact\\n\" +\n+                                \"nic-hdl:        AB-TEST\\n\" +\n+                                \"mnt-by:         TEST-MNT\\n\" +\n+                                \"abuse-mailbox:  abuse@test.com\\n\" +\n+                                \"admin-c:        TP1-TEST\\n\" +\n+                                \"tech-c:         TP2-TEST\\n\" +\n+                                \"phone:          +31 12345678\\n\" +\n+                                \"source:         TEST\"\n+                ),\n+                true,\n+                null\n+        );\n+\n+        final Autnum result = (Autnum) map(\n+                RpslObject.parse(\"\" +\n+                        \"aut-num:        AS102\\n\" +\n+                        \"as-name:        End-User-2\\n\" +\n+                        \"org:            ORG-NCC1-RIPE\\n\" +\n+                        \"admin-c:        AP1-TEST\\n\" +\n+                        \"tech-c:         AP1-TEST\\n\" +\n+                        \"abuse-c:        AB-TEST\\n\" +\n+                        \"notify:         noreply@ripe.net\\n\" +\n+                        \"mnt-by:         UPD-MNT\\n\" +\n+                        \"source:         TEST\\n\"\n+                ),\n+                Optional.of(abuseContact)\n+        );\n+\n+        assertThat(result.getRemarks(), hasSize(0));\n     }\n \n     // helper methods\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "ae101b630bc4395e9867660c33c341da3e3c11e1", "changed_code": [{"header": "diff --git a/whois-api/src/test/java/net/ripe/db/whois/api/rdap/RdapObjectMapperTest.java b/whois-api/src/test/java/net/ripe/db/whois/api/rdap/RdapObjectMapperTest.java\nindex 03da6e898..d95df500a 100644\n--- a/whois-api/src/test/java/net/ripe/db/whois/api/rdap/RdapObjectMapperTest.java\n+++ b/whois-api/src/test/java/net/ripe/db/whois/api/rdap/RdapObjectMapperTest.java\n", "chunk": "@@ -618,30 +630,93 @@ public class RdapObjectMapperTest {\n                     \"mnt-by:         UPD-MNT\\n\" +\n                     \"source:         TEST\\n\"\n                 ),\n+                Optional.of(abuseContact)\n+        );\n+\n+        assertThat(\n+            result.getRemarks().get(0).getDescription().get(0),\n+            is(\"Abuse contact for 'AS102' is 'abuse@test.com'\\nAbuse-mailbox validation failed. Please refer to ORG-NCC1-RIPE for further information.\\n\")\n+        );\n+    }\n+\n+    @Test\n+    public void abuse_validation_passed() {\n+        final AbuseContact abuseContact = new AbuseContact(\n+            RpslObject.parse(\n+                \"role:           Abuse Contact\\n\" +\n+                \"nic-hdl:        AB-TEST\\n\" +\n+                \"mnt-by:         TEST-MNT\\n\" +\n+                \"abuse-mailbox:  abuse@test.com\\n\" +\n+                \"admin-c:        TP1-TEST\\n\" +\n+                \"tech-c:         TP2-TEST\\n\" +\n+                \"phone:          +31 12345678\\n\" +\n+                \"source:         TEST\"\n+            ),\n+            false,\n+            ciString(\"ORG-NCC1-RIPE\")\n+        );\n+\n+        final Autnum result = (Autnum) map(\n+            RpslObject.parse(\"\" +\n+                \"aut-num:        AS102\\n\" +\n+                \"as-name:        End-User-2\\n\" +\n+                \"org:            ORG-NCC1-RIPE\\n\" +\n+                \"admin-c:        AP1-TEST\\n\" +\n+                \"tech-c:         AP1-TEST\\n\" +\n+                \"abuse-c:        AB-TEST\\n\" +\n+                \"notify:         noreply@ripe.net\\n\" +\n+                \"mnt-by:         UPD-MNT\\n\" +\n+                \"source:         TEST\\n\"\n+            ),\n+            Optional.of(abuseContact)\n+        );\n+\n+        assertThat(result.getRemarks(), hasSize(0));\n+    }\n+\n+    @Test\n+    public void abuse_validation_failed_no_responsible_org() {\n+        final AbuseContact abuseContact = new AbuseContact(\n                 RpslObject.parse(\n-                    \"role:           Abuse Contact\\n\" +\n-                    \"nic-hdl:        AB-TEST\\n\" +\n-                    \"mnt-by:         TEST-MNT\\n\" +\n-                    \"abuse-mailbox:  abuse@test.com\\n\" +\n-                    \"admin-c:        TP1-TEST\\n\" +\n-                    \"tech-c:         TP2-TEST\\n\" +\n-                    \"phone:          +31 12345678\\n\" +\n-                    \"source:         TEST\"\n+                        \"role:           Abuse Contact\\n\" +\n+                                \"nic-hdl:        AB-TEST\\n\" +\n+                                \"mnt-by:         TEST-MNT\\n\" +\n+                                \"abuse-mailbox:  abuse@test.com\\n\" +\n+                                \"admin-c:        TP1-TEST\\n\" +\n+                                \"tech-c:         TP2-TEST\\n\" +\n+                                \"phone:          +31 12345678\\n\" +\n+                                \"source:         TEST\"\n+                ),\n+                true,\n+                null\n+        );\n+\n+        final Autnum result = (Autnum) map(\n+                RpslObject.parse(\"\" +\n+                        \"aut-num:        AS102\\n\" +\n+                        \"as-name:        End-User-2\\n\" +\n+                        \"org:            ORG-NCC1-RIPE\\n\" +\n+                        \"admin-c:        AP1-TEST\\n\" +\n+                        \"tech-c:         AP1-TEST\\n\" +\n+                        \"abuse-c:        AB-TEST\\n\" +\n+                        \"notify:         noreply@ripe.net\\n\" +\n+                        \"mnt-by:         UPD-MNT\\n\" +\n+                        \"source:         TEST\\n\"\n                 ),\n                 Optional.of(abuseContact)\n         );\n \n-        assertThat(result.getRemarks().get(0).getDescription().get(0), is(\"Abuse-mailbox validation failed. Please refer to ORG-NCC1-RIPE for further information.\"));\n+        assertThat(result.getRemarks(), hasSize(0));\n     }\n \n     // helper methods\n \n     private Object map(final RpslObject rpslObject) {\n-        return map(rpslObject, null, Optional.empty());\n+        return map(rpslObject, Optional.empty());\n     }\n \n-    private Object map(final RpslObject rpslObject, final RpslObject abuseContact, final Optional<AbuseContact> optionalAbuseContact) {\n-        return mapper.map(REQUEST_URL, rpslObject, VERSION_TIMESTAMP, abuseContact, optionalAbuseContact);\n+    private Object map(final RpslObject rpslObject, final Optional<AbuseContact> optionalAbuseContact) {\n+        return mapper.map(REQUEST_URL, rpslObject, VERSION_TIMESTAMP, optionalAbuseContact);\n     }\n \n     private Object mapSearch(final List<RpslObject> objects, final Iterable<LocalDateTime> lastUpdateds) {\n", "next_change": {"commit": "e87f0e27ee39d7762c31c8d4eb1036fe373170d1", "changed_code": [{"header": "diff --git a/whois-api/src/test/java/net/ripe/db/whois/api/rdap/RdapObjectMapperTest.java b/whois-api/src/test/java/net/ripe/db/whois/api/rdap/RdapObjectMapperTest.java\nindex d95df500a..c9d0d8087 100644\n--- a/whois-api/src/test/java/net/ripe/db/whois/api/rdap/RdapObjectMapperTest.java\n+++ b/whois-api/src/test/java/net/ripe/db/whois/api/rdap/RdapObjectMapperTest.java\n", "chunk": "@@ -716,11 +782,11 @@ public class RdapObjectMapperTest {\n     }\n \n     private Object map(final RpslObject rpslObject, final Optional<AbuseContact> optionalAbuseContact) {\n-        return mapper.map(REQUEST_URL, rpslObject, VERSION_TIMESTAMP, optionalAbuseContact);\n+        return mapper.map(REQUEST_URL, rpslObject, optionalAbuseContact);\n     }\n \n-    private Object mapSearch(final List<RpslObject> objects, final Iterable<LocalDateTime> lastUpdateds) {\n-        return mapper.mapSearch(REQUEST_URL, objects, lastUpdateds, 10);\n+    private Object mapSearch(final List<RpslObject> objects) {\n+        return mapper.mapSearch(REQUEST_URL, objects, 10);\n     }\n \n     private Notice getTnCNotice() {\n", "next_change": {"commit": "162bec846ddd30d30e7febbb3a732107cbf2cc92", "changed_code": [{"header": "diff --git a/whois-api/src/test/java/net/ripe/db/whois/api/rdap/RdapObjectMapperTest.java b/whois-api/src/test/java/net/ripe/db/whois/api/rdap/RdapObjectMapperTest.java\ndeleted file mode 100644\nindex c9d0d8087..000000000\n--- a/whois-api/src/test/java/net/ripe/db/whois/api/rdap/RdapObjectMapperTest.java\n+++ /dev/null\n", "chunk": "@@ -1,798 +0,0 @@\n-package net.ripe.db.whois.api.rdap;\n-\n-import com.google.common.base.Joiner;\n-import com.google.common.collect.Lists;\n-import net.ripe.db.whois.api.rdap.domain.Action;\n-import net.ripe.db.whois.api.rdap.domain.Autnum;\n-import net.ripe.db.whois.api.rdap.domain.Domain;\n-import net.ripe.db.whois.api.rdap.domain.Entity;\n-import net.ripe.db.whois.api.rdap.domain.Ip;\n-import net.ripe.db.whois.api.rdap.domain.Nameserver;\n-import net.ripe.db.whois.api.rdap.domain.Notice;\n-import net.ripe.db.whois.api.rdap.domain.RdapObject;\n-import net.ripe.db.whois.api.rdap.domain.Role;\n-import net.ripe.db.whois.api.rdap.domain.SearchResult;\n-import net.ripe.db.whois.common.DateUtil;\n-import net.ripe.db.whois.common.dao.RpslObjectDao;\n-import net.ripe.db.whois.common.domain.CIString;\n-import net.ripe.db.whois.common.ip.Ipv4Resource;\n-import net.ripe.db.whois.common.iptree.Ipv4Entry;\n-import net.ripe.db.whois.common.iptree.Ipv4Tree;\n-import net.ripe.db.whois.common.iptree.Ipv6Tree;\n-import net.ripe.db.whois.common.rpsl.RpslObject;\n-import net.ripe.db.whois.query.planner.AbuseContact;\n-import net.ripe.db.whois.update.domain.ReservedResources;\n-import org.junit.jupiter.api.BeforeEach;\n-import org.junit.jupiter.api.Test;\n-import org.junit.jupiter.api.extension.ExtendWith;\n-import org.mockito.Mock;\n-import org.mockito.junit.jupiter.MockitoExtension;\n-\n-import java.time.LocalDateTime;\n-import java.util.Collections;\n-import java.util.List;\n-import java.util.Optional;\n-\n-import static net.ripe.db.whois.common.domain.CIString.ciString;\n-import static org.hamcrest.MatcherAssert.assertThat;\n-import static org.hamcrest.Matchers.contains;\n-import static org.hamcrest.Matchers.containsInAnyOrder;\n-import static org.hamcrest.Matchers.emptyIterable;\n-import static org.hamcrest.Matchers.hasSize;\n-import static org.hamcrest.Matchers.is;\n-import static org.hamcrest.Matchers.nullValue;\n-import static org.mockito.ArgumentMatchers.any;\n-import static org.mockito.Mockito.lenient;\n-import static org.mockito.Mockito.when;\n-\n-@ExtendWith(MockitoExtension.class)\n-public class RdapObjectMapperTest {\n-\n-    private static final LocalDateTime VERSION_TIMESTAMP = DateUtil.fromString(CIString.ciString(\"2022-10-25T12:22:39Z\"));\n-\n-    private static final LocalDateTime REGISTRATION_TIMESTAMP = DateUtil.fromString(CIString.ciString(\"2022-08-14T11:48:28Z\"));\n-    public static final String REQUEST_URL = \"http://localhost/\";\n-\n-    @Mock\n-    private NoticeFactory noticeFactory;\n-    @Mock\n-    private RpslObjectDao rpslObjectDao;\n-    @Mock\n-    private ReservedResources reservedResources;\n-    @Mock\n-    private Ipv4Tree ipv4Tree;\n-    @Mock\n-    private Ipv6Tree ipv6Tree;\n-\n-    private RdapObjectMapper mapper;\n-\n-    @BeforeEach\n-    public void setup() {\n-        lenient().when(noticeFactory.generateTnC(REQUEST_URL)).thenReturn(getTnCNotice());\n-\n-        this.mapper = new RdapObjectMapper(noticeFactory, rpslObjectDao, reservedResources, ipv4Tree, ipv6Tree, \"whois.ripe.net\");\n-    }\n-\n-    @Test\n-    public void ip() {\n-        when(ipv4Tree.findFirstLessSpecific(any(Ipv4Resource.class))).thenReturn(Collections.singletonList(new Ipv4Entry(Ipv4Resource.parse(\"0/0\"), 1)));\n-        when(rpslObjectDao.getById(1)).thenReturn(RpslObject.parse(\"inetnum: 0.0.0.0 - 255.255.255.255\\nnetname: ROOT-NET\\nsource: TEST\"));\n-\n-        final AbuseContact abuseContact = new AbuseContact(\n-                RpslObject.parse(\n-                    \"role:           Abuse Contact\\n\" +\n-                    \"nic-hdl:        AB-TEST\\n\" +\n-                    \"mnt-by:         TEST-MNT\\n\" +\n-                    \"admin-c:        TP1-TEST\\n\" +\n-                    \"tech-c:         TP2-TEST\\n\" +\n-                    \"phone:          +31 12345678\\n\" +\n-                    \"created:         2022-08-14T11:48:28Z\\n\" +\n-                    \"last-modified:   2022-10-25T12:22:39Z\\n\" +\n-                    \"source:         TEST\"\n-                ),\n-                false,\n-                ciString(\"\")\n-        );\n-\n-        final Ip result = (Ip) map(\n-                RpslObject.parse(\n-                        \"inetnum:        10.0.0.0 - 10.255.255.255\\n\" +\n-                                \"netname:        RIPE-NCC\\n\" +\n-                                \"descr:          some descr\\n\" +\n-                                \"country:        NL\\n\" +\n-                                \"admin-c:        TP1-TEST\\n\" +\n-                                \"tech-c:         TP1-TEST\\n\" +\n-                                \"status:         OTHER\\n\" +\n-                                \"language:       EN\\n\" +\n-                                \"language:       DK\\n\" +\n-                                \"mnt-by:         TST-MNT\\n\" +\n-                                \"mnt-lower:      TST-MNT\\n\" +\n-                                \"mnt-domains:    TST-MNT\\n\" +\n-                                \"mnt-routes:     TST-MNT\\n\" +\n-                                \"mnt-irt:        irt-IRT1\\n\" +\n-                                \"notify:         notify@test.net\\n\" +\n-                                \"org:            ORG-TOL1-TEST\\n\" +\n-                                \"created:         2022-08-14T11:48:28Z\\n\" +\n-                                \"last-modified:   2022-10-25T12:22:39Z\\n\" +\n-                                \"source:         TEST\"),\n-                Optional.of(abuseContact));\n-\n-        assertThat(result.getHandle(), is(\"10.0.0.0 - 10.255.255.255\"));\n-        assertThat(result.getStartAddress(), is(\"10.0.0.0\"));\n-        assertThat(result.getEndAddress(), is(\"10.255.255.255\"));\n-        assertThat(result.getIpVersion(), is(\"v4\"));\n-        assertThat(result.getName(), is(\"RIPE-NCC\"));\n-        assertThat(result.getType(), is(\"OTHER\"));\n-        assertThat(result.getCountry(), is(\"NL\"));\n-        assertThat(result.getLang(), is(\"EN\"));\n-        assertThat(result.getParentHandle(), is(\"0.0.0.0 - 255.255.255.255\"));\n-        assertThat(result.getPort43(), is(\"whois.ripe.net\"));\n-\n-        final List<Entity> entities = result.getEntitySearchResults();\n-        assertThat(entities, hasSize(4));\n-\n-        assertThat(entities.get(0).getHandle(), is(\"ORG-TOL1-TEST\"));\n-        assertThat(entities.get(0).getRoles().get(0), is(Role.REGISTRANT));\n-\n-        assertThat(entities.get(1).getHandle(), is(\"TP1-TEST\"));\n-        assertThat(entities.get(1).getRoles(), hasSize(2));\n-        assertThat(entities.get(1).getRoles(), containsInAnyOrder(Role.ADMINISTRATIVE, Role.TECHNICAL));\n-\n-        assertThat(entities.get(2).getHandle(), is(\"TST-MNT\"));\n-        assertThat(entities.get(2).getRoles(), hasSize(1));\n-        assertThat(entities.get(2).getRoles().get(0), is(Role.REGISTRANT));\n-\n-        assertThat(entities.get(3).getHandle(), is(\"AB-TEST\"));\n-        assertThat(entities.get(3).getRoles(), hasSize(1));\n-        assertThat(entities.get(3).getRoles().get(0), is(Role.ABUSE));\n-\n-        final List<Object> vCardArray = entities.get(3).getVCardArray();\n-        assertThat(vCardArray, hasSize(2));\n-        assertThat(vCardArray.get(0).toString(), is(\"vcard\"));\n-        assertThat(Joiner.on(\"\\n\").join((List)vCardArray.get(1)), is(\"\" +\n-                \"[version, {}, text, 4.0]\\n\" +\n-                \"[fn, {}, text, Abuse Contact]\\n\" +\n-                \"[kind, {}, text, group]\\n\" +\n-                \"[tel, {type=voice}, text, +31 12345678]\"));\n-\n-        final List<Entity> abuseEntities = entities.get(3).getEntitySearchResults();\n-        assertThat(abuseEntities, hasSize(3));\n-        assertThat(abuseEntities.get(0).getHandle(), is(\"TEST-MNT\"));\n-        assertThat(abuseEntities.get(0).getRoles().get(0), is(Role.REGISTRANT));\n-        assertThat(abuseEntities.get(1).getHandle(), is(\"TP1-TEST\"));\n-        assertThat(abuseEntities.get(1).getRoles().get(0), is(Role.ADMINISTRATIVE));\n-        assertThat(abuseEntities.get(2).getHandle(), is(\"TP2-TEST\"));\n-        assertThat(abuseEntities.get(2).getRoles().get(0), is(Role.TECHNICAL));\n-\n-        assertThat(result.getRemarks().get(0).getDescription().get(0), is(\"some descr\"));\n-        assertThat(result.getLinks(), hasSize(2));\n-        assertThat(result.getLinks().get(0).getRel(), is(\"self\"));\n-        assertThat(result.getLinks().get(1).getRel(), is(\"copyright\"));\n-\n-        assertThat(result.getEvents(), hasSize(2));\n-        assertThat(result.getEvents().get(0).getEventAction(), is(Action.REGISTRATION));\n-        assertThat(result.getEvents().get(0).getEventDate(), is(REGISTRATION_TIMESTAMP));\n-\n-        assertThat(result.getEvents().get(1).getEventAction(), is(Action.LAST_CHANGED));\n-        assertThat(result.getEvents().get(1).getEventDate(), is(VERSION_TIMESTAMP));\n-    }\n-\n-    @Test\n-    public void autnum() {\n-        final Autnum result = (Autnum) map((RpslObject.parse(\"\" +\n-                \"aut-num:        AS102\\n\" +\n-                \"as-name:        End-User-2\\n\" +\n-                \"member-of:      AS-TESTSET\\n\" +\n-                \"descr:          description\\n\" +\n-                \"import:         from AS1 accept ANY\\n\" +\n-                \"export:         to AS1 announce AS2\\n\" +\n-                \"default:        to AS1\\n\" +\n-                \"mp-import:      afi ipv6.unicast from AS1 accept ANY\\n\" +\n-                \"mp-export:      afi ipv6.unicast to AS1 announce AS2\\n\" +\n-                \"mp-default:     to AS1\\n\" +\n-                \"remarks:        remarkable\\n\" +\n-                \"org:            ORG-NCC1-RIPE\\n\" +\n-                \"admin-c:        AP1-TEST\\n\" +\n-                \"tech-c:         AP1-TEST\\n\" +\n-                \"notify:         noreply@ripe.net\\n\" +\n-                \"mnt-lower:      UPD-MNT\\n\" +\n-                \"mnt-routes:     UPD-MNT\\n\" +\n-                \"mnt-by:         UPD-MNT\\n\" +\n-                \"created:         2022-08-14T11:48:28Z\\n\" +\n-                \"last-modified:   2022-10-25T12:22:39Z\\n\" +\n-                \"source:         TEST\\n\")));\n-\n-        assertThat(result.getHandle(), is(\"AS102\"));\n-        assertThat(result.getStartAutnum(), is(102L));\n-        assertThat(result.getEndAutnum(), is(102L));\n-        assertThat(result.getName(), is(\"End-User-2\"));\n-        assertThat(result.getStatus().get(0), is(\"active\"));\n-        assertThat(result.getCountry(), is(nullValue()));\n-\n-        final List<Entity> entities = result.getEntitySearchResults();\n-        assertThat(entities, hasSize(3));\n-\n-        assertThat(entities.get(1).getHandle(), is(\"ORG-NCC1-RIPE\"));\n-        assertThat(entities.get(1).getRoles(), contains(Role.REGISTRANT));\n-        assertThat(entities.get(0).getHandle(), is(\"AP1-TEST\"));\n-        assertThat(entities.get(0).getRoles(), containsInAnyOrder(Role.TECHNICAL, Role.ADMINISTRATIVE));\n-        assertThat(entities.get(0).getVCardArray(), is(nullValue()));\n-        assertThat(entities.get(2).getHandle(), is(\"UPD-MNT\"));\n-        assertThat(entities.get(2).getRoles().get(0), is(Role.REGISTRANT));\n-        assertThat(entities.get(2).getVCardArray(), is(nullValue()));\n-\n-        assertThat(result.getRemarks().get(0).getDescription().get(0), is(\"description\"));\n-\n-        assertThat(result.getLinks(), hasSize(2));\n-        assertThat(result.getLinks().get(0).getRel(), is(\"self\"));\n-        assertThat(result.getLinks().get(1).getRel(), is(\"copyright\"));\n-        assertThat(result.getEvents(), hasSize(2));\n-        assertThat(result.getEvents().get(0).getEventAction(), is(Action.REGISTRATION));\n-        assertThat(result.getEvents().get(0).getEventDate(), is(REGISTRATION_TIMESTAMP));\n-\n-        assertThat(result.getEvents().get(1).getEventAction(), is(Action.LAST_CHANGED));\n-        assertThat(result.getEvents().get(1).getEventDate(), is(VERSION_TIMESTAMP));\n-\n-        assertThat(result.getPort43(), is(\"whois.ripe.net\"));\n-    }\n-\n-    @Test\n-    public void asBlock() {\n-        final Autnum result = (Autnum) map((RpslObject.parse(\"\" +\n-                \"as-block:       AS100 - AS200\\n\" +\n-                \"member-of:      AS-TESTSET\\n\" +\n-                \"descr:          description\\n\" +\n-                \"import:         from AS1 accept ANY\\n\" +\n-                \"export:         to AS1 announce AS2\\n\" +\n-                \"default:        to AS1\\n\" +\n-                \"mp-import:      afi ipv6.unicast from AS1 accept ANY\\n\" +\n-                \"mp-export:      afi ipv6.unicast to AS1 announce AS2\\n\" +\n-                \"mp-default:     to AS1\\n\" +\n-                \"remarks:        remarkable\\n\" +\n-                \"org:            ORG-NCC1-RIPE\\n\" +\n-                \"admin-c:        AP1-TEST\\n\" +\n-                \"tech-c:         AP1-TEST\\n\" +\n-                \"notify:         noreply@ripe.net\\n\" +\n-                \"mnt-lower:      UPD-MNT\\n\" +\n-                \"mnt-routes:     UPD-MNT\\n\" +\n-                \"mnt-by:         UPD-MNT\\n\" +\n-                \"created:         2022-08-14T11:48:28Z\\n\" +\n-                \"last-modified:   2022-10-25T12:22:39Z\\n\" +\n-                \"source:         TEST\\n\")));\n-\n-        assertThat(result.getHandle(), is(\"AS100\"));\n-        assertThat(result.getStartAutnum(), is(100L));\n-        assertThat(result.getEndAutnum(), is(200L));\n-        assertThat(result.getName(), is(\"AS100-AS200\"));\n-        assertThat(result.getStatus().get(0), is(\"active\"));\n-        assertThat(result.getCountry(), is(nullValue()));\n-\n-        final List<Entity> entities = result.getEntitySearchResults();\n-        assertThat(entities, hasSize(3));\n-\n-        assertThat(entities.get(0).getHandle(), is(\"AP1-TEST\"));\n-        assertThat(entities.get(0).getRoles(), containsInAnyOrder(Role.TECHNICAL, Role.ADMINISTRATIVE));\n-        assertThat(entities.get(0).getVCardArray(), is(nullValue()));\n-        assertThat(entities.get(1).getHandle(), is(\"ORG-NCC1-RIPE\"));\n-        assertThat(entities.get(1).getRoles(), contains(Role.REGISTRANT));\n-        assertThat(entities.get(2).getHandle(), is(\"UPD-MNT\"));\n-        assertThat(entities.get(2).getRoles().get(0), is(Role.REGISTRANT));\n-        assertThat(entities.get(2).getVCardArray(), is(nullValue()));\n-\n-        assertThat(result.getRemarks().get(0).getDescription().get(0), is(\"description\"));\n-\n-        assertThat(result.getLinks(), hasSize(2));\n-        assertThat(result.getLinks().get(0).getRel(), is(\"self\"));\n-        assertThat(result.getLinks().get(1).getRel(), is(\"copyright\"));\n-        assertThat(result.getEvents(), hasSize(2));\n-        assertThat(result.getEvents().get(0).getEventAction(), is(Action.REGISTRATION));\n-        assertThat(result.getEvents().get(0).getEventDate(), is(REGISTRATION_TIMESTAMP));\n-\n-        assertThat(result.getEvents().get(1).getEventAction(), is(Action.LAST_CHANGED));\n-        assertThat(result.getEvents().get(1).getEventDate(), is(VERSION_TIMESTAMP));\n-\n-        assertThat(result.getPort43(), is(\"whois.ripe.net\"));\n-    }\n-\n-    @Test\n-    public void domain() {\n-        final Domain result = (Domain) map((RpslObject.parse(\"\" +\n-                \"domain:          2.1.2.1.5.5.5.2.0.2.1.e164.arpa\\n\" +\n-                \"descr:           enum domain\\n\" +\n-                \"admin-c:         TEST-PN\\n\" +\n-                \"tech-c:          TEST-PN\\n\" +\n-                \"zone-c:          TEST-PN\\n\" +\n-                \"nserver:         ns.1.net\\n\" +\n-                \"nserver:         ns.foo.net.0.0.193.in-addr.arpa. 10.0.0.0/32\\n\" +\n-                \"mnt-by:          RIPE-NCC-MNT\\n\" +\n-                \"ds-rdata:        52314 5 1 93B5837D4E5C063A3728FAA72BA64068F89B39DF\\n\" +\n-                \"created:         2022-08-14T11:48:28Z\\n\" +\n-                \"last-modified:   2022-10-25T12:22:39Z\\n\" +\n-                \"source:          TEST\")));\n-\n-        assertThat(result.getHandle(), is(\"2.1.2.1.5.5.5.2.0.2.1.e164.arpa\"));\n-        assertThat(result.getLdhName(), is(\"2.1.2.1.5.5.5.2.0.2.1.e164.arpa\"));\n-        assertThat(result.getUnicodeName(), is(nullValue()));\n-\n-        assertThat(result.getNameservers(), hasSize(2));\n-        assertThat(result.getNameservers().get(0).getLdhName(), is(\"ns.1.net\"));\n-        assertThat(result.getNameservers().get(1).getLdhName(), is(\"ns.foo.net.0.0.193.in-addr.arpa\"));\n-        assertThat(result.getNameservers().get(1).getIpAddresses().getIpv4().get(0), is(\"10.0.0.0/32\"));\n-\n-        final Domain.SecureDNS secureDNS = result.getSecureDNS();\n-        assertThat(secureDNS.isDelegationSigned(), is(true));\n-        assertThat(secureDNS.getDsData().get(0).getAlgorithm(), is(5));\n-        assertThat(secureDNS.getDsData().get(0).getKeyTag(), is(52314L));\n-        assertThat(secureDNS.getDsData().get(0).getDigest(), is(\"93B5837D4E5C063A3728FAA72BA64068F89B39DF\"));\n-        assertThat(secureDNS.getDsData().get(0).getDigestType(), is(1));\n-\n-        final List<Entity> entities = result.getEntitySearchResults();\n-        assertThat(entities, hasSize(2));\n-        assertThat(entities.get(0).getHandle(), is(\"RIPE-NCC-MNT\"));\n-        assertThat(entities.get(0).getRoles(), contains(Role.REGISTRANT));\n-        assertThat(entities.get(0).getVCardArray(), is(nullValue()));\n-        assertThat(entities.get(1).getHandle(), is(\"TEST-PN\"));\n-        assertThat(entities.get(1).getRoles(), containsInAnyOrder(Role.ADMINISTRATIVE, Role.TECHNICAL, Role.ZONE));\n-        assertThat(entities.get(1).getVCardArray(), is(nullValue()));\n-\n-        assertThat(result.getStatus(), is(emptyIterable()));\n-        assertThat(result.getPublicIds(), is(nullValue()));\n-\n-        assertThat(result.getRemarks().get(0).getDescription().get(0), is(\"enum domain\"));\n-        assertThat(result.getLinks(), hasSize(2));\n-        assertThat(result.getLinks().get(0).getRel(), is(\"self\"));\n-        assertThat(result.getLinks().get(1).getRel(), is(\"copyright\"));\n-        assertThat(result.getPort43(), is(\"whois.ripe.net\"));\n-\n-        assertThat(result.getEvents(), hasSize(2));\n-        assertThat(result.getEvents().get(0).getEventActor(), is(nullValue()));\n-\n-        assertThat(result.getEvents().get(0).getEventAction(), is(Action.REGISTRATION));\n-        assertThat(result.getEvents().get(0).getEventDate(), is(REGISTRATION_TIMESTAMP));\n-\n-        assertThat(result.getEvents().get(1).getEventAction(), is(Action.LAST_CHANGED));\n-        assertThat(result.getEvents().get(1).getEventDate(), is(VERSION_TIMESTAMP));\n-\n-        assertThat(result.getEvents().get(0).getEventActor(), is(nullValue()));\n-\n-        assertThat(result.getPort43(), is(\"whois.ripe.net\"));\n-    }\n-\n-    @Test\n-    public void domain_31_12_202_in_addr_arpa() {\n-        final Domain result = (Domain) map((RpslObject.parse(\"\" +\n-                \"domain:   31.12.202.in-addr.arpa\\n\" +\n-                \"descr:    Test domain\\n\" +\n-                \"admin-c:  TP1-TEST\\n\" +\n-                \"tech-c:   TP1-TEST\\n\" +\n-                \"zone-c:   TP1-TEST\\n\" +\n-                \"notify:   notify@test.net.au\\n\" +\n-                \"nserver:  ns1.test.com.au 10.0.0.1\\n\" +\n-                \"nserver:  ns1.test.com.au 2001:10::1\\n\" +\n-                \"nserver:  ns2.test.com.au 10.0.0.2\\n\" +\n-                \"nserver:  ns2.test.com.au 2001:10::2\\n\" +\n-                \"nserver:  ns3.test.com.au\\n\" +\n-                \"ds-rdata: 52151 1 1 13ee60f7499a70e5aadaf05828e7fc59e8e70bc1\\n\" +\n-                \"ds-rdata: 17881 5 1 2e58131e5fe28ec965a7b8e4efb52d0a028d7a78\\n\" +\n-                \"ds-rdata: 17881 5 2 8c6265733a73e5588bfac516a4fcfbe1103a544b95f254cb67a21e474079547e\\n\" +\n-                \"mnt-by:   OWNER-MNT\\n\" +\n-                \"created:         2022-08-14T11:48:28Z\\n\" +\n-                \"last-modified:   2022-10-25T12:22:39Z\\n\" +\n-                \"source:   TEST\\n\")));\n-\n-        assertThat(result.getHandle(), is(\"31.12.202.in-addr.arpa\"));\n-        assertThat(result.getLdhName(), is(\"31.12.202.in-addr.arpa\"));\n-        assertThat(result.getUnicodeName(), is(nullValue()));\n-\n-        assertThat(result.getNameservers(), hasSize(3));\n-        assertThat(result.getNameservers(), containsInAnyOrder(\n-                new Nameserver(null, \"ns1.test.com.au\", null, new Nameserver.IpAddresses(Lists.newArrayList(\"10.0.0.1/32\"), Lists.newArrayList(\"2001:10::1/128\"))),\n-                new Nameserver(null, \"ns2.test.com.au\", null, new Nameserver.IpAddresses(Lists.newArrayList(\"10.0.0.2/32\"), Lists.newArrayList(\"2001:10::2/128\"))),\n-                new Nameserver(null, \"ns3.test.com.au\", null, null)\n-        ));\n-\n-        final Domain.SecureDNS secureDNS = result.getSecureDNS();\n-        assertThat(secureDNS.isDelegationSigned(), is(true));\n-        assertThat(secureDNS.getDsData(), hasSize(3));\n-        assertThat(secureDNS.getDsData(), containsInAnyOrder(\n-                new Domain.SecureDNS.DsData(52151L, 1, \"13ee60f7499a70e5aadaf05828e7fc59e8e70bc1\", 1, null),\n-                new Domain.SecureDNS.DsData(17881L, 5, \"2e58131e5fe28ec965a7b8e4efb52d0a028d7a78\", 1, null),\n-                new Domain.SecureDNS.DsData(17881L, 5, \"8c6265733a73e5588bfac516a4fcfbe1103a544b95f254cb67a21e474079547e\", 2, null)\n-        ));\n-\n-        final List<Entity> entities = result.getEntitySearchResults();\n-        assertThat(entities, hasSize(2));\n-        assertThat(entities, containsInAnyOrder(\n-                new Entity(\"OWNER-MNT\", null, Lists.newArrayList(Role.REGISTRANT), null),\n-                new Entity(\"TP1-TEST\", null, Lists.newArrayList(Role.TECHNICAL, Role.ADMINISTRATIVE, Role.ZONE), null)\n-        ));\n-\n-        assertThat(result.getPort43(), is(\"whois.ripe.net\"));\n-    }\n-\n-    @Test\n-    public void person() {\n-        final Entity result = (Entity) map(RpslObject.parse(\"\" +\n-                \"person:        First Last\\n\" +\n-                \"address:       Singel 258\\n\" +\n-                \"phone:         +31 20 123456\\n\" +\n-                \"fax-no:        +31 20 123457\\n\" +\n-                \"e-mail:        first@last.org\\n\" +\n-                \"org:           ORG-TOL1-TEST\\n\" +\n-                \"nic-hdl:       FL1-TEST\\n\" +\n-                \"remarks:       remark\\n\" +\n-                \"notify:        first@last.org\\n\" +\n-                \"abuse-mailbox: abuse@last.org\\n\" +\n-                \"mnt-by:        TST-MNT\\n\" +\n-                \"created:         2022-08-14T11:48:28Z\\n\" +\n-                \"last-modified:   2022-10-25T12:22:39Z\\n\" +\n-                \"source:        TEST\"));\n-\n-        assertThat(result.getHandle(), is(\"FL1-TEST\"));\n-        final List<Object> vCardArray = result.getVCardArray();\n-        assertThat(vCardArray, hasSize(2));\n-        assertThat(vCardArray.get(0).toString(), is(\"vcard\"));\n-        assertThat(Joiner.on(\"\\n\").join((List) vCardArray.get(1)), is(\"\" +\n-                \"[version, {}, text, 4.0]\\n\" +\n-                \"[fn, {}, text, First Last]\\n\" +\n-                \"[kind, {}, text, individual]\\n\" +\n-                \"[adr, {label=Singel 258}, text, [, , , , , , ]]\\n\" +\n-                \"[tel, {type=voice}, text, +31 20 123456]\\n\" +\n-                \"[tel, {type=fax}, text, +31 20 123457]\\n\" +\n-                \"[email, {type=email}, text, first@last.org]\\n\" +\n-                \"[email, {type=abuse}, text, abuse@last.org]\\n\" +\n-                \"[org, {}, text, ORG-TOL1-TEST]\"));\n-\n-        assertThat(result.getRoles(), is(emptyIterable()));\n-        assertThat(result.getPublicIds(), is(nullValue()));\n-\n-        final List<Entity> entities = result.getEntitySearchResults();\n-        assertThat(entities, hasSize(2));\n-        assertThat(entities.get(0).getHandle(), is(\"ORG-TOL1-TEST\"));\n-        assertThat(entities.get(0).getRoles(), contains(Role.REGISTRANT));\n-        assertThat(entities.get(1).getHandle(), is(\"TST-MNT\"));\n-        assertThat(entities.get(1).getRoles(), contains(Role.REGISTRANT));\n-        assertThat(entities.get(1).getVCardArray(), is(nullValue()));\n-\n-        assertThat(result.getRemarks(), is(emptyIterable()));\n-        assertThat(result.getLinks(), hasSize(2));\n-        assertThat(result.getLinks().get(0).getRel(), is(\"self\"));\n-        assertThat(result.getLinks().get(1).getRel(), is(\"copyright\"));\n-\n-        assertThat(result.getEvents(), hasSize(2));\n-\n-        assertThat(result.getEvents().get(0).getEventAction(), is(Action.REGISTRATION));\n-        assertThat(result.getEvents().get(0).getEventDate(), is(REGISTRATION_TIMESTAMP));\n-\n-        assertThat(result.getEvents().get(1).getEventAction(), is(Action.LAST_CHANGED));\n-        assertThat(result.getEvents().get(1).getEventDate(), is(VERSION_TIMESTAMP));\n-\n-        assertThat(result.getStatus(), is(emptyIterable()));\n-        assertThat(result.getPort43(), is(\"whois.ripe.net\"));\n-    }\n-\n-    @Test\n-    public void mntner() {\n-        final Entity result = (Entity) map(RpslObject.parse(\"\" +\n-                \"mntner:        OWNER-MNT\\n\" +\n-                \"descr:         Owner Maintainer\\n\" +\n-                \"admin-c:       TP1-TEST\\n\" +\n-                \"upd-to:        noreply@ripe.net\\n\" +\n-                \"auth:          MD5-PW $1$d9fKeTr2$Si7YudNf4rUGmR71n/cqk/ #test\\n\" +\n-                \"mnt-by:        OWNER-MNT\\n\" +\n-                \"referral-by:   OWNER-MNT\\n\" +\n-                \"remarks:       remark\\n\" +\n-                \"created:         2022-08-14T11:48:28Z\\n\" +\n-                \"last-modified:   2022-10-25T12:22:39Z\\n\" +\n-                \"source:        TEST\"));\n-\n-        assertThat(result.getHandle(), is(\"OWNER-MNT\"));\n-        final List<Object> vCardArray = result.getVCardArray();\n-        assertThat(vCardArray.get(0).toString(), is(\"vcard\"));\n-        assertThat(Joiner.on(\"\\n\").join((List) vCardArray.get(1)), is(\"\" +\n-                \"[version, {}, text, 4.0]\\n\" +\n-                \"[fn, {}, text, OWNER-MNT]\\n\" +\n-                \"[kind, {}, text, individual]\"));\n-\n-        final List<Entity> entities = result.getEntitySearchResults();\n-        assertThat(entities, hasSize(2));\n-        assertThat(entities.get(0).getHandle(), is(\"OWNER-MNT\"));\n-        assertThat(entities.get(0).getRoles(), contains(Role.REGISTRANT));\n-        assertThat(entities.get(0).getVCardArray(), is(nullValue()));\n-\n-        assertThat(entities.get(1).getHandle(), is(\"TP1-TEST\"));\n-        assertThat(entities.get(1).getRoles(), contains(Role.ADMINISTRATIVE));\n-        assertThat(entities.get(1).getVCardArray(), is(nullValue()));\n-\n-        assertThat(result.getLinks(), hasSize(2));\n-        assertThat(result.getLinks().get(0).getRel(), is(\"self\"));\n-        assertThat(result.getLinks().get(1).getRel(), is(\"copyright\"));\n-\n-        assertThat(result.getEvents(), hasSize(2));\n-\n-        assertThat(result.getEvents().get(0).getEventAction(), is(Action.REGISTRATION));\n-        assertThat(result.getEvents().get(0).getEventDate(), is(REGISTRATION_TIMESTAMP));\n-\n-        assertThat(result.getEvents().get(1).getEventAction(), is(Action.LAST_CHANGED));\n-        assertThat(result.getEvents().get(1).getEventDate(), is(VERSION_TIMESTAMP));\n-\n-        assertThat(result.getStatus(), is(emptyIterable()));\n-        assertThat(result.getPort43(), is(\"whois.ripe.net\"));\n-    }\n-\n-    @Test\n-    public void organisation() {\n-        final Entity result = (Entity) map(RpslObject.parse(\"\" +\n-                \"organisation:   ORG-AC1-TEST\\n\" +\n-                \"org-name:       Acme Carpets\\n\" +\n-                \"org-type:       OTHER\\n\" +\n-                \"address:        Singel 258\\n\" +\n-                \"e-mail:         bitbucket@ripe.net\\n\" +\n-                \"descr:          Acme Carpet Organisation\\n\" +\n-                \"remark:         some remark\\n\" +\n-                \"phone:          +31 1234567\\n\" +\n-                \"fax-no:         +31 98765432\\n\" +\n-                \"geoloc:         52.375599 4.899902\\n\" +\n-                \"language:       DK\\n\" +\n-                \"language:       EN\\n\" +\n-                \"admin-c:        TP1-TEST\\n\" +\n-                \"abuse-c:        ABU-TEST\\n\" +\n-                \"mnt-by:         FRED-MNT\\n\" +\n-                \"created:         2022-08-14T11:48:28Z\\n\" +\n-                \"last-modified:   2022-10-25T12:22:39Z\\n\" +\n-                \"source:         TEST\"));\n-\n-        assertThat(result.getHandle(), is(\"ORG-AC1-TEST\"));\n-        final List<Object> vCardArray = result.getVCardArray();\n-        assertThat(vCardArray, hasSize(2));\n-        assertThat(vCardArray.get(0).toString(), is(\"vcard\"));\n-        assertThat(Joiner.on(\"\\n\").join((List) vCardArray.get(1)), is(\"\" +\n-                \"[version, {}, text, 4.0]\\n\" +\n-                \"[fn, {}, text, Acme Carpets]\\n\" +\n-                \"[kind, {}, text, org]\\n\" +\n-                \"[adr, {label=Singel 258}, text, [, , , , , , ]]\\n\" +\n-                \"[tel, {type=voice}, text, +31 1234567]\\n\" +\n-                \"[tel, {type=fax}, text, +31 98765432]\\n\" +\n-                \"[email, {type=email}, text, bitbucket@ripe.net]\\n\" +\n-                \"[geo, {}, uri, 52.375599 4.899902]\"));\n-\n-        assertThat(result.getRoles(), is(emptyIterable()));\n-\n-        assertThat(result.getPublicIds(), is(nullValue()));\n-        assertThat(result.getEntitySearchResults(), hasSize(2));\n-\n-        assertThat(result.getRemarks(), hasSize(1));\n-        assertThat(result.getRemarks().get(0).getDescription().get(0), is(\"Acme Carpet Organisation\"));\n-\n-        assertThat(result.getLinks(), hasSize(2));\n-        assertThat(result.getLinks().get(0).getRel(), is(\"self\"));\n-        assertThat(result.getLinks().get(1).getRel(), is(\"copyright\"));\n-\n-        assertThat(result.getEvents(), hasSize(2));\n-        assertThat(result.getEvents().get(0).getEventAction(), is(Action.REGISTRATION));\n-        assertThat(result.getEvents().get(0).getEventDate(), is(REGISTRATION_TIMESTAMP));\n-\n-        assertThat(result.getEvents().get(1).getEventAction(), is(Action.LAST_CHANGED));\n-        assertThat(result.getEvents().get(1).getEventDate(), is(VERSION_TIMESTAMP));\n-\n-        assertThat(result.getStatus(), is(emptyIterable()));\n-        assertThat(result.getPort43(), is(\"whois.ripe.net\"));\n-\n-        assertThat(result.getLang(), is(\"DK\"));\n-\n-        final List<Notice> notices = result.getNotices();\n-\n-        assertThat(notices.get(0).getTitle(), is(\"Multiple language attributes found\"));\n-        assertThat(notices.get(0).getDescription().get(0), is(\"There are multiple language attributes DK, EN in ORG-AC1-TEST, but only the first language DK was returned.\"));\n-    }\n-\n-    @Test\n-    public void organisation_should_not_have_notice_for_language() {\n-        final Entity result = (Entity) map(RpslObject.parse(\"\" +\n-                \"organisation:   ORG-AC1-TEST\\n\" +\n-                \"org-name:       Acme Carpets\\n\" +\n-                \"org-type:       OTHER\\n\" +\n-                \"address:        Singel 258\\n\" +\n-                \"e-mail:         bitbucket@ripe.net\\n\" +\n-                \"descr:          Acme Carpet Organisation\\n\" +\n-                \"remark:         some remark\\n\" +\n-                \"phone:          +31 1234567\\n\" +\n-                \"fax-no:         +31 98765432\\n\" +\n-                \"geoloc:         52.375599 4.899902\\n\" +\n-                \"language:       DK\\n\" +\n-                \"admin-c:        TP1-TEST\\n\" +\n-                \"abuse-c:        ABU-TEST\\n\" +\n-                \"mnt-by:         FRED-MNT\\n\" +\n-                \"created:         2022-08-14T11:48:28Z\\n\" +\n-                \"last-modified:   2022-10-25T12:22:39Z\\n\" +\n-                \"source:         TEST\"));\n-\n-        assertThat(result.getLang(), is(\"DK\"));\n-\n-        final List<Notice> notices = result.getNotices();\n-\n-        assertThat(notices, hasSize(1));\n-        assertThat(notices.get(0).getTitle(), is(\"Terms And Condition\"));\n-    }\n-\n-    @Test\n-    public void mapSearch_twoObjects() {\n-        final List<RpslObject> objects = Lists.newArrayList(\n-                RpslObject.parse(\"organisation: ORG-TOL-TEST\\norg-name: Test Organisation\\nstatus: OTHER\\ndescr: comment 1\\nsource: TEST\\ncreated: 2022-08-14T11:48:28Z\\nlast-modified: 2022-10-25T12:22:39Z\"),\n-                RpslObject.parse(\"organisation: ORG-TST-TEST\\norg-name: Test Company\\nstatus: OTHER\\ndescr: comment 2\\nsource: TEST\\ncreated: 2022-08-14T11:48:28Z\\nlast-modified: 2022-10-25T12:22:39Z\")\n-        );\n-\n-        final SearchResult response = (SearchResult)mapSearch(objects);\n-\n-        assertThat(response.getEntitySearchResults(), hasSize(2));\n-\n-        final Entity first = response.getEntitySearchResults().get(0);\n-        assertThat(first.getHandle(), is(\"ORG-TOL-TEST\"));\n-        assertThat(first.getEvents(), hasSize(2));\n-        assertThat(first.getEvents().get(0).getEventAction(), is(Action.REGISTRATION));\n-        assertThat(first.getRemarks(), hasSize(1));\n-        assertThat(first.getRemarks().get(0).getDescription().get(0), is(\"comment 1\"));\n-\n-        final Entity last = response.getEntitySearchResults().get(1);\n-        assertThat(last.getHandle(), is(\"ORG-TST-TEST\"));\n-        assertThat(last.getEvents(), hasSize(2));\n-        assertThat(last.getEvents().get(1).getEventAction(), is(Action.LAST_CHANGED));\n-        assertThat(last.getRemarks(), hasSize(1));\n-        assertThat(last.getRemarks().get(0).getDescription().get(0), is(\"comment 2\"));\n-    }\n-\n-    @Test\n-    public void help() {\n-        final RdapObject result = mapper.mapHelp(\"http://localhost/rdap/help\");\n-\n-        assertThat(result.getLinks(), hasSize(2));\n-        assertThat(result.getLinks().get(0).getRel(), is(\"self\"));\n-        assertThat(result.getLinks().get(1).getRel(), is(\"copyright\"));\n-\n-        assertThat(result.getEvents(), is(emptyIterable()));\n-\n-        assertThat(result.getStatus(), is(emptyIterable()));\n-        assertThat(result.getPort43(), is(\"whois.ripe.net\"));\n-    }\n-\n-    @Test\n-    public void abuse_validation_failed() {\n-        final AbuseContact abuseContact = new AbuseContact(\n-            RpslObject.parse(\n-                \"role:           Abuse Contact\\n\" +\n-                \"nic-hdl:        AB-TEST\\n\" +\n-                \"mnt-by:         TEST-MNT\\n\" +\n-                \"abuse-mailbox:  abuse@test.com\\n\" +\n-                \"admin-c:        TP1-TEST\\n\" +\n-                \"tech-c:         TP2-TEST\\n\" +\n-                \"phone:          +31 12345678\\n\" +\n-                \"created:         2022-08-14T11:48:28Z\\n\" +\n-                \"last-modified:   2022-10-25T12:22:39Z\\n\" +\n-                \"source:         TEST\"\n-            ),\n-            true,\n-            ciString(\"ORG-NCC1-RIPE\")\n-        );\n-\n-        final Autnum result = (Autnum) map(\n-                RpslObject.parse(\"\" +\n-                    \"aut-num:        AS102\\n\" +\n-                    \"as-name:        End-User-2\\n\" +\n-                    \"org:            ORG-NCC1-RIPE\\n\" +\n-                    \"admin-c:        AP1-TEST\\n\" +\n-                    \"tech-c:         AP1-TEST\\n\" +\n-                    \"abuse-c:        AB-TEST\\n\" +\n-                    \"notify:         noreply@ripe.net\\n\" +\n-                    \"mnt-by:         UPD-MNT\\n\" +\n-                    \"created:         2022-08-14T11:48:28Z\\n\" +\n-                    \"last-modified:   2022-10-25T12:22:39Z\\n\" +\n-                    \"source:         TEST\\n\"\n-                ),\n-                Optional.of(abuseContact)\n-        );\n-\n-        assertThat(\n-            result.getRemarks().get(0).getDescription().get(0),\n-            is(\"Abuse contact for 'AS102' is 'abuse@test.com'\\nAbuse-mailbox validation failed. Please refer to ORG-NCC1-RIPE for further information.\\n\")\n-        );\n-    }\n-\n-    @Test\n-    public void abuse_validation_passed() {\n-        final AbuseContact abuseContact = new AbuseContact(\n-            RpslObject.parse(\n-                \"role:           Abuse Contact\\n\" +\n-                \"nic-hdl:        AB-TEST\\n\" +\n-                \"mnt-by:         TEST-MNT\\n\" +\n-                \"abuse-mailbox:  abuse@test.com\\n\" +\n-                \"admin-c:        TP1-TEST\\n\" +\n-                \"tech-c:         TP2-TEST\\n\" +\n-                \"phone:          +31 12345678\\n\" +\n-                \"created:         2022-08-14T11:48:28Z\\n\" +\n-                \"last-modified:   2022-10-25T12:22:39Z\\n\" +\n-                \"source:         TEST\"\n-            ),\n-            false,\n-            ciString(\"ORG-NCC1-RIPE\")\n-        );\n-\n-        final Autnum result = (Autnum) map(\n-            RpslObject.parse(\"\" +\n-                \"aut-num:        AS102\\n\" +\n-                \"as-name:        End-User-2\\n\" +\n-                \"org:            ORG-NCC1-RIPE\\n\" +\n-                \"admin-c:        AP1-TEST\\n\" +\n-                \"tech-c:         AP1-TEST\\n\" +\n-                \"abuse-c:        AB-TEST\\n\" +\n-                \"notify:         noreply@ripe.net\\n\" +\n-                \"mnt-by:         UPD-MNT\\n\" +\n-                \"created:         2022-08-14T11:48:28Z\\n\" +\n-                \"last-modified:   2022-10-25T12:22:39Z\\n\" +\n-                \"source:         TEST\\n\"\n-            ),\n-            Optional.of(abuseContact)\n-        );\n-\n-        assertThat(result.getRemarks(), hasSize(0));\n-    }\n-\n-    @Test\n-    public void abuse_validation_failed_no_responsible_org() {\n-        final AbuseContact abuseContact = new AbuseContact(\n-                RpslObject.parse(\n-                        \"role:           Abuse Contact\\n\" +\n-                                \"nic-hdl:        AB-TEST\\n\" +\n-                                \"mnt-by:         TEST-MNT\\n\" +\n-                                \"abuse-mailbox:  abuse@test.com\\n\" +\n-                                \"admin-c:        TP1-TEST\\n\" +\n-                                \"tech-c:         TP2-TEST\\n\" +\n-                                \"phone:          +31 12345678\\n\" +\n-                                \"created:         2022-08-14T11:48:28Z\\n\" +\n-                                \"last-modified:   2022-10-25T12:22:39Z\\n\" +\n-                                \"source:         TEST\"\n-                ),\n-                true,\n-                null\n-        );\n-\n-        final Autnum result = (Autnum) map(\n-                RpslObject.parse(\"\" +\n-                        \"aut-num:        AS102\\n\" +\n-                        \"as-name:        End-User-2\\n\" +\n-                        \"org:            ORG-NCC1-RIPE\\n\" +\n-                        \"admin-c:        AP1-TEST\\n\" +\n-                        \"tech-c:         AP1-TEST\\n\" +\n-                        \"abuse-c:        AB-TEST\\n\" +\n-                        \"notify:         noreply@ripe.net\\n\" +\n-                        \"mnt-by:         UPD-MNT\\n\" +\n-                        \"created:         2022-08-14T11:48:28Z\\n\" +\n-                        \"last-modified:   2022-10-25T12:22:39Z\\n\" +\n-                        \"source:         TEST\\n\"\n-                ),\n-                Optional.of(abuseContact)\n-        );\n-\n-        assertThat(result.getRemarks(), hasSize(0));\n-    }\n-\n-    // helper methods\n-\n-    private Object map(final RpslObject rpslObject) {\n-        return map(rpslObject, Optional.empty());\n-    }\n-\n-    private Object map(final RpslObject rpslObject, final Optional<AbuseContact> optionalAbuseContact) {\n-        return mapper.map(REQUEST_URL, rpslObject, optionalAbuseContact);\n-    }\n-\n-    private Object mapSearch(final List<RpslObject> objects) {\n-        return mapper.mapSearch(REQUEST_URL, objects, 10);\n-    }\n-\n-    private Notice getTnCNotice() {\n-        Notice notice = new Notice();\n-        notice.setTitle(\"Terms And Condition\");\n-        notice.getDescription().add(\"This is the RIPE Database query service. The objects are in RDAP format.\");\n-        return notice;\n-    }\n-}\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "ae101b630bc4395e9867660c33c341da3e3c11e1", "message": "Merge commit", "committedDate": null}, {"oid": "3804631f0fc18e0ca1e941da13ab012f2d37f0f5", "committedDate": "2020-11-04 11:09:04 +0100", "message": "Replaced deprecated JUnit assertEquals (#669)"}, {"oid": "cbf4139d07bd164cd3b223165eba41544f75eb39", "committedDate": "2020-11-16 20:31:38 +0100", "message": "Update to Mockito 2 (#685)"}, {"oid": "0406d6588684f7d77be41739b1717bc692be8cf2", "committedDate": "2021-11-08 14:05:49 +0100", "message": "Groovy upgrade (#935)"}, {"oid": "e9effad1ad8a7dd4844a28fed21a332f54f8a9ef", "committedDate": "2022-09-26 13:17:14 +0200", "message": "rdap autnum include start and end autnum (#1081)"}, {"oid": "ac940bb4beb0e4dbf12cb302768bc395e12a24c7", "committedDate": "2022-10-06 10:52:45 +0200", "message": "add status field to rdap query response (#1088)"}, {"oid": "e87f0e27ee39d7762c31c8d4eb1036fe373170d1", "committedDate": "2022-11-16 14:41:22 +0100", "message": "Rdap events and notices (#1112)"}, {"oid": "22e35c61682abf2722d31bb747178f07994346c2", "committedDate": "2022-11-23 08:50:49 +0100", "message": "feat: add trailing dot in domains ldh name (#1118)"}, {"oid": "162bec846ddd30d30e7febbb3a732107cbf2cc92", "committedDate": "2023-04-17 13:54:42 +0200", "message": "Rdap refactoring (#1221)"}]}, {"oid": "5550905a431eac32e1e082097948d1c35b1bb580", "url": "https://github.com/RIPE-NCC/whois/commit/5550905a431eac32e1e082097948d1c35b1bb580", "message": "AbuseContact now contains abuse-c role object so we don't require multiple lookups.", "committedDate": "2020-08-17T11:09:46Z", "type": "commit"}, {"oid": "3bd97905a836525f0008e3728e6afe6deb78e8c1", "url": "https://github.com/RIPE-NCC/whois/commit/3bd97905a836525f0008e3728e6afe6deb78e8c1", "message": "Use existing abuse mailbox failed message.\nAdded tests.", "committedDate": "2020-08-18T10:38:49Z", "type": "commit"}]}