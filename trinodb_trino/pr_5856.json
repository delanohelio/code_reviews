{"pr_number": 5856, "pr_title": "Add data compression property to SQL Server tables", "pr_author": "Praveen2112", "pr_createdAt": "2020-11-06T12:55:12Z", "pr_url": "https://github.com/trinodb/trino/pull/5856", "timeline": [{"oid": "ccf44c35f439ffa2c0d1a9d58ce67b0fa63b633c", "url": "https://github.com/trinodb/trino/commit/ccf44c35f439ffa2c0d1a9d58ce67b0fa63b633c", "message": "Add data compression property to SQL Server tables", "committedDate": "2020-11-12T10:46:52Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM4MDk2Nw==", "url": "https://github.com/trinodb/trino/pull/5856#discussion_r522380967", "body": "testWithDataCompression -> testCreateWithDataCompression", "bodyText": "testWithDataCompression -> testCreateWithDataCompression", "bodyHTML": "<p dir=\"auto\">testWithDataCompression -&gt; testCreateWithDataCompression</p>", "author": "findepi", "createdAt": "2020-11-12T19:52:30Z", "path": "presto-sqlserver/src/test/java/io/prestosql/plugin/sqlserver/TestSqlServerIntegrationSmokeTest.java", "diffHunk": "@@ -317,6 +324,27 @@ public void testNativeMultipleInClauses()\n         sqlServer.execute(\"SELECT count(*) FROM dbo.orders WHERE \" + longInClauses);\n     }\n \n+    @DataProvider\n+    public Object[][] dataCompression()\n+    {\n+        return new Object[][] {\n+                {NONE},\n+                {ROW},\n+                {PAGE}\n+        };\n+    }\n+\n+    @Test(dataProvider = \"dataCompression\")\n+    public void testWithDataCompression(DataCompression dataCompression)", "originalCommit": "ccf44c35f439ffa2c0d1a9d58ce67b0fa63b633c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM4MDk4OA==", "url": "https://github.com/trinodb/trino/pull/5856#discussion_r522380988", "body": "test_create_ -> test_create_with_compression", "bodyText": "test_create_ -> test_create_with_compression", "bodyHTML": "<p dir=\"auto\">test_create_ -&gt; test_create_with_compression</p>", "author": "findepi", "createdAt": "2020-11-12T19:52:31Z", "path": "presto-sqlserver/src/test/java/io/prestosql/plugin/sqlserver/TestSqlServerIntegrationSmokeTest.java", "diffHunk": "@@ -317,6 +324,27 @@ public void testNativeMultipleInClauses()\n         sqlServer.execute(\"SELECT count(*) FROM dbo.orders WHERE \" + longInClauses);\n     }\n \n+    @DataProvider\n+    public Object[][] dataCompression()\n+    {\n+        return new Object[][] {\n+                {NONE},\n+                {ROW},\n+                {PAGE}\n+        };\n+    }\n+\n+    @Test(dataProvider = \"dataCompression\")\n+    public void testWithDataCompression(DataCompression dataCompression)\n+    {\n+        String tableName = \"test_create_\" + randomTableSuffix();", "originalCommit": "ccf44c35f439ffa2c0d1a9d58ce67b0fa63b633c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM4MTM1NQ==", "url": "https://github.com/trinodb/trino/pull/5856#discussion_r522381355", "body": "```suggestion\r\n        assertUpdate(format(\"CREATE TABLE %s (a bigint, b bigint) WITH (DATA_COMPRESSION = '%s')\", tableName, dataCompression));\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertUpdate(format(\"CREATE TABLE %s (a BIGINT, b BIGINT) WITH (DATA_COMPRESSION = '%s')\", tableName, dataCompression));\n          \n          \n            \n                    assertUpdate(format(\"CREATE TABLE %s (a bigint, b bigint) WITH (DATA_COMPRESSION = '%s')\", tableName, dataCompression));", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        assertUpdate(format(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>CREATE TABLE %s (a <span class=\"x x-first x-last\">BIGINT</span>, b <span class=\"x x-first x-last\">BIGINT</span>) WITH (DATA_COMPRESSION = '%s')<span class=\"pl-pds\">\"</span></span>, tableName, dataCompression));</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        assertUpdate(format(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>CREATE TABLE %s (a <span class=\"x x-first x-last\">bigint</span>, b <span class=\"x x-first x-last\">bigint</span>) WITH (DATA_COMPRESSION = '%s')<span class=\"pl-pds\">\"</span></span>, tableName, dataCompression));</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "findepi", "createdAt": "2020-11-12T19:53:14Z", "path": "presto-sqlserver/src/test/java/io/prestosql/plugin/sqlserver/TestSqlServerIntegrationSmokeTest.java", "diffHunk": "@@ -317,6 +324,27 @@ public void testNativeMultipleInClauses()\n         sqlServer.execute(\"SELECT count(*) FROM dbo.orders WHERE \" + longInClauses);\n     }\n \n+    @DataProvider\n+    public Object[][] dataCompression()\n+    {\n+        return new Object[][] {\n+                {NONE},\n+                {ROW},\n+                {PAGE}\n+        };\n+    }\n+\n+    @Test(dataProvider = \"dataCompression\")\n+    public void testWithDataCompression(DataCompression dataCompression)\n+    {\n+        String tableName = \"test_create_\" + randomTableSuffix();\n+        assertUpdate(format(\"CREATE TABLE %s (a BIGINT, b BIGINT) WITH (DATA_COMPRESSION = '%s')\", tableName, dataCompression));", "originalCommit": "ccf44c35f439ffa2c0d1a9d58ce67b0fa63b633c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM4MTQ3NA==", "url": "https://github.com/trinodb/trino/pull/5856#discussion_r522381474", "body": "drop the table too", "bodyText": "drop the table too", "bodyHTML": "<p dir=\"auto\">drop the table too</p>", "author": "findepi", "createdAt": "2020-11-12T19:53:29Z", "path": "presto-sqlserver/src/test/java/io/prestosql/plugin/sqlserver/TestSqlServerIntegrationSmokeTest.java", "diffHunk": "@@ -317,6 +324,27 @@ public void testNativeMultipleInClauses()\n         sqlServer.execute(\"SELECT count(*) FROM dbo.orders WHERE \" + longInClauses);\n     }\n \n+    @DataProvider\n+    public Object[][] dataCompression()\n+    {\n+        return new Object[][] {\n+                {NONE},\n+                {ROW},\n+                {PAGE}\n+        };\n+    }\n+\n+    @Test(dataProvider = \"dataCompression\")\n+    public void testWithDataCompression(DataCompression dataCompression)\n+    {\n+        String tableName = \"test_create_\" + randomTableSuffix();\n+        assertUpdate(format(\"CREATE TABLE %s (a BIGINT, b BIGINT) WITH (DATA_COMPRESSION = '%s')\", tableName, dataCompression));\n+        // Compression can be applied per partition so we might not be able to capture them in `SHOW CREATE TABLE`.\n+        assertQuery(\n+                format(\"SELECT data_compression_desc FROM sys.partitions p INNER JOIN sys.tables t ON p.object_id = t.object_id WHERE t.name = '%s'\", tableName),\n+                format(\"VALUES '%s'\", dataCompression));\n+    }", "originalCommit": "ccf44c35f439ffa2c0d1a9d58ce67b0fa63b633c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDE3MjkyMQ==", "url": "https://github.com/trinodb/trino/pull/5856#discussion_r524172921", "body": "add\r\n```\r\ncheckArgument(tableMetadata.getProperties().isEmpty(), \"Unsupported table properties: %s\", tableMetadata.getProperties());\r\n```", "bodyText": "add\ncheckArgument(tableMetadata.getProperties().isEmpty(), \"Unsupported table properties: %s\", tableMetadata.getProperties());", "bodyHTML": "<p dir=\"auto\">add</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"checkArgument(tableMetadata.getProperties().isEmpty(), &quot;Unsupported table properties: %s&quot;, tableMetadata.getProperties());\n\"><pre><code>checkArgument(tableMetadata.getProperties().isEmpty(), \"Unsupported table properties: %s\", tableMetadata.getProperties());\n</code></pre></div>", "author": "findepi", "createdAt": "2020-11-16T11:45:23Z", "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/BaseJdbcClient.java", "diffHunk": "@@ -492,7 +492,7 @@ protected JdbcOutputTableHandle createTable(ConnectorSession session, ConnectorT\n         }\n     }\n \n-    protected String createTableSql(RemoteTableName remoteTableName, List<String> columns)\n+    protected String createTableSql(RemoteTableName remoteTableName, List<String> columns,  ConnectorTableMetadata tableMetadata)", "originalCommit": "5203622f3b35d818be7e72f3e795cb8e6e34a8b4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDE3OTU4NQ==", "url": "https://github.com/trinodb/trino/pull/5856#discussion_r524179585", "body": "This is correct because currently SQL Server does not seem to support enabling table compression by default for a schema or database. However, they can add in the future.\r\nTherefore today NONE is a good default, but can become a wrong choice without a code change on our part.\r\n\r\nLet's replace NONE with UNSET (or DEFAULT). Then do not add `WITH (DATA_COMPRESSION` clause when compression is the UNSET.\r\n\r\ncc @kokosing ", "bodyText": "This is correct because currently SQL Server does not seem to support enabling table compression by default for a schema or database. However, they can add in the future.\nTherefore today NONE is a good default, but can become a wrong choice without a code change on our part.\nLet's replace NONE with UNSET (or DEFAULT). Then do not add WITH (DATA_COMPRESSION clause when compression is the UNSET.\ncc @kokosing", "bodyHTML": "<p dir=\"auto\">This is correct because currently SQL Server does not seem to support enabling table compression by default for a schema or database. However, they can add in the future.<br>\nTherefore today NONE is a good default, but can become a wrong choice without a code change on our part.</p>\n<p dir=\"auto\">Let's replace NONE with UNSET (or DEFAULT). Then do not add <code>WITH (DATA_COMPRESSION</code> clause when compression is the UNSET.</p>\n<p dir=\"auto\">cc <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/kokosing/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/kokosing\">@kokosing</a></p>", "author": "findepi", "createdAt": "2020-11-16T11:51:28Z", "path": "presto-sqlserver/src/main/java/io/prestosql/plugin/sqlserver/SqlServerClient.java", "diffHunk": "@@ -233,6 +240,32 @@ public boolean isLimitGuaranteed(ConnectorSession session)\n         return true;\n     }\n \n+    @Override\n+    protected String createTableSql(RemoteTableName remoteTableName, List<String> columns, ConnectorTableMetadata tableMetadata)\n+    {\n+        return format(\"CREATE TABLE %s (%s) WITH (DATA_COMPRESSION = %s)\", quoted(remoteTableName), join(\", \", columns), getDataCompression(tableMetadata.getProperties()));", "originalCommit": "a430d9bb73177f942294f8bbce7adfeedb0978c9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDIyOTgzMg==", "url": "https://github.com/trinodb/trino/pull/5856#discussion_r524229832", "bodyText": "Correct me if I am wrong, NONE means no compression.\n\nLet's replace NONE with UNSET (or DEFAULT). Then do not add WITH (DATA_COMPRESSION clause when compression is the UNSET.\n\nLet's implement UNSET by not setting property value, so let's make it nullable and when it is null we should just use sql server system default behaviour.", "author": "kokosing", "createdAt": "2020-11-16T12:38:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDE3OTU4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDIzMDY2MA==", "url": "https://github.com/trinodb/trino/pull/5856#discussion_r524230660", "bodyText": "But when we run SHOW CREATE TABLE for any table from SQLServer we won't be able to capture the UNSET/DEFAULT rather we get only NONE. How can we handle in that situation ?", "author": "Praveen2112", "createdAt": "2020-11-16T12:39:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDE3OTU4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDE4MjkzOQ==", "url": "https://github.com/trinodb/trino/pull/5856#discussion_r524182939", "body": "This is not safe. Should SQL Server add new compression mode (say, \"BLOCK\"), we don't want to fail the method here. I'd rather return no property.\r\n\r\nalso, is there a test ensuring SHOW CREATE TABLE doesn't return unnecessary data_compression property for all tables now?", "bodyText": "This is not safe. Should SQL Server add new compression mode (say, \"BLOCK\"), we don't want to fail the method here. I'd rather return no property.\nalso, is there a test ensuring SHOW CREATE TABLE doesn't return unnecessary data_compression property for all tables now?", "bodyHTML": "<p dir=\"auto\">This is not safe. Should SQL Server add new compression mode (say, \"BLOCK\"), we don't want to fail the method here. I'd rather return no property.</p>\n<p dir=\"auto\">also, is there a test ensuring SHOW CREATE TABLE doesn't return unnecessary data_compression property for all tables now?</p>", "author": "findepi", "createdAt": "2020-11-16T11:54:32Z", "path": "presto-sqlserver/src/main/java/io/prestosql/plugin/sqlserver/SqlServerClient.java", "diffHunk": "@@ -233,6 +240,32 @@ public boolean isLimitGuaranteed(ConnectorSession session)\n         return true;\n     }\n \n+    @Override\n+    protected String createTableSql(RemoteTableName remoteTableName, List<String> columns, ConnectorTableMetadata tableMetadata)\n+    {\n+        return format(\"CREATE TABLE %s (%s) WITH (DATA_COMPRESSION = %s)\", quoted(remoteTableName), join(\", \", columns), getDataCompression(tableMetadata.getProperties()));\n+    }\n+\n+    @Override\n+    public Map<String, Object> getTableProperties(JdbcIdentity identity, JdbcTableHandle tableHandle)\n+    {\n+        ImmutableMap.Builder<String, Object> builder = ImmutableMap.builder();\n+\n+        try (Connection connection = connectionFactory.openConnection(identity);\n+                PreparedStatement statement = connection.prepareStatement(\"SELECT data_compression_desc FROM sys.partitions p INNER JOIN sys.tables t ON p.object_id = t.object_id WHERE p.partition_number = 1 AND t.name = ?\")) {\n+            statement.setString(1, tableHandle.getRemoteTableName().getTableName());\n+            try (ResultSet resultSet = statement.executeQuery()) {\n+                if (resultSet.next()) {\n+                    builder.put(DATA_COMPRESSION, DataCompression.valueOf(resultSet.getString(1)));", "originalCommit": "a430d9bb73177f942294f8bbce7adfeedb0978c9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDIyNjkxNw==", "url": "https://github.com/trinodb/trino/pull/5856#discussion_r524226917", "bodyText": "is there a test ensuring SHOW CREATE TABLE doesn't return unnecessary data_compression property for all tables now\n\nThat property will now be added. I think we should skip it when it is value is unknown (null), when it differs among paritions.", "author": "kokosing", "createdAt": "2020-11-16T12:36:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDE4MjkzOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDE4MzkwOA==", "url": "https://github.com/trinodb/trino/pull/5856#discussion_r524183908", "body": "what if we get two rows? validate & fail in such a case, this means our query is wrong\r\n\r\n```\r\nverify(!resultSet.next(), \"Unexpected second result row\");\r\n```", "bodyText": "what if we get two rows? validate & fail in such a case, this means our query is wrong\nverify(!resultSet.next(), \"Unexpected second result row\");", "bodyHTML": "<p dir=\"auto\">what if we get two rows? validate &amp; fail in such a case, this means our query is wrong</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"verify(!resultSet.next(), &quot;Unexpected second result row&quot;);\n\"><pre><code>verify(!resultSet.next(), \"Unexpected second result row\");\n</code></pre></div>", "author": "findepi", "createdAt": "2020-11-16T11:55:26Z", "path": "presto-sqlserver/src/main/java/io/prestosql/plugin/sqlserver/SqlServerClient.java", "diffHunk": "@@ -233,6 +240,32 @@ public boolean isLimitGuaranteed(ConnectorSession session)\n         return true;\n     }\n \n+    @Override\n+    protected String createTableSql(RemoteTableName remoteTableName, List<String> columns, ConnectorTableMetadata tableMetadata)\n+    {\n+        return format(\"CREATE TABLE %s (%s) WITH (DATA_COMPRESSION = %s)\", quoted(remoteTableName), join(\", \", columns), getDataCompression(tableMetadata.getProperties()));\n+    }\n+\n+    @Override\n+    public Map<String, Object> getTableProperties(JdbcIdentity identity, JdbcTableHandle tableHandle)\n+    {\n+        ImmutableMap.Builder<String, Object> builder = ImmutableMap.builder();\n+\n+        try (Connection connection = connectionFactory.openConnection(identity);\n+                PreparedStatement statement = connection.prepareStatement(\"SELECT data_compression_desc FROM sys.partitions p INNER JOIN sys.tables t ON p.object_id = t.object_id WHERE p.partition_number = 1 AND t.name = ?\")) {\n+            statement.setString(1, tableHandle.getRemoteTableName().getTableName());\n+            try (ResultSet resultSet = statement.executeQuery()) {\n+                if (resultSet.next()) {", "originalCommit": "a430d9bb73177f942294f8bbce7adfeedb0978c9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDE4NTI1Nw==", "url": "https://github.com/trinodb/trino/pull/5856#discussion_r524185257", "body": "As you explained to me offline, the SQL Server treats table with single partition as an unpartitioned table.\r\nIs there a guarantee that the only partition will have `partition_number=1`?\r\nAlso, in case of a partitioned table, we should _not_ return compression info from the first partition.", "bodyText": "As you explained to me offline, the SQL Server treats table with single partition as an unpartitioned table.\nIs there a guarantee that the only partition will have partition_number=1?\nAlso, in case of a partitioned table, we should not return compression info from the first partition.", "bodyHTML": "<p dir=\"auto\">As you explained to me offline, the SQL Server treats table with single partition as an unpartitioned table.<br>\nIs there a guarantee that the only partition will have <code>partition_number=1</code>?<br>\nAlso, in case of a partitioned table, we should <em>not</em> return compression info from the first partition.</p>", "author": "findepi", "createdAt": "2020-11-16T11:56:42Z", "path": "presto-sqlserver/src/main/java/io/prestosql/plugin/sqlserver/SqlServerClient.java", "diffHunk": "@@ -233,6 +240,32 @@ public boolean isLimitGuaranteed(ConnectorSession session)\n         return true;\n     }\n \n+    @Override\n+    protected String createTableSql(RemoteTableName remoteTableName, List<String> columns, ConnectorTableMetadata tableMetadata)\n+    {\n+        return format(\"CREATE TABLE %s (%s) WITH (DATA_COMPRESSION = %s)\", quoted(remoteTableName), join(\", \", columns), getDataCompression(tableMetadata.getProperties()));\n+    }\n+\n+    @Override\n+    public Map<String, Object> getTableProperties(JdbcIdentity identity, JdbcTableHandle tableHandle)\n+    {\n+        ImmutableMap.Builder<String, Object> builder = ImmutableMap.builder();\n+\n+        try (Connection connection = connectionFactory.openConnection(identity);\n+                PreparedStatement statement = connection.prepareStatement(\"SELECT data_compression_desc FROM sys.partitions p INNER JOIN sys.tables t ON p.object_id = t.object_id WHERE p.partition_number = 1 AND t.name = ?\")) {", "originalCommit": "a430d9bb73177f942294f8bbce7adfeedb0978c9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDIzMjk5NQ==", "url": "https://github.com/trinodb/trino/pull/5856#discussion_r524232995", "bodyText": "From their documentation it looks like they set partition_number as 1 for non-partitioned tables.\nRef : https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-partitions-transact-sql?view=sql-server-ver15", "author": "Praveen2112", "createdAt": "2020-11-16T12:42:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDE4NTI1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDI3MDExNw==", "url": "https://github.com/trinodb/trino/pull/5856#discussion_r524270117", "bodyText": "This answers the first question.", "author": "findepi", "createdAt": "2020-11-16T13:33:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDE4NTI1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDEyMDgwMg==", "url": "https://github.com/trinodb/trino/pull/5856#discussion_r544120802", "bodyText": "From their docs it looks like 1 is used only for non-partitioned tables", "author": "Praveen2112", "createdAt": "2020-12-16T08:55:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDE4NTI1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDE4NjU5OQ==", "url": "https://github.com/trinodb/trino/pull/5856#discussion_r524186599", "body": "Wonder why we need to specify the default twice -- above and here.", "bodyText": "Wonder why we need to specify the default twice -- above and here.", "bodyHTML": "<p dir=\"auto\">Wonder why we need to specify the default twice -- above and here.</p>", "author": "findepi", "createdAt": "2020-11-16T11:57:56Z", "path": "presto-sqlserver/src/main/java/io/prestosql/plugin/sqlserver/SqlServerTableProperties.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.sqlserver;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.plugin.jdbc.TablePropertiesProvider;\n+import io.prestosql.spi.session.PropertyMetadata;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import static io.prestosql.plugin.sqlserver.DataCompression.NONE;\n+import static io.prestosql.spi.session.PropertyMetadata.enumProperty;\n+\n+public class SqlServerTableProperties\n+        implements TablePropertiesProvider\n+{\n+    public static final String DATA_COMPRESSION = \"data_compression\";\n+\n+    private final List<PropertyMetadata<?>> tableProperties = ImmutableList.of(\n+            enumProperty(\n+                    DATA_COMPRESSION,\n+                    \"DataCompression type for table\",\n+                    DataCompression.class,\n+                    NONE,\n+                    false));\n+\n+    @Override\n+    public List<PropertyMetadata<?>> getTableProperties()\n+    {\n+        return tableProperties;\n+    }\n+\n+    public static DataCompression getDataCompression(Map<String, Object> tableProperties)\n+    {\n+        return (DataCompression) tableProperties.getOrDefault(DATA_COMPRESSION, NONE);", "originalCommit": "a430d9bb73177f942294f8bbce7adfeedb0978c9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDE4NzM4MQ==", "url": "https://github.com/trinodb/trino/pull/5856#discussion_r524187381", "body": "nit: i'd put this below the test method, but up to you", "bodyText": "nit: i'd put this below the test method, but up to you", "bodyHTML": "<p dir=\"auto\">nit: i'd put this below the test method, but up to you</p>", "author": "findepi", "createdAt": "2020-11-16T11:58:43Z", "path": "presto-sqlserver/src/test/java/io/prestosql/plugin/sqlserver/TestSqlServerIntegrationSmokeTest.java", "diffHunk": "@@ -317,6 +323,36 @@ public void testNativeMultipleInClauses()\n         sqlServer.execute(\"SELECT count(*) FROM dbo.orders WHERE \" + longInClauses);\n     }\n \n+    @DataProvider\n+    public Object[][] dataCompression()", "originalCommit": "a430d9bb73177f942294f8bbce7adfeedb0978c9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDIyMjI0Mw==", "url": "https://github.com/trinodb/trino/pull/5856#discussion_r524222243", "body": "you might want to replace multiple subsequent white characters in to a single space, then value of `createQuery` would be easier to maintain.", "bodyText": "you might want to replace multiple subsequent white characters in to a single space, then value of createQuery would be easier to maintain.", "bodyHTML": "<p dir=\"auto\">you might want to replace multiple subsequent white characters in to a single space, then value of <code>createQuery</code> would be easier to maintain.</p>", "author": "kokosing", "createdAt": "2020-11-16T12:31:50Z", "path": "presto-sqlserver/src/test/java/io/prestosql/plugin/sqlserver/TestSqlServerIntegrationSmokeTest.java", "diffHunk": "@@ -317,6 +323,36 @@ public void testNativeMultipleInClauses()\n         sqlServer.execute(\"SELECT count(*) FROM dbo.orders WHERE \" + longInClauses);\n     }\n \n+    @DataProvider\n+    public Object[][] dataCompression()\n+    {\n+        return new Object[][] {\n+                {NONE},\n+                {ROW},\n+                {PAGE}\n+        };\n+    }\n+\n+    @Test(dataProvider = \"dataCompression\")\n+    public void testCreateWithDataCompression(DataCompression dataCompression)\n+    {\n+        String tableName = \"test_create_with_compression_\" + randomTableSuffix();\n+        String createQuery = format(\"CREATE TABLE sqlserver.dbo.%s (\\n\" +\n+                        \"   a bigint,\\n\" +\n+                        \"   b bigint\\n\" +\n+                        \")\\n\" +\n+                        \"WITH (\\n\" +\n+                        \"   data_compression = '%s'\\n\" +\n+                        \")\",\n+                tableName,\n+                dataCompression);\n+        assertUpdate(createQuery);\n+\n+        assertEquals(getQueryRunner().execute(\"SHOW CREATE TABLE \" + tableName).getOnlyValue(), createQuery);", "originalCommit": "a430d9bb73177f942294f8bbce7adfeedb0978c9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDIyNTg2NA==", "url": "https://github.com/trinodb/trino/pull/5856#discussion_r524225864", "body": "jdbi3?", "bodyText": "jdbi3?", "bodyHTML": "<p dir=\"auto\">jdbi3?</p>", "author": "kokosing", "createdAt": "2020-11-16T12:35:16Z", "path": "presto-sqlserver/src/main/java/io/prestosql/plugin/sqlserver/SqlServerClient.java", "diffHunk": "@@ -233,6 +240,32 @@ public boolean isLimitGuaranteed(ConnectorSession session)\n         return true;\n     }\n \n+    @Override\n+    protected String createTableSql(RemoteTableName remoteTableName, List<String> columns, ConnectorTableMetadata tableMetadata)\n+    {\n+        return format(\"CREATE TABLE %s (%s) WITH (DATA_COMPRESSION = %s)\", quoted(remoteTableName), join(\", \", columns), getDataCompression(tableMetadata.getProperties()));\n+    }\n+\n+    @Override\n+    public Map<String, Object> getTableProperties(JdbcIdentity identity, JdbcTableHandle tableHandle)\n+    {\n+        ImmutableMap.Builder<String, Object> builder = ImmutableMap.builder();\n+\n+        try (Connection connection = connectionFactory.openConnection(identity);\n+                PreparedStatement statement = connection.prepareStatement(\"SELECT data_compression_desc FROM sys.partitions p INNER JOIN sys.tables t ON p.object_id = t.object_id WHERE p.partition_number = 1 AND t.name = ?\")) {\n+            statement.setString(1, tableHandle.getRemoteTableName().getTableName());\n+            try (ResultSet resultSet = statement.executeQuery()) {", "originalCommit": "a430d9bb73177f942294f8bbce7adfeedb0978c9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDI0MjU5NA==", "url": "https://github.com/trinodb/trino/pull/5856#discussion_r524242594", "bodyText": "But for using JDBI we might need inject a ConnectionProvider but for fetching a connection we need to JdbcIdentity", "author": "Praveen2112", "createdAt": "2020-11-16T12:51:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDIyNTg2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDI3MDgxMA==", "url": "https://github.com/trinodb/trino/pull/5856#discussion_r524270810", "bodyText": "i didn't quite get it. Anyway, you can attach jdbi to an existing connector.", "author": "findepi", "createdAt": "2020-11-16T13:35:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDIyNTg2NA=="}], "type": "inlineReview"}, {"oid": "0fb63209c8797965c35cd3ca27a7ef5e60fcf4ae", "url": "https://github.com/trinodb/trino/commit/0fb63209c8797965c35cd3ca27a7ef5e60fcf4ae", "message": "Allow JDBC connector to set table property", "committedDate": "2020-12-17T09:22:43Z", "type": "commit"}, {"oid": "3ac9eabbfac47a061afc6716f864ce912fe6130f", "url": "https://github.com/trinodb/trino/commit/3ac9eabbfac47a061afc6716f864ce912fe6130f", "message": "Add data compression property to SQL Server tables", "committedDate": "2020-12-17T09:52:52Z", "type": "commit"}, {"oid": "3ac9eabbfac47a061afc6716f864ce912fe6130f", "url": "https://github.com/trinodb/trino/commit/3ac9eabbfac47a061afc6716f864ce912fe6130f", "message": "Add data compression property to SQL Server tables", "committedDate": "2020-12-17T09:52:52Z", "type": "forcePushed"}]}