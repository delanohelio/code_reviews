{"pr_number": 3350, "pr_title": "Cleanup in PushProjectionThroughExchange rule", "pr_author": "kasiafi", "pr_createdAt": "2020-04-06T06:22:44Z", "pr_url": "https://github.com/trinodb/trino/pull/3350", "timeline": [{"oid": "3fb03bff84c3ae3bcee07f09c327d83e600b12c5", "url": "https://github.com/trinodb/trino/commit/3fb03bff84c3ae3bcee07f09c327d83e600b12c5", "message": "Minor refactor in PushProjectionThroughExchange rule", "committedDate": "2020-04-05T13:14:59Z", "type": "commit"}, {"oid": "1483f78495dbb7f4621385b29da060878a5b9187", "url": "https://github.com/trinodb/trino/commit/1483f78495dbb7f4621385b29da060878a5b9187", "message": "Fix comments", "committedDate": "2020-04-05T14:42:45Z", "type": "commit"}, {"oid": "9a5da8a2ebe04d72a12240f464318c749ae1d7f3", "url": "https://github.com/trinodb/trino/commit/9a5da8a2ebe04d72a12240f464318c749ae1d7f3", "message": "Use source's symbol for projection instead of output symbol\n\nIn PushProjectionThroughExchange rule, there is a projection\ninserted into the plan between ExchangeNode and each of it's\nsources. The projection is supposed to retain source's hash symbol.\nBefore this change, there was added an identity assignment\non hash symbol from ExchangeNode's output. It was wrong in the\ncase when source used other symbol (with different name) than the\nExchangeNode.\nIt was fixed by using the source's symbol instead.", "committedDate": "2020-04-05T16:29:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg5NjM5Mw==", "url": "https://github.com/trinodb/trino/pull/3350#discussion_r406896393", "body": "This is more functional and idiomatic:\r\n\r\n```suggestion\r\n                Map<Symbol, SymbolReference> translationMap = outputToInputMap.entrySet().stream()\r\n                        .collect(Collectors.toMap(Map.Entry::getKey, entry -> entry.getValue().toSymbolReference()));\r\n```", "bodyText": "This is more functional and idiomatic:\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            ImmutableMap.Builder<Symbol, Expression> translationMap = ImmutableMap.builder();\n          \n          \n            \n                            outputToInputMap.forEach((key, value) -> translationMap.put(key, value.toSymbolReference()));\n          \n          \n            \n                            Expression translatedExpression = inlineSymbols(translationMap.build(), projection.getValue());\n          \n          \n            \n                            Map<Symbol, SymbolReference> translationMap = outputToInputMap.entrySet().stream()\n          \n          \n            \n                                    .collect(Collectors.toMap(Map.Entry::getKey, entry -> entry.getValue().toSymbolReference()));", "bodyHTML": "<p dir=\"auto\">This is more functional and idiomatic:</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                <span class=\"pl-smi\">ImmutableMap</span><span class=\"pl-k\">.</span><span class=\"pl-k\">Builder&lt;<span class=\"pl-smi\">Symbol</span>, <span class=\"pl-smi\">Expression</span>&gt;</span> translationMap <span class=\"pl-k\">=</span> <span class=\"pl-smi\">ImmutableMap</span><span class=\"pl-k\">.</span>builder();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                outputToInputMap<span class=\"pl-k\">.</span>forEach((key, value) <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> translationMap<span class=\"pl-k\">.</span>put(key, value<span class=\"pl-k\">.</span>toSymbolReference()));</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                <span class=\"pl-smi\">Expression</span> translatedExpression <span class=\"pl-k\">=</span> inlineSymbols(translationMap<span class=\"pl-k\">.</span>build(), projection<span class=\"pl-k\">.</span>getValue());</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                <span class=\"pl-k\">Map&lt;<span class=\"pl-smi\">Symbol</span>, <span class=\"pl-smi\">SymbolReference</span>&gt;</span> translationMap <span class=\"pl-k\">=</span> outputToInputMap<span class=\"pl-k\">.</span>entrySet()<span class=\"pl-k\">.</span>stream()</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                        .collect(<span class=\"pl-smi\">Collectors</span><span class=\"pl-k\">.</span>toMap(<span class=\"pl-smi\">Map</span><span class=\"pl-k\">.</span><span class=\"pl-smi\">Entry</span><span class=\"pl-k\">::</span>getKey, entry <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> entry<span class=\"pl-k\">.</span>getValue()<span class=\"pl-k\">.</span>toSymbolReference()));</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "martint", "createdAt": "2020-04-10T18:57:47Z", "path": "presto-main/src/main/java/io/prestosql/sql/planner/iterative/rule/PushProjectionThroughExchange.java", "diffHunk": "@@ -113,15 +112,16 @@ public Result apply(ProjectNode project, Captures captures, Context context)\n                         // do not project the same symbol twice as ExchangeNode verifies that source input symbols match partitioning scheme outputLayout\n                         .filter(symbol -> !partitioningColumns.contains(symbol))\n                         .map(outputToInputMap::get)\n-                        .forEach(nameReference -> {\n-                            Symbol symbol = Symbol.from(nameReference);\n-                            projections.put(symbol, nameReference);\n-                            inputs.add(symbol);\n+                        .forEach(inputSymbol -> {\n+                            projections.put(inputSymbol, inputSymbol.toSymbolReference());\n+                            inputs.add(inputSymbol);\n                         });\n             }\n \n             for (Map.Entry<Symbol, Expression> projection : project.getAssignments().entrySet()) {\n-                Expression translatedExpression = inlineSymbols(outputToInputMap, projection.getValue());\n+                ImmutableMap.Builder<Symbol, Expression> translationMap = ImmutableMap.builder();\n+                outputToInputMap.forEach((key, value) -> translationMap.put(key, value.toSymbolReference()));\n+                Expression translatedExpression = inlineSymbols(translationMap.build(), projection.getValue());", "originalCommit": "3fb03bff84c3ae3bcee07f09c327d83e600b12c5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "e0483cf4842e1410d0843a102ded0a4d721269bf", "url": "https://github.com/trinodb/trino/commit/e0483cf4842e1410d0843a102ded0a4d721269bf", "message": "Fix duplicate symbols in Exchange outputs\n\nIn PushProjectionThroughExchange rule, when the pushed-down\nProjection has an identity assignment on a symbol which is used\nfor partitioning, ordering or as a hash symbol by the Exchange,\nthe symbol is added to Exchange's outputs twice:\n- once as a symbol required by Exchange\n- once as required by the parent Projection\nThis is fixed by skipping the other occurrence", "committedDate": "2020-04-14T13:44:40Z", "type": "commit"}, {"oid": "e0483cf4842e1410d0843a102ded0a4d721269bf", "url": "https://github.com/trinodb/trino/commit/e0483cf4842e1410d0843a102ded0a4d721269bf", "message": "Fix duplicate symbols in Exchange outputs\n\nIn PushProjectionThroughExchange rule, when the pushed-down\nProjection has an identity assignment on a symbol which is used\nfor partitioning, ordering or as a hash symbol by the Exchange,\nthe symbol is added to Exchange's outputs twice:\n- once as a symbol required by Exchange\n- once as required by the parent Projection\nThis is fixed by skipping the other occurrence", "committedDate": "2020-04-14T13:44:40Z", "type": "forcePushed"}]}