{"pr_number": 2632, "pr_title": "Add bogus row to support listing empty catalogs", "pr_author": "Praveen2112", "pr_createdAt": "2020-01-26T11:33:43Z", "pr_url": "https://github.com/trinodb/trino/pull/2632", "timeline": [{"oid": "2366ba797f335045de1fa6d5df2221ae0fc1a2d1", "url": "https://github.com/trinodb/trino/commit/2366ba797f335045de1fa6d5df2221ae0fc1a2d1", "message": "Add bogus row to support listing empty catalogs", "committedDate": "2020-01-29T16:38:10Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzUyNzcyMQ==", "url": "https://github.com/trinodb/trino/pull/2632#discussion_r373527721", "body": "This can be structure as follows. It's simpler and clearer what's going on:\r\n\r\n```java\r\nList<Expression> rows = listCatalogs(session, metadata, accessControl).keySet().stream();\r\n\r\nOptional<Expression> predicate = Optional.empty();\r\nif (rows.isEmpty()) {\r\n    rows = ImmutableList.of(\"\");\r\n    predicate = Optional.of(BooleanLiteral.FALSE_LITERAL);\r\n}\r\nelse if (node.getLikePattern().isPresent()) {\r\n    predicate = Optional.of(new LikePredicate(...));\r\n}\r\n\r\nreturn simpleQuery(...)\r\n```", "bodyText": "This can be structure as follows. It's simpler and clearer what's going on:\nList<Expression> rows = listCatalogs(session, metadata, accessControl).keySet().stream();\n\nOptional<Expression> predicate = Optional.empty();\nif (rows.isEmpty()) {\n    rows = ImmutableList.of(\"\");\n    predicate = Optional.of(BooleanLiteral.FALSE_LITERAL);\n}\nelse if (node.getLikePattern().isPresent()) {\n    predicate = Optional.of(new LikePredicate(...));\n}\n\nreturn simpleQuery(...)", "bodyHTML": "<p dir=\"auto\">This can be structure as follows. It's simpler and clearer what's going on:</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"List&lt;Expression&gt; rows = listCatalogs(session, metadata, accessControl).keySet().stream();\n\nOptional&lt;Expression&gt; predicate = Optional.empty();\nif (rows.isEmpty()) {\n    rows = ImmutableList.of(&quot;&quot;);\n    predicate = Optional.of(BooleanLiteral.FALSE_LITERAL);\n}\nelse if (node.getLikePattern().isPresent()) {\n    predicate = Optional.of(new LikePredicate(...));\n}\n\nreturn simpleQuery(...)\"><pre><span class=\"pl-k\">List&lt;<span class=\"pl-smi\">Expression</span>&gt;</span> rows <span class=\"pl-k\">=</span> listCatalogs(session, metadata, accessControl)<span class=\"pl-k\">.</span>keySet()<span class=\"pl-k\">.</span>stream();\n\n<span class=\"pl-k\">Optional&lt;<span class=\"pl-smi\">Expression</span>&gt;</span> predicate <span class=\"pl-k\">=</span> <span class=\"pl-smi\">Optional</span><span class=\"pl-k\">.</span>empty();\n<span class=\"pl-k\">if</span> (rows<span class=\"pl-k\">.</span>isEmpty()) {\n    rows <span class=\"pl-k\">=</span> <span class=\"pl-smi\">ImmutableList</span><span class=\"pl-k\">.</span>of(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"pl-pds\">\"</span></span>);\n    predicate <span class=\"pl-k\">=</span> <span class=\"pl-smi\">Optional</span><span class=\"pl-k\">.</span>of(<span class=\"pl-smi\">BooleanLiteral</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>FALSE_LITERAL</span>);\n}\n<span class=\"pl-k\">else</span> <span class=\"pl-k\">if</span> (node<span class=\"pl-k\">.</span>getLikePattern()<span class=\"pl-k\">.</span>isPresent()) {\n    predicate <span class=\"pl-k\">=</span> <span class=\"pl-smi\">Optional</span><span class=\"pl-k\">.</span>of(<span class=\"pl-k\">new</span> <span class=\"pl-smi\">LikePredicate</span>(<span class=\"pl-c1\">...</span>));\n}\n\n<span class=\"pl-k\">return</span> simpleQuery(<span class=\"pl-c1\">...</span>)</pre></div>", "author": "martint", "createdAt": "2020-01-31T15:09:10Z", "path": "presto-main/src/main/java/io/prestosql/sql/rewrite/ShowQueriesRewrite.java", "diffHunk": "@@ -341,24 +342,29 @@ protected Node visitShowSchemas(ShowSchemas node, Void context)\n         @Override\n         protected Node visitShowCatalogs(ShowCatalogs node, Void context)\n         {\n-            List<Expression> rows = listCatalogs(session, metadata, accessControl).keySet().stream()\n+            ImmutableList.Builder<Expression> rows = ImmutableList.builder();", "originalCommit": "2366ba797f335045de1fa6d5df2221ae0fc1a2d1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "16c00972603625843a18959fa511fcc14e6fd9bc", "url": "https://github.com/trinodb/trino/commit/16c00972603625843a18959fa511fcc14e6fd9bc", "message": "Add bogus row to support listing empty catalogs", "committedDate": "2020-02-02T05:20:21Z", "type": "commit"}, {"oid": "16c00972603625843a18959fa511fcc14e6fd9bc", "url": "https://github.com/trinodb/trino/commit/16c00972603625843a18959fa511fcc14e6fd9bc", "message": "Add bogus row to support listing empty catalogs", "committedDate": "2020-02-02T05:20:21Z", "type": "forcePushed"}]}