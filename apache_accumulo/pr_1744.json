{"pr_number": 1744, "pr_title": "Use newer map methods in TabletGroupWatcher", "pr_author": "milleruntime", "pr_createdAt": "2020-10-20T20:25:25Z", "pr_url": "https://github.com/apache/accumulo/pull/1744", "timeline": [{"oid": "d23b62584cd01fc95bbffb151a10659862689b9a", "url": "https://github.com/apache/accumulo/commit/d23b62584cd01fc95bbffb151a10659862689b9a", "message": "Use newer map methods in TabletGroupWatcher", "committedDate": "2020-10-20T20:04:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg2MTI4Mg==", "url": "https://github.com/apache/accumulo/pull/1744#discussion_r508861282", "body": "This always constructs the the 'default' `new MergeStats(new MergeInfo()))`, even if already exists in `currentMerges`. To avoid that, you could use the following instead of `getOrDefault`:\r\n\r\n```suggestion\r\n              k -> {\r\n                var mergeStats = currentMerges.get(k);\r\n                return mergeStats != null ? mergeStats : new MergeStats(new MergeInfo());\r\n              });\r\n```", "bodyText": "This always constructs the the 'default' new MergeStats(new MergeInfo())), even if already exists in currentMerges. To avoid that, you could use the following instead of getOrDefault:\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                          k -> currentMerges.getOrDefault(k, new MergeStats(new MergeInfo())));\n          \n          \n            \n                          k -> {\n          \n          \n            \n                            var mergeStats = currentMerges.get(k);\n          \n          \n            \n                            return mergeStats != null ? mergeStats : new MergeStats(new MergeInfo());\n          \n          \n            \n                          });", "bodyHTML": "<p dir=\"auto\">This always constructs the the 'default' <code>new MergeStats(new MergeInfo()))</code>, even if already exists in <code>currentMerges</code>. To avoid that, you could use the following instead of <code>getOrDefault</code>:</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">              k <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> <span class=\"x x-first\">currentMerges</span><span class=\"pl-k x\">.</span><span class=\"x\">getOrDefault(k, </span><span class=\"pl-k x\">new</span><span class=\"x\"> </span><span class=\"pl-smi x\">MergeStats</span><span class=\"x\">(</span><span class=\"pl-k x\">new</span><span class=\"x\"> </span><span class=\"pl-smi x\">MergeInfo</span><span class=\"x x-last\">())));</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">              k <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> <span class=\"x x-first x-last\">{</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                <span class=\"pl-k\">var</span> mergeStats <span class=\"pl-k\">=</span> currentMerges<span class=\"pl-k\">.</span>get(k);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                <span class=\"pl-k\">return</span> mergeStats <span class=\"pl-k\">!=</span> <span class=\"pl-c1\">null</span> <span class=\"pl-k\">?</span> mergeStats <span class=\"pl-k\">:</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">MergeStats</span>(<span class=\"pl-k\">new</span> <span class=\"pl-smi\">MergeInfo</span>());</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">              });</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "ctubbsii", "createdAt": "2020-10-20T21:49:34Z", "path": "server/manager/src/main/java/org/apache/accumulo/master/TabletGroupWatcher.java", "diffHunk": "@@ -214,14 +214,8 @@ public void run() {\n           TableId tableId = tls.extent.tableId();\n           TableConfiguration tableConf = this.master.getContext().getTableConfiguration(tableId);\n \n-          MergeStats mergeStats = mergeStatsCache.get(tableId);\n-          if (mergeStats == null) {\n-            mergeStats = currentMerges.get(tableId);\n-            if (mergeStats == null) {\n-              mergeStats = new MergeStats(new MergeInfo());\n-            }\n-            mergeStatsCache.put(tableId, mergeStats);\n-          }\n+          MergeStats mergeStats = mergeStatsCache.computeIfAbsent(tableId,\n+              k -> currentMerges.getOrDefault(k, new MergeStats(new MergeInfo())));", "originalCommit": "d23b62584cd01fc95bbffb151a10659862689b9a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTM0MDQ1MA==", "url": "https://github.com/apache/accumulo/pull/1744#discussion_r509340450", "bodyText": "Now you got me thinking, how does map.getOrDefault(k, new MergeInfo()) behave differently from log.debug(\"Merge: {}\", new MergeInfo())?  Does slf4j have a special ability to not call the method on the interface based on logging level vs the default method on the Map interface, which will always execute the method?", "author": "milleruntime", "createdAt": "2020-10-21T14:33:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg2MTI4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTM2MTA4OQ==", "url": "https://github.com/apache/accumulo/pull/1744#discussion_r509361089", "bodyText": "I guess I am confusing how sl4j doesn't create unnecessary objects with the creation of an object when it is passed it as a parameter.  If new Object() is passed as a parameter to a method, it will always create the object when the method is executed.", "author": "milleruntime", "createdAt": "2020-10-21T14:57:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg2MTI4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTQzNjIwNA==", "url": "https://github.com/apache/accumulo/pull/1744#discussion_r509436204", "bodyText": "To clarify, this code will throw an exception even at the \"info\" level:\npublic class Slf4jLoggingTest {\n    private static Logger log = LoggerFactory.getLogger(Slf4jLoggingTest.class);\n\n    public static void main(String[] args) {\n        log.info(\"Start main\");\n        log.debug(\"debug called: {}\", expensiveCall());\n        log.info(\"Finished\");\n    }\n    public static String expensiveCall() {\n        if (true)\n            throw new UnsupportedOperationException(\"Do not call\");\n        return \"expensive string\";\n    }\n}\n\nThis code is actually passing a method but its the same idea.  The method will get called to get the string it returns in the same way new Object() will get resolved.", "author": "milleruntime", "createdAt": "2020-10-21T16:37:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg2MTI4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTQ0MTY0Nw==", "url": "https://github.com/apache/accumulo/pull/1744#discussion_r509441647", "bodyText": "With log4j 2 - it appears that lambdas can be used to provide lazy behavior.\nlog.debug(\"debug called: {}\", () -> expensiveCall());\nWould avoid the call if debug level logging was not enabled.", "author": "EdColeman", "createdAt": "2020-10-21T16:45:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg2MTI4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTQ0ODg4Mg==", "url": "https://github.com/apache/accumulo/pull/1744#discussion_r509448882", "bodyText": "This does work if you explicitly call the Log4j2 logger.  Lambdas aren't implemented yet in slf4fj.  There is an alpha version though: https://jira.qos.ch/browse/SLF4J-371", "author": "milleruntime", "createdAt": "2020-10-21T16:56:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg2MTI4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTYwMDcwNw==", "url": "https://github.com/apache/accumulo/pull/1744#discussion_r509600707", "bodyText": "Yeah, the same issue would apply to our slf4j debug statments... which is why we typically wrap stuff in an if block to check the log level .isTraceEnabled() first, to avoid making expensive objects.", "author": "ctubbsii", "createdAt": "2020-10-21T19:13:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg2MTI4Mg=="}], "type": "inlineReview"}, {"oid": "c9db848cb19c83e950f45516786c59e56e9d3364", "url": "https://github.com/apache/accumulo/commit/c9db848cb19c83e950f45516786c59e56e9d3364", "message": "Update server/manager/src/main/java/org/apache/accumulo/master/TabletGroupWatcher.java\n\nCo-authored-by: Christopher Tubbs <ctubbsii@apache.org>", "committedDate": "2020-10-21T16:44:12Z", "type": "commit"}, {"oid": "37fe14a7f63ca065ca2175798bad6a96df298311", "url": "https://github.com/apache/accumulo/commit/37fe14a7f63ca065ca2175798bad6a96df298311", "message": "Fix variable name and format", "committedDate": "2020-10-21T17:05:38Z", "type": "commit"}]}