{"pr_number": 1765, "pr_title": "Issue #1742 - Added forEach to ScannerBase. Added test in ScannerIT.", "pr_author": "cradal", "pr_createdAt": "2020-11-02T18:25:00Z", "pr_url": "https://github.com/apache/accumulo/pull/1765", "timeline": [{"oid": "5b60b8cb384c3cae7d3b5af9c5ecf9c1411d3225", "url": "https://github.com/apache/accumulo/commit/5b60b8cb384c3cae7d3b5af9c5ecf9c1411d3225", "message": "Issue #1742 - Added forEach method in ScannerBase. Added test in ScannerIT.", "committedDate": "2020-11-02T18:21:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjM2Mjk4Ng==", "url": "https://github.com/apache/accumulo/pull/1765#discussion_r516362986", "body": "Needs a `@since 2.1.0` javadoc tag. ", "bodyText": "Needs a @since 2.1.0 javadoc tag.", "bodyHTML": "<p dir=\"auto\">Needs a <code>@since 2.1.0</code> javadoc tag.</p>", "author": "keith-turner", "createdAt": "2020-11-03T00:35:26Z", "path": "core/src/main/java/org/apache/accumulo/core/client/ScannerBase.java", "diffHunk": "@@ -356,4 +357,10 @@ default void fetchColumn(CharSequence colFam, CharSequence colQual) {\n   default void setExecutionHints(Map<String,String> hints) {\n     throw new UnsupportedOperationException();\n   }\n+\n+  default void forEach(BiConsumer<? super Key,? super Value> keyValueConsumer) {", "originalCommit": "5b60b8cb384c3cae7d3b5af9c5ecf9c1411d3225", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "5f7d7007e483fe6ff528b55271fbdb566bca22c3", "url": "https://github.com/apache/accumulo/commit/5f7d7007e483fe6ff528b55271fbdb566bca22c3", "message": "Issue #1742 - Removed test in ScannerIT. Added standalone ScannerBase test.", "committedDate": "2020-11-10T12:10:28Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDcwMjQ3Mg==", "url": "https://github.com/apache/accumulo/pull/1765#discussion_r520702472", "body": "You don't need to compare CF and CQ, you can compare Key equality directly. That will shorten the test code a bit. You also don't need to call `toString()` on anything.\r\n\r\n```suggestion\r\n      Map.Entry<Key,Value> expectedEntry = s.iterator().next();\r\n      assertEquals(expectedEntry.getKey(), entry.getKey());\r\n      assertEquals(expectedEntry.getValue(), entry.getValue());\r\n```", "bodyText": "You don't need to compare CF and CQ, you can compare Key equality directly. That will shorten the test code a bit. You also don't need to call toString() on anything.\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  Map.Entry<Key,Value> expectedEntry = s.iterator().next();\n          \n          \n            \n                  Key expectedKey = expectedEntry.getKey();\n          \n          \n            \n                  Value expectedValue = expectedEntry.getValue();\n          \n          \n            \n            \n          \n          \n            \n                  String expectedCf = expectedKey.getColumnFamily().toString();\n          \n          \n            \n                  String actualCf = entry.getKey().getColumnFamily().toString();\n          \n          \n            \n            \n          \n          \n            \n                  String expectedCq = expectedKey.getColumnQualifier().toString();\n          \n          \n            \n                  String actualCq = entry.getKey().getColumnQualifier().toString();\n          \n          \n            \n            \n          \n          \n            \n                  String expectedVal = expectedValue.toString();\n          \n          \n            \n                  String actualVal = entry.getValue().toString();\n          \n          \n            \n            \n          \n          \n            \n                  assertEquals(expectedCf, actualCf);\n          \n          \n            \n                  assertEquals(expectedCq, actualCq);\n          \n          \n            \n                  assertEquals(expectedVal, actualVal);\n          \n          \n            \n                  Map.Entry<Key,Value> expectedEntry = s.iterator().next();\n          \n          \n            \n                  assertEquals(expectedEntry.getKey(), entry.getKey());\n          \n          \n            \n                  assertEquals(expectedEntry.getValue(), entry.getValue());", "bodyHTML": "<p dir=\"auto\">You don't need to compare CF and CQ, you can compare Key equality directly. That will shorten the test code a bit. You also don't need to call <code>toString()</code> on anything.</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">      <span class=\"pl-smi\">Map</span><span class=\"pl-k\">.</span><span class=\"pl-k\">Entry&lt;<span class=\"pl-smi\">Key</span>,<span class=\"pl-smi\">Value</span>&gt;</span> expectedEntry <span class=\"pl-k\">=</span> s<span class=\"pl-k\">.</span>iterator()<span class=\"pl-k\">.</span>next();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">      <span class=\"pl-smi\">Key</span> expectedKey <span class=\"pl-k\">=</span> expectedEntry<span class=\"pl-k\">.</span>getKey();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">      <span class=\"pl-smi\">Value</span> expectedValue <span class=\"pl-k\">=</span> expectedEntry<span class=\"pl-k\">.</span>getValue();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">      <span class=\"pl-smi\">String</span> expectedCf <span class=\"pl-k\">=</span> expectedKey<span class=\"pl-k\">.</span>getColumnFamily()<span class=\"pl-k\">.</span>toString();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">      <span class=\"pl-smi\">String</span> actualCf <span class=\"pl-k\">=</span> entry<span class=\"pl-k\">.</span>getKey()<span class=\"pl-k\">.</span>getColumnFamily()<span class=\"pl-k\">.</span>toString();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">      <span class=\"pl-smi\">String</span> expectedCq <span class=\"pl-k\">=</span> expectedKey<span class=\"pl-k\">.</span>getColumnQualifier()<span class=\"pl-k\">.</span>toString();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">      <span class=\"pl-smi\">String</span> actualCq <span class=\"pl-k\">=</span> entry<span class=\"pl-k\">.</span>getKey()<span class=\"pl-k\">.</span>getColumnQualifier()<span class=\"pl-k\">.</span>toString();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">      <span class=\"pl-smi\">String</span> expectedVal <span class=\"pl-k\">=</span> expectedValue<span class=\"pl-k\">.</span>toString();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">      <span class=\"pl-smi\">String</span> actualVal <span class=\"pl-k\">=</span> entry<span class=\"pl-k\">.</span>getValue()<span class=\"pl-k\">.</span>toString();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">      assertEquals(expectedCf, actualCf);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">      assertEquals(expectedCq, actualCq);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">      assertEquals(expectedVal, actualVal);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">      <span class=\"pl-smi\">Map</span><span class=\"pl-k\">.</span><span class=\"pl-k\">Entry&lt;<span class=\"pl-smi\">Key</span>,<span class=\"pl-smi\">Value</span>&gt;</span> expectedEntry <span class=\"pl-k\">=</span> s<span class=\"pl-k\">.</span>iterator()<span class=\"pl-k\">.</span>next();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">      assertEquals(expectedEntry<span class=\"pl-k\">.</span>getKey(), entry<span class=\"pl-k\">.</span>getKey());</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">      assertEquals(expectedEntry<span class=\"pl-k\">.</span>getValue(), entry<span class=\"pl-k\">.</span>getValue());</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "ctubbsii", "createdAt": "2020-11-10T16:34:35Z", "path": "core/src/test/java/org/apache/accumulo/core/clientImpl/ScannerBaseTest.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.accumulo.core.clientImpl;\n+\n+import static org.easymock.EasyMock.createMock;\n+import static org.easymock.EasyMock.expect;\n+import static org.easymock.EasyMock.replay;\n+import static org.junit.Assert.assertEquals;\n+\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.function.BiConsumer;\n+\n+import org.apache.accumulo.core.client.ScannerBase;\n+import org.apache.accumulo.core.data.Key;\n+import org.apache.accumulo.core.data.Value;\n+import org.apache.hadoop.io.Text;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class ScannerBaseTest {\n+\n+  private ScannerBase s;\n+  private Map<Key,Value> scannerMap;\n+  private Iterator<Map.Entry<Key,Value>> it;\n+  private Key key;\n+  private Value val;\n+  private BiConsumer<Key,Value> keyValueConsumer;\n+  private forEachTester fet;\n+\n+  private static class forEachTester {\n+\n+    private Map<Key,Value> map;\n+\n+    forEachTester(Map<Key,Value> map) {\n+      this.map = map;\n+    }\n+\n+    public void forEach(BiConsumer<? super Key,? super Value> keyValueConsumer) {\n+      for (Map.Entry<Key,Value> entry : this.map.entrySet()) {\n+        keyValueConsumer.accept(entry.getKey(), entry.getValue());\n+      }\n+    }\n+  }\n+\n+  @Before\n+  public void setUp() throws Exception {\n+    s = createMock(ScannerBase.class);\n+  }\n+\n+  @Test\n+  public void testScannerBaseForEach() throws Exception {\n+    key = new Key(new Text(\"a\"), new Text(\"cf1\"), new Text(\"cq1\"));\n+    val = new Value(new Text(\"v1\"));\n+    scannerMap = new HashMap<>();\n+\n+    scannerMap.put(key, val);\n+\n+    fet = new forEachTester(scannerMap);\n+\n+    it = scannerMap.entrySet().iterator();\n+\n+    expect(s.iterator()).andReturn(it).times(3);\n+    replay(s);\n+\n+    Map<Key,Value> map = new HashMap<>();\n+\n+    class MyBiConsumer implements BiConsumer<Key,Value> {\n+      @Override\n+      public void accept(Key key, Value value) {\n+        map.put(key, value);\n+      }\n+    }\n+\n+    keyValueConsumer = new MyBiConsumer();\n+\n+    fet.forEach(keyValueConsumer);\n+\n+    // Test the Scanner values put into the map via keyValueConsumer\n+\n+    for (Map.Entry<Key,Value> entry : map.entrySet()) {\n+      Map.Entry<Key,Value> expectedEntry = s.iterator().next();\n+      Key expectedKey = expectedEntry.getKey();\n+      Value expectedValue = expectedEntry.getValue();\n+\n+      String expectedCf = expectedKey.getColumnFamily().toString();\n+      String actualCf = entry.getKey().getColumnFamily().toString();\n+\n+      String expectedCq = expectedKey.getColumnQualifier().toString();\n+      String actualCq = entry.getKey().getColumnQualifier().toString();\n+\n+      String expectedVal = expectedValue.toString();\n+      String actualVal = entry.getValue().toString();\n+\n+      assertEquals(expectedCf, actualCf);\n+      assertEquals(expectedCq, actualCq);\n+      assertEquals(expectedVal, actualVal);", "originalCommit": "5f7d7007e483fe6ff528b55271fbdb566bca22c3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDcwNDAxNA==", "url": "https://github.com/apache/accumulo/pull/1765#discussion_r520704014", "body": "I don't think most (if any) of these should be class members. They can be local variables in the test case.", "bodyText": "I don't think most (if any) of these should be class members. They can be local variables in the test case.", "bodyHTML": "<p dir=\"auto\">I don't think most (if any) of these should be class members. They can be local variables in the test case.</p>", "author": "ctubbsii", "createdAt": "2020-11-10T16:36:36Z", "path": "core/src/test/java/org/apache/accumulo/core/clientImpl/ScannerBaseTest.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.accumulo.core.clientImpl;\n+\n+import static org.easymock.EasyMock.createMock;\n+import static org.easymock.EasyMock.expect;\n+import static org.easymock.EasyMock.replay;\n+import static org.junit.Assert.assertEquals;\n+\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.function.BiConsumer;\n+\n+import org.apache.accumulo.core.client.ScannerBase;\n+import org.apache.accumulo.core.data.Key;\n+import org.apache.accumulo.core.data.Value;\n+import org.apache.hadoop.io.Text;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class ScannerBaseTest {\n+\n+  private ScannerBase s;\n+  private Map<Key,Value> scannerMap;\n+  private Iterator<Map.Entry<Key,Value>> it;\n+  private Key key;\n+  private Value val;\n+  private BiConsumer<Key,Value> keyValueConsumer;\n+  private forEachTester fet;", "originalCommit": "5f7d7007e483fe6ff528b55271fbdb566bca22c3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDcwNTQ1Mg==", "url": "https://github.com/apache/accumulo/pull/1765#discussion_r520705452", "body": "```suggestion\r\n    Map<Key,Value> map = new HashMap<>();\r\n    fet.forEach((k,v) -> map.put(k,v));\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                Map<Key,Value> map = new HashMap<>();\n          \n          \n            \n            \n          \n          \n            \n                class MyBiConsumer implements BiConsumer<Key,Value> {\n          \n          \n            \n                  @Override\n          \n          \n            \n                  public void accept(Key key, Value value) {\n          \n          \n            \n                    map.put(key, value);\n          \n          \n            \n                  }\n          \n          \n            \n                }\n          \n          \n            \n            \n          \n          \n            \n                keyValueConsumer = new MyBiConsumer();\n          \n          \n            \n            \n          \n          \n            \n                fet.forEach(keyValueConsumer);\n          \n          \n            \n                Map<Key,Value> map = new HashMap<>();\n          \n          \n            \n                fet.forEach((k,v) -> map.put(k,v));", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">Map&lt;<span class=\"pl-smi\">Key</span>,<span class=\"pl-smi\">Value</span>&gt;</span> map <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-k\">HashMap&lt;&gt;</span>();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">class</span> <span class=\"pl-en\">MyBiConsumer</span> <span class=\"pl-k\">implements</span> <span class=\"pl-e\">BiConsumer&lt;<span class=\"pl-smi\">Key</span>,<span class=\"pl-smi\">Value</span>&gt;</span> {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">      <span class=\"pl-k\">@Override</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">      <span class=\"pl-k\">public</span> <span class=\"pl-k\">void</span> accept(<span class=\"pl-smi\">Key</span> key, <span class=\"pl-smi\">Value</span> value) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        map<span class=\"pl-k\">.</span>put(key, value);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">      }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    keyValueConsumer <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">MyBiConsumer</span>();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    fet<span class=\"pl-k\">.</span>forEach(keyValueConsumer);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">Map&lt;<span class=\"pl-smi\">Key</span>,<span class=\"pl-smi\">Value</span>&gt;</span> map <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-k\">HashMap&lt;&gt;</span>();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    fet<span class=\"pl-k\">.</span>forEach((k,v) <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> map<span class=\"pl-k\">.</span>put(k,v));</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "ctubbsii", "createdAt": "2020-11-10T16:38:38Z", "path": "core/src/test/java/org/apache/accumulo/core/clientImpl/ScannerBaseTest.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.accumulo.core.clientImpl;\n+\n+import static org.easymock.EasyMock.createMock;\n+import static org.easymock.EasyMock.expect;\n+import static org.easymock.EasyMock.replay;\n+import static org.junit.Assert.assertEquals;\n+\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.function.BiConsumer;\n+\n+import org.apache.accumulo.core.client.ScannerBase;\n+import org.apache.accumulo.core.data.Key;\n+import org.apache.accumulo.core.data.Value;\n+import org.apache.hadoop.io.Text;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class ScannerBaseTest {\n+\n+  private ScannerBase s;\n+  private Map<Key,Value> scannerMap;\n+  private Iterator<Map.Entry<Key,Value>> it;\n+  private Key key;\n+  private Value val;\n+  private BiConsumer<Key,Value> keyValueConsumer;\n+  private forEachTester fet;\n+\n+  private static class forEachTester {\n+\n+    private Map<Key,Value> map;\n+\n+    forEachTester(Map<Key,Value> map) {\n+      this.map = map;\n+    }\n+\n+    public void forEach(BiConsumer<? super Key,? super Value> keyValueConsumer) {\n+      for (Map.Entry<Key,Value> entry : this.map.entrySet()) {\n+        keyValueConsumer.accept(entry.getKey(), entry.getValue());\n+      }\n+    }\n+  }\n+\n+  @Before\n+  public void setUp() throws Exception {\n+    s = createMock(ScannerBase.class);\n+  }\n+\n+  @Test\n+  public void testScannerBaseForEach() throws Exception {\n+    key = new Key(new Text(\"a\"), new Text(\"cf1\"), new Text(\"cq1\"));\n+    val = new Value(new Text(\"v1\"));\n+    scannerMap = new HashMap<>();\n+\n+    scannerMap.put(key, val);\n+\n+    fet = new forEachTester(scannerMap);\n+\n+    it = scannerMap.entrySet().iterator();\n+\n+    expect(s.iterator()).andReturn(it).times(3);\n+    replay(s);\n+\n+    Map<Key,Value> map = new HashMap<>();\n+\n+    class MyBiConsumer implements BiConsumer<Key,Value> {\n+      @Override\n+      public void accept(Key key, Value value) {\n+        map.put(key, value);\n+      }\n+    }\n+\n+    keyValueConsumer = new MyBiConsumer();\n+\n+    fet.forEach(keyValueConsumer);", "originalCommit": "5f7d7007e483fe6ff528b55271fbdb566bca22c3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDcwNTcyMQ==", "url": "https://github.com/apache/accumulo/pull/1765#discussion_r520705721", "body": "Should verify mock objects at the end of the test.", "bodyText": "Should verify mock objects at the end of the test.", "bodyHTML": "<p dir=\"auto\">Should verify mock objects at the end of the test.</p>", "author": "ctubbsii", "createdAt": "2020-11-10T16:39:03Z", "path": "core/src/test/java/org/apache/accumulo/core/clientImpl/ScannerBaseTest.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.accumulo.core.clientImpl;\n+\n+import static org.easymock.EasyMock.createMock;\n+import static org.easymock.EasyMock.expect;\n+import static org.easymock.EasyMock.replay;\n+import static org.junit.Assert.assertEquals;\n+\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.function.BiConsumer;\n+\n+import org.apache.accumulo.core.client.ScannerBase;\n+import org.apache.accumulo.core.data.Key;\n+import org.apache.accumulo.core.data.Value;\n+import org.apache.hadoop.io.Text;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class ScannerBaseTest {\n+\n+  private ScannerBase s;\n+  private Map<Key,Value> scannerMap;\n+  private Iterator<Map.Entry<Key,Value>> it;\n+  private Key key;\n+  private Value val;\n+  private BiConsumer<Key,Value> keyValueConsumer;\n+  private forEachTester fet;\n+\n+  private static class forEachTester {\n+\n+    private Map<Key,Value> map;\n+\n+    forEachTester(Map<Key,Value> map) {\n+      this.map = map;\n+    }\n+\n+    public void forEach(BiConsumer<? super Key,? super Value> keyValueConsumer) {\n+      for (Map.Entry<Key,Value> entry : this.map.entrySet()) {\n+        keyValueConsumer.accept(entry.getKey(), entry.getValue());\n+      }\n+    }\n+  }\n+\n+  @Before\n+  public void setUp() throws Exception {\n+    s = createMock(ScannerBase.class);\n+  }\n+\n+  @Test\n+  public void testScannerBaseForEach() throws Exception {\n+    key = new Key(new Text(\"a\"), new Text(\"cf1\"), new Text(\"cq1\"));\n+    val = new Value(new Text(\"v1\"));\n+    scannerMap = new HashMap<>();\n+\n+    scannerMap.put(key, val);\n+\n+    fet = new forEachTester(scannerMap);\n+\n+    it = scannerMap.entrySet().iterator();\n+\n+    expect(s.iterator()).andReturn(it).times(3);\n+    replay(s);\n+\n+    Map<Key,Value> map = new HashMap<>();\n+\n+    class MyBiConsumer implements BiConsumer<Key,Value> {\n+      @Override\n+      public void accept(Key key, Value value) {\n+        map.put(key, value);\n+      }\n+    }\n+\n+    keyValueConsumer = new MyBiConsumer();\n+\n+    fet.forEach(keyValueConsumer);\n+\n+    // Test the Scanner values put into the map via keyValueConsumer\n+\n+    for (Map.Entry<Key,Value> entry : map.entrySet()) {\n+      Map.Entry<Key,Value> expectedEntry = s.iterator().next();\n+      Key expectedKey = expectedEntry.getKey();\n+      Value expectedValue = expectedEntry.getValue();\n+\n+      String expectedCf = expectedKey.getColumnFamily().toString();\n+      String actualCf = entry.getKey().getColumnFamily().toString();\n+\n+      String expectedCq = expectedKey.getColumnQualifier().toString();\n+      String actualCq = entry.getKey().getColumnQualifier().toString();\n+\n+      String expectedVal = expectedValue.toString();\n+      String actualVal = entry.getValue().toString();\n+\n+      assertEquals(expectedCf, actualCf);\n+      assertEquals(expectedCq, actualCq);\n+      assertEquals(expectedVal, actualVal);\n+    }", "originalCommit": "5f7d7007e483fe6ff528b55271fbdb566bca22c3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDcwNjEyMA==", "url": "https://github.com/apache/accumulo/pull/1765#discussion_r520706120", "body": "This can be done in the test. It doesn't need to be here, unless it's common code for multiple tests.", "bodyText": "This can be done in the test. It doesn't need to be here, unless it's common code for multiple tests.", "bodyHTML": "<p dir=\"auto\">This can be done in the test. It doesn't need to be here, unless it's common code for multiple tests.</p>", "author": "ctubbsii", "createdAt": "2020-11-10T16:39:34Z", "path": "core/src/test/java/org/apache/accumulo/core/clientImpl/ScannerBaseTest.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.accumulo.core.clientImpl;\n+\n+import static org.easymock.EasyMock.createMock;\n+import static org.easymock.EasyMock.expect;\n+import static org.easymock.EasyMock.replay;\n+import static org.junit.Assert.assertEquals;\n+\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.function.BiConsumer;\n+\n+import org.apache.accumulo.core.client.ScannerBase;\n+import org.apache.accumulo.core.data.Key;\n+import org.apache.accumulo.core.data.Value;\n+import org.apache.hadoop.io.Text;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class ScannerBaseTest {\n+\n+  private ScannerBase s;\n+  private Map<Key,Value> scannerMap;\n+  private Iterator<Map.Entry<Key,Value>> it;\n+  private Key key;\n+  private Value val;\n+  private BiConsumer<Key,Value> keyValueConsumer;\n+  private forEachTester fet;\n+\n+  private static class forEachTester {\n+\n+    private Map<Key,Value> map;\n+\n+    forEachTester(Map<Key,Value> map) {\n+      this.map = map;\n+    }\n+\n+    public void forEach(BiConsumer<? super Key,? super Value> keyValueConsumer) {\n+      for (Map.Entry<Key,Value> entry : this.map.entrySet()) {\n+        keyValueConsumer.accept(entry.getKey(), entry.getValue());\n+      }\n+    }\n+  }\n+\n+  @Before\n+  public void setUp() throws Exception {\n+    s = createMock(ScannerBase.class);\n+  }", "originalCommit": "5f7d7007e483fe6ff528b55271fbdb566bca22c3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "126c53fb1168faa72a1587bf2682663a3b10b12c", "url": "https://github.com/apache/accumulo/commit/126c53fb1168faa72a1587bf2682663a3b10b12c", "message": "Issue #1742 - Updated test.", "committedDate": "2020-11-10T19:24:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg2OTExMg==", "url": "https://github.com/apache/accumulo/pull/1765#discussion_r520869112", "body": "Didn't notice this before, but Java class names should start uppercase.\r\n```suggestion\r\n  private static class ForEachTester {\r\n```", "bodyText": "Didn't notice this before, but Java class names should start uppercase.\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private static class forEachTester {\n          \n          \n            \n              private static class ForEachTester {", "bodyHTML": "<p dir=\"auto\">Didn't notice this before, but Java class names should start uppercase.</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">  <span class=\"pl-k\">private</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">class</span> <span class=\"pl-en x x-first x-last\">forEachTester</span> {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">  <span class=\"pl-k\">private</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">class</span> <span class=\"pl-en x x-first x-last\">ForEachTester</span> {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "ctubbsii", "createdAt": "2020-11-10T20:57:17Z", "path": "core/src/test/java/org/apache/accumulo/core/clientImpl/ScannerBaseTest.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.accumulo.core.clientImpl;\n+\n+import static org.easymock.EasyMock.createMock;\n+import static org.easymock.EasyMock.expect;\n+import static org.easymock.EasyMock.replay;\n+import static org.easymock.EasyMock.verify;\n+import static org.junit.Assert.assertEquals;\n+\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.function.BiConsumer;\n+\n+import org.apache.accumulo.core.client.ScannerBase;\n+import org.apache.accumulo.core.data.Key;\n+import org.apache.accumulo.core.data.Value;\n+import org.apache.hadoop.io.Text;\n+import org.junit.Test;\n+\n+public class ScannerBaseTest {\n+\n+  private static class forEachTester {", "originalCommit": "126c53fb1168faa72a1587bf2682663a3b10b12c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg3NDY4Nw==", "url": "https://github.com/apache/accumulo/pull/1765#discussion_r520874687", "bodyText": "Later comment makes this suggestion unnecessary. The class isn't needed at all.", "author": "ctubbsii", "createdAt": "2020-11-10T21:08:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg2OTExMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg3MTYzNg==", "url": "https://github.com/apache/accumulo/pull/1765#discussion_r520871636", "body": "```suggestion\r\n    ScannerBase s = createMock(ScannerBase.class);\r\n    Map<Key,Value> scannerMap = new HashMap<>();\r\n    scannerMap.put(new Key(new Text(\"a\"), new Text(\"cf1\"), new Text(\"cq1\")), new Value(new Text(\"v1\")));\r\n    scannerMap.put(new Key(new Text(\"b\"), new Text(\"cf1\"), new Text(\"cq1\")), new Value(new Text(\"v2\")));\r\n    ForEachTester fet = new ForEachTester(scannerMap);\r\n\r\n    Iterator<Map.Entry<Key,Value>> it = scannerMap.entrySet().iterator();\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                ScannerBase s;\n          \n          \n            \n                Map<Key,Value> scannerMap;\n          \n          \n            \n                Iterator<Map.Entry<Key,Value>> it;\n          \n          \n            \n                Key key;\n          \n          \n            \n                Value val;\n          \n          \n            \n                BiConsumer<Key,Value> keyValueConsumer;\n          \n          \n            \n                forEachTester fet;\n          \n          \n            \n            \n          \n          \n            \n                s = createMock(ScannerBase.class);\n          \n          \n            \n                key = new Key(new Text(\"a\"), new Text(\"cf1\"), new Text(\"cq1\"));\n          \n          \n            \n                val = new Value(new Text(\"v1\"));\n          \n          \n            \n                scannerMap = new HashMap<>();\n          \n          \n            \n            \n          \n          \n            \n                scannerMap.put(key, val);\n          \n          \n            \n            \n          \n          \n            \n                fet = new forEachTester(scannerMap);\n          \n          \n            \n            \n          \n          \n            \n                it = scannerMap.entrySet().iterator();\n          \n          \n            \n                ScannerBase s = createMock(ScannerBase.class);\n          \n          \n            \n                Map<Key,Value> scannerMap = new HashMap<>();\n          \n          \n            \n                scannerMap.put(new Key(new Text(\"a\"), new Text(\"cf1\"), new Text(\"cq1\")), new Value(new Text(\"v1\")));\n          \n          \n            \n                scannerMap.put(new Key(new Text(\"b\"), new Text(\"cf1\"), new Text(\"cq1\")), new Value(new Text(\"v2\")));\n          \n          \n            \n                ForEachTester fet = new ForEachTester(scannerMap);\n          \n          \n            \n            \n          \n          \n            \n                Iterator<Map.Entry<Key,Value>> it = scannerMap.entrySet().iterator();", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-smi\">ScannerBase</span> s;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">Map&lt;<span class=\"pl-smi\">Key</span>,<span class=\"pl-smi\">Value</span>&gt;</span> scannerMap;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">Iterator&lt;<span class=\"pl-smi\">Map</span>.Entry&lt;<span class=\"pl-smi\">Key</span>,<span class=\"pl-smi\">Value</span>&gt;</span><span class=\"pl-k\">&gt;</span> it;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-smi\">Key</span> key;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-smi\">Value</span> val;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">BiConsumer&lt;<span class=\"pl-smi\">Key</span>,<span class=\"pl-smi\">Value</span>&gt;</span> keyValueConsumer;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    forEachTester fet;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    s <span class=\"pl-k\">=</span> createMock(<span class=\"pl-smi\">ScannerBase</span><span class=\"pl-k\">.</span>class);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    key <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">Key</span>(<span class=\"pl-k\">new</span> <span class=\"pl-smi\">Text</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>a<span class=\"pl-pds\">\"</span></span>), <span class=\"pl-k\">new</span> <span class=\"pl-smi\">Text</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>cf1<span class=\"pl-pds\">\"</span></span>), <span class=\"pl-k\">new</span> <span class=\"pl-smi\">Text</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>cq1<span class=\"pl-pds\">\"</span></span>));</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    val <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">Value</span>(<span class=\"pl-k\">new</span> <span class=\"pl-smi\">Text</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>v1<span class=\"pl-pds\">\"</span></span>));</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    scannerMap <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-k\">HashMap&lt;&gt;</span>();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    scannerMap<span class=\"pl-k\">.</span>put(key, val);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    fet <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> forEachTester(scannerMap);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    it <span class=\"pl-k\">=</span> scannerMap<span class=\"pl-k\">.</span>entrySet()<span class=\"pl-k\">.</span>iterator();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-smi\">ScannerBase</span> s <span class=\"pl-k\">=</span> createMock(<span class=\"pl-smi\">ScannerBase</span><span class=\"pl-k\">.</span>class);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">Map&lt;<span class=\"pl-smi\">Key</span>,<span class=\"pl-smi\">Value</span>&gt;</span> scannerMap <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-k\">HashMap&lt;&gt;</span>();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    scannerMap<span class=\"pl-k\">.</span>put(<span class=\"pl-k\">new</span> <span class=\"pl-smi\">Key</span>(<span class=\"pl-k\">new</span> <span class=\"pl-smi\">Text</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>a<span class=\"pl-pds\">\"</span></span>), <span class=\"pl-k\">new</span> <span class=\"pl-smi\">Text</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>cf1<span class=\"pl-pds\">\"</span></span>), <span class=\"pl-k\">new</span> <span class=\"pl-smi\">Text</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>cq1<span class=\"pl-pds\">\"</span></span>)), <span class=\"pl-k\">new</span> <span class=\"pl-smi\">Value</span>(<span class=\"pl-k\">new</span> <span class=\"pl-smi\">Text</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>v1<span class=\"pl-pds\">\"</span></span>)));</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    scannerMap<span class=\"pl-k\">.</span>put(<span class=\"pl-k\">new</span> <span class=\"pl-smi\">Key</span>(<span class=\"pl-k\">new</span> <span class=\"pl-smi\">Text</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>b<span class=\"pl-pds\">\"</span></span>), <span class=\"pl-k\">new</span> <span class=\"pl-smi\">Text</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>cf1<span class=\"pl-pds\">\"</span></span>), <span class=\"pl-k\">new</span> <span class=\"pl-smi\">Text</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>cq1<span class=\"pl-pds\">\"</span></span>)), <span class=\"pl-k\">new</span> <span class=\"pl-smi\">Value</span>(<span class=\"pl-k\">new</span> <span class=\"pl-smi\">Text</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>v2<span class=\"pl-pds\">\"</span></span>)));</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-smi\">ForEachTester</span> fet <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">ForEachTester</span>(scannerMap);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\"></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">Iterator&lt;<span class=\"pl-smi\">Map</span>.Entry&lt;<span class=\"pl-smi\">Key</span>,<span class=\"pl-smi\">Value</span>&gt;</span><span class=\"pl-k\">&gt;</span> it <span class=\"pl-k\">=</span> scannerMap<span class=\"pl-k\">.</span>entrySet()<span class=\"pl-k\">.</span>iterator();</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "ctubbsii", "createdAt": "2020-11-10T21:02:04Z", "path": "core/src/test/java/org/apache/accumulo/core/clientImpl/ScannerBaseTest.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.accumulo.core.clientImpl;\n+\n+import static org.easymock.EasyMock.createMock;\n+import static org.easymock.EasyMock.expect;\n+import static org.easymock.EasyMock.replay;\n+import static org.easymock.EasyMock.verify;\n+import static org.junit.Assert.assertEquals;\n+\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.function.BiConsumer;\n+\n+import org.apache.accumulo.core.client.ScannerBase;\n+import org.apache.accumulo.core.data.Key;\n+import org.apache.accumulo.core.data.Value;\n+import org.apache.hadoop.io.Text;\n+import org.junit.Test;\n+\n+public class ScannerBaseTest {\n+\n+  private static class forEachTester {\n+\n+    private Map<Key,Value> map;\n+\n+    forEachTester(Map<Key,Value> map) {\n+      this.map = map;\n+    }\n+\n+    public void forEach(BiConsumer<? super Key,? super Value> keyValueConsumer) {\n+      for (Map.Entry<Key,Value> entry : this.map.entrySet()) {\n+        keyValueConsumer.accept(entry.getKey(), entry.getValue());\n+      }\n+    }\n+  }\n+\n+  @Test\n+  public void testScannerBaseForEach() throws Exception {\n+\n+    ScannerBase s;\n+    Map<Key,Value> scannerMap;\n+    Iterator<Map.Entry<Key,Value>> it;\n+    Key key;\n+    Value val;\n+    BiConsumer<Key,Value> keyValueConsumer;\n+    forEachTester fet;\n+\n+    s = createMock(ScannerBase.class);\n+    key = new Key(new Text(\"a\"), new Text(\"cf1\"), new Text(\"cq1\"));\n+    val = new Value(new Text(\"v1\"));\n+    scannerMap = new HashMap<>();\n+\n+    scannerMap.put(key, val);\n+\n+    fet = new forEachTester(scannerMap);\n+\n+    it = scannerMap.entrySet().iterator();", "originalCommit": "126c53fb1168faa72a1587bf2682663a3b10b12c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg3MzUxNA==", "url": "https://github.com/apache/accumulo/pull/1765#discussion_r520873514", "body": "After simplifying a bit myself, it seems like that the `forEach` concept is being tested on the `ForEachTester` object, but the test is never actually calling the `ScannerBase.forEach` method... which is the method that this test case should be covering.\r\n\r\nIt would be better if `ScannerBase` was a partial mock... overriding `iterator()` (as you've already done), but leaving the implementation of `forEach` alone, and calling that in your test. The `ForEachTester` class doesn't seem necessary at all. It can simply be deleted.", "bodyText": "After simplifying a bit myself, it seems like that the forEach concept is being tested on the ForEachTester object, but the test is never actually calling the ScannerBase.forEach method... which is the method that this test case should be covering.\nIt would be better if ScannerBase was a partial mock... overriding iterator() (as you've already done), but leaving the implementation of forEach alone, and calling that in your test. The ForEachTester class doesn't seem necessary at all. It can simply be deleted.", "bodyHTML": "<p dir=\"auto\">After simplifying a bit myself, it seems like that the <code>forEach</code> concept is being tested on the <code>ForEachTester</code> object, but the test is never actually calling the <code>ScannerBase.forEach</code> method... which is the method that this test case should be covering.</p>\n<p dir=\"auto\">It would be better if <code>ScannerBase</code> was a partial mock... overriding <code>iterator()</code> (as you've already done), but leaving the implementation of <code>forEach</code> alone, and calling that in your test. The <code>ForEachTester</code> class doesn't seem necessary at all. It can simply be deleted.</p>", "author": "ctubbsii", "createdAt": "2020-11-10T21:05:50Z", "path": "core/src/test/java/org/apache/accumulo/core/clientImpl/ScannerBaseTest.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.accumulo.core.clientImpl;\n+\n+import static org.easymock.EasyMock.createMock;\n+import static org.easymock.EasyMock.expect;\n+import static org.easymock.EasyMock.replay;\n+import static org.easymock.EasyMock.verify;\n+import static org.junit.Assert.assertEquals;\n+\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.function.BiConsumer;\n+\n+import org.apache.accumulo.core.client.ScannerBase;\n+import org.apache.accumulo.core.data.Key;\n+import org.apache.accumulo.core.data.Value;\n+import org.apache.hadoop.io.Text;\n+import org.junit.Test;\n+\n+public class ScannerBaseTest {\n+\n+  private static class forEachTester {\n+\n+    private Map<Key,Value> map;\n+\n+    forEachTester(Map<Key,Value> map) {\n+      this.map = map;\n+    }\n+\n+    public void forEach(BiConsumer<? super Key,? super Value> keyValueConsumer) {\n+      for (Map.Entry<Key,Value> entry : this.map.entrySet()) {\n+        keyValueConsumer.accept(entry.getKey(), entry.getValue());\n+      }\n+    }\n+  }\n+\n+  @Test\n+  public void testScannerBaseForEach() throws Exception {\n+\n+    ScannerBase s;\n+    Map<Key,Value> scannerMap;\n+    Iterator<Map.Entry<Key,Value>> it;\n+    Key key;\n+    Value val;\n+    BiConsumer<Key,Value> keyValueConsumer;\n+    forEachTester fet;\n+\n+    s = createMock(ScannerBase.class);\n+    key = new Key(new Text(\"a\"), new Text(\"cf1\"), new Text(\"cq1\"));\n+    val = new Value(new Text(\"v1\"));\n+    scannerMap = new HashMap<>();\n+\n+    scannerMap.put(key, val);\n+\n+    fet = new forEachTester(scannerMap);\n+\n+    it = scannerMap.entrySet().iterator();\n+\n+    expect(s.iterator()).andReturn(it).times(1);\n+    replay(s);\n+\n+    Map<Key,Value> map = new HashMap<>();\n+    fet.forEach(map::put);", "originalCommit": "126c53fb1168faa72a1587bf2682663a3b10b12c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "dc1755fdec7b0366f738f6b0e2db73f16b21d776", "url": "https://github.com/apache/accumulo/commit/dc1755fdec7b0366f738f6b0e2db73f16b21d776", "message": "Issue #1742 - Removed mocks. Created ScannerBase subclass for test.", "committedDate": "2020-11-17T18:49:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQyMjQ5OQ==", "url": "https://github.com/apache/accumulo/pull/1765#discussion_r525422499", "body": "Extending List forces you to add implementations for a bunch of methods. You can just implement ScannerBase, and have a constructor that takes a `map`, which itself is easily constructed, using `Map.of(...)`. MockScanner's `iterator()` method can just return `map.entrySet().iterator()`.", "bodyText": "Extending List forces you to add implementations for a bunch of methods. You can just implement ScannerBase, and have a constructor that takes a map, which itself is easily constructed, using Map.of(...). MockScanner's iterator() method can just return map.entrySet().iterator().", "bodyHTML": "<p dir=\"auto\">Extending List forces you to add implementations for a bunch of methods. You can just implement ScannerBase, and have a constructor that takes a <code>map</code>, which itself is easily constructed, using <code>Map.of(...)</code>. MockScanner's <code>iterator()</code> method can just return <code>map.entrySet().iterator()</code>.</p>", "author": "ctubbsii", "createdAt": "2020-11-17T19:16:05Z", "path": "core/src/test/java/org/apache/accumulo/core/clientImpl/ScannerBaseTest.java", "diffHunk": "@@ -20,71 +20,121 @@\n \n import static org.easymock.EasyMock.createMock;\n import static org.easymock.EasyMock.expect;\n+import static org.easymock.EasyMock.expectLastCall;\n+import static org.easymock.EasyMock.partialMockBuilder;\n import static org.easymock.EasyMock.replay;\n import static org.easymock.EasyMock.verify;\n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n \n+import java.awt.*;\n+import java.util.ArrayList;\n import java.util.HashMap;\n import java.util.Iterator;\n import java.util.Map;\n+import java.util.Scanner;\n+import java.util.concurrent.TimeUnit;\n import java.util.function.BiConsumer;\n \n+import org.apache.accumulo.core.client.AccumuloClient;\n+import org.apache.accumulo.core.client.IteratorSetting;\n import org.apache.accumulo.core.client.ScannerBase;\n+import org.apache.accumulo.core.client.sample.SamplerConfiguration;\n import org.apache.accumulo.core.data.Key;\n import org.apache.accumulo.core.data.Value;\n+import org.apache.accumulo.core.security.Authorizations;\n import org.apache.hadoop.io.Text;\n+import org.apache.hadoop.shaded.org.mockito.Mockito;\n+import org.easymock.EasyMock;\n import org.junit.Test;\n \n public class ScannerBaseTest {\n \n-  private static class forEachTester {\n-\n-    private Map<Key,Value> map;\n-\n-    forEachTester(Map<Key,Value> map) {\n-      this.map = map;\n-    }\n-\n-    public void forEach(BiConsumer<? super Key,? super Value> keyValueConsumer) {\n-      for (Map.Entry<Key,Value> entry : this.map.entrySet()) {\n-        keyValueConsumer.accept(entry.getKey(), entry.getValue());\n-      }\n-    }\n-  }\n-\n   @Test\n   public void testScannerBaseForEach() throws Exception {\n \n-    ScannerBase s;\n-    Map<Key,Value> scannerMap;\n-    Iterator<Map.Entry<Key,Value>> it;\n-    Key key;\n-    Value val;\n-    BiConsumer<Key,Value> keyValueConsumer;\n-    forEachTester fet;\n+    //This subclass of ScannerBase contains a List that ScannerBase.forEach() can\n+    //iterate over for testing purposes.\n+    class MockScanner extends List implements ScannerBase {", "originalCommit": "dc1755fdec7b0366f738f6b0e2db73f16b21d776", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "339d1ad06896f299eb54847707bdf69229e45adf", "url": "https://github.com/apache/accumulo/commit/339d1ad06896f299eb54847707bdf69229e45adf", "message": "Issue #1742 - Removed List/added Map to test object.", "committedDate": "2020-11-18T11:40:53Z", "type": "commit"}]}