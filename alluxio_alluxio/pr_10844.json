{"pr_number": 10844, "pr_title": "Report metrics with less copy and traverse", "pr_author": "LuQQiu", "pr_createdAt": "2020-02-05T00:00:07Z", "pr_url": "https://github.com/Alluxio/alluxio/pull/10844", "timeline": [{"oid": "1271bceb6cd3242995828baa82c08167d90d0c3a", "url": "https://github.com/Alluxio/alluxio/commit/1271bceb6cd3242995828baa82c08167d90d0c3a", "message": "Report metrics with less copy and traverse", "committedDate": "2020-02-04T23:58:14Z", "type": "commit"}, {"oid": "085b96002f6ce3b10306edcadde927b3c10ba8b8", "url": "https://github.com/Alluxio/alluxio/commit/085b96002f6ce3b10306edcadde927b3c10ba8b8", "message": "Fix MetricsSystemTest", "committedDate": "2020-02-05T00:55:33Z", "type": "commit"}, {"oid": "8f7204a2d837e2001e9341d28f5a38b0e829bbb8", "url": "https://github.com/Alluxio/alluxio/commit/8f7204a2d837e2001e9341d28f5a38b0e829bbb8", "message": "small fix", "committedDate": "2020-02-05T01:02:50Z", "type": "commit"}, {"oid": "4bd4cbf985d71ee64deb5089660e77def72fbd41", "url": "https://github.com/Alluxio/alluxio/commit/4bd4cbf985d71ee64deb5089660e77def72fbd41", "message": "small fix", "committedDate": "2020-02-05T01:07:57Z", "type": "commit"}, {"oid": "56dc3e7559bc82d9071dd68eb5001eb8e16c9f03", "url": "https://github.com/Alluxio/alluxio/commit/56dc3e7559bc82d9071dd68eb5001eb8e16c9f03", "message": "Add some docs", "committedDate": "2020-02-05T02:12:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQwNzYxOQ==", "url": "https://github.com/Alluxio/alluxio/pull/10844#discussion_r375407619", "body": "This method will cover most of the should report metrics which is `MetricKey` with `isClusterAggregated=true`. But it does not cover those with ufs tags like `Worker.BytesRead/WrittenPerUfs.UFS:<UFS_ADDRESS>.<worker_hostname>`. The code here doesn't know information about any of the Alluxio UFS. That's why I added the method `counterWithTags`  and `meterWithTags` which will add those full metric name to the should report metrics set.", "bodyText": "This method will cover most of the should report metrics which is MetricKey with isClusterAggregated=true. But it does not cover those with ufs tags like Worker.BytesRead/WrittenPerUfs.UFS:<UFS_ADDRESS>.<worker_hostname>. The code here doesn't know information about any of the Alluxio UFS. That's why I added the method counterWithTags  and meterWithTags which will add those full metric name to the should report metrics set.", "bodyHTML": "<p dir=\"auto\">This method will cover most of the should report metrics which is <code>MetricKey</code> with <code>isClusterAggregated=true</code>. But it does not cover those with ufs tags like <code>Worker.BytesRead/WrittenPerUfs.UFS:&lt;UFS_ADDRESS&gt;.&lt;worker_hostname&gt;</code>. The code here doesn't know information about any of the Alluxio UFS. That's why I added the method <code>counterWithTags</code>  and <code>meterWithTags</code> which will add those full metric name to the should report metrics set.</p>", "author": "LuQQiu", "createdAt": "2020-02-05T17:44:09Z", "path": "core/common/src/main/java/alluxio/metrics/MetricsSystem.java", "diffHunk": "@@ -520,86 +622,53 @@ public static Timer timer(String name) {\n    */\n   public static Map<String, MetricValue> allMetrics() {\n     Map<String, MetricValue> metricsMap = new HashMap<>();\n-    for (Entry<String, Gauge> entry : METRIC_REGISTRY.getGauges().entrySet()) {\n-      Object value = entry.getValue().getValue();\n-      MetricValue.Builder valueBuilder = MetricValue.newBuilder().setMetricType(MetricType.GAUGE);\n-      if (!(value instanceof Number)) {\n-        valueBuilder.setStringValue(value.toString());\n+    for (Map.Entry<String, com.codahale.metrics.Metric> entry\n+        : METRIC_REGISTRY.getMetrics().entrySet()) {\n+      MetricValue.Builder valueBuilder = MetricValue.newBuilder();\n+      com.codahale.metrics.Metric metric = entry.getValue();\n+      if (metric instanceof Gauge) {\n+        Object value = ((Gauge) metric).getValue();\n+        if (!(value instanceof Number)) {\n+          valueBuilder.setStringValue(value.toString());\n+        } else {\n+          valueBuilder.setDoubleValue(((Number) value).doubleValue());\n+        }\n+        valueBuilder.setMetricType(MetricType.GAUGE);\n+      } else if (metric instanceof Counter) {\n+        valueBuilder.setMetricType(MetricType.COUNTER)\n+            .setDoubleValue(((Counter) metric).getCount());\n+      } else if (metric instanceof Meter) {\n+        valueBuilder.setMetricType(MetricType.METER)\n+            .setDoubleValue(((Meter) metric).getOneMinuteRate());\n+      } else if (metric instanceof Timer) {\n+        valueBuilder.setMetricType(MetricType.TIMER)\n+            .setDoubleValue(((Timer) metric).getCount());\n       } else {\n-        valueBuilder.setDoubleValue(((Number) value).doubleValue());\n+        LOG.warn(\"Metric {} has invalid metric type {}\",\n+            entry.getKey(), metric.getClass().getName());\n+        continue;\n       }\n       metricsMap.put(entry.getKey(), valueBuilder.build());\n     }\n-    for (Entry<String, Counter> entry : METRIC_REGISTRY.getCounters().entrySet()) {\n-      metricsMap.put(entry.getKey(), MetricValue.newBuilder()\n-          .setDoubleValue(entry.getValue().getCount()).setMetricType(MetricType.COUNTER).build());\n-    }\n-    for (Entry<String, Meter> entry : METRIC_REGISTRY.getMeters().entrySet()) {\n-      metricsMap.put(entry.getKey(), MetricValue.newBuilder()\n-          .setDoubleValue(entry.getValue().getOneMinuteRate())\n-          .setMetricType(MetricType.METER).build());\n-    }\n-    for (Entry<String, Timer> entry : METRIC_REGISTRY.getTimers().entrySet()) {\n-      metricsMap.put(entry.getKey(), MetricValue.newBuilder()\n-          .setDoubleValue(entry.getValue().getCount()).setMetricType(MetricType.TIMER).build());\n-    }\n     return metricsMap;\n   }\n \n   /**\n-   * @return all the worker's metrics in the format of {@link Metric}\n-   */\n-  public static List<Metric> allWorkerMetrics() {\n-    return allInstanceMetrics(InstanceType.WORKER);\n-  }\n-\n-  /**\n-   * @return all the client's metrics in the format of {@link Metric}\n-   */\n-  public static List<Metric> allClientMetrics() {\n-    return allInstanceMetrics(InstanceType.CLIENT);\n-  }\n-\n-  /**\n-   * Gets all metrics of the given instance type.\n+   * Initialize the should report metrics. This should be called only once.\n    *\n-   * @param instanceType the requested instance type\n-   * @return all metrics of the given instance type\n-   */\n-  private static List<Metric> allInstanceMetrics(MetricsSystem.InstanceType instanceType) {\n-    List<Metric> metrics = new ArrayList<>();\n-    for (Entry<String, Gauge> entry : METRIC_REGISTRY.getGauges().entrySet()) {\n-      if (entry.getKey().startsWith(instanceType.toString())) {\n-        Object value = entry.getValue().getValue();\n-        if (!(value instanceof Number)) {\n-          LOG.warn(\"The value of metric {} of type {} is not sent to metrics master,\"\n-                  + \" only metrics value of number can be collected\",\n-              entry.getKey(), entry.getValue().getClass().getSimpleName());\n-          continue;\n-        }\n-        metrics.add(Metric.from(entry.getKey(), ((Number) value).longValue(), MetricType.GAUGE));\n-      }\n-    }\n-    for (Entry<String, Counter> entry : METRIC_REGISTRY.getCounters().entrySet()) {\n-      if (entry.getKey().startsWith(instanceType.toString())) {\n-        metrics.add(Metric.from(entry.getKey(), entry.getValue().getCount(), MetricType.COUNTER));\n-      }\n-    }\n-    for (Entry<String, Meter> entry : METRIC_REGISTRY.getMeters().entrySet()) {\n-      if (entry.getKey().startsWith(instanceType.toString())) {\n-        // TODO(yupeng): From Meter's implementation, getOneMinuteRate can only report at rate of at\n-        // least seconds. if the client's duration is too short (i.e. < 1s), then getOneMinuteRate\n-        // would return 0\n-        metrics.add(Metric.from(entry.getKey(), entry.getValue().getOneMinuteRate(),\n-            MetricType.METER));\n-      }\n-    }\n-    for (Entry<String, Timer> entry : METRIC_REGISTRY.getTimers().entrySet()) {\n-      if (entry.getKey().startsWith(instanceType.toString())) {\n-        metrics.add(Metric.from(entry.getKey(), entry.getValue().getCount(), MetricType.TIMER));\n-      }\n+   * Note that this method is able to catch most of the should report metrics\n+   * except worker metrics with ufs tags.\n+   *\n+   * @param instanceType the instance type\n+   */\n+  @VisibleForTesting\n+  public static void initShouldReportMetrics(InstanceType instanceType) {\n+    Set<MetricKey> metricKeys = MetricKey.allShouldReportMetricKeys(instanceType);\n+    for (MetricKey metricKey : metricKeys) {\n+      SHOULD_REPORT_METRICS.putIfAbsent(\n+          getMetricNameWithUniqueId(instanceType, metricKey.getName()),\n+          metricKey.getMetricType());", "originalCommit": "56dc3e7559bc82d9071dd68eb5001eb8e16c9f03", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQxMDM1Nw==", "url": "https://github.com/Alluxio/alluxio/pull/10844#discussion_r375410357", "body": "I want to remove the logics of calling original `allMetrics` and `allInstanceMetrics`. These two methods do many full metrics traverse and do many metric copies which takes up a lot of the heap size.\r\n\r\n`METRIC_REGISTERY.getGauges(), getCounters(), getMeters(), getTimers()` will internally traverse the `MetricRegistry.metrics` and make a copy of metrics belonging to the specific metric type.\r\nChange to use  one `METRIC_REGISTRY.getMetrics()` will directly return the UnmodifiableSortedMap view of the original `MetricRegistry.metrics` map  which reduces four traverse of the `MetricRegistry.metrics` map  and reduce a full copy of the full metrics map.", "bodyText": "I want to remove the logics of calling original allMetrics and allInstanceMetrics. These two methods do many full metrics traverse and do many metric copies which takes up a lot of the heap size.\nMETRIC_REGISTERY.getGauges(), getCounters(), getMeters(), getTimers() will internally traverse the MetricRegistry.metrics and make a copy of metrics belonging to the specific metric type.\nChange to use  one METRIC_REGISTRY.getMetrics() will directly return the UnmodifiableSortedMap view of the original MetricRegistry.metrics map  which reduces four traverse of the MetricRegistry.metrics map  and reduce a full copy of the full metrics map.", "bodyHTML": "<p dir=\"auto\">I want to remove the logics of calling original <code>allMetrics</code> and <code>allInstanceMetrics</code>. These two methods do many full metrics traverse and do many metric copies which takes up a lot of the heap size.</p>\n<p dir=\"auto\"><code>METRIC_REGISTERY.getGauges(), getCounters(), getMeters(), getTimers()</code> will internally traverse the <code>MetricRegistry.metrics</code> and make a copy of metrics belonging to the specific metric type.<br>\nChange to use  one <code>METRIC_REGISTRY.getMetrics()</code> will directly return the UnmodifiableSortedMap view of the original <code>MetricRegistry.metrics</code> map  which reduces four traverse of the <code>MetricRegistry.metrics</code> map  and reduce a full copy of the full metrics map.</p>", "author": "LuQQiu", "createdAt": "2020-02-05T17:49:39Z", "path": "core/common/src/main/java/alluxio/metrics/MetricsSystem.java", "diffHunk": "@@ -470,24 +507,56 @@ public static Timer timer(String name) {\n    * The synchronized keyword is added for correctness with {@link #resetAllMetrics}\n    */\n   private static synchronized List<alluxio.grpc.Metric> reportMetrics(InstanceType instanceType) {\n+    if (!sReported) {\n+      initShouldReportMetrics(instanceType);\n+      sReported = true;\n+    }\n     List<alluxio.grpc.Metric> rpcMetrics = new ArrayList<>(20);\n-    for (Metric m : allInstanceMetrics(instanceType)) {", "originalCommit": "56dc3e7559bc82d9071dd68eb5001eb8e16c9f03", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQxNTY4Ng==", "url": "https://github.com/Alluxio/alluxio/pull/10844#discussion_r375415686", "bodyText": "Original report Metrics:  four traverse of full metrics, one copy of the full metrics, one copy of the worker or client metrics, one copy of the to be reported metrics.\nNow report metrics: one traverse of the should report metrics, one copy of the to be reported metrics.", "author": "LuQQiu", "createdAt": "2020-02-05T17:59:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQxMDM1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQxMTU1Mw==", "url": "https://github.com/Alluxio/alluxio/pull/10844#discussion_r375411553", "body": "Only report the should report metrics (`MetricKey.isClusterAggregated == true`, predefined) instead of reporting all the worker or client metrics. Reduce the amount of metrics worker reported and master stored.", "bodyText": "Only report the should report metrics (MetricKey.isClusterAggregated == true, predefined) instead of reporting all the worker or client metrics. Reduce the amount of metrics worker reported and master stored.", "bodyHTML": "<p dir=\"auto\">Only report the should report metrics (<code>MetricKey.isClusterAggregated == true</code>, predefined) instead of reporting all the worker or client metrics. Reduce the amount of metrics worker reported and master stored.</p>", "author": "LuQQiu", "createdAt": "2020-02-05T17:52:01Z", "path": "core/common/src/main/java/alluxio/metrics/MetricsSystem.java", "diffHunk": "@@ -470,24 +507,56 @@ public static Timer timer(String name) {\n    * The synchronized keyword is added for correctness with {@link #resetAllMetrics}\n    */\n   private static synchronized List<alluxio.grpc.Metric> reportMetrics(InstanceType instanceType) {", "originalCommit": "56dc3e7559bc82d9071dd68eb5001eb8e16c9f03", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQxMjAzOQ==", "url": "https://github.com/Alluxio/alluxio/pull/10844#discussion_r375412039", "body": "Traverse the SHOULD_REPORT_METRICS instead of traverse all the metrics", "bodyText": "Traverse the SHOULD_REPORT_METRICS instead of traverse all the metrics", "bodyHTML": "<p dir=\"auto\">Traverse the SHOULD_REPORT_METRICS instead of traverse all the metrics</p>", "author": "LuQQiu", "createdAt": "2020-02-05T17:52:57Z", "path": "core/common/src/main/java/alluxio/metrics/MetricsSystem.java", "diffHunk": "@@ -470,24 +507,56 @@ public static Timer timer(String name) {\n    * The synchronized keyword is added for correctness with {@link #resetAllMetrics}\n    */\n   private static synchronized List<alluxio.grpc.Metric> reportMetrics(InstanceType instanceType) {\n+    if (!sReported) {\n+      initShouldReportMetrics(instanceType);\n+      sReported = true;\n+    }\n     List<alluxio.grpc.Metric> rpcMetrics = new ArrayList<>(20);\n-    for (Metric m : allInstanceMetrics(instanceType)) {\n-      // last reported metrics only need to be tracked for COUNTER metrics\n-      // Store the last metric value which was sent, but the rpc metric returned should only\n-      // contain the difference of the current value, and the last value sent. If it doesn't\n-      // yet exist, just send the current value\n-      if (m.getMetricType() == MetricType.COUNTER) {\n-        Metric prev = LAST_REPORTED_METRICS.replace(m.getFullMetricName(), m);\n+    // Use the getMetrics() call instead of getGauges(),getCounters()... to avoid\n+    // unneeded metrics copy\n+    Map<String, com.codahale.metrics.Metric> metrics = METRIC_REGISTRY.getMetrics();\n+\n+    for (Map.Entry<String, MetricType> entry : SHOULD_REPORT_METRICS.entrySet()) {", "originalCommit": "56dc3e7559bc82d9071dd68eb5001eb8e16c9f03", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "d14918eba584c76a6decbfec69a205056abe9bf8", "url": "https://github.com/Alluxio/alluxio/commit/d14918eba584c76a6decbfec69a205056abe9bf8", "message": "small fix", "committedDate": "2020-02-05T18:00:08Z", "type": "commit"}, {"oid": "f426bf77afbacead243d8da59b762b053333bf16", "url": "https://github.com/Alluxio/alluxio/commit/f426bf77afbacead243d8da59b762b053333bf16", "message": "before merging conflicts", "committedDate": "2020-02-07T22:27:48Z", "type": "commit"}, {"oid": "49d4f14b3954953cc54a8c76e9f542f0fe73cf34", "url": "https://github.com/Alluxio/alluxio/commit/49d4f14b3954953cc54a8c76e9f542f0fe73cf34", "message": "solve conflicts", "committedDate": "2020-02-07T22:36:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY0MDMyMA==", "url": "https://github.com/Alluxio/alluxio/pull/10844#discussion_r376640320", "body": "nit: this comment doesn't seem that clear to me.\r\n\r\nIs this a better description?\r\n\r\n```suggestion\r\nA flag telling whether metrics have been reported yet. Using this prevents us from initializing `SHOULD_REPORT_METRICS` more than once\r\n```", "bodyText": "nit: this comment doesn't seem that clear to me.\nIs this a better description?\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              // Adds to make sure the SHOULD_REPORT_METRICS is initialized only once\n          \n          \n            \n            A flag telling whether metrics have been reported yet. Using this prevents us from initializing `SHOULD_REPORT_METRICS` more than once", "bodyHTML": "<p dir=\"auto\">nit: this comment doesn't seem that clear to me.</p>\n<p dir=\"auto\">Is this a better description?</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"><span class=\"x x-first\">  </span><span class=\"pl-c\"><span class=\"pl-c x\">//</span><span class=\"x x-last\"> Adds to make sure the SHOULD_REPORT_METRICS is initialized only</span> once</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\"><span class=\"pl-smi x x-first\">A</span><span class=\"x\"> flag telling whether metrics have been reported yet. </span><span class=\"pl-smi x\">Using</span><span class=\"x\"> </span><span class=\"pl-c1 x\">this</span><span class=\"x\"> prevents us from initializing `</span><span class=\"pl-c1 x\">SHOULD_REPORT_METRICS</span><span class=\"x x-last\">` more than</span> once</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "ZacBlanco", "createdAt": "2020-02-07T22:37:38Z", "path": "core/common/src/main/java/alluxio/metrics/MetricsSystem.java", "diffHunk": "@@ -61,8 +63,14 @@\n   private static int sResolveTimeout =\n       (int) new InstancedConfiguration(ConfigurationUtils.defaults())\n           .getMs(PropertyKey.NETWORK_HOST_RESOLUTION_TIMEOUT_MS);\n-  private static final ConcurrentHashMap<String, Metric> LAST_REPORTED_METRICS =\n-      new ConcurrentHashMap<>();\n+  // A map from the metric name to its previous reported value\n+  // This map is used for calculated the counter diff value that will be reported\n+  private static final Map<String, Long> LAST_REPORTED_METRICS = new HashMap<>();\n+  // A map that records all the metrics that should be reported and aggregated at leading master\n+  // from full metric name to its metric type\n+  private static final Map<String, MetricType> SHOULD_REPORT_METRICS = new HashMap<>();\n+  // Adds to make sure the SHOULD_REPORT_METRICS is initialized only once", "originalCommit": "d14918eba584c76a6decbfec69a205056abe9bf8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY0ODYyNg==", "url": "https://github.com/Alluxio/alluxio/pull/10844#discussion_r376648626", "bodyText": "Yeah, much better!! This functionality is cool!", "author": "LuQQiu", "createdAt": "2020-02-07T23:05:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY0MDMyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY0MzYzMQ==", "url": "https://github.com/Alluxio/alluxio/pull/10844#discussion_r376643631", "body": "Can we optimize this arrayList allocation? do we know the number of metrics we're reporting at this point?", "bodyText": "Can we optimize this arrayList allocation? do we know the number of metrics we're reporting at this point?", "bodyHTML": "<p dir=\"auto\">Can we optimize this arrayList allocation? do we know the number of metrics we're reporting at this point?</p>", "author": "ZacBlanco", "createdAt": "2020-02-07T22:49:14Z", "path": "core/common/src/main/java/alluxio/metrics/MetricsSystem.java", "diffHunk": "@@ -473,24 +510,56 @@ public static Timer timer(String name) {\n    * The synchronized keyword is added for correctness with {@link #resetAllMetrics}\n    */\n   private static synchronized List<alluxio.grpc.Metric> reportMetrics(InstanceType instanceType) {\n+    if (!sReported) {\n+      initShouldReportMetrics(instanceType);\n+      sReported = true;\n+    }\n     List<alluxio.grpc.Metric> rpcMetrics = new ArrayList<>(20);", "originalCommit": "49d4f14b3954953cc54a8c76e9f542f0fe73cf34", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY1MDM0NA==", "url": "https://github.com/Alluxio/alluxio/pull/10844#discussion_r376650344", "bodyText": "For worker, 12 metrics we are reporting. But it's not guaranteed since we have Worker.BytesReadPerUfs.UFS:<UFS_ADDRESS>  and Worker.BytesReadPerUfs.UFS:<UFS_ADDRESS> which may have multiple metrics to report.\nFor client,  5 metrics to report.", "author": "LuQQiu", "createdAt": "2020-02-07T23:11:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY0MzYzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY0NjEyMg==", "url": "https://github.com/Alluxio/alluxio/pull/10844#discussion_r376646122", "body": "if this method returns null please annotate it with `@Nullable`", "bodyText": "if this method returns null please annotate it with @Nullable", "bodyHTML": "<p dir=\"auto\">if this method returns null please annotate it with <code>@Nullable</code></p>", "author": "ZacBlanco", "createdAt": "2020-02-07T22:57:21Z", "path": "core/common/src/main/java/alluxio/metrics/MetricsSystem.java", "diffHunk": "@@ -511,10 +580,43 @@ public static Timer timer(String name) {\n   }\n \n   /**\n-   * @return all the master's metrics in the format of {@link Metric}\n+   * Gets master metric with the given metric name.\n+   *\n+   * @param name the name of the metric to get\n+   * @return a metric set with the master metric of the given metric name\n    */\n-  public static List<Metric> allMasterMetrics() {\n-    return allInstanceMetrics(InstanceType.MASTER);\n+  public static Set<Metric> getMasterMetric(String name) {\n+    Set<Metric> set = new HashSet<>();\n+    Map<String, com.codahale.metrics.Metric> metricMap = METRIC_REGISTRY.getMetrics();\n+    String fullName = getMasterMetricName(name);\n+    com.codahale.metrics.Metric metric = metricMap.get(fullName);\n+    if (metric == null) {\n+      return set;\n+    }\n+    Metric alluxioMetric = getAlluxioMetricFromCodahaleMetric(fullName, metric);\n+    if (alluxioMetric != null) {\n+      set.add(alluxioMetric);\n+    }\n+    return set;\n+  }\n+\n+  private static Metric getAlluxioMetricFromCodahaleMetric(String name,\n+      com.codahale.metrics.Metric metric) {\n+    if (metric instanceof Gauge) {\n+      Gauge gauge = (Gauge) metric;\n+      return Metric.from(name, ((Number) gauge.getValue()).longValue(), MetricType.GAUGE);\n+    } else if (metric instanceof Counter) {\n+      Counter counter = (Counter) metric;\n+      return Metric.from(name, counter.getCount(), MetricType.COUNTER);\n+    } else if (metric instanceof Meter) {\n+      Meter meter = (Meter) metric;\n+      return Metric.from(name, meter.getOneMinuteRate(), MetricType.METER);\n+    } else if (metric instanceof Timer) {\n+      Timer timer = (Timer) metric;\n+      return Metric.from(name, timer.getCount(), MetricType.TIMER);\n+    }\n+    LOG.warn(\"Metric {} has invalid metric type {}\", name, metric.getClass().getName());\n+    return null;", "originalCommit": "49d4f14b3954953cc54a8c76e9f542f0fe73cf34", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY1Mzg1OA==", "url": "https://github.com/Alluxio/alluxio/pull/10844#discussion_r376653858", "bodyText": "Added, thanks", "author": "LuQQiu", "createdAt": "2020-02-07T23:25:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY0NjEyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY0Njc4MA==", "url": "https://github.com/Alluxio/alluxio/pull/10844#discussion_r376646780", "body": "I think you can use `{@link #<variable_name>}` to be more clear about \"should report metrics\"", "bodyText": "I think you can use {@link #<variable_name>} to be more clear about \"should report metrics\"", "bodyHTML": "<p dir=\"auto\">I think you can use <code>{@link #&lt;variable_name&gt;}</code> to be more clear about \"should report metrics\"</p>", "author": "ZacBlanco", "createdAt": "2020-02-07T22:59:38Z", "path": "core/common/src/main/java/alluxio/metrics/MetricsSystem.java", "diffHunk": "@@ -523,86 +625,53 @@ public static Timer timer(String name) {\n    */\n   public static Map<String, MetricValue> allMetrics() {\n     Map<String, MetricValue> metricsMap = new HashMap<>();\n-    for (Entry<String, Gauge> entry : METRIC_REGISTRY.getGauges().entrySet()) {\n-      Object value = entry.getValue().getValue();\n-      MetricValue.Builder valueBuilder = MetricValue.newBuilder().setMetricType(MetricType.GAUGE);\n-      if (!(value instanceof Number)) {\n-        valueBuilder.setStringValue(value.toString());\n+    for (Map.Entry<String, com.codahale.metrics.Metric> entry\n+        : METRIC_REGISTRY.getMetrics().entrySet()) {\n+      MetricValue.Builder valueBuilder = MetricValue.newBuilder();\n+      com.codahale.metrics.Metric metric = entry.getValue();\n+      if (metric instanceof Gauge) {\n+        Object value = ((Gauge) metric).getValue();\n+        if (value instanceof Number) {\n+          valueBuilder.setDoubleValue(((Number) value).doubleValue());\n+        } else {\n+          valueBuilder.setStringValue(value.toString());\n+        }\n+        valueBuilder.setMetricType(MetricType.GAUGE);\n+      } else if (metric instanceof Counter) {\n+        valueBuilder.setMetricType(MetricType.COUNTER)\n+            .setDoubleValue(((Counter) metric).getCount());\n+      } else if (metric instanceof Meter) {\n+        valueBuilder.setMetricType(MetricType.METER)\n+            .setDoubleValue(((Meter) metric).getOneMinuteRate());\n+      } else if (metric instanceof Timer) {\n+        valueBuilder.setMetricType(MetricType.TIMER)\n+            .setDoubleValue(((Timer) metric).getCount());\n       } else {\n-        valueBuilder.setDoubleValue(((Number) value).doubleValue());\n+        LOG.warn(\"Metric {} has invalid metric type {}\",\n+            entry.getKey(), metric.getClass().getName());\n+        continue;\n       }\n       metricsMap.put(entry.getKey(), valueBuilder.build());\n     }\n-    for (Entry<String, Counter> entry : METRIC_REGISTRY.getCounters().entrySet()) {\n-      metricsMap.put(entry.getKey(), MetricValue.newBuilder()\n-          .setDoubleValue(entry.getValue().getCount()).setMetricType(MetricType.COUNTER).build());\n-    }\n-    for (Entry<String, Meter> entry : METRIC_REGISTRY.getMeters().entrySet()) {\n-      metricsMap.put(entry.getKey(), MetricValue.newBuilder()\n-          .setDoubleValue(entry.getValue().getOneMinuteRate())\n-          .setMetricType(MetricType.METER).build());\n-    }\n-    for (Entry<String, Timer> entry : METRIC_REGISTRY.getTimers().entrySet()) {\n-      metricsMap.put(entry.getKey(), MetricValue.newBuilder()\n-          .setDoubleValue(entry.getValue().getCount()).setMetricType(MetricType.TIMER).build());\n-    }\n     return metricsMap;\n   }\n \n   /**\n-   * @return all the worker's metrics in the format of {@link Metric}\n-   */\n-  public static List<Metric> allWorkerMetrics() {\n-    return allInstanceMetrics(InstanceType.WORKER);\n-  }\n-\n-  /**\n-   * @return all the client's metrics in the format of {@link Metric}\n-   */\n-  public static List<Metric> allClientMetrics() {\n-    return allInstanceMetrics(InstanceType.CLIENT);\n-  }\n-\n-  /**\n-   * Gets all metrics of the given instance type.\n+   * Initialize the should report metrics. This should be called only once.", "originalCommit": "49d4f14b3954953cc54a8c76e9f542f0fe73cf34", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY1MzkwMQ==", "url": "https://github.com/Alluxio/alluxio/pull/10844#discussion_r376653901", "bodyText": "Use the link, thanks!", "author": "LuQQiu", "createdAt": "2020-02-07T23:25:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY0Njc4MA=="}], "type": "inlineReview"}, {"oid": "972b67dd17cf724969aea3840d504a389bbc3f65", "url": "https://github.com/Alluxio/alluxio/commit/972b67dd17cf724969aea3840d504a389bbc3f65", "message": "Apply suggestions from code review\r\n\r\nImprove docs\n\nCo-Authored-By: Zac Blanco <zac@alluxio.com>", "committedDate": "2020-02-07T23:13:16Z", "type": "commit"}, {"oid": "38e28c9f69c0936c68b51e215e35efab10399e93", "url": "https://github.com/Alluxio/alluxio/commit/38e28c9f69c0936c68b51e215e35efab10399e93", "message": "address comments", "committedDate": "2020-02-07T23:18:03Z", "type": "commit"}]}