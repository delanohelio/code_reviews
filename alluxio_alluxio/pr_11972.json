{"pr_number": 11972, "pr_title": "Improve exception messages for FileAlreadyExistsException", "pr_author": "gpang", "pr_createdAt": "2020-08-12T19:48:37Z", "pr_url": "https://github.com/Alluxio/alluxio/pull/11972", "timeline": [{"oid": "725f6ccf84c935299d1fe331d1f4ad265a6d0527", "url": "https://github.com/Alluxio/alluxio/commit/725f6ccf84c935299d1fe331d1f4ad265a6d0527", "message": "Improve exception messages for FileAlreadyExistsException", "committedDate": "2020-08-12T19:46:52Z", "type": "commit"}, {"oid": "fe45407f4fc67480e3a9a1b73af6a53bbb13f7d8", "url": "https://github.com/Alluxio/alluxio/commit/fe45407f4fc67480e3a9a1b73af6a53bbb13f7d8", "message": "Fix style", "committedDate": "2020-08-12T20:03:50Z", "type": "commit"}, {"oid": "c95dde48a8d38c8e704c66d4c008cc40a56c1e02", "url": "https://github.com/Alluxio/alluxio/commit/c95dde48a8d38c8e704c66d4c008cc40a56c1e02", "message": "Fix integration tests", "committedDate": "2020-08-12T20:41:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE2NDQ1Nw==", "url": "https://github.com/Alluxio/alluxio/pull/11972#discussion_r470164457", "body": "Shall we use junit `expectedMessage`?\r\n```\r\nexpectedEx.expectMessage(\"message to expect\");\r\n```\r\nsee\r\nhttps://stackoverflow.com/questions/2469911/how-do-i-assert-my-exception-message-with-junit-test-annotation", "bodyText": "Shall we use junit expectedMessage?\nexpectedEx.expectMessage(\"message to expect\");\n\nsee\nhttps://stackoverflow.com/questions/2469911/how-do-i-assert-my-exception-message-with-junit-test-annotation", "bodyHTML": "<p dir=\"auto\">Shall we use junit <code>expectedMessage</code>?</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"expectedEx.expectMessage(&quot;message to expect&quot;);\n\"><pre><code>expectedEx.expectMessage(\"message to expect\");\n</code></pre></div>\n<p dir=\"auto\">see<br>\n<a href=\"https://stackoverflow.com/questions/2469911/how-do-i-assert-my-exception-message-with-junit-test-annotation\" rel=\"nofollow\">https://stackoverflow.com/questions/2469911/how-do-i-assert-my-exception-message-with-junit-test-annotation</a></p>", "author": "apc999", "createdAt": "2020-08-13T18:34:59Z", "path": "core/client/hdfs/src/test/java/alluxio/hadoop/AbstractFileSystemTest.java", "diffHunk": "@@ -585,6 +587,46 @@ public void getBlockLocationsNoUfsLocationsWithFallback() throws Exception {\n     }\n   }\n \n+  @Test\n+  public void appendExistingNotSupported() throws Exception {\n+    Path path = new Path(\"/file\");\n+    alluxio.client.file.FileSystem alluxioFs =\n+        mock(alluxio.client.file.FileSystem.class);\n+    when(alluxioFs.exists(new AlluxioURI(HadoopUtils.getPathWithoutScheme(path))))\n+        .thenReturn(true);\n+    FileSystem alluxioHadoopFs = new FileSystem(alluxioFs);\n+\n+    try {\n+      alluxioHadoopFs.append(path, 100);\n+      fail(\"append() of existing file is expected to fail\");\n+    } catch (IOException e) {\n+      assertEquals(\"append() to existing Alluxio path is currently not supported: \" + path,\n+          e.getMessage());\n+    }\n+    alluxioHadoopFs.close();\n+  }\n+\n+  @Test\n+  public void createWithoutOverwrite() throws Exception {\n+    Path path = new Path(\"/file\");\n+    alluxio.client.file.FileSystem alluxioFs =\n+        mock(alluxio.client.file.FileSystem.class);\n+    when(alluxioFs.exists(new AlluxioURI(HadoopUtils.getPathWithoutScheme(path))))\n+        .thenReturn(true);\n+    when(alluxioFs.createFile(eq(new AlluxioURI(HadoopUtils.getPathWithoutScheme(path))), any()))\n+        .thenThrow(new FileAlreadyExistsException(path.toString()));\n+    FileSystem alluxioHadoopFs = new FileSystem(alluxioFs);\n+\n+    try {", "originalCommit": "c95dde48a8d38c8e704c66d4c008cc40a56c1e02", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE4NDM5Nw==", "url": "https://github.com/Alluxio/alluxio/pull/11972#discussion_r470184397", "bodyText": "In general, I have been favoring the manual catching, mainly because the ExpectedException only works with 1 exception per test. It is common that tests might expect multiple exceptions in a test, so I tend to manually catch the Exception. In these specific tests, we only deal with 1 Exception, so ExpectedException would have worked, but I usually avoid using it because of that limitation.", "author": "gpang", "createdAt": "2020-08-13T19:07:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE2NDQ1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE2NDY5OQ==", "url": "https://github.com/Alluxio/alluxio/pull/11972#discussion_r470164699", "body": "I will make this `try-with-resource` to make sure it is closed", "bodyText": "I will make this try-with-resource to make sure it is closed", "bodyHTML": "<p dir=\"auto\">I will make this <code>try-with-resource</code> to make sure it is closed</p>", "author": "apc999", "createdAt": "2020-08-13T18:35:26Z", "path": "core/client/hdfs/src/test/java/alluxio/hadoop/AbstractFileSystemTest.java", "diffHunk": "@@ -585,6 +587,46 @@ public void getBlockLocationsNoUfsLocationsWithFallback() throws Exception {\n     }\n   }\n \n+  @Test\n+  public void appendExistingNotSupported() throws Exception {\n+    Path path = new Path(\"/file\");\n+    alluxio.client.file.FileSystem alluxioFs =\n+        mock(alluxio.client.file.FileSystem.class);\n+    when(alluxioFs.exists(new AlluxioURI(HadoopUtils.getPathWithoutScheme(path))))\n+        .thenReturn(true);\n+    FileSystem alluxioHadoopFs = new FileSystem(alluxioFs);\n+\n+    try {\n+      alluxioHadoopFs.append(path, 100);\n+      fail(\"append() of existing file is expected to fail\");\n+    } catch (IOException e) {\n+      assertEquals(\"append() to existing Alluxio path is currently not supported: \" + path,\n+          e.getMessage());\n+    }\n+    alluxioHadoopFs.close();\n+  }\n+\n+  @Test\n+  public void createWithoutOverwrite() throws Exception {\n+    Path path = new Path(\"/file\");\n+    alluxio.client.file.FileSystem alluxioFs =\n+        mock(alluxio.client.file.FileSystem.class);\n+    when(alluxioFs.exists(new AlluxioURI(HadoopUtils.getPathWithoutScheme(path))))\n+        .thenReturn(true);\n+    when(alluxioFs.createFile(eq(new AlluxioURI(HadoopUtils.getPathWithoutScheme(path))), any()))\n+        .thenThrow(new FileAlreadyExistsException(path.toString()));\n+    FileSystem alluxioHadoopFs = new FileSystem(alluxioFs);", "originalCommit": "c95dde48a8d38c8e704c66d4c008cc40a56c1e02", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE2NDg3OQ==", "url": "https://github.com/Alluxio/alluxio/pull/11972#discussion_r470164879", "bodyText": "same comments apply to other parts", "author": "apc999", "createdAt": "2020-08-13T18:35:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE2NDY5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE4MDg0Ng==", "url": "https://github.com/Alluxio/alluxio/pull/11972#discussion_r470180846", "bodyText": "Done", "author": "gpang", "createdAt": "2020-08-13T19:01:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE2NDY5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE2NzQ1OQ==", "url": "https://github.com/Alluxio/alluxio/pull/11972#discussion_r470167459", "body": "not clear to me. do we mean:\r\nNot allowed to create a new file or dir with existing path?", "bodyText": "not clear to me. do we mean:\nNot allowed to create a new file or dir with existing path?", "bodyHTML": "<p dir=\"auto\">not clear to me. do we mean:<br>\nNot allowed to create a new file or dir with existing path?</p>", "author": "apc999", "createdAt": "2020-08-13T18:40:04Z", "path": "core/server/master/src/main/java/alluxio/master/file/meta/InodeTree.java", "diffHunk": "@@ -675,16 +676,22 @@ public InodeDirectory getRoot() {\n     // helper method for the shared logic.\n     AlluxioURI path = inodePath.getUri();\n     if (path.isRoot()) {\n-      String errorMessage = ExceptionMessage.FILE_ALREADY_EXISTS.getMessage(path);\n+      String errorMessage = \"Not allowed to create existing root path: \" + path;\n       LOG.error(errorMessage);\n       throw new FileAlreadyExistsException(errorMessage);\n     }\n     if (inodePath.fullPathExists()) {\n       if (context instanceof CreateDirectoryContext\n           && ((CreateDirectoryContext) context).getOptions().getAllowExists()) {\n-        return new ArrayList<>();\n+        return Collections.emptyList();\n       } else {\n-        throw new FileAlreadyExistsException(path);\n+        String pathType = \"file\";\n+        if (context instanceof CreateDirectoryContext) {\n+          pathType = \"directory\";\n+        }\n+        String errorMessage =\n+            String.format(\"Not allowed to create existing %s: %s\", pathType, path);", "originalCommit": "c95dde48a8d38c8e704c66d4c008cc40a56c1e02", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE4ODU4OQ==", "url": "https://github.com/Alluxio/alluxio/pull/11972#discussion_r470188589", "bodyText": "I updated it. Does the message make more sense?", "author": "gpang", "createdAt": "2020-08-13T19:15:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE2NzQ1OQ=="}], "type": "inlineReview"}, {"oid": "3fd3d614f47ba9317d9911354c128877964368dd", "url": "https://github.com/Alluxio/alluxio/commit/3fd3d614f47ba9317d9911354c128877964368dd", "message": "Improve tests/logging", "committedDate": "2020-08-13T19:13:40Z", "type": "commit"}, {"oid": "c9f315a0d849d288a0566c69b437122e7bb07486", "url": "https://github.com/Alluxio/alluxio/commit/c9f315a0d849d288a0566c69b437122e7bb07486", "message": "Fix test messages", "committedDate": "2020-08-13T19:53:49Z", "type": "commit"}]}