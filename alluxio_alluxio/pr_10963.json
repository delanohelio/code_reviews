{"pr_number": 10963, "pr_title": "Cache the getWorkerInfoList results and refresh periodically", "pr_author": "LuQQiu", "pr_createdAt": "2020-02-20T22:44:00Z", "pr_url": "https://github.com/Alluxio/alluxio/pull/10963", "merge_commit": "d587b031c3ace1e5d915f73079ed6d363fca31f7", "timeline": [{"oid": "ffd70a4380636274aa9d345db9e64f06b2285bd7", "url": "https://github.com/Alluxio/alluxio/commit/ffd70a4380636274aa9d345db9e64f06b2285bd7", "message": "Cache the getWorkerInfoList results and refresh periodically", "committedDate": "2020-02-20T22:40:30Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjMwOTU3NQ==", "url": "https://github.com/Alluxio/alluxio/pull/10963#discussion_r382309575", "body": "```suggestion\r\n              + \"after being cached for this time period.\")\r\n```\r\n\r\nAlso, can you add what the implications may be if it is too short, and too long?", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                          + \"after being cached for this time period. \")\n          \n          \n            \n                          + \"after being cached for this time period.\")\n          \n      \n    \n    \n  \n\nAlso, can you add what the implications may be if it is too short, and too long?", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">              <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>after being cached for this time period.<span class=\"x x-first x-last\"> </span><span class=\"pl-pds\">\"</span></span>)</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">              <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>after being cached for this time period.<span class=\"pl-pds\">\"</span></span>)</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\">Also, can you add what the implications may be if it is too short, and too long?</p>", "author": "gpang", "createdAt": "2020-02-20T23:07:57Z", "path": "core/common/src/main/java/alluxio/conf/PropertyKey.java", "diffHunk": "@@ -2079,6 +2079,14 @@ public String toString() {\n           .setConsistencyCheckLevel(ConsistencyCheckLevel.WARN)\n           .setScope(Scope.MASTER)\n               .build();\n+  public static final PropertyKey MASTER_WORKER_INFO_CACHE_REFRESH_TIME =\n+      new Builder(Name.MASTER_WORKER_INFO_CACHE_REFRESH_TIME)\n+          .setDefaultValue(\"10sec\")\n+          .setDescription(\"The worker information list will be refreshed \"\n+              + \"after being cached for this time period. \")", "originalCommit": "ffd70a4380636274aa9d345db9e64f06b2285bd7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7125ccaabdf6bcd42e41d788eccb63019d7ea796", "changed_code": [{"header": "diff --git a/core/common/src/main/java/alluxio/conf/PropertyKey.java b/core/common/src/main/java/alluxio/conf/PropertyKey.java\nindex 52bf0a16d1..187c4c442e 100644\n--- a/core/common/src/main/java/alluxio/conf/PropertyKey.java\n+++ b/core/common/src/main/java/alluxio/conf/PropertyKey.java\n", "chunk": "@@ -2083,7 +2083,7 @@ public final class PropertyKey implements Comparable<PropertyKey> {\n       new Builder(Name.MASTER_WORKER_INFO_CACHE_REFRESH_TIME)\n           .setDefaultValue(\"10sec\")\n           .setDescription(\"The worker information list will be refreshed \"\n-              + \"after being cached for this time period. \")\n+              + \"after being cached for this time period.\")\n           .setConsistencyCheckLevel(ConsistencyCheckLevel.WARN)\n           .setScope(Scope.MASTER)\n           .build();\n", "next_change": {"commit": "e87cd8567042e98597a652a5369a865fb4caaf72", "changed_code": [{"header": "diff --git a/core/common/src/main/java/alluxio/conf/PropertyKey.java b/core/common/src/main/java/alluxio/conf/PropertyKey.java\nindex 187c4c442e..de953c698b 100644\n--- a/core/common/src/main/java/alluxio/conf/PropertyKey.java\n+++ b/core/common/src/main/java/alluxio/conf/PropertyKey.java\n", "chunk": "@@ -2083,7 +2083,11 @@ public final class PropertyKey implements Comparable<PropertyKey> {\n       new Builder(Name.MASTER_WORKER_INFO_CACHE_REFRESH_TIME)\n           .setDefaultValue(\"10sec\")\n           .setDescription(\"The worker information list will be refreshed \"\n-              + \"after being cached for this time period.\")\n+              + \"after being cached for this time period. If the refresh time is too big, \"\n+              + \"operations on the job servers or clients may fail because of \"\n+              + \"the stale worker info. If it is too small, \"\n+              + \"continuously updating worker information may case lock contention \"\n+              + \"in the block master\")\n           .setConsistencyCheckLevel(ConsistencyCheckLevel.WARN)\n           .setScope(Scope.MASTER)\n           .build();\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "d587b031c3ace1e5d915f73079ed6d363fca31f7", "changed_code": [{"header": "diff --git a/core/common/src/main/java/alluxio/conf/PropertyKey.java b/core/common/src/main/java/alluxio/conf/PropertyKey.java\nindex 52bf0a16d1..de953c698b 100644\n--- a/core/common/src/main/java/alluxio/conf/PropertyKey.java\n+++ b/core/common/src/main/java/alluxio/conf/PropertyKey.java\n", "chunk": "@@ -2083,7 +2083,11 @@ public final class PropertyKey implements Comparable<PropertyKey> {\n       new Builder(Name.MASTER_WORKER_INFO_CACHE_REFRESH_TIME)\n           .setDefaultValue(\"10sec\")\n           .setDescription(\"The worker information list will be refreshed \"\n-              + \"after being cached for this time period. \")\n+              + \"after being cached for this time period. If the refresh time is too big, \"\n+              + \"operations on the job servers or clients may fail because of \"\n+              + \"the stale worker info. If it is too small, \"\n+              + \"continuously updating worker information may case lock contention \"\n+              + \"in the block master\")\n           .setConsistencyCheckLevel(ConsistencyCheckLevel.WARN)\n           .setScope(Scope.MASTER)\n           .build();\n", "next_change": {"commit": "a8b22f1ba4de752a14db3a41ab23dc33b6942211", "changed_code": [{"header": "diff --git a/core/common/src/main/java/alluxio/conf/PropertyKey.java b/core/common/src/main/java/alluxio/conf/PropertyKey.java\nold mode 100644\nnew mode 100755\nindex de953c698b..5ce3fd5058\n--- a/core/common/src/main/java/alluxio/conf/PropertyKey.java\n+++ b/core/common/src/main/java/alluxio/conf/PropertyKey.java\n", "chunk": "@@ -2092,66 +2931,206 @@ public final class PropertyKey implements Comparable<PropertyKey> {\n           .setScope(Scope.MASTER)\n           .build();\n   public static final PropertyKey MASTER_WORKER_TIMEOUT_MS =\n-      new Builder(Name.MASTER_WORKER_TIMEOUT_MS)\n+      durationBuilder(Name.MASTER_WORKER_TIMEOUT_MS)\n           .setAlias(\"alluxio.master.worker.timeout.ms\")\n           .setDefaultValue(\"5min\")\n           .setDescription(\"Timeout between master and worker indicating a lost worker.\")\n           .setConsistencyCheckLevel(ConsistencyCheckLevel.WARN)\n           .setScope(Scope.MASTER)\n           .build();\n-  public static final PropertyKey MASTER_RPC_EXECUTOR_PARALLELISM =\n-      new Builder(Name.MASTER_RPC_EXECUTOR_PARALLELISM)\n-          .setDefaultSupplier(() -> 2 * Runtime.getRuntime().availableProcessors(),\n-              \"2 * {CPU core count}\")\n-          .setDescription(\"The parallelism level of master RPC executor service .\")\n+  public static final PropertyKey MASTER_METADATA_SYNC_CONCURRENCY_LEVEL =\n+      intBuilder(Name.MASTER_METADATA_SYNC_CONCURRENCY_LEVEL)\n+          .setDefaultValue(6)\n+          .setDescription(\"The maximum number of concurrent sync tasks running for a given sync \"\n+              + \"operation\")\n+          .setScope(Scope.MASTER)\n           .setConsistencyCheckLevel(ConsistencyCheckLevel.WARN)\n+          .build();\n+  // In Java8 in container environment Runtime.availableProcessors() always returns 1,\n+  // which is not the actual number of cpus, so we set a safe default value 4.\n+  public static final PropertyKey MASTER_METADATA_SYNC_EXECUTOR_POOL_SIZE =\n+      intBuilder(Name.MASTER_METADATA_SYNC_EXECUTOR_POOL_SIZE)\n+          .setDefaultSupplier(() -> Math.max(4, Runtime.getRuntime().availableProcessors()),\n+              \"The total number of threads which can concurrently execute metadata sync \"\n+                  + \"operations.\")\n+          .setDescription(\"The number of threads used to execute all metadata sync\"\n+              + \"operations\")\n           .setScope(Scope.MASTER)\n+          .setConsistencyCheckLevel(ConsistencyCheckLevel.WARN)\n           .build();\n-  public static final PropertyKey MASTER_RPC_EXECUTOR_MIN_RUNNABLE =\n-      new Builder(Name.MASTER_RPC_EXECUTOR_MIN_RUNNABLE)\n-          .setDefaultValue(1)\n-          .setDescription(\"the minimum allowed number of core threads not blocked. \"\n-              + \"To ensure progress, when too few unblocked threads exist and unexecuted tasks may \"\n-              + \"exist, new threads are constructed up to the value of \"\n-              + Name.MASTER_RPC_EXECUTOR_MAX_POOL_SIZE\n-              + \". A value of 1 ensures liveness. A larger value might improve \"\n-              + \"throughput but might also increase overhead.\")\n+  public static final PropertyKey MASTER_METADATA_SYNC_REPORT_FAILURE =\n+      booleanBuilder(Name.MASTER_METADATA_SYNC_REPORT_FAILURE)\n+          .setDescription(\"Report failure if any metadata sync fails\")\n+          .setScope(Scope.MASTER)\n+          .setDefaultValue(true)\n+          .setIsHidden(true)\n+          .setConsistencyCheckLevel(ConsistencyCheckLevel.WARN)\n+          .build();\n+  // In Java8 in container environment Runtime.availableProcessors() always returns 1,\n+  // which is not the actual number of cpus, so we set a safe default value 32.\n+  public static final PropertyKey MASTER_METADATA_SYNC_UFS_PREFETCH_POOL_SIZE =\n+      intBuilder(Name.MASTER_METADATA_SYNC_UFS_PREFETCH_POOL_SIZE)\n+          .setDefaultSupplier(() -> Math.max(32, 10 * Runtime.getRuntime().availableProcessors()),\n+              \"The number of threads which can concurrently fetch metadata from UFSes during a \"\n+                  + \"metadata sync operations.\")\n+          .setDescription(\"The number of threads used to fetch UFS objects for all metadata sync\"\n+              + \"operations\")\n+          .setScope(Scope.MASTER)\n+          .setConsistencyCheckLevel(ConsistencyCheckLevel.WARN)\n+          .build();\n+  public static final PropertyKey MASTER_METADATA_SYNC_UFS_PREFETCH_TIMEOUT =\n+      durationBuilder(Name.MASTER_METADATA_SYNC_UFS_PREFETCH_TIMEOUT)\n+          .setDefaultValue(\"100ms\")\n+          .setDescription(\"The timeout for a metadata fetch operation from the UFSes. \"\n+              + \"Adjust this timeout according to the expected UFS worst-case response time.\")\n+          .setScope(Scope.MASTER)\n+          .setConsistencyCheckLevel(ConsistencyCheckLevel.WARN)\n+          .build();\n+  public static final PropertyKey MASTER_RPC_EXECUTOR_TYPE =\n+      enumBuilder(Name.MASTER_RPC_EXECUTOR_TYPE, RpcExecutorType.class)\n+          .setDefaultValue(RpcExecutorType.TPE)\n+          .setDescription(\"Type of ExecutorService for Alluxio master gRPC server. \"\n+              + \"Supported values are TPE (for ThreadPoolExecutor) and FJP (for ForkJoinPool).\")\n           .setConsistencyCheckLevel(ConsistencyCheckLevel.WARN)\n           .setScope(Scope.MASTER)\n           .build();\n   public static final PropertyKey MASTER_RPC_EXECUTOR_CORE_POOL_SIZE =\n-      new Builder(Name.MASTER_RPC_EXECUTOR_CORE_POOL_SIZE)\n-          .setDefaultValue(0)\n-          .setDescription(\"the number of threads to keep in thread pool of master RPC executor \"\n-              + \"service. By default it is same as the parallelism level, but may be \"\n-              + \"set to a larger value to reduce dynamic overhead if tasks regularly block. \"\n-              + \"A smaller value (for example 0) is equivalent to the default.\")\n+      intBuilder(Name.MASTER_RPC_EXECUTOR_CORE_POOL_SIZE)\n+          .setDefaultValue(500)\n+          .setDescription(\n+              \"The number of threads to keep in thread pool of master RPC ExecutorService.\")\n           .setConsistencyCheckLevel(ConsistencyCheckLevel.WARN)\n           .setScope(Scope.MASTER)\n           .build();\n   public static final PropertyKey MASTER_RPC_EXECUTOR_MAX_POOL_SIZE =\n-      new Builder(Name.MASTER_RPC_EXECUTOR_MAX_POOL_SIZE)\n+      intBuilder(Name.MASTER_RPC_EXECUTOR_MAX_POOL_SIZE)\n           .setDefaultValue(500)\n-          .setDescription(\"the maximum number of threads allowed for master RPC executor service.\"\n+          .setDescription(\"The maximum number of threads allowed for master RPC ExecutorService.\"\n               + \" When the maximum is reached, attempts to replace blocked threads fail.\")\n           .setConsistencyCheckLevel(ConsistencyCheckLevel.WARN)\n           .setScope(Scope.MASTER)\n           .build();\n   public static final PropertyKey MASTER_RPC_EXECUTOR_KEEPALIVE =\n-      new Builder(Name.MASTER_RPC_EXECUTOR_KEEPALIVE)\n+      durationBuilder(Name.MASTER_RPC_EXECUTOR_KEEPALIVE)\n           .setDefaultValue(\"60sec\")\n-          .setDescription(\"the keep alive time of a thread in master RPC executor service\"\n+          .setDescription(\"The keep alive time of a thread in master RPC ExecutorService\"\n               + \"last used before this thread is terminated (and replaced if necessary).\")\n           .setConsistencyCheckLevel(ConsistencyCheckLevel.WARN)\n           .setScope(Scope.MASTER)\n           .build();\n+  public static final PropertyKey MASTER_RPC_EXECUTOR_TPE_QUEUE_TYPE =\n+      enumBuilder(Name.MASTER_RPC_EXECUTOR_TPE_QUEUE_TYPE, ThreadPoolExecutorQueueType.class)\n+          .setDefaultValue(ThreadPoolExecutorQueueType.LINKED_BLOCKING_QUEUE)\n+          .setDescription(format(\n+              \"This property is effective when %s is set to TPE. \"\n+                  + \"It specifies the internal task queue that's used by RPC ExecutorService. \"\n+                  + \"Supported values are: LINKED_BLOCKING_QUEUE, LINKED_BLOCKING_QUEUE_WITH_CAP, \"\n+                  + \"ARRAY_BLOCKING_QUEUE and SYNCHRONOUS_BLOCKING_QUEUE\",\n+              Name.MASTER_RPC_EXECUTOR_TYPE))\n+          .setConsistencyCheckLevel(ConsistencyCheckLevel.WARN)\n+          .setScope(Scope.MASTER)\n+          .build();\n+  public static final PropertyKey MASTER_RPC_EXECUTOR_TPE_ALLOW_CORE_THREADS_TIMEOUT =\n+      booleanBuilder(Name.MASTER_RPC_EXECUTOR_TPE_ALLOW_CORE_THREADS_TIMEOUT)\n+          .setDefaultValue(true)\n+          .setDescription(\n+              format(\"This property is effective when %s is set to ThreadPoolExecutor. \"\n+                  + \"It controls whether core threads can timeout and terminate \"\n+                  + \"when there is no work.\", Name.MASTER_RPC_EXECUTOR_TYPE))\n+          .setConsistencyCheckLevel(ConsistencyCheckLevel.WARN)\n+          .setScope(Scope.MASTER)\n+          .build();\n+  public static final PropertyKey MASTER_RPC_EXECUTOR_FJP_PARALLELISM =\n+      intBuilder(Name.MASTER_RPC_EXECUTOR_FJP_PARALLELISM)\n+          .setAlias(\"alluxio.master.rpc.executor.parallelism\")\n+          .setDefaultSupplier(() -> Math.max(8, 2 * Runtime.getRuntime().availableProcessors()),\n+              \"2 * {CPU core count}\")\n+          .setDescription(\n+              format(\"This property is effective when %s is set to ForkJoinPool. \"\n+                  + \"It controls the parallelism level (internal queue count) \"\n+                  + \"of master RPC ExecutorService.\", Name.MASTER_RPC_EXECUTOR_TYPE))\n+          .setConsistencyCheckLevel(ConsistencyCheckLevel.WARN)\n+          .setScope(Scope.MASTER)\n+          .build();\n+  public static final PropertyKey MASTER_RPC_EXECUTOR_FJP_MIN_RUNNABLE =\n+      intBuilder(Name.MASTER_RPC_EXECUTOR_FJP_MIN_RUNNABLE)\n+          .setAlias(\"alluxio.master.rpc.executor.min.runnable\")\n+          .setDefaultValue(1)\n+          .setDescription(\n+              format(\n+                  \"This property is effective when %s is set to ForkJoinPool. \"\n+                      + \"It controls the minimum allowed number of core threads not blocked. \"\n+                      + \"A value of 1 ensures liveness. A larger value might improve \"\n+                      + \"throughput but might also increase overhead.\",\n+                  Name.MASTER_RPC_EXECUTOR_TYPE))\n+          .setConsistencyCheckLevel(ConsistencyCheckLevel.WARN)\n+          .setScope(Scope.MASTER)\n+          .build();\n+  public static final PropertyKey MASTER_RPC_EXECUTOR_FJP_ASYNC =\n+      booleanBuilder(Name.MASTER_RPC_EXECUTOR_FJP_ASYNC)\n+          .setDefaultValue(true)\n+          .setDescription(format(\n+              \"This property is effective when %s is set to ForkJoinPool. \"\n+                  + \"if true, it establishes local first-in-first-out scheduling mode for \"\n+                  + \"forked tasks that are never joined. This mode may be more appropriate \"\n+                  + \"than default locally stack-based mode in applications in which \"\n+                  + \"worker threads only process event-style asynchronous tasks.\",\n+              Name.MASTER_RPC_EXECUTOR_TYPE))\n+          .setConsistencyCheckLevel(ConsistencyCheckLevel.WARN)\n+          .setScope(Scope.MASTER)\n+          .build();\n+  public static final PropertyKey MASTER_WORKER_REGISTER_LEASE_ENABLED =\n+      booleanBuilder(Name.MASTER_WORKER_REGISTER_LEASE_ENABLED)\n+          .setDefaultValue(true)\n+          .setDescription(\"Whether workers request for leases before they register. \"\n+              + \"The RegisterLease is used by the master to control the concurrency of workers\"\n+              + \" that are actively registering.\")\n+          .setScope(Scope.MASTER)\n+          .build();\n+  public static final PropertyKey MASTER_WORKER_REGISTER_LEASE_COUNT =\n+      intBuilder(Name.MASTER_WORKER_REGISTER_LEASE_COUNT)\n+          .setDefaultValue(25)\n+          .setDescription(\"The number of workers that can register at the same time. \"\n+              + \"Others will wait and retry until they are granted a RegisterLease. \"\n+              + \"If you observe pressure on the master when many workers start up and register, \"\n+              + \"tune down this parameter.\")\n+          .setScope(Scope.MASTER)\n+          .build();\n+  public static final PropertyKey MASTER_WORKER_REGISTER_LEASE_RESPECT_JVM_SPACE =\n+      booleanBuilder(Name.MASTER_WORKER_REGISTER_LEASE_RESPECT_JVM_SPACE)\n+          .setDefaultValue(true)\n+          .setDescription(\"Whether the master checks the availability on the JVM before granting\"\n+              + \" a lease to a worker. If the master determines the JVM does not have enough\"\n+              + \" space to accept a new worker, the RegisterLease will not be granted.\")\n+          .setScope(Scope.MASTER)\n+          .build();\n+  public static final PropertyKey MASTER_WORKER_REGISTER_LEASE_TTL =\n+      durationBuilder(Name.MASTER_WORKER_REGISTER_LEASE_TTL)\n+          .setDefaultValue(\"1min\")\n+          .setDescription(\"The TTL for a RegisterLease granted to the worker. Leases that \"\n+              + \"exceed the TTL will be recycled and granted to other workers.\")\n+          .setScope(Scope.MASTER)\n+          .build();\n+\n+  public static final PropertyKey STANDBY_MASTER_METRICS_SINK_ENABLED =\n+      booleanBuilder(Name.STANDBY_MASTER_METRICS_SINK_ENABLED)\n+          .setDefaultValue(false)\n+          .setDescription(\"Whether a standby master runs the metric sink\")\n+          .setScope(Scope.SERVER)\n+          .build();\n+  public static final PropertyKey STANDBY_MASTER_WEB_ENABLED =\n+      booleanBuilder(Name.STANDBY_MASTER_WEB_ENABLED)\n+          .setDefaultValue(false)\n+          .setDescription(\"Whether a standby master runs a web server\")\n+          .setScope(Scope.SERVER)\n+          .build();\n \n   //\n   // Secondary master related properties\n   //\n   public static final PropertyKey SECONDARY_MASTER_METASTORE_DIR =\n       new Builder(Name.SECONDARY_MASTER_METASTORE_DIR)\n-          .setDefaultValue(String.format(\"${%s}/secondary-metastore\", Name.WORK_DIR))\n+          .setDefaultValue(format(\"${%s}/secondary-metastore\", Name.WORK_DIR))\n           .setDescription(\n               \"The secondary master metastore work directory. Only some metastores need disk.\")\n           .setConsistencyCheckLevel(ConsistencyCheckLevel.WARN)\n", "next_change": {"commit": "19c5de9b2be5545994874c753b695b356b6b7bd2", "changed_code": [{"header": "diff --git a/core/common/src/main/java/alluxio/conf/PropertyKey.java b/core/common/src/main/java/alluxio/conf/PropertyKey.java\nindex 5ce3fd5058..056dac931f 100755\n--- a/core/common/src/main/java/alluxio/conf/PropertyKey.java\n+++ b/core/common/src/main/java/alluxio/conf/PropertyKey.java\n", "chunk": "@@ -3129,7 +3152,7 @@ public final class PropertyKey implements Comparable<PropertyKey> {\n   // Secondary master related properties\n   //\n   public static final PropertyKey SECONDARY_MASTER_METASTORE_DIR =\n-      new Builder(Name.SECONDARY_MASTER_METASTORE_DIR)\n+      stringBuilder(Name.SECONDARY_MASTER_METASTORE_DIR)\n           .setDefaultValue(format(\"${%s}/secondary-metastore\", Name.WORK_DIR))\n           .setDescription(\n               \"The secondary master metastore work directory. Only some metastores need disk.\")\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "d587b031c3ace1e5d915f73079ed6d363fca31f7", "message": "Merge commit", "committedDate": null}, {"oid": "bdcfc7804b1a17a91bd10c6dc0ff919b727ab65a", "committedDate": "2020-02-22 23:50:58 -0800", "message": "Enable location fallback by default"}, {"oid": "1da58d100d218fd3aad6c5bb9d144d7d33f6584b", "committedDate": "2020-02-24 21:19:39 -0800", "message": "Add buckets for client cache on local page store"}, {"oid": "275e738dbd89c7503d185431831d8bd16d9fccda", "committedDate": "2020-03-02 09:54:11 -0800", "message": "Fix config check with default values"}, {"oid": "42dbb1906ee504dec9ba832334b00db4c365e1fd", "committedDate": "2020-03-03 14:20:07 -0800", "message": "Update scope on a property"}, {"oid": "0533b0f985d2e7b4756d53598e4f79d0916d952a", "committedDate": "2020-03-10 14:02:46 -0700", "message": "Add logging when RPC or Fuse calls too long"}, {"oid": "ba9756c552ed2a3ff1668508edcd4dc1e814456c", "committedDate": "2020-03-12 13:00:56 -0700", "message": "Implement async write into local cache"}, {"oid": "5c2d1a98fe847a58ad56d9cbddf97d53f3b350af", "committedDate": "2020-03-13 14:57:11 -0700", "message": "Add option to disable Web UI"}, {"oid": "400991db19a8715f6d0430bb6a6346b36f5e8c45", "committedDate": "2020-03-28 20:09:46 -0700", "message": "Add ability to override S3 max error retry count"}, {"oid": "408952af350286ef7993fe82897d3a65301c1861", "committedDate": "2020-03-30 11:53:51 -0700", "message": "Implement LFU evictor for client cache"}, {"oid": "4d6126a5d9e03128c01ca73f2a8cad12558e981c", "committedDate": "2020-04-05 23:20:52 -0700", "message": "Use worker podIP for connect and hostIP for block locations"}, {"oid": "81eae7230c4e0cbceb52243fdb61ee6560bf32fa", "committedDate": "2020-04-06 12:58:35 -0700", "message": "Remove doubled PK defaults for master client gc threshold"}, {"oid": "87dcf894f0d86cd06d8ac6922490f6daa77c660e", "committedDate": "2020-04-11 13:55:56 -0700", "message": "Retry block streams with exponential back-off policy"}, {"oid": "2529b73c6162e935edfc308cc390559c3911c025", "committedDate": "2020-04-11 14:03:25 -0700", "message": "Make connection multiplexing bounded for streaming channels"}, {"oid": "8f972432dcb35ce40b2f32c0694c25b220d6f343", "committedDate": "2020-04-16 12:44:08 -0700", "message": "Make master inbound message size configurable"}, {"oid": "b2c10e03be487cbb9e784a3b332bc04d16e806fa", "committedDate": "2020-04-20 10:44:36 -0700", "message": "Optimize gRPC managed resource handling"}, {"oid": "5c2aae1ba1fa8b81bf88a474f1eef91f1e47379b", "committedDate": "2020-04-22 20:15:32 -0700", "message": "Use property templates for max connection count"}, {"oid": "0936da79de547cdb1318819ae634362dfa861a47", "committedDate": "2020-04-22 21:38:53 -0700", "message": "Bump default connection count for streaming channels"}, {"oid": "ce36c332dcea40e82d86c8289d3fb81db99d890b", "committedDate": "2020-04-24 11:22:23 -0700", "message": "Fix fetching max-msg-size for embedded-journal transport"}, {"oid": "56bd456ceb35de161da1322619c3a2749d273096", "committedDate": "2020-04-25 12:12:29 -0700", "message": "Use pread for all remote hdfs api read calls"}, {"oid": "a2aa339182dc4e935ad29f28d66202ac4c586210", "committedDate": "2020-04-27 12:39:17 -0700", "message": "Make config reinit executor static"}, {"oid": "7e9aa12e4a9430a6ebf89c00083574220b6ba101", "committedDate": "2020-04-28 19:14:13 -0700", "message": "Remove default values for deprecated properties"}, {"oid": "3762d75eb611f388895ad9bea0746b17afc7cdd1", "committedDate": "2020-05-01 16:03:41 -0700", "message": "Improve multi-tier block management"}, {"oid": "1763bd81ab91450ad544a0c422613555e14d4edf", "committedDate": "2020-05-06 18:36:27 -0700", "message": "Make reserved space on directories only when required"}, {"oid": "6907d3b0bae32b8189990c0532e59545fd9647e4", "committedDate": "2020-05-12 00:55:44 -0700", "message": "Improve metadata sync operations"}, {"oid": "73611076eb43d3ebc9b5b4d06518bbdf8831f987", "committedDate": "2020-05-12 12:14:54 -0700", "message": "Do minor refactoring for tier-management"}, {"oid": "27013b60d453da73fdcf438e83f7330cc1193f93", "committedDate": "2020-05-12 22:48:26 -0700", "message": "Fix default metadata sync executor sizes"}, {"oid": "0b5b5a4edda2e1aa9b9a50da115ce5ee3ddf8b71", "committedDate": "2020-05-27 17:35:20 -0700", "message": "Implement non-intrusive locking for backups"}, {"oid": "3227dafec7d24f8dc3e2c07621771e965c594d88", "committedDate": "2020-05-28 11:38:59 -0700", "message": "Improve incremental active sync"}, {"oid": "f21772389fd4329a673e01722687aa9168096ef0", "committedDate": "2020-05-28 15:15:58 -0700", "message": "Refactor and fix block-transfer partitioner"}, {"oid": "6b5bf6ede7a51d32c2d4f0e8786276035cccc546", "committedDate": "2020-06-08 09:38:03 -0700", "message": "Fix NPE associated with s3 account owner"}, {"oid": "63fae67e18b49314d01bee3e9616b0cf25b44461", "committedDate": "2020-06-10 18:06:30 -0700", "message": "Add a cache for PropertyKey.isValid"}, {"oid": "86767c7206ec898a62b6b10c898eab8f1c0393bb", "committedDate": "2020-06-17 10:42:04 -0700", "message": "Implement interrupt based locking protocol over state-lock"}, {"oid": "f4c330923b5d2d3735b4c88e84a871622aeab71a", "committedDate": "2020-06-17 12:20:50 -0700", "message": "Bump master-network msg size to 100MB"}, {"oid": "d511e2b3eda4d95ae559fbb96b6d476de88d22de", "committedDate": "2020-06-19 13:13:39 -0700", "message": "Update version check"}, {"oid": "d3e19196d6226055b0401933528c4f399bf120b5", "committedDate": "2020-06-22 13:59:20 -0700", "message": "Change backup delegation property defaults"}, {"oid": "a892118f8ed9c1216380514be4db1de43c3329dd", "committedDate": "2020-07-17 13:04:06 -0700", "message": "Display PropertyKeys containing keywords as credentials"}, {"oid": "60148d92b7e1d0efdcddd527f996aa36c671818a", "committedDate": "2020-07-30 15:21:32 -0700", "message": "Enable compilation under jdk 11"}, {"oid": "ad0de4fd7f36aae6f61ef97280a81861c48da689", "committedDate": "2020-08-03 13:57:32 -0700", "message": "Cleanup after mesos scheduler"}, {"oid": "3a732ea98dba98032260e7e52e1a5aa4f1b178e9", "committedDate": "2020-08-07 12:22:30 -0700", "message": "Replace alluxio.worker.memory.size with alluxio.worker.ramdisk.size"}, {"oid": "3e3b6a6015a96f70e71af9c451e0b4c8ee0d6d62", "committedDate": "2020-08-10 16:22:03 -0700", "message": "Enable the JVM pause monitor by default"}, {"oid": "384f944fa6c6986adeca8e598b62feebd7872276", "committedDate": "2020-09-08 12:36:48 -0700", "message": "Add Azure Data Lake Gen 1 support for UFS"}, {"oid": "f03ace94f9d022b3e72dce5f72a64109a0b02a80", "committedDate": "2020-09-18 20:34:16 -0700", "message": "Fix slow and contented local cache restart"}, {"oid": "01b3d5d5a6802a4c9dfb3c15d624cc0553732ec6", "committedDate": "2020-09-21 09:55:37 -0700", "message": "Add s3 connection TTL config property"}, {"oid": "f0f72c666d1f0539dc62ddf33dae1a186f2de71c", "committedDate": "2020-10-05 20:13:18 -0700", "message": "Implement raft journal and snapshot management with Ratis"}, {"oid": "ef7bc67b3931bd1065775df4500dca401ea27255", "committedDate": "2020-10-15 14:23:16 -0700", "message": "Update Journal management doc and deprecated properties"}, {"oid": "279faa5346d3fe3fdbcabd0242c26d7d061faca5", "committedDate": "2020-10-28 11:26:02 -0700", "message": "Check and fail page store operation after timeout"}, {"oid": "d8193189a3de15cc01cfb315cb9c981b08b13e3e", "committedDate": "2020-11-03 14:57:14 -0800", "message": "Log slow remote reads and writes"}, {"oid": "182e08bfe20073f275ed28731401b8dbbf291072", "committedDate": "2020-11-05 15:56:40 -0800", "message": "Use longer remote io timeouts to account for slow operations"}, {"oid": "492e8dc2ae151ef1e2fd87e1f4ad7a48b6df18fe", "committedDate": "2020-11-10 10:30:14 -0800", "message": "Decrease default job retention time"}, {"oid": "3715744770022a5c3d131b865a32addd977cb482", "committedDate": "2020-11-10 17:00:44 -0800", "message": "Prevent the grpc reader from waiting for a server response"}, {"oid": "15db4f3cd392b47f5076a03567efa2972a05c572", "committedDate": "2020-11-17 14:23:43 -0800", "message": "Add configuration for Ratis retry cache expiry time"}, {"oid": "07cc674bbb9a579120e72965fe91abb5e3a78d9b", "committedDate": "2020-11-17 20:29:21 -0800", "message": "Use lower tiers in workers based on tier usage"}, {"oid": "9d0018f809e51346e13c6a68084f7f9311728efb", "committedDate": "2020-11-25 18:00:05 -0800", "message": "Support using IP as connect host"}, {"oid": "d5fd4f4c853aaa8f2a9aeadc0b8e8512b897d30d", "committedDate": "2020-12-09 15:53:51 -0800", "message": "Add Azure Data Lake Storage Gen 2 File System"}, {"oid": "f680be976299f6704817882a1175cca5e146e60f", "committedDate": "2020-12-10 13:09:34 -0800", "message": "Add Support for Azure Data Lake Gen2 OAuth Client Credentials"}, {"oid": "60c7c3a6031a71446004fa260ca0e703274b3b92", "committedDate": "2020-12-10 14:46:35 -0800", "message": "Add retries when failed to evict"}, {"oid": "355bca2291caef1370858684316b6a188d4f105e", "committedDate": "2020-12-10 20:26:14 -0800", "message": "Add JNI-based Fuse support"}, {"oid": "ad4c22aff052c96b16c9eed880a8a6b2e0f48bac", "committedDate": "2020-12-11 13:29:01 -0800", "message": "Disable default jni fuse"}, {"oid": "6d0799724a3b2e1a1cfd896ea600e767d0a7792d", "committedDate": "2020-12-16 13:51:28 -0800", "message": "Add ratis size related configuration"}, {"oid": "0a745ccd8ba2f2efada9e6dd1a48d0afe65eee7c", "committedDate": "2020-12-22 21:20:58 -0800", "message": "Disable authority check"}, {"oid": "9cc736974a8d6836e86f47faa554e7fa1389aed8", "committedDate": "2021-01-04 18:08:59 -0800", "message": "Add a configuration parameter for async cache manager workqueue size"}, {"oid": "d5281a1e58741fa5bf655cc2e35b01a9168ab1bd", "committedDate": "2021-01-05 11:12:44 -0800", "message": "Change to journal large table partitions separately"}, {"oid": "04c447d896ada325dd9797dc166f2a86cec99c8c", "committedDate": "2021-01-26 14:33:23 -0800", "message": "Fix backup lock acquisition"}, {"oid": "33b564bd37e95ee471ef0823095fcaac79151714", "committedDate": "2021-01-28 16:33:09 -0800", "message": "Support table quota for Local cache"}, {"oid": "67a1ae4881aa0165008bb040c57d0f090df3ef5c", "committedDate": "2021-01-29 14:07:00 -0800", "message": "Fix backup suspend timeout"}, {"oid": "050c161fbb8aa9070a06cc40cfcaebb4aa14ef1a", "committedDate": "2021-02-02 11:46:25 -0800", "message": "Address race condition for async persist"}, {"oid": "2fb220b67cd70c1131c9118dcc7ceea0ca9f874d", "committedDate": "2021-02-02 12:56:02 -0800", "message": "Prevent leader from writing to embedded journal after stepping down"}, {"oid": "666d51b11c59ed2d83aaa2c5ab661994f5ecdc3f", "committedDate": "2021-02-10 11:08:03 -0800", "message": "Add Initial journal replay before ZK connections in ufs journal"}, {"oid": "a4d1c1b121ce8aeae27dd2006aa8891988a38115", "committedDate": "2021-02-17 16:35:29 -0800", "message": "Retry on benign racing for local cache"}, {"oid": "f6661224cc51661784660fbf376328afeeacd307", "committedDate": "2021-02-18 16:19:02 -0800", "message": "Add GCS Version 2 integration using Google cloud API"}, {"oid": "f98d4d597db1f7a9daec2acb1a5e0a1d246a4ac9", "committedDate": "2021-02-19 19:16:00 -0800", "message": "Catch UnsatisfiedLinkError for alluxio.worker.ramdisk.size, improve desc"}, {"oid": "45f2a1a7042aa12dce8a135a092c28d3d9e2f693", "committedDate": "2021-02-24 14:54:46 -0800", "message": "Remove redundant blank in PropertyKey"}, {"oid": "478ab35a662c712ff224dbf40235fa905ac388a1", "committedDate": "2021-02-25 13:51:50 -0800", "message": "Report error if any of the sync paths failed in syncMetadata"}, {"oid": "c73bfd7aa5899b342bdd663bc06cf0d8dc88d68e", "committedDate": "2021-02-25 16:45:02 -0800", "message": "Skip object store parent creation"}, {"oid": "797ece179773a1c559fb7898f81dc606fc7f8946", "committedDate": "2021-02-26 19:10:44 -0800", "message": "Add logging on slow UFS calls"}, {"oid": "f875a1656557213e3bc5ad618faf76afcfe670b6", "committedDate": "2021-03-01 15:52:42 -0800", "message": "Change JNI-Fuse to default alluxio POSIX API implementation"}, {"oid": "9f6f5904a3208baaf60b2b91024b3afb59d87127", "committedDate": "2021-03-01 19:29:26 -0800", "message": "Modify journal docs"}, {"oid": "04781644462a50b85ce66203fe4ddf3db1302b64", "committedDate": "2021-03-04 16:02:25 -0800", "message": "Support to skip corrupt journal entry when recovering from backup"}, {"oid": "4395b546313a6144cce1ea0b18bfa082f9d80ec6", "committedDate": "2021-03-10 17:54:53 -0800", "message": "Simplify code of Worker-side RPC handling"}, {"oid": "31d47422ac50124fcb95934c705e2ddb2364ff55", "committedDate": "2021-03-18 10:54:29 -0700", "message": "[SMALLFIX] Remove unused Strings constant in PropertyKey.java"}, {"oid": "50def08f0939401c65c3d9966b0b4764b4329a60", "committedDate": "2021-03-18 15:31:43 -0700", "message": "[SMALLFIX] Remove unused String constant in PropertyKey.java"}, {"oid": "eefdfd9abab5ab0e64bbb0eb5f672c44163d751e", "committedDate": "2021-03-18 19:14:13 -0700", "message": "Change GCS V2 to be the default GCS version"}, {"oid": "cb4852ff0014f9646d41a17e1185dcdbbd8b38b8", "committedDate": "2021-03-23 13:26:48 -0700", "message": "Enable ROCKS metastore as default"}, {"oid": "45fbcdb3322532fdcb9c0d8b64d21497e9525bff", "committedDate": "2021-03-23 19:25:18 -0700", "message": "[SMALLFIX] Hide test only property"}, {"oid": "09659b8248d65bfb9e4fa19115c5ff199bbd3b47", "committedDate": "2021-03-24 18:15:13 -0700", "message": "Support Fuse Mount with Worker to Reduce RPCs"}, {"oid": "aab820c7f589fdb8714baf2581142e136f6b36b0", "committedDate": "2021-03-25 11:06:59 -0700", "message": "Reduce default inode cache size"}, {"oid": "feb4aa08ea675ef1c49005c2f6c401e07bab80cf", "committedDate": "2021-03-25 16:10:20 -0700", "message": "Implement nondeterministic LRU"}, {"oid": "bccbda8d39ef8e4a9aa10b0061855310412ed91b", "committedDate": "2021-03-31 14:24:41 -0700", "message": "Load cluster conf only if property is set"}, {"oid": "72fb5d42b48bce67da13061d429a0e5274dab9d6", "committedDate": "2021-04-07 11:13:53 -0700", "message": "Add configuration to stop master process on demotion"}, {"oid": "b5c5621ff42faaae3381a9cc9343c6763ea54b4a", "committedDate": "2021-04-08 22:49:34 -0700", "message": "Remove property of server-side buffer size when writing blocks"}, {"oid": "a272616e0ddf3bc27ea778f06482b54a3c8b8a5f", "committedDate": "2021-04-09 10:24:46 -0700", "message": "Update default client pool size to accommodate more concurrent computes"}, {"oid": "abfd6e1c19aac27b2e68b9cc2c20681e0292fd0f", "committedDate": "2021-04-12 08:14:26 -0700", "message": "Add metrics to JNIFuse and StackFS"}, {"oid": "b1b3f409ab3acfcd66d0e47b97c59f795c368837", "committedDate": "2021-04-14 00:26:59 -0700", "message": "Fix Fuse write then read problem in async release and support umount"}, {"oid": "d60a4510a08c75d159ed2a6455ba37dba5aaa6cd", "committedDate": "2021-04-14 13:24:26 -0700", "message": "Enable /mnt/alluxio-fuse as default worker fuse mount"}, {"oid": "ae96f3274ddd242cc1179c1a7552bd3caae2acfa", "committedDate": "2021-04-20 11:09:49 -0700", "message": "Add journal space monitor"}, {"oid": "ebe719bd9b2b309f74ffc38005de2b0e1f5145a0", "committedDate": "2021-04-21 11:50:54 -0700", "message": "Split read and write timeouts"}, {"oid": "89f897169fb7823f24caebf0a7dc8cb97003fcca", "committedDate": "2021-04-21 13:54:44 -0700", "message": "Handle client cache failure on \"no space left on device\""}, {"oid": "3ef4728df196c17e4eb397f6612e41b68fe26791", "committedDate": "2021-04-25 10:03:20 -0700", "message": "Support cephfs direct and native as underfs of alluxio"}, {"oid": "fbf306c8cb75a4f58b42a1d30d3c6140baa06c48", "committedDate": "2021-04-29 20:44:42 -0700", "message": "[SMALLFIX] Add space to alluxio.job.worker.throttling description"}, {"oid": "9e4c83d84c7c80d1166668b9ee82d51969e47c3d", "committedDate": "2021-04-30 02:38:31 -0700", "message": "[SMALLFIX] Change alluxio.logger.type property to hidden"}, {"oid": "472710e27aae6d45eaa984c06304f9ef103edd35", "committedDate": "2021-04-30 11:50:20 -0700", "message": "Remove whole ceph from master"}, {"oid": "9c1c15fb66c7f726e33bc760e67c181227728c4d", "committedDate": "2021-05-04 16:45:05 -0700", "message": "Cancel sync job in middle of ufs calls if client cancelled"}, {"oid": "6253b6e5161160eae4ba1eb33907de6183e5f904", "committedDate": "2021-05-06 11:39:55 -0700", "message": "Add retry options to GCS requests"}, {"oid": "7f3537c9370e919a411b0028a95695c50d1fe0d0", "committedDate": "2021-05-15 17:30:12 -0700", "message": "Add Cephfs and Ceph hadoop UFS modules"}, {"oid": "33f2697ddb151636e0b305b74669b2ddfc5d5c4e", "committedDate": "2021-05-18 11:58:26 -0700", "message": "Consolidate usage of tier names in the repo"}, {"oid": "70a31763aa4766230b1c89def870606121daf7c7", "committedDate": "2021-05-19 17:10:28 -0700", "message": "[DOCFIX] Reorder @see tags of PropertyKey.isDeprecated"}, {"oid": "cf7fe8fd925cae3d909a0ea99b3697d329ebb275", "committedDate": "2021-05-19 17:11:05 -0700", "message": "[DOCFIX] Reorder @see tags of PropertyKey.isRemoved"}, {"oid": "265c24f618a9b3190347961ff495190ab05f79f4", "committedDate": "2021-05-19 20:40:23 -0700", "message": "Improve CephInputStream to be thread safe"}, {"oid": "d6d7e78a3e5fe5de0e26ea129e44c12d3d9181bc", "committedDate": "2021-05-24 13:30:49 -0700", "message": "Make connection pools per connection instead of per db for hive udb"}, {"oid": "5c9c99f1955905f9e8e7232744fd63b7b4a9f8a9", "committedDate": "2021-05-28 10:52:32 -0700", "message": "Support Fuse Auth policy"}, {"oid": "810033de8f81f818632d628888001dc51223b063", "committedDate": "2021-05-28 15:26:19 -0700", "message": "Add metrics for inode and block heap sizes"}, {"oid": "6d501cabf03a0af22f13ca88a9c791ec21edaaeb", "committedDate": "2021-06-07 12:51:51 -0700", "message": "Fix metrics performance regression"}, {"oid": "28e0cabc3e076de1873aecdee3770213bb3b0e37", "committedDate": "2021-06-07 19:45:59 -0700", "message": "Change estimate of heap size per inode from 350 bytes to 2kb"}, {"oid": "f9f22097ce44cafe15bfeb6ec56cbf1c7e8659b3", "committedDate": "2021-06-13 17:22:17 -0700", "message": "Support update config"}, {"oid": "d135ce1c8f4147cb4ecebe2f0e7732f55d7ef713", "committedDate": "2021-06-13 17:24:21 -0700", "message": "Implement Shadow Cache"}, {"oid": "0abc4df4926166a6f179a9c1d42c3c510fad558d", "committedDate": "2021-06-14 16:43:17 -0700", "message": "Fix various aspects of pin to specific medium"}, {"oid": "d964cd4166ce374168c06f561eb22c4f15bdfb1b", "committedDate": "2021-06-23 11:12:18 -0700", "message": "Add support for publishing REST from root path"}, {"oid": "61085eb9fac823d08fd8e3b15f863b9a59b66589", "committedDate": "2021-06-23 15:55:57 -0700", "message": "Revert \"Add support for publishing REST from root path\""}, {"oid": "624d8468a6716fa81b2739c24066bef6f362632f", "committedDate": "2021-07-01 11:47:37 -0700", "message": "Disable interrupt-cycle by default to avoid RPC interruption"}, {"oid": "11ae65457bc858b0405c25803cfcd24d2d243705", "committedDate": "2021-07-06 14:28:54 -0700", "message": "Add journal checkpoint warnings on UI"}, {"oid": "ebcf0f7c83937d405caee611ac57dd22c85fa472", "committedDate": "2021-07-07 14:11:49 -0700", "message": "Remove ineffective property keys for embedded journal"}, {"oid": "db01aae966849e88d342a71609ab3d910215afeb", "committedDate": "2021-07-21 13:53:01 -0700", "message": "Remove embedded journal heartbeat interval configuration"}, {"oid": "c93e61e3c4c432a4f23dd9171725e5e2194e7bea", "committedDate": "2021-08-04 14:03:11 -0700", "message": "[DOCFIX] Improve documentation surrounding worker tiered stores"}, {"oid": "83c16f67c04c854ba731a638be989154d9885925", "committedDate": "2021-08-09 17:18:48 -0700", "message": "Support Web server for fuse process"}, {"oid": "ea49f3b31da42de16c6777573c31a2c4b7e9b73b", "committedDate": "2021-08-10 11:57:06 -0700", "message": "Add scaffold for TLS"}, {"oid": "d76cf9c79b48d5f49a769facbc017729cbb47fa1", "committedDate": "2021-08-10 14:24:15 -0700", "message": "Improve initialization of SslContextProvider factory instantiation"}, {"oid": "ec3c098a75d5bf5068005cad58fc4bd259b38502", "committedDate": "2021-09-01 19:39:57 -0700", "message": "Update default ZK path for jobmaster"}, {"oid": "b26d200ca1500a67d184842bb30e05af25c6c949", "committedDate": "2021-09-02 16:43:27 -0700", "message": "Add configuration of min and max election timeout"}, {"oid": "05e081d15c0a98ac9939b9301f6f771652d6ab94", "committedDate": "2021-09-10 15:54:31 -0700", "message": "Update load command using new cache request"}, {"oid": "b5f318e7ac1cfb3effc73c285f500de29c10acdb", "committedDate": "2021-09-13 11:57:43 -0700", "message": "Add property to skip listing broken symlinks on local UFS"}, {"oid": "665960e5d526bfcbd3c2f18a2a77c902447054e8", "committedDate": "2021-09-20 12:13:53 -0700", "message": "Support shuffle master addresses for rpc client"}, {"oid": "70112cb226119c7bb73f8ce0c25252d099cdd840", "committedDate": "2021-09-21 17:37:48 -0700", "message": "Introduce deadlines for sync RPC stubs"}, {"oid": "69862eeeb3e3f54e843ab19843f54fe6d3653e2a", "committedDate": "2021-09-22 17:06:09 -0700", "message": "Revert \"Introduce deadlines for sync RPC stubs\""}, {"oid": "0cf5b91714954508c4d31957aa3dfd83922abf17", "committedDate": "2021-09-23 09:50:48 -0700", "message": "Support Hawei Cloud (PFS && OBS)"}, {"oid": "0526fae640b724bd4fbda7813ab65750c410ab87", "committedDate": "2021-09-27 11:40:02 -0700", "message": "Support logical name as HA address"}, {"oid": "e6cded491eabb439fbda0195ba650ee6a1a4c35d", "committedDate": "2021-09-27 20:22:45 -0700", "message": "Introduce client-side keep-alive monitoring for channels of RPC network"}, {"oid": "3f94a5bc5225613e2b01f4b88be18a6a10b7204b", "committedDate": "2021-09-30 21:08:17 -0700", "message": "Enable additional keep-alive configuration on gRPC servers"}, {"oid": "a9f121c2e0d7444e168f336f5981e4938626a19a", "committedDate": "2021-10-01 23:46:52 -0700", "message": "Implement FS operation tracking for improving partition tolerance"}, {"oid": "36a4d5c93c2756bcaae5c76cc295a5442d6abad8", "committedDate": "2021-10-06 09:38:28 -0700", "message": "Set S3 endpoint region and support OCI object storage"}, {"oid": "c061b93cb5825916c33b2e282667d23ae38e374a", "committedDate": "2021-10-11 15:28:00 -0700", "message": "Increase allowed keep-alive rate for master RPC server"}, {"oid": "b14f6e6fc031352eb07df252731dae602be61652", "committedDate": "2021-10-12 18:12:55 -0700", "message": "Enable more settings on job-master's RPC server"}, {"oid": "bd7a958fa7f0c15119098f41f9b8b02f1d49d3b3", "committedDate": "2021-10-13 00:24:48 -0700", "message": "Allow higher keep-alive frequency for worker data server"}, {"oid": "2134192a1debbe8cee1107cdce51ac84eeffc072", "committedDate": "2021-10-14 13:28:50 -0700", "message": "Add retry support for initializing AlluxioFileOutStream"}, {"oid": "4f870de77caaceaa5dc30229330a95d0e4eb4939", "committedDate": "2021-10-14 13:29:21 -0700", "message": "Remove fall-back logic from journal appending"}, {"oid": "fe0420c6c4bc65310637351aae2df3d01ca11ff2", "committedDate": "2021-10-18 15:48:04 -0700", "message": "Add fall back logic for counting cpu in container is 1"}, {"oid": "73bf2ceb6ba0d450a8ce9fd471f3ecd237efb22b", "committedDate": "2021-10-19 13:26:45 -0700", "message": "Display configuration table in the worker page"}, {"oid": "ab5e505a7ad6df477e5b23e0c43cd06c511b4580", "committedDate": "2021-10-20 13:44:29 -0700", "message": "Implement Resource Leak Detection"}, {"oid": "dc95b3bb0ad18179140970d666237b12b53806a8", "committedDate": "2021-10-27 09:41:32 -0700", "message": "Add Batched job for job Service"}, {"oid": "63c524e5360e3503b7425ed30e693fae1f695c4e", "committedDate": "2021-10-27 11:11:20 -0700", "message": "Enable collecting metrics from user"}, {"oid": "9deca9546aa23a56c4c11808f4cbd0bf00a4d128", "committedDate": "2021-10-27 18:24:31 -0700", "message": "Add Hub Manager and Agent components"}, {"oid": "0cd3b7e3240f4c27d27191e1d8fe1a2e76a61d04", "committedDate": "2021-10-27 21:02:47 -0700", "message": "Replace ForkJoinPool with FixedThreadPool"}, {"oid": "e883136af0aa545fe46c83849560782f10766e30", "committedDate": "2021-10-28 09:01:47 -0700", "message": "Add master-side flow control for worker registration with RegisterLease"}, {"oid": "7c020f6f277fcc2fd74a91240f612e12ed1c6e96", "committedDate": "2021-10-29 16:18:23 -0700", "message": "Convert worker registration to a stream"}, {"oid": "e76258f4d4d9a17ca4a1cb709ff37b4ee6803922", "committedDate": "2021-10-29 16:26:26 -0700", "message": "Fix s3 bucket region"}, {"oid": "8d5e59ee34af92216eeb60660f24e00de1f7ac28", "committedDate": "2021-11-01 14:21:30 -0700", "message": "Add authentication logic for Hub Manager"}, {"oid": "17fda4d668660434319ecc527e186eb41f80c741", "committedDate": "2021-11-01 21:31:42 -0700", "message": "Implement configurable ExecutorService creation for Alluxio processes"}, {"oid": "c202b3dfca43309f46e06ea09a3e9e233a2c7f3c", "committedDate": "2021-11-02 17:29:10 -0700", "message": "[DOCFIX] Update Posix API doc"}, {"oid": "e58fdaf20d93af648969c67719f2aa34fd843287", "committedDate": "2021-11-04 11:22:59 -0700", "message": "[DOCFIX] Tweak FUSE metric and property descriptions"}, {"oid": "afe22de6b2bcb6eb6e891d361fda198e6cd43711", "committedDate": "2021-11-04 11:24:34 -0700", "message": "[DOCFIX] Fix `Journal.md` and related strings in code"}, {"oid": "2e8258c10319d53bc9e70ee7c7ead04d0b46c999", "committedDate": "2021-11-04 17:08:59 -0700", "message": "Change description secondary to standby"}, {"oid": "636d061afdd66c6d4cf82cbbb225a2ece4264858", "committedDate": "2021-11-08 03:30:30 -0800", "message": "[SMALLFIX] Add description for 3 property keys"}, {"oid": "0370ec4f3c222d98350095f8286fc9b768c1f5b5", "committedDate": "2021-11-10 14:32:04 -0800", "message": "Support auto abort multiupload after timeout"}, {"oid": "8f74e6584b6d2d71be3a3737057808b6f77c44ae", "committedDate": "2021-11-17 14:58:19 -0800", "message": "Upgrade Checkstyle version"}, {"oid": "2e2914dc473435cbaae8924286fb59b8d195d39c", "committedDate": "2021-11-24 11:19:21 -0800", "message": "Change the thread pool for `CompletableFuture.runAsync`"}, {"oid": "b892c642ecbce3dd465eb46f634cc419c2c07430", "committedDate": "2021-11-30 15:12:57 -0800", "message": "Add clear metadata cache logic"}, {"oid": "1dabaeba80c4c547fe4d32c0da429b1e7377479d", "committedDate": "2021-12-02 09:51:57 -0800", "message": "Enable standalone fuse JVM pause monitoring service"}, {"oid": "2e046aae83facd12cd2776b960e42d7a66cead8c", "committedDate": "2021-12-02 20:31:40 -0800", "message": "Fix s3 complete multipart upload request timeout"}, {"oid": "e0bd13efcf98c79ef7d7848a22a48fe0408c1680", "committedDate": "2021-12-03 11:11:55 -0800", "message": "Refactor ExecutorServiceBuilder and add to Worker gRPC server"}, {"oid": "5063016989da5284e1a94e80b7b2f2258aadaa7e", "committedDate": "2021-12-16 17:18:47 -0800", "message": "Use boolean instead of String as default value type"}, {"oid": "60102fdc4fbce87b236ddecf483284945fbfd5e0", "committedDate": "2021-12-22 11:25:00 -0800", "message": "Use user-defined Hub cluster ID"}, {"oid": "f64540541748ba088eafbbac37fbd8c0458c410e", "committedDate": "2022-01-10 18:09:16 -0800", "message": "Add LoadTableCommand"}, {"oid": "3064609e7489ea3c2111fd6d3c85b48270dc18f8", "committedDate": "2022-01-19 10:51:21 -0800", "message": "Add default_permissions fuse mount option"}, {"oid": "c218714d506093b7d24a45eb312f34357a11d7d7", "committedDate": "2022-01-19 13:42:42 -0800", "message": "Fix default value and description for inode cache property key"}, {"oid": "a10823a9523e200f1665228cd4eb3ea7659a0d15", "committedDate": "2022-01-25 18:01:39 -0800", "message": "Support web server/metrics sink in standby masters"}, {"oid": "fa54b1bcd9fc891413cbd168862706d0fad0ad02", "committedDate": "2022-01-27 15:36:08 -0800", "message": "Add stacks page in worker web UI"}, {"oid": "067e9d432166d44a82fb26aa1ffa8660b665e2f0", "committedDate": "2022-01-27 17:56:17 -0800", "message": "Add worker startup timeout property key"}, {"oid": "38f110d924e016eff159ac1c8bb5cac14d3a2696", "committedDate": "2022-02-08 18:32:14 -0800", "message": "Integrate Elastic stack with Hub"}, {"oid": "b9c66ca164d363bed9bcefb776a0b0f438d96441", "committedDate": "2022-02-15 10:53:02 -0800", "message": "Give warning on setting alluxio.logs.dir in ALLUXIO_JAVA_OPTS"}, {"oid": "050882ecee4ae4dc1bcf3eadcf0ecab3ca192f53", "committedDate": "2022-02-16 14:51:43 -0800", "message": "Add support for customize PropertyKey validation function"}, {"oid": "a5d2a9f2bd7f88ddce9176148c97dd6fc277b306", "committedDate": "2022-02-22 22:50:01 -0800", "message": "Fix Alluxio/new-contributor-tasks#638"}, {"oid": "f4f80a2d571903dbbbd824bf8fc5290a9b1a8d8c", "committedDate": "2022-02-25 10:27:04 -0800", "message": "Request all followers for snapshot instead of a single follower"}, {"oid": "2cb9d9a994e7dd389bf1d30d93f3d522d4bf3123", "committedDate": "2022-02-25 23:05:56 -0800", "message": "Add type in PropertyKey and enforce boolean type"}, {"oid": "6f0783304e80e0bb171c5ab135d5bbfec8cf631d", "committedDate": "2022-02-28 12:50:27 -0800", "message": "Revert \"Add type in PropertyKey and enforce boolean type\""}, {"oid": "6f3fe6f4637261044b3938e620ac00e6e6e75708", "committedDate": "2022-02-28 21:38:26 -0800", "message": "Add support for libfuse3"}, {"oid": "b8aad79c004719566d679632026adefdcba8dea7", "committedDate": "2022-03-01 11:17:58 -0800", "message": "Increase block-read timeout duration to 5mins"}, {"oid": "efe8f4c3f050910179f480896b424c93990a6941", "committedDate": "2022-03-01 11:42:51 -0800", "message": "Use the s3a as property key name prefix for s3 compatible object stores"}, {"oid": "ff293c735c7f12eec4ad8e4ec66a1c2f9598c0a8", "committedDate": "2022-03-02 14:17:44 -0800", "message": "Restore stream in/out timeouts to a sane value"}, {"oid": "c1e12fb78bb0110c6e5d85ca112d7a0d904a7c8a", "committedDate": "2022-03-09 02:08:53 -0800", "message": "Add a configuration to set ufs fetch timeout"}, {"oid": "6accf76ff7915a94e78c88d8e0f96a0951d379eb", "committedDate": "2022-03-10 16:34:53 -0800", "message": "Improve state-lock acquisition defaults"}, {"oid": "40d2a06c1e8ceeff35e7f7ec0eaef549164c86dd", "committedDate": "2022-03-11 13:01:52 -0800", "message": "Remove fuse default_permission"}, {"oid": "7e8db180ebd858cda45e7a37ddb8e4d1461b472d", "committedDate": "2022-03-23 14:29:19 -0700", "message": "Remove PropertyKey.Template.MASTER_JOURNAL_UFS_OPTION"}, {"oid": "4f7883665ca0a6c0b490a57fe41ca7b98028071c", "committedDate": "2022-03-23 20:35:25 -0700", "message": "Add type in PropertyKey and enforce boolean type"}, {"oid": "79ade1e2f40c046b45b4e8c18fed604388322585", "committedDate": "2022-03-23 20:35:25 -0700", "message": "Enforce Integer PropertyKey type"}, {"oid": "f90d556b11fe78721e42a1a5f5b32746cbf1408a", "committedDate": "2022-03-23 20:35:25 -0700", "message": "Remove getLong in AlluxioConfiguration"}, {"oid": "e3e262816e1654960dcb5fc3877cfd05badd6bb9", "committedDate": "2022-03-23 20:35:25 -0700", "message": "Enforce double PropertyKey"}, {"oid": "615f89d6d79bdca2f3a302dff4f5f962336038ad", "committedDate": "2022-03-23 20:35:25 -0700", "message": "Enforce enum PropertyKey type"}, {"oid": "a8b22f1ba4de752a14db3a41ab23dc33b6942211", "committedDate": "2022-03-23 20:35:25 -0700", "message": "Enforce duration PropertyKey type"}, {"oid": "88ea9afe7cc71ca8fb02fcf52ffc8069a0bcf6d7", "committedDate": "2022-03-23 20:35:25 -0700", "message": "Enforce data size PropertyKey type"}, {"oid": "19c5de9b2be5545994874c753b695b356b6b7bd2", "committedDate": "2022-03-23 20:35:25 -0700", "message": "Make string PropertyKey explicit"}, {"oid": "a9548650a030d6f87a318f949d187a3e6d722896", "committedDate": "2022-03-23 20:35:25 -0700", "message": "Add class type for PropertyKey"}, {"oid": "a2139510ad2fa5b4db5584f811d3ee9d424c5507", "committedDate": "2022-03-23 20:35:25 -0700", "message": "Enforce list type PropertyKey"}, {"oid": "f69a6f245b0e5d4ea40d929bcfb35fb805c3f7e6", "committedDate": "2022-03-25 09:32:09 -0700", "message": "Handle null in PropertyKey.parseValue"}, {"oid": "95181efe2cef62c95ef29e75a0adf5fd1f2ba343", "committedDate": "2022-03-29 17:12:46 -0700", "message": "Remove Hub code"}, {"oid": "5393b6a60e3480a370b37872ef06871a4e7456bf", "committedDate": "2022-03-30 16:47:44 -0700", "message": "Improve fuse umount"}, {"oid": "f8e5e70d8116888e4e246be73ec13467f73142fa", "committedDate": "2022-03-30 16:48:04 -0700", "message": "Increase worker streaming register timeout"}, {"oid": "65290993dc8fa295e2d998d28434dca6c27a2298", "committedDate": "2022-03-31 14:44:54 -0700", "message": "Allow string values when setting AlluxioConfiguration"}, {"oid": "250bb35556dd0e347d372ca583ef70097d24e01e", "committedDate": "2022-03-31 15:14:07 -0700", "message": "Add timeout logic to local block reading/writing"}, {"oid": "e6158f11938809a4e3c8d458883326443a36352b", "committedDate": "2022-03-31 17:03:00 -0700", "message": "Fix the property builder"}, {"oid": "662c9c9e1207df68daf1cf7deb1aa5b39df07c6c", "committedDate": "2022-04-01 12:11:22 -0700", "message": "Make log compaction local in embedded journal"}, {"oid": "0a982c2b209130cb43f10533a43059d346d07a16", "committedDate": "2022-04-01 14:17:28 -0700", "message": "Store ms byte as string"}, {"oid": "e5f53a970f1a9f4c5d9214d650490a79dfa4efae", "committedDate": "2022-04-06 13:27:30 -0700", "message": "Improve fuse mount based on user configuration"}, {"oid": "312b2d6c8b26dc5660db42923b8669ef3671fa2f", "committedDate": "2022-04-06 16:42:55 -0700", "message": "Add a default implementation of cache filter to local cache"}, {"oid": "f3d24778d33a51d1fac302e545e975bee939ac29", "committedDate": "2022-04-07 00:40:10 -0700", "message": "Add metadata tags to the Alluxio proxy's S3 REST API"}, {"oid": "acf8c5206be8f36324aa49a7a0642e78ad450d45", "committedDate": "2022-04-10 19:51:30 -0700", "message": "Fix FUSE deprecated property key"}, {"oid": "8dcbc1051c4bff18391afb33e198e778bd37bb9b", "committedDate": "2022-04-13 11:33:44 -0700", "message": "Improve Fuse.statfs to avoid copyProperties and cache on client side"}, {"oid": "d658be4489a8b1895ab60f1fad2df12aaa7f738f", "committedDate": "2022-04-13 13:36:33 -0700", "message": "Fix property key template type"}, {"oid": "26fad1333d2201b53bac4b62217e4d9e5a96ae76", "committedDate": "2022-04-15 10:10:34 -0700", "message": "Revert k8s fuse force umount"}, {"oid": "3c2525c9cc0593ae3a3da5d1d5123c8eacf776ab", "committedDate": "2022-04-18 11:59:50 -0700", "message": "Refactor property key template constructor"}, {"oid": "92f08069ef54c6079ea3cadd625f49add273bec9", "committedDate": "2022-04-19 14:06:01 -0700", "message": "Validate `Journal.md`"}, {"oid": "258d85f11cb173e8b9bac9cee812e9ffafa07069", "committedDate": "2022-04-20 08:51:51 -0700", "message": "Add fall back for availableProcessor()"}, {"oid": "73143268038b4a542967b5c40c199d4c1174457d", "committedDate": "2022-04-22 15:03:06 -0700", "message": "Revert \"Add timeout logic to local block reading/writing\""}, {"oid": "2725136b539f495aa9392ad537a2d58de1777bfb", "committedDate": "2022-04-25 21:11:02 -0700", "message": "Bump Hadoop version to 3.3.1"}, {"oid": "9545c3e8b82aa925b5e2ed921778a97c00187a3f", "committedDate": "2022-05-04 20:17:46 -0700", "message": "Add a reading buffer to local cache for tiny read"}, {"oid": "401e561942b19a0487e60043edf28a8fa8a65c35", "committedDate": "2022-05-06 15:39:29 -0700", "message": "Support shadow cache with clock cuckoo filter"}, {"oid": "89f90873531a63fe4237fd7df178afd2fd0c8558", "committedDate": "2022-05-07 10:59:34 -0700", "message": "Expose RockDB metrics as Alluxio metrics"}, {"oid": "dc3ba3e393d17f7e085a000cc609b1368a14a05b", "committedDate": "2022-05-09 14:58:14 -0700", "message": "Add InstrumentedExecutorService for monitoring executor services"}, {"oid": "f9f810e673fe246973ae7ef198741f635b18f3e9", "committedDate": "2022-05-12 23:44:47 -0700", "message": "Use unpooled wrapped buffer in remote block read"}, {"oid": "793cc581d43e6478ced84edf5f30f6483bcae5ea", "committedDate": "2022-05-13 15:07:17 -0700", "message": "Implement the read path of paged local block store"}, {"oid": "1572a38d6503f3152d06e5c0a57b74490b0b36ab", "committedDate": "2022-05-18 16:50:46 -0700", "message": "Fix code style"}, {"oid": "d5234b83dacd21364eeb40c20e88bc142d3b57be", "committedDate": "2022-05-26 09:39:13 -0700", "message": "Support parse authorization headers for s3 proxy"}, {"oid": "18486b80e1a094fddf41a2f8939fde6001a7f5ee", "committedDate": "2022-06-10 11:19:11 -0700", "message": "Change the default value of async write for local cache"}, {"oid": "d2e502b79e46fb4e3eb9576df97460c667b11a8f", "committedDate": "2022-06-14 14:30:25 -0700", "message": "Refactor UnderFileSystemConfiguration"}, {"oid": "eaf803c96a5971e7ad214fa3e39f4613cdb87160", "committedDate": "2022-06-16 10:31:33 -0700", "message": "Create automatic backup when shutting down Alluxio master"}, {"oid": "9e85bcb4559453d00438870c0f91e8bd58ad5265", "committedDate": "2022-06-16 16:27:22 -0700", "message": "Add UfsIOManager to control IO throughput with UFS"}, {"oid": "2f7cc8e0fcf36d747e86ba786f3c8e0daba85b81", "committedDate": "2022-06-17 07:46:16 -0700", "message": "Set direct_io as the default fuse mount option for JNIFuse"}, {"oid": "53568f3b53b3d226f5ae1c59bc7ff2d4c102f47b", "committedDate": "2022-06-21 11:25:39 -0700", "message": "Refactor fuse options"}, {"oid": "c2218d1b4cb55fb1639ddc36f62a25f8d8dc6f92", "committedDate": "2022-06-22 12:58:10 -0700", "message": "Optimize the access speed of the inAlluxioData UI page"}, {"oid": "3b1bdb3b80e56d3528bc6f41a923da6e28e808ee", "committedDate": "2022-06-23 00:38:21 -0700", "message": "Add cache for CapacityBaseRandomPolicy"}, {"oid": "89c13a8e6aa2323fc7c3ecb9b93e7161404809b2", "committedDate": "2022-06-27 10:04:03 -0700", "message": "Allow master node RocksDB to be configured using configuration files"}, {"oid": "faaeed91939f3114d94e8dc09edc5b22fa807c1d", "committedDate": "2022-07-01 20:05:18 -0700", "message": "Add missing functionality to S3 API multipart-uploads"}, {"oid": "fa19bf494d5306dc86a03ae2cb0d37acfccd0131", "committedDate": "2022-07-05 20:26:33 -0700", "message": "Implement multiple dir support in local cache"}, {"oid": "ad617cf216833f745cbececf9bb31cd0f09648a0", "committedDate": "2022-07-14 12:46:43 -0700", "message": "Disable master heap estimation until we find a more accurate way"}, {"oid": "94316d7ab9155e9b8a05b60702c173d5a59078cb", "committedDate": "2022-07-19 12:59:15 -0700", "message": "Fix snapshot from follower thread leak"}, {"oid": "10125710e346a352ce2d47aad0d8348d9cdc80e7", "committedDate": "2022-07-19 22:42:05 -0700", "message": "Limit the cost in one run of block integrity check"}, {"oid": "47d7da54bd9a4b3a934c87fea00576da17c9cd77", "committedDate": "2022-07-26 11:07:29 -0700", "message": "Fix getNewContainerId() in DefaultBlockMaster performance"}, {"oid": "fb8f7f82eba45be8d638ea8f71d4d79f9c079bfe", "committedDate": "2022-07-27 13:54:03 -0700", "message": "Refactor Fuse user group policy"}, {"oid": "514c553323ddce8c98c37dafb76640748ba5f9a4", "committedDate": "2022-08-03 11:13:43 -0700", "message": "Remove S3 API ETag requirement & misc. cleanups"}, {"oid": "fdcba75c7e65bf812c2ba07b7c968ef3c9550213", "committedDate": "2022-08-04 18:42:24 -0700", "message": "Add s3 rest service audit log"}, {"oid": "a493b69e2d5e07416d1c801feebe718cfcd7942d", "committedDate": "2022-08-17 10:19:28 -0700", "message": "Disable block integrity check by default"}, {"oid": "6c129e241799a26eb7b5f909dfde4e85c338ddd9", "committedDate": "2022-08-23 10:51:40 -0700", "message": "Update load api"}, {"oid": "72f6763f1346ad5ece70b015d3e821c6c502bff7", "committedDate": "2022-08-24 13:37:32 -0700", "message": "Add configuration for kerberos authentication for Ufs HDFS"}, {"oid": "8dafc272be6e4f53db6f7287da583f391e40bdde", "committedDate": "2022-08-25 21:34:54 -0700", "message": "Merge journals & flush journals before lock release"}, {"oid": "2ed18f54a39998da67d2b8f6af6ba60baae24e40", "committedDate": "2022-08-31 03:09:40 -0700", "message": "Support strict version match option for mount"}, {"oid": "236a5291bda225a63d3a5715a7fed4f40034e81d", "committedDate": "2022-09-01 01:09:24 -0700", "message": "Add a configurable temp ufs dir"}, {"oid": "cecaa3774461d6813ee30531fb35818a425122c5", "committedDate": "2022-09-06 01:57:00 -0700", "message": "Add support to ofs schema name"}, {"oid": "e9f8fd3dc897d526f5acfa905c5f223bcecaea9a", "committedDate": "2022-09-13 19:31:32 -0700", "message": "Add extra monitoring indicators part1"}, {"oid": "a3dbb6020553473e218e2f2f687af2efb78246cb", "committedDate": "2022-09-15 05:52:44 -0700", "message": "Update PropertyKey.java"}, {"oid": "d61aee0992eb64c416906140713d49281f72daea", "committedDate": "2022-09-25 18:50:38 -0700", "message": "Support Long type config values"}, {"oid": "749f70cd1a2113b389c2916a074e94e199bb06c3", "committedDate": "2022-09-29 20:03:42 -0700", "message": "Refine add mPendingPaths in InodeSyncStream new type"}, {"oid": "025ca19d09167a06a270d9b325491ae9113f4cd8", "committedDate": "2022-09-30 04:17:31 -0700", "message": "Avoid and dedup concurrent metadata sync"}, {"oid": "ae065e34b9c1051c32bbba46f242e649cfc98998", "committedDate": "2022-10-06 19:11:44 -0700", "message": "Support multithread checkpointing with compression/decompression"}, {"oid": "7395bed318aa6099f6ced1dfdba16f7cf342af4f", "committedDate": "2022-10-10 00:27:29 -0700", "message": "Support size encoding for clock cuckoo filter in shadowcache"}, {"oid": "5dfa1789c618f5bf0943c8d9c2504679464da9f2", "committedDate": "2022-10-11 06:53:05 -0700", "message": "Add Support for Azure Data Lake Gen2 MSI"}, {"oid": "525082b964c7b2b074d0806cc1e0d04f5aa06850", "committedDate": "2022-10-11 23:14:53 -0700", "message": "Add extra monitoring indicators part3"}, {"oid": "99c416b7bbefb437507abb463d5854c86b8162d2", "committedDate": "2022-10-12 14:26:06 -0700", "message": "Add Invalidation Cache for metadata sync"}, {"oid": "f6cce5363127c375b3cda24042e9b317cb7d4575", "committedDate": "2022-10-16 22:51:49 -0700", "message": "Separate page store configuration from client cache"}, {"oid": "a535e3091ce73e3b4c18fb224fbbc429dac128c9", "committedDate": "2022-10-17 14:47:04 -0700", "message": "Reduce creation of unused strings"}, {"oid": "7e1876dc5b089aff3ec278ead044bc1e607f1b45", "committedDate": "2022-10-17 20:43:46 -0700", "message": "Fix typo for the property key of paging store"}, {"oid": "496e91069b449fd7999fdf03b46ab5f8785900da", "committedDate": "2022-10-18 16:13:31 -0700", "message": "Modify Libfuse version configuration"}, {"oid": "c0571e72a79bfbceffcee778482959bba38c71f2", "committedDate": "2022-10-20 20:08:29 -0700", "message": "Remove Configuration and CLI of Alluxio table"}, {"oid": "11c1c7c5bf57836761a7c4adccfe02b822761ddc", "committedDate": "2022-10-21 08:18:42 -0700", "message": "Remove conf & doc for tiered locality"}, {"oid": "9fb093c10f0e7e5d96056e5fa616f50bf28ed783", "committedDate": "2022-10-24 15:53:03 -0700", "message": "Remove Ufs Extension"}, {"oid": "7ff9df27898f11e0891e9e6830c58494d308d487", "committedDate": "2022-10-26 20:35:43 -0700", "message": "Make metadata sync work with merge inode journal feature flag"}, {"oid": "b8686b8a97bef178f0c7e288b598911a4c263485", "committedDate": "2022-10-30 23:30:55 -0700", "message": "Enable backup delegation by default"}, {"oid": "8a66a64a014bdb51bf38f34b04b1b825f94d1ccf", "committedDate": "2022-11-01 00:33:51 -0700", "message": "Remove caching for CapacityBaseRandomPolicy"}, {"oid": "a8090b447695106abba7b32fa4a4159e7e290d72", "committedDate": "2022-11-03 00:45:56 -0700", "message": "Configure block and inode metastore separately"}, {"oid": "1d22ae40b33cbab75d5fa2763928e8139b74a2e4", "committedDate": "2022-11-07 14:56:20 -0800", "message": "Add flag sync root"}, {"oid": "62c3192bff5b9feccbdcf62dd716c2c8ccf651fc", "committedDate": "2022-11-10 18:29:22 -0800", "message": "Support config ratis configurations through alluxio config"}, {"oid": "5f31889dbda8d0a9b9fb96641c419cfb60ce355d", "committedDate": "2022-11-14 05:36:07 -0800", "message": "Support RocksDB inode/block store to different disk paths"}, {"oid": "8183d1b976eaa0423014fb0d20985084029416f4", "committedDate": "2022-11-16 01:40:05 -0800", "message": "Delete worker metadata from master after heartbeat timeout"}, {"oid": "6200020f5bcb2eac23f9c3dc02eac85366576624", "committedDate": "2022-11-21 14:11:34 -0800", "message": "Fix code style"}, {"oid": "e041e804b86e9f794b56d91e0e9c781a231d8cac", "committedDate": "2022-11-30 15:41:47 -0800", "message": "Eliminate race condition in completempupload and support overwrite"}, {"oid": "1e8670c2b5c58bff0d677dd4c3533b7b405c89f8", "committedDate": "2022-11-30 21:20:20 -0800", "message": "Add property key to enable dora client read location policy"}, {"oid": "3fe8e090e90f8fac6cde2ced4db9976a82213839", "committedDate": "2022-12-01 17:46:38 -0800", "message": "Add unsafe flush option to embedded journal"}, {"oid": "79fe43ab4e8c61d4d8090c0917991c0a4860df96", "committedDate": "2022-12-01 21:52:27 -0800", "message": "Support TTL for synced inode"}, {"oid": "7052240f8f4d1cb99a00e4d70a6f40083d7d9cfa", "committedDate": "2022-12-02 11:22:40 -0800", "message": "Add new Alluxio-FUSE as local cache solution with UFS gateway"}, {"oid": "c736475cf0c5e1caff66d7f392b80a228901198a", "committedDate": "2022-12-09 14:09:47 -0600", "message": "Before solving conflicts"}, {"oid": "35072d75e4d1c5ae19c3ea35855b6db572a80a03", "committedDate": "2022-12-09 14:11:32 -0600", "message": "solve conflicts"}, {"oid": "459d766caa666c31e36d6d8761410e10b54c779b", "committedDate": "2022-12-30 13:20:09 -0800", "message": "Enable default metadata cache for FUSE SDK"}, {"oid": "9cd870e2648da5b3ba1bf77e040f8b88ea3a979d", "committedDate": "2023-01-09 09:49:27 -0800", "message": "Set default fuse version to 3 and support setting via command line"}, {"oid": "bc44b6526a7fd9d77a7411b7c2fe828980abaea1", "committedDate": "2023-01-09 21:12:13 -0800", "message": "Implement Dora client side affinity"}, {"oid": "4e47a0d1955523801dafa30eb70694d8da72d8a5", "committedDate": "2023-01-10 21:25:03 -0800", "message": "Enable data transmission with Netty"}, {"oid": "8bd3ee4453a2c40af5efa162d5a345f8dae2926b", "committedDate": "2023-01-12 23:42:47 -0800", "message": "Implement Worker metadata caching"}, {"oid": "a7fc9e815d77fb7f8f0ed46895ec110536f720af", "committedDate": "2023-01-24 10:57:49 -0800", "message": "Support FUSE SDK with dora"}, {"oid": "f67b183adee138ff92860531b5a6c2bf7bf5c365", "committedDate": "2023-02-02 19:35:08 -0800", "message": "Add RocksDB metadata store for Dora"}, {"oid": "7df62287cc14ff5ee24d9a5ff828e5233c7986f3", "committedDate": "2023-02-09 16:09:45 -0800", "message": "Add load to Dora"}, {"oid": "63e6bfa93c85955e72ac4d09ea94ae2bd72e735b", "committedDate": "2023-02-27 20:09:10 -0800", "message": "Change the netty default value for better performance"}, {"oid": "35820f8d61283b3200f6019917384e367698a585", "committedDate": "2023-03-02 22:25:49 -0800", "message": "Add configurable TTL for Dora Worker RocksDBMetaStore"}, {"oid": "4ee84502129ab5f751444d1e71765cd82dcfa794", "committedDate": "2023-03-15 21:43:40 -0700", "message": "Implement Dora list status cache"}, {"oid": "adcdfcd03bcbfdd4d1cd9d625cc9f91a7a1f132e", "committedDate": "2023-03-28 20:21:58 -0700", "message": "Fix Dora UT by setting different Worker MetaStore dir"}, {"oid": "1806d92aef9fd612e70fb70b2f4b95736d1cf206", "committedDate": "2023-04-11 09:09:02 -0700", "message": "Remove Logserver module"}, {"oid": "a534acdc7aa2920d8b6745efefc45be2b7cf2940", "committedDate": "2023-04-12 17:35:45 -0700", "message": "Remove Table module"}, {"oid": "c8d69917cc60569cf1a053e85de294c282f53284", "committedDate": "2023-04-16 05:48:42 -0700", "message": "Revert \"Remove Table module\""}, {"oid": "09e71d55306059d4c3258735789fe72500b5dbb6", "committedDate": "2023-04-17 19:06:50 -0700", "message": "Implement position reader from client to worker to UFS"}, {"oid": "ccc3ca57416cf34f2aec92cff51d75f7bb03797b", "committedDate": "2023-04-18 12:27:29 -0700", "message": "Remove YARN related integration"}, {"oid": "9d80d8e6b0096ee6afd1e4a03efc5522c6307e2d", "committedDate": "2023-04-24 19:05:00 -0700", "message": "Set Metadata cache TTL to 48 hours"}, {"oid": "c73c4238e233b5cacd867194ee8caff143713008", "committedDate": "2023-04-25 02:34:08 -0700", "message": "Use dynamic buffering for sequential read in PositionReadFileInStream"}, {"oid": "23a6fd642a647354bfcd4790c2ccb82f111af389", "committedDate": "2023-04-25 02:39:22 -0700", "message": "Support STS for OSS UFS and refactor Low Level Output Stream"}, {"oid": "3c576b7bdd669d688dc2a343aa74813b7bf3f98e", "committedDate": "2023-05-02 12:50:04 -0700", "message": "Reorg dora directories"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjMxMDEzNg==", "url": "https://github.com/Alluxio/alluxio/pull/10963#discussion_r382310136", "body": "Can we include the information from `e` in this exception message?", "bodyText": "Can we include the information from e in this exception message?", "bodyHTML": "<p dir=\"auto\">Can we include the information from <code>e</code> in this exception message?</p>", "author": "gpang", "createdAt": "2020-02-20T23:09:44Z", "path": "core/server/master/src/main/java/alluxio/master/block/DefaultBlockMaster.java", "diffHunk": "@@ -407,6 +431,14 @@ public long getUsedBytes() {\n     if (mSafeModeManager.isInSafeMode()) {\n       throw new UnavailableException(ExceptionMessage.MASTER_IN_SAFEMODE.getMessage());\n     }\n+    try {\n+      return mWorkerInfoCache.get(WORKER_INFO_CACHE_KEY);\n+    } catch (ExecutionException e) {\n+      throw new UnavailableException(\"Unable to get worker info list from cache\");", "originalCommit": "ffd70a4380636274aa9d345db9e64f06b2285bd7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM3Mzg2NA==", "url": "https://github.com/Alluxio/alluxio/pull/10963#discussion_r382373864", "bodyText": "Yeah, added the exception message", "author": "LuQQiu", "createdAt": "2020-02-21T02:59:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjMxMDEzNg=="}], "type": "inlineReview", "revised_code": {"commit": "7125ccaabdf6bcd42e41d788eccb63019d7ea796", "changed_code": [{"header": "diff --git a/core/server/master/src/main/java/alluxio/master/block/DefaultBlockMaster.java b/core/server/master/src/main/java/alluxio/master/block/DefaultBlockMaster.java\nindex e7875b209d..6f36518d6a 100644\n--- a/core/server/master/src/main/java/alluxio/master/block/DefaultBlockMaster.java\n+++ b/core/server/master/src/main/java/alluxio/master/block/DefaultBlockMaster.java\n", "chunk": "@@ -434,7 +434,7 @@ public final class DefaultBlockMaster extends CoreMaster implements BlockMaster\n     try {\n       return mWorkerInfoCache.get(WORKER_INFO_CACHE_KEY);\n     } catch (ExecutionException e) {\n-      throw new UnavailableException(\"Unable to get worker info list from cache\");\n+      throw new UnavailableException(\"Unable to get worker info list from cache\", e);\n     }\n   }\n \n", "next_change": null}]}, "revised_code_in_main": {"commit": "d587b031c3ace1e5d915f73079ed6d363fca31f7", "changed_code": [{"header": "diff --git a/core/server/master/src/main/java/alluxio/master/block/DefaultBlockMaster.java b/core/server/master/src/main/java/alluxio/master/block/DefaultBlockMaster.java\nindex e7875b209d..6f36518d6a 100644\n--- a/core/server/master/src/main/java/alluxio/master/block/DefaultBlockMaster.java\n+++ b/core/server/master/src/main/java/alluxio/master/block/DefaultBlockMaster.java\n", "chunk": "@@ -434,7 +434,7 @@ public final class DefaultBlockMaster extends CoreMaster implements BlockMaster\n     try {\n       return mWorkerInfoCache.get(WORKER_INFO_CACHE_KEY);\n     } catch (ExecutionException e) {\n-      throw new UnavailableException(\"Unable to get worker info list from cache\");\n+      throw new UnavailableException(\"Unable to get worker info list from cache\", e);\n     }\n   }\n \n", "next_change": {"commit": "7fb84094a6075bcef5a103b40adcac4b26b724ca", "changed_code": [{"header": "diff --git a/core/server/master/src/main/java/alluxio/master/block/DefaultBlockMaster.java b/core/server/master/src/main/java/alluxio/master/block/DefaultBlockMaster.java\nindex 6f36518d6a..d25f28d017 100644\n--- a/core/server/master/src/main/java/alluxio/master/block/DefaultBlockMaster.java\n+++ b/core/server/master/src/main/java/alluxio/master/block/DefaultBlockMaster.java\n", "chunk": "@@ -441,9 +460,8 @@ public final class DefaultBlockMaster extends CoreMaster implements BlockMaster\n   private List<WorkerInfo> constructWorkerInfoList() {\n     List<WorkerInfo> workerInfoList = new ArrayList<>(mWorkers.size());\n     for (MasterWorkerInfo worker : mWorkers) {\n-      synchronized (worker) {\n-        workerInfoList.add(worker.generateWorkerInfo(null, true));\n-      }\n+      // extractWorkerInfo handles the locking internally\n+      workerInfoList.add(extractWorkerInfo(worker, null, true));\n     }\n     return workerInfoList;\n   }\n", "next_change": {"commit": "53d0a025477400de3461d8eb15fe7ec18668676b", "changed_code": [{"header": "diff --git a/core/server/master/src/main/java/alluxio/master/block/DefaultBlockMaster.java b/core/server/master/src/main/java/alluxio/master/block/DefaultBlockMaster.java\nindex d25f28d017..911401563e 100644\n--- a/core/server/master/src/main/java/alluxio/master/block/DefaultBlockMaster.java\n+++ b/core/server/master/src/main/java/alluxio/master/block/DefaultBlockMaster.java\n", "chunk": "@@ -461,7 +571,8 @@ public class DefaultBlockMaster extends CoreMaster implements BlockMaster {\n     List<WorkerInfo> workerInfoList = new ArrayList<>(mWorkers.size());\n     for (MasterWorkerInfo worker : mWorkers) {\n       // extractWorkerInfo handles the locking internally\n-      workerInfoList.add(extractWorkerInfo(worker, null, true));\n+      workerInfoList.add(extractWorkerInfo(worker,\n+          GetWorkerReportOptions.WorkerInfoField.ALL, true));\n     }\n     return workerInfoList;\n   }\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "d587b031c3ace1e5d915f73079ed6d363fca31f7", "message": "Merge commit", "committedDate": null}, {"oid": "799e4dedd44b1d23816a29bbf3aba12140d785a8", "committedDate": "2020-02-27 16:00:28 -0800", "message": "Add getWorkerAddresses and invalidate cache when registering worker"}, {"oid": "7b08333df138dce240360e1313cb10d38a584434", "committedDate": "2020-03-03 12:27:14 -0800", "message": "Improve how tests handle restarting workers"}, {"oid": "67c4e9680359f1f2434aace3d4347ee07aaf7b7a", "committedDate": "2020-04-10 13:15:31 -0700", "message": "Keep state lock for duration of journal context"}, {"oid": "58c24eb80baca6c2f4efbb9fb7349fd80c1d3c0a", "committedDate": "2020-10-23 17:27:43 -0700", "message": "Fix memory leak in inode tree iterator"}, {"oid": "04c447d896ada325dd9797dc166f2a86cec99c8c", "committedDate": "2021-01-26 14:33:23 -0800", "message": "Fix backup lock acquisition"}, {"oid": "696647645c30d3a63b4a197aa0dfce9e11df3c39", "committedDate": "2021-05-20 19:15:21 -0700", "message": "Add additional metrics throughout Alluxio system"}, {"oid": "d4f01ef8f3773eb794e53bb537c5db8c70e2c4a0", "committedDate": "2021-05-22 05:16:18 -0700", "message": "Refactor BlockMaster interface to avoid copying the lost block set"}, {"oid": "23a31c0fd4d4714c38fd953c941fbb3df2381772", "committedDate": "2021-05-24 19:40:36 -0700", "message": "Save one copy of BlockLocation"}, {"oid": "7fb84094a6075bcef5a103b40adcac4b26b724ca", "committedDate": "2021-05-28 17:37:05 -0700", "message": "Refactor MasterWorkerInfo"}, {"oid": "235e626194370c58ab08ed2acfcd5b5437188b6e", "committedDate": "2021-06-03 14:01:50 -0700", "message": "Change logging on unrecognized blocks to DEBUG"}, {"oid": "ef1fac4c01e484d5fa340b1baf11961a9ba6575e", "committedDate": "2021-06-07 22:08:52 -0700", "message": "Log warning on orphaned blocks"}, {"oid": "30abcf8bac1905dc58445a202fd421f7edeab0a4", "committedDate": "2021-06-10 13:19:19 -0700", "message": "Remove precondition string concat cost"}, {"oid": "edb51690fc3f9f7b0f768e0205fb4036c3bec79c", "committedDate": "2021-08-17 09:19:07 -0700", "message": "Fix block count metrics"}, {"oid": "2238a64b5c42e9819c6235b654cf2a2cb455b4d7", "committedDate": "2021-08-17 20:37:01 -0700", "message": "Add master LostFile and lost blocks metric"}, {"oid": "13ec038b5a1e1feee05449cb759e7f9a08444ffb", "committedDate": "2021-09-09 09:43:12 -0700", "message": "Support total block replica count metric"}, {"oid": "f124e04eacbda4f73d81d76f1a4ef8a84e219bce", "committedDate": "2021-09-14 14:18:32 -0700", "message": "Remove com.github.spotbugs:spotbugs-annotations"}, {"oid": "b20ef39d68113e6a05278fa3064df808eba0a742", "committedDate": "2021-10-27 11:17:34 -0700", "message": "Add total file count and file block count to the overview page"}, {"oid": "e883136af0aa545fe46c83849560782f10766e30", "committedDate": "2021-10-28 09:01:47 -0700", "message": "Add master-side flow control for worker registration with RegisterLease"}, {"oid": "7c020f6f277fcc2fd74a91240f612e12ed1c6e96", "committedDate": "2021-10-29 16:18:23 -0700", "message": "Convert worker registration to a stream"}, {"oid": "39ddb54dabef1f2530f7d9d6240c6d2aaec99e46", "committedDate": "2021-11-01 18:08:44 -0700", "message": "Fix BlockMasterIntegrityIntegrationTest for worker stream register"}, {"oid": "8f74e6584b6d2d71be3a3737057808b6f77c44ae", "committedDate": "2021-11-17 14:58:19 -0800", "message": "Upgrade Checkstyle version"}, {"oid": "a9d1ab0c06386d4b015483d4bb3df173f1aea6ca", "committedDate": "2021-12-07 19:26:24 -0800", "message": "Fix worker stream registration log msg"}, {"oid": "cd1902383555d65ea85a561d1840137052b9ff4e", "committedDate": "2021-12-21 21:18:03 -0800", "message": "Use HashSet sized contructor in worker register"}, {"oid": "82b6cad66a7bf34e994eb37de99e96e55080a1bf", "committedDate": "2021-12-22 17:25:40 -0800", "message": "[SMALLFIX] Create ArrayList with size for worker status report"}, {"oid": "8640ff37ead66cd1cb022666299878893904c8ab", "committedDate": "2021-12-22 17:26:42 -0800", "message": "Avoid creating unnecessary Sets and avoid resizing in removeBlocks"}, {"oid": "e2559a6919573f86a078ec82f272e705d5175bd9", "committedDate": "2022-02-09 22:28:50 -0800", "message": "Fix RocksDB iterator leak on backup"}, {"oid": "bc4cb4f11f8fd67a62e85c092278cc72a0418823", "committedDate": "2022-02-24 16:56:52 -0800", "message": "Remove one extra copy in block deletion"}, {"oid": "7be4c6f6885a5092a3fb8621f27b5cc7d480d079", "committedDate": "2022-03-02 00:16:34 -0800", "message": "Make all BlockStore iterations use CloseableIterator"}, {"oid": "0b2ec3605d65eb05ffc0d670f357a6403b1e943e", "committedDate": "2022-03-03 17:28:56 -0800", "message": "Fix BlockMasterRegisterStreamIntegrationTest"}, {"oid": "9f3676b5b81b8bbf165ed8c3fac85e6ced95c23b", "committedDate": "2022-03-03 21:20:03 -0800", "message": "Add a metric to show the count of blocks to remove"}, {"oid": "d30039ec633054c9e53b949f49a8907b89cfad06", "committedDate": "2022-03-30 17:43:51 -0700", "message": "Avoid list resizing in generateBlockInfo"}, {"oid": "18f73f28fe4d43bfb96ee06a409514fea3a01dfe", "committedDate": "2022-04-26 17:00:26 -0700", "message": "Remove MasterStorageTierAssoc and WorkerStorageTierAssoc"}, {"oid": "eaf20742e8bb13811aa5a7ff0e79e5871d6b0561", "committedDate": "2022-05-17 12:51:34 -0700", "message": "Refactor WorkerRegisterContext"}, {"oid": "0986535c7d8c25ce95babdfad07379502be853d3", "committedDate": "2022-06-02 11:00:32 -0700", "message": "Clean up block master code"}, {"oid": "7c7d49f72332779ce71d3009ec7494c24a9c76c4", "committedDate": "2022-06-02 15:43:14 -0700", "message": "Move all static configuration logic into one place"}, {"oid": "7e058bcfa8458b7846947bc0fe5fbbca40f68478", "committedDate": "2022-06-07 13:59:45 -0700", "message": "Remove unnecessary Configuration usage"}, {"oid": "bb9a803c514719a81c3fa62309be01866630a740", "committedDate": "2022-06-14 14:15:17 -0700", "message": "Rename BlockStore interface to BlockMetaStore"}, {"oid": "10125710e346a352ce2d47aad0d8348d9cdc80e7", "committedDate": "2022-07-19 22:42:05 -0700", "message": "Limit the cost in one run of block integrity check"}, {"oid": "47d7da54bd9a4b3a934c87fea00576da17c9cd77", "committedDate": "2022-07-26 11:07:29 -0700", "message": "Fix getNewContainerId() in DefaultBlockMaster performance"}, {"oid": "64648e7db5789b6ca58751c34771e651b373fd71", "committedDate": "2022-07-29 14:02:11 -0700", "message": "Enforce import order"}, {"oid": "2df21b9aee0e07189c69649a4ed52b3c66b66483", "committedDate": "2022-09-01 22:26:01 -0700", "message": "Fix worker stream register forget release lease"}, {"oid": "b10fcd6d036c820df1738336b61e64f373056ac5", "committedDate": "2022-09-07 23:02:27 -0700", "message": "Add factory methods for IndexDefinition"}, {"oid": "53d0a025477400de3461d8eb15fe7ec18668676b", "committedDate": "2022-10-12 19:16:04 -0700", "message": "Add missing lock in DefaultBlockMaster.extractWorkerInfo"}, {"oid": "32785f9749152133da4c71c6b28e8c89af4e84d2", "committedDate": "2022-11-01 04:39:43 -0700", "message": "Add a command to free a worker"}, {"oid": "a1e1e33073b447a5d0944f82ba2b71703961162d", "committedDate": "2022-11-07 06:41:20 -0800", "message": "Optimize MasterWorkerInfo memory usage by introducing fastutil Set"}, {"oid": "8183d1b976eaa0423014fb0d20985084029416f4", "committedDate": "2022-11-16 01:40:05 -0800", "message": "Delete worker metadata from master after heartbeat timeout"}, {"oid": "7d8ad9b12ab366ef85c05a7cedfa3a60a562de12", "committedDate": "2022-11-24 20:15:31 -0800", "message": "Display build version of workers in WebUI and capacity command"}, {"oid": "952721773baaaaa32ceb938148bdaf62bb4726a5", "committedDate": "2022-12-06 22:18:11 -0800", "message": "Fix stale buildVersion when downgrade workers"}, {"oid": "3c576b7bdd669d688dc2a343aa74813b7bf3f98e", "committedDate": "2023-05-02 12:50:04 -0700", "message": "Reorg dora directories"}]}, {"oid": "7125ccaabdf6bcd42e41d788eccb63019d7ea796", "url": "https://github.com/Alluxio/alluxio/commit/7125ccaabdf6bcd42e41d788eccb63019d7ea796", "message": "Fix tests", "committedDate": "2020-02-20T23:49:16Z", "type": "commit"}, {"oid": "e87cd8567042e98597a652a5369a865fb4caaf72", "url": "https://github.com/Alluxio/alluxio/commit/e87cd8567042e98597a652a5369a865fb4caaf72", "message": "Add property key description", "committedDate": "2020-02-21T03:07:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjczNzcyOQ==", "url": "https://github.com/Alluxio/alluxio/pull/10963#discussion_r382737729", "body": "should all integration tests just use a shorter refresh time, like 20ms?", "bodyText": "should all integration tests just use a shorter refresh time, like 20ms?", "bodyHTML": "<p dir=\"auto\">should all integration tests just use a shorter refresh time, like 20ms?</p>", "author": "gpang", "createdAt": "2020-02-21T18:29:51Z", "path": "core/common/src/test/java/alluxio/ConfigurationTestUtils.java", "diffHunk": "@@ -140,6 +140,9 @@ public static InstancedConfiguration defaults() {\n     conf.put(PropertyKey.MASTER_PERSISTENCE_INITIAL_INTERVAL_MS, \"20ms\");\n     conf.put(PropertyKey.MASTER_PERSISTENCE_SCHEDULER_INTERVAL_MS, \"20ms\");\n \n+    // faster refresh\n+    conf.put(PropertyKey.MASTER_WORKER_INFO_CACHE_REFRESH_TIME, \"100ms\");", "originalCommit": "e87cd8567042e98597a652a5369a865fb4caaf72", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc1MzU4MA==", "url": "https://github.com/Alluxio/alluxio/pull/10963#discussion_r382753580", "bodyText": "I am worried if the too frequent getWorkerInfoList calls will create locking contentions in integration tests.", "author": "LuQQiu", "createdAt": "2020-02-21T19:04:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjczNzcyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "81933bd207e6a683b602389feb35daaeb4c216b5", "changed_code": [{"header": "diff --git a/core/common/src/test/java/alluxio/ConfigurationTestUtils.java b/core/common/src/test/java/alluxio/ConfigurationTestUtils.java\nindex afe1a3a8fb..a3fc04f8c4 100644\n--- a/core/common/src/test/java/alluxio/ConfigurationTestUtils.java\n+++ b/core/common/src/test/java/alluxio/ConfigurationTestUtils.java\n", "chunk": "@@ -141,7 +141,7 @@ public final class ConfigurationTestUtils {\n     conf.put(PropertyKey.MASTER_PERSISTENCE_SCHEDULER_INTERVAL_MS, \"20ms\");\n \n     // faster refresh\n-    conf.put(PropertyKey.MASTER_WORKER_INFO_CACHE_REFRESH_TIME, \"100ms\");\n+    conf.put(PropertyKey.MASTER_WORKER_INFO_CACHE_REFRESH_TIME, \"20ms\");\n \n     return conf;\n   }\n", "next_change": null}]}, "revised_code_in_main": {"commit": "d587b031c3ace1e5d915f73079ed6d363fca31f7", "changed_code": [{"header": "diff --git a/core/common/src/test/java/alluxio/ConfigurationTestUtils.java b/core/common/src/test/java/alluxio/ConfigurationTestUtils.java\nindex afe1a3a8fb..a3fc04f8c4 100644\n--- a/core/common/src/test/java/alluxio/ConfigurationTestUtils.java\n+++ b/core/common/src/test/java/alluxio/ConfigurationTestUtils.java\n", "chunk": "@@ -141,7 +141,7 @@ public final class ConfigurationTestUtils {\n     conf.put(PropertyKey.MASTER_PERSISTENCE_SCHEDULER_INTERVAL_MS, \"20ms\");\n \n     // faster refresh\n-    conf.put(PropertyKey.MASTER_WORKER_INFO_CACHE_REFRESH_TIME, \"100ms\");\n+    conf.put(PropertyKey.MASTER_WORKER_INFO_CACHE_REFRESH_TIME, \"20ms\");\n \n     return conf;\n   }\n", "next_change": {"commit": "88c3f2bba2a6f7f3578e9b5758e9c59f7581509e", "changed_code": [{"header": "diff --git a/core/common/src/test/java/alluxio/ConfigurationTestUtils.java b/core/common/src/test/java/alluxio/ConfigurationTestUtils.java\nindex a3fc04f8c4..5dace526bb 100644\n--- a/core/common/src/test/java/alluxio/ConfigurationTestUtils.java\n+++ b/core/common/src/test/java/alluxio/ConfigurationTestUtils.java\n", "chunk": "@@ -143,6 +144,11 @@ public final class ConfigurationTestUtils {\n     // faster refresh\n     conf.put(PropertyKey.MASTER_WORKER_INFO_CACHE_REFRESH_TIME, \"20ms\");\n \n+    // faster I/O retries.\n+    conf.put(PropertyKey.USER_BLOCK_READ_RETRY_SLEEP_MIN, \"1ms\");\n+    conf.put(PropertyKey.USER_BLOCK_READ_RETRY_SLEEP_MIN, \"5ms\");\n+    conf.put(PropertyKey.USER_BLOCK_READ_RETRY_MAX_DURATION, \"10ms\");\n+\n     return conf;\n   }\n \n", "next_change": {"commit": "40392ebde40831bfcb8b5b6032f54ad97d21efcd", "changed_code": [{"header": "diff --git a/core/common/src/test/java/alluxio/ConfigurationTestUtils.java b/core/common/src/test/java/alluxio/ConfigurationTestUtils.java\nindex 5dace526bb..1d4b681282 100644\n--- a/core/common/src/test/java/alluxio/ConfigurationTestUtils.java\n+++ b/core/common/src/test/java/alluxio/ConfigurationTestUtils.java\n", "chunk": "@@ -149,6 +147,8 @@ public final class ConfigurationTestUtils {\n     conf.put(PropertyKey.USER_BLOCK_READ_RETRY_SLEEP_MIN, \"5ms\");\n     conf.put(PropertyKey.USER_BLOCK_READ_RETRY_MAX_DURATION, \"10ms\");\n \n+    conf.put(PropertyKey.TEST_MODE, \"true\");\n+\n     return conf;\n   }\n \n", "next_change": {"commit": "2cb9d9a994e7dd389bf1d30d93f3d522d4bf3123", "changed_code": [{"header": "diff --git a/core/common/src/test/java/alluxio/ConfigurationTestUtils.java b/core/common/src/test/java/alluxio/ConfigurationTestUtils.java\nindex 1d4b681282..0cb5af9be4 100644\n--- a/core/common/src/test/java/alluxio/ConfigurationTestUtils.java\n+++ b/core/common/src/test/java/alluxio/ConfigurationTestUtils.java\n", "chunk": "@@ -147,7 +152,7 @@ public final class ConfigurationTestUtils {\n     conf.put(PropertyKey.USER_BLOCK_READ_RETRY_SLEEP_MIN, \"5ms\");\n     conf.put(PropertyKey.USER_BLOCK_READ_RETRY_MAX_DURATION, \"10ms\");\n \n-    conf.put(PropertyKey.TEST_MODE, \"true\");\n+    conf.put(PropertyKey.TEST_MODE, true);\n \n     return conf;\n   }\n", "next_change": {"commit": "6f0783304e80e0bb171c5ab135d5bbfec8cf631d", "changed_code": [{"header": "diff --git a/core/common/src/test/java/alluxio/ConfigurationTestUtils.java b/core/common/src/test/java/alluxio/ConfigurationTestUtils.java\nindex 0cb5af9be4..4eac7603c0 100644\n--- a/core/common/src/test/java/alluxio/ConfigurationTestUtils.java\n+++ b/core/common/src/test/java/alluxio/ConfigurationTestUtils.java\n", "chunk": "@@ -152,7 +152,7 @@ public final class ConfigurationTestUtils {\n     conf.put(PropertyKey.USER_BLOCK_READ_RETRY_SLEEP_MIN, \"5ms\");\n     conf.put(PropertyKey.USER_BLOCK_READ_RETRY_MAX_DURATION, \"10ms\");\n \n-    conf.put(PropertyKey.TEST_MODE, true);\n+    conf.put(PropertyKey.TEST_MODE, \"true\");\n \n     return conf;\n   }\n", "next_change": {"commit": "4f7883665ca0a6c0b490a57fe41ca7b98028071c", "changed_code": [{"header": "diff --git a/core/common/src/test/java/alluxio/ConfigurationTestUtils.java b/core/common/src/test/java/alluxio/ConfigurationTestUtils.java\nindex 4eac7603c0..0cb5af9be4 100644\n--- a/core/common/src/test/java/alluxio/ConfigurationTestUtils.java\n+++ b/core/common/src/test/java/alluxio/ConfigurationTestUtils.java\n", "chunk": "@@ -152,7 +152,7 @@ public final class ConfigurationTestUtils {\n     conf.put(PropertyKey.USER_BLOCK_READ_RETRY_SLEEP_MIN, \"5ms\");\n     conf.put(PropertyKey.USER_BLOCK_READ_RETRY_MAX_DURATION, \"10ms\");\n \n-    conf.put(PropertyKey.TEST_MODE, \"true\");\n+    conf.put(PropertyKey.TEST_MODE, true);\n \n     return conf;\n   }\n", "next_change": {"commit": "7c7d49f72332779ce71d3009ec7494c24a9c76c4", "changed_code": [{"header": "diff --git a/core/common/src/test/java/alluxio/ConfigurationTestUtils.java b/core/common/src/test/java/alluxio/ConfigurationTestUtils.java\nindex 0cb5af9be4..41352b1489 100644\n--- a/core/common/src/test/java/alluxio/ConfigurationTestUtils.java\n+++ b/core/common/src/test/java/alluxio/ConfigurationTestUtils.java\n", "chunk": "@@ -148,7 +149,6 @@ public final class ConfigurationTestUtils {\n     conf.put(PropertyKey.MASTER_WORKER_INFO_CACHE_REFRESH_TIME, \"20ms\");\n \n     // faster I/O retries.\n-    conf.put(PropertyKey.USER_BLOCK_READ_RETRY_SLEEP_MIN, \"1ms\");\n     conf.put(PropertyKey.USER_BLOCK_READ_RETRY_SLEEP_MIN, \"5ms\");\n     conf.put(PropertyKey.USER_BLOCK_READ_RETRY_MAX_DURATION, \"10ms\");\n \n", "next_change": null}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "d587b031c3ace1e5d915f73079ed6d363fca31f7", "message": "Merge commit", "committedDate": null}, {"oid": "1cf3196a9e57ba8129d1587fb1d9f017159c204d", "committedDate": "2020-03-02 07:58:23 -0800", "message": "Reuse LocalAlluxioCluster to speedup CLI tests"}, {"oid": "7b08333df138dce240360e1313cb10d38a584434", "committedDate": "2020-03-03 12:27:14 -0800", "message": "Improve how tests handle restarting workers"}, {"oid": "88c3f2bba2a6f7f3578e9b5758e9c59f7581509e", "committedDate": "2020-04-13 11:18:15 -0700", "message": "Override test timeouts for stream reads"}, {"oid": "b2c10e03be487cbb9e784a3b332bc04d16e806fa", "committedDate": "2020-04-20 10:44:36 -0700", "message": "Optimize gRPC managed resource handling"}, {"oid": "3a732ea98dba98032260e7e52e1a5aa4f1b178e9", "committedDate": "2020-08-07 12:22:30 -0700", "message": "Replace alluxio.worker.memory.size with alluxio.worker.ramdisk.size"}, {"oid": "f0f72c666d1f0539dc62ddf33dae1a186f2de71c", "committedDate": "2020-10-05 20:13:18 -0700", "message": "Implement raft journal and snapshot management with Ratis"}, {"oid": "ef7bc67b3931bd1065775df4500dca401ea27255", "committedDate": "2020-10-15 14:23:16 -0700", "message": "Update Journal management doc and deprecated properties"}, {"oid": "40392ebde40831bfcb8b5b6032f54ad97d21efcd", "committedDate": "2020-11-17 08:22:06 -0800", "message": "Do not run UpdateChecker in MultiProcessCluster"}, {"oid": "07cc674bbb9a579120e72965fe91abb5e3a78d9b", "committedDate": "2020-11-17 20:29:21 -0800", "message": "Use lower tiers in workers based on tier usage"}, {"oid": "04c447d896ada325dd9797dc166f2a86cec99c8c", "committedDate": "2021-01-26 14:33:23 -0800", "message": "Fix backup lock acquisition"}, {"oid": "33f2697ddb151636e0b305b74669b2ddfc5d5c4e", "committedDate": "2021-05-18 11:58:26 -0700", "message": "Consolidate usage of tier names in the repo"}, {"oid": "db01aae966849e88d342a71609ab3d910215afeb", "committedDate": "2021-07-21 13:53:01 -0700", "message": "Remove embedded journal heartbeat interval configuration"}, {"oid": "b26d200ca1500a67d184842bb30e05af25c6c949", "committedDate": "2021-09-02 16:43:27 -0700", "message": "Add configuration of min and max election timeout"}, {"oid": "2cb9d9a994e7dd389bf1d30d93f3d522d4bf3123", "committedDate": "2022-02-25 23:05:56 -0800", "message": "Add type in PropertyKey and enforce boolean type"}, {"oid": "6f0783304e80e0bb171c5ab135d5bbfec8cf631d", "committedDate": "2022-02-28 12:50:27 -0800", "message": "Revert \"Add type in PropertyKey and enforce boolean type\""}, {"oid": "4f7883665ca0a6c0b490a57fe41ca7b98028071c", "committedDate": "2022-03-23 20:35:25 -0700", "message": "Add type in PropertyKey and enforce boolean type"}, {"oid": "79ade1e2f40c046b45b4e8c18fed604388322585", "committedDate": "2022-03-23 20:35:25 -0700", "message": "Enforce Integer PropertyKey type"}, {"oid": "615f89d6d79bdca2f3a302dff4f5f962336038ad", "committedDate": "2022-03-23 20:35:25 -0700", "message": "Enforce enum PropertyKey type"}, {"oid": "509139a8a0b9ccf4f882a88f85d6033f7f3f125a", "committedDate": "2022-05-26 14:21:28 -0700", "message": "Refactor ConfigurationUtils"}, {"oid": "e763e035dc25c5aac69671bed1f92d260ac552d2", "committedDate": "2022-05-31 10:06:19 -0700", "message": "Rename ConfigurationTestUtils.defaults to copyDefaults"}, {"oid": "7c7d49f72332779ce71d3009ec7494c24a9c76c4", "committedDate": "2022-06-02 15:43:14 -0700", "message": "Move all static configuration logic into one place"}, {"oid": "7e058bcfa8458b7846947bc0fe5fbbca40f68478", "committedDate": "2022-06-07 13:59:45 -0700", "message": "Remove unnecessary Configuration usage"}, {"oid": "3c576b7bdd669d688dc2a343aa74813b7bf3f98e", "committedDate": "2023-05-02 12:50:04 -0700", "message": "Reorg dora directories"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjczNzg4OQ==", "url": "https://github.com/Alluxio/alluxio/pull/10963#discussion_r382737889", "body": "if the test config has a faster time, this doesn't have to be set, right?", "bodyText": "if the test config has a faster time, this doesn't have to be set, right?", "bodyHTML": "<p dir=\"auto\">if the test config has a faster time, this doesn't have to be set, right?</p>", "author": "gpang", "createdAt": "2020-02-21T18:30:10Z", "path": "tests/src/test/java/alluxio/client/fs/FileOutStreamAsyncWriteIntegrationTest.java", "diffHunk": "@@ -174,7 +175,8 @@ public void asyncWriteNoEvictBeforeBlockCommit() throws Exception {\n       PropertyKey.Name.USER_FILE_PERSISTENCE_INITIAL_WAIT_TIME, \"1min\",\n       PropertyKey.Name.WORKER_MEMORY_SIZE, TINY_WORKER_MEM,\n       PropertyKey.Name.USER_BLOCK_SIZE_BYTES_DEFAULT, TINY_BLOCK_SIZE,\n-      PropertyKey.Name.USER_FILE_BUFFER_BYTES, \"8k\"\n+      PropertyKey.Name.USER_FILE_BUFFER_BYTES, \"8k\",\n+      PropertyKey.Name.MASTER_WORKER_INFO_CACHE_REFRESH_TIME, \"20ms\"", "originalCommit": "e87cd8567042e98597a652a5369a865fb4caaf72", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "81933bd207e6a683b602389feb35daaeb4c216b5", "changed_code": [{"header": "diff --git a/tests/src/test/java/alluxio/client/fs/FileOutStreamAsyncWriteIntegrationTest.java b/tests/src/test/java/alluxio/client/fs/FileOutStreamAsyncWriteIntegrationTest.java\nindex 9eca2c1cc1..63495069c1 100644\n--- a/tests/src/test/java/alluxio/client/fs/FileOutStreamAsyncWriteIntegrationTest.java\n+++ b/tests/src/test/java/alluxio/client/fs/FileOutStreamAsyncWriteIntegrationTest.java\n", "chunk": "@@ -176,7 +175,6 @@ public final class FileOutStreamAsyncWriteIntegrationTest\n       PropertyKey.Name.WORKER_MEMORY_SIZE, TINY_WORKER_MEM,\n       PropertyKey.Name.USER_BLOCK_SIZE_BYTES_DEFAULT, TINY_BLOCK_SIZE,\n       PropertyKey.Name.USER_FILE_BUFFER_BYTES, \"8k\",\n-      PropertyKey.Name.MASTER_WORKER_INFO_CACHE_REFRESH_TIME, \"20ms\"\n       })\n   public void asyncWriteNoEvict() throws Exception {\n     testLostAsyncBlocks();\n", "next_change": {"commit": "967c855351167a5aad3218e8e4f60060540d5a4d", "changed_code": [{"header": "diff --git a/tests/src/test/java/alluxio/client/fs/FileOutStreamAsyncWriteIntegrationTest.java b/tests/src/test/java/alluxio/client/fs/FileOutStreamAsyncWriteIntegrationTest.java\nindex 63495069c1..65525681ae 100644\n--- a/tests/src/test/java/alluxio/client/fs/FileOutStreamAsyncWriteIntegrationTest.java\n+++ b/tests/src/test/java/alluxio/client/fs/FileOutStreamAsyncWriteIntegrationTest.java\n", "chunk": "@@ -174,7 +174,7 @@ public final class FileOutStreamAsyncWriteIntegrationTest\n       PropertyKey.Name.USER_FILE_PERSISTENCE_INITIAL_WAIT_TIME, \"1min\",\n       PropertyKey.Name.WORKER_MEMORY_SIZE, TINY_WORKER_MEM,\n       PropertyKey.Name.USER_BLOCK_SIZE_BYTES_DEFAULT, TINY_BLOCK_SIZE,\n-      PropertyKey.Name.USER_FILE_BUFFER_BYTES, \"8k\",\n+      PropertyKey.Name.USER_FILE_BUFFER_BYTES, \"8k\"\n       })\n   public void asyncWriteNoEvict() throws Exception {\n     testLostAsyncBlocks();\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "d587b031c3ace1e5d915f73079ed6d363fca31f7", "changed_code": [{"header": "diff --git a/tests/src/test/java/alluxio/client/fs/FileOutStreamAsyncWriteIntegrationTest.java b/tests/src/test/java/alluxio/client/fs/FileOutStreamAsyncWriteIntegrationTest.java\nindex 9eca2c1cc1..65525681ae 100644\n--- a/tests/src/test/java/alluxio/client/fs/FileOutStreamAsyncWriteIntegrationTest.java\n+++ b/tests/src/test/java/alluxio/client/fs/FileOutStreamAsyncWriteIntegrationTest.java\n", "chunk": "@@ -175,8 +174,7 @@ public final class FileOutStreamAsyncWriteIntegrationTest\n       PropertyKey.Name.USER_FILE_PERSISTENCE_INITIAL_WAIT_TIME, \"1min\",\n       PropertyKey.Name.WORKER_MEMORY_SIZE, TINY_WORKER_MEM,\n       PropertyKey.Name.USER_BLOCK_SIZE_BYTES_DEFAULT, TINY_BLOCK_SIZE,\n-      PropertyKey.Name.USER_FILE_BUFFER_BYTES, \"8k\",\n-      PropertyKey.Name.MASTER_WORKER_INFO_CACHE_REFRESH_TIME, \"20ms\"\n+      PropertyKey.Name.USER_FILE_BUFFER_BYTES, \"8k\"\n       })\n   public void asyncWriteNoEvict() throws Exception {\n     testLostAsyncBlocks();\n", "next_change": {"commit": "3a732ea98dba98032260e7e52e1a5aa4f1b178e9", "changed_code": [{"header": "diff --git a/tests/src/test/java/alluxio/client/fs/FileOutStreamAsyncWriteIntegrationTest.java b/tests/src/test/java/alluxio/client/fs/FileOutStreamAsyncWriteIntegrationTest.java\nindex 65525681ae..51398ca31c 100644\n--- a/tests/src/test/java/alluxio/client/fs/FileOutStreamAsyncWriteIntegrationTest.java\n+++ b/tests/src/test/java/alluxio/client/fs/FileOutStreamAsyncWriteIntegrationTest.java\n", "chunk": "@@ -161,18 +157,29 @@ public final class FileOutStreamAsyncWriteIntegrationTest\n     Arrays.fill(arr, (byte) 0x7a);\n     fos.write(arr);\n     assertEquals(writeSize + FormatUtils.parseSpaceSize(TINY_BLOCK_SIZE), getClusterCapacity());\n-    // subtract block size since the last block hasn't been committed yet\n-    assertEquals(writeSize, getUsedWorkerSpace());\n+    // This will succeed.\n+    FileSystemTestUtils.createByteFile(fs, \"/byte-file1\", WritePType.MUST_CACHE,\n+        (int) FormatUtils.parseSpaceSize(TINY_BLOCK_SIZE));\n+    // This will not until the stream is closed and persisted.\n+    try {\n+      FileSystemTestUtils.createByteFile(fs, \"/byte-file2\", WritePType.MUST_CACHE,\n+          2 * (int) FormatUtils.parseSpaceSize(TINY_BLOCK_SIZE));\n+      Assert.fail(\"Should have failed due to non-evictable block.\");\n+    } catch (Exception e) {\n+      // expected.\n+    }\n     fos.close();\n     FileSystemUtils.persistAndWait(fs, p1, 0);\n-    assertTrue(getUsedWorkerSpace() < writeSize);\n+    // Now this should succeed.\n+    FileSystemTestUtils.createByteFile(fs, \"/byte-file3\", WritePType.MUST_CACHE,\n+        2 * (int) FormatUtils.parseSpaceSize(TINY_BLOCK_SIZE));\n   }\n \n   @Test\n   @LocalAlluxioClusterResource.Config(confParams = {\n       PropertyKey.Name.USER_FILE_WRITE_TYPE_DEFAULT, \"ASYNC_THROUGH\",\n       PropertyKey.Name.USER_FILE_PERSISTENCE_INITIAL_WAIT_TIME, \"1min\",\n-      PropertyKey.Name.WORKER_MEMORY_SIZE, TINY_WORKER_MEM,\n+      PropertyKey.Name.WORKER_RAMDISK_SIZE, TINY_WORKER_MEM,\n       PropertyKey.Name.USER_BLOCK_SIZE_BYTES_DEFAULT, TINY_BLOCK_SIZE,\n       PropertyKey.Name.USER_FILE_BUFFER_BYTES, \"8k\"\n       })\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "d587b031c3ace1e5d915f73079ed6d363fca31f7", "message": "Merge commit", "committedDate": null}, {"oid": "60e35b25d02395827aab610bf63e7f538b34ed92", "committedDate": "2020-04-30 13:42:46 -0700", "message": "Deflake asyncWriteNoEvictBeforeBlockCommit test"}, {"oid": "3762d75eb611f388895ad9bea0746b17afc7cdd1", "committedDate": "2020-05-01 16:03:41 -0700", "message": "Improve multi-tier block management"}, {"oid": "3a732ea98dba98032260e7e52e1a5aa4f1b178e9", "committedDate": "2020-08-07 12:22:30 -0700", "message": "Replace alluxio.worker.memory.size with alluxio.worker.ramdisk.size"}, {"oid": "679bd8967d8a83b89ab10c20789d4e35b5cd6ed9", "committedDate": "2020-11-25 09:40:57 -0800", "message": "Enable faster PR builds via github actions"}]}, {"oid": "81933bd207e6a683b602389feb35daaeb4c216b5", "url": "https://github.com/Alluxio/alluxio/commit/81933bd207e6a683b602389feb35daaeb4c216b5", "message": "Change all the cache refresh time to 20ms", "committedDate": "2020-02-21T19:05:59Z", "type": "commit"}, {"oid": "967c855351167a5aad3218e8e4f60060540d5a4d", "url": "https://github.com/Alluxio/alluxio/commit/967c855351167a5aad3218e8e4f60060540d5a4d", "message": "Remove change for AsyncWriteIntegrationTest", "committedDate": "2020-02-21T23:16:59Z", "type": "commit"}, {"oid": "967c855351167a5aad3218e8e4f60060540d5a4d", "url": "https://github.com/Alluxio/alluxio/commit/967c855351167a5aad3218e8e4f60060540d5a4d", "message": "Remove change for AsyncWriteIntegrationTest", "committedDate": "2020-02-21T23:16:59Z", "type": "forcePushed"}, {"oid": "2a68b2d4d538aca56bf195baccf2035c513bb43c", "url": "https://github.com/Alluxio/alluxio/commit/2a68b2d4d538aca56bf195baccf2035c513bb43c", "message": "Merge remote-tracking branch 'upstream/master' into cacheGetWorker", "committedDate": "2020-02-22T00:04:58Z", "type": "commit"}]}