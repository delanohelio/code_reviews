{"pr_number": 291, "pr_title": "Add support for YouTube Music search", "pr_author": "wb9688", "pr_createdAt": "2020-03-17T10:36:59Z", "pr_url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/291", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTcyMzg2OA==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/291#discussion_r395723868", "body": "Maybe return some higher one (or at least not the lowest) for now?\r\n\r\nLoading the lowest ones looks pretty bad.", "bodyText": "Maybe return some higher one (or at least not the lowest) for now?\nLoading the lowest ones looks pretty bad.", "bodyHTML": "<p dir=\"auto\">Maybe return some higher one (or at least not the lowest) for now?</p>\n<p dir=\"auto\">Loading the lowest ones looks pretty bad.</p>", "author": "mauriciocolli", "createdAt": "2020-03-20T15:43:40Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeSearchExtractor.java", "diffHunk": "@@ -133,15 +352,198 @@ private void collectStreamsFrom(InfoItemsSearchCollector collector, JsonArray vi\n         }\n     }\n \n-    private String getNextPageUrlFrom(JsonArray continuations) throws ParsingException {\n-        if (continuations == null) {\n-            return \"\";\n+    private void collectMusicStreamsFrom(InfoItemsSearchCollector collector, JsonArray videos) {\n+        final TimeAgoParser timeAgoParser = getTimeAgoParser();\n+\n+        for (Object item : videos) {\n+            final JsonObject info = ((JsonObject) item).getObject(\"musicResponsiveListItemRenderer\");\n+            if (info != null) {\n+                final String searchType = getLinkHandler().getContentFilters().get(0);\n+                if (searchType.equals(MUSIC_SONGS) || searchType.equals(MUSIC_VIDEOS)) {\n+                    collector.commit(new YoutubeStreamInfoItemExtractor(info, timeAgoParser) {\n+                        @Override\n+                        public String getUrl() throws ParsingException {\n+                            String url = getUrlFromNavigationEndpoint(info.getObject(\"doubleTapCommand\"));\n+                            if (url != null && !url.isEmpty()) return url;\n+                            throw new ParsingException(\"Could not get url\");\n+                        }\n+\n+                        @Override\n+                        public String getName() throws ParsingException {\n+                            String name = getTextFromObject(info.getArray(\"flexColumns\").getObject(0)\n+                                    .getObject(\"musicResponsiveListItemFlexColumnRenderer\").getObject(\"text\"));\n+                            if (name != null && !name.isEmpty()) return name;\n+                            throw new ParsingException(\"Could not get name\");\n+                        }\n+\n+                        @Override\n+                        public long getDuration() throws ParsingException {\n+                            String duration = getTextFromObject(info.getArray(\"flexColumns\").getObject(3)\n+                                    .getObject(\"musicResponsiveListItemFlexColumnRenderer\").getObject(\"text\"));\n+                            if (duration != null && !duration.isEmpty())\n+                                return YoutubeParsingHelper.parseDurationString(duration);\n+                            throw new ParsingException(\"Could not get duration\");\n+                        }\n+\n+                        @Override\n+                        public String getUploaderName() throws ParsingException {\n+                            String name = getTextFromObject(info.getArray(\"flexColumns\").getObject(1)\n+                                    .getObject(\"musicResponsiveListItemFlexColumnRenderer\").getObject(\"text\"));\n+                            if (name != null && !name.isEmpty()) return name;\n+                            throw new ParsingException(\"Could not get uploader name\");\n+                        }\n+\n+                        @Override\n+                        public String getTextualUploadDate() {\n+                            return null;\n+                        }\n+\n+                        @Override\n+                        public DateWrapper getUploadDate() {\n+                            return null;\n+                        }\n+\n+                        @Override\n+                        public long getViewCount() throws ParsingException {\n+                            if (searchType.equals(MUSIC_SONGS)) return -1;\n+                            String viewCount = getTextFromObject(info.getArray(\"flexColumns\").getObject(2)\n+                                    .getObject(\"musicResponsiveListItemFlexColumnRenderer\").getObject(\"text\"));\n+                            if (viewCount != null && !viewCount.isEmpty()) return Utils.mixedNumberWordToLong(viewCount);\n+                            throw new ParsingException(\"Could not get view count\");\n+                        }\n+\n+                        @Override\n+                        public String getThumbnailUrl() throws ParsingException {\n+                            try {\n+                                // TODO: Don't simply get the first item, but look at all thumbnails and their resolution", "originalCommit": "dc25ecc88c63ad3ef4ca9fd4974e3efc2d0e6664", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTc1ODA2MA==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/291#discussion_r395758060", "bodyText": "I already discussed this with @B0pol, but forgot about it. I'll fix it in a minute.", "author": "wb9688", "createdAt": "2020-03-20T16:37:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTcyMzg2OA=="}], "type": "inlineReview", "revised_code": {"commit": "d58c0f230d27cf34c2bf044597c908c519f94a84", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeSearchExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeSearchExtractor.java\nindex afe25caa..7c5adca5 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeSearchExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeSearchExtractor.java\n", "chunk": "@@ -415,9 +424,12 @@ public class YoutubeSearchExtractor extends SearchExtractor {\n                         @Override\n                         public String getThumbnailUrl() throws ParsingException {\n                             try {\n-                                // TODO: Don't simply get the first item, but look at all thumbnails and their resolution\n-                                return fixThumbnailUrl(info.getObject(\"thumbnail\").getObject(\"musicThumbnailRenderer\")\n-                                        .getObject(\"thumbnail\").getArray(\"thumbnails\").getObject(0).getString(\"url\"));\n+                                JsonArray thumbnails = info.getObject(\"thumbnail\").getObject(\"musicThumbnailRenderer\")\n+                                        .getObject(\"thumbnail\").getArray(\"thumbnails\");\n+                                // the last thumbnail is the one with the highest resolution\n+                                String url = thumbnails.getObject(thumbnails.size() - 1).getString(\"url\");\n+\n+                                return fixThumbnailUrl(url);\n                             } catch (Exception e) {\n                                 throw new ParsingException(\"Could not get thumbnail url\", e);\n                             }\n", "next_change": {"commit": "ac15df45489178002c95db436a717319020a517a", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeSearchExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeSearchExtractor.java\nindex 7c5adca5..06d83b24 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeSearchExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeSearchExtractor.java\n", "chunk": "@@ -351,217 +132,17 @@ public class YoutubeSearchExtractor extends SearchExtractor {\n         }\n     }\n \n-    private void collectMusicStreamsFrom(InfoItemsSearchCollector collector, JsonArray videos) {\n-        final TimeAgoParser timeAgoParser = getTimeAgoParser();\n-\n-        for (Object item : videos) {\n-            final JsonObject info = ((JsonObject) item).getObject(\"musicResponsiveListItemRenderer\");\n-            if (info != null) {\n-                final String searchType = getLinkHandler().getContentFilters().get(0);\n-                if (searchType.equals(MUSIC_SONGS) || searchType.equals(MUSIC_VIDEOS)) {\n-                    collector.commit(new YoutubeStreamInfoItemExtractor(info, timeAgoParser) {\n-                        @Override\n-                        public String getUrl() throws ParsingException {\n-                            String url = getUrlFromNavigationEndpoint(info.getObject(\"doubleTapCommand\"));\n-                            if (url != null && !url.isEmpty()) return url;\n-                            throw new ParsingException(\"Could not get url\");\n-                        }\n-\n-                        @Override\n-                        public String getName() throws ParsingException {\n-                            String name = getTextFromObject(info.getArray(\"flexColumns\").getObject(0)\n-                                    .getObject(\"musicResponsiveListItemFlexColumnRenderer\").getObject(\"text\"));\n-                            if (name != null && !name.isEmpty()) return name;\n-                            throw new ParsingException(\"Could not get name\");\n-                        }\n-\n-                        @Override\n-                        public long getDuration() throws ParsingException {\n-                            String duration = getTextFromObject(info.getArray(\"flexColumns\").getObject(3)\n-                                    .getObject(\"musicResponsiveListItemFlexColumnRenderer\").getObject(\"text\"));\n-                            if (duration != null && !duration.isEmpty())\n-                                return YoutubeParsingHelper.parseDurationString(duration);\n-                            throw new ParsingException(\"Could not get duration\");\n-                        }\n-\n-                        @Override\n-                        public String getUploaderName() throws ParsingException {\n-                            String name = getTextFromObject(info.getArray(\"flexColumns\").getObject(1)\n-                                    .getObject(\"musicResponsiveListItemFlexColumnRenderer\").getObject(\"text\"));\n-                            if (name != null && !name.isEmpty()) return name;\n-                            throw new ParsingException(\"Could not get uploader name\");\n-                        }\n-\n-                        @Override\n-                        public String getUploaderUrl() throws ParsingException {\n-                            if (searchType.equals(MUSIC_VIDEOS)) return null;\n-                            String url = getUrlFromNavigationEndpoint(info.getArray(\"flexColumns\")\n-                                    .getObject(1).getObject(\"musicResponsiveListItemFlexColumnRenderer\")\n-                                    .getObject(\"text\").getArray(\"runs\").getObject(0).getObject(\"navigationEndpoint\"));\n-                            if (url != null && !url.isEmpty()) return url;\n-                            throw new ParsingException(\"Could not get uploader url\");\n-                        }\n-\n-                        @Override\n-                        public String getTextualUploadDate() {\n-                            return null;\n-                        }\n-\n-                        @Override\n-                        public DateWrapper getUploadDate() {\n-                            return null;\n-                        }\n \n-                        @Override\n-                        public long getViewCount() throws ParsingException {\n-                            if (searchType.equals(MUSIC_SONGS)) return -1;\n-                            String viewCount = getTextFromObject(info.getArray(\"flexColumns\").getObject(2)\n-                                    .getObject(\"musicResponsiveListItemFlexColumnRenderer\").getObject(\"text\"));\n-                            if (viewCount != null && !viewCount.isEmpty()) return Utils.mixedNumberWordToLong(viewCount);\n-                            throw new ParsingException(\"Could not get view count\");\n-                        }\n-\n-                        @Override\n-                        public String getThumbnailUrl() throws ParsingException {\n-                            try {\n-                                JsonArray thumbnails = info.getObject(\"thumbnail\").getObject(\"musicThumbnailRenderer\")\n-                                        .getObject(\"thumbnail\").getArray(\"thumbnails\");\n-                                // the last thumbnail is the one with the highest resolution\n-                                String url = thumbnails.getObject(thumbnails.size() - 1).getString(\"url\");\n-\n-                                return fixThumbnailUrl(url);\n-                            } catch (Exception e) {\n-                                throw new ParsingException(\"Could not get thumbnail url\", e);\n-                            }\n-                        }\n-                    });\n-                } else if (searchType.equals(MUSIC_ARTISTS)) {\n-                    collector.commit(new YoutubeChannelInfoItemExtractor(info) {\n-                        @Override\n-                        public String getThumbnailUrl() throws ParsingException {\n-                            try {\n-                                JsonArray thumbnails = info.getObject(\"thumbnail\").getObject(\"musicThumbnailRenderer\")\n-                                        .getObject(\"thumbnail\").getArray(\"thumbnails\");\n-                                // the last thumbnail is the one with the highest resolution\n-                                String url = thumbnails.getObject(thumbnails.size() - 1).getString(\"url\");\n-\n-                                return fixThumbnailUrl(url);\n-                            } catch (Exception e) {\n-                                throw new ParsingException(\"Could not get thumbnail url\", e);\n-                            }\n-                        }\n-\n-                        @Override\n-                        public String getName() throws ParsingException {\n-                            String name = getTextFromObject(info.getArray(\"flexColumns\").getObject(0)\n-                                    .getObject(\"musicResponsiveListItemFlexColumnRenderer\").getObject(\"text\"));\n-                            if (name != null && !name.isEmpty()) return name;\n-                            throw new ParsingException(\"Could not get name\");\n-                        }\n-\n-                        @Override\n-                        public String getUrl() throws ParsingException {\n-                            String url = getUrlFromNavigationEndpoint(info.getObject(\"navigationEndpoint\"));\n-                            if (url != null && !url.isEmpty()) return url;\n-                            throw new ParsingException(\"Could not get url\");\n-                        }\n-\n-                        @Override\n-                        public long getSubscriberCount() throws ParsingException {\n-                            String viewCount = getTextFromObject(info.getArray(\"flexColumns\").getObject(2)\n-                                    .getObject(\"musicResponsiveListItemFlexColumnRenderer\").getObject(\"text\"));\n-                            if (viewCount != null && !viewCount.isEmpty()) return Utils.mixedNumberWordToLong(viewCount);\n-                            throw new ParsingException(\"Could not get subscriber count\");\n-                        }\n-\n-                        @Override\n-                        public long getStreamCount() {\n-                            return -1;\n-                        }\n-\n-                        @Override\n-                        public String getDescription() {\n-                            return null;\n-                        }\n-                    });\n-                } else if (searchType.equals(MUSIC_ALBUMS) || searchType.equals(MUSIC_PLAYLISTS)) {\n-                    collector.commit(new YoutubePlaylistInfoItemExtractor(info) {\n-                        @Override\n-                        public String getThumbnailUrl() throws ParsingException {\n-                            try {\n-                                JsonArray thumbnails = info.getObject(\"thumbnail\").getObject(\"musicThumbnailRenderer\")\n-                                        .getObject(\"thumbnail\").getArray(\"thumbnails\");\n-                                // the last thumbnail is the one with the highest resolution\n-                                String url = thumbnails.getObject(thumbnails.size() - 1).getString(\"url\");\n-\n-                                return fixThumbnailUrl(url);\n-                            } catch (Exception e) {\n-                                throw new ParsingException(\"Could not get thumbnail url\", e);\n-                            }\n-                        }\n-\n-                        @Override\n-                        public String getName() throws ParsingException {\n-                            String name = getTextFromObject(info.getArray(\"flexColumns\").getObject(0)\n-                                    .getObject(\"musicResponsiveListItemFlexColumnRenderer\").getObject(\"text\"));\n-                            if (name != null && !name.isEmpty()) return name;\n-                            throw new ParsingException(\"Could not get name\");\n-                        }\n-\n-                        @Override\n-                        public String getUrl() throws ParsingException {\n-                            String url = getUrlFromNavigationEndpoint(info.getObject(\"doubleTapCommand\"));\n-                            if (url != null && !url.isEmpty()) return url;\n-                            throw new ParsingException(\"Could not get url\");\n-                        }\n-\n-                        @Override\n-                        public String getUploaderName() throws ParsingException {\n-                            String name;\n-                            if (searchType.equals(MUSIC_ALBUMS)) {\n-                                name = getTextFromObject(info.getArray(\"flexColumns\").getObject(2)\n-                                        .getObject(\"musicResponsiveListItemFlexColumnRenderer\").getObject(\"text\"));\n-                            } else {\n-                                name = getTextFromObject(info.getArray(\"flexColumns\").getObject(1)\n-                                        .getObject(\"musicResponsiveListItemFlexColumnRenderer\").getObject(\"text\"));\n-                            }\n-                            if (name != null && !name.isEmpty()) return name;\n-                            throw new ParsingException(\"Could not get uploader name\");\n-                        }\n-\n-                        @Override\n-                        public long getStreamCount() throws ParsingException {\n-                            if (searchType.equals(MUSIC_ALBUMS)) return UNKNOWN_ITEMS;\n-                            String count = getTextFromObject(info.getArray(\"flexColumns\").getObject(2)\n-                                    .getObject(\"musicResponsiveListItemFlexColumnRenderer\").getObject(\"text\"));\n-                            if (count != null && !count.isEmpty()) {\n-                                if (count.contains(\"100+\")) {\n-                                    return MORE_THAN_100_ITEMS;\n-                                } else {\n-                                    return Long.parseLong(Utils.removeNonDigitCharacters(count));\n-                                }\n-                            }\n-                            throw new ParsingException(\"Could not get count\");\n-                        }\n-                    });\n-                }\n-            }\n+    private String getNextPageUrlFrom(final JsonArray continuations) throws ParsingException {\n+        if (continuations == null) {\n+            return \"\";\n         }\n-    }\n \n-    private String getNextPageUrlFrom(JsonArray continuations) throws ParsingException, IOException, ReCaptchaException {\n-        if (continuations == null) return \"\";\n+        final JsonObject nextContinuationData = continuations.getObject(0).getObject(\"nextContinuationData\");\n+        final String continuation = nextContinuationData.getString(\"continuation\");\n+        final String clickTrackingParams = nextContinuationData.getString(\"clickTrackingParams\");\n \n-        JsonObject nextContinuationData = continuations.getObject(0).getObject(\"nextContinuationData\");\n-        String continuation = nextContinuationData.getString(\"continuation\");\n-        String clickTrackingParams = nextContinuationData.getString(\"clickTrackingParams\");\n-\n-        if (isMusicSearch()) {\n-            return \"https://music.youtube.com/youtubei/v1/search?ctoken=\" + continuation + \"&continuation=\" + continuation\n-                    + \"&itct=\" + clickTrackingParams + \"&alt=json&key=\" + YoutubeParsingHelper.getYoutubeMusicKeys()[0];\n-        } else {\n-            return getUrl() + \"&pbj=1&ctoken=\" + continuation + \"&continuation=\" + continuation\n-                    + \"&itct=\" + clickTrackingParams;\n-        }\n+        return getUrl() + \"&pbj=1&ctoken=\" + continuation + \"&continuation=\" + continuation\n+                + \"&itct=\" + clickTrackingParams;\n     }\n }\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTcyOTY0NA==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/291#discussion_r395729644", "body": "Testing for the items are missing in this test, a simple check with the default tests from `DefaultTests` already show that one field was forgotten to be extracted (the uploader url).", "bodyText": "Testing for the items are missing in this test, a simple check with the default tests from DefaultTests already show that one field was forgotten to be extracted (the uploader url).", "bodyHTML": "<p dir=\"auto\">Testing for the items are missing in this test, a simple check with the default tests from <code>DefaultTests</code> already show that one field was forgotten to be extracted (the uploader url).</p>", "author": "mauriciocolli", "createdAt": "2020-03-20T15:52:29Z", "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/youtube/search/YoutubeSearchExtractorMusicTest.java", "diffHunk": "@@ -0,0 +1,89 @@\n+package org.schabi.newpipe.extractor.services.youtube.search;\n+\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.schabi.newpipe.DownloaderTestImpl;\n+import org.schabi.newpipe.extractor.InfoItem;\n+import org.schabi.newpipe.extractor.ListExtractor;\n+import org.schabi.newpipe.extractor.NewPipe;\n+import org.schabi.newpipe.extractor.services.youtube.extractors.YoutubeSearchExtractor;\n+import org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeSearchQueryHandlerFactory;\n+\n+import java.net.URL;\n+import java.net.URLDecoder;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+\n+import static java.util.Arrays.asList;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.schabi.newpipe.extractor.ServiceList.YouTube;\n+\n+public class YoutubeSearchExtractorMusicTest extends YoutubeSearchExtractorBaseTest {", "originalCommit": "dc25ecc88c63ad3ef4ca9fd4974e3efc2d0e6664", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgxMTI2Mw==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/291#discussion_r395811263", "bodyText": "True, however we appear to not use the DefaultTests at all for the SearchExtractor. Also, videos have no uploader url, though songs do.", "author": "wb9688", "createdAt": "2020-03-20T18:12:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTcyOTY0NA=="}], "type": "inlineReview", "revised_code": {"commit": "1762a527c9c9d6d552bbee6035d5a3f2397f3894", "changed_code": [{"header": "diff --git a/extractor/src/test/java/org/schabi/newpipe/extractor/services/youtube/search/YoutubeSearchExtractorMusicTest.java b/extractor/src/test/java/org/schabi/newpipe/extractor/services/youtube/search/YoutubeSearchExtractorMusicTest.java\ndeleted file mode 100644\nindex 61c8e04b..00000000\n--- a/extractor/src/test/java/org/schabi/newpipe/extractor/services/youtube/search/YoutubeSearchExtractorMusicTest.java\n+++ /dev/null\n", "chunk": "@@ -1,89 +0,0 @@\n-package org.schabi.newpipe.extractor.services.youtube.search;\n-\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n-import org.schabi.newpipe.DownloaderTestImpl;\n-import org.schabi.newpipe.extractor.InfoItem;\n-import org.schabi.newpipe.extractor.ListExtractor;\n-import org.schabi.newpipe.extractor.NewPipe;\n-import org.schabi.newpipe.extractor.services.youtube.extractors.YoutubeSearchExtractor;\n-import org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeSearchQueryHandlerFactory;\n-\n-import java.net.URL;\n-import java.net.URLDecoder;\n-import java.util.LinkedHashMap;\n-import java.util.Map;\n-\n-import static java.util.Arrays.asList;\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertTrue;\n-import static org.schabi.newpipe.extractor.ServiceList.YouTube;\n-\n-public class YoutubeSearchExtractorMusicTest extends YoutubeSearchExtractorBaseTest {\n-    @BeforeClass\n-    public static void setUpClass() throws Exception {\n-        NewPipe.init(DownloaderTestImpl.getInstance());\n-        extractor = (YoutubeSearchExtractor) YouTube.getSearchExtractor(\"mocromaniac\",\n-                asList(YoutubeSearchQueryHandlerFactory.MUSIC_SONGS), null);\n-        extractor.fetchPage();\n-        itemsPage = extractor.getInitialPage();\n-    }\n-\n-    @Test\n-    public void testGetSecondPage() throws Exception {\n-        YoutubeSearchExtractor secondExtractor = (YoutubeSearchExtractor) YouTube.getSearchExtractor(\"mocromaniac\",\n-                asList(YoutubeSearchQueryHandlerFactory.MUSIC_SONGS), null);\n-        ListExtractor.InfoItemsPage<InfoItem> secondPage = secondExtractor.getPage(itemsPage.getNextPageUrl());\n-        assertTrue(Integer.toString(secondPage.getItems().size()),\n-                secondPage.getItems().size() > 10);\n-\n-        // check if its the same result\n-        boolean equals = true;\n-        for (int i = 0; i < secondPage.getItems().size()\n-                && i < itemsPage.getItems().size(); i++) {\n-            if (!secondPage.getItems().get(i).getUrl().equals(\n-                    itemsPage.getItems().get(i).getUrl())) {\n-                equals = false;\n-            }\n-        }\n-        assertFalse(\"First and second page are equal\", equals);\n-    }\n-\n-    @Override\n-    @Test\n-    public void testUrl() throws Exception {\n-        assertTrue(extractor.getUrl(), extractor.getUrl().startsWith(\"https://music.youtube.com/search?q=\"));\n-    }\n-\n-    @Test\n-    public void testGetSecondPageUrl() throws Exception {\n-        URL url = new URL(extractor.getNextPageUrl());\n-\n-        assertEquals(url.getHost(), \"music.youtube.com\");\n-        assertEquals(url.getPath(), \"/youtubei/v1/search\");\n-\n-        Map<String, String> queryPairs = new LinkedHashMap<>();\n-        for (String queryPair : url.getQuery().split(\"&\")) {\n-            int index = queryPair.indexOf(\"=\");\n-            queryPairs.put(URLDecoder.decode(queryPair.substring(0, index), \"UTF-8\"),\n-                    URLDecoder.decode(queryPair.substring(index + 1), \"UTF-8\"));\n-        }\n-\n-        assertEquals(queryPairs.get(\"ctoken\"), queryPairs.get(\"continuation\"));\n-        assertTrue(queryPairs.get(\"continuation\").length() > 5);\n-        assertTrue(queryPairs.get(\"itct\").length() > 5);\n-        assertEquals(\"json\", queryPairs.get(\"alt\"));\n-        assertTrue(queryPairs.get(\"key\").length() > 5);\n-    }\n-\n-    @Test\n-    public void testSuggestions() throws Exception {\n-        YoutubeSearchExtractor newExtractor = (YoutubeSearchExtractor) YouTube.getSearchExtractor(\"megaman x3\",\n-                asList(YoutubeSearchQueryHandlerFactory.MUSIC_SONGS), null);\n-        newExtractor.fetchPage();\n-\n-        assertTrue(newExtractor.getInitialPage().getItems().size() > 10);\n-        assertEquals(\"mega man x3\", newExtractor.getSearchSuggestion());\n-    }\n-}\n", "next_change": {"commit": "eb485244119c4338d32dc1468ae9dcf98b81058a", "changed_code": [{"header": "diff --git a/extractor/src/test/java/org/schabi/newpipe/extractor/services/youtube/search/YoutubeSearchExtractorMusicTest.java b/extractor/src/test/java/org/schabi/newpipe/extractor/services/youtube/search/YoutubeSearchExtractorMusicTest.java\nnew file mode 100644\nindex 00000000..aaf6105c\n--- /dev/null\n+++ b/extractor/src/test/java/org/schabi/newpipe/extractor/services/youtube/search/YoutubeSearchExtractorMusicTest.java\n", "chunk": "@@ -0,0 +1,79 @@\n+package org.schabi.newpipe.extractor.services.youtube.search;\n+\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.schabi.newpipe.DownloaderTestImpl;\n+import org.schabi.newpipe.extractor.InfoItem;\n+import org.schabi.newpipe.extractor.ListExtractor;\n+import org.schabi.newpipe.extractor.NewPipe;\n+import org.schabi.newpipe.extractor.services.youtube.extractors.YoutubeSearchExtractor;\n+import org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeSearchQueryHandlerFactory;\n+\n+import java.net.URL;\n+import java.net.URLDecoder;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+\n+import static java.util.Arrays.asList;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.schabi.newpipe.extractor.ServiceList.YouTube;\n+\n+public class YoutubeSearchExtractorMusicTest extends YoutubeSearchExtractorBaseTest {\n+    @BeforeClass\n+    public static void setUpClass() throws Exception {\n+        NewPipe.init(DownloaderTestImpl.getInstance());\n+        extractor = (YoutubeSearchExtractor) YouTube.getSearchExtractor(\"mocromaniac\",\n+                asList(YoutubeSearchQueryHandlerFactory.MUSIC_SONGS), null);\n+        extractor.fetchPage();\n+        itemsPage = extractor.getInitialPage();\n+    }\n+\n+    @Test\n+    public void testGetSecondPage() throws Exception {\n+        YoutubeSearchExtractor secondExtractor = (YoutubeSearchExtractor) YouTube.getSearchExtractor(\"mocromaniac\",\n+                asList(YoutubeSearchQueryHandlerFactory.MUSIC_SONGS), null);\n+        ListExtractor.InfoItemsPage<InfoItem> secondPage = secondExtractor.getPage(itemsPage.getNextPageUrl());\n+        assertTrue(Integer.toString(secondPage.getItems().size()),\n+                secondPage.getItems().size() > 10);\n+\n+        // check if its the same result\n+        boolean equals = true;\n+        for (int i = 0; i < secondPage.getItems().size()\n+                && i < itemsPage.getItems().size(); i++) {\n+            if (!secondPage.getItems().get(i).getUrl().equals(\n+                    itemsPage.getItems().get(i).getUrl())) {\n+                equals = false;\n+            }\n+        }\n+        assertFalse(\"First and second page are equal\", equals);\n+    }\n+\n+    @Override\n+    @Test\n+    public void testUrl() throws Exception {\n+        assertTrue(extractor.getUrl(), extractor.getUrl().startsWith(\"https://music.youtube.com/search?q=\"));\n+    }\n+\n+    @Test\n+    public void testGetSecondPageUrl() throws Exception {\n+        URL url = new URL(extractor.getNextPageUrl());\n+\n+        assertEquals(url.getHost(), \"music.youtube.com\");\n+        assertEquals(url.getPath(), \"/youtubei/v1/search\");\n+\n+        Map<String, String> queryPairs = new LinkedHashMap<>();\n+        for (String queryPair : url.getQuery().split(\"&\")) {\n+            int index = queryPair.indexOf(\"=\");\n+            queryPairs.put(URLDecoder.decode(queryPair.substring(0, index), \"UTF-8\"),\n+                    URLDecoder.decode(queryPair.substring(index + 1), \"UTF-8\"));\n+        }\n+\n+        assertEquals(queryPairs.get(\"ctoken\"), queryPairs.get(\"continuation\"));\n+        assertTrue(queryPairs.get(\"continuation\").length() > 5);\n+        assertTrue(queryPairs.get(\"itct\").length() > 5);\n+        assertEquals(\"json\", queryPairs.get(\"alt\"));\n+        assertTrue(queryPairs.get(\"key\").length() > 5);\n+    }\n+}\n", "next_change": {"commit": "dc29d87962f0f9acd97d7d0bcad6afcc67b127fd", "changed_code": [{"header": "diff --git a/extractor/src/test/java/org/schabi/newpipe/extractor/services/youtube/search/YoutubeSearchExtractorMusicTest.java b/extractor/src/test/java/org/schabi/newpipe/extractor/services/youtube/search/YoutubeSearchExtractorMusicTest.java\nindex aaf6105c..61c8e04b 100644\n--- a/extractor/src/test/java/org/schabi/newpipe/extractor/services/youtube/search/YoutubeSearchExtractorMusicTest.java\n+++ b/extractor/src/test/java/org/schabi/newpipe/extractor/services/youtube/search/YoutubeSearchExtractorMusicTest.java\n", "chunk": "@@ -76,4 +76,14 @@ public class YoutubeSearchExtractorMusicTest extends YoutubeSearchExtractorBaseT\n         assertEquals(\"json\", queryPairs.get(\"alt\"));\n         assertTrue(queryPairs.get(\"key\").length() > 5);\n     }\n+\n+    @Test\n+    public void testSuggestions() throws Exception {\n+        YoutubeSearchExtractor newExtractor = (YoutubeSearchExtractor) YouTube.getSearchExtractor(\"megaman x3\",\n+                asList(YoutubeSearchQueryHandlerFactory.MUSIC_SONGS), null);\n+        newExtractor.fetchPage();\n+\n+        assertTrue(newExtractor.getInitialPage().getItems().size() > 10);\n+        assertEquals(\"mega man x3\", newExtractor.getSearchSuggestion());\n+    }\n }\n", "next_change": {"commit": "aa8cea47f3d6276ab592d18ff550ad9d6e63d81b", "changed_code": [{"header": "diff --git a/extractor/src/test/java/org/schabi/newpipe/extractor/services/youtube/search/YoutubeSearchExtractorMusicTest.java b/extractor/src/test/java/org/schabi/newpipe/extractor/services/youtube/search/YoutubeSearchExtractorMusicTest.java\nindex 61c8e04b..fe174380 100644\n--- a/extractor/src/test/java/org/schabi/newpipe/extractor/services/youtube/search/YoutubeSearchExtractorMusicTest.java\n+++ b/extractor/src/test/java/org/schabi/newpipe/extractor/services/youtube/search/YoutubeSearchExtractorMusicTest.java\n", "chunk": "@@ -1,89 +1,63 @@\n package org.schabi.newpipe.extractor.services.youtube.search;\n \n import org.junit.BeforeClass;\n-import org.junit.Test;\n import org.schabi.newpipe.DownloaderTestImpl;\n import org.schabi.newpipe.extractor.InfoItem;\n-import org.schabi.newpipe.extractor.ListExtractor;\n import org.schabi.newpipe.extractor.NewPipe;\n-import org.schabi.newpipe.extractor.services.youtube.extractors.YoutubeSearchExtractor;\n+import org.schabi.newpipe.extractor.StreamingService;\n+import org.schabi.newpipe.extractor.search.SearchExtractor;\n+import org.schabi.newpipe.extractor.services.DefaultSearchExtractorTest;\n import org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeSearchQueryHandlerFactory;\n \n-import java.net.URL;\n-import java.net.URLDecoder;\n-import java.util.LinkedHashMap;\n-import java.util.Map;\n+import java.net.URLEncoder;\n \n-import static java.util.Arrays.asList;\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertTrue;\n-import static org.schabi.newpipe.extractor.ServiceList.YouTube;\n+import javax.annotation.Nullable;\n \n-public class YoutubeSearchExtractorMusicTest extends YoutubeSearchExtractorBaseTest {\n-    @BeforeClass\n-    public static void setUpClass() throws Exception {\n-        NewPipe.init(DownloaderTestImpl.getInstance());\n-        extractor = (YoutubeSearchExtractor) YouTube.getSearchExtractor(\"mocromaniac\",\n-                asList(YoutubeSearchQueryHandlerFactory.MUSIC_SONGS), null);\n-        extractor.fetchPage();\n-        itemsPage = extractor.getInitialPage();\n-    }\n+import static java.util.Collections.singletonList;\n+import static org.schabi.newpipe.extractor.ServiceList.YouTube;\n \n-    @Test\n-    public void testGetSecondPage() throws Exception {\n-        YoutubeSearchExtractor secondExtractor = (YoutubeSearchExtractor) YouTube.getSearchExtractor(\"mocromaniac\",\n-                asList(YoutubeSearchQueryHandlerFactory.MUSIC_SONGS), null);\n-        ListExtractor.InfoItemsPage<InfoItem> secondPage = secondExtractor.getPage(itemsPage.getNextPageUrl());\n-        assertTrue(Integer.toString(secondPage.getItems().size()),\n-                secondPage.getItems().size() > 10);\n+public class YoutubeSearchExtractorMusicTest {\n+    public static class MusicSongs extends DefaultSearchExtractorTest {\n+        private static SearchExtractor extractor;\n+        private static final String QUERY = \"mocromaniac\";\n \n-        // check if its the same result\n-        boolean equals = true;\n-        for (int i = 0; i < secondPage.getItems().size()\n-                && i < itemsPage.getItems().size(); i++) {\n-            if (!secondPage.getItems().get(i).getUrl().equals(\n-                    itemsPage.getItems().get(i).getUrl())) {\n-                equals = false;\n-            }\n+        @BeforeClass\n+        public static void setUp() throws Exception {\n+            NewPipe.init(DownloaderTestImpl.getInstance());\n+            extractor = YouTube.getSearchExtractor(QUERY, singletonList(YoutubeSearchQueryHandlerFactory.MUSIC_SONGS), \"\");\n+            extractor.fetchPage();\n         }\n-        assertFalse(\"First and second page are equal\", equals);\n-    }\n \n-    @Override\n-    @Test\n-    public void testUrl() throws Exception {\n-        assertTrue(extractor.getUrl(), extractor.getUrl().startsWith(\"https://music.youtube.com/search?q=\"));\n+        @Override public SearchExtractor extractor() { return extractor; }\n+        @Override public StreamingService expectedService() { return YouTube; }\n+        @Override public String expectedName() { return QUERY; }\n+        @Override public String expectedId() { return QUERY; }\n+        @Override public String expectedUrlContains() { return \"music.youtube.com/search?q=\" + QUERY; }\n+        @Override public String expectedOriginalUrlContains() { return \"music.youtube.com/search?q=\" + QUERY; }\n+        @Override public String expectedSearchString() { return QUERY; }\n+        @Nullable @Override public String expectedSearchSuggestion() { return null; }\n+        @Override public InfoItem.InfoType expectedInfoItemType() { return InfoItem.InfoType.STREAM; }\n     }\n \n-    @Test\n-    public void testGetSecondPageUrl() throws Exception {\n-        URL url = new URL(extractor.getNextPageUrl());\n+    public static class Suggestion extends DefaultSearchExtractorTest {\n+        private static SearchExtractor extractor;\n+        private static final String QUERY = \"megaman x3\";\n \n-        assertEquals(url.getHost(), \"music.youtube.com\");\n-        assertEquals(url.getPath(), \"/youtubei/v1/search\");\n-\n-        Map<String, String> queryPairs = new LinkedHashMap<>();\n-        for (String queryPair : url.getQuery().split(\"&\")) {\n-            int index = queryPair.indexOf(\"=\");\n-            queryPairs.put(URLDecoder.decode(queryPair.substring(0, index), \"UTF-8\"),\n-                    URLDecoder.decode(queryPair.substring(index + 1), \"UTF-8\"));\n+        @BeforeClass\n+        public static void setUp() throws Exception {\n+            NewPipe.init(DownloaderTestImpl.getInstance());\n+            extractor = YouTube.getSearchExtractor(QUERY, singletonList(YoutubeSearchQueryHandlerFactory.MUSIC_SONGS), \"\");\n+            extractor.fetchPage();\n         }\n \n-        assertEquals(queryPairs.get(\"ctoken\"), queryPairs.get(\"continuation\"));\n-        assertTrue(queryPairs.get(\"continuation\").length() > 5);\n-        assertTrue(queryPairs.get(\"itct\").length() > 5);\n-        assertEquals(\"json\", queryPairs.get(\"alt\"));\n-        assertTrue(queryPairs.get(\"key\").length() > 5);\n-    }\n-\n-    @Test\n-    public void testSuggestions() throws Exception {\n-        YoutubeSearchExtractor newExtractor = (YoutubeSearchExtractor) YouTube.getSearchExtractor(\"megaman x3\",\n-                asList(YoutubeSearchQueryHandlerFactory.MUSIC_SONGS), null);\n-        newExtractor.fetchPage();\n-\n-        assertTrue(newExtractor.getInitialPage().getItems().size() > 10);\n-        assertEquals(\"mega man x3\", newExtractor.getSearchSuggestion());\n+        @Override public SearchExtractor extractor() { return extractor; }\n+        @Override public StreamingService expectedService() { return YouTube; }\n+        @Override public String expectedName() { return QUERY; }\n+        @Override public String expectedId() { return QUERY; }\n+        @Override public String expectedUrlContains() { return \"music.youtube.com/search?q=\" + URLEncoder.encode(QUERY); }\n+        @Override public String expectedOriginalUrlContains() { return \"music.youtube.com/search?q=\" + URLEncoder.encode(QUERY); }\n+        @Override public String expectedSearchString() { return QUERY; }\n+        @Nullable @Override public String expectedSearchSuggestion() { return \"mega man x3\"; }\n+        @Override public InfoItem.InfoType expectedInfoItemType() { return InfoItem.InfoType.STREAM; }\n     }\n }\n", "next_change": {"commit": "2af610e3e7942b1d28e304fa53cb4d263c8d6403", "changed_code": [{"header": "diff --git a/extractor/src/test/java/org/schabi/newpipe/extractor/services/youtube/search/YoutubeSearchExtractorMusicTest.java b/extractor/src/test/java/org/schabi/newpipe/extractor/services/youtube/search/YoutubeSearchExtractorMusicTest.java\ndeleted file mode 100644\nindex fe174380..00000000\n--- a/extractor/src/test/java/org/schabi/newpipe/extractor/services/youtube/search/YoutubeSearchExtractorMusicTest.java\n+++ /dev/null\n", "chunk": "@@ -1,63 +0,0 @@\n-package org.schabi.newpipe.extractor.services.youtube.search;\n-\n-import org.junit.BeforeClass;\n-import org.schabi.newpipe.DownloaderTestImpl;\n-import org.schabi.newpipe.extractor.InfoItem;\n-import org.schabi.newpipe.extractor.NewPipe;\n-import org.schabi.newpipe.extractor.StreamingService;\n-import org.schabi.newpipe.extractor.search.SearchExtractor;\n-import org.schabi.newpipe.extractor.services.DefaultSearchExtractorTest;\n-import org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeSearchQueryHandlerFactory;\n-\n-import java.net.URLEncoder;\n-\n-import javax.annotation.Nullable;\n-\n-import static java.util.Collections.singletonList;\n-import static org.schabi.newpipe.extractor.ServiceList.YouTube;\n-\n-public class YoutubeSearchExtractorMusicTest {\n-    public static class MusicSongs extends DefaultSearchExtractorTest {\n-        private static SearchExtractor extractor;\n-        private static final String QUERY = \"mocromaniac\";\n-\n-        @BeforeClass\n-        public static void setUp() throws Exception {\n-            NewPipe.init(DownloaderTestImpl.getInstance());\n-            extractor = YouTube.getSearchExtractor(QUERY, singletonList(YoutubeSearchQueryHandlerFactory.MUSIC_SONGS), \"\");\n-            extractor.fetchPage();\n-        }\n-\n-        @Override public SearchExtractor extractor() { return extractor; }\n-        @Override public StreamingService expectedService() { return YouTube; }\n-        @Override public String expectedName() { return QUERY; }\n-        @Override public String expectedId() { return QUERY; }\n-        @Override public String expectedUrlContains() { return \"music.youtube.com/search?q=\" + QUERY; }\n-        @Override public String expectedOriginalUrlContains() { return \"music.youtube.com/search?q=\" + QUERY; }\n-        @Override public String expectedSearchString() { return QUERY; }\n-        @Nullable @Override public String expectedSearchSuggestion() { return null; }\n-        @Override public InfoItem.InfoType expectedInfoItemType() { return InfoItem.InfoType.STREAM; }\n-    }\n-\n-    public static class Suggestion extends DefaultSearchExtractorTest {\n-        private static SearchExtractor extractor;\n-        private static final String QUERY = \"megaman x3\";\n-\n-        @BeforeClass\n-        public static void setUp() throws Exception {\n-            NewPipe.init(DownloaderTestImpl.getInstance());\n-            extractor = YouTube.getSearchExtractor(QUERY, singletonList(YoutubeSearchQueryHandlerFactory.MUSIC_SONGS), \"\");\n-            extractor.fetchPage();\n-        }\n-\n-        @Override public SearchExtractor extractor() { return extractor; }\n-        @Override public StreamingService expectedService() { return YouTube; }\n-        @Override public String expectedName() { return QUERY; }\n-        @Override public String expectedId() { return QUERY; }\n-        @Override public String expectedUrlContains() { return \"music.youtube.com/search?q=\" + URLEncoder.encode(QUERY); }\n-        @Override public String expectedOriginalUrlContains() { return \"music.youtube.com/search?q=\" + URLEncoder.encode(QUERY); }\n-        @Override public String expectedSearchString() { return QUERY; }\n-        @Nullable @Override public String expectedSearchSuggestion() { return \"mega man x3\"; }\n-        @Override public InfoItem.InfoType expectedInfoItemType() { return InfoItem.InfoType.STREAM; }\n-    }\n-}\n", "next_change": null}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTc0MjI1NA==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/291#discussion_r395742254", "body": "As discussed, the default http client from java [has some restrictions about request headers](https://hg.openjdk.java.net/jdk8/jdk8/jdk/file/687fd7c7986d/src/share/classes/sun/net/www/protocol/http/HttpURLConnection.java#l194).\r\n\r\nI think using another client for tests is the right choice (like you did earlier, OkHttp is a good one).\r\n\r\nShould we do it in its own pull request? The front end is already using it, don't think too many problems would be a result of this, but then we can test thoroughly what kind of effects it will have.", "bodyText": "As discussed, the default http client from java has some restrictions about request headers.\nI think using another client for tests is the right choice (like you did earlier, OkHttp is a good one).\nShould we do it in its own pull request? The front end is already using it, don't think too many problems would be a result of this, but then we can test thoroughly what kind of effects it will have.", "bodyHTML": "<p dir=\"auto\">As discussed, the default http client from java <a href=\"https://hg.openjdk.java.net/jdk8/jdk8/jdk/file/687fd7c7986d/src/share/classes/sun/net/www/protocol/http/HttpURLConnection.java#l194\" rel=\"nofollow\">has some restrictions about request headers</a>.</p>\n<p dir=\"auto\">I think using another client for tests is the right choice (like you did earlier, OkHttp is a good one).</p>\n<p dir=\"auto\">Should we do it in its own pull request? The front end is already using it, don't think too many problems would be a result of this, but then we can test thoroughly what kind of effects it will have.</p>", "author": "mauriciocolli", "createdAt": "2020-03-20T16:12:15Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeSearchExtractor.java", "diffHunk": "@@ -49,52 +71,169 @@ public YoutubeSearchExtractor(StreamingService service, SearchQueryHandler linkH\n \n     @Override\n     public void onFetchPage(@Nonnull Downloader downloader) throws IOException, ExtractionException {\n-        final String url = getUrl() + \"&pbj=1\";\n+        if (isMusicSearch()) {\n+            final String[] youtubeMusicKeys = YoutubeParsingHelper.getYoutubeMusicKeys();\n \n-        final JsonArray ajaxJson = getJsonResponse(url, getExtractorLocalization());\n+            final String url = \"https://music.youtube.com/youtubei/v1/search?alt=json&key=\" + youtubeMusicKeys[0];\n \n-        initialData = ajaxJson.getObject(1).getObject(\"response\");\n+            String params = null;\n+\n+            switch (getLinkHandler().getContentFilters().get(0)) {\n+                case MUSIC_SONGS:\n+                    params = \"Eg-KAQwIARAAGAAgACgAMABqChAEEAUQAxAKEAk%3D\";\n+                    break;\n+                case MUSIC_VIDEOS:\n+                    params = \"Eg-KAQwIABABGAAgACgAMABqChAEEAUQAxAKEAk%3D\";\n+                    break;\n+                case MUSIC_ALBUMS:\n+                    params = \"Eg-KAQwIABAAGAEgACgAMABqChAEEAUQAxAKEAk%3D\";\n+                    break;\n+                case MUSIC_PLAYLISTS:\n+                    params = \"Eg-KAQwIABAAGAAgACgBMABqChAEEAUQAxAKEAk%3D\";\n+                    break;\n+                case MUSIC_ARTISTS:\n+                    params = \"Eg-KAQwIABAAGAAgASgAMABqChAEEAUQAxAKEAk%3D\";\n+                    break;\n+            }\n+\n+            // @formatter:off\n+            byte[] json = JsonWriter.string()\n+                .object()\n+                    .object(\"context\")\n+                        .object(\"client\")\n+                            .value(\"clientName\", \"WEB_REMIX\")\n+                            .value(\"clientVersion\", youtubeMusicKeys[2])\n+                            .value(\"hl\", \"en\")\n+                            .value(\"gl\", getExtractorContentCountry().getCountryCode())\n+                            .array(\"experimentIds\").end()\n+                            .value(\"experimentsToken\", \"\")\n+                            .value(\"utcOffsetMinutes\", 0)\n+                            .object(\"locationInfo\").end()\n+                            .object(\"musicAppInfo\").end()\n+                        .end()\n+                        .object(\"capabilities\").end()\n+                        .object(\"request\")\n+                            .array(\"internalExperimentFlags\").end()\n+                            .object(\"sessionIndex\").end()\n+                        .end()\n+                        .object(\"activePlayers\").end()\n+                        .object(\"user\")\n+                            .value(\"enableSafetyMode\", false)\n+                        .end()\n+                    .end()\n+                    .value(\"query\", getSearchString())\n+                    .value(\"params\", params)\n+                .end().done().getBytes(\"UTF-8\");\n+            // @formatter:on\n+\n+            Map<String, List<String>> headers = new HashMap<>();\n+            headers.put(\"X-YouTube-Client-Name\", Collections.singletonList(youtubeMusicKeys[1]));\n+            headers.put(\"X-YouTube-Client-Version\", Collections.singletonList(youtubeMusicKeys[2]));\n+            headers.put(\"Origin\", Collections.singletonList(\"https://music.youtube.com\"));", "originalCommit": "dc25ecc88c63ad3ef4ca9fd4974e3efc2d0e6664", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgwNjc0Nw==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/291#discussion_r395806747", "bodyText": "This should indeed be a different PR. I think OkHttp should be used, so we have the exact same behavior in the tests as in NewPipe.", "author": "wb9688", "createdAt": "2020-03-20T18:03:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTc0MjI1NA=="}], "type": "inlineReview", "revised_code": {"commit": "1762a527c9c9d6d552bbee6035d5a3f2397f3894", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeSearchExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeSearchExtractor.java\nindex afe25caa..dbb95f04 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeSearchExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeSearchExtractor.java\n", "chunk": "@@ -130,7 +128,6 @@ public class YoutubeSearchExtractor extends SearchExtractor {\n             headers.put(\"X-YouTube-Client-Name\", Collections.singletonList(youtubeMusicKeys[1]));\n             headers.put(\"X-YouTube-Client-Version\", Collections.singletonList(youtubeMusicKeys[2]));\n             headers.put(\"Origin\", Collections.singletonList(\"https://music.youtube.com\"));\n-            headers.put(\"Referer\", Collections.singletonList(\"music.youtube.com\"));\n             headers.put(\"Content-Type\", Collections.singletonList(\"application/json\"));\n \n             Response response = getDownloader().post(url, headers, json);\n", "next_change": {"commit": "c852b13d5a395f696b6d5e93a07dcc3dd26b5497", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeSearchExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeSearchExtractor.java\nindex dbb95f04..85882e1f 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeSearchExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeSearchExtractor.java\n", "chunk": "@@ -128,6 +130,7 @@ public class YoutubeSearchExtractor extends SearchExtractor {\n             headers.put(\"X-YouTube-Client-Name\", Collections.singletonList(youtubeMusicKeys[1]));\n             headers.put(\"X-YouTube-Client-Version\", Collections.singletonList(youtubeMusicKeys[2]));\n             headers.put(\"Origin\", Collections.singletonList(\"https://music.youtube.com\"));\n+            headers.put(\"Referer\", Collections.singletonList(\"music.youtube.com\"));\n             headers.put(\"Content-Type\", Collections.singletonList(\"application/json\"));\n \n             Response response = getDownloader().post(url, headers, json);\n", "next_change": {"commit": "ac15df45489178002c95db436a717319020a517a", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeSearchExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeSearchExtractor.java\nindex 85882e1f..06d83b24 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeSearchExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeSearchExtractor.java\n", "chunk": "@@ -65,262 +43,79 @@ import static org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeS\n public class YoutubeSearchExtractor extends SearchExtractor {\n     private JsonObject initialData;\n \n-    public YoutubeSearchExtractor(StreamingService service, SearchQueryHandler linkHandler) {\n+    public YoutubeSearchExtractor(final StreamingService service, final SearchQueryHandler linkHandler) {\n         super(service, linkHandler);\n     }\n \n     @Override\n-    public void onFetchPage(@Nonnull Downloader downloader) throws IOException, ExtractionException {\n-        if (isMusicSearch()) {\n-            final String[] youtubeMusicKeys = YoutubeParsingHelper.getYoutubeMusicKeys();\n+    public void onFetchPage(@Nonnull final Downloader downloader) throws IOException, ExtractionException {\n+        final String url = getUrl() + \"&pbj=1\";\n \n-            final String url = \"https://music.youtube.com/youtubei/v1/search?alt=json&key=\" + youtubeMusicKeys[0];\n+        final JsonArray ajaxJson = getJsonResponse(url, getExtractorLocalization());\n \n-            String params = null;\n-\n-            switch (getLinkHandler().getContentFilters().get(0)) {\n-                case MUSIC_SONGS:\n-                    params = \"Eg-KAQwIARAAGAAgACgAMABqChAEEAUQAxAKEAk%3D\";\n-                    break;\n-                case MUSIC_VIDEOS:\n-                    params = \"Eg-KAQwIABABGAAgACgAMABqChAEEAUQAxAKEAk%3D\";\n-                    break;\n-                case MUSIC_ALBUMS:\n-                    params = \"Eg-KAQwIABAAGAEgACgAMABqChAEEAUQAxAKEAk%3D\";\n-                    break;\n-                case MUSIC_PLAYLISTS:\n-                    params = \"Eg-KAQwIABAAGAAgACgBMABqChAEEAUQAxAKEAk%3D\";\n-                    break;\n-                case MUSIC_ARTISTS:\n-                    params = \"Eg-KAQwIABAAGAAgASgAMABqChAEEAUQAxAKEAk%3D\";\n-                    break;\n-            }\n-\n-            // @formatter:off\n-            byte[] json = JsonWriter.string()\n-                .object()\n-                    .object(\"context\")\n-                        .object(\"client\")\n-                            .value(\"clientName\", \"WEB_REMIX\")\n-                            .value(\"clientVersion\", youtubeMusicKeys[2])\n-                            .value(\"hl\", \"en\")\n-                            .value(\"gl\", getExtractorContentCountry().getCountryCode())\n-                            .array(\"experimentIds\").end()\n-                            .value(\"experimentsToken\", \"\")\n-                            .value(\"utcOffsetMinutes\", 0)\n-                            .object(\"locationInfo\").end()\n-                            .object(\"musicAppInfo\").end()\n-                        .end()\n-                        .object(\"capabilities\").end()\n-                        .object(\"request\")\n-                            .array(\"internalExperimentFlags\").end()\n-                            .object(\"sessionIndex\").end()\n-                        .end()\n-                        .object(\"activePlayers\").end()\n-                        .object(\"user\")\n-                            .value(\"enableSafetyMode\", false)\n-                        .end()\n-                    .end()\n-                    .value(\"query\", getSearchString())\n-                    .value(\"params\", params)\n-                .end().done().getBytes(\"UTF-8\");\n-            // @formatter:on\n-\n-            Map<String, List<String>> headers = new HashMap<>();\n-            headers.put(\"X-YouTube-Client-Name\", Collections.singletonList(youtubeMusicKeys[1]));\n-            headers.put(\"X-YouTube-Client-Version\", Collections.singletonList(youtubeMusicKeys[2]));\n-            headers.put(\"Origin\", Collections.singletonList(\"https://music.youtube.com\"));\n-            headers.put(\"Referer\", Collections.singletonList(\"music.youtube.com\"));\n-            headers.put(\"Content-Type\", Collections.singletonList(\"application/json\"));\n-\n-            Response response = getDownloader().post(url, headers, json);\n-\n-            if (response.responseCode() == 404) {\n-                throw new ContentNotAvailableException(\"Not found\" +\n-                        \" (\\\"\" + response.responseCode() + \" \" + response.responseMessage() + \"\\\")\");\n-            }\n-\n-            final String responseBody = response.responseBody();\n-            if (responseBody.length() < 50) { // ensure to have a valid response\n-                throw new ParsingException(\"JSON response is too short\");\n-            }\n-\n-            final String responseContentType = response.getHeader(\"Content-Type\");\n-            if (responseContentType != null && responseContentType.toLowerCase().contains(\"text/html\")) {\n-                throw new ParsingException(\"Got HTML document, expected JSON response\" +\n-                        \" (latest url was: \\\"\" + response.latestUrl() + \"\\\")\");\n-            }\n-\n-            try {\n-                initialData = JsonParser.object().from(responseBody);\n-            } catch (JsonParserException e) {\n-                throw new ParsingException(\"Could not parse JSON\", e);\n-            }\n-        } else {\n-            final String url = getUrl() + \"&pbj=1\";\n-\n-            final JsonArray ajaxJson = getJsonResponse(url, getExtractorLocalization());\n-\n-            initialData = ajaxJson.getObject(1).getObject(\"response\");\n-        }\n+        initialData = ajaxJson.getObject(1).getObject(\"response\");\n     }\n \n     @Nonnull\n     @Override\n     public String getUrl() throws ParsingException {\n-        if (isMusicSearch()) return super.getUrl();\n         return super.getUrl() + \"&gl=\" + getExtractorContentCountry().getCountryCode();\n     }\n \n     @Override\n     public String getSearchSuggestion() throws ParsingException {\n-        if (isMusicSearch()) return \"\";\n-\n-        JsonObject showingResultsForRenderer = initialData.getObject(\"contents\")\n+        final JsonObject showingResultsForRenderer = initialData.getObject(\"contents\")\n                 .getObject(\"twoColumnSearchResultsRenderer\").getObject(\"primaryContents\")\n                 .getObject(\"sectionListRenderer\").getArray(\"contents\").getObject(0)\n                 .getObject(\"itemSectionRenderer\").getArray(\"contents\").getObject(0)\n                 .getObject(\"showingResultsForRenderer\");\n         if (showingResultsForRenderer == null) {\n             return \"\";\n-        } else {\n-            return getTextFromObject(showingResultsForRenderer.getObject(\"correctedQuery\"));\n         }\n+        return getTextFromObject(showingResultsForRenderer.getObject(\"correctedQuery\"));\n     }\n \n     @Nonnull\n     @Override\n-    public InfoItemsPage<InfoItem> getInitialPage() throws ExtractionException, IOException {\n+    public InfoItemsPage<InfoItem> getInitialPage() throws ExtractionException {\n         final InfoItemsSearchCollector collector = new InfoItemsSearchCollector(getServiceId());\n \n-        if (isMusicSearch()) {\n-            JsonArray sections = initialData.getObject(\"contents\").getObject(\"sectionListRenderer\")\n-                    .getArray(\"contents\").getObject(0).getObject(\"musicShelfRenderer\").getArray(\"contents\");\n-\n-            collectMusicStreamsFrom(collector, sections);\n-        } else {\n-            JsonArray sections = initialData.getObject(\"contents\").getObject(\"twoColumnSearchResultsRenderer\")\n-                    .getObject(\"primaryContents\").getObject(\"sectionListRenderer\").getArray(\"contents\");\n+        final JsonArray sections = initialData.getObject(\"contents\").getObject(\"twoColumnSearchResultsRenderer\")\n+                .getObject(\"primaryContents\").getObject(\"sectionListRenderer\").getArray(\"contents\");\n \n-            for (Object section : sections) {\n-                collectStreamsFrom(collector, ((JsonObject) section).getObject(\"itemSectionRenderer\").getArray(\"contents\"));\n-            }\n+        for (Object section : sections) {\n+            collectStreamsFrom(collector, ((JsonObject) section).getObject(\"itemSectionRenderer\").getArray(\"contents\"));\n         }\n \n         return new InfoItemsPage<>(collector, getNextPageUrl());\n     }\n \n     @Override\n-    public String getNextPageUrl() throws ExtractionException, IOException {\n-        if (isMusicSearch()) {\n-            return getNextPageUrlFrom(initialData.getObject(\"contents\").getObject(\"sectionListRenderer\")\n-                    .getArray(\"contents\").getObject(0).getObject(\"musicShelfRenderer\").getArray(\"continuations\"));\n-        } else {\n-            return getNextPageUrlFrom(initialData.getObject(\"contents\").getObject(\"twoColumnSearchResultsRenderer\")\n-                    .getObject(\"primaryContents\").getObject(\"sectionListRenderer\").getArray(\"contents\")\n-                    .getObject(0).getObject(\"itemSectionRenderer\").getArray(\"continuations\"));\n-        }\n+    public String getNextPageUrl() throws ExtractionException {\n+        return getNextPageUrlFrom(initialData.getObject(\"contents\").getObject(\"twoColumnSearchResultsRenderer\")\n+                .getObject(\"primaryContents\").getObject(\"sectionListRenderer\").getArray(\"contents\")\n+                .getObject(0).getObject(\"itemSectionRenderer\").getArray(\"continuations\"));\n     }\n \n     @Override\n-    public InfoItemsPage<InfoItem> getPage(String pageUrl) throws IOException, ExtractionException {\n+    public InfoItemsPage<InfoItem> getPage(final String pageUrl) throws IOException, ExtractionException {\n         if (pageUrl == null || pageUrl.isEmpty()) {\n             throw new ExtractionException(new IllegalArgumentException(\"Page url is empty or null\"));\n         }\n \n         final InfoItemsSearchCollector collector = new InfoItemsSearchCollector(getServiceId());\n+        final JsonArray ajaxJson = getJsonResponse(pageUrl, getExtractorLocalization());\n \n-        JsonArray continuations;\n-\n-        if (isMusicSearch()) {\n-            final String[] youtubeMusicKeys = YoutubeParsingHelper.getYoutubeMusicKeys();\n-\n-            // @formatter:off\n-            byte[] json = JsonWriter.string()\n-                .object()\n-                    .object(\"context\")\n-                        .object(\"client\")\n-                            .value(\"clientName\", \"WEB_REMIX\")\n-                            .value(\"clientVersion\", youtubeMusicKeys[2])\n-                            .value(\"hl\", \"en\")\n-                            .value(\"gl\", getExtractorContentCountry().getCountryCode())\n-                            .array(\"experimentIds\").end()\n-                            .value(\"experimentsToken\", \"\")\n-                            .value(\"utcOffsetMinutes\", 0)\n-                            .object(\"locationInfo\").end()\n-                            .object(\"musicAppInfo\").end()\n-                        .end()\n-                        .object(\"capabilities\").end()\n-                        .object(\"request\")\n-                            .array(\"internalExperimentFlags\").end()\n-                            .object(\"sessionIndex\").end()\n-                        .end()\n-                        .object(\"activePlayers\").end()\n-                        .object(\"user\")\n-                            .value(\"enableSafetyMode\", false)\n-                        .end()\n-                    .end()\n-                .end().done().getBytes(\"UTF-8\");\n-            // @formatter:on\n-\n-            Map<String, List<String>> headers = new HashMap<>();\n-            headers.put(\"X-YouTube-Client-Name\", Collections.singletonList(youtubeMusicKeys[1]));\n-            headers.put(\"X-YouTube-Client-Version\", Collections.singletonList(youtubeMusicKeys[2]));\n-            headers.put(\"Origin\", Collections.singletonList(\"https://music.youtube.com\"));\n-            headers.put(\"Referer\", Collections.singletonList(\"music.youtube.com\"));\n-            headers.put(\"Content-Type\", Collections.singletonList(\"application/json\"));\n-\n-            Response response = getDownloader().post(pageUrl, headers, json);\n-\n-            if (response.responseCode() == 404) {\n-                throw new ContentNotAvailableException(\"Not found\" +\n-                        \" (\\\"\" + response.responseCode() + \" \" + response.responseMessage() + \"\\\")\");\n-            }\n-\n-            final String responseBody = response.responseBody();\n-            if (responseBody.length() < 50) { // ensure to have a valid response\n-                throw new ParsingException(\"JSON response is too short\");\n-            }\n-\n-            final String responseContentType = response.getHeader(\"Content-Type\");\n-            if (responseContentType != null && responseContentType.toLowerCase().contains(\"text/html\")) {\n-                throw new ParsingException(\"Got HTML document, expected JSON response\" +\n-                        \" (latest url was: \\\"\" + response.latestUrl() + \"\\\")\");\n-            }\n-\n-            final JsonObject ajaxJson;\n-            try {\n-                ajaxJson = JsonParser.object().from(responseBody);\n-            } catch (JsonParserException e) {\n-                throw new ParsingException(\"Could not parse JSON\", e);\n-            }\n-\n-            if (ajaxJson.getObject(\"continuationContents\") == null) return new InfoItemsPage<>(collector, null);\n-\n-            JsonObject musicShelfContinuation = ajaxJson.getObject(\"continuationContents\").getObject(\"musicShelfContinuation\");\n-\n-            collectMusicStreamsFrom(collector, musicShelfContinuation.getArray(\"contents\"));\n-            continuations = musicShelfContinuation.getArray(\"continuations\");\n-        } else {\n-            final JsonArray ajaxJson = getJsonResponse(pageUrl, getExtractorLocalization());\n+        final JsonObject itemSectionRenderer = ajaxJson.getObject(1).getObject(\"response\")\n+                .getObject(\"continuationContents\").getObject(\"itemSectionContinuation\");\n \n-            JsonObject itemSectionRenderer = ajaxJson.getObject(1).getObject(\"response\")\n-                    .getObject(\"continuationContents\").getObject(\"itemSectionContinuation\");\n-\n-            collectStreamsFrom(collector, itemSectionRenderer.getArray(\"contents\"));\n-            continuations = itemSectionRenderer.getArray(\"continuations\");\n-        }\n+        collectStreamsFrom(collector, itemSectionRenderer.getArray(\"contents\"));\n+        final JsonArray continuations = itemSectionRenderer.getArray(\"continuations\");\n \n         return new InfoItemsPage<>(collector, getNextPageUrlFrom(continuations));\n     }\n \n-    private boolean isMusicSearch() {\n-        final List<String> contentFilters = getLinkHandler().getContentFilters();\n-        if (contentFilters.size() > 0 && contentFilters.get(0).startsWith(\"music_\")) return true;\n-        return false;\n-    }\n-\n-    private void collectStreamsFrom(InfoItemsSearchCollector collector, JsonArray videos) throws NothingFoundException, ParsingException {\n+    private void collectStreamsFrom(final InfoItemsSearchCollector collector, final JsonArray videos) throws NothingFoundException, ParsingException {\n         final TimeAgoParser timeAgoParser = getTimeAgoParser();\n \n         for (Object item : videos) {\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgwMjc1OQ==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/291#discussion_r395802759", "body": "This could use the `InfoItemsPage#emptyPage` method, and to improve readability, add brackets and place the return in the next line.\r\n\r\n```suggestion\r\n            if (ajaxJson.getObject(\"continuationContents\") == null) {\r\n                return InfoItemsPage.emptyPage();\r\n            }\r\n```", "bodyText": "This could use the InfoItemsPage#emptyPage method, and to improve readability, add brackets and place the return in the next line.\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (ajaxJson.getObject(\"continuationContents\") == null) return new InfoItemsPage<>(collector, null);\n          \n          \n            \n                        if (ajaxJson.getObject(\"continuationContents\") == null) {\n          \n          \n            \n                            return InfoItemsPage.emptyPage();\n          \n          \n            \n                        }", "bodyHTML": "<p dir=\"auto\">This could use the <code>InfoItemsPage#emptyPage</code> method, and to improve readability, add brackets and place the return in the next line.</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            <span class=\"pl-k\">if</span> (ajaxJson<span class=\"pl-k\">.</span>getObject(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>continuationContents<span class=\"pl-pds\">\"</span></span>) <span class=\"pl-k\">==</span> <span class=\"pl-c1\">null</span>) <span class=\"pl-k x x-first\">return</span><span class=\"x\"> </span><span class=\"pl-k x\">new</span><span class=\"x\"> </span><span class=\"pl-k x\">InfoItemsPage&lt;&gt;</span><span class=\"x\">(collector, </span><span class=\"pl-c1 x\">null</span><span class=\"x x-last\">);</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            <span class=\"pl-k\">if</span> (ajaxJson<span class=\"pl-k\">.</span>getObject(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>continuationContents<span class=\"pl-pds\">\"</span></span>) <span class=\"pl-k\">==</span> <span class=\"pl-c1\">null</span>) <span class=\"x x-first x-last\">{</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                <span class=\"pl-k\">return</span> <span class=\"pl-smi\">InfoItemsPage</span><span class=\"pl-k\">.</span>emptyPage();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            }</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "mauriciocolli", "createdAt": "2020-03-20T17:56:33Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeSearchExtractor.java", "diffHunk": "@@ -104,19 +243,99 @@ public String getNextPageUrl() throws ExtractionException {\n         }\n \n         InfoItemsSearchCollector collector = getInfoItemSearchCollector();\n-        final JsonArray ajaxJson = getJsonResponse(pageUrl, getExtractorLocalization());\n+        collector.reset();\n+\n+        JsonArray continuations;\n+\n+        if (isMusicSearch()) {\n+            final String[] youtubeMusicKeys = YoutubeParsingHelper.getYoutubeMusicKeys();\n+\n+            // @formatter:off\n+            byte[] json = JsonWriter.string()\n+                .object()\n+                    .object(\"context\")\n+                        .object(\"client\")\n+                            .value(\"clientName\", \"WEB_REMIX\")\n+                            .value(\"clientVersion\", youtubeMusicKeys[2])\n+                            .value(\"hl\", \"en\")\n+                            .value(\"gl\", getExtractorContentCountry().getCountryCode())\n+                            .array(\"experimentIds\").end()\n+                            .value(\"experimentsToken\", \"\")\n+                            .value(\"utcOffsetMinutes\", 0)\n+                            .object(\"locationInfo\").end()\n+                            .object(\"musicAppInfo\").end()\n+                        .end()\n+                        .object(\"capabilities\").end()\n+                        .object(\"request\")\n+                            .array(\"internalExperimentFlags\").end()\n+                            .object(\"sessionIndex\").end()\n+                        .end()\n+                        .object(\"activePlayers\").end()\n+                        .object(\"user\")\n+                            .value(\"enableSafetyMode\", false)\n+                        .end()\n+                    .end()\n+                .end().done().getBytes(\"UTF-8\");\n+            // @formatter:on\n+\n+            Map<String, List<String>> headers = new HashMap<>();\n+            headers.put(\"X-YouTube-Client-Name\", Collections.singletonList(youtubeMusicKeys[1]));\n+            headers.put(\"X-YouTube-Client-Version\", Collections.singletonList(youtubeMusicKeys[2]));\n+            headers.put(\"Origin\", Collections.singletonList(\"https://music.youtube.com\"));\n+            headers.put(\"Referer\", Collections.singletonList(\"music.youtube.com\"));\n+            headers.put(\"Content-Type\", Collections.singletonList(\"application/json\"));\n \n-        JsonObject itemSectionRenderer = ajaxJson.getObject(1).getObject(\"response\")\n-                .getObject(\"continuationContents\").getObject(\"itemSectionContinuation\");\n+            Response response = getDownloader().post(pageUrl, headers, json);\n \n-        collectStreamsFrom(collector, itemSectionRenderer.getArray(\"contents\"));\n+            if (response.responseCode() == 404) {\n+                throw new ContentNotAvailableException(\"Not found\" +\n+                        \" (\\\"\" + response.responseCode() + \" \" + response.responseMessage() + \"\\\")\");\n+            }\n+\n+            final String responseBody = response.responseBody();\n+            if (responseBody.length() < 50) { // ensure to have a valid response\n+                throw new ParsingException(\"JSON response is too short\");\n+            }\n+\n+            final String responseContentType = response.getHeader(\"Content-Type\");\n+            if (responseContentType != null && responseContentType.toLowerCase().contains(\"text/html\")) {\n+                throw new ParsingException(\"Got HTML document, expected JSON response\" +\n+                        \" (latest url was: \\\"\" + response.latestUrl() + \"\\\")\");\n+            }\n \n-        return new InfoItemsPage<>(collector, getNextPageUrlFrom(itemSectionRenderer.getArray(\"continuations\")));\n+            final JsonObject ajaxJson;\n+            try {\n+                ajaxJson = JsonParser.object().from(responseBody);\n+            } catch (JsonParserException e) {\n+                throw new ParsingException(\"Could not parse JSON\", e);\n+            }\n+\n+            if (ajaxJson.getObject(\"continuationContents\") == null) return new InfoItemsPage<>(collector, null);", "originalCommit": "dc25ecc88c63ad3ef4ca9fd4974e3efc2d0e6664", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d58c0f230d27cf34c2bf044597c908c519f94a84", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeSearchExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeSearchExtractor.java\nindex afe25caa..7c5adca5 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeSearchExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeSearchExtractor.java\n", "chunk": "@@ -310,7 +308,9 @@ public class YoutubeSearchExtractor extends SearchExtractor {\n                 throw new ParsingException(\"Could not parse JSON\", e);\n             }\n \n-            if (ajaxJson.getObject(\"continuationContents\") == null) return new InfoItemsPage<>(collector, null);\n+            if (ajaxJson.getObject(\"continuationContents\") == null) {\n+                return InfoItemsPage.emptyPage();\n+            }\n \n             JsonObject musicShelfContinuation = ajaxJson.getObject(\"continuationContents\").getObject(\"musicShelfContinuation\");\n \n", "next_change": {"commit": "ac15df45489178002c95db436a717319020a517a", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeSearchExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeSearchExtractor.java\nindex 7c5adca5..06d83b24 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeSearchExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeSearchExtractor.java\n", "chunk": "@@ -65,276 +43,79 @@ import static org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeS\n public class YoutubeSearchExtractor extends SearchExtractor {\n     private JsonObject initialData;\n \n-    public YoutubeSearchExtractor(StreamingService service, SearchQueryHandler linkHandler) {\n+    public YoutubeSearchExtractor(final StreamingService service, final SearchQueryHandler linkHandler) {\n         super(service, linkHandler);\n     }\n \n     @Override\n-    public void onFetchPage(@Nonnull Downloader downloader) throws IOException, ExtractionException {\n-        if (isMusicSearch()) {\n-            final String[] youtubeMusicKeys = YoutubeParsingHelper.getYoutubeMusicKeys();\n+    public void onFetchPage(@Nonnull final Downloader downloader) throws IOException, ExtractionException {\n+        final String url = getUrl() + \"&pbj=1\";\n \n-            final String url = \"https://music.youtube.com/youtubei/v1/search?alt=json&key=\" + youtubeMusicKeys[0];\n+        final JsonArray ajaxJson = getJsonResponse(url, getExtractorLocalization());\n \n-            String params = null;\n-\n-            switch (getLinkHandler().getContentFilters().get(0)) {\n-                case MUSIC_SONGS:\n-                    params = \"Eg-KAQwIARAAGAAgACgAMABqChAEEAUQAxAKEAk%3D\";\n-                    break;\n-                case MUSIC_VIDEOS:\n-                    params = \"Eg-KAQwIABABGAAgACgAMABqChAEEAUQAxAKEAk%3D\";\n-                    break;\n-                case MUSIC_ALBUMS:\n-                    params = \"Eg-KAQwIABAAGAEgACgAMABqChAEEAUQAxAKEAk%3D\";\n-                    break;\n-                case MUSIC_PLAYLISTS:\n-                    params = \"Eg-KAQwIABAAGAAgACgBMABqChAEEAUQAxAKEAk%3D\";\n-                    break;\n-                case MUSIC_ARTISTS:\n-                    params = \"Eg-KAQwIABAAGAAgASgAMABqChAEEAUQAxAKEAk%3D\";\n-                    break;\n-            }\n-\n-            // @formatter:off\n-            byte[] json = JsonWriter.string()\n-                .object()\n-                    .object(\"context\")\n-                        .object(\"client\")\n-                            .value(\"clientName\", \"WEB_REMIX\")\n-                            .value(\"clientVersion\", youtubeMusicKeys[2])\n-                            .value(\"hl\", \"en\")\n-                            .value(\"gl\", getExtractorContentCountry().getCountryCode())\n-                            .array(\"experimentIds\").end()\n-                            .value(\"experimentsToken\", \"\")\n-                            .value(\"utcOffsetMinutes\", 0)\n-                            .object(\"locationInfo\").end()\n-                            .object(\"musicAppInfo\").end()\n-                        .end()\n-                        .object(\"capabilities\").end()\n-                        .object(\"request\")\n-                            .array(\"internalExperimentFlags\").end()\n-                            .object(\"sessionIndex\").end()\n-                        .end()\n-                        .object(\"activePlayers\").end()\n-                        .object(\"user\")\n-                            .value(\"enableSafetyMode\", false)\n-                        .end()\n-                    .end()\n-                    .value(\"query\", getSearchString())\n-                    .value(\"params\", params)\n-                .end().done().getBytes(\"UTF-8\");\n-            // @formatter:on\n-\n-            Map<String, List<String>> headers = new HashMap<>();\n-            headers.put(\"X-YouTube-Client-Name\", Collections.singletonList(youtubeMusicKeys[1]));\n-            headers.put(\"X-YouTube-Client-Version\", Collections.singletonList(youtubeMusicKeys[2]));\n-            headers.put(\"Origin\", Collections.singletonList(\"https://music.youtube.com\"));\n-            headers.put(\"Referer\", Collections.singletonList(\"music.youtube.com\"));\n-            headers.put(\"Content-Type\", Collections.singletonList(\"application/json\"));\n-\n-            Response response = getDownloader().post(url, headers, json);\n-\n-            if (response.responseCode() == 404) {\n-                throw new ContentNotAvailableException(\"Not found\" +\n-                        \" (\\\"\" + response.responseCode() + \" \" + response.responseMessage() + \"\\\")\");\n-            }\n-\n-            final String responseBody = response.responseBody();\n-            if (responseBody.length() < 50) { // ensure to have a valid response\n-                throw new ParsingException(\"JSON response is too short\");\n-            }\n-\n-            final String responseContentType = response.getHeader(\"Content-Type\");\n-            if (responseContentType != null && responseContentType.toLowerCase().contains(\"text/html\")) {\n-                throw new ParsingException(\"Got HTML document, expected JSON response\" +\n-                        \" (latest url was: \\\"\" + response.latestUrl() + \"\\\")\");\n-            }\n-\n-            try {\n-                initialData = JsonParser.object().from(responseBody);\n-            } catch (JsonParserException e) {\n-                throw new ParsingException(\"Could not parse JSON\", e);\n-            }\n-        } else {\n-            final String url = getUrl() + \"&pbj=1\";\n-\n-            final JsonArray ajaxJson = getJsonResponse(url, getExtractorLocalization());\n-\n-            initialData = ajaxJson.getObject(1).getObject(\"response\");\n-        }\n+        initialData = ajaxJson.getObject(1).getObject(\"response\");\n     }\n \n     @Nonnull\n     @Override\n     public String getUrl() throws ParsingException {\n-        if (isMusicSearch()) return super.getUrl();\n         return super.getUrl() + \"&gl=\" + getExtractorContentCountry().getCountryCode();\n     }\n \n     @Override\n     public String getSearchSuggestion() throws ParsingException {\n-        if (isMusicSearch()) {\n-            final JsonObject itemSectionRenderer = initialData.getObject(\"contents\").getObject(\"sectionListRenderer\")\n-                    .getArray(\"contents\").getObject(0).getObject(\"itemSectionRenderer\");\n-            if (itemSectionRenderer == null) return \"\";\n-            return getTextFromObject(itemSectionRenderer.getArray(\"contents\").getObject(0)\n-                    .getObject(\"didYouMeanRenderer\").getObject(\"correctedQuery\"));\n-        } else {\n-            JsonObject showingResultsForRenderer = initialData.getObject(\"contents\")\n-                    .getObject(\"twoColumnSearchResultsRenderer\").getObject(\"primaryContents\")\n-                    .getObject(\"sectionListRenderer\").getArray(\"contents\").getObject(0)\n-                    .getObject(\"itemSectionRenderer\").getArray(\"contents\").getObject(0)\n-                    .getObject(\"showingResultsForRenderer\");\n-            if (showingResultsForRenderer == null) return \"\";\n-            return getTextFromObject(showingResultsForRenderer.getObject(\"correctedQuery\"));\n+        final JsonObject showingResultsForRenderer = initialData.getObject(\"contents\")\n+                .getObject(\"twoColumnSearchResultsRenderer\").getObject(\"primaryContents\")\n+                .getObject(\"sectionListRenderer\").getArray(\"contents\").getObject(0)\n+                .getObject(\"itemSectionRenderer\").getArray(\"contents\").getObject(0)\n+                .getObject(\"showingResultsForRenderer\");\n+        if (showingResultsForRenderer == null) {\n+            return \"\";\n         }\n+        return getTextFromObject(showingResultsForRenderer.getObject(\"correctedQuery\"));\n     }\n \n     @Nonnull\n     @Override\n-    public InfoItemsPage<InfoItem> getInitialPage() throws ExtractionException, IOException {\n+    public InfoItemsPage<InfoItem> getInitialPage() throws ExtractionException {\n         final InfoItemsSearchCollector collector = new InfoItemsSearchCollector(getServiceId());\n \n-        if (isMusicSearch()) {\n-            final JsonArray contents = initialData.getObject(\"contents\").getObject(\"sectionListRenderer\").getArray(\"contents\");\n-\n-            for (Object content : contents) {\n-                if (((JsonObject) content).getObject(\"musicShelfRenderer\") != null) {\n-                    collectMusicStreamsFrom(collector, ((JsonObject) content).getObject(\"musicShelfRenderer\").getArray(\"contents\"));\n-                }\n-            }\n-        } else {\n-            JsonArray sections = initialData.getObject(\"contents\").getObject(\"twoColumnSearchResultsRenderer\")\n-                    .getObject(\"primaryContents\").getObject(\"sectionListRenderer\").getArray(\"contents\");\n+        final JsonArray sections = initialData.getObject(\"contents\").getObject(\"twoColumnSearchResultsRenderer\")\n+                .getObject(\"primaryContents\").getObject(\"sectionListRenderer\").getArray(\"contents\");\n \n-            for (Object section : sections) {\n-                collectStreamsFrom(collector, ((JsonObject) section).getObject(\"itemSectionRenderer\").getArray(\"contents\"));\n-            }\n+        for (Object section : sections) {\n+            collectStreamsFrom(collector, ((JsonObject) section).getObject(\"itemSectionRenderer\").getArray(\"contents\"));\n         }\n \n         return new InfoItemsPage<>(collector, getNextPageUrl());\n     }\n \n     @Override\n-    public String getNextPageUrl() throws ExtractionException, IOException {\n-        if (isMusicSearch()) {\n-            final JsonArray contents = initialData.getObject(\"contents\").getObject(\"sectionListRenderer\").getArray(\"contents\");\n-\n-            for (Object content : contents) {\n-                if (((JsonObject) content).getObject(\"musicShelfRenderer\") != null) {\n-                    return getNextPageUrlFrom(((JsonObject) content).getObject(\"musicShelfRenderer\").getArray(\"continuations\"));\n-                }\n-            }\n-\n-            return \"\";\n-        } else {\n-            return getNextPageUrlFrom(initialData.getObject(\"contents\").getObject(\"twoColumnSearchResultsRenderer\")\n-                    .getObject(\"primaryContents\").getObject(\"sectionListRenderer\").getArray(\"contents\")\n-                    .getObject(0).getObject(\"itemSectionRenderer\").getArray(\"continuations\"));\n-        }\n+    public String getNextPageUrl() throws ExtractionException {\n+        return getNextPageUrlFrom(initialData.getObject(\"contents\").getObject(\"twoColumnSearchResultsRenderer\")\n+                .getObject(\"primaryContents\").getObject(\"sectionListRenderer\").getArray(\"contents\")\n+                .getObject(0).getObject(\"itemSectionRenderer\").getArray(\"continuations\"));\n     }\n \n     @Override\n-    public InfoItemsPage<InfoItem> getPage(String pageUrl) throws IOException, ExtractionException {\n+    public InfoItemsPage<InfoItem> getPage(final String pageUrl) throws IOException, ExtractionException {\n         if (pageUrl == null || pageUrl.isEmpty()) {\n             throw new ExtractionException(new IllegalArgumentException(\"Page url is empty or null\"));\n         }\n \n         final InfoItemsSearchCollector collector = new InfoItemsSearchCollector(getServiceId());\n+        final JsonArray ajaxJson = getJsonResponse(pageUrl, getExtractorLocalization());\n \n-        JsonArray continuations;\n-\n-        if (isMusicSearch()) {\n-            final String[] youtubeMusicKeys = YoutubeParsingHelper.getYoutubeMusicKeys();\n-\n-            // @formatter:off\n-            byte[] json = JsonWriter.string()\n-                .object()\n-                    .object(\"context\")\n-                        .object(\"client\")\n-                            .value(\"clientName\", \"WEB_REMIX\")\n-                            .value(\"clientVersion\", youtubeMusicKeys[2])\n-                            .value(\"hl\", \"en\")\n-                            .value(\"gl\", getExtractorContentCountry().getCountryCode())\n-                            .array(\"experimentIds\").end()\n-                            .value(\"experimentsToken\", \"\")\n-                            .value(\"utcOffsetMinutes\", 0)\n-                            .object(\"locationInfo\").end()\n-                            .object(\"musicAppInfo\").end()\n-                        .end()\n-                        .object(\"capabilities\").end()\n-                        .object(\"request\")\n-                            .array(\"internalExperimentFlags\").end()\n-                            .object(\"sessionIndex\").end()\n-                        .end()\n-                        .object(\"activePlayers\").end()\n-                        .object(\"user\")\n-                            .value(\"enableSafetyMode\", false)\n-                        .end()\n-                    .end()\n-                .end().done().getBytes(\"UTF-8\");\n-            // @formatter:on\n-\n-            Map<String, List<String>> headers = new HashMap<>();\n-            headers.put(\"X-YouTube-Client-Name\", Collections.singletonList(youtubeMusicKeys[1]));\n-            headers.put(\"X-YouTube-Client-Version\", Collections.singletonList(youtubeMusicKeys[2]));\n-            headers.put(\"Origin\", Collections.singletonList(\"https://music.youtube.com\"));\n-            headers.put(\"Referer\", Collections.singletonList(\"music.youtube.com\"));\n-            headers.put(\"Content-Type\", Collections.singletonList(\"application/json\"));\n-\n-            Response response = getDownloader().post(pageUrl, headers, json);\n-\n-            if (response.responseCode() == 404) {\n-                throw new ContentNotAvailableException(\"Not found\" +\n-                        \" (\\\"\" + response.responseCode() + \" \" + response.responseMessage() + \"\\\")\");\n-            }\n-\n-            final String responseBody = response.responseBody();\n-            if (responseBody.length() < 50) { // ensure to have a valid response\n-                throw new ParsingException(\"JSON response is too short\");\n-            }\n-\n-            final String responseContentType = response.getHeader(\"Content-Type\");\n-            if (responseContentType != null && responseContentType.toLowerCase().contains(\"text/html\")) {\n-                throw new ParsingException(\"Got HTML document, expected JSON response\" +\n-                        \" (latest url was: \\\"\" + response.latestUrl() + \"\\\")\");\n-            }\n-\n-            final JsonObject ajaxJson;\n-            try {\n-                ajaxJson = JsonParser.object().from(responseBody);\n-            } catch (JsonParserException e) {\n-                throw new ParsingException(\"Could not parse JSON\", e);\n-            }\n-\n-            if (ajaxJson.getObject(\"continuationContents\") == null) {\n-                return InfoItemsPage.emptyPage();\n-            }\n-\n-            JsonObject musicShelfContinuation = ajaxJson.getObject(\"continuationContents\").getObject(\"musicShelfContinuation\");\n-\n-            collectMusicStreamsFrom(collector, musicShelfContinuation.getArray(\"contents\"));\n-            continuations = musicShelfContinuation.getArray(\"continuations\");\n-        } else {\n-            final JsonArray ajaxJson = getJsonResponse(pageUrl, getExtractorLocalization());\n+        final JsonObject itemSectionRenderer = ajaxJson.getObject(1).getObject(\"response\")\n+                .getObject(\"continuationContents\").getObject(\"itemSectionContinuation\");\n \n-            JsonObject itemSectionRenderer = ajaxJson.getObject(1).getObject(\"response\")\n-                    .getObject(\"continuationContents\").getObject(\"itemSectionContinuation\");\n-\n-            collectStreamsFrom(collector, itemSectionRenderer.getArray(\"contents\"));\n-            continuations = itemSectionRenderer.getArray(\"continuations\");\n-        }\n+        collectStreamsFrom(collector, itemSectionRenderer.getArray(\"contents\"));\n+        final JsonArray continuations = itemSectionRenderer.getArray(\"continuations\");\n \n         return new InfoItemsPage<>(collector, getNextPageUrlFrom(continuations));\n     }\n \n-    private boolean isMusicSearch() {\n-        final List<String> contentFilters = getLinkHandler().getContentFilters();\n-        return contentFilters.size() > 0 && contentFilters.get(0).startsWith(\"music_\");\n-    }\n-\n-    private void collectStreamsFrom(InfoItemsSearchCollector collector, JsonArray videos) throws NothingFoundException, ParsingException {\n+    private void collectStreamsFrom(final InfoItemsSearchCollector collector, final JsonArray videos) throws NothingFoundException, ParsingException {\n         final TimeAgoParser timeAgoParser = getTimeAgoParser();\n \n         for (Object item : videos) {\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgwNDA4NA==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/291#discussion_r395804084", "body": "```suggestion\r\n        return contentFilters.size() > 0 && contentFilters.get(0).startsWith(\"music_\");\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (contentFilters.size() > 0 && contentFilters.get(0).startsWith(\"music_\")) return true;\n          \n          \n            \n                    return false;\n          \n          \n            \n                    return contentFilters.size() > 0 && contentFilters.get(0).startsWith(\"music_\");", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">if</span> (contentFilters<span class=\"pl-k\">.</span>size() <span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">0</span> <span class=\"pl-k\">&amp;&amp;</span> contentFilters<span class=\"pl-k\">.</span>get(<span class=\"pl-c1\">0</span>)<span class=\"pl-k\">.</span>startsWith(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>music_<span class=\"pl-pds\">\"</span></span>)) <span class=\"pl-k\">return</span> <span class=\"pl-c1\">true</span>;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">return</span> <span class=\"pl-c1\">false</span>;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">return</span> contentFilters<span class=\"pl-k\">.</span>size() <span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">0</span> <span class=\"pl-k\">&amp;&amp;</span> contentFilters<span class=\"pl-k\">.</span>get(<span class=\"pl-c1\">0</span>)<span class=\"pl-k\">.</span>startsWith(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>music_<span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "mauriciocolli", "createdAt": "2020-03-20T17:58:46Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeSearchExtractor.java", "diffHunk": "@@ -104,19 +243,99 @@ public String getNextPageUrl() throws ExtractionException {\n         }\n \n         InfoItemsSearchCollector collector = getInfoItemSearchCollector();\n-        final JsonArray ajaxJson = getJsonResponse(pageUrl, getExtractorLocalization());\n+        collector.reset();\n+\n+        JsonArray continuations;\n+\n+        if (isMusicSearch()) {\n+            final String[] youtubeMusicKeys = YoutubeParsingHelper.getYoutubeMusicKeys();\n+\n+            // @formatter:off\n+            byte[] json = JsonWriter.string()\n+                .object()\n+                    .object(\"context\")\n+                        .object(\"client\")\n+                            .value(\"clientName\", \"WEB_REMIX\")\n+                            .value(\"clientVersion\", youtubeMusicKeys[2])\n+                            .value(\"hl\", \"en\")\n+                            .value(\"gl\", getExtractorContentCountry().getCountryCode())\n+                            .array(\"experimentIds\").end()\n+                            .value(\"experimentsToken\", \"\")\n+                            .value(\"utcOffsetMinutes\", 0)\n+                            .object(\"locationInfo\").end()\n+                            .object(\"musicAppInfo\").end()\n+                        .end()\n+                        .object(\"capabilities\").end()\n+                        .object(\"request\")\n+                            .array(\"internalExperimentFlags\").end()\n+                            .object(\"sessionIndex\").end()\n+                        .end()\n+                        .object(\"activePlayers\").end()\n+                        .object(\"user\")\n+                            .value(\"enableSafetyMode\", false)\n+                        .end()\n+                    .end()\n+                .end().done().getBytes(\"UTF-8\");\n+            // @formatter:on\n+\n+            Map<String, List<String>> headers = new HashMap<>();\n+            headers.put(\"X-YouTube-Client-Name\", Collections.singletonList(youtubeMusicKeys[1]));\n+            headers.put(\"X-YouTube-Client-Version\", Collections.singletonList(youtubeMusicKeys[2]));\n+            headers.put(\"Origin\", Collections.singletonList(\"https://music.youtube.com\"));\n+            headers.put(\"Referer\", Collections.singletonList(\"music.youtube.com\"));\n+            headers.put(\"Content-Type\", Collections.singletonList(\"application/json\"));\n \n-        JsonObject itemSectionRenderer = ajaxJson.getObject(1).getObject(\"response\")\n-                .getObject(\"continuationContents\").getObject(\"itemSectionContinuation\");\n+            Response response = getDownloader().post(pageUrl, headers, json);\n \n-        collectStreamsFrom(collector, itemSectionRenderer.getArray(\"contents\"));\n+            if (response.responseCode() == 404) {\n+                throw new ContentNotAvailableException(\"Not found\" +\n+                        \" (\\\"\" + response.responseCode() + \" \" + response.responseMessage() + \"\\\")\");\n+            }\n+\n+            final String responseBody = response.responseBody();\n+            if (responseBody.length() < 50) { // ensure to have a valid response\n+                throw new ParsingException(\"JSON response is too short\");\n+            }\n+\n+            final String responseContentType = response.getHeader(\"Content-Type\");\n+            if (responseContentType != null && responseContentType.toLowerCase().contains(\"text/html\")) {\n+                throw new ParsingException(\"Got HTML document, expected JSON response\" +\n+                        \" (latest url was: \\\"\" + response.latestUrl() + \"\\\")\");\n+            }\n \n-        return new InfoItemsPage<>(collector, getNextPageUrlFrom(itemSectionRenderer.getArray(\"continuations\")));\n+            final JsonObject ajaxJson;\n+            try {\n+                ajaxJson = JsonParser.object().from(responseBody);\n+            } catch (JsonParserException e) {\n+                throw new ParsingException(\"Could not parse JSON\", e);\n+            }\n+\n+            if (ajaxJson.getObject(\"continuationContents\") == null) return new InfoItemsPage<>(collector, null);\n+\n+            JsonObject musicShelfContinuation = ajaxJson.getObject(\"continuationContents\").getObject(\"musicShelfContinuation\");\n+\n+            collectMusicStreamsFrom(collector, musicShelfContinuation.getArray(\"contents\"));\n+            continuations = musicShelfContinuation.getArray(\"continuations\");\n+        } else {\n+            final JsonArray ajaxJson = getJsonResponse(pageUrl, getExtractorLocalization());\n+\n+            JsonObject itemSectionRenderer = ajaxJson.getObject(1).getObject(\"response\")\n+                    .getObject(\"continuationContents\").getObject(\"itemSectionContinuation\");\n+\n+            collectStreamsFrom(collector, itemSectionRenderer.getArray(\"contents\"));\n+            continuations = itemSectionRenderer.getArray(\"continuations\");\n+        }\n+\n+        return new InfoItemsPage<>(collector, getNextPageUrlFrom(continuations));\n     }\n \n-    private void collectStreamsFrom(InfoItemsSearchCollector collector, JsonArray videos) throws NothingFoundException, ParsingException {\n-        collector.reset();\n+    private boolean isMusicSearch() {\n+        final List<String> contentFilters = getLinkHandler().getContentFilters();\n+        if (contentFilters.size() > 0 && contentFilters.get(0).startsWith(\"music_\")) return true;\n+        return false;", "originalCommit": "dc25ecc88c63ad3ef4ca9fd4974e3efc2d0e6664", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d58c0f230d27cf34c2bf044597c908c519f94a84", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeSearchExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeSearchExtractor.java\nindex afe25caa..7c5adca5 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeSearchExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeSearchExtractor.java\n", "chunk": "@@ -331,8 +331,7 @@ public class YoutubeSearchExtractor extends SearchExtractor {\n \n     private boolean isMusicSearch() {\n         final List<String> contentFilters = getLinkHandler().getContentFilters();\n-        if (contentFilters.size() > 0 && contentFilters.get(0).startsWith(\"music_\")) return true;\n-        return false;\n+        return contentFilters.size() > 0 && contentFilters.get(0).startsWith(\"music_\");\n     }\n \n     private void collectStreamsFrom(InfoItemsSearchCollector collector, JsonArray videos) throws NothingFoundException, ParsingException {\n", "next_change": {"commit": "ac15df45489178002c95db436a717319020a517a", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeSearchExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeSearchExtractor.java\nindex 7c5adca5..06d83b24 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeSearchExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeSearchExtractor.java\n", "chunk": "@@ -65,276 +43,79 @@ import static org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeS\n public class YoutubeSearchExtractor extends SearchExtractor {\n     private JsonObject initialData;\n \n-    public YoutubeSearchExtractor(StreamingService service, SearchQueryHandler linkHandler) {\n+    public YoutubeSearchExtractor(final StreamingService service, final SearchQueryHandler linkHandler) {\n         super(service, linkHandler);\n     }\n \n     @Override\n-    public void onFetchPage(@Nonnull Downloader downloader) throws IOException, ExtractionException {\n-        if (isMusicSearch()) {\n-            final String[] youtubeMusicKeys = YoutubeParsingHelper.getYoutubeMusicKeys();\n+    public void onFetchPage(@Nonnull final Downloader downloader) throws IOException, ExtractionException {\n+        final String url = getUrl() + \"&pbj=1\";\n \n-            final String url = \"https://music.youtube.com/youtubei/v1/search?alt=json&key=\" + youtubeMusicKeys[0];\n+        final JsonArray ajaxJson = getJsonResponse(url, getExtractorLocalization());\n \n-            String params = null;\n-\n-            switch (getLinkHandler().getContentFilters().get(0)) {\n-                case MUSIC_SONGS:\n-                    params = \"Eg-KAQwIARAAGAAgACgAMABqChAEEAUQAxAKEAk%3D\";\n-                    break;\n-                case MUSIC_VIDEOS:\n-                    params = \"Eg-KAQwIABABGAAgACgAMABqChAEEAUQAxAKEAk%3D\";\n-                    break;\n-                case MUSIC_ALBUMS:\n-                    params = \"Eg-KAQwIABAAGAEgACgAMABqChAEEAUQAxAKEAk%3D\";\n-                    break;\n-                case MUSIC_PLAYLISTS:\n-                    params = \"Eg-KAQwIABAAGAAgACgBMABqChAEEAUQAxAKEAk%3D\";\n-                    break;\n-                case MUSIC_ARTISTS:\n-                    params = \"Eg-KAQwIABAAGAAgASgAMABqChAEEAUQAxAKEAk%3D\";\n-                    break;\n-            }\n-\n-            // @formatter:off\n-            byte[] json = JsonWriter.string()\n-                .object()\n-                    .object(\"context\")\n-                        .object(\"client\")\n-                            .value(\"clientName\", \"WEB_REMIX\")\n-                            .value(\"clientVersion\", youtubeMusicKeys[2])\n-                            .value(\"hl\", \"en\")\n-                            .value(\"gl\", getExtractorContentCountry().getCountryCode())\n-                            .array(\"experimentIds\").end()\n-                            .value(\"experimentsToken\", \"\")\n-                            .value(\"utcOffsetMinutes\", 0)\n-                            .object(\"locationInfo\").end()\n-                            .object(\"musicAppInfo\").end()\n-                        .end()\n-                        .object(\"capabilities\").end()\n-                        .object(\"request\")\n-                            .array(\"internalExperimentFlags\").end()\n-                            .object(\"sessionIndex\").end()\n-                        .end()\n-                        .object(\"activePlayers\").end()\n-                        .object(\"user\")\n-                            .value(\"enableSafetyMode\", false)\n-                        .end()\n-                    .end()\n-                    .value(\"query\", getSearchString())\n-                    .value(\"params\", params)\n-                .end().done().getBytes(\"UTF-8\");\n-            // @formatter:on\n-\n-            Map<String, List<String>> headers = new HashMap<>();\n-            headers.put(\"X-YouTube-Client-Name\", Collections.singletonList(youtubeMusicKeys[1]));\n-            headers.put(\"X-YouTube-Client-Version\", Collections.singletonList(youtubeMusicKeys[2]));\n-            headers.put(\"Origin\", Collections.singletonList(\"https://music.youtube.com\"));\n-            headers.put(\"Referer\", Collections.singletonList(\"music.youtube.com\"));\n-            headers.put(\"Content-Type\", Collections.singletonList(\"application/json\"));\n-\n-            Response response = getDownloader().post(url, headers, json);\n-\n-            if (response.responseCode() == 404) {\n-                throw new ContentNotAvailableException(\"Not found\" +\n-                        \" (\\\"\" + response.responseCode() + \" \" + response.responseMessage() + \"\\\")\");\n-            }\n-\n-            final String responseBody = response.responseBody();\n-            if (responseBody.length() < 50) { // ensure to have a valid response\n-                throw new ParsingException(\"JSON response is too short\");\n-            }\n-\n-            final String responseContentType = response.getHeader(\"Content-Type\");\n-            if (responseContentType != null && responseContentType.toLowerCase().contains(\"text/html\")) {\n-                throw new ParsingException(\"Got HTML document, expected JSON response\" +\n-                        \" (latest url was: \\\"\" + response.latestUrl() + \"\\\")\");\n-            }\n-\n-            try {\n-                initialData = JsonParser.object().from(responseBody);\n-            } catch (JsonParserException e) {\n-                throw new ParsingException(\"Could not parse JSON\", e);\n-            }\n-        } else {\n-            final String url = getUrl() + \"&pbj=1\";\n-\n-            final JsonArray ajaxJson = getJsonResponse(url, getExtractorLocalization());\n-\n-            initialData = ajaxJson.getObject(1).getObject(\"response\");\n-        }\n+        initialData = ajaxJson.getObject(1).getObject(\"response\");\n     }\n \n     @Nonnull\n     @Override\n     public String getUrl() throws ParsingException {\n-        if (isMusicSearch()) return super.getUrl();\n         return super.getUrl() + \"&gl=\" + getExtractorContentCountry().getCountryCode();\n     }\n \n     @Override\n     public String getSearchSuggestion() throws ParsingException {\n-        if (isMusicSearch()) {\n-            final JsonObject itemSectionRenderer = initialData.getObject(\"contents\").getObject(\"sectionListRenderer\")\n-                    .getArray(\"contents\").getObject(0).getObject(\"itemSectionRenderer\");\n-            if (itemSectionRenderer == null) return \"\";\n-            return getTextFromObject(itemSectionRenderer.getArray(\"contents\").getObject(0)\n-                    .getObject(\"didYouMeanRenderer\").getObject(\"correctedQuery\"));\n-        } else {\n-            JsonObject showingResultsForRenderer = initialData.getObject(\"contents\")\n-                    .getObject(\"twoColumnSearchResultsRenderer\").getObject(\"primaryContents\")\n-                    .getObject(\"sectionListRenderer\").getArray(\"contents\").getObject(0)\n-                    .getObject(\"itemSectionRenderer\").getArray(\"contents\").getObject(0)\n-                    .getObject(\"showingResultsForRenderer\");\n-            if (showingResultsForRenderer == null) return \"\";\n-            return getTextFromObject(showingResultsForRenderer.getObject(\"correctedQuery\"));\n+        final JsonObject showingResultsForRenderer = initialData.getObject(\"contents\")\n+                .getObject(\"twoColumnSearchResultsRenderer\").getObject(\"primaryContents\")\n+                .getObject(\"sectionListRenderer\").getArray(\"contents\").getObject(0)\n+                .getObject(\"itemSectionRenderer\").getArray(\"contents\").getObject(0)\n+                .getObject(\"showingResultsForRenderer\");\n+        if (showingResultsForRenderer == null) {\n+            return \"\";\n         }\n+        return getTextFromObject(showingResultsForRenderer.getObject(\"correctedQuery\"));\n     }\n \n     @Nonnull\n     @Override\n-    public InfoItemsPage<InfoItem> getInitialPage() throws ExtractionException, IOException {\n+    public InfoItemsPage<InfoItem> getInitialPage() throws ExtractionException {\n         final InfoItemsSearchCollector collector = new InfoItemsSearchCollector(getServiceId());\n \n-        if (isMusicSearch()) {\n-            final JsonArray contents = initialData.getObject(\"contents\").getObject(\"sectionListRenderer\").getArray(\"contents\");\n-\n-            for (Object content : contents) {\n-                if (((JsonObject) content).getObject(\"musicShelfRenderer\") != null) {\n-                    collectMusicStreamsFrom(collector, ((JsonObject) content).getObject(\"musicShelfRenderer\").getArray(\"contents\"));\n-                }\n-            }\n-        } else {\n-            JsonArray sections = initialData.getObject(\"contents\").getObject(\"twoColumnSearchResultsRenderer\")\n-                    .getObject(\"primaryContents\").getObject(\"sectionListRenderer\").getArray(\"contents\");\n+        final JsonArray sections = initialData.getObject(\"contents\").getObject(\"twoColumnSearchResultsRenderer\")\n+                .getObject(\"primaryContents\").getObject(\"sectionListRenderer\").getArray(\"contents\");\n \n-            for (Object section : sections) {\n-                collectStreamsFrom(collector, ((JsonObject) section).getObject(\"itemSectionRenderer\").getArray(\"contents\"));\n-            }\n+        for (Object section : sections) {\n+            collectStreamsFrom(collector, ((JsonObject) section).getObject(\"itemSectionRenderer\").getArray(\"contents\"));\n         }\n \n         return new InfoItemsPage<>(collector, getNextPageUrl());\n     }\n \n     @Override\n-    public String getNextPageUrl() throws ExtractionException, IOException {\n-        if (isMusicSearch()) {\n-            final JsonArray contents = initialData.getObject(\"contents\").getObject(\"sectionListRenderer\").getArray(\"contents\");\n-\n-            for (Object content : contents) {\n-                if (((JsonObject) content).getObject(\"musicShelfRenderer\") != null) {\n-                    return getNextPageUrlFrom(((JsonObject) content).getObject(\"musicShelfRenderer\").getArray(\"continuations\"));\n-                }\n-            }\n-\n-            return \"\";\n-        } else {\n-            return getNextPageUrlFrom(initialData.getObject(\"contents\").getObject(\"twoColumnSearchResultsRenderer\")\n-                    .getObject(\"primaryContents\").getObject(\"sectionListRenderer\").getArray(\"contents\")\n-                    .getObject(0).getObject(\"itemSectionRenderer\").getArray(\"continuations\"));\n-        }\n+    public String getNextPageUrl() throws ExtractionException {\n+        return getNextPageUrlFrom(initialData.getObject(\"contents\").getObject(\"twoColumnSearchResultsRenderer\")\n+                .getObject(\"primaryContents\").getObject(\"sectionListRenderer\").getArray(\"contents\")\n+                .getObject(0).getObject(\"itemSectionRenderer\").getArray(\"continuations\"));\n     }\n \n     @Override\n-    public InfoItemsPage<InfoItem> getPage(String pageUrl) throws IOException, ExtractionException {\n+    public InfoItemsPage<InfoItem> getPage(final String pageUrl) throws IOException, ExtractionException {\n         if (pageUrl == null || pageUrl.isEmpty()) {\n             throw new ExtractionException(new IllegalArgumentException(\"Page url is empty or null\"));\n         }\n \n         final InfoItemsSearchCollector collector = new InfoItemsSearchCollector(getServiceId());\n+        final JsonArray ajaxJson = getJsonResponse(pageUrl, getExtractorLocalization());\n \n-        JsonArray continuations;\n-\n-        if (isMusicSearch()) {\n-            final String[] youtubeMusicKeys = YoutubeParsingHelper.getYoutubeMusicKeys();\n-\n-            // @formatter:off\n-            byte[] json = JsonWriter.string()\n-                .object()\n-                    .object(\"context\")\n-                        .object(\"client\")\n-                            .value(\"clientName\", \"WEB_REMIX\")\n-                            .value(\"clientVersion\", youtubeMusicKeys[2])\n-                            .value(\"hl\", \"en\")\n-                            .value(\"gl\", getExtractorContentCountry().getCountryCode())\n-                            .array(\"experimentIds\").end()\n-                            .value(\"experimentsToken\", \"\")\n-                            .value(\"utcOffsetMinutes\", 0)\n-                            .object(\"locationInfo\").end()\n-                            .object(\"musicAppInfo\").end()\n-                        .end()\n-                        .object(\"capabilities\").end()\n-                        .object(\"request\")\n-                            .array(\"internalExperimentFlags\").end()\n-                            .object(\"sessionIndex\").end()\n-                        .end()\n-                        .object(\"activePlayers\").end()\n-                        .object(\"user\")\n-                            .value(\"enableSafetyMode\", false)\n-                        .end()\n-                    .end()\n-                .end().done().getBytes(\"UTF-8\");\n-            // @formatter:on\n-\n-            Map<String, List<String>> headers = new HashMap<>();\n-            headers.put(\"X-YouTube-Client-Name\", Collections.singletonList(youtubeMusicKeys[1]));\n-            headers.put(\"X-YouTube-Client-Version\", Collections.singletonList(youtubeMusicKeys[2]));\n-            headers.put(\"Origin\", Collections.singletonList(\"https://music.youtube.com\"));\n-            headers.put(\"Referer\", Collections.singletonList(\"music.youtube.com\"));\n-            headers.put(\"Content-Type\", Collections.singletonList(\"application/json\"));\n-\n-            Response response = getDownloader().post(pageUrl, headers, json);\n-\n-            if (response.responseCode() == 404) {\n-                throw new ContentNotAvailableException(\"Not found\" +\n-                        \" (\\\"\" + response.responseCode() + \" \" + response.responseMessage() + \"\\\")\");\n-            }\n-\n-            final String responseBody = response.responseBody();\n-            if (responseBody.length() < 50) { // ensure to have a valid response\n-                throw new ParsingException(\"JSON response is too short\");\n-            }\n-\n-            final String responseContentType = response.getHeader(\"Content-Type\");\n-            if (responseContentType != null && responseContentType.toLowerCase().contains(\"text/html\")) {\n-                throw new ParsingException(\"Got HTML document, expected JSON response\" +\n-                        \" (latest url was: \\\"\" + response.latestUrl() + \"\\\")\");\n-            }\n-\n-            final JsonObject ajaxJson;\n-            try {\n-                ajaxJson = JsonParser.object().from(responseBody);\n-            } catch (JsonParserException e) {\n-                throw new ParsingException(\"Could not parse JSON\", e);\n-            }\n-\n-            if (ajaxJson.getObject(\"continuationContents\") == null) {\n-                return InfoItemsPage.emptyPage();\n-            }\n-\n-            JsonObject musicShelfContinuation = ajaxJson.getObject(\"continuationContents\").getObject(\"musicShelfContinuation\");\n-\n-            collectMusicStreamsFrom(collector, musicShelfContinuation.getArray(\"contents\"));\n-            continuations = musicShelfContinuation.getArray(\"continuations\");\n-        } else {\n-            final JsonArray ajaxJson = getJsonResponse(pageUrl, getExtractorLocalization());\n+        final JsonObject itemSectionRenderer = ajaxJson.getObject(1).getObject(\"response\")\n+                .getObject(\"continuationContents\").getObject(\"itemSectionContinuation\");\n \n-            JsonObject itemSectionRenderer = ajaxJson.getObject(1).getObject(\"response\")\n-                    .getObject(\"continuationContents\").getObject(\"itemSectionContinuation\");\n-\n-            collectStreamsFrom(collector, itemSectionRenderer.getArray(\"contents\"));\n-            continuations = itemSectionRenderer.getArray(\"continuations\");\n-        }\n+        collectStreamsFrom(collector, itemSectionRenderer.getArray(\"contents\"));\n+        final JsonArray continuations = itemSectionRenderer.getArray(\"continuations\");\n \n         return new InfoItemsPage<>(collector, getNextPageUrlFrom(continuations));\n     }\n \n-    private boolean isMusicSearch() {\n-        final List<String> contentFilters = getLinkHandler().getContentFilters();\n-        return contentFilters.size() > 0 && contentFilters.get(0).startsWith(\"music_\");\n-    }\n-\n-    private void collectStreamsFrom(InfoItemsSearchCollector collector, JsonArray videos) throws NothingFoundException, ParsingException {\n+    private void collectStreamsFrom(final InfoItemsSearchCollector collector, final JsonArray videos) throws NothingFoundException, ParsingException {\n         final TimeAgoParser timeAgoParser = getTimeAgoParser();\n \n         for (Object item : videos) {\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg2NzExMA==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/291#discussion_r396867110", "body": "Null pointer exceptions when the uploader url is not available, a null should be returned in those cases.", "bodyText": "Null pointer exceptions when the uploader url is not available, a null should be returned in those cases.", "bodyHTML": "<p dir=\"auto\">Null pointer exceptions when the uploader url is not available, a null should be returned in those cases.</p>", "author": "mauriciocolli", "createdAt": "2020-03-24T02:22:18Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeSearchExtractor.java", "diffHunk": "@@ -133,15 +353,217 @@ private void collectStreamsFrom(InfoItemsSearchCollector collector, JsonArray vi\n         }\n     }\n \n-    private String getNextPageUrlFrom(JsonArray continuations) throws ParsingException {\n-        if (continuations == null) {\n-            return \"\";\n+    private void collectMusicStreamsFrom(InfoItemsSearchCollector collector, JsonArray videos) {\n+        final TimeAgoParser timeAgoParser = getTimeAgoParser();\n+\n+        for (Object item : videos) {\n+            final JsonObject info = ((JsonObject) item).getObject(\"musicResponsiveListItemRenderer\");\n+            if (info != null) {\n+                final String searchType = getLinkHandler().getContentFilters().get(0);\n+                if (searchType.equals(MUSIC_SONGS) || searchType.equals(MUSIC_VIDEOS)) {\n+                    collector.commit(new YoutubeStreamInfoItemExtractor(info, timeAgoParser) {\n+                        @Override\n+                        public String getUrl() throws ParsingException {\n+                            String url = getUrlFromNavigationEndpoint(info.getObject(\"doubleTapCommand\"));\n+                            if (url != null && !url.isEmpty()) return url;\n+                            throw new ParsingException(\"Could not get url\");\n+                        }\n+\n+                        @Override\n+                        public String getName() throws ParsingException {\n+                            String name = getTextFromObject(info.getArray(\"flexColumns\").getObject(0)\n+                                    .getObject(\"musicResponsiveListItemFlexColumnRenderer\").getObject(\"text\"));\n+                            if (name != null && !name.isEmpty()) return name;\n+                            throw new ParsingException(\"Could not get name\");\n+                        }\n+\n+                        @Override\n+                        public long getDuration() throws ParsingException {\n+                            String duration = getTextFromObject(info.getArray(\"flexColumns\").getObject(3)\n+                                    .getObject(\"musicResponsiveListItemFlexColumnRenderer\").getObject(\"text\"));\n+                            if (duration != null && !duration.isEmpty())\n+                                return YoutubeParsingHelper.parseDurationString(duration);\n+                            throw new ParsingException(\"Could not get duration\");\n+                        }\n+\n+                        @Override\n+                        public String getUploaderName() throws ParsingException {\n+                            String name = getTextFromObject(info.getArray(\"flexColumns\").getObject(1)\n+                                    .getObject(\"musicResponsiveListItemFlexColumnRenderer\").getObject(\"text\"));\n+                            if (name != null && !name.isEmpty()) return name;\n+                            throw new ParsingException(\"Could not get uploader name\");\n+                        }\n+\n+                        @Override\n+                        public String getUploaderUrl() throws ParsingException {\n+                            if (searchType.equals(MUSIC_VIDEOS)) return null;\n+                            String url = getUrlFromNavigationEndpoint(info.getArray(\"flexColumns\")\n+                                    .getObject(1).getObject(\"musicResponsiveListItemFlexColumnRenderer\")\n+                                    .getObject(\"text\").getArray(\"runs\").getObject(0).getObject(\"navigationEndpoint\"));\n+                            if (url != null && !url.isEmpty()) return url;\n+                            throw new ParsingException(\"Could not get uploader url\");", "originalCommit": "c1cfdb3356a1024953c506a1849c64d3595f41f6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI4NjIyMQ==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/291#discussion_r397286221", "bodyText": "Could you tell me where you've seen that happen? I've never seen that happen, and I don't think @opusforlife2 has seen that happen either.", "author": "wb9688", "createdAt": "2020-03-24T16:22:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg2NzExMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzYxOTMxMA==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/291#discussion_r397619310", "bodyText": "@mauriciocolli Can you provide a link?", "author": "opusforlife2", "createdAt": "2020-03-25T05:39:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg2NzExMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzcwNTgwOQ==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/291#discussion_r397705809", "bodyText": "I found one. Thanks!", "author": "wb9688", "createdAt": "2020-03-25T09:17:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg2NzExMA=="}], "type": "inlineReview", "revised_code": {"commit": "1762a527c9c9d6d552bbee6035d5a3f2397f3894", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeSearchExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeSearchExtractor.java\nindex 7f2774b0..dbb95f04 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeSearchExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeSearchExtractor.java\n", "chunk": "@@ -394,16 +374,6 @@ public class YoutubeSearchExtractor extends SearchExtractor {\n                             throw new ParsingException(\"Could not get uploader name\");\n                         }\n \n-                        @Override\n-                        public String getUploaderUrl() throws ParsingException {\n-                            if (searchType.equals(MUSIC_VIDEOS)) return null;\n-                            String url = getUrlFromNavigationEndpoint(info.getArray(\"flexColumns\")\n-                                    .getObject(1).getObject(\"musicResponsiveListItemFlexColumnRenderer\")\n-                                    .getObject(\"text\").getArray(\"runs\").getObject(0).getObject(\"navigationEndpoint\"));\n-                            if (url != null && !url.isEmpty()) return url;\n-                            throw new ParsingException(\"Could not get uploader url\");\n-                        }\n-\n                         @Override\n                         public String getTextualUploadDate() {\n                             return null;\n", "next_change": {"commit": "d58c0f230d27cf34c2bf044597c908c519f94a84", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeSearchExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeSearchExtractor.java\nindex dbb95f04..7c5adca5 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeSearchExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeSearchExtractor.java\n", "chunk": "@@ -374,6 +392,16 @@ public class YoutubeSearchExtractor extends SearchExtractor {\n                             throw new ParsingException(\"Could not get uploader name\");\n                         }\n \n+                        @Override\n+                        public String getUploaderUrl() throws ParsingException {\n+                            if (searchType.equals(MUSIC_VIDEOS)) return null;\n+                            String url = getUrlFromNavigationEndpoint(info.getArray(\"flexColumns\")\n+                                    .getObject(1).getObject(\"musicResponsiveListItemFlexColumnRenderer\")\n+                                    .getObject(\"text\").getArray(\"runs\").getObject(0).getObject(\"navigationEndpoint\"));\n+                            if (url != null && !url.isEmpty()) return url;\n+                            throw new ParsingException(\"Could not get uploader url\");\n+                        }\n+\n                         @Override\n                         public String getTextualUploadDate() {\n                             return null;\n", "next_change": {"commit": "aa8cea47f3d6276ab592d18ff550ad9d6e63d81b", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeSearchExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeSearchExtractor.java\nindex 7c5adca5..52df8c44 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeSearchExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeSearchExtractor.java\n", "chunk": "@@ -395,9 +395,11 @@ public class YoutubeSearchExtractor extends SearchExtractor {\n                         @Override\n                         public String getUploaderUrl() throws ParsingException {\n                             if (searchType.equals(MUSIC_VIDEOS)) return null;\n-                            String url = getUrlFromNavigationEndpoint(info.getArray(\"flexColumns\")\n+                            JsonObject navigationEndpoint = info.getArray(\"flexColumns\")\n                                     .getObject(1).getObject(\"musicResponsiveListItemFlexColumnRenderer\")\n-                                    .getObject(\"text\").getArray(\"runs\").getObject(0).getObject(\"navigationEndpoint\"));\n+                                    .getObject(\"text\").getArray(\"runs\").getObject(0).getObject(\"navigationEndpoint\");\n+                            if (navigationEndpoint == null) return null;\n+                            String url = getUrlFromNavigationEndpoint(navigationEndpoint);\n                             if (url != null && !url.isEmpty()) return url;\n                             throw new ParsingException(\"Could not get uploader url\");\n                         }\n", "next_change": {"commit": "cf0f2aff3e8d7dc539ff662a006329342dd6d55a", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeSearchExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeSearchExtractor.java\nindex 52df8c44..ca56283d 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeSearchExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeSearchExtractor.java\n", "chunk": "@@ -394,12 +394,25 @@ public class YoutubeSearchExtractor extends SearchExtractor {\n \n                         @Override\n                         public String getUploaderUrl() throws ParsingException {\n-                            if (searchType.equals(MUSIC_VIDEOS)) return null;\n-                            JsonObject navigationEndpoint = info.getArray(\"flexColumns\")\n-                                    .getObject(1).getObject(\"musicResponsiveListItemFlexColumnRenderer\")\n-                                    .getObject(\"text\").getArray(\"runs\").getObject(0).getObject(\"navigationEndpoint\");\n-                            if (navigationEndpoint == null) return null;\n-                            String url = getUrlFromNavigationEndpoint(navigationEndpoint);\n+                            String url = null;\n+\n+                            if (searchType.equals(MUSIC_VIDEOS)) {\n+                                JsonArray items = info.getObject(\"menu\").getObject(\"menuRenderer\").getArray(\"items\");\n+                                for (Object item : items) {\n+                                    JsonObject menuNavigationItemRenderer = ((JsonObject) item).getObject(\"menuNavigationItemRenderer\");\n+                                    if (menuNavigationItemRenderer != null && menuNavigationItemRenderer.getObject(\"icon\").getString(\"iconType\").equals(\"ARTIST\")) {\n+                                        url = getUrlFromNavigationEndpoint(menuNavigationItemRenderer.getObject(\"navigationEndpoint\"));\n+                                        break;\n+                                    }\n+                                }\n+                            } else {\n+                                JsonObject navigationEndpoint = info.getArray(\"flexColumns\")\n+                                        .getObject(1).getObject(\"musicResponsiveListItemFlexColumnRenderer\")\n+                                        .getObject(\"text\").getArray(\"runs\").getObject(0).getObject(\"navigationEndpoint\");\n+                                if (navigationEndpoint == null) return null;\n+                                url = getUrlFromNavigationEndpoint(navigationEndpoint);\n+                            }\n+\n                             if (url != null && !url.isEmpty()) return url;\n                             throw new ParsingException(\"Could not get uploader url\");\n                         }\n", "next_change": {"commit": "ac15df45489178002c95db436a717319020a517a", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeSearchExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeSearchExtractor.java\nindex ca56283d..06d83b24 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeSearchExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeSearchExtractor.java\n", "chunk": "@@ -351,232 +132,17 @@ public class YoutubeSearchExtractor extends SearchExtractor {\n         }\n     }\n \n-    private void collectMusicStreamsFrom(InfoItemsSearchCollector collector, JsonArray videos) {\n-        final TimeAgoParser timeAgoParser = getTimeAgoParser();\n-\n-        for (Object item : videos) {\n-            final JsonObject info = ((JsonObject) item).getObject(\"musicResponsiveListItemRenderer\");\n-            if (info != null) {\n-                final String searchType = getLinkHandler().getContentFilters().get(0);\n-                if (searchType.equals(MUSIC_SONGS) || searchType.equals(MUSIC_VIDEOS)) {\n-                    collector.commit(new YoutubeStreamInfoItemExtractor(info, timeAgoParser) {\n-                        @Override\n-                        public String getUrl() throws ParsingException {\n-                            String url = getUrlFromNavigationEndpoint(info.getObject(\"doubleTapCommand\"));\n-                            if (url != null && !url.isEmpty()) return url;\n-                            throw new ParsingException(\"Could not get url\");\n-                        }\n-\n-                        @Override\n-                        public String getName() throws ParsingException {\n-                            String name = getTextFromObject(info.getArray(\"flexColumns\").getObject(0)\n-                                    .getObject(\"musicResponsiveListItemFlexColumnRenderer\").getObject(\"text\"));\n-                            if (name != null && !name.isEmpty()) return name;\n-                            throw new ParsingException(\"Could not get name\");\n-                        }\n-\n-                        @Override\n-                        public long getDuration() throws ParsingException {\n-                            String duration = getTextFromObject(info.getArray(\"flexColumns\").getObject(3)\n-                                    .getObject(\"musicResponsiveListItemFlexColumnRenderer\").getObject(\"text\"));\n-                            if (duration != null && !duration.isEmpty())\n-                                return YoutubeParsingHelper.parseDurationString(duration);\n-                            throw new ParsingException(\"Could not get duration\");\n-                        }\n-\n-                        @Override\n-                        public String getUploaderName() throws ParsingException {\n-                            String name = getTextFromObject(info.getArray(\"flexColumns\").getObject(1)\n-                                    .getObject(\"musicResponsiveListItemFlexColumnRenderer\").getObject(\"text\"));\n-                            if (name != null && !name.isEmpty()) return name;\n-                            throw new ParsingException(\"Could not get uploader name\");\n-                        }\n-\n-                        @Override\n-                        public String getUploaderUrl() throws ParsingException {\n-                            String url = null;\n-\n-                            if (searchType.equals(MUSIC_VIDEOS)) {\n-                                JsonArray items = info.getObject(\"menu\").getObject(\"menuRenderer\").getArray(\"items\");\n-                                for (Object item : items) {\n-                                    JsonObject menuNavigationItemRenderer = ((JsonObject) item).getObject(\"menuNavigationItemRenderer\");\n-                                    if (menuNavigationItemRenderer != null && menuNavigationItemRenderer.getObject(\"icon\").getString(\"iconType\").equals(\"ARTIST\")) {\n-                                        url = getUrlFromNavigationEndpoint(menuNavigationItemRenderer.getObject(\"navigationEndpoint\"));\n-                                        break;\n-                                    }\n-                                }\n-                            } else {\n-                                JsonObject navigationEndpoint = info.getArray(\"flexColumns\")\n-                                        .getObject(1).getObject(\"musicResponsiveListItemFlexColumnRenderer\")\n-                                        .getObject(\"text\").getArray(\"runs\").getObject(0).getObject(\"navigationEndpoint\");\n-                                if (navigationEndpoint == null) return null;\n-                                url = getUrlFromNavigationEndpoint(navigationEndpoint);\n-                            }\n-\n-                            if (url != null && !url.isEmpty()) return url;\n-                            throw new ParsingException(\"Could not get uploader url\");\n-                        }\n-\n-                        @Override\n-                        public String getTextualUploadDate() {\n-                            return null;\n-                        }\n-\n-                        @Override\n-                        public DateWrapper getUploadDate() {\n-                            return null;\n-                        }\n \n-                        @Override\n-                        public long getViewCount() throws ParsingException {\n-                            if (searchType.equals(MUSIC_SONGS)) return -1;\n-                            String viewCount = getTextFromObject(info.getArray(\"flexColumns\").getObject(2)\n-                                    .getObject(\"musicResponsiveListItemFlexColumnRenderer\").getObject(\"text\"));\n-                            if (viewCount != null && !viewCount.isEmpty()) return Utils.mixedNumberWordToLong(viewCount);\n-                            throw new ParsingException(\"Could not get view count\");\n-                        }\n-\n-                        @Override\n-                        public String getThumbnailUrl() throws ParsingException {\n-                            try {\n-                                JsonArray thumbnails = info.getObject(\"thumbnail\").getObject(\"musicThumbnailRenderer\")\n-                                        .getObject(\"thumbnail\").getArray(\"thumbnails\");\n-                                // the last thumbnail is the one with the highest resolution\n-                                String url = thumbnails.getObject(thumbnails.size() - 1).getString(\"url\");\n-\n-                                return fixThumbnailUrl(url);\n-                            } catch (Exception e) {\n-                                throw new ParsingException(\"Could not get thumbnail url\", e);\n-                            }\n-                        }\n-                    });\n-                } else if (searchType.equals(MUSIC_ARTISTS)) {\n-                    collector.commit(new YoutubeChannelInfoItemExtractor(info) {\n-                        @Override\n-                        public String getThumbnailUrl() throws ParsingException {\n-                            try {\n-                                JsonArray thumbnails = info.getObject(\"thumbnail\").getObject(\"musicThumbnailRenderer\")\n-                                        .getObject(\"thumbnail\").getArray(\"thumbnails\");\n-                                // the last thumbnail is the one with the highest resolution\n-                                String url = thumbnails.getObject(thumbnails.size() - 1).getString(\"url\");\n-\n-                                return fixThumbnailUrl(url);\n-                            } catch (Exception e) {\n-                                throw new ParsingException(\"Could not get thumbnail url\", e);\n-                            }\n-                        }\n-\n-                        @Override\n-                        public String getName() throws ParsingException {\n-                            String name = getTextFromObject(info.getArray(\"flexColumns\").getObject(0)\n-                                    .getObject(\"musicResponsiveListItemFlexColumnRenderer\").getObject(\"text\"));\n-                            if (name != null && !name.isEmpty()) return name;\n-                            throw new ParsingException(\"Could not get name\");\n-                        }\n-\n-                        @Override\n-                        public String getUrl() throws ParsingException {\n-                            String url = getUrlFromNavigationEndpoint(info.getObject(\"navigationEndpoint\"));\n-                            if (url != null && !url.isEmpty()) return url;\n-                            throw new ParsingException(\"Could not get url\");\n-                        }\n-\n-                        @Override\n-                        public long getSubscriberCount() throws ParsingException {\n-                            String viewCount = getTextFromObject(info.getArray(\"flexColumns\").getObject(2)\n-                                    .getObject(\"musicResponsiveListItemFlexColumnRenderer\").getObject(\"text\"));\n-                            if (viewCount != null && !viewCount.isEmpty()) return Utils.mixedNumberWordToLong(viewCount);\n-                            throw new ParsingException(\"Could not get subscriber count\");\n-                        }\n-\n-                        @Override\n-                        public long getStreamCount() {\n-                            return -1;\n-                        }\n-\n-                        @Override\n-                        public String getDescription() {\n-                            return null;\n-                        }\n-                    });\n-                } else if (searchType.equals(MUSIC_ALBUMS) || searchType.equals(MUSIC_PLAYLISTS)) {\n-                    collector.commit(new YoutubePlaylistInfoItemExtractor(info) {\n-                        @Override\n-                        public String getThumbnailUrl() throws ParsingException {\n-                            try {\n-                                JsonArray thumbnails = info.getObject(\"thumbnail\").getObject(\"musicThumbnailRenderer\")\n-                                        .getObject(\"thumbnail\").getArray(\"thumbnails\");\n-                                // the last thumbnail is the one with the highest resolution\n-                                String url = thumbnails.getObject(thumbnails.size() - 1).getString(\"url\");\n-\n-                                return fixThumbnailUrl(url);\n-                            } catch (Exception e) {\n-                                throw new ParsingException(\"Could not get thumbnail url\", e);\n-                            }\n-                        }\n-\n-                        @Override\n-                        public String getName() throws ParsingException {\n-                            String name = getTextFromObject(info.getArray(\"flexColumns\").getObject(0)\n-                                    .getObject(\"musicResponsiveListItemFlexColumnRenderer\").getObject(\"text\"));\n-                            if (name != null && !name.isEmpty()) return name;\n-                            throw new ParsingException(\"Could not get name\");\n-                        }\n-\n-                        @Override\n-                        public String getUrl() throws ParsingException {\n-                            String url = getUrlFromNavigationEndpoint(info.getObject(\"doubleTapCommand\"));\n-                            if (url != null && !url.isEmpty()) return url;\n-                            throw new ParsingException(\"Could not get url\");\n-                        }\n-\n-                        @Override\n-                        public String getUploaderName() throws ParsingException {\n-                            String name;\n-                            if (searchType.equals(MUSIC_ALBUMS)) {\n-                                name = getTextFromObject(info.getArray(\"flexColumns\").getObject(2)\n-                                        .getObject(\"musicResponsiveListItemFlexColumnRenderer\").getObject(\"text\"));\n-                            } else {\n-                                name = getTextFromObject(info.getArray(\"flexColumns\").getObject(1)\n-                                        .getObject(\"musicResponsiveListItemFlexColumnRenderer\").getObject(\"text\"));\n-                            }\n-                            if (name != null && !name.isEmpty()) return name;\n-                            throw new ParsingException(\"Could not get uploader name\");\n-                        }\n-\n-                        @Override\n-                        public long getStreamCount() throws ParsingException {\n-                            if (searchType.equals(MUSIC_ALBUMS)) return ITEM_COUNT_UNKNOWN;\n-                            String count = getTextFromObject(info.getArray(\"flexColumns\").getObject(2)\n-                                    .getObject(\"musicResponsiveListItemFlexColumnRenderer\").getObject(\"text\"));\n-                            if (count != null && !count.isEmpty()) {\n-                                if (count.contains(\"100+\")) {\n-                                    return ITEM_COUNT_MORE_THAN_100;\n-                                } else {\n-                                    return Long.parseLong(Utils.removeNonDigitCharacters(count));\n-                                }\n-                            }\n-                            throw new ParsingException(\"Could not get count\");\n-                        }\n-                    });\n-                }\n-            }\n+    private String getNextPageUrlFrom(final JsonArray continuations) throws ParsingException {\n+        if (continuations == null) {\n+            return \"\";\n         }\n-    }\n \n-    private String getNextPageUrlFrom(JsonArray continuations) throws ParsingException, IOException, ReCaptchaException {\n-        if (continuations == null) return \"\";\n+        final JsonObject nextContinuationData = continuations.getObject(0).getObject(\"nextContinuationData\");\n+        final String continuation = nextContinuationData.getString(\"continuation\");\n+        final String clickTrackingParams = nextContinuationData.getString(\"clickTrackingParams\");\n \n-        JsonObject nextContinuationData = continuations.getObject(0).getObject(\"nextContinuationData\");\n-        String continuation = nextContinuationData.getString(\"continuation\");\n-        String clickTrackingParams = nextContinuationData.getString(\"clickTrackingParams\");\n-\n-        if (isMusicSearch()) {\n-            return \"https://music.youtube.com/youtubei/v1/search?ctoken=\" + continuation + \"&continuation=\" + continuation\n-                    + \"&itct=\" + clickTrackingParams + \"&alt=json&key=\" + YoutubeParsingHelper.getYoutubeMusicKeys()[0];\n-        } else {\n-            return getUrl() + \"&pbj=1&ctoken=\" + continuation + \"&continuation=\" + continuation\n-                    + \"&itct=\" + clickTrackingParams;\n-        }\n+        return getUrl() + \"&pbj=1&ctoken=\" + continuation + \"&continuation=\" + continuation\n+                + \"&itct=\" + clickTrackingParams;\n     }\n }\n", "next_change": null}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg2Nzc3Mw==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/291#discussion_r396867773", "body": "It is available in some video items which have the \"Go to artist\" button in the item menu, though it is usually for the \"topic\" channel instead, maybe we should ignore them anyway?\r\n\r\nWe don't even use this uploader url for anything right now.", "bodyText": "It is available in some video items which have the \"Go to artist\" button in the item menu, though it is usually for the \"topic\" channel instead, maybe we should ignore them anyway?\nWe don't even use this uploader url for anything right now.", "bodyHTML": "<p dir=\"auto\">It is available in some video items which have the \"Go to artist\" button in the item menu, though it is usually for the \"topic\" channel instead, maybe we should ignore them anyway?</p>\n<p dir=\"auto\">We don't even use this uploader url for anything right now.</p>", "author": "mauriciocolli", "createdAt": "2020-03-24T02:25:11Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeSearchExtractor.java", "diffHunk": "@@ -133,15 +353,217 @@ private void collectStreamsFrom(InfoItemsSearchCollector collector, JsonArray vi\n         }\n     }\n \n-    private String getNextPageUrlFrom(JsonArray continuations) throws ParsingException {\n-        if (continuations == null) {\n-            return \"\";\n+    private void collectMusicStreamsFrom(InfoItemsSearchCollector collector, JsonArray videos) {\n+        final TimeAgoParser timeAgoParser = getTimeAgoParser();\n+\n+        for (Object item : videos) {\n+            final JsonObject info = ((JsonObject) item).getObject(\"musicResponsiveListItemRenderer\");\n+            if (info != null) {\n+                final String searchType = getLinkHandler().getContentFilters().get(0);\n+                if (searchType.equals(MUSIC_SONGS) || searchType.equals(MUSIC_VIDEOS)) {\n+                    collector.commit(new YoutubeStreamInfoItemExtractor(info, timeAgoParser) {\n+                        @Override\n+                        public String getUrl() throws ParsingException {\n+                            String url = getUrlFromNavigationEndpoint(info.getObject(\"doubleTapCommand\"));\n+                            if (url != null && !url.isEmpty()) return url;\n+                            throw new ParsingException(\"Could not get url\");\n+                        }\n+\n+                        @Override\n+                        public String getName() throws ParsingException {\n+                            String name = getTextFromObject(info.getArray(\"flexColumns\").getObject(0)\n+                                    .getObject(\"musicResponsiveListItemFlexColumnRenderer\").getObject(\"text\"));\n+                            if (name != null && !name.isEmpty()) return name;\n+                            throw new ParsingException(\"Could not get name\");\n+                        }\n+\n+                        @Override\n+                        public long getDuration() throws ParsingException {\n+                            String duration = getTextFromObject(info.getArray(\"flexColumns\").getObject(3)\n+                                    .getObject(\"musicResponsiveListItemFlexColumnRenderer\").getObject(\"text\"));\n+                            if (duration != null && !duration.isEmpty())\n+                                return YoutubeParsingHelper.parseDurationString(duration);\n+                            throw new ParsingException(\"Could not get duration\");\n+                        }\n+\n+                        @Override\n+                        public String getUploaderName() throws ParsingException {\n+                            String name = getTextFromObject(info.getArray(\"flexColumns\").getObject(1)\n+                                    .getObject(\"musicResponsiveListItemFlexColumnRenderer\").getObject(\"text\"));\n+                            if (name != null && !name.isEmpty()) return name;\n+                            throw new ParsingException(\"Could not get uploader name\");\n+                        }\n+\n+                        @Override\n+                        public String getUploaderUrl() throws ParsingException {\n+                            if (searchType.equals(MUSIC_VIDEOS)) return null;", "originalCommit": "c1cfdb3356a1024953c506a1849c64d3595f41f6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI4NzEyNg==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/291#discussion_r397287126", "bodyText": "I'll add support for them, though topic channels will only be useful once I made my follow-up tabs PR.", "author": "wb9688", "createdAt": "2020-03-24T16:24:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg2Nzc3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "1762a527c9c9d6d552bbee6035d5a3f2397f3894", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeSearchExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeSearchExtractor.java\nindex 7f2774b0..dbb95f04 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeSearchExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeSearchExtractor.java\n", "chunk": "@@ -394,16 +374,6 @@ public class YoutubeSearchExtractor extends SearchExtractor {\n                             throw new ParsingException(\"Could not get uploader name\");\n                         }\n \n-                        @Override\n-                        public String getUploaderUrl() throws ParsingException {\n-                            if (searchType.equals(MUSIC_VIDEOS)) return null;\n-                            String url = getUrlFromNavigationEndpoint(info.getArray(\"flexColumns\")\n-                                    .getObject(1).getObject(\"musicResponsiveListItemFlexColumnRenderer\")\n-                                    .getObject(\"text\").getArray(\"runs\").getObject(0).getObject(\"navigationEndpoint\"));\n-                            if (url != null && !url.isEmpty()) return url;\n-                            throw new ParsingException(\"Could not get uploader url\");\n-                        }\n-\n                         @Override\n                         public String getTextualUploadDate() {\n                             return null;\n", "next_change": {"commit": "d58c0f230d27cf34c2bf044597c908c519f94a84", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeSearchExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeSearchExtractor.java\nindex dbb95f04..7c5adca5 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeSearchExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeSearchExtractor.java\n", "chunk": "@@ -374,6 +392,16 @@ public class YoutubeSearchExtractor extends SearchExtractor {\n                             throw new ParsingException(\"Could not get uploader name\");\n                         }\n \n+                        @Override\n+                        public String getUploaderUrl() throws ParsingException {\n+                            if (searchType.equals(MUSIC_VIDEOS)) return null;\n+                            String url = getUrlFromNavigationEndpoint(info.getArray(\"flexColumns\")\n+                                    .getObject(1).getObject(\"musicResponsiveListItemFlexColumnRenderer\")\n+                                    .getObject(\"text\").getArray(\"runs\").getObject(0).getObject(\"navigationEndpoint\"));\n+                            if (url != null && !url.isEmpty()) return url;\n+                            throw new ParsingException(\"Could not get uploader url\");\n+                        }\n+\n                         @Override\n                         public String getTextualUploadDate() {\n                             return null;\n", "next_change": {"commit": "aa8cea47f3d6276ab592d18ff550ad9d6e63d81b", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeSearchExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeSearchExtractor.java\nindex 7c5adca5..52df8c44 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeSearchExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeSearchExtractor.java\n", "chunk": "@@ -395,9 +395,11 @@ public class YoutubeSearchExtractor extends SearchExtractor {\n                         @Override\n                         public String getUploaderUrl() throws ParsingException {\n                             if (searchType.equals(MUSIC_VIDEOS)) return null;\n-                            String url = getUrlFromNavigationEndpoint(info.getArray(\"flexColumns\")\n+                            JsonObject navigationEndpoint = info.getArray(\"flexColumns\")\n                                     .getObject(1).getObject(\"musicResponsiveListItemFlexColumnRenderer\")\n-                                    .getObject(\"text\").getArray(\"runs\").getObject(0).getObject(\"navigationEndpoint\"));\n+                                    .getObject(\"text\").getArray(\"runs\").getObject(0).getObject(\"navigationEndpoint\");\n+                            if (navigationEndpoint == null) return null;\n+                            String url = getUrlFromNavigationEndpoint(navigationEndpoint);\n                             if (url != null && !url.isEmpty()) return url;\n                             throw new ParsingException(\"Could not get uploader url\");\n                         }\n", "next_change": {"commit": "cf0f2aff3e8d7dc539ff662a006329342dd6d55a", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeSearchExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeSearchExtractor.java\nindex 52df8c44..ca56283d 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeSearchExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeSearchExtractor.java\n", "chunk": "@@ -394,12 +394,25 @@ public class YoutubeSearchExtractor extends SearchExtractor {\n \n                         @Override\n                         public String getUploaderUrl() throws ParsingException {\n-                            if (searchType.equals(MUSIC_VIDEOS)) return null;\n-                            JsonObject navigationEndpoint = info.getArray(\"flexColumns\")\n-                                    .getObject(1).getObject(\"musicResponsiveListItemFlexColumnRenderer\")\n-                                    .getObject(\"text\").getArray(\"runs\").getObject(0).getObject(\"navigationEndpoint\");\n-                            if (navigationEndpoint == null) return null;\n-                            String url = getUrlFromNavigationEndpoint(navigationEndpoint);\n+                            String url = null;\n+\n+                            if (searchType.equals(MUSIC_VIDEOS)) {\n+                                JsonArray items = info.getObject(\"menu\").getObject(\"menuRenderer\").getArray(\"items\");\n+                                for (Object item : items) {\n+                                    JsonObject menuNavigationItemRenderer = ((JsonObject) item).getObject(\"menuNavigationItemRenderer\");\n+                                    if (menuNavigationItemRenderer != null && menuNavigationItemRenderer.getObject(\"icon\").getString(\"iconType\").equals(\"ARTIST\")) {\n+                                        url = getUrlFromNavigationEndpoint(menuNavigationItemRenderer.getObject(\"navigationEndpoint\"));\n+                                        break;\n+                                    }\n+                                }\n+                            } else {\n+                                JsonObject navigationEndpoint = info.getArray(\"flexColumns\")\n+                                        .getObject(1).getObject(\"musicResponsiveListItemFlexColumnRenderer\")\n+                                        .getObject(\"text\").getArray(\"runs\").getObject(0).getObject(\"navigationEndpoint\");\n+                                if (navigationEndpoint == null) return null;\n+                                url = getUrlFromNavigationEndpoint(navigationEndpoint);\n+                            }\n+\n                             if (url != null && !url.isEmpty()) return url;\n                             throw new ParsingException(\"Could not get uploader url\");\n                         }\n", "next_change": {"commit": "ac15df45489178002c95db436a717319020a517a", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeSearchExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeSearchExtractor.java\nindex ca56283d..06d83b24 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeSearchExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeSearchExtractor.java\n", "chunk": "@@ -351,232 +132,17 @@ public class YoutubeSearchExtractor extends SearchExtractor {\n         }\n     }\n \n-    private void collectMusicStreamsFrom(InfoItemsSearchCollector collector, JsonArray videos) {\n-        final TimeAgoParser timeAgoParser = getTimeAgoParser();\n-\n-        for (Object item : videos) {\n-            final JsonObject info = ((JsonObject) item).getObject(\"musicResponsiveListItemRenderer\");\n-            if (info != null) {\n-                final String searchType = getLinkHandler().getContentFilters().get(0);\n-                if (searchType.equals(MUSIC_SONGS) || searchType.equals(MUSIC_VIDEOS)) {\n-                    collector.commit(new YoutubeStreamInfoItemExtractor(info, timeAgoParser) {\n-                        @Override\n-                        public String getUrl() throws ParsingException {\n-                            String url = getUrlFromNavigationEndpoint(info.getObject(\"doubleTapCommand\"));\n-                            if (url != null && !url.isEmpty()) return url;\n-                            throw new ParsingException(\"Could not get url\");\n-                        }\n-\n-                        @Override\n-                        public String getName() throws ParsingException {\n-                            String name = getTextFromObject(info.getArray(\"flexColumns\").getObject(0)\n-                                    .getObject(\"musicResponsiveListItemFlexColumnRenderer\").getObject(\"text\"));\n-                            if (name != null && !name.isEmpty()) return name;\n-                            throw new ParsingException(\"Could not get name\");\n-                        }\n-\n-                        @Override\n-                        public long getDuration() throws ParsingException {\n-                            String duration = getTextFromObject(info.getArray(\"flexColumns\").getObject(3)\n-                                    .getObject(\"musicResponsiveListItemFlexColumnRenderer\").getObject(\"text\"));\n-                            if (duration != null && !duration.isEmpty())\n-                                return YoutubeParsingHelper.parseDurationString(duration);\n-                            throw new ParsingException(\"Could not get duration\");\n-                        }\n-\n-                        @Override\n-                        public String getUploaderName() throws ParsingException {\n-                            String name = getTextFromObject(info.getArray(\"flexColumns\").getObject(1)\n-                                    .getObject(\"musicResponsiveListItemFlexColumnRenderer\").getObject(\"text\"));\n-                            if (name != null && !name.isEmpty()) return name;\n-                            throw new ParsingException(\"Could not get uploader name\");\n-                        }\n-\n-                        @Override\n-                        public String getUploaderUrl() throws ParsingException {\n-                            String url = null;\n-\n-                            if (searchType.equals(MUSIC_VIDEOS)) {\n-                                JsonArray items = info.getObject(\"menu\").getObject(\"menuRenderer\").getArray(\"items\");\n-                                for (Object item : items) {\n-                                    JsonObject menuNavigationItemRenderer = ((JsonObject) item).getObject(\"menuNavigationItemRenderer\");\n-                                    if (menuNavigationItemRenderer != null && menuNavigationItemRenderer.getObject(\"icon\").getString(\"iconType\").equals(\"ARTIST\")) {\n-                                        url = getUrlFromNavigationEndpoint(menuNavigationItemRenderer.getObject(\"navigationEndpoint\"));\n-                                        break;\n-                                    }\n-                                }\n-                            } else {\n-                                JsonObject navigationEndpoint = info.getArray(\"flexColumns\")\n-                                        .getObject(1).getObject(\"musicResponsiveListItemFlexColumnRenderer\")\n-                                        .getObject(\"text\").getArray(\"runs\").getObject(0).getObject(\"navigationEndpoint\");\n-                                if (navigationEndpoint == null) return null;\n-                                url = getUrlFromNavigationEndpoint(navigationEndpoint);\n-                            }\n-\n-                            if (url != null && !url.isEmpty()) return url;\n-                            throw new ParsingException(\"Could not get uploader url\");\n-                        }\n-\n-                        @Override\n-                        public String getTextualUploadDate() {\n-                            return null;\n-                        }\n-\n-                        @Override\n-                        public DateWrapper getUploadDate() {\n-                            return null;\n-                        }\n \n-                        @Override\n-                        public long getViewCount() throws ParsingException {\n-                            if (searchType.equals(MUSIC_SONGS)) return -1;\n-                            String viewCount = getTextFromObject(info.getArray(\"flexColumns\").getObject(2)\n-                                    .getObject(\"musicResponsiveListItemFlexColumnRenderer\").getObject(\"text\"));\n-                            if (viewCount != null && !viewCount.isEmpty()) return Utils.mixedNumberWordToLong(viewCount);\n-                            throw new ParsingException(\"Could not get view count\");\n-                        }\n-\n-                        @Override\n-                        public String getThumbnailUrl() throws ParsingException {\n-                            try {\n-                                JsonArray thumbnails = info.getObject(\"thumbnail\").getObject(\"musicThumbnailRenderer\")\n-                                        .getObject(\"thumbnail\").getArray(\"thumbnails\");\n-                                // the last thumbnail is the one with the highest resolution\n-                                String url = thumbnails.getObject(thumbnails.size() - 1).getString(\"url\");\n-\n-                                return fixThumbnailUrl(url);\n-                            } catch (Exception e) {\n-                                throw new ParsingException(\"Could not get thumbnail url\", e);\n-                            }\n-                        }\n-                    });\n-                } else if (searchType.equals(MUSIC_ARTISTS)) {\n-                    collector.commit(new YoutubeChannelInfoItemExtractor(info) {\n-                        @Override\n-                        public String getThumbnailUrl() throws ParsingException {\n-                            try {\n-                                JsonArray thumbnails = info.getObject(\"thumbnail\").getObject(\"musicThumbnailRenderer\")\n-                                        .getObject(\"thumbnail\").getArray(\"thumbnails\");\n-                                // the last thumbnail is the one with the highest resolution\n-                                String url = thumbnails.getObject(thumbnails.size() - 1).getString(\"url\");\n-\n-                                return fixThumbnailUrl(url);\n-                            } catch (Exception e) {\n-                                throw new ParsingException(\"Could not get thumbnail url\", e);\n-                            }\n-                        }\n-\n-                        @Override\n-                        public String getName() throws ParsingException {\n-                            String name = getTextFromObject(info.getArray(\"flexColumns\").getObject(0)\n-                                    .getObject(\"musicResponsiveListItemFlexColumnRenderer\").getObject(\"text\"));\n-                            if (name != null && !name.isEmpty()) return name;\n-                            throw new ParsingException(\"Could not get name\");\n-                        }\n-\n-                        @Override\n-                        public String getUrl() throws ParsingException {\n-                            String url = getUrlFromNavigationEndpoint(info.getObject(\"navigationEndpoint\"));\n-                            if (url != null && !url.isEmpty()) return url;\n-                            throw new ParsingException(\"Could not get url\");\n-                        }\n-\n-                        @Override\n-                        public long getSubscriberCount() throws ParsingException {\n-                            String viewCount = getTextFromObject(info.getArray(\"flexColumns\").getObject(2)\n-                                    .getObject(\"musicResponsiveListItemFlexColumnRenderer\").getObject(\"text\"));\n-                            if (viewCount != null && !viewCount.isEmpty()) return Utils.mixedNumberWordToLong(viewCount);\n-                            throw new ParsingException(\"Could not get subscriber count\");\n-                        }\n-\n-                        @Override\n-                        public long getStreamCount() {\n-                            return -1;\n-                        }\n-\n-                        @Override\n-                        public String getDescription() {\n-                            return null;\n-                        }\n-                    });\n-                } else if (searchType.equals(MUSIC_ALBUMS) || searchType.equals(MUSIC_PLAYLISTS)) {\n-                    collector.commit(new YoutubePlaylistInfoItemExtractor(info) {\n-                        @Override\n-                        public String getThumbnailUrl() throws ParsingException {\n-                            try {\n-                                JsonArray thumbnails = info.getObject(\"thumbnail\").getObject(\"musicThumbnailRenderer\")\n-                                        .getObject(\"thumbnail\").getArray(\"thumbnails\");\n-                                // the last thumbnail is the one with the highest resolution\n-                                String url = thumbnails.getObject(thumbnails.size() - 1).getString(\"url\");\n-\n-                                return fixThumbnailUrl(url);\n-                            } catch (Exception e) {\n-                                throw new ParsingException(\"Could not get thumbnail url\", e);\n-                            }\n-                        }\n-\n-                        @Override\n-                        public String getName() throws ParsingException {\n-                            String name = getTextFromObject(info.getArray(\"flexColumns\").getObject(0)\n-                                    .getObject(\"musicResponsiveListItemFlexColumnRenderer\").getObject(\"text\"));\n-                            if (name != null && !name.isEmpty()) return name;\n-                            throw new ParsingException(\"Could not get name\");\n-                        }\n-\n-                        @Override\n-                        public String getUrl() throws ParsingException {\n-                            String url = getUrlFromNavigationEndpoint(info.getObject(\"doubleTapCommand\"));\n-                            if (url != null && !url.isEmpty()) return url;\n-                            throw new ParsingException(\"Could not get url\");\n-                        }\n-\n-                        @Override\n-                        public String getUploaderName() throws ParsingException {\n-                            String name;\n-                            if (searchType.equals(MUSIC_ALBUMS)) {\n-                                name = getTextFromObject(info.getArray(\"flexColumns\").getObject(2)\n-                                        .getObject(\"musicResponsiveListItemFlexColumnRenderer\").getObject(\"text\"));\n-                            } else {\n-                                name = getTextFromObject(info.getArray(\"flexColumns\").getObject(1)\n-                                        .getObject(\"musicResponsiveListItemFlexColumnRenderer\").getObject(\"text\"));\n-                            }\n-                            if (name != null && !name.isEmpty()) return name;\n-                            throw new ParsingException(\"Could not get uploader name\");\n-                        }\n-\n-                        @Override\n-                        public long getStreamCount() throws ParsingException {\n-                            if (searchType.equals(MUSIC_ALBUMS)) return ITEM_COUNT_UNKNOWN;\n-                            String count = getTextFromObject(info.getArray(\"flexColumns\").getObject(2)\n-                                    .getObject(\"musicResponsiveListItemFlexColumnRenderer\").getObject(\"text\"));\n-                            if (count != null && !count.isEmpty()) {\n-                                if (count.contains(\"100+\")) {\n-                                    return ITEM_COUNT_MORE_THAN_100;\n-                                } else {\n-                                    return Long.parseLong(Utils.removeNonDigitCharacters(count));\n-                                }\n-                            }\n-                            throw new ParsingException(\"Could not get count\");\n-                        }\n-                    });\n-                }\n-            }\n+    private String getNextPageUrlFrom(final JsonArray continuations) throws ParsingException {\n+        if (continuations == null) {\n+            return \"\";\n         }\n-    }\n \n-    private String getNextPageUrlFrom(JsonArray continuations) throws ParsingException, IOException, ReCaptchaException {\n-        if (continuations == null) return \"\";\n+        final JsonObject nextContinuationData = continuations.getObject(0).getObject(\"nextContinuationData\");\n+        final String continuation = nextContinuationData.getString(\"continuation\");\n+        final String clickTrackingParams = nextContinuationData.getString(\"clickTrackingParams\");\n \n-        JsonObject nextContinuationData = continuations.getObject(0).getObject(\"nextContinuationData\");\n-        String continuation = nextContinuationData.getString(\"continuation\");\n-        String clickTrackingParams = nextContinuationData.getString(\"clickTrackingParams\");\n-\n-        if (isMusicSearch()) {\n-            return \"https://music.youtube.com/youtubei/v1/search?ctoken=\" + continuation + \"&continuation=\" + continuation\n-                    + \"&itct=\" + clickTrackingParams + \"&alt=json&key=\" + YoutubeParsingHelper.getYoutubeMusicKeys()[0];\n-        } else {\n-            return getUrl() + \"&pbj=1&ctoken=\" + continuation + \"&continuation=\" + continuation\n-                    + \"&itct=\" + clickTrackingParams;\n-        }\n+        return getUrl() + \"&pbj=1&ctoken=\" + continuation + \"&continuation=\" + continuation\n+                + \"&itct=\" + clickTrackingParams;\n     }\n }\n", "next_change": null}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTMzMDYwMw==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/291#discussion_r401330603", "body": "This is not testing all available filters for YouTube Music, it should test all of them.", "bodyText": "This is not testing all available filters for YouTube Music, it should test all of them.", "bodyHTML": "<p dir=\"auto\">This is not testing all available filters for YouTube Music, it should test all of them.</p>", "author": "mauriciocolli", "createdAt": "2020-04-01T03:07:33Z", "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/youtube/search/YoutubeMusicSearchExtractorTest.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package org.schabi.newpipe.extractor.services.youtube.search;\n+\n+import org.junit.BeforeClass;\n+import org.schabi.newpipe.DownloaderTestImpl;\n+import org.schabi.newpipe.extractor.InfoItem;\n+import org.schabi.newpipe.extractor.NewPipe;\n+import org.schabi.newpipe.extractor.StreamingService;\n+import org.schabi.newpipe.extractor.search.SearchExtractor;\n+import org.schabi.newpipe.extractor.services.DefaultSearchExtractorTest;\n+import org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeSearchQueryHandlerFactory;\n+\n+import java.net.URLEncoder;\n+\n+import javax.annotation.Nullable;\n+\n+import static java.util.Collections.singletonList;\n+import static org.schabi.newpipe.extractor.ServiceList.YouTube;\n+\n+public class YoutubeMusicSearchExtractorTest {", "originalCommit": "f074829c6ec01f83ad4ad0fe5b0ab70dc83a5eaf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1762a527c9c9d6d552bbee6035d5a3f2397f3894", "changed_code": [{"header": "diff --git a/extractor/src/test/java/org/schabi/newpipe/extractor/services/youtube/search/YoutubeMusicSearchExtractorTest.java b/extractor/src/test/java/org/schabi/newpipe/extractor/services/youtube/search/YoutubeMusicSearchExtractorTest.java\ndeleted file mode 100644\nindex 689e6127..00000000\n--- a/extractor/src/test/java/org/schabi/newpipe/extractor/services/youtube/search/YoutubeMusicSearchExtractorTest.java\n+++ /dev/null\n", "chunk": "@@ -1,63 +0,0 @@\n-package org.schabi.newpipe.extractor.services.youtube.search;\n-\n-import org.junit.BeforeClass;\n-import org.schabi.newpipe.DownloaderTestImpl;\n-import org.schabi.newpipe.extractor.InfoItem;\n-import org.schabi.newpipe.extractor.NewPipe;\n-import org.schabi.newpipe.extractor.StreamingService;\n-import org.schabi.newpipe.extractor.search.SearchExtractor;\n-import org.schabi.newpipe.extractor.services.DefaultSearchExtractorTest;\n-import org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeSearchQueryHandlerFactory;\n-\n-import java.net.URLEncoder;\n-\n-import javax.annotation.Nullable;\n-\n-import static java.util.Collections.singletonList;\n-import static org.schabi.newpipe.extractor.ServiceList.YouTube;\n-\n-public class YoutubeMusicSearchExtractorTest {\n-    public static class MusicSongs extends DefaultSearchExtractorTest {\n-        private static SearchExtractor extractor;\n-        private static final String QUERY = \"mocromaniac\";\n-\n-        @BeforeClass\n-        public static void setUp() throws Exception {\n-            NewPipe.init(DownloaderTestImpl.getInstance());\n-            extractor = YouTube.getSearchExtractor(QUERY, singletonList(YoutubeSearchQueryHandlerFactory.MUSIC_SONGS), \"\");\n-            extractor.fetchPage();\n-        }\n-\n-        @Override public SearchExtractor extractor() { return extractor; }\n-        @Override public StreamingService expectedService() { return YouTube; }\n-        @Override public String expectedName() { return QUERY; }\n-        @Override public String expectedId() { return QUERY; }\n-        @Override public String expectedUrlContains() { return \"music.youtube.com/search?q=\" + QUERY; }\n-        @Override public String expectedOriginalUrlContains() { return \"music.youtube.com/search?q=\" + QUERY; }\n-        @Override public String expectedSearchString() { return QUERY; }\n-        @Nullable @Override public String expectedSearchSuggestion() { return null; }\n-        @Override public InfoItem.InfoType expectedInfoItemType() { return InfoItem.InfoType.STREAM; }\n-    }\n-\n-    public static class Suggestion extends DefaultSearchExtractorTest {\n-        private static SearchExtractor extractor;\n-        private static final String QUERY = \"megaman x3\";\n-\n-        @BeforeClass\n-        public static void setUp() throws Exception {\n-            NewPipe.init(DownloaderTestImpl.getInstance());\n-            extractor = YouTube.getSearchExtractor(QUERY, singletonList(YoutubeSearchQueryHandlerFactory.MUSIC_SONGS), \"\");\n-            extractor.fetchPage();\n-        }\n-\n-        @Override public SearchExtractor extractor() { return extractor; }\n-        @Override public StreamingService expectedService() { return YouTube; }\n-        @Override public String expectedName() { return QUERY; }\n-        @Override public String expectedId() { return QUERY; }\n-        @Override public String expectedUrlContains() { return \"music.youtube.com/search?q=\" + URLEncoder.encode(QUERY); }\n-        @Override public String expectedOriginalUrlContains() { return \"music.youtube.com/search?q=\" + URLEncoder.encode(QUERY); }\n-        @Override public String expectedSearchString() { return QUERY; }\n-        @Nullable @Override public String expectedSearchSuggestion() { return \"mega man x3\"; }\n-        @Override public InfoItem.InfoType expectedInfoItemType() { return InfoItem.InfoType.STREAM; }\n-    }\n-}\n", "next_change": {"commit": "cf0f2aff3e8d7dc539ff662a006329342dd6d55a", "changed_code": [{"header": "diff --git a/extractor/src/test/java/org/schabi/newpipe/extractor/services/youtube/search/YoutubeMusicSearchExtractorTest.java b/extractor/src/test/java/org/schabi/newpipe/extractor/services/youtube/search/YoutubeMusicSearchExtractorTest.java\nnew file mode 100644\nindex 00000000..689e6127\n--- /dev/null\n+++ b/extractor/src/test/java/org/schabi/newpipe/extractor/services/youtube/search/YoutubeMusicSearchExtractorTest.java\n", "chunk": "@@ -0,0 +1,63 @@\n+package org.schabi.newpipe.extractor.services.youtube.search;\n+\n+import org.junit.BeforeClass;\n+import org.schabi.newpipe.DownloaderTestImpl;\n+import org.schabi.newpipe.extractor.InfoItem;\n+import org.schabi.newpipe.extractor.NewPipe;\n+import org.schabi.newpipe.extractor.StreamingService;\n+import org.schabi.newpipe.extractor.search.SearchExtractor;\n+import org.schabi.newpipe.extractor.services.DefaultSearchExtractorTest;\n+import org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeSearchQueryHandlerFactory;\n+\n+import java.net.URLEncoder;\n+\n+import javax.annotation.Nullable;\n+\n+import static java.util.Collections.singletonList;\n+import static org.schabi.newpipe.extractor.ServiceList.YouTube;\n+\n+public class YoutubeMusicSearchExtractorTest {\n+    public static class MusicSongs extends DefaultSearchExtractorTest {\n+        private static SearchExtractor extractor;\n+        private static final String QUERY = \"mocromaniac\";\n+\n+        @BeforeClass\n+        public static void setUp() throws Exception {\n+            NewPipe.init(DownloaderTestImpl.getInstance());\n+            extractor = YouTube.getSearchExtractor(QUERY, singletonList(YoutubeSearchQueryHandlerFactory.MUSIC_SONGS), \"\");\n+            extractor.fetchPage();\n+        }\n+\n+        @Override public SearchExtractor extractor() { return extractor; }\n+        @Override public StreamingService expectedService() { return YouTube; }\n+        @Override public String expectedName() { return QUERY; }\n+        @Override public String expectedId() { return QUERY; }\n+        @Override public String expectedUrlContains() { return \"music.youtube.com/search?q=\" + QUERY; }\n+        @Override public String expectedOriginalUrlContains() { return \"music.youtube.com/search?q=\" + QUERY; }\n+        @Override public String expectedSearchString() { return QUERY; }\n+        @Nullable @Override public String expectedSearchSuggestion() { return null; }\n+        @Override public InfoItem.InfoType expectedInfoItemType() { return InfoItem.InfoType.STREAM; }\n+    }\n+\n+    public static class Suggestion extends DefaultSearchExtractorTest {\n+        private static SearchExtractor extractor;\n+        private static final String QUERY = \"megaman x3\";\n+\n+        @BeforeClass\n+        public static void setUp() throws Exception {\n+            NewPipe.init(DownloaderTestImpl.getInstance());\n+            extractor = YouTube.getSearchExtractor(QUERY, singletonList(YoutubeSearchQueryHandlerFactory.MUSIC_SONGS), \"\");\n+            extractor.fetchPage();\n+        }\n+\n+        @Override public SearchExtractor extractor() { return extractor; }\n+        @Override public StreamingService expectedService() { return YouTube; }\n+        @Override public String expectedName() { return QUERY; }\n+        @Override public String expectedId() { return QUERY; }\n+        @Override public String expectedUrlContains() { return \"music.youtube.com/search?q=\" + URLEncoder.encode(QUERY); }\n+        @Override public String expectedOriginalUrlContains() { return \"music.youtube.com/search?q=\" + URLEncoder.encode(QUERY); }\n+        @Override public String expectedSearchString() { return QUERY; }\n+        @Nullable @Override public String expectedSearchSuggestion() { return \"mega man x3\"; }\n+        @Override public InfoItem.InfoType expectedInfoItemType() { return InfoItem.InfoType.STREAM; }\n+    }\n+}\n", "next_change": null}]}}]}}, {"oid": "1762a527c9c9d6d552bbee6035d5a3f2397f3894", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/1762a527c9c9d6d552bbee6035d5a3f2397f3894", "message": "Add support for YouTube Music search", "committedDate": "2020-04-01T08:30:51Z", "type": "commit"}, {"oid": "4ddbdf0aee23b67fb5dd2e806c174d960dbd7ffc", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/4ddbdf0aee23b67fb5dd2e806c174d960dbd7ffc", "message": "Disable artist search for now", "committedDate": "2020-04-01T08:30:51Z", "type": "commit"}, {"oid": "fb9b9691b76ddabd4cc3d5c02231fce28e6b8f17", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/fb9b9691b76ddabd4cc3d5c02231fce28e6b8f17", "message": "Improve getYoutubeMusicKeys()", "committedDate": "2020-04-01T08:30:51Z", "type": "commit"}, {"oid": "2b9b2a78e8128f1730456c83f3168a60580de4e9", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/2b9b2a78e8128f1730456c83f3168a60580de4e9", "message": "Handle 100+ items in playlist", "committedDate": "2020-04-01T08:30:51Z", "type": "commit"}, {"oid": "eb485244119c4338d32dc1468ae9dcf98b81058a", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/eb485244119c4338d32dc1468ae9dcf98b81058a", "message": "Add tests for YouTube Music search", "committedDate": "2020-04-01T08:30:51Z", "type": "commit"}, {"oid": "c852b13d5a395f696b6d5e93a07dcc3dd26b5497", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/c852b13d5a395f696b6d5e93a07dcc3dd26b5497", "message": "Add Referer header so that it also works with HttpsUrlConnection", "committedDate": "2020-04-01T08:30:51Z", "type": "commit"}, {"oid": "dc29d87962f0f9acd97d7d0bcad6afcc67b127fd", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/dc29d87962f0f9acd97d7d0bcad6afcc67b127fd", "message": "Extract YouTube search suggestions", "committedDate": "2020-04-01T08:30:51Z", "type": "commit"}, {"oid": "d58c0f230d27cf34c2bf044597c908c519f94a84", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/d58c0f230d27cf34c2bf044597c908c519f94a84", "message": "Improve code for YouTube Music search", "committedDate": "2020-04-01T08:30:51Z", "type": "commit"}, {"oid": "5a775a4bbe6fc1e06a29a3665c8e8c23234a0536", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/5a775a4bbe6fc1e06a29a3665c8e8c23234a0536", "message": "Use new way of specifying stream count", "committedDate": "2020-04-01T08:30:51Z", "type": "commit"}, {"oid": "dd434cca01d401ffcb236a2e2f3f042fabe0e272", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/dd434cca01d401ffcb236a2e2f3f042fabe0e272", "message": "Fix issue when there is no didYouMeanRenderer in itemSectionRenderer", "committedDate": "2020-04-01T08:30:51Z", "type": "commit"}, {"oid": "aa8cea47f3d6276ab592d18ff550ad9d6e63d81b", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/aa8cea47f3d6276ab592d18ff550ad9d6e63d81b", "message": "Refactor YouTube Music search tests", "committedDate": "2020-04-01T08:30:51Z", "type": "commit"}, {"oid": "cf0f2aff3e8d7dc539ff662a006329342dd6d55a", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/cf0f2aff3e8d7dc539ff662a006329342dd6d55a", "message": "Extract uploader url from certain YouTube Music videos", "committedDate": "2020-04-01T08:30:51Z", "type": "commit"}, {"oid": "ac15df45489178002c95db436a717319020a517a", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/ac15df45489178002c95db436a717319020a517a", "message": "Move YouTube Music search to its own class", "committedDate": "2020-04-01T08:30:51Z", "type": "commit"}, {"oid": "c7f7bd244278d52779b392500d148ccda9c1508c", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/c7f7bd244278d52779b392500d148ccda9c1508c", "message": "Fix error when YT Music videos has no uploader URL", "committedDate": "2020-04-01T08:30:51Z", "type": "commit"}, {"oid": "2af610e3e7942b1d28e304fa53cb4d263c8d6403", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/2af610e3e7942b1d28e304fa53cb4d263c8d6403", "message": "Add tests for other YT Music search types", "committedDate": "2020-04-01T08:30:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTYxNjY5Mg==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/291#discussion_r401616692", "body": "The only thing now are these duplicated checks from `YoutubeParsingHelper`, maybe we could extract them to yet another general response check in there?", "bodyText": "The only thing now are these duplicated checks from YoutubeParsingHelper, maybe we could extract them to yet another general response check in there?", "bodyHTML": "<p dir=\"auto\">The only thing now are these duplicated checks from <code>YoutubeParsingHelper</code>, maybe we could extract them to yet another general response check in there?</p>", "author": "mauriciocolli", "createdAt": "2020-04-01T13:31:28Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMusicSearchExtractor.java", "diffHunk": "@@ -0,0 +1,527 @@\n+package org.schabi.newpipe.extractor.services.youtube.extractors;\n+\n+import com.grack.nanojson.JsonArray;\n+import com.grack.nanojson.JsonObject;\n+import com.grack.nanojson.JsonParser;\n+import com.grack.nanojson.JsonParserException;\n+import com.grack.nanojson.JsonWriter;\n+\n+import org.schabi.newpipe.extractor.InfoItem;\n+import org.schabi.newpipe.extractor.StreamingService;\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.downloader.Response;\n+import org.schabi.newpipe.extractor.exceptions.ContentNotAvailableException;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.exceptions.ReCaptchaException;\n+import org.schabi.newpipe.extractor.linkhandler.SearchQueryHandler;\n+import org.schabi.newpipe.extractor.localization.DateWrapper;\n+import org.schabi.newpipe.extractor.localization.TimeAgoParser;\n+import org.schabi.newpipe.extractor.search.InfoItemsSearchCollector;\n+import org.schabi.newpipe.extractor.search.SearchExtractor;\n+import org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeParsingHelper;\n+import org.schabi.newpipe.extractor.utils.Utils;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.annotation.Nonnull;\n+\n+import static org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeParsingHelper.fixThumbnailUrl;\n+import static org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeParsingHelper.getTextFromObject;\n+import static org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeParsingHelper.getUrlFromNavigationEndpoint;\n+import static org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeSearchQueryHandlerFactory.MUSIC_ALBUMS;\n+import static org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeSearchQueryHandlerFactory.MUSIC_ARTISTS;\n+import static org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeSearchQueryHandlerFactory.MUSIC_PLAYLISTS;\n+import static org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeSearchQueryHandlerFactory.MUSIC_SONGS;\n+import static org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeSearchQueryHandlerFactory.MUSIC_VIDEOS;\n+\n+public class YoutubeMusicSearchExtractor extends SearchExtractor {\n+    private JsonObject initialData;\n+\n+    public YoutubeMusicSearchExtractor(final StreamingService service, final SearchQueryHandler linkHandler) {\n+        super(service, linkHandler);\n+    }\n+\n+    @Override\n+    public void onFetchPage(@Nonnull final Downloader downloader) throws IOException, ExtractionException {\n+        final String[] youtubeMusicKeys = YoutubeParsingHelper.getYoutubeMusicKeys();\n+\n+        final String url = \"https://music.youtube.com/youtubei/v1/search?alt=json&key=\" + youtubeMusicKeys[0];\n+\n+        final String params;\n+\n+        switch (getLinkHandler().getContentFilters().get(0)) {\n+            case MUSIC_SONGS:\n+                params = \"Eg-KAQwIARAAGAAgACgAMABqChAEEAUQAxAKEAk%3D\";\n+                break;\n+            case MUSIC_VIDEOS:\n+                params = \"Eg-KAQwIABABGAAgACgAMABqChAEEAUQAxAKEAk%3D\";\n+                break;\n+            case MUSIC_ALBUMS:\n+                params = \"Eg-KAQwIABAAGAEgACgAMABqChAEEAUQAxAKEAk%3D\";\n+                break;\n+            case MUSIC_PLAYLISTS:\n+                params = \"Eg-KAQwIABAAGAAgACgBMABqChAEEAUQAxAKEAk%3D\";\n+                break;\n+            case MUSIC_ARTISTS:\n+                params = \"Eg-KAQwIABAAGAAgASgAMABqChAEEAUQAxAKEAk%3D\";\n+                break;\n+            default:\n+                params = null;\n+                break;\n+        }\n+\n+        // @formatter:off\n+        byte[] json = JsonWriter.string()\n+            .object()\n+                .object(\"context\")\n+                    .object(\"client\")\n+                        .value(\"clientName\", \"WEB_REMIX\")\n+                        .value(\"clientVersion\", youtubeMusicKeys[2])\n+                        .value(\"hl\", \"en\")\n+                        .value(\"gl\", getExtractorContentCountry().getCountryCode())\n+                        .array(\"experimentIds\").end()\n+                        .value(\"experimentsToken\", \"\")\n+                        .value(\"utcOffsetMinutes\", 0)\n+                        .object(\"locationInfo\").end()\n+                        .object(\"musicAppInfo\").end()\n+                    .end()\n+                    .object(\"capabilities\").end()\n+                    .object(\"request\")\n+                        .array(\"internalExperimentFlags\").end()\n+                        .object(\"sessionIndex\").end()\n+                    .end()\n+                    .object(\"activePlayers\").end()\n+                    .object(\"user\")\n+                        .value(\"enableSafetyMode\", false)\n+                    .end()\n+                .end()\n+                .value(\"query\", getSearchString())\n+                .value(\"params\", params)\n+            .end().done().getBytes(\"UTF-8\");\n+        // @formatter:on\n+\n+        final Map<String, List<String>> headers = new HashMap<>();\n+        headers.put(\"X-YouTube-Client-Name\", Collections.singletonList(youtubeMusicKeys[1]));\n+        headers.put(\"X-YouTube-Client-Version\", Collections.singletonList(youtubeMusicKeys[2]));\n+        headers.put(\"Origin\", Collections.singletonList(\"https://music.youtube.com\"));\n+        headers.put(\"Referer\", Collections.singletonList(\"music.youtube.com\"));\n+        headers.put(\"Content-Type\", Collections.singletonList(\"application/json\"));\n+\n+        final Response response = getDownloader().post(url, headers, json);\n+\n+        if (response.responseCode() == 404) {\n+            throw new ContentNotAvailableException(\"Not found\" +\n+                    \" (\\\"\" + response.responseCode() + \" \" + response.responseMessage() + \"\\\")\");\n+        }\n+\n+        final String responseBody = response.responseBody();\n+        if (responseBody.length() < 50) { // ensure to have a valid response\n+            throw new ParsingException(\"JSON response is too short\");\n+        }\n+\n+        final String responseContentType = response.getHeader(\"Content-Type\");\n+        if (responseContentType != null && responseContentType.toLowerCase().contains(\"text/html\")) {\n+            throw new ParsingException(\"Got HTML document, expected JSON response\" +\n+                    \" (latest url was: \\\"\" + response.latestUrl() + \"\\\")\");\n+        }", "originalCommit": "2af610e3e7942b1d28e304fa53cb4d263c8d6403", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTYyODk2Mg==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/291#discussion_r401628962", "bodyText": "Yeah, I already thought it wasn't that clean.", "author": "wb9688", "createdAt": "2020-04-01T13:48:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTYxNjY5Mg=="}], "type": "inlineReview", "revised_code": {"commit": "8a9e137385c5e8dac62219ff40088ef5fac6ef95", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMusicSearchExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMusicSearchExtractor.java\nindex da4dc2b5..e4251ffc 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMusicSearchExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMusicSearchExtractor.java\n", "chunk": "@@ -112,23 +111,7 @@ public class YoutubeMusicSearchExtractor extends SearchExtractor {\n         headers.put(\"Referer\", Collections.singletonList(\"music.youtube.com\"));\n         headers.put(\"Content-Type\", Collections.singletonList(\"application/json\"));\n \n-        final Response response = getDownloader().post(url, headers, json);\n-\n-        if (response.responseCode() == 404) {\n-            throw new ContentNotAvailableException(\"Not found\" +\n-                    \" (\\\"\" + response.responseCode() + \" \" + response.responseMessage() + \"\\\")\");\n-        }\n-\n-        final String responseBody = response.responseBody();\n-        if (responseBody.length() < 50) { // ensure to have a valid response\n-            throw new ParsingException(\"JSON response is too short\");\n-        }\n-\n-        final String responseContentType = response.getHeader(\"Content-Type\");\n-        if (responseContentType != null && responseContentType.toLowerCase().contains(\"text/html\")) {\n-            throw new ParsingException(\"Got HTML document, expected JSON response\" +\n-                    \" (latest url was: \\\"\" + response.latestUrl() + \"\\\")\");\n-        }\n+        final String responseBody = getValidResponseBody(getDownloader().post(url, headers, json));\n \n         try {\n             initialData = JsonParser.object().from(responseBody);\n", "next_change": {"commit": "bce27a0e22ef124fc4f426c7b3512c40d79f43bb", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMusicSearchExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMusicSearchExtractor.java\nindex e4251ffc..51918e9c 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMusicSearchExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMusicSearchExtractor.java\n", "chunk": "@@ -111,7 +111,7 @@ public class YoutubeMusicSearchExtractor extends SearchExtractor {\n         headers.put(\"Referer\", Collections.singletonList(\"music.youtube.com\"));\n         headers.put(\"Content-Type\", Collections.singletonList(\"application/json\"));\n \n-        final String responseBody = getValidResponseBody(getDownloader().post(url, headers, json));\n+        final String responseBody = getValidJsonResponseBody(getDownloader().post(url, headers, json));\n \n         try {\n             initialData = JsonParser.object().from(responseBody);\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTYxNjgzNQ==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/291#discussion_r401616835", "body": "And here.", "bodyText": "And here.", "bodyHTML": "<p dir=\"auto\">And here.</p>", "author": "mauriciocolli", "createdAt": "2020-04-01T13:31:42Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMusicSearchExtractor.java", "diffHunk": "@@ -0,0 +1,527 @@\n+package org.schabi.newpipe.extractor.services.youtube.extractors;\n+\n+import com.grack.nanojson.JsonArray;\n+import com.grack.nanojson.JsonObject;\n+import com.grack.nanojson.JsonParser;\n+import com.grack.nanojson.JsonParserException;\n+import com.grack.nanojson.JsonWriter;\n+\n+import org.schabi.newpipe.extractor.InfoItem;\n+import org.schabi.newpipe.extractor.StreamingService;\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.downloader.Response;\n+import org.schabi.newpipe.extractor.exceptions.ContentNotAvailableException;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.exceptions.ReCaptchaException;\n+import org.schabi.newpipe.extractor.linkhandler.SearchQueryHandler;\n+import org.schabi.newpipe.extractor.localization.DateWrapper;\n+import org.schabi.newpipe.extractor.localization.TimeAgoParser;\n+import org.schabi.newpipe.extractor.search.InfoItemsSearchCollector;\n+import org.schabi.newpipe.extractor.search.SearchExtractor;\n+import org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeParsingHelper;\n+import org.schabi.newpipe.extractor.utils.Utils;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.annotation.Nonnull;\n+\n+import static org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeParsingHelper.fixThumbnailUrl;\n+import static org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeParsingHelper.getTextFromObject;\n+import static org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeParsingHelper.getUrlFromNavigationEndpoint;\n+import static org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeSearchQueryHandlerFactory.MUSIC_ALBUMS;\n+import static org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeSearchQueryHandlerFactory.MUSIC_ARTISTS;\n+import static org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeSearchQueryHandlerFactory.MUSIC_PLAYLISTS;\n+import static org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeSearchQueryHandlerFactory.MUSIC_SONGS;\n+import static org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeSearchQueryHandlerFactory.MUSIC_VIDEOS;\n+\n+public class YoutubeMusicSearchExtractor extends SearchExtractor {\n+    private JsonObject initialData;\n+\n+    public YoutubeMusicSearchExtractor(final StreamingService service, final SearchQueryHandler linkHandler) {\n+        super(service, linkHandler);\n+    }\n+\n+    @Override\n+    public void onFetchPage(@Nonnull final Downloader downloader) throws IOException, ExtractionException {\n+        final String[] youtubeMusicKeys = YoutubeParsingHelper.getYoutubeMusicKeys();\n+\n+        final String url = \"https://music.youtube.com/youtubei/v1/search?alt=json&key=\" + youtubeMusicKeys[0];\n+\n+        final String params;\n+\n+        switch (getLinkHandler().getContentFilters().get(0)) {\n+            case MUSIC_SONGS:\n+                params = \"Eg-KAQwIARAAGAAgACgAMABqChAEEAUQAxAKEAk%3D\";\n+                break;\n+            case MUSIC_VIDEOS:\n+                params = \"Eg-KAQwIABABGAAgACgAMABqChAEEAUQAxAKEAk%3D\";\n+                break;\n+            case MUSIC_ALBUMS:\n+                params = \"Eg-KAQwIABAAGAEgACgAMABqChAEEAUQAxAKEAk%3D\";\n+                break;\n+            case MUSIC_PLAYLISTS:\n+                params = \"Eg-KAQwIABAAGAAgACgBMABqChAEEAUQAxAKEAk%3D\";\n+                break;\n+            case MUSIC_ARTISTS:\n+                params = \"Eg-KAQwIABAAGAAgASgAMABqChAEEAUQAxAKEAk%3D\";\n+                break;\n+            default:\n+                params = null;\n+                break;\n+        }\n+\n+        // @formatter:off\n+        byte[] json = JsonWriter.string()\n+            .object()\n+                .object(\"context\")\n+                    .object(\"client\")\n+                        .value(\"clientName\", \"WEB_REMIX\")\n+                        .value(\"clientVersion\", youtubeMusicKeys[2])\n+                        .value(\"hl\", \"en\")\n+                        .value(\"gl\", getExtractorContentCountry().getCountryCode())\n+                        .array(\"experimentIds\").end()\n+                        .value(\"experimentsToken\", \"\")\n+                        .value(\"utcOffsetMinutes\", 0)\n+                        .object(\"locationInfo\").end()\n+                        .object(\"musicAppInfo\").end()\n+                    .end()\n+                    .object(\"capabilities\").end()\n+                    .object(\"request\")\n+                        .array(\"internalExperimentFlags\").end()\n+                        .object(\"sessionIndex\").end()\n+                    .end()\n+                    .object(\"activePlayers\").end()\n+                    .object(\"user\")\n+                        .value(\"enableSafetyMode\", false)\n+                    .end()\n+                .end()\n+                .value(\"query\", getSearchString())\n+                .value(\"params\", params)\n+            .end().done().getBytes(\"UTF-8\");\n+        // @formatter:on\n+\n+        final Map<String, List<String>> headers = new HashMap<>();\n+        headers.put(\"X-YouTube-Client-Name\", Collections.singletonList(youtubeMusicKeys[1]));\n+        headers.put(\"X-YouTube-Client-Version\", Collections.singletonList(youtubeMusicKeys[2]));\n+        headers.put(\"Origin\", Collections.singletonList(\"https://music.youtube.com\"));\n+        headers.put(\"Referer\", Collections.singletonList(\"music.youtube.com\"));\n+        headers.put(\"Content-Type\", Collections.singletonList(\"application/json\"));\n+\n+        final Response response = getDownloader().post(url, headers, json);\n+\n+        if (response.responseCode() == 404) {\n+            throw new ContentNotAvailableException(\"Not found\" +\n+                    \" (\\\"\" + response.responseCode() + \" \" + response.responseMessage() + \"\\\")\");\n+        }\n+\n+        final String responseBody = response.responseBody();\n+        if (responseBody.length() < 50) { // ensure to have a valid response\n+            throw new ParsingException(\"JSON response is too short\");\n+        }\n+\n+        final String responseContentType = response.getHeader(\"Content-Type\");\n+        if (responseContentType != null && responseContentType.toLowerCase().contains(\"text/html\")) {\n+            throw new ParsingException(\"Got HTML document, expected JSON response\" +\n+                    \" (latest url was: \\\"\" + response.latestUrl() + \"\\\")\");\n+        }\n+\n+        try {\n+            initialData = JsonParser.object().from(responseBody);\n+        } catch (JsonParserException e) {\n+            throw new ParsingException(\"Could not parse JSON\", e);\n+        }\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getUrl() throws ParsingException {\n+        return super.getUrl();\n+    }\n+\n+    @Override\n+    public String getSearchSuggestion() throws ParsingException {\n+        final JsonObject itemSectionRenderer = initialData.getObject(\"contents\").getObject(\"sectionListRenderer\")\n+                .getArray(\"contents\").getObject(0).getObject(\"itemSectionRenderer\");\n+        if (itemSectionRenderer == null) {\n+            return \"\";\n+        }\n+        final JsonObject didYouMeanRenderer = itemSectionRenderer.getArray(\"contents\")\n+                .getObject(0).getObject(\"didYouMeanRenderer\");\n+        if (didYouMeanRenderer == null) {\n+            return \"\";\n+        }\n+        return getTextFromObject(didYouMeanRenderer.getObject(\"correctedQuery\"));\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public InfoItemsPage<InfoItem> getInitialPage() throws ExtractionException, IOException {\n+        final InfoItemsSearchCollector collector = new InfoItemsSearchCollector(getServiceId());\n+\n+        final JsonArray contents = initialData.getObject(\"contents\").getObject(\"sectionListRenderer\").getArray(\"contents\");\n+\n+        for (Object content : contents) {\n+            if (((JsonObject) content).getObject(\"musicShelfRenderer\") != null) {\n+                collectMusicStreamsFrom(collector, ((JsonObject) content).getObject(\"musicShelfRenderer\").getArray(\"contents\"));\n+            }\n+        }\n+\n+        return new InfoItemsPage<>(collector, getNextPageUrl());\n+    }\n+\n+    @Override\n+    public String getNextPageUrl() throws ExtractionException, IOException {\n+        final JsonArray contents = initialData.getObject(\"contents\").getObject(\"sectionListRenderer\").getArray(\"contents\");\n+\n+        for (Object content : contents) {\n+            if (((JsonObject) content).getObject(\"musicShelfRenderer\") != null) {\n+                return getNextPageUrlFrom(((JsonObject) content).getObject(\"musicShelfRenderer\").getArray(\"continuations\"));\n+            }\n+        }\n+\n+        return \"\";\n+    }\n+\n+    @Override\n+    public InfoItemsPage<InfoItem> getPage(final String pageUrl) throws IOException, ExtractionException {\n+        if (pageUrl == null || pageUrl.isEmpty()) {\n+            throw new ExtractionException(new IllegalArgumentException(\"Page url is empty or null\"));\n+        }\n+\n+        final InfoItemsSearchCollector collector = new InfoItemsSearchCollector(getServiceId());\n+\n+        final String[] youtubeMusicKeys = YoutubeParsingHelper.getYoutubeMusicKeys();\n+\n+        // @formatter:off\n+        byte[] json = JsonWriter.string()\n+            .object()\n+                .object(\"context\")\n+                    .object(\"client\")\n+                        .value(\"clientName\", \"WEB_REMIX\")\n+                        .value(\"clientVersion\", youtubeMusicKeys[2])\n+                        .value(\"hl\", \"en\")\n+                        .value(\"gl\", getExtractorContentCountry().getCountryCode())\n+                        .array(\"experimentIds\").end()\n+                        .value(\"experimentsToken\", \"\")\n+                        .value(\"utcOffsetMinutes\", 0)\n+                        .object(\"locationInfo\").end()\n+                        .object(\"musicAppInfo\").end()\n+                    .end()\n+                    .object(\"capabilities\").end()\n+                    .object(\"request\")\n+                        .array(\"internalExperimentFlags\").end()\n+                        .object(\"sessionIndex\").end()\n+                    .end()\n+                    .object(\"activePlayers\").end()\n+                    .object(\"user\")\n+                        .value(\"enableSafetyMode\", false)\n+                    .end()\n+                .end()\n+            .end().done().getBytes(\"UTF-8\");\n+        // @formatter:on\n+\n+        final Map<String, List<String>> headers = new HashMap<>();\n+        headers.put(\"X-YouTube-Client-Name\", Collections.singletonList(youtubeMusicKeys[1]));\n+        headers.put(\"X-YouTube-Client-Version\", Collections.singletonList(youtubeMusicKeys[2]));\n+        headers.put(\"Origin\", Collections.singletonList(\"https://music.youtube.com\"));\n+        headers.put(\"Referer\", Collections.singletonList(\"music.youtube.com\"));\n+        headers.put(\"Content-Type\", Collections.singletonList(\"application/json\"));\n+\n+        final Response response = getDownloader().post(pageUrl, headers, json);\n+\n+        if (response.responseCode() == 404) {\n+            throw new ContentNotAvailableException(\"Not found\" +\n+                    \" (\\\"\" + response.responseCode() + \" \" + response.responseMessage() + \"\\\")\");\n+        }\n+\n+        final String responseBody = response.responseBody();\n+        if (responseBody.length() < 50) { // ensure to have a valid response\n+            throw new ParsingException(\"JSON response is too short\");\n+        }\n+\n+        final String responseContentType = response.getHeader(\"Content-Type\");\n+        if (responseContentType != null && responseContentType.toLowerCase().contains(\"text/html\")) {\n+            throw new ParsingException(\"Got HTML document, expected JSON response\" +\n+                    \" (latest url was: \\\"\" + response.latestUrl() + \"\\\")\");\n+        }", "originalCommit": "2af610e3e7942b1d28e304fa53cb4d263c8d6403", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8a9e137385c5e8dac62219ff40088ef5fac6ef95", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMusicSearchExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMusicSearchExtractor.java\nindex da4dc2b5..e4251ffc 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMusicSearchExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMusicSearchExtractor.java\n", "chunk": "@@ -232,23 +215,7 @@ public class YoutubeMusicSearchExtractor extends SearchExtractor {\n         headers.put(\"Referer\", Collections.singletonList(\"music.youtube.com\"));\n         headers.put(\"Content-Type\", Collections.singletonList(\"application/json\"));\n \n-        final Response response = getDownloader().post(pageUrl, headers, json);\n-\n-        if (response.responseCode() == 404) {\n-            throw new ContentNotAvailableException(\"Not found\" +\n-                    \" (\\\"\" + response.responseCode() + \" \" + response.responseMessage() + \"\\\")\");\n-        }\n-\n-        final String responseBody = response.responseBody();\n-        if (responseBody.length() < 50) { // ensure to have a valid response\n-            throw new ParsingException(\"JSON response is too short\");\n-        }\n-\n-        final String responseContentType = response.getHeader(\"Content-Type\");\n-        if (responseContentType != null && responseContentType.toLowerCase().contains(\"text/html\")) {\n-            throw new ParsingException(\"Got HTML document, expected JSON response\" +\n-                    \" (latest url was: \\\"\" + response.latestUrl() + \"\\\")\");\n-        }\n+        final String responseBody = getValidResponseBody(getDownloader().post(pageUrl, headers, json));\n \n         final JsonObject ajaxJson;\n         try {\n", "next_change": {"commit": "bce27a0e22ef124fc4f426c7b3512c40d79f43bb", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMusicSearchExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMusicSearchExtractor.java\nindex e4251ffc..51918e9c 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMusicSearchExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMusicSearchExtractor.java\n", "chunk": "@@ -215,7 +215,7 @@ public class YoutubeMusicSearchExtractor extends SearchExtractor {\n         headers.put(\"Referer\", Collections.singletonList(\"music.youtube.com\"));\n         headers.put(\"Content-Type\", Collections.singletonList(\"application/json\"));\n \n-        final String responseBody = getValidResponseBody(getDownloader().post(pageUrl, headers, json));\n+        final String responseBody = getValidJsonResponseBody(getDownloader().post(pageUrl, headers, json));\n \n         final JsonObject ajaxJson;\n         try {\n", "next_change": null}]}}]}}, {"oid": "8a9e137385c5e8dac62219ff40088ef5fac6ef95", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/8a9e137385c5e8dac62219ff40088ef5fac6ef95", "message": "Extract some code to getValidResponseBody()", "committedDate": "2020-04-01T14:01:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY0MzY4Nw==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/291#discussion_r401643687", "body": "Maybe `getValidJsonResponseBody` would be better to represent what is actually done. But meh, up to you to decide.", "bodyText": "Maybe getValidJsonResponseBody would be better to represent what is actually done. But meh, up to you to decide.", "bodyHTML": "<p dir=\"auto\">Maybe <code>getValidJsonResponseBody</code> would be better to represent what is actually done. But meh, up to you to decide.</p>", "author": "mauriciocolli", "createdAt": "2020-04-01T14:08:02Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/linkHandler/YoutubeParsingHelper.java", "diffHunk": "@@ -351,12 +428,8 @@ public static String fixThumbnailUrl(String thumbnailUrl) {\n         return thumbnailUrl;\n     }\n \n-    public static JsonArray getJsonResponse(String url, Localization localization) throws IOException, ExtractionException {\n-        Map<String, List<String>> headers = new HashMap<>();\n-        headers.put(\"X-YouTube-Client-Name\", Collections.singletonList(\"1\"));\n-        headers.put(\"X-YouTube-Client-Version\", Collections.singletonList(getClientVersion()));\n-        final Response response = getDownloader().get(url, headers, localization);\n-\n+    public static String getValidResponseBody(final Response response)", "originalCommit": "8a9e137385c5e8dac62219ff40088ef5fac6ef95", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA3NzU0Mg==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/291#discussion_r403077542", "bodyText": "I agree", "author": "TobiGr", "createdAt": "2020-04-03T15:14:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY0MzY4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "bce27a0e22ef124fc4f426c7b3512c40d79f43bb", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/linkHandler/YoutubeParsingHelper.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/linkHandler/YoutubeParsingHelper.java\nindex c639261b..54bfe95c 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/linkHandler/YoutubeParsingHelper.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/linkHandler/YoutubeParsingHelper.java\n", "chunk": "@@ -428,7 +428,7 @@ public class YoutubeParsingHelper {\n         return thumbnailUrl;\n     }\n \n-    public static String getValidResponseBody(final Response response)\n+    public static String getValidJsonResponseBody(final Response response)\n             throws ParsingException, MalformedURLException {\n         if (response.responseCode() == 404) {\n             throw new ContentNotAvailableException(\"Not found\" +\n", "next_change": null}]}}, {"oid": "bce27a0e22ef124fc4f426c7b3512c40d79f43bb", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/bce27a0e22ef124fc4f426c7b3512c40d79f43bb", "message": "Rename getValidResponseBody() to getValidJsonResponseBody()", "committedDate": "2020-04-03T15:23:18Z", "type": "commit"}]}