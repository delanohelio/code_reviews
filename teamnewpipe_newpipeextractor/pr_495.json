{"pr_number": 495, "pr_title": "[PeerTube] Implement sepia search", "pr_author": "B0pol", "pr_createdAt": "2020-12-23T14:10:12Z", "pr_url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/495", "timeline": [{"oid": "3ae924a7f18d5ee5b4aa0bd13d7179922cc094fa", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/3ae924a7f18d5ee5b4aa0bd13d7179922cc094fa", "message": "Implement sepia search", "committedDate": "2020-12-23T14:07:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDc2MjU4NQ==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/495#discussion_r550762585", "body": "JDoc please", "bodyText": "JDoc please", "bodyHTML": "<p dir=\"auto\">JDoc please</p>", "author": "TobiGr", "createdAt": "2021-01-01T12:09:56Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/PeertubeParsingHelper.java", "diffHunk": "@@ -63,6 +64,11 @@ public static Page getNextPage(final String prevPageUrl, final long total) {\n     }\n \n     public static void collectStreamsFrom(final InfoItemsCollector collector, final JsonObject json, final String baseUrl) throws ParsingException {\n+        collectStreamsFrom(collector, json, baseUrl, false);\n+    }\n+\n+    // sepia: if we should use PeertubeSepiaStreamInfoItemExtractor\n+    public static void collectStreamsFrom(final InfoItemsCollector collector, final JsonObject json, final String baseUrl, boolean sepia) throws ParsingException {", "originalCommit": "3ae924a7f18d5ee5b4aa0bd13d7179922cc094fa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDc2Mjc5MQ==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/495#discussion_r550762791", "body": "```suggestion\r\n    protected void setBaseUrl(final String baseUrl) {\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void setBaseUrl(final String baseUrl) {\n          \n          \n            \n                protected void setBaseUrl(final String baseUrl) {", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k x x-first x-last\">public</span> <span class=\"pl-k\">void</span> setBaseUrl(<span class=\"pl-k\">final</span> <span class=\"pl-smi\">String</span> baseUrl) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k x x-first x-last\">protected</span> <span class=\"pl-k\">void</span> setBaseUrl(<span class=\"pl-k\">final</span> <span class=\"pl-smi\">String</span> baseUrl) {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "TobiGr", "createdAt": "2021-01-01T12:13:17Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeStreamInfoItemExtractor.java", "diffHunk": "@@ -84,4 +84,8 @@ public StreamType getStreamType() {\n     public long getDuration() {\n         return item.getLong(\"duration\");\n     }\n+\n+    public void setBaseUrl(final String baseUrl) {", "originalCommit": "3ae924a7f18d5ee5b4aa0bd13d7179922cc094fa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDc2MzM1MA==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/495#discussion_r550763350", "body": "Why only `startsWith(\"sepia_\")` and not `equals(SEPIA_VIDEOS)`?", "bodyText": "Why only startsWith(\"sepia_\") and not equals(SEPIA_VIDEOS)?", "bodyHTML": "<p dir=\"auto\">Why only <code>startsWith(\"sepia_\")</code> and not <code>equals(SEPIA_VIDEOS)</code>?</p>", "author": "TobiGr", "createdAt": "2021-01-01T12:20:11Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/PeertubeService.java", "diffHunk": "@@ -59,7 +61,12 @@ public ListLinkHandlerFactory getCommentsLHFactory() {\n \n     @Override\n     public SearchExtractor getSearchExtractor(SearchQueryHandler queryHandler) {\n-        return new PeertubeSearchExtractor(this, queryHandler);\n+        final List<String> contentFilters = queryHandler.getContentFilters();\n+        boolean external = false;\n+        if (contentFilters.size() > 0 && contentFilters.get(0).startsWith(\"sepia_\")) {", "originalCommit": "3ae924a7f18d5ee5b4aa0bd13d7179922cc094fa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDc3MDA0MA==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/495#discussion_r550770040", "bodyText": "I used the same convention as YoutubeMusicSearchExtractor, i.e. filters start with music_ when using MusicSearchExtractor", "author": "B0pol", "createdAt": "2021-01-01T13:46:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDc2MzM1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDc2MzM3Ng==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/495#discussion_r550763376", "body": "same question as above", "bodyText": "same question as above", "bodyHTML": "<p dir=\"auto\">same question as above</p>", "author": "TobiGr", "createdAt": "2021-01-01T12:20:42Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/linkHandler/PeertubeSearchQueryHandlerFactory.java", "diffHunk": "@@ -20,7 +22,12 @@ public static PeertubeSearchQueryHandlerFactory getInstance() {\n \n     @Override\n     public String getUrl(String searchString, List<String> contentFilters, String sortFilter) throws ParsingException {\n-        String baseUrl = ServiceList.PeerTube.getBaseUrl();\n+        String baseUrl;\n+        if (contentFilters.size() > 0 && contentFilters.get(0).startsWith(\"sepia_\")) {", "originalCommit": "3ae924a7f18d5ee5b4aa0bd13d7179922cc094fa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDc2OTkxOQ==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/495#discussion_r550769919", "bodyText": "because if we implement other search filters (e.g. channels), it will not change, the baseUrl with sepia filters will still be sepiasearch.org (by default, unless another baseUrl for another index is provided)", "author": "B0pol", "createdAt": "2021-01-01T13:45:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDc2MzM3Ng=="}], "type": "inlineReview"}, {"oid": "0e45c25ea93101b86dc5cbc2b3fd46bf37d690a8", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/0e45c25ea93101b86dc5cbc2b3fd46bf37d690a8", "message": "Update extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeStreamInfoItemExtractor.java\n\nCo-authored-by: Tobias Groza <TobiGr@users.noreply.github.com>", "committedDate": "2021-01-01T13:20:47Z", "type": "commit"}, {"oid": "0bcea9c2cd49889f1a748c6e2a0328af0b083756", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/0bcea9c2cd49889f1a748c6e2a0328af0b083756", "message": "add JDoc", "committedDate": "2021-01-01T13:37:32Z", "type": "commit"}]}