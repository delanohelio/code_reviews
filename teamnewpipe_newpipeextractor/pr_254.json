{"pr_number": 254, "pr_title": "Improve code formatting and optimize imports", "pr_createdAt": "2020-02-08T23:01:29Z", "pr_url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/254", "merge_commit": "4bc5b8d33f4cf52925a02184870225fac490001a", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgxNTE4Ng==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/254#discussion_r376815186", "body": "below:\r\n// -2 because well the testing system will then know its the regex that failed :/\r\nwill consequently know that the regex failed", "bodyText": "below:\n// -2 because well the testing system will then know its the regex that failed :/\nwill consequently know that the regex failed", "bodyHTML": "<p dir=\"auto\">below:<br>\n// -2 because well the testing system will then know its the regex that failed :/<br>\nwill consequently know that the regex failed</p>", "author": "B0pol", "createdAt": "2020-02-09T21:03:36Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java", "diffHunk": "@@ -302,6 +325,7 @@ public StreamExtractor(StreamingService service, LinkHandler linkHandler) {\n     /**\n      * Override this function if the format of time stamp in the url is not the same format as that form youtube.\n      * Honestly I don't even know the time stamp fromat of youtube.\n+     *\n      * @param regexPattern\n      * @return the sime stamp/seek for the video in seconds\n      * @throws ParsingException", "originalCommit": "4c056ead321bd6b094ac44ed678286d05dbc95f9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjkyODA2Nw==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/254#discussion_r376928067", "bodyText": "I don't understand what you mean. Can you explain in more detail please?", "author": "TobiGr", "createdAt": "2020-02-10T08:50:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgxNTE4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjkyOTQ1Mg==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/254#discussion_r376929452", "bodyText": "Below this line there is a comment\n// -2 because well the testing system will then know its the regex that failed\nI suggest to reword it to\n// -2 because the testing system will consequently know that the regex failed", "author": "B0pol", "createdAt": "2020-02-10T08:53:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgxNTE4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTgyNzEwMg==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/254#discussion_r379827102", "bodyText": "Done", "author": "TobiGr", "createdAt": "2020-02-15T11:52:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgxNTE4Ng=="}], "type": "inlineReview", "revised_code": {"commit": "6822574588cde36580cfd564363dc632e0f7446a", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\nindex 587101cf..4a3cdff4 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n", "chunk": "@@ -324,10 +324,10 @@ public abstract class StreamExtractor extends Extractor {\n \n     /**\n      * Override this function if the format of time stamp in the url is not the same format as that form youtube.\n-     * Honestly I don't even know the time stamp fromat of youtube.\n+     * Honestly I don't even know the time stamp format of YouTube.\n      *\n      * @param regexPattern\n-     * @return the sime stamp/seek for the video in seconds\n+     * @return the time stamp/seek for the video in seconds\n      * @throws ParsingException\n      */\n     protected long getTimestampSeconds(String regexPattern) throws ParsingException {\n", "next_change": {"commit": "a129c65c63ee95462239b9681bf14c1562abfe07", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\nindex 4a3cdff4..78a5fbf3 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n", "chunk": "@@ -335,10 +335,10 @@ public abstract class StreamExtractor extends Extractor {\n         try {\n             timeStamp = Parser.matchGroup1(regexPattern, getOriginalUrl());\n         } catch (Parser.RegexException e) {\n-            // catch this instantly since an url does not necessarily have to have a time stamp\n+            // catch this instantly since a url does not necessarily have a timestamp\n \n-            // -2 because well the testing system will then know its the regex that failed :/\n-            // not good i know\n+            // -2 because the testing system will consequently know that the regex failed\n+            // not good, I know\n             return -2;\n         }\n \n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgxODg0NQ==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/254#discussion_r376818845", "body": "```suggestion\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // TODO Auto-generated constructor stub", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"><span class=\"x x-first\">        </span><span class=\"pl-c\"><span class=\"pl-c x\">//</span><span class=\"x x-last\"> TODO Auto-generated constructor stub</span></span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "B0pol", "createdAt": "2020-02-09T21:52:23Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/comments/CommentsInfo.java", "diffHunk": "@@ -10,20 +8,22 @@\n import org.schabi.newpipe.extractor.linkhandler.ListLinkHandler;\n import org.schabi.newpipe.extractor.utils.ExtractorHelper;\n \n-public class CommentsInfo extends ListInfo<CommentsInfoItem>{\n+import java.io.IOException;\n+\n+public class CommentsInfo extends ListInfo<CommentsInfoItem> {\n+\n+    private CommentsInfo(int serviceId, ListLinkHandler listUrlIdHandler, String name) {\n+        super(serviceId, listUrlIdHandler, name);\n+        // TODO Auto-generated constructor stub", "originalCommit": "4c056ead321bd6b094ac44ed678286d05dbc95f9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6822574588cde36580cfd564363dc632e0f7446a", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/comments/CommentsInfo.java b/extractor/src/main/java/org/schabi/newpipe/extractor/comments/CommentsInfo.java\nindex d5f4c434..e07c6746 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/comments/CommentsInfo.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/comments/CommentsInfo.java\n", "chunk": "@@ -14,7 +14,6 @@ public class CommentsInfo extends ListInfo<CommentsInfoItem> {\n \n     private CommentsInfo(int serviceId, ListLinkHandler listUrlIdHandler, String name) {\n         super(serviceId, listUrlIdHandler, name);\n-        // TODO Auto-generated constructor stub\n     }\n \n     public static CommentsInfo getInfo(String url) throws IOException, ExtractionException {\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgxODg5MQ==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/254#discussion_r376818891", "body": "```suggestion\r\n     * For making ListLinkHandlerFactory compatible with LinkHandlerFactory we need to override this,\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * For makeing ListLinkHandlerFactory compatible with LinkHandlerFactory we need to override this,\n          \n          \n            \n                 * For making ListLinkHandlerFactory compatible with LinkHandlerFactory we need to override this,", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">     <span class=\"pl-k\">*</span> <span class=\"pl-smi\">For</span> <span class=\"x x-first x-last\">makeing</span> <span class=\"pl-smi\">ListLinkHandlerFactory</span> compatible with <span class=\"pl-smi\">LinkHandlerFactory</span> we need to override <span class=\"pl-c1\">this</span>,</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">     <span class=\"pl-k\">*</span> <span class=\"pl-smi\">For</span> <span class=\"x x-first x-last\">making</span> <span class=\"pl-smi\">ListLinkHandlerFactory</span> compatible with <span class=\"pl-smi\">LinkHandlerFactory</span> we need to override <span class=\"pl-c1\">this</span>,</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "B0pol", "createdAt": "2020-02-09T21:53:01Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/linkhandler/ListLinkHandlerFactory.java", "diffHunk": "@@ -53,18 +59,19 @@ public ListLinkHandler fromQuery(String id,\n         final String url = getUrl(id, contentFilters, sortFilter);\n         return new ListLinkHandler(url, url, id, contentFilters, sortFilter);\n     }\n-    \n+\n     public ListLinkHandler fromQuery(String id,\n                                      List<String> contentFilters,\n                                      String sortFilter, String baseUrl) throws ParsingException {\n         final String url = getUrl(id, contentFilters, sortFilter, baseUrl);\n         return new ListLinkHandler(url, url, id, contentFilters, sortFilter);\n     }\n \n-    \n+\n     /**\n      * For makeing ListLinkHandlerFactory compatible with LinkHandlerFactory we need to override this,", "originalCommit": "4c056ead321bd6b094ac44ed678286d05dbc95f9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6822574588cde36580cfd564363dc632e0f7446a", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/linkhandler/ListLinkHandlerFactory.java b/extractor/src/main/java/org/schabi/newpipe/extractor/linkhandler/ListLinkHandlerFactory.java\nindex 60e1db48..9ea478b0 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/linkhandler/ListLinkHandlerFactory.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/linkhandler/ListLinkHandlerFactory.java\n", "chunk": "@@ -69,7 +69,7 @@ public abstract class ListLinkHandlerFactory extends LinkHandlerFactory {\n \n \n     /**\n-     * For makeing ListLinkHandlerFactory compatible with LinkHandlerFactory we need to override this,\n+     * For making ListLinkHandlerFactory compatible with LinkHandlerFactory we need to override this,\n      * however it should not be overridden by the actual implementation.\n      *\n      * @param id\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgxODk0OA==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/254#discussion_r376818948", "body": "```suggestion\r\n     * It's not mandatory for NewPipe to handle the Url\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * It's not mandatorry for NewPipe to handle the Url\n          \n          \n            \n                 * It's not mandatory for NewPipe to handle the Url", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">     <span class=\"pl-k\">*</span> <span class=\"pl-smi\">It</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>s not <span class=\"x x-first x-last\">mandatorry</span> for NewPipe to handle the Url</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">     <span class=\"pl-k\">*</span> <span class=\"pl-smi\">It</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>s not <span class=\"x x-first x-last\">mandatory</span> for NewPipe to handle the Url</span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "B0pol", "createdAt": "2020-02-09T21:53:19Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/linkhandler/SearchQueryHandlerFactory.java", "diffHunk": "@@ -35,9 +40,12 @@ public SearchQueryHandler fromQuery(String querry) throws ParsingException {\n \n     /**\n      * It's not mandatorry for NewPipe to handle the Url", "originalCommit": "4c056ead321bd6b094ac44ed678286d05dbc95f9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6822574588cde36580cfd564363dc632e0f7446a", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/linkhandler/SearchQueryHandlerFactory.java b/extractor/src/main/java/org/schabi/newpipe/extractor/linkhandler/SearchQueryHandlerFactory.java\nindex 55c76b78..50977e20 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/linkhandler/SearchQueryHandlerFactory.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/linkhandler/SearchQueryHandlerFactory.java\n", "chunk": "@@ -39,7 +39,7 @@ public abstract class SearchQueryHandlerFactory extends ListLinkHandlerFactory {\n     }\n \n     /**\n-     * It's not mandatorry for NewPipe to handle the Url\n+     * It's not mandatory for NewPipe to handle the Url\n      *\n      * @param url\n      * @return\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgxOTA1Mg==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/254#discussion_r376819052", "body": "```suggestion\r\n        if (null == json) throw new ExtractionException(\"Unable to extract PeerTube channel data\");\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (null == json) throw new ExtractionException(\"Unable to extract peertube channel data\");\n          \n          \n            \n                    if (null == json) throw new ExtractionException(\"Unable to extract PeerTube channel data\");", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">if</span> (<span class=\"pl-c1\">null</span> <span class=\"pl-k\">==</span> json) <span class=\"pl-k\">throw</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">ExtractionException</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Unable to extract <span class=\"x x-first x-last\">peertube</span> channel data<span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">if</span> (<span class=\"pl-c1\">null</span> <span class=\"pl-k\">==</span> json) <span class=\"pl-k\">throw</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">ExtractionException</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Unable to extract <span class=\"x x-first x-last\">PeerTube</span> channel data<span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "B0pol", "createdAt": "2020-02-09T21:54:12Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeChannelExtractor.java", "diffHunk": "@@ -172,14 +171,14 @@ private void setInitialData(String responseBody) throws ExtractionException {\n         } catch (JsonParserException e) {\n             throw new ExtractionException(\"Unable to extract peertube channel data\", e);\n         }\n-        if(null == json) throw new ExtractionException(\"Unable to extract peertube channel data\");\n+        if (null == json) throw new ExtractionException(\"Unable to extract peertube channel data\");", "originalCommit": "4c056ead321bd6b094ac44ed678286d05dbc95f9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6822574588cde36580cfd564363dc632e0f7446a", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeChannelExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeChannelExtractor.java\nindex 4d1d00f5..6476be8b 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeChannelExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeChannelExtractor.java\n", "chunk": "@@ -171,7 +171,7 @@ public class PeertubeChannelExtractor extends ChannelExtractor {\n         } catch (JsonParserException e) {\n             throw new ExtractionException(\"Unable to extract peertube channel data\", e);\n         }\n-        if (null == json) throw new ExtractionException(\"Unable to extract peertube channel data\");\n+        if (null == json) throw new ExtractionException(\"Unable to extract PeerTube channel data\");\n     }\n \n     @Override\n", "next_change": {"commit": "a129c65c63ee95462239b9681bf14c1562abfe07", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeChannelExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeChannelExtractor.java\nindex 6476be8b..d53fb7ad 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeChannelExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeChannelExtractor.java\n", "chunk": "@@ -171,7 +171,7 @@ public class PeertubeChannelExtractor extends ChannelExtractor {\n         } catch (JsonParserException e) {\n             throw new ExtractionException(\"Unable to extract peertube channel data\", e);\n         }\n-        if (null == json) throw new ExtractionException(\"Unable to extract PeerTube channel data\");\n+        if (json == null) throw new ExtractionException(\"Unable to extract PeerTube channel data\");\n     }\n \n     @Override\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgxOTA3OA==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/254#discussion_r376819078", "body": "```suggestion\r\n            throw new ExtractionException(\"Unable to extract PeerTube channel data\");\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        throw new ExtractionException(\"Unable to extract peertube channel data\");\n          \n          \n            \n                        throw new ExtractionException(\"Unable to extract PeerTube channel data\");", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            <span class=\"pl-k\">throw</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">ExtractionException</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Unable to extract <span class=\"x x-first x-last\">peertube</span> channel data<span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            <span class=\"pl-k\">throw</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">ExtractionException</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Unable to extract <span class=\"x x-first x-last\">PeerTube</span> channel data<span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "B0pol", "createdAt": "2020-02-09T21:54:33Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeChannelExtractor.java", "diffHunk": "@@ -138,30 +137,30 @@ private String getNextPageUrl(String prevPageUrl) {\n         } catch (RegexException e) {\n             return \"\";\n         }\n-        if(StringUtil.isBlank(prevStart)) return \"\";\n+        if (StringUtil.isBlank(prevStart)) return \"\";\n         long nextStart = 0;\n         try {\n             nextStart = Long.valueOf(prevStart) + ITEMS_PER_PAGE;\n         } catch (NumberFormatException e) {\n             return \"\";\n         }\n-        \n-        if(nextStart >= total) {\n+\n+        if (nextStart >= total) {\n             return \"\";\n-        }else {\n+        } else {\n             return prevPageUrl.replace(START_KEY + \"=\" + prevStart, START_KEY + \"=\" + String.valueOf(nextStart));\n         }\n     }\n-    \n+\n     @Override\n     public void onFetchPage(Downloader downloader) throws IOException, ExtractionException {\n         Response response = downloader.get(getUrl());\n-        if(null != response && null != response.responseBody()) {\n+        if (null != response && null != response.responseBody()) {\n             setInitialData(response.responseBody());\n-        }else {\n+        } else {\n             throw new ExtractionException(\"Unable to extract peertube channel data\");", "originalCommit": "4c056ead321bd6b094ac44ed678286d05dbc95f9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6822574588cde36580cfd564363dc632e0f7446a", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeChannelExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeChannelExtractor.java\nindex 4d1d00f5..6476be8b 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeChannelExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeChannelExtractor.java\n", "chunk": "@@ -158,7 +158,7 @@ public class PeertubeChannelExtractor extends ChannelExtractor {\n         if (null != response && null != response.responseBody()) {\n             setInitialData(response.responseBody());\n         } else {\n-            throw new ExtractionException(\"Unable to extract peertube channel data\");\n+            throw new ExtractionException(\"Unable to extract PeerTube channel data\");\n         }\n \n         String pageUrl = getUrl() + \"/videos?\" + START_KEY + \"=0&\" + COUNT_KEY + \"=\" + ITEMS_PER_PAGE;\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgxOTA5Ng==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/254#discussion_r376819096", "body": "```suggestion\r\n            throw new ExtractionException(\"Unable to get PeerTube kiosk info\");\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        throw new ExtractionException(\"Unable to get peertube kiosk info\");\n          \n          \n            \n                        throw new ExtractionException(\"Unable to get PeerTube kiosk info\");", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            <span class=\"pl-k\">throw</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">ExtractionException</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Unable to get <span class=\"x x-first x-last\">peertube</span> kiosk info<span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            <span class=\"pl-k\">throw</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">ExtractionException</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Unable to get <span class=\"x x-first x-last\">PeerTube</span> kiosk info<span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "B0pol", "createdAt": "2020-02-09T21:54:49Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeChannelExtractor.java", "diffHunk": "@@ -110,26 +109,26 @@ public String getNextPageUrl() throws IOException, ExtractionException {\n     public InfoItemsPage<StreamInfoItem> getPage(String pageUrl) throws IOException, ExtractionException {\n         Response response = getDownloader().get(pageUrl);\n         JsonObject json = null;\n-        if(null != response && !StringUtil.isBlank(response.responseBody())) {\n+        if (null != response && !StringUtil.isBlank(response.responseBody())) {\n             try {\n                 json = JsonParser.object().from(response.responseBody());\n             } catch (Exception e) {\n                 throw new ParsingException(\"Could not parse json data for kiosk info\", e);\n             }\n         }\n-        \n+\n         StreamInfoItemsCollector collector = new StreamInfoItemsCollector(getServiceId());\n-        if(json != null) {\n+        if (json != null) {\n             PeertubeParsingHelper.validate(json);\n             Number number = JsonUtils.getNumber(json, \"total\");\n-            if(number != null) this.total = number.longValue();\n+            if (number != null) this.total = number.longValue();\n             collectStreamsFrom(collector, json, pageUrl);\n         } else {\n             throw new ExtractionException(\"Unable to get peertube kiosk info\");", "originalCommit": "4c056ead321bd6b094ac44ed678286d05dbc95f9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6822574588cde36580cfd564363dc632e0f7446a", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeChannelExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeChannelExtractor.java\nindex 4d1d00f5..6476be8b 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeChannelExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeChannelExtractor.java\n", "chunk": "@@ -124,7 +124,7 @@ public class PeertubeChannelExtractor extends ChannelExtractor {\n             if (number != null) this.total = number.longValue();\n             collectStreamsFrom(collector, json, pageUrl);\n         } else {\n-            throw new ExtractionException(\"Unable to get peertube kiosk info\");\n+            throw new ExtractionException(\"Unable to get PeerTube kiosk info\");\n         }\n         return new InfoItemsPage<>(collector, getNextPageUrl(pageUrl));\n     }\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgxOTEzMg==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/254#discussion_r376819132", "body": "```suggestion\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // TODO Auto-generated method stub", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"><span class=\"x x-first\">        </span><span class=\"pl-c\"><span class=\"pl-c x\">//</span><span class=\"x x-last\"> TODO Auto-generated method stub</span></span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "B0pol", "createdAt": "2020-02-09T21:55:22Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubePlaylistExtractor.java", "diffHunk": "@@ -74,7 +74,7 @@ public String getNextPageUrl() throws IOException, ExtractionException {\n     @Override\n     public void onFetchPage(Downloader downloader) throws IOException, ExtractionException {\n         // TODO Auto-generated method stub", "originalCommit": "4c056ead321bd6b094ac44ed678286d05dbc95f9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6822574588cde36580cfd564363dc632e0f7446a", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubePlaylistExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubePlaylistExtractor.java\nindex 81cd165d..1a96111a 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubePlaylistExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubePlaylistExtractor.java\n", "chunk": "@@ -73,7 +73,6 @@ public class PeertubePlaylistExtractor extends PlaylistExtractor {\n \n     @Override\n     public void onFetchPage(Downloader downloader) throws IOException, ExtractionException {\n-        // TODO Auto-generated method stub\n \n     }\n \n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgxOTE5MQ==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/254#discussion_r376819191", "body": "```suggestion\r\n            throw new ParsingException(\"Unable to extract kiosk info\", e);\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        throw new ParsingException(\"unable to extract kiosk info\", e);\n          \n          \n            \n                        throw new ParsingException(\"Unable to extract kiosk info\", e);", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            <span class=\"pl-k\">throw</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">ParsingException</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"x x-first x-last\">unable</span> to extract kiosk info<span class=\"pl-pds\">\"</span></span>, e);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            <span class=\"pl-k\">throw</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">ParsingException</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"x x-first x-last\">Unable</span> to extract kiosk info<span class=\"pl-pds\">\"</span></span>, e);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "B0pol", "createdAt": "2020-02-09T21:55:57Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeTrendingExtractor.java", "diffHunk": "@@ -49,19 +48,19 @@ private void collectStreamsFrom(StreamInfoItemsCollector collector, JsonObject j\n         JsonArray contents;\n         try {\n             contents = (JsonArray) JsonUtils.getValue(json, \"data\");\n-        }catch(Exception e) {\n+        } catch (Exception e) {\n             throw new ParsingException(\"unable to extract kiosk info\", e);", "originalCommit": "4c056ead321bd6b094ac44ed678286d05dbc95f9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6822574588cde36580cfd564363dc632e0f7446a", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeTrendingExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeTrendingExtractor.java\nindex e6c1a1b5..e4bc1dff 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeTrendingExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeTrendingExtractor.java\n", "chunk": "@@ -49,7 +49,7 @@ public class PeertubeTrendingExtractor extends KioskExtractor<StreamInfoItem> {\n         try {\n             contents = (JsonArray) JsonUtils.getValue(json, \"data\");\n         } catch (Exception e) {\n-            throw new ParsingException(\"unable to extract kiosk info\", e);\n+            throw new ParsingException(\"Unable to extract kiosk info\", e);\n         }\n \n         String baseUrl = getBaseUrl();\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgxOTI5NA==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/254#discussion_r376819294", "body": "```suggestion\r\n        // Whoever is willing to implement this should also implement this in the front end.\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // Whoever is willing to implement this should also implement this in the fornt end\n          \n          \n            \n                    // Whoever is willing to implement this should also implement this in the front end.", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-c\"><span class=\"pl-c\">//</span> Whoever is willing to implement this should also implement this in the <span class=\"x x-first x-last\">fornt</span> end</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-c\"><span class=\"pl-c\">//</span> Whoever is willing to implement this should also implement this in the <span class=\"x x-first x-last\">front</span> end<span class=\"x x-first x-last\">.</span></span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "B0pol", "createdAt": "2020-02-09T21:57:09Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java", "diffHunk": "@@ -68,7 +68,7 @@ public String getThumbnailUrl() throws ParsingException {\n     @Override\n     public String getBannerUrl() {\n         return \"\";      // Banner can't be handled by frontend right now.\n-                        // Whoever is willing to implement this should also implement this in the fornt end\n+        // Whoever is willing to implement this should also implement this in the fornt end", "originalCommit": "4c056ead321bd6b094ac44ed678286d05dbc95f9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6822574588cde36580cfd564363dc632e0f7446a", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\nindex 0f3f56e6..a03b1d5a 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n", "chunk": "@@ -68,7 +68,7 @@ public class YoutubePlaylistExtractor extends PlaylistExtractor {\n     @Override\n     public String getBannerUrl() {\n         return \"\";      // Banner can't be handled by frontend right now.\n-        // Whoever is willing to implement this should also implement this in the fornt end\n+        // Whoever is willing to implement this should also implement this in the front end.\n     }\n \n     @Override\n", "next_change": {"commit": "a129c65c63ee95462239b9681bf14c1562abfe07", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\nindex a03b1d5a..520bda80 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n", "chunk": "@@ -68,7 +68,7 @@ public class YoutubePlaylistExtractor extends PlaylistExtractor {\n     @Override\n     public String getBannerUrl() {\n         return \"\";      // Banner can't be handled by frontend right now.\n-        // Whoever is willing to implement this should also implement this in the front end.\n+        // Whoever is willing to implement this should also implement it in the frontend.\n     }\n \n     @Override\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgxOTM5Ng==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/254#discussion_r376819396", "body": "```suggestion\r\n     * The amount of likes a video/audio stream got.\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * The Amount of likes a video/audio stream got.\n          \n          \n            \n                 * The amount of likes a video/audio stream got.", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">     <span class=\"pl-k\">*</span> <span class=\"pl-smi\">The</span> <span class=\"pl-smi x x-first x-last\">Amount</span> of likes a video<span class=\"pl-k\">/</span>audio stream got.</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">     <span class=\"pl-k\">*</span> <span class=\"pl-smi\">The</span> <span class=\"x x-first x-last\">amount</span> of likes a video<span class=\"pl-k\">/</span>audio stream got.</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "B0pol", "createdAt": "2020-02-09T21:58:28Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java", "diffHunk": "@@ -125,6 +130,7 @@ public StreamExtractor(StreamingService service, LinkHandler linkHandler) {\n     /**\n      * The Amount of likes a video/audio stream got.", "originalCommit": "4c056ead321bd6b094ac44ed678286d05dbc95f9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6822574588cde36580cfd564363dc632e0f7446a", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\nindex 587101cf..4a3cdff4 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n", "chunk": "@@ -128,7 +128,7 @@ public abstract class StreamExtractor extends Extractor {\n     public abstract long getViewCount() throws ParsingException;\n \n     /**\n-     * The Amount of likes a video/audio stream got.\n+     * The amount of likes a video/audio stream got.\n      * If the current stream has no likes or its not available simply return -1\n      *\n      * @return the amount of likes the stream got\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgxOTQ0Ng==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/254#discussion_r376819446", "body": "```suggestion\r\n     * The amount of dislikes a video/audio stream got.\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * The Amount of dislikes a video/audio stream got.\n          \n          \n            \n                 * The amount of dislikes a video/audio stream got.", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">     <span class=\"pl-k\">*</span> <span class=\"pl-smi\">The</span> <span class=\"pl-smi x x-first x-last\">Amount</span> of dislikes a video<span class=\"pl-k\">/</span>audio stream got.</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">     <span class=\"pl-k\">*</span> <span class=\"pl-smi\">The</span> <span class=\"x x-first x-last\">amount</span> of dislikes a video<span class=\"pl-k\">/</span>audio stream got.</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "B0pol", "createdAt": "2020-02-09T21:59:15Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java", "diffHunk": "@@ -133,6 +139,7 @@ public StreamExtractor(StreamingService service, LinkHandler linkHandler) {\n     /**\n      * The Amount of dislikes a video/audio stream got.", "originalCommit": "4c056ead321bd6b094ac44ed678286d05dbc95f9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6822574588cde36580cfd564363dc632e0f7446a", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\nindex 587101cf..4a3cdff4 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n", "chunk": "@@ -137,7 +137,7 @@ public abstract class StreamExtractor extends Extractor {\n     public abstract long getLikeCount() throws ParsingException;\n \n     /**\n-     * The Amount of dislikes a video/audio stream got.\n+     * The amount of dislikes a video/audio stream got.\n      * If the current stream has no dislikes or its not available simply return -1\n      *\n      * @return the amount of likes the stream got\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgxOTQ4Nw==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/254#discussion_r376819487", "body": "```suggestion\r\n     * Should return the url of the next stream. NewPipe will automatically play\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * should return the url of the next stream. NewPipe will automatically play\n          \n          \n            \n                 * Should return the url of the next stream. NewPipe will automatically play", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">     <span class=\"pl-k\">*</span> <span class=\"x x-first x-last\">should</span> <span class=\"pl-k\">return</span> the url of the next stream. <span class=\"pl-smi\">NewPipe</span> will automatically play</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">     <span class=\"pl-k\">*</span> <span class=\"pl-smi x x-first x-last\">Should</span> <span class=\"pl-k\">return</span> the url of the next stream. <span class=\"pl-smi\">NewPipe</span> will automatically play</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "B0pol", "createdAt": "2020-02-09T21:59:42Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java", "diffHunk": "@@ -259,6 +279,7 @@ public StreamExtractor(StreamingService service, LinkHandler linkHandler) {\n      * should return the url of the next stream. NewPipe will automatically play", "originalCommit": "4c056ead321bd6b094ac44ed678286d05dbc95f9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6822574588cde36580cfd564363dc632e0f7446a", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\nindex 587101cf..4a3cdff4 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n", "chunk": "@@ -276,7 +276,7 @@ public abstract class StreamExtractor extends Extractor {\n     public abstract StreamType getStreamType() throws ParsingException;\n \n     /**\n-     * should return the url of the next stream. NewPipe will automatically play\n+     * Should return the url of the next stream. NewPipe will automatically play\n      * the next stream if the user wants that.\n      * If the next stream is is not available simply return null\n      *\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgxOTUyMA==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/254#discussion_r376819520", "body": "```suggestion\r\n     * If it is not available simply return null\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * If  is is not available simply return null\n          \n          \n            \n                 * If it is not available simply return null", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">     <span class=\"pl-k\">*</span> <span class=\"pl-smi\">If</span> <span class=\"x x-first x-last\"> is</span> is not available simply <span class=\"pl-k\">return</span> <span class=\"pl-c1\">null</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">     <span class=\"pl-k\">*</span> <span class=\"pl-smi\">If</span> <span class=\"x x-first x-last\">it</span> is not available simply <span class=\"pl-k\">return</span> <span class=\"pl-c1\">null</span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "B0pol", "createdAt": "2020-02-09T22:00:11Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java", "diffHunk": "@@ -271,6 +292,7 @@ public StreamExtractor(StreamingService service, LinkHandler linkHandler) {\n      * be disabled by the user later in the frontend.\n      * This list MUST NOT contain the next available video as this should be return through getNextStream()\n      * If  is is not available simply return null", "originalCommit": "4c056ead321bd6b094ac44ed678286d05dbc95f9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6822574588cde36580cfd564363dc632e0f7446a", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\nindex 587101cf..4a3cdff4 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n", "chunk": "@@ -291,7 +291,7 @@ public abstract class StreamExtractor extends Extractor {\n      * streams. If you don't like suggested streams you should implement them anyway since they can\n      * be disabled by the user later in the frontend.\n      * This list MUST NOT contain the next available video as this should be return through getNextStream()\n-     * If  is is not available simply return null\n+     * If it is not available simply return null\n      *\n      * @return a list of InfoItems showing the related videos/streams\n      * @throws IOException\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgxOTU3Mw==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/254#discussion_r376819573", "body": "```suggestion\r\n     * Honestly I don't even know the time stamp format of YouTube.\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Honestly I don't even know the time stamp fromat of youtube.\n          \n          \n            \n                 * Honestly I don't even know the time stamp format of YouTube.", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">     <span class=\"pl-k\">*</span> <span class=\"pl-smi\">Honestly</span> <span class=\"pl-smi\">I</span> don<span class=\"pl-s\"><span class=\"pl-pds\">'</span>t even know the time stamp <span class=\"x x-first x-last\">fromat</span> of <span class=\"x x-first x-last\">youtube</span>.</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">     <span class=\"pl-k\">*</span> <span class=\"pl-smi\">Honestly</span> <span class=\"pl-smi\">I</span> don<span class=\"pl-s\"><span class=\"pl-pds\">'</span>t even know the time stamp <span class=\"x x-first x-last\">format</span> of <span class=\"x x-first x-last\">YouTube</span>.</span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "B0pol", "createdAt": "2020-02-09T22:00:45Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java", "diffHunk": "@@ -302,6 +325,7 @@ public StreamExtractor(StreamingService service, LinkHandler linkHandler) {\n     /**\n      * Override this function if the format of time stamp in the url is not the same format as that form youtube.\n      * Honestly I don't even know the time stamp fromat of youtube.", "originalCommit": "4c056ead321bd6b094ac44ed678286d05dbc95f9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6822574588cde36580cfd564363dc632e0f7446a", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\nindex 587101cf..4a3cdff4 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n", "chunk": "@@ -324,10 +324,10 @@ public abstract class StreamExtractor extends Extractor {\n \n     /**\n      * Override this function if the format of time stamp in the url is not the same format as that form youtube.\n-     * Honestly I don't even know the time stamp fromat of youtube.\n+     * Honestly I don't even know the time stamp format of YouTube.\n      *\n      * @param regexPattern\n-     * @return the sime stamp/seek for the video in seconds\n+     * @return the time stamp/seek for the video in seconds\n      * @throws ParsingException\n      */\n     protected long getTimestampSeconds(String regexPattern) throws ParsingException {\n", "next_change": {"commit": "a129c65c63ee95462239b9681bf14c1562abfe07", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\nindex 4a3cdff4..78a5fbf3 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n", "chunk": "@@ -335,10 +335,10 @@ public abstract class StreamExtractor extends Extractor {\n         try {\n             timeStamp = Parser.matchGroup1(regexPattern, getOriginalUrl());\n         } catch (Parser.RegexException e) {\n-            // catch this instantly since an url does not necessarily have to have a time stamp\n+            // catch this instantly since a url does not necessarily have a timestamp\n \n-            // -2 because well the testing system will then know its the regex that failed :/\n-            // not good i know\n+            // -2 because the testing system will consequently know that the regex failed\n+            // not good, I know\n             return -2;\n         }\n \n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgxOTYwNA==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/254#discussion_r376819604", "body": "```suggestion\r\n     * @return the time stamp/seek for the video in seconds\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @return the sime stamp/seek for the video in seconds\n          \n          \n            \n                 * @return the time stamp/seek for the video in seconds", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">     <span class=\"pl-k\">*</span> <span class=\"pl-k\">@return</span> the <span class=\"x x-first x-last\">sime</span> stamp<span class=\"pl-k\">/</span>seek <span class=\"pl-k\">for</span> the video in seconds</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">     <span class=\"pl-k\">*</span> <span class=\"pl-k\">@return</span> the <span class=\"x x-first x-last\">time</span> stamp<span class=\"pl-k\">/</span>seek <span class=\"pl-k\">for</span> the video in seconds</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "B0pol", "createdAt": "2020-02-09T22:01:10Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java", "diffHunk": "@@ -302,6 +325,7 @@ public StreamExtractor(StreamingService service, LinkHandler linkHandler) {\n     /**\n      * Override this function if the format of time stamp in the url is not the same format as that form youtube.\n      * Honestly I don't even know the time stamp fromat of youtube.\n+     *\n      * @param regexPattern\n      * @return the sime stamp/seek for the video in seconds", "originalCommit": "4c056ead321bd6b094ac44ed678286d05dbc95f9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6822574588cde36580cfd564363dc632e0f7446a", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\nindex 587101cf..4a3cdff4 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n", "chunk": "@@ -324,10 +324,10 @@ public abstract class StreamExtractor extends Extractor {\n \n     /**\n      * Override this function if the format of time stamp in the url is not the same format as that form youtube.\n-     * Honestly I don't even know the time stamp fromat of youtube.\n+     * Honestly I don't even know the time stamp format of YouTube.\n      *\n      * @param regexPattern\n-     * @return the sime stamp/seek for the video in seconds\n+     * @return the time stamp/seek for the video in seconds\n      * @throws ParsingException\n      */\n     protected long getTimestampSeconds(String regexPattern) throws ParsingException {\n", "next_change": {"commit": "a129c65c63ee95462239b9681bf14c1562abfe07", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\nindex 4a3cdff4..78a5fbf3 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n", "chunk": "@@ -335,10 +335,10 @@ public abstract class StreamExtractor extends Extractor {\n         try {\n             timeStamp = Parser.matchGroup1(regexPattern, getOriginalUrl());\n         } catch (Parser.RegexException e) {\n-            // catch this instantly since an url does not necessarily have to have a time stamp\n+            // catch this instantly since a url does not necessarily have a timestamp\n \n-            // -2 because well the testing system will then know its the regex that failed :/\n-            // not good i know\n+            // -2 because the testing system will consequently know that the regex failed\n+            // not good, I know\n             return -2;\n         }\n \n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgxOTc2Ng==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/254#discussion_r376819766", "body": "```suggestion\r\n     * Get the media format by its id.\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Get the media format by it's id.\n          \n          \n            \n                 * Get the media format by its id.", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">     <span class=\"pl-k\">*</span> <span class=\"pl-smi\">Get</span> the media format by <span class=\"x x-first\">it</span><span class=\"pl-s\"><span class=\"pl-pds x\">'</span><span class=\"x x-last\">s</span> id.</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">     <span class=\"pl-k\">*</span> <span class=\"pl-smi\">Get</span> the media format by <span class=\"x x-first x-last\">its</span> id.</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "B0pol", "createdAt": "2020-02-09T22:03:37Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/MediaFormat.java", "diffHunk": "@@ -116,25 +116,27 @@ public static MediaFormat getFromMimeType(String mimeType) {\n \n     /**\n      * Get the media format by it's id.", "originalCommit": "4c056ead321bd6b094ac44ed678286d05dbc95f9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6822574588cde36580cfd564363dc632e0f7446a", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/MediaFormat.java b/extractor/src/main/java/org/schabi/newpipe/extractor/MediaFormat.java\nindex 0b6052f0..6936568a 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/MediaFormat.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/MediaFormat.java\n", "chunk": "@@ -115,7 +115,7 @@ public enum MediaFormat {\n     }\n \n     /**\n-     * Get the media format by it's id.\n+     * Get the media format by its id.\n      *\n      * @param id the id\n      * @return the id of the media format or null.\n", "next_change": null}]}}, {"oid": "030465b5d4d8c738a42cfc52bd1d78f54b0f6bd4", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/030465b5d4d8c738a42cfc52bd1d78f54b0f6bd4", "message": "Improve code formatting and optimise imports", "committedDate": "2020-02-15T12:36:54Z", "type": "commit"}, {"oid": "6822574588cde36580cfd564363dc632e0f7446a", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/6822574588cde36580cfd564363dc632e0f7446a", "message": "Fix typos\n\nCo-Authored-By: B0pol <bopol@e.email>", "committedDate": "2020-02-15T12:36:54Z", "type": "commit"}, {"oid": "0a4115286b46356b34bbcb2308261f86acd380c8", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/0a4115286b46356b34bbcb2308261f86acd380c8", "message": "Apply one suggestion", "committedDate": "2020-02-15T12:36:54Z", "type": "commit"}, {"oid": "0a4115286b46356b34bbcb2308261f86acd380c8", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/0a4115286b46356b34bbcb2308261f86acd380c8", "message": "Apply one suggestion", "committedDate": "2020-02-15T12:36:54Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg0NTIyMA==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/254#discussion_r379845220", "body": "```suggestion\r\n        if (llhf == null) {\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (null == llhf) {\n          \n          \n            \n                    if (llhf == null) {", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">if</span> (<span class=\"pl-c1 x x-first x-last\">null</span> <span class=\"pl-k\">==</span> <span class=\"x x-first x-last\">llhf</span>) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">if</span> (<span class=\"x x-first x-last\">llhf</span> <span class=\"pl-k\">==</span> <span class=\"pl-c1 x x-first x-last\">null</span>) {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "Stypox", "createdAt": "2020-02-15T17:43:17Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/StreamingService.java", "diffHunk": "@@ -269,7 +263,7 @@ public StreamExtractor getStreamExtractor(String url) throws ExtractionException\n \n     public CommentsExtractor getCommentsExtractor(String url) throws ExtractionException {\n         ListLinkHandlerFactory llhf = getCommentsLHFactory();\n-        if(null == llhf) {\n+        if (null == llhf) {", "originalCommit": "0a4115286b46356b34bbcb2308261f86acd380c8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a129c65c63ee95462239b9681bf14c1562abfe07", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/StreamingService.java b/extractor/src/main/java/org/schabi/newpipe/extractor/StreamingService.java\nindex 110efe04..e21b17f3 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/StreamingService.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/StreamingService.java\n", "chunk": "@@ -263,7 +263,7 @@ public abstract class StreamingService {\n \n     public CommentsExtractor getCommentsExtractor(String url) throws ExtractionException {\n         ListLinkHandlerFactory llhf = getCommentsLHFactory();\n-        if (null == llhf) {\n+        if (llhf == null) {\n             return null;\n         }\n         return getCommentsExtractor(llhf.fromUrl(url));\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTkyNjA3NA==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/254#discussion_r379926074", "body": "```suggestion\r\n        if (response == null || StringUtil.isBlank(response.responseBody())) {\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (null == response || StringUtil.isBlank(response.responseBody())) {\n          \n          \n            \n                    if (response == null || StringUtil.isBlank(response.responseBody())) {", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">if</span> (<span class=\"pl-c1 x x-first x-last\">null</span> <span class=\"pl-k\">==</span> <span class=\"x x-first x-last\">response</span> <span class=\"pl-k\">||</span> <span class=\"pl-smi\">StringUtil</span><span class=\"pl-k\">.</span>isBlank(response<span class=\"pl-k\">.</span>responseBody())) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">if</span> (<span class=\"x x-first x-last\">response</span> <span class=\"pl-k\">==</span> <span class=\"pl-c1 x x-first x-last\">null</span> <span class=\"pl-k\">||</span> <span class=\"pl-smi\">StringUtil</span><span class=\"pl-k\">.</span>isBlank(response<span class=\"pl-k\">.</span>responseBody())) {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "Stypox", "createdAt": "2020-02-16T19:14:47Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/PeertubeInstance.java", "diffHunk": "@@ -10,45 +11,43 @@\n import org.schabi.newpipe.extractor.exceptions.ReCaptchaException;\n import org.schabi.newpipe.extractor.utils.JsonUtils;\n \n-import com.grack.nanojson.JsonObject;\n-import com.grack.nanojson.JsonParser;\n-import com.grack.nanojson.JsonParserException;\n+import java.io.IOException;\n \n public class PeertubeInstance {\n-    \n+\n     private final String url;\n     private String name;\n     public static final PeertubeInstance defaultInstance = new PeertubeInstance(\"https://framatube.org\", \"FramaTube\");\n-    \n+\n     public PeertubeInstance(String url) {\n         this.url = url;\n         this.name = \"PeerTube\";\n     }\n-    \n-    public PeertubeInstance(String url , String name) {\n+\n+    public PeertubeInstance(String url, String name) {\n         this.url = url;\n         this.name = name;\n     }\n \n     public String getUrl() {\n         return url;\n     }\n-    \n+\n     public void fetchInstanceMetaData() throws Exception {\n         Downloader downloader = NewPipe.getDownloader();\n         Response response = null;\n-        \n+\n         try {\n             response = downloader.get(url + \"/api/v1/config\");\n         } catch (ReCaptchaException | IOException e) {\n             throw new Exception(\"unable to configure instance \" + url, e);\n         }\n-        \n-        if(null == response || StringUtil.isBlank(response.responseBody())) {\n+\n+        if (null == response || StringUtil.isBlank(response.responseBody())) {", "originalCommit": "0a4115286b46356b34bbcb2308261f86acd380c8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a129c65c63ee95462239b9681bf14c1562abfe07", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/PeertubeInstance.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/PeertubeInstance.java\nindex 17d08580..82b67539 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/PeertubeInstance.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/PeertubeInstance.java\n", "chunk": "@@ -43,7 +43,7 @@ public class PeertubeInstance {\n             throw new Exception(\"unable to configure instance \" + url, e);\n         }\n \n-        if (null == response || StringUtil.isBlank(response.responseBody())) {\n+        if (response == null || StringUtil.isBlank(response.responseBody())) {\n             throw new Exception(\"unable to configure instance \" + url);\n         }\n \n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTkyNjA4NA==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/254#discussion_r379926084", "body": "```suggestion\r\n        if (json == null) throw new ExtractionException(\"Unable to extract PeerTube channel data\");\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (null == json) throw new ExtractionException(\"Unable to extract PeerTube channel data\");\n          \n          \n            \n                    if (json == null) throw new ExtractionException(\"Unable to extract PeerTube channel data\");", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">if</span> (<span class=\"pl-c1 x x-first x-last\">null</span> <span class=\"pl-k\">==</span> <span class=\"x x-first x-last\">json</span>) <span class=\"pl-k\">throw</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">ExtractionException</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Unable to extract PeerTube channel data<span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">if</span> (<span class=\"x x-first x-last\">json</span> <span class=\"pl-k\">==</span> <span class=\"pl-c1 x x-first x-last\">null</span>) <span class=\"pl-k\">throw</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">ExtractionException</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Unable to extract PeerTube channel data<span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "Stypox", "createdAt": "2020-02-16T19:15:04Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeChannelExtractor.java", "diffHunk": "@@ -172,14 +171,14 @@ private void setInitialData(String responseBody) throws ExtractionException {\n         } catch (JsonParserException e) {\n             throw new ExtractionException(\"Unable to extract peertube channel data\", e);\n         }\n-        if(null == json) throw new ExtractionException(\"Unable to extract peertube channel data\");\n+        if (null == json) throw new ExtractionException(\"Unable to extract PeerTube channel data\");", "originalCommit": "0a4115286b46356b34bbcb2308261f86acd380c8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a129c65c63ee95462239b9681bf14c1562abfe07", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeChannelExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeChannelExtractor.java\nindex 6476be8b..d53fb7ad 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeChannelExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeChannelExtractor.java\n", "chunk": "@@ -171,7 +171,7 @@ public class PeertubeChannelExtractor extends ChannelExtractor {\n         } catch (JsonParserException e) {\n             throw new ExtractionException(\"Unable to extract peertube channel data\", e);\n         }\n-        if (null == json) throw new ExtractionException(\"Unable to extract PeerTube channel data\");\n+        if (json == null) throw new ExtractionException(\"Unable to extract PeerTube channel data\");\n     }\n \n     @Override\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTkyNjA5Nw==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/254#discussion_r379926097", "body": "```suggestion\r\n        if (title == null) {\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (null == title) {\n          \n          \n            \n                    if (title == null) {", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">if</span> (<span class=\"pl-c1 x x-first x-last\">null</span> <span class=\"pl-k\">==</span> <span class=\"x x-first x-last\">title</span>) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">if</span> (<span class=\"x x-first x-last\">title</span> <span class=\"pl-k\">==</span> <span class=\"pl-c1 x x-first x-last\">null</span>) {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "Stypox", "createdAt": "2020-02-16T19:15:22Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeCommentsExtractor.java", "diffHunk": "@@ -107,32 +108,32 @@ private String getNextPageUrl(String continuation) throws ParsingException {\n     }\n \n     private void collectCommentsFrom(CommentsInfoItemsCollector collector, JsonObject ajaxJson) throws ParsingException {\n-        \n+\n         JsonArray contents;\n         try {\n             contents = JsonUtils.getArray(ajaxJson, \"response.continuationContents.commentSectionContinuation.items\");\n-        }catch(Exception e) {\n+        } catch (Exception e) {\n             //no comments\n             return;\n         }\n         fetchTitle(contents);\n         List<Object> comments;\n         try {\n             comments = JsonUtils.getValues(contents, \"commentThreadRenderer.comment.commentRenderer\");\n-        }catch(Exception e) {\n+        } catch (Exception e) {\n             throw new ParsingException(\"unable to get parse youtube comments\", e);\n         }\n-        \n-        for(Object c: comments) {\n-            if(c instanceof JsonObject) {\n+\n+        for (Object c : comments) {\n+            if (c instanceof JsonObject) {\n                 CommentsInfoItemExtractor extractor = new YoutubeCommentsInfoItemExtractor((JsonObject) c, getUrl(), getTimeAgoParser());\n                 collector.commit(extractor);\n             }\n         }\n     }\n \n     private void fetchTitle(JsonArray contents) {\n-        if(null == title) {\n+        if (null == title) {", "originalCommit": "0a4115286b46356b34bbcb2308261f86acd380c8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a129c65c63ee95462239b9681bf14c1562abfe07", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeCommentsExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeCommentsExtractor.java\nindex bcacf7cf..78eb59f3 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeCommentsExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeCommentsExtractor.java\n", "chunk": "@@ -133,7 +133,7 @@ public class YoutubeCommentsExtractor extends CommentsExtractor {\n     }\n \n     private void fetchTitle(JsonArray contents) {\n-        if (null == title) {\n+        if (title == null) {\n             try {\n                 title = getYoutubeText(JsonUtils.getObject(contents.getObject(0), \"commentThreadRenderer.commentTargetTitle\"));\n             } catch (Exception e) {\n", "next_change": null}]}, "revised_code_in_main": {"commit": "4bc5b8d33f4cf52925a02184870225fac490001a", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeCommentsExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeCommentsExtractor.java\nindex bcacf7cf..78eb59f3 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeCommentsExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeCommentsExtractor.java\n", "chunk": "@@ -133,7 +133,7 @@ public class YoutubeCommentsExtractor extends CommentsExtractor {\n     }\n \n     private void fetchTitle(JsonArray contents) {\n-        if (null == title) {\n+        if (title == null) {\n             try {\n                 title = getYoutubeText(JsonUtils.getObject(contents.getObject(0), \"commentThreadRenderer.commentTargetTitle\"));\n             } catch (Exception e) {\n", "next_change": {"commit": "2564bcf39997cbab8b6e331088c3ee41076e5e00", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeCommentsExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeCommentsExtractor.java\nindex 78eb59f3..5a68501e 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeCommentsExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeCommentsExtractor.java\n", "chunk": "@@ -132,16 +130,6 @@ public class YoutubeCommentsExtractor extends CommentsExtractor {\n         }\n     }\n \n-    private void fetchTitle(JsonArray contents) {\n-        if (title == null) {\n-            try {\n-                title = getYoutubeText(JsonUtils.getObject(contents.getObject(0), \"commentThreadRenderer.commentTargetTitle\"));\n-            } catch (Exception e) {\n-                title = \"Youtube Comments\";\n-            }\n-        }\n-    }\n-\n     @Override\n     public void onFetchPage(@Nonnull Downloader downloader) throws IOException, ExtractionException {\n         final Map<String, List<String>> requestHeaders = new HashMap<>();\n", "next_change": {"commit": "4cc312086afc6d6772ba657ddf96c5f5b14f41bd", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeCommentsExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeCommentsExtractor.java\nindex 5a68501e..62d1eb97 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeCommentsExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeCommentsExtractor.java\n", "chunk": "@@ -135,16 +124,13 @@ public class YoutubeCommentsExtractor extends CommentsExtractor {\n         final Map<String, List<String>> requestHeaders = new HashMap<>();\n         requestHeaders.put(\"User-Agent\", singletonList(USER_AGENT));\n         final Response response = downloader.get(getUrl(), requestHeaders, getExtractorLocalization());\n-        String responseBody = response.responseBody();\n+        responseBody = response.responseBody();\n         ytClientVersion = findValue(responseBody, \"INNERTUBE_CONTEXT_CLIENT_VERSION\\\":\\\"\", \"\\\"\");\n         ytClientName = Parser.matchGroup1(YT_CLIENT_NAME_PATTERN, responseBody);\n-        String commentsTokenInside = findValue(responseBody, \"commentSectionRenderer\", \"}\");\n-        String commentsToken = findValue(commentsTokenInside, \"continuation\\\":\\\"\", \"\\\"\");\n-        initPage = getPage(getNextPageUrl(commentsToken));\n     }\n \n-    private String makeAjaxRequest(String siteUrl) throws IOException, ReCaptchaException {\n \n+    private String makeAjaxRequest(String siteUrl) throws IOException, ReCaptchaException {\n         Map<String, List<String>> requestHeaders = new HashMap<>();\n         requestHeaders.put(\"Accept\", singletonList(\"*/*\"));\n         requestHeaders.put(\"User-Agent\", singletonList(USER_AGENT));\n", "next_change": {"commit": "688a1c316bb40c3536c2a003a07ad7e8462eef26", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeCommentsExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeCommentsExtractor.java\nindex 62d1eb97..a4b22524 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeCommentsExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeCommentsExtractor.java\n", "chunk": "@@ -16,122 +15,180 @@ import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n import org.schabi.newpipe.extractor.exceptions.ParsingException;\n import org.schabi.newpipe.extractor.exceptions.ReCaptchaException;\n import org.schabi.newpipe.extractor.linkhandler.ListLinkHandler;\n+import org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper;\n import org.schabi.newpipe.extractor.utils.JsonUtils;\n import org.schabi.newpipe.extractor.utils.Parser;\n \n+import javax.annotation.Nonnull;\n import java.io.IOException;\n import java.io.UnsupportedEncodingException;\n import java.net.URLEncoder;\n+import java.util.Collections;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.Optional;\n import java.util.regex.Pattern;\n \n-import javax.annotation.Nonnull;\n-\n import static java.util.Collections.singletonList;\n+import static org.schabi.newpipe.extractor.utils.Utils.UTF_8;\n+import static org.schabi.newpipe.extractor.utils.Utils.isNullOrEmpty;\n \n public class YoutubeCommentsExtractor extends CommentsExtractor {\n     // using the mobile site for comments because it loads faster and uses get requests instead of post\n-    private static final String USER_AGENT = \"Mozilla/5.0 (Android 8.1.0; Mobile; rv:62.0) Gecko/62.0 Firefox/62.0\";\n+    private static final String USER_AGENT = \"Mozilla/5.0 (Android 9; Mobile; rv:78.0) Gecko/20100101 Firefox/78.0\";\n     private static final Pattern YT_CLIENT_NAME_PATTERN = Pattern.compile(\"INNERTUBE_CONTEXT_CLIENT_NAME\\\\\\\":(.*?)[,}]\");\n \n     private String ytClientVersion;\n     private String ytClientName;\n     private String responseBody;\n \n-    public YoutubeCommentsExtractor(StreamingService service, ListLinkHandler uiHandler) {\n+    private Optional<Boolean> optCommentsDisabled = Optional.empty();\n+\n+    public YoutubeCommentsExtractor(\n+            final StreamingService service,\n+            final ListLinkHandler uiHandler) {\n         super(service, uiHandler);\n     }\n \n     @Override\n-    public InfoItemsPage<CommentsInfoItem> getInitialPage() throws IOException, ExtractionException {\n-        String commentsTokenInside = findValue(responseBody, \"commentSectionRenderer\", \"}\");\n-        String commentsToken = findValue(commentsTokenInside, \"continuation\\\":\\\"\", \"\\\"\");\n+    public InfoItemsPage<CommentsInfoItem> getInitialPage()\n+            throws IOException, ExtractionException {\n+\n+        // Check if the the findInitialCommentsToken was already called and initialized\n+        if (optCommentsDisabled.orElse(false)) {\n+            return getInfoItemsPageForDisabledComments();\n+        }\n+\n+        // Get the token\n+        final String commentsToken = findInitialCommentsToken();\n+        // Check if the comments have been disabled\n+        if (optCommentsDisabled.get()) {\n+            return getInfoItemsPageForDisabledComments();\n+        }\n+\n         return getPage(getNextPage(commentsToken));\n     }\n \n-    private Page getNextPage(JsonObject ajaxJson) throws ParsingException {\n-        JsonArray arr;\n+    /**\n+     * Finds the initial comments token and initializes commentsDisabled.\n+     * @return\n+     */\n+    private String findInitialCommentsToken() {\n+        final String continuationStartPattern = \"continuation\\\":\\\"\";\n+\n+        String commentsTokenInside = findValue(responseBody, \"sectionListRenderer\", \"}\");\n+        if (commentsTokenInside == null || !commentsTokenInside.contains(continuationStartPattern)) {\n+            commentsTokenInside = findValue(responseBody, \"commentSectionRenderer\", \"}\");\n+        }\n+\n+        // If no continuation token is found the comments are disabled\n+        if (commentsTokenInside == null || !commentsTokenInside.contains(continuationStartPattern)) {\n+            optCommentsDisabled = Optional.of(true);\n+            return null;\n+        }\n+\n+        // If a continuation token is found there are >= 0 comments\n+        final String commentsToken = findValue(commentsTokenInside, continuationStartPattern, \"\\\"\");\n+\n+        optCommentsDisabled = Optional.of(false);\n+\n+        return commentsToken;\n+    }\n+\n+    private InfoItemsPage<CommentsInfoItem> getInfoItemsPageForDisabledComments() {\n+        return new InfoItemsPage<>(Collections.emptyList(), null, Collections.emptyList());\n+    }\n+\n+    private Page getNextPage(final JsonObject ajaxJson) throws ParsingException {\n+        final JsonArray arr;\n         try {\n             arr = JsonUtils.getArray(ajaxJson, \"response.continuationContents.commentSectionContinuation.continuations\");\n-        } catch (Exception e) {\n+        } catch (final Exception e) {\n             return null;\n         }\n         if (arr.isEmpty()) {\n             return null;\n         }\n-        String continuation;\n+        final String continuation;\n         try {\n             continuation = JsonUtils.getString(arr.getObject(0), \"nextContinuationData.continuation\");\n-        } catch (Exception e) {\n+        } catch (final Exception e) {\n             return null;\n         }\n         return getNextPage(continuation);\n     }\n \n-    private Page getNextPage(String continuation) throws ParsingException {\n-        Map<String, String> params = new HashMap<>();\n+    private Page getNextPage(final String continuation) throws ParsingException {\n+        final Map<String, String> params = new HashMap<>();\n         params.put(\"action_get_comments\", \"1\");\n         params.put(\"pbj\", \"1\");\n         params.put(\"ctoken\", continuation);\n         try {\n             return new Page(\"https://m.youtube.com/watch_comment?\" + getDataString(params));\n-        } catch (UnsupportedEncodingException e) {\n+        } catch (final UnsupportedEncodingException e) {\n             throw new ParsingException(\"Could not get next page url\", e);\n         }\n     }\n \n     @Override\n-    public InfoItemsPage<CommentsInfoItem> getPage(Page page) throws IOException, ExtractionException {\n-        String ajaxResponse = makeAjaxRequest(page.getUrl());\n-        JsonObject ajaxJson;\n+    public InfoItemsPage<CommentsInfoItem> getPage(final Page page) throws IOException, ExtractionException {\n+        if (optCommentsDisabled.orElse(false)) {\n+            return getInfoItemsPageForDisabledComments();\n+        }\n+        if (page == null || isNullOrEmpty(page.getUrl())) {\n+            throw new IllegalArgumentException(\"Page doesn't contain an URL\");\n+        }\n+\n+        final String ajaxResponse = makeAjaxRequest(page.getUrl());\n+        final JsonObject ajaxJson;\n         try {\n             ajaxJson = JsonParser.array().from(ajaxResponse).getObject(1);\n-        } catch (Exception e) {\n+        } catch (final Exception e) {\n             throw new ParsingException(\"Could not parse json data for comments\", e);\n         }\n-        CommentsInfoItemsCollector collector = new CommentsInfoItemsCollector(getServiceId());\n+        final CommentsInfoItemsCollector collector = new CommentsInfoItemsCollector(getServiceId());\n         collectCommentsFrom(collector, ajaxJson);\n         return new InfoItemsPage<>(collector, getNextPage(ajaxJson));\n     }\n \n-    private void collectCommentsFrom(CommentsInfoItemsCollector collector, JsonObject ajaxJson) throws ParsingException {\n-        JsonArray contents;\n+    private void collectCommentsFrom(final CommentsInfoItemsCollector collector, final JsonObject ajaxJson) throws ParsingException {\n+        final JsonArray contents;\n         try {\n             contents = JsonUtils.getArray(ajaxJson, \"response.continuationContents.commentSectionContinuation.items\");\n-        } catch (Exception e) {\n+        } catch (final Exception e) {\n             //no comments\n             return;\n         }\n-        List<Object> comments;\n+        final List<Object> comments;\n         try {\n             comments = JsonUtils.getValues(contents, \"commentThreadRenderer.comment.commentRenderer\");\n-        } catch (Exception e) {\n+        } catch (final Exception e) {\n             throw new ParsingException(\"unable to get parse youtube comments\", e);\n         }\n \n-        for (Object c : comments) {\n+        for (final Object c : comments) {\n             if (c instanceof JsonObject) {\n-                CommentsInfoItemExtractor extractor = new YoutubeCommentsInfoItemExtractor((JsonObject) c, getUrl(), getTimeAgoParser());\n+                final CommentsInfoItemExtractor extractor =\n+                        new YoutubeCommentsInfoItemExtractor((JsonObject) c, getUrl(), getTimeAgoParser());\n                 collector.commit(extractor);\n             }\n         }\n     }\n \n     @Override\n-    public void onFetchPage(@Nonnull Downloader downloader) throws IOException, ExtractionException {\n+    public void onFetchPage(@Nonnull final Downloader downloader) throws IOException, ExtractionException {\n         final Map<String, List<String>> requestHeaders = new HashMap<>();\n         requestHeaders.put(\"User-Agent\", singletonList(USER_AGENT));\n         final Response response = downloader.get(getUrl(), requestHeaders, getExtractorLocalization());\n-        responseBody = response.responseBody();\n+        responseBody = YoutubeParsingHelper.unescapeDocument(response.responseBody());\n         ytClientVersion = findValue(responseBody, \"INNERTUBE_CONTEXT_CLIENT_VERSION\\\":\\\"\", \"\\\"\");\n         ytClientName = Parser.matchGroup1(YT_CLIENT_NAME_PATTERN, responseBody);\n     }\n \n \n-    private String makeAjaxRequest(String siteUrl) throws IOException, ReCaptchaException {\n-        Map<String, List<String>> requestHeaders = new HashMap<>();\n+    private String makeAjaxRequest(final String siteUrl) throws IOException, ReCaptchaException {\n+        final Map<String, List<String>> requestHeaders = new HashMap<>();\n         requestHeaders.put(\"Accept\", singletonList(\"*/*\"));\n         requestHeaders.put(\"User-Agent\", singletonList(USER_AGENT));\n         requestHeaders.put(\"X-YouTube-Client-Version\", singletonList(ytClientVersion));\n", "next_change": {"commit": "f3e4c9d689d72f1c800acde289a6c9159377010a", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeCommentsExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeCommentsExtractor.java\nindex a4b22524..018e3efb 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeCommentsExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeCommentsExtractor.java\n", "chunk": "@@ -72,163 +74,177 @@ public class YoutubeCommentsExtractor extends CommentsExtractor {\n \n     /**\n      * Finds the initial comments token and initializes commentsDisabled.\n-     * @return\n+     *\n+     * @return the continuation token or null if none was found\n      */\n-    private String findInitialCommentsToken() {\n-        final String continuationStartPattern = \"continuation\\\":\\\"\";\n+    @Nullable\n+    private String findInitialCommentsToken() throws ExtractionException {\n \n-        String commentsTokenInside = findValue(responseBody, \"sectionListRenderer\", \"}\");\n-        if (commentsTokenInside == null || !commentsTokenInside.contains(continuationStartPattern)) {\n-            commentsTokenInside = findValue(responseBody, \"commentSectionRenderer\", \"}\");\n+        final JsonArray jArray = JsonUtils.getArray(nextResponse,\n+                \"contents.twoColumnWatchNextResults.results.results.contents\");\n+\n+        final Optional<Object> itemSectionRenderer = jArray.stream().filter(o -> {\n+            JsonObject jObj = (JsonObject) o;\n+\n+            if (jObj.has(\"itemSectionRenderer\")) {\n+                try {\n+                    return JsonUtils.getString(jObj, \"itemSectionRenderer.targetId\")\n+                            .equals(\"comments-section\");\n+                } catch (final ParsingException ignored) {\n+                }\n+            }\n+\n+            return false;\n+        }).findFirst();\n+\n+        final String token;\n+\n+        if (itemSectionRenderer.isPresent()) {\n+            token = JsonUtils.getString(((JsonObject) itemSectionRenderer.get())\n+                    .getObject(\"itemSectionRenderer\").getArray(\"contents\").getObject(0),\n+                    \"continuationItemRenderer.continuationEndpoint.continuationCommand.token\");\n+        } else {\n+            token = null;\n         }\n \n-        // If no continuation token is found the comments are disabled\n-        if (commentsTokenInside == null || !commentsTokenInside.contains(continuationStartPattern)) {\n+        if (token == null) {\n             optCommentsDisabled = Optional.of(true);\n             return null;\n         }\n \n-        // If a continuation token is found there are >= 0 comments\n-        final String commentsToken = findValue(commentsTokenInside, continuationStartPattern, \"\\\"\");\n-\n         optCommentsDisabled = Optional.of(false);\n \n-        return commentsToken;\n+        return token;\n     }\n \n+    @Nonnull\n     private InfoItemsPage<CommentsInfoItem> getInfoItemsPageForDisabledComments() {\n         return new InfoItemsPage<>(Collections.emptyList(), null, Collections.emptyList());\n     }\n \n-    private Page getNextPage(final JsonObject ajaxJson) throws ParsingException {\n-        final JsonArray arr;\n+    @Nullable\n+    private Page getNextPage(@Nonnull final JsonObject ajaxJson) throws ExtractionException {\n+        final JsonArray jsonArray;\n+        final JsonArray onResponseReceivedEndpoints = ajaxJson.getArray(\n+                \"onResponseReceivedEndpoints\");\n+        final JsonObject endpoint = onResponseReceivedEndpoints.getObject(\n+                onResponseReceivedEndpoints.size() - 1);\n+\n         try {\n-            arr = JsonUtils.getArray(ajaxJson, \"response.continuationContents.commentSectionContinuation.continuations\");\n+            jsonArray = endpoint.getObject(\"reloadContinuationItemsCommand\", endpoint.getObject(\n+                    \"appendContinuationItemsAction\")).getArray(\"continuationItems\");\n         } catch (final Exception e) {\n             return null;\n         }\n-        if (arr.isEmpty()) {\n+        if (jsonArray.isEmpty()) {\n             return null;\n         }\n+\n         final String continuation;\n         try {\n-            continuation = JsonUtils.getString(arr.getObject(0), \"nextContinuationData.continuation\");\n+            continuation = JsonUtils.getString(jsonArray.getObject(jsonArray.size() - 1),\n+                    \"continuationItemRenderer.continuationEndpoint.continuationCommand.token\");\n         } catch (final Exception e) {\n             return null;\n         }\n         return getNextPage(continuation);\n     }\n \n+    @Nonnull\n     private Page getNextPage(final String continuation) throws ParsingException {\n-        final Map<String, String> params = new HashMap<>();\n-        params.put(\"action_get_comments\", \"1\");\n-        params.put(\"pbj\", \"1\");\n-        params.put(\"ctoken\", continuation);\n-        try {\n-            return new Page(\"https://m.youtube.com/watch_comment?\" + getDataString(params));\n-        } catch (final UnsupportedEncodingException e) {\n-            throw new ParsingException(\"Could not get next page url\", e);\n-        }\n+        return new Page(getUrl(), continuation); // URL is ignored tho\n     }\n \n     @Override\n-    public InfoItemsPage<CommentsInfoItem> getPage(final Page page) throws IOException, ExtractionException {\n+    public InfoItemsPage<CommentsInfoItem> getPage(final Page page)\n+            throws IOException, ExtractionException {\n         if (optCommentsDisabled.orElse(false)) {\n             return getInfoItemsPageForDisabledComments();\n         }\n-        if (page == null || isNullOrEmpty(page.getUrl())) {\n-            throw new IllegalArgumentException(\"Page doesn't contain an URL\");\n+        if (page == null || isNullOrEmpty(page.getId())) {\n+            throw new IllegalArgumentException(\"Page doesn't have the continuation.\");\n         }\n \n-        final String ajaxResponse = makeAjaxRequest(page.getUrl());\n-        final JsonObject ajaxJson;\n-        try {\n-            ajaxJson = JsonParser.array().from(ajaxResponse).getObject(1);\n-        } catch (final Exception e) {\n-            throw new ParsingException(\"Could not parse json data for comments\", e);\n-        }\n-        final CommentsInfoItemsCollector collector = new CommentsInfoItemsCollector(getServiceId());\n+        final Localization localization = getExtractorLocalization();\n+        final byte[] body = JsonWriter.string(prepareDesktopJsonBuilder(localization,\n+                        getExtractorContentCountry())\n+                .value(\"continuation\", page.getId())\n+                .done())\n+                .getBytes(UTF_8);\n+\n+        final JsonObject ajaxJson = getJsonPostResponse(\"next\", body, localization);\n+\n+        final CommentsInfoItemsCollector collector = new CommentsInfoItemsCollector(\n+                getServiceId());\n         collectCommentsFrom(collector, ajaxJson);\n         return new InfoItemsPage<>(collector, getNextPage(ajaxJson));\n     }\n \n-    private void collectCommentsFrom(final CommentsInfoItemsCollector collector, final JsonObject ajaxJson) throws ParsingException {\n+    private void collectCommentsFrom(final CommentsInfoItemsCollector collector,\n+                                     @Nonnull final JsonObject ajaxJson) throws ParsingException {\n+\n+        final JsonArray onResponseReceivedEndpoints = ajaxJson.getArray(\n+                \"onResponseReceivedEndpoints\");\n+        final JsonObject commentsEndpoint = onResponseReceivedEndpoints.getObject(\n+                onResponseReceivedEndpoints.size() - 1);\n+\n+        final String path;\n+\n+        if (commentsEndpoint.has(\"reloadContinuationItemsCommand\")) {\n+            path = \"reloadContinuationItemsCommand.continuationItems\";\n+        } else if (commentsEndpoint.has(\"appendContinuationItemsAction\")) {\n+            path = \"appendContinuationItemsAction.continuationItems\";\n+        } else {\n+            // No comments\n+            return;\n+        }\n+\n         final JsonArray contents;\n         try {\n-            contents = JsonUtils.getArray(ajaxJson, \"response.continuationContents.commentSectionContinuation.items\");\n+            contents = (JsonArray) JsonUtils.getArray(commentsEndpoint, path).clone();\n         } catch (final Exception e) {\n-            //no comments\n+            // No comments\n             return;\n         }\n+\n+        final int index = contents.size() - 1;\n+        if (contents.getObject(index).has(\"continuationItemRenderer\")) {\n+            contents.remove(index);\n+        }\n+\n         final List<Object> comments;\n         try {\n-            comments = JsonUtils.getValues(contents, \"commentThreadRenderer.comment.commentRenderer\");\n+            comments = JsonUtils.getValues(contents,\n+                    \"commentThreadRenderer.comment.commentRenderer\");\n         } catch (final Exception e) {\n-            throw new ParsingException(\"unable to get parse youtube comments\", e);\n+            throw new ParsingException(\"Unable to get parse youtube comments\", e);\n         }\n \n         for (final Object c : comments) {\n             if (c instanceof JsonObject) {\n-                final CommentsInfoItemExtractor extractor =\n-                        new YoutubeCommentsInfoItemExtractor((JsonObject) c, getUrl(), getTimeAgoParser());\n+                final CommentsInfoItemExtractor extractor = new YoutubeCommentsInfoItemExtractor(\n+                        (JsonObject) c, getUrl(), getTimeAgoParser());\n                 collector.commit(extractor);\n             }\n         }\n     }\n \n     @Override\n-    public void onFetchPage(@Nonnull final Downloader downloader) throws IOException, ExtractionException {\n-        final Map<String, List<String>> requestHeaders = new HashMap<>();\n-        requestHeaders.put(\"User-Agent\", singletonList(USER_AGENT));\n-        final Response response = downloader.get(getUrl(), requestHeaders, getExtractorLocalization());\n-        responseBody = YoutubeParsingHelper.unescapeDocument(response.responseBody());\n-        ytClientVersion = findValue(responseBody, \"INNERTUBE_CONTEXT_CLIENT_VERSION\\\":\\\"\", \"\\\"\");\n-        ytClientName = Parser.matchGroup1(YT_CLIENT_NAME_PATTERN, responseBody);\n-    }\n-\n+    public void onFetchPage(@Nonnull final Downloader downloader)\n+            throws IOException, ExtractionException {\n+        final Localization localization = getExtractorLocalization();\n+        final byte[] body = JsonWriter.string(prepareDesktopJsonBuilder(localization,\n+                        getExtractorContentCountry())\n+                .value(\"videoId\", getId())\n+                .done())\n+                .getBytes(UTF_8);\n \n-    private String makeAjaxRequest(final String siteUrl) throws IOException, ReCaptchaException {\n-        final Map<String, List<String>> requestHeaders = new HashMap<>();\n-        requestHeaders.put(\"Accept\", singletonList(\"*/*\"));\n-        requestHeaders.put(\"User-Agent\", singletonList(USER_AGENT));\n-        requestHeaders.put(\"X-YouTube-Client-Version\", singletonList(ytClientVersion));\n-        requestHeaders.put(\"X-YouTube-Client-Name\", singletonList(ytClientName));\n-        return getDownloader().get(siteUrl, requestHeaders, getExtractorLocalization()).responseBody();\n+        nextResponse = getJsonPostResponse(\"next\", body, localization);\n     }\n \n-    private String getDataString(final Map<String, String> params) throws UnsupportedEncodingException {\n-        final StringBuilder result = new StringBuilder();\n-        boolean first = true;\n-        for (final Map.Entry<String, String> entry : params.entrySet()) {\n-            if (first) {\n-                first = false;\n-            } else {\n-                result.append(\"&\");\n-            }\n-            result.append(URLEncoder.encode(entry.getKey(), UTF_8));\n-            result.append(\"=\");\n-            result.append(URLEncoder.encode(entry.getValue(), UTF_8));\n-        }\n-        return result.toString();\n-    }\n-\n-    private String findValue(final String doc, final String start, final String end) {\n-        int beginIndex = doc.indexOf(start);\n-        // Start string was not found\n-        if (beginIndex == -1) {\n-            return null;\n-        }\n-        beginIndex = beginIndex + start.length();\n-        final int endIndex = doc.indexOf(end, beginIndex);\n-        // End string was not found\n-        if (endIndex == -1) {\n-            return null;\n-        }\n-        return doc.substring(beginIndex, endIndex);\n-    }\n \n     @Override\n-    public boolean isCommentsDisabled() {\n+    public boolean isCommentsDisabled() throws ExtractionException {\n         // Check if commentsDisabled has to be initialized\n         if (!optCommentsDisabled.isPresent()) {\n             // Initialize commentsDisabled\n", "next_change": {"commit": "981aee40927ae03442f16856185ac5726ea836c8", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeCommentsExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeCommentsExtractor.java\nindex 018e3efb..6d0c38cb 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeCommentsExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeCommentsExtractor.java\n", "chunk": "@@ -253,4 +276,17 @@ public class YoutubeCommentsExtractor extends CommentsExtractor {\n \n         return optCommentsDisabled.get();\n     }\n+\n+    @Override\n+    public int getCommentsCount() throws ExtractionException {\n+        final JsonObject commentsHeaderRenderer = ajaxJson\n+                .getArray(\"onResponseReceivedEndpoints\").getObject(0)\n+                .getObject(\"reloadContinuationItemsCommand\")\n+                .getArray(\"continuationItems\").getObject(0)\n+                .getObject(\"commentsHeaderRenderer\");\n+\n+        final String text = getTextFromObject(commentsHeaderRenderer.getObject(\"countText\"));\n+\n+        return Integer.parseInt(Utils.removeNonDigitCharacters(text));\n+    }\n }\n", "next_change": {"commit": "22f71b010c20936cab9034f77c02afbfe44c1d5f", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeCommentsExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeCommentsExtractor.java\nindex 6d0c38cb..40a22fe5 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeCommentsExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeCommentsExtractor.java\n", "chunk": "@@ -279,14 +282,17 @@ public class YoutubeCommentsExtractor extends CommentsExtractor {\n \n     @Override\n     public int getCommentsCount() throws ExtractionException {\n-        final JsonObject commentsHeaderRenderer = ajaxJson\n+        final JsonObject countText = ajaxJson\n                 .getArray(\"onResponseReceivedEndpoints\").getObject(0)\n                 .getObject(\"reloadContinuationItemsCommand\")\n                 .getArray(\"continuationItems\").getObject(0)\n-                .getObject(\"commentsHeaderRenderer\");\n-\n-        final String text = getTextFromObject(commentsHeaderRenderer.getObject(\"countText\"));\n+                .getObject(\"commentsHeaderRenderer\")\n+                .getObject(\"countText\");\n \n-        return Integer.parseInt(Utils.removeNonDigitCharacters(text));\n+        try {\n+            return Integer.parseInt(Utils.removeNonDigitCharacters(getTextFromObject(countText)));\n+        } catch (final Exception e) {\n+            throw new ExtractionException(\"Unable to get comments count\", e);\n+        }\n     }\n }\n", "next_change": {"commit": "2974dfaa4858e08ce7d2cede005f7fd2c8cbf783", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeCommentsExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeCommentsExtractor.java\nindex 40a22fe5..92d46118 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeCommentsExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeCommentsExtractor.java\n", "chunk": "@@ -259,40 +257,55 @@ public class YoutubeCommentsExtractor extends CommentsExtractor {\n     public void onFetchPage(@Nonnull final Downloader downloader)\n             throws IOException, ExtractionException {\n         final Localization localization = getExtractorLocalization();\n+        // @formatter:off\n         final byte[] body = JsonWriter.string(\n                 prepareDesktopJsonBuilder(localization, getExtractorContentCountry())\n                     .value(\"videoId\", getId())\n                     .done())\n                 .getBytes(StandardCharsets.UTF_8);\n+        // @formatter:on\n+\n+        final String initialToken =\n+                findInitialCommentsToken(getJsonPostResponse(\"next\", body, localization));\n+\n+        // @formatter:off\n+        final byte[] ajaxBody = JsonWriter.string(\n+                        prepareDesktopJsonBuilder(localization, getExtractorContentCountry())\n+                                .value(\"continuation\", initialToken)\n+                                .done())\n+                .getBytes(StandardCharsets.UTF_8);\n+        // @formatter:on\n \n-        nextResponse = getJsonPostResponse(\"next\", body, localization);\n+        ajaxJson = getJsonPostResponse(\"next\", ajaxBody, localization);\n     }\n \n \n     @Override\n-    public boolean isCommentsDisabled() throws ExtractionException {\n-        // Check if commentsDisabled has to be initialized\n-        if (!optCommentsDisabled.isPresent()) {\n-            // Initialize commentsDisabled\n-            this.findInitialCommentsToken();\n-        }\n-\n-        return optCommentsDisabled.get();\n+    public boolean isCommentsDisabled() {\n+        return commentsDisabled;\n     }\n \n     @Override\n     public int getCommentsCount() throws ExtractionException {\n-        final JsonObject countText = ajaxJson\n-                .getArray(\"onResponseReceivedEndpoints\").getObject(0)\n-                .getObject(\"reloadContinuationItemsCommand\")\n-                .getArray(\"continuationItems\").getObject(0)\n-                .getObject(\"commentsHeaderRenderer\")\n-                .getObject(\"countText\");\n-\n-        try {\n-            return Integer.parseInt(Utils.removeNonDigitCharacters(getTextFromObject(countText)));\n-        } catch (final Exception e) {\n-            throw new ExtractionException(\"Unable to get comments count\", e);\n+        assertPageFetched();\n+\n+        if (commentsCount == ITEM_COUNT_UNKNOWN) {\n+            final JsonObject countText = ajaxJson\n+                    .getArray(\"onResponseReceivedEndpoints\").getObject(0)\n+                    .getObject(\"reloadContinuationItemsCommand\")\n+                    .getArray(\"continuationItems\").getObject(0)\n+                    .getObject(\"commentsHeaderRenderer\")\n+                    .getObject(\"countText\");\n+\n+            try {\n+                commentsCount = Integer.parseInt(\n+                        Utils.removeNonDigitCharacters(getTextFromObject(countText))\n+                );\n+            } catch (final Exception e) {\n+                throw new ExtractionException(\"Unable to get comments count\", e);\n+            }\n         }\n+\n+        return commentsCount;\n     }\n }\n", "next_change": {"commit": "98a90fd9c8fa02c11bb2a8a04cd2b5cf3b7c3028", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeCommentsExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeCommentsExtractor.java\nindex 92d46118..176317a3 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeCommentsExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeCommentsExtractor.java\n", "chunk": "@@ -289,23 +288,23 @@ public class YoutubeCommentsExtractor extends CommentsExtractor {\n     public int getCommentsCount() throws ExtractionException {\n         assertPageFetched();\n \n-        if (commentsCount == ITEM_COUNT_UNKNOWN) {\n-            final JsonObject countText = ajaxJson\n-                    .getArray(\"onResponseReceivedEndpoints\").getObject(0)\n-                    .getObject(\"reloadContinuationItemsCommand\")\n-                    .getArray(\"continuationItems\").getObject(0)\n-                    .getObject(\"commentsHeaderRenderer\")\n-                    .getObject(\"countText\");\n-\n-            try {\n-                commentsCount = Integer.parseInt(\n-                        Utils.removeNonDigitCharacters(getTextFromObject(countText))\n-                );\n-            } catch (final Exception e) {\n-                throw new ExtractionException(\"Unable to get comments count\", e);\n-            }\n+        if (commentsDisabled) {\n+            return -1;\n         }\n \n-        return commentsCount;\n+        final JsonObject countText = ajaxJson\n+                .getArray(\"onResponseReceivedEndpoints\").getObject(0)\n+                .getObject(\"reloadContinuationItemsCommand\")\n+                .getArray(\"continuationItems\").getObject(0)\n+                .getObject(\"commentsHeaderRenderer\")\n+                .getObject(\"countText\");\n+\n+        try {\n+            return Integer.parseInt(\n+                    Utils.removeNonDigitCharacters(getTextFromObject(countText))\n+            );\n+        } catch (final Exception e) {\n+            throw new ExtractionException(\"Unable to get comments count\", e);\n+        }\n     }\n }\n", "next_change": null}]}}]}}]}}]}}]}}, {"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeCommentsExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeCommentsExtractor.java\nindex 62d1eb97..a4b22524 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeCommentsExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeCommentsExtractor.java\n", "chunk": "@@ -139,24 +196,45 @@ public class YoutubeCommentsExtractor extends CommentsExtractor {\n         return getDownloader().get(siteUrl, requestHeaders, getExtractorLocalization()).responseBody();\n     }\n \n-    private String getDataString(Map<String, String> params) throws UnsupportedEncodingException {\n-        StringBuilder result = new StringBuilder();\n+    private String getDataString(final Map<String, String> params) throws UnsupportedEncodingException {\n+        final StringBuilder result = new StringBuilder();\n         boolean first = true;\n-        for (Map.Entry<String, String> entry : params.entrySet()) {\n-            if (first)\n+        for (final Map.Entry<String, String> entry : params.entrySet()) {\n+            if (first) {\n                 first = false;\n-            else\n+            } else {\n                 result.append(\"&\");\n-            result.append(URLEncoder.encode(entry.getKey(), \"UTF-8\"));\n+            }\n+            result.append(URLEncoder.encode(entry.getKey(), UTF_8));\n             result.append(\"=\");\n-            result.append(URLEncoder.encode(entry.getValue(), \"UTF-8\"));\n+            result.append(URLEncoder.encode(entry.getValue(), UTF_8));\n         }\n         return result.toString();\n     }\n \n-    private String findValue(String doc, String start, String end) {\n-        int beginIndex = doc.indexOf(start) + start.length();\n-        int endIndex = doc.indexOf(end, beginIndex);\n+    private String findValue(final String doc, final String start, final String end) {\n+        int beginIndex = doc.indexOf(start);\n+        // Start string was not found\n+        if (beginIndex == -1) {\n+            return null;\n+        }\n+        beginIndex = beginIndex + start.length();\n+        final int endIndex = doc.indexOf(end, beginIndex);\n+        // End string was not found\n+        if (endIndex == -1) {\n+            return null;\n+        }\n         return doc.substring(beginIndex, endIndex);\n     }\n+\n+    @Override\n+    public boolean isCommentsDisabled() {\n+        // Check if commentsDisabled has to be initialized\n+        if (!optCommentsDisabled.isPresent()) {\n+            // Initialize commentsDisabled\n+            this.findInitialCommentsToken();\n+        }\n+\n+        return optCommentsDisabled.get();\n+    }\n }\n", "next_change": {"commit": "981aee40927ae03442f16856185ac5726ea836c8", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeCommentsExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeCommentsExtractor.java\nindex a4b22524..6d0c38cb 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeCommentsExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeCommentsExtractor.java\n", "chunk": "@@ -237,4 +276,17 @@ public class YoutubeCommentsExtractor extends CommentsExtractor {\n \n         return optCommentsDisabled.get();\n     }\n+\n+    @Override\n+    public int getCommentsCount() throws ExtractionException {\n+        final JsonObject commentsHeaderRenderer = ajaxJson\n+                .getArray(\"onResponseReceivedEndpoints\").getObject(0)\n+                .getObject(\"reloadContinuationItemsCommand\")\n+                .getArray(\"continuationItems\").getObject(0)\n+                .getObject(\"commentsHeaderRenderer\");\n+\n+        final String text = getTextFromObject(commentsHeaderRenderer.getObject(\"countText\"));\n+\n+        return Integer.parseInt(Utils.removeNonDigitCharacters(text));\n+    }\n }\n", "next_change": {"commit": "22f71b010c20936cab9034f77c02afbfe44c1d5f", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeCommentsExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeCommentsExtractor.java\nindex 6d0c38cb..40a22fe5 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeCommentsExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeCommentsExtractor.java\n", "chunk": "@@ -279,14 +282,17 @@ public class YoutubeCommentsExtractor extends CommentsExtractor {\n \n     @Override\n     public int getCommentsCount() throws ExtractionException {\n-        final JsonObject commentsHeaderRenderer = ajaxJson\n+        final JsonObject countText = ajaxJson\n                 .getArray(\"onResponseReceivedEndpoints\").getObject(0)\n                 .getObject(\"reloadContinuationItemsCommand\")\n                 .getArray(\"continuationItems\").getObject(0)\n-                .getObject(\"commentsHeaderRenderer\");\n-\n-        final String text = getTextFromObject(commentsHeaderRenderer.getObject(\"countText\"));\n+                .getObject(\"commentsHeaderRenderer\")\n+                .getObject(\"countText\");\n \n-        return Integer.parseInt(Utils.removeNonDigitCharacters(text));\n+        try {\n+            return Integer.parseInt(Utils.removeNonDigitCharacters(getTextFromObject(countText)));\n+        } catch (final Exception e) {\n+            throw new ExtractionException(\"Unable to get comments count\", e);\n+        }\n     }\n }\n", "next_change": {"commit": "2974dfaa4858e08ce7d2cede005f7fd2c8cbf783", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeCommentsExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeCommentsExtractor.java\nindex 40a22fe5..92d46118 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeCommentsExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeCommentsExtractor.java\n", "chunk": "@@ -259,40 +257,55 @@ public class YoutubeCommentsExtractor extends CommentsExtractor {\n     public void onFetchPage(@Nonnull final Downloader downloader)\n             throws IOException, ExtractionException {\n         final Localization localization = getExtractorLocalization();\n+        // @formatter:off\n         final byte[] body = JsonWriter.string(\n                 prepareDesktopJsonBuilder(localization, getExtractorContentCountry())\n                     .value(\"videoId\", getId())\n                     .done())\n                 .getBytes(StandardCharsets.UTF_8);\n+        // @formatter:on\n+\n+        final String initialToken =\n+                findInitialCommentsToken(getJsonPostResponse(\"next\", body, localization));\n+\n+        // @formatter:off\n+        final byte[] ajaxBody = JsonWriter.string(\n+                        prepareDesktopJsonBuilder(localization, getExtractorContentCountry())\n+                                .value(\"continuation\", initialToken)\n+                                .done())\n+                .getBytes(StandardCharsets.UTF_8);\n+        // @formatter:on\n \n-        nextResponse = getJsonPostResponse(\"next\", body, localization);\n+        ajaxJson = getJsonPostResponse(\"next\", ajaxBody, localization);\n     }\n \n \n     @Override\n-    public boolean isCommentsDisabled() throws ExtractionException {\n-        // Check if commentsDisabled has to be initialized\n-        if (!optCommentsDisabled.isPresent()) {\n-            // Initialize commentsDisabled\n-            this.findInitialCommentsToken();\n-        }\n-\n-        return optCommentsDisabled.get();\n+    public boolean isCommentsDisabled() {\n+        return commentsDisabled;\n     }\n \n     @Override\n     public int getCommentsCount() throws ExtractionException {\n-        final JsonObject countText = ajaxJson\n-                .getArray(\"onResponseReceivedEndpoints\").getObject(0)\n-                .getObject(\"reloadContinuationItemsCommand\")\n-                .getArray(\"continuationItems\").getObject(0)\n-                .getObject(\"commentsHeaderRenderer\")\n-                .getObject(\"countText\");\n-\n-        try {\n-            return Integer.parseInt(Utils.removeNonDigitCharacters(getTextFromObject(countText)));\n-        } catch (final Exception e) {\n-            throw new ExtractionException(\"Unable to get comments count\", e);\n+        assertPageFetched();\n+\n+        if (commentsCount == ITEM_COUNT_UNKNOWN) {\n+            final JsonObject countText = ajaxJson\n+                    .getArray(\"onResponseReceivedEndpoints\").getObject(0)\n+                    .getObject(\"reloadContinuationItemsCommand\")\n+                    .getArray(\"continuationItems\").getObject(0)\n+                    .getObject(\"commentsHeaderRenderer\")\n+                    .getObject(\"countText\");\n+\n+            try {\n+                commentsCount = Integer.parseInt(\n+                        Utils.removeNonDigitCharacters(getTextFromObject(countText))\n+                );\n+            } catch (final Exception e) {\n+                throw new ExtractionException(\"Unable to get comments count\", e);\n+            }\n         }\n+\n+        return commentsCount;\n     }\n }\n", "next_change": {"commit": "98a90fd9c8fa02c11bb2a8a04cd2b5cf3b7c3028", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeCommentsExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeCommentsExtractor.java\nindex 92d46118..176317a3 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeCommentsExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeCommentsExtractor.java\n", "chunk": "@@ -289,23 +288,23 @@ public class YoutubeCommentsExtractor extends CommentsExtractor {\n     public int getCommentsCount() throws ExtractionException {\n         assertPageFetched();\n \n-        if (commentsCount == ITEM_COUNT_UNKNOWN) {\n-            final JsonObject countText = ajaxJson\n-                    .getArray(\"onResponseReceivedEndpoints\").getObject(0)\n-                    .getObject(\"reloadContinuationItemsCommand\")\n-                    .getArray(\"continuationItems\").getObject(0)\n-                    .getObject(\"commentsHeaderRenderer\")\n-                    .getObject(\"countText\");\n-\n-            try {\n-                commentsCount = Integer.parseInt(\n-                        Utils.removeNonDigitCharacters(getTextFromObject(countText))\n-                );\n-            } catch (final Exception e) {\n-                throw new ExtractionException(\"Unable to get comments count\", e);\n-            }\n+        if (commentsDisabled) {\n+            return -1;\n         }\n \n-        return commentsCount;\n+        final JsonObject countText = ajaxJson\n+                .getArray(\"onResponseReceivedEndpoints\").getObject(0)\n+                .getObject(\"reloadContinuationItemsCommand\")\n+                .getArray(\"continuationItems\").getObject(0)\n+                .getObject(\"commentsHeaderRenderer\")\n+                .getObject(\"countText\");\n+\n+        try {\n+            return Integer.parseInt(\n+                    Utils.removeNonDigitCharacters(getTextFromObject(countText))\n+            );\n+        } catch (final Exception e) {\n+            throw new ExtractionException(\"Unable to get comments count\", e);\n+        }\n     }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "4bc5b8d33f4cf52925a02184870225fac490001a", "message": "Merge commit", "committedDate": null}, {"oid": "2564bcf39997cbab8b6e331088c3ee41076e5e00", "committedDate": "2020-04-21 20:05:54 +0200", "message": "refactor comments"}, {"oid": "de26e00079adc7fcec49af6e4fc7656e1e01b91d", "committedDate": "2020-05-11 11:40:24 +0200", "message": "changed all == null "}, {"oid": "e3bfdba13563a2e3da77f4f4ab59bc9761b2a8ea", "committedDate": "2020-07-06 20:11:40 +0200", "message": "Remove getNextPageUrl() function from ListExtractor"}, {"oid": "4cc312086afc6d6772ba657ddf96c5f5b14f41bd", "committedDate": "2020-07-06 20:19:31 +0200", "message": "Introduce Page class"}, {"oid": "9b6fe1dea6b740c948a8553da03e1f20390b6112", "committedDate": "2020-07-06 20:19:31 +0200", "message": "Throw IllegalArgumentException when Page is invalid"}, {"oid": "0fb73301e38c72d0e0b742deab5e6d9da4cde07c", "committedDate": "2020-08-05 18:25:40 +0200", "message": "[YouTube] Fix crash on empty  comment"}, {"oid": "9dbacbc6188d88f540870be8f6b652b3e95ccc2d", "committedDate": "2020-12-09 14:57:38 +0100", "message": "Fix comments parsing"}, {"oid": "9ca52ca68ae4de3786052895c3081d938227daad", "committedDate": "2021-02-15 18:47:54 +0100", "message": "use only one constant UTF-8"}, {"oid": "e8bccfaf5df58ad0035884f7f557fe30ef70c51b", "committedDate": "2021-02-20 17:14:41 +0530", "message": "Change UA to privacy.resistFingerprinting."}, {"oid": "ae48bdea4c7afd78fd072561cee1805fecdc6b77", "committedDate": "2021-03-05 02:40:36 -0500", "message": "Updated to reflect variable name change"}, {"oid": "8bceb57a6c1389361386cc8f05f8dc5c58c5e3c4", "committedDate": "2021-03-05 02:46:06 -0500", "message": "formatting fix"}, {"oid": "05213175cd7c8fc0fcf3bd21bf6540acfebac3e5", "committedDate": "2021-03-05 02:49:15 -0500", "message": "minor edit, made variable final"}, {"oid": "ed850d0688d069a7f54f2c9c9bfd2be0f58ce055", "committedDate": "2021-03-05 13:37:08 +0100", "message": "[youtube] improve comments extraction performance"}, {"oid": "ff5273b882d8945e3e02a511aebb79ab195d102b", "committedDate": "2021-03-05 14:39:01 +0100", "message": "Update extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeCommentsExtractor.java"}, {"oid": "12835bfae1d38c1b6b7fdca20c4aeca1a94b1aa6", "committedDate": "2021-03-24 17:58:34 +0100", "message": "Merge pull request #551 from FireMasterK/ff-privacy"}, {"oid": "688a1c316bb40c3536c2a003a07ad7e8462eef26", "committedDate": "2021-07-06 21:16:29 +0200", "message": "Fixed Exception when YT comments are disabled and added ``commentsDisabled`` field"}, {"oid": "a59fead0d78b6c3e1f0f994ae8959d91917add10", "committedDate": "2021-07-06 21:16:30 +0200", "message": "Fixed typos"}, {"oid": "6860543b07991dfb424a506bb6bb60b0c78145e7", "committedDate": "2021-07-06 21:16:31 +0200", "message": "Added more doc"}, {"oid": "609919db59190229e1aad67ca74e81e8d0505496", "committedDate": "2021-08-01 12:39:00 +0200", "message": "Adress again reviews, fix some rebase issues"}, {"oid": "7753556e66e0a7cce6278513f7a9e3e98eb6a2ce", "committedDate": "2021-08-01 12:39:03 +0200", "message": "Adress the last requested changes + update YoutubeCommentsExtractor mocks"}, {"oid": "f3e4c9d689d72f1c800acde289a6c9159377010a", "committedDate": "2021-08-01 12:39:05 +0200", "message": "Use the youtubei API for YouTube comments"}, {"oid": "ed84658055a3ae587b55a193eb946bb9056a1ddb", "committedDate": "2021-08-04 18:35:14 +0530", "message": "Get it working."}, {"oid": "e8e9e6cd002881999faa1736d64dd4db7eb9a2f4", "committedDate": "2021-08-04 22:14:04 +0530", "message": "Fix comment reply continuations."}, {"oid": "6aabdc6d16b31a739918e4eca5d06e87b4cfa353", "committedDate": "2021-09-12 01:15:19 +0530", "message": "Fix for requested changes."}, {"oid": "f79ce1f52a451c9b8722f09d9cb6885d91446918", "committedDate": "2022-02-21 19:56:09 +0100", "message": "Refactored YoutubeCommentsExtractor"}, {"oid": "1a67ea100ad9a930462b2a37b9fe02e879b1e86d", "committedDate": "2022-02-21 19:56:12 +0100", "message": "Refactored code"}, {"oid": "740a37a2de414eb071e891685304048ae23fec5c", "committedDate": "2022-03-26 19:42:40 +0100", "message": "[YouTube] Fix checkstyle issues"}, {"oid": "981aee40927ae03442f16856185ac5726ea836c8", "committedDate": "2023-01-02 20:40:48 +0000", "message": "Add support to extract total comment count."}, {"oid": "22f71b010c20936cab9034f77c02afbfe44c1d5f", "committedDate": "2023-01-02 20:40:48 +0000", "message": "Fix for requested changes."}, {"oid": "67ef4f4c30678c5309e061f363321506240c5ab5", "committedDate": "2023-01-02 20:40:48 +0000", "message": "Cleanup and remove optional."}, {"oid": "2974dfaa4858e08ce7d2cede005f7fd2c8cbf783", "committedDate": "2023-01-02 20:40:48 +0000", "message": "Only store ajaxJson for initial page and eager fetch the initial continuation."}, {"oid": "98a90fd9c8fa02c11bb2a8a04cd2b5cf3b7c3028", "committedDate": "2023-01-02 20:40:48 +0000", "message": "Don't cache comments count and return early on page fetch if no token."}, {"oid": "22a47da8c7ca9bd62ea3e2a2c1e00491f8ddbca4", "committedDate": "2023-01-02 20:42:32 +0000", "message": "Fix requested change and remove outdated comment."}, {"oid": "f50b7275affa7c3186bdefeb98075babcf09ce04", "committedDate": "2023-01-24 22:39:08 +0100", "message": "[YouTube] Fix getting next comments pages"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTkyNjQ4NA==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/254#discussion_r379926484", "body": "```suggestion\r\n        // Whoever is willing to implement this should also implement it in the frontend.\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // Whoever is willing to implement this should also implement this in the front end.\n          \n          \n            \n                    // Whoever is willing to implement this should also implement it in the frontend.", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-c\"><span class=\"pl-c\">//</span> Whoever is willing to implement this should also implement <span class=\"x x-first x-last\">this</span> in the <span class=\"x x-first x-last\">front end</span>.</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-c\"><span class=\"pl-c\">//</span> Whoever is willing to implement this should also implement <span class=\"x x-first x-last\">it</span> in the <span class=\"x x-first x-last\">frontend</span>.</span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "Stypox", "createdAt": "2020-02-16T19:21:11Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java", "diffHunk": "@@ -68,7 +68,7 @@ public String getThumbnailUrl() throws ParsingException {\n     @Override\n     public String getBannerUrl() {\n         return \"\";      // Banner can't be handled by frontend right now.\n-                        // Whoever is willing to implement this should also implement this in the fornt end\n+        // Whoever is willing to implement this should also implement this in the front end.", "originalCommit": "0a4115286b46356b34bbcb2308261f86acd380c8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a129c65c63ee95462239b9681bf14c1562abfe07", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\nindex a03b1d5a..520bda80 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java\n", "chunk": "@@ -68,7 +68,7 @@ public class YoutubePlaylistExtractor extends PlaylistExtractor {\n     @Override\n     public String getBannerUrl() {\n         return \"\";      // Banner can't be handled by frontend right now.\n-        // Whoever is willing to implement this should also implement this in the front end.\n+        // Whoever is willing to implement this should also implement it in the frontend.\n     }\n \n     @Override\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTkyNjY1OQ==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/254#discussion_r379926659", "body": "```suggestion\r\n            // not good, I know\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        // not good i know\n          \n          \n            \n                        // not good, I know", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            <span class=\"pl-c\"><span class=\"pl-c\">//</span> not good<span class=\"x x-first x-last\"> i</span> know</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            <span class=\"pl-c\"><span class=\"pl-c\">//</span> not good<span class=\"x x-first x-last\">, I</span> know</span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "Stypox", "createdAt": "2020-02-16T19:23:27Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java", "diffHunk": "@@ -313,7 +337,7 @@ protected long getTimestampSeconds(String regexPattern) throws ParsingException\n         } catch (Parser.RegexException e) {\n             // catch this instantly since an url does not necessarily have to have a time stamp\n \n-            // -2 because well the testing system will then know its the regex that failed :/\n+            // -2 because the testing system will consequently know that the regex failed\n             // not good i know", "originalCommit": "0a4115286b46356b34bbcb2308261f86acd380c8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a129c65c63ee95462239b9681bf14c1562abfe07", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\nindex 900707ab..78a5fbf3 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n", "chunk": "@@ -335,10 +335,10 @@ public abstract class StreamExtractor extends Extractor {\n         try {\n             timeStamp = Parser.matchGroup1(regexPattern, getOriginalUrl());\n         } catch (Parser.RegexException e) {\n-            // catch this instantly since an url does not necessarily have to have a time stamp\n+            // catch this instantly since a url does not necessarily have a timestamp\n \n             // -2 because the testing system will consequently know that the regex failed\n-            // not good i know\n+            // not good, I know\n             return -2;\n         }\n \n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTkyNjcwMw==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/254#discussion_r379926703", "body": "```suggestion\r\n            // catch this instantly since a url does not necessarily have a timestamp\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        // catch this instantly since an url does not necessarily have to have a time stamp\n          \n          \n            \n                        // catch this instantly since a url does not necessarily have a timestamp", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            <span class=\"pl-c\"><span class=\"pl-c\">//</span> catch this instantly since <span class=\"x x-first x-last\">an</span> url does not necessarily have <span class=\"x x-first x-last\">to have a time stamp</span></span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            <span class=\"pl-c\"><span class=\"pl-c\">//</span> catch this instantly since <span class=\"x x-first x-last\">a</span> url does not necessarily have <span class=\"x x-first x-last\">a timestamp</span></span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "Stypox", "createdAt": "2020-02-16T19:24:06Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java", "diffHunk": "@@ -313,7 +337,7 @@ protected long getTimestampSeconds(String regexPattern) throws ParsingException\n         } catch (Parser.RegexException e) {\n             // catch this instantly since an url does not necessarily have to have a time stamp", "originalCommit": "0a4115286b46356b34bbcb2308261f86acd380c8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a129c65c63ee95462239b9681bf14c1562abfe07", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\nindex 900707ab..78a5fbf3 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java\n", "chunk": "@@ -335,10 +335,10 @@ public abstract class StreamExtractor extends Extractor {\n         try {\n             timeStamp = Parser.matchGroup1(regexPattern, getOriginalUrl());\n         } catch (Parser.RegexException e) {\n-            // catch this instantly since an url does not necessarily have to have a time stamp\n+            // catch this instantly since a url does not necessarily have a timestamp\n \n             // -2 because the testing system will consequently know that the regex failed\n-            // not good i know\n+            // not good, I know\n             return -2;\n         }\n \n", "next_change": null}]}}, {"oid": "a129c65c63ee95462239b9681bf14c1562abfe07", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/a129c65c63ee95462239b9681bf14c1562abfe07", "message": "more improvements of comments\n\nCo-Authored-By: Stypox <stypox@pm.me>", "committedDate": "2020-02-16T22:59:31Z", "type": "commit"}]}