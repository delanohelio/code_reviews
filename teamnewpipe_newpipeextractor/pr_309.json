{"pr_number": 309, "pr_title": "Improve stream extractor tests & various fixes", "pr_author": "Stypox", "pr_createdAt": "2020-04-09T20:37:06Z", "pr_url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/309", "merge_commit": "14c0c37d64883e795445bc8bd878df33ad6bdb9d", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY3MTA3NQ==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/309#discussion_r406671075", "body": "Why are you using a regex for conferences while using `substring()` for API URLs here and using `URL#getPath()` + `substring()` for non-API URLs here?", "bodyText": "Why are you using a regex for conferences while using substring() for API URLs here and using URL#getPath() + substring() for non-API URLs here?", "bodyHTML": "<p dir=\"auto\">Why are you using a regex for conferences while using <code>substring()</code> for API URLs here and using <code>URL#getPath()</code> + <code>substring()</code> for non-API URLs here?</p>", "author": "wb9688", "createdAt": "2020-04-10T09:00:01Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/media_ccc/linkHandler/MediaCCCStreamLinkHandlerFactory.java", "diffHunk": "@@ -9,10 +8,12 @@\n import java.net.URL;\n \n public class MediaCCCStreamLinkHandlerFactory extends LinkHandlerFactory {\n+    public static final String VIDEO_API_ENDPOINT = \"https://api.media.ccc.de/public/events/\";\n+    private static final String VIDEO_PATH = \"https://media.ccc.de/v/\";\n \n     @Override\n     public String getId(String urlString) throws ParsingException {\n-        if (urlString.startsWith(\"https://api.media.ccc.de/public/events/\") &&\n+        if (urlString.startsWith(VIDEO_API_ENDPOINT) &&\n                 !urlString.contains(\"?q=\")) {\n             return urlString.substring(39); //remove api\u2026/public/events part\n         }", "originalCommit": "051e3fa5aa43417ac221ac030aa33ae2e3359cc0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY5ODg0OQ==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/309#discussion_r406698849", "bodyText": "I left everything as it was before, I only replaced the hardcoded url. Will fix this", "author": "Stypox", "createdAt": "2020-04-10T10:22:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY3MTA3NQ=="}], "type": "inlineReview", "revised_code": {"commit": "6dd5f016b1c9de508bc2d99105221aa8383a53c8", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/media_ccc/linkHandler/MediaCCCStreamLinkHandlerFactory.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/media_ccc/linkHandler/MediaCCCStreamLinkHandlerFactory.java\nindex 729d97eb..fa9ac482 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/media_ccc/linkHandler/MediaCCCStreamLinkHandlerFactory.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/media_ccc/linkHandler/MediaCCCStreamLinkHandlerFactory.java\n", "chunk": "@@ -2,52 +2,27 @@ package org.schabi.newpipe.extractor.services.media_ccc.linkHandler;\n \n import org.schabi.newpipe.extractor.exceptions.ParsingException;\n import org.schabi.newpipe.extractor.linkhandler.LinkHandlerFactory;\n-import org.schabi.newpipe.extractor.utils.Utils;\n-\n-import java.net.MalformedURLException;\n-import java.net.URL;\n+import org.schabi.newpipe.extractor.utils.Parser;\n \n public class MediaCCCStreamLinkHandlerFactory extends LinkHandlerFactory {\n     public static final String VIDEO_API_ENDPOINT = \"https://api.media.ccc.de/public/events/\";\n     private static final String VIDEO_PATH = \"https://media.ccc.de/v/\";\n+    private static final String ID_PATTERN = \"(?:(?:(?:api\\\\.)?media\\\\.ccc\\\\.de/public/events/)|(?:media\\\\.ccc\\\\.de/v/))([^/?&#]*)\";\n \n     @Override\n-    public String getId(String urlString) throws ParsingException {\n-        if (urlString.startsWith(VIDEO_API_ENDPOINT) &&\n-                !urlString.contains(\"?q=\")) {\n-            return urlString.substring(39); //remove api\u2026/public/events part\n-        }\n-\n-        URL url;\n-        try {\n-            url = Utils.stringToURL(urlString);\n-        } catch (MalformedURLException e) {\n-            throw new IllegalArgumentException(\"The given URL is not valid\");\n-        }\n-\n-        String path = url.getPath();\n-        // remove leading \"/\" of URL-path if URL-path is given\n-        if (!path.isEmpty()) {\n-            path = path.substring(1);\n-        }\n-\n-        if (path.startsWith(\"v/\")) {\n-            return path.substring(2);\n-        }\n-\n-        throw new ParsingException(\"Could not get id from url: \" + url);\n+    public String getId(final String url) throws ParsingException {\n+        return Parser.matchGroup1(ID_PATTERN, url);\n     }\n \n     @Override\n-    public String getUrl(String id) throws ParsingException {\n+    public String getUrl(final String id) throws ParsingException {\n         return VIDEO_PATH + id;\n     }\n \n     @Override\n-    public boolean onAcceptUrl(String url) throws ParsingException {\n+    public boolean onAcceptUrl(final String url) {\n         try {\n-            getId(url);\n-            return true;\n+            return getId(url) != null;\n         } catch (ParsingException e) {\n             return false;\n         }\n", "next_change": {"commit": "1d7a86e664717d09e33371bc87c289903b19feb2", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/media_ccc/linkHandler/MediaCCCStreamLinkHandlerFactory.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/media_ccc/linkHandler/MediaCCCStreamLinkHandlerFactory.java\nindex fa9ac482..a335abf8 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/media_ccc/linkHandler/MediaCCCStreamLinkHandlerFactory.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/media_ccc/linkHandler/MediaCCCStreamLinkHandlerFactory.java\n", "chunk": "@@ -2,27 +2,54 @@ package org.schabi.newpipe.extractor.services.media_ccc.linkHandler;\n \n import org.schabi.newpipe.extractor.exceptions.ParsingException;\n import org.schabi.newpipe.extractor.linkhandler.LinkHandlerFactory;\n-import org.schabi.newpipe.extractor.utils.Parser;\n+import org.schabi.newpipe.extractor.utils.Utils;\n \n-public class MediaCCCStreamLinkHandlerFactory extends LinkHandlerFactory {\n-    public static final String VIDEO_API_ENDPOINT = \"https://api.media.ccc.de/public/events/\";\n-    private static final String VIDEO_PATH = \"https://media.ccc.de/v/\";\n-    private static final String ID_PATTERN = \"(?:(?:(?:api\\\\.)?media\\\\.ccc\\\\.de/public/events/)|(?:media\\\\.ccc\\\\.de/v/))([^/?&#]*)\";\n+import java.net.MalformedURLException;\n+import java.net.URL;\n \n+public class MediaCCCStreamLinkHandlerFactory extends LinkHandlerFactory {\n     @Override\n-    public String getId(final String url) throws ParsingException {\n-        return Parser.matchGroup1(ID_PATTERN, url);\n+    public String getId(final String urlString) throws ParsingException {\n+        if (urlString.startsWith(\"https://media.ccc.de/public/events/\")\n+                && !urlString.contains(\"?q=\")) {\n+            return urlString.substring(35); //remove \u2026/public/events part\n+        }\n+\n+        if (urlString.startsWith(\"https://api.media.ccc.de/public/events/\")\n+                && !urlString.contains(\"?q=\")) {\n+            return urlString.substring(39); //remove api\u2026/public/events part\n+        }\n+\n+        URL url;\n+        try {\n+            url = Utils.stringToURL(urlString);\n+        } catch (MalformedURLException e) {\n+            throw new IllegalArgumentException(\"The given URL is not valid\");\n+        }\n+\n+        String path = url.getPath();\n+        // remove leading \"/\" of URL-path if URL-path is given\n+        if (!path.isEmpty()) {\n+            path = path.substring(1);\n+        }\n+\n+        if (path.startsWith(\"v/\")) {\n+            return path.substring(2);\n+        }\n+\n+        throw new ParsingException(\"Could not get id from url: \" + url);\n     }\n \n     @Override\n     public String getUrl(final String id) throws ParsingException {\n-        return VIDEO_PATH + id;\n+        return \"https://media.ccc.de/public/events/\" + id;\n     }\n \n     @Override\n     public boolean onAcceptUrl(final String url) {\n         try {\n-            return getId(url) != null;\n+            getId(url);\n+            return true;\n         } catch (ParsingException e) {\n             return false;\n         }\n", "next_change": {"commit": "07a90d116a0059a027f158f59b5fe9d2720f361f", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/media_ccc/linkHandler/MediaCCCStreamLinkHandlerFactory.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/media_ccc/linkHandler/MediaCCCStreamLinkHandlerFactory.java\nindex a335abf8..fa9ac482 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/media_ccc/linkHandler/MediaCCCStreamLinkHandlerFactory.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/media_ccc/linkHandler/MediaCCCStreamLinkHandlerFactory.java\n", "chunk": "@@ -2,54 +2,27 @@ package org.schabi.newpipe.extractor.services.media_ccc.linkHandler;\n \n import org.schabi.newpipe.extractor.exceptions.ParsingException;\n import org.schabi.newpipe.extractor.linkhandler.LinkHandlerFactory;\n-import org.schabi.newpipe.extractor.utils.Utils;\n-\n-import java.net.MalformedURLException;\n-import java.net.URL;\n+import org.schabi.newpipe.extractor.utils.Parser;\n \n public class MediaCCCStreamLinkHandlerFactory extends LinkHandlerFactory {\n-    @Override\n-    public String getId(final String urlString) throws ParsingException {\n-        if (urlString.startsWith(\"https://media.ccc.de/public/events/\")\n-                && !urlString.contains(\"?q=\")) {\n-            return urlString.substring(35); //remove \u2026/public/events part\n-        }\n+    public static final String VIDEO_API_ENDPOINT = \"https://api.media.ccc.de/public/events/\";\n+    private static final String VIDEO_PATH = \"https://media.ccc.de/v/\";\n+    private static final String ID_PATTERN = \"(?:(?:(?:api\\\\.)?media\\\\.ccc\\\\.de/public/events/)|(?:media\\\\.ccc\\\\.de/v/))([^/?&#]*)\";\n \n-        if (urlString.startsWith(\"https://api.media.ccc.de/public/events/\")\n-                && !urlString.contains(\"?q=\")) {\n-            return urlString.substring(39); //remove api\u2026/public/events part\n-        }\n-\n-        URL url;\n-        try {\n-            url = Utils.stringToURL(urlString);\n-        } catch (MalformedURLException e) {\n-            throw new IllegalArgumentException(\"The given URL is not valid\");\n-        }\n-\n-        String path = url.getPath();\n-        // remove leading \"/\" of URL-path if URL-path is given\n-        if (!path.isEmpty()) {\n-            path = path.substring(1);\n-        }\n-\n-        if (path.startsWith(\"v/\")) {\n-            return path.substring(2);\n-        }\n-\n-        throw new ParsingException(\"Could not get id from url: \" + url);\n+    @Override\n+    public String getId(final String url) throws ParsingException {\n+        return Parser.matchGroup1(ID_PATTERN, url);\n     }\n \n     @Override\n     public String getUrl(final String id) throws ParsingException {\n-        return \"https://media.ccc.de/public/events/\" + id;\n+        return VIDEO_PATH + id;\n     }\n \n     @Override\n     public boolean onAcceptUrl(final String url) {\n         try {\n-            getId(url);\n-            return true;\n+            return getId(url) != null;\n         } catch (ParsingException e) {\n             return false;\n         }\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY3MTgzMA==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/309#discussion_r406671830", "body": "Please also handle the API URLs in `getId()` here", "bodyText": "Please also handle the API URLs in getId() here", "bodyHTML": "<p dir=\"auto\">Please also handle the API URLs in <code>getId()</code> here</p>", "author": "wb9688", "createdAt": "2020-04-10T09:02:01Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/linkHandler/PeertubeChannelLinkHandlerFactory.java", "diffHunk": "@@ -31,7 +32,7 @@ public String getUrl(String id, List<String> contentFilters, String searchFilter\n     @Override", "originalCommit": "051e3fa5aa43417ac221ac030aa33ae2e3359cc0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA2NDUxMg==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/309#discussion_r407064512", "bodyText": "Fixed while rebasing with the latest changes about accounts and channels", "author": "Stypox", "createdAt": "2020-04-11T13:32:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY3MTgzMA=="}], "type": "inlineReview", "revised_code": {"commit": "b6ae05794f0ec1620706af5df3c55ccfcbb3f091", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/linkHandler/PeertubeChannelLinkHandlerFactory.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/linkHandler/PeertubeChannelLinkHandlerFactory.java\nindex 8fbc0f47..2903c295 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/linkHandler/PeertubeChannelLinkHandlerFactory.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/linkHandler/PeertubeChannelLinkHandlerFactory.java\n", "chunk": "@@ -32,11 +31,16 @@ public class PeertubeChannelLinkHandlerFactory extends ListLinkHandlerFactory {\n     @Override\n     public String getUrl(String id, List<String> contentFilter, String sortFilter, String baseUrl)\n             throws ParsingException {\n-        return baseUrl + ACCOUNT_PATH + id;\n+        if (id.matches(ID_PATTERN)) {\n+            return baseUrl + \"/\" + id;\n+        } else {\n+            // This is needed for compatibility with older versions were we didn't support video channels yet\n+            return baseUrl + \"/accounts/\" + id;\n+        }\n     }\n \n     @Override\n     public boolean onAcceptUrl(String url) {\n-        return url.contains(\"/accounts/\");\n+        return url.contains(\"/accounts/\") || url.contains(\"/video-channels/\");\n     }\n }\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY3MjI3MA==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/309#discussion_r406672270", "body": "Please also handle the API URLs in `getId()` here", "bodyText": "Please also handle the API URLs in getId() here", "bodyHTML": "<p dir=\"auto\">Please also handle the API URLs in <code>getId()</code> here</p>", "author": "wb9688", "createdAt": "2020-04-10T09:03:00Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/linkHandler/PeertubeStreamLinkHandlerFactory.java", "diffHunk": "@@ -27,7 +28,7 @@ public String getUrl(String id) {\n \n     @Override\n     public String getUrl(String id, String baseUrl) {\n-        return baseUrl + VIDEO_ENDPOINT + id;\n+        return baseUrl + VIDEO_PATH + id;\n     }\n \n     @Override", "originalCommit": "051e3fa5aa43417ac221ac030aa33ae2e3359cc0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY5OTI1OA==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/309#discussion_r406699258", "bodyText": "Oh right, for some reason I thought they were already being handled in some strange way", "author": "Stypox", "createdAt": "2020-04-10T10:23:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY3MjI3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA2NDM3OA==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/309#discussion_r407064378", "bodyText": "Those are already handled by the regex: /videos/(watch/)?([^/?&#]*)\nBoth \"framatube.org/api/v1/videos/id\" and \"framatube.org/videos/id\" match it and the second group is obtained correctly", "author": "Stypox", "createdAt": "2020-04-11T13:31:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY3MjI3MA=="}], "type": "inlineReview", "revised_code": {"commit": "6dd5f016b1c9de508bc2d99105221aa8383a53c8", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/linkHandler/PeertubeStreamLinkHandlerFactory.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/linkHandler/PeertubeStreamLinkHandlerFactory.java\nindex 9351a010..a0b7f56f 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/linkHandler/PeertubeStreamLinkHandlerFactory.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/linkHandler/PeertubeStreamLinkHandlerFactory.java\n", "chunk": "@@ -22,8 +22,7 @@ public class PeertubeStreamLinkHandlerFactory extends LinkHandlerFactory {\n \n     @Override\n     public String getUrl(String id) {\n-        String baseUrl = ServiceList.PeerTube.getBaseUrl();\n-        return getUrl(id, baseUrl);\n+        return getUrl(id, ServiceList.PeerTube.getBaseUrl());\n     }\n \n     @Override\n", "next_change": {"commit": "1d7a86e664717d09e33371bc87c289903b19feb2", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/linkHandler/PeertubeStreamLinkHandlerFactory.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/linkHandler/PeertubeStreamLinkHandlerFactory.java\nindex a0b7f56f..d3f369fc 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/linkHandler/PeertubeStreamLinkHandlerFactory.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/linkHandler/PeertubeStreamLinkHandlerFactory.java\n", "chunk": "@@ -22,12 +21,13 @@ public class PeertubeStreamLinkHandlerFactory extends LinkHandlerFactory {\n \n     @Override\n     public String getUrl(String id) {\n-        return getUrl(id, ServiceList.PeerTube.getBaseUrl());\n+        String baseUrl = ServiceList.PeerTube.getBaseUrl();\n+        return getUrl(id, baseUrl);\n     }\n \n     @Override\n     public String getUrl(String id, String baseUrl) {\n-        return baseUrl + VIDEO_PATH + id;\n+        return baseUrl + VIDEO_ENDPOINT + id;\n     }\n \n     @Override\n", "next_change": {"commit": "7ae3cb6d07cea6abb71d9c69eb2b1b276e5b795f", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/linkHandler/PeertubeStreamLinkHandlerFactory.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/linkHandler/PeertubeStreamLinkHandlerFactory.java\nindex d3f369fc..3e16b509 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/linkHandler/PeertubeStreamLinkHandlerFactory.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/linkHandler/PeertubeStreamLinkHandlerFactory.java\n", "chunk": "@@ -27,7 +28,7 @@ public class PeertubeStreamLinkHandlerFactory extends LinkHandlerFactory {\n \n     @Override\n     public String getUrl(String id, String baseUrl) {\n-        return baseUrl + VIDEO_ENDPOINT + id;\n+        return baseUrl + VIDEO_PATH + id;\n     }\n \n     @Override\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY3MjYyOQ==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/309#discussion_r406672629", "body": "Could be `final`", "bodyText": "Could be final", "bodyHTML": "<p dir=\"auto\">Could be <code>final</code></p>", "author": "wb9688", "createdAt": "2020-04-10T09:03:54Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java", "diffHunk": "@@ -258,7 +258,14 @@ public long getLength() throws ParsingException {\n      */\n     @Override\n     public long getTimeStamp() throws ParsingException {\n-        return getTimestampSeconds(\"((#|&|\\\\?)t=\\\\d{0,3}h?\\\\d{0,3}m?\\\\d{1,3}s?)\");\n+        long timestamp = getTimestampSeconds(\"((#|&|\\\\?)t=\\\\d{0,3}h?\\\\d{0,3}m?\\\\d{1,3}s?)\");", "originalCommit": "051e3fa5aa43417ac221ac030aa33ae2e3359cc0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6dd5f016b1c9de508bc2d99105221aa8383a53c8", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java\nindex 8d0512e4..d4a001ff 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java\n", "chunk": "@@ -258,7 +258,8 @@ public class YoutubeStreamExtractor extends StreamExtractor {\n      */\n     @Override\n     public long getTimeStamp() throws ParsingException {\n-        long timestamp = getTimestampSeconds(\"((#|&|\\\\?)t=\\\\d{0,3}h?\\\\d{0,3}m?\\\\d{1,3}s?)\");\n+        final long timestamp =\n+                getTimestampSeconds(\"((#|&|\\\\?)t=\\\\d{0,3}h?\\\\d{0,3}m?\\\\d{1,3}s?)\");\n \n         if (timestamp == -2) {\n             // regex for timestamp was not found\n", "next_change": {"commit": "1d7a86e664717d09e33371bc87c289903b19feb2", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java\nindex d4a001ff..8364246c 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java\n", "chunk": "@@ -258,15 +253,7 @@ public class YoutubeStreamExtractor extends StreamExtractor {\n      */\n     @Override\n     public long getTimeStamp() throws ParsingException {\n-        final long timestamp =\n-                getTimestampSeconds(\"((#|&|\\\\?)t=\\\\d{0,3}h?\\\\d{0,3}m?\\\\d{1,3}s?)\");\n-\n-        if (timestamp == -2) {\n-            // regex for timestamp was not found\n-            return 0;\n-        } else {\n-            return timestamp;\n-        }\n+        return getTimestampSeconds(\"((#|&|\\\\?)(t|start)=\\\\d{0,3}h?\\\\d{0,3}m?\\\\d{1,3}s?)\");\n     }\n \n     @Override\n", "next_change": {"commit": "7cd410f3fc304a9eb620fa28ba39f938e4565c2b", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java\nindex 8364246c..bdaf4cad 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java\n", "chunk": "@@ -253,7 +253,14 @@ public class YoutubeStreamExtractor extends StreamExtractor {\n      */\n     @Override\n     public long getTimeStamp() throws ParsingException {\n-        return getTimestampSeconds(\"((#|&|\\\\?)(t|start)=\\\\d{0,3}h?\\\\d{0,3}m?\\\\d{1,3}s?)\");\n+        long timestamp = getTimestampSeconds(\"((#|&|\\\\?)t=\\\\d{0,3}h?\\\\d{0,3}m?\\\\d{1,3}s?)\");\n+\n+        if (timestamp == -2) {\n+            // regex for timestamp was not found\n+            return 0;\n+        } else {\n+            return timestamp;\n+        }\n     }\n \n     @Override\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY3Mjc2Ng==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/309#discussion_r406672766", "body": "Why was this changed?", "bodyText": "Why was this changed?", "bodyHTML": "<p dir=\"auto\">Why was this changed?</p>", "author": "wb9688", "createdAt": "2020-04-10T09:04:14Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java", "diffHunk": "@@ -579,7 +586,7 @@ public String getErrorMessage() {\n         try {\n             return getTextFromObject(initialAjaxJson.getObject(2).getObject(\"playerResponse\").getObject(\"playabilityStatus\")\n                     .getObject(\"errorScreen\").getObject(\"playerErrorMessageRenderer\").getObject(\"reason\"));\n-        } catch (ParsingException e) {\n+        } catch (Exception e) {", "originalCommit": "051e3fa5aa43417ac221ac030aa33ae2e3359cc0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY5ODAzOQ==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/309#discussion_r406698039", "bodyText": "So that it also catches NullPointerExceptions, which are generated when there is no error message. In that case null should be returned", "author": "Stypox", "createdAt": "2020-04-10T10:19:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY3Mjc2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA2NTAxNA==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/309#discussion_r407065014", "bodyText": "Then why aren't you catching (ParsingException | NullPointerException e)?", "author": "B0pol", "createdAt": "2020-04-11T13:37:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY3Mjc2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "6dd5f016b1c9de508bc2d99105221aa8383a53c8", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java\nindex 8d0512e4..d4a001ff 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java\n", "chunk": "@@ -584,10 +585,11 @@ public class YoutubeStreamExtractor extends StreamExtractor {\n     @Override\n     public String getErrorMessage() {\n         try {\n-            return getTextFromObject(initialAjaxJson.getObject(2).getObject(\"playerResponse\").getObject(\"playabilityStatus\")\n-                    .getObject(\"errorScreen\").getObject(\"playerErrorMessageRenderer\").getObject(\"reason\"));\n-        } catch (Exception e) {\n-            return null;\n+            return getTextFromObject(initialAjaxJson.getObject(2).getObject(\"playerResponse\")\n+                    .getObject(\"playabilityStatus\").getObject(\"errorScreen\")\n+                    .getObject(\"playerErrorMessageRenderer\").getObject(\"reason\"));\n+        } catch (ParsingException | NullPointerException e) {\n+            return null; // no error message\n         }\n     }\n \n", "next_change": {"commit": "1d7a86e664717d09e33371bc87c289903b19feb2", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java\nindex d4a001ff..8364246c 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java\n", "chunk": "@@ -585,11 +604,10 @@ public class YoutubeStreamExtractor extends StreamExtractor {\n     @Override\n     public String getErrorMessage() {\n         try {\n-            return getTextFromObject(initialAjaxJson.getObject(2).getObject(\"playerResponse\")\n-                    .getObject(\"playabilityStatus\").getObject(\"errorScreen\")\n-                    .getObject(\"playerErrorMessageRenderer\").getObject(\"reason\"));\n-        } catch (ParsingException | NullPointerException e) {\n-            return null; // no error message\n+            return getTextFromObject(initialAjaxJson.getObject(2).getObject(\"playerResponse\").getObject(\"playabilityStatus\")\n+                    .getObject(\"errorScreen\").getObject(\"playerErrorMessageRenderer\").getObject(\"reason\"));\n+        } catch (ParsingException e) {\n+            return null;\n         }\n     }\n \n", "next_change": {"commit": "7fb867c1662457c51d6579f2803c913f356126bf", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java\nindex 8364246c..08e43d6f 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java\n", "chunk": "@@ -606,7 +606,7 @@ public class YoutubeStreamExtractor extends StreamExtractor {\n         try {\n             return getTextFromObject(initialAjaxJson.getObject(2).getObject(\"playerResponse\").getObject(\"playabilityStatus\")\n                     .getObject(\"errorScreen\").getObject(\"playerErrorMessageRenderer\").getObject(\"reason\"));\n-        } catch (ParsingException e) {\n+        } catch (Exception e) {\n             return null;\n         }\n     }\n", "next_change": {"commit": "68d23defba04e3db08462d8268903ec23056fd5f", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java\nindex 08e43d6f..8ae88c39 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java\n", "chunk": "@@ -604,10 +612,11 @@ public class YoutubeStreamExtractor extends StreamExtractor {\n     @Override\n     public String getErrorMessage() {\n         try {\n-            return getTextFromObject(initialAjaxJson.getObject(2).getObject(\"playerResponse\").getObject(\"playabilityStatus\")\n-                    .getObject(\"errorScreen\").getObject(\"playerErrorMessageRenderer\").getObject(\"reason\"));\n-        } catch (Exception e) {\n-            return null;\n+            return getTextFromObject(initialAjaxJson.getObject(2).getObject(\"playerResponse\")\n+                    .getObject(\"playabilityStatus\").getObject(\"errorScreen\")\n+                    .getObject(\"playerErrorMessageRenderer\").getObject(\"reason\"));\n+        } catch (ParsingException | NullPointerException e) {\n+            return null; // no error message\n         }\n     }\n \n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY3MzU3MQ==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/309#discussion_r406673571", "body": "Could be `final`, just like a lot of variables in this class", "bodyText": "Could be final, just like a lot of variables in this class", "bodyHTML": "<p dir=\"auto\">Could be <code>final</code>, just like a lot of variables in this class</p>", "author": "wb9688", "createdAt": "2020-04-10T09:06:24Z", "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java", "diffHunk": "@@ -0,0 +1,289 @@\n+package org.schabi.newpipe.extractor.services;\n+\n+import org.junit.Test;\n+import org.schabi.newpipe.extractor.MediaFormat;\n+import org.schabi.newpipe.extractor.localization.DateWrapper;\n+import org.schabi.newpipe.extractor.stream.AudioStream;\n+import org.schabi.newpipe.extractor.stream.Description;\n+import org.schabi.newpipe.extractor.stream.Frameset;\n+import org.schabi.newpipe.extractor.stream.StreamExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemsCollector;\n+import org.schabi.newpipe.extractor.stream.StreamType;\n+import org.schabi.newpipe.extractor.stream.SubtitlesStream;\n+import org.schabi.newpipe.extractor.stream.VideoStream;\n+\n+import java.text.SimpleDateFormat;\n+import java.util.Calendar;\n+import java.util.List;\n+\n+import javax.annotation.Nullable;\n+\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.assertTrue;\n+import static org.schabi.newpipe.extractor.ExtractorAsserts.assertAtLeast;\n+import static org.schabi.newpipe.extractor.ExtractorAsserts.assertIsSecureUrl;\n+import static org.schabi.newpipe.extractor.ExtractorAsserts.assertIsValidUrl;\n+import static org.schabi.newpipe.extractor.services.DefaultTests.defaultTestListOfItems;\n+\n+/**\n+ * Test for {@link StreamExtractor}\n+ */\n+public abstract class DefaultStreamExtractorTest extends DefaultExtractorTest<StreamExtractor>\n+        implements BaseStreamExtractorTest {\n+\n+    public abstract StreamType expectedStreamType();\n+    public abstract String expectedUploaderName();\n+    public abstract String expectedUploaderUrl();\n+    public abstract List<String> expectedDescriptionContains(); // e.g. for full links\n+    public abstract long expectedLength();\n+    public long expectedTimestamp() { return 0; }; // default: there is no timestamp\n+    public abstract long expectedViewCountAtLeast();\n+    @Nullable public abstract String expectedUploadDate(); // format: \"yyyy-MM-dd HH:mm:ss.SSS\"\n+    @Nullable public abstract String expectedTextualUploadDate();\n+    public abstract long expectedLikeCountAtLeast(); // return -1 if ratings are disabled\n+    public abstract long expectedDislikeCountAtLeast(); // return -1 if ratings are disabled\n+    public boolean expectedHasRelatedStreams() { return true; } // default: there are related videos\n+    public int expectedAgeLimit() { return StreamExtractor.NO_AGE_LIMIT; } // default: no limit\n+    @Nullable public String expectedErrorMessage() { return null; } // default: no error message\n+    public boolean expectedHasVideoStreams() { return true; } // default: there are video streams\n+    public boolean expectedHasAudioStreams() { return true; } // default: there are audio streams\n+    public boolean expectedHasSubtitles() { return true; } // default: there are subtitles streams\n+    public boolean expectedHasFrames() { return true; } // default: there are frames\n+    public boolean expectedHasNextStream() { return true; } // default: there is a next video\n+\n+    @Test\n+    @Override\n+    public void testStreamType() throws Exception {\n+        assertEquals(expectedStreamType(), extractor().getStreamType());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testUploaderName() throws Exception {\n+        assertEquals(expectedUploaderName(), extractor().getUploaderName());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testUploaderUrl() throws Exception {\n+        final String uploaderUrl = extractor().getUploaderUrl();\n+        assertIsSecureUrl(uploaderUrl);\n+        assertEquals(expectedUploaderUrl(), uploaderUrl);\n+    }\n+\n+    @Test\n+    @Override\n+    public void testUploaderAvatarUrl() throws Exception {\n+        assertIsSecureUrl(extractor().getUploaderAvatarUrl());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testThumbnailUrl() throws Exception {\n+        assertIsSecureUrl(extractor().getThumbnailUrl());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testDescription() throws Exception {\n+        Description description = extractor().getDescription();", "originalCommit": "051e3fa5aa43417ac221ac030aa33ae2e3359cc0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY5ODA4Mg==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/309#discussion_r406698082", "bodyText": "Ok, will fix this in all modified files", "author": "Stypox", "createdAt": "2020-04-10T10:19:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY3MzU3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "6dd5f016b1c9de508bc2d99105221aa8383a53c8", "changed_code": [{"header": "diff --git a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\nindex 7de6a0ce..0e731d4a 100644\n--- a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n+++ b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n", "chunk": "@@ -91,7 +92,7 @@ public abstract class DefaultStreamExtractorTest extends DefaultExtractorTest<St\n     @Test\n     @Override\n     public void testDescription() throws Exception {\n-        Description description = extractor().getDescription();\n+        final Description description = extractor().getDescription();\n         assertNotNull(description);\n         assertFalse(\"description is empty\", description.getContent().isEmpty());\n \n", "next_change": {"commit": "fa29b78f77e1e323ec0512643f3bcaaf6bd13df0", "changed_code": [{"header": "diff --git a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\nindex 0e731d4a..6c0419d5 100644\n--- a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n+++ b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n", "chunk": "@@ -96,7 +139,7 @@ public abstract class DefaultStreamExtractorTest extends DefaultExtractorTest<St\n         assertNotNull(description);\n         assertFalse(\"description is empty\", description.getContent().isEmpty());\n \n-        for (String s : expectedDescriptionContains()) {\n+        for (final String s : expectedDescriptionContains()) {\n             assertThat(description.getContent(), containsString(s));\n         }\n     }\n", "next_change": {"commit": "1d7a86e664717d09e33371bc87c289903b19feb2", "changed_code": [{"header": "diff --git a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\nindex 6c0419d5..406177f7 100644\n--- a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n+++ b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n", "chunk": "@@ -139,7 +95,7 @@ public abstract class DefaultStreamExtractorTest extends DefaultExtractorTest<St\n         assertNotNull(description);\n         assertFalse(\"description is empty\", description.getContent().isEmpty());\n \n-        for (final String s : expectedDescriptionContains()) {\n+        for (String s : expectedDescriptionContains()) {\n             assertThat(description.getContent(), containsString(s));\n         }\n     }\n", "next_change": {"commit": "a087b092b401977bd58b279a3f285549db0e2160", "changed_code": [{"header": "diff --git a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\nindex 406177f7..fc2ebf43 100644\n--- a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n+++ b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n", "chunk": "@@ -95,7 +95,7 @@ public abstract class DefaultStreamExtractorTest extends DefaultExtractorTest<St\n         assertNotNull(description);\n         assertFalse(\"description is empty\", description.getContent().isEmpty());\n \n-        for (String s : expectedDescriptionContains()) {\n+        for (final String s : expectedDescriptionContains()) {\n             assertThat(description.getContent(), containsString(s));\n         }\n     }\n", "next_change": null}]}}]}}]}}]}}, {"oid": "b6ae05794f0ec1620706af5df3c55ccfcbb3f091", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/b6ae05794f0ec1620706af5df3c55ccfcbb3f091", "message": "[Test] Optimize imports", "committedDate": "2020-04-11T13:26:05Z", "type": "forcePushed"}, {"oid": "6dd5f016b1c9de508bc2d99105221aa8383a53c8", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/6dd5f016b1c9de508bc2d99105221aa8383a53c8", "message": "[YouTube] Fix livestream test actually having video streams\n\nAlso fix description test that was not valid anymore", "committedDate": "2020-04-20T06:41:23Z", "type": "forcePushed"}, {"oid": "ab85fcb91ec4b916e7074fad565e2624e78c0cd1", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/ab85fcb91ec4b916e7074fad565e2624e78c0cd1", "message": "[MediaCCC] Return empty list of video-only streams instead of null", "committedDate": "2020-04-20T07:01:51Z", "type": "forcePushed"}, {"oid": "505f19c4db56f23a5a08d1cba66c2e9043b4964f", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/505f19c4db56f23a5a08d1cba66c2e9043b4964f", "message": "[MediaCCC] Return empty list of video-only streams instead of null", "committedDate": "2020-05-06T19:19:21Z", "type": "forcePushed"}, {"oid": "e4ace2b0dc97db6df467f41a74219776304dac6f", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/e4ace2b0dc97db6df467f41a74219776304dac6f", "message": "[MediaCCC] Return empty list of video-only streams instead of null", "committedDate": "2020-05-09T14:23:48Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA3MjQwMw==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/309#discussion_r425072403", "body": "`final`", "bodyText": "final", "bodyHTML": "<p dir=\"auto\"><code>final</code></p>", "author": "wb9688", "createdAt": "2020-05-14T11:42:03Z", "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java", "diffHunk": "@@ -0,0 +1,297 @@\n+package org.schabi.newpipe.extractor.services;\n+\n+import org.junit.Test;\n+import org.schabi.newpipe.extractor.MediaFormat;\n+import org.schabi.newpipe.extractor.localization.DateWrapper;\n+import org.schabi.newpipe.extractor.stream.AudioStream;\n+import org.schabi.newpipe.extractor.stream.Description;\n+import org.schabi.newpipe.extractor.stream.Frameset;\n+import org.schabi.newpipe.extractor.stream.StreamExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemsCollector;\n+import org.schabi.newpipe.extractor.stream.StreamType;\n+import org.schabi.newpipe.extractor.stream.SubtitlesStream;\n+import org.schabi.newpipe.extractor.stream.VideoStream;\n+\n+import java.text.SimpleDateFormat;\n+import java.util.Calendar;\n+import java.util.List;\n+import java.util.TimeZone;\n+\n+import javax.annotation.Nullable;\n+\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.assertTrue;\n+import static org.schabi.newpipe.extractor.ExtractorAsserts.assertAtLeast;\n+import static org.schabi.newpipe.extractor.ExtractorAsserts.assertIsSecureUrl;\n+import static org.schabi.newpipe.extractor.ExtractorAsserts.assertIsValidUrl;\n+import static org.schabi.newpipe.extractor.services.DefaultTests.defaultTestListOfItems;\n+\n+/**\n+ * Test for {@link StreamExtractor}\n+ */\n+public abstract class DefaultStreamExtractorTest extends DefaultExtractorTest<StreamExtractor>\n+        implements BaseStreamExtractorTest {\n+\n+    public abstract StreamType expectedStreamType();\n+    public abstract String expectedUploaderName();\n+    public abstract String expectedUploaderUrl();\n+    public abstract List<String> expectedDescriptionContains(); // e.g. for full links\n+    public abstract long expectedLength();\n+    public long expectedTimestamp() { return 0; }; // default: there is no timestamp\n+    public abstract long expectedViewCountAtLeast();\n+    @Nullable public abstract String expectedUploadDate(); // format: \"yyyy-MM-dd HH:mm:ss.SSS\"\n+    @Nullable public abstract String expectedTextualUploadDate();\n+    public abstract long expectedLikeCountAtLeast(); // return -1 if ratings are disabled\n+    public abstract long expectedDislikeCountAtLeast(); // return -1 if ratings are disabled\n+    public boolean expectedHasRelatedStreams() { return true; } // default: there are related videos\n+    public int expectedAgeLimit() { return StreamExtractor.NO_AGE_LIMIT; } // default: no limit\n+    @Nullable public String expectedErrorMessage() { return null; } // default: no error message\n+    public boolean expectedHasVideoStreams() { return true; } // default: there are video streams\n+    public boolean expectedHasAudioStreams() { return true; } // default: there are audio streams\n+    public boolean expectedHasSubtitles() { return true; } // default: there are subtitles streams\n+    public boolean expectedHasFrames() { return true; } // default: there are frames\n+    public boolean expectedHasNextStream() { return true; } // default: there is a next video\n+\n+    @Test\n+    @Override\n+    public void testStreamType() throws Exception {\n+        assertEquals(expectedStreamType(), extractor().getStreamType());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testUploaderName() throws Exception {\n+        assertEquals(expectedUploaderName(), extractor().getUploaderName());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testUploaderUrl() throws Exception {\n+        final String uploaderUrl = extractor().getUploaderUrl();\n+        assertIsSecureUrl(uploaderUrl);\n+        assertEquals(expectedUploaderUrl(), uploaderUrl);\n+    }\n+\n+    @Test\n+    @Override\n+    public void testUploaderAvatarUrl() throws Exception {\n+        assertIsSecureUrl(extractor().getUploaderAvatarUrl());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testThumbnailUrl() throws Exception {\n+        assertIsSecureUrl(extractor().getThumbnailUrl());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testDescription() throws Exception {\n+        final Description description = extractor().getDescription();\n+        assertNotNull(description);\n+        assertFalse(\"description is empty\", description.getContent().isEmpty());\n+\n+        for (String s : expectedDescriptionContains()) {\n+            assertThat(description.getContent(), containsString(s));\n+        }\n+    }\n+\n+    @Test\n+    @Override\n+    public void testLength() throws Exception {\n+        assertEquals(expectedLength(), extractor().getLength());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testTimestamp() throws Exception {\n+        assertEquals(expectedTimestamp(), extractor().getTimeStamp());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testViewCount() throws Exception {\n+        assertAtLeast(expectedViewCountAtLeast(), extractor().getViewCount());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testUploadDate() throws Exception {\n+        final DateWrapper dateWrapper = extractor().getUploadDate();\n+\n+        if (expectedUploadDate() == null) {\n+            assertNull(dateWrapper);\n+        } else {\n+            assertNotNull(dateWrapper);\n+\n+            final Calendar expectedDate = Calendar.getInstance();\n+            final Calendar actualDate = dateWrapper.date();\n+            expectedDate.setTimeZone(TimeZone.getTimeZone(\"GMT\"));\n+            actualDate.setTimeZone(TimeZone.getTimeZone(\"GMT\"));\n+\n+            final SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.S\");\n+            expectedDate.setTime(sdf.parse(expectedUploadDate()));\n+            assertEquals(expectedDate, actualDate);\n+        }\n+    }\n+\n+    @Test\n+    @Override\n+    public void testTextualUploadDate() throws Exception {\n+        assertEquals(expectedTextualUploadDate(), extractor().getTextualUploadDate());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testLikeCount() throws Exception {\n+        if (expectedLikeCountAtLeast() == -1) {\n+            assertEquals(-1, extractor().getLikeCount());\n+        } else {\n+            assertAtLeast(expectedLikeCountAtLeast(), extractor().getLikeCount());\n+        }\n+    }\n+\n+    @Test\n+    @Override\n+    public void testDislikeCount() throws Exception {\n+        if (expectedDislikeCountAtLeast() == -1) {\n+            assertEquals(-1, extractor().getDislikeCount());\n+        } else {\n+            assertAtLeast(expectedDislikeCountAtLeast(), extractor().getDislikeCount());\n+        }\n+    }\n+\n+    @Test\n+    @Override\n+    public void testRelatedStreams() throws Exception {\n+        final StreamInfoItemsCollector relatedStreams = extractor().getRelatedStreams();\n+\n+        if (expectedHasRelatedStreams()) {\n+            defaultTestListOfItems(extractor().getService(), relatedStreams.getItems(),\n+                    relatedStreams.getErrors());\n+        } else {\n+            assertNull(relatedStreams);\n+        }\n+    }\n+\n+    @Test\n+    @Override\n+    public void testAgeLimit() throws Exception {\n+        assertEquals(expectedAgeLimit(), extractor().getAgeLimit());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testErrorMessage() throws Exception {\n+        assertEquals(expectedErrorMessage(), extractor().getErrorMessage());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testVideoStreams() throws Exception {\n+        List<VideoStream> videoStreams = extractor().getVideoStreams();\n+        final List<VideoStream> videoOnlyStreams = extractor().getVideoOnlyStreams();\n+        assertNotNull(videoStreams);\n+        assertNotNull(videoOnlyStreams);\n+        videoStreams.addAll(videoOnlyStreams);\n+\n+        if (expectedHasVideoStreams()) {\n+            assertFalse(videoStreams.isEmpty());\n+\n+            for (VideoStream stream : videoStreams) {\n+                assertIsSecureUrl(stream.getUrl());\n+                assertFalse(stream.getResolution().isEmpty());\n+\n+                int formatId = stream.getFormatId();", "originalCommit": "e4ace2b0dc97db6df467f41a74219776304dac6f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fa29b78f77e1e323ec0512643f3bcaaf6bd13df0", "changed_code": [{"header": "diff --git a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\nindex 0e731d4a..6c0419d5 100644\n--- a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n+++ b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n", "chunk": "@@ -203,11 +246,11 @@ public abstract class DefaultStreamExtractorTest extends DefaultExtractorTest<St\n         if (expectedHasVideoStreams()) {\n             assertFalse(videoStreams.isEmpty());\n \n-            for (VideoStream stream : videoStreams) {\n+            for (final VideoStream stream : videoStreams) {\n                 assertIsSecureUrl(stream.getUrl());\n                 assertFalse(stream.getResolution().isEmpty());\n \n-                int formatId = stream.getFormatId();\n+                final int formatId = stream.getFormatId();\n                 assertTrue(\"format id does not fit a video stream: \" + formatId,\n                         0 <= formatId && formatId < 0x100);\n             }\n", "next_change": {"commit": "1d7a86e664717d09e33371bc87c289903b19feb2", "changed_code": [{"header": "diff --git a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\nindex 6c0419d5..406177f7 100644\n--- a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n+++ b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n", "chunk": "@@ -246,11 +202,11 @@ public abstract class DefaultStreamExtractorTest extends DefaultExtractorTest<St\n         if (expectedHasVideoStreams()) {\n             assertFalse(videoStreams.isEmpty());\n \n-            for (final VideoStream stream : videoStreams) {\n+            for (VideoStream stream : videoStreams) {\n                 assertIsSecureUrl(stream.getUrl());\n                 assertFalse(stream.getResolution().isEmpty());\n \n-                final int formatId = stream.getFormatId();\n+                int formatId = stream.getFormatId();\n                 assertTrue(\"format id does not fit a video stream: \" + formatId,\n                         0 <= formatId && formatId < 0x100);\n             }\n", "next_change": {"commit": "a087b092b401977bd58b279a3f285549db0e2160", "changed_code": [{"header": "diff --git a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\nindex 406177f7..fc2ebf43 100644\n--- a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n+++ b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n", "chunk": "@@ -202,11 +202,11 @@ public abstract class DefaultStreamExtractorTest extends DefaultExtractorTest<St\n         if (expectedHasVideoStreams()) {\n             assertFalse(videoStreams.isEmpty());\n \n-            for (VideoStream stream : videoStreams) {\n+            for (final VideoStream stream : videoStreams) {\n                 assertIsSecureUrl(stream.getUrl());\n                 assertFalse(stream.getResolution().isEmpty());\n \n-                int formatId = stream.getFormatId();\n+                final int formatId = stream.getFormatId();\n                 assertTrue(\"format id does not fit a video stream: \" + formatId,\n                         0 <= formatId && formatId < 0x100);\n             }\n", "next_change": {"commit": "57e7994c9e46d068ba53cb320c91c22ec24f76de", "changed_code": [{"header": "diff --git a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\nindex fc2ebf43..a70b38a8 100644\n--- a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n+++ b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n", "chunk": "@@ -207,6 +249,7 @@ public abstract class DefaultStreamExtractorTest extends DefaultExtractorTest<St\n                 assertFalse(stream.getResolution().isEmpty());\n \n                 final int formatId = stream.getFormatId();\n+                // see MediaFormat: video stream formats range from 0 to 0x100\n                 assertTrue(\"format id does not fit a video stream: \" + formatId,\n                         0 <= formatId && formatId < 0x100);\n             }\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA3MjQ1NA==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/309#discussion_r425072454", "body": "`final`", "bodyText": "final", "bodyHTML": "<p dir=\"auto\"><code>final</code></p>", "author": "wb9688", "createdAt": "2020-05-14T11:42:09Z", "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java", "diffHunk": "@@ -0,0 +1,297 @@\n+package org.schabi.newpipe.extractor.services;\n+\n+import org.junit.Test;\n+import org.schabi.newpipe.extractor.MediaFormat;\n+import org.schabi.newpipe.extractor.localization.DateWrapper;\n+import org.schabi.newpipe.extractor.stream.AudioStream;\n+import org.schabi.newpipe.extractor.stream.Description;\n+import org.schabi.newpipe.extractor.stream.Frameset;\n+import org.schabi.newpipe.extractor.stream.StreamExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemsCollector;\n+import org.schabi.newpipe.extractor.stream.StreamType;\n+import org.schabi.newpipe.extractor.stream.SubtitlesStream;\n+import org.schabi.newpipe.extractor.stream.VideoStream;\n+\n+import java.text.SimpleDateFormat;\n+import java.util.Calendar;\n+import java.util.List;\n+import java.util.TimeZone;\n+\n+import javax.annotation.Nullable;\n+\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.assertTrue;\n+import static org.schabi.newpipe.extractor.ExtractorAsserts.assertAtLeast;\n+import static org.schabi.newpipe.extractor.ExtractorAsserts.assertIsSecureUrl;\n+import static org.schabi.newpipe.extractor.ExtractorAsserts.assertIsValidUrl;\n+import static org.schabi.newpipe.extractor.services.DefaultTests.defaultTestListOfItems;\n+\n+/**\n+ * Test for {@link StreamExtractor}\n+ */\n+public abstract class DefaultStreamExtractorTest extends DefaultExtractorTest<StreamExtractor>\n+        implements BaseStreamExtractorTest {\n+\n+    public abstract StreamType expectedStreamType();\n+    public abstract String expectedUploaderName();\n+    public abstract String expectedUploaderUrl();\n+    public abstract List<String> expectedDescriptionContains(); // e.g. for full links\n+    public abstract long expectedLength();\n+    public long expectedTimestamp() { return 0; }; // default: there is no timestamp\n+    public abstract long expectedViewCountAtLeast();\n+    @Nullable public abstract String expectedUploadDate(); // format: \"yyyy-MM-dd HH:mm:ss.SSS\"\n+    @Nullable public abstract String expectedTextualUploadDate();\n+    public abstract long expectedLikeCountAtLeast(); // return -1 if ratings are disabled\n+    public abstract long expectedDislikeCountAtLeast(); // return -1 if ratings are disabled\n+    public boolean expectedHasRelatedStreams() { return true; } // default: there are related videos\n+    public int expectedAgeLimit() { return StreamExtractor.NO_AGE_LIMIT; } // default: no limit\n+    @Nullable public String expectedErrorMessage() { return null; } // default: no error message\n+    public boolean expectedHasVideoStreams() { return true; } // default: there are video streams\n+    public boolean expectedHasAudioStreams() { return true; } // default: there are audio streams\n+    public boolean expectedHasSubtitles() { return true; } // default: there are subtitles streams\n+    public boolean expectedHasFrames() { return true; } // default: there are frames\n+    public boolean expectedHasNextStream() { return true; } // default: there is a next video\n+\n+    @Test\n+    @Override\n+    public void testStreamType() throws Exception {\n+        assertEquals(expectedStreamType(), extractor().getStreamType());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testUploaderName() throws Exception {\n+        assertEquals(expectedUploaderName(), extractor().getUploaderName());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testUploaderUrl() throws Exception {\n+        final String uploaderUrl = extractor().getUploaderUrl();\n+        assertIsSecureUrl(uploaderUrl);\n+        assertEquals(expectedUploaderUrl(), uploaderUrl);\n+    }\n+\n+    @Test\n+    @Override\n+    public void testUploaderAvatarUrl() throws Exception {\n+        assertIsSecureUrl(extractor().getUploaderAvatarUrl());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testThumbnailUrl() throws Exception {\n+        assertIsSecureUrl(extractor().getThumbnailUrl());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testDescription() throws Exception {\n+        final Description description = extractor().getDescription();\n+        assertNotNull(description);\n+        assertFalse(\"description is empty\", description.getContent().isEmpty());\n+\n+        for (String s : expectedDescriptionContains()) {\n+            assertThat(description.getContent(), containsString(s));\n+        }\n+    }\n+\n+    @Test\n+    @Override\n+    public void testLength() throws Exception {\n+        assertEquals(expectedLength(), extractor().getLength());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testTimestamp() throws Exception {\n+        assertEquals(expectedTimestamp(), extractor().getTimeStamp());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testViewCount() throws Exception {\n+        assertAtLeast(expectedViewCountAtLeast(), extractor().getViewCount());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testUploadDate() throws Exception {\n+        final DateWrapper dateWrapper = extractor().getUploadDate();\n+\n+        if (expectedUploadDate() == null) {\n+            assertNull(dateWrapper);\n+        } else {\n+            assertNotNull(dateWrapper);\n+\n+            final Calendar expectedDate = Calendar.getInstance();\n+            final Calendar actualDate = dateWrapper.date();\n+            expectedDate.setTimeZone(TimeZone.getTimeZone(\"GMT\"));\n+            actualDate.setTimeZone(TimeZone.getTimeZone(\"GMT\"));\n+\n+            final SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.S\");\n+            expectedDate.setTime(sdf.parse(expectedUploadDate()));\n+            assertEquals(expectedDate, actualDate);\n+        }\n+    }\n+\n+    @Test\n+    @Override\n+    public void testTextualUploadDate() throws Exception {\n+        assertEquals(expectedTextualUploadDate(), extractor().getTextualUploadDate());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testLikeCount() throws Exception {\n+        if (expectedLikeCountAtLeast() == -1) {\n+            assertEquals(-1, extractor().getLikeCount());\n+        } else {\n+            assertAtLeast(expectedLikeCountAtLeast(), extractor().getLikeCount());\n+        }\n+    }\n+\n+    @Test\n+    @Override\n+    public void testDislikeCount() throws Exception {\n+        if (expectedDislikeCountAtLeast() == -1) {\n+            assertEquals(-1, extractor().getDislikeCount());\n+        } else {\n+            assertAtLeast(expectedDislikeCountAtLeast(), extractor().getDislikeCount());\n+        }\n+    }\n+\n+    @Test\n+    @Override\n+    public void testRelatedStreams() throws Exception {\n+        final StreamInfoItemsCollector relatedStreams = extractor().getRelatedStreams();\n+\n+        if (expectedHasRelatedStreams()) {\n+            defaultTestListOfItems(extractor().getService(), relatedStreams.getItems(),\n+                    relatedStreams.getErrors());\n+        } else {\n+            assertNull(relatedStreams);\n+        }\n+    }\n+\n+    @Test\n+    @Override\n+    public void testAgeLimit() throws Exception {\n+        assertEquals(expectedAgeLimit(), extractor().getAgeLimit());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testErrorMessage() throws Exception {\n+        assertEquals(expectedErrorMessage(), extractor().getErrorMessage());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testVideoStreams() throws Exception {\n+        List<VideoStream> videoStreams = extractor().getVideoStreams();\n+        final List<VideoStream> videoOnlyStreams = extractor().getVideoOnlyStreams();\n+        assertNotNull(videoStreams);\n+        assertNotNull(videoOnlyStreams);\n+        videoStreams.addAll(videoOnlyStreams);\n+\n+        if (expectedHasVideoStreams()) {\n+            assertFalse(videoStreams.isEmpty());\n+\n+            for (VideoStream stream : videoStreams) {\n+                assertIsSecureUrl(stream.getUrl());\n+                assertFalse(stream.getResolution().isEmpty());\n+\n+                int formatId = stream.getFormatId();\n+                assertTrue(\"format id does not fit a video stream: \" + formatId,\n+                        0 <= formatId && formatId < 0x100);\n+            }\n+        } else {\n+            assertTrue(videoStreams.isEmpty());\n+        }\n+    }\n+\n+    @Test\n+    @Override\n+    public void testAudioStreams() throws Exception {\n+        final List<AudioStream> audioStreams = extractor().getAudioStreams();\n+        assertNotNull(audioStreams);\n+\n+        if (expectedHasAudioStreams()) {\n+            assertFalse(audioStreams.isEmpty());\n+\n+            for (AudioStream stream : audioStreams) {\n+                assertIsSecureUrl(stream.getUrl());\n+\n+                int formatId = stream.getFormatId();", "originalCommit": "e4ace2b0dc97db6df467f41a74219776304dac6f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fa29b78f77e1e323ec0512643f3bcaaf6bd13df0", "changed_code": [{"header": "diff --git a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\nindex 0e731d4a..6c0419d5 100644\n--- a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n+++ b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n", "chunk": "@@ -225,10 +268,10 @@ public abstract class DefaultStreamExtractorTest extends DefaultExtractorTest<St\n         if (expectedHasAudioStreams()) {\n             assertFalse(audioStreams.isEmpty());\n \n-            for (AudioStream stream : audioStreams) {\n+            for (final AudioStream stream : audioStreams) {\n                 assertIsSecureUrl(stream.getUrl());\n \n-                int formatId = stream.getFormatId();\n+                final int formatId = stream.getFormatId();\n                 assertTrue(\"format id does not fit an audio stream: \" + formatId,\n                         0x100 <= formatId && formatId < 0x1000);\n             }\n", "next_change": {"commit": "1d7a86e664717d09e33371bc87c289903b19feb2", "changed_code": [{"header": "diff --git a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\nindex 6c0419d5..406177f7 100644\n--- a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n+++ b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n", "chunk": "@@ -268,10 +224,10 @@ public abstract class DefaultStreamExtractorTest extends DefaultExtractorTest<St\n         if (expectedHasAudioStreams()) {\n             assertFalse(audioStreams.isEmpty());\n \n-            for (final AudioStream stream : audioStreams) {\n+            for (AudioStream stream : audioStreams) {\n                 assertIsSecureUrl(stream.getUrl());\n \n-                final int formatId = stream.getFormatId();\n+                int formatId = stream.getFormatId();\n                 assertTrue(\"format id does not fit an audio stream: \" + formatId,\n                         0x100 <= formatId && formatId < 0x1000);\n             }\n", "next_change": {"commit": "a087b092b401977bd58b279a3f285549db0e2160", "changed_code": [{"header": "diff --git a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\nindex 406177f7..fc2ebf43 100644\n--- a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n+++ b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n", "chunk": "@@ -224,10 +224,10 @@ public abstract class DefaultStreamExtractorTest extends DefaultExtractorTest<St\n         if (expectedHasAudioStreams()) {\n             assertFalse(audioStreams.isEmpty());\n \n-            for (AudioStream stream : audioStreams) {\n+            for (final AudioStream stream : audioStreams) {\n                 assertIsSecureUrl(stream.getUrl());\n \n-                int formatId = stream.getFormatId();\n+                final int formatId = stream.getFormatId();\n                 assertTrue(\"format id does not fit an audio stream: \" + formatId,\n                         0x100 <= formatId && formatId < 0x1000);\n             }\n", "next_change": {"commit": "57e7994c9e46d068ba53cb320c91c22ec24f76de", "changed_code": [{"header": "diff --git a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\nindex fc2ebf43..a70b38a8 100644\n--- a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n+++ b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n", "chunk": "@@ -228,6 +271,7 @@ public abstract class DefaultStreamExtractorTest extends DefaultExtractorTest<St\n                 assertIsSecureUrl(stream.getUrl());\n \n                 final int formatId = stream.getFormatId();\n+                // see MediaFormat: video stream formats range from 0x100 to 0x1000\n                 assertTrue(\"format id does not fit an audio stream: \" + formatId,\n                         0x100 <= formatId && formatId < 0x1000);\n             }\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA3MjUyNQ==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/309#discussion_r425072525", "body": "`final`", "bodyText": "final", "bodyHTML": "<p dir=\"auto\"><code>final</code></p>", "author": "wb9688", "createdAt": "2020-05-14T11:42:16Z", "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java", "diffHunk": "@@ -0,0 +1,297 @@\n+package org.schabi.newpipe.extractor.services;\n+\n+import org.junit.Test;\n+import org.schabi.newpipe.extractor.MediaFormat;\n+import org.schabi.newpipe.extractor.localization.DateWrapper;\n+import org.schabi.newpipe.extractor.stream.AudioStream;\n+import org.schabi.newpipe.extractor.stream.Description;\n+import org.schabi.newpipe.extractor.stream.Frameset;\n+import org.schabi.newpipe.extractor.stream.StreamExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemsCollector;\n+import org.schabi.newpipe.extractor.stream.StreamType;\n+import org.schabi.newpipe.extractor.stream.SubtitlesStream;\n+import org.schabi.newpipe.extractor.stream.VideoStream;\n+\n+import java.text.SimpleDateFormat;\n+import java.util.Calendar;\n+import java.util.List;\n+import java.util.TimeZone;\n+\n+import javax.annotation.Nullable;\n+\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.assertTrue;\n+import static org.schabi.newpipe.extractor.ExtractorAsserts.assertAtLeast;\n+import static org.schabi.newpipe.extractor.ExtractorAsserts.assertIsSecureUrl;\n+import static org.schabi.newpipe.extractor.ExtractorAsserts.assertIsValidUrl;\n+import static org.schabi.newpipe.extractor.services.DefaultTests.defaultTestListOfItems;\n+\n+/**\n+ * Test for {@link StreamExtractor}\n+ */\n+public abstract class DefaultStreamExtractorTest extends DefaultExtractorTest<StreamExtractor>\n+        implements BaseStreamExtractorTest {\n+\n+    public abstract StreamType expectedStreamType();\n+    public abstract String expectedUploaderName();\n+    public abstract String expectedUploaderUrl();\n+    public abstract List<String> expectedDescriptionContains(); // e.g. for full links\n+    public abstract long expectedLength();\n+    public long expectedTimestamp() { return 0; }; // default: there is no timestamp\n+    public abstract long expectedViewCountAtLeast();\n+    @Nullable public abstract String expectedUploadDate(); // format: \"yyyy-MM-dd HH:mm:ss.SSS\"\n+    @Nullable public abstract String expectedTextualUploadDate();\n+    public abstract long expectedLikeCountAtLeast(); // return -1 if ratings are disabled\n+    public abstract long expectedDislikeCountAtLeast(); // return -1 if ratings are disabled\n+    public boolean expectedHasRelatedStreams() { return true; } // default: there are related videos\n+    public int expectedAgeLimit() { return StreamExtractor.NO_AGE_LIMIT; } // default: no limit\n+    @Nullable public String expectedErrorMessage() { return null; } // default: no error message\n+    public boolean expectedHasVideoStreams() { return true; } // default: there are video streams\n+    public boolean expectedHasAudioStreams() { return true; } // default: there are audio streams\n+    public boolean expectedHasSubtitles() { return true; } // default: there are subtitles streams\n+    public boolean expectedHasFrames() { return true; } // default: there are frames\n+    public boolean expectedHasNextStream() { return true; } // default: there is a next video\n+\n+    @Test\n+    @Override\n+    public void testStreamType() throws Exception {\n+        assertEquals(expectedStreamType(), extractor().getStreamType());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testUploaderName() throws Exception {\n+        assertEquals(expectedUploaderName(), extractor().getUploaderName());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testUploaderUrl() throws Exception {\n+        final String uploaderUrl = extractor().getUploaderUrl();\n+        assertIsSecureUrl(uploaderUrl);\n+        assertEquals(expectedUploaderUrl(), uploaderUrl);\n+    }\n+\n+    @Test\n+    @Override\n+    public void testUploaderAvatarUrl() throws Exception {\n+        assertIsSecureUrl(extractor().getUploaderAvatarUrl());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testThumbnailUrl() throws Exception {\n+        assertIsSecureUrl(extractor().getThumbnailUrl());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testDescription() throws Exception {\n+        final Description description = extractor().getDescription();\n+        assertNotNull(description);\n+        assertFalse(\"description is empty\", description.getContent().isEmpty());\n+\n+        for (String s : expectedDescriptionContains()) {\n+            assertThat(description.getContent(), containsString(s));\n+        }\n+    }\n+\n+    @Test\n+    @Override\n+    public void testLength() throws Exception {\n+        assertEquals(expectedLength(), extractor().getLength());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testTimestamp() throws Exception {\n+        assertEquals(expectedTimestamp(), extractor().getTimeStamp());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testViewCount() throws Exception {\n+        assertAtLeast(expectedViewCountAtLeast(), extractor().getViewCount());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testUploadDate() throws Exception {\n+        final DateWrapper dateWrapper = extractor().getUploadDate();\n+\n+        if (expectedUploadDate() == null) {\n+            assertNull(dateWrapper);\n+        } else {\n+            assertNotNull(dateWrapper);\n+\n+            final Calendar expectedDate = Calendar.getInstance();\n+            final Calendar actualDate = dateWrapper.date();\n+            expectedDate.setTimeZone(TimeZone.getTimeZone(\"GMT\"));\n+            actualDate.setTimeZone(TimeZone.getTimeZone(\"GMT\"));\n+\n+            final SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.S\");\n+            expectedDate.setTime(sdf.parse(expectedUploadDate()));\n+            assertEquals(expectedDate, actualDate);\n+        }\n+    }\n+\n+    @Test\n+    @Override\n+    public void testTextualUploadDate() throws Exception {\n+        assertEquals(expectedTextualUploadDate(), extractor().getTextualUploadDate());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testLikeCount() throws Exception {\n+        if (expectedLikeCountAtLeast() == -1) {\n+            assertEquals(-1, extractor().getLikeCount());\n+        } else {\n+            assertAtLeast(expectedLikeCountAtLeast(), extractor().getLikeCount());\n+        }\n+    }\n+\n+    @Test\n+    @Override\n+    public void testDislikeCount() throws Exception {\n+        if (expectedDislikeCountAtLeast() == -1) {\n+            assertEquals(-1, extractor().getDislikeCount());\n+        } else {\n+            assertAtLeast(expectedDislikeCountAtLeast(), extractor().getDislikeCount());\n+        }\n+    }\n+\n+    @Test\n+    @Override\n+    public void testRelatedStreams() throws Exception {\n+        final StreamInfoItemsCollector relatedStreams = extractor().getRelatedStreams();\n+\n+        if (expectedHasRelatedStreams()) {\n+            defaultTestListOfItems(extractor().getService(), relatedStreams.getItems(),\n+                    relatedStreams.getErrors());\n+        } else {\n+            assertNull(relatedStreams);\n+        }\n+    }\n+\n+    @Test\n+    @Override\n+    public void testAgeLimit() throws Exception {\n+        assertEquals(expectedAgeLimit(), extractor().getAgeLimit());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testErrorMessage() throws Exception {\n+        assertEquals(expectedErrorMessage(), extractor().getErrorMessage());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testVideoStreams() throws Exception {\n+        List<VideoStream> videoStreams = extractor().getVideoStreams();\n+        final List<VideoStream> videoOnlyStreams = extractor().getVideoOnlyStreams();\n+        assertNotNull(videoStreams);\n+        assertNotNull(videoOnlyStreams);\n+        videoStreams.addAll(videoOnlyStreams);\n+\n+        if (expectedHasVideoStreams()) {\n+            assertFalse(videoStreams.isEmpty());\n+\n+            for (VideoStream stream : videoStreams) {\n+                assertIsSecureUrl(stream.getUrl());\n+                assertFalse(stream.getResolution().isEmpty());\n+\n+                int formatId = stream.getFormatId();\n+                assertTrue(\"format id does not fit a video stream: \" + formatId,\n+                        0 <= formatId && formatId < 0x100);\n+            }\n+        } else {\n+            assertTrue(videoStreams.isEmpty());\n+        }\n+    }\n+\n+    @Test\n+    @Override\n+    public void testAudioStreams() throws Exception {\n+        final List<AudioStream> audioStreams = extractor().getAudioStreams();\n+        assertNotNull(audioStreams);\n+\n+        if (expectedHasAudioStreams()) {\n+            assertFalse(audioStreams.isEmpty());\n+\n+            for (AudioStream stream : audioStreams) {\n+                assertIsSecureUrl(stream.getUrl());\n+\n+                int formatId = stream.getFormatId();\n+                assertTrue(\"format id does not fit an audio stream: \" + formatId,\n+                        0x100 <= formatId && formatId < 0x1000);\n+            }\n+        } else {\n+            assertTrue(audioStreams.isEmpty());\n+        }\n+    }\n+\n+    @Test\n+    @Override\n+    public void testSubtitles() throws Exception {\n+        List<SubtitlesStream> subtitles = extractor().getSubtitlesDefault();", "originalCommit": "e4ace2b0dc97db6df467f41a74219776304dac6f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fa29b78f77e1e323ec0512643f3bcaaf6bd13df0", "changed_code": [{"header": "diff --git a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\nindex 0e731d4a..6c0419d5 100644\n--- a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n+++ b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n", "chunk": "@@ -240,28 +283,28 @@ public abstract class DefaultStreamExtractorTest extends DefaultExtractorTest<St\n     @Test\n     @Override\n     public void testSubtitles() throws Exception {\n-        List<SubtitlesStream> subtitles = extractor().getSubtitlesDefault();\n+        final List<SubtitlesStream> subtitles = extractor().getSubtitlesDefault();\n         assertNotNull(subtitles);\n \n         if (expectedHasSubtitles()) {\n             assertFalse(subtitles.isEmpty());\n \n-            for (SubtitlesStream stream : subtitles) {\n+            for (final SubtitlesStream stream : subtitles) {\n                 assertIsSecureUrl(stream.getUrl());\n \n-                int formatId = stream.getFormatId();\n-                assertTrue(\"format id does not fit an audio stream: \" + formatId,\n+                final int formatId = stream.getFormatId();\n+                assertTrue(\"format id does not fit a subtitles stream: \" + formatId,\n                         0x1000 <= formatId && formatId < 0x10000);\n             }\n         } else {\n             assertTrue(subtitles.isEmpty());\n \n-            MediaFormat[] formats = {MediaFormat.VTT, MediaFormat.TTML, MediaFormat.TRANSCRIPT1,\n-                    MediaFormat.TRANSCRIPT2, MediaFormat.TRANSCRIPT3, MediaFormat.SRT};\n-            for (MediaFormat format : formats) {\n-                subtitles = extractor().getSubtitles(format);\n-                assertNotNull(subtitles);\n-                assertTrue(subtitles.isEmpty());\n+            final MediaFormat[] formats = {MediaFormat.VTT, MediaFormat.TTML, MediaFormat.SRT,\n+                    MediaFormat.TRANSCRIPT1, MediaFormat.TRANSCRIPT2, MediaFormat.TRANSCRIPT3};\n+            for (final MediaFormat format : formats) {\n+                final List<SubtitlesStream> formatSubtitles = extractor().getSubtitles(format);\n+                assertNotNull(formatSubtitles);\n+                assertTrue(formatSubtitles.isEmpty());\n             }\n         }\n     }\n", "next_change": {"commit": "abbeacb312e1765afd9008cb61e6808c4544b701", "changed_code": [{"header": "diff --git a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\nindex 6c0419d5..2c495317 100644\n--- a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n+++ b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n", "chunk": "@@ -309,6 +308,18 @@ public abstract class DefaultStreamExtractorTest extends DefaultExtractorTest<St\n         }\n     }\n \n+    @Override\n+    public void testGetDashMpdUrl() throws Exception {\n+        final String dashMpdUrl = extractor().getDashMpdUrl();\n+        if (expectedDashMpdUrlContains() == null) {\n+            assertNotNull(dashMpdUrl);\n+            assertTrue(dashMpdUrl.isEmpty());\n+        } else {\n+            assertIsSecureUrl(dashMpdUrl);\n+            assertThat(extractor().getDashMpdUrl(), containsString(expectedDashMpdUrlContains()));\n+        }\n+    }\n+\n     @Test\n     @Override\n     public void testFrames() throws Exception {\n", "next_change": {"commit": "1d7a86e664717d09e33371bc87c289903b19feb2", "changed_code": [{"header": "diff --git a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\nindex 2c495317..406177f7 100644\n--- a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n+++ b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n", "chunk": "@@ -282,44 +239,32 @@ public abstract class DefaultStreamExtractorTest extends DefaultExtractorTest<St\n     @Test\n     @Override\n     public void testSubtitles() throws Exception {\n-        final List<SubtitlesStream> subtitles = extractor().getSubtitlesDefault();\n+        List<SubtitlesStream> subtitles = extractor().getSubtitlesDefault();\n         assertNotNull(subtitles);\n \n         if (expectedHasSubtitles()) {\n             assertFalse(subtitles.isEmpty());\n \n-            for (final SubtitlesStream stream : subtitles) {\n+            for (SubtitlesStream stream : subtitles) {\n                 assertIsSecureUrl(stream.getUrl());\n \n-                final int formatId = stream.getFormatId();\n-                assertTrue(\"format id does not fit a subtitles stream: \" + formatId,\n+                int formatId = stream.getFormatId();\n+                assertTrue(\"format id does not fit an audio stream: \" + formatId,\n                         0x1000 <= formatId && formatId < 0x10000);\n             }\n         } else {\n             assertTrue(subtitles.isEmpty());\n \n-            final MediaFormat[] formats = {MediaFormat.VTT, MediaFormat.TTML, MediaFormat.SRT,\n-                    MediaFormat.TRANSCRIPT1, MediaFormat.TRANSCRIPT2, MediaFormat.TRANSCRIPT3};\n-            for (final MediaFormat format : formats) {\n-                final List<SubtitlesStream> formatSubtitles = extractor().getSubtitles(format);\n-                assertNotNull(formatSubtitles);\n-                assertTrue(formatSubtitles.isEmpty());\n+            MediaFormat[] formats = {MediaFormat.VTT, MediaFormat.TTML, MediaFormat.TRANSCRIPT1,\n+                    MediaFormat.TRANSCRIPT2, MediaFormat.TRANSCRIPT3, MediaFormat.SRT};\n+            for (MediaFormat format : formats) {\n+                subtitles = extractor().getSubtitles(format);\n+                assertNotNull(subtitles);\n+                assertTrue(subtitles.isEmpty());\n             }\n         }\n     }\n \n-    @Override\n-    public void testGetDashMpdUrl() throws Exception {\n-        final String dashMpdUrl = extractor().getDashMpdUrl();\n-        if (expectedDashMpdUrlContains() == null) {\n-            assertNotNull(dashMpdUrl);\n-            assertTrue(dashMpdUrl.isEmpty());\n-        } else {\n-            assertIsSecureUrl(dashMpdUrl);\n-            assertThat(extractor().getDashMpdUrl(), containsString(expectedDashMpdUrlContains()));\n-        }\n-    }\n-\n     @Test\n     @Override\n     public void testFrames() throws Exception {\n", "next_change": {"commit": "a087b092b401977bd58b279a3f285549db0e2160", "changed_code": [{"header": "diff --git a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\nindex 406177f7..fc2ebf43 100644\n--- a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n+++ b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n", "chunk": "@@ -239,28 +239,28 @@ public abstract class DefaultStreamExtractorTest extends DefaultExtractorTest<St\n     @Test\n     @Override\n     public void testSubtitles() throws Exception {\n-        List<SubtitlesStream> subtitles = extractor().getSubtitlesDefault();\n+        final List<SubtitlesStream> subtitles = extractor().getSubtitlesDefault();\n         assertNotNull(subtitles);\n \n         if (expectedHasSubtitles()) {\n             assertFalse(subtitles.isEmpty());\n \n-            for (SubtitlesStream stream : subtitles) {\n+            for (final SubtitlesStream stream : subtitles) {\n                 assertIsSecureUrl(stream.getUrl());\n \n-                int formatId = stream.getFormatId();\n-                assertTrue(\"format id does not fit an audio stream: \" + formatId,\n+                final int formatId = stream.getFormatId();\n+                assertTrue(\"format id does not fit a subtitles stream: \" + formatId,\n                         0x1000 <= formatId && formatId < 0x10000);\n             }\n         } else {\n             assertTrue(subtitles.isEmpty());\n \n-            MediaFormat[] formats = {MediaFormat.VTT, MediaFormat.TTML, MediaFormat.TRANSCRIPT1,\n-                    MediaFormat.TRANSCRIPT2, MediaFormat.TRANSCRIPT3, MediaFormat.SRT};\n-            for (MediaFormat format : formats) {\n-                subtitles = extractor().getSubtitles(format);\n-                assertNotNull(subtitles);\n-                assertTrue(subtitles.isEmpty());\n+            final MediaFormat[] formats = {MediaFormat.VTT, MediaFormat.TTML, MediaFormat.SRT,\n+                    MediaFormat.TRANSCRIPT1, MediaFormat.TRANSCRIPT2, MediaFormat.TRANSCRIPT3};\n+            for (final MediaFormat format : formats) {\n+                final List<SubtitlesStream> formatSubtitles = extractor().getSubtitles(format);\n+                assertNotNull(formatSubtitles);\n+                assertTrue(formatSubtitles.isEmpty());\n             }\n         }\n     }\n", "next_change": {"commit": "880ff04a5c17086711c0d6d14d6aa46cf1943c54", "changed_code": [{"header": "diff --git a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\nindex fc2ebf43..8ab642d9 100644\n--- a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n+++ b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n", "chunk": "@@ -265,6 +307,18 @@ public abstract class DefaultStreamExtractorTest extends DefaultExtractorTest<St\n         }\n     }\n \n+    @Override\n+    public void testGetDashMpdUrl() throws Exception {\n+        final String dashMpdUrl = extractor().getDashMpdUrl();\n+        if (expectedDashMpdUrlContains() == null) {\n+            assertNotNull(dashMpdUrl);\n+            assertTrue(dashMpdUrl.isEmpty());\n+        } else {\n+            assertIsSecureUrl(dashMpdUrl);\n+            assertThat(extractor().getDashMpdUrl(), containsString(expectedDashMpdUrlContains()));\n+        }\n+    }\n+\n     @Test\n     @Override\n     public void testFrames() throws Exception {\n", "next_change": null}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA3MjU3NQ==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/309#discussion_r425072575", "body": "`final`", "bodyText": "final", "bodyHTML": "<p dir=\"auto\"><code>final</code></p>", "author": "wb9688", "createdAt": "2020-05-14T11:42:21Z", "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java", "diffHunk": "@@ -0,0 +1,297 @@\n+package org.schabi.newpipe.extractor.services;\n+\n+import org.junit.Test;\n+import org.schabi.newpipe.extractor.MediaFormat;\n+import org.schabi.newpipe.extractor.localization.DateWrapper;\n+import org.schabi.newpipe.extractor.stream.AudioStream;\n+import org.schabi.newpipe.extractor.stream.Description;\n+import org.schabi.newpipe.extractor.stream.Frameset;\n+import org.schabi.newpipe.extractor.stream.StreamExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemsCollector;\n+import org.schabi.newpipe.extractor.stream.StreamType;\n+import org.schabi.newpipe.extractor.stream.SubtitlesStream;\n+import org.schabi.newpipe.extractor.stream.VideoStream;\n+\n+import java.text.SimpleDateFormat;\n+import java.util.Calendar;\n+import java.util.List;\n+import java.util.TimeZone;\n+\n+import javax.annotation.Nullable;\n+\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.assertTrue;\n+import static org.schabi.newpipe.extractor.ExtractorAsserts.assertAtLeast;\n+import static org.schabi.newpipe.extractor.ExtractorAsserts.assertIsSecureUrl;\n+import static org.schabi.newpipe.extractor.ExtractorAsserts.assertIsValidUrl;\n+import static org.schabi.newpipe.extractor.services.DefaultTests.defaultTestListOfItems;\n+\n+/**\n+ * Test for {@link StreamExtractor}\n+ */\n+public abstract class DefaultStreamExtractorTest extends DefaultExtractorTest<StreamExtractor>\n+        implements BaseStreamExtractorTest {\n+\n+    public abstract StreamType expectedStreamType();\n+    public abstract String expectedUploaderName();\n+    public abstract String expectedUploaderUrl();\n+    public abstract List<String> expectedDescriptionContains(); // e.g. for full links\n+    public abstract long expectedLength();\n+    public long expectedTimestamp() { return 0; }; // default: there is no timestamp\n+    public abstract long expectedViewCountAtLeast();\n+    @Nullable public abstract String expectedUploadDate(); // format: \"yyyy-MM-dd HH:mm:ss.SSS\"\n+    @Nullable public abstract String expectedTextualUploadDate();\n+    public abstract long expectedLikeCountAtLeast(); // return -1 if ratings are disabled\n+    public abstract long expectedDislikeCountAtLeast(); // return -1 if ratings are disabled\n+    public boolean expectedHasRelatedStreams() { return true; } // default: there are related videos\n+    public int expectedAgeLimit() { return StreamExtractor.NO_AGE_LIMIT; } // default: no limit\n+    @Nullable public String expectedErrorMessage() { return null; } // default: no error message\n+    public boolean expectedHasVideoStreams() { return true; } // default: there are video streams\n+    public boolean expectedHasAudioStreams() { return true; } // default: there are audio streams\n+    public boolean expectedHasSubtitles() { return true; } // default: there are subtitles streams\n+    public boolean expectedHasFrames() { return true; } // default: there are frames\n+    public boolean expectedHasNextStream() { return true; } // default: there is a next video\n+\n+    @Test\n+    @Override\n+    public void testStreamType() throws Exception {\n+        assertEquals(expectedStreamType(), extractor().getStreamType());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testUploaderName() throws Exception {\n+        assertEquals(expectedUploaderName(), extractor().getUploaderName());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testUploaderUrl() throws Exception {\n+        final String uploaderUrl = extractor().getUploaderUrl();\n+        assertIsSecureUrl(uploaderUrl);\n+        assertEquals(expectedUploaderUrl(), uploaderUrl);\n+    }\n+\n+    @Test\n+    @Override\n+    public void testUploaderAvatarUrl() throws Exception {\n+        assertIsSecureUrl(extractor().getUploaderAvatarUrl());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testThumbnailUrl() throws Exception {\n+        assertIsSecureUrl(extractor().getThumbnailUrl());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testDescription() throws Exception {\n+        final Description description = extractor().getDescription();\n+        assertNotNull(description);\n+        assertFalse(\"description is empty\", description.getContent().isEmpty());\n+\n+        for (String s : expectedDescriptionContains()) {\n+            assertThat(description.getContent(), containsString(s));\n+        }\n+    }\n+\n+    @Test\n+    @Override\n+    public void testLength() throws Exception {\n+        assertEquals(expectedLength(), extractor().getLength());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testTimestamp() throws Exception {\n+        assertEquals(expectedTimestamp(), extractor().getTimeStamp());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testViewCount() throws Exception {\n+        assertAtLeast(expectedViewCountAtLeast(), extractor().getViewCount());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testUploadDate() throws Exception {\n+        final DateWrapper dateWrapper = extractor().getUploadDate();\n+\n+        if (expectedUploadDate() == null) {\n+            assertNull(dateWrapper);\n+        } else {\n+            assertNotNull(dateWrapper);\n+\n+            final Calendar expectedDate = Calendar.getInstance();\n+            final Calendar actualDate = dateWrapper.date();\n+            expectedDate.setTimeZone(TimeZone.getTimeZone(\"GMT\"));\n+            actualDate.setTimeZone(TimeZone.getTimeZone(\"GMT\"));\n+\n+            final SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.S\");\n+            expectedDate.setTime(sdf.parse(expectedUploadDate()));\n+            assertEquals(expectedDate, actualDate);\n+        }\n+    }\n+\n+    @Test\n+    @Override\n+    public void testTextualUploadDate() throws Exception {\n+        assertEquals(expectedTextualUploadDate(), extractor().getTextualUploadDate());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testLikeCount() throws Exception {\n+        if (expectedLikeCountAtLeast() == -1) {\n+            assertEquals(-1, extractor().getLikeCount());\n+        } else {\n+            assertAtLeast(expectedLikeCountAtLeast(), extractor().getLikeCount());\n+        }\n+    }\n+\n+    @Test\n+    @Override\n+    public void testDislikeCount() throws Exception {\n+        if (expectedDislikeCountAtLeast() == -1) {\n+            assertEquals(-1, extractor().getDislikeCount());\n+        } else {\n+            assertAtLeast(expectedDislikeCountAtLeast(), extractor().getDislikeCount());\n+        }\n+    }\n+\n+    @Test\n+    @Override\n+    public void testRelatedStreams() throws Exception {\n+        final StreamInfoItemsCollector relatedStreams = extractor().getRelatedStreams();\n+\n+        if (expectedHasRelatedStreams()) {\n+            defaultTestListOfItems(extractor().getService(), relatedStreams.getItems(),\n+                    relatedStreams.getErrors());\n+        } else {\n+            assertNull(relatedStreams);\n+        }\n+    }\n+\n+    @Test\n+    @Override\n+    public void testAgeLimit() throws Exception {\n+        assertEquals(expectedAgeLimit(), extractor().getAgeLimit());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testErrorMessage() throws Exception {\n+        assertEquals(expectedErrorMessage(), extractor().getErrorMessage());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testVideoStreams() throws Exception {\n+        List<VideoStream> videoStreams = extractor().getVideoStreams();\n+        final List<VideoStream> videoOnlyStreams = extractor().getVideoOnlyStreams();\n+        assertNotNull(videoStreams);\n+        assertNotNull(videoOnlyStreams);\n+        videoStreams.addAll(videoOnlyStreams);\n+\n+        if (expectedHasVideoStreams()) {\n+            assertFalse(videoStreams.isEmpty());\n+\n+            for (VideoStream stream : videoStreams) {\n+                assertIsSecureUrl(stream.getUrl());\n+                assertFalse(stream.getResolution().isEmpty());\n+\n+                int formatId = stream.getFormatId();\n+                assertTrue(\"format id does not fit a video stream: \" + formatId,\n+                        0 <= formatId && formatId < 0x100);\n+            }\n+        } else {\n+            assertTrue(videoStreams.isEmpty());\n+        }\n+    }\n+\n+    @Test\n+    @Override\n+    public void testAudioStreams() throws Exception {\n+        final List<AudioStream> audioStreams = extractor().getAudioStreams();\n+        assertNotNull(audioStreams);\n+\n+        if (expectedHasAudioStreams()) {\n+            assertFalse(audioStreams.isEmpty());\n+\n+            for (AudioStream stream : audioStreams) {\n+                assertIsSecureUrl(stream.getUrl());\n+\n+                int formatId = stream.getFormatId();\n+                assertTrue(\"format id does not fit an audio stream: \" + formatId,\n+                        0x100 <= formatId && formatId < 0x1000);\n+            }\n+        } else {\n+            assertTrue(audioStreams.isEmpty());\n+        }\n+    }\n+\n+    @Test\n+    @Override\n+    public void testSubtitles() throws Exception {\n+        List<SubtitlesStream> subtitles = extractor().getSubtitlesDefault();\n+        assertNotNull(subtitles);\n+\n+        if (expectedHasSubtitles()) {\n+            assertFalse(subtitles.isEmpty());\n+\n+            for (SubtitlesStream stream : subtitles) {\n+                assertIsSecureUrl(stream.getUrl());\n+\n+                int formatId = stream.getFormatId();", "originalCommit": "e4ace2b0dc97db6df467f41a74219776304dac6f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fa29b78f77e1e323ec0512643f3bcaaf6bd13df0", "changed_code": [{"header": "diff --git a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\nindex 0e731d4a..6c0419d5 100644\n--- a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n+++ b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n", "chunk": "@@ -240,28 +283,28 @@ public abstract class DefaultStreamExtractorTest extends DefaultExtractorTest<St\n     @Test\n     @Override\n     public void testSubtitles() throws Exception {\n-        List<SubtitlesStream> subtitles = extractor().getSubtitlesDefault();\n+        final List<SubtitlesStream> subtitles = extractor().getSubtitlesDefault();\n         assertNotNull(subtitles);\n \n         if (expectedHasSubtitles()) {\n             assertFalse(subtitles.isEmpty());\n \n-            for (SubtitlesStream stream : subtitles) {\n+            for (final SubtitlesStream stream : subtitles) {\n                 assertIsSecureUrl(stream.getUrl());\n \n-                int formatId = stream.getFormatId();\n-                assertTrue(\"format id does not fit an audio stream: \" + formatId,\n+                final int formatId = stream.getFormatId();\n+                assertTrue(\"format id does not fit a subtitles stream: \" + formatId,\n                         0x1000 <= formatId && formatId < 0x10000);\n             }\n         } else {\n             assertTrue(subtitles.isEmpty());\n \n-            MediaFormat[] formats = {MediaFormat.VTT, MediaFormat.TTML, MediaFormat.TRANSCRIPT1,\n-                    MediaFormat.TRANSCRIPT2, MediaFormat.TRANSCRIPT3, MediaFormat.SRT};\n-            for (MediaFormat format : formats) {\n-                subtitles = extractor().getSubtitles(format);\n-                assertNotNull(subtitles);\n-                assertTrue(subtitles.isEmpty());\n+            final MediaFormat[] formats = {MediaFormat.VTT, MediaFormat.TTML, MediaFormat.SRT,\n+                    MediaFormat.TRANSCRIPT1, MediaFormat.TRANSCRIPT2, MediaFormat.TRANSCRIPT3};\n+            for (final MediaFormat format : formats) {\n+                final List<SubtitlesStream> formatSubtitles = extractor().getSubtitles(format);\n+                assertNotNull(formatSubtitles);\n+                assertTrue(formatSubtitles.isEmpty());\n             }\n         }\n     }\n", "next_change": {"commit": "abbeacb312e1765afd9008cb61e6808c4544b701", "changed_code": [{"header": "diff --git a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\nindex 6c0419d5..2c495317 100644\n--- a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n+++ b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n", "chunk": "@@ -309,6 +308,18 @@ public abstract class DefaultStreamExtractorTest extends DefaultExtractorTest<St\n         }\n     }\n \n+    @Override\n+    public void testGetDashMpdUrl() throws Exception {\n+        final String dashMpdUrl = extractor().getDashMpdUrl();\n+        if (expectedDashMpdUrlContains() == null) {\n+            assertNotNull(dashMpdUrl);\n+            assertTrue(dashMpdUrl.isEmpty());\n+        } else {\n+            assertIsSecureUrl(dashMpdUrl);\n+            assertThat(extractor().getDashMpdUrl(), containsString(expectedDashMpdUrlContains()));\n+        }\n+    }\n+\n     @Test\n     @Override\n     public void testFrames() throws Exception {\n", "next_change": {"commit": "1d7a86e664717d09e33371bc87c289903b19feb2", "changed_code": [{"header": "diff --git a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\nindex 2c495317..406177f7 100644\n--- a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n+++ b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n", "chunk": "@@ -282,44 +239,32 @@ public abstract class DefaultStreamExtractorTest extends DefaultExtractorTest<St\n     @Test\n     @Override\n     public void testSubtitles() throws Exception {\n-        final List<SubtitlesStream> subtitles = extractor().getSubtitlesDefault();\n+        List<SubtitlesStream> subtitles = extractor().getSubtitlesDefault();\n         assertNotNull(subtitles);\n \n         if (expectedHasSubtitles()) {\n             assertFalse(subtitles.isEmpty());\n \n-            for (final SubtitlesStream stream : subtitles) {\n+            for (SubtitlesStream stream : subtitles) {\n                 assertIsSecureUrl(stream.getUrl());\n \n-                final int formatId = stream.getFormatId();\n-                assertTrue(\"format id does not fit a subtitles stream: \" + formatId,\n+                int formatId = stream.getFormatId();\n+                assertTrue(\"format id does not fit an audio stream: \" + formatId,\n                         0x1000 <= formatId && formatId < 0x10000);\n             }\n         } else {\n             assertTrue(subtitles.isEmpty());\n \n-            final MediaFormat[] formats = {MediaFormat.VTT, MediaFormat.TTML, MediaFormat.SRT,\n-                    MediaFormat.TRANSCRIPT1, MediaFormat.TRANSCRIPT2, MediaFormat.TRANSCRIPT3};\n-            for (final MediaFormat format : formats) {\n-                final List<SubtitlesStream> formatSubtitles = extractor().getSubtitles(format);\n-                assertNotNull(formatSubtitles);\n-                assertTrue(formatSubtitles.isEmpty());\n+            MediaFormat[] formats = {MediaFormat.VTT, MediaFormat.TTML, MediaFormat.TRANSCRIPT1,\n+                    MediaFormat.TRANSCRIPT2, MediaFormat.TRANSCRIPT3, MediaFormat.SRT};\n+            for (MediaFormat format : formats) {\n+                subtitles = extractor().getSubtitles(format);\n+                assertNotNull(subtitles);\n+                assertTrue(subtitles.isEmpty());\n             }\n         }\n     }\n \n-    @Override\n-    public void testGetDashMpdUrl() throws Exception {\n-        final String dashMpdUrl = extractor().getDashMpdUrl();\n-        if (expectedDashMpdUrlContains() == null) {\n-            assertNotNull(dashMpdUrl);\n-            assertTrue(dashMpdUrl.isEmpty());\n-        } else {\n-            assertIsSecureUrl(dashMpdUrl);\n-            assertThat(extractor().getDashMpdUrl(), containsString(expectedDashMpdUrlContains()));\n-        }\n-    }\n-\n     @Test\n     @Override\n     public void testFrames() throws Exception {\n", "next_change": {"commit": "a087b092b401977bd58b279a3f285549db0e2160", "changed_code": [{"header": "diff --git a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\nindex 406177f7..fc2ebf43 100644\n--- a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n+++ b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n", "chunk": "@@ -239,28 +239,28 @@ public abstract class DefaultStreamExtractorTest extends DefaultExtractorTest<St\n     @Test\n     @Override\n     public void testSubtitles() throws Exception {\n-        List<SubtitlesStream> subtitles = extractor().getSubtitlesDefault();\n+        final List<SubtitlesStream> subtitles = extractor().getSubtitlesDefault();\n         assertNotNull(subtitles);\n \n         if (expectedHasSubtitles()) {\n             assertFalse(subtitles.isEmpty());\n \n-            for (SubtitlesStream stream : subtitles) {\n+            for (final SubtitlesStream stream : subtitles) {\n                 assertIsSecureUrl(stream.getUrl());\n \n-                int formatId = stream.getFormatId();\n-                assertTrue(\"format id does not fit an audio stream: \" + formatId,\n+                final int formatId = stream.getFormatId();\n+                assertTrue(\"format id does not fit a subtitles stream: \" + formatId,\n                         0x1000 <= formatId && formatId < 0x10000);\n             }\n         } else {\n             assertTrue(subtitles.isEmpty());\n \n-            MediaFormat[] formats = {MediaFormat.VTT, MediaFormat.TTML, MediaFormat.TRANSCRIPT1,\n-                    MediaFormat.TRANSCRIPT2, MediaFormat.TRANSCRIPT3, MediaFormat.SRT};\n-            for (MediaFormat format : formats) {\n-                subtitles = extractor().getSubtitles(format);\n-                assertNotNull(subtitles);\n-                assertTrue(subtitles.isEmpty());\n+            final MediaFormat[] formats = {MediaFormat.VTT, MediaFormat.TTML, MediaFormat.SRT,\n+                    MediaFormat.TRANSCRIPT1, MediaFormat.TRANSCRIPT2, MediaFormat.TRANSCRIPT3};\n+            for (final MediaFormat format : formats) {\n+                final List<SubtitlesStream> formatSubtitles = extractor().getSubtitles(format);\n+                assertNotNull(formatSubtitles);\n+                assertTrue(formatSubtitles.isEmpty());\n             }\n         }\n     }\n", "next_change": {"commit": "880ff04a5c17086711c0d6d14d6aa46cf1943c54", "changed_code": [{"header": "diff --git a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\nindex fc2ebf43..8ab642d9 100644\n--- a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n+++ b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n", "chunk": "@@ -265,6 +307,18 @@ public abstract class DefaultStreamExtractorTest extends DefaultExtractorTest<St\n         }\n     }\n \n+    @Override\n+    public void testGetDashMpdUrl() throws Exception {\n+        final String dashMpdUrl = extractor().getDashMpdUrl();\n+        if (expectedDashMpdUrlContains() == null) {\n+            assertNotNull(dashMpdUrl);\n+            assertTrue(dashMpdUrl.isEmpty());\n+        } else {\n+            assertIsSecureUrl(dashMpdUrl);\n+            assertThat(extractor().getDashMpdUrl(), containsString(expectedDashMpdUrlContains()));\n+        }\n+    }\n+\n     @Test\n     @Override\n     public void testFrames() throws Exception {\n", "next_change": null}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA3MjYxNA==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/309#discussion_r425072614", "body": "`final`", "bodyText": "final", "bodyHTML": "<p dir=\"auto\"><code>final</code></p>", "author": "wb9688", "createdAt": "2020-05-14T11:42:26Z", "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java", "diffHunk": "@@ -0,0 +1,297 @@\n+package org.schabi.newpipe.extractor.services;\n+\n+import org.junit.Test;\n+import org.schabi.newpipe.extractor.MediaFormat;\n+import org.schabi.newpipe.extractor.localization.DateWrapper;\n+import org.schabi.newpipe.extractor.stream.AudioStream;\n+import org.schabi.newpipe.extractor.stream.Description;\n+import org.schabi.newpipe.extractor.stream.Frameset;\n+import org.schabi.newpipe.extractor.stream.StreamExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemsCollector;\n+import org.schabi.newpipe.extractor.stream.StreamType;\n+import org.schabi.newpipe.extractor.stream.SubtitlesStream;\n+import org.schabi.newpipe.extractor.stream.VideoStream;\n+\n+import java.text.SimpleDateFormat;\n+import java.util.Calendar;\n+import java.util.List;\n+import java.util.TimeZone;\n+\n+import javax.annotation.Nullable;\n+\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.assertTrue;\n+import static org.schabi.newpipe.extractor.ExtractorAsserts.assertAtLeast;\n+import static org.schabi.newpipe.extractor.ExtractorAsserts.assertIsSecureUrl;\n+import static org.schabi.newpipe.extractor.ExtractorAsserts.assertIsValidUrl;\n+import static org.schabi.newpipe.extractor.services.DefaultTests.defaultTestListOfItems;\n+\n+/**\n+ * Test for {@link StreamExtractor}\n+ */\n+public abstract class DefaultStreamExtractorTest extends DefaultExtractorTest<StreamExtractor>\n+        implements BaseStreamExtractorTest {\n+\n+    public abstract StreamType expectedStreamType();\n+    public abstract String expectedUploaderName();\n+    public abstract String expectedUploaderUrl();\n+    public abstract List<String> expectedDescriptionContains(); // e.g. for full links\n+    public abstract long expectedLength();\n+    public long expectedTimestamp() { return 0; }; // default: there is no timestamp\n+    public abstract long expectedViewCountAtLeast();\n+    @Nullable public abstract String expectedUploadDate(); // format: \"yyyy-MM-dd HH:mm:ss.SSS\"\n+    @Nullable public abstract String expectedTextualUploadDate();\n+    public abstract long expectedLikeCountAtLeast(); // return -1 if ratings are disabled\n+    public abstract long expectedDislikeCountAtLeast(); // return -1 if ratings are disabled\n+    public boolean expectedHasRelatedStreams() { return true; } // default: there are related videos\n+    public int expectedAgeLimit() { return StreamExtractor.NO_AGE_LIMIT; } // default: no limit\n+    @Nullable public String expectedErrorMessage() { return null; } // default: no error message\n+    public boolean expectedHasVideoStreams() { return true; } // default: there are video streams\n+    public boolean expectedHasAudioStreams() { return true; } // default: there are audio streams\n+    public boolean expectedHasSubtitles() { return true; } // default: there are subtitles streams\n+    public boolean expectedHasFrames() { return true; } // default: there are frames\n+    public boolean expectedHasNextStream() { return true; } // default: there is a next video\n+\n+    @Test\n+    @Override\n+    public void testStreamType() throws Exception {\n+        assertEquals(expectedStreamType(), extractor().getStreamType());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testUploaderName() throws Exception {\n+        assertEquals(expectedUploaderName(), extractor().getUploaderName());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testUploaderUrl() throws Exception {\n+        final String uploaderUrl = extractor().getUploaderUrl();\n+        assertIsSecureUrl(uploaderUrl);\n+        assertEquals(expectedUploaderUrl(), uploaderUrl);\n+    }\n+\n+    @Test\n+    @Override\n+    public void testUploaderAvatarUrl() throws Exception {\n+        assertIsSecureUrl(extractor().getUploaderAvatarUrl());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testThumbnailUrl() throws Exception {\n+        assertIsSecureUrl(extractor().getThumbnailUrl());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testDescription() throws Exception {\n+        final Description description = extractor().getDescription();\n+        assertNotNull(description);\n+        assertFalse(\"description is empty\", description.getContent().isEmpty());\n+\n+        for (String s : expectedDescriptionContains()) {\n+            assertThat(description.getContent(), containsString(s));\n+        }\n+    }\n+\n+    @Test\n+    @Override\n+    public void testLength() throws Exception {\n+        assertEquals(expectedLength(), extractor().getLength());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testTimestamp() throws Exception {\n+        assertEquals(expectedTimestamp(), extractor().getTimeStamp());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testViewCount() throws Exception {\n+        assertAtLeast(expectedViewCountAtLeast(), extractor().getViewCount());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testUploadDate() throws Exception {\n+        final DateWrapper dateWrapper = extractor().getUploadDate();\n+\n+        if (expectedUploadDate() == null) {\n+            assertNull(dateWrapper);\n+        } else {\n+            assertNotNull(dateWrapper);\n+\n+            final Calendar expectedDate = Calendar.getInstance();\n+            final Calendar actualDate = dateWrapper.date();\n+            expectedDate.setTimeZone(TimeZone.getTimeZone(\"GMT\"));\n+            actualDate.setTimeZone(TimeZone.getTimeZone(\"GMT\"));\n+\n+            final SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.S\");\n+            expectedDate.setTime(sdf.parse(expectedUploadDate()));\n+            assertEquals(expectedDate, actualDate);\n+        }\n+    }\n+\n+    @Test\n+    @Override\n+    public void testTextualUploadDate() throws Exception {\n+        assertEquals(expectedTextualUploadDate(), extractor().getTextualUploadDate());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testLikeCount() throws Exception {\n+        if (expectedLikeCountAtLeast() == -1) {\n+            assertEquals(-1, extractor().getLikeCount());\n+        } else {\n+            assertAtLeast(expectedLikeCountAtLeast(), extractor().getLikeCount());\n+        }\n+    }\n+\n+    @Test\n+    @Override\n+    public void testDislikeCount() throws Exception {\n+        if (expectedDislikeCountAtLeast() == -1) {\n+            assertEquals(-1, extractor().getDislikeCount());\n+        } else {\n+            assertAtLeast(expectedDislikeCountAtLeast(), extractor().getDislikeCount());\n+        }\n+    }\n+\n+    @Test\n+    @Override\n+    public void testRelatedStreams() throws Exception {\n+        final StreamInfoItemsCollector relatedStreams = extractor().getRelatedStreams();\n+\n+        if (expectedHasRelatedStreams()) {\n+            defaultTestListOfItems(extractor().getService(), relatedStreams.getItems(),\n+                    relatedStreams.getErrors());\n+        } else {\n+            assertNull(relatedStreams);\n+        }\n+    }\n+\n+    @Test\n+    @Override\n+    public void testAgeLimit() throws Exception {\n+        assertEquals(expectedAgeLimit(), extractor().getAgeLimit());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testErrorMessage() throws Exception {\n+        assertEquals(expectedErrorMessage(), extractor().getErrorMessage());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testVideoStreams() throws Exception {\n+        List<VideoStream> videoStreams = extractor().getVideoStreams();\n+        final List<VideoStream> videoOnlyStreams = extractor().getVideoOnlyStreams();\n+        assertNotNull(videoStreams);\n+        assertNotNull(videoOnlyStreams);\n+        videoStreams.addAll(videoOnlyStreams);\n+\n+        if (expectedHasVideoStreams()) {\n+            assertFalse(videoStreams.isEmpty());\n+\n+            for (VideoStream stream : videoStreams) {\n+                assertIsSecureUrl(stream.getUrl());\n+                assertFalse(stream.getResolution().isEmpty());\n+\n+                int formatId = stream.getFormatId();\n+                assertTrue(\"format id does not fit a video stream: \" + formatId,\n+                        0 <= formatId && formatId < 0x100);\n+            }\n+        } else {\n+            assertTrue(videoStreams.isEmpty());\n+        }\n+    }\n+\n+    @Test\n+    @Override\n+    public void testAudioStreams() throws Exception {\n+        final List<AudioStream> audioStreams = extractor().getAudioStreams();\n+        assertNotNull(audioStreams);\n+\n+        if (expectedHasAudioStreams()) {\n+            assertFalse(audioStreams.isEmpty());\n+\n+            for (AudioStream stream : audioStreams) {\n+                assertIsSecureUrl(stream.getUrl());\n+\n+                int formatId = stream.getFormatId();\n+                assertTrue(\"format id does not fit an audio stream: \" + formatId,\n+                        0x100 <= formatId && formatId < 0x1000);\n+            }\n+        } else {\n+            assertTrue(audioStreams.isEmpty());\n+        }\n+    }\n+\n+    @Test\n+    @Override\n+    public void testSubtitles() throws Exception {\n+        List<SubtitlesStream> subtitles = extractor().getSubtitlesDefault();\n+        assertNotNull(subtitles);\n+\n+        if (expectedHasSubtitles()) {\n+            assertFalse(subtitles.isEmpty());\n+\n+            for (SubtitlesStream stream : subtitles) {\n+                assertIsSecureUrl(stream.getUrl());\n+\n+                int formatId = stream.getFormatId();\n+                assertTrue(\"format id does not fit an audio stream: \" + formatId,\n+                        0x1000 <= formatId && formatId < 0x10000);\n+            }\n+        } else {\n+            assertTrue(subtitles.isEmpty());\n+\n+            MediaFormat[] formats = {MediaFormat.VTT, MediaFormat.TTML, MediaFormat.TRANSCRIPT1,", "originalCommit": "e4ace2b0dc97db6df467f41a74219776304dac6f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fa29b78f77e1e323ec0512643f3bcaaf6bd13df0", "changed_code": [{"header": "diff --git a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\nindex 0e731d4a..6c0419d5 100644\n--- a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n+++ b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n", "chunk": "@@ -240,28 +283,28 @@ public abstract class DefaultStreamExtractorTest extends DefaultExtractorTest<St\n     @Test\n     @Override\n     public void testSubtitles() throws Exception {\n-        List<SubtitlesStream> subtitles = extractor().getSubtitlesDefault();\n+        final List<SubtitlesStream> subtitles = extractor().getSubtitlesDefault();\n         assertNotNull(subtitles);\n \n         if (expectedHasSubtitles()) {\n             assertFalse(subtitles.isEmpty());\n \n-            for (SubtitlesStream stream : subtitles) {\n+            for (final SubtitlesStream stream : subtitles) {\n                 assertIsSecureUrl(stream.getUrl());\n \n-                int formatId = stream.getFormatId();\n-                assertTrue(\"format id does not fit an audio stream: \" + formatId,\n+                final int formatId = stream.getFormatId();\n+                assertTrue(\"format id does not fit a subtitles stream: \" + formatId,\n                         0x1000 <= formatId && formatId < 0x10000);\n             }\n         } else {\n             assertTrue(subtitles.isEmpty());\n \n-            MediaFormat[] formats = {MediaFormat.VTT, MediaFormat.TTML, MediaFormat.TRANSCRIPT1,\n-                    MediaFormat.TRANSCRIPT2, MediaFormat.TRANSCRIPT3, MediaFormat.SRT};\n-            for (MediaFormat format : formats) {\n-                subtitles = extractor().getSubtitles(format);\n-                assertNotNull(subtitles);\n-                assertTrue(subtitles.isEmpty());\n+            final MediaFormat[] formats = {MediaFormat.VTT, MediaFormat.TTML, MediaFormat.SRT,\n+                    MediaFormat.TRANSCRIPT1, MediaFormat.TRANSCRIPT2, MediaFormat.TRANSCRIPT3};\n+            for (final MediaFormat format : formats) {\n+                final List<SubtitlesStream> formatSubtitles = extractor().getSubtitles(format);\n+                assertNotNull(formatSubtitles);\n+                assertTrue(formatSubtitles.isEmpty());\n             }\n         }\n     }\n", "next_change": {"commit": "abbeacb312e1765afd9008cb61e6808c4544b701", "changed_code": [{"header": "diff --git a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\nindex 6c0419d5..2c495317 100644\n--- a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n+++ b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n", "chunk": "@@ -309,6 +308,18 @@ public abstract class DefaultStreamExtractorTest extends DefaultExtractorTest<St\n         }\n     }\n \n+    @Override\n+    public void testGetDashMpdUrl() throws Exception {\n+        final String dashMpdUrl = extractor().getDashMpdUrl();\n+        if (expectedDashMpdUrlContains() == null) {\n+            assertNotNull(dashMpdUrl);\n+            assertTrue(dashMpdUrl.isEmpty());\n+        } else {\n+            assertIsSecureUrl(dashMpdUrl);\n+            assertThat(extractor().getDashMpdUrl(), containsString(expectedDashMpdUrlContains()));\n+        }\n+    }\n+\n     @Test\n     @Override\n     public void testFrames() throws Exception {\n", "next_change": {"commit": "1d7a86e664717d09e33371bc87c289903b19feb2", "changed_code": [{"header": "diff --git a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\nindex 2c495317..406177f7 100644\n--- a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n+++ b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n", "chunk": "@@ -282,44 +239,32 @@ public abstract class DefaultStreamExtractorTest extends DefaultExtractorTest<St\n     @Test\n     @Override\n     public void testSubtitles() throws Exception {\n-        final List<SubtitlesStream> subtitles = extractor().getSubtitlesDefault();\n+        List<SubtitlesStream> subtitles = extractor().getSubtitlesDefault();\n         assertNotNull(subtitles);\n \n         if (expectedHasSubtitles()) {\n             assertFalse(subtitles.isEmpty());\n \n-            for (final SubtitlesStream stream : subtitles) {\n+            for (SubtitlesStream stream : subtitles) {\n                 assertIsSecureUrl(stream.getUrl());\n \n-                final int formatId = stream.getFormatId();\n-                assertTrue(\"format id does not fit a subtitles stream: \" + formatId,\n+                int formatId = stream.getFormatId();\n+                assertTrue(\"format id does not fit an audio stream: \" + formatId,\n                         0x1000 <= formatId && formatId < 0x10000);\n             }\n         } else {\n             assertTrue(subtitles.isEmpty());\n \n-            final MediaFormat[] formats = {MediaFormat.VTT, MediaFormat.TTML, MediaFormat.SRT,\n-                    MediaFormat.TRANSCRIPT1, MediaFormat.TRANSCRIPT2, MediaFormat.TRANSCRIPT3};\n-            for (final MediaFormat format : formats) {\n-                final List<SubtitlesStream> formatSubtitles = extractor().getSubtitles(format);\n-                assertNotNull(formatSubtitles);\n-                assertTrue(formatSubtitles.isEmpty());\n+            MediaFormat[] formats = {MediaFormat.VTT, MediaFormat.TTML, MediaFormat.TRANSCRIPT1,\n+                    MediaFormat.TRANSCRIPT2, MediaFormat.TRANSCRIPT3, MediaFormat.SRT};\n+            for (MediaFormat format : formats) {\n+                subtitles = extractor().getSubtitles(format);\n+                assertNotNull(subtitles);\n+                assertTrue(subtitles.isEmpty());\n             }\n         }\n     }\n \n-    @Override\n-    public void testGetDashMpdUrl() throws Exception {\n-        final String dashMpdUrl = extractor().getDashMpdUrl();\n-        if (expectedDashMpdUrlContains() == null) {\n-            assertNotNull(dashMpdUrl);\n-            assertTrue(dashMpdUrl.isEmpty());\n-        } else {\n-            assertIsSecureUrl(dashMpdUrl);\n-            assertThat(extractor().getDashMpdUrl(), containsString(expectedDashMpdUrlContains()));\n-        }\n-    }\n-\n     @Test\n     @Override\n     public void testFrames() throws Exception {\n", "next_change": {"commit": "a087b092b401977bd58b279a3f285549db0e2160", "changed_code": [{"header": "diff --git a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\nindex 406177f7..fc2ebf43 100644\n--- a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n+++ b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n", "chunk": "@@ -239,28 +239,28 @@ public abstract class DefaultStreamExtractorTest extends DefaultExtractorTest<St\n     @Test\n     @Override\n     public void testSubtitles() throws Exception {\n-        List<SubtitlesStream> subtitles = extractor().getSubtitlesDefault();\n+        final List<SubtitlesStream> subtitles = extractor().getSubtitlesDefault();\n         assertNotNull(subtitles);\n \n         if (expectedHasSubtitles()) {\n             assertFalse(subtitles.isEmpty());\n \n-            for (SubtitlesStream stream : subtitles) {\n+            for (final SubtitlesStream stream : subtitles) {\n                 assertIsSecureUrl(stream.getUrl());\n \n-                int formatId = stream.getFormatId();\n-                assertTrue(\"format id does not fit an audio stream: \" + formatId,\n+                final int formatId = stream.getFormatId();\n+                assertTrue(\"format id does not fit a subtitles stream: \" + formatId,\n                         0x1000 <= formatId && formatId < 0x10000);\n             }\n         } else {\n             assertTrue(subtitles.isEmpty());\n \n-            MediaFormat[] formats = {MediaFormat.VTT, MediaFormat.TTML, MediaFormat.TRANSCRIPT1,\n-                    MediaFormat.TRANSCRIPT2, MediaFormat.TRANSCRIPT3, MediaFormat.SRT};\n-            for (MediaFormat format : formats) {\n-                subtitles = extractor().getSubtitles(format);\n-                assertNotNull(subtitles);\n-                assertTrue(subtitles.isEmpty());\n+            final MediaFormat[] formats = {MediaFormat.VTT, MediaFormat.TTML, MediaFormat.SRT,\n+                    MediaFormat.TRANSCRIPT1, MediaFormat.TRANSCRIPT2, MediaFormat.TRANSCRIPT3};\n+            for (final MediaFormat format : formats) {\n+                final List<SubtitlesStream> formatSubtitles = extractor().getSubtitles(format);\n+                assertNotNull(formatSubtitles);\n+                assertTrue(formatSubtitles.isEmpty());\n             }\n         }\n     }\n", "next_change": {"commit": "880ff04a5c17086711c0d6d14d6aa46cf1943c54", "changed_code": [{"header": "diff --git a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\nindex fc2ebf43..8ab642d9 100644\n--- a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n+++ b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n", "chunk": "@@ -265,6 +307,18 @@ public abstract class DefaultStreamExtractorTest extends DefaultExtractorTest<St\n         }\n     }\n \n+    @Override\n+    public void testGetDashMpdUrl() throws Exception {\n+        final String dashMpdUrl = extractor().getDashMpdUrl();\n+        if (expectedDashMpdUrlContains() == null) {\n+            assertNotNull(dashMpdUrl);\n+            assertTrue(dashMpdUrl.isEmpty());\n+        } else {\n+            assertIsSecureUrl(dashMpdUrl);\n+            assertThat(extractor().getDashMpdUrl(), containsString(expectedDashMpdUrlContains()));\n+        }\n+    }\n+\n     @Test\n     @Override\n     public void testFrames() throws Exception {\n", "next_change": null}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA3MzQyMA==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/309#discussion_r425073420", "body": "Make this a variable that's declared here, because this is imho unclear", "bodyText": "Make this a variable that's declared here, because this is imho unclear", "bodyHTML": "<p dir=\"auto\">Make this a variable that's declared here, because this is imho unclear</p>", "author": "wb9688", "createdAt": "2020-05-14T11:43:58Z", "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java", "diffHunk": "@@ -0,0 +1,297 @@\n+package org.schabi.newpipe.extractor.services;\n+\n+import org.junit.Test;\n+import org.schabi.newpipe.extractor.MediaFormat;\n+import org.schabi.newpipe.extractor.localization.DateWrapper;\n+import org.schabi.newpipe.extractor.stream.AudioStream;\n+import org.schabi.newpipe.extractor.stream.Description;\n+import org.schabi.newpipe.extractor.stream.Frameset;\n+import org.schabi.newpipe.extractor.stream.StreamExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemsCollector;\n+import org.schabi.newpipe.extractor.stream.StreamType;\n+import org.schabi.newpipe.extractor.stream.SubtitlesStream;\n+import org.schabi.newpipe.extractor.stream.VideoStream;\n+\n+import java.text.SimpleDateFormat;\n+import java.util.Calendar;\n+import java.util.List;\n+import java.util.TimeZone;\n+\n+import javax.annotation.Nullable;\n+\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.assertTrue;\n+import static org.schabi.newpipe.extractor.ExtractorAsserts.assertAtLeast;\n+import static org.schabi.newpipe.extractor.ExtractorAsserts.assertIsSecureUrl;\n+import static org.schabi.newpipe.extractor.ExtractorAsserts.assertIsValidUrl;\n+import static org.schabi.newpipe.extractor.services.DefaultTests.defaultTestListOfItems;\n+\n+/**\n+ * Test for {@link StreamExtractor}\n+ */\n+public abstract class DefaultStreamExtractorTest extends DefaultExtractorTest<StreamExtractor>\n+        implements BaseStreamExtractorTest {\n+\n+    public abstract StreamType expectedStreamType();\n+    public abstract String expectedUploaderName();\n+    public abstract String expectedUploaderUrl();\n+    public abstract List<String> expectedDescriptionContains(); // e.g. for full links\n+    public abstract long expectedLength();\n+    public long expectedTimestamp() { return 0; }; // default: there is no timestamp\n+    public abstract long expectedViewCountAtLeast();\n+    @Nullable public abstract String expectedUploadDate(); // format: \"yyyy-MM-dd HH:mm:ss.SSS\"\n+    @Nullable public abstract String expectedTextualUploadDate();\n+    public abstract long expectedLikeCountAtLeast(); // return -1 if ratings are disabled\n+    public abstract long expectedDislikeCountAtLeast(); // return -1 if ratings are disabled\n+    public boolean expectedHasRelatedStreams() { return true; } // default: there are related videos\n+    public int expectedAgeLimit() { return StreamExtractor.NO_AGE_LIMIT; } // default: no limit\n+    @Nullable public String expectedErrorMessage() { return null; } // default: no error message\n+    public boolean expectedHasVideoStreams() { return true; } // default: there are video streams\n+    public boolean expectedHasAudioStreams() { return true; } // default: there are audio streams\n+    public boolean expectedHasSubtitles() { return true; } // default: there are subtitles streams\n+    public boolean expectedHasFrames() { return true; } // default: there are frames\n+    public boolean expectedHasNextStream() { return true; } // default: there is a next video\n+\n+    @Test\n+    @Override\n+    public void testStreamType() throws Exception {\n+        assertEquals(expectedStreamType(), extractor().getStreamType());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testUploaderName() throws Exception {\n+        assertEquals(expectedUploaderName(), extractor().getUploaderName());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testUploaderUrl() throws Exception {\n+        final String uploaderUrl = extractor().getUploaderUrl();\n+        assertIsSecureUrl(uploaderUrl);\n+        assertEquals(expectedUploaderUrl(), uploaderUrl);\n+    }\n+\n+    @Test\n+    @Override\n+    public void testUploaderAvatarUrl() throws Exception {\n+        assertIsSecureUrl(extractor().getUploaderAvatarUrl());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testThumbnailUrl() throws Exception {\n+        assertIsSecureUrl(extractor().getThumbnailUrl());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testDescription() throws Exception {\n+        final Description description = extractor().getDescription();\n+        assertNotNull(description);\n+        assertFalse(\"description is empty\", description.getContent().isEmpty());\n+\n+        for (String s : expectedDescriptionContains()) {\n+            assertThat(description.getContent(), containsString(s));\n+        }\n+    }\n+\n+    @Test\n+    @Override\n+    public void testLength() throws Exception {\n+        assertEquals(expectedLength(), extractor().getLength());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testTimestamp() throws Exception {\n+        assertEquals(expectedTimestamp(), extractor().getTimeStamp());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testViewCount() throws Exception {\n+        assertAtLeast(expectedViewCountAtLeast(), extractor().getViewCount());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testUploadDate() throws Exception {\n+        final DateWrapper dateWrapper = extractor().getUploadDate();\n+\n+        if (expectedUploadDate() == null) {\n+            assertNull(dateWrapper);\n+        } else {\n+            assertNotNull(dateWrapper);\n+\n+            final Calendar expectedDate = Calendar.getInstance();\n+            final Calendar actualDate = dateWrapper.date();\n+            expectedDate.setTimeZone(TimeZone.getTimeZone(\"GMT\"));\n+            actualDate.setTimeZone(TimeZone.getTimeZone(\"GMT\"));\n+\n+            final SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.S\");\n+            expectedDate.setTime(sdf.parse(expectedUploadDate()));\n+            assertEquals(expectedDate, actualDate);\n+        }\n+    }\n+\n+    @Test\n+    @Override\n+    public void testTextualUploadDate() throws Exception {\n+        assertEquals(expectedTextualUploadDate(), extractor().getTextualUploadDate());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testLikeCount() throws Exception {\n+        if (expectedLikeCountAtLeast() == -1) {\n+            assertEquals(-1, extractor().getLikeCount());\n+        } else {\n+            assertAtLeast(expectedLikeCountAtLeast(), extractor().getLikeCount());\n+        }\n+    }\n+\n+    @Test\n+    @Override\n+    public void testDislikeCount() throws Exception {\n+        if (expectedDislikeCountAtLeast() == -1) {\n+            assertEquals(-1, extractor().getDislikeCount());\n+        } else {\n+            assertAtLeast(expectedDislikeCountAtLeast(), extractor().getDislikeCount());\n+        }\n+    }\n+\n+    @Test\n+    @Override\n+    public void testRelatedStreams() throws Exception {\n+        final StreamInfoItemsCollector relatedStreams = extractor().getRelatedStreams();\n+\n+        if (expectedHasRelatedStreams()) {\n+            defaultTestListOfItems(extractor().getService(), relatedStreams.getItems(),\n+                    relatedStreams.getErrors());\n+        } else {\n+            assertNull(relatedStreams);\n+        }\n+    }\n+\n+    @Test\n+    @Override\n+    public void testAgeLimit() throws Exception {\n+        assertEquals(expectedAgeLimit(), extractor().getAgeLimit());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testErrorMessage() throws Exception {\n+        assertEquals(expectedErrorMessage(), extractor().getErrorMessage());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testVideoStreams() throws Exception {\n+        List<VideoStream> videoStreams = extractor().getVideoStreams();\n+        final List<VideoStream> videoOnlyStreams = extractor().getVideoOnlyStreams();\n+        assertNotNull(videoStreams);\n+        assertNotNull(videoOnlyStreams);\n+        videoStreams.addAll(videoOnlyStreams);\n+\n+        if (expectedHasVideoStreams()) {\n+            assertFalse(videoStreams.isEmpty());\n+\n+            for (VideoStream stream : videoStreams) {\n+                assertIsSecureUrl(stream.getUrl());\n+                assertFalse(stream.getResolution().isEmpty());\n+\n+                int formatId = stream.getFormatId();\n+                assertTrue(\"format id does not fit a video stream: \" + formatId,\n+                        0 <= formatId && formatId < 0x100);\n+            }\n+        } else {\n+            assertTrue(videoStreams.isEmpty());\n+        }\n+    }\n+\n+    @Test\n+    @Override\n+    public void testAudioStreams() throws Exception {\n+        final List<AudioStream> audioStreams = extractor().getAudioStreams();\n+        assertNotNull(audioStreams);\n+\n+        if (expectedHasAudioStreams()) {\n+            assertFalse(audioStreams.isEmpty());\n+\n+            for (AudioStream stream : audioStreams) {\n+                assertIsSecureUrl(stream.getUrl());\n+\n+                int formatId = stream.getFormatId();\n+                assertTrue(\"format id does not fit an audio stream: \" + formatId,\n+                        0x100 <= formatId && formatId < 0x1000);\n+            }\n+        } else {\n+            assertTrue(audioStreams.isEmpty());\n+        }\n+    }\n+\n+    @Test\n+    @Override\n+    public void testSubtitles() throws Exception {\n+        List<SubtitlesStream> subtitles = extractor().getSubtitlesDefault();\n+        assertNotNull(subtitles);\n+\n+        if (expectedHasSubtitles()) {\n+            assertFalse(subtitles.isEmpty());\n+\n+            for (SubtitlesStream stream : subtitles) {\n+                assertIsSecureUrl(stream.getUrl());\n+\n+                int formatId = stream.getFormatId();\n+                assertTrue(\"format id does not fit an audio stream: \" + formatId,\n+                        0x1000 <= formatId && formatId < 0x10000);\n+            }\n+        } else {\n+            assertTrue(subtitles.isEmpty());\n+\n+            MediaFormat[] formats = {MediaFormat.VTT, MediaFormat.TTML, MediaFormat.TRANSCRIPT1,\n+                    MediaFormat.TRANSCRIPT2, MediaFormat.TRANSCRIPT3, MediaFormat.SRT};\n+            for (MediaFormat format : formats) {\n+                subtitles = extractor().getSubtitles(format);", "originalCommit": "e4ace2b0dc97db6df467f41a74219776304dac6f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fa29b78f77e1e323ec0512643f3bcaaf6bd13df0", "changed_code": [{"header": "diff --git a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\nindex 0e731d4a..6c0419d5 100644\n--- a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n+++ b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n", "chunk": "@@ -240,28 +283,28 @@ public abstract class DefaultStreamExtractorTest extends DefaultExtractorTest<St\n     @Test\n     @Override\n     public void testSubtitles() throws Exception {\n-        List<SubtitlesStream> subtitles = extractor().getSubtitlesDefault();\n+        final List<SubtitlesStream> subtitles = extractor().getSubtitlesDefault();\n         assertNotNull(subtitles);\n \n         if (expectedHasSubtitles()) {\n             assertFalse(subtitles.isEmpty());\n \n-            for (SubtitlesStream stream : subtitles) {\n+            for (final SubtitlesStream stream : subtitles) {\n                 assertIsSecureUrl(stream.getUrl());\n \n-                int formatId = stream.getFormatId();\n-                assertTrue(\"format id does not fit an audio stream: \" + formatId,\n+                final int formatId = stream.getFormatId();\n+                assertTrue(\"format id does not fit a subtitles stream: \" + formatId,\n                         0x1000 <= formatId && formatId < 0x10000);\n             }\n         } else {\n             assertTrue(subtitles.isEmpty());\n \n-            MediaFormat[] formats = {MediaFormat.VTT, MediaFormat.TTML, MediaFormat.TRANSCRIPT1,\n-                    MediaFormat.TRANSCRIPT2, MediaFormat.TRANSCRIPT3, MediaFormat.SRT};\n-            for (MediaFormat format : formats) {\n-                subtitles = extractor().getSubtitles(format);\n-                assertNotNull(subtitles);\n-                assertTrue(subtitles.isEmpty());\n+            final MediaFormat[] formats = {MediaFormat.VTT, MediaFormat.TTML, MediaFormat.SRT,\n+                    MediaFormat.TRANSCRIPT1, MediaFormat.TRANSCRIPT2, MediaFormat.TRANSCRIPT3};\n+            for (final MediaFormat format : formats) {\n+                final List<SubtitlesStream> formatSubtitles = extractor().getSubtitles(format);\n+                assertNotNull(formatSubtitles);\n+                assertTrue(formatSubtitles.isEmpty());\n             }\n         }\n     }\n", "next_change": {"commit": "abbeacb312e1765afd9008cb61e6808c4544b701", "changed_code": [{"header": "diff --git a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\nindex 6c0419d5..2c495317 100644\n--- a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n+++ b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n", "chunk": "@@ -309,6 +308,18 @@ public abstract class DefaultStreamExtractorTest extends DefaultExtractorTest<St\n         }\n     }\n \n+    @Override\n+    public void testGetDashMpdUrl() throws Exception {\n+        final String dashMpdUrl = extractor().getDashMpdUrl();\n+        if (expectedDashMpdUrlContains() == null) {\n+            assertNotNull(dashMpdUrl);\n+            assertTrue(dashMpdUrl.isEmpty());\n+        } else {\n+            assertIsSecureUrl(dashMpdUrl);\n+            assertThat(extractor().getDashMpdUrl(), containsString(expectedDashMpdUrlContains()));\n+        }\n+    }\n+\n     @Test\n     @Override\n     public void testFrames() throws Exception {\n", "next_change": {"commit": "1d7a86e664717d09e33371bc87c289903b19feb2", "changed_code": [{"header": "diff --git a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\nindex 2c495317..406177f7 100644\n--- a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n+++ b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n", "chunk": "@@ -282,44 +239,32 @@ public abstract class DefaultStreamExtractorTest extends DefaultExtractorTest<St\n     @Test\n     @Override\n     public void testSubtitles() throws Exception {\n-        final List<SubtitlesStream> subtitles = extractor().getSubtitlesDefault();\n+        List<SubtitlesStream> subtitles = extractor().getSubtitlesDefault();\n         assertNotNull(subtitles);\n \n         if (expectedHasSubtitles()) {\n             assertFalse(subtitles.isEmpty());\n \n-            for (final SubtitlesStream stream : subtitles) {\n+            for (SubtitlesStream stream : subtitles) {\n                 assertIsSecureUrl(stream.getUrl());\n \n-                final int formatId = stream.getFormatId();\n-                assertTrue(\"format id does not fit a subtitles stream: \" + formatId,\n+                int formatId = stream.getFormatId();\n+                assertTrue(\"format id does not fit an audio stream: \" + formatId,\n                         0x1000 <= formatId && formatId < 0x10000);\n             }\n         } else {\n             assertTrue(subtitles.isEmpty());\n \n-            final MediaFormat[] formats = {MediaFormat.VTT, MediaFormat.TTML, MediaFormat.SRT,\n-                    MediaFormat.TRANSCRIPT1, MediaFormat.TRANSCRIPT2, MediaFormat.TRANSCRIPT3};\n-            for (final MediaFormat format : formats) {\n-                final List<SubtitlesStream> formatSubtitles = extractor().getSubtitles(format);\n-                assertNotNull(formatSubtitles);\n-                assertTrue(formatSubtitles.isEmpty());\n+            MediaFormat[] formats = {MediaFormat.VTT, MediaFormat.TTML, MediaFormat.TRANSCRIPT1,\n+                    MediaFormat.TRANSCRIPT2, MediaFormat.TRANSCRIPT3, MediaFormat.SRT};\n+            for (MediaFormat format : formats) {\n+                subtitles = extractor().getSubtitles(format);\n+                assertNotNull(subtitles);\n+                assertTrue(subtitles.isEmpty());\n             }\n         }\n     }\n \n-    @Override\n-    public void testGetDashMpdUrl() throws Exception {\n-        final String dashMpdUrl = extractor().getDashMpdUrl();\n-        if (expectedDashMpdUrlContains() == null) {\n-            assertNotNull(dashMpdUrl);\n-            assertTrue(dashMpdUrl.isEmpty());\n-        } else {\n-            assertIsSecureUrl(dashMpdUrl);\n-            assertThat(extractor().getDashMpdUrl(), containsString(expectedDashMpdUrlContains()));\n-        }\n-    }\n-\n     @Test\n     @Override\n     public void testFrames() throws Exception {\n", "next_change": {"commit": "a087b092b401977bd58b279a3f285549db0e2160", "changed_code": [{"header": "diff --git a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\nindex 406177f7..fc2ebf43 100644\n--- a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n+++ b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n", "chunk": "@@ -239,28 +239,28 @@ public abstract class DefaultStreamExtractorTest extends DefaultExtractorTest<St\n     @Test\n     @Override\n     public void testSubtitles() throws Exception {\n-        List<SubtitlesStream> subtitles = extractor().getSubtitlesDefault();\n+        final List<SubtitlesStream> subtitles = extractor().getSubtitlesDefault();\n         assertNotNull(subtitles);\n \n         if (expectedHasSubtitles()) {\n             assertFalse(subtitles.isEmpty());\n \n-            for (SubtitlesStream stream : subtitles) {\n+            for (final SubtitlesStream stream : subtitles) {\n                 assertIsSecureUrl(stream.getUrl());\n \n-                int formatId = stream.getFormatId();\n-                assertTrue(\"format id does not fit an audio stream: \" + formatId,\n+                final int formatId = stream.getFormatId();\n+                assertTrue(\"format id does not fit a subtitles stream: \" + formatId,\n                         0x1000 <= formatId && formatId < 0x10000);\n             }\n         } else {\n             assertTrue(subtitles.isEmpty());\n \n-            MediaFormat[] formats = {MediaFormat.VTT, MediaFormat.TTML, MediaFormat.TRANSCRIPT1,\n-                    MediaFormat.TRANSCRIPT2, MediaFormat.TRANSCRIPT3, MediaFormat.SRT};\n-            for (MediaFormat format : formats) {\n-                subtitles = extractor().getSubtitles(format);\n-                assertNotNull(subtitles);\n-                assertTrue(subtitles.isEmpty());\n+            final MediaFormat[] formats = {MediaFormat.VTT, MediaFormat.TTML, MediaFormat.SRT,\n+                    MediaFormat.TRANSCRIPT1, MediaFormat.TRANSCRIPT2, MediaFormat.TRANSCRIPT3};\n+            for (final MediaFormat format : formats) {\n+                final List<SubtitlesStream> formatSubtitles = extractor().getSubtitles(format);\n+                assertNotNull(formatSubtitles);\n+                assertTrue(formatSubtitles.isEmpty());\n             }\n         }\n     }\n", "next_change": {"commit": "880ff04a5c17086711c0d6d14d6aa46cf1943c54", "changed_code": [{"header": "diff --git a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\nindex fc2ebf43..8ab642d9 100644\n--- a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n+++ b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n", "chunk": "@@ -265,6 +307,18 @@ public abstract class DefaultStreamExtractorTest extends DefaultExtractorTest<St\n         }\n     }\n \n+    @Override\n+    public void testGetDashMpdUrl() throws Exception {\n+        final String dashMpdUrl = extractor().getDashMpdUrl();\n+        if (expectedDashMpdUrlContains() == null) {\n+            assertNotNull(dashMpdUrl);\n+            assertTrue(dashMpdUrl.isEmpty());\n+        } else {\n+            assertIsSecureUrl(dashMpdUrl);\n+            assertThat(extractor().getDashMpdUrl(), containsString(expectedDashMpdUrlContains()));\n+        }\n+    }\n+\n     @Test\n     @Override\n     public void testFrames() throws Exception {\n", "next_change": null}]}}]}}]}}]}}]}}, {"oid": "fa29b78f77e1e323ec0512643f3bcaaf6bd13df0", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/fa29b78f77e1e323ec0512643f3bcaaf6bd13df0", "message": "[Test] Add sub channel name, url and thumbnail tests", "committedDate": "2020-05-16T18:27:58Z", "type": "forcePushed"}, {"oid": "d22a9638af630257daeab920f1adfb8aabc159b6", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/d22a9638af630257daeab920f1adfb8aabc159b6", "message": "[Test] Add sub channel name, url and thumbnail tests", "committedDate": "2020-05-16T18:29:42Z", "type": "forcePushed"}, {"oid": "d216b051dc5da6c63d601d243c8fa85492430894", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/d216b051dc5da6c63d601d243c8fa85492430894", "message": "[YouTube] Consider dates as GMT and not as local", "committedDate": "2020-05-16T19:19:18Z", "type": "forcePushed"}, {"oid": "95367dd038ba04e680290a2b56a7c34216c3dab1", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/95367dd038ba04e680290a2b56a7c34216c3dab1", "message": "[YouTube/MediaCCC] Consider dates as GMT and not as local", "committedDate": "2020-05-16T19:23:38Z", "type": "forcePushed"}, {"oid": "1ef0687e766dfa9a792039856052800adc61cc23", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/1ef0687e766dfa9a792039856052800adc61cc23", "message": "[YouTube/MediaCCC] Consider dates as GMT and not as local", "committedDate": "2020-06-14T08:20:19Z", "type": "forcePushed"}, {"oid": "abbeacb312e1765afd9008cb61e6808c4544b701", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/abbeacb312e1765afd9008cb61e6808c4544b701", "message": "[PeerTube] Change age restricted video in tests\n\nThe old one wasn't available anymore", "committedDate": "2020-06-14T18:19:43Z", "type": "forcePushed"}, {"oid": "1d7a86e664717d09e33371bc87c289903b19feb2", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/1d7a86e664717d09e33371bc87c289903b19feb2", "message": "[Test] Add base classes for stream extractor tests\n\nRefactor all stream extractor tests to use new base class.\n\nRemove check if upload date is in the past: this does not have to hold true: youtube premieres turn up in search results even though they are in the future", "committedDate": "2020-10-24T16:22:44Z", "type": "commit"}, {"oid": "7fb867c1662457c51d6579f2803c913f356126bf", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/7fb867c1662457c51d6579f2803c913f356126bf", "message": "[YouTube] Fix error message obtaining when there is none", "committedDate": "2020-10-24T16:22:44Z", "type": "commit"}, {"oid": "7cd410f3fc304a9eb620fa28ba39f938e4565c2b", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/7cd410f3fc304a9eb620fa28ba39f938e4565c2b", "message": "[YouTube] Return 0 when there is no timestamp, not -2, as per javadoc", "committedDate": "2020-10-24T16:23:45Z", "type": "commit"}, {"oid": "072bae321fdf9cca340d154d02b388623fadcc8a", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/072bae321fdf9cca340d154d02b388623fadcc8a", "message": "[YouTube] Fix frame extraction for livestreams\n\nUse saved playerResponse instead of parsing json every time", "committedDate": "2020-10-24T16:23:46Z", "type": "commit"}, {"oid": "3b2cfb4ca2e9fbe9457e2a4551d97f7fa8bc6fec", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/3b2cfb4ca2e9fbe9457e2a4551d97f7fa8bc6fec", "message": "[SoundCloud] Return empty video stream list instead of null\n\nAlso replace every instance of `return new ArrayList<>();` with `return Collections.emptyList();`", "committedDate": "2020-10-24T16:23:46Z", "type": "commit"}, {"oid": "4349be13af66aaf9af4c244d53cce1702b3a0782", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/4349be13af66aaf9af4c244d53cce1702b3a0782", "message": "[PeerTube] Return empty audio stream list instead of null", "committedDate": "2020-10-24T16:25:56Z", "type": "commit"}, {"oid": "7ae3cb6d07cea6abb71d9c69eb2b1b276e5b795f", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/7ae3cb6d07cea6abb71d9c69eb2b1b276e5b795f", "message": "[PeerTube] Fix link handler inconsistency providing API links", "committedDate": "2020-10-24T16:33:11Z", "type": "commit"}, {"oid": "aeeae87641f8ca41e62b985ad20f0cf1ed565aa6", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/aeeae87641f8ca41e62b985ad20f0cf1ed565aa6", "message": "[PeerTube] Parse timestamp from url (previously unimplemented)", "committedDate": "2020-10-24T16:33:42Z", "type": "commit"}, {"oid": "b461da792f375a8527587ff13ff8a6ed8c6f43b4", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/b461da792f375a8527587ff13ff8a6ed8c6f43b4", "message": "[MediaCCC] Fix link handler inconsistency providing API links", "committedDate": "2020-10-24T16:34:34Z", "type": "commit"}, {"oid": "3b2a1829d466e0f1b3d0b6c5a43de49bfde5a287", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/3b2a1829d466e0f1b3d0b6c5a43de49bfde5a287", "message": "[MediaCCC] Extract tags", "committedDate": "2020-10-24T16:34:57Z", "type": "commit"}, {"oid": "492db83ccff20a71a24aaab94e8968be3d4fffcd", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/492db83ccff20a71a24aaab94e8968be3d4fffcd", "message": "[MediaCCC] Return null instead of empty items collector\n\nAs per the documentation in the base getRelatedStreams()", "committedDate": "2020-10-24T16:34:57Z", "type": "commit"}, {"oid": "d130fd79c31338293134f8416500f135fc57a63a", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/d130fd79c31338293134f8416500f135fc57a63a", "message": "[PeerTube] Prepend \"accounts/\" to channel id for backward compatibility", "committedDate": "2020-10-24T16:36:21Z", "type": "commit"}, {"oid": "0c980b2d648b7eb72fa22482a390114da1d3f5ae", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/0c980b2d648b7eb72fa22482a390114da1d3f5ae", "message": "[PeerTube] Improve channel and stream link handler tests", "committedDate": "2020-10-24T16:36:21Z", "type": "commit"}, {"oid": "07a90d116a0059a027f158f59b5fe9d2720f361f", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/07a90d116a0059a027f158f59b5fe9d2720f361f", "message": "[MediaCCC] Use regex to parse stream and conference urls", "committedDate": "2020-10-24T16:36:21Z", "type": "commit"}, {"oid": "af5b8b1915a5ca4d7a79341e550ca64eda5e94e4", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/af5b8b1915a5ca4d7a79341e550ca64eda5e94e4", "message": "[MediaCCC] Add tests for stream and conference link handlers", "committedDate": "2020-10-24T16:36:21Z", "type": "commit"}, {"oid": "fcb9b6f855ddd5345a6cefcc9b82a0f5138719dd", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/fcb9b6f855ddd5345a6cefcc9b82a0f5138719dd", "message": "[MediaCCC] Use final when possible, ide refactorings\n\nRefactorings on `throws` clause", "committedDate": "2020-10-24T16:36:22Z", "type": "commit"}, {"oid": "06430c4749295309727f72c6ac18f036f22bdc19", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/06430c4749295309727f72c6ac18f036f22bdc19", "message": "[PeerTube] Use final when possible, ide refactorings", "committedDate": "2020-10-24T16:39:06Z", "type": "commit"}, {"oid": "55bc01d1ce48404d6cb11cc419685696ba02eac5", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/55bc01d1ce48404d6cb11cc419685696ba02eac5", "message": "[SoundCloud] Use final when possible, ide refactorings", "committedDate": "2020-10-24T16:39:55Z", "type": "commit"}, {"oid": "3191bd6c703e1a410a03b50c2d0e4cbe7b30d7b8", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/3191bd6c703e1a410a03b50c2d0e4cbe7b30d7b8", "message": "[YouTube] Use final when possible", "committedDate": "2020-10-24T16:39:55Z", "type": "commit"}, {"oid": "68d23defba04e3db08462d8268903ec23056fd5f", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/68d23defba04e3db08462d8268903ec23056fd5f", "message": "[YouTube] Do not catch every exception on getErrorMessage\n\n@B0pol suggestion", "committedDate": "2020-10-24T16:39:55Z", "type": "commit"}, {"oid": "8dc3f28618d38c692f3abee1ae612e54ac1de3ee", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/8dc3f28618d38c692f3abee1ae612e54ac1de3ee", "message": "[PeerTube] Test one channel url with api and one without", "committedDate": "2020-10-24T16:39:55Z", "type": "commit"}, {"oid": "a4097d8d0119cfc71a3b969aa117df924af60e3d", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/a4097d8d0119cfc71a3b969aa117df924af60e3d", "message": "[MediaCCC] Return empty list of video-only streams instead of null", "committedDate": "2020-10-24T16:39:55Z", "type": "commit"}, {"oid": "a087b092b401977bd58b279a3f285549db0e2160", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/a087b092b401977bd58b279a3f285549db0e2160", "message": "[Test] Improve code style and add final", "committedDate": "2020-10-24T16:39:55Z", "type": "commit"}, {"oid": "6127826571a9041cc9d9d264ac97239249f2aff9", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/6127826571a9041cc9d9d264ac97239249f2aff9", "message": "[Test] Add stream metadata tests", "committedDate": "2020-10-24T16:41:41Z", "type": "commit"}, {"oid": "8ce711f40fe3667a9184da513a794d83c098985d", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/8ce711f40fe3667a9184da513a794d83c098985d", "message": "[Test] Add sub channel name, url and thumbnail tests", "committedDate": "2020-10-24T16:41:41Z", "type": "commit"}, {"oid": "d0b14644bb9937d73137a4b8c0121a13defe9b56", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/d0b14644bb9937d73137a4b8c0121a13defe9b56", "message": "[YouTube/MediaCCC] Consider dates as GMT and not as local", "committedDate": "2020-10-24T16:41:41Z", "type": "commit"}, {"oid": "880ff04a5c17086711c0d6d14d6aa46cf1943c54", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/880ff04a5c17086711c0d6d14d6aa46cf1943c54", "message": "[Test] Add stream dash mpd url test", "committedDate": "2020-10-24T16:41:41Z", "type": "commit"}, {"oid": "3c55ea93216a1bb1d75e16abf0509cdb9b42c61b", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/3c55ea93216a1bb1d75e16abf0509cdb9b42c61b", "message": "[PeerTube] Change age restricted video in tests\n\nThe old one wasn't available anymore", "committedDate": "2020-10-24T16:41:41Z", "type": "commit"}, {"oid": "f11fe87688beb27a051608c4f0facb2d8214b6d1", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/f11fe87688beb27a051608c4f0facb2d8214b6d1", "message": "[YouTube] Replace outdated PewDiePie video test with another one\n\nThe old video was made private, and this video (wedding) is probably never going to be removed.", "committedDate": "2020-10-24T16:41:41Z", "type": "commit"}, {"oid": "f11fe87688beb27a051608c4f0facb2d8214b6d1", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/f11fe87688beb27a051608c4f0facb2d8214b6d1", "message": "[YouTube] Replace outdated PewDiePie video test with another one\n\nThe old video was made private, and this video (wedding) is probably never going to be removed.", "committedDate": "2020-10-24T16:41:41Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTQ5MTU1NA==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/309#discussion_r511491554", "body": "```suggestion\r\n            final SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd\");\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd\");\n          \n          \n            \n                        final SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd\");", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            <span class=\"pl-smi\">SimpleDateFormat</span> sdf <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">SimpleDateFormat</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>yyyy-MM-dd<span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            <span class=\"pl-k x x-first\">final</span><span class=\"x x-last\"> </span><span class=\"pl-smi\">SimpleDateFormat</span> sdf <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">SimpleDateFormat</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>yyyy-MM-dd<span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "TobiGr", "createdAt": "2020-10-24T16:51:40Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/media_ccc/extractors/MediaCCCParsingHelper.java", "diffHunk": "@@ -6,14 +6,17 @@\n import java.text.SimpleDateFormat;\n import java.util.Calendar;\n import java.util.Date;\n+import java.util.TimeZone;\n \n public final class MediaCCCParsingHelper {\n     private MediaCCCParsingHelper() { }\n \n     public static Calendar parseDateFrom(final String textualUploadDate) throws ParsingException {\n         Date date;\n         try {\n-            date = new SimpleDateFormat(\"yyyy-MM-dd\").parse(textualUploadDate);\n+            SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd\");", "originalCommit": "f11fe87688beb27a051608c4f0facb2d8214b6d1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cd32e7436ea4781939608c8a9ed36b72f2173bc0", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/media_ccc/extractors/MediaCCCParsingHelper.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/media_ccc/extractors/MediaCCCParsingHelper.java\nindex dfdceead..14ca5c52 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/media_ccc/extractors/MediaCCCParsingHelper.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/media_ccc/extractors/MediaCCCParsingHelper.java\n", "chunk": "@@ -12,9 +12,9 @@ public final class MediaCCCParsingHelper {\n     private MediaCCCParsingHelper() { }\n \n     public static Calendar parseDateFrom(final String textualUploadDate) throws ParsingException {\n-        Date date;\n+        final Date date;\n         try {\n-            SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd\");\n+            final SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd\");\n             sdf.setTimeZone(TimeZone.getTimeZone(\"GMT\"));\n             date = sdf.parse(textualUploadDate);\n         } catch (ParseException e) {\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTQ5MzY3Mg==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/309#discussion_r511493672", "body": "```suggestion\r\n            final SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd\");\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd\");\n          \n          \n            \n                        final SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd\");", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            <span class=\"pl-smi\">SimpleDateFormat</span> sdf <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">SimpleDateFormat</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>yyyy-MM-dd<span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            <span class=\"pl-k x x-first\">final</span><span class=\"x x-last\"> </span><span class=\"pl-smi\">SimpleDateFormat</span> sdf <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">SimpleDateFormat</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>yyyy-MM-dd<span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "TobiGr", "createdAt": "2020-10-24T17:14:31Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeParsingHelper.java", "diffHunk": "@@ -185,7 +185,9 @@ public static String getFeedUrlFrom(final String channelIdOrUser) {\n     public static Calendar parseDateFrom(String textualUploadDate) throws ParsingException {\n         Date date;\n         try {\n-            date = new SimpleDateFormat(\"yyyy-MM-dd\").parse(textualUploadDate);\n+            SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd\");", "originalCommit": "f11fe87688beb27a051608c4f0facb2d8214b6d1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cd32e7436ea4781939608c8a9ed36b72f2173bc0", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeParsingHelper.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeParsingHelper.java\nindex cefab49d..ac7db985 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeParsingHelper.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeParsingHelper.java\n", "chunk": "@@ -183,9 +183,9 @@ public class YoutubeParsingHelper {\n     }\n \n     public static Calendar parseDateFrom(String textualUploadDate) throws ParsingException {\n-        Date date;\n+        final Date date;\n         try {\n-            SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd\");\n+            final SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd\");\n             sdf.setTimeZone(TimeZone.getTimeZone(\"GMT\"));\n             date = sdf.parse(textualUploadDate);\n         } catch (ParseException e) {\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTUwNjAyNA==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/309#discussion_r511506024", "body": "Did you test against NewPipe this part? Will it create NullPointerException or there is already a null check?", "bodyText": "Did you test against NewPipe this part? Will it create NullPointerException or there is already a null check?", "bodyHTML": "<p dir=\"auto\">Did you test against NewPipe this part? Will it create NullPointerException or there is already a null check?</p>", "author": "B0pol", "createdAt": "2020-10-24T19:28:06Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/media_ccc/extractors/MediaCCCStreamExtractor.java", "diffHunk": "@@ -216,7 +219,7 @@ public StreamType getStreamType() {\n \n     @Override\n     public StreamInfoItemsCollector getRelatedStreams() {\n-        return new StreamInfoItemsCollector(getServiceId());\n+        return null;", "originalCommit": "d007fb31dead50952899a87ed7facb590c18b829", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTU1NjYyNQ==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/309#discussion_r511556625", "bodyText": "This was done as per the documentation in the base getRelatedStreams(), and also to prevent creating new objects at random. I tested in NewPipe and it works as expected (there are null checks), but the code which takes care of it being null actually lies in the extractor, where the collector is turned into a list. I now added @nullable to all of the functions, as it was missing.", "author": "Stypox", "createdAt": "2020-10-25T07:02:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTUwNjAyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTU1NzA1OA==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/309#discussion_r511557058", "bodyText": "Oh, and also, YouTube already returns null for age restricted videos.", "author": "Stypox", "createdAt": "2020-10-25T07:07:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTUwNjAyNA=="}], "type": "inlineReview", "revised_code": {"commit": "cd32e7436ea4781939608c8a9ed36b72f2173bc0", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/media_ccc/extractors/MediaCCCStreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/media_ccc/extractors/MediaCCCStreamExtractor.java\nindex 92a049c5..96b1a5cc 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/media_ccc/extractors/MediaCCCStreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/media_ccc/extractors/MediaCCCStreamExtractor.java\n", "chunk": "@@ -217,6 +218,7 @@ public class MediaCCCStreamExtractor extends StreamExtractor {\n         return StreamType.VIDEO_STREAM;\n     }\n \n+    @Nullable\n     @Override\n     public StreamInfoItemsCollector getRelatedStreams() {\n         return null;\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTUwOTc4NA==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/309#discussion_r511509784", "body": "Could you explain why 0x100 <= formatId < 0x1000 and also above (video streams) or below (subtitles) and add comments for it?", "bodyText": "Could you explain why 0x100 <= formatId < 0x1000 and also above (video streams) or below (subtitles) and add comments for it?", "bodyHTML": "<p dir=\"auto\">Could you explain why 0x100 &lt;= formatId &lt; 0x1000 and also above (video streams) or below (subtitles) and add comments for it?</p>", "author": "B0pol", "createdAt": "2020-10-24T20:10:54Z", "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java", "diffHunk": "@@ -0,0 +1,382 @@\n+package org.schabi.newpipe.extractor.services;\n+\n+import org.junit.Test;\n+import org.schabi.newpipe.extractor.MediaFormat;\n+import org.schabi.newpipe.extractor.localization.DateWrapper;\n+import org.schabi.newpipe.extractor.stream.AudioStream;\n+import org.schabi.newpipe.extractor.stream.Description;\n+import org.schabi.newpipe.extractor.stream.Frameset;\n+import org.schabi.newpipe.extractor.stream.StreamExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemsCollector;\n+import org.schabi.newpipe.extractor.stream.StreamType;\n+import org.schabi.newpipe.extractor.stream.SubtitlesStream;\n+import org.schabi.newpipe.extractor.stream.VideoStream;\n+\n+import java.text.SimpleDateFormat;\n+import java.util.Calendar;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.TimeZone;\n+\n+import javax.annotation.Nullable;\n+\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.schabi.newpipe.extractor.ExtractorAsserts.assertAtLeast;\n+import static org.schabi.newpipe.extractor.ExtractorAsserts.assertEqualsOrderIndependent;\n+import static org.schabi.newpipe.extractor.ExtractorAsserts.assertIsSecureUrl;\n+import static org.schabi.newpipe.extractor.ExtractorAsserts.assertIsValidUrl;\n+import static org.schabi.newpipe.extractor.services.DefaultTests.defaultTestListOfItems;\n+\n+/**\n+ * Test for {@link StreamExtractor}\n+ */\n+public abstract class DefaultStreamExtractorTest extends DefaultExtractorTest<StreamExtractor>\n+        implements BaseStreamExtractorTest {\n+\n+    public abstract StreamType expectedStreamType();\n+    public abstract String expectedUploaderName();\n+    public abstract String expectedUploaderUrl();\n+    public String expectedSubChannelName() { return \"\"; } // default: there is no subchannel\n+    public String expectedSubChannelUrl() { return \"\"; } // default: there is no subchannel\n+    public abstract List<String> expectedDescriptionContains(); // e.g. for full links\n+    public abstract long expectedLength();\n+    public long expectedTimestamp() { return 0; } // default: there is no timestamp\n+    public abstract long expectedViewCountAtLeast();\n+    @Nullable public abstract String expectedUploadDate(); // format: \"yyyy-MM-dd HH:mm:ss.SSS\"\n+    @Nullable public abstract String expectedTextualUploadDate();\n+    public abstract long expectedLikeCountAtLeast(); // return -1 if ratings are disabled\n+    public abstract long expectedDislikeCountAtLeast(); // return -1 if ratings are disabled\n+    public boolean expectedHasRelatedStreams() { return true; } // default: there are related videos\n+    public int expectedAgeLimit() { return StreamExtractor.NO_AGE_LIMIT; } // default: no limit\n+    @Nullable public String expectedErrorMessage() { return null; } // default: no error message\n+    public boolean expectedHasVideoStreams() { return true; } // default: there are video streams\n+    public boolean expectedHasAudioStreams() { return true; } // default: there are audio streams\n+    public boolean expectedHasSubtitles() { return true; } // default: there are subtitles streams\n+    @Nullable public String expectedDashMpdUrlContains() { return null; } // default: no dash mpd\n+    public boolean expectedHasFrames() { return true; } // default: there are frames\n+    public String expectedHost() { return \"\"; } // default: no host for centralized platforms\n+    public String expectedPrivacy() { return \"\"; } // default: no privacy policy available\n+    public String expectedCategory() { return \"\"; } // default: no category\n+    public String expectedLicence() { return \"\"; } // default: no licence\n+    public Locale expectedLanguageInfo() { return null; } // default: no language info available\n+    public List<String> expectedTags() { return Collections.emptyList(); } // default: no tags\n+    public String expectedSupportInfo() { return \"\"; } // default: no support info available\n+\n+    @Test\n+    @Override\n+    public void testStreamType() throws Exception {\n+        assertEquals(expectedStreamType(), extractor().getStreamType());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testUploaderName() throws Exception {\n+        assertEquals(expectedUploaderName(), extractor().getUploaderName());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testUploaderUrl() throws Exception {\n+        final String uploaderUrl = extractor().getUploaderUrl();\n+        assertIsSecureUrl(uploaderUrl);\n+        assertEquals(expectedUploaderUrl(), uploaderUrl);\n+    }\n+\n+    @Test\n+    @Override\n+    public void testUploaderAvatarUrl() throws Exception {\n+        assertIsSecureUrl(extractor().getUploaderAvatarUrl());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testSubChannelName() throws Exception {\n+        assertEquals(expectedSubChannelName(), extractor().getSubChannelName());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testSubChannelUrl() throws Exception {\n+        final String subChannelUrl = extractor().getSubChannelUrl();\n+        assertEquals(expectedSubChannelUrl(), subChannelUrl);\n+\n+        if (!expectedSubChannelUrl().isEmpty()) {\n+            // this stream has a subchannel\n+            assertIsSecureUrl(subChannelUrl);\n+        }\n+    }\n+\n+    @Test\n+    @Override\n+    public void testSubChannelAvatarUrl() throws Exception {\n+        if (expectedSubChannelName().isEmpty() && expectedSubChannelUrl().isEmpty()) {\n+            // this stream has no subchannel\n+            assertEquals(\"\", extractor().getSubChannelAvatarUrl());\n+        } else {\n+            // this stream has a subchannel\n+            assertIsSecureUrl(extractor().getSubChannelAvatarUrl());\n+        }\n+    }\n+\n+    @Test\n+    @Override\n+    public void testThumbnailUrl() throws Exception {\n+        assertIsSecureUrl(extractor().getThumbnailUrl());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testDescription() throws Exception {\n+        final Description description = extractor().getDescription();\n+        assertNotNull(description);\n+        assertFalse(\"description is empty\", description.getContent().isEmpty());\n+\n+        for (final String s : expectedDescriptionContains()) {\n+            assertThat(description.getContent(), containsString(s));\n+        }\n+    }\n+\n+    @Test\n+    @Override\n+    public void testLength() throws Exception {\n+        assertEquals(expectedLength(), extractor().getLength());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testTimestamp() throws Exception {\n+        assertEquals(expectedTimestamp(), extractor().getTimeStamp());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testViewCount() throws Exception {\n+        assertAtLeast(expectedViewCountAtLeast(), extractor().getViewCount());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testUploadDate() throws Exception {\n+        final DateWrapper dateWrapper = extractor().getUploadDate();\n+\n+        if (expectedUploadDate() == null) {\n+            assertNull(dateWrapper);\n+        } else {\n+            assertNotNull(dateWrapper);\n+\n+            final Calendar expectedDate = Calendar.getInstance();\n+            final Calendar actualDate = dateWrapper.date();\n+\n+            final SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.S\");\n+            sdf.setTimeZone(TimeZone.getTimeZone(\"GMT\"));\n+            expectedDate.setTime(sdf.parse(expectedUploadDate()));\n+            assertEquals(expectedDate, actualDate);\n+        }\n+    }\n+\n+    @Test\n+    @Override\n+    public void testTextualUploadDate() throws Exception {\n+        assertEquals(expectedTextualUploadDate(), extractor().getTextualUploadDate());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testLikeCount() throws Exception {\n+        if (expectedLikeCountAtLeast() == -1) {\n+            assertEquals(-1, extractor().getLikeCount());\n+        } else {\n+            assertAtLeast(expectedLikeCountAtLeast(), extractor().getLikeCount());\n+        }\n+    }\n+\n+    @Test\n+    @Override\n+    public void testDislikeCount() throws Exception {\n+        if (expectedDislikeCountAtLeast() == -1) {\n+            assertEquals(-1, extractor().getDislikeCount());\n+        } else {\n+            assertAtLeast(expectedDislikeCountAtLeast(), extractor().getDislikeCount());\n+        }\n+    }\n+\n+    @Test\n+    @Override\n+    public void testRelatedStreams() throws Exception {\n+        final StreamInfoItemsCollector relatedStreams = extractor().getRelatedStreams();\n+\n+        if (expectedHasRelatedStreams()) {\n+            defaultTestListOfItems(extractor().getService(), relatedStreams.getItems(),\n+                    relatedStreams.getErrors());\n+        } else {\n+            assertNull(relatedStreams);\n+        }\n+    }\n+\n+    @Test\n+    @Override\n+    public void testAgeLimit() throws Exception {\n+        assertEquals(expectedAgeLimit(), extractor().getAgeLimit());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testErrorMessage() throws Exception {\n+        assertEquals(expectedErrorMessage(), extractor().getErrorMessage());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testVideoStreams() throws Exception {\n+        final List<VideoStream> videoStreams = extractor().getVideoStreams();\n+        final List<VideoStream> videoOnlyStreams = extractor().getVideoOnlyStreams();\n+        assertNotNull(videoStreams);\n+        assertNotNull(videoOnlyStreams);\n+        videoStreams.addAll(videoOnlyStreams);\n+\n+        if (expectedHasVideoStreams()) {\n+            assertFalse(videoStreams.isEmpty());\n+\n+            for (final VideoStream stream : videoStreams) {\n+                assertIsSecureUrl(stream.getUrl());\n+                assertFalse(stream.getResolution().isEmpty());\n+\n+                final int formatId = stream.getFormatId();\n+                assertTrue(\"format id does not fit a video stream: \" + formatId,\n+                        0 <= formatId && formatId < 0x100);\n+            }\n+        } else {\n+            assertTrue(videoStreams.isEmpty());\n+        }\n+    }\n+\n+    @Test\n+    @Override\n+    public void testAudioStreams() throws Exception {\n+        final List<AudioStream> audioStreams = extractor().getAudioStreams();\n+        assertNotNull(audioStreams);\n+\n+        if (expectedHasAudioStreams()) {\n+            assertFalse(audioStreams.isEmpty());\n+\n+            for (final AudioStream stream : audioStreams) {\n+                assertIsSecureUrl(stream.getUrl());\n+\n+                final int formatId = stream.getFormatId();\n+                assertTrue(\"format id does not fit an audio stream: \" + formatId,\n+                        0x100 <= formatId && formatId < 0x1000);", "originalCommit": "d007fb31dead50952899a87ed7facb590c18b829", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTU1NjY0Mw==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/309#discussion_r511556643", "bodyText": "Ok", "author": "Stypox", "createdAt": "2020-10-25T07:02:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTUwOTc4NA=="}], "type": "inlineReview", "revised_code": {"commit": "57e7994c9e46d068ba53cb320c91c22ec24f76de", "changed_code": [{"header": "diff --git a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\nindex 8ab642d9..a70b38a8 100644\n--- a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n+++ b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n", "chunk": "@@ -270,6 +271,7 @@ public abstract class DefaultStreamExtractorTest extends DefaultExtractorTest<St\n                 assertIsSecureUrl(stream.getUrl());\n \n                 final int formatId = stream.getFormatId();\n+                // see MediaFormat: video stream formats range from 0x100 to 0x1000\n                 assertTrue(\"format id does not fit an audio stream: \" + formatId,\n                         0x100 <= formatId && formatId < 0x1000);\n             }\n", "next_change": null}]}}, {"oid": "cd32e7436ea4781939608c8a9ed36b72f2173bc0", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/cd32e7436ea4781939608c8a9ed36b72f2173bc0", "message": "Add some missing finals and nullables", "committedDate": "2020-10-25T07:09:53Z", "type": "forcePushed"}, {"oid": "57e7994c9e46d068ba53cb320c91c22ec24f76de", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/57e7994c9e46d068ba53cb320c91c22ec24f76de", "message": "Add some missing finals, nullables and comments", "committedDate": "2020-10-25T07:12:41Z", "type": "commit"}, {"oid": "57e7994c9e46d068ba53cb320c91c22ec24f76de", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/57e7994c9e46d068ba53cb320c91c22ec24f76de", "message": "Add some missing finals, nullables and comments", "committedDate": "2020-10-25T07:12:41Z", "type": "forcePushed"}]}