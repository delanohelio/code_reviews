{"pr_number": 309, "pr_title": "Improve stream extractor tests & various fixes", "pr_author": "Stypox", "pr_createdAt": "2020-04-09T20:37:06Z", "pr_url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/309", "merge_commit": "14c0c37d64883e795445bc8bd878df33ad6bdb9d", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY3MTA3NQ==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/309#discussion_r406671075", "body": "Why are you using a regex for conferences while using `substring()` for API URLs here and using `URL#getPath()` + `substring()` for non-API URLs here?", "bodyText": "Why are you using a regex for conferences while using substring() for API URLs here and using URL#getPath() + substring() for non-API URLs here?", "bodyHTML": "<p dir=\"auto\">Why are you using a regex for conferences while using <code>substring()</code> for API URLs here and using <code>URL#getPath()</code> + <code>substring()</code> for non-API URLs here?</p>", "author": "wb9688", "createdAt": "2020-04-10T09:00:01Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/media_ccc/linkHandler/MediaCCCStreamLinkHandlerFactory.java", "diffHunk": "@@ -9,10 +8,12 @@\n import java.net.URL;\n \n public class MediaCCCStreamLinkHandlerFactory extends LinkHandlerFactory {\n+    public static final String VIDEO_API_ENDPOINT = \"https://api.media.ccc.de/public/events/\";\n+    private static final String VIDEO_PATH = \"https://media.ccc.de/v/\";\n \n     @Override\n     public String getId(String urlString) throws ParsingException {\n-        if (urlString.startsWith(\"https://api.media.ccc.de/public/events/\") &&\n+        if (urlString.startsWith(VIDEO_API_ENDPOINT) &&\n                 !urlString.contains(\"?q=\")) {\n             return urlString.substring(39); //remove api\u2026/public/events part\n         }", "originalCommit": "051e3fa5aa43417ac221ac030aa33ae2e3359cc0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY5ODg0OQ==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/309#discussion_r406698849", "bodyText": "I left everything as it was before, I only replaced the hardcoded url. Will fix this", "author": "Stypox", "createdAt": "2020-04-10T10:22:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY3MTA3NQ=="}], "type": "inlineReview", "revised_code": {"commit": "6dd5f016b1c9de508bc2d99105221aa8383a53c8", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/media_ccc/linkHandler/MediaCCCStreamLinkHandlerFactory.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/media_ccc/linkHandler/MediaCCCStreamLinkHandlerFactory.java\nindex 729d97eb..fa9ac482 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/media_ccc/linkHandler/MediaCCCStreamLinkHandlerFactory.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/media_ccc/linkHandler/MediaCCCStreamLinkHandlerFactory.java\n", "chunk": "@@ -2,52 +2,27 @@ package org.schabi.newpipe.extractor.services.media_ccc.linkHandler;\n \n import org.schabi.newpipe.extractor.exceptions.ParsingException;\n import org.schabi.newpipe.extractor.linkhandler.LinkHandlerFactory;\n-import org.schabi.newpipe.extractor.utils.Utils;\n-\n-import java.net.MalformedURLException;\n-import java.net.URL;\n+import org.schabi.newpipe.extractor.utils.Parser;\n \n public class MediaCCCStreamLinkHandlerFactory extends LinkHandlerFactory {\n     public static final String VIDEO_API_ENDPOINT = \"https://api.media.ccc.de/public/events/\";\n     private static final String VIDEO_PATH = \"https://media.ccc.de/v/\";\n+    private static final String ID_PATTERN = \"(?:(?:(?:api\\\\.)?media\\\\.ccc\\\\.de/public/events/)|(?:media\\\\.ccc\\\\.de/v/))([^/?&#]*)\";\n \n     @Override\n-    public String getId(String urlString) throws ParsingException {\n-        if (urlString.startsWith(VIDEO_API_ENDPOINT) &&\n-                !urlString.contains(\"?q=\")) {\n-            return urlString.substring(39); //remove api\u2026/public/events part\n-        }\n-\n-        URL url;\n-        try {\n-            url = Utils.stringToURL(urlString);\n-        } catch (MalformedURLException e) {\n-            throw new IllegalArgumentException(\"The given URL is not valid\");\n-        }\n-\n-        String path = url.getPath();\n-        // remove leading \"/\" of URL-path if URL-path is given\n-        if (!path.isEmpty()) {\n-            path = path.substring(1);\n-        }\n-\n-        if (path.startsWith(\"v/\")) {\n-            return path.substring(2);\n-        }\n-\n-        throw new ParsingException(\"Could not get id from url: \" + url);\n+    public String getId(final String url) throws ParsingException {\n+        return Parser.matchGroup1(ID_PATTERN, url);\n     }\n \n     @Override\n-    public String getUrl(String id) throws ParsingException {\n+    public String getUrl(final String id) throws ParsingException {\n         return VIDEO_PATH + id;\n     }\n \n     @Override\n-    public boolean onAcceptUrl(String url) throws ParsingException {\n+    public boolean onAcceptUrl(final String url) {\n         try {\n-            getId(url);\n-            return true;\n+            return getId(url) != null;\n         } catch (ParsingException e) {\n             return false;\n         }\n", "next_change": {"commit": "1d7a86e664717d09e33371bc87c289903b19feb2", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/media_ccc/linkHandler/MediaCCCStreamLinkHandlerFactory.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/media_ccc/linkHandler/MediaCCCStreamLinkHandlerFactory.java\nindex fa9ac482..a335abf8 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/media_ccc/linkHandler/MediaCCCStreamLinkHandlerFactory.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/media_ccc/linkHandler/MediaCCCStreamLinkHandlerFactory.java\n", "chunk": "@@ -2,27 +2,54 @@ package org.schabi.newpipe.extractor.services.media_ccc.linkHandler;\n \n import org.schabi.newpipe.extractor.exceptions.ParsingException;\n import org.schabi.newpipe.extractor.linkhandler.LinkHandlerFactory;\n-import org.schabi.newpipe.extractor.utils.Parser;\n+import org.schabi.newpipe.extractor.utils.Utils;\n \n-public class MediaCCCStreamLinkHandlerFactory extends LinkHandlerFactory {\n-    public static final String VIDEO_API_ENDPOINT = \"https://api.media.ccc.de/public/events/\";\n-    private static final String VIDEO_PATH = \"https://media.ccc.de/v/\";\n-    private static final String ID_PATTERN = \"(?:(?:(?:api\\\\.)?media\\\\.ccc\\\\.de/public/events/)|(?:media\\\\.ccc\\\\.de/v/))([^/?&#]*)\";\n+import java.net.MalformedURLException;\n+import java.net.URL;\n \n+public class MediaCCCStreamLinkHandlerFactory extends LinkHandlerFactory {\n     @Override\n-    public String getId(final String url) throws ParsingException {\n-        return Parser.matchGroup1(ID_PATTERN, url);\n+    public String getId(final String urlString) throws ParsingException {\n+        if (urlString.startsWith(\"https://media.ccc.de/public/events/\")\n+                && !urlString.contains(\"?q=\")) {\n+            return urlString.substring(35); //remove \u2026/public/events part\n+        }\n+\n+        if (urlString.startsWith(\"https://api.media.ccc.de/public/events/\")\n+                && !urlString.contains(\"?q=\")) {\n+            return urlString.substring(39); //remove api\u2026/public/events part\n+        }\n+\n+        URL url;\n+        try {\n+            url = Utils.stringToURL(urlString);\n+        } catch (MalformedURLException e) {\n+            throw new IllegalArgumentException(\"The given URL is not valid\");\n+        }\n+\n+        String path = url.getPath();\n+        // remove leading \"/\" of URL-path if URL-path is given\n+        if (!path.isEmpty()) {\n+            path = path.substring(1);\n+        }\n+\n+        if (path.startsWith(\"v/\")) {\n+            return path.substring(2);\n+        }\n+\n+        throw new ParsingException(\"Could not get id from url: \" + url);\n     }\n \n     @Override\n     public String getUrl(final String id) throws ParsingException {\n-        return VIDEO_PATH + id;\n+        return \"https://media.ccc.de/public/events/\" + id;\n     }\n \n     @Override\n     public boolean onAcceptUrl(final String url) {\n         try {\n-            return getId(url) != null;\n+            getId(url);\n+            return true;\n         } catch (ParsingException e) {\n             return false;\n         }\n", "next_change": {"commit": "07a90d116a0059a027f158f59b5fe9d2720f361f", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/media_ccc/linkHandler/MediaCCCStreamLinkHandlerFactory.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/media_ccc/linkHandler/MediaCCCStreamLinkHandlerFactory.java\nindex a335abf8..fa9ac482 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/media_ccc/linkHandler/MediaCCCStreamLinkHandlerFactory.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/media_ccc/linkHandler/MediaCCCStreamLinkHandlerFactory.java\n", "chunk": "@@ -2,54 +2,27 @@ package org.schabi.newpipe.extractor.services.media_ccc.linkHandler;\n \n import org.schabi.newpipe.extractor.exceptions.ParsingException;\n import org.schabi.newpipe.extractor.linkhandler.LinkHandlerFactory;\n-import org.schabi.newpipe.extractor.utils.Utils;\n-\n-import java.net.MalformedURLException;\n-import java.net.URL;\n+import org.schabi.newpipe.extractor.utils.Parser;\n \n public class MediaCCCStreamLinkHandlerFactory extends LinkHandlerFactory {\n-    @Override\n-    public String getId(final String urlString) throws ParsingException {\n-        if (urlString.startsWith(\"https://media.ccc.de/public/events/\")\n-                && !urlString.contains(\"?q=\")) {\n-            return urlString.substring(35); //remove \u2026/public/events part\n-        }\n+    public static final String VIDEO_API_ENDPOINT = \"https://api.media.ccc.de/public/events/\";\n+    private static final String VIDEO_PATH = \"https://media.ccc.de/v/\";\n+    private static final String ID_PATTERN = \"(?:(?:(?:api\\\\.)?media\\\\.ccc\\\\.de/public/events/)|(?:media\\\\.ccc\\\\.de/v/))([^/?&#]*)\";\n \n-        if (urlString.startsWith(\"https://api.media.ccc.de/public/events/\")\n-                && !urlString.contains(\"?q=\")) {\n-            return urlString.substring(39); //remove api\u2026/public/events part\n-        }\n-\n-        URL url;\n-        try {\n-            url = Utils.stringToURL(urlString);\n-        } catch (MalformedURLException e) {\n-            throw new IllegalArgumentException(\"The given URL is not valid\");\n-        }\n-\n-        String path = url.getPath();\n-        // remove leading \"/\" of URL-path if URL-path is given\n-        if (!path.isEmpty()) {\n-            path = path.substring(1);\n-        }\n-\n-        if (path.startsWith(\"v/\")) {\n-            return path.substring(2);\n-        }\n-\n-        throw new ParsingException(\"Could not get id from url: \" + url);\n+    @Override\n+    public String getId(final String url) throws ParsingException {\n+        return Parser.matchGroup1(ID_PATTERN, url);\n     }\n \n     @Override\n     public String getUrl(final String id) throws ParsingException {\n-        return \"https://media.ccc.de/public/events/\" + id;\n+        return VIDEO_PATH + id;\n     }\n \n     @Override\n     public boolean onAcceptUrl(final String url) {\n         try {\n-            getId(url);\n-            return true;\n+            return getId(url) != null;\n         } catch (ParsingException e) {\n             return false;\n         }\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "14c0c37d64883e795445bc8bd878df33ad6bdb9d", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/media_ccc/linkHandler/MediaCCCStreamLinkHandlerFactory.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/media_ccc/linkHandler/MediaCCCStreamLinkHandlerFactory.java\nindex 729d97eb..fa9ac482 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/media_ccc/linkHandler/MediaCCCStreamLinkHandlerFactory.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/media_ccc/linkHandler/MediaCCCStreamLinkHandlerFactory.java\n", "chunk": "@@ -2,52 +2,27 @@ package org.schabi.newpipe.extractor.services.media_ccc.linkHandler;\n \n import org.schabi.newpipe.extractor.exceptions.ParsingException;\n import org.schabi.newpipe.extractor.linkhandler.LinkHandlerFactory;\n-import org.schabi.newpipe.extractor.utils.Utils;\n-\n-import java.net.MalformedURLException;\n-import java.net.URL;\n+import org.schabi.newpipe.extractor.utils.Parser;\n \n public class MediaCCCStreamLinkHandlerFactory extends LinkHandlerFactory {\n     public static final String VIDEO_API_ENDPOINT = \"https://api.media.ccc.de/public/events/\";\n     private static final String VIDEO_PATH = \"https://media.ccc.de/v/\";\n+    private static final String ID_PATTERN = \"(?:(?:(?:api\\\\.)?media\\\\.ccc\\\\.de/public/events/)|(?:media\\\\.ccc\\\\.de/v/))([^/?&#]*)\";\n \n     @Override\n-    public String getId(String urlString) throws ParsingException {\n-        if (urlString.startsWith(VIDEO_API_ENDPOINT) &&\n-                !urlString.contains(\"?q=\")) {\n-            return urlString.substring(39); //remove api\u2026/public/events part\n-        }\n-\n-        URL url;\n-        try {\n-            url = Utils.stringToURL(urlString);\n-        } catch (MalformedURLException e) {\n-            throw new IllegalArgumentException(\"The given URL is not valid\");\n-        }\n-\n-        String path = url.getPath();\n-        // remove leading \"/\" of URL-path if URL-path is given\n-        if (!path.isEmpty()) {\n-            path = path.substring(1);\n-        }\n-\n-        if (path.startsWith(\"v/\")) {\n-            return path.substring(2);\n-        }\n-\n-        throw new ParsingException(\"Could not get id from url: \" + url);\n+    public String getId(final String url) throws ParsingException {\n+        return Parser.matchGroup1(ID_PATTERN, url);\n     }\n \n     @Override\n-    public String getUrl(String id) throws ParsingException {\n+    public String getUrl(final String id) throws ParsingException {\n         return VIDEO_PATH + id;\n     }\n \n     @Override\n-    public boolean onAcceptUrl(String url) throws ParsingException {\n+    public boolean onAcceptUrl(final String url) {\n         try {\n-            getId(url);\n-            return true;\n+            return getId(url) != null;\n         } catch (ParsingException e) {\n             return false;\n         }\n", "next_change": {"commit": "9f7e06c8177d2e536e23c223a0b23090d5551f3c", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/media_ccc/linkHandler/MediaCCCStreamLinkHandlerFactory.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/media_ccc/linkHandler/MediaCCCStreamLinkHandlerFactory.java\nindex fa9ac482..3ae9c37d 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/media_ccc/linkHandler/MediaCCCStreamLinkHandlerFactory.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/media_ccc/linkHandler/MediaCCCStreamLinkHandlerFactory.java\n", "chunk": "@@ -23,7 +41,7 @@ public class MediaCCCStreamLinkHandlerFactory extends LinkHandlerFactory {\n     public boolean onAcceptUrl(final String url) {\n         try {\n             return getId(url) != null;\n-        } catch (ParsingException e) {\n+        } catch (final ParsingException e) {\n             return false;\n         }\n     }\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "14c0c37d64883e795445bc8bd878df33ad6bdb9d", "message": "Merge commit", "committedDate": null}, {"oid": "b4e191397117447364d137791ec4b1ca3672d75b", "committedDate": "2020-12-27 13:25:48 +0100", "message": "[media.ccc.de] Play live streams"}, {"oid": "9f7e06c8177d2e536e23c223a0b23090d5551f3c", "committedDate": "2022-03-26 19:40:18 +0100", "message": "[MediaCCC] Fix checkstyle issues"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY3MTgzMA==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/309#discussion_r406671830", "body": "Please also handle the API URLs in `getId()` here", "bodyText": "Please also handle the API URLs in getId() here", "bodyHTML": "<p dir=\"auto\">Please also handle the API URLs in <code>getId()</code> here</p>", "author": "wb9688", "createdAt": "2020-04-10T09:02:01Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/linkHandler/PeertubeChannelLinkHandlerFactory.java", "diffHunk": "@@ -31,7 +32,7 @@ public String getUrl(String id, List<String> contentFilters, String searchFilter\n     @Override", "originalCommit": "051e3fa5aa43417ac221ac030aa33ae2e3359cc0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA2NDUxMg==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/309#discussion_r407064512", "bodyText": "Fixed while rebasing with the latest changes about accounts and channels", "author": "Stypox", "createdAt": "2020-04-11T13:32:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY3MTgzMA=="}], "type": "inlineReview", "revised_code": {"commit": "b6ae05794f0ec1620706af5df3c55ccfcbb3f091", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/linkHandler/PeertubeChannelLinkHandlerFactory.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/linkHandler/PeertubeChannelLinkHandlerFactory.java\nindex 8fbc0f47..2903c295 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/linkHandler/PeertubeChannelLinkHandlerFactory.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/linkHandler/PeertubeChannelLinkHandlerFactory.java\n", "chunk": "@@ -32,11 +31,16 @@ public class PeertubeChannelLinkHandlerFactory extends ListLinkHandlerFactory {\n     @Override\n     public String getUrl(String id, List<String> contentFilter, String sortFilter, String baseUrl)\n             throws ParsingException {\n-        return baseUrl + ACCOUNT_PATH + id;\n+        if (id.matches(ID_PATTERN)) {\n+            return baseUrl + \"/\" + id;\n+        } else {\n+            // This is needed for compatibility with older versions were we didn't support video channels yet\n+            return baseUrl + \"/accounts/\" + id;\n+        }\n     }\n \n     @Override\n     public boolean onAcceptUrl(String url) {\n-        return url.contains(\"/accounts/\");\n+        return url.contains(\"/accounts/\") || url.contains(\"/video-channels/\");\n     }\n }\n", "next_change": null}]}, "revised_code_in_main": {"commit": "14c0c37d64883e795445bc8bd878df33ad6bdb9d", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/linkHandler/PeertubeChannelLinkHandlerFactory.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/linkHandler/PeertubeChannelLinkHandlerFactory.java\nindex 8fbc0f47..9134c14e 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/linkHandler/PeertubeChannelLinkHandlerFactory.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/linkHandler/PeertubeChannelLinkHandlerFactory.java\n", "chunk": "@@ -20,23 +19,27 @@ public class PeertubeChannelLinkHandlerFactory extends ListLinkHandlerFactory {\n \n     @Override\n     public String getId(String url) throws ParsingException {\n-        return Parser.matchGroup1(ID_PATTERN, url);\n+        return Parser.matchGroup(ID_PATTERN, url, 0);\n     }\n \n     @Override\n     public String getUrl(String id, List<String> contentFilters, String searchFilter) throws ParsingException {\n-        String baseUrl = ServiceList.PeerTube.getBaseUrl();\n-        return getUrl(id, contentFilters, searchFilter, baseUrl);\n+        return getUrl(id, contentFilters, searchFilter, ServiceList.PeerTube.getBaseUrl());\n     }\n \n     @Override\n     public String getUrl(String id, List<String> contentFilter, String sortFilter, String baseUrl)\n             throws ParsingException {\n-        return baseUrl + ACCOUNT_PATH + id;\n+        if (id.matches(ID_PATTERN)) {\n+            return baseUrl + \"/\" + id;\n+        } else {\n+            // This is needed for compatibility with older versions were we didn't support video channels yet\n+            return baseUrl + \"/accounts/\" + id;\n+        }\n     }\n \n     @Override\n     public boolean onAcceptUrl(String url) {\n-        return url.contains(\"/accounts/\");\n+        return url.contains(\"/accounts/\") || url.contains(\"/video-channels/\");\n     }\n }\n", "next_change": {"commit": "e0b8e142fcc83bbb1f1d71dc6b4565f4524b5e33", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/linkHandler/PeertubeChannelLinkHandlerFactory.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/linkHandler/PeertubeChannelLinkHandlerFactory.java\nindex 9134c14e..950514b0 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/linkHandler/PeertubeChannelLinkHandlerFactory.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/linkHandler/PeertubeChannelLinkHandlerFactory.java\n", "chunk": "@@ -40,6 +40,28 @@ public class PeertubeChannelLinkHandlerFactory extends ListLinkHandlerFactory {\n \n     @Override\n     public boolean onAcceptUrl(String url) {\n-        return url.contains(\"/accounts/\") || url.contains(\"/video-channels/\");\n+        return url.contains(\"/accounts/\") || url.contains(\"/a/\")\n+                || url.contains(\"/video-channels/\") || url.contains(\"/c/\");\n+    }\n+\n+    /**\n+     * Fix id\n+     *\n+     * <p>\n+     * a/:accountName and c/:channelName ids are supported\n+     * by the PeerTube web client (>= v3.3.0)\n+     * but not by the API.\n+     * </p>\n+     *\n+     * @param id the id to fix\n+     * @return the fixed id\n+     */\n+    private String fixId(String id) {\n+        if (id.startsWith(\"a/\")) {\n+            id = \"accounts\" + id.substring(1);\n+        } else if (id.startsWith(\"c/\")) {\n+            id = \"video-channels\" + id.substring(1);\n+        }\n+        return id;\n     }\n }\n", "next_change": {"commit": "9ab32cb2e7e381c8b8a85362ea003cc7c4ca937d", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/linkHandler/PeertubeChannelLinkHandlerFactory.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/linkHandler/PeertubeChannelLinkHandlerFactory.java\nindex 950514b0..57a15d16 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/linkHandler/PeertubeChannelLinkHandlerFactory.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/linkHandler/PeertubeChannelLinkHandlerFactory.java\n", "chunk": "@@ -56,11 +66,11 @@ public class PeertubeChannelLinkHandlerFactory extends ListLinkHandlerFactory {\n      * @param id the id to fix\n      * @return the fixed id\n      */\n-    private String fixId(String id) {\n+    private String fixId(final String id) {\n         if (id.startsWith(\"a/\")) {\n-            id = \"accounts\" + id.substring(1);\n+            return \"accounts\" + id.substring(1);\n         } else if (id.startsWith(\"c/\")) {\n-            id = \"video-channels\" + id.substring(1);\n+            return \"video-channels\" + id.substring(1);\n         }\n         return id;\n     }\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "14c0c37d64883e795445bc8bd878df33ad6bdb9d", "message": "Merge commit", "committedDate": null}, {"oid": "e0b8e142fcc83bbb1f1d71dc6b4565f4524b5e33", "committedDate": "2021-11-03 13:26:27 +0100", "message": "[PeerTube] Support /a/ and /c/ short links"}, {"oid": "9ab32cb2e7e381c8b8a85362ea003cc7c4ca937d", "committedDate": "2022-03-26 19:40:19 +0100", "message": "[Peertube] Fix checkstyle issues"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY3MjI3MA==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/309#discussion_r406672270", "body": "Please also handle the API URLs in `getId()` here", "bodyText": "Please also handle the API URLs in getId() here", "bodyHTML": "<p dir=\"auto\">Please also handle the API URLs in <code>getId()</code> here</p>", "author": "wb9688", "createdAt": "2020-04-10T09:03:00Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/linkHandler/PeertubeStreamLinkHandlerFactory.java", "diffHunk": "@@ -27,7 +28,7 @@ public String getUrl(String id) {\n \n     @Override\n     public String getUrl(String id, String baseUrl) {\n-        return baseUrl + VIDEO_ENDPOINT + id;\n+        return baseUrl + VIDEO_PATH + id;\n     }\n \n     @Override", "originalCommit": "051e3fa5aa43417ac221ac030aa33ae2e3359cc0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY5OTI1OA==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/309#discussion_r406699258", "bodyText": "Oh right, for some reason I thought they were already being handled in some strange way", "author": "Stypox", "createdAt": "2020-04-10T10:23:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY3MjI3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA2NDM3OA==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/309#discussion_r407064378", "bodyText": "Those are already handled by the regex: /videos/(watch/)?([^/?&#]*)\nBoth \"framatube.org/api/v1/videos/id\" and \"framatube.org/videos/id\" match it and the second group is obtained correctly", "author": "Stypox", "createdAt": "2020-04-11T13:31:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY3MjI3MA=="}], "type": "inlineReview", "revised_code": {"commit": "6dd5f016b1c9de508bc2d99105221aa8383a53c8", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/linkHandler/PeertubeStreamLinkHandlerFactory.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/linkHandler/PeertubeStreamLinkHandlerFactory.java\nindex 9351a010..a0b7f56f 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/linkHandler/PeertubeStreamLinkHandlerFactory.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/linkHandler/PeertubeStreamLinkHandlerFactory.java\n", "chunk": "@@ -22,8 +22,7 @@ public class PeertubeStreamLinkHandlerFactory extends LinkHandlerFactory {\n \n     @Override\n     public String getUrl(String id) {\n-        String baseUrl = ServiceList.PeerTube.getBaseUrl();\n-        return getUrl(id, baseUrl);\n+        return getUrl(id, ServiceList.PeerTube.getBaseUrl());\n     }\n \n     @Override\n", "next_change": {"commit": "1d7a86e664717d09e33371bc87c289903b19feb2", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/linkHandler/PeertubeStreamLinkHandlerFactory.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/linkHandler/PeertubeStreamLinkHandlerFactory.java\nindex a0b7f56f..d3f369fc 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/linkHandler/PeertubeStreamLinkHandlerFactory.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/linkHandler/PeertubeStreamLinkHandlerFactory.java\n", "chunk": "@@ -22,12 +21,13 @@ public class PeertubeStreamLinkHandlerFactory extends LinkHandlerFactory {\n \n     @Override\n     public String getUrl(String id) {\n-        return getUrl(id, ServiceList.PeerTube.getBaseUrl());\n+        String baseUrl = ServiceList.PeerTube.getBaseUrl();\n+        return getUrl(id, baseUrl);\n     }\n \n     @Override\n     public String getUrl(String id, String baseUrl) {\n-        return baseUrl + VIDEO_PATH + id;\n+        return baseUrl + VIDEO_ENDPOINT + id;\n     }\n \n     @Override\n", "next_change": {"commit": "7ae3cb6d07cea6abb71d9c69eb2b1b276e5b795f", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/linkHandler/PeertubeStreamLinkHandlerFactory.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/linkHandler/PeertubeStreamLinkHandlerFactory.java\nindex d3f369fc..3e16b509 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/linkHandler/PeertubeStreamLinkHandlerFactory.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/linkHandler/PeertubeStreamLinkHandlerFactory.java\n", "chunk": "@@ -27,7 +28,7 @@ public class PeertubeStreamLinkHandlerFactory extends LinkHandlerFactory {\n \n     @Override\n     public String getUrl(String id, String baseUrl) {\n-        return baseUrl + VIDEO_ENDPOINT + id;\n+        return baseUrl + VIDEO_PATH + id;\n     }\n \n     @Override\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "14c0c37d64883e795445bc8bd878df33ad6bdb9d", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/linkHandler/PeertubeStreamLinkHandlerFactory.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/linkHandler/PeertubeStreamLinkHandlerFactory.java\nindex 9351a010..16b3fed3 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/linkHandler/PeertubeStreamLinkHandlerFactory.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/linkHandler/PeertubeStreamLinkHandlerFactory.java\n", "chunk": "@@ -22,8 +22,7 @@ public class PeertubeStreamLinkHandlerFactory extends LinkHandlerFactory {\n \n     @Override\n     public String getUrl(String id) {\n-        String baseUrl = ServiceList.PeerTube.getBaseUrl();\n-        return getUrl(id, baseUrl);\n+        return getUrl(id, ServiceList.PeerTube.getBaseUrl());\n     }\n \n     @Override\n", "next_change": {"commit": "9ab32cb2e7e381c8b8a85362ea003cc7c4ca937d", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/linkHandler/PeertubeStreamLinkHandlerFactory.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/linkHandler/PeertubeStreamLinkHandlerFactory.java\nindex 16b3fed3..aee042a0 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/linkHandler/PeertubeStreamLinkHandlerFactory.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/linkHandler/PeertubeStreamLinkHandlerFactory.java\n", "chunk": "@@ -6,42 +6,50 @@ import org.schabi.newpipe.extractor.exceptions.ParsingException;\n import org.schabi.newpipe.extractor.linkhandler.LinkHandlerFactory;\n import org.schabi.newpipe.extractor.utils.Parser;\n \n-public class PeertubeStreamLinkHandlerFactory extends LinkHandlerFactory {\n+public final class PeertubeStreamLinkHandlerFactory extends LinkHandlerFactory {\n \n-    private static final PeertubeStreamLinkHandlerFactory instance = new PeertubeStreamLinkHandlerFactory();\n-    private static final String ID_PATTERN = \"/videos/(watch/|embed/)?([^/?&#]*)\";\n+    private static final PeertubeStreamLinkHandlerFactory INSTANCE\n+            = new PeertubeStreamLinkHandlerFactory();\n+    private static final String ID_PATTERN = \"(/w/|(/videos/(watch/|embed/)?))(?!p/)([^/?&#]*)\";\n+    // we exclude p/ because /w/p/ is playlist, not video\n     public static final String VIDEO_API_ENDPOINT = \"/api/v1/videos/\";\n+\n+    // From PeerTube 3.3.0, the default path is /w/.\n+    // We still use /videos/watch/ for compatibility reasons:\n+    // /videos/watch/ is still accepted by >=3.3.0 but /w/ isn't by <3.3.0\n     private static final String VIDEO_PATH = \"/videos/watch/\";\n \n     private PeertubeStreamLinkHandlerFactory() {\n     }\n \n     public static PeertubeStreamLinkHandlerFactory getInstance() {\n-        return instance;\n+        return INSTANCE;\n     }\n \n     @Override\n-    public String getUrl(String id) {\n+    public String getUrl(final String id) {\n         return getUrl(id, ServiceList.PeerTube.getBaseUrl());\n     }\n \n     @Override\n-    public String getUrl(String id, String baseUrl) {\n+    public String getUrl(final String id, final String baseUrl) {\n         return baseUrl + VIDEO_PATH + id;\n     }\n \n     @Override\n-    public String getId(String url) throws ParsingException, IllegalArgumentException {\n-        return Parser.matchGroup(ID_PATTERN, url, 2);\n+    public String getId(final String url) throws ParsingException, IllegalArgumentException {\n+        return Parser.matchGroup(ID_PATTERN, url, 4);\n     }\n \n     @Override\n     public boolean onAcceptUrl(final String url) throws FoundAdException {\n-        if (url.contains(\"/playlist/\")) return false;\n+        if (url.contains(\"/playlist/\")) {\n+            return false;\n+        }\n         try {\n             getId(url);\n             return true;\n-        } catch (ParsingException e) {\n+        } catch (final ParsingException e) {\n             return false;\n         }\n     }\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "14c0c37d64883e795445bc8bd878df33ad6bdb9d", "message": "Merge commit", "committedDate": null}, {"oid": "599a91c88cab0af2fea5b17fa61f972a636230f0", "committedDate": "2021-11-03 11:51:58 +0100", "message": "[PeerTube] Support /w/ short video links"}, {"oid": "396aecef19ea61de9915727abd71aa55ef75549f", "committedDate": "2021-11-03 14:41:39 +0100", "message": "Make sure playlists aren't accepted by PeertubeStreamLinkHandlerFactory"}, {"oid": "9ab32cb2e7e381c8b8a85362ea003cc7c4ca937d", "committedDate": "2022-03-26 19:40:19 +0100", "message": "[Peertube] Fix checkstyle issues"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY3MjYyOQ==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/309#discussion_r406672629", "body": "Could be `final`", "bodyText": "Could be final", "bodyHTML": "<p dir=\"auto\">Could be <code>final</code></p>", "author": "wb9688", "createdAt": "2020-04-10T09:03:54Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java", "diffHunk": "@@ -258,7 +258,14 @@ public long getLength() throws ParsingException {\n      */\n     @Override\n     public long getTimeStamp() throws ParsingException {\n-        return getTimestampSeconds(\"((#|&|\\\\?)t=\\\\d{0,3}h?\\\\d{0,3}m?\\\\d{1,3}s?)\");\n+        long timestamp = getTimestampSeconds(\"((#|&|\\\\?)t=\\\\d{0,3}h?\\\\d{0,3}m?\\\\d{1,3}s?)\");", "originalCommit": "051e3fa5aa43417ac221ac030aa33ae2e3359cc0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6dd5f016b1c9de508bc2d99105221aa8383a53c8", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java\nindex 8d0512e4..d4a001ff 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java\n", "chunk": "@@ -258,7 +258,8 @@ public class YoutubeStreamExtractor extends StreamExtractor {\n      */\n     @Override\n     public long getTimeStamp() throws ParsingException {\n-        long timestamp = getTimestampSeconds(\"((#|&|\\\\?)t=\\\\d{0,3}h?\\\\d{0,3}m?\\\\d{1,3}s?)\");\n+        final long timestamp =\n+                getTimestampSeconds(\"((#|&|\\\\?)t=\\\\d{0,3}h?\\\\d{0,3}m?\\\\d{1,3}s?)\");\n \n         if (timestamp == -2) {\n             // regex for timestamp was not found\n", "next_change": {"commit": "1d7a86e664717d09e33371bc87c289903b19feb2", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java\nindex d4a001ff..8364246c 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java\n", "chunk": "@@ -258,15 +253,7 @@ public class YoutubeStreamExtractor extends StreamExtractor {\n      */\n     @Override\n     public long getTimeStamp() throws ParsingException {\n-        final long timestamp =\n-                getTimestampSeconds(\"((#|&|\\\\?)t=\\\\d{0,3}h?\\\\d{0,3}m?\\\\d{1,3}s?)\");\n-\n-        if (timestamp == -2) {\n-            // regex for timestamp was not found\n-            return 0;\n-        } else {\n-            return timestamp;\n-        }\n+        return getTimestampSeconds(\"((#|&|\\\\?)(t|start)=\\\\d{0,3}h?\\\\d{0,3}m?\\\\d{1,3}s?)\");\n     }\n \n     @Override\n", "next_change": {"commit": "7cd410f3fc304a9eb620fa28ba39f938e4565c2b", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java\nindex 8364246c..bdaf4cad 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java\n", "chunk": "@@ -253,7 +253,14 @@ public class YoutubeStreamExtractor extends StreamExtractor {\n      */\n     @Override\n     public long getTimeStamp() throws ParsingException {\n-        return getTimestampSeconds(\"((#|&|\\\\?)(t|start)=\\\\d{0,3}h?\\\\d{0,3}m?\\\\d{1,3}s?)\");\n+        long timestamp = getTimestampSeconds(\"((#|&|\\\\?)t=\\\\d{0,3}h?\\\\d{0,3}m?\\\\d{1,3}s?)\");\n+\n+        if (timestamp == -2) {\n+            // regex for timestamp was not found\n+            return 0;\n+        } else {\n+            return timestamp;\n+        }\n     }\n \n     @Override\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "14c0c37d64883e795445bc8bd878df33ad6bdb9d", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java\nindex 8d0512e4..0077a163 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java\n", "chunk": "@@ -258,7 +253,8 @@ public class YoutubeStreamExtractor extends StreamExtractor {\n      */\n     @Override\n     public long getTimeStamp() throws ParsingException {\n-        long timestamp = getTimestampSeconds(\"((#|&|\\\\?)t=\\\\d{0,3}h?\\\\d{0,3}m?\\\\d{1,3}s?)\");\n+        final long timestamp =\n+                getTimestampSeconds(\"((#|&|\\\\?)t=\\\\d{0,3}h?\\\\d{0,3}m?\\\\d{1,3}s?)\");\n \n         if (timestamp == -2) {\n             // regex for timestamp was not found\n", "next_change": {"commit": "db0ef83d6bc89cda92ca7084b21d51cd68dbdb0d", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java\nindex 0077a163..44a43483 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java\n", "chunk": "@@ -253,15 +255,7 @@ public class YoutubeStreamExtractor extends StreamExtractor {\n      */\n     @Override\n     public long getTimeStamp() throws ParsingException {\n-        final long timestamp =\n-                getTimestampSeconds(\"((#|&|\\\\?)t=\\\\d{0,3}h?\\\\d{0,3}m?\\\\d{1,3}s?)\");\n-\n-        if (timestamp == -2) {\n-            // regex for timestamp was not found\n-            return 0;\n-        } else {\n-            return timestamp;\n-        }\n+        return getTimestampSeconds(\"((#|&|\\\\?)(t|start)=\\\\d{0,3}h?\\\\d{0,3}m?\\\\d{1,3}s?)\");\n     }\n \n     @Override\n", "next_change": {"commit": "62912ee8349f5d26617c039f337297628ff52ead", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java\nindex 44a43483..0b7e8f86 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java\n", "chunk": "@@ -255,7 +259,15 @@ public class YoutubeStreamExtractor extends StreamExtractor {\n      */\n     @Override\n     public long getTimeStamp() throws ParsingException {\n-        return getTimestampSeconds(\"((#|&|\\\\?)(t|start)=\\\\d{0,3}h?\\\\d{0,3}m?\\\\d{1,3}s?)\");\n+        final long timestamp =\n+                getTimestampSeconds(\"((#|&|\\\\?)t=\\\\d{0,3}h?\\\\d{0,3}m?\\\\d{1,3}s?)\");\n+\n+        if (timestamp == -2) {\n+            // regex for timestamp was not found\n+            return 0;\n+        } else {\n+            return timestamp;\n+        }\n     }\n \n     @Override\n", "next_change": {"commit": "b49ae547a32281fd344cae0b1532b896ab5fbab4", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java\nindex 0b7e8f86..4acc1fb7 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java\n", "chunk": "@@ -273,22 +309,8 @@ public class YoutubeStreamExtractor extends StreamExtractor {\n     @Override\n     public long getViewCount() throws ParsingException {\n         assertPageFetched();\n-        String views = null;\n-\n-        try {\n-            views = getTextFromObject(getVideoPrimaryInfoRenderer().getObject(\"viewCount\")\n-                    .getObject(\"videoViewCountRenderer\").getObject(\"viewCount\"));\n-        } catch (ParsingException ignored) {\n-            // age-restricted videos cause a ParsingException here\n-        }\n-\n-        if (isNullOrEmpty(views)) {\n-            views = playerResponse.getObject(\"videoDetails\").getString(\"viewCount\");\n-\n-            if (isNullOrEmpty(views)) throw new ParsingException(\"Could not get view count\");\n-        }\n-\n-        if (views.toLowerCase().contains(\"no views\")) return 0;\n+        final String views = playerResponse.getObject(\"videoDetails\").getString(\"viewCount\");\n+        if (isNullOrEmpty(views)) throw new ParsingException(\"Could not get view count\");\n \n         return Long.parseLong(Utils.removeNonDigitCharacters(views));\n     }\n", "next_change": {"commit": "318bc46a8c6da418ed58501f3cbcb9312d5cac8e", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java\nindex 4acc1fb7..2b2a00ff 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java\n", "chunk": "@@ -308,9 +320,22 @@ public class YoutubeStreamExtractor extends StreamExtractor {\n \n     @Override\n     public long getViewCount() throws ParsingException {\n-        assertPageFetched();\n-        final String views = playerResponse.getObject(\"videoDetails\").getString(\"viewCount\");\n-        if (isNullOrEmpty(views)) throw new ParsingException(\"Could not get view count\");\n+        String views = null;\n+\n+        try {\n+            views = getTextFromObject(getVideoPrimaryInfoRenderer().getObject(\"viewCount\")\n+                    .getObject(\"videoViewCountRenderer\").getObject(\"viewCount\"));\n+        } catch (final ParsingException ignored) {\n+            // Age-restricted videos cause a ParsingException here\n+        }\n+\n+        if (isNullOrEmpty(views)) {\n+            views = playerResponse.getObject(\"videoDetails\").getString(\"viewCount\");\n+\n+            if (isNullOrEmpty(views)) throw new ParsingException(\"Could not get view count\");\n+        }\n+\n+        if (views.toLowerCase().contains(\"no views\")) return 0;\n \n         return Long.parseLong(Utils.removeNonDigitCharacters(views));\n     }\n", "next_change": {"commit": "c4eca91be9013671e68ef5d5f84a7284b8c316f1", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java\nindex 2b2a00ff..0755f8cc 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java\n", "chunk": "@@ -343,19 +337,33 @@ public class YoutubeStreamExtractor extends StreamExtractor {\n     @Override\n     public long getLikeCount() throws ParsingException {\n         assertPageFetched();\n-        String likesString = \"\";\n+        String likesString = null;\n         try {\n-            try {\n-                likesString = getVideoPrimaryInfoRenderer().getObject(\"sentimentBar\")\n-                        .getObject(\"sentimentBarRenderer\").getString(\"tooltip\").split(\"/\")[0];\n-            } catch (final NullPointerException e) {\n+            likesString = getVideoPrimaryInfoRenderer().getObject(\"sentimentBar\")\n+                    .getObject(\"sentimentBarRenderer\").getString(\"tooltip\");\n+            if (likesString != null && likesString.contains(\"/\")) {\n+                likesString = likesString.split(\"/\")[0];\n+            } else {\n+                likesString = getVideoPrimaryInfoRenderer()\n+                        .getObject(\"videoActions\")\n+                        .getObject(\"menuRenderer\")\n+                        .getArray(\"topLevelButtons\")\n+                        .getObject(0)\n+                        .getObject(\"toggleButtonRenderer\")\n+                        .getObject(\"defaultText\")\n+                        .getObject(\"accessibility\")\n+                        .getObject(\"accessibilityData\")\n+                        .getString(\"label\");\n+            }\n+\n+            if (likesString == null) {\n                 // If this kicks in our button has no content and therefore ratings must be disabled\n                 if (playerResponse.getObject(\"videoDetails\").getBoolean(\"allowRatings\")) {\n-                    throw new ParsingException(\n-                            \"Ratings are enabled even though the like button is missing\", e);\n+                    throw new ParsingException(\"Ratings are enabled even though the like button is missing\");\n                 }\n                 return -1;\n             }\n+\n             return Integer.parseInt(Utils.removeNonDigitCharacters(likesString));\n         } catch (final NumberFormatException nfe) {\n             throw new ParsingException(\"Could not parse \\\"\" + likesString + \"\\\" as an Integer\",\n", "next_change": {"commit": "a6961c5efa29c5a6cbeffb73866837cb8c3974e1", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java\nindex 0755f8cc..34b56d64 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java\n", "chunk": "@@ -364,6 +358,10 @@ public class YoutubeStreamExtractor extends StreamExtractor {\n                 return -1;\n             }\n \n+            if (likesString.toLowerCase().contains(\"no likes\")) {\n+                return 0;\n+            }\n+\n             return Integer.parseInt(Utils.removeNonDigitCharacters(likesString));\n         } catch (final NumberFormatException nfe) {\n             throw new ParsingException(\"Could not parse \\\"\" + likesString + \"\\\" as an Integer\",\n", "next_change": {"commit": "119b9129e2618a4e0c9ee62db870d5516c6b4470", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java\nindex 34b56d64..6e273fd9 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java\n", "chunk": "@@ -337,27 +417,88 @@ public class YoutubeStreamExtractor extends StreamExtractor {\n     @Override\n     public long getLikeCount() throws ParsingException {\n         assertPageFetched();\n+\n+        // If ratings are not allowed, there is no like count available\n+        if (!playerResponse.getObject(\"videoDetails\").getBoolean(\"allowRatings\")) {\n+            return -1;\n+        }\n+\n         String likesString = \"\";\n+\n         try {\n-            likesString = getVideoPrimaryInfoRenderer()\n+            final JsonArray topLevelButtons = getVideoPrimaryInfoRenderer()\n                     .getObject(\"videoActions\")\n                     .getObject(\"menuRenderer\")\n-                    .getArray(\"topLevelButtons\")\n-                    .getObject(0)\n-                    .getObject(\"toggleButtonRenderer\")\n-                    .getObject(\"defaultText\")\n-                    .getObject(\"accessibility\")\n+                    .getArray(\"topLevelButtons\");\n+\n+            // Try first with the new video actions buttons data structure\n+            JsonObject likeToggleButtonRenderer = topLevelButtons.stream()\n+                    .filter(JsonObject.class::isInstance)\n+                    .map(JsonObject.class::cast)\n+                    .map(button -> button.getObject(\"segmentedLikeDislikeButtonRenderer\")\n+                            .getObject(\"likeButton\")\n+                            .getObject(\"toggleButtonRenderer\"))\n+                    .filter(toggleButtonRenderer -> !isNullOrEmpty(toggleButtonRenderer))\n+                    .findFirst()\n+                    .orElse(null);\n+\n+            // Use the old video actions buttons data structure if the new one isn't returned\n+            if (likeToggleButtonRenderer == null) {\n+                /*\n+                In the old video actions buttons data structure, there are 3 ways to detect whether\n+                a button is the like button, using its toggleButtonRenderer:\n+                - checking whether toggleButtonRenderer.targetId is equal to watch-like;\n+                - checking whether toggleButtonRenderer.defaultIcon.iconType is equal to LIKE;\n+                - checking whether\n+                  toggleButtonRenderer.toggleButtonSupportedData.toggleButtonIdData.id\n+                  is equal to TOGGLE_BUTTON_ID_TYPE_LIKE.\n+                */\n+                likeToggleButtonRenderer = topLevelButtons.stream()\n+                        .filter(JsonObject.class::isInstance)\n+                        .map(JsonObject.class::cast)\n+                        .map(topLevelButton -> topLevelButton.getObject(\"toggleButtonRenderer\"))\n+                        .filter(toggleButtonRenderer -> toggleButtonRenderer.getString(\"targetId\")\n+                                .equalsIgnoreCase(\"watch-like\")\n+                                || toggleButtonRenderer.getObject(\"defaultIcon\")\n+                                .getString(\"iconType\")\n+                                .equalsIgnoreCase(\"LIKE\")\n+                                || toggleButtonRenderer.getObject(\"toggleButtonSupportedData\")\n+                                .getObject(\"toggleButtonIdData\")\n+                                .getString(\"id\")\n+                                .equalsIgnoreCase(\"TOGGLE_BUTTON_ID_TYPE_LIKE\"))\n+                        .findFirst()\n+                        .orElseThrow(() -> new ParsingException(\n+                                \"The like button is missing even though ratings are enabled\"));\n+            }\n+\n+            // Use one of the accessibility strings available (this one has the same path as the\n+            // one used for comments' like count extraction)\n+            likesString = likeToggleButtonRenderer.getObject(\"accessibilityData\")\n                     .getObject(\"accessibilityData\")\n                     .getString(\"label\");\n \n+            // Use the other accessibility string available which contains the exact like count\n             if (likesString == null) {\n-                // If this kicks in our button has no content and therefore ratings must be disabled\n-                if (playerResponse.getObject(\"videoDetails\").getBoolean(\"allowRatings\")) {\n-                    throw new ParsingException(\"Ratings are enabled even though the like button is missing\");\n-                }\n-                return -1;\n+                likesString = likeToggleButtonRenderer.getObject(\"accessibility\")\n+                        .getString(\"label\");\n             }\n \n+            // Last method: use the defaultText's accessibility data, which contains the exact like\n+            // count too, except when it is equal to 0, where a localized string is returned instead\n+            if (likesString == null) {\n+                likesString = likeToggleButtonRenderer.getObject(\"defaultText\")\n+                        .getObject(\"accessibility\")\n+                        .getObject(\"accessibilityData\")\n+                        .getString(\"label\");\n+            }\n+\n+            // If ratings are allowed and the likes string is null, it means that we couldn't\n+            // extract the (real) like count from accessibility data\n+            if (likesString == null) {\n+                throw new ParsingException(\"Could not get like count from accessibility data\");\n+            }\n+\n+            // This check only works with English localizations!\n             if (likesString.toLowerCase().contains(\"no likes\")) {\n                 return 0;\n             }\n", "next_change": null}, {"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java\nindex 34b56d64..6e273fd9 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java\n", "chunk": "@@ -367,10 +508,7 @@ public class YoutubeStreamExtractor extends StreamExtractor {\n             throw new ParsingException(\"Could not parse \\\"\" + likesString + \"\\\" as an Integer\",\n                     nfe);\n         } catch (final Exception e) {\n-            if (getAgeLimit() == NO_AGE_LIMIT) {\n-                throw new ParsingException(\"Could not get like count\", e);\n-            }\n-            return -1;\n+            throw new ParsingException(\"Could not get like count\", e);\n         }\n     }\n \n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "14c0c37d64883e795445bc8bd878df33ad6bdb9d", "message": "Merge commit", "committedDate": null}, {"oid": "01f49e8f668dc06355d9a3c9dc9cd5ce7c1501ac", "committedDate": "2020-10-26 16:32:39 +0100", "message": "polish strings"}, {"oid": "db0ef83d6bc89cda92ca7084b21d51cd68dbdb0d", "committedDate": "2020-10-27 13:40:24 +0100", "message": "fix youtube decryption and three attemps bug"}, {"oid": "6dc5ab4015699488f4377b4b30ad8e30afc9f1a9", "committedDate": "2020-10-27 13:48:58 +0100", "message": "find playerUrl in another place when assetsPattern regex fails"}, {"oid": "62912ee8349f5d26617c039f337297628ff52ead", "committedDate": "2020-10-28 14:28:06 +0100", "message": "Merge branch 'master' into dev"}, {"oid": "30ed4f2d636dbb6112ae1951e646f8756ae93ff4", "committedDate": "2020-10-28 20:26:00 +0100", "message": "Remove any reference to decrypt and improve error message"}, {"oid": "4f04cfcccaaf49bb5362bb7a02f6450c446934b6", "committedDate": "2020-11-01 06:28:54 +0530", "message": "Switch from Calendar to OffsetDateTime in DateWrapper."}, {"oid": "827f7bd13750b29e2382c6681f23b707f76e5f33", "committedDate": "2020-11-04 16:02:12 +0100", "message": "[YouTube] Cache deobfuscation and improve requests made"}, {"oid": "89a77ae74a939bb6180b57266ba50f82a37caa73", "committedDate": "2020-11-04 16:03:08 +0100", "message": "[YouTube] Fix detection of ended livestreams and parse livestream upload date"}, {"oid": "4c19a88612ec315cd1234551f70ce168a3a6cb48", "committedDate": "2020-12-11 06:09:50 +0530", "message": "Use Objects.toString()."}, {"oid": "d3eea4f4be1acd721047ffbe1e3eff16244fc857", "committedDate": "2020-12-12 10:24:29 +0100", "message": "Add stream segments to StreamInfo"}, {"oid": "2ba27b39af2a5e19cc9ecd0f813fe1f7de072c86", "committedDate": "2020-12-12 15:00:45 +0100", "message": "Stream segments: Remove replaceAll from setPreviewUrl"}, {"oid": "22a415156ffaaad00fce103241dbe9cd74070bd2", "committedDate": "2020-12-19 11:12:22 +0100", "message": "Merge pull request #479 from vkay94/stream-segments"}, {"oid": "bc6de149527fabb235068bfed538194316054ddb", "committedDate": "2020-12-22 18:19:26 +0100", "message": "Extract stream and search meta info for YouTube"}, {"oid": "d30caeb0916b9030a5ead8cdec7e134c401a50ac", "committedDate": "2020-12-27 15:55:03 +0100", "message": "Fix YouTube player JavaScript URL redirection"}, {"oid": "11dcfe638b994fc30db3589fc1aaf273ab241362", "committedDate": "2021-01-14 20:01:06 +0100", "message": "Add durationPerFrame to Frameset and getFrameBoundsAt method"}, {"oid": "1414a6f178cf8f2ff1024df80fa00d8f2c85f5f4", "committedDate": "2021-02-03 22:07:34 +0100", "message": "Fix extraction of YouTube chapters (#531)"}, {"oid": "a931e31239159c16f98cddc38d507dfddcae54ed", "committedDate": "2021-02-12 22:36:18 +0100", "message": "fix tests"}, {"oid": "557934cb1720554a177151b22bc86b7e1f9c8c46", "committedDate": "2021-02-15 18:51:46 +0100", "message": "use EMPTY_STRING"}, {"oid": "e844d2aed34e2b305e2d6412d9c885f81caa9374", "committedDate": "2021-02-18 20:16:52 +0530", "message": "Add dash fields to the ItagItem."}, {"oid": "11eb4932f4eb52bd2e88c5e8d63c76f54ecd912a", "committedDate": "2021-02-18 20:16:52 +0530", "message": "Add data to respective classes."}, {"oid": "d1054338d3a1354e7e82dec83a3ca80e342cc618", "committedDate": "2021-02-18 20:16:52 +0530", "message": "Fix error with livestreams."}, {"oid": "a7c9905183175e1257e8f23fa5a330ae6edb2d44", "committedDate": "2021-02-18 20:16:52 +0530", "message": "Fix requested changes."}, {"oid": "f31b2a68fdec41ee500fdbd0aa211c56e21beb80", "committedDate": "2021-02-18 20:16:53 +0530", "message": "use getters/setters."}, {"oid": "5b70645d8537e82d4b85e629cb3b58e69eb3ca65", "committedDate": "2021-02-18 20:16:53 +0530", "message": "Add data to muxed streams aswell."}, {"oid": "1a322ad8edcf54e90f84d236fbe6dce1a9d8ae47", "committedDate": "2021-02-18 16:36:40 +0100", "message": "Add uploader verified by service extraction"}, {"oid": "5333d8a98b9ec35266479752a73fb8ca6250a24b", "committedDate": "2021-02-19 00:55:03 +0530", "message": "Add more data."}, {"oid": "771bb1a2cbedb7de7547d04d2048a48f5e220663", "committedDate": "2021-03-05 16:38:39 +0100", "message": "Add three new exceptions for unavailable YouTube contents These exceptions are thrown on a test with the error messages text, because YouTube returns only \"UNPLAYABLE\" status in most error cases. Tests are based with English strings, so changing the lang used by extractor will throw the generic exception (ContentNotAvailableException)."}, {"oid": "59d6d3f04ef36d2b6639c88bcd547f2f7eb33f52", "committedDate": "2021-03-05 16:38:42 +0100", "message": "Fix YouTube tests"}, {"oid": "448b68700c140bc4b763e15ed7494edfa96db9fd", "committedDate": "2021-03-05 16:38:49 +0100", "message": "Use final in exceptions and add AgeRestrictedException AgeRestrictedException will be thrown only if the reason message equals to \"Sign in to confirm your age\" and if the age limit is 18."}, {"oid": "da3cfa967d5f6e49c4c3e047ba95428ea84c7da8", "committedDate": "2021-03-05 16:38:50 +0100", "message": "Handle age-restricted videos"}, {"oid": "890cbba6255a8d7af5554f8e01909210f9c7a72d", "committedDate": "2021-03-05 16:38:51 +0100", "message": "Update PaidContent exception"}, {"oid": "d0a1041afd5edbe3d24a4ae43dda87b5a7e79703", "committedDate": "2021-03-05 16:38:52 +0100", "message": "Prevent NullPointerException and use equalsIgnorecase"}, {"oid": "e55284bb8f92d4155676fee2a823bdeca0e1eceb", "committedDate": "2021-03-05 16:38:53 +0100", "message": "Code style improvements Use final where possible in YoutubeStreamExtractor and do some other code style improvements"}, {"oid": "c47cc54908d14d3faa6326e62cb8c8add9463df2", "committedDate": "2021-03-19 10:14:43 +0100", "message": "Extract metadata for YouTube, SoundCloud & MediaCCC"}, {"oid": "8806fb4e6bac52d657b74d8fd35a454456636b34", "committedDate": "2021-03-19 10:14:43 +0100", "message": "address reviews"}, {"oid": "14f6f1b7c3d4a98ac0a74a9f6d16b05cb96c0c91", "committedDate": "2021-03-31 20:24:40 +0200", "message": "Generify related streams calls and rename method"}, {"oid": "e8b5364745ca204fb7fcdf44287540e0f47ee723", "committedDate": "2021-05-21 16:22:24 +0300", "message": "Update YoutubeStreamExtractor.java"}, {"oid": "e9a992b0a93b27800cc3dd94fb6f77b2cf880f5a", "committedDate": "2021-06-23 12:06:02 +0200", "message": "[youtube] Fix extraction of age restricted videos"}, {"oid": "b475f09ba7c8b914459f76b92b9030891fa95b23", "committedDate": "2021-06-23 20:33:32 +0200", "message": "don't do useless concatenation"}, {"oid": "a86a30103fc4afc2bc199b57dc59d2fc9b7fe21b", "committedDate": "2021-07-15 20:05:25 +0200", "message": "[Youtube] bare bones version to solve throttling"}, {"oid": "80cf8b3acdc66efaa76f8bd67d1d6bf7a20b98f7", "committedDate": "2021-07-15 20:05:25 +0200", "message": "Extract separate YoutubeThrottlingDecoder"}, {"oid": "fcdb9bdbebc6271f7b7b9de7620ddd71d9af334f", "committedDate": "2021-07-15 20:05:26 +0200", "message": "add url to sout"}, {"oid": "a189f685dcfc8d9bfb78fc71732c435c71ef0902", "committedDate": "2021-07-16 19:20:40 +0200", "message": "cache player js code"}, {"oid": "6956b72af7967ea60a50f3c49a3ff1de8ff60f35", "committedDate": "2021-07-17 10:05:14 +0200", "message": "Fix YoutubeThrottlingDecoder.replaceNParam"}, {"oid": "17ccaf4b877399de28609b9279ca4c3123bdb13a", "committedDate": "2021-07-17 16:41:10 +0200", "message": "Update YoutubeStreamExtractor.java"}, {"oid": "ecf4232ce311c4d6cb690c626634ba54200e7528", "committedDate": "2021-07-17 16:41:12 +0200", "message": "Using ``Collections.emptyList()``"}, {"oid": "a02ee2e952a4d002491c07de4296d0abd3401f72", "committedDate": "2021-07-17 19:10:09 +0200", "message": "Rewrite youtube throttling solution and add tests"}, {"oid": "a683c8d2784984f0d93f330a824046e1b9c8f081", "committedDate": "2021-07-17 19:14:57 +0200", "message": "Delete duplicated code to load youtube javascript file"}, {"oid": "3a3d1d7f2bd364cdb5e81a6a1171471ca55f1fc2", "committedDate": "2021-07-20 20:48:11 +0200", "message": "Make YoutubeJavaScriptExtractor and JavaScript methods static"}, {"oid": "d13f531b6ff985b5ca51166e0c59ef3dc4a87b59", "committedDate": "2021-07-27 17:28:32 +0200", "message": "Use YoutubeThrottlingDecrypter also in getAudioStreams and getVideoOnlyStreams methods of YoutubeStreamExtractor"}, {"oid": "394c02ad06816c163b284e4e84ae41152b950aad", "committedDate": "2021-07-28 18:01:57 +0200", "message": "Merge pull request #683 from XiangRongLin/yt_throttling"}, {"oid": "b49ae547a32281fd344cae0b1532b896ab5fbab4", "committedDate": "2021-08-01 12:38:01 +0200", "message": "Do some improvements to YoutubeStreamExtractor"}, {"oid": "e7d589edbf606cb8e6684f88948f44abcd9a1419", "committedDate": "2021-08-01 12:38:36 +0200", "message": "Use the youtubei API for YouTube videos + update client version"}, {"oid": "013b90253591b3579f18ea9a155f27d6a9d84163", "committedDate": "2021-08-01 12:38:36 +0200", "message": "Use the Android mobile API when there are OTF streams or the content is protected by signatureCiphers"}, {"oid": "b52732a1c35c48bc5d3e775676f81a1efaeb149e", "committedDate": "2021-08-01 12:38:37 +0200", "message": "Fix the fetch of the playerCode at each time getStsFromPlayerJs is called"}, {"oid": "947baec805b37656ad5425810bad4a0d4074f1ed", "committedDate": "2021-08-01 12:38:39 +0200", "message": "Fetch again the desktop player JSON only if the content is protected by signatureCiphers"}, {"oid": "318bc46a8c6da418ed58501f3cbcb9312d5cac8e", "committedDate": "2021-08-01 12:38:39 +0200", "message": "Readd the deleted code of views because watching count of livestreams was broken"}, {"oid": "6921e80dedb52a04df51bbc538762f55735965f1", "committedDate": "2021-08-01 12:38:42 +0200", "message": "Try again to don't fetch at each time the JavaScript player"}, {"oid": "a59c2a35773054ff32ca9997194465822ecfb1be", "committedDate": "2021-08-01 12:38:42 +0200", "message": "Catch every exception instead of only IOException and ExtractionException and add a Javadoc"}, {"oid": "8c1c7281b05e2d461033273d7e91fa1f1f25aacc", "committedDate": "2021-08-01 12:38:43 +0200", "message": "Real fix of the fetch of the JS player at each the signatureTimestamp is required"}, {"oid": "accd5ddef3364c319886ceeba519f8d12fdff2f4", "committedDate": "2021-08-01 12:38:58 +0200", "message": "Adress requested changes in YoutubeStreamExtractor"}, {"oid": "81013e5a8e13b78acfa789a935f48f12d9eddb9a", "committedDate": "2021-08-01 12:38:58 +0200", "message": "Add a static method to reset the YouTube deobfuscation code and use it in tests"}, {"oid": "d8177b57f6fbeae195c613f49b62378b78d9466e", "committedDate": "2021-08-01 12:38:59 +0200", "message": "Loop in all formats to check if the stream has URLs protected by signatureCiphers"}, {"oid": "4299d806a2b9353ae9cd90a30a12dd877a18c2ab", "committedDate": "2021-08-01 12:38:59 +0200", "message": "Adress changes"}, {"oid": "609919db59190229e1aad67ca74e81e8d0505496", "committedDate": "2021-08-01 12:39:00 +0200", "message": "Adress again reviews, fix some rebase issues"}, {"oid": "3adac6a15054f521c5b674b2e798be0777642627", "committedDate": "2021-08-01 12:39:01 +0200", "message": "Workaround for rate limits: always use the Android mobile API"}, {"oid": "7753556e66e0a7cce6278513f7a9e3e98eb6a2ce", "committedDate": "2021-08-01 12:39:03 +0200", "message": "Adress the last requested changes + update YoutubeCommentsExtractor mocks"}, {"oid": "2eeb0a3403e1291f5cf740b94cc7c9b6a2a1b401", "committedDate": "2021-08-01 12:39:03 +0200", "message": "Rebase + some code improvements + fix extraction of age-restricted videos + update clients version"}, {"oid": "f8309d546a13736b89c8a41e1eaa9d4f4ee5fea3", "committedDate": "2021-08-12 18:26:43 +0200", "message": "[YouTube] Consolidate current regexes of the cipher decryption function"}, {"oid": "c4eca91be9013671e68ef5d5f84a7284b8c316f1", "committedDate": "2021-11-19 21:36:03 +0100", "message": "Fix YouTube likes + dislikes"}, {"oid": "56c8af710ec9cf1cb961000d951394a4c671010a", "committedDate": "2021-11-21 18:16:31 +0100", "message": "Code refactoring"}, {"oid": "15b98ffdb4f627e0b2334d75c503a06738ec024a", "committedDate": "2021-12-27 16:54:44 +0100", "message": "Remove old ways of getting YT dis/likes"}, {"oid": "1e2e0029fc701326802612a328adb8433e725e47", "committedDate": "2021-12-27 16:54:45 +0100", "message": "[StreamExtractor] Deduplicated a ton of code by using default methods"}, {"oid": "65687f3b9b192c471e7d879883e7d285b57eb48b", "committedDate": "2021-12-27 16:54:46 +0100", "message": "Removed YT dislike count as it no longer works"}, {"oid": "a6961c5efa29c5a6cbeffb73866837cb8c3974e1", "committedDate": "2021-12-27 16:54:47 +0100", "message": "Fixed NumberFormatException when processing likes"}, {"oid": "65df39b3e33658866775bade5534fb6d333862a7", "committedDate": "2022-01-12 10:45:06 +0100", "message": "[YouTube] parse timestamps with >3 digits correctly (#775)"}, {"oid": "545522b80fc68bc12366aa0c48f91bd095ff5089", "committedDate": "2022-02-01 19:57:34 +0100", "message": "[Youtube] Make throttling decryption more resilient to api change"}, {"oid": "5c8fbeb1669d9ab59d724238a7148be33a4529ba", "committedDate": "2022-02-16 23:39:26 +0100", "message": "Fix NullPointerException in YouTubeStreamExtractor.getStreamSegments() (#797)"}, {"oid": "d337e537dc161f6b8fa0763db80759e3e52226ba", "committedDate": "2022-02-18 20:26:19 +0100", "message": "[YouTube] Add a comment clarifying why the panelIdentfier can be null"}, {"oid": "6f3f608ab651574999a169cd506428ded9eac491", "committedDate": "2022-02-24 12:50:51 +0000", "message": "Add support for extracting channel subscriber count in StreamInfo."}, {"oid": "4bd59f65f43b41e86fee3c12aac9f76e7e5256c5", "committedDate": "2022-02-24 12:50:51 +0000", "message": "Update exception message."}, {"oid": "ab49cb6e18cfb50d07e450281ab5d1f04e0f2a7c", "committedDate": "2022-02-24 12:50:51 +0000", "message": "Add requested changes."}, {"oid": "d290d2e39396a4a5856ebfa2d5cd59e438f0f69a", "committedDate": "2022-02-24 12:50:51 +0000", "message": "Move variable to super Extractor classes."}, {"oid": "e6d334765d8d7b66d718615678462b37a8f31cd0", "committedDate": "2022-02-26 17:12:51 +0000", "message": "Apply requested codestyle improvements."}, {"oid": "e726437da31bdc9a8dfdfbc1f77c22c28085727e", "committedDate": "2022-03-15 17:10:05 +0100", "message": "Update extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java"}, {"oid": "40aa5104b1ff384b66112eb7d39ca21824a90a10", "committedDate": "2022-03-16 11:03:16 +0100", "message": "Merge pull request #786 from XiangRongLin/throttling_resilience"}, {"oid": "50db871d8982f93086a642080e34350f0c25b220", "committedDate": "2022-03-19 10:44:06 +0100", "message": "[YouTube] Extract mixes from streams related items"}, {"oid": "8201b3b90eca329b69e7f875221fb822f83db82d", "committedDate": "2022-03-19 10:48:13 +0100", "message": "[YouTube] Parse any playlist (including music mixes) in related items"}, {"oid": "740a37a2de414eb071e891685304048ae23fec5c", "committedDate": "2022-03-26 19:42:40 +0100", "message": "[YouTube] Fix checkstyle issues"}, {"oid": "804e57004fdce10624d4cc82a997e750071e4f73", "committedDate": "2022-03-26 19:46:10 +0100", "message": "Fixed new checkstyle problems from dev"}, {"oid": "05b7fee23bc963cbc11f7ad95f259848d425e3a8", "committedDate": "2022-03-27 20:51:38 +0200", "message": "[YouTube] Add the cpn param to playback requests and try to spoof better the Android client"}, {"oid": "26f93f5bb08367c3a8cd89564b4b6d714115afaa", "committedDate": "2022-03-27 20:51:38 +0200", "message": "[YouTube] Extract streams of livestreams from the iOS client and disabled the Android client for livestreams"}, {"oid": "2e3da445e60b0b1712eba644f81e580a83dbd498", "committedDate": "2022-03-27 22:10:57 +0200", "message": "[YouTube] Add documentation about parameters added and clients versions and key"}, {"oid": "dfa42396616b032e50fd7d5029b7c0e969b7eb44", "committedDate": "2022-03-27 22:10:57 +0200", "message": "Fix missing imports and Checkstyle issues"}, {"oid": "67288a0191f030130c061ddc8ff1e2315e821a42", "committedDate": "2022-04-02 19:06:36 +0200", "message": "[YouTube] Fix extraction of embeddable age-restricted videos, fix extraction of contents with warnings and more"}, {"oid": "ef49cd0007923b851a9c156a98666edc237b75b0", "committedDate": "2022-04-11 22:09:56 +0200", "message": "[YouTube] Extract subtitles for age-restricted videos"}, {"oid": "9f9af35adbf276ad3660a410b09665769bb8bb81", "committedDate": "2022-04-25 20:23:04 +0200", "message": "[YouTube] Fix regression introduced in the order of streams used when adding more parameters to InnerTube requests, using the iOS client for livestreams and more"}, {"oid": "fe30eb43a9b3c17226f404c8141685d8f4417861", "committedDate": "2022-05-01 16:39:07 +0200", "message": "Cleanup ``YoutubeStreamExtractor`` and some related classes"}, {"oid": "5db4d1faf38c8668543f8c7605db15da2e6d14ad", "committedDate": "2022-05-01 16:44:11 +0200", "message": "Merge pull request #782 from litetex/cleanup-yt-stream-extractor"}, {"oid": "a85768444250a63d7b289b7ceb08d5e1b2b46d79", "committedDate": "2022-05-28 12:00:44 +0200", "message": "Apply changes in YoutubeStreamExtractor"}, {"oid": "aa4c10e7517f60359f6c3fc911c67d2cd125b79a", "committedDate": "2022-05-28 12:00:46 +0200", "message": "Improve documentation and adress most of the requested changes"}, {"oid": "2fb1a412a6453db62b5824ff6562f237cf1193d0", "committedDate": "2022-05-28 12:00:47 +0200", "message": "Fix Checkstyle issues, revert resolution string changes for YouTube video streams and don't return the rn parameter in DASH manifests"}, {"oid": "07b045f20d06683b19ba8c8249340b4610c99a9b", "committedDate": "2022-05-28 12:00:48 +0200", "message": "[YouTube] Support the iOS client in YoutubeDashManifestCreator and decrypt again the n parameter, if present, for all clients"}, {"oid": "2f3920c6482bab4196111246c5728354653bd14e", "committedDate": "2022-05-28 12:00:54 +0200", "message": "[YouTube] Return approxDurationMs value from YouTube's player response in ItagItems generated"}, {"oid": "044639c32bb715882685570be08ee3d6662bb075", "committedDate": "2022-05-28 12:00:57 +0200", "message": "Solve some review comments"}, {"oid": "b3c620f0d8b19ddc532fe90dec7b813aea2caa29", "committedDate": "2022-05-28 12:00:58 +0200", "message": "Apply code review and Streams rework"}, {"oid": "7635aeed2c5345fe24dd7722e59202a6bf9994b1", "committedDate": "2022-06-02 09:57:52 +0100", "message": "Get original untranslated title for YouTube."}, {"oid": "e960a417eca05af1ce842e5e90b9e1456e918862", "committedDate": "2022-06-16 12:12:54 +0200", "message": "[YouTube] Fix extraction of fps, audioSampleRate and audioChannels fields for ItagItems of live streams and post live streams"}, {"oid": "090debd83b80b05e54d08abb2531453c5fc4e73c", "committedDate": "2022-06-21 18:53:49 +0200", "message": "[YouTube] Fetch the ANDROID client for ended/post livestreams"}, {"oid": "5ab74b36311535964498746499b4f7737b497b57", "committedDate": "2022-07-06 10:26:45 +0200", "message": "Merge pull request #857 from FireMasterK/video-title"}, {"oid": "5b548340e88baa09d07d24410544568eb8b6ec8f", "committedDate": "2022-08-12 17:49:36 +0200", "message": "[YouTube] Catch any exception in YoutubeThrottlingDecrypter.apply and improve docs"}, {"oid": "7bdca33a872a9e255e5a232e3fe673b326d7f2bf", "committedDate": "2022-08-12 19:20:31 +0200", "message": "[YouTube] Ensure that an additional player response is the correct one"}, {"oid": "03d9a4fe9db6a6624d585c4f994840a81b65c50d", "committedDate": "2022-08-21 21:17:03 +0200", "message": "Fix typos in YoutubeStreamExtractor.tryDecryptUrl"}, {"oid": "943b7c033bb9d07ead63ddab4441c287653e4384", "committedDate": "2022-08-24 06:59:17 +0530", "message": "Remove EMPTY_STRING."}, {"oid": "119b9129e2618a4e0c9ee62db870d5516c6b4470", "committedDate": "2022-09-10 23:28:38 +0200", "message": "[YouTube] Fix extraction of like count with the new data model"}, {"oid": "60e97cd274e98841399fef67eb24cb835ce0bb1f", "committedDate": "2022-10-29 17:58:33 +0200", "message": "[YouTube] Workaround getting streaming URLs returning 403 HTTP response codes"}, {"oid": "099b53cc4f150efeb3d85b4f4b766e790b86be8a", "committedDate": "2022-11-02 23:11:33 +0100", "message": "[YouTube] Add parser for attributedDescription"}, {"oid": "aa9a8ca23c8dff76f447fc5ac14b872bafc846c3", "committedDate": "2022-11-04 18:35:53 +0100", "message": "[YouTube] Make non-extraction of videoPrimaryInfoRenderer and/or videoSecondaryInfoRenderer not fatal"}, {"oid": "6d59cdbe3a932446eca2b502c61c3ad6ff15ccfd", "committedDate": "2022-11-13 21:39:29 +0000", "message": "Add support for extracting audio tracks."}, {"oid": "c953e2341493a554fd464c2c93f60f7c54a6c49d", "committedDate": "2022-11-16 20:20:01 +0000", "message": "Merge pull request #968 from AudricV/yt-support-no-video-info-renderers-for-streams"}, {"oid": "9de8405c9f89ffa91e347b6c4753d79192d42902", "committedDate": "2022-11-23 08:33:06 +0100", "message": "[YouTube] Fix extracting the detailed error message of streams which are unavailable"}, {"oid": "4680df0bdfd625397fd55385a39f0eda0503ccc6", "committedDate": "2022-11-23 17:03:22 +0100", "message": "Fix throwing correct reason"}, {"oid": "5abea222251d4fb966b7ed4dd1d1e6db75549ebf", "committedDate": "2022-11-26 21:09:08 +0000", "message": "Fix throwing correct reason."}, {"oid": "1556adbb2d34cc8bb51678a70983dd502fd1052e", "committedDate": "2023-02-26 18:43:36 +0100", "message": "[YouTube] Fix hashtags links extraction and escape text in attribute descriptions + HTML links"}, {"oid": "76b7c19c5dd6f732bc3467df335b980b3ab340d0", "committedDate": "2023-02-26 19:06:17 +0100", "message": "[YouTube] Extract whether a track is a descriptive audio and audio locale when available"}, {"oid": "6bdd698c259c4301d8ee6cb9ef226b5d35f49ca8", "committedDate": "2023-03-01 11:15:46 +0100", "message": "Merge pull request #1026 from AudricV/audio-streams-descriptive-and-locale-properties"}, {"oid": "8d1303e18fcfe6f527f7a0e7cd2db4a23466663e", "committedDate": "2023-03-28 00:02:20 +0200", "message": "Add track types to audio streams (#1041)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY3Mjc2Ng==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/309#discussion_r406672766", "body": "Why was this changed?", "bodyText": "Why was this changed?", "bodyHTML": "<p dir=\"auto\">Why was this changed?</p>", "author": "wb9688", "createdAt": "2020-04-10T09:04:14Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java", "diffHunk": "@@ -579,7 +586,7 @@ public String getErrorMessage() {\n         try {\n             return getTextFromObject(initialAjaxJson.getObject(2).getObject(\"playerResponse\").getObject(\"playabilityStatus\")\n                     .getObject(\"errorScreen\").getObject(\"playerErrorMessageRenderer\").getObject(\"reason\"));\n-        } catch (ParsingException e) {\n+        } catch (Exception e) {", "originalCommit": "051e3fa5aa43417ac221ac030aa33ae2e3359cc0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY5ODAzOQ==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/309#discussion_r406698039", "bodyText": "So that it also catches NullPointerExceptions, which are generated when there is no error message. In that case null should be returned", "author": "Stypox", "createdAt": "2020-04-10T10:19:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY3Mjc2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA2NTAxNA==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/309#discussion_r407065014", "bodyText": "Then why aren't you catching (ParsingException | NullPointerException e)?", "author": "B0pol", "createdAt": "2020-04-11T13:37:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY3Mjc2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "6dd5f016b1c9de508bc2d99105221aa8383a53c8", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java\nindex 8d0512e4..d4a001ff 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java\n", "chunk": "@@ -584,10 +585,11 @@ public class YoutubeStreamExtractor extends StreamExtractor {\n     @Override\n     public String getErrorMessage() {\n         try {\n-            return getTextFromObject(initialAjaxJson.getObject(2).getObject(\"playerResponse\").getObject(\"playabilityStatus\")\n-                    .getObject(\"errorScreen\").getObject(\"playerErrorMessageRenderer\").getObject(\"reason\"));\n-        } catch (Exception e) {\n-            return null;\n+            return getTextFromObject(initialAjaxJson.getObject(2).getObject(\"playerResponse\")\n+                    .getObject(\"playabilityStatus\").getObject(\"errorScreen\")\n+                    .getObject(\"playerErrorMessageRenderer\").getObject(\"reason\"));\n+        } catch (ParsingException | NullPointerException e) {\n+            return null; // no error message\n         }\n     }\n \n", "next_change": {"commit": "1d7a86e664717d09e33371bc87c289903b19feb2", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java\nindex d4a001ff..8364246c 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java\n", "chunk": "@@ -585,11 +604,10 @@ public class YoutubeStreamExtractor extends StreamExtractor {\n     @Override\n     public String getErrorMessage() {\n         try {\n-            return getTextFromObject(initialAjaxJson.getObject(2).getObject(\"playerResponse\")\n-                    .getObject(\"playabilityStatus\").getObject(\"errorScreen\")\n-                    .getObject(\"playerErrorMessageRenderer\").getObject(\"reason\"));\n-        } catch (ParsingException | NullPointerException e) {\n-            return null; // no error message\n+            return getTextFromObject(initialAjaxJson.getObject(2).getObject(\"playerResponse\").getObject(\"playabilityStatus\")\n+                    .getObject(\"errorScreen\").getObject(\"playerErrorMessageRenderer\").getObject(\"reason\"));\n+        } catch (ParsingException e) {\n+            return null;\n         }\n     }\n \n", "next_change": {"commit": "7fb867c1662457c51d6579f2803c913f356126bf", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java\nindex 8364246c..08e43d6f 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java\n", "chunk": "@@ -606,7 +606,7 @@ public class YoutubeStreamExtractor extends StreamExtractor {\n         try {\n             return getTextFromObject(initialAjaxJson.getObject(2).getObject(\"playerResponse\").getObject(\"playabilityStatus\")\n                     .getObject(\"errorScreen\").getObject(\"playerErrorMessageRenderer\").getObject(\"reason\"));\n-        } catch (ParsingException e) {\n+        } catch (Exception e) {\n             return null;\n         }\n     }\n", "next_change": {"commit": "68d23defba04e3db08462d8268903ec23056fd5f", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java\nindex 08e43d6f..8ae88c39 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java\n", "chunk": "@@ -604,10 +612,11 @@ public class YoutubeStreamExtractor extends StreamExtractor {\n     @Override\n     public String getErrorMessage() {\n         try {\n-            return getTextFromObject(initialAjaxJson.getObject(2).getObject(\"playerResponse\").getObject(\"playabilityStatus\")\n-                    .getObject(\"errorScreen\").getObject(\"playerErrorMessageRenderer\").getObject(\"reason\"));\n-        } catch (Exception e) {\n-            return null;\n+            return getTextFromObject(initialAjaxJson.getObject(2).getObject(\"playerResponse\")\n+                    .getObject(\"playabilityStatus\").getObject(\"errorScreen\")\n+                    .getObject(\"playerErrorMessageRenderer\").getObject(\"reason\"));\n+        } catch (ParsingException | NullPointerException e) {\n+            return null; // no error message\n         }\n     }\n \n", "next_change": null}]}}]}}]}}]}, "revised_code_in_main": {"commit": "14c0c37d64883e795445bc8bd878df33ad6bdb9d", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java\nindex 8d0512e4..0077a163 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java\n", "chunk": "@@ -584,10 +615,11 @@ public class YoutubeStreamExtractor extends StreamExtractor {\n     @Override\n     public String getErrorMessage() {\n         try {\n-            return getTextFromObject(initialAjaxJson.getObject(2).getObject(\"playerResponse\").getObject(\"playabilityStatus\")\n-                    .getObject(\"errorScreen\").getObject(\"playerErrorMessageRenderer\").getObject(\"reason\"));\n-        } catch (Exception e) {\n-            return null;\n+            return getTextFromObject(initialAjaxJson.getObject(2).getObject(\"playerResponse\")\n+                    .getObject(\"playabilityStatus\").getObject(\"errorScreen\")\n+                    .getObject(\"playerErrorMessageRenderer\").getObject(\"reason\"));\n+        } catch (ParsingException | NullPointerException e) {\n+            return null; // no error message\n         }\n     }\n \n", "next_change": {"commit": "db0ef83d6bc89cda92ca7084b21d51cd68dbdb0d", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java\nindex 0077a163..44a43483 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java\n", "chunk": "@@ -615,11 +607,10 @@ public class YoutubeStreamExtractor extends StreamExtractor {\n     @Override\n     public String getErrorMessage() {\n         try {\n-            return getTextFromObject(initialAjaxJson.getObject(2).getObject(\"playerResponse\")\n-                    .getObject(\"playabilityStatus\").getObject(\"errorScreen\")\n-                    .getObject(\"playerErrorMessageRenderer\").getObject(\"reason\"));\n-        } catch (ParsingException | NullPointerException e) {\n-            return null; // no error message\n+            return getTextFromObject(initialAjaxJson.getObject(2).getObject(\"playerResponse\").getObject(\"playabilityStatus\")\n+                    .getObject(\"errorScreen\").getObject(\"playerErrorMessageRenderer\").getObject(\"reason\"));\n+        } catch (ParsingException e) {\n+            return null;\n         }\n     }\n \n", "next_change": {"commit": "62912ee8349f5d26617c039f337297628ff52ead", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java\nindex 44a43483..0b7e8f86 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java\n", "chunk": "@@ -607,10 +622,11 @@ public class YoutubeStreamExtractor extends StreamExtractor {\n     @Override\n     public String getErrorMessage() {\n         try {\n-            return getTextFromObject(initialAjaxJson.getObject(2).getObject(\"playerResponse\").getObject(\"playabilityStatus\")\n-                    .getObject(\"errorScreen\").getObject(\"playerErrorMessageRenderer\").getObject(\"reason\"));\n-        } catch (ParsingException e) {\n-            return null;\n+            return getTextFromObject(initialAjaxJson.getObject(2).getObject(\"playerResponse\")\n+                    .getObject(\"playabilityStatus\").getObject(\"errorScreen\")\n+                    .getObject(\"playerErrorMessageRenderer\").getObject(\"reason\"));\n+        } catch (ParsingException | NullPointerException e) {\n+            return null; // no error message\n         }\n     }\n \n", "next_change": {"commit": "e55284bb8f92d4155676fee2a823bdeca0e1eceb", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java\nindex 0b7e8f86..fcc65837 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java\n", "chunk": "@@ -625,7 +682,7 @@ public class YoutubeStreamExtractor extends StreamExtractor {\n             return getTextFromObject(initialAjaxJson.getObject(2).getObject(\"playerResponse\")\n                     .getObject(\"playabilityStatus\").getObject(\"errorScreen\")\n                     .getObject(\"playerErrorMessageRenderer\").getObject(\"reason\"));\n-        } catch (ParsingException | NullPointerException e) {\n+        } catch (final ParsingException | NullPointerException e) {\n             return null; // no error message\n         }\n     }\n", "next_change": {"commit": "b49ae547a32281fd344cae0b1532b896ab5fbab4", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java\nindex fcc65837..4acc1fb7 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java\n", "chunk": "@@ -679,9 +656,9 @@ public class YoutubeStreamExtractor extends StreamExtractor {\n     @Override\n     public String getErrorMessage() {\n         try {\n-            return getTextFromObject(initialAjaxJson.getObject(2).getObject(\"playerResponse\")\n-                    .getObject(\"playabilityStatus\").getObject(\"errorScreen\")\n-                    .getObject(\"playerErrorMessageRenderer\").getObject(\"reason\"));\n+            return getTextFromObject(playerResponse.getObject(\"playabilityStatus\")\n+                    .getObject(\"errorScreen\").getObject(\"playerErrorMessageRenderer\")\n+                    .getObject(\"reason\"));\n         } catch (final ParsingException | NullPointerException e) {\n             return null; // no error message\n         }\n", "next_change": {"commit": "013b90253591b3579f18ea9a155f27d6a9d84163", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java\nindex 4acc1fb7..98445114 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java\n", "chunk": "@@ -660,7 +674,7 @@ public class YoutubeStreamExtractor extends StreamExtractor {\n                     .getObject(\"errorScreen\").getObject(\"playerErrorMessageRenderer\")\n                     .getObject(\"reason\"));\n         } catch (final ParsingException | NullPointerException e) {\n-            return null; // no error message\n+            return null; // No error message\n         }\n     }\n \n", "next_change": {"commit": "1556adbb2d34cc8bb51678a70983dd502fd1052e", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java\nindex 98445114..183c6f60 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java\n", "chunk": "@@ -673,7 +781,7 @@ public class YoutubeStreamExtractor extends StreamExtractor {\n             return getTextFromObject(playerResponse.getObject(\"playabilityStatus\")\n                     .getObject(\"errorScreen\").getObject(\"playerErrorMessageRenderer\")\n                     .getObject(\"reason\"));\n-        } catch (final ParsingException | NullPointerException e) {\n+        } catch (final NullPointerException e) {\n             return null; // No error message\n         }\n     }\n", "next_change": {"commit": "76b7c19c5dd6f732bc3467df335b980b3ab340d0", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java\nindex 183c6f60..45b48019 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java\n", "chunk": "@@ -781,7 +796,7 @@ public class YoutubeStreamExtractor extends StreamExtractor {\n             return getTextFromObject(playerResponse.getObject(\"playabilityStatus\")\n                     .getObject(\"errorScreen\").getObject(\"playerErrorMessageRenderer\")\n                     .getObject(\"reason\"));\n-        } catch (final NullPointerException e) {\n+        } catch (final ParsingException | NullPointerException e) {\n             return null; // No error message\n         }\n     }\n", "next_change": {"commit": "6bdd698c259c4301d8ee6cb9ef226b5d35f49ca8", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java\nindex 45b48019..edced05a 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java\n", "chunk": "@@ -796,7 +782,7 @@ public class YoutubeStreamExtractor extends StreamExtractor {\n             return getTextFromObject(playerResponse.getObject(\"playabilityStatus\")\n                     .getObject(\"errorScreen\").getObject(\"playerErrorMessageRenderer\")\n                     .getObject(\"reason\"));\n-        } catch (final ParsingException | NullPointerException e) {\n+        } catch (final NullPointerException e) {\n             return null; // No error message\n         }\n     }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "14c0c37d64883e795445bc8bd878df33ad6bdb9d", "message": "Merge commit", "committedDate": null}, {"oid": "01f49e8f668dc06355d9a3c9dc9cd5ce7c1501ac", "committedDate": "2020-10-26 16:32:39 +0100", "message": "polish strings"}, {"oid": "db0ef83d6bc89cda92ca7084b21d51cd68dbdb0d", "committedDate": "2020-10-27 13:40:24 +0100", "message": "fix youtube decryption and three attemps bug"}, {"oid": "6dc5ab4015699488f4377b4b30ad8e30afc9f1a9", "committedDate": "2020-10-27 13:48:58 +0100", "message": "find playerUrl in another place when assetsPattern regex fails"}, {"oid": "62912ee8349f5d26617c039f337297628ff52ead", "committedDate": "2020-10-28 14:28:06 +0100", "message": "Merge branch 'master' into dev"}, {"oid": "30ed4f2d636dbb6112ae1951e646f8756ae93ff4", "committedDate": "2020-10-28 20:26:00 +0100", "message": "Remove any reference to decrypt and improve error message"}, {"oid": "4f04cfcccaaf49bb5362bb7a02f6450c446934b6", "committedDate": "2020-11-01 06:28:54 +0530", "message": "Switch from Calendar to OffsetDateTime in DateWrapper."}, {"oid": "827f7bd13750b29e2382c6681f23b707f76e5f33", "committedDate": "2020-11-04 16:02:12 +0100", "message": "[YouTube] Cache deobfuscation and improve requests made"}, {"oid": "89a77ae74a939bb6180b57266ba50f82a37caa73", "committedDate": "2020-11-04 16:03:08 +0100", "message": "[YouTube] Fix detection of ended livestreams and parse livestream upload date"}, {"oid": "4c19a88612ec315cd1234551f70ce168a3a6cb48", "committedDate": "2020-12-11 06:09:50 +0530", "message": "Use Objects.toString()."}, {"oid": "d3eea4f4be1acd721047ffbe1e3eff16244fc857", "committedDate": "2020-12-12 10:24:29 +0100", "message": "Add stream segments to StreamInfo"}, {"oid": "2ba27b39af2a5e19cc9ecd0f813fe1f7de072c86", "committedDate": "2020-12-12 15:00:45 +0100", "message": "Stream segments: Remove replaceAll from setPreviewUrl"}, {"oid": "22a415156ffaaad00fce103241dbe9cd74070bd2", "committedDate": "2020-12-19 11:12:22 +0100", "message": "Merge pull request #479 from vkay94/stream-segments"}, {"oid": "bc6de149527fabb235068bfed538194316054ddb", "committedDate": "2020-12-22 18:19:26 +0100", "message": "Extract stream and search meta info for YouTube"}, {"oid": "d30caeb0916b9030a5ead8cdec7e134c401a50ac", "committedDate": "2020-12-27 15:55:03 +0100", "message": "Fix YouTube player JavaScript URL redirection"}, {"oid": "11dcfe638b994fc30db3589fc1aaf273ab241362", "committedDate": "2021-01-14 20:01:06 +0100", "message": "Add durationPerFrame to Frameset and getFrameBoundsAt method"}, {"oid": "1414a6f178cf8f2ff1024df80fa00d8f2c85f5f4", "committedDate": "2021-02-03 22:07:34 +0100", "message": "Fix extraction of YouTube chapters (#531)"}, {"oid": "a931e31239159c16f98cddc38d507dfddcae54ed", "committedDate": "2021-02-12 22:36:18 +0100", "message": "fix tests"}, {"oid": "557934cb1720554a177151b22bc86b7e1f9c8c46", "committedDate": "2021-02-15 18:51:46 +0100", "message": "use EMPTY_STRING"}, {"oid": "e844d2aed34e2b305e2d6412d9c885f81caa9374", "committedDate": "2021-02-18 20:16:52 +0530", "message": "Add dash fields to the ItagItem."}, {"oid": "11eb4932f4eb52bd2e88c5e8d63c76f54ecd912a", "committedDate": "2021-02-18 20:16:52 +0530", "message": "Add data to respective classes."}, {"oid": "d1054338d3a1354e7e82dec83a3ca80e342cc618", "committedDate": "2021-02-18 20:16:52 +0530", "message": "Fix error with livestreams."}, {"oid": "a7c9905183175e1257e8f23fa5a330ae6edb2d44", "committedDate": "2021-02-18 20:16:52 +0530", "message": "Fix requested changes."}, {"oid": "f31b2a68fdec41ee500fdbd0aa211c56e21beb80", "committedDate": "2021-02-18 20:16:53 +0530", "message": "use getters/setters."}, {"oid": "5b70645d8537e82d4b85e629cb3b58e69eb3ca65", "committedDate": "2021-02-18 20:16:53 +0530", "message": "Add data to muxed streams aswell."}, {"oid": "1a322ad8edcf54e90f84d236fbe6dce1a9d8ae47", "committedDate": "2021-02-18 16:36:40 +0100", "message": "Add uploader verified by service extraction"}, {"oid": "5333d8a98b9ec35266479752a73fb8ca6250a24b", "committedDate": "2021-02-19 00:55:03 +0530", "message": "Add more data."}, {"oid": "771bb1a2cbedb7de7547d04d2048a48f5e220663", "committedDate": "2021-03-05 16:38:39 +0100", "message": "Add three new exceptions for unavailable YouTube contents These exceptions are thrown on a test with the error messages text, because YouTube returns only \"UNPLAYABLE\" status in most error cases. Tests are based with English strings, so changing the lang used by extractor will throw the generic exception (ContentNotAvailableException)."}, {"oid": "59d6d3f04ef36d2b6639c88bcd547f2f7eb33f52", "committedDate": "2021-03-05 16:38:42 +0100", "message": "Fix YouTube tests"}, {"oid": "448b68700c140bc4b763e15ed7494edfa96db9fd", "committedDate": "2021-03-05 16:38:49 +0100", "message": "Use final in exceptions and add AgeRestrictedException AgeRestrictedException will be thrown only if the reason message equals to \"Sign in to confirm your age\" and if the age limit is 18."}, {"oid": "da3cfa967d5f6e49c4c3e047ba95428ea84c7da8", "committedDate": "2021-03-05 16:38:50 +0100", "message": "Handle age-restricted videos"}, {"oid": "890cbba6255a8d7af5554f8e01909210f9c7a72d", "committedDate": "2021-03-05 16:38:51 +0100", "message": "Update PaidContent exception"}, {"oid": "d0a1041afd5edbe3d24a4ae43dda87b5a7e79703", "committedDate": "2021-03-05 16:38:52 +0100", "message": "Prevent NullPointerException and use equalsIgnorecase"}, {"oid": "e55284bb8f92d4155676fee2a823bdeca0e1eceb", "committedDate": "2021-03-05 16:38:53 +0100", "message": "Code style improvements Use final where possible in YoutubeStreamExtractor and do some other code style improvements"}, {"oid": "c47cc54908d14d3faa6326e62cb8c8add9463df2", "committedDate": "2021-03-19 10:14:43 +0100", "message": "Extract metadata for YouTube, SoundCloud & MediaCCC"}, {"oid": "8806fb4e6bac52d657b74d8fd35a454456636b34", "committedDate": "2021-03-19 10:14:43 +0100", "message": "address reviews"}, {"oid": "14f6f1b7c3d4a98ac0a74a9f6d16b05cb96c0c91", "committedDate": "2021-03-31 20:24:40 +0200", "message": "Generify related streams calls and rename method"}, {"oid": "e8b5364745ca204fb7fcdf44287540e0f47ee723", "committedDate": "2021-05-21 16:22:24 +0300", "message": "Update YoutubeStreamExtractor.java"}, {"oid": "e9a992b0a93b27800cc3dd94fb6f77b2cf880f5a", "committedDate": "2021-06-23 12:06:02 +0200", "message": "[youtube] Fix extraction of age restricted videos"}, {"oid": "b475f09ba7c8b914459f76b92b9030891fa95b23", "committedDate": "2021-06-23 20:33:32 +0200", "message": "don't do useless concatenation"}, {"oid": "a86a30103fc4afc2bc199b57dc59d2fc9b7fe21b", "committedDate": "2021-07-15 20:05:25 +0200", "message": "[Youtube] bare bones version to solve throttling"}, {"oid": "80cf8b3acdc66efaa76f8bd67d1d6bf7a20b98f7", "committedDate": "2021-07-15 20:05:25 +0200", "message": "Extract separate YoutubeThrottlingDecoder"}, {"oid": "fcdb9bdbebc6271f7b7b9de7620ddd71d9af334f", "committedDate": "2021-07-15 20:05:26 +0200", "message": "add url to sout"}, {"oid": "a189f685dcfc8d9bfb78fc71732c435c71ef0902", "committedDate": "2021-07-16 19:20:40 +0200", "message": "cache player js code"}, {"oid": "6956b72af7967ea60a50f3c49a3ff1de8ff60f35", "committedDate": "2021-07-17 10:05:14 +0200", "message": "Fix YoutubeThrottlingDecoder.replaceNParam"}, {"oid": "17ccaf4b877399de28609b9279ca4c3123bdb13a", "committedDate": "2021-07-17 16:41:10 +0200", "message": "Update YoutubeStreamExtractor.java"}, {"oid": "ecf4232ce311c4d6cb690c626634ba54200e7528", "committedDate": "2021-07-17 16:41:12 +0200", "message": "Using ``Collections.emptyList()``"}, {"oid": "a02ee2e952a4d002491c07de4296d0abd3401f72", "committedDate": "2021-07-17 19:10:09 +0200", "message": "Rewrite youtube throttling solution and add tests"}, {"oid": "a683c8d2784984f0d93f330a824046e1b9c8f081", "committedDate": "2021-07-17 19:14:57 +0200", "message": "Delete duplicated code to load youtube javascript file"}, {"oid": "3a3d1d7f2bd364cdb5e81a6a1171471ca55f1fc2", "committedDate": "2021-07-20 20:48:11 +0200", "message": "Make YoutubeJavaScriptExtractor and JavaScript methods static"}, {"oid": "d13f531b6ff985b5ca51166e0c59ef3dc4a87b59", "committedDate": "2021-07-27 17:28:32 +0200", "message": "Use YoutubeThrottlingDecrypter also in getAudioStreams and getVideoOnlyStreams methods of YoutubeStreamExtractor"}, {"oid": "394c02ad06816c163b284e4e84ae41152b950aad", "committedDate": "2021-07-28 18:01:57 +0200", "message": "Merge pull request #683 from XiangRongLin/yt_throttling"}, {"oid": "b49ae547a32281fd344cae0b1532b896ab5fbab4", "committedDate": "2021-08-01 12:38:01 +0200", "message": "Do some improvements to YoutubeStreamExtractor"}, {"oid": "e7d589edbf606cb8e6684f88948f44abcd9a1419", "committedDate": "2021-08-01 12:38:36 +0200", "message": "Use the youtubei API for YouTube videos + update client version"}, {"oid": "013b90253591b3579f18ea9a155f27d6a9d84163", "committedDate": "2021-08-01 12:38:36 +0200", "message": "Use the Android mobile API when there are OTF streams or the content is protected by signatureCiphers"}, {"oid": "b52732a1c35c48bc5d3e775676f81a1efaeb149e", "committedDate": "2021-08-01 12:38:37 +0200", "message": "Fix the fetch of the playerCode at each time getStsFromPlayerJs is called"}, {"oid": "947baec805b37656ad5425810bad4a0d4074f1ed", "committedDate": "2021-08-01 12:38:39 +0200", "message": "Fetch again the desktop player JSON only if the content is protected by signatureCiphers"}, {"oid": "318bc46a8c6da418ed58501f3cbcb9312d5cac8e", "committedDate": "2021-08-01 12:38:39 +0200", "message": "Readd the deleted code of views because watching count of livestreams was broken"}, {"oid": "6921e80dedb52a04df51bbc538762f55735965f1", "committedDate": "2021-08-01 12:38:42 +0200", "message": "Try again to don't fetch at each time the JavaScript player"}, {"oid": "a59c2a35773054ff32ca9997194465822ecfb1be", "committedDate": "2021-08-01 12:38:42 +0200", "message": "Catch every exception instead of only IOException and ExtractionException and add a Javadoc"}, {"oid": "8c1c7281b05e2d461033273d7e91fa1f1f25aacc", "committedDate": "2021-08-01 12:38:43 +0200", "message": "Real fix of the fetch of the JS player at each the signatureTimestamp is required"}, {"oid": "accd5ddef3364c319886ceeba519f8d12fdff2f4", "committedDate": "2021-08-01 12:38:58 +0200", "message": "Adress requested changes in YoutubeStreamExtractor"}, {"oid": "81013e5a8e13b78acfa789a935f48f12d9eddb9a", "committedDate": "2021-08-01 12:38:58 +0200", "message": "Add a static method to reset the YouTube deobfuscation code and use it in tests"}, {"oid": "d8177b57f6fbeae195c613f49b62378b78d9466e", "committedDate": "2021-08-01 12:38:59 +0200", "message": "Loop in all formats to check if the stream has URLs protected by signatureCiphers"}, {"oid": "4299d806a2b9353ae9cd90a30a12dd877a18c2ab", "committedDate": "2021-08-01 12:38:59 +0200", "message": "Adress changes"}, {"oid": "609919db59190229e1aad67ca74e81e8d0505496", "committedDate": "2021-08-01 12:39:00 +0200", "message": "Adress again reviews, fix some rebase issues"}, {"oid": "3adac6a15054f521c5b674b2e798be0777642627", "committedDate": "2021-08-01 12:39:01 +0200", "message": "Workaround for rate limits: always use the Android mobile API"}, {"oid": "7753556e66e0a7cce6278513f7a9e3e98eb6a2ce", "committedDate": "2021-08-01 12:39:03 +0200", "message": "Adress the last requested changes + update YoutubeCommentsExtractor mocks"}, {"oid": "2eeb0a3403e1291f5cf740b94cc7c9b6a2a1b401", "committedDate": "2021-08-01 12:39:03 +0200", "message": "Rebase + some code improvements + fix extraction of age-restricted videos + update clients version"}, {"oid": "f8309d546a13736b89c8a41e1eaa9d4f4ee5fea3", "committedDate": "2021-08-12 18:26:43 +0200", "message": "[YouTube] Consolidate current regexes of the cipher decryption function"}, {"oid": "c4eca91be9013671e68ef5d5f84a7284b8c316f1", "committedDate": "2021-11-19 21:36:03 +0100", "message": "Fix YouTube likes + dislikes"}, {"oid": "56c8af710ec9cf1cb961000d951394a4c671010a", "committedDate": "2021-11-21 18:16:31 +0100", "message": "Code refactoring"}, {"oid": "15b98ffdb4f627e0b2334d75c503a06738ec024a", "committedDate": "2021-12-27 16:54:44 +0100", "message": "Remove old ways of getting YT dis/likes"}, {"oid": "1e2e0029fc701326802612a328adb8433e725e47", "committedDate": "2021-12-27 16:54:45 +0100", "message": "[StreamExtractor] Deduplicated a ton of code by using default methods"}, {"oid": "65687f3b9b192c471e7d879883e7d285b57eb48b", "committedDate": "2021-12-27 16:54:46 +0100", "message": "Removed YT dislike count as it no longer works"}, {"oid": "a6961c5efa29c5a6cbeffb73866837cb8c3974e1", "committedDate": "2021-12-27 16:54:47 +0100", "message": "Fixed NumberFormatException when processing likes"}, {"oid": "65df39b3e33658866775bade5534fb6d333862a7", "committedDate": "2022-01-12 10:45:06 +0100", "message": "[YouTube] parse timestamps with >3 digits correctly (#775)"}, {"oid": "545522b80fc68bc12366aa0c48f91bd095ff5089", "committedDate": "2022-02-01 19:57:34 +0100", "message": "[Youtube] Make throttling decryption more resilient to api change"}, {"oid": "5c8fbeb1669d9ab59d724238a7148be33a4529ba", "committedDate": "2022-02-16 23:39:26 +0100", "message": "Fix NullPointerException in YouTubeStreamExtractor.getStreamSegments() (#797)"}, {"oid": "d337e537dc161f6b8fa0763db80759e3e52226ba", "committedDate": "2022-02-18 20:26:19 +0100", "message": "[YouTube] Add a comment clarifying why the panelIdentfier can be null"}, {"oid": "6f3f608ab651574999a169cd506428ded9eac491", "committedDate": "2022-02-24 12:50:51 +0000", "message": "Add support for extracting channel subscriber count in StreamInfo."}, {"oid": "4bd59f65f43b41e86fee3c12aac9f76e7e5256c5", "committedDate": "2022-02-24 12:50:51 +0000", "message": "Update exception message."}, {"oid": "ab49cb6e18cfb50d07e450281ab5d1f04e0f2a7c", "committedDate": "2022-02-24 12:50:51 +0000", "message": "Add requested changes."}, {"oid": "d290d2e39396a4a5856ebfa2d5cd59e438f0f69a", "committedDate": "2022-02-24 12:50:51 +0000", "message": "Move variable to super Extractor classes."}, {"oid": "e6d334765d8d7b66d718615678462b37a8f31cd0", "committedDate": "2022-02-26 17:12:51 +0000", "message": "Apply requested codestyle improvements."}, {"oid": "e726437da31bdc9a8dfdfbc1f77c22c28085727e", "committedDate": "2022-03-15 17:10:05 +0100", "message": "Update extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java"}, {"oid": "40aa5104b1ff384b66112eb7d39ca21824a90a10", "committedDate": "2022-03-16 11:03:16 +0100", "message": "Merge pull request #786 from XiangRongLin/throttling_resilience"}, {"oid": "50db871d8982f93086a642080e34350f0c25b220", "committedDate": "2022-03-19 10:44:06 +0100", "message": "[YouTube] Extract mixes from streams related items"}, {"oid": "8201b3b90eca329b69e7f875221fb822f83db82d", "committedDate": "2022-03-19 10:48:13 +0100", "message": "[YouTube] Parse any playlist (including music mixes) in related items"}, {"oid": "740a37a2de414eb071e891685304048ae23fec5c", "committedDate": "2022-03-26 19:42:40 +0100", "message": "[YouTube] Fix checkstyle issues"}, {"oid": "804e57004fdce10624d4cc82a997e750071e4f73", "committedDate": "2022-03-26 19:46:10 +0100", "message": "Fixed new checkstyle problems from dev"}, {"oid": "05b7fee23bc963cbc11f7ad95f259848d425e3a8", "committedDate": "2022-03-27 20:51:38 +0200", "message": "[YouTube] Add the cpn param to playback requests and try to spoof better the Android client"}, {"oid": "26f93f5bb08367c3a8cd89564b4b6d714115afaa", "committedDate": "2022-03-27 20:51:38 +0200", "message": "[YouTube] Extract streams of livestreams from the iOS client and disabled the Android client for livestreams"}, {"oid": "2e3da445e60b0b1712eba644f81e580a83dbd498", "committedDate": "2022-03-27 22:10:57 +0200", "message": "[YouTube] Add documentation about parameters added and clients versions and key"}, {"oid": "dfa42396616b032e50fd7d5029b7c0e969b7eb44", "committedDate": "2022-03-27 22:10:57 +0200", "message": "Fix missing imports and Checkstyle issues"}, {"oid": "67288a0191f030130c061ddc8ff1e2315e821a42", "committedDate": "2022-04-02 19:06:36 +0200", "message": "[YouTube] Fix extraction of embeddable age-restricted videos, fix extraction of contents with warnings and more"}, {"oid": "ef49cd0007923b851a9c156a98666edc237b75b0", "committedDate": "2022-04-11 22:09:56 +0200", "message": "[YouTube] Extract subtitles for age-restricted videos"}, {"oid": "9f9af35adbf276ad3660a410b09665769bb8bb81", "committedDate": "2022-04-25 20:23:04 +0200", "message": "[YouTube] Fix regression introduced in the order of streams used when adding more parameters to InnerTube requests, using the iOS client for livestreams and more"}, {"oid": "fe30eb43a9b3c17226f404c8141685d8f4417861", "committedDate": "2022-05-01 16:39:07 +0200", "message": "Cleanup ``YoutubeStreamExtractor`` and some related classes"}, {"oid": "5db4d1faf38c8668543f8c7605db15da2e6d14ad", "committedDate": "2022-05-01 16:44:11 +0200", "message": "Merge pull request #782 from litetex/cleanup-yt-stream-extractor"}, {"oid": "a85768444250a63d7b289b7ceb08d5e1b2b46d79", "committedDate": "2022-05-28 12:00:44 +0200", "message": "Apply changes in YoutubeStreamExtractor"}, {"oid": "aa4c10e7517f60359f6c3fc911c67d2cd125b79a", "committedDate": "2022-05-28 12:00:46 +0200", "message": "Improve documentation and adress most of the requested changes"}, {"oid": "2fb1a412a6453db62b5824ff6562f237cf1193d0", "committedDate": "2022-05-28 12:00:47 +0200", "message": "Fix Checkstyle issues, revert resolution string changes for YouTube video streams and don't return the rn parameter in DASH manifests"}, {"oid": "07b045f20d06683b19ba8c8249340b4610c99a9b", "committedDate": "2022-05-28 12:00:48 +0200", "message": "[YouTube] Support the iOS client in YoutubeDashManifestCreator and decrypt again the n parameter, if present, for all clients"}, {"oid": "2f3920c6482bab4196111246c5728354653bd14e", "committedDate": "2022-05-28 12:00:54 +0200", "message": "[YouTube] Return approxDurationMs value from YouTube's player response in ItagItems generated"}, {"oid": "044639c32bb715882685570be08ee3d6662bb075", "committedDate": "2022-05-28 12:00:57 +0200", "message": "Solve some review comments"}, {"oid": "b3c620f0d8b19ddc532fe90dec7b813aea2caa29", "committedDate": "2022-05-28 12:00:58 +0200", "message": "Apply code review and Streams rework"}, {"oid": "7635aeed2c5345fe24dd7722e59202a6bf9994b1", "committedDate": "2022-06-02 09:57:52 +0100", "message": "Get original untranslated title for YouTube."}, {"oid": "e960a417eca05af1ce842e5e90b9e1456e918862", "committedDate": "2022-06-16 12:12:54 +0200", "message": "[YouTube] Fix extraction of fps, audioSampleRate and audioChannels fields for ItagItems of live streams and post live streams"}, {"oid": "090debd83b80b05e54d08abb2531453c5fc4e73c", "committedDate": "2022-06-21 18:53:49 +0200", "message": "[YouTube] Fetch the ANDROID client for ended/post livestreams"}, {"oid": "5ab74b36311535964498746499b4f7737b497b57", "committedDate": "2022-07-06 10:26:45 +0200", "message": "Merge pull request #857 from FireMasterK/video-title"}, {"oid": "5b548340e88baa09d07d24410544568eb8b6ec8f", "committedDate": "2022-08-12 17:49:36 +0200", "message": "[YouTube] Catch any exception in YoutubeThrottlingDecrypter.apply and improve docs"}, {"oid": "7bdca33a872a9e255e5a232e3fe673b326d7f2bf", "committedDate": "2022-08-12 19:20:31 +0200", "message": "[YouTube] Ensure that an additional player response is the correct one"}, {"oid": "03d9a4fe9db6a6624d585c4f994840a81b65c50d", "committedDate": "2022-08-21 21:17:03 +0200", "message": "Fix typos in YoutubeStreamExtractor.tryDecryptUrl"}, {"oid": "943b7c033bb9d07ead63ddab4441c287653e4384", "committedDate": "2022-08-24 06:59:17 +0530", "message": "Remove EMPTY_STRING."}, {"oid": "119b9129e2618a4e0c9ee62db870d5516c6b4470", "committedDate": "2022-09-10 23:28:38 +0200", "message": "[YouTube] Fix extraction of like count with the new data model"}, {"oid": "60e97cd274e98841399fef67eb24cb835ce0bb1f", "committedDate": "2022-10-29 17:58:33 +0200", "message": "[YouTube] Workaround getting streaming URLs returning 403 HTTP response codes"}, {"oid": "099b53cc4f150efeb3d85b4f4b766e790b86be8a", "committedDate": "2022-11-02 23:11:33 +0100", "message": "[YouTube] Add parser for attributedDescription"}, {"oid": "aa9a8ca23c8dff76f447fc5ac14b872bafc846c3", "committedDate": "2022-11-04 18:35:53 +0100", "message": "[YouTube] Make non-extraction of videoPrimaryInfoRenderer and/or videoSecondaryInfoRenderer not fatal"}, {"oid": "6d59cdbe3a932446eca2b502c61c3ad6ff15ccfd", "committedDate": "2022-11-13 21:39:29 +0000", "message": "Add support for extracting audio tracks."}, {"oid": "c953e2341493a554fd464c2c93f60f7c54a6c49d", "committedDate": "2022-11-16 20:20:01 +0000", "message": "Merge pull request #968 from AudricV/yt-support-no-video-info-renderers-for-streams"}, {"oid": "9de8405c9f89ffa91e347b6c4753d79192d42902", "committedDate": "2022-11-23 08:33:06 +0100", "message": "[YouTube] Fix extracting the detailed error message of streams which are unavailable"}, {"oid": "4680df0bdfd625397fd55385a39f0eda0503ccc6", "committedDate": "2022-11-23 17:03:22 +0100", "message": "Fix throwing correct reason"}, {"oid": "5abea222251d4fb966b7ed4dd1d1e6db75549ebf", "committedDate": "2022-11-26 21:09:08 +0000", "message": "Fix throwing correct reason."}, {"oid": "1556adbb2d34cc8bb51678a70983dd502fd1052e", "committedDate": "2023-02-26 18:43:36 +0100", "message": "[YouTube] Fix hashtags links extraction and escape text in attribute descriptions + HTML links"}, {"oid": "76b7c19c5dd6f732bc3467df335b980b3ab340d0", "committedDate": "2023-02-26 19:06:17 +0100", "message": "[YouTube] Extract whether a track is a descriptive audio and audio locale when available"}, {"oid": "6bdd698c259c4301d8ee6cb9ef226b5d35f49ca8", "committedDate": "2023-03-01 11:15:46 +0100", "message": "Merge pull request #1026 from AudricV/audio-streams-descriptive-and-locale-properties"}, {"oid": "8d1303e18fcfe6f527f7a0e7cd2db4a23466663e", "committedDate": "2023-03-28 00:02:20 +0200", "message": "Add track types to audio streams (#1041)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY3MzU3MQ==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/309#discussion_r406673571", "body": "Could be `final`, just like a lot of variables in this class", "bodyText": "Could be final, just like a lot of variables in this class", "bodyHTML": "<p dir=\"auto\">Could be <code>final</code>, just like a lot of variables in this class</p>", "author": "wb9688", "createdAt": "2020-04-10T09:06:24Z", "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java", "diffHunk": "@@ -0,0 +1,289 @@\n+package org.schabi.newpipe.extractor.services;\n+\n+import org.junit.Test;\n+import org.schabi.newpipe.extractor.MediaFormat;\n+import org.schabi.newpipe.extractor.localization.DateWrapper;\n+import org.schabi.newpipe.extractor.stream.AudioStream;\n+import org.schabi.newpipe.extractor.stream.Description;\n+import org.schabi.newpipe.extractor.stream.Frameset;\n+import org.schabi.newpipe.extractor.stream.StreamExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemsCollector;\n+import org.schabi.newpipe.extractor.stream.StreamType;\n+import org.schabi.newpipe.extractor.stream.SubtitlesStream;\n+import org.schabi.newpipe.extractor.stream.VideoStream;\n+\n+import java.text.SimpleDateFormat;\n+import java.util.Calendar;\n+import java.util.List;\n+\n+import javax.annotation.Nullable;\n+\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.assertTrue;\n+import static org.schabi.newpipe.extractor.ExtractorAsserts.assertAtLeast;\n+import static org.schabi.newpipe.extractor.ExtractorAsserts.assertIsSecureUrl;\n+import static org.schabi.newpipe.extractor.ExtractorAsserts.assertIsValidUrl;\n+import static org.schabi.newpipe.extractor.services.DefaultTests.defaultTestListOfItems;\n+\n+/**\n+ * Test for {@link StreamExtractor}\n+ */\n+public abstract class DefaultStreamExtractorTest extends DefaultExtractorTest<StreamExtractor>\n+        implements BaseStreamExtractorTest {\n+\n+    public abstract StreamType expectedStreamType();\n+    public abstract String expectedUploaderName();\n+    public abstract String expectedUploaderUrl();\n+    public abstract List<String> expectedDescriptionContains(); // e.g. for full links\n+    public abstract long expectedLength();\n+    public long expectedTimestamp() { return 0; }; // default: there is no timestamp\n+    public abstract long expectedViewCountAtLeast();\n+    @Nullable public abstract String expectedUploadDate(); // format: \"yyyy-MM-dd HH:mm:ss.SSS\"\n+    @Nullable public abstract String expectedTextualUploadDate();\n+    public abstract long expectedLikeCountAtLeast(); // return -1 if ratings are disabled\n+    public abstract long expectedDislikeCountAtLeast(); // return -1 if ratings are disabled\n+    public boolean expectedHasRelatedStreams() { return true; } // default: there are related videos\n+    public int expectedAgeLimit() { return StreamExtractor.NO_AGE_LIMIT; } // default: no limit\n+    @Nullable public String expectedErrorMessage() { return null; } // default: no error message\n+    public boolean expectedHasVideoStreams() { return true; } // default: there are video streams\n+    public boolean expectedHasAudioStreams() { return true; } // default: there are audio streams\n+    public boolean expectedHasSubtitles() { return true; } // default: there are subtitles streams\n+    public boolean expectedHasFrames() { return true; } // default: there are frames\n+    public boolean expectedHasNextStream() { return true; } // default: there is a next video\n+\n+    @Test\n+    @Override\n+    public void testStreamType() throws Exception {\n+        assertEquals(expectedStreamType(), extractor().getStreamType());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testUploaderName() throws Exception {\n+        assertEquals(expectedUploaderName(), extractor().getUploaderName());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testUploaderUrl() throws Exception {\n+        final String uploaderUrl = extractor().getUploaderUrl();\n+        assertIsSecureUrl(uploaderUrl);\n+        assertEquals(expectedUploaderUrl(), uploaderUrl);\n+    }\n+\n+    @Test\n+    @Override\n+    public void testUploaderAvatarUrl() throws Exception {\n+        assertIsSecureUrl(extractor().getUploaderAvatarUrl());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testThumbnailUrl() throws Exception {\n+        assertIsSecureUrl(extractor().getThumbnailUrl());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testDescription() throws Exception {\n+        Description description = extractor().getDescription();", "originalCommit": "051e3fa5aa43417ac221ac030aa33ae2e3359cc0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY5ODA4Mg==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/309#discussion_r406698082", "bodyText": "Ok, will fix this in all modified files", "author": "Stypox", "createdAt": "2020-04-10T10:19:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY3MzU3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "6dd5f016b1c9de508bc2d99105221aa8383a53c8", "changed_code": [{"header": "diff --git a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\nindex 7de6a0ce..0e731d4a 100644\n--- a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n+++ b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n", "chunk": "@@ -91,7 +92,7 @@ public abstract class DefaultStreamExtractorTest extends DefaultExtractorTest<St\n     @Test\n     @Override\n     public void testDescription() throws Exception {\n-        Description description = extractor().getDescription();\n+        final Description description = extractor().getDescription();\n         assertNotNull(description);\n         assertFalse(\"description is empty\", description.getContent().isEmpty());\n \n", "next_change": {"commit": "fa29b78f77e1e323ec0512643f3bcaaf6bd13df0", "changed_code": [{"header": "diff --git a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\nindex 0e731d4a..6c0419d5 100644\n--- a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n+++ b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n", "chunk": "@@ -96,7 +139,7 @@ public abstract class DefaultStreamExtractorTest extends DefaultExtractorTest<St\n         assertNotNull(description);\n         assertFalse(\"description is empty\", description.getContent().isEmpty());\n \n-        for (String s : expectedDescriptionContains()) {\n+        for (final String s : expectedDescriptionContains()) {\n             assertThat(description.getContent(), containsString(s));\n         }\n     }\n", "next_change": {"commit": "1d7a86e664717d09e33371bc87c289903b19feb2", "changed_code": [{"header": "diff --git a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\nindex 6c0419d5..406177f7 100644\n--- a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n+++ b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n", "chunk": "@@ -139,7 +95,7 @@ public abstract class DefaultStreamExtractorTest extends DefaultExtractorTest<St\n         assertNotNull(description);\n         assertFalse(\"description is empty\", description.getContent().isEmpty());\n \n-        for (final String s : expectedDescriptionContains()) {\n+        for (String s : expectedDescriptionContains()) {\n             assertThat(description.getContent(), containsString(s));\n         }\n     }\n", "next_change": {"commit": "a087b092b401977bd58b279a3f285549db0e2160", "changed_code": [{"header": "diff --git a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\nindex 406177f7..fc2ebf43 100644\n--- a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n+++ b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n", "chunk": "@@ -95,7 +95,7 @@ public abstract class DefaultStreamExtractorTest extends DefaultExtractorTest<St\n         assertNotNull(description);\n         assertFalse(\"description is empty\", description.getContent().isEmpty());\n \n-        for (String s : expectedDescriptionContains()) {\n+        for (final String s : expectedDescriptionContains()) {\n             assertThat(description.getContent(), containsString(s));\n         }\n     }\n", "next_change": null}]}}]}}]}}]}, "revised_code_in_main": {"commit": "14c0c37d64883e795445bc8bd878df33ad6bdb9d", "changed_code": [{"header": "diff --git a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\nindex 7de6a0ce..a70b38a8 100644\n--- a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n+++ b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n", "chunk": "@@ -91,11 +134,11 @@ public abstract class DefaultStreamExtractorTest extends DefaultExtractorTest<St\n     @Test\n     @Override\n     public void testDescription() throws Exception {\n-        Description description = extractor().getDescription();\n+        final Description description = extractor().getDescription();\n         assertNotNull(description);\n         assertFalse(\"description is empty\", description.getContent().isEmpty());\n \n-        for (String s : expectedDescriptionContains()) {\n+        for (final String s : expectedDescriptionContains()) {\n             assertThat(description.getContent(), containsString(s));\n         }\n     }\n", "next_change": {"commit": "21158744b1abbe17d85ebcee61f2e12068c4c375", "changed_code": [{"header": "diff --git a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\nindex a70b38a8..a42b063b 100644\n--- a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n+++ b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n", "chunk": "@@ -136,7 +147,12 @@ public abstract class DefaultStreamExtractorTest extends DefaultExtractorTest<St\n     public void testDescription() throws Exception {\n         final Description description = extractor().getDescription();\n         assertNotNull(description);\n-        assertFalse(\"description is empty\", description.getContent().isEmpty());\n+\n+        if (expectedDescriptionIsEmpty()) {\n+            assertTrue(\"description is not empty\", description.getContent().isEmpty());\n+        } else {\n+            assertFalse(\"description is empty\", description.getContent().isEmpty());\n+        }\n \n         for (final String s : expectedDescriptionContains()) {\n             assertThat(description.getContent(), containsString(s));\n", "next_change": {"commit": "a2cbdf0991d6cf4154d905fbdd2b5a2c1c6f758c", "changed_code": [{"header": "diff --git a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\nindex a42b063b..c7c8ecd4 100644\n--- a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n+++ b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n", "chunk": "@@ -149,13 +149,13 @@ public abstract class DefaultStreamExtractorTest extends DefaultExtractorTest<St\n         assertNotNull(description);\n \n         if (expectedDescriptionIsEmpty()) {\n-            assertTrue(\"description is not empty\", description.getContent().isEmpty());\n+            assertTrue(description.getContent().isEmpty(), \"description is not empty\");\n         } else {\n-            assertFalse(\"description is empty\", description.getContent().isEmpty());\n+            assertFalse(description.getContent().isEmpty(), \"description is empty\");\n         }\n \n         for (final String s : expectedDescriptionContains()) {\n-            assertThat(description.getContent(), containsString(s));\n+            ExtractorAsserts.assertContains(s, description.getContent());\n         }\n     }\n \n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "14c0c37d64883e795445bc8bd878df33ad6bdb9d", "message": "Merge commit", "committedDate": null}, {"oid": "4f04cfcccaaf49bb5362bb7a02f6450c446934b6", "committedDate": "2020-11-01 06:28:54 +0530", "message": "Switch from Calendar to OffsetDateTime in DateWrapper."}, {"oid": "827f7bd13750b29e2382c6681f23b707f76e5f33", "committedDate": "2020-11-04 16:02:12 +0100", "message": "[YouTube] Cache deobfuscation and improve requests made"}, {"oid": "9a7a224a545e0dd5036b14e7e7a83e923be03d6a", "committedDate": "2020-12-12 10:24:55 +0100", "message": "Add tests for stream segments"}, {"oid": "bc6de149527fabb235068bfed538194316054ddb", "committedDate": "2020-12-22 18:19:26 +0100", "message": "Extract stream and search meta info for YouTube"}, {"oid": "11dcfe638b994fc30db3589fc1aaf273ab241362", "committedDate": "2021-01-14 20:01:06 +0100", "message": "Add durationPerFrame to Frameset and getFrameBoundsAt method"}, {"oid": "1a322ad8edcf54e90f84d236fbe6dce1a9d8ae47", "committedDate": "2021-02-18 16:36:40 +0100", "message": "Add uploader verified by service extraction"}, {"oid": "21158744b1abbe17d85ebcee61f2e12068c4c375", "committedDate": "2021-03-05 16:38:46 +0100", "message": "Add expectedDescriptionIsEmpty() to DefaultStreamExtractorTest"}, {"oid": "c47cc54908d14d3faa6326e62cb8c8add9463df2", "committedDate": "2021-03-19 10:14:43 +0100", "message": "Extract metadata for YouTube, SoundCloud & MediaCCC"}, {"oid": "14f6f1b7c3d4a98ac0a74a9f6d16b05cb96c0c91", "committedDate": "2021-03-31 20:24:40 +0200", "message": "Generify related streams calls and rename method"}, {"oid": "a2cbdf0991d6cf4154d905fbdd2b5a2c1c6f758c", "committedDate": "2021-12-27 21:08:08 +0100", "message": "Updated to JUnit 5"}, {"oid": "3712a669b1d1759e68a0309594cbc77449cd2e64", "committedDate": "2022-01-04 17:28:31 +0100", "message": "Code cleanup / improvements"}, {"oid": "6f3f608ab651574999a169cd506428ded9eac491", "committedDate": "2022-02-24 12:50:51 +0000", "message": "Add support for extracting channel subscriber count in StreamInfo."}, {"oid": "5b0ec694a638cdbca038a76ad4bcae6daf6b37d6", "committedDate": "2022-02-24 12:50:51 +0000", "message": "Add requested changes."}, {"oid": "f6ec7f9a6120064fdf7348ff13e1adfbcab8492f", "committedDate": "2022-05-28 12:00:45 +0200", "message": "Update DefaultStreamExtractorTest and SoundcloudStreamExtractorTest to support changes made in Stream classes"}]}, {"oid": "b6ae05794f0ec1620706af5df3c55ccfcbb3f091", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/b6ae05794f0ec1620706af5df3c55ccfcbb3f091", "message": "[Test] Optimize imports", "committedDate": "2020-04-11T13:26:05Z", "type": "forcePushed"}, {"oid": "6dd5f016b1c9de508bc2d99105221aa8383a53c8", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/6dd5f016b1c9de508bc2d99105221aa8383a53c8", "message": "[YouTube] Fix livestream test actually having video streams\n\nAlso fix description test that was not valid anymore", "committedDate": "2020-04-20T06:41:23Z", "type": "forcePushed"}, {"oid": "ab85fcb91ec4b916e7074fad565e2624e78c0cd1", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/ab85fcb91ec4b916e7074fad565e2624e78c0cd1", "message": "[MediaCCC] Return empty list of video-only streams instead of null", "committedDate": "2020-04-20T07:01:51Z", "type": "forcePushed"}, {"oid": "505f19c4db56f23a5a08d1cba66c2e9043b4964f", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/505f19c4db56f23a5a08d1cba66c2e9043b4964f", "message": "[MediaCCC] Return empty list of video-only streams instead of null", "committedDate": "2020-05-06T19:19:21Z", "type": "forcePushed"}, {"oid": "e4ace2b0dc97db6df467f41a74219776304dac6f", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/e4ace2b0dc97db6df467f41a74219776304dac6f", "message": "[MediaCCC] Return empty list of video-only streams instead of null", "committedDate": "2020-05-09T14:23:48Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA3MjQwMw==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/309#discussion_r425072403", "body": "`final`", "bodyText": "final", "bodyHTML": "<p dir=\"auto\"><code>final</code></p>", "author": "wb9688", "createdAt": "2020-05-14T11:42:03Z", "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java", "diffHunk": "@@ -0,0 +1,297 @@\n+package org.schabi.newpipe.extractor.services;\n+\n+import org.junit.Test;\n+import org.schabi.newpipe.extractor.MediaFormat;\n+import org.schabi.newpipe.extractor.localization.DateWrapper;\n+import org.schabi.newpipe.extractor.stream.AudioStream;\n+import org.schabi.newpipe.extractor.stream.Description;\n+import org.schabi.newpipe.extractor.stream.Frameset;\n+import org.schabi.newpipe.extractor.stream.StreamExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemsCollector;\n+import org.schabi.newpipe.extractor.stream.StreamType;\n+import org.schabi.newpipe.extractor.stream.SubtitlesStream;\n+import org.schabi.newpipe.extractor.stream.VideoStream;\n+\n+import java.text.SimpleDateFormat;\n+import java.util.Calendar;\n+import java.util.List;\n+import java.util.TimeZone;\n+\n+import javax.annotation.Nullable;\n+\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.assertTrue;\n+import static org.schabi.newpipe.extractor.ExtractorAsserts.assertAtLeast;\n+import static org.schabi.newpipe.extractor.ExtractorAsserts.assertIsSecureUrl;\n+import static org.schabi.newpipe.extractor.ExtractorAsserts.assertIsValidUrl;\n+import static org.schabi.newpipe.extractor.services.DefaultTests.defaultTestListOfItems;\n+\n+/**\n+ * Test for {@link StreamExtractor}\n+ */\n+public abstract class DefaultStreamExtractorTest extends DefaultExtractorTest<StreamExtractor>\n+        implements BaseStreamExtractorTest {\n+\n+    public abstract StreamType expectedStreamType();\n+    public abstract String expectedUploaderName();\n+    public abstract String expectedUploaderUrl();\n+    public abstract List<String> expectedDescriptionContains(); // e.g. for full links\n+    public abstract long expectedLength();\n+    public long expectedTimestamp() { return 0; }; // default: there is no timestamp\n+    public abstract long expectedViewCountAtLeast();\n+    @Nullable public abstract String expectedUploadDate(); // format: \"yyyy-MM-dd HH:mm:ss.SSS\"\n+    @Nullable public abstract String expectedTextualUploadDate();\n+    public abstract long expectedLikeCountAtLeast(); // return -1 if ratings are disabled\n+    public abstract long expectedDislikeCountAtLeast(); // return -1 if ratings are disabled\n+    public boolean expectedHasRelatedStreams() { return true; } // default: there are related videos\n+    public int expectedAgeLimit() { return StreamExtractor.NO_AGE_LIMIT; } // default: no limit\n+    @Nullable public String expectedErrorMessage() { return null; } // default: no error message\n+    public boolean expectedHasVideoStreams() { return true; } // default: there are video streams\n+    public boolean expectedHasAudioStreams() { return true; } // default: there are audio streams\n+    public boolean expectedHasSubtitles() { return true; } // default: there are subtitles streams\n+    public boolean expectedHasFrames() { return true; } // default: there are frames\n+    public boolean expectedHasNextStream() { return true; } // default: there is a next video\n+\n+    @Test\n+    @Override\n+    public void testStreamType() throws Exception {\n+        assertEquals(expectedStreamType(), extractor().getStreamType());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testUploaderName() throws Exception {\n+        assertEquals(expectedUploaderName(), extractor().getUploaderName());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testUploaderUrl() throws Exception {\n+        final String uploaderUrl = extractor().getUploaderUrl();\n+        assertIsSecureUrl(uploaderUrl);\n+        assertEquals(expectedUploaderUrl(), uploaderUrl);\n+    }\n+\n+    @Test\n+    @Override\n+    public void testUploaderAvatarUrl() throws Exception {\n+        assertIsSecureUrl(extractor().getUploaderAvatarUrl());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testThumbnailUrl() throws Exception {\n+        assertIsSecureUrl(extractor().getThumbnailUrl());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testDescription() throws Exception {\n+        final Description description = extractor().getDescription();\n+        assertNotNull(description);\n+        assertFalse(\"description is empty\", description.getContent().isEmpty());\n+\n+        for (String s : expectedDescriptionContains()) {\n+            assertThat(description.getContent(), containsString(s));\n+        }\n+    }\n+\n+    @Test\n+    @Override\n+    public void testLength() throws Exception {\n+        assertEquals(expectedLength(), extractor().getLength());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testTimestamp() throws Exception {\n+        assertEquals(expectedTimestamp(), extractor().getTimeStamp());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testViewCount() throws Exception {\n+        assertAtLeast(expectedViewCountAtLeast(), extractor().getViewCount());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testUploadDate() throws Exception {\n+        final DateWrapper dateWrapper = extractor().getUploadDate();\n+\n+        if (expectedUploadDate() == null) {\n+            assertNull(dateWrapper);\n+        } else {\n+            assertNotNull(dateWrapper);\n+\n+            final Calendar expectedDate = Calendar.getInstance();\n+            final Calendar actualDate = dateWrapper.date();\n+            expectedDate.setTimeZone(TimeZone.getTimeZone(\"GMT\"));\n+            actualDate.setTimeZone(TimeZone.getTimeZone(\"GMT\"));\n+\n+            final SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.S\");\n+            expectedDate.setTime(sdf.parse(expectedUploadDate()));\n+            assertEquals(expectedDate, actualDate);\n+        }\n+    }\n+\n+    @Test\n+    @Override\n+    public void testTextualUploadDate() throws Exception {\n+        assertEquals(expectedTextualUploadDate(), extractor().getTextualUploadDate());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testLikeCount() throws Exception {\n+        if (expectedLikeCountAtLeast() == -1) {\n+            assertEquals(-1, extractor().getLikeCount());\n+        } else {\n+            assertAtLeast(expectedLikeCountAtLeast(), extractor().getLikeCount());\n+        }\n+    }\n+\n+    @Test\n+    @Override\n+    public void testDislikeCount() throws Exception {\n+        if (expectedDislikeCountAtLeast() == -1) {\n+            assertEquals(-1, extractor().getDislikeCount());\n+        } else {\n+            assertAtLeast(expectedDislikeCountAtLeast(), extractor().getDislikeCount());\n+        }\n+    }\n+\n+    @Test\n+    @Override\n+    public void testRelatedStreams() throws Exception {\n+        final StreamInfoItemsCollector relatedStreams = extractor().getRelatedStreams();\n+\n+        if (expectedHasRelatedStreams()) {\n+            defaultTestListOfItems(extractor().getService(), relatedStreams.getItems(),\n+                    relatedStreams.getErrors());\n+        } else {\n+            assertNull(relatedStreams);\n+        }\n+    }\n+\n+    @Test\n+    @Override\n+    public void testAgeLimit() throws Exception {\n+        assertEquals(expectedAgeLimit(), extractor().getAgeLimit());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testErrorMessage() throws Exception {\n+        assertEquals(expectedErrorMessage(), extractor().getErrorMessage());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testVideoStreams() throws Exception {\n+        List<VideoStream> videoStreams = extractor().getVideoStreams();\n+        final List<VideoStream> videoOnlyStreams = extractor().getVideoOnlyStreams();\n+        assertNotNull(videoStreams);\n+        assertNotNull(videoOnlyStreams);\n+        videoStreams.addAll(videoOnlyStreams);\n+\n+        if (expectedHasVideoStreams()) {\n+            assertFalse(videoStreams.isEmpty());\n+\n+            for (VideoStream stream : videoStreams) {\n+                assertIsSecureUrl(stream.getUrl());\n+                assertFalse(stream.getResolution().isEmpty());\n+\n+                int formatId = stream.getFormatId();", "originalCommit": "e4ace2b0dc97db6df467f41a74219776304dac6f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fa29b78f77e1e323ec0512643f3bcaaf6bd13df0", "changed_code": [{"header": "diff --git a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\nindex 0e731d4a..6c0419d5 100644\n--- a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n+++ b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n", "chunk": "@@ -203,11 +246,11 @@ public abstract class DefaultStreamExtractorTest extends DefaultExtractorTest<St\n         if (expectedHasVideoStreams()) {\n             assertFalse(videoStreams.isEmpty());\n \n-            for (VideoStream stream : videoStreams) {\n+            for (final VideoStream stream : videoStreams) {\n                 assertIsSecureUrl(stream.getUrl());\n                 assertFalse(stream.getResolution().isEmpty());\n \n-                int formatId = stream.getFormatId();\n+                final int formatId = stream.getFormatId();\n                 assertTrue(\"format id does not fit a video stream: \" + formatId,\n                         0 <= formatId && formatId < 0x100);\n             }\n", "next_change": {"commit": "1d7a86e664717d09e33371bc87c289903b19feb2", "changed_code": [{"header": "diff --git a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\nindex 6c0419d5..406177f7 100644\n--- a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n+++ b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n", "chunk": "@@ -246,11 +202,11 @@ public abstract class DefaultStreamExtractorTest extends DefaultExtractorTest<St\n         if (expectedHasVideoStreams()) {\n             assertFalse(videoStreams.isEmpty());\n \n-            for (final VideoStream stream : videoStreams) {\n+            for (VideoStream stream : videoStreams) {\n                 assertIsSecureUrl(stream.getUrl());\n                 assertFalse(stream.getResolution().isEmpty());\n \n-                final int formatId = stream.getFormatId();\n+                int formatId = stream.getFormatId();\n                 assertTrue(\"format id does not fit a video stream: \" + formatId,\n                         0 <= formatId && formatId < 0x100);\n             }\n", "next_change": {"commit": "a087b092b401977bd58b279a3f285549db0e2160", "changed_code": [{"header": "diff --git a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\nindex 406177f7..fc2ebf43 100644\n--- a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n+++ b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n", "chunk": "@@ -202,11 +202,11 @@ public abstract class DefaultStreamExtractorTest extends DefaultExtractorTest<St\n         if (expectedHasVideoStreams()) {\n             assertFalse(videoStreams.isEmpty());\n \n-            for (VideoStream stream : videoStreams) {\n+            for (final VideoStream stream : videoStreams) {\n                 assertIsSecureUrl(stream.getUrl());\n                 assertFalse(stream.getResolution().isEmpty());\n \n-                int formatId = stream.getFormatId();\n+                final int formatId = stream.getFormatId();\n                 assertTrue(\"format id does not fit a video stream: \" + formatId,\n                         0 <= formatId && formatId < 0x100);\n             }\n", "next_change": {"commit": "57e7994c9e46d068ba53cb320c91c22ec24f76de", "changed_code": [{"header": "diff --git a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\nindex fc2ebf43..a70b38a8 100644\n--- a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n+++ b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n", "chunk": "@@ -207,6 +249,7 @@ public abstract class DefaultStreamExtractorTest extends DefaultExtractorTest<St\n                 assertFalse(stream.getResolution().isEmpty());\n \n                 final int formatId = stream.getFormatId();\n+                // see MediaFormat: video stream formats range from 0 to 0x100\n                 assertTrue(\"format id does not fit a video stream: \" + formatId,\n                         0 <= formatId && formatId < 0x100);\n             }\n", "next_change": null}]}}]}}]}}]}, "revised_code_in_main": {"commit": "14c0c37d64883e795445bc8bd878df33ad6bdb9d", "changed_code": [{"header": "diff --git a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\nindex 0e731d4a..a70b38a8 100644\n--- a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n+++ b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n", "chunk": "@@ -203,11 +244,12 @@ public abstract class DefaultStreamExtractorTest extends DefaultExtractorTest<St\n         if (expectedHasVideoStreams()) {\n             assertFalse(videoStreams.isEmpty());\n \n-            for (VideoStream stream : videoStreams) {\n+            for (final VideoStream stream : videoStreams) {\n                 assertIsSecureUrl(stream.getUrl());\n                 assertFalse(stream.getResolution().isEmpty());\n \n-                int formatId = stream.getFormatId();\n+                final int formatId = stream.getFormatId();\n+                // see MediaFormat: video stream formats range from 0 to 0x100\n                 assertTrue(\"format id does not fit a video stream: \" + formatId,\n                         0 <= formatId && formatId < 0x100);\n             }\n", "next_change": {"commit": "a2cbdf0991d6cf4154d905fbdd2b5a2c1c6f758c", "changed_code": [{"header": "diff --git a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\nindex a70b38a8..c7c8ecd4 100644\n--- a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n+++ b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n", "chunk": "@@ -250,8 +265,8 @@ public abstract class DefaultStreamExtractorTest extends DefaultExtractorTest<St\n \n                 final int formatId = stream.getFormatId();\n                 // see MediaFormat: video stream formats range from 0 to 0x100\n-                assertTrue(\"format id does not fit a video stream: \" + formatId,\n-                        0 <= formatId && formatId < 0x100);\n+                assertTrue(0 <= formatId && formatId < 0x100,\n+                        \"format id does not fit a video stream: \" + formatId);\n             }\n         } else {\n             assertTrue(videoStreams.isEmpty());\n", "next_change": {"commit": "f6ec7f9a6120064fdf7348ff13e1adfbcab8492f", "changed_code": [{"header": "diff --git a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\nindex c7c8ecd4..d9b4e6cd 100644\n--- a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n+++ b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n", "chunk": "@@ -260,13 +271,20 @@ public abstract class DefaultStreamExtractorTest extends DefaultExtractorTest<St\n             assertFalse(videoStreams.isEmpty());\n \n             for (final VideoStream stream : videoStreams) {\n-                assertIsSecureUrl(stream.getUrl());\n-                assertFalse(stream.getResolution().isEmpty());\n-\n-                final int formatId = stream.getFormatId();\n-                // see MediaFormat: video stream formats range from 0 to 0x100\n-                assertTrue(0 <= formatId && formatId < 0x100,\n-                        \"format id does not fit a video stream: \" + formatId);\n+                if (stream.isUrl()) {\n+                    assertIsSecureUrl(stream.getContent());\n+                }\n+                final StreamType streamType = extractor().getStreamType();\n+                // On some video streams, the resolution can be empty and the format be unknown,\n+                // especially on livestreams (like streams with HLS master playlists)\n+                if (streamType != StreamType.LIVE_STREAM\n+                        && streamType != StreamType.AUDIO_LIVE_STREAM) {\n+                    assertFalse(stream.getResolution().isEmpty());\n+                    final int formatId = stream.getFormatId();\n+                    // see MediaFormat: video stream formats range from 0 to 0x100\n+                    assertTrue(0 <= formatId && formatId < 0x100,\n+                            \"Format id does not fit a video stream: \" + formatId);\n+                }\n             }\n         } else {\n             assertTrue(videoStreams.isEmpty());\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "14c0c37d64883e795445bc8bd878df33ad6bdb9d", "message": "Merge commit", "committedDate": null}, {"oid": "4f04cfcccaaf49bb5362bb7a02f6450c446934b6", "committedDate": "2020-11-01 06:28:54 +0530", "message": "Switch from Calendar to OffsetDateTime in DateWrapper."}, {"oid": "827f7bd13750b29e2382c6681f23b707f76e5f33", "committedDate": "2020-11-04 16:02:12 +0100", "message": "[YouTube] Cache deobfuscation and improve requests made"}, {"oid": "9a7a224a545e0dd5036b14e7e7a83e923be03d6a", "committedDate": "2020-12-12 10:24:55 +0100", "message": "Add tests for stream segments"}, {"oid": "bc6de149527fabb235068bfed538194316054ddb", "committedDate": "2020-12-22 18:19:26 +0100", "message": "Extract stream and search meta info for YouTube"}, {"oid": "11dcfe638b994fc30db3589fc1aaf273ab241362", "committedDate": "2021-01-14 20:01:06 +0100", "message": "Add durationPerFrame to Frameset and getFrameBoundsAt method"}, {"oid": "1a322ad8edcf54e90f84d236fbe6dce1a9d8ae47", "committedDate": "2021-02-18 16:36:40 +0100", "message": "Add uploader verified by service extraction"}, {"oid": "21158744b1abbe17d85ebcee61f2e12068c4c375", "committedDate": "2021-03-05 16:38:46 +0100", "message": "Add expectedDescriptionIsEmpty() to DefaultStreamExtractorTest"}, {"oid": "c47cc54908d14d3faa6326e62cb8c8add9463df2", "committedDate": "2021-03-19 10:14:43 +0100", "message": "Extract metadata for YouTube, SoundCloud & MediaCCC"}, {"oid": "14f6f1b7c3d4a98ac0a74a9f6d16b05cb96c0c91", "committedDate": "2021-03-31 20:24:40 +0200", "message": "Generify related streams calls and rename method"}, {"oid": "a2cbdf0991d6cf4154d905fbdd2b5a2c1c6f758c", "committedDate": "2021-12-27 21:08:08 +0100", "message": "Updated to JUnit 5"}, {"oid": "3712a669b1d1759e68a0309594cbc77449cd2e64", "committedDate": "2022-01-04 17:28:31 +0100", "message": "Code cleanup / improvements"}, {"oid": "6f3f608ab651574999a169cd506428ded9eac491", "committedDate": "2022-02-24 12:50:51 +0000", "message": "Add support for extracting channel subscriber count in StreamInfo."}, {"oid": "5b0ec694a638cdbca038a76ad4bcae6daf6b37d6", "committedDate": "2022-02-24 12:50:51 +0000", "message": "Add requested changes."}, {"oid": "f6ec7f9a6120064fdf7348ff13e1adfbcab8492f", "committedDate": "2022-05-28 12:00:45 +0200", "message": "Update DefaultStreamExtractorTest and SoundcloudStreamExtractorTest to support changes made in Stream classes"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA3MjQ1NA==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/309#discussion_r425072454", "body": "`final`", "bodyText": "final", "bodyHTML": "<p dir=\"auto\"><code>final</code></p>", "author": "wb9688", "createdAt": "2020-05-14T11:42:09Z", "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java", "diffHunk": "@@ -0,0 +1,297 @@\n+package org.schabi.newpipe.extractor.services;\n+\n+import org.junit.Test;\n+import org.schabi.newpipe.extractor.MediaFormat;\n+import org.schabi.newpipe.extractor.localization.DateWrapper;\n+import org.schabi.newpipe.extractor.stream.AudioStream;\n+import org.schabi.newpipe.extractor.stream.Description;\n+import org.schabi.newpipe.extractor.stream.Frameset;\n+import org.schabi.newpipe.extractor.stream.StreamExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemsCollector;\n+import org.schabi.newpipe.extractor.stream.StreamType;\n+import org.schabi.newpipe.extractor.stream.SubtitlesStream;\n+import org.schabi.newpipe.extractor.stream.VideoStream;\n+\n+import java.text.SimpleDateFormat;\n+import java.util.Calendar;\n+import java.util.List;\n+import java.util.TimeZone;\n+\n+import javax.annotation.Nullable;\n+\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.assertTrue;\n+import static org.schabi.newpipe.extractor.ExtractorAsserts.assertAtLeast;\n+import static org.schabi.newpipe.extractor.ExtractorAsserts.assertIsSecureUrl;\n+import static org.schabi.newpipe.extractor.ExtractorAsserts.assertIsValidUrl;\n+import static org.schabi.newpipe.extractor.services.DefaultTests.defaultTestListOfItems;\n+\n+/**\n+ * Test for {@link StreamExtractor}\n+ */\n+public abstract class DefaultStreamExtractorTest extends DefaultExtractorTest<StreamExtractor>\n+        implements BaseStreamExtractorTest {\n+\n+    public abstract StreamType expectedStreamType();\n+    public abstract String expectedUploaderName();\n+    public abstract String expectedUploaderUrl();\n+    public abstract List<String> expectedDescriptionContains(); // e.g. for full links\n+    public abstract long expectedLength();\n+    public long expectedTimestamp() { return 0; }; // default: there is no timestamp\n+    public abstract long expectedViewCountAtLeast();\n+    @Nullable public abstract String expectedUploadDate(); // format: \"yyyy-MM-dd HH:mm:ss.SSS\"\n+    @Nullable public abstract String expectedTextualUploadDate();\n+    public abstract long expectedLikeCountAtLeast(); // return -1 if ratings are disabled\n+    public abstract long expectedDislikeCountAtLeast(); // return -1 if ratings are disabled\n+    public boolean expectedHasRelatedStreams() { return true; } // default: there are related videos\n+    public int expectedAgeLimit() { return StreamExtractor.NO_AGE_LIMIT; } // default: no limit\n+    @Nullable public String expectedErrorMessage() { return null; } // default: no error message\n+    public boolean expectedHasVideoStreams() { return true; } // default: there are video streams\n+    public boolean expectedHasAudioStreams() { return true; } // default: there are audio streams\n+    public boolean expectedHasSubtitles() { return true; } // default: there are subtitles streams\n+    public boolean expectedHasFrames() { return true; } // default: there are frames\n+    public boolean expectedHasNextStream() { return true; } // default: there is a next video\n+\n+    @Test\n+    @Override\n+    public void testStreamType() throws Exception {\n+        assertEquals(expectedStreamType(), extractor().getStreamType());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testUploaderName() throws Exception {\n+        assertEquals(expectedUploaderName(), extractor().getUploaderName());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testUploaderUrl() throws Exception {\n+        final String uploaderUrl = extractor().getUploaderUrl();\n+        assertIsSecureUrl(uploaderUrl);\n+        assertEquals(expectedUploaderUrl(), uploaderUrl);\n+    }\n+\n+    @Test\n+    @Override\n+    public void testUploaderAvatarUrl() throws Exception {\n+        assertIsSecureUrl(extractor().getUploaderAvatarUrl());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testThumbnailUrl() throws Exception {\n+        assertIsSecureUrl(extractor().getThumbnailUrl());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testDescription() throws Exception {\n+        final Description description = extractor().getDescription();\n+        assertNotNull(description);\n+        assertFalse(\"description is empty\", description.getContent().isEmpty());\n+\n+        for (String s : expectedDescriptionContains()) {\n+            assertThat(description.getContent(), containsString(s));\n+        }\n+    }\n+\n+    @Test\n+    @Override\n+    public void testLength() throws Exception {\n+        assertEquals(expectedLength(), extractor().getLength());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testTimestamp() throws Exception {\n+        assertEquals(expectedTimestamp(), extractor().getTimeStamp());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testViewCount() throws Exception {\n+        assertAtLeast(expectedViewCountAtLeast(), extractor().getViewCount());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testUploadDate() throws Exception {\n+        final DateWrapper dateWrapper = extractor().getUploadDate();\n+\n+        if (expectedUploadDate() == null) {\n+            assertNull(dateWrapper);\n+        } else {\n+            assertNotNull(dateWrapper);\n+\n+            final Calendar expectedDate = Calendar.getInstance();\n+            final Calendar actualDate = dateWrapper.date();\n+            expectedDate.setTimeZone(TimeZone.getTimeZone(\"GMT\"));\n+            actualDate.setTimeZone(TimeZone.getTimeZone(\"GMT\"));\n+\n+            final SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.S\");\n+            expectedDate.setTime(sdf.parse(expectedUploadDate()));\n+            assertEquals(expectedDate, actualDate);\n+        }\n+    }\n+\n+    @Test\n+    @Override\n+    public void testTextualUploadDate() throws Exception {\n+        assertEquals(expectedTextualUploadDate(), extractor().getTextualUploadDate());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testLikeCount() throws Exception {\n+        if (expectedLikeCountAtLeast() == -1) {\n+            assertEquals(-1, extractor().getLikeCount());\n+        } else {\n+            assertAtLeast(expectedLikeCountAtLeast(), extractor().getLikeCount());\n+        }\n+    }\n+\n+    @Test\n+    @Override\n+    public void testDislikeCount() throws Exception {\n+        if (expectedDislikeCountAtLeast() == -1) {\n+            assertEquals(-1, extractor().getDislikeCount());\n+        } else {\n+            assertAtLeast(expectedDislikeCountAtLeast(), extractor().getDislikeCount());\n+        }\n+    }\n+\n+    @Test\n+    @Override\n+    public void testRelatedStreams() throws Exception {\n+        final StreamInfoItemsCollector relatedStreams = extractor().getRelatedStreams();\n+\n+        if (expectedHasRelatedStreams()) {\n+            defaultTestListOfItems(extractor().getService(), relatedStreams.getItems(),\n+                    relatedStreams.getErrors());\n+        } else {\n+            assertNull(relatedStreams);\n+        }\n+    }\n+\n+    @Test\n+    @Override\n+    public void testAgeLimit() throws Exception {\n+        assertEquals(expectedAgeLimit(), extractor().getAgeLimit());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testErrorMessage() throws Exception {\n+        assertEquals(expectedErrorMessage(), extractor().getErrorMessage());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testVideoStreams() throws Exception {\n+        List<VideoStream> videoStreams = extractor().getVideoStreams();\n+        final List<VideoStream> videoOnlyStreams = extractor().getVideoOnlyStreams();\n+        assertNotNull(videoStreams);\n+        assertNotNull(videoOnlyStreams);\n+        videoStreams.addAll(videoOnlyStreams);\n+\n+        if (expectedHasVideoStreams()) {\n+            assertFalse(videoStreams.isEmpty());\n+\n+            for (VideoStream stream : videoStreams) {\n+                assertIsSecureUrl(stream.getUrl());\n+                assertFalse(stream.getResolution().isEmpty());\n+\n+                int formatId = stream.getFormatId();\n+                assertTrue(\"format id does not fit a video stream: \" + formatId,\n+                        0 <= formatId && formatId < 0x100);\n+            }\n+        } else {\n+            assertTrue(videoStreams.isEmpty());\n+        }\n+    }\n+\n+    @Test\n+    @Override\n+    public void testAudioStreams() throws Exception {\n+        final List<AudioStream> audioStreams = extractor().getAudioStreams();\n+        assertNotNull(audioStreams);\n+\n+        if (expectedHasAudioStreams()) {\n+            assertFalse(audioStreams.isEmpty());\n+\n+            for (AudioStream stream : audioStreams) {\n+                assertIsSecureUrl(stream.getUrl());\n+\n+                int formatId = stream.getFormatId();", "originalCommit": "e4ace2b0dc97db6df467f41a74219776304dac6f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fa29b78f77e1e323ec0512643f3bcaaf6bd13df0", "changed_code": [{"header": "diff --git a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\nindex 0e731d4a..6c0419d5 100644\n--- a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n+++ b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n", "chunk": "@@ -225,10 +268,10 @@ public abstract class DefaultStreamExtractorTest extends DefaultExtractorTest<St\n         if (expectedHasAudioStreams()) {\n             assertFalse(audioStreams.isEmpty());\n \n-            for (AudioStream stream : audioStreams) {\n+            for (final AudioStream stream : audioStreams) {\n                 assertIsSecureUrl(stream.getUrl());\n \n-                int formatId = stream.getFormatId();\n+                final int formatId = stream.getFormatId();\n                 assertTrue(\"format id does not fit an audio stream: \" + formatId,\n                         0x100 <= formatId && formatId < 0x1000);\n             }\n", "next_change": {"commit": "1d7a86e664717d09e33371bc87c289903b19feb2", "changed_code": [{"header": "diff --git a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\nindex 6c0419d5..406177f7 100644\n--- a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n+++ b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n", "chunk": "@@ -268,10 +224,10 @@ public abstract class DefaultStreamExtractorTest extends DefaultExtractorTest<St\n         if (expectedHasAudioStreams()) {\n             assertFalse(audioStreams.isEmpty());\n \n-            for (final AudioStream stream : audioStreams) {\n+            for (AudioStream stream : audioStreams) {\n                 assertIsSecureUrl(stream.getUrl());\n \n-                final int formatId = stream.getFormatId();\n+                int formatId = stream.getFormatId();\n                 assertTrue(\"format id does not fit an audio stream: \" + formatId,\n                         0x100 <= formatId && formatId < 0x1000);\n             }\n", "next_change": {"commit": "a087b092b401977bd58b279a3f285549db0e2160", "changed_code": [{"header": "diff --git a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\nindex 406177f7..fc2ebf43 100644\n--- a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n+++ b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n", "chunk": "@@ -224,10 +224,10 @@ public abstract class DefaultStreamExtractorTest extends DefaultExtractorTest<St\n         if (expectedHasAudioStreams()) {\n             assertFalse(audioStreams.isEmpty());\n \n-            for (AudioStream stream : audioStreams) {\n+            for (final AudioStream stream : audioStreams) {\n                 assertIsSecureUrl(stream.getUrl());\n \n-                int formatId = stream.getFormatId();\n+                final int formatId = stream.getFormatId();\n                 assertTrue(\"format id does not fit an audio stream: \" + formatId,\n                         0x100 <= formatId && formatId < 0x1000);\n             }\n", "next_change": {"commit": "57e7994c9e46d068ba53cb320c91c22ec24f76de", "changed_code": [{"header": "diff --git a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\nindex fc2ebf43..a70b38a8 100644\n--- a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n+++ b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n", "chunk": "@@ -228,6 +271,7 @@ public abstract class DefaultStreamExtractorTest extends DefaultExtractorTest<St\n                 assertIsSecureUrl(stream.getUrl());\n \n                 final int formatId = stream.getFormatId();\n+                // see MediaFormat: video stream formats range from 0x100 to 0x1000\n                 assertTrue(\"format id does not fit an audio stream: \" + formatId,\n                         0x100 <= formatId && formatId < 0x1000);\n             }\n", "next_change": null}]}}]}}]}}]}, "revised_code_in_main": {"commit": "14c0c37d64883e795445bc8bd878df33ad6bdb9d", "changed_code": [{"header": "diff --git a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\nindex 0e731d4a..a70b38a8 100644\n--- a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n+++ b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n", "chunk": "@@ -225,10 +267,11 @@ public abstract class DefaultStreamExtractorTest extends DefaultExtractorTest<St\n         if (expectedHasAudioStreams()) {\n             assertFalse(audioStreams.isEmpty());\n \n-            for (AudioStream stream : audioStreams) {\n+            for (final AudioStream stream : audioStreams) {\n                 assertIsSecureUrl(stream.getUrl());\n \n-                int formatId = stream.getFormatId();\n+                final int formatId = stream.getFormatId();\n+                // see MediaFormat: video stream formats range from 0x100 to 0x1000\n                 assertTrue(\"format id does not fit an audio stream: \" + formatId,\n                         0x100 <= formatId && formatId < 0x1000);\n             }\n", "next_change": {"commit": "a2cbdf0991d6cf4154d905fbdd2b5a2c1c6f758c", "changed_code": [{"header": "diff --git a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\nindex a70b38a8..c7c8ecd4 100644\n--- a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n+++ b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n", "chunk": "@@ -272,8 +287,8 @@ public abstract class DefaultStreamExtractorTest extends DefaultExtractorTest<St\n \n                 final int formatId = stream.getFormatId();\n                 // see MediaFormat: video stream formats range from 0x100 to 0x1000\n-                assertTrue(\"format id does not fit an audio stream: \" + formatId,\n-                        0x100 <= formatId && formatId < 0x1000);\n+                assertTrue(0x100 <= formatId && formatId < 0x1000,\n+                        \"format id does not fit an audio stream: \" + formatId);\n             }\n         } else {\n             assertTrue(audioStreams.isEmpty());\n", "next_change": {"commit": "f6ec7f9a6120064fdf7348ff13e1adfbcab8492f", "changed_code": [{"header": "diff --git a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\nindex c7c8ecd4..d9b4e6cd 100644\n--- a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n+++ b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n", "chunk": "@@ -283,12 +301,17 @@ public abstract class DefaultStreamExtractorTest extends DefaultExtractorTest<St\n             assertFalse(audioStreams.isEmpty());\n \n             for (final AudioStream stream : audioStreams) {\n-                assertIsSecureUrl(stream.getUrl());\n+                if (stream.isUrl()) {\n+                    assertIsSecureUrl(stream.getContent());\n+                }\n \n-                final int formatId = stream.getFormatId();\n-                // see MediaFormat: video stream formats range from 0x100 to 0x1000\n-                assertTrue(0x100 <= formatId && formatId < 0x1000,\n-                        \"format id does not fit an audio stream: \" + formatId);\n+                // The media format can be unknown on some audio streams\n+                if (stream.getFormat() != null) {\n+                    final int formatId = stream.getFormat().id;\n+                    // see MediaFormat: audio stream formats range from 0x100 to 0x1000\n+                    assertTrue(0x100 <= formatId && formatId < 0x1000,\n+                            \"Format id does not fit an audio stream: \" + formatId);\n+                }\n             }\n         } else {\n             assertTrue(audioStreams.isEmpty());\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "14c0c37d64883e795445bc8bd878df33ad6bdb9d", "message": "Merge commit", "committedDate": null}, {"oid": "4f04cfcccaaf49bb5362bb7a02f6450c446934b6", "committedDate": "2020-11-01 06:28:54 +0530", "message": "Switch from Calendar to OffsetDateTime in DateWrapper."}, {"oid": "827f7bd13750b29e2382c6681f23b707f76e5f33", "committedDate": "2020-11-04 16:02:12 +0100", "message": "[YouTube] Cache deobfuscation and improve requests made"}, {"oid": "9a7a224a545e0dd5036b14e7e7a83e923be03d6a", "committedDate": "2020-12-12 10:24:55 +0100", "message": "Add tests for stream segments"}, {"oid": "bc6de149527fabb235068bfed538194316054ddb", "committedDate": "2020-12-22 18:19:26 +0100", "message": "Extract stream and search meta info for YouTube"}, {"oid": "11dcfe638b994fc30db3589fc1aaf273ab241362", "committedDate": "2021-01-14 20:01:06 +0100", "message": "Add durationPerFrame to Frameset and getFrameBoundsAt method"}, {"oid": "1a322ad8edcf54e90f84d236fbe6dce1a9d8ae47", "committedDate": "2021-02-18 16:36:40 +0100", "message": "Add uploader verified by service extraction"}, {"oid": "21158744b1abbe17d85ebcee61f2e12068c4c375", "committedDate": "2021-03-05 16:38:46 +0100", "message": "Add expectedDescriptionIsEmpty() to DefaultStreamExtractorTest"}, {"oid": "c47cc54908d14d3faa6326e62cb8c8add9463df2", "committedDate": "2021-03-19 10:14:43 +0100", "message": "Extract metadata for YouTube, SoundCloud & MediaCCC"}, {"oid": "14f6f1b7c3d4a98ac0a74a9f6d16b05cb96c0c91", "committedDate": "2021-03-31 20:24:40 +0200", "message": "Generify related streams calls and rename method"}, {"oid": "a2cbdf0991d6cf4154d905fbdd2b5a2c1c6f758c", "committedDate": "2021-12-27 21:08:08 +0100", "message": "Updated to JUnit 5"}, {"oid": "3712a669b1d1759e68a0309594cbc77449cd2e64", "committedDate": "2022-01-04 17:28:31 +0100", "message": "Code cleanup / improvements"}, {"oid": "6f3f608ab651574999a169cd506428ded9eac491", "committedDate": "2022-02-24 12:50:51 +0000", "message": "Add support for extracting channel subscriber count in StreamInfo."}, {"oid": "5b0ec694a638cdbca038a76ad4bcae6daf6b37d6", "committedDate": "2022-02-24 12:50:51 +0000", "message": "Add requested changes."}, {"oid": "f6ec7f9a6120064fdf7348ff13e1adfbcab8492f", "committedDate": "2022-05-28 12:00:45 +0200", "message": "Update DefaultStreamExtractorTest and SoundcloudStreamExtractorTest to support changes made in Stream classes"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA3MjUyNQ==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/309#discussion_r425072525", "body": "`final`", "bodyText": "final", "bodyHTML": "<p dir=\"auto\"><code>final</code></p>", "author": "wb9688", "createdAt": "2020-05-14T11:42:16Z", "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java", "diffHunk": "@@ -0,0 +1,297 @@\n+package org.schabi.newpipe.extractor.services;\n+\n+import org.junit.Test;\n+import org.schabi.newpipe.extractor.MediaFormat;\n+import org.schabi.newpipe.extractor.localization.DateWrapper;\n+import org.schabi.newpipe.extractor.stream.AudioStream;\n+import org.schabi.newpipe.extractor.stream.Description;\n+import org.schabi.newpipe.extractor.stream.Frameset;\n+import org.schabi.newpipe.extractor.stream.StreamExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemsCollector;\n+import org.schabi.newpipe.extractor.stream.StreamType;\n+import org.schabi.newpipe.extractor.stream.SubtitlesStream;\n+import org.schabi.newpipe.extractor.stream.VideoStream;\n+\n+import java.text.SimpleDateFormat;\n+import java.util.Calendar;\n+import java.util.List;\n+import java.util.TimeZone;\n+\n+import javax.annotation.Nullable;\n+\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.assertTrue;\n+import static org.schabi.newpipe.extractor.ExtractorAsserts.assertAtLeast;\n+import static org.schabi.newpipe.extractor.ExtractorAsserts.assertIsSecureUrl;\n+import static org.schabi.newpipe.extractor.ExtractorAsserts.assertIsValidUrl;\n+import static org.schabi.newpipe.extractor.services.DefaultTests.defaultTestListOfItems;\n+\n+/**\n+ * Test for {@link StreamExtractor}\n+ */\n+public abstract class DefaultStreamExtractorTest extends DefaultExtractorTest<StreamExtractor>\n+        implements BaseStreamExtractorTest {\n+\n+    public abstract StreamType expectedStreamType();\n+    public abstract String expectedUploaderName();\n+    public abstract String expectedUploaderUrl();\n+    public abstract List<String> expectedDescriptionContains(); // e.g. for full links\n+    public abstract long expectedLength();\n+    public long expectedTimestamp() { return 0; }; // default: there is no timestamp\n+    public abstract long expectedViewCountAtLeast();\n+    @Nullable public abstract String expectedUploadDate(); // format: \"yyyy-MM-dd HH:mm:ss.SSS\"\n+    @Nullable public abstract String expectedTextualUploadDate();\n+    public abstract long expectedLikeCountAtLeast(); // return -1 if ratings are disabled\n+    public abstract long expectedDislikeCountAtLeast(); // return -1 if ratings are disabled\n+    public boolean expectedHasRelatedStreams() { return true; } // default: there are related videos\n+    public int expectedAgeLimit() { return StreamExtractor.NO_AGE_LIMIT; } // default: no limit\n+    @Nullable public String expectedErrorMessage() { return null; } // default: no error message\n+    public boolean expectedHasVideoStreams() { return true; } // default: there are video streams\n+    public boolean expectedHasAudioStreams() { return true; } // default: there are audio streams\n+    public boolean expectedHasSubtitles() { return true; } // default: there are subtitles streams\n+    public boolean expectedHasFrames() { return true; } // default: there are frames\n+    public boolean expectedHasNextStream() { return true; } // default: there is a next video\n+\n+    @Test\n+    @Override\n+    public void testStreamType() throws Exception {\n+        assertEquals(expectedStreamType(), extractor().getStreamType());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testUploaderName() throws Exception {\n+        assertEquals(expectedUploaderName(), extractor().getUploaderName());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testUploaderUrl() throws Exception {\n+        final String uploaderUrl = extractor().getUploaderUrl();\n+        assertIsSecureUrl(uploaderUrl);\n+        assertEquals(expectedUploaderUrl(), uploaderUrl);\n+    }\n+\n+    @Test\n+    @Override\n+    public void testUploaderAvatarUrl() throws Exception {\n+        assertIsSecureUrl(extractor().getUploaderAvatarUrl());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testThumbnailUrl() throws Exception {\n+        assertIsSecureUrl(extractor().getThumbnailUrl());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testDescription() throws Exception {\n+        final Description description = extractor().getDescription();\n+        assertNotNull(description);\n+        assertFalse(\"description is empty\", description.getContent().isEmpty());\n+\n+        for (String s : expectedDescriptionContains()) {\n+            assertThat(description.getContent(), containsString(s));\n+        }\n+    }\n+\n+    @Test\n+    @Override\n+    public void testLength() throws Exception {\n+        assertEquals(expectedLength(), extractor().getLength());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testTimestamp() throws Exception {\n+        assertEquals(expectedTimestamp(), extractor().getTimeStamp());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testViewCount() throws Exception {\n+        assertAtLeast(expectedViewCountAtLeast(), extractor().getViewCount());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testUploadDate() throws Exception {\n+        final DateWrapper dateWrapper = extractor().getUploadDate();\n+\n+        if (expectedUploadDate() == null) {\n+            assertNull(dateWrapper);\n+        } else {\n+            assertNotNull(dateWrapper);\n+\n+            final Calendar expectedDate = Calendar.getInstance();\n+            final Calendar actualDate = dateWrapper.date();\n+            expectedDate.setTimeZone(TimeZone.getTimeZone(\"GMT\"));\n+            actualDate.setTimeZone(TimeZone.getTimeZone(\"GMT\"));\n+\n+            final SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.S\");\n+            expectedDate.setTime(sdf.parse(expectedUploadDate()));\n+            assertEquals(expectedDate, actualDate);\n+        }\n+    }\n+\n+    @Test\n+    @Override\n+    public void testTextualUploadDate() throws Exception {\n+        assertEquals(expectedTextualUploadDate(), extractor().getTextualUploadDate());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testLikeCount() throws Exception {\n+        if (expectedLikeCountAtLeast() == -1) {\n+            assertEquals(-1, extractor().getLikeCount());\n+        } else {\n+            assertAtLeast(expectedLikeCountAtLeast(), extractor().getLikeCount());\n+        }\n+    }\n+\n+    @Test\n+    @Override\n+    public void testDislikeCount() throws Exception {\n+        if (expectedDislikeCountAtLeast() == -1) {\n+            assertEquals(-1, extractor().getDislikeCount());\n+        } else {\n+            assertAtLeast(expectedDislikeCountAtLeast(), extractor().getDislikeCount());\n+        }\n+    }\n+\n+    @Test\n+    @Override\n+    public void testRelatedStreams() throws Exception {\n+        final StreamInfoItemsCollector relatedStreams = extractor().getRelatedStreams();\n+\n+        if (expectedHasRelatedStreams()) {\n+            defaultTestListOfItems(extractor().getService(), relatedStreams.getItems(),\n+                    relatedStreams.getErrors());\n+        } else {\n+            assertNull(relatedStreams);\n+        }\n+    }\n+\n+    @Test\n+    @Override\n+    public void testAgeLimit() throws Exception {\n+        assertEquals(expectedAgeLimit(), extractor().getAgeLimit());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testErrorMessage() throws Exception {\n+        assertEquals(expectedErrorMessage(), extractor().getErrorMessage());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testVideoStreams() throws Exception {\n+        List<VideoStream> videoStreams = extractor().getVideoStreams();\n+        final List<VideoStream> videoOnlyStreams = extractor().getVideoOnlyStreams();\n+        assertNotNull(videoStreams);\n+        assertNotNull(videoOnlyStreams);\n+        videoStreams.addAll(videoOnlyStreams);\n+\n+        if (expectedHasVideoStreams()) {\n+            assertFalse(videoStreams.isEmpty());\n+\n+            for (VideoStream stream : videoStreams) {\n+                assertIsSecureUrl(stream.getUrl());\n+                assertFalse(stream.getResolution().isEmpty());\n+\n+                int formatId = stream.getFormatId();\n+                assertTrue(\"format id does not fit a video stream: \" + formatId,\n+                        0 <= formatId && formatId < 0x100);\n+            }\n+        } else {\n+            assertTrue(videoStreams.isEmpty());\n+        }\n+    }\n+\n+    @Test\n+    @Override\n+    public void testAudioStreams() throws Exception {\n+        final List<AudioStream> audioStreams = extractor().getAudioStreams();\n+        assertNotNull(audioStreams);\n+\n+        if (expectedHasAudioStreams()) {\n+            assertFalse(audioStreams.isEmpty());\n+\n+            for (AudioStream stream : audioStreams) {\n+                assertIsSecureUrl(stream.getUrl());\n+\n+                int formatId = stream.getFormatId();\n+                assertTrue(\"format id does not fit an audio stream: \" + formatId,\n+                        0x100 <= formatId && formatId < 0x1000);\n+            }\n+        } else {\n+            assertTrue(audioStreams.isEmpty());\n+        }\n+    }\n+\n+    @Test\n+    @Override\n+    public void testSubtitles() throws Exception {\n+        List<SubtitlesStream> subtitles = extractor().getSubtitlesDefault();", "originalCommit": "e4ace2b0dc97db6df467f41a74219776304dac6f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fa29b78f77e1e323ec0512643f3bcaaf6bd13df0", "changed_code": [{"header": "diff --git a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\nindex 0e731d4a..6c0419d5 100644\n--- a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n+++ b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n", "chunk": "@@ -240,28 +283,28 @@ public abstract class DefaultStreamExtractorTest extends DefaultExtractorTest<St\n     @Test\n     @Override\n     public void testSubtitles() throws Exception {\n-        List<SubtitlesStream> subtitles = extractor().getSubtitlesDefault();\n+        final List<SubtitlesStream> subtitles = extractor().getSubtitlesDefault();\n         assertNotNull(subtitles);\n \n         if (expectedHasSubtitles()) {\n             assertFalse(subtitles.isEmpty());\n \n-            for (SubtitlesStream stream : subtitles) {\n+            for (final SubtitlesStream stream : subtitles) {\n                 assertIsSecureUrl(stream.getUrl());\n \n-                int formatId = stream.getFormatId();\n-                assertTrue(\"format id does not fit an audio stream: \" + formatId,\n+                final int formatId = stream.getFormatId();\n+                assertTrue(\"format id does not fit a subtitles stream: \" + formatId,\n                         0x1000 <= formatId && formatId < 0x10000);\n             }\n         } else {\n             assertTrue(subtitles.isEmpty());\n \n-            MediaFormat[] formats = {MediaFormat.VTT, MediaFormat.TTML, MediaFormat.TRANSCRIPT1,\n-                    MediaFormat.TRANSCRIPT2, MediaFormat.TRANSCRIPT3, MediaFormat.SRT};\n-            for (MediaFormat format : formats) {\n-                subtitles = extractor().getSubtitles(format);\n-                assertNotNull(subtitles);\n-                assertTrue(subtitles.isEmpty());\n+            final MediaFormat[] formats = {MediaFormat.VTT, MediaFormat.TTML, MediaFormat.SRT,\n+                    MediaFormat.TRANSCRIPT1, MediaFormat.TRANSCRIPT2, MediaFormat.TRANSCRIPT3};\n+            for (final MediaFormat format : formats) {\n+                final List<SubtitlesStream> formatSubtitles = extractor().getSubtitles(format);\n+                assertNotNull(formatSubtitles);\n+                assertTrue(formatSubtitles.isEmpty());\n             }\n         }\n     }\n", "next_change": {"commit": "abbeacb312e1765afd9008cb61e6808c4544b701", "changed_code": [{"header": "diff --git a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\nindex 6c0419d5..2c495317 100644\n--- a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n+++ b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n", "chunk": "@@ -309,6 +308,18 @@ public abstract class DefaultStreamExtractorTest extends DefaultExtractorTest<St\n         }\n     }\n \n+    @Override\n+    public void testGetDashMpdUrl() throws Exception {\n+        final String dashMpdUrl = extractor().getDashMpdUrl();\n+        if (expectedDashMpdUrlContains() == null) {\n+            assertNotNull(dashMpdUrl);\n+            assertTrue(dashMpdUrl.isEmpty());\n+        } else {\n+            assertIsSecureUrl(dashMpdUrl);\n+            assertThat(extractor().getDashMpdUrl(), containsString(expectedDashMpdUrlContains()));\n+        }\n+    }\n+\n     @Test\n     @Override\n     public void testFrames() throws Exception {\n", "next_change": {"commit": "1d7a86e664717d09e33371bc87c289903b19feb2", "changed_code": [{"header": "diff --git a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\nindex 2c495317..406177f7 100644\n--- a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n+++ b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n", "chunk": "@@ -282,44 +239,32 @@ public abstract class DefaultStreamExtractorTest extends DefaultExtractorTest<St\n     @Test\n     @Override\n     public void testSubtitles() throws Exception {\n-        final List<SubtitlesStream> subtitles = extractor().getSubtitlesDefault();\n+        List<SubtitlesStream> subtitles = extractor().getSubtitlesDefault();\n         assertNotNull(subtitles);\n \n         if (expectedHasSubtitles()) {\n             assertFalse(subtitles.isEmpty());\n \n-            for (final SubtitlesStream stream : subtitles) {\n+            for (SubtitlesStream stream : subtitles) {\n                 assertIsSecureUrl(stream.getUrl());\n \n-                final int formatId = stream.getFormatId();\n-                assertTrue(\"format id does not fit a subtitles stream: \" + formatId,\n+                int formatId = stream.getFormatId();\n+                assertTrue(\"format id does not fit an audio stream: \" + formatId,\n                         0x1000 <= formatId && formatId < 0x10000);\n             }\n         } else {\n             assertTrue(subtitles.isEmpty());\n \n-            final MediaFormat[] formats = {MediaFormat.VTT, MediaFormat.TTML, MediaFormat.SRT,\n-                    MediaFormat.TRANSCRIPT1, MediaFormat.TRANSCRIPT2, MediaFormat.TRANSCRIPT3};\n-            for (final MediaFormat format : formats) {\n-                final List<SubtitlesStream> formatSubtitles = extractor().getSubtitles(format);\n-                assertNotNull(formatSubtitles);\n-                assertTrue(formatSubtitles.isEmpty());\n+            MediaFormat[] formats = {MediaFormat.VTT, MediaFormat.TTML, MediaFormat.TRANSCRIPT1,\n+                    MediaFormat.TRANSCRIPT2, MediaFormat.TRANSCRIPT3, MediaFormat.SRT};\n+            for (MediaFormat format : formats) {\n+                subtitles = extractor().getSubtitles(format);\n+                assertNotNull(subtitles);\n+                assertTrue(subtitles.isEmpty());\n             }\n         }\n     }\n \n-    @Override\n-    public void testGetDashMpdUrl() throws Exception {\n-        final String dashMpdUrl = extractor().getDashMpdUrl();\n-        if (expectedDashMpdUrlContains() == null) {\n-            assertNotNull(dashMpdUrl);\n-            assertTrue(dashMpdUrl.isEmpty());\n-        } else {\n-            assertIsSecureUrl(dashMpdUrl);\n-            assertThat(extractor().getDashMpdUrl(), containsString(expectedDashMpdUrlContains()));\n-        }\n-    }\n-\n     @Test\n     @Override\n     public void testFrames() throws Exception {\n", "next_change": {"commit": "a087b092b401977bd58b279a3f285549db0e2160", "changed_code": [{"header": "diff --git a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\nindex 406177f7..fc2ebf43 100644\n--- a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n+++ b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n", "chunk": "@@ -239,28 +239,28 @@ public abstract class DefaultStreamExtractorTest extends DefaultExtractorTest<St\n     @Test\n     @Override\n     public void testSubtitles() throws Exception {\n-        List<SubtitlesStream> subtitles = extractor().getSubtitlesDefault();\n+        final List<SubtitlesStream> subtitles = extractor().getSubtitlesDefault();\n         assertNotNull(subtitles);\n \n         if (expectedHasSubtitles()) {\n             assertFalse(subtitles.isEmpty());\n \n-            for (SubtitlesStream stream : subtitles) {\n+            for (final SubtitlesStream stream : subtitles) {\n                 assertIsSecureUrl(stream.getUrl());\n \n-                int formatId = stream.getFormatId();\n-                assertTrue(\"format id does not fit an audio stream: \" + formatId,\n+                final int formatId = stream.getFormatId();\n+                assertTrue(\"format id does not fit a subtitles stream: \" + formatId,\n                         0x1000 <= formatId && formatId < 0x10000);\n             }\n         } else {\n             assertTrue(subtitles.isEmpty());\n \n-            MediaFormat[] formats = {MediaFormat.VTT, MediaFormat.TTML, MediaFormat.TRANSCRIPT1,\n-                    MediaFormat.TRANSCRIPT2, MediaFormat.TRANSCRIPT3, MediaFormat.SRT};\n-            for (MediaFormat format : formats) {\n-                subtitles = extractor().getSubtitles(format);\n-                assertNotNull(subtitles);\n-                assertTrue(subtitles.isEmpty());\n+            final MediaFormat[] formats = {MediaFormat.VTT, MediaFormat.TTML, MediaFormat.SRT,\n+                    MediaFormat.TRANSCRIPT1, MediaFormat.TRANSCRIPT2, MediaFormat.TRANSCRIPT3};\n+            for (final MediaFormat format : formats) {\n+                final List<SubtitlesStream> formatSubtitles = extractor().getSubtitles(format);\n+                assertNotNull(formatSubtitles);\n+                assertTrue(formatSubtitles.isEmpty());\n             }\n         }\n     }\n", "next_change": {"commit": "880ff04a5c17086711c0d6d14d6aa46cf1943c54", "changed_code": [{"header": "diff --git a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\nindex fc2ebf43..8ab642d9 100644\n--- a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n+++ b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n", "chunk": "@@ -265,6 +307,18 @@ public abstract class DefaultStreamExtractorTest extends DefaultExtractorTest<St\n         }\n     }\n \n+    @Override\n+    public void testGetDashMpdUrl() throws Exception {\n+        final String dashMpdUrl = extractor().getDashMpdUrl();\n+        if (expectedDashMpdUrlContains() == null) {\n+            assertNotNull(dashMpdUrl);\n+            assertTrue(dashMpdUrl.isEmpty());\n+        } else {\n+            assertIsSecureUrl(dashMpdUrl);\n+            assertThat(extractor().getDashMpdUrl(), containsString(expectedDashMpdUrlContains()));\n+        }\n+    }\n+\n     @Test\n     @Override\n     public void testFrames() throws Exception {\n", "next_change": null}]}}]}}]}}]}}]}, "revised_code_in_main": {"commit": "14c0c37d64883e795445bc8bd878df33ad6bdb9d", "changed_code": [{"header": "diff --git a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\nindex 0e731d4a..a70b38a8 100644\n--- a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n+++ b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n", "chunk": "@@ -240,32 +283,45 @@ public abstract class DefaultStreamExtractorTest extends DefaultExtractorTest<St\n     @Test\n     @Override\n     public void testSubtitles() throws Exception {\n-        List<SubtitlesStream> subtitles = extractor().getSubtitlesDefault();\n+        final List<SubtitlesStream> subtitles = extractor().getSubtitlesDefault();\n         assertNotNull(subtitles);\n \n         if (expectedHasSubtitles()) {\n             assertFalse(subtitles.isEmpty());\n \n-            for (SubtitlesStream stream : subtitles) {\n+            for (final SubtitlesStream stream : subtitles) {\n                 assertIsSecureUrl(stream.getUrl());\n \n-                int formatId = stream.getFormatId();\n-                assertTrue(\"format id does not fit an audio stream: \" + formatId,\n+                final int formatId = stream.getFormatId();\n+                // see MediaFormat: video stream formats range from 0x1000 to 0x10000\n+                assertTrue(\"format id does not fit a subtitles stream: \" + formatId,\n                         0x1000 <= formatId && formatId < 0x10000);\n             }\n         } else {\n             assertTrue(subtitles.isEmpty());\n \n-            MediaFormat[] formats = {MediaFormat.VTT, MediaFormat.TTML, MediaFormat.TRANSCRIPT1,\n-                    MediaFormat.TRANSCRIPT2, MediaFormat.TRANSCRIPT3, MediaFormat.SRT};\n-            for (MediaFormat format : formats) {\n-                subtitles = extractor().getSubtitles(format);\n-                assertNotNull(subtitles);\n-                assertTrue(subtitles.isEmpty());\n+            final MediaFormat[] formats = {MediaFormat.VTT, MediaFormat.TTML, MediaFormat.SRT,\n+                    MediaFormat.TRANSCRIPT1, MediaFormat.TRANSCRIPT2, MediaFormat.TRANSCRIPT3};\n+            for (final MediaFormat format : formats) {\n+                final List<SubtitlesStream> formatSubtitles = extractor().getSubtitles(format);\n+                assertNotNull(formatSubtitles);\n+                assertTrue(formatSubtitles.isEmpty());\n             }\n         }\n     }\n \n+    @Override\n+    public void testGetDashMpdUrl() throws Exception {\n+        final String dashMpdUrl = extractor().getDashMpdUrl();\n+        if (expectedDashMpdUrlContains() == null) {\n+            assertNotNull(dashMpdUrl);\n+            assertTrue(dashMpdUrl.isEmpty());\n+        } else {\n+            assertIsSecureUrl(dashMpdUrl);\n+            assertThat(extractor().getDashMpdUrl(), containsString(expectedDashMpdUrlContains()));\n+        }\n+    }\n+\n     @Test\n     @Override\n     public void testFrames() throws Exception {\n", "next_change": {"commit": "a2cbdf0991d6cf4154d905fbdd2b5a2c1c6f758c", "changed_code": [{"header": "diff --git a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\nindex a70b38a8..c7c8ecd4 100644\n--- a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n+++ b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n", "chunk": "@@ -318,7 +333,7 @@ public abstract class DefaultStreamExtractorTest extends DefaultExtractorTest<St\n             assertTrue(dashMpdUrl.isEmpty());\n         } else {\n             assertIsSecureUrl(dashMpdUrl);\n-            assertThat(extractor().getDashMpdUrl(), containsString(expectedDashMpdUrlContains()));\n+            ExtractorAsserts.assertContains(expectedDashMpdUrlContains(), extractor().getDashMpdUrl());\n         }\n     }\n \n", "next_change": {"commit": "f6ec7f9a6120064fdf7348ff13e1adfbcab8492f", "changed_code": [{"header": "diff --git a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\nindex c7c8ecd4..d9b4e6cd 100644\n--- a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n+++ b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n", "chunk": "@@ -333,7 +358,8 @@ public abstract class DefaultStreamExtractorTest extends DefaultExtractorTest<St\n             assertTrue(dashMpdUrl.isEmpty());\n         } else {\n             assertIsSecureUrl(dashMpdUrl);\n-            ExtractorAsserts.assertContains(expectedDashMpdUrlContains(), extractor().getDashMpdUrl());\n+            ExtractorAsserts.assertContains(expectedDashMpdUrlContains(),\n+                    extractor().getDashMpdUrl());\n         }\n     }\n \n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "14c0c37d64883e795445bc8bd878df33ad6bdb9d", "message": "Merge commit", "committedDate": null}, {"oid": "4f04cfcccaaf49bb5362bb7a02f6450c446934b6", "committedDate": "2020-11-01 06:28:54 +0530", "message": "Switch from Calendar to OffsetDateTime in DateWrapper."}, {"oid": "827f7bd13750b29e2382c6681f23b707f76e5f33", "committedDate": "2020-11-04 16:02:12 +0100", "message": "[YouTube] Cache deobfuscation and improve requests made"}, {"oid": "9a7a224a545e0dd5036b14e7e7a83e923be03d6a", "committedDate": "2020-12-12 10:24:55 +0100", "message": "Add tests for stream segments"}, {"oid": "bc6de149527fabb235068bfed538194316054ddb", "committedDate": "2020-12-22 18:19:26 +0100", "message": "Extract stream and search meta info for YouTube"}, {"oid": "11dcfe638b994fc30db3589fc1aaf273ab241362", "committedDate": "2021-01-14 20:01:06 +0100", "message": "Add durationPerFrame to Frameset and getFrameBoundsAt method"}, {"oid": "1a322ad8edcf54e90f84d236fbe6dce1a9d8ae47", "committedDate": "2021-02-18 16:36:40 +0100", "message": "Add uploader verified by service extraction"}, {"oid": "21158744b1abbe17d85ebcee61f2e12068c4c375", "committedDate": "2021-03-05 16:38:46 +0100", "message": "Add expectedDescriptionIsEmpty() to DefaultStreamExtractorTest"}, {"oid": "c47cc54908d14d3faa6326e62cb8c8add9463df2", "committedDate": "2021-03-19 10:14:43 +0100", "message": "Extract metadata for YouTube, SoundCloud & MediaCCC"}, {"oid": "14f6f1b7c3d4a98ac0a74a9f6d16b05cb96c0c91", "committedDate": "2021-03-31 20:24:40 +0200", "message": "Generify related streams calls and rename method"}, {"oid": "a2cbdf0991d6cf4154d905fbdd2b5a2c1c6f758c", "committedDate": "2021-12-27 21:08:08 +0100", "message": "Updated to JUnit 5"}, {"oid": "3712a669b1d1759e68a0309594cbc77449cd2e64", "committedDate": "2022-01-04 17:28:31 +0100", "message": "Code cleanup / improvements"}, {"oid": "6f3f608ab651574999a169cd506428ded9eac491", "committedDate": "2022-02-24 12:50:51 +0000", "message": "Add support for extracting channel subscriber count in StreamInfo."}, {"oid": "5b0ec694a638cdbca038a76ad4bcae6daf6b37d6", "committedDate": "2022-02-24 12:50:51 +0000", "message": "Add requested changes."}, {"oid": "f6ec7f9a6120064fdf7348ff13e1adfbcab8492f", "committedDate": "2022-05-28 12:00:45 +0200", "message": "Update DefaultStreamExtractorTest and SoundcloudStreamExtractorTest to support changes made in Stream classes"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA3MjU3NQ==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/309#discussion_r425072575", "body": "`final`", "bodyText": "final", "bodyHTML": "<p dir=\"auto\"><code>final</code></p>", "author": "wb9688", "createdAt": "2020-05-14T11:42:21Z", "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java", "diffHunk": "@@ -0,0 +1,297 @@\n+package org.schabi.newpipe.extractor.services;\n+\n+import org.junit.Test;\n+import org.schabi.newpipe.extractor.MediaFormat;\n+import org.schabi.newpipe.extractor.localization.DateWrapper;\n+import org.schabi.newpipe.extractor.stream.AudioStream;\n+import org.schabi.newpipe.extractor.stream.Description;\n+import org.schabi.newpipe.extractor.stream.Frameset;\n+import org.schabi.newpipe.extractor.stream.StreamExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemsCollector;\n+import org.schabi.newpipe.extractor.stream.StreamType;\n+import org.schabi.newpipe.extractor.stream.SubtitlesStream;\n+import org.schabi.newpipe.extractor.stream.VideoStream;\n+\n+import java.text.SimpleDateFormat;\n+import java.util.Calendar;\n+import java.util.List;\n+import java.util.TimeZone;\n+\n+import javax.annotation.Nullable;\n+\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.assertTrue;\n+import static org.schabi.newpipe.extractor.ExtractorAsserts.assertAtLeast;\n+import static org.schabi.newpipe.extractor.ExtractorAsserts.assertIsSecureUrl;\n+import static org.schabi.newpipe.extractor.ExtractorAsserts.assertIsValidUrl;\n+import static org.schabi.newpipe.extractor.services.DefaultTests.defaultTestListOfItems;\n+\n+/**\n+ * Test for {@link StreamExtractor}\n+ */\n+public abstract class DefaultStreamExtractorTest extends DefaultExtractorTest<StreamExtractor>\n+        implements BaseStreamExtractorTest {\n+\n+    public abstract StreamType expectedStreamType();\n+    public abstract String expectedUploaderName();\n+    public abstract String expectedUploaderUrl();\n+    public abstract List<String> expectedDescriptionContains(); // e.g. for full links\n+    public abstract long expectedLength();\n+    public long expectedTimestamp() { return 0; }; // default: there is no timestamp\n+    public abstract long expectedViewCountAtLeast();\n+    @Nullable public abstract String expectedUploadDate(); // format: \"yyyy-MM-dd HH:mm:ss.SSS\"\n+    @Nullable public abstract String expectedTextualUploadDate();\n+    public abstract long expectedLikeCountAtLeast(); // return -1 if ratings are disabled\n+    public abstract long expectedDislikeCountAtLeast(); // return -1 if ratings are disabled\n+    public boolean expectedHasRelatedStreams() { return true; } // default: there are related videos\n+    public int expectedAgeLimit() { return StreamExtractor.NO_AGE_LIMIT; } // default: no limit\n+    @Nullable public String expectedErrorMessage() { return null; } // default: no error message\n+    public boolean expectedHasVideoStreams() { return true; } // default: there are video streams\n+    public boolean expectedHasAudioStreams() { return true; } // default: there are audio streams\n+    public boolean expectedHasSubtitles() { return true; } // default: there are subtitles streams\n+    public boolean expectedHasFrames() { return true; } // default: there are frames\n+    public boolean expectedHasNextStream() { return true; } // default: there is a next video\n+\n+    @Test\n+    @Override\n+    public void testStreamType() throws Exception {\n+        assertEquals(expectedStreamType(), extractor().getStreamType());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testUploaderName() throws Exception {\n+        assertEquals(expectedUploaderName(), extractor().getUploaderName());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testUploaderUrl() throws Exception {\n+        final String uploaderUrl = extractor().getUploaderUrl();\n+        assertIsSecureUrl(uploaderUrl);\n+        assertEquals(expectedUploaderUrl(), uploaderUrl);\n+    }\n+\n+    @Test\n+    @Override\n+    public void testUploaderAvatarUrl() throws Exception {\n+        assertIsSecureUrl(extractor().getUploaderAvatarUrl());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testThumbnailUrl() throws Exception {\n+        assertIsSecureUrl(extractor().getThumbnailUrl());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testDescription() throws Exception {\n+        final Description description = extractor().getDescription();\n+        assertNotNull(description);\n+        assertFalse(\"description is empty\", description.getContent().isEmpty());\n+\n+        for (String s : expectedDescriptionContains()) {\n+            assertThat(description.getContent(), containsString(s));\n+        }\n+    }\n+\n+    @Test\n+    @Override\n+    public void testLength() throws Exception {\n+        assertEquals(expectedLength(), extractor().getLength());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testTimestamp() throws Exception {\n+        assertEquals(expectedTimestamp(), extractor().getTimeStamp());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testViewCount() throws Exception {\n+        assertAtLeast(expectedViewCountAtLeast(), extractor().getViewCount());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testUploadDate() throws Exception {\n+        final DateWrapper dateWrapper = extractor().getUploadDate();\n+\n+        if (expectedUploadDate() == null) {\n+            assertNull(dateWrapper);\n+        } else {\n+            assertNotNull(dateWrapper);\n+\n+            final Calendar expectedDate = Calendar.getInstance();\n+            final Calendar actualDate = dateWrapper.date();\n+            expectedDate.setTimeZone(TimeZone.getTimeZone(\"GMT\"));\n+            actualDate.setTimeZone(TimeZone.getTimeZone(\"GMT\"));\n+\n+            final SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.S\");\n+            expectedDate.setTime(sdf.parse(expectedUploadDate()));\n+            assertEquals(expectedDate, actualDate);\n+        }\n+    }\n+\n+    @Test\n+    @Override\n+    public void testTextualUploadDate() throws Exception {\n+        assertEquals(expectedTextualUploadDate(), extractor().getTextualUploadDate());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testLikeCount() throws Exception {\n+        if (expectedLikeCountAtLeast() == -1) {\n+            assertEquals(-1, extractor().getLikeCount());\n+        } else {\n+            assertAtLeast(expectedLikeCountAtLeast(), extractor().getLikeCount());\n+        }\n+    }\n+\n+    @Test\n+    @Override\n+    public void testDislikeCount() throws Exception {\n+        if (expectedDislikeCountAtLeast() == -1) {\n+            assertEquals(-1, extractor().getDislikeCount());\n+        } else {\n+            assertAtLeast(expectedDislikeCountAtLeast(), extractor().getDislikeCount());\n+        }\n+    }\n+\n+    @Test\n+    @Override\n+    public void testRelatedStreams() throws Exception {\n+        final StreamInfoItemsCollector relatedStreams = extractor().getRelatedStreams();\n+\n+        if (expectedHasRelatedStreams()) {\n+            defaultTestListOfItems(extractor().getService(), relatedStreams.getItems(),\n+                    relatedStreams.getErrors());\n+        } else {\n+            assertNull(relatedStreams);\n+        }\n+    }\n+\n+    @Test\n+    @Override\n+    public void testAgeLimit() throws Exception {\n+        assertEquals(expectedAgeLimit(), extractor().getAgeLimit());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testErrorMessage() throws Exception {\n+        assertEquals(expectedErrorMessage(), extractor().getErrorMessage());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testVideoStreams() throws Exception {\n+        List<VideoStream> videoStreams = extractor().getVideoStreams();\n+        final List<VideoStream> videoOnlyStreams = extractor().getVideoOnlyStreams();\n+        assertNotNull(videoStreams);\n+        assertNotNull(videoOnlyStreams);\n+        videoStreams.addAll(videoOnlyStreams);\n+\n+        if (expectedHasVideoStreams()) {\n+            assertFalse(videoStreams.isEmpty());\n+\n+            for (VideoStream stream : videoStreams) {\n+                assertIsSecureUrl(stream.getUrl());\n+                assertFalse(stream.getResolution().isEmpty());\n+\n+                int formatId = stream.getFormatId();\n+                assertTrue(\"format id does not fit a video stream: \" + formatId,\n+                        0 <= formatId && formatId < 0x100);\n+            }\n+        } else {\n+            assertTrue(videoStreams.isEmpty());\n+        }\n+    }\n+\n+    @Test\n+    @Override\n+    public void testAudioStreams() throws Exception {\n+        final List<AudioStream> audioStreams = extractor().getAudioStreams();\n+        assertNotNull(audioStreams);\n+\n+        if (expectedHasAudioStreams()) {\n+            assertFalse(audioStreams.isEmpty());\n+\n+            for (AudioStream stream : audioStreams) {\n+                assertIsSecureUrl(stream.getUrl());\n+\n+                int formatId = stream.getFormatId();\n+                assertTrue(\"format id does not fit an audio stream: \" + formatId,\n+                        0x100 <= formatId && formatId < 0x1000);\n+            }\n+        } else {\n+            assertTrue(audioStreams.isEmpty());\n+        }\n+    }\n+\n+    @Test\n+    @Override\n+    public void testSubtitles() throws Exception {\n+        List<SubtitlesStream> subtitles = extractor().getSubtitlesDefault();\n+        assertNotNull(subtitles);\n+\n+        if (expectedHasSubtitles()) {\n+            assertFalse(subtitles.isEmpty());\n+\n+            for (SubtitlesStream stream : subtitles) {\n+                assertIsSecureUrl(stream.getUrl());\n+\n+                int formatId = stream.getFormatId();", "originalCommit": "e4ace2b0dc97db6df467f41a74219776304dac6f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fa29b78f77e1e323ec0512643f3bcaaf6bd13df0", "changed_code": [{"header": "diff --git a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\nindex 0e731d4a..6c0419d5 100644\n--- a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n+++ b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n", "chunk": "@@ -240,28 +283,28 @@ public abstract class DefaultStreamExtractorTest extends DefaultExtractorTest<St\n     @Test\n     @Override\n     public void testSubtitles() throws Exception {\n-        List<SubtitlesStream> subtitles = extractor().getSubtitlesDefault();\n+        final List<SubtitlesStream> subtitles = extractor().getSubtitlesDefault();\n         assertNotNull(subtitles);\n \n         if (expectedHasSubtitles()) {\n             assertFalse(subtitles.isEmpty());\n \n-            for (SubtitlesStream stream : subtitles) {\n+            for (final SubtitlesStream stream : subtitles) {\n                 assertIsSecureUrl(stream.getUrl());\n \n-                int formatId = stream.getFormatId();\n-                assertTrue(\"format id does not fit an audio stream: \" + formatId,\n+                final int formatId = stream.getFormatId();\n+                assertTrue(\"format id does not fit a subtitles stream: \" + formatId,\n                         0x1000 <= formatId && formatId < 0x10000);\n             }\n         } else {\n             assertTrue(subtitles.isEmpty());\n \n-            MediaFormat[] formats = {MediaFormat.VTT, MediaFormat.TTML, MediaFormat.TRANSCRIPT1,\n-                    MediaFormat.TRANSCRIPT2, MediaFormat.TRANSCRIPT3, MediaFormat.SRT};\n-            for (MediaFormat format : formats) {\n-                subtitles = extractor().getSubtitles(format);\n-                assertNotNull(subtitles);\n-                assertTrue(subtitles.isEmpty());\n+            final MediaFormat[] formats = {MediaFormat.VTT, MediaFormat.TTML, MediaFormat.SRT,\n+                    MediaFormat.TRANSCRIPT1, MediaFormat.TRANSCRIPT2, MediaFormat.TRANSCRIPT3};\n+            for (final MediaFormat format : formats) {\n+                final List<SubtitlesStream> formatSubtitles = extractor().getSubtitles(format);\n+                assertNotNull(formatSubtitles);\n+                assertTrue(formatSubtitles.isEmpty());\n             }\n         }\n     }\n", "next_change": {"commit": "abbeacb312e1765afd9008cb61e6808c4544b701", "changed_code": [{"header": "diff --git a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\nindex 6c0419d5..2c495317 100644\n--- a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n+++ b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n", "chunk": "@@ -309,6 +308,18 @@ public abstract class DefaultStreamExtractorTest extends DefaultExtractorTest<St\n         }\n     }\n \n+    @Override\n+    public void testGetDashMpdUrl() throws Exception {\n+        final String dashMpdUrl = extractor().getDashMpdUrl();\n+        if (expectedDashMpdUrlContains() == null) {\n+            assertNotNull(dashMpdUrl);\n+            assertTrue(dashMpdUrl.isEmpty());\n+        } else {\n+            assertIsSecureUrl(dashMpdUrl);\n+            assertThat(extractor().getDashMpdUrl(), containsString(expectedDashMpdUrlContains()));\n+        }\n+    }\n+\n     @Test\n     @Override\n     public void testFrames() throws Exception {\n", "next_change": {"commit": "1d7a86e664717d09e33371bc87c289903b19feb2", "changed_code": [{"header": "diff --git a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\nindex 2c495317..406177f7 100644\n--- a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n+++ b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n", "chunk": "@@ -282,44 +239,32 @@ public abstract class DefaultStreamExtractorTest extends DefaultExtractorTest<St\n     @Test\n     @Override\n     public void testSubtitles() throws Exception {\n-        final List<SubtitlesStream> subtitles = extractor().getSubtitlesDefault();\n+        List<SubtitlesStream> subtitles = extractor().getSubtitlesDefault();\n         assertNotNull(subtitles);\n \n         if (expectedHasSubtitles()) {\n             assertFalse(subtitles.isEmpty());\n \n-            for (final SubtitlesStream stream : subtitles) {\n+            for (SubtitlesStream stream : subtitles) {\n                 assertIsSecureUrl(stream.getUrl());\n \n-                final int formatId = stream.getFormatId();\n-                assertTrue(\"format id does not fit a subtitles stream: \" + formatId,\n+                int formatId = stream.getFormatId();\n+                assertTrue(\"format id does not fit an audio stream: \" + formatId,\n                         0x1000 <= formatId && formatId < 0x10000);\n             }\n         } else {\n             assertTrue(subtitles.isEmpty());\n \n-            final MediaFormat[] formats = {MediaFormat.VTT, MediaFormat.TTML, MediaFormat.SRT,\n-                    MediaFormat.TRANSCRIPT1, MediaFormat.TRANSCRIPT2, MediaFormat.TRANSCRIPT3};\n-            for (final MediaFormat format : formats) {\n-                final List<SubtitlesStream> formatSubtitles = extractor().getSubtitles(format);\n-                assertNotNull(formatSubtitles);\n-                assertTrue(formatSubtitles.isEmpty());\n+            MediaFormat[] formats = {MediaFormat.VTT, MediaFormat.TTML, MediaFormat.TRANSCRIPT1,\n+                    MediaFormat.TRANSCRIPT2, MediaFormat.TRANSCRIPT3, MediaFormat.SRT};\n+            for (MediaFormat format : formats) {\n+                subtitles = extractor().getSubtitles(format);\n+                assertNotNull(subtitles);\n+                assertTrue(subtitles.isEmpty());\n             }\n         }\n     }\n \n-    @Override\n-    public void testGetDashMpdUrl() throws Exception {\n-        final String dashMpdUrl = extractor().getDashMpdUrl();\n-        if (expectedDashMpdUrlContains() == null) {\n-            assertNotNull(dashMpdUrl);\n-            assertTrue(dashMpdUrl.isEmpty());\n-        } else {\n-            assertIsSecureUrl(dashMpdUrl);\n-            assertThat(extractor().getDashMpdUrl(), containsString(expectedDashMpdUrlContains()));\n-        }\n-    }\n-\n     @Test\n     @Override\n     public void testFrames() throws Exception {\n", "next_change": {"commit": "a087b092b401977bd58b279a3f285549db0e2160", "changed_code": [{"header": "diff --git a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\nindex 406177f7..fc2ebf43 100644\n--- a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n+++ b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n", "chunk": "@@ -239,28 +239,28 @@ public abstract class DefaultStreamExtractorTest extends DefaultExtractorTest<St\n     @Test\n     @Override\n     public void testSubtitles() throws Exception {\n-        List<SubtitlesStream> subtitles = extractor().getSubtitlesDefault();\n+        final List<SubtitlesStream> subtitles = extractor().getSubtitlesDefault();\n         assertNotNull(subtitles);\n \n         if (expectedHasSubtitles()) {\n             assertFalse(subtitles.isEmpty());\n \n-            for (SubtitlesStream stream : subtitles) {\n+            for (final SubtitlesStream stream : subtitles) {\n                 assertIsSecureUrl(stream.getUrl());\n \n-                int formatId = stream.getFormatId();\n-                assertTrue(\"format id does not fit an audio stream: \" + formatId,\n+                final int formatId = stream.getFormatId();\n+                assertTrue(\"format id does not fit a subtitles stream: \" + formatId,\n                         0x1000 <= formatId && formatId < 0x10000);\n             }\n         } else {\n             assertTrue(subtitles.isEmpty());\n \n-            MediaFormat[] formats = {MediaFormat.VTT, MediaFormat.TTML, MediaFormat.TRANSCRIPT1,\n-                    MediaFormat.TRANSCRIPT2, MediaFormat.TRANSCRIPT3, MediaFormat.SRT};\n-            for (MediaFormat format : formats) {\n-                subtitles = extractor().getSubtitles(format);\n-                assertNotNull(subtitles);\n-                assertTrue(subtitles.isEmpty());\n+            final MediaFormat[] formats = {MediaFormat.VTT, MediaFormat.TTML, MediaFormat.SRT,\n+                    MediaFormat.TRANSCRIPT1, MediaFormat.TRANSCRIPT2, MediaFormat.TRANSCRIPT3};\n+            for (final MediaFormat format : formats) {\n+                final List<SubtitlesStream> formatSubtitles = extractor().getSubtitles(format);\n+                assertNotNull(formatSubtitles);\n+                assertTrue(formatSubtitles.isEmpty());\n             }\n         }\n     }\n", "next_change": {"commit": "880ff04a5c17086711c0d6d14d6aa46cf1943c54", "changed_code": [{"header": "diff --git a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\nindex fc2ebf43..8ab642d9 100644\n--- a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n+++ b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n", "chunk": "@@ -265,6 +307,18 @@ public abstract class DefaultStreamExtractorTest extends DefaultExtractorTest<St\n         }\n     }\n \n+    @Override\n+    public void testGetDashMpdUrl() throws Exception {\n+        final String dashMpdUrl = extractor().getDashMpdUrl();\n+        if (expectedDashMpdUrlContains() == null) {\n+            assertNotNull(dashMpdUrl);\n+            assertTrue(dashMpdUrl.isEmpty());\n+        } else {\n+            assertIsSecureUrl(dashMpdUrl);\n+            assertThat(extractor().getDashMpdUrl(), containsString(expectedDashMpdUrlContains()));\n+        }\n+    }\n+\n     @Test\n     @Override\n     public void testFrames() throws Exception {\n", "next_change": null}]}}]}}]}}]}}]}, "revised_code_in_main": {"commit": "14c0c37d64883e795445bc8bd878df33ad6bdb9d", "changed_code": [{"header": "diff --git a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\nindex 0e731d4a..a70b38a8 100644\n--- a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n+++ b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n", "chunk": "@@ -240,32 +283,45 @@ public abstract class DefaultStreamExtractorTest extends DefaultExtractorTest<St\n     @Test\n     @Override\n     public void testSubtitles() throws Exception {\n-        List<SubtitlesStream> subtitles = extractor().getSubtitlesDefault();\n+        final List<SubtitlesStream> subtitles = extractor().getSubtitlesDefault();\n         assertNotNull(subtitles);\n \n         if (expectedHasSubtitles()) {\n             assertFalse(subtitles.isEmpty());\n \n-            for (SubtitlesStream stream : subtitles) {\n+            for (final SubtitlesStream stream : subtitles) {\n                 assertIsSecureUrl(stream.getUrl());\n \n-                int formatId = stream.getFormatId();\n-                assertTrue(\"format id does not fit an audio stream: \" + formatId,\n+                final int formatId = stream.getFormatId();\n+                // see MediaFormat: video stream formats range from 0x1000 to 0x10000\n+                assertTrue(\"format id does not fit a subtitles stream: \" + formatId,\n                         0x1000 <= formatId && formatId < 0x10000);\n             }\n         } else {\n             assertTrue(subtitles.isEmpty());\n \n-            MediaFormat[] formats = {MediaFormat.VTT, MediaFormat.TTML, MediaFormat.TRANSCRIPT1,\n-                    MediaFormat.TRANSCRIPT2, MediaFormat.TRANSCRIPT3, MediaFormat.SRT};\n-            for (MediaFormat format : formats) {\n-                subtitles = extractor().getSubtitles(format);\n-                assertNotNull(subtitles);\n-                assertTrue(subtitles.isEmpty());\n+            final MediaFormat[] formats = {MediaFormat.VTT, MediaFormat.TTML, MediaFormat.SRT,\n+                    MediaFormat.TRANSCRIPT1, MediaFormat.TRANSCRIPT2, MediaFormat.TRANSCRIPT3};\n+            for (final MediaFormat format : formats) {\n+                final List<SubtitlesStream> formatSubtitles = extractor().getSubtitles(format);\n+                assertNotNull(formatSubtitles);\n+                assertTrue(formatSubtitles.isEmpty());\n             }\n         }\n     }\n \n+    @Override\n+    public void testGetDashMpdUrl() throws Exception {\n+        final String dashMpdUrl = extractor().getDashMpdUrl();\n+        if (expectedDashMpdUrlContains() == null) {\n+            assertNotNull(dashMpdUrl);\n+            assertTrue(dashMpdUrl.isEmpty());\n+        } else {\n+            assertIsSecureUrl(dashMpdUrl);\n+            assertThat(extractor().getDashMpdUrl(), containsString(expectedDashMpdUrlContains()));\n+        }\n+    }\n+\n     @Test\n     @Override\n     public void testFrames() throws Exception {\n", "next_change": {"commit": "a2cbdf0991d6cf4154d905fbdd2b5a2c1c6f758c", "changed_code": [{"header": "diff --git a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\nindex a70b38a8..c7c8ecd4 100644\n--- a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n+++ b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n", "chunk": "@@ -318,7 +333,7 @@ public abstract class DefaultStreamExtractorTest extends DefaultExtractorTest<St\n             assertTrue(dashMpdUrl.isEmpty());\n         } else {\n             assertIsSecureUrl(dashMpdUrl);\n-            assertThat(extractor().getDashMpdUrl(), containsString(expectedDashMpdUrlContains()));\n+            ExtractorAsserts.assertContains(expectedDashMpdUrlContains(), extractor().getDashMpdUrl());\n         }\n     }\n \n", "next_change": {"commit": "f6ec7f9a6120064fdf7348ff13e1adfbcab8492f", "changed_code": [{"header": "diff --git a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\nindex c7c8ecd4..d9b4e6cd 100644\n--- a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n+++ b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n", "chunk": "@@ -333,7 +358,8 @@ public abstract class DefaultStreamExtractorTest extends DefaultExtractorTest<St\n             assertTrue(dashMpdUrl.isEmpty());\n         } else {\n             assertIsSecureUrl(dashMpdUrl);\n-            ExtractorAsserts.assertContains(expectedDashMpdUrlContains(), extractor().getDashMpdUrl());\n+            ExtractorAsserts.assertContains(expectedDashMpdUrlContains(),\n+                    extractor().getDashMpdUrl());\n         }\n     }\n \n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "14c0c37d64883e795445bc8bd878df33ad6bdb9d", "message": "Merge commit", "committedDate": null}, {"oid": "4f04cfcccaaf49bb5362bb7a02f6450c446934b6", "committedDate": "2020-11-01 06:28:54 +0530", "message": "Switch from Calendar to OffsetDateTime in DateWrapper."}, {"oid": "827f7bd13750b29e2382c6681f23b707f76e5f33", "committedDate": "2020-11-04 16:02:12 +0100", "message": "[YouTube] Cache deobfuscation and improve requests made"}, {"oid": "9a7a224a545e0dd5036b14e7e7a83e923be03d6a", "committedDate": "2020-12-12 10:24:55 +0100", "message": "Add tests for stream segments"}, {"oid": "bc6de149527fabb235068bfed538194316054ddb", "committedDate": "2020-12-22 18:19:26 +0100", "message": "Extract stream and search meta info for YouTube"}, {"oid": "11dcfe638b994fc30db3589fc1aaf273ab241362", "committedDate": "2021-01-14 20:01:06 +0100", "message": "Add durationPerFrame to Frameset and getFrameBoundsAt method"}, {"oid": "1a322ad8edcf54e90f84d236fbe6dce1a9d8ae47", "committedDate": "2021-02-18 16:36:40 +0100", "message": "Add uploader verified by service extraction"}, {"oid": "21158744b1abbe17d85ebcee61f2e12068c4c375", "committedDate": "2021-03-05 16:38:46 +0100", "message": "Add expectedDescriptionIsEmpty() to DefaultStreamExtractorTest"}, {"oid": "c47cc54908d14d3faa6326e62cb8c8add9463df2", "committedDate": "2021-03-19 10:14:43 +0100", "message": "Extract metadata for YouTube, SoundCloud & MediaCCC"}, {"oid": "14f6f1b7c3d4a98ac0a74a9f6d16b05cb96c0c91", "committedDate": "2021-03-31 20:24:40 +0200", "message": "Generify related streams calls and rename method"}, {"oid": "a2cbdf0991d6cf4154d905fbdd2b5a2c1c6f758c", "committedDate": "2021-12-27 21:08:08 +0100", "message": "Updated to JUnit 5"}, {"oid": "3712a669b1d1759e68a0309594cbc77449cd2e64", "committedDate": "2022-01-04 17:28:31 +0100", "message": "Code cleanup / improvements"}, {"oid": "6f3f608ab651574999a169cd506428ded9eac491", "committedDate": "2022-02-24 12:50:51 +0000", "message": "Add support for extracting channel subscriber count in StreamInfo."}, {"oid": "5b0ec694a638cdbca038a76ad4bcae6daf6b37d6", "committedDate": "2022-02-24 12:50:51 +0000", "message": "Add requested changes."}, {"oid": "f6ec7f9a6120064fdf7348ff13e1adfbcab8492f", "committedDate": "2022-05-28 12:00:45 +0200", "message": "Update DefaultStreamExtractorTest and SoundcloudStreamExtractorTest to support changes made in Stream classes"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA3MjYxNA==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/309#discussion_r425072614", "body": "`final`", "bodyText": "final", "bodyHTML": "<p dir=\"auto\"><code>final</code></p>", "author": "wb9688", "createdAt": "2020-05-14T11:42:26Z", "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java", "diffHunk": "@@ -0,0 +1,297 @@\n+package org.schabi.newpipe.extractor.services;\n+\n+import org.junit.Test;\n+import org.schabi.newpipe.extractor.MediaFormat;\n+import org.schabi.newpipe.extractor.localization.DateWrapper;\n+import org.schabi.newpipe.extractor.stream.AudioStream;\n+import org.schabi.newpipe.extractor.stream.Description;\n+import org.schabi.newpipe.extractor.stream.Frameset;\n+import org.schabi.newpipe.extractor.stream.StreamExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemsCollector;\n+import org.schabi.newpipe.extractor.stream.StreamType;\n+import org.schabi.newpipe.extractor.stream.SubtitlesStream;\n+import org.schabi.newpipe.extractor.stream.VideoStream;\n+\n+import java.text.SimpleDateFormat;\n+import java.util.Calendar;\n+import java.util.List;\n+import java.util.TimeZone;\n+\n+import javax.annotation.Nullable;\n+\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.assertTrue;\n+import static org.schabi.newpipe.extractor.ExtractorAsserts.assertAtLeast;\n+import static org.schabi.newpipe.extractor.ExtractorAsserts.assertIsSecureUrl;\n+import static org.schabi.newpipe.extractor.ExtractorAsserts.assertIsValidUrl;\n+import static org.schabi.newpipe.extractor.services.DefaultTests.defaultTestListOfItems;\n+\n+/**\n+ * Test for {@link StreamExtractor}\n+ */\n+public abstract class DefaultStreamExtractorTest extends DefaultExtractorTest<StreamExtractor>\n+        implements BaseStreamExtractorTest {\n+\n+    public abstract StreamType expectedStreamType();\n+    public abstract String expectedUploaderName();\n+    public abstract String expectedUploaderUrl();\n+    public abstract List<String> expectedDescriptionContains(); // e.g. for full links\n+    public abstract long expectedLength();\n+    public long expectedTimestamp() { return 0; }; // default: there is no timestamp\n+    public abstract long expectedViewCountAtLeast();\n+    @Nullable public abstract String expectedUploadDate(); // format: \"yyyy-MM-dd HH:mm:ss.SSS\"\n+    @Nullable public abstract String expectedTextualUploadDate();\n+    public abstract long expectedLikeCountAtLeast(); // return -1 if ratings are disabled\n+    public abstract long expectedDislikeCountAtLeast(); // return -1 if ratings are disabled\n+    public boolean expectedHasRelatedStreams() { return true; } // default: there are related videos\n+    public int expectedAgeLimit() { return StreamExtractor.NO_AGE_LIMIT; } // default: no limit\n+    @Nullable public String expectedErrorMessage() { return null; } // default: no error message\n+    public boolean expectedHasVideoStreams() { return true; } // default: there are video streams\n+    public boolean expectedHasAudioStreams() { return true; } // default: there are audio streams\n+    public boolean expectedHasSubtitles() { return true; } // default: there are subtitles streams\n+    public boolean expectedHasFrames() { return true; } // default: there are frames\n+    public boolean expectedHasNextStream() { return true; } // default: there is a next video\n+\n+    @Test\n+    @Override\n+    public void testStreamType() throws Exception {\n+        assertEquals(expectedStreamType(), extractor().getStreamType());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testUploaderName() throws Exception {\n+        assertEquals(expectedUploaderName(), extractor().getUploaderName());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testUploaderUrl() throws Exception {\n+        final String uploaderUrl = extractor().getUploaderUrl();\n+        assertIsSecureUrl(uploaderUrl);\n+        assertEquals(expectedUploaderUrl(), uploaderUrl);\n+    }\n+\n+    @Test\n+    @Override\n+    public void testUploaderAvatarUrl() throws Exception {\n+        assertIsSecureUrl(extractor().getUploaderAvatarUrl());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testThumbnailUrl() throws Exception {\n+        assertIsSecureUrl(extractor().getThumbnailUrl());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testDescription() throws Exception {\n+        final Description description = extractor().getDescription();\n+        assertNotNull(description);\n+        assertFalse(\"description is empty\", description.getContent().isEmpty());\n+\n+        for (String s : expectedDescriptionContains()) {\n+            assertThat(description.getContent(), containsString(s));\n+        }\n+    }\n+\n+    @Test\n+    @Override\n+    public void testLength() throws Exception {\n+        assertEquals(expectedLength(), extractor().getLength());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testTimestamp() throws Exception {\n+        assertEquals(expectedTimestamp(), extractor().getTimeStamp());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testViewCount() throws Exception {\n+        assertAtLeast(expectedViewCountAtLeast(), extractor().getViewCount());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testUploadDate() throws Exception {\n+        final DateWrapper dateWrapper = extractor().getUploadDate();\n+\n+        if (expectedUploadDate() == null) {\n+            assertNull(dateWrapper);\n+        } else {\n+            assertNotNull(dateWrapper);\n+\n+            final Calendar expectedDate = Calendar.getInstance();\n+            final Calendar actualDate = dateWrapper.date();\n+            expectedDate.setTimeZone(TimeZone.getTimeZone(\"GMT\"));\n+            actualDate.setTimeZone(TimeZone.getTimeZone(\"GMT\"));\n+\n+            final SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.S\");\n+            expectedDate.setTime(sdf.parse(expectedUploadDate()));\n+            assertEquals(expectedDate, actualDate);\n+        }\n+    }\n+\n+    @Test\n+    @Override\n+    public void testTextualUploadDate() throws Exception {\n+        assertEquals(expectedTextualUploadDate(), extractor().getTextualUploadDate());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testLikeCount() throws Exception {\n+        if (expectedLikeCountAtLeast() == -1) {\n+            assertEquals(-1, extractor().getLikeCount());\n+        } else {\n+            assertAtLeast(expectedLikeCountAtLeast(), extractor().getLikeCount());\n+        }\n+    }\n+\n+    @Test\n+    @Override\n+    public void testDislikeCount() throws Exception {\n+        if (expectedDislikeCountAtLeast() == -1) {\n+            assertEquals(-1, extractor().getDislikeCount());\n+        } else {\n+            assertAtLeast(expectedDislikeCountAtLeast(), extractor().getDislikeCount());\n+        }\n+    }\n+\n+    @Test\n+    @Override\n+    public void testRelatedStreams() throws Exception {\n+        final StreamInfoItemsCollector relatedStreams = extractor().getRelatedStreams();\n+\n+        if (expectedHasRelatedStreams()) {\n+            defaultTestListOfItems(extractor().getService(), relatedStreams.getItems(),\n+                    relatedStreams.getErrors());\n+        } else {\n+            assertNull(relatedStreams);\n+        }\n+    }\n+\n+    @Test\n+    @Override\n+    public void testAgeLimit() throws Exception {\n+        assertEquals(expectedAgeLimit(), extractor().getAgeLimit());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testErrorMessage() throws Exception {\n+        assertEquals(expectedErrorMessage(), extractor().getErrorMessage());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testVideoStreams() throws Exception {\n+        List<VideoStream> videoStreams = extractor().getVideoStreams();\n+        final List<VideoStream> videoOnlyStreams = extractor().getVideoOnlyStreams();\n+        assertNotNull(videoStreams);\n+        assertNotNull(videoOnlyStreams);\n+        videoStreams.addAll(videoOnlyStreams);\n+\n+        if (expectedHasVideoStreams()) {\n+            assertFalse(videoStreams.isEmpty());\n+\n+            for (VideoStream stream : videoStreams) {\n+                assertIsSecureUrl(stream.getUrl());\n+                assertFalse(stream.getResolution().isEmpty());\n+\n+                int formatId = stream.getFormatId();\n+                assertTrue(\"format id does not fit a video stream: \" + formatId,\n+                        0 <= formatId && formatId < 0x100);\n+            }\n+        } else {\n+            assertTrue(videoStreams.isEmpty());\n+        }\n+    }\n+\n+    @Test\n+    @Override\n+    public void testAudioStreams() throws Exception {\n+        final List<AudioStream> audioStreams = extractor().getAudioStreams();\n+        assertNotNull(audioStreams);\n+\n+        if (expectedHasAudioStreams()) {\n+            assertFalse(audioStreams.isEmpty());\n+\n+            for (AudioStream stream : audioStreams) {\n+                assertIsSecureUrl(stream.getUrl());\n+\n+                int formatId = stream.getFormatId();\n+                assertTrue(\"format id does not fit an audio stream: \" + formatId,\n+                        0x100 <= formatId && formatId < 0x1000);\n+            }\n+        } else {\n+            assertTrue(audioStreams.isEmpty());\n+        }\n+    }\n+\n+    @Test\n+    @Override\n+    public void testSubtitles() throws Exception {\n+        List<SubtitlesStream> subtitles = extractor().getSubtitlesDefault();\n+        assertNotNull(subtitles);\n+\n+        if (expectedHasSubtitles()) {\n+            assertFalse(subtitles.isEmpty());\n+\n+            for (SubtitlesStream stream : subtitles) {\n+                assertIsSecureUrl(stream.getUrl());\n+\n+                int formatId = stream.getFormatId();\n+                assertTrue(\"format id does not fit an audio stream: \" + formatId,\n+                        0x1000 <= formatId && formatId < 0x10000);\n+            }\n+        } else {\n+            assertTrue(subtitles.isEmpty());\n+\n+            MediaFormat[] formats = {MediaFormat.VTT, MediaFormat.TTML, MediaFormat.TRANSCRIPT1,", "originalCommit": "e4ace2b0dc97db6df467f41a74219776304dac6f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fa29b78f77e1e323ec0512643f3bcaaf6bd13df0", "changed_code": [{"header": "diff --git a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\nindex 0e731d4a..6c0419d5 100644\n--- a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n+++ b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n", "chunk": "@@ -240,28 +283,28 @@ public abstract class DefaultStreamExtractorTest extends DefaultExtractorTest<St\n     @Test\n     @Override\n     public void testSubtitles() throws Exception {\n-        List<SubtitlesStream> subtitles = extractor().getSubtitlesDefault();\n+        final List<SubtitlesStream> subtitles = extractor().getSubtitlesDefault();\n         assertNotNull(subtitles);\n \n         if (expectedHasSubtitles()) {\n             assertFalse(subtitles.isEmpty());\n \n-            for (SubtitlesStream stream : subtitles) {\n+            for (final SubtitlesStream stream : subtitles) {\n                 assertIsSecureUrl(stream.getUrl());\n \n-                int formatId = stream.getFormatId();\n-                assertTrue(\"format id does not fit an audio stream: \" + formatId,\n+                final int formatId = stream.getFormatId();\n+                assertTrue(\"format id does not fit a subtitles stream: \" + formatId,\n                         0x1000 <= formatId && formatId < 0x10000);\n             }\n         } else {\n             assertTrue(subtitles.isEmpty());\n \n-            MediaFormat[] formats = {MediaFormat.VTT, MediaFormat.TTML, MediaFormat.TRANSCRIPT1,\n-                    MediaFormat.TRANSCRIPT2, MediaFormat.TRANSCRIPT3, MediaFormat.SRT};\n-            for (MediaFormat format : formats) {\n-                subtitles = extractor().getSubtitles(format);\n-                assertNotNull(subtitles);\n-                assertTrue(subtitles.isEmpty());\n+            final MediaFormat[] formats = {MediaFormat.VTT, MediaFormat.TTML, MediaFormat.SRT,\n+                    MediaFormat.TRANSCRIPT1, MediaFormat.TRANSCRIPT2, MediaFormat.TRANSCRIPT3};\n+            for (final MediaFormat format : formats) {\n+                final List<SubtitlesStream> formatSubtitles = extractor().getSubtitles(format);\n+                assertNotNull(formatSubtitles);\n+                assertTrue(formatSubtitles.isEmpty());\n             }\n         }\n     }\n", "next_change": {"commit": "abbeacb312e1765afd9008cb61e6808c4544b701", "changed_code": [{"header": "diff --git a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\nindex 6c0419d5..2c495317 100644\n--- a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n+++ b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n", "chunk": "@@ -309,6 +308,18 @@ public abstract class DefaultStreamExtractorTest extends DefaultExtractorTest<St\n         }\n     }\n \n+    @Override\n+    public void testGetDashMpdUrl() throws Exception {\n+        final String dashMpdUrl = extractor().getDashMpdUrl();\n+        if (expectedDashMpdUrlContains() == null) {\n+            assertNotNull(dashMpdUrl);\n+            assertTrue(dashMpdUrl.isEmpty());\n+        } else {\n+            assertIsSecureUrl(dashMpdUrl);\n+            assertThat(extractor().getDashMpdUrl(), containsString(expectedDashMpdUrlContains()));\n+        }\n+    }\n+\n     @Test\n     @Override\n     public void testFrames() throws Exception {\n", "next_change": {"commit": "1d7a86e664717d09e33371bc87c289903b19feb2", "changed_code": [{"header": "diff --git a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\nindex 2c495317..406177f7 100644\n--- a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n+++ b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n", "chunk": "@@ -282,44 +239,32 @@ public abstract class DefaultStreamExtractorTest extends DefaultExtractorTest<St\n     @Test\n     @Override\n     public void testSubtitles() throws Exception {\n-        final List<SubtitlesStream> subtitles = extractor().getSubtitlesDefault();\n+        List<SubtitlesStream> subtitles = extractor().getSubtitlesDefault();\n         assertNotNull(subtitles);\n \n         if (expectedHasSubtitles()) {\n             assertFalse(subtitles.isEmpty());\n \n-            for (final SubtitlesStream stream : subtitles) {\n+            for (SubtitlesStream stream : subtitles) {\n                 assertIsSecureUrl(stream.getUrl());\n \n-                final int formatId = stream.getFormatId();\n-                assertTrue(\"format id does not fit a subtitles stream: \" + formatId,\n+                int formatId = stream.getFormatId();\n+                assertTrue(\"format id does not fit an audio stream: \" + formatId,\n                         0x1000 <= formatId && formatId < 0x10000);\n             }\n         } else {\n             assertTrue(subtitles.isEmpty());\n \n-            final MediaFormat[] formats = {MediaFormat.VTT, MediaFormat.TTML, MediaFormat.SRT,\n-                    MediaFormat.TRANSCRIPT1, MediaFormat.TRANSCRIPT2, MediaFormat.TRANSCRIPT3};\n-            for (final MediaFormat format : formats) {\n-                final List<SubtitlesStream> formatSubtitles = extractor().getSubtitles(format);\n-                assertNotNull(formatSubtitles);\n-                assertTrue(formatSubtitles.isEmpty());\n+            MediaFormat[] formats = {MediaFormat.VTT, MediaFormat.TTML, MediaFormat.TRANSCRIPT1,\n+                    MediaFormat.TRANSCRIPT2, MediaFormat.TRANSCRIPT3, MediaFormat.SRT};\n+            for (MediaFormat format : formats) {\n+                subtitles = extractor().getSubtitles(format);\n+                assertNotNull(subtitles);\n+                assertTrue(subtitles.isEmpty());\n             }\n         }\n     }\n \n-    @Override\n-    public void testGetDashMpdUrl() throws Exception {\n-        final String dashMpdUrl = extractor().getDashMpdUrl();\n-        if (expectedDashMpdUrlContains() == null) {\n-            assertNotNull(dashMpdUrl);\n-            assertTrue(dashMpdUrl.isEmpty());\n-        } else {\n-            assertIsSecureUrl(dashMpdUrl);\n-            assertThat(extractor().getDashMpdUrl(), containsString(expectedDashMpdUrlContains()));\n-        }\n-    }\n-\n     @Test\n     @Override\n     public void testFrames() throws Exception {\n", "next_change": {"commit": "a087b092b401977bd58b279a3f285549db0e2160", "changed_code": [{"header": "diff --git a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\nindex 406177f7..fc2ebf43 100644\n--- a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n+++ b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n", "chunk": "@@ -239,28 +239,28 @@ public abstract class DefaultStreamExtractorTest extends DefaultExtractorTest<St\n     @Test\n     @Override\n     public void testSubtitles() throws Exception {\n-        List<SubtitlesStream> subtitles = extractor().getSubtitlesDefault();\n+        final List<SubtitlesStream> subtitles = extractor().getSubtitlesDefault();\n         assertNotNull(subtitles);\n \n         if (expectedHasSubtitles()) {\n             assertFalse(subtitles.isEmpty());\n \n-            for (SubtitlesStream stream : subtitles) {\n+            for (final SubtitlesStream stream : subtitles) {\n                 assertIsSecureUrl(stream.getUrl());\n \n-                int formatId = stream.getFormatId();\n-                assertTrue(\"format id does not fit an audio stream: \" + formatId,\n+                final int formatId = stream.getFormatId();\n+                assertTrue(\"format id does not fit a subtitles stream: \" + formatId,\n                         0x1000 <= formatId && formatId < 0x10000);\n             }\n         } else {\n             assertTrue(subtitles.isEmpty());\n \n-            MediaFormat[] formats = {MediaFormat.VTT, MediaFormat.TTML, MediaFormat.TRANSCRIPT1,\n-                    MediaFormat.TRANSCRIPT2, MediaFormat.TRANSCRIPT3, MediaFormat.SRT};\n-            for (MediaFormat format : formats) {\n-                subtitles = extractor().getSubtitles(format);\n-                assertNotNull(subtitles);\n-                assertTrue(subtitles.isEmpty());\n+            final MediaFormat[] formats = {MediaFormat.VTT, MediaFormat.TTML, MediaFormat.SRT,\n+                    MediaFormat.TRANSCRIPT1, MediaFormat.TRANSCRIPT2, MediaFormat.TRANSCRIPT3};\n+            for (final MediaFormat format : formats) {\n+                final List<SubtitlesStream> formatSubtitles = extractor().getSubtitles(format);\n+                assertNotNull(formatSubtitles);\n+                assertTrue(formatSubtitles.isEmpty());\n             }\n         }\n     }\n", "next_change": {"commit": "880ff04a5c17086711c0d6d14d6aa46cf1943c54", "changed_code": [{"header": "diff --git a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\nindex fc2ebf43..8ab642d9 100644\n--- a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n+++ b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n", "chunk": "@@ -265,6 +307,18 @@ public abstract class DefaultStreamExtractorTest extends DefaultExtractorTest<St\n         }\n     }\n \n+    @Override\n+    public void testGetDashMpdUrl() throws Exception {\n+        final String dashMpdUrl = extractor().getDashMpdUrl();\n+        if (expectedDashMpdUrlContains() == null) {\n+            assertNotNull(dashMpdUrl);\n+            assertTrue(dashMpdUrl.isEmpty());\n+        } else {\n+            assertIsSecureUrl(dashMpdUrl);\n+            assertThat(extractor().getDashMpdUrl(), containsString(expectedDashMpdUrlContains()));\n+        }\n+    }\n+\n     @Test\n     @Override\n     public void testFrames() throws Exception {\n", "next_change": null}]}}]}}]}}]}}]}, "revised_code_in_main": {"commit": "14c0c37d64883e795445bc8bd878df33ad6bdb9d", "changed_code": [{"header": "diff --git a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\nindex 0e731d4a..a70b38a8 100644\n--- a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n+++ b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n", "chunk": "@@ -240,32 +283,45 @@ public abstract class DefaultStreamExtractorTest extends DefaultExtractorTest<St\n     @Test\n     @Override\n     public void testSubtitles() throws Exception {\n-        List<SubtitlesStream> subtitles = extractor().getSubtitlesDefault();\n+        final List<SubtitlesStream> subtitles = extractor().getSubtitlesDefault();\n         assertNotNull(subtitles);\n \n         if (expectedHasSubtitles()) {\n             assertFalse(subtitles.isEmpty());\n \n-            for (SubtitlesStream stream : subtitles) {\n+            for (final SubtitlesStream stream : subtitles) {\n                 assertIsSecureUrl(stream.getUrl());\n \n-                int formatId = stream.getFormatId();\n-                assertTrue(\"format id does not fit an audio stream: \" + formatId,\n+                final int formatId = stream.getFormatId();\n+                // see MediaFormat: video stream formats range from 0x1000 to 0x10000\n+                assertTrue(\"format id does not fit a subtitles stream: \" + formatId,\n                         0x1000 <= formatId && formatId < 0x10000);\n             }\n         } else {\n             assertTrue(subtitles.isEmpty());\n \n-            MediaFormat[] formats = {MediaFormat.VTT, MediaFormat.TTML, MediaFormat.TRANSCRIPT1,\n-                    MediaFormat.TRANSCRIPT2, MediaFormat.TRANSCRIPT3, MediaFormat.SRT};\n-            for (MediaFormat format : formats) {\n-                subtitles = extractor().getSubtitles(format);\n-                assertNotNull(subtitles);\n-                assertTrue(subtitles.isEmpty());\n+            final MediaFormat[] formats = {MediaFormat.VTT, MediaFormat.TTML, MediaFormat.SRT,\n+                    MediaFormat.TRANSCRIPT1, MediaFormat.TRANSCRIPT2, MediaFormat.TRANSCRIPT3};\n+            for (final MediaFormat format : formats) {\n+                final List<SubtitlesStream> formatSubtitles = extractor().getSubtitles(format);\n+                assertNotNull(formatSubtitles);\n+                assertTrue(formatSubtitles.isEmpty());\n             }\n         }\n     }\n \n+    @Override\n+    public void testGetDashMpdUrl() throws Exception {\n+        final String dashMpdUrl = extractor().getDashMpdUrl();\n+        if (expectedDashMpdUrlContains() == null) {\n+            assertNotNull(dashMpdUrl);\n+            assertTrue(dashMpdUrl.isEmpty());\n+        } else {\n+            assertIsSecureUrl(dashMpdUrl);\n+            assertThat(extractor().getDashMpdUrl(), containsString(expectedDashMpdUrlContains()));\n+        }\n+    }\n+\n     @Test\n     @Override\n     public void testFrames() throws Exception {\n", "next_change": {"commit": "a2cbdf0991d6cf4154d905fbdd2b5a2c1c6f758c", "changed_code": [{"header": "diff --git a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\nindex a70b38a8..c7c8ecd4 100644\n--- a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n+++ b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n", "chunk": "@@ -318,7 +333,7 @@ public abstract class DefaultStreamExtractorTest extends DefaultExtractorTest<St\n             assertTrue(dashMpdUrl.isEmpty());\n         } else {\n             assertIsSecureUrl(dashMpdUrl);\n-            assertThat(extractor().getDashMpdUrl(), containsString(expectedDashMpdUrlContains()));\n+            ExtractorAsserts.assertContains(expectedDashMpdUrlContains(), extractor().getDashMpdUrl());\n         }\n     }\n \n", "next_change": {"commit": "f6ec7f9a6120064fdf7348ff13e1adfbcab8492f", "changed_code": [{"header": "diff --git a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\nindex c7c8ecd4..d9b4e6cd 100644\n--- a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n+++ b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n", "chunk": "@@ -333,7 +358,8 @@ public abstract class DefaultStreamExtractorTest extends DefaultExtractorTest<St\n             assertTrue(dashMpdUrl.isEmpty());\n         } else {\n             assertIsSecureUrl(dashMpdUrl);\n-            ExtractorAsserts.assertContains(expectedDashMpdUrlContains(), extractor().getDashMpdUrl());\n+            ExtractorAsserts.assertContains(expectedDashMpdUrlContains(),\n+                    extractor().getDashMpdUrl());\n         }\n     }\n \n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "14c0c37d64883e795445bc8bd878df33ad6bdb9d", "message": "Merge commit", "committedDate": null}, {"oid": "4f04cfcccaaf49bb5362bb7a02f6450c446934b6", "committedDate": "2020-11-01 06:28:54 +0530", "message": "Switch from Calendar to OffsetDateTime in DateWrapper."}, {"oid": "827f7bd13750b29e2382c6681f23b707f76e5f33", "committedDate": "2020-11-04 16:02:12 +0100", "message": "[YouTube] Cache deobfuscation and improve requests made"}, {"oid": "9a7a224a545e0dd5036b14e7e7a83e923be03d6a", "committedDate": "2020-12-12 10:24:55 +0100", "message": "Add tests for stream segments"}, {"oid": "bc6de149527fabb235068bfed538194316054ddb", "committedDate": "2020-12-22 18:19:26 +0100", "message": "Extract stream and search meta info for YouTube"}, {"oid": "11dcfe638b994fc30db3589fc1aaf273ab241362", "committedDate": "2021-01-14 20:01:06 +0100", "message": "Add durationPerFrame to Frameset and getFrameBoundsAt method"}, {"oid": "1a322ad8edcf54e90f84d236fbe6dce1a9d8ae47", "committedDate": "2021-02-18 16:36:40 +0100", "message": "Add uploader verified by service extraction"}, {"oid": "21158744b1abbe17d85ebcee61f2e12068c4c375", "committedDate": "2021-03-05 16:38:46 +0100", "message": "Add expectedDescriptionIsEmpty() to DefaultStreamExtractorTest"}, {"oid": "c47cc54908d14d3faa6326e62cb8c8add9463df2", "committedDate": "2021-03-19 10:14:43 +0100", "message": "Extract metadata for YouTube, SoundCloud & MediaCCC"}, {"oid": "14f6f1b7c3d4a98ac0a74a9f6d16b05cb96c0c91", "committedDate": "2021-03-31 20:24:40 +0200", "message": "Generify related streams calls and rename method"}, {"oid": "a2cbdf0991d6cf4154d905fbdd2b5a2c1c6f758c", "committedDate": "2021-12-27 21:08:08 +0100", "message": "Updated to JUnit 5"}, {"oid": "3712a669b1d1759e68a0309594cbc77449cd2e64", "committedDate": "2022-01-04 17:28:31 +0100", "message": "Code cleanup / improvements"}, {"oid": "6f3f608ab651574999a169cd506428ded9eac491", "committedDate": "2022-02-24 12:50:51 +0000", "message": "Add support for extracting channel subscriber count in StreamInfo."}, {"oid": "5b0ec694a638cdbca038a76ad4bcae6daf6b37d6", "committedDate": "2022-02-24 12:50:51 +0000", "message": "Add requested changes."}, {"oid": "f6ec7f9a6120064fdf7348ff13e1adfbcab8492f", "committedDate": "2022-05-28 12:00:45 +0200", "message": "Update DefaultStreamExtractorTest and SoundcloudStreamExtractorTest to support changes made in Stream classes"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA3MzQyMA==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/309#discussion_r425073420", "body": "Make this a variable that's declared here, because this is imho unclear", "bodyText": "Make this a variable that's declared here, because this is imho unclear", "bodyHTML": "<p dir=\"auto\">Make this a variable that's declared here, because this is imho unclear</p>", "author": "wb9688", "createdAt": "2020-05-14T11:43:58Z", "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java", "diffHunk": "@@ -0,0 +1,297 @@\n+package org.schabi.newpipe.extractor.services;\n+\n+import org.junit.Test;\n+import org.schabi.newpipe.extractor.MediaFormat;\n+import org.schabi.newpipe.extractor.localization.DateWrapper;\n+import org.schabi.newpipe.extractor.stream.AudioStream;\n+import org.schabi.newpipe.extractor.stream.Description;\n+import org.schabi.newpipe.extractor.stream.Frameset;\n+import org.schabi.newpipe.extractor.stream.StreamExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemsCollector;\n+import org.schabi.newpipe.extractor.stream.StreamType;\n+import org.schabi.newpipe.extractor.stream.SubtitlesStream;\n+import org.schabi.newpipe.extractor.stream.VideoStream;\n+\n+import java.text.SimpleDateFormat;\n+import java.util.Calendar;\n+import java.util.List;\n+import java.util.TimeZone;\n+\n+import javax.annotation.Nullable;\n+\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.assertTrue;\n+import static org.schabi.newpipe.extractor.ExtractorAsserts.assertAtLeast;\n+import static org.schabi.newpipe.extractor.ExtractorAsserts.assertIsSecureUrl;\n+import static org.schabi.newpipe.extractor.ExtractorAsserts.assertIsValidUrl;\n+import static org.schabi.newpipe.extractor.services.DefaultTests.defaultTestListOfItems;\n+\n+/**\n+ * Test for {@link StreamExtractor}\n+ */\n+public abstract class DefaultStreamExtractorTest extends DefaultExtractorTest<StreamExtractor>\n+        implements BaseStreamExtractorTest {\n+\n+    public abstract StreamType expectedStreamType();\n+    public abstract String expectedUploaderName();\n+    public abstract String expectedUploaderUrl();\n+    public abstract List<String> expectedDescriptionContains(); // e.g. for full links\n+    public abstract long expectedLength();\n+    public long expectedTimestamp() { return 0; }; // default: there is no timestamp\n+    public abstract long expectedViewCountAtLeast();\n+    @Nullable public abstract String expectedUploadDate(); // format: \"yyyy-MM-dd HH:mm:ss.SSS\"\n+    @Nullable public abstract String expectedTextualUploadDate();\n+    public abstract long expectedLikeCountAtLeast(); // return -1 if ratings are disabled\n+    public abstract long expectedDislikeCountAtLeast(); // return -1 if ratings are disabled\n+    public boolean expectedHasRelatedStreams() { return true; } // default: there are related videos\n+    public int expectedAgeLimit() { return StreamExtractor.NO_AGE_LIMIT; } // default: no limit\n+    @Nullable public String expectedErrorMessage() { return null; } // default: no error message\n+    public boolean expectedHasVideoStreams() { return true; } // default: there are video streams\n+    public boolean expectedHasAudioStreams() { return true; } // default: there are audio streams\n+    public boolean expectedHasSubtitles() { return true; } // default: there are subtitles streams\n+    public boolean expectedHasFrames() { return true; } // default: there are frames\n+    public boolean expectedHasNextStream() { return true; } // default: there is a next video\n+\n+    @Test\n+    @Override\n+    public void testStreamType() throws Exception {\n+        assertEquals(expectedStreamType(), extractor().getStreamType());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testUploaderName() throws Exception {\n+        assertEquals(expectedUploaderName(), extractor().getUploaderName());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testUploaderUrl() throws Exception {\n+        final String uploaderUrl = extractor().getUploaderUrl();\n+        assertIsSecureUrl(uploaderUrl);\n+        assertEquals(expectedUploaderUrl(), uploaderUrl);\n+    }\n+\n+    @Test\n+    @Override\n+    public void testUploaderAvatarUrl() throws Exception {\n+        assertIsSecureUrl(extractor().getUploaderAvatarUrl());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testThumbnailUrl() throws Exception {\n+        assertIsSecureUrl(extractor().getThumbnailUrl());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testDescription() throws Exception {\n+        final Description description = extractor().getDescription();\n+        assertNotNull(description);\n+        assertFalse(\"description is empty\", description.getContent().isEmpty());\n+\n+        for (String s : expectedDescriptionContains()) {\n+            assertThat(description.getContent(), containsString(s));\n+        }\n+    }\n+\n+    @Test\n+    @Override\n+    public void testLength() throws Exception {\n+        assertEquals(expectedLength(), extractor().getLength());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testTimestamp() throws Exception {\n+        assertEquals(expectedTimestamp(), extractor().getTimeStamp());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testViewCount() throws Exception {\n+        assertAtLeast(expectedViewCountAtLeast(), extractor().getViewCount());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testUploadDate() throws Exception {\n+        final DateWrapper dateWrapper = extractor().getUploadDate();\n+\n+        if (expectedUploadDate() == null) {\n+            assertNull(dateWrapper);\n+        } else {\n+            assertNotNull(dateWrapper);\n+\n+            final Calendar expectedDate = Calendar.getInstance();\n+            final Calendar actualDate = dateWrapper.date();\n+            expectedDate.setTimeZone(TimeZone.getTimeZone(\"GMT\"));\n+            actualDate.setTimeZone(TimeZone.getTimeZone(\"GMT\"));\n+\n+            final SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.S\");\n+            expectedDate.setTime(sdf.parse(expectedUploadDate()));\n+            assertEquals(expectedDate, actualDate);\n+        }\n+    }\n+\n+    @Test\n+    @Override\n+    public void testTextualUploadDate() throws Exception {\n+        assertEquals(expectedTextualUploadDate(), extractor().getTextualUploadDate());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testLikeCount() throws Exception {\n+        if (expectedLikeCountAtLeast() == -1) {\n+            assertEquals(-1, extractor().getLikeCount());\n+        } else {\n+            assertAtLeast(expectedLikeCountAtLeast(), extractor().getLikeCount());\n+        }\n+    }\n+\n+    @Test\n+    @Override\n+    public void testDislikeCount() throws Exception {\n+        if (expectedDislikeCountAtLeast() == -1) {\n+            assertEquals(-1, extractor().getDislikeCount());\n+        } else {\n+            assertAtLeast(expectedDislikeCountAtLeast(), extractor().getDislikeCount());\n+        }\n+    }\n+\n+    @Test\n+    @Override\n+    public void testRelatedStreams() throws Exception {\n+        final StreamInfoItemsCollector relatedStreams = extractor().getRelatedStreams();\n+\n+        if (expectedHasRelatedStreams()) {\n+            defaultTestListOfItems(extractor().getService(), relatedStreams.getItems(),\n+                    relatedStreams.getErrors());\n+        } else {\n+            assertNull(relatedStreams);\n+        }\n+    }\n+\n+    @Test\n+    @Override\n+    public void testAgeLimit() throws Exception {\n+        assertEquals(expectedAgeLimit(), extractor().getAgeLimit());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testErrorMessage() throws Exception {\n+        assertEquals(expectedErrorMessage(), extractor().getErrorMessage());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testVideoStreams() throws Exception {\n+        List<VideoStream> videoStreams = extractor().getVideoStreams();\n+        final List<VideoStream> videoOnlyStreams = extractor().getVideoOnlyStreams();\n+        assertNotNull(videoStreams);\n+        assertNotNull(videoOnlyStreams);\n+        videoStreams.addAll(videoOnlyStreams);\n+\n+        if (expectedHasVideoStreams()) {\n+            assertFalse(videoStreams.isEmpty());\n+\n+            for (VideoStream stream : videoStreams) {\n+                assertIsSecureUrl(stream.getUrl());\n+                assertFalse(stream.getResolution().isEmpty());\n+\n+                int formatId = stream.getFormatId();\n+                assertTrue(\"format id does not fit a video stream: \" + formatId,\n+                        0 <= formatId && formatId < 0x100);\n+            }\n+        } else {\n+            assertTrue(videoStreams.isEmpty());\n+        }\n+    }\n+\n+    @Test\n+    @Override\n+    public void testAudioStreams() throws Exception {\n+        final List<AudioStream> audioStreams = extractor().getAudioStreams();\n+        assertNotNull(audioStreams);\n+\n+        if (expectedHasAudioStreams()) {\n+            assertFalse(audioStreams.isEmpty());\n+\n+            for (AudioStream stream : audioStreams) {\n+                assertIsSecureUrl(stream.getUrl());\n+\n+                int formatId = stream.getFormatId();\n+                assertTrue(\"format id does not fit an audio stream: \" + formatId,\n+                        0x100 <= formatId && formatId < 0x1000);\n+            }\n+        } else {\n+            assertTrue(audioStreams.isEmpty());\n+        }\n+    }\n+\n+    @Test\n+    @Override\n+    public void testSubtitles() throws Exception {\n+        List<SubtitlesStream> subtitles = extractor().getSubtitlesDefault();\n+        assertNotNull(subtitles);\n+\n+        if (expectedHasSubtitles()) {\n+            assertFalse(subtitles.isEmpty());\n+\n+            for (SubtitlesStream stream : subtitles) {\n+                assertIsSecureUrl(stream.getUrl());\n+\n+                int formatId = stream.getFormatId();\n+                assertTrue(\"format id does not fit an audio stream: \" + formatId,\n+                        0x1000 <= formatId && formatId < 0x10000);\n+            }\n+        } else {\n+            assertTrue(subtitles.isEmpty());\n+\n+            MediaFormat[] formats = {MediaFormat.VTT, MediaFormat.TTML, MediaFormat.TRANSCRIPT1,\n+                    MediaFormat.TRANSCRIPT2, MediaFormat.TRANSCRIPT3, MediaFormat.SRT};\n+            for (MediaFormat format : formats) {\n+                subtitles = extractor().getSubtitles(format);", "originalCommit": "e4ace2b0dc97db6df467f41a74219776304dac6f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fa29b78f77e1e323ec0512643f3bcaaf6bd13df0", "changed_code": [{"header": "diff --git a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\nindex 0e731d4a..6c0419d5 100644\n--- a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n+++ b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n", "chunk": "@@ -240,28 +283,28 @@ public abstract class DefaultStreamExtractorTest extends DefaultExtractorTest<St\n     @Test\n     @Override\n     public void testSubtitles() throws Exception {\n-        List<SubtitlesStream> subtitles = extractor().getSubtitlesDefault();\n+        final List<SubtitlesStream> subtitles = extractor().getSubtitlesDefault();\n         assertNotNull(subtitles);\n \n         if (expectedHasSubtitles()) {\n             assertFalse(subtitles.isEmpty());\n \n-            for (SubtitlesStream stream : subtitles) {\n+            for (final SubtitlesStream stream : subtitles) {\n                 assertIsSecureUrl(stream.getUrl());\n \n-                int formatId = stream.getFormatId();\n-                assertTrue(\"format id does not fit an audio stream: \" + formatId,\n+                final int formatId = stream.getFormatId();\n+                assertTrue(\"format id does not fit a subtitles stream: \" + formatId,\n                         0x1000 <= formatId && formatId < 0x10000);\n             }\n         } else {\n             assertTrue(subtitles.isEmpty());\n \n-            MediaFormat[] formats = {MediaFormat.VTT, MediaFormat.TTML, MediaFormat.TRANSCRIPT1,\n-                    MediaFormat.TRANSCRIPT2, MediaFormat.TRANSCRIPT3, MediaFormat.SRT};\n-            for (MediaFormat format : formats) {\n-                subtitles = extractor().getSubtitles(format);\n-                assertNotNull(subtitles);\n-                assertTrue(subtitles.isEmpty());\n+            final MediaFormat[] formats = {MediaFormat.VTT, MediaFormat.TTML, MediaFormat.SRT,\n+                    MediaFormat.TRANSCRIPT1, MediaFormat.TRANSCRIPT2, MediaFormat.TRANSCRIPT3};\n+            for (final MediaFormat format : formats) {\n+                final List<SubtitlesStream> formatSubtitles = extractor().getSubtitles(format);\n+                assertNotNull(formatSubtitles);\n+                assertTrue(formatSubtitles.isEmpty());\n             }\n         }\n     }\n", "next_change": {"commit": "abbeacb312e1765afd9008cb61e6808c4544b701", "changed_code": [{"header": "diff --git a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\nindex 6c0419d5..2c495317 100644\n--- a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n+++ b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n", "chunk": "@@ -309,6 +308,18 @@ public abstract class DefaultStreamExtractorTest extends DefaultExtractorTest<St\n         }\n     }\n \n+    @Override\n+    public void testGetDashMpdUrl() throws Exception {\n+        final String dashMpdUrl = extractor().getDashMpdUrl();\n+        if (expectedDashMpdUrlContains() == null) {\n+            assertNotNull(dashMpdUrl);\n+            assertTrue(dashMpdUrl.isEmpty());\n+        } else {\n+            assertIsSecureUrl(dashMpdUrl);\n+            assertThat(extractor().getDashMpdUrl(), containsString(expectedDashMpdUrlContains()));\n+        }\n+    }\n+\n     @Test\n     @Override\n     public void testFrames() throws Exception {\n", "next_change": {"commit": "1d7a86e664717d09e33371bc87c289903b19feb2", "changed_code": [{"header": "diff --git a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\nindex 2c495317..406177f7 100644\n--- a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n+++ b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n", "chunk": "@@ -282,44 +239,32 @@ public abstract class DefaultStreamExtractorTest extends DefaultExtractorTest<St\n     @Test\n     @Override\n     public void testSubtitles() throws Exception {\n-        final List<SubtitlesStream> subtitles = extractor().getSubtitlesDefault();\n+        List<SubtitlesStream> subtitles = extractor().getSubtitlesDefault();\n         assertNotNull(subtitles);\n \n         if (expectedHasSubtitles()) {\n             assertFalse(subtitles.isEmpty());\n \n-            for (final SubtitlesStream stream : subtitles) {\n+            for (SubtitlesStream stream : subtitles) {\n                 assertIsSecureUrl(stream.getUrl());\n \n-                final int formatId = stream.getFormatId();\n-                assertTrue(\"format id does not fit a subtitles stream: \" + formatId,\n+                int formatId = stream.getFormatId();\n+                assertTrue(\"format id does not fit an audio stream: \" + formatId,\n                         0x1000 <= formatId && formatId < 0x10000);\n             }\n         } else {\n             assertTrue(subtitles.isEmpty());\n \n-            final MediaFormat[] formats = {MediaFormat.VTT, MediaFormat.TTML, MediaFormat.SRT,\n-                    MediaFormat.TRANSCRIPT1, MediaFormat.TRANSCRIPT2, MediaFormat.TRANSCRIPT3};\n-            for (final MediaFormat format : formats) {\n-                final List<SubtitlesStream> formatSubtitles = extractor().getSubtitles(format);\n-                assertNotNull(formatSubtitles);\n-                assertTrue(formatSubtitles.isEmpty());\n+            MediaFormat[] formats = {MediaFormat.VTT, MediaFormat.TTML, MediaFormat.TRANSCRIPT1,\n+                    MediaFormat.TRANSCRIPT2, MediaFormat.TRANSCRIPT3, MediaFormat.SRT};\n+            for (MediaFormat format : formats) {\n+                subtitles = extractor().getSubtitles(format);\n+                assertNotNull(subtitles);\n+                assertTrue(subtitles.isEmpty());\n             }\n         }\n     }\n \n-    @Override\n-    public void testGetDashMpdUrl() throws Exception {\n-        final String dashMpdUrl = extractor().getDashMpdUrl();\n-        if (expectedDashMpdUrlContains() == null) {\n-            assertNotNull(dashMpdUrl);\n-            assertTrue(dashMpdUrl.isEmpty());\n-        } else {\n-            assertIsSecureUrl(dashMpdUrl);\n-            assertThat(extractor().getDashMpdUrl(), containsString(expectedDashMpdUrlContains()));\n-        }\n-    }\n-\n     @Test\n     @Override\n     public void testFrames() throws Exception {\n", "next_change": {"commit": "a087b092b401977bd58b279a3f285549db0e2160", "changed_code": [{"header": "diff --git a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\nindex 406177f7..fc2ebf43 100644\n--- a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n+++ b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n", "chunk": "@@ -239,28 +239,28 @@ public abstract class DefaultStreamExtractorTest extends DefaultExtractorTest<St\n     @Test\n     @Override\n     public void testSubtitles() throws Exception {\n-        List<SubtitlesStream> subtitles = extractor().getSubtitlesDefault();\n+        final List<SubtitlesStream> subtitles = extractor().getSubtitlesDefault();\n         assertNotNull(subtitles);\n \n         if (expectedHasSubtitles()) {\n             assertFalse(subtitles.isEmpty());\n \n-            for (SubtitlesStream stream : subtitles) {\n+            for (final SubtitlesStream stream : subtitles) {\n                 assertIsSecureUrl(stream.getUrl());\n \n-                int formatId = stream.getFormatId();\n-                assertTrue(\"format id does not fit an audio stream: \" + formatId,\n+                final int formatId = stream.getFormatId();\n+                assertTrue(\"format id does not fit a subtitles stream: \" + formatId,\n                         0x1000 <= formatId && formatId < 0x10000);\n             }\n         } else {\n             assertTrue(subtitles.isEmpty());\n \n-            MediaFormat[] formats = {MediaFormat.VTT, MediaFormat.TTML, MediaFormat.TRANSCRIPT1,\n-                    MediaFormat.TRANSCRIPT2, MediaFormat.TRANSCRIPT3, MediaFormat.SRT};\n-            for (MediaFormat format : formats) {\n-                subtitles = extractor().getSubtitles(format);\n-                assertNotNull(subtitles);\n-                assertTrue(subtitles.isEmpty());\n+            final MediaFormat[] formats = {MediaFormat.VTT, MediaFormat.TTML, MediaFormat.SRT,\n+                    MediaFormat.TRANSCRIPT1, MediaFormat.TRANSCRIPT2, MediaFormat.TRANSCRIPT3};\n+            for (final MediaFormat format : formats) {\n+                final List<SubtitlesStream> formatSubtitles = extractor().getSubtitles(format);\n+                assertNotNull(formatSubtitles);\n+                assertTrue(formatSubtitles.isEmpty());\n             }\n         }\n     }\n", "next_change": {"commit": "880ff04a5c17086711c0d6d14d6aa46cf1943c54", "changed_code": [{"header": "diff --git a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\nindex fc2ebf43..8ab642d9 100644\n--- a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n+++ b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n", "chunk": "@@ -265,6 +307,18 @@ public abstract class DefaultStreamExtractorTest extends DefaultExtractorTest<St\n         }\n     }\n \n+    @Override\n+    public void testGetDashMpdUrl() throws Exception {\n+        final String dashMpdUrl = extractor().getDashMpdUrl();\n+        if (expectedDashMpdUrlContains() == null) {\n+            assertNotNull(dashMpdUrl);\n+            assertTrue(dashMpdUrl.isEmpty());\n+        } else {\n+            assertIsSecureUrl(dashMpdUrl);\n+            assertThat(extractor().getDashMpdUrl(), containsString(expectedDashMpdUrlContains()));\n+        }\n+    }\n+\n     @Test\n     @Override\n     public void testFrames() throws Exception {\n", "next_change": null}]}}]}}]}}]}}]}, "revised_code_in_main": {"commit": "14c0c37d64883e795445bc8bd878df33ad6bdb9d", "changed_code": [{"header": "diff --git a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\nindex 0e731d4a..a70b38a8 100644\n--- a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n+++ b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n", "chunk": "@@ -240,32 +283,45 @@ public abstract class DefaultStreamExtractorTest extends DefaultExtractorTest<St\n     @Test\n     @Override\n     public void testSubtitles() throws Exception {\n-        List<SubtitlesStream> subtitles = extractor().getSubtitlesDefault();\n+        final List<SubtitlesStream> subtitles = extractor().getSubtitlesDefault();\n         assertNotNull(subtitles);\n \n         if (expectedHasSubtitles()) {\n             assertFalse(subtitles.isEmpty());\n \n-            for (SubtitlesStream stream : subtitles) {\n+            for (final SubtitlesStream stream : subtitles) {\n                 assertIsSecureUrl(stream.getUrl());\n \n-                int formatId = stream.getFormatId();\n-                assertTrue(\"format id does not fit an audio stream: \" + formatId,\n+                final int formatId = stream.getFormatId();\n+                // see MediaFormat: video stream formats range from 0x1000 to 0x10000\n+                assertTrue(\"format id does not fit a subtitles stream: \" + formatId,\n                         0x1000 <= formatId && formatId < 0x10000);\n             }\n         } else {\n             assertTrue(subtitles.isEmpty());\n \n-            MediaFormat[] formats = {MediaFormat.VTT, MediaFormat.TTML, MediaFormat.TRANSCRIPT1,\n-                    MediaFormat.TRANSCRIPT2, MediaFormat.TRANSCRIPT3, MediaFormat.SRT};\n-            for (MediaFormat format : formats) {\n-                subtitles = extractor().getSubtitles(format);\n-                assertNotNull(subtitles);\n-                assertTrue(subtitles.isEmpty());\n+            final MediaFormat[] formats = {MediaFormat.VTT, MediaFormat.TTML, MediaFormat.SRT,\n+                    MediaFormat.TRANSCRIPT1, MediaFormat.TRANSCRIPT2, MediaFormat.TRANSCRIPT3};\n+            for (final MediaFormat format : formats) {\n+                final List<SubtitlesStream> formatSubtitles = extractor().getSubtitles(format);\n+                assertNotNull(formatSubtitles);\n+                assertTrue(formatSubtitles.isEmpty());\n             }\n         }\n     }\n \n+    @Override\n+    public void testGetDashMpdUrl() throws Exception {\n+        final String dashMpdUrl = extractor().getDashMpdUrl();\n+        if (expectedDashMpdUrlContains() == null) {\n+            assertNotNull(dashMpdUrl);\n+            assertTrue(dashMpdUrl.isEmpty());\n+        } else {\n+            assertIsSecureUrl(dashMpdUrl);\n+            assertThat(extractor().getDashMpdUrl(), containsString(expectedDashMpdUrlContains()));\n+        }\n+    }\n+\n     @Test\n     @Override\n     public void testFrames() throws Exception {\n", "next_change": {"commit": "a2cbdf0991d6cf4154d905fbdd2b5a2c1c6f758c", "changed_code": [{"header": "diff --git a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\nindex a70b38a8..c7c8ecd4 100644\n--- a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n+++ b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n", "chunk": "@@ -318,7 +333,7 @@ public abstract class DefaultStreamExtractorTest extends DefaultExtractorTest<St\n             assertTrue(dashMpdUrl.isEmpty());\n         } else {\n             assertIsSecureUrl(dashMpdUrl);\n-            assertThat(extractor().getDashMpdUrl(), containsString(expectedDashMpdUrlContains()));\n+            ExtractorAsserts.assertContains(expectedDashMpdUrlContains(), extractor().getDashMpdUrl());\n         }\n     }\n \n", "next_change": {"commit": "f6ec7f9a6120064fdf7348ff13e1adfbcab8492f", "changed_code": [{"header": "diff --git a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\nindex c7c8ecd4..d9b4e6cd 100644\n--- a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n+++ b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n", "chunk": "@@ -333,7 +358,8 @@ public abstract class DefaultStreamExtractorTest extends DefaultExtractorTest<St\n             assertTrue(dashMpdUrl.isEmpty());\n         } else {\n             assertIsSecureUrl(dashMpdUrl);\n-            ExtractorAsserts.assertContains(expectedDashMpdUrlContains(), extractor().getDashMpdUrl());\n+            ExtractorAsserts.assertContains(expectedDashMpdUrlContains(),\n+                    extractor().getDashMpdUrl());\n         }\n     }\n \n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "14c0c37d64883e795445bc8bd878df33ad6bdb9d", "message": "Merge commit", "committedDate": null}, {"oid": "4f04cfcccaaf49bb5362bb7a02f6450c446934b6", "committedDate": "2020-11-01 06:28:54 +0530", "message": "Switch from Calendar to OffsetDateTime in DateWrapper."}, {"oid": "827f7bd13750b29e2382c6681f23b707f76e5f33", "committedDate": "2020-11-04 16:02:12 +0100", "message": "[YouTube] Cache deobfuscation and improve requests made"}, {"oid": "9a7a224a545e0dd5036b14e7e7a83e923be03d6a", "committedDate": "2020-12-12 10:24:55 +0100", "message": "Add tests for stream segments"}, {"oid": "bc6de149527fabb235068bfed538194316054ddb", "committedDate": "2020-12-22 18:19:26 +0100", "message": "Extract stream and search meta info for YouTube"}, {"oid": "11dcfe638b994fc30db3589fc1aaf273ab241362", "committedDate": "2021-01-14 20:01:06 +0100", "message": "Add durationPerFrame to Frameset and getFrameBoundsAt method"}, {"oid": "1a322ad8edcf54e90f84d236fbe6dce1a9d8ae47", "committedDate": "2021-02-18 16:36:40 +0100", "message": "Add uploader verified by service extraction"}, {"oid": "21158744b1abbe17d85ebcee61f2e12068c4c375", "committedDate": "2021-03-05 16:38:46 +0100", "message": "Add expectedDescriptionIsEmpty() to DefaultStreamExtractorTest"}, {"oid": "c47cc54908d14d3faa6326e62cb8c8add9463df2", "committedDate": "2021-03-19 10:14:43 +0100", "message": "Extract metadata for YouTube, SoundCloud & MediaCCC"}, {"oid": "14f6f1b7c3d4a98ac0a74a9f6d16b05cb96c0c91", "committedDate": "2021-03-31 20:24:40 +0200", "message": "Generify related streams calls and rename method"}, {"oid": "a2cbdf0991d6cf4154d905fbdd2b5a2c1c6f758c", "committedDate": "2021-12-27 21:08:08 +0100", "message": "Updated to JUnit 5"}, {"oid": "3712a669b1d1759e68a0309594cbc77449cd2e64", "committedDate": "2022-01-04 17:28:31 +0100", "message": "Code cleanup / improvements"}, {"oid": "6f3f608ab651574999a169cd506428ded9eac491", "committedDate": "2022-02-24 12:50:51 +0000", "message": "Add support for extracting channel subscriber count in StreamInfo."}, {"oid": "5b0ec694a638cdbca038a76ad4bcae6daf6b37d6", "committedDate": "2022-02-24 12:50:51 +0000", "message": "Add requested changes."}, {"oid": "f6ec7f9a6120064fdf7348ff13e1adfbcab8492f", "committedDate": "2022-05-28 12:00:45 +0200", "message": "Update DefaultStreamExtractorTest and SoundcloudStreamExtractorTest to support changes made in Stream classes"}]}, {"oid": "fa29b78f77e1e323ec0512643f3bcaaf6bd13df0", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/fa29b78f77e1e323ec0512643f3bcaaf6bd13df0", "message": "[Test] Add sub channel name, url and thumbnail tests", "committedDate": "2020-05-16T18:27:58Z", "type": "forcePushed"}, {"oid": "d22a9638af630257daeab920f1adfb8aabc159b6", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/d22a9638af630257daeab920f1adfb8aabc159b6", "message": "[Test] Add sub channel name, url and thumbnail tests", "committedDate": "2020-05-16T18:29:42Z", "type": "forcePushed"}, {"oid": "d216b051dc5da6c63d601d243c8fa85492430894", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/d216b051dc5da6c63d601d243c8fa85492430894", "message": "[YouTube] Consider dates as GMT and not as local", "committedDate": "2020-05-16T19:19:18Z", "type": "forcePushed"}, {"oid": "95367dd038ba04e680290a2b56a7c34216c3dab1", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/95367dd038ba04e680290a2b56a7c34216c3dab1", "message": "[YouTube/MediaCCC] Consider dates as GMT and not as local", "committedDate": "2020-05-16T19:23:38Z", "type": "forcePushed"}, {"oid": "1ef0687e766dfa9a792039856052800adc61cc23", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/1ef0687e766dfa9a792039856052800adc61cc23", "message": "[YouTube/MediaCCC] Consider dates as GMT and not as local", "committedDate": "2020-06-14T08:20:19Z", "type": "forcePushed"}, {"oid": "abbeacb312e1765afd9008cb61e6808c4544b701", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/abbeacb312e1765afd9008cb61e6808c4544b701", "message": "[PeerTube] Change age restricted video in tests\n\nThe old one wasn't available anymore", "committedDate": "2020-06-14T18:19:43Z", "type": "forcePushed"}, {"oid": "1d7a86e664717d09e33371bc87c289903b19feb2", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/1d7a86e664717d09e33371bc87c289903b19feb2", "message": "[Test] Add base classes for stream extractor tests\n\nRefactor all stream extractor tests to use new base class.\n\nRemove check if upload date is in the past: this does not have to hold true: youtube premieres turn up in search results even though they are in the future", "committedDate": "2020-10-24T16:22:44Z", "type": "commit"}, {"oid": "7fb867c1662457c51d6579f2803c913f356126bf", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/7fb867c1662457c51d6579f2803c913f356126bf", "message": "[YouTube] Fix error message obtaining when there is none", "committedDate": "2020-10-24T16:22:44Z", "type": "commit"}, {"oid": "7cd410f3fc304a9eb620fa28ba39f938e4565c2b", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/7cd410f3fc304a9eb620fa28ba39f938e4565c2b", "message": "[YouTube] Return 0 when there is no timestamp, not -2, as per javadoc", "committedDate": "2020-10-24T16:23:45Z", "type": "commit"}, {"oid": "072bae321fdf9cca340d154d02b388623fadcc8a", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/072bae321fdf9cca340d154d02b388623fadcc8a", "message": "[YouTube] Fix frame extraction for livestreams\n\nUse saved playerResponse instead of parsing json every time", "committedDate": "2020-10-24T16:23:46Z", "type": "commit"}, {"oid": "3b2cfb4ca2e9fbe9457e2a4551d97f7fa8bc6fec", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/3b2cfb4ca2e9fbe9457e2a4551d97f7fa8bc6fec", "message": "[SoundCloud] Return empty video stream list instead of null\n\nAlso replace every instance of `return new ArrayList<>();` with `return Collections.emptyList();`", "committedDate": "2020-10-24T16:23:46Z", "type": "commit"}, {"oid": "4349be13af66aaf9af4c244d53cce1702b3a0782", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/4349be13af66aaf9af4c244d53cce1702b3a0782", "message": "[PeerTube] Return empty audio stream list instead of null", "committedDate": "2020-10-24T16:25:56Z", "type": "commit"}, {"oid": "7ae3cb6d07cea6abb71d9c69eb2b1b276e5b795f", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/7ae3cb6d07cea6abb71d9c69eb2b1b276e5b795f", "message": "[PeerTube] Fix link handler inconsistency providing API links", "committedDate": "2020-10-24T16:33:11Z", "type": "commit"}, {"oid": "aeeae87641f8ca41e62b985ad20f0cf1ed565aa6", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/aeeae87641f8ca41e62b985ad20f0cf1ed565aa6", "message": "[PeerTube] Parse timestamp from url (previously unimplemented)", "committedDate": "2020-10-24T16:33:42Z", "type": "commit"}, {"oid": "b461da792f375a8527587ff13ff8a6ed8c6f43b4", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/b461da792f375a8527587ff13ff8a6ed8c6f43b4", "message": "[MediaCCC] Fix link handler inconsistency providing API links", "committedDate": "2020-10-24T16:34:34Z", "type": "commit"}, {"oid": "3b2a1829d466e0f1b3d0b6c5a43de49bfde5a287", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/3b2a1829d466e0f1b3d0b6c5a43de49bfde5a287", "message": "[MediaCCC] Extract tags", "committedDate": "2020-10-24T16:34:57Z", "type": "commit"}, {"oid": "492db83ccff20a71a24aaab94e8968be3d4fffcd", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/492db83ccff20a71a24aaab94e8968be3d4fffcd", "message": "[MediaCCC] Return null instead of empty items collector\n\nAs per the documentation in the base getRelatedStreams()", "committedDate": "2020-10-24T16:34:57Z", "type": "commit"}, {"oid": "d130fd79c31338293134f8416500f135fc57a63a", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/d130fd79c31338293134f8416500f135fc57a63a", "message": "[PeerTube] Prepend \"accounts/\" to channel id for backward compatibility", "committedDate": "2020-10-24T16:36:21Z", "type": "commit"}, {"oid": "0c980b2d648b7eb72fa22482a390114da1d3f5ae", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/0c980b2d648b7eb72fa22482a390114da1d3f5ae", "message": "[PeerTube] Improve channel and stream link handler tests", "committedDate": "2020-10-24T16:36:21Z", "type": "commit"}, {"oid": "07a90d116a0059a027f158f59b5fe9d2720f361f", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/07a90d116a0059a027f158f59b5fe9d2720f361f", "message": "[MediaCCC] Use regex to parse stream and conference urls", "committedDate": "2020-10-24T16:36:21Z", "type": "commit"}, {"oid": "af5b8b1915a5ca4d7a79341e550ca64eda5e94e4", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/af5b8b1915a5ca4d7a79341e550ca64eda5e94e4", "message": "[MediaCCC] Add tests for stream and conference link handlers", "committedDate": "2020-10-24T16:36:21Z", "type": "commit"}, {"oid": "fcb9b6f855ddd5345a6cefcc9b82a0f5138719dd", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/fcb9b6f855ddd5345a6cefcc9b82a0f5138719dd", "message": "[MediaCCC] Use final when possible, ide refactorings\n\nRefactorings on `throws` clause", "committedDate": "2020-10-24T16:36:22Z", "type": "commit"}, {"oid": "06430c4749295309727f72c6ac18f036f22bdc19", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/06430c4749295309727f72c6ac18f036f22bdc19", "message": "[PeerTube] Use final when possible, ide refactorings", "committedDate": "2020-10-24T16:39:06Z", "type": "commit"}, {"oid": "55bc01d1ce48404d6cb11cc419685696ba02eac5", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/55bc01d1ce48404d6cb11cc419685696ba02eac5", "message": "[SoundCloud] Use final when possible, ide refactorings", "committedDate": "2020-10-24T16:39:55Z", "type": "commit"}, {"oid": "3191bd6c703e1a410a03b50c2d0e4cbe7b30d7b8", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/3191bd6c703e1a410a03b50c2d0e4cbe7b30d7b8", "message": "[YouTube] Use final when possible", "committedDate": "2020-10-24T16:39:55Z", "type": "commit"}, {"oid": "68d23defba04e3db08462d8268903ec23056fd5f", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/68d23defba04e3db08462d8268903ec23056fd5f", "message": "[YouTube] Do not catch every exception on getErrorMessage\n\n@B0pol suggestion", "committedDate": "2020-10-24T16:39:55Z", "type": "commit"}, {"oid": "8dc3f28618d38c692f3abee1ae612e54ac1de3ee", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/8dc3f28618d38c692f3abee1ae612e54ac1de3ee", "message": "[PeerTube] Test one channel url with api and one without", "committedDate": "2020-10-24T16:39:55Z", "type": "commit"}, {"oid": "a4097d8d0119cfc71a3b969aa117df924af60e3d", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/a4097d8d0119cfc71a3b969aa117df924af60e3d", "message": "[MediaCCC] Return empty list of video-only streams instead of null", "committedDate": "2020-10-24T16:39:55Z", "type": "commit"}, {"oid": "a087b092b401977bd58b279a3f285549db0e2160", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/a087b092b401977bd58b279a3f285549db0e2160", "message": "[Test] Improve code style and add final", "committedDate": "2020-10-24T16:39:55Z", "type": "commit"}, {"oid": "6127826571a9041cc9d9d264ac97239249f2aff9", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/6127826571a9041cc9d9d264ac97239249f2aff9", "message": "[Test] Add stream metadata tests", "committedDate": "2020-10-24T16:41:41Z", "type": "commit"}, {"oid": "8ce711f40fe3667a9184da513a794d83c098985d", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/8ce711f40fe3667a9184da513a794d83c098985d", "message": "[Test] Add sub channel name, url and thumbnail tests", "committedDate": "2020-10-24T16:41:41Z", "type": "commit"}, {"oid": "d0b14644bb9937d73137a4b8c0121a13defe9b56", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/d0b14644bb9937d73137a4b8c0121a13defe9b56", "message": "[YouTube/MediaCCC] Consider dates as GMT and not as local", "committedDate": "2020-10-24T16:41:41Z", "type": "commit"}, {"oid": "880ff04a5c17086711c0d6d14d6aa46cf1943c54", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/880ff04a5c17086711c0d6d14d6aa46cf1943c54", "message": "[Test] Add stream dash mpd url test", "committedDate": "2020-10-24T16:41:41Z", "type": "commit"}, {"oid": "3c55ea93216a1bb1d75e16abf0509cdb9b42c61b", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/3c55ea93216a1bb1d75e16abf0509cdb9b42c61b", "message": "[PeerTube] Change age restricted video in tests\n\nThe old one wasn't available anymore", "committedDate": "2020-10-24T16:41:41Z", "type": "commit"}, {"oid": "f11fe87688beb27a051608c4f0facb2d8214b6d1", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/f11fe87688beb27a051608c4f0facb2d8214b6d1", "message": "[YouTube] Replace outdated PewDiePie video test with another one\n\nThe old video was made private, and this video (wedding) is probably never going to be removed.", "committedDate": "2020-10-24T16:41:41Z", "type": "commit"}, {"oid": "f11fe87688beb27a051608c4f0facb2d8214b6d1", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/f11fe87688beb27a051608c4f0facb2d8214b6d1", "message": "[YouTube] Replace outdated PewDiePie video test with another one\n\nThe old video was made private, and this video (wedding) is probably never going to be removed.", "committedDate": "2020-10-24T16:41:41Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTQ5MTU1NA==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/309#discussion_r511491554", "body": "```suggestion\r\n            final SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd\");\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd\");\n          \n          \n            \n                        final SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd\");", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            <span class=\"pl-smi\">SimpleDateFormat</span> sdf <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">SimpleDateFormat</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>yyyy-MM-dd<span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            <span class=\"pl-k x x-first\">final</span><span class=\"x x-last\"> </span><span class=\"pl-smi\">SimpleDateFormat</span> sdf <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">SimpleDateFormat</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>yyyy-MM-dd<span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "TobiGr", "createdAt": "2020-10-24T16:51:40Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/media_ccc/extractors/MediaCCCParsingHelper.java", "diffHunk": "@@ -6,14 +6,17 @@\n import java.text.SimpleDateFormat;\n import java.util.Calendar;\n import java.util.Date;\n+import java.util.TimeZone;\n \n public final class MediaCCCParsingHelper {\n     private MediaCCCParsingHelper() { }\n \n     public static Calendar parseDateFrom(final String textualUploadDate) throws ParsingException {\n         Date date;\n         try {\n-            date = new SimpleDateFormat(\"yyyy-MM-dd\").parse(textualUploadDate);\n+            SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd\");", "originalCommit": "f11fe87688beb27a051608c4f0facb2d8214b6d1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cd32e7436ea4781939608c8a9ed36b72f2173bc0", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/media_ccc/extractors/MediaCCCParsingHelper.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/media_ccc/extractors/MediaCCCParsingHelper.java\nindex dfdceead..14ca5c52 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/media_ccc/extractors/MediaCCCParsingHelper.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/media_ccc/extractors/MediaCCCParsingHelper.java\n", "chunk": "@@ -12,9 +12,9 @@ public final class MediaCCCParsingHelper {\n     private MediaCCCParsingHelper() { }\n \n     public static Calendar parseDateFrom(final String textualUploadDate) throws ParsingException {\n-        Date date;\n+        final Date date;\n         try {\n-            SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd\");\n+            final SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd\");\n             sdf.setTimeZone(TimeZone.getTimeZone(\"GMT\"));\n             date = sdf.parse(textualUploadDate);\n         } catch (ParseException e) {\n", "next_change": null}]}, "revised_code_in_main": {"commit": "14c0c37d64883e795445bc8bd878df33ad6bdb9d", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/media_ccc/extractors/MediaCCCParsingHelper.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/media_ccc/extractors/MediaCCCParsingHelper.java\nindex dfdceead..14ca5c52 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/media_ccc/extractors/MediaCCCParsingHelper.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/media_ccc/extractors/MediaCCCParsingHelper.java\n", "chunk": "@@ -12,9 +12,9 @@ public final class MediaCCCParsingHelper {\n     private MediaCCCParsingHelper() { }\n \n     public static Calendar parseDateFrom(final String textualUploadDate) throws ParsingException {\n-        Date date;\n+        final Date date;\n         try {\n-            SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd\");\n+            final SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd\");\n             sdf.setTimeZone(TimeZone.getTimeZone(\"GMT\"));\n             date = sdf.parse(textualUploadDate);\n         } catch (ParseException e) {\n", "next_change": {"commit": "4f04cfcccaaf49bb5362bb7a02f6450c446934b6", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/media_ccc/extractors/MediaCCCParsingHelper.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/media_ccc/extractors/MediaCCCParsingHelper.java\nindex 14ca5c52..b6879fcd 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/media_ccc/extractors/MediaCCCParsingHelper.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/media_ccc/extractors/MediaCCCParsingHelper.java\n", "chunk": "@@ -2,28 +2,17 @@ package org.schabi.newpipe.extractor.services.media_ccc.extractors;\n \n import org.schabi.newpipe.extractor.exceptions.ParsingException;\n \n-import java.text.ParseException;\n-import java.text.SimpleDateFormat;\n-import java.util.Calendar;\n-import java.util.Date;\n-import java.util.TimeZone;\n+import java.time.OffsetDateTime;\n+import java.time.format.DateTimeParseException;\n \n public final class MediaCCCParsingHelper {\n     private MediaCCCParsingHelper() { }\n \n-    public static Calendar parseDateFrom(final String textualUploadDate) throws ParsingException {\n-        final Date date;\n+    public static OffsetDateTime parseDateFrom(final String textualUploadDate) throws ParsingException {\n         try {\n-            final SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd\");\n-            sdf.setTimeZone(TimeZone.getTimeZone(\"GMT\"));\n-            date = sdf.parse(textualUploadDate);\n-        } catch (ParseException e) {\n+            return OffsetDateTime.parse(textualUploadDate);\n+        } catch (DateTimeParseException e) {\n             throw new ParsingException(\"Could not parse date: \\\"\" + textualUploadDate + \"\\\"\", e);\n         }\n-\n-        final Calendar uploadDate = Calendar.getInstance();\n-        uploadDate.setTime(date);\n-        return uploadDate;\n     }\n-\n }\n", "next_change": {"commit": "b4e191397117447364d137791ec4b1ca3672d75b", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/media_ccc/extractors/MediaCCCParsingHelper.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/media_ccc/extractors/MediaCCCParsingHelper.java\nindex b6879fcd..42148243 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/media_ccc/extractors/MediaCCCParsingHelper.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/media_ccc/extractors/MediaCCCParsingHelper.java\n", "chunk": "@@ -15,4 +27,24 @@ public final class MediaCCCParsingHelper {\n             throw new ParsingException(\"Could not parse date: \\\"\" + textualUploadDate + \"\\\"\", e);\n         }\n     }\n+\n+    public static boolean isLiveStreamId(final String url) {\n+        final String pattern = \"\\\\w+/\\\\w+\";\n+        return Pattern.matches(pattern, url); // {conference_slug}/{room_slug}\n+    }\n+\n+    public static JsonArray getLiveStreams(final Downloader downloader, final Localization localization) throws ExtractionException {\n+        if (liveStreams == null) {\n+            try {\n+                final String site = downloader.get(\"https://streaming.media.ccc.de/streams/v2.json\",\n+                        localization).responseBody();\n+                liveStreams = JsonParser.array().from(site);\n+            } catch (IOException | ReCaptchaException e) {\n+                throw new ExtractionException(\"Could not get live stream JSON.\", e);\n+            } catch (JsonParserException e) {\n+                throw new ExtractionException(\"Could not parse JSON.\", e);\n+            }\n+        }\n+        return liveStreams;\n+    }\n }\n", "next_change": {"commit": "9f7e06c8177d2e536e23c223a0b23090d5551f3c", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/media_ccc/extractors/MediaCCCParsingHelper.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/media_ccc/extractors/MediaCCCParsingHelper.java\nindex 42148243..ad07c472 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/media_ccc/extractors/MediaCCCParsingHelper.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/media_ccc/extractors/MediaCCCParsingHelper.java\n", "chunk": "@@ -16,32 +15,55 @@ import java.time.format.DateTimeParseException;\n import java.util.regex.Pattern;\n \n public final class MediaCCCParsingHelper {\n+    // {conference_slug}/{room_slug}\n+    private static final Pattern LIVE_STREAM_ID_PATTERN = Pattern.compile(\"\\\\w+/\\\\w+\");\n     private static JsonArray liveStreams = null;\n \n     private MediaCCCParsingHelper() { }\n \n-    public static OffsetDateTime parseDateFrom(final String textualUploadDate) throws ParsingException {\n+    public static OffsetDateTime parseDateFrom(final String textualUploadDate)\n+            throws ParsingException {\n         try {\n             return OffsetDateTime.parse(textualUploadDate);\n-        } catch (DateTimeParseException e) {\n+        } catch (final DateTimeParseException e) {\n             throw new ParsingException(\"Could not parse date: \\\"\" + textualUploadDate + \"\\\"\", e);\n         }\n     }\n \n-    public static boolean isLiveStreamId(final String url) {\n-        final String pattern = \"\\\\w+/\\\\w+\";\n-        return Pattern.matches(pattern, url); // {conference_slug}/{room_slug}\n+    /**\n+     * Check whether an id is a live stream id\n+     * @param id the {@code id} to check\n+     * @return returns {@code true} if the {@code id} is formatted like\n+     *         {@code {conference_slug}/{room_slug}}; {@code false} otherwise\n+     */\n+    public static boolean isLiveStreamId(final String id) {\n+        return LIVE_STREAM_ID_PATTERN.matcher(id).find();\n     }\n \n-    public static JsonArray getLiveStreams(final Downloader downloader, final Localization localization) throws ExtractionException {\n+    /**\n+     * Get currently available live streams from\n+     * <a href=\"https://streaming.media.ccc.de/streams/v2.json\">\n+     *     https://streaming.media.ccc.de/streams/v2.json</a>.\n+     * Use this method to cache requests, because they can get quite big.\n+     * TODO: implement better caching policy (max-age: 3 min)\n+     * @param downloader The downloader to use for making the request\n+     * @param localization The localization to be used. Will most likely be ignored.\n+     * @return {@link JsonArray} containing current conferences and info about their rooms and\n+     *         streams.\n+     * @throws ExtractionException if the data could not be fetched or the retrieved data could not\n+     *                             be parsed to a {@link JsonArray}\n+     */\n+    public static JsonArray getLiveStreams(final Downloader downloader,\n+                                           final Localization localization)\n+            throws ExtractionException {\n         if (liveStreams == null) {\n             try {\n                 final String site = downloader.get(\"https://streaming.media.ccc.de/streams/v2.json\",\n                         localization).responseBody();\n                 liveStreams = JsonParser.array().from(site);\n-            } catch (IOException | ReCaptchaException e) {\n+            } catch (final IOException | ReCaptchaException e) {\n                 throw new ExtractionException(\"Could not get live stream JSON.\", e);\n-            } catch (JsonParserException e) {\n+            } catch (final JsonParserException e) {\n                 throw new ExtractionException(\"Could not parse JSON.\", e);\n             }\n         }\n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "14c0c37d64883e795445bc8bd878df33ad6bdb9d", "message": "Merge commit", "committedDate": null}, {"oid": "4f04cfcccaaf49bb5362bb7a02f6450c446934b6", "committedDate": "2020-11-01 06:28:54 +0530", "message": "Switch from Calendar to OffsetDateTime in DateWrapper."}, {"oid": "b4e191397117447364d137791ec4b1ca3672d75b", "committedDate": "2020-12-27 13:25:48 +0100", "message": "[media.ccc.de] Play live streams"}, {"oid": "edf8dd0e9270c33229bb86d9b5f5a7d6b9d7d1c4", "committedDate": "2020-12-30 18:34:28 +0100", "message": "[media.ccc.de] Fix NPE in search results if they contain a future talk"}, {"oid": "a896ec41b9a44074684a8ffacd005b35223d30cf", "committedDate": "2020-12-31 17:03:23 +0100", "message": "[media.ccc.de] Use Pattern for getting the ive stream id"}, {"oid": "c3e23559d7183d378e3cd1e425290ffe6cea15f7", "committedDate": "2021-03-30 10:07:20 +0200", "message": "Remove unused imports"}, {"oid": "9f7e06c8177d2e536e23c223a0b23090d5551f3c", "committedDate": "2022-03-26 19:40:18 +0100", "message": "[MediaCCC] Fix checkstyle issues"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTQ5MzY3Mg==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/309#discussion_r511493672", "body": "```suggestion\r\n            final SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd\");\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd\");\n          \n          \n            \n                        final SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd\");", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            <span class=\"pl-smi\">SimpleDateFormat</span> sdf <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">SimpleDateFormat</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>yyyy-MM-dd<span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            <span class=\"pl-k x x-first\">final</span><span class=\"x x-last\"> </span><span class=\"pl-smi\">SimpleDateFormat</span> sdf <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">SimpleDateFormat</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>yyyy-MM-dd<span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "TobiGr", "createdAt": "2020-10-24T17:14:31Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeParsingHelper.java", "diffHunk": "@@ -185,7 +185,9 @@ public static String getFeedUrlFrom(final String channelIdOrUser) {\n     public static Calendar parseDateFrom(String textualUploadDate) throws ParsingException {\n         Date date;\n         try {\n-            date = new SimpleDateFormat(\"yyyy-MM-dd\").parse(textualUploadDate);\n+            SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd\");", "originalCommit": "f11fe87688beb27a051608c4f0facb2d8214b6d1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cd32e7436ea4781939608c8a9ed36b72f2173bc0", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeParsingHelper.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeParsingHelper.java\nindex cefab49d..ac7db985 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeParsingHelper.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeParsingHelper.java\n", "chunk": "@@ -183,9 +183,9 @@ public class YoutubeParsingHelper {\n     }\n \n     public static Calendar parseDateFrom(String textualUploadDate) throws ParsingException {\n-        Date date;\n+        final Date date;\n         try {\n-            SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd\");\n+            final SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd\");\n             sdf.setTimeZone(TimeZone.getTimeZone(\"GMT\"));\n             date = sdf.parse(textualUploadDate);\n         } catch (ParseException e) {\n", "next_change": null}]}, "revised_code_in_main": {"commit": "14c0c37d64883e795445bc8bd878df33ad6bdb9d", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeParsingHelper.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeParsingHelper.java\nindex cefab49d..ac7db985 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeParsingHelper.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeParsingHelper.java\n", "chunk": "@@ -183,9 +183,9 @@ public class YoutubeParsingHelper {\n     }\n \n     public static Calendar parseDateFrom(String textualUploadDate) throws ParsingException {\n-        Date date;\n+        final Date date;\n         try {\n-            SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd\");\n+            final SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd\");\n             sdf.setTimeZone(TimeZone.getTimeZone(\"GMT\"));\n             date = sdf.parse(textualUploadDate);\n         } catch (ParseException e) {\n", "next_change": {"commit": "4f04cfcccaaf49bb5362bb7a02f6450c446934b6", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeParsingHelper.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeParsingHelper.java\nindex ac7db985..3fb279b8 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeParsingHelper.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeParsingHelper.java\n", "chunk": "@@ -182,19 +180,12 @@ public class YoutubeParsingHelper {\n         }\n     }\n \n-    public static Calendar parseDateFrom(String textualUploadDate) throws ParsingException {\n-        final Date date;\n+    public static OffsetDateTime parseDateFrom(String textualUploadDate) throws ParsingException {\n         try {\n-            final SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd\");\n-            sdf.setTimeZone(TimeZone.getTimeZone(\"GMT\"));\n-            date = sdf.parse(textualUploadDate);\n-        } catch (ParseException e) {\n+            return OffsetDateTime.parse(textualUploadDate);\n+        } catch (DateTimeParseException e) {\n             throw new ParsingException(\"Could not parse date: \\\"\" + textualUploadDate + \"\\\"\", e);\n         }\n-\n-        final Calendar uploadDate = Calendar.getInstance();\n-        uploadDate.setTime(date);\n-        return uploadDate;\n     }\n \n     public static JsonObject getInitialData(String html) throws ParsingException {\n", "next_change": {"commit": "4fe28d7e3a3cf6ba18d4d74219fad22adcba4911", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeParsingHelper.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeParsingHelper.java\nindex 3fb279b8..8b924cf9 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeParsingHelper.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeParsingHelper.java\n", "chunk": "@@ -184,7 +186,11 @@ public class YoutubeParsingHelper {\n         try {\n             return OffsetDateTime.parse(textualUploadDate);\n         } catch (DateTimeParseException e) {\n-            throw new ParsingException(\"Could not parse date: \\\"\" + textualUploadDate + \"\\\"\", e);\n+            try {\n+                return LocalDate.parse(textualUploadDate).atStartOfDay().atOffset(ZoneOffset.UTC);\n+            } catch (DateTimeParseException e1) {\n+                throw new ParsingException(\"Could not parse date: \\\"\" + textualUploadDate + \"\\\"\", e1);\n+            }\n         }\n     }\n \n", "next_change": {"commit": "0efb854d27deeee0f9f85d6f5537aa137aeb07c0", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeParsingHelper.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeParsingHelper.java\nindex 8b924cf9..42420a1a 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeParsingHelper.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeParsingHelper.java\n", "chunk": "@@ -194,6 +192,10 @@ public class YoutubeParsingHelper {\n         }\n     }\n \n+    public static boolean isYoutubeMixId(String playlistId) {\n+        return playlistId.startsWith(\"RD\");\n+    }\n+\n     public static JsonObject getInitialData(String html) throws ParsingException {\n         try {\n             try {\n", "next_change": {"commit": "327a5730a883aa6725a629763a3df0cebda30d03", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeParsingHelper.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeParsingHelper.java\nindex 42420a1a..25879969 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeParsingHelper.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeParsingHelper.java\n", "chunk": "@@ -192,6 +192,12 @@ public class YoutubeParsingHelper {\n         }\n     }\n \n+    /**\n+     * Checks if the given playlist id is a mix (auto-generated playlist)\n+     * Ids from a mix start with \"RD\"\n+     * @param playlistId\n+     * @return Whether given id belongs to a mix\n+     */\n     public static boolean isYoutubeMixId(String playlistId) {\n         return playlistId.startsWith(\"RD\");\n     }\n", "next_change": {"commit": "3ff8619bcc703920705431e217d549726cefb830", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeParsingHelper.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeParsingHelper.java\nindex 25879969..4ac9724b 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeParsingHelper.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeParsingHelper.java\n", "chunk": "@@ -193,13 +193,23 @@ public class YoutubeParsingHelper {\n     }\n \n     /**\n-     * Checks if the given playlist id is a mix (auto-generated playlist)\n-     * Ids from a mix start with \"RD\"\n+     * Checks if the given playlist id is a youtube mix (auto-generated playlist)\n+     * Ids from a youtube mix start with \"RD\"\n      * @param playlistId\n-     * @return Whether given id belongs to a mix\n+     * @return Whether given id belongs to a youtube mix\n      */\n     public static boolean isYoutubeMixId(String playlistId) {\n-        return playlistId.startsWith(\"RD\");\n+        return playlistId.startsWith(\"RD\") && !isYoutubeMusicMixId(playlistId);\n+    }\n+\n+    /**\n+     * Checks if the given playlist id is a youtube music mix (auto-generated playlist)\n+     * Ids from a youtube music mix start with \"RD\"\n+     * @param playlistId\n+     * @return Whether given id belongs to a youtube music mix\n+     */\n+    public static boolean isYoutubeMusicMixId(String playlistId) {\n+        return playlistId.startsWith(\"RDAMVM\");\n     }\n \n     public static JsonObject getInitialData(String html) throws ParsingException {\n", "next_change": {"commit": "22d2f7e4006036aab8ac63478b791c4ab3de1624", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeParsingHelper.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeParsingHelper.java\nindex 4ac9724b..ea874306 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeParsingHelper.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeParsingHelper.java\n", "chunk": "@@ -193,22 +203,22 @@ public class YoutubeParsingHelper {\n     }\n \n     /**\n-     * Checks if the given playlist id is a youtube mix (auto-generated playlist)\n-     * Ids from a youtube mix start with \"RD\"\n+     * Checks if the given playlist id is a YouTube Mix (auto-generated playlist)\n+     * Ids from a YouTube Mix start with \"RD\"\n      * @param playlistId\n-     * @return Whether given id belongs to a youtube mix\n+     * @return Whether given id belongs to a YouTube Mix\n      */\n-    public static boolean isYoutubeMixId(String playlistId) {\n+    public static boolean isYoutubeMixId(final String playlistId) {\n         return playlistId.startsWith(\"RD\") && !isYoutubeMusicMixId(playlistId);\n     }\n \n     /**\n-     * Checks if the given playlist id is a youtube music mix (auto-generated playlist)\n-     * Ids from a youtube music mix start with \"RD\"\n+     * Checks if the given playlist id is a YouTube Music Mix (auto-generated playlist)\n+     * Ids from a YouTube Music Mix start with \"RD\"\n      * @param playlistId\n-     * @return Whether given id belongs to a youtube music mix\n+     * @return Whether given id belongs to a YouTube Music Mix\n      */\n-    public static boolean isYoutubeMusicMixId(String playlistId) {\n+    public static boolean isYoutubeMusicMixId(final String playlistId) {\n         return playlistId.startsWith(\"RDAMVM\");\n     }\n \n", "next_change": {"commit": "a338e4e08e385e741c18ce2d30ae1e5016599cf0", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeParsingHelper.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeParsingHelper.java\nindex ea874306..06f421a6 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeParsingHelper.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeParsingHelper.java\n", "chunk": "@@ -214,13 +214,44 @@ public class YoutubeParsingHelper {\n \n     /**\n      * Checks if the given playlist id is a YouTube Music Mix (auto-generated playlist)\n-     * Ids from a YouTube Music Mix start with \"RD\"\n+     * Ids from a YouTube Music Mix start with \"RDAMVM\"\n      * @param playlistId\n      * @return Whether given id belongs to a YouTube Music Mix\n      */\n     public static boolean isYoutubeMusicMixId(final String playlistId) {\n         return playlistId.startsWith(\"RDAMVM\");\n     }\n+    /**\n+     * Checks if the given playlist id is a YouTube Channel Mix (auto-generated playlist)\n+     * Ids from a YouTube channel Mix start with \"RDCM\"\n+     * @return Whether given id belongs to a YouTube Channel Mix\n+     */\n+    public static boolean isYoutubeChannelMixId(final String playlistId) {\n+        return playlistId.startsWith(\"RDCM\");\n+    }\n+\n+    /**\n+     * Extracts the video id from the playlist id for Mixes.\n+     * @throws ParsingException If the playlistId is a Channel Mix or not a mix.\n+     */\n+    public static String extractVideoIdFromMixId(final String playlistId) throws ParsingException {\n+        if (playlistId.startsWith(\"RDMM\")) { //My Mix\n+            return playlistId.substring(4);\n+\n+        } else if (playlistId.startsWith(\"RDAMVM\")) { //Music mix\n+            return playlistId.substring(6);\n+\n+        } else if (playlistId.startsWith(\"RMCM\")) { //Channel mix\n+            //Channel mix are build with RMCM{channelId}, so videoId can't be determined\n+            throw new ParsingException(\"Video id could not be determined from mix id: \" + playlistId);\n+\n+        } else if (playlistId.startsWith(\"RD\")) { // Normal mix\n+            return playlistId.substring(2);\n+\n+        } else { //not a mix\n+            throw new ParsingException(\"Video id could not be determined from mix id: \" + playlistId);\n+        }\n+    }\n \n     public static JsonObject getInitialData(String html) throws ParsingException {\n         try {\n", "next_change": {"commit": "41a8ed625d6dfbddc1c29f99586211e69207d662", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeParsingHelper.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeParsingHelper.java\nindex 06f421a6..05749bbd 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeParsingHelper.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeParsingHelper.java\n", "chunk": "@@ -253,7 +244,7 @@ public class YoutubeParsingHelper {\n         }\n     }\n \n-    public static JsonObject getInitialData(String html) throws ParsingException {\n+    public static JsonObject getInitialData(final String html) throws ParsingException {\n         try {\n             try {\n                 final String initialData = Parser.matchGroup1(\"window\\\\[\\\"ytInitialData\\\"\\\\]\\\\s*=\\\\s*(\\\\{.*?\\\\});\", html);\n", "next_change": {"commit": "5794eb2350aba4c01e1c3962eb5e1a92d0f12a72", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeParsingHelper.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeParsingHelper.java\nindex 05749bbd..ee59e70d 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeParsingHelper.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeParsingHelper.java\n", "chunk": "@@ -249,11 +277,11 @@ public class YoutubeParsingHelper {\n             try {\n                 final String initialData = Parser.matchGroup1(\"window\\\\[\\\"ytInitialData\\\"\\\\]\\\\s*=\\\\s*(\\\\{.*?\\\\});\", html);\n                 return JsonParser.object().from(initialData);\n-            } catch (Parser.RegexException e) {\n+            } catch (final Parser.RegexException e) {\n                 final String initialData = Parser.matchGroup1(\"var\\\\s*ytInitialData\\\\s*=\\\\s*(\\\\{.*?\\\\});\", html);\n                 return JsonParser.object().from(initialData);\n             }\n-        } catch (JsonParserException | Parser.RegexException e) {\n+        } catch (final JsonParserException | Parser.RegexException e) {\n             throw new ParsingException(\"Could not get ytInitialData\", e);\n         }\n     }\n", "next_change": {"commit": "991b2c7d7336d370ce2db0c7617dfb071d37d9ef", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeParsingHelper.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeParsingHelper.java\nindex ee59e70d..fba78cf3 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeParsingHelper.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeParsingHelper.java\n", "chunk": "@@ -286,25 +289,52 @@ public class YoutubeParsingHelper {\n         }\n     }\n \n-    public static boolean isHardcodedClientVersionValid() throws IOException, ExtractionException {\n-        final String url = \"https://www.youtube.com/results?search_query=test&pbj=1\";\n+    public static boolean areHardcodedClientVersionAndKeyValid() throws IOException, ExtractionException {\n+        if (areHardcodedClientVersionAndKeyValidRan) return areHardcodedClientVersionAndKeyValidValue;\n+        // @formatter:off\n+        final byte[] body = JsonWriter.string()\n+            .object()\n+                .object(\"context\")\n+                    .object(\"client\")\n+                        .value(\"hl\", \"en\")\n+                        .value(\"gl\", \"GB\")\n+                        .value(\"clientName\", \"1\")\n+                        .value(\"clientVersion\", HARDCODED_CLIENT_VERSION)\n+                    .end()\n+                .end()\n+            .end().done().getBytes(UTF_8);\n+        // @formatter:on\n \n         final Map<String, List<String>> headers = new HashMap<>();\n         headers.put(\"X-YouTube-Client-Name\", Collections.singletonList(\"1\"));\n         headers.put(\"X-YouTube-Client-Version\", Collections.singletonList(HARDCODED_CLIENT_VERSION));\n-        final String response = getDownloader().get(url, headers).responseBody();\n+        addCookieHeader(headers);\n+\n+        // This endpoint is fetched by the YouTube website to get the items of its main menu and is\n+        // pretty lightweight (around 30kB)\n+        final Response response = getDownloader().post(\"https://youtubei.googleapis.com/youtubei/v1/guide?key=\"\n+                        + HARDCODED_KEY, headers, body);\n+        final String responseBody = response.responseBody();\n+        final int responseCode = response.responseCode();\n \n-        return response.length() > 50; // ensure to have a valid response\n+        areHardcodedClientVersionAndKeyValidValue = responseBody.length() > 5000\n+                && responseCode == 200; // Ensure to have a valid response\n+        areHardcodedClientVersionAndKeyValidRan = true;\n+        return areHardcodedClientVersionAndKeyValidValue;\n     }\n \n     private static void extractClientVersionAndKey() throws IOException, ExtractionException {\n-        final String url = \"https://www.youtube.com/results?search_query=test\";\n+        // Don't extract the client version and the innertube API key if it has been already extracted\n+        if (!keyAndVersionExtracted) return;\n+        // Don't provide a search term in order to have a smaller response\n+        final String url = \"https://www.youtube.com/results?search_query=\";\n         final String html = getDownloader().get(url).responseBody();\n         final JsonObject initialData = getInitialData(html);\n-        final JsonArray serviceTrackingParams = initialData.getObject(\"responseContext\").getArray(\"serviceTrackingParams\");\n+        final JsonArray serviceTrackingParams = initialData.getObject(\"responseContext\")\n+                .getArray(\"serviceTrackingParams\");\n         String shortClientVersion = null;\n \n-        // try to get version from initial data first\n+        // Try to get version from initial data first\n         for (final Object service : serviceTrackingParams) {\n             final JsonObject s = (JsonObject) service;\n             if (s.getString(\"service\").equals(\"CSI\")) {\n", "next_change": {"commit": "740a37a2de414eb071e891685304048ae23fec5c", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeParsingHelper.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeParsingHelper.java\nindex fba78cf3..bbf6168a 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeParsingHelper.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeParsingHelper.java\n", "chunk": "@@ -341,18 +474,19 @@ public class YoutubeParsingHelper {\n                 final JsonArray params = s.getArray(\"params\");\n                 for (final Object param : params) {\n                     final JsonObject p = (JsonObject) param;\n-                    final String key = p.getString(\"key\");\n-                    if (key != null && key.equals(\"cver\")) {\n+                    final String paramKey = p.getString(\"key\");\n+                    if (paramKey != null && paramKey.equals(\"cver\")) {\n                         clientVersion = p.getString(\"value\");\n                     }\n                 }\n             } else if (s.getString(\"service\").equals(\"ECATCHER\")) {\n-                // Fallback to get a shortened client version which does not contain the last two digits\n+                // Fallback to get a shortened client version which does not contain the last two\n+                // digits\n                 final JsonArray params = s.getArray(\"params\");\n                 for (final Object param : params) {\n                     final JsonObject p = (JsonObject) param;\n-                    final String key = p.getString(\"key\");\n-                    if (key != null && key.equals(\"client.version\")) {\n+                    final String paramKey = p.getString(\"key\");\n+                    if (paramKey != null && paramKey.equals(\"client.version\")) {\n                         shortClientVersion = p.getString(\"value\");\n                     }\n                 }\n", "next_change": {"commit": "7d07924de8ee57358696d11ae842e32c938d5f35", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeParsingHelper.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeParsingHelper.java\nindex bbf6168a..12a992e1 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeParsingHelper.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeParsingHelper.java\n", "chunk": "@@ -493,21 +557,10 @@ public final class YoutubeParsingHelper {\n             }\n         }\n \n-        String contextClientVersion;\n-        final String[] patterns = {\n-                \"INNERTUBE_CONTEXT_CLIENT_VERSION\\\":\\\"([0-9\\\\.]+?)\\\"\",\n-                \"innertube_context_client_version\\\":\\\"([0-9\\\\.]+?)\\\"\",\n-                \"client.version=([0-9\\\\.]+)\"\n-        };\n-        for (final String pattern : patterns) {\n-            try {\n-                contextClientVersion = Parser.matchGroup1(pattern, html);\n-                if (!isNullOrEmpty(contextClientVersion)) {\n-                    clientVersion = contextClientVersion;\n-                    break;\n-                }\n-            } catch (final Parser.RegexException ignored) {\n-            }\n+        try {\n+            clientVersion = getStringResultFromRegexArray(html,\n+                    INNERTUBE_CONTEXT_CLIENT_VERSION_REGEXES, 1);\n+        } catch (final Parser.RegexException ignored) {\n         }\n \n         if (!isNullOrEmpty(clientVersion) && !isNullOrEmpty(shortClientVersion)) {\n", "next_change": {"commit": "d7e678aca2db9555346d7f1bd08aae9d053c048c", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeParsingHelper.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeParsingHelper.java\nindex 12a992e1..68244c48 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeParsingHelper.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeParsingHelper.java\n", "chunk": "@@ -521,61 +641,79 @@ public final class YoutubeParsingHelper {\n         if (keyAndVersionExtracted) {\n             return;\n         }\n+\n         // Don't provide a search term in order to have a smaller response\n         final String url = \"https://www.youtube.com/results?search_query=&ucbcb=1\";\n-        final Map<String, List<String>> headers = new HashMap<>();\n-        addCookieHeader(headers);\n-        final String html = getDownloader().get(url, headers).responseBody();\n+        final String html = getDownloader().get(url, getCookieHeader()).responseBody();\n         final JsonObject initialData = getInitialData(html);\n         final JsonArray serviceTrackingParams = initialData.getObject(\"responseContext\")\n                 .getArray(\"serviceTrackingParams\");\n-        String shortClientVersion = null;\n \n         // Try to get version from initial data first\n-        for (final Object service : serviceTrackingParams) {\n-            final JsonObject s = (JsonObject) service;\n-            if (s.getString(\"service\").equals(\"CSI\")) {\n-                final JsonArray params = s.getArray(\"params\");\n-                for (final Object param : params) {\n-                    final JsonObject p = (JsonObject) param;\n-                    final String paramKey = p.getString(\"key\");\n-                    if (paramKey != null && paramKey.equals(\"cver\")) {\n-                        clientVersion = p.getString(\"value\");\n-                    }\n-                }\n-            } else if (s.getString(\"service\").equals(\"ECATCHER\")) {\n-                // Fallback to get a shortened client version which does not contain the last two\n-                // digits\n-                final JsonArray params = s.getArray(\"params\");\n-                for (final Object param : params) {\n-                    final JsonObject p = (JsonObject) param;\n-                    final String paramKey = p.getString(\"key\");\n-                    if (paramKey != null && paramKey.equals(\"client.version\")) {\n-                        shortClientVersion = p.getString(\"value\");\n-                    }\n-                }\n+        final Stream<JsonObject> serviceTrackingParamsStream = serviceTrackingParams.stream()\n+                .filter(JsonObject.class::isInstance)\n+                .map(JsonObject.class::cast);\n+\n+        clientVersion = getClientVersionFromServiceTrackingParam(\n+                serviceTrackingParamsStream, \"CSI\", \"cver\");\n+\n+        if (clientVersion == null) {\n+            try {\n+                clientVersion = getStringResultFromRegexArray(html,\n+                        INNERTUBE_CONTEXT_CLIENT_VERSION_REGEXES, 1);\n+            } catch (final Parser.RegexException ignored) {\n             }\n         }\n \n+        // Fallback to get a shortened client version which does not contain the last two\n+        // digits\n+        if (isNullOrEmpty(clientVersion)) {\n+            clientVersion = getClientVersionFromServiceTrackingParam(\n+                    serviceTrackingParamsStream, \"ECATCHER\", \"client.version\");\n+        }\n+\n         try {\n-            clientVersion = getStringResultFromRegexArray(html,\n-                    INNERTUBE_CONTEXT_CLIENT_VERSION_REGEXES, 1);\n+            key = getStringResultFromRegexArray(html, INNERTUBE_API_KEY_REGEXES, 1);\n         } catch (final Parser.RegexException ignored) {\n         }\n \n-        if (!isNullOrEmpty(clientVersion) && !isNullOrEmpty(shortClientVersion)) {\n-            clientVersion = shortClientVersion;\n+        if (isNullOrEmpty(key)) {\n+            throw new ParsingException(\n+                    // CHECKSTYLE:OFF\n+                    \"Could not extract YouTube WEB InnerTube API key from HTML search results page\");\n+                    // CHECKSTYLE:ON\n         }\n \n-        try {\n-            key = getStringResultFromRegexArray(html, INNERTUBE_API_KEY_REGEXES, 1);\n-        } catch (final Parser.RegexException e) {\n+        if (clientVersion == null) {\n             throw new ParsingException(\n-                    \"Could not extract YouTube WEB InnerTube client version and API key from HTML search results page\");\n+                    // CHECKSTYLE:OFF\n+                    \"Could not extract YouTube WEB InnerTube client version from HTML search results page\");\n+                    // CHECKSTYLE:ON\n         }\n+\n         keyAndVersionExtracted = true;\n     }\n \n+    @Nullable\n+    private static String getClientVersionFromServiceTrackingParam(\n+            @Nonnull final Stream<JsonObject> serviceTrackingParamsStream,\n+            @Nonnull final String serviceName,\n+            @Nonnull final String clientVersionKey) {\n+        return serviceTrackingParamsStream.filter(serviceTrackingParam ->\n+                        serviceTrackingParam.getString(\"service\", \"\")\n+                                .equals(serviceName))\n+                .flatMap(serviceTrackingParam -> serviceTrackingParam.getArray(\"params\")\n+                        .stream())\n+                .filter(JsonObject.class::isInstance)\n+                .map(JsonObject.class::cast)\n+                .filter(param -> param.getString(\"key\", \"\")\n+                        .equals(clientVersionKey))\n+                .map(param -> param.getString(\"value\"))\n+                .filter(paramValue -> !isNullOrEmpty(paramValue))\n+                .findFirst()\n+                .orElse(null);\n+    }\n+\n     /**\n      * Get the client version used by YouTube website on InnerTube requests.\n      */\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "14c0c37d64883e795445bc8bd878df33ad6bdb9d", "message": "Merge commit", "committedDate": null}, {"oid": "c190a3029bf0a3ae36e584f1e74e83e4ba8137c4", "committedDate": "2020-10-31 20:58:28 +0100", "message": "Consider protocol as base url when it is a custom one (e.g. vnd.youtube)"}, {"oid": "4f04cfcccaaf49bb5362bb7a02f6450c446934b6", "committedDate": "2020-11-01 06:28:54 +0530", "message": "Switch from Calendar to OffsetDateTime in DateWrapper."}, {"oid": "4fe28d7e3a3cf6ba18d4d74219fad22adcba4911", "committedDate": "2020-11-04 05:49:42 +0530", "message": "Fix YouTube parse error when only a date is present."}, {"oid": "2174055ef8cc20b0059dc0e82680ceccc47b492e", "committedDate": "2020-11-11 15:12:31 +0000", "message": "Update Invidious URL list in Parsing Helper"}, {"oid": "0efb854d27deeee0f9f85d6f5537aa137aeb07c0", "committedDate": "2020-12-12 20:30:57 +0100", "message": "[Youtube] Implement mix extractor for auto-generated playlists."}, {"oid": "327a5730a883aa6725a629763a3df0cebda30d03", "committedDate": "2020-12-12 20:30:57 +0100", "message": "[Youtube] Add some comments to mix"}, {"oid": "3ff8619bcc703920705431e217d549726cefb830", "committedDate": "2020-12-12 20:30:57 +0100", "message": "[Youtube] apply wb9688 suggestion (mix)"}, {"oid": "22d2f7e4006036aab8ac63478b791c4ab3de1624", "committedDate": "2020-12-12 20:32:40 +0100", "message": "[Youtube] Add cookies to youtube mix request"}, {"oid": "a338e4e08e385e741c18ce2d30ae1e5016599cf0", "committedDate": "2020-12-12 20:32:43 +0100", "message": "[Youtube] Apply review suggestions and avoid channel mix edge case"}, {"oid": "f90f6fcf92b355f668656e9e277bdb2086d11ab5", "committedDate": "2020-12-12 20:40:13 +0100", "message": "[YouTube] Don't escape & in getUrlFromNavigationEndpoint for playlists"}, {"oid": "ba8782a9ed20271bca01b87ec22d8edc8652c45e", "committedDate": "2020-12-16 08:32:04 +0100", "message": "Use lowercase string for extracting cookies"}, {"oid": "cdcb66b93e5a57f6a676b27f3a2ba9a1b923dc01", "committedDate": "2020-12-16 08:35:28 +0100", "message": "Clean up stuff from mix pl"}, {"oid": "bc6de149527fabb235068bfed538194316054ddb", "committedDate": "2020-12-22 18:19:26 +0100", "message": "Extract stream and search meta info for YouTube"}, {"oid": "41a8ed625d6dfbddc1c29f99586211e69207d662", "committedDate": "2020-12-22 18:19:26 +0100", "message": "Make some vars final and add annotations to methods"}, {"oid": "3033c0b99334489a64c78e042bde3443073f4341", "committedDate": "2020-12-23 21:08:36 +0100", "message": "[YouTube] Music Mix: Fix playlist not being accepted"}, {"oid": "d9e2da53c3b781c77f7726da6131f3e01c28e161", "committedDate": "2020-12-25 15:00:34 +0100", "message": "Replace explicit string checks whether a playlist \u00edd is a certain YouTube Mix type with calling the dedicated methods"}, {"oid": "35e299759ecd09c020b93f59f2f94ad1c3d58b7e", "committedDate": "2021-01-10 20:24:50 +0100", "message": "Add method to allow resetting youtube client version and key"}, {"oid": "6ca7123d5d87a19b17f2fd6f595e5b884b3bec73", "committedDate": "2021-01-14 20:01:52 +0100", "message": "Add comment for usage of YoutubeParsingHelper.resetClientVersionAndKey"}, {"oid": "53d3f7989baca199aaad450ad6e91f81ec9e906d", "committedDate": "2021-01-22 19:30:25 +0100", "message": "update invidious instances list"}, {"oid": "d728c4fad0cd3b59c9fe439539daea4ac8f49a04", "committedDate": "2021-01-29 23:16:40 +0100", "message": "Remove unused imports"}, {"oid": "a931e31239159c16f98cddc38d507dfddcae54ed", "committedDate": "2021-02-12 22:36:18 +0100", "message": "fix tests"}, {"oid": "2859c7ba5c9b3b7931558213d0a2b1fd38ec6a04", "committedDate": "2021-02-13 12:10:41 +0100", "message": "add comment explaining why .substring(23)"}, {"oid": "b43f3474f53c5f60d0230e5a6ccb3113462e3b32", "committedDate": "2021-02-13 20:00:49 +0100", "message": "Make resetClientVersionAndKey public"}, {"oid": "9ca52ca68ae4de3786052895c3081d938227daad", "committedDate": "2021-02-15 18:47:54 +0100", "message": "use only one constant UTF-8"}, {"oid": "557934cb1720554a177151b22bc86b7e1f9c8c46", "committedDate": "2021-02-15 18:51:46 +0100", "message": "use EMPTY_STRING"}, {"oid": "26d50aca05c0135ed505a226f2760c78d386050b", "committedDate": "2021-02-17 19:21:39 +0100", "message": "Add comment explaining YoutubeParsingHelper.resetClientVersionAndKey"}, {"oid": "1a322ad8edcf54e90f84d236fbe6dce1a9d8ae47", "committedDate": "2021-02-18 16:36:40 +0100", "message": "Add uploader verified by service extraction"}, {"oid": "43b46bd40860d5bb994f19363b6b5784076144e3", "committedDate": "2021-03-03 19:49:26 +0100", "message": "Use new youtube continuations api for playlists"}, {"oid": "03b00ff1d66e79af630909e5cb2e8ea33519ebe6", "committedDate": "2021-03-04 18:58:51 +0100", "message": "Move toJsonArray and toJsonObject to JsonUtils"}, {"oid": "ed850d0688d069a7f54f2c9c9bfd2be0f58ce055", "committedDate": "2021-03-05 13:37:08 +0100", "message": "[youtube] improve comments extraction performance"}, {"oid": "ce7cbbc9a0e7d9fe99319600316a467c92632367", "committedDate": "2021-03-24 09:14:09 +0100", "message": "[YouTube] Fix trending getName()"}, {"oid": "eda1b6e199caa81e7529a04d0672a29850ebd295", "committedDate": "2021-04-06 18:14:38 +0200", "message": "Use Page.body for YoutubePlaylistExtractor"}, {"oid": "883f16e0ad943570bbc9613949ef144e5962386d", "committedDate": "2021-04-07 14:11:37 +0200", "message": "[YouTube] Set CONSENT cookie"}, {"oid": "4833df60e50b3dc5e4254f01906a038008dcb66f", "committedDate": "2021-04-08 16:36:55 +0200", "message": "Add method to inject Random into YoutubeParsingHelper and use in tests"}, {"oid": "33173eb3e61653c9b610c7e6ab97a258253b88f3", "committedDate": "2021-04-09 11:59:17 +0200", "message": "Make CONSENT COOKIE constants private"}, {"oid": "55e0f8e725e45f06513d43875fee6644ea9a8066", "committedDate": "2021-04-10 11:33:34 +0200", "message": "Merge branch 'master' into dev"}, {"oid": "7f202db8b1b12f46b228829aba334fc795405646", "committedDate": "2021-04-26 11:49:47 +0200", "message": "Fix Google URL detection (#617)"}, {"oid": "bb3861ddce396a4578ff9eb882333cb2124c9e51", "committedDate": "2021-05-01 17:50:19 +0200", "message": "Add AccountTerminatedException for better error handling of terminated channels"}, {"oid": "fc998589dc5adcb4a24e052b2f3e7e1ed72b30fe", "committedDate": "2021-05-01 17:50:19 +0200", "message": "Detect channels which have been terminated due to copyright infringement"}, {"oid": "f4404b5cc8c565067dc2e2b0b05248dafe0c5d58", "committedDate": "2021-05-01 17:50:19 +0200", "message": "Add tests for more reasons"}, {"oid": "b96b2a6ebad0539f23eecbea2849be6cdee7fa0e", "committedDate": "2021-06-23 14:39:10 +0200", "message": "Update invidious instances"}, {"oid": "9ca6dc26eddd27da35bf16e0b59755556bb95f2f", "committedDate": "2021-07-03 13:27:40 +0200", "message": "Fix invalid CONSENT cookie value"}, {"oid": "5794eb2350aba4c01e1c3962eb5e1a92d0f12a72", "committedDate": "2021-08-01 12:36:12 +0200", "message": "Use the youtubei API for YouTube playlists"}, {"oid": "f461224b2bd3e30be0612451a0883ebc5029b229", "committedDate": "2021-08-01 12:36:28 +0200", "message": "Use the youtubei API for YouTube searches + update mocks"}, {"oid": "77c031a88ab35102a6d6da6b1f8eaa6c6dbea6a0", "committedDate": "2021-08-01 12:36:28 +0200", "message": "Use the youtubei API for YouTube trends"}, {"oid": "9ab9c66ddfe5204aad3b611dc76d67b7f0e4a0b5", "committedDate": "2021-08-01 12:37:56 +0200", "message": "Use the youtubei.googleapis.com domain for YouTube Music searches + change a check + update client version and mocks"}, {"oid": "991b2c7d7336d370ce2db0c7617dfb071d37d9ef", "committedDate": "2021-08-01 12:38:01 +0200", "message": "Use lightweight requests when getting and checking YouTube API key and client version"}, {"oid": "b49ae547a32281fd344cae0b1532b896ab5fbab4", "committedDate": "2021-08-01 12:38:01 +0200", "message": "Do some improvements to YoutubeStreamExtractor"}, {"oid": "e075dd5a63856d7cdf760a614153936b6575363e", "committedDate": "2021-08-01 12:38:02 +0200", "message": "Update client version, fix some tests, update mocks and do some improvements"}, {"oid": "f46cfb0f26140c8439c7eae07e6a436ff03da159", "committedDate": "2021-08-01 12:38:03 +0200", "message": "Adress reviews and do some improvements"}, {"oid": "4d682834c342c615f567134321faa0cf20f12117", "committedDate": "2021-08-01 12:38:03 +0200", "message": "Fix localization and update client version"}, {"oid": "f73c923f60dced73e8ad409684e7e31d209b816b", "committedDate": "2021-08-01 12:38:34 +0200", "message": "Don't use the youtubei.googleapis.com but the websites domains + update client version of the desktop internal API"}, {"oid": "e7d589edbf606cb8e6684f88948f44abcd9a1419", "committedDate": "2021-08-01 12:38:36 +0200", "message": "Use the youtubei API for YouTube videos + update client version"}, {"oid": "013b90253591b3579f18ea9a155f27d6a9d84163", "committedDate": "2021-08-01 12:38:36 +0200", "message": "Use the Android mobile API when there are OTF streams or the content is protected by signatureCiphers"}, {"oid": "0f9e9b8b4b99b9a1f7b7d17742a2bab8c466c5d4", "committedDate": "2021-08-01 12:38:37 +0200", "message": "Use the youtubei API for YouTube mixes + update the corresponding test + do some improvements"}, {"oid": "70927ddade31e8d3d2ca3118e245f3761329c920", "committedDate": "2021-08-01 12:38:40 +0200", "message": "Update client version and mocks"}, {"oid": "54d4551ca60153d3d3d1bfd63e10839777ff3e1f", "committedDate": "2021-08-01 12:38:42 +0200", "message": "Adress requested changes in YoutubeParsingHelper and update mobile client version"}, {"oid": "34a9ccb0fd2cdba0c261a225a8cfc74703c1e3b7", "committedDate": "2021-08-01 12:38:42 +0200", "message": "Adress requested changes"}, {"oid": "657f165771fdf907d16a2af498d5a89d062645d7", "committedDate": "2021-08-01 12:38:44 +0200", "message": "Update client version and mocks"}, {"oid": "632772d17f5f5fb300365e16831bfb43124bd5f9", "committedDate": "2021-08-01 12:38:58 +0200", "message": "Adress requested changes in YoutubeParsingHelper"}, {"oid": "a6a2c6eb8032af8830dade1d686d9b1c41941726", "committedDate": "2021-08-01 12:38:59 +0200", "message": "Revert the use of Collections.singletonList instead of Arrays.asList in addCookieHeader of YoutubeParsingHelper"}, {"oid": "1a6b8da438a4d4ca7a59e368a5e62843b1926308", "committedDate": "2021-08-01 12:38:59 +0200", "message": "Annotate YoutubeParsingHelper methods with Nonnull when needed"}, {"oid": "4299d806a2b9353ae9cd90a30a12dd877a18c2ab", "committedDate": "2021-08-01 12:38:59 +0200", "message": "Adress changes"}, {"oid": "609919db59190229e1aad67ca74e81e8d0505496", "committedDate": "2021-08-01 12:39:00 +0200", "message": "Adress again reviews, fix some rebase issues"}, {"oid": "8aa60d7e8fd3808a9b7a497996743212e8ffbe8d", "committedDate": "2021-08-01 12:39:01 +0200", "message": "Update clients version"}, {"oid": "7753556e66e0a7cce6278513f7a9e3e98eb6a2ce", "committedDate": "2021-08-01 12:39:03 +0200", "message": "Adress the last requested changes + update YoutubeCommentsExtractor mocks"}, {"oid": "2eeb0a3403e1291f5cf740b94cc7c9b6a2a1b401", "committedDate": "2021-08-01 12:39:03 +0200", "message": "Rebase + some code improvements + fix extraction of age-restricted videos + update clients version"}, {"oid": "0e16091ce09d6086853f5f9f54c2a156873a44c0", "committedDate": "2021-08-12 10:06:41 +0200", "message": "Add invidious instance EduVid Tubus"}, {"oid": "3e8e2a1532681321c7c349342e032414baee5051", "committedDate": "2021-10-22 22:48:18 +0300", "message": "Add support for y2u.be links"}, {"oid": "dd8687f9fe0dcc7289bfd86cddc1a904506b16d4", "committedDate": "2022-03-01 23:02:56 +0100", "message": "[YouTube] Fix music mixes in some countries"}, {"oid": "50db871d8982f93086a642080e34350f0c25b220", "committedDate": "2022-03-19 10:44:06 +0100", "message": "[YouTube] Extract mixes from streams related items"}, {"oid": "8f9d5b858efca0b8420fa7b3c5067a0a945fd32f", "committedDate": "2022-03-19 10:44:06 +0100", "message": "[YouTube] Remove useless comments about mixes"}, {"oid": "63ed06a7107261118a19d2f7ef59b0fe3eb5800f", "committedDate": "2022-03-19 10:46:31 +0100", "message": "[YouTube] Differentiate genre mixes from normal mixes"}, {"oid": "401082abe451368fd4af816ec179dbbd3d174977", "committedDate": "2022-03-19 10:48:12 +0100", "message": "[YouTube] Extract playlist type in playlist extractor"}, {"oid": "aa6b7272a4a27204c2d8784533728eb86a4db75f", "committedDate": "2022-03-20 08:35:56 +0100", "message": "Merge pull request #804 from Stypox/fix-yt-music-mix"}, {"oid": "740a37a2de414eb071e891685304048ae23fec5c", "committedDate": "2022-03-26 19:42:40 +0100", "message": "[YouTube] Fix checkstyle issues"}, {"oid": "7598b40957966416a9ba608909c9f7d717dada78", "committedDate": "2022-03-26 20:52:24 +0100", "message": "Workaround for incorrect duration for \"YT shorts\" videos in channels"}, {"oid": "adbbdc7a5b1d41e4e16cb57354754999b136ecb1", "committedDate": "2022-03-26 22:07:14 +0100", "message": "[YouTube] Fix regex warning: use ' {2}' instead of '  '"}, {"oid": "83f374bff109d73f80a1eb2043f93d667939f3cd", "committedDate": "2022-03-27 20:51:38 +0200", "message": "[YouTube] Update client versions and fix a bug when using resetClientVersionAndKey method"}, {"oid": "05b7fee23bc963cbc11f7ad95f259848d425e3a8", "committedDate": "2022-03-27 20:51:38 +0200", "message": "[YouTube] Add the cpn param to playback requests and try to spoof better the Android client"}, {"oid": "7d07924de8ee57358696d11ae842e32c938d5f35", "committedDate": "2022-03-27 20:51:38 +0200", "message": "[YouTube] Try to use lighter requests when extracting client version and key from YouTube and YouTube Music"}, {"oid": "26f93f5bb08367c3a8cd89564b4b6d714115afaa", "committedDate": "2022-03-27 20:51:38 +0200", "message": "[YouTube] Extract streams of livestreams from the iOS client and disabled the Android client for livestreams"}, {"oid": "b6bc521f0d5c0bf0767b1fb72f603f47d85a7170", "committedDate": "2022-03-27 20:51:38 +0200", "message": "[YouTube] Update client versions again"}, {"oid": "d0d91e669033d0d9f7203363fba3f4803348fd92", "committedDate": "2022-03-27 20:51:39 +0200", "message": "Adress requested changes"}, {"oid": "349ba8db7f13423c62ee660b7e30a933bb8b2204", "committedDate": "2022-03-27 20:52:38 +0200", "message": "Improve tests and randomness"}, {"oid": "3d38459cf37ff3d34decec4f01035861706f43b6", "committedDate": "2022-03-27 20:52:40 +0200", "message": "[YouTube] Reduce InnerTube response sizes by adding the prettyPrint parameter with the false value"}, {"oid": "1dad3bfe8bacec428cad1f19ecfee9c6a4eaf701", "committedDate": "2022-03-27 20:52:40 +0200", "message": "[YouTube] Update again hardcoded client versions and update mobile user agents"}, {"oid": "2e3da445e60b0b1712eba644f81e580a83dbd498", "committedDate": "2022-03-27 22:10:57 +0200", "message": "[YouTube] Add documentation about parameters added and clients versions and key"}, {"oid": "dfa42396616b032e50fd7d5029b7c0e969b7eb44", "committedDate": "2022-03-27 22:10:57 +0200", "message": "Fix missing imports and Checkstyle issues"}, {"oid": "67288a0191f030130c061ddc8ff1e2315e821a42", "committedDate": "2022-04-02 19:06:36 +0200", "message": "[YouTube] Fix extraction of embeddable age-restricted videos, fix extraction of contents with warnings and more"}, {"oid": "2e1c5c119d9657461177b2b5d22b84ffcb927c4d", "committedDate": "2022-05-02 19:03:54 +0200", "message": "Merge pull request #822 from Stypox/more-refactors"}, {"oid": "c34b5e3a8bd4702236df367cbb164214adb8aefa", "committedDate": "2022-05-15 11:20:06 +0200", "message": "[YouTube] Fix extraction of YouTube Music client version and API key when using YouTube Music's website in EU"}, {"oid": "a85768444250a63d7b289b7ceb08d5e1b2b46d79", "committedDate": "2022-05-28 12:00:44 +0200", "message": "Apply changes in YoutubeStreamExtractor"}, {"oid": "aa4c10e7517f60359f6c3fc911c67d2cd125b79a", "committedDate": "2022-05-28 12:00:46 +0200", "message": "Improve documentation and adress most of the requested changes"}, {"oid": "50272db9464f742e937a222db1c69e07adacdd9d", "committedDate": "2022-05-28 12:00:49 +0200", "message": "Apply reviews: improve comments, remove FILE, remove Stream#equals(Stream)"}, {"oid": "f17f7b9842973757d57b25014ec6c39138ca48ec", "committedDate": "2022-05-28 12:00:55 +0200", "message": "Apply requested changes in YoutubeParsingHelper"}, {"oid": "ff60e05c76df12d4fcf0f8d7b07673261a9b3a89", "committedDate": "2022-07-27 07:35:57 +0530", "message": "Use Collections.singletonMap()."}, {"oid": "1af6b8eedbdf341724441f9b69526196fa94bb67", "committedDate": "2022-07-27 07:35:57 +0530", "message": "Use Collections.singletonList()."}, {"oid": "d7e678aca2db9555346d7f1bd08aae9d053c048c", "committedDate": "2022-08-12 19:20:30 +0200", "message": "[YouTube] Improve WEB client version and API key HTML extraction"}, {"oid": "d0549a5a52104ef9cd200fee22b2f3b4bfe3d9fb", "committedDate": "2022-08-12 19:20:31 +0200", "message": "[YouTube] Update client versions and use a real version for the iOS client"}, {"oid": "c82317e318217e7c32245aaee17902769459767a", "committedDate": "2022-08-12 19:20:31 +0200", "message": "[YouTube] Spoof more mobile clients"}, {"oid": "ecfc3706858b0b8da4a0284a02b85556f00e46c8", "committedDate": "2022-08-14 14:48:27 +0200", "message": "Fixed all YTMixPlaylists"}, {"oid": "8ff7a90f52fe7c705f07e67023e848628618e8f1", "committedDate": "2022-08-21 18:41:40 +0200", "message": "Improved consent cookie related constants and documentation"}, {"oid": "943b7c033bb9d07ead63ddab4441c287653e4384", "committedDate": "2022-08-24 06:59:17 +0530", "message": "Remove EMPTY_STRING."}, {"oid": "6a256d063168fff202c2e6530403569aaf332991", "committedDate": "2022-10-30 13:00:19 +0000", "message": "Add uploader url and verified to PlaylistInfoItem."}, {"oid": "099b53cc4f150efeb3d85b4f4b766e790b86be8a", "committedDate": "2022-11-02 23:11:33 +0100", "message": "[YouTube] Add parser for attributedDescription"}, {"oid": "592e1d6386c5190f82daad82c9a451731763e5ed", "committedDate": "2022-11-03 12:10:52 +0100", "message": "fix: parsing attributed description with no command runs"}, {"oid": "316d8573fa3234ea31e345d203772aff2f65577e", "committedDate": "2022-11-07 07:50:26 +0530", "message": "Use immutable sets in YoutubeParsingHelper."}, {"oid": "c9635218e2f96198737b63874014e3e5e2e363a0", "committedDate": "2022-11-09 09:41:29 +0100", "message": "[YouTube] Improve duration parsing"}, {"oid": "366f5c1632c38a2dc376dd472ba81f554eba51b8", "committedDate": "2022-11-12 07:29:15 +0530", "message": "Use StandardCharsets.UTF_8."}, {"oid": "ddbce3b83d5475824251c77e24cc89947e9e7b34", "committedDate": "2022-11-12 07:29:15 +0530", "message": "Add Utils methods for URL encoding/decoding using UTF-8."}, {"oid": "2211a24b6934a8a8cdf5547ea1b52daa4cb5de6c", "committedDate": "2022-11-16 16:14:54 +0100", "message": "Merge pull request #971 from lrusso96/patch-1"}, {"oid": "e9a0d3bd95074ab057c0674e49f2dd333600347f", "committedDate": "2022-11-22 11:37:16 +0100", "message": "[YouTube] Send Content-Type header in all POST requests"}, {"oid": "3891542ca124d510630d0a783e27d20027080200", "committedDate": "2022-11-22 11:37:18 +0100", "message": "Use Downloader's postWithContentType and postWithContentTypeJson methods in services and extractors"}, {"oid": "52fda37915153592cbc6eb854f3ab54ab4be8b79", "committedDate": "2022-11-28 19:06:18 +0000", "message": "Implement bold/italic/strike-through support."}, {"oid": "d5437e0bc5b7f9a2f8698c751fc1dfe0b750f127", "committedDate": "2022-12-16 19:32:56 +0100", "message": "Merge pull request #863 from AudricV/add-content-type-and-content-length-headers-to-post-requests"}, {"oid": "01acf7943650b3a4cefe75e9aab5f2aab7cfab32", "committedDate": "2022-12-31 20:05:32 +0000", "message": "Fix for potential XSS attacks."}, {"oid": "d8ce08d9694b53d105a0fd8d9ad19c26b3de84bd", "committedDate": "2023-01-02 07:50:31 +0530", "message": "Use immutable Map factory methods."}, {"oid": "219c5c5be5f8d89d3fb2c48fbfb547441ef50de5", "committedDate": "2023-01-02 18:11:03 +0100", "message": "Update extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeParsingHelper.java"}, {"oid": "45636b0d00bd3a11c749bfae0fd45d09ab42d14c", "committedDate": "2023-01-02 18:11:14 +0100", "message": "Merge pull request #986 from Isira-Seneviratne/Static_maps"}, {"oid": "56aab4d971bf52b2f0625b6d74fd77d9a1d80670", "committedDate": "2023-01-05 00:28:12 +0100", "message": "[YouTube] Fix escaping links in YouTubeParsingHelper.getTextFromObject"}, {"oid": "72939918320c721b7b70f489f5ce42e2b2224b26", "committedDate": "2023-01-15 23:28:59 +0100", "message": "[YouTube] Now music mixes can be treated as normal mixes"}, {"oid": "3f7df9536effad6ad79b20e22d06d39d09c80e54", "committedDate": "2023-01-29 20:33:51 +0100", "message": "[YouTube] Fix getting the comment text if the comment contains a hashtag"}, {"oid": "1556adbb2d34cc8bb51678a70983dd502fd1052e", "committedDate": "2023-02-26 18:43:36 +0100", "message": "[YouTube] Fix hashtags links extraction and escape text in attribute descriptions + HTML links"}, {"oid": "8d1303e18fcfe6f527f7a0e7cd2db4a23466663e", "committedDate": "2023-03-28 00:02:20 +0200", "message": "Add track types to audio streams (#1041)"}, {"oid": "47aa9fed40d2f77f00428c1d5629dbc6e1ff280b", "committedDate": "2023-04-16 19:25:05 +0200", "message": "fix: set musicClientVersion regex capture group"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTUwNjAyNA==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/309#discussion_r511506024", "body": "Did you test against NewPipe this part? Will it create NullPointerException or there is already a null check?", "bodyText": "Did you test against NewPipe this part? Will it create NullPointerException or there is already a null check?", "bodyHTML": "<p dir=\"auto\">Did you test against NewPipe this part? Will it create NullPointerException or there is already a null check?</p>", "author": "B0pol", "createdAt": "2020-10-24T19:28:06Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/media_ccc/extractors/MediaCCCStreamExtractor.java", "diffHunk": "@@ -216,7 +219,7 @@ public StreamType getStreamType() {\n \n     @Override\n     public StreamInfoItemsCollector getRelatedStreams() {\n-        return new StreamInfoItemsCollector(getServiceId());\n+        return null;", "originalCommit": "d007fb31dead50952899a87ed7facb590c18b829", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTU1NjYyNQ==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/309#discussion_r511556625", "bodyText": "This was done as per the documentation in the base getRelatedStreams(), and also to prevent creating new objects at random. I tested in NewPipe and it works as expected (there are null checks), but the code which takes care of it being null actually lies in the extractor, where the collector is turned into a list. I now added @nullable to all of the functions, as it was missing.", "author": "Stypox", "createdAt": "2020-10-25T07:02:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTUwNjAyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTU1NzA1OA==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/309#discussion_r511557058", "bodyText": "Oh, and also, YouTube already returns null for age restricted videos.", "author": "Stypox", "createdAt": "2020-10-25T07:07:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTUwNjAyNA=="}], "type": "inlineReview", "revised_code": {"commit": "cd32e7436ea4781939608c8a9ed36b72f2173bc0", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/media_ccc/extractors/MediaCCCStreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/media_ccc/extractors/MediaCCCStreamExtractor.java\nindex 92a049c5..96b1a5cc 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/media_ccc/extractors/MediaCCCStreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/media_ccc/extractors/MediaCCCStreamExtractor.java\n", "chunk": "@@ -217,6 +218,7 @@ public class MediaCCCStreamExtractor extends StreamExtractor {\n         return StreamType.VIDEO_STREAM;\n     }\n \n+    @Nullable\n     @Override\n     public StreamInfoItemsCollector getRelatedStreams() {\n         return null;\n", "next_change": null}]}, "revised_code_in_main": {"commit": "14c0c37d64883e795445bc8bd878df33ad6bdb9d", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/media_ccc/extractors/MediaCCCStreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/media_ccc/extractors/MediaCCCStreamExtractor.java\nindex 92a049c5..96b1a5cc 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/media_ccc/extractors/MediaCCCStreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/media_ccc/extractors/MediaCCCStreamExtractor.java\n", "chunk": "@@ -217,6 +218,7 @@ public class MediaCCCStreamExtractor extends StreamExtractor {\n         return StreamType.VIDEO_STREAM;\n     }\n \n+    @Nullable\n     @Override\n     public StreamInfoItemsCollector getRelatedStreams() {\n         return null;\n", "next_change": {"commit": "14f6f1b7c3d4a98ac0a74a9f6d16b05cb96c0c91", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/media_ccc/extractors/MediaCCCStreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/media_ccc/extractors/MediaCCCStreamExtractor.java\nindex 96b1a5cc..3251ca43 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/media_ccc/extractors/MediaCCCStreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/media_ccc/extractors/MediaCCCStreamExtractor.java\n", "chunk": "@@ -220,7 +219,7 @@ public class MediaCCCStreamExtractor extends StreamExtractor {\n \n     @Nullable\n     @Override\n-    public StreamInfoItemsCollector getRelatedStreams() {\n+    public StreamInfoItemsCollector getRelatedItems() {\n         return null;\n     }\n \n", "next_change": {"commit": "1e2e0029fc701326802612a328adb8433e725e47", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/media_ccc/extractors/MediaCCCStreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/media_ccc/extractors/MediaCCCStreamExtractor.java\nindex 3251ca43..a1b09f88 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/media_ccc/extractors/MediaCCCStreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/media_ccc/extractors/MediaCCCStreamExtractor.java\n", "chunk": "@@ -200,34 +145,11 @@ public class MediaCCCStreamExtractor extends StreamExtractor {\n         return Collections.emptyList();\n     }\n \n-    @Nonnull\n-    @Override\n-    public List<SubtitlesStream> getSubtitlesDefault() {\n-        return Collections.emptyList();\n-    }\n-\n-    @Nonnull\n-    @Override\n-    public List<SubtitlesStream> getSubtitles(final MediaFormat format) {\n-        return Collections.emptyList();\n-    }\n-\n     @Override\n     public StreamType getStreamType() {\n         return StreamType.VIDEO_STREAM;\n     }\n \n-    @Nullable\n-    @Override\n-    public StreamInfoItemsCollector getRelatedItems() {\n-        return null;\n-    }\n-\n-    @Override\n-    public String getErrorMessage() {\n-        return null;\n-    }\n-\n     @Override\n     public void onFetchPage(@Nonnull final Downloader downloader)\n             throws IOException, ExtractionException {\n", "next_change": {"commit": "9f7e06c8177d2e536e23c223a0b23090d5551f3c", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/media_ccc/extractors/MediaCCCStreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/media_ccc/extractors/MediaCCCStreamExtractor.java\nindex a1b09f88..64a26897 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/media_ccc/extractors/MediaCCCStreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/media_ccc/extractors/MediaCCCStreamExtractor.java\n", "chunk": "@@ -158,7 +162,7 @@ public class MediaCCCStreamExtractor extends StreamExtractor {\n             data = JsonParser.object().from(downloader.get(videoUrl).responseBody());\n             conferenceData = JsonParser.object()\n                     .from(downloader.get(data.getString(\"conference_url\")).responseBody());\n-        } catch (JsonParserException jpe) {\n+        } catch (final JsonParserException jpe) {\n             throw new ExtractionException(\"Could not parse json returned by url: \" + videoUrl, jpe);\n         }\n     }\n", "next_change": {"commit": "881969f1da6da0e123e3aa51c80351bad34ceb6a", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/media_ccc/extractors/MediaCCCStreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/media_ccc/extractors/MediaCCCStreamExtractor.java\nindex 64a26897..53cc53ad 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/media_ccc/extractors/MediaCCCStreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/media_ccc/extractors/MediaCCCStreamExtractor.java\n", "chunk": "@@ -163,7 +181,8 @@ public class MediaCCCStreamExtractor extends StreamExtractor {\n             conferenceData = JsonParser.object()\n                     .from(downloader.get(data.getString(\"conference_url\")).responseBody());\n         } catch (final JsonParserException jpe) {\n-            throw new ExtractionException(\"Could not parse json returned by url: \" + videoUrl, jpe);\n+            throw new ExtractionException(\"Could not parse json returned by URL: \" + videoUrl,\n+                    jpe);\n         }\n     }\n \n", "next_change": null}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "14c0c37d64883e795445bc8bd878df33ad6bdb9d", "message": "Merge commit", "committedDate": null}, {"oid": "d3eea4f4be1acd721047ffbe1e3eff16244fc857", "committedDate": "2020-12-12 10:24:29 +0100", "message": "Add stream segments to StreamInfo"}, {"oid": "bc6de149527fabb235068bfed538194316054ddb", "committedDate": "2020-12-22 18:19:26 +0100", "message": "Extract stream and search meta info for YouTube"}, {"oid": "1a322ad8edcf54e90f84d236fbe6dce1a9d8ae47", "committedDate": "2021-02-18 16:36:40 +0100", "message": "Add uploader verified by service extraction"}, {"oid": "c47cc54908d14d3faa6326e62cb8c8add9463df2", "committedDate": "2021-03-19 10:14:43 +0100", "message": "Extract metadata for YouTube, SoundCloud & MediaCCC"}, {"oid": "14f6f1b7c3d4a98ac0a74a9f6d16b05cb96c0c91", "committedDate": "2021-03-31 20:24:40 +0200", "message": "Generify related streams calls and rename method"}, {"oid": "1e2e0029fc701326802612a328adb8433e725e47", "committedDate": "2021-12-27 16:54:45 +0100", "message": "[StreamExtractor] Deduplicated a ton of code by using default methods"}, {"oid": "9f7e06c8177d2e536e23c223a0b23090d5551f3c", "committedDate": "2022-03-26 19:40:18 +0100", "message": "[MediaCCC] Fix checkstyle issues"}, {"oid": "881969f1da6da0e123e3aa51c80351bad34ceb6a", "committedDate": "2022-05-28 12:00:43 +0200", "message": "Apply changes in all StreamExtractors except YouTube's one and fix extraction of PeerTube audio streams as video streams"}, {"oid": "aa4c10e7517f60359f6c3fc911c67d2cd125b79a", "committedDate": "2022-05-28 12:00:46 +0200", "message": "Improve documentation and adress most of the requested changes"}, {"oid": "50272db9464f742e937a222db1c69e07adacdd9d", "committedDate": "2022-05-28 12:00:49 +0200", "message": "Apply reviews: improve comments, remove FILE, remove Stream#equals(Stream)"}, {"oid": "d652e05874bcdae73e717b7157041d44daa3911b", "committedDate": "2022-05-28 12:00:58 +0200", "message": "[MediaCCC] Fix comments about containsSimilarStream"}, {"oid": "30a0f8c510dde9ab8fde0a7fc64d2a2fea34b3c5", "committedDate": "2023-02-26 19:06:18 +0100", "message": "[MediaCCC] Extract audio language property for single language audio tracks"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTUwOTc4NA==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/309#discussion_r511509784", "body": "Could you explain why 0x100 <= formatId < 0x1000 and also above (video streams) or below (subtitles) and add comments for it?", "bodyText": "Could you explain why 0x100 <= formatId < 0x1000 and also above (video streams) or below (subtitles) and add comments for it?", "bodyHTML": "<p dir=\"auto\">Could you explain why 0x100 &lt;= formatId &lt; 0x1000 and also above (video streams) or below (subtitles) and add comments for it?</p>", "author": "B0pol", "createdAt": "2020-10-24T20:10:54Z", "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java", "diffHunk": "@@ -0,0 +1,382 @@\n+package org.schabi.newpipe.extractor.services;\n+\n+import org.junit.Test;\n+import org.schabi.newpipe.extractor.MediaFormat;\n+import org.schabi.newpipe.extractor.localization.DateWrapper;\n+import org.schabi.newpipe.extractor.stream.AudioStream;\n+import org.schabi.newpipe.extractor.stream.Description;\n+import org.schabi.newpipe.extractor.stream.Frameset;\n+import org.schabi.newpipe.extractor.stream.StreamExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemsCollector;\n+import org.schabi.newpipe.extractor.stream.StreamType;\n+import org.schabi.newpipe.extractor.stream.SubtitlesStream;\n+import org.schabi.newpipe.extractor.stream.VideoStream;\n+\n+import java.text.SimpleDateFormat;\n+import java.util.Calendar;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.TimeZone;\n+\n+import javax.annotation.Nullable;\n+\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.schabi.newpipe.extractor.ExtractorAsserts.assertAtLeast;\n+import static org.schabi.newpipe.extractor.ExtractorAsserts.assertEqualsOrderIndependent;\n+import static org.schabi.newpipe.extractor.ExtractorAsserts.assertIsSecureUrl;\n+import static org.schabi.newpipe.extractor.ExtractorAsserts.assertIsValidUrl;\n+import static org.schabi.newpipe.extractor.services.DefaultTests.defaultTestListOfItems;\n+\n+/**\n+ * Test for {@link StreamExtractor}\n+ */\n+public abstract class DefaultStreamExtractorTest extends DefaultExtractorTest<StreamExtractor>\n+        implements BaseStreamExtractorTest {\n+\n+    public abstract StreamType expectedStreamType();\n+    public abstract String expectedUploaderName();\n+    public abstract String expectedUploaderUrl();\n+    public String expectedSubChannelName() { return \"\"; } // default: there is no subchannel\n+    public String expectedSubChannelUrl() { return \"\"; } // default: there is no subchannel\n+    public abstract List<String> expectedDescriptionContains(); // e.g. for full links\n+    public abstract long expectedLength();\n+    public long expectedTimestamp() { return 0; } // default: there is no timestamp\n+    public abstract long expectedViewCountAtLeast();\n+    @Nullable public abstract String expectedUploadDate(); // format: \"yyyy-MM-dd HH:mm:ss.SSS\"\n+    @Nullable public abstract String expectedTextualUploadDate();\n+    public abstract long expectedLikeCountAtLeast(); // return -1 if ratings are disabled\n+    public abstract long expectedDislikeCountAtLeast(); // return -1 if ratings are disabled\n+    public boolean expectedHasRelatedStreams() { return true; } // default: there are related videos\n+    public int expectedAgeLimit() { return StreamExtractor.NO_AGE_LIMIT; } // default: no limit\n+    @Nullable public String expectedErrorMessage() { return null; } // default: no error message\n+    public boolean expectedHasVideoStreams() { return true; } // default: there are video streams\n+    public boolean expectedHasAudioStreams() { return true; } // default: there are audio streams\n+    public boolean expectedHasSubtitles() { return true; } // default: there are subtitles streams\n+    @Nullable public String expectedDashMpdUrlContains() { return null; } // default: no dash mpd\n+    public boolean expectedHasFrames() { return true; } // default: there are frames\n+    public String expectedHost() { return \"\"; } // default: no host for centralized platforms\n+    public String expectedPrivacy() { return \"\"; } // default: no privacy policy available\n+    public String expectedCategory() { return \"\"; } // default: no category\n+    public String expectedLicence() { return \"\"; } // default: no licence\n+    public Locale expectedLanguageInfo() { return null; } // default: no language info available\n+    public List<String> expectedTags() { return Collections.emptyList(); } // default: no tags\n+    public String expectedSupportInfo() { return \"\"; } // default: no support info available\n+\n+    @Test\n+    @Override\n+    public void testStreamType() throws Exception {\n+        assertEquals(expectedStreamType(), extractor().getStreamType());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testUploaderName() throws Exception {\n+        assertEquals(expectedUploaderName(), extractor().getUploaderName());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testUploaderUrl() throws Exception {\n+        final String uploaderUrl = extractor().getUploaderUrl();\n+        assertIsSecureUrl(uploaderUrl);\n+        assertEquals(expectedUploaderUrl(), uploaderUrl);\n+    }\n+\n+    @Test\n+    @Override\n+    public void testUploaderAvatarUrl() throws Exception {\n+        assertIsSecureUrl(extractor().getUploaderAvatarUrl());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testSubChannelName() throws Exception {\n+        assertEquals(expectedSubChannelName(), extractor().getSubChannelName());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testSubChannelUrl() throws Exception {\n+        final String subChannelUrl = extractor().getSubChannelUrl();\n+        assertEquals(expectedSubChannelUrl(), subChannelUrl);\n+\n+        if (!expectedSubChannelUrl().isEmpty()) {\n+            // this stream has a subchannel\n+            assertIsSecureUrl(subChannelUrl);\n+        }\n+    }\n+\n+    @Test\n+    @Override\n+    public void testSubChannelAvatarUrl() throws Exception {\n+        if (expectedSubChannelName().isEmpty() && expectedSubChannelUrl().isEmpty()) {\n+            // this stream has no subchannel\n+            assertEquals(\"\", extractor().getSubChannelAvatarUrl());\n+        } else {\n+            // this stream has a subchannel\n+            assertIsSecureUrl(extractor().getSubChannelAvatarUrl());\n+        }\n+    }\n+\n+    @Test\n+    @Override\n+    public void testThumbnailUrl() throws Exception {\n+        assertIsSecureUrl(extractor().getThumbnailUrl());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testDescription() throws Exception {\n+        final Description description = extractor().getDescription();\n+        assertNotNull(description);\n+        assertFalse(\"description is empty\", description.getContent().isEmpty());\n+\n+        for (final String s : expectedDescriptionContains()) {\n+            assertThat(description.getContent(), containsString(s));\n+        }\n+    }\n+\n+    @Test\n+    @Override\n+    public void testLength() throws Exception {\n+        assertEquals(expectedLength(), extractor().getLength());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testTimestamp() throws Exception {\n+        assertEquals(expectedTimestamp(), extractor().getTimeStamp());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testViewCount() throws Exception {\n+        assertAtLeast(expectedViewCountAtLeast(), extractor().getViewCount());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testUploadDate() throws Exception {\n+        final DateWrapper dateWrapper = extractor().getUploadDate();\n+\n+        if (expectedUploadDate() == null) {\n+            assertNull(dateWrapper);\n+        } else {\n+            assertNotNull(dateWrapper);\n+\n+            final Calendar expectedDate = Calendar.getInstance();\n+            final Calendar actualDate = dateWrapper.date();\n+\n+            final SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.S\");\n+            sdf.setTimeZone(TimeZone.getTimeZone(\"GMT\"));\n+            expectedDate.setTime(sdf.parse(expectedUploadDate()));\n+            assertEquals(expectedDate, actualDate);\n+        }\n+    }\n+\n+    @Test\n+    @Override\n+    public void testTextualUploadDate() throws Exception {\n+        assertEquals(expectedTextualUploadDate(), extractor().getTextualUploadDate());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testLikeCount() throws Exception {\n+        if (expectedLikeCountAtLeast() == -1) {\n+            assertEquals(-1, extractor().getLikeCount());\n+        } else {\n+            assertAtLeast(expectedLikeCountAtLeast(), extractor().getLikeCount());\n+        }\n+    }\n+\n+    @Test\n+    @Override\n+    public void testDislikeCount() throws Exception {\n+        if (expectedDislikeCountAtLeast() == -1) {\n+            assertEquals(-1, extractor().getDislikeCount());\n+        } else {\n+            assertAtLeast(expectedDislikeCountAtLeast(), extractor().getDislikeCount());\n+        }\n+    }\n+\n+    @Test\n+    @Override\n+    public void testRelatedStreams() throws Exception {\n+        final StreamInfoItemsCollector relatedStreams = extractor().getRelatedStreams();\n+\n+        if (expectedHasRelatedStreams()) {\n+            defaultTestListOfItems(extractor().getService(), relatedStreams.getItems(),\n+                    relatedStreams.getErrors());\n+        } else {\n+            assertNull(relatedStreams);\n+        }\n+    }\n+\n+    @Test\n+    @Override\n+    public void testAgeLimit() throws Exception {\n+        assertEquals(expectedAgeLimit(), extractor().getAgeLimit());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testErrorMessage() throws Exception {\n+        assertEquals(expectedErrorMessage(), extractor().getErrorMessage());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testVideoStreams() throws Exception {\n+        final List<VideoStream> videoStreams = extractor().getVideoStreams();\n+        final List<VideoStream> videoOnlyStreams = extractor().getVideoOnlyStreams();\n+        assertNotNull(videoStreams);\n+        assertNotNull(videoOnlyStreams);\n+        videoStreams.addAll(videoOnlyStreams);\n+\n+        if (expectedHasVideoStreams()) {\n+            assertFalse(videoStreams.isEmpty());\n+\n+            for (final VideoStream stream : videoStreams) {\n+                assertIsSecureUrl(stream.getUrl());\n+                assertFalse(stream.getResolution().isEmpty());\n+\n+                final int formatId = stream.getFormatId();\n+                assertTrue(\"format id does not fit a video stream: \" + formatId,\n+                        0 <= formatId && formatId < 0x100);\n+            }\n+        } else {\n+            assertTrue(videoStreams.isEmpty());\n+        }\n+    }\n+\n+    @Test\n+    @Override\n+    public void testAudioStreams() throws Exception {\n+        final List<AudioStream> audioStreams = extractor().getAudioStreams();\n+        assertNotNull(audioStreams);\n+\n+        if (expectedHasAudioStreams()) {\n+            assertFalse(audioStreams.isEmpty());\n+\n+            for (final AudioStream stream : audioStreams) {\n+                assertIsSecureUrl(stream.getUrl());\n+\n+                final int formatId = stream.getFormatId();\n+                assertTrue(\"format id does not fit an audio stream: \" + formatId,\n+                        0x100 <= formatId && formatId < 0x1000);", "originalCommit": "d007fb31dead50952899a87ed7facb590c18b829", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTU1NjY0Mw==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/309#discussion_r511556643", "bodyText": "Ok", "author": "Stypox", "createdAt": "2020-10-25T07:02:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTUwOTc4NA=="}], "type": "inlineReview", "revised_code": {"commit": "57e7994c9e46d068ba53cb320c91c22ec24f76de", "changed_code": [{"header": "diff --git a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\nindex 8ab642d9..a70b38a8 100644\n--- a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n+++ b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n", "chunk": "@@ -270,6 +271,7 @@ public abstract class DefaultStreamExtractorTest extends DefaultExtractorTest<St\n                 assertIsSecureUrl(stream.getUrl());\n \n                 final int formatId = stream.getFormatId();\n+                // see MediaFormat: video stream formats range from 0x100 to 0x1000\n                 assertTrue(\"format id does not fit an audio stream: \" + formatId,\n                         0x100 <= formatId && formatId < 0x1000);\n             }\n", "next_change": null}]}, "revised_code_in_main": {"commit": "14c0c37d64883e795445bc8bd878df33ad6bdb9d", "changed_code": [{"header": "diff --git a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\nindex 8ab642d9..a70b38a8 100644\n--- a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n+++ b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n", "chunk": "@@ -270,6 +271,7 @@ public abstract class DefaultStreamExtractorTest extends DefaultExtractorTest<St\n                 assertIsSecureUrl(stream.getUrl());\n \n                 final int formatId = stream.getFormatId();\n+                // see MediaFormat: video stream formats range from 0x100 to 0x1000\n                 assertTrue(\"format id does not fit an audio stream: \" + formatId,\n                         0x100 <= formatId && formatId < 0x1000);\n             }\n", "next_change": {"commit": "a2cbdf0991d6cf4154d905fbdd2b5a2c1c6f758c", "changed_code": [{"header": "diff --git a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\nindex a70b38a8..c7c8ecd4 100644\n--- a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n+++ b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n", "chunk": "@@ -272,8 +287,8 @@ public abstract class DefaultStreamExtractorTest extends DefaultExtractorTest<St\n \n                 final int formatId = stream.getFormatId();\n                 // see MediaFormat: video stream formats range from 0x100 to 0x1000\n-                assertTrue(\"format id does not fit an audio stream: \" + formatId,\n-                        0x100 <= formatId && formatId < 0x1000);\n+                assertTrue(0x100 <= formatId && formatId < 0x1000,\n+                        \"format id does not fit an audio stream: \" + formatId);\n             }\n         } else {\n             assertTrue(audioStreams.isEmpty());\n", "next_change": {"commit": "f6ec7f9a6120064fdf7348ff13e1adfbcab8492f", "changed_code": [{"header": "diff --git a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\nindex c7c8ecd4..d9b4e6cd 100644\n--- a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n+++ b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java\n", "chunk": "@@ -283,12 +301,17 @@ public abstract class DefaultStreamExtractorTest extends DefaultExtractorTest<St\n             assertFalse(audioStreams.isEmpty());\n \n             for (final AudioStream stream : audioStreams) {\n-                assertIsSecureUrl(stream.getUrl());\n+                if (stream.isUrl()) {\n+                    assertIsSecureUrl(stream.getContent());\n+                }\n \n-                final int formatId = stream.getFormatId();\n-                // see MediaFormat: video stream formats range from 0x100 to 0x1000\n-                assertTrue(0x100 <= formatId && formatId < 0x1000,\n-                        \"format id does not fit an audio stream: \" + formatId);\n+                // The media format can be unknown on some audio streams\n+                if (stream.getFormat() != null) {\n+                    final int formatId = stream.getFormat().id;\n+                    // see MediaFormat: audio stream formats range from 0x100 to 0x1000\n+                    assertTrue(0x100 <= formatId && formatId < 0x1000,\n+                            \"Format id does not fit an audio stream: \" + formatId);\n+                }\n             }\n         } else {\n             assertTrue(audioStreams.isEmpty());\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "14c0c37d64883e795445bc8bd878df33ad6bdb9d", "message": "Merge commit", "committedDate": null}, {"oid": "4f04cfcccaaf49bb5362bb7a02f6450c446934b6", "committedDate": "2020-11-01 06:28:54 +0530", "message": "Switch from Calendar to OffsetDateTime in DateWrapper."}, {"oid": "827f7bd13750b29e2382c6681f23b707f76e5f33", "committedDate": "2020-11-04 16:02:12 +0100", "message": "[YouTube] Cache deobfuscation and improve requests made"}, {"oid": "9a7a224a545e0dd5036b14e7e7a83e923be03d6a", "committedDate": "2020-12-12 10:24:55 +0100", "message": "Add tests for stream segments"}, {"oid": "bc6de149527fabb235068bfed538194316054ddb", "committedDate": "2020-12-22 18:19:26 +0100", "message": "Extract stream and search meta info for YouTube"}, {"oid": "11dcfe638b994fc30db3589fc1aaf273ab241362", "committedDate": "2021-01-14 20:01:06 +0100", "message": "Add durationPerFrame to Frameset and getFrameBoundsAt method"}, {"oid": "1a322ad8edcf54e90f84d236fbe6dce1a9d8ae47", "committedDate": "2021-02-18 16:36:40 +0100", "message": "Add uploader verified by service extraction"}, {"oid": "21158744b1abbe17d85ebcee61f2e12068c4c375", "committedDate": "2021-03-05 16:38:46 +0100", "message": "Add expectedDescriptionIsEmpty() to DefaultStreamExtractorTest"}, {"oid": "c47cc54908d14d3faa6326e62cb8c8add9463df2", "committedDate": "2021-03-19 10:14:43 +0100", "message": "Extract metadata for YouTube, SoundCloud & MediaCCC"}, {"oid": "14f6f1b7c3d4a98ac0a74a9f6d16b05cb96c0c91", "committedDate": "2021-03-31 20:24:40 +0200", "message": "Generify related streams calls and rename method"}, {"oid": "a2cbdf0991d6cf4154d905fbdd2b5a2c1c6f758c", "committedDate": "2021-12-27 21:08:08 +0100", "message": "Updated to JUnit 5"}, {"oid": "3712a669b1d1759e68a0309594cbc77449cd2e64", "committedDate": "2022-01-04 17:28:31 +0100", "message": "Code cleanup / improvements"}, {"oid": "6f3f608ab651574999a169cd506428ded9eac491", "committedDate": "2022-02-24 12:50:51 +0000", "message": "Add support for extracting channel subscriber count in StreamInfo."}, {"oid": "5b0ec694a638cdbca038a76ad4bcae6daf6b37d6", "committedDate": "2022-02-24 12:50:51 +0000", "message": "Add requested changes."}, {"oid": "f6ec7f9a6120064fdf7348ff13e1adfbcab8492f", "committedDate": "2022-05-28 12:00:45 +0200", "message": "Update DefaultStreamExtractorTest and SoundcloudStreamExtractorTest to support changes made in Stream classes"}]}, {"oid": "cd32e7436ea4781939608c8a9ed36b72f2173bc0", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/cd32e7436ea4781939608c8a9ed36b72f2173bc0", "message": "Add some missing finals and nullables", "committedDate": "2020-10-25T07:09:53Z", "type": "forcePushed"}, {"oid": "57e7994c9e46d068ba53cb320c91c22ec24f76de", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/57e7994c9e46d068ba53cb320c91c22ec24f76de", "message": "Add some missing finals, nullables and comments", "committedDate": "2020-10-25T07:12:41Z", "type": "commit"}, {"oid": "57e7994c9e46d068ba53cb320c91c22ec24f76de", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/57e7994c9e46d068ba53cb320c91c22ec24f76de", "message": "Add some missing finals, nullables and comments", "committedDate": "2020-10-25T07:12:41Z", "type": "forcePushed"}]}