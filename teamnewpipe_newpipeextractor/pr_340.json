{"pr_number": 340, "pr_title": "Handle isDeleted for PeerTube comments", "pr_author": "wb9688", "pr_createdAt": "2020-05-31T11:35:52Z", "pr_url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/340", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTgzMzY4Ng==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/340#discussion_r439833686", "body": "I added the tests", "bodyText": "I added the tests", "bodyHTML": "<p dir=\"auto\">I added the tests</p>", "author": "wb9688", "createdAt": "2020-06-14T14:08:38Z", "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/peertube/PeertubeCommentsExtractorTest.java", "diffHunk": "@@ -18,74 +18,100 @@\n import static org.schabi.newpipe.extractor.ServiceList.PeerTube;\n \n public class PeertubeCommentsExtractorTest {\n+    public static class Default {\n+        private static PeertubeCommentsExtractor extractor;\n \n-    private static PeertubeCommentsExtractor extractor;\n+        @BeforeClass\n+        public static void setUp() throws Exception {\n+            NewPipe.init(DownloaderTestImpl.getInstance());\n+            extractor = (PeertubeCommentsExtractor) PeerTube\n+                    .getCommentsExtractor(\"https://framatube.org/videos/watch/04af977f-4201-4697-be67-a8d8cae6fa7a\");\n+        }\n \n-    @BeforeClass\n-    public static void setUp() throws Exception {\n-        NewPipe.init(DownloaderTestImpl.getInstance());\n-        extractor = (PeertubeCommentsExtractor) PeerTube\n-                .getCommentsExtractor(\"https://framatube.org/videos/watch/04af977f-4201-4697-be67-a8d8cae6fa7a\");\n-    }\n+        @Test\n+        public void testGetComments() throws IOException, ExtractionException {\n+            boolean result;\n+            InfoItemsPage<CommentsInfoItem> comments = extractor.getInitialPage();\n+            assertTrue(comments.getErrors().isEmpty());\n+            result = findInComments(comments, \"@root A great documentary on a great guy.\");\n \n-    @Test\n-    public void testGetComments() throws IOException, ExtractionException {\n-        boolean result = false;\n-        InfoItemsPage<CommentsInfoItem> comments = extractor.getInitialPage();\n-        result = findInComments(comments, \"@root A great documentary on a great guy.\");\n+            while (comments.hasNextPage() && !result) {\n+                comments = extractor.getPage(comments.getNextPageUrl());\n+                result = findInComments(comments, \"@root A great documentary on a great guy.\");\n+            }\n \n-        while (comments.hasNextPage() && !result) {\n-            comments = extractor.getPage(comments.getNextPageUrl());\n-            result = findInComments(comments, \"@root A great documentary on a great guy.\");\n+            assertTrue(result);\n         }\n \n-        assertTrue(result);\n-    }\n+        @Test\n+        public void testGetCommentsFromCommentsInfo() throws IOException, ExtractionException {\n+            boolean result;\n+            final CommentsInfo commentsInfo = CommentsInfo.getInfo(\"https://framatube.org/videos/watch/a8ea95b8-0396-49a6-8f30-e25e25fb2828\");\n+            assertTrue(commentsInfo.getErrors().isEmpty());\n+            assertEquals(\"Comments\", commentsInfo.getName());\n+            result = findInComments(commentsInfo.getRelatedItems(), \"Loved it!!!\");\n+\n+            String nextPage = commentsInfo.getNextPageUrl();\n+            while (!Utils.isBlank(nextPage) && !result) {\n+                final InfoItemsPage<CommentsInfoItem> moreItems = CommentsInfo.getMoreItems(PeerTube, commentsInfo, nextPage);\n+                result = findInComments(moreItems.getItems(), \"Loved it!!!\");\n+                nextPage = moreItems.getNextPageUrl();\n+            }\n \n-    @Test\n-    public void testGetCommentsFromCommentsInfo() throws IOException, ExtractionException {\n-        boolean result = false;\n-        CommentsInfo commentsInfo = CommentsInfo.getInfo(\"https://framatube.org/videos/watch/a8ea95b8-0396-49a6-8f30-e25e25fb2828\");\n-        assertEquals(\"Comments\", commentsInfo.getName());\n-        result = findInComments(commentsInfo.getRelatedItems(), \"Loved it!!!\");\n-\n-        String nextPage = commentsInfo.getNextPageUrl();\n-        while (!Utils.isBlank(nextPage) && !result) {\n-            InfoItemsPage<CommentsInfoItem> moreItems = CommentsInfo.getMoreItems(PeerTube, commentsInfo, nextPage);\n-            result = findInComments(moreItems.getItems(), \"Loved it!!!\");\n-            nextPage = moreItems.getNextPageUrl();\n+            assertTrue(result);\n         }\n \n-        assertTrue(result);\n-    }\n+        @Test\n+        public void testGetCommentsAllData() throws IOException, ExtractionException {\n+            final InfoItemsPage<CommentsInfoItem> comments = extractor.getInitialPage();\n+            for (final CommentsInfoItem c : comments.getItems()) {\n+                assertFalse(Utils.isBlank(c.getUploaderUrl()));\n+                assertFalse(Utils.isBlank(c.getUploaderName()));\n+                assertFalse(Utils.isBlank(c.getUploaderAvatarUrl()));\n+                assertFalse(Utils.isBlank(c.getCommentId()));\n+                assertFalse(Utils.isBlank(c.getCommentText()));\n+                assertFalse(Utils.isBlank(c.getName()));\n+                assertFalse(Utils.isBlank(c.getTextualUploadDate()));\n+                assertFalse(Utils.isBlank(c.getThumbnailUrl()));\n+                assertFalse(Utils.isBlank(c.getUrl()));\n+                assertFalse(c.getLikeCount() != -1);\n+            }\n+        }\n \n-    @Test\n-    public void testGetCommentsAllData() throws IOException, ExtractionException {\n-        InfoItemsPage<CommentsInfoItem> comments = extractor.getInitialPage();\n-        for (CommentsInfoItem c : comments.getItems()) {\n-            assertFalse(Utils.isBlank(c.getUploaderUrl()));\n-            assertFalse(Utils.isBlank(c.getUploaderName()));\n-            assertFalse(Utils.isBlank(c.getUploaderAvatarUrl()));\n-            assertFalse(Utils.isBlank(c.getCommentId()));\n-            assertFalse(Utils.isBlank(c.getCommentText()));\n-            assertFalse(Utils.isBlank(c.getName()));\n-            assertFalse(Utils.isBlank(c.getTextualUploadDate()));\n-            assertFalse(Utils.isBlank(c.getThumbnailUrl()));\n-            assertFalse(Utils.isBlank(c.getUrl()));\n-            assertFalse(c.getLikeCount() != -1);\n+        private boolean findInComments(final InfoItemsPage<CommentsInfoItem> comments, final String comment) {\n+            return findInComments(comments.getItems(), comment);\n         }\n-    }\n \n-    private boolean findInComments(InfoItemsPage<CommentsInfoItem> comments, String comment) {\n-        return findInComments(comments.getItems(), comment);\n+        private boolean findInComments(final List<CommentsInfoItem> comments, final String comment) {\n+            for (final CommentsInfoItem c : comments) {\n+                if (c.getCommentText().contains(comment)) {\n+                    return true;\n+                }\n+            }\n+            return false;\n+        }\n     }\n \n-    private boolean findInComments(List<CommentsInfoItem> comments, String comment) {\n-        for (CommentsInfoItem c : comments) {\n-            if (c.getCommentText().contains(comment)) {\n-                return true;\n-            }\n+    public static class DeletedComments {\n+        private static PeertubeCommentsExtractor extractor;\n+\n+        @BeforeClass\n+        public static void setUp() throws Exception {\n+            NewPipe.init(DownloaderTestImpl.getInstance());\n+            extractor = (PeertubeCommentsExtractor) PeerTube\n+                    .getCommentsExtractor(\"https://framatube.org/videos/watch/217eefeb-883d-45be-b7fc-a788ad8507d3\");\n+        }\n+\n+        @Test\n+        public void testGetComments() throws IOException, ExtractionException {\n+            final InfoItemsPage<CommentsInfoItem> comments = extractor.getInitialPage();\n+            assertTrue(comments.getErrors().isEmpty());", "originalCommit": "1829a1a8a2021761b869607fd08ac717ab68267c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTgzNzY4Mg==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/340#discussion_r439837682", "body": "do \u2026 while exist for something", "bodyText": "do \u2026 while exist for something", "bodyHTML": "<p dir=\"auto\">do \u2026 while exist for something</p>", "author": "B0pol", "createdAt": "2020-06-14T14:52:11Z", "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/peertube/PeertubeCommentsExtractorTest.java", "diffHunk": "@@ -18,74 +18,100 @@\n import static org.schabi.newpipe.extractor.ServiceList.PeerTube;\n \n public class PeertubeCommentsExtractorTest {\n+    public static class Default {\n+        private static PeertubeCommentsExtractor extractor;\n \n-    private static PeertubeCommentsExtractor extractor;\n+        @BeforeClass\n+        public static void setUp() throws Exception {\n+            NewPipe.init(DownloaderTestImpl.getInstance());\n+            extractor = (PeertubeCommentsExtractor) PeerTube\n+                    .getCommentsExtractor(\"https://framatube.org/videos/watch/04af977f-4201-4697-be67-a8d8cae6fa7a\");\n+        }\n \n-    @BeforeClass\n-    public static void setUp() throws Exception {\n-        NewPipe.init(DownloaderTestImpl.getInstance());\n-        extractor = (PeertubeCommentsExtractor) PeerTube\n-                .getCommentsExtractor(\"https://framatube.org/videos/watch/04af977f-4201-4697-be67-a8d8cae6fa7a\");\n-    }\n+        @Test\n+        public void testGetComments() throws IOException, ExtractionException {\n+            boolean result;\n+            InfoItemsPage<CommentsInfoItem> comments = extractor.getInitialPage();\n+            assertTrue(comments.getErrors().isEmpty());\n+            result = findInComments(comments, \"@root A great documentary on a great guy.\");\n \n-    @Test\n-    public void testGetComments() throws IOException, ExtractionException {\n-        boolean result = false;\n-        InfoItemsPage<CommentsInfoItem> comments = extractor.getInitialPage();\n-        result = findInComments(comments, \"@root A great documentary on a great guy.\");\n+            while (comments.hasNextPage() && !result) {\n+                comments = extractor.getPage(comments.getNextPageUrl());\n+                result = findInComments(comments, \"@root A great documentary on a great guy.\");\n+            }", "originalCommit": "1829a1a8a2021761b869607fd08ac717ab68267c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTg0OTQ3Ng==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/340#discussion_r439849476", "bodyText": "I'm not changing this one as YouTube has basically the same code in its test. Btw why do SoundCloud comments not have a test?", "author": "wb9688", "createdAt": "2020-06-14T17:08:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTgzNzY4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDE3ODQ5Ng==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/340#discussion_r444178496", "bodyText": "That should be changed. If you do not want to do this now, please open a PR once this is  merged.", "author": "TobiGr", "createdAt": "2020-06-23T12:18:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTgzNzY4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU0NzU2OQ==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/340#discussion_r446547569", "bodyText": "I really have a limited amount of time until 10 July.\n@B0pol: Could you create an issue for this?\n@TobiGr: Could you merge this PR?", "author": "wb9688", "createdAt": "2020-06-27T17:24:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTgzNzY4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYxODA2Nw==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/340#discussion_r446618067", "bodyText": "I created #363", "author": "B0pol", "createdAt": "2020-06-28T08:18:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTgzNzY4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTgzNzc4MQ==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/340#discussion_r439837781", "body": "```suggestion\r\n                assertTrue(c.getLikeCount() == -1);\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            assertFalse(c.getLikeCount() != -1);\n          \n          \n            \n                            assertTrue(c.getLikeCount() == -1);", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                <span class=\"x x-first x-last\">assertFalse</span>(c<span class=\"pl-k\">.</span>getLikeCount() <span class=\"pl-k\"><span class=\"x x-first x-last\">!</span>=</span> <span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                <span class=\"x x-first x-last\">assertTrue</span>(c<span class=\"pl-k\">.</span>getLikeCount() <span class=\"pl-k\"><span class=\"x x-first x-last\">=</span>=</span> <span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "B0pol", "createdAt": "2020-06-14T14:53:15Z", "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/peertube/PeertubeCommentsExtractorTest.java", "diffHunk": "@@ -18,74 +18,100 @@\n import static org.schabi.newpipe.extractor.ServiceList.PeerTube;\n \n public class PeertubeCommentsExtractorTest {\n+    public static class Default {\n+        private static PeertubeCommentsExtractor extractor;\n \n-    private static PeertubeCommentsExtractor extractor;\n+        @BeforeClass\n+        public static void setUp() throws Exception {\n+            NewPipe.init(DownloaderTestImpl.getInstance());\n+            extractor = (PeertubeCommentsExtractor) PeerTube\n+                    .getCommentsExtractor(\"https://framatube.org/videos/watch/04af977f-4201-4697-be67-a8d8cae6fa7a\");\n+        }\n \n-    @BeforeClass\n-    public static void setUp() throws Exception {\n-        NewPipe.init(DownloaderTestImpl.getInstance());\n-        extractor = (PeertubeCommentsExtractor) PeerTube\n-                .getCommentsExtractor(\"https://framatube.org/videos/watch/04af977f-4201-4697-be67-a8d8cae6fa7a\");\n-    }\n+        @Test\n+        public void testGetComments() throws IOException, ExtractionException {\n+            boolean result;\n+            InfoItemsPage<CommentsInfoItem> comments = extractor.getInitialPage();\n+            assertTrue(comments.getErrors().isEmpty());\n+            result = findInComments(comments, \"@root A great documentary on a great guy.\");\n \n-    @Test\n-    public void testGetComments() throws IOException, ExtractionException {\n-        boolean result = false;\n-        InfoItemsPage<CommentsInfoItem> comments = extractor.getInitialPage();\n-        result = findInComments(comments, \"@root A great documentary on a great guy.\");\n+            while (comments.hasNextPage() && !result) {\n+                comments = extractor.getPage(comments.getNextPageUrl());\n+                result = findInComments(comments, \"@root A great documentary on a great guy.\");\n+            }\n \n-        while (comments.hasNextPage() && !result) {\n-            comments = extractor.getPage(comments.getNextPageUrl());\n-            result = findInComments(comments, \"@root A great documentary on a great guy.\");\n+            assertTrue(result);\n         }\n \n-        assertTrue(result);\n-    }\n+        @Test\n+        public void testGetCommentsFromCommentsInfo() throws IOException, ExtractionException {\n+            boolean result;\n+            final CommentsInfo commentsInfo = CommentsInfo.getInfo(\"https://framatube.org/videos/watch/a8ea95b8-0396-49a6-8f30-e25e25fb2828\");\n+            assertTrue(commentsInfo.getErrors().isEmpty());\n+            assertEquals(\"Comments\", commentsInfo.getName());\n+            result = findInComments(commentsInfo.getRelatedItems(), \"Loved it!!!\");\n+\n+            String nextPage = commentsInfo.getNextPageUrl();\n+            while (!Utils.isBlank(nextPage) && !result) {\n+                final InfoItemsPage<CommentsInfoItem> moreItems = CommentsInfo.getMoreItems(PeerTube, commentsInfo, nextPage);\n+                result = findInComments(moreItems.getItems(), \"Loved it!!!\");\n+                nextPage = moreItems.getNextPageUrl();\n+            }\n \n-    @Test\n-    public void testGetCommentsFromCommentsInfo() throws IOException, ExtractionException {\n-        boolean result = false;\n-        CommentsInfo commentsInfo = CommentsInfo.getInfo(\"https://framatube.org/videos/watch/a8ea95b8-0396-49a6-8f30-e25e25fb2828\");\n-        assertEquals(\"Comments\", commentsInfo.getName());\n-        result = findInComments(commentsInfo.getRelatedItems(), \"Loved it!!!\");\n-\n-        String nextPage = commentsInfo.getNextPageUrl();\n-        while (!Utils.isBlank(nextPage) && !result) {\n-            InfoItemsPage<CommentsInfoItem> moreItems = CommentsInfo.getMoreItems(PeerTube, commentsInfo, nextPage);\n-            result = findInComments(moreItems.getItems(), \"Loved it!!!\");\n-            nextPage = moreItems.getNextPageUrl();\n+            assertTrue(result);\n         }\n \n-        assertTrue(result);\n-    }\n+        @Test\n+        public void testGetCommentsAllData() throws IOException, ExtractionException {\n+            final InfoItemsPage<CommentsInfoItem> comments = extractor.getInitialPage();\n+            for (final CommentsInfoItem c : comments.getItems()) {\n+                assertFalse(Utils.isBlank(c.getUploaderUrl()));\n+                assertFalse(Utils.isBlank(c.getUploaderName()));\n+                assertFalse(Utils.isBlank(c.getUploaderAvatarUrl()));\n+                assertFalse(Utils.isBlank(c.getCommentId()));\n+                assertFalse(Utils.isBlank(c.getCommentText()));\n+                assertFalse(Utils.isBlank(c.getName()));\n+                assertFalse(Utils.isBlank(c.getTextualUploadDate()));\n+                assertFalse(Utils.isBlank(c.getThumbnailUrl()));\n+                assertFalse(Utils.isBlank(c.getUrl()));\n+                assertFalse(c.getLikeCount() != -1);", "originalCommit": "1829a1a8a2021761b869607fd08ac717ab68267c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTgzODE5Ng==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/340#discussion_r439838196", "body": "```suggestion\r\n            contents = json.getArray(\"data\");\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        contents = (JsonArray) JsonUtils.getValue(json, \"data\");\n          \n          \n            \n                        contents = json.getArray(\"data\");", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            contents <span class=\"pl-k\">=</span> <span class=\"x x-first\">(</span><span class=\"pl-smi x\">JsonArray</span><span class=\"x\">) </span><span class=\"pl-smi x\">JsonUtils</span><span class=\"pl-k x\">.</span><span class=\"x x-last\">getValue(json, </span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>data<span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            contents <span class=\"pl-k\">=</span> <span class=\"x x-first\">json</span><span class=\"pl-k x\">.</span><span class=\"x x-last\">getArray(</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>data<span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "B0pol", "createdAt": "2020-06-14T14:58:16Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeCommentsExtractor.java", "diffHunk": "@@ -38,22 +37,23 @@ public PeertubeCommentsExtractor(StreamingService service, ListLinkHandler uiHan\n         return initPage;\n     }\n \n-    private void collectStreamsFrom(CommentsInfoItemsCollector collector, JsonObject json, String pageUrl) throws ParsingException {\n-        JsonArray contents;\n+    private void collectCommentsFrom(final CommentsInfoItemsCollector collector, final JsonObject json) throws ParsingException {\n+        final JsonArray contents;\n         try {\n             contents = (JsonArray) JsonUtils.getValue(json, \"data\");", "originalCommit": "1829a1a8a2021761b869607fd08ac717ab68267c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTgzODI1OQ==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/340#discussion_r439838259", "bodyText": "and remove the try catch because getValue throws ParsingException, getArray doesn't throw anything.", "author": "B0pol", "createdAt": "2020-06-14T14:59:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTgzODE5Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTgzOTkwOA==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/340#discussion_r439839908", "body": "instead of checking whether there is no error (which will be broken for an unrelated error), you should check whether comment with id `9214` is not in the list of comment `id`s, via `PeertubeCommentsInfoItemExtractor#getCommentId()`", "bodyText": "instead of checking whether there is no error (which will be broken for an unrelated error), you should check whether comment with id 9214 is not in the list of comment ids, via PeertubeCommentsInfoItemExtractor#getCommentId()", "bodyHTML": "<p dir=\"auto\">instead of checking whether there is no error (which will be broken for an unrelated error), you should check whether comment with id <code>9214</code> is not in the list of comment <code>id</code>s, via <code>PeertubeCommentsInfoItemExtractor#getCommentId()</code></p>", "author": "B0pol", "createdAt": "2020-06-14T15:17:18Z", "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/peertube/PeertubeCommentsExtractorTest.java", "diffHunk": "@@ -18,74 +18,100 @@\n import static org.schabi.newpipe.extractor.ServiceList.PeerTube;\n \n public class PeertubeCommentsExtractorTest {\n+    public static class Default {\n+        private static PeertubeCommentsExtractor extractor;\n \n-    private static PeertubeCommentsExtractor extractor;\n+        @BeforeClass\n+        public static void setUp() throws Exception {\n+            NewPipe.init(DownloaderTestImpl.getInstance());\n+            extractor = (PeertubeCommentsExtractor) PeerTube\n+                    .getCommentsExtractor(\"https://framatube.org/videos/watch/04af977f-4201-4697-be67-a8d8cae6fa7a\");\n+        }\n \n-    @BeforeClass\n-    public static void setUp() throws Exception {\n-        NewPipe.init(DownloaderTestImpl.getInstance());\n-        extractor = (PeertubeCommentsExtractor) PeerTube\n-                .getCommentsExtractor(\"https://framatube.org/videos/watch/04af977f-4201-4697-be67-a8d8cae6fa7a\");\n-    }\n+        @Test\n+        public void testGetComments() throws IOException, ExtractionException {\n+            boolean result;\n+            InfoItemsPage<CommentsInfoItem> comments = extractor.getInitialPage();\n+            assertTrue(comments.getErrors().isEmpty());\n+            result = findInComments(comments, \"@root A great documentary on a great guy.\");\n \n-    @Test\n-    public void testGetComments() throws IOException, ExtractionException {\n-        boolean result = false;\n-        InfoItemsPage<CommentsInfoItem> comments = extractor.getInitialPage();\n-        result = findInComments(comments, \"@root A great documentary on a great guy.\");\n+            while (comments.hasNextPage() && !result) {\n+                comments = extractor.getPage(comments.getNextPageUrl());\n+                result = findInComments(comments, \"@root A great documentary on a great guy.\");\n+            }\n \n-        while (comments.hasNextPage() && !result) {\n-            comments = extractor.getPage(comments.getNextPageUrl());\n-            result = findInComments(comments, \"@root A great documentary on a great guy.\");\n+            assertTrue(result);\n         }\n \n-        assertTrue(result);\n-    }\n+        @Test\n+        public void testGetCommentsFromCommentsInfo() throws IOException, ExtractionException {\n+            boolean result;\n+            final CommentsInfo commentsInfo = CommentsInfo.getInfo(\"https://framatube.org/videos/watch/a8ea95b8-0396-49a6-8f30-e25e25fb2828\");\n+            assertTrue(commentsInfo.getErrors().isEmpty());\n+            assertEquals(\"Comments\", commentsInfo.getName());\n+            result = findInComments(commentsInfo.getRelatedItems(), \"Loved it!!!\");\n+\n+            String nextPage = commentsInfo.getNextPageUrl();\n+            while (!Utils.isBlank(nextPage) && !result) {\n+                final InfoItemsPage<CommentsInfoItem> moreItems = CommentsInfo.getMoreItems(PeerTube, commentsInfo, nextPage);\n+                result = findInComments(moreItems.getItems(), \"Loved it!!!\");\n+                nextPage = moreItems.getNextPageUrl();\n+            }\n \n-    @Test\n-    public void testGetCommentsFromCommentsInfo() throws IOException, ExtractionException {\n-        boolean result = false;\n-        CommentsInfo commentsInfo = CommentsInfo.getInfo(\"https://framatube.org/videos/watch/a8ea95b8-0396-49a6-8f30-e25e25fb2828\");\n-        assertEquals(\"Comments\", commentsInfo.getName());\n-        result = findInComments(commentsInfo.getRelatedItems(), \"Loved it!!!\");\n-\n-        String nextPage = commentsInfo.getNextPageUrl();\n-        while (!Utils.isBlank(nextPage) && !result) {\n-            InfoItemsPage<CommentsInfoItem> moreItems = CommentsInfo.getMoreItems(PeerTube, commentsInfo, nextPage);\n-            result = findInComments(moreItems.getItems(), \"Loved it!!!\");\n-            nextPage = moreItems.getNextPageUrl();\n+            assertTrue(result);\n         }\n \n-        assertTrue(result);\n-    }\n+        @Test\n+        public void testGetCommentsAllData() throws IOException, ExtractionException {\n+            final InfoItemsPage<CommentsInfoItem> comments = extractor.getInitialPage();\n+            for (final CommentsInfoItem c : comments.getItems()) {\n+                assertFalse(Utils.isBlank(c.getUploaderUrl()));\n+                assertFalse(Utils.isBlank(c.getUploaderName()));\n+                assertFalse(Utils.isBlank(c.getUploaderAvatarUrl()));\n+                assertFalse(Utils.isBlank(c.getCommentId()));\n+                assertFalse(Utils.isBlank(c.getCommentText()));\n+                assertFalse(Utils.isBlank(c.getName()));\n+                assertFalse(Utils.isBlank(c.getTextualUploadDate()));\n+                assertFalse(Utils.isBlank(c.getThumbnailUrl()));\n+                assertFalse(Utils.isBlank(c.getUrl()));\n+                assertFalse(c.getLikeCount() != -1);\n+            }\n+        }\n \n-    @Test\n-    public void testGetCommentsAllData() throws IOException, ExtractionException {\n-        InfoItemsPage<CommentsInfoItem> comments = extractor.getInitialPage();\n-        for (CommentsInfoItem c : comments.getItems()) {\n-            assertFalse(Utils.isBlank(c.getUploaderUrl()));\n-            assertFalse(Utils.isBlank(c.getUploaderName()));\n-            assertFalse(Utils.isBlank(c.getUploaderAvatarUrl()));\n-            assertFalse(Utils.isBlank(c.getCommentId()));\n-            assertFalse(Utils.isBlank(c.getCommentText()));\n-            assertFalse(Utils.isBlank(c.getName()));\n-            assertFalse(Utils.isBlank(c.getTextualUploadDate()));\n-            assertFalse(Utils.isBlank(c.getThumbnailUrl()));\n-            assertFalse(Utils.isBlank(c.getUrl()));\n-            assertFalse(c.getLikeCount() != -1);\n+        private boolean findInComments(final InfoItemsPage<CommentsInfoItem> comments, final String comment) {\n+            return findInComments(comments.getItems(), comment);\n         }\n-    }\n \n-    private boolean findInComments(InfoItemsPage<CommentsInfoItem> comments, String comment) {\n-        return findInComments(comments.getItems(), comment);\n+        private boolean findInComments(final List<CommentsInfoItem> comments, final String comment) {\n+            for (final CommentsInfoItem c : comments) {\n+                if (c.getCommentText().contains(comment)) {\n+                    return true;\n+                }\n+            }\n+            return false;\n+        }\n     }\n \n-    private boolean findInComments(List<CommentsInfoItem> comments, String comment) {\n-        for (CommentsInfoItem c : comments) {\n-            if (c.getCommentText().contains(comment)) {\n-                return true;\n-            }\n+    public static class DeletedComments {\n+        private static PeertubeCommentsExtractor extractor;\n+\n+        @BeforeClass\n+        public static void setUp() throws Exception {\n+            NewPipe.init(DownloaderTestImpl.getInstance());\n+            extractor = (PeertubeCommentsExtractor) PeerTube\n+                    .getCommentsExtractor(\"https://framatube.org/videos/watch/217eefeb-883d-45be-b7fc-a788ad8507d3\");\n+        }\n+", "originalCommit": "1829a1a8a2021761b869607fd08ac717ab68267c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTg0OTMyOA==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/340#discussion_r439849328", "bodyText": "instead of checking whether there is no error (which will be broken for an unrelated error), you should check whether comment with id 9214 is not in the list of comment ids, via PeertubeCommentsInfoItemExtractor#getCommentId()\n\nIt's still a good idea to check that there are no errors in general.\nEdit: what you're suggesting won't even work, as it fails extracting there, so it isn't in the list it returns, but only in the errors.", "author": "wb9688", "createdAt": "2020-06-14T17:06:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTgzOTkwOA=="}], "type": "inlineReview"}, {"oid": "3239aa84f237d2af07a4d586bd282b335c188716", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/3239aa84f237d2af07a4d586bd282b335c188716", "message": "Handle isDeleted for PeerTube comments", "committedDate": "2020-06-14T17:27:20Z", "type": "commit"}]}