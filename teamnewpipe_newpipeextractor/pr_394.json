{"pr_number": 394, "pr_title": "Fix issue #4213:  trim the last char of the URL if it is a closing parenthesis", "pr_author": "kirisakow", "pr_createdAt": "2020-09-03T00:31:56Z", "pr_url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/394", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDA3MTU0MA==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/394#discussion_r484071540", "body": "Return `null` instead of an empty string, if you found nothing (also remember to add `@Nullable` to the function)", "bodyText": "Return null instead of an empty string, if you found nothing (also remember to add @Nullable to the function)", "bodyHTML": "<p dir=\"auto\">Return <code>null</code> instead of an empty string, if you found nothing (also remember to add <code>@Nullable</code> to the function)</p>", "author": "Stypox", "createdAt": "2020-09-06T13:40:33Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/linkHandler/YoutubeStreamLinkHandlerFactory.java", "diffHunk": "@@ -46,13 +48,25 @@ public static YoutubeStreamLinkHandlerFactory getInstance() {\n         return instance;\n     }\n \n+    private static String extractId(@Nullable String id) {\n+        if (id != null) {\n+            Matcher m = Pattern.compile(\"([a-zA-Z0-9_-]{11})\").matcher(id);\n+            return m.find() ? m.group(1) : \"\";", "originalCommit": "31129682af923705b99f4c173114b8d5d72a9e54", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "366ed7152346ab3e514f3fc71f9e656f7f722a88", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/linkHandler/YoutubeStreamLinkHandlerFactory.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/linkHandler/YoutubeStreamLinkHandlerFactory.java\nindex 40a00d08..bcc1fac5 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/linkHandler/YoutubeStreamLinkHandlerFactory.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/linkHandler/YoutubeStreamLinkHandlerFactory.java\n", "chunk": "@@ -48,25 +49,19 @@ public class YoutubeStreamLinkHandlerFactory extends LinkHandlerFactory {\n         return instance;\n     }\n \n-    private static String extractId(@Nullable String id) {\n+    @Nullable\n+    private static String extractId(@Nullable final String id) {\n         if (id != null) {\n-            Matcher m = Pattern.compile(\"([a-zA-Z0-9_-]{11})\").matcher(id);\n-            return m.find() ? m.group(1) : \"\";\n+            final Matcher m = YOUTUBE_VIDEO_ID_REGEX_PATTERN.matcher(id);\n+            return m.find() ? m.group(1) : null;\n         }\n-        return \"\";\n+        return null;\n     }\n \n-    private static boolean isId(@Nullable String id) {\n-        if (id != null) {\n-            boolean isExtractedIdValid = !\"\".equalsIgnoreCase(extractId(id));\n-            return isExtractedIdValid;\n-        }\n-        return false;\n-    }\n-\n-    private static String assertIsId(@Nullable String id) throws ParsingException {\n-        if (isId(id)) {\n-            return extractId(id);\n+    private static String assertIsId(@Nullable final String id) throws ParsingException {\n+        final String extractedId = extractId(id);\n+        if (extractedId != null) {\n+            return extractedId;\n         } else {\n             throw new ParsingException(\"The given string is not a Youtube-Video-ID\");\n         }\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDA3MTk1Nw==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/394#discussion_r484071957", "body": "We might consider removing `isId()` altogether and replacing\r\n```java\r\nif (isId()) {\r\n    return extractId()\r\n}\r\n```\r\nwith \r\n```java\r\nfinal String extractedId = extractId(id);\r\nif (extractedId != null) {\r\n    return extractedId;\r\n}\r\n```\r\nwhich does one regex comparison less, and is even clearer imo", "bodyText": "We might consider removing isId() altogether and replacing\nif (isId()) {\n    return extractId()\n}\nwith\nfinal String extractedId = extractId(id);\nif (extractedId != null) {\n    return extractedId;\n}\nwhich does one regex comparison less, and is even clearer imo", "bodyHTML": "<p dir=\"auto\">We might consider removing <code>isId()</code> altogether and replacing</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"if (isId()) {\n    return extractId()\n}\"><pre><span class=\"pl-k\">if</span> (isId()) {\n    <span class=\"pl-k\">return</span> extractId()\n}</pre></div>\n<p dir=\"auto\">with</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"final String extractedId = extractId(id);\nif (extractedId != null) {\n    return extractedId;\n}\"><pre><span class=\"pl-k\">final</span> <span class=\"pl-smi\">String</span> extractedId <span class=\"pl-k\">=</span> extractId(id);\n<span class=\"pl-k\">if</span> (extractedId <span class=\"pl-k\">!=</span> <span class=\"pl-c1\">null</span>) {\n    <span class=\"pl-k\">return</span> extractedId;\n}</pre></div>\n<p dir=\"auto\">which does one regex comparison less, and is even clearer imo</p>", "author": "Stypox", "createdAt": "2020-09-06T13:44:16Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/linkHandler/YoutubeStreamLinkHandlerFactory.java", "diffHunk": "@@ -46,13 +48,25 @@ public static YoutubeStreamLinkHandlerFactory getInstance() {\n         return instance;\n     }\n \n+    private static String extractId(@Nullable String id) {\n+        if (id != null) {\n+            Matcher m = Pattern.compile(\"([a-zA-Z0-9_-]{11})\").matcher(id);\n+            return m.find() ? m.group(1) : \"\";\n+        }\n+        return \"\";\n+    }\n+\n     private static boolean isId(@Nullable String id) {", "originalCommit": "31129682af923705b99f4c173114b8d5d72a9e54", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "366ed7152346ab3e514f3fc71f9e656f7f722a88", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/linkHandler/YoutubeStreamLinkHandlerFactory.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/linkHandler/YoutubeStreamLinkHandlerFactory.java\nindex 40a00d08..bcc1fac5 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/linkHandler/YoutubeStreamLinkHandlerFactory.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/linkHandler/YoutubeStreamLinkHandlerFactory.java\n", "chunk": "@@ -48,25 +49,19 @@ public class YoutubeStreamLinkHandlerFactory extends LinkHandlerFactory {\n         return instance;\n     }\n \n-    private static String extractId(@Nullable String id) {\n+    @Nullable\n+    private static String extractId(@Nullable final String id) {\n         if (id != null) {\n-            Matcher m = Pattern.compile(\"([a-zA-Z0-9_-]{11})\").matcher(id);\n-            return m.find() ? m.group(1) : \"\";\n+            final Matcher m = YOUTUBE_VIDEO_ID_REGEX_PATTERN.matcher(id);\n+            return m.find() ? m.group(1) : null;\n         }\n-        return \"\";\n+        return null;\n     }\n \n-    private static boolean isId(@Nullable String id) {\n-        if (id != null) {\n-            boolean isExtractedIdValid = !\"\".equalsIgnoreCase(extractId(id));\n-            return isExtractedIdValid;\n-        }\n-        return false;\n-    }\n-\n-    private static String assertIsId(@Nullable String id) throws ParsingException {\n-        if (isId(id)) {\n-            return extractId(id);\n+    private static String assertIsId(@Nullable final String id) throws ParsingException {\n+        final String extractedId = extractId(id);\n+        if (extractedId != null) {\n+            return extractedId;\n         } else {\n             throw new ParsingException(\"The given string is not a Youtube-Video-ID\");\n         }\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDA3MjExMw==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/394#discussion_r484072113", "body": "Move `Pattern.compile(\"([a-zA-Z0-9_-]{11})\")` to a `public static final` class field, to prevent compiling it every time.", "bodyText": "Move Pattern.compile(\"([a-zA-Z0-9_-]{11})\") to a public static final class field, to prevent compiling it every time.", "bodyHTML": "<p dir=\"auto\">Move <code>Pattern.compile(\"([a-zA-Z0-9_-]{11})\")</code> to a <code>public static final</code> class field, to prevent compiling it every time.</p>", "author": "Stypox", "createdAt": "2020-09-06T13:45:36Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/linkHandler/YoutubeStreamLinkHandlerFactory.java", "diffHunk": "@@ -46,13 +48,25 @@ public static YoutubeStreamLinkHandlerFactory getInstance() {\n         return instance;\n     }\n \n+    private static String extractId(@Nullable String id) {\n+        if (id != null) {\n+            Matcher m = Pattern.compile(\"([a-zA-Z0-9_-]{11})\").matcher(id);", "originalCommit": "31129682af923705b99f4c173114b8d5d72a9e54", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "366ed7152346ab3e514f3fc71f9e656f7f722a88", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/linkHandler/YoutubeStreamLinkHandlerFactory.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/linkHandler/YoutubeStreamLinkHandlerFactory.java\nindex 40a00d08..bcc1fac5 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/linkHandler/YoutubeStreamLinkHandlerFactory.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/linkHandler/YoutubeStreamLinkHandlerFactory.java\n", "chunk": "@@ -48,25 +49,19 @@ public class YoutubeStreamLinkHandlerFactory extends LinkHandlerFactory {\n         return instance;\n     }\n \n-    private static String extractId(@Nullable String id) {\n+    @Nullable\n+    private static String extractId(@Nullable final String id) {\n         if (id != null) {\n-            Matcher m = Pattern.compile(\"([a-zA-Z0-9_-]{11})\").matcher(id);\n-            return m.find() ? m.group(1) : \"\";\n+            final Matcher m = YOUTUBE_VIDEO_ID_REGEX_PATTERN.matcher(id);\n+            return m.find() ? m.group(1) : null;\n         }\n-        return \"\";\n+        return null;\n     }\n \n-    private static boolean isId(@Nullable String id) {\n-        if (id != null) {\n-            boolean isExtractedIdValid = !\"\".equalsIgnoreCase(extractId(id));\n-            return isExtractedIdValid;\n-        }\n-        return false;\n-    }\n-\n-    private static String assertIsId(@Nullable String id) throws ParsingException {\n-        if (isId(id)) {\n-            return extractId(id);\n+    private static String assertIsId(@Nullable final String id) throws ParsingException {\n+        final String extractedId = extractId(id);\n+        if (extractedId != null) {\n+            return extractedId;\n         } else {\n             throw new ParsingException(\"The given string is not a Youtube-Video-ID\");\n         }\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA5NjQxNA==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/394#discussion_r485096414", "body": "Merge this and the above line into\n```java\nfinal String possiblyId = extractId(schemeSpecificPart.substring(2));\n```", "bodyText": "Merge this and the above line into\nfinal String possiblyId = extractId(schemeSpecificPart.substring(2));", "bodyHTML": "<p dir=\"auto\">Merge this and the above line into</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"final String possiblyId = extractId(schemeSpecificPart.substring(2));\n\"><pre><span class=\"pl-k\">final</span> <span class=\"pl-smi\">String</span> possiblyId <span class=\"pl-k\">=</span> extractId(schemeSpecificPart<span class=\"pl-k\">.</span>substring(<span class=\"pl-c1\">2</span>));</pre></div>", "author": "Stypox", "createdAt": "2020-09-08T17:52:03Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/linkHandler/YoutubeStreamLinkHandlerFactory.java", "diffHunk": "@@ -82,8 +91,9 @@ public String getId(String urlString) throws ParsingException, IllegalArgumentEx\n                 String schemeSpecificPart = uri.getSchemeSpecificPart();\n                 if (schemeSpecificPart.startsWith(\"//\")) {\n                     final String possiblyId = schemeSpecificPart.substring(2);\n-                    if (isId(possiblyId)) {\n-                        return possiblyId;\n+                    final String extractedId = extractId(possiblyId);", "originalCommit": "29cd72a749bb11bac31ceeeb9a05792175347960", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "366ed7152346ab3e514f3fc71f9e656f7f722a88", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/linkHandler/YoutubeStreamLinkHandlerFactory.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/linkHandler/YoutubeStreamLinkHandlerFactory.java\nindex 5243f1c8..bcc1fac5 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/linkHandler/YoutubeStreamLinkHandlerFactory.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/linkHandler/YoutubeStreamLinkHandlerFactory.java\n", "chunk": "@@ -90,8 +90,7 @@ public class YoutubeStreamLinkHandlerFactory extends LinkHandlerFactory {\n             if (scheme != null && (scheme.equals(\"vnd.youtube\") || scheme.equals(\"vnd.youtube.launch\"))) {\n                 String schemeSpecificPart = uri.getSchemeSpecificPart();\n                 if (schemeSpecificPart.startsWith(\"//\")) {\n-                    final String possiblyId = schemeSpecificPart.substring(2);\n-                    final String extractedId = extractId(possiblyId);\n+                    final String extractedId = extractId(schemeSpecificPart.substring(2));\n                     if (extractedId != null) {\n                         return extractedId;\n                     }\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDcxMTgxMg==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/394#discussion_r510711812", "body": "```suggestion\r\n            final Matcher m = YOUTUBE_VIDEO_ID_REGEX_PATTERN.matcher(id);\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        Matcher m = YOUTUBE_VIDEO_ID_REGEX_PATTERN.matcher(id);\n          \n          \n            \n                        final Matcher m = YOUTUBE_VIDEO_ID_REGEX_PATTERN.matcher(id);", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            <span class=\"pl-smi\">Matcher</span> m <span class=\"pl-k\">=</span> <span class=\"pl-c1\">YOUTUBE_VIDEO_ID_REGEX_PATTERN</span><span class=\"pl-k\">.</span>matcher(id);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            <span class=\"pl-k x x-first\">final</span><span class=\"x x-last\"> </span><span class=\"pl-smi\">Matcher</span> m <span class=\"pl-k\">=</span> <span class=\"pl-c1\">YOUTUBE_VIDEO_ID_REGEX_PATTERN</span><span class=\"pl-k\">.</span>matcher(id);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "TobiGr", "createdAt": "2020-10-23T08:13:20Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/linkHandler/YoutubeStreamLinkHandlerFactory.java", "diffHunk": "@@ -46,13 +49,19 @@ public static YoutubeStreamLinkHandlerFactory getInstance() {\n         return instance;\n     }\n \n-    private static boolean isId(@Nullable String id) {\n-        return id != null && id.matches(\"[a-zA-Z0-9_-]{11}\");\n+    @Nullable\n+    private static String extractId(@Nullable final String id) {\n+        if (id != null) {\n+            Matcher m = YOUTUBE_VIDEO_ID_REGEX_PATTERN.matcher(id);", "originalCommit": "995c167fcbca185a86a34d7ed74c9fdb1c0be91e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "366ed7152346ab3e514f3fc71f9e656f7f722a88", "changed_code": [{"header": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/linkHandler/YoutubeStreamLinkHandlerFactory.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/linkHandler/YoutubeStreamLinkHandlerFactory.java\nindex 07beccc6..bcc1fac5 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/linkHandler/YoutubeStreamLinkHandlerFactory.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/linkHandler/YoutubeStreamLinkHandlerFactory.java\n", "chunk": "@@ -52,7 +52,7 @@ public class YoutubeStreamLinkHandlerFactory extends LinkHandlerFactory {\n     @Nullable\n     private static String extractId(@Nullable final String id) {\n         if (id != null) {\n-            Matcher m = YOUTUBE_VIDEO_ID_REGEX_PATTERN.matcher(id);\n+            final Matcher m = YOUTUBE_VIDEO_ID_REGEX_PATTERN.matcher(id);\n             return m.find() ? m.group(1) : null;\n         }\n         return null;\n", "next_change": null}]}}, {"oid": "366ed7152346ab3e514f3fc71f9e656f7f722a88", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/366ed7152346ab3e514f3fc71f9e656f7f722a88", "message": "[YouTube] Ignore leading characters in video id", "committedDate": "2020-10-25T13:34:20Z", "type": "commit"}, {"oid": "366ed7152346ab3e514f3fc71f9e656f7f722a88", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/366ed7152346ab3e514f3fc71f9e656f7f722a88", "message": "[YouTube] Ignore leading characters in video id", "committedDate": "2020-10-25T13:34:20Z", "type": "forcePushed"}]}