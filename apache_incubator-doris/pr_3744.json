{"pr_number": 3744, "pr_title": "[Feature] Add QueryDetail to store query statistics.", "pr_author": "chaoyli", "pr_createdAt": "2020-06-01T13:16:57Z", "pr_url": "https://github.com/apache/incubator-doris/pull/3744", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI1OTgwNA==", "url": "https://github.com/apache/incubator-doris/pull/3744#discussion_r433259804", "body": "Can you explain why set eventTime as endTime?", "bodyText": "Can you explain why set eventTime as endTime?", "bodyHTML": "<p dir=\"auto\">Can you explain why set eventTime as endTime?</p>", "author": "xy720", "createdAt": "2020-06-01T14:15:00Z", "path": "fe/src/main/java/org/apache/doris/qe/ConnectProcessor.java", "diffHunk": "@@ -126,6 +129,11 @@ private void auditAfterExec(String origStmt, StatementBase parsedStmt, PQuerySta\n                 MetricRepo.HISTO_QUERY_LATENCY.update(elapseMs);\n             }\n             ctx.getAuditEventBuilder().setIsQuery(true);\n+            ctx.getQueryDetail().setEventTime(endTime);", "originalCommit": "8346a0b5c650a6d5bfb900ce65276da87602529f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzU4OTEyNg==", "url": "https://github.com/apache/incubator-doris/pull/3744#discussion_r433589126", "bodyText": "Because one query will be set when started, and then update when finished.\nIf query monitor collect between the two point. The query monitor can use eventTime to distinguish the two event. You can get the message from annotation in QueryDetail class.", "author": "chaoyli", "createdAt": "2020-06-02T02:37:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI1OTgwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI2MTE5NA==", "url": "https://github.com/apache/incubator-doris/pull/3744#discussion_r433261194", "body": "Do we need to clean up outdated querydetails when getQueryDetails() is not called for a long time \uff1f", "bodyText": "Do we need to clean up outdated querydetails when getQueryDetails() is not called for a long time \uff1f", "bodyHTML": "<p dir=\"auto\">Do we need to clean up outdated querydetails when getQueryDetails() is not called for a long time \uff1f</p>", "author": "xy720", "createdAt": "2020-06-01T14:17:29Z", "path": "fe/src/main/java/org/apache/doris/qe/QueryDetailQueue.java", "diffHunk": "@@ -0,0 +1,58 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.apache.doris.qe;\n+\n+import com.google.common.collect.Lists;\n+import com.google.common.collect.Maps;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.doris.qe.QueryDetail;\n+\n+// Queue of QueryDetail.\n+// It's used to collect queries for monitor.\n+// The default copacity is 10000.\n+public class QueryDetailQueue {\n+    private static Map<String, QueryDetail> queryDetails = Maps.newHashMap();\n+    private static int queryNumber = 0;\n+    private static int queryCapacity = 10000;\n+\n+    public static synchronized void addOrUpdateQueryDetail(QueryDetail queryDetail) {\n+        if (queryDetails.get(queryDetail.getQueryId()) == null) {\n+            if (queryNumber > queryCapacity) {\n+                return;\n+            }\n+            queryNumber++;\n+            queryDetails.put(queryDetail.getQueryId(), queryDetail);", "originalCommit": "8346a0b5c650a6d5bfb900ce65276da87602529f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQwMDI5OA==", "url": "https://github.com/apache/incubator-doris/pull/3744#discussion_r437400298", "bodyText": "I will clear it in the following request to getQueryDetails().", "author": "chaoyli", "createdAt": "2020-06-09T13:06:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI2MTE5NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI4MDYzMA==", "url": "https://github.com/apache/incubator-doris/pull/3744#discussion_r433280630", "body": "Why not use queue?", "bodyText": "Why not use queue?", "bodyHTML": "<p dir=\"auto\">Why not use queue?</p>", "author": "kangkaisen", "createdAt": "2020-06-01T14:50:30Z", "path": "fe/src/main/java/org/apache/doris/qe/QueryDetailQueue.java", "diffHunk": "@@ -0,0 +1,58 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.apache.doris.qe;\n+\n+import com.google.common.collect.Lists;\n+import com.google.common.collect.Maps;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.doris.qe.QueryDetail;\n+\n+// Queue of QueryDetail.\n+// It's used to collect queries for monitor.\n+// The default copacity is 10000.\n+public class QueryDetailQueue {\n+    private static Map<String, QueryDetail> queryDetails = Maps.newHashMap();", "originalCommit": "8346a0b5c650a6d5bfb900ce65276da87602529f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE2MDE0NQ==", "url": "https://github.com/apache/incubator-doris/pull/3744#discussion_r437160145", "bodyText": "Because I first add QueryDetail to this data structure.\nThen, I will update it when query finished.\nTo find the item to updated fast, I use a map to address the problem.", "author": "chaoyli", "createdAt": "2020-06-09T06:13:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI4MDYzMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI4MTI1OA==", "url": "https://github.com/apache/incubator-doris/pull/3744#discussion_r433281258", "body": "You could use putIfAbsent", "bodyText": "You could use putIfAbsent", "bodyHTML": "<p dir=\"auto\">You could use putIfAbsent</p>", "author": "kangkaisen", "createdAt": "2020-06-01T14:51:26Z", "path": "fe/src/main/java/org/apache/doris/qe/QueryDetailQueue.java", "diffHunk": "@@ -0,0 +1,58 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.apache.doris.qe;\n+\n+import com.google.common.collect.Lists;\n+import com.google.common.collect.Maps;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.doris.qe.QueryDetail;\n+\n+// Queue of QueryDetail.\n+// It's used to collect queries for monitor.\n+// The default copacity is 10000.\n+public class QueryDetailQueue {\n+    private static Map<String, QueryDetail> queryDetails = Maps.newHashMap();\n+    private static int queryNumber = 0;\n+    private static int queryCapacity = 10000;\n+\n+    public static synchronized void addOrUpdateQueryDetail(QueryDetail queryDetail) {\n+        if (queryDetails.get(queryDetail.getQueryId()) == null) {", "originalCommit": "8346a0b5c650a6d5bfb900ce65276da87602529f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM2MjIwMQ==", "url": "https://github.com/apache/incubator-doris/pull/3744#discussion_r437362201", "bodyText": "Because I need to increment queryNumber according to the judgement.", "author": "chaoyli", "createdAt": "2020-06-09T12:17:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI4MTI1OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI4MTc2Ng==", "url": "https://github.com/apache/incubator-doris/pull/3744#discussion_r433281766", "body": "Why clear when get?", "bodyText": "Why clear when get?", "bodyHTML": "<p dir=\"auto\">Why clear when get?</p>", "author": "kangkaisen", "createdAt": "2020-06-01T14:52:15Z", "path": "fe/src/main/java/org/apache/doris/qe/QueryDetailQueue.java", "diffHunk": "@@ -0,0 +1,58 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.apache.doris.qe;\n+\n+import com.google.common.collect.Lists;\n+import com.google.common.collect.Maps;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.doris.qe.QueryDetail;\n+\n+// Queue of QueryDetail.\n+// It's used to collect queries for monitor.\n+// The default copacity is 10000.\n+public class QueryDetailQueue {\n+    private static Map<String, QueryDetail> queryDetails = Maps.newHashMap();\n+    private static int queryNumber = 0;\n+    private static int queryCapacity = 10000;\n+\n+    public static synchronized void addOrUpdateQueryDetail(QueryDetail queryDetail) {\n+        if (queryDetails.get(queryDetail.getQueryId()) == null) {\n+            if (queryNumber > queryCapacity) {\n+                return;\n+            }\n+            queryNumber++;\n+            queryDetails.put(queryDetail.getQueryId(), queryDetail);\n+        } else {\n+            queryDetails.replace(queryDetail.getQueryId(), queryDetail);\n+        }\n+    }\n+\n+    public static synchronized List<QueryDetail> getQueryDetails(long eventTime) {\n+        List<QueryDetail> results = Lists.newArrayList();\n+        for (QueryDetail queryDetail : queryDetails.values()) {\n+            if (queryDetail.getEventTime() > eventTime) {\n+                results.add(queryDetail);\n+            }\n+        }\n+        queryDetails.clear();", "originalCommit": "8346a0b5c650a6d5bfb900ce65276da87602529f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI4MTc5Mw==", "url": "https://github.com/apache/incubator-doris/pull/3744#discussion_r433281793", "body": "Shouldn't change the default value.", "bodyText": "Shouldn't change the default value.", "bodyHTML": "<p dir=\"auto\">Shouldn't change the default value.</p>", "author": "kangkaisen", "createdAt": "2020-06-01T14:52:18Z", "path": "fe/src/main/java/org/apache/doris/qe/SessionVariable.java", "diffHunk": "@@ -109,7 +109,7 @@\n \n     // if true, need report to coordinator when plan fragment execute successfully.\n     @VariableMgr.VarAttr(name = IS_REPORT_SUCCESS)\n-    private boolean isReportSucc = false;\n+    private boolean isReportSucc = true;", "originalCommit": "8346a0b5c650a6d5bfb900ce65276da87602529f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzU5MTY2NA==", "url": "https://github.com/apache/incubator-doris/pull/3744#discussion_r433591664", "bodyText": "OK", "author": "chaoyli", "createdAt": "2020-06-02T02:48:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI4MTc5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI4MjY1Mg==", "url": "https://github.com/apache/incubator-doris/pull/3744#discussion_r433282652", "body": "I still don't understand what's the meaning of eventTime?  and why do we need it?", "bodyText": "I still don't understand what's the meaning of eventTime?  and why do we need it?", "bodyHTML": "<p dir=\"auto\">I still don't understand what's the meaning of eventTime?  and why do we need it?</p>", "author": "kangkaisen", "createdAt": "2020-06-01T14:53:41Z", "path": "fe/src/main/java/org/apache/doris/qe/QueryDetail.java", "diffHunk": "@@ -0,0 +1,114 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.apache.doris.qe;\n+\n+public class QueryDetail {\n+    public enum QueryMemState {\n+        RUNNING,\n+        FINISHED,\n+        FAILED,\n+        CANCELLED \n+    };\n+\n+    // When query received, FE will construct a QueryDtail  \n+    // object. This object will set queryId, startTime, sql\n+    // fields. As well state is be set as RUNNING. \n+    // After query finished, endTime and latency will\n+    // be set and state will be updated to be FINISHED/FAILED/CANCELLED\n+    // according to the query execution results.\n+    // So, one query will be inserted into as a item and \n+    // be udpated upon finished. To indicate the two event,\n+    // a extra field named eventTime is added.\n+    private long eventTime;", "originalCommit": "8346a0b5c650a6d5bfb900ce65276da87602529f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE1MTI1MA==", "url": "https://github.com/apache/incubator-doris/pull/3744#discussion_r437151250", "bodyText": "Every query will have two event.\nWhen starts a query, it will set QueryMemState as RUNNING.\nWhen finished, it will set QueryMemState as FINISHED/FAILED/CANCELLED according to query execution situation.\nQueryMonitor will collect QueryMemState starts a event time to handle this situation.", "author": "chaoyli", "createdAt": "2020-06-09T05:46:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI4MjY1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI4MzQ3Mg==", "url": "https://github.com/apache/incubator-doris/pull/3744#discussion_r433283472", "body": "prefer to \"/api/connection\"", "bodyText": "prefer to \"/api/connection\"", "bodyHTML": "<p dir=\"auto\">prefer to \"/api/connection\"</p>", "author": "kangkaisen", "createdAt": "2020-06-01T14:55:04Z", "path": "fe/src/main/java/org/apache/doris/http/rest/ConnectionAction.java", "diffHunk": "@@ -0,0 +1,63 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.apache.doris.http.rest;\n+\n+import io.netty.handler.codec.http.HttpMethod;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import org.apache.doris.common.util.DebugUtil;\n+import org.apache.doris.http.ActionController;\n+import org.apache.doris.http.BaseRequest;\n+import org.apache.doris.http.BaseResponse;\n+import org.apache.doris.http.IllegalArgException;\n+import org.apache.doris.qe.ConnectContext;\n+import org.apache.doris.service.ExecuteEnv;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+// This class is used to get current query_id of connection_id.\n+// Every connection holds at most one query at every point.\n+// Some we can get query_id firstly, and get query by query_id.\n+public class ConnectionAction extends RestBaseAction {\n+    public ConnectionAction(ActionController controller) {\n+        super(controller);\n+    }\n+\n+    public static void registerAction (ActionController controller) throws IllegalArgException {\n+        controller.registerHandler(HttpMethod.GET, \"/connection\", new ConnectionAction(controller));", "originalCommit": "8346a0b5c650a6d5bfb900ce65276da87602529f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI4NDczOA==", "url": "https://github.com/apache/incubator-doris/pull/3744#discussion_r433284738", "body": "prefer response by json", "bodyText": "prefer response by json", "bodyHTML": "<p dir=\"auto\">prefer response by json</p>", "author": "kangkaisen", "createdAt": "2020-06-01T14:57:01Z", "path": "fe/src/main/java/org/apache/doris/http/rest/ConnectionAction.java", "diffHunk": "@@ -0,0 +1,63 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.apache.doris.http.rest;\n+\n+import io.netty.handler.codec.http.HttpMethod;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import org.apache.doris.common.util.DebugUtil;\n+import org.apache.doris.http.ActionController;\n+import org.apache.doris.http.BaseRequest;\n+import org.apache.doris.http.BaseResponse;\n+import org.apache.doris.http.IllegalArgException;\n+import org.apache.doris.qe.ConnectContext;\n+import org.apache.doris.service.ExecuteEnv;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+// This class is used to get current query_id of connection_id.\n+// Every connection holds at most one query at every point.\n+// Some we can get query_id firstly, and get query by query_id.\n+public class ConnectionAction extends RestBaseAction {\n+    public ConnectionAction(ActionController controller) {\n+        super(controller);\n+    }\n+\n+    public static void registerAction (ActionController controller) throws IllegalArgException {\n+        controller.registerHandler(HttpMethod.GET, \"/connection\", new ConnectionAction(controller));\n+    }\n+\n+    @Override\n+    public void execute(BaseRequest request, BaseResponse response) {\n+        String connStr = request.getSingleParameter(\"connection_id\");\n+        if (connStr == null) {\n+            response.getContent().append(\"not valid parameter\");\n+            sendResult(request, response, HttpResponseStatus.BAD_REQUEST);\n+            return;\n+        }\n+        long connectionId = Long.valueOf(connStr.trim());\n+        ConnectContext context = ExecuteEnv.getInstance().getScheduler().getContext(connectionId);\n+        if (context == null || context.queryId() == null) {\n+            response.getContent().append(\"connection id \" + connectionId + \" not found.\");\n+            sendResult(request, response, HttpResponseStatus.NOT_FOUND);\n+            return;\n+        }\n+        String queryId = DebugUtil.printId(context.queryId());\n+        response.getContent().append(queryId);\n+        sendResult(request, response);", "originalCommit": "8346a0b5c650a6d5bfb900ce65276da87602529f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI5NDMyMw==", "url": "https://github.com/apache/incubator-doris/pull/3744#discussion_r433294323", "body": "Add some comment about this class.", "bodyText": "Add some comment about this class.", "bodyHTML": "<p dir=\"auto\">Add some comment about this class.</p>", "author": "morningman", "createdAt": "2020-06-01T15:12:58Z", "path": "fe/src/main/java/org/apache/doris/http/rest/ProfileAction.java", "diffHunk": "@@ -0,0 +1,56 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.apache.doris.http.rest;\n+\n+import org.apache.doris.common.util.ProfileManager;\n+import org.apache.doris.http.ActionController;\n+import org.apache.doris.http.BaseRequest;\n+import org.apache.doris.http.BaseResponse;\n+import org.apache.doris.http.IllegalArgException;\n+\n+import io.netty.handler.codec.http.HttpMethod;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+\n+public class ProfileAction extends RestBaseAction {", "originalCommit": "8346a0b5c650a6d5bfb900ce65276da87602529f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI5NjY0NA==", "url": "https://github.com/apache/incubator-doris/pull/3744#discussion_r433296644", "body": "```suggestion\r\n    // When query received, FE will construct a QueryDetail  \r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // When query received, FE will construct a QueryDtail  \n          \n          \n            \n                // When query received, FE will construct a QueryDetail", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-c\"><span class=\"pl-c\">//</span> When query received, FE will construct a <span class=\"x x-first x-last\">QueryDtail</span>  </span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-c\"><span class=\"pl-c\">//</span> When query received, FE will construct a <span class=\"x x-first x-last\">QueryDetail</span>  </span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "morningman", "createdAt": "2020-06-01T15:16:40Z", "path": "fe/src/main/java/org/apache/doris/qe/QueryDetail.java", "diffHunk": "@@ -0,0 +1,114 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.apache.doris.qe;\n+\n+public class QueryDetail {\n+    public enum QueryMemState {\n+        RUNNING,\n+        FINISHED,\n+        FAILED,\n+        CANCELLED \n+    };\n+\n+    // When query received, FE will construct a QueryDtail  ", "originalCommit": "8346a0b5c650a6d5bfb900ce65276da87602529f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzU5MTI4OA==", "url": "https://github.com/apache/incubator-doris/pull/3744#discussion_r433591288", "bodyText": "fixed.", "author": "chaoyli", "createdAt": "2020-06-02T02:46:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI5NjY0NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzMwMDEzMw==", "url": "https://github.com/apache/incubator-doris/pull/3744#discussion_r433300133", "body": "You call this class a `Queue`, so I think it some kind of FIFO struct.\r\nBut here if you find `queryNumber > queryCapacity`, you just discard the new incoming queries?", "bodyText": "You call this class a Queue, so I think it some kind of FIFO struct.\nBut here if you find queryNumber > queryCapacity, you just discard the new incoming queries?", "bodyHTML": "<p dir=\"auto\">You call this class a <code>Queue</code>, so I think it some kind of FIFO struct.<br>\nBut here if you find <code>queryNumber &gt; queryCapacity</code>, you just discard the new incoming queries?</p>", "author": "morningman", "createdAt": "2020-06-01T15:22:37Z", "path": "fe/src/main/java/org/apache/doris/qe/QueryDetailQueue.java", "diffHunk": "@@ -0,0 +1,58 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.apache.doris.qe;\n+\n+import com.google.common.collect.Lists;\n+import com.google.common.collect.Maps;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.doris.qe.QueryDetail;\n+\n+// Queue of QueryDetail.\n+// It's used to collect queries for monitor.\n+// The default copacity is 10000.\n+public class QueryDetailQueue {\n+    private static Map<String, QueryDetail> queryDetails = Maps.newHashMap();\n+    private static int queryNumber = 0;\n+    private static int queryCapacity = 10000;\n+\n+    public static synchronized void addOrUpdateQueryDetail(QueryDetail queryDetail) {\n+        if (queryDetails.get(queryDetail.getQueryId()) == null) {\n+            if (queryNumber > queryCapacity) {", "originalCommit": "8346a0b5c650a6d5bfb900ce65276da87602529f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM2MTYzNA==", "url": "https://github.com/apache/incubator-doris/pull/3744#discussion_r437361634", "bodyText": "I will change it to remove the prior items.", "author": "chaoyli", "createdAt": "2020-06-09T12:16:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzMwMDEzMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODIyNjA1Nw==", "url": "https://github.com/apache/incubator-doris/pull/3744#discussion_r438226057", "body": "Why call it \"Mem\" State? How about just QueryState\uff1f", "bodyText": "Why call it \"Mem\" State? How about just QueryState\uff1f", "bodyHTML": "<p dir=\"auto\">Why call it \"Mem\" State? How about just QueryState\uff1f</p>", "author": "morningman", "createdAt": "2020-06-10T15:45:59Z", "path": "fe/src/main/java/org/apache/doris/qe/QueryDetail.java", "diffHunk": "@@ -0,0 +1,125 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.apache.doris.qe;\n+\n+public class QueryDetail {\n+    public enum QueryMemState {", "originalCommit": "88e7b765b722e572e941839db0a8a8d0709c7419", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODczNjIwOQ==", "url": "https://github.com/apache/incubator-doris/pull/3744#discussion_r438736209", "bodyText": "Because it has a class use QueryState in another meaning.", "author": "chaoyli", "createdAt": "2020-06-11T12:08:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODIyNjA1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODIyOTM3OA==", "url": "https://github.com/apache/incubator-doris/pull/3744#discussion_r438229378", "body": "Forget to update the queryNumber?\r\nAnd I think queryNumber is useless, you can just use `totalQueries.size()`", "bodyText": "Forget to update the queryNumber?\nAnd I think queryNumber is useless, you can just use totalQueries.size()", "bodyHTML": "<p dir=\"auto\">Forget to update the queryNumber?<br>\nAnd I think queryNumber is useless, you can just use <code>totalQueries.size()</code></p>", "author": "morningman", "createdAt": "2020-06-10T15:50:53Z", "path": "fe/src/main/java/org/apache/doris/qe/QueryDetailQueue.java", "diffHunk": "@@ -0,0 +1,72 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.apache.doris.qe;\n+\n+import com.google.common.collect.Lists;\n+import com.google.common.collect.Maps;\n+import java.util.Iterator;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.doris.qe.QueryDetail;\n+\n+// Queue of QueryDetail.\n+// It's used to collect queries for monitor.\n+// The default copacity is 10000.\n+public class QueryDetailQueue {\n+    private static Map<String, QueryDetail> runningQueries = Maps.newHashMap();\n+    private static LinkedList<QueryDetail> totalQueries = new LinkedList<QueryDetail>();\n+    private static int queryNumber = 0;\n+    private static int queryCapacity = 10000;\n+\n+    public static synchronized void addOrUpdateQueryDetail(QueryDetail queryDetail) {\n+        if (runningQueries.get(queryDetail.getQueryId()) == null) {\n+            queryNumber++;\n+            runningQueries.put(queryDetail.getQueryId(), queryDetail);\n+            totalQueries.add(queryDetail);\n+        } else {\n+            QueryDetail qDetail = runningQueries.remove(queryDetail.getQueryId());\n+            qDetail.setLatency(queryDetail.getLatency());\n+            qDetail.setState(queryDetail.getState());\n+        }\n+        if (queryNumber > queryCapacity) {\n+            QueryDetail qDetail = totalQueries.remove();\n+            runningQueries.remove(qDetail.getQueryId());", "originalCommit": "88e7b765b722e572e941839db0a8a8d0709c7419", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODczOTM5MA==", "url": "https://github.com/apache/incubator-doris/pull/3744#discussion_r438739390", "bodyText": "OK, It can use totalQueries instead.", "author": "chaoyli", "createdAt": "2020-06-11T12:15:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODIyOTM3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODIyOTc0MQ==", "url": "https://github.com/apache/incubator-doris/pull/3744#discussion_r438229741", "body": "Are you sure to \"remove\" it here? I think it should be \"get\"?", "bodyText": "Are you sure to \"remove\" it here? I think it should be \"get\"?", "bodyHTML": "<p dir=\"auto\">Are you sure to \"remove\" it here? I think it should be \"get\"?</p>", "author": "morningman", "createdAt": "2020-06-10T15:51:26Z", "path": "fe/src/main/java/org/apache/doris/qe/QueryDetailQueue.java", "diffHunk": "@@ -0,0 +1,72 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.apache.doris.qe;\n+\n+import com.google.common.collect.Lists;\n+import com.google.common.collect.Maps;\n+import java.util.Iterator;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.doris.qe.QueryDetail;\n+\n+// Queue of QueryDetail.\n+// It's used to collect queries for monitor.\n+// The default copacity is 10000.\n+public class QueryDetailQueue {\n+    private static Map<String, QueryDetail> runningQueries = Maps.newHashMap();\n+    private static LinkedList<QueryDetail> totalQueries = new LinkedList<QueryDetail>();\n+    private static int queryNumber = 0;\n+    private static int queryCapacity = 10000;\n+\n+    public static synchronized void addOrUpdateQueryDetail(QueryDetail queryDetail) {\n+        if (runningQueries.get(queryDetail.getQueryId()) == null) {\n+            queryNumber++;\n+            runningQueries.put(queryDetail.getQueryId(), queryDetail);\n+            totalQueries.add(queryDetail);\n+        } else {\n+            QueryDetail qDetail = runningQueries.remove(queryDetail.getQueryId());", "originalCommit": "88e7b765b722e572e941839db0a8a8d0709c7419", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODIzMjgzNA==", "url": "https://github.com/apache/incubator-doris/pull/3744#discussion_r438232834", "body": "Why removing the qDetails?  This method is not reentrant?", "bodyText": "Why removing the qDetails?  This method is not reentrant?", "bodyHTML": "<p dir=\"auto\">Why removing the qDetails?  This method is not reentrant?</p>", "author": "morningman", "createdAt": "2020-06-10T15:55:42Z", "path": "fe/src/main/java/org/apache/doris/qe/QueryDetailQueue.java", "diffHunk": "@@ -0,0 +1,72 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.apache.doris.qe;\n+\n+import com.google.common.collect.Lists;\n+import com.google.common.collect.Maps;\n+import java.util.Iterator;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.doris.qe.QueryDetail;\n+\n+// Queue of QueryDetail.\n+// It's used to collect queries for monitor.\n+// The default copacity is 10000.\n+public class QueryDetailQueue {\n+    private static Map<String, QueryDetail> runningQueries = Maps.newHashMap();\n+    private static LinkedList<QueryDetail> totalQueries = new LinkedList<QueryDetail>();\n+    private static int queryNumber = 0;\n+    private static int queryCapacity = 10000;\n+\n+    public static synchronized void addOrUpdateQueryDetail(QueryDetail queryDetail) {\n+        if (runningQueries.get(queryDetail.getQueryId()) == null) {\n+            queryNumber++;\n+            runningQueries.put(queryDetail.getQueryId(), queryDetail);\n+            totalQueries.add(queryDetail);\n+        } else {\n+            QueryDetail qDetail = runningQueries.remove(queryDetail.getQueryId());\n+            qDetail.setLatency(queryDetail.getLatency());\n+            qDetail.setState(queryDetail.getState());\n+        }\n+        if (queryNumber > queryCapacity) {\n+            QueryDetail qDetail = totalQueries.remove();\n+            runningQueries.remove(qDetail.getQueryId());\n+        }\n+    }\n+\n+    public static synchronized List<QueryDetail> getQueryDetails(long eventTime) {\n+        List<QueryDetail> results = Lists.newArrayList();\n+        int pos = 0;\n+        Iterator<QueryDetail> it = totalQueries.iterator();\n+        while(it.hasNext()) {\n+            QueryDetail queryDetail = it.next();\n+            if (queryDetail.getEventTime() > eventTime) {\n+                results.add(queryDetail);\n+            } else {\n+                pos++;\n+            }\n+        }\n+        for (int i = 0; i < pos; ++i) {", "originalCommit": "88e7b765b722e572e941839db0a8a8d0709c7419", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTgzMDg4Nw==", "url": "https://github.com/apache/incubator-doris/pull/3744#discussion_r439830887", "body": "Why removing this?\r\nBecause it add many a long xml upon start but it has little sense.", "bodyText": "Why removing this?\nBecause it add many a long xml upon start but it has little sense.", "bodyHTML": "<p dir=\"auto\">Why removing this?<br>\nBecause it add many a long xml upon start but it has little sense.</p>", "author": "morningman", "createdAt": "2020-06-14T13:37:32Z", "path": "fe/src/main/java/org/apache/doris/common/Log4jConfig.java", "diffHunk": "@@ -179,10 +179,6 @@ private static void reconfig() throws IOException {\n         strSub = new StrSubstitutor(new Interpolator(properties));\n         newXmlConfTemplate = strSub.replace(newXmlConfTemplate);\n \n-        System.out.println(\"=====\");", "originalCommit": "0e54bfb0cb65d611facb7ee3dfe2bcdd36905bb4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTgzMDkwNQ==", "url": "https://github.com/apache/incubator-doris/pull/3744#discussion_r439830905", "body": "Why removing this?", "bodyText": "Why removing this?", "bodyHTML": "<p dir=\"auto\">Why removing this?</p>", "author": "morningman", "createdAt": "2020-06-14T13:37:39Z", "path": "fe/src/main/java/org/apache/doris/PaloFe.java", "diffHunk": "@@ -73,7 +73,6 @@ public static void start(String dorisHomeDir, String pidDir, String[] args) {\n         }\n \n         CommandLineOptions cmdLineOpts = parseArgs(args);\n-        System.out.println(cmdLineOpts.toString());", "originalCommit": "0e54bfb0cb65d611facb7ee3dfe2bcdd36905bb4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTgzMTMyMw==", "url": "https://github.com/apache/incubator-doris/pull/3744#discussion_r439831323", "body": "Add unit test for this class", "bodyText": "Add unit test for this class", "bodyHTML": "<p dir=\"auto\">Add unit test for this class</p>", "author": "morningman", "createdAt": "2020-06-14T13:42:34Z", "path": "fe/src/main/java/org/apache/doris/qe/QueryDetailQueue.java", "diffHunk": "@@ -0,0 +1,71 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.apache.doris.qe;\n+\n+import com.google.common.collect.Lists;\n+import com.google.common.collect.Maps;\n+import java.util.Iterator;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.doris.qe.QueryDetail;\n+\n+// Queue of QueryDetail.\n+// It's used to collect queries for monitor.\n+// The default copacity is 10000.\n+public class QueryDetailQueue {", "originalCommit": "0e54bfb0cb65d611facb7ee3dfe2bcdd36905bb4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "e0acd0b7b0eb4db469d0c49c1a07d5f28e49afa8", "url": "https://github.com/apache/incubator-doris/commit/e0acd0b7b0eb4db469d0c49c1a07d5f28e49afa8", "message": "[Feature] Add QueryDetail to store query statistics.\n1. Store the query statistics in memory.\n2. Supporting RESTFUL interface to get the statistics.", "committedDate": "2020-06-15T09:31:49Z", "type": "commit"}, {"oid": "9500aac7a8d5a79e4f239054d0a35f8dc38d40df", "url": "https://github.com/apache/incubator-doris/commit/9500aac7a8d5a79e4f239054d0a35f8dc38d40df", "message": "Fix unit bug", "committedDate": "2020-06-15T09:31:50Z", "type": "commit"}, {"oid": "4bbd061116c91b45ea0ea79dbfe7770062fe3e1f", "url": "https://github.com/apache/incubator-doris/commit/4bbd061116c91b45ea0ea79dbfe7770062fe3e1f", "message": "Fix the bug", "committedDate": "2020-06-15T09:31:50Z", "type": "commit"}, {"oid": "0e368f50c699601f3fab3c0c96e64da3f64f5d3e", "url": "https://github.com/apache/incubator-doris/commit/0e368f50c699601f3fab3c0c96e64da3f64f5d3e", "message": "Fix some metrics interface", "committedDate": "2020-06-15T09:31:50Z", "type": "commit"}, {"oid": "16668cd2838cd1507d3beaa10649730eb64a48c7", "url": "https://github.com/apache/incubator-doris/commit/16668cd2838cd1507d3beaa10649730eb64a48c7", "message": "Fix bug", "committedDate": "2020-06-15T09:31:50Z", "type": "commit"}, {"oid": "65dd79dde3570006933790f059782a96c3df115e", "url": "https://github.com/apache/incubator-doris/commit/65dd79dde3570006933790f059782a96c3df115e", "message": "Add docs", "committedDate": "2020-06-15T09:31:50Z", "type": "commit"}, {"oid": "a93a0a52147020246e2bd5d518ffc02134a17934", "url": "https://github.com/apache/incubator-doris/commit/a93a0a52147020246e2bd5d518ffc02134a17934", "message": "Add some docs", "committedDate": "2020-06-15T09:31:50Z", "type": "commit"}, {"oid": "393d20ddbfc572f632721ddbb1d4dce4ea74fee4", "url": "https://github.com/apache/incubator-doris/commit/393d20ddbfc572f632721ddbb1d4dce4ea74fee4", "message": "Add unit test for QueryDetailQueue", "committedDate": "2020-06-15T09:31:50Z", "type": "commit"}]}