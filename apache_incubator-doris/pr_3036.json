{"pr_number": 3036, "pr_title": "Support different keys type between mv and base table", "pr_author": "EmmyMiao87", "pr_createdAt": "2020-03-04T11:35:48Z", "pr_url": "https://github.com/apache/incubator-doris/pull/3036", "timeline": [{"oid": "dad7be22b3b84ac8258e3b0fcdb754230348a57a", "url": "https://github.com/apache/incubator-doris/commit/dad7be22b3b84ac8258e3b0fcdb754230348a57a", "message": "Support different keys type between mv and base table\n\nFirstly, add materialized index meta in olap table\n\nThe materialized index meta include index name, schema, schemahash, keystype etc.\nThe information itself scattered in each map is encapsulated into MaterializedIndexMeta.\n\nAlso the keys type of index meta maybe not same as keys type of base index after materialized view enabled.\n\nSecondly, support the deduplicate mv.\nIf there is group by or aggregation function in create mv stmt, the keys type of mv is agg.\nAt the same time, the keys type of base table is duplicate.\nFor example\nDuplicate table (k1, k2, v1)\nMV (k1, k2) group by k1, k2\nIt should be aggregated during executing mv.", "committedDate": "2020-03-04T08:39:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY2NDA0OA==", "url": "https://github.com/apache/incubator-doris/pull/3036#discussion_r387664048", "body": "Use GSON to serde", "bodyText": "Use GSON to serde", "bodyHTML": "<p dir=\"auto\">Use GSON to serde</p>", "author": "morningman", "createdAt": "2020-03-04T13:26:23Z", "path": "fe/src/main/java/org/apache/doris/catalog/MaterializedIndexMeta.java", "diffHunk": "@@ -0,0 +1,129 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.apache.doris.catalog;\n+\n+import org.apache.doris.common.io.Text;\n+import org.apache.doris.common.io.Writable;\n+import org.apache.doris.thrift.TStorageType;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.Lists;\n+\n+import java.io.DataInput;\n+import java.io.DataOutput;\n+import java.io.IOException;\n+import java.util.List;\n+\n+public class MaterializedIndexMeta implements Writable {\n+    private long indexId;\n+    private String indexName;\n+    private List<Column> schema = Lists.newArrayList();\n+    private int schemaVersion;\n+    private int schemaHash;\n+    private short shortKeyColumnCount;\n+    private TStorageType storageType;\n+    private KeysType keysType;\n+\n+    public MaterializedIndexMeta(long indexId, String indexName, List<Column> schema, int schemaVersion, int\n+            schemaHash, short shortKeyColumnCount, TStorageType storageType, KeysType keysType) {\n+        this.indexId = indexId;\n+        Preconditions.checkState(indexName != null);\n+        this.indexName = indexName;\n+        Preconditions.checkState(schema != null);\n+        Preconditions.checkState(schema.size() != 0);\n+        this.schema = schema;\n+        this.schemaVersion = schemaVersion;\n+        this.schemaHash = schemaHash;\n+        this.shortKeyColumnCount = shortKeyColumnCount;\n+        Preconditions.checkState(storageType != null);\n+        this.storageType = storageType;\n+        Preconditions.checkState(keysType != null);\n+        this.keysType = keysType;\n+    }\n+\n+    public long getIndexId() {\n+        return indexId;\n+    }\n+\n+    public String getIndexName() {\n+        return indexName;\n+    }\n+\n+    public KeysType getKeysType() {\n+        return keysType;\n+    }\n+\n+    public void setKeysType(KeysType keysType) {\n+        this.keysType = keysType;\n+    }\n+\n+    public TStorageType getStorageType() {\n+        return storageType;\n+    }\n+\n+    public List<Column> getSchema() {\n+        return schema;\n+    }\n+\n+    public int getSchemaHash() {\n+        return schemaHash;\n+    }\n+\n+    public short getShortKeyColumnCount() {\n+        return shortKeyColumnCount;\n+    }\n+\n+    public int getSchemaVersion() {\n+        return schemaVersion;\n+    }\n+\n+    @Override\n+    public void write(DataOutput out) throws IOException {", "originalCommit": "dad7be22b3b84ac8258e3b0fcdb754230348a57a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODA1ODI4Mw==", "url": "https://github.com/apache/incubator-doris/pull/3036#discussion_r388058283", "bodyText": "Added", "author": "EmmyMiao87", "createdAt": "2020-03-05T03:16:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY2NDA0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY2NTc2Mg==", "url": "https://github.com/apache/incubator-doris/pull/3036#discussion_r387665762", "body": "Delete if not use", "bodyText": "Delete if not use", "bodyHTML": "<p dir=\"auto\">Delete if not use</p>", "author": "morningman", "createdAt": "2020-03-04T13:29:26Z", "path": "fe/src/main/java/org/apache/doris/catalog/OlapTable.java", "diffHunk": "@@ -133,12 +122,12 @@\n     public OlapTable() {\n         // for persist\n         super(TableType.OLAP);\n-        this.indexIdToSchema = new HashMap<Long, List<Column>>();\n-        this.indexIdToSchemaHash = new HashMap<Long, Integer>();\n-        this.indexIdToSchemaVersion = new HashMap<Long, Integer>();\n-\n-        this.indexIdToShortKeyColumnCount = new HashMap<Long, Short>();\n-        this.indexIdToStorageType = new HashMap<Long, TStorageType>();\n+//        this.indexIdToSchema = new HashMap<Long, List<Column>>();", "originalCommit": "dad7be22b3b84ac8258e3b0fcdb754230348a57a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY2NjIyMw==", "url": "https://github.com/apache/incubator-doris/pull/3036#discussion_r387666223", "body": "Duplicated", "bodyText": "Duplicated", "bodyHTML": "<p dir=\"auto\">Duplicated</p>", "author": "morningman", "createdAt": "2020-03-04T13:30:23Z", "path": "fe/src/main/java/org/apache/doris/catalog/OlapTable.java", "diffHunk": "@@ -166,13 +155,6 @@ public OlapTable(long id, String tableName, List<Column> baseSchema, KeysType ke\n \n         this.state = OlapTableState.NORMAL;\n \n-        this.indexIdToSchema = new HashMap<Long, List<Column>>();\n-        this.indexIdToSchemaHash = new HashMap<Long, Integer>();\n-        this.indexIdToSchemaVersion = new HashMap<Long, Integer>();\n-\n-        this.indexIdToShortKeyColumnCount = new HashMap<Long, Short>();\n-        this.indexIdToStorageType = new HashMap<Long, TStorageType>();\n-\n         this.indexNameToId = new HashMap<String, Long>();", "originalCommit": "dad7be22b3b84ac8258e3b0fcdb754230348a57a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY3MTkyMQ==", "url": "https://github.com/apache/incubator-doris/pull/3036#discussion_r387671921", "body": "change method name", "bodyText": "change method name", "bodyHTML": "<p dir=\"auto\">change method name</p>", "author": "morningman", "createdAt": "2020-03-04T13:40:47Z", "path": "fe/src/main/java/org/apache/doris/catalog/OlapTable.java", "diffHunk": "@@ -343,11 +330,11 @@ public String getIndexNameById(long indexId) {\n         return null;\n     }\n \n-    public Map<Long, List<Column>> getVisibleIndexIdToSchema() {\n-        Map<Long, List<Column>> visibleMVs = Maps.newHashMap();\n+    public Map<Long, MaterializedIndexMeta> getVisibleIndexIdToSchema() {", "originalCommit": "dad7be22b3b84ac8258e3b0fcdb754230348a57a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY3NDM0OQ==", "url": "https://github.com/apache/incubator-doris/pull/3036#discussion_r387674349", "body": "index may not exist. you should check it.", "bodyText": "index may not exist. you should check it.", "bodyHTML": "<p dir=\"auto\">index may not exist. you should check it.</p>", "author": "morningman", "createdAt": "2020-03-04T13:45:10Z", "path": "fe/src/main/java/org/apache/doris/catalog/OlapTable.java", "diffHunk": "@@ -501,61 +506,25 @@ public Status resetIdsForRestore(Catalog catalog, Database db, int restoreReplic\n         return keyColumns;\n     }\n \n-    // schema version\n-    public int getSchemaVersionByIndexId(Long indexId) {\n-        if (indexIdToSchemaVersion.containsKey(indexId)) {\n-            return indexIdToSchemaVersion.get(indexId);\n-        }\n-        return -1;\n-    }\n-\n     // schemaHash\n     public Map<Long, Integer> getIndexIdToSchemaHash() {\n-        return indexIdToSchemaHash;\n-    }\n-\n-    public Map<Long, Integer> getCopiedIndexIdToSchemaHash() {\n-        return new HashMap<>(indexIdToSchemaHash);\n-    }\n-\n-    public int getSchemaHashByIndexId(Long indexId) {\n-        if (indexIdToSchemaHash.containsKey(indexId)) {\n-            return indexIdToSchemaHash.get(indexId);\n+        Map<Long, Integer> result = Maps.newHashMap();\n+        for (Map.Entry<Long, MaterializedIndexMeta> entry : indexIdToMeta.entrySet()) {\n+            result.put(entry.getKey(), entry.getValue().getSchemaHash());\n         }\n-        return -1;\n-    }\n-\n-    // short key\n-    public Map<Long, Short> getIndexIdToShortKeyColumnCount() {\n-        return indexIdToShortKeyColumnCount;\n-    }\n-\n-    public Map<Long, Short> getCopiedIndexIdToShortKeyColumnCount() {\n-        return new HashMap<>(indexIdToShortKeyColumnCount);\n+        return result;\n     }\n \n-    public short getShortKeyColumnCountByIndexId(Long indexId) {\n-        if (indexIdToShortKeyColumnCount.containsKey(indexId)) {\n-            return indexIdToShortKeyColumnCount.get(indexId);\n+    public int getSchemaHashByIndexId(Long indexId) {\n+        MaterializedIndexMeta indexMeta = indexIdToMeta.get(indexId);\n+        if (indexMeta == null) {\n+            return -1;\n         }\n-        return (short) -1;\n-    }\n-\n-    // storage type\n-    public Map<Long, TStorageType> getIndexIdToStorageType() {\n-        return indexIdToStorageType;\n-    }\n-\n-    public Map<Long, TStorageType> getCopiedIndexIdToStorageType() {\n-        return new HashMap<>(indexIdToStorageType);\n-    }\n-\n-    public void setStorageTypeToIndex(Long indexId, TStorageType storageType) {\n-        indexIdToStorageType.put(indexId, storageType);\n+        return indexMeta.getSchemaHash();\n     }\n \n     public TStorageType getStorageTypeByIndexId(Long indexId) {\n-        return indexIdToStorageType.get(indexId);\n+        return indexIdToMeta.get(indexId).getStorageType();", "originalCommit": "dad7be22b3b84ac8258e3b0fcdb754230348a57a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODA1MTcwNA==", "url": "https://github.com/apache/incubator-doris/pull/3036#discussion_r388051704", "bodyText": "fixed", "author": "EmmyMiao87", "createdAt": "2020-03-05T02:47:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY3NDM0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY4NzQyMQ==", "url": "https://github.com/apache/incubator-doris/pull/3036#discussion_r387687421", "body": "Why setting `mvKeysType` again since you already set it before?\r\nDo we allowed user create mv like `select k1, k2, sum(v1)` without `group by` clause?", "bodyText": "Why setting mvKeysType again since you already set it before?\nDo we allowed user create mv like select k1, k2, sum(v1) without group by clause?", "bodyHTML": "<p dir=\"auto\">Why setting <code>mvKeysType</code> again since you already set it before?<br>\nDo we allowed user create mv like <code>select k1, k2, sum(v1)</code> without <code>group by</code> clause?</p>", "author": "morningman", "createdAt": "2020-03-04T14:07:09Z", "path": "fe/src/main/java/org/apache/doris/analysis/CreateMaterializedViewStmt.java", "diffHunk": "@@ -188,6 +189,7 @@ else if (functionChild0 instanceof CastExpr\n                                                         + \"Error function: \" + functionCallExpr.toSqlImpl());\n                 }\n                 meetAggregate = true;\n+                mvKeysType = KeysType.AGG_KEYS;", "originalCommit": "dad7be22b3b84ac8258e3b0fcdb754230348a57a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODA0Mzc4NQ==", "url": "https://github.com/apache/incubator-doris/pull/3036#discussion_r388043785", "bodyText": "This query select k1, k2, sum(v1) from table will be forbidden by analyzer.", "author": "EmmyMiao87", "createdAt": "2020-03-05T02:15:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY4NzQyMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY5MTUyMg==", "url": "https://github.com/apache/incubator-doris/pull/3036#discussion_r387691522", "body": "How about passing the olapTable's key type instead of null?", "bodyText": "How about passing the olapTable's key type instead of null?", "bodyHTML": "<p dir=\"auto\">How about passing the olapTable's key type instead of null?</p>", "author": "morningman", "createdAt": "2020-03-04T14:14:17Z", "path": "fe/src/main/java/org/apache/doris/alter/MaterializedViewHandler.java", "diffHunk": "@@ -260,7 +260,7 @@ public void processBatchAddRollup(List<AlterClause> alterClauses, Database db, O\n \n                 // step 3 create rollup job\n                 RollupJobV2 alterJobV2 = createMaterializedViewJob(rollupIndexName, baseIndexName, rollupSchema, addRollupClause.getProperties(),\n-                        olapTable, db, baseIndexId);\n+                        olapTable, db, baseIndexId, null);", "originalCommit": "dad7be22b3b84ac8258e3b0fcdb754230348a57a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODA0MTM0Mw==", "url": "https://github.com/apache/incubator-doris/pull/3036#discussion_r388041343", "bodyText": "OK", "author": "EmmyMiao87", "createdAt": "2020-03-05T02:05:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY5MTUyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY5NTEzOQ==", "url": "https://github.com/apache/incubator-doris/pull/3036#discussion_r387695139", "body": "```suggestion\r\n        Map<Long, MaterializedIndexMeta> candidateIndexIdToMeta = scanNode.getOlapTable().getVisibleIndexIdToSchema();\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Map<Long, MaterializedIndexMeta> candidateIndexIdToSchema = scanNode.getOlapTable().getVisibleIndexIdToSchema();\n          \n          \n            \n                    Map<Long, MaterializedIndexMeta> candidateIndexIdToMeta = scanNode.getOlapTable().getVisibleIndexIdToSchema();", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">Map&lt;<span class=\"pl-smi\">Long</span>, <span class=\"pl-smi\">MaterializedIndexMeta</span>&gt;</span> <span class=\"x x-first x-last\">candidateIndexIdToSchema</span> <span class=\"pl-k\">=</span> scanNode<span class=\"pl-k\">.</span>getOlapTable()<span class=\"pl-k\">.</span>getVisibleIndexIdToSchema();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">Map&lt;<span class=\"pl-smi\">Long</span>, <span class=\"pl-smi\">MaterializedIndexMeta</span>&gt;</span> <span class=\"x x-first x-last\">candidateIndexIdToMeta</span> <span class=\"pl-k\">=</span> scanNode<span class=\"pl-k\">.</span>getOlapTable()<span class=\"pl-k\">.</span>getVisibleIndexIdToSchema();</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "morningman", "createdAt": "2020-03-04T14:20:01Z", "path": "fe/src/main/java/org/apache/doris/planner/MaterializedViewSelector.java", "diffHunk": "@@ -115,14 +116,14 @@ public BestIndexInfo selectBestMV(ScanNode scanNode) throws UserException {\n \n     private Map<Long, List<Column>> predicates(OlapScanNode scanNode) {\n         // Step1: all of predicates is compensating predicates\n-        Map<Long, List<Column>> candidateIndexIdToSchema = scanNode.getOlapTable().getVisibleIndexIdToSchema();\n+        Map<Long, MaterializedIndexMeta> candidateIndexIdToSchema = scanNode.getOlapTable().getVisibleIndexIdToSchema();", "originalCommit": "dad7be22b3b84ac8258e3b0fcdb754230348a57a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "5b27732f83d4e2696d3d491bb1a78b66e68f2720", "url": "https://github.com/apache/incubator-doris/commit/5b27732f83d4e2696d3d491bb1a78b66e68f2720", "message": "Change to agg_key when aggregation info is not null", "committedDate": "2020-03-05T02:52:01Z", "type": "commit"}, {"oid": "3ef5ecde17b83a336c8ad071304a70d51ce7c957", "url": "https://github.com/apache/incubator-doris/commit/3ef5ecde17b83a336c8ad071304a70d51ce7c957", "message": "Add unit test", "committedDate": "2020-03-05T08:29:26Z", "type": "commit"}]}