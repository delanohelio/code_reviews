{"pr_number": 3453, "pr_title": "Support simple transitivity on join predicate pushdown", "pr_author": "kangkaisen", "pr_createdAt": "2020-05-02T12:43:48Z", "pr_url": "https://github.com/apache/incubator-doris/pull/3453", "timeline": [{"oid": "b1d2d04563b8837d991148441a85e996abb64265", "url": "https://github.com/apache/incubator-doris/commit/b1d2d04563b8837d991148441a85e996abb64265", "message": "Support simple transitivity on join predicate pushdown", "committedDate": "2020-05-02T12:30:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTA2NTA1OA==", "url": "https://github.com/apache/incubator-doris/pull/3453#discussion_r419065058", "body": "```suggestion\r\n                LOG.debug(\"pushDownConjuncts: {}\", pushDownConjuncts);\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            LOG.info(\"pushDownConjuncts: \" + pushDownConjuncts);\n          \n          \n            \n                            LOG.debug(\"pushDownConjuncts: {}\", pushDownConjuncts);", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                <span class=\"pl-c1\">LOG</span><span class=\"pl-k\">.</span><span class=\"x x-first x-last\">info</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>pushDownConjuncts: <span class=\"pl-pds x x-first\">\"</span></span><span class=\"x\"> </span><span class=\"pl-k x x-last\">+</span> pushDownConjuncts);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                <span class=\"pl-c1\">LOG</span><span class=\"pl-k\">.</span><span class=\"x x-first x-last\">debug</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>pushDownConjuncts: <span class=\"x x-first\">{}</span><span class=\"pl-pds x\">\"</span></span><span class=\"x x-last\">,</span> pushDownConjuncts);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "morningman", "createdAt": "2020-05-03T07:58:34Z", "path": "fe/src/main/java/org/apache/doris/planner/SingleNodePlanner.java", "diffHunk": "@@ -1347,6 +1349,45 @@ private PlanNode createScanNode(Analyzer analyzer, TableRef tblRef, SelectStmt s\n         if (scanNode instanceof OlapScanNode || scanNode instanceof EsScanNode) {\n             Map<String, PartitionColumnFilter> columnFilters = Maps.newHashMap();\n             List<Expr> conjuncts = analyzer.getUnassignedConjuncts(scanNode);\n+\n+            // push down join predicate\n+            List<Expr> pushDownConjuncts = Lists.newArrayList();\n+            TupleId tupleId = tblRef.getId();\n+            List<Expr> eqJoinPredicates = analyzer.getEqJoinConjuncts(tupleId);\n+            if (eqJoinPredicates != null) {\n+                // only inner and left outer join\n+                if ((tblRef.getJoinOp().isInnerJoin() || tblRef.getJoinOp().isLeftOuterJoin())) {\n+                    List<Expr> allConjuncts = analyzer.getConjuncts(analyzer.getAllTupleIds());\n+                    allConjuncts.removeAll(conjuncts);\n+                    for (Expr conjunct: allConjuncts) {\n+                        if (canPushDownPredicate(conjunct)) {\n+                            for (Expr eqJoinPredicate : eqJoinPredicates) {\n+                                // we can ensure slot is left node, because NormalizeBinaryPredicatesRule\n+                                SlotRef otherSlot = conjunct.getChild(0).unwrapSlotRef();\n+\n+                                // ensure the children for eqJoinPredicate both be SlotRef\n+                                if (eqJoinPredicate.getChild(0).unwrapSlotRef() == null || eqJoinPredicate.getChild(1).unwrapSlotRef() == null) {\n+                                    continue;\n+                                }\n+\n+                                SlotRef leftSlot = eqJoinPredicate.getChild(0).unwrapSlotRef();\n+                                SlotRef rightSlot = eqJoinPredicate.getChild(1).unwrapSlotRef();\n+\n+                                // example: t1.id = t2.id and t1.id = 1  => t2.id =1\n+                                if (otherSlot.isBound(leftSlot.getSlotId()) && rightSlot.isBound(tupleId)) {\n+                                    pushDownConjuncts.add(rewritePredicate(analyzer, conjunct, rightSlot));\n+                                } else if (otherSlot.isBound(rightSlot.getSlotId()) && leftSlot.isBound(tupleId)) {\n+                                    pushDownConjuncts.add(rewritePredicate(analyzer, conjunct, leftSlot));\n+                                }\n+                            }\n+                        }\n+                    }\n+                }\n+\n+                LOG.info(\"pushDownConjuncts: \" + pushDownConjuncts);", "originalCommit": "b1d2d04563b8837d991148441a85e996abb64265", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTA2NTE3OQ==", "url": "https://github.com/apache/incubator-doris/pull/3453#discussion_r419065179", "body": "Better not using static import", "bodyText": "Better not using static import", "bodyHTML": "<p dir=\"auto\">Better not using static import</p>", "author": "morningman", "createdAt": "2020-05-03T07:59:35Z", "path": "fe/src/main/java/org/apache/doris/planner/SingleNodePlanner.java", "diffHunk": "@@ -72,6 +72,8 @@\n import java.util.Map;\n import java.util.UUID;\n \n+import static org.apache.doris.analysis.Predicate.canPushDownPredicate;", "originalCommit": "b1d2d04563b8837d991148441a85e996abb64265", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTE5MzUwMw==", "url": "https://github.com/apache/incubator-doris/pull/3453#discussion_r419193503", "bodyText": "OK", "author": "kangkaisen", "createdAt": "2020-05-04T02:31:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTA2NTE3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTA2NTI5MA==", "url": "https://github.com/apache/incubator-doris/pull/3453#discussion_r419065290", "body": "Add comment for this method?", "bodyText": "Add comment for this method?", "bodyHTML": "<p dir=\"auto\">Add comment for this method?</p>", "author": "morningman", "createdAt": "2020-05-03T08:00:45Z", "path": "fe/src/main/java/org/apache/doris/planner/SingleNodePlanner.java", "diffHunk": "@@ -1372,6 +1414,24 @@ private PlanNode createScanNode(Analyzer analyzer, TableRef tblRef, SelectStmt s\n         return scanNode;\n     }\n \n+    private Expr rewritePredicate(Analyzer analyzer, Expr oldPredicate, Expr leftChild) {", "originalCommit": "b1d2d04563b8837d991148441a85e996abb64265", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTE5MzUyNg==", "url": "https://github.com/apache/incubator-doris/pull/3453#discussion_r419193526", "bodyText": "OK", "author": "kangkaisen", "createdAt": "2020-05-04T02:31:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTA2NTI5MA=="}], "type": "inlineReview"}, {"oid": "5bafbdd599ec0aec1611987723165ca91d314698", "url": "https://github.com/apache/incubator-doris/commit/5bafbdd599ec0aec1611987723165ca91d314698", "message": "Update for comment", "committedDate": "2020-05-04T02:30:10Z", "type": "commit"}]}