{"pr_number": 8440, "pr_title": "Add MongoDB extension for JUnit 5", "pr_author": "bernd", "pr_createdAt": "2020-06-26T16:21:31Z", "pr_url": "https://github.com/Graylog2/graylog2-server/pull/8440", "timeline": [{"oid": "0a8625c7e743bb082d96460bf6c297efc04376f6", "url": "https://github.com/Graylog2/graylog2-server/commit/0a8625c7e743bb082d96460bf6c297efc04376f6", "message": "Add MongoDBExtension for JUnit 5\n\nIntroduce MongoDBTestService and MongoDBContainer to remove MongoDB\nservice specific code from the JUnit 4 MongoDBInstance rule.\n\nAdd a JUnit 5 extension for MongoDB that is using the new\nMongoDBTestService.\n\nThe MongoDBInstance API has been kept to avoid changing tons of tests.\nIt can go once we moved all test over to JUnit 5.\n\nCloses #7655", "committedDate": "2020-06-26T16:18:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc2NTQ4OQ==", "url": "https://github.com/Graylog2/graylog2-server/pull/8440#discussion_r452765489", "body": "I think it would make sense to hide the details of retrieving a collection in a method `MongoDBTestService#getCollection(String name)`.", "bodyText": "I think it would make sense to hide the details of retrieving a collection in a method MongoDBTestService#getCollection(String name).", "bodyHTML": "<p dir=\"auto\">I think it would make sense to hide the details of retrieving a collection in a method <code>MongoDBTestService#getCollection(String name)</code>.</p>", "author": "alex-konn", "createdAt": "2020-07-10T10:37:39Z", "path": "graylog2-server/src/test/java/org/graylog/testing/mongodb/MongoDBExtensionTest.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog.testing.mongodb;\n+\n+import com.mongodb.client.MongoCollection;\n+import org.bson.Document;\n+import org.bson.conversions.Bson;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Nested;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import static com.mongodb.client.model.Filters.eq;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+class MongoDBExtensionTest {\n+    @Nested\n+    class ProgrammaticInstanceRegistration {\n+        @SuppressWarnings(\"unused\")\n+        @RegisterExtension\n+        MongoDBExtension mongodbExtension = MongoDBExtension.create();\n+\n+        @Test\n+        @MongoDBFixtures(\"MongoDBExtensionTest-1.json\")\n+        void test(MongoDBTestService mongodb) {\n+            assertCollection(mongodb, \"test_1\", eq(\"hello\", \"world\"), \"54e3deadbeefdeadbeef0000\");\n+        }\n+\n+        @Test\n+        void withoutFixtures(MongoDBTestService mongodb) {\n+            assertEmptyCollection(mongodb, \"test_1\");\n+            assertEmptyCollection(mongodb, \"test_2\");\n+        }\n+    }\n+\n+    @Nested\n+    @ExtendWith(MongoDBExtension.class)\n+    class DeclarativeRegistration {\n+        private MongoCollection<Document> collection;\n+\n+        @BeforeEach\n+        void setUp(MongoDBTestService mongodb) {\n+            collection = mongodb.mongoConnection().getMongoDatabase().getCollection(\"test_2\");\n+        }\n+\n+        @Test\n+        @MongoDBFixtures(\"MongoDBExtensionTest-1.json\")\n+        void withSetUpInject() {\n+            assertCollection(collection, eq(\"field_a\", \"content1\"), \"54e3deadbeefdeadbeef0001\");\n+        }\n+\n+        @Test\n+        @MongoDBFixtures(\"MongoDBExtensionTest-1.json\")\n+        void withMethodInject(MongoDBTestService mongodb) {\n+            assertCollection(mongodb, \"test_2\", eq(\"field_a\", \"content1\"), \"54e3deadbeefdeadbeef0001\");\n+        }\n+\n+        @Test\n+        void withoutFixtures(MongoDBTestService mongodb) {\n+            assertEmptyCollection(mongodb, \"test_1\");\n+            assertEmptyCollection(mongodb, \"test_2\");\n+        }\n+    }\n+\n+    @Nested\n+    @ExtendWith(MongoDBExtension.class)\n+    @MongoDBFixtures(\"MongoDBExtensionTest-2.json\")\n+    class ClassFixtures {\n+        @Test\n+        void withoutMethodAnnotation(MongoDBTestService mongodb) {\n+            // Is using the class annotation\n+            assertCollection(mongodb, \"test_3\", eq(\"key\", \"value1\"), \"54e3deadbeefdeadbeef0000\");\n+            assertEmptyCollection(mongodb, \"test_1\");\n+        }\n+\n+        @Test\n+        @MongoDBFixtures(\"MongoDBExtensionTest-1.json\")\n+        void withMethodAnnotation(MongoDBTestService mongodb) {\n+            // Is ONLY using the method annotation and doesn't load the fixture from the class annotation\n+            assertEmptyCollection(mongodb, \"test_3\");\n+            assertCollection(mongodb, \"test_2\", eq(\"field_a\", \"content1\"), \"54e3deadbeefdeadbeef0001\");\n+        }\n+    }\n+\n+    private MongoCollection<Document> mongoCollection(MongoDBTestService mongodb, String name) {\n+        return mongodb.mongoConnection().getMongoDatabase().getCollection(name);", "originalCommit": "0a8625c7e743bb082d96460bf6c297efc04376f6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDE3MjE3NA==", "url": "https://github.com/Graylog2/graylog2-server/pull/8440#discussion_r454172174", "bodyText": "\ud83d\udc4d", "author": "bernd", "createdAt": "2020-07-14T07:54:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc2NTQ4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc2NzMyNg==", "url": "https://github.com/Graylog2/graylog2-server/pull/8440#discussion_r452767326", "body": "This constructor is unused. I think we can get rid of it. ", "bodyText": "This constructor is unused. I think we can get rid of it.", "bodyHTML": "<p dir=\"auto\">This constructor is unused. I think we can get rid of it.</p>", "author": "alex-konn", "createdAt": "2020-07-10T10:41:50Z", "path": "graylog2-server/src/test/java/org/graylog/testing/mongodb/MongoDBExtension.java", "diffHunk": "@@ -0,0 +1,190 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog.testing.mongodb;\n+\n+import org.junit.jupiter.api.extension.AfterAllCallback;\n+import org.junit.jupiter.api.extension.AfterEachCallback;\n+import org.junit.jupiter.api.extension.BeforeAllCallback;\n+import org.junit.jupiter.api.extension.BeforeEachCallback;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.jupiter.api.extension.InvocationInterceptor;\n+import org.junit.jupiter.api.extension.ParameterContext;\n+import org.junit.jupiter.api.extension.ParameterResolutionException;\n+import org.junit.jupiter.api.extension.ParameterResolver;\n+import org.junit.jupiter.api.extension.ReflectiveInvocationContext;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.lang.reflect.Method;\n+import java.util.Optional;\n+\n+import static java.util.Objects.requireNonNull;\n+import static org.junit.platform.commons.support.AnnotationSupport.findAnnotation;\n+\n+/**\n+ * Extension to provide a MongoDB service instance for JUnit 5 tests.\n+ *\n+ * <p>When used with {@link org.junit.jupiter.api.extension.ExtendWith ExtendWith} on a class or\n+ * {@link org.junit.jupiter.api.extension.RegisterExtension RegisterExtension} on a {@code static} field,\n+ * the extension starts a single MongoDB service instance for all tests in the class.\n+ *\n+ * <p>When used with {@link org.junit.jupiter.api.extension.RegisterExtension RegisterExtension} on a non-static field,\n+ * the extension starts a MongoDB service instance for <i>each test</i>.\n+ *\n+ * Test and setup/teardown methods can inject a {@link MongoDBTestService} parameter.\n+ *\n+ * <p>See {@link MongoDBExtensionTest} and {@link MongoDBExtensionWithRegistrationAsStaticFieldTest} for usage examples.\n+ */\n+public class MongoDBExtension implements BeforeAllCallback, AfterAllCallback, BeforeEachCallback, AfterEachCallback, ParameterResolver, InvocationInterceptor {\n+    private final String version;\n+\n+    private enum Lifecycle {\n+        ALL_TESTS, SINGLE_TEST\n+    }\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(MongoDBExtension.class);\n+    private static final ExtensionContext.Namespace NAMESPACE = ExtensionContext.Namespace.create(MongoDBExtension.class);\n+\n+    /**\n+     * Create new extension instance using default settings.\n+     *\n+     * @return the new extension instance\n+     */\n+    public static MongoDBExtension create() {\n+        return new MongoDBExtension(MongoDBTestService.DEFAULT_VERSION);\n+    }\n+\n+    /**\n+     * Create new extension instance using the given MongoDB service version.\n+     *\n+     * @return the new extension instance\n+     */\n+    public static MongoDBExtension create(String version) {\n+        return new MongoDBExtension(requireNonNull(version, \"version cannot be null\"));\n+    }\n+\n+    public MongoDBExtension() {", "originalCommit": "0a8625c7e743bb082d96460bf6c297efc04376f6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDE3MjA5NA==", "url": "https://github.com/Graylog2/graylog2-server/pull/8440#discussion_r454172094", "bodyText": "This is used by the JUnit 5 extension framework when using @ExtendWith. I suppressed the warning and added a comment.", "author": "bernd", "createdAt": "2020-07-14T07:54:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc2NzMyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDI0NTE4OQ==", "url": "https://github.com/Graylog2/graylog2-server/pull/8440#discussion_r454245189", "bodyText": "Ah! OK, that's fine as well.", "author": "alex-konn", "createdAt": "2020-07-14T10:02:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc2NzMyNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc2Nzk2MA==", "url": "https://github.com/Graylog2/graylog2-server/pull/8440#discussion_r452767960", "body": "I would suggest to rename this method to `createWithDefaultVersion`. That would clearly communicate what it's doing (and make the Javadoc for the method redundant as well IMO).", "bodyText": "I would suggest to rename this method to createWithDefaultVersion. That would clearly communicate what it's doing (and make the Javadoc for the method redundant as well IMO).", "bodyHTML": "<p dir=\"auto\">I would suggest to rename this method to <code>createWithDefaultVersion</code>. That would clearly communicate what it's doing (and make the Javadoc for the method redundant as well IMO).</p>", "author": "alex-konn", "createdAt": "2020-07-10T10:43:21Z", "path": "graylog2-server/src/test/java/org/graylog/testing/mongodb/MongoDBExtension.java", "diffHunk": "@@ -0,0 +1,190 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog.testing.mongodb;\n+\n+import org.junit.jupiter.api.extension.AfterAllCallback;\n+import org.junit.jupiter.api.extension.AfterEachCallback;\n+import org.junit.jupiter.api.extension.BeforeAllCallback;\n+import org.junit.jupiter.api.extension.BeforeEachCallback;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.jupiter.api.extension.InvocationInterceptor;\n+import org.junit.jupiter.api.extension.ParameterContext;\n+import org.junit.jupiter.api.extension.ParameterResolutionException;\n+import org.junit.jupiter.api.extension.ParameterResolver;\n+import org.junit.jupiter.api.extension.ReflectiveInvocationContext;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.lang.reflect.Method;\n+import java.util.Optional;\n+\n+import static java.util.Objects.requireNonNull;\n+import static org.junit.platform.commons.support.AnnotationSupport.findAnnotation;\n+\n+/**\n+ * Extension to provide a MongoDB service instance for JUnit 5 tests.\n+ *\n+ * <p>When used with {@link org.junit.jupiter.api.extension.ExtendWith ExtendWith} on a class or\n+ * {@link org.junit.jupiter.api.extension.RegisterExtension RegisterExtension} on a {@code static} field,\n+ * the extension starts a single MongoDB service instance for all tests in the class.\n+ *\n+ * <p>When used with {@link org.junit.jupiter.api.extension.RegisterExtension RegisterExtension} on a non-static field,\n+ * the extension starts a MongoDB service instance for <i>each test</i>.\n+ *\n+ * Test and setup/teardown methods can inject a {@link MongoDBTestService} parameter.\n+ *\n+ * <p>See {@link MongoDBExtensionTest} and {@link MongoDBExtensionWithRegistrationAsStaticFieldTest} for usage examples.\n+ */\n+public class MongoDBExtension implements BeforeAllCallback, AfterAllCallback, BeforeEachCallback, AfterEachCallback, ParameterResolver, InvocationInterceptor {\n+    private final String version;\n+\n+    private enum Lifecycle {\n+        ALL_TESTS, SINGLE_TEST\n+    }\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(MongoDBExtension.class);\n+    private static final ExtensionContext.Namespace NAMESPACE = ExtensionContext.Namespace.create(MongoDBExtension.class);\n+\n+    /**\n+     * Create new extension instance using default settings.\n+     *\n+     * @return the new extension instance\n+     */\n+    public static MongoDBExtension create() {", "originalCommit": "0a8625c7e743bb082d96460bf6c297efc04376f6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDE3MjI0OA==", "url": "https://github.com/Graylog2/graylog2-server/pull/8440#discussion_r454172248", "bodyText": "\ud83d\udc4d", "author": "bernd", "createdAt": "2020-07-14T07:54:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc2Nzk2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc2OTIzMg==", "url": "https://github.com/Graylog2/graylog2-server/pull/8440#discussion_r452769232", "body": "The `throws Exception` clause can be removed.", "bodyText": "The throws Exception clause can be removed.", "bodyHTML": "<p dir=\"auto\">The <code>throws Exception</code> clause can be removed.</p>", "author": "alex-konn", "createdAt": "2020-07-10T10:46:21Z", "path": "graylog2-server/src/test/java/org/graylog/testing/mongodb/MongoDBExtension.java", "diffHunk": "@@ -0,0 +1,190 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog.testing.mongodb;\n+\n+import org.junit.jupiter.api.extension.AfterAllCallback;\n+import org.junit.jupiter.api.extension.AfterEachCallback;\n+import org.junit.jupiter.api.extension.BeforeAllCallback;\n+import org.junit.jupiter.api.extension.BeforeEachCallback;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.jupiter.api.extension.InvocationInterceptor;\n+import org.junit.jupiter.api.extension.ParameterContext;\n+import org.junit.jupiter.api.extension.ParameterResolutionException;\n+import org.junit.jupiter.api.extension.ParameterResolver;\n+import org.junit.jupiter.api.extension.ReflectiveInvocationContext;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.lang.reflect.Method;\n+import java.util.Optional;\n+\n+import static java.util.Objects.requireNonNull;\n+import static org.junit.platform.commons.support.AnnotationSupport.findAnnotation;\n+\n+/**\n+ * Extension to provide a MongoDB service instance for JUnit 5 tests.\n+ *\n+ * <p>When used with {@link org.junit.jupiter.api.extension.ExtendWith ExtendWith} on a class or\n+ * {@link org.junit.jupiter.api.extension.RegisterExtension RegisterExtension} on a {@code static} field,\n+ * the extension starts a single MongoDB service instance for all tests in the class.\n+ *\n+ * <p>When used with {@link org.junit.jupiter.api.extension.RegisterExtension RegisterExtension} on a non-static field,\n+ * the extension starts a MongoDB service instance for <i>each test</i>.\n+ *\n+ * Test and setup/teardown methods can inject a {@link MongoDBTestService} parameter.\n+ *\n+ * <p>See {@link MongoDBExtensionTest} and {@link MongoDBExtensionWithRegistrationAsStaticFieldTest} for usage examples.\n+ */\n+public class MongoDBExtension implements BeforeAllCallback, AfterAllCallback, BeforeEachCallback, AfterEachCallback, ParameterResolver, InvocationInterceptor {\n+    private final String version;\n+\n+    private enum Lifecycle {\n+        ALL_TESTS, SINGLE_TEST\n+    }\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(MongoDBExtension.class);\n+    private static final ExtensionContext.Namespace NAMESPACE = ExtensionContext.Namespace.create(MongoDBExtension.class);\n+\n+    /**\n+     * Create new extension instance using default settings.\n+     *\n+     * @return the new extension instance\n+     */\n+    public static MongoDBExtension create() {\n+        return new MongoDBExtension(MongoDBTestService.DEFAULT_VERSION);\n+    }\n+\n+    /**\n+     * Create new extension instance using the given MongoDB service version.\n+     *\n+     * @return the new extension instance\n+     */\n+    public static MongoDBExtension create(String version) {\n+        return new MongoDBExtension(requireNonNull(version, \"version cannot be null\"));\n+    }\n+\n+    public MongoDBExtension() {\n+        this(MongoDBTestService.DEFAULT_VERSION);\n+    }\n+\n+    public MongoDBExtension(String version) {\n+        this.version = version;\n+    }\n+\n+    private MongoDBTestService constructInstance(ExtensionContext context, Lifecycle lifecycle) {\n+        if (context.getStore(NAMESPACE).get(Lifecycle.class) == null) {\n+            context.getStore(NAMESPACE).put(Lifecycle.class, lifecycle);\n+        }\n+        return (MongoDBTestService) context.getStore(NAMESPACE).getOrComputeIfAbsent(MongoDBTestService.class, c -> {\n+            LOG.debug(\"Starting a new MongoDB service instance with lifecycle {}\", lifecycle);\n+            return MongoDBTestService.create(version);\n+        });\n+    }\n+\n+    private void closeInstance(ExtensionContext context) throws Exception {\n+        context.getStore(NAMESPACE).remove(Lifecycle.class);\n+        getInstance(context).close();\n+    }\n+\n+    private void clearInstance(ExtensionContext context) throws Exception {", "originalCommit": "0a8625c7e743bb082d96460bf6c297efc04376f6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDE3MjMyMg==", "url": "https://github.com/Graylog2/graylog2-server/pull/8440#discussion_r454172322", "bodyText": "\ud83d\udc4d", "author": "bernd", "createdAt": "2020-07-14T07:54:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc2OTIzMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc3MDAwOQ==", "url": "https://github.com/Graylog2/graylog2-server/pull/8440#discussion_r452770009", "body": "The `throws Exception` clause can be removed.", "bodyText": "The throws Exception clause can be removed.", "bodyHTML": "<p dir=\"auto\">The <code>throws Exception</code> clause can be removed.</p>", "author": "alex-konn", "createdAt": "2020-07-10T10:48:14Z", "path": "graylog2-server/src/test/java/org/graylog/testing/mongodb/MongoDBTestService.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog.testing.mongodb;\n+\n+import org.graylog2.configuration.MongoDbConfiguration;\n+import org.graylog2.database.MongoConnection;\n+import org.graylog2.database.MongoConnectionImpl;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.testcontainers.containers.Network;\n+\n+import java.util.Locale;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * Provides a MongoDB database service for tests.\n+ */\n+public class MongoDBTestService implements AutoCloseable {\n+    private static final Logger LOG = LoggerFactory.getLogger(MongoDBTestService.class);\n+\n+    private static final String DEFAULT_DATABASE_NAME = \"graylog\";\n+    public static final String DEFAULT_VERSION = MongoDBContainer.DEFAULT_VERSION;\n+\n+    private final MongoDBContainer container;\n+    private MongoConnectionImpl mongoConnection;\n+\n+    public static String defaultVersion() {\n+        return MongoDBContainer.DEFAULT_VERSION;\n+    }\n+\n+    /**\n+     * Create service instance with default settings.\n+     *\n+     * @return the service instance\n+     */\n+    public static MongoDBTestService create() {\n+        return new MongoDBTestService(MongoDBContainer.create());\n+    }\n+\n+    /**\n+     * Create service instance with the given version.\n+     *\n+     * @return the service instance\n+     */\n+    public static MongoDBTestService create(String version) {\n+        return new MongoDBTestService(MongoDBContainer.create(version));\n+    }\n+\n+    /**\n+     * Create service instance with the given network.\n+     *\n+     * @return the service instance\n+     */\n+    public static MongoDBTestService create(Network network) {\n+        return new MongoDBTestService(MongoDBContainer.create(network));\n+    }\n+\n+    /**\n+     * Create service instance with the given version and network.\n+     *\n+     * @return the service instance\n+     */\n+    public static MongoDBTestService create(String version, Network network) {\n+        return new MongoDBTestService(MongoDBContainer.create(version, network));\n+    }\n+\n+    private MongoDBTestService(MongoDBContainer container) {\n+        this.container = requireNonNull(container, \"container cannot be null\");\n+    }\n+\n+    /**\n+     * Starts the service and establishes a client connection. Will do nothing if service is already running.\n+     */\n+    public void start() {\n+        if (container.isRunning()) {\n+            return;\n+        }\n+\n+        LOG.debug(\"Attempting to start container for image: {}\", container.getDockerImageName());\n+\n+        container.start();\n+        LOG.debug(\"Started container: {}\", container.infoString());\n+\n+        final MongoDbConfiguration mongoConfiguration = new MongoDbConfiguration();\n+        mongoConfiguration.setUri(uri());\n+\n+        this.mongoConnection = new MongoConnectionImpl(mongoConfiguration);\n+        this.mongoConnection.connect();\n+        this.mongoConnection.getMongoDatabase().drop();\n+    }\n+\n+    /**\n+     * Close (shutdown) the service.\n+     *\n+     * @throws Exception when closing the service fails\n+     */\n+    @Override\n+    public void close() throws Exception {", "originalCommit": "0a8625c7e743bb082d96460bf6c297efc04376f6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDE3MjM3NA==", "url": "https://github.com/Graylog2/graylog2-server/pull/8440#discussion_r454172374", "bodyText": "\ud83d\udc4d", "author": "bernd", "createdAt": "2020-07-14T07:54:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc3MDAwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc3MDkzMw==", "url": "https://github.com/Graylog2/graylog2-server/pull/8440#discussion_r452770933", "body": "The `throws Exception` clause can be removed (if the one on `MongoDBTestService#close` is removed as well).", "bodyText": "The throws Exception clause can be removed (if the one on MongoDBTestService#close is removed as well).", "bodyHTML": "<p dir=\"auto\">The <code>throws Exception</code> clause can be removed (if the one on <code>MongoDBTestService#close</code> is removed as well).</p>", "author": "alex-konn", "createdAt": "2020-07-10T10:50:22Z", "path": "graylog2-server/src/test/java/org/graylog/testing/mongodb/MongoDBExtension.java", "diffHunk": "@@ -0,0 +1,190 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog.testing.mongodb;\n+\n+import org.junit.jupiter.api.extension.AfterAllCallback;\n+import org.junit.jupiter.api.extension.AfterEachCallback;\n+import org.junit.jupiter.api.extension.BeforeAllCallback;\n+import org.junit.jupiter.api.extension.BeforeEachCallback;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.jupiter.api.extension.InvocationInterceptor;\n+import org.junit.jupiter.api.extension.ParameterContext;\n+import org.junit.jupiter.api.extension.ParameterResolutionException;\n+import org.junit.jupiter.api.extension.ParameterResolver;\n+import org.junit.jupiter.api.extension.ReflectiveInvocationContext;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.lang.reflect.Method;\n+import java.util.Optional;\n+\n+import static java.util.Objects.requireNonNull;\n+import static org.junit.platform.commons.support.AnnotationSupport.findAnnotation;\n+\n+/**\n+ * Extension to provide a MongoDB service instance for JUnit 5 tests.\n+ *\n+ * <p>When used with {@link org.junit.jupiter.api.extension.ExtendWith ExtendWith} on a class or\n+ * {@link org.junit.jupiter.api.extension.RegisterExtension RegisterExtension} on a {@code static} field,\n+ * the extension starts a single MongoDB service instance for all tests in the class.\n+ *\n+ * <p>When used with {@link org.junit.jupiter.api.extension.RegisterExtension RegisterExtension} on a non-static field,\n+ * the extension starts a MongoDB service instance for <i>each test</i>.\n+ *\n+ * Test and setup/teardown methods can inject a {@link MongoDBTestService} parameter.\n+ *\n+ * <p>See {@link MongoDBExtensionTest} and {@link MongoDBExtensionWithRegistrationAsStaticFieldTest} for usage examples.\n+ */\n+public class MongoDBExtension implements BeforeAllCallback, AfterAllCallback, BeforeEachCallback, AfterEachCallback, ParameterResolver, InvocationInterceptor {\n+    private final String version;\n+\n+    private enum Lifecycle {\n+        ALL_TESTS, SINGLE_TEST\n+    }\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(MongoDBExtension.class);\n+    private static final ExtensionContext.Namespace NAMESPACE = ExtensionContext.Namespace.create(MongoDBExtension.class);\n+\n+    /**\n+     * Create new extension instance using default settings.\n+     *\n+     * @return the new extension instance\n+     */\n+    public static MongoDBExtension create() {\n+        return new MongoDBExtension(MongoDBTestService.DEFAULT_VERSION);\n+    }\n+\n+    /**\n+     * Create new extension instance using the given MongoDB service version.\n+     *\n+     * @return the new extension instance\n+     */\n+    public static MongoDBExtension create(String version) {\n+        return new MongoDBExtension(requireNonNull(version, \"version cannot be null\"));\n+    }\n+\n+    public MongoDBExtension() {\n+        this(MongoDBTestService.DEFAULT_VERSION);\n+    }\n+\n+    public MongoDBExtension(String version) {\n+        this.version = version;\n+    }\n+\n+    private MongoDBTestService constructInstance(ExtensionContext context, Lifecycle lifecycle) {\n+        if (context.getStore(NAMESPACE).get(Lifecycle.class) == null) {\n+            context.getStore(NAMESPACE).put(Lifecycle.class, lifecycle);\n+        }\n+        return (MongoDBTestService) context.getStore(NAMESPACE).getOrComputeIfAbsent(MongoDBTestService.class, c -> {\n+            LOG.debug(\"Starting a new MongoDB service instance with lifecycle {}\", lifecycle);\n+            return MongoDBTestService.create(version);\n+        });\n+    }\n+\n+    private void closeInstance(ExtensionContext context) throws Exception {", "originalCommit": "0a8625c7e743bb082d96460bf6c297efc04376f6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDE3MjQzNQ==", "url": "https://github.com/Graylog2/graylog2-server/pull/8440#discussion_r454172435", "bodyText": "\ud83d\udc4d", "author": "bernd", "createdAt": "2020-07-14T07:54:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc3MDkzMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc3MTYwOQ==", "url": "https://github.com/Graylog2/graylog2-server/pull/8440#discussion_r452771609", "body": "This is unused.", "bodyText": "This is unused.", "bodyHTML": "<p dir=\"auto\">This is unused.</p>", "author": "alex-konn", "createdAt": "2020-07-10T10:51:49Z", "path": "graylog2-server/src/test/java/org/graylog/testing/mongodb/MongoDBTestService.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog.testing.mongodb;\n+\n+import org.graylog2.configuration.MongoDbConfiguration;\n+import org.graylog2.database.MongoConnection;\n+import org.graylog2.database.MongoConnectionImpl;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.testcontainers.containers.Network;\n+\n+import java.util.Locale;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * Provides a MongoDB database service for tests.\n+ */\n+public class MongoDBTestService implements AutoCloseable {\n+    private static final Logger LOG = LoggerFactory.getLogger(MongoDBTestService.class);\n+\n+    private static final String DEFAULT_DATABASE_NAME = \"graylog\";\n+    public static final String DEFAULT_VERSION = MongoDBContainer.DEFAULT_VERSION;\n+\n+    private final MongoDBContainer container;\n+    private MongoConnectionImpl mongoConnection;\n+\n+    public static String defaultVersion() {", "originalCommit": "0a8625c7e743bb082d96460bf6c297efc04376f6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDE3MjQ4Nw==", "url": "https://github.com/Graylog2/graylog2-server/pull/8440#discussion_r454172487", "bodyText": "\ud83d\udc4d", "author": "bernd", "createdAt": "2020-07-14T07:54:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc3MTYwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc3NDczMw==", "url": "https://github.com/Graylog2/graylog2-server/pull/8440#discussion_r452774733", "body": "I would find the test easier to understand, if we explicitly assert that there is no collection at all using something like `assertThat(mongodb.mongoConnection().getMongoDatabase().listCollections()).isEmpty();`", "bodyText": "I would find the test easier to understand, if we explicitly assert that there is no collection at all using something like assertThat(mongodb.mongoConnection().getMongoDatabase().listCollections()).isEmpty();", "bodyHTML": "<p dir=\"auto\">I would find the test easier to understand, if we explicitly assert that there is no collection at all using something like <code>assertThat(mongodb.mongoConnection().getMongoDatabase().listCollections()).isEmpty();</code></p>", "author": "alex-konn", "createdAt": "2020-07-10T10:59:30Z", "path": "graylog2-server/src/test/java/org/graylog/testing/mongodb/MongoDBExtensionTest.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog.testing.mongodb;\n+\n+import com.mongodb.client.MongoCollection;\n+import org.bson.Document;\n+import org.bson.conversions.Bson;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Nested;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import static com.mongodb.client.model.Filters.eq;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+class MongoDBExtensionTest {\n+    @Nested\n+    class ProgrammaticInstanceRegistration {\n+        @SuppressWarnings(\"unused\")\n+        @RegisterExtension\n+        MongoDBExtension mongodbExtension = MongoDBExtension.create();\n+\n+        @Test\n+        @MongoDBFixtures(\"MongoDBExtensionTest-1.json\")\n+        void test(MongoDBTestService mongodb) {\n+            assertCollection(mongodb, \"test_1\", eq(\"hello\", \"world\"), \"54e3deadbeefdeadbeef0000\");\n+        }\n+\n+        @Test\n+        void withoutFixtures(MongoDBTestService mongodb) {\n+            assertEmptyCollection(mongodb, \"test_1\");", "originalCommit": "0a8625c7e743bb082d96460bf6c297efc04376f6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDE3MjU3MA==", "url": "https://github.com/Graylog2/graylog2-server/pull/8440#discussion_r454172570", "bodyText": "\ud83d\udc4d", "author": "bernd", "createdAt": "2020-07-14T07:54:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc3NDczMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc3NzExNg==", "url": "https://github.com/Graylog2/graylog2-server/pull/8440#discussion_r452777116", "body": "I would simply omit such generic Javadoc comments. The one on the class is really helpful. This one is just noise for me, because it provides no information that is not immediately visible from the method signature.", "bodyText": "I would simply omit such generic Javadoc comments. The one on the class is really helpful. This one is just noise for me, because it provides no information that is not immediately visible from the method signature.", "bodyHTML": "<p dir=\"auto\">I would simply omit such generic Javadoc comments. The one on the class is really helpful. This one is just noise for me, because it provides no information that is not immediately visible from the method signature.</p>", "author": "alex-konn", "createdAt": "2020-07-10T11:05:23Z", "path": "graylog2-server/src/test/java/org/graylog/testing/mongodb/MongoDBExtension.java", "diffHunk": "@@ -0,0 +1,190 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog.testing.mongodb;\n+\n+import org.junit.jupiter.api.extension.AfterAllCallback;\n+import org.junit.jupiter.api.extension.AfterEachCallback;\n+import org.junit.jupiter.api.extension.BeforeAllCallback;\n+import org.junit.jupiter.api.extension.BeforeEachCallback;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.jupiter.api.extension.InvocationInterceptor;\n+import org.junit.jupiter.api.extension.ParameterContext;\n+import org.junit.jupiter.api.extension.ParameterResolutionException;\n+import org.junit.jupiter.api.extension.ParameterResolver;\n+import org.junit.jupiter.api.extension.ReflectiveInvocationContext;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.lang.reflect.Method;\n+import java.util.Optional;\n+\n+import static java.util.Objects.requireNonNull;\n+import static org.junit.platform.commons.support.AnnotationSupport.findAnnotation;\n+\n+/**\n+ * Extension to provide a MongoDB service instance for JUnit 5 tests.\n+ *\n+ * <p>When used with {@link org.junit.jupiter.api.extension.ExtendWith ExtendWith} on a class or\n+ * {@link org.junit.jupiter.api.extension.RegisterExtension RegisterExtension} on a {@code static} field,\n+ * the extension starts a single MongoDB service instance for all tests in the class.\n+ *\n+ * <p>When used with {@link org.junit.jupiter.api.extension.RegisterExtension RegisterExtension} on a non-static field,\n+ * the extension starts a MongoDB service instance for <i>each test</i>.\n+ *\n+ * Test and setup/teardown methods can inject a {@link MongoDBTestService} parameter.\n+ *\n+ * <p>See {@link MongoDBExtensionTest} and {@link MongoDBExtensionWithRegistrationAsStaticFieldTest} for usage examples.\n+ */\n+public class MongoDBExtension implements BeforeAllCallback, AfterAllCallback, BeforeEachCallback, AfterEachCallback, ParameterResolver, InvocationInterceptor {\n+    private final String version;\n+\n+    private enum Lifecycle {\n+        ALL_TESTS, SINGLE_TEST\n+    }\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(MongoDBExtension.class);\n+    private static final ExtensionContext.Namespace NAMESPACE = ExtensionContext.Namespace.create(MongoDBExtension.class);\n+\n+    /**\n+     * Create new extension instance using default settings.\n+     *\n+     * @return the new extension instance\n+     */\n+    public static MongoDBExtension create() {\n+        return new MongoDBExtension(MongoDBTestService.DEFAULT_VERSION);\n+    }\n+\n+    /**\n+     * Create new extension instance using the given MongoDB service version.\n+     *\n+     * @return the new extension instance\n+     */", "originalCommit": "0a8625c7e743bb082d96460bf6c297efc04376f6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDE4MDE3NQ==", "url": "https://github.com/Graylog2/graylog2-server/pull/8440#discussion_r454180175", "bodyText": "\ud83d\udc4d", "author": "bernd", "createdAt": "2020-07-14T08:09:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc3NzExNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgwMDI5MA==", "url": "https://github.com/Graylog2/graylog2-server/pull/8440#discussion_r452800290", "body": "How about extracting private methods for finding the annotation and loading the fixtures? Would make this block a tad more readable IMO. \r\n\r\n```suggestion\r\n    private void processFixtures(ReflectiveInvocationContext<Method> invocationContext, ExtensionContext context) {\r\n        findFixtureAnnotation(context)\r\n                .ifPresent(annotation -> loadFixtures(invocationContext, context, annotation));\r\n    }\r\n\r\n    private Optional<MongoDBFixtures> findFixtureAnnotation(ExtensionContext context) {\r\n        ExtensionContext currentContext = context;\r\n        Optional<MongoDBFixtures> fixtureAnnotation;\r\n\r\n        // Find fixture annotation on current element or parent elements\r\n        do {\r\n            fixtureAnnotation = findAnnotation(currentContext.getElement(), MongoDBFixtures.class);\r\n\r\n            if (!currentContext.getParent().isPresent()) {\r\n                break;\r\n            }\r\n\r\n            currentContext = currentContext.getParent().get();\r\n        } while (!fixtureAnnotation.isPresent() && currentContext != context.getRoot());\r\n        return fixtureAnnotation;\r\n    }\r\n\r\n    private void loadFixtures(ReflectiveInvocationContext<Method> invocationContext, ExtensionContext context, MongoDBFixtures fixtureAnnotation) {\r\n        LOG.debug(\"Loading fixtures {} for {}#{}()\",\r\n                fixtureAnnotation.value(),\r\n                invocationContext.getTargetClass().getCanonicalName(),\r\n                invocationContext.getExecutable().getName());\r\n        final MongoDBFixtureImporter fixtureImporter = new MongoDBFixtureImporter(fixtureAnnotation.value(), invocationContext.getTargetClass());\r\n\r\n        fixtureImporter.importResources(getInstance(context).mongoConnection().getMongoDatabase());\r\n    }\r\n```", "bodyText": "How about extracting private methods for finding the annotation and loading the fixtures? Would make this block a tad more readable IMO.\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private void processFixtures(ReflectiveInvocationContext<Method> invocationContext, ExtensionContext context) {\n          \n          \n            \n                    ExtensionContext currentContext = context;\n          \n          \n            \n                    Optional<MongoDBFixtures> fixtureAnnotation;\n          \n          \n            \n            \n          \n          \n            \n                    // Find fixture annotation on current element or parent elements\n          \n          \n            \n                    do {\n          \n          \n            \n                        fixtureAnnotation = findAnnotation(currentContext.getElement(), MongoDBFixtures.class);\n          \n          \n            \n            \n          \n          \n            \n                        if (!currentContext.getParent().isPresent()) {\n          \n          \n            \n                            break;\n          \n          \n            \n                        }\n          \n          \n            \n            \n          \n          \n            \n                        currentContext = currentContext.getParent().get();\n          \n          \n            \n                    } while (!fixtureAnnotation.isPresent() && currentContext != context.getRoot());\n          \n          \n            \n            \n          \n          \n            \n                    if (fixtureAnnotation.isPresent()) {\n          \n          \n            \n                        final MongoDBFixtures fixtureFiles = fixtureAnnotation.get();\n          \n          \n            \n                        LOG.debug(\"Loading fixtures {} for {}#{}()\",\n          \n          \n            \n                                fixtureFiles.value(),\n          \n          \n            \n                                invocationContext.getTargetClass().getCanonicalName(),\n          \n          \n            \n                                invocationContext.getExecutable().getName());\n          \n          \n            \n                        final MongoDBFixtureImporter fixtureImporter = new MongoDBFixtureImporter(fixtureFiles.value(), invocationContext.getTargetClass());\n          \n          \n            \n            \n          \n          \n            \n                        fixtureImporter.importResources(getInstance(context).mongoConnection().getMongoDatabase());\n          \n          \n            \n                    }\n          \n          \n            \n                }\n          \n          \n            \n                private void processFixtures(ReflectiveInvocationContext<Method> invocationContext, ExtensionContext context) {\n          \n          \n            \n                    findFixtureAnnotation(context)\n          \n          \n            \n                            .ifPresent(annotation -> loadFixtures(invocationContext, context, annotation));\n          \n          \n            \n                }\n          \n          \n            \n            \n          \n          \n            \n                private Optional<MongoDBFixtures> findFixtureAnnotation(ExtensionContext context) {\n          \n          \n            \n                    ExtensionContext currentContext = context;\n          \n          \n            \n                    Optional<MongoDBFixtures> fixtureAnnotation;\n          \n          \n            \n            \n          \n          \n            \n                    // Find fixture annotation on current element or parent elements\n          \n          \n            \n                    do {\n          \n          \n            \n                        fixtureAnnotation = findAnnotation(currentContext.getElement(), MongoDBFixtures.class);\n          \n          \n            \n            \n          \n          \n            \n                        if (!currentContext.getParent().isPresent()) {\n          \n          \n            \n                            break;\n          \n          \n            \n                        }\n          \n          \n            \n            \n          \n          \n            \n                        currentContext = currentContext.getParent().get();\n          \n          \n            \n                    } while (!fixtureAnnotation.isPresent() && currentContext != context.getRoot());\n          \n          \n            \n                    return fixtureAnnotation;\n          \n          \n            \n                }\n          \n          \n            \n            \n          \n          \n            \n                private void loadFixtures(ReflectiveInvocationContext<Method> invocationContext, ExtensionContext context, MongoDBFixtures fixtureAnnotation) {\n          \n          \n            \n                    LOG.debug(\"Loading fixtures {} for {}#{}()\",\n          \n          \n            \n                            fixtureAnnotation.value(),\n          \n          \n            \n                            invocationContext.getTargetClass().getCanonicalName(),\n          \n          \n            \n                            invocationContext.getExecutable().getName());\n          \n          \n            \n                    final MongoDBFixtureImporter fixtureImporter = new MongoDBFixtureImporter(fixtureAnnotation.value(), invocationContext.getTargetClass());\n          \n          \n            \n            \n          \n          \n            \n                    fixtureImporter.importResources(getInstance(context).mongoConnection().getMongoDatabase());\n          \n          \n            \n                }", "bodyHTML": "<p dir=\"auto\">How about extracting private methods for finding the annotation and loading the fixtures? Would make this block a tad more readable IMO.</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"190\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">private</span> <span class=\"pl-k\">void</span> processFixtures(<span class=\"pl-k\">ReflectiveInvocationContext&lt;<span class=\"pl-smi\">Method</span>&gt;</span> invocationContext, <span class=\"pl-smi\">ExtensionContext</span> context) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"191\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-smi\">ExtensionContext</span> currentContext <span class=\"pl-k\">=</span> context;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"192\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">Optional&lt;<span class=\"pl-smi\">MongoDBFixtures</span>&gt;</span> fixtureAnnotation;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"193\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"194\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-c\"><span class=\"pl-c\">//</span> Find fixture annotation on current element or parent elements</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"195\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">do</span> {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"196\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            fixtureAnnotation <span class=\"pl-k\">=</span> findAnnotation(currentContext<span class=\"pl-k\">.</span>getElement(), <span class=\"pl-smi\">MongoDBFixtures</span><span class=\"pl-k\">.</span>class);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"197\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"198\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            <span class=\"pl-k\">if</span> (<span class=\"pl-k\">!</span>currentContext<span class=\"pl-k\">.</span>getParent()<span class=\"pl-k\">.</span>isPresent()) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"199\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                <span class=\"pl-k\">break</span>;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"200\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"201\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"202\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            currentContext <span class=\"pl-k\">=</span> currentContext<span class=\"pl-k\">.</span>getParent()<span class=\"pl-k\">.</span>get();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"203\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        } <span class=\"pl-k\">while</span> (<span class=\"pl-k\">!</span>fixtureAnnotation<span class=\"pl-k\">.</span>isPresent() <span class=\"pl-k\">&amp;&amp;</span> currentContext <span class=\"pl-k\">!=</span> context<span class=\"pl-k\">.</span>getRoot());</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"204\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"205\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">if</span> (fixtureAnnotation<span class=\"pl-k\">.</span>isPresent()) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"206\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            <span class=\"pl-k\">final</span> <span class=\"pl-smi\">MongoDBFixtures</span> fixtureFiles <span class=\"pl-k\">=</span> fixtureAnnotation<span class=\"pl-k\">.</span>get();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"207\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            <span class=\"pl-c1\">LOG</span><span class=\"pl-k\">.</span>debug(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Loading fixtures {} for {}#{}()<span class=\"pl-pds\">\"</span></span>,</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"208\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                    fixtureFiles<span class=\"pl-k\">.</span>value(),</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"209\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                    invocationContext<span class=\"pl-k\">.</span>getTargetClass()<span class=\"pl-k\">.</span>getCanonicalName(),</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"210\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                    invocationContext<span class=\"pl-k\">.</span>getExecutable()<span class=\"pl-k\">.</span>getName());</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"211\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            <span class=\"pl-k\">final</span> <span class=\"pl-smi\">MongoDBFixtureImporter</span> fixtureImporter <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">MongoDBFixtureImporter</span>(fixtureFiles<span class=\"pl-k\">.</span>value(), invocationContext<span class=\"pl-k\">.</span>getTargetClass());</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"212\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"213\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            fixtureImporter<span class=\"pl-k\">.</span>importResources(getInstance(context)<span class=\"pl-k\">.</span>mongoConnection()<span class=\"pl-k\">.</span>getMongoDatabase());</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"214\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"215\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"190\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">private</span> <span class=\"pl-k\">void</span> processFixtures(<span class=\"pl-k\">ReflectiveInvocationContext&lt;<span class=\"pl-smi\">Method</span>&gt;</span> invocationContext, <span class=\"pl-smi\">ExtensionContext</span> context) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"191\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        findFixtureAnnotation(context)</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"192\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                .ifPresent(annotation <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> loadFixtures(invocationContext, context, annotation));</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"193\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"194\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\"></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"195\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">private</span> <span class=\"pl-k\">Optional&lt;<span class=\"pl-smi\">MongoDBFixtures</span>&gt;</span> findFixtureAnnotation(<span class=\"pl-smi\">ExtensionContext</span> context) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"196\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-smi\">ExtensionContext</span> currentContext <span class=\"pl-k\">=</span> context;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"197\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">Optional&lt;<span class=\"pl-smi\">MongoDBFixtures</span>&gt;</span> fixtureAnnotation;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"198\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\"></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"199\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-c\"><span class=\"pl-c\">//</span> Find fixture annotation on current element or parent elements</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"200\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">do</span> {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"201\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            fixtureAnnotation <span class=\"pl-k\">=</span> findAnnotation(currentContext<span class=\"pl-k\">.</span>getElement(), <span class=\"pl-smi\">MongoDBFixtures</span><span class=\"pl-k\">.</span>class);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"202\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\"></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"203\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            <span class=\"pl-k\">if</span> (<span class=\"pl-k\">!</span>currentContext<span class=\"pl-k\">.</span>getParent()<span class=\"pl-k\">.</span>isPresent()) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"204\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                <span class=\"pl-k\">break</span>;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"205\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"206\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\"></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"207\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            currentContext <span class=\"pl-k\">=</span> currentContext<span class=\"pl-k\">.</span>getParent()<span class=\"pl-k\">.</span>get();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"208\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        } <span class=\"pl-k\">while</span> (<span class=\"pl-k\">!</span>fixtureAnnotation<span class=\"pl-k\">.</span>isPresent() <span class=\"pl-k\">&amp;&amp;</span> currentContext <span class=\"pl-k\">!=</span> context<span class=\"pl-k\">.</span>getRoot());</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"209\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">return</span> fixtureAnnotation;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"210\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"211\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\"></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"212\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">private</span> <span class=\"pl-k\">void</span> loadFixtures(<span class=\"pl-k\">ReflectiveInvocationContext&lt;<span class=\"pl-smi\">Method</span>&gt;</span> invocationContext, <span class=\"pl-smi\">ExtensionContext</span> context, <span class=\"pl-smi\">MongoDBFixtures</span> fixtureAnnotation) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"213\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-c1\">LOG</span><span class=\"pl-k\">.</span>debug(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Loading fixtures {} for {}#{}()<span class=\"pl-pds\">\"</span></span>,</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"214\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                fixtureAnnotation<span class=\"pl-k\">.</span>value(),</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"215\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                invocationContext<span class=\"pl-k\">.</span>getTargetClass()<span class=\"pl-k\">.</span>getCanonicalName(),</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"216\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                invocationContext<span class=\"pl-k\">.</span>getExecutable()<span class=\"pl-k\">.</span>getName());</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"217\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">final</span> <span class=\"pl-smi\">MongoDBFixtureImporter</span> fixtureImporter <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">MongoDBFixtureImporter</span>(fixtureAnnotation<span class=\"pl-k\">.</span>value(), invocationContext<span class=\"pl-k\">.</span>getTargetClass());</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"218\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\"></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"219\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        fixtureImporter<span class=\"pl-k\">.</span>importResources(getInstance(context)<span class=\"pl-k\">.</span>mongoConnection()<span class=\"pl-k\">.</span>getMongoDatabase());</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"220\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    }</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "alex-konn", "createdAt": "2020-07-10T12:02:33Z", "path": "graylog2-server/src/test/java/org/graylog/testing/mongodb/MongoDBExtension.java", "diffHunk": "@@ -0,0 +1,190 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog.testing.mongodb;\n+\n+import org.junit.jupiter.api.extension.AfterAllCallback;\n+import org.junit.jupiter.api.extension.AfterEachCallback;\n+import org.junit.jupiter.api.extension.BeforeAllCallback;\n+import org.junit.jupiter.api.extension.BeforeEachCallback;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.jupiter.api.extension.InvocationInterceptor;\n+import org.junit.jupiter.api.extension.ParameterContext;\n+import org.junit.jupiter.api.extension.ParameterResolutionException;\n+import org.junit.jupiter.api.extension.ParameterResolver;\n+import org.junit.jupiter.api.extension.ReflectiveInvocationContext;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.lang.reflect.Method;\n+import java.util.Optional;\n+\n+import static java.util.Objects.requireNonNull;\n+import static org.junit.platform.commons.support.AnnotationSupport.findAnnotation;\n+\n+/**\n+ * Extension to provide a MongoDB service instance for JUnit 5 tests.\n+ *\n+ * <p>When used with {@link org.junit.jupiter.api.extension.ExtendWith ExtendWith} on a class or\n+ * {@link org.junit.jupiter.api.extension.RegisterExtension RegisterExtension} on a {@code static} field,\n+ * the extension starts a single MongoDB service instance for all tests in the class.\n+ *\n+ * <p>When used with {@link org.junit.jupiter.api.extension.RegisterExtension RegisterExtension} on a non-static field,\n+ * the extension starts a MongoDB service instance for <i>each test</i>.\n+ *\n+ * Test and setup/teardown methods can inject a {@link MongoDBTestService} parameter.\n+ *\n+ * <p>See {@link MongoDBExtensionTest} and {@link MongoDBExtensionWithRegistrationAsStaticFieldTest} for usage examples.\n+ */\n+public class MongoDBExtension implements BeforeAllCallback, AfterAllCallback, BeforeEachCallback, AfterEachCallback, ParameterResolver, InvocationInterceptor {\n+    private final String version;\n+\n+    private enum Lifecycle {\n+        ALL_TESTS, SINGLE_TEST\n+    }\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(MongoDBExtension.class);\n+    private static final ExtensionContext.Namespace NAMESPACE = ExtensionContext.Namespace.create(MongoDBExtension.class);\n+\n+    /**\n+     * Create new extension instance using default settings.\n+     *\n+     * @return the new extension instance\n+     */\n+    public static MongoDBExtension create() {\n+        return new MongoDBExtension(MongoDBTestService.DEFAULT_VERSION);\n+    }\n+\n+    /**\n+     * Create new extension instance using the given MongoDB service version.\n+     *\n+     * @return the new extension instance\n+     */\n+    public static MongoDBExtension create(String version) {\n+        return new MongoDBExtension(requireNonNull(version, \"version cannot be null\"));\n+    }\n+\n+    public MongoDBExtension() {\n+        this(MongoDBTestService.DEFAULT_VERSION);\n+    }\n+\n+    public MongoDBExtension(String version) {\n+        this.version = version;\n+    }\n+\n+    private MongoDBTestService constructInstance(ExtensionContext context, Lifecycle lifecycle) {\n+        if (context.getStore(NAMESPACE).get(Lifecycle.class) == null) {\n+            context.getStore(NAMESPACE).put(Lifecycle.class, lifecycle);\n+        }\n+        return (MongoDBTestService) context.getStore(NAMESPACE).getOrComputeIfAbsent(MongoDBTestService.class, c -> {\n+            LOG.debug(\"Starting a new MongoDB service instance with lifecycle {}\", lifecycle);\n+            return MongoDBTestService.create(version);\n+        });\n+    }\n+\n+    private void closeInstance(ExtensionContext context) throws Exception {\n+        context.getStore(NAMESPACE).remove(Lifecycle.class);\n+        getInstance(context).close();\n+    }\n+\n+    private void clearInstance(ExtensionContext context) throws Exception {\n+        getInstance(context).dropDatabase();\n+    }\n+\n+    private MongoDBTestService getInstance(ExtensionContext context) {\n+        return requireNonNull((MongoDBTestService) context.getStore(NAMESPACE).get(MongoDBTestService.class),\n+                \"MongoDBTestService hasn't been initialized yet\");\n+    }\n+\n+    @Override\n+    public void beforeAll(ExtensionContext context) {\n+        // When extension is used with @ExtendWith on a class or @RegisterExtension on a static field, we start a\n+        // single MongoDB instance for all tests in the test class\n+        constructInstance(context, Lifecycle.ALL_TESTS).start();\n+    }\n+\n+    @Override\n+    public void beforeEach(ExtensionContext context) {\n+        // If there isn't an instance already, the extension has been used with @RegisterExtension on a non-static\n+        // field (beforeAll doesn't get called in that case), so we want to start a new MongoDB instance for each test\n+        // in the test class\n+        constructInstance(context, Lifecycle.SINGLE_TEST).start();\n+    }\n+\n+    @Override\n+    public void afterAll(ExtensionContext context) throws Exception {\n+        closeInstance(context);\n+    }\n+\n+    @Override\n+    public void afterEach(ExtensionContext context) throws Exception {\n+        if (context.getStore(NAMESPACE).get(Lifecycle.class) == Lifecycle.SINGLE_TEST) {\n+            closeInstance(context);\n+        } else {\n+            clearInstance(context);\n+        }\n+    }\n+\n+    @Override\n+    public boolean supportsParameter(ParameterContext parameterContext, ExtensionContext context) throws ParameterResolutionException {\n+        return MongoDBTestService.class.equals(parameterContext.getParameter().getType());\n+    }\n+\n+    @Override\n+    public Object resolveParameter(ParameterContext parameterContext, ExtensionContext context) throws ParameterResolutionException {\n+        if (MongoDBTestService.class.equals(parameterContext.getParameter().getType())) {\n+            return getInstance(context);\n+        }\n+        throw new ParameterResolutionException(\"Unsupported parameter type: \" + parameterContext.getParameter().getName());\n+    }\n+\n+    @Override\n+    public void interceptTestMethod(Invocation<Void> invocation,\n+                                    ReflectiveInvocationContext<Method> invocationContext,\n+                                    ExtensionContext context) throws Throwable {\n+        processFixtures(invocationContext, context);\n+\n+        invocation.proceed();\n+    }\n+\n+    // Process MongoDBFixtures annotation on methods and classes\n+    private void processFixtures(ReflectiveInvocationContext<Method> invocationContext, ExtensionContext context) {\n+        ExtensionContext currentContext = context;\n+        Optional<MongoDBFixtures> fixtureAnnotation;\n+\n+        // Find fixture annotation on current element or parent elements\n+        do {\n+            fixtureAnnotation = findAnnotation(currentContext.getElement(), MongoDBFixtures.class);\n+\n+            if (!currentContext.getParent().isPresent()) {\n+                break;\n+            }\n+\n+            currentContext = currentContext.getParent().get();\n+        } while (!fixtureAnnotation.isPresent() && currentContext != context.getRoot());\n+\n+        if (fixtureAnnotation.isPresent()) {\n+            final MongoDBFixtures fixtureFiles = fixtureAnnotation.get();\n+            LOG.debug(\"Loading fixtures {} for {}#{}()\",\n+                    fixtureFiles.value(),\n+                    invocationContext.getTargetClass().getCanonicalName(),\n+                    invocationContext.getExecutable().getName());\n+            final MongoDBFixtureImporter fixtureImporter = new MongoDBFixtureImporter(fixtureFiles.value(), invocationContext.getTargetClass());\n+\n+            fixtureImporter.importResources(getInstance(context).mongoConnection().getMongoDatabase());\n+        }\n+    }", "originalCommit": "0a8625c7e743bb082d96460bf6c297efc04376f6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgwMzA1OQ==", "url": "https://github.com/Graylog2/graylog2-server/pull/8440#discussion_r452803059", "body": "I think it makes sense to give all tests meaningful names. I would call this one `importsCollectionFromFixture` or something similar.", "bodyText": "I think it makes sense to give all tests meaningful names. I would call this one importsCollectionFromFixture or something similar.", "bodyHTML": "<p dir=\"auto\">I think it makes sense to give all tests meaningful names. I would call this one <code>importsCollectionFromFixture</code> or something similar.</p>", "author": "alex-konn", "createdAt": "2020-07-10T12:09:03Z", "path": "graylog2-server/src/test/java/org/graylog/testing/mongodb/MongoDBExtensionTest.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog.testing.mongodb;\n+\n+import com.mongodb.client.MongoCollection;\n+import org.bson.Document;\n+import org.bson.conversions.Bson;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Nested;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import static com.mongodb.client.model.Filters.eq;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+class MongoDBExtensionTest {\n+    @Nested\n+    class ProgrammaticInstanceRegistration {\n+        @SuppressWarnings(\"unused\")\n+        @RegisterExtension\n+        MongoDBExtension mongodbExtension = MongoDBExtension.create();\n+\n+        @Test\n+        @MongoDBFixtures(\"MongoDBExtensionTest-1.json\")\n+        void test(MongoDBTestService mongodb) {", "originalCommit": "0a8625c7e743bb082d96460bf6c297efc04376f6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDE3NDE0NA==", "url": "https://github.com/Graylog2/graylog2-server/pull/8440#discussion_r454174144", "bodyText": "\ud83d\udc4d", "author": "bernd", "createdAt": "2020-07-14T07:57:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgwMzA1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgxMTU2Nw==", "url": "https://github.com/Graylog2/graylog2-server/pull/8440#discussion_r452811567", "body": "I think the test could be improved by moving the tests asserting that the same instance id is used to a nested class. Running tests in order is only relevant for them so `@TestMethodOrder` would only be needed on the nested class and we could also get rid of the `Order` annotation on the last two tests.\r\nThe static field for `instanceIds` would still have to go in the outer class, which is a bit ugly, but a trade off, I'd be fine with.", "bodyText": "I think the test could be improved by moving the tests asserting that the same instance id is used to a nested class. Running tests in order is only relevant for them so @TestMethodOrder would only be needed on the nested class and we could also get rid of the Order annotation on the last two tests.\nThe static field for instanceIds would still have to go in the outer class, which is a bit ugly, but a trade off, I'd be fine with.", "bodyHTML": "<p dir=\"auto\">I think the test could be improved by moving the tests asserting that the same instance id is used to a nested class. Running tests in order is only relevant for them so <code>@TestMethodOrder</code> would only be needed on the nested class and we could also get rid of the <code>Order</code> annotation on the last two tests.<br>\nThe static field for <code>instanceIds</code> would still have to go in the outer class, which is a bit ugly, but a trade off, I'd be fine with.</p>", "author": "alex-konn", "createdAt": "2020-07-10T12:28:06Z", "path": "graylog2-server/src/test/java/org/graylog/testing/mongodb/MongoDBExtensionWithRegistrationAsStaticFieldTest.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog.testing.mongodb;\n+\n+import com.mongodb.client.MongoDatabase;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.MethodOrderer.OrderAnnotation;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import static com.mongodb.client.model.Filters.eq;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+/**\n+ * Testing programmatic extension registration with static fields has been moved to this separate file because\n+ * we cannot use static fields on nested classes in {@link MongoDBExtensionTest}.\n+ */\n+// Required to make the instance ID check work\n+@TestMethodOrder(OrderAnnotation.class)", "originalCommit": "0a8625c7e743bb082d96460bf6c297efc04376f6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDE4NzM5Mg==", "url": "https://github.com/Graylog2/graylog2-server/pull/8440#discussion_r454187392", "bodyText": "\ud83d\udc4d", "author": "bernd", "createdAt": "2020-07-14T08:21:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgxMTU2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgxMjQ0OQ==", "url": "https://github.com/Graylog2/graylog2-server/pull/8440#discussion_r452812449", "body": "Wouldn't it be enough to already assert here that the injected instance's id is equal to the one injected in the test before?", "bodyText": "Wouldn't it be enough to already assert here that the injected instance's id is equal to the one injected in the test before?", "bodyHTML": "<p dir=\"auto\">Wouldn't it be enough to already assert here that the injected instance's id is equal to the one injected in the test before?</p>", "author": "alex-konn", "createdAt": "2020-07-10T12:30:06Z", "path": "graylog2-server/src/test/java/org/graylog/testing/mongodb/MongoDBExtensionWithRegistrationAsStaticFieldTest.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog.testing.mongodb;\n+\n+import com.mongodb.client.MongoDatabase;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.MethodOrderer.OrderAnnotation;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import static com.mongodb.client.model.Filters.eq;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+/**\n+ * Testing programmatic extension registration with static fields has been moved to this separate file because\n+ * we cannot use static fields on nested classes in {@link MongoDBExtensionTest}.\n+ */\n+// Required to make the instance ID check work\n+@TestMethodOrder(OrderAnnotation.class)\n+class MongoDBExtensionWithRegistrationAsStaticFieldTest {\n+    @SuppressWarnings(\"unused\")\n+    @RegisterExtension\n+    static MongoDBExtension mongodbExtension = MongoDBExtension.create();\n+\n+    // We use this static set to verify that registering the MongoDBExtension as a static field will reuse the\n+    // same database instance for all tests.\n+    static Set<String> instanceIds = new HashSet<>();\n+\n+    @BeforeAll\n+    static void setUp() {\n+        instanceIds.clear();\n+    }\n+\n+    @AfterAll\n+    static void tearDown() {\n+        instanceIds.clear();\n+    }\n+\n+    @Test\n+    @Order(1)\n+    void registerInstanceId1(MongoDBTestService mongodb) {\n+        // Just add the MongoDB instance ID so we can check them in checkInstanceIds()\n+        instanceIds.add(mongodb.instanceId());\n+    }\n+\n+    @Test\n+    @Order(2)\n+    void registerInstanceId2(MongoDBTestService mongodb) {\n+        // Just add the MongoDB instance ID so we can check them in checkInstanceIds()\n+        instanceIds.add(mongodb.instanceId());", "originalCommit": "0a8625c7e743bb082d96460bf6c297efc04376f6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDE4NzQ0NQ==", "url": "https://github.com/Graylog2/graylog2-server/pull/8440#discussion_r454187445", "bodyText": "\ud83d\udc4d", "author": "bernd", "createdAt": "2020-07-14T08:21:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgxMjQ0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgxNjY1NA==", "url": "https://github.com/Graylog2/graylog2-server/pull/8440#discussion_r452816654", "body": "From my point of view, we can also get rid of the unused `createForEachTest` method. ", "bodyText": "From my point of view, we can also get rid of the unused createForEachTest method.", "bodyHTML": "<p dir=\"auto\">From my point of view, we can also get rid of the unused <code>createForEachTest</code> method.</p>", "author": "alex-konn", "createdAt": "2020-07-10T12:38:52Z", "path": "graylog2-server/src/test/java/org/graylog/testing/mongodb/MongoDBInstance.java", "diffHunk": "@@ -49,27 +41,19 @@\n  */\n public class MongoDBInstance extends ExternalResource implements AutoCloseable {", "originalCommit": "0a8625c7e743bb082d96460bf6c297efc04376f6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDE3NTIzMg==", "url": "https://github.com/Graylog2/graylog2-server/pull/8440#discussion_r454175232", "bodyText": "\ud83d\udc4d", "author": "bernd", "createdAt": "2020-07-14T07:59:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgxNjY1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgxNzg2OQ==", "url": "https://github.com/Graylog2/graylog2-server/pull/8440#discussion_r452817869", "body": "Does it? ;)", "bodyText": "Does it? ;)", "bodyHTML": "<p dir=\"auto\">Does it? ;)</p>", "author": "alex-konn", "createdAt": "2020-07-10T12:41:25Z", "path": "graylog2-server/src/test/java/org/graylog/testing/mongodb/MongoDBTestService.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog.testing.mongodb;\n+\n+import org.graylog2.configuration.MongoDbConfiguration;\n+import org.graylog2.database.MongoConnection;\n+import org.graylog2.database.MongoConnectionImpl;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.testcontainers.containers.Network;\n+\n+import java.util.Locale;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * Provides a MongoDB database service for tests.\n+ */\n+public class MongoDBTestService implements AutoCloseable {\n+    private static final Logger LOG = LoggerFactory.getLogger(MongoDBTestService.class);\n+\n+    private static final String DEFAULT_DATABASE_NAME = \"graylog\";\n+    public static final String DEFAULT_VERSION = MongoDBContainer.DEFAULT_VERSION;\n+\n+    private final MongoDBContainer container;\n+    private MongoConnectionImpl mongoConnection;\n+\n+    public static String defaultVersion() {\n+        return MongoDBContainer.DEFAULT_VERSION;\n+    }\n+\n+    /**\n+     * Create service instance with default settings.\n+     *\n+     * @return the service instance\n+     */\n+    public static MongoDBTestService create() {\n+        return new MongoDBTestService(MongoDBContainer.create());\n+    }\n+\n+    /**\n+     * Create service instance with the given version.\n+     *\n+     * @return the service instance\n+     */\n+    public static MongoDBTestService create(String version) {\n+        return new MongoDBTestService(MongoDBContainer.create(version));\n+    }\n+\n+    /**\n+     * Create service instance with the given network.\n+     *\n+     * @return the service instance\n+     */\n+    public static MongoDBTestService create(Network network) {\n+        return new MongoDBTestService(MongoDBContainer.create(network));\n+    }\n+\n+    /**\n+     * Create service instance with the given version and network.\n+     *\n+     * @return the service instance\n+     */\n+    public static MongoDBTestService create(String version, Network network) {\n+        return new MongoDBTestService(MongoDBContainer.create(version, network));\n+    }\n+\n+    private MongoDBTestService(MongoDBContainer container) {\n+        this.container = requireNonNull(container, \"container cannot be null\");\n+    }\n+\n+    /**\n+     * Starts the service and establishes a client connection. Will do nothing if service is already running.\n+     */\n+    public void start() {\n+        if (container.isRunning()) {\n+            return;\n+        }\n+\n+        LOG.debug(\"Attempting to start container for image: {}\", container.getDockerImageName());\n+\n+        container.start();\n+        LOG.debug(\"Started container: {}\", container.infoString());\n+\n+        final MongoDbConfiguration mongoConfiguration = new MongoDbConfiguration();\n+        mongoConfiguration.setUri(uri());\n+\n+        this.mongoConnection = new MongoConnectionImpl(mongoConfiguration);\n+        this.mongoConnection.connect();\n+        this.mongoConnection.getMongoDatabase().drop();\n+    }\n+\n+    /**\n+     * Close (shutdown) the service.\n+     *\n+     * @throws Exception when closing the service fails", "originalCommit": "0a8625c7e743bb082d96460bf6c297efc04376f6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDE3NTUwMQ==", "url": "https://github.com/Graylog2/graylog2-server/pull/8440#discussion_r454175501", "bodyText": "\ud83d\udc4d", "author": "bernd", "createdAt": "2020-07-14T08:00:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgxNzg2OQ=="}], "type": "inlineReview"}, {"oid": "35ad45d4a14ef47c46659094576bb8db3c274d36", "url": "https://github.com/Graylog2/graylog2-server/commit/35ad45d4a14ef47c46659094576bb8db3c274d36", "message": "Merge branch 'master' into mongodb-junit-extension", "committedDate": "2020-07-14T07:10:33Z", "type": "commit"}, {"oid": "9bb7a27fa1044d4bd50c3c10dd704bcb5957ff32", "url": "https://github.com/Graylog2/graylog2-server/commit/9bb7a27fa1044d4bd50c3c10dd704bcb5957ff32", "message": "Add MongoDBTestService#mongoCollection(String) method", "committedDate": "2020-07-14T07:17:50Z", "type": "commit"}, {"oid": "6ff957b486bebfab257d0dd1d63c99d8ee5b0b31", "url": "https://github.com/Graylog2/graylog2-server/commit/6ff957b486bebfab257d0dd1d63c99d8ee5b0b31", "message": "Remove unused constructor in MongoDBExtension", "committedDate": "2020-07-14T07:19:03Z", "type": "commit"}, {"oid": "75f96211c8c10c41b2f3f2bb5563b54ec8af569c", "url": "https://github.com/Graylog2/graylog2-server/commit/75f96211c8c10c41b2f3f2bb5563b54ec8af569c", "message": "Rename #create() to #createWithDefaultVersion() in MongoDBExtension", "committedDate": "2020-07-14T07:35:01Z", "type": "commit"}, {"oid": "71805efd83f4d5a2dd6a26cb00dc556b6c0a21cb", "url": "https://github.com/Graylog2/graylog2-server/commit/71805efd83f4d5a2dd6a26cb00dc556b6c0a21cb", "message": "Remove unused static method MongoDBTestService#defaultVersion()", "committedDate": "2020-07-14T07:35:25Z", "type": "commit"}, {"oid": "ef33e0955f49beb673139f2cc54b94976739ac44", "url": "https://github.com/Graylog2/graylog2-server/commit/ef33e0955f49beb673139f2cc54b94976739ac44", "message": "Revert \"Remove unused constructor in MongoDBExtension\"\n\nThis reverts commit 6ff957b486bebfab257d0dd1d63c99d8ee5b0b31.", "committedDate": "2020-07-14T07:39:49Z", "type": "commit"}, {"oid": "283f464b9f25b63600ba5a18857aece122dd78e1", "url": "https://github.com/Graylog2/graylog2-server/commit/283f464b9f25b63600ba5a18857aece122dd78e1", "message": "Add note that no-args constructor is needed by the JUnit 5 extension", "committedDate": "2020-07-14T07:46:39Z", "type": "commit"}, {"oid": "8eb5e789ea750f8e9aa8569e5ecaa6daeb0e6443", "url": "https://github.com/Graylog2/graylog2-server/commit/8eb5e789ea750f8e9aa8569e5ecaa6daeb0e6443", "message": "Remove unused \"throws Exception\"", "committedDate": "2020-07-14T07:47:29Z", "type": "commit"}, {"oid": "1b528a42efa1d16e96367340ab7de1bf4618ef0a", "url": "https://github.com/Graylog2/graylog2-server/commit/1b528a42efa1d16e96367340ab7de1bf4618ef0a", "message": "Add MongoDBTestService#mongoDatabase()", "committedDate": "2020-07-14T07:49:14Z", "type": "commit"}, {"oid": "646a068409860b85292b5030ab680d1c5b528bf1", "url": "https://github.com/Graylog2/graylog2-server/commit/646a068409860b85292b5030ab680d1c5b528bf1", "message": "Clear up assertions where we expect no collections at all", "committedDate": "2020-07-14T07:52:42Z", "type": "commit"}, {"oid": "e7f1e1d01b34b7801ad8ec9e910ffd306c17d72b", "url": "https://github.com/Graylog2/graylog2-server/commit/e7f1e1d01b34b7801ad8ec9e910ffd306c17d72b", "message": "Fix test name in MongoDBExtensionTest", "committedDate": "2020-07-14T07:57:20Z", "type": "commit"}, {"oid": "bb8e0a6ca11576c6b624c3327d318401c26c4251", "url": "https://github.com/Graylog2/graylog2-server/commit/bb8e0a6ca11576c6b624c3327d318401c26c4251", "message": "Remove unused MongoDBInstance#createForEachTest() method", "committedDate": "2020-07-14T07:58:54Z", "type": "commit"}, {"oid": "32e6074d85437f5f998857be634327c9a8fbad0b", "url": "https://github.com/Graylog2/graylog2-server/commit/32e6074d85437f5f998857be634327c9a8fbad0b", "message": "Refactor MongoDBExtension#processFixtures\r\n\r\nExtract some private methods to make the method more readable.\n\nCo-authored-by: Alex Konn <alexander@graylog.com>", "committedDate": "2020-07-14T08:01:56Z", "type": "commit"}, {"oid": "50f5bcee3a5341ac68f09ec18b38369c74e8c3d4", "url": "https://github.com/Graylog2/graylog2-server/commit/50f5bcee3a5341ac68f09ec18b38369c74e8c3d4", "message": "Merge branch 'mongodb-junit-extension' of github.com:Graylog2/graylog2-server into mongodb-junit-extension", "committedDate": "2020-07-14T08:06:33Z", "type": "commit"}, {"oid": "c18ad8b7bd34f2c1e85140472073d57670c4e529", "url": "https://github.com/Graylog2/graylog2-server/commit/c18ad8b7bd34f2c1e85140472073d57670c4e529", "message": "Remove unused \"throws Exception\" from MongoDBExtension", "committedDate": "2020-07-14T08:07:02Z", "type": "commit"}, {"oid": "668014da4894389dc26345f5e62a09a056e23d0f", "url": "https://github.com/Graylog2/graylog2-server/commit/668014da4894389dc26345f5e62a09a056e23d0f", "message": "Remove generic javadoc comment", "committedDate": "2020-07-14T08:08:42Z", "type": "commit"}, {"oid": "3e4bab1ac7e896bd1a6ddbcb177895a791011a5f", "url": "https://github.com/Graylog2/graylog2-server/commit/3e4bab1ac7e896bd1a6ddbcb177895a791011a5f", "message": "Move same instance check into nested test class", "committedDate": "2020-07-14T08:12:56Z", "type": "commit"}, {"oid": "70b64bf9cfea55f131812e20557ab803efcc6815", "url": "https://github.com/Graylog2/graylog2-server/commit/70b64bf9cfea55f131812e20557ab803efcc6815", "message": "Simplify same instance ID check", "committedDate": "2020-07-14T08:21:24Z", "type": "commit"}]}