{"pr_number": 7855, "pr_title": "String Interpolation for Pipeline Rules", "pr_author": "rmanibus", "pr_createdAt": "2020-04-09T05:58:11Z", "pr_url": "https://github.com/Graylog2/graylog2-server/pull/7855", "timeline": [{"oid": "c3818053f18e8da9ec4d93ed6793fc6a2be328ea", "url": "https://github.com/Graylog2/graylog2-server/commit/c3818053f18e8da9ec4d93ed6793fc6a2be328ea", "message": "create LiteralExpression", "committedDate": "2020-04-09T10:32:27Z", "type": "commit"}, {"oid": "2d6f3d5e1738810c8a7f45a4412ac5659966d090", "url": "https://github.com/Graylog2/graylog2-server/commit/2d6f3d5e1738810c8a7f45a4412ac5659966d090", "message": "handle string in AdditionExpression", "committedDate": "2020-04-09T10:32:27Z", "type": "commit"}, {"oid": "ee574ce42e98e27c497e5e6569ea8088624426af", "url": "https://github.com/Graylog2/graylog2-server/commit/ee574ce42e98e27c497e5e6569ea8088624426af", "message": "exitAddition already ensure that left & right type are the same", "committedDate": "2020-04-09T10:32:27Z", "type": "commit"}, {"oid": "28bb0a5e0714b83c8fe2d506e3be0e369f6a11f1", "url": "https://github.com/Graylog2/graylog2-server/commit/28bb0a5e0714b83c8fe2d506e3be0e369f6a11f1", "message": "add unit test", "committedDate": "2020-04-09T10:32:27Z", "type": "commit"}, {"oid": "52ada60cb79690bebd775098d91f19c466cc8e3a", "url": "https://github.com/Graylog2/graylog2-server/commit/52ada60cb79690bebd775098d91f19c466cc8e3a", "message": "add third member to expression to be sure", "committedDate": "2020-04-09T10:32:27Z", "type": "commit"}, {"oid": "52ada60cb79690bebd775098d91f19c466cc8e3a", "url": "https://github.com/Graylog2/graylog2-server/commit/52ada60cb79690bebd775098d91f19c466cc8e3a", "message": "add third member to expression to be sure", "committedDate": "2020-04-09T10:32:27Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQwNjMyMA==", "url": "https://github.com/Graylog2/graylog2-server/pull/7855#discussion_r409406320", "body": "Please format whitespace here according to the rest of the file (space before and after keywords, between `)` and `{` and no inner space in `()` expressions.", "bodyText": "Please format whitespace here according to the rest of the file (space before and after keywords, between ) and { and no inner space in () expressions.", "bodyHTML": "<p dir=\"auto\">Please format whitespace here according to the rest of the file (space before and after keywords, between <code>)</code> and <code>{</code> and no inner space in <code>()</code> expressions.</p>", "author": "kroepke", "createdAt": "2020-04-16T09:16:29Z", "path": "graylog2-server/src/main/java/org/graylog/plugins/pipelineprocessor/ast/expressions/AdditionExpression.java", "diffHunk": "@@ -92,6 +91,13 @@ public Object evaluateUnsafe(EvaluationContext context) {\n             } else {\n                 return new Duration(right, left);\n             }\n+        }else if(String.class.equals(type) ){", "originalCommit": "52ada60cb79690bebd775098d91f19c466cc8e3a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQwODE2Mg==", "url": "https://github.com/Graylog2/graylog2-server/pull/7855#discussion_r409408162", "body": "Both this and the next line warn about `Casting 'leftValue' to 'String' may produce 'ClassCastException'`.\r\nWhile technically the code cannot throw that exception (`leftValue` is a string because we checked and `rightValue` has to be a string, too, because of the parser/typechecker checks, we try to avoid warnings in code when possible.\r\n\r\nMy suggestion would be to rewrite this as `String.valueOf(leftValue)` to be future proof.", "bodyText": "Both this and the next line warn about Casting 'leftValue' to 'String' may produce 'ClassCastException'.\nWhile technically the code cannot throw that exception (leftValue is a string because we checked and rightValue has to be a string, too, because of the parser/typechecker checks, we try to avoid warnings in code when possible.\nMy suggestion would be to rewrite this as String.valueOf(leftValue) to be future proof.", "bodyHTML": "<p dir=\"auto\">Both this and the next line warn about <code>Casting 'leftValue' to 'String' may produce 'ClassCastException'</code>.<br>\nWhile technically the code cannot throw that exception (<code>leftValue</code> is a string because we checked and <code>rightValue</code> has to be a string, too, because of the parser/typechecker checks, we try to avoid warnings in code when possible.</p>\n<p dir=\"auto\">My suggestion would be to rewrite this as <code>String.valueOf(leftValue)</code> to be future proof.</p>", "author": "kroepke", "createdAt": "2020-04-16T09:19:15Z", "path": "graylog2-server/src/main/java/org/graylog/plugins/pipelineprocessor/ast/expressions/AdditionExpression.java", "diffHunk": "@@ -92,6 +91,13 @@ public Object evaluateUnsafe(EvaluationContext context) {\n             } else {\n                 return new Duration(right, left);\n             }\n+        }else if(String.class.equals(type) ){\n+            if(!isPlus){\n+                return null;\n+            }\n+            final String left = (String) leftValue;", "originalCommit": "52ada60cb79690bebd775098d91f19c466cc8e3a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQwODIzNg==", "url": "https://github.com/Graylog2/graylog2-server/pull/7855#discussion_r409408236", "body": "same as above", "bodyText": "same as above", "bodyHTML": "<p dir=\"auto\">same as above</p>", "author": "kroepke", "createdAt": "2020-04-16T09:19:24Z", "path": "graylog2-server/src/main/java/org/graylog/plugins/pipelineprocessor/ast/expressions/AdditionExpression.java", "diffHunk": "@@ -92,6 +91,13 @@ public Object evaluateUnsafe(EvaluationContext context) {\n             } else {\n                 return new Duration(right, left);\n             }\n+        }else if(String.class.equals(type) ){\n+            if(!isPlus){\n+                return null;\n+            }\n+            final String left = (String) leftValue;\n+            final String right = (String) rightValue;", "originalCommit": "52ada60cb79690bebd775098d91f19c466cc8e3a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQwODY1OA==", "url": "https://github.com/Graylog2/graylog2-server/pull/7855#discussion_r409408658", "body": "Please change the name to `stringConcat` to look the same as the other tests.\r\nThat also requires the file `string_concat.txt` to be `stringConcat.txt` below.", "bodyText": "Please change the name to stringConcat to look the same as the other tests.\nThat also requires the file string_concat.txt to be stringConcat.txt below.", "bodyHTML": "<p dir=\"auto\">Please change the name to <code>stringConcat</code> to look the same as the other tests.<br>\nThat also requires the file <code>string_concat.txt</code> to be <code>stringConcat.txt</code> below.</p>", "author": "kroepke", "createdAt": "2020-04-16T09:20:01Z", "path": "graylog2-server/src/test/java/org/graylog/plugins/pipelineprocessor/functions/FunctionsSnippetsTest.java", "diffHunk": "@@ -362,6 +362,15 @@ public static void registerFunctions() {\n         functionRegistry = new FunctionRegistry(functions);\n     }\n \n+    @Test\n+    public void string_concat(){", "originalCommit": "52ada60cb79690bebd775098d91f19c466cc8e3a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQxMTkwMQ==", "url": "https://github.com/Graylog2/graylog2-server/pull/7855#discussion_r409411901", "body": "That is the correct return value, but I think the type checker should raise an error to the user when it sees this.\r\n\r\nThe corresponding code is at https://github.com/Graylog2/graylog2-server/blob/eb392d9180e552723a1b9805c6a06f270a16a18d/graylog2-server/src/main/java/org/graylog/plugins/pipelineprocessor/parser/PipelineRuleParser.java#L777-L780\r\n\r\nIn that if/else I think it should have a check for `leftType`/`rightType` being `String`, and then in an extra if check for `!isPlus()` which then raises a properly described `InvalidOperation` error. That way the user doesn't get surprised at runtime.", "bodyText": "That is the correct return value, but I think the type checker should raise an error to the user when it sees this.\nThe corresponding code is at \n  \n    \n      graylog2-server/graylog2-server/src/main/java/org/graylog/plugins/pipelineprocessor/parser/PipelineRuleParser.java\n    \n    \n        Lines 777 to 780\n      in\n      eb392d9\n    \n    \n    \n    \n\n        \n          \n           if (leftDate && rightDate) { \n        \n\n        \n          \n               if (addExpression.isPlus()) { \n        \n\n        \n          \n                   parseContext.addError(new InvalidOperation(ctx, addExpression, \"Unable to add two dates\")); \n        \n\n        \n          \n               } \n        \n    \n  \n\n\nIn that if/else I think it should have a check for leftType/rightType being String, and then in an extra if check for !isPlus() which then raises a properly described InvalidOperation error. That way the user doesn't get surprised at runtime.", "bodyHTML": "<p dir=\"auto\">That is the correct return value, but I think the type checker should raise an error to the user when it sees this.</p>\n<p dir=\"auto\">The corresponding code is at <div class=\"border rounded-1 my-2\">\n  <div class=\"f6 px-3 py-2 lh-condensed border-bottom color-bg-subtle\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/Graylog2/graylog2-server/blob/eb392d9180e552723a1b9805c6a06f270a16a18d/graylog2-server/src/main/java/org/graylog/plugins/pipelineprocessor/parser/PipelineRuleParser.java#L777-L780\">graylog2-server/graylog2-server/src/main/java/org/graylog/plugins/pipelineprocessor/parser/PipelineRuleParser.java</a>\n    </p>\n    <p class=\"mb-0 color-fg-muted\">\n        Lines 777 to 780\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha\" href=\"/Graylog2/graylog2-server/commit/eb392d9180e552723a1b9805c6a06f270a16a18d\">eb392d9</a>\n    </p>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\" data-paste-markdown-skip=\"\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L777\" class=\"blob-num border-0 px-3 py-0 color-bg-default js-line-number\" data-line-number=\"777\"></td>\n          <td id=\"LC777\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\"> <span class=\"pl-k\">if</span> (leftDate <span class=\"pl-k\">&amp;&amp;</span> rightDate) { </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L778\" class=\"blob-num border-0 px-3 py-0 color-bg-default js-line-number\" data-line-number=\"778\"></td>\n          <td id=\"LC778\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">     <span class=\"pl-k\">if</span> (addExpression<span class=\"pl-k\">.</span>isPlus()) { </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L779\" class=\"blob-num border-0 px-3 py-0 color-bg-default js-line-number\" data-line-number=\"779\"></td>\n          <td id=\"LC779\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">         parseContext<span class=\"pl-k\">.</span>addError(<span class=\"pl-k\">new</span> <span class=\"pl-smi\">InvalidOperation</span>(ctx, addExpression, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Unable to add two dates<span class=\"pl-pds\">\"</span></span>)); </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L780\" class=\"blob-num border-0 px-3 py-0 color-bg-default js-line-number\" data-line-number=\"780\"></td>\n          <td id=\"LC780\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">     } </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n</p>\n<p dir=\"auto\">In that if/else I think it should have a check for <code>leftType</code>/<code>rightType</code> being <code>String</code>, and then in an extra if check for <code>!isPlus()</code> which then raises a properly described <code>InvalidOperation</code> error. That way the user doesn't get surprised at runtime.</p>", "author": "kroepke", "createdAt": "2020-04-16T09:25:06Z", "path": "graylog2-server/src/main/java/org/graylog/plugins/pipelineprocessor/ast/expressions/AdditionExpression.java", "diffHunk": "@@ -92,6 +91,13 @@ public Object evaluateUnsafe(EvaluationContext context) {\n             } else {\n                 return new Duration(right, left);\n             }\n+        }else if(String.class.equals(type) ){\n+            if(!isPlus){\n+                return null;", "originalCommit": "52ada60cb79690bebd775098d91f19c466cc8e3a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ3ODc3Ng==", "url": "https://github.com/Graylog2/graylog2-server/pull/7855#discussion_r410478776", "bodyText": "Thanks I missed that, I think It's ok now !", "author": "rmanibus", "createdAt": "2020-04-17T21:28:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQxMTkwMQ=="}], "type": "inlineReview"}, {"oid": "2da79f8541feb14c74d712a66ce8fb77da1a45da", "url": "https://github.com/Graylog2/graylog2-server/commit/2da79f8541feb14c74d712a66ce8fb77da1a45da", "message": "handle string concatenation in type checker", "committedDate": "2020-04-17T21:23:50Z", "type": "commit"}]}