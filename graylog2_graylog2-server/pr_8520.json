{"pr_number": 8520, "pr_title": "Add new endpoint to retrive a paginated list of users", "pr_author": "kmerz", "pr_createdAt": "2020-07-09T13:51:49Z", "pr_url": "https://github.com/Graylog2/graylog2-server/pull/8520", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjYxNzM0OA==", "url": "https://github.com/Graylog2/graylog2-server/pull/8520#discussion_r452617348", "body": "I am getting an error when fetching the list of users on my machine because the field is `external_user` and not `external`.", "bodyText": "I am getting an error when fetching the list of users on my machine because the field is external_user and not external.", "bodyHTML": "<p dir=\"auto\">I am getting an error when fetching the list of users on my machine because the field is <code>external_user</code> and not <code>external</code>.</p>", "author": "bernd", "createdAt": "2020-07-10T04:35:46Z", "path": "graylog2-server/src/main/java/org/graylog2/users/UserDTO.java", "diffHunk": "@@ -0,0 +1,200 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog2.users;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+import com.google.auto.value.AutoValue;\n+import org.graylog2.rest.models.users.requests.Startpage;\n+import org.graylog2.security.MongoDbSession;\n+import org.joda.time.DateTimeZone;\n+import org.mongojack.Id;\n+import org.mongojack.ObjectId;\n+\n+import javax.annotation.Nullable;\n+import java.util.Date;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+@AutoValue\n+@JsonDeserialize(builder = UserDTO.Builder.class)\n+public abstract class UserDTO {\n+\n+    private static final String FIELD_ID = \"id\";\n+    public static final String FIELD_USERNAME = \"username\";\n+    public static final String FIELD_EMAIL = \"email\";\n+    public static final String FIELD_FULL_NAME = \"full_name\";\n+    private static final String FIELD_PERMISSIONS = \"permissions\";\n+    private static final String FIELD_PREFERENCES = \"preferences\";\n+    private static final String FIELD_TIMEZONE = \"timezone\";\n+    private static final String FIELD_EXTERNAL = \"external\";", "originalCommit": "f802e82a789856ea59fe22a365e776b9c36d6034", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "aa45871595f7c8333ff73e8e26c200e1a4826970", "changed_code": [{"header": "diff --git a/graylog2-server/src/main/java/org/graylog2/users/UserDTO.java b/graylog2-server/src/main/java/org/graylog2/users/UserOverviewDTO.java\nsimilarity index 64%\nrename from graylog2-server/src/main/java/org/graylog2/users/UserDTO.java\nrename to graylog2-server/src/main/java/org/graylog2/users/UserOverviewDTO.java\nindex 1cdc418055..fd565c68d1 100644\n--- a/graylog2-server/src/main/java/org/graylog2/users/UserDTO.java\n+++ b/graylog2-server/src/main/java/org/graylog2/users/UserOverviewDTO.java\n", "chunk": "@@ -18,41 +18,33 @@ package org.graylog2.users;\n \n import com.fasterxml.jackson.annotation.JsonCreator;\n import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n import com.fasterxml.jackson.annotation.JsonProperty;\n import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n import com.google.auto.value.AutoValue;\n-import org.graylog2.rest.models.users.requests.Startpage;\n import org.graylog2.security.MongoDbSession;\n-import org.joda.time.DateTimeZone;\n import org.mongojack.Id;\n import org.mongojack.ObjectId;\n \n import javax.annotation.Nullable;\n import java.util.Date;\n-import java.util.Map;\n import java.util.Optional;\n import java.util.Set;\n \n @AutoValue\n-@JsonDeserialize(builder = UserDTO.Builder.class)\n-public abstract class UserDTO {\n+@JsonDeserialize(builder = UserOverviewDTO.Builder.class)\n+public abstract class UserOverviewDTO {\n \n     private static final String FIELD_ID = \"id\";\n     public static final String FIELD_USERNAME = \"username\";\n     public static final String FIELD_EMAIL = \"email\";\n     public static final String FIELD_FULL_NAME = \"full_name\";\n-    private static final String FIELD_PERMISSIONS = \"permissions\";\n-    private static final String FIELD_PREFERENCES = \"preferences\";\n-    private static final String FIELD_TIMEZONE = \"timezone\";\n-    private static final String FIELD_EXTERNAL = \"external\";\n-    private static final String FIELD_SESSION_TIMEOUT_MS = \"session_timeout_ms\";\n-    private static final String FIELD_STARTPAGE = \"startpage\";\n+    private static final String FIELD_EXTERNAL_USER = \"external_user\";\n     private static final String FIELD_ROLES = \"roles\";\n     private static final String FIELD_READ_ONLY = \"read_only\";\n     private static final String FIELD_SESSION_ACTIVE = \"session_active\";\n     private static final String FIELD_LAST_ACTIVITY = \"last_activity\";\n     private static final String FIELD_CLIENT_ADDRESS = \"client_address\";\n-    private static final String FIELD_PASSWORD = \"password\";\n \n     @Id\n     @ObjectId\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjYxNzc1Nw==", "url": "https://github.com/Graylog2/graylog2-server/pull/8520#discussion_r452617757", "body": "I am getting the following on my setup because I am running with `deactivated_builtin_authentication_providers = root-user` in my `graylog.conf`. The default admin user can be deactivated so we need to handle that in the paginated endpoint.\r\n\r\n```\r\n$ http :9000/api/users/paginated\r\nHTTP/1.1 404 Not Found\r\nContent-Length: 57\r\nContent-Type: application/json\r\nX-Graylog-Node-ID: 28164cbe-4ad9-4c9c-a76e-088655aa7889\r\nX-Runtime-Microseconds: 85318\r\n\r\n{\r\n    \"message\": \"Could not find admin user\",\r\n    \"type\": \"ApiError\"\r\n}\r\n```", "bodyText": "I am getting the following on my setup because I am running with deactivated_builtin_authentication_providers = root-user in my graylog.conf. The default admin user can be deactivated so we need to handle that in the paginated endpoint.\n$ http :9000/api/users/paginated\nHTTP/1.1 404 Not Found\nContent-Length: 57\nContent-Type: application/json\nX-Graylog-Node-ID: 28164cbe-4ad9-4c9c-a76e-088655aa7889\nX-Runtime-Microseconds: 85318\n\n{\n    \"message\": \"Could not find admin user\",\n    \"type\": \"ApiError\"\n}", "bodyHTML": "<p dir=\"auto\">I am getting the following on my setup because I am running with <code>deactivated_builtin_authentication_providers = root-user</code> in my <code>graylog.conf</code>. The default admin user can be deactivated so we need to handle that in the paginated endpoint.</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"$ http :9000/api/users/paginated\nHTTP/1.1 404 Not Found\nContent-Length: 57\nContent-Type: application/json\nX-Graylog-Node-ID: 28164cbe-4ad9-4c9c-a76e-088655aa7889\nX-Runtime-Microseconds: 85318\n\n{\n    &quot;message&quot;: &quot;Could not find admin user&quot;,\n    &quot;type&quot;: &quot;ApiError&quot;\n}\"><pre><code>$ http :9000/api/users/paginated\nHTTP/1.1 404 Not Found\nContent-Length: 57\nContent-Type: application/json\nX-Graylog-Node-ID: 28164cbe-4ad9-4c9c-a76e-088655aa7889\nX-Runtime-Microseconds: 85318\n\n{\n    \"message\": \"Could not find admin user\",\n    \"type\": \"ApiError\"\n}\n</code></pre></div>", "author": "bernd", "createdAt": "2020-07-10T04:37:37Z", "path": "graylog2-server/src/main/java/org/graylog2/rest/resources/users/UsersResource.java", "diffHunk": "@@ -556,4 +645,37 @@ private UserSummary toUserResponse(User user,\n         effectivePermissions.removeAll(userService.getUserPermissionsFromRoles(user));\n         return effectivePermissions;\n     }\n+\n+    private Map<String, Optional<MongoDbSession>> getLastSessionForUser(Collection<MongoDbSession> sessions) {\n+        return sessions.stream()\n+                .filter(s -> s.getUsernameAttribute().isPresent())\n+                .collect(groupingBy(s -> s.getUsernameAttribute().get(),\n+                        maxBy(Comparator.comparing(MongoDbSession::getLastAccessTime))));\n+    }\n+\n+    private Map<String, String> getRoleNameMap(Set<String> roleIds) throws org.graylog2.database.NotFoundException {\n+        final Map<String, Role> roleMap = roleService.findIdMap(roleIds);\n+        final Map<String, String> result = new HashMap<>(roleMap.size());\n+        roleMap.forEach((key, value) -> result.put(key, value.getName()));\n+        return result;\n+    }\n+\n+    private UserDTO getAdminUserDTO(Map<String, Optional<MongoDbSession>> lastSessionMap, Map<String, String> roleNameMap) {\n+        final User admin = userService.getRootUser()\n+                .orElseThrow(() -> new NotFoundException(\"Could not find admin user\"));", "originalCommit": "f802e82a789856ea59fe22a365e776b9c36d6034", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "aa45871595f7c8333ff73e8e26c200e1a4826970", "changed_code": [{"header": "diff --git a/graylog2-server/src/main/java/org/graylog2/rest/resources/users/UsersResource.java b/graylog2-server/src/main/java/org/graylog2/rest/resources/users/UsersResource.java\nindex 72d7c2138e..ab65929b94 100644\n--- a/graylog2-server/src/main/java/org/graylog2/rest/resources/users/UsersResource.java\n+++ b/graylog2-server/src/main/java/org/graylog2/rest/resources/users/UsersResource.java\n", "chunk": "@@ -660,20 +651,21 @@ public class UsersResource extends RestResource {\n         return result;\n     }\n \n-    private UserDTO getAdminUserDTO(Map<String, Optional<MongoDbSession>> lastSessionMap, Map<String, String> roleNameMap) {\n-        final User admin = userService.getRootUser()\n-                .orElseThrow(() -> new NotFoundException(\"Could not find admin user\"));\n+    private UserOverviewDTO getAdminUserDTO(Map<String, Optional<MongoDbSession>> lastSessionMap) {\n+        final Optional<User> optionalAdmin = userService.getRootUser();\n+        if (!optionalAdmin.isPresent()) {\n+            return null;\n+        }\n+        final User admin = optionalAdmin.get();\n         final Set<String> adminRoles = userService.getRoleNames(admin);\n         final Optional<MongoDbSession> lastSession = lastSessionMap.getOrDefault(admin.getName(), Optional.empty());\n-        return UserDTO.builder()\n+        return UserOverviewDTO.builder()\n                 .username(admin.getName())\n                 .fullName(admin.getFullName())\n                 .email(admin.getEmail())\n-                .external(admin.isExternalUser())\n-                .preferences(admin.getPreferences())\n+                .externalUser(admin.isExternalUser())\n                 .readOnly(admin.isReadOnly())\n                 .id(admin.getId())\n-                .timezone(admin.getTimeZone())\n                 .fillSession(lastSession)\n                 .roles(adminRoles)\n                 .build();\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjYxNzg1OA==", "url": "https://github.com/Graylog2/graylog2-server/pull/8520#discussion_r452617858", "body": "The `roleNameMap` is unused, so I guess we can remove it from the method signature?", "bodyText": "The roleNameMap is unused, so I guess we can remove it from the method signature?", "bodyHTML": "<p dir=\"auto\">The <code>roleNameMap</code> is unused, so I guess we can remove it from the method signature?</p>", "author": "bernd", "createdAt": "2020-07-10T04:38:01Z", "path": "graylog2-server/src/main/java/org/graylog2/rest/resources/users/UsersResource.java", "diffHunk": "@@ -556,4 +645,37 @@ private UserSummary toUserResponse(User user,\n         effectivePermissions.removeAll(userService.getUserPermissionsFromRoles(user));\n         return effectivePermissions;\n     }\n+\n+    private Map<String, Optional<MongoDbSession>> getLastSessionForUser(Collection<MongoDbSession> sessions) {\n+        return sessions.stream()\n+                .filter(s -> s.getUsernameAttribute().isPresent())\n+                .collect(groupingBy(s -> s.getUsernameAttribute().get(),\n+                        maxBy(Comparator.comparing(MongoDbSession::getLastAccessTime))));\n+    }\n+\n+    private Map<String, String> getRoleNameMap(Set<String> roleIds) throws org.graylog2.database.NotFoundException {\n+        final Map<String, Role> roleMap = roleService.findIdMap(roleIds);\n+        final Map<String, String> result = new HashMap<>(roleMap.size());\n+        roleMap.forEach((key, value) -> result.put(key, value.getName()));\n+        return result;\n+    }\n+\n+    private UserDTO getAdminUserDTO(Map<String, Optional<MongoDbSession>> lastSessionMap, Map<String, String> roleNameMap) {", "originalCommit": "f802e82a789856ea59fe22a365e776b9c36d6034", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "aa45871595f7c8333ff73e8e26c200e1a4826970", "changed_code": [{"header": "diff --git a/graylog2-server/src/main/java/org/graylog2/rest/resources/users/UsersResource.java b/graylog2-server/src/main/java/org/graylog2/rest/resources/users/UsersResource.java\nindex 72d7c2138e..ab65929b94 100644\n--- a/graylog2-server/src/main/java/org/graylog2/rest/resources/users/UsersResource.java\n+++ b/graylog2-server/src/main/java/org/graylog2/rest/resources/users/UsersResource.java\n", "chunk": "@@ -660,20 +651,21 @@ public class UsersResource extends RestResource {\n         return result;\n     }\n \n-    private UserDTO getAdminUserDTO(Map<String, Optional<MongoDbSession>> lastSessionMap, Map<String, String> roleNameMap) {\n-        final User admin = userService.getRootUser()\n-                .orElseThrow(() -> new NotFoundException(\"Could not find admin user\"));\n+    private UserOverviewDTO getAdminUserDTO(Map<String, Optional<MongoDbSession>> lastSessionMap) {\n+        final Optional<User> optionalAdmin = userService.getRootUser();\n+        if (!optionalAdmin.isPresent()) {\n+            return null;\n+        }\n+        final User admin = optionalAdmin.get();\n         final Set<String> adminRoles = userService.getRoleNames(admin);\n         final Optional<MongoDbSession> lastSession = lastSessionMap.getOrDefault(admin.getName(), Optional.empty());\n-        return UserDTO.builder()\n+        return UserOverviewDTO.builder()\n                 .username(admin.getName())\n                 .fullName(admin.getFullName())\n                 .email(admin.getEmail())\n-                .external(admin.isExternalUser())\n-                .preferences(admin.getPreferences())\n+                .externalUser(admin.isExternalUser())\n                 .readOnly(admin.isReadOnly())\n                 .id(admin.getId())\n-                .timezone(admin.getTimeZone())\n                 .fillSession(lastSession)\n                 .roles(adminRoles)\n                 .build();\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjYxODM5Mw==", "url": "https://github.com/Graylog2/graylog2-server/pull/8520#discussion_r452618393", "body": "See comment for `UPGRADING.rst` above.", "bodyText": "See comment for UPGRADING.rst above.", "bodyHTML": "<p dir=\"auto\">See comment for <code>UPGRADING.rst</code> above.</p>", "author": "bernd", "createdAt": "2020-07-10T04:40:53Z", "path": "graylog2-server/src/main/java/org/graylog2/rest/resources/users/UsersResource.java", "diffHunk": "@@ -144,6 +170,7 @@ public UserSummary get(@ApiParam(name = \"username\", value = \"The username to ret\n     }\n \n     @GET\n+    @Deprecated", "originalCommit": "f802e82a789856ea59fe22a365e776b9c36d6034", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjYyMDM2Mw==", "url": "https://github.com/Graylog2/graylog2-server/pull/8520#discussion_r452620363", "body": "This should use a `UserDTO` field instead of the `StreamImpl.FIELD_TITLE` and I think we should set a `@DefaultValue` as well.", "bodyText": "This should use a UserDTO field instead of the StreamImpl.FIELD_TITLE and I think we should set a @DefaultValue as well.", "bodyHTML": "<p dir=\"auto\">This should use a <code>UserDTO</code> field instead of the <code>StreamImpl.FIELD_TITLE</code> and I think we should set a <code>@DefaultValue</code> as well.</p>", "author": "bernd", "createdAt": "2020-07-10T04:50:09Z", "path": "graylog2-server/src/main/java/org/graylog2/rest/resources/users/UsersResource.java", "diffHunk": "@@ -171,6 +194,72 @@ public UserList listUsers() {\n         return UserList.create(resultUsers);\n     }\n \n+    @GET\n+    @Timed\n+    @Path(\"/paginated\")\n+    @ApiOperation(value = \"Get paginated list of users\")\n+    @RequiresPermissions(RestPermissions.USERS_LIST)\n+    @Produces(MediaType.APPLICATION_JSON)\n+    public UserPageListResponse getPage(@ApiParam(name = \"page\") @QueryParam(\"page\") @DefaultValue(\"1\") int page,\n+                                        @ApiParam(name = \"per_page\") @QueryParam(\"per_page\") @DefaultValue(\"50\") int perPage,\n+                                        @ApiParam(name = \"query\") @QueryParam(\"query\") @DefaultValue(\"\") String query,\n+                                        @ApiParam(name = \"sort\",\n+                                                value = \"The field to sort the result on\",\n+                                                required = true,\n+                                                allowableValues = \"title,description\")\n+                                            @DefaultValue(StreamImpl.FIELD_TITLE) @QueryParam(\"sort\") String sort,", "originalCommit": "f802e82a789856ea59fe22a365e776b9c36d6034", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgyMDE0Mw==", "url": "https://github.com/Graylog2/graylog2-server/pull/8520#discussion_r452820143", "bodyText": "Lol, that wrong field was on the @DefaultValue. \ud83d\ude02", "author": "bernd", "createdAt": "2020-07-10T12:45:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjYyMDM2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "aa45871595f7c8333ff73e8e26c200e1a4826970", "changed_code": [{"header": "diff --git a/graylog2-server/src/main/java/org/graylog2/rest/resources/users/UsersResource.java b/graylog2-server/src/main/java/org/graylog2/rest/resources/users/UsersResource.java\nindex 72d7c2138e..ab65929b94 100644\n--- a/graylog2-server/src/main/java/org/graylog2/rest/resources/users/UsersResource.java\n+++ b/graylog2-server/src/main/java/org/graylog2/rest/resources/users/UsersResource.java\n", "chunk": "@@ -200,15 +198,15 @@ public class UsersResource extends RestResource {\n     @ApiOperation(value = \"Get paginated list of users\")\n     @RequiresPermissions(RestPermissions.USERS_LIST)\n     @Produces(MediaType.APPLICATION_JSON)\n-    public UserPageListResponse getPage(@ApiParam(name = \"page\") @QueryParam(\"page\") @DefaultValue(\"1\") int page,\n-                                        @ApiParam(name = \"per_page\") @QueryParam(\"per_page\") @DefaultValue(\"50\") int perPage,\n-                                        @ApiParam(name = \"query\") @QueryParam(\"query\") @DefaultValue(\"\") String query,\n-                                        @ApiParam(name = \"sort\",\n+    public PaginatedResponse<UserOverviewDTO> getPage(@ApiParam(name = \"page\") @QueryParam(\"page\") @DefaultValue(\"1\") int page,\n+                                                      @ApiParam(name = \"per_page\") @QueryParam(\"per_page\") @DefaultValue(\"50\") int perPage,\n+                                                      @ApiParam(name = \"query\") @QueryParam(\"query\") @DefaultValue(\"\") String query,\n+                                                      @ApiParam(name = \"sort\",\n                                                 value = \"The field to sort the result on\",\n                                                 required = true,\n                                                 allowableValues = \"title,description\")\n-                                            @DefaultValue(StreamImpl.FIELD_TITLE) @QueryParam(\"sort\") String sort,\n-                                        @ApiParam(name = \"order\", value = \"The sort direction\", allowableValues = \"asc, desc\")\n+                                            @DefaultValue(UserOverviewDTO.FIELD_FULL_NAME) @QueryParam(\"sort\") String sort,\n+                                                      @ApiParam(name = \"order\", value = \"The sort direction\", allowableValues = \"asc, desc\")\n                                             @DefaultValue(\"asc\") @QueryParam(\"order\") String order) {\n \n         SearchQuery searchQuery;\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjYyMjE5OQ==", "url": "https://github.com/Graylog2/graylog2-server/pull/8520#discussion_r452622199", "body": "The service doesn't return complete `UserDTO` objects. The `UserServiceImpl` is doing some more stuff than just loading the database contents.\r\n\r\nHow about returning a reduced set of attributes for the paginated endpoint for now? I think we don't need all attributes for a user overview page. We can fix this once we refactor the `UserService` to use mongojack.\r\n\r\n### Returned by this service\r\n\r\n```json\r\n   {\r\n      \"id\": \"59552b9faefa8d40ffb2c4e6\",\r\n      \"username\": \"katze\",\r\n      \"email\": \"katze@localhost\",\r\n      \"full_name\": \"katze\",\r\n      \"permissions\": [],\r\n      \"preferences\": null,\r\n      \"timezone\": null,\r\n      \"session_timeout_ms\": null,\r\n      \"external_user\": true,\r\n      \"startpage\": null,\r\n      \"roles\": [\r\n        \"Reader\"\r\n      ],\r\n      \"read_only\": null,\r\n      \"session_active\": null,\r\n      \"last_activity\": null,\r\n      \"client_address\": null\r\n    }\r\n```\r\n\r\n### Returned by `UserServiceImpl`\r\n\r\n```json\r\n    {\r\n      \"id\": \"59552b9faefa8d40ffb2c4e6\",\r\n      \"username\": \"katze\",\r\n      \"email\": \"katze@localhost\",\r\n      \"full_name\": \"katze\",\r\n      \"permissions\": [\r\n        \"users:tokencreate:katze\",\r\n        \"users:tokenremove:katze\",\r\n        \"users:passwordchange:katze\",\r\n        \"users:tokenlist:katze\",\r\n        \"users:edit:katze\",\r\n        \"clusterconfigentry:read\",\r\n        \"indexercluster:read\",\r\n        \"messagecount:read\",\r\n        \"journal:read\",\r\n        \"messages:analyze\",\r\n        \"inputs:read\",\r\n        \"metrics:read\",\r\n        \"savedsearches:edit\",\r\n        \"fieldnames:read\",\r\n        \"buffers:read\",\r\n        \"system:read\",\r\n        \"savedsearches:create\",\r\n        \"jvmstats:read\",\r\n        \"decorators:read\",\r\n        \"throughput:read\",\r\n        \"savedsearches:read\",\r\n        \"messages:read\"\r\n      ],\r\n      \"preferences\": {\r\n        \"updateUnfocussed\": false,\r\n        \"enableSmartSearch\": true\r\n      },\r\n      \"timezone\": null,\r\n      \"session_timeout_ms\": 28800000,\r\n      \"external\": true,\r\n      \"startpage\": null,\r\n      \"roles\": [\r\n        \"Reader\"\r\n      ],\r\n      \"read_only\": false,\r\n      \"session_active\": false,\r\n      \"last_activity\": null,\r\n      \"client_address\": null\r\n    }\r\n```", "bodyText": "The service doesn't return complete UserDTO objects. The UserServiceImpl is doing some more stuff than just loading the database contents.\nHow about returning a reduced set of attributes for the paginated endpoint for now? I think we don't need all attributes for a user overview page. We can fix this once we refactor the UserService to use mongojack.\nReturned by this service\n   {\n      \"id\": \"59552b9faefa8d40ffb2c4e6\",\n      \"username\": \"katze\",\n      \"email\": \"katze@localhost\",\n      \"full_name\": \"katze\",\n      \"permissions\": [],\n      \"preferences\": null,\n      \"timezone\": null,\n      \"session_timeout_ms\": null,\n      \"external_user\": true,\n      \"startpage\": null,\n      \"roles\": [\n        \"Reader\"\n      ],\n      \"read_only\": null,\n      \"session_active\": null,\n      \"last_activity\": null,\n      \"client_address\": null\n    }\nReturned by UserServiceImpl\n    {\n      \"id\": \"59552b9faefa8d40ffb2c4e6\",\n      \"username\": \"katze\",\n      \"email\": \"katze@localhost\",\n      \"full_name\": \"katze\",\n      \"permissions\": [\n        \"users:tokencreate:katze\",\n        \"users:tokenremove:katze\",\n        \"users:passwordchange:katze\",\n        \"users:tokenlist:katze\",\n        \"users:edit:katze\",\n        \"clusterconfigentry:read\",\n        \"indexercluster:read\",\n        \"messagecount:read\",\n        \"journal:read\",\n        \"messages:analyze\",\n        \"inputs:read\",\n        \"metrics:read\",\n        \"savedsearches:edit\",\n        \"fieldnames:read\",\n        \"buffers:read\",\n        \"system:read\",\n        \"savedsearches:create\",\n        \"jvmstats:read\",\n        \"decorators:read\",\n        \"throughput:read\",\n        \"savedsearches:read\",\n        \"messages:read\"\n      ],\n      \"preferences\": {\n        \"updateUnfocussed\": false,\n        \"enableSmartSearch\": true\n      },\n      \"timezone\": null,\n      \"session_timeout_ms\": 28800000,\n      \"external\": true,\n      \"startpage\": null,\n      \"roles\": [\n        \"Reader\"\n      ],\n      \"read_only\": false,\n      \"session_active\": false,\n      \"last_activity\": null,\n      \"client_address\": null\n    }", "bodyHTML": "<p dir=\"auto\">The service doesn't return complete <code>UserDTO</code> objects. The <code>UserServiceImpl</code> is doing some more stuff than just loading the database contents.</p>\n<p dir=\"auto\">How about returning a reduced set of attributes for the paginated endpoint for now? I think we don't need all attributes for a user overview page. We can fix this once we refactor the <code>UserService</code> to use mongojack.</p>\n<h3 dir=\"auto\">Returned by this service</h3>\n<div class=\"highlight highlight-source-json position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"   {\n      &quot;id&quot;: &quot;59552b9faefa8d40ffb2c4e6&quot;,\n      &quot;username&quot;: &quot;katze&quot;,\n      &quot;email&quot;: &quot;katze@localhost&quot;,\n      &quot;full_name&quot;: &quot;katze&quot;,\n      &quot;permissions&quot;: [],\n      &quot;preferences&quot;: null,\n      &quot;timezone&quot;: null,\n      &quot;session_timeout_ms&quot;: null,\n      &quot;external_user&quot;: true,\n      &quot;startpage&quot;: null,\n      &quot;roles&quot;: [\n        &quot;Reader&quot;\n      ],\n      &quot;read_only&quot;: null,\n      &quot;session_active&quot;: null,\n      &quot;last_activity&quot;: null,\n      &quot;client_address&quot;: null\n    }\"><pre>   {\n      <span class=\"pl-ent\">\"id\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>59552b9faefa8d40ffb2c4e6<span class=\"pl-pds\">\"</span></span>,\n      <span class=\"pl-ent\">\"username\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>katze<span class=\"pl-pds\">\"</span></span>,\n      <span class=\"pl-ent\">\"email\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>katze@localhost<span class=\"pl-pds\">\"</span></span>,\n      <span class=\"pl-ent\">\"full_name\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>katze<span class=\"pl-pds\">\"</span></span>,\n      <span class=\"pl-ent\">\"permissions\"</span>: [],\n      <span class=\"pl-ent\">\"preferences\"</span>: <span class=\"pl-c1\">null</span>,\n      <span class=\"pl-ent\">\"timezone\"</span>: <span class=\"pl-c1\">null</span>,\n      <span class=\"pl-ent\">\"session_timeout_ms\"</span>: <span class=\"pl-c1\">null</span>,\n      <span class=\"pl-ent\">\"external_user\"</span>: <span class=\"pl-c1\">true</span>,\n      <span class=\"pl-ent\">\"startpage\"</span>: <span class=\"pl-c1\">null</span>,\n      <span class=\"pl-ent\">\"roles\"</span>: [\n        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Reader<span class=\"pl-pds\">\"</span></span>\n      ],\n      <span class=\"pl-ent\">\"read_only\"</span>: <span class=\"pl-c1\">null</span>,\n      <span class=\"pl-ent\">\"session_active\"</span>: <span class=\"pl-c1\">null</span>,\n      <span class=\"pl-ent\">\"last_activity\"</span>: <span class=\"pl-c1\">null</span>,\n      <span class=\"pl-ent\">\"client_address\"</span>: <span class=\"pl-c1\">null</span>\n    }</pre></div>\n<h3 dir=\"auto\">Returned by <code>UserServiceImpl</code></h3>\n<div class=\"highlight highlight-source-json position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"    {\n      &quot;id&quot;: &quot;59552b9faefa8d40ffb2c4e6&quot;,\n      &quot;username&quot;: &quot;katze&quot;,\n      &quot;email&quot;: &quot;katze@localhost&quot;,\n      &quot;full_name&quot;: &quot;katze&quot;,\n      &quot;permissions&quot;: [\n        &quot;users:tokencreate:katze&quot;,\n        &quot;users:tokenremove:katze&quot;,\n        &quot;users:passwordchange:katze&quot;,\n        &quot;users:tokenlist:katze&quot;,\n        &quot;users:edit:katze&quot;,\n        &quot;clusterconfigentry:read&quot;,\n        &quot;indexercluster:read&quot;,\n        &quot;messagecount:read&quot;,\n        &quot;journal:read&quot;,\n        &quot;messages:analyze&quot;,\n        &quot;inputs:read&quot;,\n        &quot;metrics:read&quot;,\n        &quot;savedsearches:edit&quot;,\n        &quot;fieldnames:read&quot;,\n        &quot;buffers:read&quot;,\n        &quot;system:read&quot;,\n        &quot;savedsearches:create&quot;,\n        &quot;jvmstats:read&quot;,\n        &quot;decorators:read&quot;,\n        &quot;throughput:read&quot;,\n        &quot;savedsearches:read&quot;,\n        &quot;messages:read&quot;\n      ],\n      &quot;preferences&quot;: {\n        &quot;updateUnfocussed&quot;: false,\n        &quot;enableSmartSearch&quot;: true\n      },\n      &quot;timezone&quot;: null,\n      &quot;session_timeout_ms&quot;: 28800000,\n      &quot;external&quot;: true,\n      &quot;startpage&quot;: null,\n      &quot;roles&quot;: [\n        &quot;Reader&quot;\n      ],\n      &quot;read_only&quot;: false,\n      &quot;session_active&quot;: false,\n      &quot;last_activity&quot;: null,\n      &quot;client_address&quot;: null\n    }\"><pre>    {\n      <span class=\"pl-ent\">\"id\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>59552b9faefa8d40ffb2c4e6<span class=\"pl-pds\">\"</span></span>,\n      <span class=\"pl-ent\">\"username\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>katze<span class=\"pl-pds\">\"</span></span>,\n      <span class=\"pl-ent\">\"email\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>katze@localhost<span class=\"pl-pds\">\"</span></span>,\n      <span class=\"pl-ent\">\"full_name\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>katze<span class=\"pl-pds\">\"</span></span>,\n      <span class=\"pl-ent\">\"permissions\"</span>: [\n        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>users:tokencreate:katze<span class=\"pl-pds\">\"</span></span>,\n        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>users:tokenremove:katze<span class=\"pl-pds\">\"</span></span>,\n        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>users:passwordchange:katze<span class=\"pl-pds\">\"</span></span>,\n        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>users:tokenlist:katze<span class=\"pl-pds\">\"</span></span>,\n        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>users:edit:katze<span class=\"pl-pds\">\"</span></span>,\n        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>clusterconfigentry:read<span class=\"pl-pds\">\"</span></span>,\n        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>indexercluster:read<span class=\"pl-pds\">\"</span></span>,\n        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>messagecount:read<span class=\"pl-pds\">\"</span></span>,\n        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>journal:read<span class=\"pl-pds\">\"</span></span>,\n        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>messages:analyze<span class=\"pl-pds\">\"</span></span>,\n        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>inputs:read<span class=\"pl-pds\">\"</span></span>,\n        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>metrics:read<span class=\"pl-pds\">\"</span></span>,\n        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>savedsearches:edit<span class=\"pl-pds\">\"</span></span>,\n        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>fieldnames:read<span class=\"pl-pds\">\"</span></span>,\n        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>buffers:read<span class=\"pl-pds\">\"</span></span>,\n        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>system:read<span class=\"pl-pds\">\"</span></span>,\n        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>savedsearches:create<span class=\"pl-pds\">\"</span></span>,\n        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>jvmstats:read<span class=\"pl-pds\">\"</span></span>,\n        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>decorators:read<span class=\"pl-pds\">\"</span></span>,\n        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>throughput:read<span class=\"pl-pds\">\"</span></span>,\n        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>savedsearches:read<span class=\"pl-pds\">\"</span></span>,\n        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>messages:read<span class=\"pl-pds\">\"</span></span>\n      ],\n      <span class=\"pl-ent\">\"preferences\"</span>: {\n        <span class=\"pl-ent\">\"updateUnfocussed\"</span>: <span class=\"pl-c1\">false</span>,\n        <span class=\"pl-ent\">\"enableSmartSearch\"</span>: <span class=\"pl-c1\">true</span>\n      },\n      <span class=\"pl-ent\">\"timezone\"</span>: <span class=\"pl-c1\">null</span>,\n      <span class=\"pl-ent\">\"session_timeout_ms\"</span>: <span class=\"pl-c1\">28800000</span>,\n      <span class=\"pl-ent\">\"external\"</span>: <span class=\"pl-c1\">true</span>,\n      <span class=\"pl-ent\">\"startpage\"</span>: <span class=\"pl-c1\">null</span>,\n      <span class=\"pl-ent\">\"roles\"</span>: [\n        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Reader<span class=\"pl-pds\">\"</span></span>\n      ],\n      <span class=\"pl-ent\">\"read_only\"</span>: <span class=\"pl-c1\">false</span>,\n      <span class=\"pl-ent\">\"session_active\"</span>: <span class=\"pl-c1\">false</span>,\n      <span class=\"pl-ent\">\"last_activity\"</span>: <span class=\"pl-c1\">null</span>,\n      <span class=\"pl-ent\">\"client_address\"</span>: <span class=\"pl-c1\">null</span>\n    }</pre></div>", "author": "bernd", "createdAt": "2020-07-10T04:58:14Z", "path": "graylog2-server/src/main/java/org/graylog2/users/PaginatedUserService.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog2.users;\n+\n+import org.graylog2.bindings.providers.MongoJackObjectMapperProvider;\n+import org.graylog2.database.MongoConnection;\n+import org.graylog2.database.PaginatedDbService;\n+import org.graylog2.database.PaginatedList;\n+import org.graylog2.search.SearchQuery;\n+import org.mongojack.DBQuery;\n+import org.mongojack.DBSort;\n+\n+import javax.inject.Inject;\n+\n+public class PaginatedUserService extends PaginatedDbService<UserDTO> {\n+    private static final String COLLECTION_NAME = \"users\";\n+\n+    @Inject\n+    public PaginatedUserService(MongoConnection mongoConnection,\n+                                MongoJackObjectMapperProvider mapper) {\n+        super(mongoConnection, mapper, UserDTO.class, COLLECTION_NAME);\n+    }\n+\n+    public long count() {\n+        return db.count();\n+    }\n+\n+    public PaginatedList<UserDTO> findPaginated(SearchQuery searchQuery, int page,", "originalCommit": "f802e82a789856ea59fe22a365e776b9c36d6034", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "aa45871595f7c8333ff73e8e26c200e1a4826970", "changed_code": [{"header": "diff --git a/graylog2-server/src/main/java/org/graylog2/users/PaginatedUserService.java b/graylog2-server/src/main/java/org/graylog2/users/PaginatedUserService.java\nindex 4e5f3210f1..065528414a 100644\n--- a/graylog2-server/src/main/java/org/graylog2/users/PaginatedUserService.java\n+++ b/graylog2-server/src/main/java/org/graylog2/users/PaginatedUserService.java\n", "chunk": "@@ -26,21 +26,21 @@ import org.mongojack.DBSort;\n \n import javax.inject.Inject;\n \n-public class PaginatedUserService extends PaginatedDbService<UserDTO> {\n+public class PaginatedUserService extends PaginatedDbService<UserOverviewDTO> {\n     private static final String COLLECTION_NAME = \"users\";\n \n     @Inject\n     public PaginatedUserService(MongoConnection mongoConnection,\n                                 MongoJackObjectMapperProvider mapper) {\n-        super(mongoConnection, mapper, UserDTO.class, COLLECTION_NAME);\n+        super(mongoConnection, mapper, UserOverviewDTO.class, COLLECTION_NAME);\n     }\n \n     public long count() {\n         return db.count();\n     }\n \n-    public PaginatedList<UserDTO> findPaginated(SearchQuery searchQuery, int page,\n-                                                int perPage, String sortField, String order) {\n+    public PaginatedList<UserOverviewDTO> findPaginated(SearchQuery searchQuery, int page,\n+                                                        int perPage, String sortField, String order) {\n         final DBQuery.Query dbQuery = searchQuery.toDBQuery();\n         final DBSort.SortBuilder sortBuilder = getSortBuilder(order, sortField);\n         return findPaginatedWithQueryAndSort(dbQuery, sortBuilder, page, perPage);\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjYyMzQ2Nw==", "url": "https://github.com/Graylog2/graylog2-server/pull/8520#discussion_r452623467", "body": "This `noinspection` comment should be moved to the `getLastSessionForUser()` method.", "bodyText": "This noinspection comment should be moved to the getLastSessionForUser() method.", "bodyHTML": "<p dir=\"auto\">This <code>noinspection</code> comment should be moved to the <code>getLastSessionForUser()</code> method.</p>", "author": "bernd", "createdAt": "2020-07-10T05:03:41Z", "path": "graylog2-server/src/main/java/org/graylog2/rest/resources/users/UsersResource.java", "diffHunk": "@@ -152,11 +179,7 @@ public UserList listUsers() {\n \n         // among all active sessions, find the last recently used for each user\n         //noinspection OptionalGetWithoutIsPresent", "originalCommit": "f802e82a789856ea59fe22a365e776b9c36d6034", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "aa45871595f7c8333ff73e8e26c200e1a4826970", "changed_code": [{"header": "diff --git a/graylog2-server/src/main/java/org/graylog2/rest/resources/users/UsersResource.java b/graylog2-server/src/main/java/org/graylog2/rest/resources/users/UsersResource.java\nindex 72d7c2138e..ab65929b94 100644\n--- a/graylog2-server/src/main/java/org/graylog2/rest/resources/users/UsersResource.java\n+++ b/graylog2-server/src/main/java/org/graylog2/rest/resources/users/UsersResource.java\n", "chunk": "@@ -178,7 +177,6 @@ public class UsersResource extends RestResource {\n         final Collection<MongoDbSession> sessions = sessionService.loadAll();\n \n         // among all active sessions, find the last recently used for each user\n-        //noinspection OptionalGetWithoutIsPresent\n         final Map<String, Optional<MongoDbSession>> lastSessionForUser = getLastSessionForUser(sessions);\n         final List<UserSummary> resultUsers = Lists.newArrayListWithCapacity(users.size() + 1);\n         userService.getRootUser().ifPresent(adminUser ->\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjYyMzc3NA==", "url": "https://github.com/Graylog2/graylog2-server/pull/8520#discussion_r452623774", "body": "This variable is unused. The `users` variable is put into the `UserPageListResponse`. Is that correct?", "bodyText": "This variable is unused. The users variable is put into the UserPageListResponse. Is that correct?", "bodyHTML": "<p dir=\"auto\">This variable is unused. The <code>users</code> variable is put into the <code>UserPageListResponse</code>. Is that correct?</p>", "author": "bernd", "createdAt": "2020-07-10T05:05:02Z", "path": "graylog2-server/src/main/java/org/graylog2/rest/resources/users/UsersResource.java", "diffHunk": "@@ -171,6 +194,72 @@ public UserList listUsers() {\n         return UserList.create(resultUsers);\n     }\n \n+    @GET\n+    @Timed\n+    @Path(\"/paginated\")\n+    @ApiOperation(value = \"Get paginated list of users\")\n+    @RequiresPermissions(RestPermissions.USERS_LIST)\n+    @Produces(MediaType.APPLICATION_JSON)\n+    public UserPageListResponse getPage(@ApiParam(name = \"page\") @QueryParam(\"page\") @DefaultValue(\"1\") int page,\n+                                        @ApiParam(name = \"per_page\") @QueryParam(\"per_page\") @DefaultValue(\"50\") int perPage,\n+                                        @ApiParam(name = \"query\") @QueryParam(\"query\") @DefaultValue(\"\") String query,\n+                                        @ApiParam(name = \"sort\",\n+                                                value = \"The field to sort the result on\",\n+                                                required = true,\n+                                                allowableValues = \"title,description\")\n+                                            @DefaultValue(StreamImpl.FIELD_TITLE) @QueryParam(\"sort\") String sort,\n+                                        @ApiParam(name = \"order\", value = \"The sort direction\", allowableValues = \"asc, desc\")\n+                                            @DefaultValue(\"asc\") @QueryParam(\"order\") String order) {\n+\n+        SearchQuery searchQuery;\n+        final Collection<MongoDbSession> sessions = sessionService.loadAll();\n+        final Map<String, Optional<MongoDbSession>> lastSessionForUser = getLastSessionForUser(sessions);\n+        try {\n+            searchQuery = searchQueryParser.parse(query);\n+        } catch (IllegalArgumentException e) {\n+            throw new BadRequestException(\"Invalid argument in search query: \" + e.getMessage());\n+        }\n+\n+        final PaginatedList<UserDTO> result = paginatedUserService\n+                .findPaginated(searchQuery, page, perPage, sort, order);\n+        final Set<String> allRoleIds = result.stream().flatMap(userDTO -> {\n+            if (Optional.ofNullable(userDTO.roles()).isPresent()) {\n+                return userDTO.roles().stream();\n+            }\n+            return Stream.empty();\n+        }).collect(Collectors.toSet());\n+\n+        Map<String, String> roleNameMap;\n+        try {\n+            roleNameMap = getRoleNameMap(allRoleIds);\n+        } catch (org.graylog2.database.NotFoundException e) {\n+            throw new NotFoundException(\"Couldn't find roles: \" + e.getMessage());\n+        }\n+\n+        final UserDTO adminUser = getAdminUserDTO(lastSessionForUser, roleNameMap);\n+\n+        List<UserDTO> users = result.stream().map(userDTO -> {\n+            UserDTO.Builder builder = userDTO.toBuilder()\n+                    .fillSession(lastSessionForUser.getOrDefault(userDTO.username(), Optional.empty()));\n+            if (Optional.ofNullable(userDTO.roles()).isPresent()) {\n+                builder.roles(userDTO.roles().stream().map(roleNameMap::get).collect(Collectors.toSet()));\n+            }\n+            return builder.build();\n+        }).collect(Collectors.toList());\n+\n+        final PaginatedList<UserDTO> userDTOS = new PaginatedList<>(users, result.pagination().total(),", "originalCommit": "f802e82a789856ea59fe22a365e776b9c36d6034", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "aa45871595f7c8333ff73e8e26c200e1a4826970", "changed_code": [{"header": "diff --git a/graylog2-server/src/main/java/org/graylog2/rest/resources/users/UsersResource.java b/graylog2-server/src/main/java/org/graylog2/rest/resources/users/UsersResource.java\nindex 72d7c2138e..ab65929b94 100644\n--- a/graylog2-server/src/main/java/org/graylog2/rest/resources/users/UsersResource.java\n+++ b/graylog2-server/src/main/java/org/graylog2/rest/resources/users/UsersResource.java\n", "chunk": "@@ -236,28 +234,20 @@ public class UsersResource extends RestResource {\n             throw new NotFoundException(\"Couldn't find roles: \" + e.getMessage());\n         }\n \n-        final UserDTO adminUser = getAdminUserDTO(lastSessionForUser, roleNameMap);\n+        final UserOverviewDTO adminUser = getAdminUserDTO(lastSessionForUser);\n \n-        List<UserDTO> users = result.stream().map(userDTO -> {\n-            UserDTO.Builder builder = userDTO.toBuilder()\n+        List<UserOverviewDTO> users = result.stream().map(userDTO -> {\n+            UserOverviewDTO.Builder builder = userDTO.toBuilder()\n                     .fillSession(lastSessionForUser.getOrDefault(userDTO.username(), Optional.empty()));\n-            if (Optional.ofNullable(userDTO.roles()).isPresent()) {\n+            if (userDTO.roles() != null) {\n                 builder.roles(userDTO.roles().stream().map(roleNameMap::get).collect(Collectors.toSet()));\n             }\n             return builder.build();\n         }).collect(Collectors.toList());\n \n-        final PaginatedList<UserDTO> userDTOS = new PaginatedList<>(users, result.pagination().total(),\n+        final PaginatedList<UserOverviewDTO> userOverviewDTOS = new PaginatedList<>(users, result.pagination().total(),\n                 result.pagination().page(), result.pagination().perPage());\n-        return UserPageListResponse.builder()\n-                .query(query)\n-                .users(users)\n-                .total(result.pagination().total())\n-                .order(order)\n-                .sort(sort)\n-                .paginationInfo(result.pagination())\n-                .adminUser(adminUser)\n-                .build();\n+        return PaginatedResponse.create(\"users\", userOverviewDTOS, query, Collections.singletonMap(\"admin_user\", adminUser));\n     }\n \n     @POST\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjYyNDI4NQ==", "url": "https://github.com/Graylog2/graylog2-server/pull/8520#discussion_r452624285", "body": "`UserDTO#roles()` is not marked as nullable so it should always have a value. Why are you using the `Optional.ofNullable().isPresent()` construct here?", "bodyText": "UserDTO#roles() is not marked as nullable so it should always have a value. Why are you using the Optional.ofNullable().isPresent() construct here?", "bodyHTML": "<p dir=\"auto\"><code>UserDTO#roles()</code> is not marked as nullable so it should always have a value. Why are you using the <code>Optional.ofNullable().isPresent()</code> construct here?</p>", "author": "bernd", "createdAt": "2020-07-10T05:07:09Z", "path": "graylog2-server/src/main/java/org/graylog2/rest/resources/users/UsersResource.java", "diffHunk": "@@ -171,6 +194,72 @@ public UserList listUsers() {\n         return UserList.create(resultUsers);\n     }\n \n+    @GET\n+    @Timed\n+    @Path(\"/paginated\")\n+    @ApiOperation(value = \"Get paginated list of users\")\n+    @RequiresPermissions(RestPermissions.USERS_LIST)\n+    @Produces(MediaType.APPLICATION_JSON)\n+    public UserPageListResponse getPage(@ApiParam(name = \"page\") @QueryParam(\"page\") @DefaultValue(\"1\") int page,\n+                                        @ApiParam(name = \"per_page\") @QueryParam(\"per_page\") @DefaultValue(\"50\") int perPage,\n+                                        @ApiParam(name = \"query\") @QueryParam(\"query\") @DefaultValue(\"\") String query,\n+                                        @ApiParam(name = \"sort\",\n+                                                value = \"The field to sort the result on\",\n+                                                required = true,\n+                                                allowableValues = \"title,description\")\n+                                            @DefaultValue(StreamImpl.FIELD_TITLE) @QueryParam(\"sort\") String sort,\n+                                        @ApiParam(name = \"order\", value = \"The sort direction\", allowableValues = \"asc, desc\")\n+                                            @DefaultValue(\"asc\") @QueryParam(\"order\") String order) {\n+\n+        SearchQuery searchQuery;\n+        final Collection<MongoDbSession> sessions = sessionService.loadAll();\n+        final Map<String, Optional<MongoDbSession>> lastSessionForUser = getLastSessionForUser(sessions);\n+        try {\n+            searchQuery = searchQueryParser.parse(query);\n+        } catch (IllegalArgumentException e) {\n+            throw new BadRequestException(\"Invalid argument in search query: \" + e.getMessage());\n+        }\n+\n+        final PaginatedList<UserDTO> result = paginatedUserService\n+                .findPaginated(searchQuery, page, perPage, sort, order);\n+        final Set<String> allRoleIds = result.stream().flatMap(userDTO -> {\n+            if (Optional.ofNullable(userDTO.roles()).isPresent()) {\n+                return userDTO.roles().stream();\n+            }\n+            return Stream.empty();\n+        }).collect(Collectors.toSet());\n+\n+        Map<String, String> roleNameMap;\n+        try {\n+            roleNameMap = getRoleNameMap(allRoleIds);\n+        } catch (org.graylog2.database.NotFoundException e) {\n+            throw new NotFoundException(\"Couldn't find roles: \" + e.getMessage());\n+        }\n+\n+        final UserDTO adminUser = getAdminUserDTO(lastSessionForUser, roleNameMap);\n+\n+        List<UserDTO> users = result.stream().map(userDTO -> {\n+            UserDTO.Builder builder = userDTO.toBuilder()\n+                    .fillSession(lastSessionForUser.getOrDefault(userDTO.username(), Optional.empty()));\n+            if (Optional.ofNullable(userDTO.roles()).isPresent()) {", "originalCommit": "f802e82a789856ea59fe22a365e776b9c36d6034", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "aa45871595f7c8333ff73e8e26c200e1a4826970", "changed_code": [{"header": "diff --git a/graylog2-server/src/main/java/org/graylog2/rest/resources/users/UsersResource.java b/graylog2-server/src/main/java/org/graylog2/rest/resources/users/UsersResource.java\nindex 72d7c2138e..ab65929b94 100644\n--- a/graylog2-server/src/main/java/org/graylog2/rest/resources/users/UsersResource.java\n+++ b/graylog2-server/src/main/java/org/graylog2/rest/resources/users/UsersResource.java\n", "chunk": "@@ -236,28 +234,20 @@ public class UsersResource extends RestResource {\n             throw new NotFoundException(\"Couldn't find roles: \" + e.getMessage());\n         }\n \n-        final UserDTO adminUser = getAdminUserDTO(lastSessionForUser, roleNameMap);\n+        final UserOverviewDTO adminUser = getAdminUserDTO(lastSessionForUser);\n \n-        List<UserDTO> users = result.stream().map(userDTO -> {\n-            UserDTO.Builder builder = userDTO.toBuilder()\n+        List<UserOverviewDTO> users = result.stream().map(userDTO -> {\n+            UserOverviewDTO.Builder builder = userDTO.toBuilder()\n                     .fillSession(lastSessionForUser.getOrDefault(userDTO.username(), Optional.empty()));\n-            if (Optional.ofNullable(userDTO.roles()).isPresent()) {\n+            if (userDTO.roles() != null) {\n                 builder.roles(userDTO.roles().stream().map(roleNameMap::get).collect(Collectors.toSet()));\n             }\n             return builder.build();\n         }).collect(Collectors.toList());\n \n-        final PaginatedList<UserDTO> userDTOS = new PaginatedList<>(users, result.pagination().total(),\n+        final PaginatedList<UserOverviewDTO> userOverviewDTOS = new PaginatedList<>(users, result.pagination().total(),\n                 result.pagination().page(), result.pagination().perPage());\n-        return UserPageListResponse.builder()\n-                .query(query)\n-                .users(users)\n-                .total(result.pagination().total())\n-                .order(order)\n-                .sort(sort)\n-                .paginationInfo(result.pagination())\n-                .adminUser(adminUser)\n-                .build();\n+        return PaginatedResponse.create(\"users\", userOverviewDTOS, query, Collections.singletonMap(\"admin_user\", adminUser));\n     }\n \n     @POST\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjYyNjAzOA==", "url": "https://github.com/Graylog2/graylog2-server/pull/8520#discussion_r452626038", "body": "I think we can use the `PaginatedResponse` return value here. That would make the response similar to what we return from other paginated endpoints. (with the custom `UserPageListResponse` we have a `pagination` key inside the response, `PaginatedResponse` doesn't have that) The `admin_user` will move to under the `context` key in the response, but I think that's okay.\r\n\r\n```json\r\nreturn PaginatedResponse.create(\"users\", userDTOS, query, Collections.singletonMap(\"admin_user\", adminUser));\r\n```", "bodyText": "I think we can use the PaginatedResponse return value here. That would make the response similar to what we return from other paginated endpoints. (with the custom UserPageListResponse we have a pagination key inside the response, PaginatedResponse doesn't have that) The admin_user will move to under the context key in the response, but I think that's okay.\nreturn PaginatedResponse.create(\"users\", userDTOS, query, Collections.singletonMap(\"admin_user\", adminUser));", "bodyHTML": "<p dir=\"auto\">I think we can use the <code>PaginatedResponse</code> return value here. That would make the response similar to what we return from other paginated endpoints. (with the custom <code>UserPageListResponse</code> we have a <code>pagination</code> key inside the response, <code>PaginatedResponse</code> doesn't have that) The <code>admin_user</code> will move to under the <code>context</code> key in the response, but I think that's okay.</p>\n<div class=\"highlight highlight-source-json position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"return PaginatedResponse.create(&quot;users&quot;, userDTOS, query, Collections.singletonMap(&quot;admin_user&quot;, adminUser));\"><pre><span class=\"pl-ii\">return PaginatedResponse.create(\"users\", userDTOS, query, Collections.singletonMap(\"admin_user\", adminUser));</span></pre></div>", "author": "bernd", "createdAt": "2020-07-10T05:15:09Z", "path": "graylog2-server/src/main/java/org/graylog2/rest/resources/users/UsersResource.java", "diffHunk": "@@ -171,6 +194,72 @@ public UserList listUsers() {\n         return UserList.create(resultUsers);\n     }\n \n+    @GET\n+    @Timed\n+    @Path(\"/paginated\")\n+    @ApiOperation(value = \"Get paginated list of users\")\n+    @RequiresPermissions(RestPermissions.USERS_LIST)\n+    @Produces(MediaType.APPLICATION_JSON)\n+    public UserPageListResponse getPage(@ApiParam(name = \"page\") @QueryParam(\"page\") @DefaultValue(\"1\") int page,\n+                                        @ApiParam(name = \"per_page\") @QueryParam(\"per_page\") @DefaultValue(\"50\") int perPage,\n+                                        @ApiParam(name = \"query\") @QueryParam(\"query\") @DefaultValue(\"\") String query,\n+                                        @ApiParam(name = \"sort\",\n+                                                value = \"The field to sort the result on\",\n+                                                required = true,\n+                                                allowableValues = \"title,description\")\n+                                            @DefaultValue(StreamImpl.FIELD_TITLE) @QueryParam(\"sort\") String sort,\n+                                        @ApiParam(name = \"order\", value = \"The sort direction\", allowableValues = \"asc, desc\")\n+                                            @DefaultValue(\"asc\") @QueryParam(\"order\") String order) {\n+\n+        SearchQuery searchQuery;\n+        final Collection<MongoDbSession> sessions = sessionService.loadAll();\n+        final Map<String, Optional<MongoDbSession>> lastSessionForUser = getLastSessionForUser(sessions);\n+        try {\n+            searchQuery = searchQueryParser.parse(query);\n+        } catch (IllegalArgumentException e) {\n+            throw new BadRequestException(\"Invalid argument in search query: \" + e.getMessage());\n+        }\n+\n+        final PaginatedList<UserDTO> result = paginatedUserService\n+                .findPaginated(searchQuery, page, perPage, sort, order);\n+        final Set<String> allRoleIds = result.stream().flatMap(userDTO -> {\n+            if (Optional.ofNullable(userDTO.roles()).isPresent()) {\n+                return userDTO.roles().stream();\n+            }\n+            return Stream.empty();\n+        }).collect(Collectors.toSet());\n+\n+        Map<String, String> roleNameMap;\n+        try {\n+            roleNameMap = getRoleNameMap(allRoleIds);\n+        } catch (org.graylog2.database.NotFoundException e) {\n+            throw new NotFoundException(\"Couldn't find roles: \" + e.getMessage());\n+        }\n+\n+        final UserDTO adminUser = getAdminUserDTO(lastSessionForUser, roleNameMap);\n+\n+        List<UserDTO> users = result.stream().map(userDTO -> {\n+            UserDTO.Builder builder = userDTO.toBuilder()\n+                    .fillSession(lastSessionForUser.getOrDefault(userDTO.username(), Optional.empty()));\n+            if (Optional.ofNullable(userDTO.roles()).isPresent()) {\n+                builder.roles(userDTO.roles().stream().map(roleNameMap::get).collect(Collectors.toSet()));\n+            }\n+            return builder.build();\n+        }).collect(Collectors.toList());\n+\n+        final PaginatedList<UserDTO> userDTOS = new PaginatedList<>(users, result.pagination().total(),\n+                result.pagination().page(), result.pagination().perPage());\n+        return UserPageListResponse.builder()", "originalCommit": "f802e82a789856ea59fe22a365e776b9c36d6034", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "aa45871595f7c8333ff73e8e26c200e1a4826970", "changed_code": [{"header": "diff --git a/graylog2-server/src/main/java/org/graylog2/rest/resources/users/UsersResource.java b/graylog2-server/src/main/java/org/graylog2/rest/resources/users/UsersResource.java\nindex 72d7c2138e..ab65929b94 100644\n--- a/graylog2-server/src/main/java/org/graylog2/rest/resources/users/UsersResource.java\n+++ b/graylog2-server/src/main/java/org/graylog2/rest/resources/users/UsersResource.java\n", "chunk": "@@ -236,28 +234,20 @@ public class UsersResource extends RestResource {\n             throw new NotFoundException(\"Couldn't find roles: \" + e.getMessage());\n         }\n \n-        final UserDTO adminUser = getAdminUserDTO(lastSessionForUser, roleNameMap);\n+        final UserOverviewDTO adminUser = getAdminUserDTO(lastSessionForUser);\n \n-        List<UserDTO> users = result.stream().map(userDTO -> {\n-            UserDTO.Builder builder = userDTO.toBuilder()\n+        List<UserOverviewDTO> users = result.stream().map(userDTO -> {\n+            UserOverviewDTO.Builder builder = userDTO.toBuilder()\n                     .fillSession(lastSessionForUser.getOrDefault(userDTO.username(), Optional.empty()));\n-            if (Optional.ofNullable(userDTO.roles()).isPresent()) {\n+            if (userDTO.roles() != null) {\n                 builder.roles(userDTO.roles().stream().map(roleNameMap::get).collect(Collectors.toSet()));\n             }\n             return builder.build();\n         }).collect(Collectors.toList());\n \n-        final PaginatedList<UserDTO> userDTOS = new PaginatedList<>(users, result.pagination().total(),\n+        final PaginatedList<UserOverviewDTO> userOverviewDTOS = new PaginatedList<>(users, result.pagination().total(),\n                 result.pagination().page(), result.pagination().perPage());\n-        return UserPageListResponse.builder()\n-                .query(query)\n-                .users(users)\n-                .total(result.pagination().total())\n-                .order(order)\n-                .sort(sort)\n-                .paginationInfo(result.pagination())\n-                .adminUser(adminUser)\n-                .build();\n+        return PaginatedResponse.create(\"users\", userOverviewDTOS, query, Collections.singletonMap(\"admin_user\", adminUser));\n     }\n \n     @POST\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjYyOTg3Ng==", "url": "https://github.com/Graylog2/graylog2-server/pull/8520#discussion_r452629876", "body": "You can use the `DBQuery.in()` helper here:\r\n\r\n```suggestion\r\n        final DBQuery.Query query = DBQuery.in(ID, roleIds);\r\n```\r\n\r\nMongojack also takes care of the `ObjectId` conversion.", "bodyText": "You can use the DBQuery.in() helper here:\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    final DBObject query = BasicDBObjectBuilder.start()\n          \n          \n            \n                            .push(ID)\n          \n          \n            \n                            .append(\"$in\", roleIds.stream().map(ObjectId::new).collect(Collectors.toSet()))\n          \n          \n            \n                            .get();\n          \n          \n            \n                    final DBQuery.Query query = DBQuery.in(ID, roleIds);\n          \n      \n    \n    \n  \n\nMongojack also takes care of the ObjectId conversion.", "bodyHTML": "<p dir=\"auto\">You can use the <code>DBQuery.in()</code> helper here:</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">final</span> <span class=\"pl-smi\">DBObject</span> query <span class=\"pl-k\">=</span> <span class=\"pl-smi\">BasicDBObjectBuilder</span><span class=\"pl-k\">.</span>start()</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                .push(<span class=\"pl-c1\">ID</span>)</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                .append(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>$in<span class=\"pl-pds\">\"</span></span>, roleIds<span class=\"pl-k\">.</span>stream()<span class=\"pl-k\">.</span>map(<span class=\"pl-smi\">ObjectId</span><span class=\"pl-k\">::</span><span class=\"pl-k\">new</span>)<span class=\"pl-k\">.</span>collect(<span class=\"pl-smi\">Collectors</span><span class=\"pl-k\">.</span>toSet()))</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                .get();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">final</span> <span class=\"pl-smi\">DBQuery</span><span class=\"pl-k\">.</span><span class=\"pl-smi\">Query</span> query <span class=\"pl-k\">=</span> <span class=\"pl-smi\">DBQuery</span><span class=\"pl-k\">.</span>in(<span class=\"pl-c1\">ID</span>, roleIds);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\">Mongojack also takes care of the <code>ObjectId</code> conversion.</p>", "author": "bernd", "createdAt": "2020-07-10T05:30:32Z", "path": "graylog2-server/src/main/java/org/graylog2/users/RoleServiceImpl.java", "diffHunk": "@@ -159,6 +163,24 @@ public boolean exists(String roleName) {\n         }\n     }\n \n+    @Override\n+    public Map<String, Role> findIdMap(Set<String> roleIds) throws NotFoundException {\n+        final DBObject query = BasicDBObjectBuilder.start()\n+                .push(ID)\n+                .append(\"$in\", roleIds.stream().map(ObjectId::new).collect(Collectors.toSet()))\n+                .get();", "originalCommit": "f802e82a789856ea59fe22a365e776b9c36d6034", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "aa45871595f7c8333ff73e8e26c200e1a4826970", "changed_code": [{"header": "diff --git a/graylog2-server/src/main/java/org/graylog2/users/RoleServiceImpl.java b/graylog2-server/src/main/java/org/graylog2/users/RoleServiceImpl.java\nindex 889fe0b58b..11434386c3 100644\n--- a/graylog2-server/src/main/java/org/graylog2/users/RoleServiceImpl.java\n+++ b/graylog2-server/src/main/java/org/graylog2/users/RoleServiceImpl.java\n", "chunk": "@@ -165,10 +162,7 @@ public class RoleServiceImpl implements RoleService {\n \n     @Override\n     public Map<String, Role> findIdMap(Set<String> roleIds) throws NotFoundException {\n-        final DBObject query = BasicDBObjectBuilder.start()\n-                .push(ID)\n-                .append(\"$in\", roleIds.stream().map(ObjectId::new).collect(Collectors.toSet()))\n-                .get();\n+        final DBQuery.Query query = DBQuery.in(ID, roleIds);\n         try (DBCursor<RoleImpl> rolesCursor = dbCollection.find(query)) {\n             ImmutableSet<Role> roles = ImmutableSet.copyOf((Iterable<? extends Role>) rolesCursor);\n             return Maps.uniqueIndex(roles, new Function<Role, String>() {\n", "next_change": null}]}}, {"oid": "6b0cdf4866f745304a402e22291624405beca21c", "url": "https://github.com/Graylog2/graylog2-server/commit/6b0cdf4866f745304a402e22291624405beca21c", "message": "Add new endpoint to retrive a paginated list of users\n\nPrior to this change, the users were only receivable\nall in one chunk.\n\nThis change will get the users paginated.\n\nThe old '/system/users' endpoint is marked as deprecated.", "committedDate": "2020-07-10T08:23:36Z", "type": "commit"}, {"oid": "ece6a4fcdaa8f8fa669193e9a6cfae767150c4ac", "url": "https://github.com/Graylog2/graylog2-server/commit/ece6a4fcdaa8f8fa669193e9a6cfae767150c4ac", "message": "Add missing license headers", "committedDate": "2020-07-10T08:23:36Z", "type": "commit"}, {"oid": "24aa86a7d95d05b2f60398de0e343129b87de94f", "url": "https://github.com/Graylog2/graylog2-server/commit/24aa86a7d95d05b2f60398de0e343129b87de94f", "message": "Add missing permission check", "committedDate": "2020-07-10T08:23:36Z", "type": "commit"}, {"oid": "aa45871595f7c8333ff73e8e26c200e1a4826970", "url": "https://github.com/Graylog2/graylog2-server/commit/aa45871595f7c8333ff73e8e26c200e1a4826970", "message": "Fix annotaions from @bernd", "committedDate": "2020-07-10T08:23:37Z", "type": "commit"}, {"oid": "aa45871595f7c8333ff73e8e26c200e1a4826970", "url": "https://github.com/Graylog2/graylog2-server/commit/aa45871595f7c8333ff73e8e26c200e1a4826970", "message": "Fix annotaions from @bernd", "committedDate": "2020-07-10T08:23:37Z", "type": "forcePushed"}]}