{"pr_number": 3003, "pr_title": "Added JUnit tests for commons package", "pr_author": "code-incubus", "pr_createdAt": "2020-06-17T17:57:41Z", "pr_url": "https://github.com/eclipse/kapua/pull/3003", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk5NzY3NA==", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r441997674", "body": "In second entry, there are double same symbols and some are not included. Please change to: \"!\\\"#$%&'()=?\u2044@\u2039\u203a\u20ac\u00b0\u00b7\u201a,.-;:_\u00c8\u02c7\u00bf<>\u00ab\u2018\u201d\u2019\u00c9\u00d8\u220f{}|\u00c6\u00e6\u00d2\uf8ff\u00d4\u00d3\u00cc\u00cf\u00ce\u00c5\u00ab\u00bb\u00c7\u25ca\u00d1\u02c6\u00af\u00c8\u02c7\" - try to include as much as special symbols as possible. ", "bodyText": "In second entry, there are double same symbols and some are not included. Please change to: \"!\"#$%&'()=?\u2044@\u2039\u203a\u20ac\u00b0\u00b7\u201a,.-;:_\u00c8\u02c7\u00bf<>\u00ab\u2018\u201d\u2019\u00c9\u00d8\u220f{}|\u00c6\u00e6\u00d2\uf8ff\u00d4\u00d3\u00cc\u00cf\u00ce\u00c5\u00ab\u00bb\u00c7\u25ca\u00d1\u02c6\u00af\u00c8\u02c7\" - try to include as much as special symbols as possible.", "bodyHTML": "<p dir=\"auto\">In second entry, there are double same symbols and some are not included. Please change to: \"!\"#$%&amp;'()=?\u2044@\u2039\u203a\u20ac\u00b0\u00b7\u201a,.-;:_\u00c8\u02c7\u00bf&lt;&gt;\u00ab\u2018\u201d\u2019\u00c9\u00d8\u220f{}|\u00c6\u00e6\u00d2\uf8ff\u00d4\u00d3\u00cc\u00cf\u00ce\u00c5\u00ab\u00bb\u00c7\u25ca\u00d1\u02c6\u00af\u00c8\u02c7\" - try to include as much as special symbols as possible.</p>", "author": "LeoNerdoG", "createdAt": "2020-06-18T06:33:38Z", "path": "commons/src/test/java/org/eclipse/kapua/commons/event/HousekeeperRunTest.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+import java.text.DateFormat;\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+\n+@Category(JUnitTests.class)\n+public class HousekeeperRunTest extends Assert {\n+\n+    DateFormat format = new SimpleDateFormat(\"dd/MM/yyyy\");\n+    Date date;\n+    {\n+        try {\n+            date = format.parse(\"29/5/2020\");\n+        } catch (ParseException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    HousekeeperRun houseKeeper;\n+\n+    @Before\n+    public void createInstanceOfClasses() {\n+        houseKeeper = new HousekeeperRun();\n+    }\n+\n+    @Test\n+    public void setAndGetServiceNullTest() {\n+        houseKeeper.setService(null);\n+        assertNull(\"not_null\", houseKeeper.getService());\n+    }\n+\n+    @Test\n+    public void setAndGetServiceTest() {\n+        String[] permittedValues = {\"\", \"!@#$%^^&**(-()_)+/|\", \"regularNaming\", \"regular Naming\", \"49\", \"regularNaming49\", \"NAMING\", \"246465494135646120009090049684646496468456468496846464968496844\"};", "originalCommit": "d4f078b1dfb83c13e0b22edcd137f0948dec1727", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk5Nzg3OQ==", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r441997879", "body": "Pleae change method name to: \"createInstanceOfClass\" - becasue ou are creating only one instance of a class. ", "bodyText": "Pleae change method name to: \"createInstanceOfClass\" - becasue ou are creating only one instance of a class.", "bodyHTML": "<p dir=\"auto\">Pleae change method name to: \"createInstanceOfClass\" - becasue ou are creating only one instance of a class.</p>", "author": "LeoNerdoG", "createdAt": "2020-06-18T06:34:10Z", "path": "commons/src/test/java/org/eclipse/kapua/commons/event/HousekeeperRunTest.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+import java.text.DateFormat;\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+\n+@Category(JUnitTests.class)\n+public class HousekeeperRunTest extends Assert {\n+\n+    DateFormat format = new SimpleDateFormat(\"dd/MM/yyyy\");\n+    Date date;\n+    {\n+        try {\n+            date = format.parse(\"29/5/2020\");\n+        } catch (ParseException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    HousekeeperRun houseKeeper;\n+\n+    @Before\n+    public void createInstanceOfClasses() {", "originalCommit": "d4f078b1dfb83c13e0b22edcd137f0948dec1727", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk5ODA5Mg==", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r441998092", "body": "Please rename variable to \"\"houseKeeperRun\". ", "bodyText": "Please rename variable to \"\"houseKeeperRun\".", "bodyHTML": "<p dir=\"auto\">Please rename variable to \"\"houseKeeperRun\".</p>", "author": "LeoNerdoG", "createdAt": "2020-06-18T06:34:38Z", "path": "commons/src/test/java/org/eclipse/kapua/commons/event/HousekeeperRunTest.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+import java.text.DateFormat;\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+\n+@Category(JUnitTests.class)\n+public class HousekeeperRunTest extends Assert {\n+\n+    DateFormat format = new SimpleDateFormat(\"dd/MM/yyyy\");\n+    Date date;\n+    {\n+        try {\n+            date = format.parse(\"29/5/2020\");\n+        } catch (ParseException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    HousekeeperRun houseKeeper;", "originalCommit": "d4f078b1dfb83c13e0b22edcd137f0948dec1727", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk5ODExMA==", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r441998110", "body": "Please rename variable to \"\"houseKeeperRun\". ", "bodyText": "Please rename variable to \"\"houseKeeperRun\".", "bodyHTML": "<p dir=\"auto\">Please rename variable to \"\"houseKeeperRun\".</p>", "author": "LeoNerdoG", "createdAt": "2020-06-18T06:34:42Z", "path": "commons/src/test/java/org/eclipse/kapua/commons/event/HousekeeperRunTest.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+import java.text.DateFormat;\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+\n+@Category(JUnitTests.class)\n+public class HousekeeperRunTest extends Assert {\n+\n+    DateFormat format = new SimpleDateFormat(\"dd/MM/yyyy\");\n+    Date date;\n+    {\n+        try {\n+            date = format.parse(\"29/5/2020\");\n+        } catch (ParseException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    HousekeeperRun houseKeeper;\n+\n+    @Before\n+    public void createInstanceOfClasses() {\n+        houseKeeper = new HousekeeperRun();", "originalCommit": "d4f078b1dfb83c13e0b22edcd137f0948dec1727", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk5ODMzNg==", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r441998336", "body": "Please change the message to: \"Null expected\" or something similar. \"not_null\" is not a valid comment. ", "bodyText": "Please change the message to: \"Null expected\" or something similar. \"not_null\" is not a valid comment.", "bodyHTML": "<p dir=\"auto\">Please change the message to: \"Null expected\" or something similar. \"not_null\" is not a valid comment.</p>", "author": "LeoNerdoG", "createdAt": "2020-06-18T06:35:16Z", "path": "commons/src/test/java/org/eclipse/kapua/commons/event/HousekeeperRunTest.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+import java.text.DateFormat;\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+\n+@Category(JUnitTests.class)\n+public class HousekeeperRunTest extends Assert {\n+\n+    DateFormat format = new SimpleDateFormat(\"dd/MM/yyyy\");\n+    Date date;\n+    {\n+        try {\n+            date = format.parse(\"29/5/2020\");\n+        } catch (ParseException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    HousekeeperRun houseKeeper;\n+\n+    @Before\n+    public void createInstanceOfClasses() {\n+        houseKeeper = new HousekeeperRun();\n+    }\n+\n+    @Test\n+    public void setAndGetServiceNullTest() {\n+        houseKeeper.setService(null);\n+        assertNull(\"not_null\", houseKeeper.getService());", "originalCommit": "d4f078b1dfb83c13e0b22edcd137f0948dec1727", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk5ODY1NA==", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r441998654", "body": "Please change the message to \"Expected and actual values should be the same\" or something similar. \"not_equals\" is not a valid comment...", "bodyText": "Please change the message to \"Expected and actual values should be the same\" or something similar. \"not_equals\" is not a valid comment...", "bodyHTML": "<p dir=\"auto\">Please change the message to \"Expected and actual values should be the same\" or something similar. \"not_equals\" is not a valid comment...</p>", "author": "LeoNerdoG", "createdAt": "2020-06-18T06:36:04Z", "path": "commons/src/test/java/org/eclipse/kapua/commons/event/HousekeeperRunTest.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+import java.text.DateFormat;\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+\n+@Category(JUnitTests.class)\n+public class HousekeeperRunTest extends Assert {\n+\n+    DateFormat format = new SimpleDateFormat(\"dd/MM/yyyy\");\n+    Date date;\n+    {\n+        try {\n+            date = format.parse(\"29/5/2020\");\n+        } catch (ParseException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    HousekeeperRun houseKeeper;\n+\n+    @Before\n+    public void createInstanceOfClasses() {\n+        houseKeeper = new HousekeeperRun();\n+    }\n+\n+    @Test\n+    public void setAndGetServiceNullTest() {\n+        houseKeeper.setService(null);\n+        assertNull(\"not_null\", houseKeeper.getService());\n+    }\n+\n+    @Test\n+    public void setAndGetServiceTest() {\n+        String[] permittedValues = {\"\", \"!@#$%^^&**(-()_)+/|\", \"regularNaming\", \"regular Naming\", \"49\", \"regularNaming49\", \"NAMING\", \"246465494135646120009090049684646496468456468496846464968496844\"};\n+        for (String value : permittedValues) {\n+            houseKeeper.setService(value);\n+            assertEquals(\"not_equals\", value, houseKeeper.getService());", "originalCommit": "d4f078b1dfb83c13e0b22edcd137f0948dec1727", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk5ODk2OQ==", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r441998969", "body": "Please change the message to: \"Null expected\" or something similar. \"not_null\" is not a valid comment.", "bodyText": "Please change the message to: \"Null expected\" or something similar. \"not_null\" is not a valid comment.", "bodyHTML": "<p dir=\"auto\">Please change the message to: \"Null expected\" or something similar. \"not_null\" is not a valid comment.</p>", "author": "LeoNerdoG", "createdAt": "2020-06-18T06:36:58Z", "path": "commons/src/test/java/org/eclipse/kapua/commons/event/HousekeeperRunTest.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+import java.text.DateFormat;\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+\n+@Category(JUnitTests.class)\n+public class HousekeeperRunTest extends Assert {\n+\n+    DateFormat format = new SimpleDateFormat(\"dd/MM/yyyy\");\n+    Date date;\n+    {\n+        try {\n+            date = format.parse(\"29/5/2020\");\n+        } catch (ParseException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    HousekeeperRun houseKeeper;\n+\n+    @Before\n+    public void createInstanceOfClasses() {\n+        houseKeeper = new HousekeeperRun();\n+    }\n+\n+    @Test\n+    public void setAndGetServiceNullTest() {\n+        houseKeeper.setService(null);\n+        assertNull(\"not_null\", houseKeeper.getService());\n+    }\n+\n+    @Test\n+    public void setAndGetServiceTest() {\n+        String[] permittedValues = {\"\", \"!@#$%^^&**(-()_)+/|\", \"regularNaming\", \"regular Naming\", \"49\", \"regularNaming49\", \"NAMING\", \"246465494135646120009090049684646496468456468496846464968496844\"};\n+        for (String value : permittedValues) {\n+            houseKeeper.setService(value);\n+            assertEquals(\"not_equals\", value, houseKeeper.getService());\n+        }\n+    }\n+\n+    @Test\n+    public void setAndGetLastRunOnNullTest() {\n+        houseKeeper.setLastRunOn(null);\n+        assertNull(\"not_null\", houseKeeper.getLastRunOn());", "originalCommit": "d4f078b1dfb83c13e0b22edcd137f0948dec1727", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk5OTA5Ng==", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r441999096", "body": "Please change the message to: \"Null expected\" or something similar. \"not_null\" is not a valid comment.", "bodyText": "Please change the message to: \"Null expected\" or something similar. \"not_null\" is not a valid comment.", "bodyHTML": "<p dir=\"auto\">Please change the message to: \"Null expected\" or something similar. \"not_null\" is not a valid comment.</p>", "author": "LeoNerdoG", "createdAt": "2020-06-18T06:37:17Z", "path": "commons/src/test/java/org/eclipse/kapua/commons/event/HousekeeperRunTest.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+import java.text.DateFormat;\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+\n+@Category(JUnitTests.class)\n+public class HousekeeperRunTest extends Assert {\n+\n+    DateFormat format = new SimpleDateFormat(\"dd/MM/yyyy\");\n+    Date date;\n+    {\n+        try {\n+            date = format.parse(\"29/5/2020\");\n+        } catch (ParseException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    HousekeeperRun houseKeeper;\n+\n+    @Before\n+    public void createInstanceOfClasses() {\n+        houseKeeper = new HousekeeperRun();\n+    }\n+\n+    @Test\n+    public void setAndGetServiceNullTest() {\n+        houseKeeper.setService(null);\n+        assertNull(\"not_null\", houseKeeper.getService());\n+    }\n+\n+    @Test\n+    public void setAndGetServiceTest() {\n+        String[] permittedValues = {\"\", \"!@#$%^^&**(-()_)+/|\", \"regularNaming\", \"regular Naming\", \"49\", \"regularNaming49\", \"NAMING\", \"246465494135646120009090049684646496468456468496846464968496844\"};\n+        for (String value : permittedValues) {\n+            houseKeeper.setService(value);\n+            assertEquals(\"not_equals\", value, houseKeeper.getService());\n+        }\n+    }\n+\n+    @Test\n+    public void setAndGetLastRunOnNullTest() {\n+        houseKeeper.setLastRunOn(null);\n+        assertNull(\"not_null\", houseKeeper.getLastRunOn());\n+    }\n+\n+    @Test\n+    public void setAndGetLastRunOnTest() {\n+        houseKeeper.setLastRunOn(date);\n+        assertEquals(\"not_matching\", houseKeeper.getLastRunOn(), date);\n+    }\n+\n+    @Test\n+    public void setAndGetLastRunByNullTest() {\n+        houseKeeper.setLastRunBy(null);\n+        assertNull(\"not_null\", houseKeeper.getLastRunBy());", "originalCommit": "d4f078b1dfb83c13e0b22edcd137f0948dec1727", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk5OTE3NQ==", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r441999175", "body": "Please change the message to \"Expected and actual values should be the same\" or something similar. \"not_matching\" is not a valid comment...", "bodyText": "Please change the message to \"Expected and actual values should be the same\" or something similar. \"not_matching\" is not a valid comment...", "bodyHTML": "<p dir=\"auto\">Please change the message to \"Expected and actual values should be the same\" or something similar. \"not_matching\" is not a valid comment...</p>", "author": "LeoNerdoG", "createdAt": "2020-06-18T06:37:32Z", "path": "commons/src/test/java/org/eclipse/kapua/commons/event/HousekeeperRunTest.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+import java.text.DateFormat;\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+\n+@Category(JUnitTests.class)\n+public class HousekeeperRunTest extends Assert {\n+\n+    DateFormat format = new SimpleDateFormat(\"dd/MM/yyyy\");\n+    Date date;\n+    {\n+        try {\n+            date = format.parse(\"29/5/2020\");\n+        } catch (ParseException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    HousekeeperRun houseKeeper;\n+\n+    @Before\n+    public void createInstanceOfClasses() {\n+        houseKeeper = new HousekeeperRun();\n+    }\n+\n+    @Test\n+    public void setAndGetServiceNullTest() {\n+        houseKeeper.setService(null);\n+        assertNull(\"not_null\", houseKeeper.getService());\n+    }\n+\n+    @Test\n+    public void setAndGetServiceTest() {\n+        String[] permittedValues = {\"\", \"!@#$%^^&**(-()_)+/|\", \"regularNaming\", \"regular Naming\", \"49\", \"regularNaming49\", \"NAMING\", \"246465494135646120009090049684646496468456468496846464968496844\"};\n+        for (String value : permittedValues) {\n+            houseKeeper.setService(value);\n+            assertEquals(\"not_equals\", value, houseKeeper.getService());\n+        }\n+    }\n+\n+    @Test\n+    public void setAndGetLastRunOnNullTest() {\n+        houseKeeper.setLastRunOn(null);\n+        assertNull(\"not_null\", houseKeeper.getLastRunOn());\n+    }\n+\n+    @Test\n+    public void setAndGetLastRunOnTest() {\n+        houseKeeper.setLastRunOn(date);\n+        assertEquals(\"not_matching\", houseKeeper.getLastRunOn(), date);", "originalCommit": "d4f078b1dfb83c13e0b22edcd137f0948dec1727", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjAwMDI2Mg==", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r442000262", "body": "This is only one format for a date. \r\nPlease add additional ones (e.g. dd-mm-yyyy, yyyy-mm-dd,...), see: https://docs.oracle.com/javase/8/docs/api/java/util/Date.html", "bodyText": "This is only one format for a date.\nPlease add additional ones (e.g. dd-mm-yyyy, yyyy-mm-dd,...), see: https://docs.oracle.com/javase/8/docs/api/java/util/Date.html", "bodyHTML": "<p dir=\"auto\">This is only one format for a date.<br>\nPlease add additional ones (e.g. dd-mm-yyyy, yyyy-mm-dd,...), see: <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/Date.html\" rel=\"nofollow\">https://docs.oracle.com/javase/8/docs/api/java/util/Date.html</a></p>", "author": "LeoNerdoG", "createdAt": "2020-06-18T06:40:22Z", "path": "commons/src/test/java/org/eclipse/kapua/commons/event/HousekeeperRunTest.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+import java.text.DateFormat;\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+\n+@Category(JUnitTests.class)\n+public class HousekeeperRunTest extends Assert {\n+\n+    DateFormat format = new SimpleDateFormat(\"dd/MM/yyyy\");\n+    Date date;\n+    {\n+        try {\n+            date = format.parse(\"29/5/2020\");", "originalCommit": "d4f078b1dfb83c13e0b22edcd137f0948dec1727", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjAwMDQ4NQ==", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r442000485", "body": "See comment above, please use additional date formats. ", "bodyText": "See comment above, please use additional date formats.", "bodyHTML": "<p dir=\"auto\">See comment above, please use additional date formats.</p>", "author": "LeoNerdoG", "createdAt": "2020-06-18T06:40:57Z", "path": "commons/src/test/java/org/eclipse/kapua/commons/event/HousekeeperRunTest.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+import java.text.DateFormat;\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+\n+@Category(JUnitTests.class)\n+public class HousekeeperRunTest extends Assert {\n+\n+    DateFormat format = new SimpleDateFormat(\"dd/MM/yyyy\");\n+    Date date;\n+    {\n+        try {\n+            date = format.parse(\"29/5/2020\");\n+        } catch (ParseException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    HousekeeperRun houseKeeper;\n+\n+    @Before\n+    public void createInstanceOfClasses() {\n+        houseKeeper = new HousekeeperRun();\n+    }\n+\n+    @Test\n+    public void setAndGetServiceNullTest() {\n+        houseKeeper.setService(null);\n+        assertNull(\"not_null\", houseKeeper.getService());\n+    }\n+\n+    @Test\n+    public void setAndGetServiceTest() {\n+        String[] permittedValues = {\"\", \"!@#$%^^&**(-()_)+/|\", \"regularNaming\", \"regular Naming\", \"49\", \"regularNaming49\", \"NAMING\", \"246465494135646120009090049684646496468456468496846464968496844\"};\n+        for (String value : permittedValues) {\n+            houseKeeper.setService(value);\n+            assertEquals(\"not_equals\", value, houseKeeper.getService());\n+        }\n+    }\n+\n+    @Test\n+    public void setAndGetLastRunOnNullTest() {\n+        houseKeeper.setLastRunOn(null);\n+        assertNull(\"not_null\", houseKeeper.getLastRunOn());\n+    }\n+\n+    @Test\n+    public void setAndGetLastRunOnTest() {\n+        houseKeeper.setLastRunOn(date);", "originalCommit": "d4f078b1dfb83c13e0b22edcd137f0948dec1727", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjAwMDc2MA==", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r442000760", "body": "Please change the message to: \"Null expected\" or something similar. \"not_null\" is not a valid comment.", "bodyText": "Please change the message to: \"Null expected\" or something similar. \"not_null\" is not a valid comment.", "bodyHTML": "<p dir=\"auto\">Please change the message to: \"Null expected\" or something similar. \"not_null\" is not a valid comment.</p>", "author": "LeoNerdoG", "createdAt": "2020-06-18T06:41:36Z", "path": "commons/src/test/java/org/eclipse/kapua/commons/event/HousekeeperRunTest.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+import java.text.DateFormat;\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+\n+@Category(JUnitTests.class)\n+public class HousekeeperRunTest extends Assert {\n+\n+    DateFormat format = new SimpleDateFormat(\"dd/MM/yyyy\");\n+    Date date;\n+    {\n+        try {\n+            date = format.parse(\"29/5/2020\");\n+        } catch (ParseException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    HousekeeperRun houseKeeper;\n+\n+    @Before\n+    public void createInstanceOfClasses() {\n+        houseKeeper = new HousekeeperRun();\n+    }\n+\n+    @Test\n+    public void setAndGetServiceNullTest() {\n+        houseKeeper.setService(null);\n+        assertNull(\"not_null\", houseKeeper.getService());\n+    }\n+\n+    @Test\n+    public void setAndGetServiceTest() {\n+        String[] permittedValues = {\"\", \"!@#$%^^&**(-()_)+/|\", \"regularNaming\", \"regular Naming\", \"49\", \"regularNaming49\", \"NAMING\", \"246465494135646120009090049684646496468456468496846464968496844\"};\n+        for (String value : permittedValues) {\n+            houseKeeper.setService(value);\n+            assertEquals(\"not_equals\", value, houseKeeper.getService());\n+        }\n+    }\n+\n+    @Test\n+    public void setAndGetLastRunOnNullTest() {\n+        houseKeeper.setLastRunOn(null);\n+        assertNull(\"not_null\", houseKeeper.getLastRunOn());\n+    }\n+\n+    @Test\n+    public void setAndGetLastRunOnTest() {\n+        houseKeeper.setLastRunOn(date);\n+        assertEquals(\"not_matching\", houseKeeper.getLastRunOn(), date);\n+    }\n+\n+    @Test\n+    public void setAndGetLastRunByNullTest() {\n+        houseKeeper.setLastRunBy(null);\n+        assertNull(\"not_null\", houseKeeper.getLastRunBy());\n+    }\n+\n+    @Test\n+    public void setAndGetLastRunByTest() {\n+        String[] permittedValues = {\"\", \"!@#$%^^&**(-()_)+/|\", \"regularNaming\", \"regular Naming\", \"49\", \"regularNaming49\", \"NAMING\", \"246465494135646120009090049684646496468456468496846464968496844\"};\n+        for (String value : permittedValues) {\n+            houseKeeper.setLastRunBy(value);\n+            assertEquals(\"not_equals\", value, houseKeeper.getLastRunBy());\n+        }\n+    }\n+\n+    @Test\n+    public void setAndGetVersionNullTest() {\n+        houseKeeper.setVersion(null);\n+        assertNull(\"not_null\", houseKeeper.getVersion());", "originalCommit": "d4f078b1dfb83c13e0b22edcd137f0948dec1727", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjAwMDgyNA==", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r442000824", "body": "Please change the message to \"Expected and actual values should be the same\" or something similar. \"not_equals\" is not a valid comment...", "bodyText": "Please change the message to \"Expected and actual values should be the same\" or something similar. \"not_equals\" is not a valid comment...", "bodyHTML": "<p dir=\"auto\">Please change the message to \"Expected and actual values should be the same\" or something similar. \"not_equals\" is not a valid comment...</p>", "author": "LeoNerdoG", "createdAt": "2020-06-18T06:41:49Z", "path": "commons/src/test/java/org/eclipse/kapua/commons/event/HousekeeperRunTest.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+import java.text.DateFormat;\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+\n+@Category(JUnitTests.class)\n+public class HousekeeperRunTest extends Assert {\n+\n+    DateFormat format = new SimpleDateFormat(\"dd/MM/yyyy\");\n+    Date date;\n+    {\n+        try {\n+            date = format.parse(\"29/5/2020\");\n+        } catch (ParseException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    HousekeeperRun houseKeeper;\n+\n+    @Before\n+    public void createInstanceOfClasses() {\n+        houseKeeper = new HousekeeperRun();\n+    }\n+\n+    @Test\n+    public void setAndGetServiceNullTest() {\n+        houseKeeper.setService(null);\n+        assertNull(\"not_null\", houseKeeper.getService());\n+    }\n+\n+    @Test\n+    public void setAndGetServiceTest() {\n+        String[] permittedValues = {\"\", \"!@#$%^^&**(-()_)+/|\", \"regularNaming\", \"regular Naming\", \"49\", \"regularNaming49\", \"NAMING\", \"246465494135646120009090049684646496468456468496846464968496844\"};\n+        for (String value : permittedValues) {\n+            houseKeeper.setService(value);\n+            assertEquals(\"not_equals\", value, houseKeeper.getService());\n+        }\n+    }\n+\n+    @Test\n+    public void setAndGetLastRunOnNullTest() {\n+        houseKeeper.setLastRunOn(null);\n+        assertNull(\"not_null\", houseKeeper.getLastRunOn());\n+    }\n+\n+    @Test\n+    public void setAndGetLastRunOnTest() {\n+        houseKeeper.setLastRunOn(date);\n+        assertEquals(\"not_matching\", houseKeeper.getLastRunOn(), date);\n+    }\n+\n+    @Test\n+    public void setAndGetLastRunByNullTest() {\n+        houseKeeper.setLastRunBy(null);\n+        assertNull(\"not_null\", houseKeeper.getLastRunBy());\n+    }\n+\n+    @Test\n+    public void setAndGetLastRunByTest() {\n+        String[] permittedValues = {\"\", \"!@#$%^^&**(-()_)+/|\", \"regularNaming\", \"regular Naming\", \"49\", \"regularNaming49\", \"NAMING\", \"246465494135646120009090049684646496468456468496846464968496844\"};\n+        for (String value : permittedValues) {\n+            houseKeeper.setLastRunBy(value);\n+            assertEquals(\"not_equals\", value, houseKeeper.getLastRunBy());", "originalCommit": "d4f078b1dfb83c13e0b22edcd137f0948dec1727", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjAwMTA2MQ==", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r442001061", "body": "In second entry, there are double same symbols and some are not included. Please change to: \"!\"#$%&'()=?\u2044@\u2039\u203a\u20ac\u00b0\u00b7\u201a,.-;:_\u00c8\u02c7\u00bf<>\u00ab\u2018\u201d\u2019\u00c9\u00d8\u220f{}|\u00c6\u00e6\u00d2\uf8ff\u00d4\u00d3\u00cc\u00cf\u00ce\u00c5\u00ab\u00bb\u00c7\u25ca\u00d1\u02c6\u00af\u00c8\u02c7\" - try to include as much as special symbols as possible.", "bodyText": "In second entry, there are double same symbols and some are not included. Please change to: \"!\"#$%&'()=?\u2044@\u2039\u203a\u20ac\u00b0\u00b7\u201a,.-;:_\u00c8\u02c7\u00bf<>\u00ab\u2018\u201d\u2019\u00c9\u00d8\u220f{}|\u00c6\u00e6\u00d2\uf8ff\u00d4\u00d3\u00cc\u00cf\u00ce\u00c5\u00ab\u00bb\u00c7\u25ca\u00d1\u02c6\u00af\u00c8\u02c7\" - try to include as much as special symbols as possible.", "bodyHTML": "<p dir=\"auto\">In second entry, there are double same symbols and some are not included. Please change to: \"!\"#$%&amp;'()=?\u2044@\u2039\u203a\u20ac\u00b0\u00b7\u201a,.-;:_\u00c8\u02c7\u00bf&lt;&gt;\u00ab\u2018\u201d\u2019\u00c9\u00d8\u220f{}|\u00c6\u00e6\u00d2\uf8ff\u00d4\u00d3\u00cc\u00cf\u00ce\u00c5\u00ab\u00bb\u00c7\u25ca\u00d1\u02c6\u00af\u00c8\u02c7\" - try to include as much as special symbols as possible.</p>", "author": "LeoNerdoG", "createdAt": "2020-06-18T06:42:22Z", "path": "commons/src/test/java/org/eclipse/kapua/commons/event/HousekeeperRunTest.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+import java.text.DateFormat;\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+\n+@Category(JUnitTests.class)\n+public class HousekeeperRunTest extends Assert {\n+\n+    DateFormat format = new SimpleDateFormat(\"dd/MM/yyyy\");\n+    Date date;\n+    {\n+        try {\n+            date = format.parse(\"29/5/2020\");\n+        } catch (ParseException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    HousekeeperRun houseKeeper;\n+\n+    @Before\n+    public void createInstanceOfClasses() {\n+        houseKeeper = new HousekeeperRun();\n+    }\n+\n+    @Test\n+    public void setAndGetServiceNullTest() {\n+        houseKeeper.setService(null);\n+        assertNull(\"not_null\", houseKeeper.getService());\n+    }\n+\n+    @Test\n+    public void setAndGetServiceTest() {\n+        String[] permittedValues = {\"\", \"!@#$%^^&**(-()_)+/|\", \"regularNaming\", \"regular Naming\", \"49\", \"regularNaming49\", \"NAMING\", \"246465494135646120009090049684646496468456468496846464968496844\"};\n+        for (String value : permittedValues) {\n+            houseKeeper.setService(value);\n+            assertEquals(\"not_equals\", value, houseKeeper.getService());\n+        }\n+    }\n+\n+    @Test\n+    public void setAndGetLastRunOnNullTest() {\n+        houseKeeper.setLastRunOn(null);\n+        assertNull(\"not_null\", houseKeeper.getLastRunOn());\n+    }\n+\n+    @Test\n+    public void setAndGetLastRunOnTest() {\n+        houseKeeper.setLastRunOn(date);\n+        assertEquals(\"not_matching\", houseKeeper.getLastRunOn(), date);\n+    }\n+\n+    @Test\n+    public void setAndGetLastRunByNullTest() {\n+        houseKeeper.setLastRunBy(null);\n+        assertNull(\"not_null\", houseKeeper.getLastRunBy());\n+    }\n+\n+    @Test\n+    public void setAndGetLastRunByTest() {\n+        String[] permittedValues = {\"\", \"!@#$%^^&**(-()_)+/|\", \"regularNaming\", \"regular Naming\", \"49\", \"regularNaming49\", \"NAMING\", \"246465494135646120009090049684646496468456468496846464968496844\"};", "originalCommit": "d4f078b1dfb83c13e0b22edcd137f0948dec1727", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjAwMTQxMA==", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r442001410", "body": "Please change the message to \"Expected and actual values should be the same\" or something similar. \"does_not_contain\"\" is not a valid comment...", "bodyText": "Please change the message to \"Expected and actual values should be the same\" or something similar. \"does_not_contain\"\" is not a valid comment...", "bodyHTML": "<p dir=\"auto\">Please change the message to \"Expected and actual values should be the same\" or something similar. \"does_not_contain\"\" is not a valid comment...</p>", "author": "LeoNerdoG", "createdAt": "2020-06-18T06:43:18Z", "path": "commons/src/test/java/org/eclipse/kapua/commons/event/HousekeeperRunTest.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+import java.text.DateFormat;\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+\n+@Category(JUnitTests.class)\n+public class HousekeeperRunTest extends Assert {\n+\n+    DateFormat format = new SimpleDateFormat(\"dd/MM/yyyy\");\n+    Date date;\n+    {\n+        try {\n+            date = format.parse(\"29/5/2020\");\n+        } catch (ParseException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    HousekeeperRun houseKeeper;\n+\n+    @Before\n+    public void createInstanceOfClasses() {\n+        houseKeeper = new HousekeeperRun();\n+    }\n+\n+    @Test\n+    public void setAndGetServiceNullTest() {\n+        houseKeeper.setService(null);\n+        assertNull(\"not_null\", houseKeeper.getService());\n+    }\n+\n+    @Test\n+    public void setAndGetServiceTest() {\n+        String[] permittedValues = {\"\", \"!@#$%^^&**(-()_)+/|\", \"regularNaming\", \"regular Naming\", \"49\", \"regularNaming49\", \"NAMING\", \"246465494135646120009090049684646496468456468496846464968496844\"};\n+        for (String value : permittedValues) {\n+            houseKeeper.setService(value);\n+            assertEquals(\"not_equals\", value, houseKeeper.getService());\n+        }\n+    }\n+\n+    @Test\n+    public void setAndGetLastRunOnNullTest() {\n+        houseKeeper.setLastRunOn(null);\n+        assertNull(\"not_null\", houseKeeper.getLastRunOn());\n+    }\n+\n+    @Test\n+    public void setAndGetLastRunOnTest() {\n+        houseKeeper.setLastRunOn(date);\n+        assertEquals(\"not_matching\", houseKeeper.getLastRunOn(), date);\n+    }\n+\n+    @Test\n+    public void setAndGetLastRunByNullTest() {\n+        houseKeeper.setLastRunBy(null);\n+        assertNull(\"not_null\", houseKeeper.getLastRunBy());\n+    }\n+\n+    @Test\n+    public void setAndGetLastRunByTest() {\n+        String[] permittedValues = {\"\", \"!@#$%^^&**(-()_)+/|\", \"regularNaming\", \"regular Naming\", \"49\", \"regularNaming49\", \"NAMING\", \"246465494135646120009090049684646496468456468496846464968496844\"};\n+        for (String value : permittedValues) {\n+            houseKeeper.setLastRunBy(value);\n+            assertEquals(\"not_equals\", value, houseKeeper.getLastRunBy());\n+        }\n+    }\n+\n+    @Test\n+    public void setAndGetVersionNullTest() {\n+        houseKeeper.setVersion(null);\n+        assertNull(\"not_null\", houseKeeper.getVersion());\n+    }\n+\n+    @Test\n+    public void setAndGetVersionRegularValuesTest() {\n+        Long[] permittedValues = {-9223372036854775808L, 9223372036854775807L, 12345678910L, 1234L, 88928L, 1L};\n+        for(Long value : permittedValues) {\n+            houseKeeper.setVersion(value);\n+            assertEquals(\"does_not_contain\", value, houseKeeper.getVersion());", "originalCommit": "d4f078b1dfb83c13e0b22edcd137f0948dec1727", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjAwMTk4Mg==", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r442001982", "body": "Please stick to you naming convention. \r\nIf you have: \"setAndGetLastRunByNullTest\" and \"setAndGetLastRunByTest\" above, then you should name this test \"setAndGetVersionTest\". Exclude the word \"regularVersion\". ", "bodyText": "Please stick to you naming convention.\nIf you have: \"setAndGetLastRunByNullTest\" and \"setAndGetLastRunByTest\" above, then you should name this test \"setAndGetVersionTest\". Exclude the word \"regularVersion\".", "bodyHTML": "<p dir=\"auto\">Please stick to you naming convention.<br>\nIf you have: \"setAndGetLastRunByNullTest\" and \"setAndGetLastRunByTest\" above, then you should name this test \"setAndGetVersionTest\". Exclude the word \"regularVersion\".</p>", "author": "LeoNerdoG", "createdAt": "2020-06-18T06:44:51Z", "path": "commons/src/test/java/org/eclipse/kapua/commons/event/HousekeeperRunTest.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+import java.text.DateFormat;\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+\n+@Category(JUnitTests.class)\n+public class HousekeeperRunTest extends Assert {\n+\n+    DateFormat format = new SimpleDateFormat(\"dd/MM/yyyy\");\n+    Date date;\n+    {\n+        try {\n+            date = format.parse(\"29/5/2020\");\n+        } catch (ParseException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    HousekeeperRun houseKeeper;\n+\n+    @Before\n+    public void createInstanceOfClasses() {\n+        houseKeeper = new HousekeeperRun();\n+    }\n+\n+    @Test\n+    public void setAndGetServiceNullTest() {\n+        houseKeeper.setService(null);\n+        assertNull(\"not_null\", houseKeeper.getService());\n+    }\n+\n+    @Test\n+    public void setAndGetServiceTest() {\n+        String[] permittedValues = {\"\", \"!@#$%^^&**(-()_)+/|\", \"regularNaming\", \"regular Naming\", \"49\", \"regularNaming49\", \"NAMING\", \"246465494135646120009090049684646496468456468496846464968496844\"};\n+        for (String value : permittedValues) {\n+            houseKeeper.setService(value);\n+            assertEquals(\"not_equals\", value, houseKeeper.getService());\n+        }\n+    }\n+\n+    @Test\n+    public void setAndGetLastRunOnNullTest() {\n+        houseKeeper.setLastRunOn(null);\n+        assertNull(\"not_null\", houseKeeper.getLastRunOn());\n+    }\n+\n+    @Test\n+    public void setAndGetLastRunOnTest() {\n+        houseKeeper.setLastRunOn(date);\n+        assertEquals(\"not_matching\", houseKeeper.getLastRunOn(), date);\n+    }\n+\n+    @Test\n+    public void setAndGetLastRunByNullTest() {\n+        houseKeeper.setLastRunBy(null);\n+        assertNull(\"not_null\", houseKeeper.getLastRunBy());\n+    }\n+\n+    @Test\n+    public void setAndGetLastRunByTest() {\n+        String[] permittedValues = {\"\", \"!@#$%^^&**(-()_)+/|\", \"regularNaming\", \"regular Naming\", \"49\", \"regularNaming49\", \"NAMING\", \"246465494135646120009090049684646496468456468496846464968496844\"};\n+        for (String value : permittedValues) {\n+            houseKeeper.setLastRunBy(value);\n+            assertEquals(\"not_equals\", value, houseKeeper.getLastRunBy());\n+        }\n+    }\n+\n+    @Test\n+    public void setAndGetVersionNullTest() {\n+        houseKeeper.setVersion(null);\n+        assertNull(\"not_null\", houseKeeper.getVersion());\n+    }\n+\n+    @Test\n+    public void setAndGetVersionRegularValuesTest() {", "originalCommit": "d4f078b1dfb83c13e0b22edcd137f0948dec1727", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjAwMzAzNg==", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r442003036", "body": "Please change method name to \"createInstanceOfClass\", becasue you are creating only one instance of a class. ", "bodyText": "Please change method name to \"createInstanceOfClass\", becasue you are creating only one instance of a class.", "bodyHTML": "<p dir=\"auto\">Please change method name to \"createInstanceOfClass\", becasue you are creating only one instance of a class.</p>", "author": "LeoNerdoG", "createdAt": "2020-06-18T06:47:24Z", "path": "commons/src/test/java/org/eclipse/kapua/commons/event/RaiseServiceEventInterceptorTest.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import com.codahale.metrics.Counter;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.Field;\n+\n+@Category(JUnitTests.class)\n+public class RaiseServiceEventInterceptorTest extends Assert {\n+\n+    @Before\n+    public void createInstanceOfClasses() {", "originalCommit": "d4f078b1dfb83c13e0b22edcd137f0948dec1727", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgwMjY5Mw==", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r442802693", "body": "Please change the message to: \"Expected and Actual values not equal\" or something similar. \"not_equal\" is not a valid comment.", "bodyText": "Please change the message to: \"Expected and Actual values not equal\" or something similar. \"not_equal\" is not a valid comment.", "bodyHTML": "<p dir=\"auto\">Please change the message to: \"Expected and Actual values not equal\" or something similar. \"not_equal\" is not a valid comment.</p>", "author": "LeoNerdoG", "createdAt": "2020-06-19T12:08:41Z", "path": "commons/src/test/java/org/eclipse/kapua/commons/event/ServiceEntryTest.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category(JUnitTests.class)\n+public class ServiceEntryTest extends Assert {\n+\n+    @Test\n+    public void constructorRegularTest() throws Exception {\n+        ServiceEntry serviceEntry = new ServiceEntry(\"serviceName\", \"serviceAddress\");\n+        assertEquals(\"not_equals\", \"serviceName\", serviceEntry.getServiceName());", "originalCommit": "d4f078b1dfb83c13e0b22edcd137f0948dec1727", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgwMjcwNw==", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r442802707", "body": "Please change the message to: \"Expected and Actual values not equal\" or something similar. \"not_equal\" is not a valid comment.", "bodyText": "Please change the message to: \"Expected and Actual values not equal\" or something similar. \"not_equal\" is not a valid comment.", "bodyHTML": "<p dir=\"auto\">Please change the message to: \"Expected and Actual values not equal\" or something similar. \"not_equal\" is not a valid comment.</p>", "author": "LeoNerdoG", "createdAt": "2020-06-19T12:08:45Z", "path": "commons/src/test/java/org/eclipse/kapua/commons/event/ServiceEntryTest.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category(JUnitTests.class)\n+public class ServiceEntryTest extends Assert {\n+\n+    @Test\n+    public void constructorRegularTest() throws Exception {\n+        ServiceEntry serviceEntry = new ServiceEntry(\"serviceName\", \"serviceAddress\");\n+        assertEquals(\"not_equals\", \"serviceName\", serviceEntry.getServiceName());\n+        assertEquals(\"not_equals\", \"serviceAddress\", serviceEntry.getAddress());", "originalCommit": "d4f078b1dfb83c13e0b22edcd137f0948dec1727", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgxMjMxMQ==", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r442812311", "body": "Please change the message to: \"Expected value should not be null\" or something similar. \"not_null\" is not a valid comment.", "bodyText": "Please change the message to: \"Expected value should not be null\" or something similar. \"not_null\" is not a valid comment.", "bodyHTML": "<p dir=\"auto\">Please change the message to: \"Expected value should not be null\" or something similar. \"not_null\" is not a valid comment.</p>", "author": "LeoNerdoG", "createdAt": "2020-06-19T12:31:03Z", "path": "commons/src/test/java/org/eclipse/kapua/commons/event/ServiceEntryTest.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category(JUnitTests.class)\n+public class ServiceEntryTest extends Assert {\n+\n+    @Test\n+    public void constructorRegularTest() throws Exception {\n+        ServiceEntry serviceEntry = new ServiceEntry(\"serviceName\", \"serviceAddress\");\n+        assertEquals(\"not_equals\", \"serviceName\", serviceEntry.getServiceName());\n+        assertEquals(\"not_equals\", \"serviceAddress\", serviceEntry.getAddress());\n+    }\n+\n+    @Test\n+    public void constructorNullTest() throws Exception {\n+        ServiceEntry serviceEntry = new ServiceEntry(null, null);\n+        assertNull(\"not_null\", serviceEntry.getServiceName());", "originalCommit": "d4f078b1dfb83c13e0b22edcd137f0948dec1727", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgxMjM0Mw==", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r442812343", "body": "Please change the message to: \"Expected value should be null\" or something similar. \"not_null\" is not a valid comment.", "bodyText": "Please change the message to: \"Expected value should be null\" or something similar. \"not_null\" is not a valid comment.", "bodyHTML": "<p dir=\"auto\">Please change the message to: \"Expected value should be null\" or something similar. \"not_null\" is not a valid comment.</p>", "author": "LeoNerdoG", "createdAt": "2020-06-19T12:31:07Z", "path": "commons/src/test/java/org/eclipse/kapua/commons/event/ServiceEntryTest.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category(JUnitTests.class)\n+public class ServiceEntryTest extends Assert {\n+\n+    @Test\n+    public void constructorRegularTest() throws Exception {\n+        ServiceEntry serviceEntry = new ServiceEntry(\"serviceName\", \"serviceAddress\");\n+        assertEquals(\"not_equals\", \"serviceName\", serviceEntry.getServiceName());\n+        assertEquals(\"not_equals\", \"serviceAddress\", serviceEntry.getAddress());\n+    }\n+\n+    @Test\n+    public void constructorNullTest() throws Exception {\n+        ServiceEntry serviceEntry = new ServiceEntry(null, null);\n+        assertNull(\"not_null\", serviceEntry.getServiceName());\n+        assertNull(\"not_null\", serviceEntry.getAddress());", "originalCommit": "d4f078b1dfb83c13e0b22edcd137f0948dec1727", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgxMjM3OA==", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r442812378", "body": "Please change the message to: \"Expected value should be null\" or something similar. \"not_null\" is not a valid comment.", "bodyText": "Please change the message to: \"Expected value should be null\" or something similar. \"not_null\" is not a valid comment.", "bodyHTML": "<p dir=\"auto\">Please change the message to: \"Expected value should be null\" or something similar. \"not_null\" is not a valid comment.</p>", "author": "LeoNerdoG", "createdAt": "2020-06-19T12:31:11Z", "path": "commons/src/test/java/org/eclipse/kapua/commons/event/ServiceEntryTest.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category(JUnitTests.class)\n+public class ServiceEntryTest extends Assert {\n+\n+    @Test\n+    public void constructorRegularTest() throws Exception {\n+        ServiceEntry serviceEntry = new ServiceEntry(\"serviceName\", \"serviceAddress\");\n+        assertEquals(\"not_equals\", \"serviceName\", serviceEntry.getServiceName());\n+        assertEquals(\"not_equals\", \"serviceAddress\", serviceEntry.getAddress());\n+    }\n+\n+    @Test\n+    public void constructorNullTest() throws Exception {\n+        ServiceEntry serviceEntry = new ServiceEntry(null, null);\n+        assertNull(\"not_null\", serviceEntry.getServiceName());\n+        assertNull(\"not_null\", serviceEntry.getAddress());\n+    }\n+\n+    @Test\n+    public void constructorNameNullTest() throws Exception {\n+        ServiceEntry serviceEntry = new ServiceEntry(null, \"serviceAddress\");\n+        assertNull(\"not_null\", serviceEntry.getServiceName());", "originalCommit": "d4f078b1dfb83c13e0b22edcd137f0948dec1727", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgxMjYzNw==", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r442812637", "body": "Please change the message to: \"Expected and Actual values not equal\" or something similar. \"not_equals\" is not a valid comment.", "bodyText": "Please change the message to: \"Expected and Actual values not equal\" or something similar. \"not_equals\" is not a valid comment.", "bodyHTML": "<p dir=\"auto\">Please change the message to: \"Expected and Actual values not equal\" or something similar. \"not_equals\" is not a valid comment.</p>", "author": "LeoNerdoG", "createdAt": "2020-06-19T12:31:43Z", "path": "commons/src/test/java/org/eclipse/kapua/commons/event/ServiceEntryTest.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category(JUnitTests.class)\n+public class ServiceEntryTest extends Assert {\n+\n+    @Test\n+    public void constructorRegularTest() throws Exception {\n+        ServiceEntry serviceEntry = new ServiceEntry(\"serviceName\", \"serviceAddress\");\n+        assertEquals(\"not_equals\", \"serviceName\", serviceEntry.getServiceName());\n+        assertEquals(\"not_equals\", \"serviceAddress\", serviceEntry.getAddress());\n+    }\n+\n+    @Test\n+    public void constructorNullTest() throws Exception {\n+        ServiceEntry serviceEntry = new ServiceEntry(null, null);\n+        assertNull(\"not_null\", serviceEntry.getServiceName());\n+        assertNull(\"not_null\", serviceEntry.getAddress());\n+    }\n+\n+    @Test\n+    public void constructorNameNullTest() throws Exception {\n+        ServiceEntry serviceEntry = new ServiceEntry(null, \"serviceAddress\");\n+        assertNull(\"not_null\", serviceEntry.getServiceName());\n+        assertEquals(\"not_equals\", \"serviceAddress\", serviceEntry.getAddress());", "originalCommit": "d4f078b1dfb83c13e0b22edcd137f0948dec1727", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgxMjcyMw==", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r442812723", "body": "Please change the message to: \"Expected value should be null\" or something similar. \"not_null\" is not a valid comment.", "bodyText": "Please change the message to: \"Expected value should be null\" or something similar. \"not_null\" is not a valid comment.", "bodyHTML": "<p dir=\"auto\">Please change the message to: \"Expected value should be null\" or something similar. \"not_null\" is not a valid comment.</p>", "author": "LeoNerdoG", "createdAt": "2020-06-19T12:31:53Z", "path": "commons/src/test/java/org/eclipse/kapua/commons/event/ServiceEntryTest.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category(JUnitTests.class)\n+public class ServiceEntryTest extends Assert {\n+\n+    @Test\n+    public void constructorRegularTest() throws Exception {\n+        ServiceEntry serviceEntry = new ServiceEntry(\"serviceName\", \"serviceAddress\");\n+        assertEquals(\"not_equals\", \"serviceName\", serviceEntry.getServiceName());\n+        assertEquals(\"not_equals\", \"serviceAddress\", serviceEntry.getAddress());\n+    }\n+\n+    @Test\n+    public void constructorNullTest() throws Exception {\n+        ServiceEntry serviceEntry = new ServiceEntry(null, null);\n+        assertNull(\"not_null\", serviceEntry.getServiceName());\n+        assertNull(\"not_null\", serviceEntry.getAddress());\n+    }\n+\n+    @Test\n+    public void constructorNameNullTest() throws Exception {\n+        ServiceEntry serviceEntry = new ServiceEntry(null, \"serviceAddress\");\n+        assertNull(\"not_null\", serviceEntry.getServiceName());\n+        assertEquals(\"not_equals\", \"serviceAddress\", serviceEntry.getAddress());\n+    }\n+\n+    @Test\n+    public void constructorAddressNullTest() throws Exception {\n+        ServiceEntry serviceEntry = new ServiceEntry(\"serviceName\", null);\n+        assertEquals(\"not_equals\", \"serviceName\", serviceEntry.getServiceName());\n+        assertNull(\"not_null\", serviceEntry.getAddress());", "originalCommit": "d4f078b1dfb83c13e0b22edcd137f0948dec1727", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgxMjg2Mw==", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r442812863", "body": "Please change the message to: \"Expected and Actual values not equal\" or something similar. \"not_equals\" is not a valid comment.", "bodyText": "Please change the message to: \"Expected and Actual values not equal\" or something similar. \"not_equals\" is not a valid comment.", "bodyHTML": "<p dir=\"auto\">Please change the message to: \"Expected and Actual values not equal\" or something similar. \"not_equals\" is not a valid comment.</p>", "author": "LeoNerdoG", "createdAt": "2020-06-19T12:32:11Z", "path": "commons/src/test/java/org/eclipse/kapua/commons/event/ServiceEntryTest.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category(JUnitTests.class)\n+public class ServiceEntryTest extends Assert {\n+\n+    @Test\n+    public void constructorRegularTest() throws Exception {\n+        ServiceEntry serviceEntry = new ServiceEntry(\"serviceName\", \"serviceAddress\");\n+        assertEquals(\"not_equals\", \"serviceName\", serviceEntry.getServiceName());\n+        assertEquals(\"not_equals\", \"serviceAddress\", serviceEntry.getAddress());\n+    }\n+\n+    @Test\n+    public void constructorNullTest() throws Exception {\n+        ServiceEntry serviceEntry = new ServiceEntry(null, null);\n+        assertNull(\"not_null\", serviceEntry.getServiceName());\n+        assertNull(\"not_null\", serviceEntry.getAddress());\n+    }\n+\n+    @Test\n+    public void constructorNameNullTest() throws Exception {\n+        ServiceEntry serviceEntry = new ServiceEntry(null, \"serviceAddress\");\n+        assertNull(\"not_null\", serviceEntry.getServiceName());\n+        assertEquals(\"not_equals\", \"serviceAddress\", serviceEntry.getAddress());\n+    }\n+\n+    @Test\n+    public void constructorAddressNullTest() throws Exception {\n+        ServiceEntry serviceEntry = new ServiceEntry(\"serviceName\", null);\n+        assertEquals(\"not_equals\", \"serviceName\", serviceEntry.getServiceName());", "originalCommit": "d4f078b1dfb83c13e0b22edcd137f0948dec1727", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgzNzQxNg==", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r442837416", "body": "Please change the message to: \"Expected and Actual values not equal\" or something similar. \"not_equals\" is not a valid comment.", "bodyText": "Please change the message to: \"Expected and Actual values not equal\" or something similar. \"not_equals\" is not a valid comment.", "bodyHTML": "<p dir=\"auto\">Please change the message to: \"Expected and Actual values not equal\" or something similar. \"not_equals\" is not a valid comment.</p>", "author": "LeoNerdoG", "createdAt": "2020-06-19T13:22:39Z", "path": "commons/src/test/java/org/eclipse/kapua/commons/event/ServiceEventClientConfigurationTest.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.event.ServiceEventBusListener;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category(JUnitTests.class)\n+public class ServiceEventClientConfigurationTest extends Assert {\n+\n+    ServiceEventBusListener serviceEventBusListener;\n+\n+    @Test\n+    public void constructorRegularTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(\"address\", \"subscriberName\", serviceEventBusListener);\n+        assertEquals(\"not_equals\", \"address\", serviceEventClientConfiguration.getAddress());", "originalCommit": "d4f078b1dfb83c13e0b22edcd137f0948dec1727", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgzNzQ2MA==", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r442837460", "body": "Please change the message to: \"Expected and Actual values not equal\" or something similar. \"not_equals\" is not a valid comment.", "bodyText": "Please change the message to: \"Expected and Actual values not equal\" or something similar. \"not_equals\" is not a valid comment.", "bodyHTML": "<p dir=\"auto\">Please change the message to: \"Expected and Actual values not equal\" or something similar. \"not_equals\" is not a valid comment.</p>", "author": "LeoNerdoG", "createdAt": "2020-06-19T13:22:44Z", "path": "commons/src/test/java/org/eclipse/kapua/commons/event/ServiceEventClientConfigurationTest.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.event.ServiceEventBusListener;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category(JUnitTests.class)\n+public class ServiceEventClientConfigurationTest extends Assert {\n+\n+    ServiceEventBusListener serviceEventBusListener;\n+\n+    @Test\n+    public void constructorRegularTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(\"address\", \"subscriberName\", serviceEventBusListener);\n+        assertEquals(\"not_equals\", \"address\", serviceEventClientConfiguration.getAddress());\n+        assertEquals(\"not_equals\", \"subscriberName\", serviceEventClientConfiguration.getClientName());", "originalCommit": "d4f078b1dfb83c13e0b22edcd137f0948dec1727", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgzNzUxNA==", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r442837514", "body": "Please change the message to: \"Expected and Actual values not equal\" or something similar. \"not_equals\" is not a valid comment.", "bodyText": "Please change the message to: \"Expected and Actual values not equal\" or something similar. \"not_equals\" is not a valid comment.", "bodyHTML": "<p dir=\"auto\">Please change the message to: \"Expected and Actual values not equal\" or something similar. \"not_equals\" is not a valid comment.</p>", "author": "LeoNerdoG", "createdAt": "2020-06-19T13:22:51Z", "path": "commons/src/test/java/org/eclipse/kapua/commons/event/ServiceEventClientConfigurationTest.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.event.ServiceEventBusListener;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category(JUnitTests.class)\n+public class ServiceEventClientConfigurationTest extends Assert {\n+\n+    ServiceEventBusListener serviceEventBusListener;\n+\n+    @Test\n+    public void constructorRegularTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(\"address\", \"subscriberName\", serviceEventBusListener);\n+        assertEquals(\"not_equals\", \"address\", serviceEventClientConfiguration.getAddress());\n+        assertEquals(\"not_equals\", \"subscriberName\", serviceEventClientConfiguration.getClientName());\n+        assertEquals(\"not_equals\", serviceEventBusListener, serviceEventClientConfiguration.getEventListener());", "originalCommit": "d4f078b1dfb83c13e0b22edcd137f0948dec1727", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgzNzY3OA==", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r442837678", "body": "Please change the message to: \"Expected value should not be null\" or something similar. \"not_null\" is not a valid comment.", "bodyText": "Please change the message to: \"Expected value should not be null\" or something similar. \"not_null\" is not a valid comment.", "bodyHTML": "<p dir=\"auto\">Please change the message to: \"Expected value should not be null\" or something similar. \"not_null\" is not a valid comment.</p>", "author": "LeoNerdoG", "createdAt": "2020-06-19T13:23:09Z", "path": "commons/src/test/java/org/eclipse/kapua/commons/event/ServiceEventClientConfigurationTest.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.event.ServiceEventBusListener;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category(JUnitTests.class)\n+public class ServiceEventClientConfigurationTest extends Assert {\n+\n+    ServiceEventBusListener serviceEventBusListener;\n+\n+    @Test\n+    public void constructorRegularTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(\"address\", \"subscriberName\", serviceEventBusListener);\n+        assertEquals(\"not_equals\", \"address\", serviceEventClientConfiguration.getAddress());\n+        assertEquals(\"not_equals\", \"subscriberName\", serviceEventClientConfiguration.getClientName());\n+        assertEquals(\"not_equals\", serviceEventBusListener, serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(null , null, null);\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getAddress());", "originalCommit": "d4f078b1dfb83c13e0b22edcd137f0948dec1727", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgzNzcwOA==", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r442837708", "body": "Please change the message to: \"Expected value should not be null\" or something similar. \"not_null\" is not a valid comment.", "bodyText": "Please change the message to: \"Expected value should not be null\" or something similar. \"not_null\" is not a valid comment.", "bodyHTML": "<p dir=\"auto\">Please change the message to: \"Expected value should not be null\" or something similar. \"not_null\" is not a valid comment.</p>", "author": "LeoNerdoG", "createdAt": "2020-06-19T13:23:13Z", "path": "commons/src/test/java/org/eclipse/kapua/commons/event/ServiceEventClientConfigurationTest.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.event.ServiceEventBusListener;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category(JUnitTests.class)\n+public class ServiceEventClientConfigurationTest extends Assert {\n+\n+    ServiceEventBusListener serviceEventBusListener;\n+\n+    @Test\n+    public void constructorRegularTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(\"address\", \"subscriberName\", serviceEventBusListener);\n+        assertEquals(\"not_equals\", \"address\", serviceEventClientConfiguration.getAddress());\n+        assertEquals(\"not_equals\", \"subscriberName\", serviceEventClientConfiguration.getClientName());\n+        assertEquals(\"not_equals\", serviceEventBusListener, serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(null , null, null);\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getAddress());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getClientName());", "originalCommit": "d4f078b1dfb83c13e0b22edcd137f0948dec1727", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgzNzcyNQ==", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r442837725", "body": "Please change the message to: \"Expected value should not be null\" or something similar. \"not_null\" is not a valid comment.", "bodyText": "Please change the message to: \"Expected value should not be null\" or something similar. \"not_null\" is not a valid comment.", "bodyHTML": "<p dir=\"auto\">Please change the message to: \"Expected value should not be null\" or something similar. \"not_null\" is not a valid comment.</p>", "author": "LeoNerdoG", "createdAt": "2020-06-19T13:23:16Z", "path": "commons/src/test/java/org/eclipse/kapua/commons/event/ServiceEventClientConfigurationTest.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.event.ServiceEventBusListener;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category(JUnitTests.class)\n+public class ServiceEventClientConfigurationTest extends Assert {\n+\n+    ServiceEventBusListener serviceEventBusListener;\n+\n+    @Test\n+    public void constructorRegularTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(\"address\", \"subscriberName\", serviceEventBusListener);\n+        assertEquals(\"not_equals\", \"address\", serviceEventClientConfiguration.getAddress());\n+        assertEquals(\"not_equals\", \"subscriberName\", serviceEventClientConfiguration.getClientName());\n+        assertEquals(\"not_equals\", serviceEventBusListener, serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(null , null, null);\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getAddress());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getClientName());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getEventListener());", "originalCommit": "d4f078b1dfb83c13e0b22edcd137f0948dec1727", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgzODc0OA==", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r442838748", "body": "Please change the message to: \"Expected value should be null\" or something similar. \"not_null\" is not a valid comment.", "bodyText": "Please change the message to: \"Expected value should be null\" or something similar. \"not_null\" is not a valid comment.", "bodyHTML": "<p dir=\"auto\">Please change the message to: \"Expected value should be null\" or something similar. \"not_null\" is not a valid comment.</p>", "author": "LeoNerdoG", "createdAt": "2020-06-19T13:25:16Z", "path": "commons/src/test/java/org/eclipse/kapua/commons/event/ServiceEventClientConfigurationTest.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.event.ServiceEventBusListener;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category(JUnitTests.class)\n+public class ServiceEventClientConfigurationTest extends Assert {\n+\n+    ServiceEventBusListener serviceEventBusListener;\n+\n+    @Test\n+    public void constructorRegularTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(\"address\", \"subscriberName\", serviceEventBusListener);\n+        assertEquals(\"not_equals\", \"address\", serviceEventClientConfiguration.getAddress());\n+        assertEquals(\"not_equals\", \"subscriberName\", serviceEventClientConfiguration.getClientName());\n+        assertEquals(\"not_equals\", serviceEventBusListener, serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(null , null, null);\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getAddress());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getClientName());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorAddressNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(null , \"subscriberName\", serviceEventBusListener);\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getAddress());\n+        assertEquals(\"not_equals\", \"subscriberName\", serviceEventClientConfiguration.getClientName());\n+        assertEquals(\"not_equals\", serviceEventBusListener, serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorClientNameNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(\"address\", null, serviceEventBusListener);\n+        assertEquals(\"not_equals\", \"address\", serviceEventClientConfiguration.getAddress());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getClientName());\n+        assertEquals(\"not_equals\", serviceEventBusListener, serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorServiceEventNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(\"address\", \"subscriberName\", null);\n+        assertEquals(\"not_equals\", \"address\", serviceEventClientConfiguration.getAddress());\n+        assertEquals(\"not_equals\", \"subscriberName\", serviceEventClientConfiguration.getClientName());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getEventListener());", "originalCommit": "d4f078b1dfb83c13e0b22edcd137f0948dec1727", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgzODc1Mw==", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r442838753", "body": "Please change the message to: \"Expected value should be null\" or something similar. \"not_null\" is not a valid comment.", "bodyText": "Please change the message to: \"Expected value should be null\" or something similar. \"not_null\" is not a valid comment.", "bodyHTML": "<p dir=\"auto\">Please change the message to: \"Expected value should be null\" or something similar. \"not_null\" is not a valid comment.</p>", "author": "LeoNerdoG", "createdAt": "2020-06-19T13:25:16Z", "path": "commons/src/test/java/org/eclipse/kapua/commons/event/ServiceEventClientConfigurationTest.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.event.ServiceEventBusListener;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category(JUnitTests.class)\n+public class ServiceEventClientConfigurationTest extends Assert {\n+\n+    ServiceEventBusListener serviceEventBusListener;\n+\n+    @Test\n+    public void constructorRegularTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(\"address\", \"subscriberName\", serviceEventBusListener);\n+        assertEquals(\"not_equals\", \"address\", serviceEventClientConfiguration.getAddress());\n+        assertEquals(\"not_equals\", \"subscriberName\", serviceEventClientConfiguration.getClientName());\n+        assertEquals(\"not_equals\", serviceEventBusListener, serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(null , null, null);\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getAddress());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getClientName());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorAddressNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(null , \"subscriberName\", serviceEventBusListener);\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getAddress());\n+        assertEquals(\"not_equals\", \"subscriberName\", serviceEventClientConfiguration.getClientName());\n+        assertEquals(\"not_equals\", serviceEventBusListener, serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorClientNameNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(\"address\", null, serviceEventBusListener);\n+        assertEquals(\"not_equals\", \"address\", serviceEventClientConfiguration.getAddress());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getClientName());", "originalCommit": "d4f078b1dfb83c13e0b22edcd137f0948dec1727", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgzODc3MA==", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r442838770", "body": "Please change the message to: \"Expected value should be null\" or something similar. \"not_null\" is not a valid comment.", "bodyText": "Please change the message to: \"Expected value should be null\" or something similar. \"not_null\" is not a valid comment.", "bodyHTML": "<p dir=\"auto\">Please change the message to: \"Expected value should be null\" or something similar. \"not_null\" is not a valid comment.</p>", "author": "LeoNerdoG", "createdAt": "2020-06-19T13:25:18Z", "path": "commons/src/test/java/org/eclipse/kapua/commons/event/ServiceEventClientConfigurationTest.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.event.ServiceEventBusListener;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category(JUnitTests.class)\n+public class ServiceEventClientConfigurationTest extends Assert {\n+\n+    ServiceEventBusListener serviceEventBusListener;\n+\n+    @Test\n+    public void constructorRegularTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(\"address\", \"subscriberName\", serviceEventBusListener);\n+        assertEquals(\"not_equals\", \"address\", serviceEventClientConfiguration.getAddress());\n+        assertEquals(\"not_equals\", \"subscriberName\", serviceEventClientConfiguration.getClientName());\n+        assertEquals(\"not_equals\", serviceEventBusListener, serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(null , null, null);\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getAddress());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getClientName());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorAddressNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(null , \"subscriberName\", serviceEventBusListener);\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getAddress());", "originalCommit": "d4f078b1dfb83c13e0b22edcd137f0948dec1727", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgzODkwMQ==", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r442838901", "body": "Please change the message to: \"Expected value should be null\" or something similar. \"not_equals\" is not a valid comment.", "bodyText": "Please change the message to: \"Expected value should be null\" or something similar. \"not_equals\" is not a valid comment.", "bodyHTML": "<p dir=\"auto\">Please change the message to: \"Expected value should be null\" or something similar. \"not_equals\" is not a valid comment.</p>", "author": "LeoNerdoG", "createdAt": "2020-06-19T13:25:34Z", "path": "commons/src/test/java/org/eclipse/kapua/commons/event/ServiceEventClientConfigurationTest.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.event.ServiceEventBusListener;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category(JUnitTests.class)\n+public class ServiceEventClientConfigurationTest extends Assert {\n+\n+    ServiceEventBusListener serviceEventBusListener;\n+\n+    @Test\n+    public void constructorRegularTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(\"address\", \"subscriberName\", serviceEventBusListener);\n+        assertEquals(\"not_equals\", \"address\", serviceEventClientConfiguration.getAddress());\n+        assertEquals(\"not_equals\", \"subscriberName\", serviceEventClientConfiguration.getClientName());\n+        assertEquals(\"not_equals\", serviceEventBusListener, serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(null , null, null);\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getAddress());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getClientName());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorAddressNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(null , \"subscriberName\", serviceEventBusListener);\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getAddress());\n+        assertEquals(\"not_equals\", \"subscriberName\", serviceEventClientConfiguration.getClientName());\n+        assertEquals(\"not_equals\", serviceEventBusListener, serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorClientNameNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(\"address\", null, serviceEventBusListener);\n+        assertEquals(\"not_equals\", \"address\", serviceEventClientConfiguration.getAddress());", "originalCommit": "d4f078b1dfb83c13e0b22edcd137f0948dec1727", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgzOTY4MQ==", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r442839681", "body": "Please change the message to: \"Expected and actual values are not the same\" or something similar. \"not_equals\" is not a valid comment.", "bodyText": "Please change the message to: \"Expected and actual values are not the same\" or something similar. \"not_equals\" is not a valid comment.", "bodyHTML": "<p dir=\"auto\">Please change the message to: \"Expected and actual values are not the same\" or something similar. \"not_equals\" is not a valid comment.</p>", "author": "LeoNerdoG", "createdAt": "2020-06-19T13:27:09Z", "path": "commons/src/test/java/org/eclipse/kapua/commons/event/ServiceEventClientConfigurationTest.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.event.ServiceEventBusListener;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category(JUnitTests.class)\n+public class ServiceEventClientConfigurationTest extends Assert {\n+\n+    ServiceEventBusListener serviceEventBusListener;\n+\n+    @Test\n+    public void constructorRegularTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(\"address\", \"subscriberName\", serviceEventBusListener);\n+        assertEquals(\"not_equals\", \"address\", serviceEventClientConfiguration.getAddress());\n+        assertEquals(\"not_equals\", \"subscriberName\", serviceEventClientConfiguration.getClientName());\n+        assertEquals(\"not_equals\", serviceEventBusListener, serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(null , null, null);\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getAddress());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getClientName());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorAddressNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(null , \"subscriberName\", serviceEventBusListener);\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getAddress());\n+        assertEquals(\"not_equals\", \"subscriberName\", serviceEventClientConfiguration.getClientName());\n+        assertEquals(\"not_equals\", serviceEventBusListener, serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorClientNameNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(\"address\", null, serviceEventBusListener);\n+        assertEquals(\"not_equals\", \"address\", serviceEventClientConfiguration.getAddress());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getClientName());\n+        assertEquals(\"not_equals\", serviceEventBusListener, serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorServiceEventNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(\"address\", \"subscriberName\", null);\n+        assertEquals(\"not_equals\", \"address\", serviceEventClientConfiguration.getAddress());", "originalCommit": "d4f078b1dfb83c13e0b22edcd137f0948dec1727", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgzOTcyNQ==", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r442839725", "body": "Please change the message to: \"Expected and actual values are not the same\" or something similar. \"not_equals\" is not a valid comment.", "bodyText": "Please change the message to: \"Expected and actual values are not the same\" or something similar. \"not_equals\" is not a valid comment.", "bodyHTML": "<p dir=\"auto\">Please change the message to: \"Expected and actual values are not the same\" or something similar. \"not_equals\" is not a valid comment.</p>", "author": "LeoNerdoG", "createdAt": "2020-06-19T13:27:13Z", "path": "commons/src/test/java/org/eclipse/kapua/commons/event/ServiceEventClientConfigurationTest.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.event.ServiceEventBusListener;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category(JUnitTests.class)\n+public class ServiceEventClientConfigurationTest extends Assert {\n+\n+    ServiceEventBusListener serviceEventBusListener;\n+\n+    @Test\n+    public void constructorRegularTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(\"address\", \"subscriberName\", serviceEventBusListener);\n+        assertEquals(\"not_equals\", \"address\", serviceEventClientConfiguration.getAddress());\n+        assertEquals(\"not_equals\", \"subscriberName\", serviceEventClientConfiguration.getClientName());\n+        assertEquals(\"not_equals\", serviceEventBusListener, serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(null , null, null);\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getAddress());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getClientName());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorAddressNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(null , \"subscriberName\", serviceEventBusListener);\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getAddress());\n+        assertEquals(\"not_equals\", \"subscriberName\", serviceEventClientConfiguration.getClientName());\n+        assertEquals(\"not_equals\", serviceEventBusListener, serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorClientNameNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(\"address\", null, serviceEventBusListener);\n+        assertEquals(\"not_equals\", \"address\", serviceEventClientConfiguration.getAddress());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getClientName());\n+        assertEquals(\"not_equals\", serviceEventBusListener, serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorServiceEventNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(\"address\", \"subscriberName\", null);\n+        assertEquals(\"not_equals\", \"address\", serviceEventClientConfiguration.getAddress());\n+        assertEquals(\"not_equals\", \"subscriberName\", serviceEventClientConfiguration.getClientName());", "originalCommit": "d4f078b1dfb83c13e0b22edcd137f0948dec1727", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgzOTgwMQ==", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r442839801", "body": "Please change the message to: \"Expected and actual values are not the same\" or something similar. \"not_equals\" is not a valid comment.", "bodyText": "Please change the message to: \"Expected and actual values are not the same\" or something similar. \"not_equals\" is not a valid comment.", "bodyHTML": "<p dir=\"auto\">Please change the message to: \"Expected and actual values are not the same\" or something similar. \"not_equals\" is not a valid comment.</p>", "author": "LeoNerdoG", "createdAt": "2020-06-19T13:27:21Z", "path": "commons/src/test/java/org/eclipse/kapua/commons/event/ServiceEventClientConfigurationTest.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.event.ServiceEventBusListener;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category(JUnitTests.class)\n+public class ServiceEventClientConfigurationTest extends Assert {\n+\n+    ServiceEventBusListener serviceEventBusListener;\n+\n+    @Test\n+    public void constructorRegularTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(\"address\", \"subscriberName\", serviceEventBusListener);\n+        assertEquals(\"not_equals\", \"address\", serviceEventClientConfiguration.getAddress());\n+        assertEquals(\"not_equals\", \"subscriberName\", serviceEventClientConfiguration.getClientName());\n+        assertEquals(\"not_equals\", serviceEventBusListener, serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(null , null, null);\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getAddress());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getClientName());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorAddressNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(null , \"subscriberName\", serviceEventBusListener);\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getAddress());\n+        assertEquals(\"not_equals\", \"subscriberName\", serviceEventClientConfiguration.getClientName());\n+        assertEquals(\"not_equals\", serviceEventBusListener, serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorClientNameNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(\"address\", null, serviceEventBusListener);\n+        assertEquals(\"not_equals\", \"address\", serviceEventClientConfiguration.getAddress());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getClientName());\n+        assertEquals(\"not_equals\", serviceEventBusListener, serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorServiceEventNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(\"address\", \"subscriberName\", null);\n+        assertEquals(\"not_equals\", \"address\", serviceEventClientConfiguration.getAddress());\n+        assertEquals(\"not_equals\", \"subscriberName\", serviceEventClientConfiguration.getClientName());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorAddressAndNameNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(null, null, serviceEventBusListener);\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getAddress());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getClientName());\n+        assertEquals(\"not_equals\", serviceEventBusListener, serviceEventClientConfiguration.getEventListener());", "originalCommit": "d4f078b1dfb83c13e0b22edcd137f0948dec1727", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgzOTg2Nw==", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r442839867", "body": "Please change the message to: \"Expected value should be null\" or something similar. \"not_null\" is not a valid comment.", "bodyText": "Please change the message to: \"Expected value should be null\" or something similar. \"not_null\" is not a valid comment.", "bodyHTML": "<p dir=\"auto\">Please change the message to: \"Expected value should be null\" or something similar. \"not_null\" is not a valid comment.</p>", "author": "LeoNerdoG", "createdAt": "2020-06-19T13:27:29Z", "path": "commons/src/test/java/org/eclipse/kapua/commons/event/ServiceEventClientConfigurationTest.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.event.ServiceEventBusListener;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category(JUnitTests.class)\n+public class ServiceEventClientConfigurationTest extends Assert {\n+\n+    ServiceEventBusListener serviceEventBusListener;\n+\n+    @Test\n+    public void constructorRegularTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(\"address\", \"subscriberName\", serviceEventBusListener);\n+        assertEquals(\"not_equals\", \"address\", serviceEventClientConfiguration.getAddress());\n+        assertEquals(\"not_equals\", \"subscriberName\", serviceEventClientConfiguration.getClientName());\n+        assertEquals(\"not_equals\", serviceEventBusListener, serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(null , null, null);\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getAddress());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getClientName());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorAddressNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(null , \"subscriberName\", serviceEventBusListener);\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getAddress());\n+        assertEquals(\"not_equals\", \"subscriberName\", serviceEventClientConfiguration.getClientName());\n+        assertEquals(\"not_equals\", serviceEventBusListener, serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorClientNameNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(\"address\", null, serviceEventBusListener);\n+        assertEquals(\"not_equals\", \"address\", serviceEventClientConfiguration.getAddress());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getClientName());\n+        assertEquals(\"not_equals\", serviceEventBusListener, serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorServiceEventNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(\"address\", \"subscriberName\", null);\n+        assertEquals(\"not_equals\", \"address\", serviceEventClientConfiguration.getAddress());\n+        assertEquals(\"not_equals\", \"subscriberName\", serviceEventClientConfiguration.getClientName());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorAddressAndNameNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(null, null, serviceEventBusListener);\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getAddress());", "originalCommit": "d4f078b1dfb83c13e0b22edcd137f0948dec1727", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgzOTkyMA==", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r442839920", "body": "Please change the message to: \"Expected value should be null\" or something similar. \"not_null\" is not a valid comment.", "bodyText": "Please change the message to: \"Expected value should be null\" or something similar. \"not_null\" is not a valid comment.", "bodyHTML": "<p dir=\"auto\">Please change the message to: \"Expected value should be null\" or something similar. \"not_null\" is not a valid comment.</p>", "author": "LeoNerdoG", "createdAt": "2020-06-19T13:27:34Z", "path": "commons/src/test/java/org/eclipse/kapua/commons/event/ServiceEventClientConfigurationTest.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.event.ServiceEventBusListener;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category(JUnitTests.class)\n+public class ServiceEventClientConfigurationTest extends Assert {\n+\n+    ServiceEventBusListener serviceEventBusListener;\n+\n+    @Test\n+    public void constructorRegularTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(\"address\", \"subscriberName\", serviceEventBusListener);\n+        assertEquals(\"not_equals\", \"address\", serviceEventClientConfiguration.getAddress());\n+        assertEquals(\"not_equals\", \"subscriberName\", serviceEventClientConfiguration.getClientName());\n+        assertEquals(\"not_equals\", serviceEventBusListener, serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(null , null, null);\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getAddress());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getClientName());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorAddressNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(null , \"subscriberName\", serviceEventBusListener);\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getAddress());\n+        assertEquals(\"not_equals\", \"subscriberName\", serviceEventClientConfiguration.getClientName());\n+        assertEquals(\"not_equals\", serviceEventBusListener, serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorClientNameNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(\"address\", null, serviceEventBusListener);\n+        assertEquals(\"not_equals\", \"address\", serviceEventClientConfiguration.getAddress());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getClientName());\n+        assertEquals(\"not_equals\", serviceEventBusListener, serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorServiceEventNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(\"address\", \"subscriberName\", null);\n+        assertEquals(\"not_equals\", \"address\", serviceEventClientConfiguration.getAddress());\n+        assertEquals(\"not_equals\", \"subscriberName\", serviceEventClientConfiguration.getClientName());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorAddressAndNameNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(null, null, serviceEventBusListener);\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getAddress());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getClientName());", "originalCommit": "d4f078b1dfb83c13e0b22edcd137f0948dec1727", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgzOTk2Ng==", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r442839966", "body": "Please change the message to: \"Expected value should be null\" or something similar. \"not_null\" is not a valid comment.", "bodyText": "Please change the message to: \"Expected value should be null\" or something similar. \"not_null\" is not a valid comment.", "bodyHTML": "<p dir=\"auto\">Please change the message to: \"Expected value should be null\" or something similar. \"not_null\" is not a valid comment.</p>", "author": "LeoNerdoG", "createdAt": "2020-06-19T13:27:38Z", "path": "commons/src/test/java/org/eclipse/kapua/commons/event/ServiceEventClientConfigurationTest.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.event.ServiceEventBusListener;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category(JUnitTests.class)\n+public class ServiceEventClientConfigurationTest extends Assert {\n+\n+    ServiceEventBusListener serviceEventBusListener;\n+\n+    @Test\n+    public void constructorRegularTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(\"address\", \"subscriberName\", serviceEventBusListener);\n+        assertEquals(\"not_equals\", \"address\", serviceEventClientConfiguration.getAddress());\n+        assertEquals(\"not_equals\", \"subscriberName\", serviceEventClientConfiguration.getClientName());\n+        assertEquals(\"not_equals\", serviceEventBusListener, serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(null , null, null);\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getAddress());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getClientName());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorAddressNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(null , \"subscriberName\", serviceEventBusListener);\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getAddress());\n+        assertEquals(\"not_equals\", \"subscriberName\", serviceEventClientConfiguration.getClientName());\n+        assertEquals(\"not_equals\", serviceEventBusListener, serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorClientNameNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(\"address\", null, serviceEventBusListener);\n+        assertEquals(\"not_equals\", \"address\", serviceEventClientConfiguration.getAddress());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getClientName());\n+        assertEquals(\"not_equals\", serviceEventBusListener, serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorServiceEventNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(\"address\", \"subscriberName\", null);\n+        assertEquals(\"not_equals\", \"address\", serviceEventClientConfiguration.getAddress());\n+        assertEquals(\"not_equals\", \"subscriberName\", serviceEventClientConfiguration.getClientName());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorAddressAndNameNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(null, null, serviceEventBusListener);\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getAddress());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getClientName());\n+        assertEquals(\"not_equals\", serviceEventBusListener, serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorNameAndServiceEventNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(\"address\", null, null);\n+        assertEquals(\"not_equals\", \"address\", serviceEventClientConfiguration.getAddress());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getClientName());", "originalCommit": "d4f078b1dfb83c13e0b22edcd137f0948dec1727", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjg0MDAwNw==", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r442840007", "body": "Please change the message to: \"Expected value should be null\" or something similar. \"not_null\" is not a valid comment.", "bodyText": "Please change the message to: \"Expected value should be null\" or something similar. \"not_null\" is not a valid comment.", "bodyHTML": "<p dir=\"auto\">Please change the message to: \"Expected value should be null\" or something similar. \"not_null\" is not a valid comment.</p>", "author": "LeoNerdoG", "createdAt": "2020-06-19T13:27:44Z", "path": "commons/src/test/java/org/eclipse/kapua/commons/event/ServiceEventClientConfigurationTest.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.event.ServiceEventBusListener;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category(JUnitTests.class)\n+public class ServiceEventClientConfigurationTest extends Assert {\n+\n+    ServiceEventBusListener serviceEventBusListener;\n+\n+    @Test\n+    public void constructorRegularTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(\"address\", \"subscriberName\", serviceEventBusListener);\n+        assertEquals(\"not_equals\", \"address\", serviceEventClientConfiguration.getAddress());\n+        assertEquals(\"not_equals\", \"subscriberName\", serviceEventClientConfiguration.getClientName());\n+        assertEquals(\"not_equals\", serviceEventBusListener, serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(null , null, null);\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getAddress());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getClientName());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorAddressNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(null , \"subscriberName\", serviceEventBusListener);\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getAddress());\n+        assertEquals(\"not_equals\", \"subscriberName\", serviceEventClientConfiguration.getClientName());\n+        assertEquals(\"not_equals\", serviceEventBusListener, serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorClientNameNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(\"address\", null, serviceEventBusListener);\n+        assertEquals(\"not_equals\", \"address\", serviceEventClientConfiguration.getAddress());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getClientName());\n+        assertEquals(\"not_equals\", serviceEventBusListener, serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorServiceEventNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(\"address\", \"subscriberName\", null);\n+        assertEquals(\"not_equals\", \"address\", serviceEventClientConfiguration.getAddress());\n+        assertEquals(\"not_equals\", \"subscriberName\", serviceEventClientConfiguration.getClientName());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorAddressAndNameNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(null, null, serviceEventBusListener);\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getAddress());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getClientName());\n+        assertEquals(\"not_equals\", serviceEventBusListener, serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorNameAndServiceEventNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(\"address\", null, null);\n+        assertEquals(\"not_equals\", \"address\", serviceEventClientConfiguration.getAddress());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getClientName());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getEventListener());", "originalCommit": "d4f078b1dfb83c13e0b22edcd137f0948dec1727", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjg0MDM1Nw==", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r442840357", "body": "Please change the message to: \"Expected and actual values are not the same\" or something similar. \"not_equals\" is not a valid comment.", "bodyText": "Please change the message to: \"Expected and actual values are not the same\" or something similar. \"not_equals\" is not a valid comment.", "bodyHTML": "<p dir=\"auto\">Please change the message to: \"Expected and actual values are not the same\" or something similar. \"not_equals\" is not a valid comment.</p>", "author": "LeoNerdoG", "createdAt": "2020-06-19T13:28:30Z", "path": "commons/src/test/java/org/eclipse/kapua/commons/event/ServiceEventClientConfigurationTest.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.event.ServiceEventBusListener;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category(JUnitTests.class)\n+public class ServiceEventClientConfigurationTest extends Assert {\n+\n+    ServiceEventBusListener serviceEventBusListener;\n+\n+    @Test\n+    public void constructorRegularTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(\"address\", \"subscriberName\", serviceEventBusListener);\n+        assertEquals(\"not_equals\", \"address\", serviceEventClientConfiguration.getAddress());\n+        assertEquals(\"not_equals\", \"subscriberName\", serviceEventClientConfiguration.getClientName());\n+        assertEquals(\"not_equals\", serviceEventBusListener, serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(null , null, null);\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getAddress());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getClientName());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorAddressNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(null , \"subscriberName\", serviceEventBusListener);\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getAddress());\n+        assertEquals(\"not_equals\", \"subscriberName\", serviceEventClientConfiguration.getClientName());\n+        assertEquals(\"not_equals\", serviceEventBusListener, serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorClientNameNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(\"address\", null, serviceEventBusListener);\n+        assertEquals(\"not_equals\", \"address\", serviceEventClientConfiguration.getAddress());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getClientName());\n+        assertEquals(\"not_equals\", serviceEventBusListener, serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorServiceEventNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(\"address\", \"subscriberName\", null);\n+        assertEquals(\"not_equals\", \"address\", serviceEventClientConfiguration.getAddress());\n+        assertEquals(\"not_equals\", \"subscriberName\", serviceEventClientConfiguration.getClientName());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorAddressAndNameNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(null, null, serviceEventBusListener);\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getAddress());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getClientName());\n+        assertEquals(\"not_equals\", serviceEventBusListener, serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorNameAndServiceEventNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(\"address\", null, null);\n+        assertEquals(\"not_equals\", \"address\", serviceEventClientConfiguration.getAddress());", "originalCommit": "d4f078b1dfb83c13e0b22edcd137f0948dec1727", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjg0MDg4NA==", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r442840884", "body": "Please change the message to: \"Expected and actual values are not the same\" or something similar. \"not_equals\" is not a valid comment.", "bodyText": "Please change the message to: \"Expected and actual values are not the same\" or something similar. \"not_equals\" is not a valid comment.", "bodyHTML": "<p dir=\"auto\">Please change the message to: \"Expected and actual values are not the same\" or something similar. \"not_equals\" is not a valid comment.</p>", "author": "LeoNerdoG", "createdAt": "2020-06-19T13:29:27Z", "path": "commons/src/test/java/org/eclipse/kapua/commons/event/ServiceEventClientConfigurationTest.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.event.ServiceEventBusListener;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category(JUnitTests.class)\n+public class ServiceEventClientConfigurationTest extends Assert {\n+\n+    ServiceEventBusListener serviceEventBusListener;\n+\n+    @Test\n+    public void constructorRegularTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(\"address\", \"subscriberName\", serviceEventBusListener);\n+        assertEquals(\"not_equals\", \"address\", serviceEventClientConfiguration.getAddress());\n+        assertEquals(\"not_equals\", \"subscriberName\", serviceEventClientConfiguration.getClientName());\n+        assertEquals(\"not_equals\", serviceEventBusListener, serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(null , null, null);\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getAddress());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getClientName());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorAddressNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(null , \"subscriberName\", serviceEventBusListener);\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getAddress());\n+        assertEquals(\"not_equals\", \"subscriberName\", serviceEventClientConfiguration.getClientName());\n+        assertEquals(\"not_equals\", serviceEventBusListener, serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorClientNameNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(\"address\", null, serviceEventBusListener);\n+        assertEquals(\"not_equals\", \"address\", serviceEventClientConfiguration.getAddress());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getClientName());\n+        assertEquals(\"not_equals\", serviceEventBusListener, serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorServiceEventNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(\"address\", \"subscriberName\", null);\n+        assertEquals(\"not_equals\", \"address\", serviceEventClientConfiguration.getAddress());\n+        assertEquals(\"not_equals\", \"subscriberName\", serviceEventClientConfiguration.getClientName());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorAddressAndNameNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(null, null, serviceEventBusListener);\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getAddress());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getClientName());\n+        assertEquals(\"not_equals\", serviceEventBusListener, serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorNameAndServiceEventNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(\"address\", null, null);\n+        assertEquals(\"not_equals\", \"address\", serviceEventClientConfiguration.getAddress());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getClientName());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorAddressAndNameCharCheckTest() {\n+        String[] permittedValues = {\"\", \"!@#$%^^&**(-()_)+/|\", \"regularNaming\", \"regular Naming\", \"49\", \"regularNaming49\", \"NAMING\", \"246465494135646120009090049684646496468456468496846464968496844\"};\n+        for (String value : permittedValues) {\n+                ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(value, value, serviceEventBusListener);\n+                assertEquals(\"not_equals\", value, serviceEventClientConfiguration.getAddress());", "originalCommit": "d4f078b1dfb83c13e0b22edcd137f0948dec1727", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjg0MDkxMA==", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r442840910", "body": "Please change the message to: \"Expected and actual values are not the same\" or something similar. \"not_equals\" is not a valid comment.", "bodyText": "Please change the message to: \"Expected and actual values are not the same\" or something similar. \"not_equals\" is not a valid comment.", "bodyHTML": "<p dir=\"auto\">Please change the message to: \"Expected and actual values are not the same\" or something similar. \"not_equals\" is not a valid comment.</p>", "author": "LeoNerdoG", "createdAt": "2020-06-19T13:29:30Z", "path": "commons/src/test/java/org/eclipse/kapua/commons/event/ServiceEventClientConfigurationTest.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.event.ServiceEventBusListener;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category(JUnitTests.class)\n+public class ServiceEventClientConfigurationTest extends Assert {\n+\n+    ServiceEventBusListener serviceEventBusListener;\n+\n+    @Test\n+    public void constructorRegularTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(\"address\", \"subscriberName\", serviceEventBusListener);\n+        assertEquals(\"not_equals\", \"address\", serviceEventClientConfiguration.getAddress());\n+        assertEquals(\"not_equals\", \"subscriberName\", serviceEventClientConfiguration.getClientName());\n+        assertEquals(\"not_equals\", serviceEventBusListener, serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(null , null, null);\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getAddress());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getClientName());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorAddressNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(null , \"subscriberName\", serviceEventBusListener);\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getAddress());\n+        assertEquals(\"not_equals\", \"subscriberName\", serviceEventClientConfiguration.getClientName());\n+        assertEquals(\"not_equals\", serviceEventBusListener, serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorClientNameNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(\"address\", null, serviceEventBusListener);\n+        assertEquals(\"not_equals\", \"address\", serviceEventClientConfiguration.getAddress());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getClientName());\n+        assertEquals(\"not_equals\", serviceEventBusListener, serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorServiceEventNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(\"address\", \"subscriberName\", null);\n+        assertEquals(\"not_equals\", \"address\", serviceEventClientConfiguration.getAddress());\n+        assertEquals(\"not_equals\", \"subscriberName\", serviceEventClientConfiguration.getClientName());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorAddressAndNameNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(null, null, serviceEventBusListener);\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getAddress());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getClientName());\n+        assertEquals(\"not_equals\", serviceEventBusListener, serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorNameAndServiceEventNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(\"address\", null, null);\n+        assertEquals(\"not_equals\", \"address\", serviceEventClientConfiguration.getAddress());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getClientName());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorAddressAndNameCharCheckTest() {\n+        String[] permittedValues = {\"\", \"!@#$%^^&**(-()_)+/|\", \"regularNaming\", \"regular Naming\", \"49\", \"regularNaming49\", \"NAMING\", \"246465494135646120009090049684646496468456468496846464968496844\"};\n+        for (String value : permittedValues) {\n+                ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(value, value, serviceEventBusListener);\n+                assertEquals(\"not_equals\", value, serviceEventClientConfiguration.getAddress());\n+                assertEquals(\"not_equals\", value, serviceEventClientConfiguration.getClientName());", "originalCommit": "d4f078b1dfb83c13e0b22edcd137f0948dec1727", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjg0MDk3OA==", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r442840978", "body": "Please change the message to: \"Expected and actual values are not the same\" or something similar. \"not_equals\" is not a valid comment.", "bodyText": "Please change the message to: \"Expected and actual values are not the same\" or something similar. \"not_equals\" is not a valid comment.", "bodyHTML": "<p dir=\"auto\">Please change the message to: \"Expected and actual values are not the same\" or something similar. \"not_equals\" is not a valid comment.</p>", "author": "LeoNerdoG", "createdAt": "2020-06-19T13:29:38Z", "path": "commons/src/test/java/org/eclipse/kapua/commons/event/ServiceEventClientConfigurationTest.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.event.ServiceEventBusListener;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category(JUnitTests.class)\n+public class ServiceEventClientConfigurationTest extends Assert {\n+\n+    ServiceEventBusListener serviceEventBusListener;\n+\n+    @Test\n+    public void constructorRegularTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(\"address\", \"subscriberName\", serviceEventBusListener);\n+        assertEquals(\"not_equals\", \"address\", serviceEventClientConfiguration.getAddress());\n+        assertEquals(\"not_equals\", \"subscriberName\", serviceEventClientConfiguration.getClientName());\n+        assertEquals(\"not_equals\", serviceEventBusListener, serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(null , null, null);\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getAddress());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getClientName());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorAddressNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(null , \"subscriberName\", serviceEventBusListener);\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getAddress());\n+        assertEquals(\"not_equals\", \"subscriberName\", serviceEventClientConfiguration.getClientName());\n+        assertEquals(\"not_equals\", serviceEventBusListener, serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorClientNameNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(\"address\", null, serviceEventBusListener);\n+        assertEquals(\"not_equals\", \"address\", serviceEventClientConfiguration.getAddress());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getClientName());\n+        assertEquals(\"not_equals\", serviceEventBusListener, serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorServiceEventNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(\"address\", \"subscriberName\", null);\n+        assertEquals(\"not_equals\", \"address\", serviceEventClientConfiguration.getAddress());\n+        assertEquals(\"not_equals\", \"subscriberName\", serviceEventClientConfiguration.getClientName());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorAddressAndNameNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(null, null, serviceEventBusListener);\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getAddress());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getClientName());\n+        assertEquals(\"not_equals\", serviceEventBusListener, serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorNameAndServiceEventNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(\"address\", null, null);\n+        assertEquals(\"not_equals\", \"address\", serviceEventClientConfiguration.getAddress());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getClientName());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorAddressAndNameCharCheckTest() {\n+        String[] permittedValues = {\"\", \"!@#$%^^&**(-()_)+/|\", \"regularNaming\", \"regular Naming\", \"49\", \"regularNaming49\", \"NAMING\", \"246465494135646120009090049684646496468456468496846464968496844\"};\n+        for (String value : permittedValues) {\n+                ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(value, value, serviceEventBusListener);\n+                assertEquals(\"not_equals\", value, serviceEventClientConfiguration.getAddress());\n+                assertEquals(\"not_equals\", value, serviceEventClientConfiguration.getClientName());\n+                assertEquals(\"not_equals\", serviceEventBusListener, serviceEventClientConfiguration.getEventListener());", "originalCommit": "d4f078b1dfb83c13e0b22edcd137f0948dec1727", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjg0MTA0MA==", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r442841040", "body": "In second entry, there are double same symbols and some are not included. Please change to: \"!\"#$%&'()=?\u2044@\u2039\u203a\u20ac\u00b0\u00b7\u201a,.-;:_\u00c8\u02c7\u00bf<>\u00ab\u2018\u201d\u2019\u00c9\u00d8\u220f{}|\u00c6\u00e6\u00d2\uf8ff\u00d4\u00d3\u00cc\u00cf\u00ce\u00c5\u00ab\u00bb\u00c7\u25ca\u00d1\u02c6\u00af\u00c8\u02c7\" - try to include as much as special symbols as possible.", "bodyText": "In second entry, there are double same symbols and some are not included. Please change to: \"!\"#$%&'()=?\u2044@\u2039\u203a\u20ac\u00b0\u00b7\u201a,.-;:_\u00c8\u02c7\u00bf<>\u00ab\u2018\u201d\u2019\u00c9\u00d8\u220f{}|\u00c6\u00e6\u00d2\uf8ff\u00d4\u00d3\u00cc\u00cf\u00ce\u00c5\u00ab\u00bb\u00c7\u25ca\u00d1\u02c6\u00af\u00c8\u02c7\" - try to include as much as special symbols as possible.", "bodyHTML": "<p dir=\"auto\">In second entry, there are double same symbols and some are not included. Please change to: \"!\"#$%&amp;'()=?\u2044@\u2039\u203a\u20ac\u00b0\u00b7\u201a,.-;:_\u00c8\u02c7\u00bf&lt;&gt;\u00ab\u2018\u201d\u2019\u00c9\u00d8\u220f{}|\u00c6\u00e6\u00d2\uf8ff\u00d4\u00d3\u00cc\u00cf\u00ce\u00c5\u00ab\u00bb\u00c7\u25ca\u00d1\u02c6\u00af\u00c8\u02c7\" - try to include as much as special symbols as possible.</p>", "author": "LeoNerdoG", "createdAt": "2020-06-19T13:29:44Z", "path": "commons/src/test/java/org/eclipse/kapua/commons/event/ServiceEventClientConfigurationTest.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.event.ServiceEventBusListener;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category(JUnitTests.class)\n+public class ServiceEventClientConfigurationTest extends Assert {\n+\n+    ServiceEventBusListener serviceEventBusListener;\n+\n+    @Test\n+    public void constructorRegularTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(\"address\", \"subscriberName\", serviceEventBusListener);\n+        assertEquals(\"not_equals\", \"address\", serviceEventClientConfiguration.getAddress());\n+        assertEquals(\"not_equals\", \"subscriberName\", serviceEventClientConfiguration.getClientName());\n+        assertEquals(\"not_equals\", serviceEventBusListener, serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(null , null, null);\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getAddress());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getClientName());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorAddressNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(null , \"subscriberName\", serviceEventBusListener);\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getAddress());\n+        assertEquals(\"not_equals\", \"subscriberName\", serviceEventClientConfiguration.getClientName());\n+        assertEquals(\"not_equals\", serviceEventBusListener, serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorClientNameNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(\"address\", null, serviceEventBusListener);\n+        assertEquals(\"not_equals\", \"address\", serviceEventClientConfiguration.getAddress());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getClientName());\n+        assertEquals(\"not_equals\", serviceEventBusListener, serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorServiceEventNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(\"address\", \"subscriberName\", null);\n+        assertEquals(\"not_equals\", \"address\", serviceEventClientConfiguration.getAddress());\n+        assertEquals(\"not_equals\", \"subscriberName\", serviceEventClientConfiguration.getClientName());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorAddressAndNameNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(null, null, serviceEventBusListener);\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getAddress());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getClientName());\n+        assertEquals(\"not_equals\", serviceEventBusListener, serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorNameAndServiceEventNullTest() {\n+        ServiceEventClientConfiguration serviceEventClientConfiguration = new ServiceEventClientConfiguration(\"address\", null, null);\n+        assertEquals(\"not_equals\", \"address\", serviceEventClientConfiguration.getAddress());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getClientName());\n+        assertNull(\"not_null\", serviceEventClientConfiguration.getEventListener());\n+    }\n+\n+    @Test\n+    public void constructorAddressAndNameCharCheckTest() {\n+        String[] permittedValues = {\"\", \"!@#$%^^&**(-()_)+/|\", \"regularNaming\", \"regular Naming\", \"49\", \"regularNaming49\", \"NAMING\", \"246465494135646120009090049684646496468456468496846464968496844\"};", "originalCommit": "d4f078b1dfb83c13e0b22edcd137f0948dec1727", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM1OTAwOQ==", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r443359009", "body": "Please rename method to: \"ServiceEventModuleConfigurationRegularTest\"", "bodyText": "Please rename method to: \"ServiceEventModuleConfigurationRegularTest\"", "bodyHTML": "<p dir=\"auto\">Please rename method to: \"ServiceEventModuleConfigurationRegularTest\"</p>", "author": "LeoNerdoG", "createdAt": "2020-06-22T07:15:11Z", "path": "commons/src/test/java/org/eclipse/kapua/commons/event/ServiceEventModuleConfigurationTest.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.commons.jpa.EntityManagerFactory;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category(JUnitTests.class)\n+public class ServiceEventModuleConfigurationTest extends Assert {\n+\n+    EntityManagerFactory entityManagerFactory;\n+\n+    ServiceEventClientConfiguration[] serviceEventClientConfiguration = new ServiceEventClientConfiguration[]\n+            { new ServiceEventClientConfiguration(\"address\", \"subscriberName\", null),\n+             new ServiceEventClientConfiguration(\"address2\", \"subscriberName2\", null) };\n+\n+    @Test\n+    public void constructorRegularTest() {", "originalCommit": "d4f078b1dfb83c13e0b22edcd137f0948dec1727", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM1OTQwNA==", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r443359404", "body": "Please change the message from \"not_equals\" to \"Expected and actual values are not equals\" or soemthing similar. \"not_equals\" is not enough. ", "bodyText": "Please change the message from \"not_equals\" to \"Expected and actual values are not equals\" or soemthing similar. \"not_equals\" is not enough.", "bodyHTML": "<p dir=\"auto\">Please change the message from \"not_equals\" to \"Expected and actual values are not equals\" or soemthing similar. \"not_equals\" is not enough.</p>", "author": "LeoNerdoG", "createdAt": "2020-06-22T07:16:00Z", "path": "commons/src/test/java/org/eclipse/kapua/commons/event/ServiceEventModuleConfigurationTest.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.commons.jpa.EntityManagerFactory;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category(JUnitTests.class)\n+public class ServiceEventModuleConfigurationTest extends Assert {\n+\n+    EntityManagerFactory entityManagerFactory;\n+\n+    ServiceEventClientConfiguration[] serviceEventClientConfiguration = new ServiceEventClientConfiguration[]\n+            { new ServiceEventClientConfiguration(\"address\", \"subscriberName\", null),\n+             new ServiceEventClientConfiguration(\"address2\", \"subscriberName2\", null) };\n+\n+    @Test\n+    public void constructorRegularTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", entityManagerFactory, serviceEventClientConfiguration);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());", "originalCommit": "d4f078b1dfb83c13e0b22edcd137f0948dec1727", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM1OTY0NQ==", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r443359645", "body": "Please change the message from \"not_null\" to \"Actual calue is not null\" or something similar. \"not_null\" is not enough. ", "bodyText": "Please change the message from \"not_null\" to \"Actual calue is not null\" or something similar. \"not_null\" is not enough.", "bodyHTML": "<p dir=\"auto\">Please change the message from \"not_null\" to \"Actual calue is not null\" or something similar. \"not_null\" is not enough.</p>", "author": "LeoNerdoG", "createdAt": "2020-06-22T07:16:32Z", "path": "commons/src/test/java/org/eclipse/kapua/commons/event/ServiceEventModuleConfigurationTest.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.commons.jpa.EntityManagerFactory;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category(JUnitTests.class)\n+public class ServiceEventModuleConfigurationTest extends Assert {\n+\n+    EntityManagerFactory entityManagerFactory;\n+\n+    ServiceEventClientConfiguration[] serviceEventClientConfiguration = new ServiceEventClientConfiguration[]\n+            { new ServiceEventClientConfiguration(\"address\", \"subscriberName\", null),\n+             new ServiceEventClientConfiguration(\"address2\", \"subscriberName2\", null) };\n+\n+    @Test\n+    public void constructorRegularTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", entityManagerFactory, serviceEventClientConfiguration);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());", "originalCommit": "d4f078b1dfb83c13e0b22edcd137f0948dec1727", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM2MDAxMA==", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r443360010", "body": "Missing string message in the equals assert. ", "bodyText": "Missing string message in the equals assert.", "bodyHTML": "<p dir=\"auto\">Missing string message in the equals assert.</p>", "author": "LeoNerdoG", "createdAt": "2020-06-22T07:17:24Z", "path": "commons/src/test/java/org/eclipse/kapua/commons/event/ServiceEventModuleConfigurationTest.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.commons.jpa.EntityManagerFactory;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category(JUnitTests.class)\n+public class ServiceEventModuleConfigurationTest extends Assert {\n+\n+    EntityManagerFactory entityManagerFactory;\n+\n+    ServiceEventClientConfiguration[] serviceEventClientConfiguration = new ServiceEventClientConfiguration[]\n+            { new ServiceEventClientConfiguration(\"address\", \"subscriberName\", null),\n+             new ServiceEventClientConfiguration(\"address2\", \"subscriberName2\", null) };\n+\n+    @Test\n+    public void constructorRegularTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", entityManagerFactory, serviceEventClientConfiguration);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());", "originalCommit": "d4f078b1dfb83c13e0b22edcd137f0948dec1727", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM2MTE5Mw==", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r443361193", "body": "Please rename method to: \"ServiceEventModuleConfigurationNullAddressTest\"", "bodyText": "Please rename method to: \"ServiceEventModuleConfigurationNullAddressTest\"", "bodyHTML": "<p dir=\"auto\">Please rename method to: \"ServiceEventModuleConfigurationNullAddressTest\"</p>", "author": "LeoNerdoG", "createdAt": "2020-06-22T07:20:12Z", "path": "commons/src/test/java/org/eclipse/kapua/commons/event/ServiceEventModuleConfigurationTest.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.commons.jpa.EntityManagerFactory;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category(JUnitTests.class)\n+public class ServiceEventModuleConfigurationTest extends Assert {\n+\n+    EntityManagerFactory entityManagerFactory;\n+\n+    ServiceEventClientConfiguration[] serviceEventClientConfiguration = new ServiceEventClientConfiguration[]\n+            { new ServiceEventClientConfiguration(\"address\", \"subscriberName\", null),\n+             new ServiceEventClientConfiguration(\"address2\", \"subscriberName2\", null) };\n+\n+    @Test\n+    public void constructorRegularTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", entityManagerFactory, serviceEventClientConfiguration);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorAddressNullTest() {", "originalCommit": "d4f078b1dfb83c13e0b22edcd137f0948dec1727", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM2MTI3MQ==", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r443361271", "body": "Please change the message from \"not_null\" to \"Actual calue is not null\" or something similar. \"not_null\" is not enough.", "bodyText": "Please change the message from \"not_null\" to \"Actual calue is not null\" or something similar. \"not_null\" is not enough.", "bodyHTML": "<p dir=\"auto\">Please change the message from \"not_null\" to \"Actual calue is not null\" or something similar. \"not_null\" is not enough.</p>", "author": "LeoNerdoG", "createdAt": "2020-06-22T07:20:22Z", "path": "commons/src/test/java/org/eclipse/kapua/commons/event/ServiceEventModuleConfigurationTest.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.commons.jpa.EntityManagerFactory;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category(JUnitTests.class)\n+public class ServiceEventModuleConfigurationTest extends Assert {\n+\n+    EntityManagerFactory entityManagerFactory;\n+\n+    ServiceEventClientConfiguration[] serviceEventClientConfiguration = new ServiceEventClientConfiguration[]\n+            { new ServiceEventClientConfiguration(\"address\", \"subscriberName\", null),\n+             new ServiceEventClientConfiguration(\"address2\", \"subscriberName2\", null) };\n+\n+    @Test\n+    public void constructorRegularTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", entityManagerFactory, serviceEventClientConfiguration);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorAddressNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(null, entityManagerFactory, serviceEventClientConfiguration);\n+        assertNull(\"not_null\", moduleConfiguration.getInternalAddress());", "originalCommit": "d4f078b1dfb83c13e0b22edcd137f0948dec1727", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM2MTMxMg==", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r443361312", "body": "Please change the message from \"not_null\" to \"Actual calue is not null\" or something similar. \"not_null\" is not enough.", "bodyText": "Please change the message from \"not_null\" to \"Actual calue is not null\" or something similar. \"not_null\" is not enough.", "bodyHTML": "<p dir=\"auto\">Please change the message from \"not_null\" to \"Actual calue is not null\" or something similar. \"not_null\" is not enough.</p>", "author": "LeoNerdoG", "createdAt": "2020-06-22T07:20:26Z", "path": "commons/src/test/java/org/eclipse/kapua/commons/event/ServiceEventModuleConfigurationTest.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.commons.jpa.EntityManagerFactory;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category(JUnitTests.class)\n+public class ServiceEventModuleConfigurationTest extends Assert {\n+\n+    EntityManagerFactory entityManagerFactory;\n+\n+    ServiceEventClientConfiguration[] serviceEventClientConfiguration = new ServiceEventClientConfiguration[]\n+            { new ServiceEventClientConfiguration(\"address\", \"subscriberName\", null),\n+             new ServiceEventClientConfiguration(\"address2\", \"subscriberName2\", null) };\n+\n+    @Test\n+    public void constructorRegularTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", entityManagerFactory, serviceEventClientConfiguration);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorAddressNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(null, entityManagerFactory, serviceEventClientConfiguration);\n+        assertNull(\"not_null\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());", "originalCommit": "d4f078b1dfb83c13e0b22edcd137f0948dec1727", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM2MTM3NQ==", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r443361375", "body": "Missing string message in the equals assert.", "bodyText": "Missing string message in the equals assert.", "bodyHTML": "<p dir=\"auto\">Missing string message in the equals assert.</p>", "author": "LeoNerdoG", "createdAt": "2020-06-22T07:20:32Z", "path": "commons/src/test/java/org/eclipse/kapua/commons/event/ServiceEventModuleConfigurationTest.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.commons.jpa.EntityManagerFactory;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category(JUnitTests.class)\n+public class ServiceEventModuleConfigurationTest extends Assert {\n+\n+    EntityManagerFactory entityManagerFactory;\n+\n+    ServiceEventClientConfiguration[] serviceEventClientConfiguration = new ServiceEventClientConfiguration[]\n+            { new ServiceEventClientConfiguration(\"address\", \"subscriberName\", null),\n+             new ServiceEventClientConfiguration(\"address2\", \"subscriberName2\", null) };\n+\n+    @Test\n+    public void constructorRegularTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", entityManagerFactory, serviceEventClientConfiguration);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorAddressNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(null, entityManagerFactory, serviceEventClientConfiguration);\n+        assertNull(\"not_null\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());", "originalCommit": "d4f078b1dfb83c13e0b22edcd137f0948dec1727", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM2MTQ5Mw==", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r443361493", "body": "Please rename method to: \"ServiceEventModuleConfigurationNullEntityTest\"", "bodyText": "Please rename method to: \"ServiceEventModuleConfigurationNullEntityTest\"", "bodyHTML": "<p dir=\"auto\">Please rename method to: \"ServiceEventModuleConfigurationNullEntityTest\"</p>", "author": "LeoNerdoG", "createdAt": "2020-06-22T07:20:51Z", "path": "commons/src/test/java/org/eclipse/kapua/commons/event/ServiceEventModuleConfigurationTest.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.commons.jpa.EntityManagerFactory;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category(JUnitTests.class)\n+public class ServiceEventModuleConfigurationTest extends Assert {\n+\n+    EntityManagerFactory entityManagerFactory;\n+\n+    ServiceEventClientConfiguration[] serviceEventClientConfiguration = new ServiceEventClientConfiguration[]\n+            { new ServiceEventClientConfiguration(\"address\", \"subscriberName\", null),\n+             new ServiceEventClientConfiguration(\"address2\", \"subscriberName2\", null) };\n+\n+    @Test\n+    public void constructorRegularTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", entityManagerFactory, serviceEventClientConfiguration);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorAddressNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(null, entityManagerFactory, serviceEventClientConfiguration);\n+        assertNull(\"not_null\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorEntityNullTest() {", "originalCommit": "d4f078b1dfb83c13e0b22edcd137f0948dec1727", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM2MTU3Nw==", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r443361577", "body": "Please change the message from \"not_null\" to \"Actual calue is not null\" or something similar. \"not_null\" is not enough.", "bodyText": "Please change the message from \"not_null\" to \"Actual calue is not null\" or something similar. \"not_null\" is not enough.", "bodyHTML": "<p dir=\"auto\">Please change the message from \"not_null\" to \"Actual calue is not null\" or something similar. \"not_null\" is not enough.</p>", "author": "LeoNerdoG", "createdAt": "2020-06-22T07:21:00Z", "path": "commons/src/test/java/org/eclipse/kapua/commons/event/ServiceEventModuleConfigurationTest.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.commons.jpa.EntityManagerFactory;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category(JUnitTests.class)\n+public class ServiceEventModuleConfigurationTest extends Assert {\n+\n+    EntityManagerFactory entityManagerFactory;\n+\n+    ServiceEventClientConfiguration[] serviceEventClientConfiguration = new ServiceEventClientConfiguration[]\n+            { new ServiceEventClientConfiguration(\"address\", \"subscriberName\", null),\n+             new ServiceEventClientConfiguration(\"address2\", \"subscriberName2\", null) };\n+\n+    @Test\n+    public void constructorRegularTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", entityManagerFactory, serviceEventClientConfiguration);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorAddressNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(null, entityManagerFactory, serviceEventClientConfiguration);\n+        assertNull(\"not_null\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorEntityNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", null, serviceEventClientConfiguration);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorClientConfigNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", entityManagerFactory, null);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());", "originalCommit": "d4f078b1dfb83c13e0b22edcd137f0948dec1727", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM2MTYwNw==", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r443361607", "body": "Please change the message from \"not_null\" to \"Actual calue is not null\" or something similar. \"not_null\" is not enough.", "bodyText": "Please change the message from \"not_null\" to \"Actual calue is not null\" or something similar. \"not_null\" is not enough.", "bodyHTML": "<p dir=\"auto\">Please change the message from \"not_null\" to \"Actual calue is not null\" or something similar. \"not_null\" is not enough.</p>", "author": "LeoNerdoG", "createdAt": "2020-06-22T07:21:04Z", "path": "commons/src/test/java/org/eclipse/kapua/commons/event/ServiceEventModuleConfigurationTest.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.commons.jpa.EntityManagerFactory;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category(JUnitTests.class)\n+public class ServiceEventModuleConfigurationTest extends Assert {\n+\n+    EntityManagerFactory entityManagerFactory;\n+\n+    ServiceEventClientConfiguration[] serviceEventClientConfiguration = new ServiceEventClientConfiguration[]\n+            { new ServiceEventClientConfiguration(\"address\", \"subscriberName\", null),\n+             new ServiceEventClientConfiguration(\"address2\", \"subscriberName2\", null) };\n+\n+    @Test\n+    public void constructorRegularTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", entityManagerFactory, serviceEventClientConfiguration);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorAddressNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(null, entityManagerFactory, serviceEventClientConfiguration);\n+        assertNull(\"not_null\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorEntityNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", null, serviceEventClientConfiguration);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorClientConfigNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", entityManagerFactory, null);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertNull(\"not_null\", moduleConfiguration.getServiceEventClientConfigurations());", "originalCommit": "d4f078b1dfb83c13e0b22edcd137f0948dec1727", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM2MTcxNA==", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r443361714", "body": "Missing string message in the equals assert.", "bodyText": "Missing string message in the equals assert.", "bodyHTML": "<p dir=\"auto\">Missing string message in the equals assert.</p>", "author": "LeoNerdoG", "createdAt": "2020-06-22T07:21:18Z", "path": "commons/src/test/java/org/eclipse/kapua/commons/event/ServiceEventModuleConfigurationTest.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.commons.jpa.EntityManagerFactory;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category(JUnitTests.class)\n+public class ServiceEventModuleConfigurationTest extends Assert {\n+\n+    EntityManagerFactory entityManagerFactory;\n+\n+    ServiceEventClientConfiguration[] serviceEventClientConfiguration = new ServiceEventClientConfiguration[]\n+            { new ServiceEventClientConfiguration(\"address\", \"subscriberName\", null),\n+             new ServiceEventClientConfiguration(\"address2\", \"subscriberName2\", null) };\n+\n+    @Test\n+    public void constructorRegularTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", entityManagerFactory, serviceEventClientConfiguration);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorAddressNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(null, entityManagerFactory, serviceEventClientConfiguration);\n+        assertNull(\"not_null\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorEntityNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", null, serviceEventClientConfiguration);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorClientConfigNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", entityManagerFactory, null);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());", "originalCommit": "d4f078b1dfb83c13e0b22edcd137f0948dec1727", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM2MTg3OA==", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r443361878", "body": "Please rename method to: \"ServiceEventModuleConfigurationNullEntityAndAddressTest\"", "bodyText": "Please rename method to: \"ServiceEventModuleConfigurationNullEntityAndAddressTest\"", "bodyHTML": "<p dir=\"auto\">Please rename method to: \"ServiceEventModuleConfigurationNullEntityAndAddressTest\"</p>", "author": "LeoNerdoG", "createdAt": "2020-06-22T07:21:37Z", "path": "commons/src/test/java/org/eclipse/kapua/commons/event/ServiceEventModuleConfigurationTest.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.commons.jpa.EntityManagerFactory;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category(JUnitTests.class)\n+public class ServiceEventModuleConfigurationTest extends Assert {\n+\n+    EntityManagerFactory entityManagerFactory;\n+\n+    ServiceEventClientConfiguration[] serviceEventClientConfiguration = new ServiceEventClientConfiguration[]\n+            { new ServiceEventClientConfiguration(\"address\", \"subscriberName\", null),\n+             new ServiceEventClientConfiguration(\"address2\", \"subscriberName2\", null) };\n+\n+    @Test\n+    public void constructorRegularTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", entityManagerFactory, serviceEventClientConfiguration);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorAddressNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(null, entityManagerFactory, serviceEventClientConfiguration);\n+        assertNull(\"not_null\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorEntityNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", null, serviceEventClientConfiguration);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorClientConfigNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", entityManagerFactory, null);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertNull(\"not_null\", moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorAddressAndEntityNullTest() {", "originalCommit": "d4f078b1dfb83c13e0b22edcd137f0948dec1727", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM2MTk1NQ==", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r443361955", "body": "Please change the message from \"not_null\" to \"Actual calue is not null\" or something similar. \"not_null\" is not enough.", "bodyText": "Please change the message from \"not_null\" to \"Actual calue is not null\" or something similar. \"not_null\" is not enough.", "bodyHTML": "<p dir=\"auto\">Please change the message from \"not_null\" to \"Actual calue is not null\" or something similar. \"not_null\" is not enough.</p>", "author": "LeoNerdoG", "createdAt": "2020-06-22T07:21:44Z", "path": "commons/src/test/java/org/eclipse/kapua/commons/event/ServiceEventModuleConfigurationTest.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.commons.jpa.EntityManagerFactory;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category(JUnitTests.class)\n+public class ServiceEventModuleConfigurationTest extends Assert {\n+\n+    EntityManagerFactory entityManagerFactory;\n+\n+    ServiceEventClientConfiguration[] serviceEventClientConfiguration = new ServiceEventClientConfiguration[]\n+            { new ServiceEventClientConfiguration(\"address\", \"subscriberName\", null),\n+             new ServiceEventClientConfiguration(\"address2\", \"subscriberName2\", null) };\n+\n+    @Test\n+    public void constructorRegularTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", entityManagerFactory, serviceEventClientConfiguration);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorAddressNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(null, entityManagerFactory, serviceEventClientConfiguration);\n+        assertNull(\"not_null\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorEntityNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", null, serviceEventClientConfiguration);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorClientConfigNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", entityManagerFactory, null);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertNull(\"not_null\", moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorAddressAndEntityNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(null, null, serviceEventClientConfiguration);\n+        assertNull(\"not_null\", moduleConfiguration.getInternalAddress());", "originalCommit": "d4f078b1dfb83c13e0b22edcd137f0948dec1727", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM2MTk5MA==", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r443361990", "body": "Please change the message from \"not_null\" to \"Actual calue is not null\" or something similar. \"not_null\" is not enough.", "bodyText": "Please change the message from \"not_null\" to \"Actual calue is not null\" or something similar. \"not_null\" is not enough.", "bodyHTML": "<p dir=\"auto\">Please change the message from \"not_null\" to \"Actual calue is not null\" or something similar. \"not_null\" is not enough.</p>", "author": "LeoNerdoG", "createdAt": "2020-06-22T07:21:49Z", "path": "commons/src/test/java/org/eclipse/kapua/commons/event/ServiceEventModuleConfigurationTest.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.commons.jpa.EntityManagerFactory;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category(JUnitTests.class)\n+public class ServiceEventModuleConfigurationTest extends Assert {\n+\n+    EntityManagerFactory entityManagerFactory;\n+\n+    ServiceEventClientConfiguration[] serviceEventClientConfiguration = new ServiceEventClientConfiguration[]\n+            { new ServiceEventClientConfiguration(\"address\", \"subscriberName\", null),\n+             new ServiceEventClientConfiguration(\"address2\", \"subscriberName2\", null) };\n+\n+    @Test\n+    public void constructorRegularTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", entityManagerFactory, serviceEventClientConfiguration);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorAddressNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(null, entityManagerFactory, serviceEventClientConfiguration);\n+        assertNull(\"not_null\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorEntityNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", null, serviceEventClientConfiguration);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorClientConfigNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", entityManagerFactory, null);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertNull(\"not_null\", moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorAddressAndEntityNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(null, null, serviceEventClientConfiguration);\n+        assertNull(\"not_null\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());", "originalCommit": "d4f078b1dfb83c13e0b22edcd137f0948dec1727", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM2MjA3MA==", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r443362070", "body": "Missing string message in the equals assert.", "bodyText": "Missing string message in the equals assert.", "bodyHTML": "<p dir=\"auto\">Missing string message in the equals assert.</p>", "author": "LeoNerdoG", "createdAt": "2020-06-22T07:22:00Z", "path": "commons/src/test/java/org/eclipse/kapua/commons/event/ServiceEventModuleConfigurationTest.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.commons.jpa.EntityManagerFactory;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category(JUnitTests.class)\n+public class ServiceEventModuleConfigurationTest extends Assert {\n+\n+    EntityManagerFactory entityManagerFactory;\n+\n+    ServiceEventClientConfiguration[] serviceEventClientConfiguration = new ServiceEventClientConfiguration[]\n+            { new ServiceEventClientConfiguration(\"address\", \"subscriberName\", null),\n+             new ServiceEventClientConfiguration(\"address2\", \"subscriberName2\", null) };\n+\n+    @Test\n+    public void constructorRegularTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", entityManagerFactory, serviceEventClientConfiguration);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorAddressNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(null, entityManagerFactory, serviceEventClientConfiguration);\n+        assertNull(\"not_null\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorEntityNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", null, serviceEventClientConfiguration);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorClientConfigNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", entityManagerFactory, null);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertNull(\"not_null\", moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorAddressAndEntityNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(null, null, serviceEventClientConfiguration);\n+        assertNull(\"not_null\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());", "originalCommit": "d4f078b1dfb83c13e0b22edcd137f0948dec1727", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM2MjY5NQ==", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r443362695", "body": "Missing string message in the equals assert.", "bodyText": "Missing string message in the equals assert.", "bodyHTML": "<p dir=\"auto\">Missing string message in the equals assert.</p>", "author": "LeoNerdoG", "createdAt": "2020-06-22T07:23:10Z", "path": "commons/src/test/java/org/eclipse/kapua/commons/event/ServiceEventModuleConfigurationTest.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.commons.jpa.EntityManagerFactory;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category(JUnitTests.class)\n+public class ServiceEventModuleConfigurationTest extends Assert {\n+\n+    EntityManagerFactory entityManagerFactory;\n+\n+    ServiceEventClientConfiguration[] serviceEventClientConfiguration = new ServiceEventClientConfiguration[]\n+            { new ServiceEventClientConfiguration(\"address\", \"subscriberName\", null),\n+             new ServiceEventClientConfiguration(\"address2\", \"subscriberName2\", null) };\n+\n+    @Test\n+    public void constructorRegularTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", entityManagerFactory, serviceEventClientConfiguration);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorAddressNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(null, entityManagerFactory, serviceEventClientConfiguration);\n+        assertNull(\"not_null\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorEntityNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", null, serviceEventClientConfiguration);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorClientConfigNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", entityManagerFactory, null);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertNull(\"not_null\", moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorAddressAndEntityNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(null, null, serviceEventClientConfiguration);\n+        assertNull(\"not_null\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorEntityAndClientConfigNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", null, null);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());", "originalCommit": "d4f078b1dfb83c13e0b22edcd137f0948dec1727", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM2Mjc1Ng==", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r443362756", "body": "Please change the message from \"not_null\" to \"Actual calue is not null\" or something similar. \"not_null\" is not enough.", "bodyText": "Please change the message from \"not_null\" to \"Actual calue is not null\" or something similar. \"not_null\" is not enough.", "bodyHTML": "<p dir=\"auto\">Please change the message from \"not_null\" to \"Actual calue is not null\" or something similar. \"not_null\" is not enough.</p>", "author": "LeoNerdoG", "createdAt": "2020-06-22T07:23:17Z", "path": "commons/src/test/java/org/eclipse/kapua/commons/event/ServiceEventModuleConfigurationTest.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.commons.jpa.EntityManagerFactory;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category(JUnitTests.class)\n+public class ServiceEventModuleConfigurationTest extends Assert {\n+\n+    EntityManagerFactory entityManagerFactory;\n+\n+    ServiceEventClientConfiguration[] serviceEventClientConfiguration = new ServiceEventClientConfiguration[]\n+            { new ServiceEventClientConfiguration(\"address\", \"subscriberName\", null),\n+             new ServiceEventClientConfiguration(\"address2\", \"subscriberName2\", null) };\n+\n+    @Test\n+    public void constructorRegularTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", entityManagerFactory, serviceEventClientConfiguration);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorAddressNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(null, entityManagerFactory, serviceEventClientConfiguration);\n+        assertNull(\"not_null\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorEntityNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", null, serviceEventClientConfiguration);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorClientConfigNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", entityManagerFactory, null);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertNull(\"not_null\", moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorAddressAndEntityNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(null, null, serviceEventClientConfiguration);\n+        assertNull(\"not_null\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorEntityAndClientConfigNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", null, null);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());", "originalCommit": "d4f078b1dfb83c13e0b22edcd137f0948dec1727", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM2Mjc5MA==", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r443362790", "body": "Please change the message from \"not_null\" to \"Actual calue is not null\" or something similar. \"not_null\" is not enough.", "bodyText": "Please change the message from \"not_null\" to \"Actual calue is not null\" or something similar. \"not_null\" is not enough.", "bodyHTML": "<p dir=\"auto\">Please change the message from \"not_null\" to \"Actual calue is not null\" or something similar. \"not_null\" is not enough.</p>", "author": "LeoNerdoG", "createdAt": "2020-06-22T07:23:21Z", "path": "commons/src/test/java/org/eclipse/kapua/commons/event/ServiceEventModuleConfigurationTest.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.commons.jpa.EntityManagerFactory;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category(JUnitTests.class)\n+public class ServiceEventModuleConfigurationTest extends Assert {\n+\n+    EntityManagerFactory entityManagerFactory;\n+\n+    ServiceEventClientConfiguration[] serviceEventClientConfiguration = new ServiceEventClientConfiguration[]\n+            { new ServiceEventClientConfiguration(\"address\", \"subscriberName\", null),\n+             new ServiceEventClientConfiguration(\"address2\", \"subscriberName2\", null) };\n+\n+    @Test\n+    public void constructorRegularTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", entityManagerFactory, serviceEventClientConfiguration);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorAddressNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(null, entityManagerFactory, serviceEventClientConfiguration);\n+        assertNull(\"not_null\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorEntityNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", null, serviceEventClientConfiguration);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorClientConfigNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", entityManagerFactory, null);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertNull(\"not_null\", moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorAddressAndEntityNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(null, null, serviceEventClientConfiguration);\n+        assertNull(\"not_null\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorEntityAndClientConfigNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", null, null);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertNull(\"not_null\", moduleConfiguration.getServiceEventClientConfigurations());", "originalCommit": "d4f078b1dfb83c13e0b22edcd137f0948dec1727", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM2MzEwNA==", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r443363104", "body": "Please rename method to: \"ServiceEventModuleConfigurationAllNullTest\"", "bodyText": "Please rename method to: \"ServiceEventModuleConfigurationAllNullTest\"", "bodyHTML": "<p dir=\"auto\">Please rename method to: \"ServiceEventModuleConfigurationAllNullTest\"</p>", "author": "LeoNerdoG", "createdAt": "2020-06-22T07:24:02Z", "path": "commons/src/test/java/org/eclipse/kapua/commons/event/ServiceEventModuleConfigurationTest.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.commons.jpa.EntityManagerFactory;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category(JUnitTests.class)\n+public class ServiceEventModuleConfigurationTest extends Assert {\n+\n+    EntityManagerFactory entityManagerFactory;\n+\n+    ServiceEventClientConfiguration[] serviceEventClientConfiguration = new ServiceEventClientConfiguration[]\n+            { new ServiceEventClientConfiguration(\"address\", \"subscriberName\", null),\n+             new ServiceEventClientConfiguration(\"address2\", \"subscriberName2\", null) };\n+\n+    @Test\n+    public void constructorRegularTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", entityManagerFactory, serviceEventClientConfiguration);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorAddressNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(null, entityManagerFactory, serviceEventClientConfiguration);\n+        assertNull(\"not_null\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorEntityNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", null, serviceEventClientConfiguration);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorClientConfigNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", entityManagerFactory, null);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertNull(\"not_null\", moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorAddressAndEntityNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(null, null, serviceEventClientConfiguration);\n+        assertNull(\"not_null\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorEntityAndClientConfigNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", null, null);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertNull(\"not_null\", moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorAllNullTest() {", "originalCommit": "d4f078b1dfb83c13e0b22edcd137f0948dec1727", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDcyNDg2NQ==", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r444724865", "bodyText": "Test...", "author": "code-incubus", "createdAt": "2020-06-24T08:19:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM2MzEwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM2MzE1OA==", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r443363158", "body": "Please change the message from \"not_null\" to \"Actual calue is not null\" or something similar. \"not_null\" is not enough.", "bodyText": "Please change the message from \"not_null\" to \"Actual calue is not null\" or something similar. \"not_null\" is not enough.", "bodyHTML": "<p dir=\"auto\">Please change the message from \"not_null\" to \"Actual calue is not null\" or something similar. \"not_null\" is not enough.</p>", "author": "LeoNerdoG", "createdAt": "2020-06-22T07:24:10Z", "path": "commons/src/test/java/org/eclipse/kapua/commons/event/ServiceEventModuleConfigurationTest.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.commons.jpa.EntityManagerFactory;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category(JUnitTests.class)\n+public class ServiceEventModuleConfigurationTest extends Assert {\n+\n+    EntityManagerFactory entityManagerFactory;\n+\n+    ServiceEventClientConfiguration[] serviceEventClientConfiguration = new ServiceEventClientConfiguration[]\n+            { new ServiceEventClientConfiguration(\"address\", \"subscriberName\", null),\n+             new ServiceEventClientConfiguration(\"address2\", \"subscriberName2\", null) };\n+\n+    @Test\n+    public void constructorRegularTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", entityManagerFactory, serviceEventClientConfiguration);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorAddressNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(null, entityManagerFactory, serviceEventClientConfiguration);\n+        assertNull(\"not_null\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorEntityNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", null, serviceEventClientConfiguration);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorClientConfigNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", entityManagerFactory, null);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertNull(\"not_null\", moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorAddressAndEntityNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(null, null, serviceEventClientConfiguration);\n+        assertNull(\"not_null\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorEntityAndClientConfigNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", null, null);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertNull(\"not_null\", moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorAllNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(null, null, null);\n+        assertNull(\"not_null\", moduleConfiguration.getInternalAddress());", "originalCommit": "d4f078b1dfb83c13e0b22edcd137f0948dec1727", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM2MzE5Mg==", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r443363192", "body": "Please change the message from \"not_null\" to \"Actual calue is not null\" or something similar. \"not_null\" is not enough.", "bodyText": "Please change the message from \"not_null\" to \"Actual calue is not null\" or something similar. \"not_null\" is not enough.", "bodyHTML": "<p dir=\"auto\">Please change the message from \"not_null\" to \"Actual calue is not null\" or something similar. \"not_null\" is not enough.</p>", "author": "LeoNerdoG", "createdAt": "2020-06-22T07:24:14Z", "path": "commons/src/test/java/org/eclipse/kapua/commons/event/ServiceEventModuleConfigurationTest.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.commons.jpa.EntityManagerFactory;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category(JUnitTests.class)\n+public class ServiceEventModuleConfigurationTest extends Assert {\n+\n+    EntityManagerFactory entityManagerFactory;\n+\n+    ServiceEventClientConfiguration[] serviceEventClientConfiguration = new ServiceEventClientConfiguration[]\n+            { new ServiceEventClientConfiguration(\"address\", \"subscriberName\", null),\n+             new ServiceEventClientConfiguration(\"address2\", \"subscriberName2\", null) };\n+\n+    @Test\n+    public void constructorRegularTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", entityManagerFactory, serviceEventClientConfiguration);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorAddressNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(null, entityManagerFactory, serviceEventClientConfiguration);\n+        assertNull(\"not_null\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorEntityNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", null, serviceEventClientConfiguration);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorClientConfigNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", entityManagerFactory, null);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertNull(\"not_null\", moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorAddressAndEntityNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(null, null, serviceEventClientConfiguration);\n+        assertNull(\"not_null\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorEntityAndClientConfigNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", null, null);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertNull(\"not_null\", moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorAllNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(null, null, null);\n+        assertNull(\"not_null\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());", "originalCommit": "d4f078b1dfb83c13e0b22edcd137f0948dec1727", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM2MzIxMw==", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r443363213", "body": "Please change the message from \"not_null\" to \"Actual calue is not null\" or something similar. \"not_null\" is not enough.", "bodyText": "Please change the message from \"not_null\" to \"Actual calue is not null\" or something similar. \"not_null\" is not enough.", "bodyHTML": "<p dir=\"auto\">Please change the message from \"not_null\" to \"Actual calue is not null\" or something similar. \"not_null\" is not enough.</p>", "author": "LeoNerdoG", "createdAt": "2020-06-22T07:24:17Z", "path": "commons/src/test/java/org/eclipse/kapua/commons/event/ServiceEventModuleConfigurationTest.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.commons.jpa.EntityManagerFactory;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category(JUnitTests.class)\n+public class ServiceEventModuleConfigurationTest extends Assert {\n+\n+    EntityManagerFactory entityManagerFactory;\n+\n+    ServiceEventClientConfiguration[] serviceEventClientConfiguration = new ServiceEventClientConfiguration[]\n+            { new ServiceEventClientConfiguration(\"address\", \"subscriberName\", null),\n+             new ServiceEventClientConfiguration(\"address2\", \"subscriberName2\", null) };\n+\n+    @Test\n+    public void constructorRegularTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", entityManagerFactory, serviceEventClientConfiguration);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorAddressNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(null, entityManagerFactory, serviceEventClientConfiguration);\n+        assertNull(\"not_null\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorEntityNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", null, serviceEventClientConfiguration);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorClientConfigNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", entityManagerFactory, null);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertNull(\"not_null\", moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorAddressAndEntityNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(null, null, serviceEventClientConfiguration);\n+        assertNull(\"not_null\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorEntityAndClientConfigNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", null, null);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertNull(\"not_null\", moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorAllNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(null, null, null);\n+        assertNull(\"not_null\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertNull(\"not_null\", moduleConfiguration.getServiceEventClientConfigurations());", "originalCommit": "d4f078b1dfb83c13e0b22edcd137f0948dec1727", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM2MzU5NA==", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r443363594", "body": "Some strings are double, some are not even tested, if they are parsed correctly. please see comments above in other classes how to fix this. ", "bodyText": "Some strings are double, some are not even tested, if they are parsed correctly. please see comments above in other classes how to fix this.", "bodyHTML": "<p dir=\"auto\">Some strings are double, some are not even tested, if they are parsed correctly. please see comments above in other classes how to fix this.</p>", "author": "LeoNerdoG", "createdAt": "2020-06-22T07:25:08Z", "path": "commons/src/test/java/org/eclipse/kapua/commons/event/ServiceEventModuleConfigurationTest.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.commons.jpa.EntityManagerFactory;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category(JUnitTests.class)\n+public class ServiceEventModuleConfigurationTest extends Assert {\n+\n+    EntityManagerFactory entityManagerFactory;\n+\n+    ServiceEventClientConfiguration[] serviceEventClientConfiguration = new ServiceEventClientConfiguration[]\n+            { new ServiceEventClientConfiguration(\"address\", \"subscriberName\", null),\n+             new ServiceEventClientConfiguration(\"address2\", \"subscriberName2\", null) };\n+\n+    @Test\n+    public void constructorRegularTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", entityManagerFactory, serviceEventClientConfiguration);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorAddressNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(null, entityManagerFactory, serviceEventClientConfiguration);\n+        assertNull(\"not_null\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorEntityNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", null, serviceEventClientConfiguration);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorClientConfigNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", entityManagerFactory, null);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertNull(\"not_null\", moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorAddressAndEntityNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(null, null, serviceEventClientConfiguration);\n+        assertNull(\"not_null\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorEntityAndClientConfigNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", null, null);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertNull(\"not_null\", moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorAllNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(null, null, null);\n+        assertNull(\"not_null\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertNull(\"not_null\", moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorAddressCharCheckTest() {\n+        String[] permittedValues = {\"\", \"!@#$%^^&**(-()_)+/|\", \"regularNaming\", \"regular Naming\", \"49\", \"regularNaming49\", \"NAMING\", \"246465494135646120009090049684646496468456468496846464968496844\"};", "originalCommit": "d4f078b1dfb83c13e0b22edcd137f0948dec1727", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM2Mzc4Mg==", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r443363782", "body": "Please change the message from \"not_null\" to \"Actual calue is not null\" or something similar. \"not_null\" is not enough.", "bodyText": "Please change the message from \"not_null\" to \"Actual calue is not null\" or something similar. \"not_null\" is not enough.", "bodyHTML": "<p dir=\"auto\">Please change the message from \"not_null\" to \"Actual calue is not null\" or something similar. \"not_null\" is not enough.</p>", "author": "LeoNerdoG", "createdAt": "2020-06-22T07:25:31Z", "path": "commons/src/test/java/org/eclipse/kapua/commons/event/ServiceEventModuleConfigurationTest.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.commons.jpa.EntityManagerFactory;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category(JUnitTests.class)\n+public class ServiceEventModuleConfigurationTest extends Assert {\n+\n+    EntityManagerFactory entityManagerFactory;\n+\n+    ServiceEventClientConfiguration[] serviceEventClientConfiguration = new ServiceEventClientConfiguration[]\n+            { new ServiceEventClientConfiguration(\"address\", \"subscriberName\", null),\n+             new ServiceEventClientConfiguration(\"address2\", \"subscriberName2\", null) };\n+\n+    @Test\n+    public void constructorRegularTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", entityManagerFactory, serviceEventClientConfiguration);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorAddressNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(null, entityManagerFactory, serviceEventClientConfiguration);\n+        assertNull(\"not_null\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorEntityNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", null, serviceEventClientConfiguration);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorClientConfigNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", entityManagerFactory, null);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertNull(\"not_null\", moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorAddressAndEntityNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(null, null, serviceEventClientConfiguration);\n+        assertNull(\"not_null\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorEntityAndClientConfigNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", null, null);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertNull(\"not_null\", moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorAllNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(null, null, null);\n+        assertNull(\"not_null\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertNull(\"not_null\", moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorAddressCharCheckTest() {\n+        String[] permittedValues = {\"\", \"!@#$%^^&**(-()_)+/|\", \"regularNaming\", \"regular Naming\", \"49\", \"regularNaming49\", \"NAMING\", \"246465494135646120009090049684646496468456468496846464968496844\"};\n+        for (String value : permittedValues) {\n+            ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(value, entityManagerFactory, serviceEventClientConfiguration);\n+            assertEquals(\"not_equals\", value, moduleConfiguration.getInternalAddress());\n+            assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());", "originalCommit": "d4f078b1dfb83c13e0b22edcd137f0948dec1727", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM2Mzg2MA==", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r443363860", "body": "Missing string message in the equals assert.", "bodyText": "Missing string message in the equals assert.", "bodyHTML": "<p dir=\"auto\">Missing string message in the equals assert.</p>", "author": "LeoNerdoG", "createdAt": "2020-06-22T07:25:40Z", "path": "commons/src/test/java/org/eclipse/kapua/commons/event/ServiceEventModuleConfigurationTest.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.commons.jpa.EntityManagerFactory;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category(JUnitTests.class)\n+public class ServiceEventModuleConfigurationTest extends Assert {\n+\n+    EntityManagerFactory entityManagerFactory;\n+\n+    ServiceEventClientConfiguration[] serviceEventClientConfiguration = new ServiceEventClientConfiguration[]\n+            { new ServiceEventClientConfiguration(\"address\", \"subscriberName\", null),\n+             new ServiceEventClientConfiguration(\"address2\", \"subscriberName2\", null) };\n+\n+    @Test\n+    public void constructorRegularTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", entityManagerFactory, serviceEventClientConfiguration);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorAddressNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(null, entityManagerFactory, serviceEventClientConfiguration);\n+        assertNull(\"not_null\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorEntityNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", null, serviceEventClientConfiguration);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorClientConfigNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", entityManagerFactory, null);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertNull(\"not_null\", moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorAddressAndEntityNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(null, null, serviceEventClientConfiguration);\n+        assertNull(\"not_null\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorEntityAndClientConfigNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", null, null);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertNull(\"not_null\", moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorAllNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(null, null, null);\n+        assertNull(\"not_null\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertNull(\"not_null\", moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorAddressCharCheckTest() {\n+        String[] permittedValues = {\"\", \"!@#$%^^&**(-()_)+/|\", \"regularNaming\", \"regular Naming\", \"49\", \"regularNaming49\", \"NAMING\", \"246465494135646120009090049684646496468456468496846464968496844\"};\n+        for (String value : permittedValues) {\n+            ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(value, entityManagerFactory, serviceEventClientConfiguration);\n+            assertEquals(\"not_equals\", value, moduleConfiguration.getInternalAddress());\n+            assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+            assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());", "originalCommit": "d4f078b1dfb83c13e0b22edcd137f0948dec1727", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM2NDAyMQ==", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r443364021", "body": "Please change the message from \"not_equals\" to \"Expected and actual values are not equals\" or soemthing similar. \"not_equals\" is not enough.", "bodyText": "Please change the message from \"not_equals\" to \"Expected and actual values are not equals\" or soemthing similar. \"not_equals\" is not enough.", "bodyHTML": "<p dir=\"auto\">Please change the message from \"not_equals\" to \"Expected and actual values are not equals\" or soemthing similar. \"not_equals\" is not enough.</p>", "author": "LeoNerdoG", "createdAt": "2020-06-22T07:25:59Z", "path": "commons/src/test/java/org/eclipse/kapua/commons/event/ServiceEventModuleConfigurationTest.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.commons.jpa.EntityManagerFactory;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category(JUnitTests.class)\n+public class ServiceEventModuleConfigurationTest extends Assert {\n+\n+    EntityManagerFactory entityManagerFactory;\n+\n+    ServiceEventClientConfiguration[] serviceEventClientConfiguration = new ServiceEventClientConfiguration[]\n+            { new ServiceEventClientConfiguration(\"address\", \"subscriberName\", null),\n+             new ServiceEventClientConfiguration(\"address2\", \"subscriberName2\", null) };\n+\n+    @Test\n+    public void constructorRegularTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", entityManagerFactory, serviceEventClientConfiguration);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorAddressNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(null, entityManagerFactory, serviceEventClientConfiguration);\n+        assertNull(\"not_null\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorEntityNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", null, serviceEventClientConfiguration);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorClientConfigNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", entityManagerFactory, null);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertNull(\"not_null\", moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorAddressAndEntityNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(null, null, serviceEventClientConfiguration);\n+        assertNull(\"not_null\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertArrayEquals(serviceEventClientConfiguration, moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorEntityAndClientConfigNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(\"internalAddress\", null, null);\n+        assertEquals(\"not_equals\", \"internalAddress\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertNull(\"not_null\", moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorAllNullTest() {\n+        ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(null, null, null);\n+        assertNull(\"not_null\", moduleConfiguration.getInternalAddress());\n+        assertNull(\"not_null\", moduleConfiguration.getEntityManagerFactory());\n+        assertNull(\"not_null\", moduleConfiguration.getServiceEventClientConfigurations());\n+    }\n+\n+    @Test\n+    public void constructorAddressCharCheckTest() {\n+        String[] permittedValues = {\"\", \"!@#$%^^&**(-()_)+/|\", \"regularNaming\", \"regular Naming\", \"49\", \"regularNaming49\", \"NAMING\", \"246465494135646120009090049684646496468456468496846464968496844\"};\n+        for (String value : permittedValues) {\n+            ServiceEventModuleConfiguration moduleConfiguration = new ServiceEventModuleConfiguration(value, entityManagerFactory, serviceEventClientConfiguration);\n+            assertEquals(\"not_equals\", value, moduleConfiguration.getInternalAddress());", "originalCommit": "d4f078b1dfb83c13e0b22edcd137f0948dec1727", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY1NjkzOQ==", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r444656939", "body": "If you can't find a way, delete the test. ", "bodyText": "If you can't find a way, delete the test.", "bodyHTML": "<p dir=\"auto\">If you can't find a way, delete the test.</p>", "author": "LeoNerdoG", "createdAt": "2020-06-24T05:43:55Z", "path": "commons/src/test/java/org/eclipse/kapua/commons/event/ServiceEventScopeTest.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.event;\n+\n+import org.eclipse.kapua.KapuaRuntimeException;\n+import org.eclipse.kapua.event.ServiceEvent;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+import java.lang.reflect.Field;\n+import java.util.Stack;\n+\n+@Category(JUnitTests.class)\n+public class ServiceEventScopeTest extends Assert {\n+\n+    ServiceEvent serviceEvent;\n+\n+    @Before\n+    public void createInstanceOfClasses() {\n+        serviceEvent = new ServiceEvent();\n+    }\n+\n+    @Test\n+    public void serviceEventBeginNullTest() throws Exception {\n+        ServiceEventScope.begin();\n+        Field privateEventContextThdLocal = ServiceEventScope.class.getDeclaredField(\"eventContextThdLocal\");\n+        privateEventContextThdLocal.setAccessible(true);\n+        ThreadLocal<Stack<ServiceEvent>> fieldValue = (ThreadLocal<Stack<ServiceEvent>>) privateEventContextThdLocal.get(null);\n+        assertNotNull(fieldValue.get().peek().getContextId());\n+    }\n+\n+    @Test(expected = KapuaRuntimeException.class)\n+    public void serviceEventEndNullTest() throws Exception {\n+        Field privateEventContextThdLocal = ServiceEventScope.class.getDeclaredField(\"eventContextThdLocal\");\n+        privateEventContextThdLocal.setAccessible(true);\n+        ThreadLocal<Stack<ServiceEvent>> fieldValue = (ThreadLocal<Stack<ServiceEvent>>) privateEventContextThdLocal.get(null);\n+        fieldValue.set(null);\n+        ServiceEventScope.end();\n+    }\n+\n+    @Test\n+    public void serviceEventBeginEndTest() throws Exception {\n+        ServiceEventScope.begin();\n+        Field privateEventContextThdLocal = ServiceEventScope.class.getDeclaredField(\"eventContextThdLocal\");\n+        privateEventContextThdLocal.setAccessible(true);\n+        ThreadLocal<Stack<ServiceEvent>> fieldValue = (ThreadLocal<Stack<ServiceEvent>>) privateEventContextThdLocal.get(null);\n+        ServiceEventScope.end();\n+        assertNull(\"not_null\", fieldValue.get());\n+    }\n+\n+    @Test\n+    public void serviceEventSetAndGetRegularTest() {\n+        ServiceEventScope.set(serviceEvent);\n+        assertEquals(\"not_equals\", serviceEvent, ServiceEventScope.get());\n+    }\n+\n+//    @Test // This test should be run separately from the test suite", "originalCommit": "d4f078b1dfb83c13e0b22edcd137f0948dec1727", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY1ODQzNw==", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r444658437", "body": "Please move these two lines above \"@before\". ", "bodyText": "Please move these two lines above \"@before\".", "bodyHTML": "<p dir=\"auto\">Please move these two lines above \"<a class=\"user-mention\" data-hovercard-type=\"organization\" data-hovercard-url=\"/orgs/before/hovercard\" href=\"https://github.com/before\">@before</a>\".</p>", "author": "LeoNerdoG", "createdAt": "2020-06-24T05:49:03Z", "path": "commons/src/test/java/org/eclipse/kapua/commons/metric/MetricsServiceImplTest.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.metric;\n+\n+import com.codahale.metrics.MetricRegistry;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import java.lang.reflect.Constructor;\n+\n+@Category(JUnitTests.class)\n+public class MetricsServiceImplTest extends Assert {\n+\n+    @Before\n+    public void createInstanceOfClasses() {\n+        metricServiceImpl = new MetricsServiceImpl();\n+        metricRegistry = new MetricRegistry();\n+    }\n+\n+    MetricRegistry metricRegistry;", "originalCommit": "d4f078b1dfb83c13e0b22edcd137f0948dec1727", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY1ODk2OQ==", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r444658969", "body": "Please change method name to: \"MetricsServiceImplConstructorTest\" or something similar. ", "bodyText": "Please change method name to: \"MetricsServiceImplConstructorTest\" or something similar.", "bodyHTML": "<p dir=\"auto\">Please change method name to: \"MetricsServiceImplConstructorTest\" or something similar.</p>", "author": "LeoNerdoG", "createdAt": "2020-06-24T05:50:45Z", "path": "commons/src/test/java/org/eclipse/kapua/commons/metric/MetricsServiceImplTest.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.metric;\n+\n+import com.codahale.metrics.MetricRegistry;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import java.lang.reflect.Constructor;\n+\n+@Category(JUnitTests.class)\n+public class MetricsServiceImplTest extends Assert {\n+\n+    @Before\n+    public void createInstanceOfClasses() {\n+        metricServiceImpl = new MetricsServiceImpl();\n+        metricRegistry = new MetricRegistry();\n+    }\n+\n+    MetricRegistry metricRegistry;\n+    MetricsServiceImpl metricServiceImpl;\n+\n+    @Test\n+    public void constructorLogicTest() throws Exception {", "originalCommit": "d4f078b1dfb83c13e0b22edcd137f0948dec1727", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY1OTA1NQ==", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r444659055", "body": "Constructor is not private - why are you doing this?", "bodyText": "Constructor is not private - why are you doing this?", "bodyHTML": "<p dir=\"auto\">Constructor is not private - why are you doing this?</p>", "author": "LeoNerdoG", "createdAt": "2020-06-24T05:50:57Z", "path": "commons/src/test/java/org/eclipse/kapua/commons/metric/MetricsServiceImplTest.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.metric;\n+\n+import com.codahale.metrics.MetricRegistry;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import java.lang.reflect.Constructor;\n+\n+@Category(JUnitTests.class)\n+public class MetricsServiceImplTest extends Assert {\n+\n+    @Before\n+    public void createInstanceOfClasses() {\n+        metricServiceImpl = new MetricsServiceImpl();\n+        metricRegistry = new MetricRegistry();\n+    }\n+\n+    MetricRegistry metricRegistry;\n+    MetricsServiceImpl metricServiceImpl;\n+\n+    @Test\n+    public void constructorLogicTest() throws Exception {\n+        Constructor<MetricsServiceImpl> metricsServiceConstructor = MetricsServiceImpl.class.getDeclaredConstructor();", "originalCommit": "d4f078b1dfb83c13e0b22edcd137f0948dec1727", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY2MDE4OQ==", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r444660189", "body": "Please try to use assertEquals or assertThat. \r\nChange the message accordingly. ", "bodyText": "Please try to use assertEquals or assertThat.\nChange the message accordingly.", "bodyHTML": "<p dir=\"auto\">Please try to use assertEquals or assertThat.<br>\nChange the message accordingly.</p>", "author": "LeoNerdoG", "createdAt": "2020-06-24T05:54:38Z", "path": "commons/src/test/java/org/eclipse/kapua/commons/metric/MetricsServiceImplTest.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.metric;\n+\n+import com.codahale.metrics.MetricRegistry;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import java.lang.reflect.Constructor;\n+\n+@Category(JUnitTests.class)\n+public class MetricsServiceImplTest extends Assert {\n+\n+    @Before\n+    public void createInstanceOfClasses() {\n+        metricServiceImpl = new MetricsServiceImpl();\n+        metricRegistry = new MetricRegistry();\n+    }\n+\n+    MetricRegistry metricRegistry;\n+    MetricsServiceImpl metricServiceImpl;\n+\n+    @Test\n+    public void constructorLogicTest() throws Exception {\n+        Constructor<MetricsServiceImpl> metricsServiceConstructor = MetricsServiceImpl.class.getDeclaredConstructor();\n+        metricsServiceConstructor.setAccessible(true);\n+        metricsServiceConstructor.newInstance();\n+    }\n+\n+    @Test\n+    public void getMetricRegistry() {\n+        assertNotNull(metricServiceImpl.getMetricRegistry());\n+    }\n+\n+    @Test\n+    public void getCounterTest() {\n+        assertNotNull(\"null\", metricServiceImpl.getCounter(\"module\", \"component\", \"name1\", \"name2\", \"name3\"));", "originalCommit": "d4f078b1dfb83c13e0b22edcd137f0948dec1727", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY2MDIxOA==", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r444660218", "body": "Please try to use assertEquals or assertThat. \r\nChange the message accordingly. ", "bodyText": "Please try to use assertEquals or assertThat.\nChange the message accordingly.", "bodyHTML": "<p dir=\"auto\">Please try to use assertEquals or assertThat.<br>\nChange the message accordingly.</p>", "author": "LeoNerdoG", "createdAt": "2020-06-24T05:54:44Z", "path": "commons/src/test/java/org/eclipse/kapua/commons/metric/MetricsServiceImplTest.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.metric;\n+\n+import com.codahale.metrics.MetricRegistry;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import java.lang.reflect.Constructor;\n+\n+@Category(JUnitTests.class)\n+public class MetricsServiceImplTest extends Assert {\n+\n+    @Before\n+    public void createInstanceOfClasses() {\n+        metricServiceImpl = new MetricsServiceImpl();\n+        metricRegistry = new MetricRegistry();\n+    }\n+\n+    MetricRegistry metricRegistry;\n+    MetricsServiceImpl metricServiceImpl;\n+\n+    @Test\n+    public void constructorLogicTest() throws Exception {\n+        Constructor<MetricsServiceImpl> metricsServiceConstructor = MetricsServiceImpl.class.getDeclaredConstructor();\n+        metricsServiceConstructor.setAccessible(true);\n+        metricsServiceConstructor.newInstance();\n+    }\n+\n+    @Test\n+    public void getMetricRegistry() {\n+        assertNotNull(metricServiceImpl.getMetricRegistry());\n+    }\n+\n+    @Test\n+    public void getCounterTest() {\n+        assertNotNull(\"null\", metricServiceImpl.getCounter(\"module\", \"component\", \"name1\", \"name2\", \"name3\"));\n+    }\n+\n+    @Test\n+    public void getHistogramTest() {\n+        assertNotNull(\"null\", metricServiceImpl.getHistogram(\"module\", \"component\", \"name1\", \"name2\", \"name3\"));", "originalCommit": "d4f078b1dfb83c13e0b22edcd137f0948dec1727", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY2MDIyMw==", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r444660223", "body": "Please try to use assertEquals or assertThat. \r\nChange the message accordingly. ", "bodyText": "Please try to use assertEquals or assertThat.\nChange the message accordingly.", "bodyHTML": "<p dir=\"auto\">Please try to use assertEquals or assertThat.<br>\nChange the message accordingly.</p>", "author": "LeoNerdoG", "createdAt": "2020-06-24T05:54:44Z", "path": "commons/src/test/java/org/eclipse/kapua/commons/metric/MetricsServiceImplTest.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.metric;\n+\n+import com.codahale.metrics.MetricRegistry;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import java.lang.reflect.Constructor;\n+\n+@Category(JUnitTests.class)\n+public class MetricsServiceImplTest extends Assert {\n+\n+    @Before\n+    public void createInstanceOfClasses() {\n+        metricServiceImpl = new MetricsServiceImpl();\n+        metricRegistry = new MetricRegistry();\n+    }\n+\n+    MetricRegistry metricRegistry;\n+    MetricsServiceImpl metricServiceImpl;\n+\n+    @Test\n+    public void constructorLogicTest() throws Exception {\n+        Constructor<MetricsServiceImpl> metricsServiceConstructor = MetricsServiceImpl.class.getDeclaredConstructor();\n+        metricsServiceConstructor.setAccessible(true);\n+        metricsServiceConstructor.newInstance();\n+    }\n+\n+    @Test\n+    public void getMetricRegistry() {\n+        assertNotNull(metricServiceImpl.getMetricRegistry());\n+    }\n+\n+    @Test\n+    public void getCounterTest() {\n+        assertNotNull(\"null\", metricServiceImpl.getCounter(\"module\", \"component\", \"name1\", \"name2\", \"name3\"));\n+    }\n+\n+    @Test\n+    public void getHistogramTest() {\n+        assertNotNull(\"null\", metricServiceImpl.getHistogram(\"module\", \"component\", \"name1\", \"name2\", \"name3\"));\n+    }\n+\n+    @Test\n+    public void getTimerTest() {\n+        assertNotNull(\"null\", metricServiceImpl.getTimer(\"module\", \"component\", \"name1\", \"name2\", \"name3\"));", "originalCommit": "d4f078b1dfb83c13e0b22edcd137f0948dec1727", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY2MzI4Mw==", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r444663283", "body": "Please change the header of the file to: \r\n/*******************************************************************************\r\n * Copyright (c) 2016, 2020 Eurotech and/or its affiliates and others\r\n *\r\n * All rights reserved. This program and the accompanying materials\r\n * are made available under the terms of the Eclipse Public License v1.0\r\n * which accompanies this distribution, and is available at\r\n * http://www.eclipse.org/legal/epl-v10.html\r\n *\r\n * Contributors:\r\n *     Eurotech - initial API and implementation\r\n *******************************************************************************/", "bodyText": "Please change the header of the file to:\n/*******************************************************************************\n\nCopyright (c) 2016, 2020 Eurotech and/or its affiliates and others\n\nAll rights reserved. This program and the accompanying materials\nare made available under the terms of the Eclipse Public License v1.0\nwhich accompanies this distribution, and is available at\nhttp://www.eclipse.org/legal/epl-v10.html\n\nContributors:\n\nEurotech - initial API and implementation\n\n\n\n*******************************************************************************/", "bodyHTML": "<p dir=\"auto\">Please change the header of the file to:<br>\n/*******************************************************************************</p>\n<ul dir=\"auto\">\n<li>Copyright (c) 2016, 2020 Eurotech and/or its affiliates and others</li>\n<li></li>\n<li>All rights reserved. This program and the accompanying materials</li>\n<li>are made available under the terms of the Eclipse Public License v1.0</li>\n<li>which accompanies this distribution, and is available at</li>\n<li><a href=\"http://www.eclipse.org/legal/epl-v10.html\" rel=\"nofollow\">http://www.eclipse.org/legal/epl-v10.html</a></li>\n<li></li>\n<li>Contributors:</li>\n<li>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"Eurotech - initial API and implementation\"><pre><code>Eurotech - initial API and implementation\n</code></pre></div>\n</li>\n</ul>\n<p dir=\"auto\">*******************************************************************************/</p>", "author": "LeoNerdoG", "createdAt": "2020-06-24T06:04:36Z", "path": "qa/common/src/main/java/org/eclipse/kapua/qa/common/TestJAXBContextProvider.java", "diffHunk": "@@ -19,6 +19,7 @@\n import org.eclipse.kapua.broker.core.router.SimpleEndPoint;\n import org.eclipse.kapua.commons.configuration.metatype.TscalarImpl;\n import org.eclipse.kapua.commons.util.xml.JAXBContextProvider;\n+import org.eclipse.kapua.event.ServiceEvent;", "originalCommit": "d4f078b1dfb83c13e0b22edcd137f0948dec1727", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY2NDc4Mw==", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r444664783", "body": "Please change message to \"Expected and actual values are not the same.\"", "bodyText": "Please change message to \"Expected and actual values are not the same.\"", "bodyHTML": "<p dir=\"auto\">Please change message to \"Expected and actual values are not the same.\"</p>", "author": "LeoNerdoG", "createdAt": "2020-06-24T06:09:05Z", "path": "qa/integration/src/test/java/org/eclipse/kapua/integration/misc/JsonServiceEventMarshalerTest.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.integration.misc;\n+\n+import org.eclipse.kapua.KapuaException;\n+import org.eclipse.kapua.commons.event.JsonServiceEventMarshaler;\n+import org.eclipse.kapua.commons.util.xml.XmlUtil;\n+import org.eclipse.kapua.event.ServiceEvent;\n+import org.eclipse.kapua.event.ServiceEventBusException;\n+import org.eclipse.kapua.qa.common.TestJAXBContextProvider;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+import java.io.StringWriter;\n+\n+@Category(JUnitTests.class)\n+public class JsonServiceEventMarshalerTest extends Assert {\n+\n+    ServiceEvent serviceEvent;\n+    JsonServiceEventMarshaler jsonServiceEventMarshaler;\n+    StringWriter stringWriter;\n+\n+    @Before\n+    public void createInstanceOfClasses() {\n+        serviceEvent = new ServiceEvent();\n+        jsonServiceEventMarshaler = new JsonServiceEventMarshaler();\n+        stringWriter = new StringWriter();\n+    }\n+\n+    @Test(expected = ServiceEventBusException.class)\n+    public void marshalJsonWithNullContextTest() throws Exception {\n+        jsonServiceEventMarshaler.marshal(null);\n+    }\n+\n+    @Test\n+    public void marshalJsonWithoutContextTest() throws ServiceEventBusException {\n+        stringWriter.write(\"{\\n}\");\n+        String expectedValues = stringWriter.toString();\n+        XmlUtil.setContextProvider(new TestJAXBContextProvider());\n+        assertEquals(\"not_equals\", expectedValues, jsonServiceEventMarshaler.marshal(serviceEvent));", "originalCommit": "d4f078b1dfb83c13e0b22edcd137f0948dec1727", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY2NDg5NQ==", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r444664895", "body": "Please change message to \"Expected and actual values are not the same.\"", "bodyText": "Please change message to \"Expected and actual values are not the same.\"", "bodyHTML": "<p dir=\"auto\">Please change message to \"Expected and actual values are not the same.\"</p>", "author": "LeoNerdoG", "createdAt": "2020-06-24T06:09:27Z", "path": "qa/integration/src/test/java/org/eclipse/kapua/integration/misc/JsonServiceEventMarshalerTest.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.integration.misc;\n+\n+import org.eclipse.kapua.KapuaException;\n+import org.eclipse.kapua.commons.event.JsonServiceEventMarshaler;\n+import org.eclipse.kapua.commons.util.xml.XmlUtil;\n+import org.eclipse.kapua.event.ServiceEvent;\n+import org.eclipse.kapua.event.ServiceEventBusException;\n+import org.eclipse.kapua.qa.common.TestJAXBContextProvider;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+import java.io.StringWriter;\n+\n+@Category(JUnitTests.class)\n+public class JsonServiceEventMarshalerTest extends Assert {\n+\n+    ServiceEvent serviceEvent;\n+    JsonServiceEventMarshaler jsonServiceEventMarshaler;\n+    StringWriter stringWriter;\n+\n+    @Before\n+    public void createInstanceOfClasses() {\n+        serviceEvent = new ServiceEvent();\n+        jsonServiceEventMarshaler = new JsonServiceEventMarshaler();\n+        stringWriter = new StringWriter();\n+    }\n+\n+    @Test(expected = ServiceEventBusException.class)\n+    public void marshalJsonWithNullContextTest() throws Exception {\n+        jsonServiceEventMarshaler.marshal(null);\n+    }\n+\n+    @Test\n+    public void marshalJsonWithoutContextTest() throws ServiceEventBusException {\n+        stringWriter.write(\"{\\n}\");\n+        String expectedValues = stringWriter.toString();\n+        XmlUtil.setContextProvider(new TestJAXBContextProvider());\n+        assertEquals(\"not_equals\", expectedValues, jsonServiceEventMarshaler.marshal(serviceEvent));\n+    }\n+\n+    @Test\n+    public void marshalJsonWithContextTest() throws ServiceEventBusException {\n+        stringWriter.write(\"{\\n\" +\n+                \"   \\\"id\\\" : \\\"id\\\",\\n\" +\n+                \"   \\\"contextId\\\" : \\\"contextId\\\",\\n\" +\n+                \"   \\\"entityType\\\" : \\\"entityType\\\",\\n\" +\n+                \"   \\\"status\\\" : \\\"SENT\\\",\\n\" +\n+                \"   \\\"note\\\" : \\\"note\\\"\\n\" +\n+                \"}\");\n+\n+        String expectedValues = stringWriter.toString();\n+        serviceEvent.setId(\"id\");\n+        serviceEvent.setContextId(\"contextId\");\n+        serviceEvent.setEntityType(\"entityType\");\n+        serviceEvent.setStatus(ServiceEvent.EventStatus.SENT);\n+        serviceEvent.setNote(\"note\");\n+\n+        XmlUtil.setContextProvider(new TestJAXBContextProvider());\n+        assertEquals(\"not_equals\", expectedValues, jsonServiceEventMarshaler.marshal(serviceEvent));", "originalCommit": "d4f078b1dfb83c13e0b22edcd137f0948dec1727", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY2NTAxMA==", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r444665010", "body": "Please change message to \"Expected and actual values are not the same.\"", "bodyText": "Please change message to \"Expected and actual values are not the same.\"", "bodyHTML": "<p dir=\"auto\">Please change message to \"Expected and actual values are not the same.\"</p>", "author": "LeoNerdoG", "createdAt": "2020-06-24T06:09:48Z", "path": "qa/integration/src/test/java/org/eclipse/kapua/integration/misc/JsonServiceEventMarshalerTest.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.integration.misc;\n+\n+import org.eclipse.kapua.KapuaException;\n+import org.eclipse.kapua.commons.event.JsonServiceEventMarshaler;\n+import org.eclipse.kapua.commons.util.xml.XmlUtil;\n+import org.eclipse.kapua.event.ServiceEvent;\n+import org.eclipse.kapua.event.ServiceEventBusException;\n+import org.eclipse.kapua.qa.common.TestJAXBContextProvider;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+import java.io.StringWriter;\n+\n+@Category(JUnitTests.class)\n+public class JsonServiceEventMarshalerTest extends Assert {\n+\n+    ServiceEvent serviceEvent;\n+    JsonServiceEventMarshaler jsonServiceEventMarshaler;\n+    StringWriter stringWriter;\n+\n+    @Before\n+    public void createInstanceOfClasses() {\n+        serviceEvent = new ServiceEvent();\n+        jsonServiceEventMarshaler = new JsonServiceEventMarshaler();\n+        stringWriter = new StringWriter();\n+    }\n+\n+    @Test(expected = ServiceEventBusException.class)\n+    public void marshalJsonWithNullContextTest() throws Exception {\n+        jsonServiceEventMarshaler.marshal(null);\n+    }\n+\n+    @Test\n+    public void marshalJsonWithoutContextTest() throws ServiceEventBusException {\n+        stringWriter.write(\"{\\n}\");\n+        String expectedValues = stringWriter.toString();\n+        XmlUtil.setContextProvider(new TestJAXBContextProvider());\n+        assertEquals(\"not_equals\", expectedValues, jsonServiceEventMarshaler.marshal(serviceEvent));\n+    }\n+\n+    @Test\n+    public void marshalJsonWithContextTest() throws ServiceEventBusException {\n+        stringWriter.write(\"{\\n\" +\n+                \"   \\\"id\\\" : \\\"id\\\",\\n\" +\n+                \"   \\\"contextId\\\" : \\\"contextId\\\",\\n\" +\n+                \"   \\\"entityType\\\" : \\\"entityType\\\",\\n\" +\n+                \"   \\\"status\\\" : \\\"SENT\\\",\\n\" +\n+                \"   \\\"note\\\" : \\\"note\\\"\\n\" +\n+                \"}\");\n+\n+        String expectedValues = stringWriter.toString();\n+        serviceEvent.setId(\"id\");\n+        serviceEvent.setContextId(\"contextId\");\n+        serviceEvent.setEntityType(\"entityType\");\n+        serviceEvent.setStatus(ServiceEvent.EventStatus.SENT);\n+        serviceEvent.setNote(\"note\");\n+\n+        XmlUtil.setContextProvider(new TestJAXBContextProvider());\n+        assertEquals(\"not_equals\", expectedValues, jsonServiceEventMarshaler.marshal(serviceEvent));\n+    }\n+\n+    @Test(expected = NullPointerException.class)\n+    public void unmarshalJsonWithNullContextTest() throws Exception {\n+        jsonServiceEventMarshaler.unmarshal(null);\n+    }\n+\n+    @Test\n+    public void unmarshalJsonWithContextTest() throws KapuaException {\n+        XmlUtil.setContextProvider(new TestJAXBContextProvider());\n+        ServiceEvent elements = jsonServiceEventMarshaler.unmarshal(\"{\\n\" +\n+                \"   \\\"id\\\" : \\\"id\\\",\\n\" +\n+                \"   \\\"contextId\\\" : \\\"contextId\\\",\\n\" +\n+                \"   \\\"entityType\\\" : \\\"entityType\\\",\\n\" +\n+                \"   \\\"status\\\" : \\\"SENT\\\",\\n\" +\n+                \"   \\\"note\\\" : \\\"note\\\"\\n\" +\n+                \"}\");\n+\n+        assertEquals(\"not_equals\", \"id\", elements.getId());", "originalCommit": "d4f078b1dfb83c13e0b22edcd137f0948dec1727", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY2NTAxNw==", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r444665017", "body": "Please change message to \"Expected and actual values are not the same.\"", "bodyText": "Please change message to \"Expected and actual values are not the same.\"", "bodyHTML": "<p dir=\"auto\">Please change message to \"Expected and actual values are not the same.\"</p>", "author": "LeoNerdoG", "createdAt": "2020-06-24T06:09:51Z", "path": "qa/integration/src/test/java/org/eclipse/kapua/integration/misc/JsonServiceEventMarshalerTest.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.integration.misc;\n+\n+import org.eclipse.kapua.KapuaException;\n+import org.eclipse.kapua.commons.event.JsonServiceEventMarshaler;\n+import org.eclipse.kapua.commons.util.xml.XmlUtil;\n+import org.eclipse.kapua.event.ServiceEvent;\n+import org.eclipse.kapua.event.ServiceEventBusException;\n+import org.eclipse.kapua.qa.common.TestJAXBContextProvider;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+import java.io.StringWriter;\n+\n+@Category(JUnitTests.class)\n+public class JsonServiceEventMarshalerTest extends Assert {\n+\n+    ServiceEvent serviceEvent;\n+    JsonServiceEventMarshaler jsonServiceEventMarshaler;\n+    StringWriter stringWriter;\n+\n+    @Before\n+    public void createInstanceOfClasses() {\n+        serviceEvent = new ServiceEvent();\n+        jsonServiceEventMarshaler = new JsonServiceEventMarshaler();\n+        stringWriter = new StringWriter();\n+    }\n+\n+    @Test(expected = ServiceEventBusException.class)\n+    public void marshalJsonWithNullContextTest() throws Exception {\n+        jsonServiceEventMarshaler.marshal(null);\n+    }\n+\n+    @Test\n+    public void marshalJsonWithoutContextTest() throws ServiceEventBusException {\n+        stringWriter.write(\"{\\n}\");\n+        String expectedValues = stringWriter.toString();\n+        XmlUtil.setContextProvider(new TestJAXBContextProvider());\n+        assertEquals(\"not_equals\", expectedValues, jsonServiceEventMarshaler.marshal(serviceEvent));\n+    }\n+\n+    @Test\n+    public void marshalJsonWithContextTest() throws ServiceEventBusException {\n+        stringWriter.write(\"{\\n\" +\n+                \"   \\\"id\\\" : \\\"id\\\",\\n\" +\n+                \"   \\\"contextId\\\" : \\\"contextId\\\",\\n\" +\n+                \"   \\\"entityType\\\" : \\\"entityType\\\",\\n\" +\n+                \"   \\\"status\\\" : \\\"SENT\\\",\\n\" +\n+                \"   \\\"note\\\" : \\\"note\\\"\\n\" +\n+                \"}\");\n+\n+        String expectedValues = stringWriter.toString();\n+        serviceEvent.setId(\"id\");\n+        serviceEvent.setContextId(\"contextId\");\n+        serviceEvent.setEntityType(\"entityType\");\n+        serviceEvent.setStatus(ServiceEvent.EventStatus.SENT);\n+        serviceEvent.setNote(\"note\");\n+\n+        XmlUtil.setContextProvider(new TestJAXBContextProvider());\n+        assertEquals(\"not_equals\", expectedValues, jsonServiceEventMarshaler.marshal(serviceEvent));\n+    }\n+\n+    @Test(expected = NullPointerException.class)\n+    public void unmarshalJsonWithNullContextTest() throws Exception {\n+        jsonServiceEventMarshaler.unmarshal(null);\n+    }\n+\n+    @Test\n+    public void unmarshalJsonWithContextTest() throws KapuaException {\n+        XmlUtil.setContextProvider(new TestJAXBContextProvider());\n+        ServiceEvent elements = jsonServiceEventMarshaler.unmarshal(\"{\\n\" +\n+                \"   \\\"id\\\" : \\\"id\\\",\\n\" +\n+                \"   \\\"contextId\\\" : \\\"contextId\\\",\\n\" +\n+                \"   \\\"entityType\\\" : \\\"entityType\\\",\\n\" +\n+                \"   \\\"status\\\" : \\\"SENT\\\",\\n\" +\n+                \"   \\\"note\\\" : \\\"note\\\"\\n\" +\n+                \"}\");\n+\n+        assertEquals(\"not_equals\", \"id\", elements.getId());\n+        assertEquals(\"not_equals\", \"contextId\", elements.getContextId());", "originalCommit": "d4f078b1dfb83c13e0b22edcd137f0948dec1727", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY2NTA0MA==", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r444665040", "body": "Please change message to \"Expected and actual values are not the same.\"", "bodyText": "Please change message to \"Expected and actual values are not the same.\"", "bodyHTML": "<p dir=\"auto\">Please change message to \"Expected and actual values are not the same.\"</p>", "author": "LeoNerdoG", "createdAt": "2020-06-24T06:09:55Z", "path": "qa/integration/src/test/java/org/eclipse/kapua/integration/misc/JsonServiceEventMarshalerTest.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.integration.misc;\n+\n+import org.eclipse.kapua.KapuaException;\n+import org.eclipse.kapua.commons.event.JsonServiceEventMarshaler;\n+import org.eclipse.kapua.commons.util.xml.XmlUtil;\n+import org.eclipse.kapua.event.ServiceEvent;\n+import org.eclipse.kapua.event.ServiceEventBusException;\n+import org.eclipse.kapua.qa.common.TestJAXBContextProvider;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+import java.io.StringWriter;\n+\n+@Category(JUnitTests.class)\n+public class JsonServiceEventMarshalerTest extends Assert {\n+\n+    ServiceEvent serviceEvent;\n+    JsonServiceEventMarshaler jsonServiceEventMarshaler;\n+    StringWriter stringWriter;\n+\n+    @Before\n+    public void createInstanceOfClasses() {\n+        serviceEvent = new ServiceEvent();\n+        jsonServiceEventMarshaler = new JsonServiceEventMarshaler();\n+        stringWriter = new StringWriter();\n+    }\n+\n+    @Test(expected = ServiceEventBusException.class)\n+    public void marshalJsonWithNullContextTest() throws Exception {\n+        jsonServiceEventMarshaler.marshal(null);\n+    }\n+\n+    @Test\n+    public void marshalJsonWithoutContextTest() throws ServiceEventBusException {\n+        stringWriter.write(\"{\\n}\");\n+        String expectedValues = stringWriter.toString();\n+        XmlUtil.setContextProvider(new TestJAXBContextProvider());\n+        assertEquals(\"not_equals\", expectedValues, jsonServiceEventMarshaler.marshal(serviceEvent));\n+    }\n+\n+    @Test\n+    public void marshalJsonWithContextTest() throws ServiceEventBusException {\n+        stringWriter.write(\"{\\n\" +\n+                \"   \\\"id\\\" : \\\"id\\\",\\n\" +\n+                \"   \\\"contextId\\\" : \\\"contextId\\\",\\n\" +\n+                \"   \\\"entityType\\\" : \\\"entityType\\\",\\n\" +\n+                \"   \\\"status\\\" : \\\"SENT\\\",\\n\" +\n+                \"   \\\"note\\\" : \\\"note\\\"\\n\" +\n+                \"}\");\n+\n+        String expectedValues = stringWriter.toString();\n+        serviceEvent.setId(\"id\");\n+        serviceEvent.setContextId(\"contextId\");\n+        serviceEvent.setEntityType(\"entityType\");\n+        serviceEvent.setStatus(ServiceEvent.EventStatus.SENT);\n+        serviceEvent.setNote(\"note\");\n+\n+        XmlUtil.setContextProvider(new TestJAXBContextProvider());\n+        assertEquals(\"not_equals\", expectedValues, jsonServiceEventMarshaler.marshal(serviceEvent));\n+    }\n+\n+    @Test(expected = NullPointerException.class)\n+    public void unmarshalJsonWithNullContextTest() throws Exception {\n+        jsonServiceEventMarshaler.unmarshal(null);\n+    }\n+\n+    @Test\n+    public void unmarshalJsonWithContextTest() throws KapuaException {\n+        XmlUtil.setContextProvider(new TestJAXBContextProvider());\n+        ServiceEvent elements = jsonServiceEventMarshaler.unmarshal(\"{\\n\" +\n+                \"   \\\"id\\\" : \\\"id\\\",\\n\" +\n+                \"   \\\"contextId\\\" : \\\"contextId\\\",\\n\" +\n+                \"   \\\"entityType\\\" : \\\"entityType\\\",\\n\" +\n+                \"   \\\"status\\\" : \\\"SENT\\\",\\n\" +\n+                \"   \\\"note\\\" : \\\"note\\\"\\n\" +\n+                \"}\");\n+\n+        assertEquals(\"not_equals\", \"id\", elements.getId());\n+        assertEquals(\"not_equals\", \"contextId\", elements.getContextId());\n+        assertEquals(\"not_equals\", \"entityType\", elements.getEntityType());", "originalCommit": "d4f078b1dfb83c13e0b22edcd137f0948dec1727", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY2NTA3OA==", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r444665078", "body": "Please change message to \"Expected and actual values are not the same.\"", "bodyText": "Please change message to \"Expected and actual values are not the same.\"", "bodyHTML": "<p dir=\"auto\">Please change message to \"Expected and actual values are not the same.\"</p>", "author": "LeoNerdoG", "createdAt": "2020-06-24T06:09:58Z", "path": "qa/integration/src/test/java/org/eclipse/kapua/integration/misc/JsonServiceEventMarshalerTest.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.integration.misc;\n+\n+import org.eclipse.kapua.KapuaException;\n+import org.eclipse.kapua.commons.event.JsonServiceEventMarshaler;\n+import org.eclipse.kapua.commons.util.xml.XmlUtil;\n+import org.eclipse.kapua.event.ServiceEvent;\n+import org.eclipse.kapua.event.ServiceEventBusException;\n+import org.eclipse.kapua.qa.common.TestJAXBContextProvider;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+import java.io.StringWriter;\n+\n+@Category(JUnitTests.class)\n+public class JsonServiceEventMarshalerTest extends Assert {\n+\n+    ServiceEvent serviceEvent;\n+    JsonServiceEventMarshaler jsonServiceEventMarshaler;\n+    StringWriter stringWriter;\n+\n+    @Before\n+    public void createInstanceOfClasses() {\n+        serviceEvent = new ServiceEvent();\n+        jsonServiceEventMarshaler = new JsonServiceEventMarshaler();\n+        stringWriter = new StringWriter();\n+    }\n+\n+    @Test(expected = ServiceEventBusException.class)\n+    public void marshalJsonWithNullContextTest() throws Exception {\n+        jsonServiceEventMarshaler.marshal(null);\n+    }\n+\n+    @Test\n+    public void marshalJsonWithoutContextTest() throws ServiceEventBusException {\n+        stringWriter.write(\"{\\n}\");\n+        String expectedValues = stringWriter.toString();\n+        XmlUtil.setContextProvider(new TestJAXBContextProvider());\n+        assertEquals(\"not_equals\", expectedValues, jsonServiceEventMarshaler.marshal(serviceEvent));\n+    }\n+\n+    @Test\n+    public void marshalJsonWithContextTest() throws ServiceEventBusException {\n+        stringWriter.write(\"{\\n\" +\n+                \"   \\\"id\\\" : \\\"id\\\",\\n\" +\n+                \"   \\\"contextId\\\" : \\\"contextId\\\",\\n\" +\n+                \"   \\\"entityType\\\" : \\\"entityType\\\",\\n\" +\n+                \"   \\\"status\\\" : \\\"SENT\\\",\\n\" +\n+                \"   \\\"note\\\" : \\\"note\\\"\\n\" +\n+                \"}\");\n+\n+        String expectedValues = stringWriter.toString();\n+        serviceEvent.setId(\"id\");\n+        serviceEvent.setContextId(\"contextId\");\n+        serviceEvent.setEntityType(\"entityType\");\n+        serviceEvent.setStatus(ServiceEvent.EventStatus.SENT);\n+        serviceEvent.setNote(\"note\");\n+\n+        XmlUtil.setContextProvider(new TestJAXBContextProvider());\n+        assertEquals(\"not_equals\", expectedValues, jsonServiceEventMarshaler.marshal(serviceEvent));\n+    }\n+\n+    @Test(expected = NullPointerException.class)\n+    public void unmarshalJsonWithNullContextTest() throws Exception {\n+        jsonServiceEventMarshaler.unmarshal(null);\n+    }\n+\n+    @Test\n+    public void unmarshalJsonWithContextTest() throws KapuaException {\n+        XmlUtil.setContextProvider(new TestJAXBContextProvider());\n+        ServiceEvent elements = jsonServiceEventMarshaler.unmarshal(\"{\\n\" +\n+                \"   \\\"id\\\" : \\\"id\\\",\\n\" +\n+                \"   \\\"contextId\\\" : \\\"contextId\\\",\\n\" +\n+                \"   \\\"entityType\\\" : \\\"entityType\\\",\\n\" +\n+                \"   \\\"status\\\" : \\\"SENT\\\",\\n\" +\n+                \"   \\\"note\\\" : \\\"note\\\"\\n\" +\n+                \"}\");\n+\n+        assertEquals(\"not_equals\", \"id\", elements.getId());\n+        assertEquals(\"not_equals\", \"contextId\", elements.getContextId());\n+        assertEquals(\"not_equals\", \"entityType\", elements.getEntityType());\n+        assertEquals(\"not_equals\", ServiceEvent.EventStatus.SENT, elements.getStatus());", "originalCommit": "d4f078b1dfb83c13e0b22edcd137f0948dec1727", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY2NTE2Mw==", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r444665163", "body": "Please change message to \"Expected and actual values are not the same.\" or something similar. ", "bodyText": "Please change message to \"Expected and actual values are not the same.\" or something similar.", "bodyHTML": "<p dir=\"auto\">Please change message to \"Expected and actual values are not the same.\" or something similar.</p>", "author": "LeoNerdoG", "createdAt": "2020-06-24T06:10:13Z", "path": "qa/integration/src/test/java/org/eclipse/kapua/integration/misc/JsonServiceEventMarshalerTest.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.integration.misc;\n+\n+import org.eclipse.kapua.KapuaException;\n+import org.eclipse.kapua.commons.event.JsonServiceEventMarshaler;\n+import org.eclipse.kapua.commons.util.xml.XmlUtil;\n+import org.eclipse.kapua.event.ServiceEvent;\n+import org.eclipse.kapua.event.ServiceEventBusException;\n+import org.eclipse.kapua.qa.common.TestJAXBContextProvider;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+import java.io.StringWriter;\n+\n+@Category(JUnitTests.class)\n+public class JsonServiceEventMarshalerTest extends Assert {\n+\n+    ServiceEvent serviceEvent;\n+    JsonServiceEventMarshaler jsonServiceEventMarshaler;\n+    StringWriter stringWriter;\n+\n+    @Before\n+    public void createInstanceOfClasses() {\n+        serviceEvent = new ServiceEvent();\n+        jsonServiceEventMarshaler = new JsonServiceEventMarshaler();\n+        stringWriter = new StringWriter();\n+    }\n+\n+    @Test(expected = ServiceEventBusException.class)\n+    public void marshalJsonWithNullContextTest() throws Exception {\n+        jsonServiceEventMarshaler.marshal(null);\n+    }\n+\n+    @Test\n+    public void marshalJsonWithoutContextTest() throws ServiceEventBusException {\n+        stringWriter.write(\"{\\n}\");\n+        String expectedValues = stringWriter.toString();\n+        XmlUtil.setContextProvider(new TestJAXBContextProvider());\n+        assertEquals(\"not_equals\", expectedValues, jsonServiceEventMarshaler.marshal(serviceEvent));\n+    }\n+\n+    @Test\n+    public void marshalJsonWithContextTest() throws ServiceEventBusException {\n+        stringWriter.write(\"{\\n\" +\n+                \"   \\\"id\\\" : \\\"id\\\",\\n\" +\n+                \"   \\\"contextId\\\" : \\\"contextId\\\",\\n\" +\n+                \"   \\\"entityType\\\" : \\\"entityType\\\",\\n\" +\n+                \"   \\\"status\\\" : \\\"SENT\\\",\\n\" +\n+                \"   \\\"note\\\" : \\\"note\\\"\\n\" +\n+                \"}\");\n+\n+        String expectedValues = stringWriter.toString();\n+        serviceEvent.setId(\"id\");\n+        serviceEvent.setContextId(\"contextId\");\n+        serviceEvent.setEntityType(\"entityType\");\n+        serviceEvent.setStatus(ServiceEvent.EventStatus.SENT);\n+        serviceEvent.setNote(\"note\");\n+\n+        XmlUtil.setContextProvider(new TestJAXBContextProvider());\n+        assertEquals(\"not_equals\", expectedValues, jsonServiceEventMarshaler.marshal(serviceEvent));\n+    }\n+\n+    @Test(expected = NullPointerException.class)\n+    public void unmarshalJsonWithNullContextTest() throws Exception {\n+        jsonServiceEventMarshaler.unmarshal(null);\n+    }\n+\n+    @Test\n+    public void unmarshalJsonWithContextTest() throws KapuaException {\n+        XmlUtil.setContextProvider(new TestJAXBContextProvider());\n+        ServiceEvent elements = jsonServiceEventMarshaler.unmarshal(\"{\\n\" +\n+                \"   \\\"id\\\" : \\\"id\\\",\\n\" +\n+                \"   \\\"contextId\\\" : \\\"contextId\\\",\\n\" +\n+                \"   \\\"entityType\\\" : \\\"entityType\\\",\\n\" +\n+                \"   \\\"status\\\" : \\\"SENT\\\",\\n\" +\n+                \"   \\\"note\\\" : \\\"note\\\"\\n\" +\n+                \"}\");\n+\n+        assertEquals(\"not_equals\", \"id\", elements.getId());\n+        assertEquals(\"not_equals\", \"contextId\", elements.getContextId());\n+        assertEquals(\"not_equals\", \"entityType\", elements.getEntityType());\n+        assertEquals(\"not_equals\", ServiceEvent.EventStatus.SENT, elements.getStatus());\n+    }\n+\n+    @Test\n+    public void getContentTypeTest() {\n+        assertEquals(\"not_equals\", \"application/json\", jsonServiceEventMarshaler.getContentType());", "originalCommit": "d4f078b1dfb83c13e0b22edcd137f0948dec1727", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY2NTM2Nw==", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r444665367", "body": "Please change message to \"Expected and actual values are not the same.\"", "bodyText": "Please change message to \"Expected and actual values are not the same.\"", "bodyHTML": "<p dir=\"auto\">Please change message to \"Expected and actual values are not the same.\"</p>", "author": "LeoNerdoG", "createdAt": "2020-06-24T06:10:47Z", "path": "qa/integration/src/test/java/org/eclipse/kapua/integration/misc/XmlServiceEventMarshalerTest.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.integration.misc;\n+\n+import org.eclipse.kapua.KapuaException;\n+import org.eclipse.kapua.commons.event.XmlServiceEventMarshaler;\n+import org.eclipse.kapua.commons.util.xml.XmlUtil;\n+import org.eclipse.kapua.event.ServiceEvent;\n+import org.eclipse.kapua.event.ServiceEventBusException;\n+import org.eclipse.kapua.qa.common.TestJAXBContextProvider;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+import java.io.StringWriter;\n+\n+@Category(JUnitTests.class)\n+public class XmlServiceEventMarshalerTest extends Assert {\n+\n+    ServiceEvent serviceEvent;\n+    XmlServiceEventMarshaler xmlServiceEventMarshaler;\n+    StringWriter stringWriter;\n+\n+    @Before\n+    public void createInstanceOfClasses() {\n+        serviceEvent = new ServiceEvent();\n+        xmlServiceEventMarshaler = new XmlServiceEventMarshaler();\n+        stringWriter = new StringWriter();\n+    }\n+\n+    @Test\n+    public void marshalXmlWithoutContextTest() throws ServiceEventBusException {\n+        stringWriter.write(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" +\n+                \"<serviceEvent/>\\n\");\n+        String expectedValues = stringWriter.toString();\n+        XmlUtil.setContextProvider(new TestJAXBContextProvider());\n+        assertEquals(\"not_equals\", expectedValues, xmlServiceEventMarshaler.marshal(serviceEvent));", "originalCommit": "d4f078b1dfb83c13e0b22edcd137f0948dec1727", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY2NTM4NA==", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r444665384", "body": "Please change message to \"Expected and actual values are not the same.\"", "bodyText": "Please change message to \"Expected and actual values are not the same.\"", "bodyHTML": "<p dir=\"auto\">Please change message to \"Expected and actual values are not the same.\"</p>", "author": "LeoNerdoG", "createdAt": "2020-06-24T06:10:51Z", "path": "qa/integration/src/test/java/org/eclipse/kapua/integration/misc/XmlServiceEventMarshalerTest.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.integration.misc;\n+\n+import org.eclipse.kapua.KapuaException;\n+import org.eclipse.kapua.commons.event.XmlServiceEventMarshaler;\n+import org.eclipse.kapua.commons.util.xml.XmlUtil;\n+import org.eclipse.kapua.event.ServiceEvent;\n+import org.eclipse.kapua.event.ServiceEventBusException;\n+import org.eclipse.kapua.qa.common.TestJAXBContextProvider;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+import java.io.StringWriter;\n+\n+@Category(JUnitTests.class)\n+public class XmlServiceEventMarshalerTest extends Assert {\n+\n+    ServiceEvent serviceEvent;\n+    XmlServiceEventMarshaler xmlServiceEventMarshaler;\n+    StringWriter stringWriter;\n+\n+    @Before\n+    public void createInstanceOfClasses() {\n+        serviceEvent = new ServiceEvent();\n+        xmlServiceEventMarshaler = new XmlServiceEventMarshaler();\n+        stringWriter = new StringWriter();\n+    }\n+\n+    @Test\n+    public void marshalXmlWithoutContextTest() throws ServiceEventBusException {\n+        stringWriter.write(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" +\n+                \"<serviceEvent/>\\n\");\n+        String expectedValues = stringWriter.toString();\n+        XmlUtil.setContextProvider(new TestJAXBContextProvider());\n+        assertEquals(\"not_equals\", expectedValues, xmlServiceEventMarshaler.marshal(serviceEvent));\n+    }\n+\n+    @Test\n+    public void marshalJsonWithContextTest() throws ServiceEventBusException {\n+        stringWriter.write(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" +\n+                \"<serviceEvent>\\n\" +\n+                \"   <id>id</id>\\n\" +\n+                \"   <contextId>contextId</contextId>\\n\" +\n+                \"   <entityType>entityType</entityType>\\n\" +\n+                \"   <status>SENT</status>\\n\" +\n+                \"   <note>note</note>\\n\" +\n+                \"</serviceEvent>\\n\");\n+\n+        String expectedValues = stringWriter.toString();\n+        serviceEvent.setId(\"id\");\n+        serviceEvent.setContextId(\"contextId\");\n+        serviceEvent.setEntityType(\"entityType\");\n+        serviceEvent.setStatus(ServiceEvent.EventStatus.SENT);\n+        serviceEvent.setNote(\"note\");\n+\n+        XmlUtil.setContextProvider(new TestJAXBContextProvider());\n+        assertEquals(\"not_equals\", expectedValues, xmlServiceEventMarshaler.marshal(serviceEvent));", "originalCommit": "d4f078b1dfb83c13e0b22edcd137f0948dec1727", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY2NTQ4Nw==", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r444665487", "body": "Please change message to \"Expected and actual values are not the same.\"", "bodyText": "Please change message to \"Expected and actual values are not the same.\"", "bodyHTML": "<p dir=\"auto\">Please change message to \"Expected and actual values are not the same.\"</p>", "author": "LeoNerdoG", "createdAt": "2020-06-24T06:11:10Z", "path": "qa/integration/src/test/java/org/eclipse/kapua/integration/misc/XmlServiceEventMarshalerTest.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.integration.misc;\n+\n+import org.eclipse.kapua.KapuaException;\n+import org.eclipse.kapua.commons.event.XmlServiceEventMarshaler;\n+import org.eclipse.kapua.commons.util.xml.XmlUtil;\n+import org.eclipse.kapua.event.ServiceEvent;\n+import org.eclipse.kapua.event.ServiceEventBusException;\n+import org.eclipse.kapua.qa.common.TestJAXBContextProvider;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+import java.io.StringWriter;\n+\n+@Category(JUnitTests.class)\n+public class XmlServiceEventMarshalerTest extends Assert {\n+\n+    ServiceEvent serviceEvent;\n+    XmlServiceEventMarshaler xmlServiceEventMarshaler;\n+    StringWriter stringWriter;\n+\n+    @Before\n+    public void createInstanceOfClasses() {\n+        serviceEvent = new ServiceEvent();\n+        xmlServiceEventMarshaler = new XmlServiceEventMarshaler();\n+        stringWriter = new StringWriter();\n+    }\n+\n+    @Test\n+    public void marshalXmlWithoutContextTest() throws ServiceEventBusException {\n+        stringWriter.write(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" +\n+                \"<serviceEvent/>\\n\");\n+        String expectedValues = stringWriter.toString();\n+        XmlUtil.setContextProvider(new TestJAXBContextProvider());\n+        assertEquals(\"not_equals\", expectedValues, xmlServiceEventMarshaler.marshal(serviceEvent));\n+    }\n+\n+    @Test\n+    public void marshalJsonWithContextTest() throws ServiceEventBusException {\n+        stringWriter.write(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" +\n+                \"<serviceEvent>\\n\" +\n+                \"   <id>id</id>\\n\" +\n+                \"   <contextId>contextId</contextId>\\n\" +\n+                \"   <entityType>entityType</entityType>\\n\" +\n+                \"   <status>SENT</status>\\n\" +\n+                \"   <note>note</note>\\n\" +\n+                \"</serviceEvent>\\n\");\n+\n+        String expectedValues = stringWriter.toString();\n+        serviceEvent.setId(\"id\");\n+        serviceEvent.setContextId(\"contextId\");\n+        serviceEvent.setEntityType(\"entityType\");\n+        serviceEvent.setStatus(ServiceEvent.EventStatus.SENT);\n+        serviceEvent.setNote(\"note\");\n+\n+        XmlUtil.setContextProvider(new TestJAXBContextProvider());\n+        assertEquals(\"not_equals\", expectedValues, xmlServiceEventMarshaler.marshal(serviceEvent));\n+    }\n+\n+    @Test(expected = ServiceEventBusException.class)\n+    public void unmarshalXmlWithoutJAXBContextProviderTest() throws KapuaException {\n+        xmlServiceEventMarshaler.unmarshal(\"message\");\n+    }\n+\n+    @Test(expected = NullPointerException.class)\n+    public void unmarshalXmlWithNullContextTest() throws Exception {\n+        xmlServiceEventMarshaler.unmarshal(null);\n+    }\n+\n+    @Test\n+    public void unmarshalXmlWithContextTest() throws KapuaException {\n+        XmlUtil.setContextProvider(new TestJAXBContextProvider());\n+        ServiceEvent elements = xmlServiceEventMarshaler.unmarshal(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" +\n+                \"<serviceEvent>\\n\" +\n+                \"   <id>id</id>\\n\" +\n+                \"   <contextId>contextId</contextId>\\n\" +\n+                \"   <entityType>entityType</entityType>\\n\" +\n+                \"   <status>SENT</status>\\n\" +\n+                \"   <note>note</note>\\n\" +\n+                \"</serviceEvent>\\n\");\n+\n+        assertEquals(\"not_equals\", \"id\", elements.getId());", "originalCommit": "d4f078b1dfb83c13e0b22edcd137f0948dec1727", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY2NTU0Nw==", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r444665547", "body": "Please change message to \"Expected and actual values are not the same.\"", "bodyText": "Please change message to \"Expected and actual values are not the same.\"", "bodyHTML": "<p dir=\"auto\">Please change message to \"Expected and actual values are not the same.\"</p>", "author": "LeoNerdoG", "createdAt": "2020-06-24T06:11:20Z", "path": "qa/integration/src/test/java/org/eclipse/kapua/integration/misc/XmlServiceEventMarshalerTest.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.integration.misc;\n+\n+import org.eclipse.kapua.KapuaException;\n+import org.eclipse.kapua.commons.event.XmlServiceEventMarshaler;\n+import org.eclipse.kapua.commons.util.xml.XmlUtil;\n+import org.eclipse.kapua.event.ServiceEvent;\n+import org.eclipse.kapua.event.ServiceEventBusException;\n+import org.eclipse.kapua.qa.common.TestJAXBContextProvider;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+import java.io.StringWriter;\n+\n+@Category(JUnitTests.class)\n+public class XmlServiceEventMarshalerTest extends Assert {\n+\n+    ServiceEvent serviceEvent;\n+    XmlServiceEventMarshaler xmlServiceEventMarshaler;\n+    StringWriter stringWriter;\n+\n+    @Before\n+    public void createInstanceOfClasses() {\n+        serviceEvent = new ServiceEvent();\n+        xmlServiceEventMarshaler = new XmlServiceEventMarshaler();\n+        stringWriter = new StringWriter();\n+    }\n+\n+    @Test\n+    public void marshalXmlWithoutContextTest() throws ServiceEventBusException {\n+        stringWriter.write(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" +\n+                \"<serviceEvent/>\\n\");\n+        String expectedValues = stringWriter.toString();\n+        XmlUtil.setContextProvider(new TestJAXBContextProvider());\n+        assertEquals(\"not_equals\", expectedValues, xmlServiceEventMarshaler.marshal(serviceEvent));\n+    }\n+\n+    @Test\n+    public void marshalJsonWithContextTest() throws ServiceEventBusException {\n+        stringWriter.write(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" +\n+                \"<serviceEvent>\\n\" +\n+                \"   <id>id</id>\\n\" +\n+                \"   <contextId>contextId</contextId>\\n\" +\n+                \"   <entityType>entityType</entityType>\\n\" +\n+                \"   <status>SENT</status>\\n\" +\n+                \"   <note>note</note>\\n\" +\n+                \"</serviceEvent>\\n\");\n+\n+        String expectedValues = stringWriter.toString();\n+        serviceEvent.setId(\"id\");\n+        serviceEvent.setContextId(\"contextId\");\n+        serviceEvent.setEntityType(\"entityType\");\n+        serviceEvent.setStatus(ServiceEvent.EventStatus.SENT);\n+        serviceEvent.setNote(\"note\");\n+\n+        XmlUtil.setContextProvider(new TestJAXBContextProvider());\n+        assertEquals(\"not_equals\", expectedValues, xmlServiceEventMarshaler.marshal(serviceEvent));\n+    }\n+\n+    @Test(expected = ServiceEventBusException.class)\n+    public void unmarshalXmlWithoutJAXBContextProviderTest() throws KapuaException {\n+        xmlServiceEventMarshaler.unmarshal(\"message\");\n+    }\n+\n+    @Test(expected = NullPointerException.class)\n+    public void unmarshalXmlWithNullContextTest() throws Exception {\n+        xmlServiceEventMarshaler.unmarshal(null);\n+    }\n+\n+    @Test\n+    public void unmarshalXmlWithContextTest() throws KapuaException {\n+        XmlUtil.setContextProvider(new TestJAXBContextProvider());\n+        ServiceEvent elements = xmlServiceEventMarshaler.unmarshal(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" +\n+                \"<serviceEvent>\\n\" +\n+                \"   <id>id</id>\\n\" +\n+                \"   <contextId>contextId</contextId>\\n\" +\n+                \"   <entityType>entityType</entityType>\\n\" +\n+                \"   <status>SENT</status>\\n\" +\n+                \"   <note>note</note>\\n\" +\n+                \"</serviceEvent>\\n\");\n+\n+        assertEquals(\"not_equals\", \"id\", elements.getId());\n+        assertEquals(\"not_equals\", \"contextId\", elements.getContextId());", "originalCommit": "d4f078b1dfb83c13e0b22edcd137f0948dec1727", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY2NTU1MQ==", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r444665551", "body": "Please change message to \"Expected and actual values are not the same.\"", "bodyText": "Please change message to \"Expected and actual values are not the same.\"", "bodyHTML": "<p dir=\"auto\">Please change message to \"Expected and actual values are not the same.\"</p>", "author": "LeoNerdoG", "createdAt": "2020-06-24T06:11:21Z", "path": "qa/integration/src/test/java/org/eclipse/kapua/integration/misc/XmlServiceEventMarshalerTest.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.integration.misc;\n+\n+import org.eclipse.kapua.KapuaException;\n+import org.eclipse.kapua.commons.event.XmlServiceEventMarshaler;\n+import org.eclipse.kapua.commons.util.xml.XmlUtil;\n+import org.eclipse.kapua.event.ServiceEvent;\n+import org.eclipse.kapua.event.ServiceEventBusException;\n+import org.eclipse.kapua.qa.common.TestJAXBContextProvider;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+import java.io.StringWriter;\n+\n+@Category(JUnitTests.class)\n+public class XmlServiceEventMarshalerTest extends Assert {\n+\n+    ServiceEvent serviceEvent;\n+    XmlServiceEventMarshaler xmlServiceEventMarshaler;\n+    StringWriter stringWriter;\n+\n+    @Before\n+    public void createInstanceOfClasses() {\n+        serviceEvent = new ServiceEvent();\n+        xmlServiceEventMarshaler = new XmlServiceEventMarshaler();\n+        stringWriter = new StringWriter();\n+    }\n+\n+    @Test\n+    public void marshalXmlWithoutContextTest() throws ServiceEventBusException {\n+        stringWriter.write(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" +\n+                \"<serviceEvent/>\\n\");\n+        String expectedValues = stringWriter.toString();\n+        XmlUtil.setContextProvider(new TestJAXBContextProvider());\n+        assertEquals(\"not_equals\", expectedValues, xmlServiceEventMarshaler.marshal(serviceEvent));\n+    }\n+\n+    @Test\n+    public void marshalJsonWithContextTest() throws ServiceEventBusException {\n+        stringWriter.write(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" +\n+                \"<serviceEvent>\\n\" +\n+                \"   <id>id</id>\\n\" +\n+                \"   <contextId>contextId</contextId>\\n\" +\n+                \"   <entityType>entityType</entityType>\\n\" +\n+                \"   <status>SENT</status>\\n\" +\n+                \"   <note>note</note>\\n\" +\n+                \"</serviceEvent>\\n\");\n+\n+        String expectedValues = stringWriter.toString();\n+        serviceEvent.setId(\"id\");\n+        serviceEvent.setContextId(\"contextId\");\n+        serviceEvent.setEntityType(\"entityType\");\n+        serviceEvent.setStatus(ServiceEvent.EventStatus.SENT);\n+        serviceEvent.setNote(\"note\");\n+\n+        XmlUtil.setContextProvider(new TestJAXBContextProvider());\n+        assertEquals(\"not_equals\", expectedValues, xmlServiceEventMarshaler.marshal(serviceEvent));\n+    }\n+\n+    @Test(expected = ServiceEventBusException.class)\n+    public void unmarshalXmlWithoutJAXBContextProviderTest() throws KapuaException {\n+        xmlServiceEventMarshaler.unmarshal(\"message\");\n+    }\n+\n+    @Test(expected = NullPointerException.class)\n+    public void unmarshalXmlWithNullContextTest() throws Exception {\n+        xmlServiceEventMarshaler.unmarshal(null);\n+    }\n+\n+    @Test\n+    public void unmarshalXmlWithContextTest() throws KapuaException {\n+        XmlUtil.setContextProvider(new TestJAXBContextProvider());\n+        ServiceEvent elements = xmlServiceEventMarshaler.unmarshal(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" +\n+                \"<serviceEvent>\\n\" +\n+                \"   <id>id</id>\\n\" +\n+                \"   <contextId>contextId</contextId>\\n\" +\n+                \"   <entityType>entityType</entityType>\\n\" +\n+                \"   <status>SENT</status>\\n\" +\n+                \"   <note>note</note>\\n\" +\n+                \"</serviceEvent>\\n\");\n+\n+        assertEquals(\"not_equals\", \"id\", elements.getId());\n+        assertEquals(\"not_equals\", \"contextId\", elements.getContextId());\n+        assertEquals(\"not_equals\", \"entityType\", elements.getEntityType());", "originalCommit": "d4f078b1dfb83c13e0b22edcd137f0948dec1727", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY2NTU3NQ==", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r444665575", "body": "Please change message to \"Expected and actual values are not the same.\"", "bodyText": "Please change message to \"Expected and actual values are not the same.\"", "bodyHTML": "<p dir=\"auto\">Please change message to \"Expected and actual values are not the same.\"</p>", "author": "LeoNerdoG", "createdAt": "2020-06-24T06:11:23Z", "path": "qa/integration/src/test/java/org/eclipse/kapua/integration/misc/XmlServiceEventMarshalerTest.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.integration.misc;\n+\n+import org.eclipse.kapua.KapuaException;\n+import org.eclipse.kapua.commons.event.XmlServiceEventMarshaler;\n+import org.eclipse.kapua.commons.util.xml.XmlUtil;\n+import org.eclipse.kapua.event.ServiceEvent;\n+import org.eclipse.kapua.event.ServiceEventBusException;\n+import org.eclipse.kapua.qa.common.TestJAXBContextProvider;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+import java.io.StringWriter;\n+\n+@Category(JUnitTests.class)\n+public class XmlServiceEventMarshalerTest extends Assert {\n+\n+    ServiceEvent serviceEvent;\n+    XmlServiceEventMarshaler xmlServiceEventMarshaler;\n+    StringWriter stringWriter;\n+\n+    @Before\n+    public void createInstanceOfClasses() {\n+        serviceEvent = new ServiceEvent();\n+        xmlServiceEventMarshaler = new XmlServiceEventMarshaler();\n+        stringWriter = new StringWriter();\n+    }\n+\n+    @Test\n+    public void marshalXmlWithoutContextTest() throws ServiceEventBusException {\n+        stringWriter.write(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" +\n+                \"<serviceEvent/>\\n\");\n+        String expectedValues = stringWriter.toString();\n+        XmlUtil.setContextProvider(new TestJAXBContextProvider());\n+        assertEquals(\"not_equals\", expectedValues, xmlServiceEventMarshaler.marshal(serviceEvent));\n+    }\n+\n+    @Test\n+    public void marshalJsonWithContextTest() throws ServiceEventBusException {\n+        stringWriter.write(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" +\n+                \"<serviceEvent>\\n\" +\n+                \"   <id>id</id>\\n\" +\n+                \"   <contextId>contextId</contextId>\\n\" +\n+                \"   <entityType>entityType</entityType>\\n\" +\n+                \"   <status>SENT</status>\\n\" +\n+                \"   <note>note</note>\\n\" +\n+                \"</serviceEvent>\\n\");\n+\n+        String expectedValues = stringWriter.toString();\n+        serviceEvent.setId(\"id\");\n+        serviceEvent.setContextId(\"contextId\");\n+        serviceEvent.setEntityType(\"entityType\");\n+        serviceEvent.setStatus(ServiceEvent.EventStatus.SENT);\n+        serviceEvent.setNote(\"note\");\n+\n+        XmlUtil.setContextProvider(new TestJAXBContextProvider());\n+        assertEquals(\"not_equals\", expectedValues, xmlServiceEventMarshaler.marshal(serviceEvent));\n+    }\n+\n+    @Test(expected = ServiceEventBusException.class)\n+    public void unmarshalXmlWithoutJAXBContextProviderTest() throws KapuaException {\n+        xmlServiceEventMarshaler.unmarshal(\"message\");\n+    }\n+\n+    @Test(expected = NullPointerException.class)\n+    public void unmarshalXmlWithNullContextTest() throws Exception {\n+        xmlServiceEventMarshaler.unmarshal(null);\n+    }\n+\n+    @Test\n+    public void unmarshalXmlWithContextTest() throws KapuaException {\n+        XmlUtil.setContextProvider(new TestJAXBContextProvider());\n+        ServiceEvent elements = xmlServiceEventMarshaler.unmarshal(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" +\n+                \"<serviceEvent>\\n\" +\n+                \"   <id>id</id>\\n\" +\n+                \"   <contextId>contextId</contextId>\\n\" +\n+                \"   <entityType>entityType</entityType>\\n\" +\n+                \"   <status>SENT</status>\\n\" +\n+                \"   <note>note</note>\\n\" +\n+                \"</serviceEvent>\\n\");\n+\n+        assertEquals(\"not_equals\", \"id\", elements.getId());\n+        assertEquals(\"not_equals\", \"contextId\", elements.getContextId());\n+        assertEquals(\"not_equals\", \"entityType\", elements.getEntityType());\n+        assertEquals(\"not_equals\", ServiceEvent.EventStatus.SENT, elements.getStatus());", "originalCommit": "d4f078b1dfb83c13e0b22edcd137f0948dec1727", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY2NTYwNg==", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r444665606", "body": "Please change message to \"Expected and actual values are not the same.\" or something similar. ", "bodyText": "Please change message to \"Expected and actual values are not the same.\" or something similar.", "bodyHTML": "<p dir=\"auto\">Please change message to \"Expected and actual values are not the same.\" or something similar.</p>", "author": "LeoNerdoG", "createdAt": "2020-06-24T06:11:29Z", "path": "qa/integration/src/test/java/org/eclipse/kapua/integration/misc/XmlServiceEventMarshalerTest.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.integration.misc;\n+\n+import org.eclipse.kapua.KapuaException;\n+import org.eclipse.kapua.commons.event.XmlServiceEventMarshaler;\n+import org.eclipse.kapua.commons.util.xml.XmlUtil;\n+import org.eclipse.kapua.event.ServiceEvent;\n+import org.eclipse.kapua.event.ServiceEventBusException;\n+import org.eclipse.kapua.qa.common.TestJAXBContextProvider;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+import java.io.StringWriter;\n+\n+@Category(JUnitTests.class)\n+public class XmlServiceEventMarshalerTest extends Assert {\n+\n+    ServiceEvent serviceEvent;\n+    XmlServiceEventMarshaler xmlServiceEventMarshaler;\n+    StringWriter stringWriter;\n+\n+    @Before\n+    public void createInstanceOfClasses() {\n+        serviceEvent = new ServiceEvent();\n+        xmlServiceEventMarshaler = new XmlServiceEventMarshaler();\n+        stringWriter = new StringWriter();\n+    }\n+\n+    @Test\n+    public void marshalXmlWithoutContextTest() throws ServiceEventBusException {\n+        stringWriter.write(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" +\n+                \"<serviceEvent/>\\n\");\n+        String expectedValues = stringWriter.toString();\n+        XmlUtil.setContextProvider(new TestJAXBContextProvider());\n+        assertEquals(\"not_equals\", expectedValues, xmlServiceEventMarshaler.marshal(serviceEvent));\n+    }\n+\n+    @Test\n+    public void marshalJsonWithContextTest() throws ServiceEventBusException {\n+        stringWriter.write(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" +\n+                \"<serviceEvent>\\n\" +\n+                \"   <id>id</id>\\n\" +\n+                \"   <contextId>contextId</contextId>\\n\" +\n+                \"   <entityType>entityType</entityType>\\n\" +\n+                \"   <status>SENT</status>\\n\" +\n+                \"   <note>note</note>\\n\" +\n+                \"</serviceEvent>\\n\");\n+\n+        String expectedValues = stringWriter.toString();\n+        serviceEvent.setId(\"id\");\n+        serviceEvent.setContextId(\"contextId\");\n+        serviceEvent.setEntityType(\"entityType\");\n+        serviceEvent.setStatus(ServiceEvent.EventStatus.SENT);\n+        serviceEvent.setNote(\"note\");\n+\n+        XmlUtil.setContextProvider(new TestJAXBContextProvider());\n+        assertEquals(\"not_equals\", expectedValues, xmlServiceEventMarshaler.marshal(serviceEvent));\n+    }\n+\n+    @Test(expected = ServiceEventBusException.class)\n+    public void unmarshalXmlWithoutJAXBContextProviderTest() throws KapuaException {\n+        xmlServiceEventMarshaler.unmarshal(\"message\");\n+    }\n+\n+    @Test(expected = NullPointerException.class)\n+    public void unmarshalXmlWithNullContextTest() throws Exception {\n+        xmlServiceEventMarshaler.unmarshal(null);\n+    }\n+\n+    @Test\n+    public void unmarshalXmlWithContextTest() throws KapuaException {\n+        XmlUtil.setContextProvider(new TestJAXBContextProvider());\n+        ServiceEvent elements = xmlServiceEventMarshaler.unmarshal(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" +\n+                \"<serviceEvent>\\n\" +\n+                \"   <id>id</id>\\n\" +\n+                \"   <contextId>contextId</contextId>\\n\" +\n+                \"   <entityType>entityType</entityType>\\n\" +\n+                \"   <status>SENT</status>\\n\" +\n+                \"   <note>note</note>\\n\" +\n+                \"</serviceEvent>\\n\");\n+\n+        assertEquals(\"not_equals\", \"id\", elements.getId());\n+        assertEquals(\"not_equals\", \"contextId\", elements.getContextId());\n+        assertEquals(\"not_equals\", \"entityType\", elements.getEntityType());\n+        assertEquals(\"not_equals\", ServiceEvent.EventStatus.SENT, elements.getStatus());\n+    }\n+\n+    @Test\n+    public void getContentTypeTest() {\n+        assertEquals(\"not_equals\", \"application/xml\", xmlServiceEventMarshaler.getContentType());", "originalCommit": "d4f078b1dfb83c13e0b22edcd137f0948dec1727", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDgwNzk5NQ==", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r444807995", "body": "I think it would be redundant to add some of these asserts because if a forwarded class exists, an object will be created, otherwise, it returns null. What do you think? ", "bodyText": "I think it would be redundant to add some of these asserts because if a forwarded class exists, an object will be created, otherwise, it returns null. What do you think?", "bodyHTML": "<p dir=\"auto\">I think it would be redundant to add some of these asserts because if a forwarded class exists, an object will be created, otherwise, it returns null. What do you think?</p>", "author": "code-incubus", "createdAt": "2020-06-24T10:48:31Z", "path": "commons/src/test/java/org/eclipse/kapua/commons/util/ClassUtilTest.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.commons.util;\n+\n+import org.eclipse.kapua.KapuaException;\n+import org.eclipse.kapua.commons.event.ServiceEntry;\n+import org.eclipse.kapua.qa.markers.junit.JUnitTests;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+import java.lang.reflect.Constructor;\n+\n+@Category(JUnitTests.class)\n+public class ClassUtilTest extends Assert {\n+\n+    String serviceName, address;\n+\n+    @Test\n+    public void constructorTest() throws Exception {\n+        Constructor<ClassUtil> classUtilConstructor = ClassUtil.class.getDeclaredConstructor();\n+        classUtilConstructor.setAccessible(true);\n+        classUtilConstructor.newInstance();\n+    }\n+\n+    @Test(expected = NullPointerException.class)\n+    public void newInstanceNullTest() throws KapuaException {\n+        assertNull(\"The class does not exist.\", ClassUtil.newInstance(null, null));\n+    }\n+\n+    @Test\n+    public void newInstanceTest() throws KapuaException {\n+        assertNotNull(\"The class does not exist.\", ClassUtil.newInstance(\"org.eclipse.kapua.commons.event.ServiceEntry\", ServiceEntry.class, new Class<?>[]{String.class, String.class}, new Object[]{serviceName, address}));", "originalCommit": "d4f078b1dfb83c13e0b22edcd137f0948dec1727", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDgxOTM3Nw==", "url": "https://github.com/eclipse/kapua/pull/3003#discussion_r444819377", "bodyText": "OK then please check if the returned object is of right class. That is all; this is becasue of code changes in the future, we will be notified by the failing test. Otherwise, if we are just checking for \"notNull\", we will not be notified, test will nto fail and we might miss an important bug.", "author": "LeoNerdoG", "createdAt": "2020-06-24T11:11:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDgwNzk5NQ=="}], "type": "inlineReview"}, {"oid": "56eb5c4a08946a16eb962e9a1ec6a059ed160aa4", "url": "https://github.com/eclipse/kapua/commit/56eb5c4a08946a16eb962e9a1ec6a059ed160aa4", "message": "Added JUnit tests for several packages\n\nSigned-off-by: Nemanja Milutinovi\u0107 <nemanja.milutinovic@comtrade.com>", "committedDate": "2020-06-24T13:04:17Z", "type": "forcePushed"}, {"oid": "a1370e5516f137d9bde8f31449579c4b139355a3", "url": "https://github.com/eclipse/kapua/commit/a1370e5516f137d9bde8f31449579c4b139355a3", "message": "Added JUnit tests for Event, Metric and Util package\n\nSigned-off-by: code-incubus <nemanja.milutinovic@comtrade.com>", "committedDate": "2020-07-01T05:26:35Z", "type": "forcePushed"}, {"oid": "d136c70d8c762cfbca286b3dde8d3dcce46d7b80", "url": "https://github.com/eclipse/kapua/commit/d136c70d8c762cfbca286b3dde8d3dcce46d7b80", "message": "Added JUnit tests for Event, Metric and Util package\n\nSigned-off-by: code-incubus <nemanja.milutinovic@comtrade.com>", "committedDate": "2020-07-01T07:25:06Z", "type": "commit"}, {"oid": "d136c70d8c762cfbca286b3dde8d3dcce46d7b80", "url": "https://github.com/eclipse/kapua/commit/d136c70d8c762cfbca286b3dde8d3dcce46d7b80", "message": "Added JUnit tests for Event, Metric and Util package\n\nSigned-off-by: code-incubus <nemanja.milutinovic@comtrade.com>", "committedDate": "2020-07-01T07:25:06Z", "type": "forcePushed"}]}