{"pr_number": 2941, "pr_title": "Added unit tests for translator part1", "pr_author": "code-incubus", "pr_createdAt": "2020-04-21T14:13:21Z", "pr_url": "https://github.com/eclipse/kapua/pull/2941", "merge_commit": "fa85bb5aacb679c2fa90beb7283e28fe27c5b234", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzYzNTk3Nw==", "url": "https://github.com/eclipse/kapua/pull/2941#discussion_r413635977", "body": "Please change method name to: \"public void creatingMqttMessage(String payload, String topic)\" becasue you have 6 options here and not only one. ", "bodyText": "Please change method name to: \"public void creatingMqttMessage(String payload, String topic)\" becasue you have 6 options here and not only one.", "bodyHTML": "<p dir=\"auto\">Please change method name to: \"public void creatingMqttMessage(String payload, String topic)\" becasue you have 6 options here and not only one.</p>", "author": "LeoNerdoG", "createdAt": "2020-04-23T08:53:55Z", "path": "translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java", "diffHunk": "@@ -0,0 +1,363 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech\n+ *******************************************************************************/\n+package org.eclipse.kapua.translator.test.steps;\n+\n+import cucumber.api.Scenario;\n+import cucumber.api.java.After;\n+import cucumber.api.java.Before;\n+import cucumber.api.java.en.And;\n+import cucumber.api.java.en.Given;\n+import cucumber.api.java.en.Then;\n+import cucumber.api.java.en.When;\n+import cucumber.runtime.java.guice.ScenarioScoped;\n+import org.apache.shiro.SecurityUtils;\n+import org.eclipse.kapua.KapuaException;\n+import org.eclipse.kapua.commons.security.KapuaSecurityUtils;\n+import org.eclipse.kapua.commons.security.KapuaSession;\n+import org.eclipse.kapua.commons.util.xml.XmlUtil;\n+import org.eclipse.kapua.locator.KapuaLocator;\n+import org.eclipse.kapua.qa.common.DBHelper;\n+import org.eclipse.kapua.qa.common.StepData;\n+import org.eclipse.kapua.qa.common.TestBase;\n+import org.eclipse.kapua.qa.common.TestJAXBContextProvider;\n+import org.eclipse.kapua.service.device.call.message.kura.KuraPayload;\n+import org.eclipse.kapua.service.device.call.message.kura.app.response.KuraResponseMessage;\n+import org.eclipse.kapua.service.device.call.message.kura.data.KuraDataChannel;\n+import org.eclipse.kapua.service.device.call.message.kura.data.KuraDataMessage;\n+import org.eclipse.kapua.service.device.call.message.kura.data.KuraDataPayload;\n+import org.eclipse.kapua.translator.Translator;\n+import org.eclipse.kapua.translator.jms.kura.TranslatorDataJmsKura;\n+import org.eclipse.kapua.translator.kura.jms.TranslatorDataKuraJms;\n+import org.eclipse.kapua.translator.kura.mqtt.TranslatorDataKuraMqtt;\n+import org.eclipse.kapua.translator.mqtt.kura.TranslatorDataMqttKura;\n+import org.eclipse.kapua.translator.mqtt.kura.TranslatorResponseMqttKura;\n+import org.eclipse.kapua.transport.message.jms.JmsMessage;\n+import org.eclipse.kapua.transport.message.jms.JmsPayload;\n+import org.eclipse.kapua.transport.message.jms.JmsTopic;\n+import org.eclipse.kapua.transport.message.mqtt.MqttMessage;\n+import org.eclipse.kapua.transport.message.mqtt.MqttPayload;\n+import org.eclipse.kapua.transport.message.mqtt.MqttTopic;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.inject.Inject;\n+import java.util.Date;\n+import java.util.List;\n+\n+/**\n+ * Implementation of Gherkin steps used in TranslatorUnitTests.feature scenarios.\n+ */\n+@ScenarioScoped\n+public class TranslatorSteps extends TestBase {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(TranslatorSteps.class);\n+\n+\n+    private DBHelper database;\n+    private ExampleTranslator exampleTranslator;\n+    private TranslatorDataMqttKura translatorDataMqttKura;\n+    private TranslatorResponseMqttKura translatorResponseMqttKura;\n+    private TranslatorDataKuraMqtt translatorDataKuraMqtt;\n+    private TranslatorDataJmsKura translatorDataJmsKura;\n+    private TranslatorDataKuraJms translatorDataKuraJms;\n+\n+    @Inject\n+    public TranslatorSteps(StepData stepData, DBHelper dbHelper) {\n+\n+        this.stepData = stepData;\n+        this.database = dbHelper;\n+    }\n+\n+    // *************************************\n+    // Definition of Cucumber scenario steps\n+    // *************************************\n+\n+    @Before\n+    public void beforeScenario(Scenario scenario) {\n+\n+        this.scenario = scenario;\n+        database.setup();\n+        stepData.clear();\n+\n+        locator = KapuaLocator.getInstance();\n+        exampleTranslator = new ExampleTranslator();\n+\n+        translatorDataMqttKura = new TranslatorDataMqttKura();\n+        translatorResponseMqttKura = new TranslatorResponseMqttKura();\n+        translatorDataKuraMqtt = new TranslatorDataKuraMqtt();\n+        translatorDataJmsKura = new TranslatorDataJmsKura();\n+        translatorDataKuraJms = new TranslatorDataKuraJms();\n+\n+        if (isUnitTest()) {\n+            // Create KapuaSession using KapuaSecurtiyUtils and kapua-sys user as logged in user.\n+            // All operations on database are performed using system user.\n+            // Only for unit tests. Integration tests assume that a real logon is performed.\n+            KapuaSession kapuaSession = new KapuaSession(null, SYS_SCOPE_ID, SYS_USER_ID);\n+            KapuaSecurityUtils.setSession(kapuaSession);\n+        }\n+\n+        // Setup JAXB context\n+        XmlUtil.setContextProvider(new TestJAXBContextProvider());\n+    }\n+\n+    @After\n+    public void afterScenario() {\n+\n+        // Clean up the database\n+        try {\n+            logger.info(\"Logging out in cleanup\");\n+            if (isIntegrationTest()) {\n+                database.deleteAll();\n+                SecurityUtils.getSubject().logout();\n+            } else {\n+                database.dropAll();\n+                database.close();\n+            }\n+            KapuaSecurityUtils.clearSession();\n+        } catch (Exception e) {\n+            logger.error(\"Failed to log out in @After\", e);\n+        }\n+    }\n+\n+    @Given(\"^I try to translate from \\\"([^\\\"]*)\\\" to \\\"([^\\\"]*)\\\"$\")\n+    public void iFindTranslator(String from, String to) throws Exception {\n+        Class fromClass;\n+        Class toClass;\n+        try {\n+            if (!from.equals(\"\") && !to.equals(\"\")) {\n+                fromClass = Class.forName(from);\n+                toClass = Class.forName(to);\n+            } else {\n+                fromClass = null;\n+                toClass = null;\n+            }\n+            Translator translator = Translator.getTranslatorFor(exampleTranslator.getClass(fromClass), exampleTranslator.getClass(toClass));\n+            stepData.put(\"Translator\", translator);\n+        } catch (Exception ex) {\n+            verifyException(ex);\n+        }\n+    }\n+\n+    @Then(\"^Translator \\\"([^\\\"]*)\\\" is found$\")\n+    public void translatorIsFound(String translatorName) {\n+        Translator translator = (Translator) stepData.get(\"Translator\");\n+        assertEquals(translatorName, translator.getClass().getSimpleName());\n+    }\n+\n+    @Given(\"^I create mqtt message with (?:valid|invalid|empty) payload \\\"([^\\\"]*)\\\" and (?:valid|invalid) topic \\\"([^\\\"]*)\\\"$\")\n+    public void iTryToProvideInvalidTopic(String payload, String topic) {", "originalCommit": "400eb7bd926531f5b12f378c2c62c5fe8f8e1713", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2d7d0206645175175a1a27a3ca30d84bb82b5188", "changed_code": [{"header": "diff --git a/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java b/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\nindex a748910368..668c0d0291 100644\n--- a/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\n+++ b/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\n", "chunk": "@@ -154,22 +154,25 @@ public class TranslatorSteps extends TestBase {\n     }\n \n     @Given(\"^I create mqtt message with (?:valid|invalid|empty) payload \\\"([^\\\"]*)\\\" and (?:valid|invalid) topic \\\"([^\\\"]*)\\\"$\")\n-    public void iTryToProvideInvalidTopic(String payload, String topic) {\n-\n-        Date date = new Date();\n-        MqttTopic mqttTopic = new MqttTopic(topic);\n+    public void creatingMqttMessage(String payload, String topic) throws Exception{\n+        try {\n+            Date date = new Date();\n+            MqttTopic mqttTopic = new MqttTopic(topic);\n \n-        KuraPayload kuraPayload = new KuraPayload();\n-        if (payload.equals(\"invalidPayload\") || payload.equals(\"\")) {\n-            kuraPayload.setBody(payload.getBytes());\n-        } else {\n-            kuraPayload.getMetrics().put(payload, 200);\n-        }\n+            KuraPayload kuraPayload = new KuraPayload();\n+            if (payload.equals(\"invalidPayload\") || payload.equals(\"\")) {\n+                kuraPayload.setBody(payload.getBytes());\n+            } else {\n+                kuraPayload.getMetrics().put(payload, 200);\n+            }\n \n-        MqttPayload mqttPayload = new MqttPayload(kuraPayload.toByteArray());\n-        MqttMessage mqttMessage = new MqttMessage(mqttTopic, date, mqttPayload);\n+            MqttPayload mqttPayload = new MqttPayload(kuraPayload.toByteArray());\n+            MqttMessage mqttMessage = new MqttMessage(mqttTopic, date, mqttPayload);\n \n-        stepData.put(\"MqttMessage\", mqttMessage);\n+            stepData.put(\"MqttMessage\", mqttMessage);\n+        } catch (Exception ex){\n+            verifyException(ex);\n+        }\n     }\n \n     @When(\"^I try to translate mqtt response$\")\n", "next_change": null}]}, "revised_code_in_main": {"commit": "fa85bb5aacb679c2fa90beb7283e28fe27c5b234", "changed_code": [{"header": "diff --git a/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java b/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\nindex a748910368..668c0d0291 100644\n--- a/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\n+++ b/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\n", "chunk": "@@ -154,22 +154,25 @@ public class TranslatorSteps extends TestBase {\n     }\n \n     @Given(\"^I create mqtt message with (?:valid|invalid|empty) payload \\\"([^\\\"]*)\\\" and (?:valid|invalid) topic \\\"([^\\\"]*)\\\"$\")\n-    public void iTryToProvideInvalidTopic(String payload, String topic) {\n-\n-        Date date = new Date();\n-        MqttTopic mqttTopic = new MqttTopic(topic);\n+    public void creatingMqttMessage(String payload, String topic) throws Exception{\n+        try {\n+            Date date = new Date();\n+            MqttTopic mqttTopic = new MqttTopic(topic);\n \n-        KuraPayload kuraPayload = new KuraPayload();\n-        if (payload.equals(\"invalidPayload\") || payload.equals(\"\")) {\n-            kuraPayload.setBody(payload.getBytes());\n-        } else {\n-            kuraPayload.getMetrics().put(payload, 200);\n-        }\n+            KuraPayload kuraPayload = new KuraPayload();\n+            if (payload.equals(\"invalidPayload\") || payload.equals(\"\")) {\n+                kuraPayload.setBody(payload.getBytes());\n+            } else {\n+                kuraPayload.getMetrics().put(payload, 200);\n+            }\n \n-        MqttPayload mqttPayload = new MqttPayload(kuraPayload.toByteArray());\n-        MqttMessage mqttMessage = new MqttMessage(mqttTopic, date, mqttPayload);\n+            MqttPayload mqttPayload = new MqttPayload(kuraPayload.toByteArray());\n+            MqttMessage mqttMessage = new MqttMessage(mqttTopic, date, mqttPayload);\n \n-        stepData.put(\"MqttMessage\", mqttMessage);\n+            stepData.put(\"MqttMessage\", mqttMessage);\n+        } catch (Exception ex){\n+            verifyException(ex);\n+        }\n     }\n \n     @When(\"^I try to translate mqtt response$\")\n", "next_change": {"commit": "123f51e94d1afdb0fb2210f02f65c9f9e29dfe97", "changed_code": [{"header": "diff --git a/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java b/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\nindex 668c0d0291..5535f55da2 100644\n--- a/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\n+++ b/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\n", "chunk": "@@ -147,38 +99,34 @@ public class TranslatorSteps extends TestBase {\n         }\n     }\n \n-    @Then(\"^Translator \\\"([^\\\"]*)\\\" is found$\")\n+    @Then(\"Translator {string} is found\")\n     public void translatorIsFound(String translatorName) {\n         Translator translator = (Translator) stepData.get(\"Translator\");\n-        assertEquals(translatorName, translator.getClass().getSimpleName());\n+        Assert.assertEquals(translatorName, translator.getClass().getSimpleName());\n     }\n \n-    @Given(\"^I create mqtt message with (?:valid|invalid|empty) payload \\\"([^\\\"]*)\\\" and (?:valid|invalid) topic \\\"([^\\\"]*)\\\"$\")\n+    @Given(\"I create mqtt message with (valid/invalid/empty) payload {string} and (valid/invalid) topic {string}\")\n     public void creatingMqttMessage(String payload, String topic) throws Exception{\n         try {\n             Date date = new Date();\n             MqttTopic mqttTopic = new MqttTopic(topic);\n-\n             KuraPayload kuraPayload = new KuraPayload();\n             if (payload.equals(\"invalidPayload\") || payload.equals(\"\")) {\n                 kuraPayload.setBody(payload.getBytes());\n             } else {\n                 kuraPayload.getMetrics().put(payload, 200);\n             }\n-\n             MqttPayload mqttPayload = new MqttPayload(kuraPayload.toByteArray());\n             MqttMessage mqttMessage = new MqttMessage(mqttTopic, date, mqttPayload);\n-\n             stepData.put(\"MqttMessage\", mqttMessage);\n         } catch (Exception ex){\n             verifyException(ex);\n         }\n     }\n \n-    @When(\"^I try to translate mqtt response$\")\n+    @When(\"I try to translate mqtt response\")\n     public void iTryToTranslateMqttResponse() throws Exception {\n         MqttMessage mqttMessage = (MqttMessage) stepData.get(\"MqttMessage\");\n-\n         try {\n             KuraResponseMessage kuraResponseMessage = translatorResponseMqttKura.translate(mqttMessage);\n             stepData.put(\"KuraResponseMessage\", kuraResponseMessage);\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "fa85bb5aacb679c2fa90beb7283e28fe27c5b234", "message": "Merge commit", "committedDate": null}, {"oid": "9f7bc792c823dcab476a48e34cf1be87ea7801fb", "committedDate": "2020-09-07 11:51:17 +0200", "message": "Added JUnit and I9 tests"}, {"oid": "a7f7240e48238651f4ffe159f5b0867092eb29b0", "committedDate": "2020-11-11 17:13:08 +0100", "message": "Upgrade to EPL-2.0"}, {"oid": "56bacf723fa05f9a6e83f524c9d6d158bf6f2298", "committedDate": "2020-11-11 17:13:11 +0100", "message": "Remove \"All rights reserved.\" from Copyright Headers"}, {"oid": "dd481c52c43202d55fe8f8c3aafdbec933230cb0", "committedDate": "2021-01-02 17:21:55 +0100", "message": "Update Copyright Year to 2021"}, {"oid": "a56f7b5fb1bb53eb407bcfa0b233e48305cbd534", "committedDate": "2021-08-26 09:29:51 +0200", "message": "external camel consumers"}, {"oid": "11ac0a839beb8414bd87fb1c93c90adfca02822b", "committedDate": "2021-08-26 09:29:51 +0200", "message": "external camel consumers"}, {"oid": "213469756f408e3756fc2d4ffe63560ea51cc399", "committedDate": "2021-09-09 14:48:22 +0200", "message": "external camel consumers - upgrade cucumber to 6.10.4"}, {"oid": "123f51e94d1afdb0fb2210f02f65c9f9e29dfe97", "committedDate": "2021-09-09 14:48:22 +0200", "message": "external camel consumers - upgrade cucumber to 6.10.4 - fixed steps/features/tests tags:"}, {"oid": "7a44c34bbf4c060622421c1cfff94e378681b61a", "committedDate": "2022-01-18 12:28:06 +0100", "message": "Fixed wrong syntax in steps"}, {"oid": "b2f2672d9b138ed1bc71ee1baf60069a326733c2", "committedDate": "2022-01-18 12:30:23 +0100", "message": "Fixed typos"}, {"oid": "72adba095b1dd3a8b7f4aa4fb56d2fa2c86a62bb", "committedDate": "2022-02-17 10:17:20 +0100", "message": "Updated copyright headers to 2022"}, {"oid": "5c5acc4009d68195d31608e448966fc433397f66", "committedDate": "2022-11-09 14:56:53 +0100", "message": "Added Configuration Change event handling and improved JMS-Kura translator implementation"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzYzNjQ3Ng==", "url": "https://github.com/eclipse/kapua/pull/2941#discussion_r413636476", "body": "Plesase change the method name to: \"public voidkuraResponseMessageWithPayloadAndChannelAndData()\"", "bodyText": "Plesase change the method name to: \"public voidkuraResponseMessageWithPayloadAndChannelAndData()\"", "bodyHTML": "<p dir=\"auto\">Plesase change the method name to: \"public voidkuraResponseMessageWithPayloadAndChannelAndData()\"</p>", "author": "LeoNerdoG", "createdAt": "2020-04-23T08:54:39Z", "path": "translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java", "diffHunk": "@@ -0,0 +1,363 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech\n+ *******************************************************************************/\n+package org.eclipse.kapua.translator.test.steps;\n+\n+import cucumber.api.Scenario;\n+import cucumber.api.java.After;\n+import cucumber.api.java.Before;\n+import cucumber.api.java.en.And;\n+import cucumber.api.java.en.Given;\n+import cucumber.api.java.en.Then;\n+import cucumber.api.java.en.When;\n+import cucumber.runtime.java.guice.ScenarioScoped;\n+import org.apache.shiro.SecurityUtils;\n+import org.eclipse.kapua.KapuaException;\n+import org.eclipse.kapua.commons.security.KapuaSecurityUtils;\n+import org.eclipse.kapua.commons.security.KapuaSession;\n+import org.eclipse.kapua.commons.util.xml.XmlUtil;\n+import org.eclipse.kapua.locator.KapuaLocator;\n+import org.eclipse.kapua.qa.common.DBHelper;\n+import org.eclipse.kapua.qa.common.StepData;\n+import org.eclipse.kapua.qa.common.TestBase;\n+import org.eclipse.kapua.qa.common.TestJAXBContextProvider;\n+import org.eclipse.kapua.service.device.call.message.kura.KuraPayload;\n+import org.eclipse.kapua.service.device.call.message.kura.app.response.KuraResponseMessage;\n+import org.eclipse.kapua.service.device.call.message.kura.data.KuraDataChannel;\n+import org.eclipse.kapua.service.device.call.message.kura.data.KuraDataMessage;\n+import org.eclipse.kapua.service.device.call.message.kura.data.KuraDataPayload;\n+import org.eclipse.kapua.translator.Translator;\n+import org.eclipse.kapua.translator.jms.kura.TranslatorDataJmsKura;\n+import org.eclipse.kapua.translator.kura.jms.TranslatorDataKuraJms;\n+import org.eclipse.kapua.translator.kura.mqtt.TranslatorDataKuraMqtt;\n+import org.eclipse.kapua.translator.mqtt.kura.TranslatorDataMqttKura;\n+import org.eclipse.kapua.translator.mqtt.kura.TranslatorResponseMqttKura;\n+import org.eclipse.kapua.transport.message.jms.JmsMessage;\n+import org.eclipse.kapua.transport.message.jms.JmsPayload;\n+import org.eclipse.kapua.transport.message.jms.JmsTopic;\n+import org.eclipse.kapua.transport.message.mqtt.MqttMessage;\n+import org.eclipse.kapua.transport.message.mqtt.MqttPayload;\n+import org.eclipse.kapua.transport.message.mqtt.MqttTopic;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.inject.Inject;\n+import java.util.Date;\n+import java.util.List;\n+\n+/**\n+ * Implementation of Gherkin steps used in TranslatorUnitTests.feature scenarios.\n+ */\n+@ScenarioScoped\n+public class TranslatorSteps extends TestBase {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(TranslatorSteps.class);\n+\n+\n+    private DBHelper database;\n+    private ExampleTranslator exampleTranslator;\n+    private TranslatorDataMqttKura translatorDataMqttKura;\n+    private TranslatorResponseMqttKura translatorResponseMqttKura;\n+    private TranslatorDataKuraMqtt translatorDataKuraMqtt;\n+    private TranslatorDataJmsKura translatorDataJmsKura;\n+    private TranslatorDataKuraJms translatorDataKuraJms;\n+\n+    @Inject\n+    public TranslatorSteps(StepData stepData, DBHelper dbHelper) {\n+\n+        this.stepData = stepData;\n+        this.database = dbHelper;\n+    }\n+\n+    // *************************************\n+    // Definition of Cucumber scenario steps\n+    // *************************************\n+\n+    @Before\n+    public void beforeScenario(Scenario scenario) {\n+\n+        this.scenario = scenario;\n+        database.setup();\n+        stepData.clear();\n+\n+        locator = KapuaLocator.getInstance();\n+        exampleTranslator = new ExampleTranslator();\n+\n+        translatorDataMqttKura = new TranslatorDataMqttKura();\n+        translatorResponseMqttKura = new TranslatorResponseMqttKura();\n+        translatorDataKuraMqtt = new TranslatorDataKuraMqtt();\n+        translatorDataJmsKura = new TranslatorDataJmsKura();\n+        translatorDataKuraJms = new TranslatorDataKuraJms();\n+\n+        if (isUnitTest()) {\n+            // Create KapuaSession using KapuaSecurtiyUtils and kapua-sys user as logged in user.\n+            // All operations on database are performed using system user.\n+            // Only for unit tests. Integration tests assume that a real logon is performed.\n+            KapuaSession kapuaSession = new KapuaSession(null, SYS_SCOPE_ID, SYS_USER_ID);\n+            KapuaSecurityUtils.setSession(kapuaSession);\n+        }\n+\n+        // Setup JAXB context\n+        XmlUtil.setContextProvider(new TestJAXBContextProvider());\n+    }\n+\n+    @After\n+    public void afterScenario() {\n+\n+        // Clean up the database\n+        try {\n+            logger.info(\"Logging out in cleanup\");\n+            if (isIntegrationTest()) {\n+                database.deleteAll();\n+                SecurityUtils.getSubject().logout();\n+            } else {\n+                database.dropAll();\n+                database.close();\n+            }\n+            KapuaSecurityUtils.clearSession();\n+        } catch (Exception e) {\n+            logger.error(\"Failed to log out in @After\", e);\n+        }\n+    }\n+\n+    @Given(\"^I try to translate from \\\"([^\\\"]*)\\\" to \\\"([^\\\"]*)\\\"$\")\n+    public void iFindTranslator(String from, String to) throws Exception {\n+        Class fromClass;\n+        Class toClass;\n+        try {\n+            if (!from.equals(\"\") && !to.equals(\"\")) {\n+                fromClass = Class.forName(from);\n+                toClass = Class.forName(to);\n+            } else {\n+                fromClass = null;\n+                toClass = null;\n+            }\n+            Translator translator = Translator.getTranslatorFor(exampleTranslator.getClass(fromClass), exampleTranslator.getClass(toClass));\n+            stepData.put(\"Translator\", translator);\n+        } catch (Exception ex) {\n+            verifyException(ex);\n+        }\n+    }\n+\n+    @Then(\"^Translator \\\"([^\\\"]*)\\\" is found$\")\n+    public void translatorIsFound(String translatorName) {\n+        Translator translator = (Translator) stepData.get(\"Translator\");\n+        assertEquals(translatorName, translator.getClass().getSimpleName());\n+    }\n+\n+    @Given(\"^I create mqtt message with (?:valid|invalid|empty) payload \\\"([^\\\"]*)\\\" and (?:valid|invalid) topic \\\"([^\\\"]*)\\\"$\")\n+    public void iTryToProvideInvalidTopic(String payload, String topic) {\n+\n+        Date date = new Date();\n+        MqttTopic mqttTopic = new MqttTopic(topic);\n+\n+        KuraPayload kuraPayload = new KuraPayload();\n+        if (payload.equals(\"invalidPayload\") || payload.equals(\"\")) {\n+            kuraPayload.setBody(payload.getBytes());\n+        } else {\n+            kuraPayload.getMetrics().put(payload, 200);\n+        }\n+\n+        MqttPayload mqttPayload = new MqttPayload(kuraPayload.toByteArray());\n+        MqttMessage mqttMessage = new MqttMessage(mqttTopic, date, mqttPayload);\n+\n+        stepData.put(\"MqttMessage\", mqttMessage);\n+    }\n+\n+    @When(\"^I try to translate mqtt response$\")\n+    public void iTryToTranslateMqttResponse() throws Exception {\n+        MqttMessage mqttMessage = (MqttMessage) stepData.get(\"MqttMessage\");\n+\n+        try {\n+            KuraResponseMessage kuraResponseMessage = translatorResponseMqttKura.translate(mqttMessage);\n+            stepData.put(\"KuraResponseMessage\", kuraResponseMessage);\n+        } catch (KapuaException ex) {\n+            verifyException(ex);\n+        }\n+    }\n+\n+    @Then(\"^I got kura response message with \\\"([^\\\"]*)\\\" payload body$\")\n+    public void iGotKuraResponseMessageWithPayloadBody(String payloadType) {\n+        KuraResponseMessage kuraResponseMessage = (KuraResponseMessage) stepData.get(\"KuraResponseMessage\");\n+\n+        assertTrue(kuraResponseMessage.getPayload().getBody().getClass().getSimpleName().equals(payloadType));\n+    }\n+\n+    @Then(\"^I got kura response message with proper payload metrics$\")\n+    public void iGotKuraResponseMessageWithPayloadAndChannelWithAndData() {", "originalCommit": "400eb7bd926531f5b12f378c2c62c5fe8f8e1713", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2d7d0206645175175a1a27a3ca30d84bb82b5188", "changed_code": [{"header": "diff --git a/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java b/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\nindex a748910368..668c0d0291 100644\n--- a/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\n+++ b/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\n", "chunk": "@@ -185,37 +188,46 @@ public class TranslatorSteps extends TestBase {\n     }\n \n     @Then(\"^I got kura response message with \\\"([^\\\"]*)\\\" payload body$\")\n-    public void iGotKuraResponseMessageWithPayloadBody(String payloadType) {\n+    public void kuraResponseMessageWithPayloadBody(String payloadType) {\n         KuraResponseMessage kuraResponseMessage = (KuraResponseMessage) stepData.get(\"KuraResponseMessage\");\n \n         assertTrue(kuraResponseMessage.getPayload().getBody().getClass().getSimpleName().equals(payloadType));\n     }\n \n     @Then(\"^I got kura response message with proper payload metrics$\")\n-    public void iGotKuraResponseMessageWithPayloadAndChannelWithAndData() {\n+    public void kuraResponseMessageWithPayloadAndChannelAndData() {\n         KuraResponseMessage kuraResponseMessage = (KuraResponseMessage) stepData.get(\"KuraResponseMessage\");\n \n         assertTrue(kuraResponseMessage.getPayload().getMetrics() != null);\n     }\n \n     @Given(\"^I create kura data message with channel with scope \\\"([^\\\"]*)\\\", client id \\\"([^\\\"]*)\\\" and payload without body and metrics$\")\n-    public void iCreateKuraDataMessage(String scope, String clientId) {\n-        KuraDataChannel kuraDataChannel = new KuraDataChannel(scope, clientId);\n-        Date date = new Date();\n-        KuraDataPayload kuraDataPayload = new KuraDataPayload();\n-        KuraDataMessage kuraDataMessage = new KuraDataMessage(kuraDataChannel, date, kuraDataPayload);\n-        stepData.put(\"KuraDataMessage\", kuraDataMessage);\n+    public void iCreateKuraDataMessage(String scope, String clientId) throws Exception {\n+        try {\n+            KuraDataChannel kuraDataChannel = new KuraDataChannel(scope, clientId);\n+            Date date = new Date();\n+            KuraDataPayload kuraDataPayload = new KuraDataPayload();\n+            KuraDataMessage kuraDataMessage = new KuraDataMessage(kuraDataChannel, date, kuraDataPayload);\n+            stepData.put(\"KuraDataMessage\", kuraDataMessage);\n+        } catch (Exception ex) {\n+            verifyException(ex);\n+        }\n     }\n \n     @And(\"^I try to translate kura data message to mqtt message$\")\n     public void iTryToTranslateKuraDataMessageToMqttMessage() throws Exception {\n-        KuraDataMessage kuraDataMessage = (KuraDataMessage) stepData.get(\"KuraDataMessage\");\n-        MqttMessage mqttMessage = translatorDataKuraMqtt.translate(kuraDataMessage);\n-        stepData.put(\"MqttMessage\", mqttMessage);\n+        try {\n+            KuraDataMessage kuraDataMessage = (KuraDataMessage) stepData.get(\"KuraDataMessage\");\n+            MqttMessage mqttMessage = translatorDataKuraMqtt.translate(kuraDataMessage);\n+            stepData.put(\"MqttMessage\", mqttMessage);\n+        } catch (Exception ex) {\n+            verifyException(ex);\n+        }\n+\n     }\n \n-    @Then(\"^I got mqtt message with channel with scope \\\"([^\\\"]*)\\\", client id \\\"([^\\\"]*)\\\" and (?:empty body|non empty body)$\")\n-    public void iGotMqttMessageWithChannelWithClientIdScopeAndWithoutMetricsAndBodyInPayload(String scope, String clientId) {\n+    @Then(\"^I get mqtt message with channel with scope \\\"([^\\\"]*)\\\", client id \\\"([^\\\"]*)\\\" and (?:empty body|non empty body)$\")\n+    public void mqttMessageWithChanneScopeClienIDandBody(String scope, String clientId) {\n         MqttMessage mqttMessage = (MqttMessage) stepData.get(\"MqttMessage\");\n \n         String requestTopic = scope.concat(\"/\" + clientId);\n", "next_change": null}]}, "revised_code_in_main": {"commit": "fa85bb5aacb679c2fa90beb7283e28fe27c5b234", "changed_code": [{"header": "diff --git a/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java b/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\nindex a748910368..668c0d0291 100644\n--- a/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\n+++ b/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\n", "chunk": "@@ -185,37 +188,46 @@ public class TranslatorSteps extends TestBase {\n     }\n \n     @Then(\"^I got kura response message with \\\"([^\\\"]*)\\\" payload body$\")\n-    public void iGotKuraResponseMessageWithPayloadBody(String payloadType) {\n+    public void kuraResponseMessageWithPayloadBody(String payloadType) {\n         KuraResponseMessage kuraResponseMessage = (KuraResponseMessage) stepData.get(\"KuraResponseMessage\");\n \n         assertTrue(kuraResponseMessage.getPayload().getBody().getClass().getSimpleName().equals(payloadType));\n     }\n \n     @Then(\"^I got kura response message with proper payload metrics$\")\n-    public void iGotKuraResponseMessageWithPayloadAndChannelWithAndData() {\n+    public void kuraResponseMessageWithPayloadAndChannelAndData() {\n         KuraResponseMessage kuraResponseMessage = (KuraResponseMessage) stepData.get(\"KuraResponseMessage\");\n \n         assertTrue(kuraResponseMessage.getPayload().getMetrics() != null);\n     }\n \n     @Given(\"^I create kura data message with channel with scope \\\"([^\\\"]*)\\\", client id \\\"([^\\\"]*)\\\" and payload without body and metrics$\")\n-    public void iCreateKuraDataMessage(String scope, String clientId) {\n-        KuraDataChannel kuraDataChannel = new KuraDataChannel(scope, clientId);\n-        Date date = new Date();\n-        KuraDataPayload kuraDataPayload = new KuraDataPayload();\n-        KuraDataMessage kuraDataMessage = new KuraDataMessage(kuraDataChannel, date, kuraDataPayload);\n-        stepData.put(\"KuraDataMessage\", kuraDataMessage);\n+    public void iCreateKuraDataMessage(String scope, String clientId) throws Exception {\n+        try {\n+            KuraDataChannel kuraDataChannel = new KuraDataChannel(scope, clientId);\n+            Date date = new Date();\n+            KuraDataPayload kuraDataPayload = new KuraDataPayload();\n+            KuraDataMessage kuraDataMessage = new KuraDataMessage(kuraDataChannel, date, kuraDataPayload);\n+            stepData.put(\"KuraDataMessage\", kuraDataMessage);\n+        } catch (Exception ex) {\n+            verifyException(ex);\n+        }\n     }\n \n     @And(\"^I try to translate kura data message to mqtt message$\")\n     public void iTryToTranslateKuraDataMessageToMqttMessage() throws Exception {\n-        KuraDataMessage kuraDataMessage = (KuraDataMessage) stepData.get(\"KuraDataMessage\");\n-        MqttMessage mqttMessage = translatorDataKuraMqtt.translate(kuraDataMessage);\n-        stepData.put(\"MqttMessage\", mqttMessage);\n+        try {\n+            KuraDataMessage kuraDataMessage = (KuraDataMessage) stepData.get(\"KuraDataMessage\");\n+            MqttMessage mqttMessage = translatorDataKuraMqtt.translate(kuraDataMessage);\n+            stepData.put(\"MqttMessage\", mqttMessage);\n+        } catch (Exception ex) {\n+            verifyException(ex);\n+        }\n+\n     }\n \n-    @Then(\"^I got mqtt message with channel with scope \\\"([^\\\"]*)\\\", client id \\\"([^\\\"]*)\\\" and (?:empty body|non empty body)$\")\n-    public void iGotMqttMessageWithChannelWithClientIdScopeAndWithoutMetricsAndBodyInPayload(String scope, String clientId) {\n+    @Then(\"^I get mqtt message with channel with scope \\\"([^\\\"]*)\\\", client id \\\"([^\\\"]*)\\\" and (?:empty body|non empty body)$\")\n+    public void mqttMessageWithChanneScopeClienIDandBody(String scope, String clientId) {\n         MqttMessage mqttMessage = (MqttMessage) stepData.get(\"MqttMessage\");\n \n         String requestTopic = scope.concat(\"/\" + clientId);\n", "next_change": {"commit": "11ac0a839beb8414bd87fb1c93c90adfca02822b", "changed_code": [{"header": "diff --git a/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java b/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\nindex 668c0d0291..71099fc9c3 100644\n--- a/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\n+++ b/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\n", "chunk": "@@ -231,12 +183,12 @@ public class TranslatorSteps extends TestBase {\n         MqttMessage mqttMessage = (MqttMessage) stepData.get(\"MqttMessage\");\n \n         String requestTopic = scope.concat(\"/\" + clientId);\n-        assertEquals(requestTopic, mqttMessage.getRequestTopic().getTopic());\n+        Assert.assertEquals(requestTopic, mqttMessage.getRequestTopic().getTopic());\n \n         if (mqttMessage.getPayload().getBody().length == 0) {\n-            assertTrue(mqttMessage.getPayload().getBody().length == 0);\n+            Assert.assertTrue(mqttMessage.getPayload().getBody().length == 0);\n         } else {\n-            assertTrue(mqttMessage.getPayload().getBody().length != 0);\n+            Assert.assertTrue(mqttMessage.getPayload().getBody().length != 0);\n         }\n     }\n \n", "next_change": {"commit": "123f51e94d1afdb0fb2210f02f65c9f9e29dfe97", "changed_code": [{"header": "diff --git a/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java b/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\nindex 71099fc9c3..5535f55da2 100644\n--- a/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\n+++ b/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\n", "chunk": "@@ -178,13 +172,11 @@ public class TranslatorSteps extends TestBase {\n \n     }\n \n-    @Then(\"^I get mqtt message with channel with scope \\\"([^\\\"]*)\\\", client id \\\"([^\\\"]*)\\\" and (?:empty body|non empty body)$\")\n+    @Then(\"I get mqtt message with channel with scope {string}, client id {string} and (empty body/non empty body)\")\n     public void mqttMessageWithChanneScopeClienIDandBody(String scope, String clientId) {\n         MqttMessage mqttMessage = (MqttMessage) stepData.get(\"MqttMessage\");\n-\n         String requestTopic = scope.concat(\"/\" + clientId);\n         Assert.assertEquals(requestTopic, mqttMessage.getRequestTopic().getTopic());\n-\n         if (mqttMessage.getPayload().getBody().length == 0) {\n             Assert.assertTrue(mqttMessage.getPayload().getBody().length == 0);\n         } else {\n", "next_change": {"commit": "7a44c34bbf4c060622421c1cfff94e378681b61a", "changed_code": [{"header": "diff --git a/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java b/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\nindex 5535f55da2..aae4d708c4 100644\n--- a/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\n+++ b/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\n", "chunk": "@@ -172,7 +172,7 @@ public class TranslatorSteps extends TestBase {\n \n     }\n \n-    @Then(\"I get mqtt message with channel with scope {string}, client id {string} and (empty body/non empty body)\")\n+    @Then(\"I get mqtt message with channel with scope {string}, client id {string} and (empty body|non empty body)\")\n     public void mqttMessageWithChanneScopeClienIDandBody(String scope, String clientId) {\n         MqttMessage mqttMessage = (MqttMessage) stepData.get(\"MqttMessage\");\n         String requestTopic = scope.concat(\"/\" + clientId);\n", "next_change": {"commit": "b2f2672d9b138ed1bc71ee1baf60069a326733c2", "changed_code": [{"header": "diff --git a/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java b/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\nindex aae4d708c4..10100666f8 100644\n--- a/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\n+++ b/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\n", "chunk": "@@ -173,7 +173,7 @@ public class TranslatorSteps extends TestBase {\n     }\n \n     @Then(\"I get mqtt message with channel with scope {string}, client id {string} and (empty body|non empty body)\")\n-    public void mqttMessageWithChanneScopeClienIDandBody(String scope, String clientId) {\n+    public void mqttMessageWithChannelScopeClientIDAndBody(String scope, String clientId) {\n         MqttMessage mqttMessage = (MqttMessage) stepData.get(\"MqttMessage\");\n         String requestTopic = scope.concat(\"/\" + clientId);\n         Assert.assertEquals(requestTopic, mqttMessage.getRequestTopic().getTopic());\n", "next_change": null}]}}]}}, {"header": "diff --git a/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java b/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\nindex 71099fc9c3..5535f55da2 100644\n--- a/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\n+++ b/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\n", "chunk": "@@ -192,10 +184,9 @@ public class TranslatorSteps extends TestBase {\n         }\n     }\n \n-    @And(\"^I got kura response message channel with \\\"(.+)\\\", \\\"(.+)\\\", \\\"(.+)\\\", \\\"(.+)\\\", \\\"(.+)\\\" and \\\"(.+)\\\" data$\")\n+    @And(\"I got kura response message channel with {string}, {string}, {string}, {string}, {string} and {string} data\")\n     public void kuraResponseMessageWithChannelAndData(String replyPart, String requestId, String appId, String messageClassification, String scope, String clientId) {\n         KuraResponseMessage kuraResponseMessage = (KuraResponseMessage) stepData.get(\"KuraResponseMessage\");\n-\n         Assert.assertTrue(kuraResponseMessage.getChannel().getReplyPart().equals(replyPart));\n         Assert.assertTrue(kuraResponseMessage.getChannel().getRequestId().equals(requestId));\n         Assert.assertTrue(kuraResponseMessage.getChannel().getAppId().equals(appId));\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "fa85bb5aacb679c2fa90beb7283e28fe27c5b234", "message": "Merge commit", "committedDate": null}, {"oid": "9f7bc792c823dcab476a48e34cf1be87ea7801fb", "committedDate": "2020-09-07 11:51:17 +0200", "message": "Added JUnit and I9 tests"}, {"oid": "a7f7240e48238651f4ffe159f5b0867092eb29b0", "committedDate": "2020-11-11 17:13:08 +0100", "message": "Upgrade to EPL-2.0"}, {"oid": "56bacf723fa05f9a6e83f524c9d6d158bf6f2298", "committedDate": "2020-11-11 17:13:11 +0100", "message": "Remove \"All rights reserved.\" from Copyright Headers"}, {"oid": "dd481c52c43202d55fe8f8c3aafdbec933230cb0", "committedDate": "2021-01-02 17:21:55 +0100", "message": "Update Copyright Year to 2021"}, {"oid": "a56f7b5fb1bb53eb407bcfa0b233e48305cbd534", "committedDate": "2021-08-26 09:29:51 +0200", "message": "external camel consumers"}, {"oid": "11ac0a839beb8414bd87fb1c93c90adfca02822b", "committedDate": "2021-08-26 09:29:51 +0200", "message": "external camel consumers"}, {"oid": "213469756f408e3756fc2d4ffe63560ea51cc399", "committedDate": "2021-09-09 14:48:22 +0200", "message": "external camel consumers - upgrade cucumber to 6.10.4"}, {"oid": "123f51e94d1afdb0fb2210f02f65c9f9e29dfe97", "committedDate": "2021-09-09 14:48:22 +0200", "message": "external camel consumers - upgrade cucumber to 6.10.4 - fixed steps/features/tests tags:"}, {"oid": "7a44c34bbf4c060622421c1cfff94e378681b61a", "committedDate": "2022-01-18 12:28:06 +0100", "message": "Fixed wrong syntax in steps"}, {"oid": "b2f2672d9b138ed1bc71ee1baf60069a326733c2", "committedDate": "2022-01-18 12:30:23 +0100", "message": "Fixed typos"}, {"oid": "72adba095b1dd3a8b7f4aa4fb56d2fa2c86a62bb", "committedDate": "2022-02-17 10:17:20 +0100", "message": "Updated copyright headers to 2022"}, {"oid": "5c5acc4009d68195d31608e448966fc433397f66", "committedDate": "2022-11-09 14:56:53 +0100", "message": "Added Configuration Change event handling and improved JMS-Kura translator implementation"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzYzNzkxMA==", "url": "https://github.com/eclipse/kapua/pull/2941#discussion_r413637910", "body": "Please change method name to: \"mqttMessageWithChanneScopeClienIDandBody()\" and even this is too long... you can add a comment bellow, but the method name should never be this long. ", "bodyText": "Please change method name to: \"mqttMessageWithChanneScopeClienIDandBody()\" and even this is too long... you can add a comment bellow, but the method name should never be this long.", "bodyHTML": "<p dir=\"auto\">Please change method name to: \"mqttMessageWithChanneScopeClienIDandBody()\" and even this is too long... you can add a comment bellow, but the method name should never be this long.</p>", "author": "LeoNerdoG", "createdAt": "2020-04-23T08:56:39Z", "path": "translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java", "diffHunk": "@@ -0,0 +1,363 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech\n+ *******************************************************************************/\n+package org.eclipse.kapua.translator.test.steps;\n+\n+import cucumber.api.Scenario;\n+import cucumber.api.java.After;\n+import cucumber.api.java.Before;\n+import cucumber.api.java.en.And;\n+import cucumber.api.java.en.Given;\n+import cucumber.api.java.en.Then;\n+import cucumber.api.java.en.When;\n+import cucumber.runtime.java.guice.ScenarioScoped;\n+import org.apache.shiro.SecurityUtils;\n+import org.eclipse.kapua.KapuaException;\n+import org.eclipse.kapua.commons.security.KapuaSecurityUtils;\n+import org.eclipse.kapua.commons.security.KapuaSession;\n+import org.eclipse.kapua.commons.util.xml.XmlUtil;\n+import org.eclipse.kapua.locator.KapuaLocator;\n+import org.eclipse.kapua.qa.common.DBHelper;\n+import org.eclipse.kapua.qa.common.StepData;\n+import org.eclipse.kapua.qa.common.TestBase;\n+import org.eclipse.kapua.qa.common.TestJAXBContextProvider;\n+import org.eclipse.kapua.service.device.call.message.kura.KuraPayload;\n+import org.eclipse.kapua.service.device.call.message.kura.app.response.KuraResponseMessage;\n+import org.eclipse.kapua.service.device.call.message.kura.data.KuraDataChannel;\n+import org.eclipse.kapua.service.device.call.message.kura.data.KuraDataMessage;\n+import org.eclipse.kapua.service.device.call.message.kura.data.KuraDataPayload;\n+import org.eclipse.kapua.translator.Translator;\n+import org.eclipse.kapua.translator.jms.kura.TranslatorDataJmsKura;\n+import org.eclipse.kapua.translator.kura.jms.TranslatorDataKuraJms;\n+import org.eclipse.kapua.translator.kura.mqtt.TranslatorDataKuraMqtt;\n+import org.eclipse.kapua.translator.mqtt.kura.TranslatorDataMqttKura;\n+import org.eclipse.kapua.translator.mqtt.kura.TranslatorResponseMqttKura;\n+import org.eclipse.kapua.transport.message.jms.JmsMessage;\n+import org.eclipse.kapua.transport.message.jms.JmsPayload;\n+import org.eclipse.kapua.transport.message.jms.JmsTopic;\n+import org.eclipse.kapua.transport.message.mqtt.MqttMessage;\n+import org.eclipse.kapua.transport.message.mqtt.MqttPayload;\n+import org.eclipse.kapua.transport.message.mqtt.MqttTopic;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.inject.Inject;\n+import java.util.Date;\n+import java.util.List;\n+\n+/**\n+ * Implementation of Gherkin steps used in TranslatorUnitTests.feature scenarios.\n+ */\n+@ScenarioScoped\n+public class TranslatorSteps extends TestBase {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(TranslatorSteps.class);\n+\n+\n+    private DBHelper database;\n+    private ExampleTranslator exampleTranslator;\n+    private TranslatorDataMqttKura translatorDataMqttKura;\n+    private TranslatorResponseMqttKura translatorResponseMqttKura;\n+    private TranslatorDataKuraMqtt translatorDataKuraMqtt;\n+    private TranslatorDataJmsKura translatorDataJmsKura;\n+    private TranslatorDataKuraJms translatorDataKuraJms;\n+\n+    @Inject\n+    public TranslatorSteps(StepData stepData, DBHelper dbHelper) {\n+\n+        this.stepData = stepData;\n+        this.database = dbHelper;\n+    }\n+\n+    // *************************************\n+    // Definition of Cucumber scenario steps\n+    // *************************************\n+\n+    @Before\n+    public void beforeScenario(Scenario scenario) {\n+\n+        this.scenario = scenario;\n+        database.setup();\n+        stepData.clear();\n+\n+        locator = KapuaLocator.getInstance();\n+        exampleTranslator = new ExampleTranslator();\n+\n+        translatorDataMqttKura = new TranslatorDataMqttKura();\n+        translatorResponseMqttKura = new TranslatorResponseMqttKura();\n+        translatorDataKuraMqtt = new TranslatorDataKuraMqtt();\n+        translatorDataJmsKura = new TranslatorDataJmsKura();\n+        translatorDataKuraJms = new TranslatorDataKuraJms();\n+\n+        if (isUnitTest()) {\n+            // Create KapuaSession using KapuaSecurtiyUtils and kapua-sys user as logged in user.\n+            // All operations on database are performed using system user.\n+            // Only for unit tests. Integration tests assume that a real logon is performed.\n+            KapuaSession kapuaSession = new KapuaSession(null, SYS_SCOPE_ID, SYS_USER_ID);\n+            KapuaSecurityUtils.setSession(kapuaSession);\n+        }\n+\n+        // Setup JAXB context\n+        XmlUtil.setContextProvider(new TestJAXBContextProvider());\n+    }\n+\n+    @After\n+    public void afterScenario() {\n+\n+        // Clean up the database\n+        try {\n+            logger.info(\"Logging out in cleanup\");\n+            if (isIntegrationTest()) {\n+                database.deleteAll();\n+                SecurityUtils.getSubject().logout();\n+            } else {\n+                database.dropAll();\n+                database.close();\n+            }\n+            KapuaSecurityUtils.clearSession();\n+        } catch (Exception e) {\n+            logger.error(\"Failed to log out in @After\", e);\n+        }\n+    }\n+\n+    @Given(\"^I try to translate from \\\"([^\\\"]*)\\\" to \\\"([^\\\"]*)\\\"$\")\n+    public void iFindTranslator(String from, String to) throws Exception {\n+        Class fromClass;\n+        Class toClass;\n+        try {\n+            if (!from.equals(\"\") && !to.equals(\"\")) {\n+                fromClass = Class.forName(from);\n+                toClass = Class.forName(to);\n+            } else {\n+                fromClass = null;\n+                toClass = null;\n+            }\n+            Translator translator = Translator.getTranslatorFor(exampleTranslator.getClass(fromClass), exampleTranslator.getClass(toClass));\n+            stepData.put(\"Translator\", translator);\n+        } catch (Exception ex) {\n+            verifyException(ex);\n+        }\n+    }\n+\n+    @Then(\"^Translator \\\"([^\\\"]*)\\\" is found$\")\n+    public void translatorIsFound(String translatorName) {\n+        Translator translator = (Translator) stepData.get(\"Translator\");\n+        assertEquals(translatorName, translator.getClass().getSimpleName());\n+    }\n+\n+    @Given(\"^I create mqtt message with (?:valid|invalid|empty) payload \\\"([^\\\"]*)\\\" and (?:valid|invalid) topic \\\"([^\\\"]*)\\\"$\")\n+    public void iTryToProvideInvalidTopic(String payload, String topic) {\n+\n+        Date date = new Date();\n+        MqttTopic mqttTopic = new MqttTopic(topic);\n+\n+        KuraPayload kuraPayload = new KuraPayload();\n+        if (payload.equals(\"invalidPayload\") || payload.equals(\"\")) {\n+            kuraPayload.setBody(payload.getBytes());\n+        } else {\n+            kuraPayload.getMetrics().put(payload, 200);\n+        }\n+\n+        MqttPayload mqttPayload = new MqttPayload(kuraPayload.toByteArray());\n+        MqttMessage mqttMessage = new MqttMessage(mqttTopic, date, mqttPayload);\n+\n+        stepData.put(\"MqttMessage\", mqttMessage);\n+    }\n+\n+    @When(\"^I try to translate mqtt response$\")\n+    public void iTryToTranslateMqttResponse() throws Exception {\n+        MqttMessage mqttMessage = (MqttMessage) stepData.get(\"MqttMessage\");\n+\n+        try {\n+            KuraResponseMessage kuraResponseMessage = translatorResponseMqttKura.translate(mqttMessage);\n+            stepData.put(\"KuraResponseMessage\", kuraResponseMessage);\n+        } catch (KapuaException ex) {\n+            verifyException(ex);\n+        }\n+    }\n+\n+    @Then(\"^I got kura response message with \\\"([^\\\"]*)\\\" payload body$\")\n+    public void iGotKuraResponseMessageWithPayloadBody(String payloadType) {\n+        KuraResponseMessage kuraResponseMessage = (KuraResponseMessage) stepData.get(\"KuraResponseMessage\");\n+\n+        assertTrue(kuraResponseMessage.getPayload().getBody().getClass().getSimpleName().equals(payloadType));\n+    }\n+\n+    @Then(\"^I got kura response message with proper payload metrics$\")\n+    public void iGotKuraResponseMessageWithPayloadAndChannelWithAndData() {\n+        KuraResponseMessage kuraResponseMessage = (KuraResponseMessage) stepData.get(\"KuraResponseMessage\");\n+\n+        assertTrue(kuraResponseMessage.getPayload().getMetrics() != null);\n+    }\n+\n+    @Given(\"^I create kura data message with channel with scope \\\"([^\\\"]*)\\\", client id \\\"([^\\\"]*)\\\" and payload without body and metrics$\")\n+    public void iCreateKuraDataMessage(String scope, String clientId) {\n+        KuraDataChannel kuraDataChannel = new KuraDataChannel(scope, clientId);\n+        Date date = new Date();\n+        KuraDataPayload kuraDataPayload = new KuraDataPayload();\n+        KuraDataMessage kuraDataMessage = new KuraDataMessage(kuraDataChannel, date, kuraDataPayload);\n+        stepData.put(\"KuraDataMessage\", kuraDataMessage);\n+    }\n+\n+    @And(\"^I try to translate kura data message to mqtt message$\")\n+    public void iTryToTranslateKuraDataMessageToMqttMessage() throws Exception {\n+        KuraDataMessage kuraDataMessage = (KuraDataMessage) stepData.get(\"KuraDataMessage\");\n+        MqttMessage mqttMessage = translatorDataKuraMqtt.translate(kuraDataMessage);\n+        stepData.put(\"MqttMessage\", mqttMessage);\n+    }\n+\n+    @Then(\"^I got mqtt message with channel with scope \\\"([^\\\"]*)\\\", client id \\\"([^\\\"]*)\\\" and (?:empty body|non empty body)$\")\n+    public void iGotMqttMessageWithChannelWithClientIdScopeAndWithoutMetricsAndBodyInPayload(String scope, String clientId) {", "originalCommit": "400eb7bd926531f5b12f378c2c62c5fe8f8e1713", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2d7d0206645175175a1a27a3ca30d84bb82b5188", "changed_code": [{"header": "diff --git a/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java b/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\nindex a748910368..668c0d0291 100644\n--- a/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\n+++ b/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\n", "chunk": "@@ -185,37 +188,46 @@ public class TranslatorSteps extends TestBase {\n     }\n \n     @Then(\"^I got kura response message with \\\"([^\\\"]*)\\\" payload body$\")\n-    public void iGotKuraResponseMessageWithPayloadBody(String payloadType) {\n+    public void kuraResponseMessageWithPayloadBody(String payloadType) {\n         KuraResponseMessage kuraResponseMessage = (KuraResponseMessage) stepData.get(\"KuraResponseMessage\");\n \n         assertTrue(kuraResponseMessage.getPayload().getBody().getClass().getSimpleName().equals(payloadType));\n     }\n \n     @Then(\"^I got kura response message with proper payload metrics$\")\n-    public void iGotKuraResponseMessageWithPayloadAndChannelWithAndData() {\n+    public void kuraResponseMessageWithPayloadAndChannelAndData() {\n         KuraResponseMessage kuraResponseMessage = (KuraResponseMessage) stepData.get(\"KuraResponseMessage\");\n \n         assertTrue(kuraResponseMessage.getPayload().getMetrics() != null);\n     }\n \n     @Given(\"^I create kura data message with channel with scope \\\"([^\\\"]*)\\\", client id \\\"([^\\\"]*)\\\" and payload without body and metrics$\")\n-    public void iCreateKuraDataMessage(String scope, String clientId) {\n-        KuraDataChannel kuraDataChannel = new KuraDataChannel(scope, clientId);\n-        Date date = new Date();\n-        KuraDataPayload kuraDataPayload = new KuraDataPayload();\n-        KuraDataMessage kuraDataMessage = new KuraDataMessage(kuraDataChannel, date, kuraDataPayload);\n-        stepData.put(\"KuraDataMessage\", kuraDataMessage);\n+    public void iCreateKuraDataMessage(String scope, String clientId) throws Exception {\n+        try {\n+            KuraDataChannel kuraDataChannel = new KuraDataChannel(scope, clientId);\n+            Date date = new Date();\n+            KuraDataPayload kuraDataPayload = new KuraDataPayload();\n+            KuraDataMessage kuraDataMessage = new KuraDataMessage(kuraDataChannel, date, kuraDataPayload);\n+            stepData.put(\"KuraDataMessage\", kuraDataMessage);\n+        } catch (Exception ex) {\n+            verifyException(ex);\n+        }\n     }\n \n     @And(\"^I try to translate kura data message to mqtt message$\")\n     public void iTryToTranslateKuraDataMessageToMqttMessage() throws Exception {\n-        KuraDataMessage kuraDataMessage = (KuraDataMessage) stepData.get(\"KuraDataMessage\");\n-        MqttMessage mqttMessage = translatorDataKuraMqtt.translate(kuraDataMessage);\n-        stepData.put(\"MqttMessage\", mqttMessage);\n+        try {\n+            KuraDataMessage kuraDataMessage = (KuraDataMessage) stepData.get(\"KuraDataMessage\");\n+            MqttMessage mqttMessage = translatorDataKuraMqtt.translate(kuraDataMessage);\n+            stepData.put(\"MqttMessage\", mqttMessage);\n+        } catch (Exception ex) {\n+            verifyException(ex);\n+        }\n+\n     }\n \n-    @Then(\"^I got mqtt message with channel with scope \\\"([^\\\"]*)\\\", client id \\\"([^\\\"]*)\\\" and (?:empty body|non empty body)$\")\n-    public void iGotMqttMessageWithChannelWithClientIdScopeAndWithoutMetricsAndBodyInPayload(String scope, String clientId) {\n+    @Then(\"^I get mqtt message with channel with scope \\\"([^\\\"]*)\\\", client id \\\"([^\\\"]*)\\\" and (?:empty body|non empty body)$\")\n+    public void mqttMessageWithChanneScopeClienIDandBody(String scope, String clientId) {\n         MqttMessage mqttMessage = (MqttMessage) stepData.get(\"MqttMessage\");\n \n         String requestTopic = scope.concat(\"/\" + clientId);\n", "next_change": null}]}, "revised_code_in_main": {"commit": "fa85bb5aacb679c2fa90beb7283e28fe27c5b234", "changed_code": [{"header": "diff --git a/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java b/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\nindex a748910368..668c0d0291 100644\n--- a/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\n+++ b/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\n", "chunk": "@@ -185,37 +188,46 @@ public class TranslatorSteps extends TestBase {\n     }\n \n     @Then(\"^I got kura response message with \\\"([^\\\"]*)\\\" payload body$\")\n-    public void iGotKuraResponseMessageWithPayloadBody(String payloadType) {\n+    public void kuraResponseMessageWithPayloadBody(String payloadType) {\n         KuraResponseMessage kuraResponseMessage = (KuraResponseMessage) stepData.get(\"KuraResponseMessage\");\n \n         assertTrue(kuraResponseMessage.getPayload().getBody().getClass().getSimpleName().equals(payloadType));\n     }\n \n     @Then(\"^I got kura response message with proper payload metrics$\")\n-    public void iGotKuraResponseMessageWithPayloadAndChannelWithAndData() {\n+    public void kuraResponseMessageWithPayloadAndChannelAndData() {\n         KuraResponseMessage kuraResponseMessage = (KuraResponseMessage) stepData.get(\"KuraResponseMessage\");\n \n         assertTrue(kuraResponseMessage.getPayload().getMetrics() != null);\n     }\n \n     @Given(\"^I create kura data message with channel with scope \\\"([^\\\"]*)\\\", client id \\\"([^\\\"]*)\\\" and payload without body and metrics$\")\n-    public void iCreateKuraDataMessage(String scope, String clientId) {\n-        KuraDataChannel kuraDataChannel = new KuraDataChannel(scope, clientId);\n-        Date date = new Date();\n-        KuraDataPayload kuraDataPayload = new KuraDataPayload();\n-        KuraDataMessage kuraDataMessage = new KuraDataMessage(kuraDataChannel, date, kuraDataPayload);\n-        stepData.put(\"KuraDataMessage\", kuraDataMessage);\n+    public void iCreateKuraDataMessage(String scope, String clientId) throws Exception {\n+        try {\n+            KuraDataChannel kuraDataChannel = new KuraDataChannel(scope, clientId);\n+            Date date = new Date();\n+            KuraDataPayload kuraDataPayload = new KuraDataPayload();\n+            KuraDataMessage kuraDataMessage = new KuraDataMessage(kuraDataChannel, date, kuraDataPayload);\n+            stepData.put(\"KuraDataMessage\", kuraDataMessage);\n+        } catch (Exception ex) {\n+            verifyException(ex);\n+        }\n     }\n \n     @And(\"^I try to translate kura data message to mqtt message$\")\n     public void iTryToTranslateKuraDataMessageToMqttMessage() throws Exception {\n-        KuraDataMessage kuraDataMessage = (KuraDataMessage) stepData.get(\"KuraDataMessage\");\n-        MqttMessage mqttMessage = translatorDataKuraMqtt.translate(kuraDataMessage);\n-        stepData.put(\"MqttMessage\", mqttMessage);\n+        try {\n+            KuraDataMessage kuraDataMessage = (KuraDataMessage) stepData.get(\"KuraDataMessage\");\n+            MqttMessage mqttMessage = translatorDataKuraMqtt.translate(kuraDataMessage);\n+            stepData.put(\"MqttMessage\", mqttMessage);\n+        } catch (Exception ex) {\n+            verifyException(ex);\n+        }\n+\n     }\n \n-    @Then(\"^I got mqtt message with channel with scope \\\"([^\\\"]*)\\\", client id \\\"([^\\\"]*)\\\" and (?:empty body|non empty body)$\")\n-    public void iGotMqttMessageWithChannelWithClientIdScopeAndWithoutMetricsAndBodyInPayload(String scope, String clientId) {\n+    @Then(\"^I get mqtt message with channel with scope \\\"([^\\\"]*)\\\", client id \\\"([^\\\"]*)\\\" and (?:empty body|non empty body)$\")\n+    public void mqttMessageWithChanneScopeClienIDandBody(String scope, String clientId) {\n         MqttMessage mqttMessage = (MqttMessage) stepData.get(\"MqttMessage\");\n \n         String requestTopic = scope.concat(\"/\" + clientId);\n", "next_change": {"commit": "11ac0a839beb8414bd87fb1c93c90adfca02822b", "changed_code": [{"header": "diff --git a/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java b/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\nindex 668c0d0291..71099fc9c3 100644\n--- a/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\n+++ b/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\n", "chunk": "@@ -231,12 +183,12 @@ public class TranslatorSteps extends TestBase {\n         MqttMessage mqttMessage = (MqttMessage) stepData.get(\"MqttMessage\");\n \n         String requestTopic = scope.concat(\"/\" + clientId);\n-        assertEquals(requestTopic, mqttMessage.getRequestTopic().getTopic());\n+        Assert.assertEquals(requestTopic, mqttMessage.getRequestTopic().getTopic());\n \n         if (mqttMessage.getPayload().getBody().length == 0) {\n-            assertTrue(mqttMessage.getPayload().getBody().length == 0);\n+            Assert.assertTrue(mqttMessage.getPayload().getBody().length == 0);\n         } else {\n-            assertTrue(mqttMessage.getPayload().getBody().length != 0);\n+            Assert.assertTrue(mqttMessage.getPayload().getBody().length != 0);\n         }\n     }\n \n", "next_change": {"commit": "123f51e94d1afdb0fb2210f02f65c9f9e29dfe97", "changed_code": [{"header": "diff --git a/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java b/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\nindex 71099fc9c3..5535f55da2 100644\n--- a/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\n+++ b/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\n", "chunk": "@@ -178,13 +172,11 @@ public class TranslatorSteps extends TestBase {\n \n     }\n \n-    @Then(\"^I get mqtt message with channel with scope \\\"([^\\\"]*)\\\", client id \\\"([^\\\"]*)\\\" and (?:empty body|non empty body)$\")\n+    @Then(\"I get mqtt message with channel with scope {string}, client id {string} and (empty body/non empty body)\")\n     public void mqttMessageWithChanneScopeClienIDandBody(String scope, String clientId) {\n         MqttMessage mqttMessage = (MqttMessage) stepData.get(\"MqttMessage\");\n-\n         String requestTopic = scope.concat(\"/\" + clientId);\n         Assert.assertEquals(requestTopic, mqttMessage.getRequestTopic().getTopic());\n-\n         if (mqttMessage.getPayload().getBody().length == 0) {\n             Assert.assertTrue(mqttMessage.getPayload().getBody().length == 0);\n         } else {\n", "next_change": {"commit": "7a44c34bbf4c060622421c1cfff94e378681b61a", "changed_code": [{"header": "diff --git a/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java b/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\nindex 5535f55da2..aae4d708c4 100644\n--- a/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\n+++ b/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\n", "chunk": "@@ -172,7 +172,7 @@ public class TranslatorSteps extends TestBase {\n \n     }\n \n-    @Then(\"I get mqtt message with channel with scope {string}, client id {string} and (empty body/non empty body)\")\n+    @Then(\"I get mqtt message with channel with scope {string}, client id {string} and (empty body|non empty body)\")\n     public void mqttMessageWithChanneScopeClienIDandBody(String scope, String clientId) {\n         MqttMessage mqttMessage = (MqttMessage) stepData.get(\"MqttMessage\");\n         String requestTopic = scope.concat(\"/\" + clientId);\n", "next_change": {"commit": "b2f2672d9b138ed1bc71ee1baf60069a326733c2", "changed_code": [{"header": "diff --git a/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java b/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\nindex aae4d708c4..10100666f8 100644\n--- a/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\n+++ b/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\n", "chunk": "@@ -173,7 +173,7 @@ public class TranslatorSteps extends TestBase {\n     }\n \n     @Then(\"I get mqtt message with channel with scope {string}, client id {string} and (empty body|non empty body)\")\n-    public void mqttMessageWithChanneScopeClienIDandBody(String scope, String clientId) {\n+    public void mqttMessageWithChannelScopeClientIDAndBody(String scope, String clientId) {\n         MqttMessage mqttMessage = (MqttMessage) stepData.get(\"MqttMessage\");\n         String requestTopic = scope.concat(\"/\" + clientId);\n         Assert.assertEquals(requestTopic, mqttMessage.getRequestTopic().getTopic());\n", "next_change": null}]}}]}}, {"header": "diff --git a/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java b/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\nindex 71099fc9c3..5535f55da2 100644\n--- a/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\n+++ b/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\n", "chunk": "@@ -192,10 +184,9 @@ public class TranslatorSteps extends TestBase {\n         }\n     }\n \n-    @And(\"^I got kura response message channel with \\\"(.+)\\\", \\\"(.+)\\\", \\\"(.+)\\\", \\\"(.+)\\\", \\\"(.+)\\\" and \\\"(.+)\\\" data$\")\n+    @And(\"I got kura response message channel with {string}, {string}, {string}, {string}, {string} and {string} data\")\n     public void kuraResponseMessageWithChannelAndData(String replyPart, String requestId, String appId, String messageClassification, String scope, String clientId) {\n         KuraResponseMessage kuraResponseMessage = (KuraResponseMessage) stepData.get(\"KuraResponseMessage\");\n-\n         Assert.assertTrue(kuraResponseMessage.getChannel().getReplyPart().equals(replyPart));\n         Assert.assertTrue(kuraResponseMessage.getChannel().getRequestId().equals(requestId));\n         Assert.assertTrue(kuraResponseMessage.getChannel().getAppId().equals(appId));\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "fa85bb5aacb679c2fa90beb7283e28fe27c5b234", "message": "Merge commit", "committedDate": null}, {"oid": "9f7bc792c823dcab476a48e34cf1be87ea7801fb", "committedDate": "2020-09-07 11:51:17 +0200", "message": "Added JUnit and I9 tests"}, {"oid": "a7f7240e48238651f4ffe159f5b0867092eb29b0", "committedDate": "2020-11-11 17:13:08 +0100", "message": "Upgrade to EPL-2.0"}, {"oid": "56bacf723fa05f9a6e83f524c9d6d158bf6f2298", "committedDate": "2020-11-11 17:13:11 +0100", "message": "Remove \"All rights reserved.\" from Copyright Headers"}, {"oid": "dd481c52c43202d55fe8f8c3aafdbec933230cb0", "committedDate": "2021-01-02 17:21:55 +0100", "message": "Update Copyright Year to 2021"}, {"oid": "a56f7b5fb1bb53eb407bcfa0b233e48305cbd534", "committedDate": "2021-08-26 09:29:51 +0200", "message": "external camel consumers"}, {"oid": "11ac0a839beb8414bd87fb1c93c90adfca02822b", "committedDate": "2021-08-26 09:29:51 +0200", "message": "external camel consumers"}, {"oid": "213469756f408e3756fc2d4ffe63560ea51cc399", "committedDate": "2021-09-09 14:48:22 +0200", "message": "external camel consumers - upgrade cucumber to 6.10.4"}, {"oid": "123f51e94d1afdb0fb2210f02f65c9f9e29dfe97", "committedDate": "2021-09-09 14:48:22 +0200", "message": "external camel consumers - upgrade cucumber to 6.10.4 - fixed steps/features/tests tags:"}, {"oid": "7a44c34bbf4c060622421c1cfff94e378681b61a", "committedDate": "2022-01-18 12:28:06 +0100", "message": "Fixed wrong syntax in steps"}, {"oid": "b2f2672d9b138ed1bc71ee1baf60069a326733c2", "committedDate": "2022-01-18 12:30:23 +0100", "message": "Fixed typos"}, {"oid": "72adba095b1dd3a8b7f4aa4fb56d2fa2c86a62bb", "committedDate": "2022-02-17 10:17:20 +0100", "message": "Updated copyright headers to 2022"}, {"oid": "5c5acc4009d68195d31608e448966fc433397f66", "committedDate": "2022-11-09 14:56:53 +0100", "message": "Added Configuration Change event handling and improved JMS-Kura translator implementation"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzYzODQwOA==", "url": "https://github.com/eclipse/kapua/pull/2941#discussion_r413638408", "body": "Change method name to: \"kuraResponseMessageWithChannelAndData\"", "bodyText": "Change method name to: \"kuraResponseMessageWithChannelAndData\"", "bodyHTML": "<p dir=\"auto\">Change method name to: \"kuraResponseMessageWithChannelAndData\"</p>", "author": "LeoNerdoG", "createdAt": "2020-04-23T08:57:18Z", "path": "translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java", "diffHunk": "@@ -0,0 +1,363 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech\n+ *******************************************************************************/\n+package org.eclipse.kapua.translator.test.steps;\n+\n+import cucumber.api.Scenario;\n+import cucumber.api.java.After;\n+import cucumber.api.java.Before;\n+import cucumber.api.java.en.And;\n+import cucumber.api.java.en.Given;\n+import cucumber.api.java.en.Then;\n+import cucumber.api.java.en.When;\n+import cucumber.runtime.java.guice.ScenarioScoped;\n+import org.apache.shiro.SecurityUtils;\n+import org.eclipse.kapua.KapuaException;\n+import org.eclipse.kapua.commons.security.KapuaSecurityUtils;\n+import org.eclipse.kapua.commons.security.KapuaSession;\n+import org.eclipse.kapua.commons.util.xml.XmlUtil;\n+import org.eclipse.kapua.locator.KapuaLocator;\n+import org.eclipse.kapua.qa.common.DBHelper;\n+import org.eclipse.kapua.qa.common.StepData;\n+import org.eclipse.kapua.qa.common.TestBase;\n+import org.eclipse.kapua.qa.common.TestJAXBContextProvider;\n+import org.eclipse.kapua.service.device.call.message.kura.KuraPayload;\n+import org.eclipse.kapua.service.device.call.message.kura.app.response.KuraResponseMessage;\n+import org.eclipse.kapua.service.device.call.message.kura.data.KuraDataChannel;\n+import org.eclipse.kapua.service.device.call.message.kura.data.KuraDataMessage;\n+import org.eclipse.kapua.service.device.call.message.kura.data.KuraDataPayload;\n+import org.eclipse.kapua.translator.Translator;\n+import org.eclipse.kapua.translator.jms.kura.TranslatorDataJmsKura;\n+import org.eclipse.kapua.translator.kura.jms.TranslatorDataKuraJms;\n+import org.eclipse.kapua.translator.kura.mqtt.TranslatorDataKuraMqtt;\n+import org.eclipse.kapua.translator.mqtt.kura.TranslatorDataMqttKura;\n+import org.eclipse.kapua.translator.mqtt.kura.TranslatorResponseMqttKura;\n+import org.eclipse.kapua.transport.message.jms.JmsMessage;\n+import org.eclipse.kapua.transport.message.jms.JmsPayload;\n+import org.eclipse.kapua.transport.message.jms.JmsTopic;\n+import org.eclipse.kapua.transport.message.mqtt.MqttMessage;\n+import org.eclipse.kapua.transport.message.mqtt.MqttPayload;\n+import org.eclipse.kapua.transport.message.mqtt.MqttTopic;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.inject.Inject;\n+import java.util.Date;\n+import java.util.List;\n+\n+/**\n+ * Implementation of Gherkin steps used in TranslatorUnitTests.feature scenarios.\n+ */\n+@ScenarioScoped\n+public class TranslatorSteps extends TestBase {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(TranslatorSteps.class);\n+\n+\n+    private DBHelper database;\n+    private ExampleTranslator exampleTranslator;\n+    private TranslatorDataMqttKura translatorDataMqttKura;\n+    private TranslatorResponseMqttKura translatorResponseMqttKura;\n+    private TranslatorDataKuraMqtt translatorDataKuraMqtt;\n+    private TranslatorDataJmsKura translatorDataJmsKura;\n+    private TranslatorDataKuraJms translatorDataKuraJms;\n+\n+    @Inject\n+    public TranslatorSteps(StepData stepData, DBHelper dbHelper) {\n+\n+        this.stepData = stepData;\n+        this.database = dbHelper;\n+    }\n+\n+    // *************************************\n+    // Definition of Cucumber scenario steps\n+    // *************************************\n+\n+    @Before\n+    public void beforeScenario(Scenario scenario) {\n+\n+        this.scenario = scenario;\n+        database.setup();\n+        stepData.clear();\n+\n+        locator = KapuaLocator.getInstance();\n+        exampleTranslator = new ExampleTranslator();\n+\n+        translatorDataMqttKura = new TranslatorDataMqttKura();\n+        translatorResponseMqttKura = new TranslatorResponseMqttKura();\n+        translatorDataKuraMqtt = new TranslatorDataKuraMqtt();\n+        translatorDataJmsKura = new TranslatorDataJmsKura();\n+        translatorDataKuraJms = new TranslatorDataKuraJms();\n+\n+        if (isUnitTest()) {\n+            // Create KapuaSession using KapuaSecurtiyUtils and kapua-sys user as logged in user.\n+            // All operations on database are performed using system user.\n+            // Only for unit tests. Integration tests assume that a real logon is performed.\n+            KapuaSession kapuaSession = new KapuaSession(null, SYS_SCOPE_ID, SYS_USER_ID);\n+            KapuaSecurityUtils.setSession(kapuaSession);\n+        }\n+\n+        // Setup JAXB context\n+        XmlUtil.setContextProvider(new TestJAXBContextProvider());\n+    }\n+\n+    @After\n+    public void afterScenario() {\n+\n+        // Clean up the database\n+        try {\n+            logger.info(\"Logging out in cleanup\");\n+            if (isIntegrationTest()) {\n+                database.deleteAll();\n+                SecurityUtils.getSubject().logout();\n+            } else {\n+                database.dropAll();\n+                database.close();\n+            }\n+            KapuaSecurityUtils.clearSession();\n+        } catch (Exception e) {\n+            logger.error(\"Failed to log out in @After\", e);\n+        }\n+    }\n+\n+    @Given(\"^I try to translate from \\\"([^\\\"]*)\\\" to \\\"([^\\\"]*)\\\"$\")\n+    public void iFindTranslator(String from, String to) throws Exception {\n+        Class fromClass;\n+        Class toClass;\n+        try {\n+            if (!from.equals(\"\") && !to.equals(\"\")) {\n+                fromClass = Class.forName(from);\n+                toClass = Class.forName(to);\n+            } else {\n+                fromClass = null;\n+                toClass = null;\n+            }\n+            Translator translator = Translator.getTranslatorFor(exampleTranslator.getClass(fromClass), exampleTranslator.getClass(toClass));\n+            stepData.put(\"Translator\", translator);\n+        } catch (Exception ex) {\n+            verifyException(ex);\n+        }\n+    }\n+\n+    @Then(\"^Translator \\\"([^\\\"]*)\\\" is found$\")\n+    public void translatorIsFound(String translatorName) {\n+        Translator translator = (Translator) stepData.get(\"Translator\");\n+        assertEquals(translatorName, translator.getClass().getSimpleName());\n+    }\n+\n+    @Given(\"^I create mqtt message with (?:valid|invalid|empty) payload \\\"([^\\\"]*)\\\" and (?:valid|invalid) topic \\\"([^\\\"]*)\\\"$\")\n+    public void iTryToProvideInvalidTopic(String payload, String topic) {\n+\n+        Date date = new Date();\n+        MqttTopic mqttTopic = new MqttTopic(topic);\n+\n+        KuraPayload kuraPayload = new KuraPayload();\n+        if (payload.equals(\"invalidPayload\") || payload.equals(\"\")) {\n+            kuraPayload.setBody(payload.getBytes());\n+        } else {\n+            kuraPayload.getMetrics().put(payload, 200);\n+        }\n+\n+        MqttPayload mqttPayload = new MqttPayload(kuraPayload.toByteArray());\n+        MqttMessage mqttMessage = new MqttMessage(mqttTopic, date, mqttPayload);\n+\n+        stepData.put(\"MqttMessage\", mqttMessage);\n+    }\n+\n+    @When(\"^I try to translate mqtt response$\")\n+    public void iTryToTranslateMqttResponse() throws Exception {\n+        MqttMessage mqttMessage = (MqttMessage) stepData.get(\"MqttMessage\");\n+\n+        try {\n+            KuraResponseMessage kuraResponseMessage = translatorResponseMqttKura.translate(mqttMessage);\n+            stepData.put(\"KuraResponseMessage\", kuraResponseMessage);\n+        } catch (KapuaException ex) {\n+            verifyException(ex);\n+        }\n+    }\n+\n+    @Then(\"^I got kura response message with \\\"([^\\\"]*)\\\" payload body$\")\n+    public void iGotKuraResponseMessageWithPayloadBody(String payloadType) {\n+        KuraResponseMessage kuraResponseMessage = (KuraResponseMessage) stepData.get(\"KuraResponseMessage\");\n+\n+        assertTrue(kuraResponseMessage.getPayload().getBody().getClass().getSimpleName().equals(payloadType));\n+    }\n+\n+    @Then(\"^I got kura response message with proper payload metrics$\")\n+    public void iGotKuraResponseMessageWithPayloadAndChannelWithAndData() {\n+        KuraResponseMessage kuraResponseMessage = (KuraResponseMessage) stepData.get(\"KuraResponseMessage\");\n+\n+        assertTrue(kuraResponseMessage.getPayload().getMetrics() != null);\n+    }\n+\n+    @Given(\"^I create kura data message with channel with scope \\\"([^\\\"]*)\\\", client id \\\"([^\\\"]*)\\\" and payload without body and metrics$\")\n+    public void iCreateKuraDataMessage(String scope, String clientId) {\n+        KuraDataChannel kuraDataChannel = new KuraDataChannel(scope, clientId);\n+        Date date = new Date();\n+        KuraDataPayload kuraDataPayload = new KuraDataPayload();\n+        KuraDataMessage kuraDataMessage = new KuraDataMessage(kuraDataChannel, date, kuraDataPayload);\n+        stepData.put(\"KuraDataMessage\", kuraDataMessage);\n+    }\n+\n+    @And(\"^I try to translate kura data message to mqtt message$\")\n+    public void iTryToTranslateKuraDataMessageToMqttMessage() throws Exception {\n+        KuraDataMessage kuraDataMessage = (KuraDataMessage) stepData.get(\"KuraDataMessage\");\n+        MqttMessage mqttMessage = translatorDataKuraMqtt.translate(kuraDataMessage);\n+        stepData.put(\"MqttMessage\", mqttMessage);\n+    }\n+\n+    @Then(\"^I got mqtt message with channel with scope \\\"([^\\\"]*)\\\", client id \\\"([^\\\"]*)\\\" and (?:empty body|non empty body)$\")\n+    public void iGotMqttMessageWithChannelWithClientIdScopeAndWithoutMetricsAndBodyInPayload(String scope, String clientId) {\n+        MqttMessage mqttMessage = (MqttMessage) stepData.get(\"MqttMessage\");\n+\n+        String requestTopic = scope.concat(\"/\" + clientId);\n+        assertEquals(requestTopic, mqttMessage.getRequestTopic().getTopic());\n+\n+        if (mqttMessage.getPayload().getBody().length == 0) {\n+            assertTrue(mqttMessage.getPayload().getBody().length == 0);\n+        } else {\n+            assertTrue(mqttMessage.getPayload().getBody().length != 0);\n+        }\n+    }\n+\n+    @And(\"^I got kura response message channel with \\\"(.+)\\\", \\\"(.+)\\\", \\\"(.+)\\\", \\\"(.+)\\\", \\\"(.+)\\\" and \\\"(.+)\\\" data$\")\n+    public void iGotKuraResponseMessageChannelWithAndData(String replyPart, String requestId, String appId, String messageClassification, String scope, String clientId) {", "originalCommit": "400eb7bd926531f5b12f378c2c62c5fe8f8e1713", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2d7d0206645175175a1a27a3ca30d84bb82b5188", "changed_code": [{"header": "diff --git a/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java b/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\nindex a748910368..668c0d0291 100644\n--- a/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\n+++ b/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\n", "chunk": "@@ -229,7 +241,7 @@ public class TranslatorSteps extends TestBase {\n     }\n \n     @And(\"^I got kura response message channel with \\\"(.+)\\\", \\\"(.+)\\\", \\\"(.+)\\\", \\\"(.+)\\\", \\\"(.+)\\\" and \\\"(.+)\\\" data$\")\n-    public void iGotKuraResponseMessageChannelWithAndData(String replyPart, String requestId, String appId, String messageClassification, String scope, String clientId) {\n+    public void kuraResponseMessageWithChannelAndData(String replyPart, String requestId, String appId, String messageClassification, String scope, String clientId) {\n         KuraResponseMessage kuraResponseMessage = (KuraResponseMessage) stepData.get(\"KuraResponseMessage\");\n \n         assertTrue(kuraResponseMessage.getChannel().getReplyPart().equals(replyPart));\n", "next_change": null}]}, "revised_code_in_main": {"commit": "fa85bb5aacb679c2fa90beb7283e28fe27c5b234", "changed_code": [{"header": "diff --git a/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java b/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\nindex a748910368..668c0d0291 100644\n--- a/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\n+++ b/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\n", "chunk": "@@ -229,7 +241,7 @@ public class TranslatorSteps extends TestBase {\n     }\n \n     @And(\"^I got kura response message channel with \\\"(.+)\\\", \\\"(.+)\\\", \\\"(.+)\\\", \\\"(.+)\\\", \\\"(.+)\\\" and \\\"(.+)\\\" data$\")\n-    public void iGotKuraResponseMessageChannelWithAndData(String replyPart, String requestId, String appId, String messageClassification, String scope, String clientId) {\n+    public void kuraResponseMessageWithChannelAndData(String replyPart, String requestId, String appId, String messageClassification, String scope, String clientId) {\n         KuraResponseMessage kuraResponseMessage = (KuraResponseMessage) stepData.get(\"KuraResponseMessage\");\n \n         assertTrue(kuraResponseMessage.getChannel().getReplyPart().equals(replyPart));\n", "next_change": {"commit": "11ac0a839beb8414bd87fb1c93c90adfca02822b", "changed_code": [{"header": "diff --git a/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java b/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\nindex 668c0d0291..71099fc9c3 100644\n--- a/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\n+++ b/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\n", "chunk": "@@ -244,12 +196,12 @@ public class TranslatorSteps extends TestBase {\n     public void kuraResponseMessageWithChannelAndData(String replyPart, String requestId, String appId, String messageClassification, String scope, String clientId) {\n         KuraResponseMessage kuraResponseMessage = (KuraResponseMessage) stepData.get(\"KuraResponseMessage\");\n \n-        assertTrue(kuraResponseMessage.getChannel().getReplyPart().equals(replyPart));\n-        assertTrue(kuraResponseMessage.getChannel().getRequestId().equals(requestId));\n-        assertTrue(kuraResponseMessage.getChannel().getAppId().equals(appId));\n-        assertTrue(kuraResponseMessage.getChannel().getMessageClassification().equals(messageClassification));\n-        assertTrue(kuraResponseMessage.getChannel().getScope().equals(scope));\n-        assertTrue(kuraResponseMessage.getChannel().getClientId().equals(clientId));\n+        Assert.assertTrue(kuraResponseMessage.getChannel().getReplyPart().equals(replyPart));\n+        Assert.assertTrue(kuraResponseMessage.getChannel().getRequestId().equals(requestId));\n+        Assert.assertTrue(kuraResponseMessage.getChannel().getAppId().equals(appId));\n+        Assert.assertTrue(kuraResponseMessage.getChannel().getMessageClassification().equals(messageClassification));\n+        Assert.assertTrue(kuraResponseMessage.getChannel().getScope().equals(scope));\n+        Assert.assertTrue(kuraResponseMessage.getChannel().getClientId().equals(clientId));\n     }\n \n     @Given(\"^I create kura data message with channel with scope \\\"([^\\\"]*)\\\", client id \\\"([^\\\"]*)\\\", valid payload and metrics but without body$\")\n", "next_change": {"commit": "123f51e94d1afdb0fb2210f02f65c9f9e29dfe97", "changed_code": [{"header": "diff --git a/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java b/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\nindex 71099fc9c3..5535f55da2 100644\n--- a/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\n+++ b/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\n", "chunk": "@@ -204,7 +195,7 @@ public class TranslatorSteps extends TestBase {\n         Assert.assertTrue(kuraResponseMessage.getChannel().getClientId().equals(clientId));\n     }\n \n-    @Given(\"^I create kura data message with channel with scope \\\"([^\\\"]*)\\\", client id \\\"([^\\\"]*)\\\", valid payload and metrics but without body$\")\n+    @Given(\"I create kura data message with channel with scope {string}, client id {string}, valid payload and metrics but without body\")\n     public void kuraDataMessageWithoutBodyAndMetrics(String scope, String clientId) throws Exception {\n         try {\n             Date date = new Date();\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "fa85bb5aacb679c2fa90beb7283e28fe27c5b234", "message": "Merge commit", "committedDate": null}, {"oid": "9f7bc792c823dcab476a48e34cf1be87ea7801fb", "committedDate": "2020-09-07 11:51:17 +0200", "message": "Added JUnit and I9 tests"}, {"oid": "a7f7240e48238651f4ffe159f5b0867092eb29b0", "committedDate": "2020-11-11 17:13:08 +0100", "message": "Upgrade to EPL-2.0"}, {"oid": "56bacf723fa05f9a6e83f524c9d6d158bf6f2298", "committedDate": "2020-11-11 17:13:11 +0100", "message": "Remove \"All rights reserved.\" from Copyright Headers"}, {"oid": "dd481c52c43202d55fe8f8c3aafdbec933230cb0", "committedDate": "2021-01-02 17:21:55 +0100", "message": "Update Copyright Year to 2021"}, {"oid": "a56f7b5fb1bb53eb407bcfa0b233e48305cbd534", "committedDate": "2021-08-26 09:29:51 +0200", "message": "external camel consumers"}, {"oid": "11ac0a839beb8414bd87fb1c93c90adfca02822b", "committedDate": "2021-08-26 09:29:51 +0200", "message": "external camel consumers"}, {"oid": "213469756f408e3756fc2d4ffe63560ea51cc399", "committedDate": "2021-09-09 14:48:22 +0200", "message": "external camel consumers - upgrade cucumber to 6.10.4"}, {"oid": "123f51e94d1afdb0fb2210f02f65c9f9e29dfe97", "committedDate": "2021-09-09 14:48:22 +0200", "message": "external camel consumers - upgrade cucumber to 6.10.4 - fixed steps/features/tests tags:"}, {"oid": "7a44c34bbf4c060622421c1cfff94e378681b61a", "committedDate": "2022-01-18 12:28:06 +0100", "message": "Fixed wrong syntax in steps"}, {"oid": "b2f2672d9b138ed1bc71ee1baf60069a326733c2", "committedDate": "2022-01-18 12:30:23 +0100", "message": "Fixed typos"}, {"oid": "72adba095b1dd3a8b7f4aa4fb56d2fa2c86a62bb", "committedDate": "2022-02-17 10:17:20 +0100", "message": "Updated copyright headers to 2022"}, {"oid": "5c5acc4009d68195d31608e448966fc433397f66", "committedDate": "2022-11-09 14:56:53 +0100", "message": "Added Configuration Change event handling and improved JMS-Kura translator implementation"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzYzODY5OA==", "url": "https://github.com/eclipse/kapua/pull/2941#discussion_r413638698", "body": "Change method name to: \"kuraResponseMessageWithPayloadBody\"", "bodyText": "Change method name to: \"kuraResponseMessageWithPayloadBody\"", "bodyHTML": "<p dir=\"auto\">Change method name to: \"kuraResponseMessageWithPayloadBody\"</p>", "author": "LeoNerdoG", "createdAt": "2020-04-23T08:57:46Z", "path": "translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java", "diffHunk": "@@ -0,0 +1,363 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech\n+ *******************************************************************************/\n+package org.eclipse.kapua.translator.test.steps;\n+\n+import cucumber.api.Scenario;\n+import cucumber.api.java.After;\n+import cucumber.api.java.Before;\n+import cucumber.api.java.en.And;\n+import cucumber.api.java.en.Given;\n+import cucumber.api.java.en.Then;\n+import cucumber.api.java.en.When;\n+import cucumber.runtime.java.guice.ScenarioScoped;\n+import org.apache.shiro.SecurityUtils;\n+import org.eclipse.kapua.KapuaException;\n+import org.eclipse.kapua.commons.security.KapuaSecurityUtils;\n+import org.eclipse.kapua.commons.security.KapuaSession;\n+import org.eclipse.kapua.commons.util.xml.XmlUtil;\n+import org.eclipse.kapua.locator.KapuaLocator;\n+import org.eclipse.kapua.qa.common.DBHelper;\n+import org.eclipse.kapua.qa.common.StepData;\n+import org.eclipse.kapua.qa.common.TestBase;\n+import org.eclipse.kapua.qa.common.TestJAXBContextProvider;\n+import org.eclipse.kapua.service.device.call.message.kura.KuraPayload;\n+import org.eclipse.kapua.service.device.call.message.kura.app.response.KuraResponseMessage;\n+import org.eclipse.kapua.service.device.call.message.kura.data.KuraDataChannel;\n+import org.eclipse.kapua.service.device.call.message.kura.data.KuraDataMessage;\n+import org.eclipse.kapua.service.device.call.message.kura.data.KuraDataPayload;\n+import org.eclipse.kapua.translator.Translator;\n+import org.eclipse.kapua.translator.jms.kura.TranslatorDataJmsKura;\n+import org.eclipse.kapua.translator.kura.jms.TranslatorDataKuraJms;\n+import org.eclipse.kapua.translator.kura.mqtt.TranslatorDataKuraMqtt;\n+import org.eclipse.kapua.translator.mqtt.kura.TranslatorDataMqttKura;\n+import org.eclipse.kapua.translator.mqtt.kura.TranslatorResponseMqttKura;\n+import org.eclipse.kapua.transport.message.jms.JmsMessage;\n+import org.eclipse.kapua.transport.message.jms.JmsPayload;\n+import org.eclipse.kapua.transport.message.jms.JmsTopic;\n+import org.eclipse.kapua.transport.message.mqtt.MqttMessage;\n+import org.eclipse.kapua.transport.message.mqtt.MqttPayload;\n+import org.eclipse.kapua.transport.message.mqtt.MqttTopic;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.inject.Inject;\n+import java.util.Date;\n+import java.util.List;\n+\n+/**\n+ * Implementation of Gherkin steps used in TranslatorUnitTests.feature scenarios.\n+ */\n+@ScenarioScoped\n+public class TranslatorSteps extends TestBase {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(TranslatorSteps.class);\n+\n+\n+    private DBHelper database;\n+    private ExampleTranslator exampleTranslator;\n+    private TranslatorDataMqttKura translatorDataMqttKura;\n+    private TranslatorResponseMqttKura translatorResponseMqttKura;\n+    private TranslatorDataKuraMqtt translatorDataKuraMqtt;\n+    private TranslatorDataJmsKura translatorDataJmsKura;\n+    private TranslatorDataKuraJms translatorDataKuraJms;\n+\n+    @Inject\n+    public TranslatorSteps(StepData stepData, DBHelper dbHelper) {\n+\n+        this.stepData = stepData;\n+        this.database = dbHelper;\n+    }\n+\n+    // *************************************\n+    // Definition of Cucumber scenario steps\n+    // *************************************\n+\n+    @Before\n+    public void beforeScenario(Scenario scenario) {\n+\n+        this.scenario = scenario;\n+        database.setup();\n+        stepData.clear();\n+\n+        locator = KapuaLocator.getInstance();\n+        exampleTranslator = new ExampleTranslator();\n+\n+        translatorDataMqttKura = new TranslatorDataMqttKura();\n+        translatorResponseMqttKura = new TranslatorResponseMqttKura();\n+        translatorDataKuraMqtt = new TranslatorDataKuraMqtt();\n+        translatorDataJmsKura = new TranslatorDataJmsKura();\n+        translatorDataKuraJms = new TranslatorDataKuraJms();\n+\n+        if (isUnitTest()) {\n+            // Create KapuaSession using KapuaSecurtiyUtils and kapua-sys user as logged in user.\n+            // All operations on database are performed using system user.\n+            // Only for unit tests. Integration tests assume that a real logon is performed.\n+            KapuaSession kapuaSession = new KapuaSession(null, SYS_SCOPE_ID, SYS_USER_ID);\n+            KapuaSecurityUtils.setSession(kapuaSession);\n+        }\n+\n+        // Setup JAXB context\n+        XmlUtil.setContextProvider(new TestJAXBContextProvider());\n+    }\n+\n+    @After\n+    public void afterScenario() {\n+\n+        // Clean up the database\n+        try {\n+            logger.info(\"Logging out in cleanup\");\n+            if (isIntegrationTest()) {\n+                database.deleteAll();\n+                SecurityUtils.getSubject().logout();\n+            } else {\n+                database.dropAll();\n+                database.close();\n+            }\n+            KapuaSecurityUtils.clearSession();\n+        } catch (Exception e) {\n+            logger.error(\"Failed to log out in @After\", e);\n+        }\n+    }\n+\n+    @Given(\"^I try to translate from \\\"([^\\\"]*)\\\" to \\\"([^\\\"]*)\\\"$\")\n+    public void iFindTranslator(String from, String to) throws Exception {\n+        Class fromClass;\n+        Class toClass;\n+        try {\n+            if (!from.equals(\"\") && !to.equals(\"\")) {\n+                fromClass = Class.forName(from);\n+                toClass = Class.forName(to);\n+            } else {\n+                fromClass = null;\n+                toClass = null;\n+            }\n+            Translator translator = Translator.getTranslatorFor(exampleTranslator.getClass(fromClass), exampleTranslator.getClass(toClass));\n+            stepData.put(\"Translator\", translator);\n+        } catch (Exception ex) {\n+            verifyException(ex);\n+        }\n+    }\n+\n+    @Then(\"^Translator \\\"([^\\\"]*)\\\" is found$\")\n+    public void translatorIsFound(String translatorName) {\n+        Translator translator = (Translator) stepData.get(\"Translator\");\n+        assertEquals(translatorName, translator.getClass().getSimpleName());\n+    }\n+\n+    @Given(\"^I create mqtt message with (?:valid|invalid|empty) payload \\\"([^\\\"]*)\\\" and (?:valid|invalid) topic \\\"([^\\\"]*)\\\"$\")\n+    public void iTryToProvideInvalidTopic(String payload, String topic) {\n+\n+        Date date = new Date();\n+        MqttTopic mqttTopic = new MqttTopic(topic);\n+\n+        KuraPayload kuraPayload = new KuraPayload();\n+        if (payload.equals(\"invalidPayload\") || payload.equals(\"\")) {\n+            kuraPayload.setBody(payload.getBytes());\n+        } else {\n+            kuraPayload.getMetrics().put(payload, 200);\n+        }\n+\n+        MqttPayload mqttPayload = new MqttPayload(kuraPayload.toByteArray());\n+        MqttMessage mqttMessage = new MqttMessage(mqttTopic, date, mqttPayload);\n+\n+        stepData.put(\"MqttMessage\", mqttMessage);\n+    }\n+\n+    @When(\"^I try to translate mqtt response$\")\n+    public void iTryToTranslateMqttResponse() throws Exception {\n+        MqttMessage mqttMessage = (MqttMessage) stepData.get(\"MqttMessage\");\n+\n+        try {\n+            KuraResponseMessage kuraResponseMessage = translatorResponseMqttKura.translate(mqttMessage);\n+            stepData.put(\"KuraResponseMessage\", kuraResponseMessage);\n+        } catch (KapuaException ex) {\n+            verifyException(ex);\n+        }\n+    }\n+\n+    @Then(\"^I got kura response message with \\\"([^\\\"]*)\\\" payload body$\")\n+    public void iGotKuraResponseMessageWithPayloadBody(String payloadType) {", "originalCommit": "400eb7bd926531f5b12f378c2c62c5fe8f8e1713", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2d7d0206645175175a1a27a3ca30d84bb82b5188", "changed_code": [{"header": "diff --git a/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java b/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\nindex a748910368..668c0d0291 100644\n--- a/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\n+++ b/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\n", "chunk": "@@ -185,37 +188,46 @@ public class TranslatorSteps extends TestBase {\n     }\n \n     @Then(\"^I got kura response message with \\\"([^\\\"]*)\\\" payload body$\")\n-    public void iGotKuraResponseMessageWithPayloadBody(String payloadType) {\n+    public void kuraResponseMessageWithPayloadBody(String payloadType) {\n         KuraResponseMessage kuraResponseMessage = (KuraResponseMessage) stepData.get(\"KuraResponseMessage\");\n \n         assertTrue(kuraResponseMessage.getPayload().getBody().getClass().getSimpleName().equals(payloadType));\n     }\n \n     @Then(\"^I got kura response message with proper payload metrics$\")\n-    public void iGotKuraResponseMessageWithPayloadAndChannelWithAndData() {\n+    public void kuraResponseMessageWithPayloadAndChannelAndData() {\n         KuraResponseMessage kuraResponseMessage = (KuraResponseMessage) stepData.get(\"KuraResponseMessage\");\n \n         assertTrue(kuraResponseMessage.getPayload().getMetrics() != null);\n     }\n \n     @Given(\"^I create kura data message with channel with scope \\\"([^\\\"]*)\\\", client id \\\"([^\\\"]*)\\\" and payload without body and metrics$\")\n-    public void iCreateKuraDataMessage(String scope, String clientId) {\n-        KuraDataChannel kuraDataChannel = new KuraDataChannel(scope, clientId);\n-        Date date = new Date();\n-        KuraDataPayload kuraDataPayload = new KuraDataPayload();\n-        KuraDataMessage kuraDataMessage = new KuraDataMessage(kuraDataChannel, date, kuraDataPayload);\n-        stepData.put(\"KuraDataMessage\", kuraDataMessage);\n+    public void iCreateKuraDataMessage(String scope, String clientId) throws Exception {\n+        try {\n+            KuraDataChannel kuraDataChannel = new KuraDataChannel(scope, clientId);\n+            Date date = new Date();\n+            KuraDataPayload kuraDataPayload = new KuraDataPayload();\n+            KuraDataMessage kuraDataMessage = new KuraDataMessage(kuraDataChannel, date, kuraDataPayload);\n+            stepData.put(\"KuraDataMessage\", kuraDataMessage);\n+        } catch (Exception ex) {\n+            verifyException(ex);\n+        }\n     }\n \n     @And(\"^I try to translate kura data message to mqtt message$\")\n     public void iTryToTranslateKuraDataMessageToMqttMessage() throws Exception {\n-        KuraDataMessage kuraDataMessage = (KuraDataMessage) stepData.get(\"KuraDataMessage\");\n-        MqttMessage mqttMessage = translatorDataKuraMqtt.translate(kuraDataMessage);\n-        stepData.put(\"MqttMessage\", mqttMessage);\n+        try {\n+            KuraDataMessage kuraDataMessage = (KuraDataMessage) stepData.get(\"KuraDataMessage\");\n+            MqttMessage mqttMessage = translatorDataKuraMqtt.translate(kuraDataMessage);\n+            stepData.put(\"MqttMessage\", mqttMessage);\n+        } catch (Exception ex) {\n+            verifyException(ex);\n+        }\n+\n     }\n \n-    @Then(\"^I got mqtt message with channel with scope \\\"([^\\\"]*)\\\", client id \\\"([^\\\"]*)\\\" and (?:empty body|non empty body)$\")\n-    public void iGotMqttMessageWithChannelWithClientIdScopeAndWithoutMetricsAndBodyInPayload(String scope, String clientId) {\n+    @Then(\"^I get mqtt message with channel with scope \\\"([^\\\"]*)\\\", client id \\\"([^\\\"]*)\\\" and (?:empty body|non empty body)$\")\n+    public void mqttMessageWithChanneScopeClienIDandBody(String scope, String clientId) {\n         MqttMessage mqttMessage = (MqttMessage) stepData.get(\"MqttMessage\");\n \n         String requestTopic = scope.concat(\"/\" + clientId);\n", "next_change": null}]}, "revised_code_in_main": {"commit": "fa85bb5aacb679c2fa90beb7283e28fe27c5b234", "changed_code": [{"header": "diff --git a/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java b/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\nindex a748910368..668c0d0291 100644\n--- a/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\n+++ b/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\n", "chunk": "@@ -185,37 +188,46 @@ public class TranslatorSteps extends TestBase {\n     }\n \n     @Then(\"^I got kura response message with \\\"([^\\\"]*)\\\" payload body$\")\n-    public void iGotKuraResponseMessageWithPayloadBody(String payloadType) {\n+    public void kuraResponseMessageWithPayloadBody(String payloadType) {\n         KuraResponseMessage kuraResponseMessage = (KuraResponseMessage) stepData.get(\"KuraResponseMessage\");\n \n         assertTrue(kuraResponseMessage.getPayload().getBody().getClass().getSimpleName().equals(payloadType));\n     }\n \n     @Then(\"^I got kura response message with proper payload metrics$\")\n-    public void iGotKuraResponseMessageWithPayloadAndChannelWithAndData() {\n+    public void kuraResponseMessageWithPayloadAndChannelAndData() {\n         KuraResponseMessage kuraResponseMessage = (KuraResponseMessage) stepData.get(\"KuraResponseMessage\");\n \n         assertTrue(kuraResponseMessage.getPayload().getMetrics() != null);\n     }\n \n     @Given(\"^I create kura data message with channel with scope \\\"([^\\\"]*)\\\", client id \\\"([^\\\"]*)\\\" and payload without body and metrics$\")\n-    public void iCreateKuraDataMessage(String scope, String clientId) {\n-        KuraDataChannel kuraDataChannel = new KuraDataChannel(scope, clientId);\n-        Date date = new Date();\n-        KuraDataPayload kuraDataPayload = new KuraDataPayload();\n-        KuraDataMessage kuraDataMessage = new KuraDataMessage(kuraDataChannel, date, kuraDataPayload);\n-        stepData.put(\"KuraDataMessage\", kuraDataMessage);\n+    public void iCreateKuraDataMessage(String scope, String clientId) throws Exception {\n+        try {\n+            KuraDataChannel kuraDataChannel = new KuraDataChannel(scope, clientId);\n+            Date date = new Date();\n+            KuraDataPayload kuraDataPayload = new KuraDataPayload();\n+            KuraDataMessage kuraDataMessage = new KuraDataMessage(kuraDataChannel, date, kuraDataPayload);\n+            stepData.put(\"KuraDataMessage\", kuraDataMessage);\n+        } catch (Exception ex) {\n+            verifyException(ex);\n+        }\n     }\n \n     @And(\"^I try to translate kura data message to mqtt message$\")\n     public void iTryToTranslateKuraDataMessageToMqttMessage() throws Exception {\n-        KuraDataMessage kuraDataMessage = (KuraDataMessage) stepData.get(\"KuraDataMessage\");\n-        MqttMessage mqttMessage = translatorDataKuraMqtt.translate(kuraDataMessage);\n-        stepData.put(\"MqttMessage\", mqttMessage);\n+        try {\n+            KuraDataMessage kuraDataMessage = (KuraDataMessage) stepData.get(\"KuraDataMessage\");\n+            MqttMessage mqttMessage = translatorDataKuraMqtt.translate(kuraDataMessage);\n+            stepData.put(\"MqttMessage\", mqttMessage);\n+        } catch (Exception ex) {\n+            verifyException(ex);\n+        }\n+\n     }\n \n-    @Then(\"^I got mqtt message with channel with scope \\\"([^\\\"]*)\\\", client id \\\"([^\\\"]*)\\\" and (?:empty body|non empty body)$\")\n-    public void iGotMqttMessageWithChannelWithClientIdScopeAndWithoutMetricsAndBodyInPayload(String scope, String clientId) {\n+    @Then(\"^I get mqtt message with channel with scope \\\"([^\\\"]*)\\\", client id \\\"([^\\\"]*)\\\" and (?:empty body|non empty body)$\")\n+    public void mqttMessageWithChanneScopeClienIDandBody(String scope, String clientId) {\n         MqttMessage mqttMessage = (MqttMessage) stepData.get(\"MqttMessage\");\n \n         String requestTopic = scope.concat(\"/\" + clientId);\n", "next_change": {"commit": "11ac0a839beb8414bd87fb1c93c90adfca02822b", "changed_code": [{"header": "diff --git a/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java b/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\nindex 668c0d0291..71099fc9c3 100644\n--- a/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\n+++ b/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\n", "chunk": "@@ -231,12 +183,12 @@ public class TranslatorSteps extends TestBase {\n         MqttMessage mqttMessage = (MqttMessage) stepData.get(\"MqttMessage\");\n \n         String requestTopic = scope.concat(\"/\" + clientId);\n-        assertEquals(requestTopic, mqttMessage.getRequestTopic().getTopic());\n+        Assert.assertEquals(requestTopic, mqttMessage.getRequestTopic().getTopic());\n \n         if (mqttMessage.getPayload().getBody().length == 0) {\n-            assertTrue(mqttMessage.getPayload().getBody().length == 0);\n+            Assert.assertTrue(mqttMessage.getPayload().getBody().length == 0);\n         } else {\n-            assertTrue(mqttMessage.getPayload().getBody().length != 0);\n+            Assert.assertTrue(mqttMessage.getPayload().getBody().length != 0);\n         }\n     }\n \n", "next_change": {"commit": "123f51e94d1afdb0fb2210f02f65c9f9e29dfe97", "changed_code": [{"header": "diff --git a/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java b/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\nindex 71099fc9c3..5535f55da2 100644\n--- a/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\n+++ b/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\n", "chunk": "@@ -178,13 +172,11 @@ public class TranslatorSteps extends TestBase {\n \n     }\n \n-    @Then(\"^I get mqtt message with channel with scope \\\"([^\\\"]*)\\\", client id \\\"([^\\\"]*)\\\" and (?:empty body|non empty body)$\")\n+    @Then(\"I get mqtt message with channel with scope {string}, client id {string} and (empty body/non empty body)\")\n     public void mqttMessageWithChanneScopeClienIDandBody(String scope, String clientId) {\n         MqttMessage mqttMessage = (MqttMessage) stepData.get(\"MqttMessage\");\n-\n         String requestTopic = scope.concat(\"/\" + clientId);\n         Assert.assertEquals(requestTopic, mqttMessage.getRequestTopic().getTopic());\n-\n         if (mqttMessage.getPayload().getBody().length == 0) {\n             Assert.assertTrue(mqttMessage.getPayload().getBody().length == 0);\n         } else {\n", "next_change": {"commit": "7a44c34bbf4c060622421c1cfff94e378681b61a", "changed_code": [{"header": "diff --git a/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java b/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\nindex 5535f55da2..aae4d708c4 100644\n--- a/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\n+++ b/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\n", "chunk": "@@ -172,7 +172,7 @@ public class TranslatorSteps extends TestBase {\n \n     }\n \n-    @Then(\"I get mqtt message with channel with scope {string}, client id {string} and (empty body/non empty body)\")\n+    @Then(\"I get mqtt message with channel with scope {string}, client id {string} and (empty body|non empty body)\")\n     public void mqttMessageWithChanneScopeClienIDandBody(String scope, String clientId) {\n         MqttMessage mqttMessage = (MqttMessage) stepData.get(\"MqttMessage\");\n         String requestTopic = scope.concat(\"/\" + clientId);\n", "next_change": {"commit": "b2f2672d9b138ed1bc71ee1baf60069a326733c2", "changed_code": [{"header": "diff --git a/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java b/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\nindex aae4d708c4..10100666f8 100644\n--- a/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\n+++ b/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\n", "chunk": "@@ -173,7 +173,7 @@ public class TranslatorSteps extends TestBase {\n     }\n \n     @Then(\"I get mqtt message with channel with scope {string}, client id {string} and (empty body|non empty body)\")\n-    public void mqttMessageWithChanneScopeClienIDandBody(String scope, String clientId) {\n+    public void mqttMessageWithChannelScopeClientIDAndBody(String scope, String clientId) {\n         MqttMessage mqttMessage = (MqttMessage) stepData.get(\"MqttMessage\");\n         String requestTopic = scope.concat(\"/\" + clientId);\n         Assert.assertEquals(requestTopic, mqttMessage.getRequestTopic().getTopic());\n", "next_change": null}]}}]}}, {"header": "diff --git a/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java b/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\nindex 71099fc9c3..5535f55da2 100644\n--- a/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\n+++ b/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\n", "chunk": "@@ -192,10 +184,9 @@ public class TranslatorSteps extends TestBase {\n         }\n     }\n \n-    @And(\"^I got kura response message channel with \\\"(.+)\\\", \\\"(.+)\\\", \\\"(.+)\\\", \\\"(.+)\\\", \\\"(.+)\\\" and \\\"(.+)\\\" data$\")\n+    @And(\"I got kura response message channel with {string}, {string}, {string}, {string}, {string} and {string} data\")\n     public void kuraResponseMessageWithChannelAndData(String replyPart, String requestId, String appId, String messageClassification, String scope, String clientId) {\n         KuraResponseMessage kuraResponseMessage = (KuraResponseMessage) stepData.get(\"KuraResponseMessage\");\n-\n         Assert.assertTrue(kuraResponseMessage.getChannel().getReplyPart().equals(replyPart));\n         Assert.assertTrue(kuraResponseMessage.getChannel().getRequestId().equals(requestId));\n         Assert.assertTrue(kuraResponseMessage.getChannel().getAppId().equals(appId));\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "fa85bb5aacb679c2fa90beb7283e28fe27c5b234", "message": "Merge commit", "committedDate": null}, {"oid": "9f7bc792c823dcab476a48e34cf1be87ea7801fb", "committedDate": "2020-09-07 11:51:17 +0200", "message": "Added JUnit and I9 tests"}, {"oid": "a7f7240e48238651f4ffe159f5b0867092eb29b0", "committedDate": "2020-11-11 17:13:08 +0100", "message": "Upgrade to EPL-2.0"}, {"oid": "56bacf723fa05f9a6e83f524c9d6d158bf6f2298", "committedDate": "2020-11-11 17:13:11 +0100", "message": "Remove \"All rights reserved.\" from Copyright Headers"}, {"oid": "dd481c52c43202d55fe8f8c3aafdbec933230cb0", "committedDate": "2021-01-02 17:21:55 +0100", "message": "Update Copyright Year to 2021"}, {"oid": "a56f7b5fb1bb53eb407bcfa0b233e48305cbd534", "committedDate": "2021-08-26 09:29:51 +0200", "message": "external camel consumers"}, {"oid": "11ac0a839beb8414bd87fb1c93c90adfca02822b", "committedDate": "2021-08-26 09:29:51 +0200", "message": "external camel consumers"}, {"oid": "213469756f408e3756fc2d4ffe63560ea51cc399", "committedDate": "2021-09-09 14:48:22 +0200", "message": "external camel consumers - upgrade cucumber to 6.10.4"}, {"oid": "123f51e94d1afdb0fb2210f02f65c9f9e29dfe97", "committedDate": "2021-09-09 14:48:22 +0200", "message": "external camel consumers - upgrade cucumber to 6.10.4 - fixed steps/features/tests tags:"}, {"oid": "7a44c34bbf4c060622421c1cfff94e378681b61a", "committedDate": "2022-01-18 12:28:06 +0100", "message": "Fixed wrong syntax in steps"}, {"oid": "b2f2672d9b138ed1bc71ee1baf60069a326733c2", "committedDate": "2022-01-18 12:30:23 +0100", "message": "Fixed typos"}, {"oid": "72adba095b1dd3a8b7f4aa4fb56d2fa2c86a62bb", "committedDate": "2022-02-17 10:17:20 +0100", "message": "Updated copyright headers to 2022"}, {"oid": "5c5acc4009d68195d31608e448966fc433397f66", "committedDate": "2022-11-09 14:56:53 +0100", "message": "Added Configuration Change event handling and improved JMS-Kura translator implementation"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzYzOTc3OQ==", "url": "https://github.com/eclipse/kapua/pull/2941#discussion_r413639779", "body": "Change method name to: \"kuraDataMessageWithoutBodyAndMetrics\" ", "bodyText": "Change method name to: \"kuraDataMessageWithoutBodyAndMetrics\"", "bodyHTML": "<p dir=\"auto\">Change method name to: \"kuraDataMessageWithoutBodyAndMetrics\"</p>", "author": "LeoNerdoG", "createdAt": "2020-04-23T08:59:11Z", "path": "translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java", "diffHunk": "@@ -0,0 +1,363 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech\n+ *******************************************************************************/\n+package org.eclipse.kapua.translator.test.steps;\n+\n+import cucumber.api.Scenario;\n+import cucumber.api.java.After;\n+import cucumber.api.java.Before;\n+import cucumber.api.java.en.And;\n+import cucumber.api.java.en.Given;\n+import cucumber.api.java.en.Then;\n+import cucumber.api.java.en.When;\n+import cucumber.runtime.java.guice.ScenarioScoped;\n+import org.apache.shiro.SecurityUtils;\n+import org.eclipse.kapua.KapuaException;\n+import org.eclipse.kapua.commons.security.KapuaSecurityUtils;\n+import org.eclipse.kapua.commons.security.KapuaSession;\n+import org.eclipse.kapua.commons.util.xml.XmlUtil;\n+import org.eclipse.kapua.locator.KapuaLocator;\n+import org.eclipse.kapua.qa.common.DBHelper;\n+import org.eclipse.kapua.qa.common.StepData;\n+import org.eclipse.kapua.qa.common.TestBase;\n+import org.eclipse.kapua.qa.common.TestJAXBContextProvider;\n+import org.eclipse.kapua.service.device.call.message.kura.KuraPayload;\n+import org.eclipse.kapua.service.device.call.message.kura.app.response.KuraResponseMessage;\n+import org.eclipse.kapua.service.device.call.message.kura.data.KuraDataChannel;\n+import org.eclipse.kapua.service.device.call.message.kura.data.KuraDataMessage;\n+import org.eclipse.kapua.service.device.call.message.kura.data.KuraDataPayload;\n+import org.eclipse.kapua.translator.Translator;\n+import org.eclipse.kapua.translator.jms.kura.TranslatorDataJmsKura;\n+import org.eclipse.kapua.translator.kura.jms.TranslatorDataKuraJms;\n+import org.eclipse.kapua.translator.kura.mqtt.TranslatorDataKuraMqtt;\n+import org.eclipse.kapua.translator.mqtt.kura.TranslatorDataMqttKura;\n+import org.eclipse.kapua.translator.mqtt.kura.TranslatorResponseMqttKura;\n+import org.eclipse.kapua.transport.message.jms.JmsMessage;\n+import org.eclipse.kapua.transport.message.jms.JmsPayload;\n+import org.eclipse.kapua.transport.message.jms.JmsTopic;\n+import org.eclipse.kapua.transport.message.mqtt.MqttMessage;\n+import org.eclipse.kapua.transport.message.mqtt.MqttPayload;\n+import org.eclipse.kapua.transport.message.mqtt.MqttTopic;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.inject.Inject;\n+import java.util.Date;\n+import java.util.List;\n+\n+/**\n+ * Implementation of Gherkin steps used in TranslatorUnitTests.feature scenarios.\n+ */\n+@ScenarioScoped\n+public class TranslatorSteps extends TestBase {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(TranslatorSteps.class);\n+\n+\n+    private DBHelper database;\n+    private ExampleTranslator exampleTranslator;\n+    private TranslatorDataMqttKura translatorDataMqttKura;\n+    private TranslatorResponseMqttKura translatorResponseMqttKura;\n+    private TranslatorDataKuraMqtt translatorDataKuraMqtt;\n+    private TranslatorDataJmsKura translatorDataJmsKura;\n+    private TranslatorDataKuraJms translatorDataKuraJms;\n+\n+    @Inject\n+    public TranslatorSteps(StepData stepData, DBHelper dbHelper) {\n+\n+        this.stepData = stepData;\n+        this.database = dbHelper;\n+    }\n+\n+    // *************************************\n+    // Definition of Cucumber scenario steps\n+    // *************************************\n+\n+    @Before\n+    public void beforeScenario(Scenario scenario) {\n+\n+        this.scenario = scenario;\n+        database.setup();\n+        stepData.clear();\n+\n+        locator = KapuaLocator.getInstance();\n+        exampleTranslator = new ExampleTranslator();\n+\n+        translatorDataMqttKura = new TranslatorDataMqttKura();\n+        translatorResponseMqttKura = new TranslatorResponseMqttKura();\n+        translatorDataKuraMqtt = new TranslatorDataKuraMqtt();\n+        translatorDataJmsKura = new TranslatorDataJmsKura();\n+        translatorDataKuraJms = new TranslatorDataKuraJms();\n+\n+        if (isUnitTest()) {\n+            // Create KapuaSession using KapuaSecurtiyUtils and kapua-sys user as logged in user.\n+            // All operations on database are performed using system user.\n+            // Only for unit tests. Integration tests assume that a real logon is performed.\n+            KapuaSession kapuaSession = new KapuaSession(null, SYS_SCOPE_ID, SYS_USER_ID);\n+            KapuaSecurityUtils.setSession(kapuaSession);\n+        }\n+\n+        // Setup JAXB context\n+        XmlUtil.setContextProvider(new TestJAXBContextProvider());\n+    }\n+\n+    @After\n+    public void afterScenario() {\n+\n+        // Clean up the database\n+        try {\n+            logger.info(\"Logging out in cleanup\");\n+            if (isIntegrationTest()) {\n+                database.deleteAll();\n+                SecurityUtils.getSubject().logout();\n+            } else {\n+                database.dropAll();\n+                database.close();\n+            }\n+            KapuaSecurityUtils.clearSession();\n+        } catch (Exception e) {\n+            logger.error(\"Failed to log out in @After\", e);\n+        }\n+    }\n+\n+    @Given(\"^I try to translate from \\\"([^\\\"]*)\\\" to \\\"([^\\\"]*)\\\"$\")\n+    public void iFindTranslator(String from, String to) throws Exception {\n+        Class fromClass;\n+        Class toClass;\n+        try {\n+            if (!from.equals(\"\") && !to.equals(\"\")) {\n+                fromClass = Class.forName(from);\n+                toClass = Class.forName(to);\n+            } else {\n+                fromClass = null;\n+                toClass = null;\n+            }\n+            Translator translator = Translator.getTranslatorFor(exampleTranslator.getClass(fromClass), exampleTranslator.getClass(toClass));\n+            stepData.put(\"Translator\", translator);\n+        } catch (Exception ex) {\n+            verifyException(ex);\n+        }\n+    }\n+\n+    @Then(\"^Translator \\\"([^\\\"]*)\\\" is found$\")\n+    public void translatorIsFound(String translatorName) {\n+        Translator translator = (Translator) stepData.get(\"Translator\");\n+        assertEquals(translatorName, translator.getClass().getSimpleName());\n+    }\n+\n+    @Given(\"^I create mqtt message with (?:valid|invalid|empty) payload \\\"([^\\\"]*)\\\" and (?:valid|invalid) topic \\\"([^\\\"]*)\\\"$\")\n+    public void iTryToProvideInvalidTopic(String payload, String topic) {\n+\n+        Date date = new Date();\n+        MqttTopic mqttTopic = new MqttTopic(topic);\n+\n+        KuraPayload kuraPayload = new KuraPayload();\n+        if (payload.equals(\"invalidPayload\") || payload.equals(\"\")) {\n+            kuraPayload.setBody(payload.getBytes());\n+        } else {\n+            kuraPayload.getMetrics().put(payload, 200);\n+        }\n+\n+        MqttPayload mqttPayload = new MqttPayload(kuraPayload.toByteArray());\n+        MqttMessage mqttMessage = new MqttMessage(mqttTopic, date, mqttPayload);\n+\n+        stepData.put(\"MqttMessage\", mqttMessage);\n+    }\n+\n+    @When(\"^I try to translate mqtt response$\")\n+    public void iTryToTranslateMqttResponse() throws Exception {\n+        MqttMessage mqttMessage = (MqttMessage) stepData.get(\"MqttMessage\");\n+\n+        try {\n+            KuraResponseMessage kuraResponseMessage = translatorResponseMqttKura.translate(mqttMessage);\n+            stepData.put(\"KuraResponseMessage\", kuraResponseMessage);\n+        } catch (KapuaException ex) {\n+            verifyException(ex);\n+        }\n+    }\n+\n+    @Then(\"^I got kura response message with \\\"([^\\\"]*)\\\" payload body$\")\n+    public void iGotKuraResponseMessageWithPayloadBody(String payloadType) {\n+        KuraResponseMessage kuraResponseMessage = (KuraResponseMessage) stepData.get(\"KuraResponseMessage\");\n+\n+        assertTrue(kuraResponseMessage.getPayload().getBody().getClass().getSimpleName().equals(payloadType));\n+    }\n+\n+    @Then(\"^I got kura response message with proper payload metrics$\")\n+    public void iGotKuraResponseMessageWithPayloadAndChannelWithAndData() {\n+        KuraResponseMessage kuraResponseMessage = (KuraResponseMessage) stepData.get(\"KuraResponseMessage\");\n+\n+        assertTrue(kuraResponseMessage.getPayload().getMetrics() != null);\n+    }\n+\n+    @Given(\"^I create kura data message with channel with scope \\\"([^\\\"]*)\\\", client id \\\"([^\\\"]*)\\\" and payload without body and metrics$\")\n+    public void iCreateKuraDataMessage(String scope, String clientId) {\n+        KuraDataChannel kuraDataChannel = new KuraDataChannel(scope, clientId);\n+        Date date = new Date();\n+        KuraDataPayload kuraDataPayload = new KuraDataPayload();\n+        KuraDataMessage kuraDataMessage = new KuraDataMessage(kuraDataChannel, date, kuraDataPayload);\n+        stepData.put(\"KuraDataMessage\", kuraDataMessage);\n+    }\n+\n+    @And(\"^I try to translate kura data message to mqtt message$\")\n+    public void iTryToTranslateKuraDataMessageToMqttMessage() throws Exception {\n+        KuraDataMessage kuraDataMessage = (KuraDataMessage) stepData.get(\"KuraDataMessage\");\n+        MqttMessage mqttMessage = translatorDataKuraMqtt.translate(kuraDataMessage);\n+        stepData.put(\"MqttMessage\", mqttMessage);\n+    }\n+\n+    @Then(\"^I got mqtt message with channel with scope \\\"([^\\\"]*)\\\", client id \\\"([^\\\"]*)\\\" and (?:empty body|non empty body)$\")\n+    public void iGotMqttMessageWithChannelWithClientIdScopeAndWithoutMetricsAndBodyInPayload(String scope, String clientId) {\n+        MqttMessage mqttMessage = (MqttMessage) stepData.get(\"MqttMessage\");\n+\n+        String requestTopic = scope.concat(\"/\" + clientId);\n+        assertEquals(requestTopic, mqttMessage.getRequestTopic().getTopic());\n+\n+        if (mqttMessage.getPayload().getBody().length == 0) {\n+            assertTrue(mqttMessage.getPayload().getBody().length == 0);\n+        } else {\n+            assertTrue(mqttMessage.getPayload().getBody().length != 0);\n+        }\n+    }\n+\n+    @And(\"^I got kura response message channel with \\\"(.+)\\\", \\\"(.+)\\\", \\\"(.+)\\\", \\\"(.+)\\\", \\\"(.+)\\\" and \\\"(.+)\\\" data$\")\n+    public void iGotKuraResponseMessageChannelWithAndData(String replyPart, String requestId, String appId, String messageClassification, String scope, String clientId) {\n+        KuraResponseMessage kuraResponseMessage = (KuraResponseMessage) stepData.get(\"KuraResponseMessage\");\n+\n+        assertTrue(kuraResponseMessage.getChannel().getReplyPart().equals(replyPart));\n+        assertTrue(kuraResponseMessage.getChannel().getRequestId().equals(requestId));\n+        assertTrue(kuraResponseMessage.getChannel().getAppId().equals(appId));\n+        assertTrue(kuraResponseMessage.getChannel().getMessageClassification().equals(messageClassification));\n+        assertTrue(kuraResponseMessage.getChannel().getScope().equals(scope));\n+        assertTrue(kuraResponseMessage.getChannel().getClientId().equals(clientId));\n+    }\n+\n+    @Given(\"^I create kura data message with channel with scope \\\"([^\\\"]*)\\\", client id \\\"([^\\\"]*)\\\" and payload without body and with metrics$\")\n+    public void iCreateKuraDataMessageWithChannelWithScopeClientIdAndPayloadWithoutBodyAndWithMetrics(String scope, String clientId) {", "originalCommit": "400eb7bd926531f5b12f378c2c62c5fe8f8e1713", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2d7d0206645175175a1a27a3ca30d84bb82b5188", "changed_code": [{"header": "diff --git a/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java b/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\nindex a748910368..668c0d0291 100644\n--- a/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\n+++ b/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\n", "chunk": "@@ -240,34 +252,44 @@ public class TranslatorSteps extends TestBase {\n         assertTrue(kuraResponseMessage.getChannel().getClientId().equals(clientId));\n     }\n \n-    @Given(\"^I create kura data message with channel with scope \\\"([^\\\"]*)\\\", client id \\\"([^\\\"]*)\\\" and payload without body and with metrics$\")\n-    public void iCreateKuraDataMessageWithChannelWithScopeClientIdAndPayloadWithoutBodyAndWithMetrics(String scope, String clientId) {\n-        Date date = new Date();\n-        KuraDataChannel kuraDataChannel = new KuraDataChannel(scope, clientId);\n-        KuraDataPayload kuraDataPayload = new KuraDataPayload();\n-        kuraDataPayload.getMetrics().put(\"response.code\", 200);\n-        KuraDataMessage kuraDataMessage = new KuraDataMessage(kuraDataChannel, date, kuraDataPayload);\n-\n-        stepData.put(\"KuraDataMessage\", kuraDataMessage);\n+    @Given(\"^I create kura data message with channel with scope \\\"([^\\\"]*)\\\", client id \\\"([^\\\"]*)\\\", valid payload and metrics but without body$\")\n+    public void kuraDataMessageWithoutBodyAndMetrics(String scope, String clientId) throws Exception {\n+        try {\n+            Date date = new Date();\n+            KuraDataChannel kuraDataChannel = new KuraDataChannel(scope, clientId);\n+            KuraDataPayload kuraDataPayload = new KuraDataPayload();\n+            kuraDataPayload.getMetrics().put(\"response.code\", 200);\n+            KuraDataMessage kuraDataMessage = new KuraDataMessage(kuraDataChannel, date, kuraDataPayload);\n+            stepData.put(\"KuraDataMessage\", kuraDataMessage);\n+        } catch (Exception ex) {\n+            verifyException(ex);\n+        }\n     }\n \n     @Given(\"^I create kura data message with channel with scope \\\"([^\\\"]*)\\\", client id \\\"([^\\\"]*)\\\" and payload with body and metrics$\")\n-    public void iCreateKuraDataMessageWithChannelWithScopeClientIdAndPayloadWithBodyAndMetrics(String scope, String clientId) {\n-        Date date = new Date();\n-        KuraDataChannel kuraDataChannel = new KuraDataChannel(scope, clientId);\n-        KuraDataPayload kuraDataPayload = new KuraDataPayload();\n-        kuraDataPayload.setBody(\"Payload\".getBytes());\n-        kuraDataPayload.getMetrics().put(\"response.code\", 200);\n-        KuraDataMessage kuraDataMessage = new KuraDataMessage(kuraDataChannel, date, kuraDataPayload);\n-\n-        stepData.put(\"KuraDataMessage\", kuraDataMessage);\n+    public void fullKuraDataMessage(String scope, String clientId) throws Exception {\n+        try {\n+            Date date = new Date();\n+            KuraDataChannel kuraDataChannel = new KuraDataChannel(scope, clientId);\n+            KuraDataPayload kuraDataPayload = new KuraDataPayload();\n+            kuraDataPayload.setBody(\"Payload\".getBytes());\n+            kuraDataPayload.getMetrics().put(\"response.code\", 200);\n+            KuraDataMessage kuraDataMessage = new KuraDataMessage(kuraDataChannel, date, kuraDataPayload);\n+            stepData.put(\"KuraDataMessage\", kuraDataMessage);\n+        } catch (Exception ex) {\n+            verifyException(ex);\n+        }\n     }\n \n     @Given(\"^I try to translate mqtt message to kura data message$\")\n     public void iTryToTranslateMqttMessageToKuraMessage() throws Exception {\n-        MqttMessage mqttMessage = (MqttMessage) stepData.get(\"MqttMessage\");\n-        KuraDataMessage kuraDataMessage = translatorDataMqttKura.translate(mqttMessage);\n-        stepData.put(\"KuraDataMessage\", kuraDataMessage);\n+        try {\n+            MqttMessage mqttMessage = (MqttMessage) stepData.get(\"MqttMessage\");\n+            KuraDataMessage kuraDataMessage = translatorDataMqttKura.translate(mqttMessage);\n+            stepData.put(\"KuraDataMessage\", kuraDataMessage);\n+        } catch (Exception ex) {\n+            verifyException(ex);\n+        }\n     }\n \n     @Then(\"^I got kura data message with \\\"([^\\\"]*)\\\" payload body$\")\n", "next_change": null}]}, "revised_code_in_main": {"commit": "fa85bb5aacb679c2fa90beb7283e28fe27c5b234", "changed_code": [{"header": "diff --git a/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java b/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\nindex a748910368..668c0d0291 100644\n--- a/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\n+++ b/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\n", "chunk": "@@ -240,34 +252,44 @@ public class TranslatorSteps extends TestBase {\n         assertTrue(kuraResponseMessage.getChannel().getClientId().equals(clientId));\n     }\n \n-    @Given(\"^I create kura data message with channel with scope \\\"([^\\\"]*)\\\", client id \\\"([^\\\"]*)\\\" and payload without body and with metrics$\")\n-    public void iCreateKuraDataMessageWithChannelWithScopeClientIdAndPayloadWithoutBodyAndWithMetrics(String scope, String clientId) {\n-        Date date = new Date();\n-        KuraDataChannel kuraDataChannel = new KuraDataChannel(scope, clientId);\n-        KuraDataPayload kuraDataPayload = new KuraDataPayload();\n-        kuraDataPayload.getMetrics().put(\"response.code\", 200);\n-        KuraDataMessage kuraDataMessage = new KuraDataMessage(kuraDataChannel, date, kuraDataPayload);\n-\n-        stepData.put(\"KuraDataMessage\", kuraDataMessage);\n+    @Given(\"^I create kura data message with channel with scope \\\"([^\\\"]*)\\\", client id \\\"([^\\\"]*)\\\", valid payload and metrics but without body$\")\n+    public void kuraDataMessageWithoutBodyAndMetrics(String scope, String clientId) throws Exception {\n+        try {\n+            Date date = new Date();\n+            KuraDataChannel kuraDataChannel = new KuraDataChannel(scope, clientId);\n+            KuraDataPayload kuraDataPayload = new KuraDataPayload();\n+            kuraDataPayload.getMetrics().put(\"response.code\", 200);\n+            KuraDataMessage kuraDataMessage = new KuraDataMessage(kuraDataChannel, date, kuraDataPayload);\n+            stepData.put(\"KuraDataMessage\", kuraDataMessage);\n+        } catch (Exception ex) {\n+            verifyException(ex);\n+        }\n     }\n \n     @Given(\"^I create kura data message with channel with scope \\\"([^\\\"]*)\\\", client id \\\"([^\\\"]*)\\\" and payload with body and metrics$\")\n-    public void iCreateKuraDataMessageWithChannelWithScopeClientIdAndPayloadWithBodyAndMetrics(String scope, String clientId) {\n-        Date date = new Date();\n-        KuraDataChannel kuraDataChannel = new KuraDataChannel(scope, clientId);\n-        KuraDataPayload kuraDataPayload = new KuraDataPayload();\n-        kuraDataPayload.setBody(\"Payload\".getBytes());\n-        kuraDataPayload.getMetrics().put(\"response.code\", 200);\n-        KuraDataMessage kuraDataMessage = new KuraDataMessage(kuraDataChannel, date, kuraDataPayload);\n-\n-        stepData.put(\"KuraDataMessage\", kuraDataMessage);\n+    public void fullKuraDataMessage(String scope, String clientId) throws Exception {\n+        try {\n+            Date date = new Date();\n+            KuraDataChannel kuraDataChannel = new KuraDataChannel(scope, clientId);\n+            KuraDataPayload kuraDataPayload = new KuraDataPayload();\n+            kuraDataPayload.setBody(\"Payload\".getBytes());\n+            kuraDataPayload.getMetrics().put(\"response.code\", 200);\n+            KuraDataMessage kuraDataMessage = new KuraDataMessage(kuraDataChannel, date, kuraDataPayload);\n+            stepData.put(\"KuraDataMessage\", kuraDataMessage);\n+        } catch (Exception ex) {\n+            verifyException(ex);\n+        }\n     }\n \n     @Given(\"^I try to translate mqtt message to kura data message$\")\n     public void iTryToTranslateMqttMessageToKuraMessage() throws Exception {\n-        MqttMessage mqttMessage = (MqttMessage) stepData.get(\"MqttMessage\");\n-        KuraDataMessage kuraDataMessage = translatorDataMqttKura.translate(mqttMessage);\n-        stepData.put(\"KuraDataMessage\", kuraDataMessage);\n+        try {\n+            MqttMessage mqttMessage = (MqttMessage) stepData.get(\"MqttMessage\");\n+            KuraDataMessage kuraDataMessage = translatorDataMqttKura.translate(mqttMessage);\n+            stepData.put(\"KuraDataMessage\", kuraDataMessage);\n+        } catch (Exception ex) {\n+            verifyException(ex);\n+        }\n     }\n \n     @Then(\"^I got kura data message with \\\"([^\\\"]*)\\\" payload body$\")\n", "next_change": {"commit": "11ac0a839beb8414bd87fb1c93c90adfca02822b", "changed_code": [{"header": "diff --git a/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java b/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\nindex 668c0d0291..71099fc9c3 100644\n--- a/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\n+++ b/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\n", "chunk": "@@ -296,29 +248,29 @@ public class TranslatorSteps extends TestBase {\n     public void iGotKuraDataMessageWithPayloadBody(String payloadType) throws Throwable {\n         KuraDataMessage kuraDataMessage = (KuraDataMessage) stepData.get(\"KuraDataMessage\");\n \n-        assertTrue(kuraDataMessage.getPayload().getBody().getClass().getSimpleName().equals(payloadType));\n+        Assert.assertTrue(kuraDataMessage.getPayload().getBody().getClass().getSimpleName().equals(payloadType));\n     }\n \n     @And(\"^I got kura data message channel with \\\"(.+)\\\" and \\\"(.+)\\\" data$\")\n     public void iGotKuraDataMessageChannelWithAndData(String scope, String clientId) {\n         KuraDataMessage kuraDataMessage = (KuraDataMessage) stepData.get(\"KuraDataMessage\");\n \n-        assertTrue(kuraDataMessage.getChannel().getScope().equals(scope));\n-        assertTrue(kuraDataMessage.getChannel().getClientId().equals(clientId));\n+        Assert.assertTrue(kuraDataMessage.getChannel().getScope().equals(scope));\n+        Assert.assertTrue(kuraDataMessage.getChannel().getClientId().equals(clientId));\n     }\n \n     @Then(\"^I got kura data message with proper payload metrics response code (\\\\d+)$\")\n     public void iGotKuraDataMessageWithProperPayloadMetrics(int responseCode) {\n         KuraDataMessage kuraDataMessage = (KuraDataMessage) stepData.get(\"KuraDataMessage\");\n \n-        assertEquals(kuraDataMessage.getPayload().getMetrics().get(\"response.code\"), responseCode);\n+        Assert.assertEquals(kuraDataMessage.getPayload().getMetrics().get(\"response.code\"), responseCode);\n     }\n \n     @Then(\"^I got kura data message with empty payload$\")\n     public void iGotKuraDataMessageWithEmptyPayload() {\n         KuraDataMessage kuraDataMessage = (KuraDataMessage) stepData.get(\"KuraDataMessage\");\n \n-        assertEquals(null, kuraDataMessage.getPayload().getBody());\n+        Assert.assertEquals(null, kuraDataMessage.getPayload().getBody());\n     }\n \n     @Given(\"^I create jms message with (?:valid|invalid|empty) payload \\\"([^\\\"]*)\\\" and (?:valid|invalid) topic \\\"([^\\\"]*)\\\"$\")\n", "next_change": {"commit": "123f51e94d1afdb0fb2210f02f65c9f9e29dfe97", "changed_code": [{"header": "diff --git a/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java b/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\nindex 71099fc9c3..5535f55da2 100644\n--- a/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\n+++ b/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\n", "chunk": "@@ -244,61 +235,53 @@ public class TranslatorSteps extends TestBase {\n         }\n     }\n \n-    @Then(\"^I got kura data message with \\\"([^\\\"]*)\\\" payload body$\")\n+    @Then(\"I got kura data message with {string} payload body\")\n     public void iGotKuraDataMessageWithPayloadBody(String payloadType) throws Throwable {\n         KuraDataMessage kuraDataMessage = (KuraDataMessage) stepData.get(\"KuraDataMessage\");\n-\n         Assert.assertTrue(kuraDataMessage.getPayload().getBody().getClass().getSimpleName().equals(payloadType));\n     }\n \n-    @And(\"^I got kura data message channel with \\\"(.+)\\\" and \\\"(.+)\\\" data$\")\n+    @And(\"I got kura data message channel with {string} and {string} data\")\n     public void iGotKuraDataMessageChannelWithAndData(String scope, String clientId) {\n         KuraDataMessage kuraDataMessage = (KuraDataMessage) stepData.get(\"KuraDataMessage\");\n-\n         Assert.assertTrue(kuraDataMessage.getChannel().getScope().equals(scope));\n         Assert.assertTrue(kuraDataMessage.getChannel().getClientId().equals(clientId));\n     }\n \n-    @Then(\"^I got kura data message with proper payload metrics response code (\\\\d+)$\")\n+    @Then(\"I got kura data message with proper payload metrics response code {int}\")\n     public void iGotKuraDataMessageWithProperPayloadMetrics(int responseCode) {\n         KuraDataMessage kuraDataMessage = (KuraDataMessage) stepData.get(\"KuraDataMessage\");\n-\n         Assert.assertEquals(kuraDataMessage.getPayload().getMetrics().get(\"response.code\"), responseCode);\n     }\n \n-    @Then(\"^I got kura data message with empty payload$\")\n+    @Then(\"I got kura data message with empty payload\")\n     public void iGotKuraDataMessageWithEmptyPayload() {\n         KuraDataMessage kuraDataMessage = (KuraDataMessage) stepData.get(\"KuraDataMessage\");\n-\n         Assert.assertEquals(null, kuraDataMessage.getPayload().getBody());\n     }\n \n-    @Given(\"^I create jms message with (?:valid|invalid|empty) payload \\\"([^\\\"]*)\\\" and (?:valid|invalid) topic \\\"([^\\\"]*)\\\"$\")\n+    @Given(\"I create jms message with (valid/invalid/empty) payload {string} and (valid/invalid) topic {string}\")\n     public void iCreateJmsMessageWithInvalidPayloadAndInvalidTopic(String payload, String topic) throws Exception {\n         try {\n             Date date = new Date();\n             JmsTopic jmsTopic = new JmsTopic(topic);\n-\n             KuraPayload kuraPayload = new KuraPayload();\n             if (payload.equals(\"invalidPayload\") || payload.equals(\"\")) {\n                 kuraPayload.setBody(payload.getBytes());\n             } else {\n                 kuraPayload.getMetrics().put(payload, 200);\n             }\n-\n             JmsPayload jmsPayload = new JmsPayload(kuraPayload.toByteArray());\n             JmsMessage jmsMessage = new JmsMessage(jmsTopic, date, jmsPayload);\n-\n             stepData.put(\"JmsMessage\", jmsMessage);\n         } catch (Exception ex) {\n             verifyException(ex);\n         }\n     }\n \n-    @And(\"^I try to translate jms message to kura data message$\")\n+    @And(\"I try to translate jms message to kura data message\")\n     public void iTryToTranslateJmsMessageToKuraMessage() throws Exception {\n         JmsMessage jmsMessage = (JmsMessage) stepData.get(\"JmsMessage\");\n-\n         try {\n             KuraDataMessage kuraDataMessage = translatorDataJmsKura.translate(jmsMessage);\n             stepData.put(\"KuraDataMessage\", kuraDataMessage);\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "fa85bb5aacb679c2fa90beb7283e28fe27c5b234", "message": "Merge commit", "committedDate": null}, {"oid": "9f7bc792c823dcab476a48e34cf1be87ea7801fb", "committedDate": "2020-09-07 11:51:17 +0200", "message": "Added JUnit and I9 tests"}, {"oid": "a7f7240e48238651f4ffe159f5b0867092eb29b0", "committedDate": "2020-11-11 17:13:08 +0100", "message": "Upgrade to EPL-2.0"}, {"oid": "56bacf723fa05f9a6e83f524c9d6d158bf6f2298", "committedDate": "2020-11-11 17:13:11 +0100", "message": "Remove \"All rights reserved.\" from Copyright Headers"}, {"oid": "dd481c52c43202d55fe8f8c3aafdbec933230cb0", "committedDate": "2021-01-02 17:21:55 +0100", "message": "Update Copyright Year to 2021"}, {"oid": "a56f7b5fb1bb53eb407bcfa0b233e48305cbd534", "committedDate": "2021-08-26 09:29:51 +0200", "message": "external camel consumers"}, {"oid": "11ac0a839beb8414bd87fb1c93c90adfca02822b", "committedDate": "2021-08-26 09:29:51 +0200", "message": "external camel consumers"}, {"oid": "213469756f408e3756fc2d4ffe63560ea51cc399", "committedDate": "2021-09-09 14:48:22 +0200", "message": "external camel consumers - upgrade cucumber to 6.10.4"}, {"oid": "123f51e94d1afdb0fb2210f02f65c9f9e29dfe97", "committedDate": "2021-09-09 14:48:22 +0200", "message": "external camel consumers - upgrade cucumber to 6.10.4 - fixed steps/features/tests tags:"}, {"oid": "7a44c34bbf4c060622421c1cfff94e378681b61a", "committedDate": "2022-01-18 12:28:06 +0100", "message": "Fixed wrong syntax in steps"}, {"oid": "b2f2672d9b138ed1bc71ee1baf60069a326733c2", "committedDate": "2022-01-18 12:30:23 +0100", "message": "Fixed typos"}, {"oid": "72adba095b1dd3a8b7f4aa4fb56d2fa2c86a62bb", "committedDate": "2022-02-17 10:17:20 +0100", "message": "Updated copyright headers to 2022"}, {"oid": "5c5acc4009d68195d31608e448966fc433397f66", "committedDate": "2022-11-09 14:56:53 +0100", "message": "Added Configuration Change event handling and improved JMS-Kura translator implementation"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzY0MDA5NQ==", "url": "https://github.com/eclipse/kapua/pull/2941#discussion_r413640095", "body": "Change method name to: \"fullKuraDataMessage\"", "bodyText": "Change method name to: \"fullKuraDataMessage\"", "bodyHTML": "<p dir=\"auto\">Change method name to: \"fullKuraDataMessage\"</p>", "author": "LeoNerdoG", "createdAt": "2020-04-23T08:59:38Z", "path": "translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java", "diffHunk": "@@ -0,0 +1,363 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech\n+ *******************************************************************************/\n+package org.eclipse.kapua.translator.test.steps;\n+\n+import cucumber.api.Scenario;\n+import cucumber.api.java.After;\n+import cucumber.api.java.Before;\n+import cucumber.api.java.en.And;\n+import cucumber.api.java.en.Given;\n+import cucumber.api.java.en.Then;\n+import cucumber.api.java.en.When;\n+import cucumber.runtime.java.guice.ScenarioScoped;\n+import org.apache.shiro.SecurityUtils;\n+import org.eclipse.kapua.KapuaException;\n+import org.eclipse.kapua.commons.security.KapuaSecurityUtils;\n+import org.eclipse.kapua.commons.security.KapuaSession;\n+import org.eclipse.kapua.commons.util.xml.XmlUtil;\n+import org.eclipse.kapua.locator.KapuaLocator;\n+import org.eclipse.kapua.qa.common.DBHelper;\n+import org.eclipse.kapua.qa.common.StepData;\n+import org.eclipse.kapua.qa.common.TestBase;\n+import org.eclipse.kapua.qa.common.TestJAXBContextProvider;\n+import org.eclipse.kapua.service.device.call.message.kura.KuraPayload;\n+import org.eclipse.kapua.service.device.call.message.kura.app.response.KuraResponseMessage;\n+import org.eclipse.kapua.service.device.call.message.kura.data.KuraDataChannel;\n+import org.eclipse.kapua.service.device.call.message.kura.data.KuraDataMessage;\n+import org.eclipse.kapua.service.device.call.message.kura.data.KuraDataPayload;\n+import org.eclipse.kapua.translator.Translator;\n+import org.eclipse.kapua.translator.jms.kura.TranslatorDataJmsKura;\n+import org.eclipse.kapua.translator.kura.jms.TranslatorDataKuraJms;\n+import org.eclipse.kapua.translator.kura.mqtt.TranslatorDataKuraMqtt;\n+import org.eclipse.kapua.translator.mqtt.kura.TranslatorDataMqttKura;\n+import org.eclipse.kapua.translator.mqtt.kura.TranslatorResponseMqttKura;\n+import org.eclipse.kapua.transport.message.jms.JmsMessage;\n+import org.eclipse.kapua.transport.message.jms.JmsPayload;\n+import org.eclipse.kapua.transport.message.jms.JmsTopic;\n+import org.eclipse.kapua.transport.message.mqtt.MqttMessage;\n+import org.eclipse.kapua.transport.message.mqtt.MqttPayload;\n+import org.eclipse.kapua.transport.message.mqtt.MqttTopic;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.inject.Inject;\n+import java.util.Date;\n+import java.util.List;\n+\n+/**\n+ * Implementation of Gherkin steps used in TranslatorUnitTests.feature scenarios.\n+ */\n+@ScenarioScoped\n+public class TranslatorSteps extends TestBase {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(TranslatorSteps.class);\n+\n+\n+    private DBHelper database;\n+    private ExampleTranslator exampleTranslator;\n+    private TranslatorDataMqttKura translatorDataMqttKura;\n+    private TranslatorResponseMqttKura translatorResponseMqttKura;\n+    private TranslatorDataKuraMqtt translatorDataKuraMqtt;\n+    private TranslatorDataJmsKura translatorDataJmsKura;\n+    private TranslatorDataKuraJms translatorDataKuraJms;\n+\n+    @Inject\n+    public TranslatorSteps(StepData stepData, DBHelper dbHelper) {\n+\n+        this.stepData = stepData;\n+        this.database = dbHelper;\n+    }\n+\n+    // *************************************\n+    // Definition of Cucumber scenario steps\n+    // *************************************\n+\n+    @Before\n+    public void beforeScenario(Scenario scenario) {\n+\n+        this.scenario = scenario;\n+        database.setup();\n+        stepData.clear();\n+\n+        locator = KapuaLocator.getInstance();\n+        exampleTranslator = new ExampleTranslator();\n+\n+        translatorDataMqttKura = new TranslatorDataMqttKura();\n+        translatorResponseMqttKura = new TranslatorResponseMqttKura();\n+        translatorDataKuraMqtt = new TranslatorDataKuraMqtt();\n+        translatorDataJmsKura = new TranslatorDataJmsKura();\n+        translatorDataKuraJms = new TranslatorDataKuraJms();\n+\n+        if (isUnitTest()) {\n+            // Create KapuaSession using KapuaSecurtiyUtils and kapua-sys user as logged in user.\n+            // All operations on database are performed using system user.\n+            // Only for unit tests. Integration tests assume that a real logon is performed.\n+            KapuaSession kapuaSession = new KapuaSession(null, SYS_SCOPE_ID, SYS_USER_ID);\n+            KapuaSecurityUtils.setSession(kapuaSession);\n+        }\n+\n+        // Setup JAXB context\n+        XmlUtil.setContextProvider(new TestJAXBContextProvider());\n+    }\n+\n+    @After\n+    public void afterScenario() {\n+\n+        // Clean up the database\n+        try {\n+            logger.info(\"Logging out in cleanup\");\n+            if (isIntegrationTest()) {\n+                database.deleteAll();\n+                SecurityUtils.getSubject().logout();\n+            } else {\n+                database.dropAll();\n+                database.close();\n+            }\n+            KapuaSecurityUtils.clearSession();\n+        } catch (Exception e) {\n+            logger.error(\"Failed to log out in @After\", e);\n+        }\n+    }\n+\n+    @Given(\"^I try to translate from \\\"([^\\\"]*)\\\" to \\\"([^\\\"]*)\\\"$\")\n+    public void iFindTranslator(String from, String to) throws Exception {\n+        Class fromClass;\n+        Class toClass;\n+        try {\n+            if (!from.equals(\"\") && !to.equals(\"\")) {\n+                fromClass = Class.forName(from);\n+                toClass = Class.forName(to);\n+            } else {\n+                fromClass = null;\n+                toClass = null;\n+            }\n+            Translator translator = Translator.getTranslatorFor(exampleTranslator.getClass(fromClass), exampleTranslator.getClass(toClass));\n+            stepData.put(\"Translator\", translator);\n+        } catch (Exception ex) {\n+            verifyException(ex);\n+        }\n+    }\n+\n+    @Then(\"^Translator \\\"([^\\\"]*)\\\" is found$\")\n+    public void translatorIsFound(String translatorName) {\n+        Translator translator = (Translator) stepData.get(\"Translator\");\n+        assertEquals(translatorName, translator.getClass().getSimpleName());\n+    }\n+\n+    @Given(\"^I create mqtt message with (?:valid|invalid|empty) payload \\\"([^\\\"]*)\\\" and (?:valid|invalid) topic \\\"([^\\\"]*)\\\"$\")\n+    public void iTryToProvideInvalidTopic(String payload, String topic) {\n+\n+        Date date = new Date();\n+        MqttTopic mqttTopic = new MqttTopic(topic);\n+\n+        KuraPayload kuraPayload = new KuraPayload();\n+        if (payload.equals(\"invalidPayload\") || payload.equals(\"\")) {\n+            kuraPayload.setBody(payload.getBytes());\n+        } else {\n+            kuraPayload.getMetrics().put(payload, 200);\n+        }\n+\n+        MqttPayload mqttPayload = new MqttPayload(kuraPayload.toByteArray());\n+        MqttMessage mqttMessage = new MqttMessage(mqttTopic, date, mqttPayload);\n+\n+        stepData.put(\"MqttMessage\", mqttMessage);\n+    }\n+\n+    @When(\"^I try to translate mqtt response$\")\n+    public void iTryToTranslateMqttResponse() throws Exception {\n+        MqttMessage mqttMessage = (MqttMessage) stepData.get(\"MqttMessage\");\n+\n+        try {\n+            KuraResponseMessage kuraResponseMessage = translatorResponseMqttKura.translate(mqttMessage);\n+            stepData.put(\"KuraResponseMessage\", kuraResponseMessage);\n+        } catch (KapuaException ex) {\n+            verifyException(ex);\n+        }\n+    }\n+\n+    @Then(\"^I got kura response message with \\\"([^\\\"]*)\\\" payload body$\")\n+    public void iGotKuraResponseMessageWithPayloadBody(String payloadType) {\n+        KuraResponseMessage kuraResponseMessage = (KuraResponseMessage) stepData.get(\"KuraResponseMessage\");\n+\n+        assertTrue(kuraResponseMessage.getPayload().getBody().getClass().getSimpleName().equals(payloadType));\n+    }\n+\n+    @Then(\"^I got kura response message with proper payload metrics$\")\n+    public void iGotKuraResponseMessageWithPayloadAndChannelWithAndData() {\n+        KuraResponseMessage kuraResponseMessage = (KuraResponseMessage) stepData.get(\"KuraResponseMessage\");\n+\n+        assertTrue(kuraResponseMessage.getPayload().getMetrics() != null);\n+    }\n+\n+    @Given(\"^I create kura data message with channel with scope \\\"([^\\\"]*)\\\", client id \\\"([^\\\"]*)\\\" and payload without body and metrics$\")\n+    public void iCreateKuraDataMessage(String scope, String clientId) {\n+        KuraDataChannel kuraDataChannel = new KuraDataChannel(scope, clientId);\n+        Date date = new Date();\n+        KuraDataPayload kuraDataPayload = new KuraDataPayload();\n+        KuraDataMessage kuraDataMessage = new KuraDataMessage(kuraDataChannel, date, kuraDataPayload);\n+        stepData.put(\"KuraDataMessage\", kuraDataMessage);\n+    }\n+\n+    @And(\"^I try to translate kura data message to mqtt message$\")\n+    public void iTryToTranslateKuraDataMessageToMqttMessage() throws Exception {\n+        KuraDataMessage kuraDataMessage = (KuraDataMessage) stepData.get(\"KuraDataMessage\");\n+        MqttMessage mqttMessage = translatorDataKuraMqtt.translate(kuraDataMessage);\n+        stepData.put(\"MqttMessage\", mqttMessage);\n+    }\n+\n+    @Then(\"^I got mqtt message with channel with scope \\\"([^\\\"]*)\\\", client id \\\"([^\\\"]*)\\\" and (?:empty body|non empty body)$\")\n+    public void iGotMqttMessageWithChannelWithClientIdScopeAndWithoutMetricsAndBodyInPayload(String scope, String clientId) {\n+        MqttMessage mqttMessage = (MqttMessage) stepData.get(\"MqttMessage\");\n+\n+        String requestTopic = scope.concat(\"/\" + clientId);\n+        assertEquals(requestTopic, mqttMessage.getRequestTopic().getTopic());\n+\n+        if (mqttMessage.getPayload().getBody().length == 0) {\n+            assertTrue(mqttMessage.getPayload().getBody().length == 0);\n+        } else {\n+            assertTrue(mqttMessage.getPayload().getBody().length != 0);\n+        }\n+    }\n+\n+    @And(\"^I got kura response message channel with \\\"(.+)\\\", \\\"(.+)\\\", \\\"(.+)\\\", \\\"(.+)\\\", \\\"(.+)\\\" and \\\"(.+)\\\" data$\")\n+    public void iGotKuraResponseMessageChannelWithAndData(String replyPart, String requestId, String appId, String messageClassification, String scope, String clientId) {\n+        KuraResponseMessage kuraResponseMessage = (KuraResponseMessage) stepData.get(\"KuraResponseMessage\");\n+\n+        assertTrue(kuraResponseMessage.getChannel().getReplyPart().equals(replyPart));\n+        assertTrue(kuraResponseMessage.getChannel().getRequestId().equals(requestId));\n+        assertTrue(kuraResponseMessage.getChannel().getAppId().equals(appId));\n+        assertTrue(kuraResponseMessage.getChannel().getMessageClassification().equals(messageClassification));\n+        assertTrue(kuraResponseMessage.getChannel().getScope().equals(scope));\n+        assertTrue(kuraResponseMessage.getChannel().getClientId().equals(clientId));\n+    }\n+\n+    @Given(\"^I create kura data message with channel with scope \\\"([^\\\"]*)\\\", client id \\\"([^\\\"]*)\\\" and payload without body and with metrics$\")\n+    public void iCreateKuraDataMessageWithChannelWithScopeClientIdAndPayloadWithoutBodyAndWithMetrics(String scope, String clientId) {\n+        Date date = new Date();\n+        KuraDataChannel kuraDataChannel = new KuraDataChannel(scope, clientId);\n+        KuraDataPayload kuraDataPayload = new KuraDataPayload();\n+        kuraDataPayload.getMetrics().put(\"response.code\", 200);\n+        KuraDataMessage kuraDataMessage = new KuraDataMessage(kuraDataChannel, date, kuraDataPayload);\n+\n+        stepData.put(\"KuraDataMessage\", kuraDataMessage);\n+    }\n+\n+    @Given(\"^I create kura data message with channel with scope \\\"([^\\\"]*)\\\", client id \\\"([^\\\"]*)\\\" and payload with body and metrics$\")\n+    public void iCreateKuraDataMessageWithChannelWithScopeClientIdAndPayloadWithBodyAndMetrics(String scope, String clientId) {", "originalCommit": "400eb7bd926531f5b12f378c2c62c5fe8f8e1713", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2d7d0206645175175a1a27a3ca30d84bb82b5188", "changed_code": [{"header": "diff --git a/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java b/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\nindex a748910368..668c0d0291 100644\n--- a/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\n+++ b/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\n", "chunk": "@@ -240,34 +252,44 @@ public class TranslatorSteps extends TestBase {\n         assertTrue(kuraResponseMessage.getChannel().getClientId().equals(clientId));\n     }\n \n-    @Given(\"^I create kura data message with channel with scope \\\"([^\\\"]*)\\\", client id \\\"([^\\\"]*)\\\" and payload without body and with metrics$\")\n-    public void iCreateKuraDataMessageWithChannelWithScopeClientIdAndPayloadWithoutBodyAndWithMetrics(String scope, String clientId) {\n-        Date date = new Date();\n-        KuraDataChannel kuraDataChannel = new KuraDataChannel(scope, clientId);\n-        KuraDataPayload kuraDataPayload = new KuraDataPayload();\n-        kuraDataPayload.getMetrics().put(\"response.code\", 200);\n-        KuraDataMessage kuraDataMessage = new KuraDataMessage(kuraDataChannel, date, kuraDataPayload);\n-\n-        stepData.put(\"KuraDataMessage\", kuraDataMessage);\n+    @Given(\"^I create kura data message with channel with scope \\\"([^\\\"]*)\\\", client id \\\"([^\\\"]*)\\\", valid payload and metrics but without body$\")\n+    public void kuraDataMessageWithoutBodyAndMetrics(String scope, String clientId) throws Exception {\n+        try {\n+            Date date = new Date();\n+            KuraDataChannel kuraDataChannel = new KuraDataChannel(scope, clientId);\n+            KuraDataPayload kuraDataPayload = new KuraDataPayload();\n+            kuraDataPayload.getMetrics().put(\"response.code\", 200);\n+            KuraDataMessage kuraDataMessage = new KuraDataMessage(kuraDataChannel, date, kuraDataPayload);\n+            stepData.put(\"KuraDataMessage\", kuraDataMessage);\n+        } catch (Exception ex) {\n+            verifyException(ex);\n+        }\n     }\n \n     @Given(\"^I create kura data message with channel with scope \\\"([^\\\"]*)\\\", client id \\\"([^\\\"]*)\\\" and payload with body and metrics$\")\n-    public void iCreateKuraDataMessageWithChannelWithScopeClientIdAndPayloadWithBodyAndMetrics(String scope, String clientId) {\n-        Date date = new Date();\n-        KuraDataChannel kuraDataChannel = new KuraDataChannel(scope, clientId);\n-        KuraDataPayload kuraDataPayload = new KuraDataPayload();\n-        kuraDataPayload.setBody(\"Payload\".getBytes());\n-        kuraDataPayload.getMetrics().put(\"response.code\", 200);\n-        KuraDataMessage kuraDataMessage = new KuraDataMessage(kuraDataChannel, date, kuraDataPayload);\n-\n-        stepData.put(\"KuraDataMessage\", kuraDataMessage);\n+    public void fullKuraDataMessage(String scope, String clientId) throws Exception {\n+        try {\n+            Date date = new Date();\n+            KuraDataChannel kuraDataChannel = new KuraDataChannel(scope, clientId);\n+            KuraDataPayload kuraDataPayload = new KuraDataPayload();\n+            kuraDataPayload.setBody(\"Payload\".getBytes());\n+            kuraDataPayload.getMetrics().put(\"response.code\", 200);\n+            KuraDataMessage kuraDataMessage = new KuraDataMessage(kuraDataChannel, date, kuraDataPayload);\n+            stepData.put(\"KuraDataMessage\", kuraDataMessage);\n+        } catch (Exception ex) {\n+            verifyException(ex);\n+        }\n     }\n \n     @Given(\"^I try to translate mqtt message to kura data message$\")\n     public void iTryToTranslateMqttMessageToKuraMessage() throws Exception {\n-        MqttMessage mqttMessage = (MqttMessage) stepData.get(\"MqttMessage\");\n-        KuraDataMessage kuraDataMessage = translatorDataMqttKura.translate(mqttMessage);\n-        stepData.put(\"KuraDataMessage\", kuraDataMessage);\n+        try {\n+            MqttMessage mqttMessage = (MqttMessage) stepData.get(\"MqttMessage\");\n+            KuraDataMessage kuraDataMessage = translatorDataMqttKura.translate(mqttMessage);\n+            stepData.put(\"KuraDataMessage\", kuraDataMessage);\n+        } catch (Exception ex) {\n+            verifyException(ex);\n+        }\n     }\n \n     @Then(\"^I got kura data message with \\\"([^\\\"]*)\\\" payload body$\")\n", "next_change": null}]}, "revised_code_in_main": {"commit": "fa85bb5aacb679c2fa90beb7283e28fe27c5b234", "changed_code": [{"header": "diff --git a/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java b/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\nindex a748910368..668c0d0291 100644\n--- a/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\n+++ b/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\n", "chunk": "@@ -240,34 +252,44 @@ public class TranslatorSteps extends TestBase {\n         assertTrue(kuraResponseMessage.getChannel().getClientId().equals(clientId));\n     }\n \n-    @Given(\"^I create kura data message with channel with scope \\\"([^\\\"]*)\\\", client id \\\"([^\\\"]*)\\\" and payload without body and with metrics$\")\n-    public void iCreateKuraDataMessageWithChannelWithScopeClientIdAndPayloadWithoutBodyAndWithMetrics(String scope, String clientId) {\n-        Date date = new Date();\n-        KuraDataChannel kuraDataChannel = new KuraDataChannel(scope, clientId);\n-        KuraDataPayload kuraDataPayload = new KuraDataPayload();\n-        kuraDataPayload.getMetrics().put(\"response.code\", 200);\n-        KuraDataMessage kuraDataMessage = new KuraDataMessage(kuraDataChannel, date, kuraDataPayload);\n-\n-        stepData.put(\"KuraDataMessage\", kuraDataMessage);\n+    @Given(\"^I create kura data message with channel with scope \\\"([^\\\"]*)\\\", client id \\\"([^\\\"]*)\\\", valid payload and metrics but without body$\")\n+    public void kuraDataMessageWithoutBodyAndMetrics(String scope, String clientId) throws Exception {\n+        try {\n+            Date date = new Date();\n+            KuraDataChannel kuraDataChannel = new KuraDataChannel(scope, clientId);\n+            KuraDataPayload kuraDataPayload = new KuraDataPayload();\n+            kuraDataPayload.getMetrics().put(\"response.code\", 200);\n+            KuraDataMessage kuraDataMessage = new KuraDataMessage(kuraDataChannel, date, kuraDataPayload);\n+            stepData.put(\"KuraDataMessage\", kuraDataMessage);\n+        } catch (Exception ex) {\n+            verifyException(ex);\n+        }\n     }\n \n     @Given(\"^I create kura data message with channel with scope \\\"([^\\\"]*)\\\", client id \\\"([^\\\"]*)\\\" and payload with body and metrics$\")\n-    public void iCreateKuraDataMessageWithChannelWithScopeClientIdAndPayloadWithBodyAndMetrics(String scope, String clientId) {\n-        Date date = new Date();\n-        KuraDataChannel kuraDataChannel = new KuraDataChannel(scope, clientId);\n-        KuraDataPayload kuraDataPayload = new KuraDataPayload();\n-        kuraDataPayload.setBody(\"Payload\".getBytes());\n-        kuraDataPayload.getMetrics().put(\"response.code\", 200);\n-        KuraDataMessage kuraDataMessage = new KuraDataMessage(kuraDataChannel, date, kuraDataPayload);\n-\n-        stepData.put(\"KuraDataMessage\", kuraDataMessage);\n+    public void fullKuraDataMessage(String scope, String clientId) throws Exception {\n+        try {\n+            Date date = new Date();\n+            KuraDataChannel kuraDataChannel = new KuraDataChannel(scope, clientId);\n+            KuraDataPayload kuraDataPayload = new KuraDataPayload();\n+            kuraDataPayload.setBody(\"Payload\".getBytes());\n+            kuraDataPayload.getMetrics().put(\"response.code\", 200);\n+            KuraDataMessage kuraDataMessage = new KuraDataMessage(kuraDataChannel, date, kuraDataPayload);\n+            stepData.put(\"KuraDataMessage\", kuraDataMessage);\n+        } catch (Exception ex) {\n+            verifyException(ex);\n+        }\n     }\n \n     @Given(\"^I try to translate mqtt message to kura data message$\")\n     public void iTryToTranslateMqttMessageToKuraMessage() throws Exception {\n-        MqttMessage mqttMessage = (MqttMessage) stepData.get(\"MqttMessage\");\n-        KuraDataMessage kuraDataMessage = translatorDataMqttKura.translate(mqttMessage);\n-        stepData.put(\"KuraDataMessage\", kuraDataMessage);\n+        try {\n+            MqttMessage mqttMessage = (MqttMessage) stepData.get(\"MqttMessage\");\n+            KuraDataMessage kuraDataMessage = translatorDataMqttKura.translate(mqttMessage);\n+            stepData.put(\"KuraDataMessage\", kuraDataMessage);\n+        } catch (Exception ex) {\n+            verifyException(ex);\n+        }\n     }\n \n     @Then(\"^I got kura data message with \\\"([^\\\"]*)\\\" payload body$\")\n", "next_change": {"commit": "11ac0a839beb8414bd87fb1c93c90adfca02822b", "changed_code": [{"header": "diff --git a/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java b/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\nindex 668c0d0291..71099fc9c3 100644\n--- a/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\n+++ b/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\n", "chunk": "@@ -296,29 +248,29 @@ public class TranslatorSteps extends TestBase {\n     public void iGotKuraDataMessageWithPayloadBody(String payloadType) throws Throwable {\n         KuraDataMessage kuraDataMessage = (KuraDataMessage) stepData.get(\"KuraDataMessage\");\n \n-        assertTrue(kuraDataMessage.getPayload().getBody().getClass().getSimpleName().equals(payloadType));\n+        Assert.assertTrue(kuraDataMessage.getPayload().getBody().getClass().getSimpleName().equals(payloadType));\n     }\n \n     @And(\"^I got kura data message channel with \\\"(.+)\\\" and \\\"(.+)\\\" data$\")\n     public void iGotKuraDataMessageChannelWithAndData(String scope, String clientId) {\n         KuraDataMessage kuraDataMessage = (KuraDataMessage) stepData.get(\"KuraDataMessage\");\n \n-        assertTrue(kuraDataMessage.getChannel().getScope().equals(scope));\n-        assertTrue(kuraDataMessage.getChannel().getClientId().equals(clientId));\n+        Assert.assertTrue(kuraDataMessage.getChannel().getScope().equals(scope));\n+        Assert.assertTrue(kuraDataMessage.getChannel().getClientId().equals(clientId));\n     }\n \n     @Then(\"^I got kura data message with proper payload metrics response code (\\\\d+)$\")\n     public void iGotKuraDataMessageWithProperPayloadMetrics(int responseCode) {\n         KuraDataMessage kuraDataMessage = (KuraDataMessage) stepData.get(\"KuraDataMessage\");\n \n-        assertEquals(kuraDataMessage.getPayload().getMetrics().get(\"response.code\"), responseCode);\n+        Assert.assertEquals(kuraDataMessage.getPayload().getMetrics().get(\"response.code\"), responseCode);\n     }\n \n     @Then(\"^I got kura data message with empty payload$\")\n     public void iGotKuraDataMessageWithEmptyPayload() {\n         KuraDataMessage kuraDataMessage = (KuraDataMessage) stepData.get(\"KuraDataMessage\");\n \n-        assertEquals(null, kuraDataMessage.getPayload().getBody());\n+        Assert.assertEquals(null, kuraDataMessage.getPayload().getBody());\n     }\n \n     @Given(\"^I create jms message with (?:valid|invalid|empty) payload \\\"([^\\\"]*)\\\" and (?:valid|invalid) topic \\\"([^\\\"]*)\\\"$\")\n", "next_change": {"commit": "123f51e94d1afdb0fb2210f02f65c9f9e29dfe97", "changed_code": [{"header": "diff --git a/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java b/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\nindex 71099fc9c3..5535f55da2 100644\n--- a/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\n+++ b/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\n", "chunk": "@@ -244,61 +235,53 @@ public class TranslatorSteps extends TestBase {\n         }\n     }\n \n-    @Then(\"^I got kura data message with \\\"([^\\\"]*)\\\" payload body$\")\n+    @Then(\"I got kura data message with {string} payload body\")\n     public void iGotKuraDataMessageWithPayloadBody(String payloadType) throws Throwable {\n         KuraDataMessage kuraDataMessage = (KuraDataMessage) stepData.get(\"KuraDataMessage\");\n-\n         Assert.assertTrue(kuraDataMessage.getPayload().getBody().getClass().getSimpleName().equals(payloadType));\n     }\n \n-    @And(\"^I got kura data message channel with \\\"(.+)\\\" and \\\"(.+)\\\" data$\")\n+    @And(\"I got kura data message channel with {string} and {string} data\")\n     public void iGotKuraDataMessageChannelWithAndData(String scope, String clientId) {\n         KuraDataMessage kuraDataMessage = (KuraDataMessage) stepData.get(\"KuraDataMessage\");\n-\n         Assert.assertTrue(kuraDataMessage.getChannel().getScope().equals(scope));\n         Assert.assertTrue(kuraDataMessage.getChannel().getClientId().equals(clientId));\n     }\n \n-    @Then(\"^I got kura data message with proper payload metrics response code (\\\\d+)$\")\n+    @Then(\"I got kura data message with proper payload metrics response code {int}\")\n     public void iGotKuraDataMessageWithProperPayloadMetrics(int responseCode) {\n         KuraDataMessage kuraDataMessage = (KuraDataMessage) stepData.get(\"KuraDataMessage\");\n-\n         Assert.assertEquals(kuraDataMessage.getPayload().getMetrics().get(\"response.code\"), responseCode);\n     }\n \n-    @Then(\"^I got kura data message with empty payload$\")\n+    @Then(\"I got kura data message with empty payload\")\n     public void iGotKuraDataMessageWithEmptyPayload() {\n         KuraDataMessage kuraDataMessage = (KuraDataMessage) stepData.get(\"KuraDataMessage\");\n-\n         Assert.assertEquals(null, kuraDataMessage.getPayload().getBody());\n     }\n \n-    @Given(\"^I create jms message with (?:valid|invalid|empty) payload \\\"([^\\\"]*)\\\" and (?:valid|invalid) topic \\\"([^\\\"]*)\\\"$\")\n+    @Given(\"I create jms message with (valid/invalid/empty) payload {string} and (valid/invalid) topic {string}\")\n     public void iCreateJmsMessageWithInvalidPayloadAndInvalidTopic(String payload, String topic) throws Exception {\n         try {\n             Date date = new Date();\n             JmsTopic jmsTopic = new JmsTopic(topic);\n-\n             KuraPayload kuraPayload = new KuraPayload();\n             if (payload.equals(\"invalidPayload\") || payload.equals(\"\")) {\n                 kuraPayload.setBody(payload.getBytes());\n             } else {\n                 kuraPayload.getMetrics().put(payload, 200);\n             }\n-\n             JmsPayload jmsPayload = new JmsPayload(kuraPayload.toByteArray());\n             JmsMessage jmsMessage = new JmsMessage(jmsTopic, date, jmsPayload);\n-\n             stepData.put(\"JmsMessage\", jmsMessage);\n         } catch (Exception ex) {\n             verifyException(ex);\n         }\n     }\n \n-    @And(\"^I try to translate jms message to kura data message$\")\n+    @And(\"I try to translate jms message to kura data message\")\n     public void iTryToTranslateJmsMessageToKuraMessage() throws Exception {\n         JmsMessage jmsMessage = (JmsMessage) stepData.get(\"JmsMessage\");\n-\n         try {\n             KuraDataMessage kuraDataMessage = translatorDataJmsKura.translate(jmsMessage);\n             stepData.put(\"KuraDataMessage\", kuraDataMessage);\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "fa85bb5aacb679c2fa90beb7283e28fe27c5b234", "message": "Merge commit", "committedDate": null}, {"oid": "9f7bc792c823dcab476a48e34cf1be87ea7801fb", "committedDate": "2020-09-07 11:51:17 +0200", "message": "Added JUnit and I9 tests"}, {"oid": "a7f7240e48238651f4ffe159f5b0867092eb29b0", "committedDate": "2020-11-11 17:13:08 +0100", "message": "Upgrade to EPL-2.0"}, {"oid": "56bacf723fa05f9a6e83f524c9d6d158bf6f2298", "committedDate": "2020-11-11 17:13:11 +0100", "message": "Remove \"All rights reserved.\" from Copyright Headers"}, {"oid": "dd481c52c43202d55fe8f8c3aafdbec933230cb0", "committedDate": "2021-01-02 17:21:55 +0100", "message": "Update Copyright Year to 2021"}, {"oid": "a56f7b5fb1bb53eb407bcfa0b233e48305cbd534", "committedDate": "2021-08-26 09:29:51 +0200", "message": "external camel consumers"}, {"oid": "11ac0a839beb8414bd87fb1c93c90adfca02822b", "committedDate": "2021-08-26 09:29:51 +0200", "message": "external camel consumers"}, {"oid": "213469756f408e3756fc2d4ffe63560ea51cc399", "committedDate": "2021-09-09 14:48:22 +0200", "message": "external camel consumers - upgrade cucumber to 6.10.4"}, {"oid": "123f51e94d1afdb0fb2210f02f65c9f9e29dfe97", "committedDate": "2021-09-09 14:48:22 +0200", "message": "external camel consumers - upgrade cucumber to 6.10.4 - fixed steps/features/tests tags:"}, {"oid": "7a44c34bbf4c060622421c1cfff94e378681b61a", "committedDate": "2022-01-18 12:28:06 +0100", "message": "Fixed wrong syntax in steps"}, {"oid": "b2f2672d9b138ed1bc71ee1baf60069a326733c2", "committedDate": "2022-01-18 12:30:23 +0100", "message": "Fixed typos"}, {"oid": "72adba095b1dd3a8b7f4aa4fb56d2fa2c86a62bb", "committedDate": "2022-02-17 10:17:20 +0100", "message": "Updated copyright headers to 2022"}, {"oid": "5c5acc4009d68195d31608e448966fc433397f66", "committedDate": "2022-11-09 14:56:53 +0100", "message": "Added Configuration Change event handling and improved JMS-Kura translator implementation"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzY0MDY5Nw==", "url": "https://github.com/eclipse/kapua/pull/2941#discussion_r413640697", "body": "Change method name to: \"iCreateJmsMessageWithInvalidPayloadAndTopic\"", "bodyText": "Change method name to: \"iCreateJmsMessageWithInvalidPayloadAndTopic\"", "bodyHTML": "<p dir=\"auto\">Change method name to: \"iCreateJmsMessageWithInvalidPayloadAndTopic\"</p>", "author": "LeoNerdoG", "createdAt": "2020-04-23T09:00:29Z", "path": "translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java", "diffHunk": "@@ -0,0 +1,363 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech\n+ *******************************************************************************/\n+package org.eclipse.kapua.translator.test.steps;\n+\n+import cucumber.api.Scenario;\n+import cucumber.api.java.After;\n+import cucumber.api.java.Before;\n+import cucumber.api.java.en.And;\n+import cucumber.api.java.en.Given;\n+import cucumber.api.java.en.Then;\n+import cucumber.api.java.en.When;\n+import cucumber.runtime.java.guice.ScenarioScoped;\n+import org.apache.shiro.SecurityUtils;\n+import org.eclipse.kapua.KapuaException;\n+import org.eclipse.kapua.commons.security.KapuaSecurityUtils;\n+import org.eclipse.kapua.commons.security.KapuaSession;\n+import org.eclipse.kapua.commons.util.xml.XmlUtil;\n+import org.eclipse.kapua.locator.KapuaLocator;\n+import org.eclipse.kapua.qa.common.DBHelper;\n+import org.eclipse.kapua.qa.common.StepData;\n+import org.eclipse.kapua.qa.common.TestBase;\n+import org.eclipse.kapua.qa.common.TestJAXBContextProvider;\n+import org.eclipse.kapua.service.device.call.message.kura.KuraPayload;\n+import org.eclipse.kapua.service.device.call.message.kura.app.response.KuraResponseMessage;\n+import org.eclipse.kapua.service.device.call.message.kura.data.KuraDataChannel;\n+import org.eclipse.kapua.service.device.call.message.kura.data.KuraDataMessage;\n+import org.eclipse.kapua.service.device.call.message.kura.data.KuraDataPayload;\n+import org.eclipse.kapua.translator.Translator;\n+import org.eclipse.kapua.translator.jms.kura.TranslatorDataJmsKura;\n+import org.eclipse.kapua.translator.kura.jms.TranslatorDataKuraJms;\n+import org.eclipse.kapua.translator.kura.mqtt.TranslatorDataKuraMqtt;\n+import org.eclipse.kapua.translator.mqtt.kura.TranslatorDataMqttKura;\n+import org.eclipse.kapua.translator.mqtt.kura.TranslatorResponseMqttKura;\n+import org.eclipse.kapua.transport.message.jms.JmsMessage;\n+import org.eclipse.kapua.transport.message.jms.JmsPayload;\n+import org.eclipse.kapua.transport.message.jms.JmsTopic;\n+import org.eclipse.kapua.transport.message.mqtt.MqttMessage;\n+import org.eclipse.kapua.transport.message.mqtt.MqttPayload;\n+import org.eclipse.kapua.transport.message.mqtt.MqttTopic;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.inject.Inject;\n+import java.util.Date;\n+import java.util.List;\n+\n+/**\n+ * Implementation of Gherkin steps used in TranslatorUnitTests.feature scenarios.\n+ */\n+@ScenarioScoped\n+public class TranslatorSteps extends TestBase {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(TranslatorSteps.class);\n+\n+\n+    private DBHelper database;\n+    private ExampleTranslator exampleTranslator;\n+    private TranslatorDataMqttKura translatorDataMqttKura;\n+    private TranslatorResponseMqttKura translatorResponseMqttKura;\n+    private TranslatorDataKuraMqtt translatorDataKuraMqtt;\n+    private TranslatorDataJmsKura translatorDataJmsKura;\n+    private TranslatorDataKuraJms translatorDataKuraJms;\n+\n+    @Inject\n+    public TranslatorSteps(StepData stepData, DBHelper dbHelper) {\n+\n+        this.stepData = stepData;\n+        this.database = dbHelper;\n+    }\n+\n+    // *************************************\n+    // Definition of Cucumber scenario steps\n+    // *************************************\n+\n+    @Before\n+    public void beforeScenario(Scenario scenario) {\n+\n+        this.scenario = scenario;\n+        database.setup();\n+        stepData.clear();\n+\n+        locator = KapuaLocator.getInstance();\n+        exampleTranslator = new ExampleTranslator();\n+\n+        translatorDataMqttKura = new TranslatorDataMqttKura();\n+        translatorResponseMqttKura = new TranslatorResponseMqttKura();\n+        translatorDataKuraMqtt = new TranslatorDataKuraMqtt();\n+        translatorDataJmsKura = new TranslatorDataJmsKura();\n+        translatorDataKuraJms = new TranslatorDataKuraJms();\n+\n+        if (isUnitTest()) {\n+            // Create KapuaSession using KapuaSecurtiyUtils and kapua-sys user as logged in user.\n+            // All operations on database are performed using system user.\n+            // Only for unit tests. Integration tests assume that a real logon is performed.\n+            KapuaSession kapuaSession = new KapuaSession(null, SYS_SCOPE_ID, SYS_USER_ID);\n+            KapuaSecurityUtils.setSession(kapuaSession);\n+        }\n+\n+        // Setup JAXB context\n+        XmlUtil.setContextProvider(new TestJAXBContextProvider());\n+    }\n+\n+    @After\n+    public void afterScenario() {\n+\n+        // Clean up the database\n+        try {\n+            logger.info(\"Logging out in cleanup\");\n+            if (isIntegrationTest()) {\n+                database.deleteAll();\n+                SecurityUtils.getSubject().logout();\n+            } else {\n+                database.dropAll();\n+                database.close();\n+            }\n+            KapuaSecurityUtils.clearSession();\n+        } catch (Exception e) {\n+            logger.error(\"Failed to log out in @After\", e);\n+        }\n+    }\n+\n+    @Given(\"^I try to translate from \\\"([^\\\"]*)\\\" to \\\"([^\\\"]*)\\\"$\")\n+    public void iFindTranslator(String from, String to) throws Exception {\n+        Class fromClass;\n+        Class toClass;\n+        try {\n+            if (!from.equals(\"\") && !to.equals(\"\")) {\n+                fromClass = Class.forName(from);\n+                toClass = Class.forName(to);\n+            } else {\n+                fromClass = null;\n+                toClass = null;\n+            }\n+            Translator translator = Translator.getTranslatorFor(exampleTranslator.getClass(fromClass), exampleTranslator.getClass(toClass));\n+            stepData.put(\"Translator\", translator);\n+        } catch (Exception ex) {\n+            verifyException(ex);\n+        }\n+    }\n+\n+    @Then(\"^Translator \\\"([^\\\"]*)\\\" is found$\")\n+    public void translatorIsFound(String translatorName) {\n+        Translator translator = (Translator) stepData.get(\"Translator\");\n+        assertEquals(translatorName, translator.getClass().getSimpleName());\n+    }\n+\n+    @Given(\"^I create mqtt message with (?:valid|invalid|empty) payload \\\"([^\\\"]*)\\\" and (?:valid|invalid) topic \\\"([^\\\"]*)\\\"$\")\n+    public void iTryToProvideInvalidTopic(String payload, String topic) {\n+\n+        Date date = new Date();\n+        MqttTopic mqttTopic = new MqttTopic(topic);\n+\n+        KuraPayload kuraPayload = new KuraPayload();\n+        if (payload.equals(\"invalidPayload\") || payload.equals(\"\")) {\n+            kuraPayload.setBody(payload.getBytes());\n+        } else {\n+            kuraPayload.getMetrics().put(payload, 200);\n+        }\n+\n+        MqttPayload mqttPayload = new MqttPayload(kuraPayload.toByteArray());\n+        MqttMessage mqttMessage = new MqttMessage(mqttTopic, date, mqttPayload);\n+\n+        stepData.put(\"MqttMessage\", mqttMessage);\n+    }\n+\n+    @When(\"^I try to translate mqtt response$\")\n+    public void iTryToTranslateMqttResponse() throws Exception {\n+        MqttMessage mqttMessage = (MqttMessage) stepData.get(\"MqttMessage\");\n+\n+        try {\n+            KuraResponseMessage kuraResponseMessage = translatorResponseMqttKura.translate(mqttMessage);\n+            stepData.put(\"KuraResponseMessage\", kuraResponseMessage);\n+        } catch (KapuaException ex) {\n+            verifyException(ex);\n+        }\n+    }\n+\n+    @Then(\"^I got kura response message with \\\"([^\\\"]*)\\\" payload body$\")\n+    public void iGotKuraResponseMessageWithPayloadBody(String payloadType) {\n+        KuraResponseMessage kuraResponseMessage = (KuraResponseMessage) stepData.get(\"KuraResponseMessage\");\n+\n+        assertTrue(kuraResponseMessage.getPayload().getBody().getClass().getSimpleName().equals(payloadType));\n+    }\n+\n+    @Then(\"^I got kura response message with proper payload metrics$\")\n+    public void iGotKuraResponseMessageWithPayloadAndChannelWithAndData() {\n+        KuraResponseMessage kuraResponseMessage = (KuraResponseMessage) stepData.get(\"KuraResponseMessage\");\n+\n+        assertTrue(kuraResponseMessage.getPayload().getMetrics() != null);\n+    }\n+\n+    @Given(\"^I create kura data message with channel with scope \\\"([^\\\"]*)\\\", client id \\\"([^\\\"]*)\\\" and payload without body and metrics$\")\n+    public void iCreateKuraDataMessage(String scope, String clientId) {\n+        KuraDataChannel kuraDataChannel = new KuraDataChannel(scope, clientId);\n+        Date date = new Date();\n+        KuraDataPayload kuraDataPayload = new KuraDataPayload();\n+        KuraDataMessage kuraDataMessage = new KuraDataMessage(kuraDataChannel, date, kuraDataPayload);\n+        stepData.put(\"KuraDataMessage\", kuraDataMessage);\n+    }\n+\n+    @And(\"^I try to translate kura data message to mqtt message$\")\n+    public void iTryToTranslateKuraDataMessageToMqttMessage() throws Exception {\n+        KuraDataMessage kuraDataMessage = (KuraDataMessage) stepData.get(\"KuraDataMessage\");\n+        MqttMessage mqttMessage = translatorDataKuraMqtt.translate(kuraDataMessage);\n+        stepData.put(\"MqttMessage\", mqttMessage);\n+    }\n+\n+    @Then(\"^I got mqtt message with channel with scope \\\"([^\\\"]*)\\\", client id \\\"([^\\\"]*)\\\" and (?:empty body|non empty body)$\")\n+    public void iGotMqttMessageWithChannelWithClientIdScopeAndWithoutMetricsAndBodyInPayload(String scope, String clientId) {\n+        MqttMessage mqttMessage = (MqttMessage) stepData.get(\"MqttMessage\");\n+\n+        String requestTopic = scope.concat(\"/\" + clientId);\n+        assertEquals(requestTopic, mqttMessage.getRequestTopic().getTopic());\n+\n+        if (mqttMessage.getPayload().getBody().length == 0) {\n+            assertTrue(mqttMessage.getPayload().getBody().length == 0);\n+        } else {\n+            assertTrue(mqttMessage.getPayload().getBody().length != 0);\n+        }\n+    }\n+\n+    @And(\"^I got kura response message channel with \\\"(.+)\\\", \\\"(.+)\\\", \\\"(.+)\\\", \\\"(.+)\\\", \\\"(.+)\\\" and \\\"(.+)\\\" data$\")\n+    public void iGotKuraResponseMessageChannelWithAndData(String replyPart, String requestId, String appId, String messageClassification, String scope, String clientId) {\n+        KuraResponseMessage kuraResponseMessage = (KuraResponseMessage) stepData.get(\"KuraResponseMessage\");\n+\n+        assertTrue(kuraResponseMessage.getChannel().getReplyPart().equals(replyPart));\n+        assertTrue(kuraResponseMessage.getChannel().getRequestId().equals(requestId));\n+        assertTrue(kuraResponseMessage.getChannel().getAppId().equals(appId));\n+        assertTrue(kuraResponseMessage.getChannel().getMessageClassification().equals(messageClassification));\n+        assertTrue(kuraResponseMessage.getChannel().getScope().equals(scope));\n+        assertTrue(kuraResponseMessage.getChannel().getClientId().equals(clientId));\n+    }\n+\n+    @Given(\"^I create kura data message with channel with scope \\\"([^\\\"]*)\\\", client id \\\"([^\\\"]*)\\\" and payload without body and with metrics$\")\n+    public void iCreateKuraDataMessageWithChannelWithScopeClientIdAndPayloadWithoutBodyAndWithMetrics(String scope, String clientId) {\n+        Date date = new Date();\n+        KuraDataChannel kuraDataChannel = new KuraDataChannel(scope, clientId);\n+        KuraDataPayload kuraDataPayload = new KuraDataPayload();\n+        kuraDataPayload.getMetrics().put(\"response.code\", 200);\n+        KuraDataMessage kuraDataMessage = new KuraDataMessage(kuraDataChannel, date, kuraDataPayload);\n+\n+        stepData.put(\"KuraDataMessage\", kuraDataMessage);\n+    }\n+\n+    @Given(\"^I create kura data message with channel with scope \\\"([^\\\"]*)\\\", client id \\\"([^\\\"]*)\\\" and payload with body and metrics$\")\n+    public void iCreateKuraDataMessageWithChannelWithScopeClientIdAndPayloadWithBodyAndMetrics(String scope, String clientId) {\n+        Date date = new Date();\n+        KuraDataChannel kuraDataChannel = new KuraDataChannel(scope, clientId);\n+        KuraDataPayload kuraDataPayload = new KuraDataPayload();\n+        kuraDataPayload.setBody(\"Payload\".getBytes());\n+        kuraDataPayload.getMetrics().put(\"response.code\", 200);\n+        KuraDataMessage kuraDataMessage = new KuraDataMessage(kuraDataChannel, date, kuraDataPayload);\n+\n+        stepData.put(\"KuraDataMessage\", kuraDataMessage);\n+    }\n+\n+    @Given(\"^I try to translate mqtt message to kura data message$\")\n+    public void iTryToTranslateMqttMessageToKuraMessage() throws Exception {\n+        MqttMessage mqttMessage = (MqttMessage) stepData.get(\"MqttMessage\");\n+        KuraDataMessage kuraDataMessage = translatorDataMqttKura.translate(mqttMessage);\n+        stepData.put(\"KuraDataMessage\", kuraDataMessage);\n+    }\n+\n+    @Then(\"^I got kura data message with \\\"([^\\\"]*)\\\" payload body$\")\n+    public void iGotKuraDataMessageWithPayloadBody(String payloadType) throws Throwable {\n+        KuraDataMessage kuraDataMessage = (KuraDataMessage) stepData.get(\"KuraDataMessage\");\n+\n+        assertTrue(kuraDataMessage.getPayload().getBody().getClass().getSimpleName().equals(payloadType));\n+    }\n+\n+    @And(\"^I got kura data message channel with \\\"(.+)\\\" and \\\"(.+)\\\" data$\")\n+    public void iGotKuraDataMessageChannelWithAndData(String scope, String clientId) {\n+        KuraDataMessage kuraDataMessage = (KuraDataMessage) stepData.get(\"KuraDataMessage\");\n+\n+        assertTrue(kuraDataMessage.getChannel().getScope().equals(scope));\n+        assertTrue(kuraDataMessage.getChannel().getClientId().equals(clientId));\n+    }\n+\n+    @Then(\"^I got kura data message with proper payload metrics$\")\n+    public void iGotKuraDataMessageWithProperPayloadMetrics() {\n+        KuraDataMessage kuraDataMessage = (KuraDataMessage) stepData.get(\"KuraDataMessage\");\n+\n+        assertTrue(kuraDataMessage.getPayload().getMetrics() != null);\n+    }\n+\n+    @Then(\"^I got kura data message with empty payload$\")\n+    public void iGotKuraDataMessageWithEmptyPayload() {\n+        KuraDataMessage kuraDataMessage = (KuraDataMessage) stepData.get(\"KuraDataMessage\");\n+\n+        assertEquals(null, kuraDataMessage.getPayload().getBody());\n+    }\n+\n+    @Given(\"^I create jms message with (?:valid|invalid|empty) payload \\\"([^\\\"]*)\\\" and (?:valid|invalid) topic \\\"([^\\\"]*)\\\"$\")\n+    public void iCreateJmsMessageWithInvalidPayloadAndInvalidTopic(String payload, String topic) {\n+        Date date = new Date();\n+        JmsTopic jmsTopic = new JmsTopic(topic);\n+\n+        KuraPayload kuraPayload = new KuraPayload();\n+        if (payload.equals(\"invalidPayload\") || payload.equals(\"\")) {\n+            kuraPayload.setBody(payload.getBytes());\n+        } else {\n+            kuraPayload.getMetrics().put(payload, 200);\n+        }\n+\n+        JmsPayload jmsPayload = new JmsPayload(kuraPayload.toByteArray());\n+        JmsMessage jmsMessage = new JmsMessage(jmsTopic, date, jmsPayload);\n+\n+        stepData.put(\"JmsMessage\", jmsMessage);\n+    }\n+\n+    @And(\"^I try to translate jms message to kura data message$\")\n+    public void iTryToTranslateJmsMessageToKuraMessage() throws Exception {\n+        JmsMessage jmsMessage = (JmsMessage) stepData.get(\"JmsMessage\");\n+\n+        try {\n+            KuraDataMessage kuraDataMessage = translatorDataJmsKura.translate(jmsMessage);\n+            stepData.put(\"KuraDataMessage\", kuraDataMessage);\n+        } catch (KapuaException ex) {\n+            verifyException(ex);\n+        }\n+    }\n+\n+    @And(\"^I try to translate kura data message to jms message$\")\n+    public void iTryToTranslateKuraDataMessageToJmsMessage() throws Exception {\n+        KuraDataMessage kuraDataMessage = (KuraDataMessage) stepData.get(\"KuraDataMessage\");\n+        JmsMessage jmsMessage = translatorDataKuraJms.translate(kuraDataMessage);\n+        stepData.put(\"JmsMessage\", jmsMessage);\n+    }\n+\n+    @Then(\"^I got kura data message channel with \\\"([^\\\"]*)\\\" scope, \\\"([^\\\"]*)\\\" client id and proper semanticPart$\")\n+    public void iGotKuraDataMessageChannelWithScopeClientIdAndProperSemanticPart(String scope, String clientId, List<String> semanticParts) {", "originalCommit": "400eb7bd926531f5b12f378c2c62c5fe8f8e1713", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2d7d0206645175175a1a27a3ca30d84bb82b5188", "changed_code": [{"header": "diff --git a/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java b/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\nindex a748910368..668c0d0291 100644\n--- a/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\n+++ b/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\n", "chunk": "@@ -331,13 +357,17 @@ public class TranslatorSteps extends TestBase {\n \n     @And(\"^I try to translate kura data message to jms message$\")\n     public void iTryToTranslateKuraDataMessageToJmsMessage() throws Exception {\n-        KuraDataMessage kuraDataMessage = (KuraDataMessage) stepData.get(\"KuraDataMessage\");\n-        JmsMessage jmsMessage = translatorDataKuraJms.translate(kuraDataMessage);\n-        stepData.put(\"JmsMessage\", jmsMessage);\n+        try {\n+            KuraDataMessage kuraDataMessage = (KuraDataMessage) stepData.get(\"KuraDataMessage\");\n+            JmsMessage jmsMessage = translatorDataKuraJms.translate(kuraDataMessage);\n+            stepData.put(\"JmsMessage\", jmsMessage);\n+        } catch (Exception ex) {\n+            verifyException(ex);\n+        }\n     }\n \n     @Then(\"^I got kura data message channel with \\\"([^\\\"]*)\\\" scope, \\\"([^\\\"]*)\\\" client id and proper semanticPart$\")\n-    public void iGotKuraDataMessageChannelWithScopeClientIdAndProperSemanticPart(String scope, String clientId, List<String> semanticParts) {\n+    public void iCreateJmsMessageWithInvalidPayloadAndTopic(String scope, String clientId, List<String> semanticParts) {\n \n         KuraDataMessage kuraDataMessage = (KuraDataMessage) stepData.get(\"KuraDataMessage\");\n \n", "next_change": null}]}, "revised_code_in_main": {"commit": "fa85bb5aacb679c2fa90beb7283e28fe27c5b234", "changed_code": [{"header": "diff --git a/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java b/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\nindex a748910368..668c0d0291 100644\n--- a/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\n+++ b/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\n", "chunk": "@@ -331,13 +357,17 @@ public class TranslatorSteps extends TestBase {\n \n     @And(\"^I try to translate kura data message to jms message$\")\n     public void iTryToTranslateKuraDataMessageToJmsMessage() throws Exception {\n-        KuraDataMessage kuraDataMessage = (KuraDataMessage) stepData.get(\"KuraDataMessage\");\n-        JmsMessage jmsMessage = translatorDataKuraJms.translate(kuraDataMessage);\n-        stepData.put(\"JmsMessage\", jmsMessage);\n+        try {\n+            KuraDataMessage kuraDataMessage = (KuraDataMessage) stepData.get(\"KuraDataMessage\");\n+            JmsMessage jmsMessage = translatorDataKuraJms.translate(kuraDataMessage);\n+            stepData.put(\"JmsMessage\", jmsMessage);\n+        } catch (Exception ex) {\n+            verifyException(ex);\n+        }\n     }\n \n     @Then(\"^I got kura data message channel with \\\"([^\\\"]*)\\\" scope, \\\"([^\\\"]*)\\\" client id and proper semanticPart$\")\n-    public void iGotKuraDataMessageChannelWithScopeClientIdAndProperSemanticPart(String scope, String clientId, List<String> semanticParts) {\n+    public void iCreateJmsMessageWithInvalidPayloadAndTopic(String scope, String clientId, List<String> semanticParts) {\n \n         KuraDataMessage kuraDataMessage = (KuraDataMessage) stepData.get(\"KuraDataMessage\");\n \n", "next_change": {"commit": "11ac0a839beb8414bd87fb1c93c90adfca02822b", "changed_code": [{"header": "diff --git a/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java b/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\nindex 668c0d0291..71099fc9c3 100644\n--- a/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\n+++ b/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\n", "chunk": "@@ -371,23 +323,83 @@ public class TranslatorSteps extends TestBase {\n \n         KuraDataMessage kuraDataMessage = (KuraDataMessage) stepData.get(\"KuraDataMessage\");\n \n-        assertEquals(scope, kuraDataMessage.getChannel().getScope());\n-        assertEquals(clientId, kuraDataMessage.getChannel().getClientId());\n+        Assert.assertEquals(scope, kuraDataMessage.getChannel().getScope());\n+        Assert.assertEquals(clientId, kuraDataMessage.getChannel().getClientId());\n \n         for (String semanticPart : semanticParts) {\n-            assertTrue(kuraDataMessage.getChannel().getSemanticParts().contains(semanticPart));\n+            Assert.assertTrue(kuraDataMessage.getChannel().getSemanticParts().contains(semanticPart));\n         }\n     }\n \n     @Then(\"^I got jms message with topic \\\"([^\\\"]*)\\\" and (?:empty body|non empty body)$\")\n     public void iGotJmsMessageWithTopicAndEmptyPayload(JmsTopic topic) {\n         JmsMessage jmsMessage = (JmsMessage) stepData.get(\"JmsMessage\");\n-        assertEquals(topic.getTopic(), jmsMessage.getTopic().getTopic());\n+        Assert.assertEquals(topic.getTopic(), jmsMessage.getTopic().getTopic());\n \n         if (jmsMessage.getPayload().getBody().length == 0) {\n-            assertTrue(jmsMessage.getPayload().getBody().length == 0);\n+            Assert.assertTrue(jmsMessage.getPayload().getBody().length == 0);\n         } else {\n-            assertTrue(jmsMessage.getPayload().getBody().length != 0);\n+            Assert.assertTrue(jmsMessage.getPayload().getBody().length != 0);\n+        }\n+    }\n+\n+    @When(\"^I try to translate mqtt null message to kura data message$\")\n+    public void iTryToTranslateMqttNullMessageToKuraDataMessage() throws Exception {\n+        try {\n+            MqttMessage mqttMessage = (MqttMessage) stepData.get(\"MqttMessage\");\n+            KuraDataMessage kuraDataMessage = translatorDataMqttKura.translate((MqttMessage) null);\n+            stepData.put(\"KuraDataMessage\", kuraDataMessage);\n+        } catch (Exception ex){\n+            verifyException(ex);\n+        }\n+    }\n+\n+    @Given(\"^I create kura data message with channel with scope \\\"([^\\\"]*)\\\", client id \\\"([^\\\"]*)\\\" and null payload$\")\n+    public void iCreateKuraDataMessageWithChannelWithScopeClientIdAndNullPayload(String scope, String clientId) {\n+        KuraDataChannel kuraDataChannel = new KuraDataChannel(scope, clientId);\n+        Date date = new Date();\n+        KuraDataMessage kuraDataMessage = new KuraDataMessage(kuraDataChannel, date, null);\n+        stepData.put(\"KuraDataMessage\", kuraDataMessage);\n+    }\n+\n+    @Given(\"^I create kura data message with null channel and payload without body and with metrics$\")\n+    public void iCreateKuraDataMessageWithNullChannelAndPayloadWithoutBodyAndWithMetrics() {\n+        Date date = new Date();\n+        KuraDataPayload kuraDataPayload = new KuraDataPayload();\n+        kuraDataPayload.getMetrics().put(\"response.code\", 200);\n+        KuraDataMessage kuraDataMessage = new KuraDataMessage(null, date, kuraDataPayload);\n+\n+        stepData.put(\"KuraDataMessage\", kuraDataMessage);\n+    }\n+\n+    @And(\"^I try to translate invalid kura data message to mqtt message$\")\n+    public void iTryToTranslateInvalidKuraDataMessageToMqttMessage() throws Exception {\n+        try {\n+            KuraDataMessage kuraDataMessage = (KuraDataMessage) stepData.get(\"KuraDataMessage\");\n+            MqttMessage mqttMessage = translatorDataKuraMqtt.translate((KuraDataMessage) null);\n+            stepData.put(\"MqttMessage\", mqttMessage);\n+        } catch (Exception ex) {\n+            verifyException(ex);\n+        }\n+    }\n+\n+    @When(\"^I try to translate invalid jms message to kura data message$\")\n+    public void iTryToTranslateInvalidJmsMessageToKuraDataMessage() throws Exception{\n+        try {\n+            KuraDataMessage kuraDataMessage = translatorDataJmsKura.translate((JmsMessage) null);\n+            stepData.put(\"KuraDataMessage\", kuraDataMessage);\n+        } catch (KapuaException ex) {\n+            verifyException(ex);\n+        }\n+    }\n+\n+    @When(\"^I try to translate invalid kura data message to jms message$\")\n+    public void iTryToTranslateInvalidKuraDataMessageToJmsMessage() throws Exception {\n+        try {\n+            JmsMessage jmsMessage = translatorDataKuraJms.translate((KuraDataMessage) null);\n+            stepData.put(\"JmsMessage\", jmsMessage);\n+        } catch (Exception ex){\n+            verifyException(ex);\n         }\n     }\n }\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "fa85bb5aacb679c2fa90beb7283e28fe27c5b234", "message": "Merge commit", "committedDate": null}, {"oid": "9f7bc792c823dcab476a48e34cf1be87ea7801fb", "committedDate": "2020-09-07 11:51:17 +0200", "message": "Added JUnit and I9 tests"}, {"oid": "a7f7240e48238651f4ffe159f5b0867092eb29b0", "committedDate": "2020-11-11 17:13:08 +0100", "message": "Upgrade to EPL-2.0"}, {"oid": "56bacf723fa05f9a6e83f524c9d6d158bf6f2298", "committedDate": "2020-11-11 17:13:11 +0100", "message": "Remove \"All rights reserved.\" from Copyright Headers"}, {"oid": "dd481c52c43202d55fe8f8c3aafdbec933230cb0", "committedDate": "2021-01-02 17:21:55 +0100", "message": "Update Copyright Year to 2021"}, {"oid": "a56f7b5fb1bb53eb407bcfa0b233e48305cbd534", "committedDate": "2021-08-26 09:29:51 +0200", "message": "external camel consumers"}, {"oid": "11ac0a839beb8414bd87fb1c93c90adfca02822b", "committedDate": "2021-08-26 09:29:51 +0200", "message": "external camel consumers"}, {"oid": "213469756f408e3756fc2d4ffe63560ea51cc399", "committedDate": "2021-09-09 14:48:22 +0200", "message": "external camel consumers - upgrade cucumber to 6.10.4"}, {"oid": "123f51e94d1afdb0fb2210f02f65c9f9e29dfe97", "committedDate": "2021-09-09 14:48:22 +0200", "message": "external camel consumers - upgrade cucumber to 6.10.4 - fixed steps/features/tests tags:"}, {"oid": "7a44c34bbf4c060622421c1cfff94e378681b61a", "committedDate": "2022-01-18 12:28:06 +0100", "message": "Fixed wrong syntax in steps"}, {"oid": "b2f2672d9b138ed1bc71ee1baf60069a326733c2", "committedDate": "2022-01-18 12:30:23 +0100", "message": "Fixed typos"}, {"oid": "72adba095b1dd3a8b7f4aa4fb56d2fa2c86a62bb", "committedDate": "2022-02-17 10:17:20 +0100", "message": "Updated copyright headers to 2022"}, {"oid": "5c5acc4009d68195d31608e448966fc433397f66", "committedDate": "2022-11-09 14:56:53 +0100", "message": "Added Configuration Change event handling and improved JMS-Kura translator implementation"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzY0MDkwNQ==", "url": "https://github.com/eclipse/kapua/pull/2941#discussion_r413640905", "body": "Change method name to: \"iGotJmsMessageWithTopicAndEmptyPayload\"", "bodyText": "Change method name to: \"iGotJmsMessageWithTopicAndEmptyPayload\"", "bodyHTML": "<p dir=\"auto\">Change method name to: \"iGotJmsMessageWithTopicAndEmptyPayload\"</p>", "author": "LeoNerdoG", "createdAt": "2020-04-23T09:00:46Z", "path": "translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java", "diffHunk": "@@ -0,0 +1,363 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech\n+ *******************************************************************************/\n+package org.eclipse.kapua.translator.test.steps;\n+\n+import cucumber.api.Scenario;\n+import cucumber.api.java.After;\n+import cucumber.api.java.Before;\n+import cucumber.api.java.en.And;\n+import cucumber.api.java.en.Given;\n+import cucumber.api.java.en.Then;\n+import cucumber.api.java.en.When;\n+import cucumber.runtime.java.guice.ScenarioScoped;\n+import org.apache.shiro.SecurityUtils;\n+import org.eclipse.kapua.KapuaException;\n+import org.eclipse.kapua.commons.security.KapuaSecurityUtils;\n+import org.eclipse.kapua.commons.security.KapuaSession;\n+import org.eclipse.kapua.commons.util.xml.XmlUtil;\n+import org.eclipse.kapua.locator.KapuaLocator;\n+import org.eclipse.kapua.qa.common.DBHelper;\n+import org.eclipse.kapua.qa.common.StepData;\n+import org.eclipse.kapua.qa.common.TestBase;\n+import org.eclipse.kapua.qa.common.TestJAXBContextProvider;\n+import org.eclipse.kapua.service.device.call.message.kura.KuraPayload;\n+import org.eclipse.kapua.service.device.call.message.kura.app.response.KuraResponseMessage;\n+import org.eclipse.kapua.service.device.call.message.kura.data.KuraDataChannel;\n+import org.eclipse.kapua.service.device.call.message.kura.data.KuraDataMessage;\n+import org.eclipse.kapua.service.device.call.message.kura.data.KuraDataPayload;\n+import org.eclipse.kapua.translator.Translator;\n+import org.eclipse.kapua.translator.jms.kura.TranslatorDataJmsKura;\n+import org.eclipse.kapua.translator.kura.jms.TranslatorDataKuraJms;\n+import org.eclipse.kapua.translator.kura.mqtt.TranslatorDataKuraMqtt;\n+import org.eclipse.kapua.translator.mqtt.kura.TranslatorDataMqttKura;\n+import org.eclipse.kapua.translator.mqtt.kura.TranslatorResponseMqttKura;\n+import org.eclipse.kapua.transport.message.jms.JmsMessage;\n+import org.eclipse.kapua.transport.message.jms.JmsPayload;\n+import org.eclipse.kapua.transport.message.jms.JmsTopic;\n+import org.eclipse.kapua.transport.message.mqtt.MqttMessage;\n+import org.eclipse.kapua.transport.message.mqtt.MqttPayload;\n+import org.eclipse.kapua.transport.message.mqtt.MqttTopic;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.inject.Inject;\n+import java.util.Date;\n+import java.util.List;\n+\n+/**\n+ * Implementation of Gherkin steps used in TranslatorUnitTests.feature scenarios.\n+ */\n+@ScenarioScoped\n+public class TranslatorSteps extends TestBase {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(TranslatorSteps.class);\n+\n+\n+    private DBHelper database;\n+    private ExampleTranslator exampleTranslator;\n+    private TranslatorDataMqttKura translatorDataMqttKura;\n+    private TranslatorResponseMqttKura translatorResponseMqttKura;\n+    private TranslatorDataKuraMqtt translatorDataKuraMqtt;\n+    private TranslatorDataJmsKura translatorDataJmsKura;\n+    private TranslatorDataKuraJms translatorDataKuraJms;\n+\n+    @Inject\n+    public TranslatorSteps(StepData stepData, DBHelper dbHelper) {\n+\n+        this.stepData = stepData;\n+        this.database = dbHelper;\n+    }\n+\n+    // *************************************\n+    // Definition of Cucumber scenario steps\n+    // *************************************\n+\n+    @Before\n+    public void beforeScenario(Scenario scenario) {\n+\n+        this.scenario = scenario;\n+        database.setup();\n+        stepData.clear();\n+\n+        locator = KapuaLocator.getInstance();\n+        exampleTranslator = new ExampleTranslator();\n+\n+        translatorDataMqttKura = new TranslatorDataMqttKura();\n+        translatorResponseMqttKura = new TranslatorResponseMqttKura();\n+        translatorDataKuraMqtt = new TranslatorDataKuraMqtt();\n+        translatorDataJmsKura = new TranslatorDataJmsKura();\n+        translatorDataKuraJms = new TranslatorDataKuraJms();\n+\n+        if (isUnitTest()) {\n+            // Create KapuaSession using KapuaSecurtiyUtils and kapua-sys user as logged in user.\n+            // All operations on database are performed using system user.\n+            // Only for unit tests. Integration tests assume that a real logon is performed.\n+            KapuaSession kapuaSession = new KapuaSession(null, SYS_SCOPE_ID, SYS_USER_ID);\n+            KapuaSecurityUtils.setSession(kapuaSession);\n+        }\n+\n+        // Setup JAXB context\n+        XmlUtil.setContextProvider(new TestJAXBContextProvider());\n+    }\n+\n+    @After\n+    public void afterScenario() {\n+\n+        // Clean up the database\n+        try {\n+            logger.info(\"Logging out in cleanup\");\n+            if (isIntegrationTest()) {\n+                database.deleteAll();\n+                SecurityUtils.getSubject().logout();\n+            } else {\n+                database.dropAll();\n+                database.close();\n+            }\n+            KapuaSecurityUtils.clearSession();\n+        } catch (Exception e) {\n+            logger.error(\"Failed to log out in @After\", e);\n+        }\n+    }\n+\n+    @Given(\"^I try to translate from \\\"([^\\\"]*)\\\" to \\\"([^\\\"]*)\\\"$\")\n+    public void iFindTranslator(String from, String to) throws Exception {\n+        Class fromClass;\n+        Class toClass;\n+        try {\n+            if (!from.equals(\"\") && !to.equals(\"\")) {\n+                fromClass = Class.forName(from);\n+                toClass = Class.forName(to);\n+            } else {\n+                fromClass = null;\n+                toClass = null;\n+            }\n+            Translator translator = Translator.getTranslatorFor(exampleTranslator.getClass(fromClass), exampleTranslator.getClass(toClass));\n+            stepData.put(\"Translator\", translator);\n+        } catch (Exception ex) {\n+            verifyException(ex);\n+        }\n+    }\n+\n+    @Then(\"^Translator \\\"([^\\\"]*)\\\" is found$\")\n+    public void translatorIsFound(String translatorName) {\n+        Translator translator = (Translator) stepData.get(\"Translator\");\n+        assertEquals(translatorName, translator.getClass().getSimpleName());\n+    }\n+\n+    @Given(\"^I create mqtt message with (?:valid|invalid|empty) payload \\\"([^\\\"]*)\\\" and (?:valid|invalid) topic \\\"([^\\\"]*)\\\"$\")\n+    public void iTryToProvideInvalidTopic(String payload, String topic) {\n+\n+        Date date = new Date();\n+        MqttTopic mqttTopic = new MqttTopic(topic);\n+\n+        KuraPayload kuraPayload = new KuraPayload();\n+        if (payload.equals(\"invalidPayload\") || payload.equals(\"\")) {\n+            kuraPayload.setBody(payload.getBytes());\n+        } else {\n+            kuraPayload.getMetrics().put(payload, 200);\n+        }\n+\n+        MqttPayload mqttPayload = new MqttPayload(kuraPayload.toByteArray());\n+        MqttMessage mqttMessage = new MqttMessage(mqttTopic, date, mqttPayload);\n+\n+        stepData.put(\"MqttMessage\", mqttMessage);\n+    }\n+\n+    @When(\"^I try to translate mqtt response$\")\n+    public void iTryToTranslateMqttResponse() throws Exception {\n+        MqttMessage mqttMessage = (MqttMessage) stepData.get(\"MqttMessage\");\n+\n+        try {\n+            KuraResponseMessage kuraResponseMessage = translatorResponseMqttKura.translate(mqttMessage);\n+            stepData.put(\"KuraResponseMessage\", kuraResponseMessage);\n+        } catch (KapuaException ex) {\n+            verifyException(ex);\n+        }\n+    }\n+\n+    @Then(\"^I got kura response message with \\\"([^\\\"]*)\\\" payload body$\")\n+    public void iGotKuraResponseMessageWithPayloadBody(String payloadType) {\n+        KuraResponseMessage kuraResponseMessage = (KuraResponseMessage) stepData.get(\"KuraResponseMessage\");\n+\n+        assertTrue(kuraResponseMessage.getPayload().getBody().getClass().getSimpleName().equals(payloadType));\n+    }\n+\n+    @Then(\"^I got kura response message with proper payload metrics$\")\n+    public void iGotKuraResponseMessageWithPayloadAndChannelWithAndData() {\n+        KuraResponseMessage kuraResponseMessage = (KuraResponseMessage) stepData.get(\"KuraResponseMessage\");\n+\n+        assertTrue(kuraResponseMessage.getPayload().getMetrics() != null);\n+    }\n+\n+    @Given(\"^I create kura data message with channel with scope \\\"([^\\\"]*)\\\", client id \\\"([^\\\"]*)\\\" and payload without body and metrics$\")\n+    public void iCreateKuraDataMessage(String scope, String clientId) {\n+        KuraDataChannel kuraDataChannel = new KuraDataChannel(scope, clientId);\n+        Date date = new Date();\n+        KuraDataPayload kuraDataPayload = new KuraDataPayload();\n+        KuraDataMessage kuraDataMessage = new KuraDataMessage(kuraDataChannel, date, kuraDataPayload);\n+        stepData.put(\"KuraDataMessage\", kuraDataMessage);\n+    }\n+\n+    @And(\"^I try to translate kura data message to mqtt message$\")\n+    public void iTryToTranslateKuraDataMessageToMqttMessage() throws Exception {\n+        KuraDataMessage kuraDataMessage = (KuraDataMessage) stepData.get(\"KuraDataMessage\");\n+        MqttMessage mqttMessage = translatorDataKuraMqtt.translate(kuraDataMessage);\n+        stepData.put(\"MqttMessage\", mqttMessage);\n+    }\n+\n+    @Then(\"^I got mqtt message with channel with scope \\\"([^\\\"]*)\\\", client id \\\"([^\\\"]*)\\\" and (?:empty body|non empty body)$\")\n+    public void iGotMqttMessageWithChannelWithClientIdScopeAndWithoutMetricsAndBodyInPayload(String scope, String clientId) {\n+        MqttMessage mqttMessage = (MqttMessage) stepData.get(\"MqttMessage\");\n+\n+        String requestTopic = scope.concat(\"/\" + clientId);\n+        assertEquals(requestTopic, mqttMessage.getRequestTopic().getTopic());\n+\n+        if (mqttMessage.getPayload().getBody().length == 0) {\n+            assertTrue(mqttMessage.getPayload().getBody().length == 0);\n+        } else {\n+            assertTrue(mqttMessage.getPayload().getBody().length != 0);\n+        }\n+    }\n+\n+    @And(\"^I got kura response message channel with \\\"(.+)\\\", \\\"(.+)\\\", \\\"(.+)\\\", \\\"(.+)\\\", \\\"(.+)\\\" and \\\"(.+)\\\" data$\")\n+    public void iGotKuraResponseMessageChannelWithAndData(String replyPart, String requestId, String appId, String messageClassification, String scope, String clientId) {\n+        KuraResponseMessage kuraResponseMessage = (KuraResponseMessage) stepData.get(\"KuraResponseMessage\");\n+\n+        assertTrue(kuraResponseMessage.getChannel().getReplyPart().equals(replyPart));\n+        assertTrue(kuraResponseMessage.getChannel().getRequestId().equals(requestId));\n+        assertTrue(kuraResponseMessage.getChannel().getAppId().equals(appId));\n+        assertTrue(kuraResponseMessage.getChannel().getMessageClassification().equals(messageClassification));\n+        assertTrue(kuraResponseMessage.getChannel().getScope().equals(scope));\n+        assertTrue(kuraResponseMessage.getChannel().getClientId().equals(clientId));\n+    }\n+\n+    @Given(\"^I create kura data message with channel with scope \\\"([^\\\"]*)\\\", client id \\\"([^\\\"]*)\\\" and payload without body and with metrics$\")\n+    public void iCreateKuraDataMessageWithChannelWithScopeClientIdAndPayloadWithoutBodyAndWithMetrics(String scope, String clientId) {\n+        Date date = new Date();\n+        KuraDataChannel kuraDataChannel = new KuraDataChannel(scope, clientId);\n+        KuraDataPayload kuraDataPayload = new KuraDataPayload();\n+        kuraDataPayload.getMetrics().put(\"response.code\", 200);\n+        KuraDataMessage kuraDataMessage = new KuraDataMessage(kuraDataChannel, date, kuraDataPayload);\n+\n+        stepData.put(\"KuraDataMessage\", kuraDataMessage);\n+    }\n+\n+    @Given(\"^I create kura data message with channel with scope \\\"([^\\\"]*)\\\", client id \\\"([^\\\"]*)\\\" and payload with body and metrics$\")\n+    public void iCreateKuraDataMessageWithChannelWithScopeClientIdAndPayloadWithBodyAndMetrics(String scope, String clientId) {\n+        Date date = new Date();\n+        KuraDataChannel kuraDataChannel = new KuraDataChannel(scope, clientId);\n+        KuraDataPayload kuraDataPayload = new KuraDataPayload();\n+        kuraDataPayload.setBody(\"Payload\".getBytes());\n+        kuraDataPayload.getMetrics().put(\"response.code\", 200);\n+        KuraDataMessage kuraDataMessage = new KuraDataMessage(kuraDataChannel, date, kuraDataPayload);\n+\n+        stepData.put(\"KuraDataMessage\", kuraDataMessage);\n+    }\n+\n+    @Given(\"^I try to translate mqtt message to kura data message$\")\n+    public void iTryToTranslateMqttMessageToKuraMessage() throws Exception {\n+        MqttMessage mqttMessage = (MqttMessage) stepData.get(\"MqttMessage\");\n+        KuraDataMessage kuraDataMessage = translatorDataMqttKura.translate(mqttMessage);\n+        stepData.put(\"KuraDataMessage\", kuraDataMessage);\n+    }\n+\n+    @Then(\"^I got kura data message with \\\"([^\\\"]*)\\\" payload body$\")\n+    public void iGotKuraDataMessageWithPayloadBody(String payloadType) throws Throwable {\n+        KuraDataMessage kuraDataMessage = (KuraDataMessage) stepData.get(\"KuraDataMessage\");\n+\n+        assertTrue(kuraDataMessage.getPayload().getBody().getClass().getSimpleName().equals(payloadType));\n+    }\n+\n+    @And(\"^I got kura data message channel with \\\"(.+)\\\" and \\\"(.+)\\\" data$\")\n+    public void iGotKuraDataMessageChannelWithAndData(String scope, String clientId) {\n+        KuraDataMessage kuraDataMessage = (KuraDataMessage) stepData.get(\"KuraDataMessage\");\n+\n+        assertTrue(kuraDataMessage.getChannel().getScope().equals(scope));\n+        assertTrue(kuraDataMessage.getChannel().getClientId().equals(clientId));\n+    }\n+\n+    @Then(\"^I got kura data message with proper payload metrics$\")\n+    public void iGotKuraDataMessageWithProperPayloadMetrics() {\n+        KuraDataMessage kuraDataMessage = (KuraDataMessage) stepData.get(\"KuraDataMessage\");\n+\n+        assertTrue(kuraDataMessage.getPayload().getMetrics() != null);\n+    }\n+\n+    @Then(\"^I got kura data message with empty payload$\")\n+    public void iGotKuraDataMessageWithEmptyPayload() {\n+        KuraDataMessage kuraDataMessage = (KuraDataMessage) stepData.get(\"KuraDataMessage\");\n+\n+        assertEquals(null, kuraDataMessage.getPayload().getBody());\n+    }\n+\n+    @Given(\"^I create jms message with (?:valid|invalid|empty) payload \\\"([^\\\"]*)\\\" and (?:valid|invalid) topic \\\"([^\\\"]*)\\\"$\")\n+    public void iCreateJmsMessageWithInvalidPayloadAndInvalidTopic(String payload, String topic) {\n+        Date date = new Date();\n+        JmsTopic jmsTopic = new JmsTopic(topic);\n+\n+        KuraPayload kuraPayload = new KuraPayload();\n+        if (payload.equals(\"invalidPayload\") || payload.equals(\"\")) {\n+            kuraPayload.setBody(payload.getBytes());\n+        } else {\n+            kuraPayload.getMetrics().put(payload, 200);\n+        }\n+\n+        JmsPayload jmsPayload = new JmsPayload(kuraPayload.toByteArray());\n+        JmsMessage jmsMessage = new JmsMessage(jmsTopic, date, jmsPayload);\n+\n+        stepData.put(\"JmsMessage\", jmsMessage);\n+    }\n+\n+    @And(\"^I try to translate jms message to kura data message$\")\n+    public void iTryToTranslateJmsMessageToKuraMessage() throws Exception {\n+        JmsMessage jmsMessage = (JmsMessage) stepData.get(\"JmsMessage\");\n+\n+        try {\n+            KuraDataMessage kuraDataMessage = translatorDataJmsKura.translate(jmsMessage);\n+            stepData.put(\"KuraDataMessage\", kuraDataMessage);\n+        } catch (KapuaException ex) {\n+            verifyException(ex);\n+        }\n+    }\n+\n+    @And(\"^I try to translate kura data message to jms message$\")\n+    public void iTryToTranslateKuraDataMessageToJmsMessage() throws Exception {\n+        KuraDataMessage kuraDataMessage = (KuraDataMessage) stepData.get(\"KuraDataMessage\");\n+        JmsMessage jmsMessage = translatorDataKuraJms.translate(kuraDataMessage);\n+        stepData.put(\"JmsMessage\", jmsMessage);\n+    }\n+\n+    @Then(\"^I got kura data message channel with \\\"([^\\\"]*)\\\" scope, \\\"([^\\\"]*)\\\" client id and proper semanticPart$\")\n+    public void iGotKuraDataMessageChannelWithScopeClientIdAndProperSemanticPart(String scope, String clientId, List<String> semanticParts) {\n+\n+        KuraDataMessage kuraDataMessage = (KuraDataMessage) stepData.get(\"KuraDataMessage\");\n+\n+        assertEquals(scope, kuraDataMessage.getChannel().getScope());\n+        assertEquals(clientId, kuraDataMessage.getChannel().getClientId());\n+\n+        for (String semanticPart : semanticParts) {\n+            assertTrue(kuraDataMessage.getChannel().getSemanticParts().contains(semanticPart));\n+        }\n+    }\n+\n+    @Then(\"^I got jms message with topic \\\"([^\\\"]*)\\\" and (?:empty body|non empty body)$\")\n+    public void iGotJmsMessageWithTopicAndEmptyPayloa(JmsTopic topic) {", "originalCommit": "400eb7bd926531f5b12f378c2c62c5fe8f8e1713", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2d7d0206645175175a1a27a3ca30d84bb82b5188", "changed_code": [{"header": "diff --git a/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java b/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\nindex a748910368..668c0d0291 100644\n--- a/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\n+++ b/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\n", "chunk": "@@ -350,7 +380,7 @@ public class TranslatorSteps extends TestBase {\n     }\n \n     @Then(\"^I got jms message with topic \\\"([^\\\"]*)\\\" and (?:empty body|non empty body)$\")\n-    public void iGotJmsMessageWithTopicAndEmptyPayloa(JmsTopic topic) {\n+    public void iGotJmsMessageWithTopicAndEmptyPayload(JmsTopic topic) {\n         JmsMessage jmsMessage = (JmsMessage) stepData.get(\"JmsMessage\");\n         assertEquals(topic.getTopic(), jmsMessage.getTopic().getTopic());\n \n", "next_change": null}]}, "revised_code_in_main": {"commit": "fa85bb5aacb679c2fa90beb7283e28fe27c5b234", "changed_code": [{"header": "diff --git a/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java b/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\nindex a748910368..668c0d0291 100644\n--- a/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\n+++ b/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\n", "chunk": "@@ -350,7 +380,7 @@ public class TranslatorSteps extends TestBase {\n     }\n \n     @Then(\"^I got jms message with topic \\\"([^\\\"]*)\\\" and (?:empty body|non empty body)$\")\n-    public void iGotJmsMessageWithTopicAndEmptyPayloa(JmsTopic topic) {\n+    public void iGotJmsMessageWithTopicAndEmptyPayload(JmsTopic topic) {\n         JmsMessage jmsMessage = (JmsMessage) stepData.get(\"JmsMessage\");\n         assertEquals(topic.getTopic(), jmsMessage.getTopic().getTopic());\n \n", "next_change": {"commit": "11ac0a839beb8414bd87fb1c93c90adfca02822b", "changed_code": [{"header": "diff --git a/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java b/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\nindex 668c0d0291..71099fc9c3 100644\n--- a/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\n+++ b/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\n", "chunk": "@@ -371,23 +323,83 @@ public class TranslatorSteps extends TestBase {\n \n         KuraDataMessage kuraDataMessage = (KuraDataMessage) stepData.get(\"KuraDataMessage\");\n \n-        assertEquals(scope, kuraDataMessage.getChannel().getScope());\n-        assertEquals(clientId, kuraDataMessage.getChannel().getClientId());\n+        Assert.assertEquals(scope, kuraDataMessage.getChannel().getScope());\n+        Assert.assertEquals(clientId, kuraDataMessage.getChannel().getClientId());\n \n         for (String semanticPart : semanticParts) {\n-            assertTrue(kuraDataMessage.getChannel().getSemanticParts().contains(semanticPart));\n+            Assert.assertTrue(kuraDataMessage.getChannel().getSemanticParts().contains(semanticPart));\n         }\n     }\n \n     @Then(\"^I got jms message with topic \\\"([^\\\"]*)\\\" and (?:empty body|non empty body)$\")\n     public void iGotJmsMessageWithTopicAndEmptyPayload(JmsTopic topic) {\n         JmsMessage jmsMessage = (JmsMessage) stepData.get(\"JmsMessage\");\n-        assertEquals(topic.getTopic(), jmsMessage.getTopic().getTopic());\n+        Assert.assertEquals(topic.getTopic(), jmsMessage.getTopic().getTopic());\n \n         if (jmsMessage.getPayload().getBody().length == 0) {\n-            assertTrue(jmsMessage.getPayload().getBody().length == 0);\n+            Assert.assertTrue(jmsMessage.getPayload().getBody().length == 0);\n         } else {\n-            assertTrue(jmsMessage.getPayload().getBody().length != 0);\n+            Assert.assertTrue(jmsMessage.getPayload().getBody().length != 0);\n+        }\n+    }\n+\n+    @When(\"^I try to translate mqtt null message to kura data message$\")\n+    public void iTryToTranslateMqttNullMessageToKuraDataMessage() throws Exception {\n+        try {\n+            MqttMessage mqttMessage = (MqttMessage) stepData.get(\"MqttMessage\");\n+            KuraDataMessage kuraDataMessage = translatorDataMqttKura.translate((MqttMessage) null);\n+            stepData.put(\"KuraDataMessage\", kuraDataMessage);\n+        } catch (Exception ex){\n+            verifyException(ex);\n+        }\n+    }\n+\n+    @Given(\"^I create kura data message with channel with scope \\\"([^\\\"]*)\\\", client id \\\"([^\\\"]*)\\\" and null payload$\")\n+    public void iCreateKuraDataMessageWithChannelWithScopeClientIdAndNullPayload(String scope, String clientId) {\n+        KuraDataChannel kuraDataChannel = new KuraDataChannel(scope, clientId);\n+        Date date = new Date();\n+        KuraDataMessage kuraDataMessage = new KuraDataMessage(kuraDataChannel, date, null);\n+        stepData.put(\"KuraDataMessage\", kuraDataMessage);\n+    }\n+\n+    @Given(\"^I create kura data message with null channel and payload without body and with metrics$\")\n+    public void iCreateKuraDataMessageWithNullChannelAndPayloadWithoutBodyAndWithMetrics() {\n+        Date date = new Date();\n+        KuraDataPayload kuraDataPayload = new KuraDataPayload();\n+        kuraDataPayload.getMetrics().put(\"response.code\", 200);\n+        KuraDataMessage kuraDataMessage = new KuraDataMessage(null, date, kuraDataPayload);\n+\n+        stepData.put(\"KuraDataMessage\", kuraDataMessage);\n+    }\n+\n+    @And(\"^I try to translate invalid kura data message to mqtt message$\")\n+    public void iTryToTranslateInvalidKuraDataMessageToMqttMessage() throws Exception {\n+        try {\n+            KuraDataMessage kuraDataMessage = (KuraDataMessage) stepData.get(\"KuraDataMessage\");\n+            MqttMessage mqttMessage = translatorDataKuraMqtt.translate((KuraDataMessage) null);\n+            stepData.put(\"MqttMessage\", mqttMessage);\n+        } catch (Exception ex) {\n+            verifyException(ex);\n+        }\n+    }\n+\n+    @When(\"^I try to translate invalid jms message to kura data message$\")\n+    public void iTryToTranslateInvalidJmsMessageToKuraDataMessage() throws Exception{\n+        try {\n+            KuraDataMessage kuraDataMessage = translatorDataJmsKura.translate((JmsMessage) null);\n+            stepData.put(\"KuraDataMessage\", kuraDataMessage);\n+        } catch (KapuaException ex) {\n+            verifyException(ex);\n+        }\n+    }\n+\n+    @When(\"^I try to translate invalid kura data message to jms message$\")\n+    public void iTryToTranslateInvalidKuraDataMessageToJmsMessage() throws Exception {\n+        try {\n+            JmsMessage jmsMessage = translatorDataKuraJms.translate((KuraDataMessage) null);\n+            stepData.put(\"JmsMessage\", jmsMessage);\n+        } catch (Exception ex){\n+            verifyException(ex);\n         }\n     }\n }\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "fa85bb5aacb679c2fa90beb7283e28fe27c5b234", "message": "Merge commit", "committedDate": null}, {"oid": "9f7bc792c823dcab476a48e34cf1be87ea7801fb", "committedDate": "2020-09-07 11:51:17 +0200", "message": "Added JUnit and I9 tests"}, {"oid": "a7f7240e48238651f4ffe159f5b0867092eb29b0", "committedDate": "2020-11-11 17:13:08 +0100", "message": "Upgrade to EPL-2.0"}, {"oid": "56bacf723fa05f9a6e83f524c9d6d158bf6f2298", "committedDate": "2020-11-11 17:13:11 +0100", "message": "Remove \"All rights reserved.\" from Copyright Headers"}, {"oid": "dd481c52c43202d55fe8f8c3aafdbec933230cb0", "committedDate": "2021-01-02 17:21:55 +0100", "message": "Update Copyright Year to 2021"}, {"oid": "a56f7b5fb1bb53eb407bcfa0b233e48305cbd534", "committedDate": "2021-08-26 09:29:51 +0200", "message": "external camel consumers"}, {"oid": "11ac0a839beb8414bd87fb1c93c90adfca02822b", "committedDate": "2021-08-26 09:29:51 +0200", "message": "external camel consumers"}, {"oid": "213469756f408e3756fc2d4ffe63560ea51cc399", "committedDate": "2021-09-09 14:48:22 +0200", "message": "external camel consumers - upgrade cucumber to 6.10.4"}, {"oid": "123f51e94d1afdb0fb2210f02f65c9f9e29dfe97", "committedDate": "2021-09-09 14:48:22 +0200", "message": "external camel consumers - upgrade cucumber to 6.10.4 - fixed steps/features/tests tags:"}, {"oid": "7a44c34bbf4c060622421c1cfff94e378681b61a", "committedDate": "2022-01-18 12:28:06 +0100", "message": "Fixed wrong syntax in steps"}, {"oid": "b2f2672d9b138ed1bc71ee1baf60069a326733c2", "committedDate": "2022-01-18 12:30:23 +0100", "message": "Fixed typos"}, {"oid": "72adba095b1dd3a8b7f4aa4fb56d2fa2c86a62bb", "committedDate": "2022-02-17 10:17:20 +0100", "message": "Updated copyright headers to 2022"}, {"oid": "5c5acc4009d68195d31608e448966fc433397f66", "committedDate": "2022-11-09 14:56:53 +0100", "message": "Added Configuration Change event handling and improved JMS-Kura translator implementation"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzY0NDE2MQ==", "url": "https://github.com/eclipse/kapua/pull/2941#discussion_r413644161", "body": "insert try/catch block, the \"stepdata.put\" part can be left ouside the try/catch.", "bodyText": "insert try/catch block, the \"stepdata.put\" part can be left ouside the try/catch.", "bodyHTML": "<p dir=\"auto\">insert try/catch block, the \"stepdata.put\" part can be left ouside the try/catch.</p>", "author": "LeoNerdoG", "createdAt": "2020-04-23T09:05:24Z", "path": "translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java", "diffHunk": "@@ -0,0 +1,363 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech\n+ *******************************************************************************/\n+package org.eclipse.kapua.translator.test.steps;\n+\n+import cucumber.api.Scenario;\n+import cucumber.api.java.After;\n+import cucumber.api.java.Before;\n+import cucumber.api.java.en.And;\n+import cucumber.api.java.en.Given;\n+import cucumber.api.java.en.Then;\n+import cucumber.api.java.en.When;\n+import cucumber.runtime.java.guice.ScenarioScoped;\n+import org.apache.shiro.SecurityUtils;\n+import org.eclipse.kapua.KapuaException;\n+import org.eclipse.kapua.commons.security.KapuaSecurityUtils;\n+import org.eclipse.kapua.commons.security.KapuaSession;\n+import org.eclipse.kapua.commons.util.xml.XmlUtil;\n+import org.eclipse.kapua.locator.KapuaLocator;\n+import org.eclipse.kapua.qa.common.DBHelper;\n+import org.eclipse.kapua.qa.common.StepData;\n+import org.eclipse.kapua.qa.common.TestBase;\n+import org.eclipse.kapua.qa.common.TestJAXBContextProvider;\n+import org.eclipse.kapua.service.device.call.message.kura.KuraPayload;\n+import org.eclipse.kapua.service.device.call.message.kura.app.response.KuraResponseMessage;\n+import org.eclipse.kapua.service.device.call.message.kura.data.KuraDataChannel;\n+import org.eclipse.kapua.service.device.call.message.kura.data.KuraDataMessage;\n+import org.eclipse.kapua.service.device.call.message.kura.data.KuraDataPayload;\n+import org.eclipse.kapua.translator.Translator;\n+import org.eclipse.kapua.translator.jms.kura.TranslatorDataJmsKura;\n+import org.eclipse.kapua.translator.kura.jms.TranslatorDataKuraJms;\n+import org.eclipse.kapua.translator.kura.mqtt.TranslatorDataKuraMqtt;\n+import org.eclipse.kapua.translator.mqtt.kura.TranslatorDataMqttKura;\n+import org.eclipse.kapua.translator.mqtt.kura.TranslatorResponseMqttKura;\n+import org.eclipse.kapua.transport.message.jms.JmsMessage;\n+import org.eclipse.kapua.transport.message.jms.JmsPayload;\n+import org.eclipse.kapua.transport.message.jms.JmsTopic;\n+import org.eclipse.kapua.transport.message.mqtt.MqttMessage;\n+import org.eclipse.kapua.transport.message.mqtt.MqttPayload;\n+import org.eclipse.kapua.transport.message.mqtt.MqttTopic;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.inject.Inject;\n+import java.util.Date;\n+import java.util.List;\n+\n+/**\n+ * Implementation of Gherkin steps used in TranslatorUnitTests.feature scenarios.\n+ */\n+@ScenarioScoped\n+public class TranslatorSteps extends TestBase {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(TranslatorSteps.class);\n+\n+\n+    private DBHelper database;\n+    private ExampleTranslator exampleTranslator;\n+    private TranslatorDataMqttKura translatorDataMqttKura;\n+    private TranslatorResponseMqttKura translatorResponseMqttKura;\n+    private TranslatorDataKuraMqtt translatorDataKuraMqtt;\n+    private TranslatorDataJmsKura translatorDataJmsKura;\n+    private TranslatorDataKuraJms translatorDataKuraJms;\n+\n+    @Inject\n+    public TranslatorSteps(StepData stepData, DBHelper dbHelper) {\n+\n+        this.stepData = stepData;\n+        this.database = dbHelper;\n+    }\n+\n+    // *************************************\n+    // Definition of Cucumber scenario steps\n+    // *************************************\n+\n+    @Before\n+    public void beforeScenario(Scenario scenario) {\n+\n+        this.scenario = scenario;\n+        database.setup();\n+        stepData.clear();\n+\n+        locator = KapuaLocator.getInstance();\n+        exampleTranslator = new ExampleTranslator();\n+\n+        translatorDataMqttKura = new TranslatorDataMqttKura();\n+        translatorResponseMqttKura = new TranslatorResponseMqttKura();\n+        translatorDataKuraMqtt = new TranslatorDataKuraMqtt();\n+        translatorDataJmsKura = new TranslatorDataJmsKura();\n+        translatorDataKuraJms = new TranslatorDataKuraJms();\n+\n+        if (isUnitTest()) {\n+            // Create KapuaSession using KapuaSecurtiyUtils and kapua-sys user as logged in user.\n+            // All operations on database are performed using system user.\n+            // Only for unit tests. Integration tests assume that a real logon is performed.\n+            KapuaSession kapuaSession = new KapuaSession(null, SYS_SCOPE_ID, SYS_USER_ID);\n+            KapuaSecurityUtils.setSession(kapuaSession);\n+        }\n+\n+        // Setup JAXB context\n+        XmlUtil.setContextProvider(new TestJAXBContextProvider());\n+    }\n+\n+    @After\n+    public void afterScenario() {\n+\n+        // Clean up the database\n+        try {\n+            logger.info(\"Logging out in cleanup\");\n+            if (isIntegrationTest()) {\n+                database.deleteAll();\n+                SecurityUtils.getSubject().logout();\n+            } else {\n+                database.dropAll();\n+                database.close();\n+            }\n+            KapuaSecurityUtils.clearSession();\n+        } catch (Exception e) {\n+            logger.error(\"Failed to log out in @After\", e);\n+        }\n+    }\n+\n+    @Given(\"^I try to translate from \\\"([^\\\"]*)\\\" to \\\"([^\\\"]*)\\\"$\")\n+    public void iFindTranslator(String from, String to) throws Exception {\n+        Class fromClass;\n+        Class toClass;\n+        try {\n+            if (!from.equals(\"\") && !to.equals(\"\")) {\n+                fromClass = Class.forName(from);\n+                toClass = Class.forName(to);\n+            } else {\n+                fromClass = null;\n+                toClass = null;\n+            }\n+            Translator translator = Translator.getTranslatorFor(exampleTranslator.getClass(fromClass), exampleTranslator.getClass(toClass));\n+            stepData.put(\"Translator\", translator);\n+        } catch (Exception ex) {\n+            verifyException(ex);\n+        }\n+    }\n+\n+    @Then(\"^Translator \\\"([^\\\"]*)\\\" is found$\")\n+    public void translatorIsFound(String translatorName) {\n+        Translator translator = (Translator) stepData.get(\"Translator\");\n+        assertEquals(translatorName, translator.getClass().getSimpleName());\n+    }\n+\n+    @Given(\"^I create mqtt message with (?:valid|invalid|empty) payload \\\"([^\\\"]*)\\\" and (?:valid|invalid) topic \\\"([^\\\"]*)\\\"$\")\n+    public void iTryToProvideInvalidTopic(String payload, String topic) {\n+\n+        Date date = new Date();\n+        MqttTopic mqttTopic = new MqttTopic(topic);\n+\n+        KuraPayload kuraPayload = new KuraPayload();\n+        if (payload.equals(\"invalidPayload\") || payload.equals(\"\")) {\n+            kuraPayload.setBody(payload.getBytes());\n+        } else {\n+            kuraPayload.getMetrics().put(payload, 200);\n+        }\n+\n+        MqttPayload mqttPayload = new MqttPayload(kuraPayload.toByteArray());\n+        MqttMessage mqttMessage = new MqttMessage(mqttTopic, date, mqttPayload);\n+\n+        stepData.put(\"MqttMessage\", mqttMessage);\n+    }\n+\n+    @When(\"^I try to translate mqtt response$\")\n+    public void iTryToTranslateMqttResponse() throws Exception {\n+        MqttMessage mqttMessage = (MqttMessage) stepData.get(\"MqttMessage\");\n+\n+        try {\n+            KuraResponseMessage kuraResponseMessage = translatorResponseMqttKura.translate(mqttMessage);\n+            stepData.put(\"KuraResponseMessage\", kuraResponseMessage);\n+        } catch (KapuaException ex) {\n+            verifyException(ex);\n+        }\n+    }\n+\n+    @Then(\"^I got kura response message with \\\"([^\\\"]*)\\\" payload body$\")\n+    public void iGotKuraResponseMessageWithPayloadBody(String payloadType) {\n+        KuraResponseMessage kuraResponseMessage = (KuraResponseMessage) stepData.get(\"KuraResponseMessage\");\n+\n+        assertTrue(kuraResponseMessage.getPayload().getBody().getClass().getSimpleName().equals(payloadType));\n+    }\n+\n+    @Then(\"^I got kura response message with proper payload metrics$\")\n+    public void iGotKuraResponseMessageWithPayloadAndChannelWithAndData() {\n+        KuraResponseMessage kuraResponseMessage = (KuraResponseMessage) stepData.get(\"KuraResponseMessage\");\n+\n+        assertTrue(kuraResponseMessage.getPayload().getMetrics() != null);\n+    }\n+\n+    @Given(\"^I create kura data message with channel with scope \\\"([^\\\"]*)\\\", client id \\\"([^\\\"]*)\\\" and payload without body and metrics$\")\n+    public void iCreateKuraDataMessage(String scope, String clientId) {\n+        KuraDataChannel kuraDataChannel = new KuraDataChannel(scope, clientId);\n+        Date date = new Date();\n+        KuraDataPayload kuraDataPayload = new KuraDataPayload();\n+        KuraDataMessage kuraDataMessage = new KuraDataMessage(kuraDataChannel, date, kuraDataPayload);", "originalCommit": "400eb7bd926531f5b12f378c2c62c5fe8f8e1713", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2d7d0206645175175a1a27a3ca30d84bb82b5188", "changed_code": [{"header": "diff --git a/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java b/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\nindex a748910368..668c0d0291 100644\n--- a/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\n+++ b/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\n", "chunk": "@@ -185,37 +188,46 @@ public class TranslatorSteps extends TestBase {\n     }\n \n     @Then(\"^I got kura response message with \\\"([^\\\"]*)\\\" payload body$\")\n-    public void iGotKuraResponseMessageWithPayloadBody(String payloadType) {\n+    public void kuraResponseMessageWithPayloadBody(String payloadType) {\n         KuraResponseMessage kuraResponseMessage = (KuraResponseMessage) stepData.get(\"KuraResponseMessage\");\n \n         assertTrue(kuraResponseMessage.getPayload().getBody().getClass().getSimpleName().equals(payloadType));\n     }\n \n     @Then(\"^I got kura response message with proper payload metrics$\")\n-    public void iGotKuraResponseMessageWithPayloadAndChannelWithAndData() {\n+    public void kuraResponseMessageWithPayloadAndChannelAndData() {\n         KuraResponseMessage kuraResponseMessage = (KuraResponseMessage) stepData.get(\"KuraResponseMessage\");\n \n         assertTrue(kuraResponseMessage.getPayload().getMetrics() != null);\n     }\n \n     @Given(\"^I create kura data message with channel with scope \\\"([^\\\"]*)\\\", client id \\\"([^\\\"]*)\\\" and payload without body and metrics$\")\n-    public void iCreateKuraDataMessage(String scope, String clientId) {\n-        KuraDataChannel kuraDataChannel = new KuraDataChannel(scope, clientId);\n-        Date date = new Date();\n-        KuraDataPayload kuraDataPayload = new KuraDataPayload();\n-        KuraDataMessage kuraDataMessage = new KuraDataMessage(kuraDataChannel, date, kuraDataPayload);\n-        stepData.put(\"KuraDataMessage\", kuraDataMessage);\n+    public void iCreateKuraDataMessage(String scope, String clientId) throws Exception {\n+        try {\n+            KuraDataChannel kuraDataChannel = new KuraDataChannel(scope, clientId);\n+            Date date = new Date();\n+            KuraDataPayload kuraDataPayload = new KuraDataPayload();\n+            KuraDataMessage kuraDataMessage = new KuraDataMessage(kuraDataChannel, date, kuraDataPayload);\n+            stepData.put(\"KuraDataMessage\", kuraDataMessage);\n+        } catch (Exception ex) {\n+            verifyException(ex);\n+        }\n     }\n \n     @And(\"^I try to translate kura data message to mqtt message$\")\n     public void iTryToTranslateKuraDataMessageToMqttMessage() throws Exception {\n-        KuraDataMessage kuraDataMessage = (KuraDataMessage) stepData.get(\"KuraDataMessage\");\n-        MqttMessage mqttMessage = translatorDataKuraMqtt.translate(kuraDataMessage);\n-        stepData.put(\"MqttMessage\", mqttMessage);\n+        try {\n+            KuraDataMessage kuraDataMessage = (KuraDataMessage) stepData.get(\"KuraDataMessage\");\n+            MqttMessage mqttMessage = translatorDataKuraMqtt.translate(kuraDataMessage);\n+            stepData.put(\"MqttMessage\", mqttMessage);\n+        } catch (Exception ex) {\n+            verifyException(ex);\n+        }\n+\n     }\n \n-    @Then(\"^I got mqtt message with channel with scope \\\"([^\\\"]*)\\\", client id \\\"([^\\\"]*)\\\" and (?:empty body|non empty body)$\")\n-    public void iGotMqttMessageWithChannelWithClientIdScopeAndWithoutMetricsAndBodyInPayload(String scope, String clientId) {\n+    @Then(\"^I get mqtt message with channel with scope \\\"([^\\\"]*)\\\", client id \\\"([^\\\"]*)\\\" and (?:empty body|non empty body)$\")\n+    public void mqttMessageWithChanneScopeClienIDandBody(String scope, String clientId) {\n         MqttMessage mqttMessage = (MqttMessage) stepData.get(\"MqttMessage\");\n \n         String requestTopic = scope.concat(\"/\" + clientId);\n", "next_change": null}]}, "revised_code_in_main": {"commit": "fa85bb5aacb679c2fa90beb7283e28fe27c5b234", "changed_code": [{"header": "diff --git a/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java b/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\nindex a748910368..668c0d0291 100644\n--- a/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\n+++ b/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\n", "chunk": "@@ -185,37 +188,46 @@ public class TranslatorSteps extends TestBase {\n     }\n \n     @Then(\"^I got kura response message with \\\"([^\\\"]*)\\\" payload body$\")\n-    public void iGotKuraResponseMessageWithPayloadBody(String payloadType) {\n+    public void kuraResponseMessageWithPayloadBody(String payloadType) {\n         KuraResponseMessage kuraResponseMessage = (KuraResponseMessage) stepData.get(\"KuraResponseMessage\");\n \n         assertTrue(kuraResponseMessage.getPayload().getBody().getClass().getSimpleName().equals(payloadType));\n     }\n \n     @Then(\"^I got kura response message with proper payload metrics$\")\n-    public void iGotKuraResponseMessageWithPayloadAndChannelWithAndData() {\n+    public void kuraResponseMessageWithPayloadAndChannelAndData() {\n         KuraResponseMessage kuraResponseMessage = (KuraResponseMessage) stepData.get(\"KuraResponseMessage\");\n \n         assertTrue(kuraResponseMessage.getPayload().getMetrics() != null);\n     }\n \n     @Given(\"^I create kura data message with channel with scope \\\"([^\\\"]*)\\\", client id \\\"([^\\\"]*)\\\" and payload without body and metrics$\")\n-    public void iCreateKuraDataMessage(String scope, String clientId) {\n-        KuraDataChannel kuraDataChannel = new KuraDataChannel(scope, clientId);\n-        Date date = new Date();\n-        KuraDataPayload kuraDataPayload = new KuraDataPayload();\n-        KuraDataMessage kuraDataMessage = new KuraDataMessage(kuraDataChannel, date, kuraDataPayload);\n-        stepData.put(\"KuraDataMessage\", kuraDataMessage);\n+    public void iCreateKuraDataMessage(String scope, String clientId) throws Exception {\n+        try {\n+            KuraDataChannel kuraDataChannel = new KuraDataChannel(scope, clientId);\n+            Date date = new Date();\n+            KuraDataPayload kuraDataPayload = new KuraDataPayload();\n+            KuraDataMessage kuraDataMessage = new KuraDataMessage(kuraDataChannel, date, kuraDataPayload);\n+            stepData.put(\"KuraDataMessage\", kuraDataMessage);\n+        } catch (Exception ex) {\n+            verifyException(ex);\n+        }\n     }\n \n     @And(\"^I try to translate kura data message to mqtt message$\")\n     public void iTryToTranslateKuraDataMessageToMqttMessage() throws Exception {\n-        KuraDataMessage kuraDataMessage = (KuraDataMessage) stepData.get(\"KuraDataMessage\");\n-        MqttMessage mqttMessage = translatorDataKuraMqtt.translate(kuraDataMessage);\n-        stepData.put(\"MqttMessage\", mqttMessage);\n+        try {\n+            KuraDataMessage kuraDataMessage = (KuraDataMessage) stepData.get(\"KuraDataMessage\");\n+            MqttMessage mqttMessage = translatorDataKuraMqtt.translate(kuraDataMessage);\n+            stepData.put(\"MqttMessage\", mqttMessage);\n+        } catch (Exception ex) {\n+            verifyException(ex);\n+        }\n+\n     }\n \n-    @Then(\"^I got mqtt message with channel with scope \\\"([^\\\"]*)\\\", client id \\\"([^\\\"]*)\\\" and (?:empty body|non empty body)$\")\n-    public void iGotMqttMessageWithChannelWithClientIdScopeAndWithoutMetricsAndBodyInPayload(String scope, String clientId) {\n+    @Then(\"^I get mqtt message with channel with scope \\\"([^\\\"]*)\\\", client id \\\"([^\\\"]*)\\\" and (?:empty body|non empty body)$\")\n+    public void mqttMessageWithChanneScopeClienIDandBody(String scope, String clientId) {\n         MqttMessage mqttMessage = (MqttMessage) stepData.get(\"MqttMessage\");\n \n         String requestTopic = scope.concat(\"/\" + clientId);\n", "next_change": {"commit": "11ac0a839beb8414bd87fb1c93c90adfca02822b", "changed_code": [{"header": "diff --git a/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java b/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\nindex 668c0d0291..71099fc9c3 100644\n--- a/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\n+++ b/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\n", "chunk": "@@ -231,12 +183,12 @@ public class TranslatorSteps extends TestBase {\n         MqttMessage mqttMessage = (MqttMessage) stepData.get(\"MqttMessage\");\n \n         String requestTopic = scope.concat(\"/\" + clientId);\n-        assertEquals(requestTopic, mqttMessage.getRequestTopic().getTopic());\n+        Assert.assertEquals(requestTopic, mqttMessage.getRequestTopic().getTopic());\n \n         if (mqttMessage.getPayload().getBody().length == 0) {\n-            assertTrue(mqttMessage.getPayload().getBody().length == 0);\n+            Assert.assertTrue(mqttMessage.getPayload().getBody().length == 0);\n         } else {\n-            assertTrue(mqttMessage.getPayload().getBody().length != 0);\n+            Assert.assertTrue(mqttMessage.getPayload().getBody().length != 0);\n         }\n     }\n \n", "next_change": {"commit": "123f51e94d1afdb0fb2210f02f65c9f9e29dfe97", "changed_code": [{"header": "diff --git a/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java b/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\nindex 71099fc9c3..5535f55da2 100644\n--- a/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\n+++ b/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\n", "chunk": "@@ -178,13 +172,11 @@ public class TranslatorSteps extends TestBase {\n \n     }\n \n-    @Then(\"^I get mqtt message with channel with scope \\\"([^\\\"]*)\\\", client id \\\"([^\\\"]*)\\\" and (?:empty body|non empty body)$\")\n+    @Then(\"I get mqtt message with channel with scope {string}, client id {string} and (empty body/non empty body)\")\n     public void mqttMessageWithChanneScopeClienIDandBody(String scope, String clientId) {\n         MqttMessage mqttMessage = (MqttMessage) stepData.get(\"MqttMessage\");\n-\n         String requestTopic = scope.concat(\"/\" + clientId);\n         Assert.assertEquals(requestTopic, mqttMessage.getRequestTopic().getTopic());\n-\n         if (mqttMessage.getPayload().getBody().length == 0) {\n             Assert.assertTrue(mqttMessage.getPayload().getBody().length == 0);\n         } else {\n", "next_change": {"commit": "7a44c34bbf4c060622421c1cfff94e378681b61a", "changed_code": [{"header": "diff --git a/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java b/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\nindex 5535f55da2..aae4d708c4 100644\n--- a/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\n+++ b/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\n", "chunk": "@@ -172,7 +172,7 @@ public class TranslatorSteps extends TestBase {\n \n     }\n \n-    @Then(\"I get mqtt message with channel with scope {string}, client id {string} and (empty body/non empty body)\")\n+    @Then(\"I get mqtt message with channel with scope {string}, client id {string} and (empty body|non empty body)\")\n     public void mqttMessageWithChanneScopeClienIDandBody(String scope, String clientId) {\n         MqttMessage mqttMessage = (MqttMessage) stepData.get(\"MqttMessage\");\n         String requestTopic = scope.concat(\"/\" + clientId);\n", "next_change": {"commit": "b2f2672d9b138ed1bc71ee1baf60069a326733c2", "changed_code": [{"header": "diff --git a/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java b/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\nindex aae4d708c4..10100666f8 100644\n--- a/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\n+++ b/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\n", "chunk": "@@ -173,7 +173,7 @@ public class TranslatorSteps extends TestBase {\n     }\n \n     @Then(\"I get mqtt message with channel with scope {string}, client id {string} and (empty body|non empty body)\")\n-    public void mqttMessageWithChanneScopeClienIDandBody(String scope, String clientId) {\n+    public void mqttMessageWithChannelScopeClientIDAndBody(String scope, String clientId) {\n         MqttMessage mqttMessage = (MqttMessage) stepData.get(\"MqttMessage\");\n         String requestTopic = scope.concat(\"/\" + clientId);\n         Assert.assertEquals(requestTopic, mqttMessage.getRequestTopic().getTopic());\n", "next_change": null}]}}]}}, {"header": "diff --git a/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java b/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\nindex 71099fc9c3..5535f55da2 100644\n--- a/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\n+++ b/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\n", "chunk": "@@ -192,10 +184,9 @@ public class TranslatorSteps extends TestBase {\n         }\n     }\n \n-    @And(\"^I got kura response message channel with \\\"(.+)\\\", \\\"(.+)\\\", \\\"(.+)\\\", \\\"(.+)\\\", \\\"(.+)\\\" and \\\"(.+)\\\" data$\")\n+    @And(\"I got kura response message channel with {string}, {string}, {string}, {string}, {string} and {string} data\")\n     public void kuraResponseMessageWithChannelAndData(String replyPart, String requestId, String appId, String messageClassification, String scope, String clientId) {\n         KuraResponseMessage kuraResponseMessage = (KuraResponseMessage) stepData.get(\"KuraResponseMessage\");\n-\n         Assert.assertTrue(kuraResponseMessage.getChannel().getReplyPart().equals(replyPart));\n         Assert.assertTrue(kuraResponseMessage.getChannel().getRequestId().equals(requestId));\n         Assert.assertTrue(kuraResponseMessage.getChannel().getAppId().equals(appId));\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "fa85bb5aacb679c2fa90beb7283e28fe27c5b234", "message": "Merge commit", "committedDate": null}, {"oid": "9f7bc792c823dcab476a48e34cf1be87ea7801fb", "committedDate": "2020-09-07 11:51:17 +0200", "message": "Added JUnit and I9 tests"}, {"oid": "a7f7240e48238651f4ffe159f5b0867092eb29b0", "committedDate": "2020-11-11 17:13:08 +0100", "message": "Upgrade to EPL-2.0"}, {"oid": "56bacf723fa05f9a6e83f524c9d6d158bf6f2298", "committedDate": "2020-11-11 17:13:11 +0100", "message": "Remove \"All rights reserved.\" from Copyright Headers"}, {"oid": "dd481c52c43202d55fe8f8c3aafdbec933230cb0", "committedDate": "2021-01-02 17:21:55 +0100", "message": "Update Copyright Year to 2021"}, {"oid": "a56f7b5fb1bb53eb407bcfa0b233e48305cbd534", "committedDate": "2021-08-26 09:29:51 +0200", "message": "external camel consumers"}, {"oid": "11ac0a839beb8414bd87fb1c93c90adfca02822b", "committedDate": "2021-08-26 09:29:51 +0200", "message": "external camel consumers"}, {"oid": "213469756f408e3756fc2d4ffe63560ea51cc399", "committedDate": "2021-09-09 14:48:22 +0200", "message": "external camel consumers - upgrade cucumber to 6.10.4"}, {"oid": "123f51e94d1afdb0fb2210f02f65c9f9e29dfe97", "committedDate": "2021-09-09 14:48:22 +0200", "message": "external camel consumers - upgrade cucumber to 6.10.4 - fixed steps/features/tests tags:"}, {"oid": "7a44c34bbf4c060622421c1cfff94e378681b61a", "committedDate": "2022-01-18 12:28:06 +0100", "message": "Fixed wrong syntax in steps"}, {"oid": "b2f2672d9b138ed1bc71ee1baf60069a326733c2", "committedDate": "2022-01-18 12:30:23 +0100", "message": "Fixed typos"}, {"oid": "72adba095b1dd3a8b7f4aa4fb56d2fa2c86a62bb", "committedDate": "2022-02-17 10:17:20 +0100", "message": "Updated copyright headers to 2022"}, {"oid": "5c5acc4009d68195d31608e448966fc433397f66", "committedDate": "2022-11-09 14:56:53 +0100", "message": "Added Configuration Change event handling and improved JMS-Kura translator implementation"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzY0NDI0OA==", "url": "https://github.com/eclipse/kapua/pull/2941#discussion_r413644248", "body": "insert try/catch block, the \"stepdata.put\" part can be left ouside the try/catch.", "bodyText": "insert try/catch block, the \"stepdata.put\" part can be left ouside the try/catch.", "bodyHTML": "<p dir=\"auto\">insert try/catch block, the \"stepdata.put\" part can be left ouside the try/catch.</p>", "author": "LeoNerdoG", "createdAt": "2020-04-23T09:05:31Z", "path": "translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java", "diffHunk": "@@ -0,0 +1,363 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech\n+ *******************************************************************************/\n+package org.eclipse.kapua.translator.test.steps;\n+\n+import cucumber.api.Scenario;\n+import cucumber.api.java.After;\n+import cucumber.api.java.Before;\n+import cucumber.api.java.en.And;\n+import cucumber.api.java.en.Given;\n+import cucumber.api.java.en.Then;\n+import cucumber.api.java.en.When;\n+import cucumber.runtime.java.guice.ScenarioScoped;\n+import org.apache.shiro.SecurityUtils;\n+import org.eclipse.kapua.KapuaException;\n+import org.eclipse.kapua.commons.security.KapuaSecurityUtils;\n+import org.eclipse.kapua.commons.security.KapuaSession;\n+import org.eclipse.kapua.commons.util.xml.XmlUtil;\n+import org.eclipse.kapua.locator.KapuaLocator;\n+import org.eclipse.kapua.qa.common.DBHelper;\n+import org.eclipse.kapua.qa.common.StepData;\n+import org.eclipse.kapua.qa.common.TestBase;\n+import org.eclipse.kapua.qa.common.TestJAXBContextProvider;\n+import org.eclipse.kapua.service.device.call.message.kura.KuraPayload;\n+import org.eclipse.kapua.service.device.call.message.kura.app.response.KuraResponseMessage;\n+import org.eclipse.kapua.service.device.call.message.kura.data.KuraDataChannel;\n+import org.eclipse.kapua.service.device.call.message.kura.data.KuraDataMessage;\n+import org.eclipse.kapua.service.device.call.message.kura.data.KuraDataPayload;\n+import org.eclipse.kapua.translator.Translator;\n+import org.eclipse.kapua.translator.jms.kura.TranslatorDataJmsKura;\n+import org.eclipse.kapua.translator.kura.jms.TranslatorDataKuraJms;\n+import org.eclipse.kapua.translator.kura.mqtt.TranslatorDataKuraMqtt;\n+import org.eclipse.kapua.translator.mqtt.kura.TranslatorDataMqttKura;\n+import org.eclipse.kapua.translator.mqtt.kura.TranslatorResponseMqttKura;\n+import org.eclipse.kapua.transport.message.jms.JmsMessage;\n+import org.eclipse.kapua.transport.message.jms.JmsPayload;\n+import org.eclipse.kapua.transport.message.jms.JmsTopic;\n+import org.eclipse.kapua.transport.message.mqtt.MqttMessage;\n+import org.eclipse.kapua.transport.message.mqtt.MqttPayload;\n+import org.eclipse.kapua.transport.message.mqtt.MqttTopic;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.inject.Inject;\n+import java.util.Date;\n+import java.util.List;\n+\n+/**\n+ * Implementation of Gherkin steps used in TranslatorUnitTests.feature scenarios.\n+ */\n+@ScenarioScoped\n+public class TranslatorSteps extends TestBase {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(TranslatorSteps.class);\n+\n+\n+    private DBHelper database;\n+    private ExampleTranslator exampleTranslator;\n+    private TranslatorDataMqttKura translatorDataMqttKura;\n+    private TranslatorResponseMqttKura translatorResponseMqttKura;\n+    private TranslatorDataKuraMqtt translatorDataKuraMqtt;\n+    private TranslatorDataJmsKura translatorDataJmsKura;\n+    private TranslatorDataKuraJms translatorDataKuraJms;\n+\n+    @Inject\n+    public TranslatorSteps(StepData stepData, DBHelper dbHelper) {\n+\n+        this.stepData = stepData;\n+        this.database = dbHelper;\n+    }\n+\n+    // *************************************\n+    // Definition of Cucumber scenario steps\n+    // *************************************\n+\n+    @Before\n+    public void beforeScenario(Scenario scenario) {\n+\n+        this.scenario = scenario;\n+        database.setup();\n+        stepData.clear();\n+\n+        locator = KapuaLocator.getInstance();\n+        exampleTranslator = new ExampleTranslator();\n+\n+        translatorDataMqttKura = new TranslatorDataMqttKura();\n+        translatorResponseMqttKura = new TranslatorResponseMqttKura();\n+        translatorDataKuraMqtt = new TranslatorDataKuraMqtt();\n+        translatorDataJmsKura = new TranslatorDataJmsKura();\n+        translatorDataKuraJms = new TranslatorDataKuraJms();\n+\n+        if (isUnitTest()) {\n+            // Create KapuaSession using KapuaSecurtiyUtils and kapua-sys user as logged in user.\n+            // All operations on database are performed using system user.\n+            // Only for unit tests. Integration tests assume that a real logon is performed.\n+            KapuaSession kapuaSession = new KapuaSession(null, SYS_SCOPE_ID, SYS_USER_ID);\n+            KapuaSecurityUtils.setSession(kapuaSession);\n+        }\n+\n+        // Setup JAXB context\n+        XmlUtil.setContextProvider(new TestJAXBContextProvider());\n+    }\n+\n+    @After\n+    public void afterScenario() {\n+\n+        // Clean up the database\n+        try {\n+            logger.info(\"Logging out in cleanup\");\n+            if (isIntegrationTest()) {\n+                database.deleteAll();\n+                SecurityUtils.getSubject().logout();\n+            } else {\n+                database.dropAll();\n+                database.close();\n+            }\n+            KapuaSecurityUtils.clearSession();\n+        } catch (Exception e) {\n+            logger.error(\"Failed to log out in @After\", e);\n+        }\n+    }\n+\n+    @Given(\"^I try to translate from \\\"([^\\\"]*)\\\" to \\\"([^\\\"]*)\\\"$\")\n+    public void iFindTranslator(String from, String to) throws Exception {\n+        Class fromClass;\n+        Class toClass;\n+        try {\n+            if (!from.equals(\"\") && !to.equals(\"\")) {\n+                fromClass = Class.forName(from);\n+                toClass = Class.forName(to);\n+            } else {\n+                fromClass = null;\n+                toClass = null;\n+            }\n+            Translator translator = Translator.getTranslatorFor(exampleTranslator.getClass(fromClass), exampleTranslator.getClass(toClass));\n+            stepData.put(\"Translator\", translator);\n+        } catch (Exception ex) {\n+            verifyException(ex);\n+        }\n+    }\n+\n+    @Then(\"^Translator \\\"([^\\\"]*)\\\" is found$\")\n+    public void translatorIsFound(String translatorName) {\n+        Translator translator = (Translator) stepData.get(\"Translator\");\n+        assertEquals(translatorName, translator.getClass().getSimpleName());\n+    }\n+\n+    @Given(\"^I create mqtt message with (?:valid|invalid|empty) payload \\\"([^\\\"]*)\\\" and (?:valid|invalid) topic \\\"([^\\\"]*)\\\"$\")\n+    public void iTryToProvideInvalidTopic(String payload, String topic) {\n+\n+        Date date = new Date();\n+        MqttTopic mqttTopic = new MqttTopic(topic);\n+\n+        KuraPayload kuraPayload = new KuraPayload();\n+        if (payload.equals(\"invalidPayload\") || payload.equals(\"\")) {\n+            kuraPayload.setBody(payload.getBytes());\n+        } else {\n+            kuraPayload.getMetrics().put(payload, 200);\n+        }\n+\n+        MqttPayload mqttPayload = new MqttPayload(kuraPayload.toByteArray());\n+        MqttMessage mqttMessage = new MqttMessage(mqttTopic, date, mqttPayload);\n+\n+        stepData.put(\"MqttMessage\", mqttMessage);\n+    }\n+\n+    @When(\"^I try to translate mqtt response$\")\n+    public void iTryToTranslateMqttResponse() throws Exception {\n+        MqttMessage mqttMessage = (MqttMessage) stepData.get(\"MqttMessage\");\n+\n+        try {\n+            KuraResponseMessage kuraResponseMessage = translatorResponseMqttKura.translate(mqttMessage);\n+            stepData.put(\"KuraResponseMessage\", kuraResponseMessage);\n+        } catch (KapuaException ex) {\n+            verifyException(ex);\n+        }\n+    }\n+\n+    @Then(\"^I got kura response message with \\\"([^\\\"]*)\\\" payload body$\")\n+    public void iGotKuraResponseMessageWithPayloadBody(String payloadType) {\n+        KuraResponseMessage kuraResponseMessage = (KuraResponseMessage) stepData.get(\"KuraResponseMessage\");\n+\n+        assertTrue(kuraResponseMessage.getPayload().getBody().getClass().getSimpleName().equals(payloadType));\n+    }\n+\n+    @Then(\"^I got kura response message with proper payload metrics$\")\n+    public void iGotKuraResponseMessageWithPayloadAndChannelWithAndData() {\n+        KuraResponseMessage kuraResponseMessage = (KuraResponseMessage) stepData.get(\"KuraResponseMessage\");\n+\n+        assertTrue(kuraResponseMessage.getPayload().getMetrics() != null);\n+    }\n+\n+    @Given(\"^I create kura data message with channel with scope \\\"([^\\\"]*)\\\", client id \\\"([^\\\"]*)\\\" and payload without body and metrics$\")\n+    public void iCreateKuraDataMessage(String scope, String clientId) {\n+        KuraDataChannel kuraDataChannel = new KuraDataChannel(scope, clientId);\n+        Date date = new Date();\n+        KuraDataPayload kuraDataPayload = new KuraDataPayload();\n+        KuraDataMessage kuraDataMessage = new KuraDataMessage(kuraDataChannel, date, kuraDataPayload);\n+        stepData.put(\"KuraDataMessage\", kuraDataMessage);\n+    }\n+\n+    @And(\"^I try to translate kura data message to mqtt message$\")\n+    public void iTryToTranslateKuraDataMessageToMqttMessage() throws Exception {\n+        KuraDataMessage kuraDataMessage = (KuraDataMessage) stepData.get(\"KuraDataMessage\");\n+        MqttMessage mqttMessage = translatorDataKuraMqtt.translate(kuraDataMessage);", "originalCommit": "400eb7bd926531f5b12f378c2c62c5fe8f8e1713", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2d7d0206645175175a1a27a3ca30d84bb82b5188", "changed_code": [{"header": "diff --git a/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java b/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\nindex a748910368..668c0d0291 100644\n--- a/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\n+++ b/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\n", "chunk": "@@ -185,37 +188,46 @@ public class TranslatorSteps extends TestBase {\n     }\n \n     @Then(\"^I got kura response message with \\\"([^\\\"]*)\\\" payload body$\")\n-    public void iGotKuraResponseMessageWithPayloadBody(String payloadType) {\n+    public void kuraResponseMessageWithPayloadBody(String payloadType) {\n         KuraResponseMessage kuraResponseMessage = (KuraResponseMessage) stepData.get(\"KuraResponseMessage\");\n \n         assertTrue(kuraResponseMessage.getPayload().getBody().getClass().getSimpleName().equals(payloadType));\n     }\n \n     @Then(\"^I got kura response message with proper payload metrics$\")\n-    public void iGotKuraResponseMessageWithPayloadAndChannelWithAndData() {\n+    public void kuraResponseMessageWithPayloadAndChannelAndData() {\n         KuraResponseMessage kuraResponseMessage = (KuraResponseMessage) stepData.get(\"KuraResponseMessage\");\n \n         assertTrue(kuraResponseMessage.getPayload().getMetrics() != null);\n     }\n \n     @Given(\"^I create kura data message with channel with scope \\\"([^\\\"]*)\\\", client id \\\"([^\\\"]*)\\\" and payload without body and metrics$\")\n-    public void iCreateKuraDataMessage(String scope, String clientId) {\n-        KuraDataChannel kuraDataChannel = new KuraDataChannel(scope, clientId);\n-        Date date = new Date();\n-        KuraDataPayload kuraDataPayload = new KuraDataPayload();\n-        KuraDataMessage kuraDataMessage = new KuraDataMessage(kuraDataChannel, date, kuraDataPayload);\n-        stepData.put(\"KuraDataMessage\", kuraDataMessage);\n+    public void iCreateKuraDataMessage(String scope, String clientId) throws Exception {\n+        try {\n+            KuraDataChannel kuraDataChannel = new KuraDataChannel(scope, clientId);\n+            Date date = new Date();\n+            KuraDataPayload kuraDataPayload = new KuraDataPayload();\n+            KuraDataMessage kuraDataMessage = new KuraDataMessage(kuraDataChannel, date, kuraDataPayload);\n+            stepData.put(\"KuraDataMessage\", kuraDataMessage);\n+        } catch (Exception ex) {\n+            verifyException(ex);\n+        }\n     }\n \n     @And(\"^I try to translate kura data message to mqtt message$\")\n     public void iTryToTranslateKuraDataMessageToMqttMessage() throws Exception {\n-        KuraDataMessage kuraDataMessage = (KuraDataMessage) stepData.get(\"KuraDataMessage\");\n-        MqttMessage mqttMessage = translatorDataKuraMqtt.translate(kuraDataMessage);\n-        stepData.put(\"MqttMessage\", mqttMessage);\n+        try {\n+            KuraDataMessage kuraDataMessage = (KuraDataMessage) stepData.get(\"KuraDataMessage\");\n+            MqttMessage mqttMessage = translatorDataKuraMqtt.translate(kuraDataMessage);\n+            stepData.put(\"MqttMessage\", mqttMessage);\n+        } catch (Exception ex) {\n+            verifyException(ex);\n+        }\n+\n     }\n \n-    @Then(\"^I got mqtt message with channel with scope \\\"([^\\\"]*)\\\", client id \\\"([^\\\"]*)\\\" and (?:empty body|non empty body)$\")\n-    public void iGotMqttMessageWithChannelWithClientIdScopeAndWithoutMetricsAndBodyInPayload(String scope, String clientId) {\n+    @Then(\"^I get mqtt message with channel with scope \\\"([^\\\"]*)\\\", client id \\\"([^\\\"]*)\\\" and (?:empty body|non empty body)$\")\n+    public void mqttMessageWithChanneScopeClienIDandBody(String scope, String clientId) {\n         MqttMessage mqttMessage = (MqttMessage) stepData.get(\"MqttMessage\");\n \n         String requestTopic = scope.concat(\"/\" + clientId);\n", "next_change": null}]}, "revised_code_in_main": {"commit": "fa85bb5aacb679c2fa90beb7283e28fe27c5b234", "changed_code": [{"header": "diff --git a/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java b/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\nindex a748910368..668c0d0291 100644\n--- a/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\n+++ b/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\n", "chunk": "@@ -185,37 +188,46 @@ public class TranslatorSteps extends TestBase {\n     }\n \n     @Then(\"^I got kura response message with \\\"([^\\\"]*)\\\" payload body$\")\n-    public void iGotKuraResponseMessageWithPayloadBody(String payloadType) {\n+    public void kuraResponseMessageWithPayloadBody(String payloadType) {\n         KuraResponseMessage kuraResponseMessage = (KuraResponseMessage) stepData.get(\"KuraResponseMessage\");\n \n         assertTrue(kuraResponseMessage.getPayload().getBody().getClass().getSimpleName().equals(payloadType));\n     }\n \n     @Then(\"^I got kura response message with proper payload metrics$\")\n-    public void iGotKuraResponseMessageWithPayloadAndChannelWithAndData() {\n+    public void kuraResponseMessageWithPayloadAndChannelAndData() {\n         KuraResponseMessage kuraResponseMessage = (KuraResponseMessage) stepData.get(\"KuraResponseMessage\");\n \n         assertTrue(kuraResponseMessage.getPayload().getMetrics() != null);\n     }\n \n     @Given(\"^I create kura data message with channel with scope \\\"([^\\\"]*)\\\", client id \\\"([^\\\"]*)\\\" and payload without body and metrics$\")\n-    public void iCreateKuraDataMessage(String scope, String clientId) {\n-        KuraDataChannel kuraDataChannel = new KuraDataChannel(scope, clientId);\n-        Date date = new Date();\n-        KuraDataPayload kuraDataPayload = new KuraDataPayload();\n-        KuraDataMessage kuraDataMessage = new KuraDataMessage(kuraDataChannel, date, kuraDataPayload);\n-        stepData.put(\"KuraDataMessage\", kuraDataMessage);\n+    public void iCreateKuraDataMessage(String scope, String clientId) throws Exception {\n+        try {\n+            KuraDataChannel kuraDataChannel = new KuraDataChannel(scope, clientId);\n+            Date date = new Date();\n+            KuraDataPayload kuraDataPayload = new KuraDataPayload();\n+            KuraDataMessage kuraDataMessage = new KuraDataMessage(kuraDataChannel, date, kuraDataPayload);\n+            stepData.put(\"KuraDataMessage\", kuraDataMessage);\n+        } catch (Exception ex) {\n+            verifyException(ex);\n+        }\n     }\n \n     @And(\"^I try to translate kura data message to mqtt message$\")\n     public void iTryToTranslateKuraDataMessageToMqttMessage() throws Exception {\n-        KuraDataMessage kuraDataMessage = (KuraDataMessage) stepData.get(\"KuraDataMessage\");\n-        MqttMessage mqttMessage = translatorDataKuraMqtt.translate(kuraDataMessage);\n-        stepData.put(\"MqttMessage\", mqttMessage);\n+        try {\n+            KuraDataMessage kuraDataMessage = (KuraDataMessage) stepData.get(\"KuraDataMessage\");\n+            MqttMessage mqttMessage = translatorDataKuraMqtt.translate(kuraDataMessage);\n+            stepData.put(\"MqttMessage\", mqttMessage);\n+        } catch (Exception ex) {\n+            verifyException(ex);\n+        }\n+\n     }\n \n-    @Then(\"^I got mqtt message with channel with scope \\\"([^\\\"]*)\\\", client id \\\"([^\\\"]*)\\\" and (?:empty body|non empty body)$\")\n-    public void iGotMqttMessageWithChannelWithClientIdScopeAndWithoutMetricsAndBodyInPayload(String scope, String clientId) {\n+    @Then(\"^I get mqtt message with channel with scope \\\"([^\\\"]*)\\\", client id \\\"([^\\\"]*)\\\" and (?:empty body|non empty body)$\")\n+    public void mqttMessageWithChanneScopeClienIDandBody(String scope, String clientId) {\n         MqttMessage mqttMessage = (MqttMessage) stepData.get(\"MqttMessage\");\n \n         String requestTopic = scope.concat(\"/\" + clientId);\n", "next_change": {"commit": "11ac0a839beb8414bd87fb1c93c90adfca02822b", "changed_code": [{"header": "diff --git a/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java b/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\nindex 668c0d0291..71099fc9c3 100644\n--- a/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\n+++ b/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\n", "chunk": "@@ -231,12 +183,12 @@ public class TranslatorSteps extends TestBase {\n         MqttMessage mqttMessage = (MqttMessage) stepData.get(\"MqttMessage\");\n \n         String requestTopic = scope.concat(\"/\" + clientId);\n-        assertEquals(requestTopic, mqttMessage.getRequestTopic().getTopic());\n+        Assert.assertEquals(requestTopic, mqttMessage.getRequestTopic().getTopic());\n \n         if (mqttMessage.getPayload().getBody().length == 0) {\n-            assertTrue(mqttMessage.getPayload().getBody().length == 0);\n+            Assert.assertTrue(mqttMessage.getPayload().getBody().length == 0);\n         } else {\n-            assertTrue(mqttMessage.getPayload().getBody().length != 0);\n+            Assert.assertTrue(mqttMessage.getPayload().getBody().length != 0);\n         }\n     }\n \n", "next_change": {"commit": "123f51e94d1afdb0fb2210f02f65c9f9e29dfe97", "changed_code": [{"header": "diff --git a/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java b/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\nindex 71099fc9c3..5535f55da2 100644\n--- a/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\n+++ b/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\n", "chunk": "@@ -178,13 +172,11 @@ public class TranslatorSteps extends TestBase {\n \n     }\n \n-    @Then(\"^I get mqtt message with channel with scope \\\"([^\\\"]*)\\\", client id \\\"([^\\\"]*)\\\" and (?:empty body|non empty body)$\")\n+    @Then(\"I get mqtt message with channel with scope {string}, client id {string} and (empty body/non empty body)\")\n     public void mqttMessageWithChanneScopeClienIDandBody(String scope, String clientId) {\n         MqttMessage mqttMessage = (MqttMessage) stepData.get(\"MqttMessage\");\n-\n         String requestTopic = scope.concat(\"/\" + clientId);\n         Assert.assertEquals(requestTopic, mqttMessage.getRequestTopic().getTopic());\n-\n         if (mqttMessage.getPayload().getBody().length == 0) {\n             Assert.assertTrue(mqttMessage.getPayload().getBody().length == 0);\n         } else {\n", "next_change": {"commit": "7a44c34bbf4c060622421c1cfff94e378681b61a", "changed_code": [{"header": "diff --git a/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java b/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\nindex 5535f55da2..aae4d708c4 100644\n--- a/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\n+++ b/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\n", "chunk": "@@ -172,7 +172,7 @@ public class TranslatorSteps extends TestBase {\n \n     }\n \n-    @Then(\"I get mqtt message with channel with scope {string}, client id {string} and (empty body/non empty body)\")\n+    @Then(\"I get mqtt message with channel with scope {string}, client id {string} and (empty body|non empty body)\")\n     public void mqttMessageWithChanneScopeClienIDandBody(String scope, String clientId) {\n         MqttMessage mqttMessage = (MqttMessage) stepData.get(\"MqttMessage\");\n         String requestTopic = scope.concat(\"/\" + clientId);\n", "next_change": {"commit": "b2f2672d9b138ed1bc71ee1baf60069a326733c2", "changed_code": [{"header": "diff --git a/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java b/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\nindex aae4d708c4..10100666f8 100644\n--- a/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\n+++ b/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\n", "chunk": "@@ -173,7 +173,7 @@ public class TranslatorSteps extends TestBase {\n     }\n \n     @Then(\"I get mqtt message with channel with scope {string}, client id {string} and (empty body|non empty body)\")\n-    public void mqttMessageWithChanneScopeClienIDandBody(String scope, String clientId) {\n+    public void mqttMessageWithChannelScopeClientIDAndBody(String scope, String clientId) {\n         MqttMessage mqttMessage = (MqttMessage) stepData.get(\"MqttMessage\");\n         String requestTopic = scope.concat(\"/\" + clientId);\n         Assert.assertEquals(requestTopic, mqttMessage.getRequestTopic().getTopic());\n", "next_change": null}]}}]}}, {"header": "diff --git a/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java b/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\nindex 71099fc9c3..5535f55da2 100644\n--- a/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\n+++ b/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\n", "chunk": "@@ -192,10 +184,9 @@ public class TranslatorSteps extends TestBase {\n         }\n     }\n \n-    @And(\"^I got kura response message channel with \\\"(.+)\\\", \\\"(.+)\\\", \\\"(.+)\\\", \\\"(.+)\\\", \\\"(.+)\\\" and \\\"(.+)\\\" data$\")\n+    @And(\"I got kura response message channel with {string}, {string}, {string}, {string}, {string} and {string} data\")\n     public void kuraResponseMessageWithChannelAndData(String replyPart, String requestId, String appId, String messageClassification, String scope, String clientId) {\n         KuraResponseMessage kuraResponseMessage = (KuraResponseMessage) stepData.get(\"KuraResponseMessage\");\n-\n         Assert.assertTrue(kuraResponseMessage.getChannel().getReplyPart().equals(replyPart));\n         Assert.assertTrue(kuraResponseMessage.getChannel().getRequestId().equals(requestId));\n         Assert.assertTrue(kuraResponseMessage.getChannel().getAppId().equals(appId));\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "fa85bb5aacb679c2fa90beb7283e28fe27c5b234", "message": "Merge commit", "committedDate": null}, {"oid": "9f7bc792c823dcab476a48e34cf1be87ea7801fb", "committedDate": "2020-09-07 11:51:17 +0200", "message": "Added JUnit and I9 tests"}, {"oid": "a7f7240e48238651f4ffe159f5b0867092eb29b0", "committedDate": "2020-11-11 17:13:08 +0100", "message": "Upgrade to EPL-2.0"}, {"oid": "56bacf723fa05f9a6e83f524c9d6d158bf6f2298", "committedDate": "2020-11-11 17:13:11 +0100", "message": "Remove \"All rights reserved.\" from Copyright Headers"}, {"oid": "dd481c52c43202d55fe8f8c3aafdbec933230cb0", "committedDate": "2021-01-02 17:21:55 +0100", "message": "Update Copyright Year to 2021"}, {"oid": "a56f7b5fb1bb53eb407bcfa0b233e48305cbd534", "committedDate": "2021-08-26 09:29:51 +0200", "message": "external camel consumers"}, {"oid": "11ac0a839beb8414bd87fb1c93c90adfca02822b", "committedDate": "2021-08-26 09:29:51 +0200", "message": "external camel consumers"}, {"oid": "213469756f408e3756fc2d4ffe63560ea51cc399", "committedDate": "2021-09-09 14:48:22 +0200", "message": "external camel consumers - upgrade cucumber to 6.10.4"}, {"oid": "123f51e94d1afdb0fb2210f02f65c9f9e29dfe97", "committedDate": "2021-09-09 14:48:22 +0200", "message": "external camel consumers - upgrade cucumber to 6.10.4 - fixed steps/features/tests tags:"}, {"oid": "7a44c34bbf4c060622421c1cfff94e378681b61a", "committedDate": "2022-01-18 12:28:06 +0100", "message": "Fixed wrong syntax in steps"}, {"oid": "b2f2672d9b138ed1bc71ee1baf60069a326733c2", "committedDate": "2022-01-18 12:30:23 +0100", "message": "Fixed typos"}, {"oid": "72adba095b1dd3a8b7f4aa4fb56d2fa2c86a62bb", "committedDate": "2022-02-17 10:17:20 +0100", "message": "Updated copyright headers to 2022"}, {"oid": "5c5acc4009d68195d31608e448966fc433397f66", "committedDate": "2022-11-09 14:56:53 +0100", "message": "Added Configuration Change event handling and improved JMS-Kura translator implementation"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzY0NTMwMw==", "url": "https://github.com/eclipse/kapua/pull/2941#discussion_r413645303", "body": "insert try/catch block, the \"stepdata.put\" part can be left ouside the try/catch.", "bodyText": "insert try/catch block, the \"stepdata.put\" part can be left ouside the try/catch.", "bodyHTML": "<p dir=\"auto\">insert try/catch block, the \"stepdata.put\" part can be left ouside the try/catch.</p>", "author": "LeoNerdoG", "createdAt": "2020-04-23T09:06:59Z", "path": "translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java", "diffHunk": "@@ -0,0 +1,363 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech\n+ *******************************************************************************/\n+package org.eclipse.kapua.translator.test.steps;\n+\n+import cucumber.api.Scenario;\n+import cucumber.api.java.After;\n+import cucumber.api.java.Before;\n+import cucumber.api.java.en.And;\n+import cucumber.api.java.en.Given;\n+import cucumber.api.java.en.Then;\n+import cucumber.api.java.en.When;\n+import cucumber.runtime.java.guice.ScenarioScoped;\n+import org.apache.shiro.SecurityUtils;\n+import org.eclipse.kapua.KapuaException;\n+import org.eclipse.kapua.commons.security.KapuaSecurityUtils;\n+import org.eclipse.kapua.commons.security.KapuaSession;\n+import org.eclipse.kapua.commons.util.xml.XmlUtil;\n+import org.eclipse.kapua.locator.KapuaLocator;\n+import org.eclipse.kapua.qa.common.DBHelper;\n+import org.eclipse.kapua.qa.common.StepData;\n+import org.eclipse.kapua.qa.common.TestBase;\n+import org.eclipse.kapua.qa.common.TestJAXBContextProvider;\n+import org.eclipse.kapua.service.device.call.message.kura.KuraPayload;\n+import org.eclipse.kapua.service.device.call.message.kura.app.response.KuraResponseMessage;\n+import org.eclipse.kapua.service.device.call.message.kura.data.KuraDataChannel;\n+import org.eclipse.kapua.service.device.call.message.kura.data.KuraDataMessage;\n+import org.eclipse.kapua.service.device.call.message.kura.data.KuraDataPayload;\n+import org.eclipse.kapua.translator.Translator;\n+import org.eclipse.kapua.translator.jms.kura.TranslatorDataJmsKura;\n+import org.eclipse.kapua.translator.kura.jms.TranslatorDataKuraJms;\n+import org.eclipse.kapua.translator.kura.mqtt.TranslatorDataKuraMqtt;\n+import org.eclipse.kapua.translator.mqtt.kura.TranslatorDataMqttKura;\n+import org.eclipse.kapua.translator.mqtt.kura.TranslatorResponseMqttKura;\n+import org.eclipse.kapua.transport.message.jms.JmsMessage;\n+import org.eclipse.kapua.transport.message.jms.JmsPayload;\n+import org.eclipse.kapua.transport.message.jms.JmsTopic;\n+import org.eclipse.kapua.transport.message.mqtt.MqttMessage;\n+import org.eclipse.kapua.transport.message.mqtt.MqttPayload;\n+import org.eclipse.kapua.transport.message.mqtt.MqttTopic;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.inject.Inject;\n+import java.util.Date;\n+import java.util.List;\n+\n+/**\n+ * Implementation of Gherkin steps used in TranslatorUnitTests.feature scenarios.\n+ */\n+@ScenarioScoped\n+public class TranslatorSteps extends TestBase {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(TranslatorSteps.class);\n+\n+\n+    private DBHelper database;\n+    private ExampleTranslator exampleTranslator;\n+    private TranslatorDataMqttKura translatorDataMqttKura;\n+    private TranslatorResponseMqttKura translatorResponseMqttKura;\n+    private TranslatorDataKuraMqtt translatorDataKuraMqtt;\n+    private TranslatorDataJmsKura translatorDataJmsKura;\n+    private TranslatorDataKuraJms translatorDataKuraJms;\n+\n+    @Inject\n+    public TranslatorSteps(StepData stepData, DBHelper dbHelper) {\n+\n+        this.stepData = stepData;\n+        this.database = dbHelper;\n+    }\n+\n+    // *************************************\n+    // Definition of Cucumber scenario steps\n+    // *************************************\n+\n+    @Before\n+    public void beforeScenario(Scenario scenario) {\n+\n+        this.scenario = scenario;\n+        database.setup();\n+        stepData.clear();\n+\n+        locator = KapuaLocator.getInstance();\n+        exampleTranslator = new ExampleTranslator();\n+\n+        translatorDataMqttKura = new TranslatorDataMqttKura();\n+        translatorResponseMqttKura = new TranslatorResponseMqttKura();\n+        translatorDataKuraMqtt = new TranslatorDataKuraMqtt();\n+        translatorDataJmsKura = new TranslatorDataJmsKura();\n+        translatorDataKuraJms = new TranslatorDataKuraJms();\n+\n+        if (isUnitTest()) {\n+            // Create KapuaSession using KapuaSecurtiyUtils and kapua-sys user as logged in user.\n+            // All operations on database are performed using system user.\n+            // Only for unit tests. Integration tests assume that a real logon is performed.\n+            KapuaSession kapuaSession = new KapuaSession(null, SYS_SCOPE_ID, SYS_USER_ID);\n+            KapuaSecurityUtils.setSession(kapuaSession);\n+        }\n+\n+        // Setup JAXB context\n+        XmlUtil.setContextProvider(new TestJAXBContextProvider());\n+    }\n+\n+    @After\n+    public void afterScenario() {\n+\n+        // Clean up the database\n+        try {\n+            logger.info(\"Logging out in cleanup\");\n+            if (isIntegrationTest()) {\n+                database.deleteAll();\n+                SecurityUtils.getSubject().logout();\n+            } else {\n+                database.dropAll();\n+                database.close();\n+            }\n+            KapuaSecurityUtils.clearSession();\n+        } catch (Exception e) {\n+            logger.error(\"Failed to log out in @After\", e);\n+        }\n+    }\n+\n+    @Given(\"^I try to translate from \\\"([^\\\"]*)\\\" to \\\"([^\\\"]*)\\\"$\")\n+    public void iFindTranslator(String from, String to) throws Exception {\n+        Class fromClass;\n+        Class toClass;\n+        try {\n+            if (!from.equals(\"\") && !to.equals(\"\")) {\n+                fromClass = Class.forName(from);\n+                toClass = Class.forName(to);\n+            } else {\n+                fromClass = null;\n+                toClass = null;\n+            }\n+            Translator translator = Translator.getTranslatorFor(exampleTranslator.getClass(fromClass), exampleTranslator.getClass(toClass));\n+            stepData.put(\"Translator\", translator);\n+        } catch (Exception ex) {\n+            verifyException(ex);\n+        }\n+    }\n+\n+    @Then(\"^Translator \\\"([^\\\"]*)\\\" is found$\")\n+    public void translatorIsFound(String translatorName) {\n+        Translator translator = (Translator) stepData.get(\"Translator\");\n+        assertEquals(translatorName, translator.getClass().getSimpleName());\n+    }\n+\n+    @Given(\"^I create mqtt message with (?:valid|invalid|empty) payload \\\"([^\\\"]*)\\\" and (?:valid|invalid) topic \\\"([^\\\"]*)\\\"$\")\n+    public void iTryToProvideInvalidTopic(String payload, String topic) {\n+\n+        Date date = new Date();\n+        MqttTopic mqttTopic = new MqttTopic(topic);\n+\n+        KuraPayload kuraPayload = new KuraPayload();\n+        if (payload.equals(\"invalidPayload\") || payload.equals(\"\")) {\n+            kuraPayload.setBody(payload.getBytes());\n+        } else {\n+            kuraPayload.getMetrics().put(payload, 200);\n+        }\n+\n+        MqttPayload mqttPayload = new MqttPayload(kuraPayload.toByteArray());\n+        MqttMessage mqttMessage = new MqttMessage(mqttTopic, date, mqttPayload);\n+\n+        stepData.put(\"MqttMessage\", mqttMessage);\n+    }\n+\n+    @When(\"^I try to translate mqtt response$\")\n+    public void iTryToTranslateMqttResponse() throws Exception {\n+        MqttMessage mqttMessage = (MqttMessage) stepData.get(\"MqttMessage\");\n+\n+        try {\n+            KuraResponseMessage kuraResponseMessage = translatorResponseMqttKura.translate(mqttMessage);\n+            stepData.put(\"KuraResponseMessage\", kuraResponseMessage);\n+        } catch (KapuaException ex) {\n+            verifyException(ex);\n+        }\n+    }\n+\n+    @Then(\"^I got kura response message with \\\"([^\\\"]*)\\\" payload body$\")\n+    public void iGotKuraResponseMessageWithPayloadBody(String payloadType) {\n+        KuraResponseMessage kuraResponseMessage = (KuraResponseMessage) stepData.get(\"KuraResponseMessage\");\n+\n+        assertTrue(kuraResponseMessage.getPayload().getBody().getClass().getSimpleName().equals(payloadType));\n+    }\n+\n+    @Then(\"^I got kura response message with proper payload metrics$\")\n+    public void iGotKuraResponseMessageWithPayloadAndChannelWithAndData() {\n+        KuraResponseMessage kuraResponseMessage = (KuraResponseMessage) stepData.get(\"KuraResponseMessage\");\n+\n+        assertTrue(kuraResponseMessage.getPayload().getMetrics() != null);\n+    }\n+\n+    @Given(\"^I create kura data message with channel with scope \\\"([^\\\"]*)\\\", client id \\\"([^\\\"]*)\\\" and payload without body and metrics$\")\n+    public void iCreateKuraDataMessage(String scope, String clientId) {\n+        KuraDataChannel kuraDataChannel = new KuraDataChannel(scope, clientId);\n+        Date date = new Date();\n+        KuraDataPayload kuraDataPayload = new KuraDataPayload();\n+        KuraDataMessage kuraDataMessage = new KuraDataMessage(kuraDataChannel, date, kuraDataPayload);\n+        stepData.put(\"KuraDataMessage\", kuraDataMessage);\n+    }\n+\n+    @And(\"^I try to translate kura data message to mqtt message$\")\n+    public void iTryToTranslateKuraDataMessageToMqttMessage() throws Exception {\n+        KuraDataMessage kuraDataMessage = (KuraDataMessage) stepData.get(\"KuraDataMessage\");\n+        MqttMessage mqttMessage = translatorDataKuraMqtt.translate(kuraDataMessage);\n+        stepData.put(\"MqttMessage\", mqttMessage);\n+    }\n+\n+    @Then(\"^I got mqtt message with channel with scope \\\"([^\\\"]*)\\\", client id \\\"([^\\\"]*)\\\" and (?:empty body|non empty body)$\")\n+    public void iGotMqttMessageWithChannelWithClientIdScopeAndWithoutMetricsAndBodyInPayload(String scope, String clientId) {\n+        MqttMessage mqttMessage = (MqttMessage) stepData.get(\"MqttMessage\");\n+\n+        String requestTopic = scope.concat(\"/\" + clientId);\n+        assertEquals(requestTopic, mqttMessage.getRequestTopic().getTopic());\n+\n+        if (mqttMessage.getPayload().getBody().length == 0) {\n+            assertTrue(mqttMessage.getPayload().getBody().length == 0);\n+        } else {\n+            assertTrue(mqttMessage.getPayload().getBody().length != 0);\n+        }\n+    }\n+\n+    @And(\"^I got kura response message channel with \\\"(.+)\\\", \\\"(.+)\\\", \\\"(.+)\\\", \\\"(.+)\\\", \\\"(.+)\\\" and \\\"(.+)\\\" data$\")\n+    public void iGotKuraResponseMessageChannelWithAndData(String replyPart, String requestId, String appId, String messageClassification, String scope, String clientId) {\n+        KuraResponseMessage kuraResponseMessage = (KuraResponseMessage) stepData.get(\"KuraResponseMessage\");\n+\n+        assertTrue(kuraResponseMessage.getChannel().getReplyPart().equals(replyPart));\n+        assertTrue(kuraResponseMessage.getChannel().getRequestId().equals(requestId));\n+        assertTrue(kuraResponseMessage.getChannel().getAppId().equals(appId));\n+        assertTrue(kuraResponseMessage.getChannel().getMessageClassification().equals(messageClassification));\n+        assertTrue(kuraResponseMessage.getChannel().getScope().equals(scope));\n+        assertTrue(kuraResponseMessage.getChannel().getClientId().equals(clientId));\n+    }\n+\n+    @Given(\"^I create kura data message with channel with scope \\\"([^\\\"]*)\\\", client id \\\"([^\\\"]*)\\\" and payload without body and with metrics$\")\n+    public void iCreateKuraDataMessageWithChannelWithScopeClientIdAndPayloadWithoutBodyAndWithMetrics(String scope, String clientId) {\n+        Date date = new Date();\n+        KuraDataChannel kuraDataChannel = new KuraDataChannel(scope, clientId);\n+        KuraDataPayload kuraDataPayload = new KuraDataPayload();\n+        kuraDataPayload.getMetrics().put(\"response.code\", 200);\n+        KuraDataMessage kuraDataMessage = new KuraDataMessage(kuraDataChannel, date, kuraDataPayload);", "originalCommit": "400eb7bd926531f5b12f378c2c62c5fe8f8e1713", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2d7d0206645175175a1a27a3ca30d84bb82b5188", "changed_code": [{"header": "diff --git a/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java b/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\nindex a748910368..668c0d0291 100644\n--- a/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\n+++ b/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\n", "chunk": "@@ -240,34 +252,44 @@ public class TranslatorSteps extends TestBase {\n         assertTrue(kuraResponseMessage.getChannel().getClientId().equals(clientId));\n     }\n \n-    @Given(\"^I create kura data message with channel with scope \\\"([^\\\"]*)\\\", client id \\\"([^\\\"]*)\\\" and payload without body and with metrics$\")\n-    public void iCreateKuraDataMessageWithChannelWithScopeClientIdAndPayloadWithoutBodyAndWithMetrics(String scope, String clientId) {\n-        Date date = new Date();\n-        KuraDataChannel kuraDataChannel = new KuraDataChannel(scope, clientId);\n-        KuraDataPayload kuraDataPayload = new KuraDataPayload();\n-        kuraDataPayload.getMetrics().put(\"response.code\", 200);\n-        KuraDataMessage kuraDataMessage = new KuraDataMessage(kuraDataChannel, date, kuraDataPayload);\n-\n-        stepData.put(\"KuraDataMessage\", kuraDataMessage);\n+    @Given(\"^I create kura data message with channel with scope \\\"([^\\\"]*)\\\", client id \\\"([^\\\"]*)\\\", valid payload and metrics but without body$\")\n+    public void kuraDataMessageWithoutBodyAndMetrics(String scope, String clientId) throws Exception {\n+        try {\n+            Date date = new Date();\n+            KuraDataChannel kuraDataChannel = new KuraDataChannel(scope, clientId);\n+            KuraDataPayload kuraDataPayload = new KuraDataPayload();\n+            kuraDataPayload.getMetrics().put(\"response.code\", 200);\n+            KuraDataMessage kuraDataMessage = new KuraDataMessage(kuraDataChannel, date, kuraDataPayload);\n+            stepData.put(\"KuraDataMessage\", kuraDataMessage);\n+        } catch (Exception ex) {\n+            verifyException(ex);\n+        }\n     }\n \n     @Given(\"^I create kura data message with channel with scope \\\"([^\\\"]*)\\\", client id \\\"([^\\\"]*)\\\" and payload with body and metrics$\")\n-    public void iCreateKuraDataMessageWithChannelWithScopeClientIdAndPayloadWithBodyAndMetrics(String scope, String clientId) {\n-        Date date = new Date();\n-        KuraDataChannel kuraDataChannel = new KuraDataChannel(scope, clientId);\n-        KuraDataPayload kuraDataPayload = new KuraDataPayload();\n-        kuraDataPayload.setBody(\"Payload\".getBytes());\n-        kuraDataPayload.getMetrics().put(\"response.code\", 200);\n-        KuraDataMessage kuraDataMessage = new KuraDataMessage(kuraDataChannel, date, kuraDataPayload);\n-\n-        stepData.put(\"KuraDataMessage\", kuraDataMessage);\n+    public void fullKuraDataMessage(String scope, String clientId) throws Exception {\n+        try {\n+            Date date = new Date();\n+            KuraDataChannel kuraDataChannel = new KuraDataChannel(scope, clientId);\n+            KuraDataPayload kuraDataPayload = new KuraDataPayload();\n+            kuraDataPayload.setBody(\"Payload\".getBytes());\n+            kuraDataPayload.getMetrics().put(\"response.code\", 200);\n+            KuraDataMessage kuraDataMessage = new KuraDataMessage(kuraDataChannel, date, kuraDataPayload);\n+            stepData.put(\"KuraDataMessage\", kuraDataMessage);\n+        } catch (Exception ex) {\n+            verifyException(ex);\n+        }\n     }\n \n     @Given(\"^I try to translate mqtt message to kura data message$\")\n     public void iTryToTranslateMqttMessageToKuraMessage() throws Exception {\n-        MqttMessage mqttMessage = (MqttMessage) stepData.get(\"MqttMessage\");\n-        KuraDataMessage kuraDataMessage = translatorDataMqttKura.translate(mqttMessage);\n-        stepData.put(\"KuraDataMessage\", kuraDataMessage);\n+        try {\n+            MqttMessage mqttMessage = (MqttMessage) stepData.get(\"MqttMessage\");\n+            KuraDataMessage kuraDataMessage = translatorDataMqttKura.translate(mqttMessage);\n+            stepData.put(\"KuraDataMessage\", kuraDataMessage);\n+        } catch (Exception ex) {\n+            verifyException(ex);\n+        }\n     }\n \n     @Then(\"^I got kura data message with \\\"([^\\\"]*)\\\" payload body$\")\n", "next_change": null}]}, "revised_code_in_main": {"commit": "fa85bb5aacb679c2fa90beb7283e28fe27c5b234", "changed_code": [{"header": "diff --git a/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java b/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\nindex a748910368..668c0d0291 100644\n--- a/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\n+++ b/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\n", "chunk": "@@ -240,34 +252,44 @@ public class TranslatorSteps extends TestBase {\n         assertTrue(kuraResponseMessage.getChannel().getClientId().equals(clientId));\n     }\n \n-    @Given(\"^I create kura data message with channel with scope \\\"([^\\\"]*)\\\", client id \\\"([^\\\"]*)\\\" and payload without body and with metrics$\")\n-    public void iCreateKuraDataMessageWithChannelWithScopeClientIdAndPayloadWithoutBodyAndWithMetrics(String scope, String clientId) {\n-        Date date = new Date();\n-        KuraDataChannel kuraDataChannel = new KuraDataChannel(scope, clientId);\n-        KuraDataPayload kuraDataPayload = new KuraDataPayload();\n-        kuraDataPayload.getMetrics().put(\"response.code\", 200);\n-        KuraDataMessage kuraDataMessage = new KuraDataMessage(kuraDataChannel, date, kuraDataPayload);\n-\n-        stepData.put(\"KuraDataMessage\", kuraDataMessage);\n+    @Given(\"^I create kura data message with channel with scope \\\"([^\\\"]*)\\\", client id \\\"([^\\\"]*)\\\", valid payload and metrics but without body$\")\n+    public void kuraDataMessageWithoutBodyAndMetrics(String scope, String clientId) throws Exception {\n+        try {\n+            Date date = new Date();\n+            KuraDataChannel kuraDataChannel = new KuraDataChannel(scope, clientId);\n+            KuraDataPayload kuraDataPayload = new KuraDataPayload();\n+            kuraDataPayload.getMetrics().put(\"response.code\", 200);\n+            KuraDataMessage kuraDataMessage = new KuraDataMessage(kuraDataChannel, date, kuraDataPayload);\n+            stepData.put(\"KuraDataMessage\", kuraDataMessage);\n+        } catch (Exception ex) {\n+            verifyException(ex);\n+        }\n     }\n \n     @Given(\"^I create kura data message with channel with scope \\\"([^\\\"]*)\\\", client id \\\"([^\\\"]*)\\\" and payload with body and metrics$\")\n-    public void iCreateKuraDataMessageWithChannelWithScopeClientIdAndPayloadWithBodyAndMetrics(String scope, String clientId) {\n-        Date date = new Date();\n-        KuraDataChannel kuraDataChannel = new KuraDataChannel(scope, clientId);\n-        KuraDataPayload kuraDataPayload = new KuraDataPayload();\n-        kuraDataPayload.setBody(\"Payload\".getBytes());\n-        kuraDataPayload.getMetrics().put(\"response.code\", 200);\n-        KuraDataMessage kuraDataMessage = new KuraDataMessage(kuraDataChannel, date, kuraDataPayload);\n-\n-        stepData.put(\"KuraDataMessage\", kuraDataMessage);\n+    public void fullKuraDataMessage(String scope, String clientId) throws Exception {\n+        try {\n+            Date date = new Date();\n+            KuraDataChannel kuraDataChannel = new KuraDataChannel(scope, clientId);\n+            KuraDataPayload kuraDataPayload = new KuraDataPayload();\n+            kuraDataPayload.setBody(\"Payload\".getBytes());\n+            kuraDataPayload.getMetrics().put(\"response.code\", 200);\n+            KuraDataMessage kuraDataMessage = new KuraDataMessage(kuraDataChannel, date, kuraDataPayload);\n+            stepData.put(\"KuraDataMessage\", kuraDataMessage);\n+        } catch (Exception ex) {\n+            verifyException(ex);\n+        }\n     }\n \n     @Given(\"^I try to translate mqtt message to kura data message$\")\n     public void iTryToTranslateMqttMessageToKuraMessage() throws Exception {\n-        MqttMessage mqttMessage = (MqttMessage) stepData.get(\"MqttMessage\");\n-        KuraDataMessage kuraDataMessage = translatorDataMqttKura.translate(mqttMessage);\n-        stepData.put(\"KuraDataMessage\", kuraDataMessage);\n+        try {\n+            MqttMessage mqttMessage = (MqttMessage) stepData.get(\"MqttMessage\");\n+            KuraDataMessage kuraDataMessage = translatorDataMqttKura.translate(mqttMessage);\n+            stepData.put(\"KuraDataMessage\", kuraDataMessage);\n+        } catch (Exception ex) {\n+            verifyException(ex);\n+        }\n     }\n \n     @Then(\"^I got kura data message with \\\"([^\\\"]*)\\\" payload body$\")\n", "next_change": {"commit": "11ac0a839beb8414bd87fb1c93c90adfca02822b", "changed_code": [{"header": "diff --git a/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java b/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\nindex 668c0d0291..71099fc9c3 100644\n--- a/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\n+++ b/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\n", "chunk": "@@ -296,29 +248,29 @@ public class TranslatorSteps extends TestBase {\n     public void iGotKuraDataMessageWithPayloadBody(String payloadType) throws Throwable {\n         KuraDataMessage kuraDataMessage = (KuraDataMessage) stepData.get(\"KuraDataMessage\");\n \n-        assertTrue(kuraDataMessage.getPayload().getBody().getClass().getSimpleName().equals(payloadType));\n+        Assert.assertTrue(kuraDataMessage.getPayload().getBody().getClass().getSimpleName().equals(payloadType));\n     }\n \n     @And(\"^I got kura data message channel with \\\"(.+)\\\" and \\\"(.+)\\\" data$\")\n     public void iGotKuraDataMessageChannelWithAndData(String scope, String clientId) {\n         KuraDataMessage kuraDataMessage = (KuraDataMessage) stepData.get(\"KuraDataMessage\");\n \n-        assertTrue(kuraDataMessage.getChannel().getScope().equals(scope));\n-        assertTrue(kuraDataMessage.getChannel().getClientId().equals(clientId));\n+        Assert.assertTrue(kuraDataMessage.getChannel().getScope().equals(scope));\n+        Assert.assertTrue(kuraDataMessage.getChannel().getClientId().equals(clientId));\n     }\n \n     @Then(\"^I got kura data message with proper payload metrics response code (\\\\d+)$\")\n     public void iGotKuraDataMessageWithProperPayloadMetrics(int responseCode) {\n         KuraDataMessage kuraDataMessage = (KuraDataMessage) stepData.get(\"KuraDataMessage\");\n \n-        assertEquals(kuraDataMessage.getPayload().getMetrics().get(\"response.code\"), responseCode);\n+        Assert.assertEquals(kuraDataMessage.getPayload().getMetrics().get(\"response.code\"), responseCode);\n     }\n \n     @Then(\"^I got kura data message with empty payload$\")\n     public void iGotKuraDataMessageWithEmptyPayload() {\n         KuraDataMessage kuraDataMessage = (KuraDataMessage) stepData.get(\"KuraDataMessage\");\n \n-        assertEquals(null, kuraDataMessage.getPayload().getBody());\n+        Assert.assertEquals(null, kuraDataMessage.getPayload().getBody());\n     }\n \n     @Given(\"^I create jms message with (?:valid|invalid|empty) payload \\\"([^\\\"]*)\\\" and (?:valid|invalid) topic \\\"([^\\\"]*)\\\"$\")\n", "next_change": {"commit": "123f51e94d1afdb0fb2210f02f65c9f9e29dfe97", "changed_code": [{"header": "diff --git a/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java b/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\nindex 71099fc9c3..5535f55da2 100644\n--- a/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\n+++ b/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\n", "chunk": "@@ -244,61 +235,53 @@ public class TranslatorSteps extends TestBase {\n         }\n     }\n \n-    @Then(\"^I got kura data message with \\\"([^\\\"]*)\\\" payload body$\")\n+    @Then(\"I got kura data message with {string} payload body\")\n     public void iGotKuraDataMessageWithPayloadBody(String payloadType) throws Throwable {\n         KuraDataMessage kuraDataMessage = (KuraDataMessage) stepData.get(\"KuraDataMessage\");\n-\n         Assert.assertTrue(kuraDataMessage.getPayload().getBody().getClass().getSimpleName().equals(payloadType));\n     }\n \n-    @And(\"^I got kura data message channel with \\\"(.+)\\\" and \\\"(.+)\\\" data$\")\n+    @And(\"I got kura data message channel with {string} and {string} data\")\n     public void iGotKuraDataMessageChannelWithAndData(String scope, String clientId) {\n         KuraDataMessage kuraDataMessage = (KuraDataMessage) stepData.get(\"KuraDataMessage\");\n-\n         Assert.assertTrue(kuraDataMessage.getChannel().getScope().equals(scope));\n         Assert.assertTrue(kuraDataMessage.getChannel().getClientId().equals(clientId));\n     }\n \n-    @Then(\"^I got kura data message with proper payload metrics response code (\\\\d+)$\")\n+    @Then(\"I got kura data message with proper payload metrics response code {int}\")\n     public void iGotKuraDataMessageWithProperPayloadMetrics(int responseCode) {\n         KuraDataMessage kuraDataMessage = (KuraDataMessage) stepData.get(\"KuraDataMessage\");\n-\n         Assert.assertEquals(kuraDataMessage.getPayload().getMetrics().get(\"response.code\"), responseCode);\n     }\n \n-    @Then(\"^I got kura data message with empty payload$\")\n+    @Then(\"I got kura data message with empty payload\")\n     public void iGotKuraDataMessageWithEmptyPayload() {\n         KuraDataMessage kuraDataMessage = (KuraDataMessage) stepData.get(\"KuraDataMessage\");\n-\n         Assert.assertEquals(null, kuraDataMessage.getPayload().getBody());\n     }\n \n-    @Given(\"^I create jms message with (?:valid|invalid|empty) payload \\\"([^\\\"]*)\\\" and (?:valid|invalid) topic \\\"([^\\\"]*)\\\"$\")\n+    @Given(\"I create jms message with (valid/invalid/empty) payload {string} and (valid/invalid) topic {string}\")\n     public void iCreateJmsMessageWithInvalidPayloadAndInvalidTopic(String payload, String topic) throws Exception {\n         try {\n             Date date = new Date();\n             JmsTopic jmsTopic = new JmsTopic(topic);\n-\n             KuraPayload kuraPayload = new KuraPayload();\n             if (payload.equals(\"invalidPayload\") || payload.equals(\"\")) {\n                 kuraPayload.setBody(payload.getBytes());\n             } else {\n                 kuraPayload.getMetrics().put(payload, 200);\n             }\n-\n             JmsPayload jmsPayload = new JmsPayload(kuraPayload.toByteArray());\n             JmsMessage jmsMessage = new JmsMessage(jmsTopic, date, jmsPayload);\n-\n             stepData.put(\"JmsMessage\", jmsMessage);\n         } catch (Exception ex) {\n             verifyException(ex);\n         }\n     }\n \n-    @And(\"^I try to translate jms message to kura data message$\")\n+    @And(\"I try to translate jms message to kura data message\")\n     public void iTryToTranslateJmsMessageToKuraMessage() throws Exception {\n         JmsMessage jmsMessage = (JmsMessage) stepData.get(\"JmsMessage\");\n-\n         try {\n             KuraDataMessage kuraDataMessage = translatorDataJmsKura.translate(jmsMessage);\n             stepData.put(\"KuraDataMessage\", kuraDataMessage);\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "fa85bb5aacb679c2fa90beb7283e28fe27c5b234", "message": "Merge commit", "committedDate": null}, {"oid": "9f7bc792c823dcab476a48e34cf1be87ea7801fb", "committedDate": "2020-09-07 11:51:17 +0200", "message": "Added JUnit and I9 tests"}, {"oid": "a7f7240e48238651f4ffe159f5b0867092eb29b0", "committedDate": "2020-11-11 17:13:08 +0100", "message": "Upgrade to EPL-2.0"}, {"oid": "56bacf723fa05f9a6e83f524c9d6d158bf6f2298", "committedDate": "2020-11-11 17:13:11 +0100", "message": "Remove \"All rights reserved.\" from Copyright Headers"}, {"oid": "dd481c52c43202d55fe8f8c3aafdbec933230cb0", "committedDate": "2021-01-02 17:21:55 +0100", "message": "Update Copyright Year to 2021"}, {"oid": "a56f7b5fb1bb53eb407bcfa0b233e48305cbd534", "committedDate": "2021-08-26 09:29:51 +0200", "message": "external camel consumers"}, {"oid": "11ac0a839beb8414bd87fb1c93c90adfca02822b", "committedDate": "2021-08-26 09:29:51 +0200", "message": "external camel consumers"}, {"oid": "213469756f408e3756fc2d4ffe63560ea51cc399", "committedDate": "2021-09-09 14:48:22 +0200", "message": "external camel consumers - upgrade cucumber to 6.10.4"}, {"oid": "123f51e94d1afdb0fb2210f02f65c9f9e29dfe97", "committedDate": "2021-09-09 14:48:22 +0200", "message": "external camel consumers - upgrade cucumber to 6.10.4 - fixed steps/features/tests tags:"}, {"oid": "7a44c34bbf4c060622421c1cfff94e378681b61a", "committedDate": "2022-01-18 12:28:06 +0100", "message": "Fixed wrong syntax in steps"}, {"oid": "b2f2672d9b138ed1bc71ee1baf60069a326733c2", "committedDate": "2022-01-18 12:30:23 +0100", "message": "Fixed typos"}, {"oid": "72adba095b1dd3a8b7f4aa4fb56d2fa2c86a62bb", "committedDate": "2022-02-17 10:17:20 +0100", "message": "Updated copyright headers to 2022"}, {"oid": "5c5acc4009d68195d31608e448966fc433397f66", "committedDate": "2022-11-09 14:56:53 +0100", "message": "Added Configuration Change event handling and improved JMS-Kura translator implementation"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzY0NTkxNw==", "url": "https://github.com/eclipse/kapua/pull/2941#discussion_r413645917", "body": "insert try/catch block, the \"stepdata.put\" part can be left ouside the try/catch.", "bodyText": "insert try/catch block, the \"stepdata.put\" part can be left ouside the try/catch.", "bodyHTML": "<p dir=\"auto\">insert try/catch block, the \"stepdata.put\" part can be left ouside the try/catch.</p>", "author": "LeoNerdoG", "createdAt": "2020-04-23T09:07:51Z", "path": "translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java", "diffHunk": "@@ -0,0 +1,363 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech\n+ *******************************************************************************/\n+package org.eclipse.kapua.translator.test.steps;\n+\n+import cucumber.api.Scenario;\n+import cucumber.api.java.After;\n+import cucumber.api.java.Before;\n+import cucumber.api.java.en.And;\n+import cucumber.api.java.en.Given;\n+import cucumber.api.java.en.Then;\n+import cucumber.api.java.en.When;\n+import cucumber.runtime.java.guice.ScenarioScoped;\n+import org.apache.shiro.SecurityUtils;\n+import org.eclipse.kapua.KapuaException;\n+import org.eclipse.kapua.commons.security.KapuaSecurityUtils;\n+import org.eclipse.kapua.commons.security.KapuaSession;\n+import org.eclipse.kapua.commons.util.xml.XmlUtil;\n+import org.eclipse.kapua.locator.KapuaLocator;\n+import org.eclipse.kapua.qa.common.DBHelper;\n+import org.eclipse.kapua.qa.common.StepData;\n+import org.eclipse.kapua.qa.common.TestBase;\n+import org.eclipse.kapua.qa.common.TestJAXBContextProvider;\n+import org.eclipse.kapua.service.device.call.message.kura.KuraPayload;\n+import org.eclipse.kapua.service.device.call.message.kura.app.response.KuraResponseMessage;\n+import org.eclipse.kapua.service.device.call.message.kura.data.KuraDataChannel;\n+import org.eclipse.kapua.service.device.call.message.kura.data.KuraDataMessage;\n+import org.eclipse.kapua.service.device.call.message.kura.data.KuraDataPayload;\n+import org.eclipse.kapua.translator.Translator;\n+import org.eclipse.kapua.translator.jms.kura.TranslatorDataJmsKura;\n+import org.eclipse.kapua.translator.kura.jms.TranslatorDataKuraJms;\n+import org.eclipse.kapua.translator.kura.mqtt.TranslatorDataKuraMqtt;\n+import org.eclipse.kapua.translator.mqtt.kura.TranslatorDataMqttKura;\n+import org.eclipse.kapua.translator.mqtt.kura.TranslatorResponseMqttKura;\n+import org.eclipse.kapua.transport.message.jms.JmsMessage;\n+import org.eclipse.kapua.transport.message.jms.JmsPayload;\n+import org.eclipse.kapua.transport.message.jms.JmsTopic;\n+import org.eclipse.kapua.transport.message.mqtt.MqttMessage;\n+import org.eclipse.kapua.transport.message.mqtt.MqttPayload;\n+import org.eclipse.kapua.transport.message.mqtt.MqttTopic;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.inject.Inject;\n+import java.util.Date;\n+import java.util.List;\n+\n+/**\n+ * Implementation of Gherkin steps used in TranslatorUnitTests.feature scenarios.\n+ */\n+@ScenarioScoped\n+public class TranslatorSteps extends TestBase {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(TranslatorSteps.class);\n+\n+\n+    private DBHelper database;\n+    private ExampleTranslator exampleTranslator;\n+    private TranslatorDataMqttKura translatorDataMqttKura;\n+    private TranslatorResponseMqttKura translatorResponseMqttKura;\n+    private TranslatorDataKuraMqtt translatorDataKuraMqtt;\n+    private TranslatorDataJmsKura translatorDataJmsKura;\n+    private TranslatorDataKuraJms translatorDataKuraJms;\n+\n+    @Inject\n+    public TranslatorSteps(StepData stepData, DBHelper dbHelper) {\n+\n+        this.stepData = stepData;\n+        this.database = dbHelper;\n+    }\n+\n+    // *************************************\n+    // Definition of Cucumber scenario steps\n+    // *************************************\n+\n+    @Before\n+    public void beforeScenario(Scenario scenario) {\n+\n+        this.scenario = scenario;\n+        database.setup();\n+        stepData.clear();\n+\n+        locator = KapuaLocator.getInstance();\n+        exampleTranslator = new ExampleTranslator();\n+\n+        translatorDataMqttKura = new TranslatorDataMqttKura();\n+        translatorResponseMqttKura = new TranslatorResponseMqttKura();\n+        translatorDataKuraMqtt = new TranslatorDataKuraMqtt();\n+        translatorDataJmsKura = new TranslatorDataJmsKura();\n+        translatorDataKuraJms = new TranslatorDataKuraJms();\n+\n+        if (isUnitTest()) {\n+            // Create KapuaSession using KapuaSecurtiyUtils and kapua-sys user as logged in user.\n+            // All operations on database are performed using system user.\n+            // Only for unit tests. Integration tests assume that a real logon is performed.\n+            KapuaSession kapuaSession = new KapuaSession(null, SYS_SCOPE_ID, SYS_USER_ID);\n+            KapuaSecurityUtils.setSession(kapuaSession);\n+        }\n+\n+        // Setup JAXB context\n+        XmlUtil.setContextProvider(new TestJAXBContextProvider());\n+    }\n+\n+    @After\n+    public void afterScenario() {\n+\n+        // Clean up the database\n+        try {\n+            logger.info(\"Logging out in cleanup\");\n+            if (isIntegrationTest()) {\n+                database.deleteAll();\n+                SecurityUtils.getSubject().logout();\n+            } else {\n+                database.dropAll();\n+                database.close();\n+            }\n+            KapuaSecurityUtils.clearSession();\n+        } catch (Exception e) {\n+            logger.error(\"Failed to log out in @After\", e);\n+        }\n+    }\n+\n+    @Given(\"^I try to translate from \\\"([^\\\"]*)\\\" to \\\"([^\\\"]*)\\\"$\")\n+    public void iFindTranslator(String from, String to) throws Exception {\n+        Class fromClass;\n+        Class toClass;\n+        try {\n+            if (!from.equals(\"\") && !to.equals(\"\")) {\n+                fromClass = Class.forName(from);\n+                toClass = Class.forName(to);\n+            } else {\n+                fromClass = null;\n+                toClass = null;\n+            }\n+            Translator translator = Translator.getTranslatorFor(exampleTranslator.getClass(fromClass), exampleTranslator.getClass(toClass));\n+            stepData.put(\"Translator\", translator);\n+        } catch (Exception ex) {\n+            verifyException(ex);\n+        }\n+    }\n+\n+    @Then(\"^Translator \\\"([^\\\"]*)\\\" is found$\")\n+    public void translatorIsFound(String translatorName) {\n+        Translator translator = (Translator) stepData.get(\"Translator\");\n+        assertEquals(translatorName, translator.getClass().getSimpleName());\n+    }\n+\n+    @Given(\"^I create mqtt message with (?:valid|invalid|empty) payload \\\"([^\\\"]*)\\\" and (?:valid|invalid) topic \\\"([^\\\"]*)\\\"$\")\n+    public void iTryToProvideInvalidTopic(String payload, String topic) {\n+\n+        Date date = new Date();\n+        MqttTopic mqttTopic = new MqttTopic(topic);\n+\n+        KuraPayload kuraPayload = new KuraPayload();\n+        if (payload.equals(\"invalidPayload\") || payload.equals(\"\")) {\n+            kuraPayload.setBody(payload.getBytes());\n+        } else {\n+            kuraPayload.getMetrics().put(payload, 200);\n+        }\n+\n+        MqttPayload mqttPayload = new MqttPayload(kuraPayload.toByteArray());\n+        MqttMessage mqttMessage = new MqttMessage(mqttTopic, date, mqttPayload);\n+\n+        stepData.put(\"MqttMessage\", mqttMessage);\n+    }\n+\n+    @When(\"^I try to translate mqtt response$\")\n+    public void iTryToTranslateMqttResponse() throws Exception {\n+        MqttMessage mqttMessage = (MqttMessage) stepData.get(\"MqttMessage\");\n+\n+        try {\n+            KuraResponseMessage kuraResponseMessage = translatorResponseMqttKura.translate(mqttMessage);\n+            stepData.put(\"KuraResponseMessage\", kuraResponseMessage);\n+        } catch (KapuaException ex) {\n+            verifyException(ex);\n+        }\n+    }\n+\n+    @Then(\"^I got kura response message with \\\"([^\\\"]*)\\\" payload body$\")\n+    public void iGotKuraResponseMessageWithPayloadBody(String payloadType) {\n+        KuraResponseMessage kuraResponseMessage = (KuraResponseMessage) stepData.get(\"KuraResponseMessage\");\n+\n+        assertTrue(kuraResponseMessage.getPayload().getBody().getClass().getSimpleName().equals(payloadType));\n+    }\n+\n+    @Then(\"^I got kura response message with proper payload metrics$\")\n+    public void iGotKuraResponseMessageWithPayloadAndChannelWithAndData() {\n+        KuraResponseMessage kuraResponseMessage = (KuraResponseMessage) stepData.get(\"KuraResponseMessage\");\n+\n+        assertTrue(kuraResponseMessage.getPayload().getMetrics() != null);\n+    }\n+\n+    @Given(\"^I create kura data message with channel with scope \\\"([^\\\"]*)\\\", client id \\\"([^\\\"]*)\\\" and payload without body and metrics$\")\n+    public void iCreateKuraDataMessage(String scope, String clientId) {\n+        KuraDataChannel kuraDataChannel = new KuraDataChannel(scope, clientId);\n+        Date date = new Date();\n+        KuraDataPayload kuraDataPayload = new KuraDataPayload();\n+        KuraDataMessage kuraDataMessage = new KuraDataMessage(kuraDataChannel, date, kuraDataPayload);\n+        stepData.put(\"KuraDataMessage\", kuraDataMessage);\n+    }\n+\n+    @And(\"^I try to translate kura data message to mqtt message$\")\n+    public void iTryToTranslateKuraDataMessageToMqttMessage() throws Exception {\n+        KuraDataMessage kuraDataMessage = (KuraDataMessage) stepData.get(\"KuraDataMessage\");\n+        MqttMessage mqttMessage = translatorDataKuraMqtt.translate(kuraDataMessage);\n+        stepData.put(\"MqttMessage\", mqttMessage);\n+    }\n+\n+    @Then(\"^I got mqtt message with channel with scope \\\"([^\\\"]*)\\\", client id \\\"([^\\\"]*)\\\" and (?:empty body|non empty body)$\")\n+    public void iGotMqttMessageWithChannelWithClientIdScopeAndWithoutMetricsAndBodyInPayload(String scope, String clientId) {\n+        MqttMessage mqttMessage = (MqttMessage) stepData.get(\"MqttMessage\");\n+\n+        String requestTopic = scope.concat(\"/\" + clientId);\n+        assertEquals(requestTopic, mqttMessage.getRequestTopic().getTopic());\n+\n+        if (mqttMessage.getPayload().getBody().length == 0) {\n+            assertTrue(mqttMessage.getPayload().getBody().length == 0);\n+        } else {\n+            assertTrue(mqttMessage.getPayload().getBody().length != 0);\n+        }\n+    }\n+\n+    @And(\"^I got kura response message channel with \\\"(.+)\\\", \\\"(.+)\\\", \\\"(.+)\\\", \\\"(.+)\\\", \\\"(.+)\\\" and \\\"(.+)\\\" data$\")\n+    public void iGotKuraResponseMessageChannelWithAndData(String replyPart, String requestId, String appId, String messageClassification, String scope, String clientId) {\n+        KuraResponseMessage kuraResponseMessage = (KuraResponseMessage) stepData.get(\"KuraResponseMessage\");\n+\n+        assertTrue(kuraResponseMessage.getChannel().getReplyPart().equals(replyPart));\n+        assertTrue(kuraResponseMessage.getChannel().getRequestId().equals(requestId));\n+        assertTrue(kuraResponseMessage.getChannel().getAppId().equals(appId));\n+        assertTrue(kuraResponseMessage.getChannel().getMessageClassification().equals(messageClassification));\n+        assertTrue(kuraResponseMessage.getChannel().getScope().equals(scope));\n+        assertTrue(kuraResponseMessage.getChannel().getClientId().equals(clientId));\n+    }\n+\n+    @Given(\"^I create kura data message with channel with scope \\\"([^\\\"]*)\\\", client id \\\"([^\\\"]*)\\\" and payload without body and with metrics$\")\n+    public void iCreateKuraDataMessageWithChannelWithScopeClientIdAndPayloadWithoutBodyAndWithMetrics(String scope, String clientId) {\n+        Date date = new Date();\n+        KuraDataChannel kuraDataChannel = new KuraDataChannel(scope, clientId);\n+        KuraDataPayload kuraDataPayload = new KuraDataPayload();\n+        kuraDataPayload.getMetrics().put(\"response.code\", 200);\n+        KuraDataMessage kuraDataMessage = new KuraDataMessage(kuraDataChannel, date, kuraDataPayload);\n+\n+        stepData.put(\"KuraDataMessage\", kuraDataMessage);\n+    }\n+\n+    @Given(\"^I create kura data message with channel with scope \\\"([^\\\"]*)\\\", client id \\\"([^\\\"]*)\\\" and payload with body and metrics$\")\n+    public void iCreateKuraDataMessageWithChannelWithScopeClientIdAndPayloadWithBodyAndMetrics(String scope, String clientId) {\n+        Date date = new Date();\n+        KuraDataChannel kuraDataChannel = new KuraDataChannel(scope, clientId);\n+        KuraDataPayload kuraDataPayload = new KuraDataPayload();\n+        kuraDataPayload.setBody(\"Payload\".getBytes());\n+        kuraDataPayload.getMetrics().put(\"response.code\", 200);\n+        KuraDataMessage kuraDataMessage = new KuraDataMessage(kuraDataChannel, date, kuraDataPayload);", "originalCommit": "400eb7bd926531f5b12f378c2c62c5fe8f8e1713", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2d7d0206645175175a1a27a3ca30d84bb82b5188", "changed_code": [{"header": "diff --git a/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java b/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\nindex a748910368..668c0d0291 100644\n--- a/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\n+++ b/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\n", "chunk": "@@ -240,34 +252,44 @@ public class TranslatorSteps extends TestBase {\n         assertTrue(kuraResponseMessage.getChannel().getClientId().equals(clientId));\n     }\n \n-    @Given(\"^I create kura data message with channel with scope \\\"([^\\\"]*)\\\", client id \\\"([^\\\"]*)\\\" and payload without body and with metrics$\")\n-    public void iCreateKuraDataMessageWithChannelWithScopeClientIdAndPayloadWithoutBodyAndWithMetrics(String scope, String clientId) {\n-        Date date = new Date();\n-        KuraDataChannel kuraDataChannel = new KuraDataChannel(scope, clientId);\n-        KuraDataPayload kuraDataPayload = new KuraDataPayload();\n-        kuraDataPayload.getMetrics().put(\"response.code\", 200);\n-        KuraDataMessage kuraDataMessage = new KuraDataMessage(kuraDataChannel, date, kuraDataPayload);\n-\n-        stepData.put(\"KuraDataMessage\", kuraDataMessage);\n+    @Given(\"^I create kura data message with channel with scope \\\"([^\\\"]*)\\\", client id \\\"([^\\\"]*)\\\", valid payload and metrics but without body$\")\n+    public void kuraDataMessageWithoutBodyAndMetrics(String scope, String clientId) throws Exception {\n+        try {\n+            Date date = new Date();\n+            KuraDataChannel kuraDataChannel = new KuraDataChannel(scope, clientId);\n+            KuraDataPayload kuraDataPayload = new KuraDataPayload();\n+            kuraDataPayload.getMetrics().put(\"response.code\", 200);\n+            KuraDataMessage kuraDataMessage = new KuraDataMessage(kuraDataChannel, date, kuraDataPayload);\n+            stepData.put(\"KuraDataMessage\", kuraDataMessage);\n+        } catch (Exception ex) {\n+            verifyException(ex);\n+        }\n     }\n \n     @Given(\"^I create kura data message with channel with scope \\\"([^\\\"]*)\\\", client id \\\"([^\\\"]*)\\\" and payload with body and metrics$\")\n-    public void iCreateKuraDataMessageWithChannelWithScopeClientIdAndPayloadWithBodyAndMetrics(String scope, String clientId) {\n-        Date date = new Date();\n-        KuraDataChannel kuraDataChannel = new KuraDataChannel(scope, clientId);\n-        KuraDataPayload kuraDataPayload = new KuraDataPayload();\n-        kuraDataPayload.setBody(\"Payload\".getBytes());\n-        kuraDataPayload.getMetrics().put(\"response.code\", 200);\n-        KuraDataMessage kuraDataMessage = new KuraDataMessage(kuraDataChannel, date, kuraDataPayload);\n-\n-        stepData.put(\"KuraDataMessage\", kuraDataMessage);\n+    public void fullKuraDataMessage(String scope, String clientId) throws Exception {\n+        try {\n+            Date date = new Date();\n+            KuraDataChannel kuraDataChannel = new KuraDataChannel(scope, clientId);\n+            KuraDataPayload kuraDataPayload = new KuraDataPayload();\n+            kuraDataPayload.setBody(\"Payload\".getBytes());\n+            kuraDataPayload.getMetrics().put(\"response.code\", 200);\n+            KuraDataMessage kuraDataMessage = new KuraDataMessage(kuraDataChannel, date, kuraDataPayload);\n+            stepData.put(\"KuraDataMessage\", kuraDataMessage);\n+        } catch (Exception ex) {\n+            verifyException(ex);\n+        }\n     }\n \n     @Given(\"^I try to translate mqtt message to kura data message$\")\n     public void iTryToTranslateMqttMessageToKuraMessage() throws Exception {\n-        MqttMessage mqttMessage = (MqttMessage) stepData.get(\"MqttMessage\");\n-        KuraDataMessage kuraDataMessage = translatorDataMqttKura.translate(mqttMessage);\n-        stepData.put(\"KuraDataMessage\", kuraDataMessage);\n+        try {\n+            MqttMessage mqttMessage = (MqttMessage) stepData.get(\"MqttMessage\");\n+            KuraDataMessage kuraDataMessage = translatorDataMqttKura.translate(mqttMessage);\n+            stepData.put(\"KuraDataMessage\", kuraDataMessage);\n+        } catch (Exception ex) {\n+            verifyException(ex);\n+        }\n     }\n \n     @Then(\"^I got kura data message with \\\"([^\\\"]*)\\\" payload body$\")\n", "next_change": null}]}, "revised_code_in_main": {"commit": "fa85bb5aacb679c2fa90beb7283e28fe27c5b234", "changed_code": [{"header": "diff --git a/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java b/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\nindex a748910368..668c0d0291 100644\n--- a/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\n+++ b/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\n", "chunk": "@@ -240,34 +252,44 @@ public class TranslatorSteps extends TestBase {\n         assertTrue(kuraResponseMessage.getChannel().getClientId().equals(clientId));\n     }\n \n-    @Given(\"^I create kura data message with channel with scope \\\"([^\\\"]*)\\\", client id \\\"([^\\\"]*)\\\" and payload without body and with metrics$\")\n-    public void iCreateKuraDataMessageWithChannelWithScopeClientIdAndPayloadWithoutBodyAndWithMetrics(String scope, String clientId) {\n-        Date date = new Date();\n-        KuraDataChannel kuraDataChannel = new KuraDataChannel(scope, clientId);\n-        KuraDataPayload kuraDataPayload = new KuraDataPayload();\n-        kuraDataPayload.getMetrics().put(\"response.code\", 200);\n-        KuraDataMessage kuraDataMessage = new KuraDataMessage(kuraDataChannel, date, kuraDataPayload);\n-\n-        stepData.put(\"KuraDataMessage\", kuraDataMessage);\n+    @Given(\"^I create kura data message with channel with scope \\\"([^\\\"]*)\\\", client id \\\"([^\\\"]*)\\\", valid payload and metrics but without body$\")\n+    public void kuraDataMessageWithoutBodyAndMetrics(String scope, String clientId) throws Exception {\n+        try {\n+            Date date = new Date();\n+            KuraDataChannel kuraDataChannel = new KuraDataChannel(scope, clientId);\n+            KuraDataPayload kuraDataPayload = new KuraDataPayload();\n+            kuraDataPayload.getMetrics().put(\"response.code\", 200);\n+            KuraDataMessage kuraDataMessage = new KuraDataMessage(kuraDataChannel, date, kuraDataPayload);\n+            stepData.put(\"KuraDataMessage\", kuraDataMessage);\n+        } catch (Exception ex) {\n+            verifyException(ex);\n+        }\n     }\n \n     @Given(\"^I create kura data message with channel with scope \\\"([^\\\"]*)\\\", client id \\\"([^\\\"]*)\\\" and payload with body and metrics$\")\n-    public void iCreateKuraDataMessageWithChannelWithScopeClientIdAndPayloadWithBodyAndMetrics(String scope, String clientId) {\n-        Date date = new Date();\n-        KuraDataChannel kuraDataChannel = new KuraDataChannel(scope, clientId);\n-        KuraDataPayload kuraDataPayload = new KuraDataPayload();\n-        kuraDataPayload.setBody(\"Payload\".getBytes());\n-        kuraDataPayload.getMetrics().put(\"response.code\", 200);\n-        KuraDataMessage kuraDataMessage = new KuraDataMessage(kuraDataChannel, date, kuraDataPayload);\n-\n-        stepData.put(\"KuraDataMessage\", kuraDataMessage);\n+    public void fullKuraDataMessage(String scope, String clientId) throws Exception {\n+        try {\n+            Date date = new Date();\n+            KuraDataChannel kuraDataChannel = new KuraDataChannel(scope, clientId);\n+            KuraDataPayload kuraDataPayload = new KuraDataPayload();\n+            kuraDataPayload.setBody(\"Payload\".getBytes());\n+            kuraDataPayload.getMetrics().put(\"response.code\", 200);\n+            KuraDataMessage kuraDataMessage = new KuraDataMessage(kuraDataChannel, date, kuraDataPayload);\n+            stepData.put(\"KuraDataMessage\", kuraDataMessage);\n+        } catch (Exception ex) {\n+            verifyException(ex);\n+        }\n     }\n \n     @Given(\"^I try to translate mqtt message to kura data message$\")\n     public void iTryToTranslateMqttMessageToKuraMessage() throws Exception {\n-        MqttMessage mqttMessage = (MqttMessage) stepData.get(\"MqttMessage\");\n-        KuraDataMessage kuraDataMessage = translatorDataMqttKura.translate(mqttMessage);\n-        stepData.put(\"KuraDataMessage\", kuraDataMessage);\n+        try {\n+            MqttMessage mqttMessage = (MqttMessage) stepData.get(\"MqttMessage\");\n+            KuraDataMessage kuraDataMessage = translatorDataMqttKura.translate(mqttMessage);\n+            stepData.put(\"KuraDataMessage\", kuraDataMessage);\n+        } catch (Exception ex) {\n+            verifyException(ex);\n+        }\n     }\n \n     @Then(\"^I got kura data message with \\\"([^\\\"]*)\\\" payload body$\")\n", "next_change": {"commit": "11ac0a839beb8414bd87fb1c93c90adfca02822b", "changed_code": [{"header": "diff --git a/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java b/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\nindex 668c0d0291..71099fc9c3 100644\n--- a/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\n+++ b/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\n", "chunk": "@@ -296,29 +248,29 @@ public class TranslatorSteps extends TestBase {\n     public void iGotKuraDataMessageWithPayloadBody(String payloadType) throws Throwable {\n         KuraDataMessage kuraDataMessage = (KuraDataMessage) stepData.get(\"KuraDataMessage\");\n \n-        assertTrue(kuraDataMessage.getPayload().getBody().getClass().getSimpleName().equals(payloadType));\n+        Assert.assertTrue(kuraDataMessage.getPayload().getBody().getClass().getSimpleName().equals(payloadType));\n     }\n \n     @And(\"^I got kura data message channel with \\\"(.+)\\\" and \\\"(.+)\\\" data$\")\n     public void iGotKuraDataMessageChannelWithAndData(String scope, String clientId) {\n         KuraDataMessage kuraDataMessage = (KuraDataMessage) stepData.get(\"KuraDataMessage\");\n \n-        assertTrue(kuraDataMessage.getChannel().getScope().equals(scope));\n-        assertTrue(kuraDataMessage.getChannel().getClientId().equals(clientId));\n+        Assert.assertTrue(kuraDataMessage.getChannel().getScope().equals(scope));\n+        Assert.assertTrue(kuraDataMessage.getChannel().getClientId().equals(clientId));\n     }\n \n     @Then(\"^I got kura data message with proper payload metrics response code (\\\\d+)$\")\n     public void iGotKuraDataMessageWithProperPayloadMetrics(int responseCode) {\n         KuraDataMessage kuraDataMessage = (KuraDataMessage) stepData.get(\"KuraDataMessage\");\n \n-        assertEquals(kuraDataMessage.getPayload().getMetrics().get(\"response.code\"), responseCode);\n+        Assert.assertEquals(kuraDataMessage.getPayload().getMetrics().get(\"response.code\"), responseCode);\n     }\n \n     @Then(\"^I got kura data message with empty payload$\")\n     public void iGotKuraDataMessageWithEmptyPayload() {\n         KuraDataMessage kuraDataMessage = (KuraDataMessage) stepData.get(\"KuraDataMessage\");\n \n-        assertEquals(null, kuraDataMessage.getPayload().getBody());\n+        Assert.assertEquals(null, kuraDataMessage.getPayload().getBody());\n     }\n \n     @Given(\"^I create jms message with (?:valid|invalid|empty) payload \\\"([^\\\"]*)\\\" and (?:valid|invalid) topic \\\"([^\\\"]*)\\\"$\")\n", "next_change": {"commit": "123f51e94d1afdb0fb2210f02f65c9f9e29dfe97", "changed_code": [{"header": "diff --git a/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java b/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\nindex 71099fc9c3..5535f55da2 100644\n--- a/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\n+++ b/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\n", "chunk": "@@ -244,61 +235,53 @@ public class TranslatorSteps extends TestBase {\n         }\n     }\n \n-    @Then(\"^I got kura data message with \\\"([^\\\"]*)\\\" payload body$\")\n+    @Then(\"I got kura data message with {string} payload body\")\n     public void iGotKuraDataMessageWithPayloadBody(String payloadType) throws Throwable {\n         KuraDataMessage kuraDataMessage = (KuraDataMessage) stepData.get(\"KuraDataMessage\");\n-\n         Assert.assertTrue(kuraDataMessage.getPayload().getBody().getClass().getSimpleName().equals(payloadType));\n     }\n \n-    @And(\"^I got kura data message channel with \\\"(.+)\\\" and \\\"(.+)\\\" data$\")\n+    @And(\"I got kura data message channel with {string} and {string} data\")\n     public void iGotKuraDataMessageChannelWithAndData(String scope, String clientId) {\n         KuraDataMessage kuraDataMessage = (KuraDataMessage) stepData.get(\"KuraDataMessage\");\n-\n         Assert.assertTrue(kuraDataMessage.getChannel().getScope().equals(scope));\n         Assert.assertTrue(kuraDataMessage.getChannel().getClientId().equals(clientId));\n     }\n \n-    @Then(\"^I got kura data message with proper payload metrics response code (\\\\d+)$\")\n+    @Then(\"I got kura data message with proper payload metrics response code {int}\")\n     public void iGotKuraDataMessageWithProperPayloadMetrics(int responseCode) {\n         KuraDataMessage kuraDataMessage = (KuraDataMessage) stepData.get(\"KuraDataMessage\");\n-\n         Assert.assertEquals(kuraDataMessage.getPayload().getMetrics().get(\"response.code\"), responseCode);\n     }\n \n-    @Then(\"^I got kura data message with empty payload$\")\n+    @Then(\"I got kura data message with empty payload\")\n     public void iGotKuraDataMessageWithEmptyPayload() {\n         KuraDataMessage kuraDataMessage = (KuraDataMessage) stepData.get(\"KuraDataMessage\");\n-\n         Assert.assertEquals(null, kuraDataMessage.getPayload().getBody());\n     }\n \n-    @Given(\"^I create jms message with (?:valid|invalid|empty) payload \\\"([^\\\"]*)\\\" and (?:valid|invalid) topic \\\"([^\\\"]*)\\\"$\")\n+    @Given(\"I create jms message with (valid/invalid/empty) payload {string} and (valid/invalid) topic {string}\")\n     public void iCreateJmsMessageWithInvalidPayloadAndInvalidTopic(String payload, String topic) throws Exception {\n         try {\n             Date date = new Date();\n             JmsTopic jmsTopic = new JmsTopic(topic);\n-\n             KuraPayload kuraPayload = new KuraPayload();\n             if (payload.equals(\"invalidPayload\") || payload.equals(\"\")) {\n                 kuraPayload.setBody(payload.getBytes());\n             } else {\n                 kuraPayload.getMetrics().put(payload, 200);\n             }\n-\n             JmsPayload jmsPayload = new JmsPayload(kuraPayload.toByteArray());\n             JmsMessage jmsMessage = new JmsMessage(jmsTopic, date, jmsPayload);\n-\n             stepData.put(\"JmsMessage\", jmsMessage);\n         } catch (Exception ex) {\n             verifyException(ex);\n         }\n     }\n \n-    @And(\"^I try to translate jms message to kura data message$\")\n+    @And(\"I try to translate jms message to kura data message\")\n     public void iTryToTranslateJmsMessageToKuraMessage() throws Exception {\n         JmsMessage jmsMessage = (JmsMessage) stepData.get(\"JmsMessage\");\n-\n         try {\n             KuraDataMessage kuraDataMessage = translatorDataJmsKura.translate(jmsMessage);\n             stepData.put(\"KuraDataMessage\", kuraDataMessage);\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "fa85bb5aacb679c2fa90beb7283e28fe27c5b234", "message": "Merge commit", "committedDate": null}, {"oid": "9f7bc792c823dcab476a48e34cf1be87ea7801fb", "committedDate": "2020-09-07 11:51:17 +0200", "message": "Added JUnit and I9 tests"}, {"oid": "a7f7240e48238651f4ffe159f5b0867092eb29b0", "committedDate": "2020-11-11 17:13:08 +0100", "message": "Upgrade to EPL-2.0"}, {"oid": "56bacf723fa05f9a6e83f524c9d6d158bf6f2298", "committedDate": "2020-11-11 17:13:11 +0100", "message": "Remove \"All rights reserved.\" from Copyright Headers"}, {"oid": "dd481c52c43202d55fe8f8c3aafdbec933230cb0", "committedDate": "2021-01-02 17:21:55 +0100", "message": "Update Copyright Year to 2021"}, {"oid": "a56f7b5fb1bb53eb407bcfa0b233e48305cbd534", "committedDate": "2021-08-26 09:29:51 +0200", "message": "external camel consumers"}, {"oid": "11ac0a839beb8414bd87fb1c93c90adfca02822b", "committedDate": "2021-08-26 09:29:51 +0200", "message": "external camel consumers"}, {"oid": "213469756f408e3756fc2d4ffe63560ea51cc399", "committedDate": "2021-09-09 14:48:22 +0200", "message": "external camel consumers - upgrade cucumber to 6.10.4"}, {"oid": "123f51e94d1afdb0fb2210f02f65c9f9e29dfe97", "committedDate": "2021-09-09 14:48:22 +0200", "message": "external camel consumers - upgrade cucumber to 6.10.4 - fixed steps/features/tests tags:"}, {"oid": "7a44c34bbf4c060622421c1cfff94e378681b61a", "committedDate": "2022-01-18 12:28:06 +0100", "message": "Fixed wrong syntax in steps"}, {"oid": "b2f2672d9b138ed1bc71ee1baf60069a326733c2", "committedDate": "2022-01-18 12:30:23 +0100", "message": "Fixed typos"}, {"oid": "72adba095b1dd3a8b7f4aa4fb56d2fa2c86a62bb", "committedDate": "2022-02-17 10:17:20 +0100", "message": "Updated copyright headers to 2022"}, {"oid": "5c5acc4009d68195d31608e448966fc433397f66", "committedDate": "2022-11-09 14:56:53 +0100", "message": "Added Configuration Change event handling and improved JMS-Kura translator implementation"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzY0NjgzNQ==", "url": "https://github.com/eclipse/kapua/pull/2941#discussion_r413646835", "body": "insert try/catch block, the \"stepdata.put\" part can be left ouside the try/catch.", "bodyText": "insert try/catch block, the \"stepdata.put\" part can be left ouside the try/catch.", "bodyHTML": "<p dir=\"auto\">insert try/catch block, the \"stepdata.put\" part can be left ouside the try/catch.</p>", "author": "LeoNerdoG", "createdAt": "2020-04-23T09:09:08Z", "path": "translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java", "diffHunk": "@@ -0,0 +1,363 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech\n+ *******************************************************************************/\n+package org.eclipse.kapua.translator.test.steps;\n+\n+import cucumber.api.Scenario;\n+import cucumber.api.java.After;\n+import cucumber.api.java.Before;\n+import cucumber.api.java.en.And;\n+import cucumber.api.java.en.Given;\n+import cucumber.api.java.en.Then;\n+import cucumber.api.java.en.When;\n+import cucumber.runtime.java.guice.ScenarioScoped;\n+import org.apache.shiro.SecurityUtils;\n+import org.eclipse.kapua.KapuaException;\n+import org.eclipse.kapua.commons.security.KapuaSecurityUtils;\n+import org.eclipse.kapua.commons.security.KapuaSession;\n+import org.eclipse.kapua.commons.util.xml.XmlUtil;\n+import org.eclipse.kapua.locator.KapuaLocator;\n+import org.eclipse.kapua.qa.common.DBHelper;\n+import org.eclipse.kapua.qa.common.StepData;\n+import org.eclipse.kapua.qa.common.TestBase;\n+import org.eclipse.kapua.qa.common.TestJAXBContextProvider;\n+import org.eclipse.kapua.service.device.call.message.kura.KuraPayload;\n+import org.eclipse.kapua.service.device.call.message.kura.app.response.KuraResponseMessage;\n+import org.eclipse.kapua.service.device.call.message.kura.data.KuraDataChannel;\n+import org.eclipse.kapua.service.device.call.message.kura.data.KuraDataMessage;\n+import org.eclipse.kapua.service.device.call.message.kura.data.KuraDataPayload;\n+import org.eclipse.kapua.translator.Translator;\n+import org.eclipse.kapua.translator.jms.kura.TranslatorDataJmsKura;\n+import org.eclipse.kapua.translator.kura.jms.TranslatorDataKuraJms;\n+import org.eclipse.kapua.translator.kura.mqtt.TranslatorDataKuraMqtt;\n+import org.eclipse.kapua.translator.mqtt.kura.TranslatorDataMqttKura;\n+import org.eclipse.kapua.translator.mqtt.kura.TranslatorResponseMqttKura;\n+import org.eclipse.kapua.transport.message.jms.JmsMessage;\n+import org.eclipse.kapua.transport.message.jms.JmsPayload;\n+import org.eclipse.kapua.transport.message.jms.JmsTopic;\n+import org.eclipse.kapua.transport.message.mqtt.MqttMessage;\n+import org.eclipse.kapua.transport.message.mqtt.MqttPayload;\n+import org.eclipse.kapua.transport.message.mqtt.MqttTopic;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.inject.Inject;\n+import java.util.Date;\n+import java.util.List;\n+\n+/**\n+ * Implementation of Gherkin steps used in TranslatorUnitTests.feature scenarios.\n+ */\n+@ScenarioScoped\n+public class TranslatorSteps extends TestBase {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(TranslatorSteps.class);\n+\n+\n+    private DBHelper database;\n+    private ExampleTranslator exampleTranslator;\n+    private TranslatorDataMqttKura translatorDataMqttKura;\n+    private TranslatorResponseMqttKura translatorResponseMqttKura;\n+    private TranslatorDataKuraMqtt translatorDataKuraMqtt;\n+    private TranslatorDataJmsKura translatorDataJmsKura;\n+    private TranslatorDataKuraJms translatorDataKuraJms;\n+\n+    @Inject\n+    public TranslatorSteps(StepData stepData, DBHelper dbHelper) {\n+\n+        this.stepData = stepData;\n+        this.database = dbHelper;\n+    }\n+\n+    // *************************************\n+    // Definition of Cucumber scenario steps\n+    // *************************************\n+\n+    @Before\n+    public void beforeScenario(Scenario scenario) {\n+\n+        this.scenario = scenario;\n+        database.setup();\n+        stepData.clear();\n+\n+        locator = KapuaLocator.getInstance();\n+        exampleTranslator = new ExampleTranslator();\n+\n+        translatorDataMqttKura = new TranslatorDataMqttKura();\n+        translatorResponseMqttKura = new TranslatorResponseMqttKura();\n+        translatorDataKuraMqtt = new TranslatorDataKuraMqtt();\n+        translatorDataJmsKura = new TranslatorDataJmsKura();\n+        translatorDataKuraJms = new TranslatorDataKuraJms();\n+\n+        if (isUnitTest()) {\n+            // Create KapuaSession using KapuaSecurtiyUtils and kapua-sys user as logged in user.\n+            // All operations on database are performed using system user.\n+            // Only for unit tests. Integration tests assume that a real logon is performed.\n+            KapuaSession kapuaSession = new KapuaSession(null, SYS_SCOPE_ID, SYS_USER_ID);\n+            KapuaSecurityUtils.setSession(kapuaSession);\n+        }\n+\n+        // Setup JAXB context\n+        XmlUtil.setContextProvider(new TestJAXBContextProvider());\n+    }\n+\n+    @After\n+    public void afterScenario() {\n+\n+        // Clean up the database\n+        try {\n+            logger.info(\"Logging out in cleanup\");\n+            if (isIntegrationTest()) {\n+                database.deleteAll();\n+                SecurityUtils.getSubject().logout();\n+            } else {\n+                database.dropAll();\n+                database.close();\n+            }\n+            KapuaSecurityUtils.clearSession();\n+        } catch (Exception e) {\n+            logger.error(\"Failed to log out in @After\", e);\n+        }\n+    }\n+\n+    @Given(\"^I try to translate from \\\"([^\\\"]*)\\\" to \\\"([^\\\"]*)\\\"$\")\n+    public void iFindTranslator(String from, String to) throws Exception {\n+        Class fromClass;\n+        Class toClass;\n+        try {\n+            if (!from.equals(\"\") && !to.equals(\"\")) {\n+                fromClass = Class.forName(from);\n+                toClass = Class.forName(to);\n+            } else {\n+                fromClass = null;\n+                toClass = null;\n+            }\n+            Translator translator = Translator.getTranslatorFor(exampleTranslator.getClass(fromClass), exampleTranslator.getClass(toClass));\n+            stepData.put(\"Translator\", translator);\n+        } catch (Exception ex) {\n+            verifyException(ex);\n+        }\n+    }\n+\n+    @Then(\"^Translator \\\"([^\\\"]*)\\\" is found$\")\n+    public void translatorIsFound(String translatorName) {\n+        Translator translator = (Translator) stepData.get(\"Translator\");\n+        assertEquals(translatorName, translator.getClass().getSimpleName());\n+    }\n+\n+    @Given(\"^I create mqtt message with (?:valid|invalid|empty) payload \\\"([^\\\"]*)\\\" and (?:valid|invalid) topic \\\"([^\\\"]*)\\\"$\")\n+    public void iTryToProvideInvalidTopic(String payload, String topic) {\n+\n+        Date date = new Date();\n+        MqttTopic mqttTopic = new MqttTopic(topic);\n+\n+        KuraPayload kuraPayload = new KuraPayload();\n+        if (payload.equals(\"invalidPayload\") || payload.equals(\"\")) {\n+            kuraPayload.setBody(payload.getBytes());\n+        } else {\n+            kuraPayload.getMetrics().put(payload, 200);\n+        }\n+\n+        MqttPayload mqttPayload = new MqttPayload(kuraPayload.toByteArray());\n+        MqttMessage mqttMessage = new MqttMessage(mqttTopic, date, mqttPayload);\n+\n+        stepData.put(\"MqttMessage\", mqttMessage);\n+    }\n+\n+    @When(\"^I try to translate mqtt response$\")\n+    public void iTryToTranslateMqttResponse() throws Exception {\n+        MqttMessage mqttMessage = (MqttMessage) stepData.get(\"MqttMessage\");\n+\n+        try {\n+            KuraResponseMessage kuraResponseMessage = translatorResponseMqttKura.translate(mqttMessage);\n+            stepData.put(\"KuraResponseMessage\", kuraResponseMessage);\n+        } catch (KapuaException ex) {\n+            verifyException(ex);\n+        }\n+    }\n+\n+    @Then(\"^I got kura response message with \\\"([^\\\"]*)\\\" payload body$\")\n+    public void iGotKuraResponseMessageWithPayloadBody(String payloadType) {\n+        KuraResponseMessage kuraResponseMessage = (KuraResponseMessage) stepData.get(\"KuraResponseMessage\");\n+\n+        assertTrue(kuraResponseMessage.getPayload().getBody().getClass().getSimpleName().equals(payloadType));\n+    }\n+\n+    @Then(\"^I got kura response message with proper payload metrics$\")\n+    public void iGotKuraResponseMessageWithPayloadAndChannelWithAndData() {\n+        KuraResponseMessage kuraResponseMessage = (KuraResponseMessage) stepData.get(\"KuraResponseMessage\");\n+\n+        assertTrue(kuraResponseMessage.getPayload().getMetrics() != null);\n+    }\n+\n+    @Given(\"^I create kura data message with channel with scope \\\"([^\\\"]*)\\\", client id \\\"([^\\\"]*)\\\" and payload without body and metrics$\")\n+    public void iCreateKuraDataMessage(String scope, String clientId) {\n+        KuraDataChannel kuraDataChannel = new KuraDataChannel(scope, clientId);\n+        Date date = new Date();\n+        KuraDataPayload kuraDataPayload = new KuraDataPayload();\n+        KuraDataMessage kuraDataMessage = new KuraDataMessage(kuraDataChannel, date, kuraDataPayload);\n+        stepData.put(\"KuraDataMessage\", kuraDataMessage);\n+    }\n+\n+    @And(\"^I try to translate kura data message to mqtt message$\")\n+    public void iTryToTranslateKuraDataMessageToMqttMessage() throws Exception {\n+        KuraDataMessage kuraDataMessage = (KuraDataMessage) stepData.get(\"KuraDataMessage\");\n+        MqttMessage mqttMessage = translatorDataKuraMqtt.translate(kuraDataMessage);\n+        stepData.put(\"MqttMessage\", mqttMessage);\n+    }\n+\n+    @Then(\"^I got mqtt message with channel with scope \\\"([^\\\"]*)\\\", client id \\\"([^\\\"]*)\\\" and (?:empty body|non empty body)$\")\n+    public void iGotMqttMessageWithChannelWithClientIdScopeAndWithoutMetricsAndBodyInPayload(String scope, String clientId) {\n+        MqttMessage mqttMessage = (MqttMessage) stepData.get(\"MqttMessage\");\n+\n+        String requestTopic = scope.concat(\"/\" + clientId);\n+        assertEquals(requestTopic, mqttMessage.getRequestTopic().getTopic());\n+\n+        if (mqttMessage.getPayload().getBody().length == 0) {\n+            assertTrue(mqttMessage.getPayload().getBody().length == 0);\n+        } else {\n+            assertTrue(mqttMessage.getPayload().getBody().length != 0);\n+        }\n+    }\n+\n+    @And(\"^I got kura response message channel with \\\"(.+)\\\", \\\"(.+)\\\", \\\"(.+)\\\", \\\"(.+)\\\", \\\"(.+)\\\" and \\\"(.+)\\\" data$\")\n+    public void iGotKuraResponseMessageChannelWithAndData(String replyPart, String requestId, String appId, String messageClassification, String scope, String clientId) {\n+        KuraResponseMessage kuraResponseMessage = (KuraResponseMessage) stepData.get(\"KuraResponseMessage\");\n+\n+        assertTrue(kuraResponseMessage.getChannel().getReplyPart().equals(replyPart));\n+        assertTrue(kuraResponseMessage.getChannel().getRequestId().equals(requestId));\n+        assertTrue(kuraResponseMessage.getChannel().getAppId().equals(appId));\n+        assertTrue(kuraResponseMessage.getChannel().getMessageClassification().equals(messageClassification));\n+        assertTrue(kuraResponseMessage.getChannel().getScope().equals(scope));\n+        assertTrue(kuraResponseMessage.getChannel().getClientId().equals(clientId));\n+    }\n+\n+    @Given(\"^I create kura data message with channel with scope \\\"([^\\\"]*)\\\", client id \\\"([^\\\"]*)\\\" and payload without body and with metrics$\")\n+    public void iCreateKuraDataMessageWithChannelWithScopeClientIdAndPayloadWithoutBodyAndWithMetrics(String scope, String clientId) {\n+        Date date = new Date();\n+        KuraDataChannel kuraDataChannel = new KuraDataChannel(scope, clientId);\n+        KuraDataPayload kuraDataPayload = new KuraDataPayload();\n+        kuraDataPayload.getMetrics().put(\"response.code\", 200);\n+        KuraDataMessage kuraDataMessage = new KuraDataMessage(kuraDataChannel, date, kuraDataPayload);\n+\n+        stepData.put(\"KuraDataMessage\", kuraDataMessage);\n+    }\n+\n+    @Given(\"^I create kura data message with channel with scope \\\"([^\\\"]*)\\\", client id \\\"([^\\\"]*)\\\" and payload with body and metrics$\")\n+    public void iCreateKuraDataMessageWithChannelWithScopeClientIdAndPayloadWithBodyAndMetrics(String scope, String clientId) {\n+        Date date = new Date();\n+        KuraDataChannel kuraDataChannel = new KuraDataChannel(scope, clientId);\n+        KuraDataPayload kuraDataPayload = new KuraDataPayload();\n+        kuraDataPayload.setBody(\"Payload\".getBytes());\n+        kuraDataPayload.getMetrics().put(\"response.code\", 200);\n+        KuraDataMessage kuraDataMessage = new KuraDataMessage(kuraDataChannel, date, kuraDataPayload);\n+\n+        stepData.put(\"KuraDataMessage\", kuraDataMessage);\n+    }\n+\n+    @Given(\"^I try to translate mqtt message to kura data message$\")\n+    public void iTryToTranslateMqttMessageToKuraMessage() throws Exception {\n+        MqttMessage mqttMessage = (MqttMessage) stepData.get(\"MqttMessage\");\n+        KuraDataMessage kuraDataMessage = translatorDataMqttKura.translate(mqttMessage);", "originalCommit": "400eb7bd926531f5b12f378c2c62c5fe8f8e1713", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2d7d0206645175175a1a27a3ca30d84bb82b5188", "changed_code": [{"header": "diff --git a/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java b/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\nindex a748910368..668c0d0291 100644\n--- a/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\n+++ b/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\n", "chunk": "@@ -240,34 +252,44 @@ public class TranslatorSteps extends TestBase {\n         assertTrue(kuraResponseMessage.getChannel().getClientId().equals(clientId));\n     }\n \n-    @Given(\"^I create kura data message with channel with scope \\\"([^\\\"]*)\\\", client id \\\"([^\\\"]*)\\\" and payload without body and with metrics$\")\n-    public void iCreateKuraDataMessageWithChannelWithScopeClientIdAndPayloadWithoutBodyAndWithMetrics(String scope, String clientId) {\n-        Date date = new Date();\n-        KuraDataChannel kuraDataChannel = new KuraDataChannel(scope, clientId);\n-        KuraDataPayload kuraDataPayload = new KuraDataPayload();\n-        kuraDataPayload.getMetrics().put(\"response.code\", 200);\n-        KuraDataMessage kuraDataMessage = new KuraDataMessage(kuraDataChannel, date, kuraDataPayload);\n-\n-        stepData.put(\"KuraDataMessage\", kuraDataMessage);\n+    @Given(\"^I create kura data message with channel with scope \\\"([^\\\"]*)\\\", client id \\\"([^\\\"]*)\\\", valid payload and metrics but without body$\")\n+    public void kuraDataMessageWithoutBodyAndMetrics(String scope, String clientId) throws Exception {\n+        try {\n+            Date date = new Date();\n+            KuraDataChannel kuraDataChannel = new KuraDataChannel(scope, clientId);\n+            KuraDataPayload kuraDataPayload = new KuraDataPayload();\n+            kuraDataPayload.getMetrics().put(\"response.code\", 200);\n+            KuraDataMessage kuraDataMessage = new KuraDataMessage(kuraDataChannel, date, kuraDataPayload);\n+            stepData.put(\"KuraDataMessage\", kuraDataMessage);\n+        } catch (Exception ex) {\n+            verifyException(ex);\n+        }\n     }\n \n     @Given(\"^I create kura data message with channel with scope \\\"([^\\\"]*)\\\", client id \\\"([^\\\"]*)\\\" and payload with body and metrics$\")\n-    public void iCreateKuraDataMessageWithChannelWithScopeClientIdAndPayloadWithBodyAndMetrics(String scope, String clientId) {\n-        Date date = new Date();\n-        KuraDataChannel kuraDataChannel = new KuraDataChannel(scope, clientId);\n-        KuraDataPayload kuraDataPayload = new KuraDataPayload();\n-        kuraDataPayload.setBody(\"Payload\".getBytes());\n-        kuraDataPayload.getMetrics().put(\"response.code\", 200);\n-        KuraDataMessage kuraDataMessage = new KuraDataMessage(kuraDataChannel, date, kuraDataPayload);\n-\n-        stepData.put(\"KuraDataMessage\", kuraDataMessage);\n+    public void fullKuraDataMessage(String scope, String clientId) throws Exception {\n+        try {\n+            Date date = new Date();\n+            KuraDataChannel kuraDataChannel = new KuraDataChannel(scope, clientId);\n+            KuraDataPayload kuraDataPayload = new KuraDataPayload();\n+            kuraDataPayload.setBody(\"Payload\".getBytes());\n+            kuraDataPayload.getMetrics().put(\"response.code\", 200);\n+            KuraDataMessage kuraDataMessage = new KuraDataMessage(kuraDataChannel, date, kuraDataPayload);\n+            stepData.put(\"KuraDataMessage\", kuraDataMessage);\n+        } catch (Exception ex) {\n+            verifyException(ex);\n+        }\n     }\n \n     @Given(\"^I try to translate mqtt message to kura data message$\")\n     public void iTryToTranslateMqttMessageToKuraMessage() throws Exception {\n-        MqttMessage mqttMessage = (MqttMessage) stepData.get(\"MqttMessage\");\n-        KuraDataMessage kuraDataMessage = translatorDataMqttKura.translate(mqttMessage);\n-        stepData.put(\"KuraDataMessage\", kuraDataMessage);\n+        try {\n+            MqttMessage mqttMessage = (MqttMessage) stepData.get(\"MqttMessage\");\n+            KuraDataMessage kuraDataMessage = translatorDataMqttKura.translate(mqttMessage);\n+            stepData.put(\"KuraDataMessage\", kuraDataMessage);\n+        } catch (Exception ex) {\n+            verifyException(ex);\n+        }\n     }\n \n     @Then(\"^I got kura data message with \\\"([^\\\"]*)\\\" payload body$\")\n", "next_change": null}]}, "revised_code_in_main": {"commit": "fa85bb5aacb679c2fa90beb7283e28fe27c5b234", "changed_code": [{"header": "diff --git a/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java b/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\nindex a748910368..668c0d0291 100644\n--- a/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\n+++ b/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\n", "chunk": "@@ -240,34 +252,44 @@ public class TranslatorSteps extends TestBase {\n         assertTrue(kuraResponseMessage.getChannel().getClientId().equals(clientId));\n     }\n \n-    @Given(\"^I create kura data message with channel with scope \\\"([^\\\"]*)\\\", client id \\\"([^\\\"]*)\\\" and payload without body and with metrics$\")\n-    public void iCreateKuraDataMessageWithChannelWithScopeClientIdAndPayloadWithoutBodyAndWithMetrics(String scope, String clientId) {\n-        Date date = new Date();\n-        KuraDataChannel kuraDataChannel = new KuraDataChannel(scope, clientId);\n-        KuraDataPayload kuraDataPayload = new KuraDataPayload();\n-        kuraDataPayload.getMetrics().put(\"response.code\", 200);\n-        KuraDataMessage kuraDataMessage = new KuraDataMessage(kuraDataChannel, date, kuraDataPayload);\n-\n-        stepData.put(\"KuraDataMessage\", kuraDataMessage);\n+    @Given(\"^I create kura data message with channel with scope \\\"([^\\\"]*)\\\", client id \\\"([^\\\"]*)\\\", valid payload and metrics but without body$\")\n+    public void kuraDataMessageWithoutBodyAndMetrics(String scope, String clientId) throws Exception {\n+        try {\n+            Date date = new Date();\n+            KuraDataChannel kuraDataChannel = new KuraDataChannel(scope, clientId);\n+            KuraDataPayload kuraDataPayload = new KuraDataPayload();\n+            kuraDataPayload.getMetrics().put(\"response.code\", 200);\n+            KuraDataMessage kuraDataMessage = new KuraDataMessage(kuraDataChannel, date, kuraDataPayload);\n+            stepData.put(\"KuraDataMessage\", kuraDataMessage);\n+        } catch (Exception ex) {\n+            verifyException(ex);\n+        }\n     }\n \n     @Given(\"^I create kura data message with channel with scope \\\"([^\\\"]*)\\\", client id \\\"([^\\\"]*)\\\" and payload with body and metrics$\")\n-    public void iCreateKuraDataMessageWithChannelWithScopeClientIdAndPayloadWithBodyAndMetrics(String scope, String clientId) {\n-        Date date = new Date();\n-        KuraDataChannel kuraDataChannel = new KuraDataChannel(scope, clientId);\n-        KuraDataPayload kuraDataPayload = new KuraDataPayload();\n-        kuraDataPayload.setBody(\"Payload\".getBytes());\n-        kuraDataPayload.getMetrics().put(\"response.code\", 200);\n-        KuraDataMessage kuraDataMessage = new KuraDataMessage(kuraDataChannel, date, kuraDataPayload);\n-\n-        stepData.put(\"KuraDataMessage\", kuraDataMessage);\n+    public void fullKuraDataMessage(String scope, String clientId) throws Exception {\n+        try {\n+            Date date = new Date();\n+            KuraDataChannel kuraDataChannel = new KuraDataChannel(scope, clientId);\n+            KuraDataPayload kuraDataPayload = new KuraDataPayload();\n+            kuraDataPayload.setBody(\"Payload\".getBytes());\n+            kuraDataPayload.getMetrics().put(\"response.code\", 200);\n+            KuraDataMessage kuraDataMessage = new KuraDataMessage(kuraDataChannel, date, kuraDataPayload);\n+            stepData.put(\"KuraDataMessage\", kuraDataMessage);\n+        } catch (Exception ex) {\n+            verifyException(ex);\n+        }\n     }\n \n     @Given(\"^I try to translate mqtt message to kura data message$\")\n     public void iTryToTranslateMqttMessageToKuraMessage() throws Exception {\n-        MqttMessage mqttMessage = (MqttMessage) stepData.get(\"MqttMessage\");\n-        KuraDataMessage kuraDataMessage = translatorDataMqttKura.translate(mqttMessage);\n-        stepData.put(\"KuraDataMessage\", kuraDataMessage);\n+        try {\n+            MqttMessage mqttMessage = (MqttMessage) stepData.get(\"MqttMessage\");\n+            KuraDataMessage kuraDataMessage = translatorDataMqttKura.translate(mqttMessage);\n+            stepData.put(\"KuraDataMessage\", kuraDataMessage);\n+        } catch (Exception ex) {\n+            verifyException(ex);\n+        }\n     }\n \n     @Then(\"^I got kura data message with \\\"([^\\\"]*)\\\" payload body$\")\n", "next_change": {"commit": "11ac0a839beb8414bd87fb1c93c90adfca02822b", "changed_code": [{"header": "diff --git a/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java b/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\nindex 668c0d0291..71099fc9c3 100644\n--- a/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\n+++ b/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\n", "chunk": "@@ -296,29 +248,29 @@ public class TranslatorSteps extends TestBase {\n     public void iGotKuraDataMessageWithPayloadBody(String payloadType) throws Throwable {\n         KuraDataMessage kuraDataMessage = (KuraDataMessage) stepData.get(\"KuraDataMessage\");\n \n-        assertTrue(kuraDataMessage.getPayload().getBody().getClass().getSimpleName().equals(payloadType));\n+        Assert.assertTrue(kuraDataMessage.getPayload().getBody().getClass().getSimpleName().equals(payloadType));\n     }\n \n     @And(\"^I got kura data message channel with \\\"(.+)\\\" and \\\"(.+)\\\" data$\")\n     public void iGotKuraDataMessageChannelWithAndData(String scope, String clientId) {\n         KuraDataMessage kuraDataMessage = (KuraDataMessage) stepData.get(\"KuraDataMessage\");\n \n-        assertTrue(kuraDataMessage.getChannel().getScope().equals(scope));\n-        assertTrue(kuraDataMessage.getChannel().getClientId().equals(clientId));\n+        Assert.assertTrue(kuraDataMessage.getChannel().getScope().equals(scope));\n+        Assert.assertTrue(kuraDataMessage.getChannel().getClientId().equals(clientId));\n     }\n \n     @Then(\"^I got kura data message with proper payload metrics response code (\\\\d+)$\")\n     public void iGotKuraDataMessageWithProperPayloadMetrics(int responseCode) {\n         KuraDataMessage kuraDataMessage = (KuraDataMessage) stepData.get(\"KuraDataMessage\");\n \n-        assertEquals(kuraDataMessage.getPayload().getMetrics().get(\"response.code\"), responseCode);\n+        Assert.assertEquals(kuraDataMessage.getPayload().getMetrics().get(\"response.code\"), responseCode);\n     }\n \n     @Then(\"^I got kura data message with empty payload$\")\n     public void iGotKuraDataMessageWithEmptyPayload() {\n         KuraDataMessage kuraDataMessage = (KuraDataMessage) stepData.get(\"KuraDataMessage\");\n \n-        assertEquals(null, kuraDataMessage.getPayload().getBody());\n+        Assert.assertEquals(null, kuraDataMessage.getPayload().getBody());\n     }\n \n     @Given(\"^I create jms message with (?:valid|invalid|empty) payload \\\"([^\\\"]*)\\\" and (?:valid|invalid) topic \\\"([^\\\"]*)\\\"$\")\n", "next_change": {"commit": "123f51e94d1afdb0fb2210f02f65c9f9e29dfe97", "changed_code": [{"header": "diff --git a/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java b/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\nindex 71099fc9c3..5535f55da2 100644\n--- a/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\n+++ b/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\n", "chunk": "@@ -244,61 +235,53 @@ public class TranslatorSteps extends TestBase {\n         }\n     }\n \n-    @Then(\"^I got kura data message with \\\"([^\\\"]*)\\\" payload body$\")\n+    @Then(\"I got kura data message with {string} payload body\")\n     public void iGotKuraDataMessageWithPayloadBody(String payloadType) throws Throwable {\n         KuraDataMessage kuraDataMessage = (KuraDataMessage) stepData.get(\"KuraDataMessage\");\n-\n         Assert.assertTrue(kuraDataMessage.getPayload().getBody().getClass().getSimpleName().equals(payloadType));\n     }\n \n-    @And(\"^I got kura data message channel with \\\"(.+)\\\" and \\\"(.+)\\\" data$\")\n+    @And(\"I got kura data message channel with {string} and {string} data\")\n     public void iGotKuraDataMessageChannelWithAndData(String scope, String clientId) {\n         KuraDataMessage kuraDataMessage = (KuraDataMessage) stepData.get(\"KuraDataMessage\");\n-\n         Assert.assertTrue(kuraDataMessage.getChannel().getScope().equals(scope));\n         Assert.assertTrue(kuraDataMessage.getChannel().getClientId().equals(clientId));\n     }\n \n-    @Then(\"^I got kura data message with proper payload metrics response code (\\\\d+)$\")\n+    @Then(\"I got kura data message with proper payload metrics response code {int}\")\n     public void iGotKuraDataMessageWithProperPayloadMetrics(int responseCode) {\n         KuraDataMessage kuraDataMessage = (KuraDataMessage) stepData.get(\"KuraDataMessage\");\n-\n         Assert.assertEquals(kuraDataMessage.getPayload().getMetrics().get(\"response.code\"), responseCode);\n     }\n \n-    @Then(\"^I got kura data message with empty payload$\")\n+    @Then(\"I got kura data message with empty payload\")\n     public void iGotKuraDataMessageWithEmptyPayload() {\n         KuraDataMessage kuraDataMessage = (KuraDataMessage) stepData.get(\"KuraDataMessage\");\n-\n         Assert.assertEquals(null, kuraDataMessage.getPayload().getBody());\n     }\n \n-    @Given(\"^I create jms message with (?:valid|invalid|empty) payload \\\"([^\\\"]*)\\\" and (?:valid|invalid) topic \\\"([^\\\"]*)\\\"$\")\n+    @Given(\"I create jms message with (valid/invalid/empty) payload {string} and (valid/invalid) topic {string}\")\n     public void iCreateJmsMessageWithInvalidPayloadAndInvalidTopic(String payload, String topic) throws Exception {\n         try {\n             Date date = new Date();\n             JmsTopic jmsTopic = new JmsTopic(topic);\n-\n             KuraPayload kuraPayload = new KuraPayload();\n             if (payload.equals(\"invalidPayload\") || payload.equals(\"\")) {\n                 kuraPayload.setBody(payload.getBytes());\n             } else {\n                 kuraPayload.getMetrics().put(payload, 200);\n             }\n-\n             JmsPayload jmsPayload = new JmsPayload(kuraPayload.toByteArray());\n             JmsMessage jmsMessage = new JmsMessage(jmsTopic, date, jmsPayload);\n-\n             stepData.put(\"JmsMessage\", jmsMessage);\n         } catch (Exception ex) {\n             verifyException(ex);\n         }\n     }\n \n-    @And(\"^I try to translate jms message to kura data message$\")\n+    @And(\"I try to translate jms message to kura data message\")\n     public void iTryToTranslateJmsMessageToKuraMessage() throws Exception {\n         JmsMessage jmsMessage = (JmsMessage) stepData.get(\"JmsMessage\");\n-\n         try {\n             KuraDataMessage kuraDataMessage = translatorDataJmsKura.translate(jmsMessage);\n             stepData.put(\"KuraDataMessage\", kuraDataMessage);\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "fa85bb5aacb679c2fa90beb7283e28fe27c5b234", "message": "Merge commit", "committedDate": null}, {"oid": "9f7bc792c823dcab476a48e34cf1be87ea7801fb", "committedDate": "2020-09-07 11:51:17 +0200", "message": "Added JUnit and I9 tests"}, {"oid": "a7f7240e48238651f4ffe159f5b0867092eb29b0", "committedDate": "2020-11-11 17:13:08 +0100", "message": "Upgrade to EPL-2.0"}, {"oid": "56bacf723fa05f9a6e83f524c9d6d158bf6f2298", "committedDate": "2020-11-11 17:13:11 +0100", "message": "Remove \"All rights reserved.\" from Copyright Headers"}, {"oid": "dd481c52c43202d55fe8f8c3aafdbec933230cb0", "committedDate": "2021-01-02 17:21:55 +0100", "message": "Update Copyright Year to 2021"}, {"oid": "a56f7b5fb1bb53eb407bcfa0b233e48305cbd534", "committedDate": "2021-08-26 09:29:51 +0200", "message": "external camel consumers"}, {"oid": "11ac0a839beb8414bd87fb1c93c90adfca02822b", "committedDate": "2021-08-26 09:29:51 +0200", "message": "external camel consumers"}, {"oid": "213469756f408e3756fc2d4ffe63560ea51cc399", "committedDate": "2021-09-09 14:48:22 +0200", "message": "external camel consumers - upgrade cucumber to 6.10.4"}, {"oid": "123f51e94d1afdb0fb2210f02f65c9f9e29dfe97", "committedDate": "2021-09-09 14:48:22 +0200", "message": "external camel consumers - upgrade cucumber to 6.10.4 - fixed steps/features/tests tags:"}, {"oid": "7a44c34bbf4c060622421c1cfff94e378681b61a", "committedDate": "2022-01-18 12:28:06 +0100", "message": "Fixed wrong syntax in steps"}, {"oid": "b2f2672d9b138ed1bc71ee1baf60069a326733c2", "committedDate": "2022-01-18 12:30:23 +0100", "message": "Fixed typos"}, {"oid": "72adba095b1dd3a8b7f4aa4fb56d2fa2c86a62bb", "committedDate": "2022-02-17 10:17:20 +0100", "message": "Updated copyright headers to 2022"}, {"oid": "5c5acc4009d68195d31608e448966fc433397f66", "committedDate": "2022-11-09 14:56:53 +0100", "message": "Added Configuration Change event handling and improved JMS-Kura translator implementation"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzY0NzUzMA==", "url": "https://github.com/eclipse/kapua/pull/2941#discussion_r413647530", "body": "insert try/catch block, the \"stepdata.put\" part can be left ouside the try/catch.", "bodyText": "insert try/catch block, the \"stepdata.put\" part can be left ouside the try/catch.", "bodyHTML": "<p dir=\"auto\">insert try/catch block, the \"stepdata.put\" part can be left ouside the try/catch.</p>", "author": "LeoNerdoG", "createdAt": "2020-04-23T09:10:08Z", "path": "translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java", "diffHunk": "@@ -0,0 +1,363 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     Eurotech\n+ *******************************************************************************/\n+package org.eclipse.kapua.translator.test.steps;\n+\n+import cucumber.api.Scenario;\n+import cucumber.api.java.After;\n+import cucumber.api.java.Before;\n+import cucumber.api.java.en.And;\n+import cucumber.api.java.en.Given;\n+import cucumber.api.java.en.Then;\n+import cucumber.api.java.en.When;\n+import cucumber.runtime.java.guice.ScenarioScoped;\n+import org.apache.shiro.SecurityUtils;\n+import org.eclipse.kapua.KapuaException;\n+import org.eclipse.kapua.commons.security.KapuaSecurityUtils;\n+import org.eclipse.kapua.commons.security.KapuaSession;\n+import org.eclipse.kapua.commons.util.xml.XmlUtil;\n+import org.eclipse.kapua.locator.KapuaLocator;\n+import org.eclipse.kapua.qa.common.DBHelper;\n+import org.eclipse.kapua.qa.common.StepData;\n+import org.eclipse.kapua.qa.common.TestBase;\n+import org.eclipse.kapua.qa.common.TestJAXBContextProvider;\n+import org.eclipse.kapua.service.device.call.message.kura.KuraPayload;\n+import org.eclipse.kapua.service.device.call.message.kura.app.response.KuraResponseMessage;\n+import org.eclipse.kapua.service.device.call.message.kura.data.KuraDataChannel;\n+import org.eclipse.kapua.service.device.call.message.kura.data.KuraDataMessage;\n+import org.eclipse.kapua.service.device.call.message.kura.data.KuraDataPayload;\n+import org.eclipse.kapua.translator.Translator;\n+import org.eclipse.kapua.translator.jms.kura.TranslatorDataJmsKura;\n+import org.eclipse.kapua.translator.kura.jms.TranslatorDataKuraJms;\n+import org.eclipse.kapua.translator.kura.mqtt.TranslatorDataKuraMqtt;\n+import org.eclipse.kapua.translator.mqtt.kura.TranslatorDataMqttKura;\n+import org.eclipse.kapua.translator.mqtt.kura.TranslatorResponseMqttKura;\n+import org.eclipse.kapua.transport.message.jms.JmsMessage;\n+import org.eclipse.kapua.transport.message.jms.JmsPayload;\n+import org.eclipse.kapua.transport.message.jms.JmsTopic;\n+import org.eclipse.kapua.transport.message.mqtt.MqttMessage;\n+import org.eclipse.kapua.transport.message.mqtt.MqttPayload;\n+import org.eclipse.kapua.transport.message.mqtt.MqttTopic;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.inject.Inject;\n+import java.util.Date;\n+import java.util.List;\n+\n+/**\n+ * Implementation of Gherkin steps used in TranslatorUnitTests.feature scenarios.\n+ */\n+@ScenarioScoped\n+public class TranslatorSteps extends TestBase {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(TranslatorSteps.class);\n+\n+\n+    private DBHelper database;\n+    private ExampleTranslator exampleTranslator;\n+    private TranslatorDataMqttKura translatorDataMqttKura;\n+    private TranslatorResponseMqttKura translatorResponseMqttKura;\n+    private TranslatorDataKuraMqtt translatorDataKuraMqtt;\n+    private TranslatorDataJmsKura translatorDataJmsKura;\n+    private TranslatorDataKuraJms translatorDataKuraJms;\n+\n+    @Inject\n+    public TranslatorSteps(StepData stepData, DBHelper dbHelper) {\n+\n+        this.stepData = stepData;\n+        this.database = dbHelper;\n+    }\n+\n+    // *************************************\n+    // Definition of Cucumber scenario steps\n+    // *************************************\n+\n+    @Before\n+    public void beforeScenario(Scenario scenario) {\n+\n+        this.scenario = scenario;\n+        database.setup();\n+        stepData.clear();\n+\n+        locator = KapuaLocator.getInstance();\n+        exampleTranslator = new ExampleTranslator();\n+\n+        translatorDataMqttKura = new TranslatorDataMqttKura();\n+        translatorResponseMqttKura = new TranslatorResponseMqttKura();\n+        translatorDataKuraMqtt = new TranslatorDataKuraMqtt();\n+        translatorDataJmsKura = new TranslatorDataJmsKura();\n+        translatorDataKuraJms = new TranslatorDataKuraJms();\n+\n+        if (isUnitTest()) {\n+            // Create KapuaSession using KapuaSecurtiyUtils and kapua-sys user as logged in user.\n+            // All operations on database are performed using system user.\n+            // Only for unit tests. Integration tests assume that a real logon is performed.\n+            KapuaSession kapuaSession = new KapuaSession(null, SYS_SCOPE_ID, SYS_USER_ID);\n+            KapuaSecurityUtils.setSession(kapuaSession);\n+        }\n+\n+        // Setup JAXB context\n+        XmlUtil.setContextProvider(new TestJAXBContextProvider());\n+    }\n+\n+    @After\n+    public void afterScenario() {\n+\n+        // Clean up the database\n+        try {\n+            logger.info(\"Logging out in cleanup\");\n+            if (isIntegrationTest()) {\n+                database.deleteAll();\n+                SecurityUtils.getSubject().logout();\n+            } else {\n+                database.dropAll();\n+                database.close();\n+            }\n+            KapuaSecurityUtils.clearSession();\n+        } catch (Exception e) {\n+            logger.error(\"Failed to log out in @After\", e);\n+        }\n+    }\n+\n+    @Given(\"^I try to translate from \\\"([^\\\"]*)\\\" to \\\"([^\\\"]*)\\\"$\")\n+    public void iFindTranslator(String from, String to) throws Exception {\n+        Class fromClass;\n+        Class toClass;\n+        try {\n+            if (!from.equals(\"\") && !to.equals(\"\")) {\n+                fromClass = Class.forName(from);\n+                toClass = Class.forName(to);\n+            } else {\n+                fromClass = null;\n+                toClass = null;\n+            }\n+            Translator translator = Translator.getTranslatorFor(exampleTranslator.getClass(fromClass), exampleTranslator.getClass(toClass));\n+            stepData.put(\"Translator\", translator);\n+        } catch (Exception ex) {\n+            verifyException(ex);\n+        }\n+    }\n+\n+    @Then(\"^Translator \\\"([^\\\"]*)\\\" is found$\")\n+    public void translatorIsFound(String translatorName) {\n+        Translator translator = (Translator) stepData.get(\"Translator\");\n+        assertEquals(translatorName, translator.getClass().getSimpleName());\n+    }\n+\n+    @Given(\"^I create mqtt message with (?:valid|invalid|empty) payload \\\"([^\\\"]*)\\\" and (?:valid|invalid) topic \\\"([^\\\"]*)\\\"$\")\n+    public void iTryToProvideInvalidTopic(String payload, String topic) {\n+\n+        Date date = new Date();\n+        MqttTopic mqttTopic = new MqttTopic(topic);\n+\n+        KuraPayload kuraPayload = new KuraPayload();\n+        if (payload.equals(\"invalidPayload\") || payload.equals(\"\")) {\n+            kuraPayload.setBody(payload.getBytes());\n+        } else {\n+            kuraPayload.getMetrics().put(payload, 200);\n+        }\n+\n+        MqttPayload mqttPayload = new MqttPayload(kuraPayload.toByteArray());\n+        MqttMessage mqttMessage = new MqttMessage(mqttTopic, date, mqttPayload);\n+\n+        stepData.put(\"MqttMessage\", mqttMessage);\n+    }\n+\n+    @When(\"^I try to translate mqtt response$\")\n+    public void iTryToTranslateMqttResponse() throws Exception {\n+        MqttMessage mqttMessage = (MqttMessage) stepData.get(\"MqttMessage\");\n+\n+        try {\n+            KuraResponseMessage kuraResponseMessage = translatorResponseMqttKura.translate(mqttMessage);\n+            stepData.put(\"KuraResponseMessage\", kuraResponseMessage);\n+        } catch (KapuaException ex) {\n+            verifyException(ex);\n+        }\n+    }\n+\n+    @Then(\"^I got kura response message with \\\"([^\\\"]*)\\\" payload body$\")\n+    public void iGotKuraResponseMessageWithPayloadBody(String payloadType) {\n+        KuraResponseMessage kuraResponseMessage = (KuraResponseMessage) stepData.get(\"KuraResponseMessage\");\n+\n+        assertTrue(kuraResponseMessage.getPayload().getBody().getClass().getSimpleName().equals(payloadType));\n+    }\n+\n+    @Then(\"^I got kura response message with proper payload metrics$\")\n+    public void iGotKuraResponseMessageWithPayloadAndChannelWithAndData() {\n+        KuraResponseMessage kuraResponseMessage = (KuraResponseMessage) stepData.get(\"KuraResponseMessage\");\n+\n+        assertTrue(kuraResponseMessage.getPayload().getMetrics() != null);\n+    }\n+\n+    @Given(\"^I create kura data message with channel with scope \\\"([^\\\"]*)\\\", client id \\\"([^\\\"]*)\\\" and payload without body and metrics$\")\n+    public void iCreateKuraDataMessage(String scope, String clientId) {\n+        KuraDataChannel kuraDataChannel = new KuraDataChannel(scope, clientId);\n+        Date date = new Date();\n+        KuraDataPayload kuraDataPayload = new KuraDataPayload();\n+        KuraDataMessage kuraDataMessage = new KuraDataMessage(kuraDataChannel, date, kuraDataPayload);\n+        stepData.put(\"KuraDataMessage\", kuraDataMessage);\n+    }\n+\n+    @And(\"^I try to translate kura data message to mqtt message$\")\n+    public void iTryToTranslateKuraDataMessageToMqttMessage() throws Exception {\n+        KuraDataMessage kuraDataMessage = (KuraDataMessage) stepData.get(\"KuraDataMessage\");\n+        MqttMessage mqttMessage = translatorDataKuraMqtt.translate(kuraDataMessage);\n+        stepData.put(\"MqttMessage\", mqttMessage);\n+    }\n+\n+    @Then(\"^I got mqtt message with channel with scope \\\"([^\\\"]*)\\\", client id \\\"([^\\\"]*)\\\" and (?:empty body|non empty body)$\")\n+    public void iGotMqttMessageWithChannelWithClientIdScopeAndWithoutMetricsAndBodyInPayload(String scope, String clientId) {\n+        MqttMessage mqttMessage = (MqttMessage) stepData.get(\"MqttMessage\");\n+\n+        String requestTopic = scope.concat(\"/\" + clientId);\n+        assertEquals(requestTopic, mqttMessage.getRequestTopic().getTopic());\n+\n+        if (mqttMessage.getPayload().getBody().length == 0) {\n+            assertTrue(mqttMessage.getPayload().getBody().length == 0);\n+        } else {\n+            assertTrue(mqttMessage.getPayload().getBody().length != 0);\n+        }\n+    }\n+\n+    @And(\"^I got kura response message channel with \\\"(.+)\\\", \\\"(.+)\\\", \\\"(.+)\\\", \\\"(.+)\\\", \\\"(.+)\\\" and \\\"(.+)\\\" data$\")\n+    public void iGotKuraResponseMessageChannelWithAndData(String replyPart, String requestId, String appId, String messageClassification, String scope, String clientId) {\n+        KuraResponseMessage kuraResponseMessage = (KuraResponseMessage) stepData.get(\"KuraResponseMessage\");\n+\n+        assertTrue(kuraResponseMessage.getChannel().getReplyPart().equals(replyPart));\n+        assertTrue(kuraResponseMessage.getChannel().getRequestId().equals(requestId));\n+        assertTrue(kuraResponseMessage.getChannel().getAppId().equals(appId));\n+        assertTrue(kuraResponseMessage.getChannel().getMessageClassification().equals(messageClassification));\n+        assertTrue(kuraResponseMessage.getChannel().getScope().equals(scope));\n+        assertTrue(kuraResponseMessage.getChannel().getClientId().equals(clientId));\n+    }\n+\n+    @Given(\"^I create kura data message with channel with scope \\\"([^\\\"]*)\\\", client id \\\"([^\\\"]*)\\\" and payload without body and with metrics$\")\n+    public void iCreateKuraDataMessageWithChannelWithScopeClientIdAndPayloadWithoutBodyAndWithMetrics(String scope, String clientId) {\n+        Date date = new Date();\n+        KuraDataChannel kuraDataChannel = new KuraDataChannel(scope, clientId);\n+        KuraDataPayload kuraDataPayload = new KuraDataPayload();\n+        kuraDataPayload.getMetrics().put(\"response.code\", 200);\n+        KuraDataMessage kuraDataMessage = new KuraDataMessage(kuraDataChannel, date, kuraDataPayload);\n+\n+        stepData.put(\"KuraDataMessage\", kuraDataMessage);\n+    }\n+\n+    @Given(\"^I create kura data message with channel with scope \\\"([^\\\"]*)\\\", client id \\\"([^\\\"]*)\\\" and payload with body and metrics$\")\n+    public void iCreateKuraDataMessageWithChannelWithScopeClientIdAndPayloadWithBodyAndMetrics(String scope, String clientId) {\n+        Date date = new Date();\n+        KuraDataChannel kuraDataChannel = new KuraDataChannel(scope, clientId);\n+        KuraDataPayload kuraDataPayload = new KuraDataPayload();\n+        kuraDataPayload.setBody(\"Payload\".getBytes());\n+        kuraDataPayload.getMetrics().put(\"response.code\", 200);\n+        KuraDataMessage kuraDataMessage = new KuraDataMessage(kuraDataChannel, date, kuraDataPayload);\n+\n+        stepData.put(\"KuraDataMessage\", kuraDataMessage);\n+    }\n+\n+    @Given(\"^I try to translate mqtt message to kura data message$\")\n+    public void iTryToTranslateMqttMessageToKuraMessage() throws Exception {\n+        MqttMessage mqttMessage = (MqttMessage) stepData.get(\"MqttMessage\");\n+        KuraDataMessage kuraDataMessage = translatorDataMqttKura.translate(mqttMessage);\n+        stepData.put(\"KuraDataMessage\", kuraDataMessage);\n+    }\n+\n+    @Then(\"^I got kura data message with \\\"([^\\\"]*)\\\" payload body$\")\n+    public void iGotKuraDataMessageWithPayloadBody(String payloadType) throws Throwable {\n+        KuraDataMessage kuraDataMessage = (KuraDataMessage) stepData.get(\"KuraDataMessage\");\n+\n+        assertTrue(kuraDataMessage.getPayload().getBody().getClass().getSimpleName().equals(payloadType));\n+    }\n+\n+    @And(\"^I got kura data message channel with \\\"(.+)\\\" and \\\"(.+)\\\" data$\")\n+    public void iGotKuraDataMessageChannelWithAndData(String scope, String clientId) {\n+        KuraDataMessage kuraDataMessage = (KuraDataMessage) stepData.get(\"KuraDataMessage\");\n+\n+        assertTrue(kuraDataMessage.getChannel().getScope().equals(scope));\n+        assertTrue(kuraDataMessage.getChannel().getClientId().equals(clientId));\n+    }\n+\n+    @Then(\"^I got kura data message with proper payload metrics$\")\n+    public void iGotKuraDataMessageWithProperPayloadMetrics() {\n+        KuraDataMessage kuraDataMessage = (KuraDataMessage) stepData.get(\"KuraDataMessage\");\n+\n+        assertTrue(kuraDataMessage.getPayload().getMetrics() != null);\n+    }\n+\n+    @Then(\"^I got kura data message with empty payload$\")\n+    public void iGotKuraDataMessageWithEmptyPayload() {\n+        KuraDataMessage kuraDataMessage = (KuraDataMessage) stepData.get(\"KuraDataMessage\");\n+\n+        assertEquals(null, kuraDataMessage.getPayload().getBody());\n+    }\n+\n+    @Given(\"^I create jms message with (?:valid|invalid|empty) payload \\\"([^\\\"]*)\\\" and (?:valid|invalid) topic \\\"([^\\\"]*)\\\"$\")\n+    public void iCreateJmsMessageWithInvalidPayloadAndInvalidTopic(String payload, String topic) {\n+        Date date = new Date();\n+        JmsTopic jmsTopic = new JmsTopic(topic);\n+\n+        KuraPayload kuraPayload = new KuraPayload();\n+        if (payload.equals(\"invalidPayload\") || payload.equals(\"\")) {\n+            kuraPayload.setBody(payload.getBytes());\n+        } else {\n+            kuraPayload.getMetrics().put(payload, 200);\n+        }\n+\n+        JmsPayload jmsPayload = new JmsPayload(kuraPayload.toByteArray());\n+        JmsMessage jmsMessage = new JmsMessage(jmsTopic, date, jmsPayload);\n+\n+        stepData.put(\"JmsMessage\", jmsMessage);\n+    }\n+\n+    @And(\"^I try to translate jms message to kura data message$\")\n+    public void iTryToTranslateJmsMessageToKuraMessage() throws Exception {\n+        JmsMessage jmsMessage = (JmsMessage) stepData.get(\"JmsMessage\");\n+\n+        try {\n+            KuraDataMessage kuraDataMessage = translatorDataJmsKura.translate(jmsMessage);\n+            stepData.put(\"KuraDataMessage\", kuraDataMessage);\n+        } catch (KapuaException ex) {\n+            verifyException(ex);\n+        }\n+    }\n+\n+    @And(\"^I try to translate kura data message to jms message$\")\n+    public void iTryToTranslateKuraDataMessageToJmsMessage() throws Exception {\n+        KuraDataMessage kuraDataMessage = (KuraDataMessage) stepData.get(\"KuraDataMessage\");\n+        JmsMessage jmsMessage = translatorDataKuraJms.translate(kuraDataMessage);", "originalCommit": "400eb7bd926531f5b12f378c2c62c5fe8f8e1713", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2d7d0206645175175a1a27a3ca30d84bb82b5188", "changed_code": [{"header": "diff --git a/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java b/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\nindex a748910368..668c0d0291 100644\n--- a/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\n+++ b/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\n", "chunk": "@@ -331,13 +357,17 @@ public class TranslatorSteps extends TestBase {\n \n     @And(\"^I try to translate kura data message to jms message$\")\n     public void iTryToTranslateKuraDataMessageToJmsMessage() throws Exception {\n-        KuraDataMessage kuraDataMessage = (KuraDataMessage) stepData.get(\"KuraDataMessage\");\n-        JmsMessage jmsMessage = translatorDataKuraJms.translate(kuraDataMessage);\n-        stepData.put(\"JmsMessage\", jmsMessage);\n+        try {\n+            KuraDataMessage kuraDataMessage = (KuraDataMessage) stepData.get(\"KuraDataMessage\");\n+            JmsMessage jmsMessage = translatorDataKuraJms.translate(kuraDataMessage);\n+            stepData.put(\"JmsMessage\", jmsMessage);\n+        } catch (Exception ex) {\n+            verifyException(ex);\n+        }\n     }\n \n     @Then(\"^I got kura data message channel with \\\"([^\\\"]*)\\\" scope, \\\"([^\\\"]*)\\\" client id and proper semanticPart$\")\n-    public void iGotKuraDataMessageChannelWithScopeClientIdAndProperSemanticPart(String scope, String clientId, List<String> semanticParts) {\n+    public void iCreateJmsMessageWithInvalidPayloadAndTopic(String scope, String clientId, List<String> semanticParts) {\n \n         KuraDataMessage kuraDataMessage = (KuraDataMessage) stepData.get(\"KuraDataMessage\");\n \n", "next_change": null}]}, "revised_code_in_main": {"commit": "fa85bb5aacb679c2fa90beb7283e28fe27c5b234", "changed_code": [{"header": "diff --git a/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java b/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\nindex a748910368..668c0d0291 100644\n--- a/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\n+++ b/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\n", "chunk": "@@ -331,13 +357,17 @@ public class TranslatorSteps extends TestBase {\n \n     @And(\"^I try to translate kura data message to jms message$\")\n     public void iTryToTranslateKuraDataMessageToJmsMessage() throws Exception {\n-        KuraDataMessage kuraDataMessage = (KuraDataMessage) stepData.get(\"KuraDataMessage\");\n-        JmsMessage jmsMessage = translatorDataKuraJms.translate(kuraDataMessage);\n-        stepData.put(\"JmsMessage\", jmsMessage);\n+        try {\n+            KuraDataMessage kuraDataMessage = (KuraDataMessage) stepData.get(\"KuraDataMessage\");\n+            JmsMessage jmsMessage = translatorDataKuraJms.translate(kuraDataMessage);\n+            stepData.put(\"JmsMessage\", jmsMessage);\n+        } catch (Exception ex) {\n+            verifyException(ex);\n+        }\n     }\n \n     @Then(\"^I got kura data message channel with \\\"([^\\\"]*)\\\" scope, \\\"([^\\\"]*)\\\" client id and proper semanticPart$\")\n-    public void iGotKuraDataMessageChannelWithScopeClientIdAndProperSemanticPart(String scope, String clientId, List<String> semanticParts) {\n+    public void iCreateJmsMessageWithInvalidPayloadAndTopic(String scope, String clientId, List<String> semanticParts) {\n \n         KuraDataMessage kuraDataMessage = (KuraDataMessage) stepData.get(\"KuraDataMessage\");\n \n", "next_change": {"commit": "11ac0a839beb8414bd87fb1c93c90adfca02822b", "changed_code": [{"header": "diff --git a/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java b/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\nindex 668c0d0291..71099fc9c3 100644\n--- a/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\n+++ b/translator/test-steps/src/main/java/org/eclipse/kapua/translator/test/steps/TranslatorSteps.java\n", "chunk": "@@ -371,23 +323,83 @@ public class TranslatorSteps extends TestBase {\n \n         KuraDataMessage kuraDataMessage = (KuraDataMessage) stepData.get(\"KuraDataMessage\");\n \n-        assertEquals(scope, kuraDataMessage.getChannel().getScope());\n-        assertEquals(clientId, kuraDataMessage.getChannel().getClientId());\n+        Assert.assertEquals(scope, kuraDataMessage.getChannel().getScope());\n+        Assert.assertEquals(clientId, kuraDataMessage.getChannel().getClientId());\n \n         for (String semanticPart : semanticParts) {\n-            assertTrue(kuraDataMessage.getChannel().getSemanticParts().contains(semanticPart));\n+            Assert.assertTrue(kuraDataMessage.getChannel().getSemanticParts().contains(semanticPart));\n         }\n     }\n \n     @Then(\"^I got jms message with topic \\\"([^\\\"]*)\\\" and (?:empty body|non empty body)$\")\n     public void iGotJmsMessageWithTopicAndEmptyPayload(JmsTopic topic) {\n         JmsMessage jmsMessage = (JmsMessage) stepData.get(\"JmsMessage\");\n-        assertEquals(topic.getTopic(), jmsMessage.getTopic().getTopic());\n+        Assert.assertEquals(topic.getTopic(), jmsMessage.getTopic().getTopic());\n \n         if (jmsMessage.getPayload().getBody().length == 0) {\n-            assertTrue(jmsMessage.getPayload().getBody().length == 0);\n+            Assert.assertTrue(jmsMessage.getPayload().getBody().length == 0);\n         } else {\n-            assertTrue(jmsMessage.getPayload().getBody().length != 0);\n+            Assert.assertTrue(jmsMessage.getPayload().getBody().length != 0);\n+        }\n+    }\n+\n+    @When(\"^I try to translate mqtt null message to kura data message$\")\n+    public void iTryToTranslateMqttNullMessageToKuraDataMessage() throws Exception {\n+        try {\n+            MqttMessage mqttMessage = (MqttMessage) stepData.get(\"MqttMessage\");\n+            KuraDataMessage kuraDataMessage = translatorDataMqttKura.translate((MqttMessage) null);\n+            stepData.put(\"KuraDataMessage\", kuraDataMessage);\n+        } catch (Exception ex){\n+            verifyException(ex);\n+        }\n+    }\n+\n+    @Given(\"^I create kura data message with channel with scope \\\"([^\\\"]*)\\\", client id \\\"([^\\\"]*)\\\" and null payload$\")\n+    public void iCreateKuraDataMessageWithChannelWithScopeClientIdAndNullPayload(String scope, String clientId) {\n+        KuraDataChannel kuraDataChannel = new KuraDataChannel(scope, clientId);\n+        Date date = new Date();\n+        KuraDataMessage kuraDataMessage = new KuraDataMessage(kuraDataChannel, date, null);\n+        stepData.put(\"KuraDataMessage\", kuraDataMessage);\n+    }\n+\n+    @Given(\"^I create kura data message with null channel and payload without body and with metrics$\")\n+    public void iCreateKuraDataMessageWithNullChannelAndPayloadWithoutBodyAndWithMetrics() {\n+        Date date = new Date();\n+        KuraDataPayload kuraDataPayload = new KuraDataPayload();\n+        kuraDataPayload.getMetrics().put(\"response.code\", 200);\n+        KuraDataMessage kuraDataMessage = new KuraDataMessage(null, date, kuraDataPayload);\n+\n+        stepData.put(\"KuraDataMessage\", kuraDataMessage);\n+    }\n+\n+    @And(\"^I try to translate invalid kura data message to mqtt message$\")\n+    public void iTryToTranslateInvalidKuraDataMessageToMqttMessage() throws Exception {\n+        try {\n+            KuraDataMessage kuraDataMessage = (KuraDataMessage) stepData.get(\"KuraDataMessage\");\n+            MqttMessage mqttMessage = translatorDataKuraMqtt.translate((KuraDataMessage) null);\n+            stepData.put(\"MqttMessage\", mqttMessage);\n+        } catch (Exception ex) {\n+            verifyException(ex);\n+        }\n+    }\n+\n+    @When(\"^I try to translate invalid jms message to kura data message$\")\n+    public void iTryToTranslateInvalidJmsMessageToKuraDataMessage() throws Exception{\n+        try {\n+            KuraDataMessage kuraDataMessage = translatorDataJmsKura.translate((JmsMessage) null);\n+            stepData.put(\"KuraDataMessage\", kuraDataMessage);\n+        } catch (KapuaException ex) {\n+            verifyException(ex);\n+        }\n+    }\n+\n+    @When(\"^I try to translate invalid kura data message to jms message$\")\n+    public void iTryToTranslateInvalidKuraDataMessageToJmsMessage() throws Exception {\n+        try {\n+            JmsMessage jmsMessage = translatorDataKuraJms.translate((KuraDataMessage) null);\n+            stepData.put(\"JmsMessage\", jmsMessage);\n+        } catch (Exception ex){\n+            verifyException(ex);\n         }\n     }\n }\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "fa85bb5aacb679c2fa90beb7283e28fe27c5b234", "message": "Merge commit", "committedDate": null}, {"oid": "9f7bc792c823dcab476a48e34cf1be87ea7801fb", "committedDate": "2020-09-07 11:51:17 +0200", "message": "Added JUnit and I9 tests"}, {"oid": "a7f7240e48238651f4ffe159f5b0867092eb29b0", "committedDate": "2020-11-11 17:13:08 +0100", "message": "Upgrade to EPL-2.0"}, {"oid": "56bacf723fa05f9a6e83f524c9d6d158bf6f2298", "committedDate": "2020-11-11 17:13:11 +0100", "message": "Remove \"All rights reserved.\" from Copyright Headers"}, {"oid": "dd481c52c43202d55fe8f8c3aafdbec933230cb0", "committedDate": "2021-01-02 17:21:55 +0100", "message": "Update Copyright Year to 2021"}, {"oid": "a56f7b5fb1bb53eb407bcfa0b233e48305cbd534", "committedDate": "2021-08-26 09:29:51 +0200", "message": "external camel consumers"}, {"oid": "11ac0a839beb8414bd87fb1c93c90adfca02822b", "committedDate": "2021-08-26 09:29:51 +0200", "message": "external camel consumers"}, {"oid": "213469756f408e3756fc2d4ffe63560ea51cc399", "committedDate": "2021-09-09 14:48:22 +0200", "message": "external camel consumers - upgrade cucumber to 6.10.4"}, {"oid": "123f51e94d1afdb0fb2210f02f65c9f9e29dfe97", "committedDate": "2021-09-09 14:48:22 +0200", "message": "external camel consumers - upgrade cucumber to 6.10.4 - fixed steps/features/tests tags:"}, {"oid": "7a44c34bbf4c060622421c1cfff94e378681b61a", "committedDate": "2022-01-18 12:28:06 +0100", "message": "Fixed wrong syntax in steps"}, {"oid": "b2f2672d9b138ed1bc71ee1baf60069a326733c2", "committedDate": "2022-01-18 12:30:23 +0100", "message": "Fixed typos"}, {"oid": "72adba095b1dd3a8b7f4aa4fb56d2fa2c86a62bb", "committedDate": "2022-02-17 10:17:20 +0100", "message": "Updated copyright headers to 2022"}, {"oid": "5c5acc4009d68195d31608e448966fc433397f66", "committedDate": "2022-11-09 14:56:53 +0100", "message": "Added Configuration Change event handling and improved JMS-Kura translator implementation"}]}, {"oid": "2d7d0206645175175a1a27a3ca30d84bb82b5188", "url": "https://github.com/eclipse/kapua/commit/2d7d0206645175175a1a27a3ca30d84bb82b5188", "message": "Added unit tests for translator part1\n\nSigned-off-by: code-incubus <nemanja.milutinovic@comtrade.com>", "committedDate": "2020-04-24T22:21:26Z", "type": "forcePushed"}, {"oid": "5c351a848e74a3e0206411470d734c3d4650b36b", "url": "https://github.com/eclipse/kapua/commit/5c351a848e74a3e0206411470d734c3d4650b36b", "message": "Added unit tests for translator part1\n\nSigned-off-by: code-incubus <nemanja.milutinovic@comtrade.com>", "committedDate": "2020-04-24T22:38:20Z", "type": "commit"}, {"oid": "5c351a848e74a3e0206411470d734c3d4650b36b", "url": "https://github.com/eclipse/kapua/commit/5c351a848e74a3e0206411470d734c3d4650b36b", "message": "Added unit tests for translator part1\n\nSigned-off-by: code-incubus <nemanja.milutinovic@comtrade.com>", "committedDate": "2020-04-24T22:38:20Z", "type": "forcePushed"}]}