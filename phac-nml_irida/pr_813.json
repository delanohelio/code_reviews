{"pr_number": 813, "pr_title": "Cart server refactor", "pr_author": "joshsadam", "pr_createdAt": "2020-10-01T12:25:51Z", "pr_url": "https://github.com/phac-nml/irida/pull/813", "merge_commit": "29809f836356dc19df05024567240b242fd6aaab", "timeline": [{"oid": "3aa87b6a27e737d3ae3885e140c79ae3647b8d54", "url": "https://github.com/phac-nml/irida/commit/3aa87b6a27e737d3ae3885e140c79ae3647b8d54", "message": ":construction: Working on new cart api", "committedDate": "2020-09-30T14:29:51Z", "type": "commit"}, {"oid": "c759769055b1263f006ac8771cbefe269be37e6e", "url": "https://github.com/phac-nml/irida/commit/c759769055b1263f006ac8771cbefe269be37e6e", "message": ":construction: Updated adding samples to cart", "committedDate": "2020-09-30T17:52:03Z", "type": "commit"}, {"oid": "5a5efa04d126c467a94dbe2019f36047e429542a", "url": "https://github.com/phac-nml/irida/commit/5a5efa04d126c467a94dbe2019f36047e429542a", "message": ":construction: Cleaning up the CartController", "committedDate": "2020-10-01T11:38:34Z", "type": "commit"}, {"oid": "ad5d3a6dd970d7a448814783345f97baabd34ea9", "url": "https://github.com/phac-nml/irida/commit/ad5d3a6dd970d7a448814783345f97baabd34ea9", "message": "\ud83d\udea7 Working on fixing changes after new cart", "committedDate": "2020-10-01T15:22:36Z", "type": "commit"}, {"oid": "32b7c81648c35568968acb8b14576d7c80f06eec", "url": "https://github.com/phac-nml/irida/commit/32b7c81648c35568968acb8b14576d7c80f06eec", "message": ":construction: Cleaned up server response\n\nPreviously we were sending the project info with every sample.  This is a lot of wasted data.  Not the response is frame in terms of project, and those contain their own samples.", "committedDate": "2020-10-02T13:12:47Z", "type": "commit"}, {"oid": "c8af55bd9ff2aeb9d5b889619a44a74087180b3f", "url": "https://github.com/phac-nml/irida/commit/c8af55bd9ff2aeb9d5b889619a44a74087180b3f", "message": "Updated JavaDoc", "committedDate": "2020-10-05T14:02:47Z", "type": "commit"}, {"oid": "0c1fd2189ec85347b5806fd6463911e8f2ea7ad9", "url": "https://github.com/phac-nml/irida/commit/0c1fd2189ec85347b5806fd6463911e8f2ea7ad9", "message": "Updated JavaDoc", "committedDate": "2020-10-05T14:09:57Z", "type": "commit"}, {"oid": "57091b32d51a02091b5bf6e9a6ffb36aae1dae03", "url": "https://github.com/phac-nml/irida/commit/57091b32d51a02091b5bf6e9a6ffb36aae1dae03", "message": "Fix galaxy code", "committedDate": "2020-10-05T16:54:27Z", "type": "commit"}, {"oid": "e8689afbcd74a10d59a9d4bb83ff3c9a216f1f91", "url": "https://github.com/phac-nml/irida/commit/e8689afbcd74a10d59a9d4bb83ff3c9a216f1f91", "message": "Updated JavaDoc", "committedDate": "2020-10-05T18:19:12Z", "type": "commit"}, {"oid": "ba0e3a9e18d90522d8e6ae429ebcd269160bae13", "url": "https://github.com/phac-nml/irida/commit/ba0e3a9e18d90522d8e6ae429ebcd269160bae13", "message": "This version of the cart is no longer used", "committedDate": "2020-10-06T09:58:20Z", "type": "commit"}, {"oid": "a3a4e92edfa90f274ba499dfd31e3f7755dbec72", "url": "https://github.com/phac-nml/irida/commit/a3a4e92edfa90f274ba499dfd31e3f7755dbec72", "message": "Updated JavaDoc", "committedDate": "2020-10-06T11:27:46Z", "type": "commit"}, {"oid": "29a5c75c779d396581719102e4d29e633db3acef", "url": "https://github.com/phac-nml/irida/commit/29a5c75c779d396581719102e4d29e633db3acef", "message": "Updated JavaDoc", "committedDate": "2020-10-06T11:55:08Z", "type": "commit"}, {"oid": "62fce0f9a7eabe343cecf0451be520a302280f53", "url": "https://github.com/phac-nml/irida/commit/62fce0f9a7eabe343cecf0451be520a302280f53", "message": "Updated JavaDoc", "committedDate": "2020-10-06T11:59:29Z", "type": "commit"}, {"oid": "57a26578621738f7bc555da2cf24938b0d83a65c", "url": "https://github.com/phac-nml/irida/commit/57a26578621738f7bc555da2cf24938b0d83a65c", "message": "Merge branch 'development' into cart-server-refactor", "committedDate": "2020-10-06T12:03:44Z", "type": "commit"}, {"oid": "5bae1fae4f5489fe5b24d321815e4e894f568ec1", "url": "https://github.com/phac-nml/irida/commit/5bae1fae4f5489fe5b24d321815e4e894f568ec1", "message": "Updated CHANGELOG", "committedDate": "2020-10-06T12:05:27Z", "type": "commit"}, {"oid": "f58611dcacf9ee48b8662e993144b6ecaa79ef88", "url": "https://github.com/phac-nml/irida/commit/f58611dcacf9ee48b8662e993144b6ecaa79ef88", "message": "CartGalaxyController does not need to be session scoped any more", "committedDate": "2020-10-06T12:56:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQxMDM1Mg==", "url": "https://github.com/phac-nml/irida/pull/813#discussion_r500410352", "body": "Should be `Get the samples`", "bodyText": "Should be Get the samples", "bodyHTML": "<p dir=\"auto\">Should be <code>Get the samples</code></p>", "author": "deepsidhu85", "createdAt": "2020-10-06T15:52:05Z", "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/ajax/CartAjaxController.java", "diffHunk": "@@ -0,0 +1,99 @@\n+package ca.corefacility.bioinformatics.irida.ria.web.ajax;\n+\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.bind.annotation.*;\n+\n+import ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.cart.CartProject;\n+import ca.corefacility.bioinformatics.irida.ria.web.cart.dto.AddToCartRequest;\n+import ca.corefacility.bioinformatics.irida.ria.web.cart.dto.RemoveSampleRequest;\n+import ca.corefacility.bioinformatics.irida.ria.web.services.UICartService;\n+\n+/**\n+ * AJAX controller for cart functionality\n+ */\n+@RestController\n+@RequestMapping(\"/ajax/cart\")\n+public class CartAjaxController {\n+\tprivate final UICartService service;\n+\n+\t@Autowired\n+\tpublic CartAjaxController(UICartService service) {\n+\t\tthis.service = service;\n+\t}\n+\n+\t/**\n+\t * Add a set of samples to the cart from a particular project\n+\t *\n+\t * @param request Request to add sample to the cart\n+\t * @return the number of samples currrently in the cart\n+\t */\n+\t@PostMapping(\"\")\n+\tpublic ResponseEntity<Integer> addSamplesToCart(@RequestBody AddToCartRequest request) {\n+\t\treturn ResponseEntity.ok(service.addSamplesToCart(request));\n+\t}\n+\n+\t/**\n+\t * Get the number of samples from all projects that are currently in the cart\n+\t *\n+\t * @return the number of samples currently in the cart\n+\t */\n+\t@GetMapping(\"/count\")\n+\tpublic ResponseEntity<Integer> getNumberOfSamplesInCart() {\n+\t\treturn ResponseEntity.ok(service.getNumberOfSamplesInCart());\n+\t}\n+\n+\t/**\n+\t * Remove a sample from the cart\n+\t *\n+\t * @param request Request to move a sample from the cart\n+\t * @return the number of samples currently in the cart\n+\t */\n+\t@DeleteMapping(\"/sample\")\n+\tpublic ResponseEntity<Integer> removeSample(@RequestBody RemoveSampleRequest request) {\n+\t\treturn ResponseEntity.ok(service.removeSample(request));\n+\t}\n+\n+\t/**\n+\t * Remove all samples from a specific project from the cart\n+\t *\n+\t * @param id for a project\n+\t * @return the number of samples currently in the cart\n+\t */\n+\t@DeleteMapping(\"/project\")\n+\tpublic ResponseEntity<Integer> removeProject(@RequestParam Long id) {\n+\t\treturn ResponseEntity.ok(service.removeProject(id));\n+\t}\n+\n+\t/**\n+\t * Completely empty the cart\n+\t */\n+\t@DeleteMapping(\"\")\n+\tpublic void emptyCart() {\n+\t\tservice.emptyCart();\n+\t}\n+\n+\t/**\n+\t * Get a list of project identifiers for projects that have samples in the cart.\n+\t *\n+\t * @return list of project identifiers\n+\t */\n+\t@GetMapping(\"/ids\")\n+\tpublic ResponseEntity<Set<Long>> getProjectIdsInCart() {\n+\t\treturn ResponseEntity.ok(service.getProjectIdsInCart());\n+\t}\n+\n+\t/**\n+\t * Cart the samples that are in the cart for a specific project", "originalCommit": "f58611dcacf9ee48b8662e993144b6ecaa79ef88", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ1NjkwMQ==", "url": "https://github.com/phac-nml/irida/pull/813#discussion_r500456901", "bodyText": "Fixed in 7ff3cc6", "author": "joshsadam", "createdAt": "2020-10-06T17:02:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQxMDM1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "7ff3cc60b7ad101a19b06bf2ea94e6e007a93528", "changed_code": [{"header": "diff --git a/src/main/java/ca/corefacility/bioinformatics/irida/ria/web/ajax/CartAjaxController.java b/src/main/java/ca/corefacility/bioinformatics/irida/ria/web/ajax/CartAjaxController.java\nindex 88227750a8..1ef941b035 100644\n--- a/src/main/java/ca/corefacility/bioinformatics/irida/ria/web/ajax/CartAjaxController.java\n+++ b/src/main/java/ca/corefacility/bioinformatics/irida/ria/web/ajax/CartAjaxController.java\n", "chunk": "@@ -87,7 +86,7 @@ public class CartAjaxController {\n \t}\n \n \t/**\n-\t * Cart the samples that are in the cart for a specific project\n+\t * Get the samples that are in the cart for a specific project\n \t *\n \t * @param ids List of project identifiers to get the samples for.\n \t * @return Samples that are currently in the cart for specific projects\n", "next_change": {"commit": "355003282dbbbbf2cc92247eb2a8b80b5b121a5f", "changed_code": [{"header": "diff --git a/src/main/java/ca/corefacility/bioinformatics/irida/ria/web/ajax/CartAjaxController.java b/src/main/java/ca/corefacility/bioinformatics/irida/ria/web/ajax/CartAjaxController.java\nindex 1ef941b035..bcfb23a3b2 100644\n--- a/src/main/java/ca/corefacility/bioinformatics/irida/ria/web/ajax/CartAjaxController.java\n+++ b/src/main/java/ca/corefacility/bioinformatics/irida/ria/web/ajax/CartAjaxController.java\n", "chunk": "@@ -92,7 +92,7 @@ public class CartAjaxController {\n \t * @return Samples that are currently in the cart for specific projects\n \t */\n \t@GetMapping(\"/samples\")\n-\tpublic ResponseEntity<List<CartProject>> getCartSamplesForProjects(@RequestParam List<Long> ids) {\n+\tpublic ResponseEntity<List<CartProjectModel>> getCartSamplesForProjects(@RequestParam List<Long> ids) {\n \t\treturn ResponseEntity.ok(service.getSamplesForProjects(ids));\n \t}\n }\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQzNTAxNQ==", "url": "https://github.com/phac-nml/irida/pull/813#discussion_r500435015", "body": "As this is a model for the UI rename it to `CartProjectModel`", "bodyText": "As this is a model for the UI rename it to CartProjectModel", "bodyHTML": "<p dir=\"auto\">As this is a model for the UI rename it to <code>CartProjectModel</code></p>", "author": "deepsidhu85", "createdAt": "2020-10-06T16:28:20Z", "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/ajax/dto/cart/CartProject.java", "diffHunk": "@@ -0,0 +1,35 @@\n+package ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.cart;\n+\n+import java.util.List;\n+\n+import ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.CartSample;\n+\n+/**\n+ * Model for UI to represent a project and its sample within the cart.\n+ */\n+public class CartProject {", "originalCommit": "f58611dcacf9ee48b8662e993144b6ecaa79ef88", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ1ODg0OA==", "url": "https://github.com/phac-nml/irida/pull/813#discussion_r500458848", "bodyText": "Updated in 3550032", "author": "joshsadam", "createdAt": "2020-10-06T17:05:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQzNTAxNQ=="}], "type": "inlineReview", "revised_code": {"commit": "355003282dbbbbf2cc92247eb2a8b80b5b121a5f", "changed_code": [{"header": "diff --git a/src/main/java/ca/corefacility/bioinformatics/irida/ria/web/ajax/dto/cart/CartProject.java b/src/main/java/ca/corefacility/bioinformatics/irida/ria/web/ajax/dto/cart/CartProjectModel.java\nsimilarity index 88%\nrename from src/main/java/ca/corefacility/bioinformatics/irida/ria/web/ajax/dto/cart/CartProject.java\nrename to src/main/java/ca/corefacility/bioinformatics/irida/ria/web/ajax/dto/cart/CartProjectModel.java\nindex c2ec8145cf..d7401f2363 100644\n--- a/src/main/java/ca/corefacility/bioinformatics/irida/ria/web/ajax/dto/cart/CartProject.java\n+++ b/src/main/java/ca/corefacility/bioinformatics/irida/ria/web/ajax/dto/cart/CartProjectModel.java\n", "chunk": "@@ -1,18 +1,18 @@\n package ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.cart;\n \n-import java.util.List;\n-\n import ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.CartSample;\n \n+import java.util.List;\n+\n /**\n  * Model for UI to represent a project and its sample within the cart.\n  */\n-public class CartProject {\n+public class CartProjectModel {\n \tprivate final Long id;\n \tprivate final String label;\n \tprivate  List<CartSample> samples;\n \n-\tpublic CartProject(Long id, String label) {\n+\tpublic CartProjectModel(Long id, String label) {\n \t\tthis.id = id;\n \t\tthis.label = label;\n \t}\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQzNTg3NQ==", "url": "https://github.com/phac-nml/irida/pull/813#discussion_r500435875", "body": "Remove the `final`", "bodyText": "Remove the final", "bodyHTML": "<p dir=\"auto\">Remove the <code>final</code></p>", "author": "deepsidhu85", "createdAt": "2020-10-06T16:29:41Z", "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/cart/CartController.java", "diffHunk": "@@ -1,49 +1,32 @@\n package ca.corefacility.bioinformatics.irida.ria.web.cart;\n \n-import ca.corefacility.bioinformatics.irida.model.project.Project;\n-import ca.corefacility.bioinformatics.irida.model.sample.Sample;\n-import ca.corefacility.bioinformatics.irida.ria.web.cart.components.Cart;\n-import ca.corefacility.bioinformatics.irida.ria.web.cart.dto.*;\n-import ca.corefacility.bioinformatics.irida.ria.web.oauth.GalaxyRedirectionEndpointController;\n-import ca.corefacility.bioinformatics.irida.service.ProjectService;\n-import ca.corefacility.bioinformatics.irida.service.sample.SampleService;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.beans.factory.annotation.Qualifier;\n import org.springframework.beans.factory.annotation.Value;\n-import org.springframework.context.annotation.Scope;\n import org.springframework.http.MediaType;\n import org.springframework.stereotype.Controller;\n import org.springframework.ui.Model;\n-import org.springframework.web.bind.annotation.*;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestParam;\n \n-import java.util.*;\n+import ca.corefacility.bioinformatics.irida.ria.web.oauth.GalaxyRedirectionEndpointController;\n \n /**\n  * Controller managing interactions with the selected sequences\n  */\n @Controller\n-@Scope(\"session\")\n @RequestMapping(\"/cart\")\n public class CartController {\n-\tprivate Cart cart;\n-\n-\tprivate final SampleService sampleService;\n-\tprivate final ProjectService projectService;\n-\n \t@Value(\"${server.base.url}\")\n \tprivate String serverBaseUrl;\n \t/*\n \t * Additional variables\n \t */\n-\tprivate String iridaPipelinePluginStyle;\n+\tprivate final String iridaPipelinePluginStyle;", "originalCommit": "f58611dcacf9ee48b8662e993144b6ecaa79ef88", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ1OTU0MA==", "url": "https://github.com/phac-nml/irida/pull/813#discussion_r500459540", "bodyText": "Updated in 720b1f6", "author": "joshsadam", "createdAt": "2020-10-06T17:06:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQzNTg3NQ=="}], "type": "inlineReview", "revised_code": {"commit": "720b1f646043b2d45e37716fa49ddeb822744838", "changed_code": [{"header": "diff --git a/src/main/java/ca/corefacility/bioinformatics/irida/ria/web/cart/CartController.java b/src/main/java/ca/corefacility/bioinformatics/irida/ria/web/cart/CartController.java\nindex fa42b29f1c..1a693983ef 100644\n--- a/src/main/java/ca/corefacility/bioinformatics/irida/ria/web/cart/CartController.java\n+++ b/src/main/java/ca/corefacility/bioinformatics/irida/ria/web/cart/CartController.java\n", "chunk": "@@ -22,7 +21,7 @@ public class CartController {\n \t/*\n \t * Additional variables\n \t */\n-\tprivate final String iridaPipelinePluginStyle;\n+\tprivate String iridaPipelinePluginStyle;\n \n \t@Autowired\n \tpublic CartController(@Qualifier(\"iridaPipelinePluginStyle\") String iridaPipelinePluginStyle) {\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQzNzU5MQ==", "url": "https://github.com/phac-nml/irida/pull/813#discussion_r500437591", "body": "Remove the `final` from the variables", "bodyText": "Remove the final from the variables", "bodyHTML": "<p dir=\"auto\">Remove the <code>final</code> from the variables</p>", "author": "deepsidhu85", "createdAt": "2020-10-06T16:32:14Z", "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/cart/CartGalaxyController.java", "diffHunk": "@@ -12,27 +13,26 @@\n import org.springframework.web.bind.annotation.RequestMapping;\n import org.springframework.web.bind.annotation.RestController;\n \n+import ca.corefacility.bioinformatics.irida.model.project.Project;\n import ca.corefacility.bioinformatics.irida.model.sample.Sample;\n import ca.corefacility.bioinformatics.irida.ria.config.GalaxySessionInterceptor;\n-import ca.corefacility.bioinformatics.irida.ria.web.cart.components.Cart;\n-import ca.corefacility.bioinformatics.irida.ria.web.cart.dto.CartSample;\n import ca.corefacility.bioinformatics.irida.ria.web.cart.dto.GalaxyExportSample;\n+import ca.corefacility.bioinformatics.irida.ria.web.services.UICartService;\n import ca.corefacility.bioinformatics.irida.service.sample.SampleService;\n \n /**\n  * Controller to handle all ajax requests made to the cart that have to do with Galaxy.\n  */\n @RestController\n-@Scope(\"session\")\n @RequestMapping(\"/ajax/galaxy-export\")\n public class CartGalaxyController {\n-\tprivate SampleService sampleService;\n-\tprivate Cart cart;\n+\tprivate final SampleService sampleService;", "originalCommit": "f58611dcacf9ee48b8662e993144b6ecaa79ef88", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ1OTk1Ng==", "url": "https://github.com/phac-nml/irida/pull/813#discussion_r500459956", "bodyText": "Updated in 0019e23", "author": "joshsadam", "createdAt": "2020-10-06T17:07:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQzNzU5MQ=="}], "type": "inlineReview", "revised_code": {"commit": "0019e2334d708eab552b72a2f9e3acea265c71c3", "changed_code": [{"header": "diff --git a/src/main/java/ca/corefacility/bioinformatics/irida/ria/web/cart/CartGalaxyController.java b/src/main/java/ca/corefacility/bioinformatics/irida/ria/web/cart/CartGalaxyController.java\nindex d2aac27391..66a90a142a 100644\n--- a/src/main/java/ca/corefacility/bioinformatics/irida/ria/web/cart/CartGalaxyController.java\n+++ b/src/main/java/ca/corefacility/bioinformatics/irida/ria/web/cart/CartGalaxyController.java\n", "chunk": "@@ -1,24 +1,21 @@\n package ca.corefacility.bioinformatics.irida.ria.web.cart;\n \n-import java.util.List;\n-import java.util.Map;\n-import java.util.stream.Collectors;\n-import java.util.stream.Stream;\n-\n-import javax.servlet.http.HttpServletRequest;\n-import javax.servlet.http.HttpSession;\n-\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.context.annotation.Scope;\n-import org.springframework.web.bind.annotation.RequestMapping;\n-import org.springframework.web.bind.annotation.RestController;\n-\n import ca.corefacility.bioinformatics.irida.model.project.Project;\n import ca.corefacility.bioinformatics.irida.model.sample.Sample;\n import ca.corefacility.bioinformatics.irida.ria.config.GalaxySessionInterceptor;\n import ca.corefacility.bioinformatics.irida.ria.web.cart.dto.GalaxyExportSample;\n import ca.corefacility.bioinformatics.irida.ria.web.services.UICartService;\n import ca.corefacility.bioinformatics.irida.service.sample.SampleService;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpSession;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n \n /**\n  * Controller to handle all ajax requests made to the cart that have to do with Galaxy.\n", "next_change": {"commit": "f40df94f064d6b214c61a4dd3795ff6330ec33e1", "changed_code": [{"header": "diff --git a/src/main/java/ca/corefacility/bioinformatics/irida/ria/web/cart/CartGalaxyController.java b/src/main/java/ca/corefacility/bioinformatics/irida/ria/web/cart/CartGalaxyController.java\nindex 66a90a142a..65016267e0 100644\n--- a/src/main/java/ca/corefacility/bioinformatics/irida/ria/web/cart/CartGalaxyController.java\n+++ b/src/main/java/ca/corefacility/bioinformatics/irida/ria/web/cart/CartGalaxyController.java\n", "chunk": "@@ -23,35 +23,36 @@ import java.util.stream.Stream;\n @RestController\n @RequestMapping(\"/ajax/galaxy-export\")\n public class CartGalaxyController {\n-\tprivate SampleService sampleService;\n-\tprivate UICartService cartService;\n+    private SampleService sampleService;\n+    private UICartService cartService;\n \n-\t@Autowired\n-\tpublic CartGalaxyController(SampleService sampleService, UICartService cartService) {\n-\t\tthis.sampleService = sampleService;\n-\t\tthis.cartService = cartService;\n-\t}\n+    @Autowired\n+    public CartGalaxyController(SampleService sampleService, UICartService cartService) {\n+        this.sampleService = sampleService;\n+        this.cartService = cartService;\n+    }\n \n-\t/**\n-\t * Get a list of links for all {@link Sample} to be exported to the Galaxy Client.\n-\t * @return {@link List} of {@link Sample} links.\n-\t */\n-\t@RequestMapping(\"/samples\")\n-\tpublic List<GalaxyExportSample> getGalaxyExportForm() {\n-\t\tMap<Project, List<Sample>> contents = cartService.getFullCart();\n-\t\treturn contents.entrySet().stream().map(entry -> entry.getValue().stream().map(sample -> new GalaxyExportSample(sample, entry.getKey().getId()))).flatMap(\n-\t\t\t\tStream::distinct).collect(Collectors.toList());\n-\t}\n+    /**\n+     * Get a list of links for all {@link Sample} to be exported to the Galaxy Client.\n+     *\n+     * @return {@link List} of {@link Sample} links.\n+     */\n+    @RequestMapping(\"/samples\")\n+    public List<GalaxyExportSample> getGalaxyExportForm() {\n+        Map<Project, List<Sample>> contents = cartService.getFullCart();\n+        return contents.entrySet().stream().map(entry -> entry.getValue().stream().map(sample -> new GalaxyExportSample(sample, entry.getKey().getId()))).flatMap(\n+                Stream::distinct).collect(Collectors.toList());\n+    }\n \n-\t/**\n-\t * Remove the Galaxy attributes from the session.\n-\t *\n-\t * @param request - the current {@link HttpServletRequest}\n-\t */\n-\t@RequestMapping(\"remove\")\n-\tpublic void removeGalaxySession(HttpServletRequest request) {\n-\t\tHttpSession session = request.getSession();\n-\t\tsession.removeAttribute(GalaxySessionInterceptor.GALAXY_CALLBACK_URL);\n-\t\tsession.removeAttribute(GalaxySessionInterceptor.GALAXY_CLIENT_ID);\n-\t}\n+    /**\n+     * Remove the Galaxy attributes from the session.\n+     *\n+     * @param request - the current {@link HttpServletRequest}\n+     */\n+    @RequestMapping(\"remove\")\n+    public void removeGalaxySession(HttpServletRequest request) {\n+        HttpSession session = request.getSession();\n+        session.removeAttribute(GalaxySessionInterceptor.GALAXY_CALLBACK_URL);\n+        session.removeAttribute(GalaxySessionInterceptor.GALAXY_CLIENT_ID);\n+    }\n }\n", "next_change": null}]}}, {"header": "diff --git a/src/main/java/ca/corefacility/bioinformatics/irida/ria/web/cart/CartGalaxyController.java b/src/main/java/ca/corefacility/bioinformatics/irida/ria/web/cart/CartGalaxyController.java\nindex d2aac27391..66a90a142a 100644\n--- a/src/main/java/ca/corefacility/bioinformatics/irida/ria/web/cart/CartGalaxyController.java\n+++ b/src/main/java/ca/corefacility/bioinformatics/irida/ria/web/cart/CartGalaxyController.java\n", "chunk": "@@ -26,8 +23,8 @@ import ca.corefacility.bioinformatics.irida.service.sample.SampleService;\n @RestController\n @RequestMapping(\"/ajax/galaxy-export\")\n public class CartGalaxyController {\n-\tprivate final SampleService sampleService;\n-\tprivate final UICartService cartService;\n+\tprivate SampleService sampleService;\n+\tprivate UICartService cartService;\n \n \t@Autowired\n \tpublic CartGalaxyController(SampleService sampleService, UICartService cartService) {\n", "next_change": {"commit": "f40df94f064d6b214c61a4dd3795ff6330ec33e1", "changed_code": [{"header": "diff --git a/src/main/java/ca/corefacility/bioinformatics/irida/ria/web/cart/CartGalaxyController.java b/src/main/java/ca/corefacility/bioinformatics/irida/ria/web/cart/CartGalaxyController.java\nindex 66a90a142a..65016267e0 100644\n--- a/src/main/java/ca/corefacility/bioinformatics/irida/ria/web/cart/CartGalaxyController.java\n+++ b/src/main/java/ca/corefacility/bioinformatics/irida/ria/web/cart/CartGalaxyController.java\n", "chunk": "@@ -23,35 +23,36 @@ import java.util.stream.Stream;\n @RestController\n @RequestMapping(\"/ajax/galaxy-export\")\n public class CartGalaxyController {\n-\tprivate SampleService sampleService;\n-\tprivate UICartService cartService;\n+    private SampleService sampleService;\n+    private UICartService cartService;\n \n-\t@Autowired\n-\tpublic CartGalaxyController(SampleService sampleService, UICartService cartService) {\n-\t\tthis.sampleService = sampleService;\n-\t\tthis.cartService = cartService;\n-\t}\n+    @Autowired\n+    public CartGalaxyController(SampleService sampleService, UICartService cartService) {\n+        this.sampleService = sampleService;\n+        this.cartService = cartService;\n+    }\n \n-\t/**\n-\t * Get a list of links for all {@link Sample} to be exported to the Galaxy Client.\n-\t * @return {@link List} of {@link Sample} links.\n-\t */\n-\t@RequestMapping(\"/samples\")\n-\tpublic List<GalaxyExportSample> getGalaxyExportForm() {\n-\t\tMap<Project, List<Sample>> contents = cartService.getFullCart();\n-\t\treturn contents.entrySet().stream().map(entry -> entry.getValue().stream().map(sample -> new GalaxyExportSample(sample, entry.getKey().getId()))).flatMap(\n-\t\t\t\tStream::distinct).collect(Collectors.toList());\n-\t}\n+    /**\n+     * Get a list of links for all {@link Sample} to be exported to the Galaxy Client.\n+     *\n+     * @return {@link List} of {@link Sample} links.\n+     */\n+    @RequestMapping(\"/samples\")\n+    public List<GalaxyExportSample> getGalaxyExportForm() {\n+        Map<Project, List<Sample>> contents = cartService.getFullCart();\n+        return contents.entrySet().stream().map(entry -> entry.getValue().stream().map(sample -> new GalaxyExportSample(sample, entry.getKey().getId()))).flatMap(\n+                Stream::distinct).collect(Collectors.toList());\n+    }\n \n-\t/**\n-\t * Remove the Galaxy attributes from the session.\n-\t *\n-\t * @param request - the current {@link HttpServletRequest}\n-\t */\n-\t@RequestMapping(\"remove\")\n-\tpublic void removeGalaxySession(HttpServletRequest request) {\n-\t\tHttpSession session = request.getSession();\n-\t\tsession.removeAttribute(GalaxySessionInterceptor.GALAXY_CALLBACK_URL);\n-\t\tsession.removeAttribute(GalaxySessionInterceptor.GALAXY_CLIENT_ID);\n-\t}\n+    /**\n+     * Remove the Galaxy attributes from the session.\n+     *\n+     * @param request - the current {@link HttpServletRequest}\n+     */\n+    @RequestMapping(\"remove\")\n+    public void removeGalaxySession(HttpServletRequest request) {\n+        HttpSession session = request.getSession();\n+        session.removeAttribute(GalaxySessionInterceptor.GALAXY_CALLBACK_URL);\n+        session.removeAttribute(GalaxySessionInterceptor.GALAXY_CLIENT_ID);\n+    }\n }\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQzODE1NA==", "url": "https://github.com/phac-nml/irida/pull/813#discussion_r500438154", "body": "Might need to apply the irida intellij styling to this method", "bodyText": "Might need to apply the irida intellij styling to this method", "bodyHTML": "<p dir=\"auto\">Might need to apply the irida intellij styling to this method</p>", "author": "deepsidhu85", "createdAt": "2020-10-06T16:33:03Z", "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/cart/CartGalaxyController.java", "diffHunk": "@@ -41,14 +41,9 @@ public CartGalaxyController(SampleService sampleService, Cart cart) {\n \t */\n \t@RequestMapping(\"/samples\")\n \tpublic List<GalaxyExportSample> getGalaxyExportForm() {\n-\t\tMap<Long, Map<Long, CartSample>> contents = cart.get();\n-\t\tList<GalaxyExportSample> result = new ArrayList<>();\n-\t\tfor (Long projectId : contents.keySet()) {\n-\t\t\tIterable<Sample> samples = sampleService.readMultiple(contents.get(projectId)\n-\t\t\t\t\t.keySet());\n-\t\t\tsamples.forEach(s -> result.add(new GalaxyExportSample(s, projectId)));\n-\t\t}\n-\t\treturn result;\n+\t\tMap<Project, List<Sample>> contents = cartService.getFullCart();", "originalCommit": "f58611dcacf9ee48b8662e993144b6ecaa79ef88", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f40df94f064d6b214c61a4dd3795ff6330ec33e1", "changed_code": [{"header": "diff --git a/src/main/java/ca/corefacility/bioinformatics/irida/ria/web/cart/CartGalaxyController.java b/src/main/java/ca/corefacility/bioinformatics/irida/ria/web/cart/CartGalaxyController.java\nindex d2aac27391..65016267e0 100644\n--- a/src/main/java/ca/corefacility/bioinformatics/irida/ria/web/cart/CartGalaxyController.java\n+++ b/src/main/java/ca/corefacility/bioinformatics/irida/ria/web/cart/CartGalaxyController.java\n", "chunk": "@@ -26,35 +23,36 @@ import ca.corefacility.bioinformatics.irida.service.sample.SampleService;\n @RestController\n @RequestMapping(\"/ajax/galaxy-export\")\n public class CartGalaxyController {\n-\tprivate final SampleService sampleService;\n-\tprivate final UICartService cartService;\n-\n-\t@Autowired\n-\tpublic CartGalaxyController(SampleService sampleService, UICartService cartService) {\n-\t\tthis.sampleService = sampleService;\n-\t\tthis.cartService = cartService;\n-\t}\n-\n-\t/**\n-\t * Get a list of links for all {@link Sample} to be exported to the Galaxy Client.\n-\t * @return {@link List} of {@link Sample} links.\n-\t */\n-\t@RequestMapping(\"/samples\")\n-\tpublic List<GalaxyExportSample> getGalaxyExportForm() {\n-\t\tMap<Project, List<Sample>> contents = cartService.getFullCart();\n-\t\treturn contents.entrySet().stream().map(entry -> entry.getValue().stream().map(sample -> new GalaxyExportSample(sample, entry.getKey().getId()))).flatMap(\n-\t\t\t\tStream::distinct).collect(Collectors.toList());\n-\t}\n-\n-\t/**\n-\t * Remove the Galaxy attributes from the session.\n-\t *\n-\t * @param request - the current {@link HttpServletRequest}\n-\t */\n-\t@RequestMapping(\"remove\")\n-\tpublic void removeGalaxySession(HttpServletRequest request) {\n-\t\tHttpSession session = request.getSession();\n-\t\tsession.removeAttribute(GalaxySessionInterceptor.GALAXY_CALLBACK_URL);\n-\t\tsession.removeAttribute(GalaxySessionInterceptor.GALAXY_CLIENT_ID);\n-\t}\n+    private SampleService sampleService;\n+    private UICartService cartService;\n+\n+    @Autowired\n+    public CartGalaxyController(SampleService sampleService, UICartService cartService) {\n+        this.sampleService = sampleService;\n+        this.cartService = cartService;\n+    }\n+\n+    /**\n+     * Get a list of links for all {@link Sample} to be exported to the Galaxy Client.\n+     *\n+     * @return {@link List} of {@link Sample} links.\n+     */\n+    @RequestMapping(\"/samples\")\n+    public List<GalaxyExportSample> getGalaxyExportForm() {\n+        Map<Project, List<Sample>> contents = cartService.getFullCart();\n+        return contents.entrySet().stream().map(entry -> entry.getValue().stream().map(sample -> new GalaxyExportSample(sample, entry.getKey().getId()))).flatMap(\n+                Stream::distinct).collect(Collectors.toList());\n+    }\n+\n+    /**\n+     * Remove the Galaxy attributes from the session.\n+     *\n+     * @param request - the current {@link HttpServletRequest}\n+     */\n+    @RequestMapping(\"remove\")\n+    public void removeGalaxySession(HttpServletRequest request) {\n+        HttpSession session = request.getSession();\n+        session.removeAttribute(GalaxySessionInterceptor.GALAXY_CALLBACK_URL);\n+        session.removeAttribute(GalaxySessionInterceptor.GALAXY_CLIENT_ID);\n+    }\n }\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ0MDI5Mw==", "url": "https://github.com/phac-nml/irida/pull/813#discussion_r500440293", "body": "Remove the `final` from the variables", "bodyText": "Remove the final from the variables", "bodyHTML": "<p dir=\"auto\">Remove the <code>final</code> from the variables</p>", "author": "deepsidhu85", "createdAt": "2020-10-06T16:36:20Z", "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/pipelines/PipelineController.java", "diffHunk": "@@ -83,45 +83,41 @@\n \t/*\n \t * SERVICES\n \t */\n-\tprivate ReferenceFileService referenceFileService;\n-\tprivate SequencingObjectService sequencingObjectService;\n-\tprivate AnalysisSubmissionService analysisSubmissionService;\n-\tprivate ProjectService projectService;\n-\tprivate UserService userService;\n-\tprivate IridaWorkflowsService workflowsService;\n-\tprivate MessageSource messageSource;\n+\tprivate final ReferenceFileService referenceFileService;", "originalCommit": "f58611dcacf9ee48b8662e993144b6ecaa79ef88", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "82e5a94bf2cf47a92e2795d0b3966b2643609fa5", "changed_code": [{"header": "diff --git a/src/main/java/ca/corefacility/bioinformatics/irida/ria/web/pipelines/PipelineController.java b/src/main/java/ca/corefacility/bioinformatics/irida/ria/web/pipelines/PipelineController.java\nindex 6ccb705623..5a405ea40d 100644\n--- a/src/main/java/ca/corefacility/bioinformatics/irida/ria/web/pipelines/PipelineController.java\n+++ b/src/main/java/ca/corefacility/bioinformatics/irida/ria/web/pipelines/PipelineController.java\n", "chunk": "@@ -63,573 +61,572 @@ import com.google.common.collect.Sets;\n @Controller\n @RequestMapping(PipelineController.BASE_URL)\n public class PipelineController extends BaseController {\n-\t// URI's\n-\tpublic static final String BASE_URL = \"/pipelines\";\n-\t/*\n-\t * CONSTANTS\n-\t */\n-\tprivate static final String DEFAULT_WORKFLOW_PARAMETERS_ID = \"default\";\n-\tprivate static final String CUSTOM_UNSAVED_WORKFLOW_PARAMETERS_ID = \"custom\";\n-\tpublic static final String URL_EMPTY_CART_REDIRECT = \"redirect:/pipelines\";\n-\tpublic static final String URL_LAUNCH = \"pipelines/pipeline_selection\";\n-\tpublic static final String URL_GENERIC_PIPELINE = \"pipelines/types/generic_pipeline\";\n-\tpublic static final String URI_LIST_PIPELINES = \"/ajax/list.json\";\n-\tpublic static final String URI_AJAX_START_PIPELINE = \"/ajax/start.json\";\n-\tpublic static final String URI_AJAX_CART_LIST = \"/ajax/cart_list.json\";\n-\t// JSON KEYS\n-\tpublic static final String JSON_KEY_SAMPLE_ID = \"id\";\n-\tpublic static final String JSON_KEY_SAMPLE_OMIT_FILES_LIST = \"omit\";\n-\tprivate static final Logger logger = LoggerFactory.getLogger(PipelineController.class);\n-\t/*\n-\t * SERVICES\n-\t */\n-\tprivate final ReferenceFileService referenceFileService;\n-\tprivate final SequencingObjectService sequencingObjectService;\n-\tprivate final AnalysisSubmissionService analysisSubmissionService;\n-\tprivate final ProjectService projectService;\n-\tprivate final UserService userService;\n-\tprivate final IridaWorkflowsService workflowsService;\n-\tprivate final MessageSource messageSource;\n-\tprivate final WorkflowNamedParametersService namedParameterService;\n-\tprivate final UpdateSamplePermission updateSamplePermission;\n-\tprivate final AnalysisSubmissionSampleProcessor analysisSubmissionSampleProcessor;\n-\tprivate final GalaxyToolDataService galaxyToolDataService;\n-\tprivate final EmailController emailController;\n-\tprivate final UICartService cartService;\n-\n-\t@Autowired\n-\tpublic PipelineController(SequencingObjectService sequencingObjectService,\n-\t\t\tReferenceFileService referenceFileService, AnalysisSubmissionService analysisSubmissionService,\n-\t\t\tIridaWorkflowsService iridaWorkflowsService, ProjectService projectService, UserService userService,\n-\t\t\tMessageSource messageSource,\n-\t\t\tfinal WorkflowNamedParametersService namedParameterService, UpdateSamplePermission updateSamplePermission,\n-\t\t\tAnalysisSubmissionSampleProcessor analysisSubmissionSampleProcessor,\n-\t\t\tGalaxyToolDataService galaxyToolDataService, EmailController emailController, UICartService cartService) {\n-\t\tthis.sequencingObjectService = sequencingObjectService;\n-\t\tthis.referenceFileService = referenceFileService;\n-\t\tthis.analysisSubmissionService = analysisSubmissionService;\n-\t\tthis.workflowsService = iridaWorkflowsService;\n-\t\tthis.projectService = projectService;\n-\t\tthis.userService = userService;\n-\t\tthis.messageSource = messageSource;\n-\t\tthis.namedParameterService = namedParameterService;\n-\t\tthis.updateSamplePermission = updateSamplePermission;\n-\t\tthis.analysisSubmissionSampleProcessor = analysisSubmissionSampleProcessor;\n-\t\tthis.galaxyToolDataService = galaxyToolDataService;\n-\t\tthis.emailController = emailController;\n-\t\tthis.cartService = cartService;\n-\t}\n-\n-\t/**\n-\t * Get a generic pipeline page.\n-\t *\n-\t * @param model      the the model for the current request\n-\t * @param principal  the user in the current request\n-\t * @param locale     the locale that the user is using\n-\t * @param pipelineId the pipeline to load\n-\t * @param projectId  Project ID to add a {@link ca.corefacility.bioinformatics.irida.model.workflow.submission.AnalysisSubmissionTemplate}\n-\t *                   if necessary (not required)\n-\t * @return a page reference or redirect to load.\n-\t */\n-\t@RequestMapping(value = \"/{pipelineId}\")\n-\tpublic String getSpecifiedPipelinePage(final Model model, Principal principal, Locale locale,\n-\t\t\t@PathVariable UUID pipelineId, @RequestParam(name = \"automatedProject\", required = false) Long projectId) {\n-\t\tString response = URL_EMPTY_CART_REDIRECT;\n-\t\tboolean canUpdateAllSamples;\n-\n-\t\tMap<Project, List<Sample>> cart = cartService.getFullCart();\n-\n-\t\tSet<Project> projects = cart.keySet();\n-\n-\t\t//if we have a project id, overwrite the project set from the cart\n-\t\tif (projectId != null) {\n-\t\t\tProject project = projectService.read(projectId);\n-\t\t\tprojects = Sets.newHashSet(project);\n-\n-\t\t\tmodel.addAttribute(\"automatedProject\", project);\n-\t\t\t//this is separate because the view can't handle dereferencing a null project if one isn't set\n-\t\t\tmodel.addAttribute(\"automatedProjectId\", project.getId());\n-\t\t}\n-\n-\t\t// Ensure we have something in the cart or an automated pipeline project\n-\t\tif (!projects.isEmpty()) {\n-\t\t\tAuthentication authentication = SecurityContextHolder.getContext()\n-\t\t\t\t\t.getAuthentication();\n-\n-\t\t\tIridaWorkflow flow = null;\n-\t\t\ttry {\n-\t\t\t\tflow = workflowsService.getDisplayableIridaWorkflow(pipelineId);\n-\t\t\t} catch (IridaWorkflowNotFoundException | IridaWorkflowNotDisplayableException e) {\n-\t\t\t\tlogger.error(\"Workflow not found or not displayable - See stack:\", e);\n-\t\t\t\treturn \"redirect:errors/not_found\";\n-\t\t\t}\n-\n-\t\t\t// Check if there even is functionality to update samples from results for this pipeline\n-\t\t\tcanUpdateAllSamples = analysisSubmissionSampleProcessor.hasRegisteredAnalysisSampleUpdater(\n-\t\t\t\t\tflow.getWorkflowDescription()\n-\t\t\t\t\t\t\t.getAnalysisType());\n-\n-\t\t\tUser user = userService.getUserByUsername(principal.getName());\n-\t\t\t// Get all the reference files that could be used for this pipeline.\n-\t\t\tList<Map<String, Object>> referenceFileList = new ArrayList<>();\n-\t\t\tList<Map<String, Object>> projectList = new ArrayList<>();\n-\t\t\tList<Map<String, Object>> addRefList = new ArrayList<>();\n-\t\t\tIridaWorkflowDescription description = flow.getWorkflowDescription();\n-\t\t\tfinal String workflowName = description.getName()\n-\t\t\t\t\t.toLowerCase();\n-\n-\t\t\t//loop through the projects in the set to get their files\n-\t\t\tfor (Project project : projects) {\n-\t\t\t\t// Check to see if the pipeline requires a reference file.\n-\t\t\t\tif (description.requiresReference()) {\n-\t\t\t\t\tList<Join<Project, ReferenceFile>> joinList = referenceFileService.getReferenceFilesForProject(\n-\t\t\t\t\t\t\tproject);\n-\n-\t\t\t\t\t//add the ref files from the projects\n-\t\t\t\t\tfor (Join<Project, ReferenceFile> join : joinList) {\n-\t\t\t\t\t\treferenceFileList.add(ImmutableMap.of(\"project\", project, \"file\", join.getObject()));\n-\t\t\t\t\t}\n-\n-\t\t\t\t\t//if there's no ref files, show the user projects they can add ref files to\n-\t\t\t\t\tif (referenceFileList.size() == 0) {\n-\t\t\t\t\t\tif (user.getSystemRole()\n-\t\t\t\t\t\t\t\t.equals(Role.ROLE_ADMIN) || projectService.userHasProjectRole(user, project,\n-\t\t\t\t\t\t\t\tProjectRole.PROJECT_OWNER)) {\n-\t\t\t\t\t\t\taddRefList.add(ImmutableMap.of(\"name\", project.getLabel(), \"id\", project.getId()));\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\n-\t\t\t\tMap<String, Object> projectMap = new HashMap<>();\n-\t\t\t\tList<Map<String, Object>> sampleList = new ArrayList<>();\n-\n-\t\t\t\t//if we're not doing automated, get the files from the cart\n-\t\t\t\tif (projectId == null) {\n-\t\t\t\t\tList<Sample> samples = cart.get(project);\n-\t\t\t\t\tcanUpdateAllSamples &= updateSamplePermission.isAllowed(authentication, samples);\n-\n-\t\t\t\t\t//for each sample in the project in the cart\n-\t\t\t\t\tfor (Sample sample : samples) {\n-\t\t\t\t\t\t//add the sample details\n-\t\t\t\t\t\tMap<String, Object> sampleMap = new HashMap<>();\n-\t\t\t\t\t\tsampleMap.put(\"name\", sample.getLabel());\n-\t\t\t\t\t\tsampleMap.put(\"id\", sample.getId()\n-\t\t\t\t\t\t\t\t.toString());\n-\t\t\t\t\t\tMap<String, List<? extends Object>> files = new HashMap<>();\n-\n-\t\t\t\t\t\t// get the paired end reads\n-\t\t\t\t\t\tif (description.acceptsPairedSequenceFiles()) {\n-\t\t\t\t\t\t\tCollection<SampleSequencingObjectJoin> pairs = sequencingObjectService.getSequencesForSampleOfType(\n-\t\t\t\t\t\t\t\t\tsample, SequenceFilePair.class);\n-\t\t\t\t\t\t\tfiles.put(\"paired_end\", pairs.stream()\n-\t\t\t\t\t\t\t\t\t.map(SampleSequencingObjectJoin::getObject)\n-\t\t\t\t\t\t\t\t\t.collect(Collectors.toList()));\n-\t\t\t\t\t\t}\n-\n-\t\t\t\t\t\t// get the single end reads\n-\t\t\t\t\t\tif (description.acceptsSingleSequenceFiles()) {\n-\t\t\t\t\t\t\tCollection<SampleSequencingObjectJoin> singles = sequencingObjectService.getSequencesForSampleOfType(\n-\t\t\t\t\t\t\t\t\tsample, SingleEndSequenceFile.class);\n-\t\t\t\t\t\t\tfiles.put(\"single_end\", singles.stream()\n-\t\t\t\t\t\t\t\t\t.map(SampleSequencingObjectJoin::getObject)\n-\t\t\t\t\t\t\t\t\t.collect(Collectors.toList()));\n-\t\t\t\t\t\t}\n-\n-\t\t\t\t\t\tsampleMap.put(\"files\", files);\n-\t\t\t\t\t\tsampleList.add(sampleMap);\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\n-\t\t\t\t//add the project info and read samples to a map\n-\t\t\t\tprojectMap.put(\"id\", project.getId()\n-\t\t\t\t\t\t.toString());\n-\t\t\t\tprojectMap.put(\"name\", project.getLabel());\n-\t\t\t\tprojectMap.put(\"samples\", sampleList);\n-\t\t\t\tprojectList.add(projectMap);\n-\n-\t\t\t}\n-\n-\t\t\t// Need to add the pipeline parameters\n-\t\t\tfinal List<IridaWorkflowParameter> defaultWorkflowParameters = flow.getWorkflowDescription()\n-\t\t\t\t\t.getParameters();\n-\t\t\tfinal List<Map<String, Object>> parameters = new ArrayList<>();\n-\t\t\tif (defaultWorkflowParameters != null) {\n-\t\t\t\tfinal List<Map<String, String>> defaultParameters = new ArrayList<>();\n-\t\t\t\tfor (IridaWorkflowParameter p : defaultWorkflowParameters) {\n-\t\t\t\t\tif (p.isRequired()) {\n-\t\t\t\t\t\tcontinue;\n-\t\t\t\t\t}\n-\t\t\t\t\tdefaultParameters.add(ImmutableMap.of(\"label\",\n-\t\t\t\t\t\t\tmessageSource.getMessage(\"pipeline.parameters.\" + workflowName + \".\" + p.getName(), null,\n-\t\t\t\t\t\t\t\t\tlocale), \"value\", p.getDefaultValue(), \"name\", p.getName()));\n-\t\t\t\t}\n-\t\t\t\tparameters.add(ImmutableMap.of(\"id\", DEFAULT_WORKFLOW_PARAMETERS_ID, \"label\",\n-\t\t\t\t\t\tmessageSource.getMessage(\"workflow.parameters.named.default\", null, locale), \"parameters\",\n-\t\t\t\t\t\tdefaultParameters));\n-\t\t\t\tfinal List<IridaWorkflowNamedParameters> namedParameters = namedParameterService.findNamedParametersForWorkflow(\n-\t\t\t\t\t\tpipelineId);\n-\t\t\t\tfor (final IridaWorkflowNamedParameters p : namedParameters) {\n-\t\t\t\t\tfinal List<Map<String, String>> namedParametersList = new ArrayList<>();\n-\t\t\t\t\tfor (final Map.Entry<String, String> parameter : p.getInputParameters()\n-\t\t\t\t\t\t\t.entrySet()) {\n-\t\t\t\t\t\tnamedParametersList.add(ImmutableMap.of(\"label\", messageSource.getMessage(\n-\t\t\t\t\t\t\t\t\"pipeline.parameters.\" + workflowName + \".\" + parameter.getKey(), null, locale),\n-\t\t\t\t\t\t\t\t\"value\", parameter.getValue(), \"name\", parameter.getKey()));\n-\t\t\t\t\t}\n-\t\t\t\t\tparameters.add(\n-\t\t\t\t\t\t\tImmutableMap.of(\"id\", p.getId(), \"label\", p.getLabel(), \"parameters\", namedParametersList));\n-\t\t\t\t}\n-\t\t\t\tmodel.addAttribute(\"parameterModalTitle\",\n-\t\t\t\t\t\tmessageSource.getMessage(\"pipeline.parameters.modal-title.\" + workflowName, null, locale));\n-\t\t\t} else {\n-\t\t\t\tmodel.addAttribute(\"noParameters\", messageSource.getMessage(\"pipeline.no-parameters\", null, locale));\n-\t\t\t}\n-\n-\t\t\t//getting default pipeline name.  regular pipelines just have a date.  automated ones say it's automated\n-\t\t\tString defaultName = null;\n-\t\t\tif (projectId != null) {\n-\t\t\t\tdefaultName = messageSource.getMessage(\"workflow.name.automated-prefix\",\n-\t\t\t\t\t\tnew Object[] { description.getName() }, locale);\n-\t\t\t} else {\n-\t\t\t\tSimpleDateFormat sdf;\n-\t\t\t\tsdf = new SimpleDateFormat(\"yyyyMMdd\");\n-\t\t\t\tString text = sdf.format(new Date());\n-\t\t\t\tdefaultName = description.getName() + \"_\" + text;\n-\t\t\t}\n-\n-\t\t\t// Parameters should be added not matter what, even if they are empty.\n-\t\t\tmodel.addAttribute(\"parameters\", parameters);\n-\n-\t\t\tmodel.addAttribute(\"title\",\n-\t\t\t\t\tmessageSource.getMessage(\"pipeline.title.\" + description.getName(), null, locale));\n-\t\t\tmodel.addAttribute(\"mainTitle\",\n-\t\t\t\t\tmessageSource.getMessage(\"pipeline.h1.\" + description.getName(), null, locale));\n-\t\t\tmodel.addAttribute(\"name\", defaultName);\n-\t\t\tmodel.addAttribute(\"pipelineId\", pipelineId.toString());\n-\t\t\tmodel.addAttribute(\"referenceFiles\", referenceFileList);\n-\t\t\tmodel.addAttribute(\"referenceRequired\", description.requiresReference());\n-\t\t\tmodel.addAttribute(\"addRefProjects\", addRefList);\n-\t\t\tmodel.addAttribute(\"projects\", projectList);\n-\t\t\tmodel.addAttribute(\"canUpdateSamples\", canUpdateAllSamples);\n-\t\t\tmodel.addAttribute(\"workflowName\", workflowName);\n-\t\t\tmodel.addAttribute(\"dynamicSourceRequired\", description.requiresDynamicSource());\n-\t\t\tmodel.addAttribute(\"analysisType\", flow.getWorkflowDescription()\n-\t\t\t\t\t.getAnalysisType());\n-\t\t\tmodel.addAttribute(\"emailConfigured\", emailController.isMailConfigured());\n-\n-\t\t\tfinal List<Map<String, Object>> dynamicSources = new ArrayList<>();\n-\t\t\tif (description.requiresDynamicSource()) {\n-\t\t\t\tTabularToolDataTable galaxyToolDataTable = new TabularToolDataTable();\n-\t\t\t\tIridaWorkflowDynamicSourceGalaxy dynamicSource = new IridaWorkflowDynamicSourceGalaxy();\n-\t\t\t\tfor (IridaWorkflowParameter parameter : description.getParameters()) {\n-\t\t\t\t\tif (parameter.isRequired() && parameter.hasDynamicSource()) {\n-\t\t\t\t\t\ttry {\n-\t\t\t\t\t\t\tdynamicSource = parameter.getDynamicSource();\n-\t\t\t\t\t\t} catch (IridaWorkflowParameterException e) {\n-\t\t\t\t\t\t\tlogger.debug(\"Dynamic Source error: \", e);\n-\t\t\t\t\t\t}\n-\n-\t\t\t\t\t\tList<Object> parametersList = new ArrayList<>();\n-\t\t\t\t\t\tString dynamicSourceName;\n-\t\t\t\t\t\tMap<String, Object> toolDataTable = new HashMap<>();\n-\t\t\t\t\t\ttry {\n-\t\t\t\t\t\t\tdynamicSourceName = dynamicSource.getName();\n-\t\t\t\t\t\t\ttoolDataTable.put(\"id\", dynamicSourceName);\n-\t\t\t\t\t\t\ttoolDataTable.put(\"label\",\n-\t\t\t\t\t\t\t\t\tmessageSource.getMessage(\"dynamicsource.label.\" + dynamicSourceName, null, locale));\n-\t\t\t\t\t\t\ttoolDataTable.put(\"parameters\", parametersList);\n-\n-\t\t\t\t\t\t\tgalaxyToolDataTable = galaxyToolDataService.getToolDataTable(dynamicSourceName);\n-\t\t\t\t\t\t\tList<String> labels = galaxyToolDataTable.getFieldsForColumn(\n-\t\t\t\t\t\t\t\t\tdynamicSource.getDisplayColumn());\n-\t\t\t\t\t\t\tIterator<String> labelsIterator = labels.iterator();\n-\t\t\t\t\t\t\tList<String> values = galaxyToolDataTable.getFieldsForColumn(\n-\t\t\t\t\t\t\t\t\tdynamicSource.getParameterColumn());\n-\t\t\t\t\t\t\tIterator<String> valuesIterator = values.iterator();\n-\n-\t\t\t\t\t\t\twhile (labelsIterator.hasNext() && valuesIterator.hasNext()) {\n-\t\t\t\t\t\t\t\tString label = labelsIterator.next();\n-\t\t\t\t\t\t\t\tString value = valuesIterator.next();\n-\t\t\t\t\t\t\t\tHashMap<String, String> toolDataTableFieldsMap = new HashMap<>();\n-\t\t\t\t\t\t\t\ttoolDataTableFieldsMap.put(\"label\", label);\n-\t\t\t\t\t\t\t\ttoolDataTableFieldsMap.put(\"value\", value);\n-\t\t\t\t\t\t\t\ttoolDataTableFieldsMap.put(\"name\", parameter.getName());\n-\t\t\t\t\t\t\t\tparametersList.add(toolDataTableFieldsMap);\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\tdynamicSources.add(toolDataTable);\n-\t\t\t\t\t\t} catch (Exception e) {\n-\t\t\t\t\t\t\tlogger.debug(\"Tool Data Table not found: \", e);\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t\tmodel.addAttribute(\"dynamicSources\", dynamicSources);\n-\t\t\t}\n-\n-\t\t\tfinal List<Map<String, Object>> paramsWithChoices = description.getParameters()\n-\t\t\t\t\t.stream()\n-\t\t\t\t\t.filter(IridaWorkflowParameter::hasChoices)\n-\t\t\t\t\t.map(x -> ImmutableMap.of(\"label\", localizedParamLabel(locale, workflowName, x.getName()), \"name\",\n-\t\t\t\t\t\t\tx.getName(), \"choices\", x.getChoices()\n-\t\t\t\t\t\t\t\t\t.stream()\n-\t\t\t\t\t\t\t\t\t.map(c -> ImmutableMap.of(\"name\",\n-\t\t\t\t\t\t\t\t\t\t\tlocalizedParamOptionLabel(locale, workflowName, x.getName(), c.getName()),\n-\t\t\t\t\t\t\t\t\t\t\t\"value\", c.getValue()))\n-\t\t\t\t\t\t\t\t\t.collect(Collectors.toList())))\n-\t\t\t\t\t.collect(Collectors.toList());\n-\t\t\tmodel.addAttribute(\"paramsWithChoices\", paramsWithChoices);\n-\t\t\tresponse = URL_GENERIC_PIPELINE;\n-\t\t}\n-\n-\t\treturn response;\n-\t}\n-\n-\t/**\n-\t * Get localized workflow parameter label.\n-\t * <p>\n-\t * If the localized workflow parameter label text is not found by the {@link MessageSource}, then log the\n-\t * NoSuchMessageException and return the `paramName` as the localized parameter label.\n-\t *\n-\t * @param locale       Message locale\n-\t * @param workflowName Workflow name\n-\t * @param paramName    Parameter name\n-\t * @return Localized parameter label if found in {@link MessageSource}; otherwise, return `paramName`.\n-\t */\n-\tprivate String localizedParamLabel(Locale locale, String workflowName, String paramName) {\n-\t\tfinal String messageName = \"pipeline.parameters.\" + workflowName + \".\" + paramName;\n-\t\ttry {\n-\t\t\treturn messageSource.getMessage(messageName, null, locale);\n-\t\t} catch (NoSuchMessageException e) {\n-\t\t\tlogger.error(\"Couldn't find message for '\" + messageName + \"': \", e);\n-\t\t\treturn paramName;\n-\t\t}\n-\t}\n-\n-\tprivate String localizedParamOptionLabel(Locale locale, String workflowName, String paramName, String optionName) {\n-\t\tfinal String messageName = \"pipeline.parameters.\" + workflowName + \".\" + paramName + \".\" + optionName;\n-\t\ttry {\n-\t\t\treturn messageSource.getMessage(messageName, null, locale);\n-\t\t} catch (NoSuchMessageException e) {\n-\t\t\tlogger.error(\"Couldn't find message for '\" + messageName + \"': \", e);\n-\t\t\treturn paramName + \".\" + optionName;\n-\t\t}\n-\t}\n-\n-\t// ************************************************************************************************\n-\t// AJAX\n-\t// ************************************************************************************************\n-\n-\t/**\n-\t * Launch a pipeline\n-\t *\n-\t * @param locale     the locale that the browser is using for the current request.\n-\t * @param parameters DTO of pipeline start parameters\n-\t * @return a JSON response with the status and any messages.\n-\t */\n-\t@RequestMapping(value = \"/ajax/start\", method = RequestMethod.POST)\n-\tpublic @ResponseBody\n-\tMap<String, Object> ajaxStartPipeline(Locale locale, @RequestBody final PipelineStartParameters parameters) {\n-\t\ttry {\n-\t\t\tIridaWorkflow flow = workflowsService.getDisplayableIridaWorkflow(parameters.getWorkflowId());\n-\t\t\tIridaWorkflowDescription description = flow.getWorkflowDescription();\n-\n-\t\t\t// The pipeline needs to have a name.\n-\t\t\tString name = parameters.getName();\n-\t\t\tif (Strings.isNullOrEmpty(name)) {\n-\t\t\t\treturn ImmutableMap.of(\"error\", messageSource.getMessage(\"workflow.no-name-provided\", null, locale));\n-\t\t\t}\n-\n-\t\t\t// Check to see if a reference file is required.\n-\t\t\tLong ref = parameters.getRef();\n-\t\t\tif (description.requiresReference() && ref == null) {\n-\t\t\t\treturn ImmutableMap.of(\"error\",\n-\t\t\t\t\t\tmessageSource.getMessage(\"pipeline.error.no-reference.pipeline-start\", null, locale));\n-\t\t\t}\n-\n-\t\t\t// Get the pipeline parameters\n-\t\t\tMap<String, String> params = new HashMap<>();\n-\t\t\tIridaWorkflowNamedParameters namedParameters = null;\n-\t\t\tMap<String, Object> selectedParameters = parameters.getSelectedParameters();\n-\t\t\tif (selectedParameters != null) {\n-\t\t\t\ttry {\n-\t\t\t\t\tfinal String selectedParametersId = selectedParameters.get(\"id\")\n-\t\t\t\t\t\t\t.toString();\n-\t\t\t\t\tif (!DEFAULT_WORKFLOW_PARAMETERS_ID.equals(selectedParametersId)\n-\t\t\t\t\t\t\t&& !CUSTOM_UNSAVED_WORKFLOW_PARAMETERS_ID.equals(selectedParametersId)) {\n-\t\t\t\t\t\t// this means that a named parameter set was selected\n-\t\t\t\t\t\t// and unmodified, so load up that named parameter set\n-\t\t\t\t\t\t// to pass along.\n-\t\t\t\t\t\tnamedParameters = namedParameterService.read(Long.valueOf(selectedParametersId));\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\t@SuppressWarnings(\"unchecked\") final List<Map<String, String>> unnamedParameters = (List<Map<String, String>>) selectedParameters.get(\n-\t\t\t\t\t\t\t\t\"parameters\");\n-\t\t\t\t\t\tfor (final Map<String, String> parameter : unnamedParameters) {\n-\t\t\t\t\t\t\tparams.put(parameter.get(\"name\"), parameter.get(\"value\"));\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t} catch (Exception e) {\n-\t\t\t\t\treturn ImmutableMap.of(\"parameterError\",\n-\t\t\t\t\t\t\tmessageSource.getMessage(\"pipeline.parameters.error\", null, locale));\n-\t\t\t\t}\n-\t\t\t}\n-\n-\t\t\tString analysisDescription = parameters.getDescription();\n-\t\t\tBoolean writeResultsToSamples = parameters.getWriteResultsToSamples();\n-\t\t\tBoolean emailPipelineResult = parameters.getEmailPipelineResult();\n-\n-\t\t\t//if we have an automated project set, create the new template\n-\t\t\tif (parameters.getAutomatedProject() != null) {\n-\t\t\t\tProject readProject = projectService.read(parameters.getAutomatedProject());\n-\n-\t\t\t\tString statusMessage = messageSource.getMessage(\"analysis.template.status.new\", null, locale);\n-\n-\t\t\t\tanalysisSubmissionService.createSingleSampleSubmissionTemplate(flow, ref, params, namedParameters, name,\n-\t\t\t\t\t\tstatusMessage, analysisDescription, readProject, writeResultsToSamples, emailPipelineResult);\n-\t\t\t} else {\n-\t\t\t\t//otherwise get the project shares and sequence files\n-\t\t\t\tList<Project> projectsToShare = new ArrayList<>();\n-\t\t\t\tList<Long> sharedProjects = parameters.getSharedProjects();\n-\t\t\t\tif (sharedProjects != null && !sharedProjects.isEmpty()) {\n-\t\t\t\t\tprojectsToShare = Lists.newArrayList(projectService.readMultiple(sharedProjects));\n-\t\t\t\t}\n-\n-\t\t\t\t// Get a list of the files to submit\n-\t\t\t\tList<SingleEndSequenceFile> singleEndFiles = new ArrayList<>();\n-\t\t\t\tList<SequenceFilePair> sequenceFilePairs = new ArrayList<>();\n-\t\t\t\tList<Long> single = parameters.getSingle();\n-\t\t\t\tif (single != null) {\n-\t\t\t\t\tIterable<SequencingObject> readMultiple = sequencingObjectService.readMultiple(single);\n-\n-\t\t\t\t\treadMultiple.forEach(f -> {\n-\t\t\t\t\t\tif (!(f instanceof SingleEndSequenceFile)) {\n-\t\t\t\t\t\t\tthrow new IllegalArgumentException(\"file \" + f.getId() + \" not a SingleEndSequenceFile\");\n-\t\t\t\t\t\t}\n-\n-\t\t\t\t\t\tsingleEndFiles.add((SingleEndSequenceFile) f);\n-\t\t\t\t\t});\n-\n-\t\t\t\t\t// Check the single files for duplicates in a sample, throws SampleAnalysisDuplicateException\n-\t\t\t\t\tsequencingObjectService.getUniqueSamplesForSequencingObjects(Sets.newHashSet(singleEndFiles));\n-\t\t\t\t}\n-\t\t\t\tList<Long> paired = parameters.getPaired();\n-\t\t\t\tif (paired != null) {\n-\t\t\t\t\tIterable<SequencingObject> readMultiple = sequencingObjectService.readMultiple(paired);\n-\n-\t\t\t\t\treadMultiple.forEach(f -> {\n-\t\t\t\t\t\tif (!(f instanceof SequenceFilePair)) {\n-\t\t\t\t\t\t\tthrow new IllegalArgumentException(\"file \" + f.getId() + \" not a SequenceFilePair\");\n-\t\t\t\t\t\t}\n-\n-\t\t\t\t\t\tsequenceFilePairs.add((SequenceFilePair) f);\n-\t\t\t\t\t});\n-\n-\t\t\t\t\t// Check the pair files for duplicates in a sample, throws SampleAnalysisDuplicateException\n-\t\t\t\t\tsequencingObjectService.getUniqueSamplesForSequencingObjects(Sets.newHashSet(sequenceFilePairs));\n-\t\t\t\t}\n-\n-\t\t\t\tif (description.getInputs()\n-\t\t\t\t\t\t.requiresSingleSample()) {\n-\t\t\t\t\tanalysisSubmissionService.createSingleSampleSubmission(flow, ref, singleEndFiles, sequenceFilePairs,\n-\t\t\t\t\t\t\tparams, namedParameters, name, analysisDescription, projectsToShare, writeResultsToSamples,\n-\t\t\t\t\t\t\temailPipelineResult);\n-\t\t\t\t} else {\n-\t\t\t\t\tanalysisSubmissionService.createMultipleSampleSubmission(flow, ref, singleEndFiles,\n-\t\t\t\t\t\t\tsequenceFilePairs, params, namedParameters, name, analysisDescription, projectsToShare,\n-\t\t\t\t\t\t\twriteResultsToSamples, emailPipelineResult);\n-\t\t\t\t}\n-\t\t\t}\n-\n-\t\t} catch (IridaWorkflowNotFoundException | IridaWorkflowNotDisplayableException e) {\n-\t\t\tlogger.error(\"Cannot find or cannot launch IridaWorkflow [\" + parameters.getWorkflowId() + \"]\", e);\n-\t\t\treturn ImmutableMap.of(\"pipelineError\",\n-\t\t\t\t\tmessageSource.getMessage(\"pipeline.error.invalid-pipeline\", null, locale));\n-\t\t} catch (DuplicateSampleException e) {\n-\t\t\tlogger.error(\"Multiple files for Sample found\", e);\n-\t\t\treturn ImmutableMap.of(\"pipelineError\",\n-\t\t\t\t\tmessageSource.getMessage(\"pipeline.error.duplicate-samples\", null, locale));\n-\t\t}\n-\n-\t\treturn ImmutableMap.of(\"success\", true);\n-\t}\n-\n-\t/**\n-\t * Get {@link IridaWorkflowDescription} for a workflow/pipeline UUID.\n-\t *\n-\t * @param pipelineUUID Workflow/Pipeline UUID\n-\t * @return Map corresponding to a {@link IridaWorkflowDescription}.\n-\t * @throws IridaWorkflowNotFoundException if workflow could not be found.\n-\t */\n-\t@RequestMapping(value = \"/ajax/{pipelineUUID}\")\n-\t@ResponseBody\n-\tpublic IridaWorkflowDescription getPipelineInfo(@PathVariable UUID pipelineUUID)\n-\t\t\tthrows IridaWorkflowNotFoundException {\n-\t\treturn workflowsService.getIridaWorkflowOrUnknown(pipelineUUID)\n-\t\t\t\t.getWorkflowDescription();\n-\t}\n-\n-\t/**\n-\t * Save a set of {@link IridaWorkflowNamedParameters} and respond with the ID that we saved the new set with.\n-\t *\n-\t * @param params the DTO with the parameters to save.\n-\t * @return a map with the ID of the saved named parameters.\n-\t */\n-\t@RequestMapping(value = \"/ajax/parameters\", method = RequestMethod.POST)\n-\tpublic @ResponseBody\n-\tMap<String, Object> ajaxSaveParameters(@RequestBody final WorkflowParametersToSave params) {\n-\t\tfinal IridaWorkflowNamedParameters namedParameters = namedParameterService.create(params.namedParameters());\n-\t\treturn ImmutableMap.of(\"id\", namedParameters.getId());\n-\t}\n-\n-\t/**\n-\t * Get a {@link List} of all {@link AnalysisType}s.  If this is an automated project, it will only return the\n-\t * analyses that can be automated.\n-\t *\n-\t * @param locale           {@link Locale} of the current user\n-\t * @param automatedProject Project ID if we're launching an automated project (optional)\n-\t * @return {@link List} of localized {@link AnalysisType}\n-\t */\n-\t@RequestMapping(value = \"/ajax\", produces = MediaType.APPLICATION_JSON_VALUE)\n-\tpublic List<Pipeline> getWorkflowTypes(\n-\t\t\t@RequestParam(required = false, name = \"automatedProject\") Long automatedProject, Locale locale) {\n-\t\tSet<AnalysisType> analysisTypes = workflowsService.getDisplayableWorkflowTypes();\n-\t\tList<Pipeline> pipelines = new ArrayList<>();\n-\n-\t\tfor (AnalysisType type : analysisTypes) {\n-\t\t\ttry {\n-\t\t\t\tIridaWorkflow flow = workflowsService.getDefaultWorkflowByType(type);\n-\t\t\t\tIridaWorkflowDescription description = flow.getWorkflowDescription();\n-\n-\t\t\t\t//if we're setting up an automated project, strip out all the multi-sample pipelines\n-\t\t\t\tif (automatedProject == null || (description.getInputs()\n-\t\t\t\t\t\t.requiresSingleSample())) {\n-\t\t\t\t\tPipeline workflow = createPipeline(type, locale);\n-\t\t\t\t\tpipelines.add(workflow);\n-\t\t\t\t}\n-\t\t\t} catch (IridaWorkflowNotFoundException e) {\n-\t\t\t\tlogger.error(\"Cannot find IridaWorkFlow for '\" + type.getType() + \"'\", e);\n-\t\t\t}\n-\t\t}\n-\t\treturn pipelines.stream()\n-\t\t\t\t.sorted(Comparator.comparing(Pipeline::getName))\n-\t\t\t\t.collect(Collectors.toList());\n-\t}\n-\n-\t/**\n-\t * Create a Pipeline for consumption by the UI\n-\t *\n-\t * @param analysisType {@link AnalysisType} type of analysis pipeline\n-\t * @param locale       {@link Locale}\n-\t * @return {@link Pipeline}\n-\t * @throws IridaWorkflowNotFoundException thrown if {@link IridaWorkflowDescription} is not found\n-\t */\n-\tprivate Pipeline createPipeline(AnalysisType analysisType, Locale locale) throws IridaWorkflowNotFoundException {\n-\t\tIridaWorkflowDescription workflowDescription = workflowsService.getDefaultWorkflowByType(analysisType)\n-\t\t\t\t.getWorkflowDescription();\n-\t\tString prefix = \"workflow.\" + analysisType.getType();\n-\t\tString name = messageSource.getMessage(prefix + \".title\", new Object[] {}, locale);\n-\t\tString description = messageSource.getMessage(prefix + \".description\", new Object[] {}, locale);\n-\t\tUUID id = workflowDescription.getId();\n-\t\tString styleName = analysisType.getType();\n-\t\treturn new Pipeline(name, description, id, styleName);\n-\t}\n+    // URI's\n+    public static final String BASE_URL = \"/pipelines\";\n+    /*\n+     * CONSTANTS\n+     */\n+    private static final String DEFAULT_WORKFLOW_PARAMETERS_ID = \"default\";\n+    private static final String CUSTOM_UNSAVED_WORKFLOW_PARAMETERS_ID = \"custom\";\n+    public static final String URL_EMPTY_CART_REDIRECT = \"redirect:/pipelines\";\n+    public static final String URL_LAUNCH = \"pipelines/pipeline_selection\";\n+    public static final String URL_GENERIC_PIPELINE = \"pipelines/types/generic_pipeline\";\n+    public static final String URI_LIST_PIPELINES = \"/ajax/list.json\";\n+    public static final String URI_AJAX_START_PIPELINE = \"/ajax/start.json\";\n+    public static final String URI_AJAX_CART_LIST = \"/ajax/cart_list.json\";\n+    // JSON KEYS\n+    public static final String JSON_KEY_SAMPLE_ID = \"id\";\n+    public static final String JSON_KEY_SAMPLE_OMIT_FILES_LIST = \"omit\";\n+    private static final Logger logger = LoggerFactory.getLogger(PipelineController.class);\n+    /*\n+     * SERVICES\n+     */\n+    private ReferenceFileService referenceFileService;\n+    private SequencingObjectService sequencingObjectService;\n+    private AnalysisSubmissionService analysisSubmissionService;\n+    private ProjectService projectService;\n+    private UserService userService;\n+    private IridaWorkflowsService workflowsService;\n+    private MessageSource messageSource;\n+    private WorkflowNamedParametersService namedParameterService;\n+    private UpdateSamplePermission updateSamplePermission;\n+    private AnalysisSubmissionSampleProcessor analysisSubmissionSampleProcessor;\n+    private GalaxyToolDataService galaxyToolDataService;\n+    private EmailController emailController;\n+    private UICartService cartService;\n+\n+    @Autowired\n+    public PipelineController(SequencingObjectService sequencingObjectService,\n+                              ReferenceFileService referenceFileService, AnalysisSubmissionService analysisSubmissionService,\n+                              IridaWorkflowsService iridaWorkflowsService, ProjectService projectService, UserService userService,\n+                              MessageSource messageSource, WorkflowNamedParametersService namedParameterService, UpdateSamplePermission updateSamplePermission,\n+                              AnalysisSubmissionSampleProcessor analysisSubmissionSampleProcessor,\n+                              GalaxyToolDataService galaxyToolDataService, EmailController emailController, UICartService cartService) {\n+        this.sequencingObjectService = sequencingObjectService;\n+        this.referenceFileService = referenceFileService;\n+        this.analysisSubmissionService = analysisSubmissionService;\n+        this.workflowsService = iridaWorkflowsService;\n+        this.projectService = projectService;\n+        this.userService = userService;\n+        this.messageSource = messageSource;\n+        this.namedParameterService = namedParameterService;\n+        this.updateSamplePermission = updateSamplePermission;\n+        this.analysisSubmissionSampleProcessor = analysisSubmissionSampleProcessor;\n+        this.galaxyToolDataService = galaxyToolDataService;\n+        this.emailController = emailController;\n+        this.cartService = cartService;\n+    }\n+\n+    /**\n+     * Get a generic pipeline page.\n+     *\n+     * @param model      the the model for the current request\n+     * @param principal  the user in the current request\n+     * @param locale     the locale that the user is using\n+     * @param pipelineId the pipeline to load\n+     * @param projectId  Project ID to add a {@link ca.corefacility.bioinformatics.irida.model.workflow.submission.AnalysisSubmissionTemplate}\n+     *                   if necessary (not required)\n+     * @return a page reference or redirect to load.\n+     */\n+    @RequestMapping(value = \"/{pipelineId}\")\n+    public String getSpecifiedPipelinePage(final Model model, Principal principal, Locale locale,\n+                                           @PathVariable UUID pipelineId, @RequestParam(name = \"automatedProject\", required = false) Long projectId) {\n+        String response = URL_EMPTY_CART_REDIRECT;\n+        boolean canUpdateAllSamples;\n+\n+        Map<Project, List<Sample>> cart = cartService.getFullCart();\n+\n+        Set<Project> projects = cart.keySet();\n+\n+        //if we have a project id, overwrite the project set from the cart\n+        if (projectId != null) {\n+            Project project = projectService.read(projectId);\n+            projects = Sets.newHashSet(project);\n+\n+            model.addAttribute(\"automatedProject\", project);\n+            //this is separate because the view can't handle dereferencing a null project if one isn't set\n+            model.addAttribute(\"automatedProjectId\", project.getId());\n+        }\n+\n+        // Ensure we have something in the cart or an automated pipeline project\n+        if (!projects.isEmpty()) {\n+            Authentication authentication = SecurityContextHolder.getContext()\n+                    .getAuthentication();\n+\n+            IridaWorkflow flow = null;\n+            try {\n+                flow = workflowsService.getDisplayableIridaWorkflow(pipelineId);\n+            } catch (IridaWorkflowNotFoundException | IridaWorkflowNotDisplayableException e) {\n+                logger.error(\"Workflow not found or not displayable - See stack:\", e);\n+                return \"redirect:errors/not_found\";\n+            }\n+\n+            // Check if there even is functionality to update samples from results for this pipeline\n+            canUpdateAllSamples = analysisSubmissionSampleProcessor.hasRegisteredAnalysisSampleUpdater(\n+                    flow.getWorkflowDescription()\n+                            .getAnalysisType());\n+\n+            User user = userService.getUserByUsername(principal.getName());\n+            // Get all the reference files that could be used for this pipeline.\n+            List<Map<String, Object>> referenceFileList = new ArrayList<>();\n+            List<Map<String, Object>> projectList = new ArrayList<>();\n+            List<Map<String, Object>> addRefList = new ArrayList<>();\n+            IridaWorkflowDescription description = flow.getWorkflowDescription();\n+            final String workflowName = description.getName()\n+                    .toLowerCase();\n+\n+            //loop through the projects in the set to get their files\n+            for (Project project : projects) {\n+                // Check to see if the pipeline requires a reference file.\n+                if (description.requiresReference()) {\n+                    List<Join<Project, ReferenceFile>> joinList = referenceFileService.getReferenceFilesForProject(\n+                            project);\n+\n+                    //add the ref files from the projects\n+                    for (Join<Project, ReferenceFile> join : joinList) {\n+                        referenceFileList.add(ImmutableMap.of(\"project\", project, \"file\", join.getObject()));\n+                    }\n+\n+                    //if there's no ref files, show the user projects they can add ref files to\n+                    if (referenceFileList.size() == 0) {\n+                        if (user.getSystemRole()\n+                                .equals(Role.ROLE_ADMIN) || projectService.userHasProjectRole(user, project,\n+                                ProjectRole.PROJECT_OWNER)) {\n+                            addRefList.add(ImmutableMap.of(\"name\", project.getLabel(), \"id\", project.getId()));\n+                        }\n+                    }\n+                }\n+\n+                Map<String, Object> projectMap = new HashMap<>();\n+                List<Map<String, Object>> sampleList = new ArrayList<>();\n+\n+                //if we're not doing automated, get the files from the cart\n+                if (projectId == null) {\n+                    List<Sample> samples = cart.get(project);\n+                    canUpdateAllSamples &= updateSamplePermission.isAllowed(authentication, samples);\n+\n+                    //for each sample in the project in the cart\n+                    for (Sample sample : samples) {\n+                        //add the sample details\n+                        Map<String, Object> sampleMap = new HashMap<>();\n+                        sampleMap.put(\"name\", sample.getLabel());\n+                        sampleMap.put(\"id\", sample.getId()\n+                                .toString());\n+                        Map<String, List<? extends Object>> files = new HashMap<>();\n+\n+                        // get the paired end reads\n+                        if (description.acceptsPairedSequenceFiles()) {\n+                            Collection<SampleSequencingObjectJoin> pairs = sequencingObjectService.getSequencesForSampleOfType(\n+                                    sample, SequenceFilePair.class);\n+                            files.put(\"paired_end\", pairs.stream()\n+                                    .map(SampleSequencingObjectJoin::getObject)\n+                                    .collect(Collectors.toList()));\n+                        }\n+\n+                        // get the single end reads\n+                        if (description.acceptsSingleSequenceFiles()) {\n+                            Collection<SampleSequencingObjectJoin> singles = sequencingObjectService.getSequencesForSampleOfType(\n+                                    sample, SingleEndSequenceFile.class);\n+                            files.put(\"single_end\", singles.stream()\n+                                    .map(SampleSequencingObjectJoin::getObject)\n+                                    .collect(Collectors.toList()));\n+                        }\n+\n+                        sampleMap.put(\"files\", files);\n+                        sampleList.add(sampleMap);\n+                    }\n+                }\n+\n+                //add the project info and read samples to a map\n+                projectMap.put(\"id\", project.getId()\n+                        .toString());\n+                projectMap.put(\"name\", project.getLabel());\n+                projectMap.put(\"samples\", sampleList);\n+                projectList.add(projectMap);\n+\n+            }\n+\n+            // Need to add the pipeline parameters\n+            final List<IridaWorkflowParameter> defaultWorkflowParameters = flow.getWorkflowDescription()\n+                    .getParameters();\n+            final List<Map<String, Object>> parameters = new ArrayList<>();\n+            if (defaultWorkflowParameters != null) {\n+                final List<Map<String, String>> defaultParameters = new ArrayList<>();\n+                for (IridaWorkflowParameter p : defaultWorkflowParameters) {\n+                    if (p.isRequired()) {\n+                        continue;\n+                    }\n+                    defaultParameters.add(ImmutableMap.of(\"label\",\n+                            messageSource.getMessage(\"pipeline.parameters.\" + workflowName + \".\" + p.getName(), null,\n+                                    locale), \"value\", p.getDefaultValue(), \"name\", p.getName()));\n+                }\n+                parameters.add(ImmutableMap.of(\"id\", DEFAULT_WORKFLOW_PARAMETERS_ID, \"label\",\n+                        messageSource.getMessage(\"workflow.parameters.named.default\", null, locale), \"parameters\",\n+                        defaultParameters));\n+                final List<IridaWorkflowNamedParameters> namedParameters = namedParameterService.findNamedParametersForWorkflow(\n+                        pipelineId);\n+                for (final IridaWorkflowNamedParameters p : namedParameters) {\n+                    final List<Map<String, String>> namedParametersList = new ArrayList<>();\n+                    for (final Map.Entry<String, String> parameter : p.getInputParameters()\n+                            .entrySet()) {\n+                        namedParametersList.add(ImmutableMap.of(\"label\", messageSource.getMessage(\n+                                \"pipeline.parameters.\" + workflowName + \".\" + parameter.getKey(), null, locale),\n+                                \"value\", parameter.getValue(), \"name\", parameter.getKey()));\n+                    }\n+                    parameters.add(\n+                            ImmutableMap.of(\"id\", p.getId(), \"label\", p.getLabel(), \"parameters\", namedParametersList));\n+                }\n+                model.addAttribute(\"parameterModalTitle\",\n+                        messageSource.getMessage(\"pipeline.parameters.modal-title.\" + workflowName, null, locale));\n+            } else {\n+                model.addAttribute(\"noParameters\", messageSource.getMessage(\"pipeline.no-parameters\", null, locale));\n+            }\n+\n+            //getting default pipeline name.  regular pipelines just have a date.  automated ones say it's automated\n+            String defaultName = null;\n+            if (projectId != null) {\n+                defaultName = messageSource.getMessage(\"workflow.name.automated-prefix\",\n+                        new Object[]{description.getName()}, locale);\n+            } else {\n+                SimpleDateFormat sdf;\n+                sdf = new SimpleDateFormat(\"yyyyMMdd\");\n+                String text = sdf.format(new Date());\n+                defaultName = description.getName() + \"_\" + text;\n+            }\n+\n+            // Parameters should be added not matter what, even if they are empty.\n+            model.addAttribute(\"parameters\", parameters);\n+\n+            model.addAttribute(\"title\",\n+                    messageSource.getMessage(\"pipeline.title.\" + description.getName(), null, locale));\n+            model.addAttribute(\"mainTitle\",\n+                    messageSource.getMessage(\"pipeline.h1.\" + description.getName(), null, locale));\n+            model.addAttribute(\"name\", defaultName);\n+            model.addAttribute(\"pipelineId\", pipelineId.toString());\n+            model.addAttribute(\"referenceFiles\", referenceFileList);\n+            model.addAttribute(\"referenceRequired\", description.requiresReference());\n+            model.addAttribute(\"addRefProjects\", addRefList);\n+            model.addAttribute(\"projects\", projectList);\n+            model.addAttribute(\"canUpdateSamples\", canUpdateAllSamples);\n+            model.addAttribute(\"workflowName\", workflowName);\n+            model.addAttribute(\"dynamicSourceRequired\", description.requiresDynamicSource());\n+            model.addAttribute(\"analysisType\", flow.getWorkflowDescription()\n+                    .getAnalysisType());\n+            model.addAttribute(\"emailConfigured\", emailController.isMailConfigured());\n+\n+            final List<Map<String, Object>> dynamicSources = new ArrayList<>();\n+            if (description.requiresDynamicSource()) {\n+                TabularToolDataTable galaxyToolDataTable = new TabularToolDataTable();\n+                IridaWorkflowDynamicSourceGalaxy dynamicSource = new IridaWorkflowDynamicSourceGalaxy();\n+                for (IridaWorkflowParameter parameter : description.getParameters()) {\n+                    if (parameter.isRequired() && parameter.hasDynamicSource()) {\n+                        try {\n+                            dynamicSource = parameter.getDynamicSource();\n+                        } catch (IridaWorkflowParameterException e) {\n+                            logger.debug(\"Dynamic Source error: \", e);\n+                        }\n+\n+                        List<Object> parametersList = new ArrayList<>();\n+                        String dynamicSourceName;\n+                        Map<String, Object> toolDataTable = new HashMap<>();\n+                        try {\n+                            dynamicSourceName = dynamicSource.getName();\n+                            toolDataTable.put(\"id\", dynamicSourceName);\n+                            toolDataTable.put(\"label\",\n+                                    messageSource.getMessage(\"dynamicsource.label.\" + dynamicSourceName, null, locale));\n+                            toolDataTable.put(\"parameters\", parametersList);\n+\n+                            galaxyToolDataTable = galaxyToolDataService.getToolDataTable(dynamicSourceName);\n+                            List<String> labels = galaxyToolDataTable.getFieldsForColumn(\n+                                    dynamicSource.getDisplayColumn());\n+                            Iterator<String> labelsIterator = labels.iterator();\n+                            List<String> values = galaxyToolDataTable.getFieldsForColumn(\n+                                    dynamicSource.getParameterColumn());\n+                            Iterator<String> valuesIterator = values.iterator();\n+\n+                            while (labelsIterator.hasNext() && valuesIterator.hasNext()) {\n+                                String label = labelsIterator.next();\n+                                String value = valuesIterator.next();\n+                                HashMap<String, String> toolDataTableFieldsMap = new HashMap<>();\n+                                toolDataTableFieldsMap.put(\"label\", label);\n+                                toolDataTableFieldsMap.put(\"value\", value);\n+                                toolDataTableFieldsMap.put(\"name\", parameter.getName());\n+                                parametersList.add(toolDataTableFieldsMap);\n+                            }\n+                            dynamicSources.add(toolDataTable);\n+                        } catch (Exception e) {\n+                            logger.debug(\"Tool Data Table not found: \", e);\n+                        }\n+                    }\n+                }\n+                model.addAttribute(\"dynamicSources\", dynamicSources);\n+            }\n+\n+            final List<Map<String, Object>> paramsWithChoices = description.getParameters()\n+                    .stream()\n+                    .filter(IridaWorkflowParameter::hasChoices)\n+                    .map(x -> ImmutableMap.of(\"label\", localizedParamLabel(locale, workflowName, x.getName()), \"name\",\n+                            x.getName(), \"choices\", x.getChoices()\n+                                    .stream()\n+                                    .map(c -> ImmutableMap.of(\"name\",\n+                                            localizedParamOptionLabel(locale, workflowName, x.getName(), c.getName()),\n+                                            \"value\", c.getValue()))\n+                                    .collect(Collectors.toList())))\n+                    .collect(Collectors.toList());\n+            model.addAttribute(\"paramsWithChoices\", paramsWithChoices);\n+            response = URL_GENERIC_PIPELINE;\n+        }\n+\n+        return response;\n+    }\n+\n+    /**\n+     * Get localized workflow parameter label.\n+     * <p>\n+     * If the localized workflow parameter label text is not found by the {@link MessageSource}, then log the\n+     * NoSuchMessageException and return the `paramName` as the localized parameter label.\n+     *\n+     * @param locale       Message locale\n+     * @param workflowName Workflow name\n+     * @param paramName    Parameter name\n+     * @return Localized parameter label if found in {@link MessageSource}; otherwise, return `paramName`.\n+     */\n+    private String localizedParamLabel(Locale locale, String workflowName, String paramName) {\n+        final String messageName = \"pipeline.parameters.\" + workflowName + \".\" + paramName;\n+        try {\n+            return messageSource.getMessage(messageName, null, locale);\n+        } catch (NoSuchMessageException e) {\n+            logger.error(\"Couldn't find message for '\" + messageName + \"': \", e);\n+            return paramName;\n+        }\n+    }\n+\n+    private String localizedParamOptionLabel(Locale locale, String workflowName, String paramName, String optionName) {\n+        final String messageName = \"pipeline.parameters.\" + workflowName + \".\" + paramName + \".\" + optionName;\n+        try {\n+            return messageSource.getMessage(messageName, null, locale);\n+        } catch (NoSuchMessageException e) {\n+            logger.error(\"Couldn't find message for '\" + messageName + \"': \", e);\n+            return paramName + \".\" + optionName;\n+        }\n+    }\n+\n+    // ************************************************************************************************\n+    // AJAX\n+    // ************************************************************************************************\n+\n+    /**\n+     * Launch a pipeline\n+     *\n+     * @param locale     the locale that the browser is using for the current request.\n+     * @param parameters DTO of pipeline start parameters\n+     * @return a JSON response with the status and any messages.\n+     */\n+    @RequestMapping(value = \"/ajax/start\", method = RequestMethod.POST)\n+    public @ResponseBody\n+    Map<String, Object> ajaxStartPipeline(Locale locale, @RequestBody final PipelineStartParameters parameters) {\n+        try {\n+            IridaWorkflow flow = workflowsService.getDisplayableIridaWorkflow(parameters.getWorkflowId());\n+            IridaWorkflowDescription description = flow.getWorkflowDescription();\n+\n+            // The pipeline needs to have a name.\n+            String name = parameters.getName();\n+            if (Strings.isNullOrEmpty(name)) {\n+                return ImmutableMap.of(\"error\", messageSource.getMessage(\"workflow.no-name-provided\", null, locale));\n+            }\n+\n+            // Check to see if a reference file is required.\n+            Long ref = parameters.getRef();\n+            if (description.requiresReference() && ref == null) {\n+                return ImmutableMap.of(\"error\",\n+                        messageSource.getMessage(\"pipeline.error.no-reference.pipeline-start\", null, locale));\n+            }\n+\n+            // Get the pipeline parameters\n+            Map<String, String> params = new HashMap<>();\n+            IridaWorkflowNamedParameters namedParameters = null;\n+            Map<String, Object> selectedParameters = parameters.getSelectedParameters();\n+            if (selectedParameters != null) {\n+                try {\n+                    final String selectedParametersId = selectedParameters.get(\"id\")\n+                            .toString();\n+                    if (!DEFAULT_WORKFLOW_PARAMETERS_ID.equals(selectedParametersId)\n+                            && !CUSTOM_UNSAVED_WORKFLOW_PARAMETERS_ID.equals(selectedParametersId)) {\n+                        // this means that a named parameter set was selected\n+                        // and unmodified, so load up that named parameter set\n+                        // to pass along.\n+                        namedParameters = namedParameterService.read(Long.valueOf(selectedParametersId));\n+                    } else {\n+                        @SuppressWarnings(\"unchecked\") final List<Map<String, String>> unnamedParameters = (List<Map<String, String>>) selectedParameters.get(\n+                                \"parameters\");\n+                        for (final Map<String, String> parameter : unnamedParameters) {\n+                            params.put(parameter.get(\"name\"), parameter.get(\"value\"));\n+                        }\n+                    }\n+                } catch (Exception e) {\n+                    return ImmutableMap.of(\"parameterError\",\n+                            messageSource.getMessage(\"pipeline.parameters.error\", null, locale));\n+                }\n+            }\n+\n+            String analysisDescription = parameters.getDescription();\n+            Boolean writeResultsToSamples = parameters.getWriteResultsToSamples();\n+            Boolean emailPipelineResult = parameters.getEmailPipelineResult();\n+\n+            //if we have an automated project set, create the new template\n+            if (parameters.getAutomatedProject() != null) {\n+                Project readProject = projectService.read(parameters.getAutomatedProject());\n+\n+                String statusMessage = messageSource.getMessage(\"analysis.template.status.new\", null, locale);\n+\n+                analysisSubmissionService.createSingleSampleSubmissionTemplate(flow, ref, params, namedParameters, name,\n+                        statusMessage, analysisDescription, readProject, writeResultsToSamples, emailPipelineResult);\n+            } else {\n+                //otherwise get the project shares and sequence files\n+                List<Project> projectsToShare = new ArrayList<>();\n+                List<Long> sharedProjects = parameters.getSharedProjects();\n+                if (sharedProjects != null && !sharedProjects.isEmpty()) {\n+                    projectsToShare = Lists.newArrayList(projectService.readMultiple(sharedProjects));\n+                }\n+\n+                // Get a list of the files to submit\n+                List<SingleEndSequenceFile> singleEndFiles = new ArrayList<>();\n+                List<SequenceFilePair> sequenceFilePairs = new ArrayList<>();\n+                List<Long> single = parameters.getSingle();\n+                if (single != null) {\n+                    Iterable<SequencingObject> readMultiple = sequencingObjectService.readMultiple(single);\n+\n+                    readMultiple.forEach(f -> {\n+                        if (!(f instanceof SingleEndSequenceFile)) {\n+                            throw new IllegalArgumentException(\"file \" + f.getId() + \" not a SingleEndSequenceFile\");\n+                        }\n+\n+                        singleEndFiles.add((SingleEndSequenceFile) f);\n+                    });\n+\n+                    // Check the single files for duplicates in a sample, throws SampleAnalysisDuplicateException\n+                    sequencingObjectService.getUniqueSamplesForSequencingObjects(Sets.newHashSet(singleEndFiles));\n+                }\n+                List<Long> paired = parameters.getPaired();\n+                if (paired != null) {\n+                    Iterable<SequencingObject> readMultiple = sequencingObjectService.readMultiple(paired);\n+\n+                    readMultiple.forEach(f -> {\n+                        if (!(f instanceof SequenceFilePair)) {\n+                            throw new IllegalArgumentException(\"file \" + f.getId() + \" not a SequenceFilePair\");\n+                        }\n+\n+                        sequenceFilePairs.add((SequenceFilePair) f);\n+                    });\n+\n+                    // Check the pair files for duplicates in a sample, throws SampleAnalysisDuplicateException\n+                    sequencingObjectService.getUniqueSamplesForSequencingObjects(Sets.newHashSet(sequenceFilePairs));\n+                }\n+\n+                if (description.getInputs()\n+                        .requiresSingleSample()) {\n+                    analysisSubmissionService.createSingleSampleSubmission(flow, ref, singleEndFiles, sequenceFilePairs,\n+                            params, namedParameters, name, analysisDescription, projectsToShare, writeResultsToSamples,\n+                            emailPipelineResult);\n+                } else {\n+                    analysisSubmissionService.createMultipleSampleSubmission(flow, ref, singleEndFiles,\n+                            sequenceFilePairs, params, namedParameters, name, analysisDescription, projectsToShare,\n+                            writeResultsToSamples, emailPipelineResult);\n+                }\n+            }\n+\n+        } catch (IridaWorkflowNotFoundException | IridaWorkflowNotDisplayableException e) {\n+            logger.error(\"Cannot find or cannot launch IridaWorkflow [\" + parameters.getWorkflowId() + \"]\", e);\n+            return ImmutableMap.of(\"pipelineError\",\n+                    messageSource.getMessage(\"pipeline.error.invalid-pipeline\", null, locale));\n+        } catch (DuplicateSampleException e) {\n+            logger.error(\"Multiple files for Sample found\", e);\n+            return ImmutableMap.of(\"pipelineError\",\n+                    messageSource.getMessage(\"pipeline.error.duplicate-samples\", null, locale));\n+        }\n+\n+        return ImmutableMap.of(\"success\", true);\n+    }\n+\n+    /**\n+     * Get {@link IridaWorkflowDescription} for a workflow/pipeline UUID.\n+     *\n+     * @param pipelineUUID Workflow/Pipeline UUID\n+     * @return Map corresponding to a {@link IridaWorkflowDescription}.\n+     * @throws IridaWorkflowNotFoundException if workflow could not be found.\n+     */\n+    @RequestMapping(value = \"/ajax/{pipelineUUID}\")\n+    @ResponseBody\n+    public IridaWorkflowDescription getPipelineInfo(@PathVariable UUID pipelineUUID)\n+            throws IridaWorkflowNotFoundException {\n+        return workflowsService.getIridaWorkflowOrUnknown(pipelineUUID)\n+                .getWorkflowDescription();\n+    }\n+\n+    /**\n+     * Save a set of {@link IridaWorkflowNamedParameters} and respond with the ID that we saved the new set with.\n+     *\n+     * @param params the DTO with the parameters to save.\n+     * @return a map with the ID of the saved named parameters.\n+     */\n+    @RequestMapping(value = \"/ajax/parameters\", method = RequestMethod.POST)\n+    public @ResponseBody\n+    Map<String, Object> ajaxSaveParameters(@RequestBody final WorkflowParametersToSave params) {\n+        final IridaWorkflowNamedParameters namedParameters = namedParameterService.create(params.namedParameters());\n+        return ImmutableMap.of(\"id\", namedParameters.getId());\n+    }\n+\n+    /**\n+     * Get a {@link List} of all {@link AnalysisType}s.  If this is an automated project, it will only return the\n+     * analyses that can be automated.\n+     *\n+     * @param locale           {@link Locale} of the current user\n+     * @param automatedProject Project ID if we're launching an automated project (optional)\n+     * @return {@link List} of localized {@link AnalysisType}\n+     */\n+    @RequestMapping(value = \"/ajax\", produces = MediaType.APPLICATION_JSON_VALUE)\n+    public List<Pipeline> getWorkflowTypes(\n+            @RequestParam(required = false, name = \"automatedProject\") Long automatedProject, Locale locale) {\n+        Set<AnalysisType> analysisTypes = workflowsService.getDisplayableWorkflowTypes();\n+        List<Pipeline> pipelines = new ArrayList<>();\n+\n+        for (AnalysisType type : analysisTypes) {\n+            try {\n+                IridaWorkflow flow = workflowsService.getDefaultWorkflowByType(type);\n+                IridaWorkflowDescription description = flow.getWorkflowDescription();\n+\n+                //if we're setting up an automated project, strip out all the multi-sample pipelines\n+                if (automatedProject == null || (description.getInputs()\n+                        .requiresSingleSample())) {\n+                    Pipeline workflow = createPipeline(type, locale);\n+                    pipelines.add(workflow);\n+                }\n+            } catch (IridaWorkflowNotFoundException e) {\n+                logger.error(\"Cannot find IridaWorkFlow for '\" + type.getType() + \"'\", e);\n+            }\n+        }\n+        return pipelines.stream()\n+                .sorted(Comparator.comparing(Pipeline::getName))\n+                .collect(Collectors.toList());\n+    }\n+\n+    /**\n+     * Create a Pipeline for consumption by the UI\n+     *\n+     * @param analysisType {@link AnalysisType} type of analysis pipeline\n+     * @param locale       {@link Locale}\n+     * @return {@link Pipeline}\n+     * @throws IridaWorkflowNotFoundException thrown if {@link IridaWorkflowDescription} is not found\n+     */\n+    private Pipeline createPipeline(AnalysisType analysisType, Locale locale) throws IridaWorkflowNotFoundException {\n+        IridaWorkflowDescription workflowDescription = workflowsService.getDefaultWorkflowByType(analysisType)\n+                .getWorkflowDescription();\n+        String prefix = \"workflow.\" + analysisType.getType();\n+        String name = messageSource.getMessage(prefix + \".title\", new Object[]{}, locale);\n+        String description = messageSource.getMessage(prefix + \".description\", new Object[]{}, locale);\n+        UUID id = workflowDescription.getId();\n+        String styleName = analysisType.getType();\n+        return new Pipeline(name, description, id, styleName);\n+    }\n \n }\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ0MDYzNQ==", "url": "https://github.com/phac-nml/irida/pull/813#discussion_r500440635", "body": "Remove `final`", "bodyText": "Remove final", "bodyHTML": "<p dir=\"auto\">Remove <code>final</code></p>", "author": "deepsidhu85", "createdAt": "2020-10-06T16:36:53Z", "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/pipelines/PipelineController.java", "diffHunk": "@@ -83,45 +83,41 @@\n \t/*\n \t * SERVICES\n \t */\n-\tprivate ReferenceFileService referenceFileService;\n-\tprivate SequencingObjectService sequencingObjectService;\n-\tprivate AnalysisSubmissionService analysisSubmissionService;\n-\tprivate ProjectService projectService;\n-\tprivate UserService userService;\n-\tprivate IridaWorkflowsService workflowsService;\n-\tprivate MessageSource messageSource;\n+\tprivate final ReferenceFileService referenceFileService;\n+\tprivate final SequencingObjectService sequencingObjectService;\n+\tprivate final AnalysisSubmissionService analysisSubmissionService;\n+\tprivate final ProjectService projectService;\n+\tprivate final UserService userService;\n+\tprivate final IridaWorkflowsService workflowsService;\n+\tprivate final MessageSource messageSource;\n \tprivate final WorkflowNamedParametersService namedParameterService;\n-\tprivate UpdateSamplePermission updateSamplePermission;\n-\tprivate AnalysisSubmissionSampleProcessor analysisSubmissionSampleProcessor;\n-\tprivate GalaxyToolDataService galaxyToolDataService;\n-\tprivate EmailController emailController;\n-\n-\t/*\n-\t * CONTROLLERS\n-\t */\n-\tprivate CartController cartController;\n+\tprivate final UpdateSamplePermission updateSamplePermission;\n+\tprivate final AnalysisSubmissionSampleProcessor analysisSubmissionSampleProcessor;\n+\tprivate final GalaxyToolDataService galaxyToolDataService;\n+\tprivate final EmailController emailController;\n+\tprivate final UICartService cartService;\n \n \t@Autowired\n \tpublic PipelineController(SequencingObjectService sequencingObjectService,\n \t\t\tReferenceFileService referenceFileService, AnalysisSubmissionService analysisSubmissionService,\n \t\t\tIridaWorkflowsService iridaWorkflowsService, ProjectService projectService, UserService userService,\n-\t\t\tCartController cartController, MessageSource messageSource,\n+\t\t\tMessageSource messageSource,\n \t\t\tfinal WorkflowNamedParametersService namedParameterService, UpdateSamplePermission updateSamplePermission,", "originalCommit": "f58611dcacf9ee48b8662e993144b6ecaa79ef88", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ2MTY3NQ==", "url": "https://github.com/phac-nml/irida/pull/813#discussion_r500461675", "bodyText": "This is an old relic, I cannot remember you used to like that. \u00a0Removed in 746b003", "author": "joshsadam", "createdAt": "2020-10-06T17:10:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ0MDYzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "746b003e81aa0d6e9e5f6b072670b1c231c0d8fc", "changed_code": [{"header": "diff --git a/src/main/java/ca/corefacility/bioinformatics/irida/ria/web/pipelines/PipelineController.java b/src/main/java/ca/corefacility/bioinformatics/irida/ria/web/pipelines/PipelineController.java\nindex 6ccb705623..cc20c20252 100644\n--- a/src/main/java/ca/corefacility/bioinformatics/irida/ria/web/pipelines/PipelineController.java\n+++ b/src/main/java/ca/corefacility/bioinformatics/irida/ria/web/pipelines/PipelineController.java\n", "chunk": "@@ -101,8 +99,7 @@ public class PipelineController extends BaseController {\n \tpublic PipelineController(SequencingObjectService sequencingObjectService,\n \t\t\tReferenceFileService referenceFileService, AnalysisSubmissionService analysisSubmissionService,\n \t\t\tIridaWorkflowsService iridaWorkflowsService, ProjectService projectService, UserService userService,\n-\t\t\tMessageSource messageSource,\n-\t\t\tfinal WorkflowNamedParametersService namedParameterService, UpdateSamplePermission updateSamplePermission,\n+\t\t\tMessageSource messageSource, WorkflowNamedParametersService namedParameterService, UpdateSamplePermission updateSamplePermission,\n \t\t\tAnalysisSubmissionSampleProcessor analysisSubmissionSampleProcessor,\n \t\t\tGalaxyToolDataService galaxyToolDataService, EmailController emailController, UICartService cartService) {\n \t\tthis.sequencingObjectService = sequencingObjectService;\n", "next_change": {"commit": "82e5a94bf2cf47a92e2795d0b3966b2643609fa5", "changed_code": [{"header": "diff --git a/src/main/java/ca/corefacility/bioinformatics/irida/ria/web/pipelines/PipelineController.java b/src/main/java/ca/corefacility/bioinformatics/irida/ria/web/pipelines/PipelineController.java\nindex cc20c20252..5a405ea40d 100644\n--- a/src/main/java/ca/corefacility/bioinformatics/irida/ria/web/pipelines/PipelineController.java\n+++ b/src/main/java/ca/corefacility/bioinformatics/irida/ria/web/pipelines/PipelineController.java\n", "chunk": "@@ -61,572 +61,572 @@ import java.util.stream.Collectors;\n @Controller\n @RequestMapping(PipelineController.BASE_URL)\n public class PipelineController extends BaseController {\n-\t// URI's\n-\tpublic static final String BASE_URL = \"/pipelines\";\n-\t/*\n-\t * CONSTANTS\n-\t */\n-\tprivate static final String DEFAULT_WORKFLOW_PARAMETERS_ID = \"default\";\n-\tprivate static final String CUSTOM_UNSAVED_WORKFLOW_PARAMETERS_ID = \"custom\";\n-\tpublic static final String URL_EMPTY_CART_REDIRECT = \"redirect:/pipelines\";\n-\tpublic static final String URL_LAUNCH = \"pipelines/pipeline_selection\";\n-\tpublic static final String URL_GENERIC_PIPELINE = \"pipelines/types/generic_pipeline\";\n-\tpublic static final String URI_LIST_PIPELINES = \"/ajax/list.json\";\n-\tpublic static final String URI_AJAX_START_PIPELINE = \"/ajax/start.json\";\n-\tpublic static final String URI_AJAX_CART_LIST = \"/ajax/cart_list.json\";\n-\t// JSON KEYS\n-\tpublic static final String JSON_KEY_SAMPLE_ID = \"id\";\n-\tpublic static final String JSON_KEY_SAMPLE_OMIT_FILES_LIST = \"omit\";\n-\tprivate static final Logger logger = LoggerFactory.getLogger(PipelineController.class);\n-\t/*\n-\t * SERVICES\n-\t */\n-\tprivate final ReferenceFileService referenceFileService;\n-\tprivate final SequencingObjectService sequencingObjectService;\n-\tprivate final AnalysisSubmissionService analysisSubmissionService;\n-\tprivate final ProjectService projectService;\n-\tprivate final UserService userService;\n-\tprivate final IridaWorkflowsService workflowsService;\n-\tprivate final MessageSource messageSource;\n-\tprivate final WorkflowNamedParametersService namedParameterService;\n-\tprivate final UpdateSamplePermission updateSamplePermission;\n-\tprivate final AnalysisSubmissionSampleProcessor analysisSubmissionSampleProcessor;\n-\tprivate final GalaxyToolDataService galaxyToolDataService;\n-\tprivate final EmailController emailController;\n-\tprivate final UICartService cartService;\n-\n-\t@Autowired\n-\tpublic PipelineController(SequencingObjectService sequencingObjectService,\n-\t\t\tReferenceFileService referenceFileService, AnalysisSubmissionService analysisSubmissionService,\n-\t\t\tIridaWorkflowsService iridaWorkflowsService, ProjectService projectService, UserService userService,\n-\t\t\tMessageSource messageSource, WorkflowNamedParametersService namedParameterService, UpdateSamplePermission updateSamplePermission,\n-\t\t\tAnalysisSubmissionSampleProcessor analysisSubmissionSampleProcessor,\n-\t\t\tGalaxyToolDataService galaxyToolDataService, EmailController emailController, UICartService cartService) {\n-\t\tthis.sequencingObjectService = sequencingObjectService;\n-\t\tthis.referenceFileService = referenceFileService;\n-\t\tthis.analysisSubmissionService = analysisSubmissionService;\n-\t\tthis.workflowsService = iridaWorkflowsService;\n-\t\tthis.projectService = projectService;\n-\t\tthis.userService = userService;\n-\t\tthis.messageSource = messageSource;\n-\t\tthis.namedParameterService = namedParameterService;\n-\t\tthis.updateSamplePermission = updateSamplePermission;\n-\t\tthis.analysisSubmissionSampleProcessor = analysisSubmissionSampleProcessor;\n-\t\tthis.galaxyToolDataService = galaxyToolDataService;\n-\t\tthis.emailController = emailController;\n-\t\tthis.cartService = cartService;\n-\t}\n-\n-\t/**\n-\t * Get a generic pipeline page.\n-\t *\n-\t * @param model      the the model for the current request\n-\t * @param principal  the user in the current request\n-\t * @param locale     the locale that the user is using\n-\t * @param pipelineId the pipeline to load\n-\t * @param projectId  Project ID to add a {@link ca.corefacility.bioinformatics.irida.model.workflow.submission.AnalysisSubmissionTemplate}\n-\t *                   if necessary (not required)\n-\t * @return a page reference or redirect to load.\n-\t */\n-\t@RequestMapping(value = \"/{pipelineId}\")\n-\tpublic String getSpecifiedPipelinePage(final Model model, Principal principal, Locale locale,\n-\t\t\t@PathVariable UUID pipelineId, @RequestParam(name = \"automatedProject\", required = false) Long projectId) {\n-\t\tString response = URL_EMPTY_CART_REDIRECT;\n-\t\tboolean canUpdateAllSamples;\n-\n-\t\tMap<Project, List<Sample>> cart = cartService.getFullCart();\n-\n-\t\tSet<Project> projects = cart.keySet();\n-\n-\t\t//if we have a project id, overwrite the project set from the cart\n-\t\tif (projectId != null) {\n-\t\t\tProject project = projectService.read(projectId);\n-\t\t\tprojects = Sets.newHashSet(project);\n-\n-\t\t\tmodel.addAttribute(\"automatedProject\", project);\n-\t\t\t//this is separate because the view can't handle dereferencing a null project if one isn't set\n-\t\t\tmodel.addAttribute(\"automatedProjectId\", project.getId());\n-\t\t}\n-\n-\t\t// Ensure we have something in the cart or an automated pipeline project\n-\t\tif (!projects.isEmpty()) {\n-\t\t\tAuthentication authentication = SecurityContextHolder.getContext()\n-\t\t\t\t\t.getAuthentication();\n-\n-\t\t\tIridaWorkflow flow = null;\n-\t\t\ttry {\n-\t\t\t\tflow = workflowsService.getDisplayableIridaWorkflow(pipelineId);\n-\t\t\t} catch (IridaWorkflowNotFoundException | IridaWorkflowNotDisplayableException e) {\n-\t\t\t\tlogger.error(\"Workflow not found or not displayable - See stack:\", e);\n-\t\t\t\treturn \"redirect:errors/not_found\";\n-\t\t\t}\n-\n-\t\t\t// Check if there even is functionality to update samples from results for this pipeline\n-\t\t\tcanUpdateAllSamples = analysisSubmissionSampleProcessor.hasRegisteredAnalysisSampleUpdater(\n-\t\t\t\t\tflow.getWorkflowDescription()\n-\t\t\t\t\t\t\t.getAnalysisType());\n-\n-\t\t\tUser user = userService.getUserByUsername(principal.getName());\n-\t\t\t// Get all the reference files that could be used for this pipeline.\n-\t\t\tList<Map<String, Object>> referenceFileList = new ArrayList<>();\n-\t\t\tList<Map<String, Object>> projectList = new ArrayList<>();\n-\t\t\tList<Map<String, Object>> addRefList = new ArrayList<>();\n-\t\t\tIridaWorkflowDescription description = flow.getWorkflowDescription();\n-\t\t\tfinal String workflowName = description.getName()\n-\t\t\t\t\t.toLowerCase();\n-\n-\t\t\t//loop through the projects in the set to get their files\n-\t\t\tfor (Project project : projects) {\n-\t\t\t\t// Check to see if the pipeline requires a reference file.\n-\t\t\t\tif (description.requiresReference()) {\n-\t\t\t\t\tList<Join<Project, ReferenceFile>> joinList = referenceFileService.getReferenceFilesForProject(\n-\t\t\t\t\t\t\tproject);\n-\n-\t\t\t\t\t//add the ref files from the projects\n-\t\t\t\t\tfor (Join<Project, ReferenceFile> join : joinList) {\n-\t\t\t\t\t\treferenceFileList.add(ImmutableMap.of(\"project\", project, \"file\", join.getObject()));\n-\t\t\t\t\t}\n-\n-\t\t\t\t\t//if there's no ref files, show the user projects they can add ref files to\n-\t\t\t\t\tif (referenceFileList.size() == 0) {\n-\t\t\t\t\t\tif (user.getSystemRole()\n-\t\t\t\t\t\t\t\t.equals(Role.ROLE_ADMIN) || projectService.userHasProjectRole(user, project,\n-\t\t\t\t\t\t\t\tProjectRole.PROJECT_OWNER)) {\n-\t\t\t\t\t\t\taddRefList.add(ImmutableMap.of(\"name\", project.getLabel(), \"id\", project.getId()));\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\n-\t\t\t\tMap<String, Object> projectMap = new HashMap<>();\n-\t\t\t\tList<Map<String, Object>> sampleList = new ArrayList<>();\n-\n-\t\t\t\t//if we're not doing automated, get the files from the cart\n-\t\t\t\tif (projectId == null) {\n-\t\t\t\t\tList<Sample> samples = cart.get(project);\n-\t\t\t\t\tcanUpdateAllSamples &= updateSamplePermission.isAllowed(authentication, samples);\n-\n-\t\t\t\t\t//for each sample in the project in the cart\n-\t\t\t\t\tfor (Sample sample : samples) {\n-\t\t\t\t\t\t//add the sample details\n-\t\t\t\t\t\tMap<String, Object> sampleMap = new HashMap<>();\n-\t\t\t\t\t\tsampleMap.put(\"name\", sample.getLabel());\n-\t\t\t\t\t\tsampleMap.put(\"id\", sample.getId()\n-\t\t\t\t\t\t\t\t.toString());\n-\t\t\t\t\t\tMap<String, List<? extends Object>> files = new HashMap<>();\n-\n-\t\t\t\t\t\t// get the paired end reads\n-\t\t\t\t\t\tif (description.acceptsPairedSequenceFiles()) {\n-\t\t\t\t\t\t\tCollection<SampleSequencingObjectJoin> pairs = sequencingObjectService.getSequencesForSampleOfType(\n-\t\t\t\t\t\t\t\t\tsample, SequenceFilePair.class);\n-\t\t\t\t\t\t\tfiles.put(\"paired_end\", pairs.stream()\n-\t\t\t\t\t\t\t\t\t.map(SampleSequencingObjectJoin::getObject)\n-\t\t\t\t\t\t\t\t\t.collect(Collectors.toList()));\n-\t\t\t\t\t\t}\n-\n-\t\t\t\t\t\t// get the single end reads\n-\t\t\t\t\t\tif (description.acceptsSingleSequenceFiles()) {\n-\t\t\t\t\t\t\tCollection<SampleSequencingObjectJoin> singles = sequencingObjectService.getSequencesForSampleOfType(\n-\t\t\t\t\t\t\t\t\tsample, SingleEndSequenceFile.class);\n-\t\t\t\t\t\t\tfiles.put(\"single_end\", singles.stream()\n-\t\t\t\t\t\t\t\t\t.map(SampleSequencingObjectJoin::getObject)\n-\t\t\t\t\t\t\t\t\t.collect(Collectors.toList()));\n-\t\t\t\t\t\t}\n-\n-\t\t\t\t\t\tsampleMap.put(\"files\", files);\n-\t\t\t\t\t\tsampleList.add(sampleMap);\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\n-\t\t\t\t//add the project info and read samples to a map\n-\t\t\t\tprojectMap.put(\"id\", project.getId()\n-\t\t\t\t\t\t.toString());\n-\t\t\t\tprojectMap.put(\"name\", project.getLabel());\n-\t\t\t\tprojectMap.put(\"samples\", sampleList);\n-\t\t\t\tprojectList.add(projectMap);\n-\n-\t\t\t}\n-\n-\t\t\t// Need to add the pipeline parameters\n-\t\t\tfinal List<IridaWorkflowParameter> defaultWorkflowParameters = flow.getWorkflowDescription()\n-\t\t\t\t\t.getParameters();\n-\t\t\tfinal List<Map<String, Object>> parameters = new ArrayList<>();\n-\t\t\tif (defaultWorkflowParameters != null) {\n-\t\t\t\tfinal List<Map<String, String>> defaultParameters = new ArrayList<>();\n-\t\t\t\tfor (IridaWorkflowParameter p : defaultWorkflowParameters) {\n-\t\t\t\t\tif (p.isRequired()) {\n-\t\t\t\t\t\tcontinue;\n-\t\t\t\t\t}\n-\t\t\t\t\tdefaultParameters.add(ImmutableMap.of(\"label\",\n-\t\t\t\t\t\t\tmessageSource.getMessage(\"pipeline.parameters.\" + workflowName + \".\" + p.getName(), null,\n-\t\t\t\t\t\t\t\t\tlocale), \"value\", p.getDefaultValue(), \"name\", p.getName()));\n-\t\t\t\t}\n-\t\t\t\tparameters.add(ImmutableMap.of(\"id\", DEFAULT_WORKFLOW_PARAMETERS_ID, \"label\",\n-\t\t\t\t\t\tmessageSource.getMessage(\"workflow.parameters.named.default\", null, locale), \"parameters\",\n-\t\t\t\t\t\tdefaultParameters));\n-\t\t\t\tfinal List<IridaWorkflowNamedParameters> namedParameters = namedParameterService.findNamedParametersForWorkflow(\n-\t\t\t\t\t\tpipelineId);\n-\t\t\t\tfor (final IridaWorkflowNamedParameters p : namedParameters) {\n-\t\t\t\t\tfinal List<Map<String, String>> namedParametersList = new ArrayList<>();\n-\t\t\t\t\tfor (final Map.Entry<String, String> parameter : p.getInputParameters()\n-\t\t\t\t\t\t\t.entrySet()) {\n-\t\t\t\t\t\tnamedParametersList.add(ImmutableMap.of(\"label\", messageSource.getMessage(\n-\t\t\t\t\t\t\t\t\"pipeline.parameters.\" + workflowName + \".\" + parameter.getKey(), null, locale),\n-\t\t\t\t\t\t\t\t\"value\", parameter.getValue(), \"name\", parameter.getKey()));\n-\t\t\t\t\t}\n-\t\t\t\t\tparameters.add(\n-\t\t\t\t\t\t\tImmutableMap.of(\"id\", p.getId(), \"label\", p.getLabel(), \"parameters\", namedParametersList));\n-\t\t\t\t}\n-\t\t\t\tmodel.addAttribute(\"parameterModalTitle\",\n-\t\t\t\t\t\tmessageSource.getMessage(\"pipeline.parameters.modal-title.\" + workflowName, null, locale));\n-\t\t\t} else {\n-\t\t\t\tmodel.addAttribute(\"noParameters\", messageSource.getMessage(\"pipeline.no-parameters\", null, locale));\n-\t\t\t}\n-\n-\t\t\t//getting default pipeline name.  regular pipelines just have a date.  automated ones say it's automated\n-\t\t\tString defaultName = null;\n-\t\t\tif (projectId != null) {\n-\t\t\t\tdefaultName = messageSource.getMessage(\"workflow.name.automated-prefix\",\n-\t\t\t\t\t\tnew Object[] { description.getName() }, locale);\n-\t\t\t} else {\n-\t\t\t\tSimpleDateFormat sdf;\n-\t\t\t\tsdf = new SimpleDateFormat(\"yyyyMMdd\");\n-\t\t\t\tString text = sdf.format(new Date());\n-\t\t\t\tdefaultName = description.getName() + \"_\" + text;\n-\t\t\t}\n-\n-\t\t\t// Parameters should be added not matter what, even if they are empty.\n-\t\t\tmodel.addAttribute(\"parameters\", parameters);\n-\n-\t\t\tmodel.addAttribute(\"title\",\n-\t\t\t\t\tmessageSource.getMessage(\"pipeline.title.\" + description.getName(), null, locale));\n-\t\t\tmodel.addAttribute(\"mainTitle\",\n-\t\t\t\t\tmessageSource.getMessage(\"pipeline.h1.\" + description.getName(), null, locale));\n-\t\t\tmodel.addAttribute(\"name\", defaultName);\n-\t\t\tmodel.addAttribute(\"pipelineId\", pipelineId.toString());\n-\t\t\tmodel.addAttribute(\"referenceFiles\", referenceFileList);\n-\t\t\tmodel.addAttribute(\"referenceRequired\", description.requiresReference());\n-\t\t\tmodel.addAttribute(\"addRefProjects\", addRefList);\n-\t\t\tmodel.addAttribute(\"projects\", projectList);\n-\t\t\tmodel.addAttribute(\"canUpdateSamples\", canUpdateAllSamples);\n-\t\t\tmodel.addAttribute(\"workflowName\", workflowName);\n-\t\t\tmodel.addAttribute(\"dynamicSourceRequired\", description.requiresDynamicSource());\n-\t\t\tmodel.addAttribute(\"analysisType\", flow.getWorkflowDescription()\n-\t\t\t\t\t.getAnalysisType());\n-\t\t\tmodel.addAttribute(\"emailConfigured\", emailController.isMailConfigured());\n-\n-\t\t\tfinal List<Map<String, Object>> dynamicSources = new ArrayList<>();\n-\t\t\tif (description.requiresDynamicSource()) {\n-\t\t\t\tTabularToolDataTable galaxyToolDataTable = new TabularToolDataTable();\n-\t\t\t\tIridaWorkflowDynamicSourceGalaxy dynamicSource = new IridaWorkflowDynamicSourceGalaxy();\n-\t\t\t\tfor (IridaWorkflowParameter parameter : description.getParameters()) {\n-\t\t\t\t\tif (parameter.isRequired() && parameter.hasDynamicSource()) {\n-\t\t\t\t\t\ttry {\n-\t\t\t\t\t\t\tdynamicSource = parameter.getDynamicSource();\n-\t\t\t\t\t\t} catch (IridaWorkflowParameterException e) {\n-\t\t\t\t\t\t\tlogger.debug(\"Dynamic Source error: \", e);\n-\t\t\t\t\t\t}\n-\n-\t\t\t\t\t\tList<Object> parametersList = new ArrayList<>();\n-\t\t\t\t\t\tString dynamicSourceName;\n-\t\t\t\t\t\tMap<String, Object> toolDataTable = new HashMap<>();\n-\t\t\t\t\t\ttry {\n-\t\t\t\t\t\t\tdynamicSourceName = dynamicSource.getName();\n-\t\t\t\t\t\t\ttoolDataTable.put(\"id\", dynamicSourceName);\n-\t\t\t\t\t\t\ttoolDataTable.put(\"label\",\n-\t\t\t\t\t\t\t\t\tmessageSource.getMessage(\"dynamicsource.label.\" + dynamicSourceName, null, locale));\n-\t\t\t\t\t\t\ttoolDataTable.put(\"parameters\", parametersList);\n-\n-\t\t\t\t\t\t\tgalaxyToolDataTable = galaxyToolDataService.getToolDataTable(dynamicSourceName);\n-\t\t\t\t\t\t\tList<String> labels = galaxyToolDataTable.getFieldsForColumn(\n-\t\t\t\t\t\t\t\t\tdynamicSource.getDisplayColumn());\n-\t\t\t\t\t\t\tIterator<String> labelsIterator = labels.iterator();\n-\t\t\t\t\t\t\tList<String> values = galaxyToolDataTable.getFieldsForColumn(\n-\t\t\t\t\t\t\t\t\tdynamicSource.getParameterColumn());\n-\t\t\t\t\t\t\tIterator<String> valuesIterator = values.iterator();\n-\n-\t\t\t\t\t\t\twhile (labelsIterator.hasNext() && valuesIterator.hasNext()) {\n-\t\t\t\t\t\t\t\tString label = labelsIterator.next();\n-\t\t\t\t\t\t\t\tString value = valuesIterator.next();\n-\t\t\t\t\t\t\t\tHashMap<String, String> toolDataTableFieldsMap = new HashMap<>();\n-\t\t\t\t\t\t\t\ttoolDataTableFieldsMap.put(\"label\", label);\n-\t\t\t\t\t\t\t\ttoolDataTableFieldsMap.put(\"value\", value);\n-\t\t\t\t\t\t\t\ttoolDataTableFieldsMap.put(\"name\", parameter.getName());\n-\t\t\t\t\t\t\t\tparametersList.add(toolDataTableFieldsMap);\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\tdynamicSources.add(toolDataTable);\n-\t\t\t\t\t\t} catch (Exception e) {\n-\t\t\t\t\t\t\tlogger.debug(\"Tool Data Table not found: \", e);\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t\tmodel.addAttribute(\"dynamicSources\", dynamicSources);\n-\t\t\t}\n-\n-\t\t\tfinal List<Map<String, Object>> paramsWithChoices = description.getParameters()\n-\t\t\t\t\t.stream()\n-\t\t\t\t\t.filter(IridaWorkflowParameter::hasChoices)\n-\t\t\t\t\t.map(x -> ImmutableMap.of(\"label\", localizedParamLabel(locale, workflowName, x.getName()), \"name\",\n-\t\t\t\t\t\t\tx.getName(), \"choices\", x.getChoices()\n-\t\t\t\t\t\t\t\t\t.stream()\n-\t\t\t\t\t\t\t\t\t.map(c -> ImmutableMap.of(\"name\",\n-\t\t\t\t\t\t\t\t\t\t\tlocalizedParamOptionLabel(locale, workflowName, x.getName(), c.getName()),\n-\t\t\t\t\t\t\t\t\t\t\t\"value\", c.getValue()))\n-\t\t\t\t\t\t\t\t\t.collect(Collectors.toList())))\n-\t\t\t\t\t.collect(Collectors.toList());\n-\t\t\tmodel.addAttribute(\"paramsWithChoices\", paramsWithChoices);\n-\t\t\tresponse = URL_GENERIC_PIPELINE;\n-\t\t}\n-\n-\t\treturn response;\n-\t}\n-\n-\t/**\n-\t * Get localized workflow parameter label.\n-\t * <p>\n-\t * If the localized workflow parameter label text is not found by the {@link MessageSource}, then log the\n-\t * NoSuchMessageException and return the `paramName` as the localized parameter label.\n-\t *\n-\t * @param locale       Message locale\n-\t * @param workflowName Workflow name\n-\t * @param paramName    Parameter name\n-\t * @return Localized parameter label if found in {@link MessageSource}; otherwise, return `paramName`.\n-\t */\n-\tprivate String localizedParamLabel(Locale locale, String workflowName, String paramName) {\n-\t\tfinal String messageName = \"pipeline.parameters.\" + workflowName + \".\" + paramName;\n-\t\ttry {\n-\t\t\treturn messageSource.getMessage(messageName, null, locale);\n-\t\t} catch (NoSuchMessageException e) {\n-\t\t\tlogger.error(\"Couldn't find message for '\" + messageName + \"': \", e);\n-\t\t\treturn paramName;\n-\t\t}\n-\t}\n-\n-\tprivate String localizedParamOptionLabel(Locale locale, String workflowName, String paramName, String optionName) {\n-\t\tfinal String messageName = \"pipeline.parameters.\" + workflowName + \".\" + paramName + \".\" + optionName;\n-\t\ttry {\n-\t\t\treturn messageSource.getMessage(messageName, null, locale);\n-\t\t} catch (NoSuchMessageException e) {\n-\t\t\tlogger.error(\"Couldn't find message for '\" + messageName + \"': \", e);\n-\t\t\treturn paramName + \".\" + optionName;\n-\t\t}\n-\t}\n-\n-\t// ************************************************************************************************\n-\t// AJAX\n-\t// ************************************************************************************************\n-\n-\t/**\n-\t * Launch a pipeline\n-\t *\n-\t * @param locale     the locale that the browser is using for the current request.\n-\t * @param parameters DTO of pipeline start parameters\n-\t * @return a JSON response with the status and any messages.\n-\t */\n-\t@RequestMapping(value = \"/ajax/start\", method = RequestMethod.POST)\n-\tpublic @ResponseBody\n-\tMap<String, Object> ajaxStartPipeline(Locale locale, @RequestBody final PipelineStartParameters parameters) {\n-\t\ttry {\n-\t\t\tIridaWorkflow flow = workflowsService.getDisplayableIridaWorkflow(parameters.getWorkflowId());\n-\t\t\tIridaWorkflowDescription description = flow.getWorkflowDescription();\n-\n-\t\t\t// The pipeline needs to have a name.\n-\t\t\tString name = parameters.getName();\n-\t\t\tif (Strings.isNullOrEmpty(name)) {\n-\t\t\t\treturn ImmutableMap.of(\"error\", messageSource.getMessage(\"workflow.no-name-provided\", null, locale));\n-\t\t\t}\n-\n-\t\t\t// Check to see if a reference file is required.\n-\t\t\tLong ref = parameters.getRef();\n-\t\t\tif (description.requiresReference() && ref == null) {\n-\t\t\t\treturn ImmutableMap.of(\"error\",\n-\t\t\t\t\t\tmessageSource.getMessage(\"pipeline.error.no-reference.pipeline-start\", null, locale));\n-\t\t\t}\n-\n-\t\t\t// Get the pipeline parameters\n-\t\t\tMap<String, String> params = new HashMap<>();\n-\t\t\tIridaWorkflowNamedParameters namedParameters = null;\n-\t\t\tMap<String, Object> selectedParameters = parameters.getSelectedParameters();\n-\t\t\tif (selectedParameters != null) {\n-\t\t\t\ttry {\n-\t\t\t\t\tfinal String selectedParametersId = selectedParameters.get(\"id\")\n-\t\t\t\t\t\t\t.toString();\n-\t\t\t\t\tif (!DEFAULT_WORKFLOW_PARAMETERS_ID.equals(selectedParametersId)\n-\t\t\t\t\t\t\t&& !CUSTOM_UNSAVED_WORKFLOW_PARAMETERS_ID.equals(selectedParametersId)) {\n-\t\t\t\t\t\t// this means that a named parameter set was selected\n-\t\t\t\t\t\t// and unmodified, so load up that named parameter set\n-\t\t\t\t\t\t// to pass along.\n-\t\t\t\t\t\tnamedParameters = namedParameterService.read(Long.valueOf(selectedParametersId));\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\t@SuppressWarnings(\"unchecked\") final List<Map<String, String>> unnamedParameters = (List<Map<String, String>>) selectedParameters.get(\n-\t\t\t\t\t\t\t\t\"parameters\");\n-\t\t\t\t\t\tfor (final Map<String, String> parameter : unnamedParameters) {\n-\t\t\t\t\t\t\tparams.put(parameter.get(\"name\"), parameter.get(\"value\"));\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t} catch (Exception e) {\n-\t\t\t\t\treturn ImmutableMap.of(\"parameterError\",\n-\t\t\t\t\t\t\tmessageSource.getMessage(\"pipeline.parameters.error\", null, locale));\n-\t\t\t\t}\n-\t\t\t}\n-\n-\t\t\tString analysisDescription = parameters.getDescription();\n-\t\t\tBoolean writeResultsToSamples = parameters.getWriteResultsToSamples();\n-\t\t\tBoolean emailPipelineResult = parameters.getEmailPipelineResult();\n-\n-\t\t\t//if we have an automated project set, create the new template\n-\t\t\tif (parameters.getAutomatedProject() != null) {\n-\t\t\t\tProject readProject = projectService.read(parameters.getAutomatedProject());\n-\n-\t\t\t\tString statusMessage = messageSource.getMessage(\"analysis.template.status.new\", null, locale);\n-\n-\t\t\t\tanalysisSubmissionService.createSingleSampleSubmissionTemplate(flow, ref, params, namedParameters, name,\n-\t\t\t\t\t\tstatusMessage, analysisDescription, readProject, writeResultsToSamples, emailPipelineResult);\n-\t\t\t} else {\n-\t\t\t\t//otherwise get the project shares and sequence files\n-\t\t\t\tList<Project> projectsToShare = new ArrayList<>();\n-\t\t\t\tList<Long> sharedProjects = parameters.getSharedProjects();\n-\t\t\t\tif (sharedProjects != null && !sharedProjects.isEmpty()) {\n-\t\t\t\t\tprojectsToShare = Lists.newArrayList(projectService.readMultiple(sharedProjects));\n-\t\t\t\t}\n-\n-\t\t\t\t// Get a list of the files to submit\n-\t\t\t\tList<SingleEndSequenceFile> singleEndFiles = new ArrayList<>();\n-\t\t\t\tList<SequenceFilePair> sequenceFilePairs = new ArrayList<>();\n-\t\t\t\tList<Long> single = parameters.getSingle();\n-\t\t\t\tif (single != null) {\n-\t\t\t\t\tIterable<SequencingObject> readMultiple = sequencingObjectService.readMultiple(single);\n-\n-\t\t\t\t\treadMultiple.forEach(f -> {\n-\t\t\t\t\t\tif (!(f instanceof SingleEndSequenceFile)) {\n-\t\t\t\t\t\t\tthrow new IllegalArgumentException(\"file \" + f.getId() + \" not a SingleEndSequenceFile\");\n-\t\t\t\t\t\t}\n-\n-\t\t\t\t\t\tsingleEndFiles.add((SingleEndSequenceFile) f);\n-\t\t\t\t\t});\n-\n-\t\t\t\t\t// Check the single files for duplicates in a sample, throws SampleAnalysisDuplicateException\n-\t\t\t\t\tsequencingObjectService.getUniqueSamplesForSequencingObjects(Sets.newHashSet(singleEndFiles));\n-\t\t\t\t}\n-\t\t\t\tList<Long> paired = parameters.getPaired();\n-\t\t\t\tif (paired != null) {\n-\t\t\t\t\tIterable<SequencingObject> readMultiple = sequencingObjectService.readMultiple(paired);\n-\n-\t\t\t\t\treadMultiple.forEach(f -> {\n-\t\t\t\t\t\tif (!(f instanceof SequenceFilePair)) {\n-\t\t\t\t\t\t\tthrow new IllegalArgumentException(\"file \" + f.getId() + \" not a SequenceFilePair\");\n-\t\t\t\t\t\t}\n-\n-\t\t\t\t\t\tsequenceFilePairs.add((SequenceFilePair) f);\n-\t\t\t\t\t});\n-\n-\t\t\t\t\t// Check the pair files for duplicates in a sample, throws SampleAnalysisDuplicateException\n-\t\t\t\t\tsequencingObjectService.getUniqueSamplesForSequencingObjects(Sets.newHashSet(sequenceFilePairs));\n-\t\t\t\t}\n-\n-\t\t\t\tif (description.getInputs()\n-\t\t\t\t\t\t.requiresSingleSample()) {\n-\t\t\t\t\tanalysisSubmissionService.createSingleSampleSubmission(flow, ref, singleEndFiles, sequenceFilePairs,\n-\t\t\t\t\t\t\tparams, namedParameters, name, analysisDescription, projectsToShare, writeResultsToSamples,\n-\t\t\t\t\t\t\temailPipelineResult);\n-\t\t\t\t} else {\n-\t\t\t\t\tanalysisSubmissionService.createMultipleSampleSubmission(flow, ref, singleEndFiles,\n-\t\t\t\t\t\t\tsequenceFilePairs, params, namedParameters, name, analysisDescription, projectsToShare,\n-\t\t\t\t\t\t\twriteResultsToSamples, emailPipelineResult);\n-\t\t\t\t}\n-\t\t\t}\n-\n-\t\t} catch (IridaWorkflowNotFoundException | IridaWorkflowNotDisplayableException e) {\n-\t\t\tlogger.error(\"Cannot find or cannot launch IridaWorkflow [\" + parameters.getWorkflowId() + \"]\", e);\n-\t\t\treturn ImmutableMap.of(\"pipelineError\",\n-\t\t\t\t\tmessageSource.getMessage(\"pipeline.error.invalid-pipeline\", null, locale));\n-\t\t} catch (DuplicateSampleException e) {\n-\t\t\tlogger.error(\"Multiple files for Sample found\", e);\n-\t\t\treturn ImmutableMap.of(\"pipelineError\",\n-\t\t\t\t\tmessageSource.getMessage(\"pipeline.error.duplicate-samples\", null, locale));\n-\t\t}\n-\n-\t\treturn ImmutableMap.of(\"success\", true);\n-\t}\n-\n-\t/**\n-\t * Get {@link IridaWorkflowDescription} for a workflow/pipeline UUID.\n-\t *\n-\t * @param pipelineUUID Workflow/Pipeline UUID\n-\t * @return Map corresponding to a {@link IridaWorkflowDescription}.\n-\t * @throws IridaWorkflowNotFoundException if workflow could not be found.\n-\t */\n-\t@RequestMapping(value = \"/ajax/{pipelineUUID}\")\n-\t@ResponseBody\n-\tpublic IridaWorkflowDescription getPipelineInfo(@PathVariable UUID pipelineUUID)\n-\t\t\tthrows IridaWorkflowNotFoundException {\n-\t\treturn workflowsService.getIridaWorkflowOrUnknown(pipelineUUID)\n-\t\t\t\t.getWorkflowDescription();\n-\t}\n-\n-\t/**\n-\t * Save a set of {@link IridaWorkflowNamedParameters} and respond with the ID that we saved the new set with.\n-\t *\n-\t * @param params the DTO with the parameters to save.\n-\t * @return a map with the ID of the saved named parameters.\n-\t */\n-\t@RequestMapping(value = \"/ajax/parameters\", method = RequestMethod.POST)\n-\tpublic @ResponseBody\n-\tMap<String, Object> ajaxSaveParameters(@RequestBody final WorkflowParametersToSave params) {\n-\t\tfinal IridaWorkflowNamedParameters namedParameters = namedParameterService.create(params.namedParameters());\n-\t\treturn ImmutableMap.of(\"id\", namedParameters.getId());\n-\t}\n-\n-\t/**\n-\t * Get a {@link List} of all {@link AnalysisType}s.  If this is an automated project, it will only return the\n-\t * analyses that can be automated.\n-\t *\n-\t * @param locale           {@link Locale} of the current user\n-\t * @param automatedProject Project ID if we're launching an automated project (optional)\n-\t * @return {@link List} of localized {@link AnalysisType}\n-\t */\n-\t@RequestMapping(value = \"/ajax\", produces = MediaType.APPLICATION_JSON_VALUE)\n-\tpublic List<Pipeline> getWorkflowTypes(\n-\t\t\t@RequestParam(required = false, name = \"automatedProject\") Long automatedProject, Locale locale) {\n-\t\tSet<AnalysisType> analysisTypes = workflowsService.getDisplayableWorkflowTypes();\n-\t\tList<Pipeline> pipelines = new ArrayList<>();\n-\n-\t\tfor (AnalysisType type : analysisTypes) {\n-\t\t\ttry {\n-\t\t\t\tIridaWorkflow flow = workflowsService.getDefaultWorkflowByType(type);\n-\t\t\t\tIridaWorkflowDescription description = flow.getWorkflowDescription();\n-\n-\t\t\t\t//if we're setting up an automated project, strip out all the multi-sample pipelines\n-\t\t\t\tif (automatedProject == null || (description.getInputs()\n-\t\t\t\t\t\t.requiresSingleSample())) {\n-\t\t\t\t\tPipeline workflow = createPipeline(type, locale);\n-\t\t\t\t\tpipelines.add(workflow);\n-\t\t\t\t}\n-\t\t\t} catch (IridaWorkflowNotFoundException e) {\n-\t\t\t\tlogger.error(\"Cannot find IridaWorkFlow for '\" + type.getType() + \"'\", e);\n-\t\t\t}\n-\t\t}\n-\t\treturn pipelines.stream()\n-\t\t\t\t.sorted(Comparator.comparing(Pipeline::getName))\n-\t\t\t\t.collect(Collectors.toList());\n-\t}\n-\n-\t/**\n-\t * Create a Pipeline for consumption by the UI\n-\t *\n-\t * @param analysisType {@link AnalysisType} type of analysis pipeline\n-\t * @param locale       {@link Locale}\n-\t * @return {@link Pipeline}\n-\t * @throws IridaWorkflowNotFoundException thrown if {@link IridaWorkflowDescription} is not found\n-\t */\n-\tprivate Pipeline createPipeline(AnalysisType analysisType, Locale locale) throws IridaWorkflowNotFoundException {\n-\t\tIridaWorkflowDescription workflowDescription = workflowsService.getDefaultWorkflowByType(analysisType)\n-\t\t\t\t.getWorkflowDescription();\n-\t\tString prefix = \"workflow.\" + analysisType.getType();\n-\t\tString name = messageSource.getMessage(prefix + \".title\", new Object[] {}, locale);\n-\t\tString description = messageSource.getMessage(prefix + \".description\", new Object[] {}, locale);\n-\t\tUUID id = workflowDescription.getId();\n-\t\tString styleName = analysisType.getType();\n-\t\treturn new Pipeline(name, description, id, styleName);\n-\t}\n+    // URI's\n+    public static final String BASE_URL = \"/pipelines\";\n+    /*\n+     * CONSTANTS\n+     */\n+    private static final String DEFAULT_WORKFLOW_PARAMETERS_ID = \"default\";\n+    private static final String CUSTOM_UNSAVED_WORKFLOW_PARAMETERS_ID = \"custom\";\n+    public static final String URL_EMPTY_CART_REDIRECT = \"redirect:/pipelines\";\n+    public static final String URL_LAUNCH = \"pipelines/pipeline_selection\";\n+    public static final String URL_GENERIC_PIPELINE = \"pipelines/types/generic_pipeline\";\n+    public static final String URI_LIST_PIPELINES = \"/ajax/list.json\";\n+    public static final String URI_AJAX_START_PIPELINE = \"/ajax/start.json\";\n+    public static final String URI_AJAX_CART_LIST = \"/ajax/cart_list.json\";\n+    // JSON KEYS\n+    public static final String JSON_KEY_SAMPLE_ID = \"id\";\n+    public static final String JSON_KEY_SAMPLE_OMIT_FILES_LIST = \"omit\";\n+    private static final Logger logger = LoggerFactory.getLogger(PipelineController.class);\n+    /*\n+     * SERVICES\n+     */\n+    private ReferenceFileService referenceFileService;\n+    private SequencingObjectService sequencingObjectService;\n+    private AnalysisSubmissionService analysisSubmissionService;\n+    private ProjectService projectService;\n+    private UserService userService;\n+    private IridaWorkflowsService workflowsService;\n+    private MessageSource messageSource;\n+    private WorkflowNamedParametersService namedParameterService;\n+    private UpdateSamplePermission updateSamplePermission;\n+    private AnalysisSubmissionSampleProcessor analysisSubmissionSampleProcessor;\n+    private GalaxyToolDataService galaxyToolDataService;\n+    private EmailController emailController;\n+    private UICartService cartService;\n+\n+    @Autowired\n+    public PipelineController(SequencingObjectService sequencingObjectService,\n+                              ReferenceFileService referenceFileService, AnalysisSubmissionService analysisSubmissionService,\n+                              IridaWorkflowsService iridaWorkflowsService, ProjectService projectService, UserService userService,\n+                              MessageSource messageSource, WorkflowNamedParametersService namedParameterService, UpdateSamplePermission updateSamplePermission,\n+                              AnalysisSubmissionSampleProcessor analysisSubmissionSampleProcessor,\n+                              GalaxyToolDataService galaxyToolDataService, EmailController emailController, UICartService cartService) {\n+        this.sequencingObjectService = sequencingObjectService;\n+        this.referenceFileService = referenceFileService;\n+        this.analysisSubmissionService = analysisSubmissionService;\n+        this.workflowsService = iridaWorkflowsService;\n+        this.projectService = projectService;\n+        this.userService = userService;\n+        this.messageSource = messageSource;\n+        this.namedParameterService = namedParameterService;\n+        this.updateSamplePermission = updateSamplePermission;\n+        this.analysisSubmissionSampleProcessor = analysisSubmissionSampleProcessor;\n+        this.galaxyToolDataService = galaxyToolDataService;\n+        this.emailController = emailController;\n+        this.cartService = cartService;\n+    }\n+\n+    /**\n+     * Get a generic pipeline page.\n+     *\n+     * @param model      the the model for the current request\n+     * @param principal  the user in the current request\n+     * @param locale     the locale that the user is using\n+     * @param pipelineId the pipeline to load\n+     * @param projectId  Project ID to add a {@link ca.corefacility.bioinformatics.irida.model.workflow.submission.AnalysisSubmissionTemplate}\n+     *                   if necessary (not required)\n+     * @return a page reference or redirect to load.\n+     */\n+    @RequestMapping(value = \"/{pipelineId}\")\n+    public String getSpecifiedPipelinePage(final Model model, Principal principal, Locale locale,\n+                                           @PathVariable UUID pipelineId, @RequestParam(name = \"automatedProject\", required = false) Long projectId) {\n+        String response = URL_EMPTY_CART_REDIRECT;\n+        boolean canUpdateAllSamples;\n+\n+        Map<Project, List<Sample>> cart = cartService.getFullCart();\n+\n+        Set<Project> projects = cart.keySet();\n+\n+        //if we have a project id, overwrite the project set from the cart\n+        if (projectId != null) {\n+            Project project = projectService.read(projectId);\n+            projects = Sets.newHashSet(project);\n+\n+            model.addAttribute(\"automatedProject\", project);\n+            //this is separate because the view can't handle dereferencing a null project if one isn't set\n+            model.addAttribute(\"automatedProjectId\", project.getId());\n+        }\n+\n+        // Ensure we have something in the cart or an automated pipeline project\n+        if (!projects.isEmpty()) {\n+            Authentication authentication = SecurityContextHolder.getContext()\n+                    .getAuthentication();\n+\n+            IridaWorkflow flow = null;\n+            try {\n+                flow = workflowsService.getDisplayableIridaWorkflow(pipelineId);\n+            } catch (IridaWorkflowNotFoundException | IridaWorkflowNotDisplayableException e) {\n+                logger.error(\"Workflow not found or not displayable - See stack:\", e);\n+                return \"redirect:errors/not_found\";\n+            }\n+\n+            // Check if there even is functionality to update samples from results for this pipeline\n+            canUpdateAllSamples = analysisSubmissionSampleProcessor.hasRegisteredAnalysisSampleUpdater(\n+                    flow.getWorkflowDescription()\n+                            .getAnalysisType());\n+\n+            User user = userService.getUserByUsername(principal.getName());\n+            // Get all the reference files that could be used for this pipeline.\n+            List<Map<String, Object>> referenceFileList = new ArrayList<>();\n+            List<Map<String, Object>> projectList = new ArrayList<>();\n+            List<Map<String, Object>> addRefList = new ArrayList<>();\n+            IridaWorkflowDescription description = flow.getWorkflowDescription();\n+            final String workflowName = description.getName()\n+                    .toLowerCase();\n+\n+            //loop through the projects in the set to get their files\n+            for (Project project : projects) {\n+                // Check to see if the pipeline requires a reference file.\n+                if (description.requiresReference()) {\n+                    List<Join<Project, ReferenceFile>> joinList = referenceFileService.getReferenceFilesForProject(\n+                            project);\n+\n+                    //add the ref files from the projects\n+                    for (Join<Project, ReferenceFile> join : joinList) {\n+                        referenceFileList.add(ImmutableMap.of(\"project\", project, \"file\", join.getObject()));\n+                    }\n+\n+                    //if there's no ref files, show the user projects they can add ref files to\n+                    if (referenceFileList.size() == 0) {\n+                        if (user.getSystemRole()\n+                                .equals(Role.ROLE_ADMIN) || projectService.userHasProjectRole(user, project,\n+                                ProjectRole.PROJECT_OWNER)) {\n+                            addRefList.add(ImmutableMap.of(\"name\", project.getLabel(), \"id\", project.getId()));\n+                        }\n+                    }\n+                }\n+\n+                Map<String, Object> projectMap = new HashMap<>();\n+                List<Map<String, Object>> sampleList = new ArrayList<>();\n+\n+                //if we're not doing automated, get the files from the cart\n+                if (projectId == null) {\n+                    List<Sample> samples = cart.get(project);\n+                    canUpdateAllSamples &= updateSamplePermission.isAllowed(authentication, samples);\n+\n+                    //for each sample in the project in the cart\n+                    for (Sample sample : samples) {\n+                        //add the sample details\n+                        Map<String, Object> sampleMap = new HashMap<>();\n+                        sampleMap.put(\"name\", sample.getLabel());\n+                        sampleMap.put(\"id\", sample.getId()\n+                                .toString());\n+                        Map<String, List<? extends Object>> files = new HashMap<>();\n+\n+                        // get the paired end reads\n+                        if (description.acceptsPairedSequenceFiles()) {\n+                            Collection<SampleSequencingObjectJoin> pairs = sequencingObjectService.getSequencesForSampleOfType(\n+                                    sample, SequenceFilePair.class);\n+                            files.put(\"paired_end\", pairs.stream()\n+                                    .map(SampleSequencingObjectJoin::getObject)\n+                                    .collect(Collectors.toList()));\n+                        }\n+\n+                        // get the single end reads\n+                        if (description.acceptsSingleSequenceFiles()) {\n+                            Collection<SampleSequencingObjectJoin> singles = sequencingObjectService.getSequencesForSampleOfType(\n+                                    sample, SingleEndSequenceFile.class);\n+                            files.put(\"single_end\", singles.stream()\n+                                    .map(SampleSequencingObjectJoin::getObject)\n+                                    .collect(Collectors.toList()));\n+                        }\n+\n+                        sampleMap.put(\"files\", files);\n+                        sampleList.add(sampleMap);\n+                    }\n+                }\n+\n+                //add the project info and read samples to a map\n+                projectMap.put(\"id\", project.getId()\n+                        .toString());\n+                projectMap.put(\"name\", project.getLabel());\n+                projectMap.put(\"samples\", sampleList);\n+                projectList.add(projectMap);\n+\n+            }\n+\n+            // Need to add the pipeline parameters\n+            final List<IridaWorkflowParameter> defaultWorkflowParameters = flow.getWorkflowDescription()\n+                    .getParameters();\n+            final List<Map<String, Object>> parameters = new ArrayList<>();\n+            if (defaultWorkflowParameters != null) {\n+                final List<Map<String, String>> defaultParameters = new ArrayList<>();\n+                for (IridaWorkflowParameter p : defaultWorkflowParameters) {\n+                    if (p.isRequired()) {\n+                        continue;\n+                    }\n+                    defaultParameters.add(ImmutableMap.of(\"label\",\n+                            messageSource.getMessage(\"pipeline.parameters.\" + workflowName + \".\" + p.getName(), null,\n+                                    locale), \"value\", p.getDefaultValue(), \"name\", p.getName()));\n+                }\n+                parameters.add(ImmutableMap.of(\"id\", DEFAULT_WORKFLOW_PARAMETERS_ID, \"label\",\n+                        messageSource.getMessage(\"workflow.parameters.named.default\", null, locale), \"parameters\",\n+                        defaultParameters));\n+                final List<IridaWorkflowNamedParameters> namedParameters = namedParameterService.findNamedParametersForWorkflow(\n+                        pipelineId);\n+                for (final IridaWorkflowNamedParameters p : namedParameters) {\n+                    final List<Map<String, String>> namedParametersList = new ArrayList<>();\n+                    for (final Map.Entry<String, String> parameter : p.getInputParameters()\n+                            .entrySet()) {\n+                        namedParametersList.add(ImmutableMap.of(\"label\", messageSource.getMessage(\n+                                \"pipeline.parameters.\" + workflowName + \".\" + parameter.getKey(), null, locale),\n+                                \"value\", parameter.getValue(), \"name\", parameter.getKey()));\n+                    }\n+                    parameters.add(\n+                            ImmutableMap.of(\"id\", p.getId(), \"label\", p.getLabel(), \"parameters\", namedParametersList));\n+                }\n+                model.addAttribute(\"parameterModalTitle\",\n+                        messageSource.getMessage(\"pipeline.parameters.modal-title.\" + workflowName, null, locale));\n+            } else {\n+                model.addAttribute(\"noParameters\", messageSource.getMessage(\"pipeline.no-parameters\", null, locale));\n+            }\n+\n+            //getting default pipeline name.  regular pipelines just have a date.  automated ones say it's automated\n+            String defaultName = null;\n+            if (projectId != null) {\n+                defaultName = messageSource.getMessage(\"workflow.name.automated-prefix\",\n+                        new Object[]{description.getName()}, locale);\n+            } else {\n+                SimpleDateFormat sdf;\n+                sdf = new SimpleDateFormat(\"yyyyMMdd\");\n+                String text = sdf.format(new Date());\n+                defaultName = description.getName() + \"_\" + text;\n+            }\n+\n+            // Parameters should be added not matter what, even if they are empty.\n+            model.addAttribute(\"parameters\", parameters);\n+\n+            model.addAttribute(\"title\",\n+                    messageSource.getMessage(\"pipeline.title.\" + description.getName(), null, locale));\n+            model.addAttribute(\"mainTitle\",\n+                    messageSource.getMessage(\"pipeline.h1.\" + description.getName(), null, locale));\n+            model.addAttribute(\"name\", defaultName);\n+            model.addAttribute(\"pipelineId\", pipelineId.toString());\n+            model.addAttribute(\"referenceFiles\", referenceFileList);\n+            model.addAttribute(\"referenceRequired\", description.requiresReference());\n+            model.addAttribute(\"addRefProjects\", addRefList);\n+            model.addAttribute(\"projects\", projectList);\n+            model.addAttribute(\"canUpdateSamples\", canUpdateAllSamples);\n+            model.addAttribute(\"workflowName\", workflowName);\n+            model.addAttribute(\"dynamicSourceRequired\", description.requiresDynamicSource());\n+            model.addAttribute(\"analysisType\", flow.getWorkflowDescription()\n+                    .getAnalysisType());\n+            model.addAttribute(\"emailConfigured\", emailController.isMailConfigured());\n+\n+            final List<Map<String, Object>> dynamicSources = new ArrayList<>();\n+            if (description.requiresDynamicSource()) {\n+                TabularToolDataTable galaxyToolDataTable = new TabularToolDataTable();\n+                IridaWorkflowDynamicSourceGalaxy dynamicSource = new IridaWorkflowDynamicSourceGalaxy();\n+                for (IridaWorkflowParameter parameter : description.getParameters()) {\n+                    if (parameter.isRequired() && parameter.hasDynamicSource()) {\n+                        try {\n+                            dynamicSource = parameter.getDynamicSource();\n+                        } catch (IridaWorkflowParameterException e) {\n+                            logger.debug(\"Dynamic Source error: \", e);\n+                        }\n+\n+                        List<Object> parametersList = new ArrayList<>();\n+                        String dynamicSourceName;\n+                        Map<String, Object> toolDataTable = new HashMap<>();\n+                        try {\n+                            dynamicSourceName = dynamicSource.getName();\n+                            toolDataTable.put(\"id\", dynamicSourceName);\n+                            toolDataTable.put(\"label\",\n+                                    messageSource.getMessage(\"dynamicsource.label.\" + dynamicSourceName, null, locale));\n+                            toolDataTable.put(\"parameters\", parametersList);\n+\n+                            galaxyToolDataTable = galaxyToolDataService.getToolDataTable(dynamicSourceName);\n+                            List<String> labels = galaxyToolDataTable.getFieldsForColumn(\n+                                    dynamicSource.getDisplayColumn());\n+                            Iterator<String> labelsIterator = labels.iterator();\n+                            List<String> values = galaxyToolDataTable.getFieldsForColumn(\n+                                    dynamicSource.getParameterColumn());\n+                            Iterator<String> valuesIterator = values.iterator();\n+\n+                            while (labelsIterator.hasNext() && valuesIterator.hasNext()) {\n+                                String label = labelsIterator.next();\n+                                String value = valuesIterator.next();\n+                                HashMap<String, String> toolDataTableFieldsMap = new HashMap<>();\n+                                toolDataTableFieldsMap.put(\"label\", label);\n+                                toolDataTableFieldsMap.put(\"value\", value);\n+                                toolDataTableFieldsMap.put(\"name\", parameter.getName());\n+                                parametersList.add(toolDataTableFieldsMap);\n+                            }\n+                            dynamicSources.add(toolDataTable);\n+                        } catch (Exception e) {\n+                            logger.debug(\"Tool Data Table not found: \", e);\n+                        }\n+                    }\n+                }\n+                model.addAttribute(\"dynamicSources\", dynamicSources);\n+            }\n+\n+            final List<Map<String, Object>> paramsWithChoices = description.getParameters()\n+                    .stream()\n+                    .filter(IridaWorkflowParameter::hasChoices)\n+                    .map(x -> ImmutableMap.of(\"label\", localizedParamLabel(locale, workflowName, x.getName()), \"name\",\n+                            x.getName(), \"choices\", x.getChoices()\n+                                    .stream()\n+                                    .map(c -> ImmutableMap.of(\"name\",\n+                                            localizedParamOptionLabel(locale, workflowName, x.getName(), c.getName()),\n+                                            \"value\", c.getValue()))\n+                                    .collect(Collectors.toList())))\n+                    .collect(Collectors.toList());\n+            model.addAttribute(\"paramsWithChoices\", paramsWithChoices);\n+            response = URL_GENERIC_PIPELINE;\n+        }\n+\n+        return response;\n+    }\n+\n+    /**\n+     * Get localized workflow parameter label.\n+     * <p>\n+     * If the localized workflow parameter label text is not found by the {@link MessageSource}, then log the\n+     * NoSuchMessageException and return the `paramName` as the localized parameter label.\n+     *\n+     * @param locale       Message locale\n+     * @param workflowName Workflow name\n+     * @param paramName    Parameter name\n+     * @return Localized parameter label if found in {@link MessageSource}; otherwise, return `paramName`.\n+     */\n+    private String localizedParamLabel(Locale locale, String workflowName, String paramName) {\n+        final String messageName = \"pipeline.parameters.\" + workflowName + \".\" + paramName;\n+        try {\n+            return messageSource.getMessage(messageName, null, locale);\n+        } catch (NoSuchMessageException e) {\n+            logger.error(\"Couldn't find message for '\" + messageName + \"': \", e);\n+            return paramName;\n+        }\n+    }\n+\n+    private String localizedParamOptionLabel(Locale locale, String workflowName, String paramName, String optionName) {\n+        final String messageName = \"pipeline.parameters.\" + workflowName + \".\" + paramName + \".\" + optionName;\n+        try {\n+            return messageSource.getMessage(messageName, null, locale);\n+        } catch (NoSuchMessageException e) {\n+            logger.error(\"Couldn't find message for '\" + messageName + \"': \", e);\n+            return paramName + \".\" + optionName;\n+        }\n+    }\n+\n+    // ************************************************************************************************\n+    // AJAX\n+    // ************************************************************************************************\n+\n+    /**\n+     * Launch a pipeline\n+     *\n+     * @param locale     the locale that the browser is using for the current request.\n+     * @param parameters DTO of pipeline start parameters\n+     * @return a JSON response with the status and any messages.\n+     */\n+    @RequestMapping(value = \"/ajax/start\", method = RequestMethod.POST)\n+    public @ResponseBody\n+    Map<String, Object> ajaxStartPipeline(Locale locale, @RequestBody final PipelineStartParameters parameters) {\n+        try {\n+            IridaWorkflow flow = workflowsService.getDisplayableIridaWorkflow(parameters.getWorkflowId());\n+            IridaWorkflowDescription description = flow.getWorkflowDescription();\n+\n+            // The pipeline needs to have a name.\n+            String name = parameters.getName();\n+            if (Strings.isNullOrEmpty(name)) {\n+                return ImmutableMap.of(\"error\", messageSource.getMessage(\"workflow.no-name-provided\", null, locale));\n+            }\n+\n+            // Check to see if a reference file is required.\n+            Long ref = parameters.getRef();\n+            if (description.requiresReference() && ref == null) {\n+                return ImmutableMap.of(\"error\",\n+                        messageSource.getMessage(\"pipeline.error.no-reference.pipeline-start\", null, locale));\n+            }\n+\n+            // Get the pipeline parameters\n+            Map<String, String> params = new HashMap<>();\n+            IridaWorkflowNamedParameters namedParameters = null;\n+            Map<String, Object> selectedParameters = parameters.getSelectedParameters();\n+            if (selectedParameters != null) {\n+                try {\n+                    final String selectedParametersId = selectedParameters.get(\"id\")\n+                            .toString();\n+                    if (!DEFAULT_WORKFLOW_PARAMETERS_ID.equals(selectedParametersId)\n+                            && !CUSTOM_UNSAVED_WORKFLOW_PARAMETERS_ID.equals(selectedParametersId)) {\n+                        // this means that a named parameter set was selected\n+                        // and unmodified, so load up that named parameter set\n+                        // to pass along.\n+                        namedParameters = namedParameterService.read(Long.valueOf(selectedParametersId));\n+                    } else {\n+                        @SuppressWarnings(\"unchecked\") final List<Map<String, String>> unnamedParameters = (List<Map<String, String>>) selectedParameters.get(\n+                                \"parameters\");\n+                        for (final Map<String, String> parameter : unnamedParameters) {\n+                            params.put(parameter.get(\"name\"), parameter.get(\"value\"));\n+                        }\n+                    }\n+                } catch (Exception e) {\n+                    return ImmutableMap.of(\"parameterError\",\n+                            messageSource.getMessage(\"pipeline.parameters.error\", null, locale));\n+                }\n+            }\n+\n+            String analysisDescription = parameters.getDescription();\n+            Boolean writeResultsToSamples = parameters.getWriteResultsToSamples();\n+            Boolean emailPipelineResult = parameters.getEmailPipelineResult();\n+\n+            //if we have an automated project set, create the new template\n+            if (parameters.getAutomatedProject() != null) {\n+                Project readProject = projectService.read(parameters.getAutomatedProject());\n+\n+                String statusMessage = messageSource.getMessage(\"analysis.template.status.new\", null, locale);\n+\n+                analysisSubmissionService.createSingleSampleSubmissionTemplate(flow, ref, params, namedParameters, name,\n+                        statusMessage, analysisDescription, readProject, writeResultsToSamples, emailPipelineResult);\n+            } else {\n+                //otherwise get the project shares and sequence files\n+                List<Project> projectsToShare = new ArrayList<>();\n+                List<Long> sharedProjects = parameters.getSharedProjects();\n+                if (sharedProjects != null && !sharedProjects.isEmpty()) {\n+                    projectsToShare = Lists.newArrayList(projectService.readMultiple(sharedProjects));\n+                }\n+\n+                // Get a list of the files to submit\n+                List<SingleEndSequenceFile> singleEndFiles = new ArrayList<>();\n+                List<SequenceFilePair> sequenceFilePairs = new ArrayList<>();\n+                List<Long> single = parameters.getSingle();\n+                if (single != null) {\n+                    Iterable<SequencingObject> readMultiple = sequencingObjectService.readMultiple(single);\n+\n+                    readMultiple.forEach(f -> {\n+                        if (!(f instanceof SingleEndSequenceFile)) {\n+                            throw new IllegalArgumentException(\"file \" + f.getId() + \" not a SingleEndSequenceFile\");\n+                        }\n+\n+                        singleEndFiles.add((SingleEndSequenceFile) f);\n+                    });\n+\n+                    // Check the single files for duplicates in a sample, throws SampleAnalysisDuplicateException\n+                    sequencingObjectService.getUniqueSamplesForSequencingObjects(Sets.newHashSet(singleEndFiles));\n+                }\n+                List<Long> paired = parameters.getPaired();\n+                if (paired != null) {\n+                    Iterable<SequencingObject> readMultiple = sequencingObjectService.readMultiple(paired);\n+\n+                    readMultiple.forEach(f -> {\n+                        if (!(f instanceof SequenceFilePair)) {\n+                            throw new IllegalArgumentException(\"file \" + f.getId() + \" not a SequenceFilePair\");\n+                        }\n+\n+                        sequenceFilePairs.add((SequenceFilePair) f);\n+                    });\n+\n+                    // Check the pair files for duplicates in a sample, throws SampleAnalysisDuplicateException\n+                    sequencingObjectService.getUniqueSamplesForSequencingObjects(Sets.newHashSet(sequenceFilePairs));\n+                }\n+\n+                if (description.getInputs()\n+                        .requiresSingleSample()) {\n+                    analysisSubmissionService.createSingleSampleSubmission(flow, ref, singleEndFiles, sequenceFilePairs,\n+                            params, namedParameters, name, analysisDescription, projectsToShare, writeResultsToSamples,\n+                            emailPipelineResult);\n+                } else {\n+                    analysisSubmissionService.createMultipleSampleSubmission(flow, ref, singleEndFiles,\n+                            sequenceFilePairs, params, namedParameters, name, analysisDescription, projectsToShare,\n+                            writeResultsToSamples, emailPipelineResult);\n+                }\n+            }\n+\n+        } catch (IridaWorkflowNotFoundException | IridaWorkflowNotDisplayableException e) {\n+            logger.error(\"Cannot find or cannot launch IridaWorkflow [\" + parameters.getWorkflowId() + \"]\", e);\n+            return ImmutableMap.of(\"pipelineError\",\n+                    messageSource.getMessage(\"pipeline.error.invalid-pipeline\", null, locale));\n+        } catch (DuplicateSampleException e) {\n+            logger.error(\"Multiple files for Sample found\", e);\n+            return ImmutableMap.of(\"pipelineError\",\n+                    messageSource.getMessage(\"pipeline.error.duplicate-samples\", null, locale));\n+        }\n+\n+        return ImmutableMap.of(\"success\", true);\n+    }\n+\n+    /**\n+     * Get {@link IridaWorkflowDescription} for a workflow/pipeline UUID.\n+     *\n+     * @param pipelineUUID Workflow/Pipeline UUID\n+     * @return Map corresponding to a {@link IridaWorkflowDescription}.\n+     * @throws IridaWorkflowNotFoundException if workflow could not be found.\n+     */\n+    @RequestMapping(value = \"/ajax/{pipelineUUID}\")\n+    @ResponseBody\n+    public IridaWorkflowDescription getPipelineInfo(@PathVariable UUID pipelineUUID)\n+            throws IridaWorkflowNotFoundException {\n+        return workflowsService.getIridaWorkflowOrUnknown(pipelineUUID)\n+                .getWorkflowDescription();\n+    }\n+\n+    /**\n+     * Save a set of {@link IridaWorkflowNamedParameters} and respond with the ID that we saved the new set with.\n+     *\n+     * @param params the DTO with the parameters to save.\n+     * @return a map with the ID of the saved named parameters.\n+     */\n+    @RequestMapping(value = \"/ajax/parameters\", method = RequestMethod.POST)\n+    public @ResponseBody\n+    Map<String, Object> ajaxSaveParameters(@RequestBody final WorkflowParametersToSave params) {\n+        final IridaWorkflowNamedParameters namedParameters = namedParameterService.create(params.namedParameters());\n+        return ImmutableMap.of(\"id\", namedParameters.getId());\n+    }\n+\n+    /**\n+     * Get a {@link List} of all {@link AnalysisType}s.  If this is an automated project, it will only return the\n+     * analyses that can be automated.\n+     *\n+     * @param locale           {@link Locale} of the current user\n+     * @param automatedProject Project ID if we're launching an automated project (optional)\n+     * @return {@link List} of localized {@link AnalysisType}\n+     */\n+    @RequestMapping(value = \"/ajax\", produces = MediaType.APPLICATION_JSON_VALUE)\n+    public List<Pipeline> getWorkflowTypes(\n+            @RequestParam(required = false, name = \"automatedProject\") Long automatedProject, Locale locale) {\n+        Set<AnalysisType> analysisTypes = workflowsService.getDisplayableWorkflowTypes();\n+        List<Pipeline> pipelines = new ArrayList<>();\n+\n+        for (AnalysisType type : analysisTypes) {\n+            try {\n+                IridaWorkflow flow = workflowsService.getDefaultWorkflowByType(type);\n+                IridaWorkflowDescription description = flow.getWorkflowDescription();\n+\n+                //if we're setting up an automated project, strip out all the multi-sample pipelines\n+                if (automatedProject == null || (description.getInputs()\n+                        .requiresSingleSample())) {\n+                    Pipeline workflow = createPipeline(type, locale);\n+                    pipelines.add(workflow);\n+                }\n+            } catch (IridaWorkflowNotFoundException e) {\n+                logger.error(\"Cannot find IridaWorkFlow for '\" + type.getType() + \"'\", e);\n+            }\n+        }\n+        return pipelines.stream()\n+                .sorted(Comparator.comparing(Pipeline::getName))\n+                .collect(Collectors.toList());\n+    }\n+\n+    /**\n+     * Create a Pipeline for consumption by the UI\n+     *\n+     * @param analysisType {@link AnalysisType} type of analysis pipeline\n+     * @param locale       {@link Locale}\n+     * @return {@link Pipeline}\n+     * @throws IridaWorkflowNotFoundException thrown if {@link IridaWorkflowDescription} is not found\n+     */\n+    private Pipeline createPipeline(AnalysisType analysisType, Locale locale) throws IridaWorkflowNotFoundException {\n+        IridaWorkflowDescription workflowDescription = workflowsService.getDefaultWorkflowByType(analysisType)\n+                .getWorkflowDescription();\n+        String prefix = \"workflow.\" + analysisType.getType();\n+        String name = messageSource.getMessage(prefix + \".title\", new Object[]{}, locale);\n+        String description = messageSource.getMessage(prefix + \".description\", new Object[]{}, locale);\n+        UUID id = workflowDescription.getId();\n+        String styleName = analysisType.getType();\n+        return new Pipeline(name, description, id, styleName);\n+    }\n \n }\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ0MzU3Nw==", "url": "https://github.com/phac-nml/irida/pull/813#discussion_r500443577", "body": "What do you think about changing wherever you have `Map<Project, List<Sample>>` here and any of the above files to a dto which contains those objects?", "bodyText": "What do you think about changing wherever you have Map<Project, List<Sample>> here and any of the above files to a dto which contains those objects?", "bodyHTML": "<p dir=\"auto\">What do you think about changing wherever you have <code>Map&lt;Project, List&lt;Sample&gt;&gt;</code> here and any of the above files to a dto which contains those objects?</p>", "author": "deepsidhu85", "createdAt": "2020-10-06T16:41:26Z", "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/services/UICartService.java", "diffHunk": "@@ -0,0 +1,126 @@\n+package ca.corefacility.bioinformatics.irida.ria.web.services;\n+\n+import java.util.*;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+import ca.corefacility.bioinformatics.irida.model.project.Project;\n+import ca.corefacility.bioinformatics.irida.model.sample.Sample;\n+import ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.CartSample;\n+import ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.cart.CartProject;\n+import ca.corefacility.bioinformatics.irida.ria.web.cart.dto.AddToCartRequest;\n+import ca.corefacility.bioinformatics.irida.ria.web.cart.dto.RemoveSampleRequest;\n+import ca.corefacility.bioinformatics.irida.ria.web.sessionAttrs.Cart;\n+import ca.corefacility.bioinformatics.irida.service.ProjectService;\n+import ca.corefacility.bioinformatics.irida.service.sample.SampleService;\n+\n+/**\n+ * Service for handling all aspects interaction with the Cart.\n+ */\n+@Component\n+public class UICartService {\n+\tprivate final Cart cart;\n+\tprivate final ProjectService projectService;\n+\tprivate final SampleService sampleService;\n+\n+\t@Autowired\n+\tpublic UICartService(Cart cart, ProjectService projectService, SampleService sampleService) {\n+\t\tthis.cart = cart;\n+\t\tthis.projectService = projectService;\n+\t\tthis.sampleService = sampleService;\n+\t}\n+\n+\t/**\n+\t * Add samples from a project to the cart.\n+\t *\n+\t * @param request Information about the project and samples to add to the cart\n+\t * @return number of total samples in the cart\n+\t */\n+\tpublic int addSamplesToCart(AddToCartRequest request) {\n+\t\treturn cart.add(request.getProjectId(), (List<Long>) request.getSampleIds());\n+\t}\n+\n+\t/**\n+\t * Get the number of samples in the cart\n+\t *\n+\t * @return number of total samples in the cart\n+\t */\n+\tpublic int getNumberOfSamplesInCart() {\n+\t\treturn cart.getNumberOfSamplesInCart();\n+\t}\n+\n+\t/**\n+\t * Remove all samples from the cart\n+\t */\n+\tpublic void emptyCart() {\n+\t\tcart.clear();\n+\t}\n+\n+\t/**\n+\t * Remove a specific sample from the cart.\n+\t *\n+\t * @param request Information about the samplet o remove from the cart\n+\t * @return number of total samples in the cart\n+\t */\n+\tpublic int removeSample(RemoveSampleRequest request) {\n+\t\treturn cart.removeSample(request.getProjectId(), request.getSampleId());\n+\t}\n+\n+\t/**\n+\t * Remove all samples from a specific project from the cart.\n+\t *\n+\t * @param id identifier for the project to remove from the cart.\n+\t * @return number of total samples in the cart\n+\t */\n+\tpublic int removeProject(Long id) {\n+\t\treturn cart.removeProject(id);\n+\t}\n+\n+\t/**\n+\t * Get a set of  identifiers for {@link Project}s in the cart\n+\t *\n+\t * @return {@link Set} of {@link Project} identifiers\n+\t */\n+\tpublic Set<Long> getProjectIdsInCart() {\n+\t\treturn cart.getProjectIdsInCart();\n+\t}\n+\n+\t/**\n+\t * Get a list of sample in the cart belonging to a list of projects\n+\t *\n+\t * @param ids List of identifiers for project to get the samples for.\n+\t * @return {@link List} of {@link CartProject}s containing project and sample information for items in the cart.\n+\t */\n+\tpublic List<CartProject> getSamplesForProjects(List<Long> ids) {\n+\t\tList<Project> projects = (List<Project>) projectService.readMultiple(ids);\n+\t\tList<CartProject> cartProjects = new ArrayList<>();\n+\t\tfor (Project project : projects) {\n+\t\t\tCartProject cartProject = new CartProject(project.getId(), project.getLabel());\n+\t\t\tList<CartSample> samples = new ArrayList<>();\n+\t\t\tsampleService.readMultiple(cart.getCartSampleIdsForProject(project.getId()))\n+\t\t\t\t\t.forEach(sample -> {\n+\t\t\t\t\t\tsamples.add(new CartSample(sample));\n+\t\t\t\t\t});\n+\t\t\tcartProject.setSamples(samples);\n+\t\t\tcartProjects.add(cartProject);\n+\t\t}\n+\t\treturn cartProjects;\n+\t}\n+\n+\t/**\n+\t * Get the entire cart flushed out into {@link Project}s with their {@link Sample}s\n+\t *\n+\t * @return All proejcts and samples in the part\n+\t */\n+\tpublic Map<Project, List<Sample>> getFullCart() {", "originalCommit": "f58611dcacf9ee48b8662e993144b6ecaa79ef88", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ2MDk4NQ==", "url": "https://github.com/phac-nml/irida/pull/813#discussion_r500460985", "bodyText": "I left these calls pretty much as they were previous so to not have to refactor too much of the UI calls that are older. \u00a0As those get updated we can move these to DTOs. \u00a0I think this in particular is a galaxy call.", "author": "joshsadam", "createdAt": "2020-10-06T17:09:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ0MzU3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDUwMTgyMw==", "url": "https://github.com/phac-nml/irida/pull/813#discussion_r500501823", "bodyText": "Sounds good!", "author": "deepsidhu85", "createdAt": "2020-10-06T18:15:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ0MzU3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "355003282dbbbbf2cc92247eb2a8b80b5b121a5f", "changed_code": [{"header": "diff --git a/src/main/java/ca/corefacility/bioinformatics/irida/ria/web/services/UICartService.java b/src/main/java/ca/corefacility/bioinformatics/irida/ria/web/services/UICartService.java\nindex aa18795efb..28fa3ca082 100644\n--- a/src/main/java/ca/corefacility/bioinformatics/irida/ria/web/services/UICartService.java\n+++ b/src/main/java/ca/corefacility/bioinformatics/irida/ria/web/services/UICartService.java\n", "chunk": "@@ -90,22 +89,22 @@ public class UICartService {\n \t * Get a list of sample in the cart belonging to a list of projects\n \t *\n \t * @param ids List of identifiers for project to get the samples for.\n-\t * @return {@link List} of {@link CartProject}s containing project and sample information for items in the cart.\n+\t * @return {@link List} of {@link CartProjectModel}s containing project and sample information for items in the cart.\n \t */\n-\tpublic List<CartProject> getSamplesForProjects(List<Long> ids) {\n+\tpublic List<CartProjectModel> getSamplesForProjects(List<Long> ids) {\n \t\tList<Project> projects = (List<Project>) projectService.readMultiple(ids);\n-\t\tList<CartProject> cartProjects = new ArrayList<>();\n+\t\tList<CartProjectModel> cartProjectModels = new ArrayList<>();\n \t\tfor (Project project : projects) {\n-\t\t\tCartProject cartProject = new CartProject(project.getId(), project.getLabel());\n+\t\t\tCartProjectModel cartProjectModel = new CartProjectModel(project.getId(), project.getLabel());\n \t\t\tList<CartSample> samples = new ArrayList<>();\n \t\t\tsampleService.readMultiple(cart.getCartSampleIdsForProject(project.getId()))\n \t\t\t\t\t.forEach(sample -> {\n \t\t\t\t\t\tsamples.add(new CartSample(sample));\n \t\t\t\t\t});\n-\t\t\tcartProject.setSamples(samples);\n-\t\t\tcartProjects.add(cartProject);\n+\t\t\tcartProjectModel.setSamples(samples);\n+\t\t\tcartProjectModels.add(cartProjectModel);\n \t\t}\n-\t\treturn cartProjects;\n+\t\treturn cartProjectModels;\n \t}\n \n \t/**\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ0NDg0MA==", "url": "https://github.com/phac-nml/irida/pull/813#discussion_r500444840", "body": "Method comment", "bodyText": "Method comment", "bodyHTML": "<p dir=\"auto\">Method comment</p>", "author": "deepsidhu85", "createdAt": "2020-10-06T16:43:24Z", "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/sessionAttrs/Cart.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package ca.corefacility.bioinformatics.irida.ria.web.sessionAttrs;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+/**\n+ * Session object to hold samples that are currently in the cart.\n+ */\n+public class Cart extends HashMap<Long, HashSet<Long>> {\n+\n+\tpublic int add(Long projectId, List<Long> sampleIds) {", "originalCommit": "f58611dcacf9ee48b8662e993144b6ecaa79ef88", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ2MjcyOA==", "url": "https://github.com/phac-nml/irida/pull/813#discussion_r500462728", "bodyText": "Added in ff327b3", "author": "joshsadam", "createdAt": "2020-10-06T17:12:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ0NDg0MA=="}], "type": "inlineReview", "revised_code": {"commit": "ff327b3dfaf6c5db4002fe5a0c32ffbf4a7512c7", "changed_code": [{"header": "diff --git a/src/main/java/ca/corefacility/bioinformatics/irida/ria/web/sessionAttrs/Cart.java b/src/main/java/ca/corefacility/bioinformatics/irida/ria/web/sessionAttrs/Cart.java\nindex 0ce33b23d1..6877f4390c 100644\n--- a/src/main/java/ca/corefacility/bioinformatics/irida/ria/web/sessionAttrs/Cart.java\n+++ b/src/main/java/ca/corefacility/bioinformatics/irida/ria/web/sessionAttrs/Cart.java\n", "chunk": "@@ -10,6 +10,12 @@ import java.util.Set;\n  */\n public class Cart extends HashMap<Long, HashSet<Long>> {\n \n+\t/**\n+\t * Add a project and list of samples to the cart.\n+\t * @param projectId identifier for a project\n+\t * @param sampleIds list of identifiers for samples from the project to add to the cart\n+\t * @return Total samples from all projects in the cart.\n+\t */\n \tpublic int add(Long projectId, List<Long> sampleIds) {\n \t\tHashSet<Long> existing = this.containsKey(projectId) ? this.get(projectId) : new HashSet<>();\n \t\texisting.addAll(sampleIds);\n", "next_change": null}]}}, {"oid": "7ff3cc60b7ad101a19b06bf2ea94e6e007a93528", "url": "https://github.com/phac-nml/irida/commit/7ff3cc60b7ad101a19b06bf2ea94e6e007a93528", "message": "\ud83d\udcddFixed typo", "committedDate": "2020-10-06T17:01:17Z", "type": "commit"}, {"oid": "413e19783ef142068ca7a6d5a36c8bcfd9d03ce6", "url": "https://github.com/phac-nml/irida/commit/413e19783ef142068ca7a6d5a36c8bcfd9d03ce6", "message": "\ud83d\udcdd Fixed grammar in CHANGELOG.md", "committedDate": "2020-10-06T17:03:19Z", "type": "commit"}, {"oid": "355003282dbbbbf2cc92247eb2a8b80b5b121a5f", "url": "https://github.com/phac-nml/irida/commit/355003282dbbbbf2cc92247eb2a8b80b5b121a5f", "message": "\ud83d\udea7 Updated CartProject to CartProjectModel", "committedDate": "2020-10-06T17:05:01Z", "type": "commit"}, {"oid": "37d24d4e0a1663bbf1ae171af0c98c390adef69a", "url": "https://github.com/phac-nml/irida/commit/37d24d4e0a1663bbf1ae171af0c98c390adef69a", "message": "\ud83d\udea7 Updated CartSample to CartSampleModel", "committedDate": "2020-10-06T17:05:37Z", "type": "commit"}, {"oid": "720b1f646043b2d45e37716fa49ddeb822744838", "url": "https://github.com/phac-nml/irida/commit/720b1f646043b2d45e37716fa49ddeb822744838", "message": "\ud83d\udea7 Does not need to be final", "committedDate": "2020-10-06T17:06:42Z", "type": "commit"}, {"oid": "0019e2334d708eab552b72a2f9e3acea265c71c3", "url": "https://github.com/phac-nml/irida/commit/0019e2334d708eab552b72a2f9e3acea265c71c3", "message": "\ud83d\udea7 Services do not need to be final", "committedDate": "2020-10-06T17:07:21Z", "type": "commit"}, {"oid": "746b003e81aa0d6e9e5f6b072670b1c231c0d8fc", "url": "https://github.com/phac-nml/irida/commit/746b003e81aa0d6e9e5f6b072670b1c231c0d8fc", "message": "\ud83d\udea7 Remove final from constructor call", "committedDate": "2020-10-06T17:10:12Z", "type": "commit"}, {"oid": "ff327b3dfaf6c5db4002fe5a0c32ffbf4a7512c7", "url": "https://github.com/phac-nml/irida/commit/ff327b3dfaf6c5db4002fe5a0c32ffbf4a7512c7", "message": "\ud83d\udcdd Added JSDoc for add", "committedDate": "2020-10-06T17:11:53Z", "type": "commit"}, {"oid": "edb5a72614c8656f5bef85e0f90bce70295b0a90", "url": "https://github.com/phac-nml/irida/commit/edb5a72614c8656f5bef85e0f90bce70295b0a90", "message": "\ud83d\udcdd Added missing JSDoc for cart.js", "committedDate": "2020-10-06T17:13:48Z", "type": "commit"}, {"oid": "0b5643b1b98b4b90291a3f3834053255bbd13da7", "url": "https://github.com/phac-nml/irida/commit/0b5643b1b98b4b90291a3f3834053255bbd13da7", "message": "\ud83d\udea7 Removed logging statement in CartSamples.jsx", "committedDate": "2020-10-06T17:14:54Z", "type": "commit"}, {"oid": "82e5a94bf2cf47a92e2795d0b3966b2643609fa5", "url": "https://github.com/phac-nml/irida/commit/82e5a94bf2cf47a92e2795d0b3966b2643609fa5", "message": "Removed final variable", "committedDate": "2020-10-07T02:13:59Z", "type": "commit"}, {"oid": "f40df94f064d6b214c61a4dd3795ff6330ec33e1", "url": "https://github.com/phac-nml/irida/commit/f40df94f064d6b214c61a4dd3795ff6330ec33e1", "message": "Updated formatting", "committedDate": "2020-10-07T02:14:39Z", "type": "commit"}, {"oid": "fc1976bc5eb3845274bb847a3ceb3c02098c4819", "url": "https://github.com/phac-nml/irida/commit/fc1976bc5eb3845274bb847a3ceb3c02098c4819", "message": "Fixed broken tests to to change is response structures", "committedDate": "2020-10-07T12:32:34Z", "type": "commit"}, {"oid": "5e08daff3a097bc78106483b9d424b3b28233f5d", "url": "https://github.com/phac-nml/irida/commit/5e08daff3a097bc78106483b9d424b3b28233f5d", "message": "Merge branch 'development' into cart-server-refactor", "committedDate": "2020-10-07T12:49:34Z", "type": "commit"}]}