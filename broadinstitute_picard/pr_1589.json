{"pr_number": 1589, "pr_title": "MBA deletion edge case alternate solution", "pr_author": "kachulis", "pr_createdAt": "2020-10-01T20:56:47Z", "pr_url": "https://github.com/broadinstitute/picard/pull/1589", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUzMTI3Mw==", "url": "https://github.com/broadinstitute/picard/pull/1589#discussion_r498531273", "body": "You dropped the \"innies\" requirement it seems...I'm not sure if that is on purpose, or just not needed...but could you add tests to show that they do not get clipped?", "bodyText": "You dropped the \"innies\" requirement it seems...I'm not sure if that is on purpose, or just not needed...but could you add tests to show that they do not get clipped?", "bodyHTML": "<p dir=\"auto\">You dropped the \"innies\" requirement it seems...I'm not sure if that is on purpose, or just not needed...but could you add tests to show that they do not get clipped?</p>", "author": "yfarjoun", "createdAt": "2020-10-01T21:51:37Z", "path": "src/main/java/picard/sam/AbstractAlignmentMerger.java", "diffHunk": "@@ -796,41 +796,57 @@ private void transferAlignmentInfoToPairedRead(final SAMRecord firstUnaligned, f\n      * starts and ends of each read are the same.\n      */\n     protected static void clipForOverlappingReads(final SAMRecord read1, final SAMRecord read2, final boolean useHardClipping) {\n-        // If both reads are mapped, see if we need to clip the ends due to small insert size\n-        if (!(read1.getReadUnmappedFlag() || read2.getReadUnmappedFlag())) {\n-            if (read1.getReadNegativeStrandFlag() != read2.getReadNegativeStrandFlag()) {\n-                final SAMRecord pos = (read1.getReadNegativeStrandFlag()) ? read2 : read1;\n-                final SAMRecord neg = (read1.getReadNegativeStrandFlag()) ? read1 : read2;\n-\n-                // Innies only -- do we need to do anything else about jumping libraries?\n-                if (pos.getAlignmentStart() < neg.getAlignmentEnd()) {\n-                    // first we softclip the 3' end of each read so that its 3' aligned end does not extends past the 5' aligned start of it's mate\n-                    clip3primeEndsTo5primeEnds(pos, neg, false, false);\n-\n-                    if (useHardClipping) {\n-                        // if we want to hardclip, we additionally hardclip the 3' end of each read so that its 3' unclipped end does not extend past the 5' unclipped start of its mate\n-                        clip3primeEndsTo5primeEnds(pos, neg, true, true);\n-                    }\n-                }\n+        // Only clip if both reads are mapped, on opposite strands, overlapping\n+        if (!read1.getReadUnmappedFlag() && !read2.getReadUnmappedFlag() &&\n+                read1.getReadNegativeStrandFlag() != read2.getReadNegativeStrandFlag() &&\n+                read1.overlaps(read2)) {", "originalCommit": "8d09e6c0da0417494574bc73373fdf930a64b881", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUzMTc1Mw==", "url": "https://github.com/broadinstitute/picard/pull/1589#discussion_r498531753", "bodyText": "also how do we know if reads are innes? what do we do with the clipped bases?\n   <-----------------------SSSSSSSSS\n                                SSSSSSS------------------------->\n\n(S being a soft-clipped base....)", "author": "yfarjoun", "createdAt": "2020-10-01T21:52:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUzMTI3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODgxMzY2MQ==", "url": "https://github.com/broadinstitute/picard/pull/1589#discussion_r498813661", "bodyText": "The explicit \"innie\" requirement is dropped, but this still will not clip outies, because I believe by definition outies cannot be overlapping with reads on opposite strands.  I don't think innie and outie really have meaning for overlapping reads, though I may be confused about this.  There is a test commented as Non overlapping \"outies\" which tests outies.\nPreviously, the \"innie\" requirement was enforced with the logic pos.getAlignmentStart() < neg.getAlignmentEnd(). Combining this with posClipFrom > 0/ negClipFrom > 0 is almost equivalent to the overlapping requirement, except for when the two reads overlap by only a single base.  In this case, the new check of read1.overlaps(read2) will pass, while the old check of pos.getAlignmentStart() < neg.getAlignmentEnd() will not, because instead pos.getAlignmentStart() == neg.getAlignmentEnd().  This is not a behavior change I was intending, as I wasn't aware of this edge case difference until just now.  But I believe the old behavior was actually a bug, since the new behavior is more consistent with my understanding of what is intended.  It doesn't make sense to me that we would clip when two or more bases overlap, but not when only one base overlaps, so I'm guessing that was not intentional.  I have added a test demonstrating this edge case (commented as \"overlap by one base only\"), and have also added the same test on the branch ck_mba_single_overlap_test_example to demonstrate the previous behavior.\nFor your softclipped example, these reads will not go through any additional clipping since they are not overlapping.\nThis is consistent with past behavior, since they would not pass the pos.getAlignmentStart() < neg.getAlignmentEnd() check.", "author": "kachulis", "createdAt": "2020-10-02T13:15:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUzMTI3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTAzNjk2Nw==", "url": "https://github.com/broadinstitute/picard/pull/1589#discussion_r499036967", "bodyText": "\ud83d\udc4d thanks for the explanation", "author": "yfarjoun", "createdAt": "2020-10-02T20:31:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUzMTI3Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUzNDU2OQ==", "url": "https://github.com/broadinstitute/picard/pull/1589#discussion_r498534569", "body": "did you mix up 3' and 5' here? or am I confused? ", "bodyText": "did you mix up 3' and 5' here? or am I confused?", "bodyHTML": "<p dir=\"auto\">did you mix up 3' and 5' here? or am I confused?</p>", "author": "yfarjoun", "createdAt": "2020-10-01T22:01:16Z", "path": "src/main/java/picard/sam/AbstractAlignmentMerger.java", "diffHunk": "@@ -796,41 +796,57 @@ private void transferAlignmentInfoToPairedRead(final SAMRecord firstUnaligned, f\n      * starts and ends of each read are the same.\n      */\n     protected static void clipForOverlappingReads(final SAMRecord read1, final SAMRecord read2, final boolean useHardClipping) {\n-        // If both reads are mapped, see if we need to clip the ends due to small insert size\n-        if (!(read1.getReadUnmappedFlag() || read2.getReadUnmappedFlag())) {\n-            if (read1.getReadNegativeStrandFlag() != read2.getReadNegativeStrandFlag()) {\n-                final SAMRecord pos = (read1.getReadNegativeStrandFlag()) ? read2 : read1;\n-                final SAMRecord neg = (read1.getReadNegativeStrandFlag()) ? read1 : read2;\n-\n-                // Innies only -- do we need to do anything else about jumping libraries?\n-                if (pos.getAlignmentStart() < neg.getAlignmentEnd()) {\n-                    // first we softclip the 3' end of each read so that its 3' aligned end does not extends past the 5' aligned start of it's mate\n-                    clip3primeEndsTo5primeEnds(pos, neg, false, false);\n-\n-                    if (useHardClipping) {\n-                        // if we want to hardclip, we additionally hardclip the 3' end of each read so that its 3' unclipped end does not extend past the 5' unclipped start of its mate\n-                        clip3primeEndsTo5primeEnds(pos, neg, true, true);\n-                    }\n-                }\n+        // Only clip if both reads are mapped, on opposite strands, overlapping\n+        if (!read1.getReadUnmappedFlag() && !read2.getReadUnmappedFlag() &&\n+                read1.getReadNegativeStrandFlag() != read2.getReadNegativeStrandFlag() &&\n+                read1.overlaps(read2)) {\n+            final SAMRecord pos = (read1.getReadNegativeStrandFlag()) ? read2 : read1;\n+            final SAMRecord neg = (read1.getReadNegativeStrandFlag()) ? read1 : read2;\n+\n+            // first we softclip the 3' end of each read so that its 3' aligned end does not extends past the 5' aligned start of it's mate\n+            clip3primeEndsTo5primeEnds(pos, neg, false, false);\n+\n+            if (useHardClipping) {\n+                // if we want to hardclip, we additionally hardclip the 3' end of each read so that its 3' unclipped end does not extend past the 5' unclipped start of its mate\n+                clip3primeEndsTo5primeEnds(pos, neg, true, true);\n             }\n         }\n     }\n \n     private static void clip3primeEndsTo5primeEnds(final SAMRecord pos, final SAMRecord neg, final boolean hardClipReads, final boolean useUnclippedEnds) {\n         final int negEnd = useUnclippedEnds? neg.getUnclippedEnd() : neg.getEnd();\n         final int posStart = useUnclippedEnds? pos.getUnclippedStart() : pos.getStart();\n-        final int posClipFrom = getReadPositionAtReferencePositionIgnoreSoftClips(pos, negEnd + 1);\n-        int negClipFrom = getReadPositionAtReferencePositionIgnoreSoftClips(neg, posStart - 1);\n-        negClipFrom = negClipFrom > 0 ? (neg.getReadLength() + 1) - negClipFrom : 0;\n+        /*\n+          For the positive strand, we ask for the position of the 3' most base which will not be clipped, and then increment to find the 5' most base to clip.", "originalCommit": "8d09e6c0da0417494574bc73373fdf930a64b881", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUzNDc4Nw==", "url": "https://github.com/broadinstitute/picard/pull/1589#discussion_r498534787", "bodyText": "5'------------------------------------->3'\n3' <-----------------------------5'", "author": "yfarjoun", "createdAt": "2020-10-01T22:01:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUzNDU2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTAxMjAzOA==", "url": "https://github.com/broadinstitute/picard/pull/1589#discussion_r499012038", "bodyText": "I think this is correct.  On a forward read, the first base clipped is the 5' most base to clip, and the last base not clipped is the 3' most base not to be clipped.\n3'<SSSSSSSSMMMMMMMMMMMM5'\n         5'MMMMMMMMMMMMSSSSSSSS>3'\n                      ||\n                      ||---> 5' most base to clip\n                      |\n                      |---> 3' most base not to clip\n\nI agree this is pretty confusing to parse, so I will add this ascii art to the comment in the code to help clarify the language", "author": "kachulis", "createdAt": "2020-10-02T19:30:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUzNDU2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTAyNDI2MA==", "url": "https://github.com/broadinstitute/picard/pull/1589#discussion_r499024260", "bodyText": "\ud83d\udc4d yeah, thanks.", "author": "yfarjoun", "createdAt": "2020-10-02T20:00:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUzNDU2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU3NDI0MA==", "url": "https://github.com/broadinstitute/picard/pull/1589#discussion_r498574240", "body": "perhaps these variables need to be renamed, where the first assignment is `negFirstBaseToClip` (unchanged) and the second is `negFirstBaseFrom3PrimeEndToClip`?", "bodyText": "perhaps these variables need to be renamed, where the first assignment is negFirstBaseToClip (unchanged) and the second is negFirstBaseFrom3PrimeEndToClip?", "bodyHTML": "<p dir=\"auto\">perhaps these variables need to be renamed, where the first assignment is <code>negFirstBaseToClip</code> (unchanged) and the second is <code>negFirstBaseFrom3PrimeEndToClip</code>?</p>", "author": "yfarjoun", "createdAt": "2020-10-02T00:34:53Z", "path": "src/main/java/picard/sam/AbstractAlignmentMerger.java", "diffHunk": "@@ -796,41 +796,57 @@ private void transferAlignmentInfoToPairedRead(final SAMRecord firstUnaligned, f\n      * starts and ends of each read are the same.\n      */\n     protected static void clipForOverlappingReads(final SAMRecord read1, final SAMRecord read2, final boolean useHardClipping) {\n-        // If both reads are mapped, see if we need to clip the ends due to small insert size\n-        if (!(read1.getReadUnmappedFlag() || read2.getReadUnmappedFlag())) {\n-            if (read1.getReadNegativeStrandFlag() != read2.getReadNegativeStrandFlag()) {\n-                final SAMRecord pos = (read1.getReadNegativeStrandFlag()) ? read2 : read1;\n-                final SAMRecord neg = (read1.getReadNegativeStrandFlag()) ? read1 : read2;\n-\n-                // Innies only -- do we need to do anything else about jumping libraries?\n-                if (pos.getAlignmentStart() < neg.getAlignmentEnd()) {\n-                    // first we softclip the 3' end of each read so that its 3' aligned end does not extends past the 5' aligned start of it's mate\n-                    clip3primeEndsTo5primeEnds(pos, neg, false, false);\n-\n-                    if (useHardClipping) {\n-                        // if we want to hardclip, we additionally hardclip the 3' end of each read so that its 3' unclipped end does not extend past the 5' unclipped start of its mate\n-                        clip3primeEndsTo5primeEnds(pos, neg, true, true);\n-                    }\n-                }\n+        // Only clip if both reads are mapped, on opposite strands, overlapping\n+        if (!read1.getReadUnmappedFlag() && !read2.getReadUnmappedFlag() &&\n+                read1.getReadNegativeStrandFlag() != read2.getReadNegativeStrandFlag() &&\n+                read1.overlaps(read2)) {\n+            final SAMRecord pos = (read1.getReadNegativeStrandFlag()) ? read2 : read1;\n+            final SAMRecord neg = (read1.getReadNegativeStrandFlag()) ? read1 : read2;\n+\n+            // first we softclip the 3' end of each read so that its 3' aligned end does not extends past the 5' aligned start of it's mate\n+            clip3primeEndsTo5primeEnds(pos, neg, false, false);\n+\n+            if (useHardClipping) {\n+                // if we want to hardclip, we additionally hardclip the 3' end of each read so that its 3' unclipped end does not extend past the 5' unclipped start of its mate\n+                clip3primeEndsTo5primeEnds(pos, neg, true, true);\n             }\n         }\n     }\n \n     private static void clip3primeEndsTo5primeEnds(final SAMRecord pos, final SAMRecord neg, final boolean hardClipReads, final boolean useUnclippedEnds) {\n         final int negEnd = useUnclippedEnds? neg.getUnclippedEnd() : neg.getEnd();\n         final int posStart = useUnclippedEnds? pos.getUnclippedStart() : pos.getStart();\n-        final int posClipFrom = getReadPositionAtReferencePositionIgnoreSoftClips(pos, negEnd + 1);\n-        int negClipFrom = getReadPositionAtReferencePositionIgnoreSoftClips(neg, posStart - 1);\n-        negClipFrom = negClipFrom > 0 ? (neg.getReadLength() + 1) - negClipFrom : 0;\n+        /*\n+          For the positive strand, we ask for the position of the 3' most base which will not be clipped, and then increment to find the 5' most base to clip.\n+          We do this because getReadPositionAtReferencePositionIgnoreSoftClips will return the base before a deletion, so will return the 3' most base before\n+          the queried base when the queried base is in a deletion on a positive strand read\n+         */\n+\n+        final int posLastUnclipped = getReadPositionAtReferencePositionIgnoreSoftClips(pos, negEnd);\n \n-        if(posClipFrom > 0) {\n-            clip3PrimeEndOfRead(pos, posClipFrom, hardClipReads);\n+        /*\n+        For the negative strand, we ask for the position of the 5' most base to clip.  getReadPositionAtReferencePositionIgnoreSoftClips will return the 5' most base before\n+         the queried base when the queried base is in a deletion on a negative strand read\n+         */\n+\n+        int negFirstBaseToClip = getReadPositionAtReferencePositionIgnoreSoftClips(neg, posStart - 1);", "originalCommit": "8d09e6c0da0417494574bc73373fdf930a64b881", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTAyMzUzMw==", "url": "https://github.com/broadinstitute/picard/pull/1589#discussion_r499023533", "bodyText": "Agreed these variables could be names more clearly (though I think this should be negFirstBaseFrom5PrimeEndToClip).  I've tried to improve the naming, and added some comments to clarify what all these variables are.", "author": "kachulis", "createdAt": "2020-10-02T19:58:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU3NDI0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTAyNDU1Mw==", "url": "https://github.com/broadinstitute/picard/pull/1589#discussion_r499024553", "bodyText": "I think that part of the problem is that pos is overloaded (both POSition and POSitive).... \ud83e\udd37", "author": "yfarjoun", "createdAt": "2020-10-02T20:01:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU3NDI0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU3NDgyMw==", "url": "https://github.com/broadinstitute/picard/pull/1589#discussion_r498574823", "body": "could this be moved up so it's next to the other stuff that deals with `pos`?", "bodyText": "could this be moved up so it's next to the other stuff that deals with pos?", "bodyHTML": "<p dir=\"auto\">could this be moved up so it's next to the other stuff that deals with <code>pos</code>?</p>", "author": "yfarjoun", "createdAt": "2020-10-02T00:37:39Z", "path": "src/main/java/picard/sam/AbstractAlignmentMerger.java", "diffHunk": "@@ -796,41 +796,57 @@ private void transferAlignmentInfoToPairedRead(final SAMRecord firstUnaligned, f\n      * starts and ends of each read are the same.\n      */\n     protected static void clipForOverlappingReads(final SAMRecord read1, final SAMRecord read2, final boolean useHardClipping) {\n-        // If both reads are mapped, see if we need to clip the ends due to small insert size\n-        if (!(read1.getReadUnmappedFlag() || read2.getReadUnmappedFlag())) {\n-            if (read1.getReadNegativeStrandFlag() != read2.getReadNegativeStrandFlag()) {\n-                final SAMRecord pos = (read1.getReadNegativeStrandFlag()) ? read2 : read1;\n-                final SAMRecord neg = (read1.getReadNegativeStrandFlag()) ? read1 : read2;\n-\n-                // Innies only -- do we need to do anything else about jumping libraries?\n-                if (pos.getAlignmentStart() < neg.getAlignmentEnd()) {\n-                    // first we softclip the 3' end of each read so that its 3' aligned end does not extends past the 5' aligned start of it's mate\n-                    clip3primeEndsTo5primeEnds(pos, neg, false, false);\n-\n-                    if (useHardClipping) {\n-                        // if we want to hardclip, we additionally hardclip the 3' end of each read so that its 3' unclipped end does not extend past the 5' unclipped start of its mate\n-                        clip3primeEndsTo5primeEnds(pos, neg, true, true);\n-                    }\n-                }\n+        // Only clip if both reads are mapped, on opposite strands, overlapping\n+        if (!read1.getReadUnmappedFlag() && !read2.getReadUnmappedFlag() &&\n+                read1.getReadNegativeStrandFlag() != read2.getReadNegativeStrandFlag() &&\n+                read1.overlaps(read2)) {\n+            final SAMRecord pos = (read1.getReadNegativeStrandFlag()) ? read2 : read1;\n+            final SAMRecord neg = (read1.getReadNegativeStrandFlag()) ? read1 : read2;\n+\n+            // first we softclip the 3' end of each read so that its 3' aligned end does not extends past the 5' aligned start of it's mate\n+            clip3primeEndsTo5primeEnds(pos, neg, false, false);\n+\n+            if (useHardClipping) {\n+                // if we want to hardclip, we additionally hardclip the 3' end of each read so that its 3' unclipped end does not extend past the 5' unclipped start of its mate\n+                clip3primeEndsTo5primeEnds(pos, neg, true, true);\n             }\n         }\n     }\n \n     private static void clip3primeEndsTo5primeEnds(final SAMRecord pos, final SAMRecord neg, final boolean hardClipReads, final boolean useUnclippedEnds) {\n         final int negEnd = useUnclippedEnds? neg.getUnclippedEnd() : neg.getEnd();\n         final int posStart = useUnclippedEnds? pos.getUnclippedStart() : pos.getStart();\n-        final int posClipFrom = getReadPositionAtReferencePositionIgnoreSoftClips(pos, negEnd + 1);\n-        int negClipFrom = getReadPositionAtReferencePositionIgnoreSoftClips(neg, posStart - 1);\n-        negClipFrom = negClipFrom > 0 ? (neg.getReadLength() + 1) - negClipFrom : 0;\n+        /*\n+          For the positive strand, we ask for the position of the 3' most base which will not be clipped, and then increment to find the 5' most base to clip.\n+          We do this because getReadPositionAtReferencePositionIgnoreSoftClips will return the base before a deletion, so will return the 3' most base before\n+          the queried base when the queried base is in a deletion on a positive strand read\n+         */\n+\n+        final int posLastUnclipped = getReadPositionAtReferencePositionIgnoreSoftClips(pos, negEnd);\n \n-        if(posClipFrom > 0) {\n-            clip3PrimeEndOfRead(pos, posClipFrom, hardClipReads);\n+        /*\n+        For the negative strand, we ask for the position of the 5' most base to clip.  getReadPositionAtReferencePositionIgnoreSoftClips will return the 5' most base before\n+         the queried base when the queried base is in a deletion on a negative strand read\n+         */\n+\n+        int negFirstBaseToClip = getReadPositionAtReferencePositionIgnoreSoftClips(neg, posStart - 1);\n+        negFirstBaseToClip = negFirstBaseToClip > 0 ? (neg.getReadLength() + 1) - negFirstBaseToClip : 0;\n+\n+        if(posLastUnclipped > 0 && posLastUnclipped < pos.getReadLength()) {", "originalCommit": "8d09e6c0da0417494574bc73373fdf930a64b881", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODYwNTQwMw==", "url": "https://github.com/broadinstitute/picard/pull/1589#discussion_r498605403", "body": "1-based position,\r\n0 if reference position doesn't overlap with read even with softclips converted to matches.", "bodyText": "1-based position,\n0 if reference position doesn't overlap with read even with softclips converted to matches.", "bodyHTML": "<p dir=\"auto\">1-based position,<br>\n0 if reference position doesn't overlap with read even with softclips converted to matches.</p>", "author": "yfarjoun", "createdAt": "2020-10-02T03:31:11Z", "path": "src/main/java/picard/sam/AbstractAlignmentMerger.java", "diffHunk": "@@ -796,41 +796,57 @@ private void transferAlignmentInfoToPairedRead(final SAMRecord firstUnaligned, f\n      * starts and ends of each read are the same.\n      */\n     protected static void clipForOverlappingReads(final SAMRecord read1, final SAMRecord read2, final boolean useHardClipping) {\n-        // If both reads are mapped, see if we need to clip the ends due to small insert size\n-        if (!(read1.getReadUnmappedFlag() || read2.getReadUnmappedFlag())) {\n-            if (read1.getReadNegativeStrandFlag() != read2.getReadNegativeStrandFlag()) {\n-                final SAMRecord pos = (read1.getReadNegativeStrandFlag()) ? read2 : read1;\n-                final SAMRecord neg = (read1.getReadNegativeStrandFlag()) ? read1 : read2;\n-\n-                // Innies only -- do we need to do anything else about jumping libraries?\n-                if (pos.getAlignmentStart() < neg.getAlignmentEnd()) {\n-                    // first we softclip the 3' end of each read so that its 3' aligned end does not extends past the 5' aligned start of it's mate\n-                    clip3primeEndsTo5primeEnds(pos, neg, false, false);\n-\n-                    if (useHardClipping) {\n-                        // if we want to hardclip, we additionally hardclip the 3' end of each read so that its 3' unclipped end does not extend past the 5' unclipped start of its mate\n-                        clip3primeEndsTo5primeEnds(pos, neg, true, true);\n-                    }\n-                }\n+        // Only clip if both reads are mapped, on opposite strands, overlapping\n+        if (!read1.getReadUnmappedFlag() && !read2.getReadUnmappedFlag() &&\n+                read1.getReadNegativeStrandFlag() != read2.getReadNegativeStrandFlag() &&\n+                read1.overlaps(read2)) {\n+            final SAMRecord pos = (read1.getReadNegativeStrandFlag()) ? read2 : read1;\n+            final SAMRecord neg = (read1.getReadNegativeStrandFlag()) ? read1 : read2;\n+\n+            // first we softclip the 3' end of each read so that its 3' aligned end does not extends past the 5' aligned start of it's mate\n+            clip3primeEndsTo5primeEnds(pos, neg, false, false);\n+\n+            if (useHardClipping) {\n+                // if we want to hardclip, we additionally hardclip the 3' end of each read so that its 3' unclipped end does not extend past the 5' unclipped start of its mate\n+                clip3primeEndsTo5primeEnds(pos, neg, true, true);\n             }\n         }\n     }\n \n     private static void clip3primeEndsTo5primeEnds(final SAMRecord pos, final SAMRecord neg, final boolean hardClipReads, final boolean useUnclippedEnds) {\n         final int negEnd = useUnclippedEnds? neg.getUnclippedEnd() : neg.getEnd();\n         final int posStart = useUnclippedEnds? pos.getUnclippedStart() : pos.getStart();\n-        final int posClipFrom = getReadPositionAtReferencePositionIgnoreSoftClips(pos, negEnd + 1);\n-        int negClipFrom = getReadPositionAtReferencePositionIgnoreSoftClips(neg, posStart - 1);\n-        negClipFrom = negClipFrom > 0 ? (neg.getReadLength() + 1) - negClipFrom : 0;\n+        /*\n+          For the positive strand, we ask for the position of the 3' most base which will not be clipped, and then increment to find the 5' most base to clip.\n+          We do this because getReadPositionAtReferencePositionIgnoreSoftClips will return the base before a deletion, so will return the 3' most base before\n+          the queried base when the queried base is in a deletion on a positive strand read\n+         */\n+\n+        final int posLastUnclipped = getReadPositionAtReferencePositionIgnoreSoftClips(pos, negEnd);\n \n-        if(posClipFrom > 0) {\n-            clip3PrimeEndOfRead(pos, posClipFrom, hardClipReads);\n+        /*\n+        For the negative strand, we ask for the position of the 5' most base to clip.  getReadPositionAtReferencePositionIgnoreSoftClips will return the 5' most base before\n+         the queried base when the queried base is in a deletion on a negative strand read\n+         */\n+\n+        int negFirstBaseToClip = getReadPositionAtReferencePositionIgnoreSoftClips(neg, posStart - 1);\n+        negFirstBaseToClip = negFirstBaseToClip > 0 ? (neg.getReadLength() + 1) - negFirstBaseToClip : 0;\n+\n+        if(posLastUnclipped > 0 && posLastUnclipped < pos.getReadLength()) {\n+            clip3PrimeEndOfRead(pos, posLastUnclipped + 1, hardClipReads);\n         }\n-        if(negClipFrom > 0) {\n-            clip3PrimeEndOfRead(neg, negClipFrom, hardClipReads);\n+        if(negFirstBaseToClip > 0) {\n+            clip3PrimeEndOfRead(neg, negFirstBaseToClip, hardClipReads);\n         }\n     }\n \n+    /**\n+     * Gets the read position that corresponds to a particular position on the reference.  If the position on the reference\n+     * falls in a deletion in the alignment of the read, the position before the deletion will be returned.", "originalCommit": "8d09e6c0da0417494574bc73373fdf930a64b881", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTAzNjQxOQ==", "url": "https://github.com/broadinstitute/picard/pull/1589#discussion_r499036419", "body": "```suggestion\r\n        if (negFirstBaseFrom5PrimeEndToClip > 0) {\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if(negFirstBaseFrom5PrimeEndToClip > 0) {\n          \n          \n            \n                    if (negFirstBaseFrom5PrimeEndToClip > 0) {", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">if</span>(negFirstBaseFrom5PrimeEndToClip <span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">0</span>) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">if</span><span class=\"x x-first x-last\"> </span>(negFirstBaseFrom5PrimeEndToClip <span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">0</span>) {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "yfarjoun", "createdAt": "2020-10-02T20:30:32Z", "path": "src/main/java/picard/sam/AbstractAlignmentMerger.java", "diffHunk": "@@ -796,41 +796,69 @@ private void transferAlignmentInfoToPairedRead(final SAMRecord firstUnaligned, f\n      * starts and ends of each read are the same.\n      */\n     protected static void clipForOverlappingReads(final SAMRecord read1, final SAMRecord read2, final boolean useHardClipping) {\n-        // If both reads are mapped, see if we need to clip the ends due to small insert size\n-        if (!(read1.getReadUnmappedFlag() || read2.getReadUnmappedFlag())) {\n-            if (read1.getReadNegativeStrandFlag() != read2.getReadNegativeStrandFlag()) {\n-                final SAMRecord pos = (read1.getReadNegativeStrandFlag()) ? read2 : read1;\n-                final SAMRecord neg = (read1.getReadNegativeStrandFlag()) ? read1 : read2;\n-\n-                // Innies only -- do we need to do anything else about jumping libraries?\n-                if (pos.getAlignmentStart() < neg.getAlignmentEnd()) {\n-                    // first we softclip the 3' end of each read so that its 3' aligned end does not extends past the 5' aligned start of it's mate\n-                    clip3primeEndsTo5primeEnds(pos, neg, false, false);\n-\n-                    if (useHardClipping) {\n-                        // if we want to hardclip, we additionally hardclip the 3' end of each read so that its 3' unclipped end does not extend past the 5' unclipped start of its mate\n-                        clip3primeEndsTo5primeEnds(pos, neg, true, true);\n-                    }\n-                }\n+        // Only clip if both reads are mapped, on opposite strands, overlapping\n+        if (!read1.getReadUnmappedFlag() && !read2.getReadUnmappedFlag() &&\n+                read1.getReadNegativeStrandFlag() != read2.getReadNegativeStrandFlag() &&\n+                read1.overlaps(read2)) {\n+            final SAMRecord pos = (read1.getReadNegativeStrandFlag()) ? read2 : read1;\n+            final SAMRecord neg = (read1.getReadNegativeStrandFlag()) ? read1 : read2;\n+\n+            // first we softclip the 3' end of each read so that its 3' aligned end does not extends past the 5' aligned start of it's mate\n+            clip3primeEndsTo5primeEnds(pos, neg, false, false);\n+\n+            if (useHardClipping) {\n+                // if we want to hardclip, we additionally hardclip the 3' end of each read so that its 3' unclipped end does not extend past the 5' unclipped start of its mate\n+                clip3primeEndsTo5primeEnds(pos, neg, true, true);\n             }\n         }\n     }\n \n     private static void clip3primeEndsTo5primeEnds(final SAMRecord pos, final SAMRecord neg, final boolean hardClipReads, final boolean useUnclippedEnds) {\n         final int negEnd = useUnclippedEnds? neg.getUnclippedEnd() : neg.getEnd();\n         final int posStart = useUnclippedEnds? pos.getUnclippedStart() : pos.getStart();\n-        final int posClipFrom = getReadPositionAtReferencePositionIgnoreSoftClips(pos, negEnd + 1);\n-        int negClipFrom = getReadPositionAtReferencePositionIgnoreSoftClips(neg, posStart - 1);\n-        negClipFrom = negClipFrom > 0 ? (neg.getReadLength() + 1) - negClipFrom : 0;\n-\n-        if(posClipFrom > 0) {\n-            clip3PrimeEndOfRead(pos, posClipFrom, hardClipReads);\n+        /*\n+          For the positive strand, we ask for the position of the 3' most base which will not be clipped, and then increment to find the 5' most base to clip.\n+          We do this because getReadPositionAtReferencePositionIgnoreSoftClips will return the base before a deletion, so will return the 3' most base before\n+          the queried base when the queried base is in a deletion on a positive strand read\n+\n+            3'<SSSSSSSSMMMMMMMMMMMM5'\n+                     5'MMMMMMMMMMMMSSSSSSSS>3'\n+                                  ||\n+                                  ||---> 5' most base to clip\n+                                  |\n+                                  |---> 3' most base not to clip\n+         */\n+\n+        final int pos3PrimeMostUnclipped = getReadPositionAtReferencePositionIgnoreSoftClips(pos, negEnd);\n+        if(pos3PrimeMostUnclipped > 0 && pos3PrimeMostUnclipped < pos.getReadLength()) {\n+            final int pos5PrimeMostClipped = pos3PrimeMostUnclipped + 1;\n+            clip3PrimeEndOfRead(pos, pos5PrimeMostClipped, hardClipReads);\n         }\n-        if(negClipFrom > 0) {\n-            clip3PrimeEndOfRead(neg, negClipFrom, hardClipReads);\n+\n+        /*\n+        For the negative strand, we ask for the position of the 5' most base to clip.  getReadPositionAtReferencePositionIgnoreSoftClips will return the 5' most base before\n+         the queried base when the queried base is in a deletion on a negative strand read.\n+         */\n+\n+        //this is the position counting from the aligned start of the read\n+        final int neg5PrimeMostBaseToClipPositionFromStart = getReadPositionAtReferencePositionIgnoreSoftClips(neg, posStart - 1);\n+\n+        //this is the position counting from the 5' end of the read\n+        final int negFirstBaseFrom5PrimeEndToClip = neg5PrimeMostBaseToClipPositionFromStart > 0 ? (neg.getReadLength() + 1) - neg5PrimeMostBaseToClipPositionFromStart : 0;\n+\n+        if(negFirstBaseFrom5PrimeEndToClip > 0) {", "originalCommit": "73ea523f7b61f9d74c885409c0313835f7cddeb8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTAzNzQ5Mg==", "url": "https://github.com/broadinstitute/picard/pull/1589#discussion_r499037492", "body": "```suggestion\r\n        // this is the position counting from the aligned start of the read\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    //this is the position counting from the aligned start of the read\n          \n          \n            \n                    // this is the position counting from the aligned start of the read", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-c\"><span class=\"pl-c\">//</span>this is the position counting from the aligned start of the read</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-c\"><span class=\"pl-c\">//</span><span class=\"x x-first x-last\"> </span>this is the position counting from the aligned start of the read</span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "yfarjoun", "createdAt": "2020-10-02T20:33:16Z", "path": "src/main/java/picard/sam/AbstractAlignmentMerger.java", "diffHunk": "@@ -820,29 +820,41 @@ private static void clip3primeEndsTo5primeEnds(final SAMRecord pos, final SAMRec\n           For the positive strand, we ask for the position of the 3' most base which will not be clipped, and then increment to find the 5' most base to clip.\n           We do this because getReadPositionAtReferencePositionIgnoreSoftClips will return the base before a deletion, so will return the 3' most base before\n           the queried base when the queried base is in a deletion on a positive strand read\n+\n+            3'<SSSSSSSSMMMMMMMMMMMM5'\n+                     5'MMMMMMMMMMMMSSSSSSSS>3'\n+                                  ||\n+                                  ||---> 5' most base to clip\n+                                  |\n+                                  |---> 3' most base not to clip\n          */\n \n-        final int posLastUnclipped = getReadPositionAtReferencePositionIgnoreSoftClips(pos, negEnd);\n+        final int pos3PrimeMostUnclipped = getReadPositionAtReferencePositionIgnoreSoftClips(pos, negEnd);\n+        if(pos3PrimeMostUnclipped > 0 && pos3PrimeMostUnclipped < pos.getReadLength()) {\n+            final int pos5PrimeMostClipped = pos3PrimeMostUnclipped + 1;\n+            clip3PrimeEndOfRead(pos, pos5PrimeMostClipped, hardClipReads);\n+        }\n \n         /*\n         For the negative strand, we ask for the position of the 5' most base to clip.  getReadPositionAtReferencePositionIgnoreSoftClips will return the 5' most base before\n-         the queried base when the queried base is in a deletion on a negative strand read\n+         the queried base when the queried base is in a deletion on a negative strand read.\n          */\n \n-        int negFirstBaseToClip = getReadPositionAtReferencePositionIgnoreSoftClips(neg, posStart - 1);\n-        negFirstBaseToClip = negFirstBaseToClip > 0 ? (neg.getReadLength() + 1) - negFirstBaseToClip : 0;\n+        //this is the position counting from the aligned start of the read", "originalCommit": "73ea523f7b61f9d74c885409c0313835f7cddeb8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTAzNzU2MA==", "url": "https://github.com/broadinstitute/picard/pull/1589#discussion_r499037560", "body": "```suggestion\r\n        // this is the position counting from the 5' end of the read\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    //this is the position counting from the 5' end of the read\n          \n          \n            \n                    // this is the position counting from the 5' end of the read", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-c\"><span class=\"pl-c\">//</span>this is the position counting from the 5' end of the read</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-c\"><span class=\"pl-c\">//</span><span class=\"x x-first x-last\"> </span>this is the position counting from the 5' end of the read</span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "yfarjoun", "createdAt": "2020-10-02T20:33:26Z", "path": "src/main/java/picard/sam/AbstractAlignmentMerger.java", "diffHunk": "@@ -820,29 +820,41 @@ private static void clip3primeEndsTo5primeEnds(final SAMRecord pos, final SAMRec\n           For the positive strand, we ask for the position of the 3' most base which will not be clipped, and then increment to find the 5' most base to clip.\n           We do this because getReadPositionAtReferencePositionIgnoreSoftClips will return the base before a deletion, so will return the 3' most base before\n           the queried base when the queried base is in a deletion on a positive strand read\n+\n+            3'<SSSSSSSSMMMMMMMMMMMM5'\n+                     5'MMMMMMMMMMMMSSSSSSSS>3'\n+                                  ||\n+                                  ||---> 5' most base to clip\n+                                  |\n+                                  |---> 3' most base not to clip\n          */\n \n-        final int posLastUnclipped = getReadPositionAtReferencePositionIgnoreSoftClips(pos, negEnd);\n+        final int pos3PrimeMostUnclipped = getReadPositionAtReferencePositionIgnoreSoftClips(pos, negEnd);\n+        if(pos3PrimeMostUnclipped > 0 && pos3PrimeMostUnclipped < pos.getReadLength()) {\n+            final int pos5PrimeMostClipped = pos3PrimeMostUnclipped + 1;\n+            clip3PrimeEndOfRead(pos, pos5PrimeMostClipped, hardClipReads);\n+        }\n \n         /*\n         For the negative strand, we ask for the position of the 5' most base to clip.  getReadPositionAtReferencePositionIgnoreSoftClips will return the 5' most base before\n-         the queried base when the queried base is in a deletion on a negative strand read\n+         the queried base when the queried base is in a deletion on a negative strand read.\n          */\n \n-        int negFirstBaseToClip = getReadPositionAtReferencePositionIgnoreSoftClips(neg, posStart - 1);\n-        negFirstBaseToClip = negFirstBaseToClip > 0 ? (neg.getReadLength() + 1) - negFirstBaseToClip : 0;\n+        //this is the position counting from the aligned start of the read\n+        final int neg5PrimeMostBaseToClipPositionFromStart = getReadPositionAtReferencePositionIgnoreSoftClips(neg, posStart - 1);\n \n-        if(posLastUnclipped > 0 && posLastUnclipped < pos.getReadLength()) {\n-            clip3PrimeEndOfRead(pos, posLastUnclipped + 1, hardClipReads);\n-        }\n-        if(negFirstBaseToClip > 0) {\n-            clip3PrimeEndOfRead(neg, negFirstBaseToClip, hardClipReads);\n+        //this is the position counting from the 5' end of the read", "originalCommit": "73ea523f7b61f9d74c885409c0313835f7cddeb8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTAzOTUxOQ==", "url": "https://github.com/broadinstitute/picard/pull/1589#discussion_r499039519", "body": "```suggestion\r\n        if (pos3PrimeMostUnclipped > 0 && pos3PrimeMostUnclipped < pos.getReadLength()) {\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if(pos3PrimeMostUnclipped > 0 && pos3PrimeMostUnclipped < pos.getReadLength()) {\n          \n          \n            \n                    if (pos3PrimeMostUnclipped > 0 && pos3PrimeMostUnclipped < pos.getReadLength()) {", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">if</span>(pos3PrimeMostUnclipped <span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">0</span> <span class=\"pl-k\">&amp;&amp;</span> pos3PrimeMostUnclipped <span class=\"pl-k\">&lt;</span> pos<span class=\"pl-k\">.</span>getReadLength()) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">if</span><span class=\"x x-first x-last\"> </span>(pos3PrimeMostUnclipped <span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">0</span> <span class=\"pl-k\">&amp;&amp;</span> pos3PrimeMostUnclipped <span class=\"pl-k\">&lt;</span> pos<span class=\"pl-k\">.</span>getReadLength()) {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "yfarjoun", "createdAt": "2020-10-02T20:38:25Z", "path": "src/main/java/picard/sam/AbstractAlignmentMerger.java", "diffHunk": "@@ -820,29 +820,41 @@ private static void clip3primeEndsTo5primeEnds(final SAMRecord pos, final SAMRec\n           For the positive strand, we ask for the position of the 3' most base which will not be clipped, and then increment to find the 5' most base to clip.\n           We do this because getReadPositionAtReferencePositionIgnoreSoftClips will return the base before a deletion, so will return the 3' most base before\n           the queried base when the queried base is in a deletion on a positive strand read\n+\n+            3'<SSSSSSSSMMMMMMMMMMMM5'\n+                     5'MMMMMMMMMMMMSSSSSSSS>3'\n+                                  ||\n+                                  ||---> 5' most base to clip\n+                                  |\n+                                  |---> 3' most base not to clip\n          */\n \n-        final int posLastUnclipped = getReadPositionAtReferencePositionIgnoreSoftClips(pos, negEnd);\n+        final int pos3PrimeMostUnclipped = getReadPositionAtReferencePositionIgnoreSoftClips(pos, negEnd);\n+        if(pos3PrimeMostUnclipped > 0 && pos3PrimeMostUnclipped < pos.getReadLength()) {", "originalCommit": "73ea523f7b61f9d74c885409c0313835f7cddeb8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTAzOTc3MQ==", "url": "https://github.com/broadinstitute/picard/pull/1589#discussion_r499039771", "body": "the 5 looks like an S...\r\n```suggestion\r\n           3' <SSSSSSSSMMMMMMMMMMMM 5'\r\n```", "bodyText": "the 5 looks like an S...\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        3'<SSSSSSSSMMMMMMMMMMMM5'\n          \n          \n            \n                       3' <SSSSSSSSMMMMMMMMMMMM 5'", "bodyHTML": "<p dir=\"auto\">the 5 looks like an S...</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">           <span class=\"x x-first\"> </span><span class=\"pl-c1 x\">3</span><span class=\"pl-s\"><span class=\"pl-pds x\">'</span><span class=\"x x-last\">&lt;SSSSSSSSMMMMMMMMMMMM5</span><span class=\"pl-pds\">'</span></span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">           <span class=\"pl-c1 x x-first\">3</span><span class=\"pl-s\"><span class=\"pl-pds x\">'</span><span class=\"x x-last\"> &lt;SSSSSSSSMMMMMMMMMMMM 5</span><span class=\"pl-pds\">'</span></span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "yfarjoun", "createdAt": "2020-10-02T20:39:03Z", "path": "src/main/java/picard/sam/AbstractAlignmentMerger.java", "diffHunk": "@@ -820,29 +820,41 @@ private static void clip3primeEndsTo5primeEnds(final SAMRecord pos, final SAMRec\n           For the positive strand, we ask for the position of the 3' most base which will not be clipped, and then increment to find the 5' most base to clip.\n           We do this because getReadPositionAtReferencePositionIgnoreSoftClips will return the base before a deletion, so will return the 3' most base before\n           the queried base when the queried base is in a deletion on a positive strand read\n+\n+            3'<SSSSSSSSMMMMMMMMMMMM5'", "originalCommit": "73ea523f7b61f9d74c885409c0313835f7cddeb8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTAzOTgzNw==", "url": "https://github.com/broadinstitute/picard/pull/1589#discussion_r499039837", "body": "```suggestion\r\n                    5' MMMMMMMMMMMMSSSSSSSS> 3'\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                 5'MMMMMMMMMMMMSSSSSSSS>3'\n          \n          \n            \n                                5' MMMMMMMMMMMMSSSSSSSS> 3'", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                    <span class=\"x x-first\"> </span><span class=\"pl-c1 x\">5</span><span class=\"pl-s\"><span class=\"pl-pds x x-last\">'</span>MMMMMMMMMMMMSSSSSSSS&gt;3<span class=\"pl-pds\">'</span></span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                    <span class=\"pl-c1 x x-first\">5</span><span class=\"pl-s\"><span class=\"pl-pds x\">'</span><span class=\"x x-last\"> </span>MMMMMMMMMMMMSSSSSSSS&gt;<span class=\"x x-first x-last\"> </span>3<span class=\"pl-pds\">'</span></span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "yfarjoun", "createdAt": "2020-10-02T20:39:13Z", "path": "src/main/java/picard/sam/AbstractAlignmentMerger.java", "diffHunk": "@@ -820,29 +820,41 @@ private static void clip3primeEndsTo5primeEnds(final SAMRecord pos, final SAMRec\n           For the positive strand, we ask for the position of the 3' most base which will not be clipped, and then increment to find the 5' most base to clip.\n           We do this because getReadPositionAtReferencePositionIgnoreSoftClips will return the base before a deletion, so will return the 3' most base before\n           the queried base when the queried base is in a deletion on a positive strand read\n+\n+            3'<SSSSSSSSMMMMMMMMMMMM5'\n+                     5'MMMMMMMMMMMMSSSSSSSS>3'", "originalCommit": "73ea523f7b61f9d74c885409c0313835f7cddeb8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f4392e3bdc4b167ab526ac672cf1952088aac07d", "url": "https://github.com/broadinstitute/picard/commit/f4392e3bdc4b167ab526ac672cf1952088aac07d", "message": "beginning change", "committedDate": "2020-10-02T20:48:34Z", "type": "commit"}, {"oid": "e40601a422e4ddecc9c78752d2cf72ac724cb5be", "url": "https://github.com/broadinstitute/picard/commit/e40601a422e4ddecc9c78752d2cf72ac724cb5be", "message": "get working, tests", "committedDate": "2020-10-02T20:48:34Z", "type": "commit"}, {"oid": "2d05515aa91d7971442be838d1e0eb39fd51b37d", "url": "https://github.com/broadinstitute/picard/commit/2d05515aa91d7971442be838d1e0eb39fd51b37d", "message": "some cleanup", "committedDate": "2020-10-02T20:48:34Z", "type": "commit"}, {"oid": "7b3a592c26ac484f2a3cf23f7a8311701bbfd686", "url": "https://github.com/broadinstitute/picard/commit/7b3a592c26ac484f2a3cf23f7a8311701bbfd686", "message": "more comments", "committedDate": "2020-10-02T20:48:34Z", "type": "commit"}, {"oid": "d728a5a96592147799456a6d64403459be601d64", "url": "https://github.com/broadinstitute/picard/commit/d728a5a96592147799456a6d64403459be601d64", "message": "another test", "committedDate": "2020-10-02T20:48:35Z", "type": "commit"}, {"oid": "d2a0aa7bf23538a6bc59ccc745b52486e09de80e", "url": "https://github.com/broadinstitute/picard/commit/d2a0aa7bf23538a6bc59ccc745b52486e09de80e", "message": "variable name change for clarity", "committedDate": "2020-10-02T20:48:35Z", "type": "commit"}, {"oid": "9722b0a3fe204074e6afa818c211b4a911e686f9", "url": "https://github.com/broadinstitute/picard/commit/9722b0a3fe204074e6afa818c211b4a911e686f9", "message": "test to demonstrate edge case change", "committedDate": "2020-10-02T20:48:35Z", "type": "commit"}, {"oid": "20b20e9f0e515ce6bfc17aae956c3c2f7319aae9", "url": "https://github.com/broadinstitute/picard/commit/20b20e9f0e515ce6bfc17aae956c3c2f7319aae9", "message": "ascii art", "committedDate": "2020-10-02T20:48:35Z", "type": "commit"}, {"oid": "c6cce2bdb473a959774fe686420aed15fe91351f", "url": "https://github.com/broadinstitute/picard/commit/c6cce2bdb473a959774fe686420aed15fe91351f", "message": "review comments", "committedDate": "2020-10-02T20:48:35Z", "type": "commit"}, {"oid": "3d001dbef722d595afef93e717bbabe18d4257b6", "url": "https://github.com/broadinstitute/picard/commit/3d001dbef722d595afef93e717bbabe18d4257b6", "message": "spaces", "committedDate": "2020-10-02T20:48:35Z", "type": "commit"}, {"oid": "3d001dbef722d595afef93e717bbabe18d4257b6", "url": "https://github.com/broadinstitute/picard/commit/3d001dbef722d595afef93e717bbabe18d4257b6", "message": "spaces", "committedDate": "2020-10-02T20:48:35Z", "type": "forcePushed"}]}